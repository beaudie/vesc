{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2a6756ea_e8d2e261",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-15T20:25:54Z",
      "side": 1,
      "message": "Ah, ok I understand better now the whole thing about initializing an egl::Display.\n\nUltimately, it\u0027ll be best if EGL objects don\u0027t leak into the CL implementation. I realize that we didn\u0027t do a good job of making `RendererVk` independent of `DisplayVk`, but it\u0027ll probably not be too hard to make that separation.\n\nI understand the only thing you need from the display is `RendererVk`, right? I won\u0027t block this change over it, but at some point we should probably do something like this:\n\n- Make an abstraction for what RendererVk needs from DisplayVk\n- Make CLPlatform and CLPlatformVk initialize the same things as Display and DisplayVk to satisfy that abstraction\n- RendererVk could then use either DisplayVk or CLPlatformVk through that abstraction.\n\nI see a bunch of places in RendererVk where the used display is really used as a vk::Context, I suspect the abstraction would be rather small. It needs some init info (like egl attributes, but pre-processed so they are not _egl_ stuff), the blob cache (which doesn\u0027t exist for CL?), etc.\n\n---\n\nSomething to keep in mind. If you find the time to do that at some point, it\u0027d be greatly appreciated. Otherwise I might take it upon myself to clean things up (and accidentally break CL üòÑ)",
      "revId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d6f0221_9b3edce5",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-02-16T17:54:05Z",
      "side": 1,
      "message": "\u003e I understand the only thing you need from the display is RendererVk, right?\n\nYep, that is correct.\n\nYeah, agreed on all your other points as well. üëç",
      "parentUuid": "2a6756ea_e8d2e261",
      "revId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba40a8fefcb97696a2d5da35899d7bcda3e61122",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}