{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "16d0e004_2aaf55eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-12T02:18:46Z",
      "side": 1,
      "message": "LGTM, but I haven\u0027t looked too deep. Leaving to Roman to verify.",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d85e46e8_5d9488d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-12T14:57:59Z",
      "side": 1,
      "message": "Looking great, thanks Mohan! Just a few nits.",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3009734_a96bfd61",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1111,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-12T14:57:59Z",
      "side": 1,
      "message": "Let\u0027s make the variable name `mIsTerminated` reflect the condition above. Something like `mTerminatedByApi` / `mEglTerminateCalled` / etc? Also I noticed the other variable name is `mInitialized` not `mIsInitialized` so we should probably drop `Is` here for consistency.",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82acc163_1c42ed56",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1111,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-12T23:27:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3009734_a96bfd61",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f9620cf_35689a50",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1146,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-12T14:57:59Z",
      "side": 1,
      "message": "Shouldn\u0027t the \"If no contexts are current on any thread or\" part be removed now given that we require that `eglTerminate` had been called?",
      "range": {
        "startLine": 1146,
        "startChar": 43,
        "endLine": 1146,
        "endChar": 83
      },
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edf730c3_23a4b76d",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1146,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-12T23:27:09Z",
      "side": 1,
      "message": "Done. Also converted checking `mIsTerminated` into an assert since we are guaranteed that `TerminateReason::NoActiveThreads` implies `mIsTerminated \u003d\u003d true`",
      "parentUuid": "1f9620cf_35689a50",
      "range": {
        "startLine": 1146,
        "startChar": 43,
        "endLine": 1146,
        "endChar": 83
      },
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "059d9e00_9b2e1658",
        "filename": "src/libANGLE/Thread.cpp",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-12T14:57:59Z",
      "side": 1,
      "message": "How about moving the block below inside this function? This will make Display better encapsulated - we can drop `hasActiveThreads` and `isTerminated` from its api.",
      "range": {
        "startLine": 31,
        "startChar": 17,
        "endLine": 31,
        "endChar": 35
      },
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5578e074_392be049",
        "filename": "src/libANGLE/Thread.cpp",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-12T23:27:09Z",
      "side": 1,
      "message": "i have made the modifications, with some tweaks. let me know what you think",
      "parentUuid": "059d9e00_9b2e1658",
      "range": {
        "startLine": 31,
        "startChar": 17,
        "endLine": 31,
        "endChar": 35
      },
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e73c4a70_257e12c9",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 12
      },
      "lineNbr": 673,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-12T16:24:52Z",
      "side": 1,
      "message": "Also now that the thread set is made thread-safe, maybe these pass? Otherwise, please open a new bug, explaining how they fail.",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db6e274d_0212bb67",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 12
      },
      "lineNbr": 673,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-12T23:27:09Z",
      "side": 1,
      "message": "Done. Removed all skips and will give it a try\n\nedit: looks like swiftshader continues to error out with the followin error -\n\n[ RUN      ] EGLMultiContextTest.ReuseUnterminatedDisplay/ES3_1_Vulkan_SwiftShader_AsyncCommandQueue\nERR: RendererVk.cpp:144 (VerifyExtensionsPresent): Extension not supported: VK_KHR_surface\nERR: RendererVk.cpp:144 (VerifyExtensionsPresent): Extension not supported: VK_KHR_surface\nERR: RendererVk.cpp:144 (VerifyExtensionsPresent): Extension not supported: VK_KHR_win32_surface\nERR: RendererVk.cpp:144 (VerifyExtensionsPresent): Extension not supported: VK_KHR_win32_surface\nERR: Display.cpp:993 (initialize): ANGLE Display::initialize error 0: Internal Vulkan error (-7): A requested extension is not supported, in ..\\..\\src\\libANGLE\\renderer\\vulkan\\RendererVk.cpp, initialize:1515.\nERR: Display.cpp:993 (initialize): ANGLE Display::initialize error 0: Internal Vulkan error (-7): A requested extension is not supported, in ..\\..\\src\\libANGLE\\renderer\\vulkan\\RendererVk.cpp, initialize:1515.\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(414): error: Expected equality of these values:\n  static_cast\u003cEGLBoolean\u003e(1)\n    Which is: 1\n  static_cast\u003cEGLBoolean\u003e(l_eglInitialize(dpy, nullptr, nullptr))\n    Which is: 0\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(77): error: Expected equality of these values:\n  static_cast\u003cEGLBoolean\u003e(1)\n    Which is: 1\n  static_cast\u003cEGLBoolean\u003e(result \u0026\u0026 (count \u003e 0))\n    Which is: 0\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(424): error: Value of: chooseConfig(dpy, \u0026config)\n  Actual: false\nExpected: true\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(103): error: Value of: result\n  Actual: false\nExpected: true\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(426): error: Value of: createPbufferSurface(dpy, config, 2560, 1080, \u0026srf)\n  Actual: false\nExpected: true\n..\\..\\src\\tests\\egl_tests\\EGLMultiContextTest.cpp(427): error: Expected equality of these values:\n  (0x3000)\n    Which is: 12288\n  l_eglGetError()\n    Which is: 12289\neglCreatePbufferSurface failed.\n[  FAILED  ] EGLMultiContextTest.ReuseUnterminatedDisplay/ES3_1_Vulkan_SwiftShader_AsyncCommandQueue, where GetParam() \u003d ES3_1_Vulkan_SwiftShader_AsyncCommandQueue (140 ms)",
      "parentUuid": "e73c4a70_257e12c9",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1e50fb7_8645212c",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 12
      },
      "lineNbr": 673,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-13T14:50:43Z",
      "side": 1,
      "message": "ES3_1_Vulkan failing as well on my laptop, also due to a missing extension:\n\n```\n[ RUN      ] EGLMultiContextTest.ReuseUnterminatedDisplay/ES3_1_Vulkan\n../../src/tests/test_utils/ANGLETest.cpp:65: Failure\nRendererVk.cpp:144 (VerifyExtensionsPresent): Extension not supported: VK_KHR_surface\n```\n\nI don\u0027t know enough about extensions, but isn\u0027t it weird that we\u0027re missing VK_KHR_surface on Vulkan?",
      "parentUuid": "db6e274d_0212bb67",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eeb244f_6fa09464",
        "filename": "src/tests/egl_tests/EGLMultiContextTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 428,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-12T14:57:59Z",
      "side": 1,
      "message": "Could you add a comment describing how this test fails if `threadA` termination causes cleanup? Does makeCurrent or some other api call validate that the display wasn\u0027t fully terminated?",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "324a9603_ec6ef62a",
        "filename": "src/tests/egl_tests/EGLMultiContextTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 428,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-12T23:27:09Z",
      "side": 1,
      "message": "Done.\n\nAlmost all EGL API calls will validate the display. Here `chooseConfig` itself would fail with invalid display error.",
      "parentUuid": "4eeb244f_6fa09464",
      "revId": "44fc30a22339f070803727ba0529d29beab14f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}