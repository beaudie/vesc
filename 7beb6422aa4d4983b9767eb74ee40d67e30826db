{
  "comments": [
    {
      "key": {
        "uuid": "8eb6a5d7_844e8b53",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-05T16:50:51Z",
      "side": 1,
      "message": "I think words is machine dependent size. On Win WORD is 16 bits. Maybe use \"bytes\"?",
      "range": {
        "startLine": 233,
        "startChar": 26,
        "endLine": 233,
        "endChar": 31
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fa89d52_5e64ba3b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8eb6a5d7_844e8b53",
      "range": {
        "startLine": 233,
        "startChar": 26,
        "endLine": 233,
        "endChar": 31
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f92c32a8_5fde8253",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-05T16:50:51Z",
      "side": 1,
      "message": "I couldn\u0027t understand what \"shifted\" means here without context.\nCan I suggest halfByteIndex for the parameter and byteIndex for the variable?",
      "range": {
        "startLine": 235,
        "startChar": 13,
        "endLine": 235,
        "endChar": 25
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e43a74af_2a953a00",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Did a bunch of renaming. PTAL.",
      "parentUuid": "f92c32a8_5fde8253",
      "range": {
        "startLine": 235,
        "startChar": 13,
        "endLine": 235,
        "endChar": 25
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfabc305_49bffe64",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "16?",
      "range": {
        "startLine": 236,
        "startChar": 19,
        "endLine": 236,
        "endChar": 21
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f44f379b_344688ab",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfabc305_49bffe64",
      "range": {
        "startLine": 236,
        "startChar": 19,
        "endLine": 236,
        "endChar": 21
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8507d501_ef9741de",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-05T16:50:51Z",
      "side": 1,
      "message": "Is there a rule that you have to pack color first, and only the depth and stencil?",
      "range": {
        "startLine": 312,
        "startChar": 0,
        "endLine": 312,
        "endChar": 50
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c95703e4_eaacaf6b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-05T16:51:37Z",
      "side": 1,
      "message": "and only then depth and stencil",
      "parentUuid": "8507d501_ef9741de",
      "range": {
        "startLine": 312,
        "startChar": 0,
        "endLine": 312,
        "endChar": 50
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42050230_6790faf1",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Added comment. There can\u0027t be separate depth/stencil in vulkan.",
      "parentUuid": "c95703e4_eaacaf6b",
      "range": {
        "startLine": 312,
        "startChar": 0,
        "endLine": 312,
        "endChar": 50
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "819bd6da_c730cc8f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T16:23:25Z",
      "side": 1,
      "message": "TODO logged here.",
      "range": {
        "startLine": 373,
        "startChar": 0,
        "endLine": 373,
        "endChar": 81
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "592670d7_249806f9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-06T16:38:16Z",
      "side": 1,
      "message": "nit: this is about GL enums, while we also need to pack Vk enums",
      "parentUuid": "819bd6da_c730cc8f",
      "range": {
        "startLine": 373,
        "startChar": 0,
        "endLine": 373,
        "endChar": 81
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f63de9f2_ce0c4ba2",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T17:06:36Z",
      "side": 1,
      "message": "Technically internal enums that are equivalent to the set of all relevant GLenums which is probably a subset (or superset) or Vk enums. To be totally pedantic.",
      "parentUuid": "592670d7_249806f9",
      "range": {
        "startLine": 373,
        "startChar": 0,
        "endLine": 373,
        "endChar": 81
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f303cf5b_9f0f2abe",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "This (and the few after this) are 4-bit numbers. Why are they ValidatedCast to uint16_t? I think it\u0027s better to have another form of ValidatedCast that takes the number of bits too, and checks that specifically.\n\nSome extremely ugly magic might make getting the number of bits in the bitfield automatic, but I\u0027m not sure I\u0027d want to even think about that ;)",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4992451c_a6367352",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Good point. I addressed this through macro magic instead. The macro checks that the resulting number is the same as the input. Should be foolproof and doesn\u0027t require explicitly storing the bit count.\n\nNote that the spec does guarantee the result of an overflow is the modulus.",
      "parentUuid": "f303cf5b_9f0f2abe",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "669acf8a_23bd7152",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 402,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "Here too. There are more, I won\u0027t tag them all.",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13579bb4_9ab73786",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 402,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "669acf8a_23bd7152",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0087c350_b9565e96",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 425,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "`blendEnableMask` is uninitialized.",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb5ff5ad_7fe58778",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 425,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0087c350_b9565e96",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "986ed7b7_8dd6625b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "16 maybe?",
      "range": {
        "startLine": 72,
        "startChar": 23,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e872af0_76fa58a2",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-05T16:50:51Z",
      "side": 1,
      "message": "I think, IMPLEMENTATION_MAX_FRAMEBUFFER_ATTACHMENTS, actually. Which is 10.\nBut, std::array is supposed to check this automatically. Or, is this a no-op since we compile without exceptions enabled?",
      "parentUuid": "986ed7b7_8dd6625b",
      "range": {
        "startLine": 72,
        "startChar": 23,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc0d610b_f8e0e8ae",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "std::array doesn\u0027t check this automatically in release. But on our bots ASSERT will work.\n\nFixed to a named constant. 9 is correct since it\u0027s max_draw_buffers (8) + 1 for the single depth/stencil. PTAL",
      "parentUuid": "7e872af0_76fa58a2",
      "range": {
        "startLine": 72,
        "startChar": 23,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eda6ed92_05ca1b6f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-05T16:31:40Z",
      "side": 1,
      "message": "From what I see in the specs:\n- Write Mask Bits: needs 4 bits.\n- Blend Factor: The enum has values from 0 through 18, so needs 5 bits.\n- Blend Op: Ignoring extensions, the enum has values from 0 through 4, so needs 3 bits.\n\nIf you do something like this:\n\nstruct PackedColorBlendAttachmentState final\n{\n    uint8_t blendEnable : 1;\n    uint8_t srcColorBlendFactor : 5;\n    uint8_t dstColorBlendFactor : 5;\n    uint8_t colorBlendOp : 3;\n    uint8_t srcAlphaBlendFactor : 5;\n    uint8_t dstAlphaBlendFactor : 5;\n    uint8_t alphaBlendOp : 3;\n    uint8_t colorWriteMask : 4;\n    uint8_t padding : 1;\n};\n\nYou will be able to pack the whole thing in a 32-bit number, and then keep an array here. Right now you have 36 bits per attachment state (+ one enable mask for all). The slight size save aside, writing or reading the state becomes a single memory access.",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da641041_efa0d712",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T12:45:59Z",
      "side": 1,
      "message": "Good observation that the blend factors need 5 bits. Unfortunately your packing scheme isn\u0027t quite perfect either as the blend ops need 6 bits for the possible 50+ value from the extended blend modes. I packed this instead a bit differently, PTAL.",
      "parentUuid": "eda6ed92_05ca1b6f",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93ca5732_88125833",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-06T15:21:51Z",
      "side": 1,
      "message": "I noticed the numerous cases of extended blend modes. Their values are all like 1 billion something, so simply storing them in 6 bits (or 4 bits as you did before) won\u0027t work. That\u0027s why I figured you are ignoring the values that come from the extensions because we don\u0027t support them.\n\nIf we do support them, this still won\u0027t work.",
      "parentUuid": "da641041_efa0d712",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a63d69bf_0d8b86cb",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-06T15:29:56Z",
      "side": 1,
      "message": "I think there are 51 blend ops, which should fit into 6 bits.\nWe just need to ignore Vk spec values and store our own.\nFor now, I think we use only 3 ops, so it should work.",
      "parentUuid": "93ca5732_88125833",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5680e034_b521891d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-06T16:23:25Z",
      "side": 1,
      "message": "Yuly is correct. We have transitioned a good portion of GLenums to packed enums. See http://anglebug.com/2169 . Once we do this we can store the ANGLE enum instead of the GL or Vulkan enum. Like we do for formats. I have a TODO for this so we shouldn\u0027t lose track of it when we get to ES 3.1+.",
      "parentUuid": "a63d69bf_0d8b86cb",
      "revId": "7beb6422aa4d4983b9767eb74ee40d67e30826db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}