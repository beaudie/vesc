{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b90ce0c6_caad1f03",
        "filename": "src/libANGLE/renderer/metal/ContextMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 2257,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-05-20T19:59:07Z",
      "side": 1,
      "message": "This logic doesn\u0027t work in some cases. Frontend can change draw framebuffer without notifying backend ContextMtl. Example:\n- glBindFramebuffer(1);\n- draw -\u003e ContextMtl gets notified and `mDrawFramebuffer` points to fbo 1.\n- glBindFramebuffer(2);\n- attach a texture to fbo 2.\n- readPixels -\u003e FrameBufferMtl::syncState() is called, but ContextMtl won\u0027t be notified by frontend. In [1] we indirectly notify ContextMtl about this but we don\u0027t change its `mDrawFramebuffer`. This consequently modifies current scissor rect to be within fbo 2\u0027s bounds [2]\n. glBindFramebuffer(1).\n- draw -\u003e `ContextMtl::updateDrawBufferBinding` is called, but because `mDrawFramebuffer` wasn\u0027t changed, the code early returns and misses the change to update the scissor rect to be fbo 1\u0027s bounds.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/metal/FrameBufferMtl.mm;drc\u003dc0265133106c7647e90f9aaa4377d28190b1a6a9;l\u003d809\n[2] https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/metal/ContextMtl.mm;drc\u003dc0265133106c7647e90f9aaa4377d28190b1a6a9;l\u003d2278",
      "revId": "3cebb45dab9b4dff5ecc00ec1c400c6d022b542e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bff212a1_2b2a2715",
        "filename": "src/libANGLE/renderer/metal/ContextMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 2257,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-21T01:38:30Z",
      "side": 1,
      "message": "In vulkan/ we close the render pass when `FramebufferVk::syncState` detects that draw framebuffer has changed. That helps. Also, specifically for `readPixels`, because that\u0027s the _read_ framebuffer, you shouldn\u0027t actually update the current scissor!\n\nYour point stands, keeping the render pass open is _very_ tricky (at least in combination with a bunch of other optimizations we have in vulkan/), so I agree it ultimately won\u0027t be as simple as this.\n\nAnd please please please add tests when scenarios like this come up in code review.",
      "parentUuid": "b90ce0c6_caad1f03",
      "revId": "3cebb45dab9b4dff5ecc00ec1c400c6d022b542e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d16b8e3a_343b5ec6",
        "filename": "src/libANGLE/renderer/metal/ContextMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 2257,
      "author": {
        "id": 1546942
      },
      "writtenOn": "2024-05-21T08:31:28Z",
      "side": 1,
      "message": "Thanks for the feedback. I\u0027ll definitely add tests.\n\nI\u0027m trying to get the same point as vulkan/ where we can optimise the resolve from MSAA to use the MTLRenderPassDescriptor resolve pass, followed by skipping the MSAA store by issuing glInvalidateFramebuffer.\n\nPlease let me know if this is already being worked on for Metal to avoid double up.",
      "parentUuid": "bff212a1_2b2a2715",
      "revId": "3cebb45dab9b4dff5ecc00ec1c400c6d022b542e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe343825_dc2d5728",
        "filename": "src/libANGLE/renderer/metal/ContextMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 2257,
      "author": {
        "id": 1546942
      },
      "writtenOn": "2024-05-21T08:35:51Z",
      "side": 1,
      "message": "Also, I noticed that the Vulcan backend checks the queue serial, not that the same framebuffer is being rebound. The Metal backend has serials for buffers, not framebuffers. Is that correct?",
      "parentUuid": "d16b8e3a_343b5ec6",
      "revId": "3cebb45dab9b4dff5ecc00ec1c400c6d022b542e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}