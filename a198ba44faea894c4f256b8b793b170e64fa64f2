{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9dcba549_e906e65c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 2152,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-12T02:38:19Z",
      "side": 1,
      "message": "Code smell: This class is keeping a reference to a refcounted object, but it\u0027s not actually contributing to the ref count.",
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17805054_9ebdd7fd",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 2152,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-07-12T16:26:22Z",
      "side": 1,
      "message": "Its really an opaque pointer. I can make it also retain it for now. I do want to remove this pointer completely and make the cache only knows about descriptorSet in the future CL.",
      "parentUuid": "9dcba549_e906e65c",
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e7e3e1d_95075cda",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 2152,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-07-12T16:42:45Z",
      "side": 1,
      "message": "Its not that anti-pattern as well, if you look at     \nclass DynamicDescriptorPool final : angle::NonCopyable\n{\n...\nstd::vector\u003cRefCountedDescriptorPoolHelper *\u003e mDescriptorPools;\n..\n}\n\nmDescriptorPools also does not retain the refcounted object as well. This usage here is exact the same kind of usage. \n\nFrom reference counting point of view, let cache not retain an object is not a bad idea. If we use c++ smart pointer, these will be much obvious, but without smart pointer, we kind of have to live with a slight odd stituation. Will a comment here explaining why it is not retained/released acceptable for now?",
      "parentUuid": "17805054_9ebdd7fd",
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ac2868f_15da2502",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 2152,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-14T16:21:36Z",
      "side": 1,
      "message": "Chatted offline. Yes a comment would be good, thanks.",
      "parentUuid": "6e7e3e1d_95075cda",
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f6123b2_e3953b42",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 2152,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-07-14T17:17:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ac2868f_15da2502",
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ae2e9a_012ad19f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3421,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-12T02:38:19Z",
      "side": 1,
      "message": "`getRefCounted` looks like an anti-pattern. Aren\u0027t we able to tell what the binding is referencing already? If it\u0027s already valid, would it still be `mDescriptorPools[mCurrentPoolIndex]` as is the case when not valid?",
      "range": {
        "startLine": 3421,
        "startChar": 69,
        "endLine": 3421,
        "endChar": 96
      },
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33f9c922_436edd80",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3421,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-07-12T16:26:22Z",
      "side": 1,
      "message": "If bindingOut-\u003evalid() is true, then you still need to extract out the refcounted object out of bindingOut. If you look at RefCountedDescriptorPoolBinding, it has a    set API that takes refcounted object\n void set(RefCounted\u003cT\u003e *refCounted)\n\nBut the get API returns the underline T object\n    T \u0026get() { return mRefCounted-\u003eget(); }\n\nIn this case, I need an API to return RefCounted\u003cT\u003e object. So it really is the original API is a bit anti-pattern. This just made it more orthogonal.\n\nAgain, similar to the other comment, my preference is to remove  RefCountedDescriptorPoolBinding in the future CL. So this should be short lived once the future CL comes out.",
      "parentUuid": "22ae2e9a_012ad19f",
      "range": {
        "startLine": 3421,
        "startChar": 69,
        "endLine": 3421,
        "endChar": 96
      },
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f94afe3_1114fde9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3421,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-14T16:21:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33f9c922_436edd80",
      "range": {
        "startLine": 3421,
        "startChar": 69,
        "endLine": 3421,
        "endChar": 96
      },
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7f2050e_7dfd82a9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3421,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-07-14T17:17:54Z",
      "side": 1,
      "message": "This can be cleaner if we are willing to modify BindingPointer class to override operator \u0027-\u003e\u0027 to return the underline object and use `get` to return the actual refCounted pointer, i.e, similar to semantics of std::unique_ptr or std::shared_ptr. But lets not touch that part in this CL.",
      "parentUuid": "3f94afe3_1114fde9",
      "range": {
        "startLine": 3421,
        "startChar": 69,
        "endLine": 3421,
        "endChar": 96
      },
      "revId": "a198ba44faea894c4f256b8b793b170e64fa64f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}