{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "739f340e_73d5608d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-21T03:23:21Z",
      "side": 1,
      "message": "LGTM after moving the struct functions to cpp",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e79d1f7f_fc4aedb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-21T04:06:14Z",
      "side": 1,
      "message": "+2 with Shabi\u0027s comments.",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "434fc69e_747ac159",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "Some stuff got missed so adding myself to the review.",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23728aea_d1b1ff45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:58:29Z",
      "side": 1,
      "message": "(Just went -1 to make sure this didn\u0027t get landed before Ian had a chance to respond to my comments)",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5737cc3a_88f03b0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-23T18:25:29Z",
      "side": 1,
      "message": "It was minutes away from landing.  I\u0027m on vacation, but this seemed so close).\n\nI\u0027d like agreement from Jamie and Shabi on whether to use a class with the methods in the class, or a struct accessed by anonymous functions in the cpp file.",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ff2d8b4_c4da5fb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T18:36:14Z",
      "side": 1,
      "message": "Sorry to hear that Ian! Please feel free to resume this when you come back. If people need to use it in the interim they can cherry-pick in your CL.",
      "parentUuid": "5737cc3a_88f03b0d",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e75e28e_20a267e0",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "can you get the same result without adding a new logging level?",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd0f5536_2cae7dc4",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-23T18:25:29Z",
      "side": 1,
      "message": "No.  This has been discussed in other comments.  Two issues:\n\n1) In the Android world, this is \"verbose\" data.\n\n2) Too many characters added to the output.  By default, Android prefixes every line of every message with 44 characters.  ANGLE\u0027s INFO adds another 37 characters (always the following, which is useless in Android logcat: \"INFO: Debug.cpp:183 (insertMessage): \").  EVENT only adds 7.  I\u0027m adding around 80 characters per callback.  I\u0027m also trying to look at code next to the logcat output.\n\nI originally bypassed ANGLE\u0027s mechanism all together.  I almost added another severity (VERBOSE) that would add 0 characters.  I tried to compromise by using the VERBOSE() macro with the EVENT severity.",
      "parentUuid": "6e75e28e_20a267e0",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae5997cc_c200c44f",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T18:33:01Z",
      "side": 1,
      "message": "Let\u0027s remove the extra characters from INFO instead, sound good?",
      "parentUuid": "dd0f5536_2cae7dc4",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebabb510_ce369006",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "ae5997cc_c200c44f",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e98991f_c15f086f",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:38:20Z",
      "side": 1,
      "message": "Just noticed that libEGL mirrors ANGLE\u0027s INFO messages, but not the EVENT messages.  Doubles the output:-(",
      "parentUuid": "ebabb510_ce369006",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4ad584e_dd06da67",
        "filename": "src/common/debug.h",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T23:06:58Z",
      "side": 1,
      "message": "Just took care of that in PS11",
      "parentUuid": "6e98991f_c15f086f",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 251,
        "endChar": 34
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3b994bf_cd7352e3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2767,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-21T03:23:21Z",
      "side": 1,
      "message": "Can drop the ;s if you are concerned with line length",
      "range": {
        "startLine": 2767,
        "startChar": 44,
        "endLine": 2767,
        "endChar": 45
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49eadbab_2f1035bb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2785,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "nit: also follow the style guide for type inference\n\nalso this can be const",
      "range": {
        "startLine": 2785,
        "startChar": 9,
        "endLine": 2785,
        "endChar": 14
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94f2e51c_e60b2489",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2785,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "tl;dr: I made const, and I seem to be following the Google C++ style guide by using typed variables for it.first and it.second (quoted below).\n\nI don\u0027t know what you\u0027re after.  I\u0027ve searched ANGLE source \u0026 Googled, which all seem to point to what I\u0027m doing.  All uses of angle::HashMap from code search use this same approach (most without the typed variables within the for loop).\n \nFrom the Google C++ style guide:\n\nTypes sometimes contain a mixture of useful information and boilerplate, such as it in the example above: it\u0027s obvious that the type is an iterator, and in many contexts the container type and even the key type aren\u0027t relevant, but the type of the values is probably useful. In such situations, it\u0027s often possible to define local variables with explicit types that convey the relevant information:\n\nif (auto it \u003d my_map_.find(key); it !\u003d my_map_.end()) {\n  WidgetWithBellsAndWhistles\u0026 widget \u003d *it-\u003esecond;\n  // Do stuff with `widget`\n}",
      "parentUuid": "49eadbab_2f1035bb",
      "range": {
        "startLine": 2785,
        "startChar": 9,
        "endLine": 2785,
        "endChar": 14
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b38a958_9f275d51",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2794,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "nit: also follow the style guide for type inference\n\nalso this can be const",
      "range": {
        "startLine": 2794,
        "startChar": 9,
        "endLine": 2794,
        "endChar": 14
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04ae7490_8720d60e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2794,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b38a958_9f275d51",
      "range": {
        "startLine": 2794,
        "startChar": 9,
        "endLine": 2794,
        "endChar": 14
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f00c98_5bc17d88",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "nit: don\u0027t use the vk suffix. also you should probably just make this a class instead of a struct and make the members private, something like MemoryTracker.",
      "range": {
        "startLine": 75,
        "startChar": 7,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b18cf0a0_2a5d5898",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T19:32:39Z",
      "side": 1,
      "message": "Oh, and suggest putting this in the vk namespace in lieu of the Vk suffix. (Vk suffix is really just for Impl classes like BufferVk that inherits from BufferImpl, etc, RendererVk is an anomaly and I\u0027ll eventually merge it with DisplayVk)",
      "parentUuid": "92f00c98_5bc17d88",
      "range": {
        "startLine": 75,
        "startChar": 7,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59c14b43_2ae7f7c6",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 75,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "I made it a class, took off \"Vk\" suffix, and put it in the \"vk\" namespace.  I started to rename it, but it seems to confuse things, as this is the \"memory report\" extension (i.e.  VK_EXT_device_memory_report) with \"report\" in types.  Hope that\u0027s okay.",
      "parentUuid": "b18cf0a0_2a5d5898",
      "range": {
        "startLine": 75,
        "startChar": 7,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1223fb61_8305f402",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-21T03:23:21Z",
      "side": 1,
      "message": "The functions don\u0027t need to be part of the struct. They should be anonymous in the cpp file that get passed a const \u0026.",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b3b8d19_1ae8f5fc",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-23T18:25:29Z",
      "side": 1,
      "message": "Sounds like you and Jamie aren\u0027t on the same page on where this code belongs.  I was almost done with this when he reviewed this.",
      "parentUuid": "1223fb61_8305f402",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "159ddf40_2465a2cb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T18:33:01Z",
      "side": 1,
      "message": "Well, it\u0027s a fairly tricky class that stores a mutex so I was thinking class. If it weren\u0027t for the mutex it\u0027d be mostly POD.",
      "parentUuid": "5b3b8d19_1ae8f5fc",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49821803_7485a97c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-23T19:21:38Z",
      "side": 1,
      "message": "Let\u0027s go with class. I didn\u0027t pay attention to the actual members (including the mutex)",
      "parentUuid": "159ddf40_2465a2cb",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd510459_957ec2c2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49821803_7485a97c",
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf066ef9_399cebab",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "nit: please follow the google c++ naming guide here. (can check on google), don\u0027t need to do this if you make this a proper class.",
      "range": {
        "startLine": 81,
        "startChar": 15,
        "endLine": 81,
        "endChar": 33
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5415d59e_98145e0c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf066ef9_399cebab",
      "range": {
        "startLine": 81,
        "startChar": 15,
        "endLine": 81,
        "endChar": 33
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc81552_f9c2f73f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 358,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-23T17:53:57Z",
      "side": 1,
      "message": "don\u0027t expose this data, make it private.",
      "range": {
        "startLine": 358,
        "startChar": 4,
        "endLine": 358,
        "endChar": 33
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "608e84b7_52486c29",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 9
      },
      "lineNbr": 358,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-30T22:30:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fc81552_f9c2f73f",
      "range": {
        "startLine": 358,
        "startChar": 4,
        "endLine": 358,
        "endChar": 33
      },
      "revId": "3509cfa103a9035a9430f334830b76e04c504a2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}