{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f30e9ce4_4460528b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-05T03:41:23Z",
      "side": 1,
      "message": "Working on this now. I believe at least keeping the current limitations of the emulation, it shouldn\u0027t take long.",
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffc5816b_d6529967",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 937,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-05T03:41:23Z",
      "side": 1,
      "message": "My understanding from the spec was that, even though a single color attachment can use advanced blend, it could be any index. Is that not correct?\n\nLike, if the shader has 4 color attachment outputs, and uses advanced blend for color attachment 2, is that not supposed to work?",
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "276d9afa_21af8bc9",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 534,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-24T02:27:36Z",
      "side": 1,
      "message": "Where does this come from? Also, sample rate shading is not the same as MSAA; it\u0027s when each sample is individually shaded, pretty sure it\u0027s irrelevant here.",
      "range": {
        "startLine": 534,
        "startChar": 7,
        "endLine": 534,
        "endChar": 60
      },
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396752e5_428a4cc8",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 534,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2022-02-24T19:36:59Z",
      "side": 1,
      "message": "Yes I believe you are correct. This comment should be removed.",
      "parentUuid": "276d9afa_21af8bc9",
      "range": {
        "startLine": 534,
        "startChar": 7,
        "endLine": 534,
        "endChar": 60
      },
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "572bd233_cc211eff",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-24T20:42:43Z",
      "side": 1,
      "message": "I presume MSAA is not supported because subpassInput is used (because shader doesn\u0027t know if it should use subpassInputMS). What did you do for this to get conformance?",
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1cdd883_dccb7cc1",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-05T03:41:23Z",
      "side": 1,
      "message": "Still curious to know how you could achieve conformance without MSAA support",
      "parentUuid": "572bd233_cc211eff",
      "revId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "1cd694be70e531791715aabe68d57d43b5bb8374",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}