{
  "comments": [
    {
      "key": {
        "uuid": "c720b084_0de371e2",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-23T03:34:23Z",
      "side": 1,
      "message": "Could use a better name.",
      "range": {
        "startLine": 106,
        "startChar": 55,
        "endLine": 106,
        "endChar": 67
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c07be857_fd953923",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.h",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-06-23T15:05:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c720b084_0de371e2",
      "range": {
        "startLine": 106,
        "startChar": 55,
        "endLine": 106,
        "endChar": 67
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3662cd16_e1329fbf",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-23T03:34:23Z",
      "side": 1,
      "message": "`if` is checking `context`, then assigns `mContext`, is that intentional?",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbd1c6d2_3cb7d35f",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-06-23T15:05:43Z",
      "side": 1,
      "message": "Yes, I\u0027ll explain how this works. There is one native context in the backend. When makeCurrent is called on some new thread, we need to call CGLSetCurrentContext with the backend\u0027s context in order for any gl calls to be made on that thread.\nIf we are running ANGLE with a single thread like most use cases we don\u0027t want any extra calls to CGLSetCurrentContext so this code here is basically caching this state. \nIt shouldn\u0027t be tracked with the frontend, because eventually we are going to add a new native context for each thread, so multiple threads can be used simultaneously. Also I\u0027m not sure this makes sense to track with the frontend, we still need to make sure the backend receives the makeCurrent call.",
      "parentUuid": "3662cd16_e1329fbf",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "852a3990_cb28ddc0",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-23T15:51:47Z",
      "side": 1,
      "message": "Could you turn that into a comment?\n\nHonestly though it\u0027s still not very clear to me. If makeCurrent(context) is called, I expect the new given `context` would be `newContext`, not some cached `mContext` value. Unless `mContext` is being updated just before this call to correspond to `context`? In other words, what I see here is that `makeCurrent(context)` is setting the context to `mContext` which, looking at this function alone, has no apparent connection to the given `context`.\n\n---\n\nOn front-end tracking: I\u0027m not familiar with the code, so I may be wrong, but my thinking was that the front-end should already map thread_id to context, so if you stored `CGLContextObj` in `ContextCGL`, then you could take that out of the given `context` here, and you wouldn\u0027t need another map in `DisplayCGL`.",
      "parentUuid": "dbd1c6d2_3cb7d35f",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71c53ba5_d64cdb67",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-06-23T15:56:43Z",
      "side": 1,
      "message": "I did add a comment, do you think I should add to it to make it clearer?\n\nThere is never an actual \"new context\" on the backend, since ANGLE always uses one native context for all its work. Contexts are virtualized on the frontend.\nmakeCurrent was essentially a no-op before. We are just setting the single native context to be current on the thread that\u0027s being used.\nYou\u0027re right that there\u0027s no apparent connection to the given context, which is by design.\n\nThis is less of a map right now, and more of a list of booleans saying which thread is currently active.\n\nIt will be a proper map to backend native contexts soon enough. But again there is no actual link between frontend context and backend contexts so we can\u0027t do any of this in the frontend.",
      "parentUuid": "852a3990_cb28ddc0",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a85d37a_caf9c52f",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-06-23T15:59:44Z",
      "side": 1,
      "message": "One way to think of it -- this isn\u0027t the \"context\" that the user is rendering to. That\u0027s tracked by the frontend/dirty bits.\nThis is just the context that ANGLE is using to render to.\nThe GL backend is a bit confusing with the naming sometimes because completely different objects are still technically the same names.",
      "parentUuid": "71c53ba5_d64cdb67",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcc41d6d_feb48e20",
        "filename": "src/libANGLE/renderer/gl/cgl/DisplayCGL.mm",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-23T16:15:40Z",
      "side": 1,
      "message": "Ok I see, I guess it\u0027s something like GL Context vs Vulkan Queue that we have in the Vulkan backend.\n\nLGTM then.",
      "parentUuid": "5a85d37a_caf9c52f",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 248,
        "endChar": 5
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e249bbc0_abfc979a",
        "filename": "src/tests/gl_tests/MultithreadingTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-23T03:34:23Z",
      "side": 1,
      "message": "Update comment",
      "range": {
        "startLine": 207,
        "startChar": 20,
        "endLine": 207,
        "endChar": 31
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c829dbae_95b95c02",
        "filename": "src/tests/gl_tests/MultithreadingTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-06-23T15:05:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e249bbc0_abfc979a",
      "range": {
        "startLine": 207,
        "startChar": 20,
        "endLine": 207,
        "endChar": 31
      },
      "revId": "035f3872fab5a3c1568c6dfd0b6ea023a699104a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}