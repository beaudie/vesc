{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "358f5329_85b83c0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-13T21:18:20Z",
      "side": 1,
      "message": "I don\u0027t understand how/why iOS is so different. I think there\u0027s something subtle I misunderstand here. I\u0027m hopefuly we can do it without needing to introduce a public headers concept. Because I already coded a bunch of \"headers\" targets to fix gn check.",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b52a5e_d4b2a9a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-13T21:25:54Z",
      "side": 1,
      "message": "If you look at template(\"ios_framework_bundle\") in https://source.chromium.org/chromium/chromium/src/+/master:build/config/ios/rules.gni, it creates a bunch of targets instead of just 1 shared library.\n\nWithout my change, \"gn gen --check\" gives errors like:\n\nERROR at //third_party/angle/src/feature_support_util/feature_support_util_unittest.cpp:12:11: Can\u0027t include this header from here.\n#include \"feature_support_util.h\"\n          ^---------------------\nThe target:\n  //third_party/angle/src/tests:angle_unittests_arch_executable_sources\nis including a file from the target:\n  //third_party/angle:libfeature_support_framework_arch_shared_library_sources\n\nIt\u0027s usually best to depend directly on the destination target.\nIn some cases, the destination target is considered a subcomponent\nof an intermediate target. In this case, the intermediate target\nshould depend publicly on the destination to forward the ability\nto include headers.\n\nDependency chain (there may also be others):\n  //third_party/angle/src/tests:angle_unittests_arch_executable_sources --\u003e\n  //third_party/angle:libfeature_support --\u003e\n  //third_party/angle:libfeature_support_framework+bundle --\u003e\n  //third_party/angle:libfeature_support_framework --\u003e\n  //third_party/angle:libfeature_support_framework_signed_bundle --\u003e\n  //third_party/angle:libfeature_support_framework_shared_library --[private]--\u003e\n  //third_party/angle:libfeature_support_framework_arch_shared_library --[private]--\u003e\n  //third_party/angle:libfeature_support_framework_arch_shared_library_sources\n\nBy defining public_headers variable, I get ios_framework_bundle to also create *_framework_headers target. Then I add it to public_deps of the target which is the shared_library on non-iOS",
      "parentUuid": "358f5329_85b83c0e",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ea71e04_3c3d6fdc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-13T22:02:23Z",
      "side": 1,
      "message": "This is a bug in ios/rules.gni - it should be using public_deps to ensure that the sources are visible between angle:libfeature_support_framework_signed_bundle, angle:libfeature_support_framework_shared_library, and angle:libfeature_support_framework_arch_shared_library_sources. The file is pretty complex so it\u0027s not clear exactly which deps should be changed to public_deps.\n\nWhy wasn\u0027t this detected? Chrome doesn\u0027t use gn check in many places and ANGLE does.\n\nI suggest instead working around this by overriding deps -\u003e public_deps in angle.gni test target for ios only and filing a bug/todo that we should remove this if the upstream bug ever gets fixed.",
      "parentUuid": "66b52a5e_d4b2a9a3",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e677b98_9382819c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-13T22:37:17Z",
      "side": 1,
      "message": "I don\u0027t see where changing deps to public_deps would fix the issue.\nCould you point this out?\n\nRegarding your suggestion to fix this in ios/rules.gni - I think the private deps are intentional, otherwise I don\u0027t see a reason to create _framework_headers target, if you could just include the sources.",
      "parentUuid": "5ea71e04_3c3d6fdc",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "088af6d8_dc2bb5fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-13T23:16:53Z",
      "side": 1,
      "message": "Here is what ios_framework_bundle doc says:\n\n#     public_headers:\n#         (optional) list of paths to header file that needs to be copied\n#         into the framework bundle Headers subdirectory. If omitted or\n#         empty then the Headers subdirectory is not created.\n\nLooks like you can include files from a different bundle only if these files are in the Headers subdirectory in the bundle?\nhttps://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html\n\nSo, IMO, defining \"public_headers\" variable is unavoidable.",
      "parentUuid": "8e677b98_9382819c",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b085e3c_99dec3d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-14T14:43:34Z",
      "side": 1,
      "message": "public_headers is for making your own framework where other people are going to consume your headers after you ship your framework. the build works without the gn check passing, gn check is just some gn special tool to make sure your build dependencies are set up correctly so if you modify a file it forces the dependencies to rebuild correctly, and that they are visible to one another legally.\n\npublic_deps would fix the issue, see the error message:\n\nDependency chain (there may also be others):\n\n  //third_party/angle/src/tests:angle_unittests_arch_executable_sources --\u003e\n  //third_party/angle:libfeature_support --\u003e\n  //third_party/angle:libfeature_support_framework+bundle --\u003e\n  //third_party/angle:libfeature_support_framework --\u003e\n  //third_party/angle:libfeature_support_framework_signed_bundle --\u003e\n  //third_party/angle:libfeature_support_framework_shared_library --[private]--\u003e\n  //third_party/angle:libfeature_support_framework_arch_shared_library --[private]--\u003e\n  //third_party/angle:libfeature_support_framework_arch_shared_library_sources\n\nthe non-private are public-deps and the [private] are just normal deps. It\u0027s a bug because your \u0027deps\u0027 are first-level dependencies in the unit tests and this check is failing. i.e. deps does absolutely nothing with this gn template rule for gn check.",
      "parentUuid": "088af6d8_dc2bb5fe",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62eacc01_3c42fae4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-15T15:25:18Z",
      "side": 1,
      "message": "Given that https://chromium-review.googlesource.com/c/chromium/src/+/2626423 was rejected, I still think this is our best option.\n\nWe could also go with the suggestion made in https://chromium-review.googlesource.com/c/chromium/src/+/2626423 to split our headers into a separate target. The drawback is that targets depending on a shared library will also have to depend on the headers target. Having just the shared library depend on the headers won\u0027t work, since targets that depend on ios_framework_bundle will only have private dependency on the shared library.\n\nThere is also a hacky one-line solution, going contrary to the rejection reason in https://chromium-review.googlesource.com/c/chromium/src/+/2626423 - instead of adding\n        public_deps +\u003d [ \":${internal_target_name}_framework_headers\" ]\nadd\n        public_deps +\u003d [ \":${internal_target_name}_arch_shared_library_sources\" ]",
      "parentUuid": "8b085e3c_99dec3d5",
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "743b712f_1f1aab91",
        "filename": "gni/angle.gni",
        "patchSetId": 1
      },
      "lineNbr": 309,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-13T21:18:20Z",
      "side": 1,
      "message": "this is a bit too general for a specific issue. I\u0027d suggest just making a specific libglesv2_headers target or template target and making that a public_deps of the libGLESv2 specializations.",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 309,
        "endChar": 7
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f1a6303_83271871",
        "filename": "gni/angle.gni",
        "patchSetId": 1
      },
      "lineNbr": 309,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-13T21:32:12Z",
      "side": 1,
      "message": "The \"specific libglesv2_headers target\" is created by template(\"ios_framework_bundle\") and is named libGLESv2_framework_framework_headers.\nHere I make it a public_deps of libGLESv2, so that anyone who depends on libGLESv2 also has access to it\u0027s headers.\n\nWhy do you think the issue is specific? This applies to any wannabe shared_library on iOS.",
      "parentUuid": "743b712f_1f1aab91",
      "range": {
        "startLine": 305,
        "startChar": 0,
        "endLine": 309,
        "endChar": 7
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "241ad681_50905c2f",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-13T21:18:20Z",
      "side": 1,
      "message": "For consistency we can use all of the headers in libglesv2 and just call this libglesv2_headers. There\u0027s no real public/private separation here. As it stands only using 4 of the headers is a bit selective.",
      "range": {
        "startLine": 524,
        "startChar": 17,
        "endLine": 524,
        "endChar": 46
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1560a3c8_d67c4f18",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-13T21:32:12Z",
      "side": 1,
      "message": "I don\u0027t mind adding the rest, but looks like they are not used outside of libGLESv2",
      "parentUuid": "241ad681_50905c2f",
      "range": {
        "startLine": 524,
        "startChar": 17,
        "endLine": 524,
        "endChar": 46
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a6ffc91_f3eab879",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-15T15:42:48Z",
      "side": 1,
      "message": "Where are these used? libEGL?",
      "parentUuid": "1560a3c8_d67c4f18",
      "range": {
        "startLine": 524,
        "startChar": 17,
        "endLine": 524,
        "endChar": 46
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e45779_94b938a9",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-01-15T15:43:54Z",
      "side": 1,
      "message": "libGLESv1_CM",
      "parentUuid": "1a6ffc91_f3eab879",
      "range": {
        "startLine": 524,
        "startChar": 17,
        "endLine": 524,
        "endChar": 46
      },
      "revId": "65df8447874a8fc83a75947853983638619d2c9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}