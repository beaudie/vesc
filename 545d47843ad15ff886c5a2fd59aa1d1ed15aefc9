{
  "comments": [
    {
      "key": {
        "uuid": "d7f323d2_92f3b1c8",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "this seems like a useful class, we might want to refine the API and put it in a shared place.",
      "range": {
        "startLine": 17,
        "startChar": 6,
        "endLine": 17,
        "endChar": 15
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64e94e32_06954684",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "this is an odd constructor. what\u0027s the intent? to fill with semi-random data? maybe you should comment that... or just use the default constructor and add a method to set it with semi-random data to avoid constructor overload confusion.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 28,
        "endChar": 5
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bca63af_99d0c0a1",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "how about passing in a texture handle so it doesn\u0027t rely on the GL state? also you can explicitly name this toTexture2D since it doesn\u0027t work for any other type.",
      "range": {
        "startLine": 30,
        "startChar": 9,
        "endLine": 30,
        "endChar": 18
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a87f29e_1d9634ef",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "we should avoid overloading method names in general, instead using specific names. Can you rename one or both of the read members to be more specific?",
      "range": {
        "startLine": 47,
        "startChar": 9,
        "endLine": 47,
        "endChar": 13
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "577a6f96_2dc86d34",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "the style guide suggests using pointers instead of non-const \u0026. \n\nhttps://google.github.io/styleguide/cppguide.html#Reference_Arguments\n\nANGLE exceptions:\n\nhttps://chromium.googlesource.com/angle/angle/+/HEAD/doc/CodingStandard.md",
      "range": {
        "startLine": 62,
        "startChar": 31,
        "endLine": 62,
        "endChar": 48
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c441ca0b_c62c1df6",
        "filename": "src/tests/gl_tests/WebGLReadOutsideFramebufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-03-16T17:30:56Z",
      "side": 1,
      "message": "I think this should return at the first difference. imagine the error spam when a 256x256 pixel rect which is wrong in every pixel. you can probably just change this to ASSERT_EQ",
      "range": {
        "startLine": 76,
        "startChar": 12,
        "endLine": 76,
        "endChar": 21
      },
      "revId": "545d47843ad15ff886c5a2fd59aa1d1ed15aefc9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}