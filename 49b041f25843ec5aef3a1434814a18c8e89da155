{
  "comments": [
    {
      "key": {
        "uuid": "03c67c99_2c703294",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-05-30T19:41:12Z",
      "side": 1,
      "message": "good diagnosis, but I wonder if we can better solve this by forcefully removing any subresource updates that are queued for images that are redefinied. On a setImage call, call a method in PixelBuffer that erases any SubresourceUpdates for the respecified mip/layer.",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 277,
        "endChar": 0
      },
      "revId": "49b041f25843ec5aef3a1434814a18c8e89da155",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1db7330_b39ff0d6",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1262827
      },
      "writtenOn": "2018-05-31T12:22:23Z",
      "side": 1,
      "message": "So every time we will call \"setImage\", we will re-iterate on each subresourceUpdate we have saved so far, to find the one to remove. It seems wasteful to me if you are going to have a setImage call for each mipLevel of  each layer of a cube, we will do a lot more iterations than necessary.\n\nThe way I do it here does not increase the iteration count at all,I thought we would prefer that in terms of performance.\n\nStill want me to do it the way you suggested?",
      "parentUuid": "03c67c99_2c703294",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 277,
        "endChar": 0
      },
      "revId": "49b041f25843ec5aef3a1434814a18c8e89da155",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "926d4820_c9b9b8d8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-05-31T13:51:11Z",
      "side": 1,
      "message": "I think so. You do scan the list of updates a few extra times. If that really becomes a problem we can optimize it by indexing the updates list by level. setImage is a \"heavy\" operation though so a few extra instructions on this path aren\u0027t that much a problem.\n\nFWIW my way also has the benefit of not updating twice if the user specifies the same image twice. That\u0027s pretty marginal though.",
      "parentUuid": "b1db7330_b39ff0d6",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 277,
        "endChar": 0
      },
      "revId": "49b041f25843ec5aef3a1434814a18c8e89da155",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2281e11_bdc134fd",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 277,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-31T15:28:23Z",
      "side": 1,
      "message": "I agree with this approach of removing the updates when the image is redefined.  It\u0027s possible that it could still pass this check and copy needlessly.",
      "parentUuid": "926d4820_c9b9b8d8",
      "range": {
        "startLine": 265,
        "startChar": 0,
        "endLine": 277,
        "endChar": 0
      },
      "revId": "49b041f25843ec5aef3a1434814a18c8e89da155",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}