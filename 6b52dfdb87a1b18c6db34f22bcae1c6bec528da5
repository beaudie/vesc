{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d7133bf2_5ac3619b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-26T01:35:22Z",
      "side": 1,
      "message": "A regression test would be nice",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "354de9a2_eef7d0b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-10-28T13:00:07Z",
      "side": 1,
      "message": "Not sure why we\u0027re not hitting this in some tests. A broken render pass + 16 calls to `generateOutsideRenderPassCommandsQueueSerial` should trigger this. Charlie suggested it might be because debug markers are not enabled in tests. I thought I only enabled dchecks though when I stumbled into this?..",
      "parentUuid": "d7133bf2_5ac3619b",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28ebac4a_6312b5a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T13:34:11Z",
      "side": 1,
      "message": "We might very well not have any tests that flush the outside RP commands 16 times.",
      "parentUuid": "354de9a2_eef7d0b6",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04b67543_726fb490",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-10-28T19:41:53Z",
      "side": 1,
      "message": "It seems hitting this bug is even harder than that.\n\nNormally we reach `mOutsideRenderPassSerialFactory.reset()` here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp;drc\u003dfe99836c8bb809d5352c8f0baf2bb0024358e893;l\u003d8131\n\nand then we don\u0027t hit the bug. To hit it, we also need to take this `!mRenderPassCommands-\u003estarted()` early return from flush:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp;drc\u003dfe99836c8bb809d5352c8f0baf2bb0024358e893;l\u003d8057\n\nOriginally we hit it in offscreen rendering + blit to default fb. Is that what has to be done to repro?",
      "parentUuid": "28ebac4a_6312b5a2",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f5cbb4c_4dacf547",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T20:35:10Z",
      "side": 1,
      "message": "Unless I\u0027m missing something, it should be quite easy actually. Take any of our tests, add 16 `EXPECT_*_COLOR_*` lines and it should hit it. In that case, we would create many outside RP commands, one for each line (due to glReadPixels), flush them, and there is no render pass in between.\n\nIf somehow the path that leads to a Vulkan submission also resets this, you could also add a test that does compute-after-compute with a glMemoryBarrier in between 16 times.",
      "parentUuid": "04b67543_726fb490",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62a8259d_1e45a77f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-28T20:41:13Z",
      "side": 1,
      "message": "I am pretty sure there is some tests in CI that test this code path when I was working on this. Unless things changed since then, we should already have the coverage there. That is why I think its because CI run the test without the debug label stuff, since the bug itself is specific to do with debug label.\n\nBut also, the assert I added should catch this now if anyone runs into it.",
      "parentUuid": "3f5cbb4c_4dacf547",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f886ea25_fa012091",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-10-28T20:57:35Z",
      "side": 1,
      "message": "\u003e Take any of our tests, add 16 EXPECT_*_COLOR_* lines and it should hit it.\n\nThis doesn\u0027t seem to work. Right before those readbacks we run into a flush with `mRenderPassCommands-\u003estarted()` which falls through to `mOutsideRenderPassSerialFactory.reset()` so we don\u0027t hit the bug. So I think we need to trigger an \"empty flush\" of sorts?\n\n\u003e compute-after-compute with a glMemoryBarrier in between 16 times.\n\nThe trace where we hit this is doing something like this but I don\u0027t get what I need to do to hit this specific sequence (but I was trying compute-after-draw so maybe that\u0027s the problem)\n\nThis seems pretty narrow and with the checks Charlie added adding a special-case test might not be adding a lot of value.",
      "parentUuid": "62a8259d_1e45a77f",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45c24950_97d9a2f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T21:01:58Z",
      "side": 1,
      "message": "\u003e This doesn\u0027t seem to work. Right before those readbacks we run into a flush with mRenderPassCommands-\u003estarted()\n\nOn the first EXPECT yes, not the rest of them (so ok, maybe needs 17 EXPECTs!)\n\n\u003e I was trying compute-after-draw so maybe that\u0027s the problem\n\nIt definitely would be, because the draw starts a render pass and leads to the `reset()`\n\n---\n\nCharlie must be right, it must have something to do with debug labels. We probably have support for them built with the tests but a runtime check must be disabling them. If you can enable that in the test suite Charlie has added for this, it should hopefully reproduce the bug.",
      "parentUuid": "f886ea25_fa012091",
      "revId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6b52dfdb87a1b18c6db34f22bcae1c6bec528da5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}