{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d5ab037f_19d95032",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5991,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-10-20T01:12:28Z",
      "side": 1,
      "message": "There doesn\u0027t seem to be anything special in this config, why not just use the surface that the fixture creates?",
      "revId": "358a6c3a38c4f8dd917283457c35978a840f6bf6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01da3b43_cdf22b51",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5991,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-10-20T18:29:23Z",
      "side": 1,
      "message": "The test was added to verify that reading from default FBO on a surface created with `default egl config` works properly: this maps to when running deqp tests without specifying the `--deqp-gl-config-name`.\n\nI think it would be clearer if I explicitly list the EGL config here, so that it is easy to see the egl config picked is the default egl config.",
      "parentUuid": "d5ab037f_19d95032",
      "revId": "358a6c3a38c4f8dd917283457c35978a840f6bf6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca0b461_b035e110",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5991,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-10-20T19:15:33Z",
      "side": 1,
      "message": "Ok, it\u0027s just this is a lot of code. Besides, the default config may not end up being the problematic one, so it\u0027ll rely on luck.\n\nMy suggestion is to use the usual way of selecting the config (`setConfigRedBits`, etc), and specifically target the config that we saw the issue with.",
      "parentUuid": "01da3b43_cdf22b51",
      "revId": "358a6c3a38c4f8dd917283457c35978a840f6bf6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1646ab76_48935d6d",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5991,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-10-20T21:46:42Z",
      "side": 1,
      "message": "The problematic egl config on windows is:\n\n```\nredBit: 8\ngreenBit: 8\nblueBit: 8\nalphaBit: 0\n```\n\nBut if I force the `ANGLETestBase::mFixture::ConfigParameters` to have the above values, it will cause the test to fail to find a matching egl config on platforms that do not support 0 alpha bits, e.g. Linux. \n\nI will leave the `ANGLETestBase::mFixture` to use the default ConfigParameters: (redBits: -1, greenBits: -1, blueBits: -1, alphaBits: -1..). That should work the same way as running deqp without `--deqp-gl-config-name` arg. I think the issue with http://b/306256081 is not because ANGLE has a problematic egl config, but because the test is making wrong assumptions about the glReadPixel() read and type format on a default egl config surface. Leaving the egl config parameters to default values should reproduce the scenario that the deqp test in http://b/306256081 ran into.",
      "parentUuid": "4ca0b461_b035e110",
      "revId": "358a6c3a38c4f8dd917283457c35978a840f6bf6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad4d3cb_61217633",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5991,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-10-23T19:56:27Z",
      "side": 1,
      "message": "Mark as resolved.",
      "parentUuid": "1646ab76_48935d6d",
      "revId": "358a6c3a38c4f8dd917283457c35978a840f6bf6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}