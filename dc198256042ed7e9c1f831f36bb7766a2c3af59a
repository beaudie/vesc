{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1615ccbc_6ce2617b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "nit: can you include some context about which app you\u0027re optimizing?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 24
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e50c9a0_c7d1cc17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1615ccbc_6ce2617b",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 24
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "371b1fa3_b58ad67b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "what if an image is shared a la EGLImage or via BindTexImage?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 27
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b3bf54a_7ecae955",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Since we are flushing the commands and ending the render pass (just not submitting the work), the commands themselves should still be executed in the correct order.\n\nA glFlush() doesn\u0027t guarantee the work is done when it returns though, so the app will still need to do its own synchronization to guarantee the images have the correct data when they\u0027re accessed.",
      "parentUuid": "371b1fa3_b58ad67b",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 27
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c795dadb_86f6727d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "Is this an app detect thing? Then can we make sure we make a note of this? It\u0027s definitely suspicious to have this very conditional behaviour so related to a specific app depend on a device.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 54
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee769c64_40fe560e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "I\u0027ve reworded this better.   We will ignore the glFlush() on all devices when there is a sync object or if the context is shared.   In addition to that, all devices except QC will also ignore all other glFlush() calls.\n\nThere isn\u0027t any app detection going on, every app is treated the same in this regard.   However, we are enabling the special behavior on QC because it affects MH3.0 scores.   It\u0027s possible that ignoring glFlush() could help other apps on QC, but we are more concerned with the 3% MH3.0 drops since it\u0027s so visible.",
      "parentUuid": "c795dadb_86f6727d",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 54
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63c52c60_4779f0cd",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 9
      },
      "lineNbr": 278,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 278,
        "startChar": 11,
        "endLine": 278,
        "endChar": 32
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb09019c_c05c7176",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 9
      },
      "lineNbr": 278,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Ha, must have worked a bit too late that night.",
      "parentUuid": "63c52c60_4779f0cd",
      "range": {
        "startLine": 278,
        "startChar": 11,
        "endLine": 278,
        "endChar": 32
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f5c037_74248e63",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 9
      },
      "lineNbr": 388,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 388,
        "startChar": 11,
        "endLine": 388,
        "endChar": 32
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee9f0a5e_2a656203",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 9
      },
      "lineNbr": 388,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4f5c037_74248e63",
      "range": {
        "startLine": 388,
        "startChar": 11,
        "endLine": 388,
        "endChar": 32
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a95dd181_10de1be5",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 695,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "I don\u0027t quite understand why you\u0027re managing the resource use list explicitly here. The call chain from flushCommandsAndEndRenderPass will do this when we hit ContextVk::submitFrame. Can you clarify what breaks when you remove this?",
      "range": {
        "startLine": 695,
        "startChar": 8,
        "endLine": 695,
        "endChar": 80
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bdaf20e_c239e367",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 695,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-25T19:23:19Z",
      "side": 1,
      "message": "The vkEvent objects are never freed without calling releaseResourcesToCurrentSerial(), which eventually leads to a crash due to running out of memory.\n\nWe never make it to submitFrame() inside flushCommandsAndEndRenderPass() (and we don\u0027t want to since that results the vkQueueSubmit that I\u0027m trying to remove with this CL), so the resources are never freed.\n\nThis seems to be a problem with multithreaded/multi-context rendering in general with this type of change.   The threads that are drawing to their own attachments, which the main thread later samples from, will never call vkQueueSubmit so they never have a chance to release their resources.   This version seems to be working, but as Charlie is pointing out below, it does introduce other issues related to Resource::waitForIdle() and making sure the work is submitted before waiting on it.",
      "parentUuid": "a95dd181_10de1be5",
      "range": {
        "startLine": 695,
        "startChar": 8,
        "endLine": 695,
        "endChar": 80
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4303cf6_23fd86cf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 695,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "After our chat last week, I updated this to move the resources into the share group, which are then released whenever the next context in the share group does submitFrame().   It seems to be working, so let me know what you think.",
      "parentUuid": "7bdaf20e_c239e367",
      "range": {
        "startLine": 695,
        "startChar": 8,
        "endLine": 695,
        "endChar": 80
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c85b4f94_994de48e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 697,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-25T00:29:18Z",
      "side": 1,
      "message": "Correct me if I am wrong here. What you did here is that the commands before and after this point will tagged with the same queueSerial number, but the resources before this point will be released early (i.e, before vkQUeueSubmit). What if somebody called glFlush and you come here. Resources appears have submitted (but not actually submitted). Now if someone calls an API and end up in usedInRecordedCommands(), the answer will be \"no\", and it think command already submitted and will just sit there waiting for GPU to finish. Because comamnds never actually submit, you end up deadlock. If you search usedInRecordedCommands() and see where it could get called, I think you could create a test case. Can you achieve what you want without release resources early?",
      "range": {
        "startLine": 691,
        "startChar": 7,
        "endLine": 697,
        "endChar": 39
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1de3071c_1fbd5954",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 697,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-25T03:37:35Z",
      "side": 1,
      "message": "Looking at reserveSubmitSerial(), I think this is working correctly - at least in terms of making sure things are getting the correct Serial values:\n\n    Serial CommandQueue::reserveSubmitSerial()\n    {\n        Serial returnSerial \u003d mCurrentQueueSerial;\n        mCurrentQueueSerial \u003d mQueueSerialFactory.generate();\n        return returnSerial;\n    }\n\ngetCurrentQueueSerial() will return the Serial that will be used for the next vkQueueSubmit(), which is what we want to wait for during a Sync event, as well as any Buffer/Query commands that may also call usedInRecordedCommands().   \n\n\u003e Resources appears have submitted (but not actually submitted). \n\nI\u0027m not sure I agree with this statement.   The command buffer has been \u0027closed\u0027 by the flushCommandsAndEndRenderPass(), so any resources calling that will correctly get a \u0027false\u0027 value returned, since any new commands using that resource will be in a new command buffer.   If a caller really wants to know if a resource is used in any commands that haven\u0027t completed yet, they should instead be calling isCurrentlyInUse(), since that will tell you if it\u0027s used in any commands that are still being recorded or haven\u0027t been submitted yet.\n\n    ANGLE_INLINE bool usedInRecordedCommands() const\n    {\n        ASSERT(valid());\n        return mUse-\u003ecounter \u003e 1;\n    }\n\n    ANGLE_INLINE bool usedInRunningCommands(Serial lastCompletedSerial) const\n    {\n        ASSERT(valid());\n        return mUse-\u003eserial \u003e lastCompletedSerial;\n    }\n\n    ANGLE_INLINE bool isCurrentlyInUse(Serial lastCompletedSerial) const\n    {\n        return usedInRecordedCommands() || usedInRunningCommands(lastCompletedSerial);\n    }\n\nLooking at the uses of usedInRecordedCommands(), they typically seem to follow the pattern:\n\n    if (usedInRecordedCommands())\n    {\n        ANGLE_TRY(contextVk-\u003eflushImpl(nullptr));\n    }\n\nOne of the first things flushImpl() does is call flushCommandsAndEndRenderPass(), which this code just did, so I don\u0027t think anything unexpected is going on there either.\n\nIf you can think of with a sequence of events that you think could hit the hang you\u0027re describing, I can try and put something together, but buffer copies are tested pretty well, which is one of the main users of usedInRecordedCommands().   The others are queries (not sure how well tested) and SyncHelper, which I did run into issues with and eventually led me to this version.   Admittedly, I\u0027m leaning pretty hard on CQ in this area to give me some confidence I\u0027m not doing anything too crazy here.\n\nAll that said, the reason the call to releaseResourcesToCurrentSerial() is here in the first place is to fix a leak of vkEvent objects.   Without this call, the vkEvents are never freed and we eventually run out of memory and crash (at least during Asphalt 9), which may be pointing to another bug somewhere else.",
      "parentUuid": "c85b4f94_994de48e",
      "range": {
        "startLine": 691,
        "startChar": 7,
        "endLine": 697,
        "endChar": 39
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32ede412_ce0a8f4c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 697,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Same response as to Jamie\u0027s comment:\n\nAfter our chat last week, I updated this to move the resources into the share group, which are then released whenever the next context in the share group does submitFrame().   It seems to be working, so let me know what you think.",
      "parentUuid": "1de3071c_1fbd5954",
      "range": {
        "startLine": 691,
        "startChar": 7,
        "endLine": 697,
        "endChar": 39
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2b70d2_c240458b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 699,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "nit: you can omit this since the earlier if statement returns.",
      "range": {
        "startLine": 699,
        "startChar": 4,
        "endLine": 699,
        "endChar": 9
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3762601b_519ebe60",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 699,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba2b70d2_c240458b",
      "range": {
        "startLine": 699,
        "startChar": 4,
        "endLine": 699,
        "endChar": 9
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "514a1ec2_7441aaba",
        "filename": "src/libANGLE/renderer/vulkan/FenceNVVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "with later comments we can revert this.",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da80783f_f7231426",
        "filename": "src/libANGLE/renderer/vulkan/FenceNVVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "514a1ec2_7441aaba",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 49,
        "endChar": 57
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4948fb42_b8931c7b",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "nit: suggest checking contextVk",
      "range": {
        "startLine": 96,
        "startChar": 26,
        "endLine": 96,
        "endChar": 35
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d169a8b_e374eaa3",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 96,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4948fb42_b8931c7b",
      "range": {
        "startLine": 96,
        "startChar": 26,
        "endLine": 96,
        "endChar": 35
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "905b0b06_3424a61b",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 101,
        "startChar": 74,
        "endLine": 101,
        "endChar": 75
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bfd4c3c_67604c3e",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 101,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "905b0b06_3424a61b",
      "range": {
        "startLine": 101,
        "startChar": 74,
        "endLine": 101,
        "endChar": 75
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "705de46f_e0402625",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 104,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "You\u0027re doing extra work here to solve undefined behaviour. Can you split out this change? This is not required by the GL spec so we shouldn\u0027t even bother unless the app in question relies on this undefined behaviour.",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 104,
        "endChar": 71
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1bf862f_29c7b805",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 104,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "I can\u0027t remember exactly which test was failing, but reverting this block seems to be working, so all of the rest of these comments no longer apply.",
      "parentUuid": "705de46f_e0402625",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 104,
        "endChar": 71
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e42f506e_31527c53",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 105,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "instead of passing down the gl context, expose isShared in ContextVk. You can move variables in the front-end around if necessary.",
      "range": {
        "startLine": 105,
        "startChar": 8,
        "endLine": 105,
        "endChar": 42
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b68b62d_5ba8f1e6",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 105,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "This block was reverted.",
      "parentUuid": "e42f506e_31527c53",
      "range": {
        "startLine": 105,
        "startChar": 8,
        "endLine": 105,
        "endChar": 42
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78421e2a_510dcdf9",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "Can EGL sync objects cross share group boundaries? The ones that are imported from fds at least can.\n\nYou would likely need to make this change conditional to GL sync objects, and keep the old behavior (flush on sync) for the rest of the sync objects.",
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "833d73e8_0f4605cf",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "This block was reverted.",
      "parentUuid": "78421e2a_510dcdf9",
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d2989f7_efb327f0",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 272,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "nit: contextVk",
      "range": {
        "startLine": 272,
        "startChar": 25,
        "endLine": 272,
        "endChar": 34
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2efe9c35_0c60b6f3",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 272,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d2989f7_efb327f0",
      "range": {
        "startLine": 272,
        "startChar": 25,
        "endLine": 272,
        "endChar": 34
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "621242c3_81f16406",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 383,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "Why the cast?",
      "range": {
        "startLine": 383,
        "startChar": 59,
        "endLine": 383,
        "endChar": 84
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc24c251_b6d9597f",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-25T17:39:09Z",
      "side": 1,
      "message": "Should be able to revert this change, see comment above.",
      "parentUuid": "621242c3_81f16406",
      "range": {
        "startLine": 383,
        "startChar": 59,
        "endLine": 383,
        "endChar": 84
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90e8f340_838f3994",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 383,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc24c251_b6d9597f",
      "range": {
        "startLine": 383,
        "startChar": 59,
        "endLine": 383,
        "endChar": 84
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2caf40fe_0aad6db6",
        "filename": "src/tests/egl_tests/EGLSyncTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 233,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "I\u0027d say just delete this. Then instead of using EGL_FOREVER_KHR, use a timeout to get the same effect (\"make sure the test doesn\u0027t get stuck in an infinite loop\")",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 233,
        "endChar": 5
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e51f1ce_465b7387",
        "filename": "src/tests/egl_tests/EGLSyncTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 233,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2caf40fe_0aad6db6",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 233,
        "endChar": 5
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b5ce46a_3792b669",
        "filename": "src/tests/gl_tests/FenceSyncTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 263,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-25T04:53:37Z",
      "side": 1,
      "message": "Same here",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 263,
        "endChar": 0
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a877b5e_1fbff037",
        "filename": "src/tests/gl_tests/FenceSyncTests.cpp",
        "patchSetId": 9
      },
      "lineNbr": 263,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-04T01:26:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b5ce46a_3792b669",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 263,
        "endChar": 0
      },
      "revId": "dc198256042ed7e9c1f831f36bb7766a2c3af59a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}