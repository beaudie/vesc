{
  "comments": [
    {
      "key": {
        "uuid": "9d7f88c7_63169de7",
        "filename": "src/common/android_util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-22T04:40:17Z",
      "side": 1,
      "message": "A quick trace of the code shows me that this is how we get here:\n\n    vk_caps_utils.cpp: GenerateConfigs\n    -\u003e GenerateDefaultConfig\n    -\u003e formatutils.h: GetNativeVisualID\n    -\u003e android_util.cpp: GLInternalFormatToNativePixelFormat\n\nThe code that calls GenerateDefaultConfig looks like this:\n\n    for (EGLint sampleCount : *configSampleCounts)\n    {\n        egl::Config config \u003d GenerateDefaultConfig(display-\u003egetRenderer(), colorFormatInfo,\n                                                   depthStencilFormatInfo, sampleCount);\n        if (display-\u003echeckConfigSupport(\u0026config))\n        {\n            configSet.add(config);\n        }\n    }\n\nIt looks to me like the best solution would be to add this workaround to `DisplayVkAndroid::checkConfigSupport()`. You can determine which sampleCount is the problematic one and instead of skipping \"the first 565 format\", skip \"the 565 format with N sample counts\".\n\n---\n\nOn a related note, DisplayVkAndroid::checkConfigSupport says:\n\n    bool DisplayVkAndroid::checkConfigSupport(egl::Config *config)\n    {\n        // TODO(geofflang): Test for native support and modify the config accordingly.\n        // anglebug.com/2692\n        return true;\n    }\n\nSo maybe fixing anglebug.com/2692 would automatically fix this issue as well because presumably we would discover that there is no native support for the \"565 format with N sample counts\" in question.",
      "revId": "ca3ac5c1a33798c361eb0f8440b6395e456e9184",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37accc77_9c326863",
        "filename": "src/common/android_util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-04-22T18:54:14Z",
      "side": 1,
      "message": "\u003e It looks to me like the best solution would be to add this workaround to\n\u003e `DisplayVkAndroid::checkConfigSupport()`. You can determine which sampleCount\n\u003e is the problematic one and instead of skipping \"the first 565 format\",\n\u003e skip \"the 565 format with N sample counts\".\n\n+1\n\nthough i would still like to understand why removing just the first one makes the test pass. EGL config sorting rules are very explicit and deterministic. We should be able to uniquely identify the condition under which a particular config is \"bad\" for the test",
      "parentUuid": "9d7f88c7_63169de7",
      "revId": "ca3ac5c1a33798c361eb0f8440b6395e456e9184",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1078cb19_67a4f57b",
        "filename": "src/common/android_util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-04-22T18:56:27Z",
      "side": 1,
      "message": "Another quick fix would be to disable GL_RGB565 format for EGL surfaces (may be disable them for window but allow them for pbuffer window type?)",
      "parentUuid": "37accc77_9c326863",
      "revId": "ca3ac5c1a33798c361eb0f8440b6395e456e9184",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e49bb33e_3624f9b3",
        "filename": "src/common/android_util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-04-22T21:51:11Z",
      "side": 1,
      "message": "Shahbaz mentioned multisample support. If that\u0027s part of the config I could imagine that could be an issue with 565.",
      "parentUuid": "1078cb19_67a4f57b",
      "revId": "ca3ac5c1a33798c361eb0f8440b6395e456e9184",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c720234d_5ae8eb1f",
        "filename": "src/common/android_util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-04-22T23:25:47Z",
      "side": 1,
      "message": "// The Vulkan back-end will not support a sample count of 1, because of a Vulkan specification\n// restriction:\n//\n//   If the image was created with VkImageCreateInfo::samples equal to VK_SAMPLE_COUNT_1_BIT, the\n//   instruction must: have MS \u003d 0.\n//\n// This restriction was tracked in http://anglebug.com/4196 and Khronos-private Vulkan\n// specification issue https://gitlab.khronos.org/vulkan/vulkan/issues/1925.\n//\n// In addition, the Vulkan back-end will not support sample counts of 32 or 64, since there are no\n// standard sample locations for those sample counts.\nconstexpr unsigned int kSupportedSampleCounts \u003d (VK_SAMPLE_COUNT_2_BIT | VK_SAMPLE_COUNT_4_BIT |VK_SAMPLE_COUNT_8_BIT | VK_SAMPLE_COUNT_16_BIT);",
      "parentUuid": "e49bb33e_3624f9b3",
      "revId": "ca3ac5c1a33798c361eb0f8440b6395e456e9184",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}