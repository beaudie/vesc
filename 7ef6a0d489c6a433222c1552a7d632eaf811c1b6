{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "62d95cd4_9908f093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-05T23:57:46Z",
      "side": 1,
      "message": "PTAL - looking for high level feedback (or review if overall approach look ok)",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13706e43_60b65735",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "I haven\u0027t been very thorough, but some high level feedback already!",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0a1c8fb_e0bc5bcd",
        "filename": "include/platform/vk_features.json",
        "patchSetId": 2
      },
      "lineNbr": 1014,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "```suggestion\n                \"Use VK_KHR_fragment_shading_rate extension to implement QCOM foveated rendering extensions\"\n```",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f96338d_9dac7e63",
        "filename": "include/platform/vk_features.json",
        "patchSetId": 2
      },
      "lineNbr": 1014,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0a1c8fb_e0bc5bcd",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d211691_f2976328",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Looking back, I think this dirty bit could be removed. It\u0027s set when the framebuffer or texture parameter is changed, but that has no bearing on what\u0027s going to be rendered now (like it could be set on the read framebuffer, or any texture not bound to current draw framebuffer).\n\nThis `set` here should not only work for disabled-\u003eenabled but also enabled-\u003edisabled (i.e, the bit should always be set), but regardless you should be able to just remove this code.\n\nWhat you need instead in those calls (`Context::*FoveationParameters`) is to set the dirty bit in the framebuffer, so `FramebufferVk::syncState` takes care of this (through `ContextVk::onFramebufferChange`). For textures, the observer pattern should be used to dirty all the framebuffers attached to it.",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97b9f34b_14c580a7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-12T16:43:04Z",
      "side": 1,
      "message": "just to make sure i understood the comment, if the reasoning is that dynamic state dirty bit is always enabled during a sync state wont this mean we could potentially get rid of `EXTENDED_DIRTY_BIT_SHADING_RATE` as well?",
      "parentUuid": "3d211691_f2976328",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb2adb06_92c49ac7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-12T16:53:38Z",
      "side": 1,
      "message": "\u003e that dynamic state dirty bit is always enabled during a sync state\n\nThat\u0027s not true though, dynamic state is dirtied based on `EXTENDED_DIRTY_BIT_SHADING_RATE`. If `EXTENDED_DIRTY_BIT_SHADING_RATE` is not set, the dynamic state dirty bit is not set (except through render pass begin).\n\nThe difference with `EXTENDED_DIRTY_BIT_FOVEATED_RENDERING` is that the dirty bit already comes from (or rather _should_ come from in a correct implementation) through the fact that the framebuffer is changed, which closes the render pass. Opening a new render pass sets all dynamic state dirty, so this is unnecessary.\n\nBy the way, I said \"correct implementation\", because probably this scenario is broken with the current implementation (please add a test):\n\n1. Context1/thread1: Create FBO, attach to texture, draw\n2. Context2/thread2: Create FBO, attach to same texture, draw\n3. Context1/thread1: Mark texture as foveated\n4. Context2/thread2: Draw\n\nThe issue is that because there is no observer notification, when texture is marked foveated in Context1 (step 3), the FBO in context 2 is not notified of the change, and its second draw call ends up in the same render pass started at step 2. Step 1 and 2 have the effect of processing all dirty bits so there\u0027s nothing dirty to accidentally make things work at step 4.",
      "parentUuid": "97b9f34b_14c580a7",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07d6e3e_2bc46eb2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-12T17:10:38Z",
      "side": 1,
      "message": "\u003e when texture is marked foveated in Context1 (step 3), the FBO in context 2 is not notified of the change\n\nassuming test sets focal point for that texture all observers will be notified.\nif you see here -\u003e https://cs.android.com/android/platform/superproject/main/+/main:external/angle/src/libANGLE/Texture.cpp;l\u003d1254 when foveation state changes for a texture it does notify observers with `FoveatedRenderingStateChanged` message which will set the `DIRTY_BIT_FOVEATION` bit on all observing framebuffers",
      "parentUuid": "bb2adb06_92c49ac7",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "102734c7_0e1a81ac",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-12T17:14:47Z",
      "side": 1,
      "message": "Ok great, then that should be working fine (confirmation by test would still be appreciated). The dirty bit is still unnecessary though, as the FramebufferVk::syncState should end up breaking the render pass and causing the dirty bit to be set (due to new render pass).",
      "parentUuid": "c07d6e3e_2bc46eb2",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acba5694_6197a7ac",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-12T17:27:27Z",
      "side": 1,
      "message": "\u003e confirmation by test would still be appreciated\n\nwill do\n\nbut getting back to comparison between `EXTENDED_DIRTY_BIT_FOVEATED_RENDERING` and `EXTENDED_DIRTY_BIT_SHADING_RATE` - i guess the key difference between the 2 is that a change in shading rate doesn\u0027t necessarily end up in RP close so we need a mechanism to emit vk command with new shading rate. BUT a change in `EXTENDED_DIRTY_BIT_FOVEATED_RENDERING` will necessarily trigger RP closure and hence the existing plumbing of dirtying all dynamic state on RP close will take care of emitting the vk command with new state, right?",
      "parentUuid": "102734c7_0e1a81ac",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8fb2bb0_b2b92cf4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-12T17:52:51Z",
      "side": 1,
      "message": "Yes, exactly!",
      "parentUuid": "acba5694_6197a7ac",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec540f5_6a6c6bf5",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-12T20:40:30Z",
      "side": 1,
      "message": "By the way, if you\u0027re looking for a test example to follow, here\u0027s one I recently did (though I\u0027m sure you\u0027ve previously seen this test suite): https://chromium-review.googlesource.com/c/angle/angle/+/5228599/5/src/tests/gl_tests/MultithreadingTest.cpp",
      "parentUuid": "a8fb2bb0_b2b92cf4",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed840309_a142844e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5897,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ec540f5_6a6c6bf5",
      "range": {
        "startLine": 5895,
        "startChar": 0,
        "endLine": 5897,
        "endChar": 92
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83152a1b_d89b5068",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1648,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Ok I see now why you were having trouble with renderbuffers. If you move some logic around, I think you can simplify this change a lot _and_ be able to support renderbuffers.\n\nBasically, my high level suggestion is to make the FSR image and view be part of `FramebufferVk`. It doesn\u0027t matter if the attachment is texture or renderbuffer (so supporting them is identical). And we don\u0027t end up with this weird situation where the framebuffer is asking its attachment to create something for the render pass (that\u0027s the framebuffer\u0027s job).",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3675ed3_14ae7d14",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1648,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "\u003e I think you can simplify this change a lot and be able to support renderbuffers\n\nAck, definitely simplified the code quite a bit. I will add support for other attachment types in a follow up change before enabling the extension.",
      "parentUuid": "83152a1b_d89b5068",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d04926_2e63d07d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2244,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "I highly suggest gating this functionality on imageless framebuffers. I\u0027m also finding more situations where supporting !imageless is too much of a hassle, and I don\u0027t think it\u0027s worth supporting anything other than the mandatory on ancient drivers.",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab9f798f_1c35dbe6",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2244,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71d04926_2e63d07d",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "496552c9_df23c48f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2583,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Feel free to split the ANGLE feature + RendererVk changes into another CL that can land pretty much right away",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bedcfc5_ff4403df",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2583,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done -\u003e https://chromium-review.googlesource.com/c/angle/angle/+/5322317",
      "parentUuid": "496552c9_df23c48f",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c3a7c18_4d4592dd",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "nit: can fit this all in a uint32_t like:\n\n```suggestion\n    uint8_t fragmentWidth;\n    uint8_t fragmentHeight;\n    VkFragmentShadingRateCombinerOpKHR ops1 : 16;\n```\n\n(no need to store ops[0] either)",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 46
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f13f7e29_7b5163fe",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "updated to match 8-byte alignment requirement",
      "parentUuid": "0c3a7c18_4d4592dd",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 46
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62dad146_c038c48a",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 2
      },
      "lineNbr": 1725,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "nit:",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2834d82e_d2e219c3",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 2
      },
      "lineNbr": 1725,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "you want this assert removed?",
      "parentUuid": "62dad146_c038c48a",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69b2aa3c_328639c9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 893,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Do you have VK_EXT_host_image_copy yet? My suggestion is:\n\n- Use That extension if you can, and you won\u0027t need to worry about the buffer anymore and layout transitions.\n- If you can\u0027t use that extension, issue the image layout transition to `VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR` right here (with a pipeline barrier)\n\nIn either case, because this image is never transitioned into any other layout or used for any other purpose, you can remove all the stuff about finalizing its layout in the render pass etc.",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de74062_82f591a2",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 893,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "\u003e because this image is never transitioned into any other layout or used for any other purpose\n\nas mentioned in the other comment if focal points change then we reuse the image to upload new shading rate data in which case we transition from FSR layout to transfer layout",
      "parentUuid": "69b2aa3c_328639c9",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19d10ea6_949760c8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 911,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "If you make this image per framebuffer, you don\u0027t need the complications with `releaseImageFromShareContexts` anymore.",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "211053ce_045c50e7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 911,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19d10ea6_949760c8",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc89edd4_363ea808",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 930,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Technically this needs only one view right? You could add a new function in ImageViewHelper so only that one view is initialized.",
      "range": {
        "startLine": 927,
        "startChar": 0,
        "endLine": 930,
        "endChar": 51
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a41172_0c268824",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 930,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc89edd4_363ea808",
      "range": {
        "startLine": 927,
        "startChar": 0,
        "endLine": 930,
        "endChar": 51
      },
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e4375b7_945ceb7a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 948,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "!",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ff2d6e2_4f0aaa74",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 948,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e4375b7_945ceb7a",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6085d57_06382e08",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2063,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-09T19:09:20Z",
      "side": 1,
      "message": "Do we need any of this tracking? Isn\u0027t this just a temp CPU-initialized read-only image?",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3b53edc_6b065eb7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2063,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-02-25T15:54:04Z",
      "side": 1,
      "message": "we do, when focal points are updated we need to layout transition the image between FSR and transfer layouts",
      "parentUuid": "f6085d57_06382e08",
      "revId": "7ef6a0d489c6a433222c1552a7d632eaf811c1b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}