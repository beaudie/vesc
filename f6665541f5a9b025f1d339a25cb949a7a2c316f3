{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "589fe0d7_f21908b4",
        "filename": "src/image_util/LoadToNative_unittest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 59,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-11-20T21:28:17Z",
      "side": 1,
      "message": "Suggest: call rgbData.resize(d*h*w*sizeof(RGBColor)) and then get a pointer here uint8_t *srcPtr \u003d rgbData.data(); and line 666 will be write to *srcPtr++\u003d...\n\n\nFor test the source4Mod being 1 or 2 case, you can adjust srcPtr by 1 or 2 bytes.",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 33
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5f19a99_7fc38701",
        "filename": "src/image_util/LoadToNative_unittest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 59,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-11-20T22:26:07Z",
      "side": 1,
      "message": "For the unit tests, `inputByteOffset` and `outputByteOffset` have been added to the args, in order to test the function when there is a byte offset in the input or output address.\n* In the case of a source offset, the loading function copies 3 bytes per loop iteration until it achieves 4-byte alignment.\n* As for the destination offset, if it is not 4-byte-aligned, `LoadToNative3To4Impl()` is called in the beginning.\n\nIn the unit tests (`TestLoadUbyteRGBToRGBA()`), the data in `rgbData` is copied to `rgbInput` first, the latter including the offset bytes. Then, the loading function is used to copy from `rgbInput` to `rgbaOutput`.",
      "parentUuid": "589fe0d7_f21908b4",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 33
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f7ad905_2b1c499b",
        "filename": "src/image_util/LoadToNative_unittest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 59,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-11-20T22:54:54Z",
      "side": 1,
      "message": "I See. But the two block of for loop for rgbData and rgbInput could be merged though.",
      "parentUuid": "e5f19a99_7fc38701",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 33
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d60b0ce5_8c51fb10",
        "filename": "src/image_util/loadimage.inc",
        "patchSetId": 26
      },
      "lineNbr": 176,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-11-20T21:28:17Z",
      "side": 1,
      "message": "What if source4Mod is not 3, i.e., this while loop will have partial pixel?\nI think you can add the check of  input and inputRowPitch so that for this kind of  situation it goes to LoadToNative3To4Impl. Then this will only handle source4Mod either 0 or 3.",
      "range": {
        "startLine": 176,
        "startChar": 21,
        "endLine": 176,
        "endChar": 31
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7893728_630bde4d",
        "filename": "src/image_util/loadimage.inc",
        "patchSetId": 26
      },
      "lineNbr": 176,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-11-20T22:26:07Z",
      "side": 1,
      "message": "If `source4Mod` is not 0, it will always copy one RGB pixel (3 bytes) in each loop iteration until `source4Mod` becomes 0. Therefore, the current code should not result in a partial pixel.\nTests to check the loading function with an input/output offset have been added to the unit tests.",
      "parentUuid": "d60b0ce5_8c51fb10",
      "range": {
        "startLine": 176,
        "startChar": 21,
        "endLine": 176,
        "endChar": 31
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9a4d3d8_3c8027d9",
        "filename": "src/image_util/loadimage.inc",
        "patchSetId": 26
      },
      "lineNbr": 176,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-11-20T22:54:54Z",
      "side": 1,
      "message": "I see.",
      "parentUuid": "c7893728_630bde4d",
      "range": {
        "startLine": 176,
        "startChar": 21,
        "endLine": 176,
        "endChar": 31
      },
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66929ed8_5991db6f",
        "filename": "src/image_util/loadimage.inc",
        "patchSetId": 26
      },
      "lineNbr": 212,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-11-20T21:28:17Z",
      "side": 1,
      "message": "Suggest make it 0x00FFFFFF so that people dont need to count number of \u0027F\u0027. Similar bellow.",
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6d6c46d_123149b2",
        "filename": "src/image_util/loadimage.inc",
        "patchSetId": 26
      },
      "lineNbr": 212,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-11-20T22:26:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66929ed8_5991db6f",
      "revId": "f6665541f5a9b025f1d339a25cb949a7a2c316f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}