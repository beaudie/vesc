{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f5bd6683_6f30395c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-27T17:32:29Z",
      "side": 1,
      "message": "lgtm - great work Gregg. A couple of small comments.\n\nBTW are there any tests on the waterfall which will prevent regression of this? If not could we add an angle_end2end_test? We can make assumptions about the hardware configurations on which we test and assert that the max draw buffers advertised is 8.",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b1423be_cee421a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-27T17:38:44Z",
      "side": 1,
      "message": "Drive by",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aacdcfa5_913a35c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T23:27:12Z",
      "side": 1,
      "message": "There are tests that what is adverized is usable. \n\nI\u0027m going to have to add a bunch of stuff through because Metal is unique limits. It\u0027s not just 4 or 8 color attachments, there\u0027s also a bit limit, 256, 512, no-limit. Which means you can have 8 max color attachments but you can\u0027t put any 8 types of attachments. For example 8 RGBA32UI would be 1024bits (not RGBA32UI is not an optional format unlike RGBA32F)\n\nI\u0027d prefer to do that in another CL so this one doesn\u0027t get too large?",
      "parentUuid": "f5bd6683_6f30395c",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf9f450e_4b2e0654",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-31T20:57:58Z",
      "side": 1,
      "message": "Test added, good thing too as it found a bug!\n\nBit limit issue CL is here\nhttps://chromium-review.googlesource.com/c/angle/angle/+/3674322",
      "parentUuid": "aacdcfa5_913a35c7",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff6d37f_5563227d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-27T17:38:44Z",
      "side": 1,
      "message": "I highly suggest adding a feature in `mtl_features.json` that\u0027s initialized with this sort of condition, then make the `if` condition based on that. That has a number of benefits:\n\n- The feature shows up in chrome://gpu\n- It can be overriden with an envvar, so you can test pretend-old GPUs on new GPUs\n- end2end tests can add a configuration like `ES3_METAL().disable(Feature::YourFeatureName)` so you could get coverage of pretend-old GPUs without having one available on the bots.",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbae3fe4_c679bc3f",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T23:27:12Z",
      "side": 1,
      "message": "I can do that but maxDrawingBuffers doesn\u0027t feel like a feature, it feels like a limit, to me at least. Same as maxVertexAttributes, maxTextureSize, etc and it doesn\u0027t appear limits are set by features?  I get that Metal only has 2 sizes ATM but maybe tomorrow they\u0027ll have 16.\n\nIt also doesn\u0027t seem like it would actually cover old GPUs without actually testing on those GPUs because the thing that needs to be tested is that filling out an actual MTLRenderPassDescriptor works on a max 4 machine.",
      "parentUuid": "0ff6d37f_5563227d",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e484e2e_c695314a",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-28T01:34:59Z",
      "side": 1,
      "message": "I guess as an extra flag it I would be good. Like this\n\nif (supportsEitherGPUFamily(2, 1) \u0026\u0026 !feature.limitMaxDrawBuffersForTesting\n\n?",
      "parentUuid": "dbae3fe4_c679bc3f",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e9c4534_cdf4f2d1",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-31T20:57:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e484e2e_c695314a",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5ad9b71_d42c200d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-01T03:01:32Z",
      "side": 1,
      "message": "Sorry I didn\u0027t mean to add a feature for the limit, but add a feature that takes the value of `supportsEitherGPUFamily(2, 1)`. That would be something like `supportsGPUFamilyBlahBlah`. Point being that then you can dynamically or for testing pretend that family blah blah is not supported.\n\nAnyway, didn\u0027t you say there\u0027s a max-bits limit for this? Why not set the limit to `std::max(4, bit_limit / 128)`? You don\u0027t have to check the GPU family then.",
      "parentUuid": "9e9c4534_cdf4f2d1",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d84ff62e_359f0608",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-06-01T19:46:37Z",
      "side": 1,
      "message": "\u003e Why not set the limit to std::max(4, bit_limit / 128) ? \n\nBeacuse that\u0027s lower than the actual device supports. As a user I\u0027d want to be able to attach eight RGBA8 textures and not be limited to just 4 only because I can only have four RGBAUI32 textures.\n\nUsing a feature for supportsGPUFamilyBlahBlah seems strange to me. We don\u0027t do that else where for other features do we? For example we don\u0027t do it for MAX_TEXTURE_SIZE. Should I go fix all the backends to have a feature flag for every possible limit? If not, what makes this one special?",
      "parentUuid": "b5ad9b71_d42c200d",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e47918b_8db5c579",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-01T19:54:15Z",
      "side": 1,
      "message": "As a user, you are bound to the OpenGL limits. GLES (and I presume WebGL) provide a minimum requirement of 4 attachments. Why would you as a user _require_ 8 attachments on hardware that has trouble supporting it?\n\nAnd about features, I was pointing out this thing we have that gives us benefits (in the very least, by giving you information in chrome://gpu), and will ease your debugging when a user generates a bug report. If a part of ANGLE is not using it, it\u0027s too bad for that part. Not sure what you are referring to about `MAX_TEXTURE_SIZE`.\n\nIn the end, I have no real interest in `metal/`, you are free to proceed as you wish.",
      "parentUuid": "d84ff62e_359f0608",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fd670a5_1ada1a9d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-01T20:36:45Z",
      "side": 1,
      "message": "Let me upgrade my review to +2 then so Gregg can move forward with this after considering this additional feedback.",
      "parentUuid": "9e47918b_8db5c579",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23d388b2_b57a887d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-06-01T20:55:46Z",
      "side": 1,
      "message": "\u003e As a user, you are bound to the OpenGL limits. GLES (and I presume WebGL) provide a minimum requirement of 4 attachments. Why would you as a user _require_ 8 attachments on hardware that has trouble supporting it?\n\nThis happens all over WebGL/OpenGL. There are 1000s of sites that require more than the minimum number of max uniform vectors (16), more than the minimum number of max attributes (8), more than the minimum max texture size (64). Three.js and Unity regularly pass all of these limits\n\n\u003e Not sure what you are referring to about MAX_TEXTURE_SIZE.\n\nBased on your feedback it sounds like the code should be changed to\n\n    if (mFeatures.supports16kTextures.enabled)\n    { \n       mNativeCaps.max2DTextureSize \u003d 16384;\n    }\n    else if (mFeatures.supports8kTextures.enabled)\n    { \n       mNativeCaps.max2DTextureSize \u003d 8192;\n    }\n    else if (mFeatures.supports4kTextures.enabled)\n    { \n       mNativeCaps.max2DTextureSize \u003d 4096;\n    }\n    else if (mFeatures.supports2kTextures.enabled)\n    { \n       mNativeCaps.max2DTextureSize \u003d 2048;\n    }\n    ...\n\nThen you can test and set all of these limits. Since the code is not structured like that I\u0027m curious why this particular limit should be treated differently.",
      "parentUuid": "8fd670a5_1ada1a9d",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "451c2363_8b3154ef",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 730,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-01T22:27:27Z",
      "side": 1,
      "message": "\u003e Based on your feedback it sounds like the code should be changed to\n\nI have no familiarity with this. The _spec compliant_ way would be to derive the GL limit from the metal limit (assuming there is one), and not expose support where the metal limit is below GL\u0027s minimum requirement.\n\nStepping outside the spec compliance is valid, because, yes, sometimes it\u0027s useful. But you\u0027d ideally want to:\n\n1. Know when you are side stepping the spec\n2. Be able to control it to be able to test code paths for such limited hardware without having access to them\n\nIf you use ANGLE features, you get the above. If you don\u0027t use features, you don\u0027t get the above. I have no further comment about this, the choice is yours.\n\n(about max texture size, the minimum required spec is 2048, so use of features really depends on what logic you have for those conditions. If it\u0027s something like `family_blah \u0026\u0026 isIntel \u0026\u0026 etc`, then yes a feature makes sense because it\u0027s sort of workaround-y. If it\u0027s something like `metal_limit.max_texture_size \u003d\u003d 4k`, no that doesn\u0027t really need a feature)",
      "parentUuid": "23d388b2_b57a887d",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "641c8237_5773b87f",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 732,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-27T17:32:29Z",
      "side": 1,
      "message": "Consider continuing to refer to mtl::kMaxRenderTargets here? That would more clearly link this code to the header where that limit\u0027s defined.",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1198e40_05c6a164",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 732,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T23:27:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "641c8237_5773b87f",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e80f38bd_630968b7",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-27T17:32:29Z",
      "side": 1,
      "message": "Consider defining a new mtl::kMaxRenderTargetsOlderGPUFamilies (not sure what would be a good name) next to kMaxRenderTargets, documenting it and referring to it here?",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d88656a_13764abe",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 6
      },
      "lineNbr": 737,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T23:27:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e80f38bd_630968b7",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "517775a9_19e6838f",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-27T17:32:29Z",
      "side": 1,
      "message": "Per above - please consider defining a new constant like kMaxRenderTargetsOlderGPUFamilies too, and documenting it here.",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "438f7070_48d2ac19",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T23:27:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "517775a9_19e6838f",
      "revId": "2e3bb65519f4f11930f176ab9631b8b665d9dd71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}