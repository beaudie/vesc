{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7c502b3e_1c1dff3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-09T02:45:44Z",
      "side": 1,
      "message": "It seems that signal was generated properly because `vkWaitForFences()` finished with `VK_SUCCESS` result.\nBut the problem is that `isCurrentlyInUse(getLastCompletedQueueSerial())` still returns true, which results in `EGL_UNSIGNALED_KHR` to the client.\nNeed more investigation about this.",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66e23e91_556a9246",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-09T03:34:40Z",
      "side": 1,
      "message": "Did this just start to happen? FYI @cclao@google.com",
      "parentUuid": "7c502b3e_1c1dff3a",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0fb503a_3a9fefc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-09T04:00:02Z",
      "side": 1,
      "message": "This problem sometimes doesn\u0027t happen. However, the frequency of occurrence is very high. I\u0027m testing with GBM winsys + Vulkan + Linux  environment on my board.",
      "parentUuid": "66e23e91_556a9246",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c20fda8_cf57e584",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-09T04:04:24Z",
      "side": 1,
      "message": "Although my environment is not same with the Intel GPU + Linux case,\nthe same problem occurred. So I\u0027m looking into code and testing with my environment first.",
      "parentUuid": "e0fb503a_3a9fefc8",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b149b08_e157a06b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-12-09T12:54:55Z",
      "side": 1,
      "message": "I\u0027m not sure how old our Intel Linux drivers are, could be a driver bug. You can skip this on Intel and file a bug for following up later after we upgrade.",
      "parentUuid": "4c20fda8_cf57e584",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fb21def_20588958",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-12T04:15:46Z",
      "side": 1,
      "message": "Thank you for the good suggestion. But the same phenomenon had occurred with our driver too. I think the Serial is not properly cleaned up after waiting the fence command.\nI uploaded the new patch for this:\n\u003e 4095880: Vulkan: Clean up finished batches after waiting fence command | https://chromium-review.googlesource.com/c/angle/angle/+/4095880\n\nAfter I apply above change, I could clear the error with our driver.",
      "parentUuid": "9b149b08_e157a06b",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6527871_97faeb11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-12T16:15:04Z",
      "side": 1,
      "message": "@sywow.choi@samsung.com thanks for debugging this. May I ask who is calling `vkWaitForFences()` (i.e. stack trace)?",
      "parentUuid": "2fb21def_20588958",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf8e95db_5089045b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-12T23:28:10Z",
      "side": 1,
      "message": "My pleasure ðŸ˜Š\n\nI didn\u0027t use a debugging tool when looking at the code, so I can\u0027t capture a standardized stack trace, but the call sequence I found is as follows.\n\neglCreateSyncKHR(..., EGL_SYNC_NATIVE_FENCE_ANDROID, ...);\ngl APIs...\neglClientWaitSyncKHR(..., EGL_SYNC_FLUSH_COMMANDS_BIT_KHR, ...);\n- vkWaitForFences\n- rx::vk::Fence::wait\n- rx::vk::CommandQueue::waitForResourceUseToFinishWithUserTimeout\n- rx::vk::SyncHelperNativeFence::clientWait\n- rx::vk::clientWait\n- egl::Sync::clientWait",
      "parentUuid": "a6527871_97faeb11",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "005bfbd6_636b99a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-13T00:03:24Z",
      "side": 1,
      "message": "Thanks, I happened to find out while I asking that question that the `else` path in `SyncHelperNativeFence::clientWait` is also missing what you fixed: anglebug.com/7886",
      "parentUuid": "bf8e95db_5089045b",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35121fd9_41a96b1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1433074
      },
      "writtenOn": "2022-12-13T00:46:07Z",
      "side": 1,
      "message": "BTW, in that case, `eglGetSyncAttribKHR(...,EGL_SYNC_STATUS_KHR,...)` will return `EGL_SIGNALED_KHR` value to the parameter which is expected and right because it\u0027ll use `poll` instead of checking the serial.\n\n```c\nangle::Result SyncHelperNativeFence::getStatus(Context *context,\n                                               ContextVk *contextVk,\n                                               bool *signaled)\n{\n    // We\u0027ve got a serial, check if the serial is still in use\n    if (mUse.valid())\n    {\n        *signaled \u003d !context-\u003egetRenderer()-\u003ehasUnfinishedUse(getResourceUse());\n        return angle::Result::Continue;\n    }\n\n    // We don\u0027t have a serial, check status of the file descriptor\n    VkResult result \u003d SyncWaitFd(mNativeFenceFd, 0);\n    if (result !\u003d VK_TIMEOUT)\n    {\n        ANGLE_VK_TRY(context, result);\n    }\n    *signaled \u003d (result \u003d\u003d VK_SUCCESS);\n    return angle::Result::Continue;\n}\n```\n\nAm I missing other scenario ?",
      "parentUuid": "005bfbd6_636b99a1",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54988ef8_2f9fbbf6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-13T00:51:00Z",
      "side": 1,
      "message": "We have that, and in `SyncHelperNativeFence::clientWait`, we have:\n\n```\n    if (mUse.valid())\n    {\n        // We have a valid serial to wait on\n        ANGLE_TRY(\n            renderer-\u003ewaitForResourceUseToFinishWithUserTimeout(context, mUse, timeout, \u0026status));\n    }\n    else\n    {\n        // We need to wait on the file descriptor\n\n        status \u003d SyncWaitFd(mNativeFenceFd, timeout);\n        if (status !\u003d VK_TIMEOUT)\n        {\n            ANGLE_VK_TRY(contextVk, status);\n        }\n    }\n```\n\nSo there are 3 paths that can lead to the app knowing the fence is signaled. What you fixed was the `if` path in `SyncHelperNativeFence::clientWait`. The `else` path still suffers from the same problem, as well as `SyncHelperNativeFence::getStatus` as you pointed out. The solution is to call `checkCompletedCommands` from `getStatus` (when `result \u003d\u003d VK_SUCCESS`), and also in the `else` path in `clientWait`.",
      "parentUuid": "35121fd9_41a96b1b",
      "revId": "0711f7b607d0e439e93281a695fce229095b1d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}