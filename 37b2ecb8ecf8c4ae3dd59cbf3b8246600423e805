{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1f1ec5ee_35cb97ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:34:26Z",
      "side": 1,
      "message": "Can you please add a test for this? I imagine this can only work when the two texture objects use different layers of the image (otherwise it\u0027s either a WaW hazard (if same subresource) or the attachments don\u0027t match in size (if different mips). I don\u0027t know if we handle that case correctly (regardless of EGL images, like with two FBO attachments each of a different layer of an image). If we do handle that correctly, how does that being part of EGL images  make it different?\n\nThe solution with `ImageHelperSource` is a bit dodgy. We should be able to use some sort of serial instead if we have to, or avoid it altogether if we can.",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ddc7208_405bd88d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T13:34:58Z",
      "side": 1,
      "message": "\u003e Can you please add a test for this?\n\nTests in this CL already covers this.\n\n\u003e I imagine this can only work when the two texture objects use different layers of the image (otherwise it\u0027s either a WaW hazard (if same subresource) or the attachments don\u0027t match in size (if different mips). I don\u0027t know if we handle that case correctly (regardless of EGL images, like with two FBO attachments each of a different layer of an image).\n\nIt is simpler. I just created additional target and did not use it:\n```\n        // Create additional target texture\n        GLTexture targetTexture2;\n        createEGLImageTargetTexture2D(image, targetTexture2);\n```\nIf destroying `targetTexture2` calls `finalizeImageLayout` successfully (same `ImageHelper` as in `targetTexture`), it will corrupt RenderPass state that uses the `targetTexture` (my original CL will break RenderPass here...). That is why also need to pass the `ImageHelperSource *`.\n\nThis test is unrealistic but possible. I guess also possible your description. I wanted a fix that always works no matter what.\n\n\u003e If we do handle that correctly, how does that being part of EGL images make it different?\n\nWhen texture *target* is a part of `EGLImage` it has `mOwnsImage \u003d\u003d false` and possible other resources with the same `ImageHelper` (like `targetTexture`).",
      "parentUuid": "1f1ec5ee_35cb97ae",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a90da6_b44579bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:28:48Z",
      "side": 1,
      "message": "Ok it\u0027s coming back to me now, we talked about this before...\n\nCan you please clarify one thing for me? Say you have texture 1 and 2 share an image. Texture 1 is used to draw to the image (now the image is part of the render pass). I understand your point that deleting texture 2 shouldn\u0027t finalize the image.\n\nMy question is, if deleting texture 1 _doesn\u0027t_ finalize the image (and assuming texture 2 is alive), does that cause any problems?\n\nWhat I\u0027m trying to understand is whether _conceptually_ it\u0027s ok for the last owner of the image to finalize the layout. In other words, whether we can punt that responsibility to whoever is holding the last reference to the image.\n\nIf deleting texture 1 _must_ finalize the layout, then something like your solution would be necessary. If it doesn\u0027t, then we can probably make things simpler.",
      "parentUuid": "7ddc7208_405bd88d",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53038095_343c91ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:31:42Z",
      "side": 1,
      "message": "Just saw the old thread where we were discussing this (and your new replies), let\u0027s continue discussion there. I had forgot about the EGL images mess.",
      "parentUuid": "76a90da6_b44579bb",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02182f91_547f349d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T18:59:46Z",
      "side": 1,
      "message": "\u003e I understand your point that deleting texture 2 shouldn\u0027t finalize the image.\n\nCorrect. This may cause problems if continue with texture 1 in the RenderPass.\n\n\u003e My question is, if deleting texture 1 doesn\u0027t finalize the image (and assuming texture 2 is alive), does that cause any problems?\n\nYes.\nBecause deleting texture 2 will also *doesn\u0027t* finalize the image.\n\nThen EGLImage will be deleted leaving pointer to the deleted image in the RenderPass.\n\n\u003e What I\u0027m trying to understand is whether conceptually it\u0027s ok for the last owner of the image to finalize the layout. In other words, whether we can punt that responsibility to whoever is holding the last reference to the image.\n\nThis is possible. But the last owner may be texture (from other context group) or EGLImage. To finalize RenderPass in other context group we need to lock relevant contexts with a mutex.\n\n\u003e If deleting texture 1 must finalize the layout, then something like your solution would be necessary. If it doesn\u0027t, then we can probably make things simpler.\n\nI have 2 different solutions (this and the old one). I can\u0027t think anything simpler in the current code. Even if assume we will be able to lock mutex for all contexts so the last owner finalize layout, I do not think that it is simpler or better solution.\n\n\u003e Just saw the old thread where we were discussing this (and your new replies), let\u0027s continue discussion there. I had forgot about the EGL images mess.\n\nOK\n\n---\n\n\u003e  But I\u0027d like to see a different indicator for source, keeping the pointer of the TextureVk/RenderbufferVk object in the render pass is not great.\n\nWhy not? Technically it is an abstract pointer. May as well be some data member of `TextureVk`. This pointer is removed in finalize. The `SurfaceVk` is also `ImageHelperSource`.\n\n\u003e How about tracking the \"sibling serial\" of the image in the render pass instead?\n\nThis will work for EGLImages. But will not work for EGLSurface (`eglBindTexImage()`).\nAnd I think it is a lot more complicated. This solution is universal.\n\nI wanted to reuse `gl::RefCountObject::mSerial` instead of a pointer, but then noticed, that this member is not used anywhere and decided to remove it instead (in local CL).\n\n\u003e Like egl::ImageState could have a serial generator, then TextureVk::setEGLImageTarget and RenderbufferVk::setStorageEGLImageTarget could take a new serial out of the image. The new serial would:\n\nAlso need to generate serial for the source sibling. But may also keep -1, only need a different name for a serial.\n\n\u003e Replace mOwnsImage, which can be -1 when not an egl image target\n\n`mOwnsImage` used not only for EGLImages. Better to not touch this state.\nAlso source sibling is `mOwnsImage \u003d\u003d true` while will have sibling serial.",
      "parentUuid": "53038095_343c91ea",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d59ac1a_11fd16cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T19:23:11Z",
      "side": 1,
      "message": "\u003e But will not work for EGLSurface (`eglBindTexImage()`).\n\nI was wrong. This should work.\n\n`eglBindTexImage()` only allowed to bind to a single texture.\n\"sibling serial\" will be -1 and `mOwnsImage \u003d\u003d false`.\n\nI will try and make this changes and think more in the process...",
      "parentUuid": "02182f91_547f349d",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb40a1f2_8586f263",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T21:35:40Z",
      "side": 1,
      "message": "\u003e I will try and make this changes and think more in the process...\n\nThanks.\n\n\u003e Why not? Technically it is an abstract pointer. May as well be some data member of `TextureVk`.\n\nBecause once that pointer finds its way to `namespace vk`, it\u0027ll be a matter of time before someone decides to add a virtual function and start calling back into `namespace rx` because that\u0027d be the path of least resistance 😊",
      "parentUuid": "1d59ac1a_11fd16cf",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68c9e6a8_2d70e37c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T13:37:15Z",
      "side": 1,
      "message": "\u003e Because once that pointer finds its way to `namespace vk`, it\u0027ll be a matter of time before someone decides to add a virtual function and start calling back into `namespace rx` because that\u0027d be the path of least resistance 😊\n\nMy first idea was just use `(uintptr_t)this`. We can use `this` because it will be removed before destruction. Call it `ImageHelperSourceID`.\n\nJust generating serials is a lot of trouble)\nI\u0027m not sure if need to put generator to the `egl::ImageState` This is a Vulkan problem - better put into `ImageVk`.\nAlso need duplicate logic in `TextureVk` and `RenderbufferVk`, additional dynamic state variable...",
      "parentUuid": "bb40a1f2_8586f263",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d8c815_f6f5f22e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T15:31:48Z",
      "side": 1,
      "message": "\u003e I was wrong. This should work.\n\nOr maybe I was right)\n\nUnrealistic but fails:\n```\nmake Pbuffer current\ndraw something\n\ncreate some texture\ncall eglBindTexImage()\ndelete that texture -\u003e finalizeImageLayout().\n\nclear color (Pbuffer)\nread pixels -\u003e may read previous draw.\n```\n\nES2_OpenGLES generates `EGL_BAD_ACCESS` in the above test in `eglBindTexImage()`. It should not do that.\n\nThe problem will not happen if use ImageHelperSource(ID).\nAlternatively, we may flush the RenderPass in the `eglBindTexImage()`.",
      "parentUuid": "68c9e6a8_2d70e37c",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78a862d6_c27f5be9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T16:41:59Z",
      "side": 1,
      "message": "Pushed ImageSiblingSerial version.\nFixed unrealistic(?) Pbuffer case by also generating serial from throw-away generator (always 1).",
      "parentUuid": "b5d8c815_f6f5f22e",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c11684fd_07b3191c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T19:22:51Z",
      "side": 1,
      "message": "NO!\n```\n    constexpr bool operator\u003d\u003d(const UniqueSerial \u0026other) const\n    {\n        return mValue !\u003d kInvalid \u0026\u0026 mValue \u003d\u003d other.mValue;\n    }\n```\nWhat should I do?\n\nJust compare `getValue()` or write over complicated comparison function that checks for `valid()`?",
      "parentUuid": "78a862d6_c27f5be9",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d44cb325_2b7e2b6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-10T14:50:29Z",
      "side": 1,
      "message": "Comparing values in `hasImage()` SGTM",
      "parentUuid": "c11684fd_07b3191c",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f557c0ec_6e88eeb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-10T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d44cb325_2b7e2b6d",
      "range": {
        "startLine": 20,
        "startChar": 26,
        "endLine": 23,
        "endChar": 19
      },
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb268fbe_c060d7e7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3267,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:34:26Z",
      "side": 1,
      "message": "Is this single-line change not enough to pass the tests you\u0027ve added?",
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54bbabad_f79387b8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3267,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T13:34:58Z",
      "side": 1,
      "message": "All new tests passes in this CL. So this CL is enough.\n\nOr am I missing something?\n\n---\n\nI was thinking to allow `nullptr` for `ImageHelperSource` for classes that always own `ImageHelper` like `SurfaceVk`. But decided to be explicit. I\u0027m 50/50 on this decision.",
      "parentUuid": "fb268fbe_c060d7e7",
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad2a1ba9_519d655f",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3267,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:28:48Z",
      "side": 1,
      "message": "No I want to see if we can simplify this change, My bad though, see other comment.",
      "parentUuid": "54bbabad_f79387b8",
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0fbdcac_2fc28f93",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3267,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T18:59:46Z",
      "side": 1,
      "message": "Unfortunately can\u0027t think of anything simpler...",
      "parentUuid": "ad2a1ba9_519d655f",
      "revId": "37b2ecb8ecf8c4ae3dd59cbf3b8246600423e805",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}