{
  "comments": [
    {
      "key": {
        "uuid": "99846548_09ef0fb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-13T20:30:28Z",
      "side": 1,
      "message": "LGTM, will let Shabi sign off.",
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5210014a_4d367c40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T21:15:34Z",
      "side": 1,
      "message": "Missed a PPO bug earlier.",
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46a40d70_3fd40522",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 728,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T21:15:34Z",
      "side": 1,
      "message": "I just noticed a bug with PPOs:\n\nYou should get rid of this function as any caller will be unaware of the \"uniforms of every stage must be in the same buffer\" requirement and will violate it. This can only happen if a PPO uses multiple stages from the same program.\n\nI don\u0027t recall exactly if that was a desktop GL only feature or not, Tim should be able to clarify it. Even without that feature, there is still a bug here if an application updates the uniforms through this call (due to PPO use), then switches to monolothic program without making the program\u0027s uniforms dirty and try to draw, at which point some stages may have their uniforms in an older recycled buffer.\n\nYou should be able to write a test for this by:\n\n- Create a program with both VS and FS (and a dummy one with only VS)\n- Create PPO with FS from program and VS from dummy\n- Update program\u0027s VS uniforms\n- Loop 1000 times, update program\u0027s FS uniforms only, draw with PPO\n- Unbind PPO and bind program\n- Draw with program\n\nAt the fourth step, mDefaultUniformStorage should allocate new buffers, leaving the VS uniforms on an old buffer. At the last step, the code here doesn\u0027t rewrite the VS uniforms in the current buffer.\n\n---\n\nA potential solution is to refactor the functionality of `updateUniforms` into this function (and call this from that), and make the PPO call this once per unique program.",
      "range": {
        "startLine": 728,
        "startChar": 25,
        "endLine": 728,
        "endChar": 45
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb8b524e_eb35563c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 728,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-13T21:36:48Z",
      "side": 1,
      "message": "I intentionally not touch PPOs here. The PPOs is expected to still work as before. The PPOs will be changed in future CLs when I move the uniform buffers to context. (I already coded that and passes all tests but had to reorder the CLs to make the  cache CL land first) The PPO will be much easier to handle once the dynamic buffers are in context.\n\nI also aware of the eisting bug with PPO as well and that will also fixed in the future CLs. So if possible, we can just live with whatever we have for now so that we can move to that actual fix in really short time.",
      "parentUuid": "46a40d70_3fd40522",
      "range": {
        "startLine": 728,
        "startChar": 25,
        "endLine": 728,
        "endChar": 45
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b21d427f_51a6d55f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 728,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-13T23:04:15Z",
      "side": 1,
      "message": "Shabi,\n\nThis part is impossible:\n- Create PPO with FS from program and VS from dummy\n\nPer the spec, if a PPO uses a stage from a program, it must use all of the stages from that program.   We have some validation code that enforces this.",
      "parentUuid": "cb8b524e_eb35563c",
      "range": {
        "startLine": 728,
        "startChar": 25,
        "endLine": 728,
        "endChar": 45
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3804b965_a4b3a896",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 728,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-13T23:04:33Z",
      "side": 1,
      "message": "FYI, the CL that will move PPO to use cached descripto set is https://chromium-review.googlesource.com/c/angle/angle/+/2274870 Obviously it has not been updated to catch up with the dependent CLs. As soon as I land these four Cls, that will be the next.",
      "parentUuid": "cb8b524e_eb35563c",
      "range": {
        "startLine": 728,
        "startChar": 25,
        "endLine": 728,
        "endChar": 45
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c906d13_c911782b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 728,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-14T02:24:11Z",
      "side": 1,
      "message": "@Tim, thanks for the clarification. Can the PPO use only one program? Then the test I proposed can also work with a PPO that just binds to both stages of the same program, and have the uniform updates go through the PPO code (which calls this function).\n\n@Charlie, that sounds reasonable, though I would really like to see a regression test where you can reproduce this bug, skip it on Vulkan with a bug tag, then remove the suppression on the CL that fixes it. That would be a valuable test to make sure future refactoring doesn\u0027t break this.",
      "parentUuid": "3804b965_a4b3a896",
      "range": {
        "startLine": 728,
        "startChar": 25,
        "endLine": 728,
        "endChar": 45
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7744ed4_fd74356b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 798,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T21:15:34Z",
      "side": 1,
      "message": "Sorry about the nits, but nit: It\u0027s probably easier to read if this did `mDefaultUniformBlocksDirty.set()`, the test in line 810 did `if (!mDefaultUniformBlocks[shaderType].uniformData.empty())` and line 816 moved out of the loop and turned into `mDefaultUniformBlocksdirty.reset()`.",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 798,
        "endChar": 9
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc825ab0_86d455bb",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 798,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-13T21:36:48Z",
      "side": 1,
      "message": "There are other places (I think calcUniformUpdateRequiredSpace as well) also will need to change. I actually tried this before and ran into test failure. Before my change, it appears always true that empty uniform will not have dirty bit. And I don\u0027t want to change that fact, that is how I end up this. I think it also make sense from performance point of view that line 794 occur much less frequently than line 810, so you want to do if test here.",
      "parentUuid": "a7744ed4_fd74356b",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 798,
        "endChar": 9
      },
      "revId": "6b757669b5231ed41bcdaa4ec7a671e2d4abcbfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}