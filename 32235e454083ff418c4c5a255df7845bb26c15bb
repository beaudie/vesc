{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2b1e43_fc7aeb47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-19T12:57:05Z",
      "side": 1,
      "message": "Is there no way to query this from Vulkan? Is there an issue filed to track closing this API gap?",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39018f39_1c3272f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002379
      },
      "writtenOn": "2022-04-20T08:34:22Z",
      "side": 1,
      "message": "no query APIs from Vulkan and I also discussed this with internal team and we won\u0027t change this.\n\n The reason that our driver won\u0027t change this behavior is that, both Vulkan and GLES spec says gl_Layer should be set to ALL vertices to get expected result and thus this behavior won\u0027t have issues in practice:\nVulkan Spec:\n\"If a pre-rasterization shader stage shader entry pointâ€™s interface includes a variable decorated with Layer, it must write the same value to Layer for all output vertices of a given primitive.\"\nGLES Spec:\n\"To get defined results, all vertices of each primitive emitted should set the same value for gl_Layer\n\nAnd:\n\nThe specific vertex of a primitive that is used to select the rendering layer is implementation-dependent and thus portable applications will assign the same layer for all vertices in a primitive.\"",
      "parentUuid": "cf2b1e43_fc7aeb47",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a09771a8_bd270a3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-20T15:25:30Z",
      "side": 1,
      "message": "OK, let me chat with Shabi and maybe he can help me understand.\n\nSo you can understand what my objection is here: no Vulkan app or layer should have to do a check like \"if (implementation id \u003d\u003d magic number)\" which is what the isARM check is here. So if we need to change the Vulkan spec to allow ANGLE to query some bit from the driver, that\u0027s the right solution for ANGLE.",
      "parentUuid": "39018f39_1c3272f9",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c3b6342_2ef16ab2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-20T15:39:09Z",
      "side": 1,
      "message": "Basically, if your Vulkan driver can\u0027t change, the spec needs to change to reflect it. Maybe I can help file a Vulkan issue and we can discuss solutions. Once that\u0027s done and we have a path to being conformant without magic number checks, I\u0027d be happy to land this.",
      "parentUuid": "a09771a8_bd270a3e",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36602ee7_1f442c38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-20T15:53:06Z",
      "side": 1,
      "message": "So we were talking and it looks like your GLES quote is not complete. It recommends setting gl_Layer identically, but also says you can query which one will be used:\n\n```\n    The specific vertex of a primitive that is used to select the rendering\n    layer is implementation-dependent and thus portable applications will\n    assign the same layer for all vertices in a primitive. The vertex\n    convention followed for \"gl_Layer\" may be determined by calling\n    GetIntegerv with the symbolic constant LAYER_PROVOKING_VERTEX_EXT. If\n    the value returned is FIRST_VERTEX_CONVENTION_EXT, selection is always\n    taken from the first vertex of a primitive. If the value returned is\n    LAST_VERTEX_CONVENTION_EXT, the selection is always taken from the last\n    vertex of a primitive. If the value returned is UNDEFINED_VERTEX_EXT,\n    the selection is not guaranteed to be taken from any specific vertex in\n    the primitive.\n```\n\nLuckily there\u0027s a way out for ANGLE here. Instead of choosing which provoking vertex to advertise, we can simply return `UNDEFINED_VERTEX_EXT` which then necessarily means the app would have to set `gl_Layer` identically.",
      "parentUuid": "8c3b6342_2ef16ab2",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19fce30e_cc5070e3",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1000,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-19T20:01:24Z",
      "side": 1,
      "message": "Thanks, glad to have finally figured this out.\n\nPlease add a feature to `vk_features.json` as a `Workaround` and initialize it in `RendererVk.cpp` with `isARM`. Also, feel free to remove the suppression line in `deqp_khr_gles31_test_expectations.txt` to re-enable the test.",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fcc0fb4_9a99c29a",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1000,
      "author": {
        "id": 1002379
      },
      "writtenOn": "2022-04-20T08:34:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19fce30e_cc5070e3",
      "revId": "32235e454083ff418c4c5a255df7845bb26c15bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}