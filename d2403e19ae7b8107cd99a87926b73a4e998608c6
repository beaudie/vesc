{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09eaaa4b_1637312b",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-25T13:29:56Z",
      "side": 1,
      "message": "nit: https://google.github.io/styleguide/cppguide.html#Casting",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8a37d31_3ccfbd66",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-25T14:18:38Z",
      "side": 1,
      "message": "Can be easily misunderstood: This is not a C-style cast, which would be (bool)mParent. This is a C++ conversion operator.",
      "parentUuid": "09eaaa4b_1637312b",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f2393de_61a147dc",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-25T14:42:27Z",
      "side": 1,
      "message": "\"You may use cast formats like `T(x)` only when `T` is a class type.\" seems clear to me.",
      "parentUuid": "b8a37d31_3ccfbd66",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b61d84b5_248735e0",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-25T14:47:15Z",
      "side": 1,
      "message": "This refers to casts, not to conversion operators.",
      "parentUuid": "3f2393de_61a147dc",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d405811b_112b89ef",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-25T14:49:38Z",
      "side": 1,
      "message": "John: this obviously isn\u0027t a huge deal, so I don\u0027t want to block the review, but I don\u0027t see the style guide making any distinction about conversion vs casting. I think it\u0027s referring to what you call conversion as casting in that section. i.e. static_cast\u003cint\u003e(5.0) would be a cast not a conversion, similarly (int)5.0 and int(5.0) it\u0027s referring to as casts even if you understand them as conversions.",
      "parentUuid": "b61d84b5_248735e0",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a8182ce_4359e69c",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-05-25T14:57:12Z",
      "side": 1,
      "message": "Can you simplify this by just returning `mParent !\u003d nullptr`?",
      "parentUuid": "b61d84b5_248735e0",
      "range": {
        "startLine": 53,
        "startChar": 11,
        "endLine": 53,
        "endChar": 15
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2ef62fb_3c940918",
        "filename": "src/libANGLE/validationCL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-25T13:29:56Z",
      "side": 1,
      "message": "can you please add error messages as you add these errors? spec:\n\npfn_notify is a callback function that can be registered by the application. This callback function\nwill be used by the OpenCL implementation to report information on errors during context\ncreation as well as errors that occur at runtime in this context. This callback function may be\ncalled asynchronously by the OpenCL implementation. It is the applicationâ€™s responsibility to\nensure that the callback function is thread-safe. The parameters to this callback function are:\n\nerrinfo is a pointer to an error string\n\nWe could add all the error strings as a follow-up, seems easier to add them as we go now. How you implement this is up to you.",
      "range": {
        "startLine": 426,
        "startChar": 8,
        "endLine": 426,
        "endChar": 26
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5c938b5_8338c46a",
        "filename": "src/libANGLE/validationCL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 426,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-25T14:18:38Z",
      "side": 1,
      "message": "This macro is already gone in my current CL, I am currently improving the readability of the validation. Adding error messages using the context notification is not easily possible due to thread safety, so that has to be handled in a separate CL.",
      "parentUuid": "b2ef62fb_3c940918",
      "range": {
        "startLine": 426,
        "startChar": 8,
        "endLine": 426,
        "endChar": 26
      },
      "revId": "d2403e19ae7b8107cd99a87926b73a4e998608c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}