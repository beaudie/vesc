{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d3bfabc1_4d80a0a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-16T09:26:36Z",
      "side": 1,
      "message": "Update a new patch according to Charlie\u0027s suggestion in http://anglebug.com/6863 (Very confused about these two failed running jobs,job results show no error,but there are tests failed.But I don\u0027t think thery are caused by my patch.)",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02948ef1_7a25e818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Some initial feedback. This optimization is so specific, that it\u0027s severely undertested. I\u0027ve identified a number of potential bugs, but I suspect there would be more.",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b422a95_6a4ab211",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 507,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "What if the update is to all layers? Shouldn\u0027t the if in line 495 check for index.getLayerCount() \u003d\u003d mImage-\u003egetLayerCount()? That would need an exception for CubeMap textures of course.\n\nThis change is likely buggy with 2D array and 3D textures. Could you please duplicate your tests to make sure 2D array, 3D and cube map textures are also tested?",
      "range": {
        "startLine": 498,
        "startChar": 0,
        "endLine": 507,
        "endChar": 9
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dd79334_ffbc1fb9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 507,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T08:16:52Z",
      "side": 1,
      "message": "Hi Shahbaz,sorry for bringing you so many noise,I will narrow down my patch to targeting 2D texture,adding a condition index.getType() \u003d\u003d gl::TextureType::_2D,i think this is the esiest way for these problems.",
      "parentUuid": "0b422a95_6a4ab211",
      "range": {
        "startLine": 498,
        "startChar": 0,
        "endLine": 507,
        "endChar": 9
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c396acea_08618712",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 511,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "This is a bug. Please duplicate or change your tests such that a non-zero base level is used.\n\nThe bug is that mState.getEffectiveBaseLevel() is returning a GL level index, but mImage-\u003egetLevelCount() has the Vulkan level count. They can\u0027t be compared like that (and what\u0027s with \u003c\u003d instead of \u003c ?)\n\nPlease use gl::LevelIndex and vk::LevelIndex appropriately to avoid such bugs.",
      "range": {
        "startLine": 510,
        "startChar": 0,
        "endLine": 511,
        "endChar": 65
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63b79b13_6fcd5bf8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 515,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "There seem to be 2 bugs here for cubemap / array textures:\n\n1. When updating some layers, it doesn\u0027t check if the other layers of the same level have defined contents or not\n2. When updating some layers, it only checks those layers in the other levels, not _all_ layers.\n\nYou should be able to write tests for both these scenarios:\n\n1. Update to layer 1, but have defined contents in layer 0 in same level (that would be missed)\n2. Update to layer 1, but have defined contents only in layer 0 of another level (which would also be missed)",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbc5dfdf_59df8bea",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 515,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T02:46:02Z",
      "side": 1,
      "message": "Thanks for the remind about cubemap/array textures,I forget to take it into consideration,will do further refinement.",
      "parentUuid": "63b79b13_6fcd5bf8",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6c0198f_a3010237",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 521,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "I\u0027m having a hard time following the logic here. If there is another level with defined contents, how is ghosting allowed?!\n\nIt seems to me that a scenario like this could trigger a bug (please add a test):\n\n- Create a texture with 2 levels, level 0: 2x2 and level 1: 1x1, and initialize it\n- Sample from it in a draw call.\n- glTexSubImage2D(level 1)\n  * This should hit this path, because level 0 has defined contents\n- glGenerateMipmap\n  * This should result in releaseImage in line 2727 below\n  * As a result, the contents of level 0 are lost and generate mipmap would produce garbage",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c8c57f5_9b06f215",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 521,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T02:46:02Z",
      "side": 1,
      "message": "case2:\nglTexSubImage2D(level 0);\nglTexSubImage2D(level 1);\nbegin to reading this texture;\nglTexSubImage2D(level 0):\nWill enter this if,set isOverWriteToAllDefinedLevel \u003d false,shouldFlush \u003d false to do staged flush,setCanGhostImage(true) to tell we can use new image in next GenerateMipmap call.\nglGenerateMipmap:\nEnter line 2727 below,release image,create image2,flush level 0 based on image2,and generate other level data,this will not produce any garbage.If no glGenerateMipmap call,will still use old image to do flush and generate mipmap.",
      "parentUuid": "d6c0198f_a3010237",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55272ffb_aa3af5ba",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 521,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T08:16:52Z",
      "side": 1,
      "message": "Sorry I misunderstand your meaning,this problem you mentioned does exist.I will try to consider if there\u0027re other solutions about this case.",
      "parentUuid": "1c8c57f5_9b06f215",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4e4585_7e7cc7d3",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 532,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Should this condition be applied to the whole logic added here? Is there a value to doing all the above logic if releaseImage() is not going to be called anyway?",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9390afa_80e7c3d2",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 532,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T02:46:02Z",
      "side": 1,
      "message": "My optimization can work(use ghosting image)in these two cases:\ncase1,this is a simple case:\nglTexSubImage2D(level 0);\nglTexSubImage2D(level 0);\nbegin to reading this texture;\nglTexSubImage2D(level 0):\nWill enter this if,release image to use new image.\n\ncase2:see line 521",
      "parentUuid": "6e4e4585_7e7cc7d3",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92809f4f_40132564",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 562,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Should this instead be `mImage-\u003evalid()` or something? What if the `if` in line 530 is false, so the image is not released, why shouldn\u0027t this path be taken?",
      "range": {
        "startLine": 562,
        "startChar": 59,
        "endLine": 562,
        "endChar": 87
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b02fffa8_067936d0",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 562,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T08:16:52Z",
      "side": 1,
      "message": "Going to line 530 means isOverWriteToAllDefinedLevel\u003dtrue,that is an overwrite to all defined contents,then we can feel free to release image or not.Adding isOverWriteToAllDefinedLevel condition here is to avoid immediate flush in the case of not all level overwrite when updating texture with PBO.Because immediate flush will cause data lost,see this case:\nglStorage2D\nglTexSubImage2D（level 0）\nglGenerateMipmap\nbegin to reading this texture;\nglTexSubImage2D（level 0）",
      "parentUuid": "92809f4f_40132564",
      "range": {
        "startLine": 562,
        "startChar": 59,
        "endLine": 562,
        "endChar": 87
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfc27c09_66f12abc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 562,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-25T21:35:45Z",
      "side": 1,
      "message": "I think we need to add another condition here too. If the copy can be done, and the buffer is being written to be the GPU, it\u0027s bad to try and map it just to avoid a barrier, because that will cause a big GPU bubble.\n\nThis should be:\n\n     \u0026\u0026 (isOverWriteToAllDefinedLevel || bufferHelper.isCurrentlyInUseForWrite())\n\n---\n\nAlso, was this meant to say `!isOverWriteToAllDefinedLevel`?",
      "parentUuid": "b02fffa8_067936d0",
      "range": {
        "startLine": 562,
        "startChar": 59,
        "endLine": 562,
        "endChar": 87
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8594a7ac_42f1266b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 562,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-28T11:18:58Z",
      "side": 1,
      "message": "Thanks very much for the perf notification,will add bufferHelper.isCurrentlyInUseForWrite() condition.\nIn addition:\nif isOverWriteToAllDefinedLevel\u003d\u003dtrue,we needn\u0027t defer flush,we can directly create new image here and do texture update on this new image(But it\u0027s not common case,so I didn\u0027t do it).\nIf isOverWriteToAllDefinedLevel\u003d\u003dfalse,we have to defer flush it and do image recreation in following glGenerateMipmap(if no glGenerateMipmap call,won\u0027t recreate image),see this case: \n glTexSubImage2D（level 0）\n glGenerateMipmap\n glDraw\n glTexSubImage2D（level 0）-\u003eisOverWriteToAllDefinedLevel\u003d\u003dfalse,create new image in glTexSubImage2D will cause other levels data lost.",
      "parentUuid": "cfc27c09_66f12abc",
      "range": {
        "startLine": 562,
        "startChar": 59,
        "endLine": 562,
        "endChar": 87
      },
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c396f2_08a2c8f1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 586,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Warning should be conditional to \"if (not ghosting)\"",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a1802bd_908a07da",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 748,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Either this, or the logic in setSubImageImpl(), should also apply to copySubTextureImpl().\n\nAlso, what does this do? I assume you are trying to disable your optimization path for non-glTexSubImage* paths. Then why is this only done for dstLevel \u003d\u003d (GLint)mState.getEffectiveBaseLevel()?",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d6a7838_e08116c8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 748,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-17T08:16:52Z",
      "side": 1,
      "message": "Yes,you\u0027re right,and shouldn\u0027t only done for dstLevel \u003d\u003d (GLint)mState.getEffectiveBaseLevel().",
      "parentUuid": "8a1802bd_908a07da",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae297858_bce0f902",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2727,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "Is this actually being hit in apps? Or just tests?",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88868d50_3144d442",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 21
      },
      "lineNbr": 2302,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "This doesn\u0027t belong here. If we cannot eliminate it, it should at least live in the TextureVk class.",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e79b80a_9036e552",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T18:37:55Z",
      "side": 1,
      "message": "The texture is very small, and the draw call is cheap. Granted, we don\u0027t currently re-check the fences when looking at whether the buffer is in use, but we might have facilities for this in the future.\n\nHow about making the texture buffer and use an artificial shader that\u0027s expensive? See kCostlyFS in TimerQueriesTest.cpp for example.",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcdd7db6_a3cc32be",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-25T21:35:45Z",
      "side": 1,
      "message": "\u003e How about making the texture buffer\n\ntypo, I meant to say \"bigger\".",
      "parentUuid": "9e79b80a_9036e552",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9228c72_22caf5c0",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6193,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-02-28T11:18:58Z",
      "side": 1,
      "message": "np,I will update it in following patch.",
      "parentUuid": "9e79b80a_9036e552",
      "revId": "bff7345cc649a0327500181ed4a7344e0c39acdd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}