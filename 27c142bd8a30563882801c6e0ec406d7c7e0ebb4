{
  "comments": [
    {
      "key": {
        "uuid": "08733496_be31fd34",
        "filename": "scripts/bmp_to_nv12.py",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "nit: tabs to spaces",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_c7b977a4",
        "filename": "scripts/bmp_to_nv12.py",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_be31fd34",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88864495_e616ba90",
        "filename": "scripts/bmp_to_nv12.py",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "from itertools import product\n\nfor (x, y) in product(range(0, width, 2), range(0, height, 2)):\n    # stuff with x and y\n\nThis will make the indexing below easier to read.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2874787a_3877e5d7",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 38,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "The number 3 here, and the hardcoded two textures in consumerAcquire are consumer / producer specific constants. Having the number of planes queried from the producer to size a vector would be better. Likewise in consumerAcquire we could use that number of plane.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_ca0a5e75",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 38,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "3 is a consumer specific constant due to the 3 planes being the max in Y-U-V. It could be upped in the future if there really is some bizarre texture format in the future but currently all the validation and texture logic is tied to it being 3.",
      "parentUuid": "2874787a_3877e5d7",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_21f7909d",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 112,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "We should try to move all of the validation to the EGL layer.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_8758742d",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 112,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "It feels like a big duplication of somewhat complex lookup logic, though I guess this function can be simplified with the assumption that all lookups will succeed and are unique.",
      "parentUuid": "08733496_21f7909d",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_04ca908c",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 112,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "Feel free to add helper functions in utilities.h for looking up buffer types and plane information.  Once the validation has succeeded, you can make assumptions that the input is valid and simplify the code.",
      "parentUuid": "08733496_8758742d",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888725d1_4a172742",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 112,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-26T18:38:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_04ca908c",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a87f884b_aad55368",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 168,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "nit: doesn\u0027t describe the mTextures[i]-\u003egetId() condition correctly.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888725d1_2a09831c",
        "filename": "src/libANGLE/Stream.cpp",
        "patchSetId": 9
      },
      "lineNbr": 168,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-26T18:38:26Z",
      "side": 1,
      "message": "That was an error but this logic was refactored anyways",
      "parentUuid": "a87f884b_aad55368",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_212eb069",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "I still think it looks cleaner to grab these in separate getters rather than use a new struct.  The Texture would then query the steam for the information it needs using an identifier to represent the buffer or plane of the stream.",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_a7b9db3d",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "I just don\u0027t like the idea of exposing producer and consumer specific concepts such as the plane to the general high level texture code as well as exposing many plane and index specific methods in the generic producer code. It feels like there isn\u0027t that clean a way to do this and I feel passing in an easily modified struct with texture-specific members is the cleanest and most easily refactored way to do this so method prototypes won\u0027t have to be changed in the future or a million methods have to be added to producers and their bases that may be changed in the future.",
      "parentUuid": "08733496_212eb069",
      "range": {
        "startLine": 57,
        "startChar": 8,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_2115d01f",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 60,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Can external images be mipmapped? Doesn\u0027t look like this is used.",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 31
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_270de058",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 60,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "Yeah this isn\u0027t needed. I added it in for completion but I forgot GL texture consumers don\u0027t have mipmapping at all.",
      "parentUuid": "08733496_2115d01f",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 31
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_c115fc63",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "This should be called getImplementation, our GetImpAs functions assume that a getImplementation method exists.",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 48
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_c79eec2d",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "I guess I can do that. I had it like this because it is a stream producer implementation rather than the entire stream and wanted to have that logical separation.",
      "parentUuid": "08733496_c115fc63",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 48
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_47c1e76c",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_c115fc63",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 48
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_21a6b082",
        "filename": "src/libANGLE/Stream.h",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Encapsulate these into a struct (texture unit and texture pointers) and put them into a vector.",
      "range": {
        "startLine": 114,
        "startChar": 3,
        "endLine": 118,
        "endChar": 30
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_8155c4ce",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Should be fine to just pass mBoundStream.",
      "range": {
        "startLine": 655,
        "startChar": 40,
        "endLine": 655,
        "endChar": 46
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_07ff040d",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "Probably don\u0027t even need to pass in a stream parameter, especially if we have a separate release function that eliminates the stream parameter from essentially being a glorified bind/unbind flag. I mainly had it for assertion purposes.",
      "parentUuid": "08733496_8155c4ce",
      "range": {
        "startLine": 655,
        "startChar": 40,
        "endLine": 655,
        "endChar": 46
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "289d58d4_21399681",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "Does this mean we\u0027ll get rid of it?",
      "parentUuid": "08733496_07ff040d",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_2aff520d",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_8155c4ce",
      "range": {
        "startLine": 655,
        "startChar": 40,
        "endLine": 655,
        "endChar": 46
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_0af29646",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 655,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Yeah",
      "parentUuid": "289d58d4_21399681",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89420c3_41caf66c",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 199,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "You can make these methods public and remove the friend declaration. The only interface libANGLE exposes is OpenGL (and EGL).",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_ca433e91",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 199,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "I was following what they did for Surface, which is also done with the friend way.",
      "parentUuid": "e89420c3_41caf66c",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_a1ef2060",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "How about calling this aquireFromStream to match the entry point eglStreamConsumerAcquire.\n\nI think we should also add a releaseFromStream to match eglStreamConsumerReleaseKHR instead of having a version that accepts a nullptr for the stream.\n\nThe release case is supposed to make the texture incomplete so I don\u0027t think the sizing information is useful.",
      "range": {
        "startLine": 202,
        "startChar": 9,
        "endLine": 202,
        "endChar": 24
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_caefbe5f",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 9
      },
      "lineNbr": 202,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_a1ef2060",
      "range": {
        "startLine": 202,
        "startChar": 9,
        "endLine": 202,
        "endChar": 24
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_8117848c",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "We may need createStream methods for each type of stream producer.  For example, the EGL_KHR_stream_producer_eglsurface extension adds a eglCreateStreamProducerSurfaceKHR with a very different prototype that wouldn\u0027t fit this method.\n\nIt probably makes sense to just name this createStreamProducerD3DTextureNV12",
      "range": {
        "startLine": 73,
        "startChar": 32,
        "endLine": 73,
        "endChar": 52
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_2779604f",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "My idea was everything that needed to be passed could be passed in the attribute map, as it can hold pointers. Though that is another case of using external API constructs to pass potentially internal data. Adding a unique method for each producer does have the potential to pollute a large amount of classes with creation methods (display\u0027s impls, the renderer and its impls). I could leave it for another refactor if we actually do add more producers.",
      "parentUuid": "08733496_8117848c",
      "range": {
        "startLine": 73,
        "startChar": 32,
        "endLine": 73,
        "endChar": 52
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_c481782c",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "Yep, we may end up with a bunch of unimplemented methods but I think it\u0027s cleaner then adding custom attributes into the map and requiring the implementations to know about them.",
      "parentUuid": "08733496_2779604f",
      "range": {
        "startLine": 73,
        "startChar": 32,
        "endLine": 73,
        "endChar": 52
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888725d1_b54ad843",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-26T18:38:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_c481782c",
      "range": {
        "startLine": 73,
        "startChar": 32,
        "endLine": 73,
        "endChar": 52
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_813ea40a",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Is the consumer type known or required?",
      "range": {
        "startLine": 74,
        "startChar": 53,
        "endLine": 74,
        "endChar": 91
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_275de0be",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "Consumer type is known. Since we only have the YUV gl texture consumer implemented right now, it technically does not need to be known, but it will be if we support say rgb texture consumers where conversion may be necessary.",
      "parentUuid": "08733496_813ea40a",
      "range": {
        "startLine": 74,
        "startChar": 53,
        "endLine": 74,
        "endChar": 91
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_3ffa3585",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "I don\u0027t see the requirement that a producer is created before a consumer, also is it possible to change the consumer?",
      "parentUuid": "08733496_275de0be",
      "range": {
        "startLine": 74,
        "startChar": 53,
        "endLine": 74,
        "endChar": 91
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_2a183257",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "The consumer is always created before the producer? The state machine enforces that and it is in the spec for streams. The consumer is also fixed once created.",
      "parentUuid": "08733496_3ffa3585",
      "range": {
        "startLine": 74,
        "startChar": 53,
        "endLine": 74,
        "endChar": 91
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_014a942a",
        "filename": "src/libANGLE/renderer/ImplFactory.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "If this class isn\u0027t referenced in this file, no need to have the forward declaration here.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_4a156e1e",
        "filename": "src/libANGLE/renderer/ImplFactory.h",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_014a942a",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4879ac72_fc4f210b",
        "filename": "src/libANGLE/renderer/StreamProducerImpl.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "We probably need a way to query the numbers of plane here.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_a109e0ca",
        "filename": "src/libANGLE/renderer/d3d/RendererD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 456,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "This can be simplified to just:\n\nGLenum bindingPoint \u003d (type !\u003d GL_TEXTURE_EXTERNAL_OES) ? type : GL_TEXTURE_2D;\ngl::Texture *t \u003d new gl::Texture(this, std::numeric_limits\u003cGLuint\u003e::max(), bindingPoint);\n        t-\u003esetStorage(bindingPoint, 1, GL_RGBA8, colorSize);\n\nThe else-if below won\u0027t be needed either.",
      "range": {
        "startLine": 444,
        "startChar": 8,
        "endLine": 456,
        "endChar": 9
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_8a3786c1",
        "filename": "src/libANGLE/renderer/d3d/RendererD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 456,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_a109e0ca",
      "range": {
        "startLine": 444,
        "startChar": 8,
        "endLine": 456,
        "endChar": 9
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_81af84c1",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3102,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "SafeDelete",
      "range": {
        "startLine": 3102,
        "startChar": 4,
        "endLine": 3102,
        "endChar": 18
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_6a230a42",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3102,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_81af84c1",
      "range": {
        "startLine": 3102,
        "startChar": 4,
        "endLine": 3102,
        "endChar": 18
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_419e4c93",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3108,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Also assert that index.mipIndex \u003d\u003d 0?",
      "range": {
        "startLine": 3108,
        "startChar": 4,
        "endLine": 3108,
        "endChar": 49
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_aa1d22fd",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3108,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_419e4c93",
      "range": {
        "startLine": 3108,
        "startChar": 4,
        "endLine": 3108,
        "endChar": 49
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_011294e9",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3120,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "assert that level \u003d\u003d 0 instead of checking?",
      "range": {
        "startLine": 3120,
        "startChar": 4,
        "endLine": 3120,
        "endChar": 49
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_0ade1655",
        "filename": "src/libANGLE/renderer/d3d/TextureD3D.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3120,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_011294e9",
      "range": {
        "startLine": 3120,
        "startChar": 4,
        "endLine": 3120,
        "endChar": 49
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_4c90436f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "No need for the consumer type if it\u0027s unused.",
      "range": {
        "startLine": 18,
        "startChar": 60,
        "endLine": 18,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_270fa0c2",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "I had it as if other potential consumers (RGB) are added we would need to know.",
      "parentUuid": "08733496_4c90436f",
      "range": {
        "startLine": 18,
        "startChar": 60,
        "endLine": 18,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_9f7429cf",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "We can update the constructor at that point, would rather not have an unreferenced parameter, some compilers may complain about it too.",
      "parentUuid": "08733496_270fa0c2",
      "range": {
        "startLine": 18,
        "startChar": 60,
        "endLine": 18,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_a50393f2",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_9f7429cf",
      "range": {
        "startLine": 18,
        "startChar": 60,
        "endLine": 18,
        "endChar": 99
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_cc48d3ae",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "ASSERT that textureD3D isn\u0027t null.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_65097b13",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_cc48d3ae",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_0caf2ba7",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "Do we have to require this?  I couldn\u0027t find it in the EGL_ANGLE_stream_producer_d3d_texture_nv12 spec.",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_520b787c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "Since there is a downsampled version of the texture, an NV12 texture whose dimensions are not divisible by 2 is not valid.",
      "parentUuid": "08733496_0caf2ba7",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_ff151d63",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "My guess is that it\u0027s not valid to create an NV12 texture that doesn\u0027t divisible-by-two dimensions to begin with.  If it is, we should update the spec to add this error case.",
      "parentUuid": "08733496_520b787c",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_aaafe2c0",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "It isn\u0027t. This is just a sanity check.",
      "parentUuid": "08733496_ff151d63",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_cc2b7373",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "These need to take into account the subresource.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 61,
        "endChar": 33
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_45fc7f16",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StreamProducerNV12.cpp",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "How so? Don\u0027t all subresources in a Texture2D have the same base texture dimension? We aren\u0027t using mipmapping at all. The input is a texture 2D array that all have the same size and no mipmaps.",
      "parentUuid": "08733496_cc2b7373",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 61,
        "endChar": 33
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_8cfb3b5c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1534,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "This will likely fail compile on release due to un-referenced local variable.",
      "range": {
        "startLine": 1532,
        "startChar": 4,
        "endLine": 1534,
        "endChar": 23
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_059607c6",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1534,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_8cfb3b5c",
      "range": {
        "startLine": 1532,
        "startChar": 4,
        "endLine": 1534,
        "endChar": 23
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_ac6477ee",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1588,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "This will not be the case for 2D array textures. See https://msdn.microsoft.com/en-us/library/windows/desktop/ff476901.aspx for a description of how to calculate it.\n\nI think we need to amend the spec so that the user passes the mip level instead because specifying a subresource index for a 2D array texture could indicate that you want two different mip levels.",
      "range": {
        "startLine": 1588,
        "startChar": 4,
        "endLine": 1588,
        "endChar": 66
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_f2456494",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1588,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "That comment is old. Miplevel will always be 0 (in the case John has at least and we designed the spec around that). The subresource ID is now the array slice being used.",
      "parentUuid": "08733496_ac6477ee",
      "range": {
        "startLine": 1588,
        "startChar": 4,
        "endLine": 1588,
        "endChar": 66
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_7fd3cddb",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1588,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "Could you clarify how these textures are stored?  Is it possible to have multiple mip levels?  If it is, then the subresource index isn\u0027t going to be indexing the array slices correctly.",
      "parentUuid": "08733496_f2456494",
      "range": {
        "startLine": 1588,
        "startChar": 4,
        "endLine": 1588,
        "endChar": 66
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888725d1_95a0f405",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1588,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-26T18:38:26Z",
      "side": 1,
      "message": "There is only one mip level for each subresource.",
      "parentUuid": "08733496_7fd3cddb",
      "range": {
        "startLine": 1588,
        "startChar": 4,
        "endLine": 1588,
        "endChar": 66
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_4c01232c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.h",
        "patchSetId": 9
      },
      "lineNbr": 212,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "nit: override instead of virtual in this class.",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 212,
        "endChar": 41
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_65841b95",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.h",
        "patchSetId": 9
      },
      "lineNbr": 212,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08733496_4c01232c",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 212,
        "endChar": 41
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8a6e026_b1083811",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1238,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "This line appears twice. Did you want to enable a extension? If yes we need to look for a validation bug that allowed the tests to pass.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_057fe735",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1238,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "No, I just accidentally enabled that twice.",
      "parentUuid": "e8a6e026_b1083811",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89420c3_81ddde28",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2719,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "nit: UNIMPLEMENTED()",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_4579df4d",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2719,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89420c3_81ddde28",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89420c3_41a116bb",
        "filename": "src/libANGLE/renderer/gl/DisplayGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "nit:UNIMPLEMENTED()",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_e5caebc3",
        "filename": "src/libANGLE/renderer/gl/DisplayGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e89420c3_41a116bb",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8a6e026_d13504d1",
        "filename": "src/libANGLE/renderer/gl/TextureGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 502,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "nit:UNIMPLEMENTED()",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_e5b3cb59",
        "filename": "src/libANGLE/renderer/gl/TextureGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 502,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8a6e026_d13504d1",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_cc3c5374",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1287,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "I noticed there is one section of EGL_KHR_stream_consumer_gltexture that we don\u0027t validate here: \"The GLES context containing the texture must be bound to the current thread.\"",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_527c588d",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1287,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "Yeah I can do that. I would need to make stream hold a pointer to the context though.",
      "parentUuid": "08733496_cc3c5374",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_9fbee9d3",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1287,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "You may be able to simplify it to just grabbing the current context and seeing if the stream\u0027s textures are owned by it.",
      "parentUuid": "08733496_527c588d",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888725d1_15ace4fc",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1287,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-26T18:38:26Z",
      "side": 1,
      "message": "Added a validate context method to stream to do this",
      "parentUuid": "08733496_9fbee9d3",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "288b98a4_43459a92",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1555,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "nit: \"Incompatible stream producer type\" for consistency with the consumer error.",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_2cab07e3",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1998,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-22T20:24:16Z",
      "side": 1,
      "message": "This feels like a hack, we should fix the validation code to take GL_TEXTURE_EXTERNAL_OES into account.",
      "range": {
        "startLine": 1998,
        "startChar": 45,
        "endLine": 1998,
        "endChar": 58
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_925fd01b",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1998,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-22T21:26:46Z",
      "side": 1,
      "message": "The problem is that function is also used in other validation methods where GL_TEXTURE_EXTERNAL_OES is illegal, which would mean creating many \"withExtenral\" and \"withoutExternal\" methods.",
      "parentUuid": "08733496_2cab07e3",
      "range": {
        "startLine": 1998,
        "startChar": 45,
        "endLine": 1998,
        "endChar": 58
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_9f8189c6",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1998,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-25T17:02:19Z",
      "side": 1,
      "message": "It should be fine to still call it with the correct target in those places since they should validate if the texture target is valid beforehand.",
      "parentUuid": "08733496_925fd01b",
      "range": {
        "startLine": 1998,
        "startChar": 45,
        "endLine": 1998,
        "endChar": 58
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08733496_e0cd7984",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1998,
      "author": {
        "id": 1144499
      },
      "writtenOn": "2016-04-25T21:17:39Z",
      "side": 1,
      "message": "The problem is that this method validation does not have a target. The target was added to ValidateTexParamParameters as a parameter because with GL_TEXTURE_EXTERNAL_OES, it needs to take target into account when it didn\u0027t need to before. ValidateSamplerParameteri doesn\u0027t have a target, so I use GL_TEXTURE_2D. So it isn\u0027t a hack but more using GL_TEXTURE_2D as a default so all pnames are allowed through.",
      "parentUuid": "08733496_9f8189c6",
      "range": {
        "startLine": 1998,
        "startChar": 45,
        "endLine": 1998,
        "endChar": 58
      },
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88864495_66f62a7b",
        "filename": "src/tests/egl_tests/EGLStreamTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 357,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-04-25T12:34:32Z",
      "side": 1,
      "message": "Can you put the D3D specific tests in another file so that the Stream API is tested on non-Windows platforms as well?",
      "revId": "27c142bd8a30563882801c6e0ec406d7c7e0ebb4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}