{
  "comments": [
    {
      "key": {
        "uuid": "0440e393_6f85a6dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-26T15:48:46Z",
      "side": 1,
      "message": "Woo hoo, green run!\nPTAL",
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba96b220_1c0caebb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "Added Shabi for the SPIR-V review. It would take me a lot longer to figure out what the code is doing.",
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edc5df5c_c9abcfa1",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1179,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "how does OpFunction relate to main() ? can\u0027t you have other non-main functions?",
      "range": {
        "startLine": 1179,
        "startChar": 31,
        "endLine": 1179,
        "endChar": 42
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e30b67d5_62b918b1",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1179,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "Yes there can. Ran into a bug with a deqp test where there is the main entry point and another function. I now match against the function id indicated as the entry point and ignore other functions.",
      "parentUuid": "edc5df5c_c9abcfa1",
      "range": {
        "startLine": 1179,
        "startChar": 31,
        "endLine": 1179,
        "endChar": 42
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed604ae0_a13bc584",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1179,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e30b67d5_62b918b1",
      "range": {
        "startLine": 1179,
        "startChar": 31,
        "endLine": 1179,
        "endChar": 42
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bca6152e_6720f4e9",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1183,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "this is a pretty extensive edit- maybe split into a helper function to isolate and reduce the indentation.",
      "range": {
        "startLine": 1183,
        "startChar": 12,
        "endLine": 1183,
        "endChar": 37
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baff440e_10fb25ff",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1183,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bca6152e_6720f4e9",
      "range": {
        "startLine": 1183,
        "startChar": 12,
        "endLine": 1183,
        "endChar": 37
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "574c594f_8ff5194a",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1214,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "maybe at some point we\u0027d want to downcast the consuming shader instead?",
      "range": {
        "startLine": 1213,
        "startChar": 24,
        "endLine": 1214,
        "endChar": 98
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15af0f65_f784a87c",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 23
      },
      "lineNbr": 1214,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "That could be, but I wouldn\u0027t do that here. That seems more appropriate for TOutputVulkanGLSL::writeVariablePrecision.",
      "parentUuid": "574c594f_8ff5194a",
      "range": {
        "startLine": 1213,
        "startChar": 24,
        "endLine": 1214,
        "endChar": 98
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49603647_47cb3881",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 23
      },
      "lineNbr": 85,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "nit: \u0027fixPrecision\u0027 is a bit generic - maybe \u0027castPrecision\u0027 or \u0027matchConsumerPrecision\u0027  ?",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "742bb905_ba1f8ba2",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 23
      },
      "lineNbr": 85,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "castPrecision works. We may cast on either side depending on mismatch (e.g. highp -\u003e mediump or mediump-\u003ehighp) so matchConsumerPrecision doesn\u0027t quite fit.\nIf there is a mismatch, we always transfer mediump.",
      "parentUuid": "49603647_47cb3881",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67c7a8f2_7c93c156",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 23
      },
      "lineNbr": 85,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "742bb905_ba1f8ba2",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9fdc158_03ab8917",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T16:00:39Z",
      "side": 1,
      "message": "can you do this with the already stored varying info instead of the merged varyings?",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67a3eb0a_8d9b9d10",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "I would need to redo the work that was done in the corresponding (program and programpipeline) getMergedVaryings calls at Program::linkImpl time.\nThose functions loop through and match up the varyings and generate the mergedVaryings info.",
      "parentUuid": "a9fdc158_03ab8917",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13373b03_8776e7c9",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T14:17:58Z",
      "side": 1,
      "message": "You have these:\n\n    ShaderMap\u003cstd::vector\u003csh::ShaderVariable\u003e\u003e mLinkedOutputVaryings;\n    ShaderMap\u003cstd::vector\u003csh::ShaderVariable\u003e\u003e mLinkedInputVaryings;\n\nCan you use those with a double for loop?",
      "parentUuid": "67a3eb0a_8d9b9d10",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9811d021_fea1c887",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T15:20:36Z",
      "side": 1,
      "message": "Those lists of varyings don\u0027t have any correlation between shader stages.   I agree it would be nice not to have to store the merged varyings, but I prefer that over two versions of resolvePrecisionMismatch() to reimplement getMergedVaryings() again with the various rules related to shader interface matching.\n\nMaybe we can get better about how long we store the merged varyings by clearing out the list if there are no mismatched precisions.   I haven\u0027t looked close enough to see what happens if we clear that list at this point though.",
      "parentUuid": "13373b03_8776e7c9",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00cfb717_d028d89b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:23:54Z",
      "side": 1,
      "message": "Can\u0027t you just iterate the list and find the same name? Are there additional complications? Storing the merged varyings is problematic. You at the very least need to serialize them and this inflates our binary size. Just would like a clear answer on what\u0027s required to avoid storing the merged varyings.",
      "parentUuid": "9811d021_fea1c887",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc0232bc_32b071e2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T15:57:30Z",
      "side": 1,
      "message": "Serialize?\nI don\u0027t understand why that\u0027s necessary. We just computed the mergedVaryings at linkImpl, we are still processing the link operation and reusing that data.\nWhat am I missing?",
      "parentUuid": "00cfb717_d028d89b",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b039ff5_fd171002",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:59:37Z",
      "side": 1,
      "message": "Hey Courtney, I\u0027ll take another look. Can you explain what\u0027s required here to avoid using the merged varyings?",
      "parentUuid": "cc0232bc_32b071e2",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f28f6f2_49c514ec",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 878,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T16:15:49Z",
      "side": 1,
      "message": "The mergedVaryings gives me a list of all varyings and indicates the producer and consumer of the varying (mergedVarying.frontShader \u0026 mergedVarying.backShader). I can then check if the precision matches and generate the appropriate notation in the mVariableInfoMap[stage][mappedName] to fix up any mismatches.\nThe process of matching up the varyings is somewhat complicated and done for me in getMergedVaryings, I didn\u0027t want to have to duplicate that logic.",
      "parentUuid": "1b039ff5_fd171002",
      "range": {
        "startLine": 878,
        "startChar": 61,
        "endLine": 878,
        "endChar": 83
      },
      "revId": "84c6ec107e3cfc8b9a870546e1b19b3542ed53f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}