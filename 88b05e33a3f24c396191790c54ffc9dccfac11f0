{
  "comments": [
    {
      "key": {
        "uuid": "f033ec7c_c29e426e",
        "filename": "src/libGLESv2/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 394,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-10T20:25:14Z",
      "side": 1,
      "message": "If this function requires ES3, it shouldn\u0027t be in the ES2Validator.",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 394,
        "endChar": 5
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50ff58b8_45aa2a94",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-10T20:25:14Z",
      "side": 1,
      "message": "How are we going to handle ES3 validation? Will be be a completely separate class from the ES2Validator?  Could also add an ESValidator that they both inherit from which has the protected Validate*Base functions.",
      "range": {
        "startLine": 73,
        "startChar": 6,
        "endLine": 73,
        "endChar": 18
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9042b0da_1f5fa368",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-10T21:00:36Z",
      "side": 1,
      "message": "It seems reasonable to have an ESValidator base, with protected methods. I\u0027ll add that. Or just one ESValidator.",
      "parentUuid": "50ff58b8_45aa2a94",
      "range": {
        "startLine": 73,
        "startChar": 6,
        "endLine": 73,
        "endChar": 18
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f033ec7c_a299be88",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-10T20:25:14Z",
      "side": 1,
      "message": "I think it would make more sense to return the Result struct directly from these functions.  They could then be const.  As it stands, the Validator object cannot be reused after it\u0027s had an error and it may be useful to test multiple methods on them or call the same method multiple times.",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 8
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7047fcec_3e5ce970",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-10T21:00:36Z",
      "side": 1,
      "message": "The cannot be const, as they set internal temporary variables. That\u0027s part of the usefulness of having a function object, so sorry I don\u0027t think it\u0027s possible or desirable.\nThey can be reused after they\u0027ve had an error, see the above discussion.\nThe intent of the design was as a function object, which is used once, like a stack call to a function.",
      "parentUuid": "f033ec7c_a299be88",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 8
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305104a9_303c10b6",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-10T21:20:11Z",
      "side": 1,
      "message": "This gets back into my prior objection-- one, it\u0027s not a recognizable function object because a) there\u0027s no operator(); it can\u0027t be invoked *as a function*, which is pretty much the raison d\u0027etre of a function object, and b) if persistent state is a key part of a pattern, and issues are raised about the persistent state, saying \"this is an implementation of pattern X\" doesn\u0027t render the issues immaterial, it\u0027s an indication that the pattern is possibly not a good design choice.\n\nPlease note that this does not mean that this design is not correct, it just means that stating \"this is a functor\" doesn\u0027t get rid of concerns about its use. Or make it a functor.",
      "parentUuid": "7047fcec_3e5ce970",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 8
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9042b0da_22edb020",
        "filename": "src/libGLESv2/validationES.h",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-10T21:23:14Z",
      "side": 1,
      "message": "Shannon, are you saying there is no such thing as a functor which does not define operator()? Anyway that debate is academic. I was originally planning to use one functor per entry point, but at Geoff\u0027s suggestion, he wanted them merged into ES***** stuff. Maybe we should abandon this effort for now? I\u0027m afraid I don\u0027t really understand the issues at play here.",
      "parentUuid": "305104a9_303c10b6",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 8
      },
      "revId": "88b05e33a3f24c396191790c54ffc9dccfac11f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}