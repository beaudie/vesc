{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a3674aca_0edac2dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-03T00:22:40Z",
      "side": 1,
      "message": "This builds on Jamie\u0027s CL by building up the absolute path to each module based on the executable\u0027s path.\n\nJamie\u0027s CL:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2496041\n\nThis outputs good symbols using Jamie\u0027s repro steps:\n\nstep 1: enable capture in your gn args\nstep 2: apply this CL https://chromium-review.googlesource.com/c/angle/angle/+/2510014\nstep 3: also make sure you apply the crash CL\nstep 4: build normally\nstep 5: run $ ANGLE_CAPTURE_TRIGGER\u003d10 out/Debug/angle_perftests --gtest_filter\u003dTracePerfTest.Run/vulkan_swiftshader_angry* --enable-all-trace-tests --start-trace-after-setup",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ca1e183_74e4ddf4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-03T03:54:22Z",
      "side": 1,
      "message": "Thanks Tim! What\u0027s changed from Jamie\u0027s version?",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80defab9_4bb302e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-03T13:56:11Z",
      "side": 1,
      "message": "This solution is pretty fragile because it assumes modules are located next to the binary. I was thinking that instead we could record the original path of the application in angle::SetCWD and use that to construct the correct relative path.",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bccb764_eb88da21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-03T15:04:11Z",
      "side": 1,
      "message": "As in change the current working directory? That would be a surprise when tests are run from a different dir and suddenly output files are created elsewhere. Could also cause failures if ANGLE is installed somewhere the user doesn\u0027t have write access to.",
      "parentUuid": "80defab9_4bb302e0",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "258ddb7f_24e7b8a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-03T17:14:03Z",
      "side": 1,
      "message": "It\u0027s something we do to make testing on the bots tractable. It\u0027s only done for the ANGLE tests. I think it\u0027s better than the alternative (not knowing how to load data files).\n\nFWIW even if we restored the CWD after we loaded data files, the issue would persist for crashes in the duration of changed CWD.",
      "parentUuid": "2bccb764_eb88da21",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a01aab34_45b0da25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T00:53:32Z",
      "side": 1,
      "message": "I still don\u0027t quite understand the situation you\u0027re describing.   Are you saying the bots put the test executables somewhere outside of where the ANGLE shared objects live?\n\nSo, something like:\n\nout/executables/angle_end2end_tests\nout/libraries/libGLESv2.so\n\n?",
      "parentUuid": "258ddb7f_24e7b8a9",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc496a4_116a5d42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-05T00:59:27Z",
      "side": 1,
      "message": "I\u0027m not making any claims about where shared objects are. Your solution relies on them being in the same folder, which seems like it would fail in some cases.\n\nI\u0027m suggesting a better approach is to remember the original CWD when we change the CWD and use that.",
      "parentUuid": "a01aab34_45b0da25",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ec1b10_fbc90b4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T02:02:10Z",
      "side": 1,
      "message": "This gets complicated quickly.   For example, lets assume we have the following:\n\nout/Debug/angle_end2end_tests\nout/Debug/libraries/libGLESv2.so\nout/Other/libvk_swiftshader.so\n\nAssume the CWD is:\n/home/user/angle\n\nBuilding up the absolute path so we can get to the various libraries requires finding the longest common substring of the CWD and the various relative paths so we can put the pieces together to build a good path for addr2line.   While this is possible (and used for interview questions apparently), it\u0027s more than we want to do in a crash handler - especially if we\u0027re using char* rather than std::string because we\u0027re worried about stack space.\n\nHandling anything other than the libraries being next to the executables seems a esoteric to me.",
      "parentUuid": "7dc496a4_116a5d42",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2250d7f3_44298b4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-05T13:03:37Z",
      "side": 1,
      "message": "If you set the CWD back to where the app was run, the paths to all the modules are correct coming from the backtrace. You don\u0027t need absolute paths.",
      "parentUuid": "f2ec1b10_fbc90b4d",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3cae494_cd283754",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T20:00:53Z",
      "side": 1,
      "message": "Where do you store the directory when angle::SetCWD() is called?   A global string declared in system_utils_posix.cpp doesn\u0027t work:\n\n../../src/common/system_utils_posix.cpp:23:30: error: declaration requires an exit-time destructor [-Werror,-Wexit-time-destructors]\nOptional\u003cstd::string\u003e originalCwd;",
      "parentUuid": "2250d7f3_44298b4b",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "129886b4_930a7d80",
        "filename": "infra/gn_isolate_map.pyl",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-03T03:54:22Z",
      "side": 1,
      "message": "What\u0027s this?",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7e779ad_b7eca7e9",
        "filename": "infra/gn_isolate_map.pyl",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T02:56:37Z",
      "side": 1,
      "message": "No idea, it was part of Jamie\u0027s change.   Reverted.",
      "parentUuid": "129886b4_930a7d80",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8c7b11_f6878849",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T00:53:32Z",
      "side": 1,
      "message": "Shabi - This conditional block is the new piece added to Jamie\u0027s CL.",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e276c1b_3f3d1c6f",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-03T03:54:22Z",
      "side": 1,
      "message": "Suggest `static`. This is called from a signal handler, who knows how much stack there is for use.",
      "range": {
        "startLine": 130,
        "startChar": 12,
        "endLine": 130,
        "endChar": 16
      },
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aed3f74e_fd5d60cc",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T00:53:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e276c1b_3f3d1c6f",
      "range": {
        "startLine": 130,
        "startChar": 12,
        "endLine": 130,
        "endChar": 16
      },
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce7708fc_49cc4972",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-03T03:54:22Z",
      "side": 1,
      "message": "If you can avoid strings, that would be preferable. Again, this is from a signal handler, so better not do memory allocations. You can also replace `system` with fork/execve/wait to avoid constructing a command line (which is also safer, for example `module` and `substring` above are not escaped).",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97d27ff_a23c0001",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T00:53:32Z",
      "side": 1,
      "message": "Ok, I\u0027ll take a look at that approach.",
      "parentUuid": "ce7708fc_49cc4972",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed266cf7_68724692",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T02:56:37Z",
      "side": 1,
      "message": "Keeping std::string, std::vector, etc. really simplifies things here since those give us some nice string manipulation functions for free.\n\nfork/execv/wait is segfaulting for me.   It\u0027s also pretty ugly, since I can\u0027t find a good way to create an array of strings to pass to execv():\n\n        char *argv[8];\n        argv[0] \u003d \"addr2line\";\n\ngives:\n\n    ../../util/posix/crash_handler_posix.cpp:165:19: error: ISO C++11 does not allow conversion from string literal to \u0027char *\u0027 [-Werror,-Wwritable-strings]\n        argv[0] \u003d \"addr2line\";\n\nYou know C++ better than I do, so let me know if there\u0027s something else worth trying.\n\nRegardless, I think this approach is fine anyway.   As far as I understand things this is only intended for debug builds, since release builds will have symbols stripped anyway so there wouldn\u0027t be any strings to be printed by this handler.",
      "parentUuid": "f97d27ff_a23c0001",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09efae16_a3f88c0c",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-05T04:45:18Z",
      "side": 1,
      "message": "Ack about std::string and std::vector\n\nRegarding execv, look for execv in test_utils_posix.cpp. There\u0027s a comment that will answer all your questions :)",
      "parentUuid": "ed266cf7_68724692",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95a9a3b0_9e103cc8",
        "filename": "util/posix/crash_handler_posix.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T20:00:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09efae16_a3f88c0c",
      "revId": "9c6b7b7cb6faead6935bbbcb948dfc11ff13750d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}