{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a89b19e_78ffa358",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-01T15:34:25Z",
      "side": 1,
      "message": "nit: symbol table",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 9,
        "endChar": 23
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30618d39_ad405be1",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-01T15:34:25Z",
      "side": 1,
      "message": "nit: angle naming scheme for static methods (see site for more details)",
      "range": {
        "startLine": 24,
        "startChar": 43,
        "endLine": 24,
        "endChar": 62
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73992b20_491066b8",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-29T20:31:38Z",
      "side": 1,
      "message": "I suggest using angle::FixedVector instead of std::array for mExtensions. Then size() will tell how many elements it has and you wouldn\u0027t need to use TExtension::UNDEFINED as a hack. createExtensionList could then be removed :)",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d01ca75_b177d619",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-01T15:34:25Z",
      "side": 1,
      "message": "seems reasonable - would it use more space?",
      "parentUuid": "73992b20_491066b8",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbdf29ac_2cd10694",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2021-06-01T22:09:04Z",
      "side": 1,
      "message": "Just to confirm, are you suggesting I also change the autogen to use angle::FixedVector as well? The symbol table autogen files are using std::array and the ParseContext.cpp file is using std::array for checking extensions.",
      "parentUuid": "1d01ca75_b177d619",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3acf4ee8_b82484fd",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-02T02:23:07Z",
      "side": 1,
      "message": "Yes I was, but Jamie is right, the additional size_t on every builtin symbol is not great. Could you do a quick comparison between using std::array and angle::FixedVector and see how much that affects the ANGLE libGLESv2.so binary size? If it\u0027s more than a KB or two, let\u0027s just keep this as is.",
      "parentUuid": "fbdf29ac_2cd10694",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 49,
        "endChar": 50
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d983d10_03e436cd",
        "filename": "src/compiler/translator/Symbol.h",
        "patchSetId": 9
      },
      "lineNbr": 201,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-29T20:31:38Z",
      "side": 1,
      "message": "nit: Capitalize",
      "range": {
        "startLine": 201,
        "startChar": 21,
        "endLine": 201,
        "endChar": 22
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "002a776a_c7fff6b4",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2694,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-01T15:34:25Z",
      "side": 1,
      "message": "incorrect validation - OES is only for FramebufferTextureOES and EXT for this function.",
      "range": {
        "startLine": 2694,
        "startChar": 34,
        "endLine": 2694,
        "endChar": 51
      },
      "revId": "0e3b44e60bc0324d55e7b37530f81ab75cad018b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}