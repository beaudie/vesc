{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "20d1abba_f90e4445",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-09-20T19:23:40Z",
      "side": 1,
      "message": "Looks like we need to tweak this for WinUWP (since OpenCL + UWP is not supported)\n\n```diff\ndiff --git a/BUILD.gn b/BUILD.gn\nindex 4cd1b69280..dcac993cdb 100644\n--- a/BUILD.gn\n+++ b/BUILD.gn\n@@ -297,6 +297,10 @@ config(\"internal_config\") {\n   if (is_win \u0026\u0026 build_with_chromium) {\n     defines +\u003d [ \"ANGLE_WINDOWS_NO_FUTEX\u003d1\" ]\n   }\n+\n+  if (angle_enable_cl) {\n+    defines +\u003d [ \"ANGLE_ENABLE_CL\" ]\n+  }\n }\n \n config(\"constructor_and_destructor_warnings\") {\ndiff --git a/src/libANGLE/renderer/Format.h b/src/libANGLE/renderer/Format.h\nindex e4b44efa28..f7e2b8f86f 100644\n--- a/src/libANGLE/renderer/Format.h\n+++ b/src/libANGLE/renderer/Format.h\n@@ -12,10 +12,13 @@\n #ifndef LIBANGLE_RENDERER_FORMAT_H_\n #define LIBANGLE_RENDERER_FORMAT_H_\n \n-#include \"libANGLE/cl_types.h\"\n #include \"libANGLE/renderer/FormatID_autogen.h\"\n #include \"libANGLE/renderer/renderer_utils.h\"\n \n+#if defined(ANGLE_ENABLE_CL)\n+#include \"libANGLE/cl_types.h\"\n+#endif // ANGLE_ENABLE_CL\n+\n namespace angle\n {\n enum class FormatID;\n@@ -52,10 +55,12 @@ struct Format final : private angle::NonCopyable\n \n     static FormatID InternalFormatToID(GLenum internalFormat);\n \n+#if defined(ANGLE_ENABLE_CL)\n     static FormatID CLRFormatToID(cl_channel_type internalChannelType);\n     static FormatID CLRGFormatToID(cl_channel_type internalChannelType);\n     static FormatID CLRGBFormatToID(cl_channel_type internalChannelType);\n     static FormatID CLRGBAFormatToID(cl_channel_type internalChannelType);\n+#endif // ANGLE_ENABLE_CL\n \n     constexpr bool hasDepthOrStencilBits() const;\n     constexpr bool hasDepthAndStencilBits() const;\ndiff --git a/src/libANGLE/renderer/Format_table_autogen.cpp b/src/libANGLE/renderer/Format_table_autogen.cpp\nindex 4c64aaa92d..9c1d445934 100644\n--- a/src/libANGLE/renderer/Format_table_autogen.cpp\n+++ b/src/libANGLE/renderer/Format_table_autogen.cpp\n@@ -8,8 +8,10 @@\n // ANGLE Format table:\n //   Queries for typed format information from the ANGLE format enum.\n \n-#include \"libANGLE/cl_types.h\"\n #include \"libANGLE/renderer/Format.h\"\n+#if defined(ANGLE_ENABLE_CL)\n+#include \"libANGLE/cl_types.h\"\n+#endif // ANGLE_ENABLE_CL\n \n #include \"image_util/copyimage.h\"\n #include \"image_util/generatemip.h\"\n@@ -18,8 +20,8 @@\n namespace angle\n {\n \n-static constexpr rx::FastCopyFunctionMap::Entry BGRAEntry  \u003d {angle::FormatID::R8G8B8A8_UNORM,\n-                                                              CopyBGRA8ToRGBA8};\n+static constexpr rx::FastCopyFunctionMap::Entry BGRAEntry \u003d {angle::FormatID::R8G8B8A8_UNORM,\n+                                                             CopyBGRA8ToRGBA8};\n static constexpr rx::FastCopyFunctionMap BGRACopyFunctions \u003d {\u0026BGRAEntry, 1};\n static constexpr rx::FastCopyFunctionMap NoCopyFunctions;\n \n@@ -770,6 +772,7 @@ FormatID Format::InternalFormatToID(GLenum internalFormat)\n     }\n }\n \n+#if defined(ANGLE_ENABLE_CL)\n // static\n FormatID Format::CLRFormatToID(cl_channel_type internalChannelType)\n {\n@@ -905,6 +908,7 @@ FormatID Format::CLRGBAFormatToID(cl_channel_type internalChannelType)\n             return FormatID::NONE;\n     }\n }\n+#endif // ANGLE_ENABLE_CL\n \n const Format *GetFormatInfoTable()\n {\ndiff --git a/src/libANGLE/renderer/gen_angle_format_table.py b/src/libANGLE/renderer/gen_angle_format_table.py\nindex f929ce6693..fbff65a46d 100644\n--- a/src/libANGLE/renderer/gen_angle_format_table.py\n+++ b/src/libANGLE/renderer/gen_angle_format_table.py\n@@ -56,7 +56,9 @@ template_autogen_inl \u003d \"\"\"// GENERATED FILE - DO NOT EDIT.\n //   Queries for typed format information from the ANGLE format enum.\n \n #include \"libANGLE/renderer/Format.h\"\n+#if defined(ANGLE_ENABLE_CL)\n #include \"libANGLE/cl_types.h\"\n+#endif // ANGLE_ENABLE_CL\n \n #include \"image_util/copyimage.h\"\n #include \"image_util/generatemip.h\"\n@@ -85,6 +87,7 @@ FormatID Format::InternalFormatToID(GLenum internalFormat)\n     }}\n }}\n \n+#if defined(ANGLE_ENABLE_CL)\n // static\n FormatID Format::CLRFormatToID(cl_channel_type internalChannelType)\n {{\n@@ -120,6 +123,7 @@ FormatID Format::CLRGBAFormatToID(cl_channel_type internalChannelType)\n {angle_rgba_format_switch}\n     }}\n }}\n+#endif // ANGLE_ENABLE_CL\n \n const Format *GetFormatInfoTable()\n {{\ndiff --git a/src/libGLESv2.gni b/src/libGLESv2.gni\nindex e0d727079c..707d6e08e3 100644\n--- a/src/libGLESv2.gni\n+++ b/src/libGLESv2.gni\n@@ -248,8 +248,6 @@ libangle_headers \u003d [\n   \"src/libANGLE/BlobCache.h\",\n   \"src/libANGLE/Buffer.h\",\n   \"src/libANGLE/Caps.h\",\n-  \"src/libANGLE/CLBitField.h\",\n-  \"src/libANGLE/CLRefPointer.h\",\n   \"src/libANGLE/Compiler.h\",\n   \"src/libANGLE/Config.h\",\n   \"src/libANGLE/Constants.h\",\n@@ -324,7 +322,6 @@ libangle_headers \u003d [\n   \"src/libANGLE/VertexAttribute.inc\",\n   \"src/libANGLE/angletypes.h\",\n   \"src/libANGLE/angletypes.inc\",\n-  \"src/libANGLE/cl_types.h\",\n   \"src/libANGLE/context_private_call_gles_autogen.h\",\n   \"src/libANGLE/context_private_call_gl_autogen.h\",\n   \"src/libANGLE/entry_points_utils.cpp\",\n@@ -397,9 +394,18 @@ libangle_headers \u003d [\n   \"src/libANGLE/validationGL3_autogen.h\",\n   \"src/libANGLE/validationGL4_autogen.h\",\n   \"src/common/base/anglebase/trace_event/trace_event.h\",\n-  \"src/common/PackedCLEnums_autogen.h\",\n ]\n \n+if (angle_enable_cl)\n+{\n+  libangle_headers +\u003d [\n+    \"src/libANGLE/CLBitField.h\",\n+    \"src/libANGLE/CLRefPointer.h\",\n+    \"src/libANGLE/cl_types.h\",\n+    \"src/common/PackedCLEnums_autogen.h\"\n+  ]\n+}\n+\n libangle_sources \u003d [\n   \"src/libANGLE/AttributeMap.cpp\",\n   \"src/libANGLE/BlobCache.cpp\",\n```",
      "revId": "179f57ff0d20f3268f9e8f4ace003d75736489e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87d6534b_a97f101b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-20T20:56:02Z",
      "side": 1,
      "message": "Thanks for catching this Austin, you could also consider moving the `#if defined(ANGLE_ENABLE_CL)` inside cl_types.h so you don\u0027t have to guard against it on every include.\n\nThe `CLRFormatToID` stuff in `format_table_autogen.cpp` can move to a new `format_table_cl_autogen,cpp` so it can be conditionally included in build (removes the need for `#ifdef`). FWIW, given that the stuff in the header is also `static`, they could move a separate header again to remove the `#ifdef` (as that header can be included only from CL code)",
      "parentUuid": "20d1abba_f90e4445",
      "revId": "179f57ff0d20f3268f9e8f4ace003d75736489e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fa4e365_2f28d9a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 3319458
      },
      "writtenOn": "2024-09-25T09:17:00Z",
      "side": 1,
      "message": "I placed the #if defined(ANGLE_ENABLE_CL) inside cl_types.h and around all of the cl autogen methods headers/defintions.",
      "parentUuid": "87d6534b_a97f101b",
      "revId": "179f57ff0d20f3268f9e8f4ace003d75736489e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}