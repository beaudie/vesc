{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "225a1021_87ca0e72",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2195,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-31T19:31:51Z",
      "side": 1,
      "message": "No need to set this, it\u0027s false by default. We\u0027ve generally let these test-only features just be initialized by the test harness.",
      "revId": "200fb85fd9c01dbe88ca46487366d17c367183df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be4d848f_3e955095",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-31T19:31:51Z",
      "side": 1,
      "message": "This is going to be error-prone, it\u0027s easy to forget to check this when checking `shaderPixelLocalStorageCoherentANGLE` elsewhere.\n\nMy suggestion is to just make `shaderPixelLocalStorageCoherentANGLE` conditional to (not) this feature, and avoid adding this where the extension is used.\n\n(same for other backends, no need for front-end to override it anymore (could `ASSERT` instead))",
      "range": {
        "startLine": 118,
        "startChar": 40,
        "endLine": 118,
        "endChar": 72
      },
      "revId": "200fb85fd9c01dbe88ca46487366d17c367183df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c08e3625_31180b34",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-08-31T21:14:14Z",
      "side": 1,
      "message": "\u003e This is going to be error-prone\n\nYes, agreed. I like your suggestion.\n\n\u003e My suggestion is to just make `shaderPixelLocalStorageCoherentANGLE` conditional to (not) this feature\n\nHow would you recommend doing that? In `RendererVk::ensureCapsInitialized()` I don\u0027t have access to the FrontendFeatures (that I know of). Can I get them, or is there somewhere else I can clear out the extension support based on this frontend feature?",
      "parentUuid": "be4d848f_3e955095",
      "range": {
        "startLine": 118,
        "startChar": 40,
        "endLine": 118,
        "endChar": 72
      },
      "revId": "200fb85fd9c01dbe88ca46487366d17c367183df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "defa8ef9_600a0470",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-31T21:20:13Z",
      "side": 1,
      "message": "You can get the frontend features from `mDisplay`. Hopefully similarly accessible in other backends.\n\nAt the same time, if the feature is used to get the _backend_ to not expose an extension, it\u0027s technically a backend feature not a frontend one. So you could also consider adding one feature per backend.\n\nI\u0027m good with either solution",
      "parentUuid": "c08e3625_31180b34",
      "range": {
        "startLine": 118,
        "startChar": 40,
        "endLine": 118,
        "endChar": 72
      },
      "revId": "200fb85fd9c01dbe88ca46487366d17c367183df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}