{
  "comments": [
    {
      "key": {
        "uuid": "9b0a4506_4eb5cca9",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 24
      },
      "lineNbr": 216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T15:28:34Z",
      "side": 1,
      "message": "I don\u0027t understand why you need rebind buffer. Can you just use validBufferCount \u003d\u003d 0?",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 75
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12f792e5_b136d151",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 24
      },
      "lineNbr": 216,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2019-12-09T06:07:51Z",
      "side": 1,
      "message": "We reuse counter buffers when new transform feedback buffers are bound. And beginTransformFeedback API and new transformFeedback buffer bindings cause buffer offset resetting. That\u0027s why I added a state for rebind buffer. Please refer BufferRebinding and OffsetResetOnBeginTransformFeedback test in end2end tests.",
      "parentUuid": "9b0a4506_4eb5cca9",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 75
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f55ac0a8_fdf91d5d",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T15:28:34Z",
      "side": 1,
      "message": "Does this need to be a struct? Can you just store these inline as normal member variables?",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3115cccf_bc3c4df7",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-12-06T16:05:10Z",
      "side": 1,
      "message": "encapsulating all xfb related stuff into a logical unit is preferable though right?",
      "parentUuid": "f55ac0a8_fdf91d5d",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31e92ba7_d0d10b31",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T16:08:20Z",
      "side": 1,
      "message": "Minor preference for no encapsulation mostly because it would be consistent with how the rest of the members in CommandGraphNode are stored. It\u0027s a pretty flat class.",
      "parentUuid": "3115cccf_bc3c4df7",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "541e2644_07e93539",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-12-06T16:11:04Z",
      "side": 1,
      "message": "in general, is the preference for flat classes just stylistic or something else?",
      "parentUuid": "31e92ba7_d0d10b31",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ddb15a5_422aab4d",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T16:43:45Z",
      "side": 1,
      "message": "In this case stylistic. It general using classes *can* change the generated code. In this case I don\u0027t think it would.",
      "parentUuid": "541e2644_07e93539",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8decd066_93626574",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 85,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2019-12-09T06:07:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ddb15a5_422aab4d",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 85,
        "endChar": 2
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b11492f3_695ecef6",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 219,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T15:28:34Z",
      "side": 1,
      "message": "Can you check validBufferCount \u003d\u003d 0 for the case where mHas is false?",
      "range": {
        "startLine": 219,
        "startChar": 7,
        "endLine": 219,
        "endChar": 65
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baaa5b37_f4b224b8",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 24
      },
      "lineNbr": 219,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2019-12-09T06:07:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b11492f3_695ecef6",
      "range": {
        "startLine": 219,
        "startChar": 7,
        "endLine": 219,
        "endChar": 65
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ed76e40_f1ec4f1f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1247,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-06T15:28:34Z",
      "side": 1,
      "message": "Can you confirm that if we restart the RendrerPass because of a Framebuffer change that we also correctly store the XFB info? I was thinking you would put this setInfo function in FramebufferVk::beginRenderPass.",
      "range": {
        "startLine": 1247,
        "startChar": 17,
        "endLine": 1247,
        "endChar": 47
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70de0cfa_5f3e5fa3",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1247,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2019-12-09T06:07:51Z",
      "side": 1,
      "message": "We do not record every transform feedback API, but we record appropriate transform feedback state for each target draw call. That\u0027t the key of my design. because transform feedback state is tightly coupled to target draw call, render pass restarting will not affect to the results.",
      "parentUuid": "7ed76e40_f1ec4f1f",
      "range": {
        "startLine": 1247,
        "startChar": 17,
        "endLine": 1247,
        "endChar": 47
      },
      "revId": "10302b422f4a9725897a9d01fe5085e7f709fdea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}