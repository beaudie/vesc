{
  "comments": [
    {
      "key": {
        "uuid": "a1501886_bdbb2060",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Nit: iteration",
      "range": {
        "startLine": 13,
        "startChar": 40,
        "endLine": 13,
        "endChar": 49
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7048c960_689f6cc4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1501886_bdbb2060",
      "range": {
        "startLine": 13,
        "startChar": 40,
        "endLine": 13,
        "endChar": 49
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3857c95_cd57e65e",
        "filename": "scripts/perf_test_runner.py",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Nit: execution time?",
      "range": {
        "startLine": 112,
        "startChar": 32,
        "endLine": 112,
        "endChar": 37
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "249ed108_9971d634",
        "filename": "scripts/perf_test_runner.py",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3857c95_cd57e65e",
      "range": {
        "startLine": 112,
        "startChar": 32,
        "endLine": 112,
        "endChar": 37
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed2b4754_c5d3366d",
        "filename": "scripts/perf_test_runner.py",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Nit: no longer infinite",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 10
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe5bee71_7b88ba43",
        "filename": "scripts/perf_test_runner.py",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed2b4754_c5d3366d",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 10
      },
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71deea29_5cb6b07b",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 220,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Do you still need to stop this on timeout? Wasn\u0027t the point of calibration that you know exactly how many steps to run?\n\nIn other words, what advantage `mNumStepsPerformed` has over timeout?",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "875c1022_9e1fffed",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 220,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "Good suggestion. Removed the time parameter. Left in a maximum runtime just as a sanity check.",
      "parentUuid": "71deea29_5cb6b07b",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c59fc87c_fb9dccc3",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 503,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Nit: not a big deal, but I would probably do something like this (O(n) instead of O(n^2)):\n\nint outIndex \u003d 0;\nfor (int i \u003d 0; i \u003c *argc; ++i)\n{\n  if (...)\n  {\n    // consume arg, don\u0027t call `DeleteArg`. If two args are used, do ++i once in the middle.\n  }\n  else\n  {\n    *argv[outIndex++] \u003d *argv[i];\n  }\n}\n*argc \u003d outIndex;",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eecaf74_462cfead",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 503,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c59fc87c_fb9dccc3",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a5c24c2_0cc3338d",
        "filename": "util/windows/win32/Win32_system_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-12T19:01:00Z",
      "side": 1,
      "message": "Do you get a complete system freeze for the duration of the test if you run gl_null for example?",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14d711d0_97f829b5",
        "filename": "util/windows/win32/Win32_system_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-12T22:23:16Z",
      "side": 1,
      "message": "I was able to browse the computer fine as it ran. Bear in mind it maxes out one core at most.",
      "parentUuid": "8a5c24c2_0cc3338d",
      "revId": "c833da238117f279f76eeabef7d88e51db6c484c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}