{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f7a5608_7f251026",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-30T07:07:18Z",
      "side": 1,
      "message": "I\u0027d suggest splitting the naming change + HasWriteAccess helper to another CL and land faster. Makes it easier for reverts too, if necessary.",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aec2bdd6_3d2ac55f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-30T07:07:18Z",
      "side": 1,
      "message": "Should be `enum class`, with the `ToUnderlying`s added that should hopefully be trivial",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2798473_c5fe84c1",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-30T07:07:18Z",
      "side": 1,
      "message": "Nice trick, please set the enum values as hex directly in `ResourceAccess` to make sure it\u0027s clear that the bit pattern is expected to be accumulate as such. Could even set the `ReadWrite` enum as `ReadOnly | WriteOnly` instead of `0x3`.",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8bab725_ff5f2e65",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-30T07:07:18Z",
      "side": 1,
      "message": "Or `(ToUnderlying(access) \u0026 ResourceAccess::WriteOnly) !\u003d 0` following the above logic.",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4a1b0db_a5fe1862",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1239,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-30T07:07:18Z",
      "side": 1,
      "message": "Might as well always use DontCare. LoadOp None is only really ever useful when paired with storeOp None, and that itself is a hack because we can\u0027t use preserve attachments.\n\nYou can also add an `ASSERT(*storeOp !\u003d RenderPassStoreOp::None)` (because the resource is written to)",
      "range": {
        "startLine": 1231,
        "startChar": 0,
        "endLine": 1239,
        "endChar": 9
      },
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe67bda_aa68ea3f",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3047,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-30T01:44:39Z",
      "side": 1,
      "message": "should the LoadNones counter for depth attachments be incremented by 1?",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a3ca834_9c2d658a",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3082,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-30T01:44:39Z",
      "side": 1,
      "message": "same as above: should the LoadNones counter for depth attachment be incremented by 1?",
      "revId": "c1e79b2573f038dc5183d52f506c8a3c312642e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}