{
  "comments": [
    {
      "key": {
        "uuid": "689acf6c_147e4594",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-09-23T16:21:40Z",
      "side": 1,
      "message": "Charlie/Jamie PTAL",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3125f31c_0a0b5263",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-23T17:18:23Z",
      "side": 1,
      "message": "Thanks for the regression test.",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7610b8f5_4af21a9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-23T19:29:53Z",
      "side": 1,
      "message": "thanks guys, landing this",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff1c31a5_e481e1f7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-23T18:07:14Z",
      "side": 1,
      "message": "What exactly was the issue here? Maybe whatever bug is there with using the context\u0027s staging buffer could be found elsewhere too?\n\nI forgot how the context\u0027s staging buffer manages to keep the buffers around until used. If it doesn\u0027t do that at all (and assumes buffers are immediately used), then this change is good to me.",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea82df35_6dfcec1d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-23T18:35:28Z",
      "side": 1,
      "message": "WOuld like to know exact bug here as well. The context staging buffer is never destroyed until ContextVk::destroy time.",
      "parentUuid": "ff1c31a5_e481e1f7",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1082884_0343f1a4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-09-23T18:56:50Z",
      "side": 1,
      "message": "Current angle has TextureVk::copyAndStageImageSubresource() that will:\n - copyImageDataToBuffer() which uses the context\u0027s staging buffer as the destination\n - Then stage a buffer update with stageSubresourceUpdateFromBuffer() which uses this same staging buffer as the source.\n\nContextVk\u0027s staging buffer can be stored in a \"updatesToKeep\" for an update later on.\nOn every SwapBuffers() call, contextVk will do a flushImpl() where it will then determine if it needs to releaseInFlightBuffersToResourceUseList(). We hit a scenario where the below is true and the buffer becomes invalid.\n\n// If the dynamic buffer was resized we cannot reuse the retained buffer.\nif (bufferHelper-\u003egetSize() \u003c mSize)\n{\n    bufferHelper-\u003erelease(contextVk-\u003egetRenderer());\n}\n\nThen when we get to a draw where the particular update needs to be flushed, it will hit an assert when preparing the copy command as the buffer is invalid.",
      "parentUuid": "ea82df35_6dfcec1d",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b3309e8_e71ecbd2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-23T19:02:10Z",
      "side": 1,
      "message": "Ok then my guess was right that the context\u0027s staging buffer is expected to be used immediately (and that it doesn\u0027t try to remember which suballocation is pending what).\n\nLGTM.",
      "parentUuid": "a1082884_0343f1a4",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61b4c897_71f1a182",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-23T19:05:30Z",
      "side": 1,
      "message": "I think we allow a buffer that has been added to context\u0027s mUseList able to get freed is troublesome. I think I have ran into that bug before when I play with the releaseInFlightBuffer() code. So that is one bug.\n\nBut mean time, I think there is also another bug here that the context\u0027s staging buffer is expected to use and flush immediately. It is not expected to put in the keep list. Usually the caller makes the decision of which staging buffer to use and issue a flush immediately. I guess in this case, probably use per object staging buffer is the right thing to do anyway. So this fix looks good to me.",
      "parentUuid": "7b3309e8_e71ecbd2",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55c2054_9e0fc5e5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-23T19:29:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61b4c897_71f1a182",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfbd6d90_b2a72c23",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-23T19:54:53Z",
      "side": 1,
      "message": "This sounds familiar:\n\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2310962/1/src/libANGLE/renderer/vulkan/BufferVk.cpp#506",
      "parentUuid": "a55c2054_9e0fc5e5",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a12f7276_5900595b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4908,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-23T20:22:27Z",
      "side": 1,
      "message": "The problem here is not that retain() not been called, in fact, retain() is called  in releaseInFlightBuffersToResourceUseList right before it calls bufferHelper-\u003erelease(). The problem I think is that somehow the buffer gets released while it is retained. I don\u0027t know exactly how that happened though. filed http://b/169263967 to further investigation on this.",
      "parentUuid": "dfbd6d90_b2a72c23",
      "revId": "bfe75113c1d8fda7a146aa13a9031e7ab1bbb714",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}