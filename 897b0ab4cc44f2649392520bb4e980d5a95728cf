{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e7bc6aed_609e7f20",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-02-02T21:04:25Z",
      "side": 1,
      "message": "Suggest \"Fixed: angleproject:7999\" which will auto-close the bug.",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "028861f5_a73f38a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-03T01:41:55Z",
      "side": 1,
      "message": "Is this new? (Surprised it\u0027s Fixed and not Fixes)\n\nWe would likely have to add support for it in our PRESUBMIT, otherwise it\u0027ll probably still complain about lack of Bug: tag.",
      "parentUuid": "e7bc6aed_609e7f20",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26041c83_61b3ac5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-02-03T06:29:09Z",
      "side": 1,
      "message": "It\u0027s actually been there a while. Documentation:\nhttps://chromium.googlesource.com/chromium/src/+/main/docs/contributing.md#cl-footer-reference\n\nI think ANGLE\u0027s presubmit already supports it; https://chromium-review.googlesource.com/c/angle/angle/+/4203427 used just the \"Fixed\" syntax.",
      "parentUuid": "028861f5_a73f38a6",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cd9aef0_9350975a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-02-02T21:04:25Z",
      "side": 1,
      "message": "Good find and fix Quyen. Let me send this out for review and +1 it myself. lgtm\n\nCC\u0027ing a few others as FYI.",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d31d099b_8e171bc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2023-02-03T06:58:41Z",
      "side": 1,
      "message": "As far as I can tell the code is a progression over status quo.\nIt would be great to have the test of \"draw a big buffer and update and draw again\" without the synthetic toggle, but it\u0027s better than no test.",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c606992_795d1a79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-02-03T16:15:58Z",
      "side": 1,
      "message": "I think \"a big buffer draw then update then draw\" test is not useful for this particular bug. Size of uniform/vertex/index buffers don\u0027t matter to the UBO argument buffer\u0027s size. It is just for storing a table of bindings, so it\u0027s most likely 128 bytes (16 slots of buffers\u0027 pointers). Shared memory would still be used in this case for argument buffer by default.",
      "parentUuid": "d31d099b_8e171bc4",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a041a3_f526d886",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 5
      },
      "lineNbr": 1487,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2023-02-02T19:33:37Z",
      "side": 1,
      "message": "Side effects like this are tricky, can we introduce an actual flag / option to say \u0027this will be modified on the cpu\u0027 instead of just passing a pointer in that we don\u0027t read later?",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a9f225_2d42eb9b",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 5
      },
      "lineNbr": 1487,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2023-02-03T06:58:41Z",
      "side": 1,
      "message": "To me the clearest in that direction would be to submit a subsequent patch to change all 4 call sites of allocate + map as explicit:\n\n    ANGLE_TRY(pool.allocate(..., buffer, offset));\n    ptr \u003d buffer.mapWithOpt(offset, readonly\u003dfalse, sync\u003dfalse);\n  \nLater commit could modify mapWithOpt to return a scoped object..\nMaybe fixing this bug wouldn\u0027t need to block on that?",
      "parentUuid": "40a041a3_f526d886",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a88e497b_de740a86",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 5
      },
      "lineNbr": 1487,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-02-03T16:15:58Z",
      "side": 1,
      "message": "Or we can just use the new `BufferManager` class for UBO argument buffers. The new `BufferManager` class doesn\u0027t do any mapping implicitly.",
      "parentUuid": "23a9f225_2d42eb9b",
      "revId": "897b0ab4cc44f2649392520bb4e980d5a95728cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}