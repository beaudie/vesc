{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "25f9d7c5_631dd443",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-21T14:42:28Z",
      "side": 1,
      "message": "This seems to have fixed most the issues:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/3594801\n\nI thin the extension is enabled in windows and linux, but the config bit is not, that is what I suspect for no matching configs. I\u0027ll look into that this morning.\n\nThe fail on swiftshader - I have no idea. Maybe unrelated?",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0106af53_6205ef9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-21T15:34:51Z",
      "side": 1,
      "message": "DisplayVk.cpp (extension enabled if SharedPresent supported)\n    outExtensions-\u003emutableRenderBufferKHR \u003d\n        getRenderer()-\u003egetFeatures().supportsSharedPresentableImageExtension.enabled;\n\nvk_caps_utils.cpp (if extension supported, all configs set with MUTABLE_BIT)\n    if (display-\u003egetExtensions().mutableRenderBufferKHR)\n    {\n        config.surfaceType |\u003d EGL_MUTABLE_RENDER_BUFFER_BIT_KHR;\n    }\n\nSeems right to me.",
      "parentUuid": "25f9d7c5_631dd443",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eba4c3a7_a2164dbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-21T15:34:51Z",
      "side": 1,
      "message": "Comments. Can we resolve everything except the ANDROID auto refresh attribute?",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22ddbc37_82d98f73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-21T21:17:03Z",
      "side": 1,
      "message": "Tested passing with extension advertised, and pass as skipped with extension disabled. Cool!",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "310b3b8b_4e5570f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-21T21:17:39Z",
      "side": 1,
      "message": "IIUC, this fixed the mutable render buffer query. What else does this CL cover that I missed?",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29d6ace5_aef642e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-21T22:21:34Z",
      "side": 1,
      "message": "There\u0027s an internal bug filed for tracking to fix that (from our prior meeting).",
      "parentUuid": "eba4c3a7_a2164dbd",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bc209a1_21ded83b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:23:20Z",
      "side": 1,
      "message": "Reply",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9f1a437_e690d58d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:23:20Z",
      "side": 1,
      "message": "It was to include EGL_SINGLE_BUFFER at eglCreateWindowSurface - but that is now separate.\n1. Add query for current render buffer\n2. Ignore setSwapInterval in SHARED_DEMENAD_REFRESH mode, otherwise it changes mode.\n3. Validation of VG_COLORSPACE - unrelated but needed fixed.\n4. Fix validation error on EGL_SINGLE_BUFFER\n5. Add test so we could verify",
      "parentUuid": "310b3b8b_4e5570f0",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0781488_6dda8a2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:36:36Z",
      "side": 1,
      "message": "Reply.",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11b0f91c_db9404c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:50:53Z",
      "side": 1,
      "message": "OK.",
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba24fad6_602f524a",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-25T14:52:08Z",
      "side": 1,
      "message": "This is unused?",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3f81e2f_4319be97",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:23:20Z",
      "side": 1,
      "message": "Its a core feature to query the current render buffer setting.\nShould be part of this:\nhttps://bugs.chromium.org/p/angleproject/issues/detail?id\u003d7224 - which I have ready for upload.\nHowever, this patch is first and function is needed to check if the render buffer mode is set. I use with tests.\nI could combine the two changes again - fix for mutable render buffer, and add SINGLE_BUFFER to eglCreateWindowSurface.",
      "parentUuid": "ba24fad6_602f524a",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fb135ca_a578a2be",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-25T15:28:12Z",
      "side": 1,
      "message": "Ok you could move this function itself to the other change, but keep the rest of the code in this CL separate if they are good standalone.",
      "parentUuid": "e3f81e2f_4319be97",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ab2484_103789e3",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:36:36Z",
      "side": 1,
      "message": "I use it in the test case to verify that the mode is changed. Otherwise I skip the test, because it may fail if the presentation mode is not supported.\nThis is where the 2 patches overlap on needed functionality.",
      "parentUuid": "9fb135ca_a578a2be",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7d23e37_a52dd070",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-25T15:45:17Z",
      "side": 1,
      "message": "I don\u0027t see where?\n\nAnyway, no worries if you want to keep it. I\u0027d just use `return` instead of the through-parameter return. (and for the latter we use pointers like `EGLint *renderBufferOut` to be explicit)",
      "parentUuid": "71ab2484_103789e3",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bbf8bb9_a4deef0e",
        "filename": "src/libANGLE/renderer/SurfaceImpl.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-25T15:50:53Z",
      "side": 1,
      "message": "Most of the time the value is from an attribute in Surface. But in this Vulkan case, we check the backend in case it fails on change. So I will use the *renderBufferOut.",
      "parentUuid": "b7d23e37_a52dd070",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 32
      },
      "revId": "0b492974cd8c28032e5c49a31d579c2a30f50196",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}