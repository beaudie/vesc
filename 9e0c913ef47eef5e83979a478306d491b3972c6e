{
  "comments": [
    {
      "key": {
        "uuid": "8689ab89_27033f85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-30T00:09:19Z",
      "side": 1,
      "message": "PTAL",
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01ac68f5_21eabca7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-30T01:43:33Z",
      "side": 1,
      "message": "How much improvement are you seeing with this?",
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "302796e2_bac2b385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-30T01:44:29Z",
      "side": 1,
      "message": "Nevermind, just saw 4.5% mentioned before.",
      "parentUuid": "01ac68f5_21eabca7",
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5178c683_06e36d61",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-30T01:43:33Z",
      "side": 1,
      "message": "Missing \u0026 probably the cause of assert failures.",
      "range": {
        "startLine": 437,
        "startChar": 41,
        "endLine": 437,
        "endChar": 42
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b13e817_d1173af3",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-30T02:06:37Z",
      "side": 1,
      "message": "why not use getAtomicBufferCount !\u003d 0, or !mAtmomicCounterBuffers.empty()? I wouldn\u0027t worry too much about false positives when null buffers are bound.",
      "range": {
        "startLine": 437,
        "startChar": 8,
        "endLine": 437,
        "endChar": 70
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecace086_6e858dae",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-30T16:40:20Z",
      "side": 1,
      "message": "mAtmomicCounterBuffers is \"resized\" to \"caps.maxAtomicCounterBufferBindings\" in context initialization so the \"size()\" will never be 0. i thought of converting it into \"reserve\" but that wont work since it looks like the vector can be sparse and needs to be tied to an index. We should be able to convert this into a map of [index, buffers] when abseil is back and then we can simply use the \"size()\" in \"hasValidAtomicCounterBuffer()\"",
      "parentUuid": "9b13e817_d1173af3",
      "range": {
        "startLine": 437,
        "startChar": 8,
        "endLine": 437,
        "endChar": 70
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4653b793_2680b57c",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-30T17:47:04Z",
      "side": 1,
      "message": "Done, thanks Shabi",
      "parentUuid": "5178c683_06e36d61",
      "range": {
        "startLine": 437,
        "startChar": 41,
        "endLine": 437,
        "endChar": 42
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43f39c57_ed5b6dbc",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-31T13:04:25Z",
      "side": 1,
      "message": "Alternately we could just keep a counter of the number of buffers bound to this indexed binding point. You could implement that in this CL to completely eliminate this hotspot.",
      "parentUuid": "ecace086_6e858dae",
      "range": {
        "startLine": 437,
        "startChar": 8,
        "endLine": 437,
        "endChar": 70
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b71ebde_475bea28",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 3
      },
      "lineNbr": 437,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-31T15:58:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43f39c57_ed5b6dbc",
      "range": {
        "startLine": 437,
        "startChar": 8,
        "endLine": 437,
        "endChar": 70
      },
      "revId": "9e0c913ef47eef5e83979a478306d491b3972c6e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}