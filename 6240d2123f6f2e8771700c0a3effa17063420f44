{
  "comments": [
    {
      "key": {
        "uuid": "8d837d04_05fee1cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T00:42:55Z",
      "side": 1,
      "message": "Thanks Quyen for your contributions! Do you have more worked planned after we land XFB? FYI the Apple Metal team has been looking at the back-end you\u0027ve contributed and are working internally to be able to contribute directly.\n\nSome feedback on this patch from an Apple dev is: \"From my read of the patch, it looks like there\u0027s no respecting the tier limits for AB tiers\nhttps://developer.apple.com/documentation/metal/buffers/about_argument_buffers?language\u003dobjc \".\n\nCan you see if we can respect the tier limits?",
      "revId": "6240d2123f6f2e8771700c0a3effa17063420f44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98e9bc9d_7da65711",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-17T02:42:14Z",
      "side": 1,
      "message": "I have almost all features of GLE$ 3.0 already implemented, just waiting to be merged and adapted to latest ANGLE changes. Except flat shading\u0027s provoking vertex. I was going to do a hack (slow-path actually), maybe Metal dev could find a best way to deal with this flat shading issue (Metal uses first provoking vertex convention). Perhaps they could help improve the existing code also, given my limited personal time, some of the code might not be optimal. Here are things left for GLES 3.0:\n- primitive restart (esp for triangle fan and line loop emulation).\n- integer textures.\n- shadow samplers (compare mode and so on).\n- texture array (code is already there actually).\n- texture swizzle.\n- fence sync.\n- flat shading\u0027s provoking vertex *\nExcept the last one, I was planning to push my own implementations to ANGLE. But Apple dev team could try to tackle these features on their own also, but perhaps they could give us a plan so that I could avoid the conflicts.\n\nCurrently only pre-iPhone 11 has 31 total buffers limit (including those in AB). iPhone 10 and above have at least 96 buffers, macOS has at least 64 buffers.\nIf we only use vertex attributes and UBO + XFB then the total buffers needed is at least 16 + 12 + 4 \u003d 32 \u003e 31 limit.\nWe can disable ES 3.0 on pre-iphone 10 or reduce UBO slots to below 12 (not conforming to GLES 3.0 spec min limit) or Metal dev team could help improve the buffers allocation currently on metal back-end (for example, I dedicated one slot for default attribute, if all attributes are enabled, then this slot is wasted).\nXFB buffers usage could be further reduced to 1 if we just write all vertex outputs to a buffer in 1st pass then in 2nd pass, copy XFB attributes from this buffer to XFB buffers via compute shader. Though this is slower approach and it could be done in following up CL after the XFB CL.",
      "parentUuid": "8d837d04_05fee1cf",
      "revId": "6240d2123f6f2e8771700c0a3effa17063420f44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "176ade35_d216db61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T14:23:34Z",
      "side": 1,
      "message": "Hey Quyen,\n\nPlease feel free to continue contributing your patch stack up until you are blocked with provoking vertex emulation. My last feedback from Apple is that it might take them a while to get permission to start directly contributing so it\u0027s best if we can finish your upstream contributions. If you get too busy to contribute, that\u0027s not a problem. Looking forward to all those CLs! Maybe we can turn on the dEQP GLES 3 tests with Metal at some point (Jonah can you help with that?)\n\nRegarding your comments about buffer limits, is that addressing the comment on tier lists? Sorry if it\u0027s a silly question, I am not very familiar with Metal.",
      "parentUuid": "98e9bc9d_7da65711",
      "revId": "6240d2123f6f2e8771700c0a3effa17063420f44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4cefc56_0bb1e4d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-17T15:05:30Z",
      "side": 1,
      "message": "Yes, I was referring to the tier limit. The lowest tier (on iOS before A11 GPU on iPhone X) supports only 31 buffers, including both those bound to discrete slots and those embedded inside one argument buffer. So it is not enough to support minimum number of GLES buffers anw (16 attributes + 12 UBOs + 4 XFBs). So I suggested we disable GLES 3 on tier 1 iOS devices for now (it is not important atm anw since we can only test macOS).\n\nThe other tier limits (min 64 buffers on macOS and 96 buffers on iOS post A11) are non-issue since the metal back-end is not going to use that many buffers.",
      "parentUuid": "176ade35_d216db61",
      "revId": "6240d2123f6f2e8771700c0a3effa17063420f44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d121c5a_dc9fe292",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T00:42:55Z",
      "side": 1,
      "message": "Can you please use ANGLE_INSTANTIATE_TEST_ES3_AND to inject the Metal config? I was having issues with the overloading approach you\u0027re using here. GTest warns about unused configs on some platforms although it currently doesn\u0027t cause the step to fail. If you can change prior tests to use these kind of macros that would be appreciated as well.",
      "range": {
        "startLine": 3254,
        "startChar": 27,
        "endLine": 3254,
        "endChar": 44
      },
      "revId": "6240d2123f6f2e8771700c0a3effa17063420f44",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}