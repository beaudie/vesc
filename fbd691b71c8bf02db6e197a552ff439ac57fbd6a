{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "30fad97d_992a9603",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 147,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "nit: angle::Result and ANGLE_VK_TRY",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 8
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d2122c_6f32a027",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 147,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "The reason I changed it to VKResult here is to match it with wait API so that it is consistent. See the comment in the wait.",
      "parentUuid": "30fad97d_992a9603",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 8
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2c05ad1_81012459",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "nit: angle::Result and ANGLE_VK_TRY\n\nFor getStatus too. You can return VK_TIMEOUT/VK_NOT_READY through a bool* or VkResult* output",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 228,
        "endChar": 8
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd06c42_13818c16",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "SharedFence is still mostly a wrapper class, it does not process the result come out of VkFence::wait call. If I make it return angle::Result, all caller code has to change which makes unnecessary code diffs. Especially this wait function called from handleDeviceLost which should not return angle::Result::Stop(). But if we return angle::result, then decision has to be made here which is awkward. Same thing with getStatus, the current form API is simpler.",
      "parentUuid": "e2c05ad1_81012459",
      "range": {
        "startLine": 228,
        "startChar": 0,
        "endLine": 228,
        "endChar": 8
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a162c68_45153be7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 252,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "I think fenceOut should be reset first no matter what. It\u0027s obviously one the caller didn\u0027t care about.\n\nAnd I\u0027d also suggest moving fence allocation here, so fetch never fails.",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4631ef_bcfce13c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 252,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "It is always reset here, maybe I misunderstood your comment?\nIf you make allocation here, then this will no longer a recycler, but an allocator class. I was trying to minimize unnecessary change here. but if we want to do more change, here, my suggestion is remove this FenceRecycler all together and make  Recycler class thread safe (Something we can do in separate CL.).",
      "parentUuid": "5a162c68_45153be7",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c6e891a_55e3af5c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1580,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "But garbage is not being cleaned up?",
      "range": {
        "startLine": 1579,
        "startChar": 73,
        "endLine": 1580,
        "endChar": 19
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "542dab2d_900f1c4b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1580,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c6e891a_55e3af5c",
      "range": {
        "startLine": 1579,
        "startChar": 73,
        "endLine": 1580,
        "endChar": 19
      },
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9592573b_5179002d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "Please implement move constructor assignment. CommandBatch is moved, so can this be. Is this ever copied? You could try `angle::NonCopyable` and keep it if everything still compiles (and nothing more could be turned to std::move)!",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d07e5905_f25a3a52",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9592573b_5179002d",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd634caf_5435e003",
        "filename": "src/tests/egl_tests/EGLMultiContextTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 697,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-01-23T16:14:59Z",
      "side": 1,
      "message": "This means that the wait is over, so threadB is not actually making any use of command queue while threadAs are waiting.\n\nHow about this: threadA (which can be only one not three) signals `ThreadABeforeMap` and threadB waits for it. Then `threadB` starts a loop of draw/readback until `threadA` signals `ThreadAAfterMap`.\n\nSo basically `threadB` limits its work for the duration of `glMapBufferRange`.",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c87f239a_137871be",
        "filename": "src/tests/egl_tests/EGLMultiContextTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 697,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T19:57:15Z",
      "side": 1,
      "message": "ThreadB will do submission (which uses commandQueue) at line 700. The idea is to wait the submission until threadA starts fence.wait(). Three threadA is try to test more than one thread calling fence.wait works okay.",
      "parentUuid": "dd634caf_5435e003",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5baf7b1_52030b91",
        "filename": "src/tests/egl_tests/EGLMultiContextTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 697,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-01-23T22:43:18Z",
      "side": 1,
      "message": "One thing I can do here to make it do more frequent submission is add a loop here and keep doing submission until threadA all come out of wait.",
      "parentUuid": "c87f239a_137871be",
      "revId": "fbd691b71c8bf02db6e197a552ff439ac57fbd6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}