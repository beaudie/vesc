{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "70da457a_4e415cdb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-05-01T21:50:44Z",
      "side": 1,
      "message": "Thanks for putting this together Scott. Not sure this is the pattern - I need to look at the compiler more later. Is this using Metal function constants?",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21e37344_d09a10da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2023-05-02T00:01:57Z",
      "side": 1,
      "message": "There\u0027s a bitmask that is passed in to main. This makes use of the bitmask to decide which paths to take rather than generating different code.",
      "parentUuid": "70da457a_4e415cdb",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d1d28fa_cc243148",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-05-02T05:30:10Z",
      "side": 1,
      "message": "Thanks, I see now. This looks great!",
      "parentUuid": "21e37344_d09a10da",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f31b39df_21691565",
        "filename": "src/compiler/translator/TranslatorMetalDirect.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-05-02T05:57:48Z",
      "side": 1,
      "message": "A2C state does not affect built-in variables.",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7feb7e2_5ab70c91",
        "filename": "src/compiler/translator/TranslatorMetalDirect.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2023-05-02T21:02:52Z",
      "side": 1,
      "message": "Can you elaborate more on the concern?",
      "parentUuid": "f31b39df_21691565",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f7f2238_7d17af7f",
        "filename": "src/compiler/translator/TranslatorMetalDirect.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-05-02T21:08:45Z",
      "side": 1,
      "message": "The `alphaToCoverage` driver uniform bit (when used) reflects a specific multisample rasterization state that is not related to flipping any built-in variables.",
      "parentUuid": "e7feb7e2_5ab70c91",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16103dee_0805710a",
        "filename": "src/compiler/translator/TranslatorMetalDirect.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2023-05-02T21:41:13Z",
      "side": 1,
      "message": "I added that because https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/compiler/translator/TranslatorMetalDirect.cpp#490 needs gl_fragcoord. That code is conditional based on alphaToCoverage. On tip-of-tree, if emulateAlphaToCoverage is true, won\u0027t this code be executed? Perhaps I\u0027m misreading the code or misunderstanding? What are you suggesting this should be?",
      "parentUuid": "4f7f2238_7d17af7f",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3a460ce_66c3e164",
        "filename": "src/compiler/translator/TranslatorMetalDirect.cpp",
        "patchSetId": 2
      },
      "lineNbr": 285,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-05-02T22:30:09Z",
      "side": 1,
      "message": "A2C emulation is currently controlled by several flags, including a platform-dependent feature and a frontend A2C toggle, which may be translated into a driver uniform bit. Note that the platform-dependent feature also affects pipeline descriptor states. Given that ANGLE CI does not run end2end tests on Apple Silicon, which must have A2C emulation disabled, new regressions may be introduced by not accounting for all possible permutations.\n\nAFAIK, the goal is to make the generated MSL invariant of whether A2C emulation is needed. The simplest way to achieve that would be to:\n- assume that `compileOptions.emulateAlphaToCoverage` is true;\n- introduce a new MSL function constant named like `ANGLEEmulateAlphaToCoverage`, set it to true on the appropriate platforms from `ProgramMtl::getSpecializedShader` (see `ANGLEUseSampleCompareGradient` nearby);\n- change the generated MSL condition that wraps `alphaBlock` in `AddSampleMaskDeclaration` to be AND of the function constant reference (created similar to `sampleMaskEnabledVar`) and the driver uniform reference as it is currently.",
      "parentUuid": "16103dee_0805710a",
      "revId": "934d85eabdafbbde033f44414081a075d25bf362",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}