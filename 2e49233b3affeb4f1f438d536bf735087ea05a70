{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2291fded_2b76d0e5",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2390,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-12T19:17:49Z",
      "side": 1,
      "message": "I am thinking the easier way might just do it in ImageHelper class. You basically add a new method (lets say ImageHelper::isUpdatingEntireContent()), and then  TextureVk::flushImageStagedUpdates(), you do this:\n\nif(mImage-\u003eisUpdatingEntireContent(){\n releaseImage();\n initImage();\n}\n\nThat way you do not need do any of extra state tracking to figure out if this is full texture update or not. You should be able to figure out from inspecting all the staged updates and make that decision, I think.",
      "range": {
        "startLine": 2387,
        "startChar": 9,
        "endLine": 2390,
        "endChar": 85
      },
      "revId": "2e49233b3affeb4f1f438d536bf735087ea05a70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86440037_140739de",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2390,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-01-13T05:56:19Z",
      "side": 1,
      "message": "But for texture update with unpackbuffer,current angle will not go to TextureVk::flushImageStagedUpdates,see TextureVk::copyBufferDataToImage,and MH31 is full of this case.",
      "parentUuid": "2291fded_2b76d0e5",
      "range": {
        "startLine": 2387,
        "startChar": 9,
        "endLine": 2390,
        "endChar": 85
      },
      "revId": "2e49233b3affeb4f1f438d536bf735087ea05a70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e173ba9d_8a9f83a1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2390,
      "author": {
        "id": 1446209
      },
      "writtenOn": "2022-01-13T08:00:15Z",
      "side": 1,
      "message": "Adding single level condition(mImage-\u003eisSingleLevelUpdate() is due to:\nglTexSubImage2D(level\u003d0)-\u003evkCmdCopyBufferToImage(image1,miplevel\u003d0)\nglTexSubImage2D(level\u003d1)-\u003evkCmdCopyBufferToImage(image2,miplevel\u003d1)\nglDraw()\nThis will cause level 0 update missing.Therefore,shouldn\u0027t create new image if not single level update.\n\nExcept for single-mip and full texture update,adding \u0027usedInRunningCommands and mImage-\u003egetCurrentImageLayout() \u003d\u003d vk::ImageLayout::FragmentShaderReadOnly\u0027 condition to recreate image only when old image is being read by fragment shader to save image recreation operation.\neg:\nglTexStorage2D()-\u003ecreate image1\nglTexSubImage2D(level\u003d0)-\u003evkCmdCopyBufferToImage(image1,miplevel\u003d0)\nglTexSubImage2D(level\u003d0)-\u003evkCmdCopyBufferToImage(image1,miplevel\u003d0),\nno need to recreate image every time,since there\u0027re no FRAGMENT_SHADER_BIT -\u003e TRANSFER_BIT barrier.\nglDraw()\nSubmitQueue\nglSubTexImage2D(image2)-\u003erecreate image to do buffercopy on this new image\nglDraw()\nSubmitQueue",
      "parentUuid": "86440037_140739de",
      "range": {
        "startLine": 2387,
        "startChar": 9,
        "endLine": 2390,
        "endChar": 85
      },
      "revId": "2e49233b3affeb4f1f438d536bf735087ea05a70",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}