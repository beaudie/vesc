{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e61a294f_debae46e",
        "filename": "src/common/Spinlock.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-06-27T16:56:00Z",
      "side": 1,
      "message": "Not questioning your result here, but this change effectively changed spinlock to mutex lock, right? Maybe you should check the usage of spinlock and change that to use mutex instead of spinlock.",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "821d77e0b218589e2479b21b8eeb3a161fdf7995",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6649c69_2a35f9f5",
        "filename": "src/common/Spinlock.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-06-27T17:27:39Z",
      "side": 1,
      "message": "\u003e Not questioning your result here, but this change effectively changed spinlock to mutex lock, right? \n\nI do not think so. Performance of `Spinlock` (when no contention) is a lot faster than `std::mutex`. This change only affects waiting when lock is failed (when there is contention). `Spinlock` is still spins, but now uses `std::this_thread::yield()` in the loop instead of `ANGLE_SMT_PAUSE()`. Number of spins on Windows on my laptop is around 7000 spins/ms. On Android 1000-2000 spins/ms. I think this resolution is good enough.\n\n\u003e Maybe you should check the usage of spinlock and change that to use mutex instead of spinlock.\n\nActually we already using `std::mutex` and trying to use `Spinlock`.\n\nCurrently we are using `SingleContextMutex` (not actual mutex) and `SharedContextMutex\u003cstd::mutex\u003e`. However, changing Context mutex from `SingleContextMutex` to `SharedContextMutex\u003cstd::mutex\u003e` is not 100% safe. Therefore, I preparing changes that will remove `SingleContextMutex`. New solution will use `TypedContextMutex\u003cangle::Spinlock\u003e` and `TypedContextMutex\u003cstd::mutex\u003e` instead.\n\nNext step is try to remove `TypedContextMutex\u003cstd::mutex\u003e` and only use `TypedContextMutex\u003cangle::Spinlock\u003e` because overhead of `Spinlock` when there is no contention is a lot less (28.312ms vs 12.196ms for 1000\u0027000 `glGetError()` calls on S906B). However, after I did this - mentioned tests started to fail (TIMEOUT).\n\nAfter investigation I concluded that `ANGLE_SMT_PAUSE()` does absolutely nothing useful. But `std::this_thread::yield()` in contrast, slows down waiting thread instead of blocking useful worker threads.\n\nI do not understand what is the point of `ANGLE_SMT_PAUSE()`?\nIn my understanding it should do same thing what `std::this_thread::yield()` does, but perhaps with less overhead.",
      "parentUuid": "e61a294f_debae46e",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "821d77e0b218589e2479b21b8eeb3a161fdf7995",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccf64b71_c250b0c9",
        "filename": "src/common/Spinlock.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-06-27T21:33:22Z",
      "side": 1,
      "message": "I think spinLock means keep CPU core busy and not intentionally let scheduler try to swap out the calling thread (like what mutex does). Or in other word, spinlock means to tell scheduler that I am still busy. Calling yield violates this, since it tells scheduler that I am willing to yield. That is why I am not fan of this change, But what you try to do with SingleContextMutex and SharedContextMutex transition is fine, maybe you should wrap it in a separate function that calls yield instead of using spinLock.",
      "parentUuid": "c6649c69_2a35f9f5",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "821d77e0b218589e2479b21b8eeb3a161fdf7995",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96abc43d_03beb51f",
        "filename": "src/common/Spinlock.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-27T21:54:01Z",
      "side": 1,
      "message": "ANGLE_SMT_PAUSE() is a hint to the CPU that this is a busy loop, so that it can continue its busy loop but save power. It has nothing to do with the OS scheduler.\n\nI was just looking at this again the other day: https://www.realworldtech.com/forum/?threadid\u003d189711\u0026curpostid\u003d189723 which doesn\u0027t particularly put spinlock-in-user-space in a good light. It\u0027s probably still fine for ANGLE\u0027s particular use case, but that\u0027s to be seen.\n\nI\u0027m not sure yield() is always a good idea though, it behaves very differently between Linux and windows for example. I\u0027m sorry I\u0027ve been slow to get to anglebug.com/8224, but would you give me a few days to take care of that, and we can see how the numbers look like when we don\u0027t actually take the lock half of the times?",
      "parentUuid": "ccf64b71_c250b0c9",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "821d77e0b218589e2479b21b8eeb3a161fdf7995",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18d9e735_0d2dc8e8",
        "filename": "src/common/Spinlock.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-06-28T00:02:57Z",
      "side": 1,
      "message": "Right, my point is exactly this: the spinlock is supposed to tell scheduler that \"I am busy\", but calling yield is doing the opposite. Maybe we should rename spinLock to \"FastLock\" or other names, then this CL itself will be less controversial, and we can focus on SingleContextMutex to SharedContextMutex transition, which is what actually matters.",
      "parentUuid": "96abc43d_03beb51f",
      "range": {
        "startLine": 47,
        "startChar": 30,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "821d77e0b218589e2479b21b8eeb3a161fdf7995",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}