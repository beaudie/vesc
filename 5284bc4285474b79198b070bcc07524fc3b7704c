{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8837d8e1_eb00e7c4",
        "filename": "util/capture/frame_capture_test_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-10-13T15:55:57Z",
      "side": 1,
      "message": "Why not dump the entire data too? Then you could have a stream to debug as you please.",
      "revId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "128d4686_1f984557",
        "filename": "util/capture/frame_capture_test_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-10-13T16:06:53Z",
      "side": 1,
      "message": "If you mean compressed data, I\u0027ve already checked that it has the same CRC in a previous round. I have been thinking of dumping the (partially) uncompressed data somewhere but it\u0027s hundreds of MB and even then it doesn\u0027t give us the full state (one possibility is something gets corrupted in the zlib library itself)\n\nIdeally I\u0027d love to have some kind of full dump that I could then investigate but that might be way more effort than I\u0027m willing to put into this (I\u0027m pretty close to giving up on this tbf, this is likely just a harness issue so pretty low impact)",
      "parentUuid": "8837d8e1_eb00e7c4",
      "revId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bf76411_915e3dfa",
        "filename": "util/capture/frame_capture_test_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-10-13T18:01:10Z",
      "side": 1,
      "message": "Right, it\u0027s great that you\u0027re doing this actually, even if it goes super slowly. You never know what nasty thing you might discover.\n\nYou could just `fopen`, `fwrite` into somewhere temp you could then hopefully retrieve from the bots. I remember CRC wasn\u0027t an issue, so it\u0027s really curious what fails. If we have the actual bytestream, we can run uncompress on it as much as needed to investigate. Like, maybe it would find an undefined behavior thing in gzip, or something.",
      "parentUuid": "128d4686_1f984557",
      "revId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5284bc4285474b79198b070bcc07524fc3b7704c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}