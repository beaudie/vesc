import registry_xml
import json
import sys
import os
from datetime import date

# this template is used to generate a mapping of gl enum names
# to the enum values
template_gl_enum_to_string_formats_and_types_source = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {data_source_name}.
//
// Copyright {year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// gl_enum_to_string_formats_and_types_autogen.cpp:
//   mapping of GLenum value to string.

#include "angle_gl.h"
#include "tests/gl_tests/gl_enum_to_string_formats_and_types.h"

namespace gl
{{
namespace {{
const char kUnknownGLenumString[] = "EnumUnknown";
}}

const char *GLenumToStringFormatsAndTypes(unsigned int value)
{{
    {switch_case_string}
}}

}}  // namespace gl

"""

template_enum_to_string_formats_and_types = """
    switch (value) {{
        {inner_group_cases}
        default:
            return kUnknownGLenumString;
    }}
"""

template_enum_value_to_string_case = """case {value}: return {name};"""


def filter_list(enum_list):
    '''
    Remove enums not in the header files
    '''
    enums_to_remove = [
        "GL_BGR5_A1_ANGLEX", "GL_BGR565_ANGLEX", "GL_BGRA4_ANGLEX", "GL_BGRA8_SRGB_ANGLEX",
        "GL_BGRX8_ANGLEX"
    ]
    for enum_string in enums_to_remove:
        if enum_string in enum_list:
            enum_list.remove(enum_string)


def get_switch_case_string(data_input_path):
    with open(data_input_path, 'r') as f:
        enum_list = json.load(f)["enums"]
        filter_list(enum_list)
        inner_code_block = "\n".join([
            template_enum_value_to_string_case.format(
                value='%s' % name,
                name='"%s"' % name,
            ) for name in enum_list
        ])
        return template_enum_to_string_formats_and_types.format(inner_group_cases=inner_code_block)


def main(data_input_path, source_output_path, data_source_name):
    switch_case_string = get_switch_case_string(data_input_path)
    source_content_formats_and_types = template_gl_enum_to_string_formats_and_types_source.format(
        script_name=os.path.basename(sys.argv[0]),
        data_source_name=data_source_name,
        year=date.today().year,
        switch_case_string=switch_case_string,
    )

    relative_source_output_path = registry_xml.script_relative(source_output_path)
    with open(relative_source_output_path, 'w') as f:
        f.write(source_content_formats_and_types)


if __name__ == '__main__':
    gl_enum_to_string_formats_and_types_autogen_base_path = '../src/tests/gl_tests/'
    data_source_name = 'format_and_type_enums.json'
    inputs = [gl_enum_to_string_formats_and_types_autogen_base_path + data_source_name]
    outputs = [
        gl_enum_to_string_formats_and_types_autogen_base_path +
        'gl_enum_to_string_formats_and_types_autogen.cpp'
    ]
    if len(sys.argv) > 1:
        if sys.argv[1] == 'inputs':
            print ','.join(inputs)
        elif sys.argv[1] == 'outputs':
            print ','.join(outputs)
    else:
        sys.exit(
            main(
                registry_xml.script_relative(inputs[0]), registry_xml.script_relative(outputs[0]),
                data_source_name))
