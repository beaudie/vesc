#  Copyright 2019 The ANGLE Project Authors. All rights reserved.
#  Use of this source code is governed by a BSD-style license that can be
#  found in the LICENSE file.
#
#  Code generation for:
#  - src/tests/deqp_support/BUILD.gn
#  - src/tests/deqp_data.gni
#  NOTE: don't run this script directly. Run scripts/run_code_generation.py.

import errno
import os
import sys
import shutil


def initDataDirectories(dataDirectories):
    dataDirectories.append(os.path.join("data", "gles2"))
    dataDirectories.append(os.path.join("data", "gles3"))
    dataDirectories.append(os.path.join("data", "gles31"))
    dataDirectories.append(os.path.join("external", "graphicsfuzz", "data", "gles3"))
    dataDirectories.append(os.path.join("external", "openglcts", "data", "gles3"))


def initPathReplacements(pathReplacements):
    # The GraphicsFuzz data files need the 'external/graphicsfuzz/' prefix removed
    pathToReplace = os.path.join("external", "graphicsfuzz", "")  # Include trailing slash
    pathReplacements[pathToReplace] = ""
    # The KHR dEQP tests expect a root prefix of "gl_cts" for some reason.
    pathToReplace = os.path.join("external", "openglcts", "")  # Include trailing slash
    pathReplacements[pathToReplace] = os.path.join("data", "gl_cts", "")


def createBuildGnFile(buildGnPath):
    # Cleanup the old file
    if os.path.exists(buildGnPath):
        os.remove(buildGnPath)
    # Make the new one
    return open(buildGnPath, "w+")


def createGniFile(gniFilename):
    # Cleanup the old file
    if os.path.exists(gniFilename):
        os.remove(gniFilename)
    # Make the new one
    return open(gniFilename, "w+")


def writeFileHeader(fileIn):
    templateFileHeader = """# GENERATED FILE - DO NOT EDIT.
# Generated by: {script_name}
#
# Copyright 2019 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""

    fileHeader = templateFileHeader.format(script_name=os.path.basename(__file__))
    fileIn.write(fileHeader)


def fixDestinationDirectory(pathReplacements, relativeDirectory):
    for pathReplacement in pathReplacements:
        if pathReplacement in relativeDirectory:
            return relativeDirectory.replace(pathReplacement, pathReplacements[pathReplacement])
    return relativeDirectory


def convertPathToVarName(path):
    return path.replace("/", "_")


def main():
    # List of directories containing data files
    dataDirectories = []
    # List of directories to exclude from the copy
    excludedDirectories = [
        ".git",
    ]
    # List of files to exclude from the copy
    excludedFilenames = [
        "LICENSE",
    ]
    # Dictionary of parts of paths that need to be replaced
    # Key: Part of path to be replaced
    # Value: What to replace it with
    pathReplacements = {}
    # List of unique relative directories for the copy() command outputs
    relativeDirectories = []
    # VK-GL-CTS source directory
    deqpSourceDirectory = os.path.join("..", "third_party", "VK-GL-CTS", "src")
    # Tests Directory
    testsDirectory = os.path.join("..", "src", "tests")
    # dEQP Support Directory
    deqpSupportDirectory = "deqp_support"
    # BUILD.gn file to write to
    buildGnFilename = "BUILD.gn"
    # Path to BUILD.gn
    buildGnPath = os.path.join(testsDirectory, "deqp_support", buildGnFilename)
    # dEQP data GNI File to write to
    dataGniFilename = os.path.join(testsDirectory, "deqp_support", "deqp_data_autogen.gni")

    # run_code_generation.py parameters.
    if len(sys.argv) > 1:
        # All CMakeLists.txt in the dEQP source tree (at the time)
        # Generated with the following command:
        #   angle/third_party/VK-GL-CTS/src$ find * -name CMakeLists.txt | sed -e "s/\(.*\)/\"\1\",/"
        cmakeDirs = [
            "CMakeLists.txt",
            "execserver/CMakeLists.txt",
            "executor/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/texture/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/api/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/tessellation/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/query_pool/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/shaderexecutor/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/memory/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/image/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/wsi/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/ssbo/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/multiview/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/synchronization/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/memory_model/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/pipeline/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/subgroups/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/binding_model/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/spirv_assembly/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/ubo/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/util/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/clipping/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/draw/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/imageless_framebuffer/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/dynamic_state/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/transform_feedback/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/fragment_shader_interlock/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/sparse_resources/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/renderpass/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/compute/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/rasterization/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/protected_memory/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/ycbcr/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/device_group/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/fragment_ops/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/amber/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/descriptor_indexing/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/geometry/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/conditional_rendering/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/shaderrender/CMakeLists.txt",
            "external/vulkancts/modules/vulkan/robustness/CMakeLists.txt",
            "external/vulkancts/framework/vulkan/CMakeLists.txt",
            "external/openglcts/modules/gles3/CMakeLists.txt",
            "external/openglcts/modules/gles2/CMakeLists.txt",
            "external/openglcts/modules/CMakeLists.txt",
            "external/openglcts/modules/gl/CMakeLists.txt",
            "external/openglcts/modules/gles32/CMakeLists.txt",
            "external/openglcts/modules/gles31/CMakeLists.txt",
            "external/openglcts/modules/glesext/CMakeLists.txt",
            "external/openglcts/modules/common/subgroups/CMakeLists.txt",
            "external/openglcts/modules/common/CMakeLists.txt",
            "external/openglcts/modules/runner/CMakeLists.txt",
            "external/openglcts/CMakeLists.txt",
            "external/spirv-tools/CMakeLists.txt",
            "external/zlib/CMakeLists.txt",
            "external/amber/CMakeLists.txt",
            "external/glslang/CMakeLists.txt",
            "external/libpng/CMakeLists.txt",
            "framework/referencerenderer/CMakeLists.txt",
            "framework/CMakeLists.txt",
            "framework/qphelper/CMakeLists.txt",
            "framework/platform/CMakeLists.txt",
            "framework/egl/wrapper/CMakeLists.txt",
            "framework/egl/CMakeLists.txt",
            "framework/randomshaders/CMakeLists.txt",
            "framework/delibs/dethread/CMakeLists.txt",
            "framework/delibs/deutil/CMakeLists.txt",
            "framework/delibs/destream/CMakeLists.txt",
            "framework/delibs/deimage/CMakeLists.txt",
            "framework/delibs/decpp/CMakeLists.txt",
            "framework/delibs/depool/CMakeLists.txt",
            "framework/delibs/debase/CMakeLists.txt",
            "framework/common/CMakeLists.txt",
            "framework/opengl/wrapper/CMakeLists.txt",
            "framework/opengl/CMakeLists.txt",
            "framework/opengl/simplereference/CMakeLists.txt",
            "modules/internal/CMakeLists.txt",
            "modules/gles3/CMakeLists.txt",
            "modules/gles3/accuracy/CMakeLists.txt",
            "modules/gles3/performance/CMakeLists.txt",
            "modules/gles3/stress/CMakeLists.txt",
            "modules/gles3/functional/CMakeLists.txt",
            "modules/gles2/CMakeLists.txt",
            "modules/gles2/accuracy/CMakeLists.txt",
            "modules/gles2/performance/CMakeLists.txt",
            "modules/gles2/stress/CMakeLists.txt",
            "modules/gles2/functional/CMakeLists.txt",
            "modules/CMakeLists.txt",
            "modules/egl/CMakeLists.txt",
            "modules/gles31/CMakeLists.txt",
            "modules/gles31/stress/CMakeLists.txt",
            "modules/gles31/functional/CMakeLists.txt",
            "modules/glshared/CMakeLists.txt",
        ]
        inputs = [os.path.join(deqpSourceDirectory, "%s" % dir) for dir in cmakeDirs]
        outputs = [dataGniFilename, buildGnPath]

        if sys.argv[1] == 'inputs':
            print(','.join(inputs))
        elif sys.argv[1] == 'outputs':
            print(','.join(outputs))
        else:
            print('Invalid script parameters')
            return 1
        return 0

    deqpSrcDir = os.path.abspath(os.path.join(sys.path[0], deqpSourceDirectory))

    initDataDirectories(dataDirectories)
    initPathReplacements(pathReplacements)

    dataFiles = []
    for dataDir in dataDirectories:
        dataPath = os.path.join(deqpSrcDir, dataDir)
        for root, directories, filenames in os.walk(dataPath):
            for filename in filenames:
                relativeDirectory = os.path.relpath(root, deqpSrcDir)
                # Skip any excluded directories
                if any(directory in relativeDirectory for directory in excludedDirectories):
                    continue
                # Skip any excluded files
                if any(excludedFilename in filename for excludedFilename in excludedFilenames):
                    continue
                # Record the relative directories and full paths to each data file
                if relativeDirectory not in relativeDirectories:
                    relativeDirectories.append(relativeDirectory)
                dataFiles.append(os.path.join(relativeDirectory, filename))

    dataFiles.sort()
    relativeDirectories.sort()

    #
    # BUILD.gn
    #
    buildGnFile = createBuildGnFile(buildGnPath)
    writeFileHeader(buildGnFile)
    # Definitions
    buildGnFile.write("deqp_path = \"../../../third_party/VK-GL-CTS/src\"\n")
    # Create the copy() commands
    templateFilesToCopy = """    "$deqp_path/{dataFile}",
"""
    templateCopyCommand = """
copy("vk_gl_cts_data_{relDir}") {{
  sources = [
    {filesToCopy}
  ]
  outputs = [ "$root_gen_dir/vk_gl_cts_data/{destDir}/{{{{source_file_part}}}}" ]
}}
"""
    for relativeDirectory in relativeDirectories:
        filesToCopy = ""
        for dataFile in dataFiles:
            path, filename = os.path.split(dataFile)
            if relativeDirectory == path:
                filesToCopy += templateFilesToCopy.format(dataFile=dataFile)
        copyCommand = ""
        destDir = fixDestinationDirectory(pathReplacements, relativeDirectory)
        copyCommand += templateCopyCommand.format(
            relDir=convertPathToVarName(relativeDirectory),
            filesToCopy=filesToCopy,
            destDir=destDir)
        buildGnFile.write(copyCommand)

    #
    # .gni
    #
    gniFile = createGniFile(dataGniFilename)
    writeFileHeader(gniFile)
    # Imports
    templateImports = """import("deqp.gni")
"""
    gniFile.write(templateImports)
    # Write the lists of data file dependencies
    templateDataFiles = """  "$root_gen_dir/vk_gl_cts_data/{dataFile}",
"""
    templateDataFileDeps = """
{dataDepName} = [
{files}]
"""
    for dataDirectory in dataDirectories:
        files = ""
        for dataFile in dataFiles:
            if dataDirectory + os.sep in dataFile:
                files += templateDataFiles.format(
                    dataFile=fixDestinationDirectory(pathReplacements, dataFile))
        dataDepName = "angle_deqp_" + dataDirectory.replace(os.sep, "_")
        fileDeps = templateDataFileDeps.format(dataDepName=dataDepName, files=files)
        gniFile.write(fileDeps)

    templateCopyTarget = """  "{deqpSupportDirectory}:vk_gl_cts_data_{relDir}",
"""
    templateCopyTargets = """
angle_deqp_data_copy_targets = [
{targets}]
"""
    targets = ""
    for relativeDirectory in relativeDirectories:
        targets += templateCopyTarget.format(
            deqpSupportDirectory=deqpSupportDirectory,
            relDir=convertPathToVarName(relativeDirectory))
    gniFile.write(templateCopyTargets.format(targets=targets))


if __name__ == '__main__':
    sys.exit(main())
