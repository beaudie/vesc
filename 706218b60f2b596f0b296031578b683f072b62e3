{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f88d06d_a15ddf6e",
        "filename": "src/libANGLE/CLPlatform.cpp",
        "patchSetId": 11
      },
      "lineNbr": 24,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: suggest you split these two into two lines. we don\u0027t use a lot of comma decl in ANGLE thought there may be one or two places. same for the header.",
      "range": {
        "startLine": 24,
        "startChar": 10,
        "endLine": 24,
        "endChar": 14
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bcd6247_89e5cba2",
        "filename": "src/libANGLE/CLPlatform.cpp",
        "patchSetId": 11
      },
      "lineNbr": 24,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f88d06d_a15ddf6e",
      "range": {
        "startLine": 24,
        "startChar": 10,
        "endLine": 24,
        "endChar": 14
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "014f6777_ce82c50b",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: avoid using list, unless you plan on very frequently inserting + deleting from the middle (you won\u0027t for this case). use vector instead.",
      "range": {
        "startLine": 28,
        "startChar": 22,
        "endLine": 28,
        "endChar": 26
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "463a0e82_5ffcaaa5",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "014f6777_ce82c50b",
      "range": {
        "startLine": 28,
        "startChar": 22,
        "endLine": 28,
        "endChar": 26
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3582d390_f631442f",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 51,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "just to confirm - this const only affects the pointer right, not the value pointed to?",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc470ab_e6272e6f",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 51,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T17:48:29Z",
      "side": 1,
      "message": "Yes, constant pointer, non-constant CLPlatformImpl.",
      "parentUuid": "3582d390_f631442f",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a98bca2c_69e69130",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 89,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "Instead of making impl functions for all these, I suggest you make a struct and initialize it all at once. This will be more flexible for other back-ends.",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 89,
        "endChar": 1
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e0faa48_082fd2c3",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 89,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T17:48:29Z",
      "side": 1,
      "message": "Yeah, there was lot of flexibility to implement this, I didn\u0027t have a strong favorite. Ok, I will create a struct \u0027PlatformInfo\u0027 which will hold all the constant platform info. The question remains where to store it. In cl::Platform directly? In rx::CLPlatformImpl, so I can access it without virtual function? Or in the back end and create a single virtual function that returns a reference to the struct PlatformInfo?",
      "parentUuid": "a98bca2c_69e69130",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 89,
        "endChar": 1
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efd0d9b9_0f9de20d",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 89,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T18:21:51Z",
      "side": 1,
      "message": "I\u0027m fine with anything right now, we can always redo this later. Maybe pass a pointer to an initialize method and have the back-end write over the front-end structure?",
      "parentUuid": "9e0faa48_082fd2c3",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 89,
        "endChar": 1
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22ea1271_f385a530",
        "filename": "src/libANGLE/CLPlatform.h",
        "patchSetId": 11
      },
      "lineNbr": 89,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "I stored it in rx::CLPlatformImpl for now, so that both front and back end can easily access it.",
      "parentUuid": "efd0d9b9_0f9de20d",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 89,
        "endChar": 1
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8e1ba7d_a1189510",
        "filename": "src/libANGLE/renderer/cl/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "use $angle_root, it\u0027ll work that way when used as a component.\n\nalso you\u0027ll need to either upstream the BUILD.gn file or check out the ICD into a subfolder, \u0027src\u0027, then include the ICD GN file in the project folder, along with a README.chromium.",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 7
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba23ac6b_eddce621",
        "filename": "src/libANGLE/renderer/cl/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T17:48:29Z",
      "side": 1,
      "message": "Yes, I already have locally the solution with the subfolder \u0027src\u0027 and the README.chromium, because the BUILD.gn is customized for us and compiles only a subset of the package.",
      "parentUuid": "a8e1ba7d_a1189510",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 7
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56d8faa7_e3ba1f19",
        "filename": "src/libANGLE/renderer/cl/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "Done, and I have added the build file and readme.",
      "parentUuid": "ba23ac6b_eddce621",
      "range": {
        "startLine": 30,
        "startChar": 6,
        "endLine": 30,
        "endChar": 7
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42cfd362_237e23ff",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: use RAII",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24279a07_5c3a914d",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T18:25:28Z",
      "side": 1,
      "message": "I usually prefer RAII, but decided here against it, because \u0027khrIcdVendors\u0027 is not part of the library API. If the struct changes, RAII will probably fail. It is more robust to initialize it first, and then only set a single variable by name.",
      "parentUuid": "42cfd362_237e23ff",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41abcce0_1f1aea10",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T18:31:39Z",
      "side": 1,
      "message": "use unique_ptr is my suggestion. marking unresolved.",
      "parentUuid": "24279a07_5c3a914d",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b9a25a8_62427e2f",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T19:14:17Z",
      "side": 1,
      "message": "Both the global variable khrIcdVendors and the type KHRicdVendor are defined by the Khronos ICD loader. I can\u0027t change it.",
      "parentUuid": "41abcce0_1f1aea10",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0de6dc0a_c38e2b39",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T21:04:18Z",
      "side": 1,
      "message": "Thanks for pointing that out, will take a look.",
      "parentUuid": "5b9a25a8_62427e2f",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6625f49_1cf4de7a",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-04T14:55:19Z",
      "side": 1,
      "message": "OK - we might need a ddoc if we have differing preferences here. The Vulkan back-end instead uses the loader as a black box. It loads \"libvulkan.so\" and treats it like a normal Vulkan driver, additionally communicating with the loader via environment variables. We should use the same here instead of loading internal header files for the loader and treating it like a normal library where we have access to all the functions.\n\nWhat made you go with this design?",
      "parentUuid": "0de6dc0a_c38e2b39",
      "range": {
        "startLine": 49,
        "startChar": 8,
        "endLine": 49,
        "endChar": 21
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d81f1a5_6a2f9861",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: for all your macros, prefix with ANGLE_ to ensure there are no namespace issues (even in a cpp, unless it\u0027s a big verbosity problem)",
      "range": {
        "startLine": 93,
        "startChar": 8,
        "endLine": 93,
        "endChar": 16
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2b678da_39b8d9c5",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d81f1a5_6a2f9861",
      "range": {
        "startLine": 93,
        "startChar": 8,
        "endLine": 93,
        "endChar": 16
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d27b63f9_e2d537bc",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 218,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: typo. also avoid auto unless it\u0027s a nested template. there\u0027s a style guide discussion on this, and the policy we adopt is to generally avoid it except for lambdas and iterators.\n\nthe auto thing applies to many cases in these files.",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 218,
        "endChar": 52
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "953d9954_1fbfb686",
        "filename": "src/libANGLE/renderer/cl/CLPlatformCL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 218,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "I guess there is a style guide discussion in every company about this. From the thousands of \u0027auto\u0027 in ANGLE it is hard to deduct that we generally avoid them. I searched and replaced almost all auto in all of my code in ANGLE.",
      "parentUuid": "d27b63f9_e2d537bc",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 218,
        "endChar": 52
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "671511fd_d27180a0",
        "filename": "src/libGLESv2/cl_stubs.cpp",
        "patchSetId": 11
      },
      "lineNbr": 19,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "nit: look at how we include small cut-out headers when initializing the GL display. This allows us to isolate the back-end and its header includes from other platforms.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 19,
        "endChar": 6
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "879d7f1c_daf852bc",
        "filename": "src/libGLESv2/cl_stubs.cpp",
        "patchSetId": 11
      },
      "lineNbr": 19,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "I had a look at src/libANGLE/Display.cpp and am not sure what you mean. Can we just keep it for now and I will address it later when I understand it?",
      "parentUuid": "671511fd_d27180a0",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 19,
        "endChar": 6
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d33a3367_519611a2",
        "filename": "src/libGLESv2/cl_stubs.cpp",
        "patchSetId": 11
      },
      "lineNbr": 696,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-03T17:16:48Z",
      "side": 1,
      "message": "suggest you split this into a separate prior or following patch to declutter the review.",
      "range": {
        "startLine": 696,
        "startChar": 0,
        "endLine": 696,
        "endChar": 41
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f740183b_95aca6e6",
        "filename": "src/libGLESv2/cl_stubs.cpp",
        "patchSetId": 11
      },
      "lineNbr": 696,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-05-03T21:40:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d33a3367_519611a2",
      "range": {
        "startLine": 696,
        "startChar": 0,
        "endLine": 696,
        "endChar": 41
      },
      "revId": "706218b60f2b596f0b296031578b683f072b62e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}