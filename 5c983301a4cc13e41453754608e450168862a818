{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a2c2c9cb_aabe960f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 40
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-19T20:16:26Z",
      "side": 1,
      "message": "LGTM, but please ping me back if you cannot do the suggested refactors.",
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91433d72_3ef3bc1f",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1118,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2021-10-27T13:09:14Z",
      "side": 1,
      "message": "I saw L 1136 \u0027mBuffer \u003d buffer.release();\u0027 Seems mBuffer is a raw pointer. Does mBuffer-\u003erelease() call will dealloc the vk::BufferHelper?",
      "range": {
        "startLine": 1118,
        "startChar": 12,
        "endLine": 1118,
        "endChar": 39
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efd63d13_538160a9",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1119,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2021-10-27T13:09:14Z",
      "side": 1,
      "message": "This is confusing. L1143. `mBuffer \u003d buffer.release();`, seems mBuffer is a raw pointer. and the buffer is allocated with `std::make_unique\u003cvk::BufferHelper\u003e();`. Does mBuffer-\u003erelease() call will deallocate the vk::BufferHelper?",
      "range": {
        "startLine": 1119,
        "startChar": 12,
        "endLine": 1119,
        "endChar": 30
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b121829_8013f243",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1122,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-19T20:16:26Z",
      "side": 1,
      "message": "you shouldn\u0027t need to use pointers, all the types are usable with move operations (or should be if they aren\u0027t)",
      "range": {
        "startLine": 1122,
        "startChar": 13,
        "endLine": 1122,
        "endChar": 23
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "087cebc2_16fb676d",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1122,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-19T22:00:32Z",
      "side": 1,
      "message": "Actually std::move does not work, because ReadWriteResource is noncopyable. If I do this:\n        mBuffer \u003d std::move(\u0026buffer);\nI got this error:\n\nObject of type \u0027vk::BufferHelper\u0027 cannot be assigned because its copy assignment operator is implicitly deleted copy assignment operator of \u0027BufferHelper\u0027 is implicitly deleted because base class \u0027rx::vk::ReadWriteResource\u0027 has a deleted copy assignment operator copy assignment operator is implicitly deleted because \u0027ReadWriteResource\u0027 has a user-declared move constructor",
      "parentUuid": "7b121829_8013f243",
      "range": {
        "startLine": 1122,
        "startChar": 13,
        "endLine": 1122,
        "endChar": 23
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36199328_ad00b6bf",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1122,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-10-27T05:32:40Z",
      "side": 1,
      "message": "This is causing memory leaks in the ANGLE roll:\nhttps://ci.chromium.org/ui/p/chromium/builders/try/linux_chromium_asan_rel_ng/999924/overview\n\nIn particular:\nhttps://chromium-swarm.appspot.com/task?id\u003d56d5ec0e39ef4311\u0026w\u003dtrue\n\n    \u003d\u003d22873\u003d\u003dERROR: LeakSanitizer: detected memory leaks\n\n    Direct leak of 224 byte(s) in 2 object(s) allocated from:\n        #0 0x5654c69e1afd in operator new(unsigned long) /b/s/w/ir/cache/builder/src/third_party/llvm/compiler-rt/lib/asan/asan_new_delete.cpp:95:3\n        #1 0x7f2591783b1d in make_unique\u003crx::vk::BufferHelper\u003e buildtools/third_party/libc++/trunk/include/__memory/unique_ptr.h:725:28\n        #2 0x7f2591783b1d in rx::BufferVk::acquireBufferHelper(rx::ContextVk*, unsigned long, rx::BufferUpdateType) third_party/angle/src/libANGLE/renderer/vulkan/BufferVk.cpp:1129:52\n        #3 0x7f2591782be2 in rx::BufferVk::setDataWithMemoryType(gl::Context const*, gl::BufferBinding, void const*, unsigned long, unsigned int, bool, gl::BufferUsage) third_party/angle/src/libANGLE/renderer/vulkan/BufferVk.cpp:444:9\n        #4 0x7f2591782883 in rx::BufferVk::setDataWithUsageFlags(gl::Context const*, gl::BufferBinding, void*, void const*, unsigned long, gl::BufferUsage, unsigned int) third_party/angle/src/libANGLE/renderer/vulkan/BufferVk.cpp:397:12\n        #5 0x7f259098353a in gl::Buffer::bufferDataImpl(gl::Context*, gl::BufferBinding, void const*, long, gl::BufferUsage, unsigned int) third_party/angle/src/libANGLE/Buffer.cpp:136:16\n        #6 0x7f25909838d3 in gl::Buffer::bufferData(gl::Context*, gl::BufferBinding, void const*, long, gl::BufferUsage) third_party/angle/src/libANGLE/Buffer.cpp:100:12\n        #7 0x7f2590a16e6e in gl::Context::bufferData(gl::BufferBinding, long, void const*, gl::BufferUsage) third_party/angle/src/libANGLE/Context.cpp:6038:5\n        #8 0x7f259093c130 in GL_BufferData third_party/angle/src/libGLESv2/entry_points_gles_2_0_autogen.cpp:355:22",
      "parentUuid": "087cebc2_16fb676d",
      "range": {
        "startLine": 1122,
        "startChar": 13,
        "endLine": 1122,
        "endChar": 23
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0253d727_a5b6ef26",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 40
      },
      "lineNbr": 1122,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-27T09:27:10Z",
      "side": 1,
      "message": "\u003e Actually std::move does not work, because ReadWriteResource is noncopyable.\n\nI don\u0027t know what the code really was for that error to be generated, but most things in ANGLE are noncopyable, and we std::move them just fine.",
      "parentUuid": "36199328_ad00b6bf",
      "range": {
        "startLine": 1122,
        "startChar": 13,
        "endLine": 1122,
        "endChar": 23
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e487bc79_e708748c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 40
      },
      "lineNbr": 136,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-19T20:16:26Z",
      "side": 1,
      "message": "nit: suggest you clarify that this is a setter not a query, either \"onDynamicBufferPoolUse\" or \"onUsedAsDescriptorCacheKey\" or something like that\n\nactually reading the CL more, I suggest you name this mUsedInDescriptorSet and onUsedInDescriptorSet()",
      "range": {
        "startLine": 136,
        "startChar": 9,
        "endLine": 136,
        "endChar": 36
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "338810e5_b0ed69df",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 40
      },
      "lineNbr": 136,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-19T22:00:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e487bc79_e708748c",
      "range": {
        "startLine": 136,
        "startChar": 9,
        "endLine": 136,
        "endChar": 36
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22c9c15c_f41f5919",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 40
      },
      "lineNbr": 235,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-19T20:16:26Z",
      "side": 1,
      "message": "Most types in ANGLE are RAII and don\u0027t use indirection. It would be nice to avoid the indirection and keep this a simple type. Can you change DynamicBuffer to be as efficient as using a pointer when it\u0027s used by-value?",
      "range": {
        "startLine": 235,
        "startChar": 4,
        "endLine": 235,
        "endChar": 51
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38bb1de6_64361f90",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 40
      },
      "lineNbr": 235,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-19T22:00:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22c9c15c_f41f5919",
      "range": {
        "startLine": 235,
        "startChar": 4,
        "endLine": 235,
        "endChar": 51
      },
      "revId": "5c983301a4cc13e41453754608e450168862a818",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}