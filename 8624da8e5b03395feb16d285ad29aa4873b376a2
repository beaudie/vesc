{
  "comments": [
    {
      "key": {
        "uuid": "e557cca6_94f43b67",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 423,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "the blob cache isn\u0027t exclusive to Android. It\u0027s used by Chromium and could be used by anyone really. So can we take off the #ifdef and verify the case where the blob cache funcs are overidden?",
      "range": {
        "startLine": 423,
        "startChar": 0,
        "endLine": 423,
        "endChar": 36
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1e89b2b_68cc1e0f",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 426,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "please follow the coding style:\n\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order\n\nAlso can you try using angle::MemoryBuffer here?",
      "range": {
        "startLine": 426,
        "startChar": 0,
        "endLine": 426,
        "endChar": 31
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ba87804_fec23c45",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 430,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "nit: you should be able to use c++ move semantics to handle this without a copy. Currently this could cause a copy. Googled it and produced this document:\n\nhttps://www.internalpointers.com/post/c-rvalue-references-and-move-semantics-beginners\n\nLook for \"move constructor\". You should be able to make this class angle::NonCopyable.",
      "range": {
        "startLine": 430,
        "startChar": 3,
        "endLine": 430,
        "endChar": 57
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b439f591_f2f4065f",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 433,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "maybe compare sizes first, then compare data when sizes are the same?",
      "range": {
        "startLine": 433,
        "startChar": 25,
        "endLine": 433,
        "endChar": 34
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a7514e6_a11ee3dd",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 449,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "nit: how about DefaultBlobCache?",
      "range": {
        "startLine": 449,
        "startChar": 6,
        "endLine": 449,
        "endChar": 15
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "517e6825_45e40829",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 482,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "can you make this owned by egl::Display instead of using NoDestructor? static variables are icky.",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 482,
        "endChar": 0
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "023f7bb6_b8177a51",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1108,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-25T19:04:00Z",
      "side": 1,
      "message": "tiny nit: looks like something wrapped your characters to 90 chars or something. Maybe can undo that?",
      "range": {
        "startLine": 1106,
        "startChar": 0,
        "endLine": 1108,
        "endChar": 13
      },
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b50cf44_8fb8eb93",
        "filename": "src/libGLESv2/entry_points_egl.cpp",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-03-25T18:50:10Z",
      "side": 1,
      "message": "Since the functionality was moved to another file, is this still needed?",
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e0d8c26_44d70556",
        "filename": "src/libGLESv2/entry_points_egl.cpp",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-03-25T18:50:10Z",
      "side": 1,
      "message": "Ditto",
      "revId": "8624da8e5b03395feb16d285ad29aa4873b376a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}