{
  "comments": [
    {
      "key": {
        "uuid": "f2e65479_d287da25",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-08-01T23:35:27Z",
      "side": 1,
      "message": "I noticed that in the D3D backend they just use destOffset.z, would that be safe to do here as well?",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed0204ec_1a9074ea",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-01T23:37:16Z",
      "side": 1,
      "message": "Unfortunately not, since Vulkan requires that the Z offset is 0 for 2D images:\n\nDebugUtilsMessenger(286): [ VUID-VkImageCopy-dstImage-01788 ] vkCmdCopyImage(): pRegion[0] dstOffset.z is 1. For 2D images the z-offset must be 0. The Vulkan spec states: If the calling command\u0027s dstImage is of type VK_IMAGE_TYPE_2D, then dstOffset.z must be 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01788)",
      "parentUuid": "f2e65479_d287da25",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a445e9c_43e85c98",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-08-01T23:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ed0204ec_1a9074ea",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4521f1cb_ab6c3d2d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 561,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "If your fix that changes the index to layer 0 (in stageSubresourceUpdate*) is really necessary, it would be missing from here as well.\n\nCould you add a test that takes this path? Initializing the texture, using it in a draw call and doing a copy afterwards should hit it (same format for texture and framebuffer so Transfer is used).",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c2221ae_170a1b4d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "Same here. In this case, a drawable format that\u0027s different from the framebuffer should be used. Not sure if `getLayerLevelDrawImageView` is doing the right thing for 3d textures (it might)",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14098c4c_bb62ca91",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "Why would the front-end given an \"index\" that\u0027s different from these? Could we assert them instead?",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "199e12ba_fcb889da",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-08-02T16:58:04Z",
      "side": 1,
      "message": "I\u0027m running into similar problems with framebuffer attachments that are layers of 3D textures.  Although in my case, layerCount for 3D is always 1 and I have to refer to depth instead.",
      "parentUuid": "14098c4c_bb62ca91",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea06d2ab_920ea364",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T17:49:42Z",
      "side": 1,
      "message": "So the front-end puts the 3D textures z in the index layer? What\u0027s destOffset.z then? Can we assert that `destOffset.z \u003d\u003d (index.hasLayer() ? index.getLayerIndex() : 0)` here?",
      "parentUuid": "199e12ba_fcb889da",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}