{
  "comments": [
    {
      "key": {
        "uuid": "f2e65479_d287da25",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-08-01T23:35:27Z",
      "side": 1,
      "message": "I noticed that in the D3D backend they just use destOffset.z, would that be safe to do here as well?",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed0204ec_1a9074ea",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-01T23:37:16Z",
      "side": 1,
      "message": "Unfortunately not, since Vulkan requires that the Z offset is 0 for 2D images:\n\nDebugUtilsMessenger(286): [ VUID-VkImageCopy-dstImage-01788 ] vkCmdCopyImage(): pRegion[0] dstOffset.z is 1. For 2D images the z-offset must be 0. The Vulkan spec states: If the calling command\u0027s dstImage is of type VK_IMAGE_TYPE_2D, then dstOffset.z must be 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01788)",
      "parentUuid": "f2e65479_d287da25",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a445e9c_43e85c98",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-08-01T23:39:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ed0204ec_1a9074ea",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4521f1cb_ab6c3d2d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 561,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "If your fix that changes the index to layer 0 (in stageSubresourceUpdate*) is really necessary, it would be missing from here as well.\n\nCould you add a test that takes this path? Initializing the texture, using it in a draw call and doing a copy afterwards should hit it (same format for texture and framebuffer so Transfer is used).",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66fad7d8_7522e1f1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 561,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-02T23:26:48Z",
      "side": 1,
      "message": "You\u0027re right that this was necessary.   I created the test CopyTexImageTestES3.3DSubImageDrawTextureData that does what you described and it hit the same issue, which is fixed the same way as in stageSubresourceUpdateFromImage().",
      "parentUuid": "4521f1cb_ab6c3d2d",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a2f8966_0d702f5d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 561,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-09T15:35:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66fad7d8_7522e1f1",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c2221ae_170a1b4d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "Same here. In this case, a drawable format that\u0027s different from the framebuffer should be used. Not sure if `getLayerLevelDrawImageView` is doing the right thing for 3d textures (it might)",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f28a153f_defca069",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-02T23:26:48Z",
      "side": 1,
      "message": "You\u0027re right again here.\n\nI created the test CopyTexImageTestES3.3DSubImageDrawMismatchedTextureTypes which uses:\n3D texture type: GL_UNSIGNED_BYTE\n2D texture type: GL_UNSIGNED_SHORT_4_4_4_4\n\nWhich hits the following error:\n\ngetLayerLevelDrawImageView(1336): \t! Assert failed in getLayerLevelDrawImageView (../../third_party/angle/src/libANGLE/renderer/vulkan/TextureVk.cpp:1336): mLayerLevelDrawImageViews.size() \u003e layer\n\nIn this case:\nmLayerLevelDrawImageViews.size() \u003d 1\nlayer \u003d 1\n\nI haven\u0027t dug in at all yet to see what\u0027s going on here, so any ideas are welcome.",
      "parentUuid": "7c2221ae_170a1b4d",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be4be385_2d25f58a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-03T01:53:15Z",
      "side": 1,
      "message": "You may need to change `getLayerLevelDrawImageView` to use depth instead of layer for 3d textures, both to create the view and to query it.",
      "parentUuid": "f28a153f_defca069",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0198ae2b_0c957835",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-09T15:35:02Z",
      "side": 1,
      "message": "This appears to have been fixed with Cody\u0027s changes in:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/1738436",
      "parentUuid": "be4be385_2d25f58a",
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14098c4c_bb62ca91",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T15:37:47Z",
      "side": 1,
      "message": "Why would the front-end given an \"index\" that\u0027s different from these? Could we assert them instead?",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "199e12ba_fcb889da",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-08-02T16:58:04Z",
      "side": 1,
      "message": "I\u0027m running into similar problems with framebuffer attachments that are layers of 3D textures.  Although in my case, layerCount for 3D is always 1 and I have to refer to depth instead.",
      "parentUuid": "14098c4c_bb62ca91",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea06d2ab_920ea364",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-02T17:49:42Z",
      "side": 1,
      "message": "So the front-end puts the 3D textures z in the index layer? What\u0027s destOffset.z then? Can we assert that `destOffset.z \u003d\u003d (index.hasLayer() ? index.getLayerIndex() : 0)` here?",
      "parentUuid": "199e12ba_fcb889da",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "334a8eff_794043ed",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-02T23:26:48Z",
      "side": 1,
      "message": "I needed to update TextureVk::copySubImageImpl() to pass along the zOffset, since it was getting lost for 3D texture copies, causing the copy to fail.\n\n\nI added some tracing to see what values are reaching here for my new tests:\n\n    if (imageType \u003d\u003d VK_IMAGE_TYPE_3D)\n    {\n        copyToImage.dstSubresource.baseArrayLayer \u003d 0;\n        copyToImage.dstSubresource.layerCount     \u003d 1;\n\n        int baseArrayLayer \u003d index.hasLayer() ? index.getLayerIndex() : 0;\n        int layerCount     \u003d index.getLayerCount();\n        WARN() \u003c\u003c \"TIMTIM \u003e\u003e \" \u003c\u003c __FILE__ \u003c\u003c \"::\" \u003c\u003c \"__LINE__\" \u003c\u003c \" \u003e\u003e layerCount \u003d \" \u003c\u003c layerCount;\n        WARN() \u003c\u003c \"TIMTIM \u003e\u003e \" \u003c\u003c __FILE__ \u003c\u003c \"::\" \u003c\u003c \"__LINE__\" \u003c\u003c \" \u003e\u003e baseArrayLayer \u003d \" \u003c\u003c baseArrayLayer;\n        WARN() \u003c\u003c \"TIMTIM \u003e\u003e \" \u003c\u003c __FILE__ \u003c\u003c \"::\" \u003c\u003c \"__LINE__\" \u003c\u003c \" \u003e\u003e destOffset.z \u003d \" \u003c\u003c destOffset.z;\n    }\n    else\n    {\n        copyToImage.dstSubresource.baseArrayLayer \u003d index.hasLayer() ? index.getLayerIndex() : 0;\n        copyToImage.dstSubresource.layerCount     \u003d index.getLayerCount();\n    }\n\n\n[ RUN      ] CopyTexImageTestES3.3DSubImageRawTextureData/ES3_Vulkan\nWarning: stageSubresourceUpdateFromImage(2402): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e layerCount \u003d 1\nWarning: stageSubresourceUpdateFromImage(2403): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e baseArrayLayer \u003d 0\nWarning: stageSubresourceUpdateFromImage(2404): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e destOffset.z \u003d 0\nWarning: stageSubresourceUpdateFromImage(2402): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e layerCount \u003d 1\nWarning: stageSubresourceUpdateFromImage(2403): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e baseArrayLayer \u003d 1\nWarning: stageSubresourceUpdateFromImage(2404): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e destOffset.z \u003d 1\nWarning: stageSubresourceUpdateFromImage(2402): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e layerCount \u003d 1\nWarning: stageSubresourceUpdateFromImage(2403): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e baseArrayLayer \u003d 2\nWarning: stageSubresourceUpdateFromImage(2404): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e destOffset.z \u003d 2\nWarning: stageSubresourceUpdateFromImage(2402): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e layerCount \u003d 1\nWarning: stageSubresourceUpdateFromImage(2403): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e baseArrayLayer \u003d 3\nWarning: stageSubresourceUpdateFromImage(2404): TIMTIM \u003e\u003e ../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp::__LINE__ \u003e\u003e destOffset.z \u003d 3\n[       OK ] CopyTexImageTestES3.3DSubImageRawTextureData/ES3_Vulkan (1242 ms)\n[ RUN      ] CopyTexImageTestES3.3DSubImageDrawTextureData/ES3_Vulkan\n[       OK ] CopyTexImageTestES3.3DSubImageDrawTextureData/ES3_Vulkan (985 ms)\n\n\n\nI\u0027m not entirely sure what these results are telling us, but it seems to be working.",
      "parentUuid": "ea06d2ab_920ea364",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8a9e22b_086f4fbe",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-08-03T01:55:40Z",
      "side": 1,
      "message": "Ok, it looks like .z and baseArrayLayer are identical, which means this would work indeed. I\u0027d just add `ASSERT(destOffset.z \u003d\u003d (index.hasLayer() ? index.getLayerIndex() : 0))` to make sure this assumption is not broken. A comment explaining things would be welcome.",
      "parentUuid": "334a8eff_794043ed",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5310feb0_5b1bb0d8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2398,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-08-09T15:35:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8a9e22b_086f4fbe",
      "range": {
        "startLine": 2397,
        "startChar": 0,
        "endLine": 2398,
        "endChar": 54
      },
      "revId": "9aaf2dd733b2343dd4be31b767401ddac3644295",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}