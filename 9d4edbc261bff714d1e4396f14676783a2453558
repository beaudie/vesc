{
  "comments": [
    {
      "key": {
        "uuid": "8a78af61_ca65c409",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 26
      },
      "lineNbr": 138,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "Is it useful? I see a readonly image will be translated into TextureXX, and others will be translated into RWTextureXX.",
      "range": {
        "startLine": 138,
        "startChar": 4,
        "endLine": 138,
        "endChar": 19
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb69a7c6_99376e33",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 26
      },
      "lineNbr": 138,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "Can they have different memory qualifier for same image variable in different shader stage? for example, in vertex shader, image a1 is readonly. But in fragment shader, image a1 is writeonly.",
      "parentUuid": "8a78af61_ca65c409",
      "range": {
        "startLine": 138,
        "startChar": 4,
        "endLine": 138,
        "endChar": 19
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddde735b_3f1a93ac",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 26
      },
      "lineNbr": 304,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "It is better to add some comments here to explain why you use a stub.",
      "range": {
        "startLine": 303,
        "startChar": 90,
        "endLine": 304,
        "endChar": 42
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb71b89d_988ff9b1",
        "filename": "src/libANGLE/renderer/d3d/DynamicHLSL.cpp",
        "patchSetId": 26
      },
      "lineNbr": 290,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "1. Use camelCase on this variable since VERTEX_REGISTER_SUB_STRING isn\u0027t a constexpr.\n2. I see (\"REGISTER\" + name) is used both here and in function outputHLSL4_1_FL11RWTexture(), so I suggest putting this into a member function of d3dUniform\n3. I see VERTEX_ATTRIBUTE_STUB_STRING is defined as \"@@ VERTEX ATTRIBUTES @@\", so do you think it is better to call this flag (\"@@REGISTER\" + name + \"@@\") to avoid potential name conflicts?",
      "range": {
        "startLine": 290,
        "startChar": 8,
        "endLine": 290,
        "endChar": 79
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac312520_7ed2e171",
        "filename": "src/libANGLE/renderer/d3d/DynamicHLSL.cpp",
        "patchSetId": 26
      },
      "lineNbr": 292,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "Is it better to put this into a function where the registerString is constructed by ostringstream?",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 292,
        "endChar": 87
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f540ce8_b3fac89d",
        "filename": "src/libANGLE/renderer/d3d/DynamicHLSL.cpp",
        "patchSetId": 26
      },
      "lineNbr": 386,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "Same comments as those in generateVertexShaderForInputLayout",
      "range": {
        "startLine": 384,
        "startChar": 0,
        "endLine": 386,
        "endChar": 82
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fc70ae5_8710bdcf",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2128,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "Why not regType?",
      "range": {
        "startLine": 2128,
        "startChar": 68,
        "endLine": 2128,
        "endChar": 78
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62999cc1_0c112256",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2133,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "Same here",
      "range": {
        "startLine": 2133,
        "startChar": 68,
        "endLine": 2133,
        "endChar": 88
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88538e26_e8240ccf",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 26
      },
      "lineNbr": 2442,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "I suggest you leave some commments here on why you have to do this and the algorithm you use.",
      "range": {
        "startLine": 2442,
        "startChar": 0,
        "endLine": 2442,
        "endChar": 42
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c681b56_ff9e8b50",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.h",
        "patchSetId": 26
      },
      "lineNbr": 521,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "What are these members used for?",
      "range": {
        "startLine": 509,
        "startChar": 0,
        "endLine": 521,
        "endChar": 34
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9e8b10d_a0b38ee2",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1335,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "FeatureLevel 11.0 doesn\u0027t support image in vertex and fragment shaders, so you should write a Get function to initialize these values.",
      "range": {
        "startLine": 1334,
        "startChar": 0,
        "endLine": 1335,
        "endChar": 39
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22274217_320f4010",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 26
      },
      "lineNbr": 39,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "Add comment why it\u0027s skipped.",
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "331982fa_df29d981",
        "filename": "src/tests/gl_tests/UniformTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 903,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "We should check if the images used in these shaders is no more than MAX_VERTEX_IMAGE_UNIFORMS and MAX_FRAGMENT_IMAGE_UNIFORMS before we run this test.",
      "range": {
        "startLine": 902,
        "startChar": 0,
        "endLine": 903,
        "endChar": 1
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55f4e10_8fcd4738",
        "filename": "src/tests/gl_tests/UniformTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 932,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-10-09T12:21:18Z",
      "side": 1,
      "message": "Add more tests to cover the corner situations that we discussed. Such as, \n1.same image uniform in two shaders but one has no binding, the other has.\n2. with multiple render targets\n3. sample and image co-exist, and still can correctly do rendering.",
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95c75b1d_04924780",
        "filename": "src/tests/gl_tests/UniformTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1015,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-09-30T06:05:46Z",
      "side": 1,
      "message": "You can add ES31_D3D11_1() to run angle_end2end_tests on D3D feature level 11.1.",
      "range": {
        "startLine": 1015,
        "startChar": 39,
        "endLine": 1015,
        "endChar": 52
      },
      "revId": "9d4edbc261bff714d1e4396f14676783a2453558",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}