{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7080fc26_039d7a1f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-13T14:42:36Z",
      "side": 1,
      "message": "Sounds like a `HoistConstants` bug. If the loop body is optimized away, it should be replaced with an empty body not nullptr. I\u0027m afraid trying to null check the body everywhere is going to be error prone.\n\nMy suggestion instead is to fix `HoistConstants`.",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc217731_091b08d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-02-13T14:46:59Z",
      "side": 1,
      "message": "Nope, you yourself partially implemented the feature of not having loop body as an option.\nSee your commits in CreateFromBody handling nullable body.\ngetBody() shouldn\u0027t return ptr if it can never be null.",
      "parentUuid": "7080fc26_039d7a1f",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c011c311_612a5995",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-13T15:17:50Z",
      "side": 1,
      "message": "Ugh, nullptr checks in that file go _way_ back: https://chromium-review.googlesource.com/362570\n\nI do see nullptr check in a few places (mostly older code), but there is also a _lot_ of code that never checks for nullptr. That\u0027s what I\u0027m afraid of, that there\u0027s a lot of code that assumes it can\u0027t be nullptr. I don\u0027t know if nullptr body is just an old thing that mostly doesn\u0027t exist anymore, or if there are bugs everywhere. I\u0027ll put up a CL to find out.\n\nIn the meantime, I still think it\u0027s better to not make the problem worse. If you\u0027d fix `HoistConstants` not to produce bodies like that, I can follow up and make sure we don\u0027t create nullptr bodies elsewhere either.\n\nFWIW, in `OutputSPIRVTraverser::visitLoop`, I don\u0027t do a nullptr check for body and that has been working everywhere.\n\n\u003e getBody() shouldn\u0027t return ptr if it can never be null.\n\nIdeally yes. The translator is ancient code and uses pointers everywhere though, not as an indication that things can be nullptr.",
      "parentUuid": "fc217731_091b08d9",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59e74480_4ae68fb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-13T15:53:30Z",
      "side": 1,
      "message": "Looks like only one unittest is producing nullptr: https://chromium-review.googlesource.com/c/angle/angle/+/5291835\n\nAgain, if you\u0027d fix `HoistConstants`, I\u0027d go over the rest of the code and make sure body is never nullptr.",
      "parentUuid": "c011c311_612a5995",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58b1d502_b9fdbb5f",
        "filename": "src/tests/compiler_tests/MSLOutput_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 859,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-13T14:42:36Z",
      "side": 1,
      "message": "Could you please add a test in GLSLTest.cpp (so it runs on all backends) with this shaders?\n\n```\nvoid main()\n{\n    int a \u003d 4;\n    float b \u003d 0.;\n    for (int c \u003d a++; (b +\u003d c / 8.) \u003c 0; b +\u003d 0.3)\n    {\n        if (2 \u003d\u003d 0);\n    }\n    int c \u003d a - 4;\n    color \u003d vec4(c, b, 0, 1);\n}\n```\n\nAnd `EXPECT_PIXEL_COLOR_NEAR` the color (255, 127, 0, 255)?\n\nThat\u0027s testing a few things:\n\n- Side effect in the init expression\n- Side effect in the condition, uses variable from init expression\n- When loop is removed, side effect in last expression should not take effect\n- If `c` in the loop is retained, it should be in a scope that doesn\u0027t affect the variable `c` defined later.",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24a93584_33263f3c",
        "filename": "src/tests/compiler_tests/MSLOutput_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 859,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-02-13T14:49:37Z",
      "side": 1,
      "message": "Note: that\u0027s not neccessarily the crashing same code, as for(;;) gets transformed to different while construct.",
      "parentUuid": "58b1d502_b9fdbb5f",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65aa79ef_be4838d9",
        "filename": "src/tests/compiler_tests/MSLOutput_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 859,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-13T15:17:50Z",
      "side": 1,
      "message": "Understood. Still wouldn\u0027t hurt to have the test ðŸ˜Š",
      "parentUuid": "24a93584_33263f3c",
      "revId": "055ea772d95bf07ce504faef22faf428f7b50887",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}