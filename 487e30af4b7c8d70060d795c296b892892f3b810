{
  "comments": [
    {
      "key": {
        "uuid": "b5b569b2_e1a1d782",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2019-08-20T21:52:57Z",
      "side": 1,
      "message": "clang doesn\u0027t like this lack of static destructor. Re working to use pattern base::NoDestructor wrapped in a getInstance() static function.",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37ea8c0e_c995138d",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-08-20T22:49:35Z",
      "side": 1,
      "message": "Can you do this without using a global?",
      "parentUuid": "b5b569b2_e1a1d782",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9765b60c_d2e216c9",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2019-08-20T22:56:38Z",
      "side": 1,
      "message": "Another common pattern is:\n\nConfig *Config::noConfig()\n{\n    if (!noConfigInstance)\n    {\n         noConfigInstance \u003d new NoConfig();\n    }\n    return noConfigInstance;\n}\n\nI don\u0027t like this pattern because it always checks for null. And there is no workable destructor for this. Would have to be in cleanup code.\n\nHow about: using pattern I have found in several other libANGLE files:\n\nConfig *Config::noConfig()\n{\n    // NoConfig (singleton) to represent EGL_NO_CONFIG,\n    struct NoConfig final : Config\n    {\n        NoConfig() { renderableType \u003d EGL_OPENGL_ES3_BIT | EGL_OPENGL_ES2_BIT; }\n    };\n    static angle::base::NoDestructor\u003cNoConfig\u003e g_NoConfigInstance;\n    return static_cast\u003cConfig *\u003e(g_NoConfigInstance.get());\n}",
      "parentUuid": "37ea8c0e_c995138d",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42bca7f8_44cd8160",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2019-08-20T23:01:40Z",
      "side": 1,
      "message": "We didn\u0027t like using nullptr for EGL_NO_CONFIG. So alternative was to use an instance of Config that would mark/act as EGL_NO_CONFIG. This object should be static for the life of the use of EGL/ life of process. So a static object would be ideal. Just need a pattern that a destructor is either not needed or automatic.",
      "parentUuid": "9765b60c_d2e216c9",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e2b3a90_594aa9d8",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-08-20T23:21:20Z",
      "side": 1,
      "message": "If you want a static object can you give it an owner? See http://anglebug.com/3787 . NoDestructor is a kludge and I would like to get rid of it.\n\nAlternately you can just construct an empty object on the stack each time. These configs should be rarely used in any hot path.",
      "parentUuid": "42bca7f8_44cd8160",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f42804f_b982cc90",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2019-08-20T23:27:04Z",
      "side": 1,
      "message": "Yeah, I was curious how this templated class evades the static destructor warning.\n\nI\u0027d like to see an example \"... Ideally most of these objects could be made into statically allocated tables that don\u0027t require runtime construction or heap allocation at all, to optimize startup time.\"\n\nOtherwise, I\u0027ll revert to using \"EGL_NO_CONFIG\" as a nullptr. It reads real simple that way.",
      "parentUuid": "5e2b3a90_594aa9d8",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "632650bf_40b41e52",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-08-20T23:33:20Z",
      "side": 1,
      "message": "That\u0027s a bit of a different context. The comment is referring to a bunch of static format tables we defined. Your case is a simple static object. For a simple static you can also I think use constexpr to make it not have a destructor. contexpr might be another way to fix the warning.",
      "parentUuid": "4f42804f_b982cc90",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1d439ca_8d62f585",
        "filename": "src/libANGLE/Config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2019-08-21T22:10:58Z",
      "side": 1,
      "message": "constexpr didn\u0027t squelch the warnings. Using EGL_NO_CONFIG_KHR.",
      "parentUuid": "632650bf_40b41e52",
      "revId": "487e30af4b7c8d70060d795c296b892892f3b810",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}