{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "616c5f03_6014ac86",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1771,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-21T17:51:34Z",
      "side": 1,
      "message": "A little helper for these 4 lines would be nice, it\u0027s repeated for `Texture` in `updateTexturesDescriptorSet` below, as well as `CLProgramVk::allocateDescriptorSet`\n\n```\n    ASSERT(mDescriptorSets[setIndex]);\n    mDescriptorPools[setIndex] \u003d mDescriptorSets[setIndex]-\u003egetPool();\n\n    commandBufferHelper-\u003eretainResource(mDescriptorSets[setIndex].get());\n    commandBufferHelper-\u003eretainResource(mDescriptorPools[setIndex].get());\n```",
      "range": {
        "startLine": 1760,
        "startChar": 0,
        "endLine": 1771,
        "endChar": 74
      },
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "954d18c0_199537fe",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 1771,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-22T17:45:02Z",
      "side": 1,
      "message": "Acknowledged. We should able to get rid of special handling of texture code path later. Will keep this in mind.",
      "parentUuid": "616c5f03_6014ac86",
      "range": {
        "startLine": 1760,
        "startChar": 0,
        "endLine": 1771,
        "endChar": 74
      },
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6417357f_772b9ba1",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-21T17:51:34Z",
      "side": 1,
      "message": "Already included (first include in the file)\n\n```suggestion\n#include \"libANGLE/renderer/vulkan/android/vk_android_utils.h\"\n```",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 48
      },
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e40ef4ca_0dfe1679",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 24
      },
      "lineNbr": 24,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-22T17:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6417357f_772b9ba1",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 48
      },
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "972b6d84_55b169b2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 24
      },
      "lineNbr": 4304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-21T17:51:34Z",
      "side": 1,
      "message": "Was `mPool` a weak ptr here? Might be worth mentioning that, as the explanation is not clear (looks like a leak!).\n\nPerhaps instead of `nuke` (which sounds like `destroy`) we could say \"remove the weak reference\" or something. Also better to specify what invariant this satisfies instead of \"won\u0027t hit assertion\" (unclear which assertion)",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d86e813a_bd829748",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 24
      },
      "lineNbr": 4304,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-22T17:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "972b6d84_55b169b2",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d741ccc8_af2593b6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 24
      },
      "lineNbr": 264,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-18T17:51:33Z",
      "side": 1,
      "message": "What is the reason we don\u0027t use the new DescriptorPoolPointer data type here?",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b3f3a63_ddeae53f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 24
      },
      "lineNbr": 264,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-18T18:30:23Z",
      "side": 1,
      "message": "Because there are places we want a weak pointer. For example, DescriptorSetHelper holds a weak pointer to the pool. DescriptorPoolPointer is a strong pointer which will prevent it from destroyed.",
      "parentUuid": "d741ccc8_af2593b6",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc899836_1963dbfc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 24
      },
      "lineNbr": 264,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-18T21:06:14Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1b3f3a63_ddeae53f",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af61ff5b_245f5b34",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 24
      },
      "lineNbr": 301,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-18T17:51:33Z",
      "side": 1,
      "message": "Suggest updating the comment with `So that DescriptorPoolHelper::resetGarbage() can modify data members (e.g. mDescriptorSet and mPool) of this class DescriptorSetHelper`",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bc18117_7928570d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 24
      },
      "lineNbr": 301,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-22T17:45:02Z",
      "side": 1,
      "message": "Thought about this more, I am removing resetGarbage completely. The whole `friend class DescriptorPoolHelper` and these questions from you and shabi are all because of I added assertion in DescriptorSetHelper::~DescriptorSetHelper(). But that assertion really isn\u0027t provide much value. SO to make life simpler, the assertion is removed and all these related changes removed as well.",
      "parentUuid": "af61ff5b_245f5b34",
      "revId": "643c4830a21937c3a8a2aaf17f8ab5059bfbb2a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}