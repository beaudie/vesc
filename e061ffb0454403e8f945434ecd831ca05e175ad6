{
  "comments": [
    {
      "key": {
        "uuid": "04b370d6_8d35af7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "For the bot to pick this up you will need to use the syntax:\n\nBug: angleproject:3318\n\nNot upper-case.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 3
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e212361_b8df5afd",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-04-09T15:49:52Z",
      "side": 1,
      "message": "I think just discard the error (or log it) but don\u0027t assert.  This will probably cause assertion failures in ANGLE if the user gives us bad data from the blob get function.",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 26
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7b2f825_b593eb48",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "We should probably return an error if it is possible to generate an error here.",
      "parentUuid": "1e212361_b8df5afd",
      "range": {
        "startLine": 87,
        "startChar": 4,
        "endLine": 87,
        "endChar": 26
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5d7415c_5fb21cbd",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1333595
      },
      "writtenOn": "2019-04-09T08:12:09Z",
      "side": 1,
      "message": "This value can be tuned.",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff8c7e99_5972f7f6",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T14:20:42Z",
      "side": 1,
      "message": "Imagine there\u0027s an application that\u0027s in loading stage. Say it takes 5 seconds to load all the shaders. This would write the cache 5 times in the meantime. I suggest at least having this value correspond to 1 minute of execution (i.e. 60*60). My reasoning is that:\n\n- if the application is short-lived, it\u0027s likely not heavy on shaders, so if the pipeline cache is not flushed, it\u0027s not a big deal\n- if the application is heavy, like a game, the user will interact with it for many minutes, which means there is enough time to wait for the cache to fill up before flushing it.\n\nWhat do you think?",
      "parentUuid": "d5d7415c_5fb21cbd",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f81ff9e9_83d68192",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "Maybe instead of using a time based policy we should use a count of new pipelines check? I.E. if we have greater than X new pipelines added to the cache since the last swap. Then we would write out the pipelines. X could potentially be zero.",
      "parentUuid": "ff8c7e99_5972f7f6",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "562f2c45_c419ca8f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T17:25:28Z",
      "side": 1,
      "message": "In a real application with hundreds if not thousands of pipelines, sending the pipeline cache through the blob cache on every change may end up having a noticeable effect. I don\u0027t think doing dump-per-X-pipelines is a bad idea, but I would keep X somewhat large, and pair it with a timeout as we do (so if we don\u0027t reach X, we still dump every now and then)",
      "parentUuid": "f81ff9e9_83d68192",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b2edf50_084ab1cc",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:29:26Z",
      "side": 1,
      "message": "Sorry, I maybe forgot to say that I still would do the check once per swap. Just the trigger would be X pipelines instead of X swaps.",
      "parentUuid": "562f2c45_c419ca8f",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f22d2eb5_ab791ec7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1306,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-04-09T15:49:52Z",
      "side": 1,
      "message": "Can you add a comment here explaining that this is creating a new cache because there are new functions set, reading it any pipelines from it and merging it with the existing pipeline cache?",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b92db16_a4ebf819",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1306,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "Also, what happens if mPipelineCache is invalid? Can you ASSERT it is valid?",
      "parentUuid": "f22d2eb5_ab791ec7",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11adaf30_9bb63ada",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1312,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T14:20:42Z",
      "side": 1,
      "message": "You can remove `src` and use `pipelineCache.ptr()` here.",
      "range": {
        "startLine": 1312,
        "startChar": 87,
        "endLine": 1312,
        "endChar": 90
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae851f11_338a07d3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1312,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "11adaf30_9bb63ada",
      "range": {
        "startLine": 1312,
        "startChar": 87,
        "endLine": 1312,
        "endChar": 90
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4efbb68_49835ece",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1663,
      "author": {
        "id": 1333595
      },
      "writtenOn": "2019-04-09T08:12:09Z",
      "side": 1,
      "message": "Only write the cache data to disk if there\u0027s new pipeline created in the past 60 frames.\nIt\u0027s a trade-off of saving as more cache data as possible and in the meanwhile reducing the times of cache data write.",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f2b4c31_736f6afa",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1670,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T14:20:42Z",
      "side": 1,
      "message": "Minor: Please put this after `displayVk-\u003egetBlobCache()-\u003eputApplication`, as logically that\u0027s where the pipeline cache is really no longer dirty (if anything fails in the mean time, `ANGLE_*TRY` would return before the cache is dumped).",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4b49a06_20e36bc7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-04-09T15:49:52Z",
      "side": 1,
      "message": "Let\u0027s call this onBlobCacheFuncs to make it clear it\u0027s in response to them being set.",
      "range": {
        "startLine": 216,
        "startChar": 18,
        "endLine": 216,
        "endChar": 36
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c321cc44_ad812f74",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T14:20:42Z",
      "side": 1,
      "message": "See below regarding the variable name. This could in turn be changed to `[gs]etPipelineCacheDirty`",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dfca157_730752d8",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "I also don\u0027t think you need a getter here.",
      "parentUuid": "c321cc44_ad812f74",
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87adef8a_5028ce32",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T14:20:42Z",
      "side": 1,
      "message": "I would name this to reflect \"what happened\" rather than \"what needs to be done\". My suggestion would be `mPipelineCacheDirty`.",
      "range": {
        "startLine": 310,
        "startChar": 9,
        "endLine": 310,
        "endChar": 29
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0521ca68_8a2ae5e8",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1450,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "how about onNewGraphicsPipeline()",
      "range": {
        "startLine": 1450,
        "startChar": 32,
        "endLine": 1450,
        "endChar": 54
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5792eee_27977c65",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "nit: prefer using non-p prefixed variable names to match ANGLE style. So srcCaches.",
      "range": {
        "startLine": 459,
        "startChar": 36,
        "endLine": 459,
        "endChar": 46
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f1b6327_7707e804",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 1
      },
      "lineNbr": 1189,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:10:46Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1189,
        "startChar": 60,
        "endLine": 1189,
        "endChar": 70
      },
      "revId": "e061ffb0454403e8f945434ecd831ca05e175ad6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}