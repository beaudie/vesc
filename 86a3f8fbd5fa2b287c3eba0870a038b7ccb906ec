{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "107ed079_4458069e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 2818,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "I suggest this function follows mPrevTexture. If ShareGroup owns mPrevTexture, then also move this function to ShareGroup.",
      "range": {
        "startLine": 2818,
        "startChar": 14,
        "endLine": 2818,
        "endChar": 48
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edfcd679_815f4e99",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 2828,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "This can\u0027t be possible.",
      "range": {
        "startLine": 2828,
        "startChar": 11,
        "endLine": 2828,
        "endChar": 30
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df980cec_4c3faf88",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 17
      },
      "lineNbr": 59,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "Have both get and set APIs defeats encapsulation. You basically are making it public variable. My suggestion is move onMutableTextureUpload to ShareGroup, and then you likely don\u0027t need any of these APIs.",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 59,
        "endChar": 55
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b6c54b0_738631ad",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 460,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "Isn\u0027t this going to miss all non-mipmap textures?",
      "range": {
        "startLine": 456,
        "startChar": 4,
        "endLine": 460,
        "endChar": 5
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9d6ac63_75f81e5b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-07T02:25:55Z",
      "side": 1,
      "message": "Yes. Let\u0027s go with optimizing the safer case first (image has at least 2 levels), then follow up with optimizing for single-level images. I\u0027m worried that may need more extensive testing to make sure no app is degraded by the eager image allocation.",
      "parentUuid": "0b6c54b0_738631ad",
      "range": {
        "startLine": 456,
        "startChar": 4,
        "endLine": 460,
        "endChar": 5
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27742191_a4d8d963",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 467,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "line 451 already ensures if it is cube, it is complete. This can be just gl::TextureTarget textureTarget \u003d (mState.getType() \u003d\u003d gl::TextureType::CubeMap)? \n    gl::kCubeMapTextureTargetMin : gl::TextureTypeToTarget(mState.getType(), 0);",
      "range": {
        "startLine": 463,
        "startChar": 4,
        "endLine": 467,
        "endChar": 88
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bbacd07_93df4a61",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 471,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "Why only checking two levels?\n\nI guess you are checking two levels mainly to optimize just limited usage case. But we still need to ensure if levels \u003e1 is incompatibly specified it will still work. What I am thinking is that we at least need a mode (that all bots with enable that mode) that ignore the check of compatibility and it should still work. Otherwise, if someone specifies an incompatible level3 and it might break and we will not able to know (assume existing tests are mostly only testing 2 levels and assumes handling of \u003e2 levels are the same as 2 levels, which this CL will defeat that assumption.)",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 471,
        "endChar": 69
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e603a014_04a8c8e9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 3510,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "Is this related? Should this FullMipChainForGenerateMipmap related changes split into separate preparation CL?",
      "range": {
        "startLine": 3510,
        "startChar": 43,
        "endLine": 3510,
        "endChar": 72
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c725f0b_9e225806",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-06T23:00:50Z",
      "side": 1,
      "message": "This is only used in the assertion that it is immutable. Maybe change it to \nbool isImmutable() { return mState.getImmutableFormat(); }",
      "range": {
        "startLine": 206,
        "startChar": 4,
        "endLine": 206,
        "endChar": 57
      },
      "revId": "86a3f8fbd5fa2b287c3eba0870a038b7ccb906ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}