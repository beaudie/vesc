{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d54299_3d92298e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-28T07:52:13Z",
      "side": 1,
      "message": "How does the perf test you added fare?\n\nAnd what would the numbers be if you used std::list instead of rolling your own implementation? What about std::vector?\n\nIn the past I did experience a FastVector-like implementation being slower, presumable because more-malloc-during-vector-build is faster than adding-if(spilled)-during-vector-access, at least in some scenarios, so I\u0027m not totally surprised. But I\u0027m not sure a list is the best choice.",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2020dac_2d09db7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-28T21:44:10Z",
      "side": 1,
      "message": "\u003e How does the perf test you added fare?\n\u003e And what would the numbers be if you used std::list instead of rolling your own implementation?\n\u003e What about std::vector?\n\nwith FastVector\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FramebufferAttachmentBenchmark\n[ RUN      ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 123.7586746549 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32341 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 162721 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 123.0456067644 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32341 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 195062 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 119.5600084922 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32341 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 227403 count\n[       OK ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count (7118 ms)\n[----------] 1 test from FramebufferAttachmentBenchmark (7118 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7122 ms total)\n[  PASSED  ] 1 test.\n\nwith std::list\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FramebufferAttachmentBenchmark\n[ RUN      ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 196.8460871820 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 20036 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 99586 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 197.2713178983 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 20036 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 119622 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 195.5952722736 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 20036 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 139658 count\n[       OK ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count (7107 ms)\n[----------] 1 test from FramebufferAttachmentBenchmark (7107 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7109 ms total)\n[  PASSED  ] 1 test.\n\nwith std::vector\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FramebufferAttachmentBenchmark\n[ RUN      ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 120.7579843530 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32683 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 163604 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 116.3661154170 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32683 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 196287 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 116.7725767332 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 32683 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 228970 count\n[       OK ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count (7048 ms)\n[----------] 1 test from FramebufferAttachmentBenchmark (7049 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7050 ms total)\n[  PASSED  ] 1 test.\n\nwith double linked list\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FramebufferAttachmentBenchmark\n[ RUN      ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 116.4753792243 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33514 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 166696 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 114.9498856933 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33514 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 200210 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 114.3956047391 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33514 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 233724 count\n[       OK ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count (7049 ms)\n[----------] 1 test from FramebufferAttachmentBenchmark (7050 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7052 ms total)\n[  PASSED  ] 1 test.\n\n\n\n\u003e But I\u0027m not sure a list is the best choice\n\na doubly linked list is the only accessible design with constant time complexity for insert(), remove() and contains()\n\nAlso note that i am not creating a new container to store the observer, i just expanded the observerbase class to hold 2 new pointers",
      "parentUuid": "e1d54299_3d92298e",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63ef325a_49c75ad9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-01T15:14:04Z",
      "side": 1,
      "message": "Thanks for testing. This change is basically implementing [1], which is why it\u0027s more efficient than std::list.\n\nThis stuff can get tricky though and would definitely need unit tests. We should think about doing this properly by introducing a new class for linked lists, add proper unit tests etc. We should be able to take advantage of inheritance as an alternative for container_of in [1]. I\u0027d be happy to work with you in designing the class.\n\n[1]: https://kernelnewbies.org/FAQ/LinkedLists",
      "parentUuid": "c2020dac_2d09db7a",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f1a0d40_5b220cdd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-01T16:13:31Z",
      "side": 1,
      "message": "\u003e std::list\n\nit takes linear time for remove even though its a double linked list, not sure why\n\n\u003e I\u0027d be happy to work with you in designing the class.\n\nthanks Shabi. I guess this is not the ideal place for design chat, will set up a design doc and invite you there",
      "parentUuid": "63ef325a_49c75ad9",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a68a5ee5_c4cf34df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-01T16:19:15Z",
      "side": 1,
      "message": "Because it needs to find the item first. That\u0027s the downside of std::list being a container (and another is the extra memory allocations).\n\n\u003e will set up a design doc and invite you there\n\nPerfect",
      "parentUuid": "1f1a0d40_5b220cdd",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50b27a7e_84fb3a36",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-03T21:07:34Z",
      "side": 1,
      "message": "updated results with circular doubly linked list implementation -\n\nwith circular double linked list\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FramebufferAttachmentBenchmark\n[ RUN      ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 112.8161180685 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33858 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 170108 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 113.1725353908 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33858 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 203966 count\n*RESULT Framebuffers_vulkan_null.wall_time: 8_attach_detach_count\u003d 115.9852361322 ns\nRESULT Framebuffers_vulkan_null.trial_steps: 8_attach_detach_count\u003d 33858 count\nRESULT Framebuffers_vulkan_null.total_steps: 8_attach_detach_count\u003d 237824 count\n[       OK ] FramebufferAttachmentBenchmark.Run/vulkan_null_8_attach_detach_count (7034 ms)\n[----------] 1 test from FramebufferAttachmentBenchmark (7035 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7039 ms total)\n[  PASSED  ] 1 test.\n\nremoving those if branches really did save us some time",
      "parentUuid": "a68a5ee5_c4cf34df",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "bf0634a1ae054c6146d8c0d163db2e7f5fdb2912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}