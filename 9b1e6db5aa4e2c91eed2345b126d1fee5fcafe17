{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ccd9907e_1155c8b6",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:09:53Z",
      "side": 1,
      "message": "What if two functions have same-name parameters at different positions?\n\nYou can directly map from `TVariable *` here",
      "range": {
        "startLine": 262,
        "startChar": 13,
        "endLine": 262,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d027f441_4c89e6c3",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T19:23:31Z",
      "side": 1,
      "message": "When marking variables active, `visitSymbol` uses `ShaderVariable` which is not a `TVariable` so I went with strings for the moment.  We\u0027d need a `mParamNameToIndex` per function, you are right.",
      "parentUuid": "ccd9907e_1155c8b6",
      "range": {
        "startLine": 262,
        "startChar": 13,
        "endLine": 262,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f1fa695_dadc559c",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:30:38Z",
      "side": 1,
      "message": "`visitSymbol` has access to the symbol, which you can get the `TVariable *` out of. That is `\u0026symbol-\u003evariable()`",
      "parentUuid": "d027f441_4c89e6c3",
      "range": {
        "startLine": 262,
        "startChar": 13,
        "endLine": 262,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "703216cd_056501ad",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 262,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-28T05:58:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f1fa695_dadc559c",
      "range": {
        "startLine": 262,
        "startChar": 13,
        "endLine": 262,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "812cd5a2_8c22b1f6",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:09:53Z",
      "side": 1,
      "message": "You can map from the `TFunction *` directly",
      "range": {
        "startLine": 263,
        "startChar": 13,
        "endLine": 263,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a5937d_b3b0f165",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T19:23:31Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "812cd5a2_8c22b1f6",
      "range": {
        "startLine": 263,
        "startChar": 13,
        "endLine": 263,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd02bf6d_926e4327",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T21:41:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58a5937d_b3b0f165",
      "range": {
        "startLine": 263,
        "startChar": 13,
        "endLine": 263,
        "endChar": 24
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d86aff2_202218d5",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:09:53Z",
      "side": 1,
      "message": "This has the problem of not marking X as active here IIUC:\n\n    f(..., use[X]++, ...)\n\nif `X` is not otherwise used elsewhere.",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "636d9b49_fe98c325",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T19:23:31Z",
      "side": 1,
      "message": "Yeah, will have to think about that.",
      "parentUuid": "5d86aff2_202218d5",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f28b39c_8969cbdb",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T20:08:03Z",
      "side": 1,
      "message": "The parameters could be all sort of expressions, like `a ? b[X] : c[Y++][Z].struct[2].x`.  We want something that captures the base of the access chain to determine liveness.  In this case, the parameter index would be used to determine liveness for `b` and `c` (based on internal use), and everything else used to index them would be live.",
      "parentUuid": "636d9b49_fe98c325",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62aff8df_c17f35ca",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T21:41:20Z",
      "side": 1,
      "message": "Might be able to construct a `isBaseOfAccessChain` or something and use that.  I see `FindPreciseNodes` is using `AccessChain`,",
      "parentUuid": "2f28b39c_8969cbdb",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec526954_abe2a740",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-23T02:15:03Z",
      "side": 1,
      "message": "I\u0027ve done something like that in the past, where you walk the parent chain up while the nodes are TIntermBinary with op EOpIndexDirect or EOpIndexIndirect to find the fully indexed expression from the symbol.\n\nAt that point, you could perhaps simply check if the parent is a function call, and if so which function it is and whether the parameter is live, and derive the symbol\u0027s liveness from that.",
      "parentUuid": "62aff8df_c17f35ca",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d79a5b10_ea198617",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 432,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-28T05:58:08Z",
      "side": 1,
      "message": "I short circuited this by checking the AST depth before deciding whether to track liveness.  If greater than one (indicating an access chain) just consider it live.",
      "parentUuid": "ec526954_abe2a740",
      "range": {
        "startLine": 432,
        "startChar": 38,
        "endLine": 432,
        "endChar": 67
      },
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4657775e_9bd5b988",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:09:53Z",
      "side": 1,
      "message": "This will make you skip the contents of the first function definition. I suggest just doing the call DAG traversal once before/in constructor, and let the traversal for variable collection be.",
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f72d4426_eea6b07d",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T19:23:31Z",
      "side": 1,
      "message": "Wouldn\u0027t I have already traversed all the function definitions by iterating through the DAG entries?",
      "parentUuid": "4657775e_9bd5b988",
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed88d6ad_88e67a02",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-22T19:30:38Z",
      "side": 1,
      "message": "Ah I missed that you are traversing the functions at the same time. I think right now you are reprocessing the dag over and over on each function. You could potentially make `visitFunctionDefinition` unconditionally `return false`, then after traversal call `traverseDAG` which does the traversal of functions.",
      "parentUuid": "f72d4426_eea6b07d",
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfee1206_f166f7f6",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-22T20:08:03Z",
      "side": 1,
      "message": "Heh, I meant for it to be done only once, but I removed a check I had (mTraversedDAG) while cleaning up for upload.  One way or the other, only want the DAG traversed once, and only want each function traversed once.",
      "parentUuid": "ed88d6ad_88e67a02",
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d851668_ea24451b",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1242,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-04-28T05:58:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dfee1206_f166f7f6",
      "revId": "9b1e6db5aa4e2c91eed2345b126d1fee5fcafe17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}