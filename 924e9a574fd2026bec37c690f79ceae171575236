{
  "comments": [
    {
      "key": {
        "uuid": "3fc6c3a0_329c0315",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-17T04:45:04Z",
      "side": 1,
      "message": "I think it\u0027s safer if `kVulkanQueuePriorityMedium \u003d queueCount \u003d\u003d 2 ? 0 : 0.5;`. If the driver has two queues, what if it rounds the priority also to 0 and 1 (as the hardware supported priorities), and 0.5 is rounded to 1? Then you end up with the same real hardware priority for the two queues.\n\nSo I suggest either:\n\n- queueCount \u003d 1: priority whatever\n- queueCount \u003d 2: priorities 0 and 1\n- queueCount \u003d 3: priorities 0, 0.4 and 1\n\nOr just:\n\n- an all cases: priorities 0, 0.4 and 1\n\nThe reason I chose 0.4 is to make sure High is always higher priority than medium, even if the hardware supports only 2 priorities (but at least 3 queues). In that case, the hardware may choose to map 0 and 0.4 both to hw priority low and 1 to hw priority high. If at least 3 priorities, 0.4 also lies between 0.33 and 0.66, which means it would still map to the middle priority.\n\nAlso, the second option is less certain that 0.4 and 1 (in case of queueCount \u003d 2) will map to two different hardware priorities, but chances are they would (while with 0.5 it\u0027s not certain).",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a00074_fe00ec4e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-17T18:05:57Z",
      "side": 1,
      "message": "I was referencing VkSpec 4.3.4 Queue Priority where priority is between 0.0(Lowest) and 1.0 (Highest). \"levels must be spread evenly over the range\". But we don\u0027t know what rounding will be used - up? nearest? down?\nSo I reasoned, and certainly, the more Qs, the lest likely that it will be an implementation. So if we go for medium at 0.33 to 0.40 and expect round up, then we hit most these cases adequately - and avoiding round up to 1.0. OK. I\u0027ll go with 0.40.\n1:Q \u003d {0.0}\n2:Q \u003d {0.0, 1.0}\n3:Q \u003d {0.0, 0.5, 1.0}\n--------------------------------\n4:Q \u003d {0.0, 0.33, 0.66, 1.0}\n5:Q \u003d {0.0, 0.25, 0.5, 0.75, 1.0}\n6:Q \u003d {0.0, 0.0, 0.4, 0.6, 0.8, 1.0}\n7:Q \u003d {0.0, 0.17, 0.33, 0.5, 0.67, 0.83, 1.0}\n8:Q \u003d {0.0, 0.14, 0.29, 0.43, 0.57, 0.71, 0.86, 1.0}",
      "parentUuid": "3fc6c3a0_329c0315",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}