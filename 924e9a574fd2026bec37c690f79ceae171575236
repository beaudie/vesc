{
  "comments": [
    {
      "key": {
        "uuid": "3fc6c3a0_329c0315",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-17T04:45:04Z",
      "side": 1,
      "message": "I think it\u0027s safer if `kVulkanQueuePriorityMedium \u003d queueCount \u003d\u003d 2 ? 0 : 0.5;`. If the driver has two queues, what if it rounds the priority also to 0 and 1 (as the hardware supported priorities), and 0.5 is rounded to 1? Then you end up with the same real hardware priority for the two queues.\n\nSo I suggest either:\n\n- queueCount \u003d 1: priority whatever\n- queueCount \u003d 2: priorities 0 and 1\n- queueCount \u003d 3: priorities 0, 0.4 and 1\n\nOr just:\n\n- an all cases: priorities 0, 0.4 and 1\n\nThe reason I chose 0.4 is to make sure High is always higher priority than medium, even if the hardware supports only 2 priorities (but at least 3 queues). In that case, the hardware may choose to map 0 and 0.4 both to hw priority low and 1 to hw priority high. If at least 3 priorities, 0.4 also lies between 0.33 and 0.66, which means it would still map to the middle priority.\n\nAlso, the second option is less certain that 0.4 and 1 (in case of queueCount \u003d 2) will map to two different hardware priorities, but chances are they would (while with 0.5 it\u0027s not certain).",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a00074_fe00ec4e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-17T18:05:57Z",
      "side": 1,
      "message": "I was referencing VkSpec 4.3.4 Queue Priority where priority is between 0.0(Lowest) and 1.0 (Highest). \"levels must be spread evenly over the range\". But we don\u0027t know what rounding will be used - up? nearest? down?\nSo I reasoned, and certainly, the more Qs, the lest likely that it will be an implementation. So if we go for medium at 0.33 to 0.40 and expect round up, then we hit most these cases adequately - and avoiding round up to 1.0. OK. I\u0027ll go with 0.40.\n1:Q \u003d {0.0}\n2:Q \u003d {0.0, 1.0}\n3:Q \u003d {0.0, 0.5, 1.0}\n--------------------------------\n4:Q \u003d {0.0, 0.33, 0.66, 1.0}\n5:Q \u003d {0.0, 0.25, 0.5, 0.75, 1.0}\n6:Q \u003d {0.0, 0.0, 0.4, 0.6, 0.8, 1.0}\n7:Q \u003d {0.0, 0.17, 0.33, 0.5, 0.67, 0.83, 1.0}\n8:Q \u003d {0.0, 0.14, 0.29, 0.43, 0.57, 0.71, 0.86, 1.0}",
      "parentUuid": "3fc6c3a0_329c0315",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6e70e43_47f18e4e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-17T18:33:29Z",
      "side": 1,
      "message": "\"levels must be spread evenly over the range\" is the key language in the spec. Given that -\n1. All prioritites in EGL and Vulkan world are hints and not guarantees\n2. EGL only has 3 priority levels\n\ni do not get the concern/issue here at all",
      "parentUuid": "41a00074_fe00ec4e",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "817920c1_26cec992",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-17T18:59:21Z",
      "side": 1,
      "message": "@Mohan, they are a hint, because Vulkan doesn\u0027t want expose the exact hardware priority levels. That doesn\u0027t mean the hardware levels are not real. The issue was about the choice of 0.5 as the medium priority. If the hardware only supports 2 priorities, it would necessarily map [0, 0.5) to low and (0.5, 1] to high priority. It\u0027s unclear what happens if the priority is 0.5. The choice of 0.4 makes sure with 2 hw priorities, low and med map to hw low and high maps to hw high. With 3+ hw priorities, low will map to hw low, high to hw high and med to some priority in between.\n\n@Jeff \"we hit most these cases adequately\", well we hit _all_ these cases adequately. Even in the ambiguous case of 6 priority levels ({0.0, 0.2, 0.4, 0.6, 0.8, 1.0}), it doesn\u0027t matter if priority level 2 or 3 is selected as long as it\u0027s neither the lowest nor highest priority.",
      "parentUuid": "f6e70e43_47f18e4e",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67142e0e_efa4b0b2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-17T19:04:28Z",
      "side": 1,
      "message": "If there are 3 Qs, and the ICD does round down, then 0.4 could become 0.0. Then no real medium.",
      "parentUuid": "817920c1_26cec992",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cc7b05c_257db8e0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-17T19:11:04Z",
      "side": 1,
      "message": "I adjusted my logic slightly, so right now:\n1Q \u003d {0.0} All medium\n2Q \u003d {0.0, 1.0} Medium and High. Low is medium\n3Q \u003d {0.0, ?, 1.0} LOW, Medium, High. \nJust need to guess whether Medium should be 0.4 or 0.5.",
      "parentUuid": "67142e0e_efa4b0b2",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90a7f73c_51b1c3f5",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-17T19:13:20Z",
      "side": 1,
      "message": "spec says - \"The priority of each queue is a normalized floating point value between 0.0 and 1.0, which is then translated to a discrete priority level by the implementation.\"\n\nit feels to me that we are trying to second guess what a vulkan driver would do and are trying to account for that in some way. I think it is not the place for ANGLE to decide what an ICD would do and how it will map it to real HW levels. ANGLE should just follow spec and say if there are 3 Qs we request 3 priorities evenly distributed over the range [0 - 1]. Whether those levels are rounded up or rounded down or ignored completely (as some HW vendors are known to do) it is completely upto the implementation",
      "parentUuid": "4cc7b05c_257db8e0",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efa96a82_c056ac00",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-17T19:27:14Z",
      "side": 1,
      "message": "\"If there are 3 Qs, and the ICD does round down, then 0.4 could become 0.0. Then no real medium.\"\n\nFirst, note that 3 Qs doesn\u0027t mean 3 priorities. So, if there are 3 queues but 2 hardware priorities, then yes, low and medium map to hw low, and high maps to hw high. That was my intention from the beginning (i.e. to make sure high is definitely higher than med, even if it means med and low are the same).\n\n@Moham, we are not really second-guessing what the driver does. See the description of discreteQueuePriorities limit:\n\n\u003e discreteQueuePriorities is the number of discrete priorities that can be assigned to a queue based on the value of each member of VkDeviceQueueCreateInfo::pQueuePriorities. This must be at least 2, and levels must be spread evenly over the range, with at least one level at 1.0, and another at 0.0\n\nI think we disagree on what the \"levels must be spread evenly over the range\" phrase means. To me, it sounds like that\u0027s an instruction for the vendor specifying that they should map the [0, 1] range evenly to their hw priorities. It doesn\u0027t sound like a suggestion for the application to spread its requested priorities evenly.",
      "parentUuid": "90a7f73c_51b1c3f5",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc319f_899062f8",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-17T20:22:13Z",
      "side": 1,
      "message": "the spec language describing \"VkDeviceQueueCreateInfo::pQueuePriorities\" is talking about the values to be set in a Vulkan structure that will be called with a Vulkan API by an application. I dont think any spec will be prescriptive about what an ICD should do with its HW.\n\nPriority levels are totally relative. In the case that a VK ICD says there are 2 Qs and we create 2 Qs with 0.5 and 1 priorities, all it means is that commands with priority 1 MAY be given more \"slices\" of GPU time than the one with priority 0.5 and this will continue to be true irrespective of whether VK ICD rounded down 0.5 to 0.0\n\nFYI - there is a small clarification missing from the spec, it should have said - \"This must be at least 2, if there are 2 Qs supported\". This got me initially because i thought the spec was mandating implementations to have atleast 2 Qs",
      "parentUuid": "efa96a82_c056ac00",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94cdbddf_b5edc0b6",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-17T20:59:47Z",
      "side": 1,
      "message": "The language I quoted is not from VkDeviceQueueCreateInfo::pQueuePriorities, but from VkPhysicalDeviceLimits::discreteQueuePriorities, i.e. it\u0027s about the real hardware capability.\n\nThe part that says \"... with at least one level at 1.0, and another at 0.0\" also makes it pretty clear this is about what the driver should do.\n\nI agree with you that, per spec, we can\u0027t rely on the priorities actually doing anything. Practically speaking though, we want current/most/known hardware to really give higher priority to High than to Med.\n\nSo now the question is, do real drivers take pQueuePriorities and spread them to hw priorities or do they take each individual element of pQueuePriorities and assign it a hw priority based on the bucket it falls in?\n\nFor example, say the hw has 3 priority levels. If you provide pQueuePriorities as {0.98, 0.99, 1.0}, do *real* drivers assign low, med and high priorities to the three queues? Or would they all get high priority?\n\nIn the example above, I believe the wording of the spec means that priorities in [0, 0.33) should fall in hw priority 0, (0.33, 0.66) should fall in hw priority 1 and (0.66, 1] should fall in hw priority 2.",
      "parentUuid": "d1cc319f_899062f8",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3275877d_0ecb943b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 970,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-17T21:19:59Z",
      "side": 1,
      "message": "\"In the example above, I believe the wording of the spec means that priorities in [0, 0.33) should fall in hw priority 0, (0.33, 0.66) should fall in hw priority 1 and (0.66, 1] should fall in hw priority 2.\"\nI agree with this, personally - round to nearest. So I think we should avoid guessing a round up, or round down. Just use 0.5 for medium when there are 3 or more levels.",
      "parentUuid": "94cdbddf_b5edc0b6",
      "range": {
        "startLine": 970,
        "startChar": 40,
        "endLine": 970,
        "endChar": 62
      },
      "revId": "924e9a574fd2026bec37c690f79ceae171575236",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}