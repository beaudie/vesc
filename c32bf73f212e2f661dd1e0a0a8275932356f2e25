{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "efe2f79f_2eaad2fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T17:14:38Z",
      "side": 1,
      "message": "PTAL",
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7530a76_3e0d307b",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T17:27:21Z",
      "side": 1,
      "message": "There is a copy constructor below, so this doesn\u0027t make much sense.\n\nAlso, since `mRefCounted` is a pointer, there is no reason why std::move cannot be implemented, that would be better than copy.",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebe77540_a286be9d",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T17:40:30Z",
      "side": 1,
      "message": "\u003e There is a copy constructor below ... there is no reason why std::move cannot be implemented\n\nwell, my intent with the copy constructor is more along the lines of a `std::make_shared`. each copy increases refCount of underlying shared object. I did not forsee a usecase where a move constructor made sense but i can add it if you a use for it\n\n\u003e that would be better than copy\n\nfor some context, i plan on pulling out the common code from warmup into a prep-for-warmup method where i create all common state along with the throw-away-renderPass. Then with `AtomicShared\u003cRenderPass\u003e` as the member in `WarmUpTask` i can deduplicate renderpass creation and safely destroy it when last reference is removed by the task that finishes last",
      "parentUuid": "e7530a76_3e0d307b",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd7fa6c3_42c52387",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T17:49:46Z",
      "side": 1,
      "message": "\u003e i can deduplicate renderpass creation and safely destroy it when last reference is removed by the task that finishes last\n\nYou don\u0027t actually need the render pass for the pre-rasterization pipeline, do you?",
      "parentUuid": "ebe77540_a286be9d",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a15dd267_442244fa",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T17:51:59Z",
      "side": 1,
      "message": "\u003e You don\u0027t actually need the render pass for the pre-rasterization pipeline, do you?\n\nit is needed, i sent an email a while back showing new layout of `GraphicsPipelineDesc`. RP is needed by pre-rast and frag",
      "parentUuid": "cd7fa6c3_42c52387",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99637d80_ba562628",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T18:47:17Z",
      "side": 1,
      "message": "Ugh, ok. I\u0027m just trying to figure out if there\u0027s a good point in time where the render pass could be destroyed without having to do ref counting. Let me think it over.\n\nThanks for the description by the way, I was wondering what exactly you need this for.",
      "parentUuid": "a15dd267_442244fa",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8728a806_7024799a",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T18:49:55Z",
      "side": 1,
      "message": "FWIW, one easy solution is to make `Program::waitForOptionalLinkTasks` call `mProgram-\u003esome_new_function_like_postOptionalLinkTasksDone` to do the cleanup. Then you won\u0027t need any tracking (and no need for this class), right?",
      "parentUuid": "99637d80_ba562628",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "329aeb7e_69ffaaa0",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T19:50:04Z",
      "side": 1,
      "message": "that would require we cache the throwAwayRenderPass in `ProgramVk` and i chose to avoid caching since the refCounted approach seemed a lot more cleaner and closer to the intent of the already present `vk::Shared` type",
      "parentUuid": "8728a806_7024799a",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b358d4be_59978251",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T20:30:22Z",
      "side": 1,
      "message": "Ok I concede. Can\u0027t wait to switch to dynamic rendering and leave all this behind :-S",
      "parentUuid": "329aeb7e_69ffaaa0",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed455e9_eb655d15",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T20:36:16Z",
      "side": 1,
      "message": "\u003e switch to dynamic rendering\n\nis there someone already working on this? is there a bug tracking it?",
      "parentUuid": "b358d4be_59978251",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa8aa444_fc0d98cd",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T20:58:00Z",
      "side": 1,
      "message": "No, I was waiting for dynamic_rendering_local_read, which is pretty new so there\u0027s little time pressure to implement dynamic rendering in ANGLE.\n\nBut at some point we should do that. I just created anglebug.com/8605 to track that",
      "parentUuid": "8ed455e9_eb655d15",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20a34ba4_df82f436",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 871,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T21:00:04Z",
      "side": 1,
      "message": "thanks, will update when i have some resources",
      "parentUuid": "fa8aa444_fc0d98cd",
      "range": {
        "startLine": 871,
        "startChar": 27,
        "endLine": 871,
        "endChar": 45
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0b793fd_2aa8cf48",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T17:27:21Z",
      "side": 1,
      "message": "I think you don\u0027t need this, because `AtomicRefCounted` is not movable already.",
      "range": {
        "startLine": 886,
        "startChar": 0,
        "endLine": 887,
        "endChar": 59
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c947b583_0ad74389",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-11T17:40:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f0b793fd_2aa8cf48",
      "range": {
        "startLine": 886,
        "startChar": 0,
        "endLine": 887,
        "endChar": 59
      },
      "revId": "c32bf73f212e2f661dd1e0a0a8275932356f2e25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}