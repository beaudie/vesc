{
  "comments": [
    {
      "key": {
        "uuid": "e8cf4936_06849d83",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "I\u0027d add a comment about how this is \"initially\" done for PixelUnpack, but may be used in other use-cases in the future.",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46d8b8cf_521ac130",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "e8cf4936_06849d83",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c64b2a_d8d72094",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 169,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-26T20:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46d8b8cf_521ac130",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf2131a0_26dfbc3c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 293,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "Can you write a test for this scenario? There are better solutions for this, like copy to a temp buffer and read back and apply that buffer on next map (if waiting is actually necessary), in hopes of avoiding the wait.\n\nBut I\u0027m guessing this code doesn\u0027t have any users (so optimizing it is low priority), so just a test to make sure it\u0027s working correctly is enough.",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c200159_9238dcbf",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 293,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "\u003e so optimizing it is low priority\n\nyes, deferred until it shows up as a hotspot or i have a lot of bandwidth.\n\n\u003e so just a test to make sure it\u0027s working correctly is enough.\n\nwill do",
      "parentUuid": "cf2131a0_26dfbc3c",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aff8e596_7fb6da6b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 293,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-26T20:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c200159_9238dcbf",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "feb09ead_0b3d2880",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "Move before the `if` and use the same variable in both branches. nit: Also parentheses in `x \u003d (y);` are unnecessary.",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "962128be_40572529",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "\u003e Move before the `if` and use the same variable in both branches\n\nbut \"unsynchronizedMap\" is an argument for the onMapBuffer(...) as well\n\n\u003e Also parentheses in `x \u003d (y);` are unnecessary.\n\n\"bool unsynchronizedMap \u003d (access \u0026 GL_MAP_UNSYNCHRONIZED_BIT) !\u003d 0;\" looks a little naked",
      "parentUuid": "feb09ead_0b3d2880",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c864574_b8e89da3",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-25T03:51:27Z",
      "side": 1,
      "message": "\u003e but \"unsynchronizedMap\" is an argument for the onMapBuffer(...) as well\n\nHence why I said use it in both branches. The same logic (that is `(access \u0026 GL_MAP_UNSYNCHRONIZED_BIT) !\u003d 0`) is calculated in both branches. Also make it const, why not.\n\n\u003e \"bool unsynchronizedMap \u003d (access \u0026 GL_MAP_UNSYNCHRONIZED_BIT) !\u003d 0;\" looks a little naked\n\nI guess that really depends on how used to the precedence rules you are. Like you wouldn\u0027t parenthesize a*b+c*d, because then the parentheses become clutter. Anyway, it was just a nit, either way is fine.",
      "parentUuid": "962128be_40572529",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f148c238_86c71f99",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c864574_b8e89da3",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1af285_01dc0751",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "same nit for `f(a, (b), c);`",
      "range": {
        "startLine": 370,
        "startChar": 54,
        "endLine": 370,
        "endChar": 88
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72db2355_39762260",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "same as above, i can change if you really want it",
      "parentUuid": "3a1af285_01dc0751",
      "range": {
        "startLine": 370,
        "startChar": 54,
        "endLine": 370,
        "endChar": 88
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d09f949_f6b88e74",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72db2355_39762260",
      "range": {
        "startLine": 370,
        "startChar": 54,
        "endLine": 370,
        "endChar": 88
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd72790_aa9f9a11",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "Add test: Map the buffer once with UNSYNCHRONIZED, modify it, and then map again without it, and ensure the latest contents are available.",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7678b8ff_94546378",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "8fd72790_aa9f9a11",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1120f9e3_d4776150",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-25T03:51:27Z",
      "side": 1,
      "message": "Also, why not always take the path of mapping the CPU buffer? unmap needs to synchronize the two anyway, so what\u0027s the difference? CPU access to CPU buffer is more (or equally) efficient to access to GPU buffer, so performance-wise it would be better to map the CPU buffer, don\u0027t you agree?",
      "parentUuid": "7678b8ff_94546378",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b8806ed_b672476e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "CPU buffer will always reflect the most recent data, including data in not-yet-submitted GPU commands. When an unsynchronized map is requested it is specifically saying ignore the \"not-yet-submitted\" data and give me the buffer as-is. We need to return the GPU buffer to be functionally correct.",
      "parentUuid": "1120f9e3_d4776150",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94ddbc84_4a1244fb",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-26T20:27:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b8806ed_b672476e",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e08d2844_1755c964",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-27T10:02:10Z",
      "side": 1,
      "message": "The spec says (for MAP_UNSYNCHRONIZED_BIT):\n\n\u003e No GL error is generated if pending operations which source or modify the buffer overlap the mapped region, but the result of such previous and any subsequent operations is undefined\n\nWhich means both returning the most up-to-date data or the old data are correct.\n\nThe intent of GL_MAP_UNSYNCHRONIZED_BIT is for the application to the tell the driver it has already taken care of any necessary synchronization (at which point both the CPU and GPU buffers must necessarily be the same for the mapped region), otherwise the application gets undefined behavior.\n\nMy suggestion is to keep it simple and always return the CPU buffer.",
      "parentUuid": "94ddbc84_4a1244fb",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb288bb7_6c9a37ef",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 379,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-28T01:01:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e08d2844_1755c964",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c34a0c1_abc6607e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 489,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "will remove this todo. i am assuming this CPU only buffer is what jamie had in mind.\notherwise please let me know jamie",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06e1bc7b_ef8c6718",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 489,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c34a0c1_abc6607e",
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1de8cfe7_4b82c278",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "What\u0027s `n`?",
      "range": {
        "startLine": 167,
        "startChar": 68,
        "endLine": 167,
        "endChar": 72
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36460962_20ce77d9",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "number of in-flight commands and however long we need to wait for all of them to complete",
      "parentUuid": "1de8cfe7_4b82c278",
      "range": {
        "startLine": 167,
        "startChar": 68,
        "endLine": 167,
        "endChar": 72
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a034229d_c37a9ef8",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-25T03:51:27Z",
      "side": 1,
      "message": "I\u0027d just call it non-blocking, i.e. \"glMap* call becomes a non-blocking operation\", or if it\u0027s not obvious, explain that there won\u0027t be a wait on GPU.",
      "parentUuid": "36460962_20ce77d9",
      "range": {
        "startLine": 167,
        "startChar": 68,
        "endLine": 167,
        "endChar": 72
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ea8cfca_165d8438",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 2
      },
      "lineNbr": 167,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a034229d_c37a9ef8",
      "range": {
        "startLine": 167,
        "startChar": 68,
        "endLine": 167,
        "endChar": 72
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94a53e9b_a1e413fa",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-24T19:17:29Z",
      "side": 1,
      "message": "C++ memory management (new/delete) already implement free lists or whatever other algorithm they may find to be efficient. There\u0027s no point in implementing here. You should be able to just new[] and delete[] and let the standard library deal with it.",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 43
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b949b83_5a439a5c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-24T21:22:56Z",
      "side": 1,
      "message": "the reason i kept that is for a future scenario where we can potentially call \"allocate\" again and get a fresh new CPU only buffer with the same size in case a map was called with invalidate access bit.",
      "parentUuid": "94a53e9b_a1e413fa",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 43
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ff2fdd_4bfe654e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-25T03:51:27Z",
      "side": 1,
      "message": "I understand. new/delete also consider such scenarios (and they have had many years of development and optimization gone in them). Unless anybody else has a strong feeling about this, my suggestion would be to leave allocation to new/delete until we have a reason not to (like some particular pattern happens frequently that we want to specifically optimize for or something).",
      "parentUuid": "5b949b83_5a439a5c",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 43
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "587ef04a_4ce72800",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 222,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-25T22:24:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6ff2fdd_4bfe654e",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 222,
        "endChar": 43
      },
      "revId": "847257c87a0102ce66019b3df899f729caf9e0f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}