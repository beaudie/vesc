{
  "comments": [
    {
      "key": {
        "uuid": "4a77b27d_47349fdd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Can you add a line with Test: and include how you run this test?",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea73ae94_eb578d3b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a77b27d_47349fdd",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfe09496_5c26884c",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3859,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Rather than const_cast, you can update serializeState to accept a const context.",
      "range": {
        "startLine": 3859,
        "startChar": 23,
        "endLine": 3859,
        "endChar": 33
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b46ae249_c7dda5b9",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3859,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "I think I will need a non-const context because I will be reading from buffers and framebuffers so I need to bind them to the read buffer. A const context doesn\u0027t allow me to do that. But this code wont be added to this cl anyway",
      "parentUuid": "bfe09496_5c26884c",
      "range": {
        "startLine": 3859,
        "startChar": 23,
        "endLine": 3859,
        "endChar": 33
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43688915_5bb4971a",
        "filename": "src/libANGLE/FrameCapture.h",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "I don\u0027t think you need to add anything to FrameCapture for the test script.  Let\u0027s defer adding these in this CL.",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 23
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2b7bb6_ca38478a",
        "filename": "src/libANGLE/FrameCapture.h",
        "patchSetId": 6
      },
      "lineNbr": 300,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43688915_5bb4971a",
      "range": {
        "startLine": 300,
        "startChar": 9,
        "endLine": 300,
        "endChar": 23
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e887d8d_18eeb3b8",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "2020",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4af3ecc_e8d7e50d",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e887d8d_18eeb3b8",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f85a4764_e53073fd",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "These preprocessor macros are common with the sample.  Can we move them to frame_capture_utils.h?",
      "range": {
        "startLine": 18,
        "startChar": 8,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d65b470_4e33324b",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 18,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f85a4764_e53073fd",
      "range": {
        "startLine": 18,
        "startChar": 8,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1cdb205_d8dafb44",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "whitespace",
      "range": {
        "startLine": 106,
        "startChar": 67,
        "endLine": 106,
        "endChar": 68
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16a6a73d_19d0ea4b",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1cdb205_d8dafb44",
      "range": {
        "startLine": 106,
        "startChar": 67,
        "endLine": 106,
        "endChar": 68
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e9adff9_103a9214",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.h",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "2020",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad1831cb_be583ea1",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.h",
        "patchSetId": 6
      },
      "lineNbr": 2,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e9adff9_103a9214",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "055cc924_9f618e79",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Based",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 8
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd793710_b79bddbc",
        "filename": "src/tests/capture_replay_tests/CaptureReplayTest.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "055cc924_9f618e79",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 8
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d67e9ef4_063638ff",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Need a license header in here and a description of the file.",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b7ba7c0_b621613f",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d67e9ef4_063638ff",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5682eeb6_abe9987a",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Can you add a block of comments in here that replicate what you put in the CL message?\n\nAlso, can you add a description of what pass/fail for the script might mean?  I\u0027m guessing that every test must run, capture, compile, and replay without error to pass the test.",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7149331d_1e746698",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 5,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5682eeb6_abe9987a",
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f189cc_04809067",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "We\u0027ll want this to be flexible since we all put our own flavor on the directory names.  Okay to have this as default, but can it be a parameter?",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ea12494_7cd84e4b",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2f189cc_04809067",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 28
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "965b592f_045f6d4b",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Can you bring the definition of this down closer to the use?",
      "range": {
        "startLine": 75,
        "startChar": 11,
        "endLine": 75,
        "endChar": 30
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ba618cd_fc0f6ae6",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "965b592f_045f6d4b",
      "range": {
        "startLine": 75,
        "startChar": 11,
        "endLine": 75,
        "endChar": 30
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a42de555_1c6a8dcd",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "This is a bit confusing.  Can you provide an example here for why this is needed?",
      "range": {
        "startLine": 84,
        "startChar": 12,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a0bf277_23087755",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "So gtest_listest returns the test in this format\n```\ntest case\n    test name1\n    test name2\n    test name3\n```\nSo to run angle_end2end with gtest_filter for a single test I need both test case and test name so I can concatenate them like this: test_case.test_name.That\u0027s why I need to keep track of the last test case.",
      "parentUuid": "a42de555_1c6a8dcd",
      "range": {
        "startLine": 84,
        "startChar": 12,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d555eed6_08007dbc",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-16T16:29:57Z",
      "side": 1,
      "message": "Can you include that in the comments?",
      "parentUuid": "0a0bf277_23087755",
      "range": {
        "startLine": 84,
        "startChar": 12,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7f7140c_dd940fd8",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "This function is just running the test, nothing specific for capturing.  Can we just name it Run?  That or move the assignment of ANGLE_CAPTURE_ENABLED into the function.",
      "range": {
        "startLine": 91,
        "startChar": 26,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fa20e1_bd2653ba",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 91,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7f7140c_dd940fd8",
      "range": {
        "startLine": 91,
        "startChar": 26,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fe13fc2_d9a6ad2a",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "Can you also move the assignment of this value down to easily see it?",
      "range": {
        "startLine": 92,
        "startChar": 11,
        "endLine": 92,
        "endChar": 39
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d032916_786afe97",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fe13fc2_d9a6ad2a",
      "range": {
        "startLine": 92,
        "startChar": 11,
        "endLine": 92,
        "endChar": 39
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86b07c64_fd75b2c3",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-15T22:28:50Z",
      "side": 1,
      "message": "This is interesting. Current we only create captures for applications that render frames. Unrelated to this CL, but we might want to add an extension that allows starting and ending captures for smaller sequences.",
      "range": {
        "startLine": 97,
        "startChar": 19,
        "endLine": 97,
        "endChar": 73
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e096a1cd_11937d2b",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-16T13:05:34Z",
      "side": 1,
      "message": "I thought we only capture applications that have GL calls? Do you mean we also want to capture EGL calls as well?",
      "parentUuid": "86b07c64_fd75b2c3",
      "range": {
        "startLine": 97,
        "startChar": 19,
        "endLine": 97,
        "endChar": 73
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2606b67_6313fd46",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-06-16T16:29:57Z",
      "side": 1,
      "message": "I\u0027m referring to GL calls, but some content makes GL calls without rendering frames.  Specifically, I\u0027m seeing games upload textures on separate contexts that don\u0027t render.  We don\u0027t handle those with FrameCapture currently.  I would guess there are end2end tests that do that.",
      "parentUuid": "e096a1cd_11937d2b",
      "range": {
        "startLine": 97,
        "startChar": 19,
        "endLine": 97,
        "endChar": 73
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54bc855d_b440e183",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-16T19:06:54Z",
      "side": 1,
      "message": "It\u0027s probably better to check for existence of the output file than checking the stdout. Seems fine to skip if the output files don\u0027t exist. However the stdout might change.",
      "parentUuid": "e096a1cd_11937d2b",
      "range": {
        "startLine": 97,
        "startChar": 19,
        "endLine": 97,
        "endChar": 73
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec17f81a_30cecbd0",
        "filename": "src/tests/run_tests_with_framecapture.py",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-17T13:51:18Z",
      "side": 1,
      "message": "The problem with that is that the output files of previous tests are already there. What do you think if I delete the files after I compiled?",
      "parentUuid": "54bc855d_b440e183",
      "range": {
        "startLine": 97,
        "startChar": 19,
        "endLine": 97,
        "endChar": 73
      },
      "revId": "3a8b89502285b9958fa418afd7ee867c8ea83354",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}