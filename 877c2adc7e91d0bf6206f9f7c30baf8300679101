{
  "comments": [
    {
      "key": {
        "uuid": "c65388f0_7e45a2b1",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-23T03:08:46Z",
      "side": 1,
      "message": "Like we saw, this actually ends up setting the dirty bit for front face. I believe the test fails because `updateFlipViewportDrawFramebuffer()` is not yet called when the front face dirty bit is handled, so the front face is actually always set to the opposite of what it should be here (both in the case of user to default change and back). That is:\n\n    Set User FBO -\u003e flip \u003d false\n    \u003cclear\u003e\n    Handle Dirty Face -\u003e use false flip\n    Handle Dirty FBO (Default) -\u003e flip \u003d true\n    \u003cdraw\u003e\n    Handle Dirty Face -\u003e use flip \u003d true\n    Handle Dirty FBO (User) -\u003e flip \u003d false\n\nThis breaks because \"Handle Dirty Face\" is using the previous framebuffer\u0027s cached flip flag.\n\nAnd the reason why the test passes if you move this call to before the first draw call (without the fix in ContextVk.cpp) is that then what you get is:\n\n    Set User FBO -\u003e flip \u003d false\n    \u003cclear\u003e\n    Handle Dirty Face -\u003e use false flip\n    Handle Dirty FBO (Default) -\u003e flip \u003d true\n    \u003cdraw\u003e\n    Handle Dirty FBO (User) -\u003e flip \u003d false\n\nNote that the last time front face was set, it was using false flip and it\u0027s not updated since.\n\nI believe you could have caught this error if you didn\u0027t disable culling for the first draw call, but just made sure the winding of the vertices used for the draw are opposite the winding that\u0027s being culled.\n\nAlternatively, you could set `glCullFace` to `GL_FRONT` or `GL_BACK` based on whether the front face is `GL_CCW` or `GL_CW`, knowing the winding of the vertices drawQuad uses, so that the first draw call is never culled. Does that make sense?",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5067d884_e5140e91",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-05-23T17:04:01Z",
      "side": 1,
      "message": "Cool, sounds like we have two approaches to these tests.   I\u0027m going to keep this one since it seems to work.\n\nAre there other variations that anyone thinks we should add?",
      "parentUuid": "c65388f0_7e45a2b1",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf0d99ba_4ee4bba7",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-23T17:45:19Z",
      "side": 1,
      "message": "Could you add a flag to this function to either:\n\n1. Disable culling on first draw + glFrontFace on second draw\n2. glFrontFace on first draw, appropriate winding on first draw so its never culled. Fixed winding on the second draw.\n\nThen add four TEST_P instances below instead of 2 for all combinations.\n\nThe test you already have is a good test and catches one bug, but it doesn\u0027t catch a second bug (where not having glFrontFace dirty in the second draw should also fail).",
      "parentUuid": "5067d884_e5140e91",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ece6e1c_a38a052c",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-05-23T20:04:13Z",
      "side": 1,
      "message": "I think the tests are already doing what\u0027s described in (1), so I don\u0027t understand what changes to make here.\n\n\nFor (2), I think you\u0027re describing replacing:\n    glDisable(GL_CULL_FACE);\nwith:\n    glEnable(GL_CULL_FACE);\n    glCullFace(GL_BACK);\n    glFrontFace(GL_CCW);\nso the quad is not culled.   And then for the second draw, always use GL_CCW to make sure it draws again.   Is that correct?",
      "parentUuid": "bf0d99ba_4ee4bba7",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "771ff9b1_8b2f881c",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-24T12:54:43Z",
      "side": 1,
      "message": "Something along these lines:\n\n     void SimpleStateChangeTest::drawToFboWithCulling(const GLenum frontFace, bool earlyFrontFace)\n\t...\n\n        glBindFramebuffer(GL_FRAMEBUFFER, fbo1);\n\tif (earlyFrontFace)\n        {\n\t    glEnable(GL_CULL_FACE);\n            // TODO: the order of GL_BACK and GL_FRONT may be wrong here\n            glCullFace(frontFace \u003d\u003d GL_CW ? GL_BACK : GL_FRONT);\n            glFrontFace(frontFace);\n        }\n        else\n        {\n\t    glDisable(GL_CULL_FACE);\n        }\n        glUseProgram(greenProgram);\n        drawQuad(greenProgram.get(), std::string(essl1_shaders::PositionAttrib()), 0.0f);\n        ASSERT_GL_NO_ERROR();\n        EXPECT_PIXEL_COLOR_EQ(0, 0, GLColor::green);\n\n        // Draw into FBO 0 using FBO 1\u0027s texture to determine if culling is working or not\n        glBindFramebuffer(GL_FRAMEBUFFER, 0);\n        glBindTexture(GL_TEXTURE_2D, texture1);\n        // Set the culling we want to test\n\tglCullFace(GL_BACK);\n\tif (!earlyFrontFace)\n        {\n\t    glEnable(GL_CULL_FACE);\n            glFrontFace(frontFace);\n        }\n\nNote that the first `glCullFace` is dependent on `frontFace`, so that no matter which face is front, the first draw is not culled. The second `glCullFace` is always `GL_BACK`.",
      "parentUuid": "5ece6e1c_a38a052c",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68a6c076_cec5bba1",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-05-24T22:34:14Z",
      "side": 1,
      "message": "Here are the results of those tests without the ContextVk.cpp fix (to show they can catch the bug):\n\n[----------] 4 tests from SimpleStateChangeTest\n[ RUN      ] SimpleStateChangeTest.FboEarlyCullFaceBackCCWState/ES2_Vulkan\n../../third_party/angle/src/tests/gl_tests/StateChangeTest.cpp:3584: Failure\nExpected equality of these values:\n  GLColor::green\n    Which is: Green\n  angle::ReadColor(0, 0)\n    Which is: Transparent Black\nStack trace:\n#0 0x7f13d44529f8 base::debug::StackTrace::StackTrace()\n#1 0x562e30d0b240 StackTraceGetter::CurrentStackTrace()\n#2 0x562e30d1dc9c testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop()\n#3 0x562e30d1d819 testing::internal::AssertHelper::operator\u003d()\n#4 0x562e309f9640 (anonymous namespace)::SimpleStateChangeTest::drawToFboWithCulling()\n#5 0x562e309f8e12 (anonymous namespace)::SimpleStateChangeTest_FboEarlyCullFaceBackCCWState_Test::TestBody()\n\n../../third_party/angle/src/tests/gl_tests/StateChangeTest.cpp:3604: Failure\nExpected equality of these values:\n  GLColor::green\n    Which is: Green\n  angle::ReadColor(0, 0)\n    Which is: Black\nStack trace:\n#0 0x7f13d44529f8 base::debug::StackTrace::StackTrace()\n#1 0x562e30d0b240 StackTraceGetter::CurrentStackTrace()\n#2 0x562e30d1dc9c testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop()\n#3 0x562e30d1d819 testing::internal::AssertHelper::operator\u003d()\n#4 0x562e309f9903 (anonymous namespace)::SimpleStateChangeTest::drawToFboWithCulling()\n#5 0x562e309f8e12 (anonymous namespace)::SimpleStateChangeTest_FboEarlyCullFaceBackCCWState_Test::TestBody()\n\n[  FAILED  ] SimpleStateChangeTest.FboEarlyCullFaceBackCCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan (1355 ms)\n[ RUN      ] SimpleStateChangeTest.FboEarlyCullFaceBackCWState/ES2_Vulkan\n../../third_party/angle/src/tests/gl_tests/StateChangeTest.cpp:3584: Failure\nExpected equality of these values:\n  GLColor::green\n    Which is: Green\n  angle::ReadColor(0, 0)\n    Which is: Transparent Black\nStack trace:\n#0 0x7f13d44529f8 base::debug::StackTrace::StackTrace()\n#1 0x562e30d0b240 StackTraceGetter::CurrentStackTrace()\n#2 0x562e30d1dc9c testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop()\n#3 0x562e30d1d819 testing::internal::AssertHelper::operator\u003d()\n#4 0x562e309f9640 (anonymous namespace)::SimpleStateChangeTest::drawToFboWithCulling()\n#5 0x562e309f9f82 (anonymous namespace)::SimpleStateChangeTest_FboEarlyCullFaceBackCWState_Test::TestBody()\n\n[  FAILED  ] SimpleStateChangeTest.FboEarlyCullFaceBackCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan (768 ms)\n[ RUN      ] SimpleStateChangeTest.FboLateCullFaceBackCCWState/ES2_Vulkan\n../../third_party/angle/src/tests/gl_tests/StateChangeTest.cpp:3604: Failure\nExpected equality of these values:\n  GLColor::green\n    Which is: Green\n  angle::ReadColor(0, 0)\n    Which is: Red\nStack trace:\n#0 0x7f13d44529f8 base::debug::StackTrace::StackTrace()\n#1 0x562e30d0b240 StackTraceGetter::CurrentStackTrace()\n#2 0x562e30d1dc9c testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop()\n#3 0x562e30d1d819 testing::internal::AssertHelper::operator\u003d()\n#4 0x562e309f9903 (anonymous namespace)::SimpleStateChangeTest::drawToFboWithCulling()\n#5 0x562e309fa32f (anonymous namespace)::SimpleStateChangeTest_FboLateCullFaceBackCCWState_Test::TestBody()\n\n[  FAILED  ] SimpleStateChangeTest.FboLateCullFaceBackCCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan (785 ms)\n[ RUN      ] SimpleStateChangeTest.FboLateCullFaceBackCWState/ES2_Vulkan\n../../third_party/angle/src/tests/gl_tests/StateChangeTest.cpp:3608: Failure\nExpected equality of these values:\n  GLColor::red\n    Which is: Red\n  angle::ReadColor(0, 0)\n    Which is: Green\nStack trace:\n#0 0x7f13d44529f8 base::debug::StackTrace::StackTrace()\n#1 0x562e30d0b240 StackTraceGetter::CurrentStackTrace()\n#2 0x562e30d1dc9c testing::internal::UnitTestImpl::CurrentOsStackTraceExceptTop()\n#3 0x562e30d1d819 testing::internal::AssertHelper::operator\u003d()\n#4 0x562e309f99ce (anonymous namespace)::SimpleStateChangeTest::drawToFboWithCulling()\n#5 0x562e309fa6df (anonymous namespace)::SimpleStateChangeTest_FboLateCullFaceBackCWState_Test::TestBody()\n\n[  FAILED  ] SimpleStateChangeTest.FboLateCullFaceBackCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan (785 ms)\n[----------] 4 tests from SimpleStateChangeTest (3693 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 4 tests from 1 test suite ran. (3693 ms total)\n[  PASSED  ] 0 tests.\n[  FAILED  ] 4 tests, listed below:\n[  FAILED  ] SimpleStateChangeTest.FboEarlyCullFaceBackCCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan\n[  FAILED  ] SimpleStateChangeTest.FboEarlyCullFaceBackCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan\n[  FAILED  ] SimpleStateChangeTest.FboLateCullFaceBackCCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan\n[  FAILED  ] SimpleStateChangeTest.FboLateCullFaceBackCWState/ES2_Vulkan, where GetParam() \u003d ES2_Vulkan\n\n\nMy concern is that both early culling tests fail with \u0027black\u0027 and \u0027transparent black\u0027, since it means nothing is being drawn and the buffers can actually contain any random value, including the GLColor::green we are looking for (leading to a false pass).   That may be fine though, and  why the EXPECT_PIXEL_COLOR_EQ() checks are in there along the way anyway.",
      "parentUuid": "771ff9b1_8b2f881c",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adff24c1_23c355d9",
        "filename": "src/tests/gl_tests/StateChangeTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3580,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-27T13:45:02Z",
      "side": 1,
      "message": "Thank you for the added tests!\n\nSomething that eventually might need to happen is reordering the dirty bits so that FBO-dirty is handled before face-dirty, as otherwise we are setting the face value twice with different values (resulting in more pipeline-hash dirtiness). Doing that would make two of these four tests pass (the Late variants). That\u0027s why I insisted on having all four tests :)\n\n\nNot asking you to do that, though.\n\n---\n\nGetting black in the Early variants is definitely a problem. Probably `frontFace \u003d\u003d GL_CW ? GL_BACK : GL_FRONT` is wrong and should be the opposite `frontFace \u003d\u003d GL_CW ? GL_FRONT : GL_BACK`?",
      "parentUuid": "68a6c076_cec5bba1",
      "range": {
        "startLine": 3580,
        "startChar": 4,
        "endLine": 3580,
        "endChar": 27
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1611a131_93127cf1",
        "filename": "util/shader_utils.h",
        "patchSetId": 16
      },
      "lineNbr": 92,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-23T03:08:46Z",
      "side": 1,
      "message": "The shader no longer swizzles.",
      "range": {
        "startLine": 92,
        "startChar": 3,
        "endLine": 92,
        "endChar": 65
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271307bb_0a1f869e",
        "filename": "util/shader_utils.h",
        "patchSetId": 16
      },
      "lineNbr": 92,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-05-23T17:04:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1611a131_93127cf1",
      "range": {
        "startLine": 92,
        "startChar": 3,
        "endLine": 92,
        "endChar": 65
      },
      "revId": "877c2adc7e91d0bf6206f9f7c30baf8300679101",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}