{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4d01ab75_99952fb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-19T22:00:45Z",
      "side": 1,
      "message": "Comments, response.\nUpdate ready, but not uploaded. If you have feedback, I\u0027ll include that too.",
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2d36246_2c00cb30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-19T23:46:16Z",
      "side": 1,
      "message": "Comment",
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9526356_50070452",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-21T21:21:04Z",
      "side": 1,
      "message": "Feedback for for @Jamie.\n\nWorking fixes per Shahbaz. We upload when ready.",
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f963217c_b30a6c0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-21T22:58:58Z",
      "side": 1,
      "message": "Responses for Shahbaz.\nNot uploaded yet.",
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14aefc1d_738aed01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-25T22:18:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d01ab75_99952fb1",
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dee15c35_595aa6f5",
        "filename": "src/libANGLE/Surface.cpp",
        "patchSetId": 9
      },
      "lineNbr": 698,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-20T15:43:43Z",
      "side": 1,
      "message": "nit: use ANGLE_TRY",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 698,
        "endChar": 5
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ffb8255_c709d861",
        "filename": "src/libANGLE/Surface.cpp",
        "patchSetId": 9
      },
      "lineNbr": 698,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-21T21:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dee15c35_595aa6f5",
      "range": {
        "startLine": 694,
        "startChar": 0,
        "endLine": 698,
        "endChar": 5
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "586a63b6_0609b9fd",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2053,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-20T15:43:43Z",
      "side": 1,
      "message": "is this an implementation error? this ideally would be something we could catch in the validation layer, i.e. by rejecting this config somewhere before the call.",
      "range": {
        "startLine": 2048,
        "startChar": 0,
        "endLine": 2053,
        "endChar": 0
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03490f46_7b83e8cf",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2053,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-21T21:21:04Z",
      "side": 1,
      "message": "We don\u0027t have the supported presentations modes until we have a VkSurface. See WindowSurfaceVk::initializeImpl above. I\u0027m scanning the modes to be sure the one I need is supported. I think that is in a VU somewhere (need to find again). I was trying to limit the surfaceAttrib error to the validation but this seemed a requirement, and thus error code added. Lets dbl check on that requirement.\n\nHere:\n\"VUID-VkSwapchainCreateInfoKHR-presentMode-01281\npresentMode must be one of the VkPresentModeKHR values returned by vkGetPhysicalDeviceSurfacePresentModesKHR for the surface\"\n\nWhat do you think?",
      "parentUuid": "586a63b6_0609b9fd",
      "range": {
        "startLine": 2048,
        "startChar": 0,
        "endLine": 2053,
        "endChar": 0
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "169dfefb_ece16b58",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2053,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-10-25T22:02:09Z",
      "side": 1,
      "message": "Hi Jeff,\n\nI\u0027m going to start working again on a Vulkan extension that ANGLE needs, so we can query supported swapchain formats (and colorspaces) BEFORE ANGLE has a VkSurfaceKHR.  Seems like it would be good to add the ability to query present modes as well.  Correct?\n\nIan",
      "parentUuid": "03490f46_7b83e8cf",
      "range": {
        "startLine": 2048,
        "startChar": 0,
        "endLine": 2053,
        "endChar": 0
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "125b6cc9_f2bb6fd9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2053,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-25T22:18:33Z",
      "side": 1,
      "message": "In this particular case, there is a feature check from the driver to let us know that SHARED_PRESENTABLE_IMAGE is supported, so we enable the EGL extension. But, The spec also says/indicates need to check that the specific mode is supported. So I scan in the code to the right for that mode - if, Jamie also interprets the spec text that way too. So yes, if that mode available before VkSurface, then we could be certain and the scan would not be needed, and therefore no return error on fail, and then there would be no inconsistency with declaring support for the extension.\nI don\u0027t think its as necessary as other cases. Here we can return an error to the app, but, its not consistent with supporting the EGL extension so that could exit an application expecting success.",
      "parentUuid": "169dfefb_ece16b58",
      "range": {
        "startLine": 2048,
        "startChar": 0,
        "endLine": 2053,
        "endChar": 0
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75f11d0_2a1b40bf",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 9
      },
      "lineNbr": 623,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-10-20T15:43:43Z",
      "side": 1,
      "message": "can we not use a try macro here as well?",
      "range": {
        "startLine": 623,
        "startChar": 23,
        "endLine": 623,
        "endChar": 39
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "985d7b85_43076010",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 9
      },
      "lineNbr": 623,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-10-21T21:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c75f11d0_2a1b40bf",
      "range": {
        "startLine": 623,
        "startChar": 23,
        "endLine": 623,
        "endChar": 39
      },
      "revId": "94e4da15e1fb009fcd6ed992f0acd5baefe068b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}