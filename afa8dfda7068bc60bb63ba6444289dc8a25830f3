{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69d207a8_9b4b57da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-13T17:09:24Z",
      "side": 1,
      "message": "I thought the point was to make sure the traces are pure C, so C++ features don\u0027t creep it (which presumably the interpreter is unable to consume).",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f6d0353_32ae4f20",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-13T17:30:03Z",
      "side": 1,
      "message": "yeah, eventually we should switch the filenames to C, this CL is not a suggestion to keep them .cpp nor will it get in the way",
      "parentUuid": "69d207a8_9b4b57da",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f122b1b_77b6f218",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-04-13T19:37:34Z",
      "side": 1,
      "message": "The tracer is moving towards emitting pure C, but I don\u0027t believe it is there yet. \n I\u0027m actually okay allowing CPP parsing so that folks can continue to emit CPP traces for compilation and modification.  I don\u0027t think anyone wants to be limited to C when you start hacking a trace.\n \nThat being said, we want to continue progressing the pure C interpreter so all traces can be supported there.",
      "parentUuid": "3f6d0353_32ae4f20",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbdb3387_a685d4b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-13T19:57:28Z",
      "side": 1,
      "message": "The parser in its current state is nowhere close to supporting even a reasonable subset of C. It really only grabs the list of functions to call (no variables, no branching is supported) and makes a lot of trace-specific assumptions about the variables that can be passed to those functions.\n\nIMO restricting this to C won\u0027t help much - there\u0027s plenty of ways a totally valid and compile-able C file would break the parser. The way parser is currently written, even adding spaces in certain spots will break it.\n\nThe only benefit we get from renaming the output files to C is a bit more clarity that this is the intended format of the file (but given the constrains above, how much does this really help? also taking into account that we\u0027re running interpreter tests on CI so if something breaks the parser then presubmits will supposedly catch it)\n\nThat said, CPP vs C is quite out of scope of this CL. All I\u0027m trying to do here is gain the ability to run a few existing .cpp traces that are already in the latest format. We can always change course later. This CL is not binding in any way. This discussion should not be blocking this CL IMO.",
      "parentUuid": "1f122b1b_77b6f218",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 44
      },
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4989e375_22f01d10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-04-13T19:37:34Z",
      "side": 1,
      "message": "+1 in case Shabi has strong feelings about allowing CPP parsing.",
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803d92fe_5c2055eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-13T23:16:16Z",
      "side": 1,
      "message": "No objections from me",
      "revId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "afa8dfda7068bc60bb63ba6444289dc8a25830f3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}