{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f3424fe_4a6a1eb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-01-27T23:14:00Z",
      "side": 1,
      "message": "any other comments?",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25e6268d_b4fd8b32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-28T10:08:09Z",
      "side": 1,
      "message": "Coming together nicely!\n\nCould you please run the tests locally with the syncval change [1] applied? You may encounter other synchronization bugs we have (which you can ignore), but at least we can be notified if there\u0027s an issue with the synchronization here.\n\n[1]: https://chromium-review.googlesource.com/c/angle/angle/+/2297884\n",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d81550a8_284be7ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2021-01-29T07:31:55Z",
      "side": 1,
      "message": "Unfortunately, the newly added end2end tests failed with the syncval change. Error messages are like below.\n--------------------------\n../../src/tests/test_utils/ANGLETest.cpp(63): error: RendererVk.cpp:346 (DebugUtilsMessenger): [ SYNC-HAZARD-WRITE_AFTER_WRITE ] Validation Error: [ SYNC-HAZARD-WRITE_AFTER_WRITE ] Object 0: handle \u003d 0x310000000031, type \u003d VK_OBJECT_TYPE_IMAGE; | MessageID \u003d 0xfdf9f5e1 | vkCmdPipelineBarrier: Hazard WRITE_AFTER_WRITE for image barrier 0 VkImage 0x310000000031[]. Access info (usage: SYNC_IMAGE_LAYOUT_TRANSITION, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: 0, command: vkCmdEndRenderPass, seq_no: 7, reset_no: 1).\n                            Object: 0x310000000031 (type \u003d Image(10))\n--------------------------\n\nIt was not easy to debug syncval layer. but I think I found out a root cause of it.\nIn my change, I modify the layout of the color attachment image from VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL to VK_IMAGE_LAYOUT_GENERAL in case the program has framebuffer fetch.\n---------------------------\n@@ -934,7 +952,8 @@ angle::Result InitializeRenderPassFromDesc(ContextVk *contextVk,\n \n         VkAttachmentReference colorRef;\n         colorRef.attachment \u003d attachmentCount.get();\n--       colorRef.layout     \u003d VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n+        colorRef.layout     \u003d needInputAttachments ? VK_IMAGE_LAYOUT_GENERAL\n+                                               : VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n---------------------------\nThis seems to cause layout transition after color write operation and it leads to sync validation error in barrier check before readpixels.\n\nWhen I reverted this part then ignored the vulkan validation errors caused by bad layout type, all end2end tests passed.\n\nI don\u0027t have nice idea to avoid this problem with ANGLE modification. But how about we modify syncval layer not to set a usage flags to SYNC_IMAGE_LAYOUT_TRANSITION when source or dst layout is VK_IMAGE_LAYOUT_GENERAL? (though I can\u0027t find relevant code for it.)",
      "parentUuid": "25e6268d_b4fd8b32",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec7dbfa_8fff1bac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-29T10:30:12Z",
      "side": 1,
      "message": "I don\u0027t think ignoring this is really valid. Luckily this is fixable I believe.\n\nNote the following:\n\n- FramebufferVk::updateRenderPassDesc is called after the attachment layout transitions are issued.\n- FramebufferVk::onSwitchProgramFramebufferFetch is called:\n * after attachment layout transitions are issued, if render pass is started\n * if render pass not started, may or may not be issued after attachment layout transitions\n- ImageHelper::setCurrentImageLayout is made for this very purpose (a layout change implicitly done by the render pass)\n\nSo you can do the following:\n\n- Only in onSwitchProgramFramebufferFetch (and not syncState, which closes the render pass):\n  * **If render pass has started for current framebuffer**, also use setCurrentImageLayout to set the layout to GENERAL for color attachments if render pass desc is in fetch mode (note the bug in the other comment, shouldn\u0027t use `isFetchProgram`).\n- Make FramebufferVk::startNewRenderPass() set the layout of the attachments to GENERAL if the desc is in fetch mode.\n\nIn other words, the layouts are updated only when render pass starts (in case fetch mode is configured before the render pass) or in the middle of render pass. You should never update the layouts like this while the render pass is closed.",
      "parentUuid": "d81550a8_284be7ce",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c72ab00_5c05a76b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2021-02-01T05:34:05Z",
      "side": 1,
      "message": "I\u0027m confused.\nIn my code, onSwitchProgramFramebufferFetch() is called after the program executable/fetch mode is changed. Also render pass will be always closed because I call flushCommandsAndEndRenderPass() before I call onSwitchProgramFramebufferFetch().\nSo I don\u0027t understand most of your comment related to onSwitchProgramFramebufferFetch().",
      "parentUuid": "5ec7dbfa_8fff1bac",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195738ef_5eb511aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T15:02:50Z",
      "side": 1,
      "message": "Ok, then only the second bullet point should be enough: in FramebufferVk::startNewRenderPass set the layout of the attachments to GENERAL if the desc is in fetch mode. You can add an ASSERT in onSwitchProgramFramebufferFetch() that no render pass is open.\n\nThat said, I noticed another bug. See other comment.",
      "parentUuid": "2c72ab00_5c05a76b",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "492eb4ad_7b295975",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Shabi, almost all comments have been addressed except for synchronization validation layer error.\n\nHyunchang tried to resolve this as you suggested but did not make much progress. There is a gap in his understanding of Vulkan layout transitions blocking him for now. Can we land this change and address the VVL in a follow up change?",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96870632_b4379546",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-05T02:30:49Z",
      "side": 1,
      "message": "This seems to be invalid now that \"onSwitchProgramFramebufferFetch()\" no longer exists",
      "parentUuid": "195738ef_5eb511aa",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de6c237b_819f50ed",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4735,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "should be part of the executable save/load",
      "range": {
        "startLine": 4733,
        "startChar": 0,
        "endLine": 4735,
        "endChar": 0
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36ab5f3f_8c877a11",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4735,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de6c237b_819f50ed",
      "range": {
        "startLine": 4733,
        "startChar": 0,
        "endLine": 4735,
        "endChar": 0
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd9a658_e9bc4038",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4998,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "should be part of the executable save/load",
      "range": {
        "startLine": 4993,
        "startChar": 0,
        "endLine": 4998,
        "endChar": 0
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b4a7301_258369f3",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4998,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2fd9a658_e9bc4038",
      "range": {
        "startLine": 4993,
        "startChar": 0,
        "endLine": 4998,
        "endChar": 0
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a60e74_ea89ff64",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 373,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "nit: uses instead of has?",
      "range": {
        "startLine": 373,
        "startChar": 24,
        "endLine": 373,
        "endChar": 43
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9ba67c7_f5c01493",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 13
      },
      "lineNbr": 373,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70a60e74_ea89ff64",
      "range": {
        "startLine": 373,
        "startChar": 24,
        "endLine": 373,
        "endChar": 43
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b05d90_6d7b58d9",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2793,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "how about instead notify the fb of a program change, and let the FB check if the FBF mode matches or does not match the current RP\u0027s FBF setting? That way we can remove the extra state from ContextVk.",
      "range": {
        "startLine": 2793,
        "startChar": 30,
        "endLine": 2793,
        "endChar": 61
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78415e35_857fbcdf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2793,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "made the FB check FBF mode and removed onSwitchProgramFramebufferFetch. But we still need the state in ContextVK because we need to close RP in case of fetch mode switch.",
      "parentUuid": "f5b05d90_6d7b58d9",
      "range": {
        "startLine": 2793,
        "startChar": 30,
        "endLine": 2793,
        "endChar": 61
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afed32a9_9aca9c4a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2793,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-05T02:30:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "78415e35_857fbcdf",
      "range": {
        "startLine": 2793,
        "startChar": 30,
        "endLine": 2793,
        "endChar": 61
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27761092_2bf4cebd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 597,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "nit: _BARRIER",
      "range": {
        "startLine": 597,
        "startChar": 8,
        "endLine": 597,
        "endChar": 35
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4c1e65e_782d38af",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 597,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27761092_2bf4cebd",
      "range": {
        "startLine": 597,
        "startChar": 8,
        "endLine": 597,
        "endChar": 35
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ba372d5_52d646eb",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 1003,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "mLastProgramUsesFramebufferFetch, to make it consistent naming with other vars\n\nThough see other comments, we might not need this.",
      "range": {
        "startLine": 1003,
        "startChar": 9,
        "endLine": 1003,
        "endChar": 35
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57ad2ab9_e84104ea",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 1003,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ba372d5_52d646eb",
      "range": {
        "startLine": 1003,
        "startChar": 9,
        "endLine": 1003,
        "endChar": 35
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1f31b6_1a75c991",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1939,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-29T10:30:12Z",
      "side": 1,
      "message": "Looking again, I think this is not the best place for this. It would be more natural if this moved to FramebufferVk::startNewRenderPass I believe. For example if the framebuffer is synced for readback, blit etc, we don\u0027t need to modify the render pass desc with whatever unrelated program may be bound at the moment.",
      "range": {
        "startLine": 1931,
        "startChar": 0,
        "endLine": 1939,
        "endChar": 72
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cde2412f_28a747c8",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1939,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "startNewRP sounds reasonable to me. We only need FB fetch in a RP. It also looks out of place to me here.",
      "parentUuid": "ad1f31b6_1a75c991",
      "range": {
        "startLine": 1931,
        "startChar": 0,
        "endLine": 1939,
        "endChar": 72
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3e0f82d_c330a419",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1939,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cde2412f_28a747c8",
      "range": {
        "startLine": 1931,
        "startChar": 0,
        "endLine": 1939,
        "endChar": 72
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8d93ab9_f54b64e7",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T15:02:50Z",
      "side": 1,
      "message": "This function should early out if `this` is not the current draw framebuffer! If the READ framebuffer is synced, we don\u0027t want to be updating the graphics pipeline. Please also add an ASSERT(framebufferVk \u003d\u003d vk::GetImpl(mState.getDrawFramebuffer()));` in onDrawFramebufferRenderPassDescChange.\n\nA test to trigger the bug could be:\n\n- Create FBO1 with two attachments\n- Draw with fetch program (this syncs FBO1)\n- Create FBO2 with one attachments, initialize the attachment with glTexSubImage, bind as READ framebuffer\n- Blit src:FBO2 dst:FBO1 (this syncs FBO2 as READ framebuffer, no need to sync FBO1 cause not dirty. This function is called for FBO2 which mistakenly updates the graphics pipeline based on FBO2\u0027s desc)\n- Draw with fetch program again (FBO1 is not synced, so graphics pipeline is still based on FBO2\u0027s desc) -\u003e should fail with validation error as pipeline says only one attachment but draw FBO (FBO1) has two.",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4162e43_8ade8c3a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2733,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "moved this routine to startNewRP and got rid of onSwitchProgramFramebufferFetch function. So we don\u0027t need to worry about those case.",
      "parentUuid": "a8d93ab9_f54b64e7",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a56b0ac_668e7f06",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-03T19:36:56Z",
      "side": 1,
      "message": "Great. Please add the regression test as described to make sure we don\u0027t regress this in the future.",
      "parentUuid": "d4162e43_8ade8c3a",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6508cff7_81dc6d3b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2733,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-05T02:30:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a56b0ac_668e7f06",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d384fb7_21db61d9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-29T10:30:12Z",
      "side": 1,
      "message": "There\u0027s a bug here. Say the application does this:\n\n- Start RP\n- Draw without fetch mode\n * sets mHasFramebufferFetch \u003d false\n- Draw with fetch mode\n * sets mHasFramebufferFetch \u003d true\n- Draw without fetch mode\n * sets mHasFramebufferFetch \u003d false\n- End RP\n\nAt the end when we create the render pass, InitializeRenderPassFromDesc will set needInputAttachments \u003d false, so the image layouts would be COLOR_ATTACHMENT, and the input attachments not specified.\n\nYou can add an `updateFramebufferFetchMode` that says SetBitField(mHasFramebufferFetch, mHasFramebufferFetch || hasFramebufferFetch); to call in FramebufferVk::onSwitchProgramFramebufferFetch()\n\nPlease add a test as well.",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09be6014_ad7e8f3a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1336,
      "author": {
        "id": 1357791
      },
      "writtenOn": "2021-02-01T05:34:05Z",
      "side": 1,
      "message": "Is it possible sequence in my change? ANGLE breaks RP whenever the program fetch mode is changed. So I think there should be endRP, startRP between the fetch mode switch. Then nothing could be a problem.",
      "parentUuid": "7d384fb7_21db61d9",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb1d17c4_2b8f4184",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T15:02:50Z",
      "side": 1,
      "message": "Ok, then please add an `ASSERT(!mHasFramebufferFetch);` here to make sure the expectation is met. Also, a test if there isn\u0027t one already would be much appreciated.",
      "parentUuid": "09be6014_ad7e8f3a",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09be9d60_8244fc41",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1336,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "This function is called whenever the fetch mode is switched. So, assertion condition you wrote is not proper.",
      "parentUuid": "fb1d17c4_2b8f4184",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf23653d_201e2b04",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-03T19:36:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "09be9d60_8244fc41",
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ccf7a8b_7da166b4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1375,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-01-29T16:39:37Z",
      "side": 1,
      "message": "nit: can you fix these to use ! instead of \u003d\u003d false?",
      "range": {
        "startLine": 1375,
        "startChar": 10,
        "endLine": 1375,
        "endChar": 49
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e034acab_b2191660",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1375,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T18:07:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ccf7a8b_7da166b4",
      "range": {
        "startLine": 1375,
        "startChar": 10,
        "endLine": 1375,
        "endChar": 49
      },
      "revId": "c69f63e422c00a06fd1106f8566230aab9b1f000",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}