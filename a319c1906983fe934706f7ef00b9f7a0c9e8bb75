{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "115f0ce2_b7a16f0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-10T16:52:57Z",
      "side": 1,
      "message": "Charlie - PTAL",
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07aecac0_c22e6e75",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-10T21:22:07Z",
      "side": 1,
      "message": "Practically you will never run into usage case that people try to render into level other than 0. std::vector\u003cgl::RenderToTextureImageMap\u003cvk::ImageHelper\u003e\u003e might be better here. I am think you might able to just keep one mMultisampledImages and destroy it if renderTarget level changed. But I am not sure if it is allowed for two contexts to render into different level of the same tetxure simutanously? If no, then this will work and change will be much simpler. Otherwise, you will need to keep a vector of mMultisampledImages but std::vector still saves some memory (TexLevelArray is an array of 16 ImageHelper).",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a5736f4_d80f3bcf",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-10T23:33:37Z",
      "side": 1,
      "message": "how about we make `mMultisampledImages` store pointers to `ImageHelper` instead? then we can leave it as `gl::TexLevelArray`?",
      "parentUuid": "07aecac0_c22e6e75",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e280e98d_87fbb7ff",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-10T23:52:58Z",
      "side": 1,
      "message": "store pointer should be avoided in general. I thought std::vector should just work and easy to do, no?",
      "parentUuid": "4a5736f4_d80f3bcf",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd1a6b1b_288ad051",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-11T02:07:30Z",
      "side": 1,
      "message": "\u003e But I am not sure if it is allowed for two contexts to render into different level of the same tetxure simutanously?\n\nThat is a possibility. And as a test I requested and added here, you can even have the same framebuffer attach to multiple levels of the same texture.\n\nThe memory is indeed probably considerable. Using `std::vector` should work, `ImageHelper`s are `std::move`-able.",
      "parentUuid": "e280e98d_87fbb7ff",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd3ae67c_2240e25e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-11T12:59:31Z",
      "side": 1,
      "message": "i changed it to `std::vector\u003cgl::RenderToTextureImageMap\u003cvk::ImageHelper\u003e\u003e` but i continue to see the same error -\n```\n../../src/libANGLE/renderer/vulkan/TextureVk.cpp(2723,29): note: in instantiation of member function \u0027std::vector\u003cangle::PackedEnumMap\u003cgl::RenderToTextureImageIndex, rx::vk::ImageHelper\u003e\u003e::resize\u0027 requested here\n 2723 |         mMultisampledImages.resize(requestedLevel);\n      |                             ^\n../../third_party/libc++/src/include\\__memory/construct_at.h(47,58): note: candidate template ignored: substitution failure [with _Tp \u003d angle::PackedEnumMap\u003cgl::RenderToTextureImageIndex, rx::vk::ImageHelper\u003e, _Args \u003d \u003cangle::PackedEnumMap\u003cgl::RenderToTextureImageIndex, rx::vk::ImageHelper\u003e\u003e]: call to implicitly-deleted copy constructor of \u0027angle::PackedEnumMap\u003cgl::RenderToTextureImageIndex, rx::vk::ImageHelper\u003e\u0027\n   46 | template \u003cclass _Tp, class... _Args, class \u003d decltype(::new(std::declval\u003cvoid*\u003e()) _Tp(std::declval\u003c_Args\u003e()...))\u003e\n      |                                                                                    ~~~\n   47 | _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _Tp* __construct_at(_Tp* __location, _Args\u0026\u0026... __args) {\n      |                                                          ^\n2 errors generated.\nninja: build stopped: subcommand failed.\n```\n\nwhat am i missing?",
      "parentUuid": "e280e98d_87fbb7ff",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5842a9ab_9a91a352",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-11T13:04:44Z",
      "side": 1,
      "message": "`PackedEnumMap` is an array without a move operator (just copy). Does `gl::RenderToTextureImageMap\u003cstd::vector\u003cvk::ImageHelper\u003e\u003e` work?",
      "parentUuid": "dd3ae67c_2240e25e",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84fbced1_0be3ea1c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-11T13:09:01Z",
      "side": 1,
      "message": "\u003e Does gl::RenderToTextureImageMap\u003cstd::vector\u003cvk::ImageHelper\u003e\u003e work?\n\nthat is what i tried all the way in the beginning (leading me to the copy-constructor comment here -\u003e https://chromium-review.googlesource.com/c/angle/angle/+/5601347/8#message-160118946f090bb05c0e19f0ab61370e9bc9d91b)\n\ni get the same \"call to implicitly-deleted copy constructor\" error",
      "parentUuid": "5842a9ab_9a91a352",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddedbf1d_7d910f54",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 8
      },
      "lineNbr": 606,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-11T13:17:57Z",
      "side": 1,
      "message": "Ah ok, the ImageHelper\u0027s move constructor was removed in https://chromium-review.googlesource.com/c/angle/angle/+/4294905\n\nYou can bring it back",
      "parentUuid": "84fbced1_0be3ea1c",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 606,
        "endChar": 88
      },
      "revId": "a319c1906983fe934706f7ef00b9f7a0c9e8bb75",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}