{
  "comments": [
    {
      "key": {
        "uuid": "5605c031_6d7e2d4a",
        "filename": "src/libANGLE/Caps.cpp",
        "patchSetId": 14
      },
      "lineNbr": 676,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-01T14:55:48Z",
      "side": 1,
      "message": "Since the requested capabilities are identical, you can just use one array here:\n\n    constexpr GLenum formats[] \u003d {\n        GL_DEPTH_COMPONENT16,\n        GL_DEPTH_COMPONENT32_OES,\n    };\n\nAlso, where did you get these two formats from? Why not GL_DEPTH_COMPONENT24_OES for example?",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 676,
        "endChar": 6
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05c4e3cd_2f406dcd",
        "filename": "src/libANGLE/Caps.cpp",
        "patchSetId": 14
      },
      "lineNbr": 676,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "DONE",
      "parentUuid": "5605c031_6d7e2d4a",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 676,
        "endChar": 6
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1202c23_d5edd1c7",
        "filename": "src/libANGLE/Caps.cpp",
        "patchSetId": 14
      },
      "lineNbr": 676,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-02T17:08:11Z",
      "side": 1,
      "message": "OES_depth_texture only defines 16bit and 32bit depth components.",
      "parentUuid": "05c4e3cd_2f406dcd",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 676,
        "endChar": 6
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d30d5681_40954ed7",
        "filename": "src/libANGLE/Caps.cpp",
        "patchSetId": 14
      },
      "lineNbr": 676,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-03T20:45:35Z",
      "side": 1,
      "message": "My understanding is that it doesn\u0027t actually require any specific size. If you are referring to this:\n\n\u003e 3.  How should 24-bit depth texture data be represented when specified in TexImage2D and TexSubImage2D?\n\u003e     Resolution:  This is currently not supported.  Depth textures can be specified with 16-bit depth values i.e. \u003ctype\u003e \u003d UNSIGNED_SHORT or 32-bit depth values i.e. \u003ctype\u003e \u003d UNSIGNED_INT.\n\nThat\u0027s talking about the upload data format, not the actual texture format. The spec later on says:\n\n\u003e As per the OpenGL ES spec, there is no guarantee that the OpenGL ES implementation will use the \u003ctype\u003e to determine how to store the depth texture internally.  It may choose to downsample the 32-bit depth values to 16-bit or even 24-bit.\n\nThat basically means that the implementation is for example free to always use 16-bit depth. That means `GL_DEPTH_COMPONENT16` would be enough to declare support for that extension.\n\nIn other words, as long as any depth format can fallback to another (whether its 16 to 32, 32 to 24 etc), any single one of the three (16-, 24- or 32-bit depth) can enable this extension.\n\n---\n\nAlso, I just realized that my original comment here was wrong, since you were correctly doing `||` on the supported formats, while my suggestion would turn that into `\u0026\u0026` (so at least revert that)",
      "parentUuid": "d1202c23_d5edd1c7",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 676,
        "endChar": 6
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cd7f3f5_874c9aa7",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 794,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-01T14:55:48Z",
      "side": 1,
      "message": "It looks to me like they only support \"uploading\" 16- or 32-bit data, but otherwise the implementation is free to use a 24-bit format:\n\n\u003e As per the OpenGL ES spec, there is no guarantee that the OpenGL ES implementation \n\u003e will use the \u003ctype\u003e to determine how to store the depth texture internally.  \n\u003e It may choose to downsample the 32-bit depth values to 16-bit or even 24-bit.\n\u003e There is currently no way for the application to know or find out how the\n\u003e depth texture (or any texture) will be stored internally by the OpenGL ES implementation.",
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e60bf3_4c7d53ce",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 794,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "Yes, that\u0027s right. I had to take advantage of that in the implementation.\nI\u0027ll remove that comment, it doesn\u0027t help anything.",
      "parentUuid": "0cd7f3f5_874c9aa7",
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48613bfd_9ea62a3e",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 801,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-01T14:55:48Z",
      "side": 1,
      "message": "DEPTH24_STENCIL8 is introduced by `OES_packed_depth_stencil`, not `OES_depth_texture`.",
      "range": {
        "startLine": 801,
        "startChar": 226,
        "endLine": 801,
        "endChar": 241
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4500d556_1a68da9a",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 801,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48613bfd_9ea62a3e",
      "range": {
        "startLine": 801,
        "startChar": 226,
        "endLine": 801,
        "endChar": 241
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "494a1f9c_36da5b43",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1653,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-30T16:52:07Z",
      "side": 1,
      "message": "Is this a workaround of some kind? You should leave a comment and potentially file an anglebug issue to track this if there\u0027s a bug in the D3D11 back-end.",
      "range": {
        "startLine": 1653,
        "startChar": 4,
        "endLine": 1653,
        "endChar": 40
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e38e0f29_467f2ac6",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1653,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "I believe I got this from Geoff while we were chatting about this extension last week.\nI don\u0027t remember the exact reason, Goeff?",
      "parentUuid": "494a1f9c_36da5b43",
      "range": {
        "startLine": 1653,
        "startChar": 4,
        "endLine": 1653,
        "endChar": 40
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "191fea72_04ae028c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1653,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-14T15:46:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e38e0f29_467f2ac6",
      "range": {
        "startLine": 1653,
        "startChar": 4,
        "endLine": 1653,
        "endChar": 40
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc6ea11e_80ec047c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 14
      },
      "lineNbr": 131,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-30T16:52:07Z",
      "side": 1,
      "message": "nit: you can remove the operator[] overload in vk_format_utils.h if this is the only place we need to convert GLenum -\u003e vk::Format. Otherwise I\u0027d leave this out.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 131,
        "endChar": 42
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ce8f9d_61a27d16",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 14
      },
      "lineNbr": 131,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "Oops, I didn\u0027t see the operator overload.\nRemoved.",
      "parentUuid": "fc6ea11e_80ec047c",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 131,
        "endChar": 42
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d05593ff_5763ed9c",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1543,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-01T14:55:48Z",
      "side": 1,
      "message": "Seems incorrect. Supposedly, only supporting `depthTexturesANGLE` should be enough here.\n\nYou could use the same logic as a previous case and simplify this:\n\n                if (!(context-\u003egetExtensions().depthTexturesANGLE ||\n                      context-\u003egetExtensions().packedDepthStencil))\n\n---\n\nAlso, given that most of the code here is duplicate (except for the `if` logic), you can merge them back and use this kind of `if`:\n\n    if (!(context-\u003egetExtensions().depthTexturesANGLE ||\n        (format \u003d\u003d GL_DEPTH_COMPONENT \u0026\u0026 context-\u003egetExtensions().packedDepthStencil) ||\n        (format \u003d\u003d GL_DEPTH_STENCIL_OES \u0026\u0026 context-\u003egetExtensions().depthTextureOES)))",
      "range": {
        "startLine": 1541,
        "startChar": 20,
        "endLine": 1543,
        "endChar": 66
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec0fef61_946765b7",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1543,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d05593ff_5763ed9c",
      "range": {
        "startLine": 1541,
        "startChar": 20,
        "endLine": 1543,
        "endChar": 66
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27aa3e13_7cfd1fff",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1646,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-05-01T14:55:48Z",
      "side": 1,
      "message": "Should be `packedDepthStencil`",
      "range": {
        "startLine": 1646,
        "startChar": 51,
        "endLine": 1646,
        "endChar": 66
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde8fed6_9d2bf486",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1646,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-05-01T18:52:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27aa3e13_7cfd1fff",
      "range": {
        "startLine": 1646,
        "startChar": 51,
        "endLine": 1646,
        "endChar": 66
      },
      "revId": "ac29475355257232a09b85d464119ede943bcf03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}