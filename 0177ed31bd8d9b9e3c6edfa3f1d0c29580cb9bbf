{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e22cce43_5121e370",
        "filename": "src/libANGLE/renderer/wgpu/wgpu_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1516597
      },
      "writtenOn": "2024-02-23T19:32:04Z",
      "side": 1,
      "message": "One thing I\u0027m still unsure about is how the target level should be stored in the queued data uploads. CopyImageBuffer stores the offset and bytes per row/col, but no info about the level. Unless I misunderstood and the queued data uploads should be Textures as well?",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 7
      },
      "revId": "0177ed31bd8d9b9e3c6edfa3f1d0c29580cb9bbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba354f48_6d68b165",
        "filename": "src/libANGLE/renderer/wgpu/wgpu_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:54:56Z",
      "side": 1,
      "message": "We have a `gl::LevelIndex` (an int wrapper) and a vk::LevelIndex (another int wrapper, but unsigned so C++ doesn\u0027t consider them the same type :/) in the Vulkan backend which infinitely made the code clearer. I suggest you do the same in this backend from the get go.\n\nThe thing is, GL has levels which could be arbitrary, like:\n\n- Level 0, 10x20 RGB565\n- Level 1, 56x194 RGBA4444\n- Level 2, 16x16 RGBA8\n- Level 3, 8x8 RGBA8\n- Level 4, 4x4 RGBA8\n- Level 5, 123x12 RGB10A2\n\nThen with BASE/MAX level the application creates a mip chain. In the above, the mip chain could be levels {2, 3, 4}. In wgpu, you\u0027d create an image for that mip chain, which would have levels {0, 1, 2}.\n\nSo avoiding confusion between the levels as GL sees them and as wgpu sees them is very important. The difference is an offset, and you can have helpers to convert between the two, like see `toVkLevel` and `toGLLevel` in the vk backend.\n\nFor the updates in particular, we are storing updates to _any_ level, including stuff outside the allocated range of the image. For example, there could be a pending update to GL level 1 in the example above. It\u0027s a bit iffy, but we had to do in the vk backend was to store these updates with the GL level stored in them. Then when flushing the updates, we would translate them to VK level. See how `ImageHelper::flushStagedUpdates` calls `toVkLevel`.",
      "parentUuid": "e22cce43_5121e370",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 7
      },
      "revId": "0177ed31bd8d9b9e3c6edfa3f1d0c29580cb9bbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "204996be_709f2348",
        "filename": "src/libANGLE/renderer/wgpu/wgpu_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1516597
      },
      "writtenOn": "2024-02-27T19:43:15Z",
      "side": 1,
      "message": "I added the helpers you suggested and am storing a gl::LevelIndex target level for each data upload now, and added a struct to store the webgpu::ImageCopyBuffer and target level.\n\nIt looks like the method of converting between the gl::LevelIndex and webgpu::LevelIndex should be the same as the ones used for vulkan, but let me know if I miscalculated.",
      "parentUuid": "ba354f48_6d68b165",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 7
      },
      "revId": "0177ed31bd8d9b9e3c6edfa3f1d0c29580cb9bbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cba18f24_76229218",
        "filename": "src/libANGLE/renderer/wgpu/wgpu_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1516597
      },
      "writtenOn": "2024-02-27T21:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "204996be_709f2348",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 7
      },
      "revId": "0177ed31bd8d9b9e3c6edfa3f1d0c29580cb9bbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}