{
  "comments": [
    {
      "key": {
        "uuid": "dad359a8_9538b612",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 20,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-18T15:40:50Z",
      "side": 1,
      "message": "This is probably being discussed elsewhere (I remember one discussion in a meeting) ... could we have a feature flag that, by default, does an invalidate for the app?  If some app has a problem, we can flip the feature flag to see if that\u0027s the cause of the problem.  Just an idea since it sounds like most apps won\u0027t do the invalidate, but won\u0027t use the read FBO either.",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ec672a_9ad8c61e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 20,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T16:46:59Z",
      "side": 1,
      "message": "Non-conformant changes have been discussed, but we haven\u0027t gotten as far as implementing them yet.   With Mohan\u0027s change to get the package name, we should be able to enable/disable a feature like that based on that app that\u0027s running if we wanted to though.   That\u0027s obviously \"cheating\" and opens us up to extra app-compat work to make sure app updates don\u0027t break our assumptions (as in, they don\u0027t suddenly start reading the multisampled image which has been discarded).   For Asphalt 8 in particular (which this optimization is for), we don\u0027t yet support ANGLE traces since they use multiple contexts, so we can\u0027t catch regressions in CQ (assuming traces were auto-updated when the app updates somehow).\n\nAs for the discard itself, we don\u0027t to go down the full invalidate path, just to update the storeOps.   I have a follow-on WIP CL to show what needs to be done, which the app-specifc feature enablement could be added to:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2336200\n\nHowever, because it\u0027s non-conformant, we can\u0027t enable it by default.   It would need to remain an app-specific optimization.",
      "parentUuid": "dad359a8_9538b612",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aced887a_bd35ac3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 24,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "Tim, my recollection is you had to do some special trick to \"re-open\" a finished RP. Can you document that in the description if that\u0027s still the case? Trying to get a high-level view of that particular workaround.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "688cb5a5_760b99c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 24,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "I added a brief description, but there isn\u0027t a lot going on to restore a render pass since we\u0027re just restoring a pointer if the framebuffer handles match.   Let me know if there\u0027s more you\u0027d like me to add.",
      "parentUuid": "aced887a_bd35ac3c",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c5666a_84cbd790",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T05:44:25Z",
      "side": 1,
      "message": "PTAL\n\nMoved the render pass workaround stuff into FramebufferVk::blit() and tagged it with TODOs that reference Issue 4968: Vulkan: Support more than one open render pass at a time.   This limits the overhead to just the case of resolving with blit (which is potentially optimized to use subpass attachments), which should be rare.\n\nShuffled around reviewers since Shabi is out.",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4fe05cf_ae8b6a9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-18T15:40:50Z",
      "side": 1,
      "message": "Drive by question below...",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8246a0e_6b310599",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "Hey Tim, CL looks good. Should be easy to approve once most of the nits and suggestions are addressed.",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5401d88d_ced12136",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 36
      },
      "lineNbr": 554,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "Is this checking that there\u0027s a finished RP? We should rename this to hasFinishedRenderPass. Moreover I\u0027m going to check at the code and see if we can merge all your new methods including getRenderPassCommands and restoreRenderPassCommandBuffer into one command.",
      "range": {
        "startLine": 554,
        "startChar": 9,
        "endLine": 554,
        "endChar": 35
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae7a5386_86e7fbb8",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 36
      },
      "lineNbr": 554,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "\u003e Is this checking that there\u0027s a finished RP? We should rename this to hasFinishedRenderPass.\n\nYeah, that\u0027s probably more accurate since onRenderPassFinished() is what sets it to null.\n\nThese have all been condensed down to restoreFinishedRenderPass(), but let me know what you think there.",
      "parentUuid": "5401d88d_ced12136",
      "range": {
        "startLine": 554,
        "startChar": 9,
        "endLine": 554,
        "endChar": 35
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c167561_1d799d58",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 36
      },
      "lineNbr": 643,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "nit: make a reference",
      "range": {
        "startLine": 643,
        "startChar": 21,
        "endLine": 643,
        "endChar": 22
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0db52373_669802ef",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 36
      },
      "lineNbr": 643,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c167561_1d799d58",
      "range": {
        "startLine": 643,
        "startChar": 21,
        "endLine": 643,
        "endChar": 22
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f908de96_30c1aec4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1129,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "nit: Can you condense this into a single ContextVk method? Optimistically we can condense a few methods into one and make it clear this is a specific feature for Blit instead of exposing internals of the ContextVk class.",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1129,
        "endChar": 13
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e559c0e1_a6947b04",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1129,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f908de96_30c1aec4",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1129,
        "endChar": 13
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c678550e_ed4a1600",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1272,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "Although you have access to srcFramebufferVk members, as said in another comment, it would encapsulate this better to make this code an action method in FramebufferVk. You could make it a private method.",
      "range": {
        "startLine": 1268,
        "startChar": 0,
        "endLine": 1272,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8185daa6_181d2ff0",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1272,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c678550e_ed4a1600",
      "range": {
        "startLine": 1268,
        "startChar": 0,
        "endLine": 1272,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3073bd68_6e64854a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1288,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "again this should be a specific member since you\u0027re modifying a FB in-use. I\u0027m also concerned about interactions between your feature here and my restarting RPs for depth-only rendering.",
      "range": {
        "startLine": 1286,
        "startChar": 0,
        "endLine": 1288,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fa1bc8b_c0097466",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1288,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3073bd68_6e64854a",
      "range": {
        "startLine": 1286,
        "startChar": 0,
        "endLine": 1288,
        "endChar": 0
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e74a9c_961af2e9",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1338,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "nit: technically this isn\u0027t the vkCmdResolveImageCount - we\u0027re calling the vkCmd once per draw buffer.",
      "range": {
        "startLine": 1337,
        "startChar": 0,
        "endLine": 1338,
        "endChar": 43
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46490e37_149674f0",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1338,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09e74a9c_961af2e9",
      "range": {
        "startLine": 1337,
        "startChar": 0,
        "endLine": 1338,
        "endChar": 43
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e902da8e_13c805ef",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1768,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "👍\n\nMight want the TODO here as well.",
      "range": {
        "startLine": 1759,
        "startChar": 0,
        "endLine": 1768,
        "endChar": 5
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d47c967c_6b6ae668",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 36
      },
      "lineNbr": 1768,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "What\u0027s the todo for?   I don\u0027t think there\u0027s anything left here.\n\nAre you referring to this:\n\n\u003e since we may be able to optimize that path which requires modifying the current render pass.\n\nThat\u0027s not referring to more work here, but is instead regarding the work this CL is doing related to calling FramebufferVk::resolveColorWithSubpass(), which can only be done if  certain conditions are met (render pass is still open, 1 color attachment, etc.) and is where the \u0027may\u0027 comes from.",
      "parentUuid": "e902da8e_13c805ef",
      "range": {
        "startLine": 1759,
        "startChar": 0,
        "endLine": 1768,
        "endChar": 5
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df536334_c3f7cb51",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.h",
        "patchSetId": 36
      },
      "lineNbr": 126,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "instead of mutating this directly please add setter method to preserve containment.",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7b1515e_268263da",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.h",
        "patchSetId": 36
      },
      "lineNbr": 126,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df536334_c3f7cb51",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707b86f7_d4b067bb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 36
      },
      "lineNbr": 983,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "as mentioned elsewhere - suggest making this a specific function for your resolve case.",
      "range": {
        "startLine": 975,
        "startChar": 0,
        "endLine": 983,
        "endChar": 5
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7887addd_5ab55c90",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 36
      },
      "lineNbr": 983,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "707b86f7_d4b067bb",
      "range": {
        "startLine": 975,
        "startChar": 0,
        "endLine": 983,
        "endChar": 5
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b92d86f_9d3b40c2",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 36
      },
      "lineNbr": 756,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "nit: for consistency: resolveImageCommands",
      "range": {
        "startLine": 756,
        "startChar": 13,
        "endLine": 756,
        "endChar": 35
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2641aa76_9fb0fcdf",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 36
      },
      "lineNbr": 756,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b92d86f_9d3b40c2",
      "range": {
        "startLine": 756,
        "startChar": 13,
        "endLine": 756,
        "endChar": 35
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ec6ac7c_e5d2c754",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 271,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-18T18:20:12Z",
      "side": 1,
      "message": "👍\n\nPersonally I find this test suite quite useful, glad you were able to take advantage of it.",
      "range": {
        "startLine": 271,
        "startChar": 42,
        "endLine": 271,
        "endChar": 68
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84549630_a86332e4",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 271,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T21:45:35Z",
      "side": 1,
      "message": "Yeah, it\u0027s easier than verifying on a device if the render pass is being broken or not with each change.   Should also prevent other CLs from silently breaking this change.",
      "parentUuid": "5ec6ac7c_e5d2c754",
      "range": {
        "startLine": 271,
        "startChar": 42,
        "endLine": 271,
        "endChar": 68
      },
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}