{
  "comments": [
    {
      "key": {
        "uuid": "dad359a8_9538b612",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 20,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-18T15:40:50Z",
      "side": 1,
      "message": "This is probably being discussed elsewhere (I remember one discussion in a meeting) ... could we have a feature flag that, by default, does an invalidate for the app?  If some app has a problem, we can flip the feature flag to see if that\u0027s the cause of the problem.  Just an idea since it sounds like most apps won\u0027t do the invalidate, but won\u0027t use the read FBO either.",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ec672a_9ad8c61e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 20,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T16:46:59Z",
      "side": 1,
      "message": "Non-conformant changes have been discussed, but we haven\u0027t gotten as far as implementing them yet.   With Mohan\u0027s change to get the package name, we should be able to enable/disable a feature like that based on that app that\u0027s running if we wanted to though.   That\u0027s obviously \"cheating\" and opens us up to extra app-compat work to make sure app updates don\u0027t break our assumptions (as in, they don\u0027t suddenly start reading the multisampled image which has been discarded).   For Asphalt 8 in particular (which this optimization is for), we don\u0027t yet support ANGLE traces since they use multiple contexts, so we can\u0027t catch regressions in CQ (assuming traces were auto-updated when the app updates somehow).\n\nAs for the discard itself, we don\u0027t to go down the full invalidate path, just to update the storeOps.   I have a follow-on WIP CL to show what needs to be done, which the app-specifc feature enablement could be added to:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2336200\n\nHowever, because it\u0027s non-conformant, we can\u0027t enable it by default.   It would need to remain an app-specific optimization.",
      "parentUuid": "dad359a8_9538b612",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c5666a_84cbd790",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-18T05:44:25Z",
      "side": 1,
      "message": "PTAL\n\nMoved the render pass workaround stuff into FramebufferVk::blit() and tagged it with TODOs that reference Issue 4968: Vulkan: Support more than one open render pass at a time.   This limits the overhead to just the case of resolving with blit (which is potentially optimized to use subpass attachments), which should be rare.\n\nShuffled around reviewers since Shabi is out.",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4fe05cf_ae8b6a9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-18T15:40:50Z",
      "side": 1,
      "message": "Drive by question below...",
      "revId": "a9bea39fd0bfb53e8f2611f99115d585c38be405",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}