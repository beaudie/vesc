{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "695d823d_dcaff28a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T16:11:31Z",
      "side": 1,
      "message": "Geoff/Jonah, can you guys take a look at the blit logic to see if I have this right? It\u0027s a bit tricky to follow.",
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0eaa0ac1_02bc439a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2021-06-14T16:55:05Z",
      "side": 1,
      "message": "Am I following right?\nSets dest x1 to some large positive integer boundary, but since source x\u0027s are reversed, this gets flipped to some overflowed negative boundary. But this change clips the negative values to 0.",
      "parentUuid": "695d823d_dcaff28a",
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3c13c8a_69e8d4be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-06-14T16:57:57Z",
      "side": 1,
      "message": "I\u0027ll try out the test on Windows after lunch. Curious about the call stack that gets us here.",
      "parentUuid": "0eaa0ac1_02bc439a",
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88913a36_5c6016f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-06-14T20:17:48Z",
      "side": 1,
      "message": "It looks mostly right to me.  We handled the case when the rectangles didn\u0027t intersect but when there is an intersection we were still copying using the original bounds even though they were not all valid.",
      "parentUuid": "a3c13c8a_69e8d4be",
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ef6c0c6_c273283e",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-06-14T20:17:48Z",
      "side": 1,
      "message": "I *think* these should stay as destArea. It computes the source row to read based on the pre-clipped texture coordinate. There is a gl::clamp below to ensure it\u0027s safe.",
      "range": {
        "startLine": 69,
        "startChar": 45,
        "endLine": 69,
        "endChar": 82
      },
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "792c4010_0e074a55",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-16T15:35:44Z",
      "side": 1,
      "message": "Interestingly for a one pixel height this was returning Inf. Do you know what we should be doing instead?",
      "parentUuid": "8ef6c0c6_c273283e",
      "range": {
        "startLine": 69,
        "startChar": 45,
        "endLine": 69,
        "endChar": 82
      },
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfd01c11_83709343",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-06-16T19:28:25Z",
      "side": 1,
      "message": "Ugh, I see. Yea, the floating point range doesn\u0027t cover the entire int range.  safe math + INVALID_OPERATION if we overflow?",
      "parentUuid": "792c4010_0e074a55",
      "range": {
        "startLine": 69,
        "startChar": 45,
        "endLine": 69,
        "endChar": 82
      },
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c111503_2a033f04",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-25T13:32:32Z",
      "side": 1,
      "message": "Changed to destArea. I was able to reproduce the div0 using ubsan. Since it\u0027s a separate problem we can tackle that in a follow-up, I left a TODO and opened a bug.",
      "parentUuid": "cfd01c11_83709343",
      "range": {
        "startLine": 69,
        "startChar": 45,
        "endLine": 69,
        "endChar": 82
      },
      "revId": "299612b7352c95d82a7b5f624d13ddf6b8f6f9a8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}