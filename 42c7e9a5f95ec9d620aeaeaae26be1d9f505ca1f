{
  "comments": [
    {
      "key": {
        "uuid": "cdb9db42_5b2eb1ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "This looks like it\u0027s trading memory for CPU overhead by having to update the uniforms every time we bind a new program/PPO.   What should we be checking to know that this tradeoff is correct?",
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47b5882b_6f8435f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T20:34:53Z",
      "side": 1,
      "message": "Right. I have tried on trex and manhattan that app are always updating uniform data after bind. In these cases, there is zero overhead. Feel free to try https://chromium-review.googlesource.com/c/angle/angle/+/2270819 with your app to see how much the overhead it has.\n\nBut even if there is overhead with some app, IMHO this is still the right way to do. With per program buffer this just not scale-able. These are hard wired memory (because GPU uses it), they will affect performance in other ways and affect other apps as well.",
      "parentUuid": "cdb9db42_5b2eb1ce",
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ad52c58_53863d16",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2705,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "How expensive is it to have to update uniforms every time we bind a new program/PPO like this?   How are the various benchmarks effected by this CL?",
      "range": {
        "startLine": 2698,
        "startChar": 0,
        "endLine": 2705,
        "endChar": 5
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "625efc3a_04fac3a8",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2705,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T20:34:53Z",
      "side": 1,
      "message": "See the other comment.",
      "parentUuid": "9ad52c58_53863d16",
      "range": {
        "startLine": 2698,
        "startChar": 0,
        "endLine": 2705,
        "endChar": 5
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4713fe83_ba4a91c7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2705,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T21:33:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "625efc3a_04fac3a8",
      "range": {
        "startLine": 2698,
        "startChar": 0,
        "endLine": 2705,
        "endChar": 5
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecc138a3_f7dcfd7b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 96,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "Should be a pointer, since you\u0027re modifying it.",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 47
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "860c05a3_4388c42d",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 96,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T21:11:31Z",
      "side": 1,
      "message": "I thought google dropped this requirement from the style guide. The code looks uglier with pointer though. But I have changed to pointer anyway.",
      "parentUuid": "ecc138a3_f7dcfd7b",
      "range": {
        "startLine": 96,
        "startChar": 4,
        "endLine": 96,
        "endChar": 47
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20b9f2a5_7073e440",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 102,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "Since you\u0027re iterating over linked shader stages, you should be able to assert there\u0027s a program:\n\n        ASSERT(programVk);\n        if (programVk-\u003eisShaderUniformDirty(shaderType))",
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c58f3d7_c1802354",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 114,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "I\u0027m surprised compiles since glState is a reference.   What\u0027s being dereferenced here?",
      "range": {
        "startLine": 114,
        "startChar": 48,
        "endLine": 114,
        "endChar": 49
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e48c099f_8759585c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 114,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T21:11:31Z",
      "side": 1,
      "message": "Its the executable been de-referenced here. I will add a parenthesis here to avoid confusion.",
      "parentUuid": "2c58f3d7_c1802354",
      "range": {
        "startLine": 114,
        "startChar": 48,
        "endLine": 114,
        "endChar": 49
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a92d58_fbdf635c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 114,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-17T21:25:18Z",
      "side": 1,
      "message": "Just my personal opinion, but:\n\n*x.y is pretty common. I\u0027d suggest keeping it as is. Too many parentheses can also hurt readability.",
      "parentUuid": "e48c099f_8759585c",
      "range": {
        "startLine": 114,
        "startChar": 48,
        "endLine": 114,
        "endChar": 49
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00f78e48_f095270c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 114,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T21:33:05Z",
      "side": 1,
      "message": "Oh, I see.   I should have remembered getProgramExecutable() returns a pointer.",
      "parentUuid": "49a92d58_fbdf635c",
      "range": {
        "startLine": 114,
        "startChar": 48,
        "endLine": 114,
        "endChar": 49
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa971206_97d6e435",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 145,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "ASSERT(programVk);",
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f6a6f5_4de769a1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 145,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T21:11:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa971206_97d6e435",
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7b67ec6_b2f3f775",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 227,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "ASSERT(program)",
      "range": {
        "startLine": 227,
        "startChar": 8,
        "endLine": 227,
        "endChar": 20
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f57647_95d0648c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 227,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T21:11:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7b67ec6_b2f3f775",
      "range": {
        "startLine": 227,
        "startChar": 8,
        "endLine": 227,
        "endChar": 20
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "816e5ef9_470ad5d1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 817,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-17T19:48:18Z",
      "side": 1,
      "message": "If the current buffer of the default uniform\u0027s dynamic buffer has changed since last bind, we technically don\u0027t need to do this, isn\u0027t that right? A quick survey of apps to see if this is dirtying uniforms unnecessarily (with logs and statistics gathering) could be good to know if this is harmless. Especially the change to increase the dynamic buffer\u0027s allocate size makes it more likely that there wouldn\u0027t be a need to dirty these.\n\nI would suggest to at least specify in the comment that dirtying could be avoided under X and Y condition (instead of \"we have to\")",
      "range": {
        "startLine": 816,
        "startChar": 84,
        "endLine": 817,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4727112a_e51c8623",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 817,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T20:12:56Z",
      "side": 1,
      "message": "I guess you mean \"if the current buffer of the default uniform\u0027s dynamic buffer has *not* changed\". Even if it is the same buffer, it could be that we went through all buffers and come back to the same buffer again. The survey result on manhattan and trex is app always update uniform data on bind anyway.",
      "parentUuid": "816e5ef9_470ad5d1",
      "range": {
        "startLine": 816,
        "startChar": 84,
        "endLine": 817,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a9e4a35_c110fbe2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 817,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-17T20:23:49Z",
      "side": 1,
      "message": "Right, missed the \"not\".\n\nI do recall you mentioned the app always updates uniforms. Do you know if they update uniforms from all stages? That is, if VS uniforms are constant, and they only change FS uniforms, you could potentially save on updating VS uniforms if the buffer hasn\u0027t changed (+ whatever is needed to make sure recycled buffers are detected).\n\nI\u0027m fine by this, please just update the comment.",
      "parentUuid": "4727112a_e51c8623",
      "range": {
        "startLine": 816,
        "startChar": 84,
        "endLine": 817,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d05d8fe0_75485a15",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 817,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T20:34:53Z",
      "side": 1,
      "message": "Yes, all shader stages. https://chromium-review.googlesource.com/c/angle/angle/+/2270819\n\nWill update comment in next update.",
      "parentUuid": "7a9e4a35_c110fbe2",
      "range": {
        "startLine": 816,
        "startChar": 84,
        "endLine": 817,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24061e63_27040ef3",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 817,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T21:11:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d05d8fe0_75485a15",
      "range": {
        "startLine": 816,
        "startChar": 84,
        "endLine": 817,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28615bc1_1a295c7b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 818,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T20:17:56Z",
      "side": 1,
      "message": "Why isn\u0027t it possible for the uniform data to still be present in the shared buffer?",
      "range": {
        "startLine": 816,
        "startChar": 0,
        "endLine": 818,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40bfe096_3151baf1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 818,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-17T20:34:53Z",
      "side": 1,
      "message": "It\u0027s still possible to do more tracking, that we have to use another serial number to ensure they did not gets recycled and come back to the same one aghain. IMO, the tracking is not really worth it, given that most app do update uniform data on bind.",
      "parentUuid": "28615bc1_1a295c7b",
      "range": {
        "startLine": 816,
        "startChar": 0,
        "endLine": 818,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b821466_b680ddc1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 818,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T21:33:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "40bfe096_3151baf1",
      "range": {
        "startLine": 816,
        "startChar": 0,
        "endLine": 818,
        "endChar": 33
      },
      "revId": "42c7e9a5f95ec9d620aeaeaae26be1d9f505ca1f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}