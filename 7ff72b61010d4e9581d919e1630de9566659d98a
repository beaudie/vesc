{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6038c8f5_7c5cde3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2022-02-02T16:35:33Z",
      "side": 1,
      "message": "PTAL. This is one possible solution to some of the ASAN issues we\u0027ve seen for infinite loop shaders in SwiftShader.\n\nThis simply hangs ANGLE on context destruction if stuck in an infinite loop. The watchdog will kill the process. This seems better than the current state of blindly destroying resources that Vulkan is using.",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd8c3652_2f06a377",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-02T17:55:23Z",
      "side": 1,
      "message": "Not sure I can approve this patch. The timeout specifically means exit early on something like a TDR.",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5495965a_a41c207c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-02T18:41:56Z",
      "side": 1,
      "message": "What happens really on TDR? Wouldn\u0027t the wait already return with device loss even if the timeout hasn\u0027t expired?",
      "parentUuid": "dd8c3652_2f06a377",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa5b14d7_b72ed621",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2022-02-03T20:16:48Z",
      "side": 1,
      "message": "The TDR case should be safe, TDRs are supposed to cause vkWaitForFences to return early with VK_ERROR_DEVICE_LOST instead of waiting for the timeout (according to the note in https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/vkWaitForFences.html).",
      "parentUuid": "5495965a_a41c207c",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcdff4ee_53a1159b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-10T16:43:32Z",
      "side": 1,
      "message": "SwiftShader doesn\u0027t get picked up by TDR so this will lead to a potential process hang. As it stands I\u0027d prefer we find another solution. What other options do we have to fix the issue linked in the description?",
      "parentUuid": "fa5b14d7_b72ed621",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae8be28e_118f94e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-10T16:44:27Z",
      "side": 1,
      "message": "Just to clarify - my preference is based on my suspicious that this will cause other issues, including unexpected infinite unrecoverable hangs in ANGLE.",
      "parentUuid": "bcdff4ee_53a1159b",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a9d0182_a63d9c49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-10T21:27:17Z",
      "side": 1,
      "message": "\u003e SwiftShader doesn\u0027t get picked up by TDR so this will lead to a potential process hang. As it stands I\u0027d prefer we find another solution. What other options do we have to fix the issue linked in the description?\n\nWouldn\u0027t chrome\u0027s watchdog take care of that situation correctly by killing the process? (genuinely asking)\n\n\u003e Just to clarify - my preference is based on my suspicious that this will cause other issues, including unexpected infinite unrecoverable hangs in ANGLE.\n\nThis remains to be a theoretical issue, but anyway, how about choosing a timeout that\u0027s \u003e Chrome\u0027s watchdog and sidestep the problem?",
      "parentUuid": "ae8be28e_118f94e6",
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01131a16_cbb241b0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5686,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-02T17:44:28Z",
      "side": 1,
      "message": "Looking at the callers, there are no circumstances where returning earlier than GPU-is-done is really valid (with various degrees of repercussion).\n\nHaving a small limit to avoid infinite-wait might have simply been defensive. Since probably the only user that does care about responsiveness (i.e. Chrome) is already going for infinite-wait, I think you might as well just make `RendererVk::finish()` actually finish with `std::numeric_limits\u003cuint64_t\u003e::max()` and not have the timeout be customizable.\n\nTL;DR my suggestion is to dispense with all this and just make `getMaxFenceWaitTimeNs()` return `std::numeric_limits\u003cuint64_t\u003e::max()`.\n\nEither way, nit: `renderPassClosureReason` is a debug thing, so this is as-is using it in an unintended way.",
      "range": {
        "startLine": 5684,
        "startChar": 0,
        "endLine": 5686,
        "endChar": 64
      },
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72dd99e_be52a2cf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5686,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2022-02-03T20:16:48Z",
      "side": 1,
      "message": "SG. Our current wait time is 2 minutes which is already extreme (TDR has a delay of 2 seconds on windows). \n\nThe command processor waitIdle does seem to properly handle timeouts. It leaves the pending fences in a good state. Context destruction does not, however. It ignores the result of finish and starts destroying resources. This could be somewhat worked around but the destruction code is spread across a few places (share group vk, renderervk).",
      "parentUuid": "01131a16_cbb241b0",
      "range": {
        "startLine": 5684,
        "startChar": 0,
        "endLine": 5686,
        "endChar": 64
      },
      "revId": "7ff72b61010d4e9581d919e1630de9566659d98a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}