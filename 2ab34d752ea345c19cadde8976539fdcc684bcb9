{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "44905d87_5da5274f",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 14
      },
      "lineNbr": 430,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T01:32:37Z",
      "side": 1,
      "message": "nit: feel free to use the `unused` bit above.",
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "473a626e_d042c8bb",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 14
      },
      "lineNbr": 430,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-04-14T18:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44905d87_5da5274f",
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bba589f6_6371537d",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6044,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T01:32:37Z",
      "side": 1,
      "message": "You need to have the same decorations as initializerId here. In particular, you want the quantized value to still be `RelaxedPrecision`; otherwise it\u0027s a 16-bit value in a 32-bit container.\n\n`mBuilder.getDecorations(symbol-\u003egetType())` should do as argument to `getNewId`",
      "range": {
        "startLine": 6044,
        "startChar": 71,
        "endLine": 6044,
        "endChar": 73
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b81670d_94c45f24",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6044,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-04-14T18:28:21Z",
      "side": 1,
      "message": "Can I ask why it\u0027s a 16-bit value in a 32-bit container?\n\nIn Spirv Spec, it says this for `RelaxedPrecision`:\n```\nThe RelaxedPrecision Decoration allows 32-bit integer and 32-bit floating-point operations to execute with a relaxed precision of somewhere between 16 and 32 bits.\n```\n\nAnd for `OpQuantizeToF16`:\n```\nFor debugging portability of floating-point operations, OpQuantizeToF16 may be used to explicitly reduce the precision of a relaxed-precision result to 16-bit precision. (Integer-result precision can be reduced, for example, using left- and right-shift opcodes.)\n```\n\nIt reads to me that adding `OpQuantizeToF16` is to make sure the result is fixed at 16-bit, and adding back `RelaxedPrecision` decoration will defeat the purpose of `OpQuantizeToF16`. Am I reading it wrongly here?",
      "parentUuid": "bba589f6_6371537d",
      "range": {
        "startLine": 6044,
        "startChar": 71,
        "endLine": 6044,
        "endChar": 73
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90c99be9_b2aae61a",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6044,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T19:15:31Z",
      "side": 1,
      "message": "\u003e reduce the precision of a relaxed-precision result to 16-bit precision\n\nIt specifically says it reduces the precision of a \"relaxed-precision\" result (i.e. id). If the id is not RelaxedPrecision, we end up doing the job of quantizing to fp16, but then say that it needs to stay in a 32-bit container (SPIR-V id, register, whatever).\n\nDrivers may deal with it just fine, it\u0027s just inconsistent of us to ask for reduced precision but not specify RelaxedPrecision on the id.\n\n\u003e It reads to me that adding OpQuantizeToF16 is to make sure the result is fixed at 16-bit\n\nNot exactly, it says the result is \"quantized to fp16\", not that it\u0027s actually fp16. For example, say 1.1234 gets quantized to 1.12; there\u0027s nothing stopping an fp32 or even fp64 to contain the resulting 1.12 value (it\u0027s still quantized to something that fp16 _can_ hold).\n\n\u003e and adding back RelaxedPrecision decoration will defeat the purpose of OpQuantizeToF16\n\nNo, they work together (or rather, they are orthogonal). `RelaxedPrecision` says the driver has the option to use a precision less than 32 bits. By using OpQuantizeToF16 we make sure the **contents** are representable by fp16. The driver may still choose to use fp32 if it wants (but at least we know comparison with fp16 would be meaningful). The hope is that the driver would take OpQuantizeToF16 as indication that it really should use fp16.",
      "parentUuid": "8b81670d_94c45f24",
      "range": {
        "startLine": 6044,
        "startChar": 71,
        "endLine": 6044,
        "endChar": 73
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c27cc85_de0fb59b",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6053,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T01:32:37Z",
      "side": 1,
      "message": "nit: please move this OpStore out of the `if`. In the `true` block, do OpQuantizeToF16 and overwrite `initializerId` so the `WriteStore` is identical in both paths.",
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb712d7f_b85cf952",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6053,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-04-14T18:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c27cc85_de0fb59b",
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b222cf0_171fb8c8",
        "filename": "src/compiler/translator/Types.h",
        "patchSetId": 14
      },
      "lineNbr": 252,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T01:32:37Z",
      "side": 1,
      "message": "nit: \"scalar vector\" doesn\u0027t make sense. Scalar means it has only one component.\n\nSince this is a very targeted fix, you might as well put this logic in `OutputSPIRV.cpp`.",
      "range": {
        "startLine": 252,
        "startChar": 9,
        "endLine": 252,
        "endChar": 23
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f38801a_eb0d59f8",
        "filename": "src/compiler/translator/Types.h",
        "patchSetId": 14
      },
      "lineNbr": 252,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-04-14T02:01:54Z",
      "side": 1,
      "message": "Recommend `FloatVector` since you are also checking the base type.",
      "parentUuid": "4b222cf0_171fb8c8",
      "range": {
        "startLine": 252,
        "startChar": 9,
        "endLine": 252,
        "endChar": 23
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d461b11_db9b1a9f",
        "filename": "src/compiler/translator/Types.h",
        "patchSetId": 14
      },
      "lineNbr": 252,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-04-14T18:31:01Z",
      "side": 1,
      "message": "Sorry I was thinking about `isVectorFloat()` but I typed it wrongly. I removed this function from `TType` class and placed the check in the function `OutputSPIRVTraverser::visitDeclaration()` as Shabi suggested.",
      "parentUuid": "1f38801a_eb0d59f8",
      "range": {
        "startLine": 252,
        "startChar": 9,
        "endLine": 252,
        "endChar": 23
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07cf236a_8359b4f0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4419,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-04-14T02:01:54Z",
      "side": 1,
      "message": "Do we need to limit this to ARM?  I would guess other platforms will expect mediump to be 16-bit.",
      "range": {
        "startLine": 4419,
        "startChar": 75,
        "endLine": 4419,
        "endChar": 80
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f85c1357_16bbd51b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4419,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-14T02:26:03Z",
      "side": 1,
      "message": "Not necessarily, specially on desktop vendors (and particularly older drivers/hardware).\n\nLet\u0027s start with ARM, and we can selectively expand to other vendors as necessary. Other vendors may already respect RelaxedPrecision more rigorously too, so may not need our intervention.",
      "parentUuid": "07cf236a_8359b4f0",
      "range": {
        "startLine": 4419,
        "startChar": 75,
        "endLine": 4419,
        "endChar": 80
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "842f2291_de032aee",
        "filename": "src/tests/gl_tests/ShaderAlgorithmTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 127,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-04-14T02:01:54Z",
      "side": 1,
      "message": "Recommend something other than black, it is too easy to accidentally get nothing.",
      "range": {
        "startLine": 127,
        "startChar": 53,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cae3fb62_e4c88b08",
        "filename": "src/tests/gl_tests/ShaderAlgorithmTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 127,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-04-14T18:28:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "842f2291_de032aee",
      "range": {
        "startLine": 127,
        "startChar": 53,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "2ab34d752ea345c19cadde8976539fdcc684bcb9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}