{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0a01fba_8e41f12b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1233,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-31T19:05:33Z",
      "side": 1,
      "message": "Thinking this over, I don\u0027t think `access \u003d\u003d WriteOnly` is enough for this. I\u0027m not sure if we can at all do this.\n\nExample (please add this test):\n\n- Pre-initialize depth to whatever\n- Set depth to GL_ALWAYS, not masked\n- Draw a triangle covering only half of the framebuffer (diagonally)\n- Break render pass\n- Verify depth in the other half of the framebuffer is untouched\n\nThe render pass will cover the whole framebuffer. Access will be WriteOnly. However, half of the depth attachment is not covered by any draw calls, and its contents must be retained. Changing loadOp to DONT_CARE will destroy the contents of that half.\n\nIn that scenario, storeOp should be STORE, so loadOp has no choice but be LOAD. I don\u0027t think we can correctly track the area covered by all the draw calls either :/",
      "revId": "cd9cd1a9200733434e1f9f9bd916c72e1ea4995a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b430a779_467ba739",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1233,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-08-31T20:41:32Z",
      "side": 1,
      "message": "I think you are right. We can\u0027t really optimize for writeOnly case. I bet the deqp tests failure is due to this.",
      "parentUuid": "b0a01fba_8e41f12b",
      "revId": "cd9cd1a9200733434e1f9f9bd916c72e1ea4995a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97d766df_7afd3346",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1233,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-31T20:51:25Z",
      "side": 1,
      "message": "If this is really important, it sounds to me like a combination of ANGLE\u0027s knowledge and TBR drivers\u0027 post-binning information could make this optimization happen.\n\nLike imagine if based on WriteOnly usage we could set load op to LOAD_IF_NOT_FULLSCREEN, and the driver would switch to DONT_CARE for tiles that after binning are determined to be fully-covered.\n\nThe thing is, the Vulkan driver would have a hard time determining this, but we already track rasterizer discard, color mask etc, so we have the necessary information.",
      "parentUuid": "b430a779_467ba739",
      "revId": "cd9cd1a9200733434e1f9f9bd916c72e1ea4995a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f83ae49_f675a2f0",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3055,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-31T18:24:11Z",
      "side": 1,
      "message": "I think we need to add the mDisallowMixedDepthStencilLoadOpNoneAndLoad check here, too, to make the test pass on Pixel 6.",
      "revId": "cd9cd1a9200733434e1f9f9bd916c72e1ea4995a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}