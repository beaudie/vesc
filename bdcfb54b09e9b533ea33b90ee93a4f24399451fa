{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "74204c12_3a6b30ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 60
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "The one split change request is all I really care about here.",
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf050d7c_57ca6ad1",
        "filename": "src/libANGLE/ErrorStrings.h",
        "patchSetId": 60
      },
      "lineNbr": 469,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "nit: requires",
      "range": {
        "startLine": 469,
        "startChar": 72,
        "endLine": 469,
        "endChar": 79
      },
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed36759_cc504e2e",
        "filename": "src/libANGLE/ProgramLinkedResources.cpp",
        "patchSetId": 60
      },
      "lineNbr": 1690,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "Something\u0027s probably not right here. Can there be an array of array situation? Like say some VS output is an array, so TCS input becomes array of array. Then you treat TCS input as not array and suddenly they don\u0027t match.\n\nProbably should do something like:\n\n    size_t variable1ArrayDims \u003d variable1.arrayDimensionCount();\n    size_t variable2IsArrayDims \u003d variable2.arrayDimensionCount();\n    if (treatVariable1AsNonArray)\n    {\n        ASSERT(variable1ArrayDims \u003e 0);\n        --variable1IsArrayDims;\n    }\n    if (treatVariable2AsNonArray)\n    {\n        ASSERT(variable2IsArrayDims \u003e ));\n        --variable2IsArrayDims;\n    }\n    if (variable1IsArrayDims !\u003d variable2IsArrayDims)",
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8888b2b_b01b0ccb",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 60
      },
      "lineNbr": 2209,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "nit: Conditional to `mPatchVertices !\u003d value`, we should get in the habit of always doing that (though a little too late!)",
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1f055e6_19a3bd2a",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 60
      },
      "lineNbr": 653,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "nit: Either move in or above EXTENDED (I thought there wasn\u0027t enough space already?)",
      "range": {
        "startLine": 653,
        "startChar": 8,
        "endLine": 653,
        "endChar": 32
      },
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "733b9980_ed2c8e2a",
        "filename": "src/libANGLE/VaryingPacking.cpp",
        "patchSetId": 60
      },
      "lineNbr": 328,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "Let\u0027s hope this doesn\u0027t cause performance regressions.\n\nI suggest splitting the packing change in its own CL so its effect can be measured in isolation. If the Vulkan driver doesn\u0027t \"repack\" the registers (which I believe it\u0027s not intended for it to do), this can potentially be quite harmful to performance if the shader has a lot of vecN (N \u003c 4) varyings.",
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a3e4d5_548523ce",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 60
      },
      "lineNbr": 4512,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "nit: TCS/TES above GS for nicer ordering.",
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3f0d320_bbdef443",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 60
      },
      "lineNbr": 944,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-01-19T04:34:00Z",
      "side": 1,
      "message": "Super nit: Suggest \"don\u0027t\" instead of \"can\u0027t\" (also above for GS). Supporting line raster\u0027s varying is pretty much identical to xfb position varying (so not like we _can\u0027t_ do it, we just don\u0027t want it).",
      "range": {
        "startLine": 944,
        "startChar": 10,
        "endLine": 944,
        "endChar": 15
      },
      "revId": "bdcfb54b09e9b533ea33b90ee93a4f24399451fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}