{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "232bb21e_be410238",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 86,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-04T19:12:50Z",
      "side": 1,
      "message": "This is unused right? Can be deleted?",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bbb1ce2_657d4057",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 86,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-04T21:26:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "232bb21e_be410238",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8073f151_f4a69ad1",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1246,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-04T19:54:25Z",
      "side": 1,
      "message": "Ah well, the extra cache part was easy at least. Previously, this was skipped if there were no post-link tasks. Now it\u0027s done unconditionally.\n\nAdding `if (mState.mExecutable-\u003emPostLinkSubTasks.empty()) { return; }` to the beginning of this function makes the test pass.\n\nThe test is linking a program, verifying sampler uniform is 0, changes the uniform and relinks the program, expecting it to be reset. It could be a bug in mesa somehow, or maybe this is being called after the test has changed the sampler uniform and the second save is storing the non-default uniform value. The relink is loading the binary, so it would load the wrong value in that case. That sounds like an ANGLE bug TBH, but strange that it doesn\u0027t reproduce on Nvidia.",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6518a116_a789c949",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1246,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-04T20:28:34Z",
      "side": 1,
      "message": "I can confirm the second save was being done after the uniform is set. ANGLE doesn\u0027t put the uniform values in the binary (no implementation should) and this looks like a mesa bug where the uniform value is part of the binary.\n\nLucky for us because it caught a perf regression!",
      "parentUuid": "8073f151_f4a69ad1",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2371f49f_dd5f31ae",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1246,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-04T21:00:57Z",
      "side": 1,
      "message": "This would have caught the bug: https://chromium-review.googlesource.com/c/angle/angle/+/5426396\n\nIt doesn\u0027t catch the save-after-save when linking, but at least it catches save-after-load when there\u0027s a cache hit. That test is tricky enough that I can\u0027t reliably check for the double save.",
      "parentUuid": "6518a116_a789c949",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0c71e45_7bb5a790",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 16
      },
      "lineNbr": 1246,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-04T21:26:27Z",
      "side": 1,
      "message": "thanks a ton for helping debug this shabi, really appreciate it!",
      "parentUuid": "2371f49f_dd5f31ae",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92df1959_ebc3fce5",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 845,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-04T19:12:50Z",
      "side": 1,
      "message": "We don\u0027t actually need the `mPostLinkSubTasks` member, do we? First of all, in the PPO case, the task is not scheduled but `waitForPostLinkTasksImpl` thinks there are tasks to wait on. That\u0027s at least a potential false positive with the perf warning.\n\nIt looks like this is cached only so `waitForPostLinkTasksImpl` knows if there are tasks, but that can already be queried from `mExecutable`, no?",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b499272_6847c649",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 845,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-04T21:26:27Z",
      "side": 1,
      "message": "\u003e in the PPO case, the task is not scheduled but waitForPostLinkTasksImpl thinks there are tasks to wait on\n\nnice catch, i missed clearing `mPostLinkSubTasks` after the inline calls. Done\n\n\u003e It looks like this is cached only so waitForPostLinkTasksImpl\n\nyes, the primary reason for this duplication is that `LinkSubTask::getResult` needs a `gl::Context *context` which we dont have access to in `ContextVk::handleDirtyGraphicsPipelineDesc` which is the only caller of `waitForPostLinkTasksImpl`",
      "parentUuid": "92df1959_ebc3fce5",
      "revId": "a400a1d459c615b1ef5ebf010231ba44e586b019",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}