{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cef73df0_bbe7a051",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-02T18:52:14Z",
      "side": 1,
      "message": "Please refactor to a helper in SurfaceVk.cpp. Then you can keep the constants in the cpp as well.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1326781b_783e91e8",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-03T15:47:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cef73df0_bbe7a051",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 110,
        "endChar": 0
      },
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a20b974a_4db113a5",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-02T18:52:14Z",
      "side": 1,
      "message": "This is a little dubious. How does gbm synchronize with the submission then?",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f25603_81fee932",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1125810
      },
      "writtenOn": "2022-05-03T12:35:06Z",
      "side": 1,
      "message": "GBM itself doesn\u0027t synchronise with anything. All it does is give the caller a handle to the current front buffer, with the user performing presentation itself (e.g. the GBM user obtains the current front buffer from GBM and then generates a KMS request including the handle to that buffer).\n\nUsers such as Weston use EGL_KHR_fence_sync and EGL_ANDROID_native_fence_sync to mark the bottom-of-pipe synchronisation point, transform that into a dma-fence, and synchronise against it in the kernel. Users who do not do this need to run on a system implementing the old implicit synchronisation workflow, or see incoherent output. There is no third option as GBM does not participate in the actual presentation.",
      "parentUuid": "a20b974a_4db113a5",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39d9758_46d237be",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-03T14:20:07Z",
      "side": 1,
      "message": "Thanks for the explanation. Some of this could be useful in the comment",
      "parentUuid": "f5f25603_81fee932",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "131ba3b2_8710d017",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 274,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-03T15:47:20Z",
      "side": 1,
      "message": "Thanks Daniel, I have just copied your answer as a comment in the code.",
      "parentUuid": "f39d9758_46d237be",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bebdbb7_aed350f8",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 309,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-02T18:52:14Z",
      "side": 1,
      "message": "There are a number of optimizations happening at swap time. Sounds like you are only interested in disabling the layout change optimization (to PRESENT_SRC). If so, you can pipe down the flag (which by the way, please turn into an `enum class`) to the optim function and disable only that part.",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c340d7f_ab2d0f53",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 309,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-04T13:03:09Z",
      "side": 1,
      "message": "I am not 100% sure how the MS image is resolved in `ContextVk::optimizeRenderPassForPresent()`, but I only manage to get it working by resolving the MS image with the transfer at the end of `WindowSurfaceVk::present()`.",
      "parentUuid": "0bebdbb7_aed350f8",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbaa3776_b6779277",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 8
      },
      "lineNbr": 309,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-04T15:50:35Z",
      "side": 1,
      "message": "It\u0027s done only if the last render pass was to the swapchain, in which case it will use a subpass resolve operation. It\u0027s ok if you are not able to resolve this right now, but would you please open a new bug so it\u0027s tracked?",
      "parentUuid": "7c340d7f_ab2d0f53",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d454b93d_38c19752",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-02T18:52:14Z",
      "side": 1,
      "message": "Unused.\n\nIt looks like ANI is not overriden. Doesn\u0027t `SurfaceVk::prepareSwap()` cause trouble with this? Or is it just that `mNeedToAcquireNextSwapchainImage` is never set? If that latter, please `ASSERT(!mNeedToAcquireNextSwapchainImage)` in `presentImpl()`.",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfc41060_2bc34bc4",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-03T15:47:20Z",
      "side": 1,
      "message": "\u003e mNeedToAcquireNextSwapchainImage  is never set\n\nExactly. I added the assert.",
      "parentUuid": "d454b93d_38c19752",
      "revId": "c849f0e445adf771b551387fbd43a414205d20e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}