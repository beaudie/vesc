{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "601217fd_57919a81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T09:49:51Z",
      "side": 1,
      "message": "-1ing temporarily to avoid it slipping through.",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af707038_fbaea965",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T09:49:51Z",
      "side": 1,
      "message": "Nack. This is reverting https://chromium-review.googlesource.com/c/angle/angle/+/2241780\n\nWhy is a CPU-accessible AHB getting optimal tiling?",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68f7bf74_950a4f55",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-04T19:44:49Z",
      "side": 1,
      "message": "But that CL refers to Samsung ICD specific functionality. Linear tiling isn\u0027t going to work on NVIDIA, and we really access AHB CPU via AHB lock/unlock anyway. The previous CL is not correct as it assumes things about the Vulkan ICD based on AHB usage.",
      "parentUuid": "af707038_fbaea965",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc95f644_d0e67df1",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-04T21:30:30Z",
      "side": 1,
      "message": "\u003e But that CL refers to Samsung ICD specific functionality\n\nnot quite, the code has nothing specific to any vendor\u0027s ICD. The vulkan spec says this about \"VK_IMAGE_TILING_OPTIMAL\" -\n VK_IMAGE_TILING_OPTIMAL specifies optimal tiling (texels are laid out in an\n implementation-dependent arrangement, for more optimal memory access).\n\nHow is an app/user going to CPU read/write data from/to a buffer that has \"implementation-dependent arrangement\" without corrupting it?",
      "parentUuid": "68f7bf74_950a4f55",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "309cb9fa_beb02f38",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-04T22:29:27Z",
      "side": 1,
      "message": "No, the code is specific to Samsung ICDs and any Vulkan ICD that allows creation of linear + input attachment images.\n\n\u003e How is an app/user going to CPU read/write data from/to a buffer that has \"implementation-dependent arrangement\" without corrupting it?\n\nThat\u0027s up to the AHardwareBuffer implementation, and it\u0027s NOT through Vulkan. The user uses AHardwareBuffer_lock/unlock to perform CPU read/write operations on an AHB, NOT Vulkan. The vendor implements AHB lock/unlock in a way that ensures the buffer exposed to the user is the right tiling. For example, in minigbm, amdgpu driver implements a transfer operation in lock() if the tiling is different.\n\nAgain, Vulkan !\u003d AHardwareBuffer and Android does allow for creation of optimal images against AHB, there is NO requirement that the GPU Android running on is UMA.",
      "parentUuid": "fc95f644_d0e67df1",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9c6b099_a94ca359",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-05T20:50:44Z",
      "side": 1,
      "message": "IIUC, you are erroring out while creating the vkimage since the tiling mode doesnt support desired usage.\n\nim curious, if we force the tiling mode to optimal all the time for AHBs (since ANGLE has no other information to deduce tiling mode) how do you handle the case where the AHB actually was allocated in a layout which vulkan understands as linear? wouldn\u0027t that be a conflict as well?",
      "parentUuid": "309cb9fa_beb02f38",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fe3b3f0_05745424",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-08T15:33:41Z",
      "side": 1,
      "message": "\u003e im curious, if we force the tiling mode to optimal all the time for AHBs (since ANGLE has no other information to deduce tiling mode) how do you handle the case where the AHB actually was allocated in a layout which vulkan understands as linear? wouldn\u0027t that be a conflict as well?\n\nThat\u0027s a good question; we also probably can\u0027t just say that the vendor should handle it, since Vulkan is supposed to let you make explicit choices about the tiling. On NVIDIA at least, you could get away with creating either a linear or optimal image provided it\u0027s used for image sampling and doesn\u0027t have attachemnt usage, so this is something that is allowed and might be exercised by some code already (this is on Android emulators).\n\nSo this suggests that there has to be a way to restrict tiling to one type or another. But, AFAIK there\u0027s also no way for the Vulkan vendor to communicate that all external AHB-compatible images need to be created with a particular tiling, right? So could this be a hole in the spec definition of Android hardware buffer?",
      "parentUuid": "c9c6b099_a94ca359",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74d5a2b9_7719bf90",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-09T21:08:26Z",
      "side": 1,
      "message": "\u003e So could this be a hole in the spec definition of Android hardware buffer?\n\nindeed, i was looking at language in [1] but was not that helpful.\n\nIf we take a look at other API specs related to \"external\" memory, say \"glEGLImageTargetTexture2DOES\" [2], the spec lays out things very explicitly like so -\n\n External textures ... Their default min filter is LINEAR.  It is an         \n INVALID_ENUM error to set the min filter value to anything other than         \n LINEAR or NEAREST.  The default s and t wrap modes are CLAMP_TO_EDGE\n ...\n The command\n\n            void EGLImageTargetTexture2DOES(enum target, eglImageOES image);\n\n with \u003ctarget\u003e set to TEXTURE_EXTERNAL_OES defines the currently bound external\n texture object to be a target sibling of \u003cimage\u003e.  The width, height, format,\n type, internalformat, border, and image data are all determined based on the\n specified eglImageOES \u003cimage\u003e\n\nEssentially saying all attributes of the texture is imported directly from the eglimage (which gets it from the AHB)\n\nWould it be possible to get a comment from Google\u0027s Vulkan working group team on whether we can have a clarification added to the spec saying something to the effect of - \"implementations can ignore the tiling mode passed in VkImageTiling of VkImageCreateInfo when importing AHBs and obtain the mode from the AHB through implementation specific APIs\"\n\n\n[1] https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_ANDROID_external_memory_android_hardware_buffer.html\n\n[2] https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image_external.txt",
      "parentUuid": "3fe3b3f0_05745424",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e08ca3d_4dbcb8dd",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-09T21:11:54Z",
      "side": 1,
      "message": "Sure, I can ask around.",
      "parentUuid": "74d5a2b9_7719bf90",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9305896_e683a063",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-09T21:14:44Z",
      "side": 1,
      "message": "Another way we could solve it is if vkgetAndroidhardwarebufferpropertiesANDROID returned extra fields as to what tiling modes were allowed by the implementation. WDYT?",
      "parentUuid": "4e08ca3d_4dbcb8dd",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd41be1d_fc03d204",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-09T21:24:36Z",
      "side": 1,
      "message": "that could work too, with a couple of clarifications -\n\n1. given that tiling mode is closely related to format and usage bits, this \"VkAndroidHardwareBufferFormatPropertiesANDROID\" might be more appropriate?\n\n2. this would involve API change, at least struct change. Which mean latency for approval and resistance to change could be huge.",
      "parentUuid": "a9305896_e683a063",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1695e854_822d6c7a",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T09:49:51Z",
      "side": 1,
      "message": "Could potentially be a problem with framebuffer fetch.\n\nCan we instead \u0026 the result of this function with the actual usage support for the format, and let it automatically drop whatever usage is not supported?",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba370fb4_385c0bd7",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2021-03-04T19:44:49Z",
      "side": 1,
      "message": "We don\u0027t actually need to exclude input attachemnt usage, it turnsout.",
      "parentUuid": "1695e854_822d6c7a",
      "revId": "10cfeb292a1951a7849ae3b1ea157062a46344b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}