{
  "comments": [
    {
      "key": {
        "uuid": "1611dff6_381f7965",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-18T18:11:19Z",
      "side": 1,
      "message": "this will be a pretty significant performance hit. I don\u0027t quite follow why the channels must be aligned either.",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02cf38f6_7d73d165",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-18T18:16:21Z",
      "side": 1,
      "message": "GPU conversion does not work if it involves 8bit unaligned data. GPU can swizzle if channels are 8bit aligned though. Unless we want to do something fancy with compute shaders a CPU convert was the simpler approach",
      "parentUuid": "1611dff6_381f7965",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dc2c55b_4971019a",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-18T18:21:31Z",
      "side": 1,
      "message": "I think we should probably cache the \"is-buffer-format-gpu-convertible\" property in vk::Format. but that could be a split prior CL.",
      "parentUuid": "02cf38f6_7d73d165",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dccee623_65e57614",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-18T18:23:28Z",
      "side": 1,
      "message": "Or not necessarily a split CL. Just this check is quite expensive as it is doing four divisions and several other boolean ops.",
      "parentUuid": "4dc2c55b_4971019a",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fb8e1b1_c2d87700",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-18T19:17:26Z",
      "side": 1,
      "message": "we can definitely cache it but massaging it in for already existing code will be a big change, right?\n\nIf we do add a member that only this specific format uses, it will be an unnecessary increase in struct size for just one format. Need to think about this a little bit. It might be better if we convert this check into one that uses a clever bitwise trick?",
      "parentUuid": "dccee623_65e57614",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c6dc5e_8f2ce066",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-18T19:31:46Z",
      "side": 1,
      "message": "I think it\u0027s okay to increase the struct size by one bool. You can cache it in the vk::Format constructor. If we ever need to pack data we can look at using bitsets in the future. But for now I think a bool is fine.",
      "parentUuid": "5fb8e1b1_c2d87700",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18bd5f16_a956d233",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-18T19:39:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "31c6dc5e_8f2ce066",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c97b3677_c1d66fa5",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-19T15:44:02Z",
      "side": 1,
      "message": "jamie, i was just wondering if we can reuse vkBufferFormatIsPacked in some way?\n\nCan we massage it so that if vkBufferFormatIsPacked is true and it is a vertex buffer then we go the CPU transfer route?",
      "parentUuid": "18bd5f16_a956d233",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "6e7549842d4784042fcf872c7c6a63d4cc1f881d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}