{
  "comments": [
    {
      "key": {
        "uuid": "68c0da44_c54f875b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 753,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-10T15:56:35Z",
      "side": 1,
      "message": "I would like to handle all of the asynchronous linking from within the Program class itself.  Context shouldn\u0027t have to be aware that the program is still linking or do any synchronization around that.",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 753,
        "endChar": 24
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "317c3431_d7c81455",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 753,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-07-11T06:36:05Z",
      "side": 1,
      "message": "There could be some subtle cases that Context has to be aware Program\u0027s linking status. For example, if an active Program was not linked successfully, a GL draw call after the link should use the existing executable code, otherwise it should use newly generated code. Without Context, Program can\u0027t handle this by itself.",
      "parentUuid": "68c0da44_c54f875b",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 753,
        "endChar": 24
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6ff3d61_e9ef61d9",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 753,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-11T13:31:02Z",
      "side": 1,
      "message": "I think this would be better done by calling State::onProgramExecutableChange and making mDirtyBits mutable. It\u0027s annoying that this will need to make more things \"mutable\" but I think it\u0027s a better way.\n\nI agree with Geoff.",
      "parentUuid": "317c3431_d7c81455",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 753,
        "endChar": 24
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35607115_f04387e1",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 753,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-11T15:00:27Z",
      "side": 1,
      "message": "Are you sure that it should use the existing binary if link fails?  The first thing we do in Program::link is destroy the current binary.",
      "parentUuid": "a6ff3d61_e9ef61d9",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 753,
        "endChar": 24
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c897baf5_9e00dcdf",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 753,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-07-12T00:57:37Z",
      "side": 1,
      "message": "The spec text(ES3.10 Page 72):\n\"If LinkProgram or ProgramBinary successfully re-links a program object\nthat is active for any shader stage, then the newly generated executable code will\nbe installed as part of the current rendering state for all shader stages where the\nprogram is active. Additionally, the newly generated executable code is made part\nof the state of any program pipeline for all stages where the program is attached.\nIf a program object that is active for any shader stage is re-linked unsuccessfully, the link status will be set to FALSE, but any existing executables and associated state will remain part of the current rendering state until a subsequent call to\nUseProgram, UseProgramStages, or BindProgramPipeline removes them from\nuse.\"\n\nIt\u0027s not just how to update mDirtyBits. The fact is that mDirtyBits is going to be modified probably. Anyone who reads mDirtyBits has to be aware of this \"linking\" state, and waits until the state finally is settled down.",
      "parentUuid": "35607115_f04387e1",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 753,
        "endChar": 24
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "284037e5_a0e07fd4",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5571,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-10T15:56:35Z",
      "side": 1,
      "message": "I\u0027m not sure if this is an issue, the handling of the program executable change in the D3D backend can block until the program is linked but I suspect that any GL calls that require a program will do queries on it during validation and force the link to finish before that happens.\n\nWe shouldn\u0027t have a beginLink and endLink on the program object.  beginLink should be called inside of Program::Link and endLink should be called methods inside of Program that require the link to be resolved.",
      "range": {
        "startLine": 5558,
        "startChar": 0,
        "endLine": 5571,
        "endChar": 5
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3404f79_1379dad1",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5571,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-07-11T06:36:05Z",
      "side": 1,
      "message": "Essentially the desired logic is to block the programs(Program, ProgramD3D, ProgramGL, ...) when they are linking. We can achieve this either internally or externally for programs.\nThe proposal in this CL blocks programs externally from Context. It seems simple in my opinion.\nI once tried to go through each public method inside Program, and check whether it should be blocked for linking. The rules I used are:\n  The method must not write the values that the background linking tasks will read.\n  The method must not read the values that the background linking tasks will write.\nBut it tuned out to be a hard job for me to figure this out clearly, as there is no known boundary regarding what a background linking task should read and write. To be simple, we may need to block all public methods for programs. As programs are all large class with dozens of methods, this may lead to more scattered code lines. I can continue to work this way if you really want a try.",
      "parentUuid": "284037e5_a0e07fd4",
      "range": {
        "startLine": 5558,
        "startChar": 0,
        "endLine": 5571,
        "endChar": 5
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca2aa547_b6eb8001",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5571,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-11T15:00:27Z",
      "side": 1,
      "message": "I would prefer to keep it within the Program class because then it becomes a contained implementation detail of the Program class instead of every class that uses a program needing to know how it works.\n\nIt\u0027s perfectly fine to have a private method in program, something like finishPendingLink that checks if the link is still ongoing and blocks if it is.  We can then call this method in each public program function, only adding a single line to each public method.",
      "parentUuid": "d3404f79_1379dad1",
      "range": {
        "startLine": 5558,
        "startChar": 0,
        "endLine": 5571,
        "endChar": 5
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff1b144_2ac625e9",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5571,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-07-12T00:57:37Z",
      "side": 1,
      "message": "Okay, I will try this way.",
      "parentUuid": "ca2aa547_b6eb8001",
      "range": {
        "startLine": 5558,
        "startChar": 0,
        "endLine": 5571,
        "endChar": 5
      },
      "revId": "525c957a3cf225297f4efca886bba407365df590",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}