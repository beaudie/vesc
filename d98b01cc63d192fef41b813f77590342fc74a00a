{
  "comments": [
    {
      "key": {
        "uuid": "0dca7887_3890cedb",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1233,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-09-19T15:14:00Z",
      "side": 1,
      "message": "releaseResources or releaseResourceUses would make this more clear.",
      "range": {
        "startLine": 1233,
        "startChar": 19,
        "endLine": 1233,
        "endChar": 37
      },
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ccb225_1a041093",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1233,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-19T18:32:44Z",
      "side": 1,
      "message": "It\u0027s also updating the serials. Changed to releaseResourceUsesAndUpdateSerials.",
      "parentUuid": "0dca7887_3890cedb",
      "range": {
        "startLine": 1233,
        "startChar": 19,
        "endLine": 1233,
        "endChar": 37
      },
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17bfcd97_a5670194",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1239,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-09-18T20:40:54Z",
      "side": 1,
      "message": "Should this check that the new serial is not earlier than the current?\n\nASSERT(serial \u003e\u003d use-\u003eserial);\n\nThe scenario I\u0027m thinking of is:\n\nStart:\nuse-\u003ecounter \u003d 2\nuse-\u003eserial \u003d 0\n\nThread 1 calls updateResourceUses():\nuse-\u003ecounter \u003d 1\nuse-\u003eserial \u003d 2\n\nThread 2 calls updateResourceUses():\nuse-\u003ecounter \u003d 0\nuse-\u003eserial \u003d 1\n\nThen we attempt to free the resource when we see serial 1 has completed, even though it\u0027s still needed for serial 2.\n\nOr would all of the work for serial 1 need to be submitted before serial 2 can be started/submitted, so this can\u0027t happen?",
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fee20978_4fa75f2f",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1239,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-19T18:32:44Z",
      "side": 1,
      "message": "I did have a similar ASSERT in a later patch set. Moved here, will see if it passes.",
      "parentUuid": "17bfcd97_a5670194",
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27465609_076f132c",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 17
      },
      "lineNbr": 380,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-09-19T15:14:00Z",
      "side": 1,
      "message": "Does this need to be a pointer? Is it possible that the CommandGraphResource is deleted before all references to mUse are released?  At least for this patch, it could be just a member and the command graph could take the address of it but I\u0027m not sure how that may change later in the stack.",
      "range": {
        "startLine": 379,
        "startChar": 0,
        "endLine": 380,
        "endChar": 27
      },
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a19ffd4b_590c1b2e",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 17
      },
      "lineNbr": 380,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-19T18:32:44Z",
      "side": 1,
      "message": "It is a pointer. A shared_ptr to be specific. When we copy a shared_ptr around it\u0027ll internally addref/deref to an internal pointer.",
      "parentUuid": "27465609_076f132c",
      "range": {
        "startLine": 379,
        "startChar": 0,
        "endLine": 380,
        "endChar": 27
      },
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29b39da2_63fee67b",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 17
      },
      "lineNbr": 380,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-09-19T20:45:51Z",
      "side": 1,
      "message": "I understand, my question is could it not be a pointer, just a regular \u0027ResourceUse mUse\u0027?\n\nCommandGraph::mResourceUses would be a std::vector\u003cResourceUse*\u003e.\n\nThe main reason for it to be in a shared_ptr is that the CommandGraphResource::mUse could outlive the CommandGraphResource and I don\u0027t think that\u0027s the intent.  Right now it does a double ref-counting by having the ref count in the shared_ptr and the counter which both get incremented and decremented when ResourceUse is stored in CommandGraph.",
      "parentUuid": "a19ffd4b_590c1b2e",
      "range": {
        "startLine": 379,
        "startChar": 0,
        "endLine": 380,
        "endChar": 27
      },
      "revId": "d98b01cc63d192fef41b813f77590342fc74a00a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}