{
  "comments": [
    {
      "key": {
        "uuid": "198a632f_ade15db5",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-04T18:38:28Z",
      "side": 1,
      "message": "very very nitty, but missing one whitespace character here",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_c5c071d0",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-04-15T15:46:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "198a632f_ade15db5",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9966f57_0cb437d6",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-04T18:38:28Z",
      "side": 1,
      "message": "trailing whitespace -- there\u0027s a few places in the patch where it popped in, can you remove it all?",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b175f_3690d082",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-04-15T15:46:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9966f57_0cb437d6",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9966f57_4cbe3fb6",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-04T18:38:28Z",
      "side": 1,
      "message": "we traditionally use std::pair for pairs (with optional typedef)",
      "range": {
        "startLine": 113,
        "startChar": 11,
        "endLine": 113,
        "endChar": 18
      },
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_85a3592c",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-04-15T15:46:03Z",
      "side": 1,
      "message": "I don\u0027t see any advantage to using std::pair here. With an explicit struct the first and second fields have a useful name.",
      "parentUuid": "f9966f57_4cbe3fb6",
      "range": {
        "startLine": 113,
        "startChar": 11,
        "endLine": 113,
        "endChar": 18
      },
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b175f_568f14d3",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-15T17:32:54Z",
      "side": 1,
      "message": "It ties into the std::map issue. See below.",
      "parentUuid": "d9544bb3_85a3592c",
      "range": {
        "startLine": 113,
        "startChar": 11,
        "endLine": 113,
        "endChar": 18
      },
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9995785_b8c44151",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-04-04T20:53:45Z",
      "side": 1,
      "message": "Are you avoiding a map on purpose here?",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b97b175f_d66964d0",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-04-15T15:46:03Z",
      "side": 1,
      "message": "Yes, maps have quite a bit of memory overhead and each node is a separate allocation. Searching also takes several pointer indirection. A vector\u0027s elements are just compactly allocated as an array and searching through them is very fast when the number of elements is small. Given that each TextureStorage carries this cache, and in the most common case there\u0027s only one element, this is the most efficient.",
      "parentUuid": "b9995785_b8c44151",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_2010531d",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-15T17:32:54Z",
      "side": 1,
      "message": "I agree with your analysis -- I\u0027m uncertain on how much our use of std::map causes a real performance loss. Do you think we should avoid using map in performance critical code that could slow down draw calls? Or is it something that is negligible and we can afford to use map for code clarity.",
      "parentUuid": "b97b175f_d66964d0",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9436b32_cb2e150e",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-04-16T14:16:29Z",
      "side": 1,
      "message": "Yes, we should avoid std::map in performance critical code, except for maps that often have elements inserted and removed. We\u0027ve already started using std::unordered_map in several places for performance reasons. But even unordered_map is slow when the number of elements is tiny, because the hash takes longer to compute than iterating through part of an array.\n\nI don\u0027t think the use of std::map increases code clarity. It seems obvious that SRVCache is supposed to be a cache of SRV\u0027s.\n\nI could add a comment stating that we expect the cache to be small, and hence a vector to be faster than a map?",
      "parentUuid": "d9544bb3_2010531d",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9466f41_cca70f5a",
        "filename": "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-04-16T14:22:44Z",
      "side": 1,
      "message": "RE unordered map -- it isn\u0027t available on older compilers, such as OSX GCC, which might be relevant for the ANGLE refactor. The code as it stands is good with me -- just maybe you could more clearly define \u0027performance critical\u0027 so we have a consistent rule for when to avoid std::map or other tree-like structures?",
      "parentUuid": "d9436b32_cb2e150e",
      "revId": "fcc166936d141805b6dbc5a92b851b91a943a9b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}