{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf215a70_5abae127",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-13T04:09:47Z",
      "side": 1,
      "message": "Code LGTM, but we need to make sure this doesn\u0027t regress performance. Could you do a before/after of the CPU time of traces (with minimized GPU work, or however you do that) to see if there is any perceptible effect?",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9949d27e_1352cb0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-13T04:12:20Z",
      "side": 1,
      "message": "It will have a slight detrimental effect because it adds instructions to the uniform update path. I still don\u0027t quite follow the motivation - is this for defensive programming? Unless there\u0027s a provable bug, maybe we should forgo the change?",
      "parentUuid": "cf215a70_5abae127",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "125a2788_0f787eee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-13T04:23:11Z",
      "side": 1,
      "message": "It\u0027s not defensive programming. This is the last usage of the context resource use list that cannot be removed until the recording of the uniform buffer usage is correctly done in the render pass the commands are actually going to be recorded.\n\nActually now that I think about it, this is an existing bug regardless of where the resource use list lives. We are currently recording the buffer\u0027s use before processing the dirty bits. Dirty bit handling may close the render pass, which can cause a vkQueueSubmit. So the buffer containing the uniforms is no longer retained even though the subsequent draw call (now in a new render pass) is using it.\n\nI realize this can (could) be measured in a microbenchmark, but it\u0027s unknown if it realistically affects apps. Let\u0027s wait and see.",
      "parentUuid": "9949d27e_1352cb0e",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c413bb09_3ea693ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-13T04:52:06Z",
      "side": 1,
      "message": "It all adds up. The story with optimization is that any measurable amount accumulates.",
      "parentUuid": "125a2788_0f787eee",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "637efa2f_97ac4d84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-14T03:07:44Z",
      "side": 1,
      "message": "Well in this case the optimization leads to a bug, so it doesn\u0027t matter if it makes things faster.\n\nI\u0027m working on a regression test for this.",
      "parentUuid": "c413bb09_3ea693ed",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dd0f15a_70b53b7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-14T05:15:19Z",
      "side": 1,
      "message": "The bug is definitely there, but it seems impossible to trigger because of a number of band-aids currently in code. Assume the following:\n\n- Next serial is S\n- FBO has changed\n- Uniforms are dirty\n\nWhen a draw call is issued:\n\n- A uniform buffer may be allocated, retained to be tagged with S\n- A descriptor set may be allocated/retrieved from cache, retained to be tagged with S\n- Dirty bit handling closes the render pass, uniform buffer and desc set are now tagged with S. Next serial is S+1\n- Draw call is recorded in submission S+1. Uniform buffer and desc set are used in this submission without being tagged with S+1.\n\nHowever:\n\n- The uniform buffers are allocated from DynamicBuffer, and they are trimmed with `releaseInFlightBuffersToResourceUseList`. This function does a retain before releasing, which means retaining the uniform buffers above was unnecessary, or rather, this function is hacking things to workaround the bug.\n\n- The descriptor set for uniforms is cached, and not deleted until program is deleted. Note that the program can only be deleted at submission S+1 (because that\u0027s the last draw call). When that happens, the desc set is added to ContextVk\u0027s garbage list. This is later added to the garbage list to be deleted at batch S+1 in CommandQueue::submitFrame. Again, this means that the retain of the desc set was unnecessary, or rather, releasing the garbage to the current serial is working around the bug.\n\n---\n\nI was trying to trigger a bug by making these resources delete too early, which seems impossible. Not sure if there\u0027s another way to cause a symptom.\n\nI think that barring the data showing any non-negligible regression with this change, we should go ahead with this fix even if it\u0027s currently impossible to cause the original code to fail due to other hacks.",
      "parentUuid": "637efa2f_97ac4d84",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87dc2fd3_82c0588b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-14T15:31:31Z",
      "side": 1,
      "message": "It would be nicer to find a solution that wouldn\u0027t allow restarting a renderpass in the middle of the dirty bit sync. I forget why we added this. If we could figure out up-front if we need to restart, that would be best. Anyway LGTM because this works with the current design.\n\nBTW I don\u0027t follow what you said above, but noticed the RP can restart in the middle of dirty bits in another context- I\u0027m assuming that\u0027s what the problem is.",
      "parentUuid": "6dd0f15a_70b53b7a",
      "revId": "49defe5663867296090707d809f093feda04fdf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}