{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d4b3191d_88c712af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2024-09-20T06:36:14Z",
      "side": 1,
      "message": "This might not be what we want. Thoughts:\n\nAre there any other scenarios the allow list was protecting us against? Any state we don\u0027t want to get into?\n\nI know we don\u0027t allow transform feedback, for example\n\nWe also don\u0027t want to allow glBindFramebuffer\n\nOr glDrawBuffers\n\nSo we can\u0027t just drop the allow list\n\nWe either need to keep it or turn it into a ban list\n\nFurthermore ... if we keep the ban list, we might as well keep the EXT implementation\n\nThe easiest path forward might be to keep the ban list and just do PLS introspection",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "980e4a84_2e8e0da4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-20T14:24:30Z",
      "side": 1,
      "message": "Is this purely removing the implementation of ANGLE_pls over EXT_pls, or is there some form of support for EXT_pls (as an extension ANGLE would expose) that\u0027s being lost at the same time?\n\nI\u0027m asking because we\u0027re looking into exposing EXT_pls from the Vulkan backend, if there\u0027s anything to be salvaged from this for that purpose, I\u0027d like that part to stay at least.\n\n(otherwise I have no stake in this)",
      "parentUuid": "d4b3191d_88c712af",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea2e0667_c8654d87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2024-09-20T15:41:55Z",
      "side": 1,
      "message": "For context, the thought was that we could simplify the ANGLE_pls spec and speed up release by dropping this backend. That\u0027s a super cool idea to expose EXT_pls. I don\u0027t *think* any of this could could be used for that specific purpose, but if exposing it on the GL backend, maybe PLSProgramCache could be reused for implementing EXT_pls2 over EXT_pls.",
      "parentUuid": "980e4a84_2e8e0da4",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "452f5b63_0647b5a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-09-20T23:42:05Z",
      "side": 1,
      "message": "Opinions, not strong ones:\n\nChris, did your experiments outside ANGLE show that using native EXT_pls wasn\u0027t faster than using shader images / framebuffer fetch? If so I\u0027m in favor of removing this code path and continuing to simplify the ANGLE_pls spec.\n\nChanging the allowlist to a ban list would make the ANGLE_pls spec easier to understand. There\u0027s a risk that new GLES extensions would require updates to the ANGLE_pls spec, but I think we can assume GLES isn\u0027t evolving quickly any more.\n\nWith ANGLE_pls\u0027s EXT_pls backend removed, are all the earlier constraints still needed, like forbidding transform feedback from being enabled? The less state in the extension, the simpler the browser-side implementation will be. The underlying EXT_pls doesn\u0027t document restrictions on transform feedback.\n\nI\u0027m all in favor of exposing the real EXT_pls in the Vulkan backend and don\u0027t want to take steps backward from that goal, but am also keenly interested in getting ANGLE_pls over the finish line.",
      "parentUuid": "ea2e0667_c8654d87",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d47b4e3f_0ce9638d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-21T02:00:21Z",
      "side": 1,
      "message": "Ok, looks like there isn\u0027t much, if needs be, we can recover anything we can from PLSProgramCache after this change lands.\n\nW.r.t transform feedback, pausing and restarting transform feedback causes a render pass break in the Vulkan backend due to some needed barrier (some detail of VK_EXT_transform_feedback). That\u0027s the reason I believe this restriction exists in ANGLE_pls right now.",
      "parentUuid": "452f5b63_0647b5a8",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5602b25_c56066b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2024-09-26T01:31:53Z",
      "side": 1,
      "message": "\u003e did your experiments outside ANGLE show that using native EXT_pls wasn\u0027t faster than using shader images / framebuffer fetch?\n\nThey did. The only advantage of EXT_pls is being able to go memoryless, but that\u0027s not going to be supported by WebGL anyway. In fact, I think EXT_pls is strictly worse because we have to explicitly clear and store with fullscreen draws. Let\u0027s just drop it.\n\n\u003e pausing and restarting transform feedback causes a render pass break\n\nConsidering Chrome already causes render pass breaks every time it interrupts, I would vote in favor of just living with the break during transform feedback.\n\n\u003e are all the earlier constraints still needed?\n\nI think we can greatly simplify it. I think we just need to disallow modifying or changing the currently bound framebuffer while PLS is active and everything else is fair game.",
      "parentUuid": "d47b4e3f_0ce9638d",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f25850ab_2df2b69c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2024-09-26T01:48:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5602b25_c56066b1",
      "revId": "487658d59b2faa59c036a1d1185f69b88408f22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}