{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7dff893e_5f91b72b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5844,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:43:30Z",
      "side": 1,
      "message": "It\u0027s going to be very easy to forget to do this. How about we make this automatic like this:\n\n- `commandBufferHelper-\u003ebufferWrite()` would set a bool in the command buffer that a host visible buffer is written to\n- In `ContextVk::flushOutsideRenderPassCommands`, we query whether the outside-RP command buffer has that flag, and call `onHostVisibleBufferWrite`\n\nThen all callers to `bufferWrite` don\u0027t have to remember to do this.",
      "range": {
        "startLine": 5841,
        "startChar": 0,
        "endLine": 5844,
        "endChar": 17
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa7dd75_d91cbcfb",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5844,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-02-24T00:33:25Z",
      "side": 1,
      "message": "\u003e It\u0027s going to be very easy to forget to do this\n\nI was wrestling with this. In `ContextVk` it was ok as I set up a static function that was taking care of this. Didn\u0027t quite settle on for this file.\n\nLike the suggestion. A minor thing that I am seeing -- it looks like a memory barrier is inserted in `OutsideRenderPassCommands` before calling in flush -- https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/renderer/vulkan/ContextVk.cpp#7618\n\nDo you think if I change the check to a predicate something like would work.\n```\nContextVk::isAnyHostVisibleBufferWritten() {\n  mOutsideRPCommands-\u003eonHostVisibleBufferWrite() || mRPCommands-\u003eonHostVisibleBufferWrite()\n}\n```",
      "parentUuid": "7dff893e_5f91b72b",
      "range": {
        "startLine": 5841,
        "startChar": 0,
        "endLine": 5844,
        "endChar": 17
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a021962_a57bcc1f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5844,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-24T03:16:58Z",
      "side": 1,
      "message": "Ah forgot the barrier is inserted on flush, that\u0027s more efficient in fact.\n\nSo, ok we can still keep it easy. `onHostVisibleBufferWrite` would set a flag in the command buffer that contextVk could query (like `commands-\u003ehasHostVisibleBufferWrite()`). Then every time the outsideRP or the RP commands are flushed, the flag is taken from the command buffer and `||`ed with `ContextVk::mIsAnyHostVisibleBufferWritten`. The barrier can remain as is in the flush function.",
      "parentUuid": "2fa7dd75_d91cbcfb",
      "range": {
        "startLine": 5841,
        "startChar": 0,
        "endLine": 5844,
        "endChar": 17
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68c2fc43_f18a7ee4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1703,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:43:30Z",
      "side": 1,
      "message": "`\u003e\u003d`? (may not exist and need an implementation)",
      "range": {
        "startLine": 1703,
        "startChar": 33,
        "endLine": 1703,
        "endChar": 34
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01d80aec_33c40f2c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1703,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-02-24T00:33:25Z",
      "side": 1,
      "message": "I was also considering this at the first. Then I saw an assert checking for `\u003c\u003d` in here -- https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/renderer/vulkan/ResourceVk.h#76 -- and reasoned may be thats why`\u003e\u003d` implementation didn\u0027t exist.",
      "parentUuid": "68c2fc43_f18a7ee4",
      "range": {
        "startLine": 1703,
        "startChar": 33,
        "endLine": 1703,
        "endChar": 34
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "696faa20_294cdc3b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1703,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-24T03:16:58Z",
      "side": 1,
      "message": "I think that ASSERT is just being cautious since redundantly setting the serial to the same value is not technically a problem. In the end, changing this to `\u003e\u003d` just avoids the redundant set and the slight cost of that.",
      "parentUuid": "01d80aec_33c40f2c",
      "range": {
        "startLine": 1703,
        "startChar": 33,
        "endLine": 1703,
        "endChar": 34
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3f9763d_00cd98ad",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1718,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:43:30Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 1718,
        "startChar": 32,
        "endLine": 1718,
        "endChar": 33
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0c8942b_f45ecbb0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2782,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:43:30Z",
      "side": 1,
      "message": "Lambdas have some intrinsic inefficiencies (search for `type erasure`) so we try to avoid them as much as possible. This is debug code, so it doesn\u0027t matter much, but in this case we can do something even simpler.\n\nMy suggestion is to just return the `string` here and have the caller deal with it.\n\n```suggestion\nstd::string RenderPassCommandBufferHelper::getCommandDiagnostics()\n```",
      "range": {
        "startLine": 2781,
        "startChar": 0,
        "endLine": 2782,
        "endChar": 50
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd18815b_2bd78291",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2782,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-02-24T00:33:25Z",
      "side": 1,
      "message": "I got influenced by the name of the function to use this approach.\n\n\u003e My suggestion is to just return the string here and have the caller deal with it.\n\nüëç",
      "parentUuid": "d0c8942b_f45ecbb0",
      "range": {
        "startLine": 2781,
        "startChar": 0,
        "endLine": 2782,
        "endChar": 50
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07821eb7_c9051589",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2841,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-23T21:43:30Z",
      "side": 1,
      "message": "... and here would be:\n\n```suggestion\n    return out.str();\n```",
      "range": {
        "startLine": 2841,
        "startChar": 0,
        "endLine": 2841,
        "endChar": 20
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf48ba22_ce95da07",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2841,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-02-24T00:33:25Z",
      "side": 1,
      "message": "Sounds good. Will change the name of function to something like getDiganostics...",
      "parentUuid": "07821eb7_c9051589",
      "range": {
        "startLine": 2841,
        "startChar": 0,
        "endLine": 2841,
        "endChar": 20
      },
      "revId": "cafbd7c17683058b1cad329b798fb092fce7ecc0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}