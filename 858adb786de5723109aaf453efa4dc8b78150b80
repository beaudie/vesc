{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d340e8e_530dcdab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-05T03:17:10Z",
      "side": 1,
      "message": "Using these three functions as a starting point. Unfortunately I can\u0027t find a bullet-proof solution to ensure what I claim is \ncontext-local is actually context-local (see doc I just shared with you). Open to ideas.",
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1756daa7_7a8985cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-07-05T12:32:07Z",
      "side": 1,
      "message": "Looked though the document.\n\nWhat if we split Context in 3 parts with multiple base classes:\n- `LocalContext` base: contains only local state, implements APIs that only access local state.\n- `SharedContext` base: contains rest of the state, implements `ObserverInterface`.\n- `Context` final class: implements rest of the APIs (may use local/shared states).\n\nEntry points will access `LocalContext` without lock or `Context` with lock.\nOther Contexts/threads may only use pointer to `SharedContext` and not to `Context`.\n\nI think this is similar what you was suggesting in \"Enforcing Context-Local Access By the Compiler\", but this is without wrappers and so should not affect performance.",
      "parentUuid": "0d340e8e_530dcdab",
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "496ba653_816c4251",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-05T14:42:06Z",
      "side": 1,
      "message": "Yes, something like. It\u0027s a big surgery, so I need to think it through. Geoff\u0027s the most familiar with the front-end architecture and details but he\u0027s on vacation. I need to consult with him too.\n\n(thanks for the idea)",
      "parentUuid": "1756daa7_7a8985cc",
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ea42832_eaec3d9e",
        "filename": "src/libANGLE/context_local_call.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-07-05T11:29:28Z",
      "side": 1,
      "message": "Converting this to header and making functions `ANGLE_INLINE` may improve performance. I can experiment with this in a follow up.",
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f350d321_30c6882c",
        "filename": "src/libANGLE/context_local_call.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-05T14:42:06Z",
      "side": 1,
      "message": "Maybe. As it stands, this is equivalent to what we had before, where the functions were in Context.cpp.",
      "parentUuid": "3ea42832_eaec3d9e",
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8516ba02_489a6b4e",
        "filename": "src/libGLESv2/entry_points_gles_1_0_autogen.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-05T18:26:20Z",
      "side": 1,
      "message": "I personally think you should keep the left side form (i.e, keep context-\u003eclearColorx();). And then in future you change this line of code into something like this: LocalContext *localContext \u003d GetValidLocalContext(). Or the other way around, you keep this the same, but change other entry APIs (for example GL_ClientActiveTexture bellow) to something like this: \"ContextShared *contextShared \u003d GetValidGloalContextShared()\".",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 46
      },
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce25093_4c0c0d57",
        "filename": "src/libGLESv2/entry_points_gles_1_0_autogen.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-05T18:36:15Z",
      "side": 1,
      "message": "That\u0027s ultimately good, but until the split happens (which is a _very_ big job) the `ContextLocal*` helpers allow us to clearly separate the unlocked functions from the rest.\n\nOk if we continue with this kind of change for now (I\u0027ll probably be able to convert most or all functions this week), and I\u0027ll see about the Context split as a follow up? Some of Igor\u0027s work is blocked on the removal of these locks, and I\u0027d rather make it as safe as I can (because you never know if and when the Context split happens)",
      "parentUuid": "8516ba02_489a6b4e",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 46
      },
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832ac801_e14e20ba",
        "filename": "src/libGLESv2/entry_points_gles_1_0_autogen.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-05T18:42:01Z",
      "side": 1,
      "message": "We can live with this vulnerability for now, knowing that it will be addressed in near future is what I am saying. But I am also okay if you want to take new form and possibly has to revert back in future.",
      "parentUuid": "3ce25093_4c0c0d57",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 46
      },
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "132020e5_69a09acd",
        "filename": "src/libGLESv2/entry_points_gles_1_0_autogen.cpp",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-05T18:51:34Z",
      "side": 1,
      "message": "Thanks. Yes I\u0027ll revert it as appropriate when the split happens.",
      "parentUuid": "832ac801_e14e20ba",
      "range": {
        "startLine": 82,
        "startChar": 4,
        "endLine": 82,
        "endChar": 46
      },
      "revId": "858adb786de5723109aaf453efa4dc8b78150b80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}