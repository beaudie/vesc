{
  "comments": [
    {
      "key": {
        "uuid": "2fcb2aaa_98fa1b85",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-22T17:25:45Z",
      "side": 1,
      "message": "won\u0027t this always be zero? You just created a new encoder and all you did was call enterAggregateType?",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 57
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "892ded82_ea5e5181",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-23T02:54:58Z",
      "side": 1,
      "message": "You are right. I can remove above two lines.",
      "parentUuid": "2fcb2aaa_98fa1b85",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 57
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35480469_540790ec",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-19T03:28:14Z",
      "side": 1,
      "message": "[a]",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d6af9c_02a8a749",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-22T17:25:45Z",
      "side": 1,
      "message": "Are the only places the offset/arrayStride used is in the SSBO code?\n\nWhy don\u0027t you store them outside of the tree to keep it clear this is something specific to SSBOs. You could store them in a map like a BlockLayoutMap, but instead of indexing by std::string you could index by const TField *. Then you would use the map in writeDotOperatorOutput and any other place it is needed. But using BlockMemberInfo seems more appropriate than adding offset/arrayStride to the AST.",
      "parentUuid": "35480469_540790ec",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41ad9b79_509a76a4",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-23T02:54:58Z",
      "side": 1,
      "message": "Ok. I can try your method in a separate patch. But I think it\u0027s only a change for the saving places of offset/arrayStride. Can we keep the current implementation for structure support for this patch? I can do the refactor for the all field members in the following patch. How do you think?",
      "parentUuid": "75d6af9c_02a8a749",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8222dc2d_07e8b647",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:39:19Z",
      "side": 1,
      "message": "Sure, can do in a follow up. It also will force you to use the BlockLayoutInfo which is meant to be used for the encoders. But my hope was that if you did the refactor I could more easily understand why you needed to add the methods for \"increaseCurrentOffset\". I hope it shouldn\u0027t be necessary to add this method if you use the encoders differently.",
      "parentUuid": "41ad9b79_509a76a4",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b13601b0_10a15b6e",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-25T02:13:26Z",
      "side": 1,
      "message": "Sorry, I am a little confused with your replying. I think increaseCurrentOffset is necessary for both situations. If you don\u0027t mind, you can see patch set 2 https://chromium-review.googlesource.com/c/angle/angle/+/1278097/2/src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp#79. Originally, increaseCurrentOffset was not introduced and I did only use the existed method to increase the offset implicitly. But like Corentin said, that will result that the time complexity is O(number of elements in the array * members of the struct) when it could be O(members of the struct).\n\nAnd I think the refactor that you mentioned is just not add two additional fields member in TField and can save them into a map like \u003cTField, \u003coffset, arrayStride\u003e\u003e. And the calculation of offset/arrayStride still needs to adopt the current method. I am not sure why you think \"increaseCurrentOffset\" can be removed?",
      "parentUuid": "8222dc2d_07e8b647",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40babe2c_ab1f42be",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-25T20:37:43Z",
      "side": 1,
      "message": "OK, I\u0027ll take a look. SGTM",
      "parentUuid": "b13601b0_10a15b6e",
      "range": {
        "startLine": 91,
        "startChar": 12,
        "endLine": 91,
        "endChar": 53
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72edcb3c_cbe5aba9",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T15:44:22Z",
      "side": 1,
      "message": "why does the field\u0027s offset have to be zero if the structure is not the first element in the ssbo?\n\nie..\n\nivec4 i\nvec4 f\nstruct s\n\nwhy would s have offset zero?",
      "range": {
        "startLine": 94,
        "startChar": 20,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f310f68_387e32fe",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-19T03:28:14Z",
      "side": 1,
      "message": "the offset of s is not 0. It will be set in line 91 [a]. \nThe first field member offset in structure means the member in structure itself. See below example.\n\nstruct S\n{\n    int i;\n    float f;\n}\n\nbuffer buf\n{\n    ivec4 i\n    vec4 f\n    struct s\n}\n\ns.i is the first field member in structure.\ns is the field member of ssbo \u0027buf\u0027.\n\nThe location of s.i will be: s.offset + i.offset\nSo we should make sure that the first field member offset in structure is always zero.",
      "parentUuid": "72edcb3c_cbe5aba9",
      "range": {
        "startLine": 94,
        "startChar": 20,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d2cc6b_ec6b4a8d",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-22T17:25:45Z",
      "side": 1,
      "message": "Sorry, I\u0027m just coming up to speed on this stuff now. I apologize for missing your response to my question in your SSBO design doc. Please see me other comment for one suggestion.",
      "parentUuid": "9f310f68_387e32fe",
      "range": {
        "startLine": 94,
        "startChar": 20,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6098f41_b4dc6e31",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:39:19Z",
      "side": 1,
      "message": "OK we can revisit this in a follow-up.",
      "parentUuid": "c1d2cc6b_ec6b4a8d",
      "range": {
        "startLine": 94,
        "startChar": 20,
        "endLine": 94,
        "endChar": 62
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880482e3_289d6524",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T15:44:22Z",
      "side": 1,
      "message": "is it possible you need to recurse more than one level? if you have:\n\na[1][2][3] .. then you would have node \u003d\u003d float, node-\u003eleft \u003d\u003d array of float, and node-\u003eleft-\u003eleft \u003d\u003d array of arrays of float, right? Maybe you should use if type.isArrayOfArrays || IsArrayOfArrays(node-\u003eleft)",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa2f2a65_8e3232b9",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-19T03:28:14Z",
      "side": 1,
      "message": "node is already got from node-\u003egetLeft(). You can see that this function is called by \u0027IsInArrayOfArray(node-\u003egetLeft())\u0027. So we don\u0027t need to recurse more.",
      "parentUuid": "880482e3_289d6524",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bde92c68_2d1eba79",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-22T17:25:45Z",
      "side": 1,
      "message": "I am worried about edge cases with shaders like this:\n\n#version 310 es\n\nprecision mediump float;\n\nout vec4 fragColor;\n\nvoid main()\n{\n\tfloat b[2] \u003d float[2](0.0,0.0);\n\tfloat c[2][2] \u003d float[2][2](float[2](0.0,0.0),float[2](0.0,0.0));\n\n\tfloat f \u003d (b \u003d c[0])[0];\n\n\tfragColor \u003d vec4(1, 0, 0, 1);\n}\n\nImagine that you have a tree with (float) -\u003e (array) -\u003e (array) -\u003e (array of arrays). Maybe you should call IsInArrayOfArrays recursively to make sure.",
      "parentUuid": "fa2f2a65_8e3232b9",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe3eeab4_3f60f281",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-23T02:54:58Z",
      "side": 1,
      "message": "Sorry. IsInArrayOfArray is only used for SSBO field member. And we only process below format usages:\nexpression_no_ssbo \u003d ssbo_access_chain\nssbo_access_chain\u003dexpression_no_ssbo\nssbo_access_chain\u003dssbo_access_chain.\n\nI don\u0027t think we can meet the situation that you provided. Can you give me a ssbo example? Also, even, we have a tree with (float) -\u003e (array) -\u003e (array) -\u003e (array of arrays), I can\u0027t see a problem in my current implementation. I think the first array doesn\u0027t belong to the array of arrays, and the second array is in the array of arrays.",
      "parentUuid": "bde92c68_2d1eba79",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ade7fcae_e02bf392",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:39:19Z",
      "side": 1,
      "message": "OK - so the \"array of arrays\" in this case is always for an array of arrays of SSBO? not the SSBO fields? Then it should be okay - but you should rename your function to make it clear. Like \"IsArrayOfSSBOArrays\"",
      "parentUuid": "fe3eeab4_3f60f281",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e9f4a83_cd1b7d88",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-10-25T07:12:15Z",
      "side": 1,
      "message": "What do you mean \u0027not the SSBO fields\u0027? I think it\u0027s for all array of arrays situations in a SSBO access chain. Currently, I am trying to run all ssbo related deqp cases. And fixing the bugs in existed implementation. I think we run revisit it if there are cases not covered.",
      "parentUuid": "ade7fcae_e02bf392",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f39658af_d9866cc7",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-25T20:37:43Z",
      "side": 1,
      "message": "Well, say you have an array of arrays ssbo\n\nbuffer blockName {\n int i;\n} instance[2][2][2];\n\nvs an ssbo with an array of arrays field\n\nbuffer blockName {\n  int arr[2][2][2];\n};\n\nI think you\u0027re right and the code works, but I would feel a bit better if you could add a few tests with things like\n\nint arr2[2][2];\n((arr2 \u003d blockName.arr[0])[0], or\n\nblockName.arr[(blockName.arr[1] \u003d blockName.arr[2])[0][0]][1][2].\n\nI don\u0027t if this is legal. But anyway, LGTM with a bit more testing.",
      "parentUuid": "5e9f4a83_cd1b7d88",
      "range": {
        "startLine": 153,
        "startChar": 5,
        "endLine": 153,
        "endChar": 21
      },
      "revId": "05bcdf85007451d678c63e9ecf0ccacfd2e3d691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}