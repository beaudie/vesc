{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0824a7c8_70098f7e",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2102,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-07T14:08:51Z",
      "side": 1,
      "message": "Hmm, maybe actually we shouldn\u0027t even be trying to do this here and do this in TracePerfTest::TracePerfTest? The only thing we need until then is the trace name.",
      "range": {
        "startLine": 2102,
        "startChar": 32,
        "endLine": 2102,
        "endChar": 53
      },
      "revId": "c178b8cefb5910b700eb545042615d8cc5c00c48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34d3189f_bb8aaee5",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2102,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-06-07T23:13:57Z",
      "side": 1,
      "message": "Not sure what else you have in mind, but the changes in patchset #5 seem like an improvement.",
      "parentUuid": "0824a7c8_70098f7e",
      "range": {
        "startLine": 2102,
        "startChar": 32,
        "endLine": 2102,
        "endChar": 53
      },
      "revId": "c178b8cefb5910b700eb545042615d8cc5c00c48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3778bfa_2176e6a1",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2102,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-08T14:39:04Z",
      "side": 1,
      "message": "Thanks Cody. What I meant was:\n\n* Currently we call LoadTraceInfoFromJSON(trace_json_file) during initialization for each test (before test actually starts running)\n\n* Instead, we could load trace names during initialization (these come from restricted_traces.json, not trace_json_file) as this should be sufficient to create tests. Then, when the specific test is running we could call LoadTraceInfoFromJSON. This would parse that json multiple times for each configuration in which we\u0027re running the trace but I think that\u0027s very minor. This way we wouldn\u0027t have to track whether traceInfo is \"initialized\" or not - we would simply create it when it\u0027s needed instead of doing it in advance.",
      "parentUuid": "34d3189f_bb8aaee5",
      "range": {
        "startLine": 2102,
        "startChar": 32,
        "endLine": 2102,
        "endChar": 53
      },
      "revId": "c178b8cefb5910b700eb545042615d8cc5c00c48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5210af07_b225c8a5",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2102,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-14T20:14:06Z",
      "side": 1,
      "message": "*sigh* gtest seems to make this way more complicated than I thought :\\\n\nTests are parametrized by `const TracePerfParams`, so it needs to be constructed and fully initialized before creating the test, so we can\u0027t call LoadTraceInfoFromJSON from within the test. For instance, TracePerfParams.windowWidth depends on traceInfo.drawSurfaceWidth and hence traceInfo needs to be passed from the outside. So we end up with this weird partially-initialized state regardless of how \"failure to initialize\" is passed around - best I can do is pass it as an argument to TracePerfParams constructor but then I\u0027m not sure if that\u0027s any better than the current way this CL is.",
      "parentUuid": "f3778bfa_2176e6a1",
      "range": {
        "startLine": 2102,
        "startChar": 32,
        "endLine": 2102,
        "endChar": 53
      },
      "revId": "c178b8cefb5910b700eb545042615d8cc5c00c48",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}