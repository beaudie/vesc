{
  "comments": [
    {
      "key": {
        "uuid": "cbf9a44e_766793df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2020-09-13T16:52:31Z",
      "side": 1,
      "message": "Before PS 3 (without DrawBuffersTest.BlendWithGaps), this CL failed on MultisampledRenderToTextureES3Test.ColorAttachment1/ES3_Vulkan.\n\nNow it fails on DrawBuffersTest.BlendWithGaps/ES2_Vulkan_NoTransformFeedback.\n\nFWIW, I cannot reproduce any of these failures locally.",
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e50ef85_d7b86c4a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2020-09-13T17:49:14Z",
      "side": 1,
      "message": "Looks like both failures are flaky.",
      "parentUuid": "cbf9a44e_766793df",
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db954cb5_3fcb20bf",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-13T17:08:08Z",
      "side": 1,
      "message": "One small cleanup is to set the masking when we initialize the desc rather than when we unpack.\n\nThe big question is if we should be allowing blending when we cannot support it in the hardware. What formats trigger this warning?",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cccfcbbf_07ab0bbf",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2020-09-13T17:29:10Z",
      "side": 1,
      "message": "\u003e set the masking when we initialize the desc rather than when we unpack\n\nUnpackBlendAttachmentState sets only funcs and factors. Are you suggesting to merge desc zero-initialization with setting state.colorWriteMask?\n\n\u003e The big question is if we should be allowing blending when we cannot support it in the hardware. What formats trigger this warning?\n\nBlend state is global in OpenGL and is simply ignored for attachments with unsupported (e.g. integer) formats:\n\u003e Blending applies only if the color buffer has a fixed-point format.  If the colorbuffer has an integer format, proceed to the next operation.\n\nWhereas in Vulkan, it\u0027s VUID-VkGraphicsPipelineCreateInfo-blendEnable-02023:\n\u003e If rasterization is not disabled and the subpass uses color attachments, then for each color attachment in the subpass the blendEnable member of the corresponding element of the pAttachment member of pColorBlendState must be VK_FALSE if the attached imageâ€™s format features does not contain VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT",
      "parentUuid": "db954cb5_3fcb20bf",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f72923_80ae236d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-13T17:55:12Z",
      "side": 1,
      "message": "\u003e Blend state is global in OpenGL and is simply ignored for attachments with unsupported (e.g. integer) formats:\n\u003e \u003e Blending applies only if the color buffer has a fixed-point format.  If the colorbuffer has an integer format, proceed to the next operation.\n\nThanks for the tip. The precise wording I see is:\n\n\u003e Blending applies only if the color buffer has a fixed-point or floating-point\n\u003e format. If the color buffer has an integer format, proceed to the next\n\u003e operation.\n\nThat\u0027s from https://www.khronos.org/registry/OpenGL/specs/es/3.2/es_spec_3.2.pdf .\n\nThe wording implies we can force disable blend for integer formats only. And if we always disable integer blending we\u0027d behave correctly even on imaginary Vulkan implementations that support integer blends.\n\n\u003e \u003e set the masking when we initialize the desc rather than when we unpack\n\u003e \n\u003e UnpackBlendAttachmentState sets only funcs and factors. Are you suggesting to merge desc zero-initialization with setting state.colorWriteMask?\n\nIn GraphicsPipelineDesc::updateBlendEnabled and setRenderPassDesc, you can pass the ContextVk or RendererVk pointer (for format queries) and disable the blends in GraphicsPipelineDesc directly if the RenderPass has an integer format (or formats).\n\nUpdating the GraphicsPipelineDesc is a minor optimization/consistency cleanup because you don\u0027t have the possibility of storing duplicate VkPipeline values for different GraphicsPipelineDesc hash keys. It\u0027s  e.g. even if you disable and enable an integer blend you\u0027d end up with the same desc.",
      "parentUuid": "cccfcbbf_07ab0bbf",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d241542_d01b50b3",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-13T17:59:48Z",
      "side": 1,
      "message": "Actually you can probably use angle::Format::Get(formatID).isInt() as your check and you\u0027re good.",
      "parentUuid": "a2f72923_80ae236d",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f870e2_af32dccc",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-13T18:09:44Z",
      "side": 1,
      "message": "With the failing test (having two attachments UNUSED (color attachment 0) and RGBA (color attachment 1)), I noticed this was only affecting the UNUSED attachment (which has format 0).\n\nI made the UnpackBlendAttachmentState call unconditional just to see what happens, and the test still failed: https://chromium-review.googlesource.com/c/angle/angle/+/2407200/2. The only difference basically being that before the change, the UNUSED attachment had blend\u003dtrue and after it has blend\u003dfalse.\n\nMy speculation is that the Intel driver is using the wrong index to load the attachment blend information.",
      "parentUuid": "5d241542_d01b50b3",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b972f9_ca3b956a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2020-09-13T18:43:06Z",
      "side": 1,
      "message": "\u003e The precise wording I see is:\n\nOuch, I looked into the ES 3.0 spec.\n\n\u003e disable the blends in GraphicsPipelineDesc directly\n\nMaybe defer that optimization to CL 2172739 as it handles individual blend states within GraphicsPipelineDesc anyway?\n\n\u003e Intel driver is using the wrong index\n\nGiven that the failure \"moved\" to another similar test and disappeared on the second run, maybe the driver sometimes performs a draw operation before actually applying a new pipeline (with blending enabled)?",
      "parentUuid": "a8f870e2_af32dccc",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71c3357_1ab7e2d4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-13T19:49:27Z",
      "side": 1,
      "message": "\u003e \u003e The precise wording I see is:\n\u003e \n\u003e Ouch, I looked into the ES 3.0 spec.\n\nNP. I think we should update the condition to either be for unused or integer attachments depending on what\u0027s correct.\n\n\u003e \u003e disable the blends in GraphicsPipelineDesc directly\n\u003e \n\u003e Maybe defer that optimization to CL 2172739 as it handles individual blend states within GraphicsPipelineDesc anyway?\n\nSure, SGTM.",
      "parentUuid": "78b972f9_ca3b956a",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375a7494_6a5878d9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2020-09-13T23:49:59Z",
      "side": 1,
      "message": "\u003e we should update the condition to either be for unused or integer attachments\n\nLooks like the issue is more complicated. Got this error in angle_perftests:\n\n\u003e pipeline.pColorBlendState.pAttachments[0].blendEnable is VK_TRUE but format VkImage 0x18790000001879[] associated with this attached image (VK_FORMAT_R4G4B4A4_UNORM_PACK16) does not support VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT\n\nThis could be a driver bug since on my Intel machine that format has the COLOR_ATTACHMENT_BLEND_BIT set.",
      "parentUuid": "e71c3357_1ab7e2d4",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "934c90b7_203cf94b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-14T00:52:07Z",
      "side": 1,
      "message": "Good catch. It should theoretically be possible to write a failing unit test that would expect blending to work for RGBA4. Likely we should be checking for blend support for non-integer formats in FillTextureFormatCaps for textureAttachment and renderbuffer.",
      "parentUuid": "375a7494_6a5878d9",
      "range": {
        "startLine": 1028,
        "startChar": 0,
        "endLine": 1041,
        "endChar": 9
      },
      "revId": "2210d24d936da06b250475eaff71e0ba5595db50",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}