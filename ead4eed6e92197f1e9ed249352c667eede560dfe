{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b6eee9a8_3952cacb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-07T14:22:10Z",
      "side": 1,
      "message": "GL_CLEAR in GL is about logic op (GLES1, or desktop GL). I added GL_LOGIC_OP_CLEAR_ANGLE to expose logic op in GLES2+ (mostly for internal implementation reasons), which is why they alias.\n\nIdeally we would have had GL_LOAD_OP_X and GL_STORE_OP_X symbols, but since all the other ops are overloads of other GL enums, this should be fine.",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d743a036_8d060532",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-07T22:51:36Z",
      "side": 1,
      "message": "If we want to do that, we can!\n\n`GL_LOAD_OP_CLEAR_ANGLE`\n`GL_LOAD_OP_PRESERVE_ANGLE`\n`GL_LOAD_OP_DONT_CARE_ANGLE`\n`GL_STORE_OP_PRESERVE_ANGLE`\n`GL_STORE_OP_DONT_CARE_ANGLE`\n\nOr\n\n`GL_LOAD_OP_CLEAR_ANGLE`\n`GL_LOAD_STORE_OP_PRESERVE_ANGLE`\n`GL_LOAD_STORE_OP_DONT_CARE_ANGLE`\n\nOr something.\n\nI\u0027m fine with either way personally. While we\u0027re at it it would be nice to make it as ideal as possible.\n\n(Also, I had a question I added as a comment.)",
      "parentUuid": "b6eee9a8_3952cacb",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d32e6f0_24dcf938",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-08T02:46:56Z",
      "side": 1,
      "message": "Ok, if you are up to it, you might as well mirror VkAttachmentLoadOp and VkAttachmentStoreOp:\n\n```\nGL_LOAD_OP_CLEAR_ANGLE\nGL_LOAD_OP_LOAD_ANGLE\nGL_LOAD_OP_DONT_CARE_ANGLE\nGL_STORE_OP_STORE_ANGLE\nGL_STORE_OP_DONT_CARE_ANGLE\nGL_STORE_OP_NONE_ANGLE\n```\n\n(don\u0027t forget STORE_OP_NONE). Do you have enough enums?",
      "parentUuid": "d743a036_8d060532",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d917c8ed_250122ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-08T07:20:15Z",
      "side": 1,
      "message": "The range I\u0027ve been using has 16 enums: https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml\n\nIt\u0027s barely enough if we recycle `GL_DONT_CARE` (which I actually kind of like, but wouldn\u0027t mind changing either).\n\nI also have not added `GL_STORE_OP_NONE_ANGLE` yet. What behavior would we want for this op, and how would it differ from `GL_DONT_CARE`?",
      "parentUuid": "5d32e6f0_24dcf938",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec31e26_1451e05b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-09T02:55:18Z",
      "side": 1,
      "message": "Ack, GL_DONT_CARE for both ops is fine with me.\n\nRegarding NONE, in Vulkan at least:\n\n- STORE, if unnecessary, is inefficient because on tilers it would lead to a lot of wasted bandwidth\n- DONT_CARE **is technically a write operation**, and can lead to corruption (although rare), and also forces us to synchronize for no reason\n- NONE means \"I promise I didn\u0027t modify it in the render pass, no need to store back to memory, but also leave the memory contents valid\". It\u0027s useful in combination with LOAD_OP_LOAD, like a read-only depth/stencil that you use for testing and you don\u0027t want to store, but also don\u0027t want to invalidate.",
      "parentUuid": "d917c8ed_250122ed",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c90b964_7ab76274",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-09T07:11:56Z",
      "side": 1,
      "message": "Ok, that makes sense, and I see the value in wanting optimized read-only pixel local storage.\n\nI added STORE_OP_NONE to https://docs.google.com/document/d/1BsXxar1gbJ_w-Xvy76VbgmLOgB3qON6BY6YB5LVOqwo/edit\n\nSupporting this will take a decent amount of spec and testing work though. Would you be ok landing this change as-is and putting of STORE_OP_NONE for a future change?",
      "parentUuid": "3ec31e26_1451e05b",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8f3b48e_de4b2677",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-07T05:09:37Z",
      "side": 1,
      "message": "Thoughts on this?\n\nI think we should either\n* Take this CL and alias the values\n* Or rename it to something without a collision, like `GL_PIXEL_LOCAL_STORAGE_OP_CLEAR_ANGLE`",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3045f17a_704c5f09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-12-07T21:28:45Z",
      "side": 1,
      "message": "lgtm if this looks OK to Shabi.",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cfb0f43_1ad91153",
        "filename": "scripts/gl_angle_ext.xml",
        "patchSetId": 1
      },
      "lineNbr": 1304,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-07T22:51:36Z",
      "side": 1,
      "message": "Is this the correct way to handle the non-contiguous value in `GL_CLEAR_ANGLE`?",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9b5489_1d8b2d20",
        "filename": "scripts/gl_angle_ext.xml",
        "patchSetId": 1
      },
      "lineNbr": 1304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-08T02:46:56Z",
      "side": 1,
      "message": "No idea, sorry! As long is it works with autogen, :shrug:",
      "parentUuid": "8cfb0f43_1ad91153",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8308326e_5c4aea2d",
        "filename": "scripts/gl_angle_ext.xml",
        "patchSetId": 1
      },
      "lineNbr": 1304,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-12-08T07:20:15Z",
      "side": 1,
      "message": "Works for me",
      "parentUuid": "fd9b5489_1d8b2d20",
      "revId": "ead4eed6e92197f1e9ed249352c667eede560dfe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}