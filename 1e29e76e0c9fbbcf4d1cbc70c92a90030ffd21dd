{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "22815e11_87820976",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 8,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "please include some documentation about how the change works",
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1db07c4_82f5ff4f",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 638,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "I wonder if we can generate this type and use it instead of using specializations here. Can you look into that in the autogen?",
      "range": {
        "startLine": 627,
        "startChar": 0,
        "endLine": 638,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33fb932e_b16f5260",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 638,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-03T12:39:02Z",
      "side": 1,
      "message": "Do you mean replace the whole if series here to create some auto-generated call?",
      "parentUuid": "f1db07c4_82f5ff4f",
      "range": {
        "startLine": 627,
        "startChar": 0,
        "endLine": 638,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bd15277_3e2d6390",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3396,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "note: appropriate use of a structured binding definition.\n\nhttps://google.github.io/styleguide/cppguide.html#Type_deduction",
      "range": {
        "startLine": 3396,
        "startChar": 0,
        "endLine": 3396,
        "endChar": 46
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92464b0d_1b05243f",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3405,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "this is a novel solution for an attrib map, although I wonder if we should treat it as a separate type instead of a magical use of TGLint64Pointer . will think about this.",
      "range": {
        "startLine": 3403,
        "startChar": 0,
        "endLine": 3405,
        "endChar": 24
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9db6ea8_f5ba430b",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3405,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-03T12:39:02Z",
      "side": 1,
      "message": "The parameter we pass into `eglCreateImage` is a pointer to `EGLAttrib` values, so so we would need an `EGLAttrPointer`, and since `EGLAttrib` is a typedef of `intptr_t` `TGLintptrConstPointer` would probably be a better choice than `TGLint64Pointer`, but it still relies on the typedef of `EGLAttrib`.",
      "parentUuid": "92464b0d_1b05243f",
      "range": {
        "startLine": 3403,
        "startChar": 0,
        "endLine": 3405,
        "endChar": 24
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed04e23b_6cd5a06d",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "Adding this comment here though it applies to several places.\n\nWhen we originally laid out EGL functionality in the tracer, instead of passing down EGL types from the test harness (notably TracePerfTest) to the replay code, we decided to callback to the harness. That way we could subtitute in the necessary info from the harness. That way for platforms that don\u0027t use EGL (e.g. WGL on Windows) we can transform the calls to something equivalent. We also don\u0027t need these kind of callbacks. I see now that this functionality doesn\u0027t exist in the CaptureReplayTests harness.\n\nI suspect for multi-context capture this is also a necessary problem to solve. So my suggestion is we look into how to solve EGL capture in CaptureReplayTests in a way that\u0027s compatible with the current TracePerfTest harness design. Likely we\u0027ll need to use a callback scheme as well.\n\nThe end result would be something like capturing the call with placeholder values for the display and other resource handle values, then in the callback function filling them in.\n\nOne way we could tackle this is to fix the multi-context capture first, then rework this change. In FrameCapture.cpp if you look for eglCreateContext, you\u0027ll see some very manual code. Whereas you chose to do this \"properly\" and make capture functions, originally we hard-coded the multi-context capture functions. We could first clean up this code into real capture functions, then investigate/fix multi-context capture in capture_replay_expectations.txt, then return to this CL.\n\nCody/Gert LMKWYT",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a63779_cc3e1432",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-05-03T03:00:26Z",
      "side": 1,
      "message": "Yeah, if we can migrate CaptureReplayTests to use the same methods that TracePerfTests is using, that\u0027s cleaner.\n\nGert, if you look at `trace_angle::LoadEGL(TraceLoadProc);` in TracePerfTest.cpp and follow its definition, you\u0027ll see that it selectively reroutes calls to an internal implementation.  Calls not intercepted are just routed to the driver.  So we could create an onEGLGetDisplay similar to onEglMakeCurrent.  This probably requires migrating trace_egl_loader_autogen.cpp to CaptureReplayTests.",
      "parentUuid": "ed04e23b_6cd5a06d",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c24fdc4_ed49a3aa",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-03T12:39:02Z",
      "side": 1,
      "message": "TBH, I don\u0027t see that multi-context is relevant here. The display exists independent of the contexts, at most we would have to care about the possibility that a multi-context application creates contexts with different displays, but I don\u0027t see that the CaptureReplayTests harness actually supports this, and I wonder whether it is actually relevant for the applications that we consider. \n\nRegarding the possibility to replay this on, e.g. WGL, does the test harness actually support this right now? As far as I can see it hard-codes `angle::GLESDriverType::AngleEGL`.\n\nWhen using, e.g., WGL we would also have to use calls into the test harness to handle eglCreateImage/eglDestroyImage, but a quick search didn\u0027t reveal anything that might be used to emulate this.",
      "parentUuid": "ed04e23b_6cd5a06d",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e00adb91_1f8aa844",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-03T13:05:15Z",
      "side": 1,
      "message": "Hey Gert, stepping back a sec-\n\nI think there\u0027s some misunderstanding here. And code review is a bad place to this out. Can you chat offline with Cody to work out a consensus? Happy to contribute to the discussion offline. I think it\u0027s an important discussion for this work.",
      "parentUuid": "0c24fdc4_ed49a3aa",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e6f137_bbc46cea",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-03T13:05:30Z",
      "side": 1,
      "message": "to hash this out**",
      "parentUuid": "e00adb91_1f8aa844",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d602a50b_158fc76e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-09T11:31:14Z",
      "side": 1,
      "message": "I\u0027ve changed the code to oevrride the calls to eglCreateImage and eglDestroyImage. It is a bit different from how it is implemented in TracePerfTests, because there resolving the function pointers is different in the sense that apparently it doesn\u0027t use the system_tools provided Library function. \n\nSo I added the possibility to override the function pointer when loading the EGL library, so that the display variable can be overridden in the test harness.",
      "parentUuid": "98e6f137_bbc46cea",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1840fb71_9fbd0fb9",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 6879,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-05-10T04:03:48Z",
      "side": 1,
      "message": "Nice work pulling this together Gert!\n\nI think you\u0027ll also need to support these calls in TracePerfTest.cpp.  I can give it a try with MEC after that.\n\nUnfortunate that you need a separate override hook, but given the separate replayers, probably unavoidable for now.",
      "parentUuid": "d602a50b_158fc76e",
      "range": {
        "startLine": 6856,
        "startChar": 0,
        "endLine": 6879,
        "endChar": 5
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e3082f_7757ca56",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8029,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "please place these in a new file src/libANGLE/capture/capture_egl.cpp",
      "range": {
        "startLine": 8008,
        "startChar": 0,
        "endLine": 8029,
        "endChar": 1
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc1d2672_2930a2aa",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8029,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-05-03T03:00:26Z",
      "side": 1,
      "message": "+1, makes sense to split the EGL stuff out.",
      "parentUuid": "94e3082f_7757ca56",
      "range": {
        "startLine": 8008,
        "startChar": 0,
        "endLine": 8029,
        "endChar": 1
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2a21984_54420d7e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8029,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-09T11:31:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc1d2672_2930a2aa",
      "range": {
        "startLine": 8008,
        "startChar": 0,
        "endLine": 8029,
        "endChar": 1
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2d9e08_9fc70026",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "please use a capture macro like ANGLE_CAPTURE.\n\nHow about we rename ANGLE_CAPTURE to ANGLE_GL_CAPTURE/ANGLE_CAPTURE_GL and make a similar one for EGL? The rename should probably be a split CL because of the boilerplate change.",
      "range": {
        "startLine": 160,
        "startChar": 11,
        "endLine": 160,
        "endChar": 32
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c18974ef_fbd9425a",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-05-09T11:31:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c2d9e08_9fc70026",
      "range": {
        "startLine": 160,
        "startChar": 11,
        "endLine": 160,
        "endChar": 32
      },
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74451a22_6c0bfc14",
        "filename": "src/tests/capture_replay_tests/capture_replay_expectations.txt",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-02T12:56:52Z",
      "side": 1,
      "message": "Impressive!",
      "revId": "1e29e76e0c9fbbcf4d1cbc70c92a90030ffd21dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}