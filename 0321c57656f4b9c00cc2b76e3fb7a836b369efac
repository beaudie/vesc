{
  "comments": [
    {
      "key": {
        "uuid": "b30a2afc_8c24c083",
        "filename": "src/libANGLE/renderer/gl/StateManagerGL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1330,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-09-20T07:30:51Z",
      "side": 1,
      "message": "Why you still need this dirtybit since you already called gl API glEnable/glDisable? \nI think you should write it like below:\nvoid StateManagerGL::setSampleMaskEnabled()\n{\n    if (!mSampleMaskEnabled)\n    {\n        mSampleMaskEnabled \u003d true;\n        mLocalDirtyBits.set(gl::State::DIRTY_BIT_SAMPLE_MASK_ENABLED);\n    }\n}\n\nvoid StateManagerGL::setSampleMaskDisabled()\n{\n    if (mSampleMaskEnabled)\n    {\n        mSampleMaskEnabled \u003d false;\n        mLocalDirtyBits.set(gl::State::DIRTY_BIT_SAMPLE_MASK_DISABLED);\n    }\n}\n\nThen in the syncState function, add something like below:\ncase: gl::State::DIRTY_BIT_SAMPLE_MASK_ENABLED\n    mFunctions-\u003eenable(GL_SAMPLE_MASK);\ncase: gl::State::DIRTY_BIT_SAMPLE_MASK_DISABLED\n    mFunctions-\u003edisable(GL_SAMPLE_MASK);",
      "range": {
        "startLine": 1330,
        "startChar": 8,
        "endLine": 1330,
        "endChar": 70
      },
      "revId": "0321c57656f4b9c00cc2b76e3fb7a836b369efac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce1d18b_b8b7fdec",
        "filename": "src/libANGLE/renderer/gl/StateManagerGL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1342,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-09-20T07:30:51Z",
      "side": 1,
      "message": "Same here. I always think there should be two functions. One is to set dirty bit and cache the value. Other is really sync them to driver.",
      "range": {
        "startLine": 1342,
        "startChar": 8,
        "endLine": 1342,
        "endChar": 82
      },
      "revId": "0321c57656f4b9c00cc2b76e3fb7a836b369efac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaf36bb_48cd2d50",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2326,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-09-20T07:30:51Z",
      "side": 1,
      "message": "ANGLE_VALIDATION_ERR(context, InvalidEnum(), EnumRequiresGLES31);",
      "range": {
        "startLine": 2325,
        "startChar": 0,
        "endLine": 2326,
        "endChar": 95
      },
      "revId": "0321c57656f4b9c00cc2b76e3fb7a836b369efac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}