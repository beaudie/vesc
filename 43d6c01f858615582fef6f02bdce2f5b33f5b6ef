{
  "comments": [
    {
      "key": {
        "uuid": "455387cc_d87f4ef8",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 82,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Why is there a second level of indirection?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aae99cff_861ab413",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 82,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Answering these all at the same time - the reason is as you guessed, RAII. Although the class only holds a 64-bit handle type, a single object owns the handle uniquely, and copying the handle will cause an ASSERT to trip in the destructor if it\u0027s not released.",
      "parentUuid": "455387cc_d87f4ef8",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2fac80d_30abbe66",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 101,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "ditto about second level of indirection.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35840b0c_9db6c88b",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 101,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f2fac80d_30abbe66",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f50b77f5_b44c6673",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 170,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "nit: this couldbe node-\u003emIsDependency \u003d true without violating the privateness of mIsDependency.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45a64b53_ea58c756",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 170,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Done - by making markAsDependency private.",
      "parentUuid": "f50b77f5_b44c6673",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e96a1ace_55d841a4",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 202,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Maybe this could be checked when walking the DAG in RendererVk.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d58a9219_54f41baa",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 202,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "a recursive search might be simpler too",
      "parentUuid": "e96a1ace_55d841a4",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0307158_11d9aabb",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.cpp",
        "patchSetId": 24
      },
      "lineNbr": 202,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Here I\u0027m using a stack with memory allocated on the heap, instead of a full recursive call. I like the heap stack because it\u0027s easier to handle situations which might lead to a stack overflow, in addition to being harder to overflow already. Sorry Corentin but I didn\u0027t figure out exactly what you were suggesting I check in flushCommandGraph.",
      "parentUuid": "d58a9219_54f41baa",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef0fda22_928c9b8f",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.h",
        "patchSetId": 24
      },
      "lineNbr": 34,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "could there be some consts here?",
      "range": {
        "startLine": 34,
        "startChar": 7,
        "endLine": 34,
        "endChar": 16
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4b4c74_6608636d",
        "filename": "src/libANGLE/renderer/vulkan/CommandBufferNode.h",
        "patchSetId": 24
      },
      "lineNbr": 78,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "a bit hard to parse.  move \u0027separate\u0027 between \u0027need\u0027 and \u0027inside\u0027",
      "range": {
        "startLine": 78,
        "startChar": 79,
        "endLine": 78,
        "endChar": 87
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9a49d4c_238fe377",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 305,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "ditto about double indirection.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61586224_890ab071",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 305,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c9a49d4c_238fe377",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70886ff4_487a1a2f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 350,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "onRender is a bit confusing, tagDependencies?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f27bfbb8_26250df8",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 350,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "called it updateDrawDependencies.",
      "parentUuid": "70886ff4_487a1a2f",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f87378f_25cac86d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 354,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "+1, eventually all this should be dirty-bitified and merged.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a17b401_b0bc00c2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 354,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f87378f_25cac86d",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc684fa9_e305bf82",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 384,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "What\u0027s this serial used for?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7920a459_dcd2f018",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 384,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "The pipeline state object. The TODO here is to indicate it should be refactored with the Pipeline State Object cache. I updated the comment.",
      "parentUuid": "cc684fa9_e305bf82",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e0001bc_74898c08",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 408,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "ditto about second indirection: couldn\u0027t this be a stack allocated CommandBuffer (non-owned copy)? I imagine there\u0027s some RAII happening that makes this inconvenient?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c98ea988_aa16c6f2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 408,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2e0001bc_74898c08",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "344f1594_7e74fe40",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 904,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Don\u0027t we have dirty bits for the objects being modified?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65eb6b1a_e3c299b6",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 904,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "I think you\u0027re getting confused by the dirty bits system. The dirty VertexArray will trigger VertexArrayVk::updateState, which will trigger this call in the ContextVk, but it won\u0027t trigger a Context update directly. It\u0027s possible we could use a different design that\u0027s clearer, but would require some thought.\n\nWe could use a local set of dirty bits instead of a special flag (mVertexArrayDirty) but I\u0027m not sure that\u0027s what you were referring to.",
      "parentUuid": "344f1594_7e74fe40",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da70c93f_7534bf0b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 487,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "The interface between CommandBufferNode and FramebufferVk is pretty chatty. Could we just build a \"RenderPassFramebufferInfo\" then call node-\u003estoreRenderPassFramebufferInfo(info) in one call?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8184cbe7_3c437fff",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 487,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "I merged the Framebuffer and Clear functions. This stuff might get redesigned in the future with the clear values (not the TODO). Having the append methods below is convenient for right now, though we might want a RenderTargetVk array in the future for other means, so maybe we can fix that later.",
      "parentUuid": "da70c93f_7534bf0b",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7ae5383_1c50c14b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 192,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Can these be made \u003d default?",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b051912_a6c91cf1",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 192,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "I\u0027m not sure, maybe? I left them as-is.",
      "parentUuid": "d7ae5383_1c50c14b",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a7874c9_f0780a1b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Things could be a bit simpler of they were split like this:\n\n1) sort nodes in topological order\n2) iterate on them and execute them.",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d22d136c_5bc52616",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "+1\nduring the sort you\u0027d discover any loops and you could do away with the other checks",
      "parentUuid": "4a7874c9_f0780a1b",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3e430d2_a2d07e88",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "I don\u0027t follow, how would doing a sort improve performance? What is the comparison function for topological order (and what is topological order)?",
      "parentUuid": "d22d136c_5bc52616",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44790a11_475d7478",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-20T03:40:04Z",
      "side": 1,
      "message": "No one said it would improve performance, though I think we can do that too.  (As it is nodes go on and off the stack once for each path to them.  They don\u0027t need to go back on if they\u0027ve been visited.)\nThe main benefit is clarity.  This code could look like:\n  s \u003d graph.topological_sort()\n  for(i in s): i.execute()\nThis should be clear to anyone, they won\u0027t need to study any code and figure out it is equivalent to the above two lines.\nIt reduces the tight coupling between this function and the node class.\nYou get loop detection for free, and it\u0027s always on.  You can get rid of the loop detection code labeled \"Do not call this in anything but testing code, since it\u0027s slow.\"\n\nhttps://en.wikipedia.org/wiki/Topological_sorting",
      "parentUuid": "f3e430d2_a2d07e88",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40caf1f3_ffc29268",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-20T17:06:38Z",
      "side": 1,
      "message": "This sounds very expensive. I would have to see a benchmark that showed the topological sort is at least as fast to be persuaded I think.",
      "parentUuid": "44790a11_475d7478",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75b29d3e_1eeb0e59",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-21T20:28:36Z",
      "side": 1,
      "message": "The run time is the same as your code, which is roughly the same as https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search.\nAll we\u0027re saying is it should be in a separate function called topologicalSort() because that is a well understood tool.  The name says it all to anyone who is familiar with it.",
      "parentUuid": "40caf1f3_ffc29268",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7df6c9d1_ac474231",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-21T20:31:06Z",
      "side": 1,
      "message": "How could different code that does a sort have the same run time? I think you mean the computational complexity is the same, but that\u0027s very different from the run time of my code. I think in order to be convinced I would need to see a perf test that shows an improvement for the increased complexity. Hopefully we can agree to take this up later and land the simpler code I have here immediately.",
      "parentUuid": "75b29d3e_1eeb0e59",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c51f28f6_c89a46a0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 24
      },
      "lineNbr": 893,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-22T08:32:37Z",
      "side": 1,
      "message": "What we\u0027re proposing is no more complicated than your code, will run just as fast, will be easier to understand, and will always detect loops.  There is no down side, and it\u0027s not that much work because it\u0027s not very different from what you have now.\nIf you haven\u0027t understood the suggestion I\u0027m happy to sketch it out for you.",
      "parentUuid": "7df6c9d1_ac474231",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9875219_f1bbec24",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 191,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-12-14T21:12:42Z",
      "side": 1,
      "message": "Is there a reasoning for merging fence counting and commands together? I think it would be clearer to have a \"fence counting thing\" and CommandBatch be treated like any other in-flight resource. Also you might want to re-use NXT\u0027s SerialQueue container: https://github.com/google/nxt-standalone/blob/master/src/common/SerialQueue.h",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b8e5b6e_0e8fb7fb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 191,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Well, I needed the Serial as well, so it was somewhat of a natural next step to store the pool. You\u0027re right it could be generic garbage object.\n\nThanks for the pointer to the Serial Queue. I\u0027m still on the fence as to if I want to use that approach - it is pretty easy to work with, but it requires either heap allocation (for the little vectors) or a custom allocator class. I was considering using a ring buffer type approach to manage the garbage objects which wouldn\u0027t need a custom allocator or heap memory.\n\nI left it as-is for now, but I\u0027m open to changing this.",
      "parentUuid": "b9875219_f1bbec24",
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67b848d0_c412177d",
        "filename": "src/libANGLE/renderer/vulkan/renderervk_utils.h",
        "patchSetId": 24
      },
      "lineNbr": 745,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "There\u0027s much more going on in this class than before.  Could you update this comment - say something about \u0027current read/write nodes.\u0027",
      "range": {
        "startLine": 745,
        "startChar": 3,
        "endLine": 745,
        "endChar": 31
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68517142_3a3fbd47",
        "filename": "src/libANGLE/renderer/vulkan/renderervk_utils.h",
        "patchSetId": 24
      },
      "lineNbr": 745,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67b848d0_c412177d",
      "range": {
        "startLine": 745,
        "startChar": 3,
        "endLine": 745,
        "endChar": 31
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b0540e_e3cc6043",
        "filename": "src/libANGLE/renderer/vulkan/renderervk_utils.h",
        "patchSetId": 24
      },
      "lineNbr": 758,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2017-12-15T03:55:44Z",
      "side": 1,
      "message": "When did we start doing this vertical bar thing?  I see only a couple instances of it in our code so far.  I\u0027m not a big fan.  Would like to nip it in the bud, unless this is the way we do things now.",
      "range": {
        "startLine": 758,
        "startChar": 61,
        "endLine": 758,
        "endChar": 76
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4da80030_8e0db6fd",
        "filename": "src/libANGLE/renderer/vulkan/renderervk_utils.h",
        "patchSetId": 24
      },
      "lineNbr": 758,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-12-19T22:30:45Z",
      "side": 1,
      "message": "Well, it was either this or \"quotes\", so I figured might as well use the docstring method. What are your objections?",
      "parentUuid": "23b0540e_e3cc6043",
      "range": {
        "startLine": 758,
        "startChar": 61,
        "endLine": 758,
        "endChar": 76
      },
      "revId": "43d6c01f858615582fef6f02bdce2f5b33f5b6ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}