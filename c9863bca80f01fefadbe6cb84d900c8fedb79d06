{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "911c1dc3_5d8f3bfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-26T21:02:02Z",
      "side": 1,
      "message": "I code searched and not seeing any pointers to uniforms or varying etc that being used that would require destructor being virtual, and bots seems happy as well.",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e412e4_0d5b275a",
        "filename": "src/libANGLE/Uniform.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-26T21:16:27Z",
      "side": 1,
      "message": "While it looks harmless for _some_ of these classes, it doesn\u0027t look correct for ShaderVariableBuffer (and consequently ActiveVariable). If an `ActiveVariable *` is deleted that happens to point to an `InterfaceBlock`, the strings in this class and the vector in `ShaderVariableBuffer` will leak.",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b591530_038a6f16",
        "filename": "src/libANGLE/Uniform.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-26T21:49:34Z",
      "side": 1,
      "message": "\u003e  If an ActiveVariable * is deleted that happens to point to an InterfaceBlock\n\nThis is exactly my question, do you see this kind of usage (a link will be useful)? I am not seeing it with  my search, but I may missed.",
      "parentUuid": "d1e412e4_0d5b275a",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b116a26_e7d93d71",
        "filename": "src/libANGLE/Uniform.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-26T22:05:33Z",
      "side": 1,
      "message": "I haven\u0027t checked, but how can you be sure that won\u0027t happen in the future?\n\nThe only way you could do this safely is to turn these inheritances to composition (which honestly is just a good thing to do). In the process you\u0027ll discover if we have such a usage ðŸ˜„",
      "parentUuid": "0b591530_038a6f16",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dd3a5f9_39edb2c3",
        "filename": "src/libANGLE/Uniform.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-26T23:00:37Z",
      "side": 1,
      "message": "Turn these inheritances to composition is a separate thing, but we should not use virtual if not needed. Otherwise, you could argue all other classes should make destructor virtual as well with the same safety concern, right?\nI searched all pointer usages, only very few places use pointers of these subclasses and only in the load/store code, so should be safe unless I miss anything",
      "parentUuid": "0b116a26_e7d93d71",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f23dd0c_41da7047",
        "filename": "src/libANGLE/Uniform.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-27T01:46:32Z",
      "side": 1,
      "message": "\u003e Otherwise, you could argue all other classes should make destructor virtual\n\nI\u0027m pretty sure every class we have that is involved in inheritance has virtual destructors.\n\n\u003e unless I miss anything\n\nExactly my point.",
      "parentUuid": "9dd3a5f9_39edb2c3",
      "revId": "c9863bca80f01fefadbe6cb84d900c8fedb79d06",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}