{
  "comments": [
    {
      "key": {
        "uuid": "e5d72339_113a2f6c",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2818,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-13T00:25:52Z",
      "side": 1,
      "message": "Are the optimizations in this file simply that the checks are done in a different order?",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29698048_164f525c",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2818,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-13T00:43:17Z",
      "side": 1,
      "message": "I understand that the optimization is that ValidateDrawMode() is not called when cached draw mode is valid.",
      "parentUuid": "e5d72339_113a2f6c",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a033be0e_952672ae",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2818,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-13T00:58:33Z",
      "side": 1,
      "message": "Right, I saw that, then forgot by the time I went through the whole thing!",
      "parentUuid": "29698048_164f525c",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e684ba70_b0caffa9",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2818,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-13T14:09:20Z",
      "side": 1,
      "message": "Yeah, there are fast checks which prevent the slow checks from being executed. In a sense that\u0027s being in a different order.",
      "parentUuid": "29698048_164f525c",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2da1e283_e2d6bc4d",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2916,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-13T00:25:52Z",
      "side": 1,
      "message": "ValidateDrawAttribs is essentially:\n\n- if (FastValidateDrawAttribs()) return true\n- return otherValidation()\n\nThat said, I don\u0027t see how this is an optimization. If FastValidateDrawAttribs() returns true, so does ValidateDrawAttribs, and it does it just as fast. If that fails (the uncommon case), you are doing that call twice. If you undo this chunk, I expect you wouldn\u0027t see any performance difference.",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d631c381_0c7ab063",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2916,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-13T00:43:17Z",
      "side": 1,
      "message": "My guess would be this is faster because FastValidateDrawAttribs is inlined.\nBut Shahbaz has a point, this code could be organized better.\nHow about making ValidateDrawAttribs() an inline function, which does the if() above and then calls ReallyValidateDrawAttribs() which doesn\u0027t have the Fast check?",
      "parentUuid": "2da1e283_e2d6bc4d",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45717bb_6bfb7e08",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2916,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-13T14:09:20Z",
      "side": 1,
      "message": "Good suggestion Yuly, done. As Yuly said inlining gives a surprisingly big speed boost. Just calling a function that needs to load and unload the stack can cost as much as 4% of the run time.",
      "parentUuid": "d631c381_0c7ab063",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1630e76c_6606c2e7",
        "filename": "src/libANGLE/validationES2.h",
        "patchSetId": 7
      },
      "lineNbr": 586,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-13T00:25:52Z",
      "side": 1,
      "message": "Speaking of, there are a lot of core member functions that could be inlined, optimizing them may be more interesting.\n\nOn a similar subject, if we have only one backend in a platform, another optimization would be to devirtualize the *Impl classes (that is if the compiler won\u0027t do it if we enable lto)",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ec94ffd_0f19348b",
        "filename": "src/libANGLE/validationES2.h",
        "patchSetId": 7
      },
      "lineNbr": 586,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-13T14:09:20Z",
      "side": 1,
      "message": "Yeah I\u0027ve thought about some kind of static polymorphism approach. Any way you code it up it would mean a totally different libGLESv2 / libEGL / libGLES1 for each renderer. I think we might want to do this down the line when we run out of easier things to optimize. Good thought.",
      "parentUuid": "1630e76c_6606c2e7",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd2e476_a1b4be8d",
        "filename": "src/libANGLE/validationES2.h",
        "patchSetId": 7
      },
      "lineNbr": 586,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-13T14:31:31Z",
      "side": 1,
      "message": "Having different versions of the same lib would be an idea (which comes with some headache as well), but I was mostly thinking of doing this for platforms where only one backend exists.\n\nBut yes, those are thoughts for another time.",
      "parentUuid": "3ec94ffd_0f19348b",
      "revId": "673c1c94ff6c0526bd27085c5f0cef6629510731",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}