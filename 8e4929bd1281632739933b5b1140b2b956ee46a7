{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1eaef88b_598a62c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-07-25T21:14:40Z",
      "side": 1,
      "message": "Thank you, lgtm though I would still like to add the detector of \"unusual\" control flow and reject the shaders from the bug report. That detector would need to run before this pruning; is there a good place to put it in the compiler?",
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66e774e5_a6fc9e81",
        "filename": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-07-25T21:14:40Z",
      "side": 1,
      "message": "Please handle error conditions here and in the caller instead of asserting.",
      "fixSuggestions": [
        {
          "fixId": "51f29df4_c843ab08",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
              "range": {
                "startLine": 18,
                "startChar": 0,
                "endLine": 19,
                "endChar": 0
              },
              "replacement": "bool GetSwitchConstantAsUInt(const TConstantUnion *value, uint32_t *outValue)\n"
            },
            {
              "path": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
              "range": {
                "startLine": 27,
                "startChar": 0,
                "endLine": 29,
                "endChar": 0
              },
              "replacement": "        return asUInt.cast(EbtUInt, *value);\n"
            },
            {
              "path": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
              "range": {
                "startLine": 30,
                "startChar": 0,
                "endLine": 31,
                "endChar": 0
              },
              "replacement": "    *outValue \u003d asUInt.getUConst();\n    return true;\n"
            },
            {
              "path": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
              "range": {
                "startLine": 46,
                "startChar": 0,
                "endLine": 47,
                "endChar": 0
              },
              "replacement": "    uint32_t exprValue;\n    if (!GetSwitchConstantAsUInt(expr-\u003egetConstantValue(), \u0026exprValue))\n    {\n        return false;\n    }\n"
            },
            {
              "path": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
              "range": {
                "startLine": 69,
                "startChar": 0,
                "endLine": 70,
                "endChar": 0
              },
              "replacement": "        uint32_t caseValue;\n        if (!GetSwitchConstantAsUInt(condition-\u003egetConstantValue(), \u0026caseValue))\n        {\n            return false;\n        }\n"
            }
          ]
        }
      ],
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a83ec74_fd40b5dd",
        "filename": "src/compiler/translator/tree_ops/PruneNoOps.cpp",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-25T22:20:42Z",
      "side": 1,
      "message": "Nack, if these asserts fail we have waaay bigger problems. I\u0027m not being lazy with error handling here, if these asserts fail we either have a fundamental error somewhere else that will blow up later, or the transformation is not taking everything it needs to take into account.\n\nThe asserts are really added for the latter case.",
      "parentUuid": "66e774e5_a6fc9e81",
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b65248_3eb098d9",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 9017,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-07-25T21:14:40Z",
      "side": 1,
      "message": "Could you add another test under `compiler_tests/` which unit tests the pruning? This test passes with or without the pruning of the no-op switches.",
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6878d62_da5e0010",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 9017,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-25T22:20:42Z",
      "side": 1,
      "message": "I\u0027ll add something there, but FWIW, I never really liked our compiler tests; they are too fragile with the way they test things and have frequently been a cause of pain for me.",
      "parentUuid": "55b65248_3eb098d9",
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fd3c2c1_88d21a8c",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 9017,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-26T14:53:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6878d62_da5e0010",
      "revId": "8e4929bd1281632739933b5b1140b2b956ee46a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}