{
  "comments": [
    {
      "key": {
        "uuid": "16171085_aa972ae8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-09T04:48:18Z",
      "side": 1,
      "message": "What if instead we pass `mLayerCount` to `SubresourceUpdate()` and use that instead of `VK_REMAINING_ARRAY_LAYERS`? Then the `flushSingleSubresourceStagedUpdates` logic can remain as is.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c53efda_218d1a65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-05-09T04:59:21Z",
      "side": 1,
      "message": "I don\u0027t know why it is VK_REMAINING_ARRAY_LAYERS, if it is mLayerCount in SubresourceUpdate, I think the issue can also be fixed. But don\u0027t know if this breaks something",
      "parentUuid": "16171085_aa972ae8",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a51daf9_516191b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-09T05:13:48Z",
      "side": 1,
      "message": "I think setting the correct value instead of `VK_REMAINING_ARRAY_LAYERS` is a better fix (why set something unexpected, then have to later handle it?)\n\nOnly thing I\u0027m not sure of is whether the image is guaranteed to have been init()ed before a clear is staged, but it most likely should be. We could at least try that on the bots.",
      "parentUuid": "5c53efda_218d1a65",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a3eadc_241530a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-05-09T05:19:25Z",
      "side": 1,
      "message": "mLayerCount is not a member of SubresourceUpdate, so we have to pass a new member to its constructor.\nOr we can always use 1 (it should be 1 if an image has no layer):\nclear.layerCount \u003d\n        imageIndex.hasLayer() ? imageIndex.getLayerCount() : 1;",
      "parentUuid": "4a51daf9_516191b4",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe59d58_ba80120c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-09T19:39:20Z",
      "side": 1,
      "message": "I was thinking of passing it to the constructor.\n\nI\u0027m not 100% sure if `!imageIndex.hasLayer()` implies a layer count of 1. Note that `ImageIndex` is something similar to `VkImageSubresourceRange` (so it selects a subresource of an image, and doesn\u0027t \"specify\" an image). I think `!hasLayer()` means take every layer, but I don\u0027t remember the details exactly.",
      "parentUuid": "c3a3eadc_241530a2",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff6970a_067c9873",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-05-11T15:39:14Z",
      "side": 1,
      "message": "It would be nice if we didn\u0027t use VK_REMAINING_ARRAY_LAYERS. So would be happy to have one of Shabi\u0027s proposed fixes. Maybe we could try that and accept it if it works. Otherwise LGTM.",
      "parentUuid": "1fe59d58_ba80120c",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff78e6e8_34c777b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2020-05-11T17:56:41Z",
      "side": 1,
      "message": "`!imageIndex.hasLayer()` implies the entire mip level.  The bug I was fixing with my CL that regressed this was that we always passed a single layer to clearing 3D textures (incorrect) and when I fixed it to pass the entire mip the VK backend didn\u0027t handle that correctly (-1 layer count).\n\nI could potentially go back and make sure instead of telling the backend to clear the entire level it clears a layer range equal to the entire level.  I do think the current approach (whole level) leaves room for optimizations though.  Using VK_REMAINING_ARRAY_LAYERS or attaching the entire texture to the framebuffer in OpenGL can save passing information.",
      "parentUuid": "bff6970a_067c9873",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40ba3a32_758e636f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-05-11T18:12:28Z",
      "side": 1,
      "message": "Explicitly using a layer count would make the code easier to work with instead of magic values.",
      "parentUuid": "ff78e6e8_34c777b1",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e37bbd7_609e2132",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-05-11T23:24:58Z",
      "side": 1,
      "message": "Change VK_REMAINING_ARRAY_LAYERS in SubresourceUpdate::SubresourceUpdate to 1 can also fix this issue.\n\nbut SubresourceUpdate::SubresourceUpdate cannot access mLayerCount, we have to change ImageIndex? (it probably changes the intention of ImageIndex)\n\nwe also have the logic to handle entire layers in ImageHelper::flushStagedUpdates, so I think the current solution is fine.",
      "parentUuid": "40ba3a32_758e636f",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdab94e_b57b668a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-12T02:22:28Z",
      "side": 1,
      "message": "It\u0027s only `stageRobustSubresourceClear[WithFormat]` that can receive such an image index, I think. Your comment gave me another idea Sunny. You can change just those two functions to make a copy of the index, and if layer count is not specified, set it to `mLayerCount` in the copy.\n\nThen in `SubresourceUpdate::SubresourceUpdate`, `ASSERT()` that it always has a layer count.\n\nThe point is, this fix up will be done once, and then the `if` that runs over and over remains simpler.",
      "parentUuid": "1e37bbd7_609e2132",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cd8911f_2a666cbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-05-12T02:49:15Z",
      "side": 1,
      "message": "Hi\nI am a little bit confused, the problematic \"ImageIndex\" is not from something like stageRobustSubresourceClear[WithFormat], here is the callstack:\n\n(gdb) bt\n#0  gl::ImageIndex::ImageIndex (this\u003d0x7fffffd560, type\u003dgl::TextureType::_2D, levelIndex\u003d0, layerIndex\u003d-1, layerCount\u003d1)\n    at ../../src/libANGLE/ImageIndex.cpp:243\n#1  0x0000007fb4e56d64 in gl::ImageIndex::Make2D (levelIndex\u003d0) at ../../src/libANGLE/ImageIndex.cpp:164\n#2  0x0000007fb510bbfc in rx::RenderTargetVk::getImageIndex (this\u003d0x835c40) at ../../src/libANGLE/renderer/vulkan/RenderTargetVk.cpp:188\n#3  0x0000007fb50d7238 in rx::FramebufferVk::clearWithRenderPassOp (this\u003d0x8b7b80, clearColorBuffers\u003d..., clearDepth\u003dtrue, clearStencil\u003dfalse,\n    clearColorValue\u003d..., clearDepthStencilValue\u003d...) at ../../src/libANGLE/renderer/vulkan/FramebufferVk.cpp:1439\n#4  0x0000007fb50d6d20 in rx::FramebufferVk::clearImpl (this\u003d0x8b7b80, context\u003d0x83e760, clearColorBuffers\u003d..., clearDepth\u003dtrue,\n    clearStencil\u003dfalse, clearColorValue\u003d..., clearDepthStencilValue\u003d...) at ../../src/libANGLE/renderer/vulkan/FramebufferVk.cpp:302\n#5  0x0000007fb50d61c8 in rx::FramebufferVk::clear (this\u003d0x8b7b80, context\u003d0x83e760, mask\u003d16640)\n    at ../../src/libANGLE/renderer/vulkan/FramebufferVk.cpp:182\n#6  0x0000007fb4e26f78 in gl::Framebuffer::clear (this\u003d0x8b78a0, context\u003d0x83e760, mask\u003d16640) at ../../src/libANGLE/Framebuffer.cpp:1526\n\nor can you points to the function names as you mentioned \"You can change just those two functions to make a copy of the index\"",
      "parentUuid": "0bdab94e_b57b668a",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "7ed1ab974a35f832f24e9414b363061a64c74747",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}