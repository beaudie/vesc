{
  "comments": [
    {
      "key": {
        "uuid": "cfd571b6_82e96b40",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "I\u0027m not 100% sure what the rules are with constexpr and external linkage, but you can always move these inside the anonymous namespace to be sure.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 56
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25721af8_3948296e",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfd571b6_82e96b40",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 21,
        "endChar": 56
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "063b21d8_8a965a10",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Please ASSERT that uniform type is sampler!",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fb55786_9471c18c",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "063b21d8_8a965a10",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b4f9635_02608f68",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "This makes the TextureVk double-sync. How about, moving `DIRTY_OBJECT_TEXTURE_UNITS` before `DIRTY_OBJECT_TEXTURES`, and here, directly set DIRTY_BIT_SRGB_DECODE on the texture.\n\nThat way, `syncTextureUnits` gets called first, then `syncTextures` and during the single `syncState` call for the texture everything is handled.\n\nYou can then get rid of ContextImpl::syncTextureUnit.",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c3c0d39_aca381b8",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3216,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "we already double-sync textures with State::syncTextures followed immediately by State::syncImages. This isn\u0027t a problem because syncState will only process dirty bits that haven\u0027t already been processed by a previous sync.\n\nContextVk::syncState does not even sync all remaining dirty bits, it only syncs a single dirty bit: DIRTY_BIT_SRGB_DECODE, so we shouldn\u0027t be doing extra work during these extra syncs.\n\nRegardless, using syncTextureUnits means we make the dependency explicit - that texture state and sampler state need to be resolved before we can meaningfully interpret whether a texture unit needs to have srgb_decode state applied to it.\nHaving implicit dependencies might cause conflicts with future extensions that have the opposite dependency. looking at all this we went with \"explicit is better than implicit\"",
      "parentUuid": "9b4f9635_02608f68",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28e9717a_6e859abc",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3146,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "nit: excessive parentheses are excessive",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7919afe7_b15274b2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3146,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28e9717a_6e859abc",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87517695_0c670f2c",
        "filename": "src/libANGLE/renderer/vulkan/SamplerVk.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "The function looks more like it\u0027s saying `isSampler...` or just `skipSamplerSRGBDecode()`",
      "range": {
        "startLine": 35,
        "startChar": 9,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "713b6d93_bce2b380",
        "filename": "src/libANGLE/renderer/vulkan/SamplerVk.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87517695_0c670f2c",
      "range": {
        "startLine": 35,
        "startChar": 9,
        "endLine": 35,
        "endChar": 12
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e657baad_1d811c33",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2292,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Is forced linear and forced non-linear the only options for sampler? Does the sampler not have a default mode?",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ee58bc1_c588b510",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2292,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Sampler objects are only considered for srgb_decode, not srgb_override.\nsrgb_override has no interaction with sampler objects.\nIn this case we have to distinguish between:\n\n1. there is no sampler object\n2. there is a sampler object with default (don\u0027t skip decode) state\n3. there is a sampler object with forced linear state \n\nFor this logic, we represent those as default, nonlinear, and linear, respectively.",
      "parentUuid": "e657baad_1d811c33",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2cd8b53_4ede7775",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2331,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Wasn\u0027t it the opposite? As in texelFetch forces \"skip decode\"?",
      "range": {
        "startLine": 2331,
        "startChar": 61,
        "endLine": 2331,
        "endChar": 85
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0782121c_25eb0800",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2331,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "No, there\u0027s a double negative here: texelfetch forces skipping \"skip decode\"\n\n\"do not skip\" is the default state, and \"skip decode\" is the modified state. If we use texelFetch, we are required to ignore that state, regardless of which way it is.\nIf we ignore that state, the default is that we should decode, unless modified by srgb_override, or if the format doesn\u0027t require decoding in the first place.",
      "parentUuid": "e2cd8b53_4ede7775",
      "range": {
        "startLine": 2331,
        "startChar": 61,
        "endLine": 2331,
        "endChar": 85
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2f9189_5c740afc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2416,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "The copy image view is basically what\u0027s used with texelFetch, so this probably needs to always use the non-decoded view.\n\nSame with fetch image view.",
      "range": {
        "startLine": 2416,
        "startChar": 32,
        "endLine": 2416,
        "endChar": 60
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0511e518_8ba89b63",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2416,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "The fetch imageview is also used for seamful cubemap emulation, so we do need to have imageviews for that as well.\n\nThe copy imageview always obeys the colorspace prescribed by its format, so this should already be using the correct imageview in the case of texelFetch.",
      "parentUuid": "cc2f9189_5c740afc",
      "range": {
        "startLine": 2416,
        "startChar": 32,
        "endLine": 2416,
        "endChar": 60
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdb320ac_9ac4821a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5478,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Is that by some spec? If so, please quote it here.",
      "range": {
        "startLine": 5477,
        "startChar": 81,
        "endLine": 5478,
        "endChar": 45
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b5d9757_5b618eef",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5478,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "This logic is not from the specification, this is just how we handle formats that we can\u0027t reinterpret.\nAs far as the spec is concerned, if we can\u0027t support a counterpart format, we shouldn\u0027t expose the extension (as is done in this patch). We should still be able to support the format for regular use though, so we treat the format like any other format with no counterpart. That means it will go through the same path as any other non-reinterpretable format and occupy the linear imageview.",
      "parentUuid": "bdb320ac_9ac4821a",
      "range": {
        "startLine": 5477,
        "startChar": 81,
        "endLine": 5478,
        "endChar": 45
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72fa4f90_b7667ae4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5478,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-10T01:20:22Z",
      "side": 1,
      "message": "Understood. The comment could probably be expanded to be more clear. Also, typo: equivalent.",
      "parentUuid": "9b5d9757_5b618eef",
      "range": {
        "startLine": 5477,
        "startChar": 81,
        "endLine": 5478,
        "endChar": 45
      },
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06e5b4d8_f21d8681",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Should this instead be \"useDefaultImageView\"? What if the format is already sRGB, but no special linear or non-linear override is specified?",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf68c87_cf300c2d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "No, this already captures which imageview the format requires too, not just the override state. A format that is already sRGB will have this set to false, even if no extension state is set.",
      "parentUuid": "06e5b4d8_f21d8681",
      "revId": "570ae523e2681893a01e33214c1d964326676e15",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}