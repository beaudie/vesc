{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a6539ebf_40ac788f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-10T16:50:22Z",
      "side": 1,
      "message": "Split from reland",
      "revId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e734a502_7720fceb",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-07-10T17:39:55Z",
      "side": 1,
      "message": "RenderPass itself is just a wrapper of VkRenderPass, which is a pointer. Passing pointer to a pointer seems unnecessary. You could just create an invalid RenderPass object here and then test `if(renderPass.valid())`.",
      "range": {
        "startLine": 627,
        "startChar": 14,
        "endLine": 627,
        "endChar": 24
      },
      "fixSuggestions": [
        {
          "fixId": "5502a5b9_e1f109cb",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
              "range": {
                "startLine": 153,
                "startChar": 0,
                "endLine": 154,
                "endChar": 0
              },
              "replacement": "                                       const RenderPass \u0026renderPass,\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
              "range": {
                "startLine": 199,
                "startChar": 0,
                "endLine": 200,
                "endChar": 0
              },
              "replacement": "    const RenderPass *getRenderPass() const { return \u0026mRenderPass; }\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
              "range": {
                "startLine": 482,
                "startChar": 0,
                "endLine": 483,
                "endChar": 0
              },
              "replacement": "                                          const RenderPass \u0026renderPass,\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
              "range": {
                "startLine": 627,
                "startChar": 0,
                "endLine": 628,
                "endChar": 0
              },
              "replacement": "        const RenderPass \u0026renderPass,\n"
            }
          ]
        }
      ],
      "revId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45996346_fc17616e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-10T18:29:23Z",
      "side": 1,
      "message": "Ok I managed to make it work. renderPass.valid() is not always true even for render pass objects, that\u0027s when creating vertex input/shader pipeline libraries so I was using nullptr to distinguish between dynamic rendering and render pass objects.\n\nBut I might have as well just used the `preferDynamicRendering` feature for that. Not much is left of this CL after this, so I\u0027ll fold it into the final CL.",
      "parentUuid": "e734a502_7720fceb",
      "range": {
        "startLine": 627,
        "startChar": 14,
        "endLine": 627,
        "endChar": 24
      },
      "revId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdd26440_7dee3cae",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 7988,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-07-10T17:39:55Z",
      "side": 1,
      "message": "Have getRenderPassWithOps() returns kInvalidRenderPass object would get rid of most of the diffs in this CL.",
      "range": {
        "startLine": 7988,
        "startChar": 14,
        "endLine": 7988,
        "endChar": 34
      },
      "revId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1bd6490_f6e54502",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 7988,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-10T18:29:23Z",
      "side": 1,
      "message": "Acknowledged, there are more things that need to happen based on DR or not, so the ifs added around getRenderPassWithOps make this unnecessary.",
      "parentUuid": "bdd26440_7dee3cae",
      "range": {
        "startLine": 7988,
        "startChar": 14,
        "endLine": 7988,
        "endChar": 34
      },
      "revId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8cc5f9512d95279432a630a1db1aa91fc62a7a9a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}