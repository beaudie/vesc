{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3e20c974_5ad0dbaa",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-09T17:38:42Z",
      "side": 1,
      "message": "This can\u0027t be done in the thread (inserts in the hash map), what was the reason for removing `initGraphicsShaderProgramsForWarmUp`?",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e4589b1_045fab32",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-09T17:42:04Z",
      "side": 1,
      "message": "`ProgramExecutableVk::warmUpPipelineCache` happens in `LinkTaskVk::linkImpl` which could happen in an unlocked tail call but still in the main thread. is there a usecase where `LinkTaskVk::linkImpl` itself happens in an async thread?",
      "parentUuid": "3e20c974_5ad0dbaa",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e76b859f_c624b3b2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-09T18:00:06Z",
      "side": 1,
      "message": "Oh yes. The tasks are made to be run in parallel. In the vulkan backend in particular, we don\u0027t enable `parallelShaderCompileKHR` because we saw link happening in the context thread ends up still being faster, but that\u0027s not set in stone (and you may want to experiment with it too). The `enableParallelCompileAndLink` feature can be used to easily toggle that. The fact that it runs in an unlocked tail call is an optimization for when that extension is disabled (default) and helps apps that link in a separate context/thread.\n\nWe do run tests with `enableParallelCompileAndLink` enabled, FYI.",
      "parentUuid": "9e4589b1_045fab32",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ad5a8a5_34643cbc",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-09T20:20:35Z",
      "side": 1,
      "message": "well, if i need to take into account the fact that `LinkTaskVk::linkImpl` can happen in an async thread then i need to move things around a bit",
      "parentUuid": "e76b859f_c624b3b2",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b3fc7f8_78c2e0bc",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-09T22:25:36Z",
      "side": 1,
      "message": "ok, this is how it looks. safety at the cost of a bit of ugliness. WDYT?",
      "parentUuid": "4ad5a8a5_34643cbc",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bef5de2d_f75ccfdc",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-09T22:46:58Z",
      "side": 1,
      "message": "the reason we have bot errors like -\n```\nvk_renderer.cpp:830 (DebugUtilsMessenger): [ VUID-VkGraphicsPipelineCreateInfo-pStages-08888 ] Validation Error: [ VUID-VkGraphicsPipelineCreateInfo-pStages-08888 ] | MessageID \u003d 0x55cda48e | vkCreateGraphicsPipelines(): pCreateInfos[0].pInputAssemblyState-\u003etopology is VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP for tessellation shaders in pipeline (needs to be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST). The Vulkan spec states: If the pipeline is being created with pre-rasterization shader state and vertex input state and pStages includes tessellation shader stages, and either VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY dynamic state is not enabled or dynamicPrimitiveTopologyUnrestricted is VK_FALSE, the topology member of pInputAssembly must be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST (https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-08888)\n```\n\nis because we setup `GraphicsPipelineDesc` before we ran the front-end part of link. i think we are unnecessarily complicating things for a possible future option of async `linkImpl` calls. can we defer this complication to when we actually need it?",
      "parentUuid": "9b3fc7f8_78c2e0bc",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8508fe60_b388aeff",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 841,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-10T01:48:19Z",
      "side": 1,
      "message": "Oof, I was going to say `linkImpl` should be the one calling `populate` ... and now I see that\u0027s exactly what your original reply to the comment was. ðŸ˜“\n\nA bit of confusion since `warmUpPipelineCache` is not actually doing the warm up anymore, it\u0027s setting up the warm up task.\n\nSorry, let me backtrack. Your original change was good (patchset 9). I\u0027d only ask to rename the function to `getPipelineCacheWarmUpTask`.\n\n---\n\nRegarding all the parallel link stuff, the `linkImpl` is part of the link, which means threaded or not, we wait on it before resolving the link. No pipeline can be created in the meantime, so access to the hash map is safe regardless of where it\u0027s run. I originally mistakenly thought that this function is called from the post-link task.",
      "parentUuid": "bef5de2d_f75ccfdc",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c6b70b6_cff3498a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 7353,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-09T17:38:42Z",
      "side": 1,
      "message": "nit: `emplace` returns an iterator, please use that to get the payload instead of doing the lookup twice.",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9156850_65c5a036",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 7353,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-09T22:25:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c6b70b6_cff3498a",
      "revId": "3abdf67e55c84f16fb195bc050fd8027f1bd0ec9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}