{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7b6eb794_13efe976",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-03-07T20:29:52Z",
      "side": 1,
      "message": "nit: `CreateDirectory` or `CreateDirectories`",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 15
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7c4abd_f22f656c",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-07T22:47:44Z",
      "side": 1,
      "message": "Unfortunately `CreateDirectory` is already a Win32 API (looks like pure C API, no namespaces).\n\n`CreateDirectories` sounds a bit misleading. How about `CreateDirectoryFromPath`?",
      "parentUuid": "7b6eb794_13efe976",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 15
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4de09ffc_7803c3b3",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-08T21:34:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f7c4abd_f22f656c",
      "range": {
        "startLine": 43,
        "startChar": 5,
        "endLine": 43,
        "endChar": 15
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c680122_f7684bc1",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-03-07T20:29:52Z",
      "side": 1,
      "message": "This doesn\u0027t need to be in the generic header, it\u0027s not referenced anywhere except CreatePath for Windows.",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ca8da8_bb6b712e",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-07T22:47:44Z",
      "side": 1,
      "message": "FYI, its also used here: `src/libANGLE/renderer/vulkan/CLProgramVk.cpp:431`\n```\n        // Sanitize path so we can use \"/\" as universal path separator\n        angle::MakeForwardSlashThePathSeparator(headerFilePath);\n        size_t baseDirPos \u003d headerFilePath.find_last_of(\"/\");\n```",
      "parentUuid": "7c680122_f7684bc1",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52d21977_abd9ddc9",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-07T22:49:18Z",
      "side": 1,
      "message": "This whole `MakeForwardSlashThePathSeparator` becomes moot if we can do the pre-preprocessor phase here. Let me try that first...",
      "parentUuid": "68ca8da8_bb6b712e",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "161aa17f_f8668c51",
        "filename": "src/common/system_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-08T21:34:21Z",
      "side": 1,
      "message": "Continue convo in above comment.\nDone.",
      "parentUuid": "52d21977_abd9ddc9",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 57
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b1aafa_c9499e47",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 442,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-03-07T20:29:52Z",
      "side": 1,
      "message": "Ideally we don\u0027t write out things to a temp dir for compilation. ANGLE runs in lots of environments where we don\u0027t have file access (Chrome, Android sometimes, ..). \n\nIs it possible to prepend the includes to the compiled sources? Sort of like doing the proprocessor phase ouselves?",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 442,
        "endChar": 5
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55f19b47_5ae1b873",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 442,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-07T22:47:44Z",
      "side": 1,
      "message": "\u003e Is it possible to prepend the includes to the compiled sources? Sort of like doing the preprocessor phase ourselves?\n\nDoable for sure, let me verify first though...",
      "parentUuid": "75b1aafa_c9499e47",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 442,
        "endChar": 5
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d0b07e3_f4f3de4e",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 442,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-08T20:54:54Z",
      "side": 1,
      "message": "@geofflang@chromium.org - How much do we want to invest on doing preproc phase ourselves?\n\nGut says this might be a potential perf hit in the event that the user might have some `#include` towards the end of the source file (embedded data to init an array perhaps).\n\nAlso, when tokenizing each line - we need to handle cases like comments, potential user syntax errors, `#include vs. #  include` etc.\n\nThoughts on this?",
      "parentUuid": "55f19b47_5ae1b873",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 442,
        "endChar": 5
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be1b55b4_00ba2d1f",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 442,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T16:28:28Z",
      "side": 1,
      "message": "We talked about this internally, and we think the best solution is to add a new compile function to clspv that takes the header-\u003econtents mapping. LLVM has a function that lets you do just that: `addRemappedFile`.\n\nYou can see an example of its use here: https://github.com/google/clspv/blob/main/lib/Compiler.cpp#L390 and some tiny documentation here: https://clang.llvm.org/doxygen/PreprocessorOptions_8h_source.html#:~:text\u003d168%20%20///%20The%20set,MemoryBuffer%20*%3E%3E%20RemappedFileBuffers%3B\n\nThen you can circumvent all of this, remove file access and make compilation much faster too.",
      "parentUuid": "8d0b07e3_f4f3de4e",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 442,
        "endChar": 5
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a44e8362_6e138ba8",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 442,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T17:26:32Z",
      "side": 1,
      "message": "Nice, +1 to that!\n\nOkay, I\u0027ll work on that in clspv. \nIn the meantime, do we want to shelve this PR for now, or merge as-is?\n\nI\u0027m good with either one.",
      "parentUuid": "be1b55b4_00ba2d1f",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 442,
        "endChar": 5
      },
      "revId": "c31ed35b83182d01fc2118f205ae277beff4daad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}