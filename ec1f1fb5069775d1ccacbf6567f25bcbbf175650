{
  "comments": [
    {
      "key": {
        "uuid": "45534efd_49dd2709",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T20:39:32Z",
      "side": 1,
      "message": "drive-by: typo",
      "range": {
        "startLine": 7,
        "startChar": 19,
        "endLine": 7,
        "endChar": 31
      },
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed6d792_320a8110",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T20:39:32Z",
      "side": 1,
      "message": "nit: maybe add some details?",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c18e4f0b_ac3effb2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-17T14:48:44Z",
      "side": 1,
      "message": "Workaround oldSwapchain bug. I haven\u0027t run it on the CQ yet, but feel free to give it a try any time.",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d46e215_5b674b6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-17T20:01:41Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4142529_dbc73f58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-17T20:03:48Z",
      "side": 1,
      "message": "Sorry, I didn\u0027t mean to +1 CQ",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5782b6b_d8896f35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-18T00:05:55Z",
      "side": 1,
      "message": "FYI ... the Android Framework bug is: https://issuetracker.google.com/issues/168800550\n\nIt is currently private to Google.  Sorry, that\u0027s the way that project is setup.\n\nI will say that Jesse Hall just posted on that bug.  He pointed out the intent of oldSwapchain (e.g. the app/ANGLE can only use already-acquired images) and that the Vulkan loader (a.k.a. Android platform) should not be immediately freeing them.  He suggested an idea for doing that (using a background thread to cleanup old images).\n\nAs Tim points out, it may be a while before a new loader makes it into our CQ bots.  Hopefully, it can land in the Keystone/test/AOSP branch(s) much sooner.",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b25547a0_9a46cfa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-18T01:20:29Z",
      "side": 1,
      "message": "I guess there\u0027s not much to do here but abandon the CL? Do we want to do anything else? Like vkQueueWaitIdle under a workaround on ARM just to get things going?",
      "parentUuid": "c5782b6b_d8896f35",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06a07305_9f1ad01d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-09-18T01:22:16Z",
      "side": 1,
      "message": "Yes, very appreciated if you can add that üòä",
      "parentUuid": "b25547a0_9a46cfa8",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc1bae75_1b0e0bf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-18T01:35:41Z",
      "side": 1,
      "message": "Done. Please give it a try",
      "parentUuid": "06a07305_9f1ad01d",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dafedbe7_7445c8fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-09-18T01:54:18Z",
      "side": 1,
      "message": "it works. thanks üëç",
      "parentUuid": "dc1bae75_1b0e0bf3",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9947a70f_90f782c2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-17T21:19:05Z",
      "side": 1,
      "message": "Hmm.  I think the problem with the test failures on Android is that you\u0027re trying to create a new swapchain for a VkSurfaceKHR that already has a swapchain.  vkCreateSwapchainKHR() is probably returning VK_ERROR_NATIVE_WINDOW_IN_USE_KHR.  See: https://android.googlesource.com/platform/frameworks/native/+/master/vulkan/libvulkan/swapchain.cpp#1067",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cce576d8_6c52c8b8",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-17T21:21:48Z",
      "side": 1,
      "message": "Sorry that I forgot about that with my earlier review.\n\nFrom a technical/spec perspective, if we don\u0027t use oldSwapchain, I think the only alternative is you have to wait and do a vkDestroySwapchainKHR() before vkCreateSwapchainKHR().  I don\u0027t think that will give a very good user experience. \n I think we have to focus on getting an Android platform fix.",
      "parentUuid": "9947a70f_90f782c2",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05283755_c8056198",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T21:56:40Z",
      "side": 1,
      "message": "An Android platform fix won\u0027t come until a QPR at the earliest, assuming affected devices can update at all.   While that\u0027s not a problem for the official release of ANGLE on Android (which is still a release or two away), it could be a long while before CQ (or ARM) gets an Android fix.\n\nAre we doing things differently than most people, or is this a pretty fundamental bug that\u0027s somehow gone unnoticed?\n\nLooking at the framework code:\n\n    void ReleaseSwapchainImage(VkDevice device,\n                               ANativeWindow* window,\n                               int release_fence,\n                               Swapchain::Image\u0026 image) {\n    ...\n        if (image.dequeued) {\n            if (release_fence \u003e\u003d 0) {\n                // We get here from vkQueuePresentKHR. The application is\n                // responsible for creating an execution dependency chain from\n                // vkAcquireNextImage (dequeue_fence) to vkQueuePresentKHR\n                // (release_fence), so we can drop the dequeue_fence here.\n                if (image.dequeue_fence \u003e\u003d 0)\n                    close(image.dequeue_fence);\n            } else {\n                // We get here during swapchain destruction, or various serious\n                // error cases e.g. when we can\u0027t create the release_fence during\n                // vkQueuePresentKHR. In non-error cases, the dequeue_fence should\n                // have already signalled, since the swapchain images are supposed\n                // to be idle before the swapchain is destroyed. In error cases,\n                // there may be rendering in flight to the image, but since we\n                // weren\u0027t able to create a release_fence, waiting for the\n                // dequeue_fence is about the best we can do.\n                release_fence \u003d image.dequeue_fence;\n            }\n            image.dequeue_fence \u003d -1;\n\n            if (window) {\n                window-\u003ecancelBuffer(window, image.buffer.get(), release_fence);\n            } else {\n                if (release_fence \u003e\u003d 0) {\n                    sync_wait(release_fence, -1 /* forever */);\n                    close(release_fence);\n                }\n            }\n\n            image.dequeued \u003d false;\n        }\n\nAre we confident we\u0027re doing everything those comments describe correctly (admittedly, I don\u0027t understand everything there)?",
      "parentUuid": "cce576d8_6c52c8b8",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6145026_54abf9de",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T21:58:38Z",
      "side": 1,
      "message": "It looks like Jesse Hall was the last person working on ReleaseSwapchainImage(), so it may be worth checking with him about what could be going wrong here too.",
      "parentUuid": "05283755_c8056198",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ad49db6_13071bcd",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-17T22:21:49Z",
      "side": 1,
      "message": "\u003e Are we confident we\u0027re doing everything those comments describe correctly ...?\n\nGood question.  I\u0027ll look at this (watching code on Android) when I get a chance.  The Android framework team has been doing development (for years) on Nexus/Pixel device (i.e. Qualcomm).  From Sunny\u0027s email:\n\n\u003e In our Vulkan driver, vkDestroyImage (android native buffer) destroys the memory immediately which might cause the running GPU to generate a memory access issue.\n\nI suspect there\u0027s a difference in how the 2 Vulkan drivers handle vkDestroyImage, and that\u0027s at the heart of the problem.",
      "parentUuid": "b6145026_54abf9de",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b32115d5_b5120f37",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 920,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2020-09-18T01:22:16Z",
      "side": 1,
      "message": "Previously we didn\u0027t have such issue, but after one change in gralloc, which accelerated the memory alloc/free logic, we can easily reproduce this issue. So this might also be timing issue even vkDestroyImage destroy the memory immediately.\nSince fixing Android framework will take a long time to be effective, can we workaround in ANGLE firstly? for example, add a wait idle before vkCreateSwapChainKHR (if there was an old chain), this should not affect performance a lot since no benchmark/games will resize frequently.",
      "parentUuid": "9ad49db6_13071bcd",
      "revId": "ec1f1fb5069775d1ccacbf6567f25bcbbf175650",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}