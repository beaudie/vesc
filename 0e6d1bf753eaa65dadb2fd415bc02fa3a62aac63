{
  "comments": [
    {
      "key": {
        "uuid": "254fa647_3ce51aa0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-31T19:33:55Z",
      "side": 1,
      "message": "Since this has been asked a few times, I figured maybe I should just check it in. Even though it is not perfect (we probably should have a more systematic accounting for various types of allocations), its better than nothing.",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8a9da76_1eb8ca3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-31T21:40:53Z",
      "side": 1,
      "message": "The VMA library includes statistics capabilities. See section statistics_numeric_statistics for more details.",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ddeb9af_04c5674c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-31T22:25:33Z",
      "side": 1,
      "message": "I think VMA\u0027s statistics is different though, it tracks all allocations, not differentiate if it is dynamic buffer or regular buffer etc. Depends on what we want to track, this has value if we want to know dynamic buffer allocations. That been said, I am totally fine to put it back to WIP if people unsure about what we want yet.",
      "parentUuid": "a8a9da76_1eb8ca3c",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "010dda4f_9cd4da7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-01T16:34:12Z",
      "side": 1,
      "message": "Lets move back to WIP and I (or anyone has interest) need to think it through exactly what we need before check it in.",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45f378cf_50c45c46",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 780,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-31T21:40:53Z",
      "side": 1,
      "message": "I think the preference would be to have this conditional on a gn arg (e.g. ifdef) or a feature flag.",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f82ef695_1507bb6d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 780,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-31T23:03:25Z",
      "side": 1,
      "message": "The command graph output stuff was underneath a constexpr conditional, which should let the compiler optimize out the branching/storing.\n\nHowever, this should all be part of the performance counters stuff.   Then, it could be graphed as a histogram or something as an overlay.",
      "parentUuid": "45f378cf_50c45c46",
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddbaf304_dd970243",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 10
      },
      "lineNbr": 408,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-31T23:03:25Z",
      "side": 1,
      "message": "These should be added to PerfCounters.",
      "range": {
        "startLine": 407,
        "startChar": 0,
        "endLine": 408,
        "endChar": 53
      },
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2cec12b_d6e7eb51",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1333,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-31T23:03:25Z",
      "side": 1,
      "message": "This looks prone to breaking, since it\u0027s very likely any new release() or allocate() call will not have a matching onDynamicBufferRelease()/onDynamicBufferAllocate() call with it since there\u0027s no way to enforce it with the compiler or a test.\n\nInstead, I think BufferHelper should handle this work by having a ContextVk passed to init()/release().   That would help with maintenance in the future and remove all of the onDynamicBufferRelease() calls sprinkled around.",
      "range": {
        "startLine": 1332,
        "startChar": 0,
        "endLine": 1333,
        "endChar": 58
      },
      "revId": "0e6d1bf753eaa65dadb2fd415bc02fa3a62aac63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}