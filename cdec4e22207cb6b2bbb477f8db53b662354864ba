{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8e684f3_27adfe24",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-25T03:21:50Z",
      "side": 1,
      "message": "Is this guaranteed to be stable? Or could it change on llvm rolls?",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 57
      },
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ee3512_0b46049e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-06-27T13:26:04Z",
      "side": 1,
      "message": "I don\u0027t know. I don\u0027t think it\u0027s a guarantee but I would imagine it would be fairly stable at this point and AST changes would be a big deal as it would break some tooling. Another API is `libclang` but I didn\u0027t find prebuilts in the tree and this is just easier to handle with pure python.",
      "parentUuid": "e8e684f3_27adfe24",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 57
      },
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56272b87_9c0ac754",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2024-06-25T20:40:48Z",
      "side": 1,
      "message": "Roman, looks promising to me, better than writing/maintaining our own parser.",
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa3cb68_95eadfb6",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2694,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-25T03:21:50Z",
      "side": 1,
      "message": "Debugging failures?",
      "range": {
        "startLine": 2693,
        "startChar": 0,
        "endLine": 2694,
        "endChar": 20
      },
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89d2445_afe7f94c",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2694,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-06-27T13:26:04Z",
      "side": 1,
      "message": "That\u0027s just to make it into a demo to call the function I added and exit.",
      "parentUuid": "6aa3cb68_95eadfb6",
      "range": {
        "startLine": 2693,
        "startChar": 0,
        "endLine": 2694,
        "endChar": 20
      },
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab02ceee_5d379573",
        "filename": "src/tests/restricted_traces/trace_convert.py",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-25T03:21:50Z",
      "side": 1,
      "message": "Missing copyright notice and `#!`",
      "revId": "cdec4e22207cb6b2bbb477f8db53b662354864ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}