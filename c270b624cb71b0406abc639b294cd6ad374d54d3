{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f7d79bcd_f4014b47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-18T06:30:10Z",
      "side": 1,
      "message": "It feels like this is not a correct fix. Like, if SF happens to update the extension count between our two queries, ok we caught that, but what if that happens afterwards? We\u0027d miss the extension it adds.\n\nGranted, we don\u0027t use that extension, but it begs the question of why Android is tweaking Vulkan extensions after ANGLE has been loaded.",
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a96174a_35e25913",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-18T17:37:52Z",
      "side": 1,
      "message": "\u003e It feels like this is not a correct fix. Like, if SF happens to update the extension count between our two queries, ok we caught that, but what if that happens afterwards? We\u0027d miss the extension it adds.\n\nAgreed, and I brought this up in the chat thread also (which I added you to).   It would be nice to fix the underlying race condition, but any fixes that land won\u0027t be available in the Android framework for a while, and this is a relatively straightforward workaround for now.   I think this is a good compromise to solve the immediate problem while the underlying Android issue is investigated.\n\nUnfortunately, it may be a while before we can remove this fix, depending on which versions of Android ANGLE will support.",
      "parentUuid": "f7d79bcd_f4014b47",
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27f9044d_99587564",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-11-18T17:38:55Z",
      "side": 1,
      "message": "Documenting some background: This is for an OEM device using ANGLE as its native GLES driver.  The race condition affects one process, during Android start-up.  Surface Flinger uses Hardware Composer (HWC) for hardware-based composition (e.g. using overlays), and Render Engine (RE) for GPU composition (e.g. rendering to combine multiple app and system windows together).  SF, RE, and HWC all start about the same time.  HWC sets a property if it can support display timing.  This gets passed through SF to RE\u0027s Vulkan loader.\n\nThe Vulkan loader used to do a synchronous call in vkEnumerateDeviceExtensionProperties() in order to get this property.  That took some number of milliseconds to complete and affected the start-up time of every Vulkan/ANGLE app.  Thus, theere was push-back about this (I think from the OEM), and so this was changed to an asynchronous approach.  IIUC early testing indicated that RE would get the property in time.  However, the partner is now finding that this case is happening 0.5% of the time.  That could mean that the property is getting there early enough some time, and too late other times.\n\nI am pushing for the Android platform to try to fix this, but it\u0027s not clear how easy it will be.",
      "parentUuid": "f7d79bcd_f4014b47",
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac3830b5_c693c42a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-18T02:15:28Z",
      "side": 1,
      "message": "Does it at least return deviceExtensionCount correctly?\n\nCould you add an ASSERT(deviceExtensionCount \u003d\u003d deviceExtensionProps.size()); after the loop?",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9d1ffc7_10554706",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-18T03:00:52Z",
      "side": 1,
      "message": "As you\u0027re pointing out, this doesn\u0027t fix the issue.\n\nThe issue is the following (using made up numbers):\n1.) vkEnumerateDeviceExtensionProperties(..., \u0026deviceExtensionCount, nullptr)\n- This returns deviceExtensionCount \u003d 10.\n2.) Race condition occurs.   There are now actually 11 extensions due to SF updating the property service.sf.present_timestamp (which adds VK_GOOGLE_display_timing).\n3.) vkEnumerateDeviceExtensionProperties(..., \u0026deviceExtensionCount, deviceExtensionProps.data())\n- This is requesting 10 properties, but there are actually 11 available, so we get VK_INCOMPLETE.\n\nInstead, we need to do both calls to vkEnumerateDeviceExtensionProperties() inside the loop so we get the updated count after SF has added the extension.",
      "parentUuid": "ac3830b5_c693c42a",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e32a68d_bac7d272",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-18T06:30:10Z",
      "side": 1,
      "message": "No need to do both calls, just:\n\n    deviceExtensionProps.resize(deviceExtensionCount);\n\nat the beginning of the loop to update the vector size.",
      "parentUuid": "f9d1ffc7_10554706",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1dc3572_aa345ee9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-11-18T16:52:53Z",
      "side": 1,
      "message": "Yes, thanks for the fix!  I updated the comment as well as added the resize.",
      "parentUuid": "0e32a68d_bac7d272",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c19ed1f_2735a654",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-18T17:37:52Z",
      "side": 1,
      "message": "Unresolving, since this version still doesn\u0027t work correctly.   We do need both queries:\n\nIf pProperties is NULL, then the number of extensions properties available is returned in pPropertyCount. Otherwise, pPropertyCount must point to a variable set by the user to the number of elements in the pProperties array, and on return the variable is overwritten with the number of structures actually written to pProperties. If pPropertyCount is less than the number of extension properties available, at most pPropertyCount structures will be written, and VK_INCOMPLETE will be returned instead of VK_SUCCESS, to indicate that not all the available properties were returned.\n\nWe need to pass null with the first query in the loop so pPropertyCount is correctly updated to the full number of extensions.   Otherwise, it will never be updated since it can only write N-1 extensions and will always return VK_INCOMPLETE.",
      "parentUuid": "b1dc3572_aa345ee9",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4112a0c_cf258405",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-11-18T17:49:09Z",
      "side": 1,
      "message": "Yes, I looked at both the spec and the Android implementation, and you are correct.  It\u0027s been so long since I worked on that part of the spec and code that I forgot.\n\nUpdate coming shortly!",
      "parentUuid": "1c19ed1f_2735a654",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2153f32a_9d1e1ad8",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-11-18T20:05:46Z",
      "side": 1,
      "message": "As I mentioned elsewhere, we\u0027ve decided to add 1 to the count and not loop.",
      "parentUuid": "d4112a0c_cf258405",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d3e1136_e47d41b6",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-18T21:32:03Z",
      "side": 1,
      "message": "It\u0027s weird that the spec doesn\u0027t mention this, but usually APIs like this always return the potential count, even if all couldn\u0027t be written. That way, you could do things like take a guess and allocate space for 20, then hope the actual number is less, and if not you already get the correct number from the first call to use in the second call.\n\nI\u0027ll try and get clarification if the current wording is intentionally trying to say that pPropertyCount is not set to correct number of pProperties is NULL.",
      "parentUuid": "d4112a0c_cf258405",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8e14045_c298e9f0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1722,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-11-18T22:38:09Z",
      "side": 1,
      "message": "The new approach is good.  The only time pPropertyCount is overwritten in the 2nd call is when fewer items were copied than requested.  Looking at the spec (which  points to that of vkEnumerateInstanceExtensionProperties), it says:\n\n\u003e If pProperties is NULL, then the number of extensions properties available is returned in pPropertyCount. Otherwise, pPropertyCount must point to a variable set by the user to the number of elements in the pProperties array, and on return the variable is overwritten with the number of structures actually written to pProperties. If pPropertyCount is less than the number of extension properties available, at most pPropertyCount structures will be written, and VK_INCOMPLETE will be returned instead of VK_SUCCESS, to indicate that not all the available properties were returned.\n\nThus, we can create a huge array and ask for that many.  pPropertyCount will be \"overwritten with the number of structures actually written to pProperties.\"",
      "parentUuid": "9d3e1136_e47d41b6",
      "range": {
        "startLine": 1720,
        "startChar": 0,
        "endLine": 1722,
        "endChar": 78
      },
      "revId": "c270b624cb71b0406abc639b294cd6ad374d54d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}