{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2c3038ce_19f19a94",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-22T17:52:27Z",
      "side": 1,
      "message": "I\u0027m afraid this particular part of the change is problematic. In Chrome (and I think others), there\u0027s a sandbox and ANGLE gets a small chance before the sandbox is set up to do some things. One of the things forbidden by the sandbox is creating threads, so we _have_ to create all the threads up front and early.",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7fa9a91_98673c3b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-22T19:49:39Z",
      "side": 1,
      "message": "OK, this is easy to change.\n\nHowever I\u0027m interested what happens when sandbox is set up.\n\nCurrently, all threads are created in the `createThreads()` that is called in each `AsyncWorkerPool::postWorkerTask()` method. First call will actually create all threads, while subsequent will be a no-op.\n\nSo there must be some empty task during sandbox startup just to create all the threads. Am I right?\n\nIf there is no such task, then threads are already created after setup, and there should be no difference if all created in a single first task or in multiple tasks (future change will even avoid creating threads unnecessarily).\n\nAlso there is `angle_delegate_workers \u003d build_with_chromium` option. I assumed that `AsyncWorkerPool` is not even used in Chrome.",
      "parentUuid": "2c3038ce_19f19a94",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98866766_fb28fb1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-22T20:19:21Z",
      "side": 1,
      "message": "Ok don\u0027t change anything yet, let me dig some old bugs up to refresh my memory. It might have been a sandbox other than Chromium\u0027s, or perhaps that was before the delegate workers were added.\n\nI\u0027ll get back to you",
      "parentUuid": "d7fa9a91_98673c3b",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fda27442_fed34a8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-23T19:01:54Z",
      "side": 1,
      "message": "Looks like being lazy with thread creation is fine!",
      "parentUuid": "98866766_fb28fb1d",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58eca040_aa5489ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-23T19:41:12Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "fda27442_fed34a8a",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dff5604_898a04af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T01:22:04Z",
      "side": 1,
      "message": "`Bug: angleproject:374007465`",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d445fc_9f967373",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T11:30:52Z",
      "side": 1,
      "message": "Thanks. Will update.",
      "parentUuid": "5dff5604_898a04af",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7668a49c_fa15db4b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T12:10:31Z",
      "side": 1,
      "message": "Done.\nAlso updated other CLs in this chain.",
      "parentUuid": "71d445fc_9f967373",
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df6787ac_aa810845",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T01:22:04Z",
      "side": 1,
      "message": "Can these two be `private` so `runAndMarkAsReady()` is always called?\n\nWhy the split even?",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "728aff14_50a3babe",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T11:30:52Z",
      "side": 1,
      "message": "Split is for future CL. Thread will be marked as free after `run()` and before `markAsReady()`.\n\nI did not want to make them private to then make them public in the follow up CL.",
      "parentUuid": "df6787ac_aa810845",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0690fa7c_39b21450",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T12:10:31Z",
      "side": 1,
      "message": "Removed split in this CL. `run()` and `markAsReady()` will be added in the next CL to avoid the confusion.",
      "parentUuid": "728aff14_50a3babe",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 47,
        "endChar": 23
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "425c87b4_cfc77b5f",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T01:22:04Z",
      "side": 1,
      "message": "`may` is a little confusing, I think you mean `must`, but it reads like \"it may (or may not) be unlocked by the function call itself\"",
      "range": {
        "startLine": 175,
        "startChar": 86,
        "endLine": 175,
        "endChar": 89
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d306b2f7_6f2d216e",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T11:30:52Z",
      "side": 1,
      "message": "`may` is correct. So the function is free to unlock the mutex after the call ends, or unlock and lock it again (like waiting on a conditional variable), or do nothing with the lock. I will change to `may (or may not)` to make it clear.",
      "parentUuid": "425c87b4_cfc77b5f",
      "range": {
        "startLine": 175,
        "startChar": 86,
        "endLine": 175,
        "endChar": 89
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "991e05b9_bca61825",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T12:10:31Z",
      "side": 1,
      "message": "Added `(or may not)` into the comment.",
      "parentUuid": "d306b2f7_6f2d216e",
      "range": {
        "startLine": 175,
        "startChar": 86,
        "endLine": 175,
        "endChar": 89
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "411bc478_43f001e8",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T14:28:09Z",
      "side": 1,
      "message": "Ok this is a little confusing (because of English):\n\n\"may be unlocked\", is unlocked here a verb (in \"past principle\" form) or an adjective? Which one of these do you mean?\n\n* When returned false, an unlock operation may be called by the caller afterwards (because the lock is still in a locked state)\n* When returned false, the lock may be in an unlocked state afterwards (because the function has unlocked it)\n\nHaving written that down, I believe you mean the latter.",
      "parentUuid": "991e05b9_bca61825",
      "range": {
        "startLine": 175,
        "startChar": 86,
        "endLine": 175,
        "endChar": 89
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1a7e1c6_2cd6702c",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T15:15:32Z",
      "side": 1,
      "message": "\u003e may be unlocked\", is unlocked here a verb (in \"past principle\" form) or an adjective?\n\nIt is adjective. Now I understand the confusion.\n\n\u003e Which one of these do you mean?\n\u003e Having written that down, I believe you mean the latter.\n\nYes, your assumption is correct. I will use your wording.",
      "parentUuid": "411bc478_43f001e8",
      "range": {
        "startLine": 175,
        "startChar": 86,
        "endLine": 175,
        "endChar": 89
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a3384b6_387d3b33",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T01:22:04Z",
      "side": 1,
      "message": "Similarly, suggest `must` to make it clearer",
      "range": {
        "startLine": 195,
        "startChar": 55,
        "endLine": 195,
        "endChar": 58
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30bf5a85_48f5c9d7",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T11:30:52Z",
      "side": 1,
      "message": "Same as in the previous case. Caller of `startThreadLocked()` does not care if lock will be unlocked or stay locked, so the implementation is free to unlock or not. I did not want to force the implementation to always unlock the lock.\n\nIf I wanted to enforce `must` then just passed the lock by-value instead of pointer.",
      "parentUuid": "8a3384b6_387d3b33",
      "range": {
        "startLine": 195,
        "startChar": 55,
        "endLine": 195,
        "endChar": 58
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52cee8c2_567a8669",
        "filename": "src/common/WorkerThread.cpp",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T12:10:31Z",
      "side": 1,
      "message": "Added `(or may not)` into the comment.",
      "parentUuid": "30bf5a85_48f5c9d7",
      "range": {
        "startLine": 195,
        "startChar": 55,
        "endLine": 195,
        "endChar": 58
      },
      "revId": "c9ed71332e0f064726ba275d2b3b1314bb3cd92d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}