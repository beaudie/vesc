{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6a993e_282f13ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T16:51:08Z",
      "side": 1,
      "message": "Typo: `ELG` -\u003e `EGL`",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c985f21e_bf2e1493",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 7,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb6a993e_282f13ee",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8934d4d8_cd05db9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "@i.nazarov@samsung.com would you mind taking a look at this change too?",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3ae3d38_80ab5c9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T16:51:08Z",
      "side": 1,
      "message": "Yes, I\u0027m already checking the implementation, but it could take some time)",
      "parentUuid": "8934d4d8_cd05db9c",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0a5a8e6_c9f50ae8",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 10
      },
      "lineNbr": 527,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "This duplication is getting a little out of hand. Could you please remove `TEMPLATE_EGL_ENTRY_POINT_WITH_RETURN_NO_LOCKS` instead, and make `TEMPLATE_EGL_ENTRY_POINT_WITH_RETURN` have an `{egl_lock}` line here? Then when the template is instantiated you can set `egl_lock` to any of these 4 possibilities.",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feb781df_966d3282",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 10
      },
      "lineNbr": 527,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "`TEMPLATE_EGL_ENTRY_POINT_WITH_RETURN_NO_LOCKS` is a bit different from other templates, it doesn\u0027t have the line `ANGLE_EGL_SCOPED_CONTEXT_LOCK` and the corresponding scope paratheses, so I kept it.",
      "parentUuid": "e0a5a8e6_c9f50ae8",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "746a3397_7f92cea6",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 726,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T16:51:08Z",
      "side": 1,
      "message": "`contextMap` is used without a `mContextMapMutex` lock.\n\n---\n\n@syoussefi@chromium.org\n\nEven tho, this change does not have a mutex lock here, I think this method should had a mutex lock even before this change. The `DisplayState::notifyDeviceLost()` may be called from multiple threads, so the `deviceLost` member must also be protected by the mutex.\n\nMutex locking order will be: `mContextMapMutex`, `ErrorSet::mMutex` (for each Context).\n\nIn some backends, `DisplayState::notifyDeviceLost()` may be called while `ErrorSet::mMutex` of some Context is already locked (from `ErrorSet::getGraphicsResetStatus()`).\n\nSo we will have mutex locking order:\n`ErrorSet::mMutex` (ctx1), `mContextMapMutex`, `ErrorSet::mMutex` (for each Context).\n\nWe will have a situation, when `ErrorSet::mMutex` and `mContextMapMutex` mutexes may be locked in reverse order from different threads - **possible deadlock**.\n\nBut because, `ErrorSet::markContextLost()` uses `getLockIfNotAlready()`, that uses `try_lock()` - the above deadlock will not happen. But this is because `getLockIfNotAlready()` will not work as intended. Intention is to skip lock if already locked by the **same thread**, but it will skip lock if already locked by **any thread**. In other words, deadlock will not happen because of the bug in `getLockIfNotAlready()`.\n\nEven if do not add `mContextMapMutex` lock, we may still have reverse mutex locking order if some two contexts are calling `ErrorSet::getGraphicsResetStatus()`, but this time this will be `ErrorSet::mMutex` mutexes of these contexts. Like in the previous case, deadlock will not happen because of the bug in `getLockIfNotAlready()`.\n\nWe have 3 problems:\n1. `getLockIfNotAlready()` skips lock even if other thread holding a lock (normal case - not a recursion)\n2. Make `DisplayState::notifyDeviceLost()` thread safe.\n3. Fix reverse mutex lock dead lock problems.\n\nSuggested solutions:\n\nFor the (1) I suggest tracking owner thread ID, like in `GlobalMutex` class when `ANGLE_ENABLE_GLOBAL_MUTEX_RECURSION` is defined. Maybe even create template `RecursiveMutex\u003c\u003e` (should be faster than using `std::recursive_mutex`), that will accept any (even `SimpleMutex`) non recursive mutex as `T`. We can use this new template to replace `GlobalMutex` in the mentioned case (not part of the fix - refactoring).\n\nFor (2): Protect `DisplayState::notifyDeviceLost()` by the `mContextMapMutex`. Make `deviceLost` atomic to avoid locking mutex in other places.\n\nFor (3): Add `mGraphicsResetStatusMutex` (or similar) mutex to the `Display`. Lock it when calling `mErrors.getGraphicsResetStatus()`.\n\n**I will investigate more** to see if there are other problems regarding dead locking.",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab5d6de3_5be44d56",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 726,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-28T17:15:12Z",
      "side": 1,
      "message": "Thank you Igor for the detailed description, would you please open a new issue to track this? I\u0027ve noticed threading issues with device loss elsewhere too: anglebug.com/42265604\n\nAs to this change, what is your suggestion, should we take the `mContextMapMutex` lock or not take it, until the issue is addressed separately?",
      "parentUuid": "746a3397_7f92cea6",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ffcc968_6362040a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 726,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T20:55:29Z",
      "side": 1,
      "message": "\u003e Thank you Igor for the detailed description, would you please open a new\n issue to track this? I\u0027ve noticed threading issues with device loss \n\nelsewhere too: anglebug.com/42265604\n\nI will create new and check `anglebug.com/42265604` later.\n\n\u003e As to this change, what is your suggestion, should we take the `mContextMapMutex` lock or not take it, until the issue is addressed separately?\n\nI think that we can take the lock. It will not cause dead lock because of the bug in `getLockIfNotAlready()`. Then in a separate commit we can extend the lock to also include `deviceLost` member access and make it atomic.",
      "parentUuid": "ab5d6de3_5be44d56",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e1b3fa_9d00ee8b",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 891,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-28T16:51:08Z",
      "side": 1,
      "message": "Suggest moving this check (keeping the code here) to the parent scope, that takes the lock. This way we will avoid unnecessary `devicePlatformDisplayMapMutex` mutex lock if `display` was already obtained from `anglePlatformDisplays`.",
      "range": {
        "startLine": 891,
        "startChar": 8,
        "endLine": 891,
        "endChar": 31
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f6748f_25ec95a8",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 891,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:26:33Z",
      "side": 1,
      "message": "Thank you Igor. I made the change, could you please check if I understand your suggestion correctly?",
      "parentUuid": "c4e1b3fa_9d00ee8b",
      "range": {
        "startLine": 891,
        "startChar": 8,
        "endLine": 891,
        "endChar": 31
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73443171_99da11e2",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 891,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-10-29T22:34:30Z",
      "side": 1,
      "message": "My pleasure to help.\nYes, everything is correct.",
      "parentUuid": "73f6748f_25ec95a8",
      "range": {
        "startLine": 891,
        "startChar": 8,
        "endLine": 891,
        "endChar": 31
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9147c7e4_208bdad6",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1015,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "Could you please take a look to see who the display is observing (is it a context?) and when the message could arrive? This would be a deadlock if `mContextMapMutex` is already locked.",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c681950b_da48e6ed",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1015,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Thank you. This is the change I found that introduced the `Display::onSubjectStateChange()`: https://chromium-review.googlesource.com/c/angle/angle/+/2240638. `DisplayImpl` is the only subject that `Display` is observing.\n\nAmong all of the `DisplayImpl` subjects, only `DisplayCGL` is calling `Subject::onstateChange`--\u003e`Display::onSubjectStateChange()`.\n\n`EGL_HandleGPUSwitchANGLE()`, or `EGL_ForceGPUSwitchANGLE()`, will eventually invoke this function. No `mContextMapMutex` is taken in these two function chains. except in this `Display::onSubjectStateChange()`.",
      "parentUuid": "9147c7e4_208bdad6",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca9ba67_d8bd7a20",
        "filename": "src/libANGLE/GlobalMutex.cpp",
        "patchSetId": 10
      },
      "lineNbr": 167,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "Please deduplicate with `AllocateGlobalMutexImpl`. You can make that function take a pointer to `g_Mutex` or `g_EGLSyncMutex`.",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f07f49f_6b42975e",
        "filename": "src/libANGLE/GlobalMutex.cpp",
        "patchSetId": 10
      },
      "lineNbr": 167,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ca9ba67_d8bd7a20",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4f95cf_d0e74f63",
        "filename": "src/libANGLE/GlobalMutex.cpp",
        "patchSetId": 10
      },
      "lineNbr": 293,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "Same here, please deduplicate with `DeallocateGlobalMutex` using a helper.",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3f409e_023ba5ff",
        "filename": "src/libANGLE/GlobalMutex.cpp",
        "patchSetId": 10
      },
      "lineNbr": 293,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc4f95cf_d0e74f63",
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "223dbb8f_081953ec",
        "filename": "src/libANGLE/GlobalMutex.h",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "To stop the duplication (like if we later add a surface mutex), you can use a template argument in the first class above like this:\n\n```\nnamespace priv\n{\nenum class GlobalMutexChoice\n{\n    // All EGL entry points except EGL Sync objects\n    EGL,\n    // Entry points relating to EGL Sync objects\n    Sync,\n};\n}\n\ntemplate \u003cpriv::GlobalMutexChoice mutexChoice\u003e\nclass [[nodiscard]] ScopedOptionalGlobalMutexLock final : angle::NonCopyable\n```\n\nIn the cpp, you can `switch (mutexChoice)`, `?:` or whatever is needed to deduplicate the code as much as possible. Given that the parameter is a template argument, the compiler will optimize the ifs and switches away. You can use the trick here to make sure the template is actually instantiated: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/vulkan/vk_cache_utils.cpp;l\u003d6761;drc\u003d9a4c7495f3cdc31d8db47947d6aef7ed19c74494\n\nIf it makes things simpler, you can also add this in the header for use in the autogen scripts and whatnot:\n\n```\nusing ScopedGlobalEGLMutexLock \u003d ScopedGlobalMutexLock\u003cpriv::GlobalMutexChoice::EGL\u003e;\nusing ScopedGlobalEGLSyncObjectMutexLock \u003d ScopedGlobalMutexLock\u003cpriv::GlobalMutexChoice::Sync\u003e;\n```",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 42,
        "endChar": 2
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ca569bc_e2cd0312",
        "filename": "src/libANGLE/GlobalMutex.h",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "223dbb8f_081953ec",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 42,
        "endChar": 2
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc6d9070_4c2176bc",
        "filename": "src/libANGLE/GlobalMutex.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-27T04:37:54Z",
      "side": 1,
      "message": "Better allocate all the mutexes in the same call.\n\n```suggestion\nvoid AllocateGlobalMutex();\nvoid DeallocateGlobalMutex();\n```",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "134e2063_83800c54",
        "filename": "src/libANGLE/GlobalMutex.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-29T22:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc6d9070_4c2176bc",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "1a57b9f21c248a75954534a6e2bb2eb9d70444be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}