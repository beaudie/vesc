{
  "comments": [
    {
      "key": {
        "uuid": "56cca5d7_644e6419",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "Interesting.  I know this CL isn\u0027t changing this, but I\u0027m wondering when this is planned to be changed?",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d465d865_80940b59",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T00:04:56Z",
      "side": 1,
      "message": "What would you like changed?",
      "parentUuid": "56cca5d7_644e6419",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f546fb5_56b67b8c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "I believe there\u0027s an EGL config that should drive this? At least something that says if vsync should be enabled or not.",
      "parentUuid": "d465d865_80940b59",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52d3e20a_678c9928",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T17:29:13Z",
      "side": 1,
      "message": "ah yes, eglSwapInterval, tracked in http://anglebug.com/2932 . No owner yet.",
      "parentUuid": "7f546fb5_56b67b8c",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d27a14b7_6391fc4a",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "Yes, eglSwapInterval.  There\u0027s an extension (I forget the name of) that specifies the equivalent of MAILBOX.  Perhaps we should drive this from that.  For whatever reason, it doesn\u0027t work on Android, and so the Swappy library has been created to address the space.\n\nJamie, for power/battery reasons, I think that Android will want us to support FIFO as the default.\n\nBTW, Cody told me that he\u0027s seen tearing with ANGLE and Android/Vulkan..  I don\u0027t know how that happens, as I think Android only supports the Vulkan FIFO and MAILBOX present modes.",
      "parentUuid": "7f546fb5_56b67b8c",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99252916_b681039f",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "FYI ... Following up ... Cody showed me a program that he thought was misbehaving with ANGLE (it\u0027s an Android Studio-available sample program (gl2jni).  He hadn\u0027t thought about MAILBOX vs. FIFO as a possibility.\n\nIn looking at it, I figured it was MAILBOX with ANGLE vs. FIFO for the native GLES driver.  I did an experiment (#if 0\u0027ing out the for-loop).  Sure enough, the app \"looked correct\" with ANGLE once it was using FIFO.  The app renders much faster than 60FPS, and MAILBOX let it fly!\n\nCan we do a separate CL that uses FIFO for Android?",
      "parentUuid": "d27a14b7_6391fc4a",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f615236_1cddbc43",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-06T15:50:14Z",
      "side": 1,
      "message": "I\u0027m surprised that mailbox made the app look incorrectly (where they depending on each frame taking exactly 16.6ms?!).\n\nYes, that should be doable. I can take a look at implementing eglSwapInterval, which defaults to FIFO, and change our perf tests to specifically ask for mailbox/immediate. That should automatically cover Android defaulting to FIFO.",
      "parentUuid": "99252916_b681039f",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aba14844_8c4badb9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-07T16:21:25Z",
      "side": 1,
      "message": "\u003e I\u0027m surprised that mailbox made the app look incorrectly (where they depending on each frame taking exactly 16.6ms?!).\n\nI\u0027ll explain.  The simple app draws the same triangle, but varies the background color.  With FIFO, it gradually transitions from black/dark-grey towards white, and then quickly goes back to black/dark-grey again.  With MAILBOX, it just seemed to flash between dark and light in a seemingly-random manner.  Given that Cody didn\u0027t know what was going on (e.g. MAILBOX), he thought it was a bug.  Since I had been looking at the MAILBOX code, I recognized what it was doing (not showing multiple consecutive frames, and therefore appearing to flash).\n\n\n\u003e Yes, that should be doable. I can take a look at implementing eglSwapInterval, which defaults to FIFO, and change our perf tests to specifically ask for mailbox/immediate. That should automatically cover Android defaulting to FIFO.\n\nThat would be great!",
      "parentUuid": "4f615236_1cddbc43",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a0d06a_ae512961",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "Hmm.  You may want to vary this logic based on which present mode you selected.  For example, Android adds one image to what you ask for if you select MAILBOX mode.",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f12fbb0b_7f57cce7",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "Interesting, why does Android do that? As the developer, I can\u0027t be expected to work around changes like this for every platform! Shouldn\u0027t this behavior be documented/exposed instead? Like a feature or something that says \"this platform adds one image if mailbox\".",
      "parentUuid": "f6a0d06a_ae512961",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38a18811_5da14e52",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "Good questions and gripe!  In hindsight, I think we should have allowed getting capabilities per present-mode (we\u0027re looking at adding that).\n\nBefore I get into background, let me ask: what is your goal for adding one image?  Is it to allow ANGLE to have one image being displayed, one queued for presentation, and one to render to (i.e. avoid latency and increase frame rate)?\n\nI\u0027ll provide some explanation from spec-land, and what I know about different implementations (hopefully won\u0027t bore you to death:-) ...\n\nOriginally (I\u0027ve seen some changes lately), Android (and probably all other drivers/platforms) allowed a swapchain to be created with only 2 images (minImageCount \u003d 2).  Android (and I think other drivers/platforms that support MAILBOX) added 1 image for MAILBOX in order for it to really work as intended.  One image is being shown to the user (call it A).  One can be queued to be shown (B).  One can be rendered to (C).  If the app is running fast, it will call vkQueuePresent (QP) with C before B is ever shown to the user.  In that case, C becomes queued to be shown and B becomes the next image returned by vkAcquireNextImage (ANI).  If the app isn\u0027t running that fast (no reason for them to use MAILBOX), B will be shown to the user before QP is called with C, and A will be the next image returned by ANI.\n\nWithout 3 images, MAILBOX wouldn\u0027t work for a blocking implementation.  In my example above, if A is being shown to the user, once QP is called for B, ANI would block until B is shown and A becomes available.  The app would never be able to run faster than the display\u0027s refresh rate (which MAILBOX is designed to allow).\n\nAlternatively (for non-throttling implementations), A would be returned immediately by ANI.  A could be rendered to and QP called with it, and B would be returned by ANI, etc.  For example, a really fast app, with FIFO, could queue 1000 versions of B and 999 versions of A, all while the originally-rendered version of A is still being shown to the user.  For MAILBOX, the same app would queue that many versions of each, but the queue would be drained back down to 1 each time QP is called and the rendering is completed for the new image.  The last I knew, MoltenVk (Apple) worked that way, but I think they may have \"fixed that.\"\n\nBTW, we would consider that to be really bad for Android (waste of power), and the power governors might lower CPU power for that app until it\u0027s frame rate becomes more reasonable.\n\nBTW, shortly after Vulkan 1.0 came out, NVIDIA on Windows started doing a minImageCount of 1.  They can use an MS-Windows capability that allows them to quickly blit the image to a window-system-private buffer, allowing ANI to immediately return the same image again (and potentially not provide any throttling BTW).\n\nI\u0027m sorry that it\u0027s such a complicated situation!",
      "parentUuid": "f12fbb0b_7f57cce7",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0829fe17_1341e681",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:31:23Z",
      "side": 1,
      "message": "\u003e what is your goal for adding one image?\n\nThis +1 was here from the very first implementation of this file. Perhaps Jamie can clarify his reasoning, but my guess is that on whichever platform this was tested, minImageCount was 2 and we wanted triple buffering (for the same reason you mentioned). I do agree that it could have been done better (for example default to 3, then clamp to min/max).\n\n\u003e Android added 1 image for MAILBOX in order for it to really work as intended.\n\nWouldn\u0027t it have made more sense for android to take min(3, requested) instead of requested+1 images? As in, if the developer asks for 3 images (even if min is 2), then android wouldn\u0027t add a fourth image?\n\n\u003e I\u0027m sorry that it\u0027s such a complicated situation!\n\nNo this is all very interesting. I would love it if this was actually documented with even more details.",
      "parentUuid": "38a18811_5da14e52",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6adcc13_e6b1ed7c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T21:24:44Z",
      "side": 1,
      "message": "Could be a good follow-up. I couldn\u0027t find where I based this decision on. IIRC it was conversation with Jesse or Antoine. But if this can be improved on please feel free to make changes here.",
      "parentUuid": "0829fe17_1341e681",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "519f75e9_55b41120",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T21:32:59Z",
      "side": 1,
      "message": "In progress:\n\nhttps://chromium-review.googlesource.com/c/angle/angle/+/1454290",
      "parentUuid": "a6adcc13_e6b1ed7c",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da7efc6b_43e0869c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 398,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "\u003e \u003e Android added 1 image for MAILBOX in order for it to really work as intended.\n\n\u003e Wouldn\u0027t it have made more sense for android to take min(3, requested) instead of requested+1 images? As in, if the developer asks for 3 images (even if min is 2), then android wouldn\u0027t add a fourth image?\n\nYes, I think you are correct.\n\n\u003e In progress:\n\nI like it!",
      "parentUuid": "519f75e9_55b41120",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce1f6f89_08520f92",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 542,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "I see mSwapHistory being resized here, but a definite value being set on line 491.  Are the uses consistent?",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e2ea201_ad759101",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 542,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "`mMinImageCount` is the parameter to `VkSwapchainCreateInfoKHR`. `imageCount` here is the actual number of images allocated.\n\nThere is one possible issue with the history, if calling `vkCreateSwapchainKHR` on the same device with the same `minImageCount` multiple times results different number of images allocated, in the sense that the parts of the history could get lost.\n\nMaybe you can verify this, but I believe no implementation would do that. In other words, the first time this function is called (where oldSwapchain is nullptr), this vector is resized, and in the next calls, `imageCount` should be the same as last time so nothing happens.\n\nI\u0027m gonna add an ASSERT for it here with a comment.",
      "parentUuid": "ce1f6f89_08520f92",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b0621b8_80da0479",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 542,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "I\u0027m still trying to wrap my head around this (sorry, but I got pulled into too many topics yesterday:-).\n\nWhat is the purpose of line 491 (mSwapHistory[swapHistoryIndex].swapchain \u003d oldSwapchain;)?  For all implementations that I know of, I would suspect that \u0027imageCount\u0027 will be the same each time UNLESS it starts running out of memory.  The scenario is if somebody takes the mouse and starts interactively resizing the window, and the app tries to keep up.  Many new swapchains can be created in a short time.  However, from our Khronos discussions, I think the drivers are responding by being more synchronous (e.g. throttling the app and flushing things so that old swapchains get freed quickly).  Not sure about this.\n\nI wonder if the Khronos Vulkan SI TSG should discuss this in the context of ANGLE sometime?",
      "parentUuid": "7e2ea201_ad759101",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eeacb720_f0d3a68a",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 542,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:31:23Z",
      "side": 1,
      "message": "If you could guarantee that the same number is returned, that would keep things simple here, but if the image count could vary, it\u0027s really not difficult to account for it. I think it would be helpful to have it stated one way or the other, regardless of which way is chosen.\n\n---\n\nRegarding line 491, based on your earlier comment, I keep the old swapchain in the history of swap operations, so that when I wait for the corresponding fence (as part of the CPU throttling, see a previous comment in SurfaceVk.h), I know all operations on the old swapchain are finished and I can destroy the swapchain.",
      "parentUuid": "1b0621b8_80da0479",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd9a1edd_0e1a6ef5",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 542,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eeacb720_f0d3a68a",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3399ac1a_a19e1fd3",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "Is this slow?",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e27db56f_e5fac129",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "Do you know what could be faster? `vkGetPhysicalDeviceSurfaceCapabilitiesKHR()` gives the current window size, but I imagine it would use the same functionality as `getCurrentWindowSize()` to retrieve that information.\n\nUnless you are thinking of listening to the window events and looking for a resize? Not sure how easy that would be to implement here.",
      "parentUuid": "3399ac1a_a19e1fd3",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5e60b6e_6e7b5a10",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "Sorry for not being more clear!\n\nI\u0027m thinking that you can only get the current window size if swapchainOutOfDate is true.  Otherwise, my concern is that each QP could result in a synchronous call to find out the window size (which is what swapchainOutOfDate is supposed to be telling you).",
      "parentUuid": "e27db56f_e5fac129",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f9d0a7b_d4d27b99",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:19:31Z",
      "side": 1,
      "message": "Strange ... \"grep getCurrentWindowSize -R .\" isn\u0027t finding anything.  Sorry about that.",
      "parentUuid": "b5e60b6e_6e7b5a10",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea1be64c_1ae75482",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:31:23Z",
      "side": 1,
      "message": "`getCurrentWindowSize` is new in this change, you can find it in `xcb/WindowSurfaceVkXcb.cpp` or the android or win32 equivalents.\n\nOk I see. You are right, I should only be getting the window size below, on the else part of `if (width !\u003d 0xFFFFFFFFu)`. I think I had got inspired by another backend that was doing this.\n\nDone.",
      "parentUuid": "9f9d0a7b_d4d27b99",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "143e380a_1006c3d5",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:55:24Z",
      "side": 1,
      "message": "After trying this, I see an issue on my machine (Linux/Nvidia). In the new EGLSurfaceTest included in this CL, there\u0027s a line that resizes the window: `mOSWindow-\u003eresize(64, 1);` which calls `XResizeWindow`. After the eglSwapBuffers call however, I don\u0027t get suboptimal or out-of-date from the QP operation.\n\nI changed the test to do the swap multiple times. I see this:\n\nRelying on swapchain out of date:\n- XResizeWindow is called\n- vkQueuePresentKHR -\u003e VK_RESULT\n- vkQueuePresentKHR -\u003e VK_RESULT\n- vkQueuePresentKHR -\u003e VK_RESULT\n- vkQueuePresentKHR -\u003e VK_RESULT\n- vkQueuePresentKHR -\u003e VK_RESULT\n\nChecking window size as done here:\n\n- XResizeWindow is called\n- vkQueuePresentKHR -\u003e VK_RESULT\n- Window size is changed, so the swapchain is recreated\n- vkQueuePresentKHR -\u003e VK_OUT_OF_DATE_KHR\n- vkQueuePresentKHR -\u003e VK_OUT_OF_DATE_KHR\n- vkQueuePresentKHR -\u003e VK_OUT_OF_DATE_KHR\n- vkQueuePresentKHR -\u003e VK_OUT_OF_DATE_KHR\n\nBoth are wrong in fact. In the first case, I don\u0027t get out-of-date as I should. In the second case, I keep getting out-of-date even though the swapchain should now be the correct size. I verified that the Window X11 handle used to resize and create surface are the same.\n\nIt\u0027s bizzare. When dEQP resizes the window, I do get out-of-date errors. That means we have a bug somewhere in our X11Window implementation that I cannot pinpoint (I did find a bug in that area, though it doesn\u0027t fix the issue).\n\nI\u0027m going to skip the end2end test in this configuration and try it on the bots, see if it\u0027s really only X11 that has an issue (i.e. the bug is there) or more platforms fail (i.e. the bug is somewhere else)",
      "parentUuid": "ea1be64c_1ae75482",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acc44759_1e211c0d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T21:24:44Z",
      "side": 1,
      "message": "It does sound like a potential bug in ANGLE\u0027s X11 code. SGTM.",
      "parentUuid": "143e380a_1006c3d5",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63e30d9_91b9f955",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "FYI ... NVIDIA\u0027s Linux rep to the SI TSG raised an issue with OUT_OF_DATE at the San Diego F2F.  The net result is that NVIDIA will probably stop reporting OUT_OF_DATE for window size changes.",
      "parentUuid": "143e380a_1006c3d5",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e58ac29_7fcdbd6e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-06T15:50:14Z",
      "side": 1,
      "message": "As the bots show, Windows/Intel and Windows/AMD also seem to not return OUT_OF_DATE when the end2end test resizes the window.\n\nI understand vendors are not a fan of OUT_OF_DATE, but shouldn\u0027t they have returned SUBOPTIMAL? Or blitting to a resized window is not really considered \"suboptimal\" for them and they happily accept it?\n\nIf OUT_OF_DATE/SUBOPTIMAL is unreliable, what other option would I have than to check for window size on every swap?\n\nFYI, on glx, cgl and d3d, I see that they query the window size to know if they have to resize the swapchain.",
      "parentUuid": "e63e30d9_91b9f955",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3a46658_63e9e0e3",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 735,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-07T16:21:25Z",
      "side": 1,
      "message": "Good questions!  I didn\u0027t realize how far away from the original spec the different implementations had gone.  NVIDIA brought it up in San Diego (since they were still trying to do it, but getting push-back from other ISVs).  The group consensus was to allow implementations to not provide OUT_OF_DATE, and to create an extension so that apps can query whether they will get OUT_OF_DATE.\n\nI don\u0027t have a strong view of what ANGLE should do.  Given the other problems you\u0027ve seen, perhaps leaving your polling of width and height is best.  It\u0027s just once per frame.",
      "parentUuid": "0e58ac29_7fcdbd6e",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6204a285_6e35e6ff",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "What is currentExtents.{width|height} being set to otherwise?",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7cd06c0_0c3369a6",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "What comes from `getCurrentWindowSize()`.",
      "parentUuid": "6204a285_6e35e6ff",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66207bd7_dad3a07e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "Sorry, I haven\u0027t found getCurrentWindowSize(), and so I don\u0027t know what it\u0027s doing, or what value it\u0027s getting for different Vulkan \"platforms\".\n\nI think I see what\u0027s going on here.  If this is not a Wayland-like platform, you\u0027re setting currentExtents to what comes back from Vulkan.  Otherwise, you\u0027re getting it from getCurrentWindowSize() (which again, I don\u0027t know what it\u0027s doing).",
      "parentUuid": "f7cd06c0_0c3369a6",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b119694c_225c2d5a",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:31:23Z",
      "side": 1,
      "message": "Please do take a look at `xcb/WindowSurfaceVkXcb.cpp` and the android and win32 equivalents right here in this CL. For brevity, on xcb we do this:\n\nxcb_get_geometry(...);\nxcb_get_geometry_reply_t *reply  \u003d xcb_get_geometry_reply(...);\n\non win32:\n\nGetClientRect(...);\n\non android:\n\nANativeWindow_getWidth/Height(...);\n\n---\n\nWe don\u0027t support wayland at the moment, but I\u0027m curious as to why you mentioned it. I\u0027m guessing on wayland `currentExtent.width/height` are not valid for some reason?",
      "parentUuid": "66207bd7_dad3a07e",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ceb98cc_1115d012",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "Yes, I found it in the CL later (I was grepping my source tree for a function that\u0027s new in this CL:-).\n\nI mention Wayland because it was the first platform that had a width/height of 0xFFFFFFFFu (a.k.a. -1).  With Wayland, a window has no width/height to start out with.  When the swapchain is created, that gives the window a width/height.  Mir was another platform that did the same thing, but Mir was killed.  There are a few new platforms that might be following the Wayland example here, but ANGLE probably doesn\u0027t need to support them for a while.",
      "parentUuid": "b119694c_225c2d5a",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e920414a_c0265f17",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-06T15:50:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1ceb98cc_1115d012",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39ea7164_aa170643",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-04T23:26:16Z",
      "side": 1,
      "message": "When you say \"the CPU is throttled\" are you referring to something in ANGLE, or are you referring to Vulkan?\n\nFYI ... Vulkan doesn\u0027t provide any throttling guarantees, though I believe some of the platforms/drivers (including Android) do throttle.  I saw a driver a while back that allowed the application (or ANGLE) to queue unlimited numbers of frames.  For example, after a few seconds, it has queued many-1000 frames (which then took a long time to render and present in FIFO mode).",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40bb8847_7dd88021",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T16:42:40Z",
      "side": 1,
      "message": "It\u0027s something I implemented a while back. On Linux/Nvidia at least, that\u0027s exactly the behavior I saw. The throttling code simply waits for the Nth previous frame to \"finish\" (hence the reason a history of submission serials is kept).",
      "parentUuid": "39ea7164_aa170643",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9f8a6ed_b32ba9c9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T18:04:46Z",
      "side": 1,
      "message": "Connecting some topics ... Do you know which present mode is being used on NVIDIA/Linux?\n\nWhen you say \"finish\", is ANGLE ever checking when rendering for one frame is complete, and using that to throttle things?",
      "parentUuid": "40bb8847_7dd88021",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91c723ce_ebf3979b",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-05T20:31:23Z",
      "side": 1,
      "message": "Immediate mode.\n\nYes, angle waits on the fence corresponding to the submission at the Nth previous frame. N depends on the number of images.\n\nThat is, something like this with 3 images:\n\n- Acquire image 1, submit work with fence 1, present image 1\n- Acquire image 2, submit work with fence 2, present image 2\n- Acquire image 3, submit work with fence 3, present image 3\n\n- wait on fence 1\n- Acquire image 1, submit work with fence 4, present image 1\n\n- wait on fence 2\n- Acquire image 2, submit work with fence 5, present image 2\n\n- wait on fence 3\n- Acquire image 3, submit work with fence 6, present image 3\n\n- wait on fence 4\n- Acquire image 1, submit work with fence 7, present image 1\n\n- wait on fence 5\n- Acquire image 2, submit work with fence 8, present image 2\n\n- wait on fence 6\n- Acquire image 3, submit work with fence 9, present image 3\n\n`vkAcquireNextImageKHR` on Linux/Nvidia doesn\u0027t actually wait for the image to become available, hence the necessary wait on the fence.",
      "parentUuid": "f9f8a6ed_b32ba9c9",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9ea0fd_f9f4b21f",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-02-05T22:16:41Z",
      "side": 1,
      "message": "This is a good approach (wait for the rendering), and thanks for the explanation!",
      "parentUuid": "91c723ce_ebf3979b",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c83b8313_9305908a",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-06T15:50:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eb9ea0fd_f9f4b21f",
      "revId": "1544490f18abc6967b990c0c6c45a0d56e32f7f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}