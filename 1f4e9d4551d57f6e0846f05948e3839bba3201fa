{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c357437c_96108589",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-28T18:33:18Z",
      "side": 1,
      "message": "nit: this is doing more than adding the tracking, it\u0027s making a behaviour change as well. would express that in the title.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb60de94_78fe08fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-30T17:11:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c357437c_96108589",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 44
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a51f1dde_7b4973be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-28T18:33:18Z",
      "side": 1,
      "message": "Should this improve performance on a microbenchmark? Maybe you could update BufferSubData.cpp to make a variant that would test this improvement.",
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "338ab03d_9534af38",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-28T18:57:55Z",
      "side": 1,
      "message": "There is a bug in this change, and it\u0027s that when the GPU writes data to the buffer the contents are not marked valid. Regression test could be as such:\n\n- Create buffer and give it nullptr so it would be marked invalid\n- Bind it as storage buffer (test 1) or image buffer (test 2)\n- Have a compute shader write to it\n- Update the buffer such that the acquireAndUpdate path is taken and there is a before and after region that would need copying (this would not be done because of this bug)\n- Readback the buffer and observe that the before and after update regions are garbage.",
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d5e792c_1baa2e96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-28T20:28:28Z",
      "side": 1,
      "message": "I believe in this case, BufferVk::onDataChanged() will get called which calls markConversionBuffersDirty(). That is why I set mHasValidData to true in markConversionBuffersDirty(). Essentially this is implemented on top of the vertex data conversion code path. If this is broken, it means our data conversion code path has a bug.",
      "parentUuid": "338ab03d_9534af38",
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a20253bb_425cc9fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-01T19:44:06Z",
      "side": 1,
      "message": "Ok I see that `MarkShaderStorageUsage` calls `onDataChanged` for storage buffers. This is missing for image buffers though.\n\nCould you please add the requested tests? That would prove the correctness of this change for SSBOs, and if image buffers are broken, it\u0027s ok to file a bug and do a follow up IMO, as it\u0027s a front-end bug.",
      "parentUuid": "9d5e792c_1baa2e96",
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d70162b3_0a478f0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-01T23:44:44Z",
      "side": 1,
      "message": "I don\u0027t understand why this CL should be blocked by the test. This is an optimization, so whatever missing functional coverage is not introduced by this CL. If you want to ensure this optimization is taken, well, other drivers not doing this optimization will fail. If you think you found a bug in existing code with image buffer, you should file bug.",
      "parentUuid": "a20253bb_425cc9fe",
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24922d2f_1f67445e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 925,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-28T18:57:55Z",
      "side": 1,
      "message": "If the buffer is in use by the GPU, that should be an indication that the content is valid (otherwise what\u0027s the point of using the buffer? Also note the bug I mentioned in another comment). While technically you can\u0027t ASSERT it, I don\u0027t think this bit here is useful in any realistic way.",
      "range": {
        "startLine": 925,
        "startChar": 14,
        "endLine": 925,
        "endChar": 33
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9ff73b8_e81f8ed0",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 925,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-28T20:28:28Z",
      "side": 1,
      "message": "That is exact this CL try to fix. mHasValidBufferData is tracking BufferVK has valid data or not, it is not tracking mBuffer has valid data or not. As I described in the CL description, if someone called glBufferData with null pointer and the same size, we will simply return, (which means we will try to reuse mBuffer storage for new in coming data). In this case mBuffer could still GPU busy (and has valid data in it), but BufferVk no longer has valid data in it. If we have to allocate a new buffer, we do not have to preserve the data in mBuffer. So this essenticially goes back to the point that mHasValidBufferData belongs to BufferVk, not BufferHelper. It is different from ImageHelper\u0027s mHasDefinedContent.",
      "parentUuid": "24922d2f_1f67445e",
      "range": {
        "startLine": 925,
        "startChar": 14,
        "endLine": 925,
        "endChar": 33
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bd606b9_8861a620",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 925,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-01T19:44:06Z",
      "side": 1,
      "message": "Oh I see. I\u0027d definitely add this information on the variable declaration (in the header) to make it clear \"what\" has valid data.\n\nIt doesn\u0027t help that the comment here is referring to everything as \"buffer\"s. You could make this comment clearer too:\n\n        // If bufferVk does not have any valid data, which means there is no data needs to be copied\n        // from old bufferHelper to new bufferHelper when we acquire a new bufferHelper, we also favor\n        // acquireAndUpdate over stagedUpdate. This could happen when app calls glBufferData with\n        // same size and we will try to reuse the existing buffer storage.",
      "parentUuid": "e9ff73b8_e81f8ed0",
      "range": {
        "startLine": 925,
        "startChar": 14,
        "endLine": 925,
        "endChar": 33
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "428e43a2_f31863e6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 925,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-01T23:35:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3bd606b9_8861a620",
      "range": {
        "startLine": 925,
        "startChar": 14,
        "endLine": 925,
        "endChar": 33
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f72f247b_319f061e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 964,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-29T02:14:43Z",
      "side": 1,
      "message": "This name doesn\u0027t seem appropriate anymore, since it\u0027s doing more than marking the  vertex conversion buffers dirty.\n\nThis isn\u0027t an easy one to name, especially since onDataChanged() is already taken.   Maybe something like dataUpdated() or bufferUpdated().",
      "range": {
        "startLine": 964,
        "startChar": 15,
        "endLine": 964,
        "endChar": 41
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e64312a_a654baf2",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 964,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-30T17:11:37Z",
      "side": 1,
      "message": "Renamed to dataUpdated()",
      "parentUuid": "f72f247b_319f061e",
      "range": {
        "startLine": 964,
        "startChar": 15,
        "endLine": 964,
        "endChar": 41
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d834135_967427a3",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-28T18:33:18Z",
      "side": 1,
      "message": "nit: you can call this mHasValidData since it\u0027s not possible for the Buffer to hold non-Buffer data\n\nAlso, what about making this a member of BufferHelper instead?",
      "range": {
        "startLine": 227,
        "startChar": 9,
        "endLine": 227,
        "endChar": 28
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75f58c6_bdaa1faa",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-28T18:57:55Z",
      "side": 1,
      "message": "+1 to moving to BufferHelper. Could later be used to optimize barriers probably for other users.",
      "parentUuid": "7d834135_967427a3",
      "range": {
        "startLine": 227,
        "startChar": 9,
        "endLine": 227,
        "endChar": 28
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbbd8ff4_fd5e5f2e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-28T20:28:28Z",
      "side": 1,
      "message": "There are a few problems. 1) BufferHelper maybe shared due to suballocation. And this will be even a bigger problem if we want to suballocate from a global pool with same BufferHelper object (if we want to have better descriptor set cache hit etc). And 2) This really is tracking BufferVK has valid data or not, not BufferHelper. We are reusing mBuffer storage when glBufferData is called with the same size. mBuffer still have valid data and mayboe not even queue submitted, but BufferVk no longer has valid data. (Also see the other comment bellow).",
      "parentUuid": "d75f58c6_bdaa1faa",
      "range": {
        "startLine": 227,
        "startChar": 9,
        "endLine": 227,
        "endChar": 28
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d50add0_0437ab2e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-30T17:11:37Z",
      "side": 1,
      "message": "Renamed to mHasValidData.",
      "parentUuid": "bbbd8ff4_fd5e5f2e",
      "range": {
        "startLine": 227,
        "startChar": 9,
        "endLine": 227,
        "endChar": 28
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a56d428d_2ad74df8",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-30T17:11:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbbd8ff4_fd5e5f2e",
      "range": {
        "startLine": 227,
        "startChar": 9,
        "endLine": 227,
        "endChar": 28
      },
      "revId": "1f4e9d4551d57f6e0846f05948e3839bba3201fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}