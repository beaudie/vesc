{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc796dd4_fad84390",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-02T22:13:50Z",
      "side": 1,
      "message": "Actually didn\u0027t notice https://bugs.chromium.org/p/angleproject/issues/detail?id\u003d7604 until after I started working on this ðŸ˜Š\n\nI hope I\u0027m not colliding with anybody else\u0027s work.",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "837a2be4_67c686d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-03T22:09:46Z",
      "side": 1,
      "message": "As mentioned on the bug, I had this done already: https://chromium-review.googlesource.com/c/angle/angle/+/3855698\n\nI\u0027ll brush it up and fold your ARM-variant changes into it. You could abandon this (sorry about the waste of time)",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "324bce37_834b63b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-03T23:54:20Z",
      "side": 1,
      "message": "Awesome! I\u0027m happy to see a proper implementation going in. Glad this change could be of use.\n\nSome Qualcomm devices are starting to advertise this extension, so this gives us more coverage on Vulkan.",
      "parentUuid": "837a2be4_67c686d1",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "421d211c_39e8916a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T02:25:48Z",
      "side": 1,
      "message": "Qualcomm? Am I reading that right?\n\nAs far as I understood, they are _the_ mobile vendor for which noncoherent was invented.",
      "parentUuid": "324bce37_834b63b7",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9194f755_d757f83e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-04T15:23:54Z",
      "side": 1,
      "message": "It\u0027s there:\n\nhttps://vulkan.gpuinfo.org/listdevicescoverage.php?extension\u003dVK_EXT_rasterization_order_attachment_access\u0026platform\u003dall\n\nhttps://vulkan.gpuinfo.org/listdevicescoverage.php?extension\u003dVK_ARM_rasterization_order_attachment_access\u0026platform\u003dall\n\nThe QCOM_shader_framebuffer_fetch_noncoherent spec says\n\n    This extension adds support for reading those same inputs with \n    relaxed coherency requirements.  This mode can avoid expensive\n    per-primitive flushes of the pixel pipeline and may offer performance\n    improvements in some implementations.\n    \nSo maybe QCOM made the noncoherent extension for a perf optimization when you don\u0027t need coherency? I\u0027ve personally experimented with it and didn\u0027t see any perf gains in the particular use case I was looking at.",
      "parentUuid": "421d211c_39e8916a",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "685e0267_65d9af32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T15:33:13Z",
      "side": 1,
      "message": "Perhaps they added support in their new hardware. The way I understood it, the QC hardware wasn\u0027t coherent, so it would have had to go through hoops to make things look coherent (and hence the noncoherent version was born).\n\nBased on your experiment, maybe it was not a problem in the common use cases, but some corner case ones (like self-overlapping geometry).",
      "parentUuid": "9194f755_d757f83e",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bc22886_4cf1086a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-04T16:23:09Z",
      "side": 1,
      "message": "Ok, that all makes sense. The spec specifically mentions \"per-primitive flushes\", which does sound like noncoherent hardware and they are flushing between every triangle! Hopefully that\u0027s changed now if they\u0027re supporting this extension.\n\nThe use case I\u0027m thinking of was low on triangle count, come to think of it, so that\u0027s probably why I didn\u0027t see a difference.\n\nSide note: If QC flushes between every triangle in order to make EXT_shader_framebuffer_fetch look coherent on GL, then maybe ANGLE could provide a similar functionality for pixel local storage. Could we add an interaction with ANGLE_multi_draw that inserts glPixelLocalStorageBarrierANGLE() between every draw? Could that be decently optimized in Vulkan?",
      "parentUuid": "685e0267_65d9af32",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaf9ec96_cb383430",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T16:31:20Z",
      "side": 1,
      "message": "\u003e If QC flushes between every triangle in order to make EXT_shader_framebuffer_fetch look coherent on GL, then maybe ANGLE could provide a similar functionality for pixel local storage.\n\nBarrier between every draw doesn\u0027t mean barrier between every triangle (so we can\u0027t even do that). So technically we can\u0027t make self-overlapping geometry coherent (unless you really split the attribute buffer and make a separate draw call per triangle ... which is horrible)\n\nIMO, it\u0027s best to keep the coherent/noncoherent distinction and let the app use the best one, than to pretend coherency with a caveat of \"it sucks, don\u0027t use it\".",
      "parentUuid": "4bc22886_4cf1086a",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b63fa61_5ec2d62b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-04T16:42:47Z",
      "side": 1,
      "message": "Totally agreed. The app should be able to expect reasonably consistently, decent performance if an extension is advertised.\n\nThat\u0027s kind of where I started going with the ANGLE_multi_draw interaction -- the app can split up their draws however they want (even per triangle if they think that\u0027s what\u0027s best) and then ask for barriers between with ANGLE_multi_draw. Hopefully that\u0027s a little faster than just calling `drawArrays(); barrier();` in loop?",
      "parentUuid": "eaf9ec96_cb383430",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4f4c85_71189d12",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1248,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-02T22:13:50Z",
      "side": 1,
      "message": "Totally shooting in the dark here. Are there other subpass or pipeline descriptions that need to be updated?",
      "revId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3a07baf67515d21b81d3b480fd9f0309316f8ccb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}