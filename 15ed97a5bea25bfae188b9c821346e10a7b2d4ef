{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47fd2eab_c015d061",
        "filename": "src/common/FastVector.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-07T20:15:23Z",
      "side": 1,
      "message": "Is this really necessary? It seems like the only added benefit is the `value_type` etc, though I didn\u0027t notice them used anywhere.",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74993eb9_a2b874be",
        "filename": "src/common/FastVector.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-08-07T20:40:28Z",
      "side": 1,
      "message": "It workarounds clang compiling errors. ANGLE uses `auto it \u003d attributes.begin;` like code in many places, it causes warnings like:`auto* should be used`. Without it, we have to change all `auto` to `auto*` or `AttributeMap::const_iterator` in many places.",
      "parentUuid": "47fd2eab_c015d061",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a14dfea0_18eedcbf",
        "filename": "src/common/FastVector.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-08T01:22:33Z",
      "side": 1,
      "message": "We generally tend to use `auto` only for complicated templated types. In your example, `AttributeMap::const_iterator` is not that bad to have. If you don\u0027t mind, I think it\u0027d be much better if we didn\u0027t have this unnecessary wrapper, and fixed your compile warning by avoiding `auto` instead.",
      "parentUuid": "74993eb9_a2b874be",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e19b728d_de91870c",
        "filename": "src/common/FastVector.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-08-08T02:35:24Z",
      "side": 1,
      "message": "There are many places like below\n`\nfor (auto it \u003d attribs.begin(); it !\u003d attribs.end(); ++it) {\n ...\n}\n`\nUsing auto is very convenient here. in the other hand, using AttributeMap::const_iterator is not only inconvenient (programer has to find out the type (AttributeMap) of attribs, and know it has the const_iterator type defined in the class), but also it doesn\u0027t have benefit for not using `auto` for those cases. BTW, the clang compile error message is not very helpful as well. It just recommends you to use `auto *`\n```\n    for (auto attribIter \u003d attribs.begin(); attribIter !\u003d attribs.end(); attribIter++)\n         ^~~~\n         auto*\n1 error generated.\n```. So I feel it is better to have this helper class.\n\nBTW, c++ provides a iterator wrap as well, but it is not defined in the spec, so it is not safe to use it.",
      "parentUuid": "a14dfea0_18eedcbf",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c96de077_4f3eb999",
        "filename": "src/common/FastVector.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-08T02:49:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e19b728d_de91870c",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7722984_e9c202df",
        "filename": "src/libANGLE/AttributeMap.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-07T20:15:23Z",
      "side": 1,
      "message": "Might as well initialize it with something a bit bigger? Like 4 or 8?",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2a18b7b_e378a903",
        "filename": "src/libANGLE/AttributeMap.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-08-07T20:40:28Z",
      "side": 1,
      "message": "I checked chrome code, chrome could use up to 14 attributes for the attribute map. But they are for creating context, surface, image or choosing config. Chrome only triggers those cases several times per GPU process lifespan. so we don\u0027t need to optimize for them. In the other hand, chrome creates several fence per frame. I checked the code, it only needs 1 or 2 attribute. So I picked 2 at here, If we only consider chrome, it is the best choice.",
      "parentUuid": "b7722984_e9c202df",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee0f58da_ff10f69b",
        "filename": "src/libANGLE/AttributeMap.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-08T01:22:33Z",
      "side": 1,
      "message": "Ok, for Chrome 2 makes sense. But ANGLE has other uses too. That said, I\u0027m not terribly familiar with EGL, so I don\u0027t know offhand what would be a typical number.\n\n2 is fine for now.",
      "parentUuid": "b2a18b7b_e378a903",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f59705a4_67c26b3a",
        "filename": "src/libANGLE/AttributeMap.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-08-08T02:35:24Z",
      "side": 1,
      "message": "I guess we can adjust it later, if we find other cases show up in the profile.",
      "parentUuid": "ee0f58da_ff10f69b",
      "range": {
        "startLine": 30,
        "startChar": 62,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "15ed97a5bea25bfae188b9c821346e10a7b2d4ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}