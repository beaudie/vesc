{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fbc54604_d24ba442",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T07:00:45Z",
      "side": 1,
      "message": "Overall looks good from our needs perspecitve. Small nits added.",
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56950b71_05372961",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3299,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T07:00:45Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 3299,
        "startChar": 43,
        "endLine": 3299,
        "endChar": 72
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f0808d_d9019128",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3301,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T07:00:45Z",
      "side": 1,
      "message": "nit: typo",
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09f2c8c5_d86ad3e3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3305,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-05T13:47:47Z",
      "side": 1,
      "message": "nit: Per our style, don\u0027t `if (a\u0026b)`, but explicitly cast to bool: `if ((a\u0026b) !\u003d 0)`",
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e88afb_24a5d64a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T07:00:45Z",
      "side": 1,
      "message": "nit: I\u0027m not sure we need \u003e\u003d, and it\u0027s confusing (at least for me, I spent some time checking how \u003e part would be possible), \u003d\u003d would be fully ok.",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8d86d40_77d5a3b3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-05T13:47:47Z",
      "side": 1,
      "message": "So this check says we prefer host visible if _all_ of device local memory is host visible. But what if some device has a small device local only memory? We could still prefer host visible as it covers the _majority_ of device local memory.\n\nShould we instead turn this to something like:\n\n```\nminHostvisiableDeviceLocalHeapSize \u003e\u003d maxDeviceLocalHeapSize * 0.8\n```",
      "parentUuid": "22e88afb_24a5d64a",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aa33005_99592269",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-10-05T16:32:27Z",
      "side": 1,
      "message": "In the case of virtual GPU, do we know what the type of underline GPU is? I still think the less confusing/logical check here is it is a discreteGPU or not. All we need here is get the underline GPU information of vGPU.",
      "parentUuid": "b8d86d40_77d5a3b3",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d6f0b6_c1035463",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T16:43:40Z",
      "side": 1,
      "message": "@syoussefi@chromium.org I first thought so, but then I realized that this would be different heap, per spec suggestion, so in this csae, so the biggest DEVICE_LOCAL heap will be the heap with host visibility, It\u0027s actually pretty smart move from Hailin to keep it defined as it is.\n\n@cclao@google.com We don\u0027t know it at guest, and there is no API to pass that info. Also, I think, proposed solution is better, as vendors are trying to play with resizableMemBar, that should in theory expose whole device memory to host, and we may end up without DEVICE_LOCAL only heap even on discrete.",
      "parentUuid": "5aa33005_99592269",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "178104cc_d4744fda",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-10-05T17:31:26Z",
      "side": 1,
      "message": "on dGPU you don\u0027t want to CPU access to VRAM even if the memory is host visible. That is why it checks dGPU. How about keep it explicit:\n\n// In case of virtual GPU, we try to figure out if it is a dGPU or not based on memory size of different heap type\npreferDeviceLocalMemoryHostVisible \u003d !(isDiscreteGPU || \n(isVirtualGPU \u0026\u0026 memoryProperties.getHeapSizeForMemoryType(kDeviceLocalHostCoherentFlags) \u003c memoryProperties.getHeapSizeForMemoryType(kDeviceLocalFlags))",
      "parentUuid": "33d6f0b6_c1035463",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0597ec5f_edf29f74",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T17:59:13Z",
      "side": 1,
      "message": "\u003e on dGPU you don\u0027t want to CPU access to VRAM even if the memory is host visible. That is why it checks dGPU.\n\nWell, for one-time write, on GPU-bound workloads, it may be better to initialize resource on CPU, as you are saving on GPU exection, along with objects creation and memory pressure.\nAdditionally, even for non-GPU-bound workloads, write latency can be hidden, for example by delegating memcpy to separate thread, and ensuring completion just before submission. It shouldn\u0027t be more work than issuing extra upload pass for the buffer.\nSpecifically about VB/IB case, here are NVidia suggestions, specifically telling that this cpu visible VRAM should be used for VB/IB  https://developer.nvidia.com/blog/optimizing-dx12-resource-uploads-to-the-gpu-using-cpu-visible-vram/#:~:text\u003dDX12%20UPLOAD%20heaps%20are%20allocated,by%20using%20an%20IASetVertexBuffers%20command.",
      "parentUuid": "178104cc_d4744fda",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0369f467_6f9162e3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-10-05T18:23:39Z",
      "side": 1,
      "message": "I thought your workload are mostly CPU bound? I will be surprised that android games run on nvidia GPU is GPU bound.\n\nBut anyway, I don\u0027t think the end result of all ideas is anything different here. We all end up will set preferDeviceLocalMemoryHostVisible to false on NVidia GPU. That is why I am saying we can just be explicit here without causing any potential regression on other GPUs (I don\u0027t know the exact memory size samsung or IMG GPU expose).",
      "parentUuid": "0597ec5f_edf29f74",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c5d31f_248e37fe",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3318,
      "author": {
        "id": 1524137
      },
      "writtenOn": "2022-10-05T18:36:01Z",
      "side": 1,
      "message": "Yeah, I agree that end of the day we are aiming to the same here. \n\nMy generic note is that probably we SHOULD leverage DEVICE_LOCAL + HOST_VISIBLE for specifically VB/IBs and other static one-shot buffers. This is not the case for this CL, but this should be addressed for sake of the better performance. Of course, there needs to be a fallback mechanism, that we are lacking now...\n\nAnd, for whatever reason, we are still mostly synchronization bound, so reducing GPU workload is directly helping with getting better FPS/smoothness.",
      "parentUuid": "0369f467_6f9162e3",
      "range": {
        "startLine": 3318,
        "startChar": 46,
        "endLine": 3318,
        "endChar": 48
      },
      "revId": "da64cacdaac059437344f8c6ba1104cc0c1d6e92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}