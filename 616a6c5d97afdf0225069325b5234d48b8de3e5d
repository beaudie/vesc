{
  "comments": [
    {
      "key": {
        "uuid": "77227cba_d6291601",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4404,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T13:03:57Z",
      "side": 1,
      "message": "Can you split this unrelated fix into a tiny secondary CL? We can land it right away.",
      "range": {
        "startLine": 4404,
        "startChar": 27,
        "endLine": 4404,
        "endChar": 51
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c408f0db_f8b3eec4",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4404,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T16:20:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "77227cba_d6291601",
      "range": {
        "startLine": 4404,
        "startChar": 27,
        "endLine": 4404,
        "endChar": 51
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3878f6a7_83046505",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T13:03:57Z",
      "side": 1,
      "message": "Could you make this a separate patch as it\u0027s an unrelated bug.\n\nCould you explain the hard restrictions? And how we can implement ScanForward on ARM?",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f069c520_d2578126",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-02T15:22:38Z",
      "side": 1,
      "message": "The CTZ instruction has undefined behavior when given 0. Our ScanForward implementations do assert that this value is not 0.\n\n    https://stackoverflow.com/q/19527897/912144\n\nQuestion is, what provoked `mActiveUseBits` to be 0 in this change?\n\n---\n\nI\u0027m amused by what the parentheses around (mActiveUseBits.any()) are for, is there a secret LISP society trying to take over other languages? :D",
      "parentUuid": "3878f6a7_83046505",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98b1b7d0_6fd77b46",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T15:24:36Z",
      "side": 1,
      "message": "OK, good to know. I think what we should do is have a compile-time way to determine if we\u0027re on an ARM platform. And use this to enable a zero check in ScanForward instead of the ASSERT if required. Again would be good to do as a split patch Mohan. If you don\u0027t mind.",
      "parentUuid": "f069c520_d2578126",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c40d235_7ac2e856",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-02T15:48:34Z",
      "side": 1,
      "message": "If you looked at the SO link I included, even on x86_64 this behavior is undefined.",
      "parentUuid": "98b1b7d0_6fd77b46",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fc8a77e_070c23fe",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T16:20:00Z",
      "side": 1,
      "message": "I\u0027m going to do the following -\n1. add the note about CTZ\n2. remove the parenthesis that bugs shabby so much\n3. split this into its own gerrit",
      "parentUuid": "4c40d235_7ac2e856",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34d60ff8_3d1e08f0",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T16:47:27Z",
      "side": 1,
      "message": "\u003e Question is, what provoked `mActiveUseBits` to be 0 in this change?\n\nthe uniform is in the vertex shader, ideally i would have had ShaderType::Invalid \u003d\u003d 0 and ShaderType::Vertex starts from enum value 1. That would have been a lot more code change than what i was going for in this patch",
      "parentUuid": "2fc8a77e_070c23fe",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a83d8dda_6483d31d",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T17:02:20Z",
      "side": 1,
      "message": "Sorry Shabi, I misread.\n\nIf the uniform is in the vertex shader the 0 bit should be set to 1. in mActiveUseBits. It would only be exactly zero if the uniform isn\u0027t used. Maybe we should ASSERT in this method that mActiveUseBits !\u003d 0?",
      "parentUuid": "34d60ff8_3d1e08f0",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "590cdf54_625ab1a2",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T17:22:58Z",
      "side": 1,
      "message": "hmmm, there might be an underlying bug in serialize where it is not recording uniforms correctly\nwill need to take a look",
      "parentUuid": "a83d8dda_6483d31d",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f188653_8bafa3f6",
        "filename": "src/libANGLE/Uniform.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T18:21:55Z",
      "side": 1,
      "message": "Ack\n\nit was indeed a bug in serialize",
      "parentUuid": "590cdf54_625ab1a2",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 45,
        "endChar": 55
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a33335b_0fccdce5",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-07-02T14:33:20Z",
      "side": 1,
      "message": "We have a BinaryInputStream::readString function that can do this without a copy.  Just make sure to call the corresponding BinaryOutputStream::writeString because it uses size_t for the length instead of uint32_t.",
      "range": {
        "startLine": 208,
        "startChar": 4,
        "endLine": 211,
        "endChar": 70
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8386346a_606b3a4a",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T17:22:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3a33335b_0fccdce5",
      "range": {
        "startLine": 208,
        "startChar": 4,
        "endLine": 211,
        "endChar": 70
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a44c82a_bb39d617",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T13:03:57Z",
      "side": 1,
      "message": "nit: technically vertexSourceSize",
      "range": {
        "startLine": 229,
        "startChar": 13,
        "endLine": 229,
        "endChar": 30
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e989e8e_f99f599b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T18:21:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3a44c82a_bb39d617",
      "range": {
        "startLine": 229,
        "startChar": 13,
        "endLine": 229,
        "endChar": 30
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fb4a412_59e391d0",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T13:03:57Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 234,
        "startChar": 13,
        "endLine": 234,
        "endChar": 32
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0d5f8a0_b989c532",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T18:21:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9fb4a412_59e391d0",
      "range": {
        "startLine": 234,
        "startChar": 13,
        "endLine": 234,
        "endChar": 32
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1ea4918_6fbe9705",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-02T13:03:57Z",
      "side": 1,
      "message": "nit: you can omit this. our tools shouldn\u0027t warn us for unused parameters. if we wanted to maintain that it would take hundreds of new additions like this.",
      "range": {
        "startLine": 318,
        "startChar": 4,
        "endLine": 318,
        "endChar": 35
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24b248cb_3d196172",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T18:21:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b1ea4918_6fbe9705",
      "range": {
        "startLine": 318,
        "startChar": 4,
        "endLine": 318,
        "endChar": 35
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da15535e_695fd7c8",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 320,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-07-02T14:33:20Z",
      "side": 1,
      "message": "I think there is also room for saving the shader modules in the ShaderInfo objects too.  I realize that we initialize them lazily so they may not be compiled when save is called but we can also make sure to compile them at that time so the binary always contains the binaries.\n\nCould you add a TODO about this?",
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac886145_742cb5b9",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 320,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T18:21:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "da15535e_695fd7c8",
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bfa0a3e_64e14f4c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-07-02T14:33:20Z",
      "side": 1,
      "message": "I think these are ripe to be refactored into a gl::ShaderMap\u003cstd::string\u003e.  You can then iterate over the map when reading/writing the shader sources.",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 275,
        "endChar": 32
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93a72f89_fa2df9ef",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-02T17:22:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3bfa0a3e_64e14f4c",
      "range": {
        "startLine": 274,
        "startChar": 0,
        "endLine": 275,
        "endChar": 32
      },
      "revId": "616a6c5d97afdf0225069325b5234d48b8de3e5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}