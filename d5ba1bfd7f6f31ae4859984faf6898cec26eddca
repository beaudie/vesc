{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8d2fa678_0d561e45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-07-22T15:17:34Z",
      "side": 1,
      "message": "LGTM, attn Roman",
      "revId": "d5ba1bfd7f6f31ae4859984faf6898cec26eddca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b623c4e7_2107bb04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-07-22T15:24:35Z",
      "side": 1,
      "message": "FWIW if we\u0027re trying to decompress something that\u0027s not a correct zip blob, we\u0027re already in UB territory and that needs to be fixed at the source. This is still good to have to catch the trivial case.",
      "revId": "d5ba1bfd7f6f31ae4859984faf6898cec26eddca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7afdebee_1702e0c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-07-22T16:07:20Z",
      "side": 1,
      "message": "This is surprising. I assumed that it is safe to pass random data, function will simply return some error if format is wrong. There is also a chance that it will successfully decompress corrupted data. But in any case I assumed, that it will not try to write outside of the allocated output buffer, try to allocate large amount of memory or read outside the compressed buffer.",
      "parentUuid": "b623c4e7_2107bb04",
      "revId": "d5ba1bfd7f6f31ae4859984faf6898cec26eddca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b46075b_4bee02fe",
        "filename": "src/libANGLE/angletypes.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1113,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-07-22T15:22:31Z",
      "side": 1,
      "message": "Could you also log `compressedSize` so that we know when we hit this branch vs read 0:\nhttps://crsrc.org/c/third_party/zlib/google/compression_utils_portable.cc;drc\u003dc85f08af47c25bc5eb4a7f81c0ac0620d8d767ca;l\u003d40",
      "revId": "d5ba1bfd7f6f31ae4859984faf6898cec26eddca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a34aa8df_883d5e32",
        "filename": "src/libANGLE/angletypes.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1113,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-07-22T16:07:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b46075b_4bee02fe",
      "revId": "d5ba1bfd7f6f31ae4859984faf6898cec26eddca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}