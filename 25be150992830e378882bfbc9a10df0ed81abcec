{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8e09e320_7784e119",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3705,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-06T16:06:58Z",
      "side": 1,
      "message": "I think we can make the logic in this change simpler. `createDeviceAndQueue` is called when creating the display, which means the blob cache functions are _never_ set at this point.\n\nSo from here, we should only just call a function that inits the pipeline cache without attempting to load anything from the cache.\n\nThen the usual calls to `ensurePipelineCacheInitialized` from `Renderer::getPipelineCache()` can just work as they did before.",
      "revId": "25be150992830e378882bfbc9a10df0ed81abcec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10445ba3_dcaf20db",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3705,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-06T16:08:41Z",
      "side": 1,
      "message": "Looks like you can just bring back this code from the CL that broke this (https://chromium-review.googlesource.com/c/angle/angle/+/5375102) here:\n\n```\n    {\n        std::unique_lock\u003cstd::mutex\u003e lock(mPipelineCacheMutex);\n        bool loadedFromBlobCache \u003d false;\n        ANGLE_TRY(initPipelineCache(context, \u0026mPipelineCache, \u0026loadedFromBlobCache));\n        if (loadedFromBlobCache)\n        {\n            ANGLE_TRY(getPipelineCacheSize(context, \u0026mPipelineCacheSizeAtLastSync));\n        }\n    }\n```\n\nand no need to touch anything else? You could probably just assert that `loadedFromBlobCache` is false too.",
      "parentUuid": "8e09e320_7784e119",
      "revId": "25be150992830e378882bfbc9a10df0ed81abcec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78035ee1_007cf4d4",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3705,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-08-06T16:31:46Z",
      "side": 1,
      "message": "\u003e which means the blob cache functions are never set at this point.\n\nThanks. I did not investigated that far. I thought maybe it is possible (because of the `if (loadedFromBlobCache)` check in `createDeviceAndQueue()`).\n\n\u003e and no need to touch anything else? You could probably just assert that loadedFromBlobCache is false too.\n\nYes. I was thinking to bring the old code back, but decided to modify the method.\nA also like the idea of adding `ASSERT` - this will make clear that blob function can\u0027t be set prior to Display initialization.\n\nHowever, I have one question left.\nWhat is the point initializing `mPipelineCache` in `createDeviceAndQueue` at all?\nWhy not just wait until `Renderer::getPipelineCache()`?\n\nThe only place `mPipelineCache` is accessed directly is `Renderer::syncPipelineCacheVk()`, but the following change will add `!mPipelineCacheInitialized` check.\n\nMaybe I move this https://chromium-review.googlesource.com/c/angle/angle/+/5756575/1?usp\u003drelated-change\nbefore this change and remove `mPipelineCache` initialization from `createDeviceAndQueue()`?",
      "parentUuid": "10445ba3_dcaf20db",
      "revId": "25be150992830e378882bfbc9a10df0ed81abcec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "837b8fc9_16b91ff9",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3705,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-06T16:50:09Z",
      "side": 1,
      "message": "\u003e What is the point initializing mPipelineCache in createDeviceAndQueue at all?\n\nYou\u0027re probably right, maybe we should just delete this line.",
      "parentUuid": "78035ee1_007cf4d4",
      "revId": "25be150992830e378882bfbc9a10df0ed81abcec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}