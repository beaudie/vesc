{
  "comments": [
    {
      "key": {
        "uuid": "b2487adc_84a4e519",
        "filename": "src/compiler/translator/BaseTypes.h",
        "patchSetId": 12
      },
      "lineNbr": 208,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "This should be !IsIntegerSampler(type) to guarantee that we don\u0027t miss integer sampler types above.",
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54c34bd3_9b36f493",
        "filename": "src/compiler/translator/BaseTypes.h",
        "patchSetId": 12
      },
      "lineNbr": 208,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T16:48:37Z",
      "side": 1,
      "message": "My intention was to ensure that IsIntegerSamplerUnsigned() is only called for integer samplers.\nBut your point is more sensible, I think.\nI change it.",
      "parentUuid": "b2487adc_84a4e519",
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f16818a_daaf1a9f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "I\u0027m not sure why we started at 0x1 but I think we could shift everything down 1 value and still fit in 2 bits (also be sure to update the generated HLSL)",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 23
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2283284_7fa3078f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 12
      },
      "lineNbr": 124,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T16:48:37Z",
      "side": 1,
      "message": "Hm, I think you\u0027re right -- there is no need for an \u0027invalid\u0027 (0) state.",
      "parentUuid": "7f16818a_daaf1a9f",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 124,
        "endChar": 23
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d50d62_2ebd5a8f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 12
      },
      "lineNbr": 387,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "Instead of copying to this, could you just assign it to void pointer and do the compare/copy below?",
      "range": {
        "startLine": 387,
        "startChar": 8,
        "endLine": 387,
        "endChar": 36
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdeff829_0f276107",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 12
      },
      "lineNbr": 387,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T16:48:37Z",
      "side": 1,
      "message": "Ah, yes.\nI used memcpy first to not run into undefined behavior again because of different pointer types. But when converting to void* and using memcmp/memcpy afterwards this should be OK, too, I guess.\n(and only taking into account the int/uint part anyway, not the float*)",
      "parentUuid": "26d50d62_2ebd5a8f",
      "range": {
        "startLine": 387,
        "startChar": 8,
        "endLine": 387,
        "endChar": 36
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f6882b4_0656aef6",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "We don\u0027t need a special case here.",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b97ff612_39a7c00b",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T16:48:37Z",
      "side": 1,
      "message": "So always returning InvalidEnum here is OK instead of InvalidOperation as it was before the introduction of GL_TEXTURE_BORDER_COLOR?",
      "parentUuid": "9f6882b4_0656aef6",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bfe94ab_bc51712f",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T16:51:55Z",
      "side": 1,
      "message": "I think we should return InvalidOperation.",
      "parentUuid": "b97ff612_39a7c00b",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8037073_663a96a7",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T16:56:36Z",
      "side": 1,
      "message": "But the GL_OES_texture_border_clamp extension text describes:\n\"An INVALID_ENUM error is generated if TexParameter{if} is called for a non-scalar parameters (TEXTURE_BORDER_COLOR_OES).\"\nBut I just saw that the test TextureParameterTest.NegativeEnum checks for INVALID_OPERATION for GL_TEXTURE_CROP_RECT_OES...",
      "parentUuid": "1bfe94ab_bc51712f",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0dd6056_762d66a8",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T17:02:45Z",
      "side": 1,
      "message": "This validation is for something else, bufSize comes from the GL_ANGLE_robust_client_memory extension so we can validate that we don\u0027t read over the end of the buffer.",
      "parentUuid": "b8037073_663a96a7",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4fd2a7_8f7ba15e",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-12T17:25:56Z",
      "side": 1,
      "message": "I don\u0027t get it.\nValidateTexParameter* calls ValidateTexParameterBase with size \u003d 1 and ValidateTexParameter*v with size \u003d -1, so this check will return an InvalidOperation (or InvalidEnum now) in case it is called for GL_TEXTURE_CROP_RECT_OES or GL_TEXTURE_BORDER_COLOR. And this is what TextureParameterTest.NegativeEnum checks.\nIn the OES_draw_texture I couldn\u0027t find information about whether to return InvalidEnum or InvalidOperation for GL_TEXTURE_CROP_RECT_OES, so maybe InvalidEnum is OK?",
      "parentUuid": "c0dd6056_762d66a8",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10662126_832ac79c",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T17:29:35Z",
      "side": 1,
      "message": "Ok, this is the bug then, it should be calling with a bufsize of -1 so that bufsize is not validated at all in this case.  This was probably missed because this is the first parameter that doesn\u0027t have a bufsize of 1.",
      "parentUuid": "9f4fd2a7_8f7ba15e",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a1233e1_faf247bd",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T18:06:36Z",
      "side": 1,
      "message": "I looked again and the bufSize of 1 is correct for those functions, they are the glTexParameterf functions as opposed to glTexParameterfv so it is known that the parameter size is 1.\n\nThe proper fix is to add another parameter to this function, something like.. bool vectorParameters and generate the invalid enum in the switch on pname below.",
      "parentUuid": "10662126_832ac79c",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cdb6869_fd471a6a",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 5910,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-15T09:26:31Z",
      "side": 1,
      "message": "Ah, OK.\nBut then all non-robust functions need to call with bufSize -1 because otherwise we would already return at the bufSize check (with InvalidOperation) if we call a non vector glTexParameter with GL_TEXTURE_BORDER_COLOR, so we wouldn\u0027t reach the pname-switch where we can return with InvalidEnum.",
      "parentUuid": "0a1233e1_faf247bd",
      "range": {
        "startLine": 5905,
        "startChar": 8,
        "endLine": 5910,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac8cc60_c57d2891",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 6159,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T18:06:36Z",
      "side": 1,
      "message": "put the vector parameter check here.",
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550a6a7a_346dfec8",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 12
      },
      "lineNbr": 6273,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 6269,
        "startChar": 5,
        "endLine": 6273,
        "endChar": 9
      },
      "revId": "f3d7d37951f19d7e9b20631e8e7cc4c25f086200",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}