{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d776bcf6_a234c9c3",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3186,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-08-30T09:40:58Z",
      "side": 1,
      "message": "@syoussefi@chromium.org\n\nI\u0027m not sure what method (`postProcessUnlockedTryAcquire()` or `doDeferredAcquireNextImage()`) should be used here as well as in the `swapImpl()`.\n\nIn my understanding, `prepareSwap()` is technically optional. All other methods should still work even if `prepareSwap()` is not called.\n\nIf `swapImpl()` is mandatory, then need to keep `postProcessUnlockedTryAcquire()` here and also update `swapImpl()` to match it.\n\nAdditional note: in this change I returned use of `angle::ToEGL()` instead of directly returning `egl::EglBadSurface()`. In my understanding, this is the correct way when error was caused by Vulkan API.",
      "revId": "cfffd82485b6d4065fba57273fa5f89b843653db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e14019_7421eb23",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3186,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-08-30T13:04:27Z",
      "side": 1,
      "message": "\u003e If swapImpl() is mandatory,\n\n**edit:** If `prepareSwap()` is mandatory, ...",
      "parentUuid": "d776bcf6_a234c9c3",
      "revId": "cfffd82485b6d4065fba57273fa5f89b843653db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b88eeda9_c9b62b91",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3186,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-30T13:28:32Z",
      "side": 1,
      "message": "The entry points for a few functions call `EGL_PrepareSwapBuffersANGLE` automatically, such as `EGL_SwapBuffers*` and `EGL_QuerySurface64` with `EGL_BUFFER_AGE`. The backend relies on `prepareSwap()` having been called.\n\nSo using `NeedToProcessAcquireNextImageResult` and `postProcessUnlockedTryAcquire` was right here",
      "parentUuid": "a2e14019_7421eb23",
      "revId": "cfffd82485b6d4065fba57273fa5f89b843653db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4874e4af_45d8539c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3186,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2024-08-30T13:34:52Z",
      "side": 1,
      "message": "Then the question is why `swapImpl()` calls `doDeferredAcquireNextImage()` and not `postProcessUnlockedTryAcquire()`?",
      "parentUuid": "b88eeda9_c9b62b91",
      "revId": "cfffd82485b6d4065fba57273fa5f89b843653db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa2a315_35f15ad9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3186,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-30T13:42:39Z",
      "side": 1,
      "message": "I have to refresh my memory, maybe you\u0027re right and `needsAcquireImageOrProcessResult` is fine... it\u0027s certainly safer.\n\nPreviously, `NeedToProcessAcquireNextImageResult` was called because of `ASSERT(!mAcquireOperation.needToAcquireNextSwapchainImage);`, so the code here was a stripped version of what is called in `swapImpl`. I don\u0027t remember why that assumption exists and why `swapImpl` cannot assume the same.\n\nI need to step out for an hour, but I\u0027ll take a look again when I get back.",
      "parentUuid": "4874e4af_45d8539c",
      "revId": "cfffd82485b6d4065fba57273fa5f89b843653db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}