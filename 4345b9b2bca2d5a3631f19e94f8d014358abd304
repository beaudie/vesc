{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e65a96d2_72501909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1533513
      },
      "writtenOn": "2022-09-29T17:26:19Z",
      "side": 1,
      "message": "OES_compressed_paletted_texture is still in registry_xml.py so that format strings for GL_PALETTE* enums are generated.",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f4ce0af_1977b36d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-09-29T23:29:32Z",
      "side": 1,
      "message": "Feels like this could be done with a feature instead of an extension, but I can see how you are using it in the next CL.",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d7f42ce_a84b40ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1533513
      },
      "writtenOn": "2022-09-30T01:18:03Z",
      "side": 1,
      "message": "That would require letting format support functions in formatutils.cpp be aware about supported features",
      "parentUuid": "5f4ce0af_1977b36d",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a37b471_f295f66f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-30T01:32:46Z",
      "side": 1,
      "message": "Is it just me, or there\u0027s no text in the extension file?",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44eab518_d123e942",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1533513
      },
      "writtenOn": "2022-09-30T01:34:52Z",
      "side": 1,
      "message": "There\u0027s indeed no text, right. I created it so that link in doc is valid, iirc, or maybe I thought the script requires file to be present. I guess I could put same thing as the commit message in that extension\u0027s description.",
      "parentUuid": "3a37b471_f295f66f",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5058198f_e74cb581",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-30T01:38:33Z",
      "side": 1,
      "message": "It would have to look like a real extension, but yes the contents could be brief.\n\nBut it seems overkill to do this TBH. I wonder if you can just get away with not using any extension at all. Like assume palette support for GLES1, which is true even if backend implementations are \"incomplete\", and validate calls based on that.",
      "parentUuid": "44eab518_d123e942",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f89a4313_d2e0df0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-30T01:39:57Z",
      "side": 1,
      "message": "If I read this correctly, the only usage in the next CL is in `RequireES1AndExt`, but why not just use `RequireES1`? Again, even if a backend does not implement it, gles1 should always imply palette.",
      "parentUuid": "5058198f_e74cb581",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99adb739_2787a0f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1533513
      },
      "writtenOn": "2022-09-30T01:41:25Z",
      "side": 1,
      "message": "Sounds good, but how would we validate that? Would validation code have to become aware of the backend it\u0027s running with?",
      "parentUuid": "5058198f_e74cb581",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf0387a4_18b7544a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-30T01:43:17Z",
      "side": 1,
      "message": "No. The validation layer enforces the spec, so the checks would be based on `isGLES1()`. If the backend fails palette, well, they already do, that\u0027s nothing new. The tests would be skipped until support is added.\n\nPalette is not optional in GLES1, right?",
      "parentUuid": "99adb739_2787a0f8",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77cc5577_e1eb5285",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1533513
      },
      "writtenOn": "2022-09-30T01:47:51Z",
      "side": 1,
      "message": "Right, it\u0027s not optional. I thought it\u0027s better to just be non-conformant and return an error on other backends, instead of crashing or otherwise something bad happening inside the backend code, but that works too.",
      "parentUuid": "bf0387a4_18b7544a",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aa09bb8_98ded298",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-30T01:53:18Z",
      "side": 1,
      "message": "Got it, but no, we don\u0027t add complexity for that. We are still non-conformant, and we crash :) GLES1 is not used by the web or anything, so anyone explicitly using it would know what they are in for.",
      "parentUuid": "77cc5577_e1eb5285",
      "revId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4345b9b2bca2d5a3631f19e94f8d014358abd304",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}