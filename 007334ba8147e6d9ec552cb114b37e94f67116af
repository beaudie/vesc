{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ffeb7285_d2a3d157",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-08-16T22:41:01Z",
      "side": 1,
      "message": "PTAL - we can hopefully land this thing now",
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73433b56_fcde9982",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-08-16T23:25:14Z",
      "side": 1,
      "message": "LGTM modulo assert, thanks for all the info and improvements Mohan!",
      "parentUuid": "ffeb7285_d2a3d157",
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f20022c6_6dcd0d19",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-08-16T23:25:14Z",
      "side": 1,
      "message": "This is probably not the case when this function gets called multiple times and `mInvalidContextSet` already has objects in it before iteration begins so this assert would need to depend on \"prior size\" if you want to keep it.",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983f13e0_585b506a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-08-16T23:26:39Z",
      "side": 1,
      "message": "indeed, was thinking of replacing it with `\u003e\u003d` but wondering if there is enough value add in doing so. if not, will remove the line",
      "parentUuid": "f20022c6_6dcd0d19",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95220114_9578d142",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-08-16T23:37:41Z",
      "side": 1,
      "message": "How about something like this:\n\nline ~1143: `size_t n \u003d mState.contextSet.size() + mInvalidContextSet.size()`\nline ~1174: `assert(mState.contextSet.size() + mInvalidContextSet.size() \u003d\u003d n)`\n\nthat would validate that no contexts are \"lost\" but could be moved between sets, and would cover the `mState.contextSet` modification on line 1173 as well.",
      "parentUuid": "983f13e0_585b506a",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d4faa79_81075667",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-08-17T00:49:08Z",
      "side": 1,
      "message": "unfortunately `n` becomes an unused variable (hence compiler error) in builds with `assert` disabled",
      "parentUuid": "95220114_9578d142",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c819173_e66864b4",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-17T03:46:18Z",
      "side": 1,
      "message": "No, `n` wouldn\u0027t become unused. In no-assert builds, the condition is specified in something like `true ? 0 : (condition)` so it\u0027s never run, but the compiler sees the expression nevertheless.",
      "parentUuid": "6d4faa79_81075667",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e0858c_0492b88a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1165,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-08-17T13:46:54Z",
      "side": 1,
      "message": "\u003e true ? 0 : (condition)\n\nah, good to know. Assumed, incorrectly it seems, that ASSERT macros are compiled out in no-assert builds. Does this mean we are taking a perf hit / CPU overhead, however tiny it maybe, for every assert we add?\n\n\u003e How about something like this\n\nwill rework the condition as per suggestion",
      "parentUuid": "9c819173_e66864b4",
      "range": {
        "startLine": 1165,
        "startChar": 4,
        "endLine": 1165,
        "endChar": 96
      },
      "revId": "007334ba8147e6d9ec552cb114b37e94f67116af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}