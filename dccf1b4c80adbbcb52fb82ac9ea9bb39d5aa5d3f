{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "26301000_11d6a24a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-16T16:06:50Z",
      "side": 1,
      "message": "LGTM - didn\u0027t quite follow what you and Tim were discussing. Tim do you think this is safe to land?",
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ad032a2_4eb7d78e",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-16T15:21:13Z",
      "side": 1,
      "message": "https://www.cplusplus.com/reference/stack/stack/pop/\n\u003e Remove top element\n\u003e \n\u003e This calls the removed element\u0027s destructor.\n\nThis \u0027group\u0027 variable also suffers from the same bug.\n\nThe \u0027move\u0027 isn\u0027t actually transfering the object to the local variable; it\u0027s still on the stack which is why they are being destroyed.   Both of the pop() calls should be moved to the end of the function.",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 75
      },
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "233c8e97_4a37cac5",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-08-16T16:04:20Z",
      "side": 1,
      "message": "This can\u0027t be done, since we have to add the current group to the top of the stack after the pop, and if the relevant data would really be destroyed, then valgrind should report access to freed memory, but it doesn\u0027t, at least not in the case of group. \n\nThe std::move should steal the content of the value on top, so that the pop() afterwards removes an empty object. However, for some reason there seems to be a problem with std::string here, because with the un-patched version valgrind reports the use of un-initialized memory in the destructor, a \"std::cerr \u003c\u003c name;\" after initializing name clears that error, and so does moving the pop() to after passing it to make_pair.",
      "parentUuid": "7ad032a2_4eb7d78e",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 75
      },
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ede19e_bd5b236a",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-16T17:29:45Z",
      "side": 1,
      "message": "Ah, yeah, I skipped over the new mGroupValueStack.top() being modified.   Rather than trying to work around the quirks of move semantics with strings and stacks, I think we should just do a copy and pop() right away, since the std::move() leaves the stack object in a weird state.\n\nIf nothing else, there should probably at least be a comment here indicating that mGroupNameStack.top() is \"valid\" but unspecified and should not be accessed until after the pop(), along with why the pop() is being delayed (since most everything says move() should immediately be followed by pop()).",
      "parentUuid": "233c8e97_4a37cac5",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 75
      },
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6006efa_fb0533cc",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-08-17T09:45:55Z",
      "side": 1,
      "message": "Copying the group would be quite expensive, because it copies the whole (sub-)tree, and given the way rapidjason is implemented (i.e. once attached to the parent one can no longer add nodes), the tree has to be build botton-up, which would result in copying nested groups various times. \n\nI\u0027ve added according comments.",
      "parentUuid": "c2ede19e_bd5b236a",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 75
      },
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "231a768e_529f9d54",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-08-18T14:59:13Z",
      "side": 1,
      "message": "Seems like with the patch reworking the flakiness is back ...",
      "parentUuid": "e6006efa_fb0533cc",
      "range": {
        "startLine": 50,
        "startChar": 70,
        "endLine": 50,
        "endChar": 75
      },
      "revId": "dccf1b4c80adbbcb52fb82ac9ea9bb39d5aa5d3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}