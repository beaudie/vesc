{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "546c7528_940774e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-11-03T18:31:23Z",
      "side": 1,
      "message": "Also thanks for pushing this forward. Some of my suggestions may make more sense for a follow-up patch. The existing CL scaffolding is several years old and we\u0027ve adopted a couple different practices since it was written, hence the suggestions on return types.",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10b5a38_c3cf7b71",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-03T15:24:15Z",
      "side": 1,
      "message": "Thanks for the CL! Could you please unify the error handling with the way we do it for GL? Otherwise you\u0027re going to end up having a bad time when it comes to interop with shared code.\n\nGenerally that means returning `angle::Result`, and using `ANGLE_TRY` everywhere. You can then return `angle::Result::Stop` in all these functions.\n\nLater on, you can use `ANGLE_VK_TRY` where appropriate to handle errors. See how that macro ends up storing the error code in the context to be returned by `glGetError()` (and so you don\u0027t have to bubble the error code up all the way back to the entry point). CL could use a very similar mechanism.",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0237a202_e51b3096",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T16:50:41Z",
      "side": 1,
      "message": "\u003e (and so you don\u0027t have to bubble the error code up all the way back to the entry point)\n\nActually, we **do** have to bubble error code back up to entrypoint(s) for OpenCL (returns error code per API call by design).\n\nUnlike OpenGL where error state is internally tracked and checked via `glGetError()` query like you mentioned.\n\n\u003e Otherwise you\u0027re going to end up having a bad time when it comes to interop with shared code.\n\nYeah we did run into this already - actually I had rolled my own `ANCLE_VK_TRY` and friends - but yeah not as nice as using existing `ANGLE_VK_TRY`.\n\nI had some ideas for handling errors like GL does but they feel hacky at best. If you have any suggestions there let me know, otherwise I think this PR is okay for now and we can look into later.",
      "parentUuid": "c10b5a38_c3cf7b71",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "689d39ea_0f1cef9e",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-03T19:24:16Z",
      "side": 1,
      "message": "What if you set the error code in the context (like GL), and in the entry point retrieve and return it? Every entry point could set the error to success at the beginning, then return the error code (whatever it might have changed to) at the end. A simple change to the generator would do, and then you can safely just use angle::Result everywhere in CL like the rest of the codebase.",
      "parentUuid": "0237a202_e51b3096",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33aee1e6_30e04bf1",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T21:36:19Z",
      "side": 1,
      "message": "That\u0027s a good idea - yeah I like that better than say wrapping `ANCLE_VK_TRY` around `ANGLE_VK_TRY` and such.\n\nI\u0027ll look into the details (e.g. thread safety on concurrent CL API calls using same context object and how we set/retrieve error code(s)), but I think this is doable.\n\nDepending on how large this new update is, I might need to break this up in a relation chain.\n\n\u003e A simple change to the generator would do\n\nIs this some script in ANGLE somewhere? Any pointers to docs on it?\n\n\u003e Thanks for the CL!\n\nSure thing - glad to be finally getting the ball rolling on the OpenCL stuff ðŸ™‚",
      "parentUuid": "689d39ea_0f1cef9e",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9590511_dfeaae4c",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-04T03:23:20Z",
      "side": 1,
      "message": "\u003e Depending on how large this new update is\n\nIt\u0027ll probably be a lot of annoying updates which you could hopefully `sed` through! Agreed that a split preparation CL would be good\n\n\u003e Is this some script in ANGLE somewhere?\n\nYes, that would be `scripts/generate_entry_points.py`\n\n\u003e Sure thing - glad to be finally getting the ball rolling on the OpenCL stuff ðŸ™‚\n\nðŸŽ‰",
      "parentUuid": "33aee1e6_30e04bf1",
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fba90c18_26c3e401",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-11-03T18:31:23Z",
      "side": 1,
      "message": "These would benefit a lot from a typedef somewhere. Particularly because this represents a memory offset but `region` is more of a coordinate.",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "756e6bc8_38da2605",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T21:36:19Z",
      "side": 1,
      "message": "Agreed - will update on next patchset.",
      "parentUuid": "fba90c18_26c3e401",
      "range": {
        "startLine": 45,
        "startChar": 33,
        "endLine": 45,
        "endChar": 62
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fd76b0e_c2ed787f",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-11-03T18:31:23Z",
      "side": 1,
      "message": "I\u0027d prefer to omit this parameter and simply return nullptr on error. All the input should be validated by this point so the range of errors that are generated from here should all be \"something went horribly wrong\" or device loss kind of thing.",
      "range": {
        "startLine": 31,
        "startChar": 47,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "918fca8c_75b31116",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T21:36:19Z",
      "side": 1,
      "message": "Yeah agreed (along with Shahbaz\u0027s suggestion of swapping CL errors with ANGLE error abstraction).",
      "parentUuid": "1fd76b0e_c2ed787f",
      "range": {
        "startLine": 31,
        "startChar": 47,
        "endLine": 31,
        "endChar": 64
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42c5d65_e0107bab",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-11-03T18:31:23Z",
      "side": 1,
      "message": "I don\u0027t think this is needed (here and CLMemoryImpl). Functions like `getSize` should be fully implemented in the frontend `CLMemory` class.",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 53
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b840d84c_ab205dda",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T21:36:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d42c5d65_e0107bab",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 53
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57d8aaa_a0cd7181",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-11-03T18:31:23Z",
      "side": 1,
      "message": "Same comment about the Memory::getSize.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 85
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c448aa90_b947c2f3",
        "filename": "src/libANGLE/renderer/vulkan/CLProgramVk.h",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2023-11-03T21:36:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a57d8aaa_a0cd7181",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 85
      },
      "revId": "04e0432fa18e0e242f3c2bb1b6de155b3acd1895",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}