{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "51a916a2_a9d37057",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-31T18:57:49Z",
      "side": 1,
      "message": "Nice fix. We don\u0027t have to wait until it show up as hotspot, likely it won\u0027t since the cost is not big enough. But little things do add up and I am not seeing any value to keep invalid value. Can we make BufferSerial\u0027s comparison to accept invalid value (i.e, rename invalid value to initial value)? This invalid value is artificial obstacle for no good reason (it make sense for QueSerial, but not much for other serials that only purpose is to know f they are different or not) and I have ran into this a few times in the past already.",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02c46530_ab623873",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-31T19:37:01Z",
      "side": 1,
      "message": "The special handling is to eliminate the case where invalid is compared with invalid. Feel free to propose a follow up patch to this. Any objections to landing this trivial little patch? I don\u0027t think it\u0027ll be possible to measure a regression.",
      "parentUuid": "51a916a2_a9d37057",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96e2619f_b95725a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-31T19:48:07Z",
      "side": 1,
      "message": "No objection to land this, but I am proposing in this CL you can get rid of the special handling. invalid compared to invalid should return \"equal\".",
      "parentUuid": "02c46530_ab623873",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c6a5a74_79d528d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-31T19:50:53Z",
      "side": 1,
      "message": "I think I originally wrote the serial code. At least, I have a recollection of wanting to not let invalid accidentally slip into the code and have two invalid object return a cache hit. It\u0027s a very defensive coding style.\n\nI was thinking I could make a new method like \"isEqualOrInvalid\" specifically for cases where you do want to allow invalid, and that lets you keep the safety around other checks.",
      "parentUuid": "96e2619f_b95725a1",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ac02a14_c88f31ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-31T21:05:31Z",
      "side": 1,
      "message": "Or add an assertion in the scenario where you invalid means invalid.",
      "parentUuid": "6c6a5a74_79d528d9",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de84160d_810cc1e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-01T18:30:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ac02a14_c88f31ec",
      "revId": "77ad710c015bf493132afe16e389839b641fbd16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}