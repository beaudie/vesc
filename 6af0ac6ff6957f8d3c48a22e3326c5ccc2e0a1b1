{
  "comments": [
    {
      "key": {
        "uuid": "6e98c8be_1b74623d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1143,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-14T16:57:06Z",
      "side": 1,
      "message": "I like the code reuse here. You should notice that other member functions use lower case start initials. Can you please use that style? See style guide:\n\nhttps://chromium.googlesource.com/angle/angle/+/master/doc/CodingStandard.md#naming\n\nAlso as a suggestion I\u0027d call this \u0027copyImageDataToStagingBuffer\u0027",
      "range": {
        "startLine": 1143,
        "startChar": 25,
        "endLine": 1143,
        "endChar": 51
      },
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "804736aa_1f26d3a4",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1143,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-15T08:06:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e98c8be_1b74623d",
      "range": {
        "startLine": 1143,
        "startChar": 25,
        "endLine": 1143,
        "endChar": 51
      },
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae1d7b7_a782ca2c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-12T05:11:56Z",
      "side": 1,
      "message": "I noticed that you have deleted such a logic but what is the reason?",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f749fdb_dc2b98d7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-12T08:03:05Z",
      "side": 1,
      "message": "Done.\nIgnore it. I found GetExtentsAndLayerCount() has already contained such logic.",
      "parentUuid": "1ae1d7b7_a782ca2c",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e244784a_1f282f44",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2019-10-14T03:09:51Z",
      "side": 1,
      "message": "It records a copyImageToBuffer call, and line 1184 records a copyBufferToImage.\nBut I see in some cases, the copyBufferToImage is called before copyImageToBuffer in driver, this causes incorrect image content.\nThe copyImageDataToBuffer starts a commands, and later in ensureImageInitializedImpl it starts a new commands, and these two commands have no dependency, so how can we make sure the copyImageToBuffer is called first?",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc2e919e_a1e3e1b5",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-14T16:59:51Z",
      "side": 1,
      "message": "I think we might be missing a setReadDependency call. Look in this file for other examples of \u0027addReadDependency\u0027.",
      "parentUuid": "e244784a_1f282f44",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d954b17a_71e2646f",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2019-10-15T07:07:23Z",
      "side": 1,
      "message": "it is difficult to addReadDependency here, because the new writing node hasn\u0027t been created here, it will be created later in ensureImageInitialized.\nSo I think we need a similar functionality as mImage-\u003estageSubresourceUpdateFromBuffer which will set the dependency later.\nAm I wrong?",
      "parentUuid": "bc2e919e_a1e3e1b5",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e5f815_2099745e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2019-10-15T07:51:38Z",
      "side": 1,
      "message": "Or can stageSubresourceUpdateFromImage be used? we can extend the functionality to copy old image to new image.\nSo that there is only one step copy, but not two",
      "parentUuid": "d954b17a_71e2646f",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fbb29ad_eb1485fe",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-15T21:01:06Z",
      "side": 1,
      "message": "Maybe use the same pattern Cody did: he starts recording on the image to change the layout to transfer so we can copy the image data to the buffer. Don\u0027t you need to change layout anyway?",
      "parentUuid": "f2e5f815_2099745e",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ee6ed0_eda7d569",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-16T01:54:11Z",
      "side": 1,
      "message": "The image layout is already changed when calling copyBufferToImage in mImage-\u003eflushStagedUpdates().",
      "parentUuid": "7fbb29ad_eb1485fe",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7d94454_0c64c4e7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1178,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-16T02:18:13Z",
      "side": 1,
      "message": "In addition, in the copyImageDataToBuffer(), the mImage changed layout to TransferSrc. I have tried adding dependency before calling commandBuffer-\u003ecopyImageToBuffer by 2 methods but all of them are failed. The first one is mImage-\u003eaddReadDependency(), it has an assert. Another one is (*bufferOut)-\u003eonWrite(), it will cause a lot mipmap related end2end tests failed.",
      "parentUuid": "75ee6ed0_eda7d569",
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d55b565a_098dee31",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1337,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-14T16:57:06Z",
      "side": 1,
      "message": "I see in generateMipmap you\u0027re calling ensureImageInitializedImpl directly because you want to either use a) the enabled level count or b) the full mip chain. I think you could get better code reuse if you add an extra parameter to ensureImageInitialized:\n\nenum class ImageMipLevels\n{\n   EnabledLevels,\n   FullMipChain,\n};\n\nangle::Result TextureVk::ensureImageInitialized(ContextVk *contextVk, ImageMipLevels mipLevels);\n\nuint32_t Texturevk::getMipLevelCount(ImageMipLevels mipLevels)\n{\n  switch (mipLevels)\n  {\n     ...\n  }\n}",
      "range": {
        "startLine": 1337,
        "startChar": 25,
        "endLine": 1337,
        "endChar": 47
      },
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d6e118a_930893c1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1337,
      "author": {
        "id": 1340324
      },
      "writtenOn": "2019-10-15T08:06:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d55b565a_098dee31",
      "range": {
        "startLine": 1337,
        "startChar": 25,
        "endLine": 1337,
        "endChar": 47
      },
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b4ff6e6_af5cf402",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1818,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-14T16:57:06Z",
      "side": 1,
      "message": "nit: you probably don\u0027t need to define a new function here. you can call mState.getEnabledLevelCount directly.",
      "range": {
        "startLine": 1814,
        "startChar": 0,
        "endLine": 1818,
        "endChar": 1
      },
      "revId": "6af0ac6ff6957f8d3c48a22e3326c5ccc2e0a1b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}