{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02a0c371_4b4133c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2022-05-27T13:38:34Z",
      "side": 1,
      "message": "Please also add angleproject:5730 here.",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec7d7f3d_b160091d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T16:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02a0c371_4b4133c5",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cbe5da0_d87e75d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1542132
      },
      "writtenOn": "2022-05-27T14:40:49Z",
      "side": 1,
      "message": "Looks good by me. I think Alexey is correct with the GPUFamily Apple1 having \"Maximum number of color render targets per render pass descriptor\" 4, where as Apple2 has already 8.",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c6ca2c7_7fb45e53",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2022-05-27T13:38:34Z",
      "side": 1,
      "message": "According to Metal-Feature-Set-Tables, this should likely be (2, 1).",
      "range": {
        "startLine": 730,
        "startChar": 31,
        "endLine": 730,
        "endChar": 37
      },
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "661aea07_c41c986d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.mm",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T16:58:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c6ca2c7_7fb45e53",
      "range": {
        "startLine": 730,
        "startChar": 31,
        "endLine": 730,
        "endChar": 37
      },
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb1fabb4_5479cee2",
        "filename": "src/libANGLE/renderer/metal/FrameBufferMtl.h",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1542132
      },
      "writtenOn": "2022-05-27T14:40:49Z",
      "side": 1,
      "message": "I suppose it\u0027d be a nano-optimisation to preserve this as it was, std::array",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "579889e0_f4894f88",
        "filename": "src/libANGLE/renderer/metal/FrameBufferMtl.h",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-27T15:07:27Z",
      "side": 1,
      "message": "Note: If the reason for the change was to get a `size()` that reflects the actual number instead of max number (as `std::array::size()` does), we have `angle::FixedVector` which is basically `std::array + size_t size`.",
      "parentUuid": "bb1fabb4_5479cee2",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef543d07_d62424b2",
        "filename": "src/libANGLE/renderer/metal/FrameBufferMtl.h",
        "patchSetId": 5
      },
      "lineNbr": 215,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T16:58:57Z",
      "side": 1,
      "message": "Thanks! changed.",
      "parentUuid": "579889e0_f4894f88",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5eecc0e1_f9800c53",
        "filename": "src/libANGLE/renderer/metal/mtl_command_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1542132
      },
      "writtenOn": "2022-05-27T14:40:49Z",
      "side": 1,
      "message": "I find this pattern a bit confusing, e.g. having a parameter that is a constant value just so it doesn\u0027t need to be stored in the object as a member.  I always think deviceMaxRenderTargets may change between invocations. Maybe it\u0027s just a different philosophy",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "324fd713_da47c423",
        "filename": "src/libANGLE/renderer/metal/mtl_command_buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 336,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-05-27T16:58:57Z",
      "side": 1,
      "message": "I\u0027m happy to change it. It\u0027s not a constant value though. It\u0027s a per device value. I wasn\u0027t happy having to pass it in but at this level there is no reference to anything I could find that would let me look up the value from the display/device. It didn\u0027t seem appropriate to pass in DisplayMtl to this level of the code. If you have a suggestion I\u0027m happy to refactor.",
      "parentUuid": "5eecc0e1_f9800c53",
      "revId": "ef328cf55fd70af2b9eacd2920ee4d247e995a6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}