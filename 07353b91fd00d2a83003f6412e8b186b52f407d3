{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "47d9d983_1e68fcfd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T20:56:24Z",
      "side": 1,
      "message": "Could you make the first line a bit more precise, and expand upon it in the second paragraph? For example:\n\n\n\"\"\"\nMetal: add ANGLE_metal_create_context_ownership_identity.\n\nThis Metal-specific EGL extension allows a given context and the GPU resources it allocates to be associated with a particular task ID on the system, for system-level bookkeeping purposes.\n\"\"\"",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a200c939_8131b0a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1529502
      },
      "writtenOn": "2021-12-13T23:50:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47d9d983_1e68fcfd",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bc83a23_88d7f263",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T20:22:10Z",
      "side": 1,
      "message": "Note to self: Kyle\u0027s copy of this was https://chromium-review.googlesource.com/c/angle/angle/+/3331408 .\n",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3e5dbe9_789596d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1529502
      },
      "writtenOn": "2021-12-13T20:34:56Z",
      "side": 1,
      "message": "\u003e Patch Set 1:\n\u003e \n\u003e This change is ready for review.\n\n",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0bb00d0_fa293241",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T20:56:24Z",
      "side": 1,
      "message": "Let me send this for a dry run for you.\n",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bd10868_14121507",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T21:27:06Z",
      "side": 1,
      "message": "Please see the failure logs (let me know if you have any trouble doing so) and revise the CL - you may need to gclient sync and rerun run_code_generation.py, then re-upload. Thanks.\n",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "049f36be_c8e19f8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2021-12-13T22:31:48Z",
      "side": 1,
      "message": "LGTM once the code generation is resolved.",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac07e31d_c162bf03",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T20:56:24Z",
      "side": 1,
      "message": "Is it worth surfacing these errors in a programmatically queryable way, like as an EGL error?\n\nWould it be helpful to factor this initialization into a method with an error return code so callers can see the failures?",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738a09f1_a6493e7f",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1529502
      },
      "writtenOn": "2021-12-13T21:08:24Z",
      "side": 1,
      "message": "I think the possibility for error here is almost zero, I don\u0027t expect this to ever be hit. The ports are already verified before being passed off to ANGLE, and are unmodified by ANGLE.",
      "parentUuid": "ac07e31d_c162bf03",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b7506af_6060dabd",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T21:27:06Z",
      "side": 1,
      "message": "OK, that\u0027s fine.",
      "parentUuid": "738a09f1_a6493e7f",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72cacd68_550c45c1",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T20:56:24Z",
      "side": 1,
      "message": "Similarly - worth factoring into some sort of destroy() method with a return value?",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e1656a9_3352fd53",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1529502
      },
      "writtenOn": "2021-12-13T21:12:17Z",
      "side": 1,
      "message": "Same justification as above, I\u0027m happy to add one, but I don\u0027t see much benefit to it at this point.",
      "parentUuid": "72cacd68_550c45c1",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bdd6dc0_9071223a",
        "filename": "src/libANGLE/renderer/metal/mtl_context_device.mm",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T21:27:06Z",
      "side": 1,
      "message": "That\u0027s fine, thanks for thinking about it.",
      "parentUuid": "1e1656a9_3352fd53",
      "revId": "07353b91fd00d2a83003f6412e8b186b52f407d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}