{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a7a44efc_0e1ee59c",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 774,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-09-08T01:21:11Z",
      "side": 1,
      "message": "I\u0027m curious and probably out of my element here but ... the specs (GLES/EGL) seem to say the only things that guarantee changes in one context are seen in another are glFinish, vgFinish, eglWaitClient, eglWaitNative, and eglBindTextImage.\n\nIs it correct that this just magically works because platformSupportsMultithreading() returnss true or should there be some extension or other method here?",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1321aeb_cb3c4a89",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 774,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-09-08T06:09:12Z",
      "side": 1,
      "message": "Sorry, I should be more clear with the test descriptions.\nThis test is about CPU read on another thread (via glMapBuffer*), it\u0027s not about GPU read on another thread such as rendering on one thread and sampling on another one.\n\nAFAIK, EGL spec only mentions using glFinish, vgFinish, eglWaitClient, eglWaitNative, and eglBindTextImage to synchronize between client API (GLES) and native APIs (e.g. Xlib, GDI, Metal, DX, CoreAnimation, etc) when they render to a same surface.\n\nFor multiple GLES contexts, it says there is no guarantee of rendering order between them. However, glMapBufferRange has implied synchronization unless `MAP_UNSYNCHRONIZED_BIT` is set.\n\nSection 2.10.3 of GLES 3.0 spec:\n\u003e If no error occurs, a pointer to the beginning of the mapped range is returned\n\u003e once all pending operations on that buffer have completed,",
      "parentUuid": "a7a44efc_0e1ee59c",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1321b93d_8786bbd6",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 774,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-08T15:30:00Z",
      "side": 1,
      "message": "One thing that\u0027s a gray area is that GLES doesn\u0027t say if \"pending operations\" pertains to other contexts. Does the GLES spec even talk about share contexts, or is that entirely specified in EGL?\n\nI\u0027ve asked for clarification: https://gitlab.khronos.org/opengl/API/-/issues/171",
      "parentUuid": "c1321aeb_cb3c4a89",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e75e7c31_58b8ad9b",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 774,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-09-08T16:09:47Z",
      "side": 1,
      "message": "Shared objects are mentioned in appendix D.3 of the ES 3.0 spec",
      "parentUuid": "1321b93d_8786bbd6",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "254654e0_615bff46",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 774,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-09-09T18:55:00Z",
      "side": 1,
      "message": "AFAICT, there is no order guarantee across contexts with `glFlush` or implied `glFlush` (eg, eglMakeCurrent). If you want to make sure one thing happens before another across contexts you\u0027re supposed to do either\n\n...modify some resources in context1\nglFinish();\neglMakeCurrent(context2);\n...rebind modified resources in context2\n...use modified resources in context2\n\nOR\n\n...modify some resources in context1\nGLsync sync \u003d glFenceSync(GL_SYNC_GPU_COMMANDS_COMPLETE, 0);\neglMakeCurrent(context2);\nglWaitSync(sync, 0, GL_TIMEOUT_IGNORED);\n...rebind modified resources in context2\n...use modified resources in context2\n\nAm I wrong? The test seems like it\u0027s not following those steps. I get that glMapBufferRange is supposed to block until the buffer is done but it\u0027s not clear to me from the spec that you can use it as a substitute for Finish/WaitSync/ClientWaitSync",
      "parentUuid": "e75e7c31_58b8ad9b",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "961d331a_8c0ff217",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 12
      },
      "lineNbr": 804,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-09-08T15:30:00Z",
      "side": 1,
      "message": "nit: please use RAII types from gl_raii.h. GLTransformFeedback here for example.",
      "revId": "de912047f7822cb1ba1bed662e4e8d4e34a5a75a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}