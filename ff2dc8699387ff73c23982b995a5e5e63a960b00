{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eeabea85_8585b835",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-03T15:45:34Z",
      "side": 1,
      "message": "Unfortunately I can not use GL formats with X as they have no mapping with any Vk format.",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "280c6597_6326fb73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-03T16:01:00Z",
      "side": 1,
      "message": "So RGBA for RGBX won\u0027t really work. ANGLE (Vulkan) goes to great lengths to make sure the A channel always return 1.0, and is never clobbered. Replacing it with RGBA can cause havoc, including making the DRM image look transparent, or with blending etc.\n\nWe added ANGLE_rgbx_internal_format.txt to make GL_RGBX8_ANGLE an official format. I think it\u0027s only supported by the Vulkan backend, was the problem GL? We can also add another extension for GL_BGRX8_ANGLEX if necessary.\n\nFYI, we used RGB8 before because on Vulkan it implicitly always became RGBX8 under the hood (but that\u0027s no longer true on ARM).",
      "parentUuid": "eeabea85_8585b835",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fefecea0_e283c2f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-05T13:30:18Z",
      "side": 1,
      "message": "Thanks for the explanation. The issue I encounter is that I can\u0027t import a DRM_FORMAT_XBGR8888 using a VK_FORMAT_R8G8B8_UNORM.\n\nI can add a mapping in `vk_format_map.json` such as:\n\n```\n  \"R8G8B8X8_UNORM\": \"VK_FORMAT_R8G8B8A8_UNORM\",\n  \"B8G8R8X8_UNORM\": \"VK_FORMAT_B8G8R8A8_UNORM\",\n```\n\nHaving care to only include this in `GetVkFormatFromFormatID(..)` while excluding it from `GetFormatIDFromVkFormat()` or we would end up with duplicate case value here.\n\n```\n  case VK_FORMAT_R8G8B8A8_UNORM:\n   return angle::FormatID::R8G8B8A8_UNORM;\n  case VK_FORMAT_R8G8B8A8_UNORM:\n   return angle::FormatID::R8G8B8X8_UNORM;\n```",
      "parentUuid": "280c6597_6326fb73",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "001b478a_03d298e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-05T14:34:53Z",
      "side": 1,
      "message": "I updated the CL implementing this idea. Let me know what you think.",
      "parentUuid": "fefecea0_e283c2f2",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318e2838_d216b59e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T15:28:21Z",
      "side": 1,
      "message": "`DRM_FORMAT_XBGR8888` should definitely not be `VK_FORMAT_R8G8B8_UNORM`, it should be `VK_FORMAT_R8G8B8A8_UNORM` under the hood, as long as ANGLE knows that the A channel is \"emulated\".\n\nSo what I don\u0027t understand why you even needed to add anything to the format map. Those formats are already there (under the `\"fallbacks\"` entry, because they are not directly mapped to a Vulkan format).\n\nIn fact, if you look at `vk_format_table_autogen.cpp`, you\u0027d see that the two formats were already there with the correct fallback:\n\n```\ncase angle::FormatID::R8G8B8X8_UNORM:\n    mIntendedGLFormat              \u003d GL_RGBX8_ANGLE;\n    mActualSampleOnlyImageFormatID \u003d angle::FormatID::R8G8B8A8_UNORM;\n\ncase angle::FormatID::B8G8R8X8_UNORM:\n    mIntendedGLFormat              \u003d GL_BGRX8_ANGLEX;\n    mActualSampleOnlyImageFormatID \u003d angle::FormatID::B8G8R8A8_UNORM;\n```\n\nI see that your change adds `angle::FormatID::B8G8R8X8_UNORM` as a possibly valid format for `angle::FormatID::B8G8R8X8_UNORM` for example. My feeling is that that format would (or should) be rejected in `initImageFallback` and the format we already have (`angle::FormatID::R8G8B8A8_UNORM`) is (or should be) selected anyway.\n\nWhat exactly went wrong when you didn\u0027t make the `vk_format_map.json` change?",
      "parentUuid": "001b478a_03d298e1",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4f3ab6_30334c8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-05T15:38:28Z",
      "side": 1,
      "message": "\u003e What exactly went wrong when you didn\u0027t make the vk_format_map.json change?\n\nI hit a failure in `ImageHelper::initExternal()` when it calls `GetVkFormatFromFormatID(angle::FormatID::R8G8B8X8_UNORM)` as there is no entry with such a key.",
      "parentUuid": "318e2838_d216b59e",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efc48472_b7675fe9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T15:45:28Z",
      "side": 1,
      "message": "Ok that\u0027s weird, I think we are not support to ever call that function with `R8G8B8X8_UNORM`, because well there\u0027s no Vulkan equivalent for it.\n\nWhere does that value come from? Because the way it\u0027s intended, is to have the vk::Format equivalent of `R8G8B8X8_UNORM` return `R8G8B8A8_UNORM` as the image format.\n\nActually I think I know what the issue might be. Somewhere in the stack trace, some code is calling `vk::Format::getIntendedFormat()` instead of `vk::Format::getActualImageFormat()`",
      "parentUuid": "2f4f3ab6_30334c8a",
      "revId": "ff2dc8699387ff73c23982b995a5e5e63a960b00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}