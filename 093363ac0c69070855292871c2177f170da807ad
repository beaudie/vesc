{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9b91c34_72a33e81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-25T20:06:58Z",
      "side": 1,
      "message": "Curious, why not directly optimize Matrix implementation, is it not feasible? I thought most of the optimization here is avoid memory allocation asscoiated with std::vector, which should easily fixable by reserve space ahead of time?",
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce30285a_c3b428a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-25T20:09:52Z",
      "side": 1,
      "message": "FYI, `Matrix` is only used by the translator, and needs flexibility in dimensions. `Mat4` is used by GLES1 (a _lot_).",
      "parentUuid": "f9b91c34_72a33e81",
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af035c1b_dc489ca2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-25T20:15:08Z",
      "side": 1,
      "message": "Yeah I started messing with Matrix\u003c\u003e first but then ran into this:\nhttps://crsrc.org/c/third_party/angle/src/compiler/translator/IntermNode.cpp;drc\u003d58b8aff108cb11d3755f4cc18efa10f971be9682;l\u003d130",
      "parentUuid": "f9b91c34_72a33e81",
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ff750f_0a7915c2",
        "filename": "src/common/matrix_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-25T20:09:02Z",
      "side": 1,
      "message": "nit: `CofactorTransposed`, and move implementation to cpp (and drop `ANGLE_INLINE`). We shouldn\u0027t need to enforce inling on something this big.\n\nFYI, `Matrix`\u0027s inverse is basically only used by the translator when a constant matrix is inversed. It\u0027s basically practically never called, so not worth the binary size bloat.",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef4ac0aa_acceac39",
        "filename": "src/common/matrix_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-25T20:15:08Z",
      "side": 1,
      "message": "I think we want this inlined into Mat4::inverse (note that inverse itself may or may not be inlined)\n\nNot sure about moving to cpp, I think that forces to *not* inline Mat4::inverse which would affect gles1?",
      "parentUuid": "94ff750f_0a7915c2",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86d2c839_4fde04d9",
        "filename": "src/common/matrix_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-25T20:28:40Z",
      "side": 1,
      "message": "Have you measured if inlining it makes things any faster? Inline is really only useful for super tiny functions, and the perf improvement is not even about the cost of a function call. It\u0027s about the freedom the compiler gets w.r.t register allocation, and not having to store/restore registers.\n\nA function this big is going to use up most/all registers, and if it\u0027s inlined in some code that might `if`-jump over it, will just hurt the instruction cache usage. Not to mention stack trace (like during crash/etc) from inlined function is harder to diagnose.\n\nSo, unless data shows actual improvements, don\u0027t inline on a hunch. Compilers and CPUs are too complicated for hunches!",
      "parentUuid": "ef4ac0aa_acceac39",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa6e5fa9_7b83d72d",
        "filename": "src/common/matrix_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-25T21:12:18Z",
      "side": 1,
      "message": "The reason I made it inline: it _was_ inline before this CL.\n\nI dropped the inline but can\u0027t move to cpp because `Matrix\u003cT\u003e::inverse` is a template function so it needs to be in `.h` and `cofactor_transposed` is also a template function.",
      "parentUuid": "86d2c839_4fde04d9",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6a346d1_b40e222c",
        "filename": "src/common/matrix_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-25T22:22:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fa6e5fa9_7b83d72d",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 37
      },
      "revId": "093363ac0c69070855292871c2177f170da807ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}