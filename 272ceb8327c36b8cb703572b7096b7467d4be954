{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3889841e_833d5f02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-01-30T22:49:55Z",
      "side": 1,
      "message": "\"LGTM\". Should I be Code-Review+1ing or leave that to someone else?",
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e15eea7c_20d5e72e",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-01-30T22:49:55Z",
      "side": 1,
      "message": "Just to check my basic understanding, by default this extension is disabled for users of Angle (e.g. renderer processes), but this Display class is only available to the browser process so the browser can request the ANGLEWebgpu platform?",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c20af6ab_de5aadf2",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-30T23:01:37Z",
      "side": 1,
      "message": "As far as ANGLE is concerned, any application can create an EGL instance with the WebGPU backend. It\u0027s up to Chrome to create its EGL instance in the browser process and not the renderer process. There\u0027s nothing stopping Chrome for example to create an EGL instance with the WebGPU backend in the renderer process too, if it ever thinks it\u0027s a good idea.",
      "parentUuid": "e15eea7c_20d5e72e",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fba68f_b554c29a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-01-30T23:05:42Z",
      "side": 1,
      "message": "Just checking though, the renderer can\u0027t just create an EGL instance itself right?",
      "parentUuid": "c20af6ab_de5aadf2",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abd6d049_90336476",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-01-30T23:07:36Z",
      "side": 1,
      "message": "Is the \"EGL instance\" in this case like a file descriptor or a random ID or something?",
      "parentUuid": "b1fba68f_b554c29a",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8b74165_898af0ea",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-31T02:16:44Z",
      "side": 1,
      "message": "\u003e Just checking though, the renderer can\u0027t just create an EGL instance itself right?\n\nUnless something stops it (like sandbox), there is no reason why it couldn\u0027t. I don\u0027t honestly know if _today_ that\u0027s somehow blocked, or it\u0027s just that no code in that process tries.\n\n\u003e Is the \"EGL instance\" in this case like a file descriptor or a random ID or something?\n\nSorry the \"EGL instance\" was probably not the right term. It\u0027s a \"display\" the app creates, then initializes it, and create contexts out of it. That would be the first calls in https://registry.khronos.org/EGL/sdk/docs/man/html/eglIntro.xhtml\n\nSo in this case, the \"display\" would be an opaque `EGLDisplay` type that could take a value as the driver fits. ANGLE simply uses the gl::Display object pointer cast to `EGLDisplay`.",
      "parentUuid": "abd6d049_90336476",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "340cd7ab_e0e5bcd0",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1516597
      },
      "writtenOn": "2024-01-31T17:06:09Z",
      "side": 1,
      "message": "\u003e Unless something stops it (like sandbox), there is no reason why it couldn\u0027t. I don\u0027t honestly know if today that\u0027s somehow blocked, or it\u0027s just that no code in that process tries.\n\nSo presumably if Chrome wanted to have more control over which backend instance is used, and whether a renderer can pick and choose the backend, that would be something it (Chrome) would have to implement, right? \n\nRelated follow up: this isn\u0027t unique to EGL or ANGLE correct? In the sense that say, Skia also offers several backends and in theory a renderer could also create a Skia display with whatever backend unless Chrome is explicitly preventing it.",
      "parentUuid": "c8b74165_898af0ea",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90e279fc_47d09dc3",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2128,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-31T18:46:13Z",
      "side": 1,
      "message": "\u003e So presumably if Chrome wanted to have more control over which backend instance is used, and whether a renderer can pick and choose the backend, that would be something it (Chrome) would have to implement, right?\n\nYes, that\u0027s exactly what the extension you added here is for! That\u0027s something Chrome already does, for example select between Vulkan and OpenGL on Linux based on a command line flags, Finch flags etc. That\u0027s done in the GPU process today. Once in the renderer process, I guess it\u0027ll just be hardcoding the backend to WebGPU.\n\n\u003e Related follow up: this isn\u0027t unique to EGL or ANGLE correct? In the sense that say, Skia also offers several backends and in theory a renderer could also create a Skia display with whatever backend unless Chrome is explicitly preventing it.\n\nThat\u0027s right, though the mechanisms are different per library. ANGLE\u0027s an EGL implementation, so we expose the backends as EGL extensions. I don\u0027t know what knob Skia has for it.",
      "parentUuid": "340cd7ab_e0e5bcd0",
      "range": {
        "startLine": 2128,
        "startChar": 15,
        "endLine": 2128,
        "endChar": 34
      },
      "revId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "272ceb8327c36b8cb703572b7096b7467d4be954",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}