{
  "comments": [
    {
      "key": {
        "uuid": "233b83e0_3bb60395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2020-08-06T00:12:33Z",
      "side": 1,
      "message": "This is first iteration of adding debug utils labels into VK command stream to include the OpenGL commands.\n\nMost of the code changes are from codegen modification that touches all GL entrypoints.\n\nThe feature is #defined off by default and turned on w/ GN arg \"angle_enable_gl_vk_api_mapping \u003d true\".\n\nThere\u0027s a block of memory in the gl::Context where gl commands are written to by the new code-gen\u0027d calls in the GL entrypoints. I tried re-using the existing macro but b/c the string of commands is being appended to and persists, the gl::Context seemed like a reasonable place to store it.\n\n\nWhen a draw call is reached, a vkCmdInsertDebugUtilsLabelEXT() call is made that includes a label with a string of all the OpenGL calls up to that point.\n\nBecause the gl::Context is always treated as const in the VK backend, I\u0027m currently resetting the GL string in the gl::Context draw call points after its been recorded in the VK implementation.\n\nNone of this is perfect but it\u0027s a good start.\n\nWould be nice to land some form of this disabled, as the codegen can lead to conflicts so will simplify merges once it\u0027s landed.\n",
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc374e85_309e7a8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-06T14:40:25Z",
      "side": 1,
      "message": "This requires a special ANGLE build to get the functionality. Is that what we want?\nSeems like this could be implemented in an OpenGL layer. Well mostly, need to use an OpenGL extension to send down the debug string. Having it be a layer would allow AGI to include it for any ANGLE build.",
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9461fb49_a86bd0bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-06T14:43:25Z",
      "side": 1,
      "message": "+ Shabi\u0027s comments of course.",
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97291ce7_2686e5bc",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 6
      },
      "lineNbr": 8425,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T03:01:38Z",
      "side": 1,
      "message": "Unnecessary if using std::string. Otherwise might as well delete it. On overflow just keeping the message truncated sounds more useful to me.",
      "range": {
        "startLine": 8419,
        "startChar": 0,
        "endLine": 8425,
        "endChar": 5
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d335a67_cd5087e4",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 6
      },
      "lineNbr": 8425,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-06T14:43:25Z",
      "side": 1,
      "message": "I suspect that there is a limit to the size of the payload that we can store in the system trace.",
      "parentUuid": "97291ce7_2686e5bc",
      "range": {
        "startLine": 8419,
        "startChar": 0,
        "endLine": 8425,
        "endChar": 5
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0638995_466faaed",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 6
      },
      "lineNbr": 635,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T03:01:38Z",
      "side": 1,
      "message": "Please use ANGLE_FORMAT_PRINTF to make sure the compiler validates parameters to this function.",
      "range": {
        "startLine": 635,
        "startChar": 28,
        "endLine": 635,
        "endChar": 51
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19b092ce_f9c3a1cc",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 6
      },
      "lineNbr": 795,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T03:01:38Z",
      "side": 1,
      "message": "Just use a std::string?",
      "range": {
        "startLine": 794,
        "startChar": 0,
        "endLine": 795,
        "endChar": 29
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f4f49d_aa156b78",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1060,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T03:01:38Z",
      "side": 1,
      "message": "Not a valid color. Description of VkDebugUtilsLabelEXT says passing all 0s \u003d\u003d ignore, maybe that\u0027s what you want?",
      "range": {
        "startLine": 1060,
        "startChar": 39,
        "endLine": 1060,
        "endChar": 61
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991a4f55_c84d6cca",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1063,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T03:01:38Z",
      "side": 1,
      "message": "Might as well add it for `setupDispatch` too while you\u0027re at it.",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1063,
        "endChar": 6
      },
      "revId": "317b2d358c942db417d61257cc460e1af57eeca7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}