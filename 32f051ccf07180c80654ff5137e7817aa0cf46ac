{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9f90c3e9_7068ba17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-01T20:10:13Z",
      "side": 1,
      "message": "not sure who to ask for a review. The code is metal related but the changes really don\u0027t touch much metal code directly.",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf9969ef_eb73a52d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T21:12:28Z",
      "side": 1,
      "message": "Awesome work Gregg! lgtm with a couple of small comments.\n",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b09f0eee_5ca5a28c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T21:38:20Z",
      "side": 1,
      "message": "CC\u0027ing more people.\n",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30d8737c_34fa5fa6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T22:00:32Z",
      "side": 1,
      "message": "As Kyle pointed out on Slack - if there\u0027s an issue where Depth32F isn\u0027t filterable on all hardware but Depth16Unorm is - is there another upgrade path (perhaps to Depth24Unorm?) which would preserve filterability and also work around the depth bias bug?\n",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd6e9774_b6ba70b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-01T22:40:54Z",
      "side": 1,
      "message": "There is no depth24Unorm. I guess maybe we just have to live with the bug until Apple fixes it? Looking at the chart, there is no depth format on iOS that\u0027s filterable except depth16Unorm. (well, not sure what Cataylst is. Maybe that\u0027s M1?) We could make this desktop only or only on GPUs that support it. That would still leave iOS with the bug.\n\nhttps://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf",
      "parentUuid": "30d8737c_34fa5fa6",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7862c4bc_73cdcb71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2021-11-01T22:57:34Z",
      "side": 1,
      "message": "Catalyst in this case is iOS on Mac apps, it\u0027s a separate SDK. \nThat being said, we already disallow all depth filtering on iOS. I\u0027m working on a fix for that. Is there any chance that\u0027s the root cause of the issue?",
      "parentUuid": "bd6e9774_b6ba70b6",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eced950b_239de23d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T23:07:59Z",
      "side": 1,
      "message": "Gregg:\n\u003e There is no depth24Unorm.\n\nApologies for misspeaking. I didn\u0027t look at the full search result for https://developer.apple.com/documentation/metal/mtlpixelformat/mtlpixelformatdepth24unorm_stencil8 .\n\n\u003e We could make this desktop only or only on GPUs that support it.\n\u003e That would still leave iOS with the bug.\n\nCould you try limiting this conversion to desktop only? I don\u0027t know how that\u0027d be done in the json files. On the whole, I think people are less likely to find that polygon offset is broken on iOS, and more likely to see that their depth textures are no longer filterable.\n\nKyle:\n\u003e That being said, we already disallow all depth filtering on iOS.\n\u003e I\u0027m working on a fix for that. Is there any chance that\u0027s the root cause\n\u003e of the issue?\n\nProbably not since these test failures are happening on macOS.",
      "parentUuid": "7862c4bc_73cdcb71",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a24ce634_aa50b80e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-01T23:21:01Z",
      "side": 1,
      "message": "The root cause is a metal bug where setDepthBias does\u0027t work correctly for depth16Unorm. I gave Ken a small metal only repo to file with Apple.",
      "parentUuid": "eced950b_239de23d",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d8a466_79655009",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2021-11-02T00:31:03Z",
      "side": 1,
      "message": "ES 3.0 doesn\u0027t require depth textures to be filterable (at least I don\u0027t see it being mentioned).\nhttps://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glTexStorage2D.xhtml\nOnly OES_depth_texture extension (ES2.0 extension) does.\n\nOn iOS,`D16_UNORM` is already overridden to `D32_FLOAT` because previously it was not supported, Apple only added `D16_UNORM` support since iOS 13.0 last year. In fact, before iOS 13.0, none of iOS\u0027s depth formats support filtering. Here in Apple\u0027s docs, they also say pre-A8 GPUs have bugs with depth bias using this `D16` format:\nhttps://developer.apple.com/documentation/metal/mtlpixelformat/mtlpixelformatdepth16unorm?language\u003dobjc\n\nbtw, I don\u0027t think filtering on depth textures are useful (filtering here refers to bilinear + anisotropic, etc). The only thing useful should be hardware doing the some kinds of PCF on depth comparisons for us. I don\u0027t think this PCF is referred as filtering in Apple features table. Otherwise none of their iOS devices prior to iOS 13.0 would work correctly.",
      "parentUuid": "a24ce634_aa50b80e",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c56e9b93_bce7551a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-02T18:10:28Z",
      "side": 1,
      "message": "depth textures are required to be filterable \n\nOpenGL ES 3.0.6 section 3.8.8\n\n\u003e Depth Component Textures\n\u003e \n\u003e Depth textures and the depth components of depth/stencil textures can be\n\u003e treated as RED textures during texture filtering and application.",
      "parentUuid": "36d8a466_79655009",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1593c259_04575857",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2021-11-02T19:15:23Z",
      "side": 1,
      "message": "This is a bit confusing. The term filtering and filterable in the spec might not be the same IMO. From my understanding, filterable means it supports filtering mode other than GL_NEAREST.\n\nES 3.0 spec has these paragraphs in section 3.8.13 Texture Completeness. A texture is considered incomplete if either: \n\u003e The effective internal format specified for the texture arrays is a sized internal color format that is not texture-filterable (see table 3.13), and either\n\u003e the magnification filter is not NEAREST or the minification filter is neither\n\u003e NEAREST nor NEAREST_MIPMAP_NEAREST.\n\n\u003e The effective internal format specified for the texture arrays is a sized\n\u003e internal depth or depth and stencil format (see table 3.14), the value of\n\u003e TEXTURE_COMPARE_MODE is NONE, and either the magnification filter is\n\u003e not NEAREST or the minification filter is neither NEAREST nor NEAREST_MIPMAP_NEAREST.\n\n\nSo the ES 3.0 spec does say depth textures must use GL_NEAREST filtering mode (equivalent to not filterable at all to me)",
      "parentUuid": "c56e9b93_bce7551a",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b29af867_750e32b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2021-11-02T19:21:45Z",
      "side": 1,
      "message": "\"nearest\" is already supported by Metal for every format:\n\u003e All graphics and compute functions can read or sample from any texture,\n\u003e regardless of its pixel format\".\nhttps://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf\n\nBefore iOS 13.0, `D16` was not supported on iOS devices, if the depth textures hadn\u0027t supported sampling even with nearest filtering mode, no shadow map algorithms would have worked.",
      "parentUuid": "1593c259_04575857",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae18f4cd_9f6b9cd6",
        "filename": "src/image_util/loadimage.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1721,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T21:12:28Z",
      "side": 1,
      "message": "Can a comment be left here that the unorm16-\u003e32f and unorm32-\u003e32f upgrades are being done because of anglebug.com/6597 ? That way other people coming across these would understand that they\u0027re mainly a workaround.",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b26df9ca_f8e157cd",
        "filename": "src/image_util/loadimage.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1721,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-02T00:29:31Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "ae18f4cd_9f6b9cd6",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "252d608e_89d9b6c8",
        "filename": "src/libANGLE/renderer/load_functions_data.json",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T21:12:28Z",
      "side": 1,
      "message": "I wish JSON supported comments so that a breadcrumb could be left here indicating that these are workarounds for bugs in Metal.",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbbe161a_7daf2a7b",
        "filename": "src/libANGLE/renderer/load_functions_data.json",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-01T22:40:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "252d608e_89d9b6c8",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a167e05_7af63513",
        "filename": "src/libANGLE/renderer/metal/mtl_format_map.json",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-11-01T21:12:28Z",
      "side": 1,
      "message": "Similarly I wish there were a way here to indicate that this upgrade is a workaround.",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7b8b0be_b747cd5c",
        "filename": "src/libANGLE/renderer/metal/mtl_format_map.json",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-11-01T22:40:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a167e05_7af63513",
      "revId": "32f051ccf07180c80654ff5137e7817aa0cf46ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}