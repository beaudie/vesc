{
  "comments": [
    {
      "key": {
        "uuid": "edba4936_2f806994",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1168,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-22T12:31:17Z",
      "side": 1,
      "message": "Could change this to \"Do all/any operations where the return type is different from the operand type\"",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad1771fa_5e058940",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1168,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T13:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edba4936_2f806994",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0db87d3c_f0eac071",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1183,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-22T12:31:17Z",
      "side": 1,
      "message": "I think you\u0027re missing tempConstArray-\u003esetBConst(false); here. Also if you move the VectorLogicalNot together with the rest of the unary ops, you can share new TConstantUnion() between EOpAny and EOpAll.",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed05e9c3_9a59e9e3",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1183,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T13:11:24Z",
      "side": 1,
      "message": "Done. I could not share TConstantUnion() as EbtBool check is now moved inside a condition and I should allocate it only when it is EbtBool. Earlier we were early returning if it is not EbtBool because this block was specially for vector relational operators but now there could be other non-bool operators as well",
      "parentUuid": "0db87d3c_f0eac071",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed05e9c3_dacc010b",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1183,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T13:39:01Z",
      "side": 1,
      "message": "Actually, constant union gets initialized to zero in it\u0027s constructor so it could have been OK to not set it to false here. Anyways it now looks looks better with explicit initialization.",
      "parentUuid": "ed05e9c3_9a59e9e3",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdf3c519_6dfc2137",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1183,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-25T12:51:56Z",
      "side": 1,
      "message": "Reading a different field from an union than what\u0027s been written may result in undefined behavior according to some interpretations of the C++ standard. I don\u0027t know how likely problems are in practice, but it\u0027s still better to avoid this.",
      "parentUuid": "ed05e9c3_dacc010b",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2db1c157_11402c13",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1208,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-22T10:59:23Z",
      "side": 1,
      "message": "Is there any reason why VectorLogicalNot needs to be in this special case? Since it doesn\u0027t return an object with a different size, couldn\u0027t it be together with the rest of the unary operations?",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed05e9c3_fa23c55d",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1208,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T11:46:40Z",
      "side": 1,
      "message": "I preferred to keep all unary vector relational operators in a group together rather than having two here and then one below just to reuse code. And that way I felt code also looks better. This way I could also reuse some of the that applies to all three. isVector assert, condition !\u003d EbtBool, setting return type, etc.\n\nI can change this if you would prefer to have it the way you suggested, let me know.",
      "parentUuid": "2db1c157_11402c13",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0db87d3c_70fff02c",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1208,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-22T12:31:17Z",
      "side": 1,
      "message": "I think I\u0027d prefer to have this together with the rest of the unary operations. You can actually reuse the logic for setting the return type that\u0027s already in there, and I don\u0027t think that the isVector assert is strictly necessary. Also see other comments.",
      "parentUuid": "ed05e9c3_fa23c55d",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad1771fa_be32dd21",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1208,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T13:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0db87d3c_70fff02c",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0db87d3c_50fc6c36",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1221,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-05-22T12:31:17Z",
      "side": 1,
      "message": "Could change this to \"Do unary operations where the return type is the same as operand type\"",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed05e9c3_3a69bd6c",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1221,
      "author": {
        "id": 1121008
      },
      "writtenOn": "2015-05-22T13:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0db87d3c_50fc6c36",
      "revId": "be115cc6be7e59aa0b55de94d1bd84e5ac70f724",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}