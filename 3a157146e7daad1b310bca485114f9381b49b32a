{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e295ac10_e0ab9330",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-02-22T01:02:55Z",
      "side": 1,
      "message": "I defer to Shabi\u0027s review, but a couple of questions came to mind while I was looking at this.",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d42157d8_4c5e038c",
        "filename": "src/compiler/translator/tree_ops/SeparateStructFromFunctionDeclarations.cpp",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-02-22T01:02:55Z",
      "side": 1,
      "message": "Do we always want to do this work even if the structure had a name? I\u0027m wondering if the if-test above should be something like:\n\n```\n  if (!structure-\u003esymbolType() !\u003d SymbolType::Empty)\n      return;\n```",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17dd4931_7818c8f6",
        "filename": "src/compiler/translator/tree_ops/SeparateStructFromFunctionDeclarations.cpp",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1546942
      },
      "writtenOn": "2024-02-22T02:50:22Z",
      "side": 1,
      "message": "I defer to Shahbaz.",
      "parentUuid": "d42157d8_4c5e038c",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70c20a96_fd1c2a20",
        "filename": "src/compiler/translator/tree_ops/SeparateStructFromFunctionDeclarations.cpp",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-22T15:51:09Z",
      "side": 1,
      "message": "Probably not a bad idea to always make this separation. Fewer pitfalls for future transformations.\n\nLike, I have no idea if the transformation that pulls samplers out of structs works for structs defined in return types (don\u0027t know if that\u0027s even possible, but if it is possible, it\u0027s very likely broken). This change would make sure such transformations never have to worry about this.",
      "parentUuid": "17dd4931_7818c8f6",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d317b320_8bc8b877",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18733,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-02-22T01:02:55Z",
      "side": 1,
      "message": "Great tests. Is it worth adding a test verifying that an out-of-line struct definition as a function return type, which theoretically the above transform shouldn\u0027t need to touch, works too?\n\n```\nstruct Foo { float v; };\nFoo foo()\n{\n    // ...\n}\n```",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "385d757c_b6407ae5",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 18733,
      "author": {
        "id": 1546942
      },
      "writtenOn": "2024-02-22T02:50:22Z",
      "side": 1,
      "message": "I can add it for completeness.",
      "parentUuid": "d317b320_8bc8b877",
      "revId": "3a157146e7daad1b310bca485114f9381b49b32a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}