{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0ab137ab_6af6b9b0",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-02T14:16:25Z",
      "side": 1,
      "message": "The switch to ES3 uncovered an AST transformation (InitializeVariables) that looks up globals in the symbol table by name. So when we rewrote fragment out/inout variables to specify `location`, this would fail.\n\nI don\u0027t know what the preferred resolution would be, but for now, this is a proof of concept that shows the issue is understood and solvable.",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "110356ed_353aa555",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T17:41:38Z",
      "side": 1,
      "message": "Can you make `InitializeVariables` skip over these variables?",
      "parentUuid": "0ab137ab_6af6b9b0",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1e1eee2_a4cd25de",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-04T17:56:24Z",
      "side": 1,
      "message": "So `InitializeVariables` already skips the `inout` PLS variables.\n\nThe problem here is when a shader has a single output, `out vec4 color`, and this transformation has to rewrite it to `layout(location \u003d 0) out vec4 color` (since after we add outputs, `location` becomes required on that original output). In this case, I think `InitializeVariables` can\u0027t skip that output, right? (Unless we take care of initializing it here.)",
      "parentUuid": "110356ed_353aa555",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ce931e_56547b69",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T22:09:06Z",
      "side": 1,
      "message": "That\u0027s not ideal, but a reasonable workaround. So to recap:\n\n- Init the variable during transformation, if `InitializeVariables` was necessary\n- Skip init in `InitializeVariables` for that variable.\n\n---\n\nThe real fix IMO is to have `InitializeVariables` iterate on the declarations itself, instead of using the collected (and possibly transformed) `ShaderVariable`s, that\u0027s a recipe for bugs like this.\n\nYour alternative solution is to make sure the PLS transformations are done _after_ `InitializeVariables`. Would that work?",
      "parentUuid": "b1e1eee2_a4cd25de",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "134e545d_ae960b5e",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-04T23:43:38Z",
      "side": 1,
      "message": "Transforming after `InitializeVariables` wouldn\u0027t work for now. Currently the PLS transformations need to run before collecting variables.\n\nHere\u0027s another idea. Vulkan doesn\u0027t actually care if this has `layout(location\u003d0)`, right? Does only ESSL care? The ESSL backed could just always emit `location\u003d0` if location is unspecified and it knows pixel local storage is enabled. Is that too hacky?\n\n\u003e Skip init in InitializeVariables for that variable.\n\nHow would it know to skip initialization? An internal layout qualifier flag or something?",
      "parentUuid": "b1e1eee2_a4cd25de",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "284f037a_bedbfbb3",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-05T13:41:30Z",
      "side": 1,
      "message": "\u003e How would it know to skip initialization? An internal layout qualifier flag or something?\n\nNo, something more basic, like \"if not in symbol table, and is color output, and is PLS active\", skip it.\n\n\u003e Does only ESSL care?\n\nMaybe? Emitting location\u003d0 unconditionally is perfectly fine IMO, or at least conditional to PLS being active in case it causes problems with ES100 shaders.",
      "parentUuid": "134e545d_ae960b5e",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ba6c85_950294fc",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-05T20:10:00Z",
      "side": 1,
      "message": "\u003e Maybe? Emitting location\u003d0 unconditionally is perfectly fine IMO, or at least conditional to PLS being active in case it causes problems with ES100 shaders.\n\nAdded some logic to always emit `location` when PLS is active. To me it feels solid still, maybe not the most ideal, but better than mutating the symbol table.",
      "parentUuid": "284f037a_bedbfbb3",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12be1870_ca639d8a",
        "filename": "src/compiler/translator/SymbolTable.h",
        "patchSetId": 18
      },
      "lineNbr": 279,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-05T21:18:24Z",
      "side": 1,
      "message": "LGTM!",
      "parentUuid": "89ba6c85_950294fc",
      "revId": "69c8e74a9039bfa7f342e77dd7610796c5112544",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}