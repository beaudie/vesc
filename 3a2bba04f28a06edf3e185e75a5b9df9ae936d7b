{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "502d3519_07fc417d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-10-03T23:53:01Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b86713a1_3ae42226",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-04T04:12:54Z",
      "side": 1,
      "message": "Hey Yuxin, thanks for working on this!\n\nI have some questions/requests below.  Also, can you add a case to ImageTest.cpp similar to the other AppTraceExternal tests?",
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a3cd8e0_70d0f6e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-05T00:01:12Z",
      "side": 1,
      "message": "Can I ask which `AppTraceExternal` are you referring to?",
      "parentUuid": "b86713a1_3ae42226",
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4601ba7_75d41a23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-06T04:44:11Z",
      "side": 1,
      "message": "Sure, sorry for the confusing. I was trying to point out these two tests, which were added over the summer to facilitate EGL work:\n```\nTEST_P(ImageTest, AppTraceExternalTextureUseCase)\nTEST_P(ImageTest, AppTraceExternalTextureWithAHBUseCase)\n```\nI was thinking you could add a test that different attribs to hit the new code.",
      "parentUuid": "8a3cd8e0_70d0f6e8",
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc487307_44d04c17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-07T02:16:32Z",
      "side": 1,
      "message": "I see. The new code will be hit with the existing test. The difficulty is how we verify if the attribs retrieved matches with what the original gl calls use. Let me think about it.",
      "parentUuid": "b4601ba7_75d41a23",
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cd4841a_71d18da7",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3702,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-10-03T23:53:01Z",
      "side": 1,
      "message": "nit: Camel case?",
      "range": {
        "startLine": 3702,
        "startChar": 38,
        "endLine": 3702,
        "endChar": 55
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f77dca11_5b12b203",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3702,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "Thanks for catching this! I have removed this variable.",
      "parentUuid": "9cd4841a_71d18da7",
      "range": {
        "startLine": 3702,
        "startChar": 38,
        "endLine": 3702,
        "endChar": 55
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e265b848_f0788fc2",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3705,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-04T04:12:54Z",
      "side": 1,
      "message": "Should this ever happen, or can we assert that we have it?\n`ASSERT(eglImageIter !\u003d textureToImageMap.end()`\n\nIf we can remove all the if checks, this code simplifies quite a bit.",
      "range": {
        "startLine": 3705,
        "startChar": 24,
        "endLine": 3705,
        "endChar": 63
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3a8a6ea_36646621",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3705,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "I have changed all the if checks to ASSERT, assuming we always have a non-empty attribute list when calling `eglCreateImage()` or `eglCreateImageKHR()`",
      "parentUuid": "e265b848_f0788fc2",
      "range": {
        "startLine": 3705,
        "startChar": 24,
        "endLine": 3705,
        "endChar": 63
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a129a732_8eeba703",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3705,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-06T04:44:11Z",
      "side": 1,
      "message": "I checked the spec and it is possible for attrib_list to be null:\n\n*If attrib list is non-NULL, the last attribute specified in the list must be EGL_NONE*\n\nI don\u0027t know how likely it is in practice.  Probably a good test case to add.\n\nIf no attribs were provided, I think we\u0027d want to keep attrib_list as null when recreating the call.  You could do that rather than using the default attribs.",
      "parentUuid": "f3a8a6ea_36646621",
      "range": {
        "startLine": 3705,
        "startChar": 24,
        "endLine": 3705,
        "endChar": 63
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d9dd7ac_bf7220ff",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3705,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-07T02:16:32Z",
      "side": 1,
      "message": "Thanks for helping checking.\n\nI added a new test case `AppTraceExternalTextureUseCaseNullAttributes`, and it turns out that in capture code, we will insert a `EGL_NONE` is the attrib_list is null: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/capture/capture_egl.cpp;l\u003d94.  \n\nThat means the attribs we retrieved with ` call.params.getParam(\"attrib_list\", ParamType::TGLint64Pointer, 4).data[0].data());` will never be nullptr, it will have at lease one `EGL_NONE`. I think this is correct, since one `EGL_NONE` is equivalent to no attribute values specified.\n\nI have removed the default attribs as well.",
      "parentUuid": "a129a732_8eeba703",
      "range": {
        "startLine": 3705,
        "startChar": 24,
        "endLine": 3705,
        "endChar": 63
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfd69f82_636b8538",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6634,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T02:23:23Z",
      "side": 1,
      "message": "nit: per ANGLE\u0027s style, we use `kFoo` to name `constexpr` objects.",
      "range": {
        "startLine": 6634,
        "startChar": 30,
        "endLine": 6634,
        "endChar": 31
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "619fe697_821bad58",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6634,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "Cody suggested I can use `reinterpret_cast\u003cconst EGLAttrib *\u003e` to convert `uint8_t` to `EGLAttrib`, instead of doing manually bit shifting, so these constexpr objects are no longer needed, but thanks for pointing it out!",
      "parentUuid": "dfd69f82_636b8538",
      "range": {
        "startLine": 6634,
        "startChar": 30,
        "endLine": 6634,
        "endChar": 31
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cf2239_454b04d3",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6647,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-04T04:12:54Z",
      "side": 1,
      "message": "Is it possible to pull in `egl::AttributeMap` here to make this simpler?  You can see how it is used in `capture_egl.cpp`.  I can see it has a constructor that takes `EGLint*`.  Maybe the `TGLint64Pointer` can be cast to the right type, then construct the map?  If we need to enhance the class to handle this data, we can do that.",
      "range": {
        "startLine": 6647,
        "startChar": 0,
        "endLine": 6647,
        "endChar": 69
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8fef40c_6d7caa3f",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6647,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "Thank you Cody. Using `EGLint*` doesn\u0027t work because it will combine each 4 elements in the `ParamData[0]` into one `EGLint`, instead of 8 elements. `reinterpret_cast\u003cconst EGLAttrib *\u003e` works.",
      "parentUuid": "a8cf2239_454b04d3",
      "range": {
        "startLine": 6647,
        "startChar": 0,
        "endLine": 6647,
        "endChar": 69
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3899e9a_168e394e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6664,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-10-03T23:53:01Z",
      "side": 1,
      "message": "`sizeof(uint8_t)`?",
      "range": {
        "startLine": 6664,
        "startChar": 44,
        "endLine": 6664,
        "endChar": 55
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89ec85c6_f492bd5f",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6664,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T02:23:23Z",
      "side": 1,
      "message": "`sizeof(uint8_t)` is about 8 times smaller than this ;)",
      "parentUuid": "f3899e9a_168e394e",
      "range": {
        "startLine": 6664,
        "startChar": 44,
        "endLine": 6664,
        "endChar": 55
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73254529_93abc0b6",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6664,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-10-04T02:30:10Z",
      "side": 1,
      "message": "Oops, correct :)",
      "parentUuid": "89ec85c6_f492bd5f",
      "range": {
        "startLine": 6664,
        "startChar": 44,
        "endLine": 6664,
        "endChar": 55
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20557b41_9f1df780",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6667,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-10-03T23:53:01Z",
      "side": 1,
      "message": "Suggestion: Embedding this part into a function that takes `attribs` and returns `reconstructedAttribs`?",
      "range": {
        "startLine": 6634,
        "startChar": 0,
        "endLine": 6667,
        "endChar": 17
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7edfae63_b474091e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 6667,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "As https://chromium-review.googlesource.com/c/angle/angle/+/3928212/comment/dfd69f82_636b8538/ says, this code chunk is no longer needed.",
      "parentUuid": "20557b41_9f1df780",
      "range": {
        "startLine": 6634,
        "startChar": 0,
        "endLine": 6667,
        "endChar": 17
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c259e07c_2d41e1bb",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 7
      },
      "lineNbr": 841,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-04T04:12:54Z",
      "side": 1,
      "message": "Yuxin, can we merge these into one map of maps, similar to `DefaultUniformCallsPerLocationMap`?\n\nAlso, I think we could move it to ResourceTracker for easier access.",
      "range": {
        "startLine": 840,
        "startChar": 0,
        "endLine": 841,
        "endChar": 52
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad1ff9d3_e9132e5b",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 7
      },
      "lineNbr": 841,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-04T23:59:48Z",
      "side": 1,
      "message": "I am not sure if this is doable. In `CaptureShareGroupMidExecutionSetup()`, we need to use `TextureID` as the key to find the image, and then the attribute. If we combine two maps into one map, it will have to be something like `std::map\u003cTextureID, std::map\u003cvoid*, AttributeMap\u003e\u003e`. \n\nUsually app will make calls in this sequence:\n\n```\nEGLImageKHR eglImage \u003d eglCreateImageKHR(..., AttributeMap);\nGLTexture textureID;\nglBindTexture(GL_TEXTURE_EXTERNAL_OES, textureID);\nglEGLImageTargetTexture2DOES(GL_TEXTURE_EXTERNAL_OES, eglImage);\n```\n\nDuring `eglCreateImageKHR()` call, we need to insert \u003cvoid*, AttributeMap\u003e into the map, but we don\u0027t know the `TextureID` yet. `TextureID` will only be available after the app issues the `glEGLImageTargetTexture2DOES()` call. And when `TextureID` is available, we need a way to retrieve back the eglImage and its\u0027 AttributeMap. I think we still need two maps to track the TextureID--\u003eeglImage--\u003eAttributeMap information.",
      "parentUuid": "c259e07c_2d41e1bb",
      "range": {
        "startLine": 840,
        "startChar": 0,
        "endLine": 841,
        "endChar": 52
      },
      "revId": "3a2bba04f28a06edf3e185e75a5b9df9ae936d7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}