{
  "comments": [
    {
      "key": {
        "uuid": "55c566db_86287bf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-04T06:54:54Z",
      "side": 1,
      "message": "PTAL",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd64e203_9872f093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "Neat!",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5889c454_409dcf2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-06T00:34:07Z",
      "side": 1,
      "message": "Almost forgot to tell you. RenderTargetVk keeps the levelGL/layer of the image and creates views based on that. With multisampled render to texture, both the image and the resolve image have identical views for levelGL and layer. With this change though they could be different so you would need to keep two of that pair.\n\nYou can duplicate the test in this change and adapt it so that FBO 1 is for example attached to level 1 of a (e.g.) 64x64 texture and FBO 2 attached to level 2 of a 128x128 texture. With the current code, you should see failures + VVL errors.",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f3eab05_e0a106fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T16:04:07Z",
      "side": 1,
      "message": "Don\u0027t forget about this one!",
      "parentUuid": "5889c454_409dcf2e",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "200dfde4_377ae632",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T18:11:49Z",
      "side": 1,
      "message": "Just hadn\u0027t gotten to this one yet.\n\nIt looks like GLES doesn\u0027t support exactly what you\u0027re requesting:\n- Multisampled textures can\u0027t have any sampling states set with glTexParameteri(), so no GL_NEAREST_MIPMAP_NEAREST.\n- glFramebufferTexture2D() only accepts level 0 with GL_TEXTURE_2D_MULTISAMPLE, so no using a multisampled mip levels as the soure for the blit.\n\nI don\u0027t know what glGenerateMipmap(GL_TEXTURE_2D_MULTISAMPLE) is doing in this case, but I left it since it isn\u0027t hurting.   Since we can only bind level 0 to the FBO, it\u0027s probably not doing anything meaningful here though.\n\nIt also didn\u0027t require any code changes for this test to pass and there are no VVL errors.   I suspect this works for the same reason FramebufferTest_ES31::MultisampleResolveWithBlitMultipleResolves() does (FramebufferDesc forces the correct pairings).\n\nLet me know if there\u0027s something missing here.",
      "parentUuid": "2f3eab05_e0a106fa",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c456590_ba227d2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T19:07:09Z",
      "side": 1,
      "message": "Let\u0027s change that proposed test to level 0 and level 1. Level 0 for MSAA, level 1 for single-sampled.\n\nSo:\n\n- Attach FBO 1 to MSAA texture at level 0\n- Attach FBO 2 to resolve texture at level 1 (where level 1\u0027s size matches MSAA texture\u0027s level 0)\n- Trigger this optimization\n\nFBO 1\u0027s RenderTargetVk has the MSAA texture\u0027s image as mImage, the resolve texture\u0027s image as mResolveImage and has levelGL \u003d 0.\n\nWhen taking the resolve view out of the render target, the wrong level is selected for mResolveImage.",
      "parentUuid": "200dfde4_377ae632",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5555a562_c7514d85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T19:15:25Z",
      "side": 1,
      "message": "Sorry I just noticed you did do that already.\n\nMy concern is still there though, RenderTargetVk::getResolveImageView is wrong in this scenario. Need to find a way to trigger that bug.",
      "parentUuid": "3c456590_ba227d2d",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "276d42b4_38449bed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T20:58:05Z",
      "side": 1,
      "message": "RenderTargetVk::getResolveImageView() isn\u0027t called when handling a blit.",
      "parentUuid": "5555a562_c7514d85",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "378990e3_a17dd8b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T22:35:34Z",
      "side": 1,
      "message": "Don\u0027t you need to recreate the vk framebuffer given that a new resolve attachment is added where there wasn\u0027t one before?",
      "parentUuid": "276d42b4_38449bed",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2089c505_298a4e37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T22:42:08Z",
      "side": 1,
      "message": "For blits, we pass in the ImageView from the destination framebuffer to use when recreating the source framebuffer (resolveImageViewIn).   We don\u0027t use the source framebuffer render target\u0027s resolve attachments, since those resolve attachments don\u0027t have any correlation to the destination framebuffer.\n\n    // Color resolve attachments.\n    if (resolveImageViewIn)\n    {\n        ASSERT(!HasResolveAttachment(colorRenderTargets, mState.getEnabledDrawBuffers()));\n\n        // Need to use the passed in ImageView for the resolve attachment, since it came from\n        // another Framebuffer.\n[[[ blit path ]]]\n        attachments.push_back(resolveImageViewIn-\u003egetHandle());\n    }\n    else\n    {\n        // This Framebuffer owns all of the ImageViews, including its own resolve ImageViews.\n        for (size_t colorIndexGL : mState.getEnabledDrawBuffers())\n        {\n            RenderTargetVk *colorRenderTarget \u003d colorRenderTargets[colorIndexGL];\n            ASSERT(colorRenderTarget);\n\n            if (colorRenderTarget-\u003ehasResolveAttachment())\n            {\n                const vk::ImageView *resolveImageView \u003d nullptr;\n[[[ *not* blit path ]]]\n                ANGLE_TRY(colorRenderTarget-\u003egetResolveImageView(contextVk, \u0026resolveImageView));\n\n                attachments.push_back(resolveImageView-\u003egetHandle());\n\n                ASSERT(!attachmentsSize.empty());\n            }\n        }\n    }",
      "parentUuid": "378990e3_a17dd8b6",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d189b469_c523674b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "It doesn\u0027t have to have commands. If it\u0027s just open and has loadOp\u003dclear, you can still take this path.",
      "range": {
        "startLine": 1075,
        "startChar": 42,
        "endLine": 1075,
        "endChar": 65
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0877028_a118c7c5",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d189b469_c523674b",
      "range": {
        "startLine": 1075,
        "startChar": 42,
        "endLine": 1075,
        "endChar": 65
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdc248c9_f0fa2d1c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1078,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "suggest: then the multisampled render pass is already done and whose data is already flushed from the tile (in a tile-based renderer), so there\u0027s no chance for the resolve attachment to take advantage of the data already being present in the tile.\n\nChange the wording as you see fit. I think \"multisample draw has already occured\" is inaccurate; that\u0027s always true, the draw has already occurred. It\u0027s the render pass we care about. \"no longer has an opportunity to be written to\" is also inaccurate; I mean, it always has the opportunity to be written to, it\u0027s just the *how* that\u0027s the question (subpass resolve vs command)",
      "range": {
        "startLine": 1076,
        "startChar": 89,
        "endLine": 1078,
        "endChar": 46
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e52b84a_67f986e4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1078,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "I took your wording, since I trust your understanding of the details much more than my own.",
      "parentUuid": "cdc248c9_f0fa2d1c",
      "range": {
        "startLine": 1076,
        "startChar": 89,
        "endLine": 1078,
        "endChar": 46
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f041111f_aacac6ad",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "Irrelevant. There could be a simultaneous depth/stencil resolve which can take a separate path while the color resolve takes the subpass path.\n\nYou can always write a test for this.",
      "range": {
        "startLine": 1079,
        "startChar": 65,
        "endLine": 1080,
        "endChar": 34
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c301f02_27f5684b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "This should check that the render pass is from the read framebuffer. You can write a regression test doing this:\n\n- FBO 1 -\u003e multisample draw\n- FBO 2 -\u003e multisample draw\n- Bind FBO 1 as read\n- Bind FBO 3 as draw\n- Resolve\n\nWith the current code, you will end up resolving FBO 2 instead of FBO 1.\n\nFramebufferVk::invalidateImpl was suffering from the same bug in the past.",
      "range": {
        "startLine": 1080,
        "startChar": 38,
        "endLine": 1080,
        "endChar": 83
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da8678b_204cd7fb",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Good catch.   I added the test FramebufferTest_ES31::MultisampleResolveWithBlitMultipleFBOs() which does as you describes.\n\nThis was fixed with a check of ContextVk::isCurrentRenderPassOfFramebuffer() for the source framebuffer.\n\nThis also requires updating onRenderPassFinished() to remove setting mRenderPassFramebuffer \u003d VK_NULL_HANDLE, since we need to know which VkFramebuffer the render pass was for.   onRenderPassFinished() is called as part of ContextVk::syncState() when handling gl::State::DIRTY_BIT_DRAW_FRAMEBUFFER_BINDING.   This should be safe, since all of the callers of isCurrentRenderPassOfFramebuffer() also check if the render pass is started...for now anyway.",
      "parentUuid": "6c301f02_27f5684b",
      "range": {
        "startLine": 1080,
        "startChar": 38,
        "endLine": 1080,
        "endChar": 83
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "370aeb70_eb18852e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Done\n\nI thought I was hitting some dEQP failures without these, but CQ seems clean so far (patchset 16).",
      "parentUuid": "f041111f_aacac6ad",
      "range": {
        "startLine": 1079,
        "startChar": 65,
        "endLine": 1080,
        "endChar": 34
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caa1a58c_384fe3f2",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1211,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "Another limitation is that there shouldn\u0027t already be a resolve attachment on this framebuffer. The endRenderPass() below should make sure this doesn\u0027t happen with this optimization, so better ASSERT it. You can write a test like this:\n\n- Draw multisampled in FBO 1\n- Bind FBO 1 as read\n- Bind FBO 2 as draw\n- Resolve\n- Bind FBO 3 as draw\n- Resolve",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c19d646a_71bb8bfa",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1211,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "I created FramebufferTest_ES31::MultisampleResolveWithBlitMultipleResolves() to test what you describe.   This test passes without any updates required.\n\nThe reason this works already is that we update the FramebufferDesc with the destination ImageView\u0027s Serial, which keeps them all unique and essentially creating all of the necessary read-draw framebuffer attachment pairings.   When FramebufferVk::getFramebuffer() looks for the vk::Framebuffer to return, the cache is able to differentiate between the different destination images (by Serial), and create a new vk::Framebuffer if they don\u0027t match.\n\nLet me know what you think.",
      "parentUuid": "caa1a58c_384fe3f2",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ec5e636_ac5fbb43",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1211,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T16:04:07Z",
      "side": 1,
      "message": "Sounds good. I think the endRenderPass() call below also makes sure that works. That\u0027s why I asked for an ASSERT() here that there\u0027s no resolve attachment already.",
      "parentUuid": "c19d646a_71bb8bfa",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d7b48c5_46e9d869",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1217,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "nit: this is more than an \"in case\"",
      "range": {
        "startLine": 1217,
        "startChar": 9,
        "endLine": 1217,
        "endChar": 16
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e98bf3_9bb6e33e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1217,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "A new framebuffer may not need to be created if the framebuffer cache is able to find one to re-use (as is typically what happens in Asphalt 8).   In that case, the resolve attachment pointer is unused.",
      "parentUuid": "7d7b48c5_46e9d869",
      "range": {
        "startLine": 1217,
        "startChar": 9,
        "endLine": 1217,
        "endChar": 16
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7490e304_a843fb27",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1217,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T16:04:07Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "e9e98bf3_9bb6e33e",
      "range": {
        "startLine": 1217,
        "startChar": 9,
        "endLine": 1217,
        "endChar": 16
      },
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "676ba002_0887ac02",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1700,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "A change just landed that changes this in FramebufferVk::blit. If the read buffer is multisampled-render-to-buffer, then srcFramebuffer-\u003egetSamples(context) gives \u003e 1, but there\u0027s no resolve happening as the read buffer\u0027s singlesampled image will be used as blit src.\n\nIt can get a little complicated as you would need the blit mask to know how to correctly deduce this (see https://chromium-review.googlesource.com/c/angle/angle/+/2333987/5/src/libANGLE/renderer/vulkan/FramebufferVk.cpp#853). How about instead do this:\n\n    if (command !\u003d gl::Command::Blit)\n    {\n        // Don\u0027t end the render pass when handling a blit, since we may be able to optimize\n        // color resolves in a way that requires modifying the current render pass.\n        ANGLE_TRY(contextVk-\u003eendRenderPass());\n    }\n\nThen inside FramebufferVk::blit:\n\n    // \u003cAppropriate comment\u003e\n    if (!isColorResolve)\n    {\n        ANGLE_TRY(contextVk-\u003eendRenderPass());\n    }",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18cd9511_6ac86b9b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1700,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Hm, the blit should end the render pass already (via ImageRead() or otherwise), so adding it to there may not be necessary.   I\u0027ll try it and see what CQ says.",
      "parentUuid": "676ba002_0887ac02",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07134c33_72d27c64",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1700,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T16:04:07Z",
      "side": 1,
      "message": "Sounds good. MultisampledRenderToTextureES31Test.BlitFramebufferAttachment1 should be triggering this discrepancy believe.",
      "parentUuid": "18cd9511_6ac86b9b",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb8d74a_8f36a00a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1700,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T21:05:17Z",
      "side": 1,
      "message": "Looks like ending the render pass in FramebufferVk::blit() is not required, so I\u0027ll leave it out for now.",
      "parentUuid": "07134c33_72d27c64",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "235084cb_25736634",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1700,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T22:35:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0fb8d74a_8f36a00a",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbb82f3c_989f6442",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "You can ASSERT there are no resolve attachments. An anonymous helper function can be used that returns true/false based on whether resolve attachment exists, then ASSERT(callThatFunction()).",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fab8e094_634b5e48",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "You can ASSERT there are no resolve attachments. An anonymous helper function can be used that returns true/false based on whether resolve attachment exists, then ASSERT(callThatFunction()).",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b388bff9_7fc2f7e7",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "I think a normal private function would be better for readability than the lamda here, but let me know what you think.",
      "parentUuid": "cbb82f3c_989f6442",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113f4e7f_922522dc",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fab8e094_634b5e48",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbe735fa_b1e06f98",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-07T16:06:59Z",
      "side": 1,
      "message": "That\u0027s what I was suggesting too, a global function in the anonymous namespace at the top of the file should do.",
      "parentUuid": "b388bff9_7fc2f7e7",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7746383_9378c603",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1835,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T20:58:05Z",
      "side": 1,
      "message": "Oh, misunderstood what you meant there.   Moved it to HasResolveAttachment() in the anonymous namespace above.",
      "parentUuid": "cbe735fa_b1e06f98",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18403e9f_a2865606",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.h",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "Shouldn\u0027t need this",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d24a9ad1_b7d89c5d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.h",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Oops, yup, forgot to back this out.   Done.",
      "parentUuid": "18403e9f_a2865606",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77ed734a_744ba56f",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-04T16:52:07Z",
      "side": 1,
      "message": "If possible, please draw a gradient and verify at least the corners are right. Just to make sure the optimization is not accidentally doing flips or what not.",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf2acc9_6f95fe87",
        "filename": "src/tests/gl_tests/FramebufferTest.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1150,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-07T01:25:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77ed734a_744ba56f",
      "revId": "8a4bd4bf970707d31a504f8607e4ef8f169c68a5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}