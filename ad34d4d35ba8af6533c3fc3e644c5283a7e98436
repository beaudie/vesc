{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d1990b11_3d0f3b58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-08T22:09:15Z",
      "side": 1,
      "message": "The end2end test code was taken from Shabi\u0027s work in https://chromium-review.googlesource.com/c/angle/angle/+/4752415.",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e727fdba_b70a57f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1223189
      },
      "writtenOn": "2023-09-08T23:54:34Z",
      "side": 1,
      "message": "thanks, confirmed this works for b/288065257",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db62ff46_65be94ed",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-09T00:33:50Z",
      "side": 1,
      "message": "please use `https://issuetracker.google.com/292285899` instead, b/NNNN is internal Google magic.",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db517ec_a01a5656",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-09T00:57:04Z",
      "side": 1,
      "message": "Thanks, curious how did you generate this link? The default link I copied from the issue itself is: https://b.corp.google.com/issues/292285899",
      "parentUuid": "db62ff46_65be94ed",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7121c7ae_e0bbad67",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-09T00:33:50Z",
      "side": 1,
      "message": "While access to the surface itself is undefined, access to the context isn\u0027t, so I don\u0027t think we should unmake current the context. Just the surface.\n\n---\n\nAlso, I noticed now that we can\u0027t remove one surface and not the other. So for example an app could destroy the read surface, but continue to draw to the other surface. Or vice versa, destroy the draw surface, but then call glReadPixels.\n\nSo _technically_ this change is incorrect. I\u0027m fine with it as a hack though, worst case we can put it under a frontend workaround that\u0027s enabled by app detection üòê\n\nThat said, `eglMakeCurrent` requires either both or none of the surfaces be set, but ANGLE _may_ not care internally if that\u0027s true. So maybe as a follow up try to see if you can just set one of the surfaces (the one being destroyed, if they are not the same) to NO_SURFACE and see if anything blows up. Of course you\u0027d have to add tests for the scenarios I described above.",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}