{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d1990b11_3d0f3b58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-08T22:09:15Z",
      "side": 1,
      "message": "The end2end test code was taken from Shabi\u0027s work in https://chromium-review.googlesource.com/c/angle/angle/+/4752415.",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e727fdba_b70a57f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1223189
      },
      "writtenOn": "2023-09-08T23:54:34Z",
      "side": 1,
      "message": "thanks, confirmed this works for b/288065257",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db62ff46_65be94ed",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-09T00:33:50Z",
      "side": 1,
      "message": "please use `https://issuetracker.google.com/292285899` instead, b/NNNN is internal Google magic.",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db517ec_a01a5656",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-09T00:57:04Z",
      "side": 1,
      "message": "Thanks, curious how did you generate this link? The default link I copied from the issue itself is: https://b.corp.google.com/issues/292285899",
      "parentUuid": "db62ff46_65be94ed",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb915f45_79e04581",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-09T02:10:10Z",
      "side": 1,
      "message": "Learned that from before COVID, when we could access corp on personal computers. That\u0027s the public link to buganizer, and what our partners/the public use.",
      "parentUuid": "9db517ec_a01a5656",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84aa9039_ff06f3a7",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 313,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-11T18:30:44Z",
      "side": 1,
      "message": "Thanks üëç",
      "parentUuid": "eb915f45_79e04581",
      "range": {
        "startLine": 313,
        "startChar": 18,
        "endLine": 313,
        "endChar": 19
      },
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7121c7ae_e0bbad67",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-09T00:33:50Z",
      "side": 1,
      "message": "While access to the surface itself is undefined, access to the context isn\u0027t, so I don\u0027t think we should unmake current the context. Just the surface.\n\n---\n\nAlso, I noticed now that we can\u0027t remove one surface and not the other. So for example an app could destroy the read surface, but continue to draw to the other surface. Or vice versa, destroy the draw surface, but then call glReadPixels.\n\nSo _technically_ this change is incorrect. I\u0027m fine with it as a hack though, worst case we can put it under a frontend workaround that\u0027s enabled by app detection üòê\n\nThat said, `eglMakeCurrent` requires either both or none of the surfaces be set, but ANGLE _may_ not care internally if that\u0027s true. So maybe as a follow up try to see if you can just set one of the surfaces (the one being destroyed, if they are not the same) to NO_SURFACE and see if anything blows up. Of course you\u0027d have to add tests for the scenarios I described above.",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86394e3a_67d85b53",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-11T18:30:44Z",
      "side": 1,
      "message": "Thanks! I made the change to check if the display supports surfaceless context extension. If yes, only make the draw and read surfaces uncurrent. If not, make  the context uncurrent, too.\n\nI will add a follow-up change to verify the two cases you described:\n\n```\ncase 1: destroy draw surface, but continue to read on read surface\n\n// step 1. make the context, drawSurface, readSurface current\neglMakeCurrent(display, drawSurface, readSurface, context);\n\n// step 2. draw and read using both drawSurface and readSurface\n\n// step 3. destroy draw surface\neglDestroySurface(display, drawSurface)\n\n// step 4. use the read surface and it should still work?\n\n// step 5. create another draw surface and make it current\n\n// step 6. draw and read from the new draw surface and old read surface and everything should still work.\n\n```\n\n```\ncase 2: destroy read surface, but continue to draw on draw surface\n\n// step 1. make the context, drawSurface, readSurface current\neglMakeCurrent(display, drawSurface, readSurface, context);\n\n// step 2. draw and read using both drawSurface and readSurface\n\n// step 3. destroy read surface\neglDestroySurface(display, readSurface)\n\n// step 4. use the draw surface and it should still work?\n\n// step 5. create another read surface and make it current\n\n// step 6. draw and read from the new read surface and old draw surface and everything should still work.\n\n```\n\nAre these two scenarios matching with what you described?",
      "parentUuid": "7121c7ae_e0bbad67",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c362046_98e515d9",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T19:09:32Z",
      "side": 1,
      "message": "\u003e Thanks! I made the change to check if the display supports surfaceless context extension\n\nAck, good idea. I\u0027d say, maybe just add the front-end feature for this workaround anyway. Then we can enable it only for Vulkan where this is a problem (and also avoid hitting the scenario where a backend doesn\u0027t support surfaceless, which is only the gl backend)\n\n\u003e Are these two scenarios matching with what you described?\n\nYeap!",
      "parentUuid": "86394e3a_67d85b53",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65c73cb6_c09c75d2",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-11T21:59:04Z",
      "side": 1,
      "message": "\u003e I\u0027d say, maybe just add the front-end feature for this workaround anyway. Then we can enable it only for Vulkan where this is a problem (and also avoid hitting the scenario where a backend doesn\u0027t support surfaceless, which is only the gl backend)\n\nIt turns out I need to enable the front-end-feature on gl backends, too. Otherwise the test failed on gles backends on Qualcomm device:\n\n```\nC 14:46:39.593    7.979s Main  [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 4 tests ran.\nC 14:46:39.593    7.980s Main  [  PASSED  ] 2 tests.\nC 14:46:39.593    7.980s Main  [  FAILED  ] 2 tests, listed below:\nC 14:46:39.593    7.980s Main  [  FAILED  ] EGLSurfaceTest.DestroyAndRecreateWhileCurrent/ES2_OpenGLES_NoFixture\nC 14:46:39.593    7.980s Main  [  FAILED  ] EGLSurfaceTest.DestroyAndRecreateWhileCurrent/ES3_OpenGLES_NoFixture\n\n```",
      "parentUuid": "7c362046_98e515d9",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59748db7_5ab02fca",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2023-09-11T22:15:53Z",
      "side": 1,
      "message": "Optional and for later, it\u0027d be future proof to have something like mesa driconfig for per app/driver/etc workarounds. That is less concerning for production purpose (e.g. backport a fix to release branches).",
      "parentUuid": "65c73cb6_c09c75d2",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6d54810_c3d399b6",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-09-12T00:51:54Z",
      "side": 1,
      "message": "@zzyiwei@chromium.org Can you please point me to the mesa driconfig file?",
      "parentUuid": "59748db7_5ab02fca",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a2c1b3e_848cee5e",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2023-09-12T03:51:36Z",
      "side": 1,
      "message": "The default driconfig file is here: https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/third_party/mesa/src/util/00-mesa-defaults.conf which is not quite friendly to Android _yet_ since it\u0027s a separate file shipped for non-Android.",
      "parentUuid": "b6d54810_c3d399b6",
      "revId": "ad34d4d35ba8af6533c3fc3e644c5283a7e98436",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}