{
  "comments": [
    {
      "key": {
        "uuid": "58440c05_3459dbb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-19T16:59:31Z",
      "side": 1,
      "message": "This saves 63M dynamic buffer for Manhattan",
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5309eab_1a31fe2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T17:42:50Z",
      "side": 1,
      "message": "You can change the code to always flush immediately when the storage is valid.",
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b05fc39d_11c994d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T18:06:58Z",
      "side": 1,
      "message": "Thinking about it more - see other comments.",
      "parentUuid": "e5309eab_1a31fe2a",
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c70534b_ca50fa6e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 378,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T18:06:58Z",
      "side": 1,
      "message": "following up with my prior comment - you can make this \"if a) mOwnsImage is false, or b) the staging buffer is empty, and the image is defined\" and then we can condense a few cases.",
      "range": {
        "startLine": 374,
        "startChar": 0,
        "endLine": 378,
        "endChar": 5
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88707b4a_9fcb332d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 449,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T18:06:58Z",
      "side": 1,
      "message": "here you can condense this case with the above logic.",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 449,
        "endChar": 0
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c82ec4c0_6cfdab16",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1068,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T17:42:50Z",
      "side": 1,
      "message": "you can ensure the image is initialized here.",
      "range": {
        "startLine": 1068,
        "startChar": 11,
        "endLine": 1068,
        "endChar": 16
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d250bec1_0bd65b81",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1068,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-19T18:32:13Z",
      "side": 1,
      "message": "Isn\u0027t doing it here is too early? It does not have any data yet. If we call ensureImageInitialized here, and if it is RGB texture, you will end up flush out alpha channel writes here and then later on when user did provide data at TextureVk::setSubImageImpl, we flush out RGBA data again. If I do it in TextureVk::setSubImageImpl(), they will flush out once and there is logic there that will figure out alpha channel init is redundant an will remove the alpha init.",
      "parentUuid": "c82ec4c0_6cfdab16",
      "range": {
        "startLine": 1068,
        "startChar": 11,
        "endLine": 1068,
        "endChar": 16
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a60a55b_8872a5b4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3743,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T18:06:58Z",
      "side": 1,
      "message": "you can reorganize this case to use a single pointer and reduce code duplication.",
      "range": {
        "startLine": 3730,
        "startChar": 0,
        "endLine": 3743,
        "endChar": 0
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e6e5e66_7632e441",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 1253,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T18:06:58Z",
      "side": 1,
      "message": "nit: stagingBufferOverride for naming consistent and clarity",
      "range": {
        "startLine": 1253,
        "startChar": 60,
        "endLine": 1253,
        "endChar": 74
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f101cef2_af242292",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 1253,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-19T18:32:13Z",
      "side": 1,
      "message": "The problem is a lot of places you have dynamciBuffer and the current buffer of dynamicBuffer, so there is some naming confusion here if you name it \"buffer\". The uniform buffer code was using word \"Storage\" for dynamicBuffer and use \"buffer\" for the current buffer in the dynamic buffer (before I made any change in the area). So there is some split there and I am incline more toward use the word stagingStorage for the dynamicBuffer and currentBuffer for the current buffer in the storage.\n\nEitherway, I agree we should be consistent. Maybe we should discuss and pick a name and do a sweep change of the naming.",
      "parentUuid": "5e6e5e66_7632e441",
      "range": {
        "startLine": 1253,
        "startChar": 60,
        "endLine": 1253,
        "endChar": 74
      },
      "revId": "353ac4c3ae0a8fa80e067eef46c2702c0e2ce0c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}