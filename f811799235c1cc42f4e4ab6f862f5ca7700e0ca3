{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a742a215_2e1ea231",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-09T20:45:29Z",
      "side": 0,
      "message": "I freed these two bits up for use in a CL I have (that\u0027s about to land), sorry taken!\n\nAssuming None is supported, is there any reason why we should use DontCare instead? I\u0027m guessing not. In that case we can keep storeOp as-is, then store DontCare where None would have gone if the extension is supported, and when setting ops just replace all DONT_CAREs with NONE_QCOMs if the extension is supported.",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "135bc7f1_61a2bcb9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-10-09T21:09:26Z",
      "side": 0,
      "message": "That is a question for QC. I think they can do some optimizations based on this. These are two different intent. If the data is in GMEM and write out GMEM is deferred, they could drop the GMEM store when they see DontCare. If NONE\u003c they still have to flush out the deferred writes. \n\nHere is the note from spec, section 7.1:\nVK_ATTACHMENT_STORE_OP_DONT_CARE can cause contents generated during previous render passes to be discarded before reaching memory, even if no write to the attachment occurs during the current render pass.",
      "parentUuid": "a742a215_2e1ea231",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7340b5f9_bf4d6e25",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-09T21:20:26Z",
      "side": 0,
      "message": "If you were to merge the 2x 2+1 bit values into 2x 3 bit value:\n\nYou\u0027d have \n\nLOAD_LOAD_STORE_STORE (1 value)\nLOAD_LOAD_STORE_DONTCARE (2 values)\nLOAD_LOAD_STORE_NONE (3)\nLOAD_CLEAR_{STORE/DONTCARE/NONE} (6)\nLOAD_DONTCARE_{STORE/DONTCARE/NONE} (9)\n\ntotal 9 values. Just one value short of 8 bits. Unless there\u0027s an impossible combination somewhere.\n\nYou could merge the 2x 3 bit values into one 6 bit value... you\u0027d just have to use more / and % operations instead of enums.",
      "parentUuid": "135bc7f1_61a2bcb9",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82ee552f_a2bd98dd",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-09T21:21:00Z",
      "side": 0,
      "message": "Sorry, \"just one value short of 3 bits \u003d\u003d 8 values\"",
      "parentUuid": "7340b5f9_bf4d6e25",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aff8b161_d13256ee",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-10-09T21:36:16Z",
      "side": 0,
      "message": "yea, that will make it hard to debug, and / % operations are more expensive as well. Not sure if it will be net win though. I am thinking either expand it to 32 bit field, which will give us a lot more head room for future as well. Or, another option is further squeeze the initialLayout and finalLayout. What I understand is that right now initialLayout and finalLayout is always the same, except one place where I used finalLayout to transit into ImageLayout::Present. If people aren\u0027t going to further use finalLayout to do layout transition,I could poetnytially get rid of finalLayout and just use one bit to indicate finalLayout should be ImageLayout::Present.\n\nI personally like just expand it to 32 bit field, make our current and future life simpler.",
      "parentUuid": "82ee552f_a2bd98dd",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad8edb4c_8ac7806c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-09T21:39:37Z",
      "side": 0,
      "message": "+1 to expanding it. Looks like this isn\u0027t used in PipelineCache so it won\u0027t affect GL state change operations.",
      "parentUuid": "aff8b161_d13256ee",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bc119a7_f253d1eb",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-10T01:18:55Z",
      "side": 0,
      "message": "Expanding is fine, but I had also been thinking of turning finalLayout into 1 bit that says \"0 \u003d same as initialLayout, 1 \u003d Present\". Should work even if we add 2 more different-final-layout situations (you need 2 bits, so there\u0027s 1 extra).",
      "parentUuid": "ad8edb4c_8ac7806c",
      "revId": "f811799235c1cc42f4e4ab6f862f5ca7700e0ca3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}