{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68440a43_2982c22b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-03T22:05:33Z",
      "side": 1,
      "message": "Sounds like the change could have also been split in a few smaller ones",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07171f74_d3f2991e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-03T22:05:33Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f95ba2d_96eaa517",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-03T22:08:00Z",
      "side": 1,
      "message": "LGTM. Too bad the experiment didn\u0027t seem to help. Was any of the slowness because of how VMA works?",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12f90fa9_233fd2f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-03T22:46:41Z",
      "side": 1,
      "message": "No, all the changes made in last week all helps. Its just won\u0027t get to the same CPU overhead level as dynamic buffer. ut it will still help all other suballocation garbages that we generated from BufferVk, from staging buffer etc. Its just for linear usage we essentially switched back to DynamicBuffers. The main problem with VMA is that every suballocation has to be freed, which comes with overhead of allocating and freeing suballocation object as well as doing allocation itself and go through process of garbage collection. All these little things adds up, end up with 6% extra (3.80ms versus 3.565ms). The remaining DynamicBufer usages are all per context usages, and they are all linear allocation by nature, so I think DynamicBuffer is a good fit for this usage scenario. We can talk to VMA to have them implement a new linear algorithm that does not need to free all suballocation offsets (i.e, we accumulate and only free once per submission), then we can still switch to VMA\u0027s linear allocation and it can be as perform as Dynamicbuffer. But given we already have DynamicBuffer and it is doing exact what we want for linear allocation, I don\u0027t see much motivation to do that.",
      "parentUuid": "0f95ba2d_96eaa517",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41d6038d_ca6a5616",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-03T22:05:33Z",
      "side": 1,
      "message": "Before they come knocking, can you please use a smaller value on Fuchsia? Say 16KB?",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd3e909a_5330e843",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-03T22:08:00Z",
      "side": 1,
      "message": "+1, ideally can we configure this as a runtime property?",
      "parentUuid": "41d6038d_ca6a5616",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3e06cc4_d42e4325",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-03T23:01:36Z",
      "side": 1,
      "message": "Give these are per context pool, we could adopt the same prune logic as the BufferPool and at every 1 second interval, we check how many bytes are actually used and use that as the new buffer size, that way we can pretty much keep the DynamicBuffer only have one buffer most of time. Will file a separate bug for future improvement.",
      "parentUuid": "bd3e909a_5330e843",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "056b1235_ef3362d2",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1074,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-03T22:05:33Z",
      "side": 1,
      "message": "Maybe just add an `initWith...` and dispense with `friend`?",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bba76c00_99058e14",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1074,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-03T22:08:00Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "056b1235_ef3362d2",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd071208_75feea14",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1074,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-03T23:01:36Z",
      "side": 1,
      "message": "The reason I did this is to ensure it does not gets misused. No one should change offset value except VMA allocator, except dynamic buffer where The dynamic buffer itself is doing the allocation logic. Using \"friend\" I am able to limit this SPI just to DynamicBuffer.",
      "parentUuid": "bba76c00_99058e14",
      "revId": "ad4990cf1f2fd675e0508dd3543bfee22b429a8a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}