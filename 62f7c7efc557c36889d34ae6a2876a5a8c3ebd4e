{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2ea77186_4f88e6ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-07T18:03:20Z",
      "side": 1,
      "message": "PTAL",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2cf9a0b_b134afed",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1752,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-07T22:10:29Z",
      "side": 1,
      "message": "nit: maybe just delete the whole ASSERT. The robustness check should be validated by a test, and then basically everything else in the ASSERT is satisfied one way or another.",
      "range": {
        "startLine": 1749,
        "startChar": 0,
        "endLine": 1752,
        "endChar": 89
      },
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7284b5c9_be714f8c",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1752,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-07T22:43:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2cf9a0b_b134afed",
      "range": {
        "startLine": 1749,
        "startChar": 0,
        "endLine": 1752,
        "endChar": 89
      },
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e1b555_53ed6122",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1440,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-07T22:10:29Z",
      "side": 1,
      "message": "nit: Remove _KHR for consistency with elsewhere.",
      "range": {
        "startLine": 1440,
        "startChar": 59,
        "endLine": 1440,
        "endChar": 63
      },
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca4d75d7_46d76302",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1440,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-07T22:43:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7e1b555_53ed6122",
      "range": {
        "startLine": 1440,
        "startChar": 59,
        "endLine": 1440,
        "endChar": 63
      },
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5d8c286_46623d90",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-07T22:10:29Z",
      "side": 1,
      "message": "Doesn\u0027t look like you can merge these two cases. The EXT version needs EXT_create_context_robustness and the second either EGL1.5 or KHR_create_context so they need different logic.",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43d71112_66868e66",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-07T22:43:25Z",
      "side": 1,
      "message": "\"createContextRobustness\" is enabled if ICD supports robustness and we are just reusing that bool here to make sure HW support exists.\n\nI guess the real question is if we need to downgrade EGL to 1.4 for ICDs that dont support robustness?",
      "parentUuid": "d5d8c286_46623d90",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6ea3e7e_99e838f5",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T14:29:45Z",
      "side": 1,
      "message": "We should be splitting this into EXT and KHR exts it looks like.\n\nI\u0027m not sure about downgrading to 1.4, there may be assumptions now that ANGLE is EGL 1.4 in Android somewhere. We kinda cheated with EGL so it might be a bit of a minefield.",
      "parentUuid": "43d71112_66868e66",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc13fcc5_ee80143e",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-10T19:17:29Z",
      "side": 1,
      "message": "\u003e there may be assumptions now that ANGLE is EGL 1.4 in Android somewhere\n\ndid you mean \"now that ANGLE is EGL 1.5\"?\n\n\u003e We should be splitting this into EXT and KHR exts it looks like.\n\n\"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT\" was introduced by \"EGL_EXT_create_context_robustness\" but supported \n for \"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR\" was added by \"EGL_KHR_create_context\" and EGL 1.5 added support for \"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY\" which has the same enum value as \"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR\"\n \n how do you propose we handle this?",
      "parentUuid": "a6ea3e7e_99e838f5",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd8bd275_30e1f9c7",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-01-13T19:22:24Z",
      "side": 1,
      "message": "ping - shabi, any suggestions?",
      "parentUuid": "bc13fcc5_ee80143e",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "894c5a8b_91bbab66",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-17T16:38:00Z",
      "side": 1,
      "message": "\u003e how do you propose we handle this?\n\nBasically something like this (untested pseudo-code):\n\n        case EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT:\n            if (!...createContextRobustness)\n            {\n                val-\u003esetError(EGL_BAD_ATTRIBUTE);\n                return false;\n            }\n            break;\n\n        case EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY:\n            if (!is_egl_1.5() \u0026\u0026 !...createContext)\n            {\n                val-\u003esetError(EGL_BAD_ATTRIBUTE);\n                return false;\n            }\n            break;\n\nMakes sense? Basically check the condition under which the symbol is valid (which is different for the two symbols and is exactly how you described it yourself)",
      "parentUuid": "dd8bd275_30e1f9c7",
      "revId": "62f7c7efc557c36889d34ae6a2876a5a8c3ebd4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}