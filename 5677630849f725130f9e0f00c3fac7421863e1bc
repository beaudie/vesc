{
  "comments": [
    {
      "key": {
        "uuid": "00cdbf7b_dad4a9f0",
        "filename": "scripts/run_code_generation.py",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "nit: would call this Meta format table",
      "range": {
        "startLine": 116,
        "startChar": 11,
        "endLine": 116,
        "endChar": 17
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05fde997_1a86c450",
        "filename": "scripts/run_code_generation.py",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:41Z",
      "side": 1,
      "message": "Sorry, \u0027Metal format table\u0027",
      "parentUuid": "00cdbf7b_dad4a9f0",
      "range": {
        "startLine": 116,
        "startChar": 11,
        "endLine": 116,
        "endChar": 17
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69da11a1_81808aad",
        "filename": "scripts/run_code_generation.py",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "05fde997_1a86c450",
      "range": {
        "startLine": 116,
        "startChar": 11,
        "endLine": 116,
        "endChar": 17
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "145ee4e4_bf3c9656",
        "filename": "src/libANGLE/renderer/metal/mtl_format_table_autogen.mm",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "I\u0027d suggest you combine the two switch cases into one. It does make for some repeated actual format assignments and #ifdefs, but it should improve performance slightly. It should be easy to do in auto-generation.",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d89f7e9c_c195aefe",
        "filename": "src/libANGLE/renderer/metal/mtl_format_table_autogen.mm",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "145ee4e4_bf3c9656",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a2960dd_d71b7770",
        "filename": "src/libANGLE/renderer/metal/mtl_format_table_autogen.mm",
        "patchSetId": 3
      },
      "lineNbr": 354,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "always avoid goto.",
      "range": {
        "startLine": 354,
        "startChar": 8,
        "endLine": 354,
        "endChar": 24
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a50d1ed_4b24a828",
        "filename": "src/libANGLE/renderer/metal/mtl_format_table_autogen.mm",
        "patchSetId": 3
      },
      "lineNbr": 354,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "Hmph, OK. I thought auto generated files are not subjects to style guides.\nActually, this function is not that hard to read.\nBut nvm,",
      "parentUuid": "4a2960dd_d71b7770",
      "range": {
        "startLine": 354,
        "startChar": 8,
        "endLine": 354,
        "endChar": 24
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9507d10c_f68eafc6",
        "filename": "src/libANGLE/renderer/metal/mtl_format_table_autogen.mm",
        "patchSetId": 3
      },
      "lineNbr": 354,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T14:12:34Z",
      "side": 1,
      "message": "Yeah, autogen files still are subject to the style guide AFAIK. Thanks for addressing.",
      "parentUuid": "3a50d1ed_4b24a828",
      "range": {
        "startLine": 354,
        "startChar": 8,
        "endLine": 354,
        "endChar": 24
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d218905_d5296f3c",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "There\u0027s quite a few similar overloads here. I\u0027m wondering if it would make the code better to remove some of them. I couldn\u0027t find where they were used in the next patch set, maybe you could give me a pointer so I could help assess if we could clean this up?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 52,
        "endChar": 90
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96fef68e_07e2ee7e",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "initAndConvertToCompatibleFormatIfNotSupported() is used in SurfaceMtl.mtl to determine runtime support of depth24stencil8 based on id\u003cMTLDevice\u003e capabilities.\nThe 3 overloads I created to conveniently pass 3 different similar format enums without having to convert them manually for example, let say in future, I encountered a case that the code only know GLenum sizedInternalFormat instead of angle::FormatID, instead of calling a function to convert to angle::FormatID and then call init(). I could just call overloadded init() with GLenum parameter directly.\nOf course, current code might not use some overloaded versions, if I removed them then if future I ever encounter the above example case, then I have to rewrite again.\nBut nevermind, I admit that at first I only implemented init(), but later along the way I discovered some formats require runtime check like packed depth24stencil8. At that point, init() was already used in many places, due to laziness, I added initAndConvertToCompatibleFormatIfNotSupported() with id\u003cMTLDevice\u003e param, and only use it in those places requiring runtime format checks.",
      "parentUuid": "9d218905_d5296f3c",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 52,
        "endChar": 90
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d6145a6_71d12adf",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T14:12:34Z",
      "side": 1,
      "message": "Okay. If you don\u0027t mind I\u0027d prefer if you removed the unused ones. It keeps the code simpler if we can support a single query path.",
      "parentUuid": "96fef68e_07e2ee7e",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 52,
        "endChar": 90
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96ee86bf_efb323e7",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "I don\u0027t see where you put these into tables. Is that in the next patch set as well? I\u0027m wondering if this could be cleaner just using the same class for vertex and non-vertex formats. But would probably depend on how you use them.",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 19
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dfeff61_e64a68a9",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "It\u0027s in mtl_format_map.json. The json file contains both \"image\" and \"vertex\" map.\nMetal has two different enums for vertex and pixel format. We cannot use both in same class like vulkan.",
      "parentUuid": "96ee86bf_efb323e7",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 19
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf2b6e05_cc93883e",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T14:12:34Z",
      "side": 1,
      "message": "Ah. What I didn\u0027t see at first is that you\u0027re you\u0027re storing mtl::Format by value and initializing the mtl::Format each query.\n\nI think it\u0027s worth putting in the time now to refactor these and use something more similar to the Vulkan format table. You would keep an array of mtl::Format in a mtl::FormatTable. You would merge FormatBase / Format / Format, keeping the union of all 3 as data, and initialize them all at the same time at startup. Instead of storing mtl::Format by value you would store a const * to the value in the format table.\n\nHope this isn\u0027t too much work, I do think it would help the code be a bit faster and cleaner.",
      "parentUuid": "1dfeff61_e64a68a9",
      "range": {
        "startLine": 70,
        "startChar": 7,
        "endLine": 70,
        "endChar": 19
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ffb535_d57b617b",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "The best way I\u0027ve come up with to handle documentation based support is by encoding the documentation into a data table in ANGLE. See Vulkan\u0027s \u0027gen_vk_mandatory_format_support_table.py\u0027. \n\nIs this the source-of-truth? https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf\n\nYou could use the Apple \"Pixel Format Capabilities\" tables to compute the texture format caps. \n\nI think this would be a bit more maintainable going forward with new versions of Metal, etc. Probably would be a bit cleaner too.",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 98
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cfac74_9a0d9b93",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "Yes, the plan is using the feature set tables. But writing a table with detailed supports for each GPU family is a chore to me. So for now, I just enable some extensions and let angle function gl::GenerateMinimumTextureCaps() auto deduces the support for the formats, of course with some manual overrides from the code here due to that angle function doesn\u0027t work accurately.\nBy right, angle should do this correctly since extensions already have detailed spec on what formats they provide, and angle has been dealing with these specs for longer than I do.\nBut some formats like RGB8_SRGB I don\u0027t get why angle function requires ES version to be 3.0 in order for format to be supported, even though I turned on SRGB extension.\n\nNote that the extensions I turned on here are only temporary for gl::GenerateMinimumTextureCaps() deduction. After this call, ContextMtl will do a verification by calling extensions.setTextureExtensionSupport(textureCaps) to compute the real texture extensions based on textureCaps resulted from GenerateMinimumTextureCaps() + manual overrides.\n\nanw, IMO this detailed format support is really a chore. The basic code implementation even if not accurate as Apple\u0027s table, it will still support all ES 2.0 formats correctly. I think it should be left to future commit, instead of doing everything in an already big commit like this.",
      "parentUuid": "25ffb535_d57b617b",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 98
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d26f3b8_59177887",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:24:38Z",
      "side": 1,
      "message": "Furthermore, the table provided by Apple is in PDF format, not XML format.",
      "parentUuid": "44cfac74_9a0d9b93",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 98
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8034c7d_4b4f6edf",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T14:12:34Z",
      "side": 1,
      "message": "OK, that sounds reasonable. Can you leave a comment here explaining the work to be done: converting the PDF tables into a json document, then using an generator script to turn the json into cpp tables, similar to gen_vk_mandatory_format_support_table, then using that table here.\n\nA lot of the rules about texture support are very finely tuned. So I would expect some things like SRGB not to function perfectly using the method you have here. As you say we can leave this for now. If you have time after the back-end lands maybe you could come back to this when you\u0027re bored. :)",
      "parentUuid": "4d26f3b8_59177887",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 119,
        "endChar": 98
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f91a9994_d4008785",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "nit: you should be able to use ANGLE_UNUSED_VARIABLE if this emits a warning.",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 22
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5a9f0aa_dac4ab06",
        "filename": "src/libANGLE/renderer/metal/mtl_format_utils.mm",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-11T12:20:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f91a9994_d4008785",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 22
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acc31a3b_f1bc960d",
        "filename": "src/libANGLE/renderer/metal/shaders/blit.metal",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-11T11:32:13Z",
      "side": 1,
      "message": "nit: can you go through and remove the (c) from the copyright notices new files you added? It\u0027s not recommended any more.",
      "range": {
        "startLine": 2,
        "startChar": 12,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "5677630849f725130f9e0f00c3fac7421863e1bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}