{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4cef9e26_cddf446c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T15:30:54Z",
      "side": 1,
      "message": "@syoussefi@chromium.org There is a problem with this CL.\n\nIt may generate `VUID-vkResetCommandBuffer-commandBuffer-00045` and related errors.\nI already investigated this and it is a VVL bug (false positive).\n\nI already implemented a fix and want to submit it today. If my fix is OK it may be merged relatively quickly.\n\nBut before the fix in VVL gets to the ANGLE we can\u0027t merge the change.\n\nAlternatively, I can add runtime feature (for example: `useExternalFenceToTrackCommandBuffers`) and disable it when `getEnableValidationLayers() \u003d\u003d true`.\nWhen enabled, this feature will use `ExternalFence` to check for Command Buffer completion.\nWhen disabled, additional normal Fence submission will be performed right after the `ExternalFence` submission. This Normal Fence will be used to check for Command Buffer completion.\n\nThis feature may be also used for debugging, in case we suspect misbehavior of the `ExternalFence`.\n\nAlso I want to update/add en2end test so it generate this VVL bug.\n\nWhat do you think?\n\n---\n\nAnother question. Is VVL always enabled for tests?\nI\u0027m asking because there might be cases when tests will fail without VVL and pass with VVL. One reason is that VVL replace original Vulkan Handles with unique  values. Other is like the proposed feature above, that is disabled with VVL.",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8351ca_f3a0a4a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T17:57:00Z",
      "side": 1,
      "message": "If it\u0027s just a harmless VVL bug, you can suppress it in RendererVk.cpp (`kSkippedMessages`).\n\n\u003e Another question. Is VVL always enabled for tests?\n\nYes. Let\u0027s not go down the path of changing behavior with VVL enabled, it\u0027s always good to be able to enable VVL and catch bugs (which we can\u0027t do if we change behavior under VVL).\n\nThe point about unique handles is valid, I\u0027ll check around to see if we can get a no-VVL build tested somewhere.",
      "parentUuid": "4cef9e26_cddf446c",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71bb84d9_95f07fb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T18:24:52Z",
      "side": 1,
      "message": "\u003e If it\u0027s just a harmless VVL bug, you can suppress it in RendererVk.cpp\n\nIt is not harmless if it is not false positive.\nAdditionally, there will be tons of other bugs as a consequence of the same problem.\n\nSo need to wait for VVL fix (already pushed pull request).",
      "parentUuid": "9f8351ca_f3a0a4a7",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07301377_f81a0537",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1131,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T14:38:58Z",
      "side": 1,
      "message": "nit: Feel free to add a `destroyFence` helper in `CommandBatch` for this too.",
      "range": {
        "startLine": 1123,
        "startChar": 0,
        "endLine": 1131,
        "endChar": 13
      },
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f853ebd7_96c2f64c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1429,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T14:38:58Z",
      "side": 1,
      "message": "I don\u0027t quite follow this, is this exporting the external fence to itself? Shouldn\u0027t exportFd write to `batch.fence` or something?",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da014b4_8e605d0b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1429,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T15:30:54Z",
      "side": 1,
      "message": "\u003e I don\u0027t quite follow this, is this exporting the external fence to itself?\n\nYes.\n\nInternally `ExternalFence` has `Fence mFence` and `int mFenceFd`.\nInitially, `mFenceFd` is invalid so `mFence` is used.\n\nAfter *successful* `exportFd` we no longer can use `mFence` (because export has reset side effect). Therefore, `ExternalFence` will use `mFenceFd` instead.\n\nIf `exportFd` *fails*, then `ExternalFence` will use `mFence` as before. Error (`mFenceFdStatus`) will be handled by `SyncHelperNativeFence` as before.\n\n\u003e Shouldn\u0027t exportFd write to batch.fence or something?\n\nThis is only possible if do import into `batch.fence`. This will also require `dup`\nAdditionally, need to handle errors from export/dup/import, that will complicate everything. In the current implementation no dup/import/error handling is required.",
      "parentUuid": "f853ebd7_96c2f64c",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88dc8fb8_973146c8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1429,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T17:57:00Z",
      "side": 1,
      "message": "Got it",
      "parentUuid": "1da014b4_8e605d0b",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2f36eb8_21947a2e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1643,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T14:38:58Z",
      "side": 1,
      "message": "nit: ditto, feel free to add a `releaseFence` to `CommandBatch`",
      "range": {
        "startLine": 1635,
        "startChar": 0,
        "endLine": 1643,
        "endChar": 9
      },
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8054b416_22ca7c35",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 5
      },
      "lineNbr": 264,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-20T22:13:04Z",
      "side": 1,
      "message": "I still think you can avoid all diffs in this CommandBatch class here by:\n1) Add SharedFence::initWithExternalFence() API by importing the native fence into the fence, and set mRecycler to null to indicate this can not recycled. And also add SharedFence::isRecycleable() const { return mRecycler!\u003dnullptr;}\n2) In retireFinishedCommandsLocked you do this:\nif(batch.fence.isRecycleable()\n{\n    batch.fence.release();\n} \nelse\n{\n    batch.fence.destroy();\n} \n\nThis way, commandBatch has one fence and it do not know it is external or internal. It just check or wait normally. The native fence is hidden in the VkFence by importing it into VkFence. The concept of external fence is going to be limited to queueSubmit and syncVk. The problem you brought up with error handling if export/import failed is not a big problem, you have to deal with it in this CL anyway if exportFd fails, even though less likely. You can always wait for everything to finish if needed. I just think the code diff will be smaller and overall design will be cleaner doing it this way (mainly because CommandBatch only sees one fence, so no if check). It is not a correctness issue, so I am still keeping +1 here.",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 32
      },
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c7ff882_5ea47a0a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 5
      },
      "lineNbr": 264,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-21T13:57:59Z",
      "side": 1,
      "message": "I already tried this: https://chromium-review.googlesource.com/c/angle/angle/+/4414860\n\n\u003e 1) Add SharedFence::initWithExternalFence() API by importing the native fence into the fence, and set mRecycler to null to indicate this can not recycled. And also add SharedFence::isRecycleable() const { return mRecycler!\u003dnullptr;}\n\n`~SharedFence()` calls `release()` and can\u0027t call `destroy(VkDevice device)` since no `device` in the destructor.\n\nHowever, it seems that we can recycle imported fence anyway, since it is a temporary import. Reset will restore permanent internal payload. Therefore, no need extra code in `retireFinishedCommandsLocked()`.\nBut who knows, how some buggy driver may behave...\n\n\u003e The problem you brought up with error handling if export/import failed is not a big problem, you have to deal with it in this CL anyway if exportFd fails, even though less likely\n\nError is handled in the `SyncHelperNativeFence`. In case of fail it is does not matter for the `CommandQueue` - it will use already submitted `VKFence`. Failure of export handled by the `ExternalFence` itself (as nothing happened).\n\nIf `dup` or `import` fails, however - we no longer have `SharedFence` to use in the `CommandBatch`. So yes, need to wait what is submitted - wait the `ExternalFence`.\n\n\u003e  I just think the code diff will be smaller and overall design will be cleaner doing it this way (mainly because CommandBatch only sees one fence, so no if check). It is not a correctness issue, so I am still keeping +1 here.\n\nCode diff maybe, yes. However diff is fairly simple, most of which is refactoring.\nWe also add 2 extra calls, that may fail (complication of handling errors) and take time (unnecessarily).\n\nI like separate approach more, because I was thinking adding optional feature to perform 2 submissions: one with `ExternalFence`, and one with `SharedFence`. It may be used as a workaround in case of some problem with using `ExternalFence`. Currently the problem is VVL.",
      "parentUuid": "8054b416_22ca7c35",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 32
      },
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c4d640e_3e70a0d9",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T14:38:58Z",
      "side": 1,
      "message": "Can we consolidate this with vk::Shared? How about this, we can add a template parameter to `vk::RefCounted` (and `vk::Shared`) like `CounterType \u003d uint32_t`, then have `SyncHelperNativeFence` keep a `vk::Shared\u003cExternalFence, std::atomic\u003cuint32_t\u003e\u003e` (you can add a `using SharedExternalFence \u003d ...` so you don\u0027t have to repeat that everywhere).\n\nThat would deduplicate the ref-counting logic with the one we already have.",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c08db547_1473cb90",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T15:30:54Z",
      "side": 1,
      "message": "I will check. I want to preserve relaxed atomic operations.\n\nAnd how is better to pass function arguments?\nAs `const SharedExternalFence \u0026` or as `RefCounted\u003cExternalFence\u003e *`.",
      "parentUuid": "6c4d640e_3e70a0d9",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f05fad9_57d31dbd",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T17:57:00Z",
      "side": 1,
      "message": "Depends, if you are passing a copy, yes `const SharedExternalFence \u0026`. If you are moving it, `SharedExternalFence \u0026\u0026` and std::move.\n\nThanks for looking into it. TBH, I wouldn\u0027t really bother with relaxed atomics, this is not on the hot path, and is in the order of like one operation per frame.",
      "parentUuid": "c08db547_1473cb90",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6cf243_f84b6d78",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T18:24:52Z",
      "side": 1,
      "message": "\u003e Depends, if you are passing a copy, yes const SharedExternalFence \u0026. If you are moving it, SharedExternalFence \u0026\u0026 and std::move.\n\nYes) But I\u0027m not sure if I want to move or copy)\nDecided to move, because that way I can avoid extra copy in the `CommandProcessorTask`.\n\n\u003e Thanks for looking into it. TBH, I wouldn\u0027t really bother with relaxed atomics, this is not on the hot path, and is in the order of like one operation per frame.\n\nStill need to implement specialization, because `std::atomic\u003c\u003e` does not support copy/move that `RefCounted\u003c\u003e` requires.",
      "parentUuid": "c08db547_1473cb90",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4650eef2_491ee734",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-19T18:31:47Z",
      "side": 1,
      "message": "Hmm ok wait, it\u0027d suck if the atomic ends up getting copied around because of that. If it turns out non-trivial to avoid it, let\u0027s just stick with what you have here.",
      "parentUuid": "7c6cf243_f84b6d78",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1438efc_5821f859",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-19T18:35:12Z",
      "side": 1,
      "message": "I have added specialization\n```\ntemplate \u003ctypename T, typename AtomicCounterType\u003e\nclass RefCounted\u003cT, std::atomic\u003cAtomicCounterType\u003e\u003e : angle::NonCopyable\n{\n```\nwithout move functionality.\n\nSo it is easily avoided.",
      "parentUuid": "4650eef2_491ee734",
      "revId": "dd05fae4aa6672d0ca3c26c28d017b7661c288ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}