{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "36e769af_452264fc",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-07T15:23:47Z",
      "side": 1,
      "message": "Can this be anything other than `angle::FormatID::R8G8B8A8_INT`? I wonder if the whole contents of the function can be changed to a flat switch with just as many cases as you have right now.",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e889d12f_592cc883",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2021-05-18T04:07:47Z",
      "side": 1,
      "message": "I don\u0027t think I follow how to make this flat while keeping the same amount of cases.\nWhat I\u0027m seeing is that it would look something like this if it were to be flattened:\n```\nswitch(format.formatID){\ncase angle::FormatID::R8_SINT:\ncase angle::FormatID::R8G8_SINT:\ncase angle::FormatID::R8G8B8_SINT:\ncase angle::FormatID::R8G8B8A8_SINT:\ncase angle::FormatID::R16_SINT:\ncase angle::FormatID::R16G16_SINT:\n...\n}\n```",
      "parentUuid": "36e769af_452264fc",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12ffbd55_73b1fe0b",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-18T14:41:23Z",
      "side": 1,
      "message": "Isn\u0027t this function supposed to just switch the signedness but keep everything else identical? That is, shouldn\u0027t R8_SINT return R8_UINT?\n\nI saw the return value R8G8B8A8_UINT and assumed the input can only be R8G8B8A8_SINT, but looking again it looks like this is not doing the right thing for R8_SINT, R8G8_SINT etc.\n\nIn other words, shouldn\u0027t this function look like this?\n\n\n    switch(format.formatID){\n    case angle::FormatID::R8_SINT:       return angle::FormatID::R8_UINT;\n    case angle::FormatID::R8G8_SINT:     return angle::FormatID::R8G8_UINT;\n    case angle::FormatID::R8G8B8_SINT:   return angle::FormatID::R8G8B8_UINT;\n    case angle::FormatID::R8G8B8A8_SINT: return angle::FormatID::R8G8B8A8_UINT;\n    case angle::FormatID::R16_SINT:      return angle::FormatID::R16_UINT;\n    case angle::FormatID::R16G16_SINT:   return angle::FormatID::R16G16_UINT;\n    ...\n    }",
      "parentUuid": "e889d12f_592cc883",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f3f5fa8_4a579e4f",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1505517
      },
      "writtenOn": "2021-05-18T21:26:07Z",
      "side": 1,
      "message": "With the current function, I think we\u0027ll get R8G8B8A8_UINT for these:\n```\nangle::FormatID::R8_SINT:       \nangle::FormatID::R8G8_SINT:     \nangle::FormatID::R8G8B8_SINT:   \nangle::FormatID::R8G8B8A8_SINT\n```\n\nThe extra channels should get discarded\n\nIs this acceptable or should we change it?",
      "parentUuid": "12ffbd55_73b1fe0b",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99a33e30_acbd4ae4",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-19T14:59:02Z",
      "side": 1,
      "message": "That\u0027s exactly my concern. If you use R8G8B8A8_UINT instead of R8_SINT, doesn\u0027t it screw up the stride at least?\n\nCould you add a test to exercise this (with an R8 attribute) and see if it works? You could for example use 3 vertices, i.e. 3 bytes of data. I suspect switching to R8G8B8A8 makes it invalid for two reasons; one that the stride is wrong and two that robustness disallows reading even one attribute out of the buffer (of size 3), (though our allocations may round it up to 16 bytes?).",
      "parentUuid": "1f3f5fa8_4a579e4f",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a11cde0d_45e9638e",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1505517
      },
      "writtenOn": "2021-05-19T22:32:45Z",
      "side": 1,
      "message": "Ah, I see, thanks!\nYeah if there\u0027s a mismatch in components between the shader and the glVertexAttribPointer input we\u0027ll definitely send in data we shouldn\u0027t be sending\n\nWe\u0027ll update it",
      "parentUuid": "99a33e30_acbd4ae4",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e11cac_73150ce5",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2607,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2021-05-21T05:49:29Z",
      "side": 1,
      "message": "Updated and tests has been added",
      "parentUuid": "a11cde0d_45e9638e",
      "range": {
        "startLine": 2607,
        "startChar": 16,
        "endLine": 2607,
        "endChar": 23
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d622906_44f36265",
        "filename": "src/tests/gl_tests/VertexAttributeTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1827,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-07T15:23:47Z",
      "side": 1,
      "message": "nit: please use getWindowWidth() and getWindowHeight() instead of fixed numbers.",
      "range": {
        "startLine": 1827,
        "startChar": 26,
        "endLine": 1827,
        "endChar": 34
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2da41b9e_b28b2922",
        "filename": "src/tests/gl_tests/VertexAttributeTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1827,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2021-05-18T04:07:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d622906_44f36265",
      "range": {
        "startLine": 1827,
        "startChar": 26,
        "endLine": 1827,
        "endChar": 34
      },
      "revId": "9245fc556b925f4b7375491bf5843fcade3e9c32",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}