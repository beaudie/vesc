{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b7b2cbf7_6e744b5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-19T03:59:55Z",
      "side": 1,
      "message": "Shouldn\u0027t this be caught by the translator (i.e. at compile time)?",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c45a265_7832b714",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-19T23:15:18Z",
      "side": 1,
      "message": "In ES3.2 spec(7.4.1),\n Tessellation control shader per-vertex output variables and blocks\n and tessellation control, tessellation evaluation, and geometry\n shader per-vertex input variables and blocks are required to be\n declared as arrays, with each element representing input or output\n values for a single vertex of a multi-vertex primitive. For the\n purposes of interface matching, such variables and blocks are\n treated as though they were not declared as arrays.\n\n For program objects containing multiple shaders, LinkProgram\n will check for mismatches on interfaces between shader stages in\n the program being linked and generate a link error if a mismatch\n is detected.\n\nThe spec says it should be link time. But the dEQP test appears to allow compile time error as well, went with what the spec wanted.",
      "parentUuid": "b7b2cbf7_6e744b5e",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a60a6a3d_77993bc9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-20T11:09:36Z",
      "side": 1,
      "message": "There are two things in that quote:\n\n1. Tess/geom input must be array\n2. Interface mismatch must generate error at link time (and also arrayness is dropped for the sake of this)\n\nThe first one is not an interface mismatch, it\u0027s a compile error. A separable program with only GS where input is not array should fail compile too, but doesn\u0027t with this change.",
      "parentUuid": "0c45a265_7832b714",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e80b651_3d2a66b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-04-01T23:09:44Z",
      "side": 1,
      "message": "\u003e The first one is not an interface mismatch, it\u0027s a compile error.\n\nCompile error for this case is not a mandatory.\n\nIn ES3.2 spec (11.2.3.3),\nA tessellation evaluation shader may also declare user-defined per-vertex input\nvariables. User-defined per-vertex input variables are declared with the qualifier\nin and have a value for each vertex in the input patch. User-defined per-vertex\ninput variables have a value for each vertex and thus need to be declared as arrays\nor inside input blocks declared as arrays. Declaring an array size is optional. If\nno size is specified, it will be taken from the implementation-dependent maximum\npatch size (gl_MaxPatchVertices). If a size is specified, it must match the\nmaximum patch size; otherwise, a compile or link error will occur.\n\nAlso, expected_compilation_result value set in this dEQP test is COMPILATION_RESULT_CAN_FAIL.\nThis flag allows both compilation pass and failure.\n\n\u003e A separable program with only GS ...\n\nspec. (11.3.4.3) -\nSimilarly to the built-in inputs, each user-defined input has a value for each\nvertex and thus needs to be declared as arrays or inside input blocks declared as\narrays. Declaring an array size is optional. If no size is specified, it will be inferred\nby the linker from the input primitive type. If a size is specified, it must match the\nnumber of vertices for the input primitive type; otherwise a link error will occur.\n\nThere is no mention about separable program case. But it should be same. link() function will be called before the test uses the program. and a link error will occur at that time.",
      "parentUuid": "a60a6a3d_77993bc9",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aefd833a_c8ad99b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-06T05:59:55Z",
      "side": 1,
      "message": "Thanks for the quote. Ok link failure instead of compile failure is fine (though I still think compile failure would be simpler). Could you please add a test with a separable GS-only program and link it? I suspect it wouldn\u0027t fail because `LinkValidateProgramVariables` is not called (because there are no two stages to match), so this solution is incomplete. Compile failure wouldn\u0027t have such a limitation.",
      "parentUuid": "9e80b651_3d2a66b5",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2c1e2f7_b6fcf701",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-04-13T15:42:34Z",
      "side": 1,
      "message": "With ToT ANGLE it already generates compiler error for the usecase you mentioned. It seems that a new function was added (wasn\u0027t there when the CL was first created) that generates error. This is the execution log -\n\nTest case \u0027KHR-GLES32.core.tessellation_shader.compilation_and_linking_errors.te_non_arrayed_per_vertex_input_blocks\u0027..\n\nWARN: glslang_wrapper.cpp:157 (GlslangCompileToSpirv): Internal error parsing Vulkan shader corresponding to 36487:\nERROR: 0:9: \u0027in\u0027 : type must be an array: _utest_block\nERROR: 1 compilation errors. No code generated.\n\nWARN: glslang_wrapper.cpp:157 (GlslangCompileToSpirv): Internal error parsing Vulkan shader corresponding to 36487:\nERROR: 0:9: \u0027in\u0027 : type must be an array: _utest_block\nERROR: 1 compilation errors. No code generated.\n\nINFO:\n\nPass (Pass)",
      "parentUuid": "aefd833a_c8ad99b7",
      "range": {
        "startLine": 10,
        "startChar": 11,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5de0d76_50b3892b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-19T03:59:55Z",
      "side": 1,
      "message": "Should",
      "revId": "97f7761631db75036ee961866a3dfdba75b52e4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}