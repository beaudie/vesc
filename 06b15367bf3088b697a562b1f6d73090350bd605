{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f5a931ba_a7087811",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-15T20:33:09Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d87c7e3b_0ab232ea",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 810,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-16T17:46:01Z",
      "side": 1,
      "message": "The simple fix I am thinking is with this one line change \n\nbool ShouldReleaseFreeBuffer(const vk::BufferHelper \u0026buffer)\n{\n    return buffer.getBufferBlock()-\u003egetMemorySize() !\u003d dynamicBufferSize;\n}\n\n(Other than your test and fix the assert at line 2479, and then remove all other unused policy related code). You can add a getBufferBlockMemorySize() to BufferHelpef class if you want to remove getBufferBlock() function in BufferHelper class. I just tested locally and your test did pass. \n\nThe whole policy thing was added most because there are many different usages of DynamicBuffer and since it is per object, we care about a lot more to shrink it as fast as we can. But now the dynamic buffer is only used for uniforms and attributes and client vertex streaming. These are all very simple use and they are per context. So the policy really isn\u0027t doing us much. This basically will only keep buffers that has same size. The diff is mostly going to delete the code that no longer used.",
      "range": {
        "startLine": 802,
        "startChar": 1,
        "endLine": 810,
        "endChar": 27
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ec546a_3debaa0b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 810,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-16T17:52:55Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/angle/angle/+/3469714",
      "parentUuid": "d87c7e3b_0ab232ea",
      "range": {
        "startLine": 802,
        "startChar": 1,
        "endLine": 810,
        "endChar": 27
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "205d1ae6_42426b68",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 810,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-16T20:14:53Z",
      "side": 1,
      "message": "+1 to Charlie\u0027s change. The policies are actually no longer used at all, so can be deleted.\n\nUnless proven necessary, ISGTM to release buffers on size change (provided the size change check is fixed).",
      "parentUuid": "71ec546a_3debaa0b",
      "range": {
        "startLine": 802,
        "startChar": 1,
        "endLine": 810,
        "endChar": 27
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd35a82_2e412868",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-15T21:58:06Z",
      "side": 1,
      "message": "I think this is a bit overly complicated. Now the dynamic buffer is only used by per context usages, and mostly for small allocations anyway, I think you no longer really need to rely on the size to decide if a free buffer should be reused or freed etc. I think we should simplify this logic rather than make it more complicated. What I was thinking is the releaseByPolicy should all removed and use the same mechanism that we prune the default buffer pool to free the buffers that aren\u0027t been used in the past 1 second. But again, these buffers are pretty small, so the gain here is quite small as well, which means lower priority.\n\nAlso, you can get size from the the buffer itself, I don\u0027t think you need to save it here(unless your refactor CL has changed it).",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41d2183e_5e6ed7d1",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-15T22:04:48Z",
      "side": 1,
      "message": "Charlie, seeing as this is a pretty good improvement, what about using the design as it stands now to save time. We can revisit a preferable design as a post-process.",
      "parentUuid": "acd35a82_2e412868",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cd1dee5_583767b5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-15T22:09:40Z",
      "side": 1,
      "message": "Just to give you a bit of additional info you may be missing:\n\nthe size of the original buffer is lost by \"setOffsetAndSize\". So we have no idea what was the size of the original buffer. Hence the need for the map based on size. Before your work to share a single dynamic buffer, we used a separate dynamic buffer per-Buffer, and so we could be sure we wouldn\u0027t be sharing different sizes.\n\nIn any case, I\u0027d suggest we go with this quite simple design for now, and do more risky redesigns in future improvements.",
      "parentUuid": "41d2183e_5e6ed7d1",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08b8f6a8_851c3ea3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-15T22:32:35Z",
      "side": 1,
      "message": "You can still get size by buffer-\u003egetBufferBlock()-\u003egetMemorySize(). I think in your previous CL, you removed getBufferBlock(), that is why you lost the access to memory size.\n\nI just think use hashMap here is overdone. When I was trying to change the vector to queue for mBufferFreeLists, I actually looked at a few app traces and stop in the middle of run and inspect the dynamic buffer. The free list usually only have one or two entries, so I concluded there is no point to improve it. I think the original code should be no worse than hashmap. (I am defending for Jamie here since I believe you wrote the original code :0).",
      "parentUuid": "4cd1dee5_583767b5",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683cc58f_3378b212",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-16T15:55:12Z",
      "side": 1,
      "message": "You may be under the impression the original code was correct? I had to make this change because we were re-using blocks with different sizes. I prefer the hashmap design because it allows us to treat the free lists like a queue instead of having to scan through to find an element at the middle of the list. Going to also add Shabi and Cody to this CL. Shabi/Cody, can you advise which design you prefer? I\u0027ll adopt that one. Either scan the free list (which is no longer a queue) or use several queues arranged by size. I would say the performance characteristics to both should be nearly identical, and this is a code style issue.",
      "parentUuid": "08b8f6a8_851c3ea3",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "374d7d95_1430ada7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-16T17:46:01Z",
      "side": 1,
      "message": "Understood. The fix I am proposing is only keep the free buffer that matches the size. See the other comment I added bellow. Like I said, the free list is most time 0 and occasionaly 1 or 2. Even if you want to scan it, simply walk the vector will have better performance than hashMap.",
      "parentUuid": "683cc58f_3378b212",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 159,
        "endChar": 77
      },
      "revId": "06b15367bf3088b697a562b1f6d73090350bd605",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}