{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bd20f207_c52da71a",
        "filename": "scripts/roll_aosp.sh",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-11-06T18:07:34Z",
      "side": 1,
      "message": "Highly recommend you do not use `rm -rf` in a shell script.  I\u0027ve seen catastrophic thing happens.  That variable may not always be something sensible.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "e70b1527e69f65af44044b4856761a9cb32df91e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec17a564_8e49b860",
        "filename": "scripts/roll_aosp.sh",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2020-11-06T18:58:14Z",
      "side": 1,
      "message": "Have a suggestion on a better way to do it? We\u0027d have to check if each file exists before trying to remove it (possible) but also I find that rm\u0027ing .git directories requires a -f due to all the write protected files.",
      "parentUuid": "bd20f207_c52da71a",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "e70b1527e69f65af44044b4856761a9cb32df91e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8db95f47_57382b08",
        "filename": "scripts/roll_aosp.sh",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-06T20:29:28Z",
      "side": 1,
      "message": "Does \u0027--preserve-root\u0027 work, to at least mitigate some of the risk?\n\nThere\u0027s also this idea:\nhttps://stackoverflow.com/a/1169300\n\u003e There is a set -u bash directive that will cause exit, when uninitialized variable is used.",
      "parentUuid": "ec17a564_8e49b860",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "e70b1527e69f65af44044b4856761a9cb32df91e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8b6a680_0ea6afcd",
        "filename": "scripts/roll_aosp.sh",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-11-06T21:46:41Z",
      "side": 1,
      "message": "If the error is just non-existent files, not permissions problems, you can disable error checking before running rm, then restore it afterwards:\n\n set +e\n rm foo\n set -e\n\nYou can also run the command with `|| true` to avoid exiting:\n\n rm foo || true\n\nA couple more ideas in the thread below.\n* You could use find with the -delete option.\n* You could touch non-existent files before attempting to delete.\nhttps://unix.stackexchange.com/questions/280067/have-rm-not-report-when-a-file-is-missing",
      "parentUuid": "8db95f47_57382b08",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "e70b1527e69f65af44044b4856761a9cb32df91e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19d6378c_fc6bfcef",
        "filename": "scripts/roll_aosp.sh",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-06T22:30:13Z",
      "side": 1,
      "message": "Also `test -f $file \u0026\u0026 rm $file` and `test -d $dir \u0026\u0026 rm -r $dir`",
      "parentUuid": "a8b6a680_0ea6afcd",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 29
      },
      "revId": "e70b1527e69f65af44044b4856761a9cb32df91e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}