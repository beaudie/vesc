{
  "comments": [
    {
      "key": {
        "uuid": "e6d0e8d7_339d0f5c",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-12T13:52:13Z",
      "side": 1,
      "message": "What if we put the error set into ContextState so it could be accessible to both Context and ContextImpl",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e09c1c9a_b05388b2",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-13T12:28:30Z",
      "side": 1,
      "message": "If we make it a member of ContextImpl we can modify it without mutable. I changed the code such that handleError is now non-const and the ErrorSet no longer uses mutable. There\u0027s only one place in Framebuffer where this is an issue. And this will go away once the refactor is complete. LMK if you are ok with this explanation.",
      "parentUuid": "e6d0e8d7_339d0f5c",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d834c707_852768b1",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-13T15:53:56Z",
      "side": 1,
      "message": "I think that I\u0027m most concerned about the tight coupling between the classes (Context and ContextImpl holding ErrorSet which holds a Context and makes callbacks) but I understand that this is the first case of wanting the impl to modify the Context\u0027s state.  I don\u0027t know the best way to reconcile this but using mutable members does seem better than too much tight coupling.",
      "parentUuid": "e09c1c9a_b05388b2",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab0b841e_3f5c7e5e",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-13T16:07:08Z",
      "side": 1,
      "message": "Actually we already use this passing-a-pointer pattern for the memory program cache. It works great because it allows us to avoid using the mutable kludge. I\u0027m very against using mutable everywhere as it breaks thread-safety. Can you let me know if you are ok with me landing this CL? We can always change things later if there\u0027s some other issue that comes up.",
      "parentUuid": "d834c707_852768b1",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e371efc_934f11fc",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-13T17:01:36Z",
      "side": 1,
      "message": "Yep let\u0027s land it, I don\u0027t have a better solution.",
      "parentUuid": "ab0b841e_3f5c7e5e",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b6c260c_4077df13",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 1592,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-13T17:06:52Z",
      "side": 1,
      "message": "Great, thank you.",
      "parentUuid": "6e371efc_934f11fc",
      "range": {
        "startLine": 1592,
        "startChar": 4,
        "endLine": 1592,
        "endChar": 21
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "177c7d57_e6858609",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-12T13:54:39Z",
      "side": 1,
      "message": "Could these be called Error and Success instead?",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 273,
        "endChar": 54
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49242f57_b941ce63",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-13T12:28:30Z",
      "side": 1,
      "message": "isError is named that way for compatibility with the macro. But naming the methods Stop() and Continue() will let us also use Stop() for \"early-exit\" scenarios. For example when we detect a no-op draw we can return Stop() but not generate an error. It\u0027s not technically an error in that case.\n\nI changed the comments here to make this clearer. LMK if this seems acceptable to you.",
      "parentUuid": "177c7d57_e6858609",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 273,
        "endChar": 54
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda09405_ff5e86df",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-13T15:53:56Z",
      "side": 1,
      "message": "Yea, that\u0027s fine.  Returning Continue from functions to indicate success is just feels awkward.",
      "parentUuid": "49242f57_b941ce63",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 273,
        "endChar": 54
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac8beb41_d4e11dcc",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 276,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-07-12T13:56:52Z",
      "side": 1,
      "message": "I don\u0027t see the implementation of this.",
      "range": {
        "startLine": 276,
        "startChar": 4,
        "endLine": 276,
        "endChar": 31
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52aa4326_8a004380",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 3
      },
      "lineNbr": 276,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-07-13T12:28:30Z",
      "side": 1,
      "message": "Good catch, done.",
      "parentUuid": "ac8beb41_d4e11dcc",
      "range": {
        "startLine": 276,
        "startChar": 4,
        "endLine": 276,
        "endChar": 31
      },
      "revId": "72f8e19d789b8bf613797b128357187cb57d05fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}