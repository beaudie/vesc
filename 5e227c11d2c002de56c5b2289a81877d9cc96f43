{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7a885ad6_14236143",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-08T16:37:13Z",
      "side": 1,
      "message": "I wonder if we can detect undefined texture contents in capture instead of forcing everything to be defined in the tests.",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31e7239d_19139717",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-09T15:28:51Z",
      "side": 1,
      "message": "\u003e I wonder if we can detect undefined texture contents in capture instead of forcing everything to be defined in the tests.\n\nThat\u0027s difficult, because the texture data can be initialized in many ways: \n\n* plain data upload through glTexImage*\n* data upload through a pixel pack buffer through glTexImage*\n* glClearTexture\n* data upload through glTexSumImage*\n* data upload through a pixel pack buffer through glTexSumImage*\n* CopyImageSubData \n* glCopyTexImage2D\n* texture is a render target \n\nOnly in the first three cases the initialization is guaranteed to be complete. \n\nI only could imagine that one could add some code so that the texture contents is forcefully initialized when tests are run (same as valgrind and other memory debuggers \"initialize\" uninitialized memory to keep track of uninitialized values.",
      "parentUuid": "7a885ad6_14236143",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07673e8f_08f1cd4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T15:44:03Z",
      "side": 1,
      "message": "ANGLE does track uninit contents already, although it looks like this tracking is disabled when the resource resource init extension is disabled.\n\nI wonder if we could track this specifically for frame capture. It may be a slightly bigger scope for something you can easily work around on a per-test basis, but it would be a more complete fix. What do you think Cody/Gert? The change would be to implement just the tracking of uninit data without the resource initialization step we do before the draw for WebGL.",
      "parentUuid": "31e7239d_19139717",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab370714_21c5e77e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T15:44:03Z",
      "side": 1,
      "message": "ANGLE does track uninit contents already, although it looks like this tracking is disabled when the resource resource init extension is disabled.\n\nI wonder if we could track this specifically for frame capture. It may be a slightly bigger scope for something you can easily work around on a per-test basis, but it would be a more complete fix. What do you think Cody/Gert? The change would be to implement just the tracking of uninit data without the resource initialization step we do before draws in WebGL.",
      "parentUuid": "31e7239d_19139717",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3c85ab5_0952f91e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T15:46:43Z",
      "side": 1,
      "message": "We could also enable robust init during capture, or replay. During capture is bad, because it\u0027s disruptive, and also during replay because it affects performance in a significant way.",
      "parentUuid": "ab370714_21c5e77e",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8305887c_ace5dddd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T15:47:12Z",
      "side": 1,
      "message": "One last thought - in the self-tests, we could enable robust init because performance doesn\u0027t matter. Maybe that\u0027s the easiest fix for now.",
      "parentUuid": "d3c85ab5_0952f91e",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc0ad96_4f6b0126",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-10T05:56:00Z",
      "side": 1,
      "message": "The easiest way would be to enable RobustResourceInit in ANGLETest then, but there is an extra test for RobustResourceInit, so wouldn\u0027t it be better to still initialize RobustResourceInit on a per case basis?",
      "parentUuid": "8305887c_ace5dddd",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85b389f0_5ea63656",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-10T13:38:11Z",
      "side": 1,
      "message": "I think the best option would be to force on robust init for all testing scenarios with capture/replay, using an override. Even if the feature interacts with some of the tests, seemingly it shouldn\u0027t break those tests. I don\u0027t know if I\u0027d want to maintain a list of specific tests that we enable it with, seems like more maintenance long-term.\n\nI\u0027d suggest adding a \"front-end feature\" to ANGLE, and using the right environment variable to override this in the test harness when we run the test replay executable.\n\nFront-end features:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/include/platform/FrontendFeatures.h;l\u003d11?q\u003dfrontendfe\u0026sq\u003d\u0026ss\u003dchromium\n\nExample extension override using a front-end feature:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/include/platform/FrontendFeatures.h;l\u003d11;bpv\u003d1;bpt\u003d1?q\u003dfrontendfe\u0026ss\u003dchromium\n\nYou\u0027d be enabling an ext rather than disabling.\n\nAdditionally the env variable is here:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/renderer_utils.cpp;l\u003d984?q\u003dangle_Feature_overrides_enabled\u0026ss\u003dchromium\n\nYou could alternately make this a flag to angle_end2end_tests but I think the feature is better because it would act directly on ANGLE instead of the test harness. Otherwise if we wanted to use it with other tests we\u0027d have to also add it to them (potentially).\n\nWDYT?",
      "parentUuid": "bcc0ad96_4f6b0126",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f750740_4f24a602",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-10T13:55:57Z",
      "side": 1,
      "message": "If the tests still run with RobustResourceInit, even if they don\u0027t pass, this sounds good to me as a systemic fix for uninitialized resources.",
      "parentUuid": "85b389f0_5ea63656",
      "revId": "5e227c11d2c002de56c5b2289a81877d9cc96f43",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}