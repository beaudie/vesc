{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48bc2730_4b3b7d4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:29:54Z",
      "side": 1,
      "message": "Courtney: can you set this up so we can look at angle_perftests --gtest_filter\u003dDrawCallPerfBenchmark.Run/vulkan_null and see that it\u0027s using multiple threads? We should even be able to log a call trace with ANGLE_TRACE_EVENT in multiple threads though that might take a bit more plumbing.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b726c4bf_987e0b6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:44:55Z",
      "side": 1,
      "message": "Actually, this should be /vulkan, not /vulkan_null.\n\nI tried with VTune and can see the work gets split between two cores. Unfortunately thoughput doesn\u0027t go up. Might be being limited by another factor. Since it takes load off of one core though, it should improve CPU bound scenarios.",
      "parentUuid": "48bc2730_4b3b7d4b",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6895cfc9_f7e8ad90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:48:47Z",
      "side": 1,
      "message": "Tested with Manhattan trace, got these results in VTune: https://imgur.com/a/S3KT55m\n\nThroughput went up slightly (maybe 3-4%).",
      "parentUuid": "b726c4bf_987e0b6b",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac016f99_56e9e5d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-06T23:52:35Z",
      "side": 1,
      "message": "Cool!\nI\u0027ve got an AGI trace from manhattan (some random early frame) that shows two threads issuing Vulkan commands. I posted screenshot in the Threading doc.\ngo/angle-vk-threading\nI know there is additional work needed to get more parallelism. Wanted to get a baseline in that works and at least has similar perf and work from there.",
      "parentUuid": "6895cfc9_f7e8ad90",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a1b5af2_ba9baa43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-07T00:11:03Z",
      "side": 1,
      "message": "I ran an experiment where I shut down all Chrome \u0026 background processes, then used scripts/perf_test_runner.py to generate a ton of data, discard the outliers, and compute the mean. I found an average of 2.14-2.15 ms / frame before your patches and 2.18-2.19 after. So a regression, unfortunately. My earlier numbers were a quick few runs with a bunch of background noise so probably that skewed the results.",
      "parentUuid": "ac016f99_56e9e5d4",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e9ea0b8_877781e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-07T00:11:57Z",
      "side": 1,
      "message": "Will have to do more measurements on Android.",
      "parentUuid": "4a1b5af2_ba9baa43",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a78ce6c_e7675592",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Definitely an impressive change.   Especially with taking it over from someone else.\n\nFirst pass with mostly nits and questions.   I can\u0027t say I know how these changes affect the fence/sync stuff, so hopefully Jamie/Shabi can look at that.\n\nI mention it in one of my comments, but I want to bring it up here too.   My biggest concern is the split in the code base that\u0027s being generated between the single- and multi-threaded designs.   There is a lot of dead code being generated by the enableCommandProcessingThread.enabled checking.   Some functions are essentially emptied by beginning with:\n\n    ASSERT(!getRenderer()-\u003egetFeatures().enableCommandProcessingThread.enabled);\n\nI understand there will be a transition period while bugs are ironed out, but we should commit to removing the dead path once we\u0027ve made a decision to go with this design and it\u0027s \u0027good enough\u0027 (whatever that bar is).   Otherwise, there will be a lot of complex untested code that ends up rotting, probably quicker than we expect considering the breadth of this change.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc200cd_acd3a28d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "I suspect we may have to disable threaded-submit due to bugs/efficiency/etc in the future based on a feature. What I always thought the code would look like is\n\n- Pretend it\u0027s threaded everywhere\n- Inside CommandProcessor::queueCommand() immediately process the task if not threaded.\n\n---\n\nEdit: and I just checked and that\u0027s exactly what\u0027s happening now. With the current change that code is never exercised because there\u0027s also a check for threaded-submit before queuing tasks, but it will eventually do the job.",
      "parentUuid": "9a78ce6c_e7675592",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "071c4011_80f2657e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Yes, that is the plan, remove the old code once the new code is proven.\nAs intermediate step we can use the new code in \"single thread\" mode if threading has some regressions we need to fix up.",
      "parentUuid": "cdc200cd_acd3a28d",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4829c7ba_4b207643",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Fixed up a bunch of the minor stuff.\nWill follow-up with some of the larger changes plus whatever results from ongoing discussions / questions not marked as resolved.\nTim, most of those are questions from you. If my answer is sufficient just ACK.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2db899f2_856fa72b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "Hey Courtney. PTAL at comments below. I spent more time on CommandProcessor.h than the other code.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc7a5786_fbc76f49",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 46
      },
      "lineNbr": 346,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "\"Parallel thread\" and \"parallel thread execution\" is a bit confusing re: the naming. Maybe something like enableCommandProcessor and multiThreadedCommandProcessor/singleThreadedCommandProcessor?",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 346,
        "endChar": 36
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88824fca_7b2482ab",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 46
      },
      "lineNbr": 346,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Yeah, this naming is not quite right.\nmultiThreadedCommandProcessor/singleThreadedCommandProcessor doesn\u0027t seem quite right either.\nThe intent of this flag is to allow the command processing thread to run in parallel with the main thread(s). If not running in parallel, we still do the command processing on a separate thread but the main thread waits until the processing is complete before continuing.\nMaybe enableAsynchronousCommandProcessing? enableConcurrentCommandProcessing?",
      "parentUuid": "fc7a5786_fbc76f49",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 346,
        "endChar": 36
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1991b8cb_bf4842d7",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 46
      },
      "lineNbr": 346,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "Oh I see. I don\u0027t think we\u0027d want to use two threads in the \"disabled\" situation. We can revisit this later, but I\u0027d like to resolve the naming. asynchronousCommandProcessing is fine with me. Skip the redundant \u0027enable\u0027.",
      "parentUuid": "88824fca_7b2482ab",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 346,
        "endChar": 36
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50a4d7ad_1e9e8a09",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 46
      },
      "lineNbr": 346,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T22:15:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1991b8cb_bf4842d7",
      "range": {
        "startLine": 341,
        "startChar": 0,
        "endLine": 346,
        "endChar": 36
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78185827_c1ca2ac4",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 46,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Rather than the assert above (which isn\u0027t really checking the whole struct is 0\u0027ed out), can this be changed to:\n\n    submitInfo-\u003esignalSemaphoreCount \u003d signalSemaphore ? 1 : 0;\n    submitInfo-\u003epSignalSemaphores    \u003d signalSemaphore ? signalSemaphore-\u003eptr() : nullptr;\n\nI would assume the compiler is smart enough to realize that\u0027s actually an if-else, but if it reads better we can be more explicit about it:\n\n    if (signalSemaphore)\n    {\n        submitInfo-\u003esignalSemaphoreCount \u003d 1;\n        submitInfo-\u003epSignalSemaphores    \u003d signalSemaphore-\u003eptr();\n    }\n    else\n    {\n        submitInfo-\u003esignalSemaphoreCount \u003d 0;\n        submitInfo-\u003epSignalSemaphores    \u003d nullptr;\n    }",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 46,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea82003b_2a716d40",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 46,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78185827_c1ca2ac4",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 46,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f826f8c_f5a07183",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 97,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why don\u0027t we have a queue family index at ctor time, even though we have a RendererVk?",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 97,
        "endChar": 80
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5684ba87_75cd6511",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 97,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "That\u0027s not known until we run RendererVk::initializeDevice. That will happen before we get to where we call this.\nThe general code pattern is to construct with default / invalid values and then fill in with real info in an init function. Since CommandProcessor (and thus CommandWorkQueue is part of RendererVk, need to wait until the RendererVk\u0027s initializeDevice function is called before we know what these details.)",
      "parentUuid": "1f826f8c_f5a07183",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 97,
        "endChar": 80
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb01c9a3_1149a239",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 97,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "why not pass the family index to init()?",
      "parentUuid": "5684ba87_75cd6511",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 97,
        "endChar": 80
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb0ff741_316c1c10",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 207,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return mPrimaryCommandPool.collect(this, std::move(commandBuffer));",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f956a78_bd7011a4",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 207,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb0ff741_316c1c10",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c37c03d_5ef3c95e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 249,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Do we need a bug to track this?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e0a46de_4fee1fcc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 249,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c37c03d_5ef3c95e",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f35e3e_72745a93",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 267,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Open a bug to investigate if this is a good optimization.",
      "range": {
        "startLine": 266,
        "startChar": 0,
        "endLine": 267,
        "endChar": 68
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f880146d_a1c54c0c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 267,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52f35e3e_72745a93",
      "range": {
        "startLine": 266,
        "startChar": 0,
        "endLine": 267,
        "endChar": 68
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f31e6295_f4724e1a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 294,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "ANGLE_VK_TRY(this, batch.fence.get().wait(device, timeout));",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 294,
        "endChar": 31
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98fb0fd2_b4cf80f8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 294,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f31e6295_f4724e1a",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 294,
        "endChar": 31
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "936c226c_bb478861",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 298,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return checkCompletedCommands(renderer);",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 298,
        "endChar": 18
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96be8f6d_74d1283e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 298,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "936c226c_bb478861",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 298,
        "endChar": 18
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "717a7861_f9293f4f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 344,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why do we only finish 1 command here, rather than half (or all) while we rebuild the next list of commands?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "605d0a8f_c3445314",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 344,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "This is a copy of what the CommandQueue::submitFrame is doing.\nThat\u0027s the minimum amount needed to get below the kInFlightCommandsLimit.\nSomewhat arbitrary.",
      "parentUuid": "717a7861_f9293f4f",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eacb2da_e26464e1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 350,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: don\u0027t need const on value data. there\u0027s a link for this in the style guide.",
      "range": {
        "startLine": 350,
        "startChar": 70,
        "endLine": 350,
        "endChar": 75
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "727b9f90_0b291c1c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 350,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6eacb2da_e26464e1",
      "range": {
        "startLine": 350,
        "startChar": 70,
        "endLine": 350,
        "endChar": 75
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9530d9da_080a7a15",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "You should be able to ASSERT(mCommandsQueue.empty()).\n\nWould ASSERT(!mWorkerMutex.try_lock()) work?",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bbfac0d_c3e41422",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I don\u0027t have access to the command queue or mutex from inside CommandWorkQueue. Yeah, class name doesn\u0027t make a lot of sense if it can\u0027t see the queue. Been thinking of changing it to CommandWorker? TaskProcessor? as this is the class that the command tasks get done it, it\u0027s not what\u0027s watching the work queue.\nWhen I incorporate fence management into CommandProcessor this will go away.",
      "parentUuid": "9530d9da_080a7a15",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3a87690_185076a7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Oh, you\u0027re right, those are in the CommandProcessor.\n\nYeah, CommandWorkQueue isn\u0027t a great name.   I do like TaskProcessor, since that class is internal to how this command processing is implemented and much more related to what this class is doing.\n\nSince this specific function should be going away relatively soon, I\u0027m fine with skipping trying to assert those conditions are true.",
      "parentUuid": "1bbfac0d_c3e41422",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf9afed6_48321489",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "CommandTaskProcessor SGTM, this relates to my other comment.\n\nCan you pass in the CommandProcessor here?",
      "parentUuid": "c3a87690_185076a7",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8872e143_b2616ca8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "CommandTaskProcessor it is.\n\n\u003e Can you pass in the CommandProcessor here?\nThis function is only called from the CommandProcessor class (CommandProcessor::getLastSubmittedFence) so I could pass that in, but not sure it makes sense.\nNothing else has access.",
      "parentUuid": "cf9afed6_48321489",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5497e885_e6cbd902",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Some renaming, hopefully make things more clear.",
      "parentUuid": "8872e143_b2616ca8",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c5d65f7_d2058e37",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T17:09:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5497e885_e6cbd902",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7bfedac_0b3501bd",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can this function be marked protected so only the CommandProcessor can call it?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26c744d2_1ffe854d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "It would be nice if the thread ids of the two threads are stored, with each function ASSERTing that it\u0027s called from the right thread. When not multi-threading, the two thread ids would be the same.",
      "parentUuid": "e7bfedac_0b3501bd",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bad4562f_7950668a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "CommandProcessor and CommandWorkQueue are separate classes. The protected access specifier is to specify that certain methods are accessible by subclasses but not other users of the class. So I don\u0027t think that works here.\nBut since CommandWorkQueue is a member of the CommandProcessor class and the field mCommandWorkQueue is private, only CommandProcessor can call this function.\n\n@Shabi - it\u0027s not that simple. CommandProcessor can be called from multiple ContextVk\u0027s running in different threads, so storing threadid on that side isn\u0027t useful. We could store the worker tid and check against that though not sure it\u0027s really necessary. Even that\u0027s complicated in that the task processing happens on the worker thread but other interface functions to the worker happen on the main thread.",
      "parentUuid": "26c744d2_1ffe854d",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b4adc54_b6559819",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-08T15:53:39Z",
      "side": 1,
      "message": "Ack from me.",
      "parentUuid": "bad4562f_7950668a",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ea63b42_e679ac7e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "I wonder if any mention of locks should be removed from these functions to try and remove any confusion/concern.\n\nAll of these functions are called by the CP thread underneath the mWorkerMutex lock, which was acquired by CommandProcessor::processCommandProcessorTasksImpl().   While it\u0027s not entirely obvious that the lock will have been acquired by a separate class, I\u0027m not sure pointing that out here is helping much either.",
      "parentUuid": "bad4562f_7950668a",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62a789d8_573bdcfd",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "Having some ASSERT(isMainThread()) and ASSERT(isSubmitThread()) or ASSERT(isCommandProcessorThread()) would be warmly welcome.",
      "parentUuid": "7ea63b42_e679ac7e",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e697ac73_d9403279",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Added some ASSERTs for task processor functions (queueSubmit and submitFrame).",
      "parentUuid": "62a789d8_573bdcfd",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "451c78c5_e8b94039",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T17:09:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e697ac73_d9403279",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8cb12c_3456b06a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 370,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "RendererVk::queueSubmit() has these same 2 lines.   We should find a way to allow them to both call into the same function that does this, especially since we\u0027re asking the RendererVk for the queue info in this call chain: mRenderer-\u003egetVkQueue(task.mPriority).",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce0cb15_c6436c61",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 370,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Once we switch over the RendererVk function will go away. Can only have one path to vkQueueSubmit.\nRegarding getVkQueue, I\u0027ve been pondering if that info should move into CommandProcessor as well.",
      "parentUuid": "dc8cb12c_3456b06a",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15151b0e_5e8f0b22",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 370,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Yeah, since everyone seems to agree that we don\u0027t want to maintain both code paths, I\u0027m fine with skipping this work.\n\nThe getVkQueue() thing can wait until we get a better picture of what that version looks like.",
      "parentUuid": "dce0cb15_c6436c61",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc0b616_63aee233",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 372,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return vkQueueSubmit(queue, 1, \u0026submitInfo, handle);",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 372,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64bdb316_c57787fb",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 372,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "vkQueueSubmit returns a VkResult not an angle::Result so still need the ANGLE_VK_TRY.",
      "parentUuid": "dcc0b616_63aee233",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 372,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08f0eeee_04549f20",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 428,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: disabled",
      "range": {
        "startLine": 428,
        "startChar": 35,
        "endLine": 428,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "860a9324_bdbc3b3f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 428,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08f0eeee_04549f20",
      "range": {
        "startLine": 428,
        "startChar": 35,
        "endLine": 428,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f60a16c_17201ee9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "If multithreading is disabled, who is doing the work that this is waiting on?\n\nIs the intent that this is \"waiting\" on an already signaled condition, since the previous call to processCommandProcessorTasksImpl() signaled it already?   Can this ASSERT(mCommandsQueue.empty) instead (or whatever would be relevant to check here), rather than deadlocking if there\u0027s a bug?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1af240c_9b774a3a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "Right, this is missing a call to `processCommandProcessorTasks()`.",
      "parentUuid": "6f60a16c_17201ee9",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52e28a75_e1a9e610",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "My intent here is that we still have a separate worker thread and if we got here with ParallelCommandProcessing disabled then we want to wait for each command to complete before returning. Right now it\u0027s not possible to get here, but when we remove the CommandQueue path we could keep the feature flag and it would mean do the work now, though the work still happens on a separate thread.",
      "parentUuid": "a1af240c_9b774a3a",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d006478_9caa943f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Ah, yeah, I was missing that \"parallel command processing disabled\" is not the same thing as \"multithreading disabled\".   There will still be multiple threads executing all of this, but only ever a single command being built/processed at a time, so one thread is always stalled while the other works.",
      "parentUuid": "52e28a75_e1a9e610",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7945f48_3dd9d543",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 438,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "How does CustomTask::Exit get issued if the main thread is inside this loop processing commands forever?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f095f6d8_7eb77425",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 438,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "This is the worker processing loop.\nIt\u0027s started in RendererVk::initialize.\nThere are handful of things that are shared between the CommandProcessor (main thread(s)) and CommandWorkQueue (~worker thread). Those all live in the CommandProcessor class with pieces of the worker in that class so that they can access the shared data (e.g. mWorkerMutex, condition variables, command/task queue. Then once the worker has pulled a task of the queue it calls into CommandWorkQueue to do the work and doesn\u0027t need access to any of the sync data in CommandProcessor.\nHaving part of the worker code live in CommandProcessor bugs me but I\u0027m not sure it\u0027s worth it to refactor - to do so would require defining a shared structure that both the worker and CommandProcess can access for the shared bits.",
      "parentUuid": "a7945f48_3dd9d543",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15c45aaa_23930558",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 438,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Same as above, this is my misunderstanding of what it means to disable the multithreading.",
      "parentUuid": "f095f6d8_7eb77425",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09b32f47_cb3e5155",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This should probably have an UNREACHABLE() at the least, so we can get some visibility into any cases that hit this.",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d692300_8fd6845f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "Probably the best course of action is to keep the result around and drop every command that follows. Next time the main thread synchronizes with this thread it can ANGLE_VK_TRY the result which will lead to a device loss.\n\nThat mirrors the behavior we currently have.",
      "parentUuid": "09b32f47_cb3e5155",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f31de7e8_bd6c41f2",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I\"ve tagged it with the error processing follow-up bug ID and added UNREACHABLE().",
      "parentUuid": "9d692300_8fd6845f",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f8ede01_74f36ff0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "See my other comment. We can\u0027t turn this on at least until this is resolved. Please update the TODO to be less ambiguous.",
      "parentUuid": "f31de7e8_bd6c41f2",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1c8380_92d45d40",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 476,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Is this brace lost?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd325373_0537553a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 476,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "No, that\u0027s part of the lambda function that the condition variable uses to determine if it should return from the condition or go back to sleep.\nThis says go to sleep waiting for events on mWorkAvailableCondition. When we get an event run the lambda function to determine if we should resume or go back to sleep again.",
      "parentUuid": "cd1c8380_92d45d40",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49443bbb_90fa07a5",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 476,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Oops.   This was from a gerrit issue I was seeing where it had randomly missing lines of code and big blank spots, so this brace was just out there on its own.   I thought I deleted this comment after refreshing, but apparently not.",
      "parentUuid": "bd325373_0537553a",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd61aba8_e0b0d273",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 554,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a bug number.",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 554,
        "endChar": 30
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d5560fc_2bde8858",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 554,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd61aba8_e0b0d273",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 554,
        "endChar": 30
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b93446d_053f6f30",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 573,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "How do we guarantee that this error is cleared before the next command is submitted (which could also immediately hit an error), so we don\u0027t lose the second error?\n\nOr is that part of the TODO improvements?",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 573,
        "endChar": 95
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45be7146_b2fb02d7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 573,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I\u0027ve filled a follow-up bug for this work.\nRight now, the caller in WindowSurfaceVk::present will issue the task and immediately wait for the worker thread to process it and then query for errors.\nHmm, that\u0027s not thread safe. This might be a good case for Jamie\u0027s suggestion of a queueCommandWithWait to ensure that we get the result we intend. This is unlikely to trigger an error and is one of the first follow-up tasks I want to work on.",
      "parentUuid": "6b93446d_053f6f30",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 573,
        "endChar": 95
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77bab568_dd2d3ed8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 574,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a bug number.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5925f48b_60242ee6",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 574,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77bab568_dd2d3ed8",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e44bcde_9714cc2e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 583,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "do not ever use mContextVk for an ANGLE_TRY. that\u0027s a race. you\u0027ll need to make one of your classes (e.g. CommandProcessor itself) inherit from vk::Context. I went over this with Tobin in detail a few times, looks like it might have got lost in transition.\n\nI haven\u0027t looked closely at how you would pass message back to a ContextVk when there is an error in the submission. First thing I would think is you should fail unrecoverably on a submit error and report the error to all contexts and stop processing any additional work.",
      "range": {
        "startLine": 583,
        "startChar": 12,
        "endLine": 583,
        "endChar": 21
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0e48024_8bd483bc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 583,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e44bcde_9714cc2e",
      "range": {
        "startLine": 583,
        "startChar": 12,
        "endLine": 583,
        "endChar": 21
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c02d129b_624d61dc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 606,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "It would be cool if we could do some useful background work rather than just sitting here idle, like freeing resources or something.   I\u0027m not sure how possible that is (or even what to do), but it\u0027s a shame to just do nothing for a while.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc02908a_9ec313eb",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 606,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "The hope is that the worker has already done it or is in the process.\nWe use this when we need to know that work has been submitted to the HW.\nWith the follow-up work to incorporate fences this should be needed very infrequently.",
      "parentUuid": "c02d129b_624d61dc",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "066c595e_11bd7cb9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 613,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "lock is a std::unique_lock, so this is unnecessary.   Remove.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "644f8b0e_d61fc96c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 613,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "066c595e_11bd7cb9",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e14ddf69_c17e0018",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 633,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why does mCommandsQueue need to be empty before we can look at mInFlightCommands.back().fence?",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 633,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bb7bae4_b81a26b1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 633,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "mInFlightCommands is not filled in until the worker thread executes the corresponding queueSubmit. Before, once you called CommandQueue::queueSubmit we put the necessary info on to mInFlightCommands. Now I can\u0027t do that until we actually process the associated queueSubmit command. By waiting for all the commands to be processed we know the fence info is on the mInFlightCommands list and we can grab it.\nThis will change when I incorporate fence ownership into the CommandProcessor.",
      "parentUuid": "e14ddf69_c17e0018",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 633,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a351902e_db073d17",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 645,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "remove",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e09d688_e76b53f0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 645,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a351902e_db073d17",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25dd5986_f8061a9a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 646,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return mCommandWorkQueue.getLastSubmittedFenceWithLock(mRenderer-\u003egetDevice());",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 17
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14ec2d57_88c2fb7b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 646,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25dd5986_f8061a9a",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 17
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb528734_1070c398",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 659,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "From my reading of this, the reason it\u0027s nice to have the CommandProcessor own the Serials is so that it can generate new Serials whenever the main thread submits new commands, whereas the RendererVk only generates a new Serial during RendererVk::queueSubmit() which isn\u0027t called anymore.\n\nI think these Serials need to be unified somewhere, rather than having this duplication since presumably one of them will essentially never be used again once we go all-in on threading (or not).   The RendererVk already has a Serial and associated lock, so we should find a way to re-use that or move them both somewhere common.\n\nThis really leads into a bigger issue I have with the enableCommandProcessingThread.enabled checking that\u0027s being spread throughout the code base.   It feels like one of these paths will eventually be dead code (probably quicker than we think), since we won\u0027t go through all of our testing with the feature enabled and disabled.",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 659,
        "endChar": 1
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd4099be_f1006ada",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 659,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "As discussed, the RendererVk bits taken over by CommandProcessor will be removed.",
      "parentUuid": "bb528734_1070c398",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 659,
        "endChar": 1
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d208161_1bb160f3",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 683,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "remove",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55a375f6_35182ab0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 683,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d208161_1bb160f3",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "367db633_e7cffda3",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 31,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: spacing in a few of these comments.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 4
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "677cacfa_edc1b8fb",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 31,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "367db633_e7cffda3",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 4
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dff1129_21d9e052",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 39,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "these don\u0027t seem to exist in the enum.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fe76a1e_929ff437",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 39,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Cleaned up.",
      "parentUuid": "0dff1129_21d9e052",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75463875_83caf43a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 40,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can you move these descriptions down to the enum values themselves?   Doing that should help keep the comments in sync with the values they\u0027re describing (which doesn\u0027t appear to be the case right now).\n\nSomething like:\n\n    enum CustomTask\n    {\n        Invalid \u003d 0,\n        // Process SecondaryCommandBuffer commands into the primary CommandBuffer.\n        FlushToPrimary,\n        FlushAndQueueSubmit,\n        OneOffQueueSubmit,\n        // Finish queue commands up to given serial value\n        FinishToSerial,\n        // Execute QueuePresent\n        Present,\n        CheckCompletedCommands,\n        ClearAllGarbage,\n        Exit,\n    };",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 40,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93a1247e_6ce49d6f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 40,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75463875_83caf43a",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 40,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af9239cd_e5f6e581",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 44,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "I\u0027d call this something more like \"here\u0027s a command buffer\".. like just \"ProcessCommands\" or something.",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 18
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab0ed2c_e84adb82",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 44,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af9239cd_e5f6e581",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 18
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c368ee95_5dbcd0b0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "you don\u0027t have a description for this command. I don\u0027t immediately grasp what it\u0027s doing and why it is necessary.",
      "range": {
        "startLine": 49,
        "startChar": 4,
        "endLine": 49,
        "endChar": 26
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0bae3ce_ee1ea580",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 49,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Removed, don\u0027t need it.",
      "parentUuid": "c368ee95_5dbcd0b0",
      "range": {
        "startLine": 49,
        "startChar": 4,
        "endLine": 49,
        "endChar": 26
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a77ddf4_4d95e4f4",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 50,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "Do you know what calls this? I wonder if we could merge this with another command.",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de4edbf_395fb1e0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 50,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "This is called by RendererVk::deviceWaitIdle, queueWaitIdle and ContextVk::finishImpl. Basically when we know all work should be done, clear out any remaining garbage.",
      "parentUuid": "9a77ddf4_4d95e4f4",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8527e67_ca60dcf9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 50,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "Seems like it\u0027d duplicated with a \"FinishEverything\" task. Can you consolidate that? When to clear garbage isn\u0027t part of the job of the calling thread.",
      "parentUuid": "9de4edbf_395fb1e0",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78722989_2eed9395",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 50,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T22:15:29Z",
      "side": 1,
      "message": "Removed extra calls. Now only called the same place CommandQueue::clearAllGarbage is called as part of finishImpl. Though if you did finishToSerial to last known serial that should cause the garbage to be cleaned up.",
      "parentUuid": "e8527e67_ca60dcf9",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0307f632_ffb1a8fc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 50,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-18T22:54:22Z",
      "side": 1,
      "message": "Can you make that change so we can remove clearAllGarbage as a command?",
      "parentUuid": "78722989_2eed9395",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdc084fa_12247bbe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 54,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: \"worker thread\" is a bit vague, especially if we introduce another thread somewhere else in ANGLE.   I\u0027d prefer if we refer to the new thread as the \"command processor thread\" (or something similarly descriptive) in these CLs, rather than the \"worker\" to try and be explicit about what work it\u0027s doing.",
      "range": {
        "startLine": 54,
        "startChar": 25,
        "endLine": 54,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb12fd1b_c04818f3",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 54,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdc084fa_12247bbe",
      "range": {
        "startLine": 54,
        "startChar": 25,
        "endLine": 54,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "496cbf17_33b4ad62",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 62,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "how about just vk::Error or vk::SavedError or vk::StoredError\n\nCan you also use this in DisplayVk instead of storedErrorString just to make it more useful? this could be a small split patch. also this guy can go in vk_utils.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22327921_c05b75ea",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 62,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "496cbf17_33b4ad62",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 62,
        "endChar": 0
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fcb2d3b_c7dee6a9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 65,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "what do we need friend for? I\u0027d like to get rid of it if we can.",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d339cecb_71c54930",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 65,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "That\u0027s because a number of CommandProcessor methods (e.g. queueCommand, processCommandProcessorTasksImpl and processTask) need to know details of the task to be able to process it. These classes are so intertwined it seemed natural to use the friend designation.",
      "parentUuid": "1fcb2d3b_c7dee6a9",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1f080f7_19c2ebb1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 65,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "\"need to know the details\" \u003d\u003e getters. Can you update that?",
      "parentUuid": "d339cecb_71c54930",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c445ffe_bb1f5cf0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 65,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T22:15:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1f080f7_19c2ebb1",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df2b802_5146f3d7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "we will need to remove storing mContextVk. see other comments.",
      "range": {
        "startLine": 69,
        "startChar": 10,
        "endLine": 69,
        "endChar": 20
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71e67992_f569ad2b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Okay.",
      "parentUuid": "5df2b802_5146f3d7",
      "range": {
        "startLine": 69,
        "startChar": 10,
        "endLine": 69,
        "endChar": 20
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49b5c836_7cd13607",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 69,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71e67992_f569ad2b",
      "range": {
        "startLine": 69,
        "startChar": 10,
        "endLine": 69,
        "endChar": 20
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5c9cb98_3244ec25",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 73,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: most of this belongs in the cpp files. except for one or two-liners.\n\nANGLE generally follows this rule:\n\nhttps://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++-dos-and-donts.md#minimize-code-in-headers",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 73,
        "endChar": 6
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7b98e51_6dbdd84c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 73,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5c9cb98_3244ec25",
      "range": {
        "startLine": 68,
        "startChar": 1,
        "endLine": 73,
        "endChar": 6
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daea1de3_c05ff0d1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 94,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Is it worth an ASSERT(serial.valid())?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fa5b9c1_3e1a87c9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 94,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Shouldn\u0027t hurt.",
      "parentUuid": "daea1de3_c05ff0d1",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f22aae05_fbe155b2",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 98,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "const\u0026 both of these?",
      "range": {
        "startLine": 97,
        "startChar": 33,
        "endLine": 98,
        "endChar": 91
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efe5e03e_a40cc838",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 98,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f22aae05_fbe155b2",
      "range": {
        "startLine": 97,
        "startChar": 33,
        "endLine": 98,
        "endChar": 91
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd0f2fb_ff991a5a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 102,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "const?",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b994aedf_80244e6e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 102,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "No we are going to move those resources to our task list so they aren\u0027t const.",
      "parentUuid": "3dd0f2fb_ff991a5a",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e41087db_5b970f53",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 102,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "use \u0026\u0026 to transfer ownership. un-resolving.",
      "parentUuid": "b994aedf_80244e6e",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b9b555d_01d36aee",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 102,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e41087db_5b970f53",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0323b237_702f828e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 126,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: early exit instead of indenting.",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2836950d_25891010",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 126,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0323b237_702f828e",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0bcac42_fd165125",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 131,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "rhs.",
      "range": {
        "startLine": 131,
        "startChar": 48,
        "endLine": 131,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1afe953_e9986b21",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 131,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Good catch!",
      "parentUuid": "f0bcac42_fd165125",
      "range": {
        "startLine": 131,
        "startChar": 48,
        "endLine": 131,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "021c8319_7c2f6138",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 150,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "you still need to ensure that this object gets initialized with safe values before you do the std::move.",
      "range": {
        "startLine": 150,
        "startChar": 57,
        "endLine": 150,
        "endChar": 82
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73181296_4a0d5927",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 150,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "021c8319_7c2f6138",
      "range": {
        "startLine": 150,
        "startChar": 57,
        "endLine": 150,
        "endChar": 82
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ac010c_7a4e34fa",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 155,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: \u0027mTask\u0027, to help separate these custom tasks from command buffer commands.",
      "range": {
        "startLine": 155,
        "startChar": 15,
        "endLine": 155,
        "endChar": 29
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc35bb4c_eed0ce01",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 155,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57ac010c_7a4e34fa",
      "range": {
        "startLine": 155,
        "startChar": 15,
        "endLine": 155,
        "endChar": 29
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d0949c3_ca7cd65a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 161,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: mGarbage, unless the \u0027current\u0027 does mean something extra in this context.",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41925fc3_e6b741c7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 161,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d0949c3_ca7cd65a",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ba0a16c_4f282f6c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 195,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "the naming on this is a bit vague. this is basically vk::CommandQueue but for the command processor right? so how about vk::CommandProcessorQueue ?\n\nAlso why not put this in the vk namespace?",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 195,
        "endChar": 22
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee583d9b_f86430be",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 195,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Renamed to CommandTaskProcessor\n\nRegarding namespace, this is where Tobin had it initially.\nWhat makes it appropriate or inappropriate for something to be included in the vk namespace?",
      "parentUuid": "2ba0a16c_4f282f6c",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 195,
        "endChar": 22
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f95b8468_6a9e2417",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 195,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "Seems appropriate because some of your other objects are. There\u0027s no firm rule but I\u0027ve been using vk where appropriate.",
      "parentUuid": "ee583d9b_f86430be",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 195,
        "endChar": 22
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9b50b1a_f2c00cf7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 195,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T22:15:29Z",
      "side": 1,
      "message": "Looks like Tobin put it in rx name space to match CommandQueue, RendererVk which we are similar to.",
      "parentUuid": "f95b8468_6a9e2417",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 195,
        "endChar": 22
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c51c6042_3f2a9d39",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 195,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-18T22:54:22Z",
      "side": 1,
      "message": "OK, understood about Tobin\u0027s pattern. It would be a better fit to use vk::. Can you move them?",
      "parentUuid": "c9b50b1a_f2c00cf7",
      "range": {
        "startLine": 195,
        "startChar": 6,
        "endLine": 195,
        "endChar": 22
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0e21c5e_2951cf67",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why is this necessary?   I see it used as:\n\n  ANGLE_VK_TRY(mCommandWorkQueue.getPointer(), mPrimaryCommandBuffer.end());\n\nWhy can\u0027t that be:\n\n  ANGLE_VK_TRY(\u0026mCommandWorkQueue, mPrimaryCommandBuffer.end());\n\n?\n\nOh, looks like it\u0027s an operator precedence issue?\n\n    #define ANGLE_VK_TRY(context, command)                                                 \\\n        do                                                                                 \\\n        {                                                                                  \\\n            auto ANGLE_LOCAL_VAR \u003d command;                                                \\\n            if (ANGLE_UNLIKELY(ANGLE_LOCAL_VAR !\u003d VK_SUCCESS))                             \\\n            {                                                                              \\\n                context-\u003ehandleError(ANGLE_LOCAL_VAR, __FILE__, ANGLE_FUNCTION, __LINE__); \\\n                return angle::Result::Stop;                                                \\\n            }                                                                              \\\n        } while (0)\n\nIs that fixable with (context)-\u003ehandleError, or does that break everything else?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03cf8f6b_9b807b5c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "(context)-\u003ehandleError is the right answer",
      "parentUuid": "c0e21c5e_2951cf67",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a47eecd_33b03f82",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03cf8f6b_9b807b5c",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31fc81d9_0a52b2ca",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "I\u0027m wondering if maybe the command processor itself should be the vk::Context. () fix is welcome in any case, probably as a small split patch. un-resolving.",
      "parentUuid": "0a47eecd_33b03f82",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60f632fc_9bf1a28d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Switched to using the CommandProcessor as the vk::Context (and thus error handler). Pass around the CommandProcessor as a vk::Context where folks need access to the renderer or features.\nNo longer need this getPointer() thing.",
      "parentUuid": "31fc81d9_0a52b2ca",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65b23d4d_65f0250f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 259,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "why mutable here?",
      "range": {
        "startLine": 259,
        "startChar": 4,
        "endLine": 259,
        "endChar": 11
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80995d80_a4f53b0a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 259,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "For getters that need to grab the lock but otherwise can be defined as const.",
      "parentUuid": "65b23d4d_65f0250f",
      "range": {
        "startLine": 259,
        "startChar": 4,
        "endLine": 259,
        "endChar": 11
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94027771_10f0951d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 259,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "80995d80_a4f53b0a",
      "range": {
        "startLine": 259,
        "startChar": 4,
        "endLine": 259,
        "endChar": 11
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77944854_5896591d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 271,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: processTasks()",
      "range": {
        "startLine": 271,
        "startChar": 9,
        "endLine": 271,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd5cb844_640a48b6",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 271,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77944854_5896591d",
      "range": {
        "startLine": 271,
        "startChar": 9,
        "endLine": 271,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a20d904_d8c6848d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 275,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "impl should be private. if you point out what needs this to be public maybe we can fix it.",
      "range": {
        "startLine": 275,
        "startChar": 18,
        "endLine": 275,
        "endChar": 50
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0339d545_dde44470",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 275,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-13T17:50:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a20d904_d8c6848d",
      "range": {
        "startLine": 275,
        "startChar": 18,
        "endLine": 275,
        "endChar": 50
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b87c479_a11e9a8f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 281,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: main",
      "range": {
        "startLine": 281,
        "startChar": 15,
        "endLine": 281,
        "endChar": 23
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cce90d8a_35656489",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 281,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b87c479_a11e9a8f",
      "range": {
        "startLine": 281,
        "startChar": 15,
        "endLine": 281,
        "endChar": 23
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e24356_df45ab76",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 297,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: getContext()",
      "range": {
        "startLine": 297,
        "startChar": 17,
        "endLine": 297,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cc6eafe_677308fe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 297,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I think I\u0027ll get rid of this. Just pass in the context instead of calling this method.",
      "parentUuid": "98e24356_df45ab76",
      "range": {
        "startLine": 297,
        "startChar": 17,
        "endLine": 297,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2759286_9991fa45",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 297,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1cc6eafe_677308fe",
      "range": {
        "startLine": 297,
        "startChar": 17,
        "endLine": 297,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77e6e8ef_0a2c8473",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Please group these into:\n\n1.) Called by the command processor thread\n2.) Called by the main thread\n\nAnd add a \"Command Processor Thread\" and \"Main Thread\" label to each function in the source files to help clarify who is doing what work.",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85799028_7f91d392",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "All these are functions that can be called from the main thread. They in tern interact with the command processing thread in some way.\nPrivate to the CommandProcessor class are two functions which are run in the command processor thread, they are here because they interact with the shared state that is stored in CommandProcessor. All other work is in the CommandWorkQueue class.\nMaybe I should call that the TaskProcessor class instead of CommandWorkQueue?\nOpen to suggestions for how to organize.",
      "parentUuid": "77e6e8ef_0a2c8473",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8703b31c_cb340c09",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Yeah, after having read the rest of this now, that\u0027s a reasonable answer.   The only ones that stand out are processCommandProcessorTasks[Impl]() as being called by the CP thread.\n\nI hadn\u0027t thought about a higher level rename of the classes themselves.   I think keeping the Command naming is the right thing, since they are doing work on commands which requires communicating with the main thread via tasks.   So the \u0027command\u0027 part is more of what they are doing while \u0027task\u0027 is how they do it, and I think the what is more important here.\n\nInternally within these classes is where it\u0027s useful to separate commands from tasks though, to help reduce confusion on what\u0027s actually being worked on.",
      "parentUuid": "85799028_7f91d392",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f65f88_bd914aee",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Did some renaming that will hopefully help.",
      "parentUuid": "8703b31c_cb340c09",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a04401f3_860598ee",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T17:09:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7f65f88_bd914aee",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8088bfd2_5691528f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 303,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "\u0026\u0026",
      "range": {
        "startLine": 303,
        "startChar": 34,
        "endLine": 303,
        "endChar": 54
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53c50f36_74e1b87f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 303,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Changed to a pointer as I believe that\u0027s according to style guide for non-const reference.",
      "parentUuid": "8088bfd2_5691528f",
      "range": {
        "startLine": 303,
        "startChar": 34,
        "endLine": 303,
        "endChar": 54
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdbb4636_bbc92925",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 303,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-16T17:09:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53c50f36_74e1b87f",
      "range": {
        "startLine": 303,
        "startChar": 34,
        "endLine": 303,
        "endChar": 54
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c465d9_d43fa979",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 305,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: mTasks",
      "range": {
        "startLine": 305,
        "startChar": 41,
        "endLine": 305,
        "endChar": 55
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3bae00b_ea2c57e1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 305,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7c465d9_d43fa979",
      "range": {
        "startLine": 305,
        "startChar": 41,
        "endLine": 305,
        "endChar": 55
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8686c68_3c1798e2",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 306,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "same q",
      "range": {
        "startLine": 306,
        "startChar": 4,
        "endLine": 306,
        "endChar": 11
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c25c49db_f675bc24",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 306,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Be able to lock in a getter and have getter be const.",
      "parentUuid": "a8686c68_3c1798e2",
      "range": {
        "startLine": 306,
        "startChar": 4,
        "endLine": 306,
        "endChar": 11
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "067b6d56_d433370b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 316,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "only vk::Context should own a mRenderer pointer.",
      "range": {
        "startLine": 316,
        "startChar": 4,
        "endLine": 316,
        "endChar": 26
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b9f58de_c39a4838",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 316,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "067b6d56_d433370b",
      "range": {
        "startLine": 316,
        "startChar": 4,
        "endLine": 316,
        "endChar": 26
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "417e0073_5942b826",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 321,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "can you make a change to wrap this in a new QueueSerial object at some point? Fine as a follow-up",
      "range": {
        "startLine": 321,
        "startChar": 4,
        "endLine": 321,
        "endChar": 10
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f53b0635_fe687e0e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 321,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "b/170765214",
      "parentUuid": "417e0073_5942b826",
      "range": {
        "startLine": 321,
        "startChar": 4,
        "endLine": 321,
        "endChar": 10
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c13bb83_6b07643e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1772,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "I would expect this to be the only way to submit commands, so that we always check for errors before submitting new commands that could potentially generate more errors.   However, it looks like it\u0027s possible to directly submit commands and bypass the error checking (like queueSubmitOneOff().\n\nCan we force all command submissions to always call this to submit new commands?   Otherwise, how do people know when they should call this versus just submitting commands directly via RendererVk::queueCommand()?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bddbb13c_705f09c2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1772,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c13bb83_6b07643e",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19e75494_d21aed5a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4313,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add angle bug.",
      "range": {
        "startLine": 4312,
        "startChar": 0,
        "endLine": 4313,
        "endChar": 46
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5492442f_c8802f52",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4313,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19e75494_d21aed5a",
      "range": {
        "startLine": 4312,
        "startChar": 0,
        "endLine": 4313,
        "endChar": 46
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a7497a4_1899f87e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4444,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This path is only called for:\n\n    // If the command buffer this query is being written to is still in flight, its reset command\n    // may not have been performed by the GPU yet.  To avoid a race condition in this case, wait\n    // for the batch to finish first before querying (or return not-ready if not waiting).\n    ANGLE_TRY(contextVk-\u003echeckCompletedCommands());\n\nSince this work will now be done asynchronously by another thread, QueryVk::getResult() won\u0027t be getting any fresher information with this call anymore.   There are a couple options:\n\n1.) Return immediately without submitting the CustomTask::CheckCompletedCommands, since nothing will be updated from QueryVk::getResult()\u0027s perspective anyway.\n2.) Add a waitForWorkComplete() before returning so this continues to behave how it does today and QueryVk::getResult() gets up-to-date data.",
      "range": {
        "startLine": 4438,
        "startChar": 0,
        "endLine": 4444,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d28dca8_006ff5ee",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4444,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "That sounds good. I\u0027ve already added the waitForCommandProcessorIdle() to getResult so really this only needs to be done for the current non-threaded path and I can change this function to a non-threaded path only function. Can get rid of the checkCompletedCommands command too.",
      "parentUuid": "6a7497a4_1899f87e",
      "range": {
        "startLine": 4438,
        "startChar": 0,
        "endLine": 4444,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35ec54e0_7f276a6b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4456,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can finishToSerial() do this work itself, so we don\u0027t need to follow every finishToSerial() with the same error checking call?",
      "range": {
        "startLine": 4454,
        "startChar": 0,
        "endLine": 4456,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97077c0_7ca9b81e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4456,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "It could. Would need to pass in the context since that\u0027s where the error handler is.\nThere appears to be only one caller of mRenderer-\u003efinishToSerial so I\u0027ll leave as is for now.",
      "parentUuid": "35ec54e0_7f276a6b",
      "range": {
        "startLine": 4454,
        "startChar": 0,
        "endLine": 4456,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77ed9402_e1187196",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4456,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "I still vote for passing in the context to try and prevent missing error checking if things change in the future.",
      "parentUuid": "f97077c0_7ca9b81e",
      "range": {
        "startLine": 4454,
        "startChar": 0,
        "endLine": 4456,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c82d2e6_4476959f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4456,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Based on Jamie\u0027s feedback, the worker thread in general cannot access the calling ContextVk (due to race conditions). So I\u0027m queuing up the errors and will have waitForWorkComplete and finishToSerial suck up any pending errors before returning.",
      "parentUuid": "77ed9402_e1187196",
      "range": {
        "startLine": 4454,
        "startChar": 0,
        "endLine": 4456,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d9c7b2_ae5dfce0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 46
      },
      "lineNbr": 1059,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "https://issuetracker.google.com/",
      "range": {
        "startLine": 1059,
        "startChar": 58,
        "endLine": 1059,
        "endChar": 69
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73925856_0d757782",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 46
      },
      "lineNbr": 1059,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70d9c7b2_ae5dfce0",
      "range": {
        "startLine": 1059,
        "startChar": 58,
        "endLine": 1059,
        "endChar": 69
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "449dc9c4_5945be4d",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can this be simplified to calling finishImpl() instead?",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fca023b_8f7d7355",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "We are calling waitForCommandProcessorIdle because we\u0027ll be doing a fence.wait below.\nThis will get reworked when fence ownership moves to CommandProcessor so I don\u0027t think it makes sense to call finish. When fence ownership moves this if goes away and the finishToSerial will make sure the necessary work has happened before issuing the vkWaitForFences.",
      "parentUuid": "449dc9c4_5945be4d",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dca60c5a_e27a20af",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2fca023b_8f7d7355",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab9f269_a5dc1ad2",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: bug link. tim caught most of the other locations.",
      "parentUuid": "dca60c5a_e27a20af",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f63a600_0c36808e",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ab9f269_a5dc1ad2",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e1b135_d0aeca0b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2235,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This is the pattern I was expecting to see everywhere, which is why I think it\u0027s a good idea to just have waitForCommandProcessorIdle() call processPendingError().",
      "range": {
        "startLine": 2234,
        "startChar": 0,
        "endLine": 2235,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac12e08_c5763d20",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2235,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "That seems reasonable. I\u0027ll give it a try.",
      "parentUuid": "b3e1b135_d0aeca0b",
      "range": {
        "startLine": 2234,
        "startChar": 0,
        "endLine": 2235,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6469f21_04619b53",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2235,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ac12e08_c5763d20",
      "range": {
        "startLine": 2234,
        "startChar": 0,
        "endLine": 2235,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc86a7af_9003b933",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2340,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "What happens if someone sneaks in between these calls when the lock isn\u0027t held (maybe to call resetNextSharedFence())?\n\nThis should probably hold the lock during the call to ensureSubmitFenceInitialized().",
      "range": {
        "startLine": 2339,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 81
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddcc25f7_59f6564a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2340,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Great question. This is another piece that should move into the CommandProcessor as part of adding fence ownership. I\u0027ll add a TODO tag as a reminder.\nSince there is only one caller of ensureSubmitFenceInitialized I\u0027ll fold the functionality in here.",
      "parentUuid": "cc86a7af_9003b933",
      "range": {
        "startLine": 2339,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 81
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be41effa_fd8c6716",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 46
      },
      "lineNbr": 260,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "nit: extra space",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca731f8f_9742fb8b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 46
      },
      "lineNbr": 260,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be41effa_fd8c6716",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1c9f475_29bb641b",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 48,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "this looks wrong to me. maybe we can chat more about it.",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ec7047d_2a187ab1",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 48,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "I think that fixed things before I got the resourceInUse handling in the right spot. Removed.",
      "parentUuid": "e1c9f475_29bb641b",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd089e9_8fa4a1ea",
        "filename": "src/libANGLE/renderer/vulkan/SemaphoreVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 217,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Same.   finishImpl()?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec1a9e5d_2658a1e0",
        "filename": "src/libANGLE/renderer/vulkan/SemaphoreVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 217,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I\u0027ll add error handling, but no I don\u0027t think we want finishImpl. glFinish() means that the work is complete through the entire pipeline. waitForCommandProcessorIdle just means that the worker thread has submitted all the outstanding work, GPU may be still processing and we don\u0027t want to wait for that.",
      "parentUuid": "6bd089e9_8fa4a1ea",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31635768_3b6cbb34",
        "filename": "src/libANGLE/renderer/vulkan/SemaphoreVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 217,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Ah, right.   Makes sense.",
      "parentUuid": "ec1a9e5d_2658a1e0",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6d5574_1f373760",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1299,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a TODO+bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbb81052_04e4dd0d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1299,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb6d5574_1f373760",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4ec2d6_572e2e8d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1320,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 1314,
        "startChar": 0,
        "endLine": 1320,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "764b235a_abe62dad",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1320,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f4ec2d6_572e2e8d",
      "range": {
        "startLine": 1314,
        "startChar": 0,
        "endLine": 1320,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87fedc6f_2822c2f9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1327,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "It looks a little odd to have to check for errors after calling commandProcessorSyncErrorsAndQueueCommand(), which sounds like it handles sync\u0027ing errors already.\n\nShould waitForCommandProcessorIdle() check for pending errors and return angle::Result or VkResult?",
      "range": {
        "startLine": 1323,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dd27c59_3e82b05c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1327,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "I should be able to get rid of this when I pull in the error checking into waitForCommandProcessorIdle()",
      "parentUuid": "87fedc6f_2822c2f9",
      "range": {
        "startLine": 1323,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7978102d_2855eb5d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1327,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "Sounds good.   I\u0027ll leave this open for now then as a reminder to see how that goes.",
      "parentUuid": "9dd27c59_3e82b05c",
      "range": {
        "startLine": 1323,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "406ab07a_fac30502",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1327,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "This is a special case because we want to catch the VK_ERROR_OUT_OF_DATE_KHR or VK_SUBOPTIMAL_KHR errors.\nThis will be improved in a follow-up focused on present behavior.",
      "parentUuid": "7978102d_2855eb5d",
      "range": {
        "startLine": 1323,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64c04097_88e8bf13",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 35,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Remove.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aafffc24_9c539131",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 35,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64c04097_88e8bf13",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6979327d_0e7f3f19",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 37,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 62
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0e99796_25e2ee16",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 37,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6979327d_0e7f3f19",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 62
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcdb26e3_2c0a31dc",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 55,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "893713c6_08ee1cc6",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 55,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcdb26e3_2c0a31dc",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cca97fd8_3fe77786",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 116,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec844646_25c713d4",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 116,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cca97fd8_3fe77786",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62032aab_ce16d152",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2957,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-08T17:58:26Z",
      "side": 1,
      "message": "I wonder if we can map this to anglebug.com/b/####\n\nfiled https://b.corp.google.com/issues/170402379",
      "range": {
        "startLine": 2957,
        "startChar": 20,
        "endLine": 2957,
        "endChar": 69
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7a67bb6_73387d8a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2957,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-16T19:23:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "62032aab_ce16d152",
      "range": {
        "startLine": 2957,
        "startChar": 20,
        "endLine": 2957,
        "endChar": 69
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fdb195a_1bd55845",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3258,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 3257,
        "startChar": 0,
        "endLine": 3258,
        "endChar": 14
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f85d2127_940c1c40",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3258,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "That TODO is resolved, removed.",
      "parentUuid": "7fdb195a_1bd55845",
      "range": {
        "startLine": 3257,
        "startChar": 0,
        "endLine": 3258,
        "endChar": 14
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c3e27a1_993d4941",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why don\u0027t we need to sync errors here?",
      "range": {
        "startLine": 3260,
        "startChar": 14,
        "endLine": 3260,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba14ac64_b574e023",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3260,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-07T22:49:58Z",
      "side": 1,
      "message": "Will happen in RendererVk::queueSubmitOneOff",
      "parentUuid": "7c3e27a1_993d4941",
      "range": {
        "startLine": 3260,
        "startChar": 14,
        "endLine": 3260,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42b48cd_6aa87e9c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-08T17:21:04Z",
      "side": 1,
      "message": "I don\u0027t see that happening now, since there isn\u0027t a processPendingError() following the waitForCommandProcessorIdle():\n\n    if (getFeatures().enableCommandProcessingThread.enabled)\n    {\n        vk::CommandProcessorTask oneOffQueueSubmit;\n        oneOffQueueSubmit.initOneOffQueueSubmit(primary.getHandle(), priority, fence);\n        queueCommand(\u0026oneOffQueueSubmit);\n        waitForCommandProcessorIdle();\n        *serialOut \u003d getLastSubmittedQueueSerial();\n\n        ANGLE_TRY(cleanupGarbage(false));\n    }\n\nHowever, that should be the case if you update waitForCommandProcessorIdle() to check for errors.   I\u0027m going to unresolve this for now, so we revisit this in case the waitForCommandProcessorIdle() can\u0027t be updated.",
      "parentUuid": "ba14ac64_b574e023",
      "range": {
        "startLine": 3260,
        "startChar": 14,
        "endLine": 3260,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ea434f_d3d0759f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3260,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-14T21:54:37Z",
      "side": 1,
      "message": "waitForCommandProcessorIdle will now suck up errors.",
      "parentUuid": "c42b48cd_6aa87e9c",
      "range": {
        "startLine": 3260,
        "startChar": 14,
        "endLine": 3260,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}