{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48bc2730_4b3b7d4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:29:54Z",
      "side": 1,
      "message": "Courtney: can you set this up so we can look at angle_perftests --gtest_filter\u003dDrawCallPerfBenchmark.Run/vulkan_null and see that it\u0027s using multiple threads? We should even be able to log a call trace with ANGLE_TRACE_EVENT in multiple threads though that might take a bit more plumbing.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b726c4bf_987e0b6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:44:55Z",
      "side": 1,
      "message": "Actually, this should be /vulkan, not /vulkan_null.\n\nI tried with VTune and can see the work gets split between two cores. Unfortunately thoughput doesn\u0027t go up. Might be being limited by another factor. Since it takes load off of one core though, it should improve CPU bound scenarios.",
      "parentUuid": "48bc2730_4b3b7d4b",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6895cfc9_f7e8ad90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T23:48:47Z",
      "side": 1,
      "message": "Tested with Manhattan trace, got these results in VTune: https://imgur.com/a/S3KT55m\n\nThroughput went up slightly (maybe 3-4%).",
      "parentUuid": "b726c4bf_987e0b6b",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac016f99_56e9e5d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-06T23:52:35Z",
      "side": 1,
      "message": "Cool!\nI\u0027ve got an AGI trace from manhattan (some random early frame) that shows two threads issuing Vulkan commands. I posted screenshot in the Threading doc.\ngo/angle-vk-threading\nI know there is additional work needed to get more parallelism. Wanted to get a baseline in that works and at least has similar perf and work from there.",
      "parentUuid": "6895cfc9_f7e8ad90",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a1b5af2_ba9baa43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-07T00:11:03Z",
      "side": 1,
      "message": "I ran an experiment where I shut down all Chrome \u0026 background processes, then used scripts/perf_test_runner.py to generate a ton of data, discard the outliers, and compute the mean. I found an average of 2.14-2.15 ms / frame before your patches and 2.18-2.19 after. So a regression, unfortunately. My earlier numbers were a quick few runs with a bunch of background noise so probably that skewed the results.",
      "parentUuid": "ac016f99_56e9e5d4",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e9ea0b8_877781e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-07T00:11:57Z",
      "side": 1,
      "message": "Will have to do more measurements on Android.",
      "parentUuid": "4a1b5af2_ba9baa43",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a78ce6c_e7675592",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Definitely an impressive change.   Especially with taking it over from someone else.\n\nFirst pass with mostly nits and questions.   I can\u0027t say I know how these changes affect the fence/sync stuff, so hopefully Jamie/Shabi can look at that.\n\nI mention it in one of my comments, but I want to bring it up here too.   My biggest concern is the split in the code base that\u0027s being generated between the single- and multi-threaded designs.   There is a lot of dead code being generated by the enableCommandProcessingThread.enabled checking.   Some functions are essentially emptied by beginning with:\n\n    ASSERT(!getRenderer()-\u003egetFeatures().enableCommandProcessingThread.enabled);\n\nI understand there will be a transition period while bugs are ironed out, but we should commit to removing the dead path once we\u0027ve made a decision to go with this design and it\u0027s \u0027good enough\u0027 (whatever that bar is).   Otherwise, there will be a lot of complex untested code that ends up rotting, probably quicker than we expect considering the breadth of this change.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc200cd_acd3a28d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 46
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "I suspect we may have to disable threaded-submit due to bugs/efficiency/etc in the future based on a feature. What I always thought the code would look like is\n\n- Pretend it\u0027s threaded everywhere\n- Inside CommandProcessor::queueCommand() immediately process the task if not threaded.\n\n---\n\nEdit: and I just checked and that\u0027s exactly what\u0027s happening now. With the current change that code is never exercised because there\u0027s also a check for threaded-submit before queuing tasks, but it will eventually do the job.",
      "parentUuid": "9a78ce6c_e7675592",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78185827_c1ca2ac4",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 46,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Rather than the assert above (which isn\u0027t really checking the whole struct is 0\u0027ed out), can this be changed to:\n\n    submitInfo-\u003esignalSemaphoreCount \u003d signalSemaphore ? 1 : 0;\n    submitInfo-\u003epSignalSemaphores    \u003d signalSemaphore ? signalSemaphore-\u003eptr() : nullptr;\n\nI would assume the compiler is smart enough to realize that\u0027s actually an if-else, but if it reads better we can be more explicit about it:\n\n    if (signalSemaphore)\n    {\n        submitInfo-\u003esignalSemaphoreCount \u003d 1;\n        submitInfo-\u003epSignalSemaphores    \u003d signalSemaphore-\u003eptr();\n    }\n    else\n    {\n        submitInfo-\u003esignalSemaphoreCount \u003d 0;\n        submitInfo-\u003epSignalSemaphores    \u003d nullptr;\n    }",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 46,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f826f8c_f5a07183",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 97,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why don\u0027t we have a queue family index at ctor time, even though we have a RendererVk?",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 97,
        "endChar": 80
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb0ff741_316c1c10",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 207,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return mPrimaryCommandPool.collect(this, std::move(commandBuffer));",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 207,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c37c03d_5ef3c95e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 249,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Do we need a bug to track this?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52f35e3e_72745a93",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 267,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Open a bug to investigate if this is a good optimization.",
      "range": {
        "startLine": 266,
        "startChar": 0,
        "endLine": 267,
        "endChar": 68
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f31e6295_f4724e1a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 294,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "ANGLE_VK_TRY(this, batch.fence.get().wait(device, timeout));",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 294,
        "endChar": 31
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "936c226c_bb478861",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 298,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return checkCompletedCommands(renderer);",
      "range": {
        "startLine": 297,
        "startChar": 0,
        "endLine": 298,
        "endChar": 18
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "717a7861_f9293f4f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 344,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why do we only finish 1 command here, rather than half (or all) while we rebuild the next list of commands?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9530d9da_080a7a15",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 354,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "You should be able to ASSERT(mCommandsQueue.empty()).\n\nWould ASSERT(!mWorkerMutex.try_lock()) work?",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 354,
        "endChar": 58
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7bfedac_0b3501bd",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can this function be marked protected so only the CommandProcessor can call it?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26c744d2_1ffe854d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 368,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "It would be nice if the thread ids of the two threads are stored, with each function ASSERTing that it\u0027s called from the right thread. When not multi-threading, the two thread ids would be the same.",
      "parentUuid": "e7bfedac_0b3501bd",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8cb12c_3456b06a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 370,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "RendererVk::queueSubmit() has these same 2 lines.   We should find a way to allow them to both call into the same function that does this, especially since we\u0027re asking the RendererVk for the queue info in this call chain: mRenderer-\u003egetVkQueue(task.mPriority).",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc0b616_63aee233",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 372,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return vkQueueSubmit(queue, 1, \u0026submitInfo, handle);",
      "range": {
        "startLine": 370,
        "startChar": 0,
        "endLine": 372,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08f0eeee_04549f20",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 428,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: disabled",
      "range": {
        "startLine": 428,
        "startChar": 35,
        "endLine": 428,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f60a16c_17201ee9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "If multithreading is disabled, who is doing the work that this is waiting on?\n\nIs the intent that this is \"waiting\" on an already signaled condition, since the previous call to processCommandProcessorTasksImpl() signaled it already?   Can this ASSERT(mCommandsQueue.empty) instead (or whatever would be relevant to check here), rather than deadlocking if there\u0027s a bug?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1af240c_9b774a3a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 429,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "Right, this is missing a call to `processCommandProcessorTasks()`.",
      "parentUuid": "6f60a16c_17201ee9",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7945f48_3dd9d543",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 438,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "How does CustomTask::Exit get issued if the main thread is inside this loop processing commands forever?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09b32f47_cb3e5155",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This should probably have an UNREACHABLE() at the least, so we can get some visibility into any cases that hit this.",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d692300_8fd6845f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "Probably the best course of action is to keep the result around and drop every command that follows. Next time the main thread synchronizes with this thread it can ANGLE_VK_TRY the result which will lead to a device loss.\n\nThat mirrors the behavior we currently have.",
      "parentUuid": "09b32f47_cb3e5155",
      "range": {
        "startLine": 446,
        "startChar": 0,
        "endLine": 449,
        "endChar": 71
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1c8380_92d45d40",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 476,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Is this brace lost?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd61aba8_e0b0d273",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 554,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a bug number.",
      "range": {
        "startLine": 553,
        "startChar": 0,
        "endLine": 554,
        "endChar": 30
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b93446d_053f6f30",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 573,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "How do we guarantee that this error is cleared before the next command is submitted (which could also immediately hit an error), so we don\u0027t lose the second error?\n\nOr is that part of the TODO improvements?",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 573,
        "endChar": 95
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77bab568_dd2d3ed8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 574,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a bug number.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c02d129b_624d61dc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 606,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "It would be cool if we could do some useful background work rather than just sitting here idle, like freeing resources or something.   I\u0027m not sure how possible that is (or even what to do), but it\u0027s a shame to just do nothing for a while.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "066c595e_11bd7cb9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 613,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "lock is a std::unique_lock, so this is unnecessary.   Remove.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e14ddf69_c17e0018",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 633,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why does mCommandsQueue need to be empty before we can look at mInFlightCommands.back().fence?",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 633,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a351902e_db073d17",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 645,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "remove",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25dd5986_f8061a9a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 646,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "return mCommandWorkQueue.getLastSubmittedFenceWithLock(mRenderer-\u003egetDevice());",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 17
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb528734_1070c398",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 659,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "From my reading of this, the reason it\u0027s nice to have the CommandProcessor own the Serials is so that it can generate new Serials whenever the main thread submits new commands, whereas the RendererVk only generates a new Serial during RendererVk::queueSubmit() which isn\u0027t called anymore.\n\nI think these Serials need to be unified somewhere, rather than having this duplication since presumably one of them will essentially never be used again once we go all-in on threading (or not).   The RendererVk already has a Serial and associated lock, so we should find a way to re-use that or move them both somewhere common.\n\nThis really leads into a bigger issue I have with the enableCommandProcessingThread.enabled checking that\u0027s being spread throughout the code base.   It feels like one of these paths will eventually be dead code (probably quicker than we think), since we won\u0027t go through all of our testing with the feature enabled and disabled.",
      "range": {
        "startLine": 649,
        "startChar": 0,
        "endLine": 659,
        "endChar": 1
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d208161_1bb160f3",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 46
      },
      "lineNbr": 683,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "remove",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "367db633_e7cffda3",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 31,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: spacing in a few of these comments.",
      "range": {
        "startLine": 31,
        "startChar": 3,
        "endLine": 31,
        "endChar": 4
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75463875_83caf43a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 40,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can you move these descriptions down to the enum values themselves?   Doing that should help keep the comments in sync with the values they\u0027re describing (which doesn\u0027t appear to be the case right now).\n\nSomething like:\n\n    enum CustomTask\n    {\n        Invalid \u003d 0,\n        // Process SecondaryCommandBuffer commands into the primary CommandBuffer.\n        FlushToPrimary,\n        FlushAndQueueSubmit,\n        OneOffQueueSubmit,\n        // Finish queue commands up to given serial value\n        FinishToSerial,\n        // Execute QueuePresent\n        Present,\n        CheckCompletedCommands,\n        ClearAllGarbage,\n        Exit,\n    };",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 40,
        "endChar": 42
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdc084fa_12247bbe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 54,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: \"worker thread\" is a bit vague, especially if we introduce another thread somewhere else in ANGLE.   I\u0027d prefer if we refer to the new thread as the \"command processor thread\" (or something similarly descriptive) in these CLs, rather than the \"worker\" to try and be explicit about what work it\u0027s doing.",
      "range": {
        "startLine": 54,
        "startChar": 25,
        "endLine": 54,
        "endChar": 38
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daea1de3_c05ff0d1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 94,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Is it worth an ASSERT(serial.valid())?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f22aae05_fbe155b2",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 98,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "const\u0026 both of these?",
      "range": {
        "startLine": 97,
        "startChar": 33,
        "endLine": 98,
        "endChar": 91
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd0f2fb_ff991a5a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 102,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "const?",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0bcac42_fd165125",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 131,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "rhs.",
      "range": {
        "startLine": 131,
        "startChar": 48,
        "endLine": 131,
        "endChar": 72
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ac010c_7a4e34fa",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 155,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: \u0027mTask\u0027, to help separate these custom tasks from command buffer commands.",
      "range": {
        "startLine": 155,
        "startChar": 15,
        "endLine": 155,
        "endChar": 29
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d0949c3_ca7cd65a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 161,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: mGarbage, unless the \u0027current\u0027 does mean something extra in this context.",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 35
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0e21c5e_2951cf67",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why is this necessary?   I see it used as:\n\n  ANGLE_VK_TRY(mCommandWorkQueue.getPointer(), mPrimaryCommandBuffer.end());\n\nWhy can\u0027t that be:\n\n  ANGLE_VK_TRY(\u0026mCommandWorkQueue, mPrimaryCommandBuffer.end());\n\n?\n\nOh, looks like it\u0027s an operator precedence issue?\n\n    #define ANGLE_VK_TRY(context, command)                                                 \\\n        do                                                                                 \\\n        {                                                                                  \\\n            auto ANGLE_LOCAL_VAR \u003d command;                                                \\\n            if (ANGLE_UNLIKELY(ANGLE_LOCAL_VAR !\u003d VK_SUCCESS))                             \\\n            {                                                                              \\\n                context-\u003ehandleError(ANGLE_LOCAL_VAR, __FILE__, ANGLE_FUNCTION, __LINE__); \\\n                return angle::Result::Stop;                                                \\\n            }                                                                              \\\n        } while (0)\n\nIs that fixable with (context)-\u003ehandleError, or does that break everything else?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03cf8f6b_9b807b5c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 239,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-07T16:27:53Z",
      "side": 1,
      "message": "(context)-\u003ehandleError is the right answer",
      "parentUuid": "c0e21c5e_2951cf67",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b87c479_a11e9a8f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 281,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: main",
      "range": {
        "startLine": 281,
        "startChar": 15,
        "endLine": 281,
        "endChar": 23
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98e24356_df45ab76",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 297,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "nit: getContext()",
      "range": {
        "startLine": 297,
        "startChar": 17,
        "endLine": 297,
        "endChar": 34
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77e6e8ef_0a2c8473",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 46
      },
      "lineNbr": 299,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Please group these into:\n\n1.) Called by the command processor thread\n2.) Called by the main thread\n\nAnd add a \"Command Processor Thread\" and \"Main Thread\" label to each function in the source files to help clarify who is doing what work.",
      "range": {
        "startLine": 269,
        "startChar": 0,
        "endLine": 299,
        "endChar": 27
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c13bb83_6b07643e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1772,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "I would expect this to be the only way to submit commands, so that we always check for errors before submitting new commands that could potentially generate more errors.   However, it looks like it\u0027s possible to directly submit commands and bypass the error checking (like queueSubmitOneOff().\n\nCan we force all command submissions to always call this to submit new commands?   Otherwise, how do people know when they should call this versus just submitting commands directly via RendererVk::queueCommand()?",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19e75494_d21aed5a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4313,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add angle bug.",
      "range": {
        "startLine": 4312,
        "startChar": 0,
        "endLine": 4313,
        "endChar": 46
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a7497a4_1899f87e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4444,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This path is only called for:\n\n    // If the command buffer this query is being written to is still in flight, its reset command\n    // may not have been performed by the GPU yet.  To avoid a race condition in this case, wait\n    // for the batch to finish first before querying (or return not-ready if not waiting).\n    ANGLE_TRY(contextVk-\u003echeckCompletedCommands());\n\nSince this work will now be done asynchronously by another thread, QueryVk::getResult() won\u0027t be getting any fresher information with this call anymore.   There are a couple options:\n\n1.) Return immediately without submitting the CustomTask::CheckCompletedCommands, since nothing will be updated from QueryVk::getResult()\u0027s perspective anyway.\n2.) Add a waitForWorkComplete() before returning so this continues to behave how it does today and QueryVk::getResult() gets up-to-date data.",
      "range": {
        "startLine": 4438,
        "startChar": 0,
        "endLine": 4444,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35ec54e0_7f276a6b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 4456,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can finishToSerial() do this work itself, so we don\u0027t need to follow every finishToSerial() with the same error checking call?",
      "range": {
        "startLine": 4454,
        "startChar": 0,
        "endLine": 4456,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70d9c7b2_ae5dfce0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 46
      },
      "lineNbr": 1059,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "https://issuetracker.google.com/",
      "range": {
        "startLine": 1059,
        "startChar": 58,
        "endLine": 1059,
        "endChar": 69
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "449dc9c4_5945be4d",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 190,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Can this be simplified to calling finishImpl() instead?",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 190,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e1b135_d0aeca0b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2235,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "This is the pattern I was expecting to see everywhere, which is why I think it\u0027s a good idea to just have waitForCommandProcessorIdle() call processPendingError().",
      "range": {
        "startLine": 2234,
        "startChar": 0,
        "endLine": 2235,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc86a7af_9003b933",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 2340,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "What happens if someone sneaks in between these calls when the lock isn\u0027t held (maybe to call resetNextSharedFence())?\n\nThis should probably hold the lock during the call to ensureSubmitFenceInitialized().",
      "range": {
        "startLine": 2339,
        "startChar": 0,
        "endLine": 2340,
        "endChar": 81
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd089e9_8fa4a1ea",
        "filename": "src/libANGLE/renderer/vulkan/SemaphoreVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 217,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Same.   finishImpl()?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 5
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6d5574_1f373760",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1299,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add a TODO+bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4ec2d6_572e2e8d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1320,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 1314,
        "startChar": 0,
        "endLine": 1320,
        "endChar": 37
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87fedc6f_2822c2f9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 1327,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "It looks a little odd to have to check for errors after calling commandProcessorSyncErrorsAndQueueCommand(), which sounds like it handles sync\u0027ing errors already.\n\nShould waitForCommandProcessorIdle() check for pending errors and return angle::Result or VkResult?",
      "range": {
        "startLine": 1323,
        "startChar": 0,
        "endLine": 1327,
        "endChar": 9
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64c04097_88e8bf13",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 35,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Remove.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6979327d_0e7f3f19",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 37,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 62
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcdb26e3_2c0a31dc",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 55,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cca97fd8_3fe77786",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 46
      },
      "lineNbr": 116,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fdb195a_1bd55845",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3258,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Add an angle bug.",
      "range": {
        "startLine": 3257,
        "startChar": 0,
        "endLine": 3258,
        "endChar": 14
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c3e27a1_993d4941",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 46
      },
      "lineNbr": 3260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T01:53:13Z",
      "side": 1,
      "message": "Why don\u0027t we need to sync errors here?",
      "range": {
        "startLine": 3260,
        "startChar": 14,
        "endLine": 3260,
        "endChar": 41
      },
      "revId": "25993171012dce97be78c513a0b7a7120227b761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}