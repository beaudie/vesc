{
  "comments": [
    {
      "key": {
        "uuid": "c659fefe_d4139fc4",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 973,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T17:39:20Z",
      "side": 1,
      "message": "vector is a \"heavyweight\" container that internally calls malloc. We could likely improve on this. My thought is defining a custom type. Either a std::array of an angle::FixedVector. \n\nusing StagingBufferOffsetArray \u003d std::array\u003cVkDeviceSize, 2\u003e;\nusing StagingBufferOffsetVector \u003d angle::FixedVector\u003cVkDeviceSize, 2\u003e;\n\nFixedVector lets you use a variable length (up to the max size).",
      "range": {
        "startLine": 973,
        "startChar": 4,
        "endLine": 973,
        "endChar": 29
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14f92e50_96d30ccb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2930,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T17:39:20Z",
      "side": 1,
      "message": "nit: std::max seems not necessary. Maybe just set it to 5? mFormat-\u003epixelBytes shouldn\u0027t vary.",
      "range": {
        "startLine": 2930,
        "startChar": 21,
        "endLine": 2930,
        "endChar": 46
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c6472b1_38dc2442",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2930,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-11-06T20:52:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14f92e50_96d30ccb",
      "range": {
        "startLine": 2930,
        "startChar": 21,
        "endLine": 2930,
        "endChar": 46
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7234ffa9_a8550b67",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2961,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T17:39:20Z",
      "side": 1,
      "message": "this looks like WIP code that should be replaced with the other suggestion I had.",
      "range": {
        "startLine": 2961,
        "startChar": 0,
        "endLine": 2961,
        "endChar": 47
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6bfd78d_d770fa99",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2961,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-11-06T20:52:21Z",
      "side": 1,
      "message": "This is to avoid code like \"\u0026((*bufferOffsetsOut)[0])\" below. Even with the new and improved StagingBufferOffsetArray we still have to dereference the array ptr. I\u0027ve refactored the allocateStagingMemory function to take the StagingBufferOffsetArray ptr since this is its only calling site.\n\nI\u0027ve pulled this #define out and updated code below accordingly. Not sure if there\u0027s a nicer way to update the Array accesses below to avoid \"(*bufferOffsetsOut)\" syntax.",
      "parentUuid": "7234ffa9_a8550b67",
      "range": {
        "startLine": 2961,
        "startChar": 0,
        "endLine": 2961,
        "endChar": 47
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04c9861a_6b98afbd",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2961,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T21:15:20Z",
      "side": 1,
      "message": "I see. The (*thing)[index] pattern is regrettable. I think it\u0027s preferable to defines. Don\u0027t have a better solution atm.",
      "parentUuid": "e6bfd78d_d770fa99",
      "range": {
        "startLine": 2961,
        "startChar": 0,
        "endLine": 2961,
        "endChar": 47
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1473a930_96fd3bbc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2995,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T17:39:20Z",
      "side": 1,
      "message": "you\u0027re doing a similar size computation here. Maybe make this a helper and share code with the above?",
      "range": {
        "startLine": 2992,
        "startChar": 0,
        "endLine": 2995,
        "endChar": 9
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27525f12_6b935f98",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2995,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-11-06T20:52:21Z",
      "side": 1,
      "message": "I hoisted this and made both pixel \u0026 depth bytes set under shared \"if\" case.",
      "parentUuid": "1473a930_96fd3bbc",
      "range": {
        "startLine": 2992,
        "startChar": 0,
        "endLine": 2995,
        "endChar": 9
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0745f306_5f18a87d",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 11
      },
      "lineNbr": 640,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T17:39:20Z",
      "side": 1,
      "message": "this makes me worry that there\u0027s a bug with some format emulation that only get exposed on Android. You can test by forcing emulation on with FeaturesVk::forceFallbackFormat\n\nI\u0027d also say trying on SwiftShader. Not sure if that is possible.",
      "range": {
        "startLine": 640,
        "startChar": 5,
        "endLine": 640,
        "endChar": 13
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16868f99_cc4cb217",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 11
      },
      "lineNbr": 640,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-11-06T20:52:21Z",
      "side": 1,
      "message": "I\u0027m able to pass this test on swiftshader with and without forceFallbackFormat forced on. On Pixel4 I see the test fail both with and without forceFallbackFormat forced on.",
      "parentUuid": "0745f306_5f18a87d",
      "range": {
        "startLine": 640,
        "startChar": 5,
        "endLine": 640,
        "endChar": 13
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12377257_ffbe3472",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 11
      },
      "lineNbr": 640,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-11-06T20:57:01Z",
      "side": 1,
      "message": "There is a known issue on Pixel 4 with writing Depth/Stencil, wouldn\u0027t surprise me that they have an issue with reading as well.\nhttps://issuetracker.google.com/137276715",
      "parentUuid": "16868f99_cc4cb217",
      "range": {
        "startLine": 640,
        "startChar": 5,
        "endLine": 640,
        "endChar": 13
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec6b2c84_b904f7d4",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 11
      },
      "lineNbr": 640,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-06T21:15:20Z",
      "side": 1,
      "message": "Gotcha, thanks for alleviating the worry.",
      "parentUuid": "12377257_ffbe3472",
      "range": {
        "startLine": 640,
        "startChar": 5,
        "endLine": 640,
        "endChar": 13
      },
      "revId": "5710f64794d7e6172e948f57d24270c64757a631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}