{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d09e0476_917efebd",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 166,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T16:57:22Z",
      "side": 1,
      "message": "I suggest you use a 2D array here. Also I\u0027d suggest using VMAPoolType as a strongly typed enum so one can be a PackedEnumMap and we can let the compiler do the array math.",
      "range": {
        "startLine": 166,
        "startChar": 5,
        "endLine": 166,
        "endChar": 68
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f24910ab_9809e1fe",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 166,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-09T23:59:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d09e0476_917efebd",
      "range": {
        "startLine": 166,
        "startChar": 5,
        "endLine": 166,
        "endChar": 68
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5256d89_383d12ac",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T16:57:22Z",
      "side": 1,
      "message": "can you check out using the preferred block size to do the dedicated allocations? I\u0027m curious to know what you think. Removing this logic would be preferable to simplify the code.",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21eb2abd_bd8c7597",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-09T23:59:41Z",
      "side": 1,
      "message": "Yes, I did experiment before. If we use preferred block size, most allocation will end up using sub-allocator which defeats the purpose. I think most allocation is less than 4M and preferred block size is around 4M (the actual number needs to double check, but I know for sure most allocation is less than the block size).\n\nOne thing I can simplify is to allocate VMAPool as needed. Right now I allocate all pools at initialization time, which could be wasting a lot of these pool allocations (It did not actually allocate pool memory, just the data structures of the pool). I did this to avoid have to check at memory allocation time, but that is subject to debate. I am okay with either, please let me know what your opinion.",
      "parentUuid": "d5256d89_383d12ac",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ca92d71_016fc72f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-10T01:32:48Z",
      "side": 1,
      "message": "On my android device, most of pools block size is 4M, except MemoryTypeIndex\u003d3 has 13M block size. Bigger block size has potential to waste more memory as well. My suggest is to keep as what it is for now since this is how I get the preliminary numbers and we tweak these numbers in future CLs with more data based decision.",
      "parentUuid": "21eb2abd_bd8c7597",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dd65289_59d4827d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-10T13:54:28Z",
      "side": 1,
      "message": "How about setting the \"big\" (default allocator) pool preferred block size at 2M so we get \u003e1M allocations to allocate with dedicated memory? I\u0027m not sure if the setting for the preferred block size would impact any other behaviour? It would allow us to remove the logic for dedicated allocations and simplify the code. Is there a downside I\u0027m not understanding?",
      "parentUuid": "0ca92d71_016fc72f",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e2f93ca_207a82a7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-10T17:33:47Z",
      "side": 1,
      "message": "Make block size too small have extra cost here that also affects \u003c1M allocations. The other downside of using the default pool is all the extra logic it goes through every time to findMmeoryTypeIndex and also go through logic to see if bufferImageGranularity should apply etc. The dedicated memory logic in this CL is merely 1 line of code to set the flag based on size, so I would not worry though.",
      "parentUuid": "7dd65289_59d4827d",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1f18d14_58f7c9bb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-10T17:42:15Z",
      "side": 1,
      "message": "I see.. are you going to use the VMA dedicated allocation flag? I didn\u0027t see it yet in this CL.",
      "parentUuid": "4e2f93ca_207a82a7",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb3b22b5_e6869751",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-10T18:00:00Z",
      "side": 1,
      "message": "See RendererVk.cpp line 3535.",
      "parentUuid": "f1f18d14_58f7c9bb",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3340d4c7_47bb34bb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-10T18:05:13Z",
      "side": 1,
      "message": "Apologies, I didn\u0027t notice the changes to the VMA interface. bool types can be a bit hard to follow the chain of information. Can you instead pass the flag values (0 or DEDICATED) and pass that to the VMA helper function?",
      "parentUuid": "eb3b22b5_e6869751",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c90c582b_f301d52c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 24
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-10T18:19:42Z",
      "side": 1,
      "message": "The problem is VMA headers are not included here. As the way it is structured, vk_mem_alloc_wrapper is designed to hide VMA from the rest of ANGLE. I can\u0027t use VMA bits unless I define my own bit. I would suggest in future we expose VMA directly to the rest of code (I am not seeing any reason we should not).",
      "parentUuid": "3340d4c7_47bb34bb",
      "range": {
        "startLine": 180,
        "startChar": 34,
        "endLine": 180,
        "endChar": 59
      },
      "revId": "c42d9ce370f5156a8670cdab78fac92b35083a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}