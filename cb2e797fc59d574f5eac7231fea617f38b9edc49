{
  "comments": [
    {
      "key": {
        "uuid": "b994dcae_e694283c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T18:44:30Z",
      "side": 1,
      "message": "can you also add this generator to run_code_generation.py?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 49
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ed22c37_5d2367ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-11-02T17:50:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b994dcae_e694283c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 49
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f885bbae_9db4996b",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.h",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T18:44:30Z",
      "side": 1,
      "message": "nit: can probably remove the Blit11:: from this and the following.",
      "range": {
        "startLine": 168,
        "startChar": 11,
        "endLine": 168,
        "endChar": 33
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4bca6f7_71b15339",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Blit11.h",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-11-02T17:50:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f885bbae_9db4996b",
      "range": {
        "startLine": 168,
        "startChar": 11,
        "endLine": 168,
        "endChar": 33
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "083f6616_ac4380d4",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_blit11helper.py",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T18:44:30Z",
      "side": 1,
      "message": "I\u0027m wondering if we can somehow refactor this to make it part of the non-autogenerated code. It\u0027s basically a template function that is templated on the dimension. It\u0027s a bit of a larger refactor, but one idea is we could make a small enum {2D/3D}. Then the shader type becomes a pair of {Dimension,ShaderType}.\n\nA second option is to have a helper method \"Is3D\" or \"GetBlitShaderTypeDimension\" that is an auto-generated switch and returns 2D/3D/true/false as appropriate. WDYT?\n\nThe goal here would be to keep as much code in the non-autogen cpp file as possible.",
      "range": {
        "startLine": 61,
        "startChar": 33,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f98a44fc_b5071de9",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_blit11helper.py",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-10-24T21:04:12Z",
      "side": 1,
      "message": "1) I had tried to come up with a template based solution initially, but I couldn\u0027t come up with a solution that I felt was better than what already existed. The root issue being - how do I translate my desired dimension into the corresponding shader? I haven\u0027t been able to come up with any shortcuts that will allow us to not list each explicit case in some manner.\n\n2) This sounds similar to what the code was before I merged the 3d copy extension. It used to be a single function getBlitShader, and the return would looked like this:\n\ncase GL_RGBA_INTEGER:\n    return (dimension \u003d\u003d 2D) ? BLITSHADER_2D_RGBAI : BLITSHADER_3D_RGBI;\n\nBut when I added in the 2DArray enums, this became much more cumbersome and I chose to split into per-dimension functions.\n\nI\u0027m thinking now, what if I reverted back to a single getBlitShader function - which lives in Blit11.cpp - and for each return statement I called per-blitShader autogenerated functions that chose the correct shader based off a dimension param. Like this:\n\nIn Blit11.cpp GetBlitShader():\n\ncase GL_RGBA_INTEGER:\n    return getRGBAIntegerBlitShader(dimension);\n\nand in blit11helper:\n\nBlitShaderType getRGBAIntegerBlitShader(dimension)\n{\n    switch (dimension)\n    case 2D:\n       return BLITSHADER_2D_RGBAI\n    case 3D:\n       return BLITSHADER_3D_RGBI\n    case 2DArray:\n       return ...\n}\n\nAnd then going against sentiment of keeping code in Blit11.cpp - I do think there is some value in keeping all the enum related code in blit11helper. With the current implementation - I can add a new blitshader without touching Blit11.",
      "parentUuid": "083f6616_ac4380d4",
      "range": {
        "startLine": 61,
        "startChar": 33,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d901f5f_1ef5fa32",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_blit11helper.py",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-25T21:11:43Z",
      "side": 1,
      "message": "\u003e 1) I had tried to come up with a template based solution initially, but I couldn\u0027t come up with a solution that I felt was better than what already existed. The root issue being - how do I translate my desired dimension into the corresponding shader? I haven\u0027t been able to come up with any shortcuts that will allow us to not list each explicit case in some manner.\n\nI think you\u0027d need an autogenerated 2D table indexed on {dimension, format}.\n\n\u003e 2) This sounds similar to what the code was before I merged the 3d copy extension. It used to be a single function getBlitShader, and the return would looked like this:\n\u003e \n\u003e case GL_RGBA_INTEGER:\n\u003e     return (dimension \u003d\u003d 2D) ? BLITSHADER_2D_RGBAI : BLITSHADER_3D_RGBI;\n\u003e \n\u003e But when I added in the 2DArray enums, this became much more cumbersome and I chose to split into per-dimension functions.\n\u003e \n\u003e I\u0027m thinking now, what if I reverted back to a single getBlitShader function - which lives in Blit11.cpp - and for each return statement I called per-blitShader autogenerated functions that chose the correct shader based off a dimension param. Like this:\n\u003e \n\u003e In Blit11.cpp GetBlitShader():\n\u003e \n\u003e case GL_RGBA_INTEGER:\n\u003e     return getRGBAIntegerBlitShader(dimension);\n\u003e \n\u003e and in blit11helper:\n\u003e \n\u003e BlitShaderType getRGBAIntegerBlitShader(dimension)\n\u003e {\n\u003e     switch (dimension)\n\u003e     case 2D:\n\u003e        return BLITSHADER_2D_RGBAI\n\u003e     case 3D:\n\u003e        return BLITSHADER_3D_RGBI\n\u003e     case 2DArray:\n\u003e        return ...\n\u003e }\n\u003e \n\u003e And then going against sentiment of keeping code in Blit11.cpp - I do think there is some value in keeping all the enum related code in blit11helper. With the current implementation - I can add a new blitshader without touching Blit11.\n\nThis is fine with me. Just better to keep the not-as-boilerplate code out of the auto-gen. This function is a bit too bespoke. Approach SGTM. (Either 1) or 2) SGTM in fact).",
      "parentUuid": "f98a44fc_b5071de9",
      "range": {
        "startLine": 61,
        "startChar": 33,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bf56cd2_80da4977",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_blit11helper.py",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-11-02T17:50:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d901f5f_1ef5fa32",
      "range": {
        "startLine": 61,
        "startChar": 33,
        "endLine": 67,
        "endChar": 75
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00079851_d8f77e18",
        "filename": "src/libANGLE/renderer/d3d/d3d11/shaders/MultiplyAlpha.hlsl",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T18:44:30Z",
      "side": 1,
      "message": "this could also be in a split patch if you want to land it quickly.",
      "range": {
        "startLine": 177,
        "startChar": 6,
        "endLine": 177,
        "endChar": 23
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85c5b47b_1456ebba",
        "filename": "src/libANGLE/renderer/d3d/d3d11/shaders/MultiplyAlpha.hlsl",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-11-02T17:50:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00079851_d8f77e18",
      "range": {
        "startLine": 177,
        "startChar": 6,
        "endLine": 177,
        "endChar": 23
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da67f2b8_94cc0a98",
        "filename": "src/libANGLE/renderer/d3d/d3d11/shaders/compiled/multiplyalpha_ftof_pm_luma_2d_ps.h",
        "patchSetId": 3
      },
      "lineNbr": 3,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-18T18:44:30Z",
      "side": 1,
      "message": "interestingly it seems we are regenerating some of this with a newer compiler. Seems like a good thing. Could be a in a split patch if you want to land it quickly. Since it\u0027s non-controversial.",
      "range": {
        "startLine": 3,
        "startChar": 51,
        "endLine": 3,
        "endChar": 64
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41567890_0433f5c4",
        "filename": "src/libANGLE/renderer/d3d/d3d11/shaders/compiled/multiplyalpha_ftof_pm_luma_2d_ps.h",
        "patchSetId": 3
      },
      "lineNbr": 3,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2018-11-02T17:50:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da67f2b8_94cc0a98",
      "range": {
        "startLine": 3,
        "startChar": 51,
        "endLine": 3,
        "endChar": 64
      },
      "revId": "cb2e797fc59d574f5eac7231fea617f38b9edc49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}