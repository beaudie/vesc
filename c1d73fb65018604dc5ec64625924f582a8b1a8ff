{
  "comments": [
    {
      "key": {
        "uuid": "b10fcbe0_6c65ddad",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 490,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-07T14:35:04Z",
      "side": 1,
      "message": "sorry, this wasn\u0027t what I meant by internal dirty bit. The GL-level dirty bits have to map to things in the GLES 2.0/3.0/3.1 spec, and this seamless boolean is a GL desktop specific flag. the dirty bits sometimes work in a two-tier method - the top level GL dirty bits are then applied or translated into internal renderer back-end specific dirty bits, which is what would happen with the cube map thing. for now can we leave it in one of the sync methods?",
      "range": {
        "startLine": 490,
        "startChar": 13,
        "endLine": 490,
        "endChar": 38
      },
      "revId": "c1d73fb65018604dc5ec64625924f582a8b1a8ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aabce2d_57ee23da",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 490,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-02-07T15:38:31Z",
      "side": 1,
      "message": "Right, I think I now get the idea, but I\u0027m not sure if it\u0027s the right way forward.\n\nThe state setting needs to be optimized so that we won\u0027t end up with significantly worse draw call performance after adding new features from ESSL 3.10. It seems like the architecture needed to support the kind of scheme that you describe doesn\u0027t exist in the code yet. Is something like two more clearly separated tiers of dirty bits actually possible to implement without regressing overall performance? Is a design like that justified in the GL backend considering the number of cases that need it? To me it looks like the seamless cube map state is a rare exception, and it would be reasonable to handle it in a slightly unusual way just to get handling it out of the hot path.\n\nThis is a fairly small thing of course, and I wouldn\u0027t want to get too hung up on it. Optimizing binding textures for shaders is a more important task, after that is done it would be easy to add optimized support for binding images following the same pattern.",
      "parentUuid": "b10fcbe0_6c65ddad",
      "revId": "c1d73fb65018604dc5ec64625924f582a8b1a8ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a848309_d7aa1ded",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 490,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-07T19:12:12Z",
      "side": 1,
      "message": "Right right. I think it\u0027s worth at least discussing, even for a small thing.\n\nYou\u0027re right this setting is pretty weird, because of the interaction to virtual and ANGLE\u0027s real GL context. I think I would like it best if you put it back in first way you had it, in onMakeCurrent. I think a dirty bit approach would work pretty similarly, except it could skip the if statement entirely sometimes at the cost of one bit to iterate in the local dirty bits. Not a big deal.",
      "parentUuid": "7aabce2d_57ee23da",
      "revId": "c1d73fb65018604dc5ec64625924f582a8b1a8ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}