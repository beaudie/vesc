{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4faef00b_b864be74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-18T21:41:18Z",
      "side": 1,
      "message": "PTAL - shabi",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c262b3e4_c207d9e2",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 10
      },
      "lineNbr": 4723,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-19T09:57:58Z",
      "side": 1,
      "message": "There\u0027s a call to this for glClearBuffer* too, so there should be a similar bug there. Could you please add a similar test where the clear is done with glClearBuffer?",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61bef37b_63784905",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-19T09:57:58Z",
      "side": 1,
      "message": "I think you can make the change much simpler by changing this ASSERT to `if`, like:\n\n```\n    if (scissoredRenderArea.width \u003d\u003d 0 || scissoredRenderArea.height \u003d\u003d 0)\n    {\n        // \u003cInsert appropriate comment describing when this path can be hit\u003e\n        if (mDeferredClears.any())\n        {\n            redeferClears(contextVk);\n        }\n        return angle::Result::Continue;\n    }\n```\n\nExtra context: https://chromium-review.googlesource.com/c/angle/angle/+/2511370",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "accc3b06_fa83a631",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-19T16:20:04Z",
      "side": 1,
      "message": "early return in front end will be much more efficient, otherwise with your suggestion we essentially do this -\n\n1. `syncState` after valid clear and `clearImpl` stages it\n2. defer a staged clear in `syncState` for the invalid / noop clear\n3. then do the exact opposite in `clearImpl` of invalid / noop clear \n\nthat is unnecessary work\n\nbut if thats a blocker then i will upload a new patchset",
      "parentUuid": "61bef37b_63784905",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5bf6398_27b21ea0",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-19T16:31:52Z",
      "side": 1,
      "message": "i see this comment in `Context::clearBufferfv` -\n```\n// It\u0027s not an error to try to clear a non-existent buffer, but it\u0027s a no-op. We early out so\n// that the backend doesn\u0027t need to take this case into account.\nif (!attachment)\n{\n    return;\n}\n```\n\nwhat makes the \"invalid render area due to OOB scissor\" case any different compared to the \"non-existent buffer\" case (w.r.t early return)",
      "parentUuid": "accc3b06_fa83a631",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "068a339b_7e54f63e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-19T17:02:16Z",
      "side": 1,
      "message": "\u003e early return in front end will be much more efficient\n\nFor the use case of clear after window resize but with a scissor that is out of bound? Yeah, I\u0027m not too worried about that ;) Or do you mean in other scenarios?\n\nFWIW, I\u0027m not asking to remove the early out, I\u0027m just saying you can keep it where it is in the front-end (so the early out is earlier than this CL in the normal case). But then there would be a second early-out in the backend that\u0027s specifically there to deal with this particular problem.",
      "parentUuid": "c5bf6398_27b21ea0",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a96ce152_0ca5defa",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-19T17:03:52Z",
      "side": 1,
      "message": "Wait scratch that, we\u0027re not considering the opposite case: what if the scissor is invalid now, but a resize makes it valid. We\u0027ll be skipping the clear incorrectly.\n\nSo your change is more appropriate. Would you please add that test? In that one, you can also actually verify that the clear happened.",
      "parentUuid": "068a339b_7e54f63e",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba6e8300_3c7d6b16",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 459,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-19T17:07:54Z",
      "side": 1,
      "message": "And about `clearBufferfv`, I didn\u0027t understand your question. It\u0027s fine to skip the clear on OOB scissor, just like with `clear`, but you\u0027d want to skip that _after_ the sync for the very same reason. What makes `!attachment` different is that sync is not going to change that.\n\nSo you might want to move `IsEmptyScissor` out of `noopClearBuffer`, have one early out based on `noopClearBuffer`, and have one early out after the sync for `IsEmptyScissor`.\n\nIf you duplicate your test and change glClear to glClearBufferfv, you\u0027ll likely find the same bug you are fixing here.",
      "parentUuid": "a96ce152_0ca5defa",
      "revId": "c6e70123e8aea88ed99580fc846a3e10485f0af7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}