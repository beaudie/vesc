{
  "comments": [
    {
      "key": {
        "uuid": "ae74e896_4422ecec",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-27T15:30:06Z",
      "side": 1,
      "message": "Hoping we can keep this private. See other comments.",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 201,
        "endChar": 47
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f8e64c_cdcb6269",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 228,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-27T15:30:06Z",
      "side": 1,
      "message": "can you elaborate? I\u0027m not sure I follow.",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 53
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd1170f_e4d6e88b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 228,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T16:34:57Z",
      "side": 1,
      "message": "Prior to this commit, `DynamicBuffer` was just giving out `VkBuffer`s, i.e. there was no RecordableGraphResource involved and as you can see on the left, upon `release()`, the current queue serial was used to schedule the removal of the object.\n\nThe reason for this is that the buffers created by `DynamicBuffer` were purely written to by the CPU and they could persist for many frames without anyone updating any associated serial.\n\nWith the change to BufferHelper, there _is_ an associated serial, but if the buffer is still managed by the CPU (i.e. doesn\u0027t record commands), that serial is never updated.",
      "parentUuid": "35f8e64c_cdcb6269",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 228,
        "endChar": 53
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0a166cc_6a333399",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-27T15:30:06Z",
      "side": 1,
      "message": "same comment here.",
      "range": {
        "startLine": 240,
        "startChar": 8,
        "endLine": 240,
        "endChar": 69
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b961cad1_97eabf3d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T16:34:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0a166cc_6a333399",
      "range": {
        "startLine": 240,
        "startChar": 8,
        "endLine": 240,
        "endChar": 69
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd92812_199c9108",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 242,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-27T15:30:06Z",
      "side": 1,
      "message": "I\u0027m not sure this is safe. releaseRetainedBuffers is called in a lot of places under the assumption that the dynamic buffer is not used in the command graph. I think it\u0027s possible that there could be outstanding dependencies involving this buffer in the graph that aren\u0027t ready for the buffer graph resource to disappear.\n\nMaybe it would make more sense to use a single BufferHelper (non-pointer) in DynamicBuffer and when a new buffer is allocated we internally swap out the BufferHelper\u0027s buffer+memory for a fresh set.\n\nMight have to ponder on this for a bit.",
      "range": {
        "startLine": 241,
        "startChar": 8,
        "endLine": 242,
        "endChar": 22
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df3bc277_422a3fd4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T16:34:57Z",
      "side": 1,
      "message": "I\u0027m not too happy about `new`ing BufferHelpers and deleting them like this either, so I am open to suggestions. Extracting the `BufferAndMemory` (now with view) out of the current buffer and doing the release like it used to be is an option, but that doesn\u0027t address the first part of your comment either way.\n\nAnd about the first paragraph, even though it \"looks\" risky, I\u0027m not sure if there actually can be an issue. The actual vk resources are going to live until the serial is finished, and any nodes the buffer may have recorded doesn\u0027t have a reference back to the object.\n\nBut I\u0027ll go through all the callers to see if I notice anything dangerous.",
      "parentUuid": "0dd92812_199c9108",
      "range": {
        "startLine": 241,
        "startChar": 8,
        "endLine": 242,
        "endChar": 22
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05072bf0_b345a5de",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 242,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-27T17:48:33Z",
      "side": 1,
      "message": "Can we put them in RendererVk::mGarbage?",
      "parentUuid": "df3bc277_422a3fd4",
      "range": {
        "startLine": 241,
        "startChar": 8,
        "endLine": 242,
        "endChar": 22
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6dd6ebb_2d4bd834",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T19:51:56Z",
      "side": 1,
      "message": "That was my first thought, but mGarbage holds `vk::GarbageObject`s which are only VkType pointers. One idea could be to add a second garbage list that holds generic pointers to be deleted, but I\u0027m hoping there would be a better way.",
      "parentUuid": "05072bf0_b345a5de",
      "range": {
        "startLine": 241,
        "startChar": 8,
        "endLine": 242,
        "endChar": 22
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43f5a337_206f7698",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 6
      },
      "lineNbr": 242,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-27T20:46:51Z",
      "side": 1,
      "message": "I think it should be technically simple to have HandleType::BufferHelper and cast mHandle to BufferHelper* in GarbageObject::destroy and call BufferHelper::destroy there and delete the pointer. Unless there are non-technical objections to this.\nBTW, \"VkDevice mHandle\" in GarbageObject looks bad to me. Maybe it can be templated?",
      "parentUuid": "f6dd6ebb_2d4bd834",
      "range": {
        "startLine": 241,
        "startChar": 8,
        "endLine": 242,
        "endChar": 22
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8645436b_c0e9ddab",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-11-27T15:30:06Z",
      "side": 1,
      "message": "is this used anywhere in this CL? I\u0027m thinking we might not need it. But would have to see it in context to understand. If we could remove it at least temporarily that would be good.",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 63
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "247986ad_d9c857e0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T16:34:57Z",
      "side": 1,
      "message": "It\u0027s used in an upcoming CL. If I don\u0027t add it in this commit, it will be in a few after it. WIP context:\n\nhttps://chromium-review.googlesource.com/c/angle/angle/+/1336307/13/src/libANGLE/renderer/vulkan/VertexArrayVk.cpp\n\nline 574.",
      "parentUuid": "8645436b_c0e9ddab",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 63
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc175d5a_6691ebac",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-27T17:48:33Z",
      "side": 1,
      "message": "I\u0027m worried that this is stored both here and in DynamicBuffer.\nI propose to keep it only here.\nmap() will return mMappedMemory if it\u0027s already mapped.\nWe can remove DynamicBuffer::unmap() and call mBuffer-\u003eunmap() directly.",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 27
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bd9f829_88d90b82",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-11-27T19:51:56Z",
      "side": 1,
      "message": "If we want to remove one, it should be the one one here. I moved the map, flush and invalidate functionality to BufferHelper so a buffer can be directly mapped (without getting DynamicBuffer involved).\n\nThis was cached so when a new allocation is not necessary, the old mapping would be used, but I can just fix that with a getter in BufferHelper.",
      "parentUuid": "fc175d5a_6691ebac",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 27
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d659d64_4366e43c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-11-27T20:46:51Z",
      "side": 1,
      "message": "I was also considering removing it from here first, but decided removing the one in DynamicBuffer is better, since it\u0027s nice that BufferHelper encapsulates everything related to the buffer, including the mapped memory.\nThe tracking of when to unmap the memory in DynamicBuffer could be complicated (like we are discussing when is it safe to delete the BufferHelper objects themselves), but BufferHelper is a kind of \"smart pointer\", which would unmap the memory when it\u0027s deleted (like smart pointer going out of scope).",
      "parentUuid": "5bd9f829_88d90b82",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 27
      },
      "revId": "3a086ec753addcc815e1aae2122c1e0f86c01471",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}