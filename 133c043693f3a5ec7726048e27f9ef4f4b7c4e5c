{
  "comments": [
    {
      "key": {
        "uuid": "cc567dfe_4887aa0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T20:38:23Z",
      "side": 1,
      "message": "Will take another look.",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12216459_be7f10c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-28T21:25:32Z",
      "side": 1,
      "message": "Any ideas on why mac-angle-rel is getting crashes?  The stack trace indicates that SecondaryCommandBuffer::executeCommands() is calling free().  It doesn\u0027t.",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fe3131f_d72a6b5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T21:32:08Z",
      "side": 1,
      "message": "Are you able to read the logs? It is this ASSERT:\n\n                    ASSERT(vkCmdEndDebugUtilsLabelEXT);\n\nPlease give them a look so you can get familiar with parsing data from the logs. Do you have the Chromium flake linker extension installed? This is basically mandatory for working with buildbucket/milo.\n\nLink: https://chromium.googlesource.com/angle/angle/+/master/infra/ANGLEWrangling.md#angle-wrangling",
      "parentUuid": "12216459_be7f10c1",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cd9a68b_c14cbb13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-28T21:41:28Z",
      "side": 1,
      "message": "Yes!  What is that ASSERT looking for--the existence of the function from the linker?\n\nI do have the flake linker extension installed.  Unfortunately, I was looking too low to notice the assert (had a narrow window ...).  \n\nHere\u0027s a pointer to a run with the crash: https://ci.chromium.org/p/chromium/builders/try/mac-angle-rel/10678?",
      "parentUuid": "12216459_be7f10c1",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf4fe03e_b072b0ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-28T22:01:10Z",
      "side": 1,
      "message": "I was trying to determine why Tobin\u0027s CL didn\u0027t have this problem, and it\u0027s because I got rid of the #ifdef\u0027s (per Shabi\u0027s review feedback).  Apparently, ANGLE is using the Vulkan back-end on Mac, which I didn\u0027t think was possible, and that Vulkan implementation doesn\u0027t have the extension.\n\nPerhaps I will do what you\u0027re asking for Jamie (sooner than later), so that I can land this cleanly.",
      "parentUuid": "7cd9a68b_c14cbb13",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b56e979a_b5099bb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-29T03:20:37Z",
      "side": 1,
      "message": "I haven\u0027t checked if the code is still the same way, but reading this comment, it means that the `constexpr bool` that I suggested wouldn\u0027t be `constexpr` with tracing enabled and instead take its value from whether the extension exists.\n\nIf the code is completely different now, ignore the above! I\u0027ll get back to this CL later.",
      "parentUuid": "cf4fe03e_b072b0ff",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0688cb96_807d46d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-29T15:35:52Z",
      "side": 1,
      "message": "I did something similar/different.  In the same place that I did the `constexpr bool` before, I used a macro for the method calls, which macro does nothing unless building for tracing (i.e. \"angle_enable_trace \u003d true\" in args.gn).  That takes care of Jamie\u0027s \"hot path\" concerns as well.",
      "parentUuid": "b56e979a_b5099bb1",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18675bcf_4b9d3ddc",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T20:38:23Z",
      "side": 1,
      "message": "Everything in this file adds a small but measurable CPU overhead. Likely you can reproduce with angle_perftests and the most basic draw calloverhead test.\n\nYou could completely solve that by moving all the control to DebugAnnotatorVk.\n\nIn beginEvent - check the API and if it\u0027s one of the \"draw\" or \"dispatch\" APIs enabled here you write out the GL markers. Essentially trigger writeOpenGlApiString.\n\nIn endEvent - you end the debug utils label.\n\nRight now you could detect the API by searching a dictionary of strings for the event name (const char *eventName). Alternately you could pass down an enum of the call to the event functions. We already have such an enum in entry_points_enum_autogen.h.",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79c47dcf_72c947d6",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-28T20:57:23Z",
      "side": 1,
      "message": "\u003e Right now you could detect the API by searching a dictionary of strings for the event name (const char *eventName). Alternately you could ...\n\nHow open are you to landing this CL and addressing this issue in a follow-on CL (so that the AGI team can start testing this)?\n\n\nIn terms of moving the control to DebugAnnotatorVk, wouldn\u0027t it add CPU overhead?  For every GL call (including draw/dispatch calls), we\u0027d search to see if it is a draw/dispatch.  In the end, the same writeOpenGlApiString() and endDebugUtilsLabelEXT() calls will happen for each draw/dispatch, plus we\u0027ll add per-GL-call overhead.  Isn\u0027t that a net-increase in overhead?",
      "parentUuid": "18675bcf_4b9d3ddc",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39225dfb_e5c1a181",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T21:10:13Z",
      "side": 1,
      "message": "Yeah, we would be when the tracing is enabled. The advantage is that the tracing overhead would be entirely separated from the hot path we care about - real applications. The trace overhead with the enum wouldn\u0027t be all that bad - essentially a bitset lookup over all the GL APIs.\n\nIn the long term we could re-implement this as a GL layer.\n\nI\u0027d be fine if we could pursue this in a follow-up as long as we didn\u0027t leave the overhead in for a protracted period of time.",
      "parentUuid": "79c47dcf_72c947d6",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c5f4bcc_5e72384d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-28T21:25:32Z",
      "side": 1,
      "message": "\u003e Yeah, we would be when the tracing is enabled. The advantage is that the tracing overhead would be entirely separated from the hot path we care about - real applications.\n\nGot it!\n\n\u003e I\u0027d be fine if we could pursue this in a follow-up as long as we didn\u0027t leave the overhead in for a protracted period of time.\n\nDefinitely.  I was hoping to get them something official quickly, and will work through remaining issues quickly.",
      "parentUuid": "39225dfb_e5c1a181",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f6bb1e_8aa80586",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-29T00:09:04Z",
      "side": 1,
      "message": "I tried to implement this (pretty far along) and realized that DebugAnnotatorVk methods DO NOT have a vk::CommandBuffer pointer.",
      "parentUuid": "1c5f4bcc_5e72384d",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6603d456_c075b4ec",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-29T00:44:07Z",
      "side": 1,
      "message": "They can access them through the ContextVk. (getOutsideRenderPassCommandBuffer/getStartedRenderPassCommands) And you have access to a gl::Context which can give you the ContextVk. So you do have access to a vk::CommandBuffer pointer.\n\nWhat you don\u0027t have is a guarantee the RP is started before you append these messages.\n\nI guess another way to figure this out is to use a ContextVk dirty bit to flush the debug group messages instead of including the call in ContextVk::setupDraw explicitly. That seems better.",
      "parentUuid": "e4f6bb1e_8aa80586",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d134497d_ba7a7758",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-29T03:45:03Z",
      "side": 1,
      "message": "I\u0027ll look at those ideas tomorrow.  Mean time, I\u0027m going to see if Patchset 8 works on Mac, and is good enough to land.",
      "parentUuid": "6603d456_c075b4ec",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a3450d_b3114f40",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-29T15:35:52Z",
      "side": 1,
      "message": "I converted the method calls into macros, which do nothing unless building with tracing turned on (i.e. \"angle_enable_trace \u003d true\" in args.gn).  This addresses the performance concerns (so I can land this and not have a \"hot path\" problem).",
      "parentUuid": "d134497d_ba7a7758",
      "revId": "133c043693f3a5ec7726048e27f9ef4f4b7c4e5c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}