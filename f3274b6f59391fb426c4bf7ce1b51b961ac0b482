{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c12b62ff_87042afb",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "It\u0027s `deque`.\n\nBut it sounds to me like we really need a queue, not a deque (which is quite more complicated)",
      "range": {
        "startLine": 7,
        "startChar": 64,
        "endLine": 7,
        "endChar": 70
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dab5fa0_fad12090",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:42:09Z",
      "side": 1,
      "message": "Just saw the `mInflightCommands` change. Turning _that_ into `queue` could be interesting (because that one is also really a queue), but I guess making this stay as `deque` is simpler for the time being.",
      "parentUuid": "c12b62ff_87042afb",
      "range": {
        "startLine": 7,
        "startChar": 64,
        "endLine": 7,
        "endChar": 70
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90b97047_75a2f5cb",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Comment reworded (fixed).",
      "parentUuid": "3dab5fa0_fad12090",
      "range": {
        "startLine": 7,
        "startChar": 64,
        "endLine": 7,
        "endChar": 70
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a9df095_22b99c7a",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "nit: FIXEDQUEUE",
      "range": {
        "startLine": 10,
        "startChar": 20,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d80c994f_7421edd4",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 10,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a9df095_22b99c7a",
      "range": {
        "startLine": 10,
        "startChar": 20,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd2d044_5973f03b",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "It\u0027s a queue, do we really need iterators? Could we remove this to keep this as simple as possible?",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 78,
        "endChar": 6
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdfb5a9c_66a80d7f",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:42:09Z",
      "side": 1,
      "message": "Nack",
      "parentUuid": "6bd2d044_5973f03b",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 78,
        "endChar": 6
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad7b387f_068d6d3c",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Ditto, don\u0027t need random access",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44e93e99_d1221a0b",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:42:09Z",
      "side": 1,
      "message": "Nack",
      "parentUuid": "ad7b387f_068d6d3c",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "decfe4cb_a01f7277",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "nit: std::queue has `back()`, but I highly doubt we\u0027d ever need it. Feel free to remove this.",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b2f4193_a24128ff",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "With the iterators gone, you should be able to wrap this on insert/delete instead of reference.\n\nAs unlikely it is to overflow the index, if `N` doesn\u0027t divide 2^sizebits this is _technically_ wrong.",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9baa7a47_af9b6b89",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:42:09Z",
      "side": 1,
      "message": "Nack. Just `static_assert(ispow2(N))` would be fine",
      "parentUuid": "0b2f4193_a24128ff",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db3d2f23_ec0de14e",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Because right now the mInflightCommands is set to 50, not power of two, I can\u0027t assert N being power of two. But I think we should change it to power of two in future CL and use bitmask instead of mod. (I don\u0027t want to change 50 to other numbers in this CL in case anything regress).",
      "parentUuid": "9baa7a47_af9b6b89",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "138998ad_eefe9a70",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-07T14:20:26Z",
      "side": 1,
      "message": "50 was just an arbitrary safeguard, 64 should do just fine (or even 32 for that matter), but ack",
      "parentUuid": "db3d2f23_ec0de14e",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad327cb2_f20765c2",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 204,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "nit: `(mBackIndex + (N - 1)) % N` to be on the safe side. Although I\u0027d prefer `back()` gone altogether.",
      "range": {
        "startLine": 204,
        "startChar": 17,
        "endLine": 204,
        "endChar": 37
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84cfa66b_f2953e80",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 204,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Eventually we should force N being power of 2 and use bitmask.",
      "parentUuid": "ad327cb2_f20765c2",
      "range": {
        "startLine": 204,
        "startChar": 17,
        "endLine": 204,
        "endChar": 37
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f0a5c2_dc304abb",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 227,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Suggest removing this function. We never want to just clear the queue. std::queue also doesn\u0027t have clear().",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59bb3c5c_445e9a05",
        "filename": "src/common/FixedQueue.h",
        "patchSetId": 7
      },
      "lineNbr": 227,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:42:09Z",
      "side": 1,
      "message": "Nack",
      "parentUuid": "57f0a5c2_dc304abb",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8e1b67d_0ff635a7",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Please ASSERT_FALSE that timeout occurred so the test fails on deadlock",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "472ac9d5_fea1fc70",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "If there is deadlock, the thread join should never succeed. But adding an assertion not bad idea as well. \nAssertion added.",
      "parentUuid": "c8e1b67d_0ff635a7",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fee0e7a_da7ef50a",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 165,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "ditto",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2ef8164_d7460323",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 165,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fee0e7a_da7ef50a",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3aba2de_229eb1dd",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 170,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Nice test. Could you please add multi-producer + single-consumer (and vice versa) tests? Just to make sure size tracking can handle such scenarios fine.\n\nAnother interesting test would be something similar to how the backend uses this; that is a producer can become the consumer if queue is full for example.",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cec4c25b_d18d8c48",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 170,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "This class does not support multi-producer. User will have to add there own mutex lock for that. It support single-producer and single consumer, but both producer and consumer can run concurrently.",
      "parentUuid": "b3aba2de_229eb1dd",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00c47be6_1db3baf8",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 170,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-07T14:20:26Z",
      "side": 1,
      "message": "Yes sure, the test could also use a mutex 😊",
      "parentUuid": "cec4c25b_d18d8c48",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "135c55c6_eab49e87",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 170,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-07T18:45:28Z",
      "side": 1,
      "message": "Right, my point is that from FixedQueue point of view, there is no different between multi-producer+mutex versus single producer. It did not add extra test coverage here.",
      "parentUuid": "00c47be6_1db3baf8",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f5393be_d58173f2",
        "filename": "src/common/FixedQueue_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 170,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-07T18:51:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "135c55c6_eab49e87",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0a71ebb_5e77c9cc",
        "filename": "src/common/FixedVector_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "nit: revert",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97ce61d3_ba0f99c9",
        "filename": "src/common/FixedVector_unittest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Oops. Accidentally modified wrong file.",
      "parentUuid": "d0a71ebb_5e77c9cc",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d8be339_dd07a88a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 584,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "`ANGLE_TRY` + make the function return `angle::Result`.\n\nBut more importantly, there\u0027s a race condition here. Between the `if` and the `dequeueLock` someone may have already drained `mTasks`. So you\u0027d need another `if (mTasks.full())` check after taking the `dequeueLock`.",
      "range": {
        "startLine": 584,
        "startChar": 8,
        "endLine": 584,
        "endChar": 14
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ee4c4f_67946f9e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 584,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Thanks. Good catch on the race condition.",
      "parentUuid": "2d8be339_dd07a88a",
      "range": {
        "startLine": 584,
        "startChar": 8,
        "endLine": 584,
        "endChar": 14
      },
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6926920_275af0dc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Could this be moved before `dequeueLock`? Because enqueue and dequeue are now decoupled.",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae9e05ed_c3c24a6c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 631,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Right.",
      "parentUuid": "b6926920_275af0dc",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29aa48df_bfcc2443",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 749,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "nit: Revert; previous code marked the scope of the lock clearly",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abb362f8_2225d559",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 749,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "I just don\u0027t like the {} without an if 😊. But reverted.",
      "parentUuid": "29aa48df_bfcc2443",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8b9d51a_211d0fa0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 764,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "Please add a comment. I presume you added this to make sure no tasks are added before handleDeviceLost()?",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf0ba5e9_d4dcfb37",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 7
      },
      "lineNbr": 764,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "That\u0027s right. Comment added.",
      "parentUuid": "a8b9d51a_211d0fa0",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3763ce8d_8a7e5263",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 7
      },
      "lineNbr": 561,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:22:55Z",
      "side": 1,
      "message": "In a follow up perhaps, I suggest renaming these mutexes. How about this?\n\n- `s/mWorkerMutex/mTaskEnqueueMutex`\n- `s/mSubmissionMutex/mTaskExecuteMutex`",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dcb8fa6_ae78587f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 7
      },
      "lineNbr": 561,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-06T23:53:59Z",
      "side": 1,
      "message": "Sounds good to me. And mTask to mTaskQueue. Lets defer that to a separate CL. I will leave this comment open.",
      "parentUuid": "3763ce8d_8a7e5263",
      "revId": "f3274b6f59391fb426c4bf7ce1b51b961ac0b482",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}