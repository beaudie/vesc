{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d7e1692_e45a2eb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "+Geoff as second reviewer",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "929877fd_17af1979",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "Extra space?\n\n```suggestion\n                   {info::OpenCL_C_Version, std::string(\"OpenCL C 3.0\")},\n```",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f82301b_aa8d5c27",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Ah. This is actually required by the spec:\n\nhttps://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#CL_DEVICE_OPENCL_C_VERSION\n\n```\nOpenCL\u003cspace\u003eC\u003cspace\u003e\u003cmajor_version.minor_version\u003e\u003cspace\u003e\u003cvendor-specific information\u003e\n```\n\nIIRC, we fail related CTS if we are missing the trailing space:\nhttps://github.com/KhronosGroup/OpenCL-CTS/blob/main/test_conformance/api/test_api_min_max.cpp#L2410",
      "parentUuid": "929877fd_17af1979",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "354143d0_e8c8d27c",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T15:35:10Z",
      "side": 1,
      "message": "Acknowledged (wow)",
      "parentUuid": "1f82301b_aa8d5c27",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5ea880_ce9f95d6",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "Please reference a bug with TODOs. Past experience shows it gets confusing when years later someone sees the TODO and cannot find the context for it.\n\nDitto for all the other TODOs in this file.",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c4cb3e5_cb49555a",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Totally missed this, will add.",
      "parentUuid": "6d5ea880_ce9f95d6",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc2d3015_e508d47c",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T19:02:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c4cb3e5_cb49555a",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50bb2abc_5143664a",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "In ANGLE, we reserve `auto` for nested template types (like iterators, lambdas, etc). It helps readability to be explicit about the type when the type is simple (also helps `grep`ability)",
      "range": {
        "startLine": 139,
        "startChar": 4,
        "endLine": 139,
        "endChar": 8
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4696ff0_09438640",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Touche, will update.",
      "parentUuid": "50bb2abc_5143664a",
      "range": {
        "startLine": 139,
        "startChar": 4,
        "endLine": 139,
        "endChar": 8
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47c98021_8b9863cb",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T19:02:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4696ff0_09438640",
      "range": {
        "startLine": 139,
        "startChar": 4,
        "endLine": 139,
        "endChar": 8
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89dc8ccf_94750502",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "Should be a query eventually?",
      "range": {
        "startLine": 161,
        "startChar": 32,
        "endLine": 161,
        "endChar": 36
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba23b597_62fb53ac",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Good catch! Will update.",
      "parentUuid": "89dc8ccf_94750502",
      "range": {
        "startLine": 161,
        "startChar": 32,
        "endLine": 161,
        "endChar": 36
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99a2493c_1a8110f4",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 161,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T19:02:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba23b597_62fb53ac",
      "range": {
        "startLine": 161,
        "startChar": 32,
        "endLine": 161,
        "endChar": 36
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65f4800f_0e7cbbed",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "Please use `angle::HashMap`",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5814931_5dee12de",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "65f4800f_0e7cbbed",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1f87c33_502a46a5",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T19:14:58Z",
      "side": 1,
      "message": "Unresolving, so it\u0027s not forgotten",
      "parentUuid": "e5814931_5dee12de",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd6d1d4f_0837be42",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T20:49:19Z",
      "side": 1,
      "message": "Whoops, good catch. Double checked this time around.",
      "parentUuid": "f1f87c33_502a46a5",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ba40075_a1e099fd",
        "filename": "src/libANGLE/renderer/vulkan/CLDeviceVk.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T21:11:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd6d1d4f_0837be42",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 12
      },
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e77074c6_679e3ea7",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:05:54Z",
      "side": 1,
      "message": "Excuse my ignorance, what\u0027s the exact relationship between CL and EGL? AFAICT, EGL is not used to create a CL context, that\u0027s independent, right? At the same time, I see some interop through EGL images... is there a connecting point between them otherwise?\n\nAFAIU, CL is being created with the default display (where the attributes are controlled by env vars), but the app may create a display with any other attributes (like, forcing SwiftShader). Is there an assumption in the CL implementation that the displays match? I don\u0027t imagine EGL image sharing works otherwise.\n\nBy the way, I see CL lets you query the devices and choose one; shouldn\u0027t then the display creation be done lazily until a device is chosen?",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8d84bc5_9e971008",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-26T21:03:50Z",
      "side": 1,
      "message": "Ultimately we only use this egl display object to init RendererVk that we use in\nsubsequent API calls.\n\nIIRC we don\u0027t really use this egl display object for much else.\nPerhaps this is abusing original intent, but I see that in order to init\na RendererVk obj. we need a DisplayVk and egl::Display (thus our approach here).\n\n\u003e AFAICT, EGL is not used to create a CL context\n\nNot directly, correct. We only use the display object to get the\nRendererVk from it. We have CL\u0027s Context class derive from vk::Context here,\nand we pass our initialized default egl\u0027s display\u0027s RendererVk object\nto vk::Context\u0027s ctor.\nWith that, I don\u0027t think there should be issues with API interop? \n(If/when we cross that bridge for these ones mainly)\n```\ncl_khr_egl_image\ncl_khr_gl_sharing\n```\n\nTl;dr - If there is a way to init a RendererVk without egl display, we could do that instead.",
      "parentUuid": "e77074c6_679e3ea7",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1038ed4d_05168b50",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T19:14:58Z",
      "side": 1,
      "message": "Ok, I guess ultimately we\u0027d want to make sure the GL and CL renderers are the same so you are not sharing images between VkDevices... but that\u0027ll probably be a major surgery. Let\u0027s shelve that for now.\n\nI mean, I guess the code as is _would_ work fine if the EGL device also uses the default attributes.\n\nHow do you deal with `clCreateContext` choosing the device? The default display may be using Nvidia for example, but `clCreateContext` trying to create a software device (SwiftShader). Kind of feels like `clCreateContext` should be the one that decides what display to use.\n\n(probably no harm in platform holding on to a random display at the same time though, just trying to understand the API better)",
      "parentUuid": "e8d84bc5_9e971008",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78f58c60_f117156b",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T20:49:19Z",
      "side": 1,
      "message": "\u003e How do you deal with clCreateContext choosing the device?\n\nThe device(s) are passed as a parameter of this API (from prior clGetDeviceIDs).\nHow we (ANGLE) report/return capable CL devices is by the successful creation\nof that RendererVk object (from that default/dummy display object we created).\nFor core OpenCL, there really isn\u0027t a concept of a display at all here \n(unlike EGL/WGL/etc. + GLES)\n\n\u003e probably no harm in platform holding on to a random display\n\nMy same thoughts on this here as well \n(as OpenCL will not need it for anything other than its RendererVk object).\nAgain, if there was a way to just get a handle to a RendererVk object without \nneeding a default display object, we would opt for that instead. \n\n\u003e ultimately we\u0027d want to make sure the GL and CL renderers are the same so you are not sharing images between VkDevices\n\nAre you talking about in the case we do implement CL-GL interop extensions\n(mainly with resource sharing)?\n\nIf so, then yeah I also agree to shelve for now.",
      "parentUuid": "1038ed4d_05168b50",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b917affd_a5fc4287",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-01-29T21:00:36Z",
      "side": 1,
      "message": "One thing to add, IIRC Vulkan can operate \"headless\" (surfaceless context)?\n\nPerhaps maybe its better to overload RendererVk ctor to create\nsuch a case (for OpenCL folks). That way we should not need a\ndisplay here (less abuse of existing items).\n\nThis CL\u0027s approach was just the simplest (assuming there are no other side-effects of holding on to a default/dummy display that would hurt us here).\n\nI can either change this PR to perform the above, or perhaps we can leave a TODO to \nlook at later. Thoughts?",
      "parentUuid": "78f58c60_f117156b",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8d65ac6_01b115d9",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T23:30:25Z",
      "side": 1,
      "message": "\u003e Perhaps maybe its better to overload RendererVk ctor to create\nsuch a case (for OpenCL folks). That way we should not need a\ndisplay here (less abuse of existing items).\n\nYeah, a complete separation of RendererVk from DisplayVk is what you\u0027d need eventually, which is what I referred to as \"probably be a major surgery\". Although looking grepping `mDisplay` and `getDisplay`, it doesn\u0027t show _that_ many places need modification.\n\nI\u0027d say, let\u0027s keep this change as-is, I don\u0027t believe there\u0027s any harm in using the EGL display even if the app wants to create a display too, and we can keep the separation for another CL. The separation works for now, but it\u0027d actually make things worse for interop in the future, so TBD!",
      "parentUuid": "b917affd_a5fc4287",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70aff0c7_cac50ad9",
        "filename": "src/libANGLE/renderer/vulkan/CLPlatformVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T23:50:30Z",
      "side": 1,
      "message": "It would be great to have this as a test by the way; create CL platform/context, then create EGL+GL context, make sure one thread using CL and another thread using GL doesn\u0027t blow up.\n\nNot sure what your plan is about tests, we do frequently find the need for new tests (in GL), and we add them as end2end tests because the GL CTS is really not being focused on anymore. For CL, you might want to have such tests end up in CTS. However, it\u0027d still be a good idea to make sure we _can_ write end2end tests using CL in ANGLE itself. That would allow us to develop new tests in response to bugs noticed during development / review and prove the commit works with the new tests right away.",
      "parentUuid": "b8d65ac6_01b115d9",
      "revId": "27969c461bf437e913f1db9d03e9bedd8519dd9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}