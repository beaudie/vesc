{
  "comments": [
    {
      "key": {
        "uuid": "d9e30f07_90a1070d",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 108,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "understood that you want to restrict your use case to 16-bits for safety, but I\u0027d like to keep this class pretty close to std::bitset. Please remove this, and use to_ulong and a cast in validate.",
      "range": {
        "startLine": 108,
        "startChar": 13,
        "endLine": 108,
        "endChar": 22
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c2b0994_f2c27373",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 264,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: you can omit the 0",
      "range": {
        "startLine": 264,
        "startChar": 6,
        "endLine": 264,
        "endChar": 25
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9515c88a_f70c6841",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 280,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: you can omit the 0",
      "range": {
        "startLine": 280,
        "startChar": 6,
        "endLine": 280,
        "endChar": 25
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3866126_314aa166",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 627,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: you can omit this",
      "range": {
        "startLine": 627,
        "startChar": 4,
        "endLine": 627,
        "endChar": 25
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e3fc8c_22363955",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 639,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: you can omit this",
      "range": {
        "startLine": 639,
        "startChar": 4,
        "endLine": 639,
        "endChar": 25
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c249ac7_e765cbfe",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 844,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: make this a common helper function in angletypes.",
      "range": {
        "startLine": 844,
        "startChar": 18,
        "endLine": 844,
        "endChar": 39
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f324e5d_18018065",
        "filename": "src/libANGLE/Framebuffer.h",
        "patchSetId": 10
      },
      "lineNbr": 389,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: data goes after code\n\nprivate:\n  // functions\n  // private data",
      "range": {
        "startLine": 389,
        "startChar": 9,
        "endLine": 389,
        "endChar": 30
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b44d967_06a28b08",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2801,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "make this a common helper function in angletypes.cpp.",
      "range": {
        "startLine": 2795,
        "startChar": 0,
        "endLine": 2801,
        "endChar": 0
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "045c1bb5_b35edf50",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 10
      },
      "lineNbr": 409,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "can you put this in the C++ file, rather than inlined?",
      "range": {
        "startLine": 409,
        "startChar": 30,
        "endLine": 409,
        "endChar": 51
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3ad0214_fa570f9a",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 10
      },
      "lineNbr": 414,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "it makes me nervous to have INT and NONE have the same values. I\u0027m not sure if the algorithm is correct in that case. I would suggest using 0/1/2/3 for none/int/uint/float.",
      "range": {
        "startLine": 414,
        "startChar": 19,
        "endLine": 414,
        "endChar": 24
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64849429_0bbb4636",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 396,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: ProgramOutputsMatchFramebuffer (also Caps for static functions)",
      "range": {
        "startLine": 396,
        "startChar": 5,
        "endLine": 396,
        "endChar": 41
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1917be1_7543ca19",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 402,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-28T17:53:53Z",
      "side": 1,
      "message": "nit: to use to_ulong with a cast. you can probably do most of the math in unsigned long.",
      "range": {
        "startLine": 402,
        "startChar": 66,
        "endLine": 402,
        "endChar": 75
      },
      "revId": "4c332ba7be705d24f43806d66b7a5f6c921ba274",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}