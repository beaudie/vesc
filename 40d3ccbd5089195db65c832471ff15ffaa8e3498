{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0f758a3d_bc152c92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-10-03T20:43:02Z",
      "side": 1,
      "message": "Nice change and LGTM.",
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5376a8e2_31974f3d",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-10-03T20:43:02Z",
      "side": 1,
      "message": "Maybe explicitly spell out the bits enum here as well to make it more obvious?\nBlitColor\u003d Blit+ 0x1,\n...",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d94313bc_58cf088f",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-03T22:05:37Z",
      "side": 1,
      "message": "I had considered it, but it seemed like that would only make things more error prone, in case I make a mistake and someone ends up using the enums.\n\nLet\u0027s see what @cnorthrop@google.com thinks as tie breaker",
      "parentUuid": "5376a8e2_31974f3d",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52b0ad7_1236e912",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-03T23:11:51Z",
      "side": 1,
      "message": "Is there any reason not to spell them out without math?\n```\nBlitColor,\nBlitDepth,\nBlitStencil,\nBlitAll,\n```\nWhat mistake are you worried about?\n\nFine with landing as-is too, it just took me a bit to see you were adding hidden enums with `Blit + 0x7`.",
      "parentUuid": "d94313bc_58cf088f",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8733f957_1bb22586",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T01:56:18Z",
      "side": 1,
      "message": "Because it\u0027s combinatorial, and the enum is constructed with `|`. Spelling it out would look like:\n\n```\nBlit,\nBlitColor \u003d Blit + 0x1,\nBlitDepth \u003d Blit + 0x2,\nBlitStencil \u003d Blit + 0x4,\nBlitColorAndDepth \u003d Blit + 0x3,\nBlitColorAndStencil \u003d Blit + 0x5,\nBlitDepthAndStencil \u003d Blit + 0x6,\nBlitAll \u003d Blit + 0x7,\n```\n\nand no code would use `Blit*` other than `BlitAll` (for range check). Is that helpful in any way?",
      "parentUuid": "b52b0ad7_1236e912",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a14e7dfe_083aeddd",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-04T02:26:05Z",
      "side": 1,
      "message": "Ah, got it.  Doesn\u0027t really help assigning enum values out of order (that\u0027s confusing).  And putting them in order is even goofier.\n\nProbably fine to leave it as-is in the CL.",
      "parentUuid": "8733f957_1bb22586",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31eb1801_5e25aecc",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-04T02:31:28Z",
      "side": 1,
      "message": "Ack. I can always add the unused lines in a follow up if you feel strongly about it Charlie.",
      "parentUuid": "a14e7dfe_083aeddd",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "40d3ccbd5089195db65c832471ff15ffaa8e3498",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}