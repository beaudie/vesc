{
  "comments": [
    {
      "key": {
        "uuid": "4b7d5514_ada09a74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-18T23:50:54Z",
      "side": 1,
      "message": "It\u0027s working well and passes all of the tests (and helps PUBG).  Charlie PTAL.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4878cdb2_1bb11140",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Looks much better Ian! I have mostly nits.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15c4947e_660f33b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-19T15:41:44Z",
      "side": 1,
      "message": "Ian: if you rebase this CL now I can take a look. My prior change landed.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dd5f319_2c8222a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-19T16:30:45Z",
      "side": 1,
      "message": "I think you don\u0027t really need the extra state tracking here. The existing mDepthTestEverEnabled is enough for your purpose as well as I commented in the ddoc. What you try to detect if someone writes to depth buffer after invalidate. mDepthTestEVerEnabled tracks read_or_write. So on the surface, tracking write will make sure we do not turn storeOP on in the case of just doing read. But why would someone enable depth test after calling invalidate and without write to depth buffer? They will getting undefined depth values to do that, app will have rendering correctness issue. So logically if they actually want to use depth buffer after invalidate, they will enable depth test and enable write and write to it first (either via clear or set depthFunc to always pass or whatever other method). So if you just check depthTest, ignore depthMask, I think you are as good as you are now, and avoid all the complexity of tracking depthMask as well.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c1811a8_40b238bd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2830,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "This should only restore defined contents if write mask is enabled.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2641014_25ef06da",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2849,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Same here",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "806ae3a8_97138670",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2864,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Same with stencil",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c8bbff_586b4986",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2899,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Should also restore stencil defined contents when writemask is changed, similar to depth mask being changed.",
      "range": {
        "startLine": 2890,
        "startChar": 0,
        "endLine": 2899,
        "endChar": 22
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af27787e_77b3349b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 331,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "I think this statement needs to be swapped.   The render pass\u0027s area is entirely enclosed by the invalidated area.",
      "range": {
        "startLine": 331,
        "startChar": 19,
        "endLine": 331,
        "endChar": 79
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79dd8e9_7f3bbe93",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2250,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Can drop this. It\u0027s probably cheaper to just set the bool to true, than to first test if it\u0027s false.",
      "range": {
        "startLine": 2250,
        "startChar": 32,
        "endLine": 2250,
        "endChar": 82
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de4d6af7_45eb49e7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 944,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "This is an awkward name.   Maybe something like \u0027shouldDiscardDepthAttachment\u0027.",
      "range": {
        "startLine": 944,
        "startChar": 9,
        "endLine": 944,
        "endChar": 38
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431a1d96_05cbc77b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 947,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "\"Enablement\"? Should this just say \"mDepthEnabled\"? Or better \"mDepthTestEnabled\"?",
      "range": {
        "startLine": 947,
        "startChar": 59,
        "endLine": 947,
        "endChar": 75
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c308a2_096bbb8a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 949,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 949,
        "startChar": 43,
        "endLine": 949,
        "endChar": 50
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cb52f7c_5b19e9a6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 962,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "It doesn\u0027t look like mStencilEverInvalidated is necessary (or mDepthEverInvalidated).   Both mStencilEverInvalidated and mStencilInvalidated are set to true together, so if mStencilInvalidated is true, mStencilEverInvalidated must also be true too.\n\nIs there some other reason we need to know if it was ever invalidated beforehand?   Or can it be removed?",
      "range": {
        "startLine": 962,
        "startChar": 12,
        "endLine": 962,
        "endChar": 35
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "894c55c1_8bd764c4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "same typo",
      "range": {
        "startLine": 964,
        "startChar": 45,
        "endLine": 964,
        "endChar": 52
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "571fd106_2d8aaaf3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 979,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "same typo",
      "range": {
        "startLine": 979,
        "startChar": 43,
        "endLine": 979,
        "endChar": 50
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a3bf1d_2214f071",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 984,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "This:\n\n    if (x)\n        return true;\n    return false;\n\nis just:\n\n    return x;",
      "range": {
        "startLine": 977,
        "startChar": 0,
        "endLine": 984,
        "endChar": 5
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c43a9aa_5fb162a7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 991,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "same typo",
      "range": {
        "startLine": 991,
        "startChar": 45,
        "endLine": 991,
        "endChar": 52
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db89554d_a48ac03f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1044,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-19T16:12:59Z",
      "side": 1,
      "message": "if depthTest\u003d\u003dtrue and depthMask\u003d\u003dfalse, depth buffer is still been used for depth test (read), just not for write. mDepthTestEverEnabled should set to true so that we will not skip the depth load/clear. This change will make mDepthTestEverEnabled set to false, thus skip the depth load/clear",
      "range": {
        "startLine": 1044,
        "startChar": 12,
        "endLine": 1044,
        "endChar": 40
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c206c568_dd998970",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1045,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "Can be removed.\n\nTaking it further, are either of these checks necessary or can you just always set mDepthInvalidated \u003d false?",
      "range": {
        "startLine": 1045,
        "startChar": 16,
        "endLine": 1045,
        "endChar": 33
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "968db6ec_29d48f54",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1053,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "Can take `const gl::DepthStencilState \u0026dsState` similarly and look at `isStencilMaskedOut()` as well.",
      "range": {
        "startLine": 1053,
        "startChar": 31,
        "endLine": 1053,
        "endChar": 43
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dfdc941_f15e0895",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1059,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "Same as above with depth.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a07f79_616a5a7b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1059,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-19T16:51:43Z",
      "side": 1,
      "message": "Similar to Shabi\u0027s comment above, this check can be removed.",
      "range": {
        "startLine": 1059,
        "startChar": 16,
        "endLine": 1059,
        "endChar": 35
      },
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfa1723_e51546e6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 1099,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-19T15:06:20Z",
      "side": 1,
      "message": "I would add a comment as to why Depth/StencilEverInvalidated is necessary. At a first glance it looks redundant, but it\u0027s there to distinguish between storeOp \u003d DONT_CARE because of invalidate or because of swapchain optimization or multisampled render to texture.",
      "revId": "c5726e1fc8806fa6f183a774e7ae03386e340004",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}