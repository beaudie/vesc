{
  "comments": [
    {
      "key": {
        "uuid": "a34118be_97431107",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-22T16:38:46Z",
      "side": 1,
      "message": "Removing the +2, to give Courtney a chance to answer my questions.",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "015d3889_9b56305e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2007,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-22T16:38:46Z",
      "side": 1,
      "message": "It looks like this is only called by syncPipelineCacheVk(), so it shouldn\u0027t need a lock.   Is there a good way to ASSERT() that the lock is held by the current thread so we can guarantee that in the future too?",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcddc104_e9e6aa05",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2007,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-22T17:44:20Z",
      "side": 1,
      "message": "mPipelineCache is actually a Vulkan object and mPipelineCache.getCacheData is a Vulkan call made on that object so we don\u0027t need locking like we would for a cpu-based cache object.\nBasically we just lock for those things that would actually change the value of mPipelineCache, e.g. create a new Vulkan object. That only happens during RendererVk initialization and RendererVk::getPipelineCache.",
      "parentUuid": "015d3889_9b56305e",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6d5002c_0e7d4398",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2017,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-22T16:38:46Z",
      "side": 1,
      "message": "Sounds like you\u0027re working on this now.   What are the thoughts on whether we need a lock here?\n\nSince this is called by WindowSurfaceVk::doDeferredAcquireNextImage(), it seems like it\u0027s necessary.   Can you try adding one to see how things look?",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a12b10a_02bfa07b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2017,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-22T17:44:20Z",
      "side": 1,
      "message": "My understanding here is that we expect the pipelineCache Vulkan object to already have been created. Once created we don\u0027t change the value of mPipelineCache and can thus reference it without the lock.\nTechnically the ASSERT probably should grab the lock in case it\u0027s not true but that seems overkill for this ASSERT.",
      "parentUuid": "d6d5002c_0e7d4398",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c73e95e9_22163b37",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2017,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-22T17:52:59Z",
      "side": 1,
      "message": "Should also add, we may need a lock around blob cache because there is more than just pipeline cache that uses blob cache. Will look at that for a future CL.",
      "parentUuid": "1a12b10a_02bfa07b",
      "revId": "541ed41dc4c28cdd93623b9153942df2534e7f36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}