{
  "comments": [
    {
      "key": {
        "uuid": "09ba0669_d6a3a672",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-06T17:11:22Z",
      "side": 1,
      "message": "This changes the logic of how rules are applied for devices with multiple GPUs.\nThis will be very confusing if answer is different for different GPUs.\nI wanted to suggest this in my original review, but didn\u0027t want to burden you too much - in my opinion the subobjects used by Rules and Scenarios should be different. So, the new ScenarioDevice class should have a single ScenarioGPU instead of list of GPUs. Unless you are prepared to deal with multiple GPU devices.",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dae9415_471fb9f7",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2018-12-06T17:26:08Z",
      "side": 1,
      "message": "If we ever allowed a Scenario to have more than one GPU, then all GPUs of both the Scenario and Rule would be compared against each other (with any match resulting in a match).  However, since a Scenario only gets one GPU, it really won\u0027t be a problem.  In my detailed unit tests (which will never be merged), I believe I tested both directions of multi-GPU situations.",
      "parentUuid": "09ba0669_d6a3a672",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "171ac871_f91956df",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-06T17:37:13Z",
      "side": 1,
      "message": "Replying to your reply:\nYour suggestion \"all GPUs of both the Scenario and Rule would be compared against each other (with any match resulting in a match).\" looks ill defined to me.\nIf you have RuleA saying \"no ANGLE for GPU1\" and RuleB saying \"ANGLE for GPU2\", then since last matching rule overrides a previous one, what determines whether ANGLE will be used or not is the order between the rules, and this seems wrong to me.\nI can\u0027t think quickly of a good solution either.\n\nTo clarify my initial comment:\n1. Please change the \"for\" loop into examining only the first element in toCheck.mList in this CL or a followup, because your rules schema doesn\u0027t specify how to deal with multiple GPU devices, and examining only the first element keeps the old behavior and would be correct for single GPU devices.\n2. Add to your \"address more feedback\" bug an item to separate StringPart, IntegerPart, Version, Application, GPU, Device classes into Rule and Scenario versions. The classes in Scenario version should not have \"match()\" method, for example.\n3. And another item in the \"more feedback\" bug - specify how rules should be applied to devices with multiple GPUs.",
      "parentUuid": "09ba0669_d6a3a672",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20fa0c9f_0a494a36",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-06T17:39:40Z",
      "side": 1,
      "message": "The example above is for a device which has both GPU1 and GPU2.",
      "parentUuid": "171ac871_f91956df",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 205,
        "endChar": 0
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ae4b4b3_b0b63052",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-06T17:11:22Z",
      "side": 1,
      "message": "Since you always add a GPU here, how is it possible that the list will not have a GPU?",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 956,
        "endChar": 39
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "481ad2b6_69c7f6f4",
        "filename": "src/feature_support_util/feature_support_util.cpp",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2018-12-06T17:26:08Z",
      "side": 1,
      "message": "This list will always have one and only one GPU.  The list that\u0027s part of the rule may not have any GPU.  It was the list I was calling front() on.  For the default rule, there are no GPUs listed, and hence the crash.",
      "parentUuid": "7ae4b4b3_b0b63052",
      "range": {
        "startLine": 956,
        "startChar": 0,
        "endLine": 956,
        "endChar": 39
      },
      "revId": "5e03feaa5e61bbafb140506e3635dd9442c0a2f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}