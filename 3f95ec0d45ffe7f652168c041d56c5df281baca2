{
  "comments": [
    {
      "key": {
        "uuid": "fefdf6a7_c0e90563",
        "filename": "src/common/Color.h",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "Slight preference for ColorVariant.\n\nThis class is also very similiar to our VertexAttribCurrentValueData but I don\u0027t think there is much shareable code because we want color structs vs arrays.",
      "range": {
        "startLine": 51,
        "startChar": 7,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce5c1fec_38c1e5ff",
        "filename": "src/common/Color.h",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "I am not sure, the color is not really a variant, but it is a typed color -- that was my intention with ColorT. (didn\u0027t want to name it TypedColor or ColorTyped, though)\nBut if ColorVariant still fits better in your opinion I can change it. Please let me know.",
      "parentUuid": "fefdf6a7_c0e90563",
      "range": {
        "startLine": 51,
        "startChar": 7,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a782f0b_71231def",
        "filename": "src/common/Color.h",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T19:41:08Z",
      "side": 1,
      "message": "I think variant fits in this case, ColorVariant would mean that the Color is \"one of these possibilities\".",
      "parentUuid": "ce5c1fec_38c1e5ff",
      "range": {
        "startLine": 51,
        "startChar": 7,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f4cdaa7_3c1e59f2",
        "filename": "src/common/Color.h",
        "patchSetId": 8
      },
      "lineNbr": 51,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-10T10:43:14Z",
      "side": 1,
      "message": "OK",
      "parentUuid": "4a782f0b_71231def",
      "range": {
        "startLine": 51,
        "startChar": 7,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce5545eb_84be586f",
        "filename": "src/common/Color.inl",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "I would guess this will hit some undefined behaviour.  You may need to break this up and check type.  I would guess this is not in a critical path.",
      "range": {
        "startLine": 56,
        "startChar": 31,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7993feb5_da118100",
        "filename": "src/common/Color.inl",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "Hm, I think you\u0027re right.",
      "parentUuid": "ce5545eb_84be586f",
      "range": {
        "startLine": 56,
        "startChar": 31,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ee89c5_ec56f5ab",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3252,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "This extension will not be supported on all of our backends.  Enable it per-backend in the files: renderer11_utils.cpp renderer9_utils.cpp renderergl_utils.cpp and vk_caps_utils.cpp based on native support and if it has been implemented in that backend.",
      "range": {
        "startLine": 3252,
        "startChar": 4,
        "endLine": 3252,
        "endChar": 53
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a04f4c2d_6c893fee",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "See entry_point_packed_gl_enums.json to generate these entry points using our internal enums.",
      "range": {
        "startLine": 350,
        "startChar": 28,
        "endLine": 350,
        "endChar": 41
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d182520_8d50c36e",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "Ah, I see!",
      "parentUuid": "a04f4c2d_6c893fee",
      "range": {
        "startLine": 350,
        "startChar": 28,
        "endLine": 350,
        "endChar": 41
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a9b195_9df62d5d",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "You could template these functions on the parameter type and not need the isIntegerType below.",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f714c4c5_b629cede",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "That would not work because the isIntegerType doesn\u0027t describe if the data type to query or set is an integer type but the \"type\" of the OpenGL function:\n*Parameter*() vs. *ParameterI*().\nMaybe a better name would be isIntegerFunctionVariant?",
      "parentUuid": "34a9b195_9df62d5d",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "478ffada_d0c9ac52",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T19:41:08Z",
      "side": 1,
      "message": "Oh, I see.  In our vertex attribute code for handling these kind of integers, we called the pure integers.  Given that they are known at compile time, we can move it from a function parameter to template parameter at least (and maybe on these functions too?).",
      "parentUuid": "f714c4c5_b629cede",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17804e69_b1436d66",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-10T10:43:14Z",
      "side": 1,
      "message": "done",
      "parentUuid": "478ffada_d0c9ac52",
      "range": {
        "startLine": 35,
        "startChar": 7,
        "endLine": 35,
        "endChar": 22
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58513c3b_51c6c660",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1348,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "Why is this not an integer type?",
      "range": {
        "startLine": 1348,
        "startChar": 50,
        "endLine": 1348,
        "endChar": 55
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b11640d_a56889a3",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1348,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "58513c3b_51c6c660",
      "range": {
        "startLine": 1348,
        "startChar": 50,
        "endLine": 1348,
        "endChar": 55
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5c1bbb7_741ba56d",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1368,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "Same for this.",
      "range": {
        "startLine": 1368,
        "startChar": 54,
        "endLine": 1368,
        "endChar": 59
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15887d56_6316499e",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1368,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "See comment above.",
      "parentUuid": "a5c1bbb7_741ba56d",
      "range": {
        "startLine": 1368,
        "startChar": 54,
        "endLine": 1368,
        "endChar": 59
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2d2929f_64d45a82",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "What guarantees this?",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc3249f_ffb48076",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "Good point...\nBut D3D11_SAMPLER_DESC.BorderColor only supports float I think. Is there any way to set Integer border colors on Direct3D11?",
      "parentUuid": "b2d2929f_64d45a82",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d43c8b36_59a12b65",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T19:41:08Z",
      "side": 1,
      "message": "It\u0027s unclear what D3D11 will do when you sample an integer texture out of bounds.  The docs don\u0027t specify.  You could add a test and I suspect it will cast the floats to ints.\n\nWe should at least do the cast from the ColorT to floats here, you could add a helper in ColorT to generate a ColorF from any type it\u0027s holding.",
      "parentUuid": "cfc3249f_ffb48076",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df89960a_fe005d52",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-10T10:43:14Z",
      "side": 1,
      "message": "I created a test case but it seems casting the ints to floats and putting that into samplerDesc.BorderColor has no effect. That\u0027s a pity.\nHow to proceed?",
      "parentUuid": "d43c8b36_59a12b65",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8272fc0_9fce6567",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-10T16:04:43Z",
      "side": 1,
      "message": "I looked into this and it turns out we\u0027re emulating the wrap modes of integer textures in ES3.  Supporting this should be possible but requires a bit of work in our shader compiler.\n\nThe implementation of the wrap functions is done here: https://cs.chromium.org/chromium/src/third_party/angle/src/compiler/translator/TextureFunctionHLSL.cpp?l\u003d23\n\nThe wrap types come from: https://cs.chromium.org/chromium/src/third_party/angle/src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp?l\u003d113\n\nThe SamplerMetadata struct will have to be updated to hold the border color too:\nhttps://cs.chromium.org/chromium/src/third_party/angle/src/libANGLE/renderer/d3d/d3d11/StateManager11.h?l\u003d116\n\nThis struct is generated for the shader here:\nhttps://cs.chromium.org/chromium/src/third_party/angle/src/compiler/translator/ResourcesHLSL.cpp?l\u003d501\n\nIt would also be possible to not support this extension on ES3+ contexts on D3D11 but if you\u0027re up for trying to get it working then it\u0027ll be much more useful to the users.\n\nWith the current patch (10) I hit some asserts in the GetWrapBits function, are you running with a debug build?",
      "parentUuid": "df89960a_fe005d52",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "618d2c3a_bda38665",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-11T18:28:51Z",
      "side": 1,
      "message": "Nice, this works!\n\nRegarding the assertion: Yes, I recently switched to release builds, unfortunately, to have faster test app execution times. I switched back to debug builds now and also got the assertion with patch 10. This is fixed in the latest patch.\n\nI just saw that in PackedGLEnums_autogen.cpp/h in FromGLenum\u003cWrapMode\u003e(GLenum from) and ToGLenum(WrapMode from) GL_CLAMP_TO_BORDER is missing, too. I wonder why that was no problem yet? Anyways, I added GL_CLAMP_TO_BORDER to packed_gl_enums.json, to be safe.",
      "parentUuid": "e8272fc0_9fce6567",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfbce971_e6a15675",
        "filename": "src/libANGLE/renderer/d3d/d3d11/RenderStateCache.cpp",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-12T15:32:53Z",
      "side": 1,
      "message": "Ah, yes, that was the correct thing to do.",
      "parentUuid": "618d2c3a_bda38665",
      "range": {
        "startLine": 254,
        "startChar": 4,
        "endLine": 254,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a06df352_3881acb6",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T17:18:21Z",
      "side": 1,
      "message": "What guarantees this?",
      "range": {
        "startLine": 968,
        "startChar": 7,
        "endLine": 968,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d54006d9_c20c2f3b",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-09T19:12:36Z",
      "side": 1,
      "message": "I guess D3D9 doesn\u0027t support Integer textures and thus no Int border colors.\nI am not sure, do we have to disable the extension then for this backend? I mean, for \"regular\" textures it works (using floating point border colors), and since D3D9 has no GLES3 frontend integer textures are out of the question anyway.\nThe extension text says:\n    If OpenGL ES 3.0 is not supported, delete all references to the\n    TexParameterI*, GetTexParameterI*, SamplerParameterI*, and\n    GetSamplerParameterI* entry points and all related text about\n    signed and unsigned integer textures.\nHowever, I think there is no way to suppress exposing the functions based on the frontend and/or backend, right?",
      "parentUuid": "a06df352_3881acb6",
      "range": {
        "startLine": 968,
        "startChar": 7,
        "endLine": 968,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4379c9cb_b38e3d52",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-09T19:41:08Z",
      "side": 1,
      "message": "Ah, I just read up on this too.  What we need to do is generate invalid operation errors in those entry points when the context is below version 3, then this assert will make sense for D3D9.",
      "parentUuid": "d54006d9_c20c2f3b",
      "range": {
        "startLine": 968,
        "startChar": 7,
        "endLine": 968,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f846204f_cc7ada9c",
        "filename": "src/libANGLE/renderer/d3d/d3d9/Renderer9.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1299044
      },
      "writtenOn": "2018-10-10T10:43:14Z",
      "side": 1,
      "message": "done",
      "parentUuid": "4379c9cb_b38e3d52",
      "range": {
        "startLine": 968,
        "startChar": 7,
        "endLine": 968,
        "endChar": 77
      },
      "revId": "3f95ec0d45ffe7f652168c041d56c5df281baca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}