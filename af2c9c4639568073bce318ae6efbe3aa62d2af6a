{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "da536cc6_9c75aec5",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4440,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-23T17:53:14Z",
      "side": 1,
      "message": "I\u0027m not that familiar with the emulation code for line loops, but something smells very problematic here.\n\nIf there is any emulation done for line loops, I don\u0027t expect it to _mutate_ vertex arrays. Like, cache a conversion buffer on the side, sure, even if that\u0027s stored in the vertex array, but if that emulation code is actually changing `mCurrentElementArrayBuffer`, that\u0027s problematic.\n\nFor example, what if what follows the first line loop draw is a non-line-loop draw? Wouldn\u0027t `mCurrentElementArrayBuffer` be wrong there too? Fixing `mCurrentElementArrayBuffer` in the second line-loop draw wouldn\u0027t fix that.\n\nCould you please add a test like that? (indirect indexed line loop followed by indexed non-line-loop draw without touching the vertex array in between). If what I suspect is correct, the real fix would be to not have the emulation code touch `mCurrentElementArrayBuffer` in the first place.",
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "612eef88_8a22c34a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4440,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-09-23T23:41:55Z",
      "side": 1,
      "message": "Added the test `IndirectAndElementDrawsShareIndexBuffer`.",
      "parentUuid": "da536cc6_9c75aec5",
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "542f2d62_84b94e55",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 433,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-23T20:00:58Z",
      "side": 1,
      "message": "Maybe the fix is as simple as declare a local variable here and pass it to streamInidcesIndirect instead of mCurrentElementArrayBuffer",
      "range": {
        "startLine": 433,
        "startChar": 9,
        "endLine": 433,
        "endChar": 35
      },
      "fixSuggestions": [
        {
          "fixId": "7bab8328_34cdcd90",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 430,
                "startChar": 0,
                "endLine": 431,
                "endChar": 0
              },
              "replacement": "    {\n    vk::BufferHelper *dstIndexBuf \u003d nullptr;\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 432,
                "startChar": 0,
                "endLine": 434,
                "endChar": 0
              },
              "replacement": "        contextVk, glIndexType, \u0026dstIndexBuf, srcIndirectBuf, indirectBufferOffset,\n        \u0026dstIndexBuf, indirectBufferOut));\n    mCurrentElementArrayBuffer \u003d dstIndexBuf;\n"
            }
          ]
        }
      ],
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b30df4d_81564348",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 433,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-09-23T23:41:55Z",
      "side": 1,
      "message": "I tried defining a local buffer pointer, `dstIndexBuffer`, in `multiDrawElementsIndirectHelper()` and passed it here to replace the output `mCurrentElementArrayBuffer` here. The test no longer crashes, but it fails, even with one line-loop draw.",
      "parentUuid": "542f2d62_84b94e55",
      "range": {
        "startLine": 433,
        "startChar": 9,
        "endLine": 433,
        "endChar": 35
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d14fba0e_f73e36ae",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-23T17:18:05Z",
      "side": 1,
      "message": "What if element buffer gets converted by other code, for example, by VertexArrayVk::convertIndexBufferIndirectGPU? You will be latching a wrong buffer here.",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "fixSuggestions": [
        {
          "fixId": "2ae8282b_bddfdf79",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 362,
                "startChar": 0,
                "endLine": 363,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 374,
                "startChar": 0,
                "endLine": 375,
                "endChar": 0
              },
              "replacement": "    ANGLE_TRY(contextVk-\u003egetUtils().convertIndexBuffer(contextVk, dst, src, params,\n                                                       mCurrentElementArrayBuffer));\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 417,
                "startChar": 0,
                "endLine": 418,
                "endChar": 0
              },
              "replacement": "        contextVk, srcIndirectBuf, srcIndexBuf, dstIndirectBuf, dstIndexBuf, params,\n        mCurrentElementArrayBuffer));\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
              "range": {
                "startLine": 726,
                "startChar": 0,
                "endLine": 728,
                "endChar": 0
              },
              "replacement": "    BufferVk *bufferVk \u003d vk::GetImpl(mState.getElementArrayBuffer());\n    mCurrentElementArrayBuffer \u003d\n        mOriginalElementArrayBuffer ? mOriginalElementArrayBuffer : \u0026bufferVk-\u003egetBuffer();\n"
            }
          ]
        }
      ],
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34a50c9d_ef34c734",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-09-23T17:56:41Z",
      "side": 1,
      "message": "In `syncState()`, `mOriginalElementArrayBuffer` is assigned after `mCurrentElementArrayBuffer` is updated. Do we call for sync during or after the buffer conversion?\n\n`convertIndexBufferIndirectGPU()` can be called in `multiDrawElementsIndirectHelper()` after the current element buffer is reset to the original. If the same buffer is used for draw, wouldn\u0027t it go through the same conversion path?",
      "parentUuid": "d14fba0e_f73e36ae",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13ff500f_f43d9784",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-23T19:27:25Z",
      "side": 1,
      "message": "\u003e Do we call for sync during or after the buffer conversion\nI think the answer is no.",
      "parentUuid": "34a50c9d_ef34c734",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34aa65c1_839a586c",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-23T19:30:30Z",
      "side": 1,
      "message": "If the bug is limited to ContextVk::multiDrawElementsIndirectHelper, then the easy fix is make setupLineLoopIndexedIndirectDraw to return a new buffer pointer that holds the final data and then send that buffer to mRenderPassCommandBuffer-\u003edrawIndexedIndirect call. You dont modify mCurrentElementArrayBuffer and also dont cache the pointer anywhere.",
      "parentUuid": "13ff500f_f43d9784",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a56a70f_86257575",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-09-23T23:41:55Z",
      "side": 1,
      "message": "It seems that `mRenderPassCommandBuffer-\u003edrawIndexedIndirect()` only takes the indirect buffer, which is separate from the current element buffer. I will look further to see if we can leave `mCurrentElementArrayBuffer` unchanged by conversion, etc. and use a new local buffer pointer for the draw.",
      "parentUuid": "34aa65c1_839a586c",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d25043_ba0345dd",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-09-25T01:01:23Z",
      "side": 1,
      "message": "It seems that `mCurrentElementArrayBuffer` is being used for `vkCmdBindIndexBuffer()` when the index buffer dirty bit is being handled. I have updated the change so we would determine the index buffer using local pointers and then set `mCurrentElementArrayBuffer` to the final pointer before the binding point (via `setElementArrayBufferForDraw()`) and then draw.",
      "parentUuid": "8a56a70f_86257575",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec9560d7_fd70177e",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-26T17:04:45Z",
      "side": 1,
      "message": "Thanks for digging out. Make sense.",
      "parentUuid": "36d25043_ba0345dd",
      "range": {
        "startLine": 803,
        "startChar": 0,
        "endLine": 803,
        "endChar": 73
      },
      "revId": "af2c9c4639568073bce318ae6efbe3aa62d2af6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}