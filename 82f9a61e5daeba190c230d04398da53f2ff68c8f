{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e7e68112_8efaa0b9",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 320,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-14T16:01:29Z",
      "side": 1,
      "message": "Please add ASSERT_GL_NO_ERROR(); after this line to make sure there were no errors before you validate the pixel value. I suspect metal and d3d were failing this line because they don\u0027t support the necessary extension, which would make anglebug.com/5863 invalid.",
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "021ebec6_b4485f2c",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 325,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-14T15:54:49Z",
      "side": 1,
      "message": "I don\u0027t quite follow this sentence, what does it mean for the byte to be reused?\n\nAlso, we are in GL land here. If Vulkan behaves differently from GL, and the GL behavior is in spec, then the Vulkan backend should fix the output to match GL\u0027s. If it\u0027s undefined in GL then the test should be relaxed based on what part is undefined in GL rather than what Vulkan does specifically.",
      "range": {
        "startLine": 325,
        "startChar": 7,
        "endLine": 325,
        "endChar": 70
      },
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "843a489a_20bb5809",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 325,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-04-14T16:25:40Z",
      "side": 1,
      "message": "I see. I can take the value from GL as reference for the comparison. I am not aware of any GL spec language related to this, I would be happy if you can point me to something if it\u0027s defined.",
      "parentUuid": "021ebec6_b4485f2c",
      "range": {
        "startLine": 325,
        "startChar": 7,
        "endLine": 325,
        "endChar": 70
      },
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd44af10_4ff7dcd1",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 330,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-14T15:54:49Z",
      "side": 1,
      "message": "From this sentence it looks like this is entirely a precision issue, rather than anything related to \"unused byte\". Isn\u0027t the depth readback supposed to take the 24-bit unorm value from the depth buffer and scale it to 32-bit unorm? How does the unused byte come into play?",
      "range": {
        "startLine": 329,
        "startChar": 28,
        "endLine": 330,
        "endChar": 61
      },
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c9a162a_f3f3e93a",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 330,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-04-14T16:25:40Z",
      "side": 1,
      "message": "Thanks for clearing this up. I was not aware that the value was scaled to a 32-bit unorm. I will change to comment and justify the error tolerance with the precision reason.",
      "parentUuid": "fd44af10_4ff7dcd1",
      "range": {
        "startLine": 329,
        "startChar": 28,
        "endLine": 330,
        "endChar": 61
      },
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1eed401d_79ef641c",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 355,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-14T15:54:49Z",
      "side": 1,
      "message": "This is probably why the test fails on ARM and QC. The conditions here should be `||`ed.",
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc754abc_5d1d660a",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 355,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-04-14T16:25:40Z",
      "side": 1,
      "message": "Thanks for finding this! Yes this skip condition was entirely wrong. The condition did also not trigger on GLES3 this way. Unfortunately this does not fix the test on QC, as both extensions seem to be enabled here. This might resolve the issue I was facing on D3D11 and Metal though.",
      "parentUuid": "1eed401d_79ef641c",
      "revId": "82f9a61e5daeba190c230d04398da53f2ff68c8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}