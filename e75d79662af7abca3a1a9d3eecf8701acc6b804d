{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5037902f_8a13f597",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-27T16:37:45Z",
      "side": 1,
      "message": "LGTM. Not sure what the deal with idle_heroes is, the driver is crashing when creating the graphics pipeline (pretty unrelated to this change)",
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44a8c73a_b96cce14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-05-27T18:25:52Z",
      "side": 1,
      "message": "Yeah looks like a flake",
      "parentUuid": "5037902f_8a13f597",
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4241831_21b206e8",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-05-28T16:43:06Z",
      "side": 1,
      "message": "If this has to return true when one of the program\u0027s mDefaultUniformBlocksDirty has changed since last time this program checked, then this wont work. Each program\u0027s mDefaultUniformBlocksDirty may gets set and then cleared as the program itself being used. Then if you switch to this PPO which also uses the program, it will not detect that the program\u0027s mDefaultUniformBlocksDirty has changed.",
      "range": {
        "startLine": 298,
        "startChar": 9,
        "endLine": 298,
        "endChar": 44
      },
      "fixSuggestions": [
        {
          "fixId": "778aa473_874bf673",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
              "range": {
                "startLine": 298,
                "startChar": 0,
                "endLine": 299,
                "endChar": 0
              },
              "replacement": "    bool updateAndCheckDirtyGraphicsUniforms(gl::ShaderType shaderType)\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
              "range": {
                "startLine": 300,
                "startChar": 0,
                "endLine": 320,
                "endChar": 0
              },
              "replacement": "        return mDefaultUniformBlocksDirty.test(shaderType);\n"
            },
            {
              "path": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
              "range": {
                "startLine": 324,
                "startChar": 0,
                "endLine": 342,
                "endChar": 0
              },
              "replacement": "        return mDefaultUniformBlocksDirty.test(gl::ShaderType::Compute);\n"
            }
          ]
        }
      ],
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30cfcd11_0a6d9102",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-05-28T16:55:31Z",
      "side": 1,
      "message": "One suggestion here is you add a default uniform content serial number and keep a snapshot of that content serial number in PPO. Every time the program\u0027s uniform data updated, you bump the content serial number. Then this updateAndCheckDirtyGraphicsUniforms can be implemented like this:\nif(PPO)\n{\n    compare the content serial number if they mismatch, return true; \n}\nelse\n   return mDefaultUniformBlocksDirty.any();",
      "parentUuid": "c4241831_21b206e8",
      "range": {
        "startLine": 298,
        "startChar": 9,
        "endLine": 298,
        "endChar": 44
      },
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b843b2_f135895c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-28T17:17:16Z",
      "side": 1,
      "message": "Ouch that\u0027s a good point. Separable programs can\u0027t be used to draw with, but you could have the same program bound to multiple PPOs and get the same effect.\n\nRoman, please add a test for this. It would go in ProgramPipelineTest.cpp and look something like this:\n\n- Create VS, FS1 and FS2 programs\n- Bind VS+FS1 into PPO1\n- Draw with it so everything is up-to-date\n- Bind VS+FS2 into PPO2\n- Draw with it so everything is up-to-date\n\n- Call glUniform on the VS program\n- Draw with PPO1 -\u003e should see updated uniform values\n- Draw with PPO2 -\u003e should see updated uniform values\n\nThe VS uniform could be something like the color passed to the FS in an `out` variable. FS1 could output just that, and FS2 could swap some channels. The test could use scissors to draw to four parts of the framebuffer, so you can do all of the above and leave the pixel-check expectations to last.\n\nCharlie\u0027s suggestion about using serials is good.",
      "parentUuid": "30cfcd11_0a6d9102",
      "range": {
        "startLine": 298,
        "startChar": 9,
        "endLine": 298,
        "endChar": 44
      },
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2ae9e69_1662c2ba",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-05-28T20:06:32Z",
      "side": 1,
      "message": "Thanks. As discussed offline with Shabi, this test is already doing something similar (two PPOs but a single VS and a single FS, with 4 draws):\nhttps://crsrc.org/c/third_party/angle/src/tests/gl_tests/ProgramPipelineTest.cpp;drc\u003db3ab67d32b3adb6f62472b6046e91e6f7958926b;l\u003d1338\n\nThe reason this still works is because `onProgramBind()` calls `setAllDefaultUniformsDirty()`, so the dirty bits are set on the PPO. There is a comment that suggests that this might be a reasonable compromise.\n\nI clarified with comments, lmk if you can still think of a way where this would break.",
      "parentUuid": "a0b843b2_f135895c",
      "range": {
        "startLine": 298,
        "startChar": 9,
        "endLine": 298,
        "endChar": 44
      },
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76503ddd_dc5a4fcd",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-05-28T15:13:53Z",
      "side": 1,
      "message": "Oops, this doesn\u0027t actually work as `setAllDefaultUniformsDirty()` gets called on the PPO",
      "range": {
        "startLine": 302,
        "startChar": 0,
        "endLine": 303,
        "endChar": 24
      },
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36032199_2e136ac9",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-05-28T20:06:32Z",
      "side": 1,
      "message": "Updated the comment.",
      "parentUuid": "76503ddd_dc5a4fcd",
      "range": {
        "startLine": 302,
        "startChar": 0,
        "endLine": 303,
        "endChar": 24
      },
      "revId": "e75d79662af7abca3a1a9d3eecf8701acc6b804d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}