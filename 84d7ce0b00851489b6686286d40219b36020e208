{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f9cc4c_ed139ed7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T17:30:34Z",
      "side": 1,
      "message": "Before I dive deep in reviewing this, I have a high level question. What benefit does the coherent version of the extension give to the application? I\u0027m genuinely curious.\n\nIf the developer has to have a fallback for when only the noncoherent version is supported, why not use that all the time?",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6381a0a1_f1855262",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-25T20:14:31Z",
      "side": 1,
      "message": "\u003e What benefit does the coherent version of the extension give to the application?\n\nThe main disadvantage of the noncoherent version is that a single draw call cannot have overlapping triangles. So it\u0027s good for things like simple compositing operations, but not for more complex geometry. The application can also quickly become throttled on draw calls if it\u0027s always having to break things up and insert barriers.\n\nThe \"G-buffer\" lighting example in https://registry.khronos.org/OpenGL/extensions/EXT/EXT_shader_pixel_local_storage.txt probably needs the coherent version, for example, since you can\u0027t realistically expect none of your triangles to touch the same pixel in a 3d scene.\n\n\u003e If the developer has to have a fallback for when only the noncoherent version is supported, why not use that all the time?\n\n1) I think we can get coherency on virtually all tilers, and tilers are the most likely to be resource limited and suffer in performance from a fallback approach. So applications that really care about performance on mobile will be happy to use the coherent version, and write a fallback code path for completeness.\n\n2) It would be good to get some data, but my hope is that we can get coherency on 95%+ of non-tilers on the internet. INTEL_fragment_shader_ordering (also implemented by AMD) is from 2013, NV_fragment_shader_interlock is from 2015, and D3D 11.3 shipped with rasterizer order views in 2015. I think virtually all GPUs made in the past 5-7 years can get coherency. So applications that really care about performance on modern GPUs will be happy to use the coherent version with a fallback for old devices that are slow anyway.",
      "parentUuid": "e8f9cc4c_ed139ed7",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a84c891_a7796345",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T20:36:44Z",
      "side": 1,
      "message": "Thanks, I\u0027ll go over the change within a day or two.",
      "parentUuid": "6381a0a1_f1855262",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ac55535_e1cb41d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-25T22:45:05Z",
      "side": 1,
      "message": "Thank you for all the huge reviews! I know I\u0027m blasting out a lot",
      "parentUuid": "8a84c891_a7796345",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73058d82_8b52d49b",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 29,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T17:30:34Z",
      "side": 1,
      "message": "nit: increment this!",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "520a5436_11a7e420",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 29,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73058d82_8b52d49b",
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb62ea1a_67cb4336",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 367,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T17:30:34Z",
      "side": 1,
      "message": "Instead, use only one flag, like `SH_GENERATE_COHERENT_PIXEL_LOCAL_STORAGE` or something along those lines. Then, use an enum in `ShBuiltInResources` that selects which method to use. As you add coherency to other backends, that enum can grow as you wish.",
      "range": {
        "startLine": 359,
        "startChar": 0,
        "endLine": 367,
        "endChar": 80
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf0e074_0b8f1c88",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 367,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-25T22:45:05Z",
      "side": 1,
      "message": "Ok, so making sure I follow correctly:\n\n- Add the enum to both Caps and ShBuiltinResources\n- renderergl_utils.cpp et. al. set the enum value in Caps\n- Compiler::Compiler copies the enum value from Caps to ShBuiltInResources",
      "parentUuid": "cb62ea1a_67cb4336",
      "range": {
        "startLine": 359,
        "startChar": 0,
        "endLine": 367,
        "endChar": 80
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21d3452b_24249f08",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 367,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-26T01:51:41Z",
      "side": 1,
      "message": "I was going to say that in `ShaderGL::compile` you choose the enum based on the ANGLE features, but I see what you mean now. Yes, direct-to-metal has already set the precedence here, so you can continue that way (exactly as you described). I\u0027ll find a way to clean things up soon though, neither ShBuiltinResources nor Caps are really the place to add these stuff.\n\nBy the way, you actually wouldn\u0027t need a flag here at all, because one entry in the enum should be `NonCoherent`.",
      "parentUuid": "6cf0e074_0b8f1c88",
      "range": {
        "startLine": 359,
        "startChar": 0,
        "endLine": 367,
        "endChar": 80
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d21b54fc_5d3e7995",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 367,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-27T22:28:24Z",
      "side": 1,
      "message": "Sounds good. Any preference on where to define the enum? I\u0027m not finding a shared header included by Caps.h and ShaderLang.h both.",
      "parentUuid": "21d3452b_24249f08",
      "range": {
        "startLine": 359,
        "startChar": 0,
        "endLine": 367,
        "endChar": 80
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbf58ab3_74814a72",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 367,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d21b54fc_5d3e7995",
      "range": {
        "startLine": 359,
        "startChar": 0,
        "endLine": 367,
        "endChar": 80
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "450368e0_a4067939",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 451,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T17:30:34Z",
      "side": 1,
      "message": "`ShBuiltInResources` is really not the right place for this stuff, but we\u0027ve already messed that up with the metal stuff. So in the very least, please add whatever you need to the _end_ of this struct.\n\nAlso, like I said use an enum instead that chooses the method.",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 451,
        "endChar": 38
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057155ba_9d44aa5f",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 451,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-27T22:28:24Z",
      "side": 1,
      "message": "These are referenced by auto generated code since the built-in functions are defined as depending on these extensions.\n\nIf we instead make up a GLSL version for these functions, then we don\u0027t have to define them as dependent on these extensions anymore and can delete these. Would you prefer to do it that way?",
      "parentUuid": "450368e0_a4067939",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 451,
        "endChar": 38
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2fcc83f_43ddee8b",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 30
      },
      "lineNbr": 451,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "What do you think about just leaving them out (so we can\u0027t expose these extensions to a desktop GLSL frontend), and only making them available as they are in this CL, as the fake essl version version?",
      "parentUuid": "057155ba_9d44aa5f",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 451,
        "endChar": 38
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ace071_ecc1f267",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 26,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T17:30:34Z",
      "side": 1,
      "message": "You should need this; if the backend is passing in which coherency method to use (including none), you shouldn\u0027t need to compile anything out with the preprocessor.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c47c511_19caddc2",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 26,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87ace071_ecc1f267",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8af13d7_fcf2ceba",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 67,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T20:36:44Z",
      "side": 1,
      "message": "nit: at the risk of being super annoying here: I\u0027d call this PLSHelper. NodeBuilder is a bit too generic (hurts `grep` if every transformation started using something like this).\n\nThat said, I\u0027d avoid adding most of these wrappers, especially the oneliners. It\u0027s easier for searching if the original helper (like `TIntermAggregate::CreateConstructor` for example) is used directly.",
      "range": {
        "startLine": 67,
        "startChar": 6,
        "endLine": 67,
        "endChar": 17
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03777fd4_1668b873",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 67,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "Done. Took it out and added \"CreateBuiltInFunctionCallNode\" overloads that allow the code to define the argument list inline. Do those look ok? I can take them out if it\u0027s too much 😊",
      "parentUuid": "f8af13d7_fcf2ceba",
      "range": {
        "startLine": 67,
        "startChar": 6,
        "endLine": 67,
        "endChar": 17
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83efb225_a131f77c",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-25T20:36:44Z",
      "side": 1,
      "message": "If you\u0027re calling a built-in, you should need this. What was the real problem?",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 25
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e1051db_7d811c42",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 153,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-25T22:45:05Z",
      "side": 1,
      "message": "Ok, circling back to here:\n\nThe problem is that `mSymbolTable` has a spec of `SH_GLES3_1_SPEC`, but `beginInvocationInterlockNV()` is a desktop GLSL function, requiring a spec of `SH_GL_CORE_SPEC` and `#version 430`.\n\nIs it possible to look up a desktop function on an ES symbol table? If I need a different symbol table, is there a way to find it from here?",
      "parentUuid": "83efb225_a131f77c",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 25
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f941b71b_9e8d0dc4",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-26T01:51:41Z",
      "side": 1,
      "message": "Hmm... we\u0027d need to find a way to make that work. First of all, no you can\u0027t use desktop GLSL built-ins because we don\u0027t necessarily build ANGLE with desktop GLSL support. The problem is that SymbolTable is really there to support the input rather than output, and we had mostly managed to get by without needing anything special for output.\n\nMostly. There is actually precedence here that you can follow. See how `subpassLoad` is defined in `builtin_function_declarations.txt`. I ended up adding a new made-up GLSL version (`ESSL_VULKAN_BUILTINS`) to this file, which is defined as `kESSLVulkanOnly` in the code. This is a large value that makes sure input shaders can never find these symbols. Then in the code I can request to find this symbol given the `kESSLVulkanOnly` version.\n\nSo, you could similarly introduce a new `ESSL_DESKTOP_GLSL_BUILTINS` such that those builtins are exposed to ESSL, then similarly to `DriverUniform::getFlipXY`, choose either `kESSLDesktopGLSLOnly` or `430`.",
      "parentUuid": "9e1051db_7d811c42",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 25
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e501be18_aa305522",
        "filename": "src/compiler/translator/tree_ops/RewritePixelLocalStorage.cpp",
        "patchSetId": 30
      },
      "lineNbr": 153,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-28T00:58:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f941b71b_9e8d0dc4",
      "range": {
        "startLine": 153,
        "startChar": 12,
        "endLine": 153,
        "endChar": 25
      },
      "revId": "84d7ce0b00851489b6686286d40219b36020e208",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}