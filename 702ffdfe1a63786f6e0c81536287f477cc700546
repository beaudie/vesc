{
  "comments": [
    {
      "key": {
        "uuid": "ee6d981a_293dea81",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2143,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-08T12:40:42Z",
      "side": 1,
      "message": "I\u0027m not quite sure how memoryBarrier* functions except for memoryBarrierShared() should be translated. In GLSL these only affect the ordering of transactions done by a single shader invocation, whereas in HLSL it seems like single-invocation barriers do not exist - I\u0027m only aware of HLSL barriers that affect the whole group. Maybe we can ask our MS contacts what are the memory transaction ordering guarantees for HLSL shaders when it comes to transactions by a single shader invocation to confirm whether these barriers are needed at all?",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d93206ea_3e52705a",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2143,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2018-03-08T20:12:37Z",
      "side": 1,
      "message": "+1 EOpBarrier and EOpMemoryBarrierShared LGTM but the others might not be needed like Olli said. The HLSL documentation is really unclear, but the SM5 Assembly one is better: https://msdn.microsoft.com/en-us/library/windows/desktop/hh447241(v\u003dvs.85).aspx\n\nIt looks like we want to do the following:\n - EOpBarrier becomes sync_g_t (sync_t is not allowed)\n - EOpMemoryBarrier becomes sync_g\n - EOpMemoryBarrier[|AtomicCount|Buffer|Image] might be noops? We need to check that\n - EOpGroupMemoryBarrier becomes sync_ugroup_g",
      "parentUuid": "ee6d981a_293dea81",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "963038f8_99499b56",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2143,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2018-03-14T09:57:29Z",
      "side": 1,
      "message": "Olli \u0026 Corentin, thank you for review, I had carefully checked the ES_GLSL_3.1 spec, msdn and the link https://msdn.microsoft.com/en-us/library/windows/desktop/hh447241(v\u003dvs.85).aspx .\nAlthough memoryBarrier* functions are used to control the ordering of memory transactions issued by a single shader invocation, the target is that memory reads/writes by this invocation in program order are made visible to other invocations before any subsequent memory accesses by this invocation. It is similiar with sm5-asm \"_uglobal\" option, so I think memoryBarrier* functions are also needed to translated.\n\nAnd compiled HLSL sync functions to asm code, the relationship is as below,\nGroupMemoryBarrier()  -- sync_g\nGroupMemoryBarrierWithGroupSync() -- sync_g_t\nDeviceMemoryBarrier() -- sync_uglobal\nDeviceMemoryBarrierWithGroupSync() -- sync_uglobal_t\nAllMemoryBarrier() -- sync_uglobal_g\nAllMemoryBarrierWithGroupSync() -- sync_uglobal_g_t\n\nso I translated the functions as below,\nEOpBarrier -\u003e sync_g_t    --\u003e GroupMemoryBarrierWithGroupSync() // (sync_t is not allowed)\nEOpMemoryBarrierShared -\u003e sync_g -\u003e GroupMemoryBarrier()  \nEOpMemoryBarrier -\u003e sync_uglobal_g -\u003e AllMemoryBarrier() \nEOpMemoryBarrier*[AtomicCount|Buffer|Image] -\u003e sync_uglobal -\u003e DeviceMemoryBarrier()\nEOpGroupMemoryBarrier -\u003e sync_ugroup_g/sync_uglobal_g -\u003e AllMemoryBarrier()   // _ugroup may be not exposed for some implementations, so use _uglobal, some implementations do not distinguish _ugroup from _uglobal, so both operations are equivalent and behave like _uglobal.",
      "parentUuid": "d93206ea_3e52705a",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7fe8d99_2d9d31e4",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1067,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-08T12:40:42Z",
      "side": 1,
      "message": "The comment and the test name should be more specific about what is being tested. This test executes only a single group of shaders and only uses specific types of barrier functions, so it\u0027s not a comprehensive test of all the different barriers.",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73025aef_f26adafb",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1067,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2018-03-19T09:48:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7fe8d99_2d9d31e4",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2e5ecc0_6750582a",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1076,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-08T12:40:42Z",
      "side": 1,
      "message": "A comment explaining the algorithm executed by the shader would be helpful. Something like: \"Each invocation first stores a single value in an image. Then each invocation sums up all the values in the image and stores the sum in the image. Barriers are used to ensure that the reads and writes from different invocations are done in order\".",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8187b3f0_a713c327",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1076,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2018-03-19T09:48:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2e5ecc0_6750582a",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d94b2f3_c32be027",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1085,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-08T12:40:42Z",
      "side": 1,
      "message": "Shouldn\u0027t this be groupMemoryBarrier() since we\u0027re also going to look up values from other invocations in the same group?",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9458e94a_0fc019ea",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1085,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2018-03-19T09:48:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d94b2f3_c32be027",
      "revId": "702ffdfe1a63786f6e0c81536287f477cc700546",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}