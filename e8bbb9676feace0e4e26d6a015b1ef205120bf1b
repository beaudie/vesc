{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "638f5b78_832f341d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 28
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:52:16Z",
      "side": 1,
      "message": "Can you add a perf warning in TextureVk::setImageImpl() if context version \u003e\u003d 3.0 that says \"stop using glTexImage* already\"?",
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dbc1e33_317adab4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 28
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "For non-mipmap, glTexImage call is still good though. With glTexStorage you need two calls. glTexImage is only one call. But anyway, feel free to create a separate CL for this if you feel strongly.",
      "parentUuid": "638f5b78_832f341d",
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44eefcba_4e1e0080",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1530,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "I remember I hit annoyance with this as well in the past, but IIRC the idea was that the function should only use parameters that are passed to it. Not sure if there\u0027s any real reason for calling this before updating the state. Like, is it trying to preserve the state in case this returns error?\n\n+Jamie",
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909baf50_939d6d06",
        "filename": "src/libANGLE/renderer/vulkan/MemoryObjectVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 211,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "true? Also for Renderbuffer and Surface.\n\nSee my comment in the next CL though, doesn\u0027t matter if we can remove this in that change.",
      "range": {
        "startLine": 211,
        "startChar": 62,
        "endLine": 211,
        "endChar": 67
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d3bbed_410a9b48",
        "filename": "src/libANGLE/renderer/vulkan/MemoryObjectVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 211,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Lets deal with this in the follow up CL",
      "parentUuid": "909baf50_939d6d06",
      "range": {
        "startLine": 211,
        "startChar": 62,
        "endLine": 211,
        "endChar": 67
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1221f96d_2104f97a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1295,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:52:16Z",
      "side": 1,
      "message": "Isn\u0027t this always true in setStorage*? Could be turned into ASSERT I think.",
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0e1578c_9589efdb",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1295,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1221f96d_2104f97a",
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "754a73c6_ce19dd02",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1755,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "This looks like a bugfix. Can you please add a test?",
      "range": {
        "startLine": 1755,
        "startChar": 52,
        "endLine": 1755,
        "endChar": 86
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d95c496_b61799ec",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1755,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "I actually have a bug here at line 1764.",
      "parentUuid": "754a73c6_ce19dd02",
      "range": {
        "startLine": 1755,
        "startChar": 52,
        "endLine": 1755,
        "endChar": 86
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff12c45b_03cd89a8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2426,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "Probably more common is if the texture itself is used in compute (mipgen on compute is only on AMD/Nvidia) or has changed sRGB mode. You could drop this part of the comment.",
      "range": {
        "startLine": 2426,
        "startChar": 21,
        "endLine": 2426,
        "endChar": 91
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e6e8d48_77c416f9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2426,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff12c45b_03cd89a8",
      "range": {
        "startLine": 2426,
        "startChar": 21,
        "endLine": 2426,
        "endChar": 91
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6b556bc_3397e67a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2429,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "How about instead you add `!mState.getImmutableFormat()` to the condition of the `if` that does this? It\u0027s not easily verifiable that doing this early prevents that if from doing anything.",
      "range": {
        "startLine": 2428,
        "startChar": 37,
        "endLine": 2429,
        "endChar": 28
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7534fa0_f93501d5",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2429,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Added an assertion bellow to ensure we never call stageSelfForBaseLevel for immutable.",
      "parentUuid": "a6b556bc_3397e67a",
      "range": {
        "startLine": 2428,
        "startChar": 37,
        "endLine": 2429,
        "endChar": 28
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00b289d9_9ccb11af",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2771,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "This doesn\u0027t look right.\n\nAlso, why not instead of adding `initImmutableImage()`, you just call `initImage` and have it send `mState.getImmutableFormat()` automatically to `mImage-\u003einitExternal()`?",
      "range": {
        "startLine": 2771,
        "startChar": 30,
        "endLine": 2771,
        "endChar": 35
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c15d8224_e0d26096",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2771,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Good catch. Fixed.\n\nThis was mainly try to reduce the complexity and duplication in initImage and the code that calls it.",
      "parentUuid": "00b289d9_9ccb11af",
      "range": {
        "startLine": 2771,
        "startChar": 30,
        "endLine": 2771,
        "endChar": 35
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2aecadcd_2d201134",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2873,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "Can be reverted. Only used with image respecify for mipgen which should be conditioned to !mState.getImmutableFormat() anyway (see another comment regarding that code)",
      "range": {
        "startLine": 2869,
        "startChar": 0,
        "endLine": 2873,
        "endChar": 77
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ad83366_dc556c98",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2873,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "There is no documentation on what getMipLevelCount(FullMipChain) supposedly should return. But when I read it, FullMipChain for immutable means all the mipmap levels specified by seStorage and EnabledLevels means [base,max]. I think this is doing what people would expect FullMipChain to return. Otherwise someday someone use it somewhere else and expect it to return \"FullMipChain\" will stumble again.",
      "parentUuid": "2aecadcd_2d201134",
      "range": {
        "startLine": 2869,
        "startChar": 0,
        "endLine": 2873,
        "endChar": 77
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea38b83_804c8d6e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2887,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "Can be reverted. Only used with getMipLevelCount().",
      "range": {
        "startLine": 2883,
        "startChar": 0,
        "endLine": 2887,
        "endChar": 72
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bf96854_daebd24a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 2887,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "dea38b83_804c8d6e",
      "range": {
        "startLine": 2883,
        "startChar": 0,
        "endLine": 2887,
        "endChar": 72
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6839aca2_3c0dbb3e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 28
      },
      "lineNbr": 2045,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-01T02:41:22Z",
      "side": 1,
      "message": "nit: underlying",
      "range": {
        "startLine": 2045,
        "startChar": 7,
        "endLine": 2045,
        "endChar": 16
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a462cbd5_cbf030b6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 28
      },
      "lineNbr": 2045,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-01T17:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6839aca2_3c0dbb3e",
      "range": {
        "startLine": 2045,
        "startChar": 7,
        "endLine": 2045,
        "endChar": 16
      },
      "revId": "e8bbb9676feace0e4e26d6a015b1ef205120bf1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}