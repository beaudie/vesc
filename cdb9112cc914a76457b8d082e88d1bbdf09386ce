{
  "comments": [
    {
      "key": {
        "uuid": "c8762fc5_36da5659",
        "filename": "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2171,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2013-12-12T18:22:16Z",
      "side": 1,
      "message": "http://msdn.microsoft.com/en-us/library/windows/desktop/ff819065(v\u003dvs.85).aspx says these have value 232 by default. I assume that\u0027s a typo in their documentation?\n\nglGetInteger64v could report the full value, but I assume that\u0027s not required given that these are just \u0027recommended\u0027 values for optimal performance?",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68db8306_7341da25",
        "filename": "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2171,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2013-12-12T18:57:50Z",
      "side": 1,
      "message": "Nicolas, we could report anything we like, if it\u0027s easier for us. This is a recommendation so there are no real tests for max elements indices/vertices. Shannon, I can\u0027t determine from anywhere in the spec what the expectation is for returning an integer value in GetIntegerv that is greater than max int. Maybe you could clarify with access to more Khronos resources?",
      "parentUuid": "c8762fc5_36da5659",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8c01b69_bafd91de",
        "filename": "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2171,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2013-12-13T22:40:38Z",
      "side": 1,
      "message": "That was my assumption. This code is fine then.",
      "parentUuid": "68db8306_7341da25",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28d42b2d_bc3589bd",
        "filename": "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2171,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2013-12-16T23:28:02Z",
      "side": 1,
      "message": "I think this is covered by \"If a value is so large in magnitude that it cannot be represented with the requested type, then the nearest value representable using the requested type is returned\" (3.0.2 spec, p222, sec 6.1.2 \"Data Conversions\"). If we want to return a value higher than max int when queried, we can via GetInteger64v as long as we cap it when returning via GetIntegerv. Do we actually have any idea how many vertices might make DX11 cranky? If we don\u0027t, this is fine-- you could update the comment so it\u0027s clear we\u0027re choosing max int for the convenience of not having to have separate handling for GetIntegerv and GetInteger64v, but it\u0027s probably not strictly necessary.",
      "parentUuid": "68db8306_7341da25",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08a847a1_83d26295",
        "filename": "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2171,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2013-12-17T20:25:45Z",
      "side": 1,
      "message": "Yes, that D3D11/10 constant above represents 2^32, while my patch above conservatively returns 2^31-1. As the GL enum query is a suggestion value rather than limit I feel this is okay, but I could see both viewpoints. I\u0027ll add a comment.",
      "parentUuid": "28d42b2d_bc3589bd",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28c50b24_b1297a9f",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2013-12-12T18:22:16Z",
      "side": 1,
      "message": "UNIMPLEMENTED() implies it should still be implemented. I think ERR() is more appropriate.",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8762fc5_d628c26e",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2013-12-12T18:57:50Z",
      "side": 1,
      "message": "How about UNREACHABLE -- it\u0027s what we use in other places in Renderer9.",
      "parentUuid": "28c50b24_b1297a9f",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08a847a1_5d155b53",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2013-12-13T22:40:38Z",
      "side": 1,
      "message": "UNREACHABLE is for code that should not be reachable, under the assumption of correct code. If it\u0027s hit, it\u0027s because we, the developers, did something wrong (like assume the range of a variable has been checked to be within a certain range, earlier, but still encountering unexpected values).\n\nIn this case the line can be hit with specific user input, which neither means it\u0027s something we still have to implement, nor that\u0027s it\u0027s code that should never be reached. We\u0027ve previously indicated user input errors (which aren\u0027t reported as GL errors according to the spec) with ERR, so that gets my preference.",
      "parentUuid": "c8762fc5_d628c26e",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68baa3ef_9868957f",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2013-12-16T15:02:38Z",
      "side": 1,
      "message": "Hm, how do you mean the line can be with with specific user input? Which input? Seems to me we should never execute this line unless we\u0027re calling ES3 methods on ES2 contexts, correct? It\u0027s also how we manage other ES3 stuff inside Renderer9, by throwing unreachable.",
      "parentUuid": "08a847a1_5d155b53",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68baa3ef_585b1de3",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2013-12-16T15:12:56Z",
      "side": 1,
      "message": "Ok, if this shouldn\u0027t be reachable because we check the enum earlier on, then UNREACHABLE is the right one to use.",
      "parentUuid": "68baa3ef_9868957f",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8cdb3a7_1717b69c",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2013-12-16T23:28:02Z",
      "side": 1,
      "message": "It looks like there might be a hole in our context version checking for the query functions-- if you call the appropriate function for the native type of the item being queried (i.e., call glGetIntegerv for something that\u0027s stored as an integer), Context::getQueryParameterInfo is never called, and I think that\u0027s the only place we\u0027re enforcing context versions for queries. So it might actually be possible to get to this UNREACHABLE. (But it should still be UNREACHABLE-- we just need to fix the validation.)",
      "parentUuid": "68baa3ef_585b1de3",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8f8efd4_a3c0baca",
        "filename": "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2527,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2013-12-17T20:25:45Z",
      "side": 1,
      "message": "Wow.. good catch. I\u0027ll make a note to fix this.",
      "parentUuid": "e8cdb3a7_1717b69c",
      "revId": "cdb9112cc914a76457b8d082e88d1bbdf09386ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}