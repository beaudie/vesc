{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5f4bbb75_15703de0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-17T16:11:27Z",
      "side": 1,
      "message": "This creates a situation that low level code call into higher level code which will end up call finishImpl, which does lots of things. The worry here is that if finishImpl end up getting into this function (which right now I don\u0027t think it will, but a risk), you may end up with a hang.\n\nI would personally feel more comfortable to deal with this in higher code, like BufferHelper/ImageHelper at least.",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2434cbe_33bdc1ac",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-18T16:05:45Z",
      "side": 1,
      "message": "It should go even higher; the `vk::` stuff are a layer beneath `rx::`, such as `rx::ContextVk`. Calling back into `ContextVk` to do work from the layer underneath is a layering violation. Unfortunately we haven\u0027t done a good job of making the two layers in the Vulkan backend distinguished.\n\nSo, if you really want to do this, it should be at the `rx::` level that OOM is detected, context is finished, and the operation retried.\n\nThat said, perhaps there\u0027s another way to achieve the memory savings coming from this change. That\u0027s assuming this is even a real problem for applications. Similar to how we flush the command buffer if there\u0027s too much data copy staged, why not proactively flush the context when a significant amount of garbage is accumulated? Then you won\u0027t get to OOM in the first place, and the application wouldn\u0027t have to hitch when that happens. That also works better for multi-context cases, where the context hitting OOM is not necessarily the one holding on to the garbage.",
      "parentUuid": "5f4bbb75_15703de0",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4a96325_bdd9d7a4",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-18T16:06:55Z",
      "side": 1,
      "message": "Basically what the next CL does, but at the context level!",
      "parentUuid": "a2434cbe_33bdc1ac",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebb2ffc6_56049be0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-19T00:19:53Z",
      "side": 1,
      "message": "Thanks! It makes sense. In the other CL, I have currently added the flush calls to `BufferVk` after the release calls.\n\nAfter the next CL, the `onOutOfMemory()` function will no longer get called for the added test, and merely flushing the pending garbages more often seems to be working well in this scenario.\n\nTherefore, I have decoupled the two CLs, and will prioritize the other CL first (https://crrev.com/c/4787950).",
      "parentUuid": "a4a96325_bdd9d7a4",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45688f5e_063e9289",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T21:08:29Z",
      "side": 1,
      "message": "As it was discussed in the other CL, we will still need this CL in case we run out of memory regardless of the flushing threshold.",
      "parentUuid": "ebb2ffc6_56049be0",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "542d7a14_90ad5f17",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-22T03:25:14Z",
      "side": 1,
      "message": "Ack. Then you\u0027d need to bubble this up such that stuff in `namespace vk` (BufferHelper and ImageHelper) don\u0027t generate work for `ContextVk`. Like I said, that\u0027s a layering violation.",
      "parentUuid": "45688f5e_063e9289",
      "range": {
        "startLine": 5964,
        "startChar": 12,
        "endLine": 5964,
        "endChar": 37
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b261da4_8fbeacca",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3471,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-17T16:11:27Z",
      "side": 1,
      "message": "// Calling BufferData and draw with it in a loop without glFlush() should \n// still work. Driver is supposedly to issue flush if needed.",
      "range": {
        "startLine": 3469,
        "startChar": 3,
        "endLine": 3471,
        "endChar": 33
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6803ed2_112575bb",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3471,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-19T00:19:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b261da4_8fbeacca",
      "range": {
        "startLine": 3469,
        "startChar": 3,
        "endLine": 3471,
        "endChar": 33
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed6f56ea_d73da73b",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3477,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-17T16:11:27Z",
      "side": 1,
      "message": "You should remove this comment, it does not apply to this test.",
      "range": {
        "startLine": 3476,
        "startChar": 4,
        "endLine": 3477,
        "endChar": 23
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97461823_5c172fa1",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3477,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-19T00:19:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed6f56ea_d73da73b",
      "range": {
        "startLine": 3476,
        "startChar": 4,
        "endLine": 3477,
        "endChar": 23
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9206dee3_dc96cbea",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3502,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-17T16:11:27Z",
      "side": 1,
      "message": "You can remove this as well (and line 3486 to 3496), no need to ping-pong FBOs for this purpose.",
      "range": {
        "startLine": 3500,
        "startChar": 8,
        "endLine": 3502,
        "endChar": 51
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec6a96b8_ac3d8ded",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3502,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-19T00:19:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9206dee3_dc96cbea",
      "range": {
        "startLine": 3500,
        "startChar": 8,
        "endLine": 3502,
        "endChar": 51
      },
      "revId": "973fe8b98ae8d91f369bb28b78271a1bf8ac45c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}