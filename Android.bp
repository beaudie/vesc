// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file is automatically generated by ./gen_angle_android_bp.py. Do not edit.

cc_defaults {
  name: "angle_defaults",
  cflags: [
    "-Oz",
    "-Wno-error=return-type",
    "-Wno-sign-compare",
    "-Wno-sign-promo",
    "-Wno-unused-parameter",
    "-fvisibility=hidden",
  ],
  local_include_dirs: [
    "include",
    "src",
  ],
  sdk_version: "21",
}

// GN target: //third_party/angle:angle_common
cc_library_static {
  name: "angle_third_party_angle_angle_common",
  srcs: [
    "src/common/Float16ToFloat32.cpp",
    "src/common/MemoryBuffer.cpp",
    "src/common/aligned_memory.cpp",
    "src/common/angleutils.cpp",
    "src/common/debug.cpp",
    "src/common/mathutil.cpp",
    "src/common/matrix_utils.cpp",
    "src/common/string_utils.cpp",
    "src/common/system_utils.cpp",
    "src/common/system_utils_linux.cpp",
    "src/common/third_party/base/anglebase/sha1.cc",
    "src/common/third_party/smhasher/src/PMurHash.cpp",
    "src/common/tls.cpp",
    "src/common/uniform_type_info_autogen.cpp",
    "src/common/utilities.cpp",
  ],
  shared_libs: [
    "liblog",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
  ],
}

// GN target: //third_party/angle:angle_gpu_info_util
cc_library_static {
  name: "angle_third_party_angle_angle_gpu_info_util",
  srcs: [
    "src/gpu_info_util/SystemInfo.cpp",
  ],
  shared_libs: [
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
  ],
}

// GN target: //third_party/angle:angle_image_util
cc_library_static {
  name: "angle_third_party_angle_angle_image_util",
  srcs: [
    "src/image_util/copyimage.cpp",
    "src/image_util/imageformats.cpp",
    "src/image_util/loadimage.cpp",
    "src/image_util/loadimage_etc.cpp",
  ],
  shared_libs: [
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
  ],
}

// GN target: //third_party/angle:commit_id
genrule {
  name: "angle_third_party_angle_commit_id",
  srcs: [
    "src/commit.h",
  ],
  tool_files: [
    "src/commit_id.py",
  ],
  cmd: "$(location src/commit_id.py) gen $(location) $(out)",
  out: [
    "commit_id.h",
  ],
  export_include_dirs: [
    ".",
  ],
}

// GN target: //third_party/angle:libANGLE
cc_library_static {
  name: "angle_third_party_angle_libANGLE",
  srcs: [
    "src/common/event_tracer.cpp",
    "src/libANGLE/AttributeMap.cpp",
    "src/libANGLE/Buffer.cpp",
    "src/libANGLE/Caps.cpp",
    "src/libANGLE/Compiler.cpp",
    "src/libANGLE/Config.cpp",
    "src/libANGLE/Context.cpp",
    "src/libANGLE/ContextState.cpp",
    "src/libANGLE/Debug.cpp",
    "src/libANGLE/Device.cpp",
    "src/libANGLE/Display.cpp",
    "src/libANGLE/Error.cpp",
    "src/libANGLE/Fence.cpp",
    "src/libANGLE/Framebuffer.cpp",
    "src/libANGLE/FramebufferAttachment.cpp",
    "src/libANGLE/GLES1State.cpp",
    "src/libANGLE/HandleAllocator.cpp",
    "src/libANGLE/HandleRangeAllocator.cpp",
    "src/libANGLE/Image.cpp",
    "src/libANGLE/ImageIndex.cpp",
    "src/libANGLE/IndexRangeCache.cpp",
    "src/libANGLE/LoggingAnnotator.cpp",
    "src/libANGLE/MemoryProgramCache.cpp",
    "src/libANGLE/Observer.cpp",
    "src/libANGLE/PackedGLEnums.cpp",
    "src/libANGLE/PackedGLEnums_autogen.cpp",
    "src/libANGLE/Path.cpp",
    "src/libANGLE/Platform.cpp",
    "src/libANGLE/Program.cpp",
    "src/libANGLE/ProgramLinkedResources.cpp",
    "src/libANGLE/ProgramPipeline.cpp",
    "src/libANGLE/Query.cpp",
    "src/libANGLE/Renderbuffer.cpp",
    "src/libANGLE/ResourceManager.cpp",
    "src/libANGLE/Sampler.cpp",
    "src/libANGLE/Shader.cpp",
    "src/libANGLE/State.cpp",
    "src/libANGLE/Stream.cpp",
    "src/libANGLE/Surface.cpp",
    "src/libANGLE/Texture.cpp",
    "src/libANGLE/Thread.cpp",
    "src/libANGLE/TransformFeedback.cpp",
    "src/libANGLE/Uniform.cpp",
    "src/libANGLE/VaryingPacking.cpp",
    "src/libANGLE/VertexArray.cpp",
    "src/libANGLE/VertexAttribute.cpp",
    "src/libANGLE/WorkerThread.cpp",
    "src/libANGLE/angletypes.cpp",
    "src/libANGLE/es3_copy_conversion_table_autogen.cpp",
    "src/libANGLE/format_map_autogen.cpp",
    "src/libANGLE/formatutils.cpp",
    "src/libANGLE/params.cpp",
    "src/libANGLE/queryconversions.cpp",
    "src/libANGLE/queryutils.cpp",
    "src/libANGLE/renderer/ContextImpl.cpp",
    "src/libANGLE/renderer/DeviceImpl.cpp",
    "src/libANGLE/renderer/DisplayImpl.cpp",
    "src/libANGLE/renderer/Format_table_autogen.cpp",
    "src/libANGLE/renderer/SurfaceImpl.cpp",
    "src/libANGLE/renderer/TextureImpl.cpp",
    "src/libANGLE/renderer/driver_utils.cpp",
    "src/libANGLE/renderer/gl/BlitGL.cpp",
    "src/libANGLE/renderer/gl/BufferGL.cpp",
    "src/libANGLE/renderer/gl/ClearMultiviewGL.cpp",
    "src/libANGLE/renderer/gl/CompilerGL.cpp",
    "src/libANGLE/renderer/gl/ContextGL.cpp",
    "src/libANGLE/renderer/gl/DispatchTableGL_autogen.cpp",
    "src/libANGLE/renderer/gl/DisplayGL.cpp",
    "src/libANGLE/renderer/gl/FenceNVGL.cpp",
    "src/libANGLE/renderer/gl/FramebufferGL.cpp",
    "src/libANGLE/renderer/gl/FunctionsGL.cpp",
    "src/libANGLE/renderer/gl/PathGL.cpp",
    "src/libANGLE/renderer/gl/ProgramGL.cpp",
    "src/libANGLE/renderer/gl/ProgramPipelineGL.cpp",
    "src/libANGLE/renderer/gl/QueryGL.cpp",
    "src/libANGLE/renderer/gl/RenderbufferGL.cpp",
    "src/libANGLE/renderer/gl/RendererGL.cpp",
    "src/libANGLE/renderer/gl/SamplerGL.cpp",
    "src/libANGLE/renderer/gl/ShaderGL.cpp",
    "src/libANGLE/renderer/gl/StateManagerGL.cpp",
    "src/libANGLE/renderer/gl/SurfaceGL.cpp",
    "src/libANGLE/renderer/gl/SyncGL.cpp",
    "src/libANGLE/renderer/gl/TextureGL.cpp",
    "src/libANGLE/renderer/gl/TransformFeedbackGL.cpp",
    "src/libANGLE/renderer/gl/VertexArrayGL.cpp",
    "src/libANGLE/renderer/gl/egl/DisplayEGL.cpp",
    "src/libANGLE/renderer/gl/egl/FunctionsEGL.cpp",
    "src/libANGLE/renderer/gl/egl/FunctionsEGLDL.cpp",
    "src/libANGLE/renderer/gl/egl/PbufferSurfaceEGL.cpp",
    "src/libANGLE/renderer/gl/egl/SurfaceEGL.cpp",
    "src/libANGLE/renderer/gl/egl/WindowSurfaceEGL.cpp",
    "src/libANGLE/renderer/gl/egl/android/DisplayAndroid.cpp",
    "src/libANGLE/renderer/gl/egl/egl_utils.cpp",
    "src/libANGLE/renderer/gl/formatutilsgl.cpp",
    "src/libANGLE/renderer/gl/null_functions.cpp",
    "src/libANGLE/renderer/gl/renderergl_utils.cpp",
    "src/libANGLE/renderer/load_functions_table_autogen.cpp",
    "src/libANGLE/renderer/null/BufferNULL.cpp",
    "src/libANGLE/renderer/null/CompilerNULL.cpp",
    "src/libANGLE/renderer/null/ContextNULL.cpp",
    "src/libANGLE/renderer/null/DeviceNULL.cpp",
    "src/libANGLE/renderer/null/DisplayNULL.cpp",
    "src/libANGLE/renderer/null/FenceNVNULL.cpp",
    "src/libANGLE/renderer/null/FramebufferNULL.cpp",
    "src/libANGLE/renderer/null/ImageNULL.cpp",
    "src/libANGLE/renderer/null/PathNULL.cpp",
    "src/libANGLE/renderer/null/ProgramNULL.cpp",
    "src/libANGLE/renderer/null/ProgramPipelineNULL.cpp",
    "src/libANGLE/renderer/null/QueryNULL.cpp",
    "src/libANGLE/renderer/null/RenderbufferNULL.cpp",
    "src/libANGLE/renderer/null/SamplerNULL.cpp",
    "src/libANGLE/renderer/null/ShaderNULL.cpp",
    "src/libANGLE/renderer/null/SurfaceNULL.cpp",
    "src/libANGLE/renderer/null/SyncNULL.cpp",
    "src/libANGLE/renderer/null/TextureNULL.cpp",
    "src/libANGLE/renderer/null/TransformFeedbackNULL.cpp",
    "src/libANGLE/renderer/null/VertexArrayNULL.cpp",
    "src/libANGLE/renderer/renderer_utils.cpp",
    "src/libANGLE/validationEGL.cpp",
    "src/libANGLE/validationES.cpp",
    "src/libANGLE/validationES1.cpp",
    "src/libANGLE/validationES2.cpp",
    "src/libANGLE/validationES3.cpp",
    "src/libANGLE/validationES31.cpp",
  ],
  shared_libs: [
    "libandroid",
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
    "angle_third_party_angle_angle_gpu_info_util",
    "angle_third_party_angle_angle_image_util",
    "angle_third_party_angle_preprocessor",
    "angle_third_party_angle_translator",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_ENABLE_ESSL",
    "-DANGLE_ENABLE_GLSL",
    "-DANGLE_ENABLE_NULL",
    "-DANGLE_ENABLE_OPENGL",
    "-DANGLE_ENABLE_OPENGL_NULL",
    "-DANGLE_GENERATE_SHADER_DEBUG_INFO",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
    "src/third_party/khronos",
  ],
  product_variables: {
    pdk: {
      enabled: false,
    },
  },
}

// GN target: //third_party/angle:libEGL
cc_library_shared {
  name: "angle_third_party_angle_libEGL",
  shared_libs: [
    "angle_third_party_angle_libGLESv2",
    "libandroid",
    "liblog",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_ENABLE_NULL",
    "-DANGLE_ENABLE_OPENGL",
    "-DANGLE_ENABLE_OPENGL_NULL",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  product_variables: {
    pdk: {
      enabled: false,
    },
  },
}

// GN target: //third_party/angle:libGLESv2
cc_library_shared {
  name: "angle_third_party_angle_libGLESv2",
  shared_libs: [
    "libandroid",
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
    "angle_third_party_angle_angle_gpu_info_util",
    "angle_third_party_angle_angle_image_util",
    "angle_third_party_angle_libANGLE",
    "angle_third_party_angle_preprocessor",
    "angle_third_party_angle_translator",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_ENABLE_ESSL",
    "-DANGLE_ENABLE_GLSL",
    "-DANGLE_ENABLE_NULL",
    "-DANGLE_ENABLE_OPENGL",
    "-DANGLE_ENABLE_OPENGL_NULL",
    "-DANGLE_GENERATE_SHADER_DEBUG_INFO",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  product_variables: {
    pdk: {
      enabled: false,
    },
  },
}

// GN target: //third_party/angle:preprocessor
cc_library_static {
  name: "angle_third_party_angle_preprocessor",
  srcs: [
    "src/compiler/preprocessor/DiagnosticsBase.cpp",
    "src/compiler/preprocessor/DirectiveHandlerBase.cpp",
    "src/compiler/preprocessor/DirectiveParser.cpp",
    "src/compiler/preprocessor/ExpressionParser.cpp",
    "src/compiler/preprocessor/Input.cpp",
    "src/compiler/preprocessor/Lexer.cpp",
    "src/compiler/preprocessor/Macro.cpp",
    "src/compiler/preprocessor/MacroExpander.cpp",
    "src/compiler/preprocessor/Preprocessor.cpp",
    "src/compiler/preprocessor/Token.cpp",
    "src/compiler/preprocessor/Tokenizer.cpp",
  ],
  shared_libs: [
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
  ],
}

// GN target: //third_party/angle:translator
cc_library_static {
  name: "angle_third_party_angle_translator",
  srcs: [
    "src/compiler/translator/AddAndTrueToLoopCondition.cpp",
    "src/compiler/translator/BreakVariableAliasingInInnerLoops.cpp",
    "src/compiler/translator/BuiltInFunctionEmulator.cpp",
    "src/compiler/translator/BuiltInFunctionEmulatorGLSL.cpp",
    "src/compiler/translator/CallDAG.cpp",
    "src/compiler/translator/ClampFragDepth.cpp",
    "src/compiler/translator/ClampPointSize.cpp",
    "src/compiler/translator/CodeGen.cpp",
    "src/compiler/translator/CollectVariables.cpp",
    "src/compiler/translator/Compiler.cpp",
    "src/compiler/translator/ConstantUnion.cpp",
    "src/compiler/translator/Declarator.cpp",
    "src/compiler/translator/DeclareAndInitBuiltinsForInstancedMultiview.cpp",
    "src/compiler/translator/DeferGlobalInitializers.cpp",
    "src/compiler/translator/Diagnostics.cpp",
    "src/compiler/translator/DirectiveHandler.cpp",
    "src/compiler/translator/EmulateGLFragColorBroadcast.cpp",
    "src/compiler/translator/EmulatePrecision.cpp",
    "src/compiler/translator/ExpandIntegerPowExpressions.cpp",
    "src/compiler/translator/ExtensionBehavior.cpp",
    "src/compiler/translator/ExtensionGLSL.cpp",
    "src/compiler/translator/FindMain.cpp",
    "src/compiler/translator/FindSymbolNode.cpp",
    "src/compiler/translator/FlagStd140Structs.cpp",
    "src/compiler/translator/FoldExpressions.cpp",
    "src/compiler/translator/FunctionLookup.cpp",
    "src/compiler/translator/HashNames.cpp",
    "src/compiler/translator/ImmutableString.cpp",
    "src/compiler/translator/ImmutableStringBuilder.cpp",
    "src/compiler/translator/InfoSink.cpp",
    "src/compiler/translator/Initialize.cpp",
    "src/compiler/translator/InitializeDll.cpp",
    "src/compiler/translator/InitializeVariables.cpp",
    "src/compiler/translator/IntermNode.cpp",
    "src/compiler/translator/IntermNodePatternMatcher.cpp",
    "src/compiler/translator/IntermNode_util.cpp",
    "src/compiler/translator/IntermTraverse.cpp",
    "src/compiler/translator/IsASTDepthBelowLimit.cpp",
    "src/compiler/translator/Operator.cpp",
    "src/compiler/translator/OutputESSL.cpp",
    "src/compiler/translator/OutputGLSL.cpp",
    "src/compiler/translator/OutputGLSLBase.cpp",
    "src/compiler/translator/OutputTree.cpp",
    "src/compiler/translator/ParseContext.cpp",
    "src/compiler/translator/PoolAlloc.cpp",
    "src/compiler/translator/PruneNoOps.cpp",
    "src/compiler/translator/QualifierTypes.cpp",
    "src/compiler/translator/RecordConstantPrecision.cpp",
    "src/compiler/translator/RegenerateStructNames.cpp",
    "src/compiler/translator/RemoveArrayLengthMethod.cpp",
    "src/compiler/translator/RemoveEmptySwitchStatements.cpp",
    "src/compiler/translator/RemoveInvariantDeclaration.cpp",
    "src/compiler/translator/RemoveNoOpCasesFromEndOfSwitchStatements.cpp",
    "src/compiler/translator/RemovePow.cpp",
    "src/compiler/translator/RemoveUnreferencedVariables.cpp",
    "src/compiler/translator/ReplaceVariable.cpp",
    "src/compiler/translator/RewriteDoWhile.cpp",
    "src/compiler/translator/RewriteTexelFetchOffset.cpp",
    "src/compiler/translator/RewriteUnaryMinusOperatorFloat.cpp",
    "src/compiler/translator/RewriteUnaryMinusOperatorInt.cpp",
    "src/compiler/translator/RunAtTheEndOfShader.cpp",
    "src/compiler/translator/ScalarizeVecAndMatConstructorArgs.cpp",
    "src/compiler/translator/SeparateDeclarations.cpp",
    "src/compiler/translator/ShaderLang.cpp",
    "src/compiler/translator/ShaderVars.cpp",
    "src/compiler/translator/SimplifyLoopConditions.cpp",
    "src/compiler/translator/SplitSequenceOperator.cpp",
    "src/compiler/translator/Symbol.cpp",
    "src/compiler/translator/SymbolTable.cpp",
    "src/compiler/translator/SymbolTable_autogen.cpp",
    "src/compiler/translator/SymbolUniqueId.cpp",
    "src/compiler/translator/TranslatorESSL.cpp",
    "src/compiler/translator/TranslatorGLSL.cpp",
    "src/compiler/translator/Types.cpp",
    "src/compiler/translator/UnfoldShortCircuitAST.cpp",
    "src/compiler/translator/UseInterfaceBlockFields.cpp",
    "src/compiler/translator/ValidateGlobalInitializer.cpp",
    "src/compiler/translator/ValidateLimitations.cpp",
    "src/compiler/translator/ValidateMaxParameters.cpp",
    "src/compiler/translator/ValidateOutputs.cpp",
    "src/compiler/translator/ValidateSwitch.cpp",
    "src/compiler/translator/ValidateVaryingLocations.cpp",
    "src/compiler/translator/VariablePacker.cpp",
    "src/compiler/translator/VectorizeVectorScalarArithmetic.cpp",
    "src/compiler/translator/VersionGLSL.cpp",
    "src/compiler/translator/blocklayout.cpp",
    "src/compiler/translator/glslang_lex.cpp",
    "src/compiler/translator/glslang_tab.cpp",
    "src/compiler/translator/util.cpp",
    "src/third_party/compiler/ArrayBoundsClamper.cpp",
  ],
  shared_libs: [
    "liblog",
  ],
  static_libs: [
    "angle_third_party_angle_angle_common",
    "angle_third_party_angle_preprocessor",
  ],
  export_include_dirs: [
    "include",
  ],
  defaults: [
    "angle_defaults",
  ],
  cflags: [
    "-DANGLE_ENABLE_DEBUG_ANNOTATIONS",
    "-DANGLE_ENABLE_ESSL",
    "-DANGLE_ENABLE_GLSL",
    "-DANGLE_IS_32_BIT_CPU",
  ],
  local_include_dirs: [
    "include",
    "src",
    "src/common/third_party/base",
  ],
}
