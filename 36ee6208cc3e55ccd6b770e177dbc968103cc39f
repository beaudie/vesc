{
  "comments": [
    {
      "key": {
        "uuid": "e29f7675_058d3bee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-23T17:05:20Z",
      "side": 1,
      "message": "The performance is not there yet, because RenderTargetVk::mContentsDefined is too conservative and is making the multisampled intermediate image initialized and loaded for no reason. I\u0027ll address that in another CL that would need to land before this. That said, this is ready for review.\n\nThe Android failures are unrelated to the change. I duplicated the tests to use the non-multisampled version of the functions and they still fail. There\u0027s something strange going on though, moving those tests verbatim to the CopyTexImageTests test suite makes them pass. I need to investigate that, but again, the failures are unrelated to the change. See here: https://chromium-review.googlesource.com/c/angle/angle/+/2307170",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305c1cd8_d85fef30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Lots of good stuff here.   It should be straightforward to build on this for the blit stuff once this lands.",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb028fa6_9c812e5a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1222,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "This pattern seems to emerge a few times:\n\n    TextureVk::copySubImageImplWithTransfer()\n        srcSubresource.mipLevel       \u003d static_cast\u003cuint32_t\u003e(sourceLevelGL) - srcImage-\u003egetBaseLevel();\n\n    TextureVk::copySubImageImplWithDraw()\n        params.srcMip              \u003d static_cast\u003cuint32_t\u003e(sourceLevelGL) - srcImage-\u003egetBaseLevel();\n\nBut not always:\n\n    FramebufferVk::blit()\n                uint32_t levelIndex                \u003d readRenderTarget-\u003egetLevelIndex();\n                    ANGLE_TRY(depthStencilImage-\u003einitLayerImageView(\n                        contextVk, textureType, VK_IMAGE_ASPECT_DEPTH_BIT, gl::SwizzleState(),\n                        \u0026depthView.get(), levelIndex, 1, layerIndex, 1));\n\n    FramebufferVk::blitWithCommand()\n        blit.srcSubresource.mipLevel       \u003d readRenderTarget-\u003egetLevelIndex();\n        blit.dstSubresource.mipLevel       \u003d drawRenderTarget-\u003egetLevelIndex();\n\n    FramebufferVk::clearImpl()\n            range.baseMipLevel   \u003d depthStencilRT-\u003egetLevelIndex();\n\n\n    FramebufferVk::resolveColorWithCommand()\n            resolveRegion.dstSubresource.mipLevel       \u003d drawRenderTarget-\u003egetLevelIndex();\n\n    UtilsVk::stencilBlitResolveNoShaderExport()\n        region.imageSubresource.mipLevel       \u003d depthStencilRenderTarget-\u003egetLevelIndex();\n\n\nPresumably there\u0027s some consistency that I\u0027m missing, but it feels less structured than that.   How do we know when to use which value?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc5b96af_3a3cee05",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1222,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "This came up before, and a number of bugs were fixed due to mistakes here. At some point I added GL and VK suffixes to make it clear what \"space\" the level is in. When Courtney added some more later, we reached a conclusion that it\u0027s better to use boxed types to make sure there\u0027s no mistake.\n\nI just realized we never created a bug for this, so here it is: http://anglebug.com/4880",
      "parentUuid": "cb028fa6_9c812e5a",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fff3ef90_29faaf5a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1553,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-27T18:34:11Z",
      "side": 1,
      "message": "what about attachments that go from enabled -\u003e disabled?",
      "range": {
        "startLine": 1545,
        "startChar": 0,
        "endLine": 1553,
        "endChar": 21
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144d207b_9a90418f",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1553,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "There\u0027s a reset() at the beginning of this block.",
      "parentUuid": "fff3ef90_29faaf5a",
      "range": {
        "startLine": 1545,
        "startChar": 0,
        "endLine": 1553,
        "endChar": 21
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40322fa1_177979fb",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2068,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "nit: remove",
      "range": {
        "startLine": 2068,
        "startChar": 42,
        "endLine": 2068,
        "endChar": 46
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d20f4a_4a267161",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2068,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done. Meant to say \"truely\"",
      "parentUuid": "40322fa1_177979fb",
      "range": {
        "startLine": 2068,
        "startChar": 42,
        "endLine": 2068,
        "endChar": 46
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a9b40b7_2de22adc",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2075,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Can you open a bug for this optimization and make it a TODO?",
      "range": {
        "startLine": 2074,
        "startChar": 0,
        "endLine": 2075,
        "endChar": 91
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce44e035_eef8935d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2075,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2a9b40b7_2de22adc",
      "range": {
        "startLine": 2074,
        "startChar": 0,
        "endLine": 2075,
        "endChar": 91
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b591747b_c7c8f8bc",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2080,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "You added a call to endRenderPass() in UtilsVk::copyImage().   Since the previous render pass was ended at the start of this function and we\u0027re starting a new one here, presumably that implies there aren\u0027t any dependencies between the render targets in this loop(?).   \n\nDo we need to end the render pass each time in this loop or can we batch all of these up into a single render pass that\u0027s ended at the end of the loop?   Or would there not be any benefit anyway to combining all of these draws?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a47287a_54dae210",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2080,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "If the shader that does the copy is made more complicated, all the copies can be done in one pass. That would require 2^8 times more shader combinations though. Currently, a temp framebuffer is created per render target that needs to be copied.\n\nNote that this path is here for conformance, but we should prevent it from happening in real applications at all costs. If this path is taken, any gains from supporting this extension is lost.",
      "parentUuid": "b591747b_c7c8f8bc",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53255366_9d497cec",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2086,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Can you update this comment to explain why it must be done after copyResolveToMultisampedAttachment() (rather than what this code is doing)?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92931ed2_3e60f048",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2086,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53255366_9d497cec",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba24afc8_fd4df4b6",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "This assert should be updated to handle the resolve case also.",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c9b7b69_0e4613f9",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba24afc8_fd4df4b6",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35fa67f0_86bb82f3",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 242,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Why not isResolveImageOwnerOfData() here?",
      "range": {
        "startLine": 242,
        "startChar": 11,
        "endLine": 242,
        "endChar": 24
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57786bc_b3ae5ea6",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35fa67f0_86bb82f3",
      "range": {
        "startLine": 242,
        "startChar": 11,
        "endLine": 242,
        "endChar": 24
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44938f63_f7c3a140",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Same two comments as in getImageForCopy().",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 248,
        "endChar": 52
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "611eebad_cfebad94",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44938f63_f7c3a140",
      "range": {
        "startLine": 247,
        "startChar": 0,
        "endLine": 248,
        "endChar": 52
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa640c6c_34c6574d",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 259,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "ASSERT((isResolveImageOwnerOfData() \u0026\u0026 mResolveImage) || (!isResolveImageOwnerOfData() \u0026\u0026 mImage));",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d4cf1f_369da9ed",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 259,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa640c6c_34c6574d",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aadfcd0d_297c7c66",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 273,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Is this saying that the clears are applied to both the resolve and multisampled images?",
      "range": {
        "startLine": 270,
        "startChar": 0,
        "endLine": 273,
        "endChar": 19
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eba80c5e_1e76cfc5",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 273,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "No. The clears are staged until the framebuffer decides a render pass needs to start. At that point, the flushSingleSubresourceStagedUpdates call below will do either:\n\n- Defer the clear, if that\u0027s the only update, or\n- Flush updates (clear and not)\n\nIn the first case, it doesn\u0027t really matter which image the clear is staged on, since it\u0027s extracted and deferred anyway. In the second case, it must be staged on the image that owns the data. The comment above explains why then everything is staged on the image that owns the data, even though the deferred clear is later applied to the transient multisampled image when starting the render pass.\n\nI updated the comment.",
      "parentUuid": "aadfcd0d_297c7c66",
      "range": {
        "startLine": 270,
        "startChar": 0,
        "endLine": 273,
        "endChar": 19
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "106fac77_98c8d776",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-27T18:34:11Z",
      "side": 1,
      "message": "can we use a word from the spec for images that don\u0027t get allocated?\n\nhttps://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_multisampled_render_to_texture.txt \n\nEphemeral is not something I\u0027ve seen in a GL context before.",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 39
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb4a5e1f_87a321e8",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Renamed to transient per our discussion.",
      "parentUuid": "106fac77_98c8d776",
      "range": {
        "startLine": 51,
        "startChar": 19,
        "endLine": 51,
        "endChar": 39
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e0c1d16_c0e46389",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "nit: Since this block comment is pretty large and what \u0027this\u0027 is referring to is still 30 lines away, can you replace \u0027this\u0027 with \u0027mIsImageDataEphemeral\u0027 to make it extra clear what\u0027s being referred to here?",
      "range": {
        "startLine": 143,
        "startChar": 37,
        "endLine": 143,
        "endChar": 41
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62b64fdc_29c6f75d",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e0c1d16_c0e46389",
      "range": {
        "startLine": 143,
        "startChar": 37,
        "endLine": 143,
        "endChar": 41
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21b38b1e_27f922b1",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 13
      },
      "lineNbr": 174,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Very nice diagram and documentation here.",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9be3fbe0_cb626433",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Why 0 instead of 1 (or allowing either)?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4387f90c_381e5b3e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "This should only be non-zero with multisampled render to texture, which doesn\u0027t apply here. I added the assert just to be sure. I don\u0027t think this can ever be non-zero.",
      "parentUuid": "9be3fbe0_cb626433",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00613463_ead62674",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 13
      },
      "lineNbr": 418,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-27T18:34:11Z",
      "side": 1,
      "message": "nit: make these unique_ptr or some other smart pointer type. From looking at the code I don\u0027t see why you need a pointer. Can you use a value type?",
      "range": {
        "startLine": 418,
        "startChar": 21,
        "endLine": 418,
        "endChar": 39
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f01a2a8_31f59a44",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 13
      },
      "lineNbr": 418,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Changed to value type",
      "parentUuid": "00613463_ead62674",
      "range": {
        "startLine": 418,
        "startChar": 21,
        "endLine": 418,
        "endChar": 39
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c8d0cf3_22320a95",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1781,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-27T18:34:11Z",
      "side": 1,
      "message": "why isn\u0027t this state change detected by the command buffer apis?",
      "range": {
        "startLine": 1780,
        "startChar": 0,
        "endLine": 1781,
        "endChar": 42
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "486f711d_614a8357",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1781,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Because this function starts the render pass without the context\u0027s knowledge. Normally this is not an issue (I did try to trigger a bug without this change, but couldn\u0027t) because something else always triggers an endRenderPass() (the call is always made through some GL call). The new `FramebufferVk::copyResolveToMultisampedAttachment` function however doesn\u0027t come from a GL call, so the context is never notified of this sneaky render pass.\n\nThe render pass that\u0027s started here is not really reusable, so there\u0027s no penalty in closing it right away.",
      "parentUuid": "5c8d0cf3_22320a95",
      "range": {
        "startLine": 1780,
        "startChar": 0,
        "endLine": 1781,
        "endChar": 42
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "828e8e34_66198c4f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 185,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "The comment above for mHasColorResolveAttachment states that we don\u0027t currently support D/S resolve attachments.   Based on that, I would have expected to see something like:\n\n    ASSERT(angleFormat.depthBits \u003d\u003d 0 \u0026\u0026 angleFormat.stencilBits \u003d\u003d 0);\n\nOr is the intent here to try and future-proof things and simplify supporting D/S someday?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a68633b2_c09ab980",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 185,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "I did it for future-proofing, but changed to ASSERT now. It\u0027s unknown when we would go down the path of resolving depth/stencil with resolve attachment.",
      "parentUuid": "828e8e34_66198c4f",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80f77e2b_47992edf",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 259,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "The old size was:\n    IMPLEMENTATION_MAX_FRAMEBUFFER_ATTACHMENTS \u003d\n        IMPLEMENTATION_MAX_DRAW_BUFFERS + 2,  // 2 extra for depth and/or stencil buffers\n\nThis new size is 1 short if all color, DS, and resolve attachments are used.   It looks like using kMaxFramebufferAttachments here would be better.",
      "range": {
        "startLine": 259,
        "startChar": 40,
        "endLine": 259,
        "endChar": 90
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72cf182d_6a516cdd",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 259,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "The new size is double the old size, including for depth/stencil. I don\u0027t see how this is 1 short.\n\nThat said, yes kMaxFramebufferAttachments is a better replacement (which, FYI, is 3 values smaller than 2x MAX_FRAMEBUFFER_ATTACHMENTS. MAX_FRAMEBUFFER_ATTACHMENTS is one value too large for Vulkan attachments)",
      "parentUuid": "80f77e2b_47992edf",
      "range": {
        "startLine": 259,
        "startChar": 40,
        "endLine": 259,
        "endChar": 90
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05dbe425_4eb8f454",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 117,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "nit: is",
      "range": {
        "startLine": 117,
        "startChar": 94,
        "endLine": 117,
        "endChar": 97
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f41f6a0_952e8649",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 117,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05dbe425_4eb8f454",
      "range": {
        "startLine": 117,
        "startChar": 94,
        "endLine": 117,
        "endChar": 97
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2ae2ff8_8eb725b6",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-27T18:34:11Z",
      "side": 1,
      "message": "nit: mResolveAttachmentsMask to match naming in ANGLE.",
      "range": {
        "startLine": 121,
        "startChar": 56,
        "endLine": 121,
        "endChar": 82
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a4bff45_f293a0b0",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2ae2ff8_8eb725b6",
      "range": {
        "startLine": 121,
        "startChar": 56,
        "endLine": 121,
        "endChar": 82
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f369c3_f929d2ea",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 396,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Just out of curiosity: since this block exists, does this mean you hit cases where we couldn\u0027t allocate LAZILY_ALLOCATED memory?   Is it non-tiler GPUs that may not care about that flag?",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f128d6c4_c74dcbb1",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 396,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Yeap. Only Android has support for this kind of memory. See https://vulkan.gpuinfo.org/listmemory.php\n\nThat said, I removed this block after I noticed a VVL warning. The TRANSIENT usage flag provided to vkCreateImage needs to match the existence of the LAZILY_ALLOCATED flag, so we should know upfront if such a memory exists or not.",
      "parentUuid": "68f369c3_f929d2ea",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "454688cd_e33107a8",
        "filename": "src/tests/gl_tests/CopyTexImageTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 29,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Nice cleanup on these tests.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 91
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f31bb8b4_04bc6c0c",
        "filename": "src/tests/gl_tests/CopyTexImageTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 884,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Looks like this should be removed since these are all ES2 otherwise.",
      "range": {
        "startLine": 884,
        "startChar": 22,
        "endLine": 884,
        "endChar": 48
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b9e5e20_4e04a8a4",
        "filename": "src/tests/gl_tests/CopyTexImageTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 884,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done. There was ES3_VULKAN though, so I kept that.",
      "parentUuid": "f31bb8b4_04bc6c0c",
      "range": {
        "startLine": 884,
        "startChar": 22,
        "endLine": 884,
        "endChar": 48
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52ec7ab9_5ffa58a7",
        "filename": "src/tests/gl_tests/CopyTexImageTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 886,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Does this work?\n\n    ANGLE_INSTANTIATE_TEST(CopyTexImageTest,\n                           ANGLE_ALL_TEST_PLATFORMS_ES2,\n                           WithEmulateCopyTexImage2DFromRenderbuffers(ES2_OPENGL()),\n                           WithEmulateCopyTexImage2DFromRenderbuffers(ES2_OPENGLES()));",
      "range": {
        "startLine": 874,
        "startChar": 0,
        "endLine": 886,
        "endChar": 83
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6449e4a2_cec8e7a5",
        "filename": "src/tests/gl_tests/CopyTexImageTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 886,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done (more or less)",
      "parentUuid": "52ec7ab9_5ffa58a7",
      "range": {
        "startLine": 874,
        "startChar": 0,
        "endLine": 886,
        "endChar": 83
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "177f790c_3ea471e9",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 76,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "I think Ian mentioned that this may end the renderpass before the draw, so the deferred clears aren\u0027t actually held on to as part of the draw render pass.   I haven\u0027t dug into if that\u0027s the case, but it may be worth doing this before the clear to try and exercise the multisampled deferred clears path more.",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1084234_e6514799",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 76,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "I didn\u0027t notice deferred clears not being used with renderdoc.\n\nRegardless of glViewport ending the render pass or not, glClear() decides what to do with the clear based on the scissor, not the viewport. The viewport change itself is not processed until draw time, so it shouldn\u0027t matter if the call is made before or after the clear.",
      "parentUuid": "177f790c_3ea471e9",
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ffa25e_c5382dda",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-25T00:47:25Z",
      "side": 1,
      "message": "Rather than skipping the test, can you just use maxSamples here?",
      "range": {
        "startLine": 262,
        "startChar": 57,
        "endLine": 262,
        "endChar": 58
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c223fe_71c6267c",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 262,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T17:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73ffa25e_c5382dda",
      "range": {
        "startLine": 262,
        "startChar": 57,
        "endLine": 262,
        "endChar": 58
      },
      "revId": "36ee6208cc3e55ccd6b770e177dbc968103cc39f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}