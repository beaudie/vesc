{
  "comments": [
    {
      "key": {
        "uuid": "1361a0b2_890ca58b",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-20T21:51:04Z",
      "side": 1,
      "message": "So is there an actual compatibility check for this already implemented?",
      "revId": "27bb0de529dacbcd94e185374eb9eccedc3f32b0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8d00f00_c1318c0d",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-01-21T00:17:05Z",
      "side": 1,
      "message": "Not in the validation code.\n\nThis part of the GLES spec is strange IMHO.  There doesn\u0027t appear to be any consequences described if the format and texture\u0027s internal format are not \"compatible\".  I\u0027ve looked a number of times.  I\u0027m wondering if something was lost in translation from Desktop OpenGL?\n\nThe compatibility paragraph starts with:\n\n\u003e When a texture is bound to an image unit, the format parameter for the image unit need not exactly match the texture internal format as long as the formats are considered compatible.\n\nIt never says what to do if they are not compatible (for Vulkan, if a \"must:\" is not satisfied, it means the result is undefined; but I don\u0027t know about GLES).  The next paragraph says that a re-interpretation is done.  I haven\u0027t looked to see how the shader part of ANGLE treats this.  Looks like you implemented the image load and store functionality.  Do you know?",
      "parentUuid": "1361a0b2_890ca58b",
      "revId": "27bb0de529dacbcd94e185374eb9eccedc3f32b0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ba3a2b1_44143c44",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-21T04:13:22Z",
      "side": 1,
      "message": "Well, I just added code to create views and assign binding to images. The rest was already done in ANGLE and \"just worked\".\n\nI took a look at the spec, and it looks like we should detect incompatible formats and ignore load/stores on the binding. A little bit above your quote has the following:\n\n\u003e Invalid image loads will return a vector where the value of R, G, and B components is 0 and the value of the A component is undefined. Invalid image stores will have no effect. An access is considered invalid if:\n\u003e\n\u003e ...\n\u003e\n\u003e - the internal format of the texture bound to the image unit is incompatible with the specified format ...\n\nThe solution might be to bind a dummy white 1x1 image (by the frontend) when incompatible. I think OOB reads from the image would give (0, 0, 0, ?) and OOB writes would be dropped, right? If not, we may have to create a same-size dummy image.",
      "parentUuid": "f8d00f00_c1318c0d",
      "revId": "27bb0de529dacbcd94e185374eb9eccedc3f32b0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77f8de1a_2e82bf90",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-21T14:13:14Z",
      "side": 1,
      "message": "In this case this part is also important:\n\n\u003e For textures allocated by the GL, an image unit format is compatible with a texture internal  format if they match by size. For textures allocated outside the GL, format compatibility is  determined by matching by size or by class, in an implementation dependent manner.\n\nSo this only applies to textures allocated \"outside the GL\". Anyway this CL only implements the query logic so still LGTM.",
      "parentUuid": "9ba3a2b1_44143c44",
      "revId": "27bb0de529dacbcd94e185374eb9eccedc3f32b0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c862baf6_de6e61c1",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-01-21T16:05:41Z",
      "side": 1,
      "message": "\u003e Anyway this CL only implements the query logic so still LGTM.\n\nTrue.  We have other bugs for the other failures.  I\u0027ll land this and start looking at those (though we\u0027ll be distracted today with Nat and Prahlad here for Alan\u0027s last day).",
      "parentUuid": "77f8de1a_2e82bf90",
      "revId": "27bb0de529dacbcd94e185374eb9eccedc3f32b0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}