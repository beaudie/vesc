{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "48681ccf_ee6de383",
        "filename": "src/compiler/translator/CodeGen.cpp",
        "patchSetId": 9
      },
      "lineNbr": 31,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "Why is there `ANGLE_ENABLE_WEBGPU` and `ANGLE_ENABLE_WGPU`?",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a650d8_e37fac5e",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 5,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "Having written this file, do you think it would be easier to generate this struct directly in the output generator? You could lazily add to the struct definition as you encounter the built-ins (and later user input/output) and then stitch the definition together with the rest of the generated output.",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b45de575_8641c31f",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 5,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-08-19T07:24:07Z",
      "side": 1,
      "message": "I think that might be easier. I did it with AST transformations because I figured I\u0027d get more validation. And they\u0027re a little more modular, so they\u0027re more easily composable, and maybe a little easier to read because they can be more easily separated into different files rather than broken up and scattered into the output generator. But this step is to be done at the end anyways so it doesn\u0027t need to be composable, and all the AST transformation is a bit heavyweight and probably less performant at runtime, and obviously there are still some hooks in the output generator anyway.\n\nI\u0027d be okay rewriting this to be part of the output generator, it probably wouldn\u0027t take me that long, do you think it\u0027s worth it?",
      "parentUuid": "58a650d8_e37fac5e",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b845f653_400e8437",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "is `position` correct?",
      "range": {
        "startLine": 78,
        "startChar": 73,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "804d9381_62d2795e",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-08-19T07:24:07Z",
      "side": 1,
      "message": "Yeah for whatever reason `position` is both the vertex shader\u0027s output (`gl_Position`) and also the fragment shader\u0027s input position of the fragment (`gl_FragCoord`): https://www.w3.org/TR/WGSL/#built-in-values-position",
      "parentUuid": "b845f653_400e8437",
      "range": {
        "startLine": 78,
        "startChar": 73,
        "endLine": 78,
        "endChar": 81
      },
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f15edec8_693b0d5d",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "nit: Use the immutable string builder",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63b68243_2fceed81",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 146,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "Translator\u0027s convention is to refer to nodes by `*`. Later you are doing `\u0026AccessField(...)` anyway.\n\nSame with `TVariable` etc, feel free to use `*` and avoid `\u0026` on usage.",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bd2ca2f_e3820e44",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 148,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "No need for `#ifdef`, the `ASSERT` already turns into `void` in release.",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56d3f19c_1a79d55b",
        "filename": "src/compiler/translator/wgsl/RewritePipelineVariables.cpp",
        "patchSetId": 9
      },
      "lineNbr": 266,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-17T02:38:44Z",
      "side": 1,
      "message": "```suggestion\n// VariableReplacementMap to replace old variable accesses with fields accesses of the appropriate\n```",
      "revId": "5597f514611b376dd28dea2cbea7c878a8e734e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}