{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9b5cd280_51de0c24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-03-15T02:57:11Z",
      "side": 1,
      "message": "otherwise looks good to me.",
      "revId": "584e93add485f2ab0e158324680d1d66261c4d3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a6be87_252d67ae",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 26
      },
      "lineNbr": 690,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-03-15T02:57:11Z",
      "side": 1,
      "message": "I think you should use getShareGroup()-\u003egetShareGroupContextCount(). Otherwise there is a poetnial bug here as well if someone add a refcount to share group and the last ctx is detroyed and this gets skipped and then refcount gets dropped and shared group gets freed, now you get into the same bug as before. getShareGroupContextCount() ensures you do this when last ctx is destroyed.",
      "range": {
        "startLine": 690,
        "startChar": 37,
        "endLine": 690,
        "endChar": 82
      },
      "revId": "584e93add485f2ab0e158324680d1d66261c4d3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "259bbc19_7c6d0b9b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 26
      },
      "lineNbr": 690,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-03-15T07:09:21Z",
      "side": 1,
      "message": "I see, that makes sense. I have changed the check to getShareGroup()-\u003egetShareGroupContextCount()\u003d\u003d0.\n\nI would like to point that getShareGroup()-\u003egetShareGroupContextCount()\u003d\u003d0 doesn\u0027t mean the sharegroup will be destroyed. For instance:\n\nEGLContext context1 \u003d eglCreateContext(display, config, nullptr, inShareGroupContextAttribs); \n// context1 is created, a new sharegroup is created. But context1 is not added to the sharegroup yet. shareGroup.getShareGroupContextCount() \u003d 0.\n\nEGLContext context2 \u003d eglCreateContext(display, config, context1, inShareGroupContextAttribs); \n// context2 is created, context2 will use context1\u0027s sharegroup. Context2 is not added to the sharegroup yet. shareGroup.getShareGroupContextCount() \u003d 0.\n\neglMakeCurrent(display, surface, surface, context1); \n// context1 is added to the sharegroup. shareGroup.getShareGroupContextCount() \u003d 1.\n\nSafeDestroyContext(display, context1); \n// context1 is not yet destroyed.\n\neglMakeCurrent(display, surface, surface, context2); \n// context1 is destroyed first. shareGroup.getShareGroupContextCount() \u003d 0. context2 gets added to the sharegroup. shareGroup.getShareGroupContextCount() \u003d 1.\n\nIn the above example, the shareGroup is not going to be destroyed when we destroy context1, because context2 is still pointing to the shareGroup. We could choose not to flush the staged texture update when context1 is destroyed. But the shareGroup.getShareGroupContextCount() is 0 when context1 is destroyed, so adding it to the if condition will still lead to a flush, which works but not necessary.",
      "parentUuid": "43a6be87_252d67ae",
      "range": {
        "startLine": 690,
        "startChar": 37,
        "endLine": 690,
        "endChar": 82
      },
      "revId": "584e93add485f2ab0e158324680d1d66261c4d3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61ad5dd8_3093b484",
        "filename": "src/libANGLE/Display.h",
        "patchSetId": 26
      },
      "lineNbr": 100,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-03-15T02:57:11Z",
      "side": 1,
      "message": "I think this is not needed. See above comment.",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 32
      },
      "revId": "584e93add485f2ab0e158324680d1d66261c4d3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af83c60_65455456",
        "filename": "src/libANGLE/Display.h",
        "patchSetId": 26
      },
      "lineNbr": 100,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-03-15T07:09:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61ad5dd8_3093b484",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 32
      },
      "revId": "584e93add485f2ab0e158324680d1d66261c4d3e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}