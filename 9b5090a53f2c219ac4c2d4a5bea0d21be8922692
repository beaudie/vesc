{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c47f4f4d_21bc8e5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-24T22:20:22Z",
      "side": 1,
      "message": "Please include a regression test - want to check out the call pattern.",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bea2ab2_dff456ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-24T22:32:51Z",
      "side": 1,
      "message": "As I stated to Shabi:\n\nI don\u0027t have a way to get what the commands are.   Enabling `angle_enable_trace\u003dtrue` with `export ANGLE_ENABLE_DEBUG_MARKERS\u003d1` doesn\u0027t output anything, and the testcase file itself seems to just be a binary.\n\nDo you know how to get the call pattern for a fuzzer test?\n\nReproducer Testcase: https://clusterfuzz.com/download?testcase_id\u003d5123136027426816",
      "parentUuid": "c47f4f4d_21bc8e5b",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1705a606_b8b1d08c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-25T13:57:17Z",
      "side": 1,
      "message": "I was able to get them out of Chrome before. Maybe the sandbox is enabled preventing the file being written? I don\u0027t see any references to ANGLE_ENABLE_DEBUG_MARKERS. Try using some prints or log to see if the debug logging code gets hit.",
      "parentUuid": "3bea2ab2_dff456ce",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "973d09dd_c1707e54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-25T14:22:38Z",
      "side": 1,
      "message": "+1 to sandbox being a potential issue. Not sure if this is a webgl test, but if it is, you could also disable GPU compositing so chrome itself doesn\u0027t use ANGLE. If it\u0027s not a webgl test, you wouldn\u0027t want to do that though.\n\n    --disable-gpu-watchdog\n    --disable-gpu-sandbox\n    --disable-gpu-compositing # only if crashing in webgl",
      "parentUuid": "1705a606_b8b1d08c",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b7050d3_45648f13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-26T00:54:50Z",
      "side": 1,
      "message": "I was able to get it to output the GL calls.   Apparently I completely glossed over the `is_debug \u003d false` it was using, so enabling that and `angle_enable_trace \u003d true` gives:\n\nhttps://paste.googleplex.com/4834863518580736\n\nUnfortunately, that\u0027s 450 lines of gibberish without any indication as to what reduced combination of calls gets us to the crash.   As suspected, there is no glUseProgram() call in that whole mess.   Unfortunately, just issuing the final glDrawArrays() command on its own doesn\u0027t cause a crash with an end2end test:\n\n    TEST_P(SimpleOperationTest, DrawWithoutProgramBound)\n    {\n        glDrawArrays(GL_LINE_STRIP_ADJACENCY, 646578481, 110);\n    }\n\nGives the same output for every backend:\n\n    [ RUN      ] SimpleOperationTest.DrawWithoutProgramBound/ES3_Vulkan\n    INFO: GL error: HIGH: GL_EXT_geometry_shader extension not enabled.\n    [       OK ] SimpleOperationTest.DrawWithoutProgramBound/ES3_Vulkan (339 ms)\n\nI\u0027m open to suggestions on other regression tests to add, but converting those fuzzer commands into an end2end is infeasible.",
      "parentUuid": "973d09dd_c1707e54",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8554953_c1f6a4fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-26T02:49:28Z",
      "side": 1,
      "message": "The trace doesn\u0027t look so bad actually, the first half is just egl stuff and queries that could be cut. There\u0027s a lot of texture setup that could be deleted, there is framebuffer creation and deletion that\u0027s just unnecessary. I agree that there\u0027s nothing significant other than the no-program draw.\n\nThat said, your test simply needs to enable the GS extension! It should also be in some suite like SimpleOperationTestES31.",
      "parentUuid": "7b7050d3_45648f13",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b09db7_c24df911",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-29T19:50:56Z",
      "side": 1,
      "message": "Ah, right, GL_EXT_geometry_shader requires GLES3.1.   Switching to that exposes the crash, which is fixed with this CL.\n\nAs for how we get to that code in the first place:\n\nCall stack:\n    gl::StateCache::updateValidDrawModes Context.cpp:9309\n    gl::StateCache::initialize Context.cpp:9048\n    gl::Context::updateCaps Context.cpp:3953\n    gl::Context::initCaps Context.cpp:3791\n    gl::Context::initializeDefaultResources Context.cpp:411\n    gl::Context::makeCurrent Context.cpp:721\n    egl::Display::makeCurrent Display.cpp:1312\n    egl::MakeCurrent egl_stubs.cpp:481\n\n\n    // The rest default to false.\n    constexpr angle::PackedEnumMap\u003cPrimitiveMode, bool, angle::EnumSize\u003cPrimitiveMode\u003e() + 1\u003e\n        kValidBasicDrawModes \u003d {{\n            {PrimitiveMode::Points, true},\n            {PrimitiveMode::Lines, true},\n            {PrimitiveMode::LineLoop, true},\n            {PrimitiveMode::LineStrip, true},\n            {PrimitiveMode::Triangles, true},\n            {PrimitiveMode::TriangleStrip, true},\n            {PrimitiveMode::TriangleFan, true},\n        }};\n\n    void StateCache::updateValidDrawModes(Context *context)\n    {\n    ...\n        [[[... No program bound, so no programExecutable ...]]]\n        if (!programExecutable || !programExecutable-\u003ehasLinkedShaderStage(ShaderType::Geometry))\n        {\n            [[[... mCachedValidDrawModes[PrimitiveMode::LineStripAdjacency] \u003d false ...]]]\n            mCachedValidDrawModes \u003d kValidBasicDrawModes;\n            return;\n        }\n\n\nCall stack:\n    gl::ValidateDrawBase validationES.h:377\n    gl::ValidateDrawArraysCommon validationES.h:857\n    gl::ValidateDrawArrays validationES2.h:23\n    GL_DrawArrays entry_points_gles_2_0_autogen.cpp:1060\n    (anonymous namespace)::SimpleOperationTest31_DrawLineStripAdjacencyWithoutProgramBound_Test::TestBody SimpleOperationTest.cpp:1217\n\n\n    ANGLE_INLINE bool ValidateDrawBase(const Context *context, PrimitiveMode mode)\n    {\n    ...\n        [[[... returns false for PrimitiveMode::LineStripAdjacency ...]]]\n        if (!context-\u003egetStateCache().isValidDrawMode(mode))\n        {\n            RecordDrawModeError(context, mode);\n            return false;\n        }\n\n\nI think this all looks correct for this case and we do just need to properly handle the nullptr with this CL.",
      "parentUuid": "b8554953_c1f6a4fa",
      "revId": "9b5090a53f2c219ac4c2d4a5bea0d21be8922692",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}