{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "555ed86a_615e0623",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-15T08:00:55Z",
      "side": 1,
      "message": "Awesome, thank you for doing this!! ðŸŽ‰\n\nAny way we can get some or all of this goodness higher up the stack? Images as function args don\u0027t work in GLSL or D3D either, and it would be great if we could Monomorphize for pixel local types as well.",
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b041973f_dbe4fea2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-16T01:40:43Z",
      "side": 1,
      "message": "It\u0027s a matter of calling this transformation for the other backends, which is a one-liner. I don\u0027t believe it hurts to let it do _all_ it does for all outputs, but each backend _may_ still want to limit its scope. I don\u0027t really have the bandwidth to chase after issues with the other backends though, sorry.\n\nOnce this lands, you can always try just calling the transformation for the other two outputs and see how it fares on the bots!",
      "parentUuid": "555ed86a_615e0623",
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63e8fab4_b3c4ee80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-16T01:52:25Z",
      "side": 1,
      "message": "Will do! I\u0027m happy to explore it as long as you don\u0027t see a reason not to ðŸ˜Š",
      "parentUuid": "b041973f_dbe4fea2",
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "561c1f2a_0915dd37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-16T02:39:56Z",
      "side": 1,
      "message": "Thanks, your contributions are greatly appreciated and you\u0027re doing a very good job! Congratulations ðŸ˜Š",
      "parentUuid": "63e8fab4_b3c4ee80",
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb62a638_791e735f",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5249,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-16T01:52:25Z",
      "side": 1,
      "message": "What does/should happen if the arg\u0027s precision doesn\u0027t match the uniform? e.g., \"lowp\" here?\n\nI assume the monomorphizer will use the uniform variable, which is highp. Is that fine? Lowp is just a hint with a minimum lower bound on precision, so it ought to be ok?\n\nWhat if the uniform is lowp and the function arg is highp? I assume the image will ultimately lowp after monomorphizing in that case, which should also be fine?",
      "range": {
        "startLine": 5249,
        "startChar": 19,
        "endLine": 5249,
        "endChar": 24
      },
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de5c76fb_d22a9e38",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 5249,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-16T02:28:16Z",
      "side": 1,
      "message": "It should be fine, but I opened anglebug.com/7503 for investigation. The reason is that the AST nodes already have precision information derived and established. When a node is replaced with a different precision, the rest of the code around it don\u0027t adjust their precision.\n\nThat\u0027s intended exactly for reasons like this. Other examples include e.g. when we have to adjust some value based on some highp uniforms, but we don\u0027t want to the rest of the code to all turn to highp as a result.",
      "parentUuid": "cb62a638_791e735f",
      "range": {
        "startLine": 5249,
        "startChar": 19,
        "endLine": 5249,
        "endChar": 24
      },
      "revId": "ac149f949928ad16e22cecb10afc52566c7a99af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}