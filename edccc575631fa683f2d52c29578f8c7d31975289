{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1d81c21_f2df46bf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-29T15:38:42Z",
      "side": 1,
      "message": "please include a bug tag to a bug in angle or chromium.",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 9
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5dbee61_342c967d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1176654
      },
      "writtenOn": "2021-04-07T15:28:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1d81c21_f2df46bf",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 9
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9de4e85d_ab46cf59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1176654
      },
      "writtenOn": "2021-04-07T15:32:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1d81c21_f2df46bf",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 9
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bfa366b_1f3f3c56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1176654
      },
      "writtenOn": "2021-03-29T15:08:34Z",
      "side": 1,
      "message": "Jamie can you please take another look?\n\nYes, this CL needs to land after the Chromium CL lands (and thus we need to wait till tomorrow to test on the CQ). I am not adding this to the CL description because in my opinion CL dependencies should be recorded in \"git log\".",
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df718c0f_0a32cddf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-29T15:38:42Z",
      "side": 1,
      "message": "Would it be alright if you linked the other CL in the description? Especially as this is a cross-repo dependency, git revisions aren\u0027t as useful. You can say something like\n\n\"Must be landed after http://crrev.com/c/######\"\n\nThis link is permanent so there shouldn\u0027t be a risk of this becoming stale.",
      "parentUuid": "9bfa366b_1f3f3c56",
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e80b16cf_19d63b45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-29T15:38:42Z",
      "side": 1,
      "message": "LGTM! Geoff can you pre-approve this? Will be used for standalone Android builds.",
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62b75438_348c9f5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-03-30T13:53:13Z",
      "side": 1,
      "message": "Nice!",
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20c1f5f7_33d19d6d",
        "filename": "src/common/string_utils_unittest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 184,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-30T14:56:46Z",
      "side": 1,
      "message": "nit: a few more tests, like char to be removed is first char, or not found.",
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2e23713_d692208f",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 148,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-30T14:56:46Z",
      "side": 1,
      "message": "What\u0027s the exact format of this file? SplitStringAlongWhitespaceSkipQuotes is using std::getline, so it sounds like you have one argument per line (which is sane). Why is there whitespace splitting and quotation handling?",
      "range": {
        "startLine": 148,
        "startChar": 36,
        "endLine": 148,
        "endChar": 55
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "326d9216_ef9d3508",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 148,
      "author": {
        "id": 1176654
      },
      "writtenOn": "2021-03-31T04:40:36Z",
      "side": 1,
      "message": "- The command line file has a single line.\n- I removed the handling for quotations because it looks like quotes in command line parameters are uncommon. test_runner.py strips quotes from command line parameters passed to it. The quote handling in testing/android/native_test/native_test_util.cc was added in 2012",
      "parentUuid": "c2e23713_d692208f",
      "range": {
        "startLine": 148,
        "startChar": 36,
        "endLine": 148,
        "endChar": 55
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a4f3aae_e5c83162",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 148,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-31T17:54:03Z",
      "side": 1,
      "message": "Ack.\n\nIf this is something we can control or influence, it\u0027d be best if the file had one arg per line.",
      "parentUuid": "326d9216_ef9d3508",
      "range": {
        "startLine": 148,
        "startChar": 36,
        "endLine": 148,
        "endChar": 55
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68cb4ddd_b8d7f780",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-30T14:56:46Z",
      "side": 1,
      "message": "Is there no way to get the args split already (like C\u0027s main() takes)? Parsing command line args after they are concatenated is a not a great idea. There\u0027s inconsistency with the rest of the system in handling quotation for example, not to mention the complexity of nested quotations (which are not handled in this change).",
      "range": {
        "startLine": 153,
        "startChar": 24,
        "endLine": 153,
        "endChar": 40
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96f7dbc9_272d0240",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 153,
      "author": {
        "id": 1176654
      },
      "writtenOn": "2021-03-31T04:40:36Z",
      "side": 1,
      "message": "- The command line parameters are passed in conactenated from Python to Java as an Android Intent extra (or via a file if there are a lot of parameters)\n- According to stackoverflow wordexp would be a way of doing this. I don\u0027t want to use wordexp because wordexp validates input. It throws an error if it is given unescaped braces.",
      "parentUuid": "68cb4ddd_b8d7f780",
      "range": {
        "startLine": 153,
        "startChar": 24,
        "endLine": 153,
        "endChar": 40
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f32a12_166268cd",
        "filename": "src/tests/test_utils/runner/android/AngleNativeTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-31T17:54:03Z",
      "side": 1,
      "message": "\u003e The command line parameters are passed in conactenated from Python to Java as an Android Intent extra (or via a file if there are a lot of parameters)\n\nAck if that\u0027s something we cannot influence. If it\u0027s in our control, it\u0027s infinitely better not to concat the args and then have to split them.",
      "parentUuid": "96f7dbc9_272d0240",
      "range": {
        "startLine": 153,
        "startChar": 24,
        "endLine": 153,
        "endChar": 40
      },
      "revId": "edccc575631fa683f2d52c29578f8c7d31975289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}