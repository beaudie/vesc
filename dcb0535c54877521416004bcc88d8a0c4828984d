{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9df1b053_3e55aac1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T16:45:05Z",
      "side": 1,
      "message": "Could you add a second paragraph describing the fix in more detail? Maybe:\n\n\"\"\"\nWindowSurfaceMtl was losing initialization requests due to back-to-back calls to ensureCurrentDrawableObtained. Refactor surface preparation and track initialized state separately.\n\"\"\"",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06ddfc48_2fa3a580",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-04-19T17:28:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9df1b053_3e55aac1",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a71723c8_74632799",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2022-04-19T15:30:15Z",
      "side": 1,
      "message": "Replied in slack but repeating it here:\n\nANGLE initializes a surface, you need to request it by passing EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE to surface creation (not just context creation). Unless metal is uninitializing our surfaces, they should be auto-cleared with this mechanism (SurfaceMtl::initializeContents be called)\n\nWindowSurfaceMtl::getSwapBehavior returns EGL_BUFFER_DESTROYED which will trigger a re-init after each swap\n\nThe other surface types return EGL_BUFFER_PRESERVED which will only init once\n\nIs it possible that we\u0027re not doing the surface init in Safari or Chrome in some case?",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4af44c5_efb840d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T16:45:05Z",
      "side": 1,
      "message": "This looks good to me but I don\u0027t know the code as well as Geoff, so please wait for his review. Thanks.\n",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a05b5b79_a188f598",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T16:45:05Z",
      "side": 1,
      "message": "From discussion on Slack, the specific problem Gregg ran into and is solving with this patch was with WindowSurfaceMtl, not in the browser. There were effectively reentrant calls to ensureCurrentDrawableObtained which was losing the \"new-ness\" of the new drawable and therefore its initialization per spec.",
      "parentUuid": "a71723c8_74632799",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858dea0b_4712a394",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T16:45:05Z",
      "side": 1,
      "message": "Are there any other situations which can cause the contents to become uninitialized without mContentInitialized being set to false? What about glInvalidateFramebuffer?",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9675cfd3_7bc13a7a",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-04-19T17:28:06Z",
      "side": 1,
      "message": "That is a good question and I don\u0027t know the answer. Checking FramebufferMtl::invalidateImpl it appears these are being treaded as separate problems. One, marking general attachments as discardable and separately, clearing Surfaces (which might happen to be an attachment). \n\nI feel like maybe this code should have a much bigger refactor from just FrameBufferMtl to FramebufferMtlBase and then FrameBufferMtl (which represents glFramebuffr) and BackbufferMtl (which represents when the framebuffer is a backbuffer). As it is there\u0027s a bunch of places where there\u0027s `if (mBackbufer)`\nto special case when the FramebufferMtl represents the backbuffer.\n\nI\u0027m not sure now is the time to refactor",
      "parentUuid": "858dea0b_4712a394",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c22fed39_869d4578",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T17:37:37Z",
      "side": 1,
      "message": "I agree that we should not do a major refactor in this CL. That can come later once the test is passing.\n\nBy the way - is there a test that\u0027s passing now with this change? If so could you unsuppress it?",
      "parentUuid": "9675cfd3_7bc13a7a",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08ab98e3_6427b823",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-04-19T17:40:24Z",
      "side": 1,
      "message": "There is no test because sadly whether data apperas to be cleared or not is just luck. There\u0027s nothing to supress that I know of. On the other hand, without this fix, this CL https://chromium-review.googlesource.com/c/angle/angle/+/3584423 reliably fails. So, indirectly there is a test (or will be :P)",
      "parentUuid": "c22fed39_869d4578",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b5e6bd3_6a467312",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-04-19T17:42:13Z",
      "side": 1,
      "message": "I see - sounds fine, thanks.",
      "parentUuid": "08ab98e3_6427b823",
      "revId": "dcb0535c54877521416004bcc88d8a0c4828984d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}