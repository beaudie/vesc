{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "140f99d5_07d749ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-08-31T20:37:28Z",
      "side": 1,
      "message": "@Aditya, your latest patchset still LGTM. \n\nGeoff and Jamie, WDYT?  ",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd027308_0d3216cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-31T20:41:57Z",
      "side": 1,
      "message": "I lost the context.. why\u0027d you get rid of the dirty bit?",
      "parentUuid": "140f99d5_07d749ad",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a4c0502_6d0fbd46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1512662
      },
      "writtenOn": "2021-08-31T20:55:49Z",
      "side": 1,
      "message": "This change will ensure that whenever we call setLabel, we send the label to D3D right away without having to perform other calls which cause syncState to be called.",
      "parentUuid": "dd027308_0d3216cb",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff28b650_5a5a0090",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-31T21:22:10Z",
      "side": 1,
      "message": "What calls don\u0027t go through syncState?",
      "parentUuid": "7a4c0502_6d0fbd46",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "689ba72b_e032db24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-08-31T21:37:24Z",
      "side": 1,
      "message": "@Jamie, the scenario is you make GL calls such that the storage is created and then change the label by calling the KHR function. With the sync state approach, you have to perform additional GL work so that syncState can get called to update the label. With Aditya\u0027s latest change, the label gets updated with D3D right away.",
      "parentUuid": "ff28b650_5a5a0090",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "159e99a6_0f367894",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-31T22:21:18Z",
      "side": 1,
      "message": "Right, I understand, you don\u0027t get the update right away. What\u0027s wrong with that approach? Sorry just trying to get up to speed again.",
      "parentUuid": "689ba72b_e032db24",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e03b9ee1_90284d33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-08-31T22:37:31Z",
      "side": 1,
      "message": "The downside of using dirty flags is D3D information is not changed right away. We want to make sure the labels are as up-to-date as possible when we receive dumps/traces from people in the wild.",
      "parentUuid": "159e99a6_0f367894",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3566153_f785c9bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-01T11:11:17Z",
      "side": 1,
      "message": "Well, technically if you change the label it should get changed as soon as you process commands that involve this texture. Otherwise even if you get dumps, the unlabeled texture wouldn\u0027t be used in those dumps. Is that an issue?",
      "parentUuid": "e03b9ee1_90284d33",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4edd7253_a4b66b0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-09-01T15:00:45Z",
      "side": 1,
      "message": "The case where we want to speed up getting the label to the underlying graphics API is where the storage gets created and the label gets set but (due to buggy or wasteful code) nothing else happens to the texture. \n\nBefore this change, you have to cause the texture to be read or written to in order for syncState to be called. With the latest patchset, the label is updated with D3D when you set the label; hence we don\u0027t have to wait for the texture to be used in order to see the label.",
      "parentUuid": "a3566153_f785c9bd",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45ecd79b_794d4d3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-01T15:04:38Z",
      "side": 1,
      "message": "The reason why I\u0027m bringing it up is that the storage might not be created in the Vulkan back-end until syncState, so we don\u0027t always have the ability to set the label immediately in the Vulkan version of the labelling APIs.\n\nI guess what I\u0027m asking is just for more details to help understand the motivation. I understand that you have to wait for the texture to be used to set the label - I still don\u0027t see why that\u0027s a problem. Is there a buggy situation where the texture is written/read but syncState is never called?",
      "parentUuid": "4edd7253_a4b66b0b",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37cc7024_15e52f8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-01T15:06:46Z",
      "side": 1,
      "message": "Although thinking about it a bit, it\u0027s likely that in Vulkan we\u0027ll also have to have some checking for the label state when we (re)create the object, outside of syncState, so this change LGTM. Still would be curious to know more details.",
      "parentUuid": "45ecd79b_794d4d3d",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "987643cc_a0f38ebc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1512662
      },
      "writtenOn": "2021-09-01T16:44:06Z",
      "side": 1,
      "message": "One of the problem that I encountered while writing the unittest was the dirty bits setting was not persistent meaning in the current test case (TextureKHRDebugLabelWithCopyTexImage2D), if I signal the dirty bit label in setLabel (using signalDirtyState(DIRTY_BIT_LABEL)) and later when I call drawQuad which will call syncState, the storage object was initialized just fine but the expression, dirtyBits.test(gl::Texture::DirtyBitType::DIRTY_BIT_LABEL), turned out to be false. I noticed this for glTexImage2D and some others too. There were combination of things that needs to be done in the test in order to have the condition true in the syncState which then calls onLabelUpdate.\n\nTo avoid this, the latest patch would not depend on the dirty bits and if the storage object is created, it will send the label to the D3D correctly.",
      "parentUuid": "37cc7024_15e52f8f",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c083f774_9a4aa0a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-09-01T16:51:47Z",
      "side": 1,
      "message": "@Jamie, apologies for me not being clear. The \"buggy code\" I referred to was not ANGLE code but, rather, code that calls ANGLE. \n\nSuppose a client of ANGLE allocates a texture using glTexStorage2D, labels it, but then (due to bugs) leaks the texture before using it. With the syncState approach, the label will never be passed down to D3D/Vulkan. With the latest patchset, the label gets passed down with the setLabel call right away, thus allowing us to see more detailed information in dumps/traces.",
      "parentUuid": "987643cc_a0f38ebc",
      "revId": "147575a9aa9c26e4fbef66a47d128b1862179993",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}