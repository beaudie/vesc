{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aa394852_d8984273",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 17
      },
      "lineNbr": 2284,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "Is `_ns` short for namespace here?\n\nAlso, I can\u0027t find where this is used.",
      "range": {
        "startLine": 2284,
        "startChar": 4,
        "endLine": 2284,
        "endChar": 18
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1647702_263b61be",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 17
      },
      "lineNbr": 2284,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "Whoops, left in from a prior design. Thanks for catching, removed.",
      "parentUuid": "aa394852_d8984273",
      "range": {
        "startLine": 2284,
        "startChar": 4,
        "endLine": 2284,
        "endChar": 18
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6694d31e_4f2b14de",
        "filename": "src/common/PackedEnums.h",
        "patchSetId": 17
      },
      "lineNbr": 893,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "There are 4 cases here now, if you can add an additional comment, or create 3a and 3b.  From a local diff, I can see the main change here is adding:\n```\ntemplate \u003ctypename EnumT, typename FromT\u003e\ntypename std::enable_if\u003cstd::is_same\u003cEnumT, egl::ImageID\u003e::value, EnumT\u003e::type PackParam(FromT from)\n{\n    return {static_cast\u003cGLuint\u003e(reinterpret_cast\u003cuintptr_t\u003e(from))};\n}\n```\nand then checking for ImageID in the last check:\n```\n!std::is_same\u003cEnumT, egl::ImageID\u003e::value\n```",
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6be2a9f_8a321d56",
        "filename": "src/common/PackedEnums.h",
        "patchSetId": 17
      },
      "lineNbr": 893,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6694d31e_4f2b14de",
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf4661a1_36dd295c",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 867,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "I\u0027ll need to see how this looks in a trace, but it looks like this constructs a comment informing the user of the max values, but then passes them all directly to `InitializeReplay2`.  I think this is because we don\u0027t want any variables to show up in the trace, to ease parsing.",
      "range": {
        "startLine": 867,
        "startChar": 0,
        "endLine": 867,
        "endChar": 75
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60872e4d_21b92b20",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 867,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "Exactly. It looks like this\n\n```\nvoid InitReplay(void)\n{\n    // maxBuffer \u003d 23\n    // maxContext \u003d 1\n    // maxFenceNV \u003d 0\n    // maxFramebuffer \u003d 7\n    // maxImage \u003d 0\n    // maxMemoryObject \u003d 0\n    // maxProgramPipeline \u003d 0\n    // maxQuery \u003d 0\n    // maxRenderbuffer \u003d 6\n    // maxSampler \u003d 0\n    // maxSemaphore \u003d 0\n    // maxShaderProgram \u003d 98\n    // maxSurface \u003d 1\n    // maxTexture \u003d 93\n    // maxTransformFeedback \u003d 1\n    // maxVertexArray \u003d 0\n    InitializeReplay2(\"trex_200.angledata.gz\", 0, 4, 1, 23, 1, 0, 7, 0, 0, 0, 0, 6, 0, 0, 98, 1, 93, 1, 0);\n}\n```\n\nI kept it in because it\u0027s nice to see how many resources the trace uses, which was why I originally added the constants.",
      "parentUuid": "cf4661a1_36dd295c",
      "range": {
        "startLine": 867,
        "startChar": 0,
        "endLine": 867,
        "endChar": 75
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe4cf16c_d1bfa37c",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 7996,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "This used to init with {0}:\n```\n// Used to indicate that \"shared\" should be used to identify the files.\nconstexpr gl::ContextID kSharedContextId \u003d {0};\n```\nIs shared still written correctly?\n\nEdit: It looks like `WriteInitReplayCall` uses `kSharedContextId` and didn\u0027t need it via parameter.",
      "range": {
        "startLine": 7996,
        "startChar": 50,
        "endLine": 7996,
        "endChar": 57
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76dc4710_ef774676",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 7996,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "I reverted this - I had to change it at one point when I was using uintptr_t for context map indexes. Now that I\u0027m back to using ContextID I can keep the code the way it is before. Now if shared has any issues it won\u0027t be because of this.",
      "parentUuid": "fe4cf16c_d1bfa37c",
      "range": {
        "startLine": 7996,
        "startChar": 50,
        "endLine": 7996,
        "endChar": 57
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f54a644_b3cdb2fa",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 7996,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T13:26:40Z",
      "side": 1,
      "message": "Turns out this needs to be context id. Not sure what was up with it before or why things may or may not have worked.",
      "parentUuid": "76dc4710_ef774676",
      "range": {
        "startLine": 7996,
        "startChar": 50,
        "endLine": 7996,
        "endChar": 57
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67be3ffe_1831c9c1",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 8871,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "To confirm, `gSurfaceMap2[0]` contains `EGL_NO_SURFACE`?",
      "range": {
        "startLine": 8871,
        "startChar": 11,
        "endLine": 8871,
        "endChar": 23
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "033a1d77_7c456180",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 17
      },
      "lineNbr": 8871,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "It doesn\u0027t, I\u0027m not sure if it needs it or not. I\u0027m hesitant to add it unless I know it needs it, because no one will remember to go back and remove it.",
      "parentUuid": "67be3ffe_1831c9c1",
      "range": {
        "startLine": 8871,
        "startChar": 11,
        "endLine": 8871,
        "endChar": 23
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8350603b_b57bd13e",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 17
      },
      "lineNbr": 2229,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-19T11:17:36Z",
      "side": 1,
      "message": "ref",
      "range": {
        "startLine": 2229,
        "startChar": 25,
        "endLine": 2229,
        "endChar": 40
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983033a5_a05224c8",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 17
      },
      "lineNbr": 6426,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "What prompted this change in behavior?",
      "range": {
        "startLine": 6426,
        "startChar": 0,
        "endLine": 6426,
        "endChar": 21
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c644e21_40ca05b9",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 17
      },
      "lineNbr": 6426,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "I was having an issue with GetCurrentSurface and I noticed that this code wasn\u0027t properly implemented in the validation function. So I moved it there as a simultaneous cleanup. It could be a split CL, but I figured it was probably ok like this.",
      "parentUuid": "983033a5_a05224c8",
      "range": {
        "startLine": 6426,
        "startChar": 0,
        "endLine": 6426,
        "endChar": 21
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86c25818_1f6b2972",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 280,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-10-19T07:06:01Z",
      "side": 1,
      "message": "should it be `reinterpret_cast\u003cEGLSurface\u003e`?",
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d33b05de_ed3f2530",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 280,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-19T11:17:36Z",
      "side": 1,
      "message": "Good catch! EGLSurface and EGLContext are both void * so the compiler didn\u0027t catch this. Ideally we could use packed types for return values from these methods but we don\u0027t currently support unpacking types in the auto-gen entry points.",
      "parentUuid": "86c25818_1f6b2972",
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43858ccb_b1f1a07e",
        "filename": "src/libGLESv2/egl_stubs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 280,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T13:26:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d33b05de_ed3f2530",
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31908b4c_fe529bfa",
        "filename": "src/tests/gl_tests/D3D11InputLayoutCacheTest.cpp",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-10-19T20:53:53Z",
      "side": 1,
      "message": "It looks like this and others below could use `HackANGLE` (or similar) as well.  Doesn\u0027t have to be in this CL, but would be nice to streamline all the double casting.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 83
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fe235d1_f19343db",
        "filename": "src/tests/gl_tests/D3D11InputLayoutCacheTest.cpp",
        "patchSetId": 17
      },
      "lineNbr": 73,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-10-20T12:32:31Z",
      "side": 1,
      "message": "Ack, it would be nice if we had a common place for white box tests, but I didn\u0027t know of an existing one and didn\u0027t want to do the work to add one.",
      "parentUuid": "31908b4c_fe529bfa",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 73,
        "endChar": 83
      },
      "revId": "2cdb82c89fad88bd6c1bd7502e3cbb013d5b67b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}