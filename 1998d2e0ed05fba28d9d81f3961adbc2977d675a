{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95a362c3_2803ca09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 25
      },
      "lineNbr": 0,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-24T07:59:03Z",
      "side": 1,
      "message": "refine some typo.",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96b1024f_872e77b4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 236,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-25T20:18:43Z",
      "side": 1,
      "message": "This is not a complete solution unfortunately. What if there are 2 images in this situation? The flag is cleared only from one image.\n\nLooking back, I\u0027m not quite sure why you need this. Why isn\u0027t readImageWithLayoutTransition() enough for the purposes of this optimization?",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2247a81a_4f720c4f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 236,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-26T01:11:29Z",
      "side": 1,
      "message": "Currently when one image add to readImageWithLayoutTransition, it also add to usesImage..This makes a confusion with the case of texture used as attachment (also add image to usesImages.\nBut why not DON\u0027T insert the image to usesImage when it need layout transition,\nI consider the following code segment of RenderPassCommandBufferHelper::imageRead:\n\n    // As noted in the header we don\u0027t support multiple read layouts for Images.\n    // We allow duplicate uses in the RP to accommodate for normal GL sampler usage.\n    if (!usesImage(*image))\n    {\n        mRenderPassUsedImages.insert(image-\u003egetImageSerial());\n        image-\u003eretain(\u0026contextVk-\u003egetResourceUseList());\n    }\nIf not use \u0027usesImage\u0027, I\u0027m not sure how to handle the code that add this image to context\u0027s resource use list, seems the add operation only need one time per renderpass. So we can\u0027t just remove the condition of \u0027If\u0027 statement directly. \nSo I add this flag to distinguish the image operation in usesImage. But yes, seems it is hard to remove its \u0027sticky\u0027..\nI preferred to know what do you consider on this?",
      "parentUuid": "96b1024f_872e77b4",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dbeafad_da8d7a4e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 236,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-26T02:48:37Z",
      "side": 1,
      "message": "Yes, as you discovered we can\u0027t _not_ add the image to the used-images list.\n\nMy suggestion was to not check usedImages at all. Because if readImageWithLayoutTransition is true, then the image is necessarily used for reading in the render pass, isn\u0027t that so?",
      "parentUuid": "2247a81a_4f720c4f",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c09aa53_d60f9ccf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 236,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-26T13:06:13Z",
      "side": 1,
      "message": "If one image no needs to do layout transition in RenderPassCommandBufferHelper::imageRead, the readImageWithLayoutTransition is false, but this image still be added to usedImages list. Then in the following invalidateCurrentTextures, the renderpass will be closed due to we will check IsRenderPassStartedAndUsesImage. This closure is unnecessary. In fact, IsRenderPassStartedAndUsesImage here suit for the colorImage and resolveImage as attachment write, but unfortunately, a misoperation happens. So we needs to filter out the image suit for using usesImage here.\n\nI found if one image use as colorImage/resolveImage, ANGLE already set its renderPassUsage to RenderPassUsage::RenderTargetAttachment, seems we can use this flag, no need to create a new renderPassUsage flag as previous change. \n\nThe test cases need close renderpass we discussed before as below for summary: \n1, for texture used as color attachment and CS texture sample it:\nwhen usesImage and image.renderPassUsage\u003d\u003dRenderTargetAttachment both are true;\n\n2, texture has a layout transition and CS texture sample it:\nwhen readImageWithLayoutTransition is true;\n\n3, FS read image and CS texture sample it:\nWe call imageWrite when FS read image, so here can add this image to mRenderPassReadImagesWithLayoutTransition list too. So this case also can be checked by if readImageWithLayoutTransition is true.\nBy the way, I\u0027m not sure why we call imageWrite even the shader only read the image.\n\n4, for CS access image\nwhen the usesImage is true.\n\nI update the related change, would you please help to check it.",
      "parentUuid": "7dbeafad_da8d7a4e",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b94bf7c8_20dd0464",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 6840,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-25T20:18:43Z",
      "side": 1,
      "message": "Again, this function should subsume the code from endRenderPassIfComputeReadAfterAttachmentWrite.",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc6b96ba_760267c4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 6840,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-26T01:11:29Z",
      "side": 1,
      "message": "I missed this concern. But If the confusion mentioned at last comment, I think the code of handling texture part in this function can be like as:\n    for (size_t textureUnit : executable-\u003egetActiveSamplersMask())\n    {\n    ... ...\n        //endRenderPassIfComputeReadAfterAttachmentWrite case\n        if (IsRenderPassStartedAndUsesImage(*mRenderPassCommands, image))\n        {\n            return flushCommandsAndEndRenderPass(\n                RenderPassClosureReason::ImageAttachmentThenComputeRead);\n        }\n    \n        //image layout transition case:\n        if (IsRenderPassStartedAndTransitionsImageLayout(*mRenderPassCommands, image))\n        {\n            return flushCommandsAndEndRenderPass(\n            RenderPassClosureReason::GraphicsTextureImageAccessThenComputeAccess);\n        }\n    }\n \nBesides, the image part of this function can use \u0027usesImage\u0027 as you mentioned before.",
      "parentUuid": "b94bf7c8_20dd0464",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "122b0cf1_e18bc5d4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 25
      },
      "lineNbr": 6840,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-26T02:48:37Z",
      "side": 1,
      "message": "Yes, that sounds good. Then you can delete endRenderPassIfComputeReadAfterAttachmentWrite",
      "parentUuid": "cc6b96ba_760267c4",
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea7cc8e7_a16f6881",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 25
      },
      "lineNbr": 4931,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-25T20:18:43Z",
      "side": 1,
      "message": "nit: you can remove \"dummy\" here (and in other tests)",
      "range": {
        "startLine": 4931,
        "startChar": 15,
        "endLine": 4931,
        "endChar": 20
      },
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3e5cdd7_d1b76301",
        "filename": "src/tests/gl_tests/ComputeShaderTest.cpp",
        "patchSetId": 25
      },
      "lineNbr": 4931,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-26T01:11:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea7cc8e7_a16f6881",
      "range": {
        "startLine": 4931,
        "startChar": 15,
        "endLine": 4931,
        "endChar": 20
      },
      "revId": "1998d2e0ed05fba28d9d81f3961adbc2977d675a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}