{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5483131e_fde9845d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-12T20:49:51Z",
      "side": 1,
      "message": "Overall looks much better now.",
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74c26a0d_ed2b2d7f",
        "filename": "src/libANGLE/Buffer.h",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-12T20:49:51Z",
      "side": 1,
      "message": "You probably can compact this data structure by union {vertexArray, texture}, and then use special bufferIndex (something like `static constexpr uint32_t kBufferTextureIndex\u003d-1`) for texture. And then  you can use template for addContentsObserver/removeContentsObserver/getContentsObserverIndex functions. You can assert if it is texture, the index passed in must be kBufferTextureIndex and if it is vertexArray it must not equal kBufferTextureIndex.",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7d94bfe_65625ecd",
        "filename": "src/libANGLE/Buffer.h",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-12T23:25:07Z",
      "side": 1,
      "message": "+1 to `kBufferTextureIndex` + ASSERTs. `union` shouldn\u0027t gain us much though",
      "parentUuid": "74c26a0d_ed2b2d7f",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f73eec57_f00efdff",
        "filename": "src/libANGLE/Buffer.h",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-15T14:51:45Z",
      "side": 1,
      "message": "Done. This helped simplify the code a bit. I used a `void*` and a cast instead of a union as it makes code easier to read and is only used internally by the class.",
      "parentUuid": "c7d94bfe_65625ecd",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c3cc380_214d5657",
        "filename": "src/libANGLE/Buffer.h",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-16T16:05:26Z",
      "side": 1,
      "message": "Instead of `void *`, why not use `angle::ObserverInterface`?",
      "parentUuid": "f73eec57_f00efdff",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1efaaa56_161c6b26",
        "filename": "src/libANGLE/Buffer.h",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-16T16:18:13Z",
      "side": 1,
      "message": "I did consider the two options, IMO `ObserverInterface*` would suggest that the object is used by this interface which would be misleading. As we need to cast either way, I see `void*` as being less confusing - but lmk if you disagree.",
      "parentUuid": "4c3cc380_214d5657",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 31
      },
      "revId": "7e4e7cb57675fd719c54f5b1a6469d94e88994d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}