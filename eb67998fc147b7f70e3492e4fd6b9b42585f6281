{
  "comments": [
    {
      "key": {
        "uuid": "c1be429c_e29048b6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4613,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-26T21:58:40Z",
      "side": 1,
      "message": "Have you tested dynamic images?\n\nI recommend we store a flag that flips if we release the staging buffer. and then if we ever have released it before, we don\u0027t release it a second time. this should cover 99% of the potential cases, including dynamic use.",
      "range": {
        "startLine": 4613,
        "startChar": 23,
        "endLine": 4613,
        "endChar": 30
      },
      "revId": "eb67998fc147b7f70e3492e4fd6b9b42585f6281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db851ce6_dcec03f0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4613,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-26T23:11:48Z",
      "side": 1,
      "message": "I think I would handle the dynamic case in TextureVk::setSubImageImpl. I have tried it before but ran into some tests failure. Now I think I have some better understanding of the texture code now, so will give it another try.",
      "parentUuid": "c1be429c_e29048b6",
      "range": {
        "startLine": 4613,
        "startChar": 23,
        "endLine": 4613,
        "endChar": 30
      },
      "revId": "eb67998fc147b7f70e3492e4fd6b9b42585f6281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "341c1263_4119ade1",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4613,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-27T22:39:01Z",
      "side": 1,
      "message": "I have confirmed with gdb on linux with the following sequence\n   for(i\u003d0;i\u003c10;i++) { glTexImage; draw;}\nThat only first one is staged and subsequent call are using context staging buffer and flushed out immediately.",
      "parentUuid": "db851ce6_dcec03f0",
      "range": {
        "startLine": 4613,
        "startChar": 23,
        "endLine": 4613,
        "endChar": 30
      },
      "revId": "eb67998fc147b7f70e3492e4fd6b9b42585f6281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ed75d4a_88111fe2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4613,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:34:54Z",
      "side": 1,
      "message": "You aren\u0027t coverig all cases. e.g. TexImage to an invalid mip level.\n\nStill recommend using the image staging buffer always, and only recreating it once.",
      "parentUuid": "341c1263_4119ade1",
      "range": {
        "startLine": 4613,
        "startChar": 23,
        "endLine": 4613,
        "endChar": 30
      },
      "revId": "eb67998fc147b7f70e3492e4fd6b9b42585f6281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86c4f75c_c6f5e223",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4613,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-08-28T16:39:49Z",
      "side": 1,
      "message": "\"TexImage to an invalid mip level\" will still use the ImageHelper\u0027s staging buffer. Even if you do what you siad with a flag in the ImageHelper, you will still have to allocate a new buffer here when first time we switch mipmap filter and becomes invalid levels. What you try to optimize here is if some one constantly switching mipmap filter, the level become invalid level every time we switch mipmap filter. I don\u0027t think any real app will use it this way, so no need to optimize for this. The situation that we end up release it more than twice is going to be  rare. Do you have a specific usage case in mind that want me to try out?\n\nWhat this does right now is the first TexImage call and invalid mip levels etc will still use per object buffer. But if we see the case that we can use context staging buffer, we use it.",
      "parentUuid": "3ed75d4a_88111fe2",
      "range": {
        "startLine": 4613,
        "startChar": 23,
        "endLine": 4613,
        "endChar": 30
      },
      "revId": "eb67998fc147b7f70e3492e4fd6b9b42585f6281",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}