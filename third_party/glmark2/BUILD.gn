# Copyright 2019 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Build integration for glmark2.

import("../../gni/angle.gni")

config("glmark2_libmatrix_config") {
  include_dirs = [ "src/src/libmatrix" ]
}

raw_glmark_data_path = "../../../../../third_party/glmark2/src/data"

config("glmark2_gles_config") {
  defines = [
    "GLMARK2_USE_GLESv2",
    "GLMARK_DATA_PATH=\"${raw_glmark_data_path}\"",
  ]
  if (is_win) {
    # M_PI is nonstandard.
    defines += [ "_USE_MATH_DEFINES" ]
  }
  include_dirs = [
    "include",
    "src/src",
  ]
}

# Supplies compatible headers on Win32.
config("glmark2_header_overrides_config") {
  if (is_win) {
    if (is_clang) {
      cflags = [
        "-Wno-unused-function",
        "-Wno-writable-strings",
        "-Wno-extra-tokens",
      ]
    }
  }
}

source_set("glmark2_header_overrides") {
  if (is_win) {
    sources = [
      "include/dirent.h",
      "include/getopt.h",
      "include/sys/time.h",
    ]
  }
  public_configs = [ ":glmark2_header_overrides_config" ]
}

source_set("glmark2_libmatrix_gles") {
  sources = [
    "src/src/libmatrix/gl-if.h",
    "src/src/libmatrix/log.cc",
    "src/src/libmatrix/log.h",
    "src/src/libmatrix/mat.cc",
    "src/src/libmatrix/mat.h",
    "src/src/libmatrix/program.cc",
    "src/src/libmatrix/program.h",
    "src/src/libmatrix/shader-source.cc",
    "src/src/libmatrix/shader-source.h",
    "src/src/libmatrix/stack.h",
    "src/src/libmatrix/util.cc",
    "src/src/libmatrix/util.h",
    "src/src/libmatrix/vec.h",
  ]

  if (is_clang) {
    cflags_cc = [ "-Wno-implicit-fallthrough" ]
  }
  include_dirs = [ "src/src" ]
  configs += [ ":glmark2_gles_config" ]
  public_configs = [ ":glmark2_libmatrix_config" ]
  deps = [
    ":glmark2_header_overrides",
    "${angle_root}:includes",
  ]
}

config("glmark2_scene_ideas_config") {
  include_dirs = [ "src/src/scene-ideas" ]
}

source_set("glmark2_scene_ideas") {
  sources = [
    "src/src/scene-ideas/a.cc",
    "src/src/scene-ideas/characters.h",
    "src/src/scene-ideas/d.cc",
    "src/src/scene-ideas/e.cc",
    "src/src/scene-ideas/i.cc",
    "src/src/scene-ideas/lamp.cc",
    "src/src/scene-ideas/lamp.h",
    "src/src/scene-ideas/logo.cc",
    "src/src/scene-ideas/logo.h",
    "src/src/scene-ideas/m.cc",
    "src/src/scene-ideas/n.cc",
    "src/src/scene-ideas/o.cc",
    "src/src/scene-ideas/s.cc",
    "src/src/scene-ideas/splines.cc",
    "src/src/scene-ideas/splines.h",
    "src/src/scene-ideas/t.cc",
    "src/src/scene-ideas/table.cc",
    "src/src/scene-ideas/table.h",
  ]

  deps = [
    ":glmark2_libmatrix_gles",
    "${angle_root}:includes",
  ]

  configs += [ ":glmark2_gles_config" ]
  public_configs = [ ":glmark2_scene_ideas_config" ]
}

config("glmark2_scene_terrain_config") {
  include_dirs = [ "src/src/scene-terrain" ]
}

source_set("glmark2_scene_terrain") {
  sources = [
    "src/src/scene-terrain/base-renderer.cpp",
    "src/src/scene-terrain/blur-renderer.cpp",
    "src/src/scene-terrain/copy-renderer.cpp",
    "src/src/scene-terrain/luminance-renderer.cpp",
    "src/src/scene-terrain/normal-from-height-renderer.cpp",
    "src/src/scene-terrain/overlay-renderer.cpp",
    "src/src/scene-terrain/renderer-chain.cpp",
    "src/src/scene-terrain/renderer.h",
    "src/src/scene-terrain/simplex-noise-renderer.cpp",
    "src/src/scene-terrain/terrain-renderer.cpp",
    "src/src/scene-terrain/texture-renderer.cpp",
  ]

  configs += [ ":glmark2_gles_config" ]
  public_configs = [ ":glmark2_scene_terrain_config" ]
  deps = [
    ":glmark2_libmatrix_gles",
    "${angle_root}:includes",
  ]
}

source_set("glmark2_gles2") {
  sources = [
    "src/src/benchmark-collection.cpp",
    "src/src/benchmark-collection.h",
    "src/src/benchmark.cpp",
    "src/src/benchmark.h",
    "src/src/canvas.h",
    "src/src/default-benchmarks.h",
    "src/src/gl-headers.cpp",
    "src/src/gl-headers.h",
    "src/src/gl-state.h",
    "src/src/gl-visual-config.cpp",
    "src/src/gl-visual-config.h",
    "src/src/image-reader.cpp",
    "src/src/image-reader.h",
    "src/src/main-loop.cpp",
    "src/src/main-loop.h",
    "src/src/mesh.cpp",
    "src/src/mesh.h",
    "src/src/model.cpp",
    "src/src/model.h",
    "src/src/native-state.h",
    "src/src/options.cpp",
    "src/src/options.h",
    "src/src/scene-buffer.cpp",
    "src/src/scene-build.cpp",
    "src/src/scene-bump.cpp",
    "src/src/scene-clear.cpp",
    "src/src/scene-collection.h",
    "src/src/scene-conditionals.cpp",
    "src/src/scene-default-options.cpp",
    "src/src/scene-desktop.cpp",
    "src/src/scene-effect-2d.cpp",
    "src/src/scene-function.cpp",
    "src/src/scene-grid.cpp",
    "src/src/scene-ideas.cpp",
    "src/src/scene-jellyfish.cpp",
    "src/src/scene-jellyfish.h",
    "src/src/scene-loop.cpp",
    "src/src/scene-pulsar.cpp",
    "src/src/scene-refract.cpp",
    "src/src/scene-refract.h",
    "src/src/scene-shading.cpp",
    "src/src/scene-shadow.cpp",
    "src/src/scene-terrain.cpp",
    "src/src/scene-texture.cpp",
    "src/src/scene.cpp",
    "src/src/scene.h",
    "src/src/text-renderer.cpp",
    "src/src/text-renderer.h",
    "src/src/texture.cpp",
    "src/src/texture.h",
  ]

  public_deps = [
    ":glmark2_header_overrides",
    ":glmark2_libmatrix_gles",
    ":glmark2_scene_ideas",
    ":glmark2_scene_terrain",
    "${angle_libpng_dir}:libpng",
    "${angle_root}:includes",
    "${angle_root}/third_party:jpeg",
  ]
  public_configs = [ ":glmark2_gles_config" ]
}

glmark2_version = "2017.07"

executable("glmark2") {
  sources = [
    "src/src/canvas-generic.cpp",
    "src/src/canvas-generic.h",
    "src/src/gl-state-egl.cpp",
    "src/src/gl-state-egl.h",
    "src/src/main.cpp",
  ]
  deps = [
    ":glmark2_gles2",
    "${angle_root}:libEGL",
    "${angle_root}:libGLESv2",
  ]
  data = [
    "src/data",
  ]

  defines = [
    "GLMARK_VERSION=\"${glmark2_version}\"",
    "GLMARK2_USE_EGL",
    "EGL_EGL_PROTOTYPES=1",
  ]

  if (is_win) {
    defines += [ "GLMARK2_USE_WIN32" ]
    sources += [
      "src/src/native-state-win32.cpp",
      "src/src/native-state-win32.h",
    ]
  }
}
