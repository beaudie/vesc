{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b80a51_35f8aea3",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-12T04:56:21Z",
      "side": 1,
      "message": "Please verify that the contents of `threadIds` are unique.\n\nAlso verify that none of them are equal to InvalidThreadId().",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcbaaa02_227a6ed5",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T13:47:50Z",
      "side": 1,
      "message": "\u003e Please verify that the contents of threadIds are unique.\n\n`set` contains only unique ids and I check `size()` at the end. Is this not enough?\n\n\u003e Also verify that none of them are equal to InvalidThreadId().\n\nOK.",
      "parentUuid": "d7b80a51_35f8aea3",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78a90b31_cbe35daa",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-12T14:13:10Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "bcbaaa02_227a6ed5",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4935609b_3fae4984",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 477,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T17:04:12Z",
      "side": 1,
      "message": "Updated test:\n- increased thread count to 64.\n- checked for InvalidThreadId().\n- explicitly check that thread Id is the same the second time.\n- added comments.",
      "parentUuid": "78a90b31_cbe35daa",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10f969b_29507f5f",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-12T04:56:21Z",
      "side": 1,
      "message": "For fun, I suggest joining only half the threads, then spawn another kThreadCount/2 threads and accumulate their ids in `threadIds` (write over the half that was joined).\n\nThen do the same checks as above again; that ids are unique and valid.\n\nThen join all threads before ending.",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e963684c_50c7b4af",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T13:47:50Z",
      "side": 1,
      "message": "I do not understand.\n\nNew `kThreadCount/2` threads may get reused IDs or may get new IDs, so the resulting `threadIds.size()` may be anywhere in `[kThreadCount..kThreadCount+kThreadCount/2]`.\n\nAdditionally, even if not join other half, they may be already finished, so new threads may reuse IDs of these threads. This is why I have `readyCount \u003d\u003d kThreadCount`, to ensure threads are not running one by one for example.",
      "parentUuid": "c10f969b_29507f5f",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b0aef3_0de0e2f3",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-12T14:13:10Z",
      "side": 1,
      "message": "Right, I was assuming `threadIds` is a `vector` (so you could know which thread ids to discard after joining which threads).\n\n\u003e Additionally, even if not join other half, they may be already finished, so new threads may reuse IDs of these threads\n\nIs that true? Aren\u0027t the threads zombie (and hold on to their resources, like TLS) until joined? It sounds to me like you could just let the threads immediately finish and the test should still pass",
      "parentUuid": "e963684c_50c7b4af",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62b810b2_23fdda8e",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T14:22:46Z",
      "side": 1,
      "message": "\u003e Is that true? Aren\u0027t the threads zombie (and hold on to their resources, like TLS) until joined?\n\nIt is complicated topic. Different platforms may have different behaviors. Maybe TLS slot is released, before moving to a zombie state for example. I do not know... I can check, but I would not rely on this anyway.\n\nAnd it is not imported. I do not want to enfore `GetCurrentThreadId()` to return unique IDs for all not joined threads. It must return unique ID only for the running threads.",
      "parentUuid": "a0b0aef3_0de0e2f3",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c4e0cc0_0db356ba",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-12T14:25:57Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "62b810b2_23fdda8e",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f84ed992_50041aae",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T16:27:44Z",
      "side": 1,
      "message": "Check on Android, Linux and Windows this modified test:\n```\n    for (size_t i \u003d 0; i \u003c kThreadCount; ++i)\n    {\n        readyCount \u003d 0;\n        threads.emplace_back([\u0026]() {\n            std::unique_lock\u003cstd::mutex\u003e lock(mutex);\n            threadIds.insert(angle::GetCurrentThreadId());\n            ++readyCount;\n            condVar.notify_all();\n        });\n        {\n            std::unique_lock\u003cstd::mutex\u003e lock(mutex);\n            condVar.wait(lock, [\u0026]() { return readyCount \u003d\u003d 1; });\n        }\n    }\n```\n\nIt passes with `kThreadCount \u003d\u003d 1000` on Android and Linux 100% of times.\n\nHowever it fails 100% of times on Windows even with `kThreadCount \u003d\u003d 16`.\n```\n..\\..\\src\\common\\system_utils_unittest.cpp(481): error: Expected equality of these values:\n  threadIds.size()\n    Which is: 13\n  kThreadCount\n    Which is: 16\n[  FAILED  ] SystemUtils.GetCurrentThreadId (3 ms)\n```\n\nWhen `kThreadCount \u003d\u003d 1000` almost all runs:\n```\n..\\..\\src\\common\\system_utils_unittest.cpp(481): error: Expected equality of these values:\n  threadIds.size()\n    Which is: 49\n  kThreadCount\n    Which is: 1000\n[  FAILED  ] SystemUtils.GetCurrentThreadId (89 ms)\n```\nBut sometimes:\n```\n..\\..\\src\\common\\system_utils_unittest.cpp(481): error: Expected equality of these values:\n  threadIds.size()\n    Which is: 8\n  kThreadCount\n    Which is: 1000\n[  FAILED  ] SystemUtils.GetCurrentThreadId (99 ms)\n```",
      "parentUuid": "9c4e0cc0_0db356ba",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f75a95f_08266ad2",
        "filename": "src/common/system_utils_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T16:38:35Z",
      "side": 1,
      "message": "And here is result on Windows if remove `readyCount` logic from the original test (this CL).\n\n```\n..\\..\\src\\common\\system_utils_unittest.cpp(484): error: Expected equality of these values:\n  threadIds.size()\n    Which is: 951\n  kThreadCount\n    Which is: 1000\n[  FAILED  ] SystemUtils.GetCurrentThreadId (75 ms)\n```\nI did not reproduced this problem before, I just assumed that this may happen and it did)",
      "parentUuid": "f84ed992_50041aae",
      "revId": "a063956ffdcc03e6cbbf2e6006becf7d0db6d010",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}