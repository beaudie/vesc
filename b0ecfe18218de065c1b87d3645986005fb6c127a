{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48949a1c_bb19d9fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-06T13:42:46Z",
      "side": 1,
      "message": "LGTM, I think this change has the same effect as Brandon\u0027s now.",
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc235f74_8e6cdd14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-06T15:49:54Z",
      "side": 1,
      "message": "Re-LGTM",
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e8d7a8_32fa8c70",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 15
      },
      "lineNbr": 9259,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-06T13:42:46Z",
      "side": 1,
      "message": "nit: suggest you remove these, they shouldn\u0027t ever change from the default.",
      "range": {
        "startLine": 9257,
        "startChar": 0,
        "endLine": 9259,
        "endChar": 73
      },
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f19c5ff_aa579bcf",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 15
      },
      "lineNbr": 9266,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-06T13:42:46Z",
      "side": 1,
      "message": "same here, just wasted instructions, right?",
      "range": {
        "startLine": 9266,
        "startChar": 0,
        "endLine": 9266,
        "endChar": 62
      },
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a22968e_74d0167d",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 15
      },
      "lineNbr": 9306,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-02T15:55:23Z",
      "side": 1,
      "message": "more detail here please - looks like a trick you\u0027re using to get around some more complex checking?",
      "range": {
        "startLine": 9306,
        "startChar": 14,
        "endLine": 9306,
        "endChar": 77
      },
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97bcf676_515354cd",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 15
      },
      "lineNbr": 9306,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2021-04-02T16:10:24Z",
      "side": 1,
      "message": "From the spec\n    [EXT_geometry_shader] Section 10.1.7\n    If a geometry shader is not active, the \"adjacent\" vertices are ignored.\n\nIt\u0027s still valid to draw with these adjacency primitives (used with GS) even though there is no GS attached.",
      "parentUuid": "9a22968e_74d0167d",
      "range": {
        "startLine": 9306,
        "startChar": 14,
        "endLine": 9306,
        "endChar": 77
      },
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2487182_08c997da",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 15
      },
      "lineNbr": 9306,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-02T16:11:23Z",
      "side": 1,
      "message": "The \"trick\" is the extra GS primitive type checking in the block following this one and the validation that occurs in RecordDrawModeError():\n\n    void RecordDrawModeError(const Context *context, PrimitiveMode mode)\n    {\n    ...\n    [[[ The extra validation being referred to here ]]]\n            // Do geometry shader specific validations\n            if (executable-\u003ehasLinkedShaderStage(ShaderType::Geometry))\n            {\n                if (!IsCompatibleDrawModeWithGeometryShader(\n                        mode, executable-\u003egetGeometryShaderInputPrimitiveType()))\n                {\n                    context-\u003evalidationError(GL_INVALID_OPERATION,\n                                             kIncompatibleDrawModeAgainstGeometryShader);\n                    return;\n                }\n            }\n\n    [[[ The extra TS checking referred to by the \"patchOK \u003d false\" comment ]]]\n            if (executable-\u003ehasLinkedTessellationShader() \u0026\u0026 mode !\u003d PrimitiveMode::Patches)\n            {\n                context-\u003evalidationError(GL_INVALID_OPERATION,\n                                         kIncompatibleDrawModeWithTessellationShader);\n                return;\n            }\n\n            if (!executable-\u003ehasLinkedTessellationShader() \u0026\u0026 mode \u003d\u003d PrimitiveMode::Patches)\n            {\n                context-\u003evalidationError(GL_INVALID_OPERATION,\n                                         kIncompatibleDrawModeWithoutTessellationShader);\n                return;\n            }",
      "parentUuid": "9a22968e_74d0167d",
      "range": {
        "startLine": 9306,
        "startChar": 14,
        "endLine": 9306,
        "endChar": 77
      },
      "revId": "b0ecfe18218de065c1b87d3645986005fb6c127a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}