{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "156fbc8a_2e7d0d9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-01-21T16:23:29Z",
      "side": 1,
      "message": "Add Jeff and Mohan from Samsung ACL",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4d7b13d_fa0f40b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T10:07:47Z",
      "side": 1,
      "message": "Hello everyone,\n\nThis is my first draft for adding the first bits towards Wayland support in ANGLE.\nWith this changes you could run simple wayland applications. More complex ones such as weston would not run for some missing extensions. I am going to submit soon another CL adding support for those extensions.\n\nFor the moment, I would like your review on certain areas of this CL as I am not sure whether the approach I choose is good for you:\n\n1. gn changes\n2. DisplayVkWayland::generateConfigs()\n3. OSWindow::New\n\nThis third point in particular requires a unique definition for that function, meaning it requires building ANGLE in a mutually exclusive fashion, either enabling X11 or enabling wayland. Enabling both would trigger a redefinition error.\n\n\nKind regards,\n\nAntonio Caggiano",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb265378_e08f9faf",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-24T14:37:43Z",
      "side": 1,
      "message": "nit: you can combine these two ifs into an if/else",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 153,
        "endChar": 5
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e0330b8_d6d932eb",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T15:51:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb265378_e08f9faf",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 153,
        "endChar": 5
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5877acf_5e6d905e",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "They are not mutually exclusive",
      "parentUuid": "bb265378_e08f9faf",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 153,
        "endChar": 5
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f54aab1d_989c0b8d",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:53:45Z",
      "side": 1,
      "message": "Ack, I wrote that comment while you were updating this.",
      "parentUuid": "c5877acf_5e6d905e",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 153,
        "endChar": 5
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0f37a91_efb0f323",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "With my latest changes to OsWindow::New these two if are now split again, as wayland and x11 are not mutually exclusive.",
      "parentUuid": "f54aab1d_989c0b8d",
      "range": {
        "startLine": 146,
        "startChar": 0,
        "endLine": 153,
        "endChar": 5
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf334f0_741eeafb",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1021,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-24T14:37:43Z",
      "side": 1,
      "message": "nit: place in declare_args at the top",
      "range": {
        "startLine": 1018,
        "startChar": 0,
        "endLine": 1021,
        "endChar": 0
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "775a82eb_4b3fed59",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1021,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T15:51:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbf334f0_741eeafb",
      "range": {
        "startLine": 1018,
        "startChar": 0,
        "endLine": 1021,
        "endChar": 0
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5a872d_482182c0",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-24T14:37:43Z",
      "side": 1,
      "message": "these are system libs or build products from //third_party/wayland? maybe we can make sure they\u0027re available by building them from third party.",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3fbe436_ec5ede36",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T15:51:27Z",
      "side": 1,
      "message": "Ideally we would not need //third_party/wayland at all, as everything should be available in system directories, like X11. I introduced //third_party/wayland cause the debian build image did not have libwayland-egl-backend-dev installed ( https://bugs.chromium.org/p/chromium/issues/detail?id\u003d1281407 )\n\nAnyway, building wayland-client and wayland-egl from sources is not trivial. Are you sure it would be worth it?",
      "parentUuid": "6d5a872d_482182c0",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5766f00_28b741ee",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-26T13:39:01Z",
      "side": 1,
      "message": "When you say not trivial, what do you mean exactly? It seems like you can just use DEPS to include the already-established build products in //third_party/wayland/BUILD.gn. Naively it seems to me that you should be able to just change this from \"libs\" to deps \u003d [ \"//third_party/wayland\" ]",
      "parentUuid": "b3fbe436_ec5ede36",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4254b01f_9a9d065f",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-26T14:32:30Z",
      "side": 1,
      "message": "But there is no BUILD.gn in wayland, and implementing it is not trivial, that is what I meant.",
      "parentUuid": "f5766f00_28b741ee",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "457f3056_2e19f944",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-26T14:54:20Z",
      "side": 1,
      "message": "Ideally we shouldn\u0027t even have wayland as third_party, same way we don\u0027t have x11. It\u0027s ok as a stop-gap measure IMO until wayland libs are properly installed on the bots.",
      "parentUuid": "4254b01f_9a9d065f",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cef47a8_692582be",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-26T15:31:20Z",
      "side": 1,
      "message": "The Wayland build files are here:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/wayland/BUILD.gn\n\nIt looks like they have some modifications in the Chromium Wayland repo:\n\n Modifications:\n - Added wayland_scanner_wrapper.py to generate protocol code automatically.\n - Added \"include/\" include_dirs for the wayland_server target\n\nI guess we don\u0027t actually build \u0026 test with wayland in the current ANGLE CI? It\u0027s not clear to me that the ideal solution is to avoid third_party and use system libs. There\u0027s advantages and disadvantages to hermetic \u0026 using the system. I\u0027m fine with landing this for now, and re-visiting using third_party build if we need either to converge with Chromium (e.g. if ANGLE is built with wayland and linked statically in Chrome, we don\u0027t want to include the wayland libraries twice!) or if we are still shared link and need features in the modified directory.",
      "parentUuid": "457f3056_2e19f944",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ff73a59_c9027b0e",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1026,
      "author": {
        "id": 1125810
      },
      "writtenOn": "2022-01-26T15:33:31Z",
      "side": 1,
      "message": "[Sorry, I keep forgetting to post drafts in Gerrit!]\n\nWe should be able to do the same thing as minigbm/BUILD.gn, which just references the pkg-config file rather than duplicating the entire build system (this is new in gn since the last time I looked, which was admittedly a few years ago!).\n\nChromium needs the wayland_server targets because Exosphere _is_ a Wayland server. As ANGLE isn\u0027t implementing a Wayland server, it doesn\u0027t need all this fancy legwork to generate protocol support code from XML files. It just needs to link to the wayland-client and wayland-egl libs, which come straight from pkg-config.",
      "parentUuid": "4254b01f_9a9d065f",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 3
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e21a4050_74189172",
        "filename": "gni/angle.gni",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "This change doesn\u0027t seem right. We were disabling GL on some platforms, but they are being enabled now. The `\u0026\u0026 !is_fuchsia \u0026\u0026 !angle_is_winuwp \u0026\u0026 !is_ggp \u0026\u0026 !is_win_arm64` part needs to apply to the whole condition",
      "range": {
        "startLine": 137,
        "startChar": 20,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec4babf6_0729d7fe",
        "filename": "gni/angle.gni",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e21a4050_74189172",
      "range": {
        "startLine": 137,
        "startChar": 20,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc7bc5c_c01b0e1b",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "Maybe log the error?",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72f3eb75_e9deda21",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bfc7bc5c_c01b0e1b",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5fda16_5655c5d1",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "Can\u0027t this (and the xcb equivalent) actually detect the window system?",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 15
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d1dd7c8_e42c3b09",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "I introduced a change here and to DisplayVkXcb.cpp. The idea is that if we are able to connect to the relative display, then that would be available. I guess it makes sense.",
      "parentUuid": "1e5fda16_5655c5d1",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 15
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd7ead11_d60f10bc",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-26T11:04:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d1dd7c8_e42c3b09",
      "range": {
        "startLine": 86,
        "startChar": 11,
        "endLine": 86,
        "endChar": 15
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00501598_d1bcb152",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "Why ASSERT? Why not fail like usual?",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a61eeed0_e7e6e5b2",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/DisplayVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00501598_d1bcb152",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9aeaf4e_f5b3e9bf",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/WindowSurfaceVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "nit: camelCase to match the rest of ANGLE",
      "range": {
        "startLine": 21,
        "startChar": 28,
        "endLine": 21,
        "endChar": 42
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a68a62c_b5b3ccfa",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/WindowSurfaceVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9aeaf4e_f5b3e9bf",
      "range": {
        "startLine": 21,
        "startChar": 28,
        "endLine": 21,
        "endChar": 42
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36d03d6d_ba007e41",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/WindowSurfaceVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 32,
        "startChar": 19,
        "endLine": 32,
        "endChar": 29
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42526b6e_3264b823",
        "filename": "src/libANGLE/renderer/vulkan/linux/wayland/WindowSurfaceVkWayland.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36d03d6d_ba007e41",
      "range": {
        "startLine": 32,
        "startChar": 19,
        "endLine": 32,
        "endChar": 29
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcb24157_2772985e",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-24T14:37:43Z",
      "side": 1,
      "message": "nit: comment before each new test",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 6
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f69aa7ed_772b99de",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-24T14:37:43Z",
      "side": 1,
      "message": "nit: suggest you use a more specific name",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 31
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08661d30_9e485f02",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T15:51:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcb24157_2772985e",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 6
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e63e420c_33c7dd8a",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T15:51:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f69aa7ed_772b99de",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 31
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88530615_39c1b660",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "Can you please add another test that draws and reads back, and uses swapBuffers() a few times? Just to make sure any swap-related issues are flushed out.",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3aa87cb_f30154e0",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Great suggestion! I was able to detect a bug in the test where the test was using a different wayland display than the one in the WaylandWindow instance. Not it is fixed and the test is passing.",
      "parentUuid": "88530615_39c1b660",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c74f59ed_9ec8f137",
        "filename": "src/tests/egl_tests/EGLWaylandTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T21:43:33Z",
      "side": 1,
      "message": "🎉",
      "parentUuid": "a3aa87cb_f30154e0",
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e815f8b2_f01dee28",
        "filename": "util/x11/X11Window.cpp",
        "patchSetId": 2
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T15:52:48Z",
      "side": 1,
      "message": "Not a big deal since this is for test, but since the ANGLE build can support X11 and Wayland simultaneously, it\u0027d be nice if the tests could as well. Could the `OSWindow::New()` implementation automatically choose one or the other based on the running window system?",
      "range": {
        "startLine": 721,
        "startChar": 0,
        "endLine": 724,
        "endChar": 1
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d0aecb1_768b0cc0",
        "filename": "util/x11/X11Window.cpp",
        "patchSetId": 2
      },
      "lineNbr": 724,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-01-24T17:20:56Z",
      "side": 1,
      "message": "Yes. I moved both x11 and wayland sources under a linux folder, and introduced a LinuxWindow.cpp which implements OsWindow::New(). According to the availability, either a Wayland window or an X11 window is created. We prefer a wayland window if available, is that ok?",
      "parentUuid": "e815f8b2_f01dee28",
      "range": {
        "startLine": 721,
        "startChar": 0,
        "endLine": 724,
        "endChar": 1
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "087630c9_bcec18bd",
        "filename": "util/x11/X11Window.cpp",
        "patchSetId": 2
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-24T21:43:33Z",
      "side": 1,
      "message": "SGTM. Thanks!",
      "parentUuid": "7d0aecb1_768b0cc0",
      "range": {
        "startLine": 721,
        "startChar": 0,
        "endLine": 724,
        "endChar": 1
      },
      "revId": "cacb1a9c3ac43042a171fd40b35fcf897ec30fc1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}