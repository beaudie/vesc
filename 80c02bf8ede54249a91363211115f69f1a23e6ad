{
  "comments": [
    {
      "key": {
        "uuid": "50dcb82f_514de4b8",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2014-10-07T03:26:58Z",
      "side": 1,
      "message": "I hadn\u0027t fully understood how these changes worked until reviewing https://codereview.chromium.org/619723008/ . Is it worth adding a little more documentation here describing why the API works this way? Something like: \"All of the shader\u0027s variables are described using nested data structures. This is needed in order to disambiguate similar looking types, such as two structs containing the same fields, but in different orders. findInfoByMappedName provides an easy query for users to dive into the data structure and fetch the unique variable instance corresponding to a dereferencing chain of the top-level variable.\"\n\nIf this is too much text feel free to ignore my comment.",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b007b451_b748a726",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-07T12:52:50Z",
      "side": 1,
      "message": "I\u0027d +1 a suggestion for some commenting",
      "parentUuid": "50dcb82f_514de4b8",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0b4ccdf_9a9cedfe",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-07T12:52:50Z",
      "side": 1,
      "message": "Would strongly suggest you leave this as unsigned it. I\u0027d suspect there would be some warnings in ANGLE that would generate bot failures, and the API does not specify this is a signed int type.",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 9
      },
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0aed491_3ea591bd",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2014-10-07T17:25:51Z",
      "side": 1,
      "message": "I don\u0027t fully understand what you mean by the API does not specify this as a signed int type.\n\nLook at https://www.khronos.org/opengles/sdk/docs/man/xhtml/glGetActiveAttrib.xml and https://www.opengl.org/sdk/docs/man/html/glGetActiveUniform.xhtml, both define size as GLint.  I think that should be treated as standard and be followed everywhere to avoid unnecessary casting.",
      "parentUuid": "f0b4ccdf_9a9cedfe",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0aed491_beb361de",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2014-10-07T17:35:27Z",
      "side": 1,
      "message": "Shannon: Jamie and I would like your input here.",
      "parentUuid": "b0aed491_3ea591bd",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b007b451_7ab2a6de",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-07T17:41:58Z",
      "side": 1,
      "message": "To clarify, the GL API defines queries and various things they can query. In this case, there\u0027s a few queries that return the array size of a shader variable: GetActiveUniform, GetActiveUniformsiv. The value, UNIFORM_SIZE, has a type that depends on the uniform you\u0027re querying, and if it\u0027s an array. I don\u0027t see any language in the spec that defines it to be a signed 32 bit int... in fact it seems ambiguous. (See pg 63 of the ES3 spec). GL has a method for doing implicit conversions (you can query float values with glGetInteger, etc) so I don\u0027t think there\u0027s any spec reason for this to be int.. merely coding convenience. And I think there\u0027s a cost to ANGLE for unsigned int-\u003eint, in terms of hidden warnings and just coding convention in libGLESv2.",
      "parentUuid": "b0aed491_beb361de",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0d0a811_30f696f5",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2014-10-07T02:52:36Z",
      "side": 1,
      "message": "Also define operator!\u003d in terms of operator\u003d\u003d (returning the negation of operator\u003d\u003d), here and throughout.",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f88089_2012b0fb",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-07T12:52:50Z",
      "side": 1,
      "message": "+1 to this",
      "parentUuid": "d0d0a811_30f696f5",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50dcb82f_d1801487",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 4
      },
      "lineNbr": 112,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2014-10-07T02:52:36Z",
      "side": 1,
      "message": "typo: fieldss",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50dcb82f_11127cc5",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2014-10-07T02:52:36Z",
      "side": 1,
      "message": "This logic is confusingly structured in order to use operator\u003d\u003d. Could you define operator!\u003d for these types and use it here instead?",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f88089_400d3cda",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-10-07T12:52:50Z",
      "side": 1,
      "message": "+1, seems sensible",
      "parentUuid": "50dcb82f_11127cc5",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50dcb82f_b131c861",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 4
      },
      "lineNbr": 138,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2014-10-07T02:52:36Z",
      "side": 1,
      "message": "Could you use a more descriptive name for these variables? The \"tmp\" prefix is confusing.",
      "revId": "80c02bf8ede54249a91363211115f69f1a23e6ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}