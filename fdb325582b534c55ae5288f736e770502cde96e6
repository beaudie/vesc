{
  "comments": [
    {
      "key": {
        "uuid": "6bb630b1_ca7fa9f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Not as complicated as I feared! Error-prone though.",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45559e0_1582e1c6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 32
      },
      "lineNbr": 0,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2020-08-28T15:31:18Z",
      "side": 1,
      "message": "FYI I\u0027m running some perf numbers w/ this CL and noticed that Aztec ruins has some major corruption with colors being way off and/or washed out.",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22d9f484_b22d4f9d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1286,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Couldn\u0027t this directly be `id`?",
      "range": {
        "startLine": 1286,
        "startChar": 72,
        "endLine": 1286,
        "endChar": 79
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f39507_43913101",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1286,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "No, I tried that but the spirv validator complains that the types don\u0027t match.\nUsing an untyped temporary works around that issue.",
      "parentUuid": "22d9f484_b22d4f9d",
      "range": {
        "startLine": 1286,
        "startChar": 72,
        "endLine": 1286,
        "endChar": 79
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46d8298e_c6208529",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Shouldn\u0027t DecorationLocation also get this treatment?\n\nYou could make this case similar to the others, then do this below automatically for every decoration of the varying:\n\n    // Copy the decoration declaration and modify it.\n    const size_t instructionOffset \u003d copyInstruction(instruction, wordCount);\n    (*mSpirvBlobOut)[instructionOffset + kDecorationValueIndex] \u003d newDecorationValue;\n    if (info-\u003ecastPrecision)\n    {\n        // Change the id to replacement variable\n        ASSERT(info-\u003efixedVaryingId !\u003d ShaderInterfaceVariableInfo::kInvalid);\n        (*mSpirvBlobOut)[instructionOffset + kIdIndex] \u003d info-\u003efixedVaryingId;\n    }",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc832cec_f1541bb4",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "The location decoration has other mods that apply and is done at the end of the function.",
      "parentUuid": "46d8298e_c6208529",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "359384be_17838f21",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T14:48:11Z",
      "side": 1,
      "message": "Sorry, but I don\u0027t notice the id of the location decoration being changed. Where is that exactly?",
      "parentUuid": "cc832cec_f1541bb4",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11b0903d_a6b171f2",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-02T16:36:18Z",
      "side": 1,
      "message": "We set the new decoration value (if it\u0027s changed) at line 1493.\nIf it\u0027s a location decoration and it requires cast behavior we change it\u0027s ID at 1506.",
      "parentUuid": "359384be_17838f21",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87d99b80_a155e6f8",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-02T16:47:05Z",
      "side": 1,
      "message": "Oh, I missed the change at line 1506! Could you change the comment there to say something like this?\n\n    // Change the id of the location decoration to replacement variable",
      "parentUuid": "11b0903d_a6b171f2",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8e95654_2f923665",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1472,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-02T20:33:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87d99b80_a155e6f8",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "482630ce_bf83e771",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1515,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Am I right to understand this is only here so that load/store automatically cast the precision? A comment would be good.",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e6a1e0a_01820ba3",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1515,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "The fixedVaryingId is always \"mediump\"/ relaxed precision so have to add that decoration.\nUpdated the comment.",
      "parentUuid": "482630ce_bf83e771",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5831e20d_b3721172",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1525,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Need to modify the id here too.\n\nPlease write a test that uses a component layout qualifier to catch this bug.",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccacd58a_f1a33112",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1525,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "I don\u0027t think this applies here. We only care about varyings between shader stages.\nlayout qualifiers are used for inputs \u0026 outputs to the shader (e.g. uniforms, primitives (e.g. position, color, etc.).\nWhen I tried a test that used the layout location I got:\nERROR: 0:4: \u0027location\u0027 : invalid layout qualifier: only valid on program inputs and outputs\nAssuming that was the type of layout component you meant.",
      "parentUuid": "5831e20d_b3721172",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3daf57cd_95adc367",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1525,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-24T20:06:24Z",
      "side": 1,
      "message": "Looks like I didn\u0027t read your reply accurately.\n\nThe `component` layout qualifier is what ANGLE uses to pack varyings. For example, if there are two vec2 varyings, they will be placed in the same `location`, but one would start at `component \u003d 0` and another at `component \u003d 2`. So you *do* need to change the id for the DecorationComponent instruction too.\n\nI\u0027ll open a bug.",
      "parentUuid": "ccacd58a_f1a33112",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3802a2ee_3a06284e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1703,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Please update this comment.",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e017ced_48704d21",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1703,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3802a2ee_3a06284e",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0519ca03_80e2d635",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1750,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Same here. Can it directly load into info-\u003efixedVaryingId?",
      "range": {
        "startLine": 1750,
        "startChar": 54,
        "endLine": 1750,
        "endChar": 61
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aca8ac9a_22e4ae09",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1750,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "As above, no the types don\u0027t match. Have to use a temp to get things to work.",
      "parentUuid": "0519ca03_80e2d635",
      "range": {
        "startLine": 1750,
        "startChar": 54,
        "endLine": 1750,
        "endChar": 61
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dbdad12_24f761ca",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1792,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Your Doc says you had issues with making the variable global. Is that outdated?",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6c67976_61752fa8",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 32
      },
      "lineNbr": 1792,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "I\u0027ll need to update the doc based on my learnings.\nWhen I was experimenting I tried various changes to the GLSL such as changing the variable from an input/output to a global and that caused a bunch of stuff to be generated in the spirv output, thus my comment about complexity.\nStudying the spirv doc it appears that spirv does allow a variable to be global (spv::StorageClassPrivate) without adding other complexities. So, it appears that I can simply change the storage class to private and the variable becomes a global.",
      "parentUuid": "1dbdad12_24f761ca",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9b255ed_718f407c",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 32
      },
      "lineNbr": 89,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Please avoid storing SPIR-V ids here. Make a (std::vector) map in SpirvTransformer (like the other m*ById maps there) for these things.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a07bf0a8_1120e24d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 32
      },
      "lineNbr": 89,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-28T17:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9b255ed_718f407c",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 43
      },
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f640d66_943f05b0",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 32
      },
      "lineNbr": 6092,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "Thanks for the tests. Please add lowp-highp and lowp-mediump variants too!",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2517ff4a_41f2231b",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 32
      },
      "lineNbr": 6092,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T14:22:42Z",
      "side": 1,
      "message": "lowp \u0026 mediump are the same to Vulkan.",
      "parentUuid": "2f640d66_943f05b0",
      "revId": "fdb325582b534c55ae5288f736e770502cde96e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}