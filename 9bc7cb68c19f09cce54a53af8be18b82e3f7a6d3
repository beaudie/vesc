{
  "comments": [
    {
      "key": {
        "uuid": "c747acbf_f6e0fe8b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 17,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: new bug comment syntax is \n\nBug:\u003cspace\u003echromium:######\n\nold syntax was \n\nBUG\u003dchromium:######",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 17,
        "endChar": 19
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac2bde7a_683d8794",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 14
      },
      "lineNbr": 321,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: see later comment. Should be EXT.",
      "range": {
        "startLine": 321,
        "startChar": 8,
        "endLine": 321,
        "endChar": 31
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e4a42e9_5230bcd0",
        "filename": "src/compiler/translator/BaseTypes.h",
        "patchSetId": 14
      },
      "lineNbr": 598,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit",
      "range": {
        "startLine": 598,
        "startChar": 19,
        "endLine": 598,
        "endChar": 42
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2460089_58557495",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 14
      },
      "lineNbr": 590,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit here",
      "range": {
        "startLine": 590,
        "startChar": 59,
        "endLine": 590,
        "endChar": 82
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc0126ab_86ce4067",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 14
      },
      "lineNbr": 592,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: convert to bool explicitly (!\u003d 0, \u003e 0)",
      "range": {
        "startLine": 592,
        "startChar": 12,
        "endLine": 592,
        "endChar": 50
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55a39be_2a7454d7",
        "filename": "src/compiler/translator/ExtensionBehavior.h",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit here",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 27
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56549813_865357ce",
        "filename": "src/compiler/translator/TranslatorESSL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 177,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "you have access to \u0027compileOptions\u0027 here. Can you ASSERT the workaround is enabled?",
      "range": {
        "startLine": 177,
        "startChar": 16,
        "endLine": 177,
        "endChar": 66
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "425f8818_e59b13d1",
        "filename": "src/compiler/translator/builtin_variables.json",
        "patchSetId": 14
      },
      "lineNbr": 676,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit here",
      "range": {
        "startLine": 676,
        "startChar": 13,
        "endLine": 676,
        "endChar": 33
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e13889_96d54e36",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: same",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 27
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21cb0d17_8e39b20a",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.cpp",
        "patchSetId": 14
      },
      "lineNbr": 28,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: can you just delete the \" \u003d ImmutableString\" and make this a single constructor?",
      "range": {
        "startLine": 28,
        "startChar": 32,
        "endLine": 28,
        "endChar": 88
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e0d627b_e4c6d130",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.cpp",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "did you try putting in gl_DrawID into the \"name\" part and using mappedName as the internal name here? Did that not work out?",
      "range": {
        "startLine": 70,
        "startChar": 33,
        "endLine": 70,
        "endChar": 62
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c63d292_11da94f3",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.cpp",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1306173
      },
      "writtenOn": "2018-10-24T18:02:53Z",
      "side": 1,
      "message": "It could work, but there are several places where I ran into issues with doing that. ProgramLinkedResources.cpp, ProgramD3D.cpp, TranslatorVulkan.cpp, have different behavior if ShaderVariable::isBuiltin() \u003d\u003d true.\n\nI believe this is because gl_DepthRange is a uniform that is also added to the shaders, but we do /not/ want it to have a uniform location whereas we /do/ want gl_DrawID to have one because we need to set it in the validating command decoder.\n\nisBuiltIn() checks if the first characters are \"gl_\".\nI could add an `isEmulated` boolean to the ShaderVariable struct, but that felt hacky?",
      "parentUuid": "2e0d627b_e4c6d130",
      "range": {
        "startLine": 70,
        "startChar": 33,
        "endLine": 70,
        "endChar": 62
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c333bef_3132ef3c",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.cpp",
        "patchSetId": 14
      },
      "lineNbr": 93,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: closing namespace comment",
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1740c19b_b4abab13",
        "filename": "src/compiler/translator/tree_ops/EmulateGLDrawID.h",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: no (c), just 2018 as per style guide\n\nhttps://chromium.googlesource.com/angle/angle/+/master/doc/CodingStandard.md#comments",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00967e43_157351c0",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "ANGLE can\u0027t actually implement WebGL APIs or specs directly. EXT_multi_draw_arrays exists already that we could use. It\u0027s written against GLES 1.1 but just glancing at it maybe we could expose it on GLES 2.0+ contexts without a problem.\n\nFor reference: https://opengles.gpuinfo.org/listreports.php?extension\u003dGL_EXT_multi_draw_arrays",
      "range": {
        "startLine": 454,
        "startChar": 9,
        "endLine": 454,
        "endChar": 24
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa8bf78a_d8ff43b2",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 1306173
      },
      "writtenOn": "2018-10-24T18:02:53Z",
      "side": 1,
      "message": "So here\u0027s our thinking about what we should name things; we weren\u0027t really sure what to do so perhaps you could help us understand more.\n\nThe issue is that yes, we definitely could implement EXT_multi_draw_arrays, but EXT_multi_draw_arrays does not expose gl_DrawID. For simplicity, we want WEBGL_multi_draw_arrays to include the Multi* entrypoints as well as the new builtin.\n\nWe thought about implementing EXT_multi_draw_arrays and another extension \"ANGLE_draw_id\" or something like that which would add gl_DrawID to Multi* commands. Then in Chrome, enabling WEBGL_multi_draw_arrays would actually enable both of these.\n\nDoing so feels messy because the content creator would either have to specify \"WEBGL_multi_draw_arrays\" in their JS code and \"ANGLE_draw_id\" in their shader. Alternatively we would also have to translate all of the extension directives in ANGLE.\n\nFurthermore, Ken feels that it would be very impactful for clients to also have glMultiDrawArraysInstanced, glMultiDrawElementsInstanced, glMultiDrawElementsInstancedBaseVertex variants.. which would also include gl_InstanceID (we already have that so I don\u0027t think that\u0027s an issue) and gl_BaseVertex.\n\nSo with all these extra entrypoints and builtins which we may emulate, we thought it better to contain them all in a single extension. I am quite unfamiliar regarding how things should be spec\u0027ed. What do you suggest we do here?",
      "parentUuid": "00967e43_157351c0",
      "range": {
        "startLine": 454,
        "startChar": 9,
        "endLine": 454,
        "endChar": 24
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f710b6c_2aa62887",
        "filename": "src/tests/compiler_tests/WEBGL_multi_draw_arrays_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "file would be renamed. But can just call it MultiDrawArraysTest.cpp",
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8080c7b_cdd61834",
        "filename": "src/tests/compiler_tests/WEBGL_multi_draw_arrays_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "same nit here",
      "range": {
        "startLine": 2,
        "startChar": 12,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4a19783_9c9ea9fd",
        "filename": "src/tests/compiler_tests/WEBGL_multi_draw_arrays_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-24T17:19:49Z",
      "side": 1,
      "message": "nit: comment before every test",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 6
      },
      "revId": "9bc7cb68c19f09cce54a53af8be18b82e3f7a6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}