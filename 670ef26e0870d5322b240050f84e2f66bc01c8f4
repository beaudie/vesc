{
  "comments": [
    {
      "key": {
        "uuid": "534a1d43_55e47ecd",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 925,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2015-07-06T22:21:46Z",
      "side": 1,
      "message": "Have you measured the startup time and shown that these lazily-taken case statements actually defer the initialization costs of these static objects?",
      "range": {
        "startLine": 925,
        "startChar": 12,
        "endLine": 925,
        "endChar": 18
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "534a1d43_1856ad52",
        "filename": "src/libANGLE/formatutils.cpp",
        "patchSetId": 8
      },
      "lineNbr": 925,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-07-07T14:30:56Z",
      "side": 1,
      "message": "In my local ANGLE, I added a debug print in every invocation of the VertexFormat constructor. It never gets called when running the SimpleTexture2D sample, and gets called once per use of the VertexFormatType in the end2end_tests. So yes, I can confirm they get loaded lazily.",
      "parentUuid": "534a1d43_55e47ecd",
      "range": {
        "startLine": 925,
        "startChar": 12,
        "endLine": 925,
        "endChar": 18
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "534a1d43_d94264f3",
        "filename": "src/libANGLE/formatutils.h",
        "patchSetId": 8
      },
      "lineNbr": 176,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-08T14:50:30Z",
      "side": 1,
      "message": "This is here as a sanity check? It may be useful to copy them eventually, we could cache the struct in the attribute when it is set instead of looking it up often.",
      "range": {
        "startLine": 176,
        "startChar": 22,
        "endLine": 176,
        "endChar": 40
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f356b1ec_5b62e60c",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2053,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-08T14:50:30Z",
      "side": 1,
      "message": "nit: this formatting seems off.",
      "range": {
        "startLine": 2053,
        "startChar": 16,
        "endLine": 2053,
        "endChar": 72
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f80dae2c_2ca78798",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.h",
        "patchSetId": 8
      },
      "lineNbr": 150,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-08T14:50:30Z",
      "side": 1,
      "message": "nit: rename to signatureOut to match implementation.",
      "range": {
        "startLine": 150,
        "startChar": 44,
        "endLine": 150,
        "endChar": 53
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "135425e3_739b5ac1",
        "filename": "src/libANGLE/renderer/d3d/RendererD3D.cpp",
        "patchSetId": 8
      },
      "lineNbr": 371,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2015-07-06T22:21:46Z",
      "side": 1,
      "message": "Is the call to the new updateCachedInputLayout cheaper than the previous code calling GetInputLayout and passing it to applyShaders?\n\nIs there a possibility of short-circuiting any of the work if the state of all of the used vertex attributes is the same as the last time the program was used?",
      "range": {
        "startLine": 371,
        "startChar": 26,
        "endLine": 371,
        "endChar": 33
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "534a1d43_58503554",
        "filename": "src/libANGLE/renderer/d3d/RendererD3D.cpp",
        "patchSetId": 8
      },
      "lineNbr": 371,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-07-07T14:30:56Z",
      "side": 1,
      "message": "Yes, it\u0027s cheaper because it doesn\u0027t call the VertexFormat constructor \"gl::MAX_VERTEX_ATTRIBS\" times, and re-uses the storage object.\nAnd yes, The \"dream\" is when I complete my dirty bits design (recall my design doc from last quarter) we can update the cached input layout only when the gl state changes appropriately.",
      "parentUuid": "135425e3_739b5ac1",
      "range": {
        "startLine": 371,
        "startChar": 26,
        "endLine": 371,
        "endChar": 33
      },
      "revId": "670ef26e0870d5322b240050f84e2f66bc01c8f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}