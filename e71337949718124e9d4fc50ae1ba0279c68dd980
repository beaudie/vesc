{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ab40a127_fc3f4b2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-20T01:45:46Z",
      "side": 1,
      "message": "Please add tests:\n\n- Setup buffer\n- One draw (ensures conversion done)\n- Multiple updates to the buffer\n- Draw again (ensure all the buffer is correct)\n\nNeed at least 2 tests, one where the updates are to separate regions, another to overlapping regions.",
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac5ae12b_f5ef3b7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-21T20:30:11Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/angle/angle/+/5805244",
      "parentUuid": "ab40a127_fc3f4b2d",
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70c35a8c_c6edb61c",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 560,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-20T01:45:46Z",
      "side": 1,
      "message": "In practice, how far apart are these updates to the vertex buffer? If there are multiple updates to the vertex buffers, there will be a barrier between each conversion because of `convertVertexBuffer`. But that barrier can\u0027t just be removed because the updates here may be overlapping.\n\nWhat I\u0027m thinking is, would it hurt to simplify the code to:\n\n- Instead of tracking multiple ranges, track min(all lo offsets) to max(all hi offsets)\n- Instead of separate bool for entirely dirty, set the range to (0, size).\n- Unify the conversion paths here so they only work with a single range\n\nIn particular, the last step also helps reduce the chance of corner case bugs.",
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23b07cd6_aa3583f0",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 560,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-20T23:24:49Z",
      "side": 1,
      "message": "Lets make this CL does exactly what you described: merge the dirty ranges since this is simpler implementation. I will do the comparison and fire up a separate CL to do individual dirtyRange if needed. We maybe able to just live with simpler one given that QComm will fix the unsupported format bug soon. This conversion code path will becomes less critical after their fix. But this CL is still an improvement.",
      "parentUuid": "70c35a8c_c6edb61c",
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82b46ac5_4b51cd4a",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 625,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-20T01:45:46Z",
      "side": 1,
      "message": "What if stride is 0?",
      "range": {
        "startLine": 625,
        "startChar": 74,
        "endLine": 625,
        "endChar": 83
      },
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a721857_b3c64f2d",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 625,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-20T23:24:49Z",
      "side": 1,
      "message": "THis will never be 0. I have changed the stride in cacheKey always non zero (see line 882 bellow. Added an assertion here.",
      "parentUuid": "82b46ac5_4b51cd4a",
      "range": {
        "startLine": 625,
        "startChar": 74,
        "endLine": 625,
        "endChar": 83
      },
      "revId": "e71337949718124e9d4fc50ae1ba0279c68dd980",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}