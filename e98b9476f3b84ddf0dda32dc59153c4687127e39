{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f67f3cc5_6091c007",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "Coming together nicely!",
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7ec83bc_6f66a2dd",
        "filename": "src/libANGLE/CLContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 357,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "Please move to the body of this function instead, and avoid the lambda. It\u0027s simpler too:\n\n```suggestion\n      mImpl(nullptr),\n      mDevices(std::move(devices))\n{\n      platform.getImpl().createContext(*this, devices, userSync, mImpl);\n}\n```",
      "range": {
        "startLine": 350,
        "startChar": 0,
        "endLine": 357,
        "endChar": 2
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79183e25_a23dac24",
        "filename": "src/libANGLE/CLContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto about moving to the body of the function.",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 380,
        "endChar": 10
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1a1f324_53703929",
        "filename": "src/libANGLE/CLEvent.cpp",
        "patchSetId": 5
      },
      "lineNbr": 144,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto about moving to the body of the function",
      "range": {
        "startLine": 140,
        "startChar": 57,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4d5f6b8_0e4f0fa8",
        "filename": "src/libANGLE/CLKernel.cpp",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto!",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 244,
        "endChar": 1
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac96d238_f47c7b18",
        "filename": "src/libANGLE/CLMemory.cpp",
        "patchSetId": 5
      },
      "lineNbr": 171,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto here and below",
      "range": {
        "startLine": 166,
        "startChar": 0,
        "endLine": 171,
        "endChar": 11
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "063b4ffa_60b7377f",
        "filename": "src/libANGLE/CLProgram.cpp",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto here and below",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 216,
        "endChar": 11
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd59f2f0_8dca5912",
        "filename": "src/libANGLE/CLSampler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 102,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 98,
        "startChar": 1,
        "endLine": 102,
        "endChar": 10
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bef2681_9ddcffc9",
        "filename": "src/libANGLE/renderer/CLMemoryImpl.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "Per our style, we pass either `const Type \u0026var` or `Type *varOut`. Passing by pointer really helps make it clear that the called function may modify the passed in argument.\n\nSo these would take `size_t *sizeOut` and `CLMemoryImpl::Ptr *subBufferOut`. I hate to be annoying here, but would you please change the objects you\u0027re passing now (instead of returning) to `* ...Out` instead to keep the code consistent?\n\n(I realize the previous author did not follow this rule, which is unfortunate, but let\u0027s at least not add to it)",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 29,
        "endChar": 74
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6aefe96_4366b517",
        "filename": "src/libANGLE/renderer/cl/CLContextCL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "Same comment as previous CL about using a local variable like:\n```suggestion\n            mNative, nativeDevice, commandQueue.getProperties().get(), \u0026errorCode);\n        ANGLE_CL_TRY(errorCode);\n```\n\nMaybe the `ANGLE_CL_TRY` would be after the `Ptr()` call? I\u0027m not sure what the logic should be (fail before creating the object or after, like it is now).",
      "range": {
        "startLine": 90,
        "startChar": 71,
        "endLine": 90,
        "endChar": 87
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fecf0f15_3f4811cf",
        "filename": "src/libANGLE/renderer/cl/CLContextCL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "ditto throughout this file",
      "range": {
        "startLine": 98,
        "startChar": 47,
        "endLine": 98,
        "endChar": 62
      },
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc9fdf6_b34ae3c9",
        "filename": "src/libANGLE/renderer/cl/CLKernelCL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-12-04T18:55:50Z",
      "side": 1,
      "message": "nit: If you return `angle::Result` here, you can use `ANGLE_CL_TRY` inside and `ANGLE_TRY` at call site to simplify things a bit.\n\nSame with the other helpers above. Could be a follow up CL.",
      "revId": "e98b9476f3b84ddf0dda32dc59153c4687127e39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}