{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a0839e15_aea80a5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-04-21T22:06:48Z",
      "side": 1,
      "message": "Tim, great to see our first addition to the resource tracking scheme.",
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03453327_f651e298",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 934,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-04-21T22:06:48Z",
      "side": 1,
      "message": "The intent is for more types to be added to MaybeResetResources if this can be added there instead?",
      "range": {
        "startLine": 934,
        "startChar": 5,
        "endLine": 934,
        "endChar": 26
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17131679_b9b25cc9",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 934,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "MaybeResetResources() resets ResourceIDTypes, and GLsync is not one of those.   Instead, GLsync is a pointer to an opaque type rather than an int (ID), so it can\u0027t be included as part of an enum.",
      "parentUuid": "03453327_f651e298",
      "range": {
        "startLine": 934,
        "startChar": 5,
        "endLine": 934,
        "endChar": 26
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b09c97dd_3e6d216e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1084,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-20T19:30:12Z",
      "side": 1,
      "message": "nit: instead of adding this new function, please add a general reset writer function as a place for reset calls that don\u0027t fit in MaybeResetResources.",
      "range": {
        "startLine": 1084,
        "startChar": 8,
        "endLine": 1084,
        "endChar": 29
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eab03d63_29185c24",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1084,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "Done.\n\nI went with ResetOpaqueTypeObjects(), but let me know if there\u0027s a better name for it.",
      "parentUuid": "b09c97dd_3e6d216e",
      "range": {
        "startLine": 1084,
        "startChar": 8,
        "endLine": 1084,
        "endChar": 29
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1345df28_1883d95d",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1084,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-04-22T16:53:53Z",
      "side": 1,
      "message": "If you don\u0027t mind, please keep the \"Maybe\" nomenclature so this function fits well with the rest of of the file.",
      "parentUuid": "eab03d63_29185c24",
      "range": {
        "startLine": 1084,
        "startChar": 8,
        "endLine": 1084,
        "endChar": 29
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c0df84e_3216c94b",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1084,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T17:35:49Z",
      "side": 1,
      "message": "Done, to follow conventions.\n\nHowever, I disagree with the \"Maybe\" naming in general.   We are always doing the work, and the \"maybe\" qualification doesn\u0027t add anything useful for the reader.   Rather, it adds unnecessary ambiguity since all of the \"maybe\" functions will always do all of the required work (often without returning any status that indicates if it did it or not, again making the \"maybe\" useless).   In my opinion, just because there isn\u0027t any work to do (i.e., the list is empty) doesn\u0027t justify the \"maybe\" since the caller doesn\u0027t care - they still have to make the call in the first place and always expect that all of the work will be done, including no work.\n\nTaking the \"maybe\" naming to its logical conclusion, most functions should be prefixed with \"maybe\", since they can all return without doing anything: glMaybeDrawArrays (scissor is 0, nothing to draw), MaybeReset (all of the lists are empty, nothing to clear()), etc.",
      "parentUuid": "1345df28_1883d95d",
      "range": {
        "startLine": 1084,
        "startChar": 8,
        "endLine": 1084,
        "endChar": 29
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2df63539_a3970243",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-20T19:30:12Z",
      "side": 1,
      "message": "nit: can you use the same naming scheme as buffers?\n\nmNewFenceSyncs / getNewFenceSycs / etc.",
      "range": {
        "startLine": 264,
        "startChar": 18,
        "endLine": 264,
        "endChar": 44
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b98a8585_393f4085",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 264,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "Done.\n\n\"Starting\" is more appropriate here, so I went with that since it better matches how it\u0027s used while also matching mStartingBuffers.",
      "parentUuid": "2df63539_a3970243",
      "range": {
        "startLine": 264,
        "startChar": 18,
        "endLine": 264,
        "endChar": 44
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee93e6c0_84efdc59",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-04-21T22:06:48Z",
      "side": 1,
      "message": "Same as Jamie\u0027s comments above, no need to mention MEC in variable names.  How about mStartingFenceSyncs?",
      "range": {
        "startLine": 300,
        "startChar": 17,
        "endLine": 300,
        "endChar": 41
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f0307c1_36584bd5",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee93e6c0_84efdc59",
      "range": {
        "startLine": 300,
        "startChar": 17,
        "endLine": 300,
        "endChar": 41
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f365aed_bdcb4d25",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-20T19:30:12Z",
      "side": 1,
      "message": "nit: make private.",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 357,
        "endChar": 57
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be6134ab_14f731a6",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f365aed_bdcb4d25",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 357,
        "endChar": 57
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0409e3c_1b19fabe",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 358,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-20T19:30:12Z",
      "side": 1,
      "message": "does this even need to be public?",
      "range": {
        "startLine": 358,
        "startChar": 9,
        "endLine": 358,
        "endChar": 24
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa5b18f0_a30a6f65",
        "filename": "src/libANGLE/capture/FrameCapture.h",
        "patchSetId": 3
      },
      "lineNbr": 358,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-22T16:34:41Z",
      "side": 1,
      "message": "Not yet, though that may change when more functionality is moved from FrameCapture to FrameCaptureShared as part of the multi-context stuff.   It\u0027s easy enough to move if that\u0027s the case though.",
      "parentUuid": "e0409e3c_1b19fabe",
      "range": {
        "startLine": 358,
        "startChar": 9,
        "endLine": 358,
        "endChar": 24
      },
      "revId": "a296415aac63843fd708fc2d3199008587ac3689",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}