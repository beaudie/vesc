{
  "comments": [
    {
      "key": {
        "uuid": "c23dcecd_0c1fc138",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 125,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-17T14:16:16Z",
      "side": 1,
      "message": "Shouldn\u0027t this be the compression? Or is the existence of debug.angle.capture.compression sufficient to enable compression?\nE.g. if debug.angle.capture.compression is 0, want ANGLE_CAPTURE_COMPRESSION environment variable to be 0, likewise for 1.",
      "range": {
        "startLine": 125,
        "startChar": 50,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d177778_b8a73151",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 125,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-03-17T14:40:52Z",
      "side": 1,
      "message": "The last parameter is \"overwrite\", so I think we want \"1\" for each setenv.",
      "parentUuid": "c23dcecd_0c1fc138",
      "range": {
        "startLine": 125,
        "startChar": 50,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbe4042_fd2f15ad",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 125,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8d177778_b8a73151",
      "range": {
        "startLine": 125,
        "startChar": 50,
        "endLine": 125,
        "endChar": 51
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15b8c735_434f9294",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 643,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-17T14:16:16Z",
      "side": 1,
      "message": "Does 2X guarantee that compress cannot overrun the buffer?",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e3f7018_7aebf863",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 643,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Yeah. The example used 1.1. So I went for the easiest integer math. Left a comment.",
      "parentUuid": "15b8c735_434f9294",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1baf7449_d7486823",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 654,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-03-17T14:40:52Z",
      "side": 1,
      "message": "Can you add a note describing why we\u0027re writing the uncompressed size with the compressed data.  It is a bit of a handshake.  Tempting to also track if this ever exceeds 32-bits.",
      "range": {
        "startLine": 654,
        "startChar": 59,
        "endLine": 654,
        "endChar": 75
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f3b5dab_de05d6fd",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 654,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Done. Note that 64-bit is a bit complicated to support. So I added a version identifier.",
      "parentUuid": "1baf7449_d7486823",
      "range": {
        "startLine": 654,
        "startChar": 59,
        "endLine": 654,
        "endChar": 75
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bb05708_03e0b4bd",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 659,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-17T14:16:16Z",
      "side": 1,
      "message": "Shouldn\u0027t we store a compress flag as well, that way reader knows to decompress or not?",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ef2599_05f1136e",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 659,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Good thought. I made this into a variable in the replay header.",
      "parentUuid": "5bb05708_03e0b4bd",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2e2586c_00584921",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 817,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-17T14:16:16Z",
      "side": 1,
      "message": "Where does SetBinaryDataDecompressCallback get called?",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a318f8d3_4fdf5ef5",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 10
      },
      "lineNbr": 817,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Inside the test harness. So we don\u0027t have to embed zlib into the replay cpp. We\u0027ll need to regenerate the traces first.",
      "parentUuid": "e2e2586c_00584921",
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "121819da_d09cb12c",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-03-17T14:40:52Z",
      "side": 1,
      "message": "Probably worth tying this back to a constant shared by capture, in case someone decides to expand it to 64-bit size.  Or at least leave a note and print out some info during capture if data exceeds the trackable size.",
      "range": {
        "startLine": 42,
        "startChar": 36,
        "endLine": 42,
        "endChar": 44
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a52fff83_57c9effe",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 42,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "It\u0027s kind of seriously annoying to figure out 64-bit file I/O cross platform so I left this for a future person\u0027s problem. For now the version qualifier should guard against any shenanigans.\n\nAlso I do agree having a proper API and a header for this binary data is a good long term thing. Best to do at a later step I think.",
      "parentUuid": "121819da_d09cb12c",
      "range": {
        "startLine": 42,
        "startChar": 36,
        "endLine": 42,
        "endChar": 44
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73eda81_05ffd39a",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-03-17T14:40:52Z",
      "side": 1,
      "message": "std::vector instead?",
      "range": {
        "startLine": 48,
        "startChar": 32,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "337ddba6_0a299143",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T23:00:41Z",
      "side": 1,
      "message": "Can\u0027t be vector because we need to release the pointer. Switched to unique_ptr.",
      "parentUuid": "a73eda81_05ffd39a",
      "range": {
        "startLine": 48,
        "startChar": 32,
        "endLine": 48,
        "endChar": 43
      },
      "revId": "40ff3a1a808957a210f5553e1a2500a390454f25",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}