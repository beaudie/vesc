{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f94e885d_8a4909f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2023-02-22T23:35:34Z",
      "side": 1,
      "message": "OK so I investigated the build failures... libc++ hardening appears to affect ABI somehow (though I thought it wasn\u0027t supposed to).\n\nNonetheless, even if we don\u0027t solve this now, we\u0027re going to have to solve it in the future since there may be hardening changes that intentionally break ABI.\n\nThe problem is that the angle tree currently just reuses third_party/abseil-cpp from Chromium. Chromium builds with libc++ hardening, so the symbol names don\u0027t match exactly.\n\nI\u0027m not entirely sure what angle\u0027s strategy for importing things from Chromium is. It would /possibly/ be easier to just manually up-rev absl in angle and separately maintain .defs... but then someone would have to be on the hook for actually doing that periodically (and any other gardening that would entail).",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0723473_5523576c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2023-02-22T23:49:38Z",
      "side": 1,
      "message": "I have confirmed that if I rebuild the .def files locally it works. But there remain questions about how to sustainably manage this in the future; unfortunately (I don\u0027t know the reason) absl either will not or cannot annotate their exports, so we need to try to extract them manually using this script.\n\nI do not think Chrome itself should have to check in two versions of the .def files; in particular, Chrome itself does not need or want the enable_safe_libcxx switch to be configurable.\n\nMaybe there\u0027s some relatively easy way to layer additional things on top of the third_party/abseil-cpp checked out from Chrome in angle?",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7521f0e_b17109c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1178490
      },
      "writtenOn": "2023-02-23T07:47:07Z",
      "side": 1,
      "message": "Argh.\n\nYes, doing ABSL_EXPORT is the way to go here. We have multiple reasons to do that and absl folks were open to that last time I talked with them.\n\nThe main issue here is time/priority from my side (absl in Chrome maintainer).\n\nIf there are no workarounds I can try a push (I did twice in the past but that got reprioritized).\n\nI would like to hear from Angle if the option to maintain .def files for Angle on Angle side would be viable (looks quicker than ABSL_EXPORT to me).",
      "parentUuid": "d0723473_5523576c",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70811ee9_198c6ccb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-23T14:34:55Z",
      "side": 1,
      "message": "\u003e The problem is that the angle tree currently just reuses third_party/abseil-cpp from Chromium. Chromium builds with libc++ hardening, so the symbol names don\u0027t match exactly.\n\nSorry I don\u0027t quite understand. We have a ton of libraries we share with Chromium, how is abseil special?\n\nAlso, when ANGLE is built with Chromium, it\u0027s perfectly fine for it to use libc++ hardening. It\u0027s just _standalone_ ANGLE that we want to build without hardening.",
      "parentUuid": "e7521f0e_b17109c8",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6d2bb5e_c1ab38b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-23T16:00:47Z",
      "side": 1,
      "message": "absl is special on windows because (afaik) it doesn\u0027t explicitly export functions and requires a hand generated .def file to link properly. Now that we build with a different config in standalone ANGLE we need different .def files.\n\nWe are continuing to use hardening when building with Chrome, the failing bots are the ones that build standalone ANGLE.\n\nIn the meantime, if we can add this as a gn arg for local builds, that will be enough tell our partners and update our roll-into-android scripts.",
      "parentUuid": "70811ee9_198c6ccb",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cab5052_d9ff6cec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2023-02-23T16:53:02Z",
      "side": 1,
      "message": "I think someone from angle will have to comment on the practicality of rolling abseil themselves.\n\nIn the meantime, to unblock this landing, my proposal is default this option to false on non-Windows platforms and true on Windows. Is that sufficient to unblock things to move forward?\n\nI can file a followup for Windows+absl, but I\u0027m not sure I\u0027ll have time to work on that.",
      "parentUuid": "f6d2bb5e_c1ab38b0",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41949e2b_2edf4d2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-23T16:54:56Z",
      "side": 1,
      "message": "Yes, that\u0027s fine. Let\u0027s keep safe libcxx enabled on windows.",
      "parentUuid": "9cab5052_d9ff6cec",
      "revId": "90608a381750fda626b34187f221b4537758aa2e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}