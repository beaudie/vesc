{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e90f0e40_fc15e0ad",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 12
      },
      "lineNbr": 391,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-14T14:45:41Z",
      "side": 1,
      "message": "nit: the extension is not actually implemented yet! My suggestion is to keep this disabled until implementation is actually done. You can still have your tests force-enable this extension by doing this:\n\n- In `include/platform/frontend_features.json`, add a front-end feature like `emulatePixelLocalStorage`\n- In `Display.cpp`, use `ANGLE_FEATURE_CONDITION` to default initialize it to false. When the implementation is completed, this can be flipped to true. Backends that specialize the implementation would make sure it stays false.\n- In `Context::generateSupportedExtensions`, decide support for `shaderPixelLocalStorageANGLE` based on `emulatePixelLocalStorage`\n- In the test, where you instantiate the platforms, instead of `ANGLE_INSTANTIATE_TEST_ES31`, use:\n\n```\nANGLE_INSTANTIATE_TEST(...,\n                       ES31_VULKAN().enable(Feature::EmulatePixelLocalStorage),\n                       ...);\n```\n\nThis way, the extension isn\u0027t exposed to users while still WIP, while it is to the tests!",
      "revId": "bc91b783a026e2470b3101195e3bbb1f82ab05ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5808375b_1efba6e3",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 12
      },
      "lineNbr": 391,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-14T16:28:59Z",
      "side": 1,
      "message": "This looks nice! Just one question -- are there ways know from the front-end about extensions in the backend?\n\nIt would be nice, e.g., to emulate PLS as a front-end feature, but from the shader translator, make it coherent by adding a call in the shader to \"beginFragmentShaderOrderingINTEL()\". However, before inserting this call, the translator needs to know if the backend is GL and supports INTEL_fragment_shader_ordering. Is there a way to get that info to the front-end?",
      "parentUuid": "e90f0e40_fc15e0ad",
      "revId": "bc91b783a026e2470b3101195e3bbb1f82ab05ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63df57c1_dcaa1d4e",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 12
      },
      "lineNbr": 391,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-14T16:37:59Z",
      "side": 1,
      "message": "It\u0027s kind of the other way around. Down the line, you\u0027d need to add flags in ShaderLang.h to instruct the translator on what transformations to apply. The backend decides that in `ShaderVk.cpp`, `ShaderGL.cpp` etc. The backend would also be the one that first checks if it can implement it itself (and set a backend \"feature\" accordingly), and then decide if the front-end feature should be set.\n\nThe front-end would only do its emulation based on whether the front-end feature is set. The backend would also decide on what compiler flags to use based on its backend feature.\n\nMakes sense?",
      "parentUuid": "5808375b_1efba6e3",
      "revId": "bc91b783a026e2470b3101195e3bbb1f82ab05ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dacf096_1b262872",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 12
      },
      "lineNbr": 391,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-07-14T23:27:09Z",
      "side": 1,
      "message": "Got it, thanks!\n\nSo ShCompileOptions is almost out of room, but we could theoretically add flags either there or somewhere else that say things like (just spitballing here):\n\n```\n plsMode -\u003e {None, Images, FramebufferFetch, TexelFetchWithBarrier, CustomBackend}\n plsImagesCanBeReadWrite\n plsImageCoherencyMode -\u003e {NONE, VK_EXT, GL_INTEL, GL_ARB, D3D_ROV}\n ```\n \nThen the backend configures these flags and the shader compiler acts accordingly. Sound right?",
      "parentUuid": "63df57c1_dcaa1d4e",
      "revId": "bc91b783a026e2470b3101195e3bbb1f82ab05ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe27c781_425daacf",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 12
      },
      "lineNbr": 391,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-07-15T02:36:47Z",
      "side": 1,
      "message": "Yes. And yes, I need to do something about ShCompileOptions one of these days.",
      "parentUuid": "9dacf096_1b262872",
      "revId": "bc91b783a026e2470b3101195e3bbb1f82ab05ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}