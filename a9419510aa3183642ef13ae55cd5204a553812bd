{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8914ad55_b8700859",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-20T21:57:52Z",
      "side": 1,
      "message": "I just looked at mState.getDrawFramebuffer()-\u003eclear and the backedn implementation, looks like all backend will just immediate return if the scissored clear rectnagle is empty, except vulkan. Vulkan backend has an assertion. I think all you need to do is remove these 6 lines (and all other places as well), and then fix the vulkan backend with this.\n```\n--- a/src/libANGLE/renderer/vulkan/FramebufferVk.cpp\n+++ b/src/libANGLE/renderer/vulkan/FramebufferVk.cpp\n@@ -456,7 +456,10 @@ angle::Result FramebufferVk::clearImpl(const gl::Context *context,\n     ContextVk *contextVk \u003d vk::GetImpl(context);\n \n     const gl::Rectangle scissoredRenderArea \u003d getRotatedScissoredRenderArea(contextVk);\n-    ASSERT(scissoredRenderArea.width !\u003d 0 \u0026\u0026 scissoredRenderArea.height !\u003d 0);\n+    if(scissoredRenderArea.width \u003d\u003d 0 || scissoredRenderArea.height \u003d\u003d 0)\n+    {\n+        return angle::Result::Continue;\n+    }\n```",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b71389f6_30caee3b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-20T22:38:56Z",
      "side": 1,
      "message": "1. irrespective of any change we make to the backend the location of this check in the front-end is incorrect, it has to be done only after the `prepare...` calls\n\n2. i am not familiar with other backends but do you know if they support something like deferred clears? there is substantial machinery like staging / redeferring clears. nevertheless, just returning from the place you suggested will trigger asserts in subsequent `syncState` for valid reasons. that is outside the scope of this change though",
      "parentUuid": "8914ad55_b8700859",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65167c58_0fddbaae",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-20T23:15:24Z",
      "side": 1,
      "message": "I had the same idea Charlie: https://chromium-review.googlesource.com/c/angle/angle/+/4867641/comment/61bef37b_63784905/\n\nBut that doesn\u0027t really work. `IsEmptyScissor` could be wrong if the window has _grown_. So the clear could be no-oped even though it shouldn\u0027t be.",
      "parentUuid": "b71389f6_30caee3b",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f0baae3_a2936710",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-20T23:55:07Z",
      "side": 1,
      "message": "@mohan: 1) totally agree with you. What I am saying is that even if you remove this nop if empty check, backend will still nop it property (except vulkan backend). 2) I did checked all backend, they all check for empty after scissor.\n\n@shabi: I am not sure if I understand your comment. If window has grown, then the scissored rect will *not* be empty and we will not nop the clear. Maybe I did not made it clear: I am suggesting remove the nop_if_empty all together from front end, and rely on backend only. The backend calculation is after the prepareForClear call.",
      "parentUuid": "65167c58_0fddbaae",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e331128d_bac9e0cd",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-21T01:20:50Z",
      "side": 1,
      "message": "Oh, yeah I guess if we went through the trouble of syncing, might as well call into the backend. I originally put it here to avoid syncing at all (and not deal with deferred clear bugs), but since that\u0027s happening now, I agree there\u0027s little value to early out in the front-end.",
      "parentUuid": "4f0baae3_a2936710",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ce162f6_32624bc1",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 20
      },
      "lineNbr": 4694,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-21T18:35:59Z",
      "side": 1,
      "message": "@syoussefi@chromium.org how do you propose we handle the deferred clear assert -\n```\nFramebufferVk.cpp:2093 (syncState): \t\n! Assert failed in syncState (..\\..\\src\\libANGLE\\renderer\\vulkan\n\\FramebufferVk.cpp:2093): !previousDeferredClears.test(colorIndexGL)\n```\n\none way is with how @cclao@google.com suggested that i modify code in `syncState` to not defer clears if scissor is enabled. going to upload a patch with that to see how things pan out. let me know if there is an alternative",
      "parentUuid": "e331128d_bac9e0cd",
      "range": {
        "startLine": 4690,
        "startChar": 4,
        "endLine": 4694,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "516a867c_9dad457a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2096,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-20T21:57:52Z",
      "side": 1,
      "message": "Why do you need this? Scissored clear will be immediate (see FramebufferVk::clearImpl line 500, it should end up with clearWithDraw). If there is a bug there that end up still defer the clear, we should fix that.",
      "range": {
        "startLine": 2084,
        "startChar": 4,
        "endLine": 2096,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "925dbd8e_c28609bd",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2096,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-20T22:38:56Z",
      "side": 1,
      "message": "\u003e Scissored clear will be immediate\n\nas the comment suggests, this block is to prevent a staged clear from being re-deferred. it is not acting on the upcoming clear",
      "parentUuid": "516a867c_9dad457a",
      "range": {
        "startLine": 2084,
        "startChar": 4,
        "endLine": 2096,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e1ec6dc_a4c96029",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2096,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-21T00:14:01Z",
      "side": 1,
      "message": "But the staged clear should not apply this new scissoredRenderArea. It should apply to the entire size. Your check at line 2091 should not limit to empty scissor, but should be if scissor is enabled, then the deferred clear should not re-defer, right?",
      "parentUuid": "925dbd8e_c28609bd",
      "range": {
        "startLine": 2084,
        "startChar": 4,
        "endLine": 2096,
        "endChar": 5
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6c6818_c2295998",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 20
      },
      "lineNbr": 611,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-20T21:57:52Z",
      "side": 1,
      "message": "Based on the test code, the scissor is not out of bound (scrissor is {64,64,10,10}, window is 128x128.",
      "range": {
        "startLine": 611,
        "startChar": 23,
        "endLine": 611,
        "endChar": 41
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd65fb15_2e85b2bb",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 20
      },
      "lineNbr": 611,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-20T22:38:56Z",
      "side": 1,
      "message": "it is OOB before the resize",
      "parentUuid": "bb6c6818_c2295998",
      "range": {
        "startLine": 611,
        "startChar": 23,
        "endLine": 611,
        "endChar": 41
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b94a810_c6c15e9d",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 20
      },
      "lineNbr": 611,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-21T00:14:01Z",
      "side": 1,
      "message": "Right, but by the time glScissor is called, it is within bound :-). Maybe something like `StartWithSmallThenGrowWindowFollowedByScissoredClear`?",
      "parentUuid": "cd65fb15_2e85b2bb",
      "range": {
        "startLine": 611,
        "startChar": 23,
        "endLine": 611,
        "endChar": 41
      },
      "revId": "a9419510aa3183642ef13ae55cd5204a553812bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}