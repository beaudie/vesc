{
  "comments": [
    {
      "key": {
        "uuid": "0abfee36_aeb1acb7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "To be accurate, RTVs also share the slots. right?",
      "range": {
        "startLine": 18,
        "startChar": 8,
        "endLine": 18,
        "endChar": 65
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed90a461_e66e8d95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "Remove or figure a new word.",
      "range": {
        "startLine": 24,
        "startChar": 61,
        "endLine": 24,
        "endChar": 66
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "702f2970_30e19398",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "combined.",
      "range": {
        "startLine": 26,
        "startChar": 3,
        "endLine": 26,
        "endChar": 10
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a465e45_d5db60b1",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Context11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "\u0027upper\u0027 context is not informative. Either find a new articulate word or simply remove it.",
      "range": {
        "startLine": 127,
        "startChar": 16,
        "endLine": 127,
        "endChar": 29
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32775b36_f2e3ca02",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Context11.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "ditto.",
      "range": {
        "startLine": 133,
        "startChar": 16,
        "endLine": 133,
        "endChar": 29
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a3c288d_f99a75bf",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 974,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-05-07T10:04:26Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s right to use the UAV slots as the max*ShaderStorageBlocks.\nThe max*Bindings should exist the UAV slots assignment issue not the *ShaderStorageBlocks/*ImageUniforms.\n\nFor example, below RWStructuredBuffer can have more than one element which means that one RWStructuredBuffer can include more than one block. However, it only needs one UAV slot.\nstruct BufType\n{\n    int i;\n    float f;   \n};\nRWStructuredBuffer\u003cBufType\u003e BufferOut: register(u0);\n\n...\n[numthreads(1, 1, 1)]\nvoid CSMain( uint3 DTid : SV_DispatchThreadID )\n{\n    BufferOut[DTid.x].i \u003d ...\n    BufferOut[DTid.x].f \u003d ...\n}",
      "range": {
        "startLine": 972,
        "startChar": 0,
        "endLine": 974,
        "endChar": 82
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60d62e57_d535fe14",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 974,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-05-08T04:30:00Z",
      "side": 1,
      "message": "Offline talked with Jiawei. Maybe we can\u0027t translate the shader storage block instance array like above which will make the API side very complicated. For example, one instance array element will map to one shader storage buffer in opengl es. However, if we translate the instance array to one RWStructuredBuffer, it will only has one buffer in API side. So it will become very complicated to process the mapping between opengl es(multiply shader storage buffers) and d3d(one RWStructuredBuffer).\nOne workable method may be similar with uniform block. The translation is like below:\n--------opengl es--------\nbuffer buf1\n{\n   float f1;\n   float f2;\n} instanceBuf1;\n\nbuffer buf2\n{\n   int i1;\n   int i2;\n} instanceBuf2[2];\n\n---------d3d-------------\nstruct dx_buf1_type\n{\n   float f1;\n   float f2;\n}\nRWStructuredBuffer\u003cdx_buf1_type\u003e _instanceBuf1: register(u0);\n\nstruct dx_buf2_type\n{\n    int i1;\n    int i2;\n}\nRWStructuredBuffer\u003cdx_buf2_type\u003e dx_instanceBuf20: register(u1);\nRWStructuredBuffer\u003cdx_buf2_type\u003e dx_instanceBuf21: register(u2);\n\nIn this way, one shader storage block will map to one RWStructuredBuffer and the block counts will be same with binding counts.",
      "parentUuid": "8a3c288d_f99a75bf",
      "range": {
        "startLine": 972,
        "startChar": 0,
        "endLine": 974,
        "endChar": 82
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41feaa35_0da77bdd",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 975,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2018-05-08T03:14:18Z",
      "side": 1,
      "message": "Should we initialize the other bindings here as well?",
      "range": {
        "startLine": 975,
        "startChar": 4,
        "endLine": 975,
        "endChar": 82
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63b18b84_892b82a4",
        "filename": "src/libANGLE/renderer/d3d/d3d11/renderer11_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 986,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2018-05-07T10:04:26Z",
      "side": 1,
      "message": "maxCombinedAtomicCounterBuffers?",
      "range": {
        "startLine": 986,
        "startChar": 54,
        "endLine": 986,
        "endChar": 85
      },
      "revId": "8bda392156d36c95571cc0bd0ec10eeb856a8387",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}