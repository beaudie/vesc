{
  "comments": [
    {
      "key": {
        "uuid": "6c5a3f5f_8a02cd34",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 88
      },
      "lineNbr": 6563,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "I suggest making a split refactor-only change with the local changes to Context.cpp to call getActiveLinkedProgram instead of mState.getProgram. You can omit the pipline-related code and keep that in this CL. This would simplify this large pipeline CL.",
      "range": {
        "startLine": 6563,
        "startChar": 18,
        "endLine": 6563,
        "endChar": 40
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e86680e_9cecc9a8",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 88
      },
      "lineNbr": 6563,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2135931",
      "parentUuid": "6c5a3f5f_8a02cd34",
      "range": {
        "startLine": 6563,
        "startChar": 18,
        "endLine": 6563,
        "endChar": 40
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "276e8914_47a95d9f",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "This is going to incur significant draw overhead. Do you know what tests trigger this situation? Also this should be in a split change.\n\nThis is important enough we should try to fix before landing. Other clients of ANGLE like Chrome depend on having low draw call overhead. We can potentially use a cache variable like we do for validation. Note that this condition doesn\u0027t depend on any draw call parameters (mode/count).",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb37273e_74307fbe",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "So it\u0027s here also:\n\nThe test is:\nKHR-GLES31.core.sepshaderobjs.StateInteraction\n\nThe relevant part of the spec:\n\n7.3. PROGRAM OBJECTS\nIf there is no active program for the vertex or fragment shader stages, the results of vertex and fragment shader execution will respectively be undefined. However, this is not an error.\n\nNo-op\u0027ing the draw is the easiest way to avoid any errors, since the rest of ANGLE relies on all of the shader stages being present.\n\nAdmittedly, I don\u0027t have any experience with C++ performance, but where is the significant overhead coming from?   The getState() and getProgramExecutable() are just inlined member lookups and the hasLinkedShaderStage() calls end up doing a bit-wise shift and AND:\n\nbool BitSetT\u003cN, BitsT, ParamT\u003e::test(ParamT pos) const\n{\n    return (mBits \u0026 Bit\u003cBitsT\u003e(pos)) !\u003d 0;\n}\n\nThe isGLES1() call is a little more involved, but is necessary since GLES1 doesn\u0027t have linked shader stages.\n\nIs the concern just the number of calls overall, the branching, or something else?\n\nAs chatted about though, I\u0027ve moved this out into its own CL since the test this is helping to fix has a couple other failures addressed by other CLs:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2136386",
      "parentUuid": "276e8914_47a95d9f",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16327ae_c3034d73",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-04T02:45:09Z",
      "side": 1,
      "message": "Based on Jamie\u0027s comment, you should be able to simplify this at least to:\n\n    if (executable-\u003emCanDrawWith)\n\nwhere mCanDrawWith (of course retrieved through a getter) is a cached value that gets set when the program is linked:\n\n    mCanDrawWith \u003d context-\u003eisGLES1() || (hasLinkedShaderStage(VS) \u0026\u0026 hasLinkedShaderStage(FS));\n\nCan executable be nullptr? Sounds like that\u0027s something the validation layer would have taken care of (since there is no check for it being nullptr elsewhere, so at least it must be validated for monolithic programs).",
      "parentUuid": "fb37273e_74307fbe",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "785ad022_6d933865",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T02:56:20Z",
      "side": 1,
      "message": "Yeah, that\u0027s about what popped into my head also.   It should be easy enough to update something like that in ProgramExecutable during linkProgram() and useProgramStages().\n\nHowever, as you point out, the executable *can* be null if it\u0027s GLES1, since there is no Program (or PPO) to instantiate a ProgramExecutable (and thus, nothing to point State::mExecutable at.   That would mean there\u0027s no way to get the cached value for GLES1.\n\nSo, the Context/State may instead need to have its own flag that\u0027s updated in useProgram()/bindProgramPipeline() that does this checking.   That\u0027s still outside of the draw path so it solves the problem here, but not as nice as encapsulating it within the ProgramExecutable.",
      "parentUuid": "e16327ae_c3034d73",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5293b145_991577b1",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-04T03:22:23Z",
      "side": 1,
      "message": "I see. Caching a flag in context is probably the most optimal, though would need extra attention. Not sure if Jamie is satisfied with something like `if (!executable || !executable-\u003emCanDrawWith) return true;` for now, and leave that optimization to a separate CL (which would be my preference, so if it introduces bugs, only that is reverted).",
      "parentUuid": "785ad022_6d933865",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2340dbfa_65daefdf",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 75,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-06T15:02:53Z",
      "side": 1,
      "message": "Per our offline discussion, I\u0027d be good with splitting this out to a follow-up patch and doing the work there.",
      "parentUuid": "5293b145_991577b1",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 75,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe19858_cd829e18",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 115,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "In what cases do we need to call pipeline-\u003eprepareForDraw? Let\u0027s try to make this a dirty object. Again trying to shave off redundant ifs from each and every draw call.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 115,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b1a794_84b61a21",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 88
      },
      "lineNbr": 115,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Yeah, we\u0027ve chatted about making this a dirty bit that triggers the PPO link() work.\n\nThis is necessary every time we:\n- change the program(s) bound to the PPO\n- re-link a program currently bound to the PPO\n\nWhen one of those things happens, we need to do the PPO link() work so we can re-validate the programs in the PPO and link the varyings in the front end, along with recalculate the variable locations and re-translate the SPIR-V in the backend.\n\nWe don\u0027t currently know that the SPIR-V and variable locations we\u0027ve previously calculated are still good, so it\u0027s being done every time.   Making this a dirty object is the right approach, I just haven\u0027t gotten to it yet.\n\nI\u0027ve opened a bug to chase this and marked it with a TODO:\nIssue 4544: Use a dirty bit to call ProgramPipeline::prepareForDraw()",
      "parentUuid": "cbe19858_cd829e18",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 115,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48c76b03_13e37766",
        "filename": "src/libANGLE/ErrorStrings.h",
        "patchSetId": 88
      },
      "lineNbr": 486,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: you can omit \"GL_\" from validation messages.",
      "range": {
        "startLine": 486,
        "startChar": 67,
        "endLine": 486,
        "endChar": 70
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c65526e_1b41544a",
        "filename": "src/libANGLE/ErrorStrings.h",
        "patchSetId": 88
      },
      "lineNbr": 486,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48c76b03_13e37766",
      "range": {
        "startLine": 486,
        "startChar": 67,
        "endLine": 486,
        "endChar": 70
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75a4207d_e6f6dee6",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 88
      },
      "lineNbr": 1007,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: please leave a TODO here to remove this once we support full linking with the Executable.",
      "range": {
        "startLine": 1007,
        "startChar": 24,
        "endLine": 1007,
        "endChar": 46
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba4a1461_32c4c76e",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 88
      },
      "lineNbr": 1007,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "I\u0027ve added this to anglebug.com/4514, since they should be related, and marked it here with that bug.",
      "parentUuid": "75a4207d_e6f6dee6",
      "range": {
        "startLine": 1007,
        "startChar": 24,
        "endLine": 1007,
        "endChar": 46
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a8d2f17_9fc88a8a",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 88
      },
      "lineNbr": 383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: you can cache this in a temporary to make the following code easier to read. same below.",
      "range": {
        "startLine": 383,
        "startChar": 23,
        "endLine": 383,
        "endChar": 67
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9982705c_86b90b85",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 88
      },
      "lineNbr": 383,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a8d2f17_9fc88a8a",
      "range": {
        "startLine": 383,
        "startChar": 23,
        "endLine": 383,
        "endChar": 67
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b273247_a0ac3ebe",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 88
      },
      "lineNbr": 51,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: can you check if various accessors in this class can be const and mark them if so?",
      "range": {
        "startLine": 51,
        "startChar": 14,
        "endLine": 51,
        "endChar": 21
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4ba258b_7fc8da37",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 88
      },
      "lineNbr": 51,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b273247_a0ac3ebe",
      "range": {
        "startLine": 51,
        "startChar": 14,
        "endLine": 51,
        "endChar": 21
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9bde1b9_034f98d5",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 88
      },
      "lineNbr": 55,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: looks like all these accessors can be const.",
      "range": {
        "startLine": 55,
        "startChar": 9,
        "endLine": 55,
        "endChar": 27
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97589bce_e8a3cb25",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 88
      },
      "lineNbr": 55,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9bde1b9_034f98d5",
      "range": {
        "startLine": 55,
        "startChar": 9,
        "endLine": 55,
        "endChar": 27
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "525f7cea_4520f615",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 88
      },
      "lineNbr": 3100,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "right, so you added a program pipeline handler here. We should try to get the pseudo-linking state into notifications that trigger syncState.",
      "range": {
        "startLine": 3092,
        "startChar": 0,
        "endLine": 3100,
        "endChar": 1
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10ce3557_3fd1d42f",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 88
      },
      "lineNbr": 3100,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "525f7cea_4520f615",
      "range": {
        "startLine": 3092,
        "startChar": 0,
        "endLine": 3100,
        "endChar": 1
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5da37528_b67748e1",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 233,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: can\u0027t you just iterate the map directly?",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbed952a_c36b54b3",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 233,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5da37528_b67748e1",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 9
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d01031_ff50d3c4",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 235,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: please place in the cpp. no need to be inlined.",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 235,
        "endChar": 0
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3094d2c_64fb0ec7",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 235,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30d01031_ff50d3c4",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 235,
        "endChar": 0
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a088bb68_4614992b",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 260,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: can go in cpp as well. also I think you can call std::fill().",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 260,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f676ebeb_a1069a08",
        "filename": "src/libANGLE/VaryingPacking.h",
        "patchSetId": 88
      },
      "lineNbr": 260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Ah, cool, much cleaner.",
      "parentUuid": "a088bb68_4614992b",
      "range": {
        "startLine": 255,
        "startChar": 0,
        "endLine": 260,
        "endChar": 5
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16a1db36_d559bd87",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 88
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "will trust Shabi\u0027s review for this file. I just skimmed it.",
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e1895ab_c9721f58",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 88
      },
      "lineNbr": 101,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: GlslangAssignLocations to ensure this function is appropriately scoped to Glslang.",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 101,
        "endChar": 20
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "416b0a8c_ff50838e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 88
      },
      "lineNbr": 101,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done.\n\nI also renamed GlslangTransformSpirvCode() below.",
      "parentUuid": "9e1895ab_c9721f58",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 101,
        "endChar": 20
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63067403_9907c2e4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2599,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "naming nit: invalidate to match the other functions.",
      "range": {
        "startLine": 2599,
        "startChar": 25,
        "endLine": 2599,
        "endChar": 53
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adafb57a_2ad2293a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2599,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63067403_9907c2e4",
      "range": {
        "startLine": 2599,
        "startChar": 25,
        "endLine": 2599,
        "endChar": 53
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bddc87f_90440d8f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2880,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "it should only need to be called when the executable changes.",
      "range": {
        "startLine": 2880,
        "startChar": 20,
        "endLine": 2880,
        "endChar": 72
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d10d26c_42e4895c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2890,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: maybe make this a helper. it\u0027s getting pretty big.\n\nalso the TODO/invalidate calls shouldn\u0027t be necessary. only when the executable changes.",
      "range": {
        "startLine": 2858,
        "startChar": 0,
        "endLine": 2890,
        "endChar": 51
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f03764_9993553c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 4688,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: again a TODO here to use the executable.",
      "range": {
        "startLine": 4688,
        "startChar": 22,
        "endLine": 4688,
        "endChar": 38
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd99756_a74341c5",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 4688,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Good catch.   This was written before the ProgramExecutableVk had pointers back to the ProgramVk/ProgramPipelineVk it was instantiated within.   Now that those are members of ProgramExecutableVk, I moved this function into there, since ProgramExecutableVk is the only user of this anyway.",
      "parentUuid": "e4f03764_9993553c",
      "range": {
        "startLine": 4688,
        "startChar": 22,
        "endLine": 4688,
        "endChar": 38
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b47a06_fe76f3e7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 88
      },
      "lineNbr": 664,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "naming nit: how about isBresenhamEmulationEnabled ?",
      "range": {
        "startLine": 664,
        "startChar": 22,
        "endLine": 664,
        "endChar": 35
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f591c8ae_ef2417e2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 88
      },
      "lineNbr": 664,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4b47a06_fe76f3e7",
      "range": {
        "startLine": 664,
        "startChar": 22,
        "endLine": 664,
        "endChar": 35
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a22c5928_f5751701",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 39,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: again slap a TODO somewhere on this program state map to use the executable for linking.",
      "range": {
        "startLine": 39,
        "startChar": 28,
        "endLine": 39,
        "endChar": 41
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e38f413a_cdaf2c7b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 88
      },
      "lineNbr": 39,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "Done.\n\nI\u0027ve also tagged:\nProgramVk::fillProgramStateMap()\nProgramPipelineVk::fillProgramStateMap()",
      "parentUuid": "a22c5928_f5751701",
      "range": {
        "startLine": 39,
        "startChar": 28,
        "endLine": 39,
        "endChar": 41
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fc15681_a094c52d",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2842,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-03T19:59:35Z",
      "side": 1,
      "message": "nit: it would be more consistent to localize the validation code out of the classes and into helper functions that use public data accessors in validationES.cpp.\n\nAlso there may be state change notifications related to program pipelines that aren\u0027t propagated to StateCache. Without the notifications this code might not get called and ANGLE might return incorrect validation.\n\nYou could even do a partial refactor-only CL that makes the helper functions in here to split that out.",
      "range": {
        "startLine": 2811,
        "startChar": 0,
        "endLine": 2842,
        "endChar": 13
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f1696af_18f81a6d",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 88
      },
      "lineNbr": 2842,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T01:55:21Z",
      "side": 1,
      "message": "I\u0027m not quite sure what you\u0027re describing here regarding the refactor, so lets chat on Monday.\n\nRegarding the StateCache, I think everything related to PPOs is covered already by:\n\n    void StateCache::onProgramExecutableChange(Context *context)\n    {\n        updateActiveAttribsMask(context);\n        updateVertexElementLimits(context);\n        updateBasicDrawStatesError();\n        updateValidDrawModes(context);\n        updateActiveShaderStorageBufferIndices(context);\n    }\n\nFor PPOs in particular, that\u0027s part of Context::useProgramStages() and Context::onProgramLink which should be the only state changes that can affect any validation here.   I can\u0027t remember which, but there were dEQP tests that flushed out that I had initially missed adding the call to Context::useProgramStages().",
      "parentUuid": "3fc15681_a094c52d",
      "range": {
        "startLine": 2811,
        "startChar": 0,
        "endLine": 2842,
        "endChar": 13
      },
      "revId": "d635096ba4902cd367483041ac92234406b61691",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}