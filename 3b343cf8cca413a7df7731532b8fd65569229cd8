{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6f4deec9_d15a5e85",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 15
      },
      "lineNbr": 800,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-27T21:11:13Z",
      "side": 1,
      "message": "The name is a bit confusing to me. Could you call it mCommandBufferIDAllocator? This really is allocating a ID for a in-use command buffer, not free command buffer.",
      "range": {
        "startLine": 800,
        "startChar": 37,
        "endLine": 800,
        "endChar": 56
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d91428a_d2133691",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 15
      },
      "lineNbr": 800,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-30T14:09:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f4deec9_d15a5e85",
      "range": {
        "startLine": 800,
        "startChar": 37,
        "endLine": 800,
        "endChar": 56
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e0c279c_15687c2a",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 15
      },
      "lineNbr": 39,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-27T21:11:13Z",
      "side": 1,
      "message": "What I was thinking is this is basically \"std::vector\u003cbitfield\u003cuint64_t\u003e\u003e mResourceUse\" and it always starts with one element with value of 0. Then with a incoming commandID, you do this:\n\nif(commandID \u003c 64)\n{\n    // Fast path\n    mResourceUse[0][commandID] tells you in use or not.\n    set: just set the bit without any test\n    clear: remove bit without any test.\n}\nelse\n{\n    // Slow path\n    ensure mResourceUse.size is big enoug\n    \n    elementIndex \u003d commandID \u003e\u003e 6;\n    bit \u003d commandID \u0026 0x3F;\n    if(mResourceUse[elementIndex].bit)\n    {\n       // in use\n    }\n    else\n    {\n       // not use.\n    }\n}",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 96
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "757fa7b8_4433cf92",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 15
      },
      "lineNbr": 39,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-30T14:09:07Z",
      "side": 1,
      "message": "So I did of course consider a more optimized approach. I was finding in my testing that such an optimization would likely be hard to measure because the design as it stands now is almost as fast-as-could-be. Every one of these sets in our perf testing is a set of one element.\n\nI\u0027d suggest we don\u0027t take any action here and only reconsider if we can find a counter-example",
      "parentUuid": "1e0c279c_15687c2a",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 96
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93890dbe_dedf715e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2546,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-27T21:19:45Z",
      "side": 1,
      "message": "I think you can call releaseID() as soon as commandBufferHelper gets processed, instead of recycled. i.e, at OutsideRenderPassCommandBufferHelper::reset() you can call releaseID(). \n\nOtherwise, for synchronous submission, command buffers never gets recycled until context destroy, which means you will be using same commandID for entire context life time. I am wondering that might causing bots failure?",
      "range": {
        "startLine": 2546,
        "startChar": 38,
        "endLine": 2546,
        "endChar": 47
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bbc3fc9_0e55cc7d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2546,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-05-30T14:09:07Z",
      "side": 1,
      "message": "The bot failures seem to be a collection of different unrelated issues. The worst problem is running out of capacity with SwiftShader testers. There may be a flakiness bug with one of the golden image tests where Intel sometimes renders very slightly non-determistically.\n\nI don\u0027t think there\u0027s a bug here. Actually I don\u0027t quite understand what your concern is. If you\u0027re still worried, can you can ping me offline and help me understand?",
      "parentUuid": "93890dbe_dedf715e",
      "range": {
        "startLine": 2546,
        "startChar": 38,
        "endLine": 2546,
        "endChar": 47
      },
      "revId": "3b343cf8cca413a7df7731532b8fd65569229cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}