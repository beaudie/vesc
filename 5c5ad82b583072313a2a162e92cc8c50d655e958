{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c27aaf3_143093fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-10T19:25:21Z",
      "side": 1,
      "message": "Hurray!",
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33aebd00_7bce180d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "Thanks Tim.",
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48def12d_d4f20617",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 595,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "What stops us from initializing one pool dynamically depending on the availability of the extension?",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 595,
        "endChar": 5
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ce7d78_8f0ac0ee",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-10T19:25:21Z",
      "side": 1,
      "message": "minor nit: Perhaps you can split this change into another CL, so this change sets `parallelShaderCompileKHR \u003d true`, making the CL a no-op, and the follow up would be extremely trivial, just flipping this based on the config. Might make things easier blame/revert-wise.",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbeff19b_2cd9ab5f",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "Here\u0027s my advice: take all this define \"build with chromium\" stuff out and just set this bool to false for now. Even if there\u0027s a slight benefit in Chrome for parallel compilation the real benefit is parallel link. And parallel link doesn\u0027t work, so we\u0027re not missing out.",
      "parentUuid": "50ce7d78_8f0ac0ee",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17ea0a28_a0904d03",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "we\u0027d still like to use this benchmark with Vulkan. Instead, skip the test if !SingleThreaded \u0026\u0026 !ExtensionAvailable",
      "range": {
        "startLine": 109,
        "startChar": 3,
        "endLine": 109,
        "endChar": 63
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c44db1e7_b6def20d",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "down here",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 118,
        "endChar": 0
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}