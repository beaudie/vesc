{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c27aaf3_143093fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-10T19:25:21Z",
      "side": 1,
      "message": "Hurray!",
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33aebd00_7bce180d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "Thanks Tim.",
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48def12d_d4f20617",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 595,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "What stops us from initializing one pool dynamically depending on the availability of the extension?",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 595,
        "endChar": 5
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc2f4ca_688bec11",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 595,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-10T21:00:26Z",
      "side": 1,
      "message": "We still want to be able to use a multithreaded pool for things like compressing the pipeline cache when enableCompressingPipelineCacheInThreadPool is enabled (RendererVk::syncPipelineCacheVk).",
      "parentUuid": "48def12d_d4f20617",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 595,
        "endChar": 5
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e59730be_0ac6adc5",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 595,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T22:16:22Z",
      "side": 1,
      "message": "Ah okay, maybe commenting below in this header where we set up both pools that we have dual use cases might be appropriate.",
      "parentUuid": "fcc2f4ca_688bec11",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 595,
        "endChar": 5
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51e40325_e9268d44",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 595,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-11T01:14:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e59730be_0ac6adc5",
      "range": {
        "startLine": 582,
        "startChar": 0,
        "endLine": 595,
        "endChar": 5
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50ce7d78_8f0ac0ee",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-10T19:25:21Z",
      "side": 1,
      "message": "minor nit: Perhaps you can split this change into another CL, so this change sets `parallelShaderCompileKHR \u003d true`, making the CL a no-op, and the follow up would be extremely trivial, just flipping this based on the config. Might make things easier blame/revert-wise.",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbeff19b_2cd9ab5f",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "Here\u0027s my advice: take all this define \"build with chromium\" stuff out and just set this bool to false for now. Even if there\u0027s a slight benefit in Chrome for parallel compilation the real benefit is parallel link. And parallel link doesn\u0027t work, so we\u0027re not missing out.",
      "parentUuid": "50ce7d78_8f0ac0ee",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47987559_f6a81a6e",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-10T21:00:26Z",
      "side": 1,
      "message": "\u003e Perhaps you can split this change into another CL,\n\nDone.\n\n\u003e take all this define \"build with chromium\" stuff out and just set this bool to false for now.\n\nDone.\n\nI agree this is simpler, especially since Shabi has found that it doesn\u0027t make much difference in Chromium anyway.",
      "parentUuid": "cbeff19b_2cd9ab5f",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb652cbe_2d5cae87",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-11T02:13:17Z",
      "side": 1,
      "message": "Rather, I found single threaded is an improvement in Chromium too",
      "parentUuid": "47987559_f6a81a6e",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "760fb41e_c743ae21",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1123,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-11T18:04:07Z",
      "side": 1,
      "message": "Ack\n\nEven better.",
      "parentUuid": "fb652cbe_2d5cae87",
      "range": {
        "startLine": 1116,
        "startChar": 0,
        "endLine": 1123,
        "endChar": 6
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17ea0a28_a0904d03",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "we\u0027d still like to use this benchmark with Vulkan. Instead, skip the test if !SingleThreaded \u0026\u0026 !ExtensionAvailable",
      "range": {
        "startLine": 109,
        "startChar": 3,
        "endLine": 109,
        "endChar": 63
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f1ee5fb_28b00969",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-10T21:00:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "17ea0a28_a0904d03",
      "range": {
        "startLine": 109,
        "startChar": 3,
        "endLine": 109,
        "endChar": 63
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c44db1e7_b6def20d",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T19:49:40Z",
      "side": 1,
      "message": "down here",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 118,
        "endChar": 0
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d84d1fc1_10501c78",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-10T21:00:26Z",
      "side": 1,
      "message": "Returning here is too late, since we still attempt to run the tests whether they were initialized or not.\n\nI\u0027ve added a check for the extension here (since the function glMaxShaderCompilerThreadsKHR() isn\u0027t exposed otherwise) while adding the ANGLE_SKIP_TEST_IF() to LinkProgramBenchmark.Run below so it\u0027s clear that we are only running these tests on Vulkan for the single-threaded tests.\n\nLet me know what you think.",
      "parentUuid": "c44db1e7_b6def20d",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 118,
        "endChar": 0
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5e5c0fe_1bb1221c",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-10T22:16:22Z",
      "side": 1,
      "message": "We skip in initializeBenchmark in other tests, so I\u0027d be surprised if it doesn\u0027t work as expected. Set mSkipTest\u003dtrue and return. What happens in that case?",
      "parentUuid": "d84d1fc1_10501c78",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 118,
        "endChar": 0
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50b86c64_4f1f2dca",
        "filename": "src/tests/perf_tests/LinkProgramPerfTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-11T01:14:47Z",
      "side": 1,
      "message": "I fixed ANGLERenderTest::SetUp() to check mSkipTest after initializeBenchmark() is called, so we can skip the test in LinkProgramBenchmark::initializeBenchmark() rather than LinkProgramBenchmark::Run().",
      "parentUuid": "a5e5c0fe_1bb1221c",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 118,
        "endChar": 0
      },
      "revId": "5c5ad82b583072313a2a162e92cc8c50d655e958",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}