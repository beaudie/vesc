{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72d99123_ff3cb9be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T14:43:32Z",
      "side": 1,
      "message": "Why shouldn\u0027t they?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 50
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a62560_25aa5492",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T15:04:38Z",
      "side": 1,
      "message": "VUID-VkImageCreateInfo-samples-02257",
      "parentUuid": "72d99123_ff3cb9be",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 50
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e6be5fe_cb7d7559",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "ðŸ˜® maybe one day GPU hardware isn\u0027t a mess of bespoke features",
      "parentUuid": "51a62560_25aa5492",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 50
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ee005c9_97315c55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T16:01:03Z",
      "side": 1,
      "message": "its nice that vulkan has explicit VUIDs but i wish there was a place documenting the intent / purpose of each of them. I was stumped by the intent behind the other VUID as well (VUID-VkGraphicsPipelineCreateInfo-pLibraries-06681)",
      "parentUuid": "6e6be5fe_cb7d7559",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 50
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37febef8_16530064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T12:55:10Z",
      "side": 1,
      "message": "PTAL",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03f4ab07_0c3c714b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2867,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T12:59:52Z",
      "side": 1,
      "message": "remove this",
      "range": {
        "startLine": 2867,
        "startChar": 8,
        "endLine": 2867,
        "endChar": 53
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c72a52c8_b6d65c74",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2867,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03f4ab07_0c3c714b",
      "range": {
        "startLine": 2867,
        "startChar": 8,
        "endLine": 2867,
        "endChar": 53
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "690612a1_2ee0f88f",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "This is affecting YUV rendering too, is that intentional? Are they also expected to be single-level?",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cffa170_e1fc329d",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T16:01:03Z",
      "side": 1,
      "message": "AFAIK, yuv rendering path is also confined to single mip level.\n\nwill leave this open for any corrections / comments from @cclao@google.com",
      "parentUuid": "690612a1_2ee0f88f",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ba8eab3_e23dbb4c",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Can make the intention clearer here: `getDrawImageLevelIndex()` (no params). You can add a comment that it\u0027s the level of the image that\u0027s drawn to, while `mLevelIndexGL` may refer to a level in the resolve attachment.\n\n`isImageTransient()` is sufficient to choose 0 or not, isn\u0027t it?",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ee9be6_55d44c79",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T16:01:03Z",
      "side": 1,
      "message": "\u003e Can make the intention clearer here: getDrawImageLevelIndex()\n\u003e isImageTransient() is sufficient to choose 0 or not, isn\u0027t it?\n\nthat was my first stop but when modifying `FramebufferVk::createNewFramebuffer` i was more confused about which one to call into. The common pattern i saw was that callers would get some image from a rendertarget they are interested in and then they query rendertarget for levelindex. it felt like the simpler / safer approach would be to require the callers pass in the image they need the levelindex for. For callers that dont care the existing `getLevelIndex` would suffice\n\nlet me know if you feel strongly and i can change",
      "parentUuid": "8ba8eab3_e23dbb4c",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6eace0_75445950",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Please update this comment to say that when there\u0027s a resolve attachment, `mLevelIndexGL` applies to `mResolveImage` and that `mImage` is always single-level. I\u0027m assuming this based on the implementation which is also covering YUV rendering.",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfb4bdc3_bff8056b",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T22:09:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d6eace0_75445950",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "365aadfd_e096f066",
        "filename": "src/libANGLE/renderer/vulkan/RenderbufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Why not just pass `mImage-\u003egetExtents()`?",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "468cb8e5_8a2e47ea",
        "filename": "src/libANGLE/renderer/vulkan/RenderbufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T22:09:04Z",
      "side": 1,
      "message": "indeed",
      "parentUuid": "365aadfd_e096f066",
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04a42606_c6f16e2b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2756,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "You can avoid this by making `mMultisampledImages` and `mMultisampledImageViews` be per-level. This is also probably broken with a test like this (IIRC, GL allows framebuffer attachments of different sizes):\n\n- Create a texture with 2 mips\n- Attach each mip as MSRTT to the same framebuffer\n- Render to the framebuffer, writing to both mips at the same time",
      "range": {
        "startLine": 2749,
        "startChar": 0,
        "endLine": 2756,
        "endChar": 13
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e8c966c_f77b7aa9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2756,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T22:09:04Z",
      "side": 1,
      "message": "\u003e You can avoid this by making mMultisampledImages and mMultisampledImageViews be per-level\n\nthis is bringing in `ImageHelper` copy-constructor complexities. is there a reason why `ImageHelper` doesn\u0027t yet have a copy-constructor?",
      "parentUuid": "04a42606_c6f16e2b",
      "range": {
        "startLine": 2749,
        "startChar": 0,
        "endLine": 2756,
        "endChar": 13
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16528604_598619df",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2756,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-07T02:46:01Z",
      "side": 1,
      "message": "No, we don\u0027t want a copy constructor for image helpers, they are supposed to uniquely hold the image.\n\nBut why? It\u0027s just adding an array level, there should be no copies. Just wrap `mMultisampledImages/Views` in `gl::TexLevelArray` and index it with the vk::LevelIndex",
      "parentUuid": "3e8c966c_f77b7aa9",
      "range": {
        "startLine": 2749,
        "startChar": 0,
        "endLine": 2756,
        "endChar": 13
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "831a3cb5_496c1699",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 923,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T14:43:32Z",
      "side": 1,
      "message": "Avoid number at the beginning, just in case:\n\n```suggestion\nTEST_P(MultisampledRenderToTextureTest, MultipleLevelsMultisampleDraw2DColor)\n```",
      "range": {
        "startLine": 923,
        "startChar": 40,
        "endLine": 923,
        "endChar": 80
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c07fca57_5cdc8c66",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 923,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "831a3cb5_496c1699",
      "range": {
        "startLine": 923,
        "startChar": 40,
        "endLine": 923,
        "endChar": 80
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab650c4_b110f4ec",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 949,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-06T14:43:32Z",
      "side": 1,
      "message": "Looks like a `for` loop ;)",
      "range": {
        "startLine": 933,
        "startChar": 0,
        "endLine": 949,
        "endChar": 0
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "353ce480_9c0d3017",
        "filename": "src/tests/gl_tests/MultisampledRenderToTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 949,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-06T15:31:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ab650c4_b110f4ec",
      "range": {
        "startLine": 933,
        "startChar": 0,
        "endLine": 949,
        "endChar": 0
      },
      "revId": "ac4e4fd97303891bf0b6502e96d35a333cbd3502",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}