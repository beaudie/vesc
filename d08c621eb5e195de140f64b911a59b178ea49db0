{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0be2c5ce_625f4f24",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-01T19:03:43Z",
      "side": 1,
      "message": "these need to be conditional to Vulkan. There\u0027s downstream users of this that don\u0027t want to pull in this dep. You can test on Mac with Vulkan disabled and these folders not present, for one case.",
      "range": {
        "startLine": 538,
        "startChar": 0,
        "endLine": 541,
        "endChar": 44
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60f032e8_17fb6df2",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 541,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0be2c5ce_625f4f24",
      "range": {
        "startLine": 538,
        "startChar": 0,
        "endLine": 541,
        "endChar": 44
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4a3135_b59495ff",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 702,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-01T19:03:43Z",
      "side": 1,
      "message": "do we still need all these?",
      "range": {
        "startLine": 702,
        "startChar": 28,
        "endLine": 702,
        "endChar": 47
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8dc4636_13764227",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 702,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-01T19:25:44Z",
      "side": 1,
      "message": "Yes unfortunately. The Vulkan backend still calls glslang directly once (on device-creation) to warm it up. That could be moved to the translator too, but I haven\u0027t yet found a good way of doing that.\n\nWhen we drop support for glslang it wouldn\u0027t matter, so I don\u0027t particularly plan on attempting to resolve this.",
      "parentUuid": "5b4a3135_b59495ff",
      "range": {
        "startLine": 702,
        "startChar": 28,
        "endLine": 702,
        "endChar": 47
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb9e1310_739e3268",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 702,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-01T19:36:56Z",
      "side": 1,
      "message": "Why not move it into the first call for translation, or to ShInitialize? We could add an alternate ShInitialize command to hint we may need glslang.",
      "parentUuid": "e8dc4636_13764227",
      "range": {
        "startLine": 702,
        "startChar": 28,
        "endLine": 702,
        "endChar": 47
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6692471b_db3f3ad4",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 702,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "First call for translation won\u0027t work. Slowness there was the whole reason warmup on startup was added. Same with ShInitialize, it\u0027s lazily allocated on first compile if I\u0027m not mistaken.\n\nI can certainly add another function for it. Done as a follow up as it also moves the glslang init/finalize call and I have a feeling may get more iterations (see next change in chain)",
      "parentUuid": "fb9e1310_739e3268",
      "range": {
        "startLine": 702,
        "startChar": 28,
        "endLine": 702,
        "endChar": 47
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13e30c05_a0393ed8",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 2
      },
      "lineNbr": 715,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "It\u0027s been a little while since I\u0027ve tried to bridge these files and libANGLE/, but how much work is it for them to both use a common typedef like what\u0027s described in glslang_wrapper_utils.h?\n\n    using SpirvBlob \u003d std::vector\u003cuint32_t\u003e;\n\nI seem to remember it being a bit of a pain and possibly requiring some duplication, but may be worth it.",
      "range": {
        "startLine": 715,
        "startChar": 6,
        "endLine": 715,
        "endChar": 27
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6f9f0eb_241e9896",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 2
      },
      "lineNbr": 715,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "I specifically didn\u0027t want to use SpirvBlob, because technically this could be any binary (like metal or dx bytecode). I chose vector\u003cuint32_t\u003e (same as SpirvBlob) to make life easier until other binaries are supported.\n\nSo we do need two types IMO, but I could give this a name. Done. (also moved SpirvBlob to common/ so it can be used in this change where applicable)",
      "parentUuid": "13e30c05_a0393ed8",
      "range": {
        "startLine": 715,
        "startChar": 6,
        "endLine": 715,
        "endChar": 27
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39a7ad08_3b42acfe",
        "filename": "src/compiler/translator/InfoSink.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-01T19:03:43Z",
      "side": 1,
      "message": "Are these mutually exclusive? Maybe add some ASSERTs.",
      "range": {
        "startLine": 119,
        "startChar": 9,
        "endLine": 119,
        "endChar": 17
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bed8bea_53309b98",
        "filename": "src/compiler/translator/InfoSink.h",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39a7ad08_3b42acfe",
      "range": {
        "startLine": 119,
        "startChar": 9,
        "endLine": 119,
        "endChar": 17
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab0a18b6_4c6b6d63",
        "filename": "src/compiler/translator/TranslatorMetal.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "nit: const ref, or pointer.",
      "range": {
        "startLine": 68,
        "startChar": 55,
        "endLine": 68,
        "endChar": 74
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f71f3f8_6ce99248",
        "filename": "src/compiler/translator/TranslatorMetal.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "Nack. It\u0027s used like this all over the place in translator/, so I\u0027m keeping with the style of this code.",
      "parentUuid": "ab0a18b6_4c6b6d63",
      "range": {
        "startLine": 68,
        "startChar": 55,
        "endLine": 68,
        "endChar": 74
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1818cc1_65c75556",
        "filename": "src/compiler/translator/glslang_wrapper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "Should be able to remove this since you\u0027re defining it at the start.",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 45
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3017d422_d50273ce",
        "filename": "src/compiler/translator/glslang_wrapper.cpp",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e1818cc1_65c75556",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 45
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1644d6aa_3c2fbe4f",
        "filename": "src/libANGLE/Shader.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "SpirvBlob\n\nSame for the rest of these \u0027std::vector\u003cuint32_t\u003e\u0027 declarations.",
      "range": {
        "startLine": 70,
        "startChar": 10,
        "endLine": 70,
        "endChar": 31
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e17d1f10_db724d93",
        "filename": "src/libANGLE/Shader.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1644d6aa_3c2fbe4f",
      "range": {
        "startLine": 70,
        "startChar": 10,
        "endLine": 70,
        "endChar": 31
      },
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cc4cb37_fbaab05f",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "I think should this be UNIMPLEMENTED() instead.   It looks like these are called for GL_ANGLE_translated_shader_source, and it may be a bit rough to crash rather than just return an (essentially) empty string.\n\nAlternatively, these could return the disassembled SPIR-V, since that is the native language that the GLSL was translated to.",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93916661_8dc5f89f",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "I disabled that extension in this change, hence the UNREACHABLE().\n\nI did consider (and still do) returning the disassembly, but my tests showed a 400KB increase in binary size calling into SPIR-V Tools. Summary of discussion I had offline with Jamie regarding this:\n\n- We could generate our own disassembler which will likely be smaller (though unknown by how much)\n- The disassembly might not be useful at all, since this extension is used only by some webgl developers (which may not know or care about ANGLE using Vulkan in the background).\n\nWe decided this could be done later, if and whenever needed.",
      "parentUuid": "9cc4cb37_fbaab05f",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68210042_c03aed67",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "Why is this forced to \u0027false\u0027 now?",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cb8a1ec_a60e7371",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "I removed the ContextVk parameter, so I changed it to a constant. I used false because that\u0027s the less likely configuration to be tested.",
      "parentUuid": "68210042_c03aed67",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f1f4419_3aeb7907",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-01T21:49:04Z",
      "side": 1,
      "message": "Is there a way to avoid this copy of the SpirvBlob data?\n\nIt looks like the gl::Shader::mCompiledBinary already has a copy.",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d19eb9f5_828faee7",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T20:50:55Z",
      "side": 1,
      "message": "I think the shader can be deleted after linking, so gl::Shader::mCompiledBinary can\u0027t be relied on. std::move is not an option either I think.",
      "parentUuid": "7f1f4419_3aeb7907",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddc9bd4d_455b17a4",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-05T06:28:54Z",
      "side": 1,
      "message": "While you\u0027re right that a shader can be deleted after a program is linked, I don\u0027t think that also deletes the ShaderInfo, since that\u0027s currently holding the compiled SPIR-V blob that\u0027s used to create the compute/graphics pipeline in ProgramInfo::initProgram().\n\nI think what you may be able to do instead is something like:\n\n    // Gather variable info and compiled SPIR-V binaries.\n    GlslangWrapperVk::GetShaderCode(contextVk-\u003egetFeatures(), mState, resources,\n                                    \u0026mGlslangProgramInterfaceInfo, \u0026mOriginalShaderInfo.getSpirvBlobs(), \u003c\u003c--- update this\n                                    \u0026mExecutable.mVariableInfoMap);\n\n    // Compile the shaders.\n    angle::Result status \u003d mOriginalShaderInfo.initShaders(\n        mState.getExecutable().getLinkedShaderStages(), [[ no spirvBlobs ]] mExecutable.mVariableInfoMap);\n\nThen you should be able to remove this copy since it already has the right data.",
      "parentUuid": "d19eb9f5_828faee7",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "214a87fd_973b13f1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-05T18:46:59Z",
      "side": 1,
      "message": "It does seem odd to have mOriginalShaderInfo and mSpirvBlobs as well.",
      "parentUuid": "ddc9bd4d_455b17a4",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c81b6d6_c702257b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T15:04:39Z",
      "side": 1,
      "message": "@Tim, sending \u0026mOriginalShaderInfo.getSpirvBlobs() is just shifting the copy. GlslangWrapperVk::GetShaderCode doesn\u0027t do a copy currently, but it would have to if given mOriginalShaderInfo.getSpirvBlobs().\n\n@Jamie, mSpirvBlobs is a member of mOriginalShaderInfo. There is no duplication.",
      "parentUuid": "214a87fd_973b13f1",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e91c5486_d20104fa",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-10T16:13:02Z",
      "side": 1,
      "message": "\u003e @Tim, sending \u0026mOriginalShaderInfo.getSpirvBlobs() is just shifting the copy. GlslangWrapperVk::GetShaderCode doesn\u0027t do a copy currently, but it would have to if given mOriginalShaderInfo.getSpirvBlobs().\n\nMy point was that GlslangWrapperVk::GetShaderCode() would just fill in mOriginalShaderInfo.mSpirvBlobs directly so the copy here wouldn\u0027t be necessary.\n\nHm, unless the link fails and we would lose the previous (good) SPIR-V code.   Is that the copy you\u0027re referring to?",
      "parentUuid": "8c81b6d6_c702257b",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b29d29_1d5334fd",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T17:50:18Z",
      "side": 1,
      "message": "\u003e Hm, unless the link fails and we would lose the previous (good) SPIR-V code.\n\nI hadn\u0027t even thought about that, not sure if it\u0027s an issue. What I was saying is that the code does this:\n\n    // Gather variable info and compiled SPIR-V binaries.\n    gl::ShaderMap\u003cconst angle::spirv::Blob *\u003e spirvBlobs;\n    GlslangWrapperVk::GetShaderCode(contextVk-\u003egetFeatures(), mState, resources,\n                                    \u0026mGlslangProgramInterfaceInfo, \u0026spirvBlobs,\n                                    \u0026mExecutable.mVariableInfoMap);\n\n    // Compile the shaders.\n    angle::Result status \u003d mOriginalShaderInfo.initShaders(\n        mState.getExecutable().getLinkedShaderStages(), spirvBlobs, mExecutable.mVariableInfoMap);\n\nWith this change, `GetShaderCode` gives a pointer to the front-end SPIR-V, and `initShaders` makes a copy of it. With your suggestion, `GetShaderCode` makes a copy of the front-end SPIR-V and `initShaders` does nothing. The number of copies is the same either way.",
      "parentUuid": "e91c5486_d20104fa",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e45296d_1daa6151",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-10T18:23:56Z",
      "side": 1,
      "message": "I see.   Digging in, I think I get that the difference now is really the duplication of the SPIR-V between:\n\n    ShaderState::mCompiledBinary\nand\n    ShaderInfo::mSpirvBlobs\n\nWhat you\u0027re referring to (and I was missing) is ShaderState::mCompiledBinary -\u003e ShaderInfo::mSpirvBlobs needs to occur regardless.   Since the ShaderState can disappear at any time (since shaders can be detached/deleted), we\u0027re stuck with this copy as long as the SPIR-V data is part of the Shader (via ShaderState).\n\nI wonder if there\u0027s a better place to try and store the compiled SPIR-V now, rather than having the Shader own it.   Shader is obviously a nice place, since that\u0027s what the SPIR-V is specific to, but unfortunately Shaders are also ephemeral in relation to Programs.\n\nThis doesn\u0027t need to be fixed to land this CL, but I think it\u0027s worth a TODO so we don\u0027t lose sight of the fact that this duplication exists.",
      "parentUuid": "e6b29d29_1d5334fd",
      "revId": "d08c621eb5e195de140f64b911a59b178ea49db0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}