{
  "comments": [
    {
      "key": {
        "uuid": "48e5d668_a158fe5b",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4939,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-10-01T14:39:54Z",
      "side": 1,
      "message": "Do you think that end2end_tests for this are needed even if there are a bunch of unit tests and also the dEQP tests for this? Personally I rather wouldn\u0027t have as much duplicate testing. If these cover cases that the existing unit tests don\u0027t cover, these could simply be added to unit tests.",
      "revId": "db1d5eac4d2056edefa0b5f62af045f0c5c75bc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59739302_6e4786cc",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4939,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-01T16:47:30Z",
      "side": 1,
      "message": "Generally I think angle_end2end_tests are better. Unit tests don\u0027t run on real devices and often require introspection of the internal ANGLE APIs. end2end_tests can do rendering integration tests. I don\u0027t personally have a problem with the duplicate tests. But I would rather keep the endend_tests if I had to choose.\n\nI also added rendering validation to the tests you suggested that pass.",
      "parentUuid": "48e5d668_a158fe5b",
      "revId": "db1d5eac4d2056edefa0b5f62af045f0c5c75bc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44638618_60dac188",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 4939,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-10-02T07:12:50Z",
      "side": 1,
      "message": "I think that I\u0027d still much prefer most of these tests to be implemented as unit tests for the preprocessor. They\u0027re much simpler to debug and faster to run. In unit tests there\u0027s also existing machinery for testing for specific errors instead of just checking whether compilation fails or succeeds.\n\nAlso there aren\u0027t really more than a few configurations of the preprocessor, so it\u0027s not hard to configure it the right way for the unit tests. It\u0027s maybe good to have one or two tests also in end2end tests to verify that the preprocessor is being used with the correct flags according to the ANGLE context config, but I don\u0027t see a need for more than that.",
      "parentUuid": "59739302_6e4786cc",
      "revId": "db1d5eac4d2056edefa0b5f62af045f0c5c75bc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "720edc7f_9c827ffb",
        "filename": "src/tests/preprocessor_tests/if_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 933,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-10-01T14:39:54Z",
      "side": 1,
      "message": "I think more test coverage should still be added. The tests below check when the defined operator is evaluated:\n\n#define BBB 1\n#define AAA defined(BBB)\n#undef BBB\n#if AAA\n#endif\n\nand similarly:\n\n#define AAA defined(BBB)\n#define BBB 1\n#if AAA\n#endif\n\nand also:\n\n#define BBB 1\n#define AAA(defi, ned) defi ## ned(BBB)\n#if AAA(defi, ned)\n#endif\n\nand:\n\n#define BBB 1\n#define AAA(defined) defined(BBB)\n#if AAA(defined)\n#endif\n\nAnd does this patch allow \"defined\" used as a macro name? Then some other corner cases become possible, like:\n\n#define AAA 1\n#define defined(B) 1\n#undef defined\n#if defined(AAA)",
      "revId": "db1d5eac4d2056edefa0b5f62af045f0c5c75bc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f45210f_c6bf7b6c",
        "filename": "src/tests/preprocessor_tests/if_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 933,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-01T16:47:30Z",
      "side": 1,
      "message": "Thanks for the test suggestions. Added tests for all the suggestions except macro name. I took out the part which allows defined as a macro name. It should be always invalid to use as a macro name.",
      "parentUuid": "720edc7f_9c827ffb",
      "revId": "db1d5eac4d2056edefa0b5f62af045f0c5c75bc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}