{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "36dd6be1_6410ceac",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2022-03-25T15:24:31Z",
      "side": 1,
      "message": "Note: unlike compute shaders, pixel shaders have an output, which lives in the same register space as UAVs. So UAV numbering for pixel shaders can\u0027t start at zero.\n\nHowever, while \"1\" works, I\u0027m not sure if it\u0027s always correct. Is there only a single output? Does D3D have the equivalent of multiple draw buffers? If so, should that increase the first available UAV register? What about vertex shaders?",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aece481f_372238af",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-30T17:24:03Z",
      "side": 1,
      "message": "D3D can support multiple render target outputs. Can you add a test with these storage images and MRT? VS/FS can also have storage buffers, I don\u0027t know if this conflicts.",
      "parentUuid": "36dd6be1_6410ceac",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "491406bb_47410d35",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2022-03-31T16:16:38Z",
      "side": 1,
      "message": "I re-learned out outputs of shaders work in d3d. They don\u0027t use registers like uniforms (just semantic names like `SV_TARGET2`) so I don\u0027t think you need to worry about that. See `DynamicHLSL::generatePixelShaderForOutputSignature` for where that\u0027s generated.\n\nThat said, I\u0027m not sure why you needed to start with register 1. Register 0 is possibly used for our translation uniforms.",
      "parentUuid": "aece481f_372238af",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b6fcba_3001003a",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1216604
      },
      "writtenOn": "2022-03-31T16:59:08Z",
      "side": 1,
      "message": "Here\u0027s the FXC error if I don\u0027t bump the register to 1:\n\nerror X4509: UAV registers live in the same name space as outputs, so they must be bound to at least u1, manual bind to slot u0 failed\n\nBy \"outputs\" in a pixel shader, I assume it means SV_TARGET*. So I think I would need to start above the highest-used target.",
      "parentUuid": "491406bb_47410d35",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "391d5ce0_d30162f8",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1216604
      },
      "writtenOn": "2022-03-31T17:10:26Z",
      "side": 1,
      "message": "And the trick with that is that the output layout seems to be computed in DynamicHLSL::getPixelShaderOutputKey(), which is long after the translator has run. So it\u0027s possible that register assignment might have to move to the dynamic HLSL phase as well. Or maybe I\u0027m wrong and there\u0027s still a chance to retrieve the output layout size in the translator.",
      "parentUuid": "19b6fcba_3001003a",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b1e5c28_7f06314c",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2022-03-31T21:26:03Z",
      "side": 1,
      "message": "It turns out this change (firstUAVRegister) isn\u0027t fixing the register assignments for UAVs for image load/store. It\u0027s fixing the register assignments for UAVs for SSBOs.\n\nIt looks like SSBO declarations will will have to move to the dynamic phase as well, in order to accommodate dynamic output layout in pixel shaders.",
      "parentUuid": "391d5ce0_d30162f8",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f9966d9_8b3264b8",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 376,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2022-04-06T03:39:14Z",
      "side": 1,
      "message": "Done. Dynamic output of SSBO declarations is implemented in an upstream CL.",
      "parentUuid": "5b1e5c28_7f06314c",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9344d156_bff04562",
        "filename": "src/libANGLE/renderer/d3d/DynamicImage2DHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 914,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2022-03-25T15:24:31Z",
      "side": 1,
      "message": "We need to use the passed-in shader, since the pixel shader may have already been modified at link time for dynamic output layouts.\n\nQuestion: is it ok that we\u0027re still referring to the rest of the pixel shaderD3D and shaderGL object above to get register assignments, etc? Are those still correct after the dynamic output layout transformation?",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d7d2a0a_f928976a",
        "filename": "src/libANGLE/renderer/d3d/DynamicImage2DHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 914,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-30T17:24:03Z",
      "side": 1,
      "message": "I don\u0027t recall the details. Hopefully a test with MRT with some storage image rewriting (I believe integer outputs would be one condition?) + storage images would prove it\u0027s correct.",
      "parentUuid": "9344d156_bff04562",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c7dea2_51410a1d",
        "filename": "src/libANGLE/renderer/d3d/DynamicImage2DHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 914,
      "author": {
        "id": 1216604
      },
      "writtenOn": "2022-03-31T17:10:26Z",
      "side": 1,
      "message": "Thanks. I\u0027ll look for a test, or write one.\n\nAny idea why this stuff has to be done at link time? Is there something in other shader stages that can affect the pixel shader output layout? (And similarly for image2D output: do other shader stages affect it, given that up to now it has been a compute-only feature?)",
      "parentUuid": "6d7d2a0a_f928976a",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59d8fd98_ad3e5675",
        "filename": "src/libANGLE/renderer/d3d/DynamicImage2DHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 914,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-31T17:21:19Z",
      "side": 1,
      "message": "I believe it\u0027s not link-time, but draw-time, based on the current Framebuffer. See ProgramD3D::updateCachedOutputLayout. If the FBO has a missing attachment, we adjust the output layout.",
      "parentUuid": "43c7dea2_51410a1d",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96a19538_06a7a6b3",
        "filename": "src/libANGLE/renderer/d3d/DynamicImage2DHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 914,
      "author": {
        "id": 1216604
      },
      "writtenOn": "2022-03-31T17:34:45Z",
      "side": 1,
      "message": "Ahh, good to know, thanks.\n\nIn that case, it\u0027ll all have to be dynamic. I\u0027m going to try leaving the assignments as-is, and then offsetting both the register assignments and the corresponding slots passed in the API calls (not done in this CL).",
      "parentUuid": "59d8fd98_ad3e5675",
      "revId": "e8a87c009e62974de82e7072fffe5418123e8693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}