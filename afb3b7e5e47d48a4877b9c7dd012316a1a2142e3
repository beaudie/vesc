{
  "comments": [
    {
      "key": {
        "uuid": "be14b7b2_3306d3a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T13:27:18Z",
      "side": 1,
      "message": "Not quite done with NBA2K20, but these fixes are progressing another app we\u0027re looking at in tandem.  Would like to land these this morning before an afternoon partner meeting.",
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "242db612_a8de1075",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1847,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-20T14:42:21Z",
      "side": 1,
      "message": "I don\u0027t follow this buffersBound variable. If you want to filter out redundant calls, you should check if the buffer !\u003d replayState-\u003egetArrayBuffer rather than if this is the first bind call. The code below looks like it\u0027ll only work if the VAO uses a single buffer.",
      "range": {
        "startLine": 1847,
        "startChar": 16,
        "endLine": 1847,
        "endChar": 34
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1e2a464_5c06a190",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1847,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T15:11:59Z",
      "side": 1,
      "message": "We have a case in NBA2K20 where the buffer is the same between VAOs and has to be rebound. Checking for buffer ID or pointer equality is insufficient:\n\n    glGenVertexArrays(1, reinterpret_cast\u003cGLuint *\u003e(gReadBuffer));\n    UpdateVertexArrayID(16, 0);\n    glBindVertexArray(gVertexArrayMap[16]);\n    glEnableVertexAttribArray(0);\n    glBindBuffer(GL_ARRAY_BUFFER, gBufferMap[71]);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gBufferMap[72]);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 64, nullptr);\n    glEnableVertexAttribArray(3);\n    glVertexAttribPointer(3, 4, GL_FLOAT, GL_FALSE, 64, reinterpret_cast\u003cconst void *\u003e(12));\n    glEnableVertexAttribArray(7);\n    glVertexAttribPointer(7, 1, GL_UNSIGNED_BYTE, GL_FALSE, 64, reinterpret_cast\u003cconst void *\u003e(44));\n    glEnableVertexAttribArray(8);\n    glVertexAttribPointer(8, 4, GL_FLOAT, GL_FALSE, 64, reinterpret_cast\u003cconst void *\u003e(28));\n    glGenVertexArrays(1, reinterpret_cast\u003cGLuint *\u003e(gReadBuffer));\n    UpdateVertexArrayID(17, 0);\n    glBindVertexArray(gVertexArrayMap[17]);\n    glEnableVertexAttribArray(0);\n    glBindBuffer(GL_ARRAY_BUFFER, gBufferMap[71]);\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gBufferMap[72]);\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 64, nullptr);\n    glEnableVertexAttribArray(3);\n    glVertexAttribPointer(3, 4, GL_FLOAT, GL_FALSE, 64, reinterpret_cast\u003cconst void *\u003e(12));\n    glEnableVertexAttribArray(8);\n    glVertexAttribPointer(8, 4, GL_FLOAT, GL_FALSE, 64, reinterpret_cast\u003cconst void *\u003e(28));",
      "parentUuid": "242db612_a8de1075",
      "range": {
        "startLine": 1847,
        "startChar": 16,
        "endLine": 1847,
        "endChar": 34
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdcd2690_964abe94",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1847,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T16:48:12Z",
      "side": 1,
      "message": "Per offline chat, glVertexAttribPointer establishes the relationship between currently bound array buffer, and the bound vertex array.  Each vertex attrib can have its own array buffer bound, so we can\u0027t just bind one.\n\nElement array buffer on the other hand is per VAO, not per vertex attrib, and it should be bound after the vertex array.\n\nNone of this is spelled out in the spec very well, IMO.  Thanks Jamie for dropping the knowledge.",
      "parentUuid": "f1e2a464_5c06a190",
      "range": {
        "startLine": 1847,
        "startChar": 16,
        "endLine": 1847,
        "endChar": 34
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0900b41_f3e5da02",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1847,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T18:14:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fdcd2690_964abe94",
      "range": {
        "startLine": 1847,
        "startChar": 16,
        "endLine": 1847,
        "endChar": 34
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd9509e7_3cd487f9",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1860,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-20T14:42:21Z",
      "side": 1,
      "message": "this should be outside the loop.. the element array buffer is unique to a vao.",
      "range": {
        "startLine": 1854,
        "startChar": 0,
        "endLine": 1860,
        "endChar": 21
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1ad3b92_35402f48",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1860,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T15:11:59Z",
      "side": 1,
      "message": "Yes, I thought so too, but ANGLE starts firing asserts if you ask for the element buffer without binding an array buffer first.",
      "parentUuid": "dd9509e7_3cd487f9",
      "range": {
        "startLine": 1854,
        "startChar": 0,
        "endLine": 1860,
        "endChar": 21
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e318ced_191eed45",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1860,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T16:48:12Z",
      "side": 1,
      "message": "I must have had some other cruft, it is working now.",
      "parentUuid": "a1ad3b92_35402f48",
      "range": {
        "startLine": 1854,
        "startChar": 0,
        "endLine": 1860,
        "endChar": 21
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd74d92f_e6349bae",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1860,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T18:14:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e318ced_191eed45",
      "range": {
        "startLine": 1854,
        "startChar": 0,
        "endLine": 1860,
        "endChar": 21
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e61a8f7d_c0b8937f",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2657,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-20T14:42:21Z",
      "side": 1,
      "message": "nit: you can use angle::BeginsWith",
      "range": {
        "startLine": 2657,
        "startChar": 16,
        "endLine": 2657,
        "endChar": 59
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bc4913c_9c9e22aa",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2657,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-07-20T16:48:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e61a8f7d_c0b8937f",
      "range": {
        "startLine": 2657,
        "startChar": 16,
        "endLine": 2657,
        "endChar": 59
      },
      "revId": "afb3b7e5e47d48a4877b9c7dd012316a1a2142e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}