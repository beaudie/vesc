{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "03a4895b_6efa0de3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-15T17:39:45Z",
      "side": 1,
      "message": "Leaving this to Shabi.",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ab5b189_30a7fe82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-15T18:38:48Z",
      "side": 1,
      "message": "Let\u0027s land it as-is.",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "962c13a7_59c7b8ab",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-15T00:49:07Z",
      "side": 1,
      "message": "Doing `new` on reset is probably not a good idea, the default constructor could still make allocations etc.\n\nI think we should just call the destructor here. Later on resize(), `new` should be called if necessary (and a lot of times it\u0027s not necessary)",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31199546_df634a24",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-15T01:01:20Z",
      "side": 1,
      "message": "Yes...\n\nI was thinking about that. However if only call destructor we will end up with some element destroyed and some valid. This is a problem. Because destructors will be called automatically for all elements - so double destruction.\n\nI this patch I wanted to keep changes to minimum. Need to rewrite entire class to explicit construction/destruction. This should not be hard. Should I do this?",
      "parentUuid": "962c13a7_59c7b8ab",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2302476_142e01c9",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-15T01:29:08Z",
      "side": 1,
      "message": "\u003e Need to rewrite entire class to explicit construction/destruction. This should not be hard. \n\nNeed to remove `class Storage \u003d std::array\u003cT, N\u003e` parameter for such rewrite.",
      "parentUuid": "31199546_df634a24",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4dd7f7_f8b8b314",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-15T03:17:09Z",
      "side": 1,
      "message": "Ah right I see your point. Let me think it over. It\u0027ll be a lot of error-prone work to switch to using raw memory and placement new/delete.\n\nSo I guess first question is, is this a theoretical fix or are we getting hurt anywhere without the destructor calls? If there is no evidence of this mattering anywhere, I\u0027d say just leave the class be.\n\nOtherwise, the current CL is probably a good compromise as-is.",
      "parentUuid": "d2302476_142e01c9",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd00701_2ea69573",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-15T03:28:40Z",
      "side": 1,
      "message": "\u003e So I guess first question is, is this a theoretical fix or are we getting hurt anywhere without the destructor calls? If there is no evidence of this mattering anywhere, I\u0027d say just leave the class be.\n\nI once made code using `FastVector` and was getting UBs (crashing). That is how I found the bug. Spend some time to figure why I getting crashes... So I want this fixed.\n\nIn the current code `ResourceUse` class may be affected (uses `clear` and `resize`). Not sure if old `Serial` values will cause any harm tho.\n\n\u003e Otherwise, the current CL is probably a good compromise as-is.\n\nIt should work. Most places use trivial types. Others only add elements. It is rare to reuse capacity with non trivial types.\n\n\u003e It\u0027ll be a lot of error-prone work to switch to using raw memory and placement new/delete.\n\nI am currently trying to implement this. Yes, need to be very careful and probably add more tests.",
      "parentUuid": "2f4dd7f7_f8b8b314",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f534d4e4_98b5b2a9",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-15T03:33:18Z",
      "side": 1,
      "message": "\u003e I am currently trying to implement this.\n\nMaybe hold off for a moment, let\u0027s see what Charlie thinks too. As you said, it\u0027s rare to need this, and even then the default constructor of our objects are likely not to be heavy anyway.\n\nSo I\u0027d say just go with this change and call it a day.",
      "parentUuid": "3cd00701_2ea69573",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca1613fc_a84373ef",
        "filename": "src/common/FastVector.h",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-15T03:34:41Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "f534d4e4_98b5b2a9",
      "revId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d72cf584ac7279dc65cee4a575e004acbf953b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}