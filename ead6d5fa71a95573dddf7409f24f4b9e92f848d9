{
  "comments": [
    {
      "key": {
        "uuid": "bc75d2ff_303f555e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 541,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-24T19:06:08Z",
      "side": 1,
      "message": "Why don\u0027t the sizes need to match here?",
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9877be5_a7ddd238",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 541,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-04-24T19:09:20Z",
      "side": 1,
      "message": "This function is used in both glBufferData and glBufferSubData calls",
      "parentUuid": "bc75d2ff_303f555e",
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b152f106_bac5d648",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 467,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-24T19:31:57Z",
      "side": 1,
      "message": "This disable flag adds some extra conditions to this file that add a bit of technical complexity. I think we can remove it. If you totally get rid of the flag and use the mAlignment normally, etc, what tests start to fail?",
      "range": {
        "startLine": 467,
        "startChar": 6,
        "endLine": 467,
        "endChar": 27
      },
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a62fa3e5_b7d3d52d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 467,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-04-24T19:43:06Z",
      "side": 1,
      "message": "angle_end2end_tests.exe --gtest_filter\u003dShaderStorageBufferTest31.UnsizedArrayLength/ES3_1_Vulkan* will start to fail. This is mainly due to the `roundUp(sizeInBytes, mAlignment);` in `allocate()` and how mAlignment gets set in `updateAlignment()`.\n\nAdditionally, we use this as an indicator in `releaseInFlightBuffers()` to determine if the buffers are compatible to be reused or not.",
      "parentUuid": "b152f106_bac5d648",
      "range": {
        "startLine": 467,
        "startChar": 6,
        "endLine": 467,
        "endChar": 27
      },
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db4ebd5d_bf785797",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 467,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-27T16:21:13Z",
      "side": 1,
      "message": "OK, I was able to patch this in locally and understand what\u0027s going wrong. It seems our non-coherent-atom-size fixing is messing up the \"alignment \u003d\u003d 1\" aspect of your CL. You can work around this by passing in the buffer size as the initial size for the DynamicBuffer in BufferVk::setData. Then in DynamicBuffer::allocate use this line to compute a new sizeToAllocate:\n\n    size_t sizeToAllocate \u003d\n        sizeInBytes \u003d\u003d mInitialSize ? sizeInBytes : roundUp(sizeInBytes, mAlignment);\n\nThis is easier than fighting with the alignment and doesn\u0027t require any extra state tracking code or special casing. Just running this through CI to verify it doesn\u0027t introduce any new bugs:\n\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2167918",
      "parentUuid": "a62fa3e5_b7d3d52d",
      "range": {
        "startLine": 467,
        "startChar": 6,
        "endLine": 467,
        "endChar": 27
      },
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba40b77c_3c5e2ac7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 467,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-04-27T16:33:03Z",
      "side": 1,
      "message": "isn\u0027t mInitialSize used for a debug purpose? wont that conflict with this new behavior? one precludes the other right?",
      "parentUuid": "db4ebd5d_bf785797",
      "range": {
        "startLine": 467,
        "startChar": 6,
        "endLine": 467,
        "endChar": 27
      },
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83c2de1e_3bb153e6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 467,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-27T17:40:39Z",
      "side": 1,
      "message": "Initial size is maybe not so helpful in this case. It\u0027s intended to be the large size of the ring buffer. However.. this whole buffer binding size thing is bothering me to the point where I started looking at it. I think we can bind the right size in the descriptor set to fix these unsized array tests. I\u0027ll upload a patch in a sec and try it on the bots.",
      "parentUuid": "ba40b77c_3c5e2ac7",
      "range": {
        "startLine": 467,
        "startChar": 6,
        "endLine": 467,
        "endChar": 27
      },
      "revId": "ead6d5fa71a95573dddf7409f24f4b9e92f848d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}