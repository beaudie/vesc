{
  "comments": [
    {
      "key": {
        "uuid": "2d564428_61b02484",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-23T18:49:04Z",
      "side": 1,
      "message": "Could you please add an ASSERT in `gl::normalizedToFloat\u003cN, T\u003e(input)` that `(input \u0026 ~((1 \u003c\u003c N) - 1)) \u003d\u003d 0`?\n\nAdditionally, you can try changing `D24X8` to contain:\n\n    uint32_t X : 8;\n    uint32_t D : 24;\n\ninstead of:\n\n    uint32_t D;\n\nmaking it behave identically to `D24S8` for `D`.",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158b425a_05b430ad",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1298773
      },
      "writtenOn": "2020-05-25T05:32:35Z",
      "side": 1,
      "message": "Done, except I had to put depth first to make the test pass:\nuint32_t D : 24;\nuint32_t X : 8;\n\nDidn\u0027t you mean the above?\nI believe bitfields are in memory order, so the depth bits should come first?",
      "parentUuid": "2d564428_61b02484",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2574f3fc_e2301fa4",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-01T14:42:34Z",
      "side": 1,
      "message": "I followed the same pattern as D24S8, but yes the second comes more naturally to me.\n\nIt\u0027s not clear to me why the former fails though, \"memory order\" could mean big or little endian, so there is no correct answer to which should come first. Are we reinterpretting raw data to this struct?",
      "parentUuid": "158b425a_05b430ad",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97d4425a_dc8fc1e4",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1298773
      },
      "writtenOn": "2020-06-02T05:50:11Z",
      "side": 1,
      "message": "Yes, we reinterpret to this structure. See here: http://anglebug.com/4573#c11.",
      "parentUuid": "2574f3fc_e2301fa4",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d68c6f8_7b89f26c",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-02T14:34:39Z",
      "side": 1,
      "message": "Hmm, we don\u0027t actually test on any big-endian systems, so there\u0027s probably a bug there.\n\nStill, it doesn\u0027t make sense that D24S8 and D24X8 have a different order of the members. I wonder if you could write a test for both those formats to try to establish what ordering (at least on little-endian, which is all we have now) is correct for either of them?",
      "parentUuid": "97d4425a_dc8fc1e4",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "884a691b_c1e71ff3",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1298773
      },
      "writtenOn": "2020-06-03T05:53:37Z",
      "side": 1,
      "message": "I can do that, no problem. At the moment I\u0027m on leave, so I only read and respond to emails now. I will return in about 3 weeks, and can take a look at it then.\n\nI\u0027ll dig into bitfield layout guarantees a bit as well.\n\nThe general advice I\u0027ve heard is to not use bitfields, though. Especially when you care about the memory layout, since that\u0027s not defined by the standard if I understand correctly.\n\nShould ANGLE be written such that it can run on both big-endian and little-endian systems?\nI think it\u0027s generally considered safe to just assume little-endian these days.",
      "parentUuid": "3d68c6f8_7b89f26c",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79267a4f_64d6e796",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-03T13:56:55Z",
      "side": 1,
      "message": "No problem. Yes, reinterpreting to bitfield does not have standard-defined behavior, but compilers+architectures can define the behavior, so it\u0027s not an issue if all the platforms ANGLE runs on have this behavior defined.\n\nWe have made similar decisions elsewhere based on the fact that ANGLE only runs on little-endian platforms, so no big deal.",
      "parentUuid": "884a691b_c1e71ff3",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "268b7937_3bf28920",
        "filename": "src/image_util/imageformats.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1835,
      "author": {
        "id": 1298773
      },
      "writtenOn": "2020-06-23T10:08:21Z",
      "side": 1,
      "message": "FYI, I probably won\u0027t get to adding these tests for quite a while, probably a month at least. I have so many potential driver bugs to look into at the moment.",
      "parentUuid": "79267a4f_64d6e796",
      "range": {
        "startLine": 1835,
        "startChar": 21,
        "endLine": 1835,
        "endChar": 38
      },
      "revId": "d4241f8f20a2dd6d7ff8fc073bf4d7db66e50d4a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}