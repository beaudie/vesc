// GENERATED FILE - DO NOT EDIT.
// Generated by gen_frame_capture_replay.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// frame_capture_replay_autogen.cpp:
//   Replay GL calls being captured

#include "frame_capture_replay_autogen.h"

#include <export.h>
#include "angle_gl.h"

#include "common/debug.h"
#include "libANGLE/frame_capture_utils_autogen.h"

namespace gl
{

void CallCaptureReplay(gl::Context *context, const angle::CallCapture &call)
{
    switch (call.entryPoint)
    {
        case gl::EntryPoint::LoadIdentity:
        {

            context->loadIdentity();
            return;
        }
        case gl::EntryPoint::ActiveShaderProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->activeShaderProgram(param0, param1);
            return;
        }
        case gl::EntryPoint::GetProgramiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getProgramiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::UniformMatrix2x4fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix2x4fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::DeleteTransformFeedbacks:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteTransformFeedbacks(param0, param1);
            return;
        }
        case gl::EntryPoint::PolygonOffsetx:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->polygonOffsetx(param0, param1);
            return;
        }
        case gl::EntryPoint::GetProgramInfoLog:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLchar *param3;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getProgramInfoLog(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform2fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->uniform2fv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttribBinding:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->vertexAttribBinding(param0, param1);
            return;
        }
        case gl::EntryPoint::BindTransformFeedback:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->bindTransformFeedback(param0, param1);
            return;
        }
        case gl::EntryPoint::Uniform1uiv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->uniform1uiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttrib4fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->vertexAttrib4fv(param0, param1);
            return;
        }
        case gl::EntryPoint::BlitFramebuffer:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            GLint param6;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[6].type,
                                           call.params.getParamCaptures()[6].value, &param6);

            GLint param7;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[7].type,
                                           call.params.getParamCaptures()[7].value, &param7);

            GLbitfield param8;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[8].type,
                                                call.params.getParamCaptures()[8].value, &param8);

            GLenum param9;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[9].type,
                                            call.params.getParamCaptures()[9].value, &param9);

            context->blitFramebuffer(param0, param1, param2, param3, param4, param5, param6, param7,
                                     param8, param9);
            return;
        }
        case gl::EntryPoint::IsEnabled:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isEnabled(param0);
            return;
        }
        case gl::EntryPoint::AttachShader:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->attachShader(param0, param1);
            return;
        }
        case gl::EntryPoint::TexImage3D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLint param6;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[6].type,
                                           call.params.getParamCaptures()[6].value, &param6);

            GLenum param7;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[7].type,
                                            call.params.getParamCaptures()[7].value, &param7);

            GLenum param8;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[8].type,
                                            call.params.getParamCaptures()[8].value, &param8);

            const void *param9;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[9].type,
                                                  call.params.getParamCaptures()[9].value, &param9);

            context->texImage3D(param0, param1, param2, param3, param4, param5, param6, param7,
                                param8, param9);
            return;
        }
        case gl::EntryPoint::BlendEquation:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->blendEquation(param0);
            return;
        }
        case gl::EntryPoint::GetVertexAttribfv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getVertexAttribfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetClipPlanex:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfixed *param1;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->getClipPlanex(param0, param1);
            return;
        }
        case gl::EntryPoint::RenderbufferStorage:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->renderbufferStorage(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetClipPlanef:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat *param1;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->getClipPlanef(param0, param1);
            return;
        }
        case gl::EntryPoint::MemoryBarrierByRegion:
        {
            GLbitfield param0;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            context->memoryBarrierByRegion(param0);
            return;
        }
        case gl::EntryPoint::DeleteSync:
        {
            GLsync param0;
            angle::AccessParamValue<GLsync>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->deleteSync(param0);
            return;
        }
        case gl::EntryPoint::DrawArraysIndirect:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            const void *param1;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[1].type,
                                                  call.params.getParamCaptures()[1].value, &param1);

            context->drawArraysIndirect(param0, param1);
            return;
        }
        case gl::EntryPoint::Uniform3i:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            context->uniform3i(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::BlendColor:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->blendColor(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Materialf:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->materialf(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CompressedTexImage3D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLint param6;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[6].type,
                                           call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            const void *param8;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[8].type,
                                                  call.params.getParamCaptures()[8].value, &param8);

            context->compressedTexImage3D(param0, param1, param2, param3, param4, param5, param6,
                                          param7, param8);
            return;
        }
        case gl::EntryPoint::Uniform3f:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->uniform3f(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::PointSizex:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->pointSizex(param0);
            return;
        }
        case gl::EntryPoint::Viewport:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->viewport(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::UniformMatrix3fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix3fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::UniformMatrix4x3fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix4x3fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::DeleteVertexArrays:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteVertexArrays(param0, param1);
            return;
        }
        case gl::EntryPoint::VertexAttrib3f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->vertexAttrib3f(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::CompressedTexSubImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLenum param6;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[6].type,
                                            call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            const void *param8;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[8].type,
                                                  call.params.getParamCaptures()[8].value, &param8);

            context->compressedTexSubImage2D(param0, param1, param2, param3, param4, param5, param6,
                                             param7, param8);
            return;
        }
        case gl::EntryPoint::GetMaterialxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            GLfixed *param2;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getMaterialxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::StencilMaskSeparate:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->stencilMaskSeparate(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform4iv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLint *param3;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[3].type,
                                                   call.params.getParamCaptures()[3].value,
                                                   &param3);

            context->programUniform4iv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramBinary:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const void *param2;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[2].type,
                                                  call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->programBinary(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform4ui:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            GLuint param4;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            context->uniform4ui(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetLightxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            GLfixed *param2;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getLightxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetMultisamplefv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getMultisamplefv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::AlphaFunc:
        {
            AlphaTestFunc param0;
            angle::AccessParamValue<AlphaTestFunc>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->alphaFunc(param0, param1);
            return;
        }
        case gl::EntryPoint::GetProgramResourceLocation:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLchar *param2;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->getProgramResourceLocation(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexStorage2D:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->texStorage2D(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ProgramParameteri:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->programParameteri(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::FramebufferTexture2D:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            TextureTarget param2;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            TextureID param3;
            angle::AccessParamValue<TextureID>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            context->framebufferTexture2D(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::VertexBindingDivisor:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->vertexBindingDivisor(param0, param1);
            return;
        }
        case gl::EntryPoint::Uniform4fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->uniform4fv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttribIFormat:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            VertexAttribType param2;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->vertexAttribIFormat(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::PointSize:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->pointSize(param0);
            return;
        }
        case gl::EntryPoint::UniformBlockBinding:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->uniformBlockBinding(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::FenceSync:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLbitfield param1;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            context->fenceSync(param0, param1);
            return;
        }
        case gl::EntryPoint::GetSamplerParameterfv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getSamplerParameterfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform1fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->programUniform1fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetTexEnvfv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getTexEnvfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::BindAttribLocation:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLchar *param2;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->bindAttribLocation(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ValidateProgramPipeline:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->validateProgramPipeline(param0);
            return;
        }
        case gl::EntryPoint::BindBufferBase:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            BufferID param2;
            angle::AccessParamValue<BufferID>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->bindBufferBase(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DrawElementsIndirect:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            DrawElementsType param1;
            angle::AccessParamValue<DrawElementsType>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            const void *param2;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[2].type,
                                                  call.params.getParamCaptures()[2].value, &param2);

            context->drawElementsIndirect(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Scalex:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->scalex(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GenQueries:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genQueries(param0, param1);
            return;
        }
        case gl::EntryPoint::ResumeTransformFeedback:
        {

            context->resumeTransformFeedback();
            return;
        }
        case gl::EntryPoint::Scalef:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->scalef(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetUniformfv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getUniformfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetBooleani_v:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLboolean *param2;
            angle::AccessParamValue<GLboolean *>(call.params.getParamCaptures()[2].type,
                                                 call.params.getParamCaptures()[2].value, &param2);

            context->getBooleani_v(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::SampleMaski:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLbitfield param1;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            context->sampleMaski(param0, param1);
            return;
        }
        case gl::EntryPoint::TexParameterx:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->texParameterx(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ReadPixels:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLenum param4;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            GLenum param5;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[5].type,
                                            call.params.getParamCaptures()[5].value, &param5);

            void *param6;
            angle::AccessParamValue<void *>(call.params.getParamCaptures()[6].type,
                                            call.params.getParamCaptures()[6].value, &param6);

            context->readPixels(param0, param1, param2, param3, param4, param5, param6);
            return;
        }
        case gl::EntryPoint::TexParameterf:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->texParameterf(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexParameteri:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->texParameteri(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetUniformiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getUniformiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DepthRangex:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->depthRangex(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform3iv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLint *param3;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[3].type,
                                                   call.params.getParamCaptures()[3].value,
                                                   &param3);

            context->programUniform3iv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetBufferParameteri64v:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint64 *param2;
            angle::AccessParamValue<GLint64 *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getBufferParameteri64v(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CreateProgram:
        {

            context->createProgram();
            return;
        }
        case gl::EntryPoint::DepthRangef:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->depthRangef(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform2f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->programUniform2f(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform3fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->uniform3fv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform2i:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            context->programUniform2i(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Fogx:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->fogx(param0, param1);
            return;
        }
        case gl::EntryPoint::GetActiveUniformBlockName:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei *param3;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLchar *param4;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[4].type,
                                              call.params.getParamCaptures()[4].value, &param4);

            context->getActiveUniformBlockName(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::Scissor:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->scissor(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Fogf:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->fogf(param0, param1);
            return;
        }
        case gl::EntryPoint::BeginTransformFeedback:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            context->beginTransformFeedback(param0);
            return;
        }
        case gl::EntryPoint::GetActiveAttrib:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei *param3;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLint *param4;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLenum *param5;
            angle::AccessParamValue<GLenum *>(call.params.getParamCaptures()[5].type,
                                              call.params.getParamCaptures()[5].value, &param5);

            GLchar *param6;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[6].type,
                                              call.params.getParamCaptures()[6].value, &param6);

            context->getActiveAttrib(param0, param1, param2, param3, param4, param5, param6);
            return;
        }
        case gl::EntryPoint::DepthFunc:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->depthFunc(param0);
            return;
        }
        case gl::EntryPoint::Uniform2uiv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->uniform2uiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Color4ub:
        {
            GLubyte param0;
            angle::AccessParamValue<GLubyte>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLubyte param1;
            angle::AccessParamValue<GLubyte>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLubyte param2;
            angle::AccessParamValue<GLubyte>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLubyte param3;
            angle::AccessParamValue<GLubyte>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->color4ub(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::BindVertexArray:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->bindVertexArray(param0);
            return;
        }
        case gl::EntryPoint::StencilOpSeparate:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLenum param3;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->stencilOpSeparate(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GenSamplers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genSamplers(param0, param1);
            return;
        }
        case gl::EntryPoint::GetTexParameteriv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getTexParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform4f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLfloat param5;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->programUniform4f(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::GetProgramResourceName:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei *param4;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[4].type,
                                               call.params.getParamCaptures()[4].value, &param4);

            GLchar *param5;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[5].type,
                                              call.params.getParamCaptures()[5].value, &param5);

            context->getProgramResourceName(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::BindSampler:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->bindSampler(param0, param1);
            return;
        }
        case gl::EntryPoint::GetUniformuiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint *param2;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->getUniformuiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform2fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->programUniform2fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::BindBuffer:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            BufferID param1;
            angle::AccessParamValue<BufferID>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->bindBuffer(param0, param1);
            return;
        }
        case gl::EntryPoint::Finish:
        {

            context->finish();
            return;
        }
        case gl::EntryPoint::ClearStencil:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            context->clearStencil(param0);
            return;
        }
        case gl::EntryPoint::Color4x:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->color4x(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GenBuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            BufferID *param1;
            angle::AccessParamValue<BufferID *>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            context->genBuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform4fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->programUniform4fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramUniform2iv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLint *param3;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[3].type,
                                                   call.params.getParamCaptures()[3].value,
                                                   &param3);

            context->programUniform2iv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Color4f:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->color4f(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::VertexAttribI4iv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLint *param1;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[1].type,
                                                   call.params.getParamCaptures()[1].value,
                                                   &param1);

            context->vertexAttribI4iv(param0, param1);
            return;
        }
        case gl::EntryPoint::GetProgramResourceIndex:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLchar *param2;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->getProgramResourceIndex(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DrawRangeElements:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            DrawElementsType param4;
            angle::AccessParamValue<DrawElementsType>(call.params.getParamCaptures()[4].type,
                                                      call.params.getParamCaptures()[4].value,
                                                      &param4);

            const void *param5;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[5].type,
                                                  call.params.getParamCaptures()[5].value, &param5);

            context->drawRangeElements(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::BindFramebuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->bindFramebuffer(param0, param1);
            return;
        }
        case gl::EntryPoint::ReleaseShaderCompiler:
        {

            context->releaseShaderCompiler();
            return;
        }
        case gl::EntryPoint::BlendFuncSeparate:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLenum param3;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->blendFuncSeparate(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::StencilFuncSeparate:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->stencilFuncSeparate(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ShaderSource:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLchar *const *param2;
            angle::AccessParamValue<const GLchar *const *>(call.params.getParamCaptures()[2].type,
                                                           call.params.getParamCaptures()[2].value,
                                                           &param2);

            const GLint *param3;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[3].type,
                                                   call.params.getParamCaptures()[3].value,
                                                   &param3);

            context->shaderSource(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform2ui:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->uniform2ui(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Frustumx:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfixed param4;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLfixed param5;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->frustumx(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::GetActiveUniformsiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            GLenum param3;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            GLint *param4;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->getActiveUniformsiv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::BufferData:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLsizeiptr param1;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            const void *param2;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[2].type,
                                                  call.params.getParamCaptures()[2].value, &param2);

            BufferUsage param3;
            angle::AccessParamValue<BufferUsage>(call.params.getParamCaptures()[3].type,
                                                 call.params.getParamCaptures()[3].value, &param3);

            context->bufferData(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramUniform1f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->programUniform1f(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexSubImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLenum param6;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[6].type,
                                            call.params.getParamCaptures()[6].value, &param6);

            GLenum param7;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[7].type,
                                            call.params.getParamCaptures()[7].value, &param7);

            const void *param8;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[8].type,
                                                  call.params.getParamCaptures()[8].value, &param8);

            context->texSubImage2D(param0, param1, param2, param3, param4, param5, param6, param7,
                                   param8);
            return;
        }
        case gl::EntryPoint::Enable:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->enable(param0);
            return;
        }
        case gl::EntryPoint::IsProgramPipeline:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isProgramPipeline(param0);
            return;
        }
        case gl::EntryPoint::GetVertexAttribiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getVertexAttribiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ShaderBinary:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->shaderBinary(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::DrawBuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLenum *param1;
            angle::AccessParamValue<const GLenum *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->drawBuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::DeleteProgramPipelines:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteProgramPipelines(param0, param1);
            return;
        }
        case gl::EntryPoint::Normal3x:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->normal3x(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::LineWidthx:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->lineWidthx(param0);
            return;
        }
        case gl::EntryPoint::GetError:
        {

            context->getError();
            return;
        }
        case gl::EntryPoint::Materialxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            const GLfixed *param2;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->materialxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DeleteRenderbuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const RenderbufferID *param1;
            angle::AccessParamValue<const RenderbufferID *>(call.params.getParamCaptures()[1].type,
                                                            call.params.getParamCaptures()[1].value,
                                                            &param1);

            context->deleteRenderbuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::Normal3f:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->normal3f(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::IsRenderbuffer:
        {
            RenderbufferID param0;
            angle::AccessParamValue<RenderbufferID>(call.params.getParamCaptures()[0].type,
                                                    call.params.getParamCaptures()[0].value,
                                                    &param0);

            context->isRenderbuffer(param0);
            return;
        }
        case gl::EntryPoint::DepthMask:
        {
            GLboolean param0;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            context->depthMask(param0);
            return;
        }
        case gl::EntryPoint::IsShader:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isShader(param0);
            return;
        }
        case gl::EntryPoint::Rotatef:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->rotatef(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::UseProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->useProgram(param0);
            return;
        }
        case gl::EntryPoint::StencilOp:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->stencilOp(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::FramebufferTextureLayer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            TextureID param2;
            angle::AccessParamValue<TextureID>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            context->framebufferTextureLayer(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetShaderInfoLog:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLchar *param3;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getShaderInfoLog(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::TexEnvfv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->texEnvfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform1iv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLint *param3;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[3].type,
                                                   call.params.getParamCaptures()[3].value,
                                                   &param3);

            context->programUniform1iv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramUniform3ui:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            GLuint param4;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            context->programUniform3ui(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix3fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix3fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::LoadMatrixf:
        {
            const GLfloat *param0;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[0].type,
                                                     call.params.getParamCaptures()[0].value,
                                                     &param0);

            context->loadMatrixf(param0);
            return;
        }
        case gl::EntryPoint::GenTransformFeedbacks:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genTransformFeedbacks(param0, param1);
            return;
        }
        case gl::EntryPoint::VertexPointer:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            VertexAttribType param1;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            context->vertexPointer(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::LoadMatrixx:
        {
            const GLfixed *param0;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[0].type,
                                                     call.params.getParamCaptures()[0].value,
                                                     &param0);

            context->loadMatrixx(param0);
            return;
        }
        case gl::EntryPoint::LogicOp:
        {
            LogicalOperation param0;
            angle::AccessParamValue<LogicalOperation>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            context->logicOp(param0);
            return;
        }
        case gl::EntryPoint::RenderbufferStorageMultisample:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->renderbufferStorageMultisample(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ActiveTexture:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->activeTexture(param0);
            return;
        }
        case gl::EntryPoint::IsProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isProgram(param0);
            return;
        }
        case gl::EntryPoint::Uniform1ui:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->uniform1ui(param0, param1);
            return;
        }
        case gl::EntryPoint::GenTextures:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            TextureID *param1;
            angle::AccessParamValue<TextureID *>(call.params.getParamCaptures()[1].type,
                                                 call.params.getParamCaptures()[1].value, &param1);

            context->genTextures(param0, param1);
            return;
        }
        case gl::EntryPoint::GetAttribLocation:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLchar *param1;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->getAttribLocation(param0, param1);
            return;
        }
        case gl::EntryPoint::VertexAttribI4ui:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            GLuint param4;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            context->vertexAttribI4ui(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::IsSampler:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isSampler(param0);
            return;
        }
        case gl::EntryPoint::Orthof:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLfloat param5;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->orthof(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::Uniform4i:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            context->uniform4i(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ClearBufferuiv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->clearBufferuiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CompressedTexImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            const void *param7;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[7].type,
                                                  call.params.getParamCaptures()[7].value, &param7);

            context->compressedTexImage2D(param0, param1, param2, param3, param4, param5, param6,
                                          param7);
            return;
        }
        case gl::EntryPoint::GetShaderPrecisionFormat:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLint *param3;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->getShaderPrecisionFormat(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::IsSync:
        {
            GLsync param0;
            angle::AccessParamValue<GLsync>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isSync(param0);
            return;
        }
        case gl::EntryPoint::GenVertexArrays:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genVertexArrays(param0, param1);
            return;
        }
        case gl::EntryPoint::Orthox:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfixed param4;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLfixed param5;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->orthox(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::VertexAttribI4i:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            context->vertexAttribI4i(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ProgramUniform3f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->programUniform3f(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::Uniform3iv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->uniform3iv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexStorage2DMultisample:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLboolean param5;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[5].type,
                                               call.params.getParamCaptures()[5].value, &param5);

            context->texStorage2DMultisample(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::TexParameteriv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->texParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform3i:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            context->programUniform3i(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix3x4fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix3x4fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::CopyTexSubImage3D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            GLint param6;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[6].type,
                                           call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            GLsizei param8;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[8].type,
                                             call.params.getParamCaptures()[8].value, &param8);

            context->copyTexSubImage3D(param0, param1, param2, param3, param4, param5, param6,
                                       param7, param8);
            return;
        }
        case gl::EntryPoint::GetInteger64v:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint64 *param1;
            angle::AccessParamValue<GLint64 *>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->getInteger64v(param0, param1);
            return;
        }
        case gl::EntryPoint::PointParameterfv:
        {
            PointParameter param0;
            angle::AccessParamValue<PointParameter>(call.params.getParamCaptures()[0].type,
                                                    call.params.getParamCaptures()[0].value,
                                                    &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->pointParameterfv(param0, param1);
            return;
        }
        case gl::EntryPoint::GetString:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->getString(param0);
            return;
        }
        case gl::EntryPoint::TexEnvf:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->texEnvf(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttrib3fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->vertexAttrib3fv(param0, param1);
            return;
        }
        case gl::EntryPoint::TexEnvx:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->texEnvx(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetTexLevelParameteriv:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLint *param3;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->getTexLevelParameteriv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::DrawArraysInstanced:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->drawArraysInstanced(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::BindProgramPipeline:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->bindProgramPipeline(param0);
            return;
        }
        case gl::EntryPoint::DispatchCompute:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->dispatchCompute(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexStorage3D:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->texStorage3D(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::UniformMatrix4x2fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix4x2fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::EnableClientState:
        {
            ClientVertexArrayType param0;
            angle::AccessParamValue<ClientVertexArrayType>(call.params.getParamCaptures()[0].type,
                                                           call.params.getParamCaptures()[0].value,
                                                           &param0);

            context->enableClientState(param0);
            return;
        }
        case gl::EntryPoint::GetBufferParameteriv:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getBufferParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::SamplerParameterfv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->samplerParameterfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CopyTexImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            GLint param7;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[7].type,
                                           call.params.getParamCaptures()[7].value, &param7);

            context->copyTexImage2D(param0, param1, param2, param3, param4, param5, param6, param7);
            return;
        }
        case gl::EntryPoint::FlushMappedBufferRange:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLintptr param1;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            GLsizeiptr param2;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[2].type,
                                                call.params.getParamCaptures()[2].value, &param2);

            context->flushMappedBufferRange(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Lightfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->lightfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetFramebufferAttachmentParameteriv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLint *param3;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->getFramebufferAttachmentParameteriv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetVertexAttribPointerv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            void **param2;
            angle::AccessParamValue<void **>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getVertexAttribPointerv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DrawElementsInstanced:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            DrawElementsType param2;
            angle::AccessParamValue<DrawElementsType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->drawElementsInstanced(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ColorPointer:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            VertexAttribType param1;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            context->colorPointer(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetShaderiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getShaderiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TransformFeedbackVaryings:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLchar *const *param2;
            angle::AccessParamValue<const GLchar *const *>(call.params.getParamCaptures()[2].type,
                                                           call.params.getParamCaptures()[2].value,
                                                           &param2);

            GLenum param3;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->transformFeedbackVaryings(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::IsQuery:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isQuery(param0);
            return;
        }
        case gl::EntryPoint::ClearBufferfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->clearBufferfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::IsVertexArray:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isVertexArray(param0);
            return;
        }
        case gl::EntryPoint::CreateShaderProgramv:
        {
            ShaderType param0;
            angle::AccessParamValue<ShaderType>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLchar *const *param2;
            angle::AccessParamValue<const GLchar *const *>(call.params.getParamCaptures()[2].type,
                                                           call.params.getParamCaptures()[2].value,
                                                           &param2);

            context->createShaderProgramv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetTexParameterxv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfixed *param2;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getTexParameterxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetAttachedShaders:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLuint *param3;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getAttachedShaders(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ClearBufferfi:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            context->clearBufferfi(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramUniform4ui:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            GLuint param4;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            GLuint param5;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[5].type,
                                            call.params.getParamCaptures()[5].value, &param5);

            context->programUniform4ui(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::BlendFunc:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->blendFunc(param0, param1);
            return;
        }
        case gl::EntryPoint::LinkProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->linkProgram(param0);
            return;
        }
        case gl::EntryPoint::Uniform1f:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->uniform1f(param0, param1);
            return;
        }
        case gl::EntryPoint::DisableClientState:
        {
            ClientVertexArrayType param0;
            angle::AccessParamValue<ClientVertexArrayType>(call.params.getParamCaptures()[0].type,
                                                           call.params.getParamCaptures()[0].value,
                                                           &param0);

            context->disableClientState(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniform4i:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            context->programUniform4i(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::GetFramebufferParameteriv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getFramebufferParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Uniform1i:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            context->uniform1i(param0, param1);
            return;
        }
        case gl::EntryPoint::VertexAttrib4f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->vertexAttrib4f(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::PointParameterxv:
        {
            PointParameter param0;
            angle::AccessParamValue<PointParameter>(call.params.getParamCaptures()[0].type,
                                                    call.params.getParamCaptures()[0].value,
                                                    &param0);

            const GLfixed *param1;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->pointParameterxv(param0, param1);
            return;
        }
        case gl::EntryPoint::CompressedTexSubImage3D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            GLenum param8;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[8].type,
                                            call.params.getParamCaptures()[8].value, &param8);

            GLsizei param9;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[9].type,
                                             call.params.getParamCaptures()[9].value, &param9);

            const void *param10;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[10].type,
                                                  call.params.getParamCaptures()[10].value,
                                                  &param10);

            context->compressedTexSubImage3D(param0, param1, param2, param3, param4, param5, param6,
                                             param7, param8, param9, param10);
            return;
        }
        case gl::EntryPoint::Uniform4f:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->uniform4f(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetFragDataLocation:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLchar *param1;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->getFragDataLocation(param0, param1);
            return;
        }
        case gl::EntryPoint::SamplerParameteriv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->samplerParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::IsTexture:
        {
            TextureID param0;
            angle::AccessParamValue<TextureID>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            context->isTexture(param0);
            return;
        }
        case gl::EntryPoint::BeginQuery:
        {
            QueryType param0;
            angle::AccessParamValue<QueryType>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->beginQuery(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform3uiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLuint *param3;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[3].type,
                                                    call.params.getParamCaptures()[3].value,
                                                    &param3);

            context->programUniform3uiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetStringi:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->getStringi(param0, param1);
            return;
        }
        case gl::EntryPoint::GetUniformLocation:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLchar *param1;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->getUniformLocation(param0, param1);
            return;
        }
        case gl::EntryPoint::GetFixedv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfixed *param1;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->getFixedv(param0, param1);
            return;
        }
        case gl::EntryPoint::PixelStorei:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            context->pixelStorei(param0, param1);
            return;
        }
        case gl::EntryPoint::IsBuffer:
        {
            BufferID param0;
            angle::AccessParamValue<BufferID>(call.params.getParamCaptures()[0].type,
                                              call.params.getParamCaptures()[0].value, &param0);

            context->isBuffer(param0);
            return;
        }
        case gl::EntryPoint::GetInteger64i_v:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint64 *param2;
            angle::AccessParamValue<GLint64 *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getInteger64i_v(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Flush:
        {

            context->flush();
            return;
        }
        case gl::EntryPoint::InvalidateSubFramebuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLenum *param2;
            angle::AccessParamValue<const GLenum *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            context->invalidateSubFramebuffer(param0, param1, param2, param3, param4, param5,
                                              param6);
            return;
        }
        case gl::EntryPoint::GetQueryiv:
        {
            QueryType param0;
            angle::AccessParamValue<QueryType>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getQueryiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CheckFramebufferStatus:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->checkFramebufferStatus(param0);
            return;
        }
        case gl::EntryPoint::TexCoordPointer:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            VertexAttribType param1;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            context->texCoordPointer(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::DispatchComputeIndirect:
        {
            GLintptr param0;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[0].type,
                                              call.params.getParamCaptures()[0].value, &param0);

            context->dispatchComputeIndirect(param0);
            return;
        }
        case gl::EntryPoint::FrontFace:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->frontFace(param0);
            return;
        }
        case gl::EntryPoint::GetSamplerParameteriv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getSamplerParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Lightf:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->lightf(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetBufferPointerv:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            void **param2;
            angle::AccessParamValue<void **>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getBufferPointerv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Uniform1iv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->uniform1iv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GenFramebuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genFramebuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::ClearDepthf:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->clearDepthf(param0);
            return;
        }
        case gl::EntryPoint::ClearDepthx:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->clearDepthx(param0);
            return;
        }
        case gl::EntryPoint::Uniform4uiv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->uniform4uiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::IsFramebuffer:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isFramebuffer(param0);
            return;
        }
        case gl::EntryPoint::BlendEquationSeparate:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->blendEquationSeparate(param0, param1);
            return;
        }
        case gl::EntryPoint::Lightx:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->lightx(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform3fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->programUniform3fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::MultMatrixf:
        {
            const GLfloat *param0;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[0].type,
                                                     call.params.getParamCaptures()[0].value,
                                                     &param0);

            context->multMatrixf(param0);
            return;
        }
        case gl::EntryPoint::VertexAttrib1f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->vertexAttrib1f(param0, param1);
            return;
        }
        case gl::EntryPoint::UniformMatrix2x3fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix2x3fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::SamplerParameteri:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->samplerParameteri(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::MultMatrixx:
        {
            const GLfixed *param0;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[0].type,
                                                     call.params.getParamCaptures()[0].value,
                                                     &param0);

            context->multMatrixx(param0);
            return;
        }
        case gl::EntryPoint::EnableVertexAttribArray:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->enableVertexAttribArray(param0);
            return;
        }
        case gl::EntryPoint::PointParameterx:
        {
            PointParameter param0;
            angle::AccessParamValue<PointParameter>(call.params.getParamCaptures()[0].type,
                                                    call.params.getParamCaptures()[0].value,
                                                    &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->pointParameterx(param0, param1);
            return;
        }
        case gl::EntryPoint::DrawArrays:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->drawArrays(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetSynciv:
        {
            GLsync param0;
            angle::AccessParamValue<GLsync>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei *param3;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLint *param4;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->getSynciv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::PointParameterf:
        {
            PointParameter param0;
            angle::AccessParamValue<PointParameter>(call.params.getParamCaptures()[0].type,
                                                    call.params.getParamCaptures()[0].value,
                                                    &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->pointParameterf(param0, param1);
            return;
        }
        case gl::EntryPoint::TexEnviv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->texEnviv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexSubImage3D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            GLenum param8;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[8].type,
                                            call.params.getParamCaptures()[8].value, &param8);

            GLenum param9;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[9].type,
                                            call.params.getParamCaptures()[9].value, &param9);

            const void *param10;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[10].type,
                                                  call.params.getParamCaptures()[10].value,
                                                  &param10);

            context->texSubImage3D(param0, param1, param2, param3, param4, param5, param6, param7,
                                   param8, param9, param10);
            return;
        }
        case gl::EntryPoint::CreateShader:
        {
            ShaderType param0;
            angle::AccessParamValue<ShaderType>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            context->createShader(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniform2ui:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->programUniform2ui(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetTexLevelParameterfv:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLfloat *param3;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            context->getTexLevelParameterfv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::VertexAttribDivisor:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->vertexAttribDivisor(param0, param1);
            return;
        }
        case gl::EntryPoint::GetIntegerv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint *param1;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->getIntegerv(param0, param1);
            return;
        }
        case gl::EntryPoint::GetShaderSource:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLchar *param3;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getShaderSource(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetActiveUniform:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei *param3;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLint *param4;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLenum *param5;
            angle::AccessParamValue<GLenum *>(call.params.getParamCaptures()[5].type,
                                              call.params.getParamCaptures()[5].value, &param5);

            GLchar *param6;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[6].type,
                                              call.params.getParamCaptures()[6].value, &param6);

            context->getActiveUniform(param0, param1, param2, param3, param4, param5, param6);
            return;
        }
        case gl::EntryPoint::DeleteBuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const BufferID *param1;
            angle::AccessParamValue<const BufferID *>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            context->deleteBuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::AlphaFuncx:
        {
            AlphaTestFunc param0;
            angle::AccessParamValue<AlphaTestFunc>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->alphaFuncx(param0, param1);
            return;
        }
        case gl::EntryPoint::GetTexEnviv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getTexEnviv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix4x3fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix4x3fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetQueryObjectuiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint *param2;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->getQueryObjectuiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttrib2fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->vertexAttrib2fv(param0, param1);
            return;
        }
        case gl::EntryPoint::TexImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            GLenum param6;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[6].type,
                                            call.params.getParamCaptures()[6].value, &param6);

            GLenum param7;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[7].type,
                                            call.params.getParamCaptures()[7].value, &param7);

            const void *param8;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[8].type,
                                                  call.params.getParamCaptures()[8].value, &param8);

            context->texImage2D(param0, param1, param2, param3, param4, param5, param6, param7,
                                param8);
            return;
        }
        case gl::EntryPoint::PushMatrix:
        {

            context->pushMatrix();
            return;
        }
        case gl::EntryPoint::SampleCoveragex:
        {
            GLclampx param0;
            angle::AccessParamValue<GLclampx>(call.params.getParamCaptures()[0].type,
                                              call.params.getParamCaptures()[0].value, &param0);

            GLboolean param1;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->sampleCoveragex(param0, param1);
            return;
        }
        case gl::EntryPoint::EndQuery:
        {
            QueryType param0;
            angle::AccessParamValue<QueryType>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            context->endQuery(param0);
            return;
        }
        case gl::EntryPoint::GetProgramResourceiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            const GLenum *param4;
            angle::AccessParamValue<const GLenum *>(call.params.getParamCaptures()[4].type,
                                                    call.params.getParamCaptures()[4].value,
                                                    &param4);

            GLsizei param5;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            GLsizei *param6;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[6].type,
                                               call.params.getParamCaptures()[6].value, &param6);

            GLint *param7;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            context->getProgramResourceiv(param0, param1, param2, param3, param4, param5, param6,
                                          param7);
            return;
        }
        case gl::EntryPoint::VertexAttribFormat:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            VertexAttribType param2;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLuint param4;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            context->vertexAttribFormat(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::Clear:
        {
            GLbitfield param0;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            context->clear(param0);
            return;
        }
        case gl::EntryPoint::GetProgramPipelineiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getProgramPipelineiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ReadBuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->readBuffer(param0);
            return;
        }
        case gl::EntryPoint::GetTransformFeedbackVarying:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLsizei *param3;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLsizei *param4;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[4].type,
                                               call.params.getParamCaptures()[4].value, &param4);

            GLenum *param5;
            angle::AccessParamValue<GLenum *>(call.params.getParamCaptures()[5].type,
                                              call.params.getParamCaptures()[5].value, &param5);

            GLchar *param6;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[6].type,
                                              call.params.getParamCaptures()[6].value, &param6);

            context->getTransformFeedbackVarying(param0, param1, param2, param3, param4, param5,
                                                 param6);
            return;
        }
        case gl::EntryPoint::Uniform3uiv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLuint *param2;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->uniform3uiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GenerateMipmap:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            context->generateMipmap(param0);
            return;
        }
        case gl::EntryPoint::TexEnvi:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->texEnvi(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::BindBufferRange:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            BufferID param2;
            angle::AccessParamValue<BufferID>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            GLintptr param3;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            GLsizeiptr param4;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[4].type,
                                                call.params.getParamCaptures()[4].value, &param4);

            context->bindBufferRange(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::TexParameterxv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLfixed *param2;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->texParameterxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix2x4fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix2x4fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::Rotatex:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->rotatex(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix2fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix2fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetProgramInterfaceiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLint *param3;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->getProgramInterfaceiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::PauseTransformFeedback:
        {

            context->pauseTransformFeedback();
            return;
        }
        case gl::EntryPoint::DeleteShader:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->deleteShader(param0);
            return;
        }
        case gl::EntryPoint::BindImageTexture:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            TextureID param1;
            angle::AccessParamValue<TextureID>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLenum param5;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[5].type,
                                            call.params.getParamCaptures()[5].value, &param5);

            GLenum param6;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[6].type,
                                            call.params.getParamCaptures()[6].value, &param6);

            context->bindImageTexture(param0, param1, param2, param3, param4, param5, param6);
            return;
        }
        case gl::EntryPoint::VertexAttrib2f:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->vertexAttrib2f(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Uniform2f:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->uniform2f(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CompileShader:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->compileShader(param0);
            return;
        }
        case gl::EntryPoint::LineWidth:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            context->lineWidth(param0);
            return;
        }
        case gl::EntryPoint::Uniform2i:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->uniform2i(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Lightxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            const GLfixed *param2;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->lightxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Uniform1fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->uniform1fv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetProgramPipelineInfoLog:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLchar *param3;
            angle::AccessParamValue<GLchar *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getProgramPipelineInfoLog(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::MatrixMode:
        {
            MatrixType param0;
            angle::AccessParamValue<MatrixType>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            context->matrixMode(param0);
            return;
        }
        case gl::EntryPoint::ClearColorx:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->clearColorx(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::EndTransformFeedback:
        {

            context->endTransformFeedback();
            return;
        }
        case gl::EntryPoint::GetProgramBinary:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLsizei *param2;
            angle::AccessParamValue<GLsizei *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLenum *param3;
            angle::AccessParamValue<GLenum *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            void *param4;
            angle::AccessParamValue<void *>(call.params.getParamCaptures()[4].type,
                                            call.params.getParamCaptures()[4].value, &param4);

            context->getProgramBinary(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetMaterialfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getMaterialfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DeleteTextures:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const TextureID *param1;
            angle::AccessParamValue<const TextureID *>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            context->deleteTextures(param0, param1);
            return;
        }
        case gl::EntryPoint::ShadeModel:
        {
            ShadingModel param0;
            angle::AccessParamValue<ShadingModel>(call.params.getParamCaptures()[0].type,
                                                  call.params.getParamCaptures()[0].value, &param0);

            context->shadeModel(param0);
            return;
        }
        case gl::EntryPoint::Materialfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->materialfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::DeleteProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->deleteProgram(param0);
            return;
        }
        case gl::EntryPoint::GetUniformBlockIndex:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLchar *param1;
            angle::AccessParamValue<const GLchar *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->getUniformBlockIndex(param0, param1);
            return;
        }
        case gl::EntryPoint::DetachShader:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->detachShader(param0, param1);
            return;
        }
        case gl::EntryPoint::CopyTexSubImage2D:
        {
            TextureTarget param0;
            angle::AccessParamValue<TextureTarget>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            GLint param3;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[3].type,
                                           call.params.getParamCaptures()[3].value, &param3);

            GLint param4;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[4].type,
                                           call.params.getParamCaptures()[4].value, &param4);

            GLint param5;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[5].type,
                                           call.params.getParamCaptures()[5].value, &param5);

            GLsizei param6;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[6].type,
                                             call.params.getParamCaptures()[6].value, &param6);

            GLsizei param7;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[7].type,
                                             call.params.getParamCaptures()[7].value, &param7);

            context->copyTexSubImage2D(param0, param1, param2, param3, param4, param5, param6,
                                       param7);
            return;
        }
        case gl::EntryPoint::SampleCoverage:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLboolean param1;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->sampleCoverage(param0, param1);
            return;
        }
        case gl::EntryPoint::DrawElements:
        {
            PrimitiveMode param0;
            angle::AccessParamValue<PrimitiveMode>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            DrawElementsType param2;
            angle::AccessParamValue<DrawElementsType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            context->drawElements(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::MapBufferRange:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLintptr param1;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            GLsizeiptr param2;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[2].type,
                                                call.params.getParamCaptures()[2].value, &param2);

            GLbitfield param3;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[3].type,
                                                call.params.getParamCaptures()[3].value, &param3);

            context->mapBufferRange(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::BindRenderbuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            RenderbufferID param1;
            angle::AccessParamValue<RenderbufferID>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->bindRenderbuffer(param0, param1);
            return;
        }
        case gl::EntryPoint::PopMatrix:
        {

            context->popMatrix();
            return;
        }
        case gl::EntryPoint::DeleteFramebuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteFramebuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::UseProgramStages:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLbitfield param1;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->useProgramStages(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetInternalformativ:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLint *param4;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->getInternalformativ(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix4fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix4fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::FramebufferRenderbuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            RenderbufferID param3;
            angle::AccessParamValue<RenderbufferID>(call.params.getParamCaptures()[3].type,
                                                    call.params.getParamCaptures()[3].value,
                                                    &param3);

            context->framebufferRenderbuffer(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::IsTransformFeedback:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->isTransformFeedback(param0);
            return;
        }
        case gl::EntryPoint::MultiTexCoord4x:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfixed param3;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfixed param4;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->multiTexCoord4x(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::UnmapBuffer:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            context->unmapBuffer(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix4x2fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix4x2fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::MultiTexCoord4f:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            context->multiTexCoord4f(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::Translatex:
        {
            GLfixed param0;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->translatex(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetVertexAttribIuiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint *param2;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->getVertexAttribIuiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::LightModelfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->lightModelfv(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform1uiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLuint *param3;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[3].type,
                                                    call.params.getParamCaptures()[3].value,
                                                    &param3);

            context->programUniform1uiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform2iv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->uniform2iv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Materialx:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            MaterialParameter param1;
            angle::AccessParamValue<MaterialParameter>(call.params.getParamCaptures()[1].type,
                                                       call.params.getParamCaptures()[1].value,
                                                       &param1);

            GLfixed param2;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->materialx(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Translatef:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->translatef(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::StencilMask:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->stencilMask(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniform4uiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLuint *param3;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[3].type,
                                                    call.params.getParamCaptures()[3].value,
                                                    &param3);

            context->programUniform4uiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::PolygonOffset:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->polygonOffset(param0, param1);
            return;
        }
        case gl::EntryPoint::FramebufferParameteri:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->framebufferParameteri(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Frustumf:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            GLfloat param4;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            GLfloat param5;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[5].type,
                                             call.params.getParamCaptures()[5].value, &param5);

            context->frustumf(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::GetIntegeri_v:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getIntegeri_v(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ProgramUniform2uiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            const GLuint *param3;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[3].type,
                                                    call.params.getParamCaptures()[3].value,
                                                    &param3);

            context->programUniform2uiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::LightModelxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfixed *param1;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->lightModelxv(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform1i:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLint param2;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[2].type,
                                           call.params.getParamCaptures()[2].value, &param2);

            context->programUniform1i(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::CullFace:
        {
            CullFaceMode param0;
            angle::AccessParamValue<CullFaceMode>(call.params.getParamCaptures()[0].type,
                                                  call.params.getParamCaptures()[0].value, &param0);

            context->cullFace(param0);
            return;
        }
        case gl::EntryPoint::BindTexture:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            TextureID param1;
            angle::AccessParamValue<TextureID>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->bindTexture(param0, param1);
            return;
        }
        case gl::EntryPoint::StencilFunc:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->stencilFunc(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Fogxv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfixed *param1;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->fogxv(param0, param1);
            return;
        }
        case gl::EntryPoint::CopyBufferSubData:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            BufferBinding param1;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[1].type,
                                                   call.params.getParamCaptures()[1].value,
                                                   &param1);

            GLintptr param2;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            GLintptr param3;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            GLsizeiptr param4;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[4].type,
                                                call.params.getParamCaptures()[4].value, &param4);

            context->copyBufferSubData(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::NormalPointer:
        {
            VertexAttribType param0;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const void *param2;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[2].type,
                                                  call.params.getParamCaptures()[2].value, &param2);

            context->normalPointer(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexParameterfv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            const GLfloat *param2;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->texParameterfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::UniformMatrix3x4fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix3x4fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::DeleteSamplers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteSamplers(param0, param1);
            return;
        }
        case gl::EntryPoint::VertexAttribIPointer:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            VertexAttribType param2;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            const void *param4;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[4].type,
                                                  call.params.getParamCaptures()[4].value, &param4);

            context->vertexAttribIPointer(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::VertexAttribPointer:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            VertexAttribType param2;
            angle::AccessParamValue<VertexAttribType>(call.params.getParamCaptures()[2].type,
                                                      call.params.getParamCaptures()[2].value,
                                                      &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            GLsizei param4;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[4].type,
                                             call.params.getParamCaptures()[4].value, &param4);

            const void *param5;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[5].type,
                                                  call.params.getParamCaptures()[5].value, &param5);

            context->vertexAttribPointer(param0, param1, param2, param3, param4, param5);
            return;
        }
        case gl::EntryPoint::VertexAttrib1fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->vertexAttrib1fv(param0, param1);
            return;
        }
        case gl::EntryPoint::SamplerParameterf:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->samplerParameterf(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetPointerv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            void **param1;
            angle::AccessParamValue<void **>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->getPointerv(param0, param1);
            return;
        }
        case gl::EntryPoint::GetFloatv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat *param1;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            context->getFloatv(param0, param1);
            return;
        }
        case gl::EntryPoint::GetVertexAttribIiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getVertexAttribIiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ClientWaitSync:
        {
            GLsync param0;
            angle::AccessParamValue<GLsync>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLbitfield param1;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            GLuint64 param2;
            angle::AccessParamValue<GLuint64>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->clientWaitSync(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::TexEnvxv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            const GLfixed *param2;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[2].type,
                                                     call.params.getParamCaptures()[2].value,
                                                     &param2);

            context->texEnvxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::Fogfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->fogfv(param0, param1);
            return;
        }
        case gl::EntryPoint::GenProgramPipelines:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLuint *param1;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            context->genProgramPipelines(param0, param1);
            return;
        }
        case gl::EntryPoint::DeleteQueries:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->deleteQueries(param0, param1);
            return;
        }
        case gl::EntryPoint::Uniform3ui:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLuint param3;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[3].type,
                                            call.params.getParamCaptures()[3].value, &param3);

            context->uniform3ui(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::InvalidateFramebuffer:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLenum *param2;
            angle::AccessParamValue<const GLenum *>(call.params.getParamCaptures()[2].type,
                                                    call.params.getParamCaptures()[2].value,
                                                    &param2);

            context->invalidateFramebuffer(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetBooleanv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLboolean *param1;
            angle::AccessParamValue<GLboolean *>(call.params.getParamCaptures()[1].type,
                                                 call.params.getParamCaptures()[1].value, &param1);

            context->getBooleanv(param0, param1);
            return;
        }
        case gl::EntryPoint::Hint:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            context->hint(param0, param1);
            return;
        }
        case gl::EntryPoint::MemoryBarrier:
        {
            GLbitfield param0;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[0].type,
                                                call.params.getParamCaptures()[0].value, &param0);

            context->memoryBarrier(param0);
            return;
        }
        case gl::EntryPoint::DisableVertexAttribArray:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->disableVertexAttribArray(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix3x2fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix3x2fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::ValidateProgram:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->validateProgram(param0);
            return;
        }
        case gl::EntryPoint::BufferSubData:
        {
            BufferBinding param0;
            angle::AccessParamValue<BufferBinding>(call.params.getParamCaptures()[0].type,
                                                   call.params.getParamCaptures()[0].value,
                                                   &param0);

            GLintptr param1;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            GLsizeiptr param2;
            angle::AccessParamValue<GLsizeiptr>(call.params.getParamCaptures()[2].type,
                                                call.params.getParamCaptures()[2].value, &param2);

            const void *param3;
            angle::AccessParamValue<const void *>(call.params.getParamCaptures()[3].type,
                                                  call.params.getParamCaptures()[3].value, &param3);

            context->bufferSubData(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetTexEnvxv:
        {
            TextureEnvTarget param0;
            angle::AccessParamValue<TextureEnvTarget>(call.params.getParamCaptures()[0].type,
                                                      call.params.getParamCaptures()[0].value,
                                                      &param0);

            TextureEnvParameter param1;
            angle::AccessParamValue<TextureEnvParameter>(call.params.getParamCaptures()[1].type,
                                                         call.params.getParamCaptures()[1].value,
                                                         &param1);

            GLfixed *param2;
            angle::AccessParamValue<GLfixed *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getTexEnvxv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetActiveUniformBlockiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLuint param1;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLenum param2;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            GLint *param3;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->getActiveUniformBlockiv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ClipPlanex:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfixed *param1;
            angle::AccessParamValue<const GLfixed *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->clipPlanex(param0, param1);
            return;
        }
        case gl::EntryPoint::UniformMatrix2fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix2fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::LightModelf:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->lightModelf(param0, param1);
            return;
        }
        case gl::EntryPoint::GetTexParameterfv:
        {
            TextureType param0;
            angle::AccessParamValue<TextureType>(call.params.getParamCaptures()[0].type,
                                                 call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getTexParameterfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GetLightfv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            LightParameter param1;
            angle::AccessParamValue<LightParameter>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            GLfloat *param2;
            angle::AccessParamValue<GLfloat *>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            context->getLightfv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::LightModelx:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLfixed param1;
            angle::AccessParamValue<GLfixed>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            context->lightModelx(param0, param1);
            return;
        }
        case gl::EntryPoint::Disable:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->disable(param0);
            return;
        }
        case gl::EntryPoint::ClipPlanef:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLfloat *param1;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[1].type,
                                                     call.params.getParamCaptures()[1].value,
                                                     &param1);

            context->clipPlanef(param0, param1);
            return;
        }
        case gl::EntryPoint::ProgramUniform1ui:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLuint param2;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[2].type,
                                            call.params.getParamCaptures()[2].value, &param2);

            context->programUniform1ui(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::VertexAttribI4uiv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            const GLuint *param1;
            angle::AccessParamValue<const GLuint *>(call.params.getParamCaptures()[1].type,
                                                    call.params.getParamCaptures()[1].value,
                                                    &param1);

            context->vertexAttribI4uiv(param0, param1);
            return;
        }
        case gl::EntryPoint::ClearColor:
        {
            GLfloat param0;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            GLfloat param1;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLfloat param2;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLfloat param3;
            angle::AccessParamValue<GLfloat>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->clearColor(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ColorMask:
        {
            GLboolean param0;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[0].type,
                                               call.params.getParamCaptures()[0].value, &param0);

            GLboolean param1;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[1].type,
                                               call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            context->colorMask(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::GetRenderbufferParameteriv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLenum param1;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[1].type,
                                            call.params.getParamCaptures()[1].value, &param1);

            GLint *param2;
            angle::AccessParamValue<GLint *>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            context->getRenderbufferParameteriv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::ClearBufferiv:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->clearBufferiv(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::GenRenderbuffers:
        {
            GLsizei param0;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[0].type,
                                             call.params.getParamCaptures()[0].value, &param0);

            RenderbufferID *param1;
            angle::AccessParamValue<RenderbufferID *>(call.params.getParamCaptures()[1].type,
                                                      call.params.getParamCaptures()[1].value,
                                                      &param1);

            context->genRenderbuffers(param0, param1);
            return;
        }
        case gl::EntryPoint::UniformMatrix4fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix4fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::UniformMatrix3x2fv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            GLboolean param2;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[2].type,
                                               call.params.getParamCaptures()[2].value, &param2);

            const GLfloat *param3;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[3].type,
                                                     call.params.getParamCaptures()[3].value,
                                                     &param3);

            context->uniformMatrix3x2fv(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::ClientActiveTexture:
        {
            GLenum param0;
            angle::AccessParamValue<GLenum>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            context->clientActiveTexture(param0);
            return;
        }
        case gl::EntryPoint::ProgramUniformMatrix2x3fv:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLint param1;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[1].type,
                                           call.params.getParamCaptures()[1].value, &param1);

            GLsizei param2;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[2].type,
                                             call.params.getParamCaptures()[2].value, &param2);

            GLboolean param3;
            angle::AccessParamValue<GLboolean>(call.params.getParamCaptures()[3].type,
                                               call.params.getParamCaptures()[3].value, &param3);

            const GLfloat *param4;
            angle::AccessParamValue<const GLfloat *>(call.params.getParamCaptures()[4].type,
                                                     call.params.getParamCaptures()[4].value,
                                                     &param4);

            context->programUniformMatrix2x3fv(param0, param1, param2, param3, param4);
            return;
        }
        case gl::EntryPoint::GetUniformIndices:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLchar *const *param2;
            angle::AccessParamValue<const GLchar *const *>(call.params.getParamCaptures()[2].type,
                                                           call.params.getParamCaptures()[2].value,
                                                           &param2);

            GLuint *param3;
            angle::AccessParamValue<GLuint *>(call.params.getParamCaptures()[3].type,
                                              call.params.getParamCaptures()[3].value, &param3);

            context->getUniformIndices(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::WaitSync:
        {
            GLsync param0;
            angle::AccessParamValue<GLsync>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            GLbitfield param1;
            angle::AccessParamValue<GLbitfield>(call.params.getParamCaptures()[1].type,
                                                call.params.getParamCaptures()[1].value, &param1);

            GLuint64 param2;
            angle::AccessParamValue<GLuint64>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            context->waitSync(param0, param1, param2);
            return;
        }
        case gl::EntryPoint::BindVertexBuffer:
        {
            GLuint param0;
            angle::AccessParamValue<GLuint>(call.params.getParamCaptures()[0].type,
                                            call.params.getParamCaptures()[0].value, &param0);

            BufferID param1;
            angle::AccessParamValue<BufferID>(call.params.getParamCaptures()[1].type,
                                              call.params.getParamCaptures()[1].value, &param1);

            GLintptr param2;
            angle::AccessParamValue<GLintptr>(call.params.getParamCaptures()[2].type,
                                              call.params.getParamCaptures()[2].value, &param2);

            GLsizei param3;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[3].type,
                                             call.params.getParamCaptures()[3].value, &param3);

            context->bindVertexBuffer(param0, param1, param2, param3);
            return;
        }
        case gl::EntryPoint::Uniform4iv:
        {
            GLint param0;
            angle::AccessParamValue<GLint>(call.params.getParamCaptures()[0].type,
                                           call.params.getParamCaptures()[0].value, &param0);

            GLsizei param1;
            angle::AccessParamValue<GLsizei>(call.params.getParamCaptures()[1].type,
                                             call.params.getParamCaptures()[1].value, &param1);

            const GLint *param2;
            angle::AccessParamValue<const GLint *>(call.params.getParamCaptures()[2].type,
                                                   call.params.getParamCaptures()[2].value,
                                                   &param2);

            context->uniform4iv(param0, param1, param2);
            return;
        }
        default:
            UNREACHABLE();
    }
}

}  // namespace gl
