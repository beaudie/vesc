// GENERATED FILE - DO NOT EDIT.
// Generated by ./src/libANGLE/gen_internal_enums.py using data from internal_enums.json.
//
// Copyright 2017 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// InternalEnums_autogen.cpp:
//   Implements ANGLE-specific enums classes for GLEnum and functions operating
//   on them.

#include "common/debug.h"
#include "libANGLE/InternalEnums_autogen.h"

namespace gl
{

template<>
BufferUsage FromGLenum<BufferUsage>(GLenum from)
{
    switch(from)
    {
        case GL_DYNAMIC_COPY: return BufferUsage::DynamicCopy;
        case GL_DYNAMIC_DRAW: return BufferUsage::DynamicDraw;
        case GL_DYNAMIC_READ: return BufferUsage::DynamicRead;
        case GL_STATIC_COPY: return BufferUsage::StaticCopy;
        case GL_STATIC_DRAW: return BufferUsage::StaticDraw;
        case GL_STATIC_READ: return BufferUsage::StaticRead;
        case GL_STREAM_COPY: return BufferUsage::StreamCopy;
        case GL_STREAM_DRAW: return BufferUsage::StreamDraw;
        case GL_STREAM_READ: return BufferUsage::StreamRead;
        default: return BufferUsage::InvalidEnum;
    }
}

GLenum ToGLenum(BufferUsage from)
{
    switch(from)
    {
        case BufferUsage::DynamicCopy: return GL_DYNAMIC_COPY;
        case BufferUsage::DynamicDraw: return GL_DYNAMIC_DRAW;
        case BufferUsage::DynamicRead: return GL_DYNAMIC_READ;
        case BufferUsage::StaticCopy: return GL_STATIC_COPY;
        case BufferUsage::StaticDraw: return GL_STATIC_DRAW;
        case BufferUsage::StaticRead: return GL_STATIC_READ;
        case BufferUsage::StreamCopy: return GL_STREAM_COPY;
        case BufferUsage::StreamDraw: return GL_STREAM_DRAW;
        case BufferUsage::StreamRead: return GL_STREAM_READ;
        default: UNREACHABLE();
    }
}

template<>
CullMode FromGLenum<CullMode>(GLenum from)
{
    switch(from)
    {
        case GL_BACK: return CullMode::Back;
        case GL_FRONT: return CullMode::Front;
        case GL_FRONT_AND_BACK: return CullMode::FrontAndBack;
        default: return CullMode::InvalidEnum;
    }
}

GLenum ToGLenum(CullMode from)
{
    switch(from)
    {
        case CullMode::Back: return GL_BACK;
        case CullMode::Front: return GL_FRONT;
        case CullMode::FrontAndBack: return GL_FRONT_AND_BACK;
        default: UNREACHABLE();
    }
}

}  // namespace gl
