// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2023 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// context_private_call_gles_autogen.h:
//   Helpers that set/get state that is entirely privately accessed by the context.

#ifndef LIBANGLE_CONTEXT_PRIVATE_CALL_gles_AUTOGEN_H_
#define LIBANGLE_CONTEXT_PRIVATE_CALL_gles_AUTOGEN_H_

#include "libANGLE/Context.h"

namespace gl
{
void ContextPrivateActiveTexture(Context *context, GLenum texture);
void ContextPrivateBlendColor(Context *context,
                              GLfloat red,
                              GLfloat green,
                              GLfloat blue,
                              GLfloat alpha);
void ContextPrivateBlendEquation(Context *context, GLenum mode);
void ContextPrivateBlendEquationSeparate(Context *context, GLenum modeRGB, GLenum modeAlpha);
void ContextPrivateBlendFunc(Context *context, GLenum sfactor, GLenum dfactor);
void ContextPrivateBlendFuncSeparate(Context *context,
                                     GLenum sfactorRGB,
                                     GLenum dfactorRGB,
                                     GLenum sfactorAlpha,
                                     GLenum dfactorAlpha);
void ContextPrivateClearColor(Context *context,
                              GLfloat red,
                              GLfloat green,
                              GLfloat blue,
                              GLfloat alpha);
void ContextPrivateClearDepthf(Context *context, GLfloat d);
void ContextPrivateClearStencil(Context *context, GLint s);
void ContextPrivateColorMask(Context *context,
                             GLboolean red,
                             GLboolean green,
                             GLboolean blue,
                             GLboolean alpha);
void ContextPrivateCullFace(Context *context, CullFaceMode modePacked);
void ContextPrivateDepthFunc(Context *context, GLenum func);
void ContextPrivateDepthMask(Context *context, GLboolean flag);
void ContextPrivateDepthRangef(Context *context, GLfloat n, GLfloat f);
void ContextPrivateDisable(Context *context, GLenum cap);
void ContextPrivateEnable(Context *context, GLenum cap);
void ContextPrivateFrontFace(Context *context, GLenum mode);
void ContextPrivateHint(Context *context, GLenum target, GLenum mode);
GLboolean ContextPrivateIsEnabled(Context *context, GLenum cap);
void ContextPrivateLineWidth(Context *context, GLfloat width);
void ContextPrivatePixelStorei(Context *context, GLenum pname, GLint param);
void ContextPrivatePolygonOffset(Context *context, GLfloat factor, GLfloat units);
void ContextPrivateSampleCoverage(Context *context, GLfloat value, GLboolean invert);
void ContextPrivateScissor(Context *context, GLint x, GLint y, GLsizei width, GLsizei height);
void ContextPrivateStencilFunc(Context *context, GLenum func, GLint ref, GLuint mask);
void ContextPrivateStencilFuncSeparate(Context *context,
                                       GLenum face,
                                       GLenum func,
                                       GLint ref,
                                       GLuint mask);
void ContextPrivateStencilMask(Context *context, GLuint mask);
void ContextPrivateStencilMaskSeparate(Context *context, GLenum face, GLuint mask);
void ContextPrivateStencilOp(Context *context, GLenum fail, GLenum zfail, GLenum zpass);
void ContextPrivateStencilOpSeparate(Context *context,
                                     GLenum face,
                                     GLenum sfail,
                                     GLenum dpfail,
                                     GLenum dppass);
void ContextPrivateVertexAttrib1f(Context *context, GLuint index, GLfloat x);
void ContextPrivateVertexAttrib1fv(Context *context, GLuint index, const GLfloat *v);
void ContextPrivateVertexAttrib2f(Context *context, GLuint index, GLfloat x, GLfloat y);
void ContextPrivateVertexAttrib2fv(Context *context, GLuint index, const GLfloat *v);
void ContextPrivateVertexAttrib3f(Context *context, GLuint index, GLfloat x, GLfloat y, GLfloat z);
void ContextPrivateVertexAttrib3fv(Context *context, GLuint index, const GLfloat *v);
void ContextPrivateVertexAttrib4f(Context *context,
                                  GLuint index,
                                  GLfloat x,
                                  GLfloat y,
                                  GLfloat z,
                                  GLfloat w);
void ContextPrivateVertexAttrib4fv(Context *context, GLuint index, const GLfloat *v);
void ContextPrivateViewport(Context *context, GLint x, GLint y, GLsizei width, GLsizei height);
void ContextPrivateVertexAttribI4i(Context *context,
                                   GLuint index,
                                   GLint x,
                                   GLint y,
                                   GLint z,
                                   GLint w);
void ContextPrivateVertexAttribI4iv(Context *context, GLuint index, const GLint *v);
void ContextPrivateVertexAttribI4ui(Context *context,
                                    GLuint index,
                                    GLuint x,
                                    GLuint y,
                                    GLuint z,
                                    GLuint w);
void ContextPrivateVertexAttribI4uiv(Context *context, GLuint index, const GLuint *v);
void ContextPrivateSampleMaski(Context *context, GLuint maskNumber, GLbitfield mask);
void ContextPrivateBlendEquationSeparatei(Context *context,
                                          GLuint buf,
                                          GLenum modeRGB,
                                          GLenum modeAlpha);
void ContextPrivateBlendEquationi(Context *context, GLuint buf, GLenum mode);
void ContextPrivateBlendFuncSeparatei(Context *context,
                                      GLuint buf,
                                      GLenum srcRGB,
                                      GLenum dstRGB,
                                      GLenum srcAlpha,
                                      GLenum dstAlpha);
void ContextPrivateBlendFunci(Context *context, GLuint buf, GLenum src, GLenum dst);
void ContextPrivateColorMaski(Context *context,
                              GLuint index,
                              GLboolean r,
                              GLboolean g,
                              GLboolean b,
                              GLboolean a);
void ContextPrivateDisablei(Context *context, GLenum target, GLuint index);
void ContextPrivateEnablei(Context *context, GLenum target, GLuint index);
GLboolean ContextPrivateIsEnabledi(Context *context, GLenum target, GLuint index);
void ContextPrivateMinSampleShading(Context *context, GLfloat value);
void ContextPrivatePatchParameteri(Context *context, GLenum pname, GLint value);
void ContextPrivatePrimitiveBoundingBox(Context *context,
                                        GLfloat minX,
                                        GLfloat minY,
                                        GLfloat minZ,
                                        GLfloat minW,
                                        GLfloat maxX,
                                        GLfloat maxY,
                                        GLfloat maxZ,
                                        GLfloat maxW);
void ContextPrivateAlphaFunc(Context *context, AlphaTestFunc funcPacked, GLfloat ref);
void ContextPrivateAlphaFuncx(Context *context, AlphaTestFunc funcPacked, GLfixed ref);
void ContextPrivateClearColorx(Context *context,
                               GLfixed red,
                               GLfixed green,
                               GLfixed blue,
                               GLfixed alpha);
void ContextPrivateClearDepthx(Context *context, GLfixed depth);
void ContextPrivateClipPlanef(Context *context, GLenum p, const GLfloat *eqn);
void ContextPrivateClipPlanex(Context *context, GLenum plane, const GLfixed *equation);
void ContextPrivateColor4f(Context *context,
                           GLfloat red,
                           GLfloat green,
                           GLfloat blue,
                           GLfloat alpha);
void ContextPrivateColor4ub(Context *context,
                            GLubyte red,
                            GLubyte green,
                            GLubyte blue,
                            GLubyte alpha);
void ContextPrivateColor4x(Context *context,
                           GLfixed red,
                           GLfixed green,
                           GLfixed blue,
                           GLfixed alpha);
void ContextPrivateDepthRangex(Context *context, GLfixed n, GLfixed f);
void ContextPrivateFogf(Context *context, GLenum pname, GLfloat param);
void ContextPrivateFogfv(Context *context, GLenum pname, const GLfloat *params);
void ContextPrivateFogx(Context *context, GLenum pname, GLfixed param);
void ContextPrivateFogxv(Context *context, GLenum pname, const GLfixed *param);
void ContextPrivateFrustumf(Context *context,
                            GLfloat l,
                            GLfloat r,
                            GLfloat b,
                            GLfloat t,
                            GLfloat n,
                            GLfloat f);
void ContextPrivateFrustumx(Context *context,
                            GLfixed l,
                            GLfixed r,
                            GLfixed b,
                            GLfixed t,
                            GLfixed n,
                            GLfixed f);
void ContextPrivateGetClipPlanef(Context *context, GLenum plane, GLfloat *equation);
void ContextPrivateGetClipPlanex(Context *context, GLenum plane, GLfixed *equation);
void ContextPrivateGetLightfv(Context *context,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfloat *params);
void ContextPrivateGetLightxv(Context *context,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfixed *params);
void ContextPrivateGetMaterialfv(Context *context,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfloat *params);
void ContextPrivateGetMaterialxv(Context *context,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfixed *params);
void ContextPrivateGetTexEnvfv(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfloat *params);
void ContextPrivateGetTexEnviv(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLint *params);
void ContextPrivateGetTexEnvxv(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfixed *params);
void ContextPrivateLightModelf(Context *context, GLenum pname, GLfloat param);
void ContextPrivateLightModelfv(Context *context, GLenum pname, const GLfloat *params);
void ContextPrivateLightModelx(Context *context, GLenum pname, GLfixed param);
void ContextPrivateLightModelxv(Context *context, GLenum pname, const GLfixed *param);
void ContextPrivateLightf(Context *context,
                          GLenum light,
                          LightParameter pnamePacked,
                          GLfloat param);
void ContextPrivateLightfv(Context *context,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfloat *params);
void ContextPrivateLightx(Context *context,
                          GLenum light,
                          LightParameter pnamePacked,
                          GLfixed param);
void ContextPrivateLightxv(Context *context,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfixed *params);
void ContextPrivateLineWidthx(Context *context, GLfixed width);
void ContextPrivateLoadIdentity(Context *context);
void ContextPrivateLoadMatrixf(Context *context, const GLfloat *m);
void ContextPrivateLoadMatrixx(Context *context, const GLfixed *m);
void ContextPrivateLogicOp(Context *context, LogicalOperation opcodePacked);
void ContextPrivateMaterialf(Context *context,
                             GLenum face,
                             MaterialParameter pnamePacked,
                             GLfloat param);
void ContextPrivateMaterialfv(Context *context,
                              GLenum face,
                              MaterialParameter pnamePacked,
                              const GLfloat *params);
void ContextPrivateMaterialx(Context *context,
                             GLenum face,
                             MaterialParameter pnamePacked,
                             GLfixed param);
void ContextPrivateMaterialxv(Context *context,
                              GLenum face,
                              MaterialParameter pnamePacked,
                              const GLfixed *param);
void ContextPrivateMatrixMode(Context *context, MatrixType modePacked);
void ContextPrivateMultMatrixf(Context *context, const GLfloat *m);
void ContextPrivateMultMatrixx(Context *context, const GLfixed *m);
void ContextPrivateMultiTexCoord4f(Context *context,
                                   GLenum target,
                                   GLfloat s,
                                   GLfloat t,
                                   GLfloat r,
                                   GLfloat q);
void ContextPrivateMultiTexCoord4x(Context *context,
                                   GLenum texture,
                                   GLfixed s,
                                   GLfixed t,
                                   GLfixed r,
                                   GLfixed q);
void ContextPrivateNormal3f(Context *context, GLfloat nx, GLfloat ny, GLfloat nz);
void ContextPrivateNormal3x(Context *context, GLfixed nx, GLfixed ny, GLfixed nz);
void ContextPrivateOrthof(Context *context,
                          GLfloat l,
                          GLfloat r,
                          GLfloat b,
                          GLfloat t,
                          GLfloat n,
                          GLfloat f);
void ContextPrivateOrthox(Context *context,
                          GLfixed l,
                          GLfixed r,
                          GLfixed b,
                          GLfixed t,
                          GLfixed n,
                          GLfixed f);
void ContextPrivatePointParameterf(Context *context, PointParameter pnamePacked, GLfloat param);
void ContextPrivatePointParameterfv(Context *context,
                                    PointParameter pnamePacked,
                                    const GLfloat *params);
void ContextPrivatePointParameterx(Context *context, PointParameter pnamePacked, GLfixed param);
void ContextPrivatePointParameterxv(Context *context,
                                    PointParameter pnamePacked,
                                    const GLfixed *params);
void ContextPrivatePointSize(Context *context, GLfloat size);
void ContextPrivatePointSizex(Context *context, GLfixed size);
void ContextPrivatePolygonOffsetx(Context *context, GLfixed factor, GLfixed units);
void ContextPrivatePopMatrix(Context *context);
void ContextPrivatePushMatrix(Context *context);
void ContextPrivateRotatef(Context *context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void ContextPrivateRotatex(Context *context, GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void ContextPrivateSampleCoveragex(Context *context, GLclampx value, GLboolean invert);
void ContextPrivateScalef(Context *context, GLfloat x, GLfloat y, GLfloat z);
void ContextPrivateScalex(Context *context, GLfixed x, GLfixed y, GLfixed z);
void ContextPrivateShadeModel(Context *context, ShadingModel modePacked);
void ContextPrivateTexEnvf(Context *context,
                           TextureEnvTarget targetPacked,
                           TextureEnvParameter pnamePacked,
                           GLfloat param);
void ContextPrivateTexEnvfv(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfloat *params);
void ContextPrivateTexEnvi(Context *context,
                           TextureEnvTarget targetPacked,
                           TextureEnvParameter pnamePacked,
                           GLint param);
void ContextPrivateTexEnviv(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLint *params);
void ContextPrivateTexEnvx(Context *context,
                           TextureEnvTarget targetPacked,
                           TextureEnvParameter pnamePacked,
                           GLfixed param);
void ContextPrivateTexEnvxv(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfixed *params);
void ContextPrivateTranslatef(Context *context, GLfloat x, GLfloat y, GLfloat z);
void ContextPrivateTranslatex(Context *context, GLfixed x, GLfixed y, GLfixed z);
void ContextPrivateLogicOpANGLE(Context *context, LogicalOperation opcodePacked);
void ContextPrivatePolygonMode(Context *context, GLenum face, PolygonMode modePacked);
void ContextPrivateProvokingVertex(Context *context, ProvokingVertexConvention provokeModePacked);
void ContextPrivateCoverageModulation(Context *context, GLenum components);
void ContextPrivateClipControl(Context *context,
                               ClipOrigin originPacked,
                               ClipDepthMode depthPacked);
void ContextPrivatePolygonOffsetClamp(Context *context,
                                      GLfloat factor,
                                      GLfloat units,
                                      GLfloat clamp);
void ContextPrivatePolygonModeNV(Context *context, GLenum face, PolygonMode modePacked);
void ContextPrivateShadingRate(Context *context, GLenum rate);
}  // namespace gl

#endif  // LIBANGLE_CONTEXT_PRIVATE_CALL_gles_AUTOGEN_H_
