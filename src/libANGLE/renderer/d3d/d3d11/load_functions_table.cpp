// GENERATED FILE - DO NOT EDIT.
// Generated by gen_load_functions_table.py using data from load_functions_data.json
//
// Copyright 2015 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// load_functions_table:
//   Contains the GetLoadFunctionsMap for texture_format_util.h
//

#include "libANGLE/renderer/d3d/d3d11/load_functions_table.h"
#include "libANGLE/renderer/d3d/d3d11/formatutils11.h"
#include "libANGLE/renderer/d3d/loadimage.h"

namespace rx
{

namespace d3d11
{

namespace
{

// ES3 image loading functions vary based on:
//    - the GL internal format (supplied to glTex*Image*D)
//    - the GL data type given (supplied to glTex*Image*D)
//    - the target DXGI_FORMAT that the image will be loaded into (which is chosen based on the D3D
//    device's capabilities)
// This map type determines which loading function to use, based on these three parameters.
// Source formats and types are taken from Tables 3.2 and 3.3 of the ES 3 spec.
void UnimplementedLoadFunction(size_t width,
                               size_t height,
                               size_t depth,
                               const uint8_t *input,
                               size_t inputRowPitch,
                               size_t inputDepthPitch,
                               uint8_t *output,
                               size_t outputRowPitch,
                               size_t outputDepthPitch)
{
    UNIMPLEMENTED();
}

void UnreachableLoadFunction(size_t width,
                             size_t height,
                             size_t depth,
                             const uint8_t *input,
                             size_t inputRowPitch,
                             size_t inputDepthPitch,
                             uint8_t *output,
                             size_t outputRowPitch,
                             size_t outputDepthPitch)
{
    UNREACHABLE();
}

}  // namespace

const std::map<GLenum, LoadImageFunction> &GetLoadFunctionsMap(GLenum internalFormat,
                                                               DXGI_FORMAT dxgiFormat)
{
    // clang-format off
    switch (internalFormat)
    {
        case GL_RG8_SNORM:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8_SNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R16F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadToNative<GLhalf,1>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadToNative<GLhalf,1>));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, Load32FTo16F<1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA8I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R8_SNORM:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8_SNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA8_SNORM:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_SNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R16I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_SHORT, LoadToNative<GLshort,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB32UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadToNative3To4<GLuint,0x00000001>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_ALPHA32F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadA32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadA32FToRGBA32F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadA32FToRGBA32F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_R16UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative<GLushort,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB9_E5:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_5_9_9_9_REV, LoadToNative<GLuint,1>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadRGB16FToRGB9E5));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadRGB16FToRGB9E5));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadRGB32FToRGB9E5));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_R11_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGBA32UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadToNative<GLuint,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RG8UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE32F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadL32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadL32FToRGBA32F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadL32FToRGBA32F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RG8I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_SRGB8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative3To4<GLubyte,0xFF>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA8UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_BGRA4_ANGLEX:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT, LoadRGBA4ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT, LoadRGBA4ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT, LoadRGBA4ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_LUMINANCE8_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadL8ToRGBA8));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadL8ToRGBA8));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadL8ToRGBA8));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_6_5, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_6_5, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_6_5, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB5_A1:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_5_5_1, LoadRGB5A1ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_2_10_10_10_REV, LoadRGB10A2ToRGBA8));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_B5G5R5A1_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_5_5_1, LoadRGB5A1ToA1RGB5));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB16UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative3To4<GLushort,0x0001>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_BGRA_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_RGB8_ETC2:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGBA32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadToNative<GLfloat,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA32I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_INT, LoadToNative<GLint,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE8_ALPHA8_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadLA8ToRGBA8));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadLA8ToRGBA8));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadLA8ToRGBA8));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RG8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB10_A2:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R10G10B10A2_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_2_10_10_10_REV, LoadToNative<GLuint,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_SIGNED_RG11_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_DEPTH_COMPONENT16:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16_TYPELESS:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative<GLushort,1>));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR16));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_D16_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative<GLushort,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB32I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_INT, LoadToNative3To4<GLint,0x00000001>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadToNative3To4<GLfloat,gl::Float32One>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R11F_G11F_B10F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R11G11B10_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_10F_11F_11F_REV, LoadToNative<GLuint,1>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadRGB16FToRG11B10F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadRGB16FToRG11B10F));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadRGB32FToRG11B10F));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative3To4<GLubyte,0xFF>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE_ALPHA:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadLA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadLA16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadLA32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGBA16I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_SHORT, LoadToNative<GLshort,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R8I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative<GLbyte,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB8_SNORM:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_SNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative3To4<GLbyte,0x7F>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RG32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadToNative<GLfloat,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_DEPTH_COMPONENT32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32_TYPELESS:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadToNative<GLfloat,1>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RG32I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_INT, LoadToNative<GLint,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_ALPHA8_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,1>));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadA8ToRGBA8));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RG32UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadToNative<GLuint,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA16UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative<GLushort,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_RGBA8_ETC2_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB8I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_BYTE, LoadToNative3To4<GLbyte,0x01>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_SRGB8_ETC2:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_DEPTH32F_STENCIL8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G8X24_TYPELESS:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, LoadToNative<GLuint,2>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT_32_UNSIGNED_INT_24_8_REV, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_R32UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadToNative<GLuint,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_BGR5_A1_ANGLEX:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT, LoadRGB5A1ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT, LoadRGB5A1ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT, LoadRGB5A1ToRGBA8));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_RG11_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_SRGB8_ALPHA8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE_ALPHA16F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadLA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadLA16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadLA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadLA16FToRGBA16F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadLA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadLA16FToRGBA16F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGBA:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_5_5_1, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_5_5_1, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4, UnreachableLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_5_5_1, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_DEPTH24_STENCIL8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R24G8_TYPELESS:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_24_8, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_D24_UNORM_S8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_24_8, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB16I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_SHORT, LoadToNative3To4<GLshort,0x0001>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R8UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_ALPHA:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadA16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadA32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB16F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadToNative3To4<GLhalf,gl::Float16One>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadToNative3To4<GLhalf,gl::Float16One>));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadRGB32FToRGBA16F));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA16F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadToNative<GLhalf,4>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadToNative<GLhalf,4>));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, Load32FTo16F<4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_SIGNED_R11_EAC:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_RGB_S3TC_DXT1_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_COMPRESSED_RGBA_S3TC_DXT1_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,8>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_STENCIL_INDEX8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_R24G8_TYPELESS, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_D24_UNORM_S8_UINT, UnimplementedLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_R24G8_TYPELESS, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_D24_UNORM_S8_UINT, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_R24G8_TYPELESS, UnimplementedLoadFunction));
                    loadFunctionsMap.insert(std::make_pair(DXGI_FORMAT_D24_UNORM_S8_UINT, UnimplementedLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_LUMINANCE_ALPHA32F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadLA32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadLA32FToRGBA32F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadLA32FToRGBA32F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB8UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative3To4<GLubyte,0x01>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_DEPTH_COMPONENT24:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R24G8_TYPELESS:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_D24_UNORM_S8_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_R32I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_INT, LoadToNative<GLint,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_DEPTH_COMPONENT32_OES:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR24G8));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT, LoadR32ToR24G8));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_R32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadToNative<GLfloat,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RG16F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadToNative<GLhalf,2>));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadToNative<GLhalf,2>));
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, Load32FTo16F<2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGB565:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_B5G6R5_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_6_5, LoadToNative<GLushort,1>));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative3To4<GLubyte,0xFF>));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_5_6_5, LoadR5G6B5ToRGBA8));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE16F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadL16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadL16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadL16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadL16FToRGBA16F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadL16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadL16FToRGBA16F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RG16UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT, LoadToNative<GLushort,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadCompressedToNative<4,4,16>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RG16I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16_SINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_SHORT, LoadToNative<GLshort,2>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_BGRA8_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_ALPHA16F_EXT:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadA16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadA16FToRGBA16F));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadA16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadA16FToRGBA16F));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGBA4:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4, LoadRGBA4ToRGBA8));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_B4G4R4A4_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_SHORT_4_4_4_4, LoadRGBA4ToARGB4));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_RGBA8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, LoadToNative<GLubyte,4>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }
        case GL_LUMINANCE:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT, LoadL16FToRGBA16F));
                    loadFunctionsMap.insert(std::make_pair(GL_HALF_FLOAT_OES, LoadL16FToRGBA16F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_UNKNOWN:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_FLOAT, LoadL32FToRGBA32F));

                    // DXGI_FORMAT_UNKNOWN add ons
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
                default:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_BYTE, UnreachableLoadFunction));
                    return loadFunctionsMap;
                }
            }
        }
        case GL_RGB10_A2UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R10G10B10A2_UINT:
                {
                    static std::map<GLenum, LoadImageFunction> loadFunctionsMap;
                    loadFunctionsMap.insert(std::make_pair(GL_UNSIGNED_INT_2_10_10_10_REV, LoadToNative<GLuint,1>));
                    return loadFunctionsMap;
                }
                default:
                    break;
            }
        }

        default:
        {
            static std::map<GLenum, LoadImageFunction> emptyLoadFunctionsMap;
            return emptyLoadFunctionsMap;
        }
    }
    // clang-format on

}  // GetLoadFunctionsMap

}  // namespace d3d11

}  // namespace rx
