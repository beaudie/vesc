#!/usr/bin/python2
#
# Copyright 2018 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_blit11helper.py:
#   Generates the code for retrieving the various blit shaders for D3D11

import sys, os, pprint
from datetime import date

template_blitshader_source = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name}.
//
// Copyright {year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Blit11Helper_autogen.inc:
//   Defines and retrieves blitshaders for the D3D11 backend.

namespace
{{
// Include inline shaders in the anonymous namespace to make sure no symbols are exported
{shader_includes}
}} // namespace

enum Blit11::BlitShaderType : unsigned int
{{
{blitshader_enums}
}};

{get_blitshaders_defs}

angle::Result Blit11::mapBlitShader(const gl::Context *context,
                                BlitShaderType blitShaderType)
{{
    switch(blitShaderType)
    {{
{add_blitshader_case_list}
        default:
            UNREACHABLE();
            context->handleError(gl::InternalError());
            return angle::Result::Stop();
    }}

    return angle::Result::Continue();
}}

"""

template_compiled_blitshader_include = """#include "libANGLE/renderer/d3d/d3d11/shaders/compiled/{filename}\""""

template_map_blitshader_case ="""        case {blitshader_name}:
            ANGLE_TRY(addBlitShaderToMap(context, blitShaderType, SHADER_{dimension_upper},
                                         ShaderData(g_PS_{compiled_shader_name}),
                                         "Blit11 {dimension} {shader_comment} pixel shader"));
            break;"""

template_get_blitshader_def = """Blit11::BlitShaderType Blit11::Get{dimension_lowercase}BlitShaderType(GLenum destinationFormat,
                                            GLenum sourceFormat,
                                            bool isSrcSigned,
                                            bool isDestSigned,
                                            bool unpackPremultiplyAlpha,
                                            bool unpackUnmultiplyAlpha,
                                            GLenum destTypeForDownsampling)
{{
    bool floatToIntBlit =
    !gl::IsIntegerFormat(sourceFormat) && gl::IsIntegerFormat(destinationFormat);

    if (isSrcSigned)
    {{
        ASSERT(!unpackPremultiplyAlpha && !unpackUnmultiplyAlpha);
        switch (destinationFormat)
        {{
            case GL_RGBA_INTEGER:
                return BLITSHADER_{dimension}_RGBAI;
            case GL_RGB_INTEGER:
                return BLITSHADER_{dimension}_RGBI;
            case GL_RG_INTEGER:
                return BLITSHADER_{dimension}_RGI;
            case GL_RED_INTEGER:
                return BLITSHADER_{dimension}_RI;
            default:
                UNREACHABLE();
                return BLITSHADER_INVALID;
        }}
    }}
    else if (isDestSigned)
    {{
        {integer_dest_block}
    }}
    else
    {{
        // Check for the downsample formats first
        switch (destTypeForDownsampling)
        {{
            case GL_UNSIGNED_SHORT_4_4_4_4:
            ASSERT(destinationFormat == GL_RGBA && !floatToIntBlit);
            if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
            {{
                return BLITSHADER_{dimension}_RGBAF_4444;
            }}
            else
            {{
                return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBAF_4444_PREMULTIPLY
                                                : BLITSHADER_{dimension}_RGBAF_4444_UNMULTIPLY;
            }}

        case GL_UNSIGNED_SHORT_5_6_5:
            ASSERT(destinationFormat == GL_RGB && !floatToIntBlit);
            if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
            {{
                return BLITSHADER_{dimension}_RGBF_565;
            }}
            else
            {{
                return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBF_565_PREMULTIPLY
                                                : BLITSHADER_{dimension}_RGBF_565_UNMULTIPLY;
            }}
        case GL_UNSIGNED_SHORT_5_5_5_1:
            if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
            {{
                return BLITSHADER_{dimension}_RGBAF_5551;
            }}
            else
            {{
                return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBAF_5551_PREMULTIPLY
                                                : BLITSHADER_{dimension}_RGBAF_5551_UNMULTIPLY;
            }}

        default:
            // By default, use the regular passthrough/multiply/unmultiply shaders.  The above
            // shaders are only needed for some emulated texture formats.
            break;
        }}

        if (unpackPremultiplyAlpha != unpackUnmultiplyAlpha || floatToIntBlit)
        {{
            switch (destinationFormat)
            {{
                case GL_RGBA:
                case GL_BGRA_EXT:
                    ASSERT(!floatToIntBlit);
                    return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBAF_PREMULTIPLY
                                                : BLITSHADER_{dimension}_RGBAF_UNMULTIPLY;
                case GL_RGB:
                case GL_RG:
                case GL_RED:
                    if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
                    {{
                        return BLITSHADER_{dimension}_RGBF_TOUI;
                    }}
                    else
                    {{
                        return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBF_PREMULTIPLY
                                                    : BLITSHADER_{dimension}_RGBF_UNMULTIPLY;
                    }}
                case GL_RGBA_INTEGER:
                    if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
                    {{
                        return BLITSHADER_{dimension}_RGBAF_TOUI;
                    }}
                    else
                    {{
                        return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBAF_TOUI_PREMULTIPLY
                                                    : BLITSHADER_{dimension}_RGBAF_TOUI_UNMULTIPLY;
                    }}
                case GL_RGB_INTEGER:
                case GL_RG_INTEGER:
                case GL_RED_INTEGER:
                    if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
                    {{
                        return BLITSHADER_{dimension}_RGBF_TOUI;
                    }}
                    else
                    {{
                        return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBF_TOUI_PREMULTIPLY
                                                    : BLITSHADER_{dimension}_RGBF_TOUI_UNMULTIPLY;
                    }}
                case GL_LUMINANCE:
                    ASSERT(!floatToIntBlit);
                    return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_LUMAF_PREMULTIPLY
                                                : BLITSHADER_{dimension}_LUMAF_UNMULTIPLY;

                case GL_LUMINANCE_ALPHA:
                    ASSERT(!floatToIntBlit);
                    return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_LUMAALPHAF_PREMULTIPLY
                                                : BLITSHADER_{dimension}_LUMAALPHAF_UNMULTIPLY;
                case GL_ALPHA:
                    return BLITSHADER_{dimension}_ALPHA;
                default:
                    UNREACHABLE();
                    return BLITSHADER_INVALID;
            }}
        }}
        else
        {{
            switch (destinationFormat)
            {{
                case GL_RGBA:
                    return BLITSHADER_{dimension}_RGBAF;
                case GL_RGBA_INTEGER:
                    return BLITSHADER_{dimension}_RGBAUI;
                case GL_BGRA_EXT:
                    return BLITSHADER_{dimension}_BGRAF;
                case GL_RGB:
                    return BLITSHADER_{dimension}_RGBF;
                case GL_RGB_INTEGER:
                    return BLITSHADER_{dimension}_RGBUI;
                case GL_RG:
                    return BLITSHADER_{dimension}_RGF;
                case GL_RG_INTEGER:
                    return BLITSHADER_{dimension}_RGUI;
                case GL_RED:
                    return BLITSHADER_{dimension}_RF;
                case GL_RED_INTEGER:
                    return BLITSHADER_{dimension}_RUI;
                case GL_ALPHA:
                    return BLITSHADER_{dimension}_ALPHA;
                case GL_LUMINANCE:
                    return BLITSHADER_{dimension}_LUMA;
                case GL_LUMINANCE_ALPHA:
                    return BLITSHADER_{dimension}_LUMAALPHA;
                default:
                    UNREACHABLE();
                    return BLITSHADER_INVALID;
            }}
        }}
    }}
}}"""

template_integer_dest_block = """ASSERT(floatToIntBlit);

        switch (destinationFormat)
        {{
            case GL_RGBA_INTEGER:
                if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
                {{
                    return BLITSHADER_{dimension}_RGBAF_TOI;
                }}
                else
                {{
                    return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBAF_TOI_PREMULTIPLY
                                                  : BLITSHADER_{dimension}_RGBAF_TOI_UNMULTIPLY;
                }}
                break;
            case GL_RGB_INTEGER:
            case GL_RG_INTEGER:
            case GL_RED_INTEGER:
                if (unpackPremultiplyAlpha == unpackUnmultiplyAlpha)
                {{
                    return BLITSHADER_{dimension}_RGBF_TOI;
                }}
                else
                {{
                    return unpackPremultiplyAlpha ? BLITSHADER_{dimension}_RGBF_TOI_PREMULTIPLY
                                                  : BLITSHADER_{dimension}_RGBF_TOI_UNMULTIPLY;
                }}
                break;
            default:
                UNREACHABLE();
                return BLITSHADER_INVALID;
        }}"""



supported_dimensions = [
    "2D",
    "3D",
    "2DArray"
]

# field 1: BlitShaderType enum
# field 2: Name of compiled shader
# field 3: Filename of compiled shader
blitshader_data = [
    ("RGBAF", "PassthroughRGBA*", "passthroughrgba*11ps.h"),
    ("BGRAF", "PassthroughRGBA*"),
    ("RGBF", "PassthroughRGB*", "passthroughrgb*11ps.h"),
    ("RGF", "PassthroughRG*", "passthroughrg*11ps.h"),
    ("RF", "PassthroughR*", "passthroughr*11ps.h"),
    ("ALPHA", "PassthroughA*", "passthrougha*11ps.h"),
    ("LUMA", "PassthroughLum*", "passthroughlum*11ps.h"),
    ("LUMAALPHA", "PassthroughLumAlpha*","passthroughlumalpha*11ps.h"),
    ("RGBAUI", "PassthroughRGBA*UI", "passthroughrgba*ui11ps.h"),
    ("RGBAI", "PassthroughRGBA*I", "passthroughrgba*i11ps.h"),
    ("RGBUI", "PassthroughRGB*UI", "passthroughrgb*ui11ps.h"),
    ("RGBI", "PassthroughRGB*I", "passthroughrgb*i11ps.h"),
    ("RGUI", "PassthroughRG*UI", "passthroughrg*ui11ps.h"),
    ("RGI", "PassthroughRG*I", "passthroughrg*i11ps.h"),
    ("RUI", "PassthroughR*UI", "passthroughr*ui11ps.h"),
    ("RI", "PassthroughR*I", "passthroughr*i11ps.h"),
    ("RGBAF_PREMULTIPLY","FtoF_PM_RGBA_*", "multiplyalpha_ftof_pm_rgba_*_ps.h"),
    ("RGBAF_UNMULTIPLY","FtoF_UM_RGBA_*", "multiplyalpha_ftof_um_rgba_*_ps.h"),
    ("RGBF_PREMULTIPLY","FtoF_PM_RGB_*", "multiplyalpha_ftof_pm_rgb_*_ps.h"),
    ("RGBF_UNMULTIPLY","FtoF_UM_RGB_*", "multiplyalpha_ftof_um_rgb_*_ps.h"),
    ("RGBAF_TOUI","FtoU_PT_RGBA_*", "multiplyalpha_ftou_pt_rgba_*_ps.h"),
    ("RGBAF_TOUI_PREMULTIPLY","FtoU_PM_RGBA_*", "multiplyalpha_ftou_pm_rgba_*_ps.h"),
    ("RGBAF_TOUI_UNMULTIPLY","FtoU_UM_RGBA_*", "multiplyalpha_ftou_um_rgba_*_ps.h"),
    ("RGBF_TOUI","FtoU_PT_RGB_*", "multiplyalpha_ftou_pt_rgb_*_ps.h"),
    ("RGBF_TOUI_PREMULTIPLY","FtoU_PM_RGB_*", "multiplyalpha_ftou_pm_rgb_*_ps.h"),
    ("RGBF_TOUI_UNMULTIPLY","FtoU_UM_RGB_*", "multiplyalpha_ftou_um_rgb_*_ps.h"),
    ("RGBAF_TOI","FtoI_PT_RGBA_*", "multiplyalpha_ftoi_pt_rgba_*_ps.h"),
    ("RGBAF_TOI_PREMULTIPLY","FtoI_PM_RGBA_*", "multiplyalpha_ftoi_pm_rgba_*_ps.h"),
    ("RGBAF_TOI_UNMULTIPLY","FtoI_UM_RGBA_*", "multiplyalpha_ftoi_um_rgba_*_ps.h"),
    ("RGBF_TOI","FtoI_PT_RGB_*", "multiplyalpha_ftoi_pt_rgb_*_ps.h"),
    ("RGBF_TOI_PREMULTIPLY","FtoI_PM_RGB_*", "multiplyalpha_ftoi_pm_rgb_*_ps.h"),
    ("RGBF_TOI_UNMULTIPLY","FtoI_UM_RGB_*", "multiplyalpha_ftoi_um_rgb_*_ps.h"),
    ("LUMAF_PREMULTIPLY","FtoF_PM_LUMA_*", "multiplyalpha_ftof_pm_luma_*_ps.h"),
    ("LUMAF_UNMULTIPLY","FtoF_UM_LUMA_*", "multiplyalpha_ftof_um_luma_*_ps.h"),
    ("LUMAALPHAF_PREMULTIPLY","FtoF_PM_LUMAALPHA_*", "multiplyalpha_ftof_pm_lumaalpha_*_ps.h"),
    ("LUMAALPHAF_UNMULTIPLY","FtoF_UM_LUMAALPHA_*", "multiplyalpha_ftof_um_lumaalpha_*_ps.h"),
    ("RGBAF_4444","PassthroughRGBA*_4444", "passthroughrgba*_4444_11ps.h"),
    ("RGBAF_4444_PREMULTIPLY","FtoF_PM_RGBA_4444_*", "multiplyalpha_ftof_pm_rgba_4444_*_ps.h"),
    ("RGBAF_4444_UNMULTIPLY","FtoF_UM_RGBA_4444_*", "multiplyalpha_ftof_um_rgba_4444_*_ps.h"),
    ("RGBF_565","PassthroughRGB*_565", "passthroughrgb*_565_11ps.h"),
    ("RGBF_565_PREMULTIPLY","FtoF_PM_RGB_565_*", "multiplyalpha_ftof_pm_rgb_565_*_ps.h"),
    ("RGBF_565_UNMULTIPLY","FtoF_UM_RGB_565_*", "multiplyalpha_ftof_um_rgb_565_*_ps.h"),
    ("RGBAF_5551","PassthroughRGBA*_5551", "passthroughrgba*_5551_11ps.h"),
    ("RGBAF_5551_PREMULTIPLY","FtoF_PM_RGBA_5551_*", "multiplyalpha_ftof_pm_rgba_5551_*_ps.h"),
    ("RGBAF_5551_UNMULTIPLY","FtoF_UM_RGBA_5551_*", "multiplyalpha_ftof_um_rgba_5551_*_ps.h")
]

def format_shader_include(dimension, blitshader):
    return template_compiled_blitshader_include.format(
       filename = blitshader[2].replace("*", dimension.lower()))

def format_get_blitshader_def(dimension, integer_dest_block):
    return template_get_blitshader_def.format(
        dimension_lowercase = dimension,
        dimension = dimension.upper(),
        integer_dest_block = integer_dest_block)

def format_integer_dest_block(dimension):
    if dimension == "2D":
        return "UNIMPLEMENTED();\n        return BLITSHADER_INVALID;"

    else:
        return template_integer_dest_block.format(
            dimension = dimension.upper())

def format_map_blitshader_case(dimension, blitshader):
    blitshader_name = "BLITSHADER_" + dimension.upper() + "_" + blitshader[0]

    # 3D and 2DArray use the RGBA shader for passthrough alpha
    if dimension != "2D" and blitshader[0] == "ALPHA":
        compiled_shader_name = "PassthroughRGBA"+ dimension
    else:
        compiled_shader_name = blitshader[1].replace("*", dimension)

    shader_comment = compiled_shader_name.replace("_"," ")

    case = template_map_blitshader_case.format(
        blitshader_name = blitshader_name,
        dimension = dimension,
        dimension_upper = dimension.upper(),
        compiled_shader_name = compiled_shader_name,
        shader_comment = shader_comment,
    )

    return case

def get_shader_includes(dimension):
    includes = []
    for blitshader in blitshader_data:
        # 2D float to int shaders have not been implemented
        if dimension == "2D" and blitshader[0].find("TOI") != -1:
            continue
        # 3D and 2DArray just use the RGBA shader for passthrough alpha
        if dimension != "2D" and blitshader[0] == "ALPHA":
            continue
        if len(blitshader) == 3:
            includes.append(format_shader_include(dimension, blitshader))

    return "\n".join([i for i in includes])

def get_shader_enums():
    blitshaders = []
    for dimension in supported_dimensions:
        for blitshader in blitshader_data:
            # 2D float to int shaders have not been implemented
            if dimension == "2D" and blitshader[0].find("TOI") != -1:
                continue
            blitshaders.append("    BLITSHADER_" + dimension.upper() + "_" + blitshader[0] + ",")

    blitshaders.append("    BLITSHADER_INVALID")
    return blitshaders

def get_map_blitshader_cases(dimension):
    blitshader_cases = []

    for blitshader in blitshader_data:
        # 2D float to int shaders have not been implemented
        if dimension == "2D" and blitshader[0].find("TOI") != -1:
            continue
        blitshader_cases.append(format_map_blitshader_case(dimension, blitshader))

    return "\n".join([c for c in blitshader_cases])

def write_file(get_blitshaders_defs, add_blitshader_case_list, shader_includes, blitshader_enums):
    content = template_blitshader_source.format(
        script_name = os.path.basename(sys.argv[0]),
        year = date.today().year,
        blitshader_enums = blitshader_enums,
        get_blitshaders_defs = get_blitshaders_defs,
        add_blitshader_case_list = add_blitshader_case_list,
        shader_includes = shader_includes)

    path = os.path.join("Blit11Helper_autogen.inc")

    with open(path, "w") as out:
        out.write(content)
        out.close()

get_blitshader_defs = []
map_blitshader_cases = []
shader_includes = []
blitshader_enums = []

for dimension in supported_dimensions:
    get_blitshader_defs.append(format_get_blitshader_def(dimension, format_integer_dest_block(dimension)))
    map_blitshader_cases.append(get_map_blitshader_cases(dimension))
    shader_includes.append(get_shader_includes(dimension))
    blitshader_enums = get_shader_enums()

write_file("\n".join([d for d in get_blitshader_defs]), "\n".join([c for c in map_blitshader_cases]), "\n".join([i for i in shader_includes]),
           "\n".join([e for e in blitshader_enums]))