//
// Copyright 2015 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// texture_format_util:
//   Contains helper functions for texture_format_table
//

#include "libANGLE/renderer/d3d/d3d11/internal_format_initializer_table.h"
#include "libANGLE/renderer/d3d/loadimage.h"

namespace rx
{

namespace d3d11
{

// TODO: This should be generated by a JSON file
const InitializeTextureDataFunction GetInternalFormatInitializer(GLenum internalFormat,
                                                                 DXGI_FORMAT dxgiFormat)
{
    switch (internalFormat)
    {
        case GL_RGB8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLubyte, 0x00, 0x00, 0x00, 0xFF>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB565:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLubyte, 0x00, 0x00, 0x00, 0xFF>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_SRGB8:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLubyte, 0x00, 0x00, 0x00, 0xFF>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB16F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_FLOAT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLhalf, 0x0000, 0x0000, 0x0000, gl::Float16One>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB32F:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_FLOAT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLfloat, 0x00000000, 0x00000000, 0x00000000,
                                                 gl::Float32One>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB8UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_UINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLubyte, 0x00, 0x00, 0x00, 0x01>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB8I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R8G8B8A8_SINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLbyte, 0x00, 0x00, 0x00, 0x01>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB16UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_UINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLushort, 0x0000, 0x0000, 0x0000, 0x0001>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB16I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R16G16B16A16_SINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLshort, 0x0000, 0x0000, 0x0000, 0x0001>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB32UI:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_UINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLuint, 0x00000000, 0x00000000, 0x00000000,
                                                 0x00000001>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        case GL_RGB32I:
        {
            switch (dxgiFormat)
            {
                case DXGI_FORMAT_R32G32B32A32_SINT:
                {
                    static const InitializeTextureDataFunction initFunction =
                        Initialize4ComponentData<GLint, 0x00000000, 0x00000000, 0x00000000,
                                                 0x00000001>;
                    return initFunction;
                }
                default:
                    break;
            }
        }
        default:
        {
            return nullptr;
        }
    }
}

}  // namespace d3d11

}  // namespace rx
