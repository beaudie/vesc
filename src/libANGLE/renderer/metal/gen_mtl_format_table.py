#!/usr/bin/python
# Copyright 2019 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_mtl_format_table.py:
#  Code generation for Metal format map.
#  TODO(hqle): don't run this script directly. Run scripts/run_code_generation.py.
#

from datetime import date
import json
import math
import pprint
import re
import sys

sys.path.append('..')
import angle_format

template_autogen_inl = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {data_source_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Metal Format table:
//   Conversion from ANGLE format to Metal format.

#include "libANGLE/renderer/metal/Metal_platform.h"
#include <TargetConditionals.h>

#include "libANGLE/renderer/Format.h"
#include "libANGLE/renderer/metal/mtl_format_utils.h"

namespace rx
{{
namespace mtl
{{

void Format::init(angle::FormatID intendedFormatId_)
{{
    this->intendedFormatId = intendedFormatId_;

    // Override the unsupported format
    switch (this->intendedFormatId)
    {{
{angle_image_format_override_switch}
    }}

    // Actual conversion
    switch (this->actualFormatId)
    {{
{angle_image_format_switch}
    }}
}}

void VertexFormat::init(angle::FormatID angleFormatId, bool forStreaming)
{{
    this->intendedFormatId = angleFormatId;

    // Override the unsupported format
    switch (this->intendedFormatId)
    {{
{angle_vertex_format_override_switch}
    }}

    if (!forStreaming)
    {{
        goto conversion;
    }}

    // Override the unsupported format for streaming
    switch (this->intendedFormatId)
    {{
{angle_vertex_format_streaming_override_switch}
    }}

conversion:
    // Actual conversion
    switch (this->actualFormatId)
    {{
{angle_vertex_format_switch}
    }}
}}

}}  // namespace mtl
}}  // namespace rx
"""

case_image_format_override_template = """        case angle::FormatID::{angle_format}:
            this->actualFormatId = angle::FormatID::{override_format};
            break;

"""

case_image_format_template = """        case angle::FormatID::{angle_format}:
            this->metalFormat = {mtl_format};
            break;

"""

case_vertex_format_override_template = """        case angle::FormatID::{angle_format}:
            this->actualFormatId = angle::FormatID::{override_format};
            this->vertexLoadFunction = {vertex_copy_function};
            // Skip streaming format override step
            goto conversion;

"""

case_vertex_format_template = """        case angle::FormatID::{angle_format}:
            this->metalFormat = {mtl_format};
            if (!this->vertexLoadFunction)
            {{
                this->vertexLoadFunction = {vertex_copy_function};
            }}
            break;

"""


def gen_image_override_switch_string(angle_override, mac_override, non_mac_override):
    switch_data = ''
    for angle_format in sorted(angle_override.keys()):
        override_format = angle_override[angle_format]
        switch_data += case_image_format_override_template.format(
            angle_format=angle_format, override_format=override_format)
    switch_data += "#if TARGET_OS_OSX\n"
    for angle_format in sorted(mac_override.keys()):
        override_format = mac_override[angle_format]
        switch_data += case_image_format_override_template.format(
            angle_format=angle_format, override_format=override_format)

    switch_data += "#else  // TARGET_OS_OSX\n"
    for angle_format in sorted(non_mac_override.keys()):
        override_format = non_mac_override[angle_format]
        switch_data += case_image_format_override_template.format(
            angle_format=angle_format, override_format=override_format)
    switch_data += "#endif\n"
    switch_data += "        default:\n"
    switch_data += "            this->actualFormatId = this->intendedFormatId;\n"
    return switch_data


def gen_image_map_switch_string(angle_to_mtl, mac_specific_formats, ios_specific_formats):
    switch_data = ''
    for angle_format in sorted(angle_to_mtl.keys()):
        mtl_format = angle_to_mtl[angle_format]
        switch_data += case_image_format_template.format(
            angle_format=angle_format, mtl_format=mtl_format)
    switch_data += "#if TARGET_OS_OSX\n"
    for angle_format in sorted(mac_specific_formats.keys()):
        mtl_format = mac_specific_formats[angle_format]
        switch_data += case_image_format_template.format(
            angle_format=angle_format, mtl_format=mtl_format)
    switch_data += "#else  // TARGET_OS_OSX\n"
    for angle_format in sorted(ios_specific_formats.keys()):
        mtl_format = ios_specific_formats[angle_format]
        switch_data += case_image_format_template.format(
            angle_format=angle_format, mtl_format=mtl_format)
    switch_data += "#endif  // TARGET_OS_OSX\n"
    switch_data += "        default:\n"
    switch_data += "            this->metalFormat = MTLPixelFormatInvalid;\n"
    switch_data += "            this->actualFormatId = angle::FormatID::NONE;"
    return switch_data


def gen_vertex_override_switch_string(angle_override):
    switch_data = ''
    for angle_fmt in sorted(angle_override.keys()):
        override_format = angle_override[angle_fmt]
        copy_function = angle_format.get_vertex_copy_function(angle_fmt, override_format)
        switch_data += case_vertex_format_override_template.format(
            angle_format=angle_fmt,
            override_format=override_format,
            vertex_copy_function=copy_function)
    switch_data += "        default:\n"
    switch_data += "            this->actualFormatId = this->intendedFormatId;\n"
    switch_data += "            this->vertexLoadFunction = nullptr;"
    return switch_data


def gen_vertex_map_switch_string(angle_to_mtl):
    switch_data = ''
    for angle_fmt in sorted(angle_to_mtl.keys()):
        mtl_format = angle_to_mtl[angle_fmt]
        copy_function = angle_format.get_vertex_copy_function(angle_fmt, angle_fmt)
        switch_data += case_vertex_format_template.format(
            angle_format=angle_fmt, mtl_format=mtl_format, vertex_copy_function=copy_function)
    switch_data += "        default:\n"
    switch_data += "            this->metalFormat = MTLVertexFormatInvalid;\n"
    switch_data += "            this->actualFormatId = angle::FormatID::NONE;\n"
    switch_data += "            this->vertexLoadFunction = nullptr;"
    return switch_data


def main():
    # auto_script parameters.
    if len(sys.argv) > 1:
        inputs = ['mtl_format_map.json']
        outputs = ['mtl_format_table_autogen.mm']

        if sys.argv[1] == 'inputs':
            print ','.join(inputs)
        elif sys.argv[1] == 'outputs':
            print ','.join(outputs)
        else:
            print('Invalid script parameters')
            return 1
        return 0

    data_source_name = 'mtl_format_map.json'
    map_json = angle_format.load_json(data_source_name)
    map_image = map_json["image"]
    map_vertex = map_json["vertex"]

    image_angle_override = map_image["override"]
    image_mac_override = map_image["mac_override"]
    image_non_mac_override = map_image["non_mac_override"]
    image_angle_to_mtl = map_image["map"]
    image_mac_specific_formats = map_image["mac_specific"]
    image_ios_specific_formats = map_image["ios_specific"]

    vertex_angle_override = map_vertex["override"]
    vertex_angle_streaming_override = map_vertex["streaming_override"]
    vertex_angle_to_mtl = map_vertex["map"]

    image_override_data = gen_image_override_switch_string(
        image_angle_override, image_mac_override, image_non_mac_override)
    image_switch_data = gen_image_map_switch_string(image_angle_to_mtl, image_mac_specific_formats,
                                                    image_ios_specific_formats)

    vertex_override_data = gen_vertex_override_switch_string(vertex_angle_override)
    vertex_streaming_override_switch = gen_vertex_override_switch_string(
        vertex_angle_streaming_override)
    vertex_switch_data = gen_vertex_map_switch_string(vertex_angle_to_mtl)

    output_cpp = template_autogen_inl.format(
        script_name=sys.argv[0],
        copyright_year=date.today().year,
        data_source_name=data_source_name,
        angle_image_format_override_switch=image_override_data,
        angle_image_format_switch=image_switch_data,
        angle_vertex_format_override_switch=vertex_override_data,
        angle_vertex_format_streaming_override_switch=vertex_streaming_override_switch,
        angle_vertex_format_switch=vertex_switch_data)
    with open('mtl_format_table_autogen.mm', 'wt') as out_file:
        out_file.write(output_cpp)
        out_file.close()


if __name__ == '__main__':
    sys.exit(main())
