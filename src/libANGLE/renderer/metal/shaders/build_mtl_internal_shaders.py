#!/usr/bin/python3
# Copyright 2023 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# build_mtl_internal_shaders.py:
#   Compile .metal files into a header containing the mtllib data

import os
import subprocess
import sys
import argparse

template_header_boilerplate = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name}
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
"""


def metal_to_air(metal_src_file, sdk, compile_flags, dest_air_file):
    result = subprocess.run(
        ["xcrun", "-sdk", sdk, "metal"] + compile_flags +
        ["-c", metal_src_file, "-o", dest_air_file],
        stdout=subprocess.PIPE,
        text=True)

    if result.returncode != 0:
        raise Exception('Failed to compile metal to air: ' + result.stdout.strip())


def air_to_mtllib(src_air_file, sdk, dest_mtllib_file):
    result = subprocess.run(
        ["xcrun", "-sdk", sdk, "metallib", src_air_file, "-o", dest_mtllib_file],
        stdout=subprocess.PIPE,
        text=True)
    if result.returncode != 0:
        raise Exception('Failed to compile metal to air: ' + result.stdout.strip())


def metal_to_metallib(metal_src_file, sdk, compile_flags):
    intermediate_air_file = "temp_metal.air"
    metal_to_air(metal_src_file, sdk, compile_flags, intermediate_air_file)

    intermediate_metallib_file = "temp_metal.metallib"
    air_to_mtllib(intermediate_air_file, sdk, intermediate_metallib_file)
    os.remove(intermediate_air_file)

    with open(intermediate_metallib_file, 'rb') as f:
        mtllib = f.read()
    os.remove(intermediate_metallib_file)

    return mtllib


def generate_metallib_header(metal_src_file, sdk, compile_flags, variable_name, dest_header_file):
    boilerplate_code = template_header_boilerplate.format(
        script_name=os.path.basename(sys.argv[0]))

    metallib_data = metal_to_metallib(metal_src_file, sdk, compile_flags)

    with open(dest_header_file, 'wt') as out_file:
        out_file.write(boilerplate_code)
        out_file.write('\n')
        out_file.write('// C++ string version of default shaders mtllib.\n\n')
        out_file.write('\n\nstatic constexpr uint8_t ' + variable_name + '[] = {\n')
        for byte in metallib_data:
            out_file.write(f"{byte}, ")
        out_file.write('\n')
        out_file.write('};\n')
        out_file.close()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--source')
    parser.add_argument('--sdk')
    parser.add_argument('--std')
    parser.add_argument('-mmacosx-version-min')
    parser.add_argument('-mios-version-min')
    parser.add_argument('--variable')
    parser.add_argument('--output')
    args = parser.parse_args()

    compile_flags = [
        "--std=" + args.std,
    ]

    if args.mmacosx_version_min:
        compile_flags.append("-mmacosx-version-min=" + args.mmacosx_version_min)
    if args.mios_version_min:
        compile_flags.append("-mios-version-min=" + args.mios_version_min)

    generate_metallib_header(args.source, args.sdk, compile_flags, args.variable, args.output)


if __name__ == '__main__':
    sys.exit(main())
