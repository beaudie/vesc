#!/usr/bin/python
# Copyright 2018 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_texture_caps_table.py:
#  Code generation for vk texture caps map

from datetime import date
import json
import math
import pprint
import os
import re
import sys

sys.path.append('..')
import angle_format

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan Texture Caps information based on VK format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

using namespace angle;

namespace rx
{{

namespace vk
{{

bool FillMandatoryTextureCaps(VkFormat vkFormat, VkFormatProperties &formatProperties)
{{
    switch (vkFormat)
    {{
{format_case_data}
        default:
            return false;
    }}
}}

}}  // namespace vk

}}  // namespace rx
"""

format_optimal_tiling_features = """{space}    formatProperties.optimalTilingFeatures =
{space}        {optimal_tiling_features};
"""

format_buffer_features = """{space}    formatProperties.bufferFeatures =
{space}        {buffer_features};
"""

format_entry_template = """{space}case {vk_format}:
{space}{{
{optimal_tiling_features}
{buffer_features}
{space}    return true;
{space}}}
"""


def gen_format_case(formatDict):
    vk_format = formatDict['format'];
    optimal_tiling_features_list = formatDict['optimalTilingFeatures'];
    buffer_features_list = formatDict['bufferFeatures'];

    if len(optimal_tiling_features_list) > 0:
        optimal_tiling_features = format_optimal_tiling_features.format(
            space = '        ',
            optimal_tiling_features = " |\n                ".join(optimal_tiling_features_list))
    else:
        optimal_tiling_features = ""

    if len(buffer_features_list) > 0:
        buffer_features = format_buffer_features.format(
            space = '        ',
            buffer_features = " |\n                ".join(buffer_features_list))
    else:
        buffer_features = ""

    return format_entry_template.format(
        space = '        ',
        vk_format = vk_format,
        optimal_tiling_features = optimal_tiling_features,
        buffer_features = buffer_features)


input_file_name = 'vk_texture_caps.json'
out_file_name = 'vk_texture_caps'

vk_map = angle_format.load_json(input_file_name)
vk_cases = [gen_format_case(dict) for dict in vk_map]

output_cpp = template_table_autogen_cpp.format(
    copyright_year = date.today().year,
    format_case_data = "\n".join(vk_cases),
    script_name = __file__,
    out_file_name = out_file_name,
    input_file_name = input_file_name)

with open(out_file_name + '_autogen.cpp', 'wt') as out_file:
    out_file.write(output_cpp)
    out_file.close()
