#!/usr/bin/python
# Copyright 2018 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_texture_caps_table.py:
#  Code generation for vk texture caps map

from datetime import date
import json
import math
import pprint
import os
import re
import sys

sys.path.append('..')
import angle_format

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan mandatory format support information based on VK format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

using namespace angle;

namespace
{{
std::array<VkFormatProperties, 185> kFormatProperties;
bool formatPropertiesInitialized = false;
void initializeFormatProperties()
{{
    if (formatPropertiesInitialized)
    {{
        return;
    }}
    
    {format_case_data}

    formatPropertiesInitialized = true;
}}
}}

namespace rx
{{

namespace vk
{{

VkFormatProperties* GetMandatoryFormatSupport(VkFormat vkFormat)
{{
    initializeFormatProperties();
    return &kFormatProperties[vkFormat];
}}

}}  // namespace vk

}}  // namespace rx

"""

template_format_property = """kFormatProperties[{vk_format}] = {{{{}}, {optimal_features}, {buffer_features}}};"""


def gen_format_case(vk_format, vk_map):
    if len(vk_map[vk_format]) > 0:
        # Check which feature is a buffer feature or not.
        buffer_features = [x for x in vk_map[vk_format] if x.find("_BUFFER_") != -1]
        optimal_features = [x for x in vk_map[vk_format] if x.find("_BUFFER_") == -1]
        optimal_features_str = "|".join(optimal_features) if len(optimal_features) else "0"
        buffer_features_str = "|".join(buffer_features) if len(buffer_features) else "0"
    else:
        optimal_features_str = "0"
        buffer_features_str = "0"

    return template_format_property.format(
        vk_format = vk_format,
        optimal_features = optimal_features_str,
        buffer_features = buffer_features_str)


input_file_name = 'vk_mandatory_format_support_data.json'
out_file_name = 'vk_mandatory_format_support_table'

vk_map = angle_format.load_json(input_file_name)
vk_cases = [gen_format_case(vk_format, vk_map) for vk_format in vk_map]

output_cpp = template_table_autogen_cpp.format(
    copyright_year = date.today().year,
    format_case_data = "".join(vk_cases),
    script_name = __file__,
    out_file_name = out_file_name,
    input_file_name = input_file_name)

with open(out_file_name + '_autogen.cpp', 'wt') as out_file:
    out_file.write(output_cpp)
    out_file.close()
