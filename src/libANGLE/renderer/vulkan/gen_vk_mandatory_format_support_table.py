#!/usr/bin/python
# Copyright 2018 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_mandatory_format_support_table.py:
#  Code generation for mandatory formats supported by Vulkan.
#  NOTE: don't run this script directly. Run scripts/run_code_generation.py.

from datetime import date
import sys

sys.path.append('..')
import angle_format
import xml.etree.ElementTree as etree
import sys, os

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name} and
// the vk.xml file situated at
// /third_party/vulkan-validation-layers/src/scripts/vk.xml
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan mandatory format support information based on VK format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

#include <unordered_map>

using namespace angle;

namespace rx
{{

namespace vk
{{

const VkFormatProperties& GetMandatoryFormatSupport(VkFormat vkFormat)
{{
    static const auto* const kFormatPropertiesMap = new std::unordered_map<uint64_t, VkFormatProperties>{{
        {format_case_data}
    }};

    auto it = kFormatPropertiesMap->find(vkFormat);
    ASSERT(it != kFormatPropertiesMap->end());
    return it->second;
}}

}}  // namespace vk

}}  // namespace rx

"""

template_format_property = """
/* {vk_format} */
{{{vk_format}, {{0, {optimal_features}, {buffer_features}}}}}"""

# Constants taken from Vulkan-Headers/registry/generator.py.
EXTENSION_ENUM_VALUE_BASE = 1000000000
EXTENSION_ENUM_VALUE_BLOCK_SIZE = 1000


def script_relative(path):
    return os.path.join(os.path.dirname(sys.argv[0]), path)


def gen_format_case(value, vk_format_value_to_name_map, vk_map):
    vk_format = vk_format_value_to_name_map[value]

    if vk_format in vk_map and len(vk_map[vk_format]) > 0:
        # Check which feature is a buffer feature or not.
        buffer_features = [x for x in vk_map[vk_format] if x.find("_BUFFER_") != -1]
        optimal_features = [x for x in vk_map[vk_format] if x.find("_BUFFER_") == -1]
        optimal_features_str = "|".join(optimal_features) if len(optimal_features) else "0"
        buffer_features_str = "|".join(buffer_features) if len(buffer_features) else "0"
    else:
        optimal_features_str = "0"
        buffer_features_str = "0"

    return template_format_property.format(
        vk_format=vk_format,
        optimal_features=optimal_features_str,
        buffer_features=buffer_features_str)


def main():

    input_file_name = 'vk_mandatory_format_support_data.json'
    out_file_name = 'vk_mandatory_format_support_table_autogen.cpp'
    vk_xml_file = '../../../../third_party/vulkan-headers/src/registry/vk.xml'

    # auto_script parameters.
    if len(sys.argv) > 1:
        inputs = [
            '../angle_format.py',
            input_file_name,
            vk_xml_file,
        ]
        outputs = [out_file_name]

        if sys.argv[1] == 'inputs':
            print ','.join(inputs)
        elif sys.argv[1] == 'outputs':
            print ','.join(outputs)
        else:
            print('Invalid script parameters')
            return 1
        return 0

    tree = etree.parse(script_relative(vk_xml_file))
    root = tree.getroot()

    vk_format_value_to_name_map = {}

    vk_format_enums = root.findall(".//enums[@name='VkFormat']/enum")
    for format_enum in vk_format_enums:
        vk_format_name = format_enum.attrib['name']
        vk_format_value = int(format_enum.attrib['value'])
        vk_format_value_to_name_map[vk_format_value] = vk_format_name

    vk_format_ext_enums = root.findall(".//feature//enum[@extends='VkFormat']")
    for vk_format_ext_enum in vk_format_ext_enums:
        vk_format_name = vk_format_ext_enum.attrib['name']

        if 'offset' not in vk_format_ext_enum.attrib:
            continue
        vk_format_ext_offset = int(vk_format_ext_enum.attrib['offset'])

        if 'extnumber' not in vk_format_ext_enum.attrib:
            continue
        vk_format_ext_extnumber = int(vk_format_ext_enum.attrib['extnumber'])

        vk_format_value = EXTENSION_ENUM_VALUE_BASE + (
            vk_format_ext_extnumber - 1) * EXTENSION_ENUM_VALUE_BLOCK_SIZE + vk_format_ext_offset
        vk_format_value = '%d' % vk_format_value
        vk_format_value_to_name_map[vk_format_value] = vk_format_name

    vk_map = angle_format.load_json(input_file_name)
    vk_cases = [
        gen_format_case(value, vk_format_value_to_name_map, vk_map)
        for value in vk_format_value_to_name_map
    ]

    output_cpp = template_table_autogen_cpp.format(
        copyright_year=date.today().year,
        format_case_data="\n,".join(vk_cases),
        script_name=__file__,
        out_file_name=out_file_name,
        input_file_name=input_file_name)

    with open(out_file_name, 'wt') as out_file:
        out_file.write(output_cpp)
        out_file.close()
    return 0


if __name__ == '__main__':
    sys.exit(main())
