#!/usr/bin/python
# Copyright 2016 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_format_table.py:
#  Code generation for vk format map. See vk_format_map.json for data source.

from datetime import date
import json
import math
import pprint
import os
import re
import sys

sys.path.append('..')
import angle_format

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan format information based on GL format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

#include "image_util/copyimage.h"
#include "image_util/generatemip.h"
#include "image_util/loadimage.h"

using namespace angle;

namespace rx
{{

namespace vk
{{

void Format::initialize(VkPhysicalDevice physicalDevice, const angle::Format &angleFormat)
{{
    switch (angleFormat.id)
    {{
{format_case_data}
        default:
            UNREACHABLE();
            break;
    }}
}}

}}  // namespace vk

}}  // namespace rx
"""

empty_format_entry_template = """{space}case angle::Format::ID::{format_id}:
{space}    // This format is not implemented in Vulkan.
{space}    break;
"""

format_entry_template = """{space}case angle::Format::ID::{format_id}:
{space}{{
{space}    internalFormat = {internal_format};
{space}    textureFormatID = angle::Format::ID::{texture};
{space}    vkTextureFormat = {vk_texture_format};
{space}    bufferFormatID = angle::Format::ID::{buffer};
{space}    vkBufferFormat = {vk_buffer_format};
{space}    dataInitializerFunction = {initializer};
{space}    break;
{space}}}
"""

def gen_format_case(angle, internal_format, vk_map, vk_overrides):

    args = {
        "space": "        ",
        "format_id": angle,
        "internal_format": internal_format
    }

    if (angle not in vk_map and angle not in vk_overrides) or angle == 'NONE':
        return empty_format_entry_template.format(**args)

    if angle in vk_map:
        args["buffer"] = angle
        args["texture"] = angle

    if angle in vk_overrides:
        args.update(vk_overrides[angle])

    assert "buffer" in args, "Missing buffer format for " + angle
    assert "texture" in args, "Missing texture format for " + angle

    args["vk_buffer_format"]  = vk_map[args["buffer"]]
    args["vk_texture_format"] = vk_map[args["texture"]]

    args["initializer"] = angle_format.get_internal_format_initializer(
        internal_format, args["texture"])

    return format_entry_template.format(**args)

input_file_name = 'vk_format_map.json'
out_file_name = 'vk_format_table'

angle_to_gl = angle_format.load_inverse_table(os.path.join('..', 'angle_format_map.json'))
vk_json_data = angle_format.load_json(input_file_name)
vk_map = vk_json_data["map"]
vk_overrides = vk_json_data["overrides"]
vk_cases = [gen_format_case(angle, gl, vk_map, vk_overrides) for angle, gl in sorted(angle_to_gl.iteritems())]

output_cpp = template_table_autogen_cpp.format(
    copyright_year = date.today().year,
    format_case_data = "\n".join(vk_cases),
    script_name = __file__,
    out_file_name = out_file_name,
    input_file_name = input_file_name)

with open(out_file_name + '_autogen.cpp', 'wt') as out_file:
    out_file.write(output_cpp)
    out_file.close()
