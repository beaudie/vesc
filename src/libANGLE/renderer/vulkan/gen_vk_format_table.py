#!/usr/bin/python
# Copyright 2016 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_format_table.py:
#  Code generation for vk format map. See vk_format_map.json for data source.

from datetime import date
import json
import math
import pprint
import os
import re
import sys

sys.path.append('..')
import angle_format

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan format information based on GL format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

#include "image_util/copyimage.h"
#include "image_util/generatemip.h"
#include "image_util/loadimage.h"

using namespace angle;

namespace rx
{{

namespace vk
{{

void Format::initialize(VkPhysicalDevice physicalDevice,
                        const angle::Format &angleFormat,
                        VkFormatProperties *textureFormatPropertiesOut)
{{
    switch (angleFormat.id)
    {{
{format_case_data}
        default:
            UNREACHABLE();
            break;
    }}
}}

}}  // namespace vk

}}  // namespace rx
"""

format_entry_template = """
case angle::Format::ID::{format_id}:
%s    break;"""

empty_template = """    // This format is not implemented in Vulkan.
"""

begin_template = """    internalFormat = {internal_format};
"""

texture_template = """    textureFormatID = angle::Format::ID::{texture};
    vkTextureFormat = {vk_texture_format};
    dataInitializerFunction = {initializer};
    GetFormatProperties(physicalDevice, {vk_texture_format}, textureFormatPropertiesOut);
"""

texture_fallback_template = """    initTextureFallback(physicalDevice,
                                                       angle::Format::ID::{texture},
                                                       {vk_texture_format},
                                                       {initializer},
                                                       angle::Format::ID::{texture_fallback},
                                                       {vk_texture_format_fallback},
                                                       {initializer_fallback},
                                                       textureFormatPropertiesOut);
"""

buffer_template = """    bufferFormatID = angle::Format::ID::{buffer};
    vkBufferFormat = {vk_buffer_format};
"""

buffer_fallback_template = """    initBufferFallback(physicalDevice,
                                                     angle::Format::ID::{buffer},
                                                     {vk_buffer_format},
                                                     angle::Format::ID::{buffer_fallback},
                                                     {vk_buffer_format_fallback});
"""

def gen_format_case(angle, internal_format, vk_json_data):
    vk_map = vk_json_data["map"]
    body = ""
    args = dict(
        format_id=angle,
        internal_format=internal_format,
    )

    def get_formats(format, type):
        format = vk_json_data["overrides"].get(format, {}).get(type, format)
        fallback = vk_json_data["fallbacks"].get(format, {}).get(type, "NONE")
        if format not in vk_map:
            format = "NONE"
        return format, fallback

    texture_format, texture_fallback = get_formats(angle, "texture")
    if texture_format != "NONE":
        if texture_fallback != "NONE":
            body += texture_fallback_template
        else:
            body += texture_template

        args.update(
            texture=texture_format,
            vk_texture_format=vk_map[texture_format],
            initializer=angle_format.get_internal_format_initializer(internal_format,
                                                                     texture_format),
            texture_fallback=texture_fallback,
            vk_texture_format_fallback=vk_map[texture_fallback],
            initializer_fallback=angle_format.get_internal_format_initializer(internal_format,
                                                                              texture_fallback),
        )

    buffer_format, buffer_fallback = get_formats(angle, "buffer")
    if buffer_format != "NONE":
        if buffer_fallback != "NONE":
            body += buffer_fallback_template
        else:
            body += buffer_template

        args.update(
            buffer=buffer_format,
            vk_buffer_format=vk_map[buffer_format],
            buffer_fallback=buffer_fallback,
            vk_buffer_format_fallback=vk_map[buffer_fallback],
        )

    if body:
        body = begin_template + body
    else:
        body = empty_template

    return (format_entry_template % body).format(**args).replace('\n', '\n        ')

input_file_name = 'vk_format_map.json'
out_file_name = 'vk_format_table'

angle_to_gl = angle_format.load_inverse_table(os.path.join('..', 'angle_format_map.json'))
vk_json_data = angle_format.load_json(input_file_name)
vk_cases = [gen_format_case(angle, gl, vk_json_data)
             for angle, gl in sorted(angle_to_gl.iteritems())]

output_cpp = template_table_autogen_cpp.format(
    copyright_year = date.today().year,
    format_case_data = "\n".join(vk_cases),
    script_name = __file__,
    out_file_name = out_file_name,
    input_file_name = input_file_name)

with open(out_file_name + '_autogen.cpp', 'wt') as out_file:
    out_file.write(output_cpp)
    out_file.close()
