#!/usr/bin/python
# Copyright 2016 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_vk_format_table.py:
#  Code generation for vk format map. See vk_format_map.json for data source.

from datetime import date
import json
import math
import pprint
import os
import re
import sys

sys.path.append('..')
import angle_format

template_table_autogen_cpp = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// {out_file_name}:
//   Queries for full Vulkan format information based on GL format.

#include "libANGLE/renderer/vulkan/vk_format_utils.h"

#include "image_util/copyimage.h"
#include "image_util/generatemip.h"
#include "image_util/loadimage.h"

using namespace angle;

namespace rx
{{

namespace vk
{{

void Format::initialize(VkPhysicalDevice physicalDevice, const angle::Format &angleFormat)
{{
    switch (angleFormat.id)
    {{
{format_case_data}
        default:
            UNREACHABLE();
            break;
    }}
}}

}}  // namespace vk

}}  // namespace rx
"""

def gen_format_case(angle, internal_format, vk_json_data):
    vk_map = vk_json_data["map"]
    body = [ "internalFormat = %s;" % internal_format ]

    def get_formats(format, type):
        format = vk_json_data["overrides"].get(format, {}).get(type, format)
        fallback = vk_json_data["fallbacks"].get(format, {}).get(type, "NONE")
        if format not in vk_map:
            format = "NONE"
        return format, fallback

    texture_format, texture_format_fallback = get_formats(angle, "texture")
    body.append("initializeTexture(physicalDevice, angle::Format::ID::%s, %s, %s, angle::Format::ID::%s, %s, %s);" % (
        texture_format, vk_map[texture_format],
        angle_format.get_internal_format_initializer(internal_format, texture_format),
        texture_format_fallback, vk_map[texture_format_fallback],
        angle_format.get_internal_format_initializer(internal_format, texture_format_fallback)))

    buffer_format, buffer_format_fallback = get_formats(angle, "buffer")
    body.append("initializeBuffer(physicalDevice, angle::Format::ID::%s, %s, angle::Format::ID::%s, %s);" % (
        buffer_format, vk_map[buffer_format],
        buffer_format_fallback, vk_map[buffer_format_fallback]))

    body.append("break;")
    return "        case angle::Format::ID::%s:\n" % angle + ''.join('            %s\n' % i for i in body)

input_file_name = 'vk_format_map.json'
out_file_name = 'vk_format_table'

angle_to_gl = angle_format.load_inverse_table(os.path.join('..', 'angle_format_map.json'))
vk_json_data = angle_format.load_json(input_file_name)
vk_cases = [gen_format_case(angle, gl, vk_json_data)
             for angle, gl in sorted(angle_to_gl.iteritems())]

output_cpp = template_table_autogen_cpp.format(
    copyright_year = date.today().year,
    format_case_data = "\n".join(vk_cases),
    script_name = __file__,
    out_file_name = out_file_name,
    input_file_name = input_file_name)

with open(out_file_name + '_autogen.cpp', 'wt') as out_file:
    out_file.write(output_cpp)
    out_file.close()
