// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000025.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000025[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x94,0x55,
    0x18,0x87,0xbf,0xdd,0x85,0x5d,0x04,0xb9,0x08,0x28,0xa1,0x62,0x79,0xa1,0x8b,0x18,
    0x62,0xa1,0x99,0x80,0x4a,0x46,0x92,0x51,0x0a,0x9a,0x95,0x58,0x84,0x81,0x25,0xa6,
    0x69,0x92,0x26,0xe5,0x05,0x53,0xb0,0xb4,0x92,0xf2,0xd2,0x4d,0xac,0x44,0x2b,0x11,
    0xeb,0xbf,0xe8,0x2f,0x6a,0xba,0xcc,0x34,0xd3,0x79,0xbf,0x7d,0x5e,0xe6,0x37,0x3b,
    0x56,0x3b,0x73,0xe6,0xdb,0xf3,0x9c,0xf7,0xbc,0xe7,0xf7,0x5e,0xbe,0xb3,0x9b,0x4a,
    0x2e,0xce,0x44,0xa9,0x44,0x54,0x18,0x15,0x44,0xbf,0x44,0xd9,0xcf,0xac,0x28,0x19,
    0x25,0xc2,0xb3,0x28,0x4a,0xc7,0xcf,0x8d,0x1d,0x5b,0x3b,0xea,0x0f,0x0d,0xf6,0xd5,
    0x37,0xae,0x6c,0xb0,0xf5,0x92,0x28,0x15,0xdb,0xd9,0x5a,0x69,0x94,0x89,0xf2,0xc2,
    0xd3,0xc6,0xbe,0xde,0x3d,0xfb,0x8d,0x17,0x87,0x71,0x27,0x8c,0xb2,0x60,0x67,0x3c,
    0x63,0x3e,0xc2,0xb7,0xe2,0xd8,0xa7,0xed,0x89,0xa2,0xf6,0x28,0x3f,0xaa,0xe0,0xbc,
    0xc5,0x3c,0x9d,0x25,0x60,0x05,0xc2,0x92,0xb0,0x32,0x61,0x29,0x58,0xa5,0xb0,0x3c,
    0xd8,0x3d,0xc2,0xf2,0x61,0xf3,0x85,0xa5,0x61,0xf7,0x09,0xcb,0xc0,0x96,0x08,0x2b,
    0x80,0x3d,0x28,0x6c,0x06,0x6c,0x99,0xb0,0x42,0x58,0x83,0xb0,0x22,0x58,0xa3,0xb0,
    0x99,0xb0,0xd5,0xc2,0x8a,0x61,0xcd,0x71,0x9e,0x52,0xd3,0xf1,0x5a,0xce,0x36,0x84,
    0xe7,0x22,0xf2,0xe3,0xf3,0x85,0x32,0xb7,0x3c,0x2f,0x60,0x5e,0x11,0x76,0x25,0xe3,
    0xf5,0x54,0x9c,0x1b,0xfb,0x3e,0x3b,0xd8,0xa4,0x89,0xd3,0xf2,0x5a,0x15,0xe6,0x19,
    0xe2,0x4f,0xc6,0x3c,0x2f,0x8e,0x31,0xc3,0x98,0x13,0x76,0x16,0x62,0x6f,0xb6,0x45,
    0xc4,0x96,0x87,0xed,0x4c,0xfc,0x18,0x6f,0x62,0x5e,0x2c,0xbe,0x4b,0xb0,0xf7,0xb3,
    0xcb,0xf1,0x15,0xc5,0x3a,0xcb,0xa6,0xf3,0xec,0x1a,0x6c,0x94,0xff,0xcf,0x70,0x1b,
    0x3b,0xbf,0x92,0xfc,0x57,0x70,0x7e,0x65,0x7c,0x4e,0x96,0xd5,0x11,0xeb,0x1c,0xf4,
    0x98,0x7d,0x15,0x6b,0x19,0x59,0xaf,0x91,0x78,0x16,0xb0,0x5e,0x1e,0xf7,0x51,0x32,
    0xce,0x6d,0x1d,0xba,0x3d,0xef,0x66,0x77,0xbf,0x68,0x76,0x3f,0x75,0xf4,0x96,0xdb,
    0xaf,0xe0,0x5c,0x5f,0x5f,0x45,0x6e,0x2c,0x2f,0x6b,0xd9,0xeb,0xe7,0xae,0xc3,0x9f,
    0xf1,0xea,0xa0,0xa0,0x55,0x6a,0xa2,0x9f,0x84,0x68,0x78,0x82,0xef,0xad,0xc4,0x6e,
    0xf3,0x0d,0x30,0x3f,0xb3,0x2d,0x67,0xbe,0x89,0xf7,0xc4,0xf6,0x3f,0x43,0xac,0x69,
    0x34,0x3d,0xc7,0xf7,0x94,0xd8,0x77,0xa1,0xc1,0xe7,0xdb,0x25,0x66,0x8b,0x71,0x67,
    0x8e,0xfd,0xee,0x9c,0xdc,0x0e,0xf3,0xce,0xf8,0xfc,0x7c,0x4e,0x6d,0xae,0xf0,0x0e,
    0xb8,0xbf,0x1b,0xd2,0x87,0x53,0xf8,0x5e,0x4b,0x7c,0x53,0xdc,0x23,0xa9,0x38,0x97,
    0xf9,0xb1,0x5d,0x1e,0xf1,0x19,0xfb,0x23,0x90,0x7c,0x6c,0x0b,0xa4,0xce,0x3e,0x9f,
    0x27,0x73,0xcb,0xf7,0xfa,0x9c,0xf9,0x90,0xcc,0xad,0xbe,0x97,0x99,0xb7,0xd0,0xf7,
    0xa5,0xd4,0x6f,0x73,0xa0,0x25,0xdc,0x3d,0xa5,0x0c,0xaf,0xcd,0x7e,0xde,0xa7,0x59,
    0xac,0xb7,0x06,0x45,0x55,0xdc,0x3f,0xb3,0xe9,0xc5,0x16,0x6c,0xaa,0xe1,0xa7,0x82,
    0x8d,0xcd,0xe7,0xb2,0xaf,0x3a,0x8e,0x39,0x15,0xeb,0x9f,0x2b,0xf6,0xf3,0x89,0xc9,
    0xd6,0xe6,0x31,0x37,0xff,0xd6,0xb3,0xf7,0xe2,0xbf,0x06,0x7b,0x7f,0xcf,0x8c,0x4f,
    0x06,0x9b,0x85,0x72,0xbf,0x59,0x1f,0xff,0x1e,0x7c,0xd4,0xa2,0xfb,0xaf,0x60,0xef,
    0xf7,0x5c,0x2d,0x79,0x5c,0x82,0x6f,0xcb,0xc3,0x03,0xe4,0x6e,0x11,0xbe,0xd3,0xdc,
    0x7f,0xc6,0x8f,0x33,0x7f,0x08,0xe6,0x7b,0x96,0xca,0x1e,0xd3,0xbb,0x14,0x9b,0x3f,
    0x83,0x6f,0x3f,0xa3,0x56,0xf4,0x2f,0x43,0x7f,0x9d,0xe8,0x7f,0x18,0xee,0xfa,0xeb,
    0x61,0xae,0xbf,0x41,0xf4,0xdb,0xda,0x72,0xee,0x5b,0xf3,0xbd,0x5c,0xb4,0x3c,0x82,
    0x96,0x15,0xa2,0xff,0x51,0xb8,0xeb,0x6f,0x84,0xf9,0x9e,0x95,0xb2,0xc7,0xf4,0xaf,
    0xc4,0xc6,0xf4,0xfb,0x19,0x0d,0xa2,0xff,0x31,0xf4,0xaf,0x12,0xfd,0xab,0xe1,0xae,
    0xff,0x71,0x98,0xeb,0x6f,0x12,0xfd,0xb6,0xb6,0x26,0xee,0xbd,0xac,0xef,0x35,0x52,
    0xf7,0x66,0xb4,0x58,0xdf,0x65,0xfb,0x31,0xcb,0x9a,0xe5,0x3e,0xf0,0x9e,0x68,0x41,
    0xa3,0xfb,0x69,0xc2,0x8f,0xdd,0x11,0x4f,0x72,0x3f,0x78,0x4f,0x3e,0x85,0xe6,0x36,
    0x39,0x6b,0x23,0xdc,0xe7,0xed,0x9c,0x7d,0x92,0x1e,0x7d,0x1a,0x9b,0x76,0xfc,0xd8,
    0x1d,0xd2,0x81,0x9f,0x4d,0x92,0xdf,0x67,0xe1,0x9d,0xc1,0x26,0x1d,0x6b,0xcf,0xee,
    0x8d,0x84,0x6d,0x81,0x25,0xe2,0xef,0xe9,0xf8,0xfe,0xe9,0xc4,0x76,0x0b,0x3e,0xfc,
    0x8c,0xad,0x9c,0xd1,0x25,0x67,0x6c,0x83,0xf7,0x04,0x65,0x76,0x47,0x3c,0x4f,0x8c,
    0x9d,0xdc,0x21,0xdb,0xc8,0xcb,0x7a,0xd6,0xbc,0x56,0x2f,0xe0,0x6b,0xbb,0xd4,0xea,
    0x45,0xb8,0xd7,0xea,0x25,0x98,0xd7,0xaa,0x5b,0x6a,0x65,0x6b,0x3b,0xc2,0xe8,0x27,
    0xc7,0x3b,0xa4,0x6f,0x5e,0xe6,0x5e,0xd9,0x29,0x3a,0x5f,0x81,0xb7,0x70,0xef,0xf7,
    0x60,0xb3,0x39,0xdc,0x4a,0x16,0xf3,0xab,0xb0,0x1e,0xb9,0x47,0x92,0x92,0x93,0x5e,
    0x7c,0xf8,0x38,0x1d,0xce,0x32,0xbe,0x8b,0xbd,0xbd,0xe2,0xfb,0xb5,0x69,0xdf,0x33,
    0xe2,0x79,0x1f,0x6c,0x17,0x77,0x65,0xbe,0xdc,0xf1,0x9e,0x9b,0x3e,0x7a,0xa6,0x9b,
    0x78,0xfa,0x25,0x57,0xaf,0x93,0xab,0xdd,0x92,0xab,0x37,0xe0,0x9e,0xab,0x3d,0x30,
    0xcf,0xd5,0x5e,0xc9,0x95,0xad,0x0d,0x84,0xb1,0x17,0xdf,0x03,0x92,0xab,0x37,0xef,
    0x92,0xab,0x7d,0xf0,0x29,0x7c,0xef,0x87,0xb5,0xa1,0xd1,0xfd,0xd8,0xf3,0xb7,0x50,
    0x77,0xb3,0x79,0x0b,0x0d,0xfd,0xd8,0x0f,0xa0,0xe3,0xa0,0xe8,0x30,0x9b,0x03,0x61,
    0x1c,0x64,0xff,0x01,0xd1,0xf1,0xf6,0x5d,0x74,0x1c,0x82,0x7b,0x5e,0x07,0x73,0x6a,
    0xf6,0x0e,0x6c,0xf0,0x5f,0x6a,0x76,0x18,0x1f,0x3e,0x46,0xa9,0xd9,0x11,0xf6,0x1e,
    0x16,0xdf,0xef,0xe6,0xd4,0xec,0x28,0xec,0xc8,0x7f,0xd4,0xec,0x28,0xf9,0xf0,0x78,
    0x0e,0xe6,0xd4,0xb0,0x5b,0xfc,0xbf,0x87,0x7f,0x7f,0xef,0xde,0x87,0xe9,0xbb,0x78,
    0x0c,0x96,0x10,0x76,0x1c,0x96,0x14,0x76,0x02,0x96,0x8a,0x63,0xcd,0xbe,0x77,0x27,
    0xf1,0x79,0x8c,0x3d,0x27,0xd0,0x39,0xc4,0x9a,0xf7,0xd2,0x29,0x7a,0x69,0x58,0x7a,
    0xe9,0x03,0xb8,0xf7,0xd2,0x69,0x98,0xf7,0xd2,0x88,0xd4,0xd0,0xd6,0xce,0x84,0x71,
    0x8e,0x18,0xcf,0x48,0x8c,0xa3,0xfc,0x7e,0xfb,0x1d,0x79,0x16,0x36,0x2a,0xff,0x0f,
    0xdc,0xf6,0xc3,0x69,0xdb,0x6c,0xbe,0x3f,0x82,0x9d,0x95,0x7c,0x27,0x25,0xdf,0x43,
    0xd8,0x58,0x7e,0x47,0x38,0xfb,0x9c,0xc4,0xf5,0x31,0x71,0x9d,0x97,0xb8,0x3e,0x81,
    0x7b,0x5c,0x9f,0xc2,0x3c,0xae,0x31,0x89,0xcb,0xd6,0x2e,0x84,0x71,0x09,0xdf,0x17,
    0xa4,0x37,0x3f,0x43,0xab,0xf6,0xe6,0xe7,0x70,0xb7,0xb9,0x88,0x8d,0xff,0xd6,0x5e,
    0xc4,0xc6,0xf4,0x8e,0xe1,0xf3,0x92,0xdc,0xa5,0x5f,0xa0,0xf7,0x8a,0xf8,0xfc,0x12,
    0x6e,0xfb,0x2f,0x33,0xf7,0xb5,0xaf,0xf8,0x2f,0xf4,0x2b,0x3d,0xf0,0x35,0xac,0x4b,
    0xe2,0xfb,0x06,0xde,0x46,0x7c,0xe3,0x12,0x9f,0xad,0x5d,0x0d,0x63,0x1c,0x2d,0x57,
    0x45,0xfb,0x35,0xb4,0xfb,0xef,0xec,0x35,0x79,0xd7,0xdd,0x7e,0x5c,0xb4,0x7c,0x9b,
    0xa3,0xe5,0x3b,0x58,0x8d,0x68,0xf9,0x1e,0xee,0x5a,0x26,0x44,0x8b,0xad,0x5d,0x0f,
    0x63,0x02,0xdf,0xd7,0x45,0xcb,0x4d,0xb4,0xdc,0x40,0xcb,0x4d,0xd1,0xe2,0xf6,0x13,
    0xa2,0xe5,0x87,0x1c,0x2d,0x3f,0xc2,0x86,0x45,0xcb,0x4f,0x70,0xd7,0x32,0x29,0x5a,
    0x6c,0xed,0x56,0x6c,0x9b,0xf5,0x7d,0x4b,0xb4,0xdc,0x96,0xba,0x9b,0x96,0xdb,0xfc,
    0x77,0x34,0x2d,0x6e,0x3f,0x99,0x53,0xe3,0xb1,0x9c,0x1e,0x1d,0x91,0x9e,0xff,0x19,
    0x7f,0xe6,0xeb,0x0e,0xf3,0xbf,0xc3,0xdb,0xbe,0x3a,0x8c,0x7f,0x00,0x8f,0x30,0xae,
    0x9a,0xf4,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
