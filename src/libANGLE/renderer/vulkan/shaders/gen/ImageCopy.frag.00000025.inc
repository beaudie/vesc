// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000025.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000025[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x4f,0x9c,0x55,
    0x14,0xc5,0xbf,0x99,0x81,0x19,0x0a,0x72,0x29,0xd0,0x22,0x55,0xaa,0xb5,0x25,0xd1,
    0x50,0x81,0x28,0x56,0x04,0xdb,0x84,0x5a,0x69,0xa3,0x78,0xa9,0x18,0x6b,0x8b,0xf6,
    0x62,0x21,0x5e,0x5a,0xa1,0x5a,0x88,0x0a,0x51,0xa9,0x9a,0x68,0x82,0x16,0x1e,0x6c,
    0x55,0x88,0x21,0xd5,0x28,0x24,0x2d,0x3c,0x28,0xa4,0x3e,0x98,0xf8,0x64,0x1a,0xa3,
    0x35,0xd8,0x7a,0xf9,0x4b,0x8c,0x97,0xc4,0xc4,0xb3,0xcf,0xfc,0x76,0xb3,0x32,0xd1,
    0x74,0x92,0x93,0x6f,0xce,0xda,0xb7,0xb5,0xf6,0xd9,0xdf,0x99,0xc9,0xa4,0x37,0xe6,
    0x92,0x24,0x95,0x94,0x26,0x25,0xc9,0x6f,0x49,0xfe,0xb3,0x3a,0x49,0x07,0x24,0xff,
    0xbc,0x2d,0x3c,0xcb,0x92,0x6c,0xdc,0xef,0xec,0xe9,0xed,0x69,0x3e,0x3e,0xdc,0xdf,
    0xdc,0x76,0x47,0xab,0xf9,0x55,0x24,0x99,0xe8,0x6f,0xb6,0xca,0x24,0x97,0x14,0x85,
    0xa7,0xad,0xe7,0x0f,0x3d,0x3b,0x68,0x78,0x79,0x58,0x5f,0x85,0x55,0x15,0xfc,0x0c,
    0xcf,0x59,0x8e,0xf0,0xad,0x3c,0xe6,0xb4,0x98,0x24,0xd9,0x95,0x14,0x27,0x35,0xd4,
    0xdd,0xc8,0xd3,0xb1,0x14,0x58,0x89,0x60,0x69,0xb0,0x2a,0xc1,0x32,0x60,0xb5,0x82,
    0x15,0x81,0x5d,0x2b,0x58,0x31,0xd8,0xf5,0x82,0x65,0xc1,0x6e,0x14,0x2c,0x07,0xb6,
    0x49,0xb0,0x12,0xb0,0x9b,0x05,0x5b,0x05,0xb6,0x59,0xb0,0x52,0xb0,0x56,0xc1,0xca,
    0xc0,0xda,0x04,0xbb,0x06,0xac,0x5d,0xb0,0x72,0xb0,0xbb,0x63,0x9f,0x32,0x57,0xf4,
    0x5a,0xcf,0x76,0x84,0xe7,0x4d,0xf4,0xc7,0xf7,0x1b,0x64,0x6f,0x7d,0x5e,0xcf,0xbe,
    0x26,0x44,0xa5,0xa3,0x3d,0x13,0x7b,0x63,0xdf,0xd7,0x04,0x9f,0x2c,0x3a,0xad,0xaf,
    0x75,0x61,0x9f,0x43,0xbf,0xd9,0xd7,0x06,0xcf,0x52,0xec,0x66,0x2b,0x43,0x4b,0x51,
    0xc4,0x8a,0x22,0xdf,0x14,0x5a,0x3a,0xd9,0x97,0x4b,0xae,0x0a,0xfc,0xbd,0x56,0x35,
    0xb9,0x92,0xc8,0xab,0xea,0x4a,0x5f,0xbd,0xa6,0xad,0xea,0xab,0x2c,0xf7,0xb1,0xfa,
    0xb5,0xf4,0xbb,0x86,0xfa,0xb5,0xb1,0x4e,0x1e,0x6b,0x42,0xdb,0x5a,0xf8,0x98,0x7f,
    0x1d,0xb6,0x9c,0xd8,0x1b,0x44,0xcf,0x7a,0xec,0xd5,0x71,0x6e,0xd2,0xb1,0x97,0x4d,
    0xf0,0xf6,0x3e,0x7b,0x5c,0x13,0xb3,0xe3,0xfb,0x2d,0x68,0x37,0xdd,0xdb,0xe0,0x69,
    0x79,0xeb,0x43,0xc6,0x2e,0xe9,0xa9,0x7e,0x52,0x3c,0xaf,0x0b,0x7d,0xde,0x1e,0x9e,
    0x5d,0xf0,0xb8,0x07,0x7c,0x3b,0xba,0x6c,0xbf,0xa3,0xa0,0x7e,0x77,0xc1,0xbe,0x87,
    0x99,0xb7,0xf8,0x07,0xd0,0x91,0x85,0xcf,0x6e,0xce,0x21,0xc3,0x7e,0x0f,0xb6,0x8c,
    0xc4,0xf7,0xc1,0xcf,0xf7,0x07,0xf1,0xf1,0xfd,0xb1,0x82,0xbe,0x4d,0x30,0xff,0xbe,
    0x3f,0x5d,0xd0,0xf7,0x33,0xcc,0xb3,0xf1,0x39,0x4f,0xad,0x6d,0xe8,0x39,0xcf,0x1d,
    0x90,0x89,0x7d,0x2b,0x8e,0x75,0x8b,0xd0,0x63,0xd8,0x9f,0x01,0xb1,0xde,0x6e,0x65,
    0xe6,0x2a,0xe9,0xed,0x43,0x81,0x41,0x05,0xef,0x79,0x25,0xcb,0xfb,0x38,0xc8,0xec,
    0xae,0xc6,0xde,0x15,0x32,0xd4,0xf1,0xae,0xaf,0x61,0x0e,0xb6,0xe2,0x53,0x0f,0xfe,
    0x46,0xf0,0xb1,0xfd,0x3a,0xe2,0xea,0x89,0xb3,0x39,0xb8,0x81,0xb8,0x06,0xe2,0x7c,
    0x76,0x0d,0x3f,0x1b,0x7c,0x36,0xc8,0x1d,0x61,0xb3,0xf1,0x47,0x60,0xde,0x08,0x9f,
    0xbf,0x83,0xbf,0xdf,0x15,0x8d,0xe8,0xb1,0xef,0xbb,0x43,0x5c,0x96,0xfb,0x62,0x1d,
    0xbe,0xaf,0xd1,0xaf,0x5b,0xc0,0x1f,0x09,0x3b,0xe3,0xf4,0x35,0x98,0xfb,0xfd,0x15,
    0x72,0x78,0x2e,0x7b,0xfe,0x1e,0xbc,0xcc,0xef,0x07,0x7c,0x8a,0x89,0xd9,0x24,0x1a,
    0x36,0xa3,0xa1,0x49,0x34,0xdc,0x0a,0xee,0x1a,0x9a,0xc1,0x5c,0x43,0xab,0x68,0x30,
    0x5b,0x0b,0xf7,0x96,0xd5,0x6d,0x11,0x0d,0xb7,0x53,0x3b,0x25,0x1a,0xda,0xc0,0x5d,
    0xc3,0x37,0x60,0xee,0x67,0x1a,0x3c,0x57,0xab,0x68,0xb8,0x88,0x4f,0x23,0x31,0x2d,
    0xa2,0xe1,0x4e,0x34,0x6c,0x11,0x0d,0xed,0xe0,0xae,0xe1,0x2e,0x30,0xd7,0xd0,0x29,
    0x1a,0xcc,0xd6,0x11,0xe7,0x2e,0x5f,0xb7,0x83,0x39,0xca,0xc5,0x7c,0xf9,0xda,0x17,
    0xe5,0x5d,0x34,0x8e,0xee,0xdb,0x29,0x1c,0x7f,0xc4,0xaf,0x95,0xb8,0x0e,0xf8,0xd8,
    0x3b,0x7a,0x2f,0xef,0xa7,0xcf,0xdc,0x4e,0x38,0x77,0xcb,0xcc,0xed,0x02,0x1f,0x67,
    0xe6,0xee,0x03,0xb3,0xbc,0x43,0xdc,0x95,0xf7,0x83,0x5b,0x1e,0x7b,0x87,0x1f,0x24,
    0x4f,0x0f,0x79,0xb2,0x91,0x7b,0x1e,0xb7,0x18,0x7b,0xa7,0x1f,0x06,0xb3,0x73,0x29,
    0x8d,0xbd,0xcf,0xe7,0x49,0x04,0xeb,0x05,0x4b,0x45,0xff,0x6c,0xbc,0x0f,0x1e,0xc5,
    0xb7,0x97,0x1c,0xfd,0x21,0x9f,0xdd,0x3f,0x8f,0xa1,0xe7,0xe9,0x10,0x6b,0xf7,0xc4,
    0xe3,0x60,0xdd,0xd4,0xb4,0xd8,0xbd,0xe0,0xef,0x04,0x1f,0xdb,0xef,0x23,0xdf,0x5e,
    0xe1,0xfe,0x04,0xdc,0xfb,0x84,0xfb,0x93,0xe0,0xce,0x7d,0x3f,0xd8,0x9e,0xd0,0x11,
    0xbb,0x1b,0x0e,0x50,0x7b,0x1f,0x5c,0xf7,0xcb,0x1c,0x1c,0x22,0xdf,0x41,0x99,0x83,
    0xa7,0xc0,0x7d,0x0e,0x0e,0x83,0xf9,0x1c,0x0c,0xc8,0x1c,0x1c,0x8e,0x1a,0xad,0x76,
    0xfe,0x6c,0xfb,0x65,0x96,0x9f,0xa1,0x76,0x26,0xf6,0xb2,0x24,0xea,0x7e,0x0e,0xec,
    0x80,0xdc,0x31,0x69,0xfa,0x67,0xf6,0x23,0xc4,0xf9,0x7a,0x8b,0x7e,0x1d,0x25,0xf6,
    0x48,0xcc,0xb5,0x2a,0xea,0x1a,0x24,0xcf,0x51,0xee,0xb9,0x62,0xb9,0x7f,0x6d,0xde,
    0x06,0xe0,0x34,0x24,0x7a,0x5f,0x40,0xef,0x31,0xd1,0xfb,0x22,0xb8,0xeb,0x3d,0x0e,
    0xe6,0x7a,0x47,0x44,0xaf,0xd9,0x86,0xc3,0x1a,0x21,0xf7,0xb0,0xe8,0x7d,0x49,0xf4,
    0x2e,0x90,0xeb,0x65,0xf0,0x6e,0x38,0x79,0xdc,0x08,0xef,0x80,0xf9,0xbc,0x42,0xcd,
    0x21,0xfc,0x87,0xa9,0x3b,0x26,0x75,0xcd,0x67,0x34,0xac,0x31,0xe2,0x47,0xa5,0xee,
    0xab,0xff,0xd1,0xe7,0xd7,0xaf,0xd2,0xe7,0x71,0xe2,0x7c,0xbd,0x4d,0x9f,0x4f,0x10,
    0x3b,0x2e,0x7d,0x7e,0x93,0x3c,0x27,0xfe,0xa7,0xcf,0xce,0x69,0x0c,0x4d,0x16,0xf3,
    0x13,0x31,0x23,0xc4,0x8f,0x16,0x9c,0xc9,0x80,0xf8,0xae,0x70,0x96,0xfd,0xc4,0x8d,
    0xc9,0x79,0xbd,0xcb,0x79,0x4d,0xc8,0x79,0xbd,0x07,0xee,0xe7,0x75,0x12,0xcc,0xcf,
    0x6b,0x4a,0xfa,0x66,0xb6,0xc9,0xb0,0x4e,0x51,0x77,0x52,0x74,0xbd,0x4f,0xed,0x15,
    0x74,0xe5,0xe8,0x91,0xeb,0x9a,0x22,0xe6,0x94,0xf0,0xf9,0x00,0x3e,0xa7,0x85,0xcf,
    0x87,0xe0,0xce,0xe7,0x23,0x30,0xe7,0x33,0x23,0x7c,0xcc,0x36,0x1d,0xd6,0x2c,0xb9,
    0xa7,0xe5,0x1c,0x3f,0x86,0x4b,0x86,0xbb,0xde,0x38,0x7e,0x2b,0xb8,0xdf,0xa3,0x33,
    0xc4,0xce,0xca,0xbd,0xf0,0x09,0xbc,0xce,0xc8,0xbd,0xf0,0x29,0xf8,0x05,0xf2,0x7f,
    0x06,0xd6,0x27,0x5c,0x3f,0x07,0xef,0x86,0xeb,0xbc,0x70,0x35,0xdb,0x5c,0x58,0xf3,
    0xd4,0x9b,0x13,0x5e,0x17,0x88,0x59,0x91,0xdf,0x20,0xf7,0x9b,0x97,0xb3,0xbd,0x84,
    0xcf,0x2c,0x31,0x73,0xc2,0xe7,0x2c,0x7c,0x1a,0x84,0xcf,0x39,0x70,0xe7,0xb3,0x28,
    0x7c,0xce,0xc5,0xf7,0x2a,0x89,0x98,0xd5,0x59,0x10,0x3e,0xdf,0x11,0x73,0x89,0x33,
    0x34,0x3e,0xee,0xb7,0x28,0x7c,0x2e,0xe3,0x33,0x4f,0xcc,0x82,0xf0,0xf9,0x02,0x3e,
    0x13,0xc2,0xe7,0x4b,0x70,0xe7,0xb3,0x2c,0x7c,0xcc,0xb6,0x14,0xd6,0x32,0x75,0x96,
    0x84,0xcf,0xf7,0xfc,0x37,0xba,0x2c,0xf3,0xe4,0x7e,0xcb,0xc2,0xe7,0x57,0x7c,0x16,
    0x89,0x59,0x2a,0x38,0xe3,0x19,0xf1,0xfd,0x85,0x79,0x98,0x26,0x6e,0xb9,0x60,0x4e,
    0xa7,0xc4,0xf7,0x67,0xe6,0x7b,0x92,0xb8,0x99,0xf8,0x3f,0x31,0x13,0xff,0x1f,0x9a,
    0xed,0x9f,0x70,0x6a,0xed,0x61,0xfd,0x0b,0x86,0xe4,0xb2,0x20,0x94,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
