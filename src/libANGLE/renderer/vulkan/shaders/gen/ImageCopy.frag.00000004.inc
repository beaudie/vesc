// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x8b,0x97,0x8e,0x55,
    0x14,0xc6,0xdf,0x99,0x6f,0x2e,0x8c,0x7b,0x26,0xb7,0x68,0xcd,0xb8,0xa5,0x46,0x43,
    0x35,0xee,0x3e,0xd7,0x72,0x29,0xb7,0x0c,0x45,0x9a,0x18,0x91,0xc4,0x90,0x08,0x95,
    0x3b,0x31,0x92,0x2e,0xa8,0xcc,0x54,0x54,0xa8,0x90,0x41,0x51,0xc8,0xad,0x1b,0xa9,
    0x50,0x11,0xea,0x0f,0xe8,0x3f,0x68,0x75,0x59,0xab,0xcb,0xd9,0xef,0xfc,0xf6,0xac,
    0x67,0x7d,0x4b,0x35,0x6b,0x9d,0xf5,0x7e,0xfb,0xd9,0xfb,0x3c,0xe7,0xd9,0x7b,0x9f,
    0x73,0xde,0xef,0x9b,0x44,0x7a,0x9b,0xec,0x28,0x91,0x16,0xe5,0x44,0xb5,0xa2,0x9f,
    0xa2,0xea,0xbf,0x46,0x51,0x7a,0x94,0x16,0x9e,0x75,0xa2,0xac,0xf8,0x39,0x78,0x58,
    0xf1,0xb0,0xc2,0xb9,0xf3,0xa6,0x14,0x16,0x75,0xe9,0x6c,0xfe,0xfa,0x51,0x22,0x8e,
    0x33,0x5f,0x83,0x28,0x3b,0xca,0x08,0x4f,0x1b,0x65,0xa5,0xd3,0x67,0x19,0xde,0x3e,
    0x8c,0x2b,0x61,0x34,0x0c,0x71,0x86,0x67,0x1b,0x47,0xf8,0xd4,0x3e,0xe6,0xb4,0x39,
    0x51,0x34,0x24,0xca,0x8c,0x3a,0xb2,0x5e,0x1b,0x9e,0x8e,0xa5,0x81,0xd5,0x12,0x2c,
    0x1d,0xac,0xa1,0x60,0x09,0xb0,0x5c,0xc1,0x32,0xc0,0x9a,0x09,0x96,0x09,0xd6,0x52,
    0xb0,0x2c,0xb0,0x3c,0xc1,0xb2,0xc1,0xda,0x0a,0x56,0x0b,0xac,0x83,0x60,0xb5,0xc1,
    0x3a,0x0a,0x96,0x03,0xd6,0x59,0xb0,0x3a,0x60,0x45,0x82,0xd5,0x05,0xeb,0x2e,0x58,
    0x3d,0xb0,0xde,0x71,0x9d,0x12,0x35,0xf9,0x5a,0xcd,0x26,0x84,0x67,0x6b,0xea,0xe3,
    0x76,0xbe,0xd8,0x56,0xe7,0xeb,0xb1,0x1b,0x87,0x59,0xe9,0xb1,0x3f,0x11,0xd7,0xc6,
    0x3e,0x37,0x09,0x9f,0xb2,0xc8,0x33,0x2f,0xc4,0x67,0x93,0x67,0x56,0x1c,0x97,0x11,
    0xe7,0x97,0x05,0x56,0x10,0xec,0x2c,0xf4,0xfc,0x5c,0xd5,0x2e,0x99,0x1b,0x18,0xea,
    0x0b,0xde,0x38,0x8c,0xd1,0x87,0x46,0xf4,0x77,0xdb,0x6a,0x5c,0x35,0xb8,0x34,0xe9,
    0x76,0x8b,0x30,0x92,0x39,0x6b,0xfa,0xba,0x6d,0xf5,0xae,0xac,0x68,0xde,0xef,0xda,
    0x60,0xe7,0xa1,0xc1,0x7a,0xdb,0x34,0xd8,0xf9,0xd8,0xe9,0xe8,0x6a,0x8d,0x86,0x7c,
    0xfc,0x6d,0xd1,0x95,0x81,0xbf,0x1d,0x73,0x0d,0xef,0x85,0xdd,0x5e,0xf8,0x6e,0x20,
    0xde,0xf8,0x6c,0xbd,0x02,0xf8,0xa3,0xb8,0x3e,0x0d,0xe3,0x9a,0xe6,0x33,0x5c,0x4b,
    0xc1,0xff,0x8c,0xbc,0x9a,0x67,0x46,0x74,0x33,0x7d,0xef,0xc8,0xfa,0x66,0x17,0x82,
    0x15,0x90,0x5f,0x27,0xf4,0x58,0x7c,0x67,0x7c,0xf9,0xe2,0xef,0x2a,0xf9,0x74,0xab,
    0x99,0x5b,0xed,0xb7,0x67,0x4f,0xf4,0x9a,0xbf,0x0f,0xf5,0xc8,0x93,0xf9,0x03,0xd9,
    0xcb,0x1e,0x3f,0x94,0xf5,0xdc,0x3f,0x82,0xde,0x59,0x3d,0xee,0x61,0xae,0xaf,0x77,
    0x2f,0x7c,0x86,0x37,0x0f,0x2b,0x8f,0x97,0x7e,0xe8,0x5f,0x9a,0x68,0xb8,0x8f,0xcf,
    0xe3,0xc9,0xd9,0xec,0x09,0x60,0xbe,0x66,0x49,0x8a,0x3d,0x59,0x7a,0xfa,0x20,0x39,
    0x6a,0x0e,0xd3,0xe8,0x93,0xe7,0x50,0xc6,0x39,0x36,0xcd,0x8f,0x12,0x9b,0x90,0xf8,
    0x85,0x35,0x75,0xc8,0x88,0x9e,0xe5,0x73,0x5b,0xd9,0x93,0x2f,0xc4,0xab,0x2f,0x1d,
    0xe8,0xf1,0x9b,0x38,0x77,0xce,0xbf,0x03,0x3d,0xee,0xdf,0xc5,0x99,0x76,0xfb,0x60,
    0x4a,0x0f,0x4f,0x72,0x46,0x9d,0xff,0x4b,0xc9,0xcf,0xec,0x1f,0x62,0x6b,0x59,0x5f,
    0xd3,0x73,0x19,0xad,0xbe,0x27,0x2f,0x73,0xef,0x25,0xe2,0x5e,0x67,0xc6,0xeb,0x66,
    0x30,0xdf,0xb0,0xdf,0x02,0x92,0x49,0x6c,0x6b,0xce,0x7c,0xb6,0xd8,0x45,0x62,0x5b,
    0xbf,0xc6,0x89,0x6d,0xb9,0xaf,0x17,0xdb,0x9e,0x95,0x29,0xf6,0xd6,0x14,0x7b,0xbb,
    0xd8,0xb6,0x9f,0x4e,0x60,0x27,0x39,0x5f,0x1d,0x38,0x43,0x23,0x03,0x6a,0xe7,0xe7,
    0x46,0xb0,0x0e,0xb2,0x17,0x66,0x71,0x56,0x6f,0xc2,0xdf,0x3f,0x64,0x60,0x7b,0xfb,
    0x16,0xf6,0x7f,0x27,0xf8,0x2c,0xe6,0x56,0xf0,0x15,0x21,0xc6,0xec,0xdb,0x98,0x67,
    0x78,0x9f,0x50,0x81,0x36,0x60,0x1e,0xdf,0x85,0x1a,0x98,0xaf,0x08,0xdb,0xf8,0xbb,
    0x71,0x3f,0x16,0x72,0x66,0x92,0xf4,0xb2,0x07,0xf8,0xee,0x10,0x53,0x3f,0xce,0xab,
    0x1a,0xb3,0x73,0xf3,0x6b,0xe0,0x48,0xa2,0xfb,0x8f,0x10,0xdf,0x8b,0xfb,0x34,0x49,
    0xdd,0x7b,0xc3,0x6d,0x75,0xe8,0x4b,0xad,0x7b,0xc2,0x6d,0x7d,0xef,0x07,0xbe,0x04,
    0xbb,0x3f,0x98,0xcf,0x19,0x20,0x73,0x4c,0xef,0x00,0x62,0x7e,0x0f,0xdc,0xbe,0x46,
    0x52,0xf4,0xdf,0x8e,0xfe,0x81,0xa2,0xff,0x0e,0x70,0xd7,0x3f,0x08,0xcc,0xf5,0x0f,
    0x11,0xfd,0x83,0xe2,0xfb,0x3d,0x8a,0x31,0xe3,0x1e,0x2c,0x5a,0xee,0x44,0xcb,0x50,
    0xd1,0x7f,0x17,0xb8,0xeb,0x1f,0x06,0xe6,0x73,0x86,0xcb,0x1c,0xd3,0x3f,0x9c,0x18,
    0xd3,0xef,0x6b,0x0c,0x11,0xfd,0x23,0xd1,0x3f,0x42,0xf4,0x8f,0x02,0x77,0xfd,0x77,
    0x83,0xb9,0xfe,0x62,0xd1,0x6f,0xbe,0xd1,0x61,0x14,0xc3,0x3d,0x5a,0xfa,0x3e,0x06,
    0x2d,0xb6,0xef,0xcc,0x1e,0x0b,0x36,0x46,0xee,0x1f,0xdf,0x13,0x63,0xd1,0xe8,0x3c,
    0xc5,0xf0,0xd8,0x9d,0x74,0x3f,0xf7,0x91,0xef,0xc9,0x07,0xd0,0x5c,0x22,0x6b,0x4d,
    0x04,0x77,0x7b,0x12,0x6b,0x2f,0x63,0x8f,0x96,0x12,0x33,0x09,0x1e,0xbb,0xb3,0xa6,
    0xc0,0x33,0x59,0xea,0x3b,0x15,0x7c,0x62,0xd0,0x6c,0x77,0xe8,0x43,0xac,0x5f,0xca,
    0xfd,0x32,0x15,0xcd,0xe3,0xf0,0x79,0x1d,0x1f,0x86,0x6b,0x9a,0xd4,0x71,0x3a,0xb8,
    0xd7,0xf1,0x11,0x30,0xaf,0xe3,0x4c,0xa9,0xa3,0xf9,0x66,0x84,0xb1,0x80,0xfc,0x67,
    0x48,0x4f,0x67,0x71,0x47,0x94,0x89,0xce,0xd9,0xe0,0x49,0xde,0x01,0x73,0x88,0x19,
    0x19,0x6e,0x3d,0xbb,0x5f,0x1f,0x03,0x9b,0x23,0x67,0x3c,0x3d,0xee,0x63,0x56,0xec,
    0x9f,0x0b,0x87,0x8f,0x55,0x61,0x2d,0xc3,0xe7,0x31,0x77,0xae,0x70,0x3f,0x5e,0xc3,
    0x5d,0x3b,0xb6,0xe7,0x83,0xcd,0xe3,0xde,0xcb,0xe4,0xae,0x4f,0x48,0x6d,0xe6,0xd3,
    0xcf,0x99,0xe4,0xb3,0x40,0x6a,0xf5,0x04,0xb5,0x5a,0x28,0xb5,0x7a,0x12,0xdc,0x6b,
    0xf5,0x14,0x98,0xd7,0x6a,0xb1,0xd4,0xca,0x7c,0x8b,0xc2,0x58,0x0c,0xf7,0x22,0xa9,
    0xd5,0x92,0xab,0xd4,0x6a,0x29,0xf8,0x1e,0xb8,0x97,0x81,0x95,0xa0,0xd1,0x79,0xec,
    0xf9,0x4b,0xe8,0xbb,0xc5,0x2c,0x47,0xc3,0x02,0xe2,0x17,0xa1,0x63,0xa5,0xe8,0x58,
    0x1e,0xdf,0x81,0x51,0x8c,0xd9,0xfc,0x15,0xa2,0x63,0xd5,0x55,0x74,0x3c,0x0d,0xee,
    0x75,0x5d,0x9d,0xd2,0xb3,0x35,0x60,0xab,0xff,0xa5,0x67,0xe5,0x70,0xf8,0x58,0x43,
    0xcf,0xd6,0x32,0xb7,0x5c,0xb8,0x9f,0x49,0xe9,0xd9,0x3a,0xb0,0xb5,0xff,0xd1,0xb3,
    0x75,0xd4,0xc3,0xf3,0x59,0x99,0xd2,0xc3,0x99,0xc2,0xff,0x1c,0xfc,0xb3,0x79,0xc7,
    0x3c,0x0f,0x66,0x5c,0xeb,0xb1,0xfd,0xfd,0xf3,0x22,0xef,0xb4,0x51,0xa1,0xb6,0x66,
    0x6f,0xe0,0x7d,0xae,0xa3,0x3c,0x28,0x32,0xdf,0x46,0xe2,0x37,0x08,0xd7,0x46,0xd9,
    0x3b,0x2f,0xb1,0x77,0x36,0xc9,0xde,0x79,0x19,0xdc,0xf7,0xce,0x2b,0x60,0xbe,0x77,
    0x2a,0xa4,0x67,0xe6,0xdb,0x1c,0x46,0x05,0x39,0x6d,0x86,0xdb,0xde,0x97,0xaf,0xa2,
    0xd3,0xdf,0x17,0x56,0x9f,0xd7,0xc0,0x4d,0x4b,0x25,0x76,0x8f,0x10,0x6f,0xbe,0xd7,
    0xf9,0x3d,0x50,0x29,0x1c,0x5b,0x84,0xc3,0xe6,0x6c,0x21,0xce,0xfd,0x6f,0xe0,0x1f,
    0x2a,0x6b,0xbc,0x09,0x6e,0xf1,0x5b,0xb1,0x7d,0x8d,0xb7,0x58,0x63,0xab,0x70,0x6c,
    0x13,0x0e,0x9b,0xb3,0x8d,0x38,0xf7,0xbf,0x8d,0x7f,0x87,0xac,0xf1,0x0e,0xb8,0xc5,
    0x6f,0xc7,0xf6,0x35,0xde,0x65,0x8d,0xed,0xc2,0xb1,0x53,0x38,0x6c,0xce,0x4e,0xe2,
    0x6c,0x3f,0x78,0xed,0x2a,0xa4,0x2f,0xbb,0xe9,0xcb,0x2e,0xe9,0xcb,0x7b,0xe0,0xde,
    0x97,0x3d,0x60,0xde,0x97,0xbd,0xd2,0x17,0xf3,0x55,0x85,0x71,0x00,0xee,0x2a,0xd9,
    0x3f,0xfb,0xd0,0xe2,0xdf,0x5f,0xf6,0x83,0xed,0x93,0xef,0x5c,0x1e,0xfb,0x7e,0x4d,
    0x6c,0xed,0xd8,0xfe,0x00,0x6c,0xbf,0xec,0xfb,0x74,0xd9,0xf7,0xeb,0x89,0xb1,0xbc,
    0xf6,0xb2,0xf6,0x01,0xc9,0xeb,0x43,0xf2,0x3a,0x28,0x79,0x7d,0x04,0xee,0x79,0x1d,
    0x02,0xf3,0xbc,0x8e,0x48,0x5e,0xe6,0x3b,0x1c,0xc6,0x71,0xb8,0x0f,0x4b,0x8d,0x3f,
    0x46,0x6b,0x99,0xf4,0xe9,0x28,0xb8,0xc7,0x1c,0x4b,0xd9,0x4f,0xc7,0x88,0x31,0xbd,
    0x47,0xe0,0x3c,0x2e,0xef,0xb4,0x4f,0xd0,0x7b,0x52,0xee,0x9d,0x4f,0xc1,0x6d,0xfe,
    0x09,0x6c,0xf7,0x7d,0xc6,0xf7,0xc5,0xd3,0x61,0xbe,0xd9,0x9f,0x83,0x4d,0x96,0xfc,
    0xbe,0x00,0x2f,0x21,0xbf,0xd3,0x92,0x9f,0xf9,0x4e,0xc5,0xf3,0xab,0xb5,0x9c,0x12,
    0xed,0x67,0x52,0xf6,0xe9,0x19,0xbe,0x67,0x9b,0x76,0x8f,0x3f,0x2d,0x5a,0xbe,0x4a,
    0xd1,0xf2,0x35,0x58,0x57,0xd1,0xf2,0x0d,0xb8,0x6b,0x39,0x27,0x5a,0xcc,0x77,0x36,
    0x8c,0x73,0x70,0x9f,0x15,0x2d,0xe7,0x53,0xf6,0xf3,0x79,0xd1,0xe2,0xf1,0xe7,0x44,
    0xcb,0xb7,0x29,0x5a,0xbe,0x03,0xdb,0x25,0x5a,0xbe,0x07,0x77,0x2d,0x17,0x45,0x8b,
    0xf9,0x2e,0x84,0x71,0x11,0xee,0x0b,0xa2,0xe5,0x92,0xf4,0xdd,0xb4,0x5c,0xe2,0xf7,
    0x86,0x69,0xf1,0xf8,0x8b,0x29,0x3d,0x3e,0x92,0xb2,0x47,0xf7,0xca,0x9e,0xff,0x11,
    0x3e,0xe3,0xba,0x82,0xfd,0x67,0x78,0x7b,0x74,0x0f,0xa3,0x2b,0x67,0x3c,0x07,0x6d,
    0xf6,0x9b,0xa8,0x5b,0x88,0xcb,0xe6,0xf7,0x90,0x71,0xd5,0x91,0xfd,0x57,0x17,0xfc,
    0x28,0x39,0x36,0x00,0xab,0x47,0x8e,0x8d,0x24,0xc7,0x06,0xfc,0x9f,0xa6,0x09,0x3c,
    0x0d,0x85,0xe7,0x1a,0x78,0xca,0x59,0x3f,0x17,0xcc,0xfe,0xb7,0xf0,0x57,0x88,0xcd,
    0x65,0x4e,0x13,0x99,0xd3,0x94,0x39,0xcb,0x99,0xd3,0x1c,0xac,0x99,0xf0,0x5c,0x07,
    0xde,0x22,0xd6,0x95,0x1d,0x63,0xad,0x78,0x57,0xb6,0xc0,0xdf,0x92,0x35,0x5a,0xb1,
    0x86,0x69,0xfe,0x9b,0x7a,0xfc,0x03,0xf9,0x64,0xf9,0xd8,0x08,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
