// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x58,0x69,0x6c,0x55,0x55,
    0x10,0xbe,0xe7,0x3c,0x68,0x81,0x16,0x97,0xa8,0xb8,0x21,0xa2,0x54,0x0d,0x62,0x4a,
    0x59,0x0b,0x29,0x14,0x2a,0x20,0x0a,0xb5,0x14,0x08,0x05,0x15,0x68,0x51,0x50,0x96,
    0x50,0x50,0x96,0xa8,0x61,0x2b,0x34,0x98,0x36,0x80,0x04,0x54,0xc0,0xc4,0x04,0x13,
    0x35,0x46,0x0d,0x61,0x29,0x65,0x51,0x20,0xf1,0x87,0x1a,0x96,0xdf,0x1a,0x13,0x35,
    0x46,0x82,0x91,0x40,0x24,0x1a,0x01,0x21,0x8a,0xf3,0xdd,0xf9,0x86,0x0e,0xd7,0xbe,
    0xe4,0xe4,0xdc,0xf3,0xcd,0x37,0x73,0x66,0xe6,0xcc,0x9c,0x77,0xdf,0xcb,0xc5,0x5e,
    0xf9,0x49,0x12,0x92,0x2e,0x49,0xa7,0xe4,0x68,0x4c,0xd2,0xcf,0xad,0x49,0x14,0x24,
    0x49,0x0a,0x92,0xbc,0x74,0x1e,0x5b,0x39,0xb9,0xb2,0x78,0xc9,0xd2,0xd9,0xc5,0x03,
    0x07,0x95,0x40,0x7e,0x53,0x92,0x4b,0x79,0x90,0xdd,0x2c,0x7a,0x1d,0x64,0xc6,0x58,
    0x38,0x6b,0x5e,0x3d,0xf0,0xa1,0x32,0x6a,0x44,0xb8,0x4e,0xc6,0x2d,0xc2,0x85,0x2c,
    0x1f,0x76,0xe4,0xa9,0xaf,0xcc,0x79,0x09,0xf0,0x24,0x79,0x32,0xe9,0x98,0x94,0xe8,
    0x96,0x49,0x2f,0xce,0x86,0x05,0x62,0x9e,0x17,0x89,0xf5,0x74,0x58,0x8e,0x58,0x09,
    0xed,0xf7,0xa7,0xfd,0x92,0xa0,0x9c,0x01,0x19,0xfb,0x63,0x45,0x63,0x00,0x6d,0x81,
    0x3f,0x48,0xe6,0x07,0xaf,0xcb,0x74,0xfd,0x80,0xe3,0x0e,0x4d,0xe3,0x55,0x19,0x9e,
    0x7b,0x38,0xee,0xe2,0x8c,0xee,0x62,0xea,0x9a,0xed,0x7d,0x99,0x58,0x5b,0xda,0x89,
    0xb5,0xa5,0x9d,0x58,0x5b,0xda,0x89,0xb5,0xa5,0x9d,0x58,0xf7,0x5b,0xac,0x1d,0x94,
    0xd3,0xda,0x4e,0xac,0xad,0xce,0x9f,0x83,0x19,0x7f,0x0f,0xd2,0xdf,0xc0,0x3d,0x1e,
    0x0f,0xff,0xf7,0x0f,0x98,0xf9,0xd7,0xc9,0x61,0xe6,0x5f,0x21,0xf7,0x31,0x0c,0x76,
    0x71,0xf6,0x05,0x69,0x6d,0xe8,0x1a,0x75,0x60,0x79,0xbb,0x4d,0x58,0x31,0xdd,0x37,
    0x97,0xc6,0x83,0xe7,0x3b,0x84,0x93,0xc7,0x58,0xf1,0xb9,0x53,0xd6,0xf9,0x8c,0x0d,
    0xf2,0x6e,0xc2,0xec,0x4a,0x39,0x64,0xdd,0x64,0xee,0xca,0x9a,0xeb,0x43,0xdd,0x22,
    0xea,0xda,0xba,0x37,0xe5,0xe0,0xf7,0xa1,0x2d,0xcf,0x2f,0x66,0xbe,0xbb,0xb3,0x26,
    0xfb,0x10,0xeb,0x21,0xd2,0x12,0xae,0xbb,0x71,0xee,0xeb,0xf4,0xfa,0xd1,0x8f,0xee,
    0xac,0xb5,0x12,0x62,0x3d,0x58,0x57,0xfd,0x53,0x79,0x87,0x64,0x20,0x7d,0x07,0x56,
    0xc6,0xf5,0x20,0x17,0xef,0x60,0xda,0x09,0xb4,0x8d,0x75,0x29,0x63,0x80,0xfe,0x10,
    0xca,0xf2,0xa8,0x3f,0x84,0x7d,0xe5,0xf9,0x65,0xac,0x09,0xf0,0xcb,0x69,0x1b,0xfe,
    0xde,0x2e,0x4f,0x63,0x9c,0xcf,0x55,0x4e,0x0f,0xeb,0x9a,0xeb,0x5c,0x5d,0xbf,0xc0,
    0xb3,0xb5,0xf5,0x5c,0x19,0xd7,0x64,0xdc,0x9d,0x74,0x4e,0xea,0x99,0x6b,0x96,0xc6,
    0xff,0x66,0xec,0xbd,0x88,0xcf,0xf5,0xf4,0x15,0xeb,0xc5,0xee,0x2c,0x97,0xc8,0x3c,
    0x98,0x7b,0x62,0xbd,0x9c,0xeb,0x9c,0x8b,0xa5,0x21,0xe3,0xd3,0x66,0x19,0xb5,0x5c,
    0x63,0xff,0xb7,0x68,0xef,0x31,0xa9,0x0c,0x9c,0xcb,0xdb,0xc4,0xfc,0x30,0xee,0x4e,
    0x19,0xa7,0x4e,0x9e,0x2c,0x37,0xee,0xfb,0x19,0xde,0x4e,0xb7,0xef,0x07,0x8c,0x05,
    0x71,0x7c,0x78,0xbd,0xde,0xda,0xfc,0xd8,0x2b,0x63,0x24,0xcf,0x7b,0x1f,0xf3,0xbb,
    0x97,0x75,0xd2,0x92,0xa9,0x93,0x7d,0xe4,0xa1,0x2f,0x5b,0x5c,0x5d,0xa0,0x07,0xf7,
    0x73,0x8f,0x03,0xdc,0xa3,0x95,0xb9,0xc2,0xfa,0xa0,0x8b,0x1d,0xfe,0xe7,0xa7,0xc9,
    0x5d,0x33,0xc2,0xfc,0xef,0x14,0x6e,0xf4,0x1f,0x72,0xd8,0x2a,0x64,0xcf,0xe5,0xa5,
    0xfb,0x68,0x5f,0x5a,0xdf,0xe4,0x71,0xbf,0x51,0x82,0x75,0x96,0x67,0xc8,0xca,0xb8,
    0x1e,0x4d,0x0c,0xf2,0x31,0x7c,0x36,0xfe,0x14,0xf6,0x7b,0x37,0xfa,0x87,0x75,0x0d,
    0x31,0x9c,0xdd,0xd4,0xa0,0xf5,0x10,0xd3,0xb3,0xe8,0x98,0xee,0xb7,0x38,0x68,0xff,
    0x15,0x91,0xf3,0xb2,0xac,0xc7,0x90,0x03,0x9b,0x6b,0x83,0x9e,0xb5,0xd9,0x5c,0xcb,
    0xef,0x86,0x9c,0x3b,0xcf,0xc6,0xa0,0x71,0x59,0x7c,0x18,0x83,0xc5,0x7e,0x64,0xdf,
    0x26,0xac,0x97,0xcb,0x82,0x74,0x94,0xf9,0x92,0xac,0xb6,0xb0,0x08,0xaf,0xca,0x33,
    0xf6,0xde,0x1a,0x54,0x8e,0xb9,0x42,0x58,0x88,0xed,0x09,0xc6,0x8b,0x73,0x1e,0xce,
    0x33,0x1d,0x4b,0xfc,0x53,0x70,0x70,0xa7,0x05,0xc5,0x8a,0x68,0x77,0x3c,0xed,0x5e,
    0x11,0x3e,0x64,0xe3,0x64,0x4c,0xa0,0x6d,0xcc,0x66,0xa7,0x3a,0x68,0x4f,0x56,0x48,
    0x0c,0xe8,0xbf,0x89,0x41,0xcf,0xb2,0x94,0xb2,0x52,0xee,0x89,0xda,0x98,0x14,0x54,
    0xfe,0xb7,0xd8,0x18,0x4f,0x5b,0xe3,0x9c,0xad,0xca,0x8c,0xad,0xa7,0x83,0xde,0x17,
    0xa5,0x94,0x79,0x5b,0x55,0x41,0xe5,0xde,0x16,0xe6,0xbf,0x44,0x17,0xf2,0xd6,0xa8,
    0xfb,0xc1,0xd7,0x2a,0xfa,0x3f,0x9c,0xf7,0xe6,0x34,0x9e,0xe7,0x04,0xe1,0xe2,0x2c,
    0x9f,0x09,0x8a,0x4d,0x0b,0x6d,0x7d,0x5d,0x28,0x1e,0x41,0xf6,0x2c,0xcf,0x1d,0x77,
    0x03,0x78,0x0b,0x79,0x2f,0x3f,0x47,0x99,0xe5,0x78,0x3a,0x73,0xdc,0xe0,0x72,0x3c,
    0x83,0xb8,0xe5,0x78,0x66,0x50,0xcc,0x72,0x5c,0xe7,0x72,0x0c,0x59,0xad,0x8c,0x3a,
    0xc6,0x52,0x9b,0xda,0xce,0x4b,0x6d,0xcf,0xa2,0xed,0x52,0xd6,0x97,0xd9,0x7f,0x9e,
    0xb2,0xb5,0x62,0x3f,0xbd,0xc3,0x82,0x62,0xb8,0xeb,0x26,0x12,0x9b,0x13,0xd4,0x57,
    0x7c,0x8c,0xf7,0x62,0x50,0x2e,0x64,0x93,0x04,0x41,0x3c,0xef,0x45,0xc5,0x8d,0x8b,
    0xdc,0x00,0x9f,0x17,0x54,0x86,0x61,0xf7,0x1d,0x72,0x6e,0x7e,0xd6,0x31,0xe7,0xe0,
    0x1e,0x88,0xaa,0x8f,0x73,0x98,0xc7,0x78,0xcc,0xce,0xc2,0xa0,0x67,0xd2,0x1a,0xdb,
    0x72,0xbc,0x96,0xbd,0x53,0x1f,0x54,0x17,0x9c,0xdd,0x82,0xa1,0x77,0x5e,0x09,0x8a,
    0xa3,0xaf,0xde,0x45,0x8f,0x0a,0x6f,0x09,0xf1,0x8f,0xb9,0x5e,0x1a,0x14,0x43,0x2e,
    0x97,0xbb,0x5c,0x02,0x5f,0x26,0x63,0x39,0x7d,0x5c,0xe6,0xfc,0x78,0xcd,0xf9,0x11,
    0xd9,0x4f,0xe6,0xc7,0x8a,0xa0,0x72,0xf8,0xb1,0x8b,0x7e,0xac,0xa4,0x1f,0x2b,0x9c,
    0x1f,0xab,0x88,0x23,0x0f,0xb6,0xc7,0x72,0xe6,0x01,0xf2,0xd5,0xf4,0x0b,0xb9,0x59,
    0x45,0x5f,0xe0,0x63,0x83,0xf3,0x11,0x9c,0x35,0xa8,0x17,0xea,0xe3,0xb9,0x5c,0x38,
    0xb8,0x13,0x1a,0x69,0x7b,0x0b,0x65,0x0d,0xd4,0x6f,0xce,0xf4,0x64,0x93,0x8c,0x4d,
    0xe4,0x6c,0x22,0x67,0x51,0xbc,0xf1,0x3e,0xb8,0x2b,0xaa,0x1c,0xb3,0xd5,0xcd,0xdd,
    0xf1,0xc6,0x3e,0xbb,0x27,0xb6,0xf5,0x2c,0x64,0xbe,0xcf,0xee,0x8d,0x2a,0xb7,0x7a,
    0xba,0x2f,0x6a,0x3e,0xf0,0xf9,0x84,0x75,0xdd,0x23,0x2a,0x8e,0xfd,0xec,0x6c,0xee,
    0x8f,0x8a,0xc3,0xa7,0xa2,0xd8,0xe6,0x37,0xf0,0x9e,0xe0,0xd2,0xaf,0x9e,0xce,0xf6,
    0x83,0xb4,0x1d,0x9c,0xed,0x5e,0x51,0xf1,0x22,0xd6,0x9d,0xe9,0x61,0xb6,0x7c,0x3f,
    0xc4,0xbd,0x10,0x63,0x2f,0xda,0x37,0x3f,0x1e,0x8e,0x2a,0x87,0x1f,0xfd,0x9c,0x1f,
    0xc0,0x1f,0x91,0xd1,0x8f,0xf6,0xf0,0xbc,0x86,0x7e,0x3c,0xca,0x78,0x7c,0x1f,0x3d,
    0x16,0x35,0x17,0xd1,0x61,0xc5,0xc4,0x7c,0x6f,0xf5,0x8d,0xca,0x85,0xcc,0x62,0x28,
    0x89,0x6a,0x13,0x32,0xc4,0x60,0x7b,0xf6,0x73,0x31,0xf4,0xa7,0x9f,0x88,0xab,0x84,
    0xbe,0x59,0x0c,0x03,0xa2,0xca,0x11,0x43,0xb9,0x8b,0x01,0xf8,0x40,0x19,0xe5,0xb4,
    0x37,0xd0,0xe5,0x72,0xb0,0xcb,0xa5,0xc5,0x55,0x1a,0x15,0xf7,0x71,0x0d,0x65,0x0c,
    0x39,0x87,0x95,0x11,0x0b,0x2e,0xae,0x61,0x51,0xb9,0x65,0x2e,0xae,0xe1,0x51,0x6d,
    0x0e,0x63,0x5c,0xe6,0x47,0xb9,0x8b,0x6b,0x04,0x7d,0x47,0xac,0xc3,0xe9,0x2f,0xe2,
    0xa8,0x70,0x71,0x80,0x33,0x52,0x46,0x05,0xf5,0x47,0xd2,0xde,0x22,0xae,0x81,0x57,
    0xc8,0x0d,0x8c,0xef,0xfa,0x51,0x99,0x5a,0x6d,0xc8,0xdc,0x89,0xa3,0xa3,0x72,0xb0,
    0xc7,0x8e,0x4c,0x2f,0xbc,0x4a,0x7b,0x98,0xd7,0x33,0xae,0xd7,0x79,0xd6,0xa3,0x1d,
    0xb6,0x32,0x2a,0xde,0x3b,0xd1,0x7d,0xd1,0x23,0xab,0x32,0xfb,0x96,0x91,0x67,0x7d,
    0xb2,0x3a,0x2a,0xa7,0x89,0x36,0x1a,0x9c,0x0d,0xcb,0xd7,0xba,0xa8,0xb8,0xdd,0xff,
    0xdb,0x5d,0x0e,0x20,0x6b,0x94,0xf1,0x06,0x7d,0x7c,0xc3,0xe5,0xb9,0x89,0x7a,0x55,
    0xd4,0xdb,0xe6,0xf4,0x20,0x6b,0x96,0xb1,0x91,0x7a,0x1b,0x9d,0xde,0x9b,0xd4,0xab,
    0xa1,0xde,0x3b,0x4e,0x0f,0xb2,0xcd,0x32,0xb6,0x52,0x6f,0xab,0xab,0x9d,0xb7,0xa3,
    0xc6,0x93,0x63,0xcf,0xed,0x20,0x67,0xb3,0xe3,0x6c,0x21,0x27,0x66,0x38,0xd8,0xe3,
    0x9a,0x54,0x0e,0x9e,0x9b,0x1d,0x7f,0x03,0xf9,0x21,0xc3,0xdf,0xe6,0xf8,0x8d,0x8e,
    0xbf,0x9e,0xfc,0x24,0xc3,0xdf,0xee,0xf8,0x3b,0xd2,0x3a,0x2b,0x48,0xf9,0x07,0xa3,
    0xfa,0x8d,0x38,0xb6,0x30,0xb6,0x0d,0xcc,0xcd,0x7a,0xe6,0xd6,0x6c,0x3f,0xd5,0x4e,
    0xcd,0x8f,0x6f,0xa7,0xe6,0x2b,0xa3,0x72,0x21,0xfb,0x8c,0x39,0x9d,0x10,0x75,0xaf,
    0x4a,0xd6,0x58,0x8d,0xcb,0x29,0x64,0xd5,0xc8,0x37,0x7d,0xad,0x76,0x7b,0x4e,0x6a,
    0xa7,0x1f,0x27,0x47,0xc5,0x51,0x23,0xbb,0x68,0x7f,0x4a,0x54,0xbc,0x92,0x3d,0x60,
    0xb6,0x6a,0x5c,0x4f,0x4d,0x8d,0xea,0x07,0xe2,0x9f,0xc2,0x3d,0xd3,0xf7,0x09,0xe7,
    0x0b,0x38,0xd3,0x64,0xd4,0x51,0x7f,0x9a,0xf3,0x65,0xba,0xf3,0xe5,0x2b,0x62,0x33,
    0xd8,0x07,0x90,0x7d,0x4d,0x6c,0x66,0x54,0xbc,0xca,0xd5,0x70,0x6d,0x54,0xdc,0xee,
    0x63,0xb3,0x5f,0xe7,0xfc,0x9b,0x15,0xd5,0x47,0xf8,0x5c,0x4b,0x3f,0x6c,0xef,0xd9,
    0x6e,0x6f,0xcb,0xf3,0x1c,0xc6,0x0b,0x99,0xe5,0xe1,0xa5,0xa8,0x38,0x72,0xfd,0x11,
    0xb1,0x79,0x51,0xf1,0x59,0x8c,0x77,0x81,0x8b,0x17,0xb2,0xf9,0x32,0x16,0xd0,0x9f,
    0xf9,0x99,0x3b,0x64,0x41,0xd4,0xef,0x3b,0xfc,0xbe,0x59,0x98,0xe9,0x65,0x7b,0x2f,
    0xc6,0xbb,0x61,0x7d,0x54,0xb9,0xd7,0x5d,0x94,0xc6,0xd6,0x39,0x95,0x1f,0x8a,0xfa,
    0x5b,0x04,0x77,0x14,0x7e,0x7f,0x61,0x9f,0x7a,0xee,0x6b,0xdf,0xdf,0x87,0xa8,0xdf,
    0xcc,0xef,0xe6,0x26,0x7e,0x37,0x9f,0xca,0xbc,0xab,0xef,0xa6,0x7c,0xb7,0x7b,0x07,
    0xde,0x93,0x79,0x07,0xde,0xeb,0xde,0x81,0xf7,0xb8,0xf7,0xcb,0xf4,0xb7,0x56,0x50,
    0xb9,0xbd,0xdb,0xec,0x0f,0x8a,0xed,0x73,0xef,0xb1,0x96,0xf7,0x03,0xc4,0xfd,0xf7,
    0xd7,0x61,0xc7,0x35,0xec,0xdb,0xd0,0xf6,0xfd,0x6e,0xf7,0xe1,0x77,0x41,0x71,0xf0,
    0x0d,0xfb,0x3e,0x28,0xde,0xdb,0xf1,0x7e,0x08,0x8a,0xfb,0x7b,0xf3,0xc7,0x8c,0xff,
    0x65,0xe4,0x59,0x0c,0x3f,0x05,0xe5,0xd8,0xbd,0xf9,0xb3,0xb3,0x61,0x35,0xf7,0x4b,
    0x50,0xdc,0xee,0xcd,0xcb,0xee,0x3d,0x08,0xb2,0xd3,0x32,0x7e,0x65,0x2e,0x31,0x9b,
    0xde,0x6f,0xd4,0xb3,0x7b,0xf3,0x92,0xd3,0x83,0xec,0xac,0x8c,0xf3,0xd4,0x3b,0xef,
    0xf4,0x7e,0xa7,0x9e,0xdd,0x9b,0x17,0x9d,0x1e,0x64,0x17,0x64,0xfc,0x49,0x3d,0xcc,
    0x96,0xbb,0xbf,0x82,0xc6,0x63,0xf7,0xe6,0x45,0x72,0x2e,0x38,0xce,0x1f,0xe4,0xc4,
    0x0c,0xe7,0x22,0xdf,0x1f,0xc1,0xf9,0x22,0xaa,0x2d,0xd8,0xfe,0x83,0xfb,0x81,0x7b,
    0x89,0xdc,0xb3,0xce,0xde,0x39,0xda,0xb3,0x7b,0xd5,0x38,0x97,0x9c,0xbd,0xcf,0xa3,
    0xda,0xc4,0x1e,0xe7,0x18,0x37,0xb8,0x97,0xc9,0x3d,0xed,0xec,0x9d,0xa1,0x3d,0xbb,
    0x77,0x8d,0x73,0xd9,0xd9,0x3b,0x1c,0xd5,0x26,0xf6,0x38,0xc3,0xfc,0xdb,0xf9,0x5d,
    0x71,0x75,0xd1,0x48,0xec,0x6a,0x50,0x1c,0xff,0xb1,0x7c,0x49,0xec,0xdf,0xa0,0x76,
    0x20,0xb3,0xfb,0xe6,0x5a,0x50,0x7c,0xae,0xbb,0x0f,0x8f,0x04,0xc5,0x37,0xf3,0x2c,
    0x8e,0xb9,0xb3,0x80,0xec,0xa8,0x8c,0x63,0xf4,0xf1,0x28,0xe3,0x3a,0xc5,0xf5,0x31,
    0xfa,0x85,0xde,0xc8,0xf1,0xde,0xd9,0xcf,0xda,0xc3,0xff,0x34,0x1d,0xa2,0xfe,0x47,
    0xb3,0x82,0xff,0xcf,0xe4,0x45,0xe5,0xad,0xe0,0xff,0x22,0xf9,0x51,0xf7,0x46,0x6e,
    0xb0,0xee,0x14,0x95,0x63,0xfd,0x02,0xac,0x33,0x31,0xb8,0x55,0x2d,0x51,0xe0,0x7f,
    0x9d,0x2e,0x51,0xb9,0x90,0xe5,0x3b,0x7b,0x05,0x51,0xfb,0xb0,0x96,0xbf,0xf7,0x0b,
    0xa3,0xfa,0xd0,0x85,0xdf,0xa3,0x05,0xbc,0x27,0xf1,0xdf,0x42,0xd7,0xa8,0xf2,0x24,
    0x69,0xbb,0xb7,0xbe,0xce,0xf4,0x92,0xbf,0xb7,0xbe,0x09,0x2a,0xaf,0xa6,0xed,0xe3,
    0x41,0x6d,0xf8,0x51,0x28,0x3d,0x09,0xd9,0x09,0xd6,0x4b,0x31,0xff,0x17,0x82,0xee,
    0xf1,0x4c,0xee,0x4e,0xf1,0xbc,0xc1,0x3f,0xc2,0xbb,0x0e,0xf9,0x3d,0xc1,0x7c,0xdb,
    0x5d,0x77,0x24,0x73,0xd7,0x35,0x67,0x7e,0xbb,0x60,0xfe,0x47,0x76,0x1b,0x22,0xe3,
    0x3f,0xa6,0x25,0x61,0xe6,0x68,0x17,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #line 1 "shaders/src/OverlayDraw.inc"
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 1)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 viewportSize;
//
//     bool isText;
//
//     bool rotateXY;
// } params;
// #line 18 "shaders/src/OverlayDraw.frag"
//
// layout(location = 0)flat in uint widgetIndex;
// layout(location = 0)out vec4 color;
//
// uint getChar(const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[widgetIndex]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontMip)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     return texelFetch(font, ivec3(coordInGlyph, textChar), int(fontMip)). x;
// }
//
// vec4 renderText(uvec2 coordInWidget)
// {
//     const uvec4 fontSizePacked = textWidgetsData[widgetIndex]. fontSize;
//     const uvec2 fontGlyphSize = fontSizePacked . xy;
//     const uint fontMip = fontSizePacked . z;
//
//     const uint textChar = getChar(coordInWidget, fontGlyphSize . x);
//
//     if(textChar >= 95)
//     {
//         return vec4(0);
//     }
//
//     const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontMip);
//
//     vec4 result = vec4(0, 0, 0, 0.4);
//     result = mix(result, textWidgetsData[widgetIndex]. color, sampleValue);
//
//     return result;
// }
//
// uint getValue(const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[widgetIndex]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 renderGraph(uvec2 coordInWidget)
// {
//     const uvec4 widgetCoords = graphWidgetsData[widgetIndex]. coordinates;
//
//     if(coordInWidget . x == 0 || coordInWidget . y == 0 ||
//         coordInWidget . x + 1 ==(widgetCoords . z - widgetCoords . x)||
//         coordInWidget . y + 1 ==(widgetCoords . w - widgetCoords . y))
//     {
//         return vec4(0, 0, 0, 1);
//     }
//
//     const uint valueWidth = graphWidgetsData[widgetIndex]. valueWidth . x;
//
//     const uint value = getValue(coordInWidget, valueWidth);
//
//     vec4 color = vec4(0);
//     const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//     bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//             &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//     if((widgetHeight - coordInWidget . y)>= value || indicateOverflow)
//     {
//         return vec4(0);
//     }
//
//     return graphWidgetsData[widgetIndex]. color;
// }
//
// void main()
// {
//     const uvec4 widgetCoords = params . isText
//         ? textWidgetsData[widgetIndex]. coordinates
//         : graphWidgetsData[widgetIndex]. coordinates;
//     uvec2 fragCoords = uvec2(floor(gl_FragCoord . xy));
//
//     if(params . rotateXY)
//     {
//
//         fragCoords . x = params . viewportSize . x - 1 - fragCoords . x;
//         fragCoords = fragCoords . yx;
//     }
//
//     const uvec2 coordInWidget = fragCoords - widgetCoords . xy;
//
//     if(any(lessThan(coordInWidget, uvec2(0)))||
//         any(greaterThanEqual(coordInWidget, widgetCoords . zw - widgetCoords . xy)))
//     {
//         color = vec4(1, 0, 1, 1);
//         return;
//     }
//
//     if(params . isText)
//     {
//         color = renderText(coordInWidget);
//     }
//     else
//     {
//         color = renderGraph(coordInWidget);
//     }
// }
