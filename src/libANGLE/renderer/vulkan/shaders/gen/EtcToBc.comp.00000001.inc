// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x0b,0xd8,0x55,0x55,
    0xb5,0x3d,0xff,0x39,0x67,0xef,0xbd,0xf6,0x3e,0x7a,0xcd,0xb7,0x74,0xf3,0x6d,0xa9,
    0x04,0xf8,0x48,0xad,0xab,0x21,0xe0,0xb5,0x9b,0x16,0x05,0xa8,0x09,0x8a,0xc8,0x43,
    0x2c,0x44,0xf0,0x97,0x1e,0x5c,0xe3,0xaa,0xfd,0x28,0x7e,0x72,0x35,0x40,0x29,0x29,
    0x14,0xac,0xc0,0x34,0x14,0x5f,0x61,0x81,0x42,0x68,0x8a,0x45,0x19,0xf8,0x02,0x7c,
    0xe0,0x03,0x10,0x79,0xa3,0x88,0x20,0x2f,0x85,0xbb,0xc7,0x19,0x63,0xb2,0x27,0x47,
    0xef,0xff,0x7d,0xeb,0xfb,0xcf,0x1a,0x63,0xce,0xb9,0xe6,0x9a,0x6b,0xad,0xb9,0xd6,
    0x7e,0x55,0xca,0x47,0x27,0xa5,0x4a,0x53,0x29,0x2b,0x85,0xd2,0xce,0x5a,0xa9,0xfe,
    0xb7,0x6f,0xa9,0x5c,0x6a,0xd2,0xff,0x76,0xfa,0xdf,0x5e,0xff,0x3b,0xe9,0xff,0x7f,
    0xe6,0xff,0x6b,0xa5,0xb8,0x2e,0xf7,0xcd,0xce,0xe7,0x77,0x6e,0xf7,0xa3,0x1f,0xf7,
    0x6f,0x77,0xca,0xa9,0x27,0x42,0xff,0xdf,0x4a,0x95,0xba,0x1d,0x70,0xfb,0xe4,0x76,
    0xa3,0xfc,0x7f,0x35,0x2f,0x83,0xfb,0x5e,0x71,0x15,0xf0,0xee,0x79,0xe9,0x9d,0x97,
    0xa5,0xb9,0xc0,0xe7,0x72,0x1b,0xd5,0xba,0xcd,0x52,0xa9,0xa3,0x74,0xea,0x36,0x73,
    0xb4,0x7b,0xbd,0x8d,0x52,0xe9,0xf3,0xaa,0xf7,0x56,0xfd,0xdf,0xeb,0xf5,0x4a,0x5d,
    0xbf,0x24,0x0e,0xbf,0xc1,0x1d,0x9f,0x97,0x73,0xf2,0x16,0x07,0x94,0xc9,0x1d,0xcd,
    0x7f,0xbb,0xb1,0x26,0x61,0x55,0x87,0x95,0x85,0x05,0x87,0x55,0x84,0xed,0xe5,0xb0,
    0xaa,0xb0,0xcf,0x39,0x2c,0x12,0x76,0x80,0xc3,0x62,0x61,0x87,0xc8,0x4f,0x6b,0x03,
    0x7e,0x76,0xcb,0x15,0x8e,0x2a,0x15,0x7e,0xa3,0x7e,0xa4,0xab,0x2f,0x6e,0xe0,0x17,
    0x8b,0x6f,0x92,0x2d,0xd4,0x5b,0x89,0x5b,0x12,0xb1,0xcf,0xad,0xc4,0xed,0x95,0x51,
    0x6f,0xff,0xbc,0x35,0xb4,0x77,0x64,0x8e,0xa1,0x1f,0xf8,0x7d,0x60,0x2e,0x0f,0xbf,
    0x8e,0x90,0xad,0x83,0xf3,0x7a,0x52,0xa2,0xaf,0xc6,0xd7,0xc4,0x97,0xea,0xff,0xab,
    0xf5,0xbe,0x27,0x8a,0x39,0xe4,0xf7,0xd5,0xef,0xb2,0xf8,0xfd,0xc4,0xef,0xab,0xfa,
    0xc1,0xaa,0xc3,0xe6,0x41,0x79,0xcb,0x87,0xca,0x1e,0x74,0x0f,0xcb,0xff,0xa3,0x5e,
    0x51,0xfd,0x4b,0xb2,0x55,0x91,0x6e,0x07,0xe9,0x26,0xe2,0x3b,0x8a,0xaf,0xd6,0x63,
    0x5b,0x2e,0x9d,0x25,0xfc,0x6c,0xd9,0xaf,0x4a,0xef,0x42,0xf5,0x07,0xf6,0xce,0x50,
    0xbd,0xbb,0xb0,0x2f,0xab,0xcf,0x3d,0x35,0xb6,0xc6,0xf7,0x76,0x3c,0xda,0xe8,0xe3,
    0xfa,0xdc,0x57,0x5c,0xcd,0xf1,0xfd,0xd5,0x9e,0xd5,0x07,0xd6,0xe7,0x75,0x61,0x7f,
    0xb0,0xe3,0x51,0x6f,0x6e,0x68,0x7f,0xa8,0x62,0x66,0xfa,0xc3,0x1a,0xf8,0x16,0xc5,
    0xc1,0xf8,0x51,0xf2,0xd7,0xea,0xa3,0x35,0xe7,0xac,0x3e,0x46,0x73,0xab,0x4d,0x1e,
    0x2d,0xc4,0xe9,0x36,0xf5,0x61,0x94,0x64,0xc7,0x38,0xd9,0xb1,0x79,0xd9,0xe5,0xea,
    0x13,0x1b,0x7c,0x99,0xe4,0xda,0x86,0x2f,0x7f,0xca,0x4b,0x5b,0x57,0x9f,0xa5,0xb6,
    0xac,0xfe,0xb4,0xe6,0xba,0xd5,0xe7,0x3a,0xdf,0x50,0x9f,0x57,0xe2,0x9a,0xb0,0xfa,
    0x4b,0x79,0x39,0x3c,0x2f,0x5f,0xc8,0xeb,0xef,0xe4,0xff,0xcf,0x96,0x8f,0xc6,0x2f,
    0xaf,0xe7,0x0b,0xf6,0x05,0xdc,0xbb,0x8a,0xd7,0x3c,0x8d,0xdb,0x72,0x27,0xbb,0x42,
    0x63,0x6f,0xf5,0x95,0x79,0x49,0x5d,0x7d,0x95,0xd6,0xab,0xd9,0x5a,0x2d,0x5b,0x2b,
    0x24,0xbb,0xca,0xc9,0xae,0xd1,0x5c,0x33,0xd9,0xb5,0x1a,0xb7,0xc1,0xe2,0x56,0x39,
    0x6e,0x9d,0xb8,0x16,0xf9,0xe5,0xed,0xac,0xd7,0x5c,0x31,0xd9,0xf7,0x9c,0xff,0x6b,
    0xc4,0x9b,0xec,0xfb,0x79,0xc9,0x9c,0xec,0x06,0xe7,0x5f,0x4f,0xf1,0xc6,0x7d,0xa0,
    0xf6,0x56,0xc8,0x8e,0xe7,0x36,0x4a,0x6f,0xf0,0x67,0x70,0x1f,0xca,0x57,0x6b,0x7f,
    0xa5,0xe3,0x36,0x35,0xf4,0xd1,0x73,0x9b,0x5d,0x1f,0x1b,0xb9,0x8f,0x9c,0xde,0x8a,
    0x06,0x6e,0x8b,0x7c,0x69,0x71,0x9c,0xf5,0x77,0xab,0xd6,0x95,0xc9,0x6e,0x13,0xd6,
    0x2c,0x1d,0x6f,0x67,0xbb,0x8b,0xef,0x1a,0xc5,0xc3,0xb8,0x1d,0xae,0xbf,0x2b,0x76,
    0x73,0xfb,0xd7,0xe7,0xd3,0xc7,0x9a,0x33,0xab,0x35,0x86,0xeb,0x34,0x06,0x1b,0x14,
    0xc3,0x8d,0x8a,0xc9,0x26,0xf5,0xf1,0x23,0xf9,0xbc,0x4d,0x6d,0xee,0xd0,0xba,0xdf,
    0xa5,0xf9,0xf0,0x8e,0xf3,0x7f,0xef,0xa6,0x62,0xed,0x20,0x77,0xb5,0xae,0xef,0x37,
    0x1d,0x3b,0x5a,0xbd,0x0d,0xf7,0x9f,0x0e,0xc8,0x4b,0x1d,0x9a,0x38,0x37,0x2b,0x4e,
    0x7e,0x84,0xf6,0x27,0xab,0x3f,0x5c,0xaf,0xb7,0x74,0xb0,0xfa,0x8c,0x7a,0xfd,0x67,
    0x67,0x5b,0x7d,0x56,0x5e,0xbf,0xf9,0xa0,0xf1,0x67,0x5a,0xfd,0x2f,0x79,0x7d,0xd2,
    0x37,0x0e,0xda,0x2d,0x3f,0x3b,0xaf,0x2f,0xbc,0x66,0x75,0xfb,0x36,0x79,0x4b,0xc8,
    0xa7,0x4f,0x36,0x51,0x07,0x72,0xe0,0x4c,0x6e,0x5e,0xfe,0xbb,0x79,0xbf,0x4a,0x87,
    0x33,0x94,0xcf,0xb0,0x37,0x36,0x39,0x3f,0x76,0xd6,0xdb,0x5d,0xd2,0xd1,0x72,0x40,
    0xb5,0xcc,0xbe,0x5b,0xbd,0x6d,0xb9,0x58,0xc3,0xa8,0x77,0xd5,0x9e,0x76,0x58,0xbe,
    0xda,0x6c,0x7f,0xfb,0xff,0x0a,0x62,0x79,0x45,0x99,0xeb,0x12,0xb2,0x67,0xa8,0x3e,
    0x50,0x18,0xf8,0x2b,0xf5,0x1b,0xf2,0xad,0xf3,0x88,0x21,0xb7,0x8f,0x2d,0x63,0xef,
    0xe6,0xef,0x29,0xe5,0xa2,0xed,0x07,0xcb,0xc8,0x1d,0x45,0xfd,0xa1,0x72,0x91,0x7f,
    0x50,0x7f,0xb8,0x6c,0x6b,0x3e,0xae,0xef,0x01,0x8f,0x94,0xa9,0x03,0xb9,0x87,0xcb,
    0xc5,0x58,0x4e,0x2f,0xef,0x99,0xb3,0x67,0x96,0xb9,0x6f,0x59,0xfd,0x99,0x32,0xcf,
    0x15,0x56,0x9f,0x5f,0xc6,0x3e,0x5a,0xb4,0xf3,0x5e,0xb9,0xc8,0x63,0x47,0x54,0xe8,
    0xfb,0x28,0x27,0x7f,0x64,0xa5,0x54,0xdf,0xff,0xac,0x7e,0x54,0x85,0x7b,0x9f,0xd5,
    0x8f,0xae,0xf0,0x6c,0x62,0xf5,0x63,0x2a,0x3c,0xef,0xb4,0xc9,0xad,0xc3,0xde,0x17,
    0x2b,0xc5,0x1a,0x5a,0xaf,0xbc,0x0a,0x9b,0xb0,0x03,0xdd,0x63,0x2a,0x8c,0xdd,0xb1,
    0x15,0x8e,0x15,0x74,0xd0,0x67,0xcc,0xbb,0x3e,0x15,0xae,0x2b,0x2b,0x86,0xf7,0xad,
    0x70,0x0e,0x5b,0xb1,0xb6,0xef,0xad,0xf0,0x74,0x66,0xf5,0x29,0x15,0x6e,0x48,0x56,
    0xc7,0x66,0xd6,0xca,0xf9,0x9a,0xe5,0xf5,0xfd,0x5c,0xbd,0x5d,0x5e,0xdf,0x5b,0xb1,
    0x78,0xb3,0x4a,0x7f,0x46,0xd5,0xdb,0x8d,0xea,0xbf,0xdf,0xaa,0x72,0xbd,0xf6,0x74,
    0xd8,0xdb,0x55,0xae,0xed,0x99,0x6e,0x4c,0x96,0x54,0x79,0x26,0x30,0x99,0xa5,0x55,
    0xe6,0x04,0xe0,0x26,0xb3,0xac,0x8a,0x39,0x52,0xc8,0xbc,0x53,0x65,0xfb,0xcb,0x9c,
    0xcc,0xf2,0xfc,0xf7,0xd7,0x9d,0xcc,0xbb,0x55,0xfa,0xbc,0xdc,0xc9,0xac,0xc8,0x7f,
    0x77,0x75,0x32,0x2b,0xab,0xdc,0xdb,0x56,0x38,0x99,0x55,0x55,0x9e,0xb5,0xac,0xbe,
    0xba,0xca,0xbd,0xde,0x74,0xd6,0x54,0x29,0xb3,0xda,0xe9,0xac,0xcd,0x7f,0x9f,0xe0,
    0x74,0xd6,0xe5,0xf5,0xe9,0x4e,0x67,0x7d,0x95,0x32,0xc0,0x31,0xd6,0x88,0xd7,0x7b,
    0x55,0xc6,0x08,0x31,0x41,0x9f,0xd1,0x27,0xf8,0x0c,0x9f,0xd0,0x06,0x74,0x30,0xd6,
    0x1f,0x28,0xb6,0xd0,0x41,0x8e,0x69,0x9b,0x2f,0xca,0xb3,0xb4,0x7f,0xb7,0xca,0x57,
    0xd0,0x77,0x75,0xfe,0x8b,0x4a,0x7b,0xfe,0x29,0xed,0xe4,0xf3,0xb9,0x52,0xea,0x92,
    0x93,0x90,0x83,0xbd,0xae,0x12,0x04,0x76,0x86,0xea,0xdd,0x84,0xc1,0xde,0x6b,0xb2,
    0xd7,0xd4,0x60,0xaf,0x5c,0x5f,0xfb,0xb4,0xf1,0xba,0xe4,0x5f,0x93,0x0d,0xd4,0x17,
    0x47,0x45,0x9e,0x83,0xfe,0xdb,0x91,0xcd,0x6d,0xae,0x49,0x9c,0x53,0x81,0x0d,0xd3,
    0xd9,0xc7,0x62,0x73,0x71,0x8d,0x73,0xc4,0xcf,0x93,0x9e,0x35,0xce,0x9d,0xa1,0x0e,
    0xbb,0xa4,0xc6,0xb5,0xd1,0xe2,0xce,0x3c,0xbd,0x6a,0x3c,0xdb,0xf8,0x62,0xf3,0xfe,
    0x52,0x27,0xdf,0xe2,0xf0,0xde,0xce,0xf6,0x50,0x87,0xf7,0xa9,0x71,0x5e,0x5a,0xd9,
    0xbd,0x7e,0x6a,0xcc,0x1b,0x56,0xac,0x3f,0xfd,0x6a,0x9c,0xef,0xa3,0x76,0xcf,0x7b,
    0xca,0x5f,0x56,0xe3,0x1e,0x65,0xa5,0x29,0x8f,0x3f,0xf0,0xd1,0x35,0x8e,0xdf,0xd6,
    0x1a,0xc7,0xaf,0x22,0x0e,0xfd,0xf8,0x24,0xc7,0x4e,0xcb,0xfb,0x59,0xd6,0x19,0xb2,
    0x24,0x7e,0x6b,0x8e,0x44,0x3a,0xb3,0x62,0x0f,0x9a,0x1b,0x38,0x17,0xce,0xd0,0xb9,
    0x7b,0x9f,0xb8,0xa8,0x23,0x27,0x1c,0xdf,0x50,0x3f,0xdd,0xd5,0x31,0x8f,0xba,0xb9,
    0x3a,0xce,0xda,0xfd,0x22,0xd6,0xb7,0xe0,0x3a,0x4a,0xe3,0xb7,0x23,0xff,0x8d,0x73,
    0xe4,0xb2,0x88,0xed,0xe3,0x7f,0x7b,0x9d,0xd5,0x57,0x47,0x3c,0x57,0x77,0xc9,0xb5,
    0x90,0x37,0xd7,0x44,0xc4,0x56,0x47,0xc5,0x9c,0xbb,0x56,0xd7,0x14,0x6b,0x23,0xf2,
    0x23,0x6c,0x0d,0x44,0xc4,0x30,0xde,0x9d,0x72,0x0c,0x7b,0xd2,0x7b,0x11,0xcf,0xe1,
    0x68,0xaf,0xbd,0xe6,0xcd,0xfb,0x11,0xf1,0xa7,0x73,0x19,0xd4,0x37,0x44,0xc4,0xfa,
    0xcb,0x36,0xd6,0xd7,0x07,0x11,0xf1,0xbf,0x4b,0x66,0x93,0x64,0x06,0x3a,0x99,0xcd,
    0x11,0x71,0xc8,0xa0,0xbe,0x25,0xa2,0x1e,0xce,0x1d,0x23,0x84,0x6d,0x8d,0x38,0x46,
    0xe0,0xba,0x09,0xdb,0x1e,0xd1,0xd7,0xfa,0x2e,0x2d,0x6c,0x47,0x44,0x1c,0xf2,0xe7,
    0xe5,0x48,0x3d,0xbf,0x65,0xc4,0x4d,0xd6,0xda,0xd9,0xa9,0x76,0x86,0xba,0x76,0x76,
    0xa9,0xbe,0xd3,0xb5,0xd3,0x14,0x53,0xb7,0xc9,0xb5,0x53,0x8e,0x89,0xef,0x72,0xed,
    0x2c,0xcd,0x88,0xa3,0xbd,0x26,0xd7,0x4e,0x14,0xb3,0x8f,0x98,0xdb,0xcf,0x08,0x4b,
    0x84,0xa1,0xad,0xae,0x8a,0x7b,0x88,0x29,0x0b,0xae,0x45,0x58,0x16,0xd3,0x2e,0x38,
    0x8c,0x05,0xf6,0xe2,0xe3,0x22,0xee,0xcf,0x2d,0x1a,0x0b,0xd8,0x3b,0x3e,0x22,0x6e,
    0x32,0xad,0x25,0x33,0xd8,0xc9,0x7c,0x39,0x22,0x6e,0xed,0xb5,0x89,0xa8,0x07,0xfc,
    0xe1,0x1c,0x43,0xbe,0x6a,0x17,0xb1,0x4d,0x70,0x77,0xe6,0x7a,0x98,0xff,0x27,0x08,
    0xc7,0xdc,0x3b,0x49,0x31,0xdc,0x9e,0x73,0xc0,0x4f,0xcc,0xcb,0x49,0x9a,0x7f,0xf8,
    0xbd,0x2d,0xff,0xbf,0x54,0x75,0xe0,0xcf,0xa8,0xad,0xd3,0x64,0x17,0xf9,0xe2,0xef,
    0xc2,0x4e,0x17,0x86,0x7c,0x61,0xb1,0x6e,0x1f,0x11,0x2f,0xb9,0x31,0x39,0x53,0x63,
    0xdf,0xde,0x8d,0x49,0x47,0xc9,0xf9,0x31,0xe9,0x14,0x51,0xb6,0x63,0x54,0xe8,0x7e,
    0x43,0xba,0x1d,0xa3,0x42,0xee,0x9c,0x88,0x78,0xfb,0xa8,0x18,0x8f,0xce,0x8a,0xc5,
    0x50,0xc5,0x0b,0x39,0xf7,0x3c,0xe5,0x5b,0x6b,0xf3,0x82,0x88,0xfd,0x68,0x72,0xbe,
    0x5d,0x18,0x11,0xef,0xec,0xe4,0x7a,0x48,0xce,0xcf,0xcb,0x8b,0x22,0xca,0xf6,0x70,
    0x63,0x74,0xb1,0xc6,0x68,0xa8,0x1b,0xa3,0x9e,0x11,0x71,0xd3,0xbb,0x24,0xa2,0x6e,
    0xcf,0xfa,0xba,0xaa,0xd6,0xf7,0x86,0x5e,0xf2,0xad,0x77,0x2e,0x83,0x9c,0x74,0xa9,
    0x30,0xc8,0x9e,0x99,0x8f,0x51,0x3f,0xc5,0xc6,0xda,0xb9,0x20,0x66,0x3b,0xf3,0x5c,
    0x3b,0xdf,0x8b,0x89,0xdf,0x9f,0xcb,0x60,0x8c,0x2f,0x8c,0x89,0xf5,0x54,0x8e,0xb9,
    0x3c,0x2e,0xc6,0x19,0x5c,0xf7,0xbc,0xf4,0x8d,0x39,0xae,0xf8,0xdd,0x4d,0xeb,0xf9,
    0xd6,0xc0,0xf6,0x9b,0xea,0xf3,0x98,0xb9,0xfe,0x8e,0x40,0xdc,0x97,0xa7,0xe5,0xeb,
    0xb8,0x40,0xfe,0x36,0xad,0x0f,0x60,0xe3,0x03,0xf1,0x5e,0xb5,0xc2,0xee,0x5d,0x81,
    0x38,0xfe,0xe6,0x08,0x9b,0x10,0x88,0xe3,0x7a,0xd9,0xe4,0xee,0x96,0x5c,0x93,0x93,
    0xfb,0x4d,0x20,0x8e,0xeb,0xd6,0x67,0x85,0xfd,0x36,0x50,0x1f,0x9c,0xe9,0x4e,0x92,
    0x6e,0xd9,0xe9,0x4e,0x0e,0xc4,0x47,0x39,0xdd,0x7b,0x02,0xf5,0x27,0x3b,0xdd,0x7b,
    0xa5,0x5b,0x71,0xba,0xf7,0x05,0xe2,0x7d,0x9c,0xee,0x1f,0x02,0xf5,0xef,0x73,0xba,
    0xa3,0x15,0xb3,0x92,0x8b,0xd9,0x83,0x81,0xb8,0x2f,0x16,0xb3,0x87,0x02,0x79,0x1f,
    0xb3,0x47,0x03,0x71,0x1f,0xb3,0x69,0x81,0xb8,0x8f,0xd9,0x63,0x81,0xb8,0x8f,0xd9,
    0x9f,0x25,0xe7,0x63,0x36,0x3d,0x10,0xf7,0x31,0x9b,0x11,0xa8,0x3f,0xdd,0xf9,0xfe,
    0x84,0x74,0x7d,0xcc,0x66,0x06,0xe2,0x3e,0x66,0xb3,0x02,0xf5,0x67,0x3a,0xdd,0xd9,
    0xd2,0xf5,0x31,0x7b,0x32,0x10,0xf7,0x31,0x7b,0x2a,0x50,0x1f,0x1c,0x72,0x15,0xf6,
    0xaf,0xdb,0x02,0x63,0x09,0x0e,0x73,0x1c,0xfb,0x29,0x30,0x5b,0x87,0xf3,0x02,0xf3,
    0x21,0x72,0xc0,0x0d,0xc2,0xe6,0x07,0xde,0x1f,0x01,0x87,0xb5,0x80,0xeb,0x8e,0xe7,
    0x03,0xf7,0xe2,0x61,0x6e,0x1f,0x7b,0x21,0x10,0x7f,0x2e,0xd7,0x42,0xfd,0xc5,0x40,
    0x6c,0x96,0xce,0x3a,0xb6,0x4f,0xbd,0x14,0xc8,0x99,0xde,0x82,0x06,0xbd,0x85,0x81,
    0xd8,0xd3,0x3a,0x4f,0x98,0xde,0xa2,0x40,0xce,0xf4,0x5e,0x6d,0xd0,0x7b,0x2d,0x10,
    0x9b,0xdb,0xa0,0xf7,0x7a,0x20,0x67,0x39,0xea,0x8d,0xc0,0x3e,0x61,0x1d,0x5b,0x7f,
    0xde,0x54,0x7f,0xde,0x70,0xf6,0xdf,0x0a,0xc4,0x6d,0xff,0x59,0x22,0x3d,0xdc,0xdb,
    0xb1,0x36,0x97,0x06,0xca,0x81,0x1b,0xea,0xda,0x5c,0x16,0xc8,0x59,0x0c,0x97,0x07,
    0x9e,0x87,0xe7,0x39,0x3f,0x56,0x04,0xe2,0xde,0x8f,0x95,0xf2,0x63,0x85,0xf3,0x63,
    0x55,0x20,0x6e,0x7e,0xac,0x91,0xde,0x4b,0xa5,0xe2,0xcc,0xb0,0x36,0x50,0x6e,0x4d,
    0x28,0xce,0x08,0xeb,0x02,0xf1,0x61,0xce,0xaf,0xf5,0x81,0x38,0xc6,0x1e,0x67,0xab,
    0x8f,0xeb,0x6d,0xc7,0xf5,0x6b,0xb8,0x0d,0x81,0xe7,0x2d,0xc4,0x6b,0x59,0x28,0x72,
    0xdc,0x07,0x81,0x9c,0xf5,0xe5,0xc3,0x40,0x3b,0x38,0x57,0xfc,0x4d,0xd8,0xa6,0x40,
    0xb9,0x0f,0xdd,0x5c,0xda,0x1a,0x88,0x2f,0x0a,0x45,0x1e,0xde,0x16,0x38,0xfe,0xe0,
    0xf6,0x2a,0x05,0x9e,0x35,0xb4,0x86,0xda,0x8a,0xdf,0xaa,0x7b,0x10,0x36,0xdf,0x9b,
    0x52,0xae,0xf3,0x8a,0x5b,0xe7,0xb5,0x94,0xb8,0x2f,0xb6,0xce,0xf7,0x4a,0xc9,0xfb,
    0x75,0xbe,0x4f,0x4a,0xdc,0xaf,0xf3,0x7d,0x53,0xe2,0x7e,0x9d,0xef,0x97,0x12,0xf7,
    0xeb,0xfc,0x00,0xc9,0xf9,0x75,0x7e,0x60,0x4a,0xdc,0xaf,0xf3,0x83,0x52,0xea,0x83,
    0x33,0xdd,0x43,0xa4,0xeb,0xd7,0x79,0xab,0x94,0xb8,0x5f,0xe7,0x9f,0x4f,0xa9,0xdf,
    0xca,0xe9,0x7e,0x41,0xba,0x7e,0x9d,0x1f,0x9a,0x12,0xf7,0xeb,0xfc,0xb0,0x94,0xfa,
    0x87,0x3a,0xdd,0xaa,0x62,0x56,0x76,0x31,0x3b,0x3a,0x25,0xee,0x8b,0xc5,0xec,0x98,
    0x94,0xbc,0x8f,0xd9,0xb1,0x29,0x71,0x1f,0xb3,0xe3,0x53,0xe2,0x3e,0x66,0xad,0x53,
    0xe2,0x3e,0x66,0x6d,0x24,0xe7,0x63,0xd6,0x36,0x25,0xee,0x63,0xd6,0x2e,0xa5,0x7e,
    0x5b,0xe7,0xfb,0x89,0xd2,0xf5,0x31,0x3b,0x29,0x25,0xee,0x63,0x76,0x72,0x4a,0xfd,
    0x93,0x9c,0xee,0x29,0xd2,0xf5,0x31,0x3b,0x35,0x25,0xee,0x63,0x76,0x5a,0x4a,0x7d,
    0x70,0x96,0x1b,0xe3,0x94,0xb1,0x04,0x87,0xf3,0xd7,0xe5,0xda,0xa7,0xfb,0xba,0x7d,
    0xfa,0xeb,0xe9,0xa7,0xf7,0xe9,0xff,0x4a,0x89,0xfb,0x62,0x71,0xfd,0x66,0x4a,0xde,
    0xc7,0xf5,0x5b,0x29,0x71,0x1f,0xd7,0xce,0x29,0x71,0x1f,0xd7,0xef,0xa4,0xc4,0x7d,
    0x5c,0xbb,0x48,0xce,0xc7,0xb5,0x6b,0x4a,0xdc,0xc7,0xb5,0x5b,0x4a,0xfd,0xae,0x2e,
    0x36,0xe7,0x4b,0xd7,0xc7,0xf5,0x82,0x94,0xb8,0x8f,0xeb,0xf7,0x52,0xea,0x5f,0xe0,
    0x74,0xbb,0x4b,0xd7,0xc7,0xb5,0x47,0x4a,0xdc,0xc7,0xf5,0xa2,0x94,0xfa,0x3d,0x9c,
    0x6e,0x87,0xf4,0xd3,0xfb,0xf4,0xa5,0x29,0x71,0x5f,0x2c,0x66,0xbd,0x53,0xf2,0x3e,
    0x66,0xfd,0x52,0xe2,0x3e,0x66,0xfd,0x53,0xe2,0x3e,0x66,0x97,0xa7,0xc4,0x7d,0xcc,
    0x7e,0x20,0x39,0x1f,0xb3,0x01,0x29,0x71,0x1f,0xb3,0x2b,0x52,0xea,0x0f,0x70,0xbe,
    0x5f,0x29,0x5d,0x1f,0xb3,0x41,0x29,0x71,0x1f,0xb3,0xc1,0x29,0xf5,0x07,0x39,0xdd,
    0x66,0xe9,0xfa,0x98,0x5d,0x9d,0x12,0xf7,0x31,0x1b,0x92,0x52,0xff,0x6a,0x37,0x17,
    0x3b,0xa5,0x8c,0xe5,0x90,0x86,0xb9,0x88,0xff,0x9b,0xf3,0x18,0x22,0x6f,0xde,0x53,
    0x63,0xee,0xc4,0x39,0x12,0xf9,0xb2,0xaf,0x38,0xe8,0x5f,0x5e,0xe3,0x7c,0x06,0x07,
    0x5b,0x7e,0x0e,0xff,0x20,0x26,0x6f,0xd7,0x56,0xf5,0x78,0xc4,0xc4,0x87,0x69,0x2f,
    0xc2,0x7e,0x30,0x30,0xe6,0xf5,0x32,0x38,0xdb,0x0b,0xae,0x8c,0x89,0xdb,0x5e,0x34,
    0x28,0x26,0x36,0xd4,0x5d,0x93,0x0d,0x8e,0x89,0x37,0x6b,0xdf,0x81,0xfd,0xab,0x62,
    0xe2,0x76,0x4e,0x1e,0xa2,0x73,0x72,0xb3,0xce,0xc9,0xd7,0xb8,0x73,0x32,0xb8,0x1f,
    0xe6,0xe5,0xbf,0xd5,0xe7,0x1f,0xc6,0x85,0x9f,0x3f,0x91,0x9f,0x78,0x9e,0x63,0xb6,
    0x86,0xc6,0xc4,0xfb,0x94,0x18,0xab,0x6b,0xa4,0x07,0x7d,0x5f,0xbf,0x46,0xf1,0x81,
    0xce,0x15,0x35,0xea,0xc1,0x36,0xee,0xc1,0x42,0xf6,0x01,0xd9,0xfb,0x9f,0x06,0xdf,
    0x86,0x3b,0xdf,0xc0,0x5d,0x9b,0x97,0xe1,0xb2,0x79,0xad,0xf3,0xed,0x67,0x9f,0xe1,
    0x5b,0x4b,0x4c,0xdc,0x7c,0x33,0xbd,0xe1,0xce,0x97,0x1b,0x62,0xb6,0x09,0xff,0x5a,
    0x64,0x1f,0xed,0x9e,0x15,0x8a,0x76,0x21,0x73,0x23,0x7c,0x95,0x3e,0x7e,0x77,0xc9,
    0xf7,0x4f,0xdc,0xa3,0xb8,0x49,0xe3,0x69,0x63,0x6a,0x65,0x84,0xfc,0xba,0x39,0xe6,
    0xbd,0x04,0x8c,0x41,0x57,0xdd,0xcb,0x19,0x19,0x13,0xb7,0x82,0xbd,0x1d,0xf8,0xff,
    0xc6,0xbc,0x97,0x0c,0xfe,0x69,0x61,0xb7,0xc4,0x6c,0x03,0xdc,0xb5,0xba,0xe7,0x7f,
    0x6b,0x4c,0x1c,0x7d,0xaf,0xdf,0xeb,0x89,0x89,0xe1,0xde,0xd1,0x08,0x61,0xb7,0xc7,
    0xc4,0x71,0x9f,0x09,0x7d,0x3f,0x2b,0xd0,0x77,0xf4,0xc1,0xce,0x4f,0x77,0x28,0x66,
    0xcf,0xe8,0xba,0xca,0xce,0x29,0xe3,0x62,0x72,0x56,0x1f,0x2f,0xb9,0x7f,0xe6,0x35,
    0xd4,0xef,0x8c,0x89,0xcd,0xd2,0xbd,0x2e,0xb3,0x37,0x51,0x72,0xf3,0x1b,0xec,0xdd,
    0x1d,0x93,0x33,0xfd,0x49,0xd2,0x9f,0xdb,0xa0,0xff,0x7b,0xe9,0xaf,0x2f,0xed,0xa9,
    0x7f,0x6f,0x4c,0xce,0xf4,0xef,0x97,0x7e,0xcf,0xdd,0xf7,0xdb,0x38,0xf7,0x1f,0x8c,
    0xe9,0xfb,0x9d,0x71,0x81,0x3d,0x12,0xb3,0xfd,0x49,0x0e,0x9b,0x16,0xd3,0xe6,0xfd,
    0x71,0xb1,0x46,0xfe,0x14,0x53,0x7f,0xaa,0xe6,0xce,0x9f,0x63,0x62,0xb8,0x07,0x8f,
    0xf9,0xd0,0xc9,0xcd,0x07,0x70,0xd3,0xf3,0x72,0x60,0xc2,0x98,0x4e,0x77,0x31,0x7d,
    0x42,0x7d,0x98,0x55,0xda,0xf3,0x4c,0x3a,0x33,0x26,0x67,0x72,0xb3,0x5d,0xec,0xbd,
    0xdc,0x93,0x31,0xb9,0x39,0xf2,0xf5,0xa9,0x98,0xd8,0x50,0xe5,0x2c,0x60,0x7f,0x8d,
    0x69,0xef,0x29,0x67,0x6f,0x8e,0xec,0x35,0x9e,0xdb,0x9f,0x8d,0xc9,0x99,0xdc,0x5c,
    0xc9,0x35,0x9e,0xd3,0xff,0x11,0x93,0x33,0xb9,0x7f,0x49,0x6e,0x55,0x83,0xdc,0xbc,
    0x98,0x9c,0xc9,0xbd,0x20,0xb9,0x9e,0x0d,0x72,0x2f,0xc6,0xe4,0x4c,0x6e,0x81,0xe4,
    0x06,0x37,0xc8,0x2d,0x8c,0xc9,0x99,0xdc,0xab,0x92,0xb3,0xfb,0xa5,0x96,0xbb,0x5f,
    0x8b,0xc9,0x35,0xbb,0xdc,0xfd,0x66,0x4c,0x1c,0x39,0x12,0x67,0x6a,0xdc,0x8f,0xc4,
    0x33,0x0d,0xcb,0xa1,0x6f,0xc7,0xbc,0x47,0xf9,0xa6,0xcb,0xa1,0x4b,0x62,0xe2,0x96,
    0x8f,0x97,0x69,0xfd,0xfa,0xfb,0x1c,0xcb,0x63,0xde,0x7b,0xed,0xe4,0xee,0x0b,0xbe,
    0x1b,0x53,0x76,0xb9,0xcb,0x39,0x2b,0x62,0xe2,0x13,0x5d,0x7f,0x56,0xc6,0xc4,0x77,
    0x5f,0x1b,0x48,0xaf,0x93,0xbb,0x7f,0xb8,0x2e,0x26,0xbe,0xc7,0xb5,0x41,0x4c,0xdc,
    0xc6,0x78,0x43,0x4c,0x5b,0xeb,0x95,0x8f,0x36,0xbb,0x3c,0x88,0xfc,0xb9,0x11,0x39,
    0x4c,0xf9,0x68,0xa3,0xcb,0xed,0x9b,0x62,0xea,0x0e,0x55,0xce,0x33,0x99,0xcd,0x2e,
    0xe7,0xb5,0xd4,0x98,0x83,0x31,0x6f,0x21,0xef,0xf5,0xb7,0x48,0x7f,0xab,0xf2,0xef,
    0x01,0x49,0xd1,0x2e,0xb8,0xad,0x31,0x1f,0x5a,0xc2,0xe6,0x56,0xe5,0x34,0xe4,0x9b,
    0x8f,0x63,0xce,0x4b,0xcc,0x37,0xcc,0x25,0xcb,0x43,0xbb,0x62,0x72,0x96,0x87,0x0e,
    0x90,0x2e,0x6c,0xd8,0x35,0x4d,0x39,0xa1,0xbf,0x1b,0x9c,0xbd,0x38,0xe1,0x5c,0xc3,
    0x3c,0x5a,0xe8,0xec,0x85,0x84,0x5c,0x9f,0x5a,0x71,0xad,0x53,0x4b,0x68,0x63,0x89,
    0xd3,0xdf,0x2b,0x21,0x6e,0xa5,0x45,0xfa,0x7b,0x27,0xb4,0x01,0x1e,0xd7,0x40,0xc0,
    0xf6,0x49,0x8a,0x6b,0x20,0xf0,0x78,0xb6,0x85,0xe7,0x58,0xde,0x5f,0xfc,0x47,0xfc,
    0x20,0x3f,0xa1,0xc6,0x7e,0xa1,0xff,0xfb,0xe8,0x05,0x12,0xc8,0x76,0x52,0x8e,0x45,
    0x5e,0xb0,0xbc,0x72,0x70,0xc2,0x1c,0x64,0x79,0xe5,0x90,0x84,0x98,0xe5,0x95,0x8e,
    0x2e,0xaf,0x80,0x6b,0x95,0x97,0xb1,0x6a,0x13,0xbf,0x6d,0x5d,0x7c,0x21,0x29,0xf2,
    0x85,0x5f,0x3f,0x87,0x26,0xe4,0x4c,0xee,0x88,0xa4,0xc8,0x3f,0x2d,0x4e,0xee,0xc8,
    0x84,0x9c,0xe5,0x95,0xa3,0x12,0x62,0xcd,0xee,0x3a,0xf6,0x8b,0xd2,0xc5,0x73,0x4c,
    0x9b,0xab,0x5f,0x4a,0x88,0xfb,0xb9,0x7a,0x6c,0x42,0xdc,0xe6,0xea,0x71,0x09,0xed,
    0x1d,0xeb,0xfc,0xf8,0xb2,0x6c,0x4d,0x2f,0xef,0xe9,0x47,0x9b,0x84,0x9c,0xb5,0x79,
    0x82,0xe4,0x46,0xbb,0xf3,0xd0,0x89,0x09,0xf1,0x51,0x4e,0xef,0xa4,0x84,0xb8,0xb5,
    0x79,0x72,0x42,0x5b,0x27,0xb9,0x36,0x4f,0x4d,0x8a,0xfd,0xc3,0xc7,0xe8,0xb4,0x84,
    0x9c,0xc9,0xfd,0x87,0xe4,0xd6,0x34,0xc8,0x9d,0x9e,0x90,0x33,0xb9,0xf6,0x92,0x6b,
    0x69,0x90,0x3b,0x33,0x21,0x67,0xfe,0x76,0x92,0x5c,0x7f,0xb7,0xef,0x7f,0x33,0x61,
    0x5e,0x18,0xa0,0x7d,0x07,0xd8,0x39,0x09,0x65,0xc1,0xd9,0xdc,0xfd,0x56,0xc2,0x31,
    0xc4,0xf3,0x51,0xc3,0x3a,0x27,0x8c,0xe9,0x94,0x4a,0x91,0x93,0xbe,0x93,0x50,0xb6,
    0x73,0x52,0x60,0x5d,0x12,0xe2,0x27,0x3b,0x7b,0xdd,0x12,0xf6,0xd7,0xdb,0x3b,0x3f,
    0x61,0xdf,0xbc,0xbd,0x0b,0x12,0xca,0x9e,0xef,0xec,0x5d,0x98,0x10,0x47,0xff,0x1e,
    0xd6,0x7c,0xed,0x9e,0xb0,0x1d,0x70,0x53,0x14,0x97,0x1e,0x09,0xf1,0x61,0x7a,0x96,
    0x62,0xfd,0xbb,0x38,0x61,0x1f,0xc1,0x23,0x1f,0x9f,0xde,0x90,0x8f,0x2f,0x49,0xf8,
    0x8c,0x08,0x72,0x96,0x8f,0x7b,0x25,0xc4,0x2d,0x1f,0xf7,0x4e,0x3e,0x9d,0x8f,0xfb,
    0x26,0x9f,0xce,0xc7,0xfd,0x12,0xca,0xf6,0x75,0xe3,0x70,0x59,0x42,0xdc,0xe7,0xe3,
    0xfe,0x09,0x71,0xd3,0x1b,0x20,0x3d,0x9f,0x8f,0xaf,0x48,0x88,0xfb,0x39,0x3e,0x30,
    0x21,0x8e,0x35,0x3a,0x24,0xd9,0x33,0xf7,0x0e,0xca,0xeb,0x43,0xb4,0x46,0x07,0xb9,
    0xf8,0x35,0x27,0x6c,0x0f,0xba,0x96,0x4f,0xaf,0x4e,0x88,0x5b,0x3e,0x36,0xbd,0x21,
    0x49,0x91,0x8f,0x6f,0x54,0x3e,0xc6,0x7a,0x87,0x3c,0x6c,0xda,0x79,0xf8,0x47,0xb2,
    0x69,0xf9,0xf8,0x7a,0xe7,0x0b,0xb8,0x1f,0xe7,0xe5,0xa7,0xb2,0x89,0xdf,0x96,0xff,
    0xae,0xd1,0x3c,0x38,0x5d,0xe3,0x89,0xb6,0xaf,0x97,0xdc,0x4f,0x9d,0xdc,0x75,0x9a,
    0x7f,0xc7,0x69,0x1e,0x79,0xb9,0xeb,0x5d,0xce,0x1b,0x58,0xa3,0x4d,0xb4,0x71,0x9d,
    0xda,0xb4,0x9c,0x7c,0x43,0x42,0xde,0xe7,0xe4,0x11,0xea,0xf3,0x40,0x97,0xe7,0x6f,
    0x52,0xbe,0x19,0xe1,0xe6,0xeb,0xc8,0x84,0x78,0x2f,0xe7,0xd3,0x2d,0x09,0x71,0x2b,
    0x96,0xbb,0x6f,0x4d,0xd8,0xd6,0x2d,0x2e,0x77,0x8f,0x72,0xb9,0xfb,0xd6,0x86,0xdc,
    0xdd,0xd1,0xce,0xbc,0x2e,0x1f,0xff,0x32,0xe1,0xf9,0xcf,0xf2,0xf1,0x1d,0x09,0x31,
    0xcb,0xc7,0x1d,0x5c,0x3e,0x06,0x37,0x2e,0x2f,0xad,0x65,0x67,0x9c,0xcb,0x0d,0xe3,
    0xb5,0xe6,0xf1,0x00,0x75,0x85,0x9b,0x37,0x77,0x26,0xe4,0x76,0x9f,0x89,0x25,0x87,
    0x67,0xbc,0x5e,0xee,0xee,0x84,0x9c,0xcd,0xcb,0xdf,0x49,0x0e,0xef,0x10,0x98,0xcc,
    0xa4,0x84,0xb8,0x5d,0xef,0x4d,0x4e,0x88,0xe1,0xbd,0x0c,0xcb,0x83,0xf7,0x24,0xb4,
    0x35,0xd9,0xb5,0x79,0x9f,0xcb,0x6f,0x3e,0xf7,0xfe,0x21,0x21,0x67,0x72,0x0f,0xb8,
    0x7c,0xe9,0xcf,0xa0,0x53,0x13,0x72,0xb6,0x57,0x3c,0x98,0x10,0x6b,0x71,0x67,0xd0,
    0x87,0x12,0xda,0x7b,0xd0,0xf5,0xe1,0x51,0x67,0xcf,0x6c,0xfd,0x31,0x21,0x6e,0x7d,
    0x98,0x96,0x10,0x3b,0xca,0xf5,0xe1,0xb1,0x84,0xf6,0xa6,0x25,0x85,0xde,0x8c,0x84,
    0xb9,0xd3,0x7c,0x9d,0x99,0x14,0xe7,0x42,0x7f,0x6d,0x30,0x2b,0x21,0x67,0xbe,0xfe,
    0x25,0x21,0xd6,0xec,0x7c,0x9d,0x9d,0xd0,0xde,0x5f,0x5c,0x9e,0x79,0xca,0xe5,0x19,
    0x6b,0xe3,0xaf,0x09,0xf1,0x76,0x0d,0x63,0xfa,0x74,0x42,0xce,0xe4,0x9e,0x95,0x1c,
    0xc6,0x7e,0x8d,0x93,0xfb,0x5b,0x42,0xce,0xe4,0xfe,0x21,0x39,0x7b,0x9f,0xce,0xe4,
    0xfe,0x99,0x90,0x33,0xb9,0x79,0x92,0x9b,0xdf,0x30,0x47,0xe6,0x27,0xe4,0x76,0xdf,
    0xd3,0x97,0xdc,0xd6,0xd2,0x9e,0x72,0x2f,0x25,0xe4,0x2c,0x06,0x0b,0x12,0xce,0x43,
    0x7f,0x5f,0x60,0x91,0xb0,0xc1,0x2e,0x2e,0xaf,0x24,0x94,0x5d,0xe4,0x74,0x5f,0x4b,
    0x18,0x2f,0xaf,0xbb,0x58,0x98,0xd7,0x7d,0x23,0xa1,0xec,0x62,0xa7,0xfb,0x56,0xc2,
    0x58,0x79,0xdd,0x25,0xc2,0xbc,0xee,0xd2,0x84,0xb2,0x4b,0x9c,0xee,0x3b,0x09,0xe7,
    0x72,0xb3,0xd3,0x7d,0x57,0xd8,0x0a,0xa7,0xbb,0x22,0xa1,0xec,0xbb,0x4e,0x77,0x55,
    0xc2,0xd8,0x7b,0xdd,0x35,0xc2,0xbc,0xee,0xda,0x84,0xb2,0x6b,0x9c,0xee,0xfa,0x84,
    0xe3,0xe1,0x75,0xdf,0x17,0xe6,0x75,0x37,0x24,0x94,0x7d,0xdf,0xe9,0x6e,0x4c,0x38,
    0x77,0x7d,0x7f,0x37,0x09,0xf3,0xfd,0xdd,0x9c,0x50,0x76,0x93,0xd3,0xdd,0x92,0x70,
    0x7c,0xbd,0xee,0x36,0x61,0x5e,0x77,0x7b,0x42,0xd9,0x6d,0x4e,0xf7,0xe3,0x84,0x63,
    0xee,0x75,0x77,0x0a,0xf3,0xba,0xbb,0x12,0xca,0xee,0x74,0xb9,0xb5,0x12,0x38,0xee,
    0x88,0xe3,0x66,0x87,0x27,0x81,0x63,0x8a,0x18,0x6d,0x57,0xce,0x06,0x9e,0x06,0x72,
    0x95,0x50,0xc8,0xee,0x1d,0x38,0x86,0x88,0xc9,0x2e,0x27,0xbb,0x4f,0x20,0x57,0x09,
    0xc5,0x9e,0xff,0xb9,0xc0,0xfb,0x58,0x7d,0xdc,0x73,0xdb,0x7d,0x03,0x71,0xb3,0xb7,
    0x7f,0x20,0x66,0xc5,0xf6,0x95,0x03,0x02,0xdb,0xdf,0xdf,0xd9,0x3b,0x50,0xf6,0x86,
    0x39,0x7b,0x07,0x05,0xe2,0x66,0xef,0x90,0x40,0xcc,0x8a,0xd9,0x6b,0x15,0xe8,0xe3,
    0x21,0xa1,0xd8,0x53,0x0e,0x0d,0x6c,0xa7,0x95,0xc3,0x0e,0x0f,0xc4,0xf1,0xee,0xce,
    0x33,0xc2,0x8e,0x0c,0xc4,0x7b,0xd7,0x0a,0xb9,0xa3,0xd4,0xd7,0x23,0x43,0xb1,0x1f,
    0x1d,0xe3,0x9e,0xa7,0x80,0xf7,0xfb,0x51,0x07,0xed,0x23,0xad,0x9d,0xaf,0xed,0x02,
    0xef,0x59,0xdc,0xad,0x7b,0x12,0xb6,0xa6,0x4f,0x0c,0xc5,0x3d,0x23,0xc8,0x9d,0x12,
    0x78,0x5f,0x63,0x92,0xee,0x5b,0x18,0x7e,0x6a,0xa0,0xac,0x15,0xeb,0xeb,0x69,0x81,
    0xdc,0x29,0xae,0x5f,0x5f,0x0d,0x6c,0x0f,0xdc,0x1c,0x61,0xa7,0x07,0xe2,0x97,0xba,
    0xbe,0xb6,0x17,0x86,0xbe,0x3e,0x2b,0xec,0xcc,0x40,0x59,0x70,0xbe,0x2f,0xf8,0x6f,
    0x67,0x84,0xbb,0x6b,0xec,0x3f,0xf6,0x49,0xbc,0x7f,0xd4,0xda,0x71,0x63,0x6b,0xc4,
    0xc0,0xc1,0x16,0x38,0x9c,0x27,0xb1,0x07,0x6f,0xae,0x71,0x1f,0xc6,0xbd,0x40,0x9c,
    0x83,0x0c,0xff,0xc8,0xe1,0x78,0x3f,0xd3,0xef,0xe9,0x1d,0x9d,0xed,0x89,0x35,0x9e,
    0x03,0x70,0x5e,0x81,0x0f,0xde,0xa7,0x31,0x6a,0x17,0xdc,0x58,0xc7,0xc1,0xfe,0xf0,
    0x1a,0xcf,0x5e,0xf5,0x73,0x4e,0x03,0x37,0xa4,0xc6,0x76,0xc1,0x7d,0x24,0xce,0x5f,
    0xe3,0x75,0x72,0x6d,0xdc,0x55,0xe3,0x35,0x21,0xae,0x11,0xe1,0x8b,0xf7,0x6d,0xa4,
    0xda,0x07,0x37,0xc6,0x71,0x68,0xe3,0xfa,0x1a,0xaf,0xc5,0xc1,0x0d,0x6f,0xe0,0x06,
    0xa9,0x7d,0x70,0x43,0xc4,0xf9,0xfb,0x78,0x67,0xb9,0x36,0x7e,0xa5,0x36,0x70,0x5f,
    0x12,0xbe,0x78,0xdf,0x6e,0xae,0xf1,0x5e,0x20,0xb8,0x91,0x8e,0x43,0x1b,0xd7,0xe9,
    0xdc,0x09,0xee,0xfa,0x06,0xee,0xca,0x1a,0x63,0x0e,0x6e,0x90,0x38,0x9c,0x8f,0x86,
    0xba,0xf3,0x11,0x64,0xce,0xc6,0xb3,0x57,0xf9,0x84,0xdf,0x76,0x6e,0x3d,0x47,0xf3,
    0x17,0xeb,0x7e,0x8a,0xee,0xdb,0x9d,0x1b,0x88,0x37,0xeb,0x9d,0xd1,0xdd,0xd7,0x40,
    0x7a,0xee,0x7d,0xae,0x7b,0xce,0xf9,0x6d,0x3d,0x9b,0xfd,0x96,0x7b,0xc6,0xdc,0x39,
    0xf0,0x0c,0xf0,0x6d,0xc9,0xdb,0x5e,0xfe,0xdd,0xf0,0xe9,0x6b,0x86,0xae,0xe1,0xd3,
    0xd7,0x0c,0xdd,0x02,0x65,0xbb,0xba,0xe7,0xb4,0xe7,0x05,0xe2,0xfe,0x9a,0xe1,0xfc,
    0x40,0xdc,0xf4,0xba,0x4b,0xcf,0x5f,0x33,0xf4,0x08,0xc4,0xfd,0x35,0xc3,0x45,0x81,
    0xb8,0xf5,0xa1,0xa7,0xfa,0x7a,0xbe,0x62,0x77,0xb9,0x8b,0x1d,0x62,0xdf,0x0b,0x7e,
    0x2b,0x76,0xbd,0xdc,0xb3,0xdb,0x3e,0x81,0xba,0x17,0xb9,0x67,0xb7,0x97,0x05,0xda,
    0x01,0x66,0xd7,0x16,0xfd,0x03,0x71,0xbb,0xb6,0x30,0x5b,0x97,0xbb,0x71,0xfc,0x65,
    0x8d,0xe3,0x8c,0xb1,0x81,0x7c,0xaf,0x50,0x3c,0xc3,0xb8,0xa9,0xc6,0x76,0xc0,0xf5,
    0x11,0x87,0xeb,0x36,0xbc,0xb7,0x87,0xf7,0x45,0xed,0xd9,0xf4,0x80,0xc0,0x77,0xf9,
    0x3a,0xab,0x7d,0xcb,0xbb,0x57,0x04,0x72,0xe6,0xf7,0x95,0x81,0x18,0xec,0x5a,0x7e,
    0xba,0x2a,0x10,0xb7,0x62,0xb9,0xa8,0x39,0x70,0x6e,0x5e,0xe5,0x72,0xe7,0xd5,0x2e,
    0x77,0x36,0x37,0xe4,0x4e,0x9b,0x63,0x43,0xdd,0xdc,0x1e,0x57,0xe3,0xdc,0xc7,0x5a,
    0xb8,0x5a,0xb1,0xb4,0x7e,0xff,0x42,0xfd,0x06,0x87,0x18,0x80,0xbb,0xcf,0x9e,0x31,
    0x04,0x3e,0x03,0xf9,0x85,0xee,0x49,0x5d,0x27,0xdb,0xd7,0x85,0x62,0xae,0x6e,0xa9,
    0x51,0x6e,0xab,0x9e,0xf5,0xa0,0x3f,0x78,0x97,0x72,0x9b,0x70,0x2b,0x53,0xd4,0xcf,
    0xed,0xe2,0xe0,0xf3,0x38,0xf7,0x2e,0xd8,0xcf,0x02,0xb9,0x52,0xa9,0xc0,0x86,0x0b,
    0x6b,0x72,0xd8,0x8d,0xc2,0xca,0xfe,0xb9,0x4d,0x44,0x7d,0xab,0x0f,0x89,0xa8,0x6b,
    0xf5,0x1f,0x47,0xd4,0xb3,0xe7,0x0a,0x3f,0x89,0xa8,0x03,0x39,0x70,0xf6,0xbc,0x60,
    0x64,0x4a,0xae,0x57,0x53,0xc2,0x67,0x0a,0x69,0xf1,0x0d,0x0e,0xf0,0xd1,0x5a,0x37,
    0xe0,0x7e,0x9e,0x92,0xc7,0xfb,0xa6,0xf6,0x0c,0x62,0x74,0x4a,0x1c,0xef,0x9a,0x9a,
    0xcd,0x31,0x29,0x71,0xdb,0xfb,0x6f,0x4b,0xd9,0xce,0x98,0xb4,0xe8,0xd3,0xd8,0x94,
    0xb8,0x7f,0x0f,0xee,0x8e,0x94,0x38,0x0a,0xfc,0xa9,0x3f,0x6f,0x70,0xfe,0xdc,0xa1,
    0xe7,0x82,0xcd,0xfa,0x6e,0xe0,0x57,0x29,0x79,0xb3,0x79,0x97,0x6c,0xfa,0xf7,0xd7,
    0x26,0xc8,0xde,0x5d,0xce,0xe6,0x44,0x67,0x73,0x42,0x83,0xcd,0xbb,0x53,0xf2,0x66,
    0x73,0x92,0x6c,0x96,0x9d,0xcd,0xc9,0xb2,0x39,0xc9,0xd9,0xbc,0xc7,0xd9,0x9c,0xdc,
    0x60,0xf3,0xf7,0x29,0x79,0xd3,0xbf,0x5f,0xfe,0x78,0x9f,0x1e,0x70,0xfa,0xf7,0x37,
    0xe8,0x4f,0x4d,0xc9,0x9b,0xfe,0xa3,0xd2,0xf5,0xed,0xff,0xd1,0xe9,0x3f,0xda,0xa0,
    0x3f,0x2d,0x25,0x6f,0xfa,0x33,0xa4,0xeb,0xf5,0x1f,0x77,0xfa,0x33,0x1a,0xf4,0x9f,
    0x48,0xc9,0x5f,0xae,0x39,0x32,0xeb,0x33,0xe6,0x48,0x3f,0x71,0xb3,0x3f,0x83,0xb3,
    0x67,0x58,0x4f,0xa6,0xd4,0x85,0xcc,0xd5,0xfa,0x06,0xef,0xa9,0x94,0x38,0xd6,0xda,
    0x5f,0x53,0xae,0x35,0xfc,0xc7,0x5a,0x05,0xff,0x48,0x8d,0x32,0x58,0x7f,0x1b,0xf3,
    0xdf,0xab,0xc5,0xd5,0xbf,0x5f,0xa9,0xf1,0x9b,0x16,0x70,0x6f,0xa7,0x05,0x57,0xbf,
    0x06,0xad,0x71,0x7d,0x82,0x5b,0x2b,0xee,0x51,0xad,0xf1,0x39,0x29,0xf9,0xc1,0xf5,
    0xef,0x6f,0xaa,0xa5,0x75,0xe2,0x2d,0xff,0x82,0x7f,0x36,0x2f,0xeb,0xe4,0xcf,0xb3,
    0x29,0xd7,0x11,0xfc,0xf9,0x47,0xca,0x79,0x87,0x79,0x82,0x71,0xfd,0x65,0x6e,0x13,
    0xbe,0x3c,0x97,0x92,0x7b,0xa4,0x56,0xc8,0x3e,0x2f,0x39,0x8c,0xdf,0x34,0x27,0xfb,
    0x62,0x4a,0xce,0xcb,0x2e,0x94,0x3d,0xc8,0x3d,0xe1,0x64,0x5f,0x49,0xc9,0x79,0xd9,
    0xc5,0x29,0xdb,0x83,0x9d,0x57,0x9c,0xec,0x5b,0x29,0x39,0x94,0xbd,0x72,0x59,0x60,
    0x6f,0x6b,0x3d,0x1c,0x2e,0xfe,0x09,0xc5,0x60,0x69,0x4a,0x0e,0xf1,0xc3,0xfe,0xb3,
    0xca,0xf5,0x1f,0xdc,0xb2,0xbc,0xac,0x52,0xff,0xf1,0x7b,0xa4,0xda,0x58,0x9e,0xf2,
    0xbb,0xa1,0xb7,0xeb,0x73,0x24,0xaa,0xfb,0xb3,0x52,0x6d,0x2e,0xd7,0x38,0x9a,0xde,
    0x2a,0x37,0x8e,0x18,0xbb,0xc5,0x8a,0xeb,0x4a,0xd9,0x87,0xec,0x6a,0xc9,0xe2,0xbf,
    0xed,0x67,0x6b,0x35,0x3e,0xcd,0xa5,0x3d,0xe7,0x05,0xc6,0x63,0x86,0xfc,0x7f,0x2f,
    0xe5,0xf8,0xcf,0x90,0xff,0xa5,0xac,0xf0,0x1f,0xdc,0xfb,0x79,0xd9,0x20,0xbd,0xf7,
    0xd5,0x16,0x64,0x50,0xdf,0xa0,0xf5,0x8d,0xfe,0x6c,0x54,0x6c,0x4b,0xa5,0x22,0x66,
    0x1f,0x2a,0x66,0x55,0xf1,0x26,0xbb,0x59,0xb2,0x4d,0x4e,0xf6,0x23,0x27,0xbb,0xb9,
    0x1e,0x77,0xce,0xcd,0x2d,0xc2,0x8f,0x93,0xbd,0x8f,0x9c,0x9d,0x6d,0xb2,0x53,0x76,
    0x76,0xb6,0x3b,0x3b,0xdb,0x9c,0x9d,0x1d,0xce,0x0e,0x6c,0x6e,0x77,0x63,0xf1,0x49,
    0xca,0x6f,0xab,0x76,0xb8,0xb1,0xd8,0x25,0xdb,0x9f,0x34,0xf4,0x19,0xff,0x6d,0x2c,
    0x1e,0xad,0xf1,0x5b,0x2d,0xc4,0x65,0x97,0xe2,0x64,0xeb,0xb1,0x9c,0x71,0xdd,0xda,
    0x9c,0xaa,0x66,0xc4,0xa0,0x73,0x59,0x13,0x7d,0x8a,0xb3,0x62,0x8d,0x83,0xc7,0x1a,
    0xff,0xbe,0xb8,0xf0,0x19,0xdc,0x63,0x1a,0xb3,0x5a,0x46,0x0c,0xfa,0xf6,0x0e,0x1d,
    0xbe,0x11,0xc6,0xf7,0x60,0x76,0xff,0x78,0xef,0x8c,0x72,0xc0,0x71,0x3e,0x44,0xce,
    0x01,0xfe,0x6f,0xce,0xee,0xde,0x0d,0x76,0xf7,0x95,0x5d,0xb4,0x6d,0x76,0xf6,0xcf,
    0x88,0x37,0xda,0x39,0xc0,0xd9,0xd9,0x5f,0x76,0x2e,0x6a,0xe2,0x1e,0x79,0xb0,0x38,
    0xf4,0x1f,0xed,0x19,0xfe,0x79,0x87,0x43,0xdf,0xce,0x96,0x87,0x65,0xd4,0x29,0xb9,
    0xe7,0x24,0x87,0x67,0xc4,0x5b,0xdc,0xf3,0xc9,0x23,0x32,0xe2,0xeb,0xdd,0xb9,0xf4,
    0x28,0xe9,0x36,0x39,0xdd,0xa3,0x33,0xe2,0xfe,0xd9,0xe6,0x31,0x19,0xf1,0x79,0xee,
    0xd9,0xe6,0x17,0x33,0xda,0x3c,0xc6,0xf9,0x72,0xac,0xec,0x95,0x9d,0xbd,0xe3,0x32,
    0xe2,0x2d,0x4e,0xf7,0xf8,0x8c,0xfa,0xc7,0x39,0xdd,0xb6,0x19,0xfb,0xe8,0xfb,0xd1,
    0x2e,0x23,0xee,0xfb,0x71,0x42,0x46,0xdc,0xf7,0xe3,0x24,0xe9,0xfa,0x7e,0x9c,0x9c,
    0x11,0xf7,0xfd,0xf8,0x4a,0x46,0xdc,0xf7,0xe3,0x94,0x8c,0x36,0xbf,0xe2,0x7c,0x39,
    0x4d,0xf6,0x7c,0x3f,0xbe,0x9a,0x11,0xf7,0xfd,0xf8,0x5a,0x46,0x7d,0x70,0x76,0xbf,
    0xf6,0x96,0x88,0xfd,0x03,0x87,0xb9,0xff,0x73,0xbd,0xa7,0x8f,0xff,0x36,0x2f,0x76,
    0xd4,0xf6,0x94,0x33,0xfc,0x63,0xe1,0xc0,0xc0,0xd9,0xb5,0xca,0xaf,0x22,0x72,0xd0,
    0x43,0x9e,0x19,0xef,0xbe,0x0f,0x00,0xf7,0xeb,0xbc,0x4c,0x55,0x3b,0xbf,0x8e,0x8a,
    0x3d,0x73,0x82,0xce,0x67,0x56,0xff,0x8d,0xce,0x67,0x56,0x9f,0xe4,0xce,0x67,0x58,
    0x77,0x93,0x23,0xea,0x40,0x0e,0x9c,0xad,0xc7,0xdf,0x47,0x1c,0x57,0xab,0xdf,0x17,
    0x31,0x3e,0x37,0x6a,0xbd,0x9f,0x9b,0x51,0xe6,0x3e,0xb7,0x66,0x3b,0x0b,0x03,0x67,
    0x58,0x97,0x8c,0x32,0x1e,0x3b,0x2f,0x63,0xbb,0xe7,0xca,0x1e,0xb0,0xef,0x65,0xc4,
    0xbb,0x38,0xac,0x47,0x46,0x9b,0xc0,0x2c,0xf7,0x5c,0x94,0x51,0x16,0xdc,0x4d,0xc2,
    0x2e,0xce,0x88,0xe3,0xbb,0xd4,0xe1,0xc2,0x7a,0x66,0xc4,0xf1,0x6d,0xea,0x55,0xba,
    0x36,0xb8,0x24,0x23,0x6e,0xef,0x99,0xf6,0xca,0x8a,0xb3,0xfd,0x25,0x19,0xf7,0xed,
    0x16,0x77,0xd6,0xbd,0x34,0xa3,0x8c,0x5d,0x5f,0xf5,0xc9,0x88,0x0d,0x73,0x73,0xa4,
    0x9f,0x30,0x7b,0xf7,0xb5,0xfe,0xce,0x59,0x46,0x59,0x70,0x36,0x0f,0xbf,0x9f,0x11,
    0xf7,0xef,0x0a,0x0c,0xc8,0x88,0xf7,0xd3,0xbc,0x19,0xaf,0xf1,0x9c,0xaa,0x6f,0x42,
    0x1e,0x76,0x63,0x8e,0xeb,0x82,0x87,0xf0,0x3d,0x89,0x64,0xf0,0xdb,0xae,0xb9,0xfe,
    0x18,0xf1,0xda,0x60,0xab,0xf6,0x2d,0x93,0xc1,0x7f,0xbb,0xf6,0x98,0x16,0xf1,0xda,
    0x02,0xb6,0x21,0xff,0x90,0x9b,0x9b,0x8f,0x45,0xe4,0x27,0x95,0x8a,0xf7,0x92,0xcc,
    0x97,0xf1,0xb2,0x51,0x97,0xab,0xd1,0x67,0xcc,0xb7,0xc7,0xe4,0xcb,0xee,0xb3,0x9d,
    0xbe,0xf1,0xc0,0x37,0x20,0xd6,0xe7,0xc7,0x23,0xea,0x80,0x1b,0xa0,0x3c,0xf8,0x44,
    0x54,0xe4,0xc1,0xc7,0x75,0x4e,0x33,0xf9,0xd9,0x9a,0xf3,0x73,0x5d,0x8c,0x9e,0x8c,
    0xb8,0x06,0x66,0xeb,0x7b,0x20,0xbc,0xfb,0x77,0x61,0x8d,0xf8,0x27,0xda,0xcb,0x0c,
    0xef,0x51,0xa3,0x7d,0xf0,0x15,0x37,0x8e,0x73,0x22,0xfa,0xd5,0x57,0x67,0xce,0xd9,
    0x2e,0x17,0x23,0x6e,0xf0,0xa1,0xbf,0xb8,0xa7,0x3e,0x83,0xb3,0x35,0x79,0x43,0x46,
    0x5d,0xc8,0x60,0x7c,0x46,0xba,0xbd,0x1f,0xdc,0x8d,0x98,0xa7,0xda,0xf7,0xf0,0xdb,
    0xae,0xb9,0xff,0x2e,0x9d,0xd9,0x59,0xb1,0x0e,0xe7,0x66,0xc4,0x4d,0xe6,0xb9,0x8c,
    0xed,0x79,0x99,0x7f,0x65,0xc4,0x6d,0xee,0xcf,0xcf,0x88,0xcd,0x75,0x73,0xff,0xf9,
    0x8c,0xf8,0x4e,0x37,0xf7,0x5f,0xc8,0x88,0x63,0xee,0x0f,0x56,0x0c,0x5e,0xcc,0x88,
    0x5f,0xaf,0xfa,0xcb,0x19,0x31,0x9b,0xdb,0x0b,0x32,0x62,0xf8,0x06,0xda,0xf2,0xda,
    0xa2,0x8c,0xf7,0x20,0x16,0x64,0xc5,0x35,0xe8,0x2b,0x19,0x71,0xbb,0x5f,0x62,0x31,
    0x7e,0x35,0x23,0x67,0x6b,0xe0,0xf5,0x8c,0x7a,0xaf,0x6a,0x6e,0x5b,0x5c,0x46,0x66,
    0xc5,0x7c,0x9a,0x57,0xe3,0x7c,0xc3,0x1c,0x7b,0x5d,0xf1,0x7b,0xc4,0x72,0x6a,0xc6,
    0x71,0x6b,0xab,0x67,0x60,0x63,0x5d,0xac,0xc1,0xdd,0x9a,0x97,0xdb,0x65,0x13,0xbf,
    0xed,0x19,0xf7,0x68,0x8d,0xdf,0x9c,0xa8,0x78,0x06,0x3c,0x26,0x23,0xee,0xe7,0xda,
    0x6d,0x19,0xdb,0x1f,0x23,0xff,0xc6,0xca,0xd6,0xed,0x0d,0xf5,0xb1,0xce,0xdf,0xf9,
    0x35,0xea,0xdd,0xaa,0xbd,0xfd,0x76,0xb7,0x07,0xdc,0xd1,0xe0,0xef,0x44,0xe7,0x2f,
    0xb8,0x71,0x79,0x99,0x20,0x9b,0xe3,0x9c,0xbf,0xe3,0x9d,0xbf,0x37,0x08,0xbb,0x33,
    0x23,0xee,0xfd,0xbd,0x4b,0xfe,0xde,0x29,0xff,0x26,0xca,0xd6,0x84,0x86,0xfa,0x44,
    0xe7,0xef,0x0b,0x35,0xea,0x8d,0x93,0xbf,0x90,0xb5,0x9c,0xf1,0xdb,0x06,0x7f,0xa7,
    0x3a,0x7f,0xc1,0xfd,0x0e,0x7d,0x93,0xcd,0xdf,0xb9,0x79,0x32,0x59,0x7e,0x0c,0x73,
    0xbe,0xdd,0x93,0x11,0x7f,0xc9,0xad,0xdb,0x7b,0x33,0xc6,0xeb,0x1e,0xa7,0xfb,0x07,
    0xe9,0xe2,0x3b,0x7a,0xcb,0x9f,0x53,0x32,0xe2,0x3e,0x2f,0x3e,0x90,0xd1,0xf7,0x29,
    0xea,0x9b,0xf9,0x31,0xd5,0xf5,0x6d,0x41,0x8d,0x32,0xe8,0xef,0x03,0xf2,0xd7,0xb8,
    0x97,0x6b,0x6c,0x1b,0xdc,0xbd,0xe2,0x2c,0xff,0x3c,0xe4,0xd6,0xf7,0xcb,0x5a,0xdf,
    0xc6,0x3d,0xe2,0xb8,0x05,0xb5,0xe2,0xfd,0x8f,0xfa,0x75,0xae,0xd6,0x30,0xde,0xab,
    0x35,0xec,0x31,0xad,0x69,0x60,0xf6,0x1c,0xe4,0x4f,0x19,0xf1,0x9e,0xee,0x99,0xc7,
    0x9f,0x33,0xea,0x83,0xb3,0xf5,0x32,0x3d,0x23,0x6e,0x7d,0x7e,0x3c,0x23,0x06,0xff,
    0xec,0x9d,0xdf,0x99,0x19,0x71,0xf8,0xd5,0xa5,0x94,0xd6,0x73,0xdc,0x73,0x11,0xf3,
    0x1c,0xb8,0xaa,0xbe,0x79,0x2e,0xdb,0xf5,0xbb,0xc6,0x76,0x9e,0xf2,0x9d,0x3d,0x9f,
    0x7f,0xde,0xed,0x23,0xe0,0xe6,0xe7,0xe5,0x79,0xe5,0xf7,0xf9,0xee,0x7b,0xb6,0x17,
    0xf4,0xdd,0xdc,0x56,0xf7,0x1c,0xe3,0xc5,0x88,0xf8,0xcd,0xea,0xcb,0x4b,0x11,0xb1,
    0xc1,0xa5,0x42,0xef,0x65,0xe9,0x35,0x3b,0xbd,0x05,0x11,0x71,0xd3,0x5b,0x18,0x11,
    0x1b,0xec,0xbe,0xcb,0x5c,0x14,0xd1,0xde,0xc2,0xa8,0xf8,0x2e,0xf3,0x55,0x7d,0xe3,
    0xb7,0x48,0xdf,0xdc,0xe2,0xfb,0xea,0x37,0xf4,0x6d,0xf5,0x65,0x79,0x1d,0xbf,0x21,
    0xf3,0x9c,0xbe,0x89,0xb4,0x7e,0x3c,0xdf,0xf0,0x8d,0x24,0xfe,0x7f,0x92,0xef,0xee,
    0x5f,0xcb,0xcb,0xff,0x01,0x12,0x2e,0xa9,0x11,0xdc,0x49,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//     uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     bool punchthrough;
//     result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//     uint minColor565 = packColorToRGB565(minColor);
//     uint maxColor565 = packColorToRGB565(maxColor);
//     if(minColor565 > maxColor565){
//         swap(minColor565, maxColor565);
//     }
//     uint indices = 0;
//     if(minColor565 != maxColor565){
//         indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//     }
//     else {
//         indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//     finalResult . b = maxColor565 |(minColor565 << 16);
//     finalResult . a = mask;
//
//     finalResult . rg = EncodeBC4(result . a, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
