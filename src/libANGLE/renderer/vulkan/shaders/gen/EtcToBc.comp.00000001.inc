// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x09,0xb4,0x55,0xc5,
    0x95,0x7d,0xff,0xfd,0x7b,0x6f,0xd5,0x7d,0x18,0xe3,0x90,0x41,0x1c,0x83,0x06,0x9c,
    0x22,0xc2,0x0a,0x92,0x44,0x44,0x25,0x0e,0x10,0x62,0x04,0xc5,0xb4,0xa2,0xf8,0x51,
    0xe0,0x8b,0xa8,0xf0,0x55,0x1c,0x50,0x3f,0x0e,0xa0,0x31,0x46,0xdb,0x81,0xb6,0xc5,
    0x01,0x13,0x54,0x14,0x15,0x8d,0x1a,0x07,0xd4,0x60,0x27,0x20,0x74,0x56,0x3b,0x04,
    0xc3,0x28,0x83,0x8a,0x8a,0x01,0xc5,0x19,0x67,0x4d,0xd2,0x77,0xbf,0xbd,0x0f,0xf7,
    0xf0,0x24,0x7f,0xad,0x5a,0xef,0xd7,0xde,0xe7,0x9c,0xaa,0x3a,0x75,0xea,0x54,0xdd,
    0xa9,0xb9,0xba,0x4b,0xa8,0x34,0x37,0x55,0x6a,0x95,0x58,0xf9,0x67,0xad,0x52,0xff,
    0xdb,0xb2,0x52,0xad,0x34,0xe9,0xb7,0xab,0x7e,0xbb,0xeb,0xb7,0xb7,0x7e,0xfb,0xe8,
    0xf7,0xa0,0xe2,0xb7,0x43,0x25,0xab,0xcb,0xf7,0x3d,0x6c,0xd0,0x61,0x5d,0xc7,0x9e,
    0x35,0xa2,0x6b,0x8f,0x7d,0xba,0xc1,0xce,0xe6,0x95,0xe6,0xba,0x3d,0x70,0xdf,0x2c,
    0xec,0xa7,0xc5,0x6f,0x52,0x94,0xd1,0x27,0x8e,0x1a,0x03,0xfc,0xd0,0xa2,0x1c,0x5e,
    0x94,0x17,0x0a,0x81,0x2d,0x0a,0x1b,0x49,0xdd,0x66,0xa5,0x72,0xa0,0x74,0xea,0x36,
    0x0b,0xf4,0xd0,0x7a,0x1b,0x95,0xca,0xb6,0xaa,0x1f,0xae,0xfa,0x76,0xf5,0x7a,0x73,
    0x5d,0xbf,0x22,0x0e,0xff,0x83,0xdb,0xbd,0x28,0xfd,0x8a,0x16,0x5f,0x15,0xb7,0x0b,
    0x7f,0x36,0x60,0x4d,0xc2,0x12,0x87,0x55,0x85,0x45,0x87,0x35,0x0b,0xdb,0xcc,0x61,
    0x89,0xb0,0x2d,0x1c,0x96,0x0a,0xfb,0x96,0xc3,0x32,0x61,0xdb,0xa8,0x9f,0xd6,0x46,
    0xbd,0x9f,0x85,0x91,0x9d,0x2b,0xae,0xdf,0x45,0xbd,0x93,0xab,0x1f,0x95,0x6e,0xcc,
    0xa3,0xde,0x69,0x83,0x4f,0x9a,0xeb,0xf5,0x8e,0xe2,0x86,0xa7,0x1c,0x73,0x47,0x71,
    0xd7,0xe4,0xd4,0xdb,0xba,0x68,0x0d,0xed,0x75,0x2a,0x30,0x8c,0x03,0xff,0x7f,0xbb,
    0x90,0x47,0xbf,0xbe,0x27,0x5b,0xdf,0x2d,0xea,0xa1,0xc2,0xbe,0x1a,0xdf,0x41,0x7c,
    0xa5,0xfe,0x9b,0xd4,0xc7,0x1e,0xe4,0x73,0xc8,0x6f,0xa9,0xff,0xab,0xe2,0xb7,0x12,
    0xbf,0xa5,0xea,0xdf,0x55,0x1d,0x36,0xbf,0x53,0xb4,0xbc,0x83,0xec,0x41,0x77,0xc7,
    0xe2,0x17,0xf5,0x66,0xd5,0xbb,0xc8,0x56,0xb3,0x74,0xbb,0x4a,0x37,0x88,0xdf,0x5b,
    0x7c,0x52,0xf7,0x2d,0xe3,0x10,0xf8,0x0f,0x65,0x3f,0x91,0xde,0x21,0x1a,0x0f,0xec,
    0xf5,0x52,0xfd,0x50,0x61,0x7b,0x6a,0xcc,0xfd,0x35,0xb7,0xc6,0x1f,0xee,0x78,0xb4,
    0x31,0xc0,0x8d,0x79,0xa0,0xb8,0x0e,0x8e,0x1f,0xa4,0xf6,0xac,0x3e,0xb8,0x1e,0xd7,
    0xa5,0xfd,0x21,0x8e,0x47,0xbd,0xa5,0xa1,0xfd,0x56,0xf9,0xcc,0xf4,0x47,0x35,0xf0,
    0x6d,0xf2,0x83,0xf1,0xed,0xea,0xaf,0xd5,0xc7,0x2b,0xe6,0xac,0x7e,0xa1,0x62,0xeb,
    0x07,0x85,0xb7,0xe0,0xa7,0x8b,0x34,0x86,0x76,0xc9,0x5e,0xe8,0x64,0x2f,0x29,0xca,
    0xbf,0x5c,0xfd,0xaa,0x86,0xbe,0x5c,0xe7,0xda,0x46,0x5f,0xa6,0x15,0x65,0x2f,0x57,
    0x9f,0xa1,0xb6,0xac,0xfe,0x90,0x62,0xdd,0xea,0x33,0x5d,0xdf,0x50,0x9f,0x55,0xe1,
    0x9a,0xb0,0xfa,0xec,0xa2,0xec,0x54,0x94,0xed,0x8b,0xfa,0x82,0xe2,0xf7,0x87,0xea,
    0xa3,0xf1,0x0b,0xeb,0xf9,0x82,0x63,0x01,0xb7,0x48,0xfe,0x9a,0xa5,0x79,0x5b,0xe8,
    0x64,0x17,0x6b,0xee,0xad,0xbe,0xa4,0x28,0xb9,0xab,0x2f,0xd5,0x7a,0x35,0x5b,0x2f,
    0xca,0xd6,0x62,0xc9,0x2e,0x75,0xb2,0xcb,0x14,0x6b,0x26,0xbb,0x5c,0xf3,0x36,0x44,
    0xdc,0x52,0xc7,0xad,0x10,0xd7,0xa6,0x7e,0x79,0x3b,0x2b,0x15,0x2b,0x26,0xfb,0x92,
    0xeb,0xff,0x32,0xf1,0x26,0xfb,0x72,0x51,0x6a,0x4e,0xf6,0x15,0xd7,0xbf,0xfe,0xe2,
    0x8d,0x5b,0xa5,0xf6,0x16,0xcb,0x8e,0xe7,0x5e,0x95,0xde,0x90,0x4d,0x70,0xaf,0xa9,
    0xaf,0xd6,0xfe,0x12,0xc7,0xbd,0xde,0x30,0x46,0xcf,0xad,0x76,0x63,0x6c,0xe4,0xde,
    0x70,0x7a,0x8b,0x1b,0xb8,0xbf,0xab,0x2f,0x6d,0x8e,0xb3,0xf1,0xae,0xd1,0xba,0x32,
    0xd9,0xb5,0xc2,0x5a,0xa4,0xe3,0xed,0xbc,0xe9,0xfc,0xbb,0x4c,0xfe,0x30,0xee,0x2d,
    0x37,0xde,0xc5,0x1b,0xb8,0xad,0xeb,0xf1,0xb4,0x4e,0x31,0xf3,0xa2,0xe6,0x70,0x85,
    0xe6,0xe0,0x15,0xf9,0xf0,0x55,0xf9,0xe4,0x75,0x8d,0xf1,0x0d,0xf5,0x79,0xad,0xda,
    0x7c,0x4b,0xeb,0xfe,0x5d,0xc5,0xc3,0x02,0xd7,0xff,0xaf,0xdc,0xda,0x41,0xee,0xea,
    0x58,0xdf,0x53,0x0e,0x3c,0xd0,0xea,0xdb,0x71,0x8f,0x39,0x00,0x79,0xa9,0xab,0xf2,
    0x7e,0xb3,0x93,0x1f,0xab,0x3d,0xc8,0xea,0xbf,0xad,0xd7,0x2f,0x3e,0xc0,0xea,0xd3,
    0xeb,0xf5,0x8b,0x0e,0xb6,0xfa,0x8c,0xa2,0x7e,0xf9,0x77,0x6e,0xda,0xdf,0xea,0xf7,
    0x15,0xf5,0xdb,0x0f,0xf9,0xce,0x06,0xf9,0xfb,0x8b,0xfa,0xe2,0x71,0x6f,0xf6,0xfe,
    0x41,0xd1,0x12,0xf2,0xe9,0xef,0x9b,0xa8,0x03,0x39,0x70,0x26,0x37,0xab,0xf8,0xbf,
    0x6d,0xab,0xe6,0x03,0x7a,0x29,0x9f,0xbd,0xa0,0x7d,0x6f,0xc7,0x62,0xb5,0xd8,0xfe,
    0xf4,0xef,0x0a,0x7c,0xf1,0x5a,0x13,0xd7,0x15,0x64,0x7b,0xa9,0xfe,0xba,0x30,0xf0,
    0xab,0xf5,0x3f,0xe4,0xf7,0x28,0x46,0x8c,0xdc,0xdc,0xa1,0x8a,0xbd,0x97,0xff,0xef,
    0x5c,0x2d,0xf3,0x4b,0x97,0x2a,0xd6,0x7e,0x59,0xdf,0xb5,0x5a,0xe6,0x0f,0xd4,0x77,
    0xab,0xda,0x9a,0xcd,0xea,0x39,0x7c,0xf7,0x2a,0x75,0x20,0xb7,0x5b,0xb5,0x9c,0x8b,
    0x6e,0xd5,0x8d,0x73,0x6e,0x8f,0x2a,0xf7,0x1d,0xab,0xef,0x57,0xe5,0xb9,0xc0,0xea,
    0x7d,0xab,0xd8,0x07,0xcb,0x76,0x46,0x56,0xcb,0x3c,0x74,0x53,0x95,0x7d,0x6f,0x77,
    0xf2,0x37,0x57,0x2b,0xf5,0xfd,0xcb,0xea,0xb7,0x54,0xb9,0x77,0x59,0x7d,0x4a,0x95,
    0x67,0x0b,0xab,0xdf,0x5a,0xe5,0x79,0xe5,0x07,0x85,0x75,0xd8,0xfb,0x6d,0xb5,0x5c,
    0x03,0x2b,0x95,0x17,0x61,0x13,0x76,0xa0,0x7b,0x6b,0x95,0xbe,0x9b,0x5a,0x65,0x9c,
    0x41,0x07,0x63,0x46,0xdc,0x2c,0xab,0x72,0x5d,0x58,0x31,0x7c,0x79,0x95,0x31,0x68,
    0xc5,0xda,0xde,0xa9,0x99,0xa7,0x2b,0xab,0xef,0xdc,0xcc,0x0d,0xc5,0xea,0xe7,0x35,
    0xf3,0x4c,0x60,0xf5,0x89,0x45,0x7d,0x2b,0x57,0x9f,0x5e,0xd4,0xbf,0x21,0x5f,0xfc,
    0x47,0xc2,0xfe,0xb4,0xd7,0xdb,0x4d,0xeb,0xff,0x1f,0x9d,0x70,0xbd,0xf5,0x77,0xd8,
    0x31,0x09,0xd7,0x66,0x0f,0x37,0x27,0x83,0x13,0xee,0xe9,0x26,0x73,0x6c,0xc2,0x35,
    0x0d,0xdc,0x64,0x8e,0x4b,0x10,0x23,0xa5,0xcc,0x90,0x84,0xed,0x1f,0xe7,0x64,0x8e,
    0x2f,0xfe,0xdf,0xcf,0xc9,0xb4,0x24,0xec,0xf3,0xf1,0x4e,0x66,0x68,0xf1,0xff,0x40,
    0x27,0x73,0x42,0xc2,0xbd,0x69,0xa8,0x93,0x39,0x51,0x67,0x29,0xab,0x0f,0x2b,0xea,
    0xa7,0x38,0x9d,0xe1,0x09,0x65,0x86,0x39,0x9d,0x11,0xc5,0xff,0x7b,0xfb,0xbd,0x3a,
    0xe1,0xdc,0x99,0xce,0x49,0x09,0x65,0x80,0x63,0xae,0xe1,0xaf,0x91,0x09,0x7d,0x04,
    0x9f,0x60,0xcc,0x18,0x13,0xfa,0x8c,0x3e,0xa1,0x0d,0xe8,0x60,0xae,0x4f,0x91,0x6f,
    0xa1,0x83,0x1c,0x71,0x57,0xf1,0xdb,0x5d,0xfb,0x6f,0xc7,0x62,0x05,0x3d,0x9f,0x70,
    0xef,0x48,0x2b,0x1b,0xff,0x29,0x6d,0x14,0xf1,0xdc,0x5c,0xf9,0x6b,0x21,0xf3,0xbc,
    0xec,0xcd,0x4f,0x88,0x03,0xeb,0xa5,0xfa,0x0b,0xc2,0x60,0xef,0x48,0x9d,0x07,0x9b,
    0x1a,0xec,0xd8,0xf9,0x16,0x36,0x06,0xa9,0x31,0xc8,0xf6,0x52,0xfd,0xa8,0xb4,0xcc,
    0x53,0xd0,0x1f,0x96,0x5a,0x6c,0x73,0x4d,0xe2,0x9c,0x09,0x6c,0x94,0xce,0x2e,0xe6,
    0x9b,0x53,0x6b,0x8c,0x11,0x1f,0x27,0xa7,0xd5,0x18,0x3b,0xad,0x0e,0x1b,0x5d,0xe3,
    0xda,0x68,0x73,0x67,0x96,0x31,0x35,0x9e,0x4d,0x7c,0xb1,0xb8,0x6f,0x73,0xf2,0x6d,
    0x0e,0x3f,0xdd,0xd9,0x6e,0x75,0xf8,0x19,0x35,0xc6,0xa5,0x15,0xc3,0xcf,0xac,0x31,
    0x6f,0x58,0xb1,0xf1,0x8c,0xad,0x31,0xde,0xdb,0x37,0xc4,0x3d,0xe5,0xcf,0xaa,0x71,
    0x8f,0xb1,0xd2,0x54,0xf8,0x1f,0xf8,0xef,0x6a,0xfc,0x1f,0xfd,0x5e,0x54,0xe3,0x5c,
    0x7e,0x5e,0xe3,0x5c,0x62,0xe9,0xf5,0x2c,0xc6,0x59,0xd5,0x19,0xb0,0x22,0xec,0xb3,
    0x02,0x49,0x75,0xe6,0xc4,0xde,0xf2,0xf3,0xc8,0x58,0xe8,0xa5,0x73,0xf3,0xa4,0xb4,
    0xac,0x23,0x27,0xdc,0xd7,0x50,0x7f,0xca,0xd5,0x11,0x47,0x8b,0x5c,0x1d,0x67,0xe5,
    0xd5,0x8a,0xad,0x4f,0x8b,0xd6,0x46,0x68,0xfe,0xbe,0x2c,0xfe,0xc7,0x39,0xb0,0x35,
    0x65,0xfb,0xf8,0xed,0xad,0xb3,0xf6,0x69,0x29,0xcf,0xc5,0x03,0x0a,0x2d,0xe4,0xcd,
    0xd1,0x29,0xb1,0xd3,0xd2,0x32,0x56,0xda,0x75,0x4d,0x30,0x26,0x25,0x7f,0xa9,0xe6,
    0xef,0xf4,0x94,0x18,0xe6,0xbb,0x4f,0x81,0x61,0x1d,0x9e,0x91,0xf2,0x1c,0x8d,0xf6,
    0x7a,0x2b,0x6e,0xce,0x4c,0x89,0xcf,0x29,0x64,0x50,0x1f,0x9b,0x12,0x1b,0x24,0xdb,
    0x58,0x5f,0x67,0xa5,0xc4,0xff,0x22,0x99,0x73,0x25,0x33,0xd8,0xc9,0x8c,0x4b,0x89,
    0x43,0x06,0xf5,0xf3,0x53,0xea,0xe1,0xdc,0x70,0xa9,0xb0,0x0b,0x52,0xce,0x11,0xb8,
    0x23,0x84,0x8d,0x4f,0xd9,0xd7,0xfa,0x2e,0x2b,0xec,0xc2,0x94,0x38,0xe4,0x8f,0x2c,
    0x10,0x8c,0xe7,0xdd,0x9c,0xb8,0xc9,0x5a,0x3b,0x97,0xa8,0x9d,0x56,0xd7,0xce,0x04,
    0xd5,0x2f,0x71,0xed,0x5c,0x2a,0xdd,0x26,0xd7,0xce,0x65,0x29,0xf1,0x09,0xae,0x9d,
    0x0f,0x72,0xe2,0x68,0xaf,0xc9,0xb5,0xf3,0xeb,0x94,0x63,0x44,0x6c,0x3f,0x2d,0xec,
    0x37,0xc2,0xd0,0xd6,0x40,0xf9,0xfd,0xca,0x94,0xb2,0xe0,0x2e,0x16,0xf6,0x9f,0x29,
    0xed,0x82,0xc3,0x5c,0x60,0x2f,0xbe,0x2d,0xe1,0xfe,0xdc,0xa6,0xb9,0x80,0xbd,0xdb,
    0x13,0xe2,0x26,0x73,0x87,0x64,0x86,0x38,0x99,0x69,0x09,0x71,0x6b,0xef,0xce,0x84,
    0x7a,0xc0,0x1f,0x28,0x30,0xe4,0xab,0xe9,0x09,0xdb,0x04,0x77,0x73,0xa1,0x87,0x98,
    0xbf,0x5b,0x38,0x62,0xef,0x5e,0x05,0xfd,0x17,0x05,0x07,0xfc,0x9e,0xa2,0x00,0x43,
    0xfc,0xe1,0xff,0xcf,0x8b,0xdf,0x11,0x8a,0x47,0xe0,0x4f,0xab,0xad,0x07,0x64,0x17,
    0xf9,0xe2,0x2f,0xc2,0x1e,0x16,0x86,0x7c,0x61,0xbe,0x7e,0x2c,0x21,0x5e,0x71,0x73,
    0x32,0x33,0xe1,0x38,0xc0,0x99,0xdc,0x13,0x92,0xf3,0x73,0xf2,0x64,0x42,0x59,0x70,
    0xa6,0xfb,0x3f,0xd2,0x05,0x66,0x72,0xb3,0x13,0xe2,0x8f,0x25,0xe5,0x7c,0xcc,0x93,
    0x2f,0x5a,0xdd,0x1c,0x3d,0x23,0xdf,0xf8,0xf8,0x78,0x36,0xa1,0x2c,0x38,0xf8,0x15,
    0xb9,0xf9,0x6f,0xca,0xcb,0xb6,0x56,0x16,0x26,0x5c,0x7b,0x57,0xb9,0xb5,0xb2,0x28,
    0x21,0x6e,0x31,0xbf,0x38,0x21,0x66,0x76,0x97,0x24,0xb4,0xbd,0xd8,0x8d,0xf1,0xc5,
    0x84,0x7e,0x6b,0x72,0xed,0x2f,0x4f,0x88,0xcf,0x73,0xe3,0x59,0x91,0x50,0x7f,0xb9,
    0xd3,0x7d,0x49,0xba,0x7e,0x6d,0xbc,0x9c,0x50,0x16,0xdc,0x88,0xa2,0x1f,0xd8,0x67,
    0x5e,0x51,0xff,0x87,0x16,0x32,0xc8,0x77,0xab,0x84,0x41,0x76,0xff,0x62,0xbe,0x57,
    0xcb,0xcf,0x16,0x57,0x4b,0x53,0xc6,0xd5,0x2c,0x17,0x57,0x2f,0xa6,0xc4,0xef,0x2d,
    0x64,0x10,0x2f,0xcb,0x52,0x62,0xfd,0x95,0xaf,0xd6,0xa6,0x65,0xcc,0x80,0x5b,0x5e,
    0x94,0xd5,0x8a,0x91,0xe5,0x5a,0x67,0xf0,0xd1,0xe6,0x91,0xed,0x37,0xd5,0xd7,0x04,
    0xf7,0x8d,0x6d,0x22,0x71,0x5f,0xe6,0xa8,0xaf,0x1d,0x23,0xf9,0x8b,0xb4,0xd6,0x80,
    0x6d,0x1f,0x89,0x8f,0xa9,0x95,0x76,0x77,0x8c,0xc4,0xf1,0x37,0x57,0xd8,0x4e,0x91,
    0x38,0xae,0x9d,0x4d,0xae,0x93,0xe4,0x9a,0x9c,0xdc,0xce,0x91,0x38,0xae,0x61,0xe7,
    0x09,0xdb,0x25,0x52,0x1f,0x9c,0xe9,0x76,0x96,0x6e,0xd5,0xe9,0x76,0x89,0xc4,0xdb,
    0x9d,0xee,0xae,0x91,0xfa,0x5d,0x9c,0xee,0xee,0xd2,0x6d,0x76,0xba,0x7b,0x44,0xe2,
    0x03,0x9c,0xee,0x9e,0x91,0xfa,0x7b,0x38,0xdd,0x2d,0xe5,0xb3,0x8a,0xf3,0x59,0xb7,
    0x48,0xdc,0x17,0xf3,0x59,0xf7,0x48,0xde,0xfb,0xac,0x47,0x24,0xee,0x7d,0xd6,0x33,
    0x12,0xf7,0x3e,0xfb,0x51,0x24,0xee,0x7d,0xf6,0x13,0xc9,0x79,0x9f,0xed,0x1b,0x89,
    0x7b,0x9f,0xf5,0x8a,0xd4,0xdf,0xd7,0xf5,0xbd,0xb7,0x74,0xbd,0xcf,0xf6,0x8f,0xc4,
    0xbd,0xcf,0x0e,0x88,0xd4,0xdf,0xdf,0xe9,0xf6,0x91,0xae,0xf7,0xd9,0x4f,0x23,0x71,
    0xef,0xb3,0x83,0x22,0xf5,0xc1,0x21,0xef,0x61,0x2f,0xdc,0x3a,0xd2,0x97,0xe0,0x10,
    0xe3,0xd8,0x9b,0x81,0xd9,0x1a,0x1b,0x18,0x99,0x5b,0x91,0x4f,0x26,0x08,0x3b,0x22,
    0xf2,0x5e,0x09,0x38,0xac,0x05,0x5c,0xc3,0x1c,0x19,0xb9,0xaf,0x8f,0x72,0xeb,0x7c,
    0x50,0x24,0xfe,0x6c,0xa1,0x85,0xfa,0x51,0x91,0xd8,0x0c,0x9d,0x9b,0x6c,0xfd,0xff,
    0x32,0x92,0x33,0xbd,0xa3,0x1b,0xf4,0x8e,0x89,0xc4,0x1e,0xd2,0xd9,0xc4,0xf4,0x06,
    0x47,0x72,0xa6,0x77,0x5c,0x83,0xde,0x90,0x48,0x6c,0x66,0x83,0xde,0xf1,0x91,0x9c,
    0xe5,0xb6,0xa1,0x91,0x63,0xc2,0x3a,0xb6,0xf1,0x9c,0xa0,0xf1,0x0c,0x75,0xf6,0x4f,
    0x8c,0xc4,0x6d,0x2f,0x1b,0x2e,0x3d,0xdc,0xe7,0xb1,0x36,0x47,0x44,0xca,0x81,0x6b,
    0x75,0x6d,0xb6,0x46,0x72,0xe6,0xc3,0x91,0x91,0x67,0xeb,0x81,0xae,0x1f,0xa3,0x22,
    0x71,0xdf,0x8f,0x53,0xcc,0xaf,0xae,0x1f,0xa7,0x46,0xe2,0xd6,0x8f,0xd1,0xd2,0x43,
    0x3f,0xec,0xfc,0x31,0x26,0x52,0x6e,0x74,0x2c,0xcf,0x1b,0x6d,0x91,0xf8,0x28,0xd7,
    0xaf,0xd3,0x23,0x71,0xcc,0x3d,0xce,0x69,0xeb,0xea,0x6d,0x67,0xf5,0xeb,0xc1,0xb1,
    0x91,0x67,0x37,0xf8,0xab,0x35,0x96,0x39,0xee,0xac,0x48,0xce,0xc6,0x72,0x4e,0xa4,
    0x1d,0x9c,0x51,0xfe,0x57,0xd8,0xb9,0x91,0x72,0xe7,0xb8,0x58,0xba,0x20,0x12,0xc7,
    0xbc,0x59,0x1e,0x6e,0x8f,0x9c,0x7f,0x70,0x9b,0x55,0x22,0xcf,0x2d,0x5a,0x43,0x7b,
    0x89,0x5f,0xa3,0x6b,0x40,0x8b,0xf7,0x4b,0xb5,0xce,0x9b,0xdd,0x3a,0xbf,0x3a,0x12,
    0xf7,0xc5,0xd6,0xf9,0x35,0x91,0xbc,0x5f,0xe7,0x93,0x22,0x71,0xbf,0xce,0xaf,0x8f,
    0xc4,0xfd,0x3a,0xff,0xef,0x48,0xdc,0xaf,0xf3,0xc9,0x92,0xf3,0xeb,0xfc,0xc6,0x48,
    0xdc,0xaf,0xf3,0x9b,0x22,0xf5,0x6f,0x74,0x6b,0xf5,0x16,0xe9,0xfa,0x75,0x3e,0x25,
    0x12,0xf7,0xeb,0xfc,0xd6,0x48,0xfd,0x29,0x4e,0xf7,0x77,0xd2,0xf5,0xeb,0x7c,0x6a,
    0x24,0xee,0xd7,0xf9,0x6d,0x91,0xfa,0x53,0x9d,0xee,0xe5,0xf2,0x59,0xd5,0xf9,0xec,
    0xae,0x48,0xdc,0x17,0xf3,0xd9,0xf4,0x48,0xde,0xfb,0xec,0xde,0x48,0xdc,0xfb,0xec,
    0xbe,0x48,0xdc,0xfb,0xec,0xfe,0x48,0xdc,0xfb,0xec,0x01,0xc9,0x79,0x9f,0x3d,0x18,
    0x89,0x7b,0x9f,0x3d,0x14,0xa9,0xff,0xa0,0xeb,0xfb,0xc3,0xd2,0xf5,0x3e,0x7b,0x24,
    0x12,0xf7,0x3e,0x7b,0x34,0x52,0xff,0x11,0xa7,0x3b,0x53,0xba,0xde,0x67,0x8f,0x47,
    0xe2,0xde,0x67,0x4f,0x44,0xea,0x3f,0xee,0x72,0xe3,0x15,0x91,0xbe,0x04,0x87,0xb3,
    0xdc,0x5a,0xed,0xd3,0xab,0xdd,0x3e,0xfd,0xa7,0x4d,0xec,0xd3,0xff,0x17,0x89,0xfb,
    0x62,0x7e,0x7d,0x26,0x92,0xf7,0x7e,0x7d,0x3e,0x12,0xf7,0x7e,0x9d,0x1f,0x89,0x7b,
    0xbf,0xbe,0x10,0x89,0x7b,0xbf,0x2e,0x90,0x9c,0xf7,0xeb,0xc2,0x48,0xdc,0xfb,0x75,
    0x51,0xa4,0xfe,0x42,0xe7,0x9b,0x25,0xd2,0xf5,0x7e,0x5d,0x1a,0x89,0x7b,0xbf,0xbe,
    0x18,0xa9,0xbf,0xd4,0xe9,0x2e,0x97,0xae,0xf7,0xeb,0x8a,0x48,0xdc,0xfb,0x75,0x65,
    0xa4,0xfe,0x0a,0xa7,0x3b,0x67,0x13,0xfb,0xf4,0xab,0x91,0xf8,0x46,0x45,0xfe,0x79,
    0x2d,0x92,0xf7,0x3e,0x7b,0x23,0x12,0xf7,0x3e,0x5b,0x13,0x89,0x7b,0x9f,0xad,0x8d,
    0xc4,0xbd,0xcf,0xde,0x92,0x9c,0xf7,0xd9,0xba,0x48,0xdc,0xfb,0xec,0xed,0x48,0xfd,
    0x75,0xae,0xef,0xef,0x4a,0xd7,0xfb,0xec,0xbd,0x48,0xdc,0xfb,0xec,0xfd,0x48,0xfd,
    0xf7,0x9c,0xee,0x87,0xd2,0xf5,0x3e,0x5b,0x1f,0x89,0x7b,0x9f,0x7d,0x14,0xa9,0xbf,
    0xde,0xc5,0xe2,0xdc,0x48,0x5f,0x7e,0xd4,0x10,0x8b,0xf8,0xfd,0xb8,0xf0,0x21,0xf2,
    0xe6,0xa3,0x35,0xe6,0x4e,0x9c,0x23,0x91,0x2f,0x57,0x8b,0x83,0xfe,0x39,0x35,0xc6,
    0x33,0x38,0xd8,0xf2,0x31,0xfc,0x56,0x4a,0xde,0xae,0xd3,0xea,0xfe,0x48,0x89,0x8f,
    0xd2,0x5e,0x84,0xfd,0xe0,0x9d,0x94,0xd7,0xde,0xeb,0xd2,0x72,0x2f,0x78,0x37,0x25,
    0x6e,0x7b,0xd1,0x7b,0x29,0x31,0x7f,0xed,0xf0,0x7e,0x4a,0xbc,0x45,0xfb,0x0e,0xec,
    0x7f,0x90,0x12,0xb7,0x73,0xf2,0x47,0x3a,0x27,0xb7,0xe8,0x9c,0xfc,0xa5,0x3b,0x27,
    0x83,0xfb,0xb8,0x28,0x5f,0x68,0xcc,0x1f,0xbb,0x6b,0xe8,0xcf,0xd4,0x4f,0x5c,0x5f,
    0x98,0xad,0xcf,0x53,0xe2,0xf0,0x29,0x7c,0xf5,0xa5,0xf4,0xa0,0xef,0xeb,0x5f,0xca,
    0x3f,0xd0,0x39,0xbf,0x46,0x3d,0xd8,0xc6,0xfd,0x5c,0xc8,0xce,0x90,0xbd,0x7f,0x36,
    0xf4,0x2d,0xc9,0xca,0xbe,0x81,0xfb,0x57,0x51,0x80,0xc1,0xe6,0xbf,0x5c,0xdf,0xaa,
    0xd9,0xd7,0xfb,0xd6,0x9c,0x11,0xb7,0xbe,0x99,0x1e,0x7e,0xad,0x2f,0x69,0xc6,0x36,
    0xd1,0x3f,0xc8,0xc3,0x26,0xda,0x9d,0x17,0xca,0x76,0x21,0x93,0x15,0xe5,0xdb,0xd2,
    0xcf,0xea,0x36,0x63,0xfd,0x7e,0x47,0xcc,0x38,0x9f,0x36,0xa7,0x56,0x2e,0x55,0xbf,
    0x6a,0x19,0xef,0x4b,0x60,0x0e,0x06,0xea,0xbe,0x50,0x87,0x8c,0xb8,0x15,0xec,0xed,
    0xc0,0x37,0xcb,0x78,0x5f,0x1a,0xfc,0x1c,0x61,0xdf,0xc8,0xd8,0x06,0xb8,0x76,0xdd,
    0xff,0xdf,0x3c,0x23,0x8e,0xb1,0xa3,0xbe,0x65,0x46,0x0c,0xf7,0xa1,0x2e,0x15,0xf6,
    0xad,0x8c,0x38,0xee,0x59,0x61,0xec,0x18,0x0f,0xfa,0x8e,0x31,0xd8,0xf9,0x69,0x1b,
    0xf9,0x0c,0xf7,0xb4,0x67,0xb9,0x73,0x4a,0xc7,0x8c,0x9c,0xd5,0xb7,0x97,0xdc,0x33,
    0x45,0x0d,0xf5,0x1d,0x32,0x62,0x33,0x74,0xdf,0xcc,0xec,0x7d,0x4f,0x72,0x7d,0x1b,
    0xec,0x75,0xca,0xc8,0x99,0x7e,0x67,0xe9,0xcf,0x6c,0xd0,0xdf,0x4d,0xfa,0x2b,0x2b,
    0x1b,0xeb,0xef,0x9e,0x91,0x33,0xfd,0xbd,0xa4,0xdf,0x5f,0xfa,0x76,0xbe,0xe9,0x96,
    0xb1,0xef,0xe8,0x9f,0x61,0x3f,0xcc,0xd8,0x7e,0x67,0x87,0xf5,0xcc,0x68,0x73,0xaf,
    0xac,0x5c,0x23,0x3f,0xce,0xa8,0x7f,0x9f,0x62,0xe7,0x27,0x19,0x31,0xdc,0xcf,0x47,
    0x3c,0xcc,0x75,0xf1,0x00,0x6e,0xdf,0xa2,0xdc,0xa8,0x78,0xd8,0xd7,0xf9,0xb4,0xb7,
    0xc6,0x30,0xa3,0xb2,0xf1,0x99,0x74,0xff,0x8c,0x9c,0xc9,0xf5,0x71,0xbe,0xf7,0x72,
    0x3f,0xcd,0xc8,0xcd,0x55,0x5f,0x0f,0xca,0x88,0xb5,0x2a,0x67,0x01,0x3b,0x38,0xa3,
    0xbd,0x83,0x9c,0xbd,0xbe,0xb2,0xd7,0x78,0x6e,0xef,0x97,0x91,0x33,0xb9,0x9f,0x4b,
    0xae,0xf1,0x9c,0x7e,0x58,0x46,0xce,0xe4,0x06,0x48,0x6e,0x69,0x83,0xdc,0xc0,0x8c,
    0x9c,0xc9,0x0d,0x92,0x5c,0xff,0x06,0xb9,0xa3,0x32,0x72,0x26,0x77,0xb4,0xe4,0x86,
    0x34,0xc8,0x1d,0x93,0x91,0x33,0xb9,0xe3,0x24,0x67,0xf7,0x5e,0x2d,0x77,0x0f,0xc9,
    0xc8,0xb5,0xb8,0xdc,0x7d,0x42,0x46,0x1c,0x39,0x12,0x67,0x6a,0xdc,0xdb,0xc4,0xf3,
    0x11,0xcb,0xa1,0xc3,0x32,0xde,0xef,0x84,0x9c,0xe5,0xd0,0xe1,0x19,0x71,0xcb,0xc7,
    0xad,0x5a,0xbf,0xfe,0x7e,0xc5,0xc8,0x8c,0xf7,0x71,0x71,0x1d,0x66,0x67,0xfc,0x93,
    0x33,0xca,0x8e,0xcc,0xca,0x9c,0x33,0x2a,0x23,0x7e,0x95,0x1b,0xcf,0x29,0x19,0xf1,
    0x0d,0xd7,0x06,0xd2,0x83,0xad,0x0d,0xd7,0x06,0x19,0xf1,0x8d,0xae,0x0d,0x32,0xe2,
    0x36,0xc7,0x63,0x33,0xda,0x02,0x8e,0xf8,0x1b,0xe7,0xf2,0x20,0xf2,0xe7,0xd9,0x45,
    0x7d,0x9c,0xe2,0x0f,0xff,0x5b,0xce,0x3b,0x37,0xa3,0x6e,0xab,0x72,0x9e,0xc9,0x8c,
    0x73,0x39,0xef,0xba,0x1a,0x73,0x30,0xe2,0x16,0xf2,0x5e,0xff,0x7c,0xe9,0xaf,0x51,
    0xfe,0x9d,0xec,0xdb,0x2d,0xfe,0xbf,0xa0,0x28,0x13,0x65,0x13,0xff,0x0f,0xd4,0x3d,
    0xed,0x8b,0x32,0xc6,0x25,0xe2,0x0d,0xb1,0x64,0x79,0x68,0x42,0x46,0xce,0xf2,0xd0,
    0x64,0xe9,0x4e,0xcc,0xca,0x6b,0x9a,0xcb,0xd4,0xdf,0xb1,0xce,0xde,0x15,0x19,0x63,
    0x0d,0x71,0x74,0x8c,0xb3,0x77,0x65,0x46,0xee,0x8c,0x5a,0x79,0xad,0x73,0x75,0x46,
    0x1b,0xc3,0x9d,0xfe,0x35,0x19,0x71,0x2b,0x17,0x4b,0xff,0xda,0x8c,0x36,0xc0,0xe3,
    0x1a,0x08,0xd8,0xa4,0xac,0xbc,0x06,0x02,0x8f,0xe7,0x64,0x78,0x26,0xe6,0xfb,0x3b,
    0x59,0xfe,0x83,0xfc,0xfd,0x35,0x8e,0x0b,0xe3,0x9f,0x24,0x7f,0x40,0x76,0xae,0x72,
    0xec,0x8d,0x2e,0xaf,0xdc,0x9c,0x31,0x07,0x59,0x5e,0xb9,0x25,0x23,0x66,0x79,0xe5,
    0x69,0x97,0x57,0xc0,0x4d,0xc1,0x3e,0x23,0x3b,0x53,0xdc,0xba,0xf8,0x9d,0xcb,0x17,
    0x7e,0xfd,0x4c,0xcd,0xc8,0x99,0xdc,0x1d,0x2e,0xff,0xb4,0x39,0xb9,0x69,0x19,0x39,
    0xcb,0x2b,0x77,0x66,0xc4,0x5a,0xdc,0x75,0xec,0xdd,0xd2,0xc5,0x33,0x51,0x8b,0xd5,
    0x7b,0x32,0xe2,0x3e,0x56,0xef,0xcd,0x88,0x5b,0xac,0xce,0xc8,0x68,0xef,0x5e,0xd7,
    0x8f,0xdf,0xcb,0x56,0xb7,0xea,0xc6,0xfd,0x78,0x20,0x23,0x67,0x6d,0xfe,0x41,0x72,
    0xe3,0xdd,0x79,0xe8,0xe1,0x8c,0x78,0xbb,0xd3,0x7b,0x24,0x23,0x6e,0x6d,0x3e,0x9a,
    0xd1,0xd6,0x23,0xae,0xcd,0xc7,0xdd,0xfe,0xe1,0x7d,0xf4,0x44,0x46,0xce,0xe4,0x66,
    0x49,0x6e,0x59,0x83,0xdc,0x53,0x19,0x39,0x93,0xfb,0xb3,0xe4,0xda,0x1a,0xe4,0x66,
    0x67,0xe4,0xac,0xbf,0x73,0x25,0x37,0xc8,0xed,0xfb,0xcf,0x28,0x2f,0xac,0xd3,0x3d,
    0x75,0x60,0xcf,0x66,0x94,0x7d,0x26,0x2b,0x63,0xf7,0xf9,0x8c,0x73,0x88,0x67,0xad,
    0x86,0xcd,0xcf,0xe8,0x53,0x3c,0x6f,0xb5,0x9c,0xf4,0x42,0x46,0xd9,0xf9,0x6e,0x1f,
    0x5b,0x90,0x11,0x7f,0xd4,0xd9,0x5b,0x94,0x71,0xbc,0xde,0xde,0x92,0x8c,0x63,0xf3,
    0xf6,0x96,0x66,0x94,0x5d,0xe2,0xec,0x2d,0xcb,0x88,0x63,0x7c,0x0f,0x28,0x5e,0x97,
    0x67,0x6c,0x07,0xdc,0x3d,0xf2,0xcb,0x8a,0x8c,0xf8,0x28,0x3d,0x97,0xb1,0xf1,0xbd,
    0x94,0x71,0x8c,0xe0,0x91,0x8f,0x9f,0x6a,0xc8,0xc7,0xaf,0x64,0x7c,0xde,0xf4,0x92,
    0xcb,0xc7,0xab,0x32,0xe2,0x96,0x8f,0x5f,0xdb,0x44,0x3e,0x5e,0xbd,0x89,0x7c,0xfc,
    0x46,0x46,0xd9,0xd5,0x6e,0x1e,0xfe,0x9e,0x11,0xf7,0xf9,0x78,0x4d,0x46,0xdc,0xf4,
    0xd6,0x49,0xcf,0xe7,0xe3,0xb7,0x33,0xe2,0x3e,0xc6,0xdf,0xc9,0x88,0x63,0x8d,0x7e,
    0xd4,0x90,0x7b,0xdf,0x2b,0xea,0x1f,0x29,0x2f,0xbc,0xe7,0xfc,0xf7,0x61,0xc6,0xf6,
    0xde,0x71,0xf9,0x74,0x7d,0x46,0xdc,0xf2,0xb1,0xe9,0x7d,0xe4,0xf2,0xf1,0xf5,0xca,
    0xc7,0x58,0xef,0x90,0x7f,0x2f,0x2b,0xcf,0xc3,0x9f,0xc8,0xa6,0xe5,0xe3,0x26,0x97,
    0x2f,0xc0,0x7d,0x5a,0x94,0xaf,0x64,0xf3,0x53,0x97,0xff,0xbe,0x54,0x1c,0x3c,0xa5,
    0xf9,0x44,0xdb,0x4d,0xca,0x2b,0x5f,0x39,0x39,0x3c,0x10,0x99,0xaa,0x78,0x7b,0xb4,
    0x41,0x0e,0xbf,0x96,0xf3,0x2e,0xa8,0xd1,0x26,0xda,0x80,0xce,0x57,0x2e,0x27,0xa7,
    0x81,0xbc,0xcf,0xc9,0x21,0x70,0xcc,0xef,0xb8,0x3c,0x1f,0x03,0xf3,0x0d,0x38,0x93,
    0xeb,0x10,0x88,0xaf,0x72,0x7d,0xfa,0x46,0x20,0x6e,0xc5,0x72,0xf7,0xe6,0x81,0x6d,
    0x81,0xb7,0xdc,0xbd,0x45,0x28,0x73,0x37,0x78,0x9f,0xbb,0x9f,0xb6,0x33,0x6f,0x28,
    0xf3,0xf1,0x77,0x03,0xcf,0x7f,0x96,0x8f,0xb7,0x09,0xc4,0x2c,0x1f,0xcf,0x71,0xfe,
    0x05,0xd7,0xb1,0x28,0xf7,0xcb,0x0e,0xfe,0xb7,0xdc,0xb0,0x7d,0xe0,0x9a,0xc7,0x3b,
    0x10,0x8b,0x5d,0xdc,0xec,0x10,0xc8,0x6d,0x38,0x13,0x4b,0x0e,0xcf,0x8b,0xbd,0x5c,
    0xa7,0x40,0xce,0xe2,0xf2,0xfb,0x92,0xc3,0xfb,0x08,0x26,0xd3,0x39,0x10,0xb7,0xeb,
    0xbd,0x2e,0x81,0x18,0xde,0xf1,0xb0,0x3c,0xb8,0x6b,0xa0,0xad,0x2e,0xae,0xcd,0x3d,
    0x42,0x99,0xdf,0x7c,0xee,0xdd,0x33,0x90,0x33,0xb9,0xae,0xa1,0xcc,0x97,0xfe,0x0c,
    0xba,0x77,0x20,0x67,0x7b,0x45,0xb7,0x40,0xac,0xcd,0x9d,0x41,0xbb,0x07,0xda,0xeb,
    0xe6,0xc6,0xd0,0xc3,0xd9,0x33,0x5b,0xfb,0x04,0xe2,0x36,0x86,0x9e,0x81,0xd8,0x2d,
    0x6e,0x0c,0x3f,0x0a,0xb4,0xd7,0x33,0x94,0x7a,0xbd,0x02,0x73,0xa7,0xf5,0x75,0xff,
    0x50,0x9e,0x0b,0xfd,0xb5,0xc1,0x01,0x81,0x9c,0xf5,0xf5,0xc0,0x40,0xac,0xc5,0xf5,
    0xb5,0x4f,0xa0,0x3d,0x70,0x96,0x67,0x0e,0x0a,0x65,0x9e,0xb1,0x36,0x0e,0x0e,0xc4,
    0xa7,0x37,0xcc,0xe9,0x21,0x81,0x9c,0xc9,0xf5,0x93,0x1c,0xe6,0x7e,0x99,0x93,0xfb,
    0x59,0x20,0x67,0x72,0x87,0x49,0xce,0xde,0xad,0x33,0xb9,0x5f,0x04,0x72,0x26,0x37,
    0x50,0x72,0x7d,0x1b,0x62,0xe4,0x88,0x40,0x6e,0xc3,0x3d,0x7d,0xc9,0xad,0xa9,0x6c,
    0x2c,0xf7,0xcb,0x40,0xce,0x7c,0x70,0x74,0x60,0x1c,0xfa,0xfb,0x02,0x83,0x85,0x0d,
    0x71,0x7e,0x39,0x36,0x50,0x76,0xb0,0xd3,0x1d,0x12,0xe8,0x2f,0xaf,0xdb,0x22,0xcc,
    0xeb,0x0e,0x0d,0x94,0x6d,0x71,0xba,0x27,0x06,0xfa,0xca,0xeb,0x0e,0x17,0xe6,0x75,
    0x47,0x04,0xca,0x0e,0x77,0xba,0x27,0x05,0xc6,0x72,0x8b,0xd3,0x3d,0x59,0xd8,0x62,
    0xa7,0x3b,0x2a,0x50,0xf6,0x64,0xa7,0x7b,0x6a,0xa0,0xef,0xbd,0xee,0x68,0x61,0x5e,
    0x77,0x4c,0xa0,0xec,0x68,0xa7,0x7b,0x7a,0xe0,0x7c,0x78,0xdd,0x33,0x85,0x79,0xdd,
    0xb1,0x81,0xb2,0x67,0x3a,0xdd,0xb3,0x03,0x63,0xd7,0x8f,0xf7,0x5c,0x61,0x7e,0xbc,
    0xe3,0x02,0x65,0xcf,0x75,0xba,0xe7,0x07,0xce,0xaf,0xd7,0x6d,0x17,0xe6,0x75,0xc7,
    0x07,0xca,0xb6,0x3b,0xdd,0x8b,0x02,0xe7,0xdc,0xeb,0x5e,0x22,0xcc,0xeb,0x4e,0x08,
    0x94,0x05,0x67,0xb9,0xf5,0x57,0x81,0xf3,0x0e,0x3f,0x8e,0x73,0xf8,0x6f,0x02,0xe7,
    0x14,0x3e,0x42,0x9b,0x13,0x94,0x73,0xaf,0x0a,0xe4,0x7e,0xe5,0x64,0xaf,0x0d,0x9c,
    0x43,0xf8,0x64,0x82,0x93,0x9d,0x14,0xc8,0x41,0xd6,0xf6,0xfc,0xff,0x0a,0xbc,0x8f,
    0x35,0xc0,0x3d,0xb7,0xbd,0x3e,0x10,0x37,0x7b,0x37,0x04,0x62,0x56,0x6c,0x5f,0x99,
    0x1c,0xd8,0xfe,0x0d,0xce,0xde,0x8d,0xb2,0x37,0xca,0xd9,0xbb,0x29,0x10,0x37,0x7b,
    0xb7,0x04,0x62,0x56,0xcc,0xde,0x94,0xc0,0x3e,0xde,0xe2,0xf6,0x94,0xa9,0x81,0xed,
    0x4c,0x71,0xd8,0xed,0x81,0x38,0xde,0x03,0x7a,0x5a,0xd8,0xb4,0x40,0x1c,0x98,0xc9,
    0xdd,0xa9,0xb1,0x4e,0x73,0xfb,0xd1,0x74,0xb7,0x1f,0xdd,0xd9,0xb0,0x1f,0xcd,0xd1,
    0x3e,0x72,0xbf,0xeb,0xeb,0x43,0x81,0xf7,0x2c,0x3a,0xe9,0x9e,0x84,0xad,0xe9,0x87,
    0x43,0x79,0xcf,0x08,0x72,0x33,0x03,0xef,0x6b,0x74,0xd6,0x7d,0x0b,0xc3,0x1f,0x0f,
    0x94,0xb5,0x62,0x63,0x7d,0x22,0x90,0x9b,0xe9,0xc6,0xf5,0x64,0x60,0x7b,0x4f,0x28,
    0x96,0x80,0x3d,0x15,0x88,0xb7,0xb9,0xb1,0xfe,0x59,0x18,0xc6,0x3a,0x4f,0xd8,0xec,
    0x40,0x59,0x70,0x7e,0x2c,0x73,0xdc,0x19,0xe1,0x81,0x1a,0xc7,0x8f,0x7d,0x12,0xef,
    0x32,0xdd,0xef,0xb8,0x3b,0x6a,0xc4,0xc0,0xcd,0xd6,0x9e,0x8a,0xf3,0x64,0xfd,0x8c,
    0x53,0xe3,0x3e,0x8c,0x7b,0x81,0x38,0x07,0x19,0xfe,0xa9,0xc3,0x77,0x6e,0xd8,0xd3,
    0x9f,0x76,0xb6,0x7f,0x5f,0xd3,0x39,0x20,0xb0,0x0f,0xbe,0x4f,0x53,0xd5,0x2e,0xb8,
    0x3b,0x1c,0x07,0xfb,0x93,0x6a,0x3c,0x7b,0x81,0xfb,0xa4,0x81,0x9b,0x50,0x63,0xbb,
    0xe0,0x3e,0x15,0xe7,0xaf,0xf1,0xe6,0xba,0x36,0xee,0xab,0xf1,0x9a,0x10,0xd7,0x88,
    0xe8,0x8b,0xef,0xdb,0x4d,0x6a,0x1f,0xdc,0x54,0xc7,0xa1,0x8d,0x6b,0x6a,0xbc,0x16,
    0x07,0x37,0xa9,0x81,0x1b,0xaf,0xf6,0xc1,0x4d,0x10,0xe7,0xef,0xe3,0xcd,0x73,0x6d,
    0xdc,0xad,0x36,0x70,0x5f,0x12,0x7d,0xf1,0x7d,0xbb,0xb1,0xc6,0x7b,0x81,0xe0,0x6e,
    0x72,0x1c,0xda,0xb8,0x5a,0xe7,0x4e,0x70,0xd7,0x34,0x70,0xed,0x35,0xfa,0x1c,0xdc,
    0x78,0x71,0x38,0x1f,0x7d,0xee,0xce,0x47,0x90,0xf9,0x0b,0xfa,0xa5,0x3e,0xe1,0x7f,
    0x3b,0xb7,0x3e,0xab,0xf8,0xc5,0xba,0xbf,0x47,0xf7,0xed,0x9e,0x0b,0xc4,0x5b,0xf4,
    0xfe,0xe9,0x86,0x6b,0x20,0x9d,0x2d,0x9e,0x0b,0xe5,0x59,0xf1,0xaf,0x81,0xfb,0xfc,
    0xf3,0x6e,0xff,0x9b,0xaf,0x33,0xc0,0x5f,0x25,0x6f,0x7b,0xf9,0xdf,0xc2,0xd7,0xaf,
    0x19,0x16,0x86,0xaf,0x5f,0x33,0x2c,0x0a,0x94,0x5d,0x18,0xca,0xb3,0xff,0xe2,0x40,
    0xdc,0x5f,0x33,0x2c,0x09,0xc4,0x4d,0x6f,0xb9,0xf4,0xfc,0x35,0xc3,0x8a,0x40,0xdc,
    0x5f,0x33,0xac,0x0c,0xc4,0x6d,0x0c,0x2f,0x6b,0xac,0x4b,0xe4,0xbb,0xb5,0xce,0x77,
    0xf0,0xfd,0xaa,0xa2,0xbe,0x56,0xbe,0x5b,0xe5,0xce,0xc4,0xaf,0x07,0xea,0xae,0x0c,
    0xe5,0x78,0xfe,0x1e,0x68,0x07,0x98,0x5d,0x5b,0xac,0x09,0xc4,0xed,0xda,0xc2,0x6c,
    0xad,0x75,0xf3,0x78,0x67,0x8d,0xf3,0x8c,0xb9,0x81,0xfc,0xaa,0x50,0x3e,0xc3,0xb8,
    0xa1,0xc6,0x76,0xc0,0xbd,0x2e,0x0e,0xd7,0x6d,0x78,0x07,0x70,0x64,0x52,0x3e,0x9b,
    0x5e,0x17,0xf8,0x5e,0xe0,0x7c,0xb5,0x6f,0x79,0xf7,0xed,0x40,0xce,0xfa,0xfd,0x6e,
    0x20,0x06,0xbb,0x96,0x9f,0x3e,0x08,0xc4,0xad,0x58,0x2e,0xfa,0x30,0x30,0x36,0x3f,
    0x70,0xb9,0x73,0xbd,0xcb,0x9d,0x1f,0x36,0xe4,0x4e,0x8b,0xb1,0xcf,0x5d,0x6c,0x4f,
    0xaf,0x31,0xf6,0xb1,0x16,0xd6,0xcb,0x97,0x36,0xee,0x69,0x1a,0x37,0x38,0xf8,0x00,
    0xdc,0x74,0x7b,0xc6,0x10,0xf8,0x0c,0x64,0x9a,0xee,0x49,0xe1,0x23,0x98,0xcf,0xf4,
    0x6b,0xb1,0xfa,0x59,0x8d,0x72,0x6b,0xf4,0xac,0x07,0xe3,0xc1,0xbb,0x98,0x5f,0x08,
    0xb7,0x72,0x8f,0x5d,0x6f,0x89,0x43,0x9f,0xa7,0xbb,0xf7,0xca,0xaa,0x91,0x5c,0xa5,
    0x52,0x62,0x89,0xb0,0x26,0x87,0x65,0xc2,0xaa,0xee,0xb9,0xcd,0xfb,0x09,0xf5,0xad,
    0xbe,0x3e,0xa1,0xae,0xd5,0x3f,0x49,0xa8,0x67,0xcf,0x15,0x3e,0x4d,0xa8,0x03,0xb9,
    0x4f,0x92,0xf2,0x79,0x41,0x87,0x9c,0xdc,0xf1,0x45,0x32,0xab,0x3f,0x53,0xc8,0xcb,
    0xef,0x71,0x80,0x8f,0xd7,0xba,0x01,0xf7,0xcd,0x9c,0x3c,0xde,0x5d,0xb5,0x67,0x10,
    0x5b,0xe6,0xc4,0xcf,0xaa,0x95,0x36,0xb7,0xca,0x89,0xdb,0xde,0xbf,0x75,0xce,0x76,
    0x80,0xdb,0x98,0xbe,0x9d,0x13,0xf7,0xef,0xd4,0x6d,0x93,0x13,0x47,0x41,0x7f,0xea,
    0xcf,0x1b,0x5c,0x7f,0xc0,0x8f,0xaf,0x5f,0xb7,0xf0,0x1b,0x83,0x6d,0x73,0xf2,0x66,
    0x73,0x47,0xd9,0xf4,0xef,0xa6,0xed,0x24,0x7b,0x3b,0x3a,0x9b,0xdf,0x73,0x36,0x77,
    0x6a,0xb0,0xd9,0x29,0x27,0x6f,0x36,0x3b,0xcb,0x66,0xd5,0xd9,0xec,0x22,0x9b,0x9d,
    0x9d,0xcd,0x5d,0x9d,0xcd,0x2e,0x0d,0x36,0x77,0xcb,0xc9,0x9b,0xfe,0x5e,0xea,0x8f,
    0xef,0x53,0x57,0xa7,0xbf,0x57,0x83,0xfe,0xde,0x39,0x79,0xd3,0xef,0x21,0x5d,0xdf,
    0xfe,0x3e,0x4e,0xbf,0x47,0x83,0x7e,0xcf,0x9c,0xbc,0xe9,0xf7,0x92,0xae,0xd7,0xdf,
    0xcf,0xe9,0xf7,0x6a,0xd0,0xef,0x9d,0x93,0x6f,0x55,0x8c,0x1c,0xb0,0x89,0x18,0x19,
    0x26,0xae,0xcf,0x26,0x38,0x7b,0x86,0xf5,0xd3,0x9c,0xba,0x90,0x39,0x5d,0xdf,0xe3,
    0x1d,0x94,0x13,0xc7,0x5a,0x3b,0x38,0xe7,0x5a,0xc3,0x2f,0xd6,0x2a,0xf8,0xd9,0x35,
    0xca,0x60,0xfd,0xad,0x2f,0xfe,0x3f,0x4d,0x1c,0xfa,0xf5,0xe7,0x9a,0xbe,0x6f,0x29,
    0xb8,0x61,0x79,0xc9,0x61,0x3c,0x7f,0xaa,0xe9,0xdb,0x1f,0x3c,0x9b,0x16,0xf7,0x90,
    0xd6,0x78,0xdf,0x9c,0x3c,0xce,0xc3,0x9f,0x14,0xfd,0x68,0x13,0x6f,0xf9,0x17,0x7c,
    0xbf,0xa2,0xb4,0xa9,0x3f,0xf8,0x7f,0xa0,0xbe,0x77,0x39,0x2c,0x67,0xdc,0x21,0x4e,
    0x30,0xaf,0xd7,0x17,0x36,0xd1,0x97,0xc3,0x73,0x72,0xb3,0x6b,0xa5,0xec,0x91,0x92,
    0xc3,0xfc,0xf5,0x74,0xb2,0x47,0xe5,0xe4,0xbc,0xec,0x31,0xb2,0x07,0xb9,0xde,0x4e,
    0xf6,0xd8,0x9c,0x9c,0x97,0x6d,0xc9,0xd9,0x1e,0xec,0x1c,0xeb,0x64,0x4f,0xcc,0xc9,
    0xa1,0x6c,0x56,0xc8,0x02,0x1b,0xa6,0xf5,0xb0,0x93,0xf8,0x27,0xe5,0x83,0x11,0x39,
    0x39,0xf8,0x0f,0xfb,0xcf,0xa9,0x6e,0xfc,0xe0,0x5a,0x8b,0x72,0xaa,0xc6,0x8f,0xff,
    0x7f,0xad,0x36,0x46,0xe6,0xfc,0x86,0x08,0xba,0x57,0x17,0x18,0xfa,0x73,0x8a,0xda,
    0x1c,0xa9,0x79,0x34,0xbd,0x53,0xdd,0x3c,0x62,0xee,0x5a,0xe4,0xd7,0x53,0x64,0x1f,
    0xb2,0xa7,0x49,0x16,0xbf,0xb6,0x9f,0x8d,0xd1,0xfc,0xb4,0x54,0x36,0x8e,0x0b,0xcc,
    0xc7,0xe3,0xea,0xff,0x19,0x39,0xe7,0x7f,0xba,0xfa,0x3f,0xd1,0xf5,0x1f,0xdc,0x99,
    0x18,0x9b,0xf4,0xce,0x54,0x5b,0x13,0x55,0x1f,0xab,0xf5,0x8d,0xf1,0x9c,0x2d,0xdf,
    0x56,0x2a,0xa5,0xcf,0xce,0x91,0xcf,0x12,0xf1,0x26,0x3b,0x4e,0xb2,0x4d,0x4e,0xf6,
    0x3c,0x27,0x3b,0xae,0xee,0x77,0xc6,0xe6,0xf9,0xc2,0x77,0x93,0xbd,0xf3,0x9c,0x9d,
    0x76,0xd9,0xa9,0x3a,0x3b,0xe3,0x9d,0x9d,0x76,0x67,0xe7,0x42,0x67,0x07,0x36,0xc7,
    0xbb,0xb9,0xb8,0x38,0xe7,0x77,0x56,0x17,0xba,0xb9,0x98,0x20,0xdb,0x17,0x37,0x8c,
    0x79,0xa2,0x9b,0x8b,0x39,0x35,0x7e,0xb7,0x05,0xbf,0x4c,0x90,0x9f,0x6c,0x3d,0x5e,
    0xa6,0xfd,0xc0,0x62,0xea,0xf2,0x9c,0x18,0x74,0x86,0x37,0xb1,0x4f,0x57,0xb8,0x35,
    0x7e,0xb9,0x72,0xc5,0x49,0xe2,0xae,0xdc,0x04,0xf7,0x88,0xe6,0xec,0xea,0x9c,0x18,
    0xf4,0xed,0x1d,0x3a,0x7c,0x2f,0x8c,0x6f,0xc3,0xec,0xfe,0xf1,0xb5,0x39,0xe5,0x80,
    0xd7,0xbf,0x23,0x28,0xec,0xd6,0xbf,0x11,0x75,0x76,0xaf,0x6d,0xb0,0x7b,0xbd,0xec,
    0xa2,0x6d,0xb3,0x73,0x43,0x4e,0xbc,0xd1,0xce,0x64,0x67,0xe7,0x06,0xd9,0x19,0xdc,
    0xc4,0x3d,0xf2,0x66,0x71,0x18,0x3f,0xda,0x33,0xfc,0x56,0x87,0x4f,0xce,0xcb,0xb3,
    0xe5,0x6d,0x39,0x75,0x2a,0xee,0x39,0xc9,0xed,0x39,0xf1,0x36,0xf7,0x7c,0xf2,0x8e,
    0x9c,0xf8,0x4a,0x77,0x2e,0xbd,0x53,0xba,0x4d,0x4e,0xf7,0xae,0x9c,0xb8,0x7f,0xb6,
    0x39,0x3d,0x27,0x3e,0xcb,0x3d,0xdb,0xbc,0x3b,0xa7,0xcd,0xe9,0xae,0x2f,0xf7,0xca,
    0x5e,0xd5,0xd9,0x9b,0x91,0x13,0x6f,0x73,0xba,0xf7,0xe5,0xd4,0x9f,0xe1,0x74,0x1f,
    0xcc,0x39,0x46,0x3f,0x8e,0x87,0x72,0xe2,0x7e,0x1c,0x7f,0xc8,0x89,0xfb,0x71,0x3c,
    0x22,0x5d,0x3f,0x8e,0x47,0x73,0xe2,0x7e,0x1c,0x8f,0xe5,0xc4,0xfd,0x38,0x66,0xe6,
    0xb4,0xf9,0x98,0xeb,0xcb,0x13,0xb2,0xe7,0xc7,0xf1,0x64,0x4e,0xdc,0x8f,0xe3,0x8f,
    0x39,0xf5,0xc1,0xd9,0xfd,0xda,0xcd,0x52,0x8e,0xef,0x8f,0x8a,0xfd,0xcd,0xf5,0x7e,
    0x09,0x7e,0x2d,0x2e,0xbe,0xaa,0x6d,0x2c,0x67,0xf8,0x3f,0x84,0x03,0x03,0x67,0xd7,
    0x2a,0x1d,0x53,0x72,0xd0,0x43,0x9e,0xd9,0xce,0xbd,0x0f,0x03,0x6e,0xdb,0xa2,0x74,
    0x55,0x3b,0xdb,0xa6,0xe5,0x9e,0xb9,0x63,0xca,0xf3,0xd9,0x86,0x73,0x45,0xca,0xf3,
    0x99,0xd5,0xbf,0x9f,0x96,0xe7,0x33,0xac,0xbb,0xce,0x29,0x75,0x20,0x07,0xce,0xd6,
    0xe3,0xae,0x29,0xe7,0xd5,0xea,0xbb,0xa7,0xf4,0xcf,0x44,0xad,0xf7,0xe7,0x72,0xca,
    0x00,0xb7,0x35,0x3b,0x5f,0xd8,0x73,0x6e,0x6f,0x58,0x90,0x53,0xc6,0x63,0x8b,0x73,
    0xb6,0xfb,0x9c,0xec,0x01,0x7b,0x31,0x27,0xbe,0xc0,0x61,0x2b,0x72,0xda,0x5c,0xe0,
    0x72,0xcf,0xca,0x9c,0xb2,0xe0,0x2e,0x13,0xf6,0x52,0x4e,0x1c,0xdf,0xa8,0x5e,0x22,
    0xec,0xe5,0x9c,0x38,0xbe,0x53,0x1d,0xa3,0x6b,0x83,0x57,0x72,0xe2,0xf6,0x9e,0xe9,
    0xaa,0xbc,0x3c,0xdb,0x83,0x5b,0xe3,0xee,0x4d,0x63,0x6e,0x5e,0xcd,0x29,0x63,0xd7,
    0x57,0xaf,0xe7,0xc4,0x46,0xb9,0x18,0x79,0x43,0x98,0xbd,0xfb,0x5a,0x7f,0xe7,0x2c,
    0xa7,0x2c,0x38,0x8b,0xc3,0x37,0x73,0xe2,0xfe,0x5d,0x81,0x75,0x39,0xf1,0x37,0x14,
    0x37,0xdb,0x69,0x3e,0xbb,0xea,0x7d,0x9f,0xee,0x6e,0xce,0x71,0x5d,0xd0,0xad,0xa8,
    0x77,0x97,0x4c,0x37,0xf7,0xee,0x54,0x8f,0x94,0xd7,0x06,0x6b,0xb4,0x6f,0x99,0x4c,
    0x77,0xf7,0x7e,0xd3,0x3e,0xba,0xb6,0x80,0x6d,0xc8,0x77,0x73,0xb1,0xd9,0x33,0x25,
    0x7f,0x5d,0xa5,0x7c,0x2f,0xc9,0xfa,0xb2,0x9d,0x6c,0x40,0x6e,0x5e,0x8d,0x7d,0x46,
    0xbc,0xf5,0x54,0x5f,0xec,0x6c,0xb7,0xaf,0xee,0x83,0xe3,0x7b,0x12,0x1b,0x73,0xaf,
    0x94,0x3a,0xe0,0x4e,0x56,0x1e,0xdc,0x2f,0x75,0xe7,0x3d,0x3d,0x63,0x35,0xf9,0x03,
    0x15,0xf3,0x33,0x9d,0x8f,0xfa,0xa4,0x5c,0x03,0x07,0xea,0xdb,0x22,0xbc,0xfb,0x77,
    0x52,0x8d,0xf8,0x22,0xed,0x9f,0x86,0x9f,0x5c,0xa3,0xfd,0x93,0xb4,0x57,0x9a,0x7f,
    0x0e,0x4d,0xd9,0x2f,0x7b,0x5e,0xd5,0xcf,0xf9,0x15,0x5c,0xdf,0xa2,0xf4,0xd3,0x78,
    0xfb,0xba,0x6f,0x8b,0x7e,0xa6,0xef,0x3b,0xd6,0xb8,0xfb,0x7a,0xfd,0x53,0xe2,0x97,
    0x6b,0xdc,0x3f,0x4f,0x89,0x0d,0xa9,0x94,0x7a,0x87,0x49,0xaf,0xc5,0xe9,0xfd,0x22,
    0x25,0x6e,0x7a,0x87,0xa7,0xc4,0x86,0xb8,0x6f,0x9e,0x06,0xa4,0xb4,0x77,0xb8,0xfb,
    0xe6,0xe9,0x88,0x94,0xdf,0xae,0x0c,0xd0,0x3b,0x77,0xf8,0x76,0xf1,0x97,0xfa,0x6e,
    0xd1,0xae,0x15,0x8e,0x4e,0x29,0xe7,0xaf,0xe7,0x06,0x0b,0x6b,0x72,0xfd,0x3a,0x5e,
    0xfd,0x6a,0x75,0xfd,0x6a,0x49,0x89,0xdb,0x19,0x68,0x68,0xca,0xef,0x6e,0x5a,0xdc,
    0x7d,0xbe,0x13,0x52,0xb6,0x01,0x9b,0xe0,0x87,0x17,0xba,0xe8,0x03,0xf0,0x93,0x75,
    0xbd,0x6a,0xfe,0xeb,0x97,0x6e,0xfc,0xdd,0x13,0x7e,0xff,0x51,0xf4,0xe2,0xc7,0x45,
    0xf9,0x7f,0xdf,0x5d,0x89,0xe4,0x78,0x45,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//  uniform int kOffsetX;
//  uniform int kOffsetY;
//  uniform int kOffsetZ;
//     uniform int kWidth;
//  uniform int kHeight;
//     uniform int kAlphaBits;
//  uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//  int blockid = int(gl_LocalInvocationID . x >> 4u);
//  int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//  vec3 dir = minColor - maxColor;
//  float distMin = dot(minColor, dir);
//  float distMax = dot(maxColor, dir);
//  float dist = dot(color, dir);
//  uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//  uint bit0_in = factor & 1u;
//  uint bit1_in = factor >> 1;
//  return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//  ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//  float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//  float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//  float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//  float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//  float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//  float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//  vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//  float eigenvalue = 0.0f;
//
//  for(int i = 0;i < 4;i ++){
//   float r = dot(vec3(cov0, cov1, cov2), vg);
//   float g = dot(vec3(cov1, cov3, cov4), vg);
//   float b = dot(vec3(cov2, cov4, cov5), vg);
//   vg = vec3(r, g, b);
//   eigenvalue = sqrt(dot(vg, vg));
//   if(eigenvalue > 0.0f){
//    float invNorm = 1.0f / eigenvalue;
//    vg *= invNorm;
//   }
//  }
//
//  const float kDefaultLuminanceThreshold = 4.0f * 255;
//  const float kQuantizeRange = 0.512f;
//
//  if(eigenvalue < kDefaultLuminanceThreshold){
//   vg = vec3(0.299f, 0.587f, 0.114f);
//  }
//  else {
//   float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//   vg *= kQuantizeRange / magn;
//  }
//  float dist = dot(vec3(rgbColor), vg);
//  float min_dist = subgroupClusteredMin(dist, 16);
//  float max_dist = subgroupClusteredMax(dist, 16);
//  uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//  uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//  minColor = subgroupShuffle(rgbColor, min_index);
//  maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//  float dist = float(maxAlpha - minAlpha);
//  uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//  ind = - ind & 7;
//     ind ^= int(2 > ind);
//  return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//  minAlpha = subgroupClusteredMin(alpha, 16);
//  maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//  int minValue, maxValue;
//  ComputeMaxMin(value, minValue, maxValue);
//  uint indices = 0;
//  if(minValue != maxValue)
//   indices = GetIndicesAlpha(value, minValue, maxValue);
//
//  uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//  uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//  if(pid == 5){
//   mask0 |=(indices & 0x1)<< 31;
//   mask1 |=(indices & 0x6)>> 1;
//  }
//  return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//  uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//  return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//  return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//  uint t = a;
//  a = b;
//  b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//  if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//   return;
//
//  ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//  int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//  int texOffsetY = kWidth >> 2;
//  int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//  ivec4 result;
//
//  bool punchthrough;
//  result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//  uvec4 finalResult;
//
//  uvec3 minColor, maxColor;
//  ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//  uint minColor565 = packColorToRGB565(minColor);
//  uint maxColor565 = packColorToRGB565(maxColor);
//  if(minColor565 > maxColor565){
//   swap(minColor565, maxColor565);
//  }
//  uint indices = 0;
//  if(minColor565 != maxColor565){
//   indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//  }
//  else {
//   indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//  }
//  uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//  finalResult . r = maxColor565 |(minColor565 << 16);
//  finalResult . g = mask;
//
//  if(pid == 0){
//   tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//   imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//  }
//
// }
