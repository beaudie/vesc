// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5c,0x09,0xb4,0x55,0xc5,
    0x95,0x7d,0xff,0xbd,0x7f,0xc7,0xf7,0xc3,0xa4,0xe0,0x80,0x43,0x4c,0xd2,0x1d,0x8d,
    0x73,0xb7,0x53,0x44,0x26,0x8d,0x82,0x13,0xe0,0x84,0x09,0x31,0xa2,0x01,0x12,0x21,
    0xdf,0xaf,0x09,0x12,0x24,0x82,0x1f,0x41,0x04,0x13,0x05,0x11,0xc5,0x56,0x84,0x38,
    0x03,0x01,0x1b,0xb1,0x1d,0x00,0x19,0x54,0x06,0x45,0x23,0x32,0x13,0x81,0x88,0x71,
    0x42,0x44,0x8c,0x89,0x03,0xa2,0x12,0x73,0xf7,0xdb,0xfb,0x70,0x0f,0x4f,0x9a,0xb5,
    0xee,0xfa,0xaf,0xf6,0x3e,0xe7,0xd4,0xa9,0x53,0x55,0xa7,0xea,0xde,0x5b,0x97,0x52,
    0xf1,0xbb,0x51,0xa1,0x54,0x53,0x48,0x0b,0x71,0xa1,0x5b,0x5d,0xa1,0xf2,0xaf,0x79,
    0xa1,0x58,0xa8,0xd1,0xdf,0xa3,0xf4,0xf7,0x58,0xfd,0x6d,0xab,0xbf,0x1d,0xf5,0xf7,
    0xb4,0xec,0x6f,0xb9,0x10,0x56,0xe4,0x3b,0x9d,0x73,0xc1,0x39,0x47,0xf5,0xbf,0xa6,
    0xf7,0x51,0xc7,0x1d,0x7f,0x0c,0xec,0x34,0x29,0x94,0x2a,0xf6,0xc0,0x35,0xcd,0xec,
    0x07,0xd9,0xdf,0xda,0xec,0xba,0xf2,0xf2,0xbe,0x0d,0xc0,0xbb,0x67,0xd7,0xa5,0xd9,
    0xf5,0xcf,0x4c,0xa0,0x59,0x66,0xa3,0xb6,0x62,0xb3,0x50,0xe8,0x20,0x9d,0x8a,0xcd,
    0x0c,0xed,0x5e,0xa9,0xa3,0x50,0xd8,0x5f,0xe5,0x4b,0x55,0x6e,0x5d,0x29,0x97,0x2a,
    0xfa,0x05,0x71,0xf8,0x0d,0xee,0xb0,0xec,0xea,0x9c,0xd5,0x38,0xb2,0x48,0xee,0xbb,
    0xfc,0xb3,0x0b,0xab,0x11,0x56,0xeb,0xb0,0xa2,0xb0,0xd8,0x61,0x25,0x61,0x75,0x0e,
    0xab,0x15,0xd6,0xcc,0x61,0x81,0xb0,0xbd,0x1d,0x16,0x0a,0xdb,0x57,0x7e,0x5a,0x1d,
    0xf0,0xb3,0x4d,0xa6,0xf0,0x9d,0x42,0xee,0x37,0xca,0x87,0xec,0x2a,0x97,0x0a,0xab,
    0x83,0x9c,0x6b,0x1d,0xee,0x2e,0x8b,0xf2,0x21,0xbb,0xe2,0x53,0xaa,0x94,0xf7,0x13,
    0xf7,0xed,0x90,0xed,0xdf,0x4f,0xdc,0xfc,0x84,0x7a,0x7b,0x65,0x35,0xa3,0xee,0x43,
    0x32,0x0c,0x6d,0xc2,0xef,0x96,0x99,0x3c,0x7c,0xfc,0xb6,0x6c,0xed,0x93,0x95,0xa3,
    0x02,0xfd,0x36,0xbe,0x2c,0xbe,0x50,0xf9,0x5b,0x5b,0x89,0x43,0xa4,0xf8,0x43,0xbe,
    0xb9,0x7e,0x17,0xc5,0xb7,0x10,0xdf,0x5c,0xe5,0x7d,0x54,0x86,0xcd,0x56,0x59,0xcd,
    0x07,0xca,0x1e,0x74,0x0f,0xca,0xfe,0xa2,0x5c,0x52,0xf9,0xfb,0xb2,0x55,0x92,0x6e,
    0x07,0xe9,0x46,0x95,0xb8,0x72,0xcc,0x41,0xee,0x34,0xd9,0xab,0x95,0xdc,0x45,0xf2,
    0x1f,0xfa,0x6d,0x54,0xee,0x2e,0xec,0x70,0xb5,0xb1,0x87,0xfa,0xd5,0xf8,0x4b,0x1d,
    0x8f,0x3a,0x7b,0xba,0x36,0x5e,0x26,0xae,0xec,0xf8,0x5e,0xaa,0xcf,0xca,0x7d,0x2b,
    0x63,0x3a,0xb7,0x5f,0xef,0x78,0x94,0x1b,0xaa,0xea,0x1f,0xa0,0x18,0x99,0xfe,0xa0,
    0x2a,0xbe,0xd1,0xc5,0xe1,0x66,0xd5,0xed,0xeb,0x1b,0x2d,0xff,0xad,0x3c,0x46,0xe3,
    0xcf,0xca,0xb7,0x69,0x9c,0x1d,0x91,0x45,0x0b,0xfa,0x63,0xd5,0xa6,0xd1,0x92,0xbd,
    0xcd,0xc9,0x8e,0xcb,0xae,0xaf,0x5d,0x79,0x52,0x95,0x6f,0x0f,0xca,0x17,0xf3,0xed,
    0xa9,0xec,0x3a,0xd2,0x95,0xe7,0xa9,0x2e,0x2b,0x2f,0xd4,0xb8,0xb7,0xf2,0x52,0xe7,
    0x1b,0xca,0xcb,0x0a,0x9c,0x1f,0x56,0x5e,0x95,0x5d,0x07,0x67,0xd7,0x01,0x59,0xf9,
    0xed,0xec,0xef,0x69,0xf2,0xd1,0xf8,0x77,0x2a,0xb9,0x83,0x6d,0x01,0xf7,0xae,0xe2,
    0xb7,0x4c,0xfd,0xf8,0x8e,0x93,0xdd,0xac,0xb1,0x60,0xe5,0xf7,0xb2,0x2b,0x71,0xe5,
    0x2d,0x9a,0xbb,0x66,0xeb,0x7d,0xd9,0xda,0x2c,0xd9,0x2d,0x4e,0x76,0xab,0xc6,0x9a,
    0xc9,0x7e,0xa0,0x7e,0xac,0x17,0xb7,0xc5,0x71,0xdb,0xc4,0x35,0xca,0x2f,0x6f,0xe7,
    0x43,0xf5,0x9f,0xc9,0xfe,0xdd,0xf9,0xbf,0x55,0xbc,0xc9,0x7e,0x94,0x5d,0xa9,0x93,
    0xfd,0x87,0xf3,0xaf,0x87,0x78,0xe3,0xfe,0xa9,0xfa,0x36,0xcb,0x8e,0xe7,0x3e,0x96,
    0x5e,0xfd,0x1e,0xb8,0x4f,0xe4,0xab,0xd5,0xff,0x9e,0xe3,0x3e,0xad,0x6a,0xa3,0xe7,
    0x3e,0x73,0x6d,0xac,0xe6,0xb6,0x3b,0xbd,0xcd,0x55,0xdc,0xe7,0xf2,0xa5,0xd1,0x71,
    0xd6,0xde,0x1d,0x9a,0x67,0x26,0xfb,0x85,0xb0,0x06,0xe9,0x78,0x3b,0x5f,0xba,0xf8,
    0x6e,0x55,0x3c,0x8c,0xfb,0xca,0xb5,0x77,0xf3,0x2e,0x6e,0xaf,0xca,0x78,0xda,0xa9,
    0x31,0xf3,0xbe,0xfa,0x70,0x9b,0xfa,0xe0,0x1f,0x8a,0xe1,0xc7,0x8a,0xc9,0xa7,0x6a,
    0xe3,0x76,0xf9,0xfc,0x85,0xea,0xfc,0x4a,0x79,0x00,0x13,0x14,0xe3,0xe1,0x6d,0xe7,
    0x7f,0x93,0x9a,0x7c,0xee,0x20,0x77,0x1d,0xc5,0xb5,0xa7,0x3d,0xe6,0x6d,0xa7,0x1a,
    0x8e,0xc5,0x92,0xe3,0xef,0xd4,0xda,0x64,0xe5,0x67,0x2b,0xe5,0xa1,0xed,0xad,0xbc,
    0xb4,0x52,0x6e,0xfc,0x91,0x95,0x5f,0xc9,0xca,0x23,0x5b,0xdd,0xdd,0xce,0xca,0xcb,
    0xb2,0xf2,0x03,0xa7,0xb7,0xda,0x25,0xff,0x6a,0x56,0x5e,0x73,0xed,0x96,0xb6,0x47,
    0x64,0x35,0x21,0x7f,0x2e,0xaf,0xa1,0x0e,0xe4,0xc0,0x99,0xdc,0xeb,0xd9,0xef,0xab,
    0x5a,0x94,0xda,0xb7,0x51,0x3e,0xc3,0xba,0x58,0xe3,0xfc,0x68,0x5a,0x59,0x17,0xdf,
    0xe8,0x60,0x73,0xbe,0x65,0x91,0x6d,0xb5,0x72,0xbb,0x62,0x3e,0x67,0x51,0xbe,0x5c,
    0xeb,0xd9,0x0f,0xb2,0xd6,0x21,0x0f,0xdf,0x94,0x95,0x0f,0xca,0x66,0x9a,0xad,0x73,
    0xff,0xdf,0x85,0x38,0x8e,0x2a,0x72,0x4e,0x42,0xb6,0x8d,0xca,0x37,0x0b,0x03,0xff,
    0x7b,0xfd,0x0e,0x2b,0xeb,0x36,0xed,0xdf,0x55,0xcc,0xeb,0x9e,0x50,0x44,0xae,0xc8,
    0xcb,0xf7,0x16,0xf3,0x7c,0x83,0xf2,0xc4,0xa2,0xcd,0xf1,0xb0,0xb2,0x06,0x4c,0x2a,
    0x52,0x07,0x72,0x13,0x8b,0x79,0xdf,0x3d,0x5c,0xdc,0x3d,0x67,0x4f,0x2d,0x72,0x9d,
    0xb2,0xf2,0xcc,0x22,0xf7,0x14,0x56,0x9e,0x5b,0xc4,0xba,0x99,0xd7,0xb3,0xb1,0x98,
    0xe7,0xad,0x26,0x25,0xfa,0x3b,0xda,0xc9,0x37,0x2d,0x15,0x2a,0xeb,0x9d,0x95,0x9b,
    0x95,0xb8,0xd6,0x59,0xb9,0x79,0x89,0xfb,0x12,0x2b,0xb7,0x28,0x71,0xaf,0x73,0x44,
    0x66,0x1d,0xf6,0xf6,0x2a,0xe5,0x73,0xe6,0x43,0xe5,0x51,0xd8,0x84,0x1d,0xe8,0xb6,
    0x28,0x31,0x5e,0x2d,0x4b,0xec,0x2b,0xe8,0xa0,0xcd,0x18,0x77,0x5d,0x4a,0x9c,0x47,
    0x76,0x19,0xde,0xb5,0xc4,0x31,0x6b,0x97,0xd5,0x7d,0x47,0x89,0x3b,0x33,0x2b,0xdf,
    0x55,0xe2,0x82,0xb4,0x2b,0x87,0x95,0xb8,0x87,0xb0,0xf2,0xe7,0xa8,0xdf,0x95,0x0f,
    0xc8,0xa6,0xc7,0xb7,0x14,0x8b,0x97,0x6b,0xe9,0xcf,0xe8,0x4a,0xbd,0x41,0xe5,0xf7,
    0x9f,0x6b,0x39,0x3f,0x7b,0x38,0xec,0x95,0x5a,0xce,0xe5,0xa9,0xae,0x4f,0x96,0xd5,
    0x72,0x0f,0x60,0x32,0xaf,0xd6,0x32,0x07,0x00,0x37,0x99,0xe5,0xb5,0x18,0x77,0xb9,
    0xcc,0x8a,0x5a,0xd6,0xbf,0xdc,0xc9,0xac,0xcc,0x7e,0x9f,0xe2,0x64,0x56,0xd5,0xd2,
    0xe7,0x95,0x4e,0x66,0x75,0xf6,0xbb,0x9b,0x93,0x59,0x53,0xcb,0xb5,0x6c,0xb5,0x93,
    0x59,0x5b,0xcb,0xbd,0x95,0x95,0xd7,0x65,0xe5,0x7e,0x4e,0xe7,0x2f,0xb5,0x94,0x59,
    0xe7,0x74,0x5e,0xcb,0x7e,0x1f,0xed,0x74,0xd6,0x67,0xe5,0xa7,0x9d,0xce,0x86,0x5a,
    0xca,0x00,0x47,0x5f,0x23,0x5e,0x1b,0x6b,0x19,0x23,0xc4,0x04,0x6d,0x46,0x9b,0xe0,
    0x33,0x7c,0x42,0x1d,0xd0,0x41,0x5f,0x6f,0x52,0x6c,0xa1,0x83,0x1c,0xd3,0x3a,0x9b,
    0x94,0x1d,0xb5,0x5e,0xef,0x97,0xcd,0x9a,0x93,0x02,0xae,0x35,0xda,0x2e,0xee,0xfa,
    0xa7,0xb4,0x93,0x8d,0xe7,0x52,0xe1,0x87,0x19,0x09,0x39,0xd8,0x3b,0x59,0x82,0xc0,
    0xda,0xa8,0xdc,0x46,0x18,0xec,0xed,0xa7,0xfd,0x63,0x4d,0x95,0x3d,0xdb,0x1b,0xc3,
    0xc6,0xfe,0xa1,0xe4,0x43,0xda,0x40,0xb9,0x75,0x98,0xe7,0x39,0xe8,0x1f,0x1c,0xda,
    0xd8,0xe6,0x9c,0xc4,0xbe,0x14,0xd8,0x20,0xed,0x7d,0x2c,0x36,0x63,0xca,0x1c,0x23,
    0x7e,0x9c,0xdc,0x56,0xe6,0xd8,0x19,0xe0,0xb0,0xb1,0x65,0xce,0x8d,0x46,0xb7,0xc7,
    0xb9,0xbd,0xcc,0xbd,0x8c,0xbf,0x6c,0xdc,0x8f,0x73,0xf2,0x8d,0x0e,0xbf,0xc3,0xd9,
    0x1e,0xe0,0xf0,0x3b,0xcb,0x1c,0x97,0x76,0x19,0x3e,0xbe,0xcc,0xbc,0x61,0x97,0xb5,
    0xe7,0xae,0x32,0xf7,0x4d,0x76,0xd5,0x64,0x71,0x86,0xfc,0x53,0x65,0xfe,0x86,0x7f,
    0xa5,0x3a,0xf6,0x59,0xe7,0x3a,0xf6,0x59,0xa9,0x90,0x73,0x5d,0x33,0xec,0x84,0xac,
    0x6d,0x45,0xed,0xf3,0x0a,0xe2,0x3f,0xcf,0x90,0x40,0xfb,0x54,0x74,0x42,0xaf,0x94,
    0xfd,0xdf,0x46,0xf3,0xfe,0x2f,0xe1,0xee,0xe5,0x2d,0xae,0x8c,0xb1,0x82,0x82,0x95,
    0x11,0xff,0x7e,0x41,0x5e,0xc6,0xfc,0xfd,0x5c,0xe5,0xed,0x59,0x6d,0x87,0xa8,0xcf,
    0xbe,0xcc,0x7e,0x63,0xaf,0xf8,0x9d,0x90,0xf5,0xe3,0x6f,0x5b,0xed,0xc7,0x0f,0x0b,
    0xb9,0x97,0xee,0x9a,0x69,0x21,0x57,0xfe,0x20,0x24,0x76,0x58,0x98,0x8f,0xb3,0xc1,
    0xba,0x6f,0x38,0x3c,0x24,0x7f,0xa3,0xfa,0xec,0xc8,0x90,0x18,0xfa,0xb8,0x63,0x86,
    0x61,0x1d,0x3a,0x2a,0xe4,0xde,0x1b,0xf5,0xb5,0xd5,0x58,0x39,0x3a,0x24,0xfe,0x7c,
    0x26,0x83,0xf2,0x31,0x21,0xb1,0x5e,0xb2,0x8d,0xaa,0x8e,0x0d,0x89,0xbf,0x20,0x99,
    0xe3,0x24,0xd3,0xd7,0xc9,0x1c,0x1f,0x12,0x87,0x0c,0xca,0x27,0x86,0xd4,0xc3,0xde,
    0xe2,0x46,0x61,0x27,0x85,0xdc,0x33,0x80,0x3b,0x4f,0xd8,0xc9,0x21,0x7d,0xad,0xac,
    0xcc,0xc2,0xda,0x84,0xc4,0x21,0x7f,0x7e,0x86,0xa0,0x3d,0x75,0x65,0xe2,0x26,0x6b,
    0xf5,0xb4,0x53,0x3d,0x03,0x5c,0x3d,0xed,0x55,0x6e,0xe7,0xea,0xe9,0x28,0xdd,0x1a,
    0x57,0xcf,0xa9,0x21,0xf1,0xf6,0xae,0x9e,0xa6,0x65,0xe2,0x75,0x65,0xca,0x5a,0x3d,
    0xa7,0x87,0x6c,0x63,0x63,0x65,0xcf,0x4d,0xac,0x93,0x30,0xd4,0xd5,0x4d,0x71,0xef,
    0x1c,0x52,0x16,0xdc,0x50,0x61,0x67,0x85,0xb4,0x0b,0x0e,0x7d,0x81,0x35,0xb7,0x55,
    0xc0,0x75,0xb8,0x51,0x7d,0x01,0x7b,0xfb,0x04,0xc4,0x4d,0x66,0x5f,0xc9,0xd4,0x3b,
    0x99,0xfd,0x02,0xe2,0x56,0xdf,0xfe,0x01,0xf5,0x80,0xcf,0xc8,0x30,0xe4,0xa8,0x03,
    0x02,0xd6,0x09,0xee,0x9e,0x4c,0x0f,0xe3,0xff,0x40,0xe1,0x18,0x7b,0x07,0x2b,0xe7,
    0x7c,0x81,0xfd,0x48,0xf6,0xfb,0xa0,0xec,0x02,0x86,0xf1,0x87,0xdf,0x3b,0xb2,0xbf,
    0x87,0x68,0x3c,0x02,0x5f,0xa8,0xba,0xbe,0x27,0xbb,0xc8,0x11,0x2f,0x08,0x3b,0x54,
    0x18,0x72,0x84,0xc5,0xfa,0xf0,0x80,0x78,0xc1,0xf5,0xc9,0x11,0x01,0xdb,0x01,0xce,
    0xe4,0x8e,0x92,0x9c,0xef,0x93,0xa3,0x03,0xca,0x82,0x33,0xdd,0xff,0x96,0x2e,0x30,
    0x93,0x3b,0x21,0x20,0x0e,0x7b,0x88,0x0d,0x72,0xea,0x29,0xca,0xa7,0x66,0xbf,0x5d,
    0x40,0x9f,0xbd,0xfd,0x8e,0x8a,0x97,0xef,0xc7,0x53,0x03,0xe2,0x7e,0x0c,0x9d,0x16,
    0x50,0xff,0x54,0x67,0xef,0x74,0xd9,0xf3,0x63,0xf5,0x8c,0x80,0xb2,0xa7,0xbb,0x7e,
    0xeb,0xa4,0x7e,0x1b,0xe0,0xfa,0xad,0x73,0x40,0xdc,0xf4,0xce,0x0c,0xa8,0x0b,0xbc,
    0x77,0x26,0x83,0x35,0xe2,0x2c,0xb5,0xa1,0x67,0x26,0x83,0x3c,0x75,0xb6,0xb0,0x33,
    0x9d,0xed,0x73,0x64,0x7b,0x99,0xb3,0x7d,0x6e,0x40,0xfc,0x4f,0x99,0x0c,0xfa,0xba,
    0x4b,0x40,0xac,0x87,0x72,0x4d,0x37,0xd7,0xdf,0xe0,0xba,0x66,0x57,0x77,0xf5,0x77,
    0x57,0xb5,0x0f,0xf3,0xfa,0xbc,0x90,0x75,0x96,0x2a,0xe3,0x99,0x79,0xfe,0xa7,0x21,
    0x71,0x7f,0x3d,0x2f,0xff,0x2e,0x09,0xc9,0x8f,0xd5,0x3c,0x01,0xd6,0x33,0x24,0x7e,
    0x7b,0x39,0xb7,0x7b,0x79,0x48,0x1c,0xff,0x16,0x09,0xfb,0x79,0x48,0x1c,0xf7,0xc6,
    0x26,0xd7,0x5b,0x72,0x35,0x4e,0xae,0x4f,0x48,0x1c,0xf7,0xa8,0x8b,0x85,0xfd,0x22,
    0xa4,0x7e,0x9f,0x30,0xd7,0xbd,0x42,0xba,0x45,0xa7,0xdb,0x37,0x24,0x3e,0xda,0xe9,
    0xf6,0x0b,0xa9,0xdf,0xd7,0xe9,0xd6,0x4b,0xb7,0xe4,0x74,0xaf,0x0c,0x85,0x3b,0xdd,
    0x86,0x90,0xfa,0x57,0x3a,0xdd,0x0b,0x15,0xb3,0xa2,0x8b,0x59,0xff,0x90,0xb8,0xbf,
    0x2c,0x66,0xd7,0x84,0xe4,0x7d,0xcc,0x06,0x86,0xc4,0x7d,0xcc,0x06,0x85,0xc4,0x7d,
    0xcc,0x7e,0x17,0x12,0xf7,0x31,0x1b,0x2c,0x39,0x1f,0xb3,0x21,0x21,0x71,0x1f,0xb3,
    0xeb,0x43,0xea,0x0f,0x71,0xbe,0x0f,0x95,0xae,0x8f,0xd9,0x0d,0x21,0x71,0x1f,0xb3,
    0x61,0x21,0xf5,0x6f,0x70,0xba,0x37,0x4a,0xd7,0xc7,0x6c,0x44,0x48,0xdc,0xc7,0xec,
    0xa6,0x90,0xfa,0xe0,0x90,0xb3,0xb0,0x8e,0x75,0x0f,0x19,0x4b,0x70,0xc8,0x35,0xdd,
    0x34,0x16,0xbb,0xbb,0xb1,0x78,0x8b,0xe2,0x5a,0xe3,0xe2,0x3a,0x3e,0x24,0xee,0x2f,
    0x8b,0xeb,0x5d,0x21,0x79,0x1f,0xd7,0x7b,0x42,0xe2,0x3e,0xae,0xf7,0x86,0xc4,0x7d,
    0x5c,0x27,0x86,0xc4,0x7d,0x5c,0xff,0x28,0x39,0x1f,0xd7,0xfb,0x42,0xe2,0x3e,0xae,
    0xf7,0x87,0xd4,0xbf,0xcf,0xc5,0xe6,0x41,0xe9,0xfa,0xb8,0x3e,0x14,0x12,0xf7,0x71,
    0x7d,0x38,0xa4,0xfe,0x43,0x4e,0x77,0xb2,0x74,0x7d,0x5c,0xa7,0x84,0xc4,0x7d,0x5c,
    0xa7,0x86,0xd4,0x9f,0xe2,0x74,0xc7,0x28,0x66,0x05,0x17,0xb3,0xff,0x0d,0x89,0xfb,
    0xcb,0x62,0x36,0x23,0x24,0xef,0x63,0xf6,0x78,0x48,0xdc,0xc7,0xec,0x89,0x90,0xb8,
    0x8f,0xd9,0x93,0x21,0x71,0x1f,0xb3,0xa7,0x25,0xe7,0x63,0x36,0x2b,0x24,0xee,0x63,
    0x36,0x3b,0xa4,0xfe,0x2c,0xe7,0xfb,0x33,0xd2,0xf5,0x31,0x9b,0x1b,0x12,0xf7,0x31,
    0x9b,0x17,0x52,0x7f,0xae,0xd3,0x5d,0x20,0x5d,0x1f,0xb3,0x67,0x43,0xe2,0x3e,0x66,
    0xcf,0x85,0xd4,0x7f,0xd6,0x8d,0xc5,0xb1,0x21,0x63,0xf9,0x5c,0xd5,0x58,0xc4,0xdf,
    0x4f,0xb5,0xef,0xfa,0x9f,0x32,0xc7,0x2c,0x72,0x25,0xe4,0xbb,0xbb,0x5c,0x7b,0xa9,
    0x72,0x6d,0x83,0x72,0xed,0x65,0x2e,0xd7,0x82,0xeb,0x99,0x5d,0x97,0xc9,0x66,0x4f,
    0x37,0xbe,0x7f,0x1e,0xd0,0xae,0xed,0x31,0x2a,0xcf,0x39,0x03,0xe2,0xd8,0xd3,0x9a,
    0xfd,0xde,0x01,0xf1,0x9e,0x05,0xfa,0x67,0xb6,0x2e,0x93,0x7f,0x90,0xe9,0x13,0xd0,
    0x0f,0xf8,0xdc,0x5b,0x75,0xb6,0xcb,0x7c,0xe9,0xa7,0xf5,0xd5,0xea,0xac,0x8d,0xbe,
    0x59,0x67,0x10,0x11,0xc7,0x7d,0x01,0xd6,0x98,0xca,0x33,0xe3,0x88,0x7b,0x57,0x70,
    0xb6,0xc6,0xc4,0x11,0x71,0xdb,0x0f,0x25,0x11,0xb1,0x01,0x6e,0x1d,0x4d,0x23,0xe2,
    0x0d,0xda,0x17,0xc2,0x7e,0x39,0x22,0x3e,0x4d,0xed,0x69,0x12,0xed,0x1e,0xaf,0xbd,
    0xa3,0x3c,0x5e,0xe0,0x9a,0x66,0x17,0x30,0xb4,0xb1,0x69,0x94,0xfb,0xd9,0x42,0x7e,
    0xfa,0xd8,0xec,0x15,0x11,0xb7,0xd8,0x98,0x1e,0xfe,0x5a,0x6c,0x5a,0x46,0xac,0x13,
    0xf1,0xda,0x4b,0xf6,0x51,0xef,0x9a,0x38,0xaf,0x17,0x32,0xad,0xb2,0xeb,0x3f,0xa4,
    0x8f,0xdf,0x5d,0x0b,0x71,0x65,0x0f,0xbe,0xaf,0x62,0x66,0x71,0xb3,0xeb,0x46,0xf9,
    0xb5,0x7f,0xc4,0xbd,0x32,0xda,0xd9,0x4d,0xf7,0x27,0xad,0x23,0xe2,0x76,0x0d,0xcb,
    0x64,0x81,0x1f,0x10,0xf1,0xf9,0x08,0xf8,0xe7,0x85,0x1d,0x18,0xb1,0x0e,0x70,0x83,
    0xf5,0x1c,0xeb,0xa0,0x88,0x38,0xda,0x8e,0xf2,0x21,0x11,0x31,0xdc,0x0f,0xdd,0x28,
    0xec,0x7b,0x11,0x71,0xdc,0x3b,0xa1,0xed,0x68,0x0f,0x7c,0x47,0x1b,0x5e,0xce,0xfc,
    0x80,0x6f,0x87,0x2a,0x66,0x33,0xb5,0x5f,0xb0,0xbd,0xfa,0x61,0x11,0x39,0x2b,0x1f,
    0x21,0xb9,0x97,0xb2,0x12,0xca,0x47,0x46,0xc4,0xe6,0xe9,0xfe,0xcd,0xec,0x1d,0x23,
    0xb9,0xb9,0x55,0xf6,0x8e,0x8d,0xc8,0x99,0xfe,0xf1,0xd2,0x5f,0x5a,0xa5,0x7f,0x92,
    0xf4,0x3f,0x2c,0xec,0xae,0xff,0xc3,0x88,0x9c,0xe9,0xb7,0x95,0x7e,0x0f,0xe9,0xdb,
    0x9e,0xa9,0x43,0x44,0xdf,0xe1,0x9f,0x61,0xa7,0x45,0xac,0xff,0x78,0x87,0x9d,0x11,
    0xd1,0x66,0xdb,0x28,0x1f,0x87,0x9d,0x23,0xea,0x4f,0xd7,0xd8,0x39,0x33,0x22,0x86,
    0xe7,0x4a,0x18,0x0f,0xab,0xdd,0x78,0x00,0x77,0x56,0x76,0x4d,0xd1,0x78,0x38,0xcb,
    0xc5,0xf4,0x5c,0xb5,0x61,0x9e,0xee,0x61,0xad,0x0d,0x5d,0x22,0x72,0x26,0x77,0x9e,
    0x8b,0xbd,0x97,0x3b,0x3f,0x22,0xb7,0x48,0xbe,0x5e,0x10,0x11,0x1b,0xa0,0x3c,0x05,
    0xec,0xc2,0x88,0xf6,0x2e,0x70,0xf6,0x2e,0x96,0xbd,0x85,0x7a,0xee,0x6a,0xf6,0x7e,
    0x1c,0x91,0x33,0xb9,0x9f,0x4a,0x6e,0x69,0x95,0xdc,0x25,0x11,0x39,0x93,0xeb,0x29,
    0xb9,0x2d,0x55,0x72,0x97,0x45,0xe4,0x4c,0xae,0x97,0xe4,0x7a,0x54,0xc9,0xf5,0x8e,
    0xc8,0x99,0xdc,0x2f,0x25,0x57,0x5f,0x25,0x77,0x45,0x44,0xce,0xe4,0x7e,0x25,0x39,
    0x7b,0x06,0x60,0xf9,0xba,0x3e,0x22,0xd7,0xe0,0xf2,0xf5,0xd5,0x11,0x71,0xe4,0x21,
    0xe4,0x33,0xdc,0x7f,0xe3,0x39,0x9d,0xe5,0xa9,0xdf,0x44,0xbc,0x27,0xbf,0xda,0xe5,
    0xa9,0xfe,0x11,0x71,0xcb,0x79,0x03,0x34,0x7f,0xfd,0x9e,0x7d,0x60,0xc4,0xe7,0x09,
    0xb8,0xd7,0xb0,0xfb,0xde,0x6b,0x23,0xca,0x0e,0x74,0x39,0x67,0x50,0x44,0x7c,0x92,
    0x6b,0xcf,0xef,0x22,0xe2,0xa6,0x77,0xbd,0xf4,0x60,0xcb,0xf4,0x1a,0x23,0xe2,0x83,
    0x9c,0xde,0xd0,0x88,0xb8,0xf5,0xf1,0xf0,0x88,0xb6,0x86,0x2a,0x1f,0x8d,0x72,0x79,
    0x10,0xf9,0x7c,0x44,0x56,0x1e,0xa5,0xf1,0x87,0xdf,0x96,0xf3,0x46,0x46,0xd4,0x1d,
    0xa0,0x9c,0x67,0x32,0xa3,0x5c,0xce,0x9b,0x52,0xe6,0x9a,0x80,0x71,0x0b,0x79,0xaf,
    0xff,0x7b,0xe9,0xef,0x50,0xfe,0x9d,0xec,0xea,0x05,0xf7,0x87,0xec,0x1a,0x27,0x9b,
    0x7f,0x50,0x4e,0x43,0xbe,0x19,0x13,0x71,0x5c,0x62,0xbc,0x61,0x2c,0x59,0x1e,0xba,
    0x3d,0x22,0x67,0x79,0x68,0xb2,0x74,0xc7,0x29,0xef,0xa1,0xad,0x77,0xca,0xdf,0xe1,
    0xce,0xde,0xdd,0x11,0xc7,0x1a,0xc6,0xd1,0x15,0xce,0xde,0x84,0x88,0xdc,0x9d,0xe5,
    0xfc,0x5e,0x6c,0x52,0x44,0x1b,0xfd,0x9d,0xfe,0x1f,0x23,0xe2,0x76,0x0d,0x95,0xfe,
    0x7d,0x11,0x6d,0x80,0xaf,0xcb,0x72,0x38,0xb0,0x07,0x22,0xe6,0x6c,0xbc,0x47,0x03,
    0x8f,0xe7,0xb5,0x5d,0x4b,0xbb,0xfb,0x3b,0x59,0xf1,0x83,0xfc,0xa2,0x32,0xdb,0x85,
    0xf6,0x3f,0xa0,0x78,0x40,0x76,0xb5,0x72,0xec,0x14,0x97,0x57,0xfe,0x14,0x31,0x07,
    0x59,0x5e,0x99,0x16,0x11,0xb3,0xbc,0xb2,0xca,0xe5,0x15,0x70,0xd3,0xb1,0xce,0xc8,
    0xce,0x74,0x37,0x2f,0x66,0xb8,0x7c,0xe1,0xe7,0xcf,0x63,0x11,0x39,0x93,0xfb,0x3f,
    0x97,0x7f,0x1a,0x9d,0xdc,0x13,0x11,0x39,0xcb,0x2b,0x4f,0x46,0xc4,0x30,0x9f,0x6c,
    0xac,0xce,0x92,0x2e,0x9e,0xcd,0xdb,0x58,0x9d,0x1d,0x11,0xf7,0x63,0x75,0x4e,0x44,
    0xdc,0xc6,0xea,0x33,0x11,0xed,0xcd,0x71,0x7e,0xcc,0x97,0xad,0x87,0x8b,0xbb,0xfb,
    0xb1,0x20,0x22,0x67,0x75,0x3e,0x2f,0xb9,0x31,0x6e,0xcf,0xb1,0x30,0x22,0x3e,0xda,
    0xe9,0x2d,0x8a,0x88,0x5b,0x9d,0x8b,0x23,0xda,0x5a,0xe4,0xea,0x7c,0xd1,0xad,0x1f,
    0x3e,0x46,0x4b,0x23,0x72,0x26,0xf7,0x67,0xc9,0x6d,0xad,0x92,0x7b,0x25,0x22,0x67,
    0x72,0xcb,0x25,0xd7,0x58,0x25,0xb7,0x22,0x22,0x67,0xfe,0xae,0x96,0x5c,0x2f,0xb7,
    0xee,0xaf,0x57,0x5e,0x08,0x34,0xf6,0x80,0x6d,0x88,0x28,0xbb,0x3e,0xca,0xc7,0xee,
    0x5f,0x23,0xf6,0x21,0x9e,0xf9,0x1b,0xb6,0x29,0x62,0x4c,0xf1,0xdc,0xdf,0x72,0xd2,
    0x1b,0x11,0x65,0x37,0xb9,0x75,0xec,0xcd,0x88,0xf8,0x62,0x67,0xef,0xed,0x88,0xed,
    0xf5,0xf6,0xde,0x8d,0xd8,0x36,0x6f,0x6f,0x73,0x44,0xd9,0x77,0x9d,0xbd,0x2d,0x11,
    0x71,0xb4,0x6f,0x86,0xc6,0xeb,0xfb,0x11,0xeb,0x01,0x37,0x55,0x71,0xd9,0x1a,0x11,
    0x1f,0xa4,0x67,0x85,0xd6,0xbe,0x6d,0x11,0xdb,0xb8,0x55,0xf9,0x78,0x4b,0x55,0x3e,
    0xfe,0x7b,0xc4,0x67,0xa2,0xdb,0x5c,0x3e,0xfe,0x28,0x22,0x6e,0xf9,0xf8,0x9f,0x7b,
    0xc8,0xc7,0x9f,0xec,0x21,0x1f,0x7f,0x1a,0x51,0xf6,0x13,0xd7,0x0f,0x9f,0x45,0xc4,
    0x7d,0x3e,0xde,0x1e,0x11,0x37,0xbd,0x2f,0xa5,0xe7,0xf3,0xf1,0x57,0x11,0x71,0x3f,
    0xc6,0x77,0x46,0xc4,0x31,0x47,0x6b,0xe3,0xdd,0x73,0xef,0xd7,0xe8,0x6f,0xcd,0xd1,
    0xaf,0x5d,0xfc,0x8a,0x31,0xeb,0xdb,0xe9,0xf2,0x69,0x29,0x26,0x6e,0xf9,0xd8,0xf4,
    0xf0,0xd7,0xf2,0xf1,0x34,0xe5,0x63,0xcc,0x77,0xc8,0x7f,0xed,0xf6,0xc3,0xa1,0x6c,
    0x5a,0x3e,0x6e,0xee,0x7c,0x01,0x17,0x65,0x57,0x9d,0x6c,0xe2,0xb7,0xe5,0xbf,0x72,
    0xcc,0x71,0xf0,0x8a,0xfa,0x13,0x75,0x37,0x97,0x5c,0x9d,0x93,0x6b,0x16,0x73,0xfc,
    0x3d,0xa3,0x71,0xe4,0xe5,0x9a,0xc7,0x79,0xce,0x9b,0x50,0xa6,0x4d,0xd4,0xd1,0x4c,
    0x75,0x5a,0x4e,0x6e,0x19,0x93,0xf7,0x39,0x79,0x1f,0xb5,0x79,0xa7,0xcb,0xf3,0xfb,
    0xc6,0xcc,0x37,0xfb,0xc4,0xb9,0x5c,0xeb,0x98,0xf8,0x47,0x2e,0x77,0x1f,0x18,0x13,
    0xb7,0xcb,0x72,0xf7,0x41,0x31,0xeb,0x02,0x6f,0xb9,0xfb,0xdb,0x71,0x9e,0xbb,0xc1,
    0xfb,0xdc,0xbd,0xca,0xf6,0xbc,0x71,0x9e,0x8f,0xbf,0x1f,0x73,0xff,0x67,0xf9,0xf8,
    0xd0,0x98,0x98,0xe5,0xe3,0x95,0x2e,0xbe,0xe0,0x0e,0xcb,0xae,0x79,0xb2,0x83,0xdf,
    0x96,0x1b,0x8e,0x88,0x95,0x6b,0x4a,0x7c,0x27,0x68,0xe3,0xe6,0xc8,0x98,0xdc,0xae,
    0x3d,0xb1,0xe4,0xf0,0xde,0xc2,0xcb,0x1d,0x1b,0x93,0xb3,0x71,0x79,0x9c,0xe4,0xf0,
    0x5e,0x6c,0xd7,0x33,0xf3,0x98,0xb8,0xdd,0x53,0x9d,0x10,0x13,0xc3,0xbb,0x46,0xcb,
    0x83,0x27,0xc6,0xb4,0x75,0x82,0xab,0xf3,0xe4,0x38,0xcf,0x6f,0x3e,0xf7,0xb6,0x89,
    0xc9,0x99,0x5c,0xbb,0x38,0xcf,0x97,0x7e,0x0f,0xda,0x3e,0x26,0x67,0x6b,0x45,0x87,
    0x98,0x58,0xa3,0xdb,0x83,0x76,0x8c,0x69,0xaf,0x83,0x6b,0xc3,0x8f,0x9c,0x3d,0xb3,
    0x75,0x7a,0x4c,0xdc,0xda,0x70,0x46,0x4c,0xac,0x99,0x6b,0x43,0xa7,0x98,0xf6,0xce,
    0x88,0x73,0xbd,0xb3,0x63,0xe6,0x4e,0xf3,0xb5,0x4b,0x9c,0xef,0x0b,0xfd,0xbd,0x41,
    0xd7,0x98,0x9c,0xf9,0xda,0x2d,0x26,0xd6,0xe0,0x7c,0x3d,0x2f,0xa6,0x3d,0x70,0x96,
    0x67,0x2e,0x88,0xf3,0x3c,0x63,0x75,0x5c,0x18,0x13,0xc7,0xfb,0x4b,0xdf,0x57,0x17,
    0xc5,0xe4,0x4c,0xee,0xc7,0x92,0x43,0xdf,0x6f,0x75,0x72,0x3f,0x89,0xc9,0x99,0xdc,
    0x25,0x92,0xb3,0x33,0x21,0x26,0xf7,0xb3,0x98,0x9c,0xc9,0x5d,0x26,0xb9,0xb9,0x55,
    0x63,0xe4,0xf2,0x98,0x9c,0xc9,0xf5,0x96,0xdc,0x8e,0xc2,0xee,0x72,0x7d,0x62,0x72,
    0x16,0x83,0x5f,0xc6,0x1c,0x87,0xfe,0xde,0xbb,0xaf,0xb0,0x7a,0x17,0x97,0x7e,0x31,
    0x65,0xfb,0x3a,0xdd,0xfa,0x98,0xf1,0xf2,0xba,0x0d,0xc2,0xbc,0xee,0x55,0x31,0x65,
    0x1b,0x9c,0xee,0xaf,0x63,0xc6,0xca,0xeb,0xf6,0x17,0xe6,0x75,0xaf,0x89,0x29,0xdb,
    0xdf,0xe9,0xfe,0x36,0xe6,0x58,0x6e,0x70,0xba,0xd7,0x0a,0xdb,0xec,0x74,0x07,0xc5,
    0x94,0xbd,0xd6,0xe9,0x5e,0x17,0x33,0xf6,0x5e,0x77,0x88,0x30,0xaf,0x7b,0x7d,0x4c,
    0xd9,0x21,0x4e,0x77,0x68,0xcc,0xfe,0xf0,0xba,0xc3,0x84,0x79,0xdd,0xe1,0x31,0x65,
    0x87,0x39,0xdd,0x11,0x31,0xc7,0xae,0x6f,0xef,0x48,0x61,0xbe,0xbd,0xa3,0x62,0xca,
    0x8e,0x74,0xba,0xbf,0x8f,0xd9,0xbf,0x5e,0xf7,0x16,0x61,0x5e,0xf7,0xd6,0x98,0xb2,
    0xb7,0x38,0xdd,0x31,0x31,0xfb,0xdc,0xeb,0x8e,0x15,0xe6,0x75,0x6f,0x8f,0x29,0x3b,
    0xd6,0xe5,0xfb,0xf1,0x31,0xfb,0x1d,0x71,0x1c,0xe5,0xf0,0x7b,0x62,0xf6,0x29,0x62,
    0x84,0x3a,0x87,0x29,0xe7,0xde,0x1b,0x93,0x1b,0xef,0x64,0xef,0x8b,0xd9,0x87,0x88,
    0xc9,0xed,0x4e,0xf6,0x81,0x98,0x1c,0x64,0x6d,0xcd,0x7f,0x30,0xe6,0xb3,0xa2,0x9e,
    0xee,0x7d,0xc4,0x43,0x31,0x71,0xb3,0xf7,0x48,0x4c,0xcc,0x2e,0x5b,0x57,0x26,0xc7,
    0xac,0xff,0x11,0x67,0x6f,0x8a,0xec,0x0d,0x72,0xf6,0xa6,0xc6,0xc4,0xcd,0xde,0xb4,
    0x98,0x98,0x5d,0x66,0x6f,0x7a,0x4c,0x1f,0xa7,0xb9,0x35,0xe5,0xb1,0x98,0xf5,0x4c,
    0x77,0xd8,0xe3,0x31,0x71,0xbc,0x8f,0x5e,0x28,0xec,0x89,0x98,0x38,0x30,0x93,0x7b,
    0x52,0x6d,0x7d,0xc2,0xad,0x47,0x4f,0xbb,0xf5,0xe8,0xc9,0xaa,0xf5,0x68,0xa5,0xd6,
    0x91,0x79,0xce,0xd7,0xe7,0x62,0x3e,0xb3,0x38,0x56,0xcf,0x24,0x6c,0x4e,0x2f,0x8c,
    0xf3,0x67,0x46,0x90,0x7b,0x21,0xe6,0x73,0x8d,0xe3,0xf5,0xdc,0xc2,0xf0,0x17,0x63,
    0xca,0xda,0x65,0x6d,0x5d,0x1a,0x93,0x7b,0xc1,0xb5,0xeb,0xa5,0x98,0xf5,0x2d,0xd5,
    0x58,0x02,0xf6,0x4a,0x4c,0x7c,0x9c,0x6b,0xeb,0x72,0x61,0x68,0xeb,0x62,0x61,0x2b,
    0x62,0xca,0x2e,0x8f,0x77,0x6f,0xcb,0x4a,0xb7,0x47,0x58,0x52,0x66,0xfb,0xb1,0x4e,
    0xe2,0x5d,0xfb,0x3c,0xc7,0xcd,0x29,0x13,0x03,0xb7,0x42,0x6b,0x2a,0xf6,0x93,0x58,
    0x83,0x4f,0xaf,0xe3,0x3a,0x8c,0x73,0x4b,0xd8,0x07,0x19,0x7e,0x86,0xc3,0x71,0xe6,
    0xc8,0xaf,0xe9,0xab,0x9c,0xed,0xc5,0x65,0xee,0x03,0xb0,0x5f,0x81,0x0f,0xde,0xa7,
    0xa7,0x55,0x2f,0xb8,0x39,0x8e,0x83,0xfd,0xa9,0x65,0xee,0xbd,0xc0,0xc1,0x07,0xcf,
    0xdd,0x5f,0x66,0xbd,0xe0,0xce,0x10,0xe7,0xef,0xf1,0x56,0xbb,0x3a,0x16,0x96,0x79,
    0x4f,0x88,0x7b,0x44,0xf8,0xe2,0x7d,0x7b,0x4c,0xf5,0x83,0x7b,0xda,0x71,0xa8,0xe3,
    0x91,0x32,0xef,0xc5,0xc1,0x4d,0xad,0xe2,0x26,0xaa,0x7e,0x70,0xf7,0x8b,0xf3,0xcf,
    0xf1,0xd6,0xb8,0x3a,0x16,0xa8,0x0e,0x3c,0x97,0x84,0x2f,0xde,0xb7,0x19,0x65,0x3e,
    0x0b,0x04,0xf7,0x98,0xe3,0x50,0xc7,0xc3,0xda,0x77,0x82,0x7b,0xa4,0x8a,0xbb,0xb7,
    0xcc,0x98,0x83,0x9b,0x28,0x0e,0xfb,0xa3,0x24,0xc9,0xf7,0x47,0x90,0x59,0x97,0xe1,
    0xc0,0xe0,0x13,0x7e,0xdb,0xbe,0x75,0x83,0xc6,0x2f,0xe6,0xfd,0x54,0x3d,0xb7,0xdb,
    0x18,0x13,0x6f,0xd0,0x39,0xa8,0x5d,0xf7,0x40,0xda,0x5b,0x6c,0x8c,0xf3,0xbd,0xe2,
    0xeb,0x31,0xd7,0xf9,0xbf,0xba,0xf5,0x6f,0x93,0xf6,0x00,0xaf,0x4b,0xde,0xd6,0xf2,
    0xbf,0xc5,0xdf,0xbc,0x67,0x78,0x2b,0xfe,0xe6,0x3d,0xc3,0xdb,0x31,0x65,0xdf,0x8a,
    0xf3,0xbd,0xff,0x3b,0x31,0x71,0x7f,0xcf,0xf0,0x6e,0x4c,0xdc,0xf4,0xde,0x97,0x9e,
    0xbf,0x67,0xd8,0x1a,0x13,0xf7,0xf7,0x0c,0x1f,0xc4,0xc4,0xad,0x0d,0x1f,0xaa,0xad,
    0xef,0x2a,0x76,0x9f,0xbb,0xbd,0x25,0x62,0xff,0x11,0xfa,0x52,0xfd,0xf9,0x91,0xdb,
    0x13,0x7f,0x1c,0x53,0xf7,0x83,0x38,0x6f,0xcf,0x67,0x31,0xed,0x00,0xb3,0x7b,0x8b,
    0xed,0x31,0x71,0xbb,0xb7,0x30,0x5b,0x9f,0xbb,0x7e,0x9c,0x5b,0x66,0x3f,0xa3,0x6f,
    0x20,0xff,0x91,0x38,0xd8,0x7c,0xb4,0xcc,0x7a,0xc0,0x7d,0x2c,0x0e,0xf7,0x6d,0x78,
    0x71,0x8f,0x33,0x50,0x1d,0x33,0x29,0xe4,0xdc,0x2f,0x63,0x9e,0x5d,0xd9,0xa4,0xfa,
    0x2d,0xef,0x7e,0x15,0x93,0x33,0xbf,0xff,0x15,0x13,0x83,0x5d,0xcb,0x4f,0x35,0x09,
    0x71,0xbb,0x2c,0x17,0x15,0x13,0x8e,0x4d,0xf0,0x96,0x3b,0x4b,0x49,0x9e,0x3b,0xc1,
    0xfb,0xdc,0x69,0x63,0x0c,0x7f,0x6d,0x6c,0xcf,0x2f,0x73,0xec,0x63,0x2e,0x40,0xd7,
    0xb7,0xfb,0x19,0xb5,0x1b,0x1c,0x62,0x00,0x6e,0xb2,0xbd,0x63,0x48,0xf8,0x3e,0xe4,
    0x19,0x3d,0x93,0x6a,0x26,0xdb,0xf8,0x6b,0x63,0xb5,0x53,0x1d,0xe5,0x76,0xe8,0x5c,
    0x29,0xda,0x83,0xb3,0x42,0x67,0x0a,0xb7,0x6b,0xaa,0xda,0x79,0x96,0x38,0xf8,0x3c,
    0xdf,0x9d,0x75,0x68,0x91,0x90,0x2b,0x14,0x72,0x6c,0x6f,0x61,0x35,0x0e,0x6b,0x25,
    0x0c,0xef,0xb7,0x1e,0x95,0x9f,0x83,0x02,0xfa,0x61,0xf7,0x7e,0x83,0xdd,0xbb,0x23,
    0x70,0xd7,0x65,0xd7,0x60,0xbd,0xef,0xa9,0xfc,0xd6,0x3d,0x4e,0x63,0xc0,0x7a,0xad,
    0x3c,0x2c,0x60,0x9d,0x56,0x1e,0x11,0xb0,0x3e,0x7b,0x1f,0x71,0x53,0x40,0x1d,0xc8,
    0x81,0xfb,0x59,0x0d,0xc7,0xc7,0x31,0x49,0x7e,0xde,0xbc,0x41,0xe7,0xc0,0xc1,0x41,
    0xe7,0xbf,0x1c,0x07,0xfd,0x31,0x9a,0xcf,0xe0,0x8e,0x4b,0xc8,0xe3,0x1c,0x96,0xd5,
    0x79,0x42,0x42,0x7b,0x56,0xe7,0x89,0x09,0x31,0xbb,0x86,0x4a,0xf7,0xa4,0x84,0xfa,
    0xe0,0x6d,0x5c,0x9d,0x9c,0x70,0x8c,0x1f,0xe3,0xda,0xd0,0x26,0x21,0x6e,0xf6,0x4e,
    0x49,0x88,0xd9,0x75,0x93,0xec,0xb5,0x4d,0x68,0xf3,0x94,0x24,0x7f,0x7f,0xd2,0x2e,
    0x21,0x6e,0xe5,0x0e,0x09,0xdb,0x60,0xfb,0x98,0x53,0x13,0x62,0x90,0xb3,0xfe,0xf9,
    0x51,0x42,0xdc,0x9f,0x59,0xe9,0x94,0x10,0xc7,0x65,0x31,0xeb,0xec,0xe2,0x02,0x1e,
    0x71,0xb9,0x4a,0xe7,0x7a,0xcf,0x4c,0xc8,0x9b,0xcd,0x73,0x65,0xb3,0xc6,0xd9,0xec,
    0x22,0x7b,0xe7,0x3a,0x9b,0x5d,0x9d,0xcd,0x2e,0x55,0x36,0xbb,0x25,0xe4,0xcd,0xe6,
    0x85,0xb2,0x59,0x74,0x36,0x2f,0x92,0xcd,0x0b,0x9d,0xcd,0xee,0xce,0xe6,0x45,0x55,
    0x36,0x2f,0x4e,0xc8,0x9b,0xfe,0x25,0xf2,0xc7,0xfb,0xf4,0x33,0xa7,0x7f,0x49,0x95,
    0xfe,0xa5,0x09,0x79,0xd3,0xef,0x25,0x5d,0x5f,0x7f,0x6f,0xa7,0xdf,0xab,0x4a,0xbf,
    0x4f,0x42,0xde,0xf4,0xfb,0x49,0xd7,0xeb,0xff,0xca,0xe9,0xf7,0xab,0xd2,0xaf,0x4f,
    0xc8,0xf7,0xd1,0x58,0x6d,0xd8,0xc3,0x58,0xfd,0xb9,0xb8,0xab,0xf7,0xc0,0xd9,0xfb,
    0xb8,0x5f,0x27,0xd4,0x85,0xcc,0xd5,0xfa,0x26,0xe6,0x37,0x09,0x71,0xe4,0x8d,0xfe,
    0xca,0x1b,0xfd,0x95,0x93,0xc0,0xaf,0x2d,0x53,0x06,0xf3,0xb1,0x7d,0x36,0x77,0x27,
    0x88,0x83,0x5f,0x6b,0xca,0x3c,0x73,0x0e,0x6e,0x6c,0x92,0x73,0x95,0xf3,0xaf,0x65,
    0xce,0x73,0x70,0x13,0xc5,0xcd,0x54,0x1e,0xf8,0x6d,0x42,0xbe,0xbe,0x72,0x26,0xbe,
    0xb6,0x30,0x49,0xbc,0xe5,0x02,0xf0,0x03,0xb3,0x6b,0x92,0xfc,0x19,0xa8,0x79,0x01,
    0x7f,0xae,0x4b,0x38,0xee,0x30,0x4e,0xd0,0xaf,0x77,0x64,0x36,0xe1,0xcb,0x90,0x84,
    0xdc,0xda,0x72,0x2e,0x7b,0x83,0xe4,0xd0,0x7f,0x7d,0x9c,0xec,0xf0,0x84,0x9c,0x97,
    0x1d,0x29,0x7b,0x90,0xab,0x77,0xb2,0x37,0x27,0xe4,0xbc,0xec,0xad,0x09,0xeb,0x83,
    0x9d,0x9b,0x9d,0xec,0x6d,0x09,0xb9,0x5b,0x2b,0x6b,0x40,0x58,0xc1,0xc6,0x6a,0x3e,
    0x1c,0x2c,0x7e,0x8e,0x62,0x30,0x2e,0x21,0x87,0xf8,0x21,0x17,0xde,0xe3,0xda,0x0f,
    0xee,0x8e,0xec,0xba,0x47,0xed,0xc7,0xef,0x51,0xaa,0x63,0x7c,0xc2,0x73,0xfd,0xd0,
    0x1d,0x9d,0x61,0xf0,0xe7,0x6e,0xd5,0x39,0x5e,0xfd,0x68,0x7a,0xf7,0xb8,0x7e,0x44,
    0xdf,0xdd,0xaa,0xb8,0xde,0x2d,0xfb,0x90,0x9d,0x20,0xd9,0x09,0x49,0xbe,0x36,0x4f,
    0x54,0xff,0x34,0x14,0x76,0x1f,0x17,0xe8,0x8f,0x59,0xf2,0xff,0xbe,0x84,0xfd,0xbf,
    0x54,0xfe,0x3f,0xee,0xfc,0x07,0x77,0x7f,0x76,0x3d,0x20,0xbd,0xfb,0x55,0xd7,0xe3,
    0x2a,0x3f,0xa0,0xf9,0x8d,0xf6,0x3c,0xa4,0xd8,0x16,0x0a,0x79,0xcc,0x1e,0x56,0xcc,
    0x6a,0xc5,0x9b,0xec,0x64,0xc9,0xd6,0x38,0xd9,0x29,0x4e,0x76,0x72,0x25,0xee,0x1c,
    0x9b,0x53,0x85,0x1f,0x2a,0x7b,0x53,0x9c,0x9d,0x69,0xb2,0x53,0x74,0x76,0xa6,0x3b,
    0x3b,0xd3,0x9c,0x9d,0x47,0x9d,0x1d,0xd8,0x9c,0xee,0xfa,0x62,0x46,0xc2,0x6f,0x1f,
    0x1e,0x75,0x7d,0x31,0x53,0xb6,0x67,0x54,0xb5,0xf9,0x71,0xd7,0x17,0xeb,0xca,0xfc,
    0x96,0x02,0x71,0x99,0xa9,0x38,0xd9,0x7c,0x7c,0x42,0xb9,0xdb,0xc6,0xd4,0x53,0x09,
    0x31,0xe8,0xf4,0xaa,0xa1,0x4f,0xb3,0xdc,0x1c,0x7f,0x4a,0xb9,0xe2,0x17,0xe2,0xe6,
    0xec,0x81,0x7b,0x42,0x7d,0x36,0x2f,0x21,0x06,0x7d,0x3b,0x0f,0x8b,0x6f,0xf6,0xf0,
    0xbd,0x86,0x3d,0x0b,0x5f,0x90,0x50,0x0e,0x38,0xf6,0xba,0xc8,0x39,0x95,0xf3,0x25,
    0xce,0xee,0x82,0x2a,0xbb,0x0b,0x65,0x77,0x4e,0x92,0xdb,0x59,0x9c,0x10,0xaf,0xb6,
    0xb3,0xc4,0xd9,0x59,0x2c,0x3b,0x3f,0xa9,0xe1,0x9a,0xb7,0x54,0x1c,0xda,0x8f,0xfa,
    0x0c,0xff,0xb3,0xc3,0x97,0x24,0xf9,0x3e,0x79,0x79,0x42,0x9d,0x82,0x7b,0xe7,0xb3,
    0x22,0x21,0xde,0xe8,0xde,0xb5,0xae,0x4c,0x88,0x7f,0xe8,0xf6,0xd8,0xab,0xa5,0x5b,
    0xe3,0x74,0xd7,0x24,0xc4,0xfd,0x7b,0xda,0xb5,0x09,0xf1,0x65,0xee,0x3d,0xed,0xba,
    0x84,0x36,0xd7,0x3a,0x5f,0x5e,0x93,0xbd,0xa2,0xb3,0xb7,0x3e,0x21,0xde,0xe8,0x74,
    0x37,0x24,0xd4,0x5f,0xef,0x74,0x37,0x25,0x6c,0xa3,0x6f,0xc7,0x1b,0x09,0x71,0xdf,
    0x8e,0xbf,0x25,0xc4,0x7d,0x3b,0xde,0x92,0xae,0x6f,0xc7,0xdb,0x09,0x71,0xdf,0x8e,
    0x77,0x12,0xe2,0xbe,0x1d,0xef,0x26,0xb4,0xf9,0x8e,0xf3,0xe5,0x3d,0xd9,0xf3,0xed,
    0xd8,0x92,0x10,0xf7,0xed,0x78,0x3f,0xa1,0x3e,0x38,0xbb,0x47,0x9a,0x10,0xb0,0x7d,
    0xe0,0x90,0x13,0x26,0xba,0xfd,0x1d,0xb8,0x7b,0xb1,0x16,0x68,0x7f,0x87,0xdf,0xb6,
    0xbe,0xdd,0xa7,0xfd,0x9d,0x95,0x1f,0xd4,0xfe,0xce,0xca,0x8f,0xb8,0xfd,0x1d,0xe6,
    0xc8,0xe4,0x80,0x3a,0x90,0x03,0x67,0x73,0x67,0x6a,0xc0,0x3e,0xb0,0xf2,0xb4,0x80,
    0x6d,0xb1,0x3d,0xf0,0xa3,0x01,0xef,0x0f,0xed,0x7b,0xb1,0xe1,0x9a,0xb3,0x9f,0x24,
    0x94,0x9d,0xea,0xe6,0xdd,0xf6,0x84,0xe5,0x4f,0x5c,0x7e,0xff,0x42,0x72,0x1e,0xdb,
    0x99,0xd0,0x1f,0x60,0xc3,0x85,0xe1,0x23,0x3b,0xe0,0xdb,0x1d,0x56,0x4a,0xa9,0xbf,
    0xdd,0xe5,0x8f,0xda,0x94,0xb2,0xe0,0xac,0xad,0x61,0x4a,0x3f,0x47,0x48,0x26,0x4a,
    0x29,0x07,0xfc,0x06,0x61,0x71,0x4a,0x1c,0xdf,0x83,0x35,0xe8,0xde,0x25,0x49,0x89,
    0xe3,0xde,0x03,0xe5,0x72,0x9a,0xdf,0x7b,0x80,0xdb,0xa1,0xf6,0xdb,0x7e,0xb3,0x2e,
    0xa5,0xcc,0xf5,0x2a,0x37,0x49,0x89,0xd9,0xfd,0x60,0xd3,0x94,0x18,0xe6,0xdd,0x63,
    0xea,0xdf,0xe6,0x29,0xf1,0x49,0x85,0x7c,0x9e,0xb7,0x48,0x89,0xdb,0xbb,0xb3,0x25,
    0xd2,0xdf,0x5b,0xb2,0xe0,0xad,0xce,0x56,0x6a,0x9b,0xbd,0x5f,0xdb,0x37,0xa5,0x1c,
    0xf0,0x61,0x76,0xbe,0x28,0x25,0xfe,0xa0,0xd6,0x1e,0x1b,0x2f,0x13,0x75,0xfe,0xab,
    0xf2,0x6d,0x54,0x99,0x75,0x21,0xa7,0x42,0x1e,0x63,0xc9,0x7c,0x7c,0x2a,0xe0,0xf8,
    0xdb,0xa0,0x31,0x38,0xdb,0x8d,0x41,0x70,0xb3,0xb2,0x6b,0xb6,0x6c,0xe2,0xb7,0xf9,
    0xfb,0x4c,0x40,0xbb,0x83,0xdc,0x79,0xab,0xf9,0x01,0x71,0xf8,0x62,0xf7,0x5a,0x0b,
    0x74,0x9f,0x35,0x5f,0xe7,0xc6,0x9f,0x93,0xad,0xe7,0x82,0x3c,0x26,0x67,0xd7,0x51,
    0x6e,0x92,0xec,0x42,0xce,0xea,0x9c,0xed,0xda,0xf1,0x59,0x99,0x75,0xa2,0x6d,0xd0,
    0x81,0x8d,0x87,0x55,0xcf,0xa2,0x80,0x6d,0xe9,0x23,0xfd,0x25,0xd2,0x5f,0xe2,0xea,
    0x39,0xa7,0x8e,0x72,0xd6,0x5e,0xc3,0xcf,0x15,0x6e,0x73,0xd1,0x72,0xc0,0xf2,0x80,
    0x3a,0x4b,0xdd,0x3c,0x5e,0x11,0x50,0x7e,0xb9,0xea,0xb1,0xfb,0xaf,0xc1,0xce,0xcf,
    0x4f,0x14,0x6f,0xdc,0x4f,0xc2,0xe7,0x25,0x8e,0x7b,0xcf,0x71,0xb0,0xb5,0x24,0xc8,
    0xd7,0x16,0x7c,0x57,0xee,0xd7,0x96,0x35,0x01,0xef,0x01,0x57,0x07,0xbb,0xaf,0x09,
    0x6b,0x83,0x7c,0x4d,0x58,0x13,0xe4,0x6b,0x42,0x25,0xaf,0x8a,0x43,0x3d,0x6b,0x75,
    0x9e,0x7f,0xa3,0xeb,0x53,0xf4,0xc5,0x06,0xf4,0x9d,0xfc,0xde,0xe0,0xce,0x2a,0x6e,
    0x72,0xf7,0x9b,0x68,0x9b,0xc9,0x6c,0x74,0x67,0x09,0xdf,0x50,0x7f,0xa2,0xbd,0x90,
    0xdf,0xa0,0x38,0xbc,0x29,0xd9,0x37,0x5d,0xbc,0xbb,0xd4,0x51,0xfe,0x41,0xc5,0x64,
    0xd7,0xfb,0x68,0xe5,0x14,0x9c,0xd1,0xb7,0x58,0x6f,0x0e,0x28,0x0f,0xee,0x0a,0xb5,
    0xf3,0x3d,0xd7,0xce,0xcd,0x6a,0x27,0xda,0xb3,0xad,0xea,0xbc,0xfa,0x07,0xf8,0x6e,
    0x46,0xdf,0x23,0xe0,0x37,0xbe,0xd5,0xc0,0x59,0xd5,0xeb,0xca,0x8c,0x47,0x57,0xdd,
    0x57,0x1b,0x3e,0xa4,0x4c,0xdb,0xe0,0x4b,0x6e,0x6d,0xf8,0xcf,0xf4,0x9b,0x67,0x8a,
    0x8f,0x49,0x89,0xfb,0xcb,0xce,0xc7,0x1e,0x9b,0x92,0xf7,0xe7,0x63,0x8f,0x4b,0x89,
    0xfb,0xf3,0xb1,0x27,0xa4,0xc4,0xfd,0xf9,0xd8,0x13,0x53,0xe2,0xfe,0x7c,0xec,0x0f,
    0x25,0xe7,0xcf,0xc7,0x9e,0x9c,0x12,0xf7,0xe7,0x63,0xdb,0xa4,0xd4,0x07,0x67,0xba,
    0x6d,0xa5,0xeb,0xcf,0xc7,0xb6,0x4b,0x89,0xfb,0xf3,0xb1,0xed,0x53,0xea,0xb7,0x73,
    0xba,0x1d,0xa5,0xeb,0xcf,0xc7,0x9e,0x9a,0x12,0xf7,0xe7,0x63,0x4f,0x4b,0xa9,0x7f,
    0xaa,0xd3,0x3d,0x2c,0xfd,0xe6,0x99,0xe2,0xce,0x29,0x71,0x7f,0x59,0xcc,0xce,0x4c,
    0xc9,0xfb,0x98,0x9d,0x93,0x12,0xf7,0x31,0xeb,0x92,0x12,0xf7,0x31,0xeb,0x9a,0x12,
    0xf7,0x31,0x3b,0x4f,0x72,0x3e,0x66,0xe7,0xa7,0xc4,0x7d,0xcc,0x2e,0x48,0xa9,0x7f,
    0xbe,0xf3,0xfd,0x22,0xe9,0xfa,0x98,0x75,0x4f,0x89,0xfb,0x98,0x5d,0x9c,0x52,0xbf,
    0xbb,0xd3,0xfd,0x89,0x74,0x7d,0xcc,0x7a,0xa4,0xc4,0x7d,0xcc,0x7e,0x9a,0x52,0x1f,
    0x9c,0x9d,0x29,0x3e,0x3c,0x65,0x2c,0xc1,0xe1,0x79,0x1b,0xbe,0xfb,0x02,0x66,0xf3,
    0xe3,0x8a,0x94,0xeb,0xed,0xd1,0x41,0xfe,0x2c,0xb1,0x6f,0xca,0x6f,0xfd,0xc1,0xe1,
    0x5d,0x08,0x1e,0x29,0xf5,0x4b,0xf9,0xcd,0xd8,0x20,0xf7,0xbd,0xd6,0xaf,0x52,0xe2,
    0xf6,0xcc,0xb4,0x3e,0x25,0x36,0x4f,0xdf,0xf1,0xd9,0xb3,0xca,0x2b,0x53,0x72,0xa6,
    0x77,0x55,0x95,0xde,0xd5,0x29,0xb1,0xea,0xf3,0x84,0xbf,0x4e,0xc9,0x99,0x5e,0xff,
    0x2a,0xbd,0x6b,0x52,0x62,0xd5,0xe7,0x0b,0x07,0xa4,0xe4,0xec,0x7d,0xd5,0xc0,0x94,
    0x6d,0x5a,0x56,0xc8,0xdb,0x73,0xad,0xda,0x33,0xd0,0xd9,0x1f,0x94,0x12,0xb7,0xf7,
    0xc7,0xd7,0x49,0x6f,0x95,0x7b,0x6f,0x3b,0x38,0xa5,0x1c,0x38,0xff,0x1e,0x7b,0x48,
    0x4a,0xce,0x62,0xd8,0x98,0xf2,0x5b,0xcf,0x2b,0x9c,0x1f,0x37,0xa4,0xc4,0xbd,0x1f,
    0xc3,0xe4,0xc7,0x0d,0xce,0x8f,0xe1,0x29,0x71,0xf3,0x63,0x84,0xf4,0x56,0xb9,0x7d,
    0xdf,0x4d,0x29,0xe5,0x46,0xb8,0x7d,0xc1,0xc8,0x94,0xb8,0x7f,0x4e,0x3c,0x2a,0x25,
    0x8e,0xbe,0xc7,0x37,0x84,0x3b,0x0b,0xf9,0xb3,0xd6,0x3f,0xa4,0xfc,0xae,0x10,0xf1,
    0x1a,0x92,0xe6,0xcf,0x5a,0x6f,0x49,0xc9,0x59,0x5b,0x46,0xa7,0xb4,0xd3,0xa0,0x3d,
    0x44,0xe5,0xbd,0x60,0x4a,0xb9,0xd1,0x6e,0x2c,0x8d,0x4b,0x89,0xa3,0xdf,0xec,0x7e,
    0xf5,0x8e,0x94,0xfd,0x3f,0xce,0xed,0x7f,0xc6,0xbb,0xfd,0xcf,0x1d,0x69,0xfe,0xdc,
    0xd3,0xf6,0x22,0x5f,0x07,0xcc,0xd7,0x97,0xeb,0xf9,0xcb,0x07,0x69,0x9e,0x9b,0xc7,
    0x6b,0xae,0xf5,0x16,0xf7,0xe1,0x1e,0x38,0xdb,0xf3,0x3e,0x96,0x52,0x17,0x32,0xc8,
    0xe5,0x4f,0xa5,0x79,0x2e,0x07,0x37,0x13,0xe3,0x3c,0x65,0x2e,0x9f,0xe9,0xda,0xfb,
    0xa9,0x74,0x3e,0x70,0x7b,0xbf,0xcf,0x52,0xe2,0x26,0xb3,0x23,0x65,0x7d,0x5e,0xe6,
    0x8b,0x94,0xb8,0xed,0x21,0xbf,0x4a,0x89,0x41,0xd7,0xf6,0x8c,0x3b,0x53,0xe2,0xf8,
    0xee,0xde,0xf6,0x8c,0xff,0x4a,0x89,0x63,0xcf,0x78,0xa5,0xc5,0x20,0x25,0x6e,0x7b,
    0xc0,0x9a,0x32,0x31,0xeb,0xeb,0x62,0x99,0x18,0xbe,0xd7,0xb7,0xf3,0x25,0xb5,0xfa,
    0x16,0x15,0x9c,0xed,0xab,0x83,0x32,0x71,0x7b,0x0f,0x62,0x31,0x0e,0xcb,0xe4,0x6c,
    0x8f,0x15,0x97,0xa9,0x17,0xea,0x39,0xb5,0xc5,0x05,0x7f,0x6d,0x3f,0xb1,0x77,0x1d,
    0xf3,0x0d,0xd6,0x3d,0xc8,0x23,0x66,0xb6,0xb7,0x9b,0x95,0xb2,0xdf,0xda,0xe9,0x6c,
    0xcb,0xb3,0x2e,0xd6,0xe0,0x66,0x67,0xd7,0x02,0xd9,0x9c,0x9d,0xe6,0x67,0xd7,0xe6,
    0xaa,0xff,0xbe,0x76,0x7b,0xcf,0x79,0x29,0xf1,0x31,0x2e,0xdf,0xcd,0x4f,0x59,0xff,
    0xbc,0x94,0xfe,0x3d,0x2b,0x5b,0x0b,0xaa,0xca,0xcf,0x3a,0x7f,0x5b,0xd6,0x51,0x6f,
    0xb6,0xf2,0x24,0x64,0x2d,0x56,0x0b,0xab,0xfc,0x7d,0xd9,0xf9,0x0b,0x6e,0x51,0x76,
    0xbd,0x24,0x9b,0x8b,0x9c,0xbf,0x2f,0x38,0x7f,0x6d,0x5f,0xfc,0x62,0x4a,0xdc,0xfb,
    0xbb,0x54,0xfe,0xbe,0x28,0xff,0x5e,0x96,0xad,0x97,0xaa,0xca,0x2f,0x3b,0x7f,0xf7,
    0xa9,0xa3,0xde,0x22,0xf9,0x0b,0x59,0xdb,0x2f,0x2d,0xab,0xf2,0x77,0xbd,0xf3,0x17,
    0xdc,0xab,0xd9,0xb5,0x5e,0x36,0x5f,0x75,0xe3,0x64,0x85,0xfc,0x18,0xe4,0xef,0xb9,
    0x53,0xe2,0xab,0xdc,0xda,0xb1,0x3a,0x65,0xbc,0x56,0x3a,0xdd,0xb5,0xd2,0xc5,0xff,
    0xf9,0x60,0x79,0x67,0x5d,0x4a,0xdc,0x9f,0x8d,0x7e,0x2d,0xa5,0xef,0xeb,0xd4,0x36,
    0xf3,0x63,0xbd,0x6b,0x5b,0xeb,0x3a,0xca,0xa0,0xbd,0xaf,0xc9,0x5f,0xe3,0xf6,0xaf,
    0x63,0xdd,0xe0,0x56,0x8b,0xb3,0x7d,0xd9,0x46,0x37,0xbf,0x21,0x87,0x18,0x1b,0xf7,
    0xba,0xe3,0x5a,0xd7,0xe5,0xe7,0x3a,0x2b,0x67,0x18,0x35,0x87,0x91,0x57,0x0c,0x7b,
    0x53,0xf3,0x15,0x98,0x9d,0x6f,0x78,0x2b,0x25,0xde,0xc3,0x9d,0x65,0x78,0x3b,0xa5,
    0xfe,0x5b,0xee,0xfe,0xe8,0x9d,0x94,0xb8,0xb5,0x79,0x73,0x4a,0x6c,0xa3,0x5b,0x6b,
    0xb7,0xa4,0xc4,0xe1,0x57,0xd7,0x42,0x52,0xd9,0x6f,0x84,0x21,0xf7,0x80,0xe0,0x6a,
    0xf5,0x7d,0x7e,0x51,0x3e,0x23,0x56,0xdb,0xb4,0x97,0x8d,0xc2,0x7c,0xcf,0x78,0x8b,
    0xf6,0x92,0x25,0xbd,0xcb,0x31,0x7c,0xb4,0xf6,0x92,0xb7,0xe8,0x39,0x9b,0xd7,0xdf,
    0xa6,0x7d,0x33,0xe4,0x4e,0xa9,0x63,0xbd,0x88,0x3f,0x74,0x60,0xdb,0xc6,0xd1,0xb7,
    0x42,0xe6,0x56,0x7b,0xcf,0xd3,0x34,0xcc,0xc7,0x11,0xb8,0x26,0xf8,0x3e,0x58,0xfb,
    0xdb,0x26,0xee,0x1b,0xe1,0x66,0x21,0xbf,0xf5,0xdc,0xe1,0xce,0x42,0x34,0x0f,0x89,
    0x8f,0xb4,0xf7,0x4f,0x21,0xb1,0xfa,0x42,0xae,0xb7,0x97,0xf4,0x1a,0x9c,0xde,0xde,
    0x21,0x71,0xd3,0x6b,0x19,0x12,0xab,0x77,0xdf,0x2e,0xb7,0x0a,0x69,0xaf,0xa5,0xfb,
    0x76,0x79,0xdf,0x90,0xdf,0xbc,0xb6,0xd2,0x77,0xe9,0xf8,0x7f,0x07,0x0e,0xd0,0xff,
    0x39,0xd0,0x2b,0x2b,0xe3,0x37,0x64,0x4e,0xa9,0x63,0x6c,0xac,0x1d,0x4d,0xc3,0xdd,
    0xbf,0x23,0xc6,0xdf,0x9d,0x59,0x04,0x4f,0xca,0xae,0x7f,0x03,0xeb,0x46,0xe3,0xe5,
    0xf8,0x4c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     ind += scale;
//     ind -= 3;
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     int count = subgroupClusteredAdd(1, 16);
//     ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//     ivec3 dx = ivec3(rgbColor)- avg;
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = kAlphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = result . a > 0;
//
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(punchthrough && indices == 3){
//                 indices = 2;
//             }
//
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//
//     uint active_lane_index = subgroupClusteredMax(controlFlag ? gl_SubgroupInvocationID : 0, 16);
//     color565 = subgroupShuffle(color565, active_lane_index);
//     if(punchthrough && result . a == 0){
//         indices = 3;
//     }
//
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
