// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x59,0x6b,0x90,0x55,0xc5,
    0x11,0x3e,0xa7,0x67,0x60,0x01,0x89,0x80,0xe0,0x13,0xc4,0x20,0x56,0x2c,0x15,0xc9,
    0x9a,0x12,0xb3,0x96,0x20,0xba,0x46,0x17,0x8c,0x8a,0xb8,0x1a,0x30,0xb1,0x40,0x5c,
    0x09,0x48,0x14,0x4a,0xc4,0x95,0xb8,0x2c,0xaf,0x00,0x02,0x0a,0x56,0x88,0x06,0x25,
    0xf2,0xd0,0x32,0x31,0x3e,0x22,0xfe,0x88,0x89,0x28,0x46,0x83,0x08,0x11,0x88,0xa6,
    0x78,0xa9,0xbc,0x0a,0x7c,0x44,0x57,0x31,0xae,0xa5,0xb8,0x2a,0x86,0xcd,0xf4,0xfd,
    0xbe,0xf6,0xf6,0x5e,0xb7,0x72,0xab,0x4e,0xdd,0xdb,0x5f,0xf7,0xd7,0xd3,0xd3,0x33,
    0xd3,0x7d,0xce,0xb9,0x41,0x7a,0x97,0x65,0x21,0xcf,0x3a,0x64,0xed,0xb2,0x8e,0x6d,
    0xb2,0xc2,0xa7,0x4b,0x26,0x59,0xce,0xef,0xbe,0xfc,0x1e,0xc0,0xef,0x0b,0xd2,0xf7,
    0x61,0x59,0xdb,0x82,0xbe,0xea,0x92,0xea,0x4b,0xfa,0xde,0x32,0xe9,0xfa,0xbe,0x67,
    0xf6,0x2b,0x57,0xde,0xe1,0x59,0x28,0xf0,0x55,0xd7,0x29,0x2b,0xcb,0xd4,0x5d,0x4c,
    0xd7,0x4d,0xa3,0x6e,0x18,0xaf,0xf8,0xb6,0x74,0xed,0x4a,0x57,0xe7,0xc4,0x8f,0x05,
    0x7f,0x59,0x76,0x1e,0xed,0xf5,0x1a,0x94,0x18,0xfd,0x10,0x42,0xd6,0x9b,0xdf,0x86,
    0xe5,0xc4,0xa2,0xc3,0x84,0x58,0x3b,0x87,0x05,0x62,0x1d,0x1d,0x16,0x89,0x75,0x76,
    0x58,0x1b,0x62,0xdd,0x1c,0xd6,0x96,0xd8,0x31,0x0e,0x2b,0x23,0xd6,0x43,0xe7,0x9b,
    0xbc,0xdb,0xb8,0x55,0xc9,0xeb,0xb6,0x42,0x2e,0xb2,0xec,0x38,0xca,0xbb,0x28,0x77,
    0xa7,0xbc,0x29,0x05,0x7d,0x22,0xe7,0x61,0x72,0x2f,0x27,0x1f,0x2f,0x2d,0xf5,0x2a,
    0xf7,0xe2,0x5c,0x75,0x2c,0x95,0x8f,0xa5,0xee,0x44,0x81,0x6f,0x95,0xbb,0xa6,0x08,
    0x34,0x86,0x5e,0xc9,0x26,0x30,0x9e,0x23,0x93,0x8d,0xc6,0xff,0x5d,0xfa,0x3b,0x3a,
    0xc9,0x65,0x9c,0x93,0x14,0xf0,0x58,0xc8,0x53,0x19,0x2f,0xb5,0x6f,0x4f,0xfb,0x9c,
    0xfa,0x0e,0xd4,0xb5,0x27,0xbf,0x33,0x7f,0x1b,0xbf,0x1b,0xf5,0xea,0xf3,0x34,0xf2,
    0xbf,0x9f,0xae,0xd3,0x9d,0x5c,0xce,0x35,0xe8,0x99,0xbc,0xf5,0x23,0xff,0xff,0x5d,
    0xea,0xf7,0x2c,0xfe,0x56,0xfb,0x73,0x28,0xff,0x90,0x98,0xf9,0xad,0xe0,0xb8,0x6a,
    0x7f,0xb6,0xe3,0x9b,0xbe,0x3f,0xe7,0xdd,0x8d,0x7b,0xf5,0x34,0xe6,0xa3,0x92,0xf3,
    0x33,0xbb,0x8b,0xb8,0xbe,0x26,0x57,0x71,0xff,0x98,0x7c,0x05,0xf7,0x84,0xc9,0xd5,
    0xdc,0x3f,0x26,0x5f,0xcd,0x7d,0x64,0xf2,0x08,0xee,0x25,0x93,0x6b,0xd2,0x75,0x82,
    0x93,0x47,0x33,0x7f,0x9a,0xcf,0x5b,0x19,0x73,0x74,0xf1,0xd5,0xd2,0x5f,0x8f,0x24,
    0xdf,0x96,0xbe,0x6f,0x25,0x66,0xfc,0xc9,0x85,0x73,0x95,0x65,0x7d,0x52,0xe6,0x55,
    0xf7,0x4b,0xfa,0x1c,0xc1,0xd8,0x27,0x3b,0xdb,0xdb,0x4b,0x72,0x52,0xc7,0x73,0x60,
    0xdc,0x29,0xe4,0x56,0xd0,0xb6,0xce,0xd9,0xd6,0x97,0xe4,0x69,0x2a,0xd7,0xda,0xb8,
    0xd3,0x68,0x53,0x4d,0x5d,0x9d,0xd3,0x4d,0xa7,0xae,0x9c,0x71,0x79,0xbf,0x33,0x78,
    0x26,0xcc,0x76,0xa6,0x8b,0x7f,0x2a,0xf5,0x66,0xfb,0xab,0x74,0x75,0x70,0xb6,0xb3,
    0x5c,0xbc,0x55,0xd4,0x9b,0x6e,0x36,0xc7,0xab,0xa0,0x1f,0xaf,0x9b,0x43,0x5e,0x75,
    0x2b,0xba,0x3b,0x18,0xab,0x8d,0x7f,0xbb,0xd3,0xcd,0x2d,0x99,0xa3,0xd7,0xcd,0x73,
    0x73,0x2c,0xd5,0xcd,0x77,0xbc,0x8a,0x12,0xdd,0x9d,0x8c,0xa5,0xbc,0x15,0xdd,0x5d,
    0xdc,0xb7,0xf5,0xb4,0xf1,0xba,0x05,0x2e,0x9f,0x53,0x39,0x7f,0xd3,0x2d,0x74,0xf3,
    0xab,0xf8,0x46,0xd7,0xb5,0xb0,0x7f,0xee,0xe6,0x1e,0x99,0xc2,0x35,0x9b,0xce,0x9c,
    0xcf,0x62,0xce,0xe6,0x30,0x07,0x73,0x39,0xa7,0xf9,0x8c,0xf1,0x2e,0x8e,0xb9,0x90,
    0x67,0x6c,0x11,0xd7,0xff,0x36,0xb7,0x3e,0x2b,0x75,0x8f,0x7c,0xdd,0xdc,0x6c,0xf2,
    0xd3,0xe9,0x6a,0x0e,0x45,0xfd,0x5f,0x54,0x4e,0xa4,0xa3,0x52,0x05,0x58,0xcd,0xda,
    0xa2,0x3a,0xfd,0xbd,0xa6,0x70,0x3a,0x0f,0x55,0x9a,0xfc,0x52,0x41,0x9e,0x76,0x81,
    0xc9,0x9b,0x70,0x7c,0x07,0xea,0x39,0xd9,0xc2,0xb3,0x1e,0x18,0xcb,0x56,0xee,0xcd,
    0x2d,0xac,0x0f,0x5b,0xd9,0x4b,0x72,0x27,0xef,0x72,0xfb,0x57,0xb9,0xbb,0x59,0x0f,
    0x94,0xbf,0x87,0xba,0xb6,0x4e,0xbf,0xaf,0xe4,0x1c,0xbe,0x57,0xe8,0x59,0x38,0xa7,
    0x92,0xc3,0xd6,0xeb,0xcb,0xf2,0x62,0x9d,0x50,0xb9,0x5d,0x8e,0x3a,0xa2,0x6b,0xa2,
    0xf6,0xed,0x73,0x8c,0xa9,0x76,0xb5,0xd4,0x9b,0xed,0x61,0xe9,0x77,0xb3,0xe3,0x1e,
    0x95,0xa3,0x26,0x98,0xdc,0x3d,0xc7,0x5c,0x2d,0x17,0x67,0x6b,0xb0,0xd9,0xde,0xf3,
    0x4c,0x3f,0x30,0xc7,0x5a,0x98,0x3c,0x36,0x2f,0xd6,0x1c,0x95,0xef,0xcc,0x5b,0xd6,
    0xe4,0xc5,0x1c,0x4f,0xe7,0xf2,0x44,0xfa,0x3d,0x80,0x35,0xe8,0xd8,0xa4,0x7d,0x85,
    0xb6,0x6c,0xf5,0xdf,0x7c,0x72,0x7e,0x77,0x4f,0x91,0x6c,0x48,0x82,0xda,0x69,0xee,
    0x36,0x52,0xa1,0xd8,0x39,0x94,0x37,0x11,0x53,0x7f,0xdd,0x05,0xfe,0xf2,0x12,0x7f,
    0x52,0xe8,0x01,0xf0,0xd1,0x43,0xe8,0x5b,0xe0,0x43,0xe5,0xe3,0x89,0xd9,0x1c,0x7a,
    0x09,0xee,0x05,0xfa,0x24,0x49,0xd7,0x59,0xfb,0x9d,0x62,0x95,0xac,0xe1,0x7d,0x52,
    0xc4,0x5a,0x27,0xff,0x11,0xb1,0xdf,0xab,0x1c,0xf6,0x4a,0xc4,0x79,0x18,0xed,0xb0,
    0x0d,0x11,0xe7,0xa7,0xdc,0xad,0xd1,0xc6,0x88,0xb5,0xf0,0x57,0x9e,0xe6,0xab,0x67,
    0x6a,0x73,0xc4,0x6f,0xb5,0x6b,0x88,0xc5,0x5c,0x1e,0xd6,0x06,0x3d,0xee,0xac,0xe4,
    0x57,0xb8,0x27,0x32,0xee,0xcd,0x2f,0x12,0xd2,0x86,0x7b,0x50,0xcf,0xcb,0xb0,0x80,
    0x75,0x32,0x79,0xa5,0x14,0x65,0xdd,0x3b,0x6f,0xe7,0x2d,0xe5,0x4f,0x28,0x37,0x25,
    0x6f,0xe7,0x32,0x1f,0x07,0xd3,0x6f,0xdd,0x47,0x03,0x05,0xfe,0xf5,0x7b,0x00,0xcf,
    0xc4,0x60,0xc1,0xbe,0x1f,0x92,0x58,0xca,0xbb,0x58,0x80,0x0d,0x96,0xe2,0x1a,0x4e,
    0x61,0xdf,0xfe,0xb1,0x40,0x3f,0x8b,0xf9,0xb8,0x54,0x80,0x69,0xfe,0xce,0x4f,0x98,
    0x9e,0x89,0xcb,0x04,0xe7,0x46,0xc7,0x1b,0xc0,0x75,0x18,0x22,0xc0,0xd7,0x24,0x1b,
    0x95,0x2f,0x17,0x60,0xfb,0xe8,0x5b,0x73,0x32,0x54,0x80,0xaf,0xa7,0xcd,0x95,0xb4,
    0x79,0xcf,0xd9,0x5c,0x25,0xc0,0xd5,0x46,0xe5,0x61,0x02,0x5e,0x7d,0x86,0x98,0x14,
    0x1b,0x2e,0xa8,0x61,0x05,0x1d,0xb1,0x9f,0x0a,0x62,0xcd,0x0a,0xb5,0x0b,0xd8,0xcf,
    0x04,0xb8,0xda,0x5f,0x91,0x46,0xd4,0xf9,0x3c,0x1c,0x81,0x9b,0xad,0x8d,0x33,0x82,
    0xe3,0x8c,0x76,0xe3,0x8c,0xa4,0x3c,0xc2,0x8d,0x33,0x8a,0xdc,0xdc,0x8d,0x73,0x9d,
    0x00,0x1f,0xe9,0xc6,0x79,0x24,0x02,0x7f,0x38,0xc2,0xd6,0xc6,0x19,0x2d,0x98,0x63,
    0x79,0xa1,0x96,0x01,0x1b,0x43,0x4c,0xc7,0xba,0x9c,0x79,0x1f,0x2b,0xb0,0x55,0xdd,
    0x74,0x62,0xe3,0x04,0x7e,0x55,0xa7,0x6b,0xa1,0xf7,0x33,0x8f,0xe4,0xb8,0xe7,0x29,
    0xe7,0x5a,0xa8,0xbf,0x3f,0xe6,0xc0,0xcd,0xe6,0x51,0xda,0x54,0x3b,0x9b,0xc7,0x72,
    0xe0,0x36,0xde,0xe3,0x39,0x78,0x8a,0xaf,0x4c,0x98,0x9e,0xff,0x3f,0xe5,0x18,0x53,
    0x75,0x4b,0x12,0x4f,0xeb,0xc1,0x93,0xc4,0x75,0xef,0x3d,0xc5,0xc3,0xfb,0x55,0xd2,
    0x29,0xbe,0x32,0x5d,0x8a,0xe9,0xfe,0xd3,0xdf,0x5f,0xa6,0xef,0x73,0xb9,0x1f,0x15,
    0x7f,0x89,0x63,0x3d,0x4d,0xbf,0x7a,0xfe,0xd6,0x13,0x5b,0x45,0x4c,0xcf,0x9f,0xe5,
    0x7a,0x75,0x0e,0x3c,0x73,0x6b,0xf2,0x7c,0x8e,0x79,0xa8,0xce,0xec,0x5e,0xa0,0x9d,
    0x5f,0x93,0x17,0x73,0xd8,0xaa,0xce,0xb8,0x6b,0xc9,0x55,0xcc,0xec,0xd6,0xe7,0xc0,
    0x57,0xe7,0xc8,0x8d,0xd6,0xab,0x7f,0xb2,0x56,0x99,0xff,0xd7,0x72,0xc4,0xec,0xfd,
    0x6f,0x66,0xbe,0xfc,0x3a,0x6e,0xc9,0x81,0xfb,0x3d,0xb4,0x35,0x07,0x7f,0x8b,0xf3,
    0xb7,0x9d,0xfe,0xfc,0x5e,0x7d,0x3d,0x87,0xed,0x76,0xb7,0x6e,0x6f,0x70,0xdd,0x46,
    0xbb,0x75,0x7b,0x33,0x07,0x6e,0xbc,0x1d,0x39,0xb8,0x8a,0x5f,0x9f,0x6c,0xb4,0xfe,
    0xee,0xe4,0x1c,0x46,0x6a,0xed,0x49,0xdf,0xbb,0x88,0xed,0x60,0x0c,0x7a,0xf6,0x6e,
    0x16,0xe0,0x79,0x61,0xcf,0xa1,0xce,0xd5,0x09,0x70,0x7f,0xad,0xa1,0x8f,0x29,0x02,
    0xbd,0xf6,0xab,0xf5,0xc4,0xa6,0x09,0xf0,0x8d,0xb1,0xe8,0x77,0x86,0x00,0xd7,0xcf,
    0x5a,0x62,0x33,0x05,0x78,0x3b,0x37,0xfe,0x2c,0xda,0xe5,0xce,0x6e,0xb6,0x00,0xd7,
    0x3e,0xf8,0x32,0xb1,0x39,0x02,0xfe,0x6c,0x29,0x72,0xe7,0x92,0x2b,0x8e,0x3b,0x4f,
    0x80,0x6b,0x1f,0x35,0xee,0x7c,0x01,0x7f,0x9e,0xe3,0xde,0x45,0x6e,0x70,0xdc,0x05,
    0x02,0x7c,0xb7,0x1b,0x77,0xa1,0x80,0xbf,0xc0,0x71,0x27,0x31,0x67,0x99,0xcb,0xd9,
    0x6f,0x04,0xb8,0xbf,0x2c,0x67,0xf7,0x08,0xf4,0x3e,0x67,0x8b,0x05,0xb8,0xcf,0xd9,
    0xfd,0x02,0xdc,0xe7,0x6c,0x89,0x00,0xf7,0x39,0x7b,0x80,0x76,0x3e,0x67,0x4b,0x05,
    0xb8,0xcf,0xd9,0x32,0x01,0x7f,0xa9,0x8b,0x7d,0x05,0xb9,0x3e,0x67,0x0f,0x0a,0x70,
    0x9f,0xb3,0x87,0x04,0xfc,0x07,0x1d,0xf7,0x61,0x72,0x7d,0xce,0x7e,0x2f,0xc0,0x7d,
    0xce,0xfe,0x20,0xe0,0xab,0x4e,0xeb,0x8a,0xf6,0x9a,0x5a,0x41,0x2e,0x55,0x77,0x6e,
    0xf2,0xa0,0xbd,0xac,0x56,0x8a,0xe7,0xe3,0x19,0xd6,0x42,0x3d,0xaf,0x33,0x89,0xad,
    0x12,0xf4,0xce,0x67,0x5c,0x9d,0x7b,0x56,0x70,0x16,0x2a,0xdc,0x59,0x78,0x4e,0x80,
    0x3f,0x9e,0x6c,0xb4,0x36,0xad,0x16,0x60,0xfd,0xd9,0x1b,0xd7,0x4b,0xb1,0x3e,0xa9,
    0xee,0x79,0x5d,0x1b,0xd6,0xa3,0xe7,0xe9,0x5b,0x9f,0xd9,0xfe,0x26,0xe8,0xb1,0x95,
    0xae,0x9f,0xbd,0x20,0xc0,0xad,0x2f,0xbd,0x28,0xc0,0x36,0x24,0xad,0xca,0x7f,0x17,
    0x60,0x17,0xf1,0x9e,0x42,0x6b,0xdd,0x7a,0xfa,0x5e,0xe3,0x7c,0xbf,0xd4,0x8a,0xef,
    0xb5,0x02,0x7c,0x63,0x92,0x54,0x7e,0x59,0x80,0x99,0x2f,0x1b,0x73,0x9d,0x40,0xe7,
    0x7d,0xeb,0xf7,0x81,0x94,0x59,0xd5,0x6f,0x8a,0x88,0x43,0xe7,0xb2,0x8e,0x73,0xb3,
    0x71,0x5f,0x69,0x65,0xdc,0x0d,0x02,0xdc,0xc6,0xdd,0x28,0xc0,0xae,0x60,0x6f,0xb0,
    0x71,0x37,0x09,0x74,0xc6,0x7b,0xb5,0x84,0xf7,0x9a,0x00,0xbb,0xba,0x84,0xf7,0x2f,
    0x81,0xce,0xea,0xe1,0x66,0xc1,0x5a,0xea,0xb3,0x88,0xc5,0xb5,0x85,0x71,0x6d,0x76,
    0xfe,0xb7,0x0a,0x70,0xeb,0x91,0xdb,0xc9,0xd3,0x67,0x62,0x1b,0xf3,0x75,0x81,0xdd,
    0x76,0xf6,0x49,0x1b,0xf3,0x0d,0x81,0xce,0xf6,0xce,0x0e,0xc1,0xbd,0xd7,0x33,0x2e,
    0x8e,0x5d,0x02,0xdc,0xc7,0xb1,0x9b,0x71,0xec,0x72,0x71,0xec,0x11,0xe0,0x16,0xc7,
    0x5e,0xf2,0x6a,0xb2,0xe2,0x7d,0xcd,0x3e,0x81,0xdd,0x5e,0x77,0x1f,0xf3,0x96,0x00,
    0xaf,0x74,0x71,0xbd,0x2d,0xc0,0x75,0xcf,0xeb,0xfd,0xdc,0xdd,0x85,0xb1,0xdb,0x16,
    0x9e,0x53,0xff,0x2d,0xb8,0xc7,0xd3,0x7c,0xbd,0x21,0xc5,0xfd,0xfc,0x9e,0x40,0x67,
    0x73,0x69,0x10,0xf8,0xd1,0x7b,0x9f,0x75,0xc4,0x3e,0x10,0xd8,0x35,0xb8,0x33,0xb4,
    0x5f,0xb0,0x17,0xaa,0x5c,0x3f,0xf9,0x48,0x80,0xeb,0xfa,0xd8,0xf9,0xf8,0x58,0xb0,
    0xb6,0x76,0x3e,0x9a,0xdc,0xf9,0x50,0x5d,0xa3,0xee,0x2d,0xee,0xb3,0x46,0xe7,0xff,
    0x53,0xc1,0xb8,0x9b,0x1c,0xf6,0x99,0x00,0xb7,0xbd,0xdf,0x44,0xde,0x01,0x69,0x29,
    0x37,0xb9,0xfd,0xfa,0x6a,0x04,0xaf,0x91,0xfe,0x0e,0x48,0x31,0xde,0xaf,0x04,0x31,
    0xab,0xcd,0xa3,0x3c,0x63,0x87,0x04,0x67,0x7a,0x25,0x9f,0x77,0x0d,0x97,0x00,0xfc,
    0x69,0x3e,0x3b,0x76,0x4c,0x77,0xc5,0x8a,0xb7,0x0d,0xa8,0x8d,0xa7,0xd3,0x9f,0xf2,
    0xd5,0x56,0x79,0xfa,0x7c,0xd4,0x81,0xbc,0x35,0x7c,0x8e,0x9c,0xc0,0xe7,0xa6,0x8e,
    0x01,0x5c,0x93,0x0f,0x0f,0xe0,0xcd,0x4d,0xb1,0xa9,0xdc,0x29,0xc0,0x46,0xf1,0xd9,
    0xc4,0xba,0x04,0xe0,0xea,0x73,0x06,0xb1,0x23,0x02,0x70,0x7d,0x26,0x1d,0xcf,0x35,
    0xed,0x1a,0x80,0xeb,0x7d,0xa1,0x3e,0x2f,0xac,0x8a,0xc0,0x36,0xf3,0x81,0xc0,0xea,
    0xdb,0xfb,0xec,0xf5,0x53,0x5d,0x7d,0x6b,0xc8,0x81,0xdb,0xfa,0x7d,0x90,0x03,0xb3,
    0xf5,0xdb,0xef,0xee,0xbf,0x54,0xf7,0x61,0xba,0xf6,0xf3,0xfe,0xeb,0x43,0xd7,0x37,
    0x8e,0x0d,0xe8,0x5b,0xc1,0xf5,0xad,0xde,0x01,0xb8,0xbf,0xac,0x6f,0x9d,0x14,0xa0,
    0xf7,0x7d,0xeb,0xe4,0x00,0xdc,0xf7,0xad,0x53,0x02,0x70,0xdf,0xb7,0x4e,0x0d,0xc0,
    0x7d,0xdf,0xea,0x43,0x3b,0xdf,0xb7,0x4e,0x0f,0xc0,0x7d,0xdf,0xea,0x1b,0xc0,0x57,
    0x9d,0x71,0xcb,0xc9,0xf5,0x7d,0xeb,0x8c,0x00,0xdc,0xf7,0xad,0x1f,0x04,0xf0,0xcf,
    0x70,0xdc,0x33,0xc9,0xf5,0x7d,0xab,0x5f,0x00,0xee,0xfb,0xd6,0x59,0x01,0xfc,0x7e,
    0x8e,0xdb,0x83,0x39,0x13,0x97,0xb3,0x73,0x02,0x70,0x7f,0x59,0xce,0xfa,0x07,0xe8,
    0x7d,0xce,0x06,0x06,0xe0,0x3e,0x67,0xe7,0x07,0xe0,0x3e,0x67,0x95,0x01,0xb8,0xcf,
    0xd9,0x8f,0x68,0xe7,0x73,0x76,0x61,0x00,0xee,0x73,0x76,0x51,0x00,0xff,0x42,0x17,
    0xfb,0x20,0x72,0x7d,0xce,0x06,0x07,0xe0,0x3e,0x67,0x17,0x07,0xf0,0x07,0x3b,0xee,
    0x25,0xe4,0xfa,0x9c,0x5d,0x1a,0x80,0xfb,0x9c,0x5d,0x16,0xc0,0x57,0x9d,0xf5,0xfa,
    0x9e,0x01,0xb9,0x54,0x9d,0xd6,0x3d,0x7d,0x4e,0x55,0x4c,0xf7,0xea,0x84,0xd0,0xb2,
    0x17,0x8f,0x4e,0xf2,0xb8,0x80,0xbd,0xaa,0xbf,0xad,0x2e,0xff,0x3c,0xe0,0xf9,0xd6,
    0xf7,0xad,0x31,0x01,0xb8,0xd5,0xd6,0xb1,0x01,0x98,0xf5,0xe2,0x1b,0x02,0x30,0xdf,
    0x8b,0x27,0xd0,0xf7,0x38,0xe7,0xfb,0x17,0xad,0xf8,0xbe,0x31,0x00,0xb7,0x3e,0x73,
    0x53,0x00,0x56,0xda,0x8b,0xc7,0x07,0xe8,0xbc,0x6f,0xfd,0xb6,0xda,0xb6,0x25,0x22,
    0x0e,0x9d,0xcb,0x78,0xce,0xcd,0xc6,0xbd,0xb9,0x95,0x71,0x27,0x06,0xe0,0x36,0xee,
    0x2d,0x01,0x58,0x69,0x2f,0x9e,0x14,0xa0,0x33,0x5e,0x6d,0x09,0xef,0xb6,0x00,0xac,
    0xb4,0x17,0x4f,0x0e,0xd0,0x59,0x0c,0x75,0x8c,0xc1,0xf7,0xdd,0x29,0x01,0xb8,0xf9,
    0x9a,0x16,0x80,0x95,0xf6,0xd8,0xe9,0x01,0x3a,0xf3,0x35,0x9b,0xbe,0x7c,0xef,0x9c,
    0x13,0x80,0x5b,0x9f,0x9c,0x17,0x80,0xf9,0x3e,0x39,0x3f,0x00,0xf7,0x7d,0xf2,0xce,
    0x00,0x5c,0xf7,0x8b,0xbe,0x07,0xf1,0x7d,0x72,0x61,0xc0,0xbb,0x11,0x9d,0xcb,0xf4,
    0x50,0xac,0x8b,0x77,0x07,0xe8,0xac,0x4f,0xfe,0x3a,0xc0,0x8f,0xef,0x93,0x8b,0x02,
    0xec,0x54,0x67,0x3d,0xeb,0x9e,0x80,0x75,0xf2,0x7d,0xf2,0xde,0x00,0xdc,0xf7,0xc9,
    0xc5,0x01,0x79,0xb7,0x3a,0xbb,0xdc,0xed,0x5d,0xd5,0xdd,0x97,0xae,0xa5,0xdc,0x03,
    0xf7,0x39,0xff,0xbf,0x0b,0x18,0x77,0x92,0xc3,0x1e,0x08,0xc0,0x6d,0x5f,0x2e,0x27,
    0x6f,0x69,0x68,0x29,0x2f,0x77,0x7b,0x69,0x5b,0x04,0xef,0x3e,0xfa,0x53,0x5b,0x8b,
    0xf7,0xa1,0x80,0x98,0xd5,0xc6,0xfa,0xde,0x93,0xae,0xef,0xa9,0xde,0xfa,0x9e,0xf5,
    0xb3,0x3f,0x07,0xd8,0x58,0x3f,0xfb,0x6b,0x00,0xe6,0xfb,0xd9,0xaa,0x00,0xdc,0xf7,
    0xb3,0x67,0x03,0x70,0xdf,0xcf,0x9e,0x0b,0xc0,0xad,0x9f,0xbd,0x1c,0x81,0xad,0xe2,
    0x7b,0x0e,0x9d,0x93,0xf5,0x20,0xfd,0x3e,0xc0,0x77,0xcf,0x6f,0x46,0xd8,0xe8,0xfd,
    0x80,0x72,0x96,0xf3,0x3c,0xeb,0xbe,0xf8,0x22,0xc7,0x73,0xb8,0x3d,0x1f,0x1f,0xcc,
    0x61,0xaf,0x9f,0x51,0x39,0x72,0xd2,0x25,0x16,0xdf,0x77,0x1e,0xe4,0xbb,0xd2,0xeb,
    0xa9,0xeb,0xda,0x8a,0xce,0xd6,0x72,0x5b,0x00,0x57,0x6d,0x74,0x2d,0x77,0xba,0xb5,
    0x54,0xdd,0xf6,0x74,0xed,0xe4,0x1a,0x6c,0x77,0x7b,0xea,0x38,0x72,0x94,0x6b,0x79,
    0xec,0x1e,0x81,0x9b,0x4d,0xcf,0x88,0xf1,0xbc,0xcd,0x09,0x11,0xb8,0xe5,0xba,0x57,
    0x04,0xa6,0x5c,0xcb,0xf5,0x89,0x11,0xb8,0xbe,0xaf,0xb5,0x5c,0xf7,0x8e,0xc0,0x35,
    0xd7,0x37,0x31,0x2f,0x27,0x45,0xe0,0x53,0x29,0x7f,0x2f,0x02,0xb3,0xf3,0x74,0x72,
    0x04,0xa6,0xef,0x79,0x9f,0xe0,0x7c,0x4f,0x89,0x78,0x4f,0x7c,0xb2,0xbb,0x8f,0x3a,
    0x35,0x02,0xaf,0xe7,0x7d,0x94,0xe5,0xfd,0xb4,0x08,0xdd,0x3a,0xeb,0xc9,0x11,0x3c,
    0xc5,0x75,0x1d,0x2d,0x2f,0x3b,0xb9,0x37,0xd5,0x66,0x47,0x44,0x1f,0xd0,0xb5,0x55,
    0x7b,0xcd,0xd9,0x53,0x1c,0x7b,0x77,0xc0,0x5a,0x8e,0xe5,0xfb,0xa1,0x77,0x5d,0xae,
    0x55,0xb7,0x27,0x5d,0xef,0xd0,0xe7,0x1e,0x9e,0x91,0xc2,0x3d,0x75,0xc0,0xfa,0x7d,
    0xc1,0xf7,0x1a,0x85,0x7b,0xea,0x00,0xbc,0xd6,0xf5,0xa1,0xb7,0x03,0xc6,0x7f,0x8b,
    0x67,0xe7,0x5d,0xfa,0x7a,0xa7,0x44,0x7e,0xd7,0xc5,0xbb,0x33,0x82,0xb7,0x87,0xfd,
    0x4b,0x6d,0x2d,0x57,0xef,0x97,0xc4,0xdb,0xe8,0xe2,0x55,0x5d,0x43,0xba,0x3e,0xa6,
    0xcf,0x06,0x17,0xef,0x7e,0x17,0xef,0x4c,0x62,0x1f,0x05,0xe0,0x3e,0xde,0xff,0x30,
    0xde,0x8f,0x18,0x5f,0x23,0x7d,0x7d,0x5c,0x22,0x37,0xba,0x78,0x77,0x47,0xf0,0x1a,
    0x18,0xaf,0xda,0x3e,0xc6,0x78,0x3f,0x2d,0x89,0xb7,0xd9,0xc5,0xab,0xba,0xcf,0x02,
    0xfe,0x57,0x51,0x9f,0xfa,0xdb,0xf6,0xc9,0xe7,0x8c,0xa3,0xd2,0xc5,0xd6,0x14,0x80,
    0xd7,0xb8,0x9e,0xfe,0x65,0x40,0xbe,0x9a,0x1c,0xf7,0x20,0xb9,0xfa,0x5f,0x81,0xd5,
    0xf6,0xaf,0x03,0xf0,0x7a,0xc7,0x3d,0x14,0x10,0xfb,0xd7,0x9c,0x9b,0xc5,0xd1,0xec,
    0xe6,0xb6,0x2f,0xc2,0x46,0xe7,0x7b,0x88,0xf1,0x9a,0x6e,0x6f,0xc4,0xd8,0xaa,0xfb,
    0x92,0xba,0xb1,0x39,0x74,0xb9,0x3b,0xdf,0x6a,0x57,0x9b,0x15,0x75,0xc1,0xe9,0xf6,
    0x51,0x67,0xcf,0x6f,0x6d,0x78,0x86,0x17,0xe7,0x45,0xac,0x8c,0x67,0x5a,0xb1,0xb5,
    0xc4,0xda,0x45,0xe0,0x55,0x9c,0x4f,0xe1,0x3f,0xe2,0x08,0xbe,0xea,0xec,0xbc,0x74,
    0x88,0xc0,0x6d,0xce,0x1d,0x23,0x30,0x8d,0xcf,0xee,0x81,0x0e,0x8f,0xc0,0x35,0xae,
    0x21,0xc9,0x93,0xde,0x07,0x36,0xf3,0xbf,0x01,0xd5,0x45,0xfe,0x87,0x22,0xfc,0x2f,
    0x40,0xd7,0x31,0x4a,0xcb,0xfb,0xf8,0x90,0xe4,0xc8,0xe7,0xa7,0xe0,0xde,0x3d,0xb7,
    0x17,0xd4,0xc5,0xdc,0xd5,0xc5,0x59,0x6e,0xfe,0xed,0xa5,0x65,0x5d,0x9c,0xd3,0x8a,
    0xce,0xea,0xe2,0xa0,0x08,0xee,0x1c,0xd6,0xc5,0xcb,0x62,0x31,0x06,0xd5,0x0d,0x4e,
    0x97,0x62,0x1a,0xc3,0x60,0x57,0xf3,0x16,0x90,0x33,0xcb,0xd5,0xbc,0x85,0x11,0xf8,
    0x37,0xfd,0x38,0x62,0x3c,0x6f,0xb3,0x28,0x02,0xb7,0xba,0x78,0x4f,0x04,0xb6,0xd0,
    0xd5,0xc5,0x7b,0x23,0x70,0x5f,0x17,0x7f,0x1b,0x81,0xfb,0xba,0xb8,0x38,0x02,0xb7,
    0xba,0x78,0x7f,0x04,0x66,0x7b,0x76,0x49,0x04,0xe6,0xeb,0xe2,0x03,0xac,0x8b,0x4b,
    0x5c,0x5d,0x5c,0x1a,0x81,0x97,0xd6,0xc5,0x65,0x11,0x3a,0xab,0x8b,0x2b,0x22,0x78,
    0xcb,0x58,0x17,0x2d,0x2f,0xfa,0x6d,0xfb,0xb7,0x91,0x75,0x51,0xd7,0x6b,0x05,0xf3,
    0xa7,0x79,0x1d,0x1e,0x5b,0xd6,0xc0,0xa1,0x49,0x1e,0x46,0xbe,0xfe,0xb6,0x9a,0x72,
    0x65,0xfc,0x76,0x0d,0xbc,0x2a,0x02,0xf7,0x35,0xe5,0x27,0x11,0x63,0x5d,0xc5,0x58,
    0x86,0xd3,0xd7,0xb0,0x12,0x79,0xb8,0x8b,0xed,0x93,0x08,0xde,0x50,0xc6,0x38,0x8c,
    0xb1,0xd5,0xc4,0x96,0xf5,0xee,0x1a,0xfd,0xcf,0x82,0xfc,0x6b,0x5c,0x6c,0x23,0xe3,
    0xb7,0xeb,0xdd,0xb5,0x11,0xb8,0x8f,0x6d,0x14,0x63,0xbb,0x96,0xb1,0xd4,0xd0,0xd7,
    0x75,0x25,0x72,0x8d,0x8b,0xed,0xd3,0x08,0xde,0x35,0x8c,0xed,0x3a,0xc6,0x36,0x31,
    0xb6,0xac,0x6d,0x63,0x92,0x3c,0x91,0xfc,0x31,0x6e,0xad,0x6f,0xe0,0x98,0xbe,0xb6,
    0x8d,0x8b,0xc0,0x7d,0x6d,0xbb,0x31,0x22,0x0f,0xe3,0x1c,0x77,0x3c,0xb9,0xbe,0xb6,
    0x4d,0x88,0xc0,0x7d,0x6d,0xbb,0x39,0x22,0xce,0x09,0x9c,0x87,0xc5,0x31,0xd1,0xcd,
    0xa3,0x89,0x36,0x3a,0x37,0xb5,0x1f,0xe3,0x74,0x9f,0x73,0x6c,0xd5,0xdd,0x48,0x9d,
    0xd5,0xaf,0x49,0xee,0x8c,0x7e,0x5e,0x52,0xdb,0x6a,0x9d,0xae,0xa9,0xa4,0xb6,0x4d,
    0xe6,0x39,0xf4,0xb5,0xed,0x76,0x9e,0x4b,0x5f,0xdb,0xea,0x22,0x70,0x5f,0xdb,0xa6,
    0x44,0xf0,0xeb,0x5c,0x6d,0xab,0x8f,0xc0,0x6d,0xce,0xd3,0x22,0xb0,0x49,0xae,0xb6,
    0xcd,0x88,0xc0,0x6b,0x5d,0x6d,0xfb,0x8e,0xa0,0xae,0xcd,0x88,0xc5,0xff,0x12,0xad,
    0xb6,0x69,0xae,0xac,0x8e,0x45,0xbe,0x07,0x52,0x4e,0x87,0x36,0xa8,0x89,0xda,0x1b,
    0x94,0xaf,0x79,0xb4,0x1e,0xd7,0x49,0x70,0x2f,0x68,0xf7,0xde,0x5d,0x5c,0x6d,0x54,
    0x5d,0xe7,0x74,0x75,0xa1,0xcf,0xce,0xee,0xfd,0xf0,0x11,0x7c,0x3f,0xdc,0xdf,0xbd,
    0x3f,0xe9,0x2a,0xc0,0xef,0xe0,0xbc,0xbb,0x09,0xb0,0x6a,0xf7,0xde,0xe5,0x48,0xf2,
    0xea,0x1d,0xef,0x28,0x01,0x6e,0xbc,0xa3,0x05,0x58,0xb5,0xfb,0x7f,0xee,0x18,0x81,
    0xbf,0xa3,0xdd,0xff,0x73,0xc7,0x09,0xfe,0xd7,0x39,0x86,0xcf,0x45,0xfa,0xbf,0x75,
    0x4f,0xfe,0x67,0x5d,0x93,0x64,0xfd,0xad,0x36,0x3a,0x7f,0xcd,0x8d,0xcd,0xa3,0x8b,
    0xb4,0xfc,0xaf,0x4c,0xbf,0xff,0x9b,0x32,0x59,0x91,0xae,0xff,0x01,0x5d,0x2a,0xf7,
    0xb5,0x68,0x27,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
//  uniform int kIsEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(kAlphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//     if(kIsEacRg != 0){
//         result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//     }
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//     if(kIsEacRg != 0)
//         finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
