// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5c,0x09,0xb8,0x95,0x55,
    0xd5,0x3e,0xe7,0x9e,0xfb,0xcd,0xd7,0x62,0x10,0x47,0x52,0x51,0x2b,0x94,0x41,0xc5,
    0x21,0x27,0x1c,0xfa,0x4b,0xcb,0x08,0x13,0x15,0x4c,0x14,0x42,0x99,0x4a,0x14,0xb0,
    0x24,0x4a,0x54,0x44,0x54,0x40,0xd0,0x4b,0x20,0x08,0x08,0x17,0x31,0x32,0xd4,0xc2,
    0x7e,0x31,0xcb,0x09,0x99,0x04,0x7e,0x35,0x45,0x03,0xc5,0x01,0xc8,0xc7,0x70,0x0a,
    0x0c,0x14,0x05,0xd3,0x9f,0xff,0x7b,0xcf,0xfb,0x2e,0xbe,0xc5,0x91,0x9f,0xe7,0xf9,
    0x38,0xdf,0x7e,0xdf,0xb5,0xd6,0x5e,0x7b,0xed,0xbd,0xd7,0xde,0xdf,0x74,0x2b,0x75,
    0x87,0x45,0xa5,0x4a,0xb9,0x94,0x96,0xe2,0xd2,0xec,0x86,0x52,0xf5,0x5f,0xf3,0x52,
    0x5d,0xa9,0xac,0xdf,0x8e,0xfa,0xed,0xac,0xdf,0x33,0xf5,0xfb,0x5f,0xf9,0x6f,0x56,
    0x0a,0xab,0x72,0x67,0x77,0x39,0xbf,0x4b,0xc7,0x9f,0xff,0xa2,0x6f,0xc7,0xe3,0x8e,
    0x3f,0x1a,0xfa,0x5f,0x29,0x55,0xaa,0x76,0xc0,0x7d,0x35,0xb7,0x1b,0xe4,0xbf,0xf5,
    0xf9,0x71,0x65,0x9f,0x9f,0x5e,0x05,0xfc,0xec,0x9c,0xee,0x9a,0x1f,0xe3,0x72,0xb0,
    0x59,0x6e,0xa3,0xbe,0x6a,0xb3,0x54,0x3a,0x43,0x3a,0x38,0xbe,0x97,0x6b,0x3d,0x43,
    0x77,0x4a,0x87,0xe9,0xd7,0xb0,0xb2,0xb0,0x7a,0x87,0xd5,0x09,0x8b,0x1d,0x56,0x11,
    0xd6,0xe0,0xb0,0x7a,0x61,0xcd,0x1c,0x16,0x08,0xdb,0xdb,0x61,0xa1,0xb0,0xfd,0xe0,
    0x6f,0x6e,0xc9,0xea,0x38,0x3b,0xb7,0x00,0xff,0xb3,0xfc,0xfc,0x00,0x95,0xbb,0xaa,
    0x7c,0xa0,0x64,0xd1,0xae,0x92,0x38,0x9c,0x83,0x3b,0x42,0xe5,0x2e,0x79,0x65,0x87,
    0x96,0x0a,0x1e,0xe5,0x36,0xbb,0xca,0x95,0xd2,0x96,0xa0,0xe0,0x4e,0x0c,0x77,0x97,
    0x45,0xb9,0x8d,0xda,0x0f,0x59,0x94,0xf7,0x17,0xd7,0x39,0x64,0x3d,0xfb,0x8b,0xfb,
    0x57,0x42,0xbd,0x96,0xb9,0xd7,0xf0,0xbb,0x4d,0x8e,0x55,0xd4,0x86,0x56,0xb9,0x3c,
    0xda,0x77,0x88,0x6c,0xef,0x9b,0x97,0x23,0xb5,0xb9,0xae,0x8a,0xd7,0x57,0xe3,0x18,
    0xe9,0x80,0x7c,0x22,0xf9,0xb2,0xf8,0x54,0x5c,0x22,0xfd,0x66,0x3a,0x37,0xfd,0xe6,
    0xe2,0x9b,0x55,0xe3,0x5a,0x57,0x6a,0x21,0xb9,0xbd,0x25,0x57,0x2f,0xb9,0x83,0x25,
    0x87,0xba,0xf7,0xc9,0x3d,0x6c,0xab,0x7a,0x20,0x8b,0x98,0xb5,0x55,0x3f,0xa2,0xdc,
    0x49,0x72,0x28,0xb7,0x93,0x4f,0x17,0xe6,0x47,0x07,0x57,0xee,0xee,0x78,0xc8,0xf6,
    0x94,0xcf,0xc6,0xf7,0x52,0x9f,0x5a,0xb9,0xb7,0xc6,0x8c,0x95,0xfb,0x69,0x1c,0x58,
    0xb9,0xbf,0x7c,0xb5,0xf2,0x20,0xb5,0xc9,0xca,0x43,0x35,0x7e,0xac,0x3c,0x2c,0x3f,
    0x0e,0x76,0xe5,0xe1,0x8a,0x89,0xf9,0x33,0x46,0xfa,0xad,0xf3,0xf2,0x58,0xd5,0x35,
    0xc6,0xc9,0x8f,0xab,0xce,0x9f,0x52,0xa9,0x7d,0x1e,0x15,0x70,0xb7,0xc9,0xc6,0x50,
    0xf9,0x3a,0xce,0xc9,0x8e,0x57,0x3c,0xac,0x3c,0x41,0xb1,0xb5,0xf2,0xed,0x1a,0xfb,
    0x66,0xeb,0x0e,0xd9,0x1a,0x2f,0xd9,0xdb,0x9d,0x6c,0x63,0x4d,0x9c,0x26,0xaa,0x5f,
    0x4c,0xf7,0x37,0x92,0xe9,0x2f,0xee,0x76,0xc7,0x4d,0x12,0xd7,0x5d,0x7e,0x7a,0xbb,
    0x93,0x4b,0x1c,0x97,0x26,0x7b,0xa7,0x6b,0xcf,0x44,0xf1,0x26,0x3b,0x25,0x3f,0x52,
    0x27,0x3b,0xd5,0xf9,0xdb,0x5b,0xbc,0x71,0x77,0xa9,0xbe,0xf1,0xb2,0xe3,0xb9,0x69,
    0xd2,0xeb,0xbf,0x07,0x6e,0xba,0x7c,0xb5,0xfa,0x27,0x38,0x6e,0x46,0x4d,0x1b,0x3d,
    0x77,0xb7,0x6b,0x63,0x2d,0x37,0xd3,0xe9,0x8d,0xaf,0xe1,0x66,0xc9,0x97,0xee,0x8e,
    0xb3,0xf6,0x36,0x69,0xfe,0x99,0xec,0x6c,0x61,0x8d,0xd2,0xf1,0x76,0xee,0x71,0xf1,
    0x9d,0xa8,0x78,0x18,0x37,0xc7,0xb5,0x77,0xfc,0x2e,0xae,0x65,0x75,0x7c,0xdd,0xab,
    0x31,0x74,0x87,0xfa,0x70,0x92,0xfa,0x60,0xaa,0x62,0x38,0x4d,0x31,0x99,0xa1,0x36,
    0xce,0x94,0xcf,0xb3,0x55,0xe7,0x1c,0xcd,0xd3,0xdf,0x69,0x3c,0x8c,0x75,0xfe,0x2f,
    0xc8,0x8f,0x9d,0xf9,0x71,0x64,0x3e,0xe3,0x30,0xbf,0x97,0xe5,0xc7,0x41,0x39,0xf3,
    0x8c,0xc6,0xe1,0xff,0x77,0xc0,0xde,0x72,0x9d,0x43,0xf6,0x14,0x95,0x57,0x38,0x7e,
    0xa5,0x93,0xb7,0xb9,0xb3,0xaa,0x66,0x2e,0xbd,0xac,0xf8,0x1d,0xa1,0xfa,0x5f,0x55,
    0x9e,0x58,0x2b,0x3d,0x9f,0x07,0xd6,0x55,0xe7,0x5c,0x51,0x5e,0xef,0xe6,0x39,0xca,
    0x1b,0x76,0xcd,0x95,0xb0,0x9a,0x67,0xfe,0x21,0x9d,0xf5,0xe2,0x4c,0xee,0xad,0x9a,
    0x7c,0xf0,0x5e,0x75,0x8d,0x2b,0xca,0x9b,0xb4,0x96,0x59,0x79,0x9b,0xd6,0x05,0x2b,
    0x63,0x92,0xb5,0x74,0xf6,0x0e,0x29,0x17,0xf9,0x02,0xe5,0x6e,0x65,0xe6,0x23,0xe4,
    0x87,0xf3,0xcb,0x6c,0x07,0x30,0xd3,0xbf,0xa0,0x8c,0x36,0xba,0xfc,0x57,0x66,0xbe,
    0xdc,0x95,0xff,0xca,0x5c,0x6b,0xac,0xdc,0xa3,0xcc,0x75,0xb5,0x7d,0x3e,0x0b,0x61,
    0xef,0xa2,0x72,0x31,0x16,0x27,0x2b,0x9f,0xc1,0x26,0xec,0x40,0xb7,0x47,0x99,0xf1,
    0xbf,0xb8,0xcc,0xfe,0x86,0x0e,0x62,0x82,0x98,0x4e,0x2a,0x73,0x7c,0xda,0x61,0xf8,
    0xe4,0x32,0xc7,0x82,0x1d,0x56,0xf7,0xda,0x32,0x1b,0x6c,0xe5,0x37,0xb4,0xb8,0x5b,
    0xf9,0xd8,0x3a,0xae,0x57,0x56,0xee,0x9c,0x97,0x5b,0xb8,0x72,0x9f,0xbc,0xbc,0x97,
    0x62,0xd1,0xac,0xc2,0xbc,0xd9,0xad,0xea,0x4f,0x50,0x3d,0x6f,0x5e,0xe1,0xb8,0xe7,
    0x78,0x27,0xd6,0xa2,0xc2,0x39,0xb2,0xc9,0xd9,0x69,0x99,0x63,0x5f,0x73,0x32,0x7b,
    0x57,0x38,0xb7,0x80,0x9b,0x4c,0xab,0x0a,0xc6,0x71,0x21,0xb3,0x4f,0x85,0xf5,0xb7,
    0x72,0x32,0xfb,0xe6,0xe7,0xa7,0x3a,0x99,0xfd,0x2a,0xf4,0x79,0x5f,0x27,0xb3,0x7f,
    0x7e,0xfe,0x23,0x27,0x73,0x40,0x85,0x6b,0xce,0xfe,0x4e,0xe6,0xc0,0x0a,0xd7,0x71,
    0x2b,0xb7,0xce,0xcb,0x3f,0x73,0x3a,0x5f,0xab,0x50,0xa6,0xb5,0xd3,0x39,0x28,0x3f,
    0x3f,0xca,0xe9,0x1c,0x9c,0x97,0x1f,0x75,0x3a,0x87,0x54,0x28,0x03,0x1c,0x7d,0x8d,
    0x78,0xb5,0xa9,0x30,0x46,0x88,0x09,0xda,0x8c,0x36,0xc1,0x67,0xf8,0x84,0x3a,0xa0,
    0x83,0xbe,0x3e,0xbc,0xa2,0xb5,0x5a,0xe5,0xb3,0x2a,0x5c,0x0b,0x3a,0x69,0x6e,0xa2,
    0x7c,0xb6,0x30,0x2b,0x77,0xad,0x14,0x7b,0x81,0x73,0x75,0x1e,0xba,0x71,0xdc,0xa3,
    0xc2,0x79,0x81,0xf9,0x78,0x75,0x85,0x5c,0xbd,0xe3,0x7f,0x59,0xe1,0x3a,0x8c,0x1c,
    0x06,0x7e,0x78,0x85,0xf3,0x19,0xfd,0x3b,0x46,0xbc,0xc9,0xfe,0xba,0xc2,0x3c,0x63,
    0xe5,0xb1,0x95,0x62,0x6e,0x63,0x7f,0xf0,0x28,0xb7,0x9b,0xa7,0x5b,0xb9,0x83,0xf6,
    0x5f,0x56,0xbe,0xa8,0x5a,0x1e,0xb9,0x8b,0xef,0x53,0x2d,0xdf,0xf0,0x1d,0x2b,0xf7,
    0xcb,0xcb,0xb7,0xee,0x33,0xed,0x34,0x2b,0xf7,0xcf,0xcb,0x73,0xbe,0xbb,0xcf,0x2e,
    0xf9,0x01,0x79,0x79,0xf5,0xf0,0xf7,0x3a,0x63,0xbc,0x63,0x6e,0x0d,0xac,0xa7,0x0e,
    0xe4,0xc0,0x99,0xdc,0xb0,0xfc,0x7c,0x70,0x8b,0xca,0xe9,0xa7,0x28,0x26,0xd8,0xfb,
    0x95,0x9d,0x1f,0xf7,0x55,0xeb,0xdd,0x70,0x86,0xb5,0xe3,0x0f,0xf5,0x8c,0xbb,0x95,
    0xd7,0xd4,0x17,0x7b,0x09,0x94,0x77,0xd4,0x33,0x6e,0x88,0x61,0xfb,0x80,0x73,0xa3,
    0xae,0xba,0xc7,0x4b,0x4a,0xdf,0x0f,0xc8,0x69,0xbb,0xb8,0xeb,0x5f,0x59,0xbf,0x07,
    0xe6,0x11,0x3a,0x27,0x27,0x21,0x87,0x3e,0xfa,0x81,0x04,0x81,0x9d,0xa2,0x72,0x17,
    0x61,0xb0,0x77,0x42,0x48,0x7b,0xe5,0x1a,0x7b,0x75,0xd5,0x9c,0x4e,0x1b,0xdf,0x0a,
    0x89,0x41,0xf6,0x14,0x95,0x4f,0x0c,0x8b,0x58,0xe3,0xf4,0xd4,0xd0,0xf2,0x0d,0xf3,
    0x28,0xf6,0xa5,0xc0,0x7a,0x6a,0x2f,0x66,0xe3,0xf5,0xc9,0x8c,0xf3,0xd6,0xcf,0xdd,
    0xa7,0x32,0xce,0xe7,0xe1,0x0e,0x5b,0x98,0x31,0x5f,0x75,0x77,0x63,0xe5,0xe9,0x8c,
    0x63,0xc2,0x1f,0x96,0x8b,0x16,0x39,0xf9,0xee,0x2e,0x47,0x2d,0x76,0xb6,0x87,0x3b,
    0x7c,0x49,0xc6,0x5c,0x61,0x87,0xe1,0x4b,0x33,0xe6,0x76,0x3b,0xac,0x3d,0xcb,0x32,
    0x8e,0x51,0x3b,0x4c,0xfe,0x99,0x8c,0xeb,0xaf,0x1d,0xe5,0x3c,0xfe,0xc0,0x37,0x66,
    0x3c,0x87,0xdf,0x5d,0x1a,0xd8,0x97,0x77,0x35,0xb0,0x2f,0x2b,0xa5,0x82,0x6b,0xca,
    0xb1,0x13,0xf2,0x36,0xd7,0x69,0x9e,0x94,0xc4,0x6f,0xcf,0x91,0x40,0xf3,0x0e,0x6b,
    0xf0,0xc4,0x94,0x63,0xe6,0x14,0xe5,0xe8,0x6d,0xe1,0xee,0xe5,0x30,0x2a,0xca,0x98,
    0xd7,0x5f,0x73,0x65,0xac,0x4b,0xd7,0x06,0x45,0x19,0xeb,0x4c,0x2b,0xe9,0x7f,0x9a,
    0xd7,0x76,0x9a,0xfa,0xf2,0x3f,0xf9,0x39,0xe6,0xe2,0xe9,0x21,0xeb,0xc7,0x6f,0x67,
    0xed,0xbf,0xcf,0x0a,0x99,0x0b,0xce,0xcd,0xb5,0xa0,0x77,0x76,0x48,0xec,0xac,0xb0,
    0x18,0x7f,0x23,0x74,0x3d,0xf0,0xbd,0x90,0xfc,0x68,0xf5,0xe5,0x39,0x21,0x31,0xf4,
    0xfd,0x99,0x39,0x86,0x39,0xf2,0x83,0x90,0xb9,0x04,0xf5,0x75,0xd6,0x18,0xea,0x12,
    0x12,0x5f,0x9c,0xcb,0xa0,0xfc,0xc3,0x90,0xd8,0x5b,0xb2,0x8d,0xfc,0xd7,0x35,0x24,
    0xbe,0x5c,0x32,0xe7,0x49,0x06,0x79,0xc7,0x64,0xba,0x85,0xc4,0x21,0x53,0x5d,0x3b,
    0x43,0xea,0x61,0x7f,0x35,0x5a,0xd8,0x85,0x21,0xfb,0x0b,0xdc,0x79,0xc2,0x7a,0x84,
    0xf4,0xb5,0x9a,0x35,0x84,0x5d,0x14,0x12,0x87,0x7c,0xb7,0xbc,0x46,0xb4,0xe7,0xe4,
    0x8c,0xb8,0xc9,0x5a,0x3d,0x3d,0x55,0xcf,0x70,0x57,0xcf,0x25,0x2a,0xf7,0x74,0xf5,
    0xf4,0x92,0x6e,0xd9,0xd5,0xd3,0x3b,0x24,0x7e,0x89,0xab,0xa7,0x73,0x46,0xfc,0xe4,
    0x8c,0xb2,0x56,0xcf,0x65,0x21,0xdb,0x88,0x71,0xbe,0x44,0x58,0x5f,0x61,0xa8,0xeb,
    0x47,0x8a,0x7b,0xbf,0x90,0xb2,0xe0,0x46,0x0a,0x1b,0x10,0xd2,0x2e,0x38,0xf4,0x05,
    0xf6,0x5b,0xdf,0x0c,0xb8,0x07,0xeb,0xae,0xbe,0x80,0xbd,0xb6,0x01,0x71,0x93,0x39,
    0x42,0x32,0xfd,0x9d,0xcc,0x91,0x01,0x71,0xab,0xaf,0x5d,0x40,0x3d,0xe0,0xf3,0x73,
    0x0c,0xb9,0xab,0x43,0xc0,0x3a,0xc1,0x4d,0xcf,0xf5,0x30,0xfe,0x3b,0x0a,0xc7,0xd8,
    0x3b,0x5a,0xb9,0xe8,0xb3,0x9c,0x03,0x7e,0x54,0x7e,0x00,0xc3,0xf8,0xc3,0xf9,0x8e,
    0xfc,0xf7,0x34,0x8d,0x47,0xe0,0x4b,0x54,0xd7,0xf1,0xb2,0x8b,0xdc,0xb1,0x5c,0xd8,
    0x49,0xc2,0x90,0x3b,0x2c,0xd6,0xa7,0x06,0xc4,0x4b,0xae,0x4f,0x3a,0x07,0x6c,0x07,
    0x38,0x93,0x3b,0x5d,0x72,0xbe,0x4f,0xce,0x08,0x28,0x0b,0xce,0x74,0xbf,0x23,0x5d,
    0x60,0x26,0x77,0x76,0x40,0x1c,0xf6,0x10,0x1b,0xe4,0xda,0x1f,0x2a,0xcf,0x9a,0xfd,
    0x73,0x03,0xfa,0xec,0xed,0x77,0x53,0xbc,0x7c,0x3f,0x9e,0x1f,0x10,0xf7,0x63,0xe8,
    0x82,0x80,0xfa,0xe7,0x3b,0x7b,0xdd,0x65,0xcf,0x8f,0xd5,0x1e,0x01,0x65,0xbb,0xbb,
    0x7e,0xbb,0x48,0xfd,0x36,0xdc,0xf5,0xdb,0x8f,0x03,0xe2,0xa6,0x77,0x71,0x40,0x5d,
    0xe0,0x7d,0x73,0x19,0xac,0x1d,0x3d,0xd5,0x86,0xde,0xb9,0x0c,0xf2,0xd4,0x25,0xc2,
    0x2e,0x76,0xb6,0x2f,0x95,0xed,0xa1,0xce,0x76,0xaf,0x80,0xf8,0xfd,0xb9,0x0c,0xfa,
    0xba,0x77,0x40,0xac,0xb7,0x72,0x4d,0x1f,0xd7,0xdf,0xe0,0x7e,0x82,0x3e,0x53,0x7f,
    0xff,0x44,0xed,0xc3,0xb4,0xba,0x2a,0x64,0x9d,0x95,0xea,0x78,0xd6,0x5e,0x21,0x24,
    0xee,0x8f,0xc5,0xf2,0xef,0x57,0x21,0x79,0xec,0x27,0x96,0x0b,0x1b,0x11,0x12,0x7f,
    0x3a,0x2b,0xec,0x5e,0x1f,0x12,0xc7,0xbf,0xa5,0xc2,0x6e,0x08,0x89,0x63,0xef,0x61,
    0x72,0x37,0x4a,0xae,0xec,0xe4,0x46,0x85,0xc4,0xc7,0x54,0xaf,0x79,0x88,0xdd,0x14,
    0x52,0x7f,0x54,0x58,0xe8,0xde,0x2c,0xdd,0x3a,0xa7,0x7b,0x4b,0x48,0x1c,0x6b,0x87,
    0xe9,0xde,0x1a,0x52,0xff,0x16,0xa7,0x3b,0x56,0xba,0x15,0xa7,0x3b,0x2e,0x24,0xfe,
    0xb2,0xab,0xf7,0xb6,0x90,0xfa,0xe3,0x9c,0xee,0x50,0xc5,0xac,0xce,0xc5,0xac,0x31,
    0x24,0xee,0x0f,0x8b,0xd9,0xc4,0x90,0xbc,0x8f,0xd9,0xe4,0x90,0xb8,0x8f,0xd9,0x94,
    0x90,0xb8,0x8f,0xd9,0xd4,0x90,0xb8,0x8f,0xd9,0x34,0xc9,0xf9,0x98,0x4d,0x0f,0x89,
    0xfb,0x98,0xcd,0x08,0xa9,0x3f,0xdd,0xf9,0x3e,0x53,0xba,0x3e,0x66,0xb3,0x42,0xe2,
    0x3e,0x66,0x4d,0x21,0xf5,0x67,0x39,0xdd,0x7b,0xa4,0xeb,0x63,0x36,0x27,0x24,0xee,
    0x63,0x76,0x6f,0x48,0x7d,0x70,0xc8,0x59,0x58,0xc7,0x7e,0x1e,0x32,0x96,0xe0,0x90,
    0x6b,0xfa,0x68,0x2c,0x0e,0x70,0x63,0x71,0x9e,0xe2,0x5a,0x76,0x71,0x7d,0x38,0x24,
    0xee,0x0f,0x8b,0xeb,0x82,0x90,0xbc,0x8f,0xeb,0xa3,0x21,0x71,0x1f,0xd7,0xbf,0x86,
    0xc4,0x7d,0x5c,0x1f,0x0b,0x89,0xfb,0xb8,0x3e,0x21,0x39,0x1f,0xd7,0x27,0x43,0xe2,
    0x3e,0xae,0x4f,0x85,0xd4,0x7f,0xd2,0xc5,0xe6,0x69,0xe9,0xfa,0xb8,0x2e,0x0a,0x89,
    0xfb,0xb8,0x2e,0x0e,0xa9,0xbf,0xc8,0xe9,0x2e,0x95,0xae,0x8f,0xeb,0xb2,0x90,0xb8,
    0x8f,0xeb,0x33,0x21,0xf5,0x97,0x39,0xdd,0x07,0x15,0xb3,0x92,0x8b,0xd9,0xb3,0x21,
    0x71,0x7f,0x58,0xcc,0x9e,0x0b,0xc9,0xfb,0x98,0xbd,0x10,0x12,0xf7,0x31,0x5b,0x15,
    0x12,0xf7,0x31,0x7b,0x29,0x24,0xee,0x63,0xf6,0x77,0xc9,0xf9,0x98,0xad,0x0e,0x89,
    0xfb,0x98,0xad,0x09,0xa9,0xbf,0xda,0xf9,0xfe,0xaa,0x74,0x7d,0xcc,0xd6,0x86,0xc4,
    0x7d,0xcc,0x5e,0x0b,0xa9,0xbf,0xd6,0xe9,0xbe,0x21,0x5d,0x1f,0xb3,0x37,0x43,0xe2,
    0x3e,0x66,0xeb,0x42,0xea,0xbf,0xe9,0xc6,0xe2,0x1f,0x43,0xc6,0x72,0x5d,0xcd,0x58,
    0xc4,0xef,0x36,0xed,0xbb,0x56,0x64,0x1c,0xb3,0xc8,0x95,0x90,0x1f,0xe0,0x72,0xed,
    0x60,0xe5,0xda,0x46,0xe5,0xda,0xa1,0x2e,0xd7,0x82,0x1b,0x92,0x1f,0x43,0x65,0x73,
    0x88,0x1b,0xdf,0x3f,0x0f,0x68,0xd7,0xf6,0x18,0xc0,0x7e,0x11,0x10,0xc7,0xbd,0x17,
    0xb3,0x7f,0x4d,0x40,0x1c,0xed,0x80,0x7f,0x66,0x6b,0xa8,0xfc,0x83,0xcc,0xb0,0x80,
    0x7e,0xc0,0xe7,0x6b,0x54,0xe7,0x69,0xb9,0x2f,0xd7,0x6a,0x7d,0xb5,0x3a,0xdb,0x44,
    0x5f,0xae,0xf3,0xd0,0x88,0x38,0xae,0x17,0xb0,0xc6,0xe0,0x9e,0xe0,0xe1,0x11,0xf7,
    0xae,0xe0,0x6c,0x8d,0xf9,0x7a,0x44,0xdc,0xf6,0x43,0xdf,0x88,0x88,0x0d,0x77,0xeb,
    0xe8,0x37,0x23,0xe2,0x8d,0xda,0x3b,0xc2,0x7e,0xdb,0x88,0xf8,0x03,0x6a,0x4f,0xbb,
    0x68,0xf7,0x78,0x1d,0x13,0x15,0xf1,0x02,0xd7,0x3e,0x3f,0x80,0xa1,0x8d,0xed,0xa3,
    0xc2,0xcf,0xa3,0xe4,0xa7,0x8f,0xcd,0xd1,0x11,0x71,0x8b,0x8d,0xe9,0xe1,0xd7,0x62,
    0xd3,0x29,0x62,0x9d,0x88,0xd7,0xd1,0xb2,0x8f,0x7a,0xb7,0xc6,0x45,0xbd,0x90,0x39,
    0x36,0x3f,0xbe,0x2d,0x7d,0x9c,0x9f,0x9b,0xef,0xd8,0xb1,0x07,0x3f,0x5e,0x31,0xb3,
    0xb8,0xd9,0x31,0x5a,0x7e,0x7d,0x2b,0xe2,0x5e,0x19,0xed,0xfc,0x91,0xae,0x5b,0x4e,
    0x8c,0x88,0xdb,0x31,0x2a,0x97,0x05,0x7e,0x52,0xc4,0x7b,0x5d,0xe0,0x17,0x0b,0x3b,
    0x39,0x62,0x1d,0xe0,0x46,0xe8,0x7e,0xda,0x29,0x11,0x71,0xb4,0x1d,0xe5,0xd3,0x22,
    0x62,0xb8,0x4e,0x1a,0x2d,0xec,0xcc,0x88,0x38,0xae,0xa9,0xd0,0x76,0xb4,0x07,0xbe,
    0xa3,0x0d,0xcf,0xe6,0x7e,0xc0,0xb7,0xef,0x2a,0x66,0xdb,0xb4,0x5f,0xb0,0xbd,0xfa,
    0x59,0x11,0x39,0x2b,0x7f,0x5f,0x72,0xff,0x93,0x6b,0xa1,0x7c,0x4e,0x44,0xac,0x97,
    0xf6,0xa7,0x66,0xef,0x87,0x92,0x43,0x00,0xbc,0xbd,0xae,0x11,0x39,0xd3,0xef,0x26,
    0xfd,0x41,0x35,0xfa,0x17,0x4a,0x7f,0x72,0x8d,0x3f,0xdd,0x23,0x72,0xa6,0x7f,0xb1,
    0xf4,0x7b,0x4b,0xdf,0xf6,0x4c,0x97,0x46,0xf4,0x1d,0xfe,0x19,0xf6,0x93,0x88,0xf5,
    0x77,0x73,0xd8,0xe5,0x11,0x6d,0x5e,0x1c,0x15,0xe3,0xb0,0x5f,0x44,0xfd,0x07,0x35,
    0x76,0xfa,0x47,0xc4,0x70,0x4f,0x10,0xe3,0x61,0x8b,0x1b,0x0f,0xe0,0x06,0xe4,0xc7,
    0x32,0x8d,0x87,0x01,0x2e,0xa6,0x3f,0x53,0x1b,0x7a,0x69,0x7f,0x67,0x6d,0xb8,0x22,
    0x22,0x67,0x72,0x57,0xb9,0xd8,0x7b,0xb9,0xc1,0x11,0xb9,0xa5,0xf2,0x75,0x48,0x44,
    0x6c,0xb8,0xf2,0x54,0xf5,0x39,0x47,0x44,0x7b,0x43,0x9c,0xbd,0x5f,0xc8,0x5e,0x3f,
    0x5d,0x0f,0x98,0xbd,0x6b,0x22,0x72,0x26,0x37,0x5c,0x72,0x83,0x6a,0xe4,0x7e,0x15,
    0x91,0x33,0xb9,0x11,0x92,0xbb,0xbd,0x46,0xee,0xba,0x88,0x9c,0xc9,0x8d,0x94,0x5c,
    0xef,0x1a,0xb9,0x1b,0x23,0x72,0x26,0x37,0x5a,0x72,0xfd,0x6b,0xe4,0x6e,0x8e,0xc8,
    0x99,0xdc,0x18,0xc9,0xd9,0xbd,0x01,0xcb,0xd7,0x63,0x23,0x72,0x8d,0x2e,0x5f,0x4f,
    0x88,0x88,0x23,0x0f,0x21,0x9f,0xe1,0xfa,0x1b,0xf7,0x54,0x2d,0x4f,0xdd,0x11,0xf1,
    0x9a,0x7c,0x82,0xcb,0x53,0x8d,0x11,0x71,0xcb,0x79,0xbf,0xd1,0xfc,0xf5,0x7b,0xf6,
    0xc9,0x11,0xef,0x33,0xe0,0x5a,0xc3,0xae,0x7b,0xef,0x8c,0x28,0x3b,0xd9,0xe5,0x9c,
    0x29,0x11,0xf1,0x55,0xae,0x3d,0x53,0x23,0xe2,0xa6,0x37,0x43,0x7a,0xb0,0x65,0x7a,
    0x77,0x47,0xc4,0x7b,0x3a,0xbd,0x99,0x11,0x71,0xeb,0xe3,0xd9,0x11,0x6d,0xcd,0x54,
    0x3e,0x9a,0xeb,0xf2,0x20,0xf2,0xf9,0x9c,0xbc,0x3c,0x57,0xe3,0x0f,0xe7,0x96,0xf3,
    0x7e,0x1b,0x51,0x77,0xb8,0x72,0x9e,0xc9,0xcc,0x75,0x39,0xef,0xd5,0x8c,0x6b,0x02,
    0xc6,0x2d,0xe4,0xbd,0xfe,0x7d,0xd2,0x6f,0x52,0xfe,0x5d,0xea,0xea,0x05,0xf7,0xfb,
    0xfc,0x78,0x48,0x36,0x7f,0xaf,0x9c,0x86,0x7c,0xf3,0x60,0xc4,0x71,0x89,0xf1,0x86,
    0xb1,0x64,0x79,0x68,0x7e,0x44,0xce,0xf2,0xd0,0x52,0xe9,0x3e,0xa4,0xbc,0x87,0xb6,
    0xfe,0xb7,0xfc,0x9d,0xed,0xec,0xfd,0x39,0xe2,0x58,0xc3,0x38,0xba,0xd9,0xd9,0xfb,
    0x4b,0x44,0x6e,0x49,0x56,0x5c,0x8b,0x3d,0x1e,0xd1,0x46,0xa3,0xd3,0x7f,0x22,0x22,
    0x6e,0xc7,0x48,0xe9,0x3f,0x19,0xd1,0x06,0xf8,0x86,0x3c,0x87,0x03,0x5b,0x18,0x31,
    0x67,0x77,0x10,0x8f,0x7b,0xeb,0xb8,0x8f,0xee,0xfd,0x5d,0xaa,0xf8,0x41,0xfe,0xe3,
    0x8c,0xed,0x42,0xfb,0x17,0x2a,0x1e,0x90,0xdd,0xa2,0x1c,0xbb,0xcc,0xe5,0x95,0xe5,
    0x11,0x73,0x90,0xe5,0x95,0x15,0x11,0x31,0xcb,0x2b,0xff,0x76,0x79,0x05,0xdc,0x4a,
    0xac,0x33,0xb2,0xb3,0xd2,0xcd,0x8b,0xe7,0x5c,0xbe,0xf0,0xf3,0xe7,0xf9,0x88,0x9c,
    0xc9,0xbd,0xe8,0xf2,0x4f,0x77,0x27,0xb7,0x2a,0x22,0x67,0x79,0xe5,0xa5,0x88,0x18,
    0xe6,0x93,0x8d,0xd5,0xd5,0xd2,0x5d,0xef,0xd6,0xff,0x35,0x11,0x71,0x3f,0x56,0x5f,
    0x89,0x88,0xdb,0x58,0x7d,0x35,0xa2,0xbd,0x57,0x9c,0x1f,0xaf,0xcb,0xd6,0x7b,0x35,
    0x7e,0xbc,0x11,0x91,0xb3,0x3a,0xd7,0x4b,0x6e,0x8c,0xab,0x73,0x43,0x44,0x1c,0xfb,
    0x3a,0xd3,0xfb,0x47,0x44,0xdc,0xea,0x7c,0x2b,0xa2,0xad,0x7f,0xb8,0x3a,0xff,0xe9,
    0xd6,0x0f,0x1f,0xa3,0x8d,0x11,0x39,0x93,0x7b,0x4f,0x72,0x13,0x6b,0xe4,0xde,0x8f,
    0xc8,0x99,0xdc,0x26,0xc9,0x75,0xaf,0x91,0xdb,0x1c,0x91,0x33,0x7f,0xb7,0x48,0xee,
    0x2d,0xb7,0xee,0x7f,0xaa,0xbc,0x70,0xa8,0xc6,0x1e,0xb0,0xed,0x11,0x65,0x3f,0x8d,
    0x8a,0xb1,0xfb,0x59,0xc4,0x3e,0xc4,0xf3,0x19,0xc3,0x3e,0x8f,0x18,0x53,0x3c,0xa3,
    0xb1,0x9c,0xf4,0x45,0x44,0xd9,0xcf,0xdd,0x3a,0xb6,0x33,0x22,0xfe,0x96,0xb3,0x57,
    0x8e,0xd9,0x5e,0x6f,0xaf,0x12,0xb3,0x6d,0xde,0x5e,0x7d,0x4c,0x59,0x70,0x86,0x85,
    0x31,0x71,0xb4,0x6f,0xbe,0xc6,0x6b,0x14,0xb3,0x1e,0x70,0xf3,0x14,0x97,0x38,0x26,
    0xde,0x53,0xcf,0xfd,0xac,0x7d,0x69,0xcc,0x36,0x82,0x47,0x3e,0xc6,0xfd,0x4f,0x9f,
    0x8f,0x1b,0x62,0xde,0x13,0x85,0x9c,0xe5,0xe3,0xbd,0x62,0xe2,0x96,0x8f,0xbf,0x1a,
    0x7f,0x39,0x1f,0x37,0x8f,0xbf,0x9c,0x8f,0x5b,0xc4,0x94,0x05,0x67,0xfd,0xd0,0x32,
    0x26,0xee,0xf3,0xf1,0xde,0x31,0x71,0xd3,0xdb,0x4f,0x7a,0x3e,0x1f,0xef,0x1f,0x13,
    0xf7,0x63,0xfc,0x80,0x98,0x38,0xe6,0x68,0x9b,0x78,0xf7,0xdc,0xdb,0x3a,0x2f,0xb7,
    0xd1,0x1c,0x6d,0xed,0xe2,0x77,0x70,0xcc,0xfa,0xa0,0x6b,0xf9,0xf4,0x90,0x98,0xb8,
    0xe5,0x63,0xd3,0xc3,0xaf,0xe5,0xe3,0xd7,0x95,0x8f,0x31,0xdf,0x21,0x0f,0x9b,0xb6,
    0x1f,0x3e,0x4c,0x36,0x2d,0x1f,0x77,0x74,0xbe,0x80,0x3b,0x3c,0x3f,0x8e,0x90,0x4d,
    0x9c,0x5b,0xfe,0x6b,0xab,0x71,0x80,0x7e,0xdf,0xac,0xfc,0xd4,0x51,0x72,0x47,0x38,
    0xb9,0x0e,0x31,0xc7,0xdf,0xab,0x1a,0x47,0x5e,0xae,0x63,0x5c,0xe4,0xbc,0x67,0x33,
    0xda,0x44,0x1d,0x1d,0x54,0xa7,0xe5,0xe4,0x4e,0x31,0x79,0x9f,0x93,0x8f,0x53,0x9b,
    0x11,0x0b,0xcb,0xf3,0xc7,0xc7,0xcc,0x37,0xc7,0xc5,0x85,0xdc,0x89,0x31,0xf1,0xbd,
    0x9c,0x4f,0x27,0xc7,0xc4,0xed,0xb0,0xdc,0x7d,0x4a,0xcc,0xba,0xc0,0x5b,0xee,0xee,
    0x1c,0x17,0xb9,0x1b,0xbc,0xcf,0xdd,0xff,0xb6,0x3d,0x6f,0x5c,0xe4,0xe3,0xef,0xc4,
    0xdc,0xff,0x59,0x3e,0xfe,0x6e,0x4c,0xcc,0xf2,0xf1,0x87,0x2e,0xbe,0xe0,0xce,0xca,
    0x8f,0xd7,0x64,0x07,0xe7,0x96,0x1b,0xbe,0x1f,0x73,0xce,0xe3,0xb9,0xe9,0x78,0x37,
    0x6e,0xce,0x89,0xc9,0xed,0xda,0x13,0x4b,0x6e,0x53,0x69,0x77,0xb9,0xae,0x31,0x39,
    0x1b,0x97,0xe7,0x49,0x0e,0xcf,0x30,0x77,0xdd,0x33,0x8f,0x89,0xdb,0x35,0xd5,0xf9,
    0x31,0xb1,0x1e,0xe5,0x22,0x0f,0x5e,0x10,0xd3,0xd6,0xf9,0xae,0xce,0x1e,0x71,0x91,
    0xdf,0x7c,0xee,0xbd,0x28,0x26,0x67,0x72,0x3d,0xe3,0x22,0x5f,0xfa,0x3d,0xe8,0x25,
    0x31,0x39,0x5b,0x2b,0x2e,0x8d,0x89,0x75,0x77,0x7b,0xd0,0x5e,0x31,0xed,0x5d,0xea,
    0xda,0xd0,0xc7,0xd9,0x33,0x5b,0x97,0xc5,0xc4,0xad,0x0d,0x97,0xc7,0xc4,0x2e,0x74,
    0x6d,0xe8,0x1b,0xd3,0xde,0xe5,0x71,0xa1,0x37,0x30,0x66,0xee,0x34,0x5f,0xaf,0x88,
    0x8b,0x7d,0xa1,0xbf,0x36,0x18,0x14,0x93,0x33,0x5f,0xaf,0x8c,0x89,0x35,0x3a,0x5f,
    0xaf,0x8a,0x69,0xef,0x4a,0x97,0x67,0x86,0xb8,0x3c,0x63,0x75,0x0c,0x8d,0x89,0xf7,
    0xa9,0xe9,0xd3,0xab,0x63,0x72,0x26,0x77,0x8d,0xe4,0xd0,0xf7,0x13,0x9d,0xdc,0xb0,
    0x98,0x9c,0xc9,0xfd,0x4a,0x72,0xf6,0x5e,0x8c,0xc9,0xfd,0x3a,0x26,0x67,0x72,0xd7,
    0x49,0x0e,0x03,0xd9,0xd7,0x7b,0x7d,0x4c,0xce,0xe4,0x6e,0x94,0x5c,0x53,0xcd,0x58,
    0x1a,0x15,0x93,0xb3,0x18,0x8c,0x8e,0x39,0x0e,0xfd,0xb5,0xf7,0x2d,0xc2,0xfa,0xbb,
    0xb8,0xdc,0x1a,0x53,0xf6,0x16,0xa7,0x3b,0x36,0x66,0xbc,0xbc,0xee,0x6d,0xc2,0xbc,
    0xee,0xf8,0x98,0xb2,0xb7,0x39,0xdd,0xdb,0x63,0xc6,0xca,0xeb,0x36,0x0a,0xf3,0xba,
    0x13,0x63,0xca,0x36,0x3a,0xdd,0x49,0x31,0xc7,0x72,0xa3,0xd3,0xbd,0x53,0xd8,0x78,
    0xa7,0x3b,0x25,0xa6,0xec,0x9d,0x4e,0xf7,0xae,0x98,0xb1,0xf7,0xba,0xd3,0x85,0x79,
    0xdd,0x19,0x31,0x65,0xa7,0x3b,0xdd,0x99,0x31,0xfb,0xc3,0xeb,0x36,0x09,0xf3,0xba,
    0xb3,0x63,0xca,0x36,0x39,0xdd,0x39,0x31,0xc7,0xae,0x6f,0xef,0x6f,0x85,0xf9,0xf6,
    0xce,0x8d,0x29,0xfb,0x5b,0xa7,0x7b,0x5f,0xcc,0xfe,0xf5,0xba,0xf3,0x84,0x79,0xdd,
    0xfb,0x63,0xca,0xce,0x73,0xba,0x0f,0xc6,0xec,0x73,0xaf,0xfb,0x47,0x61,0x5e,0x77,
    0x7e,0x4c,0xd9,0x3f,0xba,0xdc,0xfa,0x70,0xcc,0x7e,0x47,0x1c,0xe7,0x3a,0xfc,0xd1,
    0x98,0x7d,0x8a,0x18,0xdd,0xaf,0x9c,0x0d,0xfc,0xaf,0x31,0xb9,0x87,0x9d,0xec,0x93,
    0x31,0xfb,0x10,0x31,0x99,0xef,0x64,0x17,0xc6,0xe4,0x20,0x6b,0x6b,0xfe,0xd3,0x31,
    0xef,0x15,0xbd,0xec,0x9e,0x47,0x2c,0x8a,0x89,0x9b,0xbd,0x25,0x31,0x31,0x3b,0x6c,
    0x5d,0x59,0x1a,0xb3,0xfe,0x25,0xce,0xde,0x32,0xd9,0xeb,0xe9,0xec,0x3d,0x13,0x13,
    0x37,0x7b,0x2b,0x62,0x62,0x76,0x98,0xbd,0x95,0x31,0x7d,0x5c,0xe1,0xd6,0x94,0xe7,
    0x63,0xd6,0xb3,0xd2,0x61,0x2f,0xc4,0xc4,0xf1,0x9c,0x7a,0x89,0xb0,0x55,0x31,0x71,
    0x60,0x26,0xf7,0x92,0xda,0xba,0xca,0xad,0x47,0x7f,0x77,0xeb,0xd1,0x4b,0x35,0xeb,
    0xd1,0x87,0x5a,0x47,0x5e,0x73,0xbe,0xae,0x8b,0x79,0xcf,0xa2,0xab,0xee,0x49,0xd8,
    0x9c,0xde,0x10,0x17,0xf7,0x8c,0x20,0xf7,0x76,0xcc,0xfb,0x1a,0xdd,0x74,0xdf,0xc2,
    0xf0,0x7f,0xc6,0x94,0xb5,0xc3,0xda,0xba,0x31,0x26,0xf7,0xb6,0x6b,0xd7,0x3b,0x31,
    0xeb,0xdb,0xa8,0xb1,0x04,0xec,0xfd,0x98,0xf8,0x22,0xd7,0xd6,0x4d,0xc2,0xd0,0xd6,
    0x65,0xc2,0x36,0xc7,0x94,0x05,0xe7,0xdb,0xf2,0xa1,0xdb,0x23,0x7c,0x92,0xb1,0xfd,
    0x58,0x27,0xf1,0xac,0xfd,0x35,0xc7,0xbd,0x9f,0x11,0x03,0xb7,0x59,0x6b,0x2a,0xf6,
    0x93,0x58,0x83,0xef,0x6c,0xe0,0x3a,0xbc,0x4c,0xf7,0x2a,0x0d,0x9f,0xe2,0xf0,0x57,
    0x4b,0xbb,0xaf,0xe9,0xff,0x76,0xb6,0xb7,0x65,0xdc,0x07,0x60,0xbf,0x02,0x1f,0xbc,
    0x4f,0xef,0xa8,0x5e,0x70,0xef,0x3b,0x0e,0xf6,0xd7,0x66,0xdc,0x7b,0x81,0x83,0x0f,
    0x9e,0x5b,0x95,0xb1,0x5e,0x70,0x53,0xc4,0xf9,0x6b,0xbc,0x2d,0xae,0x8e,0x8f,0x32,
    0x5e,0x13,0x56,0xaf,0x11,0xf3,0x5f,0xef,0xdb,0x06,0xd5,0x0f,0xee,0x1d,0xc7,0xa1,
    0x8e,0x35,0x19,0xaf,0xc5,0xc1,0xad,0xad,0xe1,0x9e,0x57,0xfd,0xe0,0x56,0x89,0xf3,
    0xf7,0xf1,0xb6,0xba,0x3a,0x3e,0x54,0x1d,0xb8,0x2f,0x09,0x5f,0xbc,0x6f,0xeb,0x33,
    0xde,0x0b,0x04,0xb7,0xc1,0x71,0xa8,0x63,0xb5,0xf6,0x9d,0xe0,0xd6,0xd4,0x70,0xcf,
    0x65,0x8c,0x39,0xb8,0xe7,0xc5,0x61,0x7f,0xf4,0x8d,0xa4,0xd8,0x1f,0x41,0xe6,0xe3,
    0x1c,0x07,0x06,0x9f,0x3e,0x76,0xfb,0xd6,0xed,0x1a,0xbf,0x98,0xf7,0xf3,0x74,0xdf,
    0x6e,0x47,0x4c,0xbc,0x51,0xef,0xac,0xed,0xba,0x06,0xd2,0xde,0x62,0x87,0xdb,0x2b,
    0xfe,0x27,0xe6,0x3a,0xff,0x99,0x5b,0xff,0x3e,0xd7,0x1e,0xe0,0x3f,0x92,0xb7,0xb5,
    0xfc,0x7f,0xf7,0x70,0xcd,0x80,0xff,0x6a,0xaf,0x19,0xca,0x09,0x65,0xc1,0xd9,0xde,
    0xbf,0x2e,0x21,0xee,0xaf,0x19,0x2a,0x09,0x71,0xd3,0x8b,0xa4,0xe7,0xaf,0x19,0xe2,
    0x84,0xb8,0xbf,0x66,0x48,0x12,0xe2,0xd6,0x86,0x2c,0x61,0x5b,0x61,0x0f,0xb1,0x6b,
    0xe5,0x62,0x87,0xd8,0xef,0x95,0x97,0x5b,0x29,0x76,0x38,0xb7,0x78,0x34,0x4b,0xa8,
    0x0b,0x7b,0xd6,0x9e,0x96,0x09,0xed,0x00,0xb3,0x6b,0x8b,0xbd,0x13,0xe2,0x76,0x6d,
    0x61,0xb6,0xf0,0x6b,0xfd,0xf8,0xaf,0x8c,0xfd,0x8c,0xbe,0x81,0xfc,0x5e,0xe2,0x60,
    0xf3,0xcd,0x8c,0xf5,0x80,0x6b,0x26,0x0e,0xd7,0x6d,0x78,0x4f,0x05,0xef,0xab,0x9d,
    0x99,0xb7,0x14,0x39,0x77,0xbf,0x84,0xef,0xae,0x20,0xfe,0xa8,0xdf,0xf2,0xee,0xfe,
    0x09,0x39,0xf3,0xfb,0xc0,0x84,0x18,0xec,0x5a,0x7e,0x3a,0x28,0x21,0x6e,0x87,0xe5,
    0xa2,0x83,0x13,0x8e,0x4d,0xf0,0x96,0x3b,0x0f,0x49,0x8a,0xdc,0x09,0xde,0xe7,0x4e,
    0x1b,0x63,0xdf,0x48,0x8a,0xb1,0xbd,0x39,0xe3,0xd8,0xc7,0x5c,0x38,0x44,0xb1,0xb4,
    0x76,0x7f,0xa0,0x76,0x83,0x43,0x0c,0xc0,0xdd,0x67,0xcf,0x18,0x12,0x3e,0x0f,0xf9,
    0x40,0xf7,0xa4,0x3a,0xc8,0x36,0x7e,0x6d,0xac,0x4e,0x6d,0xa0,0x5c,0x93,0xde,0xa3,
    0x44,0x7b,0xf0,0xae,0xd0,0x34,0xe1,0x76,0xcc,0x53,0x3b,0xa7,0x8b,0x83,0xcf,0x9b,
    0xdd,0xbb,0x0e,0x47,0x25,0xe4,0x4a,0xa5,0x02,0x3b,0x46,0x58,0xd9,0x61,0xc7,0x0a,
    0xc3,0xf3,0xad,0xdf,0xeb,0x9d,0x8c,0xdb,0x02,0x3e,0x9b,0xc0,0xd8,0x99,0xe0,0x9e,
    0x1b,0x01,0x1f,0x9f,0x1f,0x13,0xf4,0xac,0x07,0xe7,0x7f,0x50,0xdb,0x1a,0x03,0xfa,
    0xde,0xa4,0x31,0x61,0x32,0x13,0xdc,0xf3,0xa0,0x89,0xb2,0x8b,0xf6,0x36,0xca,0x16,
    0xea,0x98,0xec,0xea,0x80,0xcc,0xa4,0xfc,0x98,0x2c,0x7d,0x9c,0xdb,0x35,0xd4,0xd4,
    0x80,0xed,0xb2,0xf2,0xf4,0x80,0x6d,0xb2,0xf2,0xcc,0x80,0xed,0xb1,0xe7,0x1d,0xb3,
    0x02,0xea,0x40,0x6e,0xa6,0xea,0x1a,0x92,0xec,0xfe,0x1c,0xec,0xbc,0xbc,0xdc,0x4f,
    0xfd,0x80,0xf3,0x4b,0xcb,0x1c,0xa3,0xdd,0x92,0xe2,0x1d,0xc3,0x46,0xbd,0x9f,0x0f,
    0x0e,0x76,0x2f,0x70,0x1c,0xea,0x18,0xa3,0x36,0x0f,0x91,0x9d,0x7e,0x49,0xf1,0xcc,
    0x64,0x40,0x42,0x19,0xd3,0xfd,0xe9,0x1e,0x74,0x47,0xea,0x99,0xcb,0x15,0x09,0x79,
    0xbc,0x5f,0x66,0xcf,0x61,0xae,0x4c,0x88,0xe3,0xdd,0x32,0xb3,0x79,0x55,0x42,0xdc,
    0xf6,0x3f,0x83,0x13,0xd6,0x03,0xdc,0xfb,0x31,0xc4,0x8d,0xd9,0xa0,0x81,0xb9,0x1a,
    0x6d,0x1c,0xac,0x36,0xdb,0x18,0xb8,0x3a,0x21,0xef,0xdf,0x8b,0xb9,0x26,0x21,0x7e,
    0xb5,0x8b,0xc9,0x30,0xe7,0x3b,0x78,0xf8,0x3e,0x58,0xef,0x35,0xfe,0x32,0x21,0x6f,
    0x36,0xaf,0x95,0xcd,0xb2,0xb3,0x39,0x42,0xf6,0xae,0x75,0x36,0xaf,0x73,0x36,0x47,
    0xd4,0xd8,0xbc,0x3e,0x21,0x6f,0x36,0x47,0xc9,0x66,0x9d,0xb3,0x79,0x93,0x6c,0x8e,
    0x72,0x36,0x47,0x3b,0x9b,0x37,0xd5,0xd8,0xbc,0x39,0x21,0x6f,0xfa,0xe3,0xe4,0x8f,
    0xf7,0xe9,0x36,0xa7,0x3f,0xae,0x46,0x7f,0x7c,0x42,0xde,0xf4,0x27,0x4a,0xd7,0xd7,
    0xff,0x1b,0xa7,0x3f,0xb1,0x46,0x7f,0x52,0x42,0xde,0xf4,0xef,0x92,0xae,0xd7,0x9f,
    0xe6,0xf4,0xef,0xaa,0xd1,0x9f,0x9e,0x90,0xef,0xa7,0xf1,0x74,0xf7,0x1e,0xc6,0xd3,
    0x65,0xe2,0x66,0xed,0x81,0xb3,0x67,0x7e,0x4d,0x09,0x75,0x21,0x33,0x44,0xdf,0xd9,
    0xcc,0x4e,0x88,0x63,0x0c,0xdd,0xa3,0x31,0x74,0x8f,0xc6,0x10,0xf8,0x7d,0x1b,0x28,
    0x83,0x71,0x75,0x47,0x7e,0xbe,0x52,0x1c,0xfc,0xda,0xa7,0x81,0xef,0xdc,0x82,0x5b,
    0x98,0x14,0x5c,0xf5,0xbd,0x6a,0xe5,0x05,0x70,0xcf,0x8a,0xfb,0x93,0x3d,0x37,0x48,
    0xc8,0xe3,0xfa,0xe1,0x13,0xac,0xed,0xe2,0x6d,0x8e,0x82,0x9f,0x9b,0x1f,0xcf,0xc9,
    0x9f,0xb9,0x9a,0xdf,0xf0,0x67,0x5e,0xc2,0x71,0x87,0x71,0x82,0x7e,0x9d,0x9c,0xdb,
    0x84,0x2f,0x0f,0x24,0xe4,0xe0,0xaf,0xc9,0xce,0x97,0x1c,0xfa,0x6f,0x92,0x93,0xfd,
    0x53,0x42,0xce,0xcb,0x3e,0x22,0x7b,0x90,0x9b,0xee,0x64,0x1f,0x4d,0xc8,0x79,0xd9,
    0xc7,0x13,0xd6,0x07,0x3b,0x8f,0x3a,0xd9,0xa7,0x12,0x72,0x8f,0x57,0xd7,0x99,0xb0,
    0x8a,0x2d,0xd4,0x3a,0x73,0xb0,0xf8,0xc7,0x14,0x83,0x45,0x8a,0x19,0xe2,0x87,0x1c,
    0xb5,0xc2,0xb5,0x1f,0xdc,0xe2,0xfc,0x58,0xa1,0xf6,0x2f,0xae,0x8e,0x07,0xd6,0xb1,
    0x34,0xe1,0x7b,0xcd,0xd0,0xbd,0x3d,0xc7,0xe0,0xcf,0x72,0xd5,0xb9,0x54,0xfd,0x68,
    0x7a,0x2b,0x5c,0x3f,0xa2,0xef,0x1e,0x57,0x5c,0x97,0xcb,0x3e,0x64,0x57,0x4a,0x76,
    0xa5,0x5b,0xff,0x9f,0x55,0xff,0x34,0x96,0x76,0x1f,0x17,0xe8,0x8f,0xbf,0xc8,0xff,
    0xbf,0x25,0xec,0xff,0x3e,0xf2,0x7f,0x83,0xf3,0x1f,0xdc,0x0b,0xf9,0xf1,0xa2,0xf4,
    0x5e,0x50,0x5d,0x1b,0x54,0x7e,0x51,0xf3,0x1b,0xed,0x79,0x49,0xb1,0x2d,0x95,0x8a,
    0x98,0xbd,0xac,0x98,0xd5,0x8b,0x37,0xd9,0xd5,0x92,0x2d,0x3b,0xd9,0x35,0x4e,0x76,
    0x75,0x35,0xee,0x1c,0x9b,0xaf,0x08,0x37,0x7b,0x6b,0x9c,0x9d,0xb5,0xb2,0x53,0xe7,
    0xec,0xbc,0xe6,0xec,0xac,0x75,0x76,0x5e,0x77,0x76,0x60,0xf3,0x35,0xd7,0x17,0x6f,
    0x26,0x7c,0xf7,0xfb,0x75,0xd7,0x17,0xeb,0x65,0xfb,0xcd,0x9a,0x36,0x6f,0x70,0x7d,
    0xb1,0x5f,0x03,0xdf,0x25,0x47,0x5c,0xd6,0x2b,0x4e,0x36,0x1f,0xdf,0xd2,0xda,0x61,
    0x63,0xea,0xed,0x84,0x18,0x74,0x2e,0x2f,0xd3,0xa7,0x8d,0x6e,0x8e,0xbf,0xad,0x5c,
    0xd1,0x5f,0xdc,0xbb,0x7b,0xe0,0x16,0xa8,0xcf,0x3e,0x48,0x88,0x6d,0x4c,0x8a,0x77,
    0x6e,0xf1,0xbd,0x20,0xde,0x57,0xb7,0xfb,0xed,0x9b,0x12,0xca,0x01,0xc7,0x7e,0x1a,
    0x39,0x07,0xf8,0x66,0x67,0x77,0x53,0x8d,0xdd,0x2d,0xb2,0xfb,0x6e,0x52,0xd8,0xf9,
    0x28,0x21,0x5e,0x6b,0xe7,0x63,0x67,0xe7,0x23,0xd9,0xf9,0x71,0x99,0x6b,0xf7,0xa7,
    0xe2,0xd0,0x7e,0xd4,0x67,0xf8,0x67,0x0e,0xff,0x38,0x71,0x7b,0xf1,0x84,0x3a,0x25,
    0xf7,0x5c,0x69,0x67,0x42,0xbc,0xbb,0x7b,0x9e,0x8b,0x8d,0xe5,0xce,0x84,0xf7,0x0a,
    0x4d,0xb7,0x2e,0xa5,0x6e,0xd9,0xe9,0x56,0x52,0xe2,0xfe,0x59,0x70,0x7d,0x4a,0x7c,
    0xa8,0x7b,0x16,0x1c,0xa4,0xb4,0x09,0xce,0xec,0x45,0xb2,0x57,0xe7,0xec,0xc5,0x29,
    0xf1,0xee,0x4e,0x37,0x49,0xa9,0x1f,0x3b,0xdd,0xbd,0x52,0xb6,0xd1,0xb7,0xe3,0x2b,
    0x29,0x71,0xdf,0x8e,0xaf,0xa6,0xc4,0x7d,0x3b,0x9a,0x4b,0xd7,0xb7,0xa3,0x45,0x4a,
    0xdc,0xb7,0xa3,0x65,0x4a,0xdc,0xb7,0x63,0xef,0x94,0x36,0x5b,0x3a,0x5f,0xf6,0x91,
    0x3d,0xdf,0x8e,0x7d,0x53,0xe2,0xbe,0x1d,0xfb,0xa5,0xd4,0x07,0x67,0xd7,0x61,0x0f,
    0x07,0x6c,0x1f,0x38,0xe4,0x84,0x47,0xdc,0x1e,0x0f,0xdc,0x82,0xfc,0x78,0x44,0x7b,
    0x3c,0x9c,0xdb,0xfa,0xf6,0x17,0xed,0xf1,0xac,0xfc,0xb8,0xf6,0x78,0x56,0x7e,0xca,
    0xed,0xf1,0x30,0x47,0x16,0x06,0xd4,0x81,0x1c,0x38,0x9b,0x3b,0x8b,0x02,0xf6,0x81,
    0x95,0x97,0x04,0x6c,0x8b,0xed,0xb3,0x97,0x05,0xbc,0x06,0xb5,0xef,0xf2,0x6e,0xd2,
    0x9c,0x3d,0x34,0xa5,0xec,0x22,0x37,0xef,0xbe,0x9e,0xb2,0x7c,0x68,0x5a,0x60,0x6d,
    0x25,0xe7,0xb1,0x76,0x29,0xfd,0x01,0x76,0x93,0xb0,0x8e,0x29,0xf1,0xaf,0x3b,0xec,
    0x98,0x94,0xfa,0xc0,0x2c,0x7f,0x74,0x4a,0x29,0x0b,0xce,0xda,0x7a,0x5c,0x4a,0x3f,
    0x6f,0x96,0xcc,0xf1,0x29,0xe5,0x80,0xdf,0x28,0xec,0x84,0x94,0x38,0xbe,0x7f,0xb9,
    0x4a,0xd7,0x47,0xdf,0x4a,0x89,0xe3,0xfa,0x06,0xe5,0x93,0xd2,0xe2,0xfa,0x06,0x5c,
    0x93,0xda,0x6f,0xfb,0xe6,0x93,0x53,0xca,0x5c,0x6f,0xdf,0x6f,0xa4,0xc4,0xec,0x9a,
    0xb3,0x73,0x4a,0x0c,0xf3,0xee,0x21,0xf5,0xef,0xe9,0x29,0xf1,0x55,0xa5,0x62,0x9e,
    0x9f,0x91,0x12,0xb7,0xe7,0x73,0xcf,0x48,0xff,0xdb,0x92,0x05,0xbf,0xeb,0x79,0x88,
    0xda,0x66,0xcf,0xf0,0xce,0x4a,0x29,0x07,0x7c,0x94,0xb0,0xef,0xa5,0xc4,0x51,0x2f,
    0xf2,0xa7,0x8d,0x97,0x47,0x74,0x4d,0x01,0x99,0x83,0x1a,0x58,0x17,0x72,0x2a,0xe4,
    0x31,0x96,0xcc,0xc7,0xbf,0x05,0x1c,0x7f,0x89,0xc6,0xe0,0x2a,0x37,0x06,0xc1,0xbd,
    0x88,0x77,0xda,0x64,0x13,0xe7,0xe6,0xef,0xcb,0x01,0xed,0xf6,0x74,0xef,0x74,0xad,
    0x09,0x88,0xc3,0x17,0xbb,0x9e,0x7b,0x45,0x63,0x68,0x8d,0xde,0x4d,0x5f,0x2b,0x5b,
    0x6b,0x83,0x22,0x26,0x33,0x1a,0x28,0xb7,0x4a,0x76,0x21,0x67,0x75,0xae,0x72,0xed,
    0x38,0xb5,0x81,0x75,0xa2,0x6d,0xd0,0x81,0x8d,0xb9,0xaa,0xe7,0x8d,0x80,0x6d,0x19,
    0x26,0xfd,0x75,0xd2,0x5f,0xe7,0xea,0xb9,0xbb,0x81,0x72,0xd6,0x5e,0xc3,0x67,0x0a,
    0xb7,0xb9,0x68,0x39,0xe0,0xdd,0x80,0x3a,0x83,0xdc,0x3c,0x7e,0x2f,0xa0,0xfc,0xbb,
    0xaa,0xc7,0xae,0xc1,0x26,0x3b,0x3f,0x4f,0x56,0xbc,0x71,0x5d,0x07,0x9f,0xd7,0x39,
    0xee,0x08,0xc7,0xc1,0xd6,0x3a,0x5d,0x73,0x6d,0xae,0x79,0xf7,0x70,0x13,0x72,0xba,
    0x6c,0x6f,0x0a,0x8a,0xf5,0x07,0xdf,0xbd,0xfb,0xf5,0x67,0x6b,0xc0,0x6b,0xc6,0x2d,
    0xc1,0xee,0xeb,0xc6,0x47,0x41,0xb1,0x6e,0x6c,0x0d,0x8a,0x75,0x03,0xdc,0x27,0xe2,
    0xe0,0xcb,0x47,0xaa,0x7f,0x87,0xab,0x1f,0xd7,0xde,0xdb,0xd1,0x3e,0xd5,0xbf,0xdd,
    0xbd,0x33,0xf9,0x79,0xcd,0x35,0xac,0xc9,0xec,0x70,0xd7,0xb0,0x5f,0xe8,0xfa,0x1d,
    0x7e,0x43,0x7e,0xbb,0x62,0xb5,0x53,0xb2,0x3b,0x5d,0x9f,0xcc,0x6a,0xa0,0x3c,0xfc,
    0x41,0xdc,0x20,0x67,0xed,0xde,0xec,0xe2,0x76,0x46,0x03,0xfd,0x45,0x9c,0xe1,0xff,
    0x4e,0xc7,0x9d,0xd4,0x40,0x5d,0x70,0xb0,0xb7,0xd3,0x7d,0x7f,0x50,0xd1,0x37,0x1e,
    0xf8,0xe6,0x60,0xd7,0x1a,0x15,0x52,0x07,0xdc,0x40,0xc5,0x2b,0x08,0x8b,0x78,0xd5,
    0xeb,0x9d,0x57,0xc4,0x25,0x0d,0x77,0x7f,0xff,0x3e,0xc9,0xcb,0x87,0xeb,0xfb,0x8a,
    0x44,0xdf,0x9e,0xe0,0xdd,0xdb,0x79,0x19,0x7d,0x6c,0xd2,0x3e,0xc9,0xf0,0x07,0x32,
    0xda,0x06,0x5f,0x71,0xeb,0xd0,0x05,0xe9,0x97,0xdf,0x91,0xee,0x95,0x12,0xf7,0x87,
    0xbd,0xef,0xdb,0x3b,0x25,0xef,0xdf,0xf7,0xbd,0x2c,0x25,0xee,0xdf,0xf7,0xed,0x9b,
    0x12,0xf7,0xef,0xfb,0xf6,0x4b,0x89,0xfb,0xf7,0x7d,0x07,0x48,0xce,0xbf,0xef,0x3b,
    0x30,0x25,0xee,0xdf,0xf7,0xfd,0x69,0x4a,0xfd,0x81,0x6e,0xcd,0xbb,0x42,0xba,0xfe,
    0x7d,0xdf,0x41,0x29,0x71,0xff,0xbe,0xef,0x95,0x29,0xf5,0x07,0x39,0xdd,0xc1,0xd2,
    0xf5,0xef,0xfb,0x0e,0x49,0x89,0xfb,0xf7,0x7d,0x87,0xa6,0xd4,0x1f,0xe2,0x74,0x7b,
    0xa4,0x5f,0x7e,0x47,0x7a,0x58,0x4a,0xdc,0x1f,0x16,0xb3,0x5f,0xa6,0xe4,0x7d,0xcc,
    0x7e,0x9d,0x12,0xf7,0x31,0x1b,0x91,0x12,0xf7,0x31,0xbb,0x2e,0x25,0xee,0x63,0x76,
    0x83,0xe4,0x7c,0xcc,0x46,0xa6,0xc4,0x7d,0xcc,0x6e,0x4c,0xa9,0x3f,0xd2,0xf9,0x7e,
    0x93,0x74,0x7d,0xcc,0x46,0xa7,0xc4,0x7d,0xcc,0x6e,0x4e,0xa9,0x3f,0xda,0xe9,0xde,
    0x2a,0x5d,0x1f,0xb3,0x31,0x29,0x71,0x1f,0xb3,0xb1,0x29,0xf5,0xc1,0xd9,0x3b,0xd2,
    0x3f,0x4e,0x19,0x4b,0x70,0xb8,0x7f,0x88,0xef,0xd8,0x80,0xd9,0xfc,0x98,0xa2,0x7d,
    0x0a,0xee,0x9f,0xda,0xbd,0xd1,0xa9,0x29,0xff,0x5e,0x04,0x38,0x3c,0xdb,0xc1,0xb5,
    0xd8,0x5d,0x29,0xbf,0x81,0xeb,0xe9,0xbe,0x3f,0x9b,0x96,0x12,0xb7,0x7b,0xc0,0xd3,
    0x53,0x62,0xbd,0xf4,0xbd,0xa2,0xdd,0x7b,0x9d,0x91,0x92,0x33,0xbd,0x99,0x35,0x7a,
    0xb3,0x52,0x62,0xb5,0xef,0x47,0x36,0xa5,0xe4,0x4c,0xef,0x9e,0x1a,0xbd,0x39,0x29,
    0xb1,0xda,0xf7,0x25,0xef,0x4d,0xc9,0xd9,0xf3,0xb7,0xb9,0x29,0xdb,0x34,0xb4,0x54,
    0xb4,0xe7,0x77,0x6a,0xcf,0x5c,0x67,0xff,0xbe,0x94,0xb8,0x3d,0x0f,0x9f,0x27,0xbd,
    0x61,0xee,0x39,0xf4,0xfd,0x29,0xe5,0xe6,0xa5,0xbb,0x3f,0x97,0x7f,0x20,0x25,0x67,
    0x31,0xfc,0x43,0xca,0xef,0x8c,0xa7,0x38,0x3f,0xe6,0xa7,0xc4,0xbd,0x1f,0x0f,0xc9,
    0x8f,0xf9,0xce,0x8f,0x3f,0xa5,0xc4,0xcd,0x8f,0x87,0xa5,0x37,0xcc,0xed,0x31,0x17,
    0xa4,0x94,0x7b,0xd8,0xed,0x41,0x1e,0x49,0x89,0xfb,0xfb,0xde,0x7f,0x4e,0x89,0xa3,
    0xef,0xf1,0x4d,0xe4,0xbd,0xa5,0xe2,0xde,0xf1,0x5f,0x53,0x7e,0x27,0x89,0x78,0x3d,
    0x90,0x16,0xf7,0x8e,0x1f,0x4b,0xc9,0x59,0x5b,0x9e,0x48,0x69,0xa7,0x51,0xfb,0x15,
    0x60,0x4f,0xa6,0x94,0x7b,0xc2,0x8d,0xa5,0x45,0x29,0x71,0xf4,0x9b,0x5d,0x1b,0x2f,
    0x4e,0xd9,0xff,0x8b,0xdc,0x5e,0x6b,0xa9,0xdb,0x6b,0x2d,0x4e,0x8b,0xfb,0xb8,0xb6,
    0xef,0x69,0x1d,0x32,0x5f,0xf7,0xd1,0xbd,0x9e,0x03,0xb2,0x22,0x37,0x2f,0xd5,0x5c,
    0xeb,0x2b,0xae,0xf5,0x1e,0x38,0xdb,0x5f,0xaf,0x4b,0xa9,0x0b,0x19,0xe4,0xf2,0xb7,
    0xd3,0x22,0x97,0x83,0x5b,0x9f,0x1f,0xc0,0x90,0xcb,0xd7,0xbb,0xf6,0x1e,0x26,0x1d,
    0xe8,0xda,0x3e,0xf3,0xf0,0x8c,0xb8,0xc9,0x7c,0x33,0x63,0x7d,0x5e,0xa6,0x6d,0x46,
    0xdc,0xf6,0xab,0x47,0x66,0xc4,0xa0,0x6b,0xfb,0xd3,0x76,0x19,0x71,0x7c,0xe3,0x6c,
    0xfb,0xd3,0xf6,0x19,0x71,0xec,0x4f,0xaf,0x54,0x0c,0x3a,0x64,0xc4,0x6d,0xbf,0x79,
    0x54,0x46,0xcc,0xfa,0xfa,0xe8,0x8c,0x18,0xbe,0x8d,0xb6,0xf7,0x65,0x3a,0x65,0xdc,
    0x43,0x81,0xb3,0x3d,0xfc,0xb1,0x19,0x71,0x7b,0xae,0x63,0x31,0x3e,0x2e,0x23,0x67,
    0xfb,0xb9,0x13,0x32,0xea,0x1d,0xa7,0xfb,0xee,0x16,0x17,0xfc,0xda,0x3a,0xdb,0x47,
    0x7b,0x17,0xac,0x7b,0x90,0x47,0xcc,0x6c,0x1f,0xb9,0x31,0x65,0xbf,0xad,0xd1,0xfd,
    0x8d,0xcd,0x2e,0xd6,0xe0,0xde,0xc9,0x8f,0x4d,0xb2,0xf9,0x4e,0x5a,0xbc,0x8b,0xf7,
    0xbe,0xf6,0xae,0xad,0xc3,0x62,0x9f,0xfb,0x41,0x4a,0x7c,0x8c,0xcb,0x77,0xff,0x4a,
    0x59,0x3f,0xb8,0xea,0x1e,0x41,0xb6,0x36,0xd5,0x94,0x37,0x3b,0x7f,0x2f,0x6b,0xa0,
    0xde,0x3b,0xca,0x93,0x90,0xb5,0x58,0x6d,0xa9,0xf1,0x77,0x87,0xf3,0x17,0xdc,0x56,
    0xd8,0x93,0xcd,0xad,0xce,0xdf,0x6d,0xce,0x5f,0xdb,0x83,0x7f,0x92,0x12,0xf7,0xfe,
    0x7e,0x2a,0x7f,0x3f,0x91,0x7f,0x3b,0x64,0x6b,0x7b,0x4d,0x79,0x87,0xf3,0xb7,0x6f,
    0x03,0xf5,0xb6,0xca,0x5f,0xc8,0xee,0xda,0x77,0xd5,0xf8,0x1b,0x67,0x85,0xbf,0xe0,
    0xbe,0xc0,0x35,0x72,0x46,0x9b,0x5f,0xb8,0x9c,0xb0,0x53,0x7e,0xf4,0xf4,0xd7,0xf7,
    0x19,0xf1,0x61,0x6e,0xed,0xa8,0xcb,0x18,0xaf,0x92,0x1b,0x63,0xf5,0x19,0x75,0xf1,
    0x7d,0xbd,0xe5,0x9d,0x20,0x23,0xee,0xdf,0xf5,0x8e,0x32,0xfa,0x1e,0x68,0xec,0x98,
    0x1f,0xf8,0xb5,0xb6,0x0d,0x6c,0xa0,0x0c,0xda,0x0b,0xf9,0x2f,0x5c,0xbb,0x07,0x34,
    0xb0,0x6e,0x70,0x75,0xe2,0x6c,0x5f,0x96,0xba,0xf9,0x0d,0x39,0xc4,0xd8,0xb8,0x06,
    0xc7,0x0d,0x6c,0x28,0xde,0x53,0xc5,0xb8,0xff,0x8a,0xe6,0xf0,0x02,0x87,0x35,0xd3,
    0x9c,0x5e,0x50,0x2a,0xde,0xd7,0x68,0x9e,0x11,0xef,0xed,0xde,0xcd,0x68,0x91,0x51,
    0xbf,0x79,0x56,0xcc,0x97,0x96,0x19,0x71,0x6b,0x73,0xab,0x8c,0x58,0x9a,0x15,0x6b,
    0xed,0xbe,0x19,0x71,0xf8,0x75,0x6e,0x6e,0x09,0xfb,0x8d,0xc3,0x42,0xee,0x01,0xc1,
    0xd5,0xeb,0xef,0x10,0xd4,0xe9,0x9b,0x75,0xc4,0x2a,0xd5,0x5e,0xf2,0x70,0xb7,0x97,
    0x7c,0x4c,0x7b,0xc9,0x2e,0xba,0xcf,0x67,0xf8,0x13,0xda,0x4b,0x3e,0xa6,0xef,0x59,
    0xbc,0x3e,0x7e,0xb7,0x69,0x4f,0x34,0xbe,0x81,0xf5,0x22,0xfe,0xd0,0x81,0x6d,0x1b,
    0x47,0x47,0x2a,0xb7,0xda,0x3b,0x8b,0xed,0xdd,0xfe,0x16,0x5c,0xbb,0xfc,0x68,0x2f,
    0x9b,0xed,0xdc,0x37,0xcf,0x1d,0x42,0x7e,0xbb,0xda,0xe4,0xde,0xed,0xe8,0x18,0x12,
    0xbf,0xd5,0x9e,0xa7,0x85,0xc4,0xfa,0x97,0x0a,0xbd,0xa3,0xa5,0xd7,0xe8,0xf4,0x8e,
    0x09,0x89,0x9b,0x5e,0xa7,0x90,0x58,0x7f,0xf7,0x2d,0xf6,0xb1,0x21,0xed,0x75,0x72,
    0xdf,0x62,0x1f,0x1f,0xf2,0x1b,0xde,0x63,0xf5,0x9d,0x3d,0xfe,0xbe,0xc2,0x49,0xfa,
    0xdb,0x0a,0x97,0xe7,0x65,0x9c,0x43,0x66,0xbc,0xae,0x23,0xac,0x1d,0xed,0xc3,0xdd,
    0xbf,0x8b,0xc6,0xef,0x17,0x79,0x04,0x4f,0xcc,0x8f,0xff,0x03,0xb5,0x2b,0x49,0xcc,
    0xd8,0x4d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(kAlphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         ivec3 dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = kAlphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//  bool controlFlag = kAlphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//  if(kAlphaBits == 1){
//   uint active_lane_index = subgroupClusteredMax(controlFlag ? gl_SubgroupInvocationID : 0, 16);
//   color565 = subgroupShuffle(color565, active_lane_index);
//   if(punchthrough && result . a == 0){
//    indices = 3;
//   }
//  }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
