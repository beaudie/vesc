// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000028.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000028[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5d,0x6c,0x95,0x45,
    0x10,0x86,0xbf,0x3d,0xa7,0x3f,0xfc,0x15,0xaa,0x40,0x15,0x6d,0xa0,0x05,0x5a,0xaa,
    0xd4,0x82,0xc8,0x9f,0x94,0x03,0x45,0x90,0x56,0x69,0x28,0x14,0x05,0x0b,0x58,0x45,
    0xab,0x88,0x28,0x15,0x8a,0x80,0x4a,0x4d,0x41,0x4a,0x00,0x95,0x06,0xa5,0x31,0x40,
    0x34,0xf1,0x02,0x50,0x30,0xbd,0xf1,0xca,0x04,0x15,0x2e,0x04,0x95,0xc6,0x10,0x34,
    0x4a,0x4d,0x94,0x26,0x4a,0x0d,0xdc,0x13,0x11,0x02,0xba,0xf3,0xed,0x33,0xed,0xd8,
    0xf8,0x73,0x92,0xcd,0x77,0xf6,0xdd,0x99,0x77,0x66,0xde,0x9d,0xdd,0xef,0xb4,0xc9,
    0xc4,0xa8,0xcc,0x28,0x72,0x51,0xbf,0xa8,0x4f,0xb4,0xdc,0x45,0xf1,0xe7,0xa6,0x28,
    0x11,0x39,0x9e,0x13,0xfc,0xb3,0x7f,0x94,0x11,0xcf,0xcb,0x2b,0x17,0x55,0x96,0x34,
    0xac,0xaf,0x2b,0x99,0x38,0x69,0xbc,0xd8,0x0d,0x8c,0x92,0xb1,0xbd,0xac,0x0d,0x8a,
    0x32,0xa3,0x34,0xff,0x94,0xf1,0xfc,0x8a,0x55,0x6b,0x04,0x2f,0xf4,0xe3,0x92,0x1f,
    0xd9,0xde,0x4e,0xf0,0x4c,0xe1,0xf0,0xdf,0x0a,0x63,0x4e,0xf1,0x89,0xa2,0x8a,0x28,
    0x3d,0x2a,0x0e,0x61,0xa3,0x51,0x3c,0x15,0x73,0x60,0x7d,0x0c,0x96,0x00,0xcb,0x36,
    0x58,0x12,0x6c,0x88,0xc1,0xd2,0xc0,0x6e,0x35,0x58,0x3a,0x58,0xae,0xc1,0x32,0xc0,
    0xf2,0x0c,0x96,0x09,0x36,0xda,0x60,0x7d,0xc0,0x8a,0x0c,0xd6,0x17,0xac,0xd8,0x60,
    0xfd,0xc0,0xc6,0x1b,0xac,0x3f,0xd8,0x44,0x83,0x0d,0x00,0x9b,0x6a,0xb0,0x2c,0xb0,
    0xe9,0xb1,0x4e,0xc9,0xee,0x7a,0x45,0xb3,0xe5,0xfe,0x39,0x12,0x7d,0x74,0x9e,0x6f,
    0xe6,0xa2,0xf3,0x70,0xe6,0x83,0xbd,0x57,0x22,0x5e,0x4f,0xc6,0xda,0xc8,0xf7,0x1c,
    0xff,0x2d,0x83,0x3a,0xc7,0x7a,0xfb,0x0c,0xe2,0x75,0xb5,0x15,0xa4,0x86,0x78,0x8b,
    0x81,0x06,0x17,0xcd,0xda,0xca,0x57,0xa4,0x74,0x2e,0x7a,0xed,0xdf,0x37,0xac,0x6c,
    0xa8,0x9f,0xe7,0xc1,0x21,0x7b,0x73,0x8b,0x9f,0xe7,0x33,0x4f,0x30,0x1f,0x8d,0xa6,
    0x69,0x31,0x9e,0x16,0x15,0x60,0x2b,0x78,0x29,0xf3,0x42,0xe3,0x3f,0x06,0x7b,0xf1,
    0x17,0xfe,0xb1,0xf0,0x45,0x71,0x3d,0xd9,0xb1,0x06,0xf9,0x8c,0xbc,0xee,0xfc,0xff,
    0x7b,0xe4,0x75,0x3f,0xd3,0xa2,0xbb,0xd8,0xa7,0x62,0xe2,0xcb,0xbc,0x04,0x6c,0x2c,
    0xf5,0x8c,0x23,0x1f,0xb1,0x1f,0xcf,0x5a,0xbe,0x59,0x9f,0x6c,0xea,0x99,0xd2,0xed,
    0x1b,0xd6,0xe5,0x39,0x8d,0x7c,0xd5,0x7e,0x36,0xbd,0xa6,0xf3,0xf9,0x68,0x2d,0xf5,
    0x2e,0xc6,0x57,0xf8,0x86,0x79,0xa6,0x1a,0xe6,0x89,0xe8,0xef,0x1f,0x8e,0x62,0x74,
    0xbb,0xdf,0xb7,0xa5,0xfe,0x59,0x43,0xfc,0x65,0xe0,0x4b,0xa9,0x47,0xe6,0xcb,0x7b,
    0xc5,0xaf,0xed,0x35,0xaf,0xe3,0x8c,0x88,0xff,0x53,0xe4,0x9f,0x47,0x3e,0xab,0xd0,
    0x3f,0xc9,0xbc,0x9e,0xb5,0xa4,0xf1,0x6f,0x20,0x3f,0x9d,0x6f,0xc2,0x47,0xec,0xb7,
    0x92,0xbf,0xb5,0xdf,0xc5,0x19,0xd2,0xf9,0x21,0xce,0x80,0xce,0x8f,0x71,0x9e,0x74,
    0x7e,0xaa,0xd7,0x7e,0x9c,0xe5,0x7c,0x68,0xff,0xfd,0x68,0xea,0x91,0xf9,0x6f,0xf1,
    0xac,0x69,0xa6,0xd4,0x73,0x91,0xd8,0xda,0x5f,0x17,0xb9,0x73,0x92,0xc6,0x7e,0xae,
    0x17,0x73,0x4b,0x53,0x53,0x69,0xb1,0xcf,0x4a,0xec,0xca,0x5d,0xc0,0xec,0x50,0xdb,
    0x0a,0xff,0xbd,0xfe,0xf0,0xba,0x99,0x3a,0x7f,0xc0,0xcf,0xf7,0xbc,0xf6,0x5e,0x6a,
    0xb2,0xdf,0xd1,0x04,0xfb,0x16,0xc1,0x7f,0xc5,0x23,0xb2,0xcf,0x29,0xfa,0xbe,0x88,
    0xde,0xae,0xf2,0x71,0xa4,0xaf,0xef,0x00,0x2b,0x32,0x7b,0xba,0x86,0x33,0x73,0x27,
    0xeb,0xb3,0x3c,0x83,0xf4,0xdc,0xdd,0xf4,0xe5,0x38,0xf8,0xc4,0x66,0x02,0xf8,0x56,
    0x6f,0x23,0xf3,0x7b,0xf0,0x9b,0x80,0xdf,0x14,0xee,0x8f,0x12,0x7a,0x34,0x45,0x3f,
    0xde,0x0b,0x7e,0xd4,0xdb,0x0c,0x8c,0x75,0x09,0x98,0xf4,0xe9,0xef,0x3e,0xf3,0x14,
    0xf9,0x5c,0xf5,0xf6,0xa5,0xdc,0x37,0x29,0xea,0x91,0xef,0x0b,0xbd,0x9f,0xec,0x43,
    0x19,0x31,0xe5,0xf3,0x2a,0x7b,0x33,0x0b,0xbc,0xda,0xab,0x23,0x39,0x15,0xbb,0x80,
    0xa9,0xdd,0x1f,0x9e,0x43,0xb9,0xe4,0x79,0xd9,0x6b,0x21,0x76,0x0f,0xba,0x60,0x93,
    0x8e,0xcf,0x74,0x53,0xc3,0x1c,0x6a,0x98,0x6d,0x6a,0xb8,0x1f,0x5c,0x6b,0x98,0x0b,
    0xa6,0x35,0x54,0x98,0x1a,0xe6,0xc6,0x77,0x60,0x14,0x63,0x12,0xb7,0xdc,0xd4,0x30,
    0x8f,0xd8,0xce,0xd4,0x50,0x09,0xae,0x35,0x8c,0x73,0x01,0x53,0x3b,0xa9,0x41,0xb9,
    0x2a,0x4c,0x0d,0xf3,0x5c,0xb0,0x49,0xe1,0x53,0x6e,0x6a,0xa8,0xa2,0x86,0xf9,0xa6,
    0x86,0x05,0xe0,0x5a,0xc3,0x42,0x30,0xad,0x61,0x91,0xa9,0x61,0x61,0x9c,0x4f,0x14,
    0x63,0x12,0xb7,0x9a,0x3e,0x92,0xb8,0x0f,0x13,0x7b,0x9e,0xeb,0xb9,0x17,0x24,0x47,
    0xb5,0x5d,0x64,0x72,0xac,0xc4,0xae,0x02,0xbf,0x6a,0xf2,0x91,0xfb,0xe2,0x51,0xee,
    0x0a,0xed,0xb9,0xc7,0xc8,0xb9,0xd6,0xf4,0xdc,0xe3,0xe0,0x4d,0xf4,0xdc,0x13,0x60,
    0xc2,0x5b,0xcf,0x7d,0xfd,0x24,0xb8,0xf0,0xc8,0x7d,0xf2,0x34,0x3c,0x75,0xf0,0x88,
    0xc6,0x2b,0xc1,0xeb,0x39,0x47,0xcf,0x80,0xc9,0xbe,0xc8,0xfc,0x59,0x78,0x22,0x83,
    0xad,0x06,0x73,0xb1,0x4e,0x19,0xf1,0xdd,0xf4,0x1c,0xb6,0xab,0xe1,0xa8,0xf3,0x7c,
    0x35,0xf1,0x39,0x0a,0xf5,0xac,0xf4,0xbe,0x72,0x67,0xbd,0x00,0x56,0x4b,0x4c,0xf1,
    0x5d,0x0b,0xbe,0xc3,0xdb,0xc8,0x7c,0x1d,0x7c,0x6b,0x4d,0xee,0xeb,0xc9,0xbd,0xc1,
    0xe4,0xfe,0x22,0xb8,0xe6,0xbe,0x01,0x6c,0x89,0xd7,0x58,0xee,0xef,0x8d,0xc4,0x5e,
    0x47,0xae,0x1b,0x4c,0x1f,0xbc,0x04,0xdf,0x26,0xd3,0x07,0x2f,0x83,0x6b,0x1f,0xbc,
    0x02,0xa6,0x7d,0xd0,0x68,0xfa,0x40,0xd6,0x36,0xfb,0xb1,0x93,0xbd,0xdd,0x69,0xb8,
    0x5f,0x87,0x7b,0x97,0xe1,0x7e,0x03,0x5c,0xb9,0xdf,0x04,0x53,0xee,0x16,0xc3,0x2d,
    0x6b,0xbb,0xfd,0x68,0x81,0x7b,0x37,0xda,0x0b,0xcf,0x1e,0xea,0x92,0x7b,0xed,0x23,
    0xb8,0xde,0x02,0x9f,0x46,0xbf,0xa9,0x5f,0x0b,0xfd,0x26,0x36,0x6f,0x13,0x73,0x27,
    0xf6,0xbb,0x89,0xdb,0x6a,0xe2,0x8a,0xcd,0x5e,0x3f,0x5a,0xf1,0xdf,0x6b,0xe2,0xbe,
    0x63,0xe2,0x56,0xf9,0xb7,0x82,0xbc,0x4f,0xf6,0x81,0x6d,0x34,0xf7,0x66,0x82,0x9e,
    0x90,0xf5,0xfd,0xf8,0xe9,0xd8,0xee,0xb9,0x04,0x3f,0x80,0xef,0xfe,0x98,0xab,0x6f,
    0xbc,0x57,0xef,0xc2,0x73,0x80,0xbb,0x3b,0xdd,0xbc,0xef,0xa4,0x26,0xcd,0xa9,0x95,
    0x9a,0xc4,0xa7,0xca,0x05,0x9f,0x16,0xfc,0xf7,0x62,0xdb,0x88,0xed,0x66,0x93,0xff,
    0x96,0x7f,0xc8,0x7f,0xdb,0xff,0xe4,0xdf,0x8c,0x9f,0x8e,0x6d,0xe4,0xbf,0x1d,0xdf,
    0x66,0x93,0xff,0x0e,0x78,0xb6,0xff,0x4b,0xfe,0x9a,0x53,0xa3,0xc9,0x7f,0xbe,0x0b,
    0x35,0xb4,0xe2,0xbf,0x39,0x3e,0x07,0xe1,0x1d,0xf5,0x3e,0xeb,0xcd,0x9e,0x49,0xe6,
    0x07,0xc1,0xca,0x5d,0x4f,0x9f,0x1d,0xa6,0xcf,0x0e,0x99,0x3e,0xfb,0x00,0x5c,0xfb,
    0xec,0x43,0x30,0xed,0xb3,0xa3,0x66,0xbf,0x65,0xed,0x48,0x6c,0x1b,0x72,0x3b,0x62,
    0xce,0x78,0x1b,0x31,0x23,0xfc,0xd2,0xb8,0xd0,0xae,0xf9,0xef,0xd3,0x62,0xfb,0xe0,
    0x73,0x25,0xfe,0x9d,0x10,0x62,0x5d,0xc5,0x2f,0x0b,0x9f,0xa4,0xeb,0x89,0x75,0x35,
    0xf6,0x8d,0xa2,0x1b,0xf8,0xdd,0x88,0x35,0x0d,0xb1,0x44,0xf8,0x36,0x7e,0xcf,0x36,
    0x83,0x39,0x17,0x70,0x79,0xcf,0x0f,0xf0,0x7a,0xc5,0xbf,0x3d,0xb9,0x57,0x6f,0x63,
    0x3d,0x17,0x6d,0x25,0x37,0xe1,0xbc,0x66,0xfc,0xaf,0x93,0x8b,0xfc,0x2e,0xb0,0x36,
    0x92,0xd3,0x9f,0x9e,0xe5,0x0a,0xd8,0x65,0xb8,0x17,0xb8,0xc0,0x7f,0x03,0xdf,0x6b,
    0xbc,0x77,0x44,0xfb,0x49,0x2e,0xac,0x1f,0xec,0x75,0x0f,0x7e,0x8c,0x46,0x8e,0x7a,
    0x73,0x7a,0x69,0xd4,0x8f,0x98,0xf2,0x54,0x8d,0x06,0xb8,0xe0,0xa7,0x1a,0x0d,0x35,
    0x1a,0xc9,0x5a,0x96,0x1f,0xd9,0xf8,0xc9,0x53,0x35,0xba,0x19,0x3f,0xab,0xd1,0x60,
    0x17,0x70,0xab,0xd1,0x10,0xa3,0xd1,0x60,0xa3,0x51,0x0e,0x9c,0x59,0xae,0xc7,0x7f,
    0x10,0x9c,0xaa,0x91,0xda,0x0c,0x35,0x1a,0xe5,0x18,0x8d,0xaa,0x5d,0xe0,0x97,0xbc,
    0x06,0x91,0xab,0x6a,0x34,0xd5,0x85,0xf5,0x49,0xc4,0x57,0x8d,0x3e,0x41,0xa3,0x04,
    0xf5,0x16,0xf5,0xd2,0x28,0x97,0x98,0xb9,0x46,0xa3,0xe1,0x2e,0xf8,0xa9,0x46,0x63,
    0x8c,0x46,0xb2,0x36,0xc2,0x8f,0x91,0xf8,0x8d,0x34,0x1a,0x8d,0xc6,0xcf,0x6a,0x54,
    0xe0,0x02,0x6e,0x35,0x2a,0x34,0x1a,0x15,0x18,0x8d,0x8a,0xe0,0x1c,0x61,0x34,0xca,
    0x87,0x53,0x35,0x52,0x9b,0x31,0x46,0xa3,0x22,0xa3,0xd1,0x43,0x2e,0xf0,0x4b,0x5e,
    0xf9,0xe4,0xaa,0x1a,0x95,0xba,0xb0,0x2e,0x5a,0x25,0x88,0xa9,0x67,0xef,0x28,0xf7,
    0x82,0xd8,0x2d,0xa6,0xd7,0x1a,0xf1,0x29,0x32,0x67,0xfe,0x53,0xce,0xfc,0x31,0x73,
    0xe6,0x3f,0x03,0xd7,0x33,0xff,0x39,0x98,0x9e,0xf9,0x13,0xe6,0xcc,0xcb,0xda,0x71,
    0x3f,0x4e,0x12,0xf7,0xa4,0x79,0x6f,0x7d,0x09,0xf7,0x29,0xc3,0xfd,0x15,0xb8,0x72,
    0x7f,0x0d,0xa6,0xdc,0xed,0x86,0x5b,0xd6,0x4e,0xfb,0x71,0x06,0xee,0x33,0xe6,0xfd,
    0xfd,0x2d,0xdc,0x67,0xcd,0xfb,0xfb,0x3b,0xf0,0x53,0xfc,0x06,0xfc,0x1e,0xac,0xc1,
    0xc4,0xfb,0x01,0xbc,0x96,0x78,0x1d,0x26,0x9e,0xac,0x9d,0xf3,0xa3,0x83,0x78,0xe7,
    0xcc,0x99,0x2d,0x73,0xe1,0xef,0x91,0xc5,0xe6,0xb7,0xa2,0xda,0x75,0x18,0xad,0x97,
    0xb8,0x60,0x73,0x06,0x9f,0x73,0x26,0x9f,0x9f,0xc8,0x67,0xb2,0xc9,0xe7,0x67,0x70,
    0xcd,0xa7,0xd3,0xe4,0x23,0x6b,0xe7,0xfd,0xe8,0x24,0xce,0x79,0x93,0xcf,0x7d,0xe4,
    0xb3,0xc4,0xec,0xbd,0xda,0x75,0x9a,0x7c,0x1e,0x71,0xc1,0xa6,0x03,0x9f,0xf3,0x26,
    0x9f,0x5f,0xc8,0xe7,0x98,0xc9,0xe7,0x57,0x70,0xcd,0xa7,0xcb,0xe4,0x23,0x6b,0x17,
    0xe4,0x7f,0x07,0xc4,0xb9,0x60,0xf2,0x99,0xe3,0xc2,0xdf,0x67,0x12,0x4f,0xdf,0x51,
    0x6a,0xd7,0x65,0xf2,0x59,0xe6,0x82,0x4d,0x27,0x3e,0x17,0xb0,0x6d,0xc7,0xf6,0xb4,
    0x39,0xeb,0xdf,0xa0,0x77,0xd2,0xc4,0x99,0xe1,0x7a,0xf0,0xa8,0x97,0x6f,0xbb,0x89,
    0xb3,0xd4,0x85,0x58,0x5d,0xf8,0x9c,0xc6,0xf6,0x04,0xb6,0xc7,0x79,0xd7,0x8a,0xed,
    0x17,0xf0,0xc9,0xd0,0xff,0x57,0x25,0xcc,0xbb,0x56,0x7d,0x4e,0x18,0xfe,0x1a,0x17,
    0x62,0xb4,0xe3,0x2f,0x7c,0x33,0xbc,0xc7,0x25,0xd6,0xae,0xfb,0x2e,0x99,0xea,0xc7,
    0x5f,0xdc,0x85,0xf3,0xfd,0x68,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
