// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000028.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000028[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xf9,0x73,0x54,0x45,
    0x10,0xc7,0x5f,0x76,0x37,0xbb,0x10,0xae,0x20,0x91,0x4b,0xb0,0x72,0x81,0x68,0x30,
    0xa0,0x86,0x9b,0xe5,0x54,0x20,0xca,0x1d,0x50,0x10,0x91,0x43,0x54,0x40,0x88,0x48,
    0xe2,0x81,0x20,0x84,0x3b,0x12,0x45,0x10,0x51,0x39,0x54,0x40,0x05,0x95,0x80,0x82,
    0xca,0xa1,0xa0,0x82,0x72,0x78,0x81,0xa8,0x80,0x0a,0x02,0xfa,0x83,0xff,0x81,0xe5,
    0x51,0xe5,0x31,0x3d,0xf9,0xf4,0x56,0xfb,0x0a,0x35,0x55,0x53,0x6f,0xfb,0xdb,0x3d,
    0xdf,0xf9,0x76,0xf7,0xbc,0x99,0xdd,0x44,0x23,0x79,0x89,0x20,0x9a,0x16,0x64,0x04,
    0xb5,0x82,0x1f,0x83,0x9a,0xbf,0x86,0x41,0x24,0x48,0x73,0xcf,0x3a,0x41,0xdc,0x3f,
    0xfb,0x0f,0x2c,0x19,0x58,0x58,0x56,0x3e,0xa9,0xb0,0xa8,0x43,0x7b,0xf1,0xd7,0x0f,
    0xa2,0x3e,0x4e,0x7c,0x0d,0x82,0x44,0x10,0x73,0x4f,0x19,0xd3,0x27,0x4c,0x29,0x15,
    0xbc,0xb5,0x1b,0x17,0xdc,0xc8,0x74,0x71,0x82,0x27,0x84,0xc3,0x7d,0x6a,0xed,0x39,
    0x65,0x4e,0x10,0x0c,0x08,0xd2,0x83,0xb6,0xac,0x97,0xc7,0x53,0xb1,0x34,0xb0,0x5a,
    0x06,0x8b,0x80,0x65,0x1a,0x2c,0x0a,0x96,0x65,0xb0,0x18,0x58,0x53,0x83,0xa5,0x83,
    0xb5,0x30,0x58,0x1c,0x2c,0xdb,0x60,0x09,0xb0,0x7c,0x83,0xd5,0x02,0x6b,0x63,0xb0,
    0xda,0x60,0x6d,0x0d,0x96,0x01,0xd6,0xde,0x60,0x75,0xc0,0x8a,0x0c,0x56,0x17,0xac,
    0xb3,0xc1,0xea,0x81,0x75,0xf7,0x75,0x8a,0xa6,0xf2,0x95,0x9a,0x8d,0x71,0xcf,0x5c,
    0xea,0xa3,0x76,0x8e,0xb1,0xa5,0xce,0x97,0x63,0x37,0x72,0xb3,0x22,0xde,0x1f,0xf5,
    0xb5,0x91,0xcf,0x8d,0xdd,0xa7,0x38,0x79,0x66,0xbb,0xf8,0x04,0x79,0xc6,0x7d,0x5c,
    0xcc,0xe7,0x17,0x07,0x2b,0x70,0x76,0x1c,0x3d,0x3f,0x6d,0x6f,0x95,0xcc,0x72,0x0c,
    0xf5,0x0d,0xde,0xc8,0x8d,0xe1,0x7b,0x06,0xf7,0x56,0x5b,0x6a,0xbc,0xbd,0xff,0x84,
    0xa4,0xda,0xcd,0xdd,0x48,0x66,0x2c,0xed,0xa9,0xb6,0xd4,0x7b,0xed,0x9a,0x66,0xbd,
    0x2e,0x75,0x76,0x36,0x1a,0xa4,0xb7,0x4d,0x9c,0x9d,0x83,0x1d,0x41,0x57,0x2e,0x1a,
    0x72,0xf0,0xe7,0xa3,0x2b,0x86,0xbf,0x15,0x73,0x05,0xef,0x86,0xdd,0xda,0xf0,0x5d,
    0x41,0xbc,0xf0,0xc9,0x7a,0x05,0xf0,0x07,0xbe,0x3e,0x99,0xbe,0xa6,0x39,0x0c,0xd5,
    0x52,0xf0,0x3f,0x23,0x3b,0xf5,0x8c,0x05,0x57,0xd3,0xf7,0xb6,0xac,0x2f,0x76,0x21,
    0x58,0x01,0xf9,0xb5,0x43,0x8f,0xc4,0xb7,0xc7,0x97,0x63,0xfc,0x1d,0x4d,0x3e,0x9d,
    0x52,0x73,0x6b,0xfc,0xf2,0xec,0x8a,0x5e,0xf1,0xf7,0xa0,0x1e,0xd9,0x66,0x7e,0x5f,
    0xf6,0xb2,0xc6,0x17,0xb3,0x9e,0xfa,0x07,0xd3,0x3b,0xa9,0xc7,0xcd,0x70,0xeb,0x7a,
    0xb7,0xc0,0x27,0x78,0x33,0xb7,0xf2,0x68,0xfc,0x91,0xe0,0x9f,0x7f,0x69,0x46,0xc3,
    0xad,0x7c,0x1e,0x4d,0xce,0x62,0x8f,0x01,0xd3,0x35,0xc7,0x86,0xec,0x89,0xbc,0x97,
    0x32,0xff,0x0e,0x72,0xcc,0x46,0xd3,0x5d,0x7c,0x8e,0x9a,0xf8,0xa9,0x68,0x50,0xbb,
    0x94,0x3e,0x6a,0x8e,0xe5,0x86,0xef,0xfe,0xd4,0x3e,0xad,0xe1,0x7b,0x88,0xcf,0x96,
    0xaf,0x22,0x55,0xb7,0x58,0xf0,0x14,0x9f,0xf3,0xcd,0x1e,0x7e,0xd6,0xab,0x9d,0xd7,
    0x57,0xe3,0xd7,0xf3,0x9e,0xea,0x7a,0xdb,0x42,0x7a,0x76,0x72,0x06,0xa8,0xbd,0x3f,
    0xd4,0xf3,0xa3,0xbc,0xd3,0xca,0xff,0x85,0xa9,0x87,0xd8,0xdf,0x7b,0xab,0xa2,0xa7,
    0xe8,0x39,0x8f,0x56,0xdd,0xc3,0xe7,0x39,0x27,0xa3,0x7e,0x6f,0xa4,0xfb,0x75,0x63,
    0xcc,0x17,0xec,0x57,0x87,0xa4,0x13,0x9b,0xcb,0x19,0x91,0x30,0x76,0x91,0xb1,0xa5,
    0xbf,0xa3,0x8c,0x2d,0xb9,0xaf,0x36,0xb6,0x3c,0x37,0x85,0xec,0x2d,0x21,0xbb,0xda,
    0xd8,0xb2,0xff,0x8e,0x60,0x27,0x79,0x1f,0xdb,0xf0,0xce,0x0d,0x71,0xa8,0xbc,0x6f,
    0x57,0x82,0xb5,0x31,0x7b,0xa7,0x94,0x77,0xfb,0x2a,0xfc,0xbd,0x5d,0x06,0xf2,0x2e,
    0x5c,0xc3,0xfb,0xd2,0x0e,0x3e,0x89,0xb9,0x16,0x7c,0x81,0x8b,0x11,0xfb,0x3a,0xe6,
    0x09,0xde,0xc3,0x55,0x20,0x0f,0x4c,0xe3,0x3b,0x50,0x03,0xf1,0x15,0x61,0x0b,0x7f,
    0x27,0xce,0xd3,0x42,0xde,0xb1,0x24,0xbd,0xec,0x02,0xbe,0xd5,0xc5,0xd4,0xf7,0x79,
    0xd5,0x60,0xf2,0x9e,0xfd,0xe2,0x38,0x92,0xe8,0xfe,0xdd,0xc5,0x77,0xe3,0xfc,0x4d,
    0x52,0xf7,0xee,0x70,0x4b,0x1d,0x7a,0x52,0xeb,0xae,0x70,0x4b,0xdf,0x7b,0x81,0xcf,
    0xc5,0xee,0x0d,0xa6,0x73,0xfa,0x98,0x39,0xa2,0xb7,0x0f,0x31,0xbf,0x39,0x6e,0x5d,
    0x23,0x69,0xf4,0x5f,0x8f,0xfe,0xbe,0x46,0xff,0x0d,0xe0,0xaa,0xbf,0x1f,0x98,0xea,
    0x1f,0x60,0xf4,0xf7,0xf3,0xf7,0x41,0xe0,0x31,0xe1,0xee,0x6f,0xb4,0xdc,0x88,0x96,
    0x62,0xa3,0xff,0x26,0x70,0xd5,0x3f,0x10,0x4c,0xe7,0x0c,0x32,0x73,0x44,0xff,0x20,
    0x62,0x44,0xbf,0xae,0x31,0xc0,0xe8,0x1f,0x82,0xfe,0xc1,0x46,0xff,0x50,0x70,0xd5,
    0x3f,0x0c,0x4c,0xf5,0x97,0x18,0xfd,0xe2,0x1b,0xee,0x46,0x09,0xdc,0xc3,0x4d,0xdf,
    0x47,0xa0,0x45,0xf6,0x9d,0xd8,0x23,0xc1,0x46,0x98,0xf3,0x4a,0xf7,0xc4,0x48,0x34,
    0x2a,0x4f,0x09,0x3c,0x72,0x86,0xdd,0xc6,0xf9,0xa5,0x7b,0xf2,0x76,0x34,0x8f,0x35,
    0x6b,0x8d,0x03,0x57,0x7b,0x3c,0x6b,0x57,0xb0,0x47,0x27,0x10,0x33,0x1e,0x1e,0x39,
    0xe3,0x26,0xc1,0x33,0xd1,0xd4,0xf7,0x4e,0xf0,0x61,0x2e,0x46,0xec,0xbb,0x99,0x1b,
    0x18,0x6c,0x32,0x58,0x9a,0xaf,0x4b,0xdc,0x9f,0x8f,0x53,0x88,0x9d,0x0c,0x87,0xae,
    0x71,0x0f,0x6b,0x4c,0x35,0x6b,0x4c,0x03,0x1f,0xe7,0xea,0x22,0xe7,0xfa,0x74,0x72,
    0x9c,0xc2,0x19,0x36,0x8d,0xba,0x8c,0xc2,0xa7,0xbd,0xba,0x17,0xae,0x52,0xd3,0xab,
    0x19,0xe0,0xda,0xab,0xfb,0xc0,0xb4,0x57,0x65,0xa6,0x57,0xe2,0x9b,0x29,0xa7,0x28,
    0x35,0x9e,0x09,0xb7,0x9c,0xcf,0x0f,0x70,0x0e,0x95,0x1b,0xee,0x07,0xc1,0x93,0xdc,
    0x4b,0xb3,0x88,0x19,0xe2,0x4e,0x56,0x39,0xc3,0x1f,0x06,0x9b,0x65,0xce,0x91,0x08,
    0x35,0x11,0xff,0x6c,0x38,0x74,0x2c,0x72,0x6b,0x09,0x3e,0x87,0xb9,0xb3,0x0d,0xf7,
    0x23,0x29,0xee,0xda,0xde,0x9e,0x0b,0x36,0x87,0xb3,0x35,0x9d,0xfb,0x25,0x6a,0x6a,
    0x33,0x97,0x3d,0x53,0x46,0x3e,0xf3,0x4c,0xad,0xe6,0x53,0xab,0x0a,0x93,0xcf,0x02,
    0x70,0xad,0xd5,0x42,0x30,0xad,0xd5,0x62,0x53,0xab,0x85,0x5e,0x6f,0xe0,0x31,0xe1,
    0x5e,0x64,0x6a,0xb5,0xe4,0x22,0xb5,0x5a,0x0a,0x5e,0x0d,0x77,0x25,0x58,0x57,0x34,
    0x2a,0x8f,0x3c,0x7f,0x76,0x7d,0x97,0x98,0x47,0xd1,0x30,0x8f,0xf8,0x45,0xe8,0xa8,
    0x32,0x3a,0x24,0x66,0x99,0x1b,0x55,0xcc,0x5f,0x66,0x74,0x3c,0x76,0x11,0x1d,0x8f,
    0x83,0x6b,0x5d,0x97,0x87,0x7a,0xf6,0x04,0xd8,0xf2,0x7f,0xe9,0xd9,0x0a,0x38,0x74,
    0x2c,0xa1,0x67,0x2b,0x99,0xbb,0xc2,0x70,0x3f,0x19,0xea,0xd9,0x2a,0xb0,0x95,0xff,
    0xd1,0xb3,0x55,0xd4,0x43,0xf3,0xa9,0x0a,0xf5,0xb0,0xcc,0xf0,0x3f,0x0d,0xff,0x0c,
    0xee,0xb1,0x67,0xc0,0x84,0x6b,0x35,0xb6,0xde,0x71,0x6b,0xb8,0x37,0x87,0xba,0xda,
    0x8a,0xbd,0x96,0xef,0x0c,0x76,0x54,0x3a,0x45,0xe2,0x5b,0x47,0xfc,0x5a,0xc3,0xb5,
    0xce,0xec,0x9d,0xe7,0xd8,0x3b,0xeb,0x4d,0x5d,0x9f,0x07,0xd7,0xbd,0xf3,0x02,0x98,
    0xee,0x9d,0x8d,0xa6,0x67,0xe2,0xdb,0xe0,0xc6,0x46,0x72,0xda,0x00,0xb7,0xdc,0xc9,
    0x2f,0xa2,0x53,0xef,0x24,0xa9,0xcf,0x4b,0xe0,0xa2,0x65,0x13,0x76,0x17,0x17,0x2f,
    0xbe,0x97,0xf9,0x8d,0xb2,0xc9,0x70,0x6c,0x36,0x1c,0x32,0x67,0x33,0x71,0xea,0x7f,
    0x05,0x7f,0xb1,0x59,0xe3,0x55,0x70,0x89,0xdf,0x82,0xad,0x6b,0xbc,0xc6,0x1a,0x5b,
    0x0c,0xc7,0x56,0xc3,0x21,0x73,0xb6,0x12,0xa7,0xfe,0xed,0xf8,0xb7,0x99,0x35,0x5e,
    0x07,0x97,0xf8,0x6a,0x6c,0x5d,0xe3,0x0d,0xd6,0xa8,0x36,0x1c,0x3b,0x0c,0x87,0xcc,
    0xd9,0x41,0x9c,0xec,0x07,0xad,0xdd,0x46,0xd3,0x97,0x37,0xe9,0xcb,0x4e,0xd3,0x97,
    0xb7,0xc0,0xb5,0x2f,0x6f,0x83,0x69,0x5f,0x76,0x9b,0xbe,0x88,0x6f,0x97,0x1b,0xfb,
    0xe0,0xde,0x65,0xf6,0xcf,0x1e,0xb4,0xe8,0x77,0xa4,0xbd,0x60,0x7b,0xcc,0xf7,0x3a,
    0x8d,0x7d,0x27,0x15,0x5b,0xdb,0xdb,0xef,0x82,0xed,0x35,0xfb,0x3e,0x62,0xf6,0xfd,
    0x6a,0x62,0x24,0xaf,0xdd,0xac,0xbd,0xcf,0xe4,0xf5,0x1e,0x79,0xed,0x37,0x79,0xbd,
    0x0f,0xae,0x79,0x7d,0x00,0xa6,0x79,0x1d,0x34,0x79,0x89,0xef,0x80,0x1b,0x87,0xe1,
    0x3e,0x60,0x6a,0xfc,0x21,0x5a,0xcb,0x4d,0x9f,0x3e,0x02,0xd7,0x98,0x43,0xa1,0xfd,
    0x74,0x88,0x18,0xd1,0x7b,0x10,0xce,0xc3,0xe6,0x4e,0xfb,0x18,0xbd,0x47,0xcd,0x9d,
    0xf6,0x09,0xb8,0xcc,0x3f,0x82,0xad,0xbe,0x4f,0xf9,0x4e,0x7a,0x84,0xfb,0xf3,0x33,
    0xb0,0xa9,0x26,0xbf,0xcf,0xc1,0xc7,0x92,0xdf,0x71,0x93,0x9f,0xf8,0x8e,0xb9,0x71,
    0x1c,0x2d,0xc7,0x8c,0xf6,0x13,0xa1,0x7d,0x7a,0x82,0xef,0xf2,0xa2,0x5d,0xe3,0x8f,
    0x1b,0x2d,0x5f,0x86,0xb4,0x7c,0x05,0xd6,0xd1,0x68,0xf9,0x1a,0x5c,0xb5,0x9c,0x32,
    0x5a,0xc4,0x77,0xd2,0x8d,0x53,0x70,0x9f,0x34,0x5a,0x4e,0x87,0xf6,0xf3,0x69,0xa3,
    0x45,0xe3,0x4f,0x19,0x2d,0xdf,0x84,0xb4,0x7c,0x0b,0xb6,0xd3,0x68,0xf9,0x0e,0x5c,
    0xb5,0x9c,0x35,0x5a,0xc4,0x77,0xc6,0x8d,0xb3,0x70,0x9f,0x31,0x5a,0xce,0x99,0xbe,
    0x8b,0x96,0x73,0xfc,0xa6,0x11,0x2d,0x1a,0x7f,0x36,0xd4,0xe3,0x83,0xa1,0x3d,0xba,
    0xdb,0xec,0xf9,0x1f,0xe0,0x13,0xae,0x0b,0xd8,0x7f,0xb8,0xdb,0xa3,0xb3,0x1b,0x1d,
    0x79,0xc7,0x33,0xd0,0x26,0xbf,0xbb,0x3a,0xb9,0xb8,0x04,0xbf,0xb9,0x84,0xab,0x8e,
    0xd9,0x7f,0x75,0xc1,0xf7,0x91,0x63,0x03,0xb0,0x7a,0xe4,0xd8,0xd0,0xe4,0xd8,0x80,
    0xff,0x1d,0x35,0x86,0x27,0xd3,0xf0,0x5c,0x02,0x4f,0x25,0xeb,0x67,0x81,0xc9,0xff,
    0x3b,0xfe,0x74,0xb1,0x59,0xcc,0x69,0x6c,0xe6,0x34,0x61,0xce,0x7c,0xe6,0x34,0x03,
    0x6b,0x6a,0x78,0x2e,0x03,0x6f,0xee,0x75,0x25,0x3c,0xd6,0x92,0xbb,0xb2,0x39,0xfe,
    0x16,0xac,0xd1,0x92,0x35,0x44,0xf3,0x5f,0xd4,0xe3,0x6f,0x13,0x2d,0xde,0x6b,0x9c,
    0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
