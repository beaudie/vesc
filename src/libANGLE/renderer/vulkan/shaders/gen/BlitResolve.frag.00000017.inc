// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2021 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000017.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000017[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0x5b,0x4f,0x53,0x41,
    0x14,0x85,0xa7,0x3d,0xf4,0x14,0x2a,0x94,0x4b,0xb9,0x48,0x04,0xad,0x94,0x44,0x02,
    0xd8,0x12,0x15,0x04,0xb4,0x5c,0x0c,0x28,0x22,0x42,0xa1,0xc4,0x98,0x78,0x69,0x88,
    0x14,0x21,0x51,0x34,0xc0,0x83,0x0f,0xc6,0x07,0xff,0x83,0xfe,0x09,0x7f,0x9f,0xf1,
    0x92,0x98,0xb8,0xf7,0x9c,0x6f,0xcc,0x0e,0x0f,0x36,0x99,0x9e,0x99,0xb5,0xd7,0xac,
    0xbd,0xd7,0x9c,0xd9,0x27,0x4a,0x97,0xb2,0xce,0xa5,0x5c,0xce,0xb5,0xba,0x43,0x97,
    0xfc,0xba,0x5d,0x5a,0x90,0xe4,0xf9,0xa5,0xe0,0x24,0xd6,0xe6,0xea,0xb5,0x27,0x8d,
    0xd5,0xa7,0xbb,0x8d,0xd3,0xc3,0xbd,0xfd,0xe6,0x49,0xe3,0xf4,0xac,0x79,0xfc,0xea,
    0xe8,0x4d,0xa3,0xf9,0xe1,0xfd,0xbb,0x93,0x33,0xe1,0x5e,0x70,0xb1,0xdf,0xf3,0x60,
    0xa3,0xbe,0x51,0x3e,0x3d,0xdb,0x2f,0xdf,0x9a,0x9e,0x52,0xad,0xbc,0x8b,0xbc,0xa6,
    0xc6,0x3a,0x25,0x47,0x8b,0x3c,0x75,0xbc,0xdd,0x3b,0x3a,0x56,0xbc,0x43,0xc6,0x82,
    0x8c,0x9a,0x8c,0x2e,0xe1,0x6a,0x2c,0x6b,0xe6,0xed,0xaa,0x29,0xb3,0x0e,0x9f,0x43,
    0x35,0x9c,0x5b,0x73,0x19,0x57,0xa0,0xd6,0x12,0xcf,0x80,0xa5,0xc0,0x5a,0x0d,0x96,
    0x06,0xeb,0x32,0x58,0x04,0x76,0xd1,0x60,0x2d,0x60,0x43,0x06,0xcb,0x80,0x15,0x0d,
    0x16,0x83,0x8d,0x1a,0x2c,0x0b,0x36,0x66,0xb0,0x56,0xb0,0x49,0x83,0xb5,0x81,0x4d,
    0x79,0x5f,0xd1,0xbf,0xfa,0xd4,0xe3,0x02,0x1e,0xfb,0x59,0x2f,0xcb,0x73,0x04,0x7f,
    0x61,0x7d,0xd5,0xac,0x6b,0xf0,0xbf,0x16,0x92,0x75,0xfd,0x1c,0xbf,0x0e,0x5f,0xcf,
    0xa4,0x20,0x59,0xd2,0x7e,0x1d,0x79,0xef,0x3a,0xef,0x13,0x4e,0x8c,0x37,0xe5,0x0c,
    0xc8,0x3a,0x8b,0xbf,0xb4,0xaf,0x23,0x92,0x77,0x9f,0xc4,0x35,0xa6,0xb9,0x72,0x9c,
    0x53,0x51,0xfe,0xdb,0xd9,0xa7,0xf8,0x1d,0xd6,0x1d,0x46,0x2b,0x0f,0x3f,0xe4,0xea,
    0x41,0x4b,0x7f,0x97,0x85,0x1d,0xce,0x2d,0xcf,0x88,0x19,0x39,0x9e,0x3d,0x66,0x68,
    0xbe,0x5e,0xce,0xaf,0x40,0xbe,0x5e,0xaf,0x9b,0x60,0x13,0x78,0xe9,0x47,0x5f,0xf9,
    0x03,0xc4,0xb2,0x26,0x3e,0xc4,0x5a,0xe3,0xc3,0xc4,0x55,0xbf,0x57,0xaa,0x2c,0xc2,
    0xeb,0x31,0xe7,0x1c,0xf6,0x8d,0xf3,0x3e,0xc3,0x7a,0x9a,0xbd,0xaa,0x53,0xe5,0x3e,
    0xe5,0xa8,0xab,0xca,0x9d,0x56,0x6c,0x50,0x58,0x8b,0xc4,0x52,0x68,0xa6,0xcc,0x08,
    0xb5,0x2e,0x31,0x5f,0x44,0x43,0xd7,0xcb,0xe7,0x6a,0x58,0x41,0x53,0xf9,0xab,0xe4,
    0x8f,0x39,0xeb,0x35,0xe6,0x91,0xe1,0x6f,0x90,0x43,0xf9,0x5b,0xc4,0x62,0xf4,0xb7,
    0xe8,0xb9,0x50,0xe3,0x36,0xe7,0xf0,0xbf,0x1a,0x77,0x98,0x6f,0xa3,0xa1,0xeb,0x3a,
    0x98,0xd6,0xf0,0x0c,0x0d,0xbd,0x1f,0x33,0x72,0xdf,0xd3,0xcc,0x1d,0x79,0x7e,0x0a,
    0xa2,0xfd,0x54,0xe5,0x2e,0x75,0x72,0x5f,0xb6,0xe4,0x8d,0xe4,0xe9,0xcf,0x4e,0x46,
    0xa8,0xe1,0x98,0x3b,0xd9,0x4d,0x7c,0x59,0x14,0x06,0xe8,0xdb,0x3e,0xde,0x77,0x15,
    0xce,0x20,0xf8,0x67,0xe1,0xe8,0xfa,0x12,0xfb,0x06,0xd9,0x37,0xec,0xef,0x5d,0xb2,
    0x6f,0x88,0x7d,0x5a,0xef,0x15,0xf0,0x6f,0xc2,0x29,0xd2,0x43,0x57,0xb8,0x03,0x3f,
    0xa4,0xf2,0x51,0xea,0xf9,0x2d,0xfc,0x11,0xd3,0xfb,0xea,0xa7,0xe4,0xcf,0x23,0xe3,
    0xcf,0xf5,0x1a,0x39,0xf5,0xf7,0x89,0x77,0x30,0x06,0xbe,0x23,0x2b,0xad,0x69,0x0f,
    0x2c,0xf0,0x7e,0x89,0x46,0xd0,0xd2,0xe7,0x77,0x61,0x29,0xaf,0x09,0x27,0xc3,0x9e,
    0x92,0xf1,0x30,0x81,0x87,0x71,0xe3,0x61,0x12,0x3c,0x78,0xb8,0x0e,0x16,0x3c,0x54,
    0x8c,0x07,0x8d,0x95,0x65,0x54,0xc8,0x5b,0x36,0x1e,0x6e,0x90,0x3b,0x65,0x3c,0xdc,
    0x04,0x0f,0x1e,0xf6,0xc1,0x02,0x4f,0x3d,0x04,0xad,0x8a,0xf1,0x70,0x00,0x67,0x94,
    0x3d,0x65,0xe3,0x61,0x06,0x0f,0xd3,0xc6,0xc3,0x6d,0xf0,0xe0,0x61,0x16,0x2c,0x78,
    0x98,0x37,0x1e,0x34,0x36,0x27,0x63,0x9e,0xbc,0x73,0xdc,0x23,0xcd,0x7b,0x97,0xdc,
    0x07,0xe6,0xfe,0x6a,0x8d,0x81,0x3b,0x6f,0x6a,0x7c,0x0d,0xaf,0xc2,0xbe,0x39,0xea,
    0xd1,0x3e,0xbc,0x47,0x0f,0x6a,0xcd,0xda,0x6f,0xf7,0xa9,0x79,0x05,0x4e,0xec,0xbf,
    0xb3,0x09,0x1e,0xce,0xef,0x21,0x9a,0xce,0x60,0xeb,0x60,0x29,0xdf,0x73,0xb1,0xef,
    0xd5,0x47,0x70,0xd7,0xd1,0x68,0x48,0x35,0xda,0x13,0x8f,0xc9,0xab,0xf1,0x25,0x7a,
    0x58,0x75,0xf4,0xfb,0xb1,0x49,0xdc,0xf9,0xef,0x4b,0xe4,0xbf,0x31,0x9b,0xd4,0xa2,
    0x3d,0xb9,0x4b,0x3f,0xaa,0x96,0xf6,0xe2,0x73,0xb0,0xa0,0xd5,0x8f,0x96,0x9e,0xf5,
    0x0b,0xe2,0xfa,0xfb,0x88,0x97,0x97,0xe0,0xaa,0x5d,0x63,0xfd,0x47,0xaa,0x9e,0x95,
    0xf1,0x17,0x28,0x9f,0xfe,0x04,0x28,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMSArray stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 1). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, ivec3(srcImageCoords, params . srcLayer), 0). x);
//
// }
