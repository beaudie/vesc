// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000017.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000017[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0x5b,0x4f,0x93,0x41,
    0x10,0x86,0xf7,0xeb,0x07,0x5f,0xa1,0x42,0x0b,0x94,0x83,0x44,0x90,0x0a,0x24,0x12,
    0xc0,0x96,0xa8,0x20,0xa0,0xe5,0x60,0x00,0x11,0x81,0x42,0x31,0xc6,0x78,0x48,0x25,
    0x50,0x95,0x44,0xd1,0x00,0x17,0x5e,0x18,0x2f,0xfc,0x0f,0xfa,0x27,0xfc,0x7d,0xc6,
    0x43,0x62,0xe2,0xcc,0xf6,0x59,0x33,0xe1,0xc2,0x26,0xdb,0xdd,0x79,0xe7,0xdd,0x99,
    0x79,0x77,0x77,0xbe,0x38,0x35,0x92,0x76,0x71,0xe4,0x32,0xae,0xc5,0xbd,0x72,0x8d,
    0x5f,0xa7,0x4b,0xb9,0x88,0xf9,0x4b,0xde,0x89,0xaf,0xd5,0xed,0xed,0x3c,0xaa,0xad,
    0x3e,0x7e,0x58,0x3b,0x7d,0xbd,0x7f,0x58,0x3f,0xa9,0x9d,0x9e,0xd5,0x8f,0x0f,0x8e,
    0xde,0xd4,0xea,0x1f,0xde,0xbf,0x3b,0x39,0x13,0xee,0x05,0x97,0xf8,0x3d,0xf7,0x36,
    0xf7,0x36,0x8b,0xa7,0x67,0x87,0xc5,0x9b,0xd3,0x53,0x1a,0x2b,0xeb,0x62,0x1f,0x53,
    0x7d,0x39,0xc9,0xd1,0x24,0xb3,0x8e,0xb7,0xfb,0x47,0xc7,0x8a,0xb7,0xcb,0x58,0x90,
    0x51,0x91,0xd1,0x21,0x5c,0xf5,0xa5,0xcd,0xba,0x4d,0x63,0xca,0xaa,0xdd,0xe7,0xd0,
    0x18,0xce,0xad,0xbb,0x66,0x97,0xa7,0xd6,0x11,0xe6,0x80,0x45,0x60,0x2d,0x06,0x4b,
    0x81,0x75,0x18,0x2c,0x06,0xbb,0x68,0xb0,0x26,0xb0,0x01,0x83,0x35,0x83,0x15,0x0c,
    0x96,0x80,0x8d,0x1a,0x2c,0x0d,0x36,0x66,0xb0,0x16,0xb0,0x49,0x83,0xb5,0x82,0x4d,
    0x79,0x5d,0xf1,0xbf,0xfa,0x54,0xe3,0x02,0x1a,0x7b,0xb1,0x97,0x65,0x1e,0x46,0x5f,
    0xb0,0xaf,0x18,0xbb,0x02,0xff,0x6b,0xbe,0x61,0x57,0xcf,0xf1,0xab,0xf0,0xf5,0x4c,
    0xf2,0x92,0x25,0xe5,0xed,0xd8,0x6b,0xd7,0x75,0x8f,0x70,0x12,0xb4,0x29,0xa7,0x4f,
    0xec,0x34,0xfa,0x52,0xbe,0x8e,0x58,0xee,0xbe,0xe1,0x57,0x9f,0xe6,0xca,0x70,0x4e,
    0x05,0xf9,0x6f,0x63,0x9f,0xe2,0xb7,0xb1,0xdb,0x4d,0xac,0x2c,0xfc,0x90,0xab,0x8b,
    0x58,0xfa,0xbb,0x2c,0xec,0x70,0x6e,0x59,0x46,0xc2,0xc8,0x30,0x77,0x99,0xa1,0xf9,
    0xba,0x39,0xbf,0x3c,0xf9,0xba,0x7d,0xdc,0x06,0x36,0x81,0x96,0x5e,0xe2,0x2b,0xbf,
    0x0f,0x5f,0xda,0xf8,0x07,0xb0,0xd5,0x3f,0x88,0x5f,0xe3,0x77,0x4b,0x95,0x05,0x78,
    0x5d,0xe6,0x9c,0xc3,0xbe,0x71,0xee,0x33,0xd8,0xd3,0xec,0xd5,0x38,0x65,0xde,0x53,
    0x86,0xba,0xca,0xbc,0x69,0xc5,0xfa,0x85,0xb5,0x88,0x2f,0x22,0x66,0x64,0x46,0xa8,
    0x75,0x89,0xf5,0x22,0x31,0xd4,0x5e,0x3e,0x57,0xc3,0x0a,0x31,0x95,0xbf,0x4a,0xfe,
    0x84,0xb3,0x5e,0x67,0x1d,0xfc,0xdb,0xac,0x13,0xe2,0x6d,0xd3,0x63,0xa1,0xa6,0x1d,
    0x74,0xff,0xaf,0xa6,0x5d,0xd6,0x3b,0xc4,0x50,0xbb,0x0a,0xa6,0x39,0x9f,0x10,0x43,
    0xdf,0xc3,0x8c,0xbc,0xef,0x14,0x6b,0x47,0x9e,0x9f,0x82,0x68,0xff,0x94,0x79,0x3b,
    0x39,0xde,0x47,0x45,0x6e,0x20,0x4b,0x3f,0xe6,0x18,0xa1,0x86,0x63,0xde,0x60,0x27,
    0xfe,0x65,0x89,0xd0,0x47,0x9f,0xf6,0x70,0xbf,0x65,0x38,0xfd,0xe0,0x9f,0x85,0xa3,
    0xf6,0x25,0xf6,0xf5,0xb3,0x6f,0xd0,0xbf,0xb3,0xc6,0xbe,0x01,0xf6,0x69,0xbd,0x43,
    0xe0,0xdf,0x84,0x53,0xa0,0x67,0x86,0xb8,0xf3,0x1f,0x52,0xf9,0x28,0xf5,0xfc,0x16,
    0xfe,0xb0,0xe9,0x75,0xd5,0xa3,0xeb,0x5d,0xd9,0xa7,0xe7,0x7a,0x95,0x9c,0xfa,0xfb,
    0xc4,0x1d,0x8d,0x81,0x57,0xc5,0xd2,0x9a,0x5e,0x80,0x05,0xde,0x2f,0x89,0x11,0x62,
    0xe9,0xfc,0x5d,0x58,0xca,0x3b,0x84,0xd3,0xcc,0x9e,0x11,0xa3,0x61,0x02,0x0d,0xe3,
    0x46,0xc3,0x24,0x78,0xd0,0x70,0x0d,0x2c,0x68,0x28,0x19,0x0d,0xea,0x2b,0xca,0x28,
    0x91,0xb7,0x68,0x34,0x5c,0x27,0x77,0x64,0x34,0xdc,0x00,0x0f,0x1a,0x0e,0xc0,0x02,
    0x4f,0x35,0x84,0x58,0x25,0xa3,0xa1,0x0e,0x67,0x94,0x3d,0x45,0xa3,0x61,0x06,0x0d,
    0xd3,0x46,0xc3,0x2d,0xf0,0xa0,0x61,0x16,0x2c,0x68,0x98,0x37,0x1a,0xd4,0x37,0x27,
    0x63,0x9e,0xbc,0x73,0xbc,0x23,0xcd,0x7b,0x87,0xdc,0x75,0xf3,0x7e,0xb5,0xc6,0xc0,
    0x9d,0x37,0x35,0xbe,0x84,0x57,0x62,0xdf,0x1c,0xf5,0x68,0xdf,0xdd,0xa5,0xe7,0xb4,
    0x66,0xed,0xaf,0x35,0x6a,0x5e,0x81,0x93,0xf8,0xef,0x6a,0x03,0x0f,0xe7,0x77,0x9f,
    0x98,0xce,0x60,0x1b,0x60,0x91,0xef,0x9d,0xc4,0xf7,0xe6,0x03,0xb8,0x1b,0xc4,0xa8,
    0x49,0x35,0xda,0x13,0x9b,0xe4,0x55,0xff,0x12,0xef,0x5b,0xe3,0xe8,0xf7,0x62,0x0b,
    0xbf,0xf3,0xdf,0x93,0xd8,0x7f,0x53,0xb6,0xa8,0x45,0x7b,0x72,0x8f,0x7e,0xd4,0x58,
    0xda,0x8b,0x4f,0xc1,0xce,0xc7,0xd2,0xb3,0x7e,0x86,0x5f,0x7f,0x1f,0xd1,0xf2,0x1c,
    0x5c,0x63,0x57,0xb0,0xff,0x48,0xd5,0xb3,0x32,0xfe,0x02,0xf9,0xdf,0xd4,0xdb,0x18,
    0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMSArray stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, ivec3(srcImageCoords, params . srcLayer), 0). x);
//
// }
