// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000018.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000018[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xfb,0x97,0x8d,0x65,
    0x14,0xc7,0xdf,0x39,0xe7,0xcc,0x39,0x8c,0xdb,0xc8,0xe4,0x16,0xad,0xb9,0x20,0x35,
    0x1a,0xaa,0x71,0x77,0x30,0x94,0xa1,0xdc,0x87,0x22,0xc9,0x25,0x15,0x13,0x93,0xcc,
    0x74,0x11,0x31,0x2e,0x21,0x4a,0x24,0x95,0xa1,0x42,0x45,0x65,0x28,0x2a,0x97,0xa2,
    0xa2,0x5c,0xba,0x99,0x54,0xa8,0x08,0xf5,0x43,0xff,0x41,0xab,0xcb,0x5a,0x5d,0x9e,
    0xfd,0xcc,0x67,0x9f,0xb5,0xd7,0xbb,0x54,0xb3,0xd6,0xb3,0xde,0xb3,0xbf,0x7b,0x3f,
    0xdf,0xe7,0xbb,0xf7,0x7e,0xde,0xe7,0x39,0x67,0xa2,0x91,0xbc,0x44,0x10,0x4d,0x0b,
    0x32,0x82,0x3a,0xc1,0x4f,0x41,0xed,0x5f,0xe3,0x20,0x12,0xa4,0xb9,0x67,0xbd,0x20,
    0xee,0x9f,0xc5,0x83,0x4b,0x06,0x17,0x94,0x57,0x4c,0x29,0x28,0xec,0xdc,0x49,0xfc,
    0x0d,0x83,0xa8,0x8f,0x13,0x5f,0xa3,0x20,0x11,0xc4,0xdc,0x53,0xc6,0x8c,0x49,0xd3,
    0xca,0x04,0x6f,0xe7,0xc6,0x05,0x37,0x32,0x5d,0x9c,0xe0,0x09,0xe1,0x70,0x9f,0xda,
    0x79,0x4e,0x99,0x13,0x04,0x03,0x83,0xf4,0xa0,0x03,0xeb,0xe5,0xf1,0x54,0x2c,0x0d,
    0xac,0x8e,0xc1,0x22,0x60,0x99,0x06,0x8b,0x82,0x65,0x19,0x2c,0x06,0xd6,0xdc,0x60,
    0xe9,0x60,0xad,0x0c,0x16,0x07,0xcb,0x36,0x58,0x02,0xac,0x8d,0xc1,0xea,0x80,0xb5,
    0x37,0x58,0x5d,0xb0,0x0e,0x06,0xcb,0x00,0xeb,0x64,0xb0,0x7a,0x60,0x85,0x06,0xab,
    0x0f,0xd6,0xcd,0x60,0x0d,0xc0,0x7a,0xf9,0x3a,0x45,0x53,0xf9,0x4a,0xcd,0xc6,0xb9,
    0x67,0x2e,0xf5,0x51,0x3b,0xc7,0xd8,0x52,0xe7,0xcb,0xb1,0x9b,0xb8,0x59,0x11,0xef,
    0x8f,0xfa,0xda,0xc8,0xe7,0xa6,0xee,0x53,0x9c,0x3c,0xb3,0x5d,0x7c,0x82,0x3c,0xe3,
    0x3e,0x2e,0xe6,0xf3,0x8b,0x83,0xe5,0x3b,0x3b,0x8e,0x9e,0x9f,0x77,0xb4,0x4d,0x66,
    0x39,0x86,0x86,0x06,0x6f,0xe2,0xc6,0xc8,0xbd,0x43,0x8b,0xd4,0x96,0x1a,0xef,0x28,
    0x9e,0x94,0x54,0xbb,0xa5,0x1b,0xc9,0x8c,0xa5,0x7d,0xd4,0x96,0x7a,0x57,0xad,0x6b,
    0xd1,0xf7,0x52,0x67,0x67,0xa3,0x41,0x7a,0xdb,0xcc,0xd9,0x39,0xd8,0x11,0x74,0xe5,
    0xa2,0x21,0x07,0x7f,0x1b,0x74,0xc5,0xf0,0xb7,0x65,0xae,0xe0,0x3d,0xb1,0xdb,0x19,
    0xbe,0x2b,0x88,0x17,0x3e,0x59,0x2f,0x1f,0xfe,0xc0,0xd7,0x27,0xd3,0xd7,0x34,0x87,
    0xa1,0x5a,0xf2,0xff,0x67,0x64,0xa7,0x9e,0xb1,0xe0,0x6a,0xfa,0xde,0x81,0xf5,0xc5,
    0x2e,0x00,0xcb,0x27,0xbf,0x8e,0xe8,0x91,0xf8,0x4e,0xf8,0x72,0x8c,0xbf,0x8b,0xc9,
    0xa7,0x6b,0x6a,0x6e,0xad,0x5f,0x9e,0x3d,0xd0,0x2b,0xfe,0xde,0xd4,0x23,0xdb,0xcc,
    0xef,0xcf,0x5e,0xd6,0xf8,0x41,0xac,0xa7,0xfe,0xa1,0xf4,0x4e,0xea,0x71,0x33,0xdc,
    0xba,0xde,0x2d,0xf0,0x09,0xde,0xc2,0xad,0x3c,0x16,0x7f,0x1a,0x6b,0x86,0x9f,0x32,
    0xe7,0x56,0x3e,0x8f,0x25,0x67,0xb1,0xc7,0x81,0xe9,0x9a,0xe3,0x43,0xf6,0x64,0xde,
    0x4b,0x99,0x7f,0x07,0x39,0x66,0xa3,0xe9,0x2e,0x3e,0x47,0x4d,0x7c,0x29,0x3d,0x53,
    0xbb,0x8c,0x3e,0x6a,0x8e,0x15,0x86,0xef,0xfe,0xd4,0x3e,0xad,0xe5,0x7b,0x88,0xcf,
    0x96,0xaf,0x32,0x55,0xb7,0x58,0xf0,0x34,0x9f,0xdb,0x98,0x3d,0xfc,0x9c,0x57,0x3b,
    0xbf,0xbf,0xc6,0x6f,0xe0,0x3d,0xd5,0xf5,0xb6,0x87,0xf4,0xec,0xe2,0x0c,0x50,0xfb,
    0x40,0xa8,0xe7,0xc7,0x78,0xa7,0x95,0xff,0x4b,0x53,0x0f,0xb1,0x7f,0xf0,0x56,0x65,
    0x1f,0xd1,0x73,0x1e,0xad,0xba,0x87,0xcf,0x73,0x4e,0x46,0xfd,0xde,0x48,0xf7,0xeb,
    0xc6,0x98,0x2f,0xd8,0x6f,0x0e,0x49,0x27,0x36,0x97,0x33,0x22,0x61,0xec,0x42,0x63,
    0x4b,0x7f,0xc7,0x18,0x5b,0x72,0x5f,0x6b,0x6c,0x79,0x6e,0x0e,0xd9,0x5b,0x43,0x76,
    0xb5,0xb1,0x65,0xff,0x1d,0xc5,0x4e,0xf2,0x3e,0xb6,0xe7,0x9d,0x1b,0xe6,0x50,0x79,
    0xdf,0xae,0x04,0x6b,0x6f,0xf6,0x4e,0x19,0xef,0xf6,0x55,0xf8,0x8b,0x5c,0x06,0xf2,
    0x2e,0x5c,0xc3,0xfb,0xd2,0x11,0x3e,0x89,0xb9,0x16,0x7c,0xa1,0x8b,0x11,0xfb,0x3a,
    0xe6,0x09,0xde,0xdb,0x55,0x20,0x0f,0x4c,0xe3,0x3b,0x53,0x03,0xf1,0x15,0x62,0x0b,
    0x7f,0x57,0xce,0xd3,0x02,0xde,0xb1,0x24,0xbd,0xec,0x0e,0xbe,0xcd,0xc5,0x34,0xf4,
    0x79,0xd5,0x62,0xf2,0x9e,0xfd,0xea,0x38,0x92,0xe8,0xfe,0xc3,0xc5,0xf7,0xe4,0xfc,
    0x4d,0x52,0xf7,0x5e,0x70,0x4b,0x1d,0xfa,0x50,0xeb,0x1e,0x70,0x4b,0xdf,0xfb,0x82,
    0xcf,0xc3,0x2e,0x02,0xd3,0x39,0xfd,0xcc,0x1c,0xd1,0xdb,0x8f,0x98,0xdf,0x1d,0xb7,
    0xae,0x91,0x34,0xfa,0xaf,0x47,0x7f,0x7f,0xa3,0xff,0x06,0x70,0xd5,0x3f,0x00,0x4c,
    0xf5,0x0f,0x34,0xfa,0x07,0xf8,0xfb,0x20,0xf0,0x98,0x70,0x17,0x1b,0x2d,0x37,0xa2,
    0x65,0x90,0xd1,0x7f,0x13,0xb8,0xea,0x1f,0x0c,0xa6,0x73,0x86,0x98,0x39,0xa2,0x7f,
    0x08,0x31,0xa2,0x5f,0xd7,0x18,0x68,0xf4,0x0f,0x43,0xff,0x50,0xa3,0x7f,0x38,0xb8,
    0xea,0x1f,0x01,0xa6,0xfa,0x4b,0x8c,0x7e,0xf1,0x8d,0x74,0xa3,0x04,0xee,0x91,0xa6,
    0xef,0xa3,0xd0,0x22,0xfb,0x4e,0xec,0xd1,0x60,0xa3,0xcc,0x79,0xa5,0x7b,0x62,0x34,
    0x1a,0x95,0xa7,0x04,0x1e,0x39,0xc3,0x6e,0xe3,0xfc,0xd2,0x3d,0x79,0x3b,0x9a,0xc7,
    0x9b,0xb5,0x26,0x80,0xab,0x3d,0x91,0xb5,0x2b,0xd9,0xa3,0x93,0x88,0x99,0x08,0x8f,
    0x9c,0x71,0x53,0xe0,0x99,0x6c,0xea,0x7b,0x27,0xf8,0x08,0x17,0x23,0xf6,0xdd,0xcc,
    0x0d,0x0c,0x36,0x15,0x2c,0xcd,0xd7,0x25,0xee,0xcf,0xc7,0x69,0xc4,0x4e,0x85,0x43,
    0xd7,0xb8,0x87,0x35,0x4a,0xcd,0x1a,0xd3,0xc1,0x27,0xb8,0xba,0xc8,0xb9,0x3e,0x83,
    0x1c,0xa7,0x71,0x86,0x4d,0xa7,0x2e,0x63,0xf0,0x69,0xaf,0xee,0x85,0xab,0xcc,0xf4,
    0x6a,0x26,0xb8,0xf6,0xea,0x3e,0x30,0xed,0x55,0xb9,0xe9,0x95,0xf8,0x66,0xc9,0x29,
    0x4a,0x8d,0x67,0xc1,0x2d,0xe7,0xf3,0x03,0x9c,0x43,0x15,0x86,0xfb,0x41,0xf0,0x24,
    0xf7,0xd2,0x6c,0x62,0x86,0xb9,0x93,0x55,0xce,0xf0,0x87,0xc1,0x66,0x9b,0x73,0x24,
    0x42,0x4d,0xc4,0x3f,0x07,0x0e,0x1d,0x8b,0xdd,0x5a,0x82,0xcf,0x65,0xee,0x1c,0xc3,
    0xfd,0x48,0x8a,0xbb,0xae,0xb7,0xe7,0x81,0xcd,0xe5,0x6c,0x4d,0xe7,0x7e,0x89,0x9a,
    0xda,0xcc,0x63,0xcf,0x94,0x93,0xcf,0x7c,0x53,0xab,0x05,0xd4,0xaa,0xd2,0xe4,0xb3,
    0x10,0x5c,0x6b,0xb5,0x08,0x4c,0x6b,0xf5,0xa8,0xa9,0xd5,0x22,0xaf,0x37,0xf0,0x98,
    0x70,0x2f,0x36,0xb5,0x5a,0x72,0x91,0x5a,0x2d,0x05,0xaf,0x86,0x7b,0x19,0x58,0x0f,
    0x34,0x2a,0x8f,0x3c,0x7f,0x71,0x7d,0x97,0x98,0xc7,0xd0,0x30,0x9f,0xf8,0xc5,0xe8,
    0x58,0x61,0x74,0x48,0xcc,0x72,0x37,0x56,0x30,0x7f,0xb9,0xd1,0xf1,0xf8,0x45,0x74,
    0x3c,0x01,0xae,0x75,0x5d,0x19,0xea,0xd9,0x93,0x60,0x2b,0xff,0xa5,0x67,0xab,0xe0,
    0xd0,0xb1,0x84,0x9e,0xad,0x66,0xee,0x2a,0xc3,0xfd,0x54,0xa8,0x67,0x6b,0xc0,0x56,
    0xff,0x47,0xcf,0xd6,0x50,0x0f,0xcd,0x67,0x45,0xa8,0x87,0xe5,0x86,0xff,0x19,0xf8,
    0x67,0x72,0x8f,0x3d,0x0b,0x26,0x5c,0x6b,0xb1,0xf5,0x8e,0x5b,0xc7,0xbd,0x39,0xdc,
    0xd5,0x56,0xec,0x2a,0xbe,0x33,0xd8,0xb1,0xcc,0x29,0x12,0xdf,0x7a,0xe2,0xab,0x0c,
    0xd7,0x7a,0xb3,0x77,0x9e,0x67,0xef,0x6c,0x30,0x75,0x7d,0x01,0x5c,0xf7,0xce,0x8b,
    0x60,0xba,0x77,0x36,0x99,0x9e,0x89,0x6f,0xa3,0x1b,0x9b,0xc8,0x69,0x23,0xdc,0x72,
    0x27,0xbf,0x84,0x4e,0xbd,0x93,0xa4,0x3e,0x2f,0x83,0x8b,0x96,0xcd,0xd8,0xdd,0x5d,
    0xbc,0xf8,0x5e,0xe1,0x37,0xca,0x66,0xc3,0xb1,0xc5,0x70,0xc8,0x9c,0x2d,0xc4,0xa9,
    0xff,0x55,0xfc,0x83,0xcc,0x1a,0xaf,0x81,0x4b,0xfc,0x56,0x6c,0x5d,0xe3,0x75,0xd6,
    0xd8,0x6a,0x38,0xb6,0x19,0x0e,0x99,0xb3,0x8d,0x38,0xf5,0xef,0xc0,0xbf,0xdd,0xac,
    0xf1,0x06,0xb8,0xc4,0x57,0x63,0xeb,0x1a,0x6f,0xb2,0x46,0xb5,0xe1,0xd8,0x69,0x38,
    0x64,0xce,0x4e,0xe2,0x64,0x3f,0x68,0xed,0x36,0x99,0xbe,0xbc,0x45,0x5f,0x76,0x99,
    0xbe,0xbc,0x0d,0xae,0x7d,0x79,0x07,0x4c,0xfb,0xb2,0xc7,0xf4,0x45,0x7c,0xbb,0xdd,
    0xd8,0x0f,0xf7,0x6e,0xb3,0x7f,0xf6,0xa2,0x45,0xbf,0x23,0xed,0x03,0xdb,0x6b,0xbe,
    0xd7,0x69,0xec,0xbb,0xa9,0xd8,0xba,0xde,0x7e,0x0f,0x6c,0x9f,0xd9,0xf7,0x11,0xb3,
    0xef,0xd7,0x12,0x23,0x79,0xed,0x61,0xed,0xfd,0x26,0xaf,0xf7,0xc9,0xeb,0x80,0xc9,
    0xeb,0x03,0x70,0xcd,0xeb,0x43,0x30,0xcd,0xeb,0x90,0xc9,0x4b,0x7c,0x07,0xdd,0x38,
    0x02,0xf7,0x41,0x53,0xe3,0x8f,0xd0,0x5a,0x61,0xfa,0xf4,0x31,0xb8,0xc6,0x1c,0x0e,
    0xed,0xa7,0xc3,0xc4,0x88,0xde,0x43,0x70,0x1e,0x31,0x77,0xda,0x27,0xe8,0x3d,0x66,
    0xee,0xb4,0x4f,0xc1,0x65,0xfe,0x51,0x6c,0xf5,0x7d,0xc6,0x77,0xd2,0xa3,0xdc,0x9f,
    0x9f,0x83,0x95,0x9a,0xfc,0xbe,0x00,0x1f,0x4f,0x7e,0x35,0x26,0x3f,0xf1,0x1d,0x77,
    0xa3,0x06,0x2d,0xc7,0x8d,0xf6,0x13,0xa1,0x7d,0x7a,0x82,0xef,0xf2,0xa2,0x5d,0xe3,
    0x6b,0x8c,0x96,0xaf,0x42,0x5a,0xbe,0x06,0xeb,0x62,0xb4,0x7c,0x03,0xae,0x5a,0x4e,
    0x19,0x2d,0xe2,0x3b,0xe9,0xc6,0x29,0xb8,0x4f,0x1a,0x2d,0xa7,0x43,0xfb,0xf9,0xb4,
    0xd1,0xa2,0xf1,0xa7,0x8c,0x96,0x6f,0x43,0x5a,0xbe,0x03,0xdb,0x65,0xb4,0x7c,0x0f,
    0xae,0x5a,0xce,0x1a,0x2d,0xe2,0x3b,0xe3,0xc6,0x59,0xb8,0xcf,0x18,0x2d,0xe7,0x4c,
    0xdf,0x45,0xcb,0x39,0x7e,0xd3,0x88,0x16,0x8d,0x3f,0x1b,0xea,0xf1,0xa1,0xd0,0x1e,
    0xdd,0x63,0xf6,0xfc,0x8f,0xf0,0x09,0xd7,0x05,0xec,0x3f,0xdd,0xed,0xd1,0xcd,0x8d,
    0x2e,0xbc,0xe3,0x19,0x68,0x93,0xdf,0x5d,0x5d,0x5d,0x5c,0x82,0xdf,0x5c,0xc2,0x55,
    0xcf,0xec,0xbf,0xfa,0xe0,0xfb,0xc9,0xb1,0x11,0x58,0x03,0x72,0x6c,0x6c,0x72,0x6c,
    0xc4,0xff,0x8e,0x9a,0xc2,0x93,0x69,0x78,0x2e,0x81,0x67,0x19,0xeb,0x67,0x81,0xc9,
    0xff,0x3b,0xfe,0x72,0xb1,0x59,0xcc,0x69,0x6a,0xe6,0x34,0x63,0xce,0x02,0xe6,0xb4,
    0x00,0x6b,0x6e,0x78,0x2e,0x03,0x6f,0xe9,0x75,0x25,0x3c,0xd6,0x9a,0xbb,0xb2,0x25,
    0xfe,0x56,0xac,0xd1,0x9a,0x35,0x44,0xf3,0xdf,0xd4,0xe3,0x1f,0x94,0x6f,0xf5,0x22,
    0x9c,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
