// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000018.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000018[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5d,0x6c,0x95,0x45,
    0x10,0x86,0xbf,0x3d,0xa7,0x3f,0xfc,0x15,0xaa,0x40,0x15,0x6d,0xa0,0x05,0x5a,0xaa,
    0xd4,0x82,0xc8,0x9f,0x94,0x03,0x45,0x90,0x56,0x69,0x28,0x14,0x05,0x0b,0x58,0x45,
    0xab,0x88,0x28,0x15,0x8a,0x80,0x4a,0x4d,0x41,0x4a,0x00,0x95,0x06,0xa5,0x31,0x40,
    0x34,0xf1,0x02,0x50,0x30,0xbd,0xf1,0xca,0x04,0x15,0x2e,0x04,0x95,0xc6,0x10,0x34,
    0x4a,0x4d,0x94,0x26,0x4a,0x0d,0xdc,0x13,0x11,0x02,0xba,0xf3,0xed,0x33,0xed,0xa4,
    0xfe,0x35,0xd9,0x7c,0x67,0xdf,0x9d,0x79,0x67,0xe6,0xdd,0xd9,0xfd,0xce,0x69,0x32,
    0x31,0x2a,0x33,0x8a,0x5c,0xd4,0x2f,0xea,0x13,0x2d,0x77,0x51,0xfc,0x77,0x53,0x94,
    0x88,0x1c,0xcf,0x09,0xfe,0xd9,0x3f,0xca,0x88,0xe7,0xe5,0x95,0x8b,0x2a,0x4b,0x1a,
    0xd6,0xd7,0x95,0x4c,0x9c,0x34,0x5e,0xec,0x06,0x46,0xc9,0xd8,0x5e,0xd6,0x06,0x45,
    0x99,0x51,0x9a,0x7f,0xca,0x78,0x7e,0xc5,0xaa,0x35,0x82,0x17,0xfa,0x71,0xc9,0x8f,
    0x6c,0x6f,0x27,0x78,0xa6,0x70,0xf8,0x4f,0x85,0x31,0xa7,0xf8,0x44,0x51,0x45,0x94,
    0x1e,0x15,0x87,0xb0,0xd1,0x28,0x9e,0x8a,0x39,0xb0,0x3e,0x06,0x4b,0x80,0x65,0x1b,
    0x2c,0x09,0x36,0xc4,0x60,0x69,0x60,0xb7,0x1a,0x2c,0x1d,0x2c,0xd7,0x60,0x19,0x60,
    0x79,0x06,0xcb,0x04,0x1b,0x6d,0xb0,0x3e,0x60,0x45,0x06,0xeb,0x0b,0x56,0x6c,0xb0,
    0x7e,0x60,0xe3,0x0d,0xd6,0x1f,0x6c,0xa2,0xc1,0x06,0x80,0x4d,0x35,0x58,0x16,0xd8,
    0xf4,0x58,0xa7,0x64,0x77,0xbd,0xa2,0xd9,0x72,0xff,0x1c,0x89,0x3e,0x3a,0xcf,0x37,
    0x73,0xd1,0x79,0x38,0xf3,0xc1,0xde,0x2b,0x11,0xaf,0x27,0x63,0x6d,0xe4,0x73,0x8e,
    0xff,0x94,0x41,0x9d,0x63,0xbd,0x7d,0x06,0xf1,0xba,0xda,0x0a,0x52,0x43,0xbc,0xc5,
    0x40,0x83,0x8b,0x66,0x6d,0xe5,0x2b,0x52,0x3a,0x17,0xbd,0xf6,0xef,0x1b,0x56,0x36,
    0xd4,0xcf,0xf3,0xe0,0x90,0xbd,0xb9,0xc5,0xcf,0xf3,0x99,0x27,0x98,0x8f,0x46,0xd3,
    0xb4,0x18,0x4f,0x8b,0x0a,0xb0,0x15,0xbc,0x94,0x79,0xa1,0xf1,0x1f,0x83,0xbd,0xf8,
    0x0b,0xff,0x58,0xf8,0xa2,0xb8,0x9e,0xec,0x58,0x83,0x7c,0x46,0x5e,0x77,0xfe,0xff,
    0x3d,0xf2,0xba,0x9f,0x69,0xd1,0x5d,0xec,0x53,0x31,0xf1,0x65,0x5e,0x02,0x36,0x96,
    0x7a,0xc6,0x91,0x8f,0xd8,0x8f,0x67,0x2d,0xdf,0xac,0x4f,0x36,0xf5,0x4c,0xe9,0xf6,
    0x0d,0xeb,0xf2,0x9c,0x46,0xbe,0x6a,0x3f,0x9b,0x5e,0xd3,0xf9,0x7c,0xb4,0x96,0x7a,
    0x17,0xe3,0x2b,0x7c,0xc3,0x3c,0x53,0x0d,0x73,0x8e,0xde,0xdf,0x9e,0xb7,0xfb,0x7d,
    0x5b,0xea,0x9f,0x35,0xc4,0x5f,0x06,0xbe,0x94,0x7a,0x64,0xbe,0xbc,0x57,0xfc,0xda,
    0x5e,0xf3,0x3a,0xce,0x88,0xf8,0x3f,0x45,0xfe,0x79,0xe4,0xb3,0x0a,0xfd,0x93,0xcc,
    0xeb,0x59,0x4b,0x1a,0xff,0x06,0xf6,0x47,0xe7,0x9b,0xf0,0x11,0xfb,0xad,0xe4,0x6f,
    0xed,0x77,0x71,0x86,0x74,0x7e,0x88,0x33,0xa0,0xf3,0x63,0x9c,0x27,0x9d,0x9f,0xea,
    0xb5,0x1f,0x67,0x39,0x1f,0xda,0x7f,0x3f,0x9a,0x7a,0x64,0xfe,0x5b,0x3c,0x6b,0x9a,
    0x29,0xf5,0x5c,0x24,0xb6,0xf6,0xd7,0x45,0xee,0x9c,0xa4,0xb1,0x9f,0xeb,0xc5,0xdc,
    0xd2,0xd4,0x54,0x5a,0xec,0xb3,0x12,0xbb,0x72,0x17,0x30,0x3b,0xd4,0xb6,0xc2,0x7f,
    0xae,0x3f,0xbc,0x6e,0xa6,0xce,0x1f,0xf0,0xf3,0x3d,0xaf,0xbd,0x97,0x9a,0xec,0x77,
    0x34,0xc1,0xbe,0x45,0xf0,0x5f,0xf1,0x88,0xec,0x73,0x8a,0xbe,0x2f,0xa2,0xb7,0xab,
    0x7c,0x1c,0xe9,0xeb,0x3b,0xc0,0x8a,0xcc,0x9e,0xae,0xe1,0xcc,0xdc,0xc9,0xfa,0x2c,
    0xcf,0x20,0x3d,0x77,0x37,0x7d,0x39,0x0e,0x3e,0xb1,0x99,0x00,0xbe,0xd5,0xdb,0xc8,
    0xfc,0x1e,0xfc,0x26,0xe0,0x37,0x85,0xfb,0xa3,0x84,0x1e,0x4d,0xd1,0x8f,0xf7,0x82,
    0x1f,0xf5,0x36,0x03,0x63,0x5d,0x02,0x26,0x7d,0xfa,0xbb,0xcf,0x3c,0x45,0x3e,0x57,
    0xbd,0x7d,0x29,0xf7,0x4d,0x8a,0x7a,0xe4,0xf3,0x42,0xef,0x27,0xfb,0x50,0x46,0x4c,
    0xf9,0x7b,0x95,0xbd,0x99,0x05,0x5e,0xed,0xd5,0x91,0x9c,0x8a,0x5d,0xc0,0xd4,0xee,
    0x0f,0xcf,0xa1,0x5c,0xf2,0xbc,0xec,0xb5,0x10,0xbb,0x07,0x5d,0xb0,0x49,0xc7,0x67,
    0xba,0xa9,0x61,0x0e,0x35,0xcc,0x36,0x35,0xdc,0x0f,0xae,0x35,0xcc,0x05,0xd3,0x1a,
    0x2a,0x4c,0x0d,0x73,0xe3,0x3b,0x30,0x8a,0x31,0x89,0x5b,0x6e,0x6a,0x98,0x47,0x6c,
    0x67,0x6a,0xa8,0x04,0xd7,0x1a,0xc6,0xb9,0x80,0xa9,0x9d,0xd4,0xa0,0x5c,0x15,0xa6,
    0x86,0x79,0x2e,0xd8,0xa4,0xf0,0x29,0x37,0x35,0x54,0x51,0xc3,0x7c,0x53,0xc3,0x02,
    0x70,0xad,0x61,0x21,0x98,0xd6,0xb0,0xc8,0xd4,0xb0,0x30,0xce,0x27,0x8a,0x31,0x89,
    0x5b,0x4d,0x1f,0x49,0xdc,0x87,0x89,0x3d,0xcf,0xf5,0xdc,0x0b,0x92,0xa3,0xda,0x2e,
    0x32,0x39,0x56,0x62,0x57,0x81,0x5f,0x35,0xf9,0xc8,0x7d,0xf1,0x28,0x77,0x85,0xf6,
    0xdc,0x63,0xe4,0x5c,0x6b,0x7a,0xee,0x71,0xf0,0x26,0x7a,0xee,0x09,0x30,0xe1,0xad,
    0xe7,0xbe,0x7e,0x12,0x5c,0x78,0xe4,0x3e,0x79,0x1a,0x9e,0x3a,0x78,0x44,0xe3,0x95,
    0xe0,0xf5,0x9c,0xa3,0x67,0xc0,0x64,0x5f,0x64,0xfe,0x2c,0x3c,0x91,0xc1,0x56,0x83,
    0xb9,0x58,0xa7,0x8c,0xf8,0x6e,0x7a,0x0e,0xdb,0xd5,0x70,0xd4,0x79,0xbe,0x9a,0xf8,
    0x1c,0x85,0x7a,0x56,0x7a,0x5f,0xb9,0xb3,0x5e,0x00,0xab,0x25,0xa6,0xf8,0xae,0x05,
    0xdf,0xe1,0x6d,0x64,0xbe,0x0e,0xbe,0xb5,0x26,0xf7,0xf5,0xe4,0xde,0x60,0x72,0x7f,
    0x11,0x5c,0x73,0xdf,0x00,0xb6,0xc4,0x6b,0x2c,0xf7,0xf7,0x46,0x62,0xaf,0x23,0xd7,
    0x0d,0xa6,0x0f,0x5e,0x82,0x6f,0x93,0xe9,0x83,0x97,0xc1,0xb5,0x0f,0x5e,0x01,0xd3,
    0x3e,0x68,0x34,0x7d,0x20,0x6b,0x9b,0xfd,0xd8,0xc9,0xde,0xee,0x34,0xdc,0xaf,0xc3,
    0xbd,0xcb,0x70,0xbf,0x01,0xae,0xdc,0x6f,0x82,0x29,0x77,0x8b,0xe1,0x96,0xb5,0xdd,
    0x7e,0xb4,0xc0,0xbd,0x1b,0xed,0x85,0x67,0x0f,0x75,0xc9,0xbd,0xf6,0x11,0x5c,0x6f,
    0x81,0x4f,0xa3,0xdf,0xd4,0xaf,0x85,0x7e,0x13,0x9b,0xb7,0x89,0xb9,0x13,0xfb,0xdd,
    0xc4,0x6d,0x35,0x71,0xc5,0x66,0xaf,0x1f,0xad,0xf8,0xef,0x35,0x71,0xdf,0x31,0x71,
    0xab,0xfc,0x5b,0x41,0xde,0x27,0xfb,0xc0,0x36,0x9a,0x7b,0x33,0x41,0x4f,0xc8,0xfa,
    0x7e,0xfc,0x74,0x6c,0xf7,0x5c,0x82,0x1f,0xc0,0x77,0x7f,0xcc,0xd5,0x37,0xde,0xab,
    0x77,0xe1,0x39,0xc0,0xdd,0x9d,0x6e,0xde,0x77,0x52,0x93,0xe6,0xd4,0x4a,0x4d,0xe2,
    0x53,0xe5,0x82,0x4f,0x0b,0xfe,0x7b,0xb1,0x6d,0xc4,0x76,0xb3,0xc9,0x7f,0xcb,0x3f,
    0xe4,0xbf,0xed,0x7f,0xf2,0x6f,0xc6,0x4f,0xc7,0x36,0xf2,0xdf,0x8e,0x6f,0xb3,0xc9,
    0x7f,0x07,0x3c,0xdb,0xff,0x25,0x7f,0xcd,0xa9,0xd1,0xe4,0x3f,0xdf,0x85,0x1a,0x5a,
    0xf1,0xdf,0x1c,0x9f,0x83,0xf0,0x8e,0x7a,0x9f,0xf5,0x66,0xcf,0x24,0xf3,0x83,0x60,
    0xe5,0xae,0xa7,0xcf,0x0e,0xd3,0x67,0x87,0x4c,0x9f,0x7d,0x00,0xae,0x7d,0xf6,0x21,
    0x98,0xf6,0xd9,0x51,0xb3,0xdf,0xb2,0x76,0x24,0xb6,0x0d,0xb9,0x1d,0x31,0x67,0xbc,
    0x8d,0x98,0x11,0x7e,0x69,0x5c,0x68,0xd7,0xfc,0xe7,0x69,0xb1,0x7d,0xf0,0xb9,0x12,
    0x7f,0x4f,0x08,0xb1,0xae,0xe2,0x97,0x85,0x4f,0xd2,0xf5,0xc4,0xba,0x1a,0xfb,0x46,
    0xd1,0x0d,0xfc,0x6e,0xc4,0x9a,0x86,0x58,0x22,0x7c,0x1b,0xdf,0x67,0x9b,0xc1,0x9c,
    0x0b,0xb8,0xbc,0xe7,0x07,0x78,0xbd,0xe2,0xef,0x9e,0xdc,0xab,0xb7,0xb1,0x9e,0x8b,
    0xb6,0x92,0x9b,0x70,0x5e,0x33,0xfe,0xd7,0xc9,0x45,0xbe,0x17,0x58,0x1b,0xc9,0xe9,
    0x4f,0xcf,0x72,0x05,0xec,0x32,0xdc,0x0b,0x5c,0xe0,0xbf,0x81,0xef,0x35,0xde,0x3b,
    0xa2,0xfd,0x24,0x17,0xd6,0x0f,0xf6,0xba,0x07,0x3f,0x46,0x23,0x47,0xbd,0x39,0xbd,
    0x34,0xea,0x47,0x4c,0x79,0xaa,0x46,0x03,0x5c,0xf0,0x53,0x8d,0x86,0x1a,0x8d,0x64,
    0x2d,0xcb,0x8f,0x6c,0xfc,0xe4,0xa9,0x1a,0xdd,0x8c,0x9f,0xd5,0x68,0xb0,0x0b,0xb8,
    0xd5,0x68,0x88,0xd1,0x68,0xb0,0xd1,0x28,0x07,0xce,0x2c,0xd7,0xe3,0x3f,0x08,0x4e,
    0xd5,0x48,0x6d,0x86,0x1a,0x8d,0x72,0x8c,0x46,0xd5,0x2e,0xf0,0x4b,0x5e,0x83,0xc8,
    0x55,0x35,0x9a,0xea,0xc2,0xfa,0x24,0xe2,0xab,0x46,0x9f,0xa0,0x51,0x82,0x7a,0x8b,
    0x7a,0x69,0x94,0x4b,0xcc,0x5c,0xa3,0xd1,0x70,0x17,0xfc,0x54,0xa3,0x31,0x46,0x23,
    0x59,0x1b,0xe1,0xc7,0x48,0xfc,0x46,0x1a,0x8d,0x46,0xe3,0x67,0x35,0x2a,0x70,0x01,
    0xb7,0x1a,0x15,0x1a,0x8d,0x0a,0x8c,0x46,0x45,0x70,0x8e,0x30,0x1a,0xe5,0xc3,0xa9,
    0x1a,0xa9,0xcd,0x18,0xa3,0x51,0x91,0xd1,0xe8,0x21,0x17,0xf8,0x25,0xaf,0x7c,0x72,
    0x55,0x8d,0x4a,0x5d,0x58,0x17,0xad,0x12,0xc4,0xd4,0xb3,0x77,0x94,0x7b,0x41,0xec,
    0x16,0xd3,0x6b,0x8d,0xf8,0x14,0x99,0x33,0xff,0x29,0x67,0xfe,0x98,0x39,0xf3,0x9f,
    0x81,0xeb,0x99,0xff,0x1c,0x4c,0xcf,0xfc,0x09,0x73,0xe6,0x65,0xed,0xb8,0x1f,0x27,
    0x89,0x7b,0xd2,0xbc,0xb7,0xbe,0x84,0xfb,0x94,0xe1,0xfe,0x0a,0x5c,0xb9,0xbf,0x06,
    0x53,0xee,0x76,0xc3,0x2d,0x6b,0xa7,0xfd,0x38,0x03,0xf7,0x19,0xf3,0xfe,0xfe,0x16,
    0xee,0xb3,0xe6,0xfd,0xfd,0x1d,0xf8,0x29,0xbe,0x03,0x7e,0x0f,0xd6,0x60,0xe2,0xfd,
    0x00,0x5e,0x4b,0xbc,0x0e,0x13,0x4f,0xd6,0xce,0xf9,0xd1,0x41,0xbc,0x73,0xe6,0xcc,
    0x96,0xb9,0xf0,0x7b,0x64,0xb1,0xf9,0xae,0xa8,0x76,0x1d,0x46,0xeb,0x25,0x2e,0xd8,
    0x9c,0xc1,0xe7,0x9c,0xc9,0xe7,0x27,0xf2,0x99,0x6c,0xf2,0xf9,0x19,0x5c,0xf3,0xe9,
    0x34,0xf9,0xc8,0xda,0x79,0x3f,0x3a,0x89,0x73,0xde,0xe4,0x73,0x1f,0xf9,0x2c,0x31,
    0x7b,0xaf,0x76,0x9d,0x26,0x9f,0x47,0x5c,0xb0,0xe9,0xc0,0xe7,0xbc,0xc9,0xe7,0x17,
    0xf2,0x39,0x66,0xf2,0xf9,0x15,0x5c,0xf3,0xe9,0x32,0xf9,0xc8,0xda,0x05,0xf9,0xdf,
    0x01,0x71,0x2e,0x98,0x7c,0xe6,0xb8,0xf0,0xfb,0x4c,0xe2,0xe9,0x3b,0x4a,0xed,0xba,
    0x4c,0x3e,0xcb,0x5c,0xb0,0xe9,0xc4,0xe7,0x02,0xb6,0xed,0xd8,0x9e,0x36,0x67,0xfd,
    0x1b,0xf4,0x4e,0x9a,0x38,0x33,0x5c,0x0f,0x1e,0xf5,0xf2,0x6d,0x37,0x71,0x96,0xba,
    0x10,0xab,0x0b,0x9f,0xd3,0xd8,0x9e,0xc0,0xf6,0x38,0xef,0x5a,0xb1,0xfd,0x02,0x3e,
    0x19,0xfa,0xff,0xaa,0x84,0x79,0xd7,0xaa,0xcf,0x09,0xc3,0x5f,0xe3,0x42,0x8c,0x76,
    0xfc,0x85,0x6f,0x86,0xf7,0xb8,0xc4,0xda,0x75,0xdf,0x25,0x53,0xfd,0xf8,0x0b,0x0a,
    0x19,0x6c,0x69,0x68,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
