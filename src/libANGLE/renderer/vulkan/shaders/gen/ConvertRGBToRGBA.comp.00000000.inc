// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertRGBToRGBA.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertRGBToRGBA_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x93,0xdd,0x4e,0x53,0x41,
    0x14,0x85,0xe7,0x9c,0x53,0x0b,0x05,0xa4,0x60,0xb1,0x2d,0xfe,0x14,0x90,0x60,0xa2,
    0x96,0x16,0x9a,0x1e,0xaa,0x82,0x42,0x03,0x78,0x40,0xb9,0xf3,0x09,0x4c,0xb8,0xe1,
    0x42,0x6e,0xf0,0x01,0xbc,0x30,0x26,0xbe,0x8a,0x17,0xbe,0x9e,0x0a,0x31,0xb0,0xd7,
    0xf4,0x1b,0x32,0x69,0x6c,0x32,0x99,0x59,0x6b,0xaf,0x59,0x7b,0xef,0xd9,0xa7,0x59,
    0xba,0x3a,0xe1,0x5c,0xe2,0xa6,0xdc,0xa4,0xfb,0xe0,0x46,0xbf,0x79,0x97,0x1a,0xe3,
    0xdc,0xb4,0x2b,0xfb,0xbd,0x38,0xf9,0x78,0xd2,0xb9,0xf8,0x72,0xda,0xe9,0xe7,0x1b,
    0x8a,0xcf,0xba,0xcc,0xeb,0x14,0xab,0x9a,0xe6,0x8e,0xed,0x25,0x5b,0x9f,0x3f,0x9d,
    0x9d,0x8b,0x6f,0xda,0x9a,0x33,0xbe,0xe4,0xbd,0x9c,0xdb,0x43,0xab,0x75,0x64,0xea,
    0x19,0xf2,0xac,0xb2,0x07,0x2e,0x81,0x2b,0x45,0x5c,0x0a,0x37,0x19,0x71,0x19,0x9c,
    0xce,0x85,0xa1,0xa0,0x2b,0xec,0x66,0xd3,0xd7,0xed,0xdc,0x23,0x70,0xc7,0xf6,0xf2,
    0xad,0x67,0xc9,0x75,0xc9,0xb9,0x88,0x5f,0x77,0xac,0x16,0xf9,0x75,0xc9,0xa1,0xfb,
    0x9b,0xb6,0x3f,0xb9,0x8d,0x8d,0xf0,0x4a,0x84,0xfb,0x63,0xfe,0x39,0xb1,0x26,0xfe,
    0xf9,0x7f,0xfc,0xf3,0xc8,0x7f,0x30,0xe6,0x3f,0xc0,0x3f,0x01,0x1f,0xd1,0x8f,0xea,
    0xad,0x59,0x97,0xa9,0x8f,0x67,0xfe,0xbe,0xce,0xf7,0x4d,0xa3,0xfc,0xcb,0x78,0xbc,
    0x00,0x57,0xc0,0x2d,0x43,0x33,0xd4,0x18,0xaf,0x65,0xd3,0xdd,0x45,0xa7,0xf8,0x36,
    0x78,0x16,0x4e,0xbe,0x55,0x7c,0x13,0x7c,0xab,0x7e,0xae,0xa3,0xbc,0xba,0x3f,0x8f,
    0x56,0x7e,0x0d,0xc3,0x75,0xce,0x19,0xf1,0x06,0x77,0xeb,0xf8,0x37,0x78,0x97,0x84,
    0xf8,0x22,0x67,0xdd,0x59,0x30,0xd7,0x56,0x54,0xff,0x1a,0x3e,0x01,0x3f,0xe3,0x8d,
    0x1f,0x1b,0x1b,0x66,0xda,0x62,0x56,0x1d,0xfc,0x36,0xa8,0xad,0x4b,0x3e,0xe1,0x4d,
    0xb8,0x50,0x7f,0x8f,0x77,0x91,0x4f,0x3f,0xf2,0xd1,0x4c,0xfa,0xf8,0x6c,0x71,0x27,
    0xc7,0x47,0x78,0x10,0xf5,0xfd,0x8a,0x73,0x39,0xaa,0xef,0xc0,0xd6,0x75,0x84,0xdf,
    0xf1,0xdd,0x07,0x5c,0xd0,0x6b,0xdb,0x50,0xdd,0x7f,0x1b,0x23,0x4d,0xc1,0xda,0xb2,
    0x6f,0x25,0xa5,0x47,0x47,0xef,0x7f,0x8c,0xd1,0x7f,0xeb,0xb7,0xa1,0x63,0xf8,0x2b,
    0x3b,0xeb,0xcd,0xdf,0x13,0xd7,0x3e,0x34,0x95,0x66,0x71,0x8f,0xf9,0x69,0x46,0x6f,
    0xc8,0x5b,0x83,0x97,0x46,0xef,0xfd,0x80,0x19,0x54,0x22,0xcd,0x43,0xf8,0x5f,0xa6,
    0xd1,0x0c,0x96,0xe0,0x6a,0xe4,0x0e,0xdf,0xfb,0xa5,0xe9,0x97,0xf8,0x26,0x56,0xc8,
    0xaf,0xf3,0x5f,0xdb,0x8f,0xc1,0xe2,0xbf,0x9b,0x8f,0x7c,0x9f,0xe2,0xa3,0x59,0x7e,
    0x83,0x7b,0x0e,0xaf,0x79,0xfe,0x80,0x6b,0x47,0xba,0xaf,0x70,0xeb,0x68,0xdb,0xbe,
    0xf6,0xb2,0x7f,0xf3,0xd7,0xcc,0xa1,0x87,0x3e,0xd4,0xbf,0x4d,0x2c,0xe8,0x76,0x98,
    0x7b,0x0f,0x9f,0xb7,0xd6,0xc3,0x0e,0xba,0x9f,0xf4,0xb8,0x8b,0x77,0x85,0x1e,0x87,
    0x51,0x8f,0xbb,0xcc,0x6e,0x48,0x4f,0x7b,0x51,0x5d,0xfb,0x78,0xae,0x45,0xf9,0x0e,
    0xa3,0x7c,0xfb,0xe4,0x3b,0xe4,0x9b,0xd0,0xdb,0x04,0x9f,0xe1,0xd8,0x5b,0x69,0xff,
    0x67,0x5f,0xc5,0x4b,0x5b,0x37,0xa5,0xf2,0x23,0xac,0x88,0x05,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)writeonly buffer dst {
//  uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src {
//  uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint _padding;
// };
//
// void main()
// {
//     uint firstIndex = 0;
//     uint endIndex = firstIndex + maxIndex;
//
//     uint index = gl_GlobalInvocationID . x;
//
//     if(index >= endIndex)
//         return;
//
//     uint pixelID = index / 3;
//     uint dstIndex =(pixelID * 4)+(index % 3);
//     dstData[dstIndex]= srcData[index];
//     if(index % 3 == 0)
//     {
//         dstData[dstIndex + 3]= 255;
//     }
// }
