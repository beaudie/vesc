// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/CopyImageToBuffer.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kCopyImageToBuffer_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x6c,0x95,0x45,
    0x14,0xc7,0x67,0xbe,0xef,0xf6,0xb6,0xc5,0xa2,0x28,0x70,0x11,0xab,0x05,0xdb,0x84,
    0x2e,0xda,0x10,0x17,0x17,0x63,0x82,0xf8,0x28,0x89,0xba,0x20,0xf8,0x5c,0x98,0xb8,
    0x30,0x3e,0x12,0xa3,0x09,0x2c,0xd4,0x05,0x0b,0x82,0x8d,0x69,0x42,0xe2,0xc2,0x45,
    0x6b,0x13,0x03,0xe2,0xa3,0x5b,0x85,0xb2,0x57,0xab,0x41,0x5e,0x91,0x00,0x82,0x2b,
    0x95,0x68,0xec,0x42,0x6d,0x62,0x8c,0x18,0xab,0xb4,0x46,0xea,0xf9,0xcf,0xfc,0x86,
    0x1c,0xdb,0x64,0xfa,0xcd,0xf9,0x9f,0x73,0xfe,0xe7,0x31,0x73,0xe6,0xd6,0xd5,0x40,
    0x67,0x08,0x31,0xac,0x08,0x5d,0x61,0x5d,0x0c,0xe9,0xef,0xc6,0x50,0x05,0x6d,0xaf,
    0x0b,0xcd,0xf4,0x7d,0x70,0xc7,0xe3,0x3b,0x36,0xbf,0xf2,0xea,0xf3,0x9b,0xdb,0x5b,
    0xee,0x90,0xfe,0xfa,0x50,0x27,0x3b,0xe9,0x6e,0x30,0x9b,0x0e,0xfb,0x36,0x6c,0xed,
    0x7a,0xe6,0xc5,0xdd,0xc2,0x7b,0x6d,0xad,0x32,0xbc,0x91,0xb8,0x82,0x31,0xe7,0x95,
    0xb8,0x0c,0xed,0x4d,0xdc,0x21,0xdc,0x6a,0xeb,0x21,0xf3,0xde,0x90,0xc3,0x86,0x01,
    0xbe,0x05,0x8b,0x60,0x5d,0x0e,0xab,0xc0,0x7a,0x1c,0x56,0x83,0xad,0x72,0x58,0x03,
    0xec,0x66,0x87,0x75,0x80,0xf9,0xb8,0x4d,0xb0,0x8d,0x29,0xb7,0xfa,0x5a,0x0c,0xe5,
    0xb9,0xcd,0xbe,0xfd,0xe4,0x54,0xe4,0xdb,0x9d,0x3c,0x8e,0x7f,0x03,0xbe,0x89,0x65,
    0x75,0x88,0x6f,0x82,0xfc,0x64,0x3f,0xb9,0x8c,0x6f,0x12,0xbe,0xd2,0x97,0x23,0xf4,
    0x65,0xbd,0xad,0xd5,0x96,0x45,0x95,0xf4,0x75,0xf2,0xd7,0xbe,0x65,0xbb,0x26,0xb9,
    0xae,0x33,0xfb,0x4e,0x17,0x7f,0xad,0xfd,0xef,0x41,0x17,0xd0,0xb7,0xe8,0x53,0x85,
    0xbc,0x1e,0xb9,0x4e,0x76,0x8d,0x70,0x0b,0xb1,0x85,0x6f,0x45,0xee,0x05,0x13,0x5f,
    0x1f,0x7c,0x92,0xfb,0x42,0x77,0xea,0x4d,0x2b,0xed,0x33,0x4f,0xe1,0x2f,0x4b,0x9c,
    0xb2,0xef,0xb6,0xb5,0x01,0xce,0x8d,0xd4,0x28,0x6c,0x08,0xce,0x7e,0x72,0x92,0xfd,
    0x00,0x3a,0xf9,0xaf,0x31,0x74,0x13,0x76,0x92,0x07,0xa9,0xa5,0xf8,0x0d,0x91,0x7b,
    0xd1,0x0f,0x93,0x5b,0xd1,0xb7,0xb1,0x17,0xef,0x16,0x78,0x5b,0xa9,0xbe,0x6e,0xcb,
    0x25,0xf7,0xaa,0x0a,0xff,0xff,0x8b,0xce,0xe7,0x6e,0xf6,0x5b,0xc9,0x5d,0xf2,0x36,
    0xd7,0xcf,0xfb,0xa8,0xbd,0x72,0x31,0x47,0xe0,0x90,0xff,0x76,0x62,0xf6,0x61,0xff,
    0x00,0xfb,0xda,0xd9,0xef,0x24,0x0f,0xe9,0x9f,0x40,0xdf,0x40,0x2f,0xfc,0xc9,0x14,
    0xed,0xea,0x88,0xf4,0x4f,0xd1,0x17,0xaf,0x7f,0xd6,0xf5,0x44,0xf2,0x73,0x49,0x1a,
    0xbd,0xb7,0xc8,0x2f,0x24,0xf9,0xb5,0xed,0xa5,0x47,0x2f,0xd9,0x5a,0x72,0xf1,0x5f,
    0x66,0x9e,0x8a,0xbc,0x87,0xb9,0x29,0xf2,0x3e,0x66,0xa6,0xc8,0x63,0x2e,0xbe,0xe4,
    0xfd,0xcc,0x91,0xea,0x7d,0x83,0xda,0x15,0xe7,0x36,0xab,0x72,0x9c,0x7d,0x1f,0xf7,
    0x7e,0x1c,0xbb,0xb7,0xe8,0xd9,0x04,0x7d,0x95,0x3c,0xe9,0xee,0xc0,0xdb,0xec,0x7b,
    0xe8,0xcb,0xbb,0xf6,0xdd,0xe4,0xfa,0x2c,0xfc,0x30,0x79,0x0f,0x5b,0x95,0xba,0xaf,
    0x47,0xc0,0x0e,0x73,0x0f,0x86,0x6d,0x1a,0x34,0x0f,0x37,0xc5,0xdc,0x23,0xbf,0x8a,
    0x6e,0x75,0xcc,0xfd,0xf2,0x4b,0x3a,0xf5,0x79,0x4d,0xcc,0xbd,0xf2,0xeb,0x4e,0xab,
    0xb4,0xa2,0xfe,0xc0,0x39,0x5e,0x31,0x44,0xf5,0xff,0x6d,0xd2,0x34,0xf8,0x3f,0xb6,
    0xd7,0x5d,0x3d,0x8a,0xfe,0x68,0xba,0x37,0x79,0xde,0x0e,0x30,0x53,0x0f,0x5b,0x1c,
    0xdd,0xc5,0x83,0x60,0x07,0xdc,0xfd,0xbb,0xdf,0x18,0x75,0x5f,0xdf,0x61,0x56,0x86,
    0xf0,0x97,0xfd,0x21,0xf0,0x8f,0xcc,0x46,0x7d,0x79,0x0f,0x8e,0x43,0x89,0xa3,0x91,
    0xfa,0xf4,0x3e,0xb8,0x72,0x9a,0x82,0x77,0xd1,0x74,0xc2,0x3f,0xb0,0x35,0x45,0x5e,
    0xda,0x2f,0xd8,0x77,0x1a,0x79,0x8a,0xd8,0x9a,0xc1,0x8f,0x89,0xdd,0x4f,0x6c,0xf5,
    0xfc,0x13,0xf0,0x0f,0xcd,0x46,0x71,0x3e,0x05,0x1b,0x24,0xd6,0x49,0x17,0x4b,0xba,
    0x19,0x5b,0x27,0xe1,0x9e,0x49,0xdc,0xcd,0xc4,0xfd,0x99,0xab,0x6b,0xd8,0xf1,0x7f,
    0x8e,0xee,0x51,0xe3,0x97,0x7c,0x8c,0xbe,0xa8,0x27,0xaf,0x83,0x7d,0x81,0xdd,0x31,
    0x87,0x1d,0x07,0x17,0xd7,0x63,0x16,0x43,0x7d,0x5a,0x19,0x33,0x7e,0x10,0x7f,0xd5,
    0x59,0x72,0xd1,0x77,0x9e,0xfe,0xaf,0x8d,0xd9,0x66,0x0a,0x9f,0x19,0xd7,0xff,0x53,
    0xe4,0xd9,0x76,0xfd,0x3f,0x0d,0x3e,0x6a,0x36,0x92,0xbf,0x84,0xe3,0x34,0x36,0x7a,
    0x2b,0xce,0xf0,0x4e,0xec,0xe5,0x8d,0x38,0x8b,0x9d,0x78,0xf5,0x26,0x9c,0x83,0x77,
    0x04,0x1f,0xcd,0xd1,0x79,0x70,0xd5,0x2e,0xf9,0x2b,0xfc,0x82,0xc3,0x2e,0x80,0xa9,
    0x9e,0x47,0xac,0x4e,0xbd,0x27,0x17,0xb1,0xbd,0x00,0xc7,0xd3,0xdc,0xed,0xaf,0xc9,
    0xe3,0x22,0x73,0xd3,0x76,0x67,0xfb,0x0d,0xf1,0x77,0xba,0xde,0x7f,0x0b,0x5e,0xce,
    0xf6,0x3b,0xb0,0x72,0xb6,0x73,0xee,0x6c,0xa5,0xbb,0x64,0x6b,0x96,0x7e,0x6a,0xff,
    0xa6,0xf9,0x29,0xee,0xf7,0xc4,0xd6,0xbb,0xb5,0x9b,0x37,0xed,0x07,0xf0,0xbd,0xbc,
    0x61,0x3f,0x82,0xe9,0x4c,0xe6,0xe0,0x98,0x4d,0xf3,0xde,0x95,0x38,0x7e,0xba,0xf6,
    0x8e,0x67,0x2e,0xcd,0xb0,0x66,0xb5,0xc4,0xf8,0x19,0x1b,0xbd,0x6d,0xbb,0xe0,0xfc,
    0x05,0xdc,0x73,0xce,0x71,0xce,0xd2,0xb7,0x62,0x8e,0x7b,0x09,0xdb,0xd9,0x74,0x8e,
    0x1d,0x49,0xf7,0x2b,0x7a,0xcd,0x7c,0xb9,0x7b,0xbf,0x81,0x07,0x77,0x1f,0x7f,0x07,
    0x8b,0xe9,0xce,0x65,0xec,0x32,0xb8,0xde,0xd1,0x13,0x60,0x7f,0xe0,0x7f,0xd9,0xf9,
    0xfe,0x89,0x6f,0xe5,0x7c,0xe7,0xc1,0xf7,0x38,0xdf,0xbf,0xf0,0x9f,0x77,0xbe,0x57,
    0xf0,0xad,0x9d,0xef,0x02,0xf8,0x3e,0xe7,0xbb,0x88,0xff,0x82,0x3b,0xeb,0x7f,0x39,
    0xeb,0x31,0x77,0xd6,0x57,0xc1,0x8b,0xcd,0x12,0x36,0xfb,0x9d,0x8d,0x8a,0x5c,0xc2,
    0x26,0xbd,0xeb,0x31,0xbf,0x5b,0x7e,0x5e,0xab,0x98,0xf1,0x31,0xe2,0xd7,0x31,0xfb,
    0x09,0x1f,0x05,0x6b,0xc4,0x1c,0x4f,0xba,0xc2,0xd5,0x01,0xd7,0xa0,0xe3,0x6a,0xc6,
    0x8c,0x17,0xbf,0xce,0x98,0x7d,0x9b,0x31,0xbf,0x1b,0xfa,0x4d,0x58,0x11,0xf3,0xef,
    0x44,0x1b,0xfd,0x3d,0xd6,0x11,0x61,0x8b,0xcb,0xde,0xb1,0xe9,0x54,0x5f,0x0c,0x77,
    0xd9,0xfa,0x0f,0x78,0x26,0x55,0xfd,0xd0,0x0a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)uniform texture3D src;
//
// layout(set = 0, binding = 1)buffer dst
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uvec2 srcOffset;
//     int srcDepth;
//
//     bool reverseRowOrder;
//
//     uvec2 size;
//
//     uint outputOffset;
//
//     uint outputPitch;
//
//     bool isDstSnorm;
// } params;
//
//       vec4 getSourceValue()
// {
//     uvec2 coord = gl_GlobalInvocationID . xy;
//     if(params . reverseRowOrder)
//     {
//         coord . y = params . size . y - coord . y - 1;
//     }
//     coord += params . srcOffset;
//
//           vec4 srcValue = texelFetch(src, ivec3(coord, params . srcDepth), 0);
//
//     return srcValue;
// }
//
// uint convertToDestValue(vec4 srcValue)
// {
//
//     uvec4 normalized;
//     if(params . isDstSnorm)
//     {
//         ivec4 scaled = ivec4(srcValue * 127.0);
//         normalized = uvec4(scaled);
//     }
//     else
//     {
//         normalized = uvec4(clamp(srcValue, 0.0, 1.0)* 255.0);
//     }
//
//     normalized &= 0xFF;
//
//     return normalized . r | normalized . g << 8 | normalized . b << 16 | normalized . a << 24;
//
// }
//
// void outputDestValue(uint destValue)
// {
//     uint offset = params . outputOffset + params . outputPitch * gl_GlobalInvocationID . y + gl_GlobalInvocationID . x;
//     destData[offset]= destValue;
// }
//
// void main()
// {
//     if(any(greaterThan(gl_GlobalInvocationID . xy, params . size)))
//         return;
//
//           vec4 srcValue = getSourceValue();
//     uint destValue = convertToDestValue(srcValue);
//     outputDestValue(destValue);
// }
