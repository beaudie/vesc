// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2021 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000F.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000F[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5d,0x4f,0x13,0x41,
    0x14,0x86,0xa7,0xbb,0x74,0xb7,0x56,0xda,0x42,0x5b,0xa8,0x8d,0x45,0x2a,0x6d,0x22,
    0x01,0xdc,0x12,0xb5,0x48,0xab,0x05,0x6a,0x50,0x11,0x0b,0x7e,0xa3,0x77,0xc6,0xc4,
    0x1b,0x2f,0xe4,0x46,0xaf,0xbd,0xf0,0xef,0xf8,0xfb,0x8c,0x1f,0x89,0x89,0xe7,0xcc,
    0x3e,0x63,0x4e,0xdc,0x64,0x3a,0x33,0xef,0x79,0xcf,0xc7,0x3b,0x73,0xa6,0x71,0xd4,
    0x4b,0x9d,0x2b,0xb8,0xb2,0x2b,0xb9,0x37,0x2e,0xff,0x16,0x5d,0x24,0x88,0x73,0x17,
    0x5d,0xe2,0xe7,0x87,0xb3,0x17,0xb3,0xec,0xd3,0xe7,0xf7,0xd9,0xad,0xe1,0xb6,0xda,
    0xab,0x2e,0xf6,0x3c,0xb5,0xd5,0x5c,0xea,0xe6,0x64,0xd6,0xf1,0xf1,0xdd,0x87,0x73,
    0xc5,0x2b,0x32,0xf6,0x64,0x2c,0x08,0x4f,0xf1,0xd4,0xac,0xe7,0x35,0x9e,0xac,0x2a,
    0x3e,0xbe,0xfa,0x3b,0x77,0xe4,0x8a,0xae,0x41,0xee,0x1e,0x73,0xc0,0x0a,0x60,0x25,
    0x83,0x45,0x60,0x0b,0x06,0x8b,0xc1,0x2e,0x19,0x6c,0x0e,0xac,0x63,0xb0,0x22,0x58,
    0xd7,0x60,0x09,0x58,0xdf,0x60,0x29,0xd8,0xba,0xc1,0x4a,0x60,0x5b,0x06,0xbb,0x00,
    0xb6,0xed,0x75,0xc5,0xff,0xea,0x53,0x8d,0x7b,0x68,0x5c,0x66,0x3f,0x95,0x79,0x0d,
    0x7d,0x61,0x7f,0x95,0x7d,0x43,0xbc,0x22,0xbf,0x8f,0xbd,0x16,0x5d,0x2f,0x09,0x27,
    0xa1,0x56,0x3d,0x87,0x96,0xec,0x53,0xea,0x8d,0x7c,0xdc,0x58,0xee,0x2d,0xb7,0xab,
    0x4d,0x73,0x95,0xd1,0xdd,0x95,0xdf,0x79,0xfc,0x14,0xbf,0xc3,0xbe,0x62,0x62,0x55,
    0xe1,0x87,0x5c,0x75,0x62,0xe9,0x77,0x45,0xd8,0xe1,0x1c,0xaa,0x8c,0x84,0x51,0x66,
    0xae,0x9b,0xa1,0xf9,0x9a,0x9c,0x47,0x83,0x7c,0x4d,0x1f,0x37,0xc7,0x36,0xd1,0xb2,
    0x4c,0x7c,0xe5,0xb7,0xb0,0xa5,0xc6,0xde,0x61,0xaf,0xf6,0x15,0xec,0x1a,0xbf,0x29,
    0x55,0x76,0xe1,0xd5,0xcd,0xb9,0x05,0xbf,0x0d,0xee,0x27,0xec,0x87,0xf8,0x6a,0x9c,
    0x09,0xfd,0x51,0xa6,0xae,0x09,0xfd,0xa9,0x58,0x5b,0x58,0xfb,0xd8,0x0a,0xc4,0x2c,
    0x98,0x11,0x6a,0x3d,0x60,0xbd,0x4f,0x0c,0xdd,0x4f,0xff,0xab,0xe1,0x90,0x98,0xca,
    0xbf,0x4f,0xfe,0x84,0xb3,0x3e,0x62,0x1d,0x1b,0xfe,0x8c,0x1c,0x3b,0xd2,0x4b,0x11,
    0xf7,0xe6,0xe0,0xfc,0x14,0x44,0x7b,0x75,0xc2,0xbd,0xd6,0xb8,0xbb,0x27,0x72,0x3a,
    0x55,0x7a,0xbf,0xc6,0x08,0x35,0x9f,0xd3,0x1f,0x8b,0xd8,0xa7,0x12,0xa1,0xc5,0x9b,
    0x58,0xe2,0xec,0x27,0x70,0xda,0xe0,0x5f,0x85,0xa3,0xfb,0xcb,0xf8,0xb5,0xf1,0x5b,
    0xf1,0x3d,0x90,0xfb,0x75,0xf0,0xd3,0x73,0x5f,0x05,0xff,0x26,0x9c,0x2e,0xfd,0xbc,
    0xca,0x7d,0xfc,0x90,0xca,0xfb,0xd4,0xf3,0x5b,0xf8,0x6b,0xe6,0x5d,0xa9,0x1e,0x5d,
    0x3f,0x13,0x3f,0xd5,0x7e,0x8d,0x9c,0xfa,0x7d,0xe1,0x3c,0xd6,0xc1,0x9f,0xcb,0x2e,
    0xf5,0xdc,0x1c,0x0b,0xbc,0x5f,0x12,0x23,0xc4,0xd2,0xf9,0xbb,0xb0,0x94,0xf7,0x0a,
    0x4e,0x11,0x9f,0x9e,0xd1,0xb0,0x89,0x86,0x0d,0xa3,0x61,0x0b,0x3c,0x68,0xb8,0x0e,
    0x16,0x34,0x0c,0x8c,0x06,0xb5,0x65,0x32,0x06,0xe4,0xcd,0x8c,0x86,0x1b,0xe4,0x2e,
    0x18,0x0d,0x37,0xc1,0x83,0x86,0x97,0x60,0x81,0xa7,0x1a,0x42,0xac,0x81,0xd1,0x70,
    0x06,0xa7,0x8f,0x4f,0x66,0x34,0xec,0xa0,0x61,0x68,0x34,0xdc,0x06,0x0f,0x1a,0x76,
    0xc1,0x82,0x86,0xb1,0xd1,0xa0,0xb6,0x91,0x8c,0x31,0x79,0x47,0xf4,0x91,0xe6,0xbd,
    0x4b,0xee,0x33,0xd3,0xef,0x5a,0x63,0xe0,0x8e,0x4d,0x8d,0xaf,0xe1,0x0d,0xf0,0x1b,
    0x51,0x8f,0xbe,0x89,0x7b,0xbc,0x07,0xad,0x59,0x7b,0xff,0x01,0x35,0x1f,0xc2,0x49,
    0xfc,0x7f,0x5e,0x8e,0x87,0xf3,0x7b,0x44,0x4c,0x67,0xb0,0x63,0x30,0xad,0xe5,0xa9,
    0x20,0xfa,0x6e,0x1e,0xc3,0x3d,0x26,0xc6,0x5b,0xa9,0x46,0xdf,0xc4,0x09,0x79,0xd5,
    0x7e,0xc0,0x7b,0xd2,0x38,0xfa,0x96,0x4f,0xb1,0x3b,0xff,0xd6,0x63,0xff,0xde,0x15,
    0xfb,0x23,0x91,0x77,0x65,0xfc,0x05,0xc8,0x6c,0x59,0xd7,0xf8,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 1). x;
//
// }
