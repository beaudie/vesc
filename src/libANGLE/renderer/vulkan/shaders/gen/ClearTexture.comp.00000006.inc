// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xe9,0x6a,0x93,0x51,
    0x10,0x86,0x4f,0xf3,0x25,0x69,0x35,0xad,0x6d,0x9a,0xc5,0x54,0xd3,0x68,0x9a,0xa8,
    0xa1,0x59,0x88,0x36,0x8a,0x20,0x2e,0xb5,0x01,0xfd,0x51,0xa8,0x12,0x17,0x28,0x58,
    0x49,0xb5,0xb5,0xab,0x08,0x7a,0x01,0xfe,0x10,0x2f,0xc7,0x0b,0xf0,0xb7,0xe2,0x25,
    0xb9,0x21,0x3a,0x73,0xbe,0xe7,0xc4,0x21,0x81,0xe1,0x9c,0x79,0xe7,0x9d,0xfd,0x7c,
    0x89,0x12,0xb5,0x49,0xe7,0x26,0xdc,0x49,0x37,0xe5,0x5e,0xbb,0xf8,0x97,0x75,0x09,
    0x41,0x9c,0xcb,0xb8,0xb4,0x3f,0xef,0xad,0x0f,0xd6,0x3b,0x6f,0xdf,0xbd,0xec,0xf4,
    0xae,0x76,0xd5,0x7e,0xca,0x45,0x9e,0xa7,0xb6,0x59,0xe1,0xa4,0xe4,0x4c,0x8a,0x1c,
    0x0f,0xf7,0x7d,0x88,0x8c,0xc8,0x9c,0xe0,0x49,0x1f,0x4b,0xef,0x31,0xd7,0xc7,0x12,
    0x34,0x03,0xa7,0x8c,0x9e,0x97,0x33,0x4d,0x8c,0xfb,0x12,0xad,0x40,0x1d,0x35,0xce,
    0x80,0x4d,0x80,0xcd,0x19,0x2c,0x01,0x96,0x37,0x58,0x04,0x56,0x37,0x58,0x12,0xac,
    0x61,0xb0,0x14,0x58,0xcb,0x60,0x69,0xb0,0xae,0xc1,0x26,0xc1,0x7a,0xbe,0xde,0x68,
    0x94,0x57,0x6b,0x5f,0x1e,0xab,0xbd,0x39,0x56,0xbb,0xf2,0x9b,0xd4,0xa4,0xfc,0xb6,
    0x9c,0x4b,0x23,0x5b,0xac,0x57,0x8d,0x7e,0xc8,0x6c,0x16,0x44,0x72,0x92,0x25,0xe1,
    0xed,0x91,0xf7,0xd7,0x7b,0x41,0x38,0x9a,0xef,0x3c,0x3e,0xa7,0x45,0x3f,0x41,0x0d,
    0x91,0xc7,0x93,0xb2,0xcb,0x78,0x56,0x8a,0xdf,0x40,0xcf,0x80,0x35,0xf1,0x9f,0xc6,
    0x5f,0xf9,0x33,0xd8,0x14,0x2f,0x4a,0x94,0x2c,0xf1,0x35,0xf6,0x3c,0x3b,0x4c,0x1a,
    0xdf,0x1c,0x7a,0xd9,0xec,0x4e,0xb1,0x8a,0x64,0xd2,0xd9,0xcc,0x83,0x05,0xdb,0xb8,
    0x68,0xce,0x22,0xf5,0x15,0xa8,0xb1,0xe8,0xf3,0x05,0x2c,0xe9,0x4a,0xd4,0x10,0x6a,
    0x2e,0x31,0x93,0x14,0xfe,0x67,0xe0,0xa6,0x8d,0x7d,0x71,0x4c,0xaf,0xb2,0xbb,0xbc,
    0x4c,0xee,0x82,0xb7,0x47,0xa3,0x7d,0x55,0xd8,0xcb,0x32,0xf1,0x5a,0xcc,0xb7,0x49,
    0x3d,0xaa,0xb7,0x47,0x58,0x1c,0xaf,0xc3,0xcc,0x82,0xde,0xc5,0xae,0xfe,0x2b,0xdc,
    0x6d,0xfe,0xc1,0xd8,0xcc,0x9f,0x88,0xfc,0x35,0xf6,0x67,0x22,0x53,0x46,0x1f,0xf2,
    0xb6,0x83,0xbe,0x23,0x52,0x32,0xfe,0xfb,0xc6,0xae,0xfa,0x01,0xf1,0x5b,0xa2,0xe9,
    0x2c,0x0e,0xe1,0x1c,0x20,0xd7,0x64,0x5a,0x09,0x76,0xe5,0x78,0x1f,0x3f,0x04,0xd1,
    0x19,0x7e,0x17,0xed,0x08,0xfc,0xb7,0xdc,0xf5,0x3d,0x1c,0x63,0xd7,0x73,0x55,0x58,
    0x33,0xfe,0x5b,0x8f,0xdf,0x8e,0xda,0x6f,0x92,0x77,0x16,0x5c,0x39,0xba,0x87,0xb3,
    0xec,0x6e,0xc1,0x70,0xca,0xe0,0x81,0x53,0x81,0xb3,0x68,0x38,0xe7,0xc0,0x3f,0x08,
    0x27,0xbc,0xe9,0x32,0x78,0xf0,0x5b,0xc2,0xaf,0x6a,0xfc,0x6a,0xe0,0xc1,0xaf,0x8e,
    0xaf,0xe2,0x9f,0x04,0xd3,0x5d,0x5f,0xa4,0xce,0x3a,0xbd,0x36,0xe8,0xf5,0x97,0xc4,
    0x50,0xdb,0x25,0xfe,0x0b,0xb4,0x5f,0xbd,0xff,0x94,0xf3,0x08,0xbd,0xe1,0xf3,0xa7,
    0x7d,0xfe,0xcb,0xe4,0xef,0xb2,0xff,0x50,0xc3,0x15,0x6c,0xca,0x5b,0xe1,0xbf,0xa1,
    0x0d,0x47,0xf3,0xde,0x92,0x9c,0x3d,0x78,0x6f,0xc4,0x27,0xeb,0xf7,0x11,0xdb,0x3e,
    0x52,0xf7,0x6d,0xea,0xcb,0x19,0xce,0x1d,0xf0,0x69,0x61,0x64,0x7d,0xfc,0xff,0xdf,
    0xb2,0xda,0x3e,0xd3,0xdf,0x5d,0xe2,0xad,0xd2,0x5f,0xdf,0xf4,0xa7,0xb6,0x35,0x91,
    0x3e,0xfd,0xac,0x8d,0xf5,0xd7,0x37,0xf9,0x36,0xa8,0x21,0xe4,0x7b,0x60,0xf2,0x6d,
    0xf8,0x37,0x11,0xf7,0xfb,0x10,0x5b,0x98,0xcb,0x23,0x33,0x97,0x81,0x99,0xcb,0x63,
    0x6c,0xdf,0xe8,0xf1,0x29,0x98,0xbe,0xfd,0xf7,0x60,0x9b,0xcc,0x41,0x63,0x7e,0x01,
    0xdb,0x82,0xab,0xdf,0xc4,0x57,0xb0,0xe7,0x60,0x5b,0x86,0xb7,0x0d,0x36,0x34,0xbc,
    0x17,0x70,0xb7,0x0d,0x6f,0x17,0xde,0x8e,0xe1,0xbd,0x82,0xbb,0x6b,0xf6,0xb6,0x67,
    0xf6,0xb6,0xc9,0xde,0xf6,0xe0,0xda,0x99,0xe9,0xf9,0x47,0x26,0x73,0x5d,0xe4,0x1f,
    0x8b,0x67,0x1e,0xb8,0x34,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= params . width * params . height * params . depth)
//  {
//   return;
//  }
//     dataBuffer[threadId]= params . rawData[0];
//
//  if(threadId > ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//
//  uint offset = uint((ceil(params . width * params . height * params . depth)));
//  uint stencilValue = params . rawData[1]& 0xFF;
//  dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
