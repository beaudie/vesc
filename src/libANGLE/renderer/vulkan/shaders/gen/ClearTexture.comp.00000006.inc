// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0xdb,0x4e,0x53,0x51,
    0x10,0x86,0x17,0x7b,0xd7,0x2d,0x5a,0x10,0x4a,0x4b,0xad,0xd2,0x72,0x28,0xda,0x50,
    0x68,0x2a,0x44,0x30,0x26,0x86,0xe3,0x8d,0x5e,0x80,0x46,0x31,0x21,0x11,0x03,0xca,
    0xb9,0x1a,0x8c,0x89,0x3e,0x80,0x17,0xc6,0xc7,0xf1,0x01,0xbc,0xd6,0xf8,0x48,0xa2,
    0xc6,0xe8,0xcc,0x5a,0xdf,0x22,0x63,0x77,0x32,0x59,0x6b,0xfe,0xf9,0xe7,0xbc,0x76,
    0x9a,0x4c,0x5e,0x74,0xae,0xc7,0x5d,0x76,0xbd,0xee,0xb5,0x0b,0x5f,0xc1,0x25,0x82,
    0x38,0x97,0x77,0x99,0x3f,0xef,0xaf,0x6f,0xae,0xb7,0xdf,0xbd,0x3f,0x68,0xcf,0x2f,
    0xcc,0xaa,0xfd,0x8a,0x4b,0x3d,0x4f,0x6d,0x03,0xc2,0xb9,0x20,0x67,0x4e,0xe4,0xf4,
    0x65,0xe7,0x8d,0xf3,0x7e,0xce,0x0d,0x0a,0x9e,0xf3,0xb1,0xf4,0x1e,0xb8,0x3e,0x96,
    0xa0,0x79,0x38,0x55,0xf4,0x21,0x39,0x33,0x62,0x3c,0x90,0x68,0x45,0xea,0x98,0xe4,
    0x8c,0x58,0x0f,0xd8,0xa0,0xc1,0x12,0xb0,0x92,0xc1,0x52,0xb0,0x8a,0x8f,0x9f,0x9e,
    0xf3,0x34,0xd7,0x54,0x57,0xae,0x66,0x57,0x2e,0xe5,0x37,0x89,0xa1,0xfc,0x19,0x39,
    0xeb,0xe7,0xb6,0xa0,0x4f,0x18,0xfd,0x84,0x5e,0xae,0x89,0x14,0x25,0x4b,0xe2,0xed,
    0xa9,0xf7,0xd7,0xfb,0xb0,0x70,0x34,0xdf,0x38,0x3e,0x57,0x45,0xbf,0x44,0x0d,0xa9,
    0xc7,0x73,0x32,0xfb,0xd0,0x9b,0xe2,0xf7,0xd0,0xf3,0x60,0x33,0xf8,0xf7,0xe1,0xaf,
    0xfc,0x7e,0x6c,0x99,0xb1,0x17,0xe8,0xa9,0x6a,0xe6,0xa9,0xd8,0xa8,0xdc,0xb4,0xff,
    0x88,0x45,0xd1,0x38,0x25,0x72,0x16,0xc9,0x5b,0xf2,0xf5,0x06,0x4c,0xeb,0x2e,0x53,
    0x77,0xac,0xa3,0xec,0xeb,0x0f,0xba,0xfa,0x57,0xe0,0x66,0xc6,0x3e,0x42,0xdf,0x51,
    0x1f,0xa3,0xcf,0x92,0xa0,0x3a,0xe3,0x9a,0x68,0x71,0x07,0xa3,0xcc,0x7a,0x8a,0x78,
    0xd3,0xf8,0x36,0xa9,0x67,0xda,0xc7,0xf9,0x3f,0x5e,0xcb,0xcc,0x61,0x16,0x9b,0xc6,
    0x2a,0x4b,0xac,0xdb,0xd4,0x1b,0x67,0xb2,0x29,0xf2,0xd7,0xf8,0x3e,0x13,0xe9,0x35,
    0xfa,0x0e,0x6f,0x29,0xea,0x7b,0xbc,0x99,0xe8,0x7f,0x64,0xec,0xaa,0x1f,0xd3,0x7b,
    0x4b,0x34,0xed,0xfb,0x04,0xce,0x31,0x72,0x47,0xde,0x53,0xc2,0x1e,0x1c,0x7d,0x9f,
    0x09,0xa2,0xff,0xc7,0x0f,0xd1,0x3a,0xe0,0xbf,0xe5,0xae,0xfb,0x7c,0x85,0x5d,0xcf,
    0x55,0x61,0xf5,0xfb,0x7f,0x2b,0xec,0x5e,0xed,0x8b,0xe4,0x1d,0x00,0x57,0x4e,0x85,
    0xb7,0x36,0xcc,0x2e,0x22,0xe7,0x3a,0x78,0xe4,0x54,0xe1,0x8c,0x18,0x4e,0x0d,0xfc,
    0xa3,0x70,0xc2,0xfc,0x83,0x5f,0xcd,0xf8,0x8d,0xe3,0x37,0x66,0xfc,0x26,0xc0,0xa3,
    0x5f,0x1d,0x5f,0xc5,0x3f,0x0b,0xa6,0x7b,0xbd,0x41,0x9d,0x75,0x7a,0x6d,0xd0,0xeb,
    0x2f,0x89,0xa1,0xb6,0x9b,0x22,0x0d,0xfa,0xd5,0xfb,0x4f,0x39,0x3b,0xe8,0x0d,0x9f,
    0x3f,0xf3,0xf9,0xdb,0xe4,0x6f,0x21,0xb1,0x86,0x5b,0xd8,0x94,0xa7,0x7b,0x9f,0xe3,
    0x6d,0xb4,0xc8,0xbb,0x24,0x39,0xe7,0xe0,0xbd,0x15,0x1f,0x7d,0x0b,0xf3,0xd8,0x3e,
    0x51,0xf7,0x22,0xf5,0x15,0x0c,0x67,0x09,0xbc,0x4f,0x18,0xaa,0x2f,0x9b,0x7f,0x51,
    0x6d,0x5f,0xe8,0x6f,0x85,0x78,0xcb,0xf4,0xb7,0x66,0xfa,0x5b,0xf1,0x75,0x39,0x8f,
    0x69,0x3f,0xab,0x5d,0xfd,0xad,0x99,0x7c,0x1b,0xd4,0x10,0xf3,0x3d,0x34,0xf9,0xd4,
    0x76,0x4a,0xbf,0x8f,0xb0,0xc5,0xb9,0x3c,0x36,0x73,0xb1,0x7b,0x7f,0x82,0xed,0x3b,
    0x3d,0x3e,0x05,0xd3,0xb7,0xff,0x01,0x6c,0x8b,0x39,0x68,0xcc,0xaf,0x60,0xdb,0x70,
    0xf5,0x9f,0xf8,0x06,0xf6,0x1c,0x6c,0xdb,0xf0,0x76,0xc1,0x76,0x0c,0xef,0x05,0xdc,
    0x5d,0xc3,0xdb,0x87,0xb7,0x67,0x78,0x07,0x70,0xf7,0xcd,0xde,0x0e,0xcd,0xde,0xb6,
    0xd8,0xdb,0x21,0x5c,0x3b,0x33,0x3d,0xff,0xc8,0x64,0xee,0x8a,0xfc,0x03,0xdd,0xbc,
    0xb5,0xcf,0xa4,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//  uint rawData[4];
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= params . width * params . height * params . depth)
//  {
//   return;
//  }
//     dataBuffer[threadId]= params . rawData[0];
//
//  if(threadId > ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//
//  uint offset = uint((ceil(params . width * params . height * params . depth)));
//  uint stencilValue = params . rawData[1]& 0xFF;
//  dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
