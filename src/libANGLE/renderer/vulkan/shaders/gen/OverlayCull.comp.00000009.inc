// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xdd,0x4b,0xd3,0x51,
    0x18,0xc7,0xcf,0x7e,0x9b,0xae,0x17,0x28,0xdb,0x8a,0xe1,0xeb,0x2a,0xc1,0x9b,0x44,
    0x82,0x5e,0x08,0x62,0x0c,0xe9,0xc2,0x50,0x61,0x8d,0xba,0xeb,0x2a,0x9a,0x36,0xc9,
    0x22,0x29,0x48,0x68,0xc4,0x1a,0x96,0x49,0xb5,0x88,0xba,0x0b,0x4c,0xc2,0x24,0x5b,
    0x2b,0x5b,0x84,0x76,0xdf,0xbf,0x14,0xbd,0x40,0xe0,0xf3,0x9c,0x7d,0x7e,0xeb,0x69,
    0x24,0x1c,0xce,0xce,0xf3,0xf2,0x3d,0xdf,0xef,0xf3,0x3d,0xfe,0xa2,0xc1,0x60,0xdc,
    0x45,0x23,0x6e,0x97,0xdb,0xe1,0xbe,0xba,0xe6,0xdf,0x3e,0x17,0xb8,0x08,0x7b,0x86,
    0x3d,0x2b,0xfb,0x6e,0xd7,0xe9,0xe3,0x63,0x93,0xe7,0x27,0x47,0x6e,0xde,0x2a,0x8c,
    0x1c,0x3f,0x71,0x54,0xeb,0xf7,0xb8,0xa8,0xef,0xd3,0xdc,0x5e,0x17,0x77,0x1d,0xb2,
    0xc7,0x64,0x5d,0xbb,0x34,0x73,0x5d,0xe3,0x09,0x59,0xe3,0xb2,0xba,0xa4,0x3f,0xe6,
    0xf1,0xf4,0x77,0xb3,0xde,0xe3,0x49,0x34,0xe1,0xf1,0x9d,0xeb,0xe5,0xac,0x7b,0x27,
    0x75,0x67,0x05,0xb1,0x0f,0x6e,0x83,0xec,0x63,0x72,0xa7,0xc6,0x02,0xea,0x07,0x64,
    0x3f,0xdc,0xca,0x35,0xcf,0x87,0x0c,0xfe,0x38,0xf8,0x3d,0x9c,0x8b,0x6d,0xf5,0x45,
    0xea,0x43,0x6c,0x3d,0x77,0x93,0x9b,0xa3,0x57,0xcf,0x49,0xb9,0x31,0xf0,0xb5,0x51,
    0xaf,0x5a,0x7f,0x1f,0x90,0x1a,0xe5,0x7a,0x90,0xfe,0x94,0x9c,0xe3,0xf0,0x0f,0x38,
    0x77,0x71,0x8e,0xfa,0xba,0x98,0x9f,0x41,0x04,0x7d,0xa7,0x39,0x27,0x88,0x1d,0x01,
    0x2f,0x09,0x9e,0xd6,0xef,0x27,0xd7,0x09,0x5e,0x8a,0xdf,0x31,0x53,0xdf,0x03,0x87,
    0x3e,0xe6,0x97,0x22,0x36,0xc0,0xac,0x7a,0xc1,0xea,0x87,0x57,0x1f,0x77,0xf7,0xfb,
    0x9a,0xbf,0x5a,0xd2,0xe0,0x84,0x5c,0xd2,0x46,0x9b,0xf6,0x0f,0xb6,0x74,0x39,0xe1,
    0x15,0xb8,0x21,0x38,0x1d,0x93,0x7d,0x88,0x5c,0xc8,0x29,0xdb,0xa6,0xe9,0x0c,0x33,
    0x08,0x35,0x8f,0xb7,0xe5,0x73,0x68,0x1a,0x16,0xcf,0x75,0x86,0xe7,0x88,0xe5,0x4c,
    0xcd,0x45,0xe6,0xd6,0xed,0x76,0xba,0x69,0xe6,0x10,0x71,0xff,0xfe,0x05,0x68,0x52,
    0xbe,0x57,0x88,0x4d,0x73,0xaf,0x9e,0x8b,0xc6,0xab,0xab,0xb2,0xa7,0xe9,0x19,0x16,
    0x34,0xc5,0x9e,0xe3,0x9e,0x2c,0xeb,0xa4,0xf0,0x09,0xe0,0xe6,0xd0,0xf0,0x53,0x22,
    0xfa,0xd6,0x33,0xf8,0x3b,0x81,0x9e,0x9c,0x30,0x57,0xee,0x93,0xc4,0x26,0xe8,0x51,
    0x8e,0x0b,0xe8,0xca,0x93,0x57,0x7d,0x65,0x62,0x17,0x88,0x6b,0x6c,0x54,0x62,0xea,
    0xf9,0x6d,0xde,0x45,0x92,0x7b,0x54,0xeb,0x3c,0xf1,0x51,0x39,0xa9,0x17,0x77,0x5a,
    0x5a,0x9b,0xb9,0x0c,0xef,0xa3,0x44,0x2e,0x2f,0x58,0xda,0x77,0x97,0x98,0x33,0xb1,
    0x32,0x31,0xd5,0xb6,0x21,0x31,0xf5,0xef,0x1e,0xb5,0x9a,0xfb,0x21,0x4a,0x17,0xe9,
    0xf9,0x2d,0xb8,0x9a,0xab,0xc8,0x5a,0x44,0x7f,0xc5,0xe8,0x5d,0x00,0xab,0x64,0xf4,
    0x2a,0xa6,0xbe,0x8b,0xfb,0xe4,0x55,0xe3,0x4b,0xc1,0xd1,0x7b,0x1e,0x10,0xff,0x25,
    0x38,0x21,0x9e,0xee,0xdf,0x05,0x4d,0xf3,0x0f,0xe1,0xd2,0x41,0x6d,0x05,0x3e,0x55,
    0xc3,0x47,0x6b,0x96,0x64,0x55,0xe9,0x5f,0x32,0x7c,0x1e,0x19,0x3e,0x01,0x9e,0x7d,
    0x80,0xcf,0x63,0xf2,0x79,0xc3,0xe7,0x09,0x71,0xe5,0x13,0xe2,0x55,0x0d,0x9f,0xa7,
    0x70,0x5a,0xa4,0x56,0xef,0x5a,0x97,0x29,0xea,0x1c,0x9f,0x91,0xcf,0xe2,0xd5,0x37,
    0xe6,0xfb,0x9c,0x9c,0xfa,0x52,0x8c,0x34,0x6b,0x5f,0xf0,0x7f,0xe0,0xc8,0x97,0xa9,
    0x5d,0xe6,0xcd,0xcd,0x1b,0x6f,0x5f,0x19,0x6f,0x97,0x8d,0xb7,0x2b,0xe4,0x42,0x1f,
    0x5f,0x13,0xb3,0xde,0xae,0x12,0xb3,0xde,0xbe,0xa1,0x76,0x95,0x59,0xd6,0xcc,0x2c,
    0x35,0xb7,0x26,0xab,0x86,0xf6,0x35,0x33,0xcb,0xb7,0x60,0xad,0xfc,0xc7,0xdb,0x75,
    0xf2,0xd6,0xdb,0x77,0xc4,0x75,0x96,0x21,0x5e,0xcd,0xcc,0xf2,0x3d,0x5c,0xaa,0xd4,
    0xae,0xc1,0xa7,0x61,0xf8,0x68,0x4d,0x5d,0x56,0x83,0xfe,0xba,0xe1,0xf3,0xd1,0xf0,
    0x69,0xf7,0x76,0x83,0xbc,0xf5,0xf6,0x13,0x71,0xe5,0x13,0xe2,0x35,0x0c,0x9f,0xcf,
    0x70,0xaa,0x51,0x5b,0x37,0xde,0x7e,0x21,0xdf,0xee,0xed,0x26,0x39,0xeb,0xed,0x96,
    0xf1,0x76,0xd3,0x6b,0x6b,0xce,0xfd,0x32,0x75,0x49,0x74,0x4e,0x19,0x9d,0x9a,0x2b,
    0xc8,0x9a,0x82,0x57,0x01,0x9f,0xf5,0x7b,0x35,0xc3,0xb7,0xaa,0xc4,0x77,0x6a,0xb6,
    0xf5,0xdd,0x88,0xfb,0x77,0x70,0x83,0xf7,0xb4,0x05,0x76,0xd2,0xdf,0x15,0xf3,0x7d,
    0xb3,0xe4,0x55,0x73,0x88,0xad,0xfb,0x1f,0x71,0xef,0x94,0xac,0x6d,0x68,0xff,0x89,
    0x85,0xfc,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_arithmetic : require
//
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[16 + 16];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return uvec2(subgroupOr(uint(intersects)<< localId), 0);
//
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(4, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(4, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(16, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
