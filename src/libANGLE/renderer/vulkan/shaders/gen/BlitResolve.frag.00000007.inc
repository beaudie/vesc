// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdd,0x6f,0x55,0x55,
    0x10,0xc5,0xcf,0xfd,0xae,0xd7,0xb6,0x94,0x7e,0xda,0x08,0x52,0x69,0x13,0x49,0xc1,
    0x5b,0xa2,0x16,0x69,0xb5,0x46,0x81,0xc4,0xaa,0x45,0xb4,0xa8,0x10,0x42,0x20,0x20,
    0xa2,0x55,0x4b,0x21,0x8a,0xd2,0x3e,0x00,0xbd,0x0f,0x4a,0xfb,0x50,0xa5,0x7d,0x00,
    0x69,0x1f,0x50,0xda,0x07,0x04,0x9a,0x68,0xa2,0xd4,0x57,0x7d,0xf0,0x2f,0xf2,0x33,
    0x31,0x71,0xe6,0xf0,0x9b,0x66,0xe5,0x36,0x99,0x9e,0x3b,0x6b,0xcd,0x9e,0x35,0x6b,
    0x9f,0x7d,0x76,0x2e,0xdb,0x5d,0x4a,0x72,0x99,0xa4,0x9c,0xd4,0x25,0xbf,0x25,0x0f,
    0xfe,0x36,0x26,0xd9,0x24,0x63,0xcf,0x87,0x93,0x62,0xfa,0x7c,0x79,0xe4,0xe0,0x48,
    0xe5,0x93,0x4f,0x4f,0x55,0x9e,0xe9,0xdf,0xe9,0x7c,0x63,0x92,0x4b,0xeb,0x9c,0xdb,
    0x60,0x59,0xde,0x9e,0x1e,0xe3,0x27,0xc6,0xce,0x38,0xde,0x60,0x71,0xce,0x62,0xca,
    0xa2,0x6a,0x31,0x6b,0xb1,0x60,0xb1,0x64,0xb1,0x62,0xb1,0x6a,0xd1,0x64,0x3d,0x7c,
    0x4d,0xc9,0xfb,0xdb,0xaf,0x86,0x54,0xcf,0xfb,0x25,0xc9,0x70,0x52,0x48,0x5a,0x98,
    0xa5,0x9b,0x67,0x60,0x19,0xb0,0x3a,0xc1,0xb2,0x60,0x4d,0x82,0xe5,0xc0,0x1e,0x11,
    0x2c,0x0f,0xb6,0x49,0xb0,0x02,0x58,0x97,0x60,0x45,0xb0,0x1e,0xc1,0x4a,0x60,0xdb,
    0x04,0xab,0x03,0xdb,0x21,0xd8,0x43,0x60,0x3b,0x53,0x5f,0xb9,0xf5,0xf9,0xdc,0xe3,
    0x01,0x7b,0x6e,0xc5,0x4f,0xe4,0x8f,0x4b,0xee,0x7b,0xf6,0x98,0xe4,0x53,0xe4,0x19,
    0xf2,0x2a,0x79,0xf4,0x9b,0x25,0xcf,0x91,0x2f,0x90,0xe7,0xc9,0x97,0xc8,0x0b,0xe4,
    0x2b,0xe4,0x45,0xf2,0x55,0x72,0xf7,0xd6,0x62,0x5d,0xb3,0xe9,0x3c,0xb9,0xb4,0x9f,
    0xff,0x6e,0xb3,0x9a,0x22,0x7b,0xe3,0x33,0x74,0x58,0x5e,0x62,0xbd,0xf3,0xed,0x56,
    0x59,0x86,0x77,0xce,0xdf,0x5f,0x19,0xfd,0x2e,0xfb,0x5f,0xcf,0x3a,0xc7,0x9f,0x23,
    0x6f,0x90,0x5e,0x8d,0xd4,0x87,0x56,0x33,0xbd,0x92,0x74,0xae,0xfa,0xf5,0x7d,0x6f,
    0x24,0x8a,0x44,0x99,0x67,0xb3,0x84,0xeb,0xb5,0xb2,0xff,0x2d,0xe8,0xb5,0xa6,0x7d,
    0x1f,0x60,0xdb,0xf1,0xd2,0x4e,0x7f,0xaf,0xef,0x80,0x2b,0x09,0xbf,0x89,0xdc,0xf9,
    0xcd,0xf0,0xde,0xbf,0xd5,0xa6,0xec,0xa2,0xae,0x59,0xde,0x5b,0xac,0xeb,0xe5,0x3c,
    0x44,0xde,0xcf,0x5a,0xf7,0x39,0xc4,0xbc,0xf9,0xf4,0xac,0x94,0xd2,0xfc,0x45,0x66,
    0xd1,0x88,0xb5,0xc3,0xb2,0x87,0xaf,0xd0,0xc7,0xf1,0x4e,0xfb,0xb5,0x9f,0xdf,0x19,
    0xf4,0x33,0x12,0xe1,0xeb,0x75,0x7e,0xef,0x67,0x1f,0x3c,0x3f,0x50,0x33,0xef,0x28,
    0xe7,0xc6,0xe7,0x7b,0x9b,0x9e,0x39,0xe1,0x8f,0xd1,0x33,0xf2,0x93,0x9c,0x23,0xef,
    0xff,0x2e,0x33,0x95,0x85,0x1f,0xa3,0x87,0xf3,0x67,0xe9,0x35,0x84,0xfe,0x59,0xee,
    0x03,0xed,0x7f,0x9e,0xf7,0x1e,0xfc,0x14,0x7c,0xe4,0xd5,0x9a,0x7c,0xb6,0x66,0xfd,
    0x1c,0xdf,0x7b,0xf0,0x0b,0x35,0xfc,0x35,0xce,0x52,0xf0,0x4b,0x35,0xfc,0x4d,0xde,
    0x41,0xf0,0x2b,0x35,0xfc,0x6d,0x8b,0xcb,0xc2,0xaf,0xc2,0xef,0xb2,0x5d,0xc8,0xf2,
    0x7e,0x12,0xb0,0xbf,0x0d,0x29,0xa4,0x7e,0xf3,0xeb,0x77,0x58,0x43,0xba,0xe7,0xa5,
    0xf4,0xdc,0x36,0x81,0x6d,0x90,0x77,0x76,0x86,0x6f,0x69,0x23,0xfc,0x4b,0xd6,0xa1,
    0x83,0xfb,0xaa,0x8d,0xf3,0x30,0x44,0x4d,0x27,0x78,0xd5,0x6a,0x3c,0x7f,0x94,0x75,
    0x9d,0xac,0xdb,0xcc,0x77,0xdc,0xc6,0xf9,0x1d,0xe2,0x8c,0x6e,0x01,0xbf,0x63,0x35,
    0x5d,0xdc,0x3d,0x5b,0x38,0xbb,0x7f,0xd9,0xe4,0x3d,0xcc,0xf3,0xaf,0xd5,0x6f,0x95,
    0x3b,0xcf,0xfd,0xf8,0xef,0x37,0x6d,0x9d,0xef,0xc5,0x13,0x68,0xfa,0xdf,0x45,0xf6,
    0x67,0x1b,0xf8,0xa8,0x65,0x3e,0xd3,0x8f,0x60,0x51,0xf7,0x8f,0xf5,0x88,0x5e,0xfe,
    0xfc,0xc3,0xaa,0xbc,0xee,0x67,0x6a,0x0a,0xac,0xe9,0x16,0x0f,0xdb,0xf1,0xd0,0x2b,
    0x1e,0x76,0x80,0x87,0x87,0x27,0xc1,0xc2,0x43,0x9f,0x78,0x70,0xae,0x62,0xd1,0x87,
    0x6e,0x45,0x3c,0x3c,0x85,0x76,0x46,0x3c,0x3c,0x0d,0x1e,0x1e,0x7e,0x02,0x8b,0x3a,
    0xf7,0x10,0xbd,0xfa,0xc4,0xc3,0x7d,0x6a,0x7a,0x58,0x53,0x11,0x0f,0xbb,0xf0,0xd0,
    0x2f,0x1e,0x9e,0x05,0x0f,0x0f,0xbb,0xc1,0xc2,0xc3,0xa0,0x78,0x70,0x6e,0xc0,0x62,
    0x10,0xdd,0x01,0xce,0x91,0xeb,0x3e,0x8f,0xf6,0x7d,0xf9,0xde,0x7d,0xc6,0xa8,0x1d,
    0x94,0x19,0x7f,0xa5,0xae,0x8f,0x75,0x03,0xd4,0xee,0xa1,0x76,0x0f,0xb5,0xfe,0x8d,
    0xfe,0xc2,0xb7,0xe0,0xeb,0x8f,0x5a,0xec,0x85,0xf3,0x3d,0x5a,0xe3,0x2c,0x3a,0x77,
    0x1c,0xce,0xbd,0xfa,0xbd,0xf4,0x2a,0x5e,0x87,0xf1,0xea,0xf5,0xaf,0x81,0xff,0x80,
    0xd7,0x11,0x7a,0x38,0xfe,0xa7,0xd5,0xec,0xa3,0x47,0xf8,0x1d,0x21,0xdf,0xc7,0x5c,
    0x7b,0xe9,0xe5,0x77,0xd7,0x1b,0xdc,0x5b,0xa1,0x77,0x10,0xbd,0x51,0xd1,0x7b,0x0b,
    0x3c,0xde,0xf3,0x3b,0x78,0x4f,0x04,0x3b,0x04,0x96,0x49,0x7b,0x16,0xd3,0xfb,0xee,
    0x30,0xb5,0x87,0xe8,0x71,0x9c,0xbd,0x38,0x82,0xee,0x61,0xf6,0x64,0x2d,0xbd,0x07,
    0x0a,0x29,0x77,0x94,0xbd,0x3a,0x02,0x56,0x64,0x4f,0xd6,0xb8,0x2f,0x75,0x7f,0xdd,
    0xcf,0x04,0xf7,0xc1,0x09,0xd6,0xb9,0x0f,0xbf,0x3b,0x4f,0xe1,0xe3,0x24,0x3e,0xfc,
    0x1e,0x7d,0x0f,0x7c,0xce,0x6a,0x7c,0xcd,0x69,0xd6,0x39,0x5e,0x6f,0x4a,0x8e,0xbd,
    0x2f,0x77,0xfd,0x69,0xee,0x10,0x9f,0xeb,0x03,0xb8,0xd8,0xa7,0x0f,0xe9,0x3f,0x26,
    0xfb,0xf4,0x11,0xf8,0xef,0xcc,0xfd,0x31,0xd8,0x31,0x39,0x97,0xe3,0xe0,0xed,0x9c,
    0xcb,0x09,0x79,0x4f,0xe3,0xa9,0x5e,0x92,0x62,0xee,0xcf,0x7f,0xbf,0x60,0x35,0xe7,
    0xd0,0x77,0xef,0xc1,0x4d,0x88,0xce,0x67,0xe8,0x9c,0x17,0x9d,0xcf,0xc1,0x43,0x67,
    0x52,0x74,0x9c,0xbb,0x60,0x31,0x49,0xaf,0x0b,0xe8,0x4c,0x89,0x4e,0x70,0x93,0xa2,
    0x73,0x11,0x9d,0x61,0xd1,0xb9,0x04,0x1e,0x3a,0xd3,0xa2,0x73,0x89,0xfb,0x7d,0x9a,
    0x5e,0x97,0xd1,0xa9,0x8a,0x4e,0x70,0xd3,0xa2,0xf3,0x05,0x3a,0xbd,0xa2,0xf3,0x25,
    0x78,0xe8,0xcc,0x88,0x8e,0x73,0x57,0x2c,0x66,0xe8,0x75,0x05,0x9d,0x59,0xd1,0x09,
    0x6e,0x46,0x74,0xbe,0x42,0x67,0x4e,0x74,0xbe,0x06,0x0f,0x9d,0x79,0xd1,0x71,0xee,
    0xaa,0xc5,0x3c,0xbd,0xae,0xa2,0xb3,0x20,0x3a,0xc1,0xcd,0x8b,0xce,0x75,0x74,0xae,
    0x89,0xce,0x37,0xe0,0xa1,0xb3,0x28,0x3a,0xce,0xdd,0xb0,0x58,0xa4,0xd7,0x0d,0x74,
    0x96,0x44,0x27,0xb8,0x45,0xd1,0xf9,0x16,0x9d,0x9b,0xa2,0xf3,0x1d,0x78,0xe8,0x2c,
    0x8b,0x8e,0x73,0xb7,0x2c,0x96,0xe9,0x75,0x0b,0x9d,0x15,0xd1,0x09,0x6e,0x59,0x74,
    0xbe,0x47,0xe7,0xb6,0xe8,0xdc,0x01,0x0f,0x9d,0x7b,0xa2,0xe3,0xdc,0x5d,0x8b,0x7b,
    0xf4,0xba,0x8b,0xce,0xaa,0xe8,0x04,0xe7,0xcf,0xff,0xec,0xeb,0xdb,0x6d,0xf1,0x3f,
    0xc9,0xc5,0x1b,0x04,0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2DMSArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
