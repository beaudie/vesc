// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xd7,0xb9,0xe3,0x29,0xa0,0x72,0x2d,0xf1,0x46,0x85,0xa4,0x06,0xf1,0x60,
    0xac,0x58,0xa1,0xd2,0x60,0xd4,0xb4,0x58,0x44,0x5b,0x7a,0xd1,0x18,0x63,0xbc,0x17,
    0x2b,0xa2,0x69,0x6d,0x85,0x07,0x95,0xf3,0xa0,0xc2,0x03,0x55,0x78,0xd0,0x0a,0x0f,
    0x56,0xe1,0x81,0xa2,0x24,0x6d,0xd2,0x4a,0x5f,0xeb,0x83,0x7f,0x51,0xaf,0x49,0x13,
    0x67,0x16,0xbf,0x21,0x93,0x73,0x92,0x39,0x7b,0xcf,0xf7,0xcd,0x9a,0x6f,0x66,0xd6,
    0xda,0x2b,0x95,0x6c,0xca,0x85,0x90,0x08,0xf9,0x50,0x16,0x5e,0x86,0xe5,0xdf,0xda,
    0x90,0x14,0x24,0x84,0x37,0x42,0x36,0x3e,0x3f,0xe8,0xed,0xef,0x2d,0x7c,0xfd,0xcd,
    0xd9,0xc2,0xce,0xf6,0xed,0xca,0x57,0x86,0x54,0x8c,0x53,0x6e,0xb5,0x78,0x69,0x79,
    0xaa,0x0d,0x9e,0x1a,0xb8,0xac,0x78,0x85,0xd8,0x55,0xb1,0x11,0xb1,0xa2,0xd8,0xb8,
    0xd8,0x94,0xd8,0x8c,0xd8,0x9c,0xd8,0xa2,0xd8,0x1a,0xc9,0xa1,0x6b,0x72,0x9a,0x5f,
    0xde,0x2a,0xa2,0x9e,0xe6,0x0b,0xe1,0xc3,0x90,0x09,0xd5,0xd4,0xd2,0xc4,0xd3,0xb0,
    0x04,0x58,0x99,0xc3,0x92,0x60,0x6b,0x1c,0x96,0x02,0x7b,0xd3,0x61,0x69,0xb0,0xf5,
    0x0e,0xcb,0x80,0x35,0x3a,0x2c,0x0b,0xd6,0xec,0xb0,0x1c,0xd8,0x16,0x87,0x95,0x81,
    0xb5,0x3a,0x6c,0x15,0xd8,0xf6,0xd8,0x57,0x6a,0xa5,0x3e,0xed,0xf1,0x88,0x3c,0x37,
    0xd3,0x8f,0xf9,0x6f,0x39,0x5f,0x67,0xb6,0xd1,0xf9,0x23,0xf8,0x09,0xfc,0x22,0xbe,
    0xe5,0x1b,0xc7,0x4f,0xe1,0x4f,0xe1,0xa7,0xf1,0x67,0xf0,0x33,0xf8,0x73,0xf8,0x59,
    0xfc,0x45,0x7c,0xed,0xad,0x5a,0xb2,0x26,0x63,0x3d,0xa9,0x98,0x4f,0xdf,0x6b,0x25,
    0x26,0xcb,0x6c,0xb4,0x86,0x7a,0xf1,0x73,0xac,0x57,0xbe,0x4e,0x22,0xf3,0xf0,0xca,
    0xe9,0xfe,0xe5,0xd1,0x6f,0x94,0xff,0x72,0xd6,0x29,0xfe,0x1e,0x7e,0x85,0xcb,0x55,
    0x49,0xbc,0x69,0x55,0x91,0x2b,0xc4,0xba,0xca,0x57,0xe6,0x5e,0x89,0x65,0xb1,0x3c,
    0xcf,0x2a,0x67,0xaa,0x57,0xc3,0xfc,0xab,0xd1,0xab,0x89,0x79,0x97,0xb1,0xad,0xf4,
    0x52,0x47,0x7e,0x8d,0xaf,0x87,0xcb,0x39,0x7e,0x3d,0xbe,0xf2,0x1b,0xe0,0x35,0x7f,
    0x8d,0x54,0xd9,0x48,0x5c,0x95,0xdb,0x37,0x5b,0xd7,0xc2,0x79,0x30,0xbf,0x9d,0xb5,
    0xda,0x67,0x17,0xf5,0xa6,0x1d,0xdf,0xcd,0x1c,0x5a,0x45,0x4d,0xf9,0xbd,0xd4,0x66,
    0xd6,0xed,0x62,0x7b,0xdc,0x4c,0x0f,0x92,0x57,0xf1,0x06,0x79,0xeb,0xe3,0x3d,0x41,
    0x3d,0x09,0x67,0xd6,0xe7,0x61,0xde,0xfb,0x98,0x8b,0xfa,0x47,0x4a,0xea,0xef,0xe7,
    0x1c,0x69,0xbd,0x9f,0x93,0x33,0xe5,0xf8,0xd3,0x9c,0x23,0xcd,0x77,0x86,0x1a,0xf2,
    0x8e,0x1f,0x60,0x8d,0xf2,0x57,0x58,0xdb,0x85,0xde,0x15,0xee,0x03,0x9f,0xef,0x1a,
    0xfb,0x6e,0xfc,0x08,0xbc,0xf9,0xc5,0x12,0x7f,0xbc,0x64,0xfd,0x04,0xdf,0xbb,0xf1,
    0x53,0x25,0xfc,0x03,0xce,0x92,0xf1,0x33,0x25,0xfc,0x63,0x66,0x6c,0xfc,0x5c,0x09,
    0x3f,0x2f,0x76,0xcb,0xf1,0x8b,0xf0,0xbb,0x64,0x0a,0x49,0xf6,0x23,0x80,0xfd,0x23,
    0x48,0x26,0xf6,0x9b,0x5e,0xb9,0xc3,0xf4,0x9c,0x1f,0x96,0xbd,0xad,0xa4,0xce,0xd5,
    0x98,0xed,0xd1,0x65,0xbe,0xa5,0xb5,0xf0,0x7b,0x25,0x43,0x3d,0xf7,0x55,0x2d,0x67,
    0xa0,0x8b,0x98,0x06,0xf0,0xa2,0xc4,0xa8,0xbf,0x8e,0x75,0x0d,0xac,0xdb,0xc0,0x77,
    0x5c,0xcb,0xf9,0xed,0xe2,0x8c,0x6e,0x02,0x5f,0x90,0x98,0x46,0xee,0x9e,0x4d,0x9c,
    0xdd,0xbf,0xa5,0xf2,0x66,0xea,0xf9,0x4f,0xe2,0x37,0xbb,0x3b,0x4f,0xfb,0xd1,0xf7,
    0x8f,0x65,0x9d,0xce,0xe2,0x6d,0x34,0xf5,0x77,0x83,0xf9,0x6c,0x01,0xff,0x44,0x3c,
    0xad,0xe9,0x17,0x30,0x8b,0xfb,0x57,0x72,0x58,0x2e,0x7d,0xfe,0x29,0x51,0x1a,0xf7,
    0x1b,0x31,0x19,0xd6,0x34,0xb9,0x1e,0xb6,0xd2,0x43,0x8b,0xeb,0xa1,0x15,0xdc,0x7a,
    0xd8,0x06,0x66,0x3d,0xb4,0xb9,0x1e,0x94,0x2b,0x88,0xb5,0xa1,0x5b,0x70,0x3d,0xec,
    0x40,0x3b,0xe1,0x7a,0x78,0x07,0xdc,0x7a,0xf8,0x15,0xcc,0xe2,0xb4,0x07,0xcb,0xd5,
    0xe6,0x7a,0x78,0x41,0x4c,0x33,0x6b,0x0a,0xae,0x87,0x5d,0xf4,0xd0,0xee,0x7a,0x78,
    0x17,0xdc,0x7a,0xd8,0x0d,0x66,0x3d,0x74,0xba,0x1e,0x94,0xeb,0x10,0xeb,0x44,0xb7,
    0x83,0x73,0xa4,0xba,0x7b,0xd0,0x7e,0xe1,0xbe,0x6f,0xad,0xd1,0x62,0x3b,0x5d,0x8d,
    0x7f,0x10,0xd7,0xc6,0xba,0x0e,0x62,0xf7,0x11,0xbb,0x8f,0x58,0xfd,0x46,0x7f,0xe7,
    0xfe,0xd1,0xf5,0x27,0xc4,0xf6,0xc3,0xe9,0x8c,0x96,0x38,0x8b,0xca,0x9d,0x84,0xd3,
    0x5e,0xf5,0x1e,0xfa,0x88,0x5e,0x7b,0xe8,0x55,0xe3,0x7b,0xc1,0x7f,0xa6,0xd7,0x43,
    0xe4,0x50,0xfc,0x2f,0x89,0x39,0x40,0x0e,0xeb,0xf7,0x10,0xfe,0x01,0xea,0xda,0x4f,
    0xae,0xbe,0xb8,0x77,0xcb,0xf7,0x94,0xe9,0x7d,0x8a,0x5e,0xbf,0xd3,0xfb,0x0c,0xdc,
    0xf6,0xf9,0x0b,0x7a,0x0f,0x0e,0x3b,0x0a,0x96,0x88,0xf9,0xb2,0xf1,0x7e,0x3b,0x46,
    0xec,0x51,0x72,0x9c,0x64,0x16,0xc7,0xd1,0x3d,0xc6,0xfd,0xb0,0x14,0xef,0x81,0x4c,
    0xe4,0x4e,0x30,0xab,0xe3,0x60,0x59,0x66,0xb2,0x44,0xac,0x9f,0xaf,0xf6,0x33,0xc4,
    0x7d,0x70,0x6a,0x65,0xc6,0x99,0x78,0x77,0x9e,0xa5,0x8f,0xd3,0xf4,0xa1,0xf7,0xe8,
    0x39,0xf0,0x09,0x89,0xd1,0x35,0xe7,0x59,0xa7,0x78,0xb9,0x28,0x29,0x76,0xc1,0xdd,
    0xed,0xe7,0xb9,0x43,0xb4,0xae,0x2f,0xe1,0x6c,0x4e,0x17,0xc9,0x3f,0xe0,0xe6,0xf4,
    0x15,0xf8,0x2b,0xea,0xbe,0x04,0xd6,0xed,0xce,0xe5,0x20,0x78,0x1d,0xe7,0x72,0xc8,
    0xed,0xd3,0x60,0xd4,0x0b,0x11,0xd3,0xfe,0xf4,0xfd,0x7d,0x89,0xb9,0x8a,0xbe,0xf6,
    0x6e,0xdc,0x90,0xd3,0xf9,0x16,0x9d,0x6b,0x4e,0xe7,0x3b,0x70,0xd3,0x19,0x76,0x3a,
    0xca,0x5d,0x17,0x1b,0x26,0xd7,0x75,0x74,0x46,0x9c,0x8e,0x71,0xc3,0x4e,0xe7,0x06,
    0x3a,0x3d,0x4e,0xe7,0x26,0xb8,0xe9,0x8c,0x3a,0x9d,0x9b,0xdc,0xef,0xa3,0xe4,0xba,
    0x85,0x4e,0xd1,0xe9,0x18,0x37,0xea,0x74,0x6e,0xa3,0xd3,0xe2,0x74,0xee,0x80,0x9b,
    0xce,0x98,0xd3,0x51,0xee,0xae,0xd8,0x18,0xb9,0xee,0xa2,0x33,0xee,0x74,0x8c,0x1b,
    0x73,0x3a,0xdf,0xa3,0x33,0xe1,0x74,0xee,0x81,0x9b,0xce,0xa4,0xd3,0x51,0xee,0xbe,
    0xd8,0x24,0xb9,0xee,0xa3,0x33,0xe5,0x74,0x8c,0x9b,0x74,0x3a,0x0f,0xd1,0x79,0xe0,
    0x74,0x7e,0x00,0x37,0x9d,0x69,0xa7,0xa3,0xdc,0x23,0xb1,0x69,0x72,0x3d,0x42,0x67,
    0xc6,0xe9,0x18,0x37,0xed,0x74,0x7e,0x44,0xe7,0xb1,0xd3,0x79,0x02,0x6e,0x3a,0xb3,
    0x4e,0x47,0xb9,0xa7,0x62,0xb3,0xe4,0x7a,0x8a,0xce,0x9c,0xd3,0x31,0x6e,0xd6,0xe9,
    0xfc,0x84,0xce,0xbc,0xd3,0x59,0x00,0x37,0x9d,0xe7,0x4e,0x47,0xb9,0x67,0x62,0xcf,
    0xc9,0xf5,0x0c,0x9d,0x45,0xa7,0x63,0x9c,0x3e,0xff,0x97,0xaf,0x6f,0xb7,0xd8,0x6b,
    0x06,0x51,0xa8,0x71,0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2DMSArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = ivec4(0, 0, 0, 1);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
