// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x0b,0x8c,0x16,0xd5,
    0x15,0x9e,0x39,0xf7,0x2e,0x4f,0xad,0x0f,0x50,0x54,0xec,0x03,0x8d,0x56,0x65,0x45,
    0x8a,0xb8,0x34,0xae,0x28,0x4a,0xc0,0x75,0x8b,0x85,0xd5,0xae,0x2f,0xd2,0x5a,0x15,
    0x5b,0xe5,0xa5,0x54,0xda,0x52,0xdf,0x1a,0xac,0x6d,0x6a,0x6b,0x6a,0xd4,0x8a,0xf5,
    0x9d,0x68,0xc2,0xd6,0xba,0x48,0x5b,0x81,0x56,0x94,0x7d,0xc8,0xae,0xae,0x20,0x4f,
    0x51,0x50,0x4b,0x6c,0xac,0xd5,0xa4,0x6d,0xac,0x51,0x01,0x85,0xed,0x3d,0xf3,0x7d,
    0x87,0x39,0x3b,0xb5,0x24,0xc3,0xec,0xf9,0xce,0xf9,0xee,0x3d,0xf7,0xcc,0x9d,0xef,
    0xcc,0xcc,0x1f,0xe4,0xc8,0xfe,0x59,0xc8,0xb3,0x41,0xd9,0x80,0xac,0x33,0x66,0xc5,
    0xbf,0x03,0x32,0xc9,0x72,0x9e,0x47,0xf1,0x3c,0x9e,0xe7,0x89,0xe9,0x3c,0x38,0xeb,
    0x57,0xf8,0xcf,0x9c,0x72,0xee,0x94,0x51,0xd7,0xcc,0x9f,0x31,0x6a,0xec,0x49,0xa3,
    0x95,0xf7,0x85,0x2c,0x14,0x7c,0xf5,0xed,0x97,0xf5,0xcf,0x6a,0xd2,0x59,0x87,0x9c,
    0x73,0xc9,0x95,0x73,0x15,0x1f,0x93,0x8e,0x93,0xd3,0xb1,0x7f,0xe2,0xc7,0x62,0xbc,
    0x2c,0x9b,0xc0,0xf8,0x62,0xbc,0x84,0x8e,0x29,0xc6,0xcf,0xb2,0xc3,0x68,0x9f,0x4c,
    0x7b,0x78,0x3a,0x1a,0xd2,0x88,0x3b,0x90,0x62,0x76,0x24,0xcf,0x86,0xe5,0xc4,0xa2,
    0xc3,0x84,0xd8,0x00,0x87,0x05,0x62,0xfb,0x38,0x2c,0x12,0xdb,0xdf,0x61,0x35,0xc4,
    0x86,0x3a,0xac,0x1f,0xb1,0x43,0x8a,0xdc,0xc2,0xde,0x39,0x34,0xcf,0x8e,0x94,0xc0,
    0x11,0xcc,0xc9,0xec,0x11,0xce,0x1e,0x24,0x7d,0xfd,0x6a,0x8f,0xd8,0xbb,0xee,0x50,
    0xd8,0x87,0xd2,0x77,0x98,0x60,0xcd,0x6a,0x0f,0x49,0x33,0xe8,0x1c,0x23,0x52,0x4c,
    0xe0,0x7c,0x07,0xa5,0x18,0xcd,0xe5,0x2b,0xe4,0x0f,0x4b,0x76,0x7f,0xe6,0x67,0xfe,
    0xc1,0xf4,0x67,0xc5,0x39,0x16,0xeb,0xed,0xcf,0x5a,0x6a,0xfc,0x01,0xfc,0x5b,0xe8,
    0x3f,0x90,0xfe,0x03,0x68,0x0f,0xa3,0xdd,0x8f,0xf1,0xa3,0x19,0x1f,0xe8,0xff,0x1a,
    0xe7,0x56,0xbc,0x9e,0xf6,0x18,0x62,0x23,0x99,0x5f,0x1d,0x6b,0x6f,0xfe,0x93,0x9d,
    0x7f,0x70,0x81,0x97,0xf9,0x9d,0x42,0xdf,0x60,0xe7,0x3f,0x8d,0xd7,0xc6,0xec,0x49,
    0xc5,0xbe,0x2a,0xc7,0x6f,0x70,0x7e,0xb5,0x1b,0x2b,0xf3,0x37,0x71,0x7d,0xc6,0x6f,
    0xae,0xf8,0xa7,0x73,0x3d,0xba,0xbe,0xcb,0x39,0xb7,0x9f,0x6f,0x26,0xf3,0x37,0x7b,
    0x16,0xf7,0x88,0xd9,0xb3,0xb9,0x17,0x6a,0x53,0xa5,0x94,0x3f,0x87,0x6b,0x9a,0xc9,
    0xd8,0xd9,0x2e,0xf6,0xaa,0x74,0xf4,0x3a,0xfb,0xda,0x4a,0x6e,0x37,0x31,0x17,0xcb,
    0xed,0xae,0x74,0x1c,0xef,0xec,0x45,0x9c,0xcb,0xec,0x87,0xb9,0x37,0xcd,0x7e,0xdc,
    0xe5,0xa6,0x76,0x0b,0xf7,0xb0,0xd9,0xad,0xe9,0xf8,0x32,0xd7,0xba,0x8a,0xd7,0x55,
    0xd7,0x7a,0x78,0xfa,0xbf,0x2d,0x9d,0x57,0x31,0x67,0x8b,0x6f,0x2f,0xee,0x67,0xac,
    0x4d,0x7d,0x1d,0xac,0x67,0x0b,0xaf,0x6b,0xbb,0x8b,0xed,0xe4,0x78,0x66,0xbf,0x90,
    0x8e,0x81,0xce,0x5e,0xcd,0xfb,0xcd,0xc6,0xea,0xe2,0x58,0x9d,0x8c,0x5d,0xed,0x62,
    0xbb,0xb9,0xef,0x2c,0xf6,0x45,0x5e,0xd7,0x06,0xfa,0x56,0x3b,0xdf,0x4b,0xf4,0x4d,
    0x67,0x5e,0x7e,0x9c,0x1e,0x5e,0x4f,0x8b,0x7d,0xd9,0xe5,0xdf,0x4d,0xbf,0xc5,0xae,
    0x49,0xc7,0x20,0x17,0xbb,0xd6,0xe5,0x57,0x47,0xbf,0xf9,0x5e,0xe1,0x7c,0x9d,0x1c,
    0xc7,0xfb,0xd6,0x91,0xd7,0xf0,0x39,0xbe,0xf5,0xcc,0xd5,0xe6,0x7f,0xc1,0xf9,0x36,
    0x54,0xd6,0xe8,0x7d,0x1b,0xdd,0x1a,0xab,0xbe,0x4d,0x8e,0xd7,0x59,0xf1,0x6d,0x66,
    0x2e,0xd3,0x9d,0xcf,0xd6,0xfb,0x2a,0xef,0x3b,0x8b,0xdd,0x42,0xac,0x91,0x1c,0x3f,
    0xce,0x6b,0xae,0xbe,0xdd,0xac,0x87,0xf9,0x5e,0x77,0xeb,0xed,0xdc,0xeb,0x1b,0x52,
    0xec,0xa7,0xad,0xdc,0x33,0x5d,0xbc,0x86,0x2f,0xf1,0x1a,0xac,0x65,0x0d,0xd7,0xb1,
    0x26,0x1b,0xb8,0xc6,0x4d,0xcc,0x79,0x0b,0xe7,0x7c,0x9d,0xba,0xf0,0x26,0xf7,0x43,
    0x5b,0xb1,0xdf,0x25,0x7b,0x2f,0x9d,0xbf,0x94,0x76,0x97,0xe9,0xf1,0xff,0x3b,0x94,
    0xbb,0x93,0xfb,0x70,0x07,0x35,0x48,0xed,0x5d,0xc4,0xd4,0xff,0x29,0xff,0xf6,0x7b,
    0x57,0xef,0xd1,0xfc,0xb3,0xde,0x5e,0xb3,0x6b,0x92,0x60,0xf4,0x86,0xd2,0xdf,0x4f,
    0xed,0x94,0xd0,0xc1,0xe9,0x6e,0xdd,0x37,0x87,0xc6,0xaa,0x4f,0xff,0x3e,0x50,0xc5,
    0x25,0xbb,0x69,0xa2,0xd9,0x43,0x0b,0x3b,0x3b,0xcd,0xec,0xa3,0x0b,0x7b,0xfb,0x04,
    0xbb,0xe7,0x6b,0x73,0xac,0x6d,0xaf,0x3e,0xe5,0xe5,0x3d,0xab,0xf6,0x82,0xbc,0x6f,
    0x6e,0x0b,0x73,0xe4,0xa7,0xf7,0xf0,0xa2,0xf4,0xf7,0x7b,0xd4,0x90,0x43,0xd3,0x2a,
    0x56,0xe5,0xd8,0xef,0x35,0x59,0xdf,0x7f,0x39,0xcf,0xc3,0x53,0xbe,0x6d,0xc9,0x58,
    0x95,0x63,0xed,0xed,0x74,0x28,0x56,0x4f,0xbb,0x83,0x98,0x8e,0x37,0x80,0x3d,0x28,
    0xaf,0x8c,0x23,0x45,0xfd,0x31,0xc6,0x40,0x01,0xa6,0xb1,0xf5,0xb4,0x07,0x11,0xd3,
    0x1c,0x0f,0x16,0xe4,0x1f,0xdc,0x9a,0x0e,0x15,0xf4,0xfc,0xda,0xe4,0xd1,0xde,0xa1,
    0xbd,0x4e,0xb1,0x66,0xea,0xb3,0xad,0xb5,0x36,0x61,0x27,0x14,0x71,0x35,0x45,0x8d,
    0x1e,0x8a,0xd8,0x5f,0x75,0x0e,0x7b,0x38,0x62,0xff,0x35,0x39,0xec,0x91,0x88,0xfd,
    0x3a,0xdd,0xe9,0xf2,0xa3,0x11,0xfa,0xeb,0x8f,0x3c,0x65,0xa5,0xbe,0x65,0xc5,0xb8,
    0x35,0xc5,0xba,0xf8,0xf8,0x53,0xe4,0xbb,0x23,0x21,0x35,0xdc,0x37,0xba,0x07,0x4f,
    0x09,0xb8,0x56,0x66,0x3f,0x21,0xa5,0xad,0xbd,0x73,0x6b,0xde,0xd7,0xfe,0x1b,0xed,
    0x4f,0xd2,0x68,0x75,0xac,0xc9,0xa7,0xe9,0x6f,0xed,0x0f,0xe3,0x04,0xe3,0xeb,0x79,
    0x3c,0x7b,0xeb,0xe9,0x82,0xfe,0x39,0x35,0xb1,0xb4,0x07,0x9f,0x21,0xc0,0x4e,0x97,
    0xb2,0xfe,0xd7,0xb3,0xcf,0x4f,0x14,0xf8,0x17,0x72,0xcd,0x93,0x04,0x98,0xd6,0xe8,
    0xf4,0x84,0x69,0x2f,0x9d,0x2c,0xe8,0xb7,0x3a,0xdf,0x78,0xd6,0xfe,0x4c,0x01,0xde,
    0x9e,0x62,0xd4,0x6e,0x10,0x60,0xa7,0x71,0x6c,0xad,0xfb,0x59,0x02,0xbc,0x8b,0x31,
    0x53,0x18,0x33,0xc9,0xc5,0x9c,0x2d,0xc0,0x35,0x46,0xed,0xa9,0x02,0x9e,0xea,0xc7,
    0x42,0x62,0xd3,0x04,0xba,0xa0,0xbe,0x26,0x62,0xe7,0x08,0x72,0xd5,0x7f,0x37,0x13,
    0x3b,0x57,0x80,0x6b,0xfc,0x39,0x09,0xd1,0xf5,0x2c,0x88,0xc0,0x2d,0xd6,0xe6,0x39,
    0x8f,0xf3,0x34,0xb9,0x79,0xce,0xa7,0x7d,0x9e,0x9b,0xe7,0x42,0x72,0x73,0x37,0xcf,
    0x45,0x02,0xfc,0x7c,0x37,0xcf,0x75,0x11,0xb8,0xce,0x97,0xbb,0x79,0xbe,0x2d,0x58,
    0xe3,0xf4,0x42,0xc3,0x80,0x5d,0x4c,0x4c,0xe7,0x9a,0xc6,0xba,0x7f,0x57,0x10,0xab,
    0xbe,0x9b,0x89,0x5d,0x2a,0x18,0x57,0x7d,0x7a,0x2d,0x54,0x63,0xee,0xce,0xa1,0x3b,
    0xd3,0x79,0x2d,0x74,0xbc,0x7b,0x72,0xe0,0x16,0x73,0x2f,0x63,0x1a,0x5c,0xcc,0x6f,
    0x72,0xe0,0x36,0xdf,0x7d,0x39,0x78,0x8a,0xb7,0x26,0x4c,0x35,0xe0,0xfe,0x1c,0x73,
    0xaa,0xef,0xfe,0xc4,0x53,0x4d,0xf8,0x2d,0x71,0xdd,0x7b,0x0f,0xf2,0xc6,0xdd,0x95,
    0x7c,0x8a,0x3f,0x90,0x0e,0xc5,0x74,0xff,0xe9,0xdf,0x3b,0xd3,0xb9,0x8e,0xfb,0x51,
    0xf1,0x0e,0xce,0xf5,0x18,0xc7,0xd5,0x7b,0xac,0x8b,0xd8,0x13,0xc4,0x1e,0x89,0x65,
    0xad,0x17,0xe7,0xc0,0x33,0x77,0x4d,0x5a,0x72,0xac,0x43,0x7d,0x16,0xf7,0x24,0xe3,
    0xfc,0x35,0xf9,0x7d,0x8e,0x58,0xf5,0x19,0xf7,0x69,0x72,0x15,0xb3,0xb8,0x3f,0xe6,
    0xc0,0x17,0xe7,0xe5,0xf5,0x58,0xce,0x5a,0x34,0xb9,0x6b,0xb4,0x92,0xb5,0xf1,0xfb,
    0xe3,0xb9,0x1c,0xb1,0xea,0xd3,0xba,0xaa,0xde,0x75,0x52,0xeb,0xec,0x5e,0x59,0x9d,
    0xe3,0xde,0xbb,0xd6,0xdd,0x2b,0x5d,0x39,0x70,0xdb,0xf3,0xdd,0x39,0x30,0x1b,0xf7,
    0xc5,0x1c,0x63,0x77,0xbb,0x35,0xf6,0xe4,0xa8,0x5b,0xee,0xe6,0x5f,0x93,0x03,0x5f,
    0xee,0xd6,0xb3,0x36,0x07,0x7f,0x8d,0xe3,0xae,0x23,0xd7,0xdf,0x1b,0xeb,0x73,0xc4,
    0xaa,0x6f,0x86,0x3e,0xb7,0xa5,0xf3,0x06,0xe6,0x7f,0x71,0x8a,0x51,0xfd,0xda,0x48,
    0x6c,0x3d,0xc7,0xd2,0xdc,0xaf,0x14,0xe0,0x79,0xb1,0x57,0xa1,0x81,0xd7,0x08,0x70,
    0x7f,0xb4,0x73,0x8c,0xf9,0x02,0xff,0x1c,0xde,0x03,0x8a,0xfd,0x58,0x80,0x3f,0x1a,
    0xcb,0x71,0x7f,0x22,0xc0,0xb3,0xa2,0xdf,0x03,0xbb,0x56,0x80,0xcf,0xce,0xca,0xb8,
    0xeb,0x19,0x97,0xbb,0xb8,0x1b,0x04,0xf8,0xac,0xe2,0xf9,0x02,0xd8,0x8d,0x02,0xfe,
    0x0d,0x52,0x72,0x6f,0x26,0x57,0x1c,0xf7,0x16,0x01,0x3e,0xd3,0x71,0x6f,0x15,0xf0,
    0x6f,0x71,0xdc,0x85,0xe4,0x06,0xc7,0xbd,0x4d,0x80,0xd7,0x3b,0xee,0x4f,0x05,0xfc,
    0xdb,0x1c,0x77,0x36,0x6b,0x96,0xb9,0x9a,0xfd,0x42,0x80,0xfb,0xc3,0x6a,0x76,0x87,
    0xc0,0xef,0x6b,0x76,0xa7,0x00,0xf7,0x35,0xfb,0xb5,0x00,0xf7,0x35,0xbb,0x4b,0x80,
    0xfb,0x9a,0xdd,0xcd,0x38,0x5f,0xb3,0x7b,0x04,0xb8,0xaf,0xd9,0xbd,0x02,0xfe,0x3d,
    0x2e,0xf7,0xfb,0xc8,0xf5,0x35,0x5b,0x24,0xc0,0x7d,0xcd,0xee,0x17,0xf0,0x17,0x39,
    0xee,0x03,0xe4,0xfa,0x9a,0x3d,0x28,0xc0,0x7d,0xcd,0x1e,0x12,0xf0,0xd5,0xa7,0x7a,
    0xa4,0x3d,0x6a,0xae,0xa0,0x96,0xea,0x3b,0x35,0x8d,0xa0,0x3d,0x70,0xae,0x94,0x7b,
    0xff,0x29,0x6a,0xa8,0xde,0xe7,0xb7,0x12,0x6b,0x15,0xbc,0xdb,0x3c,0x45,0x7d,0xd4,
    0xf7,0x82,0x25,0x82,0xfe,0xd9,0xec,0xee,0xbf,0xa7,0x05,0x78,0x4f,0x62,0xa9,0xbd,
    0x54,0x80,0x2d,0xe2,0x33,0x80,0xdd,0x97,0x7f,0x10,0xf8,0x8c,0xf7,0xa7,0x0a,0xef,
    0x19,0x01,0xf6,0x30,0xb5,0xd5,0x78,0xcb,0x04,0x3e,0xe3,0xad,0xa8,0xf0,0xfe,0x2c,
    0xc0,0x1e,0xaf,0xf0,0xfe,0x22,0xf0,0xed,0xd5,0x1c,0xc1,0x9a,0xf4,0xf9,0xd8,0xd6,
    0xf3,0x1c,0xd7,0xb3,0xd2,0x8d,0xff,0xbc,0x00,0xb7,0x1e,0xd3,0x46,0x5e,0x6b,0x56,
    0xce,0xd9,0x2e,0x88,0x6b,0x63,0x9f,0xb1,0x39,0x3b,0x04,0x3e,0xab,0xe1,0x0b,0x82,
    0xe7,0xa3,0xa7,0x5c,0x1e,0x5d,0x02,0xdc,0xe7,0xd1,0xcd,0x3c,0xba,0x5c,0x1e,0x2f,
    0x0a,0x70,0xcb,0xa3,0x87,0xbc,0xd6,0xac,0x7c,0x2e,0x78,0x59,0x10,0xd7,0xe3,0x9e,
    0x03,0xd6,0x08,0xf0,0x66,0x97,0xd7,0x5a,0x01,0xae,0xd7,0x5e,0x9f,0x87,0xb6,0x16,
    0x73,0xf7,0x2b,0xbe,0x1d,0xac,0x17,0x3c,0x23,0x69,0xbd,0x3a,0xa4,0xec,0x69,0x1b,
    0x04,0x3e,0x5b,0xcb,0x26,0xc1,0x38,0x8d,0xc5,0xfb,0x1b,0xb0,0xcd,0x82,0xb8,0x4d,
    0x6e,0x2f,0x6d,0x11,0x5c,0xeb,0x3a,0xa7,0x8f,0xaf,0x09,0x70,0xbd,0x3e,0xbf,0x4b,
    0x98,0xf6,0xbe,0xad,0x82,0x6b,0xfb,0x2a,0x9f,0xbd,0xde,0x96,0xb2,0xff,0xa9,0x6f,
    0x5b,0x3a,0xb6,0xb3,0xdf,0x6d,0x73,0xe3,0xbf,0x25,0x98,0x77,0x99,0xc3,0xfe,0x2a,
    0xc0,0x75,0x4e,0xed,0x93,0x6f,0x93,0xa7,0x7c,0x6f,0xeb,0xf9,0xa3,0xa4,0x19,0xca,
    0x79,0x2c,0x82,0xb7,0x8d,0xe3,0x6d,0x97,0x32,0xdf,0x77,0x04,0x39,0x3f,0x16,0xcb,
    0xbe,0xff,0x77,0x41,0xdf,0xef,0x74,0x7d,0xff,0x5d,0x01,0x6e,0x6b,0xfa,0x87,0x00,
    0xd3,0x35,0x2d,0x4e,0x11,0x1a,0xf3,0x9e,0x00,0xef,0xcd,0xfa,0xe2,0xff,0x24,0xae,
    0xef,0x2d,0xfa,0xae,0xb2,0x4f,0x36,0xa0,0xc0,0x3f,0xa0,0xb6,0x1c,0xcf,0x3c,0x94,
    0xaf,0xb1,0x57,0xf1,0xdd,0xe4,0x43,0x41,0x8c,0xd9,0x1f,0xd1,0xff,0xb3,0x94,0x83,
    0xda,0x1f,0x0b,0x62,0x14,0xbf,0x8d,0xd8,0x27,0x02,0x5c,0xdf,0x7b,0x6e,0x21,0xb6,
    0x43,0x80,0xeb,0xbb,0xcf,0x5c,0xae,0x67,0xa7,0x00,0x37,0xcd,0xe9,0xa5,0xd6,0x06,
    0xa7,0xb5,0x03,0x03,0x70,0x7f,0x98,0xd6,0x0e,0x0a,0xf0,0x7b,0xad,0xdd,0x37,0x00,
    0xf7,0x5a,0xbb,0x5f,0x00,0xee,0xb5,0x76,0xff,0x00,0xdc,0x6b,0xed,0x81,0x8c,0xf3,
    0x5a,0x3b,0x24,0x00,0xf7,0x5a,0x3b,0x34,0x80,0xaf,0x3e,0xe3,0x1e,0x4c,0xae,0xd7,
    0xda,0x61,0x01,0xb8,0xd7,0xda,0x43,0x02,0xf8,0xc3,0x1c,0xf7,0x30,0x72,0xbd,0xd6,
    0x0e,0x0f,0xc0,0xbd,0xd6,0x1e,0x1e,0xc0,0x1f,0xee,0xb8,0x12,0x50,0x33,0x71,0x35,
    0x1b,0x11,0x80,0xfb,0xc3,0x6a,0x76,0x44,0x80,0xdf,0xd7,0xec,0xa8,0x00,0xdc,0xd7,
    0xec,0xab,0x01,0xb8,0xaf,0xd9,0x31,0x01,0xb8,0xaf,0xd9,0x71,0x8c,0xf3,0x35,0x1b,
    0x19,0x80,0xfb,0x9a,0xd5,0x06,0xf0,0x47,0xba,0xdc,0x47,0x91,0xeb,0x6b,0x76,0x42,
    0x00,0xee,0x6b,0x36,0x3a,0x80,0x7f,0x82,0xe3,0x8e,0x21,0xd7,0xd7,0xec,0xc4,0x00,
    0xdc,0xd7,0x6c,0x6c,0x00,0x5f,0x7d,0xd6,0x9f,0x62,0x40,0x2d,0xd5,0xa7,0x1a,0xa5,
    0xef,0x64,0x8a,0x99,0x3e,0x4e,0x0e,0x78,0x4f,0xf3,0x7d,0xe7,0xcc,0x00,0xdc,0x34,
    0xb9,0x21,0x00,0xab,0xf6,0x9d,0xb3,0x02,0x7c,0xc6,0xfb,0x46,0x85,0x37,0x25,0x00,
    0xab,0xf6,0x9d,0xb3,0x03,0x7c,0xc6,0x9b,0x5a,0xe1,0x4d,0x0b,0xc0,0xaa,0x7d,0xa7,
    0x29,0xc0,0x67,0xb9,0x7f,0x8b,0xb9,0xfb,0x1e,0xd3,0x1c,0x80,0xdb,0x58,0x17,0x04,
    0x60,0xd5,0x7e,0x72,0x61,0x80,0xcf,0xc6,0xfa,0x0e,0xc7,0xf2,0x7d,0xe2,0xe2,0x00,
    0xdc,0x7a,0xc2,0xa5,0x01,0x98,0xef,0x09,0x97,0x05,0xe0,0xbe,0x27,0xcc,0x08,0xc0,
    0xb5,0xde,0xfa,0xce,0xec,0x7b,0xc2,0xf7,0x03,0xde,0xa3,0x75,0x2d,0x17,0x86,0x52,
    0xef,0xae,0x08,0xf0,0x59,0x4f,0x98,0x19,0x30,0x8e,0xef,0x09,0xb3,0x02,0xe2,0xd4,
    0x67,0xfa,0x3c,0x27,0xe0,0x3a,0xf8,0x9e,0x30,0x37,0x00,0xf7,0x3d,0xe1,0xea,0x80,
    0xba,0x5b,0x4f,0x58,0x10,0xca,0x9e,0xa0,0xbe,0x79,0xe9,0xf8,0x51,0x80,0x96,0xcf,
    0x73,0xe3,0xcf,0x0f,0x98,0xf7,0x6c,0x87,0xfd,0x30,0x00,0xb7,0x9e,0xb0,0x80,0x3c,
    0xe5,0x7b,0x5b,0xcf,0xd6,0x13,0x9e,0x88,0xe0,0xcd,0xe3,0x78,0x1a,0x6b,0xf9,0x5e,
    0x17,0x90,0xb3,0xc6,0x98,0x56,0xdf,0x1e,0x4a,0xad,0x56,0x7f,0x55,0xab,0x7f,0x1e,
    0x10,0x63,0xda,0x7c,0x47,0x00,0xe6,0xb5,0xf9,0x97,0x01,0xb8,0xd7,0xe6,0x5f,0x05,
    0xe0,0x5e,0x9b,0xef,0x0c,0xc0,0xaf,0xe7,0x75,0x7f,0x3f,0xc7,0xfb,0xd6,0x25,0x39,
    0x72,0x7f,0x27,0x94,0xdf,0xa6,0x77,0xf2,0x59,0x74,0x06,0x7d,0xef,0x7e,0x8e,0xcf,
    0x6a,0xbe,0x38,0x80,0xab,0x31,0x5a,0xf3,0x56,0x57,0x73,0xf5,0xb5,0xa4,0xa3,0x95,
    0xb5,0x6a,0x71,0xd7,0xfe,0x5f,0xe4,0x28,0xd7,0xd6,0xfb,0xef,0x00,0xdc,0x62,0xfe,
    0x13,0x30,0x9f,0x8f,0xf9,0x30,0x00,0xb7,0x9a,0x7c,0x14,0x80,0x29,0xd7,0x6a,0xf2,
    0x71,0x00,0x7e,0xb4,0xab,0xc9,0x27,0x01,0xb8,0xd6,0x64,0x0e,0x6b,0xb0,0x23,0x00,
    0xbf,0x91,0xf6,0xae,0x00,0xcc,0xf6,0xfd,0xa7,0x01,0x98,0x7e,0xbf,0x7b,0x92,0xeb,
    0xdd,0x1d,0xf0,0xfe,0xa8,0x3e,0xeb,0xc5,0x7b,0x02,0xf0,0x46,0xf6,0x68,0xab,0xb1,
    0x7e,0x4f,0x54,0xdf,0x6a,0x8e,0x97,0x47,0xf0,0x7a,0xb9,0x87,0xac,0x2e,0xad,0xdc,
    0x43,0x1a,0xb3,0x38,0x42,0xef,0x74,0x5f,0x69,0xbc,0xd6,0x6c,0x09,0xe7,0x7e,0x3a,
    0xe0,0xba,0x35,0xf3,0x9d,0x7f,0x85,0xab,0xb5,0xfa,0x96,0xa6,0x63,0x39,0xc7,0x5c,
    0xca,0xbd,0x5c,0x3c,0x2b,0xf3,0xfa,0xbd,0xcf,0x77,0xd3,0xe2,0x79,0x39,0x00,0x9f,
    0xe5,0xf4,0x76,0x59,0xc0,0xfc,0xcf,0x30,0xbf,0x15,0x1c,0x6b,0x79,0xc5,0x5e,0xe1,
    0xf2,0x6d,0x89,0xe0,0x2d,0xa5,0x4e,0x6b,0xac,0xd5,0xea,0xd9,0x4a,0xbe,0x9d,0x2e,
    0x5f,0xf5,0xad,0x4c,0x47,0x07,0xc7,0x5c,0xe9,0xf2,0x5d,0xe5,0xf2,0xbd,0x95,0x58,
    0x5b,0x00,0xee,0xf3,0x6d,0x67,0xbe,0x6d,0xcc,0xaf,0x93,0x63,0x75,0x54,0xec,0x4e,
    0x97,0xef,0x93,0x11,0xbc,0x95,0xcc,0x57,0x63,0x5b,0x98,0x6f,0x57,0x25,0xdf,0x8d,
    0x2e,0x5f,0xf5,0x75,0x6b,0x6f,0xe6,0x98,0xdd,0x6e,0x9f,0xbc,0xc4,0x3c,0x9a,0x5d,
    0x6e,0x3d,0x01,0x78,0xab,0xeb,0x5d,0x6b,0x02,0xea,0xd5,0xe3,0xb8,0xaf,0x90,0xab,
    0xdf,0x80,0x4d,0x83,0xd7,0x05,0xe0,0x8d,0x8e,0xbb,0x21,0x20,0xf7,0x75,0x5c,0x9b,
    0xe5,0xb1,0xd1,0xad,0x6d,0x49,0x44,0x8c,0xae,0x77,0x03,0xf3,0x35,0x5f,0x6b,0xc4,
    0xdc,0xea,0x5b,0x43,0xdf,0x15,0x39,0x7c,0x9b,0xdd,0xfd,0xad,0x71,0x5a,0x63,0xf3,
    0x6d,0x71,0xbe,0x25,0xf4,0xd9,0x3b,0xc5,0xeb,0xbc,0x87,0xf5,0x7b,0xb5,0x61,0xdb,
    0x78,0x4f,0x2b,0xd6,0x49,0xec,0x8d,0x00,0xbc,0x8e,0xeb,0x51,0xec,0xcd,0x00,0xfe,
    0x1b,0x4e,0x93,0xde,0x0a,0xc0,0x6d,0xcd,0xdb,0x03,0xb0,0xcd,0xae,0xd7,0xbf,0x1d,
    0x80,0x6b,0x5e,0x53,0xb3,0x81,0xc5,0xf3,0xce,0x07,0x39,0xbe,0xef,0xaa,0x2f,0xf2,
    0x1b,0x6a,0x0d,0x73,0x36,0x7d,0xbb,0x20,0x96,0xeb,0xb8,0x33,0xf4,0xd5,0xb7,0x8b,
    0x3e,0xc7,0x67,0xfa,0x76,0x78,0x04,0x57,0x63,0x74,0x4f,0x1c,0x11,0xcb,0x3d,0xa1,
    0xbe,0x2f,0xa6,0x43,0x31,0xbd,0x16,0xfa,0xb7,0x69,0xd7,0x25,0xe4,0x5c,0x10,0x4b,
    0xed,0xba,0x34,0x02,0xb7,0x98,0xcb,0x23,0xe6,0xf3,0x31,0xdf,0x8b,0xc0,0x4d,0xdf,
    0xae,0x88,0xc0,0x94,0x6b,0xfa,0x76,0x65,0x04,0xee,0xf5,0x6d,0x66,0x04,0xee,0xf5,
    0x6d,0x56,0x04,0x6e,0xfa,0x36,0x27,0x02,0xb3,0xbd,0x37,0x37,0x02,0xf3,0xfa,0x76,
    0x75,0x84,0xbe,0xa9,0xcf,0xf4,0x6d,0x5e,0x04,0x5e,0xd5,0xb7,0x1f,0x44,0xf8,0x4c,
    0xdf,0xe6,0x47,0xf0,0x14,0xd7,0x3d,0x6a,0x75,0xd1,0xb3,0xed,0xc3,0x67,0xa9,0x6f,
    0xba,0x6f,0xe7,0xb3,0x7e,0x5a,0xd7,0xda,0xd8,0x57,0xcb,0x8e,0x4a,0xf6,0x48,0xf2,
    0xf5,0x6f,0xd3,0x86,0x63,0xe2,0xff,0x6a,0xd9,0xb1,0x11,0xb8,0xd7,0x86,0xe3,0x22,
    0xe6,0x3a,0x96,0xb9,0xd4,0x72,0xac,0x91,0x15,0xbb,0xd6,0xe5,0xb6,0x32,0x82,0x77,
    0x14,0x73,0x1c,0xc9,0xdc,0xc6,0xc5,0xbe,0xba,0x35,0x5a,0x7f,0x4b,0x20,0x7f,0xb4,
    0xcb,0xed,0xc4,0xf8,0xbf,0xba,0x35,0x36,0x02,0xf7,0xb9,0x9d,0xc4,0xdc,0xc6,0x32,
    0x97,0x71,0x1c,0xab,0xae,0x62,0x8f,0x73,0xb9,0x3d,0x1f,0xc1,0x1b,0xcd,0xdc,0xea,
    0x98,0xdb,0xe4,0xd8,0x57,0xa3,0xea,0x93,0x3d,0x99,0xfc,0x7a,0x77,0xad,0xc7,0x73,
    0x4e,0xaf,0x51,0xa7,0x46,0xe0,0x5e,0xa3,0x26,0x44,0xd4,0xe1,0x54,0xc7,0x3d,0x83,
    0x5c,0xaf,0x51,0x13,0x23,0x70,0xaf,0x51,0x93,0x22,0xf2,0x9c,0xc8,0x75,0x58,0x1e,
    0x93,0xdd,0x3a,0x3a,0x18,0xa3,0x6b,0xd3,0xf8,0x7a,0xe7,0x6b,0xe7,0xdc,0xea,0x9b,
    0x40,0x9f,0xe9,0x50,0x83,0xbb,0x47,0xdb,0x2b,0x1a,0xd5,0xe8,0x7c,0x1d,0x15,0x8d,
    0x9a,0xc2,0xfb,0xd0,0x6b,0xd4,0x37,0x79,0x5f,0x7a,0x8d,0x9a,0x1a,0x81,0x7b,0x8d,
    0x9a,0x16,0xc1,0x57,0x9f,0xed,0xf9,0xa6,0x08,0xdc,0xd6,0x7c,0x6e,0x04,0xa6,0xf9,
    0x99,0x46,0x35,0x47,0xe0,0x9a,0x97,0x69,0xd4,0xae,0x1c,0x3a,0xd5,0x1c,0xcb,0xdf,
    0x79,0x22,0x75,0xca,0xfa,0xcf,0x67,0x7c,0x26,0xb3,0xe7,0xd7,0x3d,0xee,0x9b,0xbe,
    0xfa,0x76,0xa7,0x63,0x0f,0xbf,0xe9,0xef,0x76,0xbf,0x29,0xf4,0xf2,0x37,0x85,0x57,
    0xdd,0xb7,0x05,0x7d,0x09,0x53,0xfc,0x76,0xae,0x25,0x17,0x60,0x0d,0x59,0xc9,0x13,
    0x7e,0x93,0x68,0x74,0xbc,0x20,0xc0,0x8d,0x17,0x05,0x58,0x83,0xfb,0x3d,0xa4,0x46,
    0x30,0x5e,0x74,0xbf,0x87,0xf4,0x17,0x7c,0xd7,0xae,0xe1,0xbb,0x45,0xf1,0xbb,0x22,
    0x7f,0x27,0xb4,0x6f,0xdf,0xfb,0x0a,0xe2,0xb2,0xac,0xc4,0xf6,0x23,0x96,0xbb,0xbc,
    0x86,0x30,0xaf,0x26,0x97,0xd7,0x50,0x01,0x6e,0xcf,0xd3,0x07,0x09,0xbe,0xc9,0x0f,
    0x2d,0xbe,0x53,0xf6,0x2b,0x7e,0x83,0x1c,0x26,0x98,0x43,0xc7,0x54,0xff,0x65,0x7a,
    0xcd,0x88,0xef,0xe2,0x6f,0x20,0x56,0xbf,0x3d,0x95,0xdf,0x44,0xf4,0xbc,0x3b,0x65,
    0xf1,0xf5,0x74,0xfc,0x17,0x69,0xe8,0x4c,0x50,0x2c,0x25,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
