// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x7b,0x94,0x5f,0xd3,
    0x15,0xbe,0x67,0x9f,0x33,0x99,0x49,0x86,0x88,0xa6,0xc4,0xc4,0x23,0x0f,0x5a,0xab,
    0x41,0x3c,0x2a,0x83,0x44,0xc4,0xa3,0x64,0x3a,0x08,0x83,0x58,0xba,0xa6,0x6d,0x8a,
    0x54,0x11,0xa1,0x8a,0x2a,0xcb,0x22,0x14,0x45,0x83,0xb0,0x96,0x7a,0x54,0x4c,0xe5,
    0x51,0x4c,0xe8,0x90,0x88,0xb4,0x0d,0x4b,0x12,0x93,0x07,0xd1,0x44,0x23,0x4d,0x1a,
    0xcf,0xb6,0x59,0x96,0xe5,0x8f,0x5a,0xa4,0x55,0x21,0x64,0x7a,0xf6,0xfd,0xbe,0x9d,
    0xbb,0xf3,0x43,0xd6,0xba,0xb9,0xb3,0xbf,0xfd,0x38,0x7b,0xef,0x73,0xce,0x77,0xee,
    0xbd,0xbf,0x28,0x7b,0xd7,0x17,0x31,0x14,0x7d,0x8a,0x86,0x62,0x5e,0x2a,0xca,0x7f,
    0x3b,0x17,0x52,0x04,0xde,0x87,0xf3,0x3e,0x9a,0xf7,0xe3,0xf2,0xbd,0xb1,0xe8,0x55,
    0xea,0xc7,0x9e,0x74,0xfa,0x49,0xc3,0x2f,0xbb,0x7c,0xe2,0xf0,0x43,0x47,0x1c,0xa4,
    0x7e,0x7d,0x8b,0x58,0xfa,0xab,0x6e,0xa7,0xa2,0xbe,0xa8,0xcb,0x77,0x0d,0x39,0xf9,
    0xec,0x0b,0x2e,0x56,0xfc,0x90,0x7c,0x8d,0xcc,0x57,0xbf,0xec,0x9f,0xca,0x78,0x45,
    0x71,0x34,0xed,0xcb,0x78,0x19,0x3d,0xa4,0x8c,0x5f,0x14,0x03,0x29,0x8f,0xa4,0xbc,
    0x7b,0xbe,0x5a,0x72,0xc4,0x4f,0x91,0x62,0xb1,0x37,0xef,0x86,0x05,0x62,0xc9,0x61,
    0x42,0xac,0xc1,0x61,0x91,0xd8,0x0e,0x0e,0x4b,0xc4,0xfa,0x39,0xac,0x8e,0xd8,0xd7,
    0x1d,0xd6,0x8b,0xd8,0x6e,0x65,0x6e,0x71,0xdb,0x18,0x9a,0xe7,0x82,0x9c,0xc0,0x50,
    0xe6,0x64,0xf2,0x10,0x27,0x6f,0xad,0xd1,0x6f,0xa5,0x3e,0x30,0x96,0xca,0x4d,0xd4,
    0xf5,0x15,0xd4,0xac,0x72,0xff,0x3c,0x82,0x8e,0x31,0x24,0xdb,0x44,0x8e,0xb7,0x4b,
    0xb6,0xd1,0x5c,0x06,0xd3,0x7f,0x40,0x96,0xeb,0x99,0x9f,0xe9,0x1b,0xa9,0x2f,0xca,
    0x7b,0x2a,0xeb,0xad,0x67,0x2f,0xd5,0x7e,0x67,0xfe,0x2d,0xd4,0x7f,0x8d,0xfa,0x9d,
    0x29,0x0f,0xa0,0xdc,0x8b,0xf6,0x07,0xd1,0x3e,0x52,0x7f,0x30,0xc7,0x56,0x7c,0x14,
    0xe5,0x43,0x88,0xed,0xc7,0xfc,0x9a,0xd9,0x7b,0xd3,0x8f,0x74,0xfa,0xc6,0x12,0xaf,
    0xf2,0x3b,0x92,0xba,0x46,0xa7,0x1f,0xc3,0xb9,0x31,0xf9,0xf8,0x72,0x5d,0x55,0xf1,
    0x5b,0x9c,0x5e,0xe5,0xd6,0x9a,0xf1,0xdb,0x58,0x9f,0xf9,0x8f,0xaf,0xd1,0xb7,0xb3,
    0x1e,0xad,0xef,0xc7,0x1c,0xdb,0x8f,0x77,0x21,0xf3,0x37,0x79,0x12,0xd7,0x88,0xc9,
    0x17,0x71,0x2d,0xec,0x9f,0x3b,0xa5,0xfe,0x93,0x59,0xd3,0x85,0xb4,0xbd,0xc8,0xd9,
    0x5e,0x92,0xaf,0x1e,0x27,0x5f,0x5d,0x93,0xdb,0x75,0xcc,0xc5,0x72,0xbb,0x3b,0x5f,
    0x07,0x38,0xf9,0x7e,0x8e,0x65,0x72,0x07,0xd7,0xa6,0xc9,0xb3,0x5d,0x6e,0x2a,0x77,
    0x72,0x0d,0x9b,0xdc,0x95,0xaf,0x41,0xac,0x75,0x11,0xe7,0x55,0x6b,0xdd,0x23,0xff,
    0xbf,0x38,0xdf,0x17,0x31,0x67,0xb3,0x5f,0x52,0xee,0x67,0xd4,0xa6,0xba,0x17,0xd8,
    0xcf,0x4e,0xce,0xeb,0x12,0x67,0xdb,0xcd,0x78,0x26,0x2f,0xcd,0x57,0x6f,0x27,0x2f,
    0xe3,0x7e,0xb3,0x58,0xcb,0x19,0xab,0x9b,0xb6,0xcb,0x9c,0xed,0x0a,0xae,0x3b,0xb3,
    0x7d,0x91,0xf3,0xda,0x42,0xdd,0x32,0xa7,0x7b,0x89,0xba,0x76,0xe6,0xe5,0xe3,0xac,
    0xe4,0x7c,0x9a,0xed,0xcb,0x2e,0xff,0x15,0xd4,0x9b,0xed,0x5f,0xf2,0xd5,0xc7,0xd9,
    0xae,0x72,0xf9,0x35,0x53,0x6f,0xba,0xd5,0x1c,0xaf,0x9b,0x71,0xbc,0xee,0x15,0xfa,
    0xb5,0x7c,0x89,0xee,0xaf,0xcc,0xd5,0xc6,0x5f,0xea,0x74,0x6b,0x6a,0x6a,0xf4,0xba,
    0x57,0x5d,0x8d,0xb5,0xba,0xb5,0xce,0xaf,0xbb,0x46,0xf7,0x37,0xe6,0xd2,0xee,0x74,
    0x56,0xef,0x3a,0xee,0x3b,0xb3,0x5d,0x4f,0xac,0x95,0x3e,0x3e,0xce,0xdf,0x5d,0x7f,
    0x57,0xb0,0x1f,0xa6,0xdb,0xe0,0xea,0xed,0xde,0xa6,0xeb,0x5f,0xae,0xa7,0xd7,0xb8,
    0x66,0x96,0x73,0x0e,0x5f,0xe2,0x1c,0xac,0x62,0x0f,0x5f,0x61,0x4f,0xd6,0xb0,0xc6,
    0xb5,0xcc,0x79,0x3d,0xc7,0xdc,0x40,0x5e,0x78,0x93,0xeb,0x61,0x71,0xb9,0xde,0xa5,
    0x78,0x2f,0xdf,0xf7,0xca,0xab,0xcb,0xf8,0xf8,0xab,0x2e,0xf5,0xdd,0xc2,0x75,0xf8,
    0x29,0x39,0x48,0xe5,0xcf,0x88,0xa9,0xfe,0x73,0xfe,0xed,0xd7,0x6e,0xc8,0x04,0x31,
    0xa5,0xa7,0xa7,0xc7,0xe4,0xfa,0x80,0xbd,0x69,0x72,0x43,0xc0,0x3e,0xde,0x35,0xef,
    0xd6,0x7e,0x01,0x1c,0xab,0x3a,0xfd,0x7b,0x2f,0x25,0x97,0xe2,0x1f,0x47,0x9b,0x3c,
    0xb8,0x94,0x8b,0x31,0xb6,0xc7,0xbf,0x11,0x50,0x8b,0xc9,0xe3,0x42,0xb5,0x47,0x55,
    0xbe,0x2c,0x54,0x7c,0x7b,0x7b,0xfe,0xfb,0x3d,0x72,0x44,0x53,0xce,0xf2,0xe9,0x80,
    0xf5,0x5c,0x57,0x6c,0xff,0x2f,0xf0,0xbe,0x7b,0xce,0x67,0x7e,0x16,0x9e,0x0e,0xa8,
    0xed,0x19,0x2a,0x14,0x1b,0x45,0x79,0x01,0x31,0x8d,0xf7,0x19,0xe3,0x85,0x9a,0x38,
    0x52,0xf6,0x97,0xfd,0x21,0xf8,0x19,0x63,0xa8,0xbc,0x95,0x98,0xe6,0xd8,0x47,0x90,
    0x6f,0x74,0x35,0xec,0x28,0x38,0xd3,0xf7,0xcf,0x1a,0x3d,0x1b,0xf4,0x2c,0x53,0x6c,
    0x3c,0xf9,0xd7,0xfa,0x38,0x38,0x63,0x07,0x96,0x76,0x75,0x65,0x4f,0xae,0x4d,0x58,
    0x3f,0xcd,0x0e,0xbb,0x2e,0x61,0x7d,0xb5,0x39,0x6c,0x4a,0xc2,0x7a,0x6c,0x77,0xbc,
    0x7b,0x7d,0x02,0xbf,0xfa,0x2b,0xe4,0xac,0x54,0x77,0x6f,0xc2,0xdf,0x9a,0xdb,0xdc,
    0x72,0x8c,0xba,0xb2,0x46,0x3e,0xea,0x94,0xb9,0x6f,0xce,0x48,0x1d,0xd7,0x88,0xae,
    0xb7,0x61,0x11,0xf3,0x64,0xf2,0x03,0x52,0xc9,0x7a,0x4e,0xae,0x0a,0xdb,0xcb,0xeb,
    0x29,0x7f,0x9c,0xa3,0x0d,0x13,0xc4,0xdd,0x92,0xff,0xd6,0xb3,0x60,0x3f,0x41,0x7c,
    0xbd,0x8f,0xe6,0x39,0x3a,0x42,0x70,0x56,0x9e,0x92,0xbd,0xf4,0xbc,0x6d,0x16,0x60,
    0x23,0xa4,0x9a,0x8b,0x6b,0x78,0xa6,0x1f,0x26,0xd0,0xdf,0xc8,0xfa,0x8f,0x10,0x60,
    0xda,0xaf,0x63,0x32,0xa6,0xe7,0xe6,0x48,0xc1,0xd9,0xaa,0xe3,0x8d,0xb6,0xb3,0x55,
    0x80,0x2f,0xc9,0x36,0x2a,0x1f,0x29,0xc0,0xc6,0x30,0xb6,0xce,0xc1,0x68,0x01,0xbe,
    0x9c,0x36,0x47,0xd3,0xe6,0x78,0x67,0x73,0x8c,0x00,0x57,0x1b,0x95,0x8f,0x13,0xf8,
    0x29,0x57,0xdc,0x48,0xec,0x3b,0x02,0x0e,0x50,0x5d,0x1b,0xb1,0x13,0x04,0xb9,0xea,
    0xbf,0x29,0xc4,0xc6,0x0a,0x70,0xb5,0x3f,0x2d,0x23,0x5a,0xcf,0x59,0x09,0xb8,0xd9,
    0xda,0x38,0xad,0x1c,0xa7,0xcd,0x8d,0x73,0x22,0xe5,0x56,0x37,0xce,0xc9,0xf4,0x0d,
    0x6e,0x9c,0x71,0x02,0xfc,0x44,0x37,0x4e,0x7b,0x02,0x7e,0x56,0x82,0xad,0x8d,0xd3,
    0x26,0xa8,0xb1,0xbd,0xe4,0x2b,0x60,0xa7,0x13,0xd3,0xb1,0x4e,0x65,0xdf,0xcf,0x10,
    0xd8,0xaa,0x6e,0x0a,0xb1,0x33,0x05,0x71,0x55,0xa7,0x73,0xa1,0x7c,0x72,0x4b,0x00,
    0xc7,0xb4,0x73,0x2e,0x34,0xde,0xad,0x01,0xb8,0xd9,0xdc,0x46,0x9b,0x16,0x67,0xf3,
    0xeb,0x00,0xdc,0xc6,0x9b,0x1a,0xe0,0xa7,0x78,0x57,0xc6,0x94,0x0f,0xee,0x08,0x18,
    0x53,0x75,0x0f,0x64,0x3f,0xe5,0x87,0x3b,0x89,0xeb,0xda,0xbb,0x8b,0x7b,0xf3,0xd3,
    0xac,0x53,0x7c,0x5a,0xbe,0x14,0xd3,0xf5,0xa7,0x7f,0x7f,0x92,0xef,0xc3,0xb8,0x1e,
    0x15,0x7f,0x81,0x63,0xfd,0x86,0x71,0x75,0xbf,0x2d,0x27,0xf6,0x00,0xb1,0x29,0xa9,
    0xea,0xf5,0xf4,0x00,0xbc,0x70,0x73,0xf2,0x50,0x40,0x1d,0xaa,0x33,0xbb,0xdf,0xd1,
    0xce,0xcf,0xc9,0xc3,0x01,0xb6,0xaa,0x33,0xdf,0xd9,0xf4,0x55,0xcc,0xec,0x1e,0x0d,
    0xc0,0xa7,0x87,0x6a,0x3e,0x1e,0x67,0x2f,0xda,0xdc,0x1c,0x3d,0xc5,0xde,0xf8,0xf5,
    0x31,0x37,0xc0,0x56,0x75,0xda,0x57,0xe5,0xbe,0x3f,0x92,0xf7,0x6c,0xaf,0xfc,0x39,
    0x60,0xef,0x5d,0xed,0xf6,0xca,0xc2,0x00,0xdc,0xd6,0xfc,0xb3,0x01,0x98,0xc5,0x7d,
    0x2e,0x20,0xf6,0xb3,0xae,0xc6,0xe7,0x03,0xfa,0x16,0xdc,0xf8,0x8b,0x03,0xf0,0xc7,
    0x5d,0x3d,0x4b,0x02,0xfc,0x17,0x3b,0xdf,0x6e,0xfa,0xfa,0xbd,0xb1,0x34,0xc0,0x56,
    0x75,0x13,0x73,0x1e,0xca,0xe3,0xcb,0x98,0xff,0x84,0x6c,0xa3,0x5c,0xb6,0x9c,0xd8,
    0x52,0xc6,0xd2,0xdc,0x7f,0x20,0xc0,0x43,0xb9,0x56,0xc1,0x87,0x3f,0x11,0xe0,0xfe,
    0x5a,0xc2,0x18,0xe7,0x0b,0xf4,0x93,0xb9,0x07,0x14,0x9b,0x24,0xc0,0xaf,0x4f,0x55,
    0xdc,0xc9,0x02,0xbc,0x28,0xcf,0x76,0x60,0x17,0x0b,0xf0,0x8b,0x8a,0xca,0xee,0xa7,
    0xb4,0x0b,0xce,0xee,0x52,0x21,0x5e,0x3e,0x4b,0x00,0xfb,0x99,0xc0,0xff,0x52,0xa9,
    0x7c,0x2f,0xa7,0xaf,0x38,0xdf,0x2b,0x04,0xf8,0x85,0xce,0xf7,0xe7,0x02,0xff,0x2b,
    0x9c,0xef,0x2f,0xe8,0x1b,0x9d,0xef,0x55,0x02,0x7c,0x94,0xf3,0xbd,0x5a,0xe0,0x7f,
    0x95,0xf3,0xfd,0x11,0x7b,0x56,0xb8,0x9e,0x5d,0x27,0xc0,0xfd,0x65,0x3d,0x9b,0x22,
    0xd0,0xfb,0x9e,0xfd,0x52,0x80,0xfb,0x9e,0xdd,0x24,0xc0,0x7d,0xcf,0x6e,0x16,0xe0,
    0xbe,0x67,0xb7,0xd0,0xce,0xf7,0xec,0x56,0x01,0xee,0x7b,0x76,0x9b,0xc0,0xff,0x56,
    0x97,0xfb,0x54,0xfa,0xfa,0x9e,0xdd,0x2e,0xc0,0x7d,0xcf,0xee,0x10,0xf8,0xdf,0xee,
    0x7c,0xa7,0xd1,0xd7,0xf7,0xec,0x2e,0x01,0xee,0x7b,0x76,0xb7,0xc0,0x5f,0x75,0xca,
    0x47,0x7a,0x46,0x9d,0x23,0xe8,0xa5,0xea,0x8e,0xca,0x11,0xf4,0x0c,0x3c,0x47,0xaa,
    0xb5,0x3f,0x83,0x1c,0xaa,0xfb,0xfc,0x06,0x62,0x33,0x05,0xef,0x31,0x33,0xc8,0x8f,
    0xfa,0x0e,0x30,0x4b,0x70,0x7e,0x8e,0x77,0xfb,0x6f,0xb6,0x00,0x5f,0x99,0xbd,0x54,
    0xfe,0xbd,0x00,0xbb,0x9f,0xcf,0x03,0xb6,0x2f,0x1f,0x11,0xe8,0xcc,0xef,0xb1,0x1a,
    0xbf,0x4e,0x01,0xd6,0x41,0x6e,0x35,0xbf,0x39,0x02,0x9d,0xf9,0x3d,0x51,0xe3,0xf7,
    0x07,0x01,0x36,0xbb,0xc6,0xaf,0x4b,0xa0,0xdb,0xc6,0x39,0x82,0x9a,0xf4,0x59,0xd8,
    0xea,0x99,0xcb,0x7a,0x9e,0x72,0xf1,0xe7,0x09,0x70,0x3b,0x63,0xe6,0xd3,0xaf,0xab,
    0xa8,0xc6,0x7c,0x46,0x60,0x37,0x9f,0xe7,0x8c,0x8d,0xb9,0x40,0xa0,0xb3,0x1e,0xfe,
    0x49,0xf0,0xac,0x34,0xc3,0xe5,0xb1,0x50,0x80,0xfb,0x3c,0x9e,0x65,0x1e,0x0b,0x5d,
    0x1e,0xcf,0x09,0x70,0xcb,0xe3,0x79,0xfa,0x75,0x15,0xd5,0x73,0xc1,0x22,0x81,0xdd,
    0xf3,0xee,0x39,0x60,0xb1,0x00,0x1f,0xef,0xf2,0x5a,0x22,0xc0,0x75,0xee,0xf5,0x79,
    0xe8,0xb5,0x72,0xec,0x5e,0xe5,0x77,0x82,0xa5,0x82,0x67,0x24,0xed,0xd7,0x02,0xa9,
    0xce,0xb4,0x65,0x02,0x9d,0xd5,0xb2,0x42,0x10,0xa7,0xb5,0x7c,0x57,0x03,0xf6,0xa2,
    0xc0,0x6e,0x85,0x5b,0x4b,0x2b,0x05,0x73,0xdd,0xec,0xf8,0xf1,0x65,0x01,0xae,0xf3,
    0x33,0x27,0x63,0x7a,0xf6,0xad,0x12,0xcc,0xed,0x3a,0x3e,0x7b,0xad,0x93,0xea,0xfc,
    0x53,0xdd,0xea,0x7c,0xad,0xe5,0x79,0xb7,0xda,0xc5,0x5f,0x23,0x18,0x77,0x8e,0xc3,
    0x5e,0x15,0xe0,0x3a,0xa6,0x9e,0x93,0xeb,0xe8,0xa7,0xfe,0x5e,0xd6,0xfb,0x47,0x99,
    0x33,0xd4,0xe7,0x86,0x04,0xbf,0xd5,0x8c,0xb7,0x56,0xaa,0x7c,0x37,0x08,0x72,0x56,
    0x1b,0x9b,0xb7,0xd7,0x05,0x78,0x7b,0x51,0x3d,0x0b,0xbc,0x21,0x78,0x16,0xe8,0x76,
    0xcf,0x02,0x6f,0x0a,0x70,0xab,0xf3,0x2d,0x01,0xa6,0x75,0x3e,0x96,0x2d,0xd4,0xe6,
    0x6d,0x01,0xae,0xef,0x2b,0x1e,0xdf,0x48,0x5c,0xdf,0x5b,0xf4,0x5d,0x65,0x87,0xa2,
    0xa1,0xc4,0xdf,0x25,0xdf,0x1c,0xc0,0x3c,0xd4,0x7f,0xa3,0xe3,0x86,0x7f,0x93,0x13,
    0xa3,0xe3,0xc4,0x8f,0x05,0xb8,0xbf,0x8c,0x13,0x37,0x0b,0xf4,0x9e,0x13,0xb7,0x08,
    0x70,0xcf,0x89,0x9f,0x0b,0x70,0xcf,0x89,0x5b,0x05,0xb8,0xe7,0x44,0x1d,0x78,0x4b,
    0x0d,0x27,0x86,0x08,0xdc,0x73,0xa2,0x44,0xf8,0xab,0xce,0x7c,0x13,0x7d,0x3d,0x27,
    0xd6,0x45,0xe0,0x9e,0x13,0x7b,0x45,0xf8,0xd7,0x39,0xdf,0x06,0xfa,0x7a,0x4e,0xec,
    0x1d,0x81,0x7b,0x4e,0xec,0x13,0xe1,0xdf,0xdb,0xf9,0x7e,0xc0,0x9e,0x89,0xeb,0xd9,
    0x4e,0x11,0xb8,0xbf,0xac,0x67,0xfd,0x22,0xf4,0xbe,0x67,0xfd,0x23,0x70,0xdf,0xb3,
    0x5d,0x22,0x70,0xdf,0xb3,0x5d,0x23,0x70,0xdf,0xb3,0xdd,0x68,0xe7,0x7b,0xd6,0x14,
    0x81,0xfb,0x9e,0x0d,0x8c,0xf0,0x6f,0x72,0xb9,0xef,0x41,0x5f,0xdf,0xb3,0x3d,0x23,
    0x70,0xdf,0xb3,0xbd,0x22,0xfc,0xf7,0x74,0xbe,0x83,0xe9,0xeb,0x7b,0x36,0x24,0x02,
    0xf7,0x3d,0x1b,0x1a,0xe1,0xaf,0x3a,0x3b,0x47,0x36,0x09,0x7a,0xa9,0x3a,0xe5,0x12,
    0x7d,0x77,0xda,0xe4,0xce,0x87,0x43,0x23,0xde,0xa7,0xfc,0xf9,0x30,0x22,0x02,0x37,
    0xee,0x6c,0x8e,0xc0,0x6a,0xcf,0x87,0xc3,0x22,0x74,0xe6,0x77,0x44,0x8d,0xdf,0xc8,
    0x08,0xac,0xf6,0x7c,0x18,0x15,0xa1,0x33,0xbf,0xd1,0x35,0x7e,0x47,0x45,0x60,0xb5,
    0xe7,0xc3,0x98,0x08,0x9d,0xe5,0x7e,0x2c,0x73,0xf7,0x67,0xc1,0x71,0x11,0xb8,0xc5,
    0x3a,0x21,0x02,0xab,0xe5,0xfd,0xb1,0x11,0x3a,0x8b,0x75,0x12,0x63,0x79,0x3e,0x3f,
    0x39,0x02,0x37,0xee,0x3e,0x35,0x02,0xf3,0xdc,0xdd,0x16,0x81,0x7b,0xee,0x3e,0x2d,
    0x02,0xd7,0x7e,0xeb,0xbb,0xad,0xe7,0xee,0xf1,0x11,0xef,0xbb,0x5a,0xcb,0xd8,0x58,
    0x71,0xd0,0x99,0x11,0x3a,0xe3,0xee,0xb3,0x22,0xe2,0x78,0xee,0xfe,0x5e,0x84,0x9d,
    0xea,0x8c,0x47,0xdb,0x23,0xe7,0xc1,0x71,0xf7,0xf7,0x23,0x70,0xcf,0xdd,0x3f,0x8c,
    0xe8,0xbb,0x71,0xf7,0x79,0xb1,0xe2,0x6e,0xd5,0x4d,0xc8,0xd7,0xc4,0x08,0xce,0x9d,
    0xe0,0xe2,0x9f,0x13,0x31,0xee,0x28,0x87,0x9d,0x1b,0x81,0x1b,0x77,0x9f,0x47,0x3f,
    0xf5,0xf7,0xb2,0xde,0x8d,0xbb,0x6f,0x4e,0xf0,0x9b,0xc0,0x78,0x6a,0x6b,0xf9,0x5e,
    0x10,0x91,0xf3,0xcd,0x8e,0xbb,0x27,0x45,0xe0,0xed,0x45,0xc5,0xa9,0x57,0xc6,0x8a,
    0x53,0x55,0x6f,0x9c,0x7a,0x0d,0xe7,0xeb,0xad,0x80,0xf7,0x99,0xb3,0x03,0xc6,0x7c,
    0x31,0x56,0xdf,0x79,0xdf,0xe5,0xb3,0xde,0x44,0xea,0x56,0x7e,0x89,0xce,0x7a,0x75,
    0x67,0x84,0xaf,0xda,0x68,0xaf,0xee,0x71,0xbd,0x52,0xdd,0xb4,0x7c,0xdd,0xc3,0x1a,
    0xa7,0xb9,0x39,0x5b,0x43,0x1f,0xf5,0xbd,0x84,0xdf,0xa4,0x5e,0x8d,0xc0,0xcd,0x66,
    0x5d,0xc4,0x78,0xde,0x66,0x7d,0x04,0x7e,0x4b,0xb6,0x51,0x79,0x43,0x04,0xa6,0xbe,
    0x37,0x11,0x7b,0x2d,0x02,0xd7,0x6f,0x5e,0xd7,0x13,0x7b,0x3d,0x02,0xd7,0xef,0x5e,
    0x93,0xd9,0x83,0x37,0x22,0xf0,0x6b,0xad,0x27,0x11,0x98,0xad,0xd7,0xb7,0x23,0x30,
    0xfd,0x36,0xf6,0x38,0xeb,0xfd,0x67,0xc4,0xfb,0x99,0xea,0xec,0x5c,0xfb,0x57,0x04,
    0xde,0xca,0x6f,0x95,0xd6,0xe3,0x8d,0x11,0xba,0x65,0x8c,0xf7,0x4e,0x84,0xdf,0x46,
    0xce,0xbd,0xf5,0xe5,0x1e,0xce,0x7d,0xf9,0xac,0x9d,0xc0,0x53,0xba,0x1e,0xde,0x61,
    0xff,0x9e,0xe4,0xd8,0xf7,0x46,0xcc,0xdb,0x38,0xbe,0x53,0x77,0xb8,0x5e,0xab,0xee,
    0xbe,0x7c,0x3d,0xc4,0x98,0xf7,0x71,0x0d,0x6a,0xcc,0xdf,0x72,0xfe,0xde,0xe2,0xbb,
    0x9f,0x62,0x0f,0x46,0xe0,0x93,0x1c,0x4f,0x4e,0x8f,0x18,0xff,0x41,0xe6,0xd7,0xc1,
    0x58,0x0f,0xd5,0xc8,0x1d,0x2e,0xdf,0xdb,0x12,0xfc,0xee,0x23,0xbf,0xaa,0xed,0xf9,
    0x01,0xba,0x87,0xdd,0xba,0x51,0x3b,0x1d,0xcb,0xfa,0x38,0xb3,0xa6,0x96,0x39,0xae,
    0x16,0xd5,0xcd,0xca,0x57,0x27,0xc7,0x9b,0xe5,0x6a,0x79,0xc4,0xd5,0x72,0x03,0xb1,
    0x47,0x23,0x70,0x5f,0xcb,0x63,0xac,0xe5,0x51,0xe6,0x3e,0x87,0xb1,0x3a,0x6b,0xe4,
    0x39,0xae,0x96,0xa9,0x09,0x7e,0xb3,0x58,0x4b,0xa7,0xab,0xe5,0x09,0x57,0xcb,0x54,
    0xd6,0xd2,0xc9,0x5a,0xba,0x6a,0x6a,0x59,0xe8,0x6a,0x51,0xdd,0x93,0xf9,0x5a,0xc8,
    0xf1,0x9e,0x74,0xeb,0x6b,0x2e,0x73,0x1c,0xef,0xf2,0x9e,0x17,0x81,0x77,0xb9,0xb3,
    0x6a,0x7e,0x44,0x2f,0xe7,0x31,0x77,0x8b,0xb5,0xd0,0xe5,0x7e,0x67,0x82,0x8d,0xd6,
    0x33,0x9f,0x63,0xda,0xb3,0xf5,0x73,0xdc,0x6b,0xfa,0xcc,0xb5,0xed,0x79,0x9b,0x7b,
    0x4f,0xb1,0x6e,0x62,0x8b,0x22,0xf0,0x66,0x8e,0x5d,0x7e,0x37,0x88,0xf0,0x57,0x9d,
    0xad,0xeb,0x25,0x11,0xb8,0xe5,0xd7,0x1d,0x81,0x69,0x0e,0x76,0x96,0x2e,0x8b,0xc0,
    0xf5,0xbb,0xe6,0x29,0x45,0xef,0xf2,0x79,0xe2,0x9d,0x80,0x6f,0x9e,0xaa,0x4b,0xfc,
    0x96,0x58,0xc7,0x9e,0x1a,0x0f,0x1d,0x9e,0xaa,0x3e,0x5f,0x19,0xb7,0xe7,0xa1,0x91,
    0x5f,0xa2,0x33,0x1e,0xda,0x1a,0xe1,0xab,0x36,0x3a,0x07,0x29,0x55,0x73,0xa0,0xba,
    0x1e,0x1d,0x33,0xa1,0x6f,0x3d,0x8e,0x63,0x8e,0xa1,0xcf,0xe1,0xa9,0xe2,0x98,0x63,
    0x13,0x70,0xb3,0x39,0x3e,0x61,0x3c,0x6f,0x73,0x42,0x02,0x6e,0x3c,0xd4,0x92,0x80,
    0xa9,0xaf,0xf1,0xd0,0x77,0x13,0x70,0xcf,0x43,0xad,0x09,0xb8,0xe7,0xa1,0x13,0x13,
    0x70,0xe3,0xa1,0x93,0x13,0x30,0x5b,0x27,0xe3,0x12,0x30,0xcf,0x43,0xa7,0x26,0xf0,
    0x90,0xea,0x8c,0x87,0xda,0x12,0xf0,0x5a,0x1e,0x3a,0x2d,0x41,0x67,0x3c,0x74,0x46,
    0x82,0x9f,0xe2,0xba,0x9e,0xac,0x2f,0x7a,0xb7,0xf5,0xf4,0x20,0x79,0x48,0xd7,0x98,
    0xda,0xf7,0x90,0xdf,0xfb,0xa6,0xed,0x39,0xa7,0x3e,0xcb,0x3b,0xd2,0x5f,0xff,0xb6,
    0x7d,0xda,0x27,0x7d,0x91,0x73,0x1a,0x13,0x70,0xbf,0x4f,0x77,0x48,0x18,0xab,0x91,
    0xb9,0xf4,0x65,0xac,0x1d,0x6b,0xe4,0xbe,0x2e,0xb7,0xe9,0x09,0x7e,0xf5,0xcc,0x51,
    0x6d,0x6d,0x9f,0xf6,0x73,0x6b,0x64,0x3a,0xc7,0xd2,0xbc,0x07,0xa6,0xed,0xf9,0xa5,
    0x7f,0x96,0x9b,0x18,0xbb,0xbf,0xcb,0x7b,0xd7,0xf4,0x45,0x7e,0x19,0x90,0x80,0xfb,
    0xbc,0x77,0x63,0xde,0x03,0x98,0xe7,0x40,0xc6,0x6a,0xaa,0x91,0x07,0xba,0xbc,0x3b,
    0x12,0xfc,0xfa,0x33,0xef,0x26,0x97,0xf7,0x1e,0x2e,0xef,0x0e,0x97,0xf7,0xb0,0xb4,
    0x3d,0x97,0x0c,0xca,0xf2,0x30,0xc6,0x1e,0xe4,0xd6,0xc8,0x10,0xe6,0xe3,0xb9,0x64,
    0x68,0x02,0xee,0xb9,0x64,0x9f,0x84,0x1e,0x0d,0x75,0xbe,0xdf,0xa4,0xaf,0xfe,0xc6,
    0x63,0xcf,0x6f,0xfb,0x26,0xe0,0xad,0xce,0xf7,0x5b,0x09,0x79,0xee,0xcb,0x1a,0x2d,
    0x8f,0x61,0xae,0xc6,0x99,0xb4,0xd1,0xba,0xd5,0x7e,0x90,0xd3,0xcd,0xe0,0xd8,0xaa,
    0xdb,0x87,0x3a,0xe3,0xa3,0xfd,0xb9,0x0f,0x3d,0x47,0x0d,0xe7,0xbe,0xf4,0x1c,0x75,
    0x60,0x02,0xee,0x39,0xea,0xa0,0x04,0x7f,0xd5,0xd9,0x9a,0x3f,0x38,0x01,0xb7,0xdc,
    0xbf,0x9d,0x80,0xcd,0x70,0x1c,0x35,0x22,0x01,0x9f,0xe9,0x38,0xea,0xfd,0x00,0x9e,
    0x1a,0x91,0xaa,0xdf,0x3b,0x12,0x79,0xca,0xf8,0xfe,0x03,0x3e,0x3b,0xd9,0xf3,0xe1,
    0x26,0xf7,0x6d,0x5b,0x75,0x1f,0xea,0x7b,0x03,0xbf,0x6d,0x7f,0xe8,0xbe,0xad,0xff,
    0x87,0xdf,0xd6,0xd7,0xb9,0xf7,0xe9,0xff,0x06,0xe0,0xbf,0x62,0x2d,0x1f,0x05,0x60,
    0x2d,0xee,0x3d,0xfc,0x7f,0xf4,0x6b,0x75,0x7e,0x1f,0x07,0xe0,0xe6,0xb7,0x39,0x00,
    0x6b,0x71,0xbf,0x0b,0x7c,0x12,0x10,0x6f,0x73,0xa8,0x7e,0x17,0xd8,0xc2,0xef,0xbb,
    0x9f,0xf0,0x3b,0xb4,0xfe,0x7e,0xd6,0xc3,0xdf,0xce,0xec,0x1b,0x70,0x10,0xd8,0x15,
    0x45,0x85,0x45,0x62,0xc1,0xe5,0x55,0xcf,0xef,0x03,0x6d,0x2e,0xaf,0x06,0x01,0x6e,
    0xcf,0xab,0xbd,0x05,0xdf,0xa6,0x1b,0xca,0xef,0x75,0xbd,0xca,0xdf,0xe5,0x1a,0x05,
    0x63,0x68,0x4c,0xd5,0x9f,0x9b,0x7d,0x35,0x07,0xc5,0xdf,0xe7,0x6f,0x01,0xd6,0xbf,
    0x4d,0x35,0xbf,0x0d,0xe8,0xfd,0xf3,0x9c,0xc5,0xe1,0xf9,0xfa,0x3f,0x1e,0x8e,0xc2,
    0xc7,0x20,0x24,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     a >>= 3;
//     int minValue = kIsSigned != 0 ? - 128 : 0;
//     int maxValue = kIsSigned != 0 ? 127 : 255;
//     return clamp(a, minValue, maxValue);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//     uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//     if(pid == 5){
//         mask0 |=(indices & 0x1)<< 31;
//         mask1 |=(indices & 0x6)>> 1;
//     }
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
