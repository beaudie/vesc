// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xdd,0x6b,0x94,0x57,
    0x10,0xc6,0xcf,0xbb,0xbb,0xae,0xb1,0x15,0x1b,0xb1,0x9a,0x4d,0x69,0x93,0xb8,0x09,
    0xde,0x44,0x24,0x60,0x15,0x49,0xa9,0xc4,0x9b,0xac,0xa9,0xf1,0x22,0xc6,0x0b,0x51,
    0x53,0x53,0x2b,0xe8,0x5e,0x18,0x03,0x7a,0x9b,0xa2,0xf9,0x07,0x92,0xa6,0x85,0x22,
    0xd4,0x24,0xa6,0xbd,0x68,0x44,0xfc,0x02,0x51,0x10,0xfc,0x28,0x89,0x1a,0xff,0x80,
    0x5a,0x5a,0x11,0xac,0x94,0x5c,0x05,0xaf,0x8a,0x89,0x51,0xe2,0xcc,0xfb,0xfe,0xc6,
    0x8e,0x2f,0x1b,0x38,0x9c,0x9d,0x67,0xe6,0x79,0x66,0xce,0xcc,0x79,0x0f,0xc9,0x66,
    0x1a,0x97,0x87,0x6c,0x14,0x3e,0x08,0x55,0xe1,0x93,0x28,0xc4,0x7f,0xab,0x43,0x26,
    0xe8,0xcf,0x0f,0x43,0x3e,0xde,0x4b,0x9d,0xdd,0x9d,0x9b,0x4e,0x9e,0x3a,0xb2,0xe9,
    0xf3,0x2d,0x2d,0xea,0x5f,0x15,0xb2,0x71,0x9c,0xfa,0x3e,0x92,0x98,0x65,0xb2,0xe7,
    0x64,0x1d,0xff,0xa6,0xdc,0xa7,0xf8,0x41,0x59,0xd5,0x82,0xe7,0x62,0xad,0x10,0xda,
    0x88,0xd5,0xb5,0x53,0xa2,0x3f,0x4e,0xd2,0x84,0x46,0x76,0xc3,0x22,0xb0,0x9c,0xc3,
    0x32,0x60,0x55,0x0e,0xcb,0x82,0xad,0x74,0x58,0x0e,0xac,0x5a,0xeb,0x95,0x08,0xe3,
    0x96,0xc4,0x53,0x27,0x7b,0xfe,0x9d,0x6e,0x2e,0xd4,0x93,0xb7,0x00,0xbf,0x3e,0x55,
    0x8f,0xf2,0xeb,0x1d,0x7f,0xbd,0xec,0xc5,0x77,0xbe,0xc4,0x5e,0x4f,0xbd,0x6a,0xb7,
    0xa7,0xf4,0x4b,0x29,0xfd,0x52,0x05,0xfd,0x92,0xd3,0xef,0x48,0xe9,0x77,0xa0,0x6f,
    0xfe,0x83,0xf1,0x2c,0x42,0xf8,0x14,0x7b,0xe8,0xbd,0x7c,0xcb,0xc2,0x70,0x05,0xfd,
    0x61,0xc7,0x1f,0x49,0xe9,0x8f,0xa0,0x6f,0xf6,0x58,0x4a,0x6f,0xbc,0x82,0xde,0xb8,
    0xd3,0x9b,0x48,0xe9,0x4d,0xa0,0x97,0xc5,0x7e,0x48,0xbd,0xb5,0xb2,0xd6,0x08,0x2b,
    0x13,0xfb,0xb3,0xb1,0x5f,0x7f,0xaf,0x95,0x18,0xcd,0xd7,0x80,0x46,0x5d,0x58,0x1e,
    0xcf,0x2b,0x5f,0x61,0x35,0x48,0xec,0x5a,0xd9,0x57,0xc8,0xd2,0x98,0x2f,0xb0,0xd7,
    0x81,0xa9,0x56,0x0d,0x5a,0x3a,0x8f,0x66,0xec,0x02,0xb6,0xf2,0x6b,0x89,0x55,0xbd,
    0xcf,0xa4,0x0a,0xbb,0x0f,0x75,0xcc,0xb9,0x8e,0xb8,0x06,0xee,0x54,0x3d,0x79,0x1a,
    0x38,0xd7,0x4a,0xa7,0x6b,0xe7,0x36,0xbb,0x89,0x33,0x29,0x7f,0x03,0xb1,0x79,0xfc,
    0xc9,0x9e,0xf4,0xc5,0xe2,0x5b,0x9c,0xad,0xfe,0xcd,0xb2,0x96,0xe2,0xb3,0x65,0xc2,
    0x56,0x87,0xb7,0x2a,0xbe,0xf4,0x3f,0xaf,0x8d,0xf9,0x68,0xfd,0xed,0xae,0x7e,0xbd,
    0x47,0xed,0xe4,0xdf,0x49,0xfe,0x12,0xf5,0xab,0xdd,0xe1,0xea,0x57,0x4e,0x17,0xf5,
    0xd6,0x88,0xbd,0x1f,0x9d,0x2c,0xfc,0x03,0xf4,0x6c,0x3f,0xfc,0x03,0x7c,0xcb,0x91,
    0xe3,0xf7,0x70,0x7e,0x8d,0xff,0x1a,0x9f,0x3f,0xef,0x00,0x98,0xd6,0x39,0xe4,0xea,
    0xd4,0xfb,0x38,0x04,0xef,0x7b,0x6a,0x1a,0x26,0x8f,0xda,0x23,0x60,0xca,0x1b,0x73,
    0x3c,0xbd,0x77,0x63,0xf0,0xce,0x13,0x33,0x0e,0x4f,0xed,0x89,0xd4,0xf9,0xa6,0xe8,
    0x93,0xd9,0x0f,0xe8,0xdd,0x46,0xb1,0xf4,0x5c,0x0f,0xc1,0x06,0x58,0x16,0xb7,0x3a,
    0x4a,0xde,0x8e,0xad,0x72,0xff,0x33,0x68,0x04,0x7a,0x33,0x2f,0x88,0xbe,0x71,0x2f,
    0xc5,0x9a,0x01,0x5f,0x94,0xdf,0xda,0x8b,0x47,0xf8,0x75,0xdf,0x21,0x51,0x7a,0xd7,
    0xbe,0xe2,0x7e,0xea,0x5d,0xf9,0x12,0xfd,0x5d,0xe0,0x3b,0xc4,0xd2,0x7b,0xd2,0xc9,
    0x6c,0x8a,0xf8,0x2c,0x6e,0x37,0xbe,0xd3,0xa2,0xa5,0xf6,0x1e,0xfc,0x5d,0x8e,0xdb,
    0xed,0xb8,0x7b,0x1c,0x77,0x2f,0x3e,0xe3,0xee,0x03,0xdb,0x4d,0x6d,0x3a,0xaf,0x43,
    0xcc,0xb4,0xc7,0xf1,0x7a,0xc1,0x7f,0x87,0x77,0x18,0x5e,0xc1,0x69,0x7d,0x4b,0xdc,
    0xe1,0xb8,0xc7,0x09,0x76,0x04,0x5c,0xe3,0x2e,0x09,0xa6,0xf7,0xf7,0x28,0xf8,0x3e,
    0xfa,0x55,0xa6,0x5f,0xaf,0x24,0x97,0xfa,0x8e,0xc9,0x2a,0xd3,0x33,0xfd,0xbd,0x20,
    0xfb,0x0c,0x76,0xd9,0xe9,0xf4,0xa1,0xb3,0x17,0x9d,0x7e,0xa7,0xa3,0xbe,0x13,0xb2,
    0xfa,0xe1,0x9d,0x70,0xbd,0xff,0x83,0xde,0x17,0xdc,0xf9,0x1e,0x83,0xdb,0x59,0xfe,
    0x44,0xfb,0xb1,0x3b,0xf3,0x5f,0xe0,0x4d,0xae,0xcf,0x7f,0xf3,0xfd,0x17,0xf1,0x9b,
    0xde,0x13,0x7c,0x0f,0xe0,0x3e,0x85,0xdb,0xec,0x7a,0xf3,0x0c,0xbc,0xc5,0xe5,0xf8,
    0x07,0xee,0x33,0xc7,0x7d,0x0e,0xae,0xef,0xc0,0x05,0xce,0xfe,0x2f,0xf8,0x66,0xfa,
    0x33,0xcb,0x39,0x75,0x9f,0x14,0x96,0xf2,0x0a,0x51,0x12,0xd7,0x4a,0xac,0xe5,0x9d,
    0xc3,0xa7,0xf3,0x9d,0x06,0x7b,0xc1,0xbc,0xe7,0xd0,0xb3,0xbe,0xe9,0xfe,0x9f,0xbc,
    0xbd,0x1a,0xb3,0x0e,0x4e,0x99,0xf8,0x59,0xd7,0xaf,0xef,0xe8,0x97,0x7e,0x2f,0x57,
    0xa8,0xf1,0x34,0xb8,0xcd,0x79,0xd0,0xcd,0x47,0x7d,0x67,0x64,0x0d,0x92,0xe7,0x8c,
    0x9b,0xcf,0xcb,0x0a,0xf3,0x99,0x07,0xb7,0x7c,0x0b,0x68,0xcf,0xbb,0xde,0x2d,0x82,
    0xfb,0xf9,0xbc,0x76,0xf3,0x59,0x74,0x7a,0x6f,0xf0,0x59,0x8f,0x97,0xe0,0xfa,0xf9,
    0x64,0xa2,0x04,0xf7,0xf3,0x91,0x7f,0x83,0x62,0xae,0xfa,0x8c,0x9b,0x8b,0x12,0xdc,
    0xcf,0x27,0x1f,0x25,0xb8,0xcd,0xa7,0x2a,0x4a,0xce,0xa9,0xbb,0xcd,0xa7,0x36,0x4a,
    0xe2,0x5a,0xd1,0xb0,0xbc,0xab,0xa2,0xc4,0xa7,0xef,0x8d,0xcd,0xa7,0x3a,0x4a,0xfa,
    0xaf,0x3e,0xd5,0xb3,0xbe,0x0d,0xba,0xf9,0xd4,0x10,0xd3,0x4f,0xbc,0xe6,0xb2,0x9e,
    0xfe,0x40,0x4f,0x9b,0x5c,0x0f,0x7e,0x04,0xb7,0x9e,0xfe,0x04,0xd6,0xeb,0xfa,0x77,
    0x96,0x77,0xb7,0x88,0x7f,0xbb,0xcc,0xf1,0x2c,0xb9,0xec,0xac,0x3f,0xc3,0xe9,0x61,
    0xce,0xa3,0x6e,0xce,0xea,0x3b,0x27,0x6b,0x94,0x7a,0xcf,0xb9,0x39,0xff,0x42,0x4d,
    0x6d,0xae,0xa6,0x5f,0xc1,0xcd,0xfe,0x8d,0xb7,0xce,0xea,0x99,0xe4,0x3d,0x2f,0x12,
    0xab,0xf5,0x4c,0x12,0x67,0xe7,0xb8,0x88,0x6f,0xc0,0x61,0x97,0x79,0x23,0x07,0x9c,
    0xd6,0x15,0xf7,0x46,0x5e,0x76,0x39,0xaf,0xe2,0xb3,0xb8,0x6b,0x2e,0xe7,0x45,0x72,
    0x5e,0x23,0xce,0xf4,0xaf,0x93,0xb3,0xcb,0xdd,0xa9,0x1b,0xbc,0x4d,0x3e,0xe7,0x4d,
    0xa7,0x75,0x1d,0xad,0x9b,0xc4,0x9a,0xd6,0x2d,0xb4,0x9a,0x1d,0x76,0x9b,0xfa,0x9b,
    0x9d,0xd6,0x1d,0x57,0xff,0x6d,0x57,0xff,0x5d,0x7c,0x16,0x77,0xcf,0xe5,0xbc,0x45,
    0xce,0x7b,0xc4,0x99,0xfe,0x34,0x39,0xa7,0x1c,0xef,0xbe,0xe3,0x4d,0xc3,0xbb,0xcf,
    0x9c,0xf5,0x0e,0xda,0x4c,0x47,0x53,0x6f,0xf4,0x4c,0xfc,0x7d,0x45,0x61,0x9b,0xac,
    0xb7,0x1f,0x71,0x16,0x09,0x3c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(set = 0, binding = 2)readonly buffer srcIndirect
// {
//
//     uint srcIndirectBuf[];
// };
//
// layout(set = 0, binding = 3)buffer dstIndirect
// {
//
//     uint dstIndirectBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndirectOffsetDiv4;
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint dstIndirectBufOffsetDiv4;
// };
//
// uint PullIndex(uint index)
// {
//     uint srcIndex = index + srcIndexOffset;
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     if(value == 0xFF)
//         value = 0xFFFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint indexCount = srcIndirectBuf[srcIndirectOffsetDiv4];
//     uint firstIndex = srcIndirectBuf[srcIndirectOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
//     if(gl_GlobalInvocationID . x == 0)
//     {
//         dstIndirectBuf[dstIndirectBufOffsetDiv4]= srcIndirectBuf[srcIndirectOffsetDiv4];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 1]= srcIndirectBuf[srcIndirectOffsetDiv4 + 1];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 2]= firstIndex & 1;
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 3]= srcIndirectBuf[srcIndirectOffsetDiv4 + 3];
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 4]= 0;
//     }
//
// }
