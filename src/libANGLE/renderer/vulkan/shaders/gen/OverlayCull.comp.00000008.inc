// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xcb,0x6b,0x53,0x51,
    0x10,0xc6,0x4f,0x6e,0xd2,0xc6,0x07,0x68,0x4d,0x94,0xd0,0x36,0x6d,0xd5,0x40,0x37,
    0x96,0x22,0xf8,0x40,0x90,0xa0,0xdd,0x24,0x42,0x53,0xac,0x14,0x71,0xd1,0x2e,0xec,
    0x4b,0xcc,0xa2,0xd9,0xd8,0x82,0xc5,0x47,0x7d,0xc4,0xa2,0xa6,0xb8,0xae,0x55,0x6a,
    0x50,0x63,0x50,0x53,0xed,0x3f,0x27,0x3e,0x40,0x70,0xe6,0xdc,0xdf,0x8d,0x63,0xb0,
    0x70,0x38,0x39,0xdf,0xcc,0x7c,0xe7,0xfb,0x66,0x4e,0x6f,0x3c,0xc8,0x25,0x5d,0x3c,
    0xe6,0xf6,0xb9,0x3d,0x6e,0xd7,0x85,0x7f,0x87,0x5c,0xe0,0x62,0xec,0x79,0xf6,0x8b,
    0xb2,0xef,0x77,0xdd,0x1e,0x2f,0x96,0xa6,0x4a,0xa3,0xb7,0x96,0x17,0x46,0x4f,0x9f,
    0x39,0xa9,0xf9,0x07,0x5c,0xdc,0xd7,0x69,0xec,0xa0,0x4b,0xba,0x2e,0xd9,0x13,0xb2,
    0x96,0x66,0xcb,0x15,0xc5,0x53,0xb2,0x0a,0xb2,0x7a,0xa4,0x3e,0xe1,0xf9,0xf4,0x77,
    0x98,0xef,0xf9,0x04,0x4d,0x79,0x7e,0xe7,0xfa,0x39,0xeb,0xde,0x4d,0xde,0x25,0x61,
    0xcc,0xa2,0x2d,0xc7,0x5e,0x94,0x3b,0x15,0x0b,0xc8,0x1f,0x94,0xfd,0x78,0x3b,0x16,
    0x9e,0x8f,0x19,0xfe,0x02,0xfc,0x7d,0x9c,0x17,0x3b,0xf2,0x17,0xc9,0x8f,0xb8,0xf5,
    0xdc,0x4b,0xac,0x42,0xad,0x9e,0xd3,0x72,0x63,0xe0,0x73,0xe3,0xde,0xb5,0xfe,0x3e,
    0x22,0x39,0xaa,0xf5,0x28,0xf5,0x19,0x39,0x27,0xd1,0x1f,0x70,0xee,0xe1,0x1c,0xf7,
    0x79,0x09,0xdf,0x83,0x18,0xfe,0xce,0x73,0x4e,0x81,0x9d,0x80,0x2f,0x0d,0x9f,0xe6,
    0x1f,0x26,0xd6,0x0d,0x5f,0x86,0xdf,0x09,0x93,0xdf,0x87,0x86,0x2c,0xfd,0xcb,0x80,
    0x0d,0xd2,0xab,0x7e,0xb8,0x06,0xd0,0x95,0xe5,0xee,0x01,0x9f,0xf3,0xd7,0xcb,0x10,
    0x3c,0x91,0x96,0x21,0xe3,0x4d,0xeb,0x73,0x6d,0x5f,0x4e,0x74,0x05,0x6e,0x18,0x4d,
    0xa7,0x64,0x1f,0x26,0x16,0x69,0xba,0x80,0xe7,0xc8,0x63,0xa1,0xc3,0xe3,0x38,0x1e,
    0x46,0x64,0xc6,0xda,0xb3,0x12,0xd8,0xb8,0xc9,0xb9,0x46,0x9f,0xa2,0xf3,0x0c,0x1c,
    0xbd,0x6e,0xaf,0x9b,0xa7,0x0f,0x31,0xf7,0xef,0x5f,0x80,0x27,0xd5,0xbb,0x00,0x36,
    0x8f,0x0e,0x3d,0x2f,0x9a,0x59,0xdd,0x94,0x7d,0x88,0x9a,0x11,0x61,0xd3,0xbb,0x2a,
    0xdc,0x3b,0xc3,0x3a,0x2b,0xfa,0x02,0xb4,0x3a,0x3c,0xfd,0x10,0x44,0xdf,0x7a,0x9e,
    0xf9,0x16,0xf1,0x77,0x59,0x9c,0x24,0xfd,0xbb,0x0d,0xb1,0x22,0x35,0xaa,0xb1,0x8a,
    0xcf,0x09,0xe2,0xea,0xf7,0x01,0xd8,0x24,0xb8,0x62,0x63,0x82,0xe9,0xcc,0x97,0x79,
    0x17,0x69,0xee,0x51,0xaf,0x2b,0xe0,0x63,0x72,0xd2,0x59,0xdc,0x6e,0x7b,0x0d,0x63,
    0x79,0xde,0xc7,0x2a,0xb1,0x2b,0xc2,0xa5,0x75,0x77,0xc0,0x9c,0xc1,0xee,0x81,0xa9,
    0xb7,0x5d,0xc1,0x74,0x7e,0xf7,0xc9,0xd5,0xd8,0x77,0x71,0x5a,0xa5,0xe6,0x97,0xf0,
    0x6a,0x6c,0xcd,0xfb,0x08,0xfd,0xaf,0x19,0xbf,0x0f,0xe1,0x5a,0x35,0x7e,0x95,0x53,
    0xdf,0xc5,0x23,0xe2,0xea,0xf1,0x95,0xf0,0xe8,0x3d,0x8f,0xc1,0x7f,0x0a,0x4f,0xc4,
    0xa7,0xfb,0x37,0x61,0xd3,0xf8,0x13,0xb4,0x74,0x91,0xbb,0x86,0x9e,0x9a,0xd1,0xa3,
    0x39,0xeb,0xb2,0x6a,0xd4,0xaf,0x1b,0x3d,0x4f,0x8d,0x9e,0x80,0x99,0x7d,0x41,0xcf,
    0x33,0xe2,0x13,0x46,0xcf,0x73,0x70,0xd5,0x13,0xf1,0xd5,0x8c,0x9e,0x0d,0x34,0x55,
    0xc9,0xd5,0xbb,0xa6,0x62,0x5d,0xbe,0xd7,0x2f,0x78,0xeb,0x1b,0xa6,0xb7,0x57,0xc1,
    0x1d,0x33,0x56,0x6c,0x93,0x77,0xb5,0x62,0xe6,0xf7,0xd2,0xcc,0x6f,0xd3,0xcc,0x6f,
    0x8b,0x58,0xc4,0xf7,0x1a,0xcc,0xce,0x6f,0x1b,0xcc,0xce,0xef,0x0d,0xb9,0xdb,0xf4,
    0xab,0x61,0xfa,0xa5,0xb1,0xba,0xac,0x06,0xfe,0xea,0xa6,0x5f,0x6f,0xe1,0xda,0xfa,
    0xcf,0xfc,0xde,0x11,0xb7,0xf3,0x7b,0x0f,0xae,0xfd,0x8a,0xf8,0x1a,0xa6,0x5f,0x1f,
    0xd0,0x52,0x23,0xb7,0x8e,0x9e,0x96,0xd1,0xa3,0x39,0x4d,0x59,0x2d,0xea,0x9b,0x46,
    0xcf,0x47,0xa3,0xa7,0x73,0x7e,0x9f,0x88,0xdb,0xf9,0x7d,0x06,0x57,0x3d,0x11,0x5f,
    0xcb,0xe8,0xd9,0x41,0x53,0x83,0xdc,0xa6,0x99,0xdf,0x57,0xe6,0xb7,0x63,0x7a,0x3b,
    0x0d,0xee,0x3c,0x6f,0xd8,0xdb,0xeb,0xcc,0x2e,0x8d,0x97,0x39,0xe3,0x45,0x63,0xb3,
    0xb2,0xe6,0xb8,0x7b,0x96,0x59,0xea,0x77,0xe7,0x06,0xdf,0x9c,0xbb,0x7c,0x6f,0xca,
    0xfc,0xff,0x4f,0x8a,0x36,0xbd,0x7f,0x89,0xf7,0x32,0x0d,0x77,0xda,0x7f,0xaf,0x12,
    0xbe,0xae,0x4c,0x5c,0x7d,0x45,0xdc,0xba,0xff,0x96,0x09,0x9d,0x93,0xf5,0x07,0x1f,
    0x05,0xe3,0x7b,0xc4,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_ballot : require
//
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[16 + 16];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return subgroupBallot(intersects). xy;
//
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(4, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(4, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(16, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
