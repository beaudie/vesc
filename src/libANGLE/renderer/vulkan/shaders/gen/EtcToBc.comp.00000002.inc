// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x09,0x98,0x55,0xc5,
    0x95,0x7e,0xfd,0x5e,0xdf,0x7b,0xeb,0xde,0xd7,0x18,0xc1,0xa8,0x41,0x13,0x17,0x34,
    0x62,0x14,0x5c,0x92,0xa8,0x19,0x11,0x41,0xc5,0xa8,0x89,0x7e,0xe2,0x92,0x71,0x12,
    0x34,0x80,0x22,0x2a,0xd8,0x36,0x51,0x44,0x06,0x17,0x5a,0x25,0x31,0x8e,0x41,0x8d,
    0x5b,0x1c,0x09,0x4e,0x44,0x19,0xe9,0x88,0x02,0x89,0x2c,0x2a,0xb8,0x81,0x48,0x34,
    0x90,0xb8,0x64,0x24,0x71,0x07,0x64,0x53,0x50,0x59,0x02,0x88,0x62,0xee,0xff,0xfe,
    0xff,0xf4,0x3d,0x3c,0x9d,0xfe,0xbe,0xfb,0xf5,0xab,0xff,0x3f,0xe7,0xd4,0xa9,0x53,
    0x55,0xa7,0xaa,0xee,0x52,0x29,0xef,0x93,0x94,0x2a,0x0d,0xa5,0xac,0x14,0x4a,0x3b,
    0x35,0x95,0x6a,0x7f,0x1d,0x4b,0xe5,0x52,0x83,0xfe,0x1f,0xa4,0xff,0x3d,0xf5,0xff,
    0x18,0xfd,0x3f,0x2e,0xff,0x5f,0x2d,0xc5,0x35,0xb9,0x13,0x4e,0x3e,0xe3,0xe4,0x83,
    0x2e,0x1b,0x3e,0xe8,0xa0,0xef,0x1e,0x76,0x08,0xf4,0x77,0x28,0x55,0x6a,0x76,0xc0,
    0x7d,0x25,0xb7,0x1b,0xe5,0xff,0x1b,0xf3,0xab,0x79,0xe0,0x45,0x97,0x00,0x3f,0x2b,
    0xbf,0xfa,0xe7,0xd7,0xbb,0xb9,0xc0,0x8e,0xb9,0x8d,0xc6,0x9a,0xcd,0x52,0xa9,0xb7,
    0x74,0x6a,0x36,0x73,0xf4,0xac,0x5a,0x1d,0xa5,0xd2,0x6e,0x2a,0xf7,0x57,0x79,0xf7,
    0x5a,0xb9,0x52,0xd3,0x2f,0x89,0xc3,0x6f,0x70,0xdf,0xca,0xaf,0x13,0xf3,0x1a,0x2f,
    0x2c,0x93,0xdb,0x87,0xff,0xda,0xb1,0x06,0x61,0x8d,0x0e,0x2b,0x0b,0x0b,0x0e,0xab,
    0x08,0x6b,0x72,0x58,0xa3,0xb0,0x1d,0x1d,0x16,0x09,0xfb,0xaa,0xc3,0x62,0x61,0x5f,
    0x93,0x9f,0x56,0x47,0xad,0x4d,0xb9,0x42,0x97,0x52,0xe1,0x37,0xca,0x7b,0xbb,0xf2,
    0xb2,0x3a,0x7e,0x99,0xf8,0x06,0xd9,0x42,0xb9,0xb3,0xb8,0xf5,0x11,0xdb,0xdc,0x59,
    0xdc,0x9e,0x19,0xf5,0x76,0xca,0x6b,0x43,0x7d,0x7b,0xe7,0x18,0xda,0x81,0xdf,0x3b,
    0xe7,0xf2,0xf0,0x6b,0x2f,0xd9,0xda,0x35,0x2f,0x27,0x25,0xfa,0x6a,0x7c,0x55,0x7c,
    0xa9,0xf6,0xbf,0xb1,0xd6,0xf6,0x44,0x31,0x87,0x7c,0x47,0xfd,0x2e,0x8b,0xef,0x24,
    0xbe,0xa3,0xca,0xbb,0xaa,0x0c,0x9b,0xbb,0xe4,0x35,0x7f,0x43,0xf6,0xa0,0xbb,0x47,
    0xfe,0x1f,0xe5,0x8a,0xca,0xfb,0xc9,0x56,0x45,0xba,0xbd,0xa4,0x9b,0x88,0xef,0x2d,
    0xbe,0xb1,0x16,0xdb,0x72,0xe9,0x58,0xe1,0x7d,0x64,0xbf,0x51,0x7a,0xff,0xae,0xf6,
    0xc0,0x5e,0x0f,0x95,0xcf,0x12,0x76,0xa0,0xda,0xdc,0x4f,0x7d,0x6b,0x7c,0x7f,0xc7,
    0xa3,0x8e,0x01,0xae,0xcd,0x03,0xc5,0x55,0x1d,0x3f,0x48,0xf5,0x59,0x79,0x48,0x6d,
    0x5c,0x17,0xf6,0x9b,0x1d,0x8f,0x72,0x4b,0x5d,0xfd,0x23,0x14,0x33,0xd3,0x1f,0x55,
    0xc7,0xb7,0x2a,0x0e,0xc6,0x8f,0x95,0xbf,0x56,0xbe,0x59,0x63,0xce,0xca,0xb7,0x68,
    0x6c,0x75,0xcb,0xa3,0x85,0x38,0xdd,0xaa,0x36,0x8c,0x95,0xec,0x2d,0x4e,0xf6,0xb6,
    0xfc,0xfa,0xdc,0x95,0xc7,0xd7,0xf9,0x32,0xc1,0xd5,0x0d,0x5f,0xa6,0xe7,0x57,0x77,
    0x57,0x9e,0xad,0xba,0xac,0xfc,0xac,0xc6,0xba,0x95,0x17,0x38,0xdf,0x50,0x5e,0x58,
    0xe2,0x9c,0xb0,0xf2,0xcb,0xf9,0xb5,0x67,0x7e,0x7d,0x3d,0x2f,0x2f,0xcd,0xff,0xf7,
    0x91,0x8f,0xc6,0x2f,0xab,0xe5,0x0b,0xb6,0x05,0xdc,0x7b,0x8a,0xd7,0x42,0xf5,0xdb,
    0x32,0x27,0xbb,0x5c,0x7d,0x6f,0xe5,0x15,0xf9,0x95,0xba,0xf2,0x4a,0xcd,0x57,0xb3,
    0xb5,0x4a,0xb6,0x96,0x4b,0x76,0xa5,0x93,0x5d,0xad,0xb1,0x66,0xb2,0xef,0xab,0xdf,
    0x9a,0xc5,0xad,0x74,0xdc,0x07,0xe2,0x5a,0xe5,0x97,0xb7,0xb3,0x46,0x63,0xc5,0x64,
    0xd7,0x3a,0xff,0x57,0x8b,0x37,0xd9,0x0f,0xf3,0x2b,0x73,0xb2,0x1f,0x39,0xff,0xfa,
    0x89,0x37,0xee,0x63,0xd5,0xb7,0x5c,0x76,0x3c,0xb7,0x4e,0x7a,0xcd,0x5f,0xc2,0xad,
    0x97,0xaf,0x56,0xff,0x0a,0xc7,0x6d,0xa8,0x6b,0xa3,0xe7,0x36,0xba,0x36,0xd6,0x73,
    0xff,0x74,0x7a,0xcb,0xeb,0xb8,0x4d,0xf2,0xa5,0xd5,0x71,0xd6,0xde,0xcd,0x9a,0x57,
    0x26,0xbb,0x45,0x58,0x8b,0x74,0xbc,0x9d,0x4f,0x5c,0x7c,0x57,0x2b,0x1e,0xc6,0x6d,
    0x75,0xed,0x5d,0xde,0xce,0xed,0x54,0x1b,0x4f,0x9f,0x6a,0xcc,0xac,0x52,0x1f,0x7e,
    0xa0,0x3e,0xf8,0x48,0x31,0x5c,0xa7,0x98,0x6c,0x50,0x1b,0xff,0x29,0x9f,0xb7,0xa8,
    0xce,0xad,0x9a,0xf7,0x9f,0x6b,0x3c,0x2c,0x75,0xfe,0x77,0x68,0x28,0xe6,0x0e,0x72,
    0xd7,0x01,0xb5,0xf5,0xa6,0x77,0x6f,0x2b,0x77,0xe3,0xfa,0xd3,0x0b,0x79,0xa9,0x57,
    0x03,0xc7,0x66,0xc5,0xc9,0x8f,0xd1,0xfa,0x64,0xe5,0x29,0xb5,0x72,0x6b,0x2f,0x2b,
    0xcf,0xaa,0x95,0x47,0xf7,0xb1,0xf2,0xec,0xbc,0x7c,0xc3,0x2e,0xff,0x7d,0xb4,0x95,
    0xe7,0xe4,0xe5,0x09,0xc7,0xef,0xd2,0x2e,0xff,0x64,0x5e,0xfe,0xdb,0xc8,0x55,0x3d,
    0xbb,0xe5,0x35,0x21,0x9f,0x3e,0xd5,0x40,0x1d,0xc8,0x81,0x33,0xb9,0x85,0xf9,0xef,
    0x96,0x4e,0x95,0x5e,0x3d,0x94,0xcf,0xb0,0x36,0x36,0x38,0x3f,0xb6,0xd5,0xea,0x7d,
    0xa7,0xb7,0xe5,0x80,0xc6,0x32,0xdb,0x6e,0xe5,0xee,0xe5,0x62,0x0e,0xa3,0xdc,0x57,
    0x6b,0xda,0x1e,0xf9,0x6c,0xb3,0xf5,0xed,0xff,0xbb,0x10,0xcb,0x8b,0xca,0x9c,0x97,
    0x90,0xed,0xa1,0xf2,0x10,0x61,0xe0,0x87,0xea,0x37,0xe4,0x0f,0xc8,0x23,0x86,0xdc,
    0x7e,0x5b,0x19,0x6b,0x37,0x7f,0xb7,0x95,0x8b,0xba,0x1f,0x2e,0x23,0x77,0x14,0xe5,
    0x47,0xca,0x45,0xfe,0x41,0x79,0x4a,0xd9,0xe6,0x7c,0x5c,0x5b,0x03,0xa6,0x96,0xa9,
    0x03,0xb9,0x29,0xe5,0xa2,0x2f,0x67,0x96,0xb7,0xcf,0xd9,0x4f,0x94,0xb9,0x6e,0x59,
    0x79,0x6e,0x99,0xfb,0x0a,0x2b,0x2f,0x2a,0x63,0x1d,0x2d,0xea,0x59,0x5b,0x2e,0xf2,
    0xd8,0x5e,0x15,0xfa,0x3e,0xd6,0xc9,0xef,0x5d,0x29,0xd5,0xd6,0x3f,0x2b,0x77,0xa9,
    0x70,0xed,0xb3,0xf2,0x3e,0x15,0xee,0x4d,0xac,0xbc,0x6f,0x85,0xfb,0x9d,0x6e,0xb9,
    0x75,0xd8,0xfb,0x66,0xa5,0x98,0x43,0x6b,0x94,0x57,0x61,0x13,0x76,0xa0,0xbb,0x6f,
    0x85,0xb1,0xeb,0x5a,0x61,0x5f,0x41,0x07,0x6d,0xc6,0xb8,0x1b,0x50,0xe1,0xbc,0xb2,
    0xcb,0xf0,0x81,0x15,0x8e,0x61,0xbb,0xac,0xee,0xff,0xad,0x70,0x77,0x66,0xe5,0xb6,
    0x0a,0x17,0x24,0x2b,0x63,0x31,0xeb,0xec,0x7c,0xcd,0xf2,0x72,0x27,0x57,0x3e,0x28,
    0x2f,0x77,0x50,0x2c,0xde,0x6c,0xa4,0x3f,0x63,0x6b,0xf5,0x46,0xb5,0xdf,0x6f,0x35,
    0x72,0xbe,0xf6,0x73,0xd8,0xdb,0x8d,0x9c,0xdb,0x4f,0xb8,0x3e,0x79,0xa7,0x91,0x7b,
    0x02,0x93,0x79,0xb7,0x91,0x39,0x01,0xb8,0xc9,0x2c,0x69,0xc4,0x18,0x29,0x64,0x96,
    0x36,0xb2,0xfe,0x25,0x4e,0x66,0x59,0xfe,0xfb,0x28,0x27,0xf3,0x5e,0x23,0x7d,0x5e,
    0xe6,0x64,0x96,0xe7,0xbf,0xfb,0x3a,0x99,0x15,0x8d,0x5c,0xdb,0x96,0x3b,0x99,0x95,
    0x8d,0xdc,0x6b,0x59,0x79,0x55,0x23,0xd7,0x7a,0xd3,0x59,0xdd,0x48,0x99,0x55,0x4e,
    0xe7,0xfd,0xfc,0xf7,0xc1,0x4e,0xe7,0x83,0xbc,0x3c,0xd3,0xe9,0xac,0x69,0xa4,0x0c,
    0x70,0xf4,0x35,0xe2,0xb5,0xb6,0x91,0x31,0x42,0x4c,0xd0,0x66,0xb4,0x09,0x3e,0xc3,
    0x27,0xd4,0x01,0x1d,0xf4,0xf5,0xc7,0x8a,0x2d,0x74,0x90,0x63,0xba,0xe7,0x93,0xf2,
    0x58,0xad,0xdf,0x9d,0xf3,0x19,0x74,0xa6,0xf6,0x7f,0x51,0x69,0xfb,0x3f,0xa5,0x9d,
    0x7c,0x3c,0x57,0x4a,0x3f,0xca,0x49,0xc8,0xd5,0xf6,0x4a,0x12,0x04,0xd6,0x43,0xe5,
    0xb3,0x84,0xc1,0xde,0x92,0xa8,0xd8,0xdf,0xf9,0xbf,0x72,0x6d,0xee,0xd3,0xc6,0x52,
    0xc9,0x2f,0x91,0x0d,0x94,0x97,0x45,0x45,0x9e,0x83,0xfe,0xba,0xc8,0xc6,0x36,0xe7,
    0x24,0xf6,0xa9,0xc0,0x46,0x69,0xef,0x63,0xb1,0x69,0xa9,0x72,0x8c,0xf8,0x71,0x32,
    0xac,0xca,0xb1,0x33,0xc2,0x61,0x3f,0xab,0x72,0x6e,0xb4,0xba,0x3d,0xcf,0xa5,0x55,
    0xee,0x6d,0xfc,0x65,0xe3,0xfe,0x32,0x27,0xdf,0xea,0xf0,0xe1,0xce,0xf6,0x08,0x87,
    0x5f,0x5e,0xe5,0xb8,0xb4,0xcb,0xf0,0x11,0x55,0xe6,0x0d,0xbb,0xac,0x3d,0x57,0x54,
    0x39,0xde,0xc7,0xb6,0x8f,0x7b,0xca,0x8f,0xac,0x72,0x8d,0xb2,0xab,0x21,0x8f,0x3f,
    0xf0,0xfb,0xab,0xec,0xbf,0x0e,0x4d,0xec,0xbf,0x8a,0x38,0xb4,0xa3,0x53,0x8e,0x1d,
    0x9e,0xb7,0xb3,0xac,0x3d,0x64,0x49,0xfc,0xe6,0x1c,0x89,0xb4,0x67,0xc5,0x1a,0xf4,
    0x7a,0xe0,0x58,0xe8,0xa1,0x7d,0x77,0x97,0xb8,0x28,0x23,0x27,0x1c,0x55,0x57,0x3e,
    0xc5,0x95,0x31,0x8e,0x06,0xb9,0x32,0xf6,0xda,0x43,0x23,0x96,0x37,0xe5,0xb5,0x6d,
    0x50,0xff,0x6d,0xcd,0x7f,0x63,0x1f,0xb9,0x31,0x62,0xfd,0xf8,0xdf,0x53,0x7b,0xf5,
    0x4f,0x23,0xee,0xab,0x4f,0xcd,0xb5,0x90,0x37,0x3f,0x8b,0x88,0x7d,0x1a,0x15,0x63,
    0xee,0x2a,0x9d,0x29,0xb6,0x45,0xe4,0xc7,0xa8,0xff,0x30,0x31,0x80,0xa1,0xbf,0x8f,
    0xc9,0xb1,0xda,0x1e,0x3b,0xe6,0x3e,0x1c,0xf5,0xf5,0xd4,0xb8,0x29,0xc7,0xc4,0x9f,
    0xcd,0x65,0x6a,0x67,0x83,0x98,0xd8,0x20,0xd9,0xae,0xed,0xfb,0x63,0xe2,0xcf,0x4b,
    0x26,0x91,0xcc,0x10,0x27,0x13,0x62,0xe2,0x90,0xa9,0xe5,0xaf,0x98,0x7a,0xd8,0x77,
    0x8c,0x11,0x56,0x8d,0xd9,0x47,0xe0,0x4e,0x13,0xd6,0xc1,0x16,0xb1,0xda,0xb8,0x21,
    0xb6,0x43,0x4c,0x1c,0xf2,0xa7,0xe7,0x08,0xda,0xf3,0x71,0x46,0xdc,0x64,0xad,0x9e,
    0x8e,0xaa,0x67,0x84,0xab,0xa7,0x93,0xca,0x1d,0x5d,0x3d,0x5f,0x95,0x6e,0x83,0xab,
    0x67,0xe7,0x98,0x78,0x27,0x57,0xcf,0x86,0x8c,0x38,0xea,0x6b,0x70,0xf5,0x7c,0x2d,
    0x66,0x1b,0x31,0xb6,0xe7,0x0a,0xdb,0x4d,0x18,0xea,0xea,0xab,0xb8,0xef,0x1e,0x53,
    0x76,0xb7,0x98,0xf5,0x00,0xfb,0x46,0x4c,0xbb,0xe0,0xd0,0x17,0x58,0x8b,0xf7,0x8f,
    0xb8,0x3e,0xb7,0xaa,0x2f,0x60,0xef,0x5b,0x11,0x71,0x93,0x39,0x40,0x32,0xcd,0x4e,
    0xe6,0xc0,0x88,0xb8,0xd5,0xd7,0x2d,0xa2,0x1e,0xf0,0x29,0x39,0x86,0x7c,0x75,0x50,
    0xc4,0x3a,0xc1,0xdd,0x93,0xeb,0x61,0xfc,0x1f,0x2c,0x1c,0x63,0xef,0x50,0x8d,0x9f,
    0x4f,0x72,0x0e,0xf8,0x21,0xf9,0x75,0xa8,0xc6,0x1f,0x7e,0x6f,0xc9,0xff,0x6f,0x50,
    0x19,0xf8,0x5c,0xd5,0x75,0xb8,0xec,0x22,0x5f,0x3c,0x2f,0xec,0x48,0x61,0xc8,0x17,
    0x16,0xeb,0x9e,0x11,0xf1,0x92,0xeb,0x93,0xa3,0x23,0xb5,0x23,0x2a,0xe4,0x7a,0x4b,
    0xce,0xf7,0xc9,0x31,0x11,0x65,0x7b,0x47,0x85,0xee,0xf1,0xd2,0x05,0x66,0x72,0x27,
    0x46,0xc4,0x7b,0x46,0x45,0x7f,0x9c,0xac,0x58,0x8c,0x70,0x7d,0x74,0x9a,0x62,0xe3,
    0xc7,0xc7,0xe9,0x11,0x65,0x4f,0xd3,0x5c,0x43,0x6e,0xfe,0x0f,0xe5,0x65,0x9b,0x2b,
    0x3f,0xd1,0xdc,0x1b,0xef,0xe6,0x4a,0xbf,0x88,0xb8,0x8d,0xf9,0xb3,0x23,0x62,0x66,
    0xf7,0x9c,0x88,0xb6,0xcf,0x76,0x6d,0xec,0x1f,0x31,0x6e,0x0d,0xae,0xfe,0x81,0x11,
    0xf1,0x93,0x5d,0x7b,0xce,0x8d,0xa8,0x3f,0xd0,0xe9,0x0e,0x92,0xae,0x9f,0x1b,0xe7,
    0x47,0x94,0x05,0x37,0x28,0xf7,0x03,0xeb,0xcc,0x60,0xf9,0xdf,0x3f,0x97,0x41,0x7e,
    0xbb,0x40,0x18,0x64,0x8f,0xce,0xfb,0x7b,0xa8,0xe2,0x6c,0xe3,0xea,0x82,0x98,0xe3,
    0x6a,0xa1,0x1b,0x57,0x17,0xc6,0xc4,0x7f,0x9f,0xcb,0x60,0xbc,0x5c,0x14,0x13,0xeb,
    0xa7,0x7c,0x35,0x32,0x2e,0xc6,0x0c,0xb8,0x21,0xf9,0x35,0x3c,0xe6,0x18,0x19,0xa2,
    0x79,0x86,0x18,0xdd,0x1b,0x58,0x7f,0x43,0x6d,0x4e,0x70,0xdd,0x98,0x14,0x88,0xfb,
    0xeb,0x59,0xf9,0xda,0x16,0xc8,0xdf,0xaa,0xb9,0x06,0x6c,0x72,0x20,0x7e,0x69,0xb5,
    0xb0,0xfb,0x48,0x20,0x8e,0xbf,0x79,0xc2,0xa6,0x04,0xe2,0x38,0x7b,0x9b,0xdc,0x34,
    0xc9,0x35,0x38,0xb9,0x3f,0x04,0xe2,0x38,0x03,0x3f,0x27,0xec,0x8f,0x81,0xfa,0xe0,
    0x4c,0x77,0xba,0x74,0xcb,0x4e,0x77,0x46,0x20,0x3e,0xd6,0xe9,0xce,0x0c,0xd4,0x9f,
    0xe1,0x74,0x1f,0x93,0x6e,0xc5,0xe9,0x3e,0x1e,0x88,0x0f,0x70,0xba,0x4f,0x04,0xea,
    0x3f,0xee,0x74,0xef,0x53,0xcc,0x4a,0x2e,0x66,0x4f,0x07,0xe2,0xfe,0xb2,0x98,0x3d,
    0x13,0xc8,0xfb,0x98,0xcd,0x0b,0xc4,0x7d,0xcc,0xe6,0x07,0xe2,0x3e,0x66,0xcf,0x07,
    0xe2,0x3e,0x66,0x7f,0x92,0x9c,0x8f,0xd9,0x0b,0x81,0xb8,0x8f,0xd9,0x8b,0x81,0xfa,
    0x2f,0x38,0xdf,0x17,0x4a,0xd7,0xc7,0x6c,0x51,0x20,0xee,0x63,0xf6,0x97,0x40,0xfd,
    0x45,0x4e,0xf7,0x25,0xe9,0xfa,0x98,0xbd,0x1c,0x88,0xfb,0x98,0xbd,0x12,0xa8,0x0f,
    0x0e,0x79,0x0f,0x6b,0xe1,0xfd,0x81,0xb1,0x04,0x87,0x31,0x8e,0xb5,0x19,0x98,0xcd,
    0xb1,0x77,0x02,0x73,0x2b,0xf2,0xc9,0x75,0xc2,0xde,0x0d,0xbc,0xd7,0x02,0x0e,0x73,
    0x01,0x67,0x98,0x25,0x81,0xeb,0xfa,0x28,0x37,0xcf,0x97,0x06,0xe2,0x2f,0xe6,0x5a,
    0x28,0x2f,0x0b,0xc4,0x66,0x6b,0xdf,0x64,0xf3,0xff,0xbd,0x40,0xce,0xf4,0x56,0xd4,
    0xe9,0xad,0x0c,0xc4,0x9e,0xd5,0xde,0xc4,0xf4,0x56,0x05,0x72,0xa6,0xf7,0x7e,0x9d,
    0xde,0x07,0x81,0xd8,0x82,0x3a,0xbd,0x35,0x81,0x9c,0xe5,0xb6,0x0f,0x03,0xdb,0x84,
    0x79,0x6c,0xed,0xf9,0x48,0xed,0xf9,0xd0,0xd9,0xff,0x38,0x10,0xb7,0xb5,0x6c,0xbd,
    0xf4,0x70,0x9f,0xc8,0xea,0xdc,0x10,0x28,0x07,0x6e,0x84,0xab,0x73,0x63,0x20,0x67,
    0x31,0xdc,0x14,0xb8,0xb7,0x7e,0xc7,0xf9,0xb1,0x25,0x10,0xf7,0x7e,0x7c,0x22,0x3f,
    0xb6,0x38,0x3f,0xb6,0x06,0xe2,0xe6,0xc7,0x67,0xd2,0x7b,0xb9,0x54,0xec,0x3f,0xb6,
    0x05,0xca,0x7d,0x16,0x8a,0xfd,0xc6,0xe7,0x81,0xf8,0x28,0xe7,0x17,0x0e,0xb3,0x9f,
    0xab,0xef,0xb1,0x4f,0xfb,0xb4,0x56,0x77,0x5c,0x3b,0x0f,0x56,0x52,0xee,0xdd,0x10,
    0xaf,0x8d,0xa1,0xc8,0x71,0x8d,0x29,0x39,0x6b,0x4b,0x9c,0xd2,0x0e,0xf6,0x28,0xf3,
    0x85,0x25,0x29,0xe5,0xc0,0xb5,0xef,0x5b,0x52,0xe2,0xab,0x42,0x91,0x87,0x9b,0x52,
    0xf6,0x3f,0xb8,0xa6,0x52,0xe0,0xbe,0x25,0xe5,0x1c,0xea,0x2e,0x7e,0xb3,0xee,0x67,
    0xd8,0x78,0xff,0x6a,0xca,0x79,0x5e,0x71,0xf3,0x7c,0x8f,0x94,0xb8,0xbf,0x6c,0x9e,
    0xef,0x99,0x92,0xf7,0xf3,0xbc,0x4b,0x4a,0xdc,0xcf,0xf3,0x7d,0x53,0xe2,0x7e,0x9e,
    0x7f,0x33,0x25,0xee,0xe7,0x79,0x57,0xc9,0xf9,0x79,0xbe,0x7f,0x4a,0xdc,0xcf,0xf3,
    0x6f,0xa5,0xd4,0x07,0x67,0xba,0x07,0x4a,0xd7,0xcf,0xf3,0x6e,0x29,0x71,0x3f,0xcf,
    0xbb,0xa7,0xd4,0xef,0xe6,0x74,0x0f,0x96,0xae,0x9f,0xe7,0x87,0xa4,0xc4,0xfd,0x3c,
    0x3f,0x34,0xa5,0xfe,0x21,0x4e,0x77,0x57,0xc5,0xac,0xec,0x62,0x76,0x78,0x4a,0xdc,
    0x5f,0x16,0xb3,0x23,0x52,0xf2,0x3e,0x66,0x47,0xa6,0xc4,0x7d,0xcc,0x8e,0x4a,0x89,
    0xfb,0x98,0xf5,0x4c,0x89,0xfb,0x98,0xf5,0x92,0x9c,0x8f,0x59,0xef,0x94,0xb8,0x8f,
    0xd9,0x31,0x29,0xf5,0x7b,0x3b,0xdf,0x8f,0x93,0xae,0x8f,0x59,0x9f,0x94,0xb8,0x8f,
    0xd9,0xf1,0x29,0xf5,0xfb,0x38,0xdd,0x13,0xa4,0xeb,0x63,0x76,0x62,0x4a,0xdc,0xc7,
    0xec,0xa4,0x94,0xfa,0xe0,0x2c,0x37,0x76,0x4e,0x19,0x4b,0x70,0xd8,0xcb,0x8d,0xd4,
    0x3a,0x3d,0xdc,0xad,0xd3,0xa7,0xa6,0x5f,0x5c,0xa7,0x7f,0x9c,0x12,0xf7,0x97,0xc5,
    0xf5,0x27,0x29,0x79,0x1f,0xd7,0x73,0x52,0xe2,0x3e,0xae,0xfd,0x53,0xe2,0x3e,0xae,
    0x03,0x52,0xe2,0x3e,0xae,0xe7,0x4a,0xce,0xc7,0xf5,0xbc,0x94,0xb8,0x8f,0xeb,0xa0,
    0x94,0xfa,0xe7,0xb9,0xd8,0x0c,0x96,0xae,0x8f,0xeb,0x05,0x29,0x71,0x1f,0xd7,0x0b,
    0x53,0xea,0x5f,0xe0,0x74,0x87,0x48,0xd7,0xc7,0x75,0x68,0x4a,0xdc,0xc7,0xf5,0xe2,
    0x94,0xfa,0x43,0x9d,0xee,0xe9,0xe9,0x17,0xd7,0xe9,0x9f,0xa5,0xc4,0xfd,0x65,0x31,
    0xbb,0x34,0x25,0xef,0x63,0x76,0x79,0x4a,0xdc,0xc7,0xec,0x8a,0x94,0xb8,0x8f,0xd9,
    0xc8,0x94,0xb8,0x8f,0xd9,0x28,0xc9,0xf9,0x98,0x5d,0x99,0x12,0xf7,0x31,0xbb,0x2a,
    0xa5,0xfe,0x95,0xce,0xf7,0x6b,0xa4,0xeb,0x63,0x36,0x3a,0x25,0xee,0x63,0xd6,0x9a,
    0x52,0x7f,0xb4,0xd3,0xbd,0x4e,0xba,0x3e,0x66,0xd7,0xa7,0xc4,0x7d,0xcc,0xc6,0xa4,
    0xd4,0xbf,0xde,0x8d,0xc5,0x33,0x53,0xc6,0x72,0x4c,0xdd,0x58,0xc4,0xff,0x8d,0x79,
    0x0c,0x91,0x37,0x1f,0xab,0x32,0x77,0x62,0x1f,0x89,0x7c,0x39,0x5c,0x1c,0xf4,0x47,
    0x55,0x39,0x9e,0xc1,0xc1,0x96,0x1f,0xc3,0xa3,0x62,0xf2,0x76,0x4e,0xab,0xc5,0x23,
    0x16,0xae,0xb5,0x08,0xeb,0xc1,0xd5,0x31,0xcf,0xde,0xe0,0x6c,0x2d,0xb8,0x26,0x26,
    0x6e,0x6b,0xd1,0xe8,0x98,0x98,0x3f,0x3b,0xb4,0xc6,0xc4,0x5b,0xb4,0xee,0xc0,0xfe,
    0xb5,0x31,0x71,0xdb,0x27,0x8f,0xd1,0x3e,0xb9,0x45,0xfb,0xe4,0x9b,0xdc,0x3e,0x19,
    0xdc,0xcf,0xf3,0xeb,0xbf,0xd4,0xe6,0x9f,0xbb,0x33,0xf4,0x2f,0xe5,0x27,0xce,0x17,
    0x66,0xeb,0xc6,0x98,0xf8,0x80,0x12,0x63,0x75,0x93,0xf4,0xa0,0xef,0xcb,0x37,0x29,
    0x3e,0xd0,0xb9,0xa6,0x4a,0x3d,0xd8,0xc6,0xfd,0x5c,0xc8,0x3e,0x24,0x7b,0x37,0xd7,
    0xf9,0x76,0x87,0xf3,0x0d,0xdc,0x2d,0xf9,0x75,0x87,0x6c,0xde,0xe2,0x7c,0xbb,0xed,
    0x4b,0x7c,0xbb,0x3d,0x26,0x6e,0xbe,0x99,0xde,0x1d,0xce,0x97,0x3b,0x63,0xd6,0x09,
    0xff,0x6e,0x97,0x7d,0xd4,0xfb,0xa3,0x50,0xd4,0x0b,0x99,0xbb,0xf2,0x6b,0xa2,0xf4,
    0xf1,0xfb,0xd4,0x7c,0xfd,0xc4,0xfd,0x8e,0xbb,0xd5,0x9f,0xd6,0xa7,0x76,0x8d,0x91,
    0x5f,0xf7,0xe8,0xbe,0x04,0xfa,0xa0,0xaf,0xee,0x0b,0x8d,0x8b,0x89,0xdb,0x85,0xb5,
    0x1d,0xf8,0x6f,0x63,0xde,0x97,0x1e,0xa7,0x7b,0x1b,0xc0,0xc6,0xc7,0xac,0x03,0xdc,
    0x55,0x7a,0x7e,0x70,0x6f,0x4c,0x1c,0x6d,0x47,0xf9,0xbe,0x98,0x18,0xee,0x43,0x8d,
    0x11,0xf6,0x40,0x4c,0x1c,0xf7,0xac,0xd0,0x76,0xb4,0x07,0xbe,0xa3,0x0d,0xb6,0x7f,
    0x9a,0xa4,0x98,0xcd,0xd5,0xb9,0xca,0xf6,0x29,0x6d,0x31,0x39,0x2b,0x4f,0x96,0xdc,
    0x0b,0x79,0x09,0xe5,0x87,0x63,0x62,0xb3,0x75,0xdf,0xcc,0xec,0x4d,0x95,0xdc,0xa2,
    0x3a,0x7b,0xd3,0x62,0x72,0xa6,0x3f,0x5d,0xfa,0x0b,0xea,0xf4,0x67,0x49,0x7f,0x4d,
    0x69,0x7b,0xfd,0xc7,0x62,0x72,0xa6,0x3f,0x47,0xfa,0xfd,0xda,0xef,0xdd,0x71,0xec,
    0x3f,0x1d,0xd3,0xf7,0x87,0xe3,0x02,0x9b,0x1b,0xb3,0xfe,0xe9,0x0e,0x9b,0x1f,0xd3,
    0xe6,0x9c,0xb8,0x98,0x23,0x0b,0x62,0xea,0x4f,0xd6,0xd8,0xf9,0x53,0x4c,0x0c,0xf7,
    0xf3,0x31,0x1e,0xce,0x74,0xe3,0x01,0xdc,0x0b,0xf9,0xb5,0x7f,0xc2,0x98,0xbe,0xe0,
    0x62,0xba,0x50,0x6d,0x98,0x5d,0xda,0x7e,0x4f,0xba,0x28,0x26,0x67,0x72,0x2f,0xb9,
    0xd8,0x7b,0xb9,0x97,0x63,0x72,0xf3,0xe4,0xeb,0x2b,0x31,0xb1,0x11,0xca,0x59,0xc0,
    0x5e,0x8d,0x69,0xef,0x15,0x67,0xef,0x35,0xd9,0xab,0xdf,0xb7,0x2f,0x8e,0xc9,0x99,
    0xdc,0xeb,0x92,0xab,0xdf,0xa7,0xbf,0x11,0x93,0x33,0xb9,0xb7,0x25,0xb7,0xb2,0x4e,
    0xee,0x9d,0x98,0x9c,0xc9,0x2d,0x95,0x5c,0xbf,0x3a,0xb9,0x65,0x31,0x39,0x93,0x5b,
    0x21,0xb9,0xe6,0x3a,0xb9,0x95,0x31,0x39,0x93,0x7b,0x5f,0x72,0x76,0xef,0xd5,0x72,
    0xf7,0x07,0x31,0xb9,0x16,0x97,0xbb,0x3f,0x8a,0x89,0x23,0x47,0x62,0x4f,0x8d,0x7b,
    0x9b,0x78,0x3e,0x62,0x39,0x74,0x5d,0xcc,0xfb,0x9d,0x1f,0xb9,0x1c,0xba,0x3e,0x26,
    0x6e,0xf9,0x78,0xa3,0xe6,0xaf,0xbf,0x5f,0xb1,0x29,0xe6,0x7d,0x5c,0x9c,0xc3,0x6c,
    0x8f,0xbf,0x39,0xa6,0xec,0x26,0x97,0x73,0xb6,0xc4,0xc4,0xc7,0xbb,0xf6,0x7c,0x12,
    0x13,0x6f,0x3f,0x1b,0x48,0x0f,0xb6,0xda,0xcf,0x06,0x31,0xf1,0xed,0xce,0x06,0x09,
    0x71,0xeb,0xe3,0x4a,0x42,0x5b,0xc0,0x31,0xfe,0x42,0x52,0x8c,0x3f,0xe4,0xcf,0x28,
    0x2f,0x07,0x8d,0x3f,0xfc,0xb6,0x9c,0x97,0x24,0xd4,0x1d,0xa1,0x9c,0x67,0x32,0xf8,
    0xdf,0x9e,0xf3,0xaa,0xcc,0xc1,0x18,0xb7,0x90,0xf7,0xfa,0x99,0xf4,0x37,0x2b,0xff,
    0x76,0x75,0xf5,0x82,0xab,0xe6,0xd7,0x4e,0xb2,0x89,0xdf,0x7d,0x75,0x4f,0xfb,0x2b,
    0x09,0xc7,0x25,0xc6,0x1b,0xc6,0x92,0xe5,0xa1,0x4e,0x09,0x39,0xcb,0x43,0x5d,0xa5,
    0x0b,0x1b,0x76,0xa6,0xd9,0x59,0xfe,0x56,0x9c,0xbd,0xce,0x09,0xc7,0x1a,0xc6,0xd1,
    0x4a,0x67,0x6f,0xf7,0x84,0xdc,0xe5,0xd5,0xe2,0xac,0xb3,0x47,0x42,0x1b,0xeb,0xe3,
    0x42,0x7f,0xcf,0x84,0xb8,0x5d,0xad,0xd2,0xdf,0x2b,0xa1,0x0d,0xf0,0x38,0x03,0x01,
    0xeb,0x92,0x14,0x67,0x20,0xf0,0x78,0x4e,0x86,0x67,0x62,0xde,0xdf,0xae,0x8a,0x1f,
    0xe4,0xa7,0x55,0xd9,0x2e,0xb4,0xbf,0x8b,0xe2,0x01,0xd9,0x33,0x95,0x63,0x91,0x17,
    0x2c,0xaf,0x1c,0x90,0x30,0x07,0x59,0x5e,0x39,0x30,0x21,0x66,0x79,0xe5,0x0c,0x97,
    0x57,0xc0,0x75,0xcb,0xaf,0x89,0xaa,0x13,0xbf,0x6d,0x5e,0x1c,0x9c,0x14,0xf9,0xc2,
    0xcf,0x9f,0x43,0x12,0x72,0x26,0xf7,0x9d,0xa4,0xc8,0x3f,0xad,0x4e,0xee,0xbb,0x09,
    0x39,0xcb,0x2b,0x87,0x25,0xc4,0x5a,0xdc,0x39,0xf6,0x7b,0xd2,0xc5,0x33,0x51,0x1b,
    0xab,0xff,0x96,0x08,0x77,0xb6,0x8e,0x4c,0x88,0xdb,0x58,0xed,0x91,0xd0,0xde,0x91,
    0xce,0x8f,0xa3,0x65,0x6b,0x66,0x79,0x7b,0x3f,0x7a,0x25,0xe4,0xac,0xce,0x63,0x25,
    0x77,0xb3,0xdb,0x0f,0x1d,0x97,0x10,0x1f,0xeb,0xf4,0xfa,0x24,0xc4,0xad,0xce,0xe3,
    0x13,0xda,0xea,0xe3,0xea,0x3c,0x31,0x29,0xd6,0x0f,0x1f,0xa3,0x93,0x12,0x72,0x26,
    0x77,0xb2,0xe4,0x56,0xd7,0xc9,0x9d,0x92,0x90,0x33,0xb9,0xbe,0x92,0x6b,0xad,0x93,
    0x3b,0x2d,0x21,0x67,0xfe,0x9e,0x29,0xb9,0x41,0x6e,0xdd,0xff,0x49,0xc2,0xbc,0x70,
    0xa5,0xd6,0x9d,0xda,0xbd,0xd8,0x84,0xb2,0xe0,0xda,0xef,0xbf,0x26,0xec,0x43,0x3c,
    0x6b,0x35,0xac,0x7f,0xc2,0x98,0xb6,0x55,0x8a,0x9c,0x34,0x20,0xa1,0x6c,0xff,0xc4,
    0xdd,0x7f,0x4d,0x88,0x1f,0xef,0xec,0x0d,0x4a,0xd8,0x5e,0x6f,0x6f,0x70,0xc2,0xb6,
    0x79,0x7b,0x17,0x24,0x94,0x1d,0xec,0xec,0x5d,0x94,0x10,0x47,0xfb,0xa6,0x68,0xbc,
    0x0e,0x49,0x58,0x0f,0xb8,0x36,0xc5,0x65,0x68,0x42,0x7c,0x94,0x9e,0xcb,0x58,0xfb,
    0x9a,0x13,0xb6,0x11,0x3c,0xf2,0xf1,0x29,0x75,0xf9,0xb8,0x25,0xe1,0xf3,0x26,0xc8,
    0x59,0x3e,0x1e,0x96,0x10,0xb7,0x7c,0x7c,0x69,0xf2,0xc5,0x7c,0x3c,0x3c,0xf9,0x62,
    0x3e,0xbe,0x3c,0xa1,0xec,0x70,0xd7,0x0f,0x23,0x12,0xe2,0x3e,0x1f,0x5f,0x91,0x10,
    0x37,0xbd,0x2b,0xa5,0xe7,0xf3,0xf1,0x55,0x09,0x71,0x3f,0xc6,0xaf,0x4e,0x88,0x63,
    0x8e,0x8e,0xa9,0xcb,0xbd,0xa3,0x11,0x6f,0xcd,0xd1,0xd1,0x2e,0x7e,0xd7,0x25,0xac,
    0xef,0x6a,0x97,0x4f,0xaf,0x4f,0x88,0x5b,0x3e,0x36,0xbd,0x31,0x2e,0x1f,0xdf,0xad,
    0x7c,0x8c,0xf9,0x0e,0x79,0xd8,0xb4,0xfd,0xf0,0x2f,0x64,0xd3,0xf2,0xf1,0xaf,0x9d,
    0x2f,0xe0,0x6e,0xc8,0xaf,0x5f,0xc9,0xe6,0x0d,0x2e,0x7f,0xde,0xa4,0x71,0x70,0x8a,
    0xfa,0x13,0x75,0xff,0x5a,0x72,0xbf,0x72,0x72,0xb7,0x6a,0xfc,0xf5,0xd0,0x38,0xf2,
    0x72,0xbf,0x76,0x39,0x6f,0x74,0x95,0x36,0x51,0xc7,0xad,0xaa,0xd3,0x72,0xf2,0x9d,
    0x09,0x79,0x9f,0x93,0x7f,0xa3,0x36,0x5f,0xed,0xf2,0xfc,0xdd,0xca,0x37,0xbf,0x71,
    0xe3,0x75,0x5c,0x42,0x7c,0x98,0xf3,0x69,0x7c,0x42,0xdc,0x2e,0xcb,0xdd,0xf7,0x26,
    0xac,0x6b,0xbc,0xcb,0xdd,0xbf,0x73,0xb9,0xfb,0xde,0xba,0xdc,0x7d,0x86,0xed,0x79,
    0x5d,0x3e,0x7e,0x30,0xe1,0xfe,0xcf,0xf2,0xf1,0xa4,0x84,0x98,0xe5,0xe3,0xd3,0x5d,
    0x3e,0x06,0xd7,0x86,0xb1,0x2a,0x3b,0x6d,0x2e,0x37,0x4c,0xd6,0x9c,0xc7,0xc3,0xd8,
    0xe5,0x6e,0xdc,0x3c,0x9c,0x90,0x6b,0xdf,0x13,0x4b,0x0e,0xcf,0x8b,0xbd,0xdc,0xb4,
    0x84,0x9c,0x8d,0xcb,0x47,0x25,0x87,0xf7,0x11,0x4c,0x66,0x7a,0x42,0xdc,0xce,0x7b,
    0x33,0x12,0x62,0x78,0xc7,0xc3,0xf2,0xe0,0xcc,0x84,0xb6,0x66,0xb8,0x3a,0x1f,0x77,
    0xf9,0xcd,0xe7,0xde,0x27,0x12,0x72,0x26,0xf7,0xa4,0xcb,0x97,0x7e,0x0f,0xfa,0x54,
    0x42,0xce,0xd6,0x8a,0xa7,0x13,0x62,0xad,0x6e,0x0f,0xfa,0x4c,0x42,0x7b,0x4f,0xbb,
    0x36,0xcc,0x73,0xf6,0xcc,0xd6,0x73,0x09,0x71,0x6b,0xc3,0xfc,0x84,0x58,0x17,0xd7,
    0x86,0xe7,0x13,0xda,0x9b,0x9f,0x14,0x7a,0x2f,0x26,0xcc,0x9d,0xe6,0xeb,0xa2,0xa4,
    0xd8,0x17,0xfa,0xb3,0xc1,0x5f,0x12,0x72,0xe6,0xeb,0x5f,0x13,0x62,0x2d,0xce,0xd7,
    0x97,0x12,0xda,0xfb,0xab,0xcb,0x33,0xaf,0xb8,0x3c,0x63,0x75,0xbc,0x9a,0x10,0x3f,
    0xa8,0xae,0x4f,0xff,0x96,0x90,0x33,0xb9,0xc5,0x92,0x43,0xdf,0xaf,0x76,0x72,0x7f,
    0x4f,0xc8,0x99,0xdc,0x1b,0x92,0xb3,0x77,0xf3,0x4c,0xee,0xcd,0x84,0x9c,0xc9,0xbd,
    0x23,0xb9,0x45,0x75,0x63,0xe4,0xdd,0x84,0x5c,0xfb,0x3d,0x7d,0xc9,0x6d,0x2e,0x6d,
    0x2f,0xf7,0x5e,0x42,0xce,0x62,0xb0,0x22,0xe1,0x38,0xf4,0xf7,0x05,0x56,0x09,0x6b,
    0x76,0x71,0x59,0x9d,0x50,0x76,0x95,0xd3,0xfd,0x20,0x61,0xbc,0xbc,0xee,0x5a,0x61,
    0x5e,0xf7,0xc3,0x84,0xb2,0x6b,0x9d,0xee,0xc7,0x09,0x63,0xe5,0x75,0xd7,0x0b,0xf3,
    0xba,0x1b,0x12,0xca,0xae,0x77,0xba,0xff,0x4c,0x38,0x96,0x5b,0x9c,0xee,0x66,0x61,
    0xcb,0x9d,0xee,0x96,0x84,0xb2,0x9b,0x9d,0xee,0xd6,0x84,0xb1,0xf7,0xba,0x9f,0x09,
    0xf3,0xba,0xdb,0x12,0xca,0x7e,0xe6,0x74,0xf1,0x02,0xed,0x9b,0x75,0xba,0x65,0x61,
    0x5e,0xb7,0x12,0x28,0x0b,0xce,0x74,0xa3,0xc0,0xb1,0xeb,0xdb,0x9b,0x08,0xf3,0xed,
    0x0d,0x81,0xb2,0x89,0xd3,0xcd,0x02,0xfb,0xd7,0xeb,0x36,0x09,0xf3,0xba,0x1d,0x02,
    0x65,0x9b,0x9c,0xee,0x57,0x02,0xfb,0xdc,0xeb,0x76,0x14,0xe6,0x75,0x3b,0x05,0xca,
    0x76,0x0c,0x45,0x6e,0xdd,0x25,0xb0,0xdf,0x11,0xc7,0xe0,0xf0,0xdd,0x02,0xfb,0x14,
    0x31,0xea,0xa0,0x67,0x27,0xc0,0xbf,0x1e,0xc8,0xed,0xe2,0x64,0xf7,0x0a,0xec,0x43,
    0xc4,0xa4,0x93,0x93,0xed,0x12,0xc8,0xed,0x12,0x8a,0x35,0x7f,0x9f,0xc0,0xfb,0x58,
    0x03,0xdc,0x73,0xdb,0x7d,0x03,0x71,0xb3,0xb7,0x5f,0x20,0x66,0x97,0xad,0x2b,0x5d,
    0x03,0xeb,0xdf,0xcf,0xd9,0xdb,0x5f,0xf6,0x46,0xf9,0x77,0x10,0x02,0x71,0xb3,0x77,
    0x60,0x20,0x66,0x97,0xd9,0xeb,0x16,0xe8,0xe3,0x81,0xa1,0x58,0x53,0x0e,0x09,0xac,
    0xa7,0x9b,0xc3,0xbe,0x1d,0x88,0xe3,0x3d,0xa0,0xb9,0xc2,0xbe,0x1b,0x88,0x0f,0xaf,
    0x16,0x72,0x87,0xa9,0xad,0xe0,0x6c,0x3d,0x3a,0x22,0x14,0xeb,0x11,0x78,0xbf,0x1e,
    0x9d,0xae,0x75,0xa4,0xa7,0xf3,0xf5,0x98,0xc0,0x7b,0x16,0xd3,0x74,0x4f,0xc2,0xe6,
    0xf4,0x71,0xa1,0xb8,0x67,0x04,0xb9,0x13,0x02,0xef,0x6b,0x4c,0xd7,0x7d,0x0b,0xc3,
    0x4f,0x0c,0x94,0xb5,0xcb,0xda,0x7a,0x52,0x20,0x77,0x82,0x6b,0xd7,0x0f,0x02,0xeb,
    0x3b,0x49,0x63,0x09,0xd8,0x29,0x81,0xf8,0x65,0xae,0xad,0x7d,0x85,0xa1,0xad,0xcf,
    0x09,0x3b,0x2d,0x50,0x16,0x9c,0x6f,0x0b,0xfe,0xdb,0x1e,0xe1,0x8f,0x55,0xb6,0x1f,
    0xeb,0x24,0xde,0x65,0xea,0xe9,0xb8,0x07,0xab,0xc4,0xc0,0xc1,0x16,0x38,0xec,0x27,
    0x6b,0x67,0xce,0x26,0xae,0xc3,0xb8,0x17,0x88,0x7d,0x90,0xe1,0x55,0x87,0xe3,0x5d,
    0x4f,0xbf,0xa6,0x9f,0xe1,0x6c,0xff,0xa1,0xca,0x7d,0x00,0xf6,0x2b,0xf0,0xc1,0xfb,
    0xf4,0x80,0xea,0x05,0xf7,0xa0,0xe3,0x60,0xff,0xae,0x2a,0xf7,0x5e,0xe0,0xe0,0x83,
    0xe7,0x7e,0x51,0x65,0xbd,0xe0,0xaa,0xe2,0xfc,0x19,0xef,0x4c,0x57,0xc7,0xd4,0x2a,
    0xcf,0x84,0x38,0x23,0xc2,0x17,0xef,0xdb,0x78,0xd5,0x0f,0xee,0x01,0xc7,0xd5,0xee,
    0x4f,0x56,0x79,0x16,0x07,0x77,0x57,0x1d,0x77,0xad,0xea,0x07,0xf7,0x0b,0x71,0xfe,
    0x3e,0xde,0x8f,0x5c,0x1d,0x93,0x55,0x07,0xee,0x4b,0xc2,0x17,0xef,0xdb,0x6f,0xab,
    0xbc,0x17,0x08,0x6e,0xbc,0xe3,0x6a,0xef,0xd2,0x6a,0xdf,0x09,0xee,0xf6,0x3a,0xae,
    0xb5,0xca,0x98,0x83,0xbb,0x56,0x1c,0xf6,0x47,0x37,0xba,0xfd,0x11,0x64,0xce,0xca,
    0xcb,0x37,0xca,0x27,0xfc,0xb6,0x7d,0x6b,0x3f,0x8d,0x5f,0xcc,0xfb,0x36,0xdd,0xb7,
    0x3b,0x3b,0x10,0x6f,0xd1,0xfb,0xa7,0xed,0x67,0x20,0x3d,0xf7,0x3e,0xdb,0x3d,0xb3,
    0xfd,0xa9,0x9e,0xcd,0x9e,0xe3,0x9e,0x31,0xf7,0x0f,0xdc,0x03,0xfc,0x54,0xf2,0xb6,
    0x96,0x0f,0x0c,0x5f,0x3c,0x33,0x9c,0x17,0xbe,0x78,0x66,0x18,0x14,0x28,0x7b,0x9e,
    0x7b,0x4e,0x7b,0x7e,0x20,0xee,0xcf,0x0c,0x83,0x03,0x71,0xd3,0x1b,0x22,0x3d,0x7f,
    0x66,0x18,0x1a,0x88,0xfb,0x33,0xc3,0xc5,0x81,0xb8,0xb5,0xe1,0x12,0xb5,0x75,0xb0,
    0x62,0x37,0xd2,0xc5,0x0e,0xb1,0x1f,0x96,0x97,0x47,0x2a,0x76,0xc3,0xdc,0x7b,0x00,
    0x97,0x05,0xea,0x5e,0xec,0x9e,0xdd,0x8e,0x08,0xb4,0x03,0xcc,0xce,0x16,0x57,0x04,
    0xe2,0x76,0xb6,0x30,0x5b,0x23,0x5d,0x3f,0xb6,0x55,0xd9,0xcf,0xe8,0x1b,0xc8,0x0f,
    0x0b,0xc5,0x33,0x8c,0x7b,0xaa,0xac,0x07,0xdc,0x65,0xe2,0x70,0x6e,0xc3,0x3b,0x80,
    0x78,0xf7,0xd4,0x9e,0x4d,0x5f,0x19,0xf8,0x5e,0x60,0x7f,0xd5,0x6f,0x79,0xf7,0xaa,
    0x40,0xce,0xfc,0xbe,0x26,0x10,0x83,0x5d,0xcb,0x4f,0xd7,0x06,0xe2,0x76,0x59,0x2e,
    0xba,0x2e,0x70,0x6c,0x5e,0xeb,0x72,0xe7,0xf5,0x2e,0x77,0x5e,0x57,0x97,0x3b,0x6d,
    0x8c,0xdd,0xe8,0xc6,0xf6,0x43,0x55,0x8e,0x7d,0xcc,0x85,0xeb,0x15,0x4b,0x6b,0xf7,
    0x24,0xb5,0x1b,0x1c,0x62,0x00,0xee,0x41,0x7b,0xc6,0x10,0xf8,0x0c,0x64,0x92,0xee,
    0x49,0xdd,0x2a,0xdb,0xb7,0x86,0x62,0xac,0x36,0x35,0x51,0x6e,0xb3,0x9e,0xf5,0xa0,
    0x3d,0x78,0x2f,0x73,0x07,0xe1,0x76,0xb5,0xd9,0xfd,0x2f,0x71,0xf0,0xf9,0x21,0xf7,
    0x5e,0xd9,0x6d,0x81,0x5c,0xa9,0x54,0x60,0x77,0x08,0x6b,0x70,0xd8,0x5d,0xc2,0xca,
    0xee,0xb9,0xcd,0x15,0x11,0xf5,0xad,0x3c,0x2a,0xa2,0xae,0x95,0xaf,0x8e,0xa8,0x67,
    0xcf,0x15,0xae,0x89,0xa8,0x03,0xb9,0xab,0xa3,0xe2,0x79,0xc1,0xb8,0x94,0xdc,0x39,
    0x0d,0x09,0x9f,0x29,0xa4,0xc5,0xf7,0x3c,0xc0,0x6f,0xd6,0xbc,0x01,0xf7,0x3f,0x29,
    0x79,0xbc,0xbb,0x6a,0xcf,0x20,0xee,0x4b,0x89,0xe3,0xbd,0x55,0xb3,0x39,0x21,0x25,
    0x6e,0x6b,0xff,0xfd,0x29,0xeb,0x99,0x90,0x16,0x6d,0x9a,0x98,0x12,0xf7,0xef,0xd4,
    0x4d,0x4a,0x89,0xe3,0x82,0x3f,0xb5,0xe7,0x0d,0xce,0x9f,0x49,0x7a,0x2e,0xd8,0xa2,
    0x6f,0x10,0x7e,0x9f,0x92,0x37,0x9b,0x8f,0xc8,0xa6,0x7f,0x37,0x6d,0x8a,0xec,0x3d,
    0xe2,0x6c,0x4e,0x75,0x36,0xa7,0xd4,0xd9,0x9c,0x96,0x92,0x37,0x9b,0xd3,0x65,0xb3,
    0xec,0x6c,0xce,0x90,0xcd,0xe9,0xce,0xe6,0x4c,0x67,0x73,0x46,0x9d,0xcd,0x59,0x29,
    0x79,0xd3,0x9f,0x23,0x7f,0xbc,0x4f,0x4f,0x3a,0xfd,0x39,0x75,0xfa,0x4f,0xa5,0xe4,
    0x4d,0x7f,0x9e,0x74,0x7d,0xfd,0xcf,0x39,0xfd,0x79,0x75,0xfa,0xf3,0x53,0xf2,0xa6,
    0xff,0xa2,0x74,0xbd,0xfe,0x9f,0x9d,0xfe,0x8b,0x75,0xfa,0x0b,0x53,0xf2,0xe7,0x6b,
    0x8c,0xfc,0xe5,0x4b,0xc6,0xc8,0xb9,0xe2,0x5e,0xfa,0x12,0xce,0x9e,0x61,0xbd,0x9c,
    0x52,0x17,0x32,0xc3,0xf4,0x3d,0xdf,0x2b,0x29,0x71,0xcc,0xb5,0x57,0x53,0xce,0x35,
    0xfc,0xc7,0x5c,0x05,0xff,0x5c,0x95,0x32,0x98,0x7f,0x49,0x3e,0x07,0x3e,0x15,0x07,
    0xbf,0xe6,0x55,0xf9,0x7d,0x0c,0xb8,0x75,0x69,0xc1,0xd5,0x9e,0xed,0x54,0x39,0x3f,
    0xc1,0x6d,0x13,0x37,0x4d,0x73,0xfc,0xb5,0x94,0x7c,0x73,0xed,0x5b,0x9e,0xc6,0xd2,
    0xe7,0xe2,0x2d,0xff,0x82,0x5f,0x8c,0xf7,0x71,0xe4,0xcf,0xe2,0x94,0xf3,0x08,0xfe,
    0xbc,0x91,0x72,0xdc,0x61,0x9c,0xa0,0x5f,0xef,0xc8,0x6d,0xc2,0x97,0xb7,0x52,0x72,
    0xcf,0x55,0x0b,0xd9,0x25,0x92,0x43,0xff,0xcd,0x77,0xb2,0xcb,0x52,0x72,0x5e,0x76,
    0xa5,0xec,0x41,0x6e,0xa1,0x93,0x5d,0x9d,0x92,0xf3,0xb2,0x6b,0x53,0xd6,0x07,0x3b,
    0xab,0x9d,0xec,0xc7,0x29,0xb9,0xb5,0xb5,0x77,0x78,0xe2,0x1a,0xb6,0x4e,0xf3,0x61,
    0x4f,0xf1,0x8f,0x2b,0x06,0x1b,0x52,0x72,0x88,0x1f,0xd6,0x9f,0xad,0xae,0xfd,0xe0,
    0x36,0xe6,0xd7,0x56,0xb5,0x1f,0xbf,0x7f,0xa9,0x3a,0x36,0xa5,0xfc,0x06,0x69,0x5d,
    0x6d,0x8c,0x44,0x35,0x7f,0x3e,0x51,0x9d,0x9b,0xd4,0x8f,0xa6,0xb7,0xd5,0xf5,0x23,
    0xfa,0x6e,0xad,0xe2,0xfa,0x89,0xec,0x43,0xf6,0x53,0xc9,0xe2,0xbf,0xad,0x67,0xdb,
    0xd4,0x3f,0x2d,0xa5,0xed,0xc7,0x05,0xfa,0x63,0x96,0xfc,0x6f,0xc8,0xd8,0xff,0xb3,
    0xe4,0xff,0x4e,0x59,0xe1,0x3f,0xb8,0x72,0x7e,0x55,0x32,0xea,0xe1,0x37,0xec,0xec,
    0xa4,0x32,0xf0,0xd3,0xd4,0x9e,0x28,0x63,0x6c,0x4b,0xa5,0x22,0x66,0xb1,0xde,0x95,
    0x6e,0x14,0x6f,0xb2,0x41,0xb2,0x0d,0x4e,0x36,0x75,0xb2,0xe0,0x9b,0x34,0x36,0x33,
    0xe1,0xfb,0xcb,0x5e,0xea,0xec,0x34,0xc9,0x4e,0xd9,0xd9,0xe9,0xe0,0xec,0x34,0x39,
    0x3b,0x3b,0x38,0x3b,0xb0,0x09,0x39,0xeb,0x8b,0x1d,0x33,0x7e,0xa7,0x05,0x19,0xeb,
    0x8b,0x4e,0xb2,0xbd,0x63,0x5d,0x9b,0xf1,0xdf,0xfa,0x62,0x7e,0x95,0xdf,0x7d,0x21,
    0x2e,0x9d,0x14,0x27,0x9b,0x8f,0x3b,0x67,0x9c,0xb7,0x36,0xa6,0x76,0xcd,0x88,0x41,
    0xe7,0xbc,0x06,0xfa,0xd4,0x39,0x2b,0xe6,0xf8,0xae,0x19,0xe7,0xf8,0x60,0x71,0xbb,
    0x7f,0x09,0xf7,0xa8,0xfa,0x6c,0x8f,0x8c,0x18,0xf4,0xed,0x1d,0x3a,0x7c,0x6f,0x8c,
    0x6f,0xcb,0xec,0xfe,0xf1,0x5e,0x19,0xe5,0x80,0x63,0x7f,0x88,0x9c,0x03,0x7c,0x6f,
    0x67,0x77,0xaf,0x3a,0xbb,0xfb,0xca,0x2e,0xea,0x36,0x3b,0xfb,0x65,0xc4,0xeb,0xed,
    0x74,0x75,0x76,0xf6,0x93,0x9d,0x1f,0x37,0x70,0x8d,0x3c,0x40,0x1c,0xda,0x8f,0xfa,
    0x0c,0xef,0xee,0xf0,0xae,0x59,0xb1,0xb7,0x3c,0x34,0xa3,0x4e,0xc9,0x3d,0x27,0xf9,
    0x76,0x46,0xbc,0xd5,0x3d,0x9f,0xfc,0x4e,0x46,0x7c,0x8d,0xdb,0x97,0x1e,0x26,0xdd,
    0x06,0xa7,0x7b,0x78,0x46,0xdc,0x3f,0xdb,0x3c,0x22,0x23,0xbe,0xd0,0x3d,0xdb,0xfc,
    0x5e,0x46,0x9b,0x47,0x38,0x5f,0x8e,0x94,0xbd,0xb2,0xb3,0xd7,0x23,0x23,0xde,0xea,
    0x74,0x8f,0xca,0xa8,0xdf,0xc3,0xe9,0xf6,0xce,0xd8,0x46,0xdf,0x8e,0x63,0x32,0xe2,
    0xbe,0x1d,0xc7,0x66,0xc4,0x7d,0x3b,0xfa,0x48,0xd7,0xb7,0xe3,0xf8,0x8c,0xb8,0x6f,
    0xc7,0xf7,0x33,0xe2,0xbe,0x1d,0x27,0x64,0xb4,0xf9,0x7d,0xe7,0xcb,0x49,0xb2,0xe7,
    0xdb,0xf1,0x83,0x8c,0xb8,0x6f,0xc7,0x0f,0x33,0xea,0x83,0xb3,0xfb,0xb5,0xb7,0x47,
    0x6c,0xdf,0x0f,0x35,0xf6,0xef,0xd4,0x3b,0xff,0xf8,0x6f,0xe3,0x62,0xc7,0xa6,0xed,
    0xe5,0x0c,0xef,0x28,0x1c,0x18,0x38,0x3b,0xab,0xfc,0x2e,0x22,0x07,0x3d,0xe4,0x99,
    0x09,0xee,0x5b,0x03,0x70,0xf7,0xe5,0xd7,0x74,0xd5,0x83,0xdf,0xb6,0x66,0x4e,0xd4,
    0xfe,0xcc,0xca,0x93,0xb4,0x3f,0xb3,0xf2,0x43,0x6e,0x7f,0x86,0x79,0x37,0x39,0xa2,
    0x0e,0xe4,0xc0,0xd9,0x7c,0x7c,0x24,0x62,0xbf,0x5a,0x79,0x6a,0xc4,0xf8,0x5c,0xaf,
    0xf9,0x7e,0x76,0x46,0x99,0xa9,0x6e,0xce,0xf6,0x17,0x06,0xce,0xb0,0x73,0x33,0xca,
    0x78,0xec,0xfc,0x8c,0xf5,0x9e,0x2d,0x7b,0xc0,0x2e,0xcc,0x88,0x9f,0xeb,0xb0,0xa1,
    0x19,0x6d,0x9e,0xeb,0x72,0xcf,0xc5,0x19,0x65,0xc1,0xfd,0x5c,0x58,0x73,0x46,0x1c,
    0xdf,0xb8,0x5e,0x2b,0xec,0x92,0x8c,0x38,0xbe,0x73,0xbd,0xc4,0xbe,0x6d,0xcf,0x88,
    0xdb,0x7b,0xa6,0xc3,0xb2,0x62,0x6f,0xdf,0x92,0x71,0xdd,0x6e,0x75,0x7b,0xdd,0x9f,
    0x65,0x94,0xb1,0xf3,0xd5,0x65,0x19,0xb1,0x51,0x6e,0x8c,0x5c,0x2e,0xcc,0xde,0x7d,
    0xad,0xbd,0x73,0x96,0x51,0x16,0x9c,0x8d,0xc3,0xff,0xcc,0x88,0xfb,0x77,0x05,0xae,
    0xcc,0x88,0x5f,0xae,0x71,0x33,0x41,0xfd,0x39,0x5d,0xdf,0x97,0xcc,0x72,0x7d,0x8e,
    0x73,0xc1,0xcc,0xbc,0x3c,0x4b,0x32,0xf8,0x6d,0x67,0xae,0x27,0x22,0x9e,0x0d,0x36,
    0x6b,0xdd,0x32,0x19,0xfc,0xb7,0xb3,0xc7,0xec,0x88,0x67,0x0b,0xd8,0x86,0xfc,0x4c,
    0x37,0x36,0xe7,0x44,0xe4,0x27,0x94,0x8a,0xf7,0x92,0xcc,0x97,0x09,0xb2,0x51,0x7b,
    0xbf,0xbd,0x4a,0x9f,0x31,0xde,0xe6,0xc8,0x17,0xdb,0xdb,0x3d,0xa3,0x6f,0x43,0xf0,
    0x3d,0x89,0xb5,0xf9,0xd9,0x88,0x3a,0xe0,0x2e,0x54,0x1e,0x9c,0x1b,0x15,0x79,0xf0,
    0x59,0xed,0xd3,0xda,0xdf,0xa9,0xd7,0x98,0x5f,0xe0,0x62,0xb4,0x20,0xe2,0x1c,0x00,
    0x87,0x6f,0x8b,0xf0,0xee,0xdf,0x45,0x55,0xe2,0x9d,0x74,0x36,0x31,0x7c,0x68,0x95,
    0xf6,0xc1,0x57,0x5c,0x3f,0x2e,0x8c,0xe8,0xd7,0x40,0xed,0x39,0x5f,0x72,0xb9,0xb8,
    0x76,0xa6,0xc2,0x39,0x5c,0xdc,0x2b,0x5f,0xc2,0xd9,0x9c,0xbc,0x33,0xa3,0x2e,0x64,
    0xd0,0x3f,0xe3,0xdc,0xda,0x0f,0xee,0xae,0xfc,0x1a,0xa7,0x75,0x0f,0xbf,0xed,0xcc,
    0xfd,0x0f,0xe9,0xbc,0x94,0x15,0xf3,0xf0,0xf5,0x8c,0xb8,0xc9,0xbc,0x95,0xb1,0x3e,
    0x2f,0xf3,0x76,0x46,0xdc,0xc6,0xfe,0xbb,0x19,0xb1,0xd7,0xdd,0xd8,0x5f,0x92,0x11,
    0xdf,0xe6,0xc6,0xfe,0xd2,0x8c,0x38,0xc6,0x7e,0xb3,0x62,0xb0,0x2c,0x23,0x7e,0x8d,
    0xca,0xcb,0x33,0x62,0x36,0xb6,0x57,0x64,0xc4,0xf0,0x3d,0xb5,0xe5,0xb5,0x55,0x19,
    0xef,0x41,0xac,0xc8,0x8a,0x33,0xe8,0xea,0x8c,0xb8,0xdd,0x2f,0xb1,0x18,0xbf,0x9f,
    0x91,0xb3,0x39,0xb0,0x26,0xa3,0xde,0xfb,0x1a,0xdb,0x16,0x97,0x71,0x59,0x31,0x9e,
    0x96,0x54,0x39,0xde,0x30,0xc6,0xd6,0x28,0x7e,0x53,0x55,0xf7,0xf8,0x8c,0xfd,0xd6,
    0x5d,0xcf,0xc0,0x26,0xba,0x58,0x83,0xbb,0x37,0xbf,0x1e,0x90,0x4d,0xfc,0xb6,0x67,
    0xdc,0xf7,0xa9,0xff,0x16,0x46,0xc5,0x33,0xe0,0x09,0x19,0x71,0x3f,0xd6,0xee,0xcf,
    0x58,0xff,0x04,0xf9,0x37,0x51,0xb6,0x1e,0xa8,0x2b,0x4f,0x74,0xfe,0x2e,0xad,0x52,
    0xef,0x5e,0xad,0xed,0x0f,0xb8,0x35,0x60,0x52,0x9d,0xbf,0x53,0x9d,0xbf,0xe0,0xda,
    0xf2,0x6b,0x8a,0x6c,0xb6,0x39,0x7f,0x27,0x3b,0x7f,0xaf,0x13,0xf6,0x70,0x46,0xdc,
    0xfb,0xfb,0x88,0xfc,0x7d,0x58,0xfe,0x4d,0x95,0xad,0x29,0x75,0xe5,0xa9,0xce,0xdf,
    0xf7,0xaa,0xd4,0x6b,0x93,0xbf,0x90,0xb5,0x9c,0xf1,0xc7,0x3a,0x7f,0x9f,0x72,0xfe,
    0x82,0x7b,0x34,0xbf,0x9e,0x92,0xcd,0x47,0xdd,0x38,0x99,0x21,0x3f,0x46,0x39,0xdf,
    0x66,0x66,0xc4,0x5f,0x76,0xf3,0xf6,0xb1,0x8c,0xf1,0x9a,0xe9,0x74,0x9f,0x90,0x2e,
    0xbe,0xc9,0xb7,0xfc,0x39,0x3b,0x23,0xee,0xf3,0xe2,0x93,0x19,0x7d,0x9f,0xad,0xb6,
    0x99,0x1f,0x4f,0xb9,0xb6,0xad,0xaa,0x52,0x06,0xed,0x7d,0x52,0xfe,0x1a,0xb7,0xb2,
    0xca,0xba,0xc1,0x3d,0x26,0xce,0xf2,0xcf,0x33,0x6e,0x7e,0x43,0x0e,0x31,0x6e,0xcf,
    0x4d,0x8e,0x5b,0x55,0x2d,0xde,0xff,0xa8,0x9d,0x73,0x35,0x87,0xf1,0x5e,0xad,0x61,
    0xcf,0x6b,0x4e,0x03,0xb3,0xe7,0x20,0x0b,0x32,0xe2,0xfd,0xdc,0x33,0x8f,0x3f,0x65,
    0xd4,0x07,0x67,0xf3,0xe5,0x85,0x4c,0xb8,0xda,0xfc,0xe7,0x8c,0x18,0xfc,0xb3,0x77,
    0x7e,0x17,0x65,0xc4,0xe1,0xd7,0xa9,0xa5,0xb4,0x96,0xe3,0x5e,0x8d,0x98,0xe7,0xc0,
    0x35,0xea,0xfb,0xe9,0xb2,0x7c,0xb6,0xbe,0xfd,0x3f,0xe5,0x3b,0x7b,0x3e,0xbf,0xd8,
    0xad,0x23,0xe0,0x5e,0xcb,0xaf,0xc5,0xca,0xef,0xaf,0xb9,0xef,0xd9,0xfe,0xae,0xef,
    0x24,0x37,0xbb,0xe7,0x18,0xff,0x88,0x88,0xdf,0xa0,0xb6,0xbc,0x1e,0x11,0x6b,0x2e,
    0x15,0x7a,0x6f,0x48,0xaf,0xc5,0xe9,0xbd,0x19,0x11,0x37,0xbd,0xb7,0x22,0x62,0xcd,
    0xee,0x1b,0xcf,0xb7,0x23,0xda,0x7b,0x2b,0x2a,0xbe,0xf1,0x7c,0x57,0xdf,0xea,0xbd,
    0xad,0x6f,0x0a,0xf1,0xad,0xf6,0x7b,0xfa,0x4e,0xdb,0xee,0x8d,0xac,0x88,0x28,0xe7,
    0xef,0x5f,0xad,0x12,0xd6,0xe0,0xfc,0x5a,0x23,0xbf,0x46,0x38,0xbf,0xd6,0x46,0xc4,
    0xed,0xcc,0xf7,0xa1,0xbe,0x33,0x5c,0x1b,0x15,0xf7,0x07,0x3f,0x8a,0x58,0x07,0x6c,
    0x82,0x3f,0x2f,0xd7,0x85,0x0f,0xc0,0x5f,0xd5,0x77,0x9d,0x16,0xbf,0xc5,0x75,0xdf,
    0x79,0xe2,0xff,0x67,0xb9,0x17,0xdf,0xcb,0xaf,0x7f,0x01,0xa0,0x5e,0x27,0x03,0xa0,
    0x4a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//     uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     bool punchthrough;
//     result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//     uint minColor565 = packColorToRGB565(minColor);
//     uint maxColor565 = packColorToRGB565(maxColor);
//     if(minColor565 > maxColor565){
//         swap(minColor565, maxColor565);
//     }
//     uint indices = 0;
//     if(minColor565 != maxColor565){
//         indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//     }
//     else {
//         indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//     finalResult . b = maxColor565 |(minColor565 << 16);
//     finalResult . a = mask;
//
//     finalResult . rg = EncodeBC4(result . a, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
