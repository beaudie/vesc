// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x0b,0xd8,0x56,0x53,
    0xda,0x7e,0xdf,0xf7,0x7b,0xf7,0x99,0x28,0xc7,0x32,0x32,0x61,0x7e,0x21,0xc7,0x09,
    0xd1,0x91,0x18,0x8d,0x43,0x92,0x29,0xc4,0x88,0x22,0x7f,0xfe,0xcf,0x57,0x8c,0xcf,
    0x57,0x53,0xfa,0x48,0x48,0x28,0xfd,0x18,0x72,0x1a,0xa3,0x8c,0x43,0x68,0xcc,0x38,
    0x45,0x11,0x95,0x32,0xc8,0x98,0xcc,0x18,0xbf,0x99,0x21,0x74,0x12,0x86,0x99,0x31,
    0x64,0xc4,0xec,0xfb,0xbd,0xef,0xa7,0xfd,0xf4,0xea,0x7f,0xaf,0x6b,0x5d,0xfb,0x5d,
    0xf7,0xfd,0x3c,0xcf,0x5a,0xeb,0x59,0x6b,0x3d,0x6b,0xed,0xbd,0xd7,0x6e,0xa8,0xec,
    0x16,0x95,0x1a,0xca,0xa5,0xb4,0x14,0x97,0xd6,0x64,0xa5,0xda,0xaf,0x6d,0xa9,0x52,
    0x2a,0xeb,0xba,0xaf,0xae,0x3d,0x75,0x3d,0x5c,0xd7,0xbe,0xf9,0x35,0x2b,0x85,0x35,
    0xb9,0xa3,0x8f,0x3b,0xe9,0xb8,0x7d,0x7f,0x72,0xd1,0xd9,0xfb,0x76,0x3d,0x68,0x7f,
    0xe8,0xb7,0x29,0x35,0xd4,0xec,0x80,0xdb,0x2a,0xb7,0x1b,0xe4,0xd7,0x6a,0x9e,0xce,
    0x3f,0x6b,0x64,0x13,0xf0,0xc1,0x79,0x3a,0x23,0x4f,0x2b,0x72,0x81,0xad,0x73,0x1b,
    0xd5,0x9a,0xcd,0x52,0xa9,0x8f,0x74,0x6a,0x36,0x73,0x74,0x70,0xad,0x8c,0x52,0xa9,
    0x83,0xf2,0x67,0x28,0xbf,0x53,0x2d,0xdf,0x50,0xd3,0x2f,0x89,0xc3,0x7f,0x70,0x7b,
    0xe6,0xa9,0x5f,0x5e,0xe2,0xc5,0x15,0x72,0xbb,0xf1,0xb2,0x11,0x2b,0x0b,0xab,0x3a,
    0xac,0x22,0x2c,0x76,0x58,0x83,0xb0,0x2d,0x1c,0x56,0x15,0xb6,0xb5,0xc3,0x02,0x61,
    0xdb,0x3a,0x2c,0x14,0xb6,0xa3,0xea,0x69,0x65,0xa0,0x9e,0x7b,0xe5,0x0a,0xbb,0x96,
    0x8a,0x7a,0x23,0xdf,0xc9,0xe5,0xd7,0xd5,0xf1,0xeb,0xc4,0x97,0x65,0x0b,0xf9,0xf6,
    0xe2,0x3e,0x09,0xd8,0xe6,0xf6,0xe2,0x2e,0x4f,0xa8,0xb7,0x4d,0x5e,0x1a,0xca,0xeb,
    0x94,0x63,0x68,0x07,0xfe,0x6f,0x97,0xcb,0xa3,0x5e,0xdf,0x95,0xad,0x1d,0xf2,0x7c,
    0x54,0x62,0x5d,0x8d,0xcf,0xc4,0x97,0x6a,0xd7,0x6a,0xad,0xed,0x91,0x7c,0x0e,0xf9,
    0xb6,0xfa,0x5f,0x11,0xdf,0x4e,0x7c,0x5b,0xe5,0x77,0x50,0x1e,0x36,0xb7,0xcf,0x4b,
    0xde,0x59,0xf6,0xa0,0xdb,0x31,0xbf,0x22,0xdf,0xa0,0xfc,0x1e,0xb2,0xd5,0x20,0xdd,
    0x3e,0xd2,0x8d,0x6a,0xbe,0xe4,0x38,0x83,0x5c,0x5f,0xd9,0xab,0x4a,0x6e,0x90,0xea,
    0x0f,0xfd,0xee,0xca,0x0f,0x16,0xb6,0xb7,0xda,0x38,0x44,0x7d,0x69,0xfc,0x19,0x8e,
    0x47,0x99,0x43,0x5d,0x1b,0xcf,0x14,0x97,0x39,0x7e,0xb8,0xca,0xb3,0xfc,0xc8,0xda,
    0x38,0x2e,0xec,0x37,0x3a,0x1e,0xf9,0xa6,0xba,0xf2,0x9b,0xe5,0x23,0xd3,0x1f,0x5b,
    0xc7,0xb7,0x3a,0x3f,0x5c,0xad,0xb2,0x7d,0x79,0x53,0x55,0x7f,0xcb,0x4f,0xd3,0x98,
    0xb3,0xfc,0xf5,0x1a,0x5b,0x5d,0x72,0x6f,0x41,0x7f,0xba,0xda,0x34,0x55,0xb2,0xd7,
    0x3b,0xd9,0x1b,0xf2,0xf4,0x8d,0xcb,0xdf,0x59,0x57,0xb7,0x99,0xaa,0x8b,0xd5,0xed,
    0xf1,0x3c,0xed,0xe3,0xf2,0xf3,0x55,0x96,0xe5,0x17,0x6a,0xac,0x5b,0xfe,0x45,0x57,
    0x37,0xe4,0x97,0x95,0x38,0x27,0x2c,0xbf,0x3c,0x4f,0xbb,0xe4,0xe9,0x3b,0x79,0xfe,
    0xfd,0xfc,0xda,0x57,0x75,0x34,0x7e,0x65,0x2d,0x5e,0xb0,0x2d,0xe0,0x56,0xc9,0x7f,
    0xcb,0xd4,0x8f,0x2b,0x9d,0xec,0x6a,0x8d,0x05,0xcb,0xaf,0xc9,0x53,0xe2,0xf2,0x6b,
    0x35,0x5f,0xcd,0xd6,0x07,0xb2,0xb5,0x5a,0xb2,0x6b,0x9d,0xec,0x3a,0x8d,0x35,0x93,
    0xfd,0x50,0xfd,0xd8,0x28,0x6e,0xad,0xe3,0x3e,0x12,0xd7,0xaa,0x7a,0x79,0x3b,0x1f,
    0xab,0xff,0x4c,0xf6,0x6f,0xae,0xfe,0xeb,0xc4,0x9b,0xec,0x27,0x79,0x4a,0x9d,0xec,
    0xa7,0xae,0x7e,0x43,0xc4,0x1b,0xf7,0x77,0x95,0xb7,0x5a,0x76,0x3c,0xf7,0x0f,0xe9,
    0x35,0x6e,0x86,0xfb,0xa7,0xea,0x6a,0xe5,0xaf,0x71,0xdc,0x67,0x75,0x6d,0xf4,0xdc,
    0xbf,0x5c,0x1b,0xeb,0xb9,0xcf,0x9d,0xde,0xea,0x3a,0xee,0x0b,0xd5,0xa5,0xd5,0x71,
    0xd6,0xde,0xf5,0x9a,0x67,0x26,0xfb,0xa5,0xb0,0x26,0xe9,0x78,0x3b,0xff,0x76,0xfe,
    0x5d,0x27,0x7f,0x18,0xf7,0x95,0x6b,0xef,0xea,0x8d,0xdc,0x36,0xb5,0xf1,0xb4,0x41,
    0x63,0xe6,0x03,0xf5,0xe1,0x47,0xea,0x83,0x4f,0xe5,0xc3,0x7f,0xc8,0x27,0x9f,0xa9,
    0x8d,0x9f,0xab,0xce,0x5f,0xaa,0xcc,0xaf,0x14,0x07,0x30,0x41,0x31,0x1e,0xde,0x77,
    0xf5,0x6f,0x53,0x2e,0xe6,0x0e,0x62,0xd7,0xbe,0x5c,0x6f,0x7a,0x63,0xde,0xf6,0x2e,
    0x73,0x2c,0x36,0x38,0x7e,0x92,0xd6,0x23,0xcb,0xcf,0xa9,0xe5,0x2f,0xed,0x6d,0xf9,
    0x27,0x6b,0xf9,0xd6,0x23,0x2d,0x3f,0x2f,0xcf,0x5f,0xb5,0xfd,0x8c,0x5e,0x96,0x9f,
    0x9f,0xe7,0xef,0x3e,0x6a,0xfb,0x8d,0xf2,0xcf,0xe4,0xf9,0x3f,0x8c,0x59,0xdb,0xb3,
    0x4b,0x5e,0x12,0xe2,0xe7,0xb3,0x65,0xea,0x40,0x0e,0x9c,0xc9,0xbd,0x92,0xff,0x1f,
    0xd5,0xae,0xa1,0x77,0x77,0xc5,0x33,0xac,0x85,0x65,0x57,0x8f,0xaf,0x6b,0xe5,0xbe,
    0xd3,0xc7,0xe6,0x7c,0xb5,0xc2,0xb6,0x5a,0x7e,0x9f,0x4a,0x31,0x67,0x91,0x1f,0xa0,
    0x35,0x6c,0xaf,0xbc,0x75,0x88,0xc3,0xcd,0x79,0xbe,0x63,0x3e,0xd3,0x6c,0x6d,0xfb,
    0xff,0x12,0xfc,0xd8,0x52,0xe1,0x9c,0x84,0x6c,0x77,0xe5,0xc7,0x08,0x03,0x3f,0x56,
    0xff,0xc3,0xda,0x5a,0x4d,0xfb,0x57,0x56,0x8a,0xb2,0xa7,0x54,0x10,0x2b,0x8a,0xfc,
    0x35,0x95,0x22,0xde,0x20,0x7f,0x6d,0xc5,0xe6,0x78,0x58,0x5b,0x03,0xae,0xab,0x50,
    0x07,0x72,0xd7,0x56,0x8a,0xbe,0xbb,0xb1,0xb2,0x69,0xcc,0xbe,0xa5,0xc2,0x75,0xca,
    0xf2,0x77,0x55,0xb8,0x8f,0xb0,0xfc,0xec,0x0a,0xd6,0xcd,0xa2,0x9c,0x97,0x2a,0x45,
    0xdc,0xda,0xa0,0x76,0x4f,0x75,0xf2,0x5f,0x57,0x4a,0xb5,0xf5,0xce,0xf2,0xdf,0x54,
    0xb8,0xd6,0x59,0x1e,0x03,0x63,0x4f,0x97,0x2f,0x37,0x70,0x7f,0xd3,0x25,0xb7,0x0e,
    0x7b,0x95,0x86,0x62,0xce,0x7c,0xac,0x38,0x0a,0x9b,0xb0,0x03,0x5d,0xc8,0xc3,0x5f,
    0xd5,0x06,0xf6,0x15,0x74,0xd0,0x66,0x8c,0xbb,0x9e,0x0d,0x9c,0x47,0x96,0x0c,0xef,
    0xd5,0xc0,0x31,0x6b,0xc9,0xca,0xbe,0xbc,0x81,0xbb,0x31,0xcb,0x5f,0xd9,0xc0,0x05,
    0xc9,0xf2,0x7f,0x69,0xe0,0x1e,0x62,0x63,0x9c,0xcd,0xf3,0xed,0x5c,0x3e,0xcb,0xa7,
    0xc7,0x96,0xf2,0xc5,0x53,0x55,0xd6,0x67,0x6a,0xad,0xdc,0xa0,0xf6,0xff,0xe9,0x2a,
    0xe7,0xe7,0x10,0x87,0xcd,0xab,0x72,0x2e,0xdf,0xe2,0xfa,0x64,0x7e,0x95,0x7b,0x00,
    0x93,0x79,0xa6,0xca,0x18,0x00,0xdc,0x64,0x9e,0xad,0x62,0xdc,0x15,0x32,0x0b,0xaa,
    0x2c,0xff,0x59,0x27,0xf3,0x5c,0xfe,0xbf,0x87,0x93,0x79,0xbe,0xca,0x3a,0x3f,0xe7,
    0x64,0x16,0xe6,0xff,0x07,0x38,0x99,0x45,0x55,0xae,0x65,0x0b,0x9d,0xcc,0xe2,0x2a,
    0xf7,0x56,0x96,0x7f,0x21,0xcf,0x9f,0xe7,0x74,0x96,0x54,0x29,0xf3,0x82,0xd3,0x59,
    0x9a,0xff,0xdf,0xcf,0xaf,0x7f,0x79,0xfe,0x09,0xa7,0xf3,0xdb,0x2a,0x65,0x80,0xa3,
    0xaf,0xe1,0xaf,0x97,0xaa,0xf4,0x11,0x7c,0x82,0x36,0xa3,0x4d,0xa8,0x33,0xea,0x84,
    0x32,0xa0,0x83,0xbe,0x5e,0x26,0xdf,0x42,0x07,0x31,0x26,0xcd,0x27,0xe5,0xe1,0x5a,
    0xaf,0xdb,0xe7,0xb3,0x66,0x0f,0xed,0xf7,0x82,0xd2,0xa6,0x3f,0x85,0x9d,0x7c,0x3c,
    0x37,0x94,0x3a,0xe7,0x24,0xe4,0x60,0x6f,0x4f,0x09,0x02,0xeb,0xae,0xfc,0x5e,0xc2,
    0x60,0x6f,0xad,0xec,0x95,0xeb,0xec,0xa1,0xbc,0x8e,0x9a,0xaf,0x1f,0x48,0x7e,0xad,
    0x6c,0x20,0xbf,0x2e,0x28,0xe2,0x1c,0xf4,0xff,0x16,0xd8,0xd8,0xe6,0x9c,0xc4,0xbe,
    0x14,0xd8,0x58,0xed,0x7d,0xcc,0x37,0xc7,0x66,0x1c,0x23,0x7e,0x9c,0x1c,0x97,0x71,
    0xec,0x34,0x3b,0xec,0xf8,0x8c,0x73,0xa3,0xd5,0xed,0x71,0xfa,0x67,0xdc,0xcb,0xf8,
    0x64,0xe3,0xfe,0x04,0x27,0xdf,0xea,0xf0,0x01,0xce,0x76,0xb3,0xc3,0x4f,0xcc,0x38,
    0x2e,0x2d,0x19,0x3e,0x30,0x63,0xdc,0xb0,0x64,0xed,0x39,0x29,0xe3,0x78,0x9f,0xba,
    0x71,0xdc,0x53,0xfe,0x47,0x19,0xd7,0x24,0x4b,0x16,0x6f,0x07,0xd5,0xee,0xa3,0xfa,
    0xf4,0x29,0xe7,0xfd,0x01,0xb9,0x0b,0x33,0xf8,0xb8,0xa1,0xd6,0x8e,0x07,0x33,0xf6,
    0xed,0xbb,0x19,0xfb,0x96,0x53,0x91,0xdc,0xea,0x1c,0x3b,0x38,0xf7,0x41,0x45,0xfb,
    0x41,0x85,0x91,0x7c,0xbd,0xaa,0xd4,0xfa,0xbc,0xbb,0xd6,0xa9,0x5d,0x53,0x8e,0x93,
    0xee,0x8a,0x0f,0xf7,0x85,0x9b,0xe6,0xe7,0xba,0x3c,0xc6,0xd4,0xef,0x5c,0x1e,0xfd,
    0xd4,0x3f,0x28,0xf2,0x98,0xe7,0x4b,0x95,0xff,0x3c,0x2f,0xed,0x53,0xf5,0xed,0xbf,
    0xf3,0xff,0xd8,0x53,0xfe,0x3d,0x60,0xf9,0xb8,0xf6,0xd4,0xbe,0x7d,0x7d,0xc0,0x3d,
    0xf7,0x09,0xb9,0x16,0x62,0xea,0x97,0x01,0xb1,0xf5,0x41,0x31,0x1e,0xc7,0xeb,0xfe,
    0xe2,0xdf,0x01,0xf9,0x49,0xea,0xdb,0x0d,0x01,0xb1,0x63,0x6b,0xed,0x0f,0x6a,0xeb,
    0xd5,0xd7,0x01,0xf7,0xe8,0x28,0xaf,0xa7,0xc6,0xd4,0x37,0x01,0xf1,0xe7,0x73,0x99,
    0x9a,0x3b,0x43,0x62,0xc3,0x65,0xbb,0x16,0x53,0xb5,0xf0,0x2c,0x91,0x4c,0x55,0x32,
    0x23,0x9d,0x4c,0x10,0x12,0x87,0x0c,0xf2,0x51,0x48,0x3d,0xec,0x41,0x26,0x09,0x8b,
    0x43,0xf6,0x1f,0xb8,0x13,0x85,0xa5,0x21,0xeb,0x5a,0x5b,0xc1,0x85,0x65,0x21,0x71,
    0xc8,0x0f,0xcc,0x11,0xb4,0xe7,0xa5,0x94,0xb8,0xc9,0x5a,0x39,0x6d,0x54,0x4e,0xb3,
    0x2b,0x67,0x2b,0xe5,0xdb,0xb8,0x72,0xda,0x4a,0xb7,0xec,0xca,0x69,0x17,0x12,0xdf,
    0xca,0x95,0xb3,0x2c,0x25,0x8e,0xf2,0xca,0xae,0x9c,0xed,0x42,0xb6,0xb1,0xb5,0xb6,
    0x37,0x27,0xb6,0x83,0x30,0x94,0x35,0x40,0x7e,0xdf,0x31,0xa4,0x2c,0xb8,0x4b,0x85,
    0x75,0x08,0x69,0x17,0x1c,0xfa,0x02,0x6b,0x73,0x10,0x70,0xbd,0x6e,0x55,0x5f,0xd4,
    0x5c,0x1c,0x10,0x37,0x99,0x48,0x32,0x8d,0x4e,0x26,0x0e,0x88,0x5b,0x79,0x49,0x40,
    0x3d,0xe0,0x73,0x72,0x0c,0xb1,0x2c,0x0b,0x58,0x26,0xb8,0x5b,0x73,0x3d,0x8c,0xff,
    0x2d,0x84,0x63,0xec,0xb5,0x91,0x0f,0xbf,0xc4,0xbd,0x67,0xfe,0x7f,0xcb,0x3c,0xb5,
    0xd1,0xf8,0xc3,0xff,0xf5,0xf9,0xf5,0x53,0xe5,0x81,0x2f,0x54,0x59,0xdb,0xc8,0x2e,
    0x62,0xc9,0x12,0x61,0x3b,0x08,0x43,0x2c,0x31,0x5f,0x77,0x08,0x88,0x97,0x5c,0x9f,
    0xec,0x14,0xb0,0x1d,0xe0,0x4c,0x6e,0x67,0xc9,0xf9,0x3e,0xe9,0x18,0x50,0x76,0xe7,
    0xa0,0xd0,0xdd,0x55,0xba,0xc0,0x4c,0xee,0x7b,0x01,0xf1,0x0e,0x9a,0x2f,0x88,0xbd,
    0x7b,0x2b,0xee,0x9a,0xfd,0x7d,0x02,0xd6,0xd9,0xdb,0xdf,0x5f,0xfe,0xf2,0xfd,0x78,
    0x40,0x40,0xdc,0x8f,0xa1,0x03,0x03,0xea,0x1f,0xe0,0xec,0x75,0x95,0x3d,0x3f,0x56,
    0x0f,0x0a,0x28,0xdb,0xd5,0xf5,0xdb,0xc1,0xea,0xb7,0x66,0xd7,0x6f,0x87,0x04,0xc4,
    0x4d,0xaf,0x5b,0x40,0x5d,0xe0,0x67,0x63,0xbe,0xe7,0xd7,0x43,0xd5,0x86,0xa1,0xb9,
    0x0c,0xe2,0xd4,0x61,0xc2,0xba,0x39,0xdb,0xdd,0x65,0x7b,0x99,0xb3,0xdd,0x23,0x20,
    0xfe,0x40,0x2e,0x83,0xbe,0xee,0x19,0x10,0x1b,0xa2,0x58,0xd3,0xdb,0xf5,0x37,0xb8,
    0x5e,0x79,0x3a,0x4a,0xfd,0x7b,0x94,0xda,0x87,0x79,0x7d,0x7a,0xc8,0x32,0xcb,0xb5,
    0xf1,0xcc,0xf5,0x60,0x44,0x48,0xdc,0xa7,0xe7,0x55,0xbf,0x73,0x43,0xf2,0xd3,0x35,
    0x4f,0x80,0x9d,0x17,0x12,0xef,0x9f,0x15,0x76,0x1b,0x43,0xe2,0xf8,0x2d,0x12,0x76,
    0x7e,0x48,0x1c,0xf7,0xd0,0x26,0x37,0x4a,0x72,0x65,0x27,0x37,0x3a,0x24,0x8e,0x7b,
    0xd9,0xc5,0xc2,0x2e,0x08,0xa9,0x3f,0x3a,0x2c,0x74,0x7f,0x22,0xdd,0x8a,0xd3,0xbd,
    0x28,0x24,0x3e,0xd5,0xe9,0x36,0x87,0xd4,0xbf,0xc8,0xe9,0xb6,0x48,0xb7,0xc1,0xe9,
    0x8e,0x09,0x89,0x0f,0x75,0xba,0x63,0x43,0xea,0x8f,0x71,0xba,0x43,0xe5,0xb3,0x92,
    0xf3,0xd9,0x84,0x90,0xb8,0x4f,0xe6,0xb3,0xd6,0x90,0xbc,0xf7,0xd9,0xc4,0x90,0xb8,
    0xf7,0xd9,0xa4,0x90,0xb8,0xf7,0xd9,0x15,0x21,0x71,0xef,0xb3,0xab,0x24,0xe7,0x7d,
    0x36,0x39,0x24,0xee,0x7d,0x76,0x75,0x48,0xfd,0xc9,0xae,0xee,0xd7,0x48,0xd7,0xfb,
    0xec,0xda,0x90,0xb8,0xf7,0xd9,0x75,0x21,0xf5,0xaf,0x75,0xba,0xd3,0xa4,0xeb,0x7d,
    0x76,0x7d,0x48,0xdc,0xfb,0x6c,0x7a,0x48,0x7d,0x70,0x88,0x59,0x58,0xc7,0xce,0x0a,
    0xe9,0x4b,0x70,0x88,0x35,0xbd,0x35,0x16,0x7b,0xb9,0xb1,0xd8,0x49,0x7e,0x6d,0x70,
    0x7e,0xdd,0x3b,0x24,0xee,0x93,0xf9,0xb5,0x4b,0x48,0xde,0xfb,0x75,0xbf,0x90,0xb8,
    0xf7,0xeb,0x01,0x21,0x71,0xef,0xd7,0x03,0x43,0xe2,0xde,0xaf,0x5d,0x25,0xe7,0xfd,
    0x7a,0x50,0x48,0xdc,0xfb,0xf5,0xe0,0x90,0xfa,0x07,0x39,0xdf,0x74,0x93,0xae,0xf7,
    0xeb,0xa1,0x21,0x71,0xef,0xd7,0xc3,0x42,0xea,0x1f,0xea,0x74,0x7b,0x48,0xd7,0xfb,
    0xb5,0x67,0x48,0xdc,0xfb,0xb5,0x57,0x48,0xfd,0x9e,0x4e,0x77,0x77,0xf9,0xac,0xe2,
    0x7c,0xd6,0x37,0x24,0xee,0x93,0xf9,0xec,0xc8,0x90,0xbc,0xf7,0xd9,0xd1,0x21,0x71,
    0xef,0xb3,0x1f,0x86,0xc4,0xbd,0xcf,0x8e,0x09,0x89,0x7b,0x9f,0x1d,0x27,0x39,0xef,
    0xb3,0xe3,0x43,0xe2,0xde,0x67,0xfd,0x43,0xea,0x1f,0xef,0xea,0x3e,0x40,0xba,0xde,
    0x67,0x27,0x86,0xc4,0xbd,0xcf,0x06,0x86,0xd4,0x3f,0xd1,0xe9,0xfe,0x48,0xba,0xde,
    0x67,0x83,0x42,0xe2,0xde,0x67,0x83,0x43,0xea,0x0f,0x72,0x63,0xf1,0xbf,0x42,0xfa,
    0x72,0x70,0xdd,0x58,0xc4,0xf5,0x33,0xed,0xbb,0x06,0x67,0x1c,0xb3,0x88,0x95,0x35,
    0x79,0xc4,0xd0,0xbc,0xb4,0xfe,0x5a,0xbf,0xac,0x1e,0xaf,0x87,0x94,0xb5,0x7d,0x03,
    0xb0,0x3f,0x84,0xc4,0xb1,0x3f,0x47,0x0c,0xc7,0xbd,0xec,0x1b,0x21,0xf7,0x86,0xe0,
    0x2c,0x86,0xff,0x29,0x24,0x6e,0xfb,0x8d,0x37,0x43,0x62,0xcd,0x6e,0x9d,0xfa,0xbf,
    0x90,0x78,0x93,0xf6,0x5d,0xb0,0xff,0x56,0x48,0x7c,0xb6,0x62,0xff,0x5f,0x43,0xc6,
    0xfe,0x26,0xc5,0xfe,0xf7,0xc3,0x22,0xf6,0x83,0x7b,0x3b,0x4f,0xc0,0xd0,0xc6,0xb7,
    0xdd,0x9e,0xee,0x5d,0xd5,0x13,0xcf,0x2d,0x6d,0x1d,0x79,0x2f,0x24,0x3e,0xb4,0x44,
    0xdf,0x98,0x1e,0xae,0xf0,0x0d,0x64,0x56,0x86,0x2c,0x13,0xfe,0x7a,0x4f,0xf6,0x51,
    0xee,0x3d,0x71,0x51,0x2e,0x64,0x56,0x41,0x47,0xfa,0xb8,0xbe,0x94,0xb7,0x08,0xe5,
    0x7e,0xa1,0x72,0xef,0xd2,0x9a,0x66,0xfb,0xc9,0xf5,0x21,0x39,0xcb,0x7f,0x25,0xb9,
    0xdf,0xe6,0x39,0xe4,0x37,0x84,0xc4,0xe6,0xeb,0x5e,0xc4,0xec,0x61,0x53,0x02,0xb9,
    0xd9,0x75,0xf6,0xca,0x7a,0xe8,0x6d,0xfa,0x41,0x44,0xfd,0x17,0xeb,0xf4,0x63,0xe9,
    0x7f,0x5c,0xda,0x54,0x3f,0x89,0xc8,0x99,0xfe,0x96,0xd2,0x1f,0x22,0x7d,0x5b,0xd7,
    0xb7,0x8e,0x58,0xf7,0x0d,0x61,0x81,0x6d,0x13,0xb1,0x7c,0x94,0x69,0xd8,0xf6,0x11,
    0x6d,0xc2,0x8e,0xf5,0xe5,0x8e,0x11,0xf5,0x1f,0x94,0xff,0xdb,0x47,0xc4,0xf0,0x8c,
    0x04,0x3e,0x9d,0xe5,0x7c,0x0a,0xae,0x43,0x9e,0xc6,0x44,0xf4,0xe9,0x18,0x67,0xe7,
    0xa7,0x11,0xcb,0x34,0x3b,0xe3,0x22,0x62,0x66,0x67,0xa6,0xb3,0x03,0x6e,0x7c,0x9e,
    0x3e,0x93,0x9d,0xcf,0x9c,0x9d,0xcf,0x23,0xd6,0xd3,0xec,0x7c,0x11,0x11,0x33,0x3b,
    0x77,0x3b,0x3b,0xe0,0xd6,0xe7,0xe9,0xba,0x98,0x76,0x70,0x1d,0xa0,0xfb,0xb7,0xe9,
    0x31,0x7d,0x52,0x56,0x9b,0xcd,0xa7,0x37,0xc4,0x1c,0xbf,0x26,0x77,0x73,0x4c,0xbf,
    0x05,0xf2,0x8b,0xe1,0xb7,0xc4,0x94,0xb5,0x84,0x3d,0x1a,0xf0,0x19,0x31,0x39,0xe8,
    0x5d,0x2a,0xec,0xd6,0x98,0xe5,0x81,0x5b,0x24,0xec,0x8e,0x98,0x38,0xee,0x5f,0x17,
    0x0a,0xbb,0x4b,0x18,0xee,0x5d,0x17,0x0b,0xfb,0x45,0x4c,0x59,0x70,0x18,0xef,0x77,
    0xab,0x2d,0x68,0x97,0x8d,0x8f,0xaf,0x34,0x3e,0xf0,0x2c,0x67,0xb5,0x1b,0x1f,0x1b,
    0x22,0x72,0x1b,0xc7,0x61,0x4c,0x39,0xdc,0xf7,0x7a,0xb9,0x72,0x4c,0xce,0xee,0xb7,
    0xaa,0x92,0xc3,0x73,0x95,0x8d,0xf7,0x52,0x31,0x71,0x8b,0x05,0x61,0x4c,0x0c,0xcf,
    0xaa,0x16,0xdb,0xfd,0x55,0x4c,0x5b,0xe0,0xac,0xcc,0x54,0xb6,0xd6,0x69,0x4c,0x9a,
    0xbd,0x2c,0x26,0x67,0x72,0x6d,0xe2,0x62,0x8c,0x37,0x3b,0xb9,0xad,0x62,0x72,0x8b,
    0x6c,0x2c,0xc7,0xc4,0x5a,0x4b,0x45,0xb9,0x6d,0x63,0xda,0xdb,0xda,0xb5,0x61,0x5b,
    0x67,0xcf,0x6c,0x6d,0x17,0x13,0xb7,0x36,0x6c,0x1f,0x13,0xc3,0x73,0x37,0xb3,0xb5,
    0x43,0x4c,0x7b,0xe0,0x4c,0x6f,0xa7,0x98,0x71,0xd1,0xea,0xda,0x51,0xb6,0x9b,0xeb,
    0xe6,0xe3,0x2e,0x31,0x39,0xab,0xeb,0x77,0x63,0x62,0x4d,0xae,0xae,0x9d,0x62,0xda,
    0x03,0x67,0x31,0x7a,0xb7,0x98,0x31,0xba,0xe4,0xe6,0xfc,0xee,0x31,0x71,0x3c,0xff,
    0xf2,0x7d,0xf5,0xbd,0x98,0x9c,0xc9,0x75,0x96,0x1c,0xfa,0x7e,0x9d,0x93,0xdb,0x33,
    0x26,0x67,0x72,0x5d,0x24,0x67,0xef,0x14,0x4c,0x6e,0x9f,0x98,0x9c,0xc9,0xed,0x2f,
    0xb9,0xd9,0x75,0x63,0xe4,0x80,0x98,0x9c,0xc9,0x75,0x95,0xdc,0xfa,0xd2,0xa6,0x72,
    0x07,0xc5,0xe4,0xcc,0x07,0x87,0xc4,0x1c,0x87,0x7e,0xcd,0x38,0x54,0x58,0xa3,0xf3,
    0xcb,0x61,0x31,0x65,0x0f,0x75,0xba,0x3d,0x62,0xfa,0xcb,0xeb,0xf6,0x12,0xe6,0x75,
    0x7b,0xc7,0x94,0xed,0xe5,0x74,0x0f,0x8f,0xe9,0x2b,0xaf,0xdb,0x57,0x98,0xd7,0x3d,
    0x32,0xa6,0x6c,0x5f,0xa7,0xfb,0x83,0x98,0x63,0xb9,0xc9,0xe9,0xf6,0x13,0xb6,0xda,
    0xe9,0xfe,0x30,0xa6,0x6c,0x3f,0xa7,0x7b,0x6c,0x4c,0xdf,0x7b,0xdd,0xe3,0x85,0x79,
    0xdd,0xfe,0x31,0x65,0x8f,0x77,0xba,0x03,0x62,0xf6,0x87,0xd7,0x1d,0x28,0xcc,0xeb,
    0x9e,0x14,0x53,0x76,0xa0,0xd3,0x1d,0x14,0x73,0xec,0xfa,0xf6,0x9e,0x2c,0xcc,0xb7,
    0xf7,0x94,0x98,0xb2,0x27,0x3b,0xdd,0x21,0x31,0xfb,0xd7,0xeb,0x9e,0x2e,0xcc,0xeb,
    0xfe,0x38,0xa6,0xec,0xe9,0x4e,0x77,0x68,0xcc,0x3e,0xf7,0xba,0x67,0x09,0xf3,0xba,
    0xc3,0x62,0xca,0x9e,0xe5,0x62,0xf0,0x88,0x98,0xfd,0x0e,0x3f,0x9e,0xe2,0xf0,0xf3,
    0x62,0xf6,0x29,0x7c,0x84,0x32,0x27,0x2a,0x16,0x36,0xc6,0xe4,0x46,0x38,0xd9,0xd1,
    0x31,0xfb,0x10,0x3e,0x19,0xe6,0x64,0x2f,0x8c,0xc9,0x41,0xd6,0xf6,0x38,0x3f,0x89,
    0xb9,0xc7,0x19,0xea,0xee,0x53,0x2f,0x8a,0x89,0x9b,0xbd,0x8b,0x63,0x62,0x96,0x2c,
    0xae,0xb7,0xc4,0x2c,0xff,0x62,0x67,0x6f,0x8c,0xec,0x8d,0x75,0xf6,0xc6,0xc6,0xc4,
    0xcd,0xde,0xb8,0x98,0x98,0x25,0xb3,0x37,0x3e,0x66,0x1d,0xc7,0xb9,0x75,0xe2,0xd2,
    0x98,0xe5,0x8c,0x77,0xd8,0xc4,0x98,0xf8,0x00,0xb7,0x4e,0x4c,0x8a,0x89,0x03,0x33,
    0xb9,0x2b,0xd4,0x56,0x70,0x5b,0xe4,0xc1,0x1c,0xd8,0x55,0x31,0xf7,0x7d,0x78,0xa7,
    0x0b,0x1e,0xef,0x0e,0x7a,0x35,0x6c,0xba,0x8e,0xe0,0x8a,0x7d,0x13,0xe4,0x27,0x64,
    0x7c,0x5e,0x89,0x75,0x12,0xba,0x58,0x63,0x8c,0x1b,0x95,0x71,0x2d,0x02,0x07,0x19,
    0x70,0xf7,0xe7,0x6d,0xc4,0x1a,0xfc,0x4e,0xc6,0x75,0x18,0xef,0x8a,0xf0,0x3e,0x07,
    0xf6,0x67,0xca,0xfe,0x78,0xb7,0xfe,0xb4,0x46,0xc5,0xbe,0xaa,0xd1,0xc5,0x8c,0x4b,
    0x23,0x72,0x26,0x77,0xb9,0xe4,0xe6,0xd7,0xad,0x19,0x93,0x22,0x72,0x36,0xf6,0xae,
    0x88,0x88,0x61,0xbe,0x58,0xdc,0x9f,0x2c,0x5d,0xbc,0x13,0xb2,0x7d,0xe4,0xd5,0x11,
    0xf1,0xb1,0xce,0xd6,0x94,0x88,0xb8,0x8d,0xcf,0x6b,0x22,0xda,0x9b,0xe2,0xea,0x31,
    0x55,0xb6,0x6e,0xac,0x6c,0x5a,0x8f,0x69,0x11,0x39,0x2b,0xf3,0x7f,0x25,0x37,0xcd,
    0xed,0xb1,0x6f,0x88,0x88,0x4f,0x75,0x7a,0x37,0x46,0xc4,0xad,0xcc,0x9b,0x22,0xda,
    0xba,0xd1,0x95,0x79,0x8b,0xdb,0xeb,0x79,0x1f,0xcd,0x88,0xc8,0x99,0xdc,0xed,0x51,
    0xb1,0xae,0x7a,0xb9,0x3b,0x22,0x72,0x26,0x77,0x97,0xe4,0x5a,0xeb,0xe4,0x7e,0x11,
    0x91,0xb3,0xfa,0xce,0x92,0xdc,0x70,0x3d,0x6f,0x02,0xf6,0x40,0xc4,0xbd,0xf7,0x1f,
    0xb4,0x6f,0x04,0x36,0x3b,0xa2,0x2c,0x38,0x7b,0x2e,0xf5,0x50,0xc4,0x3e,0xc4,0xbb,
    0x26,0xc3,0xe6,0x44,0xf4,0x29,0xde,0x37,0xd9,0xfe,0xf2,0x57,0x11,0x65,0xe7,0xb8,
    0x3d,0xe7,0xaf,0x23,0xe2,0x37,0x39,0x7b,0x8f,0x46,0x6c,0xaf,0xb7,0xf7,0x78,0xc4,
    0xb6,0x79,0x7b,0x4f,0x44,0x94,0x7d,0xdc,0xd9,0x9b,0x1b,0x11,0x47,0xfb,0xe6,0x68,
    0x8f,0xf8,0x54,0xc4,0x72,0xe6,0x6a,0xcc,0xa2,0x1d,0x4f,0x47,0xc4,0xc7,0xea,0xd9,
    0xb3,0xb5,0x6f,0x7e,0xc4,0x36,0x82,0xc7,0xfd,0x14,0x9e,0xa7,0xe3,0x7d,0x9d,0xcd,
    0xf9,0x67,0x23,0x3e,0x63,0x87,0x9c,0xcd,0xf9,0x05,0x11,0x71,0x5b,0xcf,0x9f,0x8f,
    0x8a,0xf5,0xdc,0xea,0xb5,0x28,0xe2,0x38,0xea,0xe8,0x9e,0x6b,0x2f,0x8e,0x28,0xbb,
    0xc8,0xf5,0xc3,0x0b,0x11,0xf1,0x3b,0x5d,0x5f,0x2d,0x89,0x88,0x9b,0xde,0x4b,0xd2,
    0x83,0x2d,0xd3,0x7b,0x39,0x22,0xee,0xc7,0xf8,0x2b,0x11,0x71,0xec,0x8b,0x5f,0x8f,
    0x8a,0x7d,0x31,0xe6,0xe9,0xab,0xe8,0x6f,0xed,0xaf,0x5f,0x75,0xfe,0xfb,0x7d,0xc4,
    0xf2,0xa0,0x6b,0xf7,0x5c,0xcb,0x23,0xe2,0xcd,0xba,0xe7,0x32,0xbd,0xd7,0xa3,0xe2,
    0x9e,0xeb,0xdc,0x8c,0xf3,0x1f,0xf3,0x1d,0xf2,0xb0,0x69,0xf7,0x7f,0x7f,0x94,0xcd,
    0xf5,0xba,0xff,0x5b,0xe1,0xea,0x02,0xee,0x8d,0x3c,0xfd,0x59,0x36,0xff,0xec,0xf6,
    0xd8,0xef,0x68,0x5c,0x5d,0xa3,0xf1,0x81,0xb2,0x57,0x48,0xee,0x0d,0x27,0xf7,0x96,
    0xc6,0xcb,0x1d,0xea,0x77,0x2f,0xb7,0xc2,0xc5,0xb0,0x53,0x32,0xda,0x44,0x19,0x6f,
    0xa9,0x5c,0x8b,0xc7,0x2b,0x23,0xf2,0x78,0x3f,0x64,0x63,0x6e,0xb5,0xda,0x0c,0x5f,
    0x4c,0x14,0xb6,0x46,0xf1,0x66,0xb5,0x1b,0xaf,0xeb,0x22,0xe2,0x0b,0x5c,0x9d,0x3e,
    0x8a,0x88,0x5b,0xb2,0x38,0xfd,0x71,0xc4,0xb2,0xc0,0x5b,0x9c,0xfe,0x24,0x2a,0xe2,
    0x34,0x78,0x1f,0xa7,0x2d,0x8e,0xce,0x74,0x71,0xfa,0x92,0x8c,0xb1,0x1a,0xb1,0x1b,
    0xba,0xbe,0x8d,0x4d,0x19,0x63,0xf5,0xdd,0x8a,0xd3,0x2b,0x5c,0x1f,0x9d,0xad,0x3e,
    0x02,0x77,0x6e,0x1d,0x77,0x5a,0xc6,0x38,0x0e,0x0e,0x32,0x2b,0xe4,0xc7,0x59,0x2a,
    0xbf,0x83,0x8b,0x29,0x3b,0xbb,0xf8,0xec,0xf7,0xea,0x1d,0x23,0x72,0x26,0xd7,0xc9,
    0xc5,0x7b,0x2f,0xb7,0x6b,0x44,0xce,0xe2,0xf8,0x6e,0x11,0xb1,0x66,0xb7,0x5f,0xd8,
    0x3d,0xa2,0xbd,0xdd,0x9c,0xbd,0x3d,0x64,0x6f,0x61,0x5d,0x2c,0xeb,0x1c,0x91,0x33,
    0xb9,0xbd,0x25,0xf7,0x62,0x9d,0x5c,0x97,0x88,0x9c,0xc9,0xed,0x27,0xb9,0xb5,0x75,
    0x72,0xfb,0x47,0xe4,0x4c,0xee,0xfb,0x92,0x1b,0x52,0x27,0xd7,0x35,0x22,0x67,0x72,
    0x87,0x48,0xae,0xb1,0x4e,0xae,0x5b,0x44,0xce,0xe4,0xba,0x47,0xc5,0xfd,0x43,0xb3,
    0x7b,0x3e,0xd4,0x23,0x22,0xd7,0xe4,0x9e,0x0f,0xf5,0x89,0x88,0x23,0x06,0x23,0x1e,
    0xdd,0x57,0x17,0x8f,0x8e,0x88,0xf8,0x0e,0xb0,0x8f,0x8b,0x47,0x7d,0x23,0xe2,0x16,
    0x8f,0x8e,0xda,0x4c,0x3c,0x3a,0x7a,0x33,0xf1,0xa8,0x5f,0x44,0xd9,0xa3,0x5d,0x3c,
    0xfa,0x61,0x44,0xdc,0xc7,0xa3,0x63,0x22,0xe2,0xa6,0xd7,0x5f,0x7a,0x3e,0x1e,0x9d,
    0x10,0x11,0xf7,0xf1,0x68,0x40,0x44,0x7c,0xe3,0x3e,0x36,0xa2,0xad,0x01,0x8a,0x51,
    0xa7,0xd4,0xc5,0xa8,0x41,0x98,0x93,0x9a,0xc7,0x83,0x5c,0x3c,0x3a,0x39,0xa2,0xae,
    0xc5,0x23,0x93,0x39,0xc5,0x8d,0xe7,0x91,0x1a,0xeb,0x18,0xb7,0x90,0xf7,0xfa,0x43,
    0xa4,0x6f,0xf1,0xa8,0xc5,0x95,0x0b,0xee,0xb4,0x3c,0x0d,0x97,0xcd,0xe1,0x6e,0xee,
    0x9f,0xa3,0x32,0x4f,0x72,0xf3,0x7c,0x64,0xc4,0xf1,0x82,0xb1,0xd0,0xcd,0xc5,0x93,
    0xff,0x89,0xc8,0xf9,0x78,0xd2,0x14,0xd1,0x46,0x5f,0xa7,0x3f,0x2a,0x22,0x6e,0xc9,
    0xe2,0xc4,0xe8,0x88,0x36,0x46,0xb9,0x38,0x71,0xa1,0x8b,0x13,0xa3,0xeb,0xe2,0x44,
    0x8b,0xea,0x7b,0x9a,0xb3,0x3d,0x34,0xe2,0x3c,0xc2,0xfc,0xe8,0xe2,0xea,0x36,0x2c,
    0x22,0x87,0xba,0x79,0xdd,0x16,0x17,0x47,0x2e,0xcb,0x58,0x1e,0xda,0x3f,0x4c,0x3e,
    0xf1,0xf1,0x60,0x96,0x8b,0x47,0xe3,0x33,0xc6,0x24,0xc4,0x28,0xe8,0x79,0x3b,0xe7,
    0x67,0x8c,0x49,0x33,0x15,0x8f,0x5a,0x5c,0x1f,0x0d,0xcf,0x18,0x93,0xc0,0x8d,0xac,
    0xe3,0x86,0x64,0x8c,0x49,0x33,0x15,0x8f,0x5a,0x54,0xfe,0x3d,0x2a,0x1f,0xcf,0xee,
    0x4e,0xc8,0xfd,0x82,0x77,0xd2,0x6b,0xf4,0x8c,0xd3,0x9e,0x73,0x5a,0xb2,0x7d,0xcc,
    0x07,0xda,0xd7,0xd8,0x73,0x1d,0xe8,0xac,0x0b,0x89,0x5b,0x42,0x1f,0x03,0xff,0x30,
    0xe4,0xb9,0xa2,0x75,0x7a,0x26,0x0d,0xec,0xa3,0x90,0x65,0x7c,0xa8,0x67,0x7f,0xb5,
    0x38,0x1e,0x12,0x5f,0x22,0x9f,0x7e,0x1a,0x12,0x1b,0x98,0x15,0x7e,0xfe,0x67,0x48,
    0xdc,0xfc,0x6c,0x75,0xbf,0xc7,0xf9,0x6e,0x5c,0x46,0xff,0xcd,0x92,0x7f,0x56,0x85,
    0x05,0xd7,0x98,0xd1,0x7f,0xe0,0xfe,0x19,0x16,0x1c,0xfc,0x33,0x2c,0xa3,0xff,0x66,
    0xc9,0x3f,0x9e,0x3b,0x35,0xa3,0xff,0xc0,0x5d,0x29,0x0e,0xe3,0xfc,0x4d,0xf7,0x6c,
    0x0c,0x32,0xf7,0xe6,0xf9,0x37,0x55,0x27,0xfc,0xb7,0xf5,0x7a,0xb6,0x9e,0x81,0x61,
    0x5f,0x74,0xbf,0x9e,0x2d,0x3e,0x18,0x13,0x6f,0xd2,0xb9,0xa3,0x8d,0x7b,0x3f,0x3d,
    0x8b,0x79,0x30,0x2e,0xe6,0xc9,0xc3,0x31,0x9f,0x8b,0x3c,0xe4,0x9e,0x17,0xcc,0xd1,
    0x33,0x93,0x87,0x25,0x6f,0xb1,0xe9,0x91,0xf8,0xdb,0xb1,0xe9,0x37,0xf1,0xb7,0x63,
    0xd3,0xa3,0x31,0x65,0x7f,0x13,0x17,0x31,0xe6,0xb1,0x98,0xb8,0x8f,0x4d,0x8f,0xc7,
    0xc4,0x4d,0xef,0x29,0xe9,0xf9,0xd8,0xf4,0x74,0x4c,0xdc,0xc7,0xa6,0x79,0x31,0x71,
    0x6b,0xc3,0x33,0x6a,0x2b,0xec,0xc1,0x77,0x4b,0x9d,0xef,0xe0,0xfb,0x05,0x79,0x7e,
    0xa9,0x7c,0xb7,0x20,0x2e,0xfc,0xb1,0x30,0xa6,0xee,0xbc,0xb8,0x68,0xcf,0x0b,0x31,
    0xed,0x00,0xb3,0x18,0xb4,0x24,0x26,0x6e,0x31,0xcc,0x6c,0x2d,0x8d,0x8b,0x7e,0x1c,
    0x93,0xb1,0x9f,0xd1,0x37,0x90,0x5f,0x20,0x0e,0x36,0xcf,0xcb,0x58,0x0e,0xb8,0x85,
    0xe2,0xb0,0x3e,0xe0,0xbc,0x07,0xce,0x1c,0x1d,0x9e,0x4b,0x61,0x7d,0x78,0x29,0xe6,
    0x19,0x90,0x39,0x2a,0xdf,0xd6,0x88,0x97,0x63,0x72,0x56,0xef,0x65,0x31,0x31,0xd8,
    0xb5,0xf8,0xf1,0x5a,0x4c,0xdc,0x92,0xc5,0xa6,0xdf,0xc7,0x1c,0x9b,0xaf,0xb9,0x7b,
    0xcd,0xe5,0xee,0x5e,0xf3,0xf7,0x75,0xf7,0x9a,0x36,0xc6,0xde,0x74,0xe3,0xfe,0xa7,
    0x19,0xc7,0x3e,0xe6,0xc2,0x72,0xf9,0xd2,0xda,0xdd,0xa2,0x76,0x83,0x83,0x0f,0x96,
    0x3a,0xbf,0xfd,0x39,0x2e,0xde,0x25,0xdc,0x6b,0xef,0x17,0x62,0xe2,0x2d,0x9a,0x67,
    0xef,0xa8,0xbc,0x77,0x74,0x1f,0x8e,0xf3,0x36,0xef,0x65,0x94,0xb3,0x74,0xbf,0xda,
    0xf8,0xbe,0x38,0xd4,0xf7,0xa7,0xee,0xbc,0xc0,0xbb,0x31,0xb9,0x52,0xa9,0xc0,0xde,
    0x17,0x56,0x76,0xd8,0x2a,0x61,0x15,0xf7,0xfe,0xe3,0xcc,0x80,0xfa,0x96,0x1f,0x1e,
    0x50,0xd7,0xf2,0x23,0x02,0xea,0x59,0x2c,0x3a,0x37,0xa0,0x0e,0xe4,0xc0,0x59,0x8c,
    0xf9,0x26,0x26,0xf7,0xe3,0x72,0x54,0x93,0x2b,0x27,0xc5,0x99,0x6d,0xe0,0xd3,0x34,
    0x67,0xc0,0x35,0x24,0xe4,0x71,0x5e,0xc9,0xe2,0x56,0x90,0x10,0xc7,0x59,0x25,0xb3,
    0x19,0x26,0xc4,0xed,0x39,0x49,0x94,0xb0,0x1c,0xe0,0xd6,0xa6,0x24,0x21,0xee,0xcf,
    0x4a,0x6c,0x91,0x10,0x47,0x42,0x7d,0x6a,0xef,0x1b,0x5c,0x7d,0xc0,0xa3,0x3e,0xa3,
    0x74,0x0e,0xaa,0x4d,0x42,0xde,0x6c,0xb6,0x93,0xcd,0xb2,0xb3,0xb9,0x8d,0xec,0xb5,
    0x73,0x36,0xb7,0x75,0x36,0xb7,0xa9,0xb3,0xb9,0x5d,0x42,0xde,0x6c,0xb6,0x97,0xcd,
    0x8a,0xb3,0xd9,0x41,0x36,0xdb,0x3b,0x9b,0x3b,0x39,0x9b,0x1d,0xea,0x6c,0x7e,0x27,
    0x21,0x6f,0xfa,0x9d,0x54,0x1f,0x5f,0xa7,0x5d,0x9d,0x7e,0xa7,0x3a,0xfd,0xdd,0x12,
    0xf2,0xa6,0xdf,0x59,0xba,0xbe,0xfc,0x3d,0x9d,0x7e,0xe7,0x3a,0xfd,0xbd,0x12,0xf2,
    0xa6,0xbf,0x9f,0x74,0xbd,0xfe,0xfe,0x4e,0x7f,0xbf,0x3a,0xfd,0x03,0x12,0xf2,0xe7,
    0x68,0x8c,0x7c,0x7f,0x33,0x63,0x64,0x98,0xb8,0x83,0x36,0xc3,0xd9,0xba,0x77,0x70,
    0x42,0x5d,0xc8,0x8c,0xd6,0x37,0x1b,0x87,0x24,0xc4,0x31,0xa7,0xba,0x25,0x9c,0x53,
    0xb8,0x62,0x9e,0x82,0xbf,0x3e,0xa3,0x0c,0xe6,0xd9,0x5b,0xf9,0xff,0x33,0xc5,0xa1,
    0x5e,0xd3,0x32,0x9e,0x89,0x06,0x37,0x38,0x29,0xb8,0xda,0x59,0xda,0x8c,0x6b,0x08,
    0xb8,0x61,0xe2,0x1e,0xd1,0x5c,0xee,0x9e,0x90,0x6f,0xac,0x9d,0xd9,0xae,0x96,0x86,
    0x8b,0xb7,0xd8,0x0b,0xbe,0x47,0x9e,0x86,0xab,0x3e,0xf8,0x3f,0x40,0x67,0xa4,0xfb,
    0x24,0x1c,0x77,0x18,0x27,0xe8,0xd7,0x1b,0x73,0x9b,0xa8,0xcb,0x11,0x09,0xb9,0xeb,
    0xb3,0x42,0xf6,0x07,0x92,0x43,0xff,0xed,0xe5,0x64,0xfb,0x25,0xe4,0xbc,0xec,0x71,
    0xb2,0x07,0xb9,0x03,0x9c,0x6c,0xff,0x84,0x9c,0x97,0x1d,0x98,0xb0,0x3c,0xd8,0xe9,
    0xef,0x64,0x07,0x25,0xe4,0x90,0xb6,0xc8,0x65,0x81,0x0d,0xd6,0x7c,0xd8,0x45,0xfc,
    0x53,0xf2,0xc1,0x29,0x09,0x39,0xf8,0x0f,0x6b,0xcf,0x50,0xd7,0x7e,0x70,0xa7,0xe6,
    0x69,0xa8,0xda,0x8f,0xff,0x93,0x55,0xc6,0x69,0x09,0xcf,0x9d,0x43,0x77,0x6a,0x8e,
    0xa1,0x3e,0x67,0xa8,0xcc,0xd3,0xd4,0x8f,0xa6,0x37,0xd4,0xf5,0x23,0xfa,0x6e,0xa0,
    0xfc,0x7a,0x86,0xec,0x43,0xf6,0x4c,0xc9,0xe2,0x6a,0x6b,0xd9,0x30,0xf5,0x4f,0x53,
    0x69,0xd3,0x71,0x81,0xfe,0x78,0x52,0xf5,0x3f,0x27,0x61,0xff,0x3f,0xa9,0xfa,0xb7,
    0xb8,0xfa,0x83,0x1b,0x91,0xa7,0x73,0xa5,0x77,0xae,0xe6,0x33,0xea,0x3f,0x52,0xbe,
    0x2c,0x95,0x0a,0x1f,0x9d,0x27,0x1f,0x55,0xc5,0x9b,0x6c,0xa3,0x64,0xcb,0x4e,0xf6,
    0x7c,0x27,0xdb,0x58,0xf3,0x33,0xc7,0x62,0x93,0xf0,0xce,0xb2,0x77,0xbe,0xb3,0x33,
    0x5a,0x76,0x2a,0xce,0xce,0x05,0xce,0xce,0x68,0x67,0xe7,0x42,0x67,0x07,0x36,0x2f,
    0x70,0xbe,0xbf,0x28,0xe1,0x59,0xfc,0x0b,0x9d,0xef,0x2f,0x96,0xed,0x8b,0xe4,0xcf,
    0x16,0xb5,0x79,0x44,0x5d,0xbe,0xc5,0xf5,0xc5,0xf4,0x8c,0x7a,0xf0,0x0b,0xce,0xfc,
    0x8f,0x70,0xf3,0x71,0x6c,0xc2,0x79,0x6b,0x63,0x6a,0x5c,0x42,0x0c,0x3a,0xc3,0xcb,
    0xac,0xe3,0x25,0x6e,0x8e,0x8f,0x53,0xac,0x18,0x21,0xae,0x75,0x33,0xdc,0xa3,0xea,
    0xb3,0x89,0x09,0x31,0xe8,0xdb,0x39,0x4c,0x7c,0x53,0x86,0xef,0x09,0xec,0x99,0xd9,
    0xa4,0x84,0x72,0xc0,0xb1,0x37,0x44,0xcc,0xa9,0x9d,0x01,0x72,0x76,0x27,0xd5,0xd9,
    0x9d,0x2c,0xbb,0x28,0xdb,0xec,0x4c,0x49,0x88,0xd7,0xdb,0xb9,0xc6,0xd9,0x99,0x22,
    0x3b,0xa7,0x96,0xb9,0x46,0x4e,0x15,0x87,0xf6,0xa3,0x3c,0xc3,0xa7,0x3b,0xfc,0x9a,
    0xa4,0xd8,0x57,0xde,0x94,0x50,0xa7,0xe4,0x9e,0x0d,0xff,0x2c,0x21,0xde,0xea,0xee,
    0xb9,0x6f,0x4e,0x88,0x7f,0xec,0xf6,0xa4,0x33,0xa4,0x5b,0x76,0xba,0xb7,0x26,0xc4,
    0xfd,0xfd,0xfa,0x6d,0x09,0xf1,0x65,0xee,0x7e,0xfd,0xf6,0x84,0x36,0x6f,0x73,0x75,
    0xb9,0x53,0xf6,0x2a,0xce,0xde,0xcf,0x13,0xe2,0xad,0x4e,0xf7,0xae,0x84,0xfa,0x3f,
    0x77,0xba,0xb3,0x12,0xb6,0xd1,0xb7,0xe3,0x9e,0x84,0xb8,0x6f,0xc7,0x2f,0x13,0xe2,
    0xbe,0x1d,0xf7,0x49,0xd7,0xb7,0xe3,0xfe,0x84,0xb8,0x6f,0xc7,0x03,0x09,0x71,0xdf,
    0x8e,0xd9,0x09,0x6d,0x3e,0xe0,0xea,0xf2,0x90,0xec,0xf9,0x76,0x3c,0x9c,0x10,0xf7,
    0xed,0x98,0x93,0x50,0x1f,0x9c,0xdd,0x53,0x8c,0x0f,0xd8,0x3e,0x70,0x88,0x09,0x13,
    0xdc,0xf9,0x3f,0x70,0x97,0xe4,0x69,0x82,0xce,0xb9,0xe0,0xbf,0xad,0x6f,0x97,0x69,
    0x2f,0x65,0xf9,0x49,0xda,0x4b,0x59,0xfe,0x2a,0xb7,0x97,0xc2,0x1c,0x99,0x1c,0x50,
    0x07,0x72,0xe0,0x6c,0xee,0x4c,0x09,0xd8,0x07,0x96,0xbf,0x36,0x60,0x5b,0x2e,0xd7,
    0x5c,0x9d,0x9b,0x10,0x9b,0xe2,0xe6,0xd7,0xbc,0x84,0xf9,0xb9,0x2e,0x8e,0x3f,0x2b,
    0x39,0x8f,0x3d,0x9f,0xb0,0xdc,0xb9,0xb2,0x07,0x6c,0x71,0x42,0x7c,0x9e,0xc3,0x96,
    0x26,0xd4,0x9f,0xe7,0xe2,0xc6,0x8b,0x09,0x65,0xc1,0x5d,0x21,0xec,0xe5,0x84,0x38,
    0xce,0x92,0x5f,0x26,0xec,0x95,0x84,0x38,0xbe,0x43,0x6a,0xb2,0xef,0xed,0x12,0xe2,
    0xd8,0x83,0x23,0xff,0xbb,0xa4,0xd8,0x83,0x2f,0x4b,0xb8,0xc6,0xb6,0xba,0x7d,0xe9,
    0x6b,0x09,0x65,0x26,0x28,0xbf,0x3c,0x21,0x66,0xf7,0x45,0xaf,0x27,0xc4,0x30,0x9f,
    0x7e,0x65,0xcf,0x6e,0x13,0xe2,0x77,0x96,0x8a,0xf9,0xfb,0x46,0x42,0xdc,0x9e,0x9d,
    0xbf,0x20,0xfd,0x37,0x25,0xfb,0x86,0xe2,0x9b,0xf5,0xe7,0x04,0x9d,0x5b,0xaa,0xcd,
    0xc1,0x8c,0x3a,0x88,0x79,0x90,0x47,0x5f,0x5b,0x59,0x37,0x07,0x1c,0x1f,0x77,0x69,
    0x8c,0xdc,0xea,0xc6,0x08,0xb8,0x19,0x38,0x3b,0x2c,0x9b,0xf8,0x6f,0xe5,0xde,0x1e,
    0xd0,0xee,0x58,0xad,0x49,0x26,0x73,0xab,0x2b,0xf7,0xce,0x8c,0x32,0xa8,0xcb,0xed,
    0xb2,0x75,0x8f,0xca,0xbd,0x27,0x60,0xd9,0xcd,0x7a,0x77,0x75,0xaf,0xf4,0x71,0xb5,
    0x36,0xaf,0xcc,0x28,0x67,0xf5,0x33,0x7c,0x95,0x70,0x1b,0xdb,0x36,0xa7,0x1e,0x09,
    0xa8,0xf3,0xa2,0x9b,0x17,0xbf,0x0e,0x28,0xff,0x88,0x3b,0x47,0xfc,0xb8,0xce,0xf8,
    0xe2,0xec,0xb0,0xe9,0x3e,0x11,0xb0,0xbe,0xe0,0xfe,0x5b,0xb1,0xf1,0xc9,0xa0,0x88,
    0x8d,0x4f,0x68,0xef,0x06,0x1f,0xcd,0xaf,0x3b,0x47,0x3b,0x2f,0x4f,0x6f,0xa8,0xfe,
    0xb8,0xe2,0x0c,0x39,0xce,0xd0,0xf5,0xcb,0x58,0xfe,0x83,0x5a,0x5f,0x0d,0x3f,0x26,
    0xa3,0xed,0x7e,0x5a,0x4b,0xd1,0xfe,0xf9,0xd2,0x9f,0xe7,0xf4,0x0f,0x91,0xfe,0x6a,
    0xad,0x95,0x86,0x1f,0x2a,0x7d,0xf0,0x0d,0x2e,0xf6,0xac,0x4c,0xbe,0x7d,0x6e,0xf7,
    0x6f,0x09,0x71,0x9f,0xec,0xdc,0xdf,0x27,0x09,0x79,0x7f,0xee,0xef,0x1f,0x09,0x71,
    0x7f,0xee,0xef,0xb3,0x84,0xb8,0x3f,0xf7,0xf7,0xaf,0x84,0xb8,0x3f,0xf7,0xf7,0x85,
    0xe4,0xfc,0xb9,0xbf,0xf5,0x09,0x71,0x7f,0xee,0xef,0xcb,0x84,0xfa,0xeb,0x5d,0x9c,
    0xfb,0x4a,0xba,0xfe,0xdc,0xdf,0x86,0x84,0xb8,0x3f,0xf7,0xf7,0x75,0x42,0xfd,0x0d,
    0x4e,0x17,0x1f,0x79,0x42,0xd7,0x9f,0xfb,0x2b,0xa7,0xc4,0xfd,0xb9,0xbf,0x4a,0x4a,
    0x7d,0x70,0xa6,0xbb,0x26,0xf9,0xf6,0xb9,0xdd,0x28,0x25,0xee,0x93,0xf9,0x2c,0x4e,
    0xc9,0x7b,0x9f,0x65,0x29,0x71,0xef,0xb3,0x2d,0x53,0xe2,0xde,0x67,0x6d,0x52,0xe2,
    0xde,0x67,0x5b,0x4b,0xce,0xfb,0xac,0x6d,0x4a,0xdc,0xfb,0xac,0x5d,0x4a,0xfd,0xb6,
    0xae,0xee,0xdb,0x4a,0xd7,0xfb,0x6c,0xbb,0x94,0xb8,0xf7,0xd9,0xf6,0x29,0xf5,0xb7,
    0x73,0xba,0x3b,0x4a,0xd7,0xfb,0xac,0x7d,0x4a,0xdc,0xfb,0xac,0x43,0x4a,0x7d,0x70,
    0x76,0x56,0xf2,0x83,0x84,0xbe,0x04,0x87,0xe7,0x1f,0xf8,0x9e,0xe5,0x03,0x77,0x3f,
    0xb5,0x47,0xca,0x18,0x88,0xe7,0x3f,0xf6,0x6c,0xa7,0x73,0xca,0x6f,0x9d,0xc1,0xe1,
    0x39,0x3a,0xbe,0x29,0xdc,0x33,0xe5,0xb7,0x30,0x63,0xdd,0x77,0x28,0x7b,0xa5,0xc4,
    0x37,0xbe,0x57,0x48,0x89,0xcd,0xd7,0x77,0x4c,0x1b,0xdf,0x2b,0xa4,0xe4,0x4c,0x6f,
    0xdf,0x3a,0xbd,0xfd,0x52,0x62,0xf5,0xef,0x2d,0xf6,0x4f,0xc9,0x99,0xde,0x81,0x75,
    0x7a,0xdf,0x4f,0x89,0xd5,0xbf,0xc7,0xe8,0x9a,0x92,0xb3,0xf3,0x16,0x07,0xa7,0x6c,
    0xd3,0xb2,0x52,0xd1,0x9e,0x43,0xd4,0x9e,0x83,0x9d,0xfd,0x6e,0x29,0x71,0x3b,0xff,
    0x74,0x98,0xf4,0x96,0xbb,0x73,0x47,0xdd,0x53,0xca,0x81,0xf3,0xef,0x6c,0x7a,0xa4,
    0xe4,0xcc,0x87,0xbd,0x52,0x7e,0xeb,0xb6,0x87,0xab,0x47,0x9f,0x94,0xb8,0xaf,0xc7,
    0xe1,0xaa,0x47,0x1f,0x57,0x8f,0x23,0x52,0xe2,0x56,0x8f,0x23,0xa5,0xb7,0xdc,0xed,
    0x2b,0x8e,0x4a,0x29,0x77,0x64,0x5a,0xac,0x4f,0x3f,0x48,0x89,0xfb,0xe7,0x76,0x47,
    0xa7,0xc4,0xd1,0xf7,0xf8,0x36,0x6a,0x43,0xa9,0x78,0xf6,0x75,0x4c,0xca,0xef,0xa5,
    0xe0,0xaf,0x1e,0x69,0xf1,0xec,0xeb,0xd8,0x94,0x9c,0xb5,0xe5,0xf8,0x94,0x76,0x9a,
    0xb4,0x96,0xd5,0xce,0xe7,0xa4,0x94,0x03,0x67,0x63,0x69,0x60,0x4a,0x1c,0xfd,0x66,
    0xf7,0x43,0x27,0xa5,0xec,0x7f,0x70,0xb6,0x0e,0x0f,0x4a,0x8b,0x75,0x18,0xfc,0x7a,
    0x7d,0x4f,0x6c,0xeb,0xf0,0xab,0x01,0xe3,0xfd,0x59,0xba,0xbf,0x9f,0x9d,0x16,0xb1,
    0x7d,0x90,0xe6,0xda,0xd9,0xe2,0x1e,0xda,0x0c,0x67,0x7b,0xaa,0x51,0x29,0x75,0x21,
    0x83,0xb5,0xa0,0x39,0x2d,0xd6,0x02,0x70,0xa3,0xd1,0x87,0x29,0x63,0xf9,0x68,0xd7,
    0xde,0x47,0xa5,0x03,0x5d,0xdb,0x47,0x3d,0x96,0x12,0x37,0x99,0x27,0x53,0x96,0xe7,
    0x65,0xe6,0xa6,0xc4,0x6d,0xef,0xf2,0x74,0x4a,0x0c,0xba,0xb6,0x77,0x99,0x97,0x12,
    0xc7,0x77,0xc7,0xb6,0x77,0x99,0x9f,0x12,0xc7,0xde,0xe5,0x7c,0xf9,0xe0,0x99,0x94,
    0xb8,0xed,0x45,0x16,0xa4,0xc4,0xac,0xaf,0x9f,0x4b,0x89,0xe1,0x7b,0x65,0x3b,0xeb,
    0xb9,0x30,0xe5,0x3e,0x04,0x9c,0x3d,0x97,0x5e,0x94,0x12,0xb7,0xe7,0xd2,0xe6,0xe3,
    0xc5,0x29,0x39,0xdb,0x23,0x2c,0x49,0xa9,0xb7,0x38,0xe5,0x1a,0x67,0x7e,0xc1,0xd5,
    0xf6,0x08,0x8f,0x69,0x6f,0x82,0x75,0x6f,0x89,0xfc,0x67,0x7b,0x93,0x96,0x94,0xfd,
    0xb6,0x8f,0xce,0x99,0xb6,0x3a,0x5f,0x83,0x1b,0x83,0xb6,0xc8,0xe6,0x04,0x95,0xd1,
    0xaa,0xfc,0x98,0xb4,0x78,0x17,0x31,0x4e,0xfd,0xf9,0x6a,0x50,0x9c,0x39,0x18,0x9f,
    0x12,0x9f,0xe6,0xe2,0xdf,0x25,0x29,0xeb,0x33,0xbe,0xce,0x56,0xab,0xab,0xef,0xe3,
    0xaa,0x2f,0xca,0xbb,0x44,0x75,0x30,0x5f,0x4d,0xac,0xab,0xef,0x14,0x57,0x5f,0x70,
    0x97,0xe7,0xe9,0x6a,0xd9,0xbc,0x5a,0x65,0x4c,0x51,0xfe,0x72,0x57,0xdf,0x2b,0x5d,
    0x7d,0x27,0xda,0xf7,0x1d,0x29,0x71,0x5f,0xdf,0xc9,0xaa,0xef,0x55,0x75,0xb6,0xa6,
    0xb8,0xfa,0x3e,0xa9,0xfa,0xa2,0xbc,0xc9,0xaa,0x83,0x3d,0xd7,0xbd,0xae,0xae,0xbe,
    0x33,0x5c,0x7d,0xc1,0x4d,0xcd,0xd3,0x0c,0xd9,0x9c,0xea,0xc6,0xc9,0xf5,0x2a,0x77,
    0xac,0xab,0xcb,0xf4,0x94,0xf8,0x72,0xb7,0x76,0xdc,0x90,0xd2,0x5f,0xd3,0x9d,0xee,
    0x4d,0xd2,0xc5,0x37,0xef,0x1b,0xef,0x11,0x53,0xe2,0xfe,0x1d,0xec,0x2d,0x29,0xeb,
    0xfe,0x33,0xb5,0xcd,0xea,0x31,0xc3,0xb5,0x6d,0x5e,0x46,0x19,0xb4,0xf7,0x16,0xd5,
    0xd7,0xb8,0xa7,0x33,0x96,0x0d,0xee,0x06,0x71,0xb6,0xaf,0xbb,0xcd,0xcd,0x6f,0xc8,
    0xc1,0xa7,0xc6,0xdd,0xe1,0xb8,0x79,0x59,0x71,0xbe,0x08,0xe3,0xfe,0xe7,0x9a,0xc3,
    0x88,0x2b,0x86,0xfd,0x42,0xf3,0x15,0x98,0xbd,0x5b,0xbf,0x3b,0x25,0x3e,0xc4,0xbd,
    0x5b,0x9f,0x99,0x52,0x1f,0x9c,0xcd,0x97,0x59,0x29,0x71,0x6b,0xf3,0x2f,0x53,0x62,
    0xb7,0xb9,0xb5,0xf6,0xbe,0x94,0x38,0xea,0x75,0x42,0x29,0xa9,0xed,0x37,0xfe,0x18,
    0x70,0x0f,0x08,0xae,0xaa,0xef,0x93,0xf5,0x19,0xfb,0x26,0x7b,0xc9,0xf9,0xda,0x8b,
    0x43,0xe7,0x4f,0x19,0xf7,0x9d,0xd8,0x9f,0x42,0x7f,0x86,0x1b,0x07,0x7f,0x51,0x6c,
    0xb4,0x77,0xb3,0x6f,0xbb,0xfd,0x2d,0xb8,0xbf,0xe6,0xe9,0x6d,0xd9,0xfc,0xab,0xfb,
    0x06,0xed,0x1d,0x7d,0x83,0xb6,0xde,0x9d,0xc5,0x5b,0x11,0x10,0xbf,0xca,0x9e,0xe9,
    0x07,0xc4,0x1a,0x4b,0x85,0xde,0x7b,0xd2,0x6b,0x72,0x7a,0xef,0x07,0xc4,0x4d,0x6f,
    0x65,0x40,0xac,0xd1,0x7d,0x53,0xb9,0x2a,0xa0,0xbd,0x95,0x41,0xf1,0x4d,0xe5,0x1a,
    0x7d,0x8b,0xb7,0x4a,0xdf,0xff,0xe1,0xbb,0xe9,0x0f,0xf5,0xcd,0xf4,0xf0,0x3c,0x8f,
    0xff,0x90,0xf9,0x93,0xde,0x53,0x58,0x3b,0xde,0xae,0xfb,0xbe,0x11,0xd7,0x0d,0xf9,
    0x0a,0xd2,0x2d,0x4f,0xff,0x01,0xb6,0x10,0x9b,0x69,0xa4,0x49,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = false;
//     bool punchthrough = false;
//
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = true;
//
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
