// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7b,0x90,0x97,0x55,
    0x19,0xfe,0xce,0x7b,0x96,0x05,0x5c,0xa7,0x04,0x2c,0x51,0x1a,0x70,0xa1,0x98,0xd2,
    0x65,0x05,0xc4,0x1d,0x61,0x17,0x21,0x81,0xd8,0x36,0x12,0xb7,0x66,0xbb,0xcc,0x36,
    0x29,0xe3,0xa6,0xb8,0xb0,0x30,0x6a,0x7f,0x54,0xc3,0x88,0x12,0x37,0x63,0x6a,0x9a,
    0x64,0x86,0x5a,0x07,0x28,0xac,0x56,0x2e,0x09,0x5a,0x8e,0x38,0xb2,0x63,0x2e,0xb7,
    0x26,0x12,0x35,0xd8,0x80,0x65,0x4d,0x52,0x52,0x93,0x99,0x9a,0x4c,0x2e,0x2a,0xb6,
    0x9d,0xf7,0x7b,0x9e,0x77,0xbf,0x97,0xdf,0xd0,0xce,0x9c,0xfd,0xbe,0xf7,0x79,0xde,
    0xdb,0x79,0xcf,0xed,0x3b,0xbf,0x28,0x63,0x06,0x66,0x31,0x64,0x97,0x64,0x83,0xb2,
    0x47,0x63,0x96,0xff,0x0d,0xc9,0x24,0x0b,0x7c,0x56,0xf3,0x39,0x81,0xcf,0xa9,0x7c,
    0xce,0x48,0xcf,0x8a,0xac,0x3c,0xd7,0x9b,0x3d,0xe7,0xcb,0x73,0xaa,0xef,0xfb,0x76,
    0x4b,0xf5,0xa4,0x1b,0xc6,0xab,0xfd,0x47,0x32,0x38,0x52,0xee,0xa3,0xd9,0xc0,0x6c,
    0x40,0x7a,0x96,0xa5,0xd6,0x36,0xef,0xee,0x45,0x8a,0x4f,0x4c,0x6d,0x4a,0x6a,0x97,
    0x25,0xfb,0xb2,0xdc,0x5f,0x96,0x4d,0xa7,0x7e,0xee,0x2f,0xa1,0x13,0x73,0xff,0x59,
    0x76,0x15,0xe5,0x29,0x94,0x47,0xa4,0x56,0x9f,0x3c,0xae,0x43,0xaa,0xd9,0x18,0x3e,
    0x0d,0x0b,0xc4,0xca,0x1c,0x26,0xc4,0x06,0x39,0x2c,0x12,0xbb,0xd4,0x61,0x65,0xc4,
    0x2e,0x73,0xd8,0x00,0x62,0x97,0x3b,0xac,0x9c,0xd8,0xf0,0x3c,0xb7,0xd8,0x1f,0x43,
    0xf3,0x7c,0x29,0x25,0x30,0x9a,0x39,0x99,0x5c,0xe9,0x64,0x91,0x0b,0x79,0x95,0x2b,
    0xfb,0xfb,0x1d,0x73,0xf9,0x4a,0x72,0x03,0x05,0x7d,0x56,0x79,0x58,0x8a,0xa0,0x31,
    0x2a,0x93,0x4e,0x64,0xbc,0x8f,0x25,0x1d,0xcd,0xe5,0x6a,0xda,0x5f,0xa1,0x36,0xcc,
    0xcf,0xf8,0x0a,0xf2,0x59,0xfe,0x2c,0xcb,0xfb,0x3b,0x90,0xb5,0x54,0xfd,0x21,0x7c,
    0x17,0xf2,0x43,0xc9,0x0f,0xa1,0x7c,0x05,0xe5,0x72,0xea,0x8f,0xa7,0x7e,0x24,0x3f,
    0x81,0xb1,0x15,0xaf,0xa5,0x3c,0x91,0xd8,0xb5,0xcc,0xaf,0x86,0xb5,0x37,0x7e,0x8a,
    0xe3,0x2b,0x72,0xbc,0xc8,0xaf,0x8e,0x5c,0x85,0xe3,0xa7,0x71,0x6c,0x4c,0x9e,0x95,
    0xcf,0xab,0xc2,0x7f,0xbd,0xe3,0x55,0x6e,0x28,0x89,0xdf,0xc8,0xfe,0x99,0x7d,0x53,
    0x09,0xdf,0xcc,0xfe,0x68,0xff,0xbe,0xc5,0xd8,0x3e,0x5e,0x2b,0xf3,0x37,0x79,0x01,
    0xe7,0x88,0xc9,0x0b,0x39,0x17,0xaa,0x52,0xa5,0xd4,0xbe,0x8d,0x7d,0x6a,0xa5,0xee,
    0x42,0xa7,0xbb,0x38,0xb5,0x3e,0x27,0x7f,0xaf,0x24,0xb7,0xa5,0xcc,0xc5,0x72,0xfb,
    0x49,0x6a,0xe3,0x52,0x1b,0x99,0x0d,0xee,0x9f,0x7b,0xff,0xaf,0x69,0xfd,0x7e,0x9a,
    0x9e,0x83,0x53,0x5b,0xc7,0x7a,0xab,0xfc,0x33,0x62,0xe6,0xb3,0xdd,0xe9,0x3f,0x42,
    0xae,0xdc,0xf1,0x1b,0x38,0x1e,0x97,0xa7,0xcc,0x36,0x3a,0xbc,0x83,0xfd,0x34,0xf9,
    0x49,0xae,0x0b,0x93,0x77,0xba,0xba,0xa8,0xdc,0xc9,0xf5,0x63,0x72,0x57,0x6a,0xa3,
    0x58,0xe7,0x43,0x8c,0xa9,0x75,0xfe,0x44,0xfa,0x7f,0x38,0x3d,0x0f,0xb1,0x5e,0xa6,
    0xdf,0x9d,0xef,0x25,0xa8,0xab,0x72,0x7f,0xe1,0x58,0x76,0x72,0x4e,0x75,0x3b,0xdd,
    0x23,0x25,0x7d,0x3c,0xca,0xb5,0x6d,0xb6,0xc7,0x68,0xdb,0x4e,0xdd,0xa3,0x4e,0xb7,
    0x87,0x73,0xdc,0x74,0x8f,0x73,0x0e,0xd5,0x93,0x3b,0xea,0xb8,0x5e,0x72,0xcd,0xcc,
    0xc3,0xfb,0x79,0x85,0x73,0xc7,0x74,0xff,0xea,0xf2,0xed,0x21,0x6f,0xba,0xaf,0xa6,
    0x76,0x89,0xd3,0x3d,0xe1,0xf2,0xab,0x21,0x6f,0xdc,0xdf,0x18,0xaf,0x9d,0x7e,0x3c,
    0xf7,0x1a,0xed,0xea,0x2f,0xc2,0xbd,0xce,0x5c,0x2d,0xfe,0x11,0xc7,0x9d,0x2c,0xe9,
    0xa3,0xe7,0xfe,0xee,0xfa,0x58,0xca,0xbd,0xe1,0xec,0xda,0x4b,0xb8,0x37,0x99,0x4b,
    0xf3,0x45,0xb8,0xb7,0x38,0xaf,0x1a,0xa8,0xe3,0xb9,0x7f,0xb8,0x7a,0xf6,0xb0,0xff,
    0xc6,0xbd,0xed,0xfa,0xd7,0xde,0xcf,0x0d,0xcb,0xe7,0xcb,0x29,0xce,0x89,0x63,0x1c,
    0xb3,0x5e,0xd6,0xfc,0x04,0x6b,0xf6,0x1a,0x6b,0x70,0x92,0x7d,0x7a,0x83,0x39,0xbe,
    0xc5,0x98,0x6f,0x73,0x0d,0xfc,0x93,0xe3,0x7f,0xd8,0x8d,0x4f,0x45,0xda,0x20,0xc2,
    0xf9,0xbe,0x3e,0x93,0x87,0x24,0xb9,0x2f,0x16,0xfc,0x50,0x95,0x93,0xd1,0xc7,0xd3,
    0x6a,0x1d,0x1e,0xb0,0xc7,0x2a,0xa7,0xef,0x23,0x75,0x73,0xc9,0xfe,0x7b,0xb3,0xc9,
    0xa3,0x72,0x79,0xe9,0x0c,0x93,0x3f,0x9d,0xcb,0xd9,0x34,0x93,0x27,0xe7,0xf2,0x89,
    0xe9,0xfd,0xfb,0x5d,0x40,0x3e,0x26,0xcf,0x0f,0xc5,0x3a,0x52,0x79,0x4d,0xb8,0x70,
    0xbd,0xae,0x0b,0xd8,0x53,0x74,0x5d,0x6d,0x4b,0xef,0x1b,0xb9,0xa7,0x5c,0x99,0x56,
    0xc4,0x0b,0x01,0x73,0x72,0x40,0x76,0xe1,0x5f,0xe0,0x73,0x44,0xca,0xff,0x60,0x12,
    0x5e,0x08,0xa8,0xc5,0x8b,0x24,0x14,0xab,0xa5,0xfc,0x12,0x31,0xf5,0x97,0xf1,0x4c,
    0x0a,0x25,0xfe,0xec,0x8c,0x55,0x1f,0x41,0x0a,0xb0,0x96,0xb2,0x10,0xb3,0x3e,0x94,
    0x0b,0xce,0xfc,0xaa,0xd4,0x03,0x3d,0x3b,0xf4,0xac,0x53,0xac,0x89,0xfb,0x73,0x55,
    0xca,0x58,0x6b,0xb0,0x22,0x62,0xcc,0x6b,0x1c,0xb6,0x32,0x62,0x4e,0x34,0x3a,0x6c,
    0x55,0xc4,0x1c,0x6a,0x76,0xfb,0xf0,0xea,0x88,0xfd,0xd6,0xb7,0x90,0xfa,0xab,0xdc,
    0x23,0x6e,0x2c,0x37,0xa5,0xf7,0xeb,0xf2,0x18,0x03,0xf2,0x7e,0x94,0x31,0x7d,0xdd,
    0x87,0xcf,0x25,0x64,0x00,0xf7,0x52,0x9d,0x27,0x6b,0x05,0x63,0x53,0xcb,0xb3,0xf2,
    0x24,0xc7,0xea,0x6c,0xd2,0x1e,0xc3,0x3e,0x7e,0x90,0xde,0x75,0xff,0xff,0xa4,0xc0,
    0x5e,0x9f,0x53,0x79,0x76,0x56,0x0b,0xce,0xc7,0xb9,0xc9,0x4a,0xcf,0xd8,0xeb,0x04,
    0x58,0xb5,0x14,0xe3,0xb2,0x84,0xe7,0xf8,0x78,0x01,0xbf,0x9c,0x7d,0x9c,0x28,0xc0,
    0xb4,0x26,0x9f,0x4d,0x98,0x9e,0x95,0xd7,0x0b,0xce,0x53,0x8d,0x37,0x95,0xb5,0x9d,
    0x24,0xc0,0xbb,0x92,0x8e,0xca,0x37,0x08,0xb0,0x69,0xf4,0x9d,0x9f,0xc9,0x02,0x7c,
    0x3f,0x75,0x26,0x53,0x67,0x96,0xd3,0x99,0x22,0xc0,0x55,0x47,0xe5,0x3a,0x81,0x9d,
    0xae,0xe1,0xe5,0xc4,0xa6,0x0a,0xd6,0xa6,0x72,0x8d,0xc4,0xa6,0x09,0x72,0xd5,0xbf,
    0x07,0x88,0x4d,0x17,0xe0,0xaa,0xff,0xa5,0x84,0x68,0x7f,0x16,0x45,0xe0,0xa6,0x6b,
    0x71,0x66,0x30,0x4e,0xa3,0x8b,0x33,0x93,0xf2,0x0c,0x17,0xe7,0x73,0xb4,0x0d,0x2e,
    0xce,0x6c,0x01,0x3e,0xd3,0xc5,0xb9,0x27,0x02,0xd7,0x78,0xc1,0xc5,0x69,0x10,0xf4,
    0x51,0xe7,0xcc,0x6e,0x62,0x73,0x88,0x69,0xac,0x5b,0x59,0xf7,0x2f,0x0a,0x74,0x95,
    0x7b,0x80,0xd8,0x5c,0x81,0x5f,0xe5,0x74,0x2c,0xf4,0x1c,0xed,0x08,0x38,0x6b,0x9b,
    0x39,0x16,0xea,0xef,0xb1,0x00,0xdc,0x74,0x36,0x53,0xa7,0xde,0xe9,0x6c,0x09,0xc0,
    0x2d,0xde,0xd6,0x00,0x3b,0xc5,0xb7,0x27,0x4c,0xd7,0xf4,0x6f,0x02,0x62,0x2a,0xd7,
    0x9e,0xec,0x74,0x8d,0x3f,0x4e,0x5c,0xe7,0xde,0x0e,0x2e,0xc8,0xf7,0x13,0xa7,0xf8,
    0xf6,0xd4,0x14,0xd3,0xf9,0xa7,0xef,0xef,0xa5,0xe7,0x18,0xce,0x47,0xc5,0x77,0x33,
    0xd6,0x53,0xf4,0xab,0x6b,0x6a,0x3f,0xb1,0x67,0x88,0xad,0x8a,0x45,0xad,0x77,0x05,
    0xe0,0x99,0x1b,0x93,0xce,0x80,0x7e,0x28,0x67,0x7a,0xcf,0x51,0xcf,0x8f,0xc9,0xef,
    0x03,0x74,0x95,0x33,0xdb,0x3d,0xb4,0x55,0xcc,0xf4,0xf6,0x07,0xe0,0xbb,0x42,0x31,
    0x1e,0x07,0x58,0x8b,0x46,0xd6,0x4b,0xf7,0xa5,0x97,0xb9,0x27,0x59,0xcc,0x43,0x01,
    0xfd,0x08,0x2e,0xb7,0xee,0x00,0xfc,0x80,0xd3,0x3b,0x42,0x3d,0x3f,0x2f,0x8f,0x06,
    0xe8,0x1e,0x71,0x63,0x74,0x8c,0x63,0xd4,0xe8,0xc6,0xa8,0x27,0x00,0x37,0xbb,0xe3,
    0x01,0xb6,0x8a,0xb7,0x24,0x1d,0xdd,0x3f,0x7b,0x99,0xdb,0x6d,0x49,0x47,0xf7,0x98,
    0x57,0x88,0x1d,0x67,0x0e,0xba,0xce,0xbe,0x22,0xc0,0x43,0x3e,0xbf,0xb0,0x4f,0xdd,
    0x2e,0xc0,0x7d,0xeb,0xa2,0x8f,0x79,0x02,0xbe,0x8d,0xf3,0x56,0xb1,0x16,0x01,0xbe,
    0x3a,0x16,0x7e,0xef,0x14,0xe0,0xfa,0xb7,0x87,0xd8,0x5d,0x02,0x7c,0x61,0x56,0xe8,
    0xdd,0x4d,0xbd,0xe0,0xf4,0x5a,0x05,0xb8,0x7e,0x7b,0xed,0x25,0xb6,0x40,0x60,0xdf,
    0x2a,0x85,0x6d,0x1b,0x6d,0xc5,0xd9,0x2e,0x12,0xe0,0xad,0xce,0x76,0xb1,0xc0,0x7e,
    0x91,0xb3,0xbd,0x87,0xb6,0xd1,0xd9,0xde,0x2b,0xc0,0x6b,0x9d,0xed,0x7d,0x02,0xfb,
    0x7b,0x9d,0xed,0xd7,0x59,0xb3,0xcc,0xd5,0xec,0x3b,0x02,0xdc,0x37,0xab,0xd9,0x77,
    0x05,0xbc,0xaf,0xd9,0x12,0x01,0xee,0x6b,0x76,0xbf,0x00,0xf7,0x35,0x5b,0x2a,0xc0,
    0x7d,0xcd,0x1e,0xa4,0x9e,0xaf,0xd9,0x32,0x01,0xee,0x6b,0xf6,0x7d,0x81,0xfd,0x32,
    0x97,0xfb,0x0a,0xda,0xfa,0x9a,0xad,0x14,0xe0,0xbe,0x66,0xab,0x04,0xf6,0x2b,0x9d,
    0xed,0x43,0xb4,0xf5,0x35,0xfb,0x81,0x00,0xf7,0x35,0x5b,0x23,0xb0,0x57,0x4e,0xf7,
    0x10,0x3d,0x57,0x9a,0x05,0xb5,0x54,0xee,0xa6,0xe4,0x41,0xcf,0xa9,0x66,0x29,0xd6,
    0xc7,0x7a,0xee,0x7b,0xba,0x36,0x97,0x11,0xdb,0x20,0xb8,0x6f,0xac,0x77,0x7b,0xda,
    0x46,0xc1,0x5a,0x68,0x77,0x6b,0xe1,0xe7,0x02,0x7c,0x6b,0xd2,0xd1,0x7d,0xe8,0x17,
    0x02,0x6c,0x03,0xcf,0xc1,0x6d,0x52,0xec,0x45,0xca,0x6d,0x4a,0xad,0x83,0x7b,0xcf,
    0x26,0xfa,0xd6,0x6f,0xf3,0x47,0x05,0xe7,0x67,0x93,0x3b,0xbb,0x7e,0x29,0xc0,0xed,
    0x0c,0xfa,0x95,0x00,0xfb,0x63,0x92,0x54,0xfe,0xb5,0x00,0xeb,0xe0,0x37,0x81,0xee,
    0x6b,0xdb,0xe8,0xbb,0xc3,0xf9,0x7e,0xec,0x22,0xbe,0x37,0x0b,0xf0,0x03,0xc9,0x93,
    0xca,0x5b,0x04,0x98,0xf9,0xb2,0x98,0x5b,0x05,0x9c,0xf7,0xad,0xcf,0xd3,0x69,0xee,
    0x29,0xff,0x50,0x44,0x1e,0xda,0x97,0xad,0xec,0x9b,0xc5,0x7d,0xfc,0x22,0x71,0xb7,
    0x0b,0x70,0x8b,0xbb,0x43,0x80,0x3d,0xc9,0x73,0xc0,0xe2,0x3e,0x21,0xe0,0xcc,0xee,
    0xb7,0x25,0x76,0xbf,0x13,0x60,0x3b,0x4b,0xec,0x9e,0x12,0x70,0xb6,0x67,0x3e,0x2d,
    0x18,0x4b,0xfd,0x9e,0xb6,0xbc,0x76,0x32,0xaf,0xa7,0x9d,0xff,0x67,0x04,0xb8,0x9d,
    0x87,0xcf,0xd2,0x4e,0xef,0x69,0x16,0x73,0x97,0x40,0xef,0x59,0x9e,0x89,0x16,0xb3,
    0x53,0xc0,0xd9,0xdc,0x79,0x4e,0xf0,0x1d,0xb5,0xde,0xe5,0xf1,0xbc,0x00,0xf7,0x79,
    0x74,0x31,0x8f,0xe7,0x5d,0x1e,0xbb,0x05,0xb8,0xe5,0xb1,0x97,0x76,0x5d,0x59,0xf1,
    0x0d,0xb3,0x4f,0xa0,0xb7,0xd7,0x7d,0xb3,0xec,0x17,0xe0,0x4d,0x2e,0xaf,0x3f,0x08,
    0x70,0x9d,0xf3,0xfa,0xad,0x76,0x2a,0x8f,0x5d,0x9e,0xff,0x8e,0x71,0x40,0xf0,0xfd,
    0xa6,0xf5,0xea,0x94,0x62,0x3e,0xff,0x49,0xc0,0x59,0x5f,0x0e,0x0a,0xfc,0xe8,0x77,
    0xce,0x3e,0x62,0x2f,0x0a,0xf4,0x0e,0xba,0x35,0xf4,0xb2,0x60,0x2e,0xd4,0xb8,0xf3,
    0xe4,0xcf,0x02,0x5c,0xc7,0xc7,0xd6,0xc7,0x61,0xc1,0xd8,0xda,0xfa,0xe8,0x75,0xeb,
    0x43,0xb9,0xee,0xd4,0x7a,0x38,0xcf,0xba,0x9d,0xff,0xa3,0x82,0xb8,0x4f,0x38,0xec,
    0x98,0x00,0xb7,0xb9,0xdf,0x4b,0xbb,0x1e,0xb9,0x50,0xee,0x75,0xf3,0x75,0x4d,0x84,
    0x5d,0x37,0xfd,0xf5,0x48,0x91,0xef,0xab,0x82,0x9c,0x55,0x67,0x33,0xd7,0xd8,0xeb,
    0x82,0x35,0xad,0x77,0x20,0xcd,0xd9,0xf0,0x37,0x89,0xeb,0x5d,0x48,0xef,0x3f,0x97,
    0x66,0x83,0x72,0xfc,0x14,0xf7,0xc6,0x71,0xf4,0xa7,0xf6,0xaa,0xab,0x76,0x7a,0xbf,
    0xf9,0x17,0xed,0x46,0xf2,0x2e,0xb4,0x98,0xf7,0x9e,0x7f,0x0b,0x6c,0x4d,0xfe,0x0f,
    0xed,0x56,0xa7,0xdc,0x54,0x7e,0x57,0xa0,0xa3,0xf8,0x0a,0x62,0x67,0x04,0xb8,0xfa,
    0x7c,0x90,0xd8,0x59,0x01,0xae,0xf7,0xaa,0x45,0x1c,0xd3,0x73,0x02,0x7c,0x09,0xe7,
    0xd8,0xa9,0x80,0xef,0x8b,0x79,0x01,0x35,0xb9,0x25,0x16,0xbf,0xb5,0x9c,0xe3,0x3e,
    0xde,0x42,0xee,0xd6,0x8b,0x70,0x36,0x96,0x43,0x23,0x6c,0x55,0x47,0xc7,0x72,0x78,
    0x2c,0xc6,0x52,0xb9,0x61,0xa9,0x29,0xa6,0x63,0xa0,0xef,0x36,0xa7,0xbe,0x4a,0x9b,
    0x5b,0x62,0xd1,0xdf,0xaf,0x45,0xe0,0xa6,0xd3,0x1c,0x11,0xcf,0xeb,0x7c,0x23,0x02,
    0xb7,0x9a,0x7c,0x33,0x02,0x53,0x5b,0xab,0xc9,0x6d,0x11,0xb8,0xde,0x23,0xad,0x26,
    0xb7,0x47,0xe0,0x5a,0x93,0x36,0xd6,0x60,0x5e,0x04,0x7e,0x3f,0xe5,0x3b,0x22,0x30,
    0x5b,0x4f,0x2d,0x11,0x98,0xde,0x3f,0xb7,0xb1,0xbf,0x77,0x46,0xfc,0x46,0xd5,0xe2,
    0xe6,0xc7,0x5d,0x11,0x78,0x03,0xef,0xf4,0x56,0xe3,0xf9,0x11,0xdc,0x3e,0xfb,0xae,
    0x88,0xb0,0x53,0x5c,0xe7,0xa6,0xd5,0x45,0x9f,0x3a,0x37,0x55,0xe7,0x87,0x11,0x67,
    0x99,0xce,0xd7,0x56,0xd6,0x6f,0x07,0x63,0x5f,0x15,0x31,0x6e,0xf3,0xf9,0x8d,0x3b,
    0xda,0xd5,0x5a,0xb9,0x11,0xa9,0x55,0xd2,0xa7,0xbe,0x2f,0x67,0xdc,0x91,0x1c,0xbf,
    0x53,0xfc,0x5e,0x53,0x6c,0x54,0x04,0xbe,0xc0,0x9d,0xa5,0x57,0x47,0xc4,0x1f,0xc5,
    0xfc,0x46,0xd3,0x57,0x65,0x89,0x3c,0xda,0xe5,0xfb,0xa3,0x08,0xbb,0x11,0xcc,0x5b,
    0x75,0xad,0x56,0x9f,0x2a,0xc9,0x77,0x9c,0xcb,0x57,0xb9,0xb1,0xa9,0x55,0xd1,0xe7,
    0x58,0x97,0xef,0x67,0x5c,0xbe,0xcb,0x88,0x5d,0x13,0x81,0xfb,0x7c,0xaf,0x65,0xbe,
    0xd7,0x30,0xbf,0x71,0xf4,0x55,0x55,0x22,0x8f,0x73,0xf9,0xfe,0x38,0xc2,0x6e,0x2c,
    0xf3,0x55,0xdd,0x2d,0xcc,0x77,0x7c,0x49,0xbe,0x75,0x2e,0x5f,0xe5,0x26,0xa4,0x56,
    0x47,0x9f,0x13,0xdc,0x3c,0xb9,0x9e,0x79,0x34,0xb9,0xdc,0x26,0x45,0xe0,0x5d,0xee,
    0xbb,0xa4,0x26,0xa2,0x5e,0x93,0x9c,0xed,0x8d,0xb4,0xd5,0xdf,0x30,0x6c,0x6f,0x9f,
    0x1c,0x81,0x37,0x38,0xdb,0xda,0x88,0xdc,0x27,0xb3,0x6f,0x96,0x47,0x9d,0xeb,0xdb,
    0x5a,0xea,0x68,0x7f,0x6b,0x99,0xaf,0x71,0x0f,0x33,0xb6,0x72,0x35,0xe4,0xe6,0x07,
    0x70,0x37,0xb9,0xf5,0xfd,0x30,0x6b,0x6c,0xdc,0x74,0xc7,0xad,0x25,0x67,0xe7,0xd2,
    0xcd,0x5c,0xc3,0xfa,0x7b,0x8b,0x61,0x33,0xb9,0xa6,0x15,0xdb,0x43,0x6c,0x56,0x04,
    0x5e,0xc3,0xfe,0xe4,0x77,0xd5,0x08,0x7b,0xe5,0x6c,0xbd,0xcc,0x8e,0xc0,0xad,0xcf,
    0x9f,0x8f,0xc0,0x34,0x3f,0xfb,0x8e,0xfb,0x42,0x04,0xae,0x79,0xcd,0xcd,0x06,0xe7,
    0xdf,0xb2,0xef,0x04,0xfc,0x7e,0xa1,0x5c,0x19,0x7f,0xdb,0x11,0xe6,0x6c,0x63,0xfb,
    0x2e,0xf7,0x3b,0x3b,0x73,0xce,0xb8,0xfb,0xa1,0x72,0xa7,0x75,0x2f,0xe5,0xfd,0xf0,
    0xb4,0xbb,0xfb,0x9c,0xe5,0xdd,0x67,0x83,0xfb,0xde,0x3b,0x17,0x80,0xaf,0x62,0x5f,
    0xde,0x0b,0xc0,0xea,0xb3,0xc2,0xee,0x7d,0xda,0x35,0x38,0xbb,0x0f,0x02,0x70,0xb3,
    0x3b,0x1f,0x80,0xd5,0xbb,0xbb,0xf5,0x87,0x01,0xfe,0xce,0x87,0xe2,0x6e,0xdd,0xc7,
    0x7b,0x9a,0x72,0xea,0x4b,0x3b,0x17,0xf9,0x1b,0xd2,0x1d,0x49,0xd6,0x77,0xd5,0x79,
    0x87,0xf7,0x5a,0xeb,0xc7,0x99,0x92,0x7b,0xae,0x3e,0x3f,0x4c,0x27,0xd3,0x8d,0xa9,
    0xfd,0x0f,0x32,0x31,0x62,0x5f,0xe8,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
