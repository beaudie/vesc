// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x96,0x55,
    0x15,0x7f,0xee,0xb9,0xbb,0x2c,0xa0,0x53,0x98,0xa4,0x01,0x85,0x2c,0xc4,0x4c,0xc6,
    0x02,0xab,0xb8,0xfa,0xe2,0xb2,0xa2,0xbb,0xc5,0x9a,0x51,0x14,0x3b,0x7d,0x48,0x13,
    0x68,0xcb,0x1a,0x34,0x2d,0x69,0x25,0x90,0xb0,0x2b,0xd0,0x2e,0xac,0x88,0x32,0x03,
    0x7f,0x38,0xe3,0x90,0x85,0x95,0x0a,0xa8,0xcb,0x54,0x50,0xd9,0x56,0xb4,0xae,0xec,
    0xc4,0x47,0x5f,0xbb,0x7e,0x20,0xe8,0x64,0xcd,0xe4,0x0c,0x7f,0x34,0x99,0xae,0xa8,
    0x90,0xdb,0x3d,0xcf,0xef,0x77,0x7a,0x0f,0xef,0x6c,0xef,0xcc,0x9d,0xe7,0x39,0xbf,
    0x73,0x7e,0xe7,0x9e,0x7b,0xee,0xb9,0xf7,0x3e,0xf7,0x8d,0x32,0xad,0x22,0x8b,0x21,
    0x1b,0x9b,0x8d,0xce,0x1e,0x8e,0x59,0xfe,0xbb,0x28,0x93,0x2c,0xf0,0x39,0x8b,0xcf,
    0x2b,0xf8,0xac,0xe3,0xb3,0x21,0x3d,0x2f,0xc8,0x46,0xe5,0x76,0x8d,0x0b,0x9b,0x16,
    0xce,0xfa,0xd6,0xb7,0x97,0xcf,0xba,0xaa,0xa6,0x5a,0xf9,0xef,0xc9,0xe0,0x48,0x75,
    0xef,0xcd,0x2a,0xb2,0xf2,0xf4,0x2c,0x4b,0xad,0xf5,0xd6,0x95,0xab,0x14,0x7f,0x36,
    0xb5,0x53,0xa9,0x8d,0x4b,0xfc,0xb2,0xdc,0x5f,0x96,0x5d,0x4f,0x7b,0x6d,0x37,0x26,
    0x46,0x0d,0x42,0xc9,0xa6,0xf1,0x69,0x58,0x20,0x56,0xe6,0x30,0x21,0x36,0xda,0x61,
    0x91,0xd8,0x85,0x0e,0x2b,0x23,0x36,0xce,0x61,0xe5,0xc4,0xc6,0x3b,0x6c,0x14,0xb1,
    0x0f,0xe8,0xd8,0x92,0x27,0xeb,0xa3,0x31,0x79,0x78,0x36,0x1f,0x77,0x96,0x4d,0xa4,
    0x7c,0x8a,0xf2,0x24,0xca,0xc7,0x52,0x80,0x53,0x19,0xb3,0xc9,0x95,0x4e,0x0e,0x72,
    0xbe,0x5e,0xe5,0x4a,0x8e,0x4b,0xfb,0x52,0x79,0x02,0x75,0xa3,0x04,0xbe,0x55,0xbe,
    0x38,0x45,0xa0,0x31,0x54,0x26,0x9b,0xc8,0x78,0xde,0xaf,0x36,0xe9,0x39,0x85,0xfe,
    0x2e,0x4d,0x72,0x05,0xe3,0x97,0x1c,0x2f,0xcb,0x73,0x52,0xc1,0xa6,0xf6,0x63,0x68,
    0x1f,0xa8,0x1f,0x4b,0xdd,0x18,0xf2,0xc7,0xf1,0xdd,0xf8,0xe3,0xa9,0x57,0x9f,0x33,
    0xc8,0x9f,0x9d,0xda,0x4c,0x27,0x57,0x33,0xdf,0x93,0x93,0x54,0x43,0xfe,0xff,0x6b,
    0xea,0xf3,0x6a,0xbe,0xab,0x6d,0x2d,0xe5,0x6b,0x88,0x99,0xcf,0x02,0xfb,0x54,0xfb,
    0xb9,0x8e,0x6f,0xfa,0x79,0x1c,0xf3,0x78,0xd6,0xe4,0x0c,0xe6,0xa2,0x9e,0x63,0x33,
    0xbb,0x05,0x9c,0x47,0x93,0x1b,0x59,0x27,0x26,0x2f,0xe6,0xdc,0x9b,0xdc,0xc4,0x3a,
    0x31,0xf9,0x66,0xd6,0x8b,0xc9,0x4b,0x59,0x33,0x26,0x37,0xa7,0x76,0x99,0x93,0x5b,
    0x98,0x3b,0xcd,0xe5,0x9d,0x8c,0xb9,0xcc,0xc5,0xb7,0x9a,0xfe,0x3e,0x98,0xe4,0x35,
    0xe9,0x79,0x27,0x31,0xe3,0xaf,0xcd,0xd7,0x4f,0x96,0x55,0xa5,0xac,0xab,0xee,0x3b,
    0xf4,0xb9,0x94,0xb1,0xaf,0x75,0xb6,0x77,0x95,0xe4,0x64,0x1d,0xeb,0xdd,0xb8,0xeb,
    0xc9,0x2d,0xd0,0x76,0x9d,0xb3,0x6d,0x2b,0xc9,0x53,0x3b,0xe7,0xd9,0xb8,0x77,0xd3,
    0xa6,0x89,0xba,0x75,0x4e,0xb7,0x81,0xba,0x6a,0xc6,0xe5,0xfd,0x6e,0xe4,0x7a,0x30,
    0xdb,0x4d,0x2e,0xfe,0x76,0xea,0xcd,0xf6,0xbb,0xa9,0x8d,0x75,0xb6,0x1d,0x2e,0xde,
    0x46,0xea,0x4d,0xd7,0xc9,0xfe,0x0a,0xf4,0xe3,0x75,0x9b,0xc9,0x6b,0x1a,0x41,0xb7,
    0x85,0xb1,0x5a,0xff,0x77,0x39,0x5d,0x57,0xc9,0x18,0xbd,0xee,0x1e,0x37,0xc6,0x52,
    0xdd,0x56,0xc7,0x2b,0x94,0xe8,0xee,0x65,0x2c,0xd5,0x23,0xe8,0xb6,0xb1,0x6e,0xdb,
    0x68,0xe3,0x75,0xf7,0xb9,0x7c,0xb6,0x73,0xfc,0xa6,0xbb,0xdf,0x8d,0xaf,0xf0,0x3f,
    0xdd,0xc5,0x79,0xfd,0x6c,0x67,0x8d,0xac,0xe7,0x9c,0x6d,0x60,0xce,0x3b,0x98,0xb3,
    0xcd,0xcc,0x41,0x17,0xc7,0xb4,0x95,0x31,0x6e,0x63,0x9f,0xf7,0x73,0x8d,0xed,0xe0,
    0xfc,0xaf,0x71,0xf3,0xd3,0xad,0x35,0x72,0x6e,0x78,0xd8,0xe4,0x03,0xa9,0x0d,0xc7,
    0xa2,0xfe,0xa0,0xca,0x89,0x74,0x49,0x5a,0xfd,0x3d,0xdc,0x57,0x54,0xa7,0xef,0xbd,
    0xf9,0xea,0x7c,0xb7,0xde,0xe4,0xa7,0x73,0xf9,0xee,0x06,0x93,0x8f,0x61,0xf9,0xce,
    0xd7,0x75,0x32,0xc0,0xb5,0x1e,0x19,0xcb,0x20,0x6b,0x73,0x80,0xfb,0xc3,0x20,0xcf,
    0x8c,0xe0,0xe4,0x53,0xae,0x7e,0x95,0xfb,0x12,0xf7,0x03,0xe5,0xbf,0x4c,0xdd,0x28,
    0xa7,0x7f,0xa5,0x64,0x1d,0xbe,0x9a,0x9f,0x4d,0x58,0xa7,0x12,0x60,0xeb,0xf5,0x15,
    0xa1,0xb8,0x4f,0xa8,0x3c,0x3a,0x60,0x1f,0xd1,0x39,0x51,0xfb,0x31,0x01,0x7d,0xaa,
    0xdd,0x6a,0xea,0xcd,0xf6,0x82,0xf4,0x3e,0xec,0xb8,0x97,0x04,0xec,0x09,0x26,0x4f,
    0x0a,0x18,0xab,0xe5,0x62,0xae,0x06,0x9b,0xfd,0xf5,0x7a,0xd3,0xcf,0x0f,0x98,0x0b,
    0x93,0x57,0x84,0xe2,0x9e,0xa3,0xf2,0xbd,0xe1,0xfc,0xfd,0xf8,0x01,0xf6,0xa7,0x63,
    0x79,0x3c,0xbd,0xd7,0x71,0x0f,0x9a,0x90,0xb4,0xbf,0xa7,0x6d,0x79,0x76,0xfe,0x2f,
    0xf0,0x39,0x29,0x45,0x72,0x24,0x09,0x6a,0xa7,0xb9,0x3b,0x4a,0x85,0x62,0xb5,0x94,
    0x8f,0x11,0x53,0x7f,0xc3,0xf4,0x17,0x4a,0xfc,0xd9,0x19,0xac,0x3e,0x72,0x41,0x6b,
    0x83,0x3e,0x54,0x0e,0xc4,0x6c,0x0c,0xe5,0x82,0x33,0xbf,0x2a,0x49,0xf9,0xfc,0x0b,
    0xb0,0x7a,0xee,0xe1,0x55,0x29,0x62,0xdd,0x27,0x3b,0x22,0xea,0xbd,0xd1,0x61,0x9d,
    0x11,0xeb,0xa1,0xc5,0x61,0x9b,0x23,0xd6,0x4f,0xb5,0x9b,0xa3,0x2d,0x11,0x73,0xe1,
    0x5b,0x48,0xe3,0x55,0xdd,0x83,0xae,0x8e,0x77,0x47,0x9c,0x69,0x57,0x27,0x5f,0xc2,
    0x3a,0xc8,0x58,0x8f,0x6f,0x25,0xa4,0x9c,0x75,0xa7,0x6b,0x64,0xa7,0x60,0x6e,0x6a,
    0x79,0xb6,0xfe,0x9d,0x73,0x75,0x26,0x59,0x4f,0xe5,0x18,0xcf,0xa6,0x77,0xad,0x8d,
    0x69,0x02,0xbe,0x3e,0xeb,0x58,0xe7,0x33,0x05,0xb5,0xbc,0x28,0xb1,0x94,0x37,0x4b,
    0x80,0xcd,0x94,0xe2,0xbc,0xac,0xe7,0x39,0x3c,0x5b,0xa0,0xef,0xe0,0x18,0xaf,0x10,
    0x60,0x9a,0x93,0x1b,0x12,0xa6,0x75,0x7e,0xa5,0x60,0x2d,0x68,0x7f,0x75,0xcc,0xed,
    0x1c,0x01,0xde,0x9b,0x6c,0x54,0xbe,0x4a,0x80,0xbd,0x42,0xdf,0xf9,0xd9,0x2b,0xc0,
    0xfb,0x69,0x53,0xa0,0xcd,0xab,0xce,0x66,0xae,0x00,0x57,0x1b,0x95,0x6b,0x05,0xbc,
    0xb6,0x0c,0x31,0xe5,0xe7,0xb0,0x60,0x5f,0x52,0xdd,0x67,0x89,0x5d,0x27,0x88,0x35,
    0xcb,0xf7,0x23,0x60,0xf3,0x05,0xb8,0xda,0x2f,0x4e,0x3d,0xea,0x78,0x5a,0x23,0x70,
    0xb3,0xb5,0x7e,0xea,0xd9,0x4f,0x8b,0xeb,0xa7,0x81,0x72,0xbd,0xeb,0xe7,0xe3,0xe4,
    0x06,0xd7,0xcf,0x02,0x01,0xde,0xe0,0xfa,0xb9,0x3d,0x02,0xd7,0xfe,0x82,0xeb,0xe7,
    0x13,0x82,0x31,0x56,0xe7,0xfb,0x13,0xb0,0x4f,0x12,0xd3,0xbe,0x3e,0xc3,0xbc,0x2f,
    0x14,0xd8,0xaa,0x6e,0x03,0xb1,0x4f,0x0b,0xfc,0xaa,0x4e,0xe7,0x42,0xbf,0x51,0x1e,
    0x0d,0xf8,0x8e,0xa9,0xe6,0x5c,0xa8,0xbf,0xc7,0x02,0x70,0xb3,0xd9,0x43,0x9b,0x26,
    0x67,0xb3,0x37,0x00,0xb7,0xfe,0xf6,0x05,0xf0,0x14,0xef,0x4e,0x98,0xae,0xe9,0x27,
    0x02,0xfa,0x54,0xdd,0x83,0x89,0xa7,0x6b,0xfc,0x49,0xe2,0x5a,0x7b,0xfb,0xb9,0x20,
    0xdf,0x49,0x3a,0xc5,0xbb,0x53,0x53,0x4c,0xeb,0x4f,0xdf,0xdf,0x4e,0xcf,0xa9,0xac,
    0x47,0xc5,0x9f,0x66,0x5f,0x07,0xe8,0x57,0xd7,0x54,0x3f,0xb1,0x5f,0x12,0xd3,0x35,
    0x65,0xb9,0xee,0x09,0xc0,0x33,0x37,0x27,0xbf,0x0e,0x18,0x87,0xea,0xcc,0xee,0xb7,
    0xb4,0xf3,0x73,0x72,0x28,0xc0,0x56,0x75,0xc6,0xed,0x23,0x57,0x31,0xb3,0xeb,0x0f,
    0xc0,0x7b,0x02,0x72,0xa3,0x7b,0xd0,0x71,0xee,0x3f,0xe6,0xff,0x8f,0x01,0x31,0x7b,
    0xff,0x7f,0x61,0xbe,0xfc,0x3c,0x0e,0x04,0xe0,0xbe,0x86,0x06,0x03,0xf8,0x03,0xce,
    0xdf,0x73,0xf4,0xe7,0x6b,0xf5,0xf9,0x00,0xdb,0xe7,0xdc,0xbc,0xbd,0xc0,0x79,0x6b,
    0x71,0xf3,0x76,0x22,0x00,0x37,0xde,0x8b,0x01,0x5c,0xc5,0x97,0x27,0x1b,0xdd,0x53,
    0x4f,0x72,0x0c,0xcb,0x74,0x6f,0x49,0xcf,0x53,0xc4,0x5e,0x64,0x0c,0xba,0xf6,0x3e,
    0x27,0xc0,0x43,0x5e,0x73,0xd8,0xbb,0x96,0x09,0x70,0xdf,0x7a,0xe9,0xe3,0x16,0x81,
    0x5e,0xcf,0xa0,0x7e,0x62,0xcd,0x02,0x7c,0x4b,0x2c,0xfa,0x6d,0x11,0xe0,0xfa,0xeb,
    0x23,0x76,0x9b,0x00,0x1f,0xed,0xfa,0x5f,0x41,0xbb,0xe0,0xec,0x56,0x0a,0x70,0x3d,
    0xdb,0x9e,0x21,0xf6,0x35,0x01,0x7f,0xa5,0x14,0xb9,0x5f,0x27,0x57,0x1c,0xb7,0x55,
    0x80,0xeb,0xd9,0x68,0xdc,0x55,0x02,0x7e,0xab,0xe3,0xde,0x4e,0x6e,0x74,0xdc,0x3b,
    0x04,0xf8,0x4b,0xae,0xdf,0x6f,0x0a,0xf8,0x77,0x38,0xee,0x17,0x99,0xb3,0xcc,0xe5,
    0x6c,0x8d,0x00,0xf7,0xcd,0x72,0xb6,0x56,0xa0,0xf7,0x39,0x5b,0x27,0xc0,0x7d,0xce,
    0xda,0x04,0xb8,0xcf,0x59,0xbb,0x00,0xf7,0x39,0xdb,0x40,0x3b,0x9f,0xb3,0x8d,0x02,
    0xdc,0xe7,0x6c,0x93,0x80,0xbf,0xd1,0xc5,0xde,0x41,0xae,0xcf,0x59,0xa7,0x00,0xf7,
    0x39,0xdb,0x2c,0xe0,0x77,0x3a,0x6e,0x17,0xb9,0x3e,0x67,0xf7,0x08,0x70,0x9f,0xb3,
    0xad,0x02,0xbe,0xea,0x74,0x5f,0xd1,0xb3,0x66,0x89,0x20,0x97,0xaa,0xbb,0x2e,0x79,
    0xd0,0xb3,0x6b,0x89,0x14,0xd7,0xc7,0x2e,0xee,0x85,0xba,0x5e,0x37,0x11,0xfb,0x9e,
    0xe0,0x6c,0xdc,0xe5,0xf6,0xb9,0x87,0x04,0x6b,0xa1,0xe0,0xd6,0xc2,0xf7,0x05,0xf8,
    0xbe,0x64,0xa3,0x7b,0xd3,0x0f,0x04,0xd8,0x3c,0x9e,0x8d,0xfb,0xa4,0xb8,0x3f,0xa9,
    0x6e,0x77,0x6a,0x8f,0x70,0x3f,0xda,0x4d,0xdf,0x7a,0x0f,0x7b,0x58,0x70,0xa6,0xd6,
    0xbb,0xf3,0xec,0x87,0x02,0xdc,0xce,0xa5,0x1f,0x09,0xb0,0x23,0x49,0xab,0xf2,0x8f,
    0x05,0xd8,0x02,0x7e,0x27,0xe8,0x5e,0xb7,0x8f,0xbe,0x1f,0x71,0xbe,0x1f,0x1d,0xc1,
    0xf7,0x63,0x02,0xfc,0x68,0x92,0x54,0xde,0x23,0xc0,0xcc,0x97,0xf5,0xb9,0x57,0xa0,
    0xf3,0xbe,0xf5,0x39,0x94,0x32,0xab,0xfa,0xae,0x88,0x38,0x74,0x2c,0x7b,0x39,0x36,
    0xeb,0xf7,0x89,0x11,0xfa,0x7d,0x52,0x80,0x5b,0xbf,0xdd,0x02,0x6c,0x31,0xcf,0x06,
    0xeb,0x77,0xbf,0x40,0x67,0xbc,0x9f,0x94,0xf0,0x7e,0x2a,0xc0,0x6e,0x2e,0xe1,0xfd,
    0x4c,0xa0,0xb3,0xfd,0xf0,0xa0,0x60,0x2e,0xf5,0x7e,0x61,0x71,0xfd,0x9c,0x71,0x1d,
    0x74,0xfe,0x7f,0x21,0xc0,0xed,0x8c,0x7c,0x8a,0x3c,0xbd,0xe7,0x5a,0x9f,0xbf,0x12,
    0xd8,0x3d,0xc5,0x73,0xd2,0xfa,0xec,0x11,0xe8,0xac,0x76,0x7e,0x23,0xf8,0xb6,0xda,
    0xe5,0xe2,0x38,0x24,0xc0,0x7d,0x1c,0xbf,0x63,0x1c,0x87,0x5c,0x1c,0xbd,0x02,0xdc,
    0xe2,0xe8,0x23,0xaf,0x39,0x2b,0x7e,0xd7,0x3c,0x23,0xb0,0xeb,0x73,0xdf,0x31,0x87,
    0x05,0x78,0xbd,0x8b,0xab,0x5f,0x80,0x6b,0xcd,0xeb,0xf7,0xdb,0xf6,0xbc,0xef,0x51,
    0xf9,0xdd,0xf3,0x88,0xe0,0x9b,0x4e,0xf3,0xd5,0x23,0xc5,0x7a,0x3e,0x2a,0xd0,0xd9,
    0x58,0x8e,0x0b,0xfc,0xe8,0xb7,0xcf,0x61,0x62,0x7f,0x10,0xd8,0x1d,0x77,0x6b,0xe8,
    0x4f,0x82,0x5a,0x68,0x74,0xe7,0xc9,0x9f,0x05,0xb8,0xce,0x8f,0xad,0x8f,0x01,0xc1,
    0xdc,0xda,0xfa,0x38,0xe9,0xd6,0x87,0xea,0x06,0x53,0x3b,0xc1,0x3a,0x1b,0x74,0xfe,
    0x9f,0x17,0xf4,0xbb,0xdf,0x61,0x2f,0x08,0x70,0xab,0xfd,0x93,0xe4,0x9d,0x90,0xf3,
    0xe5,0x93,0xae,0x5e,0xb7,0x46,0xf0,0x06,0xe9,0xef,0x84,0x14,0xe3,0x7d,0x59,0x10,
    0xb3,0xda,0xec,0xe1,0x1a,0xfb,0x9b,0x60,0x4d,0x77,0xf3,0x0e,0x6b,0xf8,0x3f,0x88,
    0x1f,0xe0,0x7d,0xf0,0xc2,0xf4,0x55,0xac,0xf8,0x69,0xee,0x8d,0x33,0xe9,0x4f,0xf9,
    0x6a,0xab,0x3c,0xbd,0xf3,0xfc,0x93,0xbc,0x5e,0xde,0x0d,0xbf,0xc1,0xbb,0xd0,0xbf,
    0x04,0x5c,0x93,0xff,0x4d,0x5e,0x57,0x8a,0x4d,0xe5,0xd7,0x05,0x36,0x8a,0x77,0x12,
    0x1b,0x12,0xe0,0xea,0x73,0x23,0xb1,0x37,0x05,0xb8,0xde,0x33,0x57,0x71,0x4e,0xcf,
    0x08,0xf0,0xf5,0xac,0xb1,0xd3,0x01,0xdf,0x1c,0xb7,0x06,0xe4,0xe4,0x53,0xb1,0x78,
    0x37,0x3b,0xc3,0x7d,0x7c,0x39,0x75,0x8b,0x46,0xd0,0xd9,0x5c,0x5e,0x14,0xc1,0x55,
    0x1b,0x9d,0xcb,0x4b,0x63,0x71,0x2e,0x55,0xf7,0xbe,0xd4,0x14,0xd3,0x39,0xd0,0x77,
    0xab,0xa9,0xcf,0x93,0xa3,0x5c,0x1b,0xef,0x17,0x22,0x70,0xb3,0x59,0x12,0xd1,0x9f,
    0xb7,0xf9,0x52,0x04,0x6e,0x39,0xf9,0x72,0x04,0xa6,0x5c,0xcb,0xc9,0xd2,0x08,0x5c,
    0xef,0x96,0x96,0x93,0x65,0x11,0xb8,0xe6,0xa4,0x95,0x39,0xb8,0x25,0x02,0x6f,0xa7,
    0xfc,0x95,0x08,0xcc,0xd6,0x53,0x73,0x04,0xa6,0x77,0xd2,0xc7,0x39,0xde,0x96,0x88,
    0x3b,0x6d,0xb3,0xab,0x8f,0xdb,0x22,0xf0,0x36,0xd6,0x87,0xe5,0xf8,0xab,0x11,0xba,
    0xc3,0xf6,0x5d,0x11,0xc1,0x53,0x5c,0x6b,0xd3,0xf2,0xa2,0x4f,0xad,0x4d,0xb5,0xd9,
    0x16,0x71,0x96,0x69,0xbd,0xae,0x64,0xfe,0xf6,0xb3,0xef,0x09,0x11,0xf3,0xb6,0x82,
    0xdf,0xbd,0x95,0x2e,0xd7,0xaa,0x9b,0x98,0xda,0x14,0xfa,0xd4,0xf7,0x0e,0xf6,0xfb,
    0x21,0xce,0xdf,0x69,0x7e,0xaf,0x29,0x36,0x39,0x02,0x5f,0xed,0xce,0xd2,0xcb,0x22,
    0xfa,0x9f,0xcc,0xf8,0x2a,0xe9,0x6b,0x4a,0x89,0x5c,0xe9,0xe2,0xbd,0x2f,0x82,0x37,
    0x91,0x71,0xab,0xad,0xe5,0xea,0xc3,0x25,0xf1,0x56,0xb9,0x78,0x55,0x37,0x5d,0xef,
    0xa1,0xf4,0x39,0xdd,0xc5,0xfb,0x11,0x17,0xef,0x26,0x62,0x97,0x47,0xe0,0x3e,0xde,
    0x8f,0x32,0xde,0xcb,0x19,0x5f,0x15,0x7d,0xcd,0x28,0x91,0xab,0x5c,0xbc,0xdb,0x23,
    0x78,0xd3,0x19,0xaf,0xda,0xee,0x65,0xbc,0xb3,0x4b,0xe2,0xad,0x75,0xf1,0xaa,0xae,
    0x3a,0xb5,0x5a,0xfa,0xac,0x76,0x75,0x72,0x25,0xe3,0xa8,0x77,0xb1,0xcd,0x89,0xc0,
    0x9b,0xdd,0x77,0x49,0x4d,0x44,0xbe,0xe6,0x38,0xee,0x35,0xe4,0xea,0xff,0x1a,0xb6,
    0xb7,0x17,0x22,0xf0,0x36,0xc7,0xbd,0x36,0x22,0xf6,0x02,0xc7,0x66,0x71,0xd4,0xba,
    0xb1,0xed,0xa4,0x8d,0x8e,0xf7,0x5a,0xc6,0x6b,0xba,0x1d,0xec,0x5b,0x75,0x35,0xd4,
    0xad,0x08,0xd0,0xd5,0xb9,0xf5,0xbd,0x83,0x39,0x36,0xdd,0x7c,0xa7,0xdb,0x49,0x9d,
    0x9d,0x4b,0x37,0x70,0x0d,0x3f,0x10,0x8a,0x58,0x03,0xd7,0xb4,0x62,0x7d,0xc4,0x3e,
    0x16,0x81,0x37,0x72,0x3c,0xf9,0xfd,0x35,0x82,0xaf,0x3a,0x5b,0x2f,0x0b,0x22,0x70,
    0x1b,0xf3,0x8d,0x11,0x98,0xc6,0x67,0xdf,0x71,0x37,0x45,0xe0,0x1a,0xd7,0xa2,0xe4,
    0x49,0xbf,0x65,0x5f,0xe3,0x7f,0x1a,0xaa,0x2b,0xe3,0xff,0x3d,0xc2,0xff,0x30,0x6c,
    0x6e,0x5f,0xe7,0x7e,0x67,0x67,0xce,0x90,0xbb,0x33,0xaa,0xee,0x8d,0xd4,0x86,0x78,
    0x67,0x7c,0xc3,0xdd,0x7d,0xde,0xe4,0xdd,0x67,0x9e,0xfb,0xde,0x3b,0x13,0x80,0x6f,
    0xe1,0x58,0xde,0x0a,0xc0,0x9a,0xb2,0x22,0xef,0x6d,0xf2,0xda,0x1c,0xef,0x9d,0x00,
    0xdc,0x78,0x67,0x03,0xb0,0x26,0x77,0xdf,0x3e,0x17,0xe0,0xef,0x6c,0x28,0xde,0xb7,
    0xdf,0xe5,0x3d,0xed,0x1c,0xef,0x86,0xfa,0xdf,0x92,0xf0,0x7f,0xa5,0x66,0xfd,0x0f,
    0x4f,0x60,0xf3,0x1a,0xef,0xba,0x36,0x8e,0xa1,0x92,0xbb,0xaf,0x3e,0xff,0x93,0x4e,
    0xa6,0x42,0x6a,0xff,0x05,0x0a,0xfb,0x93,0xc2,0xfc,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(kAlphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         ivec3 dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
