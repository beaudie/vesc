// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5c,0x09,0xb4,0x55,0xc5,
    0x95,0x7d,0xff,0xbd,0x77,0xef,0xad,0x7b,0x1f,0x12,0x87,0xa8,0x71,0x08,0x0e,0x18,
    0x45,0x05,0x33,0x98,0x38,0x04,0x11,0x50,0x4c,0x74,0xb5,0x03,0xc6,0x6e,0x87,0x10,
    0x65,0x14,0x1c,0xf8,0x7e,0x8c,0x34,0x08,0x1a,0xfc,0x26,0xda,0x66,0xb5,0x82,0xc4,
    0x68,0x1b,0x8d,0x40,0x54,0xe8,0x30,0x68,0x2b,0xa0,0xc1,0x01,0x1c,0x70,0x04,0x43,
    0xb4,0x95,0xc4,0x19,0x21,0x0c,0xe2,0x17,0x04,0xe3,0xc0,0x18,0xe9,0xbb,0xdf,0xde,
    0x87,0x7b,0x78,0xda,0xac,0x55,0xfe,0x57,0x7b,0x9f,0x73,0xaa,0xea,0xd4,0xa9,0x53,
    0x75,0x27,0x2b,0xe5,0x8e,0x49,0xa9,0xd2,0x54,0xca,0x4a,0xa1,0x54,0x6b,0x57,0xaa,
    0xff,0xdb,0xa5,0x54,0x2e,0x35,0xe9,0xef,0x11,0xfa,0xdb,0x4d,0x7f,0x7b,0xea,0xef,
    0x89,0xf9,0xdf,0x5a,0x29,0xae,0xcb,0xfd,0xf8,0xd4,0xb3,0x4e,0x3d,0xe2,0x8a,0xe1,
    0x83,0x8e,0xf8,0xfe,0x0f,0xbe,0x03,0xfd,0xf6,0xa5,0x4a,0xdd,0x0e,0xb8,0xaf,0xe5,
    0x76,0xa3,0xfc,0x6f,0x35,0x2f,0xcd,0xfd,0x2f,0xbe,0x0c,0xf8,0x39,0x79,0xe9,0x9b,
    0x97,0x65,0xb9,0xc0,0xce,0xb9,0x8d,0x6a,0xdd,0x66,0xa9,0xd4,0x43,0x3a,0x75,0x9b,
    0x39,0x7a,0x4e,0xbd,0x8d,0x52,0x69,0x6f,0xd5,0xfb,0xaa,0xbe,0x4f,0xbd,0x5e,0xa9,
    0xeb,0x97,0xc4,0xe1,0x37,0xb8,0x43,0xf3,0x72,0x72,0xde,0xe2,0xa0,0x32,0xb9,0x8e,
    0xfc,0xb3,0x1d,0x6b,0x12,0x56,0x75,0x58,0x59,0x58,0x70,0x58,0x45,0x58,0x3b,0x87,
    0x55,0x85,0xed,0xec,0xb0,0x48,0xd8,0xd7,0x1d,0x16,0x0b,0xfb,0x86,0xfa,0x69,0x6d,
    0xa0,0x9f,0x67,0xe5,0x0a,0x07,0x96,0x8a,0x7e,0xa3,0x7e,0x80,0xab,0x2f,0x6d,0xe0,
    0x97,0x8a,0x6f,0x92,0x2d,0xd4,0xf7,0x12,0xb7,0x2e,0xe2,0x98,0xf7,0x12,0xb7,0x4f,
    0x46,0xbd,0xdd,0xf2,0xd6,0xd0,0xde,0x01,0x39,0x86,0x71,0xe0,0xf7,0xee,0xb9,0x3c,
    0xfa,0xb5,0xbf,0x6c,0xed,0x99,0xd7,0x93,0x12,0xfb,0x6a,0x7c,0x4d,0x7c,0xa9,0xfe,
    0xb7,0x5a,0x1f,0x7b,0x22,0x9f,0x43,0x7e,0x17,0xfd,0x2e,0x8b,0xdf,0x55,0xfc,0x2e,
    0xaa,0xef,0xa9,0x3a,0x6c,0xee,0x91,0xb7,0xfc,0x4d,0xd9,0x83,0x6e,0x87,0xfc,0x2f,
    0xea,0x15,0xd5,0x0f,0x96,0xad,0x8a,0x74,0xbb,0x4b,0x37,0x11,0xdf,0x43,0x7c,0xb5,
    0xee,0xdb,0x72,0xe9,0x04,0xe1,0xbd,0x64,0xbf,0x2a,0xbd,0xb3,0x35,0x1e,0xd8,0xeb,
    0xaa,0xfa,0x39,0xc2,0x0e,0xd7,0x98,0xfb,0x68,0x6e,0x8d,0xef,0xeb,0x78,0xb4,0xd1,
    0xcf,0x8d,0xb9,0xbf,0xb8,0x9a,0xe3,0x07,0xa9,0x3d,0xab,0x5f,0x52,0x8f,0xeb,0xc2,
    0x7e,0xb3,0xe3,0x51,0x6f,0x69,0x68,0x7f,0x84,0x7c,0x66,0xfa,0xa3,0x1b,0xf8,0x56,
    0xf9,0xc1,0xf8,0xb1,0xea,0xaf,0xd5,0xc7,0x29,0xe6,0xac,0x7e,0xb3,0x62,0xab,0x73,
    0xee,0x2d,0xf8,0x69,0xbc,0xc6,0x30,0x56,0xb2,0x37,0x3b,0xd9,0x5b,0xf2,0xb2,0xcd,
    0xd5,0x27,0x34,0xf4,0xe5,0x1e,0xd7,0x36,0xfa,0xf2,0x70,0x5e,0xba,0xb8,0xfa,0x5c,
    0xb5,0x65,0xf5,0xf9,0x8a,0x75,0xab,0xbf,0xe8,0xfa,0x86,0xfa,0xa2,0x12,0xd7,0x84,
    0xd5,0x5f,0xcd,0xcb,0x7e,0x79,0xd9,0x37,0xaf,0x2f,0xcf,0xff,0xf6,0x52,0x1f,0x8d,
    0x5f,0x51,0xcf,0x17,0x1c,0x0b,0xb8,0x95,0xf2,0xd7,0x22,0xcd,0xdb,0x0a,0x27,0xbb,
    0x4a,0x73,0x6f,0xf5,0xf7,0xf3,0x92,0xba,0xfa,0x6a,0xad,0x57,0xb3,0xf5,0x81,0x6c,
    0xad,0x92,0xec,0x6a,0x27,0xdb,0xa6,0x58,0x33,0xd9,0x0f,0x35,0x6f,0xcd,0xe2,0x56,
    0x3b,0x6e,0x8d,0xb8,0x56,0xf5,0xcb,0xdb,0x59,0xab,0x58,0x31,0xd9,0x8f,0x5c,0xff,
    0xdb,0xc4,0x9b,0xec,0xba,0xbc,0x64,0x4e,0x76,0xbd,0xeb,0x5f,0x1f,0xf1,0xc6,0x7d,
    0xac,0xf6,0x56,0xc9,0x8e,0xe7,0xfe,0x21,0xbd,0xe6,0xaf,0xe0,0x3e,0x51,0x5f,0xad,
    0xfd,0xf7,0x1d,0xf7,0x69,0xc3,0x18,0x3d,0xf7,0x99,0x1b,0x63,0x23,0xf7,0xb9,0xd3,
    0x5b,0xd5,0xc0,0x6d,0x50,0x5f,0x5a,0x1d,0x67,0xe3,0xdd,0xa8,0x75,0x65,0xb2,0x9b,
    0x84,0xb5,0x48,0xc7,0xdb,0xd9,0xec,0xfc,0xdb,0x26,0x7f,0x18,0xb7,0xc5,0x8d,0x77,
    0xd5,0x76,0x6e,0xb7,0x7a,0x3c,0x6d,0x55,0xcc,0x7c,0xa0,0x39,0x5c,0xa3,0x39,0x58,
    0x2f,0x1f,0xfe,0x43,0x3e,0xf9,0x54,0x63,0xfc,0x5c,0x7d,0xde,0xa4,0x36,0xb7,0x68,
    0xdd,0x6f,0x53,0x3c,0x2c,0x77,0xfd,0xdf,0xa9,0xa9,0x58,0x3b,0xc8,0x5d,0x87,0xd5,
    0xf7,0x9b,0x1e,0x3d,0xac,0xde,0x99,0xfb,0x4f,0x77,0xe4,0xa5,0xee,0x4d,0x8c,0xcd,
    0x8a,0x93,0xbf,0x4e,0xfb,0x93,0xd5,0x1f,0xa8,0xd7,0x5b,0xbb,0x5b,0xfd,0x91,0x7a,
    0xfd,0x9a,0x5e,0x56,0x9f,0x9b,0xd7,0x6f,0xd8,0xe3,0x8e,0xe3,0xad,0x3e,0x2f,0xaf,
    0xdf,0x73,0xd2,0x1e,0xdb,0xe5,0x9f,0xc8,0xeb,0x7f,0xbd,0xf2,0x83,0x6e,0x9d,0xf3,
    0x96,0x90,0x4f,0x9f,0x6c,0xa2,0x0e,0xe4,0xc0,0x99,0xdc,0xa2,0xfc,0x77,0xcb,0xae,
    0x95,0xee,0x5d,0x95,0xcf,0xb0,0x37,0x36,0xb9,0x7e,0x7c,0x51,0x6f,0x77,0x69,0x0f,
    0xcb,0x01,0xd5,0x32,0xc7,0x6e,0xf5,0x2e,0xe5,0x62,0x0d,0xa3,0xfe,0x13,0xed,0x69,
    0x1d,0xf2,0xd5,0x66,0xfb,0xdb,0xff,0x57,0xe0,0xcb,0x0b,0xcb,0x5c,0x97,0x90,0xed,
    0xaa,0xfa,0x60,0x61,0xe0,0x87,0xe8,0x37,0xe4,0x0f,0xcb,0x3d,0x86,0xdc,0x3e,0xae,
    0x8c,0xbd,0x9b,0xbf,0xa7,0x94,0x8b,0xb6,0xa7,0x95,0x91,0x3b,0x8a,0xfa,0xf4,0x72,
    0x91,0x7f,0x50,0x9f,0x51,0xb6,0x35,0x1f,0xd7,0xf7,0x80,0xfb,0xca,0xd4,0x81,0xdc,
    0x8c,0x72,0x31,0x97,0xb3,0xcb,0x3b,0xe6,0xec,0x39,0x65,0xee,0x5b,0x56,0x7f,0xb2,
    0xcc,0x73,0x85,0xd5,0x17,0x96,0xb1,0x8f,0x16,0xed,0xb4,0x95,0x8b,0x3c,0xb6,0x6f,
    0x85,0x7d,0x1f,0xeb,0xe4,0xbf,0x59,0x29,0xd5,0xf7,0x3f,0xab,0x77,0xa8,0x70,0xef,
    0xb3,0xfa,0x7e,0x15,0x9e,0x4d,0xac,0xbe,0x7f,0x85,0xe7,0x9d,0xce,0xb9,0x75,0xd8,
    0x3b,0xa0,0x52,0xac,0xa1,0xb5,0xca,0xab,0xb0,0x09,0x3b,0xd0,0xdd,0xbf,0x42,0xdf,
    0x75,0xac,0x70,0xae,0xa0,0x83,0x31,0x23,0xee,0x7e,0x56,0xe1,0xba,0xb2,0x62,0xf8,
    0xf9,0x15,0xc6,0xb0,0x15,0x6b,0xfb,0x9e,0x0a,0x4f,0x67,0x56,0x9f,0x52,0xe1,0x86,
    0x64,0xf5,0xad,0x15,0x9e,0x29,0xac,0x1e,0xe7,0x9b,0xdb,0xae,0xae,0x7e,0x58,0x5e,
    0xdf,0x49,0xbe,0x78,0xb3,0xca,0xfe,0x8c,0xad,0xb7,0x1b,0xd5,0x7f,0xbf,0x55,0xe5,
    0x7a,0xed,0xe3,0xb0,0xb7,0xab,0x5c,0xdb,0x73,0xdc,0x9c,0xbc,0x53,0xe5,0x99,0xc0,
    0x64,0xde,0xad,0x32,0x27,0x00,0x37,0x99,0x25,0x55,0xc4,0x48,0x21,0xf3,0x5e,0x95,
    0xed,0x2f,0x71,0x32,0x4b,0xf3,0xdf,0xc7,0x39,0x99,0x65,0x55,0xf6,0x79,0xa9,0x93,
    0xf9,0x7b,0xfe,0xbb,0xb7,0x93,0x59,0x5e,0xe5,0xde,0xf6,0x77,0x27,0xb3,0xa2,0xca,
    0xb3,0x96,0xd5,0x57,0x56,0xb9,0xd7,0x9b,0xce,0xaa,0x2a,0x65,0x56,0x3a,0x9d,0xf7,
    0xf3,0xdf,0xdf,0xf6,0x7b,0x50,0x5e,0x9f,0xe3,0x74,0x3e,0xa8,0x52,0x06,0x38,0xe6,
    0x1a,0xfe,0x6a,0xab,0xd2,0x47,0xf0,0x09,0xc6,0x8c,0x31,0xa1,0xcf,0xe8,0x13,0xda,
    0x80,0x0e,0xe6,0x7a,0xad,0x7c,0x0b,0x1d,0xe4,0x98,0x43,0xf3,0x45,0x79,0x82,0xf6,
    0xef,0xbd,0xf2,0x15,0xd4,0x5b,0xe7,0xbf,0xa8,0xb4,0xe3,0x3f,0xa5,0x9d,0x3c,0x9e,
    0x2b,0xa5,0x33,0x73,0x12,0x72,0xb0,0xf7,0x13,0x09,0x02,0xeb,0xaa,0xfa,0x59,0xc2,
    0x60,0x6f,0x49,0x54,0x9c,0xef,0xfc,0xbf,0x72,0x7d,0xed,0xd3,0xc6,0x7b,0x92,0x5f,
    0x22,0x1b,0xa8,0x2f,0x8d,0x8a,0x3c,0x07,0xfd,0x8f,0x22,0x8b,0x6d,0xae,0x49,0x9c,
    0x53,0x81,0x8d,0xd6,0xd9,0xc7,0x7c,0x33,0xa4,0xc6,0x18,0xf1,0x71,0x72,0x51,0x8d,
    0xb1,0x33,0xc2,0x61,0x17,0xd7,0xb8,0x36,0x5a,0xdd,0x99,0xe7,0x92,0x1a,0xcf,0x36,
    0xbe,0x58,0xdc,0x5f,0xea,0xe4,0x5b,0x1d,0x3e,0xd4,0xd9,0x1e,0xe1,0xf0,0xe6,0x1a,
    0xe3,0xd2,0x8a,0xe1,0x97,0xd5,0x98,0x37,0xac,0xd8,0x78,0x5a,0x6a,0x8c,0xf7,0xb1,
    0xdb,0xe3,0x9e,0xf2,0xc3,0x6a,0xdc,0xa3,0xac,0x34,0xe5,0xfe,0x07,0xfe,0xfb,0x1a,
    0xe7,0x2f,0x6a,0xc7,0xf9,0xab,0x88,0xc3,0x38,0xb2,0x1c,0x3b,0x2a,0x1f,0x67,0x59,
    0x67,0xc8,0x92,0xf8,0x8d,0x39,0x12,0xe9,0xcc,0x8a,0x3d,0xe8,0xf5,0xc0,0x58,0xe8,
    0xaa,0x73,0x77,0x87,0xb8,0xa8,0x23,0x27,0x1c,0xd3,0x50,0x3f,0xc5,0xd5,0x11,0x47,
    0xfd,0x5c,0x1d,0x67,0xed,0x21,0x11,0xeb,0x1b,0xf2,0xd6,0xd6,0x6b,0xfe,0xb6,0xe4,
    0xbf,0x71,0x8e,0xfc,0x38,0x62,0xfb,0xf8,0xdb,0x4d,0x67,0xf5,0x8d,0x11,0xcf,0xd5,
    0x67,0xe4,0x5a,0xc8,0x9b,0x9b,0x22,0x62,0x1b,0xa3,0x22,0xe6,0xae,0xd6,0x35,0xc5,
    0xe6,0x88,0xfc,0x75,0x9a,0xbf,0xad,0x11,0x31,0xcc,0x77,0xcf,0x1c,0xc3,0x9e,0xf4,
    0xcf,0x88,0xe7,0x70,0xb4,0xd7,0x4d,0x71,0xf3,0x45,0x44,0x7c,0x7e,0x2e,0x83,0xfa,
    0xb6,0x88,0xd8,0x20,0xd9,0xc6,0xfa,0xc2,0x7f,0x80,0xbf,0x20,0x99,0x4a,0x4c,0x99,
    0x4b,0x9c,0x4c,0x35,0x26,0x0e,0x99,0x7a,0xfe,0xd2,0xe6,0x84,0x73,0xc7,0x75,0xc2,
    0x92,0x98,0x73,0x04,0xee,0x4c,0x61,0x69,0xcc,0xbe,0xd6,0x77,0x69,0x61,0x59,0x4c,
    0x1c,0xf2,0x3f,0xc9,0x91,0xfa,0x9a,0xce,0x88,0x9b,0xac,0xb5,0xb3,0x93,0xda,0x19,
    0xe1,0xda,0x69,0xaf,0xfa,0x4e,0xae,0x9d,0x9d,0xa5,0xdb,0xe4,0xda,0xd9,0x25,0x26,
    0xde,0xde,0xb5,0xb3,0x26,0x23,0x8e,0xf6,0x9a,0x5c,0x3b,0x5f,0x8f,0x39,0x46,0xc4,
    0xf6,0x33,0xc2,0xf6,0x10,0x86,0xb6,0x7a,0xcb,0xef,0x7b,0xc6,0x94,0xdd,0x23,0x66,
    0x3b,0xc0,0xf6,0x8a,0x69,0x17,0x1c,0xe6,0x02,0x7b,0xf1,0x41,0x11,0xf7,0xe7,0x56,
    0xcd,0x05,0xec,0x7d,0x2b,0x22,0x6e,0x32,0x07,0x4b,0xa6,0xd9,0xc9,0x1c,0x12,0x11,
    0xb7,0xf6,0x3a,0x45,0xd4,0x03,0xfe,0x40,0x8e,0x21,0x5f,0x1d,0x16,0xb1,0x4d,0x70,
    0x77,0xe6,0x7a,0x88,0xff,0xc3,0x85,0x23,0xf6,0xba,0xc8,0x87,0x9b,0x73,0x0e,0x78,
    0xe7,0xbc,0x74,0x51,0xfc,0xe1,0xf7,0xa6,0xfc,0xef,0x7a,0xd5,0x81,0x3f,0xa3,0xb6,
    0xbe,0x27,0xbb,0xc8,0x17,0x2f,0x08,0x3b,0x4a,0x18,0xf2,0x85,0xf9,0xfa,0xd8,0x88,
    0x78,0xc9,0xcd,0xc9,0x0f,0x23,0x8e,0x03,0x9c,0xc9,0x1d,0x27,0x39,0x3f,0x27,0xdd,
    0x22,0xca,0x1e,0x17,0x15,0xba,0x3d,0xa5,0x0b,0xcc,0xe4,0x7a,0x45,0xc4,0x8f,0x8d,
    0x8a,0xf9,0x38,0x59,0xbe,0x18,0xe1,0xe6,0xe8,0x34,0xf9,0xc6,0xc7,0xc7,0xe9,0x11,
    0x65,0x4f,0xd3,0x5a,0x43,0x6e,0xfe,0x57,0xe5,0x65,0x5b,0x2b,0x67,0x6b,0xed,0x4d,
    0x70,0x6b,0xe5,0x9c,0x88,0xb8,0xc5,0xfc,0xb9,0x11,0x31,0xb3,0x7b,0x5e,0x44,0xdb,
    0xe7,0xba,0x31,0xf6,0x89,0xe8,0xb7,0x26,0xd7,0xfe,0xf9,0x11,0xf1,0x93,0xdd,0x78,
    0x2e,0x88,0xa8,0x7f,0xbe,0xd3,0xed,0x27,0x5d,0xbf,0x36,0xfa,0x47,0x94,0xed,0x57,
    0x5f,0xa3,0xd5,0xfa,0x3e,0x33,0x40,0xfd,0xef,0x9b,0xcb,0x20,0xbf,0x0d,0x14,0x06,
    0xd9,0xe3,0xf3,0xf9,0x1e,0x22,0x3f,0x5b,0x5c,0x0d,0x8c,0x19,0x57,0x8b,0x5c,0x5c,
    0x0d,0x8a,0x89,0x4f,0xcf,0x65,0x10,0x2f,0x17,0xc6,0xc4,0xfa,0x28,0x5f,0x0d,0x8f,
    0x8b,0x98,0x01,0x37,0x38,0x2f,0xc3,0x62,0xc6,0xc8,0x60,0xad,0x33,0xf8,0xe8,0xce,
    0xc0,0xf6,0x9b,0xea,0x6b,0x82,0xfb,0xc6,0xe4,0x40,0xdc,0x97,0xf9,0xea,0xeb,0x94,
    0x40,0x7e,0xbc,0xd6,0x1a,0xb0,0xa9,0x81,0xf8,0x25,0xb5,0xc2,0xee,0xf4,0x40,0x1c,
    0xff,0x9e,0x15,0x36,0x23,0x10,0xc7,0xb5,0xb7,0xc9,0xdd,0x2f,0xb9,0x26,0x27,0xf7,
    0x3f,0x81,0x38,0xae,0x81,0x9f,0x13,0xf6,0x40,0xa0,0x3e,0x38,0xd3,0x9d,0x29,0xdd,
    0xb2,0xd3,0x9d,0x15,0x88,0x8f,0x75,0xba,0xb3,0x03,0xf5,0x67,0x39,0xdd,0x87,0xa5,
    0x5b,0x71,0xba,0x7f,0x0a,0xc4,0xfb,0x39,0xdd,0x39,0x81,0xfa,0x7f,0x72,0xba,0x13,
    0xe4,0xb3,0x92,0xf3,0xd9,0xdc,0x40,0xdc,0x17,0xf3,0xd9,0xbc,0x40,0xde,0xfb,0xec,
    0xa9,0x40,0xdc,0xfb,0x6c,0x7e,0x20,0xee,0x7d,0xf6,0x4c,0x20,0xee,0x7d,0xf6,0x9c,
    0xe4,0xbc,0xcf,0x9e,0x0f,0xc4,0xbd,0xcf,0x5e,0x08,0xd4,0x7f,0xde,0xf5,0x7d,0x81,
    0x74,0xbd,0xcf,0x16,0x06,0xe2,0xde,0x67,0x2f,0x05,0xea,0x2f,0x74,0xba,0x8b,0xa4,
    0xeb,0x7d,0xf6,0x97,0x40,0xdc,0xfb,0xec,0xe5,0x40,0x7d,0x70,0xc8,0x7b,0xd8,0x0b,
    0x27,0x05,0xfa,0x12,0x1c,0x62,0x1c,0x7b,0x33,0x30,0x5b,0x63,0xef,0x04,0xe5,0xd6,
    0xdc,0xaf,0xbf,0x14,0xf6,0x6e,0xe0,0xbd,0x16,0x70,0x58,0x0b,0xb8,0x86,0x59,0x12,
    0xb8,0xaf,0x8f,0x76,0xeb,0xfc,0xbd,0x40,0xfc,0xa5,0x5c,0x0b,0xf5,0xa5,0x81,0xd8,
    0x5c,0x9d,0x9b,0x6c,0xfd,0x2f,0x0b,0xe4,0x4c,0x6f,0x79,0x83,0xde,0x8a,0x40,0x6c,
    0xbe,0xce,0x26,0xa6,0xb7,0x32,0x90,0x33,0xbd,0xf7,0x1b,0xf4,0x56,0x07,0x62,0x2f,
    0x36,0xe8,0x7d,0x10,0xc8,0x59,0x6e,0xfb,0x30,0x70,0x4c,0x58,0xc7,0x36,0x9e,0x35,
    0x1a,0xcf,0x87,0xce,0xfe,0xda,0x40,0xdc,0xf6,0xb2,0x75,0xd2,0xc3,0x7d,0x22,0x6b,
    0x73,0x7d,0xa0,0x1c,0xb8,0x11,0xae,0xcd,0x8f,0x03,0x39,0xf3,0xe1,0x27,0x81,0x67,
    0xeb,0x77,0x5c,0x3f,0x3e,0x0b,0xc4,0x7d,0x3f,0x3e,0x57,0x3f,0x3e,0x73,0xfd,0xd8,
    0x10,0x88,0x5b,0x3f,0x36,0x49,0xef,0xd5,0x52,0x71,0xfe,0xd8,0x1c,0x28,0xb7,0x29,
    0x14,0xe7,0x8d,0x2d,0x81,0xf8,0x68,0xd7,0xaf,0xad,0x81,0x38,0xe6,0x1e,0xe7,0xb4,
    0xad,0xf5,0xb6,0xe3,0xfa,0xf5,0xe0,0xb6,0xc0,0xb3,0x1b,0xfc,0xf5,0x71,0x28,0x72,
    0x1c,0x2e,0x80,0xb7,0xb9,0xb1,0x94,0x53,0xda,0xc1,0x19,0xe5,0x79,0x61,0x95,0x94,
    0x72,0xe0,0xb6,0x9f,0x5b,0x52,0xe2,0x2b,0x43,0x91,0x87,0x43,0xca,0xf9,0x07,0xd7,
    0xae,0x14,0x78,0x6e,0x49,0xb9,0x86,0xba,0x88,0xdf,0xa8,0xfb,0x19,0x16,0xef,0x3b,
    0xa7,0x5c,0xe7,0x15,0xb7,0xce,0xf7,0x4e,0x89,0xfb,0x62,0xeb,0x7c,0x9f,0x94,0xbc,
    0x5f,0xe7,0x1d,0x52,0xe2,0x7e,0x9d,0xef,0x9f,0x12,0xf7,0xeb,0xfc,0x80,0x94,0xb8,
    0x5f,0xe7,0x1d,0x25,0xe7,0xd7,0xf9,0x41,0x29,0x71,0xbf,0xce,0xbf,0x95,0x52,0x1f,
    0x9c,0xe9,0x1e,0x22,0x5d,0xbf,0xce,0x3b,0xa5,0xc4,0xfd,0x3a,0x3f,0x34,0xa5,0x7e,
    0x27,0xa7,0x7b,0xb8,0x74,0xfd,0x3a,0xef,0x9c,0x12,0xf7,0xeb,0xbc,0x4b,0x4a,0xfd,
    0xce,0x4e,0x77,0x37,0xf9,0xac,0xec,0x7c,0xf6,0xbd,0x94,0xb8,0x2f,0xe6,0xb3,0x23,
    0x53,0xf2,0xde,0x67,0x47,0xa5,0xc4,0xbd,0xcf,0x8e,0x49,0x89,0x7b,0x9f,0x1d,0x9b,
    0x12,0xf7,0x3e,0xeb,0x2a,0x39,0xef,0xb3,0xe3,0x52,0xe2,0xde,0x67,0xdd,0x52,0xea,
    0x1f,0xe7,0xfa,0xde,0x5d,0xba,0xde,0x67,0x3d,0x52,0xe2,0xde,0x67,0x3d,0x53,0xea,
    0xf7,0x70,0xba,0x27,0x4a,0xd7,0xfb,0xac,0x57,0x4a,0xdc,0xfb,0xec,0xa4,0x94,0xfa,
    0xe0,0x2c,0x37,0xee,0x9e,0xd2,0x97,0xe0,0x70,0x96,0x1b,0xae,0x7d,0x7a,0x98,0xdb,
    0xa7,0xff,0x25,0xfd,0xf2,0x3e,0xfd,0x6f,0x29,0x71,0x5f,0xcc,0xaf,0x67,0xa7,0xe4,
    0xbd,0x5f,0xcf,0x4b,0x89,0x7b,0xbf,0xf6,0x49,0x89,0x7b,0xbf,0xfe,0x2c,0x25,0xee,
    0xfd,0x7a,0x81,0xe4,0xbc,0x5f,0xfb,0xa6,0xc4,0xbd,0x5f,0xfb,0xa5,0xd4,0xef,0xeb,
    0x7c,0x33,0x40,0xba,0xde,0xaf,0x03,0x53,0xe2,0xde,0xaf,0x83,0x52,0xea,0x0f,0x74,
    0xba,0x83,0xa5,0xeb,0xfd,0x3a,0x24,0x25,0xee,0xfd,0x7a,0x51,0x4a,0xfd,0x21,0x4e,
    0xf7,0xf4,0xf4,0xcb,0xfb,0x74,0x73,0x4a,0xdc,0x17,0xf3,0xd9,0x65,0x29,0x79,0xef,
    0xb3,0xcb,0x53,0xe2,0xde,0x67,0x57,0xa4,0xc4,0xbd,0xcf,0x86,0xa7,0xc4,0xbd,0xcf,
    0x46,0x48,0xce,0xfb,0x6c,0x64,0x4a,0xdc,0xfb,0xec,0xca,0x94,0xfa,0x23,0x5d,0xdf,
    0x47,0x4b,0xd7,0xfb,0xec,0xaa,0x94,0xb8,0xf7,0xd9,0xd5,0x29,0xf5,0xaf,0x72,0xba,
    0x63,0xa4,0xeb,0x7d,0x76,0x4d,0x4a,0xdc,0xfb,0xac,0x35,0xa5,0xfe,0x35,0x2e,0x16,
    0x7b,0xa7,0xf4,0x65,0x6b,0x43,0x2c,0xe2,0xef,0x67,0xb9,0x0f,0x91,0x37,0x67,0xd6,
    0x98,0x3b,0x71,0x8e,0x44,0xbe,0x1c,0x26,0x0e,0xfa,0x3f,0xaf,0x31,0x9e,0xc1,0xc1,
    0x96,0x8f,0xe1,0x11,0x31,0x79,0xbb,0x4e,0xab,0xfb,0x23,0x26,0x3e,0x5a,0x7b,0x11,
    0xf6,0x83,0x51,0x31,0xaf,0xbd,0xc1,0xd9,0x5e,0x30,0x3a,0x26,0x6e,0x7b,0xd1,0x55,
    0x31,0x31,0x7f,0xed,0x70,0x75,0x4c,0xbc,0x45,0xfb,0x0e,0xec,0xff,0x22,0x26,0x6e,
    0xe7,0xe4,0x56,0x9d,0x93,0x5b,0x74,0x4e,0xbe,0xc1,0x9d,0x93,0xc1,0x5d,0x9b,0x97,
    0xff,0xd0,0x98,0xaf,0x8d,0x8b,0x7e,0x5e,0xa7,0x7e,0xe2,0xfa,0xc2,0x6c,0x5d,0x1f,
    0x13,0xef,0x57,0xa2,0xaf,0x6e,0x90,0x1e,0xf4,0x7d,0xfd,0x06,0xf9,0x07,0x3a,0x23,
    0x6a,0xd4,0x83,0x6d,0xdc,0xcf,0x85,0xec,0x0c,0xd9,0xfb,0xcf,0x86,0xbe,0x8d,0x77,
    0x7d,0x03,0x77,0x63,0x5e,0xc6,0xcb,0xe6,0x8d,0xae,0x6f,0xe3,0xbe,0xa2,0x6f,0x37,
    0xc7,0xc4,0xad,0x6f,0xa6,0x37,0xde,0xf5,0xe5,0x37,0x31,0xdb,0x44,0xff,0x6e,0x96,
    0x7d,0xb4,0x7b,0x66,0x28,0xda,0x85,0xcc,0x2d,0x79,0xb9,0x5b,0xfa,0xf8,0x7d,0x46,
    0xbe,0x7f,0xe2,0x7e,0xc7,0xad,0x9a,0x4f,0x9b,0x53,0x2b,0xd7,0xa9,0x5f,0xff,0x15,
    0xf3,0xbe,0x04,0xe6,0xa0,0xb7,0xee,0x0b,0xdd,0x1e,0x13,0xb7,0x82,0xbd,0x1d,0xf8,
    0xef,0x62,0xde,0x97,0x06,0x3f,0x5f,0xd8,0x1d,0x31,0xdb,0x00,0x77,0xb5,0x9e,0x1f,
    0xdc,0x19,0x13,0xc7,0xd8,0x51,0x9f,0x10,0x13,0xc3,0x7d,0xa8,0xeb,0x84,0xfd,0x21,
    0x26,0x8e,0x7b,0x56,0x18,0x3b,0xc6,0x83,0xbe,0x63,0x0c,0x76,0x7e,0x9a,0x2c,0x9f,
    0x3d,0xa9,0xeb,0x2a,0x3b,0xa7,0x4c,0x89,0xc9,0x59,0x7d,0xaa,0xe4,0x16,0xe6,0x35,
    0xd4,0xa7,0xc5,0xc4,0xe6,0xea,0xbe,0x99,0xd9,0xbb,0xcf,0xe4,0x1a,0xec,0xdd,0x1f,
    0x93,0x33,0xfd,0x99,0xd2,0x7f,0xb1,0x41,0xff,0x21,0xe9,0xaf,0x2d,0xed,0xa8,0xff,
    0x70,0x4c,0xce,0xf4,0x1f,0x95,0x7e,0x9f,0xed,0xf7,0xee,0x18,0xfb,0x73,0x63,0xf6,
    0x7d,0x5a,0x5c,0x60,0x4f,0xc6,0x6c,0x7f,0xa6,0xc3,0xe6,0xc7,0xb4,0xf9,0x68,0x5c,
    0xac,0x91,0x67,0x63,0xea,0xdf,0xa7,0xd8,0x79,0x2e,0x26,0x86,0xfb,0xf9,0x88,0x87,
    0xde,0x2e,0x1e,0xc0,0x3d,0x9f,0x97,0x83,0x12,0xfa,0xf4,0x79,0xe7,0xd3,0x05,0x1a,
    0xc3,0xdc,0xd2,0x8e,0x67,0xd2,0x85,0x31,0x39,0x93,0x5b,0xe4,0x7c,0xef,0xe5,0xfe,
    0x12,0x93,0x7b,0x56,0x7d,0x7d,0x39,0x26,0x36,0x42,0x39,0x0b,0xd8,0x2b,0x31,0xed,
    0xbd,0xec,0xec,0xbd,0x26,0x7b,0x8d,0xe7,0xf6,0xc5,0x31,0x39,0x93,0x7b,0x5d,0x72,
    0x8d,0xe7,0xf4,0x37,0x62,0x72,0x26,0xf7,0xb6,0xe4,0x56,0x37,0xc8,0xbd,0x13,0x93,
    0x33,0xb9,0xf7,0x24,0xd7,0xa7,0x41,0x6e,0x69,0x4c,0xce,0xe4,0x96,0x4b,0xae,0xb9,
    0x41,0x6e,0x45,0x4c,0xce,0xe4,0xde,0x97,0x9c,0xdd,0x7b,0xb5,0xdc,0xbd,0x3a,0x26,
    0xd7,0xe2,0x72,0xf7,0x9a,0x98,0x38,0x72,0x24,0xce,0xd4,0xb8,0xb7,0x89,0xe7,0x23,
    0x96,0x43,0x3f,0x8a,0x79,0xbf,0x73,0x8d,0xcb,0xa1,0xeb,0x62,0xe2,0x96,0x8f,0x3f,
    0xd6,0xfa,0xf5,0xf7,0x2b,0x3e,0x89,0x79,0x1f,0xb7,0x9b,0xbb,0xc7,0xf8,0x69,0x4c,
    0xd9,0x4f,0x5c,0xce,0xf9,0x2c,0x26,0x3e,0xc1,0x8d,0xe7,0xf3,0x98,0xf8,0xf6,0x6b,
    0x03,0xe9,0x75,0x73,0xf7,0x22,0xb7,0xc4,0xc4,0x77,0xb8,0x36,0x88,0x89,0xdb,0x1c,
    0x6f,0x8b,0x69,0x6b,0xab,0xf2,0x51,0x35,0x29,0xe2,0x0f,0xf9,0xb3,0x29,0xaf,0x57,
    0x15,0x7f,0xf8,0x6d,0x39,0xaf,0x92,0x50,0x77,0x84,0x72,0x9e,0xc9,0xe0,0xaf,0xe5,
    0xbc,0xb1,0x35,0xe6,0x60,0xc4,0x2d,0xe4,0xbd,0x7e,0x2c,0xfd,0x8d,0xca,0xbf,0x1d,
    0x5d,0xbb,0xe0,0x92,0xbc,0x7c,0x4d,0x36,0xf1,0xbb,0xb7,0xee,0x69,0xd7,0x12,0xc6,
    0x25,0xe2,0x0d,0xb1,0x64,0x79,0xa8,0x7d,0x42,0xce,0xf2,0x50,0x47,0xe9,0xc2,0x86,
    0x5d,0xd3,0xec,0x92,0xb0,0xbf,0xdb,0xe2,0xc2,0xde,0xee,0x09,0x63,0x0d,0x71,0xb4,
    0xc2,0xd9,0xdb,0x33,0x21,0xd7,0x5c,0x2b,0xae,0x75,0xf6,0x4e,0x68,0x63,0x9d,0xd3,
    0xdf,0x27,0x21,0x6e,0xa5,0x55,0xfa,0xfb,0x26,0xb4,0x01,0x1e,0xd7,0x40,0xc0,0x3a,
    0x24,0xc5,0x35,0x10,0x78,0x3c,0x27,0xc3,0x33,0x31,0xdf,0xdf,0x8e,0xf2,0x1f,0xe4,
    0xa7,0xd5,0x38,0x2e,0x8c,0xbf,0x83,0xfc,0x01,0xd9,0xde,0xca,0xb1,0xc8,0x0b,0x96,
    0x57,0x0e,0x4e,0x98,0x83,0x2c,0xaf,0x1c,0x92,0x10,0xb3,0xbc,0x72,0x86,0xcb,0x2b,
    0xe0,0x3a,0xe5,0xe5,0x6e,0xb5,0x89,0xdf,0xb6,0x2e,0x0e,0x4f,0x8a,0x7c,0xe1,0xd7,
    0x4f,0xe7,0x84,0x9c,0xc9,0x7d,0x3b,0x29,0xf2,0x4f,0xab,0x93,0xfb,0x4e,0x42,0xce,
    0xf2,0xca,0x77,0x13,0x62,0x2d,0xee,0x3a,0xf6,0xfb,0xd2,0xc5,0x33,0x51,0x8b,0xd5,
    0x1f,0x24,0xc4,0x7d,0xac,0x1e,0x95,0x10,0xb7,0x58,0x3d,0x3a,0xa1,0xbd,0xa3,0x5c,
    0x3f,0x7e,0x28,0x5b,0xb3,0xcb,0x3b,0xf6,0xa3,0x6b,0x42,0xce,0xda,0x3c,0x5e,0x72,
    0xe3,0xdc,0x79,0xa8,0x7b,0x42,0x7c,0xac,0xd3,0xeb,0x91,0x10,0xb7,0x36,0x7b,0x26,
    0xb4,0xd5,0xc3,0xb5,0xd9,0x2b,0x29,0xf6,0x0f,0xef,0xa3,0x93,0x12,0x72,0x26,0x77,
    0xb2,0xe4,0xda,0x1a,0xe4,0x4e,0x49,0xc8,0x99,0xdc,0xa9,0x92,0x6b,0x6d,0x90,0x3b,
    0x2d,0x21,0x67,0xfd,0xed,0x2d,0xb9,0x41,0x6e,0xdf,0x3f,0x3b,0x61,0x5e,0x18,0xa9,
    0x7d,0xa7,0x7e,0x2f,0x36,0xa1,0x2c,0xb8,0xed,0xf7,0x5f,0x13,0xce,0x21,0x9e,0xb5,
    0x1a,0xd6,0x27,0xa1,0x4f,0xa7,0x54,0x8a,0x9c,0xf4,0xb3,0x84,0xb2,0x7d,0x12,0x77,
    0xff,0x35,0x21,0xde,0xd3,0xd9,0xeb,0x97,0x70,0xbc,0xde,0xde,0x80,0x84,0x63,0xf3,
    0xf6,0x06,0x26,0x94,0x1d,0xe0,0xec,0x5d,0x98,0x10,0xc7,0xf8,0x1e,0x50,0xbc,0x0e,
    0x4e,0xd8,0x0e,0xb8,0x69,0xf2,0xcb,0x90,0x84,0xf8,0x68,0x3d,0x97,0xb1,0xf1,0x5d,
    0x9c,0x70,0x8c,0xe0,0x91,0x8f,0x4f,0x69,0xc8,0xc7,0x97,0x26,0x7c,0xde,0x04,0x39,
    0xcb,0xc7,0x43,0x13,0xe2,0x96,0x8f,0x2f,0x4b,0xbe,0x9c,0x8f,0x87,0x25,0x5f,0xce,
    0xc7,0x97,0x27,0x94,0x1d,0xe6,0xe6,0xe1,0xe7,0x09,0x71,0x9f,0x8f,0xaf,0x48,0x88,
    0x9b,0xde,0x48,0xe9,0xf9,0x7c,0x7c,0x65,0x42,0xdc,0xc7,0xf8,0xa8,0x84,0x38,0xd6,
    0x68,0x6b,0x43,0xee,0xbd,0x0a,0x3e,0xd3,0x1a,0xbd,0xca,0xf9,0x6f,0x4c,0xc2,0xf6,
    0x46,0xb9,0x7c,0x7a,0x4d,0x42,0xdc,0xf2,0xb1,0xe9,0xb5,0xba,0x7c,0x3c,0x5e,0xf9,
    0x18,0xeb,0x1d,0xf2,0xb0,0x69,0xe7,0xe1,0x5f,0xca,0xa6,0xe5,0xe3,0xb1,0xae,0x2f,
    0xe0,0x7e,0x95,0x97,0x5f,0xcb,0xe6,0xaf,0x5c,0x3e,0xbe,0x41,0x71,0x70,0x8a,0xe6,
    0x13,0x6d,0x8f,0x95,0xdc,0xaf,0x9d,0xdc,0x4d,0x8a,0xbf,0xa3,0x15,0x47,0x5e,0x6e,
    0xac,0xcb,0x79,0x23,0x6b,0xb4,0x89,0x36,0x6e,0x52,0x9b,0x96,0x93,0x7f,0x93,0x90,
    0xf7,0x39,0xf9,0xb7,0x1a,0xf3,0x28,0x97,0xe7,0x6f,0x55,0xbe,0xf9,0xad,0x8b,0xd7,
    0xdb,0x13,0xe2,0x43,0x5d,0x9f,0xee,0x48,0x88,0x5b,0xb1,0xdc,0x7d,0x67,0xc2,0xb6,
    0xee,0x70,0xb9,0xfb,0x2e,0x97,0xbb,0xef,0x6c,0xc8,0xdd,0x67,0xd8,0x99,0xd7,0xe5,
    0xe3,0x7b,0x13,0x9e,0xff,0x2c,0x1f,0x4f,0x4e,0x88,0x59,0x3e,0x3e,0xdd,0xe5,0x63,
    0x70,0x53,0xf2,0x72,0xac,0xec,0x4c,0x71,0xb9,0x61,0xaa,0xd6,0x3c,0xde,0x81,0x58,
    0xe5,0xe2,0x66,0x5a,0x42,0x6e,0xfb,0x99,0x58,0x72,0x78,0x5e,0xec,0xe5,0xee,0x4f,
    0xc8,0x59,0x5c,0x3e,0x28,0x39,0xbc,0x8f,0x60,0x32,0x33,0x13,0xe2,0x76,0xbd,0x37,
    0x2b,0x21,0x86,0x77,0x3c,0x2c,0x0f,0xce,0x4e,0x68,0x6b,0x96,0x6b,0xf3,0x4f,0x2e,
    0xbf,0xf9,0xdc,0x3b,0x27,0x21,0x67,0x72,0x8f,0xb9,0x7c,0xe9,0xcf,0xa0,0x8f,0x27,
    0xe4,0x6c,0xaf,0x98,0x9b,0x10,0x6b,0x75,0x67,0xd0,0x79,0x09,0xed,0xcd,0x75,0x63,
    0x78,0xca,0xd9,0x33,0x5b,0x4f,0x27,0xc4,0x6d,0x0c,0xf3,0x13,0x62,0x1d,0xdc,0x18,
    0x9e,0x49,0x68,0x6f,0x7e,0x52,0xe8,0xbd,0x90,0x30,0x77,0x5a,0x5f,0x17,0x26,0xc5,
    0xb9,0xd0,0x5f,0x1b,0xbc,0x94,0x90,0xb3,0xbe,0xfe,0x39,0x21,0xd6,0xe2,0xfa,0xba,
    0x28,0xa1,0xbd,0x3f,0xbb,0x3c,0xf3,0xb2,0xcb,0x33,0xd6,0xc6,0x2b,0x09,0x71,0xbc,
    0x37,0xe2,0xe7,0xea,0x7f,0x13,0x72,0x26,0xb7,0x58,0x72,0x98,0xfb,0x36,0x27,0xf7,
    0xd7,0x84,0x9c,0xc9,0xbd,0x21,0x39,0x7b,0x37,0xcf,0xe4,0xde,0x4c,0xc8,0x99,0xdc,
    0x3b,0x92,0x5b,0xd8,0x10,0x23,0xef,0x26,0xe4,0xb6,0xdf,0xd3,0x97,0xdc,0xc6,0xd2,
    0x8e,0x72,0xcb,0x12,0x72,0xe6,0x83,0xe5,0x09,0xe3,0xd0,0xdf,0x17,0x58,0x29,0xac,
    0xd9,0xf9,0x65,0x55,0x42,0xd9,0x95,0x4e,0x77,0x75,0x42,0x7f,0x79,0xdd,0x36,0x61,
    0x5e,0xf7,0xc3,0x84,0xb2,0x6d,0x4e,0x77,0x6d,0x42,0x5f,0x79,0xdd,0x75,0xc2,0xbc,
    0xee,0xfa,0x84,0xb2,0xeb,0x9c,0xee,0x3f,0x12,0xc6,0x72,0x8b,0xd3,0xfd,0x54,0xd8,
    0x2a,0xa7,0xfb,0x59,0x42,0xd9,0x4f,0x9d,0xee,0x86,0x84,0xbe,0xf7,0xba,0x9b,0x84,
    0x79,0xdd,0xcd,0x09,0x65,0x37,0x39,0xdd,0xad,0x09,0xe7,0xc3,0xeb,0x7e,0x21,0xcc,
    0xeb,0x6e,0x4b,0x28,0xfb,0x85,0xd3,0x6d,0x0a,0x8c,0x5d,0x3f,0xde,0x8a,0x30,0x3f,
    0xde,0x6a,0xa0,0x2c,0x38,0xd3,0x8d,0x03,0xe7,0xd7,0xeb,0x06,0x61,0x5e,0x37,0x0d,
    0x94,0x0d,0x4e,0xb7,0x16,0x38,0xe7,0x5e,0x77,0x27,0x61,0x5e,0xb7,0x7d,0xa0,0xec,
    0x4e,0xa1,0xc8,0xad,0xbb,0x06,0xce,0x3b,0xfc,0x58,0x75,0xf8,0x1e,0x81,0x73,0x0a,
    0x1f,0xa5,0x7a,0xde,0x00,0xfc,0x1b,0x81,0xdc,0xae,0x4e,0x76,0xdf,0xc0,0x39,0x84,
    0x4f,0xda,0x3b,0xd9,0x0e,0x81,0xdc,0xae,0xa1,0xd8,0xf3,0xf7,0x0b,0xbc,0x8f,0xd5,
    0xcf,0x3d,0xb7,0xdd,0x3f,0x10,0x37,0x7b,0x07,0x06,0x62,0x56,0x6c,0x5f,0xe9,0x18,
    0xd8,0xfe,0x81,0xce,0xde,0x41,0xb2,0x37,0xda,0xbf,0x83,0x10,0x88,0x9b,0xbd,0x43,
    0x02,0x31,0x2b,0x66,0xaf,0x53,0x60,0x1f,0x0f,0x09,0xc5,0x9e,0xd2,0x39,0xb0,0x9d,
    0x4e,0x0e,0x3b,0x22,0x10,0xc7,0x7b,0x40,0xcf,0x08,0xfb,0x4e,0x20,0x3e,0xb4,0x56,
    0xc8,0x7d,0x57,0x63,0x05,0x67,0xfb,0xd1,0x91,0xa1,0xd8,0x8f,0xc0,0xfb,0xfd,0xe8,
    0x74,0xed,0x23,0xc7,0xba,0xbe,0x76,0x0b,0xbc,0x67,0x71,0xbf,0xee,0x49,0xd8,0x9a,
    0xee,0x1e,0x8a,0x7b,0x46,0x90,0x3b,0x31,0xf0,0xbe,0xc6,0x4c,0xdd,0xb7,0x30,0xbc,
    0x57,0xa0,0xac,0x15,0x1b,0xeb,0x49,0x81,0xdc,0x89,0x6e,0x5c,0x3f,0x0a,0x6c,0xef,
    0x24,0xc5,0x12,0xb0,0x53,0x02,0xf1,0x4b,0xdd,0x58,0x4f,0x15,0x86,0xb1,0x3e,0x27,
    0xec,0xb4,0x40,0x59,0x70,0x7e,0x2c,0xf8,0x6b,0x67,0x84,0x19,0x35,0x8e,0x1f,0xfb,
    0x24,0xde,0x65,0x3a,0xd6,0x71,0x93,0x6a,0xc4,0xc0,0xc1,0x16,0x38,0x9c,0x27,0xeb,
    0xef,0xa9,0xb5,0xe3,0x3e,0x8c,0x7b,0x81,0x38,0x07,0x19,0x5e,0x71,0x38,0xde,0xf5,
    0xf4,0x7b,0xfa,0x19,0xce,0xf6,0xf4,0x1a,0xcf,0x01,0x38,0xaf,0xa0,0x0f,0xbe,0x4f,
    0x77,0xa9,0x5d,0x70,0x93,0x1c,0x57,0x7f,0x97,0xb4,0xc6,0xb3,0x17,0x38,0xf4,0xc1,
    0x73,0x63,0x6a,0x6c,0x17,0x5c,0x45,0x9c,0xbf,0xc6,0xeb,0xed,0xda,0x98,0x5a,0xe3,
    0x35,0x21,0xae,0x11,0xd1,0x17,0xdf,0xb7,0xdb,0xd4,0x3e,0xb8,0xbb,0x1c,0x87,0x36,
    0x6e,0xac,0xf1,0x5a,0x1c,0xdc,0xb8,0x06,0x6e,0x94,0xda,0x07,0x37,0x46,0x9c,0xbf,
    0x8f,0x77,0xa6,0x6b,0x63,0xb2,0xda,0xc0,0x7d,0x49,0xf4,0xc5,0xf7,0xed,0xd6,0x1a,
    0xef,0x05,0x82,0xbb,0xcd,0x71,0xf5,0x7b,0xad,0x3a,0x77,0x82,0xbb,0xb1,0x81,0xbb,
    0xb2,0x46,0x9f,0x83,0x1b,0x25,0x0e,0xe7,0xa3,0xeb,0xdd,0xf9,0x08,0x32,0x67,0xe5,
    0xf5,0xeb,0xd5,0x27,0xfc,0xb6,0x73,0xeb,0x39,0x8a,0x5f,0xac,0xfb,0x69,0xba,0x6f,
    0x77,0x6e,0x20,0xde,0xa2,0xf7,0x4f,0xb7,0x5f,0x03,0xe9,0xb9,0xf7,0xb9,0xee,0x39,
    0xe7,0x4f,0xf5,0x6c,0xf6,0x3c,0xf7,0x8c,0xb9,0x4f,0xe0,0x19,0xe0,0xa7,0x92,0xb7,
    0xbd,0xfc,0xfc,0xf0,0xe5,0x6b,0x86,0xbe,0xe1,0xcb,0xd7,0x0c,0xfd,0x02,0x65,0xfb,
    0xba,0xe7,0xb4,0xfd,0x03,0x71,0x7f,0xcd,0x30,0x20,0x10,0x37,0xbd,0xc1,0xd2,0xf3,
    0xd7,0x0c,0x43,0x02,0x71,0x7f,0xcd,0x70,0x51,0x20,0x6e,0x63,0xb8,0x44,0x63,0x1d,
    0x20,0xdf,0x0d,0x77,0xbe,0x83,0xef,0x87,0xe6,0xf5,0xe1,0xf2,0xdd,0x50,0xf7,0x1e,
    0x40,0x4b,0xa0,0xee,0x45,0xee,0xd9,0xed,0xcf,0x03,0xed,0x00,0xb3,0x6b,0x8b,0x2b,
    0x02,0x71,0xbb,0xb6,0x30,0x5b,0xc3,0xdd,0x3c,0xde,0x5d,0xe3,0x3c,0x63,0x6e,0x20,
    0x3f,0x34,0x14,0xcf,0x30,0x6e,0xa9,0xb1,0x1d,0x70,0x2d,0xe2,0x70,0xdd,0x86,0x77,
    0x00,0xf1,0xee,0xa9,0x3d,0x9b,0x1e,0x19,0xf8,0x5e,0x60,0x1f,0xb5,0x6f,0x79,0xf7,
    0xca,0x40,0xce,0xfa,0x3d,0x3a,0x10,0x83,0x5d,0xcb,0x4f,0xbf,0x08,0xc4,0xad,0x58,
    0x2e,0x1a,0x13,0x18,0x9b,0xbf,0x70,0xb9,0xf3,0x1a,0x97,0x3b,0xc7,0x34,0xe4,0x4e,
    0x8b,0xb1,0xeb,0x5d,0x6c,0xdf,0x5b,0x63,0xec,0x63,0x2d,0x5c,0x23,0x5f,0xda,0xb8,
    0xff,0xa0,0x71,0x83,0x83,0x0f,0xc0,0xfd,0xd1,0x9e,0x31,0x04,0x3e,0x03,0xf9,0x83,
    0xee,0x49,0xdd,0x24,0xdb,0x37,0x85,0x22,0x56,0xab,0xed,0x28,0xb7,0x51,0xcf,0x7a,
    0x30,0x1e,0xbc,0x97,0x19,0x0b,0xb7,0x32,0x4d,0xe3,0x4c,0xc4,0xa1,0xcf,0xf7,0xba,
    0xf7,0xca,0xc6,0x05,0x72,0xa5,0x52,0x81,0x8d,0x17,0xd6,0xe4,0xb0,0x5b,0x84,0x95,
    0xdd,0x73,0x9b,0x2b,0x22,0xea,0x5b,0x7d,0x44,0x44,0x5d,0xab,0x8f,0x8a,0xa8,0x67,
    0xcf,0x15,0x46,0x47,0xd4,0x81,0xdc,0xa8,0xa8,0x78,0x5e,0x70,0x7b,0x4a,0xee,0xfc,
    0xa6,0x84,0xcf,0x14,0xd2,0xe2,0x7b,0x1e,0xe0,0xe3,0xb4,0x6e,0xc0,0xfd,0x3e,0x25,
    0x8f,0x77,0x57,0xed,0x19,0xc4,0x84,0x94,0x38,0xde,0x5b,0x35,0x9b,0x13,0x53,0xe2,
    0xb6,0xf7,0x4f,0x4a,0xd9,0xce,0xc4,0xb4,0x18,0xd3,0xdd,0x29,0x71,0xff,0x4e,0xdd,
    0xe4,0x94,0x38,0x0a,0xfa,0x53,0x7f,0xde,0xe0,0xfa,0x33,0x59,0xcf,0x05,0x5b,0xf4,
    0x0d,0xc2,0x7f,0xa7,0xe4,0xcd,0xe6,0x74,0xd9,0xf4,0xef,0xa6,0xcd,0x90,0xbd,0xe9,
    0xce,0xe6,0x7d,0xce,0xe6,0x8c,0x06,0x9b,0xf7,0xa7,0xe4,0xcd,0xe6,0x4c,0xd9,0x2c,
    0x3b,0x9b,0xb3,0x64,0x73,0xa6,0xb3,0x39,0xdb,0xd9,0x9c,0xd5,0x60,0xf3,0xa1,0x94,
    0xbc,0xe9,0x3f,0xaa,0xfe,0xf8,0x3e,0x3d,0xe6,0xf4,0x1f,0x6d,0xd0,0x7f,0x3c,0x25,
    0x6f,0xfa,0x4f,0x49,0xd7,0xb7,0xff,0xb4,0xd3,0x7f,0xaa,0x41,0x7f,0x7e,0x4a,0xde,
    0xf4,0x5f,0x90,0xae,0xd7,0x7f,0xd1,0xe9,0xbf,0xd0,0xa0,0xbf,0x20,0x25,0x7f,0xa1,
    0x62,0xe4,0xa5,0xaf,0x88,0x91,0x01,0xe2,0x16,0x7d,0x05,0x67,0xcf,0xb0,0xfe,0x92,
    0x52,0x17,0x32,0xc3,0xf4,0x3d,0xdf,0xcb,0x29,0x71,0xac,0xb5,0x57,0x52,0xae,0x35,
    0xfc,0xc5,0x5a,0x05,0x3f,0xaf,0x46,0x19,0xac,0xbf,0x6d,0xf9,0xef,0x8d,0xe2,0xea,
    0xdf,0xba,0xd4,0xf8,0x7d,0x0c,0xb8,0x8f,0xd2,0x82,0xab,0x5f,0xa7,0xd6,0xb8,0x3e,
    0xc1,0x6d,0x16,0x37,0x53,0x6b,0xfc,0xb5,0x94,0x7c,0x73,0xfd,0x5b,0x9e,0x6a,0x69,
    0x8b,0x78,0xcb,0xbf,0xe0,0x17,0xe7,0x65,0x8b,0xfa,0xb3,0x38,0xe5,0x3a,0x42,0x7f,
    0xde,0x48,0x19,0x77,0x88,0x13,0xcc,0xeb,0xad,0xb9,0x4d,0xf4,0xe5,0xad,0x94,0xdc,
    0xbc,0x5a,0x21,0xbb,0x44,0x72,0x98,0xbf,0xf9,0x4e,0x76,0x69,0x4a,0xce,0xcb,0xae,
    0x90,0x3d,0xc8,0x2d,0x70,0xb2,0xab,0x52,0x72,0x5e,0xb6,0x2d,0x65,0x7b,0xb0,0xb3,
    0xca,0xc9,0xae,0x4d,0xc9,0xb5,0xd5,0xdf,0xe1,0x89,0xeb,0xd8,0x47,0x5a,0x0f,0xfb,
    0x89,0x7f,0x4c,0x3e,0x58,0x9f,0x92,0x83,0xff,0xb0,0xff,0x6c,0x70,0xe3,0x07,0xf7,
    0x71,0x5e,0x36,0x68,0xfc,0xf8,0xfd,0x6b,0xb5,0xf1,0x49,0xca,0x6f,0x90,0x3e,0xaa,
    0xc7,0x48,0x54,0xef,0xcf,0xe7,0x6a,0xf3,0x13,0xcd,0xa3,0xe9,0x6d,0x70,0xf3,0x88,
    0xb9,0x6b,0x93,0x5f,0x3f,0x97,0x7d,0xc8,0x6e,0x94,0x2c,0xfe,0xda,0x7e,0xb6,0x59,
    0xf3,0xd3,0x52,0xda,0x31,0x2e,0x30,0x1f,0x8f,0xa8,0xff,0xff,0x4c,0x39,0xff,0x8f,
    0xa8,0xff,0x5f,0xcb,0x8a,0xfe,0x83,0xfb,0x02,0xef,0x46,0x49,0xef,0x0b,0xb5,0x05,
    0x19,0xd4,0xb7,0x69,0x7d,0x63,0x3c,0x4d,0x19,0x7d,0x5b,0x2a,0x15,0x3e,0x2b,0xeb,
    0x5d,0xe9,0xaa,0x78,0x93,0xad,0x4a,0xb6,0xc9,0xc9,0x46,0x4e,0x16,0x7c,0x3b,0xc5,
    0x66,0x2c,0xbc,0x93,0xec,0x45,0xce,0x4e,0x90,0x9d,0xb2,0xb3,0x93,0x3a,0x3b,0xc1,
    0xd9,0xc9,0x9c,0x1d,0xd8,0x84,0x9c,0xcd,0x45,0xbb,0x8c,0xdf,0x69,0x41,0xc6,0xe6,
    0xa2,0xbd,0x6c,0x83,0xf3,0x63,0xc6,0x5f,0x9b,0x8b,0x27,0x6a,0xfc,0xee,0x0b,0x7e,
    0x81,0xfc,0x36,0xb7,0x1e,0x77,0xc9,0xb8,0x6e,0x2d,0xa6,0x76,0xcb,0x88,0x41,0x67,
    0x60,0x13,0xfb,0xb4,0x7b,0x56,0xac,0xf1,0xdd,0x32,0xae,0xf1,0xc1,0xe2,0xf6,0xfc,
    0x0a,0xee,0x21,0xcd,0xd9,0xde,0x19,0x31,0xe8,0xdb,0x3b,0x74,0xf8,0xde,0x18,0xdf,
    0x96,0xd9,0xfd,0xe3,0x7d,0x33,0xca,0x01,0xc7,0xf9,0x10,0x39,0x07,0xf8,0x37,0x9d,
    0xdd,0x7d,0x1b,0xec,0xee,0x2f,0xbb,0x68,0xdb,0xec,0x1c,0x98,0x11,0x6f,0xb4,0xd3,
    0xd1,0xd9,0x39,0x50,0x76,0xce,0x6b,0xe2,0x1e,0x79,0xb0,0x38,0x8c,0x1f,0xed,0x19,
    0x7e,0xa8,0xc3,0x3b,0x66,0xc5,0xd9,0xb2,0x4b,0x46,0x9d,0x92,0x7b,0x4e,0x72,0x44,
    0x46,0xbc,0xd5,0x3d,0x9f,0xfc,0x76,0x46,0x7c,0xad,0x3b,0x97,0x7e,0x57,0xba,0x4d,
    0x4e,0xf7,0x7b,0x19,0x71,0xff,0x6c,0xf3,0xc8,0x8c,0xf8,0x22,0xf7,0x6c,0xf3,0xfb,
    0x19,0x6d,0x1e,0xe9,0xfa,0x72,0x94,0xec,0x95,0x9d,0xbd,0xa3,0x33,0xe2,0xad,0x4e,
    0xf7,0x98,0x8c,0xfa,0x47,0x3b,0xdd,0xe3,0x32,0x8e,0xd1,0x8f,0xa3,0x5b,0x46,0xdc,
    0x8f,0xe3,0xf8,0x8c,0xb8,0x1f,0x47,0x0f,0xe9,0xfa,0x71,0xf4,0xcc,0x88,0xfb,0x71,
    0x9c,0x90,0x11,0xf7,0xe3,0x38,0x31,0xa3,0xcd,0x13,0x5c,0x5f,0x4e,0x92,0x3d,0x3f,
    0x8e,0x1f,0x65,0xc4,0xfd,0x38,0x7e,0x9c,0x51,0x1f,0x9c,0xdd,0xaf,0xbd,0x39,0xe2,
    0xf8,0x7e,0xac,0xd8,0xff,0x8d,0xde,0xf9,0xc7,0x5f,0x8b,0x8b,0xd0,0x6e,0x47,0x39,
    0xc3,0x53,0xe1,0xc0,0xc0,0xd9,0xb5,0xca,0x5d,0x11,0x39,0xe8,0x21,0xcf,0x4c,0x74,
    0xdf,0x1a,0x80,0x9b,0x90,0x97,0x99,0x6a,0x07,0xbf,0x6d,0xcf,0xbc,0x5b,0xe7,0x33,
    0xab,0x4f,0xd6,0xf9,0xcc,0xea,0x7f,0x74,0xe7,0x33,0xac,0xbb,0xa9,0x11,0x75,0x20,
    0x07,0xce,0xd6,0xe3,0xf4,0x88,0xf3,0x6a,0xf5,0xfb,0x22,0xfa,0xe7,0x57,0x5a,0xef,
    0xe7,0x66,0x94,0xb9,0xcf,0xad,0xd9,0x3e,0xc2,0xc0,0x19,0x76,0x41,0x46,0x19,0x8f,
    0xf5,0xcf,0xd8,0xee,0xb9,0xb2,0x07,0x6c,0x50,0x46,0xfc,0x02,0x87,0x0d,0xc9,0x68,
    0xf3,0x02,0x97,0x7b,0x2e,0xca,0x28,0x0b,0xee,0x7a,0x61,0x17,0x67,0xc4,0xf1,0x8d,
    0xeb,0xb5,0xc2,0x2e,0xc9,0x88,0xe3,0x3b,0xd7,0xcb,0x74,0x6d,0x70,0x69,0x46,0xdc,
    0xde,0x33,0x1d,0x9a,0x15,0x67,0xfb,0x4b,0x33,0xee,0xdb,0xad,0xee,0xac,0xdb,0x9c,
    0x51,0xc6,0xae,0xaf,0x5a,0x32,0x62,0xa3,0x5d,0x8c,0x5c,0x2e,0xcc,0xde,0x7d,0xad,
    0xbf,0x73,0x96,0x51,0x16,0x9c,0xc5,0xe1,0xbf,0x67,0xc2,0x5d,0x2c,0x8d,0xcc,0x88,
    0x5f,0xae,0xb8,0x99,0xa8,0xf9,0x9c,0xa9,0xef,0x4b,0x1e,0x72,0x73,0x8e,0xeb,0x82,
    0xd9,0x79,0xfd,0x21,0xc9,0xe0,0xb7,0x5d,0x73,0xcd,0x89,0x78,0x6d,0xb0,0x51,0xfb,
    0x96,0xc9,0xe0,0xaf,0x5d,0x7b,0x3c,0x12,0xf1,0xda,0x02,0xb6,0x21,0x3f,0xdb,0xc5,
    0xe6,0xa3,0x11,0xf9,0x7b,0x4a,0xc5,0x7b,0x49,0xd6,0x97,0x89,0xb2,0x01,0xb9,0xa7,
    0x6b,0xec,0x33,0xe2,0xed,0x51,0xf5,0xc5,0xce,0x76,0xf3,0xf4,0x6d,0x08,0xbe,0x27,
    0xb1,0x31,0x3f,0x11,0x51,0x07,0xdc,0x45,0xca,0x83,0x4f,0x46,0x45,0x1e,0x7c,0x42,
    0xe7,0xb4,0xed,0xef,0xd4,0x2b,0xe6,0x5f,0x74,0x3e,0x7a,0x36,0xe2,0x1a,0x00,0x87,
    0x6f,0x8b,0xf0,0xee,0x5f,0xff,0x1a,0xf1,0x4c,0xd7,0x26,0x86,0x0f,0xac,0xd1,0x3e,
    0xf8,0x8a,0x9b,0xc7,0x05,0x11,0xfb,0xd5,0x5f,0x67,0xce,0x05,0x2e,0x17,0xc3,0x6f,
    0xe8,0xc3,0x20,0x71,0x2f,0x7d,0x05,0x67,0x6b,0xf2,0xe6,0x8c,0xba,0x90,0xc1,0xfc,
    0xdc,0xe6,0xf6,0x7e,0x70,0xe3,0xf3,0x72,0x9b,0xf6,0x3d,0xfc,0xb6,0x6b,0xee,0x57,
    0xa5,0xb3,0x20,0x2b,0xd6,0xe1,0x6b,0x19,0x71,0x93,0xf9,0x5b,0xc6,0xf6,0xbc,0xcc,
    0xeb,0x19,0x71,0x8b,0xfd,0x37,0x33,0x62,0xaf,0xb9,0xd8,0x7f,0x2b,0x23,0xfe,0x85,
    0x8b,0xfd,0xb7,0x33,0xe2,0x88,0xfd,0x66,0xf9,0xe0,0x9d,0x8c,0xf8,0x18,0xd5,0x97,
    0x64,0xc4,0x2c,0xb6,0xdf,0xcb,0x88,0xe1,0x7b,0x6a,0xcb,0x6b,0xcb,0x32,0xde,0x83,
    0x78,0x2f,0x2b,0xae,0x41,0xff,0x9e,0x11,0xb7,0xfb,0x25,0xe6,0xe3,0xe5,0x19,0x39,
    0x5b,0x03,0x2b,0x33,0xea,0x2d,0x57,0x6c,0x9b,0x5f,0x6e,0xcb,0x8a,0x78,0x7a,0xab,
    0xc6,0x78,0x43,0x8c,0xad,0x94,0xff,0x1e,0x54,0xdb,0xb7,0x67,0x9c,0xb7,0x2e,0x7a,
    0x06,0x36,0xc9,0xf9,0x1a,0xdc,0xef,0xf2,0x32,0x51,0x36,0xf1,0xdb,0x9e,0x71,0xff,
    0x5e,0xf3,0xb7,0x20,0x2a,0x9e,0x01,0xdf,0x95,0x11,0xf7,0xb1,0x36,0x21,0x63,0xfb,
    0x77,0xa9,0x7f,0x93,0x64,0x6b,0x62,0x43,0x7d,0x92,0xeb,0xef,0xdb,0x35,0xea,0xfd,
    0x4e,0x7b,0x3b,0x64,0x2d,0xae,0xef,0x76,0x71,0x03,0x39,0xb4,0x65,0x7e,0xbc,0xb7,
    0x61,0x2c,0x33,0xdc,0x58,0xc0,0x4d,0x46,0xde,0x54,0x7b,0x93,0xdd,0x58,0xfe,0xe8,
    0xc6,0xf2,0x4b,0x61,0x53,0x33,0xe2,0x7e,0x2c,0xd3,0x34,0x96,0xa9,0xea,0xfb,0x0c,
    0xd9,0x9a,0xde,0x50,0x9f,0xe1,0xc6,0xf2,0x6e,0x8d,0x7a,0x93,0x35,0x96,0xe9,0x6e,
    0x2c,0xf7,0xbb,0xb1,0xbc,0xab,0xb1,0x58,0xae,0x79,0xa0,0x61,0x2c,0x8f,0xbb,0xb1,
    0x80,0x7b,0x30,0x2f,0x8f,0xab,0xbd,0x07,0x5d,0x7c,0xcd,0x52,0x1f,0x47,0xbb,0x7e,
    0xcf,0xce,0x88,0xbf,0xea,0xd6,0xfb,0xc3,0x19,0x7d,0x39,0xdb,0xe9,0xce,0x91,0x2e,
    0xbe,0xe5,0xb7,0xbc,0xfb,0x48,0x46,0xdc,0xe7,0xd3,0xc7,0x32,0xf6,0xfd,0x11,0x8d,
    0xdb,0xfa,0xf1,0xb8,0x1b,0xf7,0xb2,0x1a,0x65,0xe0,0x8b,0xc7,0xd4,0x5f,0xe3,0x96,
    0xd6,0xd8,0x36,0xb8,0x87,0xc5,0xd9,0x33,0xc2,0x79,0x5a,0xc3,0x78,0xaf,0xd6,0xb0,
    0x27,0xb5,0xa6,0x81,0xd9,0x73,0x90,0xa7,0x32,0xe2,0x7d,0xdc,0x33,0x8f,0xa7,0x33,
    0xea,0x83,0xb3,0xf5,0x32,0x3f,0x23,0xbe,0x3d,0xcf,0x65,0xc4,0x96,0xd6,0x8a,0x77,
    0x7e,0x9f,0xcf,0x88,0xa3,0xcf,0x67,0x94,0xd2,0x7a,0x8e,0x7b,0x25,0x62,0x9e,0x03,
    0x57,0xd5,0xf7,0xd3,0x65,0xcd,0x95,0xcd,0xd1,0xab,0xca,0x77,0xf6,0x7c,0x7e,0xb1,
    0xdb,0x47,0xc0,0xbd,0x96,0x97,0xc5,0xca,0xef,0xaf,0xb9,0xef,0xd9,0xfe,0xaa,0xef,
    0x24,0x37,0xba,0xe7,0x18,0x7f,0x8b,0x88,0xdf,0xa0,0xb1,0xbc,0x1e,0x11,0x6b,0x2e,
    0x15,0x7a,0x6f,0x48,0xaf,0xc5,0xe9,0xbd,0x19,0x11,0x37,0xbd,0xb7,0x22,0x62,0xcd,
    0xee,0x1b,0xcf,0xb7,0x23,0xda,0x7b,0x2b,0x2a,0xbe,0xf1,0x7c,0x57,0xdf,0xea,0xbd,
    0xad,0x6f,0x0a,0xf1,0xad,0xf6,0x32,0x7d,0xa7,0x6d,0xf7,0x46,0x96,0x47,0x94,0xf3,
    0xf7,0xaf,0x56,0x0a,0x6b,0x72,0xfd,0xfa,0x40,0xfd,0x1a,0xe1,0xfa,0xd5,0x16,0x11,
    0xb7,0x6b,0xbe,0x0f,0xf5,0x9d,0x61,0x5b,0x54,0xdc,0x1f,0x5c,0x13,0xb1,0x0d,0xd8,
    0x04,0x3f,0x10,0xff,0x8f,0xa6,0x88,0xf8,0x2b,0xfa,0xae,0xd3,0xfc,0xb7,0xb8,0xe1,
    0x3b,0x4f,0xfc,0xfd,0x67,0xde,0x8b,0x63,0xf2,0xf2,0x7f,0x74,0x0e,0x3f,0x40,0xa0,
    0x4a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//  uniform int kOffsetX;
//  uniform int kOffsetY;
//  uniform int kOffsetZ;
//     uniform int kWidth;
//  uniform int kHeight;
//     uniform int kAlphaBits;
//  uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//  int blockid = int(gl_LocalInvocationID . x >> 4u);
//  int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//  vec3 dir = minColor - maxColor;
//  float distMin = dot(minColor, dir);
//  float distMax = dot(maxColor, dir);
//  float dist = dot(color, dir);
//  uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//  uint bit0_in = factor & 1u;
//  uint bit1_in = factor >> 1;
//  return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//  ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//  float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//  float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//  float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//  float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//  float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//  float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//  vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//  float eigenvalue = 0.0f;
//
//  for(int i = 0;i < 4;i ++){
//   float r = dot(vec3(cov0, cov1, cov2), vg);
//   float g = dot(vec3(cov1, cov3, cov4), vg);
//   float b = dot(vec3(cov2, cov4, cov5), vg);
//   vg = vec3(r, g, b);
//   eigenvalue = sqrt(dot(vg, vg));
//   if(eigenvalue > 0.0f){
//    float invNorm = 1.0f / eigenvalue;
//    vg *= invNorm;
//   }
//  }
//
//  const float kDefaultLuminanceThreshold = 4.0f * 255;
//  const float kQuantizeRange = 0.512f;
//
//  if(eigenvalue < kDefaultLuminanceThreshold){
//   vg = vec3(0.299f, 0.587f, 0.114f);
//  }
//  else {
//   float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//   vg *= kQuantizeRange / magn;
//  }
//  float dist = dot(vec3(rgbColor), vg);
//  float min_dist = subgroupClusteredMin(dist, 16);
//  float max_dist = subgroupClusteredMax(dist, 16);
//  uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//  uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//  minColor = subgroupShuffle(rgbColor, min_index);
//  maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//  float dist = float(maxAlpha - minAlpha);
//  uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//  ind = - ind & 7;
//     ind ^= int(2 > ind);
//  return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//  minAlpha = subgroupClusteredMin(alpha, 16);
//  maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//  int minValue, maxValue;
//  ComputeMaxMin(value, minValue, maxValue);
//  uint indices = 0;
//  if(minValue != maxValue)
//   indices = GetIndicesAlpha(value, minValue, maxValue);
//
//  uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//  uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//  if(pid == 5){
//   mask0 |=(indices & 0x1)<< 31;
//   mask1 |=(indices & 0x6)>> 1;
//  }
//  return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//  uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//  return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//  return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//  uint t = a;
//  a = b;
//  b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//  if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//   return;
//
//  ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//  int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//  int texOffsetY = kWidth >> 2;
//  int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//  ivec4 result;
//
//  bool punchthrough;
//  result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//  uvec4 finalResult;
//
//  uvec3 minColor, maxColor;
//  ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//  uint minColor565 = packColorToRGB565(minColor);
//  uint maxColor565 = packColorToRGB565(maxColor);
//  if(minColor565 > maxColor565){
//   swap(minColor565, maxColor565);
//  }
//  uint indices = 0;
//  if(minColor565 != maxColor565){
//   indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//  }
//  else {
//   indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//  }
//  uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//  finalResult . b = maxColor565 |(minColor565 << 16);
//  finalResult . a = mask;
//
//  finalResult . rg = EncodeBC4(result . a, pid);
//
//  if(pid == 0){
//   tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//   imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//  }
//
// }
