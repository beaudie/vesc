// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x0b,0xb8,0x55,0x55,
    0xb5,0xde,0x7b,0x9f,0xbd,0x1e,0x73,0x6d,0x40,0x44,0x1e,0xa2,0xc9,0xc3,0x37,0x0a,
    0x88,0x50,0xa1,0x21,0xa2,0x61,0x82,0xa4,0x22,0xa9,0x24,0x58,0x22,0x82,0x26,0x78,
    0x38,0x56,0x72,0xbc,0x9e,0x02,0x8f,0x92,0x64,0x0f,0x3d,0x64,0x69,0x3e,0xbe,0xae,
    0xd7,0xaf,0xb4,0x34,0xf5,0xaa,0xa4,0x46,0x05,0xbe,0x48,0x1e,0x99,0xdc,0xab,0xa6,
    0xa5,0x56,0x37,0xb9,0x19,0x2f,0x05,0x7c,0x00,0x82,0x8a,0x77,0xfd,0xfb,0xff,0x07,
    0x6b,0xb0,0xe5,0x9e,0xef,0x9b,0xdf,0x3a,0xf3,0x1f,0xe3,0x1f,0x73,0xce,0x31,0xe7,
    0x1c,0x73,0xae,0xb9,0xe7,0x6a,0xaa,0x1c,0x94,0x94,0x9a,0xca,0xa5,0xac,0x94,0x96,
    0xae,0xac,0x95,0xea,0x7f,0x7b,0x97,0x2a,0xa5,0xb2,0x9e,0x83,0xf5,0x1c,0xa9,0xe7,
    0x89,0x7a,0x8e,0xce,0x9f,0xb5,0x52,0x5c,0xd7,0x1b,0x73,0xea,0x99,0xa7,0x0e,0xbe,
    0x6c,0xf6,0xf4,0xc1,0x9f,0xfc,0xd4,0x10,0xf0,0xbb,0x94,0x9a,0xea,0x76,0x20,0xdb,
    0x2b,0xb7,0x1b,0xe5,0xcf,0x6a,0x9e,0x66,0x4d,0x9d,0xd1,0x02,0x7c,0x62,0x9e,0xce,
    0xcb,0xd3,0x6b,0xb9,0x42,0xd7,0xdc,0x46,0xb5,0x6e,0xb3,0x54,0x3a,0x41,0x9c,0xba,
    0xcd,0x1c,0x9d,0x58,0x2f,0xa3,0x54,0xda,0x4f,0xf9,0xf3,0x94,0xdf,0xbf,0x9e,0x6f,
    0xaa,0xf3,0x4b,0x92,0xe1,0x7f,0xc8,0x06,0xe4,0x69,0x6c,0x5e,0xe2,0xe5,0x15,0xca,
    0x0e,0xe2,0x63,0x17,0x56,0x16,0x56,0x75,0x58,0x45,0x58,0xea,0xb0,0x26,0x61,0x9d,
    0x1c,0x56,0x15,0xd6,0xd5,0x61,0x91,0xb0,0xee,0x0e,0x8b,0x85,0xed,0xab,0x7a,0x5a,
    0x19,0xa8,0x67,0xe7,0x9c,0x70,0x60,0xa9,0xa8,0x37,0xf2,0xfd,0x5d,0x7e,0x45,0x83,
    0x7c,0x85,0xe4,0x65,0xd9,0x42,0xbe,0xb7,0x64,0xcf,0x46,0x6c,0x73,0x6f,0xc9,0x46,
    0x07,0xf2,0xf6,0xc9,0x4b,0x43,0x79,0xfd,0x73,0x0c,0xed,0xc0,0xff,0x3d,0x72,0x7d,
    0xd4,0xab,0x9f,0x6c,0xf5,0xca,0xf3,0x49,0x89,0x75,0x35,0x79,0x4d,0xf2,0x52,0xfd,
    0x59,0xad,0xb7,0x3d,0x91,0xcf,0xa1,0xbf,0xb7,0xfe,0xaf,0x48,0xde,0x4d,0xf2,0xbd,
    0x95,0xef,0xa5,0x3c,0x6c,0xf6,0xcc,0x4b,0x3e,0x40,0xf6,0xc0,0xed,0x93,0x3f,0x91,
    0x6f,0x52,0xfe,0x30,0xd9,0x6a,0x12,0xf7,0x04,0x71,0x93,0xba,0x2f,0x39,0xce,0xa0,
    0x37,0x5a,0xf6,0xaa,0xd2,0x3b,0x5b,0xf5,0x07,0x7f,0x84,0xf2,0x13,0x85,0x1d,0xa9,
    0x36,0x4e,0x56,0x5f,0x9a,0xfc,0x3c,0x27,0x47,0x99,0x53,0x5c,0x1b,0xcf,0x97,0xac,
    0xe6,0xe4,0xd3,0x54,0x9e,0xe5,0x67,0xd4,0xc7,0x71,0x61,0xbf,0xd9,0xc9,0x91,0x6f,
    0x69,0x28,0xbf,0x55,0x3e,0x32,0x7e,0x5b,0x83,0xbc,0xdd,0xf9,0xe1,0xbb,0x2a,0xdb,
    0x97,0xd7,0xa1,0xfa,0x5b,0x7e,0x81,0xc6,0x9c,0xe5,0x7f,0xa0,0xb1,0x35,0x30,0xf7,
    0x16,0xf8,0x37,0xa8,0x4d,0x1d,0xd2,0xfd,0x81,0xd3,0xfd,0x51,0x9e,0x3e,0x72,0xf9,
    0xdb,0x1b,0xea,0xf6,0x33,0xd5,0xc5,0xea,0xf6,0x68,0x9e,0x06,0xb9,0xfc,0x12,0x95,
    0x65,0xf9,0xa5,0x1a,0xeb,0x96,0x5f,0xe9,0xea,0x86,0xfc,0xaa,0x12,0xe7,0x84,0xe5,
    0x5f,0xc8,0x53,0xdf,0x3c,0x7d,0x22,0xcf,0xff,0x33,0x7f,0x8e,0x56,0x1d,0x4d,0xfe,
    0x7a,0x3d,0x5e,0xb0,0x2d,0x90,0xfd,0x4b,0xfe,0x5b,0xa5,0x7e,0x7c,0xdd,0xe9,0xae,
    0xd1,0x58,0xb0,0xfc,0xda,0x3c,0x05,0x97,0x5f,0xa7,0xf9,0x6a,0xb6,0xd6,0xcb,0xd6,
    0x1a,0xe9,0xae,0x73,0xba,0x1b,0x34,0xd6,0x4c,0xf7,0x0d,0xf5,0x63,0xb3,0x64,0xeb,
    0x9c,0xec,0x4d,0xc9,0xda,0x55,0x2f,0x6f,0x67,0xa3,0xfa,0xcf,0x74,0x37,0xb9,0xfa,
    0x6f,0x90,0xdc,0x74,0x37,0xe7,0x29,0x73,0xba,0x6f,0xb9,0xfa,0x4d,0x96,0xdc,0x64,
    0x6f,0xab,0xbc,0x35,0xb2,0xe3,0x65,0xef,0x88,0xd7,0xbc,0x07,0xd9,0xbb,0xaa,0xab,
    0x95,0xbf,0xd6,0xc9,0xb6,0x34,0xb4,0xd1,0xcb,0xb6,0xba,0x36,0x36,0xca,0xb6,0x39,
    0xde,0x9a,0x06,0xd9,0x7b,0xaa,0x4b,0xbb,0x93,0x59,0x7b,0xb7,0x6b,0x9e,0x99,0xee,
    0x0e,0x61,0x2d,0xe2,0x78,0x3b,0xef,0x3b,0xff,0x6e,0x90,0x3f,0x4c,0xf6,0x81,0x6b,
    0xef,0x9a,0x5d,0xb2,0x7d,0xea,0xe3,0xe9,0x43,0x8d,0x99,0xf5,0xea,0xc3,0x37,0xd5,
    0x07,0x6f,0xc9,0x87,0xef,0xc8,0x27,0x5b,0xd4,0xc6,0x6d,0xaa,0xf3,0x0e,0x95,0xf9,
    0x81,0xe2,0x00,0x26,0x28,0xc6,0xc3,0x3f,0x5d,0xfd,0xbb,0x94,0x8b,0xb9,0x83,0xd8,
    0x35,0x98,0xeb,0xcd,0x28,0xcc,0xdb,0x51,0x65,0x8e,0xc5,0x26,0x27,0xbf,0x46,0xeb,
    0x91,0xe5,0x1f,0xa8,0xe7,0xaf,0x1a,0x65,0xf9,0x45,0xf5,0x7c,0xfb,0x49,0x96,0x5f,
    0x9c,0xe7,0xaf,0xed,0x79,0xeb,0xf1,0x96,0x5f,0x92,0xe7,0x7f,0xfa,0xb9,0x9e,0xbb,
    0xf4,0x1f,0xcb,0xf3,0x2f,0x5e,0xb1,0x6e,0xe4,0xc0,0xbc,0x24,0xc4,0xcf,0xc7,0xcb,
    0xe4,0x40,0x0f,0x32,0xd3,0x7b,0x36,0xff,0xff,0xd2,0x6e,0x4d,0xa3,0x46,0x28,0x9e,
    0x61,0x2d,0x2c,0xbb,0x7a,0xec,0xac,0x97,0xfb,0x8f,0x13,0x6c,0xce,0x57,0x2b,0x6c,
    0xab,0xe5,0x07,0x55,0x8a,0x39,0x8b,0xfc,0x19,0x5a,0xc3,0x8e,0xc8,0x5b,0x87,0x38,
    0xdc,0x9a,0xe7,0xfb,0xe4,0x33,0xcd,0xd6,0xb6,0xff,0x2f,0xc1,0x8f,0xff,0x56,0xe1,
    0x9c,0x84,0xee,0x08,0xe5,0xaf,0x10,0x06,0x79,0x9b,0xfe,0x8f,0xeb,0x6b,0x35,0xed,
    0x7f,0xbb,0x52,0x94,0xfd,0xbd,0x0a,0x62,0x45,0x91,0xff,0x7e,0xa5,0x88,0x37,0xc8,
    0x5f,0x57,0xb1,0x39,0x1e,0xd7,0xd7,0x80,0xeb,0x2b,0xe4,0x40,0xef,0xba,0x4a,0xd1,
    0x77,0x37,0x56,0x76,0x8f,0xd9,0xb7,0x54,0xb8,0x4e,0x59,0xfe,0x8e,0x0a,0xf7,0x11,
    0x96,0xbf,0xb7,0x82,0x75,0xb3,0x28,0xe7,0x99,0x4a,0x11,0xb7,0x3e,0x54,0xbb,0x3b,
    0x9c,0xfe,0xce,0x4a,0xa9,0xbe,0xde,0x59,0xfe,0xa3,0x0a,0xd7,0x3a,0xcb,0x63,0x60,
    0x0c,0x70,0xf9,0x72,0x13,0xf7,0x37,0x03,0x73,0xeb,0xb0,0x57,0x69,0x2a,0xe6,0xcc,
    0x46,0xc5,0x51,0xd8,0x84,0x1d,0x70,0xa1,0x0f,0x7f,0x55,0x9b,0xd8,0x57,0xe0,0xa0,
    0xcd,0x18,0x77,0xc7,0x34,0x71,0x1e,0x59,0x32,0xfc,0xd8,0x26,0x8e,0x59,0x4b,0x56,
    0xf6,0x95,0x4d,0xdc,0x8d,0x59,0xfe,0xea,0x26,0x2e,0x48,0x96,0x7f,0xae,0x89,0x7b,
    0x08,0xcb,0xbf,0x9a,0xe7,0xbb,0xf9,0xb6,0xe5,0xf9,0xce,0xf2,0xc5,0x9d,0x55,0xd6,
    0xa7,0xa3,0x5e,0x6e,0x54,0xff,0xff,0xae,0x2a,0xe7,0xe7,0x64,0x87,0xfd,0xbc,0xca,
    0xb9,0x7c,0x8b,0xeb,0x93,0x5f,0x54,0xb9,0x07,0x30,0x9d,0xbb,0xab,0x8c,0x01,0xc0,
    0x4d,0xe7,0x9e,0x2a,0xc6,0x5d,0xa1,0xf3,0xcb,0x2a,0xcb,0xbf,0xc7,0xe9,0xdc,0x9b,
    0xff,0x7f,0x9c,0xd3,0xb9,0xaf,0xca,0x3a,0xdf,0xeb,0x74,0xee,0xcf,0xff,0x3f,0xc3,
    0xe9,0xfc,0x67,0x95,0x6b,0xd9,0xfd,0x4e,0xe7,0x81,0x2a,0xf7,0x56,0x96,0x7f,0x30,
    0xcf,0xcf,0x74,0x9c,0x87,0xaa,0xd4,0x79,0xd0,0x71,0x16,0xe6,0xff,0x1f,0xe5,0x38,
    0xbf,0xca,0xf3,0xbf,0x76,0x9c,0x87,0xab,0xd4,0x01,0x8e,0xbe,0x86,0xbf,0x1e,0xa9,
    0xd2,0x47,0xf0,0x09,0xda,0x8c,0x36,0xa1,0xce,0xa8,0x13,0xca,0x00,0x07,0x7d,0xbd,
    0x48,0xbe,0x05,0x07,0x31,0xe6,0xcd,0xfc,0x79,0xa2,0xd6,0xeb,0xde,0xf9,0xac,0xc9,
    0xb4,0xdf,0x8b,0x4a,0xbb,0xff,0x29,0xec,0xe4,0xe3,0xb9,0xa9,0x54,0xcb,0x85,0xd0,
    0xab,0xef,0xdf,0xa4,0x08,0x6c,0x84,0xf2,0x9d,0x85,0xc1,0xde,0x32,0xd9,0x2b,0x37,
    0xd8,0x43,0x79,0x7d,0x34,0x5f,0x97,0x4b,0x7f,0x99,0x6c,0x20,0xbf,0x22,0x2a,0xe2,
    0x1c,0xf8,0x7f,0x8c,0x6c,0x6c,0x73,0x4e,0x62,0x5f,0x0a,0xac,0x4d,0x7b,0x1f,0xf3,
    0x4d,0xad,0xc6,0x31,0xe2,0xc7,0x49,0xa7,0x1a,0xc7,0x4e,0xab,0xc3,0x3a,0xd7,0x38,
    0x37,0xda,0xdd,0x1e,0xa7,0x4b,0x8d,0x7b,0x19,0x9f,0x6c,0xdc,0xef,0xe5,0xf4,0xdb,
    0x1d,0xde,0xd5,0xd9,0x6e,0x75,0xf8,0xde,0x35,0x8e,0x4b,0x4b,0x86,0x77,0xab,0x31,
    0x6e,0x58,0xb2,0xf6,0xec,0x53,0xe3,0x78,0xef,0xd8,0x35,0xee,0xa9,0xdf,0xbd,0xc6,
    0x35,0xc9,0x92,0xc5,0xdb,0x1e,0xf5,0xf7,0xa8,0x13,0x4e,0x28,0xe7,0xfd,0x01,0xbd,
    0x43,0x6a,0xf0,0x71,0x53,0xbd,0x1d,0xa7,0xb9,0xff,0xe7,0xe6,0xff,0x7f,0x3a,0x6f,
    0x73,0x45,0xfb,0x3f,0x85,0x8d,0x7c,0x7d,0xaa,0xd4,0xfb,0x78,0x84,0xd6,0xa5,0xd5,
    0x81,0xe3,0x62,0x84,0xe2,0xc1,0xfc,0x78,0xf7,0xfc,0x8f,0x5d,0x1e,0x63,0xe8,0x7e,
    0x97,0x47,0xbf,0x1c,0x1d,0x15,0x79,0xcc,0xeb,0xbb,0x94,0xdf,0x96,0x97,0xb6,0x4a,
    0x7d,0xf9,0x7e,0xfe,0x3f,0xf6,0x90,0xff,0x15,0xb1,0x7c,0x3c,0x47,0x6a,0x9f,0xfe,
    0x52,0xc4,0x3d,0xf6,0xf8,0x9c,0x85,0x18,0xfa,0xe7,0x88,0xd8,0x4b,0x51,0x31,0xfe,
    0xe6,0xe8,0x7d,0xe2,0x2f,0x11,0xe5,0xd7,0xa8,0x2f,0x5f,0x89,0x88,0xa1,0xef,0x4f,
    0xcc,0x31,0xac,0x4f,0xaf,0x46,0xdc,0x93,0xa3,0xbc,0x91,0x1a,0x43,0x7f,0x8d,0x88,
    0x3f,0x95,0xeb,0x20,0xff,0xb7,0x88,0xd8,0x34,0xd9,0xc6,0x5c,0xfb,0x7b,0x44,0x7c,
    0xb9,0x74,0x5e,0x93,0xce,0x0c,0xa7,0xb3,0x3a,0x22,0x0e,0x1d,0xe4,0xff,0x19,0x91,
    0x87,0x3d,0xc7,0x35,0xc2,0x5e,0x8f,0xd8,0x5f,0x90,0x4d,0x10,0xb6,0x26,0x62,0x5d,
    0xeb,0x2b,0xb6,0xb0,0xb5,0x11,0x71,0xe8,0x7f,0x21,0x47,0xd0,0x9e,0xef,0x67,0xc4,
    0x4d,0xd7,0xca,0xd9,0xa0,0x72,0x5a,0x5d,0x39,0x6f,0x28,0xbf,0xc1,0x95,0xb3,0x51,
    0xdc,0xb2,0x2b,0x67,0x53,0x44,0xfc,0x0d,0x57,0x4e,0x47,0x46,0x1c,0xe5,0x95,0x5d,
    0x39,0x6f,0x47,0x6c,0x63,0x7b,0x7d,0x2f,0x4e,0xec,0x5d,0x61,0x28,0xeb,0x0c,0xf9,
    0x7d,0x4b,0x44,0x5d,0xc8,0xae,0x12,0xb6,0x2d,0xa2,0x5d,0xc8,0xd0,0x17,0x58,0x8b,
    0xd7,0x56,0xb9,0x3e,0xb7,0xab,0x2f,0xea,0xfb,0xe8,0x2a,0x71,0xd3,0x59,0x2f,0x9d,
    0x66,0xa7,0xb3,0xa1,0x4a,0xdc,0xca,0x7b,0xa3,0x4a,0x1e,0xf0,0x07,0x72,0x0c,0xb1,
    0x6b,0x63,0x95,0x65,0x42,0x76,0x5b,0xce,0x43,0x2c,0xdb,0x64,0x78,0x3e,0xde,0xde,
    0xd2,0xa0,0xdf,0x91,0xcb,0x80,0x6f,0xce,0x13,0x30,0x8c,0x3f,0xfc,0xbf,0x3d,0x7f,
    0xae,0xd2,0x78,0x04,0xbe,0x54,0x65,0x6d,0x95,0x5d,0xc4,0x8e,0xe5,0xc2,0x76,0x08,
    0x43,0xec,0x30,0x5f,0x7f,0x58,0x25,0x5e,0x72,0x7d,0xb2,0xb3,0xca,0x76,0x40,0x66,
    0x7a,0x98,0x6c,0x3b,0xaa,0xbb,0xf7,0x49,0x39,0xa2,0x6e,0x29,0x2a,0xb8,0x91,0xc6,
    0x4d,0x29,0x2a,0xf4,0xd2,0x88,0x38,0xec,0xd5,0xc7,0x72,0xfe,0x7f,0x17,0xc5,0x59,
    0xb3,0xdf,0x35,0x62,0x9d,0xbd,0xfd,0x7d,0x22,0xfa,0xcb,0xf7,0x63,0xf7,0x88,0xb8,
    0x1f,0x43,0x3d,0x22,0xf2,0xbb,0x3b,0x7b,0xbd,0x64,0xcf,0x8f,0xd5,0x7d,0x23,0xea,
    0xf6,0x72,0x7d,0xdb,0x3b,0x62,0xbf,0xb5,0xba,0x7e,0xdb,0x2f,0x22,0x6e,0xbc,0xfd,
    0x23,0x72,0x81,0x4f,0xcf,0x75,0xb0,0x76,0x7c,0x42,0x6d,0x98,0x92,0xeb,0x20,0x4e,
    0x1d,0x20,0x6c,0x7f,0x67,0xbb,0x8f,0x6c,0xaf,0x72,0xb6,0xfb,0x46,0xc4,0x7f,0x99,
    0xeb,0xa0,0xaf,0xfb,0x45,0xc4,0x26,0x2b,0xd6,0x1c,0x18,0x15,0xfd,0x0d,0x59,0xff,
    0x3c,0x1d,0xae,0xfe,0x3d,0x5c,0xed,0xc3,0xbc,0x3e,0x36,0x66,0x99,0xe5,0xfa,0x78,
    0x66,0xfc,0x1f,0x1d,0x13,0xf7,0xe9,0x29,0xd5,0xef,0xa4,0x98,0xf2,0x1b,0x34,0x4f,
    0x80,0x8d,0x89,0x89,0x77,0xa9,0x15,0x76,0x4f,0x89,0x89,0xe3,0xef,0xf7,0xc2,0xc6,
    0xc5,0xc4,0xf1,0xce,0x6c,0x7a,0xa7,0x4a,0xaf,0xec,0xf4,0x4e,0x8b,0x89,0xe3,0xdd,
    0xf5,0x69,0x61,0xa7,0xc7,0xe4,0x43,0x66,0xdc,0x33,0xc4,0xad,0x38,0xee,0x84,0x98,
    0x78,0x87,0xe3,0x7e,0x21,0x26,0x7f,0x82,0xe3,0x9e,0x25,0x6e,0x93,0xe3,0x9e,0x1d,
    0x13,0x9f,0xe2,0xb8,0x13,0x63,0xf2,0xcf,0x76,0xdc,0xe3,0xe4,0xb3,0x92,0xf3,0xd9,
    0xb9,0x31,0x71,0x9f,0xcc,0x67,0x5f,0x8a,0x29,0xf7,0x3e,0x9b,0x12,0x13,0xf7,0x3e,
    0x9b,0x1a,0x13,0xf7,0x3e,0xbb,0x20,0x26,0xee,0x7d,0x36,0x5d,0x7a,0xde,0x67,0x17,
    0xc6,0xc4,0xbd,0xcf,0x2e,0x8a,0xc9,0xbf,0xd0,0xd5,0xfd,0x62,0x71,0xbd,0xcf,0x66,
    0xc4,0xc4,0xbd,0xcf,0x66,0xc6,0xe4,0xcf,0x70,0xdc,0x66,0x71,0xbd,0xcf,0x66,0xc5,
    0xc2,0x1d,0xb7,0x25,0x26,0x1f,0x32,0xc4,0x2c,0xac,0x63,0xc7,0xc7,0xf4,0x25,0x64,
    0x88,0x35,0x07,0x6a,0x2c,0xf6,0x77,0x63,0x71,0x67,0x44,0xbf,0x36,0x39,0xbf,0xa6,
    0x31,0x71,0x9f,0xcc,0xaf,0x21,0xa6,0xdc,0xfb,0xb5,0x53,0x4c,0xdc,0xfb,0xb5,0x4b,
    0x4c,0xdc,0xfb,0x75,0xaf,0x98,0xb8,0xf7,0xeb,0xde,0xd2,0xf3,0x7e,0xed,0x16,0x13,
    0xf7,0x7e,0xdd,0x27,0x26,0xbf,0x9b,0xf3,0x4d,0x0f,0x71,0xbd,0x5f,0x7b,0xc6,0xc4,
    0xbd,0x5f,0x7b,0xc5,0xe4,0xf7,0x74,0xdc,0xde,0xe2,0x7a,0xbf,0xee,0x17,0x13,0xf7,
    0x7e,0xdd,0x3f,0x26,0x7f,0x3f,0xc7,0x2d,0x6b,0x2c,0x56,0x9c,0xcf,0xfa,0xc5,0xc4,
    0x7d,0x32,0x9f,0xf5,0x8f,0x29,0xf7,0x3e,0x3b,0x38,0x26,0xee,0x7d,0x76,0x68,0x4c,
    0xdc,0xfb,0xec,0xb0,0x98,0xb8,0xf7,0xd9,0x00,0xe9,0x79,0x9f,0x1d,0x11,0x13,0xf7,
    0x3e,0x3b,0x32,0x26,0xff,0x08,0x57,0xf7,0x41,0xe2,0x7a,0x9f,0x0d,0x8e,0x89,0x7b,
    0x9f,0x1d,0x15,0x93,0x3f,0xd8,0x71,0x8f,0x16,0xd7,0xfb,0x6c,0x68,0x4c,0xdc,0xfb,
    0x6c,0x58,0x4c,0xfe,0x50,0x37,0x16,0x9b,0x62,0xfa,0x72,0x58,0xc3,0x58,0xc4,0x73,
    0x8b,0xf6,0x5d,0x3d,0x6b,0x1c,0xb3,0x88,0x95,0xd0,0xc7,0x38,0x3d,0x3e,0x2f,0xed,
    0x68,0xad,0x5f,0x56,0x8f,0x87,0x62,0xea,0xda,0xbe,0x01,0xd8,0xc2,0x98,0x38,0xf6,
    0xe3,0x88,0xe1,0x78,0x77,0x7d,0x38,0xe6,0xde,0x10,0x32,0x8b,0xe1,0x8f,0xc4,0xc4,
    0x6d,0xbf,0xf1,0x68,0x4c,0xac,0xd5,0xad,0x53,0xbf,0x8e,0x89,0xb7,0x68,0xdf,0x05,
    0xfb,0x8b,0x62,0xe2,0xf7,0x2a,0xf6,0xff,0x2e,0x66,0xec,0x6f,0x51,0xec,0x7f,0x32,
    0x2e,0x62,0x3f,0x64,0x8b,0xf3,0x04,0x0c,0x6d,0x5c,0x1c,0x17,0xf5,0x7c,0x5c,0xf5,
    0xc4,0x39,0xa5,0xad,0x23,0x4f,0xc4,0xc4,0xa7,0x94,0xe8,0x1b,0xe3,0xe1,0x09,0xdf,
    0x40,0xe7,0xa9,0x98,0x65,0xc2,0x5f,0x4f,0xc8,0x3e,0xca,0xbd,0x3c,0x2d,0xca,0x85,
    0xce,0xd2,0x3c,0x3d,0x2f,0x3e,0x9e,0xcf,0xe4,0x2d,0x42,0xb9,0x2f,0xaa,0xdc,0x3b,
    0xb4,0xa6,0xd9,0x7e,0xf2,0xa5,0x98,0x32,0xcb,0xbf,0x2c,0xbd,0x3f,0xe4,0x39,0xe4,
    0x5f,0x89,0x89,0x2d,0xd1,0xbb,0x87,0xd9,0xfb,0x9b,0xf4,0xee,0x6d,0xb0,0xf7,0xf7,
    0x98,0x32,0xe3,0xaf,0x16,0x7f,0x65,0x03,0xff,0x75,0xf1,0x37,0x96,0x76,0xe7,0xff,
    0x2b,0xa6,0xcc,0xf8,0xeb,0xc5,0x9f,0x2c,0xbe,0xad,0xeb,0x6f,0xc6,0xac,0x3b,0xea,
    0x67,0xd8,0xe6,0x98,0xe5,0xaf,0x76,0xd8,0x3b,0x31,0x6d,0xae,0x8f,0x8b,0xbe,0xdc,
    0x12,0x93,0x7f,0x9f,0xfc,0xbf,0x35,0x26,0x86,0x33,0x11,0xf8,0xb4,0xd5,0xf9,0x14,
    0xb2,0x6d,0x18,0xc7,0x09,0x7d,0x8a,0xa7,0xd9,0xf9,0x42,0xc2,0x32,0xcd,0xce,0x99,
    0x09,0x31,0xb3,0x33,0xdb,0xd9,0x81,0xec,0xac,0x3c,0x2d,0x93,0x9d,0x65,0xce,0xce,
    0x8a,0x84,0xf5,0x34,0x3b,0x2b,0x13,0x62,0x66,0xe7,0x32,0x67,0x07,0xb2,0x3f,0xe4,
    0xe9,0xbc,0x94,0x76,0xf0,0x3c,0x43,0xef,0x6b,0x17,0xa4,0xf4,0xc9,0xdf,0xd5,0x66,
    0xf3,0xe9,0xf4,0x94,0xe3,0xd7,0xf4,0x2e,0x4e,0xe9,0xb7,0xd5,0xf2,0x8b,0xe1,0x33,
    0x52,0xea,0x5a,0xc2,0x1e,0x0d,0xf8,0xcc,0x94,0x32,0xf0,0xae,0x12,0x76,0x49,0xca,
    0xf2,0x20,0xfb,0xbd,0xb0,0x96,0x94,0x38,0xde,0x57,0x97,0x0a,0xfb,0x9a,0x30,0xbc,
    0xab,0x3e,0x2d,0xec,0xeb,0x29,0x75,0x21,0xc3,0x78,0xbf,0x4c,0x6d,0x41,0xbb,0x6c,
    0x7c,0x3c,0x9b,0x70,0x7c,0xe0,0xec,0x66,0x8d,0x1b,0x1f,0xab,0x12,0xca,0x4c,0xef,
    0x39,0xe9,0xe1,0x3d,0xd7,0xeb,0x3d,0x9f,0x50,0x66,0xef,0x5b,0x2f,0x4a,0x0f,0xe7,
    0x28,0xbb,0xc6,0x7e,0x42,0xdc,0x62,0xc1,0x9f,0x13,0x62,0x38,0x9b,0x7a,0x5a,0xd8,
    0x5f,0x12,0xda,0xfa,0xb3,0x2b,0xf3,0x55,0xd9,0xda,0xa0,0x31,0x69,0xf6,0xfe,0x9a,
    0x50,0x66,0x7a,0xff,0x93,0x14,0x63,0xbc,0xd5,0xe9,0xfd,0x23,0xa1,0xec,0xf7,0x2a,
    0xe3,0xb5,0x84,0x58,0x7b,0xa9,0x28,0x77,0x75,0x42,0x7b,0xaf,0xb9,0x36,0xbc,0xee,
    0xec,0xed,0x9a,0x2f,0x09,0x71,0x6b,0xc3,0x9a,0x84,0x18,0xce,0xd9,0xcc,0xd6,0xda,
    0x84,0xf6,0xd6,0x24,0x05,0xef,0x8d,0x84,0x71,0xd1,0xea,0xba,0x49,0xb6,0x5b,0x1b,
    0xe6,0xe3,0xe6,0x84,0x32,0xab,0xeb,0x5b,0x09,0xb1,0x16,0x57,0xd7,0xb7,0x13,0xda,
    0x83,0xcc,0x62,0xf4,0xbb,0x09,0x63,0x74,0xc9,0xcd,0xf9,0x2d,0x09,0xf1,0x8f,0x1a,
    0xfa,0x74,0x6b,0x42,0x99,0xe9,0x6d,0x97,0x1e,0xfa,0x7e,0x83,0xd3,0xdb,0x91,0x50,
    0x66,0x7a,0x1f,0x4a,0xcf,0x7e,0x43,0x30,0xbd,0x9d,0x09,0x65,0xa6,0x57,0x4e,0xa9,
    0x77,0x6f,0xc3,0x18,0xa9,0xa4,0x94,0x99,0x5e,0x24,0xbd,0xed,0xa5,0xdd,0xf5,0xe2,
    0x94,0x32,0xf3,0x41,0x9a,0x72,0x1c,0xfa,0x35,0x23,0x13,0xd6,0xec,0xfc,0x52,0x4b,
    0xa9,0x9b,0x39,0x6e,0xe7,0x94,0xfe,0xf2,0xdc,0xbd,0x84,0x79,0x6e,0xd7,0x94,0xba,
    0x7b,0x39,0x6e,0xb7,0x94,0xbe,0xf2,0xdc,0xee,0xc2,0x3c,0xb7,0x47,0x4a,0xdd,0xee,
    0x8e,0xdb,0x2b,0xe5,0x58,0x6e,0x71,0xdc,0xde,0xc2,0xd6,0x38,0xee,0x7e,0x29,0x75,
    0x7b,0x3b,0xee,0x27,0x52,0xfa,0xde,0x73,0xfb,0x08,0xf3,0xdc,0xbe,0x29,0x75,0xfb,
    0x38,0x6e,0xff,0x94,0xfd,0xe1,0xb9,0x07,0x09,0xf3,0xdc,0x83,0x53,0xea,0x1e,0xe4,
    0xb8,0x87,0xa6,0x1c,0xbb,0xbe,0xbd,0x87,0x0b,0xf3,0xed,0x1d,0x90,0x52,0xf7,0x70,
    0xc7,0x3d,0x32,0x65,0xff,0x7a,0xee,0x20,0x61,0x9e,0x3b,0x38,0xa5,0xee,0x20,0xc7,
    0x1d,0x92,0xb2,0xcf,0x3d,0x77,0xa8,0x30,0xcf,0x1d,0x96,0x52,0x77,0xa8,0x8b,0xc1,
    0xc3,0x53,0xf6,0x3b,0xfc,0x38,0xc0,0xe1,0x23,0x52,0xf6,0x29,0x7c,0x84,0x32,0xe7,
    0x29,0x16,0x8e,0x4c,0x29,0x1b,0xee,0x74,0x4f,0x4c,0xd9,0x87,0xf0,0xc9,0x30,0xa7,
    0x3b,0x3a,0xa5,0x0c,0xba,0xb6,0xc7,0x39,0x29,0xe5,0x1e,0x67,0x8a,0x7b,0x4f,0xfd,
    0x5c,0x4a,0xdc,0xec,0x8d,0x49,0x89,0x59,0xb2,0xb8,0x3e,0x36,0x65,0xf9,0x63,0x9c,
    0xbd,0x53,0x64,0xaf,0xcd,0xd9,0x1b,0x97,0x12,0x37,0x7b,0xa7,0xa6,0xc4,0x2c,0x99,
    0xbd,0xd3,0x52,0xd6,0xf1,0x54,0xb7,0x4e,0x4c,0x48,0x59,0xce,0x69,0x0e,0x3b,0x33,
    0x25,0xde,0xd5,0xad,0x13,0x67,0xa7,0xc4,0x81,0x99,0xde,0x44,0xb5,0x15,0xb2,0x4e,
    0xa5,0xb4,0x8e,0x9d,0x93,0x72,0xdf,0x87,0xdf,0x70,0x21,0xc7,0x6f,0x05,0xc7,0x36,
    0xed,0xbe,0x8e,0xe0,0x89,0x7d,0x13,0xf4,0x07,0xd6,0x78,0x3e,0x89,0x75,0x12,0x5c,
    0xac,0x31,0x26,0x3b,0xb0,0xc6,0xb5,0x08,0x32,0xe8,0x40,0x76,0x4f,0xde,0x46,0xac,
    0xc1,0xdf,0xa8,0x71,0x1d,0xc6,0x6f,0x43,0xf8,0xfd,0x06,0xf6,0x67,0xcb,0xfe,0x59,
    0x2e,0xb6,0x7c,0x31,0x29,0xf6,0x55,0xcd,0x2e,0x66,0x9c,0x93,0x50,0x66,0x7a,0xe7,
    0x4a,0x6f,0x49,0xc3,0x9a,0xf1,0xa5,0x84,0x32,0x1b,0x7b,0x5f,0x4e,0x88,0x61,0xbe,
    0x58,0xdc,0x3f,0x5f,0x5c,0xfc,0x06,0x64,0xfb,0xc8,0xa9,0x09,0xf1,0x36,0x67,0xeb,
    0x82,0x84,0xb8,0x8d,0xcf,0x69,0x09,0xed,0x5d,0xe0,0xea,0x71,0x91,0x6c,0xdd,0x58,
    0xd9,0xbd,0x1e,0x5f,0x49,0x28,0xb3,0x32,0x67,0x4a,0x6f,0x81,0xdb,0x63,0x5f,0x92,
    0x10,0xef,0x70,0xbc,0xe6,0x84,0xb8,0x95,0x39,0x2b,0xa1,0xad,0x66,0x57,0xe6,0x57,
    0xdd,0xba,0xe5,0x7d,0xf4,0xb5,0x84,0x32,0xd3,0x9b,0xed,0xd6,0x55,0xaf,0xd7,0x9a,
    0x50,0x66,0x7a,0x57,0x48,0xaf,0xbd,0x41,0xaf,0x2d,0xa1,0xcc,0xea,0x3b,0x47,0x7a,
    0xd3,0x74,0xde,0x04,0x6c,0x5e,0xc2,0xbd,0xf7,0x42,0xed,0x11,0x81,0x7d,0x2b,0xa1,
    0x2e,0x64,0x76,0x2e,0x35,0x3f,0x61,0x1f,0xe2,0xb7,0x25,0xc3,0xae,0x4d,0xe8,0x53,
    0xfc,0xbe,0x64,0xfb,0xcb,0xef,0x24,0xd4,0x85,0xcc,0xb0,0xef,0x25,0xc4,0x67,0x39,
    0x7b,0xd7,0x25,0x6c,0xaf,0xb7,0xd7,0x91,0xb0,0x6d,0xde,0xde,0x82,0x84,0xba,0x1d,
    0xce,0xde,0x0d,0x09,0x71,0xb4,0xef,0x01,0xed,0x11,0x7f,0x98,0xb0,0x9c,0x1b,0x34,
    0x66,0xeb,0x77,0x21,0x12,0xe2,0x6d,0x3a,0x7b,0xb6,0xf6,0xdd,0x94,0xb0,0x8d,0x90,
    0xe3,0x7d,0x0a,0xe7,0xe9,0xf8,0x7d,0xce,0xe6,0xfc,0xcd,0x09,0xcf,0xd8,0xa1,0x67,
    0x73,0xfe,0x96,0x84,0xb8,0xad,0xe7,0xb7,0xb9,0xf5,0xdc,0xea,0xf5,0x93,0x84,0xe3,
    0xa8,0xec,0xce,0xb5,0xff,0x3d,0xa1,0xee,0x4f,0x5c,0x3f,0xdc,0x9e,0x10,0xbf,0xdd,
    0xf5,0xd5,0x7f,0x24,0xc4,0x8d,0xf7,0x33,0xf1,0xca,0xee,0xfc,0xfb,0xce,0x84,0xb8,
    0x1f,0xe3,0x77,0x25,0xc4,0xed,0x3d,0xec,0x17,0x09,0x6d,0x6d,0xd7,0x7b,0xd8,0xc2,
    0xa4,0xd8,0x2b,0x43,0x76,0x77,0x9e,0xee,0xd7,0x9e,0x1b,0x4f,0x8b,0x61,0x0f,0xa9,
    0x7f,0xa7,0xa9,0x9f,0x30,0xbf,0x17,0x4a,0xef,0x6e,0xa7,0x77,0x9f,0xfa,0xad,0x55,
    0xfe,0xf7,0x7a,0x0b,0x5d,0x2c,0xe9,0x55,0xa3,0x4d,0x94,0x71,0x9f,0xca,0xb5,0xb8,
    0xf8,0x68,0x42,0x39,0x7e,0x97,0xb1,0xbe,0x5f,0xa4,0x75,0x0d,0xed,0x99,0x27,0xec,
    0x37,0x9a,0xf7,0x8b,0xdc,0xb8,0x59,0x9c,0x10,0xbf,0xc5,0xd5,0xe9,0xb1,0x84,0xb8,
    0x25,0x8b,0x97,0x8f,0x27,0x2c,0x0b,0x72,0x8b,0x97,0x4f,0x26,0x45,0xbc,0x84,0xdc,
    0xc7,0x4b,0x8b,0x67,0xb3,0x5d,0xbc,0x3c,0xb2,0xc6,0x98,0x89,0x18,0x0a,0xae,0x6f,
    0x63,0xff,0x1a,0x63,0xe6,0x65,0x8a,0x97,0x26,0x43,0x3f,0xec,0x57,0x63,0xcc,0x84,
    0x0c,0x31,0x73,0xa1,0x7c,0xd5,0xaa,0x32,0xb6,0xb9,0xbd,0xe6,0x8e,0xb8,0x88,0x85,
    0x7e,0x5f,0xfc,0x7e,0x4c,0x99,0xe9,0xed,0x74,0xef,0xac,0x5e,0xef,0xa3,0x98,0x32,
    0x8b,0x99,0x38,0x20,0xff,0x48,0x7b,0x57,0x8b,0x43,0xe5,0x84,0xf6,0x4a,0x2e,0x6e,
    0x54,0x15,0x0f,0x96,0x36,0xc4,0x8d,0x28,0xa1,0xcc,0xf4,0x52,0xe9,0xad,0x6c,0xd0,
    0x0b,0x09,0x65,0xa6,0xd7,0x49,0x7a,0xeb,0x1a,0xf4,0x3a,0x27,0x94,0x99,0x5e,0x57,
    0xe9,0x4d,0x6e,0xd0,0xdb,0x3b,0xa1,0xcc,0xf4,0xba,0x4b,0xaf,0xb9,0x41,0xaf,0x47,
    0x42,0x99,0xe9,0xed,0xeb,0xf6,0xea,0xad,0xee,0x2c,0xa6,0x77,0x42,0x59,0x8b,0x3b,
    0x8b,0x39,0x20,0x21,0x8e,0x78,0x87,0xb9,0x3f,0xbf,0x61,0xee,0xf7,0x4d,0xf8,0x7b,
    0xdb,0x01,0x6e,0xee,0xf7,0x4b,0x88,0xdb,0xdc,0x3f,0x70,0x0f,0x73,0xff,0xe0,0x3d,
    0xcc,0xfd,0x43,0x12,0xea,0x1e,0xec,0xe6,0xfe,0xa1,0x09,0x71,0x3f,0xf7,0x0f,0x4b,
    0x88,0x1b,0xef,0x48,0xf1,0xfc,0xdc,0x1f,0x98,0x10,0xf7,0x73,0x7f,0x50,0x42,0xdc,
    0xfa,0x78,0x48,0x42,0x5b,0xc0,0xed,0x2c,0x65,0x68,0x42,0xdc,0xe2,0xc1,0x78,0x17,
    0x0f,0x20,0x1b,0x96,0xa7,0x11,0x9a,0xbf,0x23,0xdc,0xdc,0x1b,0xa9,0xf9,0x38,0xc4,
    0xcd,0xb3,0x13,0x13,0xf6,0x25,0xfa,0xa9,0x87,0x9b,0xcf,0xa3,0x13,0xca,0xfc,0x7c,
    0x3e,0x39,0xa1,0x8d,0x7e,0x8e,0x3f,0x26,0x21,0x6e,0xc9,0xe6,0xe9,0xd8,0x84,0x36,
    0xc6,0xb8,0x79,0x3a,0xce,0xcd,0xd3,0xb1,0x0d,0xf3,0x74,0xbc,0xea,0x3b,0xcc,0xd9,
    0x1e,0x9e,0x70,0x8c,0x63,0xec,0x06,0x57,0xb7,0xcf,0x24,0x94,0xa1,0x6e,0x9e,0x3b,
    0xde,0xcd,0xe3,0xa3,0x6a,0x2c,0x0f,0xed,0xff,0x8c,0x7c,0xe2,0xe7,0x6a,0xab,0x8b,
    0x07,0x47,0xd4,0x18,0x13,0x10,0x23,0xc0,0xf3,0x76,0xfa,0xd5,0x18,0x13,0x66,0x2b,
    0x1e,0x8c,0x77,0xf1,0xa0,0x77,0x8d,0x31,0x61,0xb6,0xe2,0xc1,0x78,0x95,0x71,0xb9,
    0xca,0xc0,0x39,0xd5,0xf8,0xbc,0xed,0xf8,0xfd,0xf5,0x69,0x9d,0xe7,0xd9,0x99,0x9e,
    0x25,0x5b,0xb3,0x97,0x6b,0x0d,0xb7,0x33,0x0c,0x70,0x56,0xc4,0xc4,0x2d,0xa1,0x1f,
    0x81,0xaf,0x8c,0x79,0x67,0x66,0x85,0xce,0x5f,0x81,0xfd,0x21,0x66,0x19,0x2b,0x75,
    0x26,0x82,0xba,0x3f,0x13,0x13,0x5f,0x2e,0xbf,0xad,0x8a,0x89,0x75,0xab,0x15,0xbe,
    0x7c,0x2e,0x26,0x6e,0xbe,0xb4,0xba,0x5f,0xee,0xfc,0x33,0xa0,0x46,0x1f,0xb5,0xca,
    0x07,0x4b,0xe3,0x42,0xd6,0xb7,0x46,0x1f,0x41,0xf6,0x5c,0x5c,0xc8,0xe0,0x9f,0x7d,
    0x6b,0xf4,0x11,0x64,0xd8,0x5f,0x2e,0xd5,0x79,0xde,0x1d,0xee,0xac,0x07,0x3a,0x57,
    0xe4,0xf9,0x3b,0x54,0x2e,0xfe,0xb7,0x75,0x6f,0x8e,0xce,0x74,0xb0,0xce,0xdf,0xa3,
    0xb3,0xb2,0xb9,0x29,0xf1,0x16,0xdd,0x9b,0xb1,0xb1,0x79,0x65,0xca,0xbd,0xd2,0xdc,
    0xb4,0x18,0xef,0xed,0x29,0xdf,0xf3,0xaf,0x74,0xef,0xbf,0x57,0xa5,0xda,0x57,0x49,
    0xdf,0xe6,0xff,0xbc,0xf4,0xe3,0xf3,0xff,0x9a,0xf4,0xe3,0xf3,0x7f,0x7e,0x4a,0x5d,
    0xc8,0x6c,0x1e,0x7f,0x3b,0x25,0xee,0xe7,0xff,0xb5,0x29,0x71,0xe3,0x7d,0x5f,0x3c,
    0x3f,0xff,0xaf,0x4b,0x89,0xfb,0xf9,0x7f,0x7d,0x4a,0xdc,0xda,0xb0,0x40,0x6d,0x85,
    0x3d,0xc4,0x36,0xdc,0x0b,0x78,0xa4,0xfe,0xbb,0x6e,0x5c,0x8f,0x6d,0x3f,0x4c,0x79,
    0x57,0x00,0xed,0x02,0xd7,0xe2,0xdb,0x8f,0x52,0xca,0xcc,0x3f,0x37,0xa5,0xc4,0x16,
    0xb8,0x77,0x9c,0x5b,0x52,0xe2,0x96,0x6c,0xee,0xde,0x9a,0xb2,0x5f,0x6f,0x71,0xef,
    0x24,0xb7,0xb9,0x77,0x92,0x5b,0x1b,0xde,0x49,0xac,0xef,0xee,0x70,0x63,0xe6,0xf0,
    0x1a,0xc7,0x0d,0xc6,0x11,0xb8,0xe8,0x57,0xfb,0xed,0xf3,0xa7,0x29,0xe5,0xa5,0x52,
    0x81,0xdd,0x29,0xac,0xec,0xb0,0x9f,0x0b,0xab,0xb8,0x33,0xea,0xd1,0x11,0xf9,0x96,
    0x3f,0x39,0x22,0xd7,0xf2,0xa7,0x44,0xe4,0xd9,0x1c,0x1a,0x17,0x91,0x03,0x3d,0xc8,
    0x6c,0x6e,0x3c,0x9e,0x52,0xf6,0xe5,0x3c,0xc0,0x40,0xef,0xc9,0xb4,0xb8,0x47,0x0b,
    0x7c,0x81,0xc6,0x01,0x64,0x4b,0x53,0xca,0x71,0x87,0xc4,0xe6,0xdb,0xd3,0x29,0x71,
    0xdc,0x1f,0x31,0x9b,0xcb,0x52,0xe2,0xf6,0x2e,0xbb,0x3c,0x65,0x39,0xcb,0x5c,0xdb,
    0x57,0xa6,0xc4,0xfd,0xef,0xd9,0x7f,0x4c,0x89,0x23,0xa1,0x3e,0xc0,0x9e,0x75,0xf5,
    0x81,0x1c,0xf5,0xb9,0x54,0x77,0x53,0x56,0xa5,0x94,0x9b,0xcd,0xe7,0x65,0xb3,0xec,
    0x6c,0xbe,0x20,0x7b,0xcf,0x3b,0x9b,0x7f,0x72,0x36,0x5f,0x68,0xb0,0xf9,0x62,0x4a,
    0xb9,0xd9,0x7c,0x59,0x36,0x2b,0xce,0xe6,0x2b,0xb2,0xf9,0xb2,0xb3,0xf9,0xaa,0xb3,
    0xf9,0x4a,0x83,0xcd,0xbf,0xa6,0x94,0x1b,0xff,0x35,0xd5,0xc7,0xd7,0x69,0xb5,0xe3,
    0xbf,0xd6,0xc0,0xff,0xdf,0x94,0x72,0xe3,0xaf,0x15,0xd7,0x97,0xbf,0xce,0xf1,0xd7,
    0x36,0xf0,0xd7,0xa7,0x94,0x1b,0x7f,0x93,0xb8,0x9e,0xbf,0xd9,0xf1,0x37,0x35,0xf0,
    0xdf,0x4a,0x29,0xbf,0x50,0x63,0xe4,0x9d,0x3d,0x8c,0x91,0x0b,0x24,0xdb,0xb2,0x07,
    0x99,0xc5,0xeb,0xad,0x29,0xb9,0xd0,0xf9,0xaa,0xee,0xd1,0x6f,0x4b,0x89,0x63,0xfe,
    0xbc,0xa7,0xf9,0xf3,0x9e,0xe6,0x0f,0xe4,0x43,0x6b,0xd4,0xc1,0x9c,0x6a,0x45,0x8c,
    0x0d,0x94,0xa1,0x5e,0x47,0xd7,0x78,0x4f,0x15,0xb2,0x9e,0xa1,0x90,0xd5,0xf7,0x0b,
    0x35,0xc6,0x45,0xc8,0x0e,0x94,0xec,0x21,0xc5,0xd3,0xf7,0x53,0xca,0x9b,0xeb,0xf7,
    0x68,0xab,0xa5,0x83,0x24,0xb7,0x58,0x0c,0xf9,0x07,0x38,0x9f,0x0a,0xac,0xcf,0x07,
    0x9a,0x47,0xa8,0x0f,0x2e,0x7c,0x62,0xdc,0x61,0x9c,0xa0,0x5f,0x6f,0xcc,0x6d,0xa2,
    0x2e,0x95,0x40,0x19,0xea,0x6b,0xba,0x71,0xa0,0x1e,0xfa,0x6f,0xbd,0xd3,0x4d,0x03,
    0x65,0x5e,0xb7,0x53,0xa0,0x3d,0xe8,0xbd,0xe5,0x74,0xbb,0x04,0xca,0xbc,0x6e,0xb7,
    0xc0,0xf2,0x60,0x07,0x72,0xd3,0xed,0x11,0x28,0x43,0xea,0x94,0xeb,0x02,0x83,0x5f,
    0xca,0xba,0xb7,0x0e,0xf9,0x6f,0xe5,0x83,0x7d,0x03,0x65,0xf0,0x1f,0xd6,0xa2,0xbe,
    0xae,0xfd,0x90,0xf5,0xce,0x53,0x5f,0xb5,0x1f,0xff,0x7f,0x47,0x65,0xec,0x1f,0x78,
    0x17,0x18,0xdc,0x8e,0x1c,0x43,0x7d,0xfa,0xa8,0x4c,0xc8,0xd0,0x8f,0xc6,0xeb,0x1b,
    0x8a,0x7e,0x44,0xdf,0x41,0x07,0xbe,0xec,0x23,0xfb,0xd0,0xed,0x27,0x5d,0x3c,0x6d,
    0xbd,0x41,0x7f,0xa1,0x7f,0x5a,0x4a,0xbb,0x8f,0x0b,0xf4,0xc7,0x22,0xd5,0xff,0x90,
    0xc0,0xfe,0x5f,0xa4,0xfa,0x0f,0x77,0xf5,0x87,0xec,0xd0,0x3c,0x1d,0x26,0xdb,0x78,
    0x4e,0x50,0xfd,0x07,0xc8,0x97,0xa5,0x52,0xe1,0xa3,0x23,0xe4,0xa3,0xaa,0xe4,0xa6,
    0x3b,0x50,0xba,0x65,0xa7,0x3b,0xc8,0xe9,0x0e,0xac,0xfb,0x99,0x63,0x71,0xb0,0xf0,
    0xc3,0x65,0x6f,0x90,0xb3,0x33,0x44,0x76,0x2a,0xce,0xce,0xd1,0xce,0xce,0x10,0x67,
    0x67,0xa8,0xb3,0x03,0x9b,0x47,0x3b,0xdf,0x7f,0x32,0xf0,0x7e,0xf4,0x50,0xe7,0xfb,
    0x4f,0xcb,0xf6,0x27,0xe5,0xcf,0xe1,0x6a,0xf3,0xa1,0x0d,0xf9,0xe1,0xae,0x2f,0x86,
    0xd5,0xc8,0x83,0x5f,0x70,0x0f,0x1b,0xba,0x36,0x1f,0x8f,0x0d,0x9c,0xb7,0x36,0xa6,
    0x46,0x04,0x62,0xe0,0x4c,0x2b,0xb3,0x8e,0x23,0x43,0x31,0xc7,0x21,0xc7,0x1c,0xbf,
    0x48,0xb2,0x51,0x7b,0x90,0x3d,0xac,0x3e,0xfb,0x6c,0x20,0x06,0xbe,0xdd,0x95,0xc3,
    0x77,0x3e,0xb8,0xe3,0x6d,0xe7,0x1a,0x27,0x05,0xea,0x01,0xc7,0x7e,0x07,0x31,0x07,
    0xf8,0xe7,0x9c,0xdd,0x93,0x1a,0xec,0x8e,0x95,0x5d,0x94,0x6d,0x76,0xc6,0x05,0xe2,
    0x8d,0x76,0x3e,0xef,0xec,0x8c,0x93,0x9d,0x49,0x65,0xae,0x91,0xa7,0x4b,0x86,0xf6,
    0xa3,0x3c,0xc3,0x27,0x38,0xfc,0xf3,0xa1,0xd8,0x2b,0x9d,0x1d,0xc8,0x29,0xb9,0xf3,
    0xbb,0x89,0x81,0x78,0xbb,0x7b,0x57,0xfb,0x62,0x20,0xbe,0xd1,0xed,0xb3,0x26,0x89,
    0x5b,0x76,0xdc,0xc9,0x81,0xb8,0x7f,0xcf,0x3b,0x37,0x10,0x5f,0xe5,0xde,0xf3,0xbe,
    0x14,0x68,0xf3,0x5c,0x57,0x97,0xf3,0x64,0xaf,0xe2,0xec,0x4d,0x09,0xc4,0xdb,0x1d,
    0xf7,0xfc,0x40,0xfe,0x14,0xc7,0x9d,0x1e,0xd8,0x46,0xdf,0x8e,0x0b,0x03,0x71,0xdf,
    0x8e,0x8b,0x02,0x71,0xdf,0x8e,0x8b,0xc5,0xf5,0xed,0x98,0x11,0x88,0xfb,0x76,0xcc,
    0x0c,0xc4,0x7d,0x3b,0x2e,0x09,0xb4,0x39,0xd3,0xd5,0x65,0x96,0xec,0xf9,0x76,0xb4,
    0x04,0xe2,0xbe,0x1d,0x97,0x06,0xf2,0x21,0xb3,0x7d,0xf2,0x94,0x88,0xed,0x83,0x0c,
    0x31,0x61,0xaa,0xbb,0xa3,0x55,0x97,0xe5,0x69,0xaa,0xee,0x22,0xe0,0x7f,0x5b,0xdf,
    0xa6,0x6b,0x2f,0x65,0xf9,0xaf,0x68,0x2f,0x65,0xf9,0x99,0x6e,0x2f,0x85,0x39,0x72,
    0x49,0x44,0x0e,0xf4,0x20,0xb3,0xb9,0x33,0x2b,0x62,0x1f,0x58,0xfe,0xd2,0x88,0x6d,
    0xf9,0x96,0xe6,0x6a,0x5b,0x20,0x36,0xcb,0xcd,0xaf,0x39,0x81,0xf9,0x36,0x17,0xc7,
    0xdb,0xa5,0xe7,0xb1,0x79,0x81,0xe5,0xb6,0xc9,0x1e,0xb0,0xf9,0x81,0xf8,0x1c,0x87,
    0x7d,0x27,0x90,0x3f,0xc7,0xc5,0x8d,0xef,0x06,0xea,0x42,0x36,0x5f,0xd8,0x75,0x81,
    0x38,0xee,0xf7,0x5e,0x2d,0xec,0xfa,0x40,0x1c,0xdf,0x86,0xb4,0x68,0xff,0xdc,0x11,
    0x88,0x63,0xff,0x8b,0xfc,0x0f,0x42,0xb1,0xff,0xed,0x08,0x5c,0x63,0xdb,0xdd,0xbe,
    0xf4,0x86,0x40,0x9d,0x2b,0xed,0x9b,0xad,0x40,0xcc,0xf6,0xfa,0x37,0x06,0x62,0x98,
    0x4f,0x0f,0xaa,0xdf,0x7e,0x1c,0x88,0xdf,0x5e,0x2a,0xe6,0xef,0xcd,0x81,0xb8,0x9d,
    0x6f,0x2e,0x13,0xff,0x56,0xe9,0xde,0xac,0xf8,0x66,0xfd,0x39,0x55,0x77,0x4b,0xa0,
    0x73,0x4c,0x8d,0x1c,0xc4,0x3c,0xe8,0xa3,0xaf,0xad,0xac,0x6f,0x44,0x1c,0x1f,0xe7,
    0x6b,0x8c,0xcc,0x75,0x63,0x04,0xb2,0x39,0x79,0x9a,0x2b,0x9b,0xf8,0xdf,0xca,0x6d,
    0x8f,0x68,0xb7,0x4d,0x6b,0x92,0xe9,0xcc,0x75,0xe5,0x9e,0x50,0xa3,0x0e,0xea,0xd2,
    0x2e,0x5b,0x77,0xa9,0xdc,0x79,0x11,0xcb,0x6e,0xd5,0xef,0x0b,0xd7,0x88,0x8f,0xa7,
    0xb5,0xf9,0x9b,0x35,0xea,0x59,0xfd,0x0c,0x9f,0x23,0xdc,0xc6,0xb6,0xcd,0xa9,0x8e,
    0x88,0x9c,0x95,0x6e,0x5e,0x2c,0x88,0xa8,0xdf,0xe1,0xee,0x7a,0xfe,0x48,0xf7,0x30,
    0x71,0xbf,0xd3,0xb8,0x37,0x46,0xac,0x2f,0x64,0x17,0x2b,0x36,0xde,0x14,0x15,0xb1,
    0xf1,0x46,0xed,0xdd,0xe0,0xa3,0xdb,0x1a,0xee,0x3a,0xde,0x9a,0xa7,0x87,0x55,0xff,
    0x87,0x75,0xcf,0xb7,0x7e,0x97,0xac,0xc6,0xf2,0x4f,0xd3,0xfa,0x6a,0x78,0x56,0xa3,
    0xed,0x54,0x6b,0x29,0xda,0x7f,0x9b,0xf8,0xb7,0x3a,0xfe,0xb6,0x8c,0xfc,0xb9,0x5a,
    0x2b,0x0d,0xdf,0x9e,0x91,0x0f,0x79,0x93,0x8b,0x3d,0x77,0x85,0x8f,0xdf,0xad,0x7c,
    0x20,0x10,0xf7,0xc9,0xee,0x66,0x3d,0x18,0x28,0xf7,0x77,0xb3,0x7e,0x15,0x88,0xfb,
    0xbb,0x59,0x8f,0x04,0xe2,0xfe,0x6e,0xd6,0xa3,0x81,0xb8,0xbf,0x9b,0xb5,0x48,0x7a,
    0xfe,0x6e,0xd6,0x6f,0x02,0x71,0x7f,0x37,0xeb,0xb7,0x81,0xfc,0xdf,0xb8,0x38,0xb7,
    0x58,0x5c,0x7f,0x37,0x6b,0x49,0x20,0xee,0xef,0x66,0x3d,0x16,0xc8,0x5f,0xe2,0xb8,
    0x4f,0x88,0xeb,0xef,0x66,0x3d,0x19,0x88,0xfb,0xbb,0x59,0x4f,0x05,0xf2,0x9f,0x74,
    0xdc,0xbb,0xc3,0xc7,0xef,0x56,0x2e,0x0f,0xc4,0x7d,0x32,0x9f,0xad,0x08,0x94,0x7b,
    0x9f,0x3d,0x13,0x88,0x7b,0x9f,0x3d,0x1b,0x88,0x7b,0x9f,0xad,0x0a,0xc4,0xbd,0xcf,
    0xfe,0x5b,0x7a,0xde,0x67,0xcf,0x05,0xe2,0xde,0x67,0xcf,0x07,0xf2,0x9f,0x73,0x75,
    0xff,0x93,0xb8,0xde,0x67,0x2f,0x06,0xe2,0xde,0x67,0x2f,0x05,0xf2,0x5f,0x74,0xdc,
    0xbf,0x88,0xeb,0x7d,0xf6,0x72,0x20,0xee,0x7d,0xf6,0x4a,0x20,0x1f,0x32,0xbb,0xcf,
    0xf6,0xcb,0x40,0x5f,0x42,0x86,0xb3,0x07,0x7c,0x73,0x00,0xcc,0xe6,0xd7,0x1a,0xad,
    0x4d,0x38,0xd3,0xb0,0xf3,0x8a,0xb5,0x81,0xdf,0x9f,0x42,0x86,0xf3,0x57,0x7c,0xe7,
    0xb5,0x2e,0xf0,0x7b,0x85,0x36,0xf7,0xad,0xc0,0xfa,0x40,0xdc,0xce,0x65,0x36,0x04,
    0x62,0x4b,0xf4,0x6d,0xc9,0xae,0x3b,0x1c,0x81,0x32,0xe3,0x6d,0x6c,0xe0,0x6d,0x0a,
    0xc4,0x1a,0xcf,0xbb,0x37,0x07,0xca,0x8c,0xf7,0x76,0x03,0xef,0x9d,0x40,0xac,0xf1,
    0xfc,0xfb,0xdd,0x40,0x99,0xfd,0x26,0xbe,0x35,0xb0,0x4d,0xab,0x4a,0x45,0x7b,0xb6,
    0xa9,0x3d,0x5b,0x9d,0xfd,0xf7,0x02,0x71,0xbb,0xa3,0xb2,0x43,0xbc,0x17,0xdc,0xdd,
    0x90,0xf7,0x03,0xf5,0x76,0x84,0xdd,0xcf,0xfa,0x3f,0x08,0x94,0x99,0x0f,0x77,0x06,
    0x7e,0x7f,0xb4,0xc6,0xd5,0x03,0x1f,0x9d,0xee,0x6c,0xa8,0x47,0x39,0x63,0x3d,0x20,
    0xb3,0x7a,0x54,0x32,0xe2,0x56,0x8f,0xaa,0x78,0x2f,0xb8,0x7d,0x45,0x94,0x51,0xaf,
    0x9a,0x15,0xeb,0x53,0x9c,0x11,0xf7,0x67,0x51,0x49,0x46,0x1c,0x7d,0x8f,0xef,0x57,
    0x3e,0x2c,0x15,0xe7,0x4e,0x59,0xc6,0x6f,0x5a,0xe0,0xaf,0x0f,0x42,0x71,0xee,0x54,
    0xcb,0x28,0xb3,0xb6,0x74,0xce,0x68,0xa7,0x45,0x6b,0x59,0xfd,0x9b,0xcc,0x8c,0x7a,
    0x90,0xd9,0x58,0xea,0x96,0x11,0xdf,0xec,0xde,0x87,0xf6,0xc9,0xd8,0xff,0x90,0xd9,
    0x3a,0xdc,0x23,0x2b,0xd6,0x61,0xc8,0xb7,0xeb,0x1b,0x4f,0x5b,0x87,0xef,0x8b,0x18,
    0xef,0xa7,0xea,0xfd,0xfe,0x92,0xac,0x88,0xed,0xe0,0x62,0xae,0x4d,0x97,0x6c,0xd6,
    0x1e,0x64,0xb6,0xa7,0x3a,0x2a,0x23,0x17,0x3a,0x58,0x0b,0x3e,0x95,0x15,0x6b,0x01,
    0x64,0x43,0xf2,0x04,0x0c,0xb1,0x7c,0x88,0x6b,0xef,0x6c,0x71,0xc0,0xb5,0x7d,0x54,
    0x6b,0x46,0xdc,0x74,0xae,0xc8,0x58,0x9e,0xd7,0x69,0xcb,0x88,0xdb,0xde,0xe5,0x9b,
    0x19,0x31,0x70,0x6d,0xef,0x32,0x27,0x23,0x8e,0x6f,0x41,0x6d,0xef,0x32,0x37,0x23,
    0x8e,0xbd,0xcb,0x2c,0xf9,0xe0,0xca,0x8c,0xb8,0xed,0x45,0xae,0xca,0x88,0x59,0x5f,
    0x5f,0x9d,0x11,0xc3,0x37,0xa4,0x76,0x1f,0xef,0x5b,0x19,0xf7,0x21,0x90,0xd9,0x59,
    0xeb,0x35,0x19,0x71,0x3b,0x6b,0x35,0x1f,0xcf,0xcf,0x28,0xb3,0x3d,0xc2,0xb5,0x19,
    0x79,0xf3,0x33,0xae,0x71,0xe6,0x17,0x3c,0x6d,0x8f,0x70,0xa6,0xf6,0x26,0x58,0xf7,
    0xae,0x95,0xff,0x6c,0x6f,0x32,0x3c,0x63,0xbf,0x0d,0xd2,0x5d,0xc0,0x51,0xce,0xd7,
    0x90,0x1d,0x83,0x31,0x28,0x9b,0xc7,0xab,0x8c,0x51,0xca,0x1f,0x93,0x15,0x67,0xe8,
    0x23,0xd4,0x9f,0xf7,0x45,0xc5,0xef,0xc2,0xc7,0x65,0xc4,0x17,0xb8,0xf8,0x37,0x32,
    0x63,0x7d,0x8e,0x6b,0xb0,0x35,0xca,0xd5,0xf7,0x2c,0xd5,0x17,0xe5,0x8d,0x54,0x1d,
    0xcc,0x57,0x9f,0x6d,0xa8,0xef,0x38,0x57,0x5f,0xc8,0x46,0xe7,0xe9,0x14,0xd9,0x3c,
    0x45,0x65,0x8c,0x53,0x7e,0xb4,0xab,0xef,0xc9,0xae,0xbe,0xf3,0x84,0x8d,0xc9,0x88,
    0xfb,0xfa,0x8e,0x55,0x7d,0xc7,0x34,0xd8,0x1a,0xe7,0xea,0x3b,0x51,0xf5,0x45,0x79,
    0x63,0x55,0x07,0xfb,0xbd,0xe8,0xb4,0x86,0xfa,0x4e,0x72,0xf5,0x85,0xec,0xf4,0x3c,
    0x4d,0x92,0xcd,0xd3,0xdd,0x38,0x39,0x43,0xe5,0xb6,0xf9,0xef,0x20,0x32,0xe2,0x2f,
    0xb8,0xb5,0xe3,0xcc,0x8c,0xfe,0x9a,0xe0,0xb8,0x67,0x8b,0x8b,0xef,0x90,0x77,0xbd,
    0x23,0x66,0xc4,0xfd,0x6f,0x77,0xe7,0x64,0xac,0xfb,0x44,0xb5,0xcd,0xea,0x31,0xc9,
    0xb5,0x6d,0x72,0x8d,0x3a,0x68,0xef,0x39,0xaa,0xaf,0xc9,0x26,0xd5,0x58,0x36,0x64,
    0x67,0x4a,0x66,0xfb,0xba,0x73,0xdd,0xfc,0x86,0x1e,0x7c,0x6a,0xb2,0x2f,0x3b,0xd9,
    0xe4,0x5a,0x71,0x07,0x04,0xe3,0x7e,0x8a,0xe6,0x30,0xe2,0x8a,0x61,0x53,0x35,0x5f,
    0x81,0xd9,0x6f,0xb2,0x17,0x64,0xc4,0x27,0xbb,0xdf,0x64,0xa7,0x65,0xe4,0x43,0x66,
    0xf3,0x65,0x7a,0x46,0x7c,0xd7,0xf7,0x13,0x19,0x31,0xd4,0xcf,0xd6,0xda,0x8b,0x33,
    0xe2,0xa8,0xd7,0xf8,0x52,0xe0,0x1e,0x2d,0xe2,0x1e,0x10,0x32,0x7d,0xc6,0x54,0xd2,
    0xa7,0xc5,0xbb,0xed,0x25,0x6f,0xd3,0x5e,0x1c,0x9c,0xaf,0xd7,0xb8,0xef,0xc4,0xfe,
    0x14,0xfc,0x49,0x6e,0x1c,0xfc,0x56,0xb1,0xd1,0x7e,0x37,0x5c,0xec,0xf6,0xb7,0x90,
    0xfd,0x2e,0x4f,0x8b,0x65,0xf3,0x77,0xee,0x3b,0xa1,0x25,0xfa,0x4e,0x68,0xbb,0xbb,
    0x2f,0xf5,0x58,0x44,0xfc,0x5a,0xb5,0xfb,0xf1,0x88,0x58,0x73,0xa9,0xe0,0x3d,0x21,
    0x5e,0x8b,0xe3,0x3d,0x19,0x11,0x37,0xde,0x53,0x11,0xb1,0x66,0xf7,0xdd,0xdb,0xd2,
    0x88,0xf6,0x9e,0x72,0xdf,0xbd,0x3d,0xad,0xef,0xa5,0x96,0xea,0x9b,0x46,0x7c,0xcb,
    0xba,0x52,0xdf,0xb1,0x4e,0xc3,0x9d,0xe1,0x88,0x3a,0x5f,0xd7,0xef,0x58,0xd6,0x8e,
    0xc5,0xd1,0xee,0xdf,0xa0,0xe1,0xf9,0x61,0xbe,0x82,0x1c,0x93,0xa7,0xff,0x03,0x38,
    0x91,0xf2,0x09,0x38,0x47,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = false;
//     bool punchthrough = false;
//
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = true;
//
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
