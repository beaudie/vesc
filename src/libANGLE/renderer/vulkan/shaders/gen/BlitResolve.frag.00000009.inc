// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xf7,0x39,0xfb,0x70,0x0e,0x2a,0x54,0x0a,0x22,0x68,0xc5,0x0b,0xd4,0x0b,
    0xa8,0xe4,0x54,0x39,0xc6,0x06,0xa9,0xb4,0x26,0xa2,0xf6,0x68,0x8b,0x78,0x6b,0xeb,
    0x5d,0xd0,0x34,0x0a,0xe7,0x01,0x15,0x1e,0x5a,0x21,0x11,0x2b,0x3c,0xd8,0x0a,0x0f,
    0x56,0xe1,0xc1,0x1b,0x0f,0x4d,0xf0,0xf2,0x67,0xf4,0x2f,0x32,0xda,0x26,0x4d,0x3a,
    0xb3,0xf6,0x6f,0xcc,0x64,0x9f,0x64,0xb2,0xce,0x7c,0xdf,0xcc,0x7c,0x33,0x6b,0xad,
    0xbd,0xe2,0x6c,0x5b,0x21,0x8a,0x33,0xd1,0xf2,0xa8,0x3a,0x7a,0x1b,0x25,0xbf,0x4f,
    0xa3,0x6c,0x94,0x91,0x75,0x45,0x94,0x0f,0x6b,0x5f,0x79,0xa0,0xdc,0x39,0x7a,0x73,
    0xb0,0xb3,0xab,0x54,0x54,0xfe,0x93,0x28,0x0e,0x71,0xca,0xad,0x14,0x2f,0x27,0xab,
    0xda,0xf0,0xa5,0x9f,0x47,0x14,0xaf,0x11,0xbb,0x26,0x56,0x11,0x1b,0x17,0x9b,0x14,
    0x9b,0x11,0x9b,0x13,0x5b,0x10,0x5b,0x14,0xab,0x93,0x1a,0x9a,0x53,0xd0,0xfa,0xf2,
    0xaf,0x26,0xe8,0x69,0xbd,0x28,0x3a,0x14,0x55,0x45,0xab,0xe8,0xa5,0x8d,0xd5,0xb0,
    0x0c,0x58,0xb5,0xc3,0xb2,0x60,0x75,0x0e,0x8b,0xc1,0x9a,0x1d,0x96,0x03,0x5b,0xe7,
    0xb0,0x2a,0xb0,0x8d,0x0e,0xcb,0x83,0x7d,0xee,0xb0,0x02,0xd8,0x36,0x87,0x55,0x83,
    0xed,0x70,0xd8,0x32,0xb0,0x62,0x98,0x2b,0xfe,0xd8,0x9f,0xce,0x78,0x48,0xd6,0x56,
    0xe6,0x31,0x7f,0x93,0xf3,0xcb,0x29,0xbe,0x0c,0x6f,0xf9,0xba,0xa7,0xeb,0x1d,0x5f,
    0xc1,0xcf,0xe0,0x8f,0xe3,0x5b,0xfc,0x24,0x7e,0x8c,0x3f,0x83,0x9f,0xc3,0x9f,0xc3,
    0xaf,0xc2,0x5f,0xc0,0xcf,0xe3,0x2f,0xe2,0xeb,0xec,0x0d,0x52,0x35,0x1b,0xfa,0x89,
    0x43,0x3d,0xfd,0xbf,0x5a,0xfe,0xe5,0xd9,0xbb,0x26,0x89,0x2f,0x90,0x9b,0xc5,0x5f,
    0x8e,0x9f,0x0b,0x31,0xb9,0x70,0xbe,0xda,0xab,0xe2,0xdd,0xf8,0x35,0x60,0x8d,0xe2,
    0xd7,0x53,0xcb,0xfc,0x06,0xfc,0x28,0xf4,0x51,0xf3,0xf1,0x1c,0xcc,0xea,0xb1,0x3c,
    0x6b,0x83,0x33,0xd5,0x6b,0xe4,0x3c,0x56,0xa1,0xd7,0x18,0x7a,0x4e,0xb0,0xed,0xe8,
    0x35,0xa1,0xa7,0xf1,0xcd,0x70,0x05,0xc7,0xb7,0xa0,0x6f,0x7e,0x2b,0xbc,0xc6,0xb7,
    0x11,0xdf,0x10,0x34,0xb2,0xd1,0x16,0xe2,0xd4,0xdf,0x9a,0xca,0x2b,0x72,0x5f,0xcc,
    0xef,0x26,0x57,0xf7,0xe9,0x00,0x35,0x74,0x9f,0xd6,0x08,0x7a,0x10,0x3f,0x43,0x8d,
    0xf4,0xaa,0xda,0x7d,0xfc,0x3f,0xc8,0x6c,0x7d,0xe1,0x0e,0x26,0xbf,0xb5,0xd2,0xcb,
    0x11,0xe2,0xbe,0x05,0x3b,0x42,0x9c,0xfa,0x65,0xb0,0xcf,0xe4,0xfc,0x8e,0x51,0xc3,
    0xfa,0xea,0xe7,0xfc,0xcc,0x3f,0xc9,0xfd,0xd1,0x5a,0xa7,0xe8,0xb9,0x9e,0xbe,0x7f,
    0x64,0xef,0x63,0x17,0x7f,0x01,0x4c,0xe3,0xaf,0xc2,0x1d,0x40,0xfb,0x2a,0xef,0x42,
    0xec,0xfc,0x4a,0x2a,0x7f,0x94,0x7d,0x30,0x7e,0x3c,0x15,0x3f,0x99,0x8a,0x9f,0xe2,
    0xbb,0x37,0x7e,0x26,0xc5,0x3f,0xe0,0x0e,0x19,0x3f,0x97,0xe2,0x1f,0x89,0xf5,0x3a,
    0x7e,0x21,0xc5,0x3f,0x45,0xd3,0xf8,0x45,0xf8,0x3d,0xf2,0xd5,0x64,0xe9,0x35,0x02,
    0xfb,0x20,0x88,0x7e,0x4b,0x3d,0xdc,0xfd,0x5a,0xee,0x77,0xbf,0xa0,0x79,0xde,0xb6,
    0x5a,0xe2,0x0d,0xab,0x03,0xd3,0xb3,0xfd,0x5e,0xb0,0x42,0x78,0x7f,0x93,0x58,0xe5,
    0xbe,0x16,0xac,0x39,0xdc,0x8b,0xe4,0xee,0x36,0x51,0xbf,0x10,0xce,0x39,0xc1,0xef,
    0x91,0xb7,0x8e,0xdc,0xb5,0x2e,0x6f,0x3d,0x79,0x2d,0x2e,0x6f,0x03,0xf8,0x5d,0xf2,
    0x36,0x91,0xbb,0x81,0x3c,0x7b,0xfb,0x56,0x73,0xdf,0x7b,0xb8,0xd3,0x9b,0xc1,0x97,
    0x24,0x66,0x0b,0x6f,0xe1,0x66,0xee,0xfa,0x7b,0xd9,0x81,0x0e,0x66,0xfb,0x57,0xe2,
    0x95,0x6b,0x17,0xeb,0x60,0x5f,0xda,0xdd,0xcc,0x3b,0xdd,0xbb,0x37,0x21,0xb1,0x8a,
    0x75,0x82,0x1f,0x17,0x4f,0x7b,0xfa,0x0b,0xcc,0xe2,0xfe,0x91,0x1a,0x56,0x4b,0xd7,
    0x77,0x12,0xa5,0x71,0xaf,0x88,0xa9,0x22,0xa7,0xdd,0xcd,0xf0,0x05,0x33,0x14,0xdd,
    0x0c,0xbb,0xc0,0x6d,0x86,0xdd,0x60,0x36,0x43,0xc9,0xcd,0xa0,0x5c,0x97,0x58,0x09,
    0xdd,0x2e,0x37,0xc3,0x5e,0xb4,0x33,0x6e,0x86,0x2f,0xc1,0x6d,0x86,0x25,0x30,0x8b,
    0xd3,0x19,0xac,0x56,0xc9,0xcd,0xf0,0x9a,0x98,0x0e,0x72,0xba,0xdc,0x0c,0xfb,0x98,
    0xa1,0xdb,0xcd,0xd0,0x03,0x6e,0x33,0x7c,0x05,0x66,0x33,0xf4,0xba,0x19,0x94,0xdb,
    0xcf,0x1d,0x57,0x5d,0xfd,0xff,0x1d,0xba,0xdf,0xa0,0xfd,0xda,0xbd,0x2d,0xda,0xa3,
    0xc5,0xf6,0xba,0x1e,0xdf,0x10,0x57,0x22,0x6f,0x3f,0xfd,0xe8,0xdb,0x71,0x98,0xb7,
    0x47,0x7d,0x7d,0x67,0x8e,0xf2,0xc6,0x9c,0x92,0xfe,0x8e,0x05,0xbd,0x24,0xe6,0xa8,
    0xbb,0x97,0xc7,0x99,0xab,0xdf,0xdd,0xcb,0x01,0x70,0xbb,0xcf,0x27,0xd0,0x1d,0x20,
    0x4f,0xdf,0x9f,0xd3,0xe4,0x9d,0x24,0x4f,0xbf,0xd1,0x33,0xe0,0x15,0xce,0xe1,0x07,
    0x30,0x3b,0xab,0x9f,0xa8,0xe5,0xbf,0xbb,0xb3,0x60,0xc9,0x77,0x97,0x0f,0x6f,0xd9,
    0x39,0x62,0xcf,0x52,0xe3,0xb4,0xc4,0xea,0xdb,0x75,0x9e,0x19,0xce,0xb9,0x3e,0x2e,
    0xd2,0xc7,0x05,0xd7,0xc7,0x25,0xf0,0xbf,0x25,0x46,0xfd,0xcb,0x60,0x4d,0xee,0xac,
    0xae,0x80,0xb7,0x70,0x56,0x43,0xee,0xac,0x94,0x1b,0x14,0x1b,0x62,0xff,0x07,0xc3,
    0xd9,0xc6,0xe1,0xcd,0x3c,0xcf,0xd9,0x18,0x37,0xe4,0x74,0xae,0xa3,0xd3,0xef,0x74,
    0x6e,0x80,0x9b,0xce,0x88,0xd3,0x51,0x6e,0x58,0x6c,0x84,0x5a,0xc3,0xe8,0x54,0x9c,
    0x8e,0x71,0x23,0x4e,0xe7,0x26,0x3a,0xa3,0x4e,0xe7,0x16,0xb8,0xe9,0x8c,0x39,0x1d,
    0xe5,0x6e,0x8b,0x8d,0x51,0xeb,0x36,0x3a,0xe3,0x4e,0xc7,0xb8,0x31,0xa7,0xf3,0x0b,
    0x3a,0x45,0xa7,0xf3,0x2b,0xb8,0xe9,0x4c,0x38,0x1d,0xe5,0xee,0x84,0xef,0x30,0xa9,
    0x75,0x07,0x9d,0x49,0xa7,0x63,0xdc,0x84,0xd3,0xb9,0x87,0xce,0x94,0xd3,0xf9,0x0d,
    0xdc,0x74,0xa6,0x9d,0x8e,0x72,0xf7,0xc5,0xa6,0xa9,0x75,0x1f,0x9d,0x19,0xa7,0x63,
    0xdc,0xb4,0xd3,0xf9,0x1d,0x9d,0x07,0x4e,0xe7,0x0f,0x70,0xd3,0x99,0x75,0x3a,0xca,
    0x3d,0x14,0x9b,0xa5,0xd6,0x43,0x74,0xe6,0x9c,0x8e,0x71,0xb3,0x4e,0xe7,0x4f,0x74,
    0x1e,0x39,0x9d,0xc7,0xe0,0xa6,0x33,0xef,0x74,0x94,0x7b,0x22,0x36,0x4f,0xad,0x27,
    0xe8,0x2c,0x38,0x1d,0xe3,0xe6,0x9d,0xce,0x33,0x74,0x9e,0x3a,0x9d,0xe7,0xe0,0xa6,
    0xf3,0xd2,0xe9,0x28,0xf7,0x42,0xec,0x25,0xb5,0x5e,0xa0,0xb3,0xe8,0x74,0x8c,0xd3,
    0xf5,0x3f,0xf9,0x2a,0xf7,0x8a,0xfd,0x0f,0x8e,0x0e,0x44,0x1f,0x9c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = texture(usampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
