// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x97,0x5b,0x4c,0x9c,0x55,
    0x10,0xc7,0xcf,0xec,0xc2,0x82,0x25,0x42,0x29,0x95,0x05,0x6c,0x8c,0x96,0x6a,0x8c,
    0x90,0xb5,0xb5,0xb6,0x85,0x68,0x89,0x4d,0x56,0xcb,0x03,0x2d,0x65,0x59,0xea,0x46,
    0xca,0x65,0x53,0x62,0x2f,0x11,0x6d,0x8b,0x36,0xdc,0x12,0xfb,0x60,0x7c,0xf4,0x85,
    0x9a,0xd8,0xa8,0x0f,0xbe,0x60,0xb4,0x50,0x1a,0x7d,0x68,0xdf,0x4a,0x52,0x34,0x4a,
    0x54,0x6c,0x54,0x4c,0x8c,0x7d,0x10,0x0d,0x89,0xad,0x8d,0x8d,0xbd,0x58,0x7a,0xb1,
    0xce,0x7c,0xe7,0x3f,0x30,0x7c,0x94,0xe4,0xe4,0xfb,0xe6,0x3f,0xe7,0xcc,0xfc,0xce,
    0x39,0xdf,0x99,0xc3,0x46,0x23,0x95,0x79,0x2e,0x4a,0x6e,0x99,0xcb,0x77,0x1f,0x93,
    0x0b,0xfe,0x8a,0x5d,0xc4,0xc9,0x6b,0x81,0x8b,0x05,0xcf,0xad,0x0d,0xcd,0x0d,0x89,
    0x9e,0xd7,0xbb,0x12,0x4f,0x6f,0x58,0x2b,0xfe,0x42,0x17,0x0d,0xfa,0x89,0xaf,0xc8,
    0xe5,0xb9,0x5c,0x7e,0xe6,0x70,0xeb,0xce,0xee,0x7b,0x55,0xf4,0x66,0x6e,0x43,0xdc,
    0x96,0xf3,0xf8,0x9c,0x20,0x9e,0x73,0x0f,0xa3,0x7f,0x10,0x8f,0xd5,0xe6,0x20,0xbe,
    0x73,0x0f,0xc2,0xde,0xc5,0xcf,0x58,0x30,0xc6,0xb9,0x7a,0x8e,0xd8,0xe6,0x51,0x5c,
    0x25,0x9e,0x5b,0x39,0xa7,0x68,0x11,0xf4,0xef,0xe0,0xe7,0xea,0x79,0x9f,0xb7,0x1f,
    0x31,0xf1,0x87,0x10,0xbf,0x02,0xf6,0x58,0xa8,0xff,0x18,0xfa,0x6b,0x6c,0xb1,0xcb,
    0xe1,0x3b,0x8d,0xb1,0x62,0x97,0x70,0xc6,0x48,0xd0,0x37,0x1a,0xcc,0x5a,0xde,0x1f,
    0xe0,0x3e,0x31,0xcc,0x49,0xfe,0xe2,0x6c,0x17,0x80,0x5f,0xfc,0x55,0xf0,0xaf,0xc0,
    0x7c,0x56,0xb2,0x5a,0x62,0xf4,0x38,0xc6,0xae,0x62,0xbb,0x0c,0xe3,0xbc,0x96,0x13,
    0xe4,0x94,0x35,0x13,0xfd,0x19,0xd8,0x15,0xd0,0xc4,0xbf,0x0a,0xef,0x31,0x13,0x4f,
    0xd6,0x28,0xdf,0xd8,0x09,0xf4,0x51,0xbb,0x36,0xc4,0x95,0xc4,0x3a,0x09,0x77,0x13,
    0x62,0x45,0x11,0x3f,0x05,0x5f,0x13,0xf2,0xa7,0xb0,0x9f,0x64,0xc6,0xa7,0x31,0x6f,
    0xe9,0xdf,0x02,0x5f,0x0c,0xf1,0x32,0x78,0xb7,0xf9,0x5b,0xb9,0x3d,0x87,0xf9,0xca,
    0x3e,0x67,0xa0,0x3d,0x84,0x3d,0xdd,0x85,0x58,0xed,0xe0,0x6c,0x43,0x6e,0xb1,0x3b,
    0xcc,0x9a,0x77,0x9a,0xef,0xa8,0x0a,0x76,0xd6,0xb0,0x74,0xa1,0x6f,0x06,0x2c,0x87,
    0x82,0xfd,0xf3,0x5a,0x35,0x7f,0x53,0xb2,0x47,0x6f,0x82,0x3f,0x6d,0xe6,0x37,0x84,
    0x98,0xda,0xe7,0x3d,0xac,0x69,0x22,0xf8,0x06,0xee,0x73,0xa3,0x98,0x13,0x8e,0xc7,
    0xfc,0x5f,0x24,0x98,0x83,0xcf,0x7d,0x02,0xda,0x28,0xe2,0x8a,0x3d,0x66,0xbe,0x8f,
    0xcf,0xf8,0xd9,0x39,0xcf,0x12,0x0b,0xd6,0xf7,0x34,0xf6,0x3d,0x39,0xbf,0x27,0xd1,
    0x20,0xff,0x30,0x27,0xda,0xc8,0x2c,0x11,0xac,0xa3,0xc3,0xfe,0xdc,0x60,0x45,0xce,
    0xda,0x66,0xec,0xdb,0x51,0xb0,0x37,0xf2,0x19,0x94,0x71,0xef,0x42,0x3b,0x8a,0x31,
    0xc2,0xfb,0x16,0xe6,0x74,0x0c,0x7e,0x99,0xdb,0x11,0x68,0x1f,0x40,0x17,0x6d,0x0b,
    0x6b,0xb2,0x97,0x67,0xb0,0xdf,0x69,0xe4,0x91,0x79,0x8f,0x43,0xdf,0xc2,0x96,0xac,
    0xf1,0x59,0xec,0x4b,0x16,0xbe,0xcd,0xd8,0xf7,0x09,0xf8,0x9a,0x38,0x96,0x8c,0xfb,
    0x12,0x9a,0x33,0xda,0x57,0xd0,0x64,0x6e,0x27,0x59,0x93,0xfd,0xf9,0x1a,0x7d,0xc5,
    0xf7,0x2f,0xcf,0x74,0x0a,0x63,0x6e,0x72,0x5c,0xf1,0x4d,0x72,0x9b,0xc2,0xfc,0x27,
    0xcd,0x7c,0xbf,0x41,0xac,0x09,0x33,0x5f,0x89,0x29,0xfb,0xfe,0x2d,0xfc,0x32,0xc7,
    0xf7,0x39,0x8e,0xe4,0xf9,0x0e,0xfa,0x1c,0xc7,0xd1,0x78,0xf2,0xbc,0xc6,0xf1,0xc4,
    0xff,0x3d,0x58,0x72,0xd1,0x77,0x12,0x3c,0xd3,0x86,0x47,0xfa,0x9c,0xe3,0x36,0x8d,
    0xf1,0xe7,0x0c,0xcf,0x0f,0x86,0x27,0x82,0x3d,0x3b,0x01,0x9e,0x1f,0xe1,0x3f,0x66,
    0x78,0x7e,0x82,0x2e,0x3c,0x1a,0x6f,0xda,0xf0,0xfc,0x0c,0xa6,0x29,0xf4,0x95,0x5c,
    0x9f,0xf0,0x2a,0xca,0x3a,0xfe,0x02,0x7f,0x12,0x7b,0x35,0x81,0xf5,0xfd,0x15,0xbe,
    0x71,0xec,0xa9,0xd4,0x8b,0xf3,0xa8,0x21,0xa2,0xd5,0x31,0xd5,0x79,0xf4,0xd3,0xf5,
    0xff,0x13,0xbe,0x15,0x98,0x6f,0x05,0x2d,0xcc,0x57,0x7c,0x17,0x64,0x3c,0x79,0xbe,
    0x0b,0xf8,0x7e,0x24,0xd7,0x45,0x33,0x4e,0x73,0xfd,0x85,0x5c,0x17,0xcd,0xf7,0x73,
    0x09,0xba,0xda,0x7f,0x83,0xe9,0x0b,0xc4,0xb9,0x0c,0xed,0x92,0xe1,0xbb,0x6c,0xf8,
    0xfe,0x41,0x9e,0x4a,0xf0,0x95,0x1b,0x3e,0xf1,0x5d,0x91,0x73,0x0a,0xbe,0x2b,0x86,
    0xef,0xaa,0x19,0xa7,0x7c,0xd7,0xc0,0x77,0xd5,0xf0,0x5c,0x87,0xae,0xf6,0x8d,0x10,
    0xdf,0x1c,0xb4,0xeb,0x86,0x6f,0xce,0xf0,0xdd,0x42,0x9e,0x04,0xf8,0xca,0x0c,0x9f,
    0xf8,0x6e,0x4b,0x3d,0x07,0xdf,0x6d,0xc3,0x77,0xc7,0x8c,0x53,0xbe,0xff,0xc0,0x77,
    0xc7,0xf0,0xdc,0x85,0xae,0x36,0xd1,0x62,0xbe,0x08,0x79,0xed,0xae,0xe1,0x13,0x4d,
    0xf9,0x72,0xc8,0xe7,0xa9,0x05,0x5f,0xdc,0xf0,0x89,0x2f,0x97,0x5b,0x1c,0x7c,0xf2,
    0xae,0x7c,0x31,0x33,0x4e,0xf9,0xf2,0xc8,0xf3,0x89,0x4f,0x79,0xf2,0xc9,0xeb,0x6a,
    0x2f,0x0b,0xf1,0x15,0x90,0xd7,0xa4,0x9f,0xf2,0x15,0x18,0xbe,0xfb,0x91,0x27,0x09,
    0xbe,0x52,0xc3,0x27,0xbe,0x42,0x6e,0xa5,0xe0,0x2b,0x34,0x7c,0x45,0x66,0x9c,0xf2,
    0x2d,0x07,0x5f,0x91,0xe1,0x29,0x26,0xaf,0xab,0x5d,0x12,0xe2,0x5b,0x49,0x5e,0x2b,
    0x36,0x7c,0xa2,0xc9,0xb9,0xd4,0xbc,0xa5,0xb0,0x75,0x9d,0xe2,0xb0,0x75,0x5f,0xcb,
    0x60,0xeb,0x77,0x58,0x0e,0x5b,0xcf,0x8d,0x3c,0x3f,0xc5,0x7c,0x7f,0xc3,0xbe,0xa7,
    0x31,0xdf,0x59,0x53,0x5f,0xc4,0x37,0xc3,0x6d,0x16,0xf5,0x60,0xc6,0xcc,0xed,0x77,
    0x7c,0x1b,0x59,0xf3,0x2d,0xfc,0x01,0x3d,0xc5,0x96,0xd4,0xa0,0x23,0xe4,0xb5,0x61,
    0xac,0xa1,0x30,0x68,0xac,0x59,0xd4,0x16,0xe9,0xf7,0x0e,0xf9,0xbb,0x50,0xb8,0x64,
    0xcc,0x8c,0xa9,0xd1,0x1f,0xc1,0xef,0xcc,0xb7,0xba,0x86,0xfc,0x5d,0x35,0x6e,0xee,
    0x81,0x47,0x69,0xe1,0x1e,0x58,0x43,0x0b,0xf7,0xc0,0x63,0xe4,0x7d,0x1a,0xef,0x71,
    0xf2,0x9a,0xbd,0x07,0x9e,0x80,0x66,0xef,0x81,0x2a,0xf2,0x7d,0xc5,0x27,0xeb,0xb2,
    0xce,0x7c,0x07,0xe2,0xab,0xe6,0xb6,0x0e,0xeb,0x29,0xef,0x5a,0x77,0x13,0x88,0xa5,
    0x39,0xec,0x3d,0xf0,0x24,0x79,0xbf,0xbd,0x07,0xd6,0x92,0xd7,0x65,0x6d,0x34,0x9e,
    0x3c,0xb5,0xee,0x3e,0x45,0x9e,0x65,0x16,0x7d,0xab,0xc1,0x53,0x63,0x78,0xa4,0xcf,
    0x7a,0x6e,0x35,0x18,0xbf,0xde,0xf0,0x6c,0x30,0x3c,0xe1,0x7b,0x60,0x23,0x79,0xbf,
    0xbd,0x07,0x36,0x91,0xd7,0x85,0x47,0xe3,0xd5,0x18,0x9e,0x5a,0xf2,0x4c,0xc2,0xb8,
    0x09,0x79,0xf5,0x1e,0x78,0x96,0xbc,0x3f,0x7c,0x0f,0xd4,0x91,0xf7,0xd9,0x9a,0x5f,
    0x87,0x79,0x0c,0x86,0xea,0x7b,0x03,0xdb,0x83,0xc8,0xdb,0x60,0xce,0xd7,0x36,0x5a,
    0x5a,0xdf,0xb7,0xe3,0x7c,0x6d,0x33,0xe7,0xa9,0x91,0xbc,0xae,0x76,0x53,0xe8,0x7c,
    0xa5,0xc8,0x6b,0x8d,0xe6,0x7c,0xa5,0xcc,0xf9,0x4f,0xd3,0xe2,0xfa,0x3e,0x60,0xf8,
    0xc4,0xd7,0xc2,0x6d,0x00,0x7c,0x2d,0x86,0x6f,0x27,0x2d,0xad,0xef,0x2f,0x82,0x6f,
    0xa7,0xe1,0xc9,0x90,0xd7,0xd5,0x7e,0x29,0xc4,0xd7,0x4a,0x5e,0xcb,0x18,0xbe,0x56,
    0xc3,0xd7,0x46,0x8b,0xeb,0x7b,0xbf,0xe1,0x13,0x5f,0x3b,0xb7,0x7e,0xf0,0xb5,0x1b,
    0xbe,0x0e,0x5a,0x5a,0xdf,0x3b,0xc1,0xd7,0x61,0x78,0xb2,0xe4,0x75,0xb5,0x77,0x87,
    0xf8,0xba,0xc8,0x6b,0x59,0xc3,0xd7,0x65,0xf8,0x5e,0x0e,0xd5,0xf7,0x3e,0xc3,0x27,
    0xbe,0x3d,0xdc,0xfa,0xc0,0xb7,0xc7,0xf0,0xed,0xbd,0x47,0x7d,0xdf,0x07,0xbe,0xbd,
    0x86,0x67,0x3f,0x79,0x5d,0xed,0x57,0x42,0x7c,0xdd,0xe4,0xb5,0xfd,0x86,0xaf,0xdb,
    0xf0,0xbd,0x16,0xaa,0xef,0xbd,0x86,0x4f,0x7c,0x07,0xb8,0xf5,0x82,0xef,0x80,0xe1,
    0x3b,0x78,0x8f,0xfa,0x7e,0x08,0x7c,0x07,0x0d,0x4f,0x0f,0x79,0x5d,0xed,0x37,0x42,
    0x7c,0x87,0xc9,0x6b,0x3d,0x86,0xef,0x30,0xce,0x9b,0xe6,0xed,0x85,0xad,0xeb,0xd4,
    0x07,0x5b,0xf7,0xb5,0x1f,0xb6,0x7e,0x87,0x03,0xb0,0xf5,0xdc,0x0c,0xe2,0x6c,0xd5,
    0xd3,0xe2,0x5a,0x9e,0x64,0xbb,0x1e,0x7d,0xe4,0x5d,0xe7,0xf1,0x3c,0x2d,0xad,0xe5,
    0x2f,0x90,0xd7,0xb5,0x96,0xbf,0x4d,0x5e,0xb3,0xb5,0x5c,0x63,0xd5,0xd3,0x42,0x2d,
    0xff,0x10,0xb5,0x5c,0x18,0x64,0x4c,0xd2,0xd4,0xde,0x61,0xf8,0x1d,0xd6,0x7e,0x24,
    0x74,0xd7,0x1c,0xe7,0x36,0x82,0xfb,0xe1,0x38,0x58,0x46,0x83,0xfa,0xe9,0x7f,0xbf,
    0x0c,0xe2,0xb7,0xcb,0xe7,0xf8,0xfd,0xb0,0x83,0x73,0x4a,0x8d,0x3f,0x85,0x7b,0x62,
    0xd8,0xfc,0x9e,0xda,0xcd,0x7d,0x4f,0xa2,0xef,0x29,0xf0,0x6a,0xec,0x91,0xe0,0x7f,
    0x1a,0x72,0x35,0xdc,0xfe,0x07,0xf6,0x00,0x87,0x59,0x74,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 32, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// shared uint intersectingWidgets[32];
//
// void accumulateWidgets(const uint localId)
// {
//
//     if(localId < 16)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 16];
//         if(localId < 8)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//             if(localId < 4)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//                 if(localId < 2)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                     if(localId < 1)
//                     {
//                         intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                     }
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     intersectingWidgets[localId]= uint(intersects)<< localId;
//     accumulateWidgets(localId);
//     if(localId == 0)
//     {
//         ballot . x = intersectingWidgets[0];
//     }
//
//     return ballot;
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(32, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
