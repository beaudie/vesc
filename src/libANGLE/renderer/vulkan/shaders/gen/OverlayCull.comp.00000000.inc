// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xdb,0x4b,0x54,0x51,
    0x14,0xc6,0xf7,0x9c,0x19,0x67,0xac,0xa0,0xcc,0x31,0xc4,0xbc,0xd6,0x80,0x2f,0x8a,
    0x04,0x5d,0x08,0x42,0xca,0x17,0x27,0xcb,0x6a,0x06,0x21,0x15,0x7a,0x91,0x02,0x0d,
    0x52,0xb3,0xf4,0x21,0xe9,0x21,0x21,0x09,0x93,0x6a,0x92,0x6a,0xa4,0x5e,0x4d,0x42,
    0xc5,0x9c,0xa4,0x52,0x7a,0xee,0xdd,0xfe,0x98,0xe8,0x02,0x41,0x6b,0xed,0xf3,0x3b,
    0xb6,0x12,0x0f,0x2c,0xf6,0x59,0x97,0xfd,0xed,0x6f,0x7d,0xeb,0xec,0x13,0x0f,0x32,
    0x29,0x17,0x8f,0xb9,0xbd,0xae,0xdc,0x7d,0x73,0xe1,0x73,0xd0,0x05,0x2e,0xc6,0xda,
    0xce,0x7a,0x4e,0xd6,0x7d,0x2e,0xe9,0xe3,0xd9,0xee,0x9e,0xee,0xb6,0xbb,0xe3,0x37,
    0xda,0x4e,0x9c,0x3c,0xa6,0xf5,0xfb,0x5d,0xdc,0xef,0xd3,0xdc,0x01,0x97,0x72,0x65,
    0xb2,0x26,0xc4,0x86,0x07,0x6e,0x8e,0x68,0xbc,0x52,0xac,0x53,0xac,0x42,0xf6,0x27,
    0x3c,0x9e,0x73,0x4d,0xd4,0x7b,0x3c,0x89,0x56,0x7a,0x7c,0xe7,0x6a,0xf1,0x75,0x4d,
    0xfa,0x3d,0xce,0x9d,0x17,0xc4,0x3a,0xb8,0x65,0x58,0xb3,0x72,0xa6,0xc6,0x02,0xea,
    0x1b,0x64,0x3d,0xba,0x9d,0x0b,0xfd,0x23,0x06,0xbf,0x13,0xfc,0xc3,0xe0,0x75,0xed,
    0x82,0xd7,0x65,0xf0,0xc6,0x76,0xe0,0x8d,0x81,0x17,0xd5,0xaa,0x5f,0x43,0x6e,0x12,
    0x6c,0xf5,0xd3,0x82,0x10,0xf8,0xda,0xb8,0x57,0x45,0xdf,0x0f,0x49,0x4d,0x92,0x9e,
    0xf5,0xa9,0x16,0x3f,0x45,0x7f,0x01,0x7e,0x05,0x7e,0xdc,0xd7,0x25,0xbc,0x46,0x31,
    0xfa,0x3f,0x83,0x5f,0x49,0xac,0x05,0xbc,0x34,0x78,0x5a,0x5f,0x45,0x2e,0x09,0x5e,
    0x35,0xef,0x09,0x53,0xaf,0xbd,0xeb,0x1c,0xeb,0xd0,0xb7,0x9a,0x58,0x03,0x5a,0xd6,
    0x82,0x55,0x0f,0xaf,0x3a,0xce,0xae,0xf7,0x35,0xff,0x7a,0x69,0x34,0xf3,0x6b,0x31,
    0x7e,0xc4,0x25,0xb3,0xdd,0x97,0x13,0x5e,0x81,0x6b,0x86,0xd3,0x71,0x59,0x9b,0xc9,
    0x45,0x9c,0xce,0xd2,0x73,0xd4,0x63,0x27,0xb8,0x0d,0xcc,0x23,0x09,0xe6,0x05,0x59,
    0xf7,0x88,0x75,0x51,0xab,0xfe,0x45,0x62,0x9a,0xef,0xe6,0x3d,0x69,0xb0,0xaf,0x8a,
    0x95,0x1b,0xbf,0x17,0x3d,0x5a,0x65,0xfe,0xaa,0x7f,0x1f,0x35,0xbd,0xa6,0xe6,0x3a,
    0xbd,0x44,0xfe,0x10,0x7c,0x6a,0x04,0x7d,0x14,0xfc,0x98,0xfb,0xff,0x09,0xd0,0x47,
    0x79,0xdc,0x26,0x36,0x0a,0x4f,0xf5,0xc7,0xcc,0xdc,0xc7,0x65,0x6d,0x64,0x4f,0xab,
    0xa0,0xe9,0x7c,0x27,0x39,0x77,0x08,0x6b,0x93,0xde,0x95,0xdf,0x96,0xd8,0x29,0xe1,
    0x1a,0xc0,0xdb,0xa1,0xd5,0x4f,0x89,0xe8,0x1d,0x6b,0xe7,0xbb,0xc9,0xa2,0xdb,0x15,
    0xd9,0x95,0xf2,0xdf,0x77,0x18,0xcb,0xb2,0x47,0xf9,0x76,0xc8,0x0e,0xd5,0xe8,0x12,
    0xba,0x35,0xb1,0x5f,0xfb,0xb9,0x4c,0x7c,0x59,0x6a,0x9a,0x3d,0x4e,0x18,0xd3,0xef,
    0xeb,0x87,0x9c,0x98,0x07,0xe7,0xb7,0xd4,0x6b,0x2e,0x27,0x96,0x87,0x47,0xce,0x9c,
    0xdb,0xc3,0x99,0x5b,0x46,0xa3,0x5f,0x52,0x13,0xd5,0xea,0xfa,0x9d,0xda,0xaf,0xf0,
    0x2c,0x63,0x9f,0xe2,0x3c,0x64,0x2e,0xfd,0xe4,0x75,0x3e,0x0f,0x88,0x5d,0x23,0xde,
    0x47,0x2f,0x55,0x3e,0x17,0xde,0x89,0xb4,0xe9,0x65,0x8a,0x78,0x87,0x78,0x19,0x8f,
    0x19,0xcd,0x26,0xcc,0xb5,0x73,0x37,0xa6,0xc9,0xe5,0x05,0x4b,0xf7,0x3d,0x22,0xe6,
    0x4c,0x6c,0x86,0x98,0xea,0xbf,0x86,0x36,0x8f,0xa9,0x9d,0x41,0x9b,0x82,0xd1,0x46,
    0x73,0xb3,0x62,0x05,0xfa,0x9d,0x35,0xda,0x3c,0x01,0x6b,0xda,0xcc,0x44,0x31,0xf5,
    0x4e,0x3c,0x25,0xaf,0x3d,0xbe,0x11,0x1c,0x3d,0xe7,0x19,0x71,0xd5,0x2f,0xc2,0x2b,
    0xa0,0x9f,0xe6,0x9f,0xc3,0x25,0x4f,0xed,0x2c,0x7c,0x8a,0x86,0x8f,0xd6,0xcc,0x89,
    0x15,0xd9,0x3f,0x67,0xf8,0xbc,0x30,0x7c,0x02,0xbe,0xab,0x55,0xf8,0xbc,0x24,0xdf,
    0x6f,0xf8,0xbc,0x22,0xae,0x7c,0x22,0xbc,0xa2,0xe1,0x33,0x0f,0xa7,0x02,0xb5,0x7a,
    0x56,0x4f,0xac,0xcc,0x6b,0xfd,0x9a,0x7b,0x3e,0x6f,0xb4,0x1d,0x20,0xee,0x98,0xb1,
    0xc6,0x16,0xb8,0x07,0x53,0x66,0x7e,0x6f,0xcd,0xfc,0x16,0xcc,0xfc,0x16,0xc9,0x45,
    0x78,0xef,0x88,0xd9,0xf9,0x2d,0x11,0xb3,0xf3,0x5b,0xa6,0x76,0x09,0xbd,0x4a,0x46,
    0x2f,0xcd,0xad,0x88,0x95,0xe8,0x6f,0xc5,0xe8,0xb5,0x0a,0xd6,0xe2,0x2e,0xf3,0x7b,
    0x4f,0xde,0xce,0x6f,0x8d,0xb8,0xea,0x15,0xe1,0x95,0x8c,0x5e,0x1f,0xe0,0x52,0xa4,
    0x76,0x05,0x3e,0x1b,0x86,0x8f,0xd6,0xac,0x8b,0x6d,0xb0,0x7f,0xdd,0xf0,0xf9,0x68,
    0xf8,0xec,0x9c,0xdf,0x27,0xf2,0x76,0x7e,0x9f,0x89,0x2b,0x9f,0x08,0x6f,0xc3,0xf0,
    0xd9,0x84,0x53,0x89,0xda,0x75,0x33,0xbf,0x2f,0xcc,0x6f,0xd3,0x68,0x3b,0x48,0xdc,
    0x79,0x2d,0x43,0x6d,0x6f,0x31,0xbb,0xe8,0xbf,0x31,0x62,0x7a,0xd1,0xdc,0xb0,0xd8,
    0x08,0x67,0x0f,0x33,0x4b,0xfd,0x4f,0xde,0xe1,0x1f,0x79,0x9f,0xff,0xe3,0x04,0xf7,
    0x3f,0x27,0xdc,0xf4,0xfc,0x7b,0x7c,0x2f,0x83,0x60,0xa7,0xfd,0x77,0x92,0xf0,0xfb,
    0x26,0xc8,0x6b,0x5f,0x11,0xb6,0xae,0x7f,0x64,0x42,0xa7,0xc5,0xfe,0x02,0x9a,0x06,
    0x80,0x6a,0xe0,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_ballot : require
//
// layout(push_constant)uniform PushConstants {
//
//     bool rotateXY;
// } params;
//
// layout(local_size_x = 32, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return subgroupBallot(intersects). xy;
//
// }
//
// void main()
// {
//
//     uvec2 outCoord = gl_WorkGroupID . xy;
//     if(params . rotateXY)
//     {
//         outCoord . xy = outCoord . yx;
//     }
//
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(32, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
