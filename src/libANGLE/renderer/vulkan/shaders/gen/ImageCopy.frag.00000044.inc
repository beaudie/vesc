// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000044.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000044[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5b,0x6c,0x55,0x45,
    0x14,0x86,0xf7,0x9c,0xd3,0x9e,0xb6,0xdc,0xc1,0x22,0x85,0x12,0x6d,0xb9,0x59,0x6d,
    0x2d,0xf7,0x6b,0x39,0x94,0x8a,0xd0,0x02,0x95,0x0a,0x44,0x13,0x10,0x8b,0x10,0x52,
    0x45,0xae,0x55,0x8c,0x10,0x01,0xdb,0x0a,0xb6,0x31,0x42,0x34,0xf1,0x41,0x50,0x9a,
    0xf8,0xa2,0x0f,0x2a,0xa8,0xf0,0x20,0x88,0x34,0x86,0x20,0x51,0x6a,0xa2,0x34,0x51,
    0x6a,0xe0,0xd5,0x17,0x23,0x91,0x28,0x16,0x35,0x04,0x67,0xed,0xf9,0x56,0xcf,0xb2,
    0xf1,0xd2,0x64,0xb2,0xf7,0xfa,0xd7,0xfd,0x9f,0x35,0xb3,0x0f,0x24,0x13,0x63,0x73,
    0xa2,0xc8,0x45,0xfd,0xa2,0xdc,0xa8,0xce,0x45,0xf1,0xdf,0xd0,0x28,0x11,0xc9,0x6b,
    0xff,0x28,0x15,0x3f,0xab,0x6b,0x57,0xd6,0x96,0x3f,0xbd,0x63,0x43,0xf9,0xb4,0xe9,
    0x93,0x44,0x3f,0x28,0x4a,0xc6,0x76,0xa2,0x1b,0x1c,0xe5,0x44,0x59,0xfe,0x29,0x6b,
    0xcb,0xba,0x8d,0x5b,0x05,0x9f,0xe0,0xd7,0x15,0xbf,0x86,0x78,0x3b,0xc1,0x73,0x24,
    0x86,0x7f,0x9b,0x10,0xc7,0x14,0x9f,0x28,0xaa,0x89,0xb2,0xa3,0xb2,0x90,0x2e,0x1a,
    0xcb,0x53,0x31,0x07,0x96,0x6b,0xb0,0x04,0xd8,0x10,0x83,0x25,0xc1,0xf2,0x0d,0x96,
    0x05,0x56,0x60,0xb0,0x6c,0xb0,0xd1,0x06,0x4b,0x81,0x15,0x19,0x2c,0x07,0x6c,0x9c,
    0xc1,0x72,0xc1,0x4a,0x0c,0x96,0x07,0x56,0x66,0xb0,0x7e,0x60,0x93,0x0c,0xd6,0x1f,
    0x6c,0x9a,0xc1,0x06,0x80,0xcd,0x32,0xd8,0x40,0xb0,0xb9,0x31,0x4f,0xc9,0xde,0x7e,
    0x85,0xb3,0x35,0xfe,0x39,0x06,0x7e,0x54,0x2e,0x36,0xb2,0xf0,0x7c,0x07,0xf2,0x6d,
    0xde,0x2b,0x11,0xeb,0x93,0x31,0x37,0xf2,0x7e,0xbb,0x7f,0x4b,0xd1,0x67,0xa9,0xb7,
    0x4f,0x91,0xef,0x87,0xa3,0xe3,0xd3,0xf9,0xde,0x62,0x90,0xc1,0x85,0xb3,0xa3,0xd5,
    0xeb,0xd2,0x2a,0x0b,0x5f,0x87,0x0f,0x8d,0x9c,0x3f,0xdc,0xcb,0x45,0xc4,0x90,0xbd,
    0x19,0xe1,0xe5,0x62,0xe4,0x04,0xf2,0x38,0x38,0xcd,0x8a,0xf1,0xac,0x68,0x3c,0xb6,
    0x82,0x57,0x20,0x4f,0x30,0xfe,0x77,0x61,0x2f,0xfe,0x12,0xbf,0x94,0x78,0x51,0xdc,
    0xcf,0x90,0x98,0x83,0x62,0x56,0x51,0x6f,0xfd,0xff,0xbd,0x8a,0x7a,0x9f,0x59,0xd1,
    0xbd,0xec,0x53,0x19,0xf9,0x45,0x2e,0x07,0x2b,0xa5,0x9f,0x89,0xd4,0x23,0xf6,0x93,
    0xd0,0x15,0x1b,0xfd,0x0c,0xd3,0xcf,0xcc,0x5e,0xdf,0xa0,0x97,0xe7,0x1c,0xea,0x55,
    0xfb,0x05,0xcc,0x9a,0xca,0xcb,0xe0,0x5a,0xfa,0x7d,0x98,0xfa,0x24,0xde,0x48,0x1f,
    0x69,0x95,0xe1,0x53,0xff,0x9c,0x91,0x0b,0xfd,0xbe,0xad,0xf6,0xcf,0x55,0xe4,0x7f,
    0x04,0x7c,0x35,0xfd,0x88,0xbc,0xa6,0x4f,0xfe,0xfa,0x3e,0x72,0x03,0xfc,0x8a,0xff,
    0xe3,0xd4,0x5f,0x64,0xf4,0x9b,0xd9,0x03,0xa9,0xef,0x19,0x74,0x49,0xa3,0xdf,0xc3,
    0x99,0x50,0xf9,0x10,0x33,0xad,0xf2,0x31,0xce,0x87,0xca,0xa7,0xfa,0xf0,0x7b,0x8e,
    0x79,0xd7,0x79,0xfa,0xca,0xd4,0x27,0xf2,0xf7,0xb1,0xd4,0x54,0x29,0xf5,0x5d,0x26,
    0xb7,0xce,0xcb,0x65,0xee,0x90,0xa4,0xb1,0x9f,0xed,0xc9,0x69,0x6e,0x6a,0xaa,0x28,
    0xf3,0x55,0x89,0xdd,0x1c,0x17,0x30,0xbb,0xd4,0xb6,0xc2,0xbf,0x6f,0x7b,0xe7,0xa9,
    0x4a,0x95,0xe7,0x7a,0xf9,0xd5,0x17,0xda,0xd3,0x33,0xfc,0x0e,0x25,0xd8,0x87,0x88,
    0xf8,0x37,0x3c,0x22,0xfb,0x96,0x66,0x8e,0x4b,0x98,0xd5,0x3a,0x9f,0x47,0xe6,0xf4,
    0x6e,0xb0,0x12,0xb3,0x4f,0x5b,0x39,0x03,0xf7,0xa0,0xaf,0xf2,0x11,0x64,0x86,0x26,
    0x33,0x67,0x13,0x89,0x27,0x36,0x53,0xc0,0x5b,0xbc,0x8d,0xc8,0x53,0xf1,0x9b,0x82,
    0xdf,0x4c,0xee,0x83,0x72,0x66,0x2e,0xcd,0x7c,0xcd,0x06,0x7f,0xd7,0xdb,0x0c,0x8a,
    0x79,0x09,0x98,0xcc,0x5d,0x8f,0xaf,0x3c,0x4d,0x3d,0x7f,0x78,0xfb,0x0a,0xee,0x8f,
    0x34,0xfd,0xc8,0xfb,0x72,0xef,0x27,0xfb,0x30,0x9f,0x9c,0xf2,0xb7,0x97,0xbd,0xa9,
    0x02,0x5f,0xe1,0xd9,0x91,0x9a,0xee,0x74,0x01,0x53,0xbb,0xdf,0x7d,0x0c,0x8d,0x25,
    0xcf,0xeb,0x9e,0x0b,0xb1,0x4b,0xbb,0x60,0x93,0x8d,0xcf,0x5c,0xd3,0xc3,0xfd,0xf4,
    0xb0,0xc0,0xf4,0xb0,0x10,0x5c,0x7b,0x58,0x04,0xa6,0x3d,0xd4,0x98,0x1e,0x16,0xc5,
    0x77,0x5a,0x14,0x63,0x92,0xb7,0xda,0xf4,0xb0,0x94,0xdc,0xce,0xf4,0x50,0x0b,0xae,
    0x3d,0x8c,0x71,0x01,0x53,0x3b,0xe9,0x41,0x63,0xd5,0x98,0x1e,0xe6,0xb9,0x60,0x93,
    0xc6,0xa7,0xda,0xf4,0x50,0x47,0x0f,0xcb,0x4c,0x0f,0x0f,0x82,0x6b,0x0f,0xcb,0xc1,
    0xb4,0x87,0x95,0xa6,0x87,0xe5,0x71,0x3d,0x51,0x8c,0x49,0xde,0x15,0xcc,0x91,0xe4,
    0x7d,0x88,0xdc,0xf3,0x5c,0xe6,0x9c,0x4b,0x8d,0x6a,0xbb,0xd2,0xd4,0x58,0x89,0x5d,
    0x0d,0x7e,0x2b,0xa8,0x47,0xce,0xff,0xa3,0x9c,0x7d,0x9d,0xb9,0xb5,0xd4,0x5c,0x6f,
    0x66,0xee,0x31,0xf0,0x26,0x66,0x6e,0x3d,0x58,0xa5,0x0b,0x7e,0x72,0x1f,0x3c,0x81,
    0x5f,0x03,0x7e,0xc2,0xe9,0x46,0xf0,0x0d,0x5e,0x96,0xbb,0xe7,0x49,0xf2,0xad,0xf5,
    0x75,0xc9,0x1d,0xb6,0x09,0x6c,0x3d,0xf3,0xb3,0xd1,0x70,0xb7,0x85,0x78,0x9b,0x0d,
    0x77,0x5b,0xc1,0x95,0xbb,0x6d,0x60,0xca,0x5d,0xa3,0xe1,0x4e,0x74,0xdb,0xfd,0xda,
    0x0d,0x1f,0xbb,0x4d,0xec,0xbd,0xc4,0xde,0x63,0x62,0x3f,0x0f,0xae,0xb1,0x9b,0xc0,
    0x34,0x76,0x8b,0x89,0x2d,0xba,0xe6,0xf8,0x0c,0x86,0xd8,0xcd,0x66,0xb6,0xf6,0xd1,
    0x97,0xdc,0x05,0xef,0x13,0x6b,0x3f,0x78,0x3d,0x7b,0xa4,0x7e,0x2d,0xec,0x91,0xd8,
    0xbc,0x48,0xce,0xdd,0xd8,0x37,0x93,0xb7,0xcd,0xe4,0x15,0x9b,0x56,0xbf,0xda,0xf0,
    0x6f,0x35,0x79,0x5f,0x32,0x79,0xeb,0xfc,0x4d,0x2a,0x77,0xf0,0xcb,0x60,0x9b,0xcc,
    0x5d,0x93,0x88,0xe7,0x2d,0x15,0xeb,0x0f,0xe0,0xa7,0xab,0xd5,0xc7,0x12,0xfc,0x20,
    0xbe,0x07,0xe2,0x58,0x79,0xf1,0x5e,0xbd,0x42,0x9c,0x83,0xdc,0x77,0xd9,0xdc,0xf7,
    0x49,0x7a,0xd2,0x9a,0xda,0xe8,0x49,0x7c,0xee,0x73,0xc1,0xa7,0x05,0xff,0x56,0x6c,
    0x1b,0xb1,0xdd,0x6e,0xea,0xdf,0xf1,0x0f,0xf5,0x3f,0xfb,0x3f,0xf5,0xef,0xc4,0x4f,
    0xd7,0x3e,0xea,0xdf,0x85,0xef,0x4e,0x53,0xff,0x73,0xc4,0xd9,0xf5,0x2f,0xf5,0x6b,
    0x4d,0x8d,0xa6,0xfe,0x2a,0x17,0x7a,0x68,0xc3,0x7f,0x7b,0x3c,0x73,0xe1,0x5e,0x7f,
    0x0d,0xfd,0x7e,0x1f,0x49,0xe4,0xd7,0xc1,0xe6,0xb8,0xcc,0x9c,0x1d,0x66,0xce,0x0e,
    0x99,0x39,0x7b,0x03,0x5c,0xe7,0xec,0x4d,0x30,0x9d,0xb3,0x76,0xb3,0xdf,0xa2,0x3b,
    0xe2,0x57,0x3b,0xb5,0x1d,0x81,0x2f,0xa9,0xfb,0x2d,0x72,0x46,0xf8,0xf5,0xf0,0xfe,
    0xa7,0x7f,0x97,0x58,0x3f,0xe2,0x23,0xcf,0xd3,0xe4,0xfa,0x09,0xbf,0x81,0xf8,0xfc,
    0x66,0x72,0x89,0xee,0xaa,0x5f,0xd7,0xf0,0xbb,0x16,0xcf,0x60,0xc8,0xf5,0x0b,0x7e,
    0x05,0x51,0xe8,0x57,0xb0,0x5f,0xc1,0xe5,0xdb,0x38,0xc0,0xf3,0x95,0x8a,0x79,0x0b,
    0x7b,0x34,0x0a,0xfd,0x68,0xb8,0xed,0x21,0xe6,0x55,0xe3,0xff,0x33,0x31,0xe5,0x5b,
    0x6a,0x6d,0xa4,0xa6,0x5b,0x3e,0xca,0x0d,0xb0,0xeb,0xc4,0x5e,0xe0,0x42,0xfc,0x6b,
    0xf8,0x5e,0xe5,0xae,0x8e,0xbf,0xb1,0x2e,0xe8,0x95,0x0f,0xe5,0xe8,0x6d,0x38,0x72,
    0xf4,0x9b,0xe7,0xfe,0xce,0xd1,0x4d,0x72,0xde,0x34,0x1c,0xdd,0xc2,0x4f,0x39,0xca,
    0x75,0x19,0x8e,0x6e,0x31,0x84,0x49,0x17,0xfc,0xe4,0xa9,0x1c,0x65,0xbb,0xe0,0x67,
    0x39,0x4a,0xb9,0x80,0x5b,0x8e,0x72,0x5c,0x86,0x23,0xd1,0x2b,0x47,0x79,0xc4,0x8c,
    0x5c,0xc6,0x3f,0x41,0x4c,0xe5,0x48,0x6d,0xa4,0x26,0xe5,0x28,0xcf,0x65,0x38,0x5a,
    0xe8,0x42,0x7c,0xa9,0x2b,0xc1,0x0f,0x40,0xe5,0xa8,0xd4,0x05,0x7d,0x09,0xf9,0x95,
    0xa3,0xf7,0xe0,0x28,0x41,0xbf,0x85,0x7d,0x38,0x1a,0x4c,0x4e,0x79,0x2a,0x47,0x43,
    0x5d,0xf0,0x53,0x8e,0x46,0x19,0x8e,0x44,0x37,0xcc,0xaf,0xe1,0xf8,0x0d,0x37,0x1c,
    0x8d,0xc0,0xcf,0x72,0x54,0xe0,0x02,0x6e,0x39,0x1a,0x69,0x38,0x2a,0x30,0x1c,0x15,
    0x12,0x73,0x98,0xe1,0x28,0x9f,0x98,0xca,0x91,0xda,0x8c,0x32,0x1c,0x15,0x1a,0x8e,
    0xaa,0x5d,0x88,0x2f,0x75,0xe5,0x53,0xab,0x72,0x54,0xee,0x82,0x5e,0xb8,0x4a,0x90,
    0x53,0xcf,0x5e,0x3b,0xb3,0x28,0x76,0x8b,0x99,0xb5,0x46,0x7c,0x0a,0xcd,0x99,0xff,
    0x80,0x33,0x7f,0xcc,0x9c,0xf9,0x0f,0xc1,0xf5,0xcc,0x7f,0x04,0xa6,0x67,0xfe,0x84,
    0x39,0x87,0xa2,0x3b,0xee,0xd7,0x49,0xf2,0x9e,0x34,0xdf,0xad,0x4f,0x88,0x7d,0xca,
    0xc4,0x3e,0x0d,0xae,0xb1,0x3f,0x05,0xd3,0xd8,0x1d,0x26,0xb6,0xe8,0xce,0xf8,0x75,
    0x96,0xd8,0x67,0xa3,0xcc,0xf7,0xfb,0x73,0x62,0x9f,0x33,0xdf,0xef,0xf3,0xe0,0xe7,
    0xb9,0xa3,0xbf,0x00,0x6b,0x30,0xf9,0xbe,0x04,0xaf,0x27,0x5f,0xa7,0xc9,0x27,0xba,
    0x0b,0x7e,0x75,0x92,0xef,0x82,0x39,0xb3,0x53,0x5d,0xf8,0x0d,0xbf,0xd8,0xfc,0xbe,
    0x52,0xbb,0x4e,0xc3,0xf5,0x12,0x17,0x6c,0xce,0xe2,0x73,0xc1,0xd4,0xf3,0x35,0xf5,
    0xcc,0x30,0xf5,0x7c,0x03,0xae,0xf5,0x74,0x99,0x7a,0x44,0x77,0xd1,0xaf,0x2e,0xf2,
    0x5c,0x34,0xf5,0x4c,0xa7,0x9e,0x25,0x66,0xef,0xd5,0xae,0xcb,0xd4,0xb3,0xd4,0x05,
    0x9b,0x4e,0x7c,0x2e,0x9a,0x7a,0xbe,0xa5,0x9e,0x63,0xa6,0x9e,0xef,0xc0,0xb5,0x9e,
    0x6e,0x53,0x8f,0xe8,0x2e,0xf9,0xd5,0x4d,0x9e,0x4b,0xa6,0x9e,0x99,0x2e,0xfc,0x9b,
    0x46,0xf2,0xe9,0x37,0x4a,0xed,0xba,0x4d,0x3d,0xcb,0x5c,0xb0,0xe9,0xc2,0xe7,0x12,
    0xb6,0x1d,0xd8,0x9e,0x31,0x67,0xfd,0x33,0xf8,0x4e,0x9a,0x3c,0x93,0x5d,0x06,0x8f,
    0xfa,0xf8,0x76,0x98,0x3c,0x0f,0xb8,0x90,0xab,0x1b,0x9f,0x33,0xd8,0x9e,0xc0,0xf6,
    0x38,0xdf,0x5a,0xb1,0xfd,0x98,0x78,0xb2,0xf4,0xff,0x6c,0x12,0xe6,0x5b,0xab,0x3e,
    0x27,0x4c,0xfc,0x5a,0x17,0x72,0x74,0xe0,0x2f,0xf1,0xe6,0x79,0x8f,0x2b,0xe8,0x6e,
    0xfa,0x29,0x99,0xe5,0xd7,0x5f,0xd9,0xb4,0x79,0x46,0x64,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2DMS src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
