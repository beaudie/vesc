// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000044.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000044[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x69,0x6c,0x95,0x45,
    0x14,0x86,0x67,0xee,0xed,0xc6,0x5e,0x59,0x5b,0x83,0xa6,0x15,0xa8,0x45,0x6a,0xd9,
    0xa1,0xd0,0x5e,0x81,0x20,0xb4,0x4a,0x05,0x0b,0xd1,0x04,0xb1,0x92,0x26,0xa2,0x80,
    0x42,0x13,0x50,0x88,0xa0,0x70,0x59,0x5a,0x8d,0x10,0x13,0xfd,0x21,0xb2,0x44,0xff,
    0x98,0x98,0x68,0x40,0xe1,0x87,0xa0,0xd0,0x98,0x06,0x0d,0x52,0x13,0xa5,0x89,0x52,
    0x03,0xff,0x4d,0x8c,0x44,0xe2,0xd2,0x88,0x12,0xd0,0x39,0xdf,0x3c,0xa7,0xf7,0xd8,
    0xb8,0x34,0x99,0x7c,0xdf,0xbc,0x73,0xde,0xb3,0xbc,0x73,0x66,0xbe,0x0b,0xe9,0xd4,
    0xb8,0x42,0xe7,0xbc,0x1b,0xe8,0x8a,0xdc,0x03,0xde,0x25,0x7f,0xb7,0xb8,0x94,0x93,
    0xd7,0x41,0xae,0x20,0x79,0xd6,0x37,0xae,0x68,0xac,0xde,0xfc,0xcc,0xe3,0xd5,0x33,
    0x66,0x4e,0x91,0xf5,0xa1,0x2e,0x9d,0xd8,0xc9,0xda,0x30,0x57,0xe8,0xf2,0xc2,0x53,
    0xc6,0x86,0x96,0x75,0x1b,0x05,0xaf,0x08,0xe3,0x72,0x18,0xc5,0xc1,0x4e,0xf0,0x42,
    0xf1,0x11,0xde,0x2a,0x12,0x9f,0xc2,0x71,0xae,0xc1,0xe5,0xbb,0xaa,0x18,0xce,0x8d,
    0xe3,0xa9,0x98,0x07,0x2b,0x32,0x58,0x0a,0xac,0xd8,0x60,0x69,0xb0,0x91,0x06,0xcb,
    0x03,0x2b,0x31,0x58,0x3e,0xd8,0x58,0x83,0x15,0x80,0x95,0x19,0xac,0x10,0x6c,0xbc,
    0xc1,0x8a,0xc0,0x2a,0x0d,0x36,0x00,0xac,0xca,0x60,0x03,0xc1,0xa6,0x18,0x6c,0x10,
    0xd8,0x0c,0x83,0x0d,0x06,0xab,0x31,0xd8,0x10,0xb0,0xba,0x44,0xa7,0x74,0x5f,0xbd,
    0xa2,0xd9,0xaa,0xf0,0xbc,0x03,0x7d,0x74,0x5e,0x6e,0xe6,0xa2,0xf3,0xed,0xcc,0x47,
    0x04,0x56,0x2a,0x59,0x4f,0x27,0xda,0xc8,0xfb,0xe8,0xf0,0x56,0x40,0x9d,0x93,0x82,
    0x7d,0x01,0xf1,0xbe,0x3b,0x36,0x21,0x33,0x32,0x58,0x0c,0x35,0xb8,0x68,0x76,0xac,
    0xbe,0x25,0xa3,0x73,0xd1,0xeb,0xd0,0xc1,0xd2,0xf9,0xa3,0xc2,0xbc,0x0c,0x1f,0xb2,
    0x37,0x63,0xc2,0xbc,0x9c,0x79,0x8a,0xf9,0x78,0x34,0xcd,0x4b,0xf0,0x3c,0x37,0x01,
    0x5b,0xc1,0x6b,0x99,0x57,0x18,0xfe,0x9d,0xd8,0x0b,0x5f,0xfc,0x4f,0xc2,0x9f,0x4b,
    0xea,0x29,0x4e,0x34,0x28,0x67,0x94,0xf5,0xe5,0xff,0xdf,0xa3,0xac,0xef,0x99,0xe7,
    0xee,0x66,0x9f,0xaa,0x88,0x2f,0xf3,0x6a,0xb0,0x49,0xd4,0x33,0x99,0x7c,0xc4,0x7e,
    0x0a,0x6b,0xe5,0x66,0x7d,0x96,0xa9,0x67,0x76,0x1f,0x37,0xae,0xcb,0x73,0x2e,0xf9,
    0xaa,0xfd,0x42,0x7a,0x4d,0xe7,0x4b,0xd1,0x5a,0xea,0x7d,0x98,0xfc,0xc4,0x5f,0x69,
    0xf0,0xb4,0xd2,0xe8,0xa9,0x7f,0xde,0xcc,0x25,0xe6,0x23,0xbc,0xaf,0xa4,0x06,0x99,
    0xaf,0xea,0x17,0xb3,0xb9,0xdf,0x7c,0x0d,0x9a,0x0a,0xff,0x09,0x72,0x2e,0x33,0xeb,
    0xeb,0xd1,0x5d,0x72,0xda,0xcc,0x5a,0xda,0xac,0x6f,0xe7,0x1c,0xe8,0xfc,0x00,0x7d,
    0xac,0xf3,0xa3,0x9c,0x09,0x9d,0x9f,0xea,0xa7,0xe9,0x59,0x7a,0x5c,0x7b,0xe8,0x0b,
    0x93,0x9f,0xcc,0xbf,0x4d,0x66,0xd9,0x79,0x92,0xdf,0x25,0x62,0x6b,0x8f,0x5c,0xe2,
    0xde,0x48,0x1b,0xfb,0xd9,0x41,0x90,0x5d,0xd9,0x6c,0x6d,0x55,0xc8,0x4a,0xec,0x6a,
    0x7c,0xc4,0xec,0x50,0xdb,0x39,0xe1,0xbd,0xf5,0x9d,0x4d,0xf3,0x74,0x3e,0x37,0xcc,
    0x5f,0xdd,0xf3,0x66,0x66,0x56,0xd8,0x95,0x14,0xda,0x3b,0xfc,0x5f,0x0b,0x88,0xec,
    0x55,0x86,0xde,0xad,0xa4,0x3f,0x97,0x85,0x38,0xd2,0x9b,0x13,0xc1,0x2a,0xcd,0xde,
    0x6c,0xa4,0xef,0xef,0x62,0x7d,0x41,0xf0,0x20,0x7d,0x33,0x95,0xde,0x9a,0x8c,0x3f,
    0xb1,0x99,0x06,0xbe,0x3b,0xd8,0xc8,0x7c,0x3a,0xbc,0x69,0xf0,0x66,0x73,0x07,0x54,
    0xd3,0x67,0x19,0x7a,0x6a,0x0e,0xf8,0x7b,0xc1,0x66,0x68,0xa2,0x4b,0xc4,0xa4,0xd7,
    0x7e,0x0b,0x99,0x67,0xc8,0xe7,0x8f,0x60,0x5f,0xcb,0x9d,0x91,0xa1,0x1e,0x79,0x6f,
    0x0a,0x3c,0xd9,0x87,0xf9,0xc4,0x94,0xbf,0x1d,0xec,0xcd,0x02,0xf0,0xe5,0x41,0x1d,
    0xc9,0xe9,0x36,0x1f,0x31,0xb5,0xfb,0x3d,0xf8,0x50,0x5f,0xf2,0xec,0x0d,0x5a,0x88,
    0x5d,0xad,0x8f,0x36,0xf9,0x70,0xea,0x4c,0x0d,0xf7,0x52,0xc3,0x42,0x53,0xc3,0x22,
    0x70,0xad,0x61,0x31,0x98,0xd6,0xd0,0x60,0x6a,0x58,0x9c,0xdc,0x63,0x2e,0xc1,0x24,
    0x6e,0xbd,0xa9,0x61,0x09,0xb1,0xbd,0xa9,0xa1,0x11,0x5c,0x6b,0x28,0xf3,0x11,0x53,
    0x3b,0xa9,0x41,0x7d,0x35,0x98,0x1a,0xea,0x7c,0xb4,0xc9,0xc0,0xa9,0x37,0x35,0x2c,
    0xa3,0x86,0xa5,0xa6,0x86,0x07,0xc1,0xb5,0x86,0x26,0x30,0xad,0x61,0x85,0xa9,0xa1,
    0x29,0xc9,0xc7,0x25,0x98,0xc4,0x5d,0x4e,0x1f,0x49,0xdc,0x87,0x88,0x5d,0xe7,0x73,
    0x67,0x5b,0x72,0x54,0xdb,0x15,0x26,0xc7,0x0c,0x76,0x0d,0xf0,0x96,0x93,0x8f,0x9c,
    0xff,0x47,0x39,0xfb,0xda,0x73,0x8f,0x91,0x73,0xb3,0xe9,0xb9,0xd5,0xe0,0x59,0x7a,
    0xae,0x05,0x2c,0xe3,0x23,0x4f,0xee,0x83,0x27,0xe1,0xad,0x81,0x27,0x9a,0xae,0x05,
    0x5f,0x1d,0xf2,0x90,0x7b,0x6a,0x1d,0xf1,0x5a,0xe8,0x97,0xb5,0x46,0xab,0xa7,0xe0,
    0xaf,0x37,0x5a,0x3d,0x0d,0xae,0x5a,0x6d,0x00,0x53,0xad,0x5a,0x8d,0x56,0x1b,0x92,
    0x73,0xe4,0xdc,0x36,0xea,0xdf,0x66,0x7c,0x3f,0x8f,0xef,0xed,0xc6,0xf7,0x0b,0xe0,
    0xea,0x7b,0x07,0x98,0xfa,0xce,0x1a,0xdf,0xb2,0xb6,0x33,0xa9,0x3f,0xfa,0xde,0x69,
    0x7a,0x69,0x37,0x75,0xa5,0x93,0x3b,0x2c,0xfa,0xda,0x03,0xde,0xcc,0x9e,0x28,0x2f,
    0xcb,0x9e,0x88,0xcd,0x5e,0x62,0x6e,0xc3,0x7e,0x27,0x71,0xdb,0x4d,0x5c,0xb1,0x69,
    0x0b,0xa3,0x1d,0x7e,0x9b,0x89,0xfb,0x92,0x89,0xbb,0x2c,0xdc,0x9c,0x72,0xe7,0xbe,
    0x0c,0xb6,0xce,0xdc,0x2d,0xa9,0xa4,0xbf,0x0a,0x92,0xf5,0x7d,0xf0,0x74,0xbc,0x18,
    0x7c,0x09,0xbe,0x1f,0xee,0xbe,0xc4,0xd7,0x80,0x64,0xaf,0x5e,0xc1,0xcf,0x7e,0xee,
    0xb7,0x7c,0xee,0xf7,0x34,0x35,0x69,0x4e,0xed,0xd4,0x24,0x9c,0xf9,0x3e,0x72,0xb2,
    0xf0,0xdb,0xb0,0x6d,0xc5,0x76,0xa3,0xc9,0x7f,0xd3,0x3f,0xe4,0xff,0xec,0xff,0xe4,
    0xbf,0x05,0x9e,0x8e,0xbd,0xe4,0xbf,0x15,0xee,0x16,0x93,0xff,0x73,0xf8,0xd9,0xfa,
    0x2f,0xf9,0x6b,0x4e,0xad,0x26,0xff,0x79,0x3e,0xd6,0xd0,0x0e,0x5f,0xf2,0x6d,0xe5,
    0x1e,0x7f,0x8d,0xf5,0xb6,0xe0,0x49,0xe6,0xaf,0x83,0xd5,0xf8,0x5c,0x9f,0xbd,0x41,
    0x9f,0x1d,0x30,0x7d,0x76,0x10,0x5c,0xfb,0xec,0x10,0x98,0xf6,0xd9,0x11,0xb3,0xdf,
    0xb2,0x76,0x38,0x8c,0x23,0xe4,0x76,0x18,0xbd,0x24,0xef,0xb7,0x88,0xe9,0xe0,0xf5,
    0xf2,0x7e,0x3d,0xbc,0x8b,0xaf,0xef,0xe1,0xc8,0xf3,0x0c,0xb1,0x7e,0x80,0x37,0x04,
    0xce,0xaf,0x26,0x96,0xac,0x5d,0x09,0xe3,0x2a,0x3c,0x79,0xee,0x22,0xd6,0x4f,0xf0,
    0x4a,0x5c,0xac,0x57,0xb0,0x9f,0xc1,0xe5,0x5b,0x38,0x38,0xe8,0x25,0xd8,0x2f,0xec,
    0xd1,0xad,0xac,0x8f,0x45,0xdb,0x5e,0x7c,0x5e,0x31,0xfc,0x1f,0xf1,0x29,0xdf,0x4e,
    0x6b,0x23,0x39,0xfd,0x19,0xbc,0x5c,0x03,0xeb,0xc5,0xf7,0x02,0x1f,0xfd,0x5f,0x85,
    0x7b,0x85,0xbb,0x59,0xb4,0xaf,0xf0,0x71,0x5d,0xf5,0x50,0x8d,0xde,0x46,0x23,0x4f,
    0xbd,0x85,0xfe,0xef,0x1a,0x5d,0x27,0xe6,0x75,0xa3,0xd1,0x0d,0x78,0xaa,0x51,0x81,
    0xcf,0x69,0x24,0x6b,0x37,0xc5,0x9f,0x8f,0x3c,0x79,0xaa,0x46,0x69,0x1f,0x79,0x56,
    0xa3,0x3c,0x1f,0x71,0xab,0x51,0xbe,0xcf,0x69,0x24,0xeb,0xaa,0x51,0x21,0x3e,0x6f,
    0x1a,0xbe,0xc3,0xa7,0x6a,0xa4,0x36,0x92,0x93,0x6a,0x24,0x98,0x6a,0xb4,0xd0,0xe3,
    0x9f,0x1f,0x78,0x37,0x8d,0x46,0x13,0x7d,0x5c,0xaf,0x20,0xbe,0x6a,0xf4,0x2e,0x1a,
    0xa5,0xa8,0xb7,0xb4,0x9f,0x46,0x43,0x88,0x29,0x4f,0xd5,0x68,0x98,0x8f,0x3c,0xd5,
    0xa8,0xc4,0x68,0x24,0x6b,0xc5,0x61,0x8c,0x80,0x37,0xc2,0x68,0x34,0x0a,0x9e,0xd5,
    0x68,0xb4,0x8f,0xb8,0xd5,0x68,0x8c,0xd1,0x68,0xb4,0xd1,0xa8,0x14,0x9f,0xc5,0x3e,
    0xc7,0x1f,0x8e,0x4f,0xd5,0x48,0x6d,0x4a,0x8c,0x46,0xa5,0x46,0xa3,0x45,0x3e,0xfa,
    0x97,0xbc,0x86,0x93,0xab,0x6a,0x54,0xe5,0xe3,0xba,0x68,0x95,0x22,0xa6,0x9e,0xbd,
    0x23,0xf4,0xa2,0xd8,0xd5,0xd3,0x6b,0xad,0x70,0x4a,0xcd,0x99,0x3f,0xc6,0x99,0x3f,
    0x6a,0xce,0xfc,0xfb,0xe0,0x7a,0xe6,0x3f,0x00,0xd3,0x33,0x7f,0xc2,0x9c,0x43,0x59,
    0x3b,0x1e,0xc6,0x49,0xe2,0x9e,0x34,0xdf,0xad,0x8f,0xf0,0x7d,0xca,0xf8,0xfe,0x18,
    0x5c,0x7d,0x9f,0x06,0x53,0xdf,0x1d,0xc6,0xf7,0xe9,0xa4,0xcf,0x9d,0xeb,0xc4,0x77,
    0xa7,0xcb,0x7d,0xaf,0x3f,0xc5,0xf7,0x59,0xf3,0xbd,0xfe,0x0c,0xfc,0x1c,0x77,0xf4,
    0x39,0xb0,0x35,0x26,0xde,0xe7,0xe0,0xcd,0xc4,0xeb,0x32,0xf1,0x64,0xed,0x7c,0x18,
    0x5d,0xc4,0x3b,0x6f,0xfa,0x71,0xaa,0x8f,0xbf,0xd9,0xeb,0xcd,0xef,0x29,0xb5,0xeb,
    0x32,0x5a,0x37,0xf8,0x68,0xd3,0x09,0xe7,0xbc,0xc9,0xe7,0x4b,0xf2,0x99,0x65,0xf2,
    0xf9,0x0a,0x5c,0xf3,0xe9,0x36,0xf9,0xc8,0xda,0x85,0x30,0xba,0x89,0x73,0xc1,0xe4,
    0x33,0x9d,0x7c,0x1a,0xcc,0xde,0xab,0x5d,0xb7,0xc9,0xe7,0x3e,0x1f,0x6d,0xba,0xe0,
    0x5c,0x30,0xf9,0x7c,0x4d,0x3e,0x47,0x4d,0x3e,0xdf,0x80,0x6b,0x3e,0x3d,0x26,0x1f,
    0x59,0xbb,0x18,0x46,0x0f,0x71,0x2e,0x9a,0x7c,0x66,0xfa,0xf8,0x6f,0x18,0x89,0xa7,
    0xdf,0x28,0xb5,0xeb,0x31,0xf9,0x34,0xfa,0x68,0xd3,0x0d,0xe7,0x22,0xb6,0x1d,0xd8,
    0x9e,0x31,0x67,0xfd,0x13,0xf4,0x4e,0x9b,0x38,0x93,0x7d,0x0e,0x77,0xfd,0xb8,0x1d,
    0x26,0xce,0x12,0x1f,0x63,0xf5,0xc0,0x39,0x83,0xed,0x09,0x6c,0x8f,0xf3,0xad,0x15,
    0xdb,0x0f,0xf1,0x27,0x43,0xff,0x5f,0x26,0x65,0xbe,0xb5,0xca,0x39,0x61,0xfc,0xdf,
    0xef,0x63,0x8c,0x0e,0xf8,0xe2,0xef,0x9e,0xc0,0xb8,0xcc,0xda,0x8d,0xd0,0x25,0x35,
    0x61,0xfc,0x05,0xe5,0x32,0x5f,0x2c,0x48,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
