// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x96,0xdd,0x4f,0x54,0x57,
    0x14,0xc5,0xcf,0xcc,0x1d,0x66,0xa8,0xc5,0x16,0x41,0x84,0xa2,0x60,0x95,0x6a,0x0b,
    0x2a,0x19,0x2d,0xd3,0x68,0x28,0x85,0x6a,0x22,0xd4,0x8e,0x56,0xfc,0xc0,0xd6,0x02,
    0xc6,0xa8,0x10,0xe3,0x07,0x24,0xb5,0xc0,0x83,0x22,0xc4,0xd0,0x0a,0x0f,0xb4,0xc0,
    0x83,0x0a,0x3c,0x34,0x69,0xb1,0x0f,0xfd,0x43,0xfa,0x17,0x19,0x3f,0x12,0x13,0xf7,
    0x3e,0xf3,0xdb,0x64,0x3b,0x93,0xec,0xdc,0xbb,0xd6,0xda,0x67,0xaf,0xb3,0xcf,0x39,
    0xf7,0x64,0x92,0x74,0x4b,0x2e,0x24,0xa9,0xb0,0x25,0x54,0x86,0x7f,0x43,0xe9,0xb7,
    0x2d,0xa4,0x43,0x4a,0x9e,0x1f,0x86,0x6c,0x7c,0xf6,0x16,0xcf,0x17,0xdb,0x7f,0xb9,
    0x77,0xbd,0xbd,0xa3,0x90,0x57,0xfd,0xa3,0x90,0xc4,0x3c,0xd5,0x3e,0x16,0x94,0x91,
    0xa7,0xc6,0x9d,0xab,0x37,0xef,0x2a,0x5f,0x25,0x71,0x45,0x62,0x54,0x62,0x5c,0x62,
    0x4a,0x62,0x56,0x62,0x41,0x62,0x45,0x62,0x5d,0xa2,0x5a,0x6a,0xe8,0x98,0x9c,0xd6,
    0x97,0xb7,0xaa,0xe8,0xa7,0xf5,0x42,0xe8,0x0b,0x15,0x61,0x3b,0x73,0x69,0xe1,0x69,
    0x5c,0x0a,0xae,0xd2,0x71,0x69,0xb8,0x6a,0xc7,0x25,0x70,0x0d,0x8e,0xcb,0xc0,0xed,
    0x72,0x5c,0x05,0xdc,0xa7,0x8e,0xcb,0xc2,0x7d,0xe6,0xb8,0x1c,0xdc,0x17,0x8e,0xab,
    0x84,0x3b,0xe8,0xb8,0x0f,0xe0,0xf2,0xb1,0xaf,0x64,0x73,0x7e,0xda,0x63,0x9f,0x3c,
    0xf7,0xd2,0x8f,0xe1,0x3d,0x0e,0x17,0xcb,0xf4,0x22,0xba,0x8d,0xd7,0x35,0x6d,0x76,
    0xfa,0x28,0x38,0x05,0x1e,0x07,0x5b,0xfe,0x14,0x38,0x01,0xcf,0x82,0x33,0xe0,0x05,
    0x70,0x05,0x78,0x05,0x9c,0x05,0xaf,0x83,0xb5,0xf7,0x5a,0xa9,0x9a,0x8e,0xf3,0x49,
    0x62,0x3d,0x7d,0xdf,0x21,0x6f,0x59,0xd6,0xae,0x5e,0xf2,0x73,0x8c,0x4d,0x83,0xb7,
    0x80,0x33,0x31,0x27,0x13,0xf7,0x57,0xe7,0xaa,0x7c,0x27,0xb8,0x0a,0xae,0x4e,0x70,
    0x0d,0xb5,0x0c,0xd7,0x82,0x43,0x9c,0x47,0xd5,0xe6,0x3e,0x58,0xd4,0x10,0x59,0x9e,
    0xb5,0x2e,0xd4,0xaf,0x8e,0xfd,0xd8,0x8e,0x5f,0x5d,0x9c,0x73,0x89,0x3b,0x80,0x5f,
    0x3d,0x7e,0x9a,0xdf,0x80,0x96,0x73,0x7a,0x13,0xfe,0x86,0xf7,0xa2,0x6b,0x7e,0x0b,
    0xf9,0xb5,0xd1,0x23,0x1d,0xf6,0x93,0xa7,0xf8,0xf3,0xb2,0x71,0x79,0xce,0x8b,0xe1,
    0x4e,0xc6,0xea,0x3a,0x9d,0x60,0xfe,0xba,0x4e,0x9f,0x08,0x7b,0x12,0x9c,0x0a,0xef,
    0xff,0x0c,0xab,0x77,0x2f,0xef,0x27,0xe9,0xad,0x37,0x9e,0xc1,0xd2,0xaf,0x51,0xe6,
    0x72,0x8a,0xbc,0xef,0xe1,0x4e,0x91,0xa7,0xb8,0x08,0xb7,0x53,0xf6,0xef,0x0c,0x35,
    0x6c,0x5e,0xfd,0xec,0x9f,0xe1,0x01,0xd6,0x57,0x6b,0x5d,0x62,0xce,0x35,0xe0,0x61,
    0xce,0xd6,0x09,0x6a,0x0f,0xf3,0xdd,0x27,0x0e,0x8f,0x82,0xad,0xde,0x2d,0xfa,0x34,
    0x7d,0xbc,0x2c,0x7f,0xaa,0x2c,0xff,0x3e,0xdf,0xb5,0xe9,0xb3,0x65,0xfa,0x1c,0x67,
    0xc4,0xf4,0x85,0x32,0x7d,0x51,0xa2,0xc7,0xe9,0x2b,0x65,0xfa,0x13,0x89,0x19,0xa7,
    0xaf,0xa3,0x7f,0x25,0x5f,0x45,0x9a,0xb9,0x06,0xb8,0x57,0xc2,0xe8,0xb7,0xd2,0xc5,
    0xd9,0xde,0xca,0xf9,0xed,0x17,0x36,0xcb,0xdd,0xb5,0x95,0x7c,0xe3,0xaa,0xe1,0x74,
    0xef,0xce,0x0a,0x97,0x8b,0xf7,0x6b,0x29,0x57,0xb5,0x6f,0x85,0x6b,0x88,0xfb,0x5e,
    0x3a,0x9b,0xf5,0xd4,0xcf,0xc5,0x7d,0x2c,0xf1,0x73,0x8c,0xdb,0xc5,0xd8,0x46,0x37,
    0xae,0x99,0x71,0x4d,0x6e,0xdc,0x6e,0xf8,0x47,0x8c,0xdb,0xc3,0xd8,0xdd,0x8c,0xb3,
    0xbb,0x6d,0x07,0xe7,0xb9,0x8b,0x33,0xbb,0x0f,0xfe,0x3f,0xc9,0xd9,0xcf,0x5d,0xb7,
    0x8f,0xb3,0xfc,0x52,0x56,0xa0,0x8d,0xde,0xde,0x48,0xbe,0x6a,0xad,0x12,0x6d,0xac,
    0x4b,0xab,0xeb,0xf9,0x90,0xbb,0xd7,0x1e,0x4a,0xae,0x72,0xed,0xf0,0xe7,0x04,0xe9,
    0x9c,0xfe,0x82,0xb3,0xbc,0xd7,0x52,0xc3,0x6a,0xe9,0xf3,0x85,0x64,0x69,0xde,0x3f,
    0xe4,0x54,0x30,0xa6,0xd5,0xf5,0x70,0x98,0x1e,0xf2,0xae,0x87,0x23,0xf0,0xd6,0xc3,
    0x97,0x70,0xd6,0x43,0xc1,0xf5,0xa0,0x5a,0x87,0x44,0x01,0xdf,0x0e,0xd7,0xc3,0x51,
    0xbc,0x53,0xae,0x87,0x63,0xf0,0xd6,0xc3,0xdf,0x70,0x96,0xa7,0x3d,0x58,0xad,0x82,
    0xeb,0x61,0x83,0x9c,0x36,0xc6,0x74,0xb8,0x1e,0xbe,0xa6,0x87,0x4e,0xd7,0x43,0x17,
    0xbc,0xf5,0xf0,0x0d,0x9c,0xf5,0xd0,0xe3,0x7a,0x50,0xad,0x9b,0x33,0xae,0xbe,0xfa,
    0xfe,0x03,0xbe,0xc7,0xf1,0xde,0x70,0x77,0x87,0xce,0xd1,0x72,0x7b,0xdc,0x1c,0x9f,
    0x93,0x57,0x60,0x5c,0x37,0xf3,0xd1,0xbb,0xe1,0x3b,0xee,0x16,0xc5,0x7a,0x8f,0x9c,
    0xe6,0x0e,0x19,0x90,0xf9,0x9d,0x89,0x7e,0xa5,0x9c,0xd3,0xee,0x5c,0x9e,0xa3,0xaf,
    0x7e,0x77,0x2e,0xcf,0xc3,0xdb,0x79,0xbe,0x80,0xaf,0xf2,0x97,0x84,0xd3,0x7b,0xe4,
    0x22,0xf5,0x2e,0x50,0x4b,0xef,0x9c,0x1f,0xa9,0x35,0x40,0x2d,0xfd,0x6e,0x7f,0x82,
    0xff,0x5f,0x72,0x14,0x5f,0x86,0xab,0x77,0xeb,0xf6,0x33,0x7c,0x13,0xeb,0x36,0xe4,
    0xd6,0x4d,0xb5,0x41,0x89,0x21,0xd6,0x62,0x30,0xae,0x73,0x12,0xef,0xaf,0x8b,0xac,
    0x93,0x69,0x43,0xce,0xe7,0x1a,0x3e,0xfd,0xce,0xe7,0x3a,0xbc,0xf9,0x8c,0x38,0x1f,
    0xd5,0x6e,0x48,0x8c,0x50,0xeb,0x06,0x3e,0xa3,0xce,0xc7,0xb4,0x11,0xe7,0x73,0x1b,
    0x9f,0x5b,0xce,0xe7,0x0e,0xbc,0xf9,0x8c,0x39,0x1f,0xd5,0xf4,0xcf,0xd7,0x18,0xb5,
    0xee,0xe2,0x33,0xee,0x7c,0x4c,0x1b,0x73,0x3e,0xf7,0xf0,0xc9,0x3b,0x9f,0x5f,0xe1,
    0xcd,0x67,0xd2,0xf9,0xa8,0x36,0x21,0x31,0x49,0xad,0x09,0x7c,0xa6,0x9c,0x8f,0x69,
    0x93,0xce,0xe7,0x01,0x3e,0xf7,0x9d,0xcf,0x34,0xbc,0xf9,0xcc,0x38,0x9f,0xe9,0xf8,
    0xdd,0x95,0xee,0x66,0xad,0xf5,0x10,0x9f,0x59,0xe7,0x63,0xda,0x8c,0xf3,0xf9,0x0d,
    0x9f,0x39,0xe7,0xf3,0x3b,0xbc,0xf9,0xcc,0x3b,0x1f,0xd5,0x1e,0x4b,0xcc,0x53,0xeb,
    0x31,0x3e,0x0b,0xce,0xc7,0xb4,0x79,0xe7,0xf3,0x07,0x3e,0x8b,0xce,0xe7,0x4f,0x78,
    0xf3,0x59,0x76,0x3e,0xaa,0x2d,0x49,0x2c,0x53,0x6b,0x09,0x9f,0x15,0xe7,0x63,0xda,
    0xb2,0xf3,0x79,0x8a,0xcf,0x13,0xe7,0xf3,0x0c,0xde,0x7c,0xd6,0x9c,0x8f,0x6a,0xab,
    0x12,0x6b,0xd4,0x5a,0xc5,0x67,0xdd,0xf9,0x98,0xa6,0xcf,0xb7,0x72,0x33,0x1c,0x95,
    0x78,0x07,0x33,0x73,0x22,0x00,0x08,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = texture(isampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
