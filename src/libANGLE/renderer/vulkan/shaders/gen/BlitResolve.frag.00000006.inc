// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xf7,0xb9,0xe3,0x91,0x9b,0x5c,0x25,0x55,0x41,0x20,0x29,0x41,0x3d,0x98,
    0x56,0xac,0xd0,0x62,0xbc,0x25,0xd2,0x16,0xb5,0x2d,0x31,0x36,0xb5,0xad,0x82,0xd8,
    0x82,0x89,0x58,0x39,0x26,0x2a,0x24,0xad,0xc2,0x83,0x55,0x88,0x41,0x85,0x07,0x54,
    0x78,0xd0,0x2a,0x0f,0x26,0x0a,0x7d,0xa5,0xef,0xfd,0x8b,0x5a,0x2f,0x89,0x49,0x67,
    0xd6,0xf9,0x0d,0x9d,0x9c,0x93,0xcc,0xd9,0x7b,0xbe,0x6f,0x66,0xbe,0x99,0xb5,0xd7,
    0x5a,0x89,0x78,0x4b,0x26,0x4a,0xc4,0xa2,0x6c,0x54,0x12,0xfd,0x15,0x15,0x7e,0x9b,
    0xa2,0x78,0x14,0x93,0xe7,0xc6,0x28,0x1d,0x9e,0x47,0xfb,0xfa,0xfb,0x72,0xf9,0x2b,
    0x43,0xb9,0x3d,0x9d,0xbb,0x95,0x2f,0x8f,0x12,0x21,0x4e,0xb9,0x0a,0xf1,0x92,0xf2,
    0x54,0xbb,0x38,0x30,0x32,0xaa,0x78,0x99,0xd8,0x05,0xb1,0xbc,0xd8,0x84,0xd8,0x94,
    0xd8,0x8c,0xd8,0xbc,0xd8,0x92,0xd8,0xb2,0x58,0xa5,0xd4,0xd0,0x9c,0x8c,0xd6,0x97,
    0xb7,0xb2,0xa0,0xa7,0xf5,0xa2,0xa8,0x37,0x4a,0x45,0xd5,0xf4,0xd2,0xc2,0xd3,0xb0,
    0x18,0x58,0x89,0xc3,0xe2,0x60,0x95,0x0e,0x4b,0x80,0x6d,0x76,0x58,0x12,0x6c,0x8b,
    0xc3,0x52,0x60,0x4d,0x0e,0x4b,0x83,0xb5,0x3a,0x2c,0x03,0xd6,0xe6,0xb0,0x12,0xb0,
    0x9d,0x0e,0xdb,0x00,0xb6,0x3b,0xcc,0x95,0x58,0xef,0x4f,0x67,0x3c,0x21,0xcf,0x66,
    0xe6,0x31,0x7f,0xbb,0xf3,0x75,0xcd,0xb6,0x39,0x3f,0x8f,0x1f,0xc3,0x9f,0xc0,0xb7,
    0x7a,0x53,0xf8,0x09,0xfc,0x19,0xfc,0x24,0xfe,0x3c,0x7e,0x0a,0x7f,0x09,0x3f,0x8d,
    0xbf,0x8c,0xaf,0xb3,0x55,0x4b,0xd5,0x78,0xe8,0x27,0x11,0xea,0xe9,0x7b,0xad,0xc4,
    0xa4,0x59,0x1b,0xed,0xa1,0x5e,0xfc,0x0c,0xf9,0xca,0xd7,0x49,0x64,0x16,0x5e,0x39,
    0xfd,0x7e,0x59,0xf4,0x9b,0xe4,0xbf,0x94,0x3c,0xc5,0x3f,0xc5,0x2f,0x73,0xb5,0xca,
    0x89,0x37,0xad,0x2a,0x6a,0x45,0xa1,0xaf,0xd2,0xf5,0x75,0x2f,0xc7,0xd2,0x58,0x96,
    0x67,0x95,0x33,0xd5,0xab,0x61,0xfd,0xab,0xd1,0xab,0x09,0x75,0x0b,0xd8,0x0e,0x66,
    0xa9,0xa3,0xbe,0xc6,0xd7,0xc3,0x65,0x1c,0xbf,0x05,0x5f,0xf9,0xad,0xf0,0x5a,0xbf,
    0x46,0xba,0x6c,0x22,0xae,0xca,0x7d,0x37,0xcb,0x6b,0x67,0x3f,0x98,0xdf,0x49,0xae,
    0xce,0xd9,0x43,0xbf,0xc9,0xb0,0x57,0x32,0xc1,0x3f,0x40,0x2f,0xde,0x2c,0xb7,0xd7,
    0xad,0xe1,0xe7,0xd4,0x51,0xbc,0x41,0xde,0x8e,0xf1,0x1e,0x8b,0xfe,0xff,0xc5,0x9c,
    0xaf,0x39,0xc7,0x79,0x3f,0xc6,0x3a,0xa8,0x7f,0xa2,0xa8,0xdf,0x53,0xe4,0x98,0x7f,
    0x9a,0x7d,0xa2,0xf9,0xdf,0xa3,0x99,0x75,0xfc,0x20,0xba,0xca,0x8f,0xb0,0xe7,0x7a,
    0xa8,0x3f,0xc2,0x79,0x4f,0xb8,0xf8,0x51,0xbe,0xab,0xf1,0x79,0x78,0xf3,0x27,0x8a,
    0xfc,0xa9,0xa2,0xfc,0x5b,0x9c,0x67,0xe3,0x67,0x8a,0xf8,0x59,0xf6,0x8a,0xf1,0xf3,
    0x45,0xfc,0x02,0x6b,0x6c,0xfc,0x52,0x11,0xff,0x44,0xec,0x86,0xe3,0x97,0xe1,0xf7,
    0xca,0x2a,0xc4,0x59,0xff,0x08,0xec,0x8d,0x20,0xa9,0x30,0x6f,0x72,0xfd,0x8e,0x2a,
    0x0b,0x6b,0x9a,0x09,0xfb,0xb2,0x12,0xac,0xc2,0x7d,0x8f,0x51,0xce,0xca,0x26,0xf8,
    0x83,0x52,0xa1,0x9e,0xfb,0xa8,0x96,0xef,0xdd,0x43,0x4c,0x03,0xf8,0xa4,0xc4,0xa8,
    0xff,0x01,0x79,0x0d,0xe4,0x6d,0xe5,0x9c,0xd6,0xb2,0x3f,0x7b,0xd8,0x83,0x8d,0xe0,
    0x2f,0x24,0xa6,0x89,0xbb,0xa5,0x91,0xbd,0xf9,0x5a,0x3a,0x6f,0xa5,0x9f,0x77,0x12,
    0xdf,0xec,0xee,0x34,0x9d,0x47,0xdf,0xbf,0x96,0x3c,0x5d,0x8b,0x0f,0xd1,0xd4,0xdf,
    0xaf,0xac,0x4f,0x1b,0xf8,0x37,0xe2,0x65,0x82,0x46,0x01,0xb3,0xb8,0xb7,0x52,0xc3,
    0x6a,0xe9,0xf3,0x1f,0x89,0xd2,0xb8,0x57,0xc4,0xa4,0xc8,0x69,0x71,0x33,0xec,0x60,
    0x86,0x76,0x37,0xc3,0x4e,0x70,0x9b,0x61,0x17,0x98,0xcd,0xd0,0xe1,0x66,0x50,0x2e,
    0x27,0xd6,0x81,0x6e,0xce,0xcd,0xf0,0x11,0xda,0x31,0x37,0xc3,0xc7,0xe0,0x36,0xc3,
    0x4b,0x30,0x8b,0xd3,0x19,0xac,0x56,0x87,0x9b,0x61,0x85,0x98,0x56,0x72,0x72,0x6e,
    0x86,0xbd,0xcc,0xd0,0xe9,0x66,0xf8,0x04,0xdc,0x66,0xd8,0x07,0x66,0x33,0x74,0xbb,
    0x19,0x94,0xeb,0x12,0xeb,0x46,0xb7,0x8b,0x7d,0xa4,0xba,0x9f,0xa1,0xbd,0xe2,0xce,
    0xb3,0xf6,0x68,0xb1,0xdd,0xae,0xc7,0x35,0xe2,0x3a,0xc8,0xeb,0x22,0xf6,0x10,0xb1,
    0x87,0x88,0xd5,0x33,0xfa,0x27,0x67,0x41,0xf3,0x4f,0x8a,0x1d,0x86,0xd3,0x35,0x5a,
    0x65,0x2f,0x2a,0xf7,0x2d,0x9c,0xce,0xaa,0xf7,0xce,0x17,0xcc,0xda,0xcb,0xac,0x1a,
    0xff,0x25,0xf8,0x2a,0xb3,0xf6,0x51,0x43,0xf1,0x7f,0x25,0xe6,0x08,0x35,0x6c,0xde,
    0x3e,0xfc,0x23,0xf4,0x75,0x98,0x5a,0x7a,0x37,0x7d,0xc5,0xbd,0x74,0x86,0x3e,0xfb,
    0xc1,0xd6,0xe8,0x77,0x35,0x9c,0xd1,0x54,0xe0,0x4e,0x32,0x47,0x3f,0x58,0x9a,0x7e,
    0x57,0xb9,0xcb,0xfc,0xec,0xaa,0x75,0x89,0xb3,0xfa,0x1d,0x79,0x3a,0x93,0xde,0x6b,
    0x3f,0x30,0xd3,0x69,0xfa,0xd0,0x3b,0xee,0x47,0xf0,0xbb,0x12,0xb3,0x31,0xf4,0x53,
    0xc8,0x53,0xbc,0x54,0x94,0x14,0x3b,0xeb,0xee,0xd9,0x33,0x9c,0x6f,0xed,0x6b,0x00,
    0xce,0xd6,0xec,0x1c,0xf5,0x07,0xdd,0x9a,0x0d,0x81,0xff,0x4d,0xdf,0xe7,0xc1,0x4e,
    0xb9,0x3d,0xf3,0x13,0x78,0x1d,0x7b,0x66,0xd8,0xad,0xa1,0x72,0x3f,0x8b,0x0d,0x33,
    0x9f,0xbe,0xef,0x97,0x98,0x0b,0xe8,0xeb,0xec,0xc6,0x0d,0x3b,0x9d,0x4b,0xe8,0x8c,
    0x3a,0x9d,0x5f,0xc0,0x4d,0x67,0xcc,0xe9,0x28,0x77,0x59,0x6c,0x8c,0x5a,0x97,0xd1,
    0xc9,0x3b,0x1d,0xe3,0xc6,0x9c,0xce,0x55,0x74,0x7a,0x9d,0xce,0x35,0x70,0xd3,0x19,
    0x77,0x3a,0xca,0x5d,0x17,0x1b,0xa7,0xd6,0x75,0x74,0x26,0x9c,0x8e,0x71,0xe3,0x4e,
    0xe7,0x37,0x74,0xda,0x9d,0xce,0x0d,0x70,0xd3,0x99,0x74,0x3a,0xca,0xdd,0x0c,0xf7,
    0x6a,0xa1,0xd6,0x4d,0x74,0xa6,0x9c,0x8e,0x71,0x93,0x4e,0xe7,0x77,0x74,0x6e,0x39,
    0x9d,0xdb,0xe0,0xa6,0x33,0xed,0x74,0x94,0xbb,0x23,0x36,0x4d,0xad,0x3b,0xe8,0xcc,
    0x38,0x1d,0xe3,0xa6,0x9d,0xce,0x3d,0x74,0x66,0x9d,0xce,0x7d,0x70,0xd3,0x99,0x73,
    0x3a,0xca,0x3d,0x10,0x9b,0xa3,0xd6,0x03,0x74,0xe6,0x9d,0x8e,0x71,0x73,0x4e,0xe7,
    0x21,0x3a,0x0b,0x4e,0xe7,0x11,0xb8,0xe9,0x2c,0x3a,0x1d,0xe5,0x1e,0x8b,0x2d,0x52,
    0xeb,0x31,0x3a,0x4b,0x4e,0xc7,0xb8,0x45,0xa7,0xf3,0x14,0x9d,0x27,0x4e,0xe7,0x0f,
    0x70,0xd3,0x79,0xee,0x74,0x94,0x7b,0x26,0xf6,0x9c,0x5a,0xcf,0xd0,0x59,0x76,0x3a,
    0xc6,0xe9,0xf3,0xbd,0x9c,0xbe,0x7d,0x62,0xff,0x01,0x6b,0x7f,0x0e,0xe7,0xb4,0x0c,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2DMS color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
