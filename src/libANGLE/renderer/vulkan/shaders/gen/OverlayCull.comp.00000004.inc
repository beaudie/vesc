// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x97,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xd7,0x3a,0xa7,0x3d,0xb4,0x34,0x55,0x68,0xd1,0x4a,0x5b,0xb4,0x72,0x90,
    0x48,0x28,0x07,0x25,0xb4,0x16,0x49,0x6f,0xf1,0x60,0x95,0x14,0xe8,0x0d,0x28,0xa1,
    0xd0,0x16,0x4b,0xa4,0x12,0x9a,0x5e,0xce,0x83,0xc1,0x42,0x89,0x51,0x9f,0xf4,0x2f,
    0xf0,0x2f,0xb0,0x18,0x25,0xe1,0x91,0x62,0x89,0xca,0xe5,0x51,0x12,0x89,0xd1,0x46,
    0x2d,0x0d,0x5a,0xa2,0x89,0x81,0x07,0x0a,0xd6,0x34,0x75,0x66,0xaf,0x6f,0xca,0xd7,
    0xa3,0x4d,0x56,0xf6,0x9e,0x6f,0xd6,0x9a,0xf9,0xad,0x35,0x7b,0x4f,0xf7,0x89,0xc7,
    0x92,0x2b,0x5c,0xdc,0xbb,0x95,0x2e,0xcf,0x7d,0xe2,0x5d,0xf4,0xb7,0xda,0xc5,0x9c,
    0xde,0x16,0xb8,0x44,0x74,0x6d,0x6a,0x6e,0x6f,0x4e,0x8d,0x64,0xfa,0x52,0xdb,0xab,
    0x5e,0x52,0xff,0x13,0x2e,0x1e,0xcd,0x53,0xdf,0x93,0x6e,0x85,0xcb,0x95,0x6b,0x8e,
    0x8c,0x53,0xbd,0xfd,0x03,0xaa,0xb7,0xcb,0x18,0x97,0xb1,0x4a,0xd6,0xe7,0x44,0xf1,
    0x9c,0x6b,0xc0,0xfc,0x28,0x9e,0xa8,0xed,0x51,0x7c,0xe7,0xca,0x60,0x77,0xc9,0x35,
    0x11,0xad,0x71,0xee,0x0d,0x89,0x78,0x24,0xa0,0xb8,0x24,0xae,0x4d,0x92,0x53,0xb5,
    0x18,0xe6,0x77,0xcb,0x75,0xfd,0x92,0x2f,0xd8,0xcf,0x53,0xfc,0x71,0xc4,0x2f,0x85,
    0x3d,0x99,0x35,0x7f,0x12,0xf3,0x2d,0xb6,0xda,0x6b,0xe1,0xbb,0x81,0xb5,0x6a,0x17,
    0x4b,0xc6,0x58,0x34,0x37,0x1e,0xed,0x5a,0xef,0x9f,0x92,0x39,0xca,0x5a,0x81,0xf5,
    0x25,0x62,0x17,0x80,0x5f,0xfd,0x9b,0xe1,0x2f,0xc2,0x7e,0xd6,0x88,0x5a,0x4c,0x7a,
    0x09,0xd6,0x96,0x8b,0xfd,0x0c,0xd6,0x05,0x2d,0x27,0xca,0xa9,0x67,0xa6,0xfa,0x4e,
    0xd8,0xa5,0xd0,0xd4,0x5f,0x8e,0xfb,0x04,0xc5,0xd3,0x33,0xca,0x23,0x3b,0x85,0x39,
    0x66,0xef,0xc8,0xe2,0x4a,0xe3,0x9c,0x94,0xbb,0x15,0xb1,0xe2,0x88,0xdf,0x06,0x5f,
    0x2b,0xf2,0xb7,0xa1,0x9e,0x9e,0xd6,0x77,0x60,0xdf,0x3a,0x7f,0x3f,0x7c,0x09,0xc4,
    0xeb,0xc4,0x3d,0xe7,0x3f,0x8c,0xfa,0x97,0xa3,0xce,0x9d,0xd0,0x9e,0x45,0x4d,0xbb,
    0x10,0xeb,0x28,0x38,0x8f,0x20,0xb7,0xda,0xdd,0x74,0xe6,0x3d,0x38,0x37,0x63,0x51,
    0xbb,0x97,0x58,0xfa,0x30,0xb7,0x13,0x2c,0xc3,0x51,0xfd,0x82,0x56,0x29,0xcf,0x94,
    0xd6,0x68,0x0c,0xfc,0x1d,0xb4,0xbf,0x71,0xc4,0xb4,0x39,0x5f,0xe2,0x4c,0x93,0xd1,
    0x33,0x90,0xef,0x2e,0x63,0x4f,0x78,0x3d,0x96,0xfe,0x62,0xd1,0x1e,0x42,0xee,0xaf,
    0xa0,0x5d,0x46,0x5c,0xb5,0x27,0xe9,0xf9,0xf8,0x5a,0xae,0x3d,0x4b,0x2c,0x89,0xe8,
    0x7c,0x6f,0xe0,0x1c,0xd2,0x18,0x76,0x5e,0xef,0x49,0xa2,0x7b,0x8b,0x8b,0x8b,0x66,
    0x8f,0x8a,0x7d,0x97,0xec,0x33,0x62,0xdf,0x21,0xfb,0xac,0xd8,0x33,0x64,0x8f,0x89,
    0x7d,0x5b,0xec,0x6a,0xd9,0x4f,0x0c,0xb5,0x70,0xa8,0xf1,0x23,0x51,0xf4,0x7d,0xad,
    0x45,0xed,0xcf,0x63,0xff,0xfb,0xe4,0x3d,0xd6,0xbd,0x7f,0x0e,0xed,0x3c,0xd6,0xe8,
    0x9e,0x3f,0xc0,0xb9,0x5c,0x80,0x5f,0xcf,0xe7,0x1c,0xb4,0x8b,0xd0,0x55,0x6b,0x14,
    0x4d,0x9f,0x87,0xef,0xf0,0xcc,0x74,0x20,0x8f,0x32,0xdd,0x84,0xde,0x28,0x96,0xd6,
    0xe9,0x7b,0xd4,0xb6,0x17,0xbe,0x5a,0x3c,0x3b,0xb7,0xe0,0x6b,0x95,0x58,0xba,0xee,
    0x07,0x68,0x8e,0xb4,0x1f,0xa1,0xc5,0xa2,0xdc,0xb9,0x51,0x8d,0x7f,0xc2,0x5c,0xf5,
    0x3d,0x94,0x9d,0x4e,0x63,0xcd,0xbc,0xc4,0x55,0xdf,0x94,0x8c,0x69,0xec,0x7f,0x8a,
    0xf6,0xfb,0x33,0x62,0xdd,0xa2,0xfd,0x6a,0x4c,0x7d,0x76,0x7e,0x81,0x5f,0xf7,0xf8,
    0xa9,0xc4,0xd1,0x3c,0xbf,0x42,0xff,0x5b,0xe2,0x58,0x3c,0xbd,0x3e,0x90,0x78,0xea,
    0xbf,0x0d,0x96,0x5c,0xcc,0x9d,0x02,0xcf,0x2c,0xf1,0xe8,0x9c,0x19,0x19,0xb3,0x58,
    0x3f,0x43,0x3c,0x77,0x88,0x27,0x86,0x9a,0x7d,0x01,0x9e,0xdf,0xe0,0xbf,0x40,0x3c,
    0xbf,0x43,0x57,0x1e,0x8b,0x37,0x4b,0x3c,0x77,0xc1,0x34,0x8d,0xb9,0x33,0x74,0x66,
    0x7f,0xe0,0xec,0x4b,0xc0,0x98,0xf0,0x8f,0x19,0xd5,0xf7,0xa7,0x8c,0x7f,0x10,0x53,
    0xef,0x3f,0x93,0xd3,0xd7,0xf3,0xff,0x0b,0x71,0xd3,0xa8,0xf1,0xb7,0xa8,0xcb,0x3d,
    0xf8,0x6e,0xe2,0x59,0xd0,0x5e,0x75,0x1f,0xfd,0x4b,0xb5,0x3a,0xc9,0x71,0x1f,0xf3,
    0x8c,0x61,0x95,0x0f,0xbe,0x22,0x30,0x34,0x12,0x83,0xfa,0x56,0xcb,0x50,0x4d,0x19,
    0xf4,0xfe,0x1c,0x72,0x15,0xd1,0x3a,0xcb,0x55,0xec,0x43,0x2e,0xf5,0xd9,0x73,0xb7,
    0xc6,0x07,0xdd,0xec,0xa7,0x7d,0x60,0xba,0x8a,0x38,0x25,0x3e,0x68,0x3a,0xcf,0xf8,
    0x54,0x33,0xbe,0xb5,0xc8,0x93,0x04,0x5f,0x03,0xf1,0xa9,0xaf,0x54,0x46,0x03,0xf8,
    0x4a,0x89,0xaf,0x8c,0xd6,0x19,0x5f,0x39,0xf8,0xca,0x88,0x67,0x9d,0x0f,0xba,0xd9,
    0xcf,0x65,0xf1,0x55,0xf8,0xa0,0xad,0x23,0xbe,0x0a,0xe2,0x5b,0x8f,0x3c,0x29,0xf0,
    0xd5,0x13,0x9f,0xfa,0x92,0x32,0xea,0xc1,0x97,0x24,0xbe,0x0d,0xb4,0xce,0xf8,0x5e,
    0x00,0xdf,0x06,0xe2,0xd9,0xe8,0x83,0x6e,0xf6,0x8b,0x59,0x7c,0x9b,0x7c,0xd0,0x36,
    0x12,0xdf,0x26,0xe2,0xdb,0x8c,0x3c,0x3b,0xc0,0x57,0x47,0x7c,0xea,0xab,0xd4,0x75,
    0xe0,0xab,0x24,0xbe,0x2d,0xb4,0xce,0xf8,0x52,0xe0,0xdb,0x42,0x3c,0x5b,0x7d,0xd0,
    0xcd,0x7e,0x39,0x8b,0x6f,0x9b,0x0f,0xda,0x56,0xe2,0xdb,0x46,0x7c,0xdb,0x91,0x27,
    0x0d,0xbe,0x5a,0xe2,0x53,0x5f,0x95,0xc6,0x06,0x5f,0x15,0xf1,0x55,0xd3,0x3a,0xe3,
    0x7b,0x05,0x7c,0xd5,0xc4,0x53,0xe3,0x83,0x6e,0xf6,0xab,0x59,0x7c,0x3b,0x7d,0xd0,
    0x6a,0x88,0x4f,0x35,0x7d,0x9f,0x2d,0x6f,0x2d,0x6c,0x3b,0xa7,0x3a,0xd8,0x56,0xd7,
    0x7a,0xd8,0xf6,0x1c,0x36,0xc0,0xb6,0xf7,0x46,0xaf,0xe3,0xd8,0xef,0x03,0xbc,0x8b,
    0x1d,0xd8,0xef,0x3c,0xf5,0x25,0xf5,0xcd,0x45,0xf7,0x61,0xdd,0x1c,0xed,0xed,0x21,
    0xde,0xe3,0x5e,0xea,0xe9,0x8f,0xa0,0xb7,0x89,0xa5,0xbd,0xeb,0x5d,0x1f,0xb4,0x31,
    0xc4,0x54,0x06,0x8b,0x35,0x8f,0x9e,0xa4,0xf3,0x3e,0xf2,0x61,0x8e,0x72,0xe9,0x9a,
    0x39,0xcc,0x4d,0x80,0x57,0x7b,0xce,0xfb,0x38,0x9f,0x05,0xea,0x51,0xd6,0x7f,0xb4,
    0x49,0xff,0x5f,0xff,0x89,0xe1,0x03,0x73,0x81,0xb8,0xe3,0xa8,0xc9,0x02,0xfa,0x8f,
    0xda,0x31,0xaa,0xff,0x6b,0x98,0x6f,0xfd,0x27,0x43,0xf5,0x57,0x5f,0x5a,0x46,0x06,
    0x5c,0x69,0xaa,0xff,0x2e,0xd4,0x5f,0xff,0x57,0x5b,0xae,0xd7,0x91,0x6b,0x17,0xd5,
    0xbb,0xc9,0x07,0xdd,0xec,0x37,0x7d,0x60,0xb2,0xfa,0xef,0xf6,0x41,0x6b,0xf2,0x8f,
    0xf9,0x76,0x13,0x5f,0x33,0xf8,0xac,0xff,0x8c,0x10,0x9f,0xfa,0xf6,0xc8,0x18,0x01,
    0xdf,0x1e,0xe2,0xdb,0x0b,0xbe,0x51,0xe2,0xdb,0x07,0xbe,0xbd,0xc4,0xd3,0xe2,0x83,
    0x6e,0x76,0x5b,0x16,0x5f,0xbb,0x0f,0x5a,0x0b,0xf1,0xb5,0x13,0xdf,0x7e,0xf0,0x59,
    0xff,0x19,0x26,0x3e,0xf5,0x1d,0x90,0x31,0x0c,0xbe,0x03,0xc4,0x77,0x10,0x7c,0x67,
    0x88,0xaf,0x13,0x7c,0x07,0x89,0xe7,0x90,0x0f,0xba,0xd9,0x87,0xb3,0xf8,0xba,0x7c,
    0xd0,0x0e,0x11,0x5f,0x17,0xf1,0x1d,0x05,0x9f,0xf5,0x9f,0x21,0xe2,0x53,0x5f,0xb7,
    0x8c,0x21,0xf0,0x75,0x13,0x5f,0x0f,0xf8,0xce,0x12,0x5f,0x2f,0xf8,0x7a,0x88,0xe7,
    0x98,0x0f,0xba,0xd9,0x7d,0x59,0x7c,0xc7,0x7d,0xd0,0x8e,0x11,0xdf,0x71,0xe2,0x7b,
    0x1b,0x7c,0xd6,0x7f,0x06,0x89,0x4f,0x7d,0x27,0x64,0x0c,0x82,0xef,0x04,0xf1,0xf5,
    0x83,0x6f,0x8c,0xf8,0xde,0x01,0x5f,0x3f,0xf1,0x9c,0xf4,0x41,0x37,0xfb,0x54,0x16,
    0xdf,0x80,0x0f,0xda,0x49,0xe2,0x1b,0x40,0xff,0xb0,0xbc,0x83,0xb0,0xed,0x9c,0x86,
    0x60,0x5b,0x5d,0x87,0x61,0xdb,0x73,0x38,0x02,0xdb,0xde,0x9b,0x8c,0x5f,0xfe,0x7e,
    0xeb,0xd5,0x7a,0xc1,0x87,0x3e,0xf4,0x83,0x79,0xf4,0x8d,0x0c,0xf5,0xaa,0x3c,0xbf,
    0xbc,0x57,0x15,0xd2,0xd9,0xa8,0x2f,0x5f,0x46,0x21,0x62,0xe6,0xd3,0x39,0xac,0xf4,
    0xff,0xed,0x55,0x05,0x3e,0xe8,0xd6,0xab,0x4e,0xfb,0xa0,0x69,0x7e,0x8f,0xfe,0x63,
    0xb1,0x0a,0x89,0xef,0x63,0xcc,0x51,0xe6,0xd3,0xc8,0xa9,0x2c,0x13,0x6e,0x39,0xcb,
    0x25,0xb9,0x9f,0x40,0xaf,0xbb,0x84,0xbc,0xfa,0x5b,0xe0,0x0a,0x7e,0x07,0x8c,0xe2,
    0x37,0xc0,0x37,0xf8,0x86,0xb6,0x6f,0xd9,0xab,0xc8,0xc1,0xdf,0xb7,0xd7,0xa0,0xa9,
    0xdc,0x22,0x1c,0xfa,0x5d,0x7c,0x1d,0x73,0xaf,0xd1,0xef,0x97,0xb7,0x24,0xe6,0x15,
    0xc4,0xbc,0x8e,0x3d,0x18,0xc3,0x44,0xd4,0xf3,0xbc,0xab,0x91,0xf1,0x2f,0xf5,0xb1,
    0xda,0xe2,0xe4,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// shared uint intersectingWidgets[32];
//
// void accumulateWidgets(const uint localId)
// {
//
//     if(localId < 16)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 16];
//         if(localId < 8)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//             if(localId < 4)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//                 if(localId < 2)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                     if(localId < 1)
//                     {
//                         intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                     }
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     if(localId < 32)
//     {
//         intersectingWidgets[localId]= uint(intersects)<< localId;
//         accumulateWidgets(localId);
//         if(localId == 0)
//         {
//             ballot . x = intersectingWidgets[0];
//         }
//     }
//     else
//     {
//         const uint graphLocalId = localId - 32;
//         intersectingWidgets[graphLocalId]= uint(intersects)<< graphLocalId;
//         accumulateWidgets(graphLocalId);
//     }
//     if(localId == 0)
//     {
//         ballot . y = intersectingWidgets[0];
//     }
//
//     return ballot;
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 8);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 8);
//
//     uvec2 culledWidgets;
//
//     culledWidgets = cullWidgets(0, blockCoordLow, blockCoordHigh);
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
