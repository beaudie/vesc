// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x97,0x6f,0x4c,0xd6,0x55,
    0x14,0xc7,0xef,0x79,0xc0,0x87,0x3f,0x66,0xf2,0x27,0xff,0x80,0x8c,0x82,0x87,0x5e,
    0xd9,0x1e,0x6d,0xa5,0x46,0x0a,0x13,0x61,0x23,0x37,0x37,0x44,0x68,0x92,0x41,0xf0,
    0x84,0xb9,0x30,0xd3,0x05,0xba,0x5c,0x92,0xe9,0xf8,0xf7,0xa2,0x57,0x0d,0xa2,0xb2,
    0x64,0x6e,0xba,0xb9,0xac,0xb5,0x7c,0x23,0x86,0xab,0x17,0x82,0x6f,0x62,0xcb,0x35,
    0x63,0x15,0xb9,0x8a,0xb6,0x96,0x2f,0xa2,0xc6,0xe6,0x1f,0xd2,0x65,0x9d,0xf3,0xbb,
    0xdf,0x03,0x87,0x1f,0xb0,0xdd,0xfd,0x7e,0xe7,0x7b,0xee,0x3d,0xe7,0x73,0xef,0xef,
    0xde,0x73,0x79,0x92,0x22,0xb1,0x14,0xe7,0xc8,0xa5,0xbb,0x54,0x77,0x85,0x5c,0xf0,
    0x97,0xe9,0x22,0x4e,0x5e,0x17,0xbb,0x68,0xf0,0xac,0xdc,0x56,0xb3,0x2d,0xde,0x76,
    0x70,0x77,0xfc,0xc9,0x75,0x6b,0xc5,0xff,0xa0,0x4b,0x0a,0xfa,0x89,0x6f,0xa9,0x4b,
    0x71,0x8b,0xf8,0x99,0xcc,0xed,0xd5,0x44,0xcb,0x7e,0xd1,0x6b,0xb8,0xf5,0x72,0xcb,
    0xe0,0xf1,0xc9,0x41,0x3c,0xe7,0x1e,0x41,0xff,0x20,0x1e,0xab,0x35,0x41,0x7c,0xe7,
    0x56,0xc1,0xae,0xe7,0x67,0x34,0x18,0xe3,0xdc,0x33,0x1c,0xb1,0xc1,0xa3,0xb8,0x18,
    0x9e,0x95,0x9c,0x53,0xb4,0x08,0xfa,0x37,0xf2,0xb3,0x70,0xc6,0xe7,0xed,0x02,0x13,
    0xbf,0x17,0xf1,0x73,0x11,0xaf,0x7f,0x81,0x78,0xfd,0x26,0xde,0x50,0x28,0xde,0x10,
    0xe2,0x69,0x5f,0xb1,0x73,0xe0,0x1b,0x46,0x6c,0xb1,0xb3,0x39,0x42,0x24,0xe8,0x9b,
    0x14,0xac,0x8a,0xbc,0x2f,0xe3,0x3e,0x51,0xcc,0x59,0xfe,0x56,0xb0,0xbd,0x18,0xf3,
    0x13,0xff,0x6a,0xf8,0xb3,0x30,0xdf,0x87,0x58,0xcd,0x36,0xfa,0x0a,0x8c,0xcd,0x63,
    0x7b,0x25,0xc6,0x79,0x2d,0x39,0xc8,0x29,0x6b,0x2a,0xfa,0x46,0xd8,0xb9,0xd0,0xc4,
    0x9f,0x87,0xf7,0xa8,0x89,0x27,0x73,0x4e,0x35,0x76,0x1c,0x7d,0xd4,0x2e,0x0e,0x71,
    0x55,0x60,0x1d,0x85,0xbb,0x1a,0xb1,0x92,0x10,0x7f,0x07,0x7c,0xd5,0xc8,0xbf,0x03,
    0xdf,0x9b,0xcc,0xf8,0x5a,0xcc,0x5b,0xfa,0x3f,0x0b,0x5f,0x14,0xf1,0xea,0xf0,0x6e,
    0xf3,0x3f,0xcf,0x6d,0x33,0xe6,0x2b,0xfb,0xa0,0x0e,0x5a,0x3e,0xbe,0x79,0x3d,0x62,
    0xbd,0x00,0xce,0x06,0xe4,0x16,0xbb,0xd1,0xac,0x79,0x93,0xd9,0x67,0xab,0x61,0x27,
    0x0c,0xcb,0x6e,0xf4,0xad,0x03,0x4b,0x6b,0xf0,0xfd,0xbc,0xf6,0x18,0xef,0x11,0xf9,
    0x46,0x6f,0x81,0xbf,0xd6,0xcc,0xaf,0x17,0x31,0xf3,0xb1,0x67,0xa2,0x88,0xf7,0x1e,
    0x3f,0xd3,0xb8,0xf5,0xa3,0xaf,0xd8,0xef,0x43,0x13,0xff,0x07,0x78,0x8f,0x9a,0xf8,
    0xa7,0xf1,0x3d,0xe2,0xc1,0xfe,0x49,0x73,0x17,0xe1,0xc7,0xd1,0x9b,0xf9,0x8b,0x04,
    0xf9,0x7c,0x9c,0x2f,0xa0,0x5d,0x44,0x1e,0xb1,0x87,0xcc,0xde,0xfa,0x92,0x9f,0x4d,
    0x33,0xf3,0x88,0x06,0xdf,0x66,0x18,0x7b,0xa6,0x02,0x2d,0xce,0xec,0x92,0x7f,0x98,
    0x24,0x97,0x7f,0x1f,0xe1,0xf7,0xf5,0xcc,0x15,0xc1,0xf7,0x70,0xf8,0xce,0xd3,0xac,
    0xc8,0x99,0x2e,0xc1,0xf7,0xef,0xc3,0x1a,0x54,0xf1,0x59,0x97,0x71,0xef,0x42,0xeb,
    0xc3,0x18,0x61,0x2f,0xe3,0x11,0x32,0xdf,0x13,0x58,0x83,0x04,0xc6,0xcb,0xdc,0x3e,
    0x84,0xfe,0x09,0xf7,0x91,0xf5,0xfe,0x08,0x9a,0xac,0xf1,0x1d,0xce,0x38,0x80,0x38,
    0x77,0xb9,0xbf,0xf8,0x4e,0x72,0x1b,0x00,0xc7,0x49,0x93,0xf7,0x14,0x72,0xfa,0x39,
    0xf8,0xbf,0x7f,0xb8,0x8f,0xf6,0x95,0xe7,0x2d,0xf4,0xed,0x23,0xcf,0xb9,0x08,0xe3,
    0x24,0x4e,0x27,0xbe,0xc1,0x19,0xf8,0xe5,0x5b,0x1c,0x83,0x76,0x16,0xfa,0x69,0xcc,
    0x45,0xf6,0xed,0xd7,0xd8,0xdb,0xb5,0x66,0x2e,0xa3,0xd0,0xcb,0xd8,0x92,0xfd,0xf4,
    0x0d,0xf6,0x60,0x02,0xbe,0x12,0xec,0xf1,0xab,0xf0,0x55,0x73,0x2c,0x19,0xf7,0x2d,
    0x34,0x67,0xb4,0x6b,0xd0,0x64,0xfd,0x3f,0xc7,0xda,0x7c,0x87,0xbe,0xd7,0xb0,0x36,
    0xe3,0x66,0x6d,0xc4,0x37,0xc6,0x6d,0x1c,0xf3,0x1d,0x33,0x6b,0xf3,0x3d,0x62,0x5d,
    0x35,0xdf,0x44,0x62,0xca,0x1e,0xff,0x01,0xfe,0xb3,0xc1,0xba,0x27,0x07,0x79,0x7e,
    0x84,0x2e,0xeb,0xa7,0xf1,0xc6,0xb1,0x7e,0xe2,0xff,0x09,0x2c,0x03,0xe8,0x3b,0x06,
    0x9e,0x09,0xc3,0x23,0x7d,0xae,0x73,0x9b,0xc0,0xf8,0xeb,0x86,0xe7,0x67,0xc3,0x13,
    0xc1,0xbe,0xfa,0x0c,0x3c,0xbf,0xc0,0x7f,0xc6,0xf0,0xfc,0x0a,0x5d,0x78,0x34,0xde,
    0x84,0xe1,0xf9,0x0d,0x4c,0xe3,0xe8,0x2b,0xb9,0x3e,0xe6,0x55,0x94,0x75,0xfc,0x1d,
    0xfe,0x0a,0x7c,0xab,0x11,0xac,0xef,0x1f,0xf0,0x8d,0xe2,0x9b,0x4a,0x6d,0xbc,0x81,
    0x7a,0x29,0x5a,0x29,0x53,0xdd,0x40,0x3f,0x5d,0xff,0x9b,0xf0,0x65,0x61,0xbe,0x8f,
    0xd2,0xec,0x7c,0x6f,0x06,0x3c,0x2e,0xd0,0x84,0xef,0x16,0xf6,0x8f,0xe4,0xba,0x6d,
    0xc6,0x69,0xae,0x3b,0xc8,0x75,0xdb,0xec,0x9f,0x69,0xe8,0x6a,0xdf,0x05,0xd3,0x15,
    0xc4,0xb9,0x07,0x6d,0xda,0xf0,0xdd,0x33,0x7c,0xff,0x22,0x4f,0x0c,0x7c,0x45,0x86,
    0x4f,0x7c,0xf7,0xb9,0x15,0x81,0xef,0xbe,0xe1,0xfb,0xcf,0x8c,0x53,0x3e,0xd9,0x24,
    0xb9,0xf0,0x29,0x0f,0xe1,0x92,0x56,0x3b,0x89,0xe6,0xf2,0x25,0x93,0xd7,0xa4,0x9f,
    0xf2,0x89,0xa6,0x7c,0x51,0xf2,0x79,0xe2,0xe0,0x8b,0x19,0x3e,0xf1,0xa5,0x70,0x8b,
    0x81,0x4f,0xde,0x95,0x2f,0xd5,0x8c,0x53,0xbe,0x34,0xf0,0xa5,0x1a,0x9e,0x74,0xf2,
    0xba,0xda,0x0f,0x84,0xf8,0x96,0x90,0xd7,0xd2,0x0d,0xdf,0x12,0xc3,0xb7,0x14,0x79,
    0x8a,0xc1,0x57,0x68,0xf8,0xc4,0x97,0xc1,0xad,0x10,0x7c,0x19,0x86,0x2f,0xd3,0x8c,
    0x53,0xbe,0x2c,0xf0,0x65,0x1a,0x9e,0x6c,0xf2,0xba,0xda,0xcb,0x42,0x7c,0xcb,0xc9,
    0x6b,0xd9,0x86,0x6f,0xb9,0xe1,0x5b,0x89,0x3c,0x15,0xe0,0x2b,0x30,0x7c,0xe2,0xcb,
    0xe1,0x56,0x00,0xbe,0x1c,0xc3,0x97,0x6b,0xc6,0x29,0xdf,0x2a,0xf0,0xe5,0x1a,0x9e,
    0x3c,0xf2,0xba,0xda,0xf9,0x21,0xbe,0x87,0xc9,0x6b,0x79,0x86,0x4f,0x34,0x39,0x97,
    0x9a,0xb7,0x00,0xb6,0xae,0x53,0x21,0x6c,0xfd,0xae,0x31,0xd8,0xba,0x0f,0x8b,0x60,
    0xeb,0xb9,0x91,0xe7,0x39,0xcc,0xf7,0x4f,0xec,0x4b,0xbd,0x0b,0xa6,0x4c,0x7d,0x11,
    0xdf,0x24,0xb7,0x29,0xd4,0x83,0x49,0x33,0xb7,0xbf,0x70,0xb6,0xec,0x3d,0xf3,0x37,
    0xf4,0x1d,0x6c,0x49,0x0d,0x7a,0x9b,0xbc,0x36,0x42,0xb3,0x77,0x85,0xc6,0x9a,0x32,
    0x77,0xc5,0x09,0xf2,0xf7,0xbe,0x70,0xc9,0x98,0x49,0x53,0xa3,0x3f,0x85,0xdf,0x99,
    0xb3,0xb4,0x86,0xfc,0xdd,0x3a,0x6a,0xee,0x81,0xb5,0x34,0x7b,0x0f,0xac,0xa1,0xd9,
    0x7b,0xe0,0x71,0xf2,0x3e,0x8d,0xf7,0x04,0x79,0xcd,0xde,0x03,0xeb,0xa0,0xd9,0x7b,
    0x60,0x3d,0xf9,0xbe,0xe2,0x93,0x75,0xd9,0x64,0xf6,0x81,0xf8,0x36,0x70,0xdb,0x84,
    0xf5,0x94,0x77,0xad,0xbb,0xc5,0x88,0xa5,0x39,0xec,0x3d,0xf0,0x34,0x79,0xbf,0xbd,
    0x07,0x36,0x92,0xd7,0x65,0x6d,0x34,0x9e,0x3c,0xb5,0xee,0x96,0x90,0x67,0x99,0x42,
    0xdf,0x0d,0xe0,0x29,0x37,0x3c,0xd2,0xa7,0x94,0x5b,0x39,0xc6,0x97,0x1a,0x9e,0xcd,
    0x86,0x27,0x7c,0x0f,0x94,0x91,0xf7,0xdb,0x7b,0x60,0x0b,0x79,0x5d,0x78,0x34,0x5e,
    0xb9,0xe1,0xa9,0x20,0xcf,0x24,0x8c,0x5b,0x90,0x57,0xef,0x81,0x4a,0xf2,0xfe,0xf0,
    0x3d,0xb0,0x95,0xbc,0xcf,0xd6,0xfc,0xad,0x98,0x47,0x4f,0xa8,0xbe,0xef,0x64,0xbb,
    0x07,0x79,0x77,0x9a,0xf3,0x55,0x47,0xf3,0xeb,0xfb,0x73,0x38,0x5f,0x75,0xe6,0x3c,
    0xed,0x22,0xaf,0xab,0x5d,0x1f,0x3a,0x5f,0x0d,0xe4,0xb5,0x5d,0xe6,0x7c,0x35,0x98,
    0xf3,0xdf,0x48,0x73,0xeb,0x7b,0xb7,0xe1,0x13,0x5f,0x13,0xb7,0x6e,0xf0,0x35,0x19,
    0xbe,0x04,0xcd,0xaf,0xef,0x2f,0x82,0x2f,0x61,0x78,0x9a,0xc9,0xeb,0x6a,0xbf,0x14,
    0xe2,0xdb,0x43,0x5e,0x6b,0x36,0x7c,0x7b,0x0c,0xdf,0xcb,0xa1,0xfa,0xde,0x65,0xf8,
    0xc4,0xd7,0xc2,0xad,0x0b,0x7c,0x2d,0x86,0x6f,0xef,0x02,0xf5,0xfd,0x15,0xf0,0xed,
    0x35,0x3c,0xfb,0xc8,0xeb,0x6a,0xef,0x0f,0xf1,0x1d,0x20,0xaf,0xed,0x33,0x7c,0x07,
    0x0c,0xdf,0x6b,0xa1,0xfa,0xde,0x69,0xf8,0xc4,0xd7,0xca,0xad,0x13,0x7c,0xad,0x86,
    0xaf,0x6d,0x81,0xfa,0x7e,0x10,0x7c,0x6d,0x86,0xe7,0x10,0x79,0x5d,0xed,0xd7,0x43,
    0x7c,0x87,0xc9,0x6b,0x87,0x0c,0xdf,0x61,0xc3,0xf7,0x46,0xa8,0xbe,0x77,0x18,0x3e,
    0xf1,0x1d,0xe1,0xd6,0x01,0xbe,0x23,0x86,0xaf,0x7d,0x81,0xfa,0xfe,0x26,0xf8,0xda,
    0x0d,0xcf,0x51,0xf2,0xba,0xda,0xc7,0x42,0x7c,0xc7,0xc9,0x6b,0x47,0x0d,0xdf,0x71,
    0x9c,0x37,0xcd,0xdb,0x01,0x5b,0xd7,0xa9,0x13,0xb6,0x7e,0xd7,0x2e,0xd8,0xba,0x0f,
    0xbb,0x61,0xeb,0xb9,0xe9,0xc1,0xd9,0xaa,0xa1,0xb9,0xb5,0xbc,0x8a,0xed,0x1a,0xf4,
    0x91,0x77,0x9d,0xc7,0x76,0x9a,0x5f,0xcb,0xab,0xc9,0xeb,0x5a,0xcb,0xdf,0x21,0xaf,
    0xd9,0x5a,0xae,0xb1,0x6a,0x68,0xb6,0x96,0x9f,0x43,0x2d,0x17,0x06,0x19,0x53,0x65,
    0x6a,0xef,0x79,0xf8,0x1d,0xd6,0x7e,0x30,0x74,0xd7,0x5c,0xe0,0x36,0x88,0xfb,0xe1,
    0x02,0x58,0xe4,0x37,0xd7,0x25,0xfc,0xde,0x6a,0xc7,0x6f,0xad,0xaf,0xf0,0xfb,0x61,
    0x3b,0xe7,0x94,0x1a,0x7f,0x19,0xf7,0xc4,0x79,0xf3,0xdb,0xb1,0x99,0xfb,0x5e,0x42,
    0xdf,0xcb,0xe0,0xd5,0xd8,0x83,0xc1,0xff,0x71,0xe4,0x9e,0xe2,0xf6,0x3f,0x8d,0x30,
    0x89,0xe8,0x80,0x11,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//     bool rotateXY;
// } params;
//
// layout(local_size_x = 32, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// shared uint intersectingWidgets[32];
//
// void accumulateWidgets(const uint localId)
// {
//
//     if(localId < 16)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 16];
//         if(localId < 8)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//             if(localId < 4)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//                 if(localId < 2)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                     if(localId < 1)
//                     {
//                         intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                     }
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     intersectingWidgets[localId]= uint(intersects)<< localId;
//     accumulateWidgets(localId);
//     if(localId == 0)
//     {
//         ballot . x = intersectingWidgets[0];
//     }
//
//     return ballot;
//
// }
//
// void main()
// {
//
//     uvec2 outCoord = gl_WorkGroupID . xy;
//     if(params . rotateXY)
//     {
//         outCoord . xy = outCoord . yx;
//     }
//
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(32, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
