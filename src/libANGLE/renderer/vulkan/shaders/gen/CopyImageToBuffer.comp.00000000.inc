// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/CopyImageToBuffer.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kCopyImageToBuffer_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x68,0x9d,0x55,
    0x10,0x86,0xcf,0x77,0xef,0xcd,0x4d,0xd2,0x86,0x36,0xa2,0xbd,0x9a,0xc6,0xa6,0x35,
    0x81,0x66,0x91,0x10,0xba,0xb8,0x2d,0x42,0xad,0xad,0x15,0x62,0x17,0x81,0xfe,0xed,
    0xda,0x45,0x50,0xdc,0x58,0x48,0x29,0x54,0xb2,0x0a,0x24,0x04,0x57,0x89,0x91,0x12,
    0xff,0xb3,0x6f,0x12,0x68,0x77,0x6a,0x2a,0x31,0xd4,0xd2,0xdf,0x4d,0xb5,0x54,0xcc,
    0x42,0x0d,0x14,0xb1,0x62,0xc5,0x08,0xda,0x9a,0x9a,0x44,0xaa,0xce,0x7b,0xbe,0xe7,
    0x84,0xa1,0x81,0x93,0xef,0xcc,0x3b,0x33,0xef,0xcc,0x79,0xef,0x9c,0x53,0x2c,0xb4,
    0xd5,0x86,0x90,0x85,0x75,0xa1,0x2e,0xac,0xcb,0x42,0xfc,0x7b,0x22,0x14,0x82,0xb6,
    0xeb,0x43,0x39,0x7e,0x5f,0xe9,0x39,0xda,0xd3,0x75,0xfa,0xcd,0xd7,0xbb,0xaa,0x3b,
    0x77,0xc8,0xbf,0x21,0x14,0x63,0x9c,0x7c,0x1b,0x2d,0xa6,0xc6,0xbe,0x25,0x5b,0x7d,
    0xaf,0xbe,0x71,0x52,0x78,0xb3,0xad,0x46,0xc3,0x4b,0x91,0x2b,0x18,0x73,0xbe,0x22,
    0x97,0xa1,0xcd,0x91,0x3b,0x84,0x67,0x6d,0x1d,0xb0,0xec,0xad,0x79,0xd9,0xd0,0xc6,
    0x37,0x61,0x19,0x58,0x9d,0xc3,0x0a,0x60,0x0d,0x0e,0x2b,0x82,0x35,0x3a,0xac,0x04,
    0xf6,0x8c,0xc3,0x6a,0xc0,0x7c,0xdd,0x32,0xd8,0xb6,0xd8,0x5b,0x71,0xad,0x86,0xfa,
    0xdc,0x63,0xdf,0x56,0x7a,0x4a,0xf6,0x73,0xce,0x1e,0x21,0xbf,0x04,0xdf,0xe8,0x63,
    0xe7,0x10,0xdf,0x28,0xfd,0x29,0x7e,0xec,0x31,0xbe,0x31,0xf8,0x92,0x2e,0x93,0xe8,
    0xd2,0x64,0xeb,0x49,0xeb,0xa2,0x10,0xfd,0xc5,0x98,0xaf,0x7d,0xc5,0x76,0x65,0x7a,
    0x7d,0xda,0xe2,0x6b,0x5d,0xfd,0x4d,0xf6,0xbf,0x01,0x5f,0xc0,0x5f,0x41,0xa7,0x02,
    0x76,0x13,0x76,0x31,0xc6,0x95,0xc2,0x66,0x6a,0x0b,0xdf,0x8d,0xdd,0x0c,0x26,0xbe,
    0x16,0xf8,0x64,0xb7,0x84,0xfa,0xa8,0x4d,0x25,0xee,0x73,0x9e,0xc4,0x9f,0x96,0x38,
    0x15,0x5f,0x6f,0x6b,0x2b,0x9c,0xdb,0x38,0xa3,0xb0,0x0e,0x38,0x5b,0xe9,0x49,0xf1,
    0x6d,0xf8,0x94,0xff,0x94,0xa1,0xdb,0x89,0x93,0xdd,0xce,0x59,0x52,0x5e,0x07,0xbd,
    0x27,0x7f,0x27,0xbd,0x25,0x7f,0x95,0x78,0xf1,0xee,0x84,0xb7,0x12,0xcf,0x57,0x6f,
    0xbd,0xe4,0x5a,0x31,0xe2,0x6b,0x7f,0x99,0xcb,0x79,0x81,0xfd,0x6e,0x7a,0x97,0xbd,
    0xc7,0xe9,0xb9,0x8f,0xb3,0x17,0x5c,0xcd,0x6e,0x78,0xe5,0xef,0xc1,0x5f,0xc2,0x2f,
    0xfc,0x50,0xcc,0xfe,0x77,0xbf,0xfc,0x47,0x39,0xa7,0xf7,0x1f,0x73,0x67,0x94,0x7d,
    0x3c,0x5a,0x43,0x7b,0x93,0xdd,0x1b,0xed,0xc1,0x97,0xd3,0x99,0x5f,0xb3,0xf5,0x9f,
    0xab,0x7f,0x82,0xfb,0x91,0xec,0x53,0xdc,0x83,0x64,0xf7,0x73,0x07,0x92,0x3d,0xe0,
    0xea,0xcb,0x1e,0xe4,0x5e,0xe8,0xfc,0xc3,0xe8,0xa1,0x3a,0x5b,0x4c,0xe9,0x11,0xf6,
    0x2d,0xcc,0xf1,0x08,0x71,0x6f,0xa3,0xc1,0x28,0x3a,0xc9,0x1e,0x73,0xbf,0xe9,0x19,
    0xf6,0x0d,0xe8,0xf2,0x81,0x7d,0xb7,0x3b,0xdd,0x84,0x9f,0xa5,0xef,0x4e,0x3b,0xa5,
    0xe6,0x6f,0x12,0xec,0x2c,0xbf,0x6b,0xa7,0x4d,0xb7,0xe6,0xbb,0x26,0xcb,0x35,0xf2,
    0x2b,0xf9,0xca,0x59,0xae,0x97,0x5f,0xf2,0x49,0xe7,0xda,0x2c,0xd7,0xca,0xaf,0x5d,
    0x76,0xd2,0x02,0xe7,0x0f,0xcc,0xd2,0xb2,0x21,0x3a,0xff,0xdf,0x66,0x4d,0x81,0xff,
    0x63,0x7b,0xcd,0xde,0x34,0xfe,0xe9,0x38,0x07,0xf9,0xfd,0x19,0xe7,0x8e,0x1c,0xb4,
    0x3a,0x9a,0xad,0x77,0xc1,0xc6,0xdd,0x3c,0xbd,0x64,0x8c,0x9a,0xbf,0xf7,0x98,0xfd,
    0x0e,0xf2,0x15,0xff,0x3e,0xf8,0x79,0x8b,0x91,0x2e,0x1f,0xc2,0x21,0x7c,0xc2,0x62,
    0xa4,0xd3,0x47,0xe0,0xea,0x69,0x02,0xde,0x55,0xf3,0x09,0xff,0x38,0xc6,0xe5,0x7d,
    0x69,0xbf,0x62,0xdf,0x29,0xec,0x09,0x6a,0xeb,0x4e,0x7d,0x42,0xed,0x56,0x6a,0x4b,
    0xf3,0x4f,0xc1,0xcf,0x59,0x8c,0xea,0x7c,0x06,0xd6,0x4e,0xad,0x8b,0xae,0x96,0x7c,
    0x33,0xb6,0x2e,0xc2,0x3d,0x13,0xb9,0xcb,0x91,0xfb,0x82,0x3b,0x57,0xa7,0xe3,0xff,
    0x1c,0xdf,0x61,0xe3,0x97,0x3d,0x8b,0x2e,0xd2,0x64,0x18,0xec,0x0b,0xe2,0x66,0x1d,
    0x36,0x07,0x2e,0xae,0x23,0x56,0xa3,0x82,0x90,0x73,0x68,0x93,0x71,0xce,0xd4,0x8b,
    0xbe,0x4b,0xe8,0x5f,0x97,0xe5,0x31,0x13,0xe4,0xcc,0x38,0xfd,0xbf,0xa4,0xcf,0xaa,
    0xd3,0xff,0x12,0xf8,0x90,0xc5,0xc8,0xbe,0x0c,0xc7,0x25,0x62,0x74,0xf7,0xaf,0x70,
    0xef,0x07,0xb8,0xf3,0xd7,0x88,0xeb,0x65,0xee,0xae,0x13,0x73,0x8d,0x99,0xae,0x3a,
    0xdd,0x6f,0x52,0xb3,0xdb,0xe9,0xf2,0x15,0x78,0xd2,0xfd,0x6b,0xb0,0xa4,0xfb,0x82,
    0xd3,0x5d,0xbe,0x5b,0xb6,0xe6,0x39,0xab,0xf6,0xef,0x58,0x9e,0xea,0xde,0xa6,0xb6,
    0xde,0x94,0x93,0xbc,0x37,0xdf,0x80,0x0f,0xf0,0xbe,0x7c,0x0b,0x26,0xbd,0x16,0xe0,
    0x98,0x8f,0x77,0xb1,0x2e,0x72,0x7c,0xb7,0xf6,0x66,0xe6,0x5c,0xba,0x5f,0xba,0x47,
    0xa9,0xc6,0xf7,0xc4,0xe8,0xdd,0xe9,0x83,0xf3,0x07,0x70,0xcf,0xb9,0xc0,0x6f,0x20,
    0x7f,0x7d,0x96,0xd7,0xbd,0x45,0xac,0xea,0xdd,0x30,0x3e,0xf9,0xee,0xe0,0xd7,0x7d,
    0x4c,0x73,0xf1,0x23,0x78,0x70,0xb3,0xf2,0x13,0x98,0x7a,0xbb,0x0a,0x76,0x17,0xfc,
    0x44,0xd4,0x3a,0xc7,0x7e,0x26,0xff,0xae,0xcb,0xfd,0x85,0xdc,0x82,0xcb,0xbd,0x07,
    0x7e,0xca,0xe5,0xfe,0x4a,0xfe,0x3d,0x97,0xfb,0x1b,0xb9,0x45,0x97,0xbb,0x08,0xde,
    0xef,0x72,0x7f,0x27,0x7f,0xd1,0xfd,0xd6,0x7f,0xf0,0x5b,0x0f,0xb8,0xdf,0xfa,0x4f,
    0xf0,0x14,0x73,0x9f,0x98,0x41,0x17,0xf3,0x00,0x5c,0x31,0x7a,0x73,0xff,0xe2,0x4d,
    0xf1,0x77,0x69,0x09,0xfc,0x2d,0xea,0x3f,0x24,0x6f,0x89,0xd9,0x6d,0x88,0xb3,0x93,
    0xd7,0x7b,0xe8,0xb8,0x96,0xe1,0x6a,0x77,0x5c,0x2b,0xe0,0x29,0x6f,0x95,0xdc,0x15,
    0xee,0xb4,0xde,0xeb,0x47,0xbc,0xe1,0x55,0xfc,0x2f,0x9a,0x22,0x8f,0x38,0xb7,0x7f,
    0x63,0xa6,0x62,0x6c,0x16,0x9e,0xb7,0xf5,0x3f,0x3f,0xf2,0x90,0xc9,0x3c,0x0a,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)uniform texture2D src;
//
// layout(set = 0, binding = 1)buffer dst
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uvec2 srcOffset;
//     int srcDepth;
//
//     bool reverseRowOrder;
//
//     uvec2 size;
//
//     uint outputOffset;
//
//     uint outputPitch;
//
//     bool isDstSnorm;
// } params;
//
//       vec4 getSourceValue()
// {
//     uvec2 coord = gl_GlobalInvocationID . xy;
//     if(params . reverseRowOrder)
//     {
//         coord . y = params . size . y - coord . y - 1;
//     }
//     coord += params . srcOffset;
//
//           vec4 srcValue = texelFetch(src, ivec2(coord), 0);
//
//     return srcValue;
// }
//
// uint convertToDestValue(vec4 srcValue)
// {
//
//     uvec4 normalized;
//     if(params . isDstSnorm)
//     {
//         ivec4 scaled = ivec4(srcValue * 127.0);
//         normalized = uvec4(scaled);
//     }
//     else
//     {
//         normalized = uvec4(clamp(srcValue, 0.0, 1.0)* 255.0);
//     }
//
//     normalized &= 0xFF;
//
//     return normalized . r | normalized . g << 8 | normalized . b << 16 | normalized . a << 24;
//
// }
//
// void outputDestValue(uint destValue)
// {
//     uint offset = params . outputOffset + params . outputPitch * gl_GlobalInvocationID . y + gl_GlobalInvocationID . x;
//     destData[offset]= destValue;
// }
//
// void main()
// {
//     if(any(greaterThan(gl_GlobalInvocationID . xy, params . size)))
//         return;
//
//           vec4 srcValue = getSourceValue();
//     uint destValue = convertToDestValue(srcValue);
//     outputDestValue(destValue);
// }
