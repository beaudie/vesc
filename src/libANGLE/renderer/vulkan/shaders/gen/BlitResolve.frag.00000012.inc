// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x93,0x5b,0x6f,0x92,0x41,
    0x10,0x86,0x17,0xbe,0x72,0x28,0x0a,0xb4,0x40,0x8b,0x44,0x6a,0xb1,0x90,0xd8,0xb4,
    0x15,0x1a,0x95,0x5a,0x50,0x68,0x31,0xb6,0x35,0xa6,0x4a,0x6b,0x8d,0xf1,0x8e,0x34,
    0x96,0xc4,0x26,0x8a,0xa6,0x70,0xe1,0x85,0xf1,0xc2,0xff,0xa0,0x7f,0xc2,0xdf,0x67,
    0x3c,0x24,0x26,0xce,0x7c,0x3c,0xab,0xf3,0x25,0xcb,0xee,0xbc,0xf3,0xce,0xe1,0xdd,
    0x1d,0x82,0x68,0x35,0xe1,0x82,0x88,0x4b,0xb9,0xa4,0x3b,0x76,0xd3,0x6f,0xde,0x45,
    0x5d,0x84,0xfd,0x4b,0xde,0x89,0x6f,0xd6,0x9d,0x1c,0xbd,0x18,0xec,0xbd,0x7c,0x3e,
    0x18,0xbf,0x3e,0x3d,0x1b,0x5e,0x0c,0xc6,0x93,0xe1,0xe8,0xd5,0xf9,0x9b,0xc1,0xf0,
    0xc3,0xfb,0x77,0x17,0x13,0xe1,0x5e,0x72,0xf1,0x30,0xe6,0xe0,0xf0,0xe4,0xb0,0x3e,
    0x9e,0x9c,0xd5,0xef,0x34,0x37,0x35,0x57,0xc6,0x05,0x61,0x4e,0xf5,0x65,0x5d,0xc2,
    0xcd,0xc8,0xae,0xeb,0xed,0xe9,0xf9,0x48,0xf1,0xb4,0xac,0xae,0xac,0x39,0xe1,0x29,
    0x9e,0xd0,0x1c,0x72,0x4a,0x87,0x39,0x35,0xc6,0xb9,0x47,0x2e,0xe6,0xf2,0xf4,0x56,
    0x65,0xf7,0x58,0x04,0x2c,0x69,0xb0,0x28,0xd8,0x9c,0xc1,0x02,0xb0,0x2b,0x06,0x9b,
    0x01,0x2b,0x1b,0x2c,0x06,0x56,0x31,0x58,0x1c,0xac,0x66,0xb0,0x04,0xd8,0xaa,0xc1,
    0x92,0x60,0x1b,0x06,0x9b,0x05,0xdb,0x0c,0x75,0x05,0xff,0xfa,0x53,0x8d,0x5d,0x34,
    0x7e,0xcd,0x4f,0xed,0x9e,0x9c,0x57,0xd0,0xe7,0xed,0xeb,0x68,0xcc,0x4b,0x54,0x34,
    0xb4,0x83,0x50,0x8b,0x9e,0x17,0x84,0x13,0xa7,0x57,0xe5,0x14,0xc5,0x4e,0xd0,0xaf,
    0xfa,0x17,0x85,0x99,0xc2,0xaf,0x3e,0xad,0x95,0x42,0x77,0x45,0x7e,0x2f,0x13,0xa7,
    0xf8,0x3d,0xec,0xb4,0xc9,0x95,0x81,0xef,0x6b,0xe5,0xc8,0xa5,0xdf,0x35,0x61,0xfb,
    0x7b,0xc8,0xb0,0xe2,0xac,0x14,0x7b,0xce,0x2c,0xad,0x57,0xe0,0x3e,0xf2,0xd4,0x2b,
    0x84,0x79,0xa7,0xd8,0x3a,0x5a,0x16,0xc9,0xaf,0xfc,0x22,0xbe,0x84,0xf1,0x97,0xb1,
    0xd5,0xbf,0x84,0x5f,0xf3,0x17,0xa4,0xcb,0x0a,0xbc,0x1c,0xf7,0xe6,0x4c,0xdc,0x1a,
    0xef,0xe3,0xed,0x26,0xb1,0x9a,0xa7,0xc3,0x7c,0xc4,0xe9,0xab,0xc3,0x4c,0x2a,0x56,
    0x12,0xd6,0x0e,0x35,0x22,0xee,0xff,0x17,0x31,0xb6,0xe6,0xd8,0xe5,0xbc,0x43,0x0e,
    0xb5,0x7b,0x60,0x7a,0x97,0x0f,0xc9,0xa1,0x77,0xbf,0x25,0xb3,0x11,0xe5,0xec,0xa8,
    0xf3,0x53,0x10,0x9d,0xbd,0x0e,0xef,0x94,0xe5,0x2d,0xfa,0xa2,0x36,0xc3,0x2c,0x67,
    0x59,0xbe,0xfe,0x88,0xf7,0x9e,0xc7,0xdf,0x93,0x0c,0x45,0x66,0x7c,0x81,0xbb,0xec,
    0xc0,0x29,0x81,0x7f,0x16,0x8e,0xda,0x57,0x89,0x2b,0x11,0xb7,0x14,0xbe,0xe9,0x34,
    0xae,0x4c,0x9c,0xf6,0xbb,0x0c,0xfe,0x4d,0x38,0x15,0xe6,0x73,0x99,0xfb,0xfd,0x21,
    0x9d,0xd7,0xe8,0xe7,0xb7,0xf0,0x57,0xcc,0xff,0x44,0xf5,0xe8,0xf9,0x58,0xe2,0xf4,
    0x5e,0x6f,0x50,0x53,0xbf,0x4f,0xbc,0xc1,0x2a,0xf8,0x33,0xb1,0xb4,0xa7,0xc7,0x60,
    0x9e,0xf7,0x4b,0x72,0xf8,0x5c,0xba,0x7f,0x17,0x96,0xf2,0x9e,0xc2,0x89,0x11,0x53,
    0x35,0x1a,0xd6,0xd1,0xb0,0x66,0x34,0x6c,0x80,0x7b,0x0d,0x37,0xc1,0xbc,0x86,0x86,
    0xd1,0xa0,0xbe,0xba,0xac,0x06,0x75,0xeb,0x46,0xc3,0x2d,0x6a,0x47,0x8c,0x86,0xdb,
    0xe0,0x5e,0xc3,0x13,0x30,0xcf,0x53,0x0d,0x3e,0x57,0xc3,0x68,0xe8,0xc3,0xa9,0x11,
    0x53,0x37,0x1a,0xb6,0xd0,0xd0,0x34,0x1a,0xee,0x82,0x7b,0x0d,0xdb,0x60,0x5e,0x43,
    0xdb,0x68,0x50,0x5f,0x4b,0x56,0x9b,0xba,0x2d,0xe6,0x48,0xeb,0xde,0xa7,0x76,0xdf,
    0xcc,0xaf,0xf6,0xe8,0xb9,0x6d,0xd3,0xe3,0x11,0xbc,0x06,0x71,0x2d,0xfa,0xd1,0x19,
    0x7f,0xc0,0x7c,0x0f,0x84,0xa9,0xb3,0xbd,0x07,0xa6,0x31,0xbb,0xcc,0x9e,0xde,0x9b,
    0xf6,0xbe,0x8f,0x5f,0xbf,0x8f,0xdc,0xdb,0x01,0x78,0x57,0x7a,0xef,0x62,0xff,0x91,
    0x8e,0xb6,0x65,0xfd,0x05,0xb1,0x70,0x2a,0xcf,0x94,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
