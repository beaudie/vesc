// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x08,0xf2,0x10,0x50,0x42,0xc5,0xf2,0x41,0x0f,0x31,
    0xc4,0x42,0x33,0x01,0x95,0x8c,0x24,0xa3,0x54,0x34,0x2b,0xb1,0x08,0x03,0x4b,0x4c,
    0xd3,0x24,0x4d,0xca,0x67,0x0a,0x96,0x56,0x52,0x3e,0x7a,0x89,0x95,0x68,0x25,0x62,
    0xfd,0x17,0xfd,0x45,0x4d,0x8f,0x99,0x66,0xda,0xeb,0xdc,0xdf,0x62,0xbe,0x39,0x63,
    0xc5,0xcc,0x9e,0x73,0xf6,0xb7,0xd6,0xfe,0xf6,0xb7,0x1e,0x67,0x5d,0xd2,0xa9,0x85,
    0xd9,0x28,0x9d,0x17,0x15,0x45,0x85,0xd1,0x2f,0x51,0xee,0x6f,0x46,0x94,0x8a,0xf2,
    0xc2,0xb3,0x38,0xca,0xc4,0xcf,0xf5,0x9d,0x5b,0x3a,0x1b,0x0e,0x0e,0xf6,0x35,0x34,
    0x2d,0x6f,0x34,0x7b,0x69,0x94,0x8e,0xfd,0xcc,0x56,0x16,0x65,0xa3,0xfc,0xf0,0xb4,
    0xb5,0xb7,0x77,0xf7,0x3e,0xc3,0x4b,0xc2,0xba,0x13,0x56,0x79,0xf0,0x33,0x3c,0x6b,
    0x1c,0xe1,0xad,0x24,0xe6,0xb4,0x33,0x51,0xd4,0x11,0x15,0x44,0x95,0xdc,0xb7,0x90,
    0xa7,0x63,0x79,0x60,0x85,0x82,0xa5,0xc0,0xca,0x05,0x4b,0x83,0x55,0x09,0x96,0x0f,
    0x76,0x8f,0x60,0x05,0x60,0x73,0x05,0xcb,0x80,0xdd,0x27,0x58,0x16,0x6c,0x91,0x60,
    0x85,0x60,0x0f,0x0a,0x36,0x0d,0x6c,0x89,0x60,0x45,0x60,0x8d,0x82,0x15,0x83,0x35,
    0x09,0x36,0x1d,0x6c,0xa5,0x60,0x25,0x60,0x2d,0x71,0x9e,0xd2,0x53,0xf1,0x5a,0xce,
    0xd6,0x85,0xe7,0x02,0xf2,0xe3,0xfb,0xf9,0xb2,0xb7,0x3c,0xcf,0x63,0x5f,0x19,0x4e,
    0xa5,0x62,0x7b,0x3a,0xce,0x8d,0xbd,0xcf,0x0c,0x3e,0x19,0xe2,0xb4,0xbc,0x56,0x87,
    0x7d,0x96,0xf8,0x53,0x31,0x9e,0x1f,0xc7,0x98,0x65,0xcd,0x0a,0x27,0x8b,0xf0,0x37,
    0xdf,0x62,0x62,0xcb,0xc7,0x77,0x3a,0x3c,0x86,0x37,0xb3,0x2f,0x11,0xee,0x52,0xfc,
    0xfd,0xee,0x0a,0xb8,0xa2,0x58,0x67,0xf9,0x54,0x9e,0x5d,0x83,0xad,0x8a,0xff,0x59,
    0xee,0x63,0xf7,0x57,0x91,0xff,0x4a,0xee,0xaf,0x8a,0xef,0xc9,0x61,0xf5,0xc4,0x3a,
    0x0b,0x3d,0xe6,0x5f,0x8d,0x2d,0x2b,0xf6,0x5a,0x89,0x67,0x1e,0xf6,0x8a,0xb8,0x8f,
    0x52,0x71,0x6e,0xeb,0xd1,0xed,0x79,0x37,0xbf,0xfb,0x45,0xb3,0xf3,0xd4,0xd3,0x5b,
    0xee,0xbf,0x8c,0x7b,0xdd,0xbe,0x82,0xdc,0x58,0x5e,0x56,0x73,0xd6,0xef,0x5d,0x03,
    0x9f,0xe1,0x35,0x41,0x41,0x1b,0xf6,0x3c,0xee,0x4c,0x3e,0xed,0xcc,0x13,0xbc,0xb7,
    0x11,0xbb,0xed,0xd7,0x81,0xf9,0x9d,0xed,0x89,0xfd,0x06,0xbe,0x13,0x3b,0xff,0x0c,
    0xb1,0x66,0xd0,0xf4,0x1c,0xef,0x69,0xf1,0xef,0xa2,0x76,0xbe,0xdf,0x26,0x31,0x5b,
    0x8c,0x3b,0x12,0xfe,0xbb,0x12,0xb9,0x3d,0xc9,0x37,0xe3,0xfb,0xf3,0x89,0xda,0x5c,
    0xe1,0x1b,0x70,0xbe,0x1b,0xd2,0x87,0x93,0x70,0xaf,0x26,0xbe,0x49,0xe6,0x48,0x3a,
    0xce,0x65,0x41,0xec,0x97,0x4f,0x7c,0x86,0xfd,0x11,0x90,0x02,0x7c,0x0b,0xa5,0xce,
    0xbe,0x9f,0x23,0x7b,0xcb,0xf7,0xda,0xc4,0x7e,0x48,0xf6,0x56,0xdf,0xcb,0xec,0x5b,
    0xe9,0xfb,0x32,0xea,0xb7,0x31,0xa0,0xa5,0xcc,0x9e,0x32,0x96,0xd7,0x66,0x1f,0xdf,
    0xd3,0x0c,0xec,0x6d,0x41,0x51,0x35,0xf3,0x67,0x26,0xbd,0xd8,0x8a,0x4f,0x0d,0xf8,
    0xa9,0xe0,0x63,0xfb,0xd9,0x9c,0xab,0x89,0x63,0x4e,0xc7,0xfa,0x67,0x8b,0xff,0x5c,
    0x62,0x32,0xdb,0x1c,0xf6,0xc6,0x6f,0x3d,0x7b,0x2f,0xfc,0xb5,0xf8,0xfb,0x77,0x66,
    0xf8,0x44,0xf0,0x99,0x2f,0xf3,0xcd,0xfa,0xf8,0xf7,0xc0,0x51,0x87,0xee,0xbf,0x82,
    0xbf,0xcf,0xb9,0x3a,0xf2,0xb8,0x08,0x6e,0xcb,0xc3,0x03,0xe4,0x6e,0x01,0xdc,0x19,
    0xe6,0x9f,0xe1,0xc7,0xd8,0x3f,0x04,0xe6,0x67,0x16,0xcb,0x19,0xd3,0xbb,0x18,0x9f,
    0x3f,0x03,0xb7,0xdf,0x51,0x27,0xfa,0x97,0xa0,0xbf,0x5e,0xf4,0x3f,0x0c,0xee,0xfa,
    0x1b,0xc0,0x5c,0x7f,0xa3,0xe8,0x37,0xdb,0x52,0xe6,0xad,0x71,0x2f,0x15,0x2d,0x8f,
    0xa0,0x65,0x99,0xe8,0x7f,0x14,0xdc,0xf5,0x37,0x81,0xf9,0x99,0xe5,0x72,0xc6,0xf4,
    0x2f,0xc7,0xc7,0xf4,0xfb,0x1d,0x8d,0xa2,0xff,0x31,0xf4,0xaf,0x10,0xfd,0x2b,0xc1,
    0x5d,0xff,0xe3,0x60,0xae,0xbf,0x59,0xf4,0x9b,0x6d,0x55,0xdc,0x7b,0x39,0xee,0x55,
    0x52,0xf7,0x16,0xb4,0x58,0xdf,0xe5,0xfa,0x31,0x87,0xb5,0xc8,0x3c,0xf0,0x9e,0x68,
    0x45,0xa3,0xf3,0x34,0xc3,0x63,0x33,0xe2,0x49,0xe6,0x83,0xf7,0xe4,0x53,0x68,0x6e,
    0x97,0xbb,0xd6,0x83,0xfb,0xbe,0x83,0xbb,0x4f,0xd0,0xa3,0x4f,0xe3,0xd3,0x01,0x8f,
    0xcd,0x90,0x4e,0x78,0x36,0x48,0x7e,0x9f,0x05,0xdf,0x1c,0x7c,0x32,0xb1,0xf6,0xdc,
    0xd9,0x48,0xb0,0x4d,0x60,0x79,0xf1,0x7b,0x26,0x9e,0x3f,0x9b,0xf1,0xdd,0x04,0x87,
    0xdf,0xb1,0x85,0x3b,0xba,0xe4,0x8e,0xad,0xe0,0x3d,0x41,0x99,0xcd,0x88,0xe7,0x89,
    0x71,0x33,0x33,0x64,0x2b,0x79,0x59,0x8b,0xcd,0x6b,0xf5,0x02,0x5c,0xdb,0xa4,0x56,
    0x2f,0x82,0x7b,0xad,0x5e,0x02,0xf3,0x5a,0x75,0x4b,0xad,0xcc,0xb6,0x3d,0xac,0x7e,
    0x72,0xbc,0x5d,0xfa,0xe6,0x65,0xe6,0xca,0x0e,0xd1,0xf9,0x0a,0x78,0x2b,0x73,0xbf,
    0x07,0x9f,0x8d,0x61,0x2a,0x59,0xcc,0xaf,0x82,0xf5,0xc8,0x1c,0x49,0x49,0x4e,0x7a,
    0xe1,0xf0,0x75,0x3a,0xdc,0x65,0xf8,0x4e,0xce,0xf6,0x0a,0xf7,0x6b,0x53,0xdc,0xd3,
    0xe2,0x7d,0x1f,0xd8,0x4e,0x66,0x65,0x81,0xcc,0x78,0xcf,0x4d,0x1f,0x3d,0xd3,0x4d,
    0x3c,0xfd,0x92,0xab,0xd7,0xc9,0xd5,0x2e,0xc9,0xd5,0x1b,0xe0,0x9e,0xab,0xdd,0x60,
    0x9e,0xab,0x3d,0x92,0x2b,0xb3,0x0d,0x84,0xb5,0x07,0xee,0x01,0xc9,0xd5,0x9b,0x77,
    0xc9,0xd5,0x5e,0xf0,0x49,0xb8,0xf7,0x81,0xb5,0xa3,0xd1,0x79,0xec,0xf9,0x5b,0xa8,
    0xbb,0xf9,0xbc,0x85,0x86,0x7e,0xfc,0x07,0xd0,0x71,0x40,0x74,0x98,0xcf,0xfe,0xb0,
    0x0e,0x70,0x7e,0xbf,0xe8,0x78,0xfb,0x2e,0x3a,0x0e,0x82,0x7b,0x5e,0x07,0x13,0x35,
    0x7b,0x07,0x6c,0xf0,0x5f,0x6a,0x76,0x08,0x0e,0x5f,0x23,0xd4,0xec,0x30,0x67,0x0f,
    0x09,0xf7,0xbb,0x89,0x9a,0x1d,0x01,0x3b,0xfc,0x1f,0x35,0x3b,0x42,0x3e,0x3c,0x9e,
    0x03,0x89,0x1a,0x76,0x0b,0xff,0x7b,0xf0,0xfb,0x77,0xf7,0x3e,0x98,0x7e,0x8b,0x47,
    0xc1,0xf2,0x04,0x3b,0x06,0x96,0x12,0xec,0x38,0x58,0x3a,0x8e,0x35,0xf7,0xdd,0x9d,
    0x80,0xf3,0x28,0x67,0x8e,0xa3,0x73,0x08,0x9b,0xf7,0xd2,0x29,0x7a,0xe9,0xa4,0xf4,
    0xd2,0x07,0xe0,0xde,0x4b,0xa7,0xc1,0xbc,0x97,0x86,0xa5,0x86,0x66,0x3b,0x13,0xd6,
    0x39,0x62,0x3c,0x23,0x31,0x8e,0xf0,0xfb,0xed,0x33,0xf2,0x2c,0xd8,0x88,0xfc,0x7f,
    0xe0,0xbe,0x1f,0x4e,0xf9,0xe6,0xf2,0xfd,0x11,0xd8,0x59,0xc9,0x77,0x4a,0xf2,0x3d,
    0x84,0x8f,0xe5,0x77,0x98,0xbb,0xcf,0x49,0x5c,0x1f,0x13,0xd7,0x79,0x89,0xeb,0x13,
    0x70,0x8f,0xeb,0x53,0x30,0x8f,0x6b,0x54,0xe2,0x32,0xdb,0x85,0xb0,0x2e,0xc1,0x7d,
    0x41,0x7a,0xf3,0x33,0xb4,0x6a,0x6f,0x7e,0x0e,0xee,0x3e,0x17,0xf1,0xf1,0xdf,0xda,
    0x8b,0xf8,0x98,0xde,0x51,0x38,0x2f,0xc9,0x2c,0xfd,0x02,0xbd,0x57,0x84,0xf3,0x4b,
    0x70,0x3b,0x7f,0x99,0xbd,0xdb,0xbe,0xe2,0x7f,0xa1,0x5f,0xe9,0x81,0xaf,0xc1,0xba,
    0x24,0xbe,0x6f,0xc0,0xdb,0x89,0x6f,0x4c,0xe2,0x33,0xdb,0xd5,0xb0,0xc6,0xd0,0x72,
    0x55,0xb4,0x5f,0x43,0xbb,0xff,0xce,0x5e,0x93,0x6f,0xdd,0xfd,0xc7,0x44,0xcb,0xb7,
    0x09,0x2d,0xdf,0x81,0xd5,0x8a,0x96,0xef,0xc1,0x5d,0xcb,0xb8,0x68,0x31,0xdb,0xf5,
    0xb0,0xc6,0xe1,0xbe,0x2e,0x5a,0x6e,0xa2,0xe5,0x06,0x5a,0x6e,0x8a,0x16,0xf7,0x1f,
    0x17,0x2d,0x3f,0x24,0xb4,0xfc,0x08,0x76,0x52,0xb4,0xfc,0x04,0xee,0x5a,0x26,0x44,
    0x8b,0xd9,0x6e,0xc5,0xbe,0x39,0xee,0x5b,0xa2,0xe5,0xb6,0xd4,0xdd,0xb4,0xdc,0xe6,
    0x7f,0x47,0xd3,0xe2,0xfe,0x13,0x89,0x1a,0x8f,0x26,0x7a,0x74,0x58,0x7a,0xfe,0x67,
    0xf8,0x8c,0xeb,0x0e,0xfb,0xbf,0xc3,0xd7,0xbe,0x32,0xac,0x7f,0x00,0x13,0x60,0x88,
    0x14,0xf4,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
