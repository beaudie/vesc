// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0x7f,0xe7,0xfc,0xce,0x03,0x42,0x3c,0x08,0x28,0x61,0x61,0x99,0xb2,0xd5,
    0x30,0x38,0x2b,0x32,0x82,0x74,0xc3,0xf4,0xe8,0x8a,0x1e,0x8c,0x96,0x29,0xe5,0x43,
    0xc2,0xd2,0x34,0xb0,0x84,0x55,0xb0,0x0a,0xab,0xad,0x36,0x4a,0x78,0xa1,0x56,0xb0,
    0xc6,0xac,0x15,0x6c,0x0a,0x2f,0x0a,0x66,0x2f,0xdc,0x7c,0xe5,0x9c,0x2b,0x1b,0x69,
    0x0f,0x7f,0x49,0xeb,0x61,0x6b,0xeb,0xba,0xee,0xf3,0xb9,0xdc,0xb5,0xb3,0x9a,0x6e,
    0xf7,0x7e,0xe7,0xfe,0x5e,0x4f,0xdf,0xef,0x75,0x5f,0xf7,0x2d,0x71,0x72,0x6d,0x36,
    0x8a,0x12,0x51,0x69,0x54,0x12,0xfd,0x16,0x15,0xfe,0x2d,0x8f,0x92,0x82,0x14,0xbe,
    0xf7,0xc9,0xb7,0x2c,0xca,0x84,0xfd,0xb6,0xae,0xee,0xae,0xe6,0x63,0x83,0xbd,0xcd,
    0xad,0x0f,0xe4,0xd4,0xaf,0x22,0x8a,0x83,0xbf,0xda,0x2a,0xa3,0x6c,0x94,0x92,0xaf,
    0xae,0x57,0xf6,0x1f,0xea,0x57,0xbc,0x5c,0xd6,0x77,0xb2,0xaa,0xc4,0x4f,0xf1,0xac,
    0xe6,0x90,0x5f,0xe5,0x21,0xa7,0xc6,0x44,0xd1,0xf6,0x28,0x1d,0xd5,0x50,0x77,0x2d,
    0x5f,0xc3,0x12,0x60,0x25,0x0e,0x4b,0x82,0x55,0x39,0x2c,0x06,0xab,0x75,0x58,0x0a,
    0xec,0x56,0x87,0xa5,0xc1,0x6e,0x77,0x58,0x06,0xec,0x4e,0x87,0x65,0xc1,0xd6,0x39,
    0xac,0x04,0xec,0x6e,0x87,0x2d,0x03,0x5b,0xef,0xb0,0x52,0xb0,0x9c,0xc3,0xca,0xc0,
    0x5a,0x1d,0x76,0x0b,0x58,0x9b,0xc3,0xca,0xc1,0x1e,0x0e,0x7d,0x8a,0x6f,0xe8,0xd5,
    0x9e,0x6d,0x91,0xef,0x5d,0xf4,0xc7,0xf6,0x6b,0xdc,0x5e,0xfb,0xbc,0x9a,0x7d,0x8d,
    0x44,0x25,0x83,0x3d,0x0e,0xbd,0xd1,0xdf,0x2b,0xc4,0x27,0x83,0x4e,0xed,0x6b,0x9d,
    0xec,0xb3,0xe8,0x57,0xfb,0x4a,0xf1,0x2c,0xc5,0xae,0xb6,0x32,0xb4,0xa4,0x02,0x96,
    0x0a,0x7c,0x13,0x68,0xe9,0x60,0x5f,0xee,0x72,0x55,0xe0,0x6f,0xb5,0xaa,0xc9,0x15,
    0x05,0x5e,0x55,0x37,0xfa,0x6a,0x35,0x75,0x55,0xdf,0x64,0x99,0x8f,0xd6,0xaf,0xa5,
    0xdf,0x35,0xd4,0xaf,0x0d,0x75,0x0a,0x58,0x13,0xda,0x56,0xc2,0x47,0xfd,0xeb,0xb0,
    0x65,0x9d,0xbd,0xc1,0xe9,0x59,0x8d,0xbd,0x3a,0xcc,0x4d,0x32,0xf4,0xb2,0x09,0xde,
    0xd6,0x67,0x8b,0x6b,0x62,0x76,0x6c,0xbf,0x01,0xed,0xaa,0x7b,0x13,0x3c,0x35,0x6f,
    0xbd,0x64,0xec,0x64,0x9f,0x20,0x47,0xf1,0xf7,0x36,0xe9,0xf3,0x66,0xf9,0x76,0xc2,
    0xe3,0x11,0xf0,0xcd,0xe8,0xd2,0xfd,0x96,0xa2,0xfa,0xf9,0xa2,0x7d,0x17,0x33,0xaf,
    0xf1,0x8f,0xa3,0x23,0x03,0x9f,0x1d,0x9c,0x43,0xcc,0x7e,0x27,0xb6,0xd8,0xc5,0xf7,
    0x70,0x4e,0xb6,0xdf,0x87,0x8f,0xed,0x8f,0x16,0xf5,0x6d,0x8c,0xf9,0xb7,0xfd,0xe9,
    0xa2,0xbe,0x9f,0x61,0x9e,0x95,0xcf,0x79,0x6a,0x6d,0x42,0xcf,0x79,0xde,0x80,0x38,
    0xf4,0x2d,0x1d,0xea,0xa6,0xd0,0xa3,0xd8,0x9f,0x82,0x68,0x6f,0x37,0x32,0x73,0x95,
    0xf4,0xf6,0x49,0x61,0x50,0xc1,0x3d,0xaf,0x64,0x59,0x1f,0xfb,0x99,0xdd,0xe5,0xd8,
    0x3b,0x25,0x43,0x1d,0x77,0x7d,0x05,0x73,0xb0,0x11,0x9f,0x7a,0xf0,0x77,0xc5,0x47,
    0xf7,0xab,0x88,0xab,0x27,0x4e,0xe7,0xe0,0x0e,0xe2,0x1a,0x88,0xb3,0xd9,0x55,0xfc,
    0xac,0xf8,0xac,0x71,0x6f,0x84,0xce,0xc6,0x1f,0xc2,0xbc,0x11,0x3e,0x7f,0x8b,0xbf,
    0xbd,0x15,0x8d,0xe8,0xd1,0xdf,0x3b,0x24,0x2e,0xc3,0x7b,0xb1,0x0a,0xdf,0xb7,0xe9,
    0xd7,0x3d,0xe0,0x4f,0xcb,0x4e,0x39,0x5d,0x00,0x33,0xbf,0xbf,0x24,0x87,0xe5,0xd2,
    0xef,0xef,0xe2,0xa5,0x7e,0x3f,0xe0,0x93,0x26,0x66,0x9d,0xd3,0xb0,0x1e,0x0d,0x4d,
    0x4e,0xc3,0xbd,0xe0,0xa6,0xa1,0x19,0xcc,0x34,0xe4,0x9c,0x06,0xb5,0xb5,0xf0,0x6e,
    0x69,0xdd,0x16,0xa7,0xe1,0x7e,0x6a,0x27,0x9c,0x86,0x56,0x70,0xd3,0x70,0x11,0xcc,
    0xfc,0x54,0x83,0xe5,0xca,0x39,0x0d,0x57,0xf1,0x69,0x24,0xa6,0xc5,0x69,0x78,0x10,
    0x0d,0x1b,0x9c,0x86,0x36,0x70,0xd3,0xf0,0x10,0x98,0x69,0xe8,0x70,0x1a,0xd4,0xd6,
    0x1e,0xe6,0xae,0x50,0xb7,0x9d,0x39,0xca,0x86,0x7c,0x85,0xda,0x57,0xdd,0x5d,0x54,
    0x8e,0xe6,0xdb,0xe1,0x38,0xfe,0x88,0x5f,0x8e,0xb8,0x76,0xf8,0xe8,0x1d,0xdd,0xca,
    0xfd,0xb4,0x99,0xdb,0x06,0xe7,0xbc,0x9b,0xb9,0xed,0xe0,0xa3,0xcc,0xdc,0xa3,0x60,
    0x9a,0x77,0x80,0xb7,0xf2,0x31,0x70,0xcd,0xa3,0x77,0xf8,0x09,0xf2,0x74,0x91,0x27,
    0x13,0xb8,0x17,0x70,0x8d,0xd1,0x3b,0xfd,0x14,0x98,0x9e,0x4b,0x69,0xe8,0x7d,0x21,
    0x4f,0xe4,0xb0,0x6e,0xb0,0x44,0xf0,0xcf,0x84,0xf7,0xe0,0x19,0x7c,0xbb,0xc9,0xd1,
    0x2b,0xf9,0xf4,0xfd,0x79,0x16,0x3d,0x2f,0x49,0xac,0xbe,0x13,0xcf,0x81,0xe5,0xa9,
    0xa9,0xb1,0xbb,0xc0,0x3f,0x14,0x1f,0xdd,0xef,0x26,0xdf,0x2e,0xc7,0xfd,0x79,0xb8,
    0xf7,0x38,0xee,0x2f,0x80,0x1b,0xf7,0x3d,0x60,0x3b,0xa5,0x23,0xfa,0x36,0xec,0xa5,
    0xf6,0x6e,0xb8,0xee,0x71,0x73,0xb0,0x9f,0x7c,0xfb,0xdc,0x1c,0xbc,0x08,0x6e,0x73,
    0x70,0x00,0xcc,0xe6,0xa0,0xcf,0xcd,0xc1,0x81,0xa0,0x51,0x6b,0x17,0xce,0xb6,0xd7,
    0xcd,0xf2,0x41,0x6a,0xc7,0xa1,0x97,0x25,0x41,0xf7,0xcb,0x60,0x7b,0xdd,0x1b,0x93,
    0xa4,0x7f,0x6a,0x3f,0x4c,0x9c,0xad,0xf7,0xe9,0xd7,0x11,0x62,0x0f,0x87,0x5c,0xcb,
    0x82,0xae,0x7e,0xf2,0x1c,0xe1,0x9d,0x4b,0xbb,0xf7,0x57,0xe7,0xad,0x0f,0x4e,0x03,
    0x4e,0xef,0xab,0xe8,0x3d,0xea,0xf4,0xbe,0x06,0x6e,0x7a,0x8f,0x81,0x99,0xde,0x21,
    0xa7,0x57,0x6d,0x83,0xb2,0x86,0xc8,0x3d,0xe8,0xf4,0xbe,0xee,0xf4,0xce,0x91,0xeb,
    0x0d,0xf0,0x3c,0x9c,0x2c,0x6e,0x88,0x3b,0xa0,0x3e,0x6f,0x52,0x73,0x00,0xff,0x41,
    0xea,0x8e,0xb8,0xba,0xea,0x33,0x2c,0x6b,0x84,0xf8,0x61,0x57,0xf7,0xad,0xff,0xe8,
    0xf3,0x3b,0x37,0xe9,0xf3,0x28,0x71,0xb6,0x3e,0xa0,0xcf,0xc7,0x89,0x1d,0x75,0x7d,
    0x7e,0x8f,0x3c,0xc7,0xff,0xa7,0xcf,0xc6,0x69,0x04,0x4d,0x1a,0xf3,0x13,0x31,0x43,
    0xc4,0x0f,0x17,0x9d,0x49,0x9f,0xf3,0x5d,0xe2,0x2c,0x7b,0x89,0x1b,0x71,0xe7,0xf5,
    0x11,0xe7,0x35,0xe6,0xce,0xeb,0x63,0x70,0x3b,0xaf,0x13,0x60,0x76,0x5e,0x13,0xae,
    0x6f,0x6a,0x1b,0x97,0x75,0x8a,0xba,0xe3,0x4e,0xd7,0x49,0x6a,0x2f,0xa1,0x2b,0x4b,
    0x8f,0x4c,0xd7,0x04,0x31,0xa7,0x1c,0x9f,0x4f,0xe0,0x73,0xda,0xf1,0xf9,0x14,0xdc,
    0xf8,0x7c,0x06,0x66,0x7c,0xa6,0x1c,0x1f,0xb5,0x4d,0xca,0x9a,0x26,0xf7,0xa4,0x3b,
    0xc7,0xcf,0xe1,0x12,0xf3,0xd6,0x2b,0xc7,0x4b,0x0e,0xb7,0x77,0x74,0x8a,0xd8,0x69,
    0xf7,0x2e,0x7c,0x01,0xaf,0x33,0xee,0x5d,0xf8,0x12,0xfc,0x32,0xf9,0xbf,0x02,0xeb,
    0x71,0x5c,0xbf,0x06,0xcf,0xc3,0x75,0xd6,0x71,0x55,0xdb,0x8c,0xac,0x59,0xea,0xcd,
    0x38,0x5e,0x97,0x89,0x59,0x72,0xff,0x07,0x99,0xdf,0xac,0x3b,0xdb,0x6b,0xf8,0x4c,
    0x13,0x33,0xe3,0xf8,0x9c,0x85,0x4f,0x83,0xe3,0x73,0x0e,0xdc,0xf8,0xcc,0x3b,0x3e,
    0xe7,0xc2,0xbd,0x8a,0x02,0xa6,0x75,0xe6,0x1c,0x9f,0x2b,0xc4,0x5c,0xe3,0x0c,0x95,
    0x8f,0xf9,0xcd,0x3b,0x3e,0xd7,0xf1,0x99,0x25,0x66,0xce,0xf1,0xf9,0x06,0x3e,0x63,
    0x8e,0xcf,0xb7,0xe0,0xc6,0x67,0xd1,0xf1,0x51,0xdb,0x82,0xac,0x45,0xea,0x2c,0x38,
    0x3e,0xdf,0xf3,0xb7,0xd1,0x75,0x37,0x4f,0xe6,0xb7,0xe8,0xf8,0xfc,0x8a,0xcf,0x3c,
    0x31,0x0b,0x45,0x67,0x3c,0xe5,0x7c,0x7f,0x61,0x1e,0x26,0x89,0x5b,0x2c,0x9a,0xd3,
    0x09,0xe7,0xfb,0x33,0xf3,0x3d,0x4e,0xdc,0x54,0xf8,0x3b,0x31,0x0e,0x7f,0x1f,0xaa,
    0xed,0x1f,0x39,0xb5,0x36,0x59,0xff,0x02,0x1a,0x59,0x2f,0x8f,0x94,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
