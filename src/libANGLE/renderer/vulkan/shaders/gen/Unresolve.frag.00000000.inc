// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Unresolve.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kUnresolve_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0xcd,0x73,0x12,0x41,
    0x10,0xc5,0x87,0x5d,0x04,0x21,0x1f,0xa0,0x7c,0x04,0x4d,0x80,0x60,0x40,0xc1,0x05,
    0x04,0x5d,0x62,0xaa,0x2c,0xbd,0x7a,0xc9,0xcd,0xbf,0x20,0x96,0x17,0x0f,0xe6,0x12,
    0xff,0x78,0x2f,0x56,0xd9,0x3d,0xfb,0xeb,0xaa,0x76,0x0e,0x49,0xd5,0xd4,0xce,0x7b,
    0xfd,0x5e,0xef,0x4b,0xcf,0x0e,0x79,0x76,0xd5,0x0c,0xa1,0x16,0xda,0xe1,0x69,0xb8,
    0x09,0xd5,0xdf,0xb3,0x90,0x09,0x53,0x3d,0x97,0xf2,0x3c,0x0a,0x8d,0x88,0xbf,0xde,
    0x7e,0xbb,0xdd,0x3e,0xfc,0xfe,0xb1,0x2d,0x0f,0x3b,0xd5,0x9d,0x86,0x3c,0xea,0xb5,
    0xd6,0x09,0x27,0xa1,0x2e,0x4f,0x5d,0xbf,0xee,0x7e,0xde,0x2b,0xdf,0x92,0x35,0x90,
    0x35,0x91,0x35,0x97,0xa5,0xbd,0xd6,0xb2,0xd4,0x5c,0xca,0xea,0x8a,0x5f,0xf5,0x4d,
    0xed,0x2d,0xbb,0x16,0xda,0x00,0x3e,0x96,0xe7,0xab,0x04,0xcf,0x12,0x5c,0x38,0x6c,
    0xef,0xaa,0x81,0x47,0x89,0x7f,0x84,0xdf,0xd7,0x0b,0x87,0x27,0xf8,0x33,0xf0,0x2c,
    0xf1,0xcf,0xf0,0xfb,0x7a,0xe1,0xf0,0x1c,0x7f,0x0e,0x5e,0x24,0xfe,0x05,0x7e,0x5f,
    0x2f,0x1c,0x5e,0xe2,0xaf,0x83,0x57,0x89,0x7f,0x85,0xdf,0xd7,0x0b,0x87,0xd7,0xf8,
    0x9f,0x80,0x37,0x89,0x7f,0x83,0xdf,0xd7,0x0b,0x87,0x77,0xf8,0x1b,0xe0,0x7d,0xe2,
    0xdf,0xe3,0xf7,0xf5,0xc2,0xe1,0x12,0xbf,0x9d,0xe7,0x21,0xf1,0x1f,0xf0,0xfb,0x7a,
    0x01,0xee,0xc9,0x14,0xb3,0x58,0xcf,0xe3,0x3c,0x74,0x3f,0x94,0x9d,0xf6,0xbe,0x94,
    0x75,0x26,0xfa,0x26,0xef,0xaa,0x47,0xae,0x2e,0x5f,0x6c,0x35,0x3b,0xe5,0x3f,0x81,
    0x5b,0x70,0x2f,0x64,0xd7,0x46,0xdf,0x08,0xff,0xff,0x65,0x3c,0xb5,0xc7,0x11,0xfb,
    0x36,0x3d,0x14,0x1f,0xc3,0x0d,0x04,0x9f,0xf2,0xfe,0x5a,0xcc,0x5a,0xe1,0x0e,0x75,
    0xcd,0xd4,0x8d,0xf7,0xa0,0xea,0xb9,0x96,0x49,0x76,0xe3,0xbd,0xa9,0x34,0x1d,0x34,
    0x3d,0x34,0x96,0xbb,0x4f,0xc6,0x1e,0xef,0xec,0x73,0x4f,0x2c,0xf7,0x10,0xfd,0x63,
    0xb9,0xcf,0xd8,0x0f,0xe9,0xa1,0x78,0xe4,0x72,0x9f,0x93,0xdb,0x72,0x5e,0xc8,0xf3,
    0xdc,0x65,0x18,0xf3,0xbe,0x0b,0xfc,0x63,0xf7,0xed,0x6a,0x86,0x29,0xfa,0xc7,0x32,
    0x58,0xff,0x29,0x3d,0x2e,0xdd,0xfd,0xb4,0xf3,0x98,0xd3,0xd3,0x66,0xbb,0x70,0xf5,
    0x3e,0xbf,0x09,0xb9,0xfb,0x1f,0x56,0xae,0x3e,0xe6,0xf7,0x22,0x77,0xfd,0x37,0x49,
    0xff,0x5d,0xd2,0x7f,0x9f,0xf4,0x2f,0x93,0xfe,0x07,0xea,0xd7,0x72,0x56,0x19,0xf3,
    0x08,0x68,0xfe,0x08,0xa3,0x77,0xe1,0xb3,0xb0,0xfa,0x3d,0x9c,0xf0,0x2d,0x7c,0x17,
    0x56,0xbf,0xb1,0xe7,0x70,0x7a,0xbe,0x5f,0xc4,0xd1,0x82,0x53,0xfd,0x30,0xce,0xad,
    0x3a,0x03,0xd5,0xeb,0xd9,0xbe,0x84,0x33,0xfd,0x00,0x4e,0xf5,0x53,0xee,0xc6,0x0c,
    0xbd,0x9e,0xc3,0x15,0x9c,0xe9,0x27,0x70,0x96,0xe7,0x35,0xf3,0xb3,0x3c,0x6f,0xe0,
    0x4c,0x3f,0x87,0xb3,0x3c,0x6f,0x99,0xa7,0xe5,0x29,0xe0,0x4c,0xbf,0x84,0xb3,0x3c,
    0x5b,0xe6,0x6b,0x79,0xde,0xc1,0x99,0x7e,0x0d,0x67,0x79,0xde,0x33,0x6f,0xcb,0xf3,
    0x01,0xce,0xf4,0x3b,0x38,0xcb,0x73,0xcd,0xfc,0x2d,0xcf,0x47,0x38,0xd3,0x97,0x70,
    0x7f,0xe5,0xb6,0xdd,0xc8,0xfa,0x07,0xab,0xec,0x5e,0x87,0x9c,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
// layout(input_attachment_index = 0, set = 0, binding = 0)uniform subpassInput colorIn0;
// layout(input_attachment_index = 1, set = 0, binding = 1)uniform isubpassInput colorIn1;
// layout(input_attachment_index = 2, set = 0, binding = 2)uniform usubpassInput colorIn2;
// layout(input_attachment_index = 3, set = 0, binding = 3)uniform subpassInput colorIn3;
// layout(input_attachment_index = 4, set = 0, binding = 4)uniform isubpassInput colorIn4;
// layout(input_attachment_index = 5, set = 0, binding = 5)uniform usubpassInput colorIn5;
// layout(input_attachment_index = 6, set = 0, binding = 6)uniform subpassInput colorIn6;
// layout(input_attachment_index = 7, set = 0, binding = 7)uniform isubpassInput colorIn7;
//
// void main()
// {
//     colorOut0 = subpassLoad(colorIn0);
//     colorOut1 = subpassLoad(colorIn1);
//     colorOut2 = subpassLoad(colorIn2);
//     colorOut3 = subpassLoad(colorIn3);
//     colorOut4 = subpassLoad(colorIn4);
//     colorOut5 = subpassLoad(colorIn5);
//     colorOut6 = subpassLoad(colorIn6);
//     colorOut7 = subpassLoad(colorIn7);
//
// }
