// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000048.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000048[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x59,0x6c,0x95,0x45,
    0x14,0xc7,0x67,0xee,0xed,0x46,0x59,0xac,0xb2,0x48,0xa1,0x31,0xad,0x2c,0x82,0xd4,
    0x82,0x88,0x05,0x29,0x97,0x16,0x41,0xda,0x40,0xa5,0x2c,0xd1,0x04,0x44,0x10,0x42,
    0x50,0x64,0x77,0x8b,0x10,0xc1,0x42,0x45,0x69,0x8c,0x10,0x1e,0x7c,0x00,0x15,0x12,
    0x5f,0x78,0x50,0x09,0x2a,0x3c,0x08,0x28,0x8d,0x21,0x60,0x94,0x9a,0x28,0x4d,0x94,
    0x1a,0x78,0xf4,0xc9,0x48,0x24,0x22,0x55,0x23,0x3a,0x67,0xe6,0x77,0xda,0x63,0xe3,
    0x42,0x32,0xf9,0xbe,0xf3,0x3f,0xfb,0x7f,0xce,0xcc,0x77,0x4b,0x36,0x33,0xa2,0xd0,
    0x39,0xef,0x8a,0x5d,0x91,0x9b,0xef,0x5d,0xfc,0x77,0xb3,0xcb,0x38,0x79,0xed,0xeb,
    0x0a,0xe2,0xb3,0xbe,0x71,0x51,0x63,0xd5,0xd3,0xcf,0xac,0xaa,0x9a,0x74,0xef,0x04,
    0xd1,0x0f,0x70,0xd9,0x68,0x27,0xba,0x9b,0x5c,0xa1,0xcb,0x0b,0x4f,0x59,0xeb,0x57,
    0xac,0xd9,0x20,0xf8,0xe8,0xb0,0x2e,0x87,0x55,0x12,0xec,0x04,0x2f,0x94,0x18,0xe1,
    0x6d,0x74,0x8c,0x29,0x3e,0xce,0x35,0xb8,0x7c,0x57,0x99,0xd2,0xb9,0x11,0x3c,0x15,
    0xf3,0x60,0x45,0x06,0xcb,0x80,0x95,0x18,0x2c,0x0b,0x36,0xc8,0x60,0x79,0x60,0x43,
    0x0d,0x96,0x0f,0x56,0x66,0xb0,0x02,0xb0,0x72,0x83,0x15,0x82,0x8d,0x34,0x58,0x11,
    0xd8,0x18,0x83,0xf5,0x01,0xab,0x34,0x58,0x31,0xd8,0x04,0x83,0xf5,0x05,0x9b,0x64,
    0xb0,0x7e,0x60,0x53,0x0c,0xd6,0x1f,0x6c,0x5a,0xe4,0x29,0xdb,0xdd,0xaf,0x70,0xb6,
    0x34,0x3c,0x6f,0x87,0x1f,0x95,0x2b,0x8c,0x2c,0x3c,0xdf,0x86,0x3c,0x30,0x78,0x65,
    0xa2,0x3e,0x1b,0xb9,0x91,0xf7,0x21,0xe1,0xad,0x80,0x3e,0xc7,0x05,0xfb,0x02,0xf2,
    0x7d,0x7f,0x64,0x54,0x6e,0x50,0xb0,0x18,0x60,0x70,0xe1,0xec,0x48,0xfd,0x8a,0x9c,
    0xca,0xc2,0xd7,0x81,0xfd,0xa5,0x75,0x83,0x83,0x5c,0x4e,0x0c,0xd9,0x9b,0x5b,0x83,
    0x5c,0x81,0x9c,0x41,0x1e,0x09,0xa7,0x79,0x11,0xcf,0x73,0xa3,0xb0,0x15,0xbc,0x06,
    0x79,0xb4,0xf1,0xbf,0x03,0x7b,0xf1,0x97,0xf8,0xe3,0x88,0xe7,0x62,0x3f,0x25,0x91,
    0x83,0x0a,0x56,0x79,0x77,0xfd,0xff,0xbd,0xca,0xbb,0x9f,0x79,0xee,0x2e,0xf6,0xa9,
    0x92,0xfc,0x22,0x57,0x81,0x8d,0xa3,0x9f,0xf1,0xd4,0x23,0xf6,0x13,0xd0,0x55,0x18,
    0x7d,0xb5,0xe9,0x67,0x72,0xb7,0x6f,0xd2,0xcb,0x73,0x2a,0xf5,0xaa,0xfd,0x4c,0x66,
    0x4d,0xe5,0x79,0x70,0x2d,0xfd,0x3e,0x8c,0xaf,0xc4,0x2b,0x0d,0x91,0x16,0x23,0x73,
    0xe4,0xba,0xcf,0x93,0xca,0xc3,0xc3,0xbe,0x2d,0x09,0xcf,0xc5,0xe4,0x7f,0x04,0x7c,
    0x09,0xfd,0x88,0xbc,0xb4,0x57,0xfe,0x65,0xbd,0xe4,0xd5,0xf0,0x2b,0xfe,0x8f,0x53,
    0x7f,0xb9,0xd1,0xaf,0x63,0x0f,0xa4,0xbe,0xe7,0xa8,0x27,0x6b,0xf4,0xdb,0x39,0x13,
    0x2a,0x1f,0x60,0xa6,0x55,0x3e,0xca,0xf9,0x50,0xf9,0x64,0x2f,0x7e,0xcf,0x32,0xef,
    0x3a,0x4f,0x5f,0x9a,0xfa,0x44,0xfe,0x2e,0x4a,0xcd,0xb5,0x52,0xdf,0x25,0x72,0xeb,
    0xbc,0x5c,0xe2,0x0e,0xc9,0x1a,0xfb,0xa9,0x81,0x9c,0x1d,0xcd,0xcd,0x35,0x95,0xa1,
    0xaa,0x68,0xe7,0x13,0x66,0x97,0xda,0x4e,0x0b,0xef,0x1b,0x0f,0x3f,0x55,0xab,0x72,
    0x2e,0xc8,0xfb,0x5a,0x0e,0xe6,0xaa,0xc3,0x0e,0x65,0xd8,0x07,0x47,0xfc,0xae,0x80,
    0xc8,0xbe,0xe5,0x98,0xe3,0x31,0xcc,0x6a,0x53,0xc8,0x23,0x73,0x3a,0x16,0x6c,0x8c,
    0xd9,0xa7,0x0d,0x9c,0x81,0x3b,0xd1,0xcf,0x08,0x11,0x64,0x86,0xee,0x66,0xce,0xc6,
    0x13,0x4f,0x6c,0x26,0x82,0xef,0x0c,0x36,0x22,0xdf,0x83,0xdf,0x44,0xfc,0x26,0x73,
    0x1f,0x54,0x31,0x73,0x39,0xe6,0xeb,0x3e,0xf0,0x77,0x82,0xcd,0x80,0xc8,0x4b,0xc2,
    0x64,0xee,0xae,0x87,0xca,0x73,0xd4,0xf3,0x5b,0xb0,0xaf,0xe1,0xfe,0xc8,0xd1,0x8f,
    0xbc,0x2f,0x08,0x7e,0xb2,0x0f,0x75,0xe4,0x74,0x71,0x4f,0xd3,0xde,0xcc,0x00,0x5f,
    0x18,0xd8,0x89,0x67,0xcc,0x27,0x4c,0xed,0x7e,0x0d,0x31,0x34,0x96,0x3c,0xaf,0x05,
    0x2e,0xc4,0x6e,0xba,0x4f,0x36,0xf9,0xf8,0x4c,0x33,0x3d,0xcc,0xa2,0x87,0x99,0xa6,
    0x87,0x07,0xc0,0xb5,0x87,0xd9,0x60,0xda,0x43,0x83,0xe9,0x61,0x76,0xbc,0xd3,0x5c,
    0xc4,0x24,0x6f,0xbd,0xe9,0x61,0x2e,0xb9,0xbd,0xe9,0xa1,0x11,0x5c,0x7b,0x18,0xe1,
    0x13,0xa6,0x76,0xd2,0x83,0xc6,0x6a,0x30,0x3d,0xd4,0xfa,0x64,0x93,0xc3,0xa7,0xde,
    0xf4,0xd0,0x44,0x0f,0xf3,0x4c,0x0f,0xf3,0xc1,0xb5,0x87,0x05,0x60,0xda,0xc3,0x22,
    0xd3,0xc3,0x82,0x58,0x8f,0x8b,0x98,0xe4,0x5d,0xc8,0x1c,0x49,0xde,0x87,0xc8,0x5d,
    0xeb,0x7b,0xce,0xb9,0xd4,0xa8,0xb6,0x8b,0x4c,0x8d,0x75,0xd8,0x35,0xe0,0xb7,0x90,
    0x7a,0xe4,0xfc,0x3f,0xca,0xd9,0xd7,0x99,0x5b,0x4e,0xcd,0xcb,0xcc,0xcc,0x3d,0x06,
    0xde,0xcc,0xcc,0xad,0x04,0xab,0xf3,0xc9,0x4f,0xee,0x83,0x27,0xf0,0x5b,0x8d,0x9f,
    0x70,0xba,0x06,0x7c,0x55,0x90,0xe5,0xee,0x79,0x92,0x7c,0xcb,0x43,0x5d,0x72,0x87,
    0xad,0x05,0x5b,0xc9,0xfc,0xac,0x31,0xdc,0xad,0x27,0xde,0x3a,0xc3,0xdd,0x06,0x70,
    0xe5,0x6e,0x23,0x98,0x72,0xb7,0xd9,0x70,0x27,0xba,0x4d,0x61,0x6d,0x83,0x8f,0x6d,
    0x26,0xf6,0x8b,0xc4,0xde,0x6e,0x62,0x37,0x83,0x6b,0xec,0x1d,0x60,0x1a,0xbb,0xc5,
    0xc4,0xde,0x11,0xcf,0x9f,0x8b,0x98,0xc4,0xde,0xc9,0x6c,0x49,0x9c,0x5d,0xf4,0x25,
    0x77,0xc1,0xbb,0xc4,0x7a,0x19,0x7c,0x2a,0x7b,0xa4,0x7e,0x2d,0xec,0x91,0xd8,0xbc,
    0x42,0xce,0x6d,0xd8,0xef,0x24,0x6f,0xab,0xc9,0x2b,0x36,0xbb,0xc3,0x6a,0xc5,0x7f,
    0xb7,0xc9,0xfb,0xaa,0xc9,0xdb,0x14,0x6e,0x52,0xb9,0x83,0x5f,0x03,0x5b,0x6b,0xee,
    0x9a,0x4c,0x9c,0xb7,0x82,0xa8,0xdf,0x83,0x9f,0xae,0x97,0x43,0x2c,0xc1,0xf7,0xe2,
    0xbb,0x27,0xc6,0xea,0x13,0xf7,0x6a,0x1f,0x71,0xf6,0x72,0xdf,0xe5,0x73,0xdf,0x67,
    0xe9,0x49,0x6b,0x6a,0xa5,0x27,0xf1,0x99,0xe9,0x93,0x4f,0x0b,0xfe,0xbb,0xb1,0xdd,
    0x8c,0xed,0x26,0x53,0xff,0xb3,0xff,0x50,0xff,0xf3,0xff,0x53,0xff,0x16,0xfc,0x74,
    0xbd,0x44,0xfd,0x5b,0xf1,0xdd,0x62,0xea,0x7f,0x81,0x38,0x5b,0xff,0xa5,0x7e,0xad,
    0x69,0xb3,0xa9,0xff,0x7e,0x9f,0x7a,0x68,0xc5,0x7f,0x53,0x5c,0xe9,0x5e,0x7f,0x1d,
    0xfd,0xae,0x10,0x49,0xe4,0xfd,0x60,0x35,0xbe,0x67,0xce,0xde,0x60,0xce,0x0e,0x98,
    0x39,0x7b,0x13,0x5c,0xe7,0xec,0x2d,0x30,0x9d,0xb3,0x43,0x66,0xbf,0x45,0x77,0x30,
    0xac,0x43,0xd4,0x76,0x10,0xbe,0xa4,0xee,0xb7,0xc9,0xe9,0xf0,0xeb,0xe2,0xfd,0xf7,
    0xf0,0x2e,0xb1,0x7e,0xc0,0x47,0x9e,0xa7,0xc8,0xf5,0x23,0x7e,0xfd,0xf1,0xb9,0x6e,
    0x72,0x89,0xee,0x4a,0x58,0x57,0xf1,0xbb,0x1a,0xe7,0x31,0xe5,0xfa,0x19,0xbf,0xa1,
    0x2e,0xf5,0x5b,0x10,0x39,0x4a,0xb8,0x7c,0x1b,0xfb,0x05,0xbe,0x04,0xfb,0x85,0x3d,
    0x1a,0x86,0xbe,0x0c,0x6e,0xbb,0x88,0x79,0xc5,0xf8,0xff,0x44,0x4c,0xf9,0x96,0x5a,
    0x1b,0xa9,0xe9,0xcf,0x10,0xa5,0x0b,0xec,0x1a,0xb1,0x67,0xf9,0x14,0xff,0x2a,0xbe,
    0x57,0xb8,0xab,0x85,0xfb,0xb1,0x3e,0xe9,0x95,0x0f,0xe5,0xe8,0x30,0x1c,0x79,0xfa,
    0x2d,0xf6,0x7f,0xe7,0xe8,0x06,0x39,0x6f,0x18,0x8e,0xc4,0xf8,0xb0,0xe1,0xa8,0x8f,
    0xef,0xe1,0x48,0x74,0x3e,0xac,0x3c,0x9f,0xfc,0xe4,0xa9,0x1c,0x15,0xe0,0x67,0x39,
    0x2a,0xf4,0x09,0xb7,0x1c,0x15,0xf9,0x1e,0x8e,0x44,0xaf,0x1c,0x15,0x13,0xd3,0xfb,
    0x1e,0xff,0x2c,0x31,0x95,0x23,0xb5,0x91,0x9a,0x94,0x23,0xc1,0x94,0xa3,0xd9,0x3e,
    0xc5,0x97,0xba,0xb2,0xd4,0xaa,0x1c,0x55,0xfa,0xa4,0x1f,0x4b,0x7e,0xe5,0xe8,0x3d,
    0x38,0xca,0xd0,0x6f,0x59,0x2f,0x8e,0x4a,0xc8,0x29,0x4f,0xe5,0xe8,0x16,0x9f,0xfc,
    0x94,0xa3,0xe1,0x86,0x23,0xd1,0x0d,0x0c,0x6b,0x08,0x7e,0x43,0x0c,0x47,0x43,0xf1,
    0xb3,0x1c,0x95,0xfa,0x84,0x5b,0x8e,0x86,0x19,0x8e,0x4a,0x0d,0x47,0x65,0xc4,0x1c,
    0x68,0x38,0x1a,0x4c,0x4c,0xe5,0x48,0x6d,0x86,0x1b,0x8e,0xca,0x0c,0x47,0x0d,0x3e,
    0xc5,0x97,0xba,0x06,0x53,0xab,0x72,0x34,0xde,0x27,0xbd,0x70,0x95,0x21,0xa7,0x9e,
    0xbd,0x43,0xcc,0xa2,0xd8,0xcd,0x61,0xd6,0x36,0xe3,0x53,0x66,0xce,0xfc,0xfb,0x9c,
    0xf9,0xa3,0xe6,0xcc,0x7f,0x00,0xae,0x67,0xfe,0x43,0x30,0x3d,0xf3,0xc7,0xcd,0x39,
    0x14,0xdd,0xb1,0xb0,0x4e,0x90,0xf7,0x84,0xf9,0x6e,0x9d,0x22,0xf6,0x49,0x13,0xfb,
    0x63,0x70,0x8d,0xfd,0x09,0x98,0xc6,0x6e,0x33,0xb1,0x45,0x77,0x3a,0xac,0x33,0xc4,
    0x3e,0xe3,0x7a,0xbe,0xdf,0xe7,0x88,0x7d,0xd6,0x7c,0xbf,0x3f,0x03,0x3f,0xc7,0xef,
    0xa6,0xcf,0xc1,0x56,0x9b,0x7c,0x5f,0x80,0x2f,0x23,0x5f,0xbb,0xc9,0x27,0xba,0xf3,
    0x61,0xb5,0x93,0xef,0xbc,0x39,0xb3,0x93,0x7c,0xfa,0x0d,0x3f,0xc7,0xfc,0xbe,0x52,
    0xbb,0x76,0xc3,0xf5,0x5c,0x9f,0x6c,0xce,0xe0,0x73,0xde,0xd4,0xf3,0x15,0xf5,0x54,
    0x9b,0x7a,0xbe,0x06,0xd7,0x7a,0x3a,0x4c,0x3d,0xa2,0xbb,0x10,0x56,0x07,0x79,0x2e,
    0x98,0x7a,0xaa,0xa9,0x67,0xae,0xd9,0x7b,0xb5,0xeb,0x30,0xf5,0x34,0xfa,0x64,0xd3,
    0x8e,0xcf,0x05,0x53,0xcf,0x37,0xd4,0x73,0xd4,0xd4,0xf3,0x2d,0xb8,0xd6,0xd3,0x69,
    0xea,0x11,0xdd,0xc5,0xb0,0x3a,0xc9,0x73,0xd1,0xd4,0x33,0xc5,0xa7,0xbf,0x69,0x24,
    0x9f,0x7e,0xa3,0xd4,0xae,0xd3,0xd4,0xd3,0xe4,0x93,0x4d,0x07,0x3e,0x17,0xb1,0x6d,
    0xc3,0xf6,0xb4,0x39,0xeb,0x9f,0xc2,0x77,0xd6,0xe4,0x99,0xe8,0x7b,0x70,0xd7,0xcb,
    0xb7,0xcd,0xe4,0x99,0xe7,0x53,0xae,0x4e,0x7c,0x4e,0x63,0x7b,0x1c,0xdb,0x63,0x7c,
    0x6b,0xc5,0xf6,0x23,0xe2,0xc9,0xd2,0xff,0xb3,0xc9,0x98,0x6f,0xad,0xfa,0x1c,0x37,
    0xf1,0x1f,0xf4,0x29,0x47,0x1b,0xfe,0x12,0x6f,0x7a,0xf0,0xb8,0x8c,0xee,0x8f,0x30,
    0x25,0x53,0xc2,0xfa,0x0b,0xff,0x11,0x87,0x6a,0x64,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2DMS src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
