// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x54,0x49,0x4f,0x94,0x41,
    0x10,0xed,0xfa,0x66,0x18,0x05,0x19,0xc1,0xb8,0x45,0xd0,0x89,0x2c,0x0a,0x08,0x8c,
    0x10,0xc1,0x18,0x36,0x37,0x46,0xd4,0x01,0x83,0x81,0x60,0xf0,0xa6,0x78,0x11,0x9c,
    0x89,0x51,0x8f,0x1e,0x3c,0x18,0x7f,0x00,0x47,0xff,0x81,0xa8,0xb8,0x10,0x5c,0x08,
    0x01,0xff,0x80,0x17,0xb7,0x0b,0x31,0x21,0x24,0x84,0x84,0xab,0xa2,0x2c,0x31,0x58,
    0xd5,0xfd,0x1a,0xca,0x19,0x49,0x9a,0xfe,0xea,0x75,0xd5,0xab,0xa5,0x5f,0x4f,0x28,
    0x28,0xdb,0x62,0x0c,0x99,0x3c,0xb3,0xd5,0x5c,0x25,0x63,0xff,0x76,0x98,0xc0,0xc8,
    0xe7,0x36,0x13,0xb1,0x7b,0x47,0x67,0x4f,0x67,0xfc,0xee,0xbd,0x1b,0xf1,0x86,0xc6,
    0x3a,0x39,0xdf,0x6e,0x42,0xd6,0x4f,0xce,0x0a,0xd8,0x27,0x87,0xf7,0x30,0xaf,0xd4,
    0xb5,0x9b,0x69,0xc1,0x8b,0x79,0x15,0x32,0x1e,0xb6,0x5c,0xee,0xcc,0xaf,0x0e,0xfe,
    0x5f,0x6c,0xb9,0x8d,0xd9,0xcf,0xeb,0x3c,0x47,0x97,0xbb,0xb4,0xa6,0x0c,0xbb,0xc7,
    0x08,0x58,0xbe,0xc2,0x02,0x60,0x85,0x0a,0x0b,0x01,0xd3,0x7c,0x61,0x60,0x07,0x15,
    0x96,0x03,0xac,0x5c,0x61,0x11,0x60,0x95,0xb6,0xb6,0xd0,0x46,0x0e,0xa9,0xb3,0x8b,
    0xf7,0x52,0xd4,0xe4,0xed,0x12,0x65,0x0f,0x22,0x3e,0x0c,0xbe,0xa1,0x8c,0x3e,0x84,
    0x6f,0x08,0xf5,0x89,0x7f,0x2a,0x83,0x2f,0x05,0x3e,0x82,0x3d,0x85,0xb9,0xec,0xe3,
    0xb5,0x93,0xab,0x08,0xec,0x79,0xc8,0xc6,0xcb,0xf7,0x6e,0xf6,0x89,0xa0,0x27,0x03,
    0x3b,0x1f,0xb6,0x70,0xec,0x65,0x3b,0x8a,0x79,0x85,0x60,0x17,0xa0,0xc6,0x90,0xf5,
    0x0b,0x9b,0xa2,0x8d,0x7b,0x33,0xa6,0x19,0x76,0x31,0xb0,0x6a,0xf0,0xc7,0x90,0x6f,
    0x0f,0x47,0x95,0x80,0x5f,0xb8,0x4a,0x51,0xaf,0xe7,0x2e,0x03,0x77,0x60,0x63,0x72,
    0xed,0xec,0x4a,0x81,0x45,0xb1,0x47,0xd4,0x8c,0x25,0xff,0x21,0xde,0x73,0x71,0x07,
    0xcd,0xb0,0x0f,0x03,0xab,0x46,0x3f,0x15,0xb8,0x2b,0xf1,0xaf,0xc4,0x59,0x44,0xd5,
    0x57,0xab,0xea,0x15,0xff,0x3a,0xdc,0x81,0x3f,0x6f,0xc4,0x7c,0xbc,0xdd,0x84,0x9a,
    0xbd,0xdd,0xa2,0xfc,0x25,0x3e,0x81,0x1e,0x24,0xdf,0x39,0xe4,0x8b,0xda,0x7b,0xc8,
    0x35,0x49,0xd5,0xa3,0xfe,0x0b,0x30,0x27,0x89,0xe9,0x04,0x96,0x44,0x4f,0x62,0x77,
    0x01,0x93,0x39,0x75,0x2b,0x9d,0xf8,0x1a,0xfa,0xa1,0x61,0x5f,0xc3,0x00,0x7a,0x3a,
    0xc0,0x95,0x7a,0x5d,0xc5,0xa0,0x9f,0x41,0xe4,0xb9,0x85,0xbc,0x43,0xc8,0x23,0x76,
    0x0a,0x98,0xe7,0x49,0x23,0xaf,0xf8,0xdf,0xc1,0x99,0x9e,0xdd,0x30,0xf4,0x21,0xe7,
    0x4f,0xd1,0xab,0xdc,0xd9,0x2e,0xf6,0x1c,0x45,0xbd,0x2f,0x78,0x1f,0x55,0x33,0x13,
    0xff,0x71,0xd8,0x35,0xcc,0x22,0xda,0x99,0xc2,0x1c,0xfd,0x3a,0xce,0x37,0x16,0xa0,
    0x47,0x03,0xdf,0x65,0x46,0xe4,0x1e,0x7f,0xb3,0x35,0x0d,0x7c,0x8d,0xbf,0xe5,0x7e,
    0x3e,0xe0,0x5c,0xf6,0x56,0xe8,0xf4,0x09,0xb4,0x78,0x1b,0x5a,0x1b,0x01,0x76,0x9a,
    0x59,0xa4,0xd6,0x67,0xd0,0x4a,0x1a,0x31,0xe2,0xf3,0x1c,0xf8,0x14,0xfb,0x48,0xdd,
    0x2f,0x11,0x27,0xf8,0x63,0xf6,0x91,0x3e,0x5e,0x01,0x97,0x3a,0xc6,0x50,0xc7,0x2a,
    0x9f,0x09,0xfe,0x9a,0xd7,0x18,0x6a,0x91,0xef,0x15,0xde,0xa7,0x61,0x8f,0x21,0xb7,
    0x68,0xf0,0x0d,0x72,0x8f,0x23,0xb7,0xcc,0xf2,0x2d,0xf0,0x11,0xf6,0x91,0x3c,0xef,
    0x80,0xb5,0x20,0xd7,0x84,0xca,0x25,0x67,0xef,0x79,0x4d,0x82,0x5b,0xbe,0xef,0xe3,
    0xbd,0x7e,0x44,0x9f,0x97,0x99,0x47,0x78,0x7f,0xc0,0x0e,0x54,0xfe,0x9f,0xc8,0x5f,
    0xa1,0xf2,0x2f,0x01,0x7f,0x88,0xb8,0x5f,0x88,0x5d,0x52,0x5c,0xcb,0xe0,0x22,0xc5,
    0xb5,0x02,0xae,0x3a,0xc5,0xb5,0x0a,0xdc,0x73,0xad,0x21,0x76,0x55,0x71,0xfd,0x01,
    0x97,0x51,0x7e,0xeb,0xc0,0x45,0xcf,0x0f,0x80,0x49,0xb2,0x75,0xbc,0xbb,0x47,0xc0,
    0x88,0x1c,0xde,0xa2,0xfc,0xc2,0xe4,0x6a,0x5e,0x53,0x58,0x84,0x1c,0x2e,0xfe,0x52,
    0xaf,0x7d,0x8f,0xe4,0xea,0x4d,0xa0,0x5e,0x99,0x59,0x1e,0x39,0x5c,0xe2,0xec,0x6f,
    0x1e,0xb9,0x39,0x0a,0x2e,0x3e,0xf2,0x16,0xa3,0xe4,0xde,0xe1,0x75,0xf6,0x91,0x37,
    0x58,0x40,0x0e,0xcb,0xa7,0xcd,0x59,0x7c,0xc2,0x2c,0x06,0xd4,0x2c,0x3e,0x03,0xf7,
    0x7d,0x7f,0x41,0xac,0x51,0xd8,0x57,0x60,0xa4,0xb0,0x6f,0xc0,0xdc,0xbd,0x45,0xec,
    0xfb,0x9b,0xc1,0x1b,0x4d,0xa3,0xb7,0x36,0xd6,0xc5,0x0c,0x38,0x7d,0xcf,0xdf,0x71,
    0x56,0xab,0xe2,0x66,0x55,0x9c,0x9c,0x4b,0xdc,0x2c,0xf2,0xfa,0xb8,0x39,0xc4,0xc5,
    0x54,0xdc,0xbc,0x8a,0x9b,0x43,0xdc,0x3c,0x6a,0xf3,0x71,0x0b,0x88,0x6b,0x52,0x71,
    0x8b,0x2a,0x6e,0x01,0x71,0x8b,0x98,0x85,0xbc,0x89,0x09,0xe8,0x76,0x52,0xe9,0xb6,
    0x88,0xfe,0xd5,0x6d,0x2b,0x65,0xeb,0xb6,0x8d,0xb2,0x75,0x7b,0x92,0x1c,0xee,0x35,
    0x74,0x8a,0x5c,0xac,0xe0,0x9e,0xeb,0x0c,0x65,0xeb,0xf6,0x2c,0x65,0xeb,0xb6,0x9d,
    0x1c,0xee,0xb9,0x12,0xe4,0x62,0xdb,0x15,0x57,0x07,0x65,0xeb,0xf6,0x02,0x39,0x7c,
    0x58,0xcd,0xe5,0x22,0x39,0x5c,0xeb,0x36,0x49,0x0e,0xd7,0xba,0xbd,0x44,0xae,0xe6,
    0x04,0x6d,0x62,0xdd,0xe4,0xf0,0xa4,0xd2,0x6d,0xcf,0x7f,0x74,0xdb,0x4b,0x0e,0xf7,
    0xba,0xed,0x23,0x37,0xc7,0x5e,0xa5,0xdb,0x2b,0x19,0xba,0xed,0x27,0x87,0xf5,0xa9,
    0x9e,0xaa,0xc8,0xe1,0x46,0xdd,0xe1,0x11,0xda,0xbc,0xc3,0x6e,0x68,0x4d,0xb0,0x2a,
    0x55,0x67,0x0d,0xb9,0xb3,0x5a,0x75,0x6f,0x71,0x70,0x91,0xe2,0x3a,0xaa,0xb8,0x6a,
    0xc0,0x25,0x58,0x5c,0x71,0xd5,0x83,0x2b,0xa6,0xb8,0x8e,0x81,0x4b,0xbf,0x81,0x06,
    0xc5,0x55,0x0f,0x2e,0xc1,0xc4,0x57,0x6b,0x6b,0x22,0xe3,0xf7,0x77,0xda,0xfe,0xb6,
    0x90,0x39,0xc1,0xeb,0x2f,0x6e,0x54,0x65,0x33,0xa8,0x0a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 4, local_size_y = 4, local_size_z = 4)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform uimage3D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 16;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= v . r;
//     destData[destOffset + 1]= v . g;
//     destData[destOffset + 2]= v . b;
//     destData[destOffset + 3]= v . a;
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint pixelBytes = 12;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     destData[destOffset]= v0 . r;
//     destData[destOffset + 1]= v0 . g;
//     destData[destOffset + 2]= v0 . b;
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
