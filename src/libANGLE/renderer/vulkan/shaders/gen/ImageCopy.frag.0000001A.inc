// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xd9,0x4f,0x5d,0x55,
    0x14,0xc6,0xcf,0xbd,0xe7,0x0e,0x14,0x64,0x28,0xd0,0x22,0x55,0xaa,0x1d,0x48,0x34,
    0x54,0xb8,0x2a,0x56,0x04,0xdb,0x84,0x5a,0x69,0xa3,0x38,0x54,0x8c,0xb5,0x45,0x3b,
    0x58,0x88,0x69,0x23,0x28,0x6d,0x85,0xa8,0xe0,0x40,0xd5,0xf8,0x82,0x0a,0x2f,0xb6,
    0x2a,0xc4,0x90,0x6a,0x14,0x8c,0xc2,0x83,0x42,0xea,0x83,0x89,0x2f,0x1a,0x63,0xb4,
    0x06,0x5b,0x87,0xff,0xc3,0x38,0x24,0x26,0xae,0xb5,0xcf,0x6f,0x35,0x2b,0x37,0x9a,
    0xde,0x64,0xe7,0xdc,0xfd,0xad,0xe9,0xfb,0xd6,0x5e,0x67,0xdf,0x1b,0xa7,0x37,0xe5,
    0xa3,0x28,0x15,0x95,0x46,0x25,0xd1,0x6f,0x51,0xf2,0x59,0x1d,0xa5,0x05,0x49,0x9e,
    0x37,0xc9,0xb3,0x2c,0xca,0x85,0xfd,0xae,0xee,0x9e,0xee,0xe6,0x13,0x27,0xfb,0x9a,
    0x5b,0x6f,0x29,0xa8,0x5f,0x45,0x14,0x07,0x7f,0xb5,0x55,0x46,0xf9,0x28,0x23,0x4f,
    0x5d,0x03,0x87,0x8f,0x0e,0x2a,0x5e,0x2e,0xeb,0x0b,0x59,0x55,0xe2,0xa7,0x78,0x5e,
    0x73,0xc8,0xb7,0xf2,0x90,0x53,0x63,0xa2,0x68,0x77,0x94,0x8d,0x6a,0xa8,0xbb,0x89,
    0xa7,0x61,0x29,0xb0,0x12,0x87,0xa5,0xc1,0xaa,0x1c,0x16,0x83,0xd5,0x3a,0x2c,0x03,
    0x76,0xa5,0xc3,0xb2,0x60,0x57,0x3b,0x2c,0x07,0x76,0xad,0xc3,0xf2,0x60,0x9b,0x1d,
    0x56,0x02,0x76,0x9d,0xc3,0x56,0x81,0x6d,0x71,0x58,0x29,0x58,0xc1,0x61,0x65,0x60,
    0xad,0x0e,0xbb,0x02,0xac,0xcd,0x61,0xe5,0x60,0xb7,0x87,0x3e,0xc5,0x97,0xf4,0x6a,
    0xcf,0x76,0xca,0x73,0x23,0xfd,0xb1,0xfd,0x06,0xb7,0xd7,0x3e,0xaf,0x67,0x5f,0x23,
    0x51,0xe9,0x60,0x8f,0x43,0x6f,0xf4,0xfb,0x1a,0xf1,0xc9,0xa1,0x53,0xfb,0x5a,0x27,
    0xfb,0x3c,0xfa,0xd5,0xbe,0x56,0x3c,0x4b,0xb1,0xab,0xad,0x0c,0x2d,0x99,0x80,0x65,
    0x02,0xdf,0x14,0x5a,0x3a,0xd8,0x97,0xbb,0x5c,0x15,0xf8,0x5b,0xad,0x6a,0x72,0x45,
    0x81,0x57,0xd5,0xa5,0xbe,0x5a,0x4d,0x5d,0xd5,0x97,0x59,0xe6,0xa3,0xf5,0x6b,0xe9,
    0x77,0x0d,0xf5,0x6b,0x43,0x9d,0x04,0x6b,0x42,0xdb,0x5a,0xf8,0xa8,0x7f,0x1d,0xb6,
    0xbc,0xb3,0x37,0x38,0x3d,0xeb,0xb1,0x57,0x87,0xb9,0x49,0x87,0x5e,0x36,0xc1,0xdb,
    0xfa,0x6c,0x71,0x4d,0xcc,0x8e,0xd9,0x6f,0xa4,0x8e,0xd9,0xb7,0xd2,0x0b,0xed,0xc3,
    0x76,0x72,0x6a,0x9d,0x7a,0xa9,0xd0,0xc9,0x3e,0x45,0xce,0xe2,0xe7,0x55,0xd2,0xf7,
    0x1d,0xf2,0xec,0x84,0xd7,0x1d,0xe0,0x3b,0xd0,0xa9,0xfb,0x9d,0x45,0x7c,0xba,0x8a,
    0xf6,0xdd,0xbc,0x03,0x1a,0x7f,0x0f,0xba,0x72,0xf0,0xd9,0xc3,0xb9,0xc4,0xec,0xf7,
    0x62,0x8b,0x5d,0x7c,0x2f,0xe7,0x66,0xfb,0x43,0x2e,0xfe,0x18,0xfc,0xbd,0xff,0xf1,
    0xa2,0xbe,0x4e,0xf0,0x7e,0xd8,0xfe,0x4c,0xd1,0xb9,0x9c,0x65,0xde,0x95,0xdf,0x39,
    0x72,0x6d,0x47,0xdf,0x39,0xee,0x88,0x38,0xf4,0x31,0x1b,0x78,0x64,0xd0,0xa7,0xd8,
    0x9f,0x82,0x68,0xef,0xb7,0x31,0x93,0x95,0xf4,0xfa,0x3e,0x61,0x50,0xc1,0x3d,0x50,
    0xc9,0xb2,0xbe,0x0e,0x32,0xdb,0xab,0xb1,0x77,0x4a,0x86,0x3a,0xee,0x82,0x35,0xcc,
    0xc9,0x36,0x7c,0xea,0xc1,0xc7,0xc5,0x47,0xf7,0xeb,0x88,0xab,0x27,0x4e,0xe7,0xe4,
    0x1a,0xe2,0x1a,0x88,0xb3,0xd9,0x56,0x7c,0x5e,0x7c,0x36,0xb8,0x3b,0x44,0x67,0xe7,
    0x0f,0x61,0xde,0x08,0x9f,0xbf,0xc5,0xdf,0xee,0x92,0x46,0xf4,0xe8,0xf7,0x3d,0x12,
    0x97,0xe3,0x3e,0x59,0x87,0xef,0xf3,0xf4,0xeb,0x7a,0xf0,0x07,0x64,0xa7,0x9c,0xbe,
    0x04,0x33,0xbf,0xbf,0x24,0x87,0xe5,0xd2,0xe7,0xef,0xe2,0xa5,0x7e,0x3f,0xe0,0x93,
    0x25,0x66,0xb3,0xd3,0xb0,0x05,0x0d,0x4d,0x4e,0xc3,0x0d,0xe0,0xa6,0xa1,0x19,0xcc,
    0x34,0x14,0x9c,0x06,0xb5,0xb5,0x70,0xaf,0x69,0xdd,0x16,0xa7,0xe1,0x66,0x6a,0xa7,
    0x9c,0x86,0x56,0x70,0xd3,0xf0,0x15,0x98,0xf9,0xa9,0x06,0xcb,0x55,0x70,0x1a,0xce,
    0xe3,0xd3,0x48,0x4c,0x8b,0xd3,0x70,0x2b,0x1a,0xb6,0x3a,0x0d,0x6d,0xe0,0xa6,0xe1,
    0x36,0x30,0xd3,0xd0,0xe1,0x34,0xa8,0xad,0x3d,0xcc,0x5d,0x52,0xb7,0x9d,0x39,0xca,
    0x87,0x7c,0x49,0xed,0xf3,0xee,0xdd,0x54,0x8e,0xe6,0xdb,0xe1,0x38,0xfe,0x88,0x5f,
    0x81,0xb8,0x76,0xf8,0xe8,0x3b,0x7b,0x27,0xef,0xab,0xcd,0xdc,0x2e,0x38,0x77,0xb9,
    0x99,0xdb,0x0d,0xfe,0x22,0x33,0x77,0x17,0x98,0xe6,0x7d,0x92,0xbb,0xf4,0x6e,0x70,
    0xcd,0xa3,0xef,0xf4,0xbd,0xe4,0xe9,0x26,0x4f,0x2e,0x70,0x4f,0x70,0x8d,0xd1,0x77,
    0xfc,0x7e,0x30,0x3d,0x97,0xd2,0xd0,0xfb,0x24,0x4f,0xe4,0xb0,0x1e,0xb0,0x54,0xf0,
    0xcf,0x85,0xfb,0xe1,0x41,0x7c,0x7b,0xc8,0xd1,0x27,0xf9,0xf4,0x3e,0x7a,0x08,0x3d,
    0x8f,0x4b,0xac,0xde,0x1b,0x0f,0x83,0x75,0x51,0x53,0x63,0xf7,0x81,0xbf,0x26,0x3e,
    0xba,0xdf,0x4f,0xbe,0x7d,0x8e,0xfb,0x23,0x70,0xef,0x75,0xdc,0x1f,0x05,0x37,0xee,
    0x07,0xc0,0xf6,0x4a,0x47,0xf4,0x6e,0x38,0x48,0xed,0xfd,0x70,0x3d,0xe0,0xe6,0xe0,
    0x30,0xf9,0x0e,0xb9,0x39,0x78,0x0c,0xdc,0xe6,0xe0,0x08,0x98,0xcd,0x41,0xbf,0x9b,
    0x83,0x23,0x41,0x63,0x14,0x0d,0x71,0xb6,0x7d,0xf4,0x47,0xf3,0x1c,0xa5,0x76,0x1c,
    0x7a,0x59,0x12,0xee,0xbf,0x27,0xc0,0x0e,0xba,0x3b,0x26,0x4d,0xff,0xd4,0x3e,0x40,
    0x9c,0xad,0x97,0x25,0xd7,0xb1,0x70,0x0f,0x25,0xb1,0x03,0x21,0xd7,0xaa,0xa0,0xeb,
    0x29,0xf2,0x0c,0x72,0xcf,0x65,0xdd,0x7d,0xac,0xf3,0xd6,0x0f,0xa7,0x21,0xa7,0xf7,
    0x04,0x7a,0x8f,0x3b,0xbd,0x27,0xc1,0x4d,0xef,0xd3,0x60,0xa6,0x77,0xc4,0xe9,0x55,
    0xdb,0xb0,0xac,0x11,0x72,0x0f,0x3b,0xbd,0xcf,0x38,0xbd,0x1f,0x93,0xeb,0x59,0xf0,
    0x8d,0x70,0xb2,0xb8,0x11,0xde,0x01,0xf5,0x79,0x8e,0x9a,0x43,0xf8,0x0f,0x53,0x77,
    0xcc,0xd5,0x55,0x9f,0x51,0x59,0x63,0xc4,0x8f,0xba,0xba,0x2f,0xfc,0x47,0x9f,0x5f,
    0xba,0x4c,0x9f,0xc7,0x89,0xb3,0xf5,0x2a,0x7d,0x3e,0x45,0xec,0xb8,0xeb,0xf3,0x2b,
    0xe4,0x39,0xf5,0x3f,0x7d,0x36,0x4e,0x63,0x68,0xd2,0x98,0x9f,0x88,0x19,0x21,0x7e,
    0xb4,0xe8,0x4c,0xfa,0x9d,0xef,0x0a,0x67,0xd9,0x47,0xdc,0x98,0x3b,0xaf,0xd7,0x39,
    0xaf,0x09,0x77,0x5e,0x6f,0x80,0xdb,0x79,0xbd,0x09,0x66,0xe7,0x35,0xe5,0xfa,0xa6,
    0xb6,0x49,0x59,0xa7,0xa9,0x3b,0xe9,0x74,0xbd,0x45,0xed,0x15,0x74,0xe5,0xe9,0x91,
    0xe9,0x9a,0x22,0xe6,0xb4,0xe3,0xf3,0x36,0x7c,0xce,0x38,0x3e,0xef,0x80,0x1b,0x9f,
    0x77,0xc1,0x8c,0xcf,0x8c,0xe3,0xa3,0xb6,0x69,0x59,0xb3,0xe4,0x9e,0x76,0xe7,0xf8,
    0x1e,0x5c,0x62,0xee,0x7a,0xe5,0xf8,0x8d,0xc3,0xed,0x1e,0x9d,0x21,0x76,0xd6,0xdd,
    0x0b,0xef,0xc3,0xeb,0xac,0xbb,0x17,0x3e,0x00,0xff,0x9a,0xdf,0x96,0x0f,0xc1,0x7a,
    0x1d,0xd7,0x8f,0xc0,0xbb,0xe0,0x3a,0xef,0xb8,0xaa,0x6d,0x2e,0xf8,0x26,0xf5,0xe6,
    0x1c,0xaf,0x6f,0xd1,0xb7,0xe2,0x7e,0x83,0xcc,0x6f,0xde,0x9d,0xed,0x05,0x7c,0x66,
    0x89,0x99,0x73,0x7c,0x3e,0x81,0x4f,0x83,0xe3,0xf3,0x29,0xb8,0xf1,0x59,0x74,0x7c,
    0xd4,0xb6,0x20,0x6b,0x91,0x3a,0x0b,0x8e,0xcf,0x77,0xf0,0xb9,0xc0,0x19,0x2a,0x1f,
    0xf3,0x5b,0x74,0x7c,0x2e,0xe2,0x33,0x4f,0xcc,0x82,0xe3,0xf3,0x19,0x7c,0x26,0x1c,
    0x9f,0xcf,0xc1,0x8d,0xcf,0xb2,0xe3,0xa3,0xb6,0x25,0x59,0xcb,0xd4,0x59,0x72,0x7c,
    0xbe,0xe7,0xbf,0xed,0x45,0x37,0x4f,0xe6,0xb7,0xec,0xf8,0xfc,0x8a,0xcf,0x22,0x31,
    0x4b,0x45,0x67,0x3c,0xe3,0x7c,0x7f,0x61,0x1e,0xa6,0x89,0x5b,0x2e,0x9a,0xd3,0x29,
    0xe7,0xfb,0x33,0xf3,0x3d,0x49,0xdc,0x4c,0xf8,0x9f,0x18,0x87,0xff,0x87,0x6a,0xfb,
    0x47,0x4e,0xad,0x4d,0xd6,0xbf,0x99,0x85,0xf3,0x17,0xb4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
