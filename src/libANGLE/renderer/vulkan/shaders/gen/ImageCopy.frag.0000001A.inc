// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x08,0xf2,0x10,0x50,0x42,0xc5,0x12,0xa5,0x87,0x18,
    0x62,0x81,0x91,0x80,0x49,0x46,0x92,0x51,0x2a,0x9a,0x95,0x58,0x46,0x92,0x68,0x21,
    0x95,0x98,0x69,0x52,0x3e,0x30,0x25,0x2d,0xad,0xa4,0x7c,0xf4,0x12,0x2b,0xd1,0x54,
    0xd4,0xfa,0x23,0xfa,0x8b,0x9a,0x1e,0x33,0xcd,0xb4,0xd7,0xb9,0xbf,0xc5,0x7c,0x73,
    0xc7,0x8a,0x99,0x3d,0xe7,0xec,0x6f,0xad,0xfd,0xad,0x6f,0xad,0xbd,0xce,0xba,0x24,
    0x13,0x0b,0xd2,0x51,0x32,0x27,0x2a,0x88,0xf2,0xa3,0x5f,0xa2,0xcc,0xdf,0x8c,0x28,
    0x11,0xe5,0x84,0x67,0x61,0x94,0x8a,0x9f,0xab,0xbb,0x36,0x74,0xd5,0x0f,0xed,0xe9,
    0xab,0x6f,0x6c,0x6a,0x30,0x7b,0x71,0x94,0x8c,0xfd,0xcc,0x56,0x12,0xa5,0xa3,0xdc,
    0xf0,0xb4,0xb5,0xab,0x77,0xe7,0xa0,0xe1,0x45,0x61,0xdd,0x0e,0xab,0x34,0xf8,0x19,
    0x9e,0x36,0x8e,0xf0,0x56,0x14,0x73,0xda,0x99,0x28,0xea,0x8c,0xf2,0xa2,0x72,0xe2,
    0x2d,0xe0,0xe9,0x58,0x0e,0x58,0xbe,0x60,0x09,0xb0,0x52,0xc1,0x92,0x60,0x15,0x82,
    0xe5,0x82,0xdd,0x25,0x58,0x1e,0xd8,0x5c,0xc1,0x52,0x60,0xf7,0x08,0x96,0x06,0x5b,
    0x28,0x58,0x3e,0xd8,0xfd,0x82,0x4d,0x03,0x5b,0x2c,0x58,0x01,0x58,0x83,0x60,0x85,
    0x60,0x8d,0x82,0x4d,0x07,0x6b,0x16,0xac,0x08,0xac,0x35,0xae,0x53,0x72,0x2a,0x5f,
    0xab,0xd9,0xaa,0xf0,0xac,0xa1,0x3e,0xbe,0x9f,0x2f,0x7b,0xab,0xf3,0x3c,0xf6,0xe5,
    0xe1,0x54,0x22,0xb6,0x27,0xe3,0xda,0xd8,0xfb,0xcc,0xe0,0x93,0x22,0x4f,0xab,0x6b,
    0x65,0xd8,0xa7,0xc9,0x3f,0x11,0xe3,0xb9,0x71,0x8e,0x69,0xd6,0xac,0x70,0xb2,0x00,
    0x7f,0xf3,0x2d,0x24,0xb7,0x5c,0x7c,0xa7,0xc3,0x63,0x78,0x0b,0xfb,0x22,0xe1,0x2e,
    0xc6,0xdf,0x63,0x97,0xc1,0x15,0xc5,0x3a,0x4b,0xa7,0xea,0xec,0x1a,0x6c,0x95,0xfd,
    0xcf,0x72,0x1f,0x8b,0x5f,0x41,0xfd,0xcb,0x89,0x5f,0x11,0xc7,0xc9,0x60,0x75,0xe4,
    0x3a,0x0b,0x3d,0xe6,0x5f,0x89,0x2d,0x2d,0xf6,0x6a,0xc9,0x67,0x1e,0xf6,0xb2,0xb8,
    0x8f,0x12,0x71,0x6d,0xeb,0xd0,0xed,0x75,0x37,0xbf,0x7b,0x45,0xb3,0xf3,0xd4,0xd1,
    0x5b,0xee,0xbf,0x94,0xb8,0x6e,0x5f,0x46,0x6d,0xac,0x2e,0x2b,0x88,0xe1,0x71,0x1f,
    0x83,0xcf,0xf0,0xaa,0xa0,0xa0,0x1d,0x7b,0x0e,0x31,0xb3,0x9f,0x76,0xe6,0x71,0xde,
    0xdb,0xc9,0xdd,0xf6,0xab,0xc0,0x3c,0x66,0x47,0xd6,0x7e,0x0d,0xdf,0x89,0x9d,0x7f,
    0x9a,0x5c,0x53,0x68,0x7a,0x96,0xf7,0xa4,0xf8,0x77,0x73,0x77,0xbe,0xdf,0x24,0x39,
    0x9b,0xbe,0x2d,0xc2,0xf7,0x12,0x39,0x94,0xc1,0xf7,0x0a,0xef,0xca,0xb7,0x23,0xab,
    0xf6,0x23,0x7c,0x53,0xe6,0xff,0x11,0xfe,0x1a,0xef,0x74,0xd6,0x5d,0x5e,0xe0,0x9b,
    0xf1,0xf8,0x57,0xa4,0x6f,0x6f,0x11,0x6b,0x05,0xf5,0xb8,0xc5,0xdc,0x49,0xc6,0xb5,
    0xcf,0x8b,0xfd,0x72,0xa9,0x87,0x61,0x7f,0x04,0x24,0x0f,0xdf,0x7c,0xe9,0x0b,0xdf,
    0xcf,0x91,0xbd,0xdd,0xcf,0xca,0xac,0xfd,0xb0,0xec,0xad,0x1f,0xce,0xb3,0x6f,0xe3,
    0x3b,0x29,0xe1,0xbe,0xd7,0x06,0xb4,0x98,0x59,0x55,0xc2,0xf2,0xbb,0x1c,0xe4,0xfb,
    0x9b,0x81,0xbd,0x3d,0x28,0xaa,0x64,0x5e,0xcd,0xa4,0x77,0xdb,0xf0,0xa9,0x02,0x3f,
    0x12,0x7c,0x6c,0x3f,0x9b,0x73,0x55,0x71,0xce,0xc9,0x58,0xff,0x6c,0xf1,0x9f,0x4b,
    0x4e,0x66,0x9b,0xc3,0xde,0xf8,0xad,0xc7,0xef,0x86,0xbf,0x1a,0x7f,0xff,0x2e,0x0d,
    0xbf,0x16,0x7c,0xe6,0xcb,0x3c,0xb4,0xbe,0xff,0x3d,0x70,0xd4,0xa2,0xfb,0xaf,0xe0,
    0xef,0x73,0xb1,0x96,0x3a,0x2e,0x84,0xdb,0xea,0x70,0x1f,0xb5,0xab,0x81,0x3b,0xc5,
    0xbc,0x34,0xfc,0x03,0xf6,0x0f,0x80,0xf9,0x99,0x45,0x72,0xc6,0xf4,0x2e,0xc2,0xe7,
    0xcf,0xc0,0xed,0x31,0x6a,0x45,0xff,0x62,0xf4,0xd7,0x89,0xfe,0x07,0xc1,0x5d,0x7f,
    0x3d,0x98,0xeb,0x6f,0x10,0xfd,0x66,0x5b,0xc2,0x7c,0x36,0xee,0x25,0xa2,0xe5,0x21,
    0xb4,0x2c,0x15,0xfd,0x0f,0x83,0xbb,0xfe,0x46,0x30,0x3f,0xd3,0x24,0x67,0x4c,0x7f,
    0x13,0x3e,0xa6,0xdf,0x63,0x34,0x88,0xfe,0x47,0xd0,0xbf,0x4c,0xf4,0x37,0x83,0xbb,
    0xfe,0x47,0xc1,0x5c,0x7f,0x8b,0xe8,0x37,0xdb,0xf2,0xb8,0xf7,0x32,0xdc,0xcb,0xe5,
    0xde,0x5b,0xd1,0x62,0x7d,0x97,0xe9,0xc7,0x0c,0xd6,0x2a,0xf3,0xc3,0x7b,0xa2,0x0d,
    0x8d,0xce,0xd3,0x02,0x8f,0xcd,0x94,0x27,0x98,0x27,0xde,0x93,0x4f,0xa2,0xb9,0x43,
    0x62,0xad,0x06,0xf7,0x7d,0x27,0xb1,0x0f,0xd1,0xa3,0x4f,0xe1,0xd3,0x09,0x8f,0xcd,
    0x9c,0x2e,0x78,0xd6,0x48,0x7d,0x9f,0x01,0x5f,0x1f,0x7c,0x52,0xb1,0xf6,0xcc,0xd9,
    0x48,0xb0,0x75,0x60,0x39,0xf1,0x7b,0x2a,0x9e,0x57,0xeb,0xf1,0x5d,0x07,0x87,0xc7,
    0xd8,0x40,0x8c,0x6e,0x89,0xb1,0x11,0x7c,0x6b,0x50,0x66,0x33,0xe2,0x39,0x72,0x5c,
    0xcf,0x0c,0xd9,0x48,0x5d,0x56,0x62,0xf3,0xbb,0x7a,0x1e,0xae,0x4d,0x72,0x57,0x2f,
    0x80,0xfb,0x5d,0xbd,0x08,0xe6,0x77,0xd5,0x23,0x77,0x65,0xb6,0xcd,0x61,0xf5,0x53,
    0xe3,0xcd,0x70,0xdb,0xbc,0x7c,0x99,0xb9,0xb2,0x45,0xb8,0xb7,0x82,0xb7,0xf1,0x3b,
    0xd1,0x8b,0xcf,0xda,0x30,0x95,0x6c,0xa6,0xbe,0x0a,0xd6,0x2b,0x73,0x24,0x41,0x4d,
    0xcc,0xbe,0x0d,0x0e,0x5f,0x47,0x43,0x2c,0xc3,0xfb,0x38,0xbb,0x4d,0xb8,0x5f,0x9b,
    0xe2,0x9e,0x16,0xef,0xb7,0x83,0xf5,0x31,0x2b,0xf3,0xe4,0x37,0xc1,0x6b,0xb3,0x9d,
    0x9e,0xe9,0x21,0x9f,0x7e,0xa9,0xd5,0x4e,0x6a,0xb5,0x43,0xf2,0x79,0x1d,0xdc,0x6b,
    0xf5,0x06,0x98,0xd7,0x6a,0x97,0xd4,0xca,0x6c,0x03,0xf6,0xbf,0x23,0xdc,0x03,0x52,
    0xab,0xc1,0x3b,0xd4,0xea,0x4d,0xf0,0xeb,0x70,0xbf,0x05,0x56,0x83,0x46,0xe7,0xb1,
    0xe7,0x6f,0xe1,0xde,0xcd,0xe7,0x6d,0x34,0xf4,0xe3,0x3f,0x80,0x8e,0x21,0xd1,0x61,
    0x3e,0xbb,0xc3,0x1a,0xe2,0xfc,0x6e,0xd1,0xb1,0xe7,0x0e,0x3a,0xde,0x01,0xf7,0xba,
    0xee,0xcd,0xba,0xb3,0x77,0xc1,0xf6,0xfe,0xcb,0x9d,0xed,0x83,0xc3,0xd7,0x31,0xee,
    0x6c,0x3f,0x67,0xf7,0x09,0xf7,0x7b,0x59,0x77,0x76,0x00,0x6c,0xff,0x7f,0xdc,0xd9,
    0x01,0xea,0xe1,0xf9,0x0c,0x65,0xdd,0x61,0x8f,0xf0,0xbf,0x0f,0xbf,0x7d,0x77,0x65,
    0xf1,0xcc,0xcb,0x60,0x91,0x60,0x07,0xc1,0x72,0x04,0x3b,0x04,0x96,0x10,0xec,0x30,
    0x58,0x32,0xce,0x35,0xf3,0xdd,0x1d,0x81,0xf3,0x20,0x67,0x0e,0xa3,0x73,0x18,0x9b,
    0xf7,0xd2,0x51,0x7a,0x69,0x44,0xea,0xfc,0x21,0xb8,0xf7,0xd2,0x31,0x30,0xef,0xa5,
    0x51,0xb9,0x43,0xb3,0x1d,0x0f,0xeb,0x14,0x39,0x1e,0x97,0x1c,0x4f,0xf0,0xfb,0x6d,
    0x33,0xd2,0xfe,0xef,0x38,0x09,0x76,0x42,0xfe,0x3f,0x70,0xdf,0x8f,0xa7,0x7c,0x33,
    0xf5,0xfe,0x04,0xec,0xa4,0xd4,0x3b,0x21,0xf5,0x1e,0xc6,0xc7,0xea,0x3b,0x4a,0xec,
    0x53,0x92,0xd7,0xa7,0xe4,0x75,0x5a,0xf2,0xfa,0x0c,0xdc,0xf3,0xfa,0x1c,0xcc,0xf3,
    0x1a,0x93,0xbc,0xcc,0x76,0x26,0xac,0x73,0x70,0x9f,0x91,0xde,0xfc,0x02,0xad,0xda,
    0x9b,0x5f,0x82,0xbb,0xcf,0x59,0x7c,0xfc,0xb7,0xf6,0x2c,0x3e,0xa6,0x77,0x0c,0xce,
    0x73,0x32,0x4b,0xbf,0x42,0xef,0x05,0x99,0xa5,0x5f,0x83,0xdb,0xf9,0xf3,0xec,0xdd,
    0xf6,0x0d,0xff,0x0b,0xfd,0xca,0xdc,0xfe,0x16,0xac,0x5b,0xf2,0xfb,0x0e,0xbc,0x83,
    0xfc,0xc6,0x25,0x3f,0xb3,0x5d,0x0c,0x6b,0x1c,0x2d,0x17,0x45,0xfb,0x25,0xb4,0xfb,
    0xef,0xec,0x25,0xf9,0xd6,0xdd,0x7f,0x5c,0xb4,0x7c,0x9f,0xa5,0xe5,0x07,0xb0,0x6a,
    0xd1,0xf2,0x23,0xb8,0x6b,0x99,0x10,0x2d,0x66,0xbb,0x1c,0xd6,0x04,0xdc,0x97,0x45,
    0xcb,0x55,0xb4,0x5c,0x41,0xcb,0x55,0xd1,0xe2,0xfe,0x13,0xa2,0xe5,0xa7,0x2c,0x2d,
    0xd7,0xc0,0x46,0x44,0xcb,0x75,0x70,0xd7,0x32,0x29,0x5a,0xcc,0x76,0x23,0xac,0x49,
    0xb8,0x6f,0x88,0x96,0x9b,0x72,0xef,0xa6,0xe5,0x26,0x35,0x32,0x2d,0xee,0x3f,0x99,
    0x75,0xc7,0x63,0x59,0x3d,0x3a,0x2a,0x3d,0xff,0x33,0x7c,0xc6,0x75,0x9b,0xfd,0xdf,
    0xe1,0x6b,0x6f,0x0e,0xeb,0x1f,0x29,0x38,0x6e,0xc3,0x24,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
