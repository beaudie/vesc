// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000046.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000046[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4b,0x9e,0x65,
    0x14,0xc7,0xaf,0xe7,0xb9,0x9f,0x17,0xa7,0xf9,0x32,0x75,0x33,0x57,0xae,0x6c,0x13,
    0x0a,0x97,0x3e,0x91,0x2d,0xd3,0x36,0x72,0x2d,0x37,0x62,0xb8,0xca,0x55,0x0a,0xc5,
    0x26,0xb9,0x4a,0x69,0x53,0x6a,0x1b,0x09,0x69,0x9b,0x06,0xb5,0x55,0x0a,0x21,0x5b,
    0x94,0x42,0xe9,0x0f,0xa5,0xcd,0x1f,0x82,0x7e,0x8a,0x88,0xda,0xa8,0xad,0x97,0x7f,
    0x27,0x7a,0x81,0xa0,0x73,0xae,0xfb,0x73,0xd6,0xe1,0xa1,0xd8,0x03,0x17,0xf7,0x7d,
    0x7d,0xcf,0xdb,0xf7,0x7b,0xae,0x73,0x5f,0x9a,0x64,0x77,0x14,0x43,0xc8,0x84,0xca,
    0x50,0x11,0x7e,0x0d,0xe9,0x6f,0x73,0xc8,0x0a,0x12,0x42,0x55,0x28,0xc4,0xe7,0x81,
    0x43,0x83,0x87,0x3a,0x5e,0x3b,0x35,0xda,0xd1,0xf5,0x40,0x49,0xed,0x35,0x21,0x89,
    0x7e,0x6a,0xab,0x0d,0xc5,0x90,0x93,0xa7,0xae,0x13,0x23,0x63,0x27,0x15,0xaf,0x96,
    0xb5,0x21,0xab,0x4e,0xfc,0x14,0x2f,0x6a,0x0e,0x79,0xab,0x8e,0x39,0x35,0x26,0x84,
    0x83,0x21,0x1f,0x1a,0xa8,0xb7,0x83,0xa7,0x61,0x19,0xb0,0x0a,0x87,0x65,0xc1,0xea,
    0x1c,0x96,0x80,0x35,0x3a,0x2c,0x07,0x76,0xab,0xc3,0xf2,0x60,0xb7,0x3b,0xac,0x00,
    0x76,0xa7,0xc3,0x8a,0x60,0x3b,0x1d,0x56,0x01,0x76,0xb7,0xc3,0x36,0x81,0xed,0x72,
    0x58,0x25,0x58,0xc9,0x61,0x55,0x60,0x5d,0x0e,0xbb,0x05,0xac,0xdb,0x61,0xd5,0x60,
    0x0f,0xc7,0x3e,0x25,0x37,0xf4,0x6a,0xcf,0xf6,0xcb,0xf3,0x2e,0xfa,0x63,0xfb,0x56,
    0xb7,0xd7,0x3e,0x6f,0x67,0xdf,0x20,0x51,0xd9,0x68,0x4f,0x62,0x6f,0xf4,0x7d,0x8b,
    0xf8,0x14,0xd0,0xa9,0x7d,0x6d,0x92,0x7d,0x11,0xfd,0x6a,0xdf,0x2a,0x9e,0x95,0xd8,
    0xd5,0x56,0x85,0x96,0x5c,0xc4,0x72,0x91,0x6f,0x06,0x2d,0xbd,0xec,0xab,0x5d,0xae,
    0x1a,0xfc,0xad,0x56,0x3d,0xb9,0x42,0xe4,0x55,0x77,0xa3,0xaf,0x56,0x53,0x57,0xfd,
    0x4d,0x96,0xf9,0x68,0xfd,0x46,0xfa,0xdd,0x40,0xfd,0xc6,0x58,0x27,0xc5,0xda,0xd1,
    0xb6,0x15,0x3e,0xea,0xdf,0x84,0xad,0xe8,0xec,0x2d,0x4e,0xcf,0x76,0xec,0xf5,0x71,
    0x6e,0xb2,0xb1,0x97,0xed,0xf0,0xb6,0x3e,0x5b,0x5c,0x3b,0xb3,0x63,0xf6,0xfb,0xa8,
    0x63,0xf6,0xdd,0xf4,0x42,0xfb,0xb0,0x17,0xde,0x5a,0xa7,0x59,0x2a,0xf4,0xb1,0xcf,
    0x84,0x7f,0x7f,0x19,0xb7,0xbf,0x4d,0xfa,0xbe,0x4f,0x9e,0x7d,0xf0,0x7a,0x14,0x7c,
    0x1f,0x3a,0x75,0xbf,0xbf,0x8c,0x4f,0x7f,0xd9,0x7e,0x80,0xbe,0x6b,0xfc,0x61,0x74,
    0x15,0x9c,0xfd,0x08,0x7b,0xe5,0xf7,0x3c,0xef,0x89,0xb3,0x1f,0xa7,0x4f,0x6a,0x9f,
    0xa2,0x27,0x39,0x67,0x9f,0x61,0xfe,0x6d,0x7f,0xa1,0xac,0xef,0x17,0x99,0x67,0xad,
    0x7f,0x99,0xdc,0x53,0xf0,0xbf,0xcc,0x1d,0x90,0xc4,0x3e,0xe5,0x23,0xcf,0x1c,0xfc,
    0x15,0xfb,0x43,0x10,0xed,0xed,0x1e,0x66,0xae,0x96,0x5e,0x1e,0x16,0x46,0x35,0x7c,
    0xe7,0xb5,0x2c,0xeb,0xdd,0x49,0x66,0x77,0x33,0xf6,0x3e,0xc9,0xd0,0xc4,0xb7,0xbe,
    0x85,0x39,0xd8,0x83,0x4f,0x33,0xf8,0xac,0xf8,0xe8,0x7e,0x1b,0x71,0xcd,0xc4,0xe9,
    0x1c,0xdc,0x41,0x5c,0x0b,0x71,0x36,0xbb,0x8a,0x7f,0x21,0x3e,0xad,0xee,0x8e,0xd0,
    0xd9,0xf8,0x5d,0x98,0xb7,0xc1,0xe7,0x2f,0xf1,0xb7,0xbb,0xa2,0x0d,0x3d,0xfa,0xfe,
    0xa4,0xc4,0x15,0xb8,0x2f,0xb6,0xe1,0x3b,0x43,0xbf,0xee,0x01,0x7f,0x4a,0x76,0xca,
    0xe9,0x4b,0x30,0xf3,0xfb,0x53,0x72,0x58,0x2e,0x7d,0xfe,0x26,0x5e,0xea,0xf7,0x3d,
    0x3e,0x79,0x62,0x76,0x3a,0x0d,0xbb,0xd0,0xd0,0xee,0x34,0xdc,0x0b,0x6e,0x1a,0x3a,
    0xc0,0x4c,0x43,0xc9,0x69,0x50,0x5b,0x27,0xf7,0x96,0xd6,0xed,0x74,0x1a,0xee,0xa7,
    0x76,0xc6,0x69,0xe8,0x02,0x37,0x0d,0x5f,0x81,0x99,0x9f,0x6a,0xb0,0x5c,0x25,0xa7,
    0xe1,0x0a,0x3e,0x6d,0xc4,0x74,0x3a,0x0d,0x0f,0xa2,0x61,0xb7,0xd3,0xd0,0x0d,0x6e,
    0x1a,0x1e,0x02,0x33,0x0d,0xbd,0x4e,0x83,0xda,0x7a,0xe2,0xdc,0xa5,0x75,0x7b,0x98,
    0xa3,0x62,0xcc,0x97,0xd6,0xbe,0xe2,0xbe,0x3d,0xe5,0x68,0xbe,0xbd,0x8e,0xe3,0x55,
    0xfc,0x4a,0xc4,0xf5,0xc0,0x47,0xbf,0xc9,0xc7,0xf8,0x1e,0x6d,0xe6,0x0e,0xc0,0xb9,
    0xdf,0xcd,0xdc,0x41,0xf0,0xb3,0xcc,0xdc,0xe3,0x60,0x57,0x89,0xd3,0x6f,0xf4,0x09,
    0xe2,0x06,0x88,0x2b,0xc4,0x7e,0xa7,0xf8,0xa8,0xec,0xfb,0x62,0x6f,0xd3,0x7a,0x47,
    0x25,0x8b,0xde,0x2b,0x83,0x60,0x9a,0xef,0x11,0xfc,0xad,0x77,0x4f,0x93,0xef,0x88,
    0xeb,0xdd,0x33,0xe0,0xd6,0xbb,0x67,0xc1,0xac,0x77,0xc3,0xae,0x77,0x6a,0x1b,0x8a,
    0xb5,0xd3,0x7e,0x0c,0xb9,0xf3,0x7f,0x8e,0xda,0x49,0xec,0x67,0x45,0xbc,0x43,0x8e,
    0x82,0x0d,0xba,0xef,0x32,0x1b,0xf9,0x17,0xa2,0xfd,0x18,0x71,0xb6,0xde,0x92,0x5c,
    0x8a,0x8f,0x10,0x7b,0x2c,0xe6,0xda,0x14,0x75,0xbd,0x40,0x9e,0x11,0xee,0x86,0xbc,
    0xbb,0xa3,0xf4,0x8c,0x86,0xe1,0x34,0xea,0xf4,0xbe,0x88,0xde,0xe3,0x4e,0xef,0x4b,
    0xe0,0xa6,0xf7,0x65,0x30,0xd3,0x3b,0xee,0xf4,0xaa,0x6d,0x4c,0xd6,0x38,0xb9,0xc7,
    0x9c,0xde,0x57,0x9c,0xde,0x0d,0x72,0x9d,0x00,0xef,0x87,0x93,0xc5,0x8d,0x33,0x37,
    0xad,0xf1,0x5e,0x4a,0x6b,0x8e,0xe2,0x3f,0x46,0xdd,0x49,0x57,0x57,0x7d,0x26,0x64,
    0x4d,0x12,0x3f,0xe1,0xea,0xbe,0xfa,0x1f,0x7d,0x3e,0x75,0x93,0x3e,0x9f,0x26,0xce,
    0xd6,0xdb,0xf4,0xf9,0x0c,0xb1,0xa7,0x5d,0x9f,0x5f,0x27,0xcf,0x99,0xff,0xe9,0xb3,
    0x71,0x9a,0x44,0x93,0xc6,0xfc,0x48,0xcc,0x38,0xf1,0x13,0x65,0x67,0x32,0xec,0x7c,
    0x7f,0xe0,0x2c,0x87,0x88,0xd3,0x3c,0x6f,0xf0,0x37,0x65,0x1a,0xbb,0x9d,0xdf,0x9b,
    0x9c,0xdf,0x8c,0x3b,0xbf,0xb3,0xe0,0x76,0x7e,0xe7,0xc0,0xec,0xfc,0xe6,0x5c,0x1f,
    0xcf,0xc5,0x3b,0x3d,0x84,0xf3,0xf0,0x98,0x45,0xa7,0xd6,0x7a,0x87,0x7a,0xd3,0xe8,
    0x2c,0xd2,0x33,0xd3,0x39,0x47,0xcc,0x79,0xc7,0xe7,0x5d,0xf8,0x5c,0x70,0x7c,0xde,
    0x03,0x37,0x3e,0xef,0x83,0x19,0x9f,0x05,0xc7,0x47,0x6d,0xf3,0xb2,0x16,0xc9,0x3d,
    0xcf,0xb9,0x6a,0x9e,0x0f,0xe0,0x92,0x70,0x5f,0x2a,0xc7,0xaf,0x1d,0x6e,0x77,0xd1,
    0x02,0xb1,0x8b,0xee,0x9e,0xb8,0x04,0xaf,0x8b,0xee,0x9e,0xf8,0x10,0xfc,0x1a,0x73,
    0xf3,0x11,0xd8,0x80,0xe3,0xfa,0x31,0x78,0x3f,0x5c,0x97,0x1d,0x57,0xb5,0x2d,0xc9,
    0x5a,0xa6,0xde,0x92,0xe3,0xf5,0x0d,0xfa,0xa6,0xdd,0x3d,0x6e,0x7e,0xcb,0x9c,0xf5,
    0x54,0xac,0x9d,0xfa,0x2c,0x12,0xb3,0xe4,0xf8,0x7c,0x02,0x9f,0x16,0xc7,0xe7,0x53,
    0x70,0xe3,0xb3,0xea,0xf8,0xa8,0x6d,0x45,0xd6,0x2a,0x75,0x56,0x1c,0x9f,0x6f,0xe1,
    0x73,0x8d,0x33,0x54,0x3e,0xe6,0xb7,0xea,0xf8,0x5c,0xc7,0x67,0x99,0x98,0x15,0xc7,
    0xe7,0x33,0xf8,0xcc,0x38,0x3e,0x9f,0x83,0x1b,0x9f,0x75,0xc7,0x47,0x6d,0x6b,0xb2,
    0xd6,0xa9,0xb3,0xe6,0xf8,0x7c,0xc7,0xff,0x7f,0xd7,0xdd,0x3c,0x99,0xdf,0xba,0xe3,
    0xf3,0x0b,0x3e,0xab,0xc4,0xac,0x95,0x9d,0xf1,0x82,0xf3,0xfd,0x99,0x79,0x98,0x27,
    0x6e,0xbd,0x6c,0x4e,0xe7,0x9c,0xef,0x4f,0xcc,0xf7,0x2c,0x71,0x9a,0x67,0xaf,0x30,
    0xd9,0xc0,0xf6,0xb7,0x9c,0x5a,0xb7,0xac,0x7f,0x00,0x9e,0x09,0x1f,0x20,0xd0,0x0d,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
