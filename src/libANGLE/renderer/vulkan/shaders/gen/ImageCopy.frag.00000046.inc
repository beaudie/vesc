// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000046.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000046[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4b,0x9e,0x65,
    0x14,0xc7,0xaf,0xe7,0xb9,0x9f,0x17,0xa7,0xf9,0x32,0x75,0x33,0x47,0x6e,0xad,0x4d,
    0x28,0x5c,0xfa,0x44,0xb6,0x4c,0x9b,0x64,0xcb,0x56,0x30,0x57,0x73,0xa5,0xd0,0x68,
    0x63,0x6e,0xa5,0xbd,0xf8,0x10,0x29,0xed,0x07,0x6d,0xd3,0x88,0xb6,0x4a,0x21,0x64,
    0xc5,0x52,0x28,0xfd,0x61,0x29,0x1b,0x11,0xf4,0x53,0x44,0xd4,0x46,0x6d,0xab,0xfe,
    0x9f,0xe8,0x05,0x82,0xce,0xb9,0xee,0xcf,0x59,0x87,0x87,0x62,0xc2,0xc5,0x7d,0x5f,
    0xdf,0xf3,0xf6,0xfd,0x9e,0xeb,0xdc,0xd7,0x63,0x92,0xdd,0x55,0x0c,0x21,0x13,0xaa,
    0x43,0x55,0xf8,0x35,0xa4,0x7f,0x9b,0x43,0x56,0x90,0x10,0x6a,0x42,0x21,0x3e,0x0f,
    0x1c,0x3c,0x72,0xb0,0x73,0x6a,0xfa,0x54,0x67,0xf7,0x43,0x25,0xb5,0xd7,0x85,0x24,
    0xfa,0xa9,0xad,0x3e,0x14,0x43,0x4e,0x9e,0xba,0x26,0x4f,0xbc,0x52,0x56,0xbc,0x56,
    0xd6,0x15,0x59,0x0d,0xe2,0xa7,0x78,0x51,0x73,0xc8,0x5b,0x6d,0xcc,0xa9,0x31,0x21,
    0x3c,0x15,0xf2,0xa1,0x89,0x7a,0xbb,0x78,0x1a,0x96,0x01,0xab,0x72,0x58,0x16,0xac,
    0xc1,0x61,0x09,0x58,0xb3,0xc3,0x72,0x60,0x77,0x3a,0x2c,0x0f,0x76,0x97,0xc3,0x0a,
    0x60,0x77,0x3b,0xac,0x08,0xb6,0xdb,0x61,0x55,0x60,0xf7,0x3a,0x6c,0x13,0xd8,0x1e,
    0x87,0x55,0x83,0x95,0x1c,0x56,0x03,0xd6,0xed,0xb0,0x3b,0xc0,0x7a,0x1c,0x56,0x0b,
    0xf6,0x68,0xec,0x53,0x72,0x4b,0xaf,0xf6,0x6c,0xbf,0x3c,0xef,0xa1,0x3f,0xb6,0xdf,
    0xe9,0xf6,0xda,0xe7,0xed,0xec,0x9b,0x24,0x2a,0x1b,0xed,0x49,0xec,0x8d,0xbe,0x6f,
    0x11,0x9f,0x02,0x3a,0xb5,0xaf,0x2d,0xb2,0x2f,0xa2,0x5f,0xed,0x5b,0xc5,0xb3,0x1a,
    0xbb,0xda,0x6a,0xd0,0x92,0x8b,0x58,0x2e,0xf2,0xcd,0xa0,0xa5,0x8f,0x7d,0xad,0xcb,
    0x55,0x87,0xbf,0xd5,0x6a,0x24,0x57,0x88,0xbc,0x1a,0x6e,0xf5,0xd5,0x6a,0xea,0x6a,
    0xbc,0xcd,0x32,0x1f,0xad,0xdf,0x4c,0xbf,0x9b,0xa8,0xdf,0x1c,0xeb,0xa4,0x58,0x07,
    0xda,0xb6,0xc2,0x47,0xfd,0x5b,0xb0,0x15,0x9d,0xbd,0xcd,0xe9,0xd9,0x8e,0xbd,0x31,
    0xce,0x4d,0x36,0xf6,0xb2,0x03,0xde,0xd6,0x67,0x8b,0xeb,0x60,0x76,0xcc,0xfe,0x00,
    0x75,0xcc,0xbe,0x97,0x5e,0x68,0x1f,0xfa,0xe1,0xad,0x75,0x5a,0xa5,0xc2,0x00,0xfb,
    0x4c,0xf8,0xf7,0x2f,0xe3,0xf6,0xca,0xe5,0x71,0xde,0x07,0xd0,0xa6,0xfb,0xfd,0x15,
    0x1c,0x06,0x2b,0xf6,0x43,0xf4,0x5a,0xe3,0x0f,0xa1,0xa5,0xe0,0xec,0xc3,0xec,0x95,
    0xd3,0x51,0xde,0x13,0x67,0x3f,0x49,0x6f,0xd4,0x7e,0x9a,0x3e,0xe4,0x9c,0x7d,0x96,
    0x99,0xb7,0xfd,0xf9,0x8a,0x5e,0x5f,0x60,0x86,0xb5,0xfe,0x65,0x72,0x9f,0x86,0xff,
    0x65,0xbe,0xfb,0x24,0xf6,0x26,0x1f,0x79,0xe6,0xe0,0xaf,0xd8,0x1f,0x82,0x68,0x3f,
    0xf7,0x31,0x67,0xf5,0xf4,0xef,0x19,0x61,0x54,0xc7,0xb7,0x5d,0xcf,0xb2,0x7e,0x95,
    0x99,0xd7,0xcd,0xd8,0x07,0x24,0x43,0x0b,0xdf,0xf7,0x16,0xce,0x7e,0x1f,0x3e,0xad,
    0xe0,0xef,0x88,0x8f,0xee,0xb7,0x11,0xd7,0x4a,0x9c,0x9e,0xfd,0x0e,0xe2,0xda,0x88,
    0xb3,0x79,0xdd,0x11,0xb9,0xe7,0xe3,0x3c,0xd8,0xbd,0xa0,0xf3,0xf0,0xbb,0x30,0x6f,
    0x87,0xcf,0x5f,0xe2,0x6f,0xf7,0x43,0x3b,0x7a,0xf4,0xfd,0xb0,0xc4,0x15,0xb8,0x23,
    0xb6,0xe1,0x7b,0x86,0x7e,0xdd,0x07,0x3e,0x2c,0x3b,0xe5,0xf4,0x15,0x98,0xf9,0xfd,
    0x29,0x39,0x2c,0x97,0x3e,0x7f,0x13,0x2f,0xf5,0xfb,0x01,0x9f,0x3c,0x31,0xbb,0x9d,
    0x86,0x3d,0x68,0xe8,0x70,0x1a,0xee,0x07,0x37,0x0d,0x9d,0x60,0xa6,0xa1,0xe4,0x34,
    0xa8,0xad,0x8b,0xbb,0x4a,0xeb,0x76,0x39,0x0d,0x0f,0x52,0x3b,0xe3,0x34,0x74,0x83,
    0x9b,0x86,0xaf,0xc1,0xcc,0x4f,0x35,0x58,0xae,0x92,0xd3,0x70,0x15,0x9f,0x76,0x62,
    0xba,0x9c,0x86,0x87,0xd1,0xb0,0xd7,0x69,0xe8,0x01,0x37,0x0d,0x8f,0x80,0x99,0x86,
    0x3e,0xa7,0x41,0x6d,0xbd,0x71,0xee,0xd2,0xba,0xbd,0xcc,0x51,0x31,0xe6,0x4b,0x6b,
    0x5f,0x75,0xdf,0x9b,0x72,0x34,0xdf,0x3e,0xc7,0xf1,0x1a,0x7e,0x25,0xe2,0x7a,0xe1,
    0xa3,0xdf,0xe4,0x13,0x7c,0x8f,0x36,0x73,0x4f,0xc2,0x79,0xd0,0xcd,0xdc,0x01,0xf0,
    0x39,0x66,0xee,0x69,0xb0,0x6b,0xc4,0x1d,0x8a,0xbc,0xd2,0xb8,0x21,0xe2,0xb4,0xa7,
    0xcf,0x82,0x1f,0x97,0xa8,0xfe,0xd8,0xff,0xb4,0x9e,0xc6,0x3f,0x86,0xdd,0x7a,0x75,
    0x84,0xf8,0x61,0xd7,0xab,0xe7,0xc0,0xad,0x57,0xcf,0x83,0x59,0xaf,0x46,0x5d,0xaf,
    0xd4,0x36,0x22,0x6b,0x0c,0xfd,0x23,0xee,0xbc,0x5f,0xa0,0x76,0x12,0xf9,0x54,0xc5,
    0x3b,0xe3,0x45,0xb0,0xc3,0xee,0x3b,0xcc,0x46,0x4e,0x85,0x68,0x3f,0x46,0x9c,0xad,
    0x77,0x25,0xd7,0xd1,0xa8,0x25,0x8d,0x3d,0x16,0x73,0x6d,0x8a,0xba,0x4e,0x90,0xe7,
    0x38,0x77,0x41,0xde,0xdd,0x49,0x7a,0x26,0xa3,0x70,0x1a,0x73,0x7a,0x4f,0xa1,0xf7,
    0xa4,0xd3,0xfb,0x12,0xb8,0xe9,0x7d,0x19,0xcc,0xf4,0x4e,0x38,0xbd,0x6a,0x1b,0x97,
    0x35,0x41,0xee,0x71,0xa7,0xf7,0x55,0xa7,0xf7,0x4b,0x72,0xbd,0x06,0x3e,0x08,0x27,
    0x8b,0x9b,0x60,0x4e,0xd4,0xe7,0x75,0x6a,0x8e,0xe1,0x3f,0x4e,0xdd,0xb2,0xab,0xab,
    0x3e,0x93,0xf1,0xce,0x4a,0xe3,0x27,0x5d,0xdd,0x37,0xfe,0xa3,0xcf,0x6f,0xde,0xa6,
    0xcf,0x53,0xc4,0xd9,0x3a,0x47,0x9f,0xa7,0x89,0x9d,0x72,0x7d,0x7e,0x8b,0x3c,0xd3,
    0xff,0xd3,0x67,0xe3,0x54,0x46,0x93,0xc6,0xfc,0x44,0xcc,0x04,0xf1,0x93,0x15,0x67,
    0x32,0xea,0x7c,0x7f,0xe4,0x2c,0x47,0x88,0x2b,0xc7,0xdf,0x8a,0xf4,0x37,0x64,0x06,
    0xbb,0x9d,0xdf,0xdb,0x9c,0xdf,0xac,0x3b,0xbf,0x33,0xe0,0x76,0x7e,0x67,0xc1,0xec,
    0xfc,0xe6,0x5d,0x1f,0xcf,0xc6,0xef,0x49,0xf5,0xa6,0x3c,0xe6,0xd0,0xa9,0xb5,0xde,
    0xa3,0xde,0x0c,0x3a,0x8b,0xf4,0xcc,0x74,0xce,0x13,0x73,0xce,0xf1,0x79,0x1f,0x3e,
    0xe7,0x1d,0x9f,0x0f,0xc0,0x8d,0xcf,0x87,0x60,0xc6,0x67,0xd1,0xf1,0x51,0xdb,0x82,
    0xac,0x25,0x72,0x2f,0x70,0xae,0x9a,0xe7,0x23,0xb8,0x24,0xdc,0x8f,0xca,0xf1,0x1b,
    0x87,0xdb,0xdd,0xb3,0x48,0xec,0x92,0xbb,0x17,0x3e,0x86,0xd7,0x05,0x77,0x2f,0x7c,
    0x02,0x7e,0x93,0xb9,0xb9,0x08,0x36,0xe4,0xb8,0x7e,0x0a,0x3e,0x08,0xd7,0x15,0xc7,
    0x55,0x6d,0xcb,0xb2,0x56,0xa8,0xb7,0xec,0x78,0x7d,0x8b,0xbe,0x19,0x77,0x6f,0x9b,
    0xdf,0x0a,0x67,0xad,0x7e,0xd7,0xf1,0x59,0x22,0x66,0xd9,0xf1,0xf9,0x0c,0x3e,0x6d,
    0x8e,0xcf,0xe7,0xe0,0xc6,0x67,0xcd,0xf1,0x51,0xdb,0xaa,0xac,0x35,0xea,0xac,0x3a,
    0x3e,0xdf,0xc1,0xe7,0x3a,0x67,0xa8,0x7c,0xcc,0x6f,0xcd,0xf1,0xb9,0x81,0xcf,0x0a,
    0x31,0xab,0x8e,0xcf,0x25,0xf8,0xcc,0x3a,0x3e,0x5f,0x80,0x1b,0x9f,0x0d,0xc7,0x47,
    0x6d,0xeb,0xb2,0x36,0xa8,0xb3,0xee,0xf8,0x7c,0xcf,0xff,0x78,0x37,0xdc,0x3c,0x99,
    0xdf,0x86,0xe3,0xf3,0x0b,0x3e,0x6b,0xc4,0xac,0x57,0x9c,0xf1,0xa2,0xf3,0xfd,0x99,
    0x79,0x58,0x20,0x6e,0xa3,0x62,0x4e,0xe7,0x9d,0xef,0x4d,0xe6,0x7b,0x8e,0x38,0xcd,
    0xd3,0x2f,0x4c,0xae,0x60,0xfb,0x5b,0x4e,0xad,0x47,0xd6,0x3f,0xd5,0xbc,0xbc,0x8e,
    0xb4,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
