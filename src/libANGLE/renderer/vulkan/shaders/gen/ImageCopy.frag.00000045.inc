// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000045.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000045[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4b,0xdd,0x65,
    0x18,0xc6,0x9f,0x73,0x8e,0xe7,0x1c,0xa7,0xf9,0x32,0x75,0x33,0x47,0x6e,0xd5,0x26,
    0x14,0x2e,0x3d,0x90,0x2d,0xd3,0x26,0xd9,0xb2,0x15,0xcc,0xd5,0x5c,0x29,0x34,0xda,
    0x98,0x5b,0x69,0x2f,0x4a,0xa4,0xf4,0xa3,0x6d,0x1a,0x6c,0xab,0x94,0x90,0x15,0xa5,
    0x50,0xfa,0x43,0x29,0x8b,0x08,0xfa,0x29,0x22,0x6a,0xc3,0xb6,0x55,0xff,0x4f,0xf4,
    0x02,0x41,0xcf,0xfd,0x9c,0xcf,0xbd,0x2e,0x0e,0xc5,0x0e,0x3c,0x7c,0xbf,0xcf,0x75,
    0xbf,0x5d,0xd7,0x7d,0x3f,0xdf,0x87,0x93,0xcb,0xee,0x2d,0x86,0x90,0x09,0x35,0xa1,
    0x3a,0xfc,0x1a,0xca,0xbf,0xed,0x21,0x1b,0x91,0x10,0x6a,0x43,0x21,0x3d,0x0f,0x1f,
    0x39,0x7e,0xa4,0x6b,0x66,0xf6,0x6c,0x57,0xcf,0x43,0x25,0xb3,0xd7,0x87,0x5c,0xf2,
    0x33,0x5b,0x43,0x28,0x86,0xaa,0xf8,0xb4,0x35,0x75,0xfa,0x95,0x69,0xc3,0xeb,0xe2,
    0xfa,0x32,0xae,0xc6,0xe8,0x67,0x78,0xd1,0x72,0xc4,0xb7,0xba,0x94,0xd3,0x62,0x42,
    0x78,0x2a,0xe4,0x43,0x33,0xf5,0xf6,0xf2,0x74,0x2c,0x03,0x56,0x2d,0x58,0x16,0xac,
    0x51,0xb0,0x1c,0x58,0x8b,0x60,0x55,0x60,0x77,0x0a,0x96,0x07,0xbb,0x4b,0xb0,0x02,
    0xd8,0xdd,0x82,0x15,0xc1,0xf6,0x09,0x56,0x0d,0x76,0x9f,0x60,0xdb,0xc0,0xf6,0x0b,
    0x56,0x03,0x56,0x12,0xac,0x16,0xac,0x47,0xb0,0x3b,0xc0,0x7a,0x05,0xab,0x03,0x7b,
    0x34,0xf5,0x29,0x77,0x4b,0xaf,0xf5,0xec,0x50,0x7c,0xde,0x4b,0x7f,0x7c,0x7f,0x8f,
    0xec,0xad,0xcf,0xbb,0xd9,0x37,0xc7,0xa8,0x6c,0xb2,0xe7,0x52,0x6f,0xec,0x7d,0x47,
    0xf4,0x29,0xa0,0xd3,0xfa,0xda,0x1a,0xf7,0x45,0xf4,0x9b,0x7d,0x67,0xf4,0xac,0xc1,
    0x6e,0xb6,0x5a,0xb4,0x54,0x25,0xac,0x2a,0xf1,0xcd,0xa0,0xa5,0x9f,0x7d,0x9d,0xe4,
    0xaa,0xc7,0xdf,0x6b,0x35,0x91,0x2b,0x24,0x5e,0x8d,0xb7,0xfa,0xea,0x35,0x6d,0x35,
    0xdd,0x66,0xb9,0x8f,0xd5,0x6f,0xa1,0xdf,0xcd,0xd4,0x6f,0x49,0x75,0xca,0x58,0x27,
    0xda,0x76,0xc2,0xc7,0xfc,0x5b,0xb1,0x15,0xc5,0xde,0x2e,0x7a,0x76,0x63,0x6f,0x4a,
    0xe7,0x26,0x9b,0x7a,0xd9,0x09,0x6f,0xef,0xb3,0xc7,0x75,0x72,0x76,0x7c,0x7f,0x00,
    0xed,0xa6,0x7b,0x00,0x9e,0x96,0xb7,0x2d,0x66,0x1c,0x64,0x9f,0x09,0xff,0xfe,0x32,
    0xb2,0xb7,0xda,0x8f,0xf3,0x3e,0x88,0x16,0xdb,0x1f,0xaa,0xa8,0x39,0x54,0xb1,0x1f,
    0xa6,0xb7,0x16,0x7f,0x14,0xee,0x05,0xb1,0x8f,0xb0,0x37,0x4e,0x27,0x78,0xcf,0x89,
    0xfd,0x4c,0x45,0x2f,0xe6,0x38,0xd3,0xbe,0xbf,0x54,0xd1,0xcb,0xcb,0x9c,0x51,0xab,
    0x77,0x85,0x5c,0x03,0xf0,0xbd,0xc2,0x77,0x9d,0x4b,0xbd,0xc8,0x27,0x5e,0x55,0xf0,
    0x35,0xec,0x8f,0x88,0x58,0xbf,0x0e,0x72,0x8e,0x1a,0xe8,0xd7,0x33,0x91,0x41,0x3d,
    0xdf,0x6e,0x03,0xcb,0xfb,0x33,0xcd,0x79,0xdc,0x8e,0x7d,0x30,0x66,0x68,0xe5,0xfb,
    0xdd,0xc1,0x6c,0x0f,0xe2,0xd3,0x06,0x3e,0x1f,0x7d,0x6c,0xbf,0x8b,0xb8,0x36,0xe2,
    0x6c,0xb6,0x7b,0x88,0x6b,0x27,0xce,0xcf,0xe3,0x9e,0xc4,0x3d,0x9f,0xe6,0xed,0xdf,
    0xbd,0xcd,0xfb,0xf7,0xc8,0xbc,0x03,0x3e,0x7f,0x45,0x7f,0xff,0xfe,0x3b,0xd0,0x63,
    0xef,0xc7,0x62,0x5c,0x81,0x3b,0x60,0x17,0xbe,0x73,0xf4,0xeb,0x7e,0xf0,0x91,0xb8,
    0x33,0x4e,0x5f,0x83,0xb9,0xdf,0x9f,0x31,0x87,0xe7,0xb2,0xe7,0x6f,0xd1,0xcb,0xfc,
    0x7e,0xc4,0x27,0x4f,0xcc,0x3e,0xd1,0xb0,0x1f,0x0d,0x9d,0xa2,0xe1,0x01,0x70,0xd7,
    0xd0,0x05,0xe6,0x1a,0x4a,0xa2,0xc1,0x6c,0xdd,0xdc,0x45,0x56,0xb7,0x5b,0x34,0x3c,
    0x48,0xed,0x8c,0x68,0xe8,0x01,0x77,0x0d,0xdf,0x80,0xb9,0x9f,0x69,0xf0,0x5c,0x25,
    0xd1,0x70,0x15,0x9f,0x0e,0x62,0xba,0x45,0xc3,0xc3,0x68,0x38,0x20,0x1a,0x7a,0xc1,
    0x5d,0xc3,0x23,0x60,0xae,0xa1,0x5f,0x34,0x98,0xad,0x2f,0x9d,0xbb,0x72,0xdd,0x3e,
    0xce,0x51,0x31,0xe5,0x2b,0xd7,0xbe,0x2a,0xdf,0x97,0x71,0x74,0xdf,0x7e,0xe1,0x78,
    0x0d,0xbf,0x12,0x71,0x7d,0xf0,0xb1,0x6f,0xf0,0x09,0xbe,0x3f,0x3f,0x73,0x4f,0xc2,
    0x79,0x48,0xce,0xdc,0x61,0xf0,0x73,0x9c,0xb9,0xa7,0xc1,0xae,0x11,0x77,0x34,0xf1,
    0x2a,0xc7,0x0d,0x13,0x67,0x3d,0x7d,0x16,0xfc,0x54,0x8c,0x1a,0x48,0xfd,0x2f,0xd7,
    0xb3,0xf8,0xc7,0xb0,0x7b,0xaf,0x8e,0x13,0x3f,0x22,0xbd,0x7a,0x0e,0xdc,0x7b,0xf5,
    0x3c,0x98,0xf7,0x6a,0x4c,0x7a,0x65,0xb6,0xd1,0xb8,0xc6,0xd1,0x3f,0x2a,0xf3,0x7e,
    0x81,0xda,0xb9,0xc4,0xa7,0x3a,0xdd,0x11,0x2f,0x82,0x1d,0x93,0xef,0x30,0x9b,0x38,
    0x15,0x92,0xfd,0x24,0x71,0xbe,0xde,0x89,0xb9,0x4e,0x24,0x2d,0xe5,0xd8,0x93,0x29,
    0xd7,0xb6,0xa4,0xeb,0x34,0x79,0x4e,0x71,0x17,0xe4,0xe5,0x0e,0xb2,0x99,0x8c,0xc1,
    0x69,0x5c,0xf4,0x9e,0x45,0xef,0x19,0xd1,0xfb,0x12,0xb8,0xeb,0x7d,0x19,0xcc,0xf5,
    0x4e,0x8a,0x5e,0xb3,0x4d,0xc4,0x35,0x49,0xee,0x09,0xd1,0xfb,0xaa,0xe8,0xfd,0x8a,
    0x5c,0xaf,0x81,0x0f,0xc1,0xc9,0xe3,0x26,0x39,0x27,0xe6,0xf3,0x3a,0x35,0xc7,0xf1,
    0x9f,0xa0,0xee,0xb4,0xd4,0x35,0x9f,0xa9,0x74,0x67,0x95,0xe3,0xa7,0xa4,0xee,0x1b,
    0xff,0xd1,0xe7,0x37,0x6f,0xd3,0xe7,0x19,0xe2,0x7c,0x5d,0xa0,0xcf,0xb3,0xc4,0xce,
    0x48,0x9f,0xdf,0x22,0xcf,0xec,0xff,0xf4,0xd9,0x39,0x4d,0xa3,0xc9,0x62,0x7e,0x22,
    0x66,0x92,0xf8,0xa9,0x8a,0x99,0x8c,0x89,0xef,0x16,0xb3,0x1c,0x25,0x6e,0x5a,0xe6,
    0xf5,0x36,0xf3,0x9a,0x93,0x79,0x9d,0x03,0xf7,0x79,0x9d,0x07,0xf3,0x79,0x2d,0x48,
    0xdf,0xce,0xa7,0x3b,0x3b,0x84,0x8b,0xd4,0x9d,0x17,0x5d,0x17,0xa8,0xbd,0x85,0xae,
    0x22,0x3d,0x72,0x5d,0x0b,0xc4,0x5c,0x14,0x3e,0xef,0xc2,0xe7,0x92,0xf0,0x79,0x0f,
    0xdc,0xf9,0xbc,0x0f,0xe6,0x7c,0x96,0x84,0x8f,0xd9,0x16,0xe3,0x5a,0x26,0xf7,0xa2,
    0xcc,0xf1,0x03,0xb8,0xe4,0xb8,0x0f,0x8d,0xe3,0xb7,0x82,0xfb,0x5d,0xb3,0x44,0xec,
    0xb2,0xdc,0x03,0x1f,0xc2,0xeb,0xb2,0xdc,0x03,0x1f,0x81,0xdf,0x24,0xff,0xc7,0x60,
    0xc3,0xc2,0xf5,0x13,0xf0,0x21,0xb8,0xae,0x0a,0x57,0xb3,0xad,0xc4,0xb5,0x4a,0xbd,
    0x15,0xe1,0xf5,0x1d,0x31,0x5b,0x72,0x4f,0xbb,0xdf,0xaa,0xcc,0xf6,0x3a,0x3e,0xcb,
    0xc4,0xac,0x08,0x9f,0x4f,0xe1,0xd3,0x2e,0x7c,0x3e,0x03,0x77,0x3e,0xeb,0xc2,0xc7,
    0x6c,0x6b,0x71,0xad,0x53,0x67,0x4d,0xf8,0x7c,0x4f,0xcc,0x75,0x66,0x68,0x7c,0xdc,
    0x6f,0x5d,0xf8,0xdc,0xc0,0x67,0x95,0x98,0x35,0xe1,0xf3,0x39,0x7c,0xe6,0x84,0xcf,
    0x17,0xe0,0xce,0x67,0x53,0xf8,0x98,0x6d,0x23,0xae,0x4d,0xea,0x6c,0x08,0x9f,0x1f,
    0xf8,0xff,0x70,0x43,0xce,0x93,0xfb,0x6d,0x0a,0x9f,0x5f,0xf0,0x59,0x27,0x66,0xa3,
    0x62,0xc6,0x4b,0xe2,0xfb,0x33,0xe7,0x61,0x91,0xb8,0xcd,0x8a,0x73,0xba,0x20,0xbe,
    0x37,0x39,0xdf,0xf3,0xc4,0x2d,0xa5,0xff,0x52,0xb9,0xf4,0x1f,0xca,0x6c,0x7f,0xc7,
    0xa9,0xf5,0xc6,0xf5,0x0f,0x4b,0xa6,0x81,0x02,0x84,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
