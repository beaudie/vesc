// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000045.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000045[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4b,0xde,0x55,
    0x18,0xc6,0xcf,0xf3,0xe2,0xf3,0x38,0xcd,0x97,0xa9,0x9b,0xb9,0x72,0x65,0x9b,0x50,
    0xb8,0x54,0xc8,0x96,0x69,0x1b,0xb9,0x96,0x1b,0x31,0x5c,0xe5,0x2a,0x85,0x62,0x93,
    0x5c,0xa5,0xb4,0x29,0xb5,0x8d,0x7e,0x0a,0xdb,0x94,0x68,0xab,0x94,0x90,0x15,0xa5,
    0x50,0xfa,0x43,0x69,0xdb,0x0f,0x41,0x3f,0x45,0x44,0x6d,0x98,0xeb,0xe5,0xdf,0x89,
    0x5e,0x20,0xe8,0xdc,0xe7,0xf9,0xdc,0xeb,0xe2,0xa1,0xd8,0x03,0x87,0xef,0xf7,0x5c,
    0xf7,0xdb,0x75,0xdd,0xe7,0xfe,0x1e,0x9e,0x5c,0x76,0x57,0x31,0x84,0x4c,0xa8,0x0a,
    0x95,0xe1,0xd7,0x50,0xfa,0x6d,0x0d,0xd9,0x88,0x84,0x50,0x1d,0x0a,0xe9,0x79,0xe8,
    0xc8,0xf0,0x91,0xce,0xd7,0xcf,0x8c,0x77,0xf6,0x3c,0xd8,0x6d,0xf6,0xda,0x90,0x4b,
    0x7e,0x66,0xab,0x0b,0xc5,0x90,0x8f,0x4f,0x5b,0xa7,0xc6,0x26,0x4e,0x1b,0x5e,0x13,
    0xd7,0xd5,0xb8,0xea,0xa3,0x9f,0xe1,0x45,0xcb,0x11,0xdf,0x6a,0x52,0x4e,0x8b,0x09,
    0xe1,0x70,0xa8,0x08,0x8d,0xd4,0xdb,0xc5,0xd3,0xb1,0x0c,0x58,0xa5,0x60,0x59,0xb0,
    0x7a,0xc1,0x72,0x60,0x4d,0x82,0xe5,0xc1,0x6e,0x17,0xac,0x02,0xec,0x4e,0xc1,0x0a,
    0x60,0x77,0x0b,0x56,0x04,0xdb,0x2d,0x58,0x25,0xd8,0xbd,0x82,0x6d,0x01,0xdb,0x23,
    0x58,0x15,0x58,0xb7,0x60,0xd5,0x60,0x3d,0x82,0xdd,0x06,0xd6,0x2b,0x58,0x0d,0xd8,
    0x23,0xa9,0x4f,0xb9,0x9b,0x7a,0xad,0x67,0x07,0xe3,0xf3,0x1e,0xfa,0xe3,0xfb,0x36,
    0xd9,0x5b,0x9f,0x77,0xb2,0x6f,0x8c,0x51,0xd9,0x64,0xcf,0xa5,0xde,0xd8,0xfb,0xb6,
    0xe8,0x53,0x40,0xa7,0xf5,0xb5,0x39,0xee,0x8b,0xe8,0x37,0xfb,0xf6,0xe8,0x59,0x85,
    0xdd,0x6c,0xd5,0x68,0xc9,0x27,0x2c,0x9f,0xf8,0x66,0xd0,0xd2,0xcf,0xbe,0x46,0x72,
    0xd5,0xe2,0xef,0xb5,0x1a,0xc8,0x15,0x12,0xaf,0xfa,0x9b,0x7d,0xf5,0x9a,0xb6,0x1a,
    0x6e,0xb1,0xdc,0xc7,0xea,0x37,0xd1,0xef,0x46,0xea,0x37,0xa5,0x3a,0x25,0xac,0x03,
    0x6d,0xdb,0xe1,0x63,0xfe,0xcd,0xd8,0x8a,0x62,0x6f,0x15,0x3d,0x3b,0xb1,0x37,0xa4,
    0xb9,0xc9,0xa6,0x5e,0x76,0xc0,0xdb,0xfb,0xec,0x71,0x1d,0xcc,0x8e,0xef,0xf7,0xa2,
    0xdd,0x74,0xef,0x87,0xa7,0xe5,0x6d,0x89,0x19,0x07,0xd8,0x67,0xc2,0xbf,0xbf,0x8c,
    0xec,0xef,0x88,0x7d,0x3e,0x10,0x9f,0x03,0xf0,0x78,0x0c,0xfc,0x00,0xba,0x6c,0x7f,
    0xb0,0xac,0xfe,0x60,0xd9,0x7e,0x88,0x3e,0x5b,0xfc,0x51,0x74,0x14,0xc4,0x7e,0x8c,
    0xbd,0xf1,0x7b,0x81,0xf7,0x9c,0xd8,0x4f,0x96,0xf5,0x65,0x86,0xf9,0xf6,0xfd,0xa5,
    0xb2,0xbe,0x5e,0x66,0x5e,0xad,0xde,0x15,0x72,0xed,0x87,0xef,0x15,0xbe,0xf1,0x5c,
    0xea,0x4b,0x45,0xe2,0x95,0x87,0xaf,0x61,0x7f,0x44,0xc4,0x7a,0xb7,0x8f,0x99,0xaa,
    0xa3,0x77,0x47,0x23,0x83,0x5a,0xbe,0xe3,0x3a,0x96,0xf7,0xea,0x34,0xb3,0xb9,0x15,
    0xfb,0x40,0xcc,0xd0,0xcc,0xb7,0xbc,0x8d,0x73,0xde,0x87,0x4f,0x0b,0xf8,0xf9,0xe8,
    0x63,0xfb,0x1d,0xc4,0xb5,0x10,0x67,0xe7,0x7c,0x17,0x71,0xad,0xc4,0xf9,0x6c,0x1a,
    0xfe,0x65,0xf4,0x69,0x93,0x3b,0xc0,0xce,0xfe,0xf7,0xc8,0xbc,0x1d,0x3e,0x7f,0x45,
    0x7f,0xbf,0x0b,0xda,0xd1,0x63,0xef,0x4f,0xc5,0xb8,0x02,0xf7,0xc1,0x0e,0x7c,0xdf,
    0xa4,0x5f,0xf7,0x81,0x3f,0x1d,0x77,0xc6,0xe9,0x2b,0x30,0xf7,0xfb,0x33,0xe6,0xf0,
    0x5c,0xf6,0xfc,0x2d,0x7a,0x99,0xdf,0x0f,0xf8,0x54,0x10,0xb3,0x5b,0x34,0xec,0x41,
    0x43,0x87,0x68,0xb8,0x1f,0xdc,0x35,0x74,0x82,0xb9,0x86,0x6e,0xd1,0x60,0xb6,0x2e,
    0xee,0x25,0xab,0xdb,0x25,0x1a,0x1e,0xa0,0x76,0x46,0x34,0xf4,0x80,0xbb,0x86,0xaf,
    0xc1,0xdc,0xcf,0x34,0x78,0xae,0x6e,0xd1,0x70,0x0d,0x9f,0x76,0x62,0xba,0x44,0xc3,
    0x43,0x68,0xd8,0x2b,0x1a,0x7a,0xc1,0x5d,0xc3,0xc3,0x60,0xae,0xa1,0x5f,0x34,0x98,
    0xad,0x2f,0xcd,0x5d,0xa9,0x6e,0x1f,0x73,0x54,0x4c,0xf9,0x4a,0xb5,0xaf,0xc9,0xb7,
    0x66,0x1c,0xdd,0xb7,0x5f,0x38,0x5e,0xc7,0xaf,0x9b,0xb8,0x3e,0xf8,0xd8,0x37,0xf8,
    0x38,0xdf,0x9f,0xcf,0xdc,0x21,0x38,0x0f,0xca,0xcc,0x1d,0x06,0x9f,0x61,0xe6,0x9e,
    0x00,0xbb,0x4e,0x9c,0x7d,0x93,0x4f,0x12,0x37,0x44,0x5c,0x21,0xf5,0xbb,0x84,0x8f,
    0xc7,0xfd,0x40,0xea,0x6d,0xa9,0xde,0xf1,0x98,0xc5,0xbe,0xa7,0x61,0x30,0xcb,0xf7,
    0x28,0xfe,0xde,0xbb,0x67,0xc8,0x77,0x4c,0x7a,0xf7,0x2c,0xb8,0xf7,0xee,0x39,0x30,
    0xef,0xdd,0xa8,0xf4,0xce,0x6c,0x23,0xa9,0x76,0xa9,0x1f,0x23,0x72,0xfe,0xcf,0x53,
    0x3b,0x97,0xfa,0x59,0x99,0xee,0x8c,0xe3,0x60,0xc3,0xf2,0x5d,0x66,0x13,0xff,0x42,
    0xb2,0x9f,0x20,0xce,0xd7,0x6c,0xcc,0x65,0xf8,0x18,0xb1,0x27,0x52,0xae,0x2d,0x49,
    0xd7,0x8b,0xe4,0x19,0xe3,0x6e,0xa8,0x90,0x3b,0xc9,0xce,0x68,0x14,0x4e,0xe3,0xa2,
    0xf7,0x25,0xf4,0x9e,0x14,0xbd,0x2f,0x83,0xbb,0xde,0x57,0xc0,0x5c,0xef,0xa4,0xe8,
    0x35,0xdb,0x44,0x5c,0x93,0xe4,0x9e,0x10,0xbd,0xaf,0x8a,0xde,0xab,0xe4,0x3a,0x05,
    0x3e,0x08,0x27,0x8f,0x9b,0x64,0x6e,0xda,0xd2,0xbd,0x54,0xaa,0x39,0x8e,0xff,0x04,
    0x75,0xa7,0xa5,0xae,0xf9,0x4c,0xc5,0x35,0x4d,0xfc,0x94,0xd4,0x7d,0xed,0x3f,0xfa,
    0x7c,0xe6,0x16,0x7d,0x3e,0x4b,0x9c,0xaf,0xb7,0xe9,0xf3,0x39,0x62,0xcf,0x4a,0x9f,
    0xdf,0x20,0xcf,0xb9,0xff,0xe9,0xb3,0x73,0x9a,0x46,0x93,0xc5,0xfc,0x48,0xcc,0x24,
    0xf1,0x53,0x65,0x67,0x32,0x2a,0xbe,0x1b,0x9c,0xe5,0x08,0x71,0xd3,0x72,0x5e,0x6f,
    0x71,0x5e,0x33,0x72,0x5e,0xe7,0xc1,0xfd,0xbc,0x2e,0x80,0xf9,0x79,0xcd,0x49,0xdf,
    0x2e,0xa4,0x19,0x0a,0xe1,0x22,0x75,0x67,0x45,0xd7,0x3b,0xd4,0xde,0x40,0x57,0x91,
    0x1e,0xb9,0xae,0x39,0x62,0x2e,0x0a,0x9f,0x77,0xe1,0x73,0x49,0xf8,0xbc,0x07,0xee,
    0x7c,0xde,0x07,0x73,0x3e,0x0b,0xc2,0xc7,0x6c,0xf3,0x71,0x2d,0x92,0x7b,0x5e,0xce,
    0xf1,0x03,0xb8,0xe4,0xb8,0x1f,0x8d,0xe3,0x37,0x82,0xfb,0xdd,0xb3,0x40,0xec,0xa2,
    0xdc,0x0b,0x1f,0xc2,0xeb,0xb2,0xdc,0x0b,0x1f,0x81,0x6f,0x92,0xff,0x63,0xb0,0x21,
    0xe1,0xfa,0x09,0xf8,0x20,0x5c,0x97,0x85,0xab,0xd9,0x96,0xe2,0x5a,0xa6,0xde,0x92,
    0xf0,0xfa,0x96,0x98,0x0d,0xb9,0xb7,0xdd,0x6f,0x59,0xce,0x76,0x13,0x9f,0x45,0x62,
    0x96,0x84,0xcf,0xa7,0xf0,0x69,0x15,0x3e,0x9f,0x81,0x3b,0x9f,0x55,0xe1,0x63,0xb6,
    0x95,0xb8,0x56,0xa9,0xb3,0x22,0x7c,0xbe,0x23,0x66,0x93,0x33,0x34,0x3e,0xee,0xb7,
    0x2a,0x7c,0x6e,0xe0,0xb3,0x4c,0xcc,0x8a,0xf0,0xf9,0x1c,0x3e,0x33,0xc2,0xe7,0x0b,
    0x70,0xe7,0xb3,0x2e,0x7c,0xcc,0xb6,0x16,0xd7,0x3a,0x75,0xd6,0x84,0xcf,0xf7,0xfc,
    0x9f,0xb8,0x21,0xf3,0xe4,0x7e,0xeb,0xc2,0xe7,0x17,0x7c,0x56,0x89,0x59,0x2b,0x3b,
    0xe3,0x05,0xf1,0xfd,0x99,0x79,0x98,0x27,0x6e,0xbd,0x6c,0x4e,0xe7,0xc4,0xf7,0x27,
    0xe6,0x7b,0x96,0xb8,0x85,0xf4,0xdf,0x2a,0x97,0xfe,0x53,0x99,0xed,0xef,0x78,0x6a,
    0xbd,0x71,0xfd,0x03,0x02,0xd6,0xe2,0x03,0xa0,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
