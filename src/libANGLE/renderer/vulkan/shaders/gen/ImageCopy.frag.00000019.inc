// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000019.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000019[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0xe4,0x21,0xa2,0x84,0x8a,0x25,0x4a,0x96,0x18,
    0x62,0x81,0x91,0x40,0x49,0x46,0x92,0x51,0x0a,0x9a,0x95,0x50,0x46,0x92,0x8f,0x42,
    0x2a,0x31,0xd3,0x24,0x14,0x53,0xb4,0xb4,0x92,0xf2,0xd1,0x4b,0xac,0x44,0x2b,0x41,
    0xeb,0xbf,0xe8,0x2f,0x6a,0x7a,0xcc,0x34,0xd3,0x5e,0xe7,0xfe,0x16,0xf3,0xcd,0x1d,
    0x2b,0x66,0xf6,0x9c,0xbb,0xbe,0xb5,0xf6,0xb7,0xbf,0xb5,0xd6,0x3e,0xeb,0x90,0x4c,
    0x2c,0x4b,0x47,0xc9,0x9c,0xa8,0x30,0xca,0x8f,0x7e,0x89,0x32,0x7f,0x73,0xa3,0x44,
    0x94,0x13,0x9e,0x45,0x51,0x2a,0x7e,0x6e,0xec,0xda,0xda,0x55,0x3f,0x7c,0x70,0xa0,
    0xbe,0xb1,0xa9,0xc1,0xfc,0x25,0x51,0x32,0x8e,0x33,0x5f,0x69,0x94,0x8e,0x72,0xc3,
    0xd3,0xd6,0xfe,0xfe,0x7d,0x43,0x86,0x17,0x87,0x75,0x3b,0xac,0xb2,0x10,0x67,0x78,
    0xda,0x38,0xc2,0xaf,0xe2,0x98,0xd3,0xf6,0x44,0x51,0x67,0x94,0x17,0xcd,0xe3,0xbc,
    0x65,0x3c,0x1d,0xcb,0x01,0xcb,0x17,0x2c,0x01,0x56,0x26,0x58,0x12,0xac,0x42,0xb0,
    0x5c,0xb0,0xbb,0x04,0xcb,0x03,0x5b,0x2c,0x58,0x0a,0xec,0x1e,0xc1,0xd2,0x60,0xcb,
    0x05,0xcb,0x07,0xbb,0x4f,0xb0,0x02,0xb0,0x55,0x82,0x15,0x82,0x35,0x08,0x56,0x04,
    0xd6,0x28,0xd8,0x1c,0xb0,0x66,0xc1,0x8a,0xc1,0x5a,0xe3,0x3a,0x25,0x67,0xf3,0xb5,
    0x9a,0x6d,0x08,0xcf,0x1a,0xea,0xe3,0xf6,0x52,0xb1,0xad,0xce,0x4b,0xb0,0xe7,0x85,
    0x5d,0x89,0xd8,0x9f,0x8c,0x6b,0x63,0xbf,0xe7,0x87,0x98,0x14,0x79,0x5a,0x5d,0x2b,
    0x83,0x9d,0x26,0xff,0x44,0x8c,0xe7,0xc6,0x39,0xa6,0x59,0x0b,0xc2,0xce,0x42,0xe2,
    0x2d,0xb6,0x88,0xdc,0x72,0x89,0x9d,0x03,0x8f,0xe1,0x2d,0xd8,0xc5,0xc2,0x5d,0x42,
    0xbc,0x9f,0x5d,0x0e,0x57,0x14,0xeb,0x2c,0x9b,0xad,0xb3,0x6b,0xb0,0x55,0xfe,0x3f,
    0xcb,0x63,0xec,0xfc,0x0a,0xea,0x3f,0x8f,0xf3,0x2b,0xe2,0x73,0x32,0x58,0x1d,0xb9,
    0x2e,0x40,0x8f,0xc5,0x57,0xe2,0x4b,0x8b,0xbf,0x5a,0xf2,0x59,0x82,0xbf,0x3c,0xbe,
    0x47,0x89,0xb8,0xb6,0x75,0xe8,0xf6,0xba,0x5b,0xdc,0xbd,0xa2,0xd9,0x79,0xea,0xb8,
    0x5b,0x1e,0xbf,0x86,0x73,0xdd,0xbf,0x96,0xda,0x58,0x5d,0x1e,0xe5,0x0c,0x3f,0xf7,
    0x31,0xf8,0x0c,0xaf,0x0a,0x0a,0xda,0xf1,0xe7,0x70,0x66,0xf6,0xd3,0xf6,0x3c,0xce,
    0xef,0x76,0x72,0x37,0x7b,0x03,0x98,0x9f,0xd9,0x91,0x65,0x6f,0xe2,0x3d,0xb1,0xfd,
    0x4f,0x93,0x6b,0x0a,0x4d,0xcf,0xf2,0x3b,0x29,0xf1,0x3d,0xf4,0xce,0xed,0xed,0x92,
    0xb3,0xe9,0xeb,0x13,0xbe,0x97,0xc8,0xa1,0x1c,0xbe,0x57,0xf8,0xad,0x7c,0x7b,0x89,
    0x31,0xff,0x08,0x5c,0x5e,0x83,0xf7,0xf1,0x8d,0x48,0xfc,0x18,0xef,0x9c,0xdb,0xe7,
    0xb2,0x7a,0x7b,0x99,0x77,0xc8,0xf5,0x5c,0x97,0x7b,0x7c,0x8b,0xb3,0x47,0xa8,0xcf,
    0x2d,0xe6,0x50,0x32,0xee,0x45,0x5e,0x1c,0x97,0x4b,0x7d,0x0c,0xfb,0x23,0x20,0x79,
    0xc4,0xe6,0xcb,0x3d,0x71,0x7b,0x91,0xd8,0xd6,0xaf,0xf5,0x62,0x9b,0xf6,0x51,0xb1,
    0xed,0x7e,0x5c,0xc2,0x6e,0xe3,0xbd,0x29,0xa5,0xff,0x9b,0x03,0x5a,0xc2,0xec,0x2a,
    0x65,0x79,0x6f,0x87,0x78,0x1f,0xe7,0xe2,0x6f,0x0f,0x8a,0x2a,0x99,0x5f,0xf3,0xb9,
    0xcb,0x6d,0xc4,0x54,0x81,0x9f,0x08,0x31,0x66,0x2f,0x64,0x5f,0x55,0x7c,0x8f,0x92,
    0xb1,0xfe,0x85,0x12,0xbf,0x98,0x9c,0xcc,0xb7,0x08,0xdb,0xf8,0xed,0xce,0xdf,0x0d,
    0x7f,0x35,0xf1,0xfe,0x9e,0x1a,0x3e,0x1d,0x62,0x96,0xca,0x7c,0xb4,0xf7,0xe0,0xf7,
    0xc0,0x51,0x8b,0xee,0xbf,0x42,0xbc,0xcf,0xc9,0x5a,0xea,0xb8,0x1c,0x6e,0xab,0xc3,
    0x0a,0x6a,0x57,0x03,0x77,0x8a,0xf9,0xb9,0x22,0xae,0x59,0xc6,0xbe,0x1f,0xcc,0xf7,
    0xac,0x94,0x3d,0xa6,0x77,0x25,0x31,0x7f,0x06,0x6e,0x3f,0xa3,0x56,0xf4,0xaf,0x42,
    0x7f,0x9d,0xe8,0x7f,0x00,0xdc,0xf5,0xd7,0x83,0xb9,0xfe,0x06,0xd1,0x6f,0xbe,0xd5,
    0xcc,0x6b,0xe3,0x5e,0x2d,0x5a,0x1e,0x44,0xcb,0x1a,0xd1,0xff,0x10,0xb8,0xeb,0x6f,
    0x04,0xf3,0x3d,0x4d,0xb2,0xc7,0xf4,0x37,0x11,0x63,0xfa,0xfd,0x8c,0x06,0xd1,0xff,
    0x30,0xfa,0xd7,0x8a,0xfe,0x66,0x70,0xd7,0xff,0x08,0x98,0xeb,0x6f,0x11,0xfd,0xe6,
    0x5b,0x17,0xdf,0xbd,0x0c,0xf7,0x3a,0xe9,0x7b,0x2b,0x5a,0xec,0xde,0x65,0xee,0x63,
    0x06,0x6b,0x95,0x79,0xe2,0x77,0xa2,0x0d,0x8d,0xce,0xd3,0x02,0x8f,0xcd,0x98,0x27,
    0x98,0x2f,0x7e,0x27,0x9f,0x44,0x73,0x87,0x9c,0xb5,0x11,0xdc,0xed,0x4e,0xce,0x3e,
    0xce,0x1d,0x7d,0x8a,0x98,0x4e,0x78,0x6c,0x06,0x75,0xc1,0xb3,0x49,0xea,0xfb,0x0c,
    0x78,0x77,0x88,0x49,0xc5,0xda,0x33,0x7b,0x23,0xc1,0xb6,0x80,0xe5,0xc4,0xbf,0x53,
    0xf1,0xfc,0xea,0x26,0x76,0x0b,0x1c,0x7e,0xc6,0x56,0xce,0xe8,0x91,0x33,0xb6,0x81,
    0xef,0x0c,0xca,0x6c,0xee,0x3e,0x47,0x8e,0xdd,0xcc,0x90,0x6d,0xd4,0x65,0x3d,0x3e,
    0xef,0xd5,0xf3,0x70,0x6d,0x97,0x5e,0xbd,0x00,0xee,0xbd,0x7a,0x11,0xcc,0x7b,0xd5,
    0x2b,0xbd,0x32,0xdf,0x8e,0xb0,0xf6,0x50,0xe3,0x1d,0x70,0xdb,0xfc,0x7c,0x99,0xb9,
    0xd2,0x27,0xdc,0x3b,0xc1,0xdb,0xf8,0x6e,0xf4,0x13,0xb3,0x39,0x4c,0x25,0x9b,0xb1,
    0xaf,0x82,0xf5,0xcb,0x1c,0x49,0x50,0x13,0xf3,0xef,0x82,0xc3,0xd7,0xc9,0x70,0x96,
    0xe1,0x03,0xec,0xdd,0x25,0xdc,0xaf,0xcd,0x72,0x17,0xc4,0xf6,0x6e,0xb0,0x01,0x66,
    0x65,0x9e,0x7c,0x23,0xbc,0x36,0xbb,0xb9,0x33,0xbd,0xe4,0xb3,0x47,0x6a,0xb5,0x8f,
    0x5a,0xed,0x95,0x7c,0x5e,0x07,0xf7,0x5a,0xbd,0x01,0xe6,0xb5,0xda,0x2f,0xb5,0x32,
    0xdf,0xa0,0xfd,0x2f,0x09,0xf7,0xa0,0xd4,0x6a,0xe8,0x0e,0xb5,0x7a,0x13,0x7c,0x06,
    0xee,0xb7,0xc0,0x6a,0xd0,0xe8,0x3c,0xf6,0xfc,0x2d,0xf4,0xdd,0x62,0xde,0x46,0xc3,
    0x1e,0xe2,0x07,0xd1,0x31,0x2c,0x3a,0x2c,0xe6,0x40,0x58,0xc3,0xec,0x3f,0x20,0x3a,
    0x0e,0xde,0x41,0xc7,0x3b,0xe0,0x5e,0xd7,0x43,0x59,0x3d,0x7b,0x17,0xec,0xd0,0xbf,
    0xf4,0xec,0x30,0x1c,0xbe,0xc6,0xe9,0xd9,0x11,0xf6,0x1e,0x16,0xee,0xf7,0xb2,0x7a,
    0x76,0x14,0xec,0xc8,0x7f,0xf4,0xec,0x28,0xf5,0xf0,0x7c,0x86,0xb3,0x7a,0xd8,0x2b,
    0xfc,0xc7,0xe0,0x1f,0xe1,0x9b,0x7d,0x1c,0xcc,0xb8,0x46,0xb1,0xbd,0xdf,0x27,0xe8,
    0xf7,0x98,0xd4,0xe2,0x03,0x70,0xef,0xf7,0x49,0x30,0xef,0xf7,0xb8,0xd4,0xd9,0x7c,
    0xa7,0xc2,0x3a,0x8b,0x8e,0x53,0xf0,0xd8,0xb9,0xa7,0xf9,0xc6,0xfa,0x1c,0x3b,0x03,
    0x76,0x5a,0xbe,0xe1,0x1e,0xfb,0xe1,0x6c,0x6c,0x41,0x6c,0x7f,0x04,0x76,0x46,0x6a,
    0x92,0x90,0x9a,0x8c,0x12,0x63,0x35,0x18,0xe7,0xec,0xb3,0x92,0xd7,0xc7,0xe4,0x75,
    0x4e,0xf2,0xfa,0x04,0xdc,0xf3,0xfa,0x14,0xcc,0xf3,0x9a,0x90,0xbc,0xcc,0x77,0x3e,
    0xac,0x8b,0x70,0x9f,0x97,0x6f,0xc5,0x67,0x68,0xed,0x93,0xd9,0xf4,0x39,0xb8,0xc7,
    0x5c,0x20,0xc6,0xbf,0x87,0x17,0x88,0x31,0xbd,0x13,0x70,0x5e,0x94,0x79,0xf7,0x05,
    0x7a,0x2f,0x0b,0xe7,0x97,0xe0,0xb6,0xff,0x12,0xb6,0xfb,0xbe,0xe2,0xff,0x95,0x5f,
    0x99,0xad,0x5f,0x83,0xf5,0x48,0x7e,0xdf,0x80,0x77,0x90,0xdf,0xa4,0xe4,0x67,0xbe,
    0x2b,0x61,0x4d,0xa2,0xe5,0x8a,0x68,0xbf,0x8a,0x76,0xff,0x16,0x5e,0x85,0xc3,0xb4,
    0x7b,0xfc,0xa4,0x68,0xf9,0x36,0x4b,0xcb,0x77,0x60,0xd5,0xa2,0xe5,0x7b,0x70,0xd7,
    0x32,0x25,0x5a,0xcc,0x77,0x2d,0xac,0x29,0xb8,0xaf,0x89,0x96,0x1b,0x68,0xb9,0x8e,
    0x96,0x1b,0xa2,0xc5,0xe3,0xa7,0x44,0xcb,0x0f,0x59,0x5a,0x7e,0x04,0x1b,0x13,0x2d,
    0x3f,0x81,0xbb,0x96,0x69,0xd1,0x62,0xbe,0x9b,0x71,0x6c,0x86,0xfb,0xa6,0x68,0x99,
    0x91,0xbe,0x9b,0x96,0x19,0xfe,0xbf,0x33,0x2d,0x1e,0x3f,0x9d,0xd5,0xe3,0x89,0xac,
    0x3b,0x3a,0x2e,0x77,0xfe,0x67,0xf8,0x8c,0xeb,0x36,0xf6,0xdf,0x61,0xb2,0x34,0x87,
    0xf5,0x0f,0x64,0xee,0xc9,0x97,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
