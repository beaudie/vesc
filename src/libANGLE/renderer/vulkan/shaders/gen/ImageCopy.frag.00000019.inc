// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000019.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000019[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfb,0x4f,0x96,0x65,
    0x18,0xc7,0x9f,0xf7,0x7d,0xde,0x03,0x42,0x1c,0x04,0x94,0xb0,0xb0,0x3c,0xb0,0xd5,
    0x30,0x78,0x57,0x64,0x04,0xe9,0x86,0x19,0xba,0xa2,0x83,0xd1,0x32,0xa5,0x3c,0x24,
    0xac,0xe9,0x82,0x42,0x0d,0x56,0x41,0x07,0x2c,0xd6,0x20,0x83,0x1f,0xd2,0x14,0xd6,
    0x98,0xb5,0x82,0x4d,0xe1,0x87,0x82,0xe9,0x0f,0x6d,0xfd,0xd4,0x5c,0x2b,0x5b,0x69,
    0x87,0xbf,0xa4,0x75,0xd8,0xda,0xba,0xae,0xfb,0xfd,0x5c,0xee,0xda,0xbb,0x9a,0x6c,
    0xf7,0x9e,0xf7,0xfe,0x5e,0xa7,0xef,0xf7,0xba,0xaf,0xe7,0x7e,0x88,0x93,0x1b,0xb2,
    0x51,0x94,0x88,0x8a,0xa3,0xa2,0xe8,0xb7,0x28,0xff,0xb7,0x32,0x4a,0x0a,0x92,0x7f,
    0xde,0x2d,0xcf,0x92,0x28,0x13,0xf6,0x3b,0x3a,0xbb,0x3a,0x1b,0x8f,0x1d,0xef,0x69,
    0x6c,0xbe,0x37,0xa7,0x7e,0x65,0x51,0x1c,0xfc,0xd5,0x56,0x1e,0x65,0xa3,0x94,0x3c,
    0x75,0xf5,0x1d,0x3c,0xdc,0xaf,0x78,0xa9,0xac,0x4b,0xb2,0x2a,0xc4,0x4f,0xf1,0xac,
    0xe6,0x90,0x5f,0xa5,0x21,0xa7,0xc6,0x44,0xd1,0xce,0x28,0x1d,0x55,0x51,0x77,0x03,
    0x4f,0xc3,0x12,0x60,0x45,0x0e,0x4b,0x82,0x55,0x38,0x2c,0x06,0xab,0x76,0x58,0x0a,
    0xec,0x66,0x87,0xa5,0xc1,0x6e,0x75,0x58,0x06,0xec,0x76,0x87,0x65,0xc1,0x36,0x3a,
    0xac,0x08,0xec,0x0e,0x87,0xad,0x00,0xdb,0xe4,0xb0,0x62,0xb0,0x9c,0xc3,0x4a,0xc0,
    0x9a,0x1d,0x76,0x13,0x58,0x8b,0xc3,0x4a,0xc1,0x1e,0x08,0x7d,0x8a,0xaf,0xeb,0xd5,
    0x9e,0x6d,0x97,0xe7,0x7a,0xfa,0x63,0xfb,0x75,0x6e,0xaf,0x7d,0x5e,0xcb,0xbe,0x4a,
    0xa2,0x92,0xc1,0x1e,0x87,0xde,0xe8,0xef,0x55,0xe2,0x93,0x41,0xa7,0xf6,0xb5,0x46,
    0xf6,0x59,0xf4,0xab,0x7d,0xb5,0x78,0x16,0x63,0x57,0x5b,0x09,0x5a,0x52,0x01,0x4b,
    0x05,0xbe,0x09,0xb4,0xb4,0xb1,0x2f,0x75,0xb9,0xca,0xf0,0xb7,0x5a,0x95,0xe4,0x8a,
    0x02,0xaf,0x8a,0xeb,0x7d,0xb5,0x9a,0xba,0x2a,0x6f,0xb0,0xcc,0x47,0xeb,0x57,0xd3,
    0xef,0x2a,0xea,0x57,0x87,0x3a,0x79,0xac,0x01,0x6d,0xab,0xe1,0xa3,0xfe,0x35,0xd8,
    0xb2,0xce,0x5e,0xe7,0xf4,0xac,0xc5,0x5e,0x19,0xe6,0x26,0x19,0x7a,0xd9,0x00,0x6f,
    0xeb,0xb3,0xc5,0x35,0x30,0x3b,0xb6,0xdf,0x8c,0x76,0xd5,0xbd,0x95,0x1c,0x9a,0xb7,
    0x56,0x32,0xb6,0xb3,0x4f,0x90,0xa3,0xf0,0x79,0x8b,0xf4,0x79,0x9b,0x3c,0xdb,0xe1,
    0xf1,0x20,0xf8,0x36,0x74,0xe9,0x7e,0x7b,0x41,0xfd,0x8e,0x82,0x7d,0x27,0x33,0xaf,
    0xf1,0x8f,0xa2,0x23,0x03,0x9f,0x5d,0x9c,0x43,0xcc,0x7e,0x37,0xb6,0xd8,0xc5,0x77,
    0x73,0x4e,0xb6,0x3f,0xe0,0xe2,0x8f,0xc0,0xdf,0xfb,0x1f,0xa5,0x8f,0x6a,0x1f,0xc3,
    0x37,0xe5,0xec,0x13,0xbc,0x1f,0xb6,0x3f,0x5d,0x70,0x2e,0xe7,0x98,0x77,0xe5,0x7b,
    0x91,0xdc,0x63,0xe8,0xbd,0xc8,0x1d,0x11,0x87,0xbe,0xa6,0x03,0xaf,0x14,0x7a,0x15,
    0xfb,0x53,0x10,0xed,0xfd,0x16,0x66,0xb2,0x9c,0xde,0x3f,0x2e,0x8c,0xca,0xb8,0x07,
    0xca,0x59,0xd6,0xe7,0x7e,0x66,0x7b,0x25,0xf6,0x76,0xc9,0x50,0xc3,0x5d,0xb0,0x8a,
    0x39,0xd9,0x82,0x4f,0x2d,0xf8,0xa8,0xf8,0xe8,0x7e,0x0d,0x71,0xb5,0xc4,0xe9,0x9c,
    0xdc,0x46,0x5c,0x1d,0x71,0x36,0xdb,0x8a,0x9f,0x17,0x9f,0x75,0xee,0x0e,0xd1,0xd9,
    0xf9,0x43,0x98,0xd7,0xc3,0xe7,0x6f,0xf1,0xb7,0xbb,0xa4,0x1e,0x3d,0xfa,0x7b,0x97,
    0xc4,0x65,0xb8,0x4f,0xd6,0xe0,0xfb,0x06,0xfd,0xba,0x13,0xfc,0x49,0xd9,0x29,0xa7,
    0xaf,0xc0,0xcc,0xef,0x2f,0xc9,0x61,0xb9,0xf4,0xf9,0xbb,0x78,0xa9,0xdf,0xf7,0xf8,
    0xa4,0x89,0xd9,0xe8,0x34,0x6c,0x42,0x43,0x83,0xd3,0x70,0x17,0xb8,0x69,0x68,0x04,
    0x33,0x0d,0x39,0xa7,0x41,0x6d,0x4d,0xdc,0x6b,0x5a,0xb7,0xc9,0x69,0xb8,0x87,0xda,
    0x09,0xa7,0xa1,0x19,0xdc,0x34,0x7c,0x0d,0x66,0x7e,0xaa,0xc1,0x72,0xe5,0x9c,0x86,
    0x2b,0xf8,0xd4,0x13,0xd3,0xe4,0x34,0xdc,0x87,0x86,0xcd,0x4e,0x43,0x0b,0xb8,0x69,
    0xb8,0x1f,0xcc,0x34,0xb4,0x39,0x0d,0x6a,0x6b,0x0d,0x73,0x97,0xaf,0xdb,0xca,0x1c,
    0x65,0x43,0xbe,0x7c,0xed,0x2b,0xee,0x5d,0x55,0x8e,0xe6,0xdb,0xe6,0x38,0xfe,0x80,
    0x5f,0x8e,0xb8,0x56,0xf8,0xe8,0x3b,0xfc,0x10,0xef,0xaf,0xcd,0xdc,0x0e,0x38,0x77,
    0xb8,0x99,0xdb,0x09,0xfe,0x16,0x33,0xf7,0x30,0x98,0xe6,0x7d,0x89,0xbb,0xf4,0x11,
    0x70,0xcd,0xa3,0xef,0xf8,0x63,0xe4,0xe9,0x24,0x4f,0x26,0x70,0xcf,0xe3,0x1a,0xa3,
    0xef,0xfc,0x13,0x60,0x7a,0x2e,0xc5,0xa1,0xf7,0xf9,0x3c,0x91,0xc3,0xba,0xc0,0x12,
    0xc1,0x3f,0x13,0xee,0x8b,0xa7,0xf0,0xed,0x22,0x47,0x8f,0xe4,0xd3,0xfb,0xe9,0x69,
    0xf4,0xbc,0x20,0xb1,0x7a,0x8f,0x3c,0x03,0xd6,0x41,0x4d,0x8d,0xdd,0x03,0xfe,0x9e,
    0xf8,0xe8,0x7e,0x2f,0xf9,0xf6,0x38,0xee,0xcf,0xc2,0xbd,0xdb,0x71,0x7f,0x0e,0xdc,
    0xb8,0xef,0x03,0xdb,0x2d,0x1d,0xd1,0x3b,0x75,0x3f,0xb5,0xf7,0xc2,0x75,0x9f,0x9b,
    0x83,0x83,0xe4,0x3b,0xe0,0xe6,0xe0,0x79,0x70,0x9b,0x83,0x43,0x60,0x36,0x07,0xbd,
    0x6e,0x0e,0x0e,0x05,0x8d,0x51,0x34,0xc0,0xd9,0xf6,0xd0,0x1f,0xcd,0x73,0x98,0xda,
    0x71,0xe8,0x65,0x51,0xb8,0x0f,0x5f,0x04,0xdb,0xef,0xee,0x98,0x24,0xfd,0x53,0x7b,
    0x1f,0x71,0xb6,0xde,0x91,0x5c,0x47,0xc2,0x3d,0x94,0x8f,0xed,0x0b,0xb9,0x56,0x04,
    0x5d,0x2f,0x93,0xa7,0x9f,0x7b,0x2e,0xed,0xee,0x67,0x9d,0xb7,0x5e,0x38,0x0d,0x38,
    0xbd,0xc7,0xd0,0x7b,0xd4,0xe9,0x3d,0x0e,0x6e,0x7a,0x5f,0x01,0x33,0xbd,0x43,0x4e,
    0xaf,0xda,0x06,0x65,0x0d,0x91,0x7b,0xd0,0xe9,0x7d,0xd5,0xe9,0xbd,0x40,0xae,0xd7,
    0xc0,0xd7,0xc3,0xc9,0xe2,0x86,0x78,0x07,0xd4,0xe7,0x75,0x6a,0x0e,0xe0,0x3f,0x48,
    0xdd,0x11,0x57,0x57,0x7d,0x86,0x65,0x8d,0x10,0x3f,0xec,0xea,0xbe,0xf9,0x1f,0x7d,
    0x7e,0xfb,0x06,0x7d,0x1e,0x25,0xce,0xd6,0x18,0x7d,0x3e,0x41,0xec,0xa8,0xeb,0xf3,
    0xbb,0xe4,0x39,0xf1,0x3f,0x7d,0x36,0x4e,0x23,0x68,0xd2,0x98,0x9f,0x88,0x19,0x22,
    0x7e,0xb8,0xe0,0x4c,0x7a,0x9d,0xef,0x8f,0x9c,0x65,0x0f,0x71,0x23,0xc1,0x3f,0xff,
    0x7d,0x1c,0xc7,0x6e,0xe7,0xf7,0x3e,0xe7,0x37,0xe1,0xce,0xef,0x24,0xb8,0x9d,0xdf,
    0x07,0x60,0x76,0x7e,0x53,0xae,0x8f,0x6a,0x9b,0x94,0x75,0x0a,0x1e,0x93,0xe8,0xd4,
    0x5a,0x1f,0x52,0x6f,0x1c,0x9d,0x59,0x7a,0x66,0x3a,0xa7,0x88,0x39,0xe5,0xf8,0x7c,
    0x04,0x9f,0xd3,0x8e,0xcf,0x19,0x70,0xe3,0x73,0x16,0xcc,0xf8,0xcc,0x38,0x3e,0x6a,
    0x9b,0x96,0x35,0x4b,0xee,0x69,0xf7,0x2d,0xf8,0x18,0x2e,0x31,0x77,0xbf,0x72,0xfc,
    0xc6,0xe1,0x76,0xaf,0xce,0x10,0x3b,0xeb,0xee,0x89,0x4f,0xe0,0x75,0xce,0xdd,0x13,
    0x9f,0x82,0x5f,0x26,0xff,0x67,0x60,0xdd,0x8e,0xeb,0xe7,0xe0,0x1d,0x70,0x9d,0x77,
    0x5c,0xd5,0x36,0x27,0x6b,0x9e,0x7a,0x73,0x8e,0xd7,0x65,0x62,0xc6,0xdd,0x37,0xc9,
    0xfc,0xe6,0x39,0x6b,0xf5,0xbb,0x8a,0xcf,0x2c,0x31,0x73,0x8e,0xcf,0x79,0xf8,0xd4,
    0x39,0x3e,0x17,0xc0,0x8d,0xcf,0xa2,0xe3,0xa3,0xb6,0x05,0x59,0x8b,0xd4,0x59,0x70,
    0x7c,0xbe,0x25,0xe6,0x2a,0x67,0xa8,0x7c,0xcc,0x6f,0xd1,0xf1,0xb9,0x86,0xcf,0x3c,
    0x31,0x0b,0x8e,0xcf,0x17,0xf0,0x99,0x70,0x7c,0xbe,0x04,0x37,0x3e,0xcb,0x8e,0x8f,
    0xda,0x96,0x64,0x2d,0x53,0x67,0xc9,0xf1,0xf9,0x8e,0xff,0x95,0xae,0xb9,0x79,0x32,
    0xbf,0x65,0xc7,0xe7,0x57,0x7c,0x16,0x89,0x59,0x2a,0x38,0xe3,0x19,0xe7,0xfb,0x0b,
    0xf3,0x30,0x4d,0xdc,0x72,0xc1,0x9c,0x4e,0x39,0xdf,0x9f,0x99,0xef,0x49,0xe2,0x34,
    0xcf,0x56,0x61,0x72,0x09,0xdb,0x3f,0x72,0x6a,0x2d,0xb2,0xfe,0x05,0xe7,0x26,0x97,
    0x41,0xc4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
