// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/GenerateFragmentShadingRate.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kGenerateFragmentShadingRate_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x96,0xdd,0x6f,0x94,0x55,
    0x10,0xc6,0xcf,0xd9,0xdd,0xee,0xb2,0xa8,0x6b,0x1b,0x91,0x7e,0xb0,0xdd,0x22,0xd8,
    0x68,0xca,0x06,0x34,0xa8,0x69,0x62,0x4c,0xf5,0xaa,0xc6,0x00,0x69,0xe2,0x45,0xaf,
    0x4d,0xbd,0xf1,0x42,0x31,0xc1,0xcb,0x5e,0x60,0x4c,0xa3,0x17,0x80,0x1a,0x8d,0x1f,
    0x25,0x7e,0xd0,0x0b,0x03,0x37,0xb5,0x24,0x7e,0x40,0xcb,0x9f,0xa0,0xe2,0x27,0x89,
    0x8a,0x8a,0x42,0xa2,0x12,0x8c,0x44,0x40,0xb0,0x8d,0xe8,0xcc,0x39,0xbf,0xa9,0xe3,
    0x6b,0xe3,0x26,0x27,0xe7,0x9d,0x67,0xe6,0x3c,0xf3,0xcc,0x39,0xf3,0x9e,0x77,0xcb,
    0xa5,0x8d,0xb5,0x10,0x62,0x58,0x1d,0x56,0x85,0x76,0x0c,0xe9,0xd7,0x15,0x4a,0x21,
    0x32,0xdf,0x2e,0xf3,0x35,0xa1,0x9a,0xec,0xd1,0x6d,0x0f,0x6e,0xdb,0xbc,0xeb,0x89,
    0x87,0x37,0xdf,0x71,0xe7,0x6d,0x1a,0xd7,0x08,0xe5,0x14,0xaf,0xbe,0xeb,0x25,0xa6,
    0x43,0xe6,0x8a,0x8c,0x47,0x1f,0x7a,0xe4,0x31,0xc5,0xf7,0xc9,0xe8,0x14,0xbc,0x92,
    0xb8,0x42,0x58,0xcf,0xd0,0xf8,0xfb,0x25,0xba,0x37,0xa7,0x0b,0x1b,0x99,0x0d,0x8b,
    0x60,0x15,0x87,0x95,0xc0,0x56,0x39,0xac,0x0c,0x76,0xad,0xc3,0x2a,0x60,0x9d,0xaa,
    0x57,0xac,0x75,0x32,0x57,0x65,0xac,0x21,0xa6,0xb9,0x42,0xce,0xe6,0x0a,0x39,0x9b,
    0x2b,0xe4,0x6c,0xae,0x90,0xb3,0x59,0xc8,0x69,0x58,0x07,0x98,0xcf,0x5b,0x05,0xeb,
    0x71,0x58,0x0d,0xac,0x99,0xf4,0x96,0x97,0xf3,0xaa,0xf6,0x7d,0x69,0xef,0xcd,0x57,
    0x09,0x73,0x32,0x6f,0x40,0xb7,0xd9,0x37,0x2d,0xdb,0xe5,0x64,0xf7,0xe2,0x9b,0x67,
    0xad,0xda,0x37,0x08,0x63,0x29,0xc5,0x96,0x93,0x7e,0x7d,0xbe,0x51,0x62,0xaa,0xee,
    0x3c,0xba,0xc5,0xae,0xa1,0xd1,0xfc,0x75,0xfc,0xfa,0x5b,0x2b,0x2b,0x1b,0xd8,0x9b,
    0xc4,0xd7,0xe0,0x4c,0x03,0x76,0x9d,0x5a,0xf5,0xd7,0x12,0xa6,0xde,0xd4,0x1f,0xff,
    0x1d,0x16,0xdb,0x47,0x9e,0x26,0x67,0xd4,0x0b,0xd6,0x92,0x4e,0xd4,0x7a,0xeb,0xff,
    0x33,0xd6,0x25,0x1d,0x95,0xd0,0x8f,0xad,0xf1,0x77,0x63,0xb7,0xc0,0x36,0x51,0xdf,
    0x00,0xe7,0xa3,0xf1,0xeb,0x1d,0x87,0xf9,0x07,0x5d,0x0d,0xaa,0x6f,0x28,0x9b,0x23,
    0x66,0xb7,0xb3,0x7d,0xaf,0xe9,0xde,0xc2,0x7e,0xd9,0xfa,0xad,0x9c,0xb5,0xd9,0xc3,
    0x05,0xff,0xe8,0x72,0xff,0x95,0xc2,0x03,0x2e,0xcf,0xf6,0x44,0xbb,0x7b,0xc4,0xe2,
    0x76,0xd0,0x0b,0xaa,0x73,0x0c,0x8d,0x0d,0xc7,0x33,0xce,0x7e,0x99,0x3d,0x41,0x2f,
    0x1a,0xdf,0x64,0x96,0x39,0x62,0x3a,0xa7,0xa8,0xdb,0xec,0xa7,0xd1,0xa9,0xe7,0xbc,
    0x07,0xfe,0x32,0xf9,0xf6,0xa2,0x79,0x0f,0xfb,0xb8,0x97,0x77,0x37,0xe2,0x7f,0x96,
    0xe7,0x7a,0x3a,0xa7,0x7a,0x98,0xe5,0x99,0xeb,0x62,0xf9,0xa7,0xfa,0x6e,0x61,0xcd,
    0xdb,0x60,0xb3,0x70,0xaa,0x3d,0x07,0xa6,0x1a,0xde,0x65,0x5f,0x2a,0xd8,0xef,0xc3,
    0xe9,0x35,0x1f,0xa5,0xdf,0xda,0x12,0xa9,0xda,0xe6,0xc1,0x8e,0x72,0x0e,0x77,0x49,
    0x45,0x25,0xd6,0x04,0xea,0xb9,0x22,0x88,0xd6,0x79,0x59,0xac,0x05,0xf0,0x25,0x79,
    0xd6,0xde,0x3c,0x86,0x5f,0xe7,0xfb,0x24,0x4a,0xeb,0x7a,0x8e,0x5a,0xd5,0x7f,0x0f,
    0x79,0x9f,0x07,0xb7,0x98,0x17,0x88,0xd9,0xe2,0x62,0x5e,0x04,0xd7,0x18,0xd5,0xf8,
    0x12,0xbd,0x37,0xee,0x62,0x5e,0x06,0x9f,0x95,0x18,0x3d,0xfb,0x57,0xe0,0x56,0xfc,
    0xa0,0xc4,0x28,0xf6,0x2a,0xb8,0xea,0xdd,0x8f,0xde,0x45,0xf1,0x29,0x3e,0x2d,0x63,
    0x3f,0x9a,0xa7,0x5d,0xae,0xd7,0xc8,0x35,0xe1,0x72,0xbd,0x0e,0x6e,0xb9,0xde,0x40,
    0xa3,0xe2,0x7f,0xc8,0x7a,0xe3,0xd1,0xf9,0x92,0x74,0x9a,0xc6,0xbc,0x49,0xee,0x63,
    0xc4,0x4f,0xa3,0x63,0xc6,0xe9,0xd0,0x98,0x03,0x32,0x66,0x58,0x7f,0x00,0xbe,0x05,
    0xec,0x99,0xd4,0x7b,0xb9,0x27,0xdf,0xa2,0x3e,0xb3,0x0f,0xa2,0x61,0x4c,0x34,0x69,
    0x6f,0x1f,0x22,0x46,0xf1,0x9d,0xf4,0xed,0x07,0x60,0x56,0xdb,0x87,0xd4,0x36,0xe0,
    0x6a,0xfb,0x08,0xfc,0x71,0xd6,0x1c,0x07,0x9b,0x92,0x35,0x6a,0x7f,0x0c,0xcf,0x71,
    0xc7,0xf3,0x09,0x3c,0x83,0x8e,0xe7,0x53,0x70,0xe3,0xf9,0x0c,0xec,0x19,0x78,0x3e,
    0x87,0x4b,0xf1,0xa7,0xc0,0xbe,0x00,0x1f,0x72,0xf9,0x4e,0x80,0xb7,0x5d,0x1d,0x5f,
    0x52,0x97,0xe5,0xff,0x8a,0xfc,0x5b,0x5d,0xfe,0xaf,0xc1,0x2d,0xff,0x49,0x30,0xe3,
    0xfd,0x06,0x9e,0x93,0x8e,0xe7,0x5b,0x78,0x86,0x1d,0xcf,0x77,0xe0,0xc6,0x73,0x0a,
    0xcc,0xea,0xf8,0x1e,0xae,0x53,0xae,0x8e,0x1f,0xc0,0x7d,0x1d,0xa7,0xc1,0xdb,0x9c,
    0xe9,0x19,0xce,0xf4,0x0c,0x3d,0xa2,0x31,0x37,0xc7,0x7c,0xcf,0xeb,0x39,0x0f,0xc9,
    0x73,0x23,0x66,0x9f,0xea,0xd8,0x10,0xf3,0x7b,0xa3,0xbe,0x4e,0x7c,0xa6,0xfb,0x47,
    0x74,0x8f,0x3a,0xdd,0x3f,0x81,0xcf,0xd1,0xa3,0x3f,0xc3,0xa1,0xf8,0xef,0x12,0xd3,
    0x05,0x87,0xf5,0x9e,0xfa,0xcf,0xea,0x77,0x26,0x66,0x5d,0x67,0xd3,0xbe,0xd4,0xd2,
    0xfd,0x78,0x0e,0xfe,0x1d,0x70,0xd8,0x39,0xab,0xe6,0x5f,0xf0,0x5b,0xed,0xbf,0x82,
    0x9d,0x48,0xdf,0xed,0x5c,0xd7,0x79,0xee,0xaf,0x3e,0xfc,0x6d,0xc7,0xfd,0x5b,0x81,
    0x7b,0xdc,0x71,0x5f,0xc0,0x6f,0x3c,0x17,0x1d,0xcf,0x05,0x78,0x6c,0x7f,0x2f,0x91,
    0xe7,0xa2,0xe3,0xbe,0x5c,0xe0,0x1e,0x76,0xdc,0x57,0xf0,0x9b,0xee,0x45,0xb0,0xd3,
    0x2e,0xdf,0x92,0xcb,0xb7,0x58,0xd0,0xfd,0x67,0x81,0x7b,0xc2,0x71,0x5f,0xc5,0x6f,
    0x3c,0x7f,0x39,0x9e,0xab,0x05,0xdd,0xea,0x58,0x22,0xe6,0x49,0xb0,0x18,0x73,0x3d,
    0x21,0xfe,0x93,0xaf,0x1c,0xff,0x9d,0x6f,0xc0,0xe5,0xab,0xc4,0xec,0xb7,0x5a,0x3a,
    0x62,0xe6,0x50,0xdc,0x34,0x54,0x63,0xd6,0x70,0x2b,0xfe,0xed,0xae,0x87,0x6b,0xd8,
    0x1a,0x33,0x4f,0xbf,0xac,0x8e,0x19,0xd7,0x9e,0xd4,0x7e,0xbd,0x8e,0xbe,0xd0,0xf9,
    0x90,0xdc,0x38,0x0d,0x7a,0xb4,0x18,0xd7,0x20,0x4e,0xe7,0xdd,0xc2,0x55,0xa7,0x5f,
    0x6d,0xff,0x7d,0xef,0x77,0x39,0x7d,0x6b,0x9c,0xbe,0x2e,0xde,0x05,0xd3,0xb2,0x36,
    0x66,0xff,0x24,0x77,0x66,0xcb,0xf5,0xad,0xfa,0xba,0x65,0xf4,0x90,0xb7,0x1b,0x1d,
    0x2d,0xec,0x1e,0xc7,0xd3,0x07,0xcf,0x10,0x3a,0xfa,0x89,0xe9,0xa7,0xa6,0xf4,0x5f,
    0x25,0xe6,0xb8,0x29,0xbe,0xe3,0x9e,0xab,0xe5,0xde,0xc7,0x41,0xde,0x47,0xcd,0xa7,
    0x6b,0x94,0x43,0xcf,0x43,0xbf,0xc1,0x87,0xf9,0xfe,0xda,0xdd,0xfc,0x0e,0xf1,0x63,
    0xb2,0x56,0xbf,0xc5,0xef,0x19,0xe6,0xc6,0x24,0xdf,0xe5,0x23,0xf8,0x27,0xc4,0x3e,
    0xcc,0x3d,0x7e,0xa4,0xf0,0x1d,0x58,0x48,0xfd,0x15,0x65,0x3f,0x63,0xf8,0x1b,0x48,
    0x17,0x25,0x86,0x54,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// struct FocalPoint {
//     float focalX;
//     float focalY;
//     float gainX;
//     float gainY;
//     float foveaArea;
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint textureWidth;
//     uint textureHeight;
//     uint attachmentWidth;
//     uint attachmentHeight;
//     uint attachmentBlockWidth;
//     uint attachmentBlockHeight;
//     uint numOfFocalPoints;
//     FocalPoint focalPoints[2];
// } params;
//
// layout(binding = 0, r8ui)uniform writeonly uimage2D fragmentShadingRateImage;
// layout(local_size_x = 32, local_size_y = 32, local_size_z = 1)in;
//
// uint computeValue(ivec2 pos)
// {
//     float minPixelDensity = 0.0f;
//     float focalPointDensity = 0.0f;
//     float px =((float(pos . x)* params . attachmentBlockWidth)/ params . textureWidth - 0.5f)* 2.0f;
//     float py =((float(pos . y)* params . attachmentBlockHeight)/ params . textureHeight - 0.5f)* 2.0f;
//
//     for(uint point = 0;point < params . numOfFocalPoints;point ++)
//     {
//         float density = 1.0f / max(pow(params . focalPoints[point]. focalX - px, 2)*
//                                    pow(params . focalPoints[point]. gainX, 2)+
//                                    pow(params . focalPoints[point]. focalY - py, 2)*
//                                    pow(params . focalPoints[point]. gainY, 2)-
//                                    params . focalPoints[point]. foveaArea,
//                                    1.0f);
//
//         if(density > focalPointDensity)
//         {
//             focalPointDensity = density;
//         }
//     }
//     minPixelDensity = max(minPixelDensity, focalPointDensity);
//
//     uint val = 0;
//     if(minPixelDensity > 0.75f)
//     {
//
//         val = 0;
//     }
//     else if(minPixelDensity > 0.5f)
//     {
//
//         val =(1 << 2);
//     }
//     else
//     {
//
//         val =(1 << 2)| 1;
//     }
//     return val;
// }
//
// void main()
// {
//     uint i = gl_GlobalInvocationID . x;
//     uint j = gl_GlobalInvocationID . y;
//
//     if(i >= params . attachmentWidth || j >= params . attachmentHeight)
//     {
//         return;
//     }
//
//     ivec2 pos = ivec2(i, j);
//     uint val = 0;
//
//     val = computeValue(pos);
//
//     imageStore(fragmentShadingRateImage, pos, ivec4(val, 0, 0, 0));
// }
