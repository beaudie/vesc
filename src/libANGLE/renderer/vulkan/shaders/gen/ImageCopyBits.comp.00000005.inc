// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x55,0xcd,0x6b,0xd5,0x57,
    0x10,0xbd,0xf3,0x7b,0xcf,0x67,0xa3,0x89,0xc6,0x6f,0x03,0x1a,0x8d,0xbe,0x92,0xa8,
    0x51,0x24,0x34,0x22,0x29,0x6d,0xc9,0x4a,0x51,0xd1,0x24,0xe2,0x42,0xc9,0xc6,0xaa,
    0x04,0x2b,0x2d,0x3e,0xda,0x85,0x31,0xaf,0x54,0x83,0xa8,0xa5,0x08,0x95,0x96,0x2e,
    0x04,0x6b,0x37,0x8a,0x71,0x21,0xb8,0x50,0xd4,0x85,0x6b,0xbf,0x35,0xf8,0x15,0x44,
    0xfd,0x0f,0xba,0x69,0xad,0x1f,0xd5,0x4a,0xe7,0xdc,0x39,0x37,0x6f,0x78,0xbc,0xc0,
    0xe5,0xbe,0x39,0x77,0xe6,0xcc,0xb9,0x73,0x67,0x7e,0xc9,0x65,0x8b,0x27,0x86,0x20,
    0x61,0x52,0xf8,0x28,0x5c,0x95,0x10,0xff,0xa6,0x85,0x2c,0xe0,0xe7,0xe4,0x50,0x88,
    0xfb,0x9a,0x0d,0x9b,0x37,0xac,0xf8,0xf6,0xbb,0x9d,0x2b,0x3e,0xe9,0x5c,0x89,0xf3,
    0x29,0x21,0x17,0xfd,0x70,0x36,0x55,0x7d,0x26,0xe8,0x9e,0xd7,0xf5,0xf5,0xf6,0xdd,
    0xdf,0x00,0x6f,0xd1,0xd5,0xa8,0x78,0x3e,0x72,0x05,0x65,0xb6,0x15,0xb9,0x14,0x6d,
    0x89,0xdc,0x21,0xcc,0xd3,0xb5,0x56,0xa3,0x97,0x58,0xda,0xb0,0x98,0x7b,0xc2,0x84,
    0x58,0xbd,0xc3,0x32,0x62,0x8d,0x0e,0xcb,0x11,0xf3,0x7c,0x79,0x62,0x0b,0x1d,0x36,
    0x81,0x58,0xd1,0x61,0x05,0x62,0x6d,0x51,0x5b,0x6e,0x3c,0x07,0x74,0xf6,0xe9,0xbe,
    0x88,0x9a,0x92,0xdd,0xe2,0xec,0x7d,0x8c,0xcf,0x93,0x6f,0xb0,0xea,0x1e,0xe0,0x1b,
    0xa4,0x3e,0xf8,0x0f,0x55,0xf1,0x0d,0x91,0x2f,0xd5,0xe5,0x19,0xeb,0xd2,0xa4,0x6b,
    0x86,0xaa,0xc8,0xe2,0x79,0x2e,0xc6,0xe3,0xf7,0x2c,0xf5,0x29,0xf0,0x4e,0x81,0x76,
    0x3d,0x6d,0x70,0xcc,0x51,0xbb,0x81,0xf5,0xca,0xd1,0x9e,0x4a,0x8d,0xc9,0x9e,0x49,
    0x3b,0x8b,0x71,0xf9,0xf1,0x58,0xf8,0x7d,0x4a,0x3b,0x69,0x5a,0xc6,0x7c,0x45,0xfa,
    0xcf,0x56,0x96,0x56,0xe6,0x03,0x17,0x6a,0xd6,0x4a,0xee,0xe6,0x50,0x17,0x6b,0xd7,
    0x46,0xfe,0x06,0xee,0x69,0xcd,0x64,0xbe,0xa5,0xba,0xd7,0xe9,0x5a,0xc2,0x7c,0x4b,
    0x63,0x1e,0xc3,0x96,0xf1,0x3e,0xed,0x7c,0x2b,0xf8,0x2f,0xe7,0x59,0xc1,0xe9,0xe9,
    0x70,0xfa,0xe0,0xdf,0xc9,0x37,0x48,0xe7,0x5d,0xac,0x4f,0xb2,0xbf,0xa0,0xc6,0x64,
    0x77,0x3b,0x7f,0xc4,0xaf,0x73,0xf5,0x58,0xcf,0x7c,0x0d,0xf1,0x1d,0xea,0x42,0x0f,
    0x73,0x73,0x34,0xc6,0x77,0xf8,0x2f,0x60,0x4c,0x2f,0xb1,0x1e,0xde,0x09,0x76,0x1f,
    0x31,0xd4,0x69,0x8b,0xeb,0x93,0xa4,0xa1,0x9f,0x6c,0xc9,0x1e,0xe0,0x8c,0x24,0x4d,
    0x25,0xe6,0x9a,0xaf,0xca,0x53,0x9f,0x35,0xb3,0x9f,0xf6,0x31,0xef,0x7e,0xea,0x18,
    0x64,0x5e,0xd8,0x43,0xc4,0x12,0x4f,0x99,0x3a,0xe0,0x3f,0xcc,0xb3,0x02,0xed,0x13,
    0xcc,0xe1,0x6b,0x7b,0x6a,0xfc,0xbd,0xb2,0x30,0x42,0xbf,0x9b,0xac,0x49,0x1b,0xef,
    0x73,0x47,0xf7,0x11,0x57,0x53,0xe4,0x79,0x40,0xbb,0x5d,0xa3,0xd1,0x4b,0xcf,0x78,
    0xa7,0x01,0xbe,0xd7,0x2a,0x7d,0xd1,0x8c,0x35,0x08,0xf4,0x7d,0xa3,0x08,0xde,0xf9,
    0xb5,0x5a,0xcf,0x89,0xbf,0xd3,0xdf,0x78,0xbf,0x17,0x3c,0xc7,0xfe,0x19,0xfb,0xf8,
    0x3a,0x7b,0x73,0x2f,0x7b,0xef,0x06,0xb1,0x6e,0x65,0x81,0xc6,0x5b,0xec,0xa5,0x32,
    0x63,0xe0,0x73,0x9b,0xf8,0x35,0xf5,0x81,0xee,0xbb,0x8c,0x03,0x7e,0x42,0x7d,0x70,
    0x8f,0x7b,0xc4,0xa1,0x63,0x94,0x3a,0xfe,0xd5,0x33,0xe0,0xf7,0x75,0x8d,0x52,0x0b,
    0x7e,0xbf,0xd5,0xfd,0x39,0xed,0x51,0xe6,0x46,0x8f,0x3e,0x64,0xee,0x07,0xcc,0x8d,
    0x1a,0x3e,0x22,0x7e,0x4e,0x7d,0x90,0xe7,0x31,0xb1,0x6e,0xe6,0x1a,0x73,0xb9,0x70,
    0xf6,0x44,0xd7,0x53,0x72,0x3f,0x89,0xf7,0xb0,0x79,0xfe,0x93,0xf7,0xec,0x55,0x1e,
    0xf0,0x4e,0x16,0xb3,0x33,0x97,0xbf,0x5e,0x2c,0x7f,0xbb,0xcb,0xdf,0x20,0x86,0x1f,
    0x62,0xdc,0x14,0xb1,0x58,0xe0,0x89,0xab,0x91,0x5c,0xe2,0xb8,0xa6,0x91,0xab,0xd3,
    0x71,0x4d,0x17,0xc3,0x13,0xd7,0x0c,0xb1,0xd8,0xe9,0x8e,0x6b,0x16,0xb9,0xf0,0x97,
    0xfc,0xe6,0x88,0xe1,0xe8,0x83,0x03,0xc4,0xe6,0x8a,0xe1,0x98,0xcb,0xc3,0xc4,0x9a,
    0xc4,0xf0,0x6e,0xe7,0x37,0x4f,0x4c,0x33,0x72,0x25,0xac,0x59,0x0c,0x6f,0x12,0xd3,
    0x8b,0x79,0x6d,0xa1,0xde,0x75,0xd4,0x8b,0x9a,0x2d,0x12,0xc3,0x11,0x07,0xbb,0x28,
    0x56,0x47,0xe0,0xf0,0xc1,0xac,0x7e,0x2c,0x36,0xa7,0x5f,0xaa,0x0f,0x66,0xb4,0x55,
    0x0c,0x2b,0x4a,0xa5,0x16,0x7f,0xf1,0x5d,0x4b,0xae,0x16,0x7f,0x13,0x4f,0xf7,0x7e,
    0xc9,0xd8,0xe0,0xb0,0x7f,0x88,0x89,0xc3,0x5e,0x11,0xcb,0x5c,0x7d,0x96,0x8b,0xf9,
    0xf6,0xbb,0x7b,0xaf,0x14,0xc3,0x5f,0xc6,0x37,0x29,0xc4,0xb9,0x7d,0xcf,0xd9,0x2e,
    0xb3,0x06,0x9f,0x6b,0xff,0xbc,0xa7,0x6f,0x8a,0xfb,0xc0,0xb3,0x0e,0xc7,0xdf,0x29,
    0xa6,0xd7,0xf3,0xaf,0x16,0xc3,0x5f,0x39,0xfe,0x4c,0x2a,0xfc,0xe0,0x01,0x3f,0x30,
    0xf8,0xa2,0xe7,0xc7,0xd8,0x97,0x4f,0x5d,0x5f,0xae,0x95,0x4a,0x5f,0xc6,0xef,0xa8,
    0x18,0x16,0x98,0x0b,0xd8,0x7a,0x31,0xbc,0xe4,0xfc,0x36,0xd2,0x4f,0x1c,0xb6,0x89,
    0x58,0x16,0xbf,0xa3,0x85,0xc8,0xdf,0x23,0x16,0x0f,0xff,0x4d,0x7c,0x13,0x7c,0xb3,
    0x7a,0xc5,0xbe,0x03,0x5d,0xee,0x4d,0xfa,0xc4,0xf0,0x1f,0x79,0xc7,0xcd,0x62,0x58,
    0xd1,0xd5,0x7f,0x7f,0x8d,0xb9,0x19,0xaa,0x31,0x37,0x65,0x31,0x3c,0xd5,0xf0,0x7b,
    0xb1,0xd8,0xb2,0xeb,0xf5,0x1f,0x6a,0xcc,0xcd,0x81,0x1a,0x73,0x73,0x50,0x0c,0x4f,
    0x5c,0xc3,0x62,0xb1,0x07,0x1d,0xd7,0xa1,0x1a,0x73,0x73,0x58,0x0c,0x3f,0xe5,0xde,
    0xed,0x88,0x18,0xee,0xe7,0xe6,0xa8,0x18,0xee,0xe7,0xe6,0x27,0x31,0xcd,0xc3,0xae,
    0x37,0x8e,0x89,0xe1,0x47,0xdd,0xdc,0xfc,0x5c,0x63,0x6e,0x8e,0x8b,0xe1,0x69,0x6e,
    0x7e,0xe1,0xbb,0x1c,0x77,0x73,0xf3,0x6b,0xd5,0xdc,0xfc,0x26,0x86,0xc1,0x37,0x7d,
    0xeb,0xb6,0x8a,0xbd,0x41,0x17,0xbf,0x75,0x25,0xa9,0x7c,0xeb,0x70,0xb6,0x4d,0xd7,
    0x1e,0xb1,0x9e,0xda,0xe6,0xf2,0x9d,0x14,0x7b,0x77,0x9f,0xef,0xf7,0xaa,0x7c,0x7f,
    0x88,0x61,0x27,0x5d,0x0d,0x4f,0x8b,0xe9,0x10,0x57,0xc3,0x33,0x62,0x78,0xbf,0xeb,
    0x81,0xb3,0xf4,0x0b,0xae,0x5e,0x23,0x62,0xbe,0x67,0xa5,0x32,0x0f,0xdb,0xdd,0x3c,
    0x1c,0xe3,0xbc,0x01,0x1b,0x71,0x35,0xdd,0x21,0x76,0xd6,0xe1,0xf8,0x77,0x91,0x3f,
    0x73,0xd8,0x80,0x98,0x66,0xff,0xbe,0xe7,0xc5,0x70,0x3f,0x97,0x17,0xc4,0xf0,0x5d,
    0x4e,0xc7,0x57,0x4e,0xc7,0x0e,0xea,0x00,0x76,0x81,0x73,0x59,0x62,0x0d,0xf7,0xb8,
    0x5a,0x5c,0x74,0x1a,0x52,0xbe,0x4b,0x62,0xb8,0xaf,0xc5,0x65,0x57,0xb3,0xa4,0xe1,
    0x8a,0x98,0xef,0x65,0xa7,0x61,0x6f,0x8d,0x5a,0x00,0xbb,0x52,0xa5,0xa1,0x54,0xf5,
    0xad,0x18,0xab,0xfa,0x7f,0x89,0xfd,0x3f,0xcd,0xb6,0x5a,0xd7,0xff,0x9c,0xbc,0x3f,
    0x6e,0x78,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba16ui)uniform uimage2DArray src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// uint makeUint(uvec2 v)
// {
//     return v . g * 0x10000u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 8;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v . rg);
//     destData[destOffset + 1]= makeUint(v . ba);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 2;
//     uint pixelBytes = 6;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     if(remainder == 0)
//     {
//         uvec3 v1 = fetchSrc(srcCoord1);
//
//         destData[destOffset]= makeUint(v0 . rg);
//         destData[destOffset + 1]= makeUint(uvec2(v0 . b, v1 . r));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(v0 . gb);
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
