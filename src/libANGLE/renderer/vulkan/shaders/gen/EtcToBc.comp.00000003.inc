// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x09,0x98,0x55,0xc5,
    0x95,0x7e,0xfd,0x5e,0xdf,0x7b,0xeb,0xde,0xd7,0x18,0xc1,0xa8,0x41,0x13,0x17,0x34,
    0x62,0x14,0x5c,0x92,0xa8,0x19,0x11,0x41,0xc5,0xa8,0x89,0x7e,0xe2,0x92,0x71,0x12,
    0x34,0x80,0x22,0x2a,0xd8,0x36,0x51,0x44,0x06,0x17,0x5a,0x25,0x31,0x8e,0x41,0x8d,
    0x5b,0x1c,0x09,0x4e,0x44,0x19,0xe9,0x88,0x02,0x89,0x2c,0x2a,0xb8,0x81,0x48,0x34,
    0x90,0xb8,0x64,0x24,0x71,0x07,0x64,0x53,0x50,0x59,0x02,0x88,0x62,0xee,0xff,0xfe,
    0xff,0xf4,0x3d,0x3c,0x9d,0xfe,0xbe,0xfb,0xf5,0xab,0xff,0x3f,0xe7,0xd4,0xa9,0x53,
    0x55,0xa7,0xaa,0xee,0x52,0x29,0xef,0x93,0x94,0x2a,0x0d,0xa5,0xac,0x14,0x4a,0x3b,
    0x35,0x95,0x6a,0x7f,0x1d,0x4b,0xe5,0x52,0x83,0xfe,0x1f,0xa4,0xff,0x3d,0xf5,0xff,
    0x18,0xfd,0x3f,0x2e,0xff,0x5f,0x2d,0xc5,0x35,0xb9,0x13,0x4e,0x3e,0xe3,0xe4,0x83,
    0x2e,0x1b,0x3e,0xe8,0xa0,0xef,0x1e,0x76,0x08,0xf4,0x77,0x28,0x55,0x6a,0x76,0xc0,
    0x7d,0x25,0xb7,0x1b,0xe5,0xff,0x1b,0xf3,0xab,0x79,0xe0,0x45,0x97,0x00,0x3f,0x2b,
    0xbf,0xfa,0xe7,0xd7,0xbb,0xb9,0xc0,0x8e,0xb9,0x8d,0xc6,0x9a,0xcd,0x52,0xa9,0xb7,
    0x74,0x6a,0x36,0x73,0xf4,0xac,0x5a,0x1d,0xa5,0xd2,0x6e,0x2a,0xf7,0x57,0x79,0xf7,
    0x5a,0xb9,0x52,0xd3,0x2f,0x89,0xc3,0x6f,0x70,0xdf,0xca,0xaf,0x13,0xf3,0x1a,0x2f,
    0x2c,0x93,0xdb,0x87,0xff,0xda,0xb1,0x06,0x61,0x8d,0x0e,0x2b,0x0b,0x0b,0x0e,0xab,
    0x08,0x6b,0x72,0x58,0xa3,0xb0,0x1d,0x1d,0x16,0x09,0xfb,0xaa,0xc3,0x62,0x61,0x5f,
    0x93,0x9f,0x56,0x47,0xad,0x4d,0xb9,0x42,0x97,0x52,0xe1,0x37,0xca,0x7b,0xbb,0xf2,
    0xb2,0x3a,0x7e,0x99,0xf8,0x06,0xd9,0x42,0xb9,0xb3,0xb8,0xf5,0x11,0xdb,0xdc,0x59,
    0xdc,0x9e,0x19,0xf5,0x76,0xca,0x6b,0x43,0x7d,0x7b,0xe7,0x18,0xda,0x81,0xdf,0x3b,
    0xe7,0xf2,0xf0,0x6b,0x2f,0xd9,0xda,0x35,0x2f,0x27,0x25,0xfa,0x6a,0x7c,0x55,0x7c,
    0xa9,0xf6,0xbf,0xb1,0xd6,0xf6,0x44,0x31,0x87,0x7c,0x47,0xfd,0x2e,0x8b,0xef,0x24,
    0xbe,0xa3,0xca,0xbb,0xaa,0x0c,0x9b,0xbb,0xe4,0x35,0x7f,0x43,0xf6,0xa0,0xbb,0x47,
    0xfe,0x1f,0xe5,0x8a,0xca,0xfb,0xc9,0x56,0x45,0xba,0xbd,0xa4,0x9b,0x88,0xef,0x2d,
    0xbe,0xb1,0x16,0xdb,0x72,0xe9,0x58,0xe1,0x7d,0x64,0xbf,0x51,0x7a,0xff,0xae,0xf6,
    0xc0,0x5e,0x0f,0x95,0xcf,0x12,0x76,0xa0,0xda,0xdc,0x4f,0x7d,0x6b,0x7c,0x7f,0xc7,
    0xa3,0x8e,0x01,0xae,0xcd,0x03,0xc5,0x55,0x1d,0x3f,0x48,0xf5,0x59,0x79,0x48,0x6d,
    0x5c,0x17,0xf6,0x9b,0x1d,0x8f,0x72,0x4b,0x5d,0xfd,0x23,0x14,0x33,0xd3,0x1f,0x55,
    0xc7,0xb7,0x2a,0x0e,0xc6,0x8f,0x95,0xbf,0x56,0xbe,0x59,0x63,0xce,0xca,0xb7,0x68,
    0x6c,0x75,0xcb,0xa3,0x85,0x38,0xdd,0xaa,0x36,0x8c,0x95,0xec,0x2d,0x4e,0xf6,0xb6,
    0xfc,0xfa,0xdc,0x95,0xc7,0xd7,0xf9,0x32,0xc1,0xd5,0x0d,0x5f,0xa6,0xe7,0x57,0x77,
    0x57,0x9e,0xad,0xba,0xac,0xfc,0xac,0xc6,0xba,0x95,0x17,0x38,0xdf,0x50,0x5e,0x58,
    0xe2,0x9c,0xb0,0xf2,0xcb,0xf9,0xb5,0x67,0x7e,0x7d,0x3d,0x2f,0x2f,0xcd,0xff,0xf7,
    0x91,0x8f,0xc6,0x2f,0xab,0xe5,0x0b,0xb6,0x05,0xdc,0x7b,0x8a,0xd7,0x42,0xf5,0xdb,
    0x32,0x27,0xbb,0x5c,0x7d,0x6f,0xe5,0x15,0xf9,0x95,0xba,0xf2,0x4a,0xcd,0x57,0xb3,
    0xb5,0x4a,0xb6,0x96,0x4b,0x76,0xa5,0x93,0x5d,0xad,0xb1,0x66,0xb2,0xef,0xab,0xdf,
    0x9a,0xc5,0xad,0x74,0xdc,0x07,0xe2,0x5a,0xe5,0x97,0xb7,0xb3,0x46,0x63,0xc5,0x64,
    0xd7,0x3a,0xff,0x57,0x8b,0x37,0xd9,0x0f,0xf3,0x2b,0x73,0xb2,0x1f,0x39,0xff,0xfa,
    0x89,0x37,0xee,0x63,0xd5,0xb7,0x5c,0x76,0x3c,0xb7,0x4e,0x7a,0xcd,0x5f,0xc2,0xad,
    0x97,0xaf,0x56,0xff,0x0a,0xc7,0x6d,0xa8,0x6b,0xa3,0xe7,0x36,0xba,0x36,0xd6,0x73,
    0xff,0x74,0x7a,0xcb,0xeb,0xb8,0x4d,0xf2,0xa5,0xd5,0x71,0xd6,0xde,0xcd,0x9a,0x57,
    0x26,0xbb,0x45,0x58,0x8b,0x74,0xbc,0x9d,0x4f,0x5c,0x7c,0x57,0x2b,0x1e,0xc6,0x6d,
    0x75,0xed,0x5d,0xde,0xce,0xed,0x54,0x1b,0x4f,0x9f,0x6a,0xcc,0xac,0x52,0x1f,0x7e,
    0xa0,0x3e,0xf8,0x48,0x31,0x5c,0xa7,0x98,0x6c,0x50,0x1b,0xff,0x29,0x9f,0xb7,0xa8,
    0xce,0xad,0x9a,0xf7,0x9f,0x6b,0x3c,0x2c,0x75,0xfe,0x77,0x68,0x28,0xe6,0x0e,0x72,
    0xd7,0x01,0xb5,0xf5,0xa6,0x77,0x6f,0x2b,0x77,0xe3,0xfa,0xd3,0x0b,0x79,0xa9,0x57,
    0x03,0xc7,0x66,0xc5,0xc9,0x8f,0xd1,0xfa,0x64,0xe5,0x29,0xb5,0x72,0x6b,0x2f,0x2b,
    0xcf,0xaa,0x95,0x47,0xf7,0xb1,0xf2,0xec,0xbc,0x7c,0xc3,0x2e,0xff,0x7d,0xb4,0x95,
    0xe7,0xe4,0xe5,0x09,0xc7,0xef,0xd2,0x2e,0xff,0x64,0x5e,0xfe,0xdb,0xc8,0x55,0x3d,
    0xbb,0xe5,0x35,0x21,0x9f,0x3e,0xd5,0x40,0x1d,0xc8,0x81,0x33,0xb9,0x85,0xf9,0xef,
    0x96,0x4e,0x95,0x5e,0x3d,0x94,0xcf,0xb0,0x36,0x36,0x38,0x3f,0xb6,0xd5,0xea,0x7d,
    0xa7,0xb7,0xe5,0x80,0xc6,0x32,0xdb,0x6e,0xe5,0xee,0xe5,0x62,0x0e,0xa3,0xdc,0x57,
    0x6b,0xda,0x1e,0xf9,0x6c,0xb3,0xf5,0xed,0xff,0xbb,0x10,0xcb,0x8b,0xca,0x9c,0x97,
    0x90,0xed,0xa1,0xf2,0x10,0x61,0xe0,0x87,0xea,0x37,0xe4,0x0f,0xc8,0x23,0x86,0xdc,
    0x7e,0x5b,0x19,0x6b,0x37,0x7f,0xb7,0x95,0x8b,0xba,0x1f,0x2e,0x23,0x77,0x14,0xe5,
    0x47,0xca,0x45,0xfe,0x41,0x79,0x4a,0xd9,0xe6,0x7c,0x5c,0x5b,0x03,0xa6,0x96,0xa9,
    0x03,0xb9,0x29,0xe5,0xa2,0x2f,0x67,0x96,0xb7,0xcf,0xd9,0x4f,0x94,0xb9,0x6e,0x59,
    0x79,0x6e,0x99,0xfb,0x0a,0x2b,0x2f,0x2a,0x63,0x1d,0x2d,0xea,0x59,0x5b,0x2e,0xf2,
    0xd8,0x5e,0x15,0xfa,0x3e,0xd6,0xc9,0xef,0x5d,0x29,0xd5,0xd6,0x3f,0x2b,0x77,0xa9,
    0x70,0xed,0xb3,0xf2,0x3e,0x15,0xee,0x4d,0xac,0xbc,0x6f,0x85,0xfb,0x9d,0x6e,0xb9,
    0x75,0xd8,0xfb,0x66,0xa5,0x98,0x43,0x6b,0x94,0x57,0x61,0x13,0x76,0xa0,0xbb,0x6f,
    0x85,0xb1,0xeb,0x5a,0x61,0x5f,0x41,0x07,0x6d,0xc6,0xb8,0x1b,0x50,0xe1,0xbc,0xb2,
    0xcb,0xf0,0x81,0x15,0x8e,0x61,0xbb,0xac,0xee,0xff,0xad,0x70,0x77,0x66,0xe5,0xb6,
    0x0a,0x17,0x24,0x2b,0x63,0x31,0xeb,0xec,0x7c,0xcd,0xf2,0x72,0x27,0x57,0x3e,0x28,
    0x2f,0x77,0x50,0x2c,0xde,0x6c,0xa4,0x3f,0x63,0x6b,0xf5,0x46,0xb5,0xdf,0x6f,0x35,
    0x72,0xbe,0xf6,0x73,0xd8,0xdb,0x8d,0x9c,0xdb,0x4f,0xb8,0x3e,0x79,0xa7,0x91,0x7b,
    0x02,0x93,0x79,0xb7,0x91,0x39,0x01,0xb8,0xc9,0x2c,0x69,0xc4,0x18,0x29,0x64,0x96,
    0x36,0xb2,0xfe,0x25,0x4e,0x66,0x59,0xfe,0xfb,0x28,0x27,0xf3,0x5e,0x23,0x7d,0x5e,
    0xe6,0x64,0x96,0xe7,0xbf,0xfb,0x3a,0x99,0x15,0x8d,0x5c,0xdb,0x96,0x3b,0x99,0x95,
    0x8d,0xdc,0x6b,0x59,0x79,0x55,0x23,0xd7,0x7a,0xd3,0x59,0xdd,0x48,0x99,0x55,0x4e,
    0xe7,0xfd,0xfc,0xf7,0xc1,0x4e,0xe7,0x83,0xbc,0x3c,0xd3,0xe9,0xac,0x69,0xa4,0x0c,
    0x70,0xf4,0x35,0xe2,0xb5,0xb6,0x91,0x31,0x42,0x4c,0xd0,0x66,0xb4,0x09,0x3e,0xc3,
    0x27,0xd4,0x01,0x1d,0xf4,0xf5,0xc7,0x8a,0x2d,0x74,0x90,0x63,0xba,0xe7,0x93,0xf2,
    0x58,0xad,0xdf,0x9d,0xf3,0x19,0x74,0xa6,0xf6,0x7f,0x51,0x69,0xfb,0x3f,0xa5,0x9d,
    0x7c,0x3c,0x57,0x4a,0x3f,0xca,0x49,0xc8,0xd5,0xf6,0x4a,0x12,0x04,0xd6,0x43,0xe5,
    0xb3,0x84,0xc1,0xde,0x12,0xd9,0x6b,0xa8,0xb3,0x53,0xae,0xcd,0x7d,0xda,0x58,0x2a,
    0xf9,0x25,0xb2,0x81,0xf2,0xb2,0xa8,0xc8,0x73,0xd0,0x5f,0x17,0xd9,0xd8,0xe6,0x9c,
    0xc4,0x3e,0x15,0xd8,0x28,0xed,0x7d,0x2c,0x36,0x2d,0x55,0x8e,0x11,0x3f,0x4e,0x86,
    0x55,0x39,0x76,0x46,0x38,0xec,0x67,0x55,0xce,0x8d,0x56,0xb7,0xe7,0xb9,0xb4,0xca,
    0xbd,0x8d,0xbf,0x6c,0xdc,0x5f,0xe6,0xe4,0x5b,0x1d,0x3e,0xdc,0xd9,0x1e,0xe1,0xf0,
    0xcb,0xab,0x1c,0x97,0x76,0x19,0x3e,0xa2,0xca,0xbc,0x61,0x97,0xb5,0xe7,0x8a,0x2a,
    0xc7,0xfb,0xd8,0xf6,0x71,0x4f,0xf9,0x91,0x55,0xae,0x51,0x76,0x35,0xe4,0xf1,0x07,
    0x7e,0x7f,0x95,0xfd,0xd7,0xa1,0x89,0xfd,0x57,0x11,0x87,0x76,0x74,0xca,0xb1,0xc3,
    0xf3,0x76,0x96,0xb5,0x87,0x2c,0x89,0xdf,0x9c,0x23,0x91,0xf6,0xac,0x58,0x83,0x5e,
    0x0f,0x1c,0x0b,0x3d,0xb4,0xef,0xee,0x12,0x17,0x65,0xe4,0x84,0xa3,0xea,0xca,0xa7,
    0xb8,0x32,0xc6,0xd1,0x20,0x57,0xc6,0x5e,0x7b,0x68,0xc4,0xf2,0xa6,0xbc,0xb6,0x0d,
    0xea,0xbf,0xad,0xf9,0x6f,0xec,0x23,0x37,0x46,0xac,0x1f,0xff,0x7b,0x6a,0xaf,0xfe,
    0x69,0xc4,0x7d,0xf5,0xa9,0xb9,0x16,0xf2,0xe6,0x67,0x11,0xb1,0x4f,0xa3,0x62,0xac,
    0x5c,0xa5,0x33,0xc5,0xb6,0x88,0xfc,0x18,0xf5,0x1f,0x26,0x06,0x30,0xf4,0xf7,0x31,
    0x39,0x56,0xdb,0x63,0xc7,0xdc,0x87,0xa3,0xbe,0x9e,0x1a,0x37,0xe5,0x98,0xf8,0xb3,
    0xb9,0x4c,0xed,0x6c,0x10,0x13,0x1b,0x24,0xdb,0xb5,0x7d,0x7f,0x4c,0xfc,0x79,0xc9,
    0x24,0x92,0x19,0xe2,0x64,0x42,0x4c,0x1c,0x32,0xb5,0xfc,0x15,0x53,0x0f,0xfb,0x8e,
    0x31,0xc2,0xaa,0x31,0xfb,0x08,0xdc,0x69,0xc2,0x3a,0xd8,0x22,0x56,0x1b,0x37,0xc4,
    0x76,0x88,0x89,0x43,0xfe,0xf4,0x1c,0x41,0x7b,0x3e,0xce,0x88,0x9b,0xac,0xd5,0xd3,
    0x51,0xf5,0x8c,0x70,0xf5,0x74,0x52,0xb9,0xa3,0xab,0xe7,0xab,0xd2,0x6d,0x70,0xf5,
    0xec,0x1c,0x13,0xef,0xe4,0xea,0xd9,0x90,0x11,0x47,0x7d,0x0d,0xae,0x9e,0xaf,0xc5,
    0x6c,0x23,0xc6,0xf6,0x5c,0x61,0xbb,0x09,0x43,0x5d,0x7d,0x15,0xf7,0xdd,0x63,0xca,
    0xee,0x16,0xb3,0x1e,0x60,0xdf,0x88,0x69,0x17,0x1c,0xfa,0x02,0x6b,0xf1,0xfe,0x11,
    0xd7,0xe7,0x56,0xf5,0x05,0xec,0x7d,0x2b,0x22,0x6e,0x32,0x07,0x48,0xa6,0xd9,0xc9,
    0x1c,0x18,0x11,0xb7,0xfa,0xba,0x45,0xd4,0x03,0x3e,0x25,0xc7,0x90,0xaf,0x0e,0x8a,
    0x58,0x27,0xb8,0x7b,0x72,0x3d,0x8c,0xff,0x83,0x85,0x63,0xec,0x1d,0xaa,0xf1,0xf3,
    0x49,0xce,0x01,0x3f,0x24,0xbf,0x0e,0xd5,0xf8,0xc3,0xef,0x2d,0xf9,0xff,0x0d,0x2a,
    0x03,0x9f,0xab,0xba,0x0e,0x97,0x5d,0xe4,0x8b,0xe7,0x85,0x1d,0x29,0x0c,0xf9,0xc2,
    0x62,0xdd,0x33,0x22,0x5e,0x72,0x7d,0x72,0x74,0xa4,0x76,0x44,0x85,0x5c,0x6f,0xc9,
    0xf9,0x3e,0x39,0x26,0xa2,0x6c,0xef,0xa8,0xd0,0x3d,0x5e,0xba,0xc0,0x4c,0xee,0xc4,
    0x88,0x78,0xcf,0xa8,0xe8,0x8f,0x93,0x15,0x8b,0x11,0xae,0x8f,0x4e,0x53,0x6c,0xfc,
    0xf8,0x38,0x3d,0xa2,0xec,0x69,0x9a,0x6b,0xc8,0xcd,0xff,0xa1,0xbc,0x6c,0x73,0xe5,
    0x27,0x9a,0x7b,0xe3,0xdd,0x5c,0xe9,0x17,0x11,0xb7,0x31,0x7f,0x76,0x44,0xcc,0xec,
    0x9e,0x13,0xd1,0xf6,0xd9,0xae,0x8d,0xfd,0x23,0xc6,0xad,0xc1,0xd5,0x3f,0x30,0x22,
    0x7e,0xb2,0x6b,0xcf,0xb9,0x11,0xf5,0x07,0x3a,0xdd,0x41,0xd2,0xf5,0x73,0xe3,0xfc,
    0x88,0xb2,0xe0,0x06,0xe5,0x7e,0x60,0x9d,0x19,0x2c,0xff,0xfb,0xe7,0x32,0xc8,0x6f,
    0x17,0x08,0x83,0xec,0xd1,0x79,0x7f,0x0f,0x55,0x9c,0x6d,0x5c,0x5d,0x10,0x73,0x5c,
    0x2d,0x74,0xe3,0xea,0xc2,0x98,0xf8,0xef,0x73,0x19,0x8c,0x97,0x8b,0x62,0x62,0xfd,
    0x94,0xaf,0x46,0xc6,0xc5,0x98,0x01,0x37,0x24,0xbf,0x86,0xc7,0x1c,0x23,0x43,0x34,
    0xcf,0x10,0xa3,0x7b,0x03,0xeb,0x6f,0xa8,0xcd,0x09,0xae,0x1b,0x93,0x02,0x71,0x7f,
    0x3d,0x2b,0x5f,0xdb,0x02,0xf9,0x5b,0x35,0xd7,0x80,0x4d,0x0e,0xc4,0x2f,0xad,0x16,
    0x76,0x1f,0x09,0xc4,0xf1,0x37,0x4f,0xd8,0x94,0x40,0x1c,0x67,0x6f,0x93,0x9b,0x26,
    0xb9,0x06,0x27,0xf7,0x87,0x40,0x1c,0x67,0xe0,0xe7,0x84,0xfd,0x31,0x50,0x1f,0x9c,
    0xe9,0x4e,0x97,0x6e,0xd9,0xe9,0xce,0x08,0xc4,0xc7,0x3a,0xdd,0x99,0x81,0xfa,0x33,
    0x9c,0xee,0x63,0xd2,0xad,0x38,0xdd,0xc7,0x03,0xf1,0x01,0x4e,0xf7,0x89,0x40,0xfd,
    0xc7,0x9d,0xee,0x7d,0x8a,0x59,0xc9,0xc5,0xec,0xe9,0x40,0xdc,0x5f,0x16,0xb3,0x67,
    0x02,0x79,0x1f,0xb3,0x79,0x81,0xb8,0x8f,0xd9,0xfc,0x40,0xdc,0xc7,0xec,0xf9,0x40,
    0xdc,0xc7,0xec,0x4f,0x92,0xf3,0x31,0x7b,0x21,0x10,0xf7,0x31,0x7b,0x31,0x50,0xff,
    0x05,0xe7,0xfb,0x42,0xe9,0xfa,0x98,0x2d,0x0a,0xc4,0x7d,0xcc,0xfe,0x12,0xa8,0xbf,
    0xc8,0xe9,0xbe,0x24,0x5d,0x1f,0xb3,0x97,0x03,0x71,0x1f,0xb3,0x57,0x02,0xf5,0xc1,
    0x21,0xef,0x61,0x2d,0xbc,0x3f,0x30,0x96,0xe0,0x30,0xc6,0xb1,0x36,0x03,0xb3,0x39,
    0xf6,0x4e,0x60,0x6e,0x45,0x3e,0xb9,0x4e,0xd8,0xbb,0x81,0xf7,0x5a,0xc0,0x61,0x2e,
    0xe0,0x0c,0xb3,0x24,0x70,0x5d,0x1f,0xe5,0xe6,0xf9,0xd2,0x40,0xfc,0xc5,0x5c,0x0b,
    0xe5,0x65,0x81,0xd8,0x6c,0xed,0x9b,0x6c,0xfe,0xbf,0x17,0xc8,0x99,0xde,0x8a,0x3a,
    0xbd,0x95,0x81,0xd8,0xb3,0xda,0x9b,0x98,0xde,0xaa,0x40,0xce,0xf4,0xde,0xaf,0xd3,
    0xfb,0x20,0x10,0x5b,0x50,0xa7,0xb7,0x26,0x90,0xb3,0xdc,0xf6,0x61,0x60,0x9b,0x30,
    0x8f,0xad,0x3d,0x1f,0xa9,0x3d,0x1f,0x3a,0xfb,0x1f,0x07,0xe2,0xb6,0x96,0xad,0x97,
    0x1e,0xee,0x13,0x59,0x9d,0x1b,0x02,0xe5,0xc0,0x8d,0x70,0x75,0x6e,0x0c,0xe4,0x2c,
    0x86,0x9b,0x02,0xf7,0xd6,0xef,0x38,0x3f,0xb6,0x04,0xe2,0xde,0x8f,0x4f,0xe4,0xc7,
    0x16,0xe7,0xc7,0xd6,0x40,0xdc,0xfc,0xf8,0x4c,0x7a,0x2f,0x97,0x8a,0xfd,0xc7,0xb6,
    0x40,0xb9,0xcf,0x42,0xb1,0xdf,0xf8,0x3c,0x10,0x1f,0xe5,0xfc,0xc2,0x61,0xf6,0x73,
    0xf5,0x3d,0xf6,0x69,0x9f,0xd6,0xea,0x8e,0x6b,0xe7,0xc1,0x4a,0xca,0xbd,0x1b,0xe2,
    0xb5,0x31,0x14,0x39,0xae,0x31,0x25,0x67,0x6d,0x89,0x53,0xda,0xc1,0x1e,0x65,0xbe,
    0xb0,0x24,0xa5,0x1c,0xb8,0xf6,0x7d,0x4b,0x4a,0x7c,0x55,0x28,0xf2,0x70,0x53,0xca,
    0xfe,0x07,0xd7,0x54,0x0a,0xdc,0xb7,0xa4,0x9c,0x43,0xdd,0xc5,0x6f,0xd6,0xfd,0x0c,
    0x1b,0xef,0x5f,0x4d,0x39,0xcf,0x2b,0x6e,0x9e,0xef,0x91,0x12,0xf7,0x97,0xcd,0xf3,
    0x3d,0x53,0xf2,0x7e,0x9e,0x77,0x49,0x89,0xfb,0x79,0xbe,0x6f,0x4a,0xdc,0xcf,0xf3,
    0x6f,0xa6,0xc4,0xfd,0x3c,0xef,0x2a,0x39,0x3f,0xcf,0xf7,0x4f,0x89,0xfb,0x79,0xfe,
    0xad,0x94,0xfa,0xe0,0x4c,0xf7,0x40,0xe9,0xfa,0x79,0xde,0x2d,0x25,0xee,0xe7,0x79,
    0xf7,0x94,0xfa,0xdd,0x9c,0xee,0xc1,0xd2,0xf5,0xf3,0xfc,0x90,0x94,0xb8,0x9f,0xe7,
    0x87,0xa6,0xd4,0x3f,0xc4,0xe9,0xee,0xaa,0x98,0x95,0x5d,0xcc,0x0e,0x4f,0x89,0xfb,
    0xcb,0x62,0x76,0x44,0x4a,0xde,0xc7,0xec,0xc8,0x94,0xb8,0x8f,0xd9,0x51,0x29,0x71,
    0x1f,0xb3,0x9e,0x29,0x71,0x1f,0xb3,0x5e,0x92,0xf3,0x31,0xeb,0x9d,0x12,0xf7,0x31,
    0x3b,0x26,0xa5,0x7e,0x6f,0xe7,0xfb,0x71,0xd2,0xf5,0x31,0xeb,0x93,0x12,0xf7,0x31,
    0x3b,0x3e,0xa5,0x7e,0x1f,0xa7,0x7b,0x82,0x74,0x7d,0xcc,0x4e,0x4c,0x89,0xfb,0x98,
    0x9d,0x94,0x52,0x1f,0x9c,0xe5,0xc6,0xce,0x29,0x63,0x09,0x0e,0x7b,0xb9,0x91,0x5a,
    0xa7,0x87,0xbb,0x75,0xfa,0xd4,0xf4,0x8b,0xeb,0xf4,0x8f,0x53,0xe2,0xfe,0xb2,0xb8,
    0xfe,0x24,0x25,0xef,0xe3,0x7a,0x4e,0x4a,0xdc,0xc7,0xb5,0x7f,0x4a,0xdc,0xc7,0x75,
    0x40,0x4a,0xdc,0xc7,0xf5,0x5c,0xc9,0xf9,0xb8,0x9e,0x97,0x12,0xf7,0x71,0x1d,0x94,
    0x52,0xff,0x3c,0x17,0x9b,0xc1,0xd2,0xf5,0x71,0xbd,0x20,0x25,0xee,0xe3,0x7a,0x61,
    0x4a,0xfd,0x0b,0x9c,0xee,0x10,0xe9,0xfa,0xb8,0x0e,0x4d,0x89,0xfb,0xb8,0x5e,0x9c,
    0x52,0x7f,0xa8,0xd3,0x3d,0x3d,0xfd,0xe2,0x3a,0xfd,0xb3,0x94,0xb8,0xbf,0x2c,0x66,
    0x97,0xa6,0xe4,0x7d,0xcc,0x2e,0x4f,0x89,0xfb,0x98,0x5d,0x91,0x12,0xf7,0x31,0x1b,
    0x99,0x12,0xf7,0x31,0x1b,0x25,0x39,0x1f,0xb3,0x2b,0x53,0xe2,0x3e,0x66,0x57,0xa5,
    0xd4,0xbf,0xd2,0xf9,0x7e,0x8d,0x74,0x7d,0xcc,0x46,0xa7,0xc4,0x7d,0xcc,0x5a,0x53,
    0xea,0x8f,0x76,0xba,0xd7,0x49,0xd7,0xc7,0xec,0xfa,0x94,0xb8,0x8f,0xd9,0x98,0x94,
    0xfa,0xd7,0xbb,0xb1,0x78,0x66,0xca,0x58,0x8e,0xa9,0x1b,0x8b,0xf8,0xbf,0x31,0x8f,
    0x21,0xf2,0xe6,0x63,0x55,0xe6,0x4e,0xec,0x23,0x91,0x2f,0x87,0x8b,0x83,0xfe,0xa8,
    0x2a,0xc7,0x33,0x38,0xd8,0xf2,0x63,0x78,0x54,0x4c,0xde,0xce,0x69,0xb5,0x78,0xc4,
    0xc2,0xb5,0x16,0x61,0x3d,0xb8,0x3a,0xe6,0xd9,0x1b,0x9c,0xad,0x05,0xd7,0xc4,0xc4,
    0x6d,0x2d,0x1a,0x1d,0x13,0xf3,0x67,0x87,0xd6,0x98,0x78,0x8b,0xd6,0x1d,0xd8,0xbf,
    0x36,0x26,0x6e,0xfb,0xe4,0x31,0xda,0x27,0xb7,0x68,0x9f,0x7c,0x93,0xdb,0x27,0x83,
    0xfb,0x79,0x7e,0xfd,0x97,0xda,0xfc,0x73,0x77,0x86,0xfe,0xa5,0xfc,0xc4,0xf9,0xc2,
    0x6c,0xdd,0x18,0x13,0x1f,0x50,0x62,0xac,0x6e,0x92,0x1e,0xf4,0x7d,0xf9,0x26,0xc5,
    0x07,0x3a,0xd7,0x54,0xa9,0x07,0xdb,0xb8,0x9f,0x0b,0xd9,0x87,0x64,0xef,0xe6,0x3a,
    0xdf,0xee,0x70,0xbe,0x81,0xbb,0x25,0xbf,0xee,0x90,0xcd,0x5b,0x9c,0x6f,0xb7,0x7d,
    0x89,0x6f,0xb7,0xc7,0xc4,0xcd,0x37,0xd3,0xbb,0xc3,0xf9,0x72,0x67,0xcc,0x3a,0xe1,
    0xdf,0xed,0xb2,0x8f,0x7a,0x7f,0x14,0x8a,0x7a,0x21,0x73,0x57,0x7e,0x4d,0x94,0x3e,
    0x7e,0x9f,0x9a,0xaf,0x9f,0xb8,0xdf,0x71,0xb7,0xfa,0xd3,0xfa,0xd4,0xae,0x31,0xf2,
    0xeb,0x1e,0xdd,0x97,0x40,0x1f,0xf4,0xd5,0x7d,0xa1,0x71,0x31,0x71,0xbb,0xb0,0xb6,
    0x03,0xff,0x6d,0xcc,0xfb,0xd2,0xe3,0x74,0x6f,0x03,0xd8,0xf8,0x98,0x75,0x80,0xbb,
    0x4a,0xcf,0x0f,0xee,0x8d,0x89,0xa3,0xed,0x28,0xdf,0x17,0x13,0xc3,0x7d,0xa8,0x31,
    0xc2,0x1e,0x88,0x89,0xe3,0x9e,0x15,0xda,0x8e,0xf6,0xc0,0x77,0xb4,0xc1,0xf6,0x4f,
    0x93,0x14,0xb3,0xb9,0x3a,0x57,0xd9,0x3e,0xa5,0x2d,0x26,0x67,0xe5,0xc9,0x92,0x7b,
    0x21,0x2f,0xa1,0xfc,0x70,0x4c,0x6c,0xb6,0xee,0x9b,0x99,0xbd,0xa9,0x92,0x5b,0x54,
    0x67,0x6f,0x5a,0x4c,0xce,0xf4,0xa7,0x4b,0x7f,0x41,0x9d,0xfe,0x2c,0xe9,0xaf,0x29,
    0x6d,0xaf,0xff,0x58,0x4c,0xce,0xf4,0xe7,0x48,0xbf,0x5f,0xfb,0xbd,0x3b,0x8e,0xfd,
    0xa7,0x63,0xfa,0xfe,0x70,0x5c,0x60,0x73,0x63,0xd6,0x3f,0xdd,0x61,0xf3,0x63,0xda,
    0x9c,0x13,0x17,0x73,0x64,0x41,0x4c,0xfd,0xc9,0x1a,0x3b,0x7f,0x8a,0x89,0xe1,0x7e,
    0x3e,0xc6,0xc3,0x99,0x6e,0x3c,0x80,0x7b,0x21,0xbf,0xf6,0x4f,0x18,0xd3,0x17,0x5c,
    0x4c,0x17,0xaa,0x0d,0xb3,0x4b,0xdb,0xef,0x49,0x17,0xc5,0xe4,0x4c,0xee,0x25,0x17,
    0x7b,0x2f,0xf7,0x72,0x4c,0x6e,0x9e,0x7c,0x7d,0x25,0x26,0x36,0x42,0x39,0x0b,0xd8,
    0xab,0x31,0xed,0xbd,0xe2,0xec,0xbd,0x26,0x7b,0xf5,0xfb,0xf6,0xc5,0x31,0x39,0x93,
    0x7b,0x5d,0x72,0xf5,0xfb,0xf4,0x37,0x62,0x72,0x26,0xf7,0xb6,0xe4,0x56,0xd6,0xc9,
    0xbd,0x13,0x93,0x33,0xb9,0xa5,0x92,0xeb,0x57,0x27,0xb7,0x2c,0x26,0x67,0x72,0x2b,
    0x24,0xd7,0x5c,0x27,0xb7,0x32,0x26,0x67,0x72,0xef,0x4b,0xce,0xee,0xbd,0x5a,0xee,
    0xfe,0x20,0x26,0xd7,0xe2,0x72,0xf7,0x47,0x31,0x71,0xe4,0x48,0xec,0xa9,0x71,0x6f,
    0x13,0xcf,0x47,0x2c,0x87,0xae,0x8b,0x79,0xbf,0xf3,0x23,0x97,0x43,0xd7,0xc7,0xc4,
    0x2d,0x1f,0x6f,0xd4,0xfc,0xf5,0xf7,0x2b,0x36,0xc5,0xbc,0x8f,0x8b,0x73,0x98,0xed,
    0xf1,0x37,0xc7,0x94,0xdd,0xe4,0x72,0xce,0x96,0x98,0xf8,0x78,0xd7,0x9e,0x4f,0x62,
    0xe2,0xed,0x67,0x03,0xe9,0xc1,0x56,0xfb,0xd9,0x20,0x26,0xbe,0xdd,0xd9,0x20,0x21,
    0x6e,0x7d,0x5c,0x49,0x68,0x0b,0x38,0xc6,0x5f,0x48,0x8a,0xf1,0x87,0xfc,0x19,0xe5,
    0xe5,0xa0,0xf1,0x87,0xdf,0x96,0xf3,0x92,0x84,0xba,0x23,0x94,0xf3,0x4c,0x06,0xff,
    0xdb,0x73,0x5e,0x95,0x39,0x18,0xe3,0x16,0xf2,0x5e,0x3f,0x93,0xfe,0x66,0xe5,0xdf,
    0xae,0xae,0x5e,0x70,0xd5,0xfc,0xda,0x49,0x36,0xf1,0xbb,0xaf,0xee,0x69,0x7f,0x25,
    0xe1,0xb8,0xc4,0x78,0xc3,0x58,0xb2,0x3c,0xd4,0x29,0x21,0x67,0x79,0xa8,0xab,0x74,
    0x61,0xc3,0xce,0x34,0x3b,0xcb,0xdf,0x8a,0xb3,0xd7,0x39,0xe1,0x58,0xc3,0x38,0x5a,
    0xe9,0xec,0xed,0x9e,0x90,0xbb,0xbc,0x5a,0x9c,0x75,0xf6,0x48,0x68,0x63,0x7d,0x5c,
    0xe8,0xef,0x99,0x10,0xb7,0xab,0x55,0xfa,0x7b,0x25,0xb4,0x01,0x1e,0x67,0x20,0x60,
    0x5d,0x92,0xe2,0x0c,0x04,0x1e,0xcf,0xc9,0xf0,0x4c,0xcc,0xfb,0xdb,0x55,0xf1,0x83,
    0xfc,0xb4,0x2a,0xdb,0x85,0xf6,0x77,0x51,0x3c,0x20,0x7b,0xa6,0x72,0x2c,0xf2,0x82,
    0xe5,0x95,0x03,0x12,0xe6,0x20,0xcb,0x2b,0x07,0x26,0xc4,0x2c,0xaf,0x9c,0xe1,0xf2,
    0x0a,0xb8,0x6e,0xf9,0x35,0x51,0x75,0xe2,0xb7,0xcd,0x8b,0x83,0x93,0x22,0x5f,0xf8,
    0xf9,0x73,0x48,0x42,0xce,0xe4,0xbe,0x93,0x14,0xf9,0xa7,0xd5,0xc9,0x7d,0x37,0x21,
    0x67,0x79,0xe5,0xb0,0x84,0x58,0x8b,0x3b,0xc7,0x7e,0x4f,0xba,0x78,0x26,0x6a,0x63,
    0xf5,0xdf,0x12,0xe1,0xce,0xd6,0x91,0x09,0x71,0x1b,0xab,0x3d,0x12,0xda,0x3b,0xd2,
    0xf9,0x71,0xb4,0x6c,0xcd,0x2c,0x6f,0xef,0x47,0xaf,0x84,0x9c,0xd5,0x79,0xac,0xe4,
    0x6e,0x76,0xfb,0xa1,0xe3,0x12,0xe2,0x63,0x9d,0x5e,0x9f,0x84,0xb8,0xd5,0x79,0x7c,
    0x42,0x5b,0x7d,0x5c,0x9d,0x27,0x26,0xc5,0xfa,0xe1,0x63,0x74,0x52,0x42,0xce,0xe4,
    0x4e,0x96,0xdc,0xea,0x3a,0xb9,0x53,0x12,0x72,0x26,0xd7,0x57,0x72,0xad,0x75,0x72,
    0xa7,0x25,0xe4,0xcc,0xdf,0x33,0x25,0x37,0xc8,0xad,0xfb,0x3f,0x49,0x98,0x17,0xae,
    0xd4,0xba,0x53,0xbb,0x17,0x9b,0x50,0x16,0x5c,0xfb,0xfd,0xd7,0x84,0x7d,0x88,0x67,
    0xad,0x86,0xf5,0x4f,0x18,0xd3,0xb6,0x4a,0x91,0x93,0x06,0x24,0x94,0xed,0x9f,0xb8,
    0xfb,0xaf,0x09,0xf1,0xe3,0x9d,0xbd,0x41,0x09,0xdb,0xeb,0xed,0x0d,0x4e,0xd8,0x36,
    0x6f,0xef,0x82,0x84,0xb2,0x83,0x9d,0xbd,0x8b,0x12,0xe2,0x68,0xdf,0x14,0x8d,0xd7,
    0x21,0x09,0xeb,0x01,0xd7,0xa6,0xb8,0x0c,0x4d,0x88,0x8f,0xd2,0x73,0x19,0x6b,0x5f,
    0x73,0xc2,0x36,0x82,0x47,0x3e,0x3e,0xa5,0x2e,0x1f,0xb7,0x24,0x7c,0xde,0x04,0x39,
    0xcb,0xc7,0xc3,0x12,0xe2,0x96,0x8f,0x2f,0x4d,0xbe,0x98,0x8f,0x87,0x27,0x5f,0xcc,
    0xc7,0x97,0x27,0x94,0x1d,0xee,0xfa,0x61,0x44,0x42,0xdc,0xe7,0xe3,0x2b,0x12,0xe2,
    0xa6,0x77,0xa5,0xf4,0x7c,0x3e,0xbe,0x2a,0x21,0xee,0xc7,0xf8,0xd5,0x09,0x71,0xcc,
    0xd1,0x31,0x75,0xb9,0x77,0x34,0xe2,0xad,0x39,0x3a,0xda,0xc5,0xef,0xba,0x84,0xf5,
    0x5d,0xed,0xf2,0xe9,0xf5,0x09,0x71,0xcb,0xc7,0xa6,0x37,0xc6,0xe5,0xe3,0xbb,0x95,
    0x8f,0x31,0xdf,0x21,0x0f,0x9b,0xb6,0x1f,0xfe,0x85,0x6c,0x5a,0x3e,0xfe,0xb5,0xf3,
    0x05,0xdc,0x0d,0xf9,0xf5,0x2b,0xd9,0xbc,0xc1,0xe5,0xcf,0x9b,0x34,0x0e,0x4e,0x51,
    0x7f,0xa2,0xee,0x5f,0x4b,0xee,0x57,0x4e,0xee,0x56,0x8d,0xbf,0x1e,0x1a,0x47,0x5e,
    0xee,0xd7,0x2e,0xe7,0x8d,0xae,0xd2,0x26,0xea,0xb8,0x55,0x75,0x5a,0x4e,0xbe,0x33,
    0x21,0xef,0x73,0xf2,0x6f,0xd4,0xe6,0xab,0x5d,0x9e,0xbf,0x5b,0xf9,0xe6,0x37,0x6e,
    0xbc,0x8e,0x4b,0x88,0x0f,0x73,0x3e,0x8d,0x4f,0x88,0xdb,0x65,0xb9,0xfb,0xde,0x84,
    0x75,0x8d,0x77,0xb9,0xfb,0x77,0x2e,0x77,0xdf,0x5b,0x97,0xbb,0xcf,0xb0,0x3d,0xaf,
    0xcb,0xc7,0x0f,0x26,0xdc,0xff,0x59,0x3e,0x9e,0x94,0x10,0xb3,0x7c,0x7c,0xba,0xcb,
    0xc7,0xe0,0xda,0x30,0x56,0x65,0xa7,0xcd,0xe5,0x86,0xc9,0x9a,0xf3,0x78,0x18,0xbb,
    0xdc,0x8d,0x9b,0x87,0x13,0x72,0xed,0x7b,0x62,0xc9,0xe1,0x79,0xb1,0x97,0x9b,0x96,
    0x90,0xb3,0x71,0xf9,0xa8,0xe4,0xf0,0x3e,0x82,0xc9,0x4c,0x4f,0x88,0xdb,0x79,0x6f,
    0x46,0x42,0x0c,0xef,0x78,0x58,0x1e,0x9c,0x99,0xd0,0xd6,0x0c,0x57,0xe7,0xe3,0x2e,
    0xbf,0xf9,0xdc,0xfb,0x44,0x42,0xce,0xe4,0x9e,0x74,0xf9,0xd2,0xef,0x41,0x9f,0x4a,
    0xc8,0xd9,0x5a,0xf1,0x74,0x42,0xac,0xd5,0xed,0x41,0x9f,0x49,0x68,0xef,0x69,0xd7,
    0x86,0x79,0xce,0x9e,0xd9,0x7a,0x2e,0x21,0x6e,0x6d,0x98,0x9f,0x10,0xeb,0xe2,0xda,
    0xf0,0x7c,0x42,0x7b,0xf3,0x93,0x42,0xef,0xc5,0x84,0xb9,0xd3,0x7c,0x5d,0x94,0x14,
    0xfb,0x42,0x7f,0x36,0xf8,0x4b,0x42,0xce,0x7c,0xfd,0x6b,0x42,0xac,0xc5,0xf9,0xfa,
    0x52,0x42,0x7b,0x7f,0x75,0x79,0xe6,0x15,0x97,0x67,0xac,0x8e,0x57,0x13,0xe2,0x07,
    0xd5,0xf5,0xe9,0xdf,0x12,0x72,0x26,0xb7,0x58,0x72,0xe8,0xfb,0xd5,0x4e,0xee,0xef,
    0x09,0x39,0x93,0x7b,0x43,0x72,0xf6,0x6e,0x9e,0xc9,0xbd,0x99,0x90,0x33,0xb9,0x77,
    0x24,0xb7,0xa8,0x6e,0x8c,0xbc,0x9b,0x90,0x6b,0xbf,0xa7,0x2f,0xb9,0xcd,0xa5,0xed,
    0xe5,0xde,0x4b,0xc8,0x59,0x0c,0x56,0x24,0x1c,0x87,0xfe,0xbe,0xc0,0x2a,0x61,0xcd,
    0x2e,0x2e,0xab,0x13,0xca,0xae,0x72,0xba,0x1f,0x24,0x8c,0x97,0xd7,0x5d,0x2b,0xcc,
    0xeb,0x7e,0x98,0x50,0x76,0xad,0xd3,0xfd,0x38,0x61,0xac,0xbc,0xee,0x7a,0x61,0x5e,
    0x77,0x43,0x42,0xd9,0xf5,0x4e,0xf7,0x9f,0x09,0xc7,0x72,0x8b,0xd3,0xdd,0x2c,0x6c,
    0xb9,0xd3,0xdd,0x92,0x50,0x76,0xb3,0xd3,0xdd,0x9a,0x30,0xf6,0x5e,0xf7,0x33,0x61,
    0x5e,0x77,0x5b,0x42,0xd9,0xcf,0x9c,0x2e,0x5e,0xa0,0x7d,0xb3,0x4e,0xb7,0x2c,0xcc,
    0xeb,0x56,0x02,0x65,0xc1,0x99,0x6e,0x14,0x38,0x76,0x7d,0x7b,0x13,0x61,0xbe,0xbd,
    0x21,0x50,0x36,0x71,0xba,0x59,0x60,0xff,0x7a,0xdd,0x26,0x61,0x5e,0xb7,0x43,0xa0,
    0x6c,0x93,0xd3,0xfd,0x4a,0x60,0x9f,0x7b,0xdd,0x8e,0xc2,0xbc,0x6e,0xa7,0x40,0xd9,
    0x8e,0xa1,0xc8,0xad,0xbb,0x04,0xf6,0x3b,0xe2,0x18,0x1c,0xbe,0x5b,0x60,0x9f,0x22,
    0x46,0x1d,0xf4,0xec,0x04,0xf8,0xd7,0x03,0xb9,0x5d,0x9c,0xec,0x5e,0x81,0x7d,0x88,
    0x98,0x74,0x72,0xb2,0x5d,0x02,0xb9,0x5d,0x42,0xb1,0xe6,0xef,0x13,0x78,0x1f,0x6b,
    0x80,0x7b,0x6e,0xbb,0x6f,0x20,0x6e,0xf6,0xf6,0x0b,0xc4,0xec,0xb2,0x75,0xa5,0x6b,
    0x60,0xfd,0xfb,0x39,0x7b,0xfb,0xcb,0xde,0x28,0xff,0x0e,0x42,0x20,0x6e,0xf6,0x0e,
    0x0c,0xc4,0xec,0x32,0x7b,0xdd,0x02,0x7d,0x3c,0x30,0x14,0x6b,0xca,0x21,0x81,0xf5,
    0x74,0x73,0xd8,0xb7,0x03,0x71,0xbc,0x07,0x34,0x57,0xd8,0x77,0x03,0xf1,0xe1,0xd5,
    0x42,0xee,0x30,0xb5,0x15,0x9c,0xad,0x47,0x47,0x84,0x62,0x3d,0x02,0xef,0xd7,0xa3,
    0xd3,0xb5,0x8e,0xf4,0x74,0xbe,0x1e,0x13,0x78,0xcf,0x62,0x9a,0xee,0x49,0xd8,0x9c,
    0x3e,0x2e,0x14,0xf7,0x8c,0x20,0x77,0x42,0xe0,0x7d,0x8d,0xe9,0xba,0x6f,0x61,0xf8,
    0x89,0x81,0xb2,0x76,0x59,0x5b,0x4f,0x0a,0xe4,0x4e,0x70,0xed,0xfa,0x41,0x60,0x7d,
    0x27,0x69,0x2c,0x01,0x3b,0x25,0x10,0xbf,0xcc,0xb5,0xb5,0xaf,0x30,0xb4,0xf5,0x39,
    0x61,0xa7,0x05,0xca,0x82,0xf3,0x6d,0xc1,0x7f,0xdb,0x23,0xfc,0xb1,0xca,0xf6,0x63,
    0x9d,0xc4,0xbb,0x4c,0x3d,0x1d,0xf7,0x60,0x95,0x18,0x38,0xd8,0x02,0x87,0xfd,0x64,
    0xed,0xcc,0xd9,0xc4,0x75,0x18,0xf7,0x02,0xb1,0x0f,0x32,0xbc,0xea,0x70,0xbc,0xeb,
    0xe9,0xd7,0xf4,0x33,0x9c,0xed,0x3f,0x54,0xb9,0x0f,0xc0,0x7e,0x05,0x3e,0x78,0x9f,
    0x1e,0x50,0xbd,0xe0,0x1e,0x74,0x1c,0xec,0xdf,0x55,0xe5,0xde,0x0b,0x1c,0x7c,0xf0,
    0xdc,0x2f,0xaa,0xac,0x17,0x5c,0x55,0x9c,0x3f,0xe3,0x9d,0xe9,0xea,0x98,0x5a,0xe5,
    0x99,0x10,0x67,0x44,0xf8,0xe2,0x7d,0x1b,0xaf,0xfa,0xc1,0x3d,0xe0,0xb8,0xda,0xfd,
    0xc9,0x2a,0xcf,0xe2,0xe0,0xee,0xaa,0xe3,0xae,0x55,0xfd,0xe0,0x7e,0x21,0xce,0xdf,
    0xc7,0xfb,0x91,0xab,0x63,0xb2,0xea,0xc0,0x7d,0x49,0xf8,0xe2,0x7d,0xfb,0x6d,0x95,
    0xf7,0x02,0xc1,0x8d,0x77,0x5c,0xed,0x5d,0x5a,0xed,0x3b,0xc1,0xdd,0x5e,0xc7,0xb5,
    0x56,0x19,0x73,0x70,0xd7,0x8a,0xc3,0xfe,0xe8,0x46,0xb7,0x3f,0x82,0xcc,0x59,0x79,
    0xf9,0x46,0xf9,0x84,0xdf,0xb6,0x6f,0xed,0xa7,0xf1,0x8b,0x79,0xdf,0xa6,0xfb,0x76,
    0x67,0x07,0xe2,0x2d,0x7a,0xff,0xb4,0xfd,0x0c,0xa4,0xe7,0xde,0x67,0xbb,0x67,0xb6,
    0x3f,0xd5,0xb3,0xd9,0x73,0xdc,0x33,0xe6,0xfe,0x81,0x7b,0x80,0x9f,0x4a,0xde,0xd6,
    0xf2,0x81,0xe1,0x8b,0x67,0x86,0xf3,0xc2,0x17,0xcf,0x0c,0x83,0x02,0x65,0xcf,0x73,
    0xcf,0x69,0xcf,0x0f,0xc4,0xfd,0x99,0x61,0x70,0x20,0x6e,0x7a,0x43,0xa4,0xe7,0xcf,
    0x0c,0x43,0x03,0x71,0x7f,0x66,0xb8,0x38,0x10,0xb7,0x36,0x5c,0xa2,0xb6,0x0e,0x56,
    0xec,0x46,0xba,0xd8,0x21,0xf6,0xc3,0xf2,0xf2,0x48,0xc5,0x6e,0x98,0x7b,0x0f,0xe0,
    0xb2,0x40,0xdd,0x8b,0xdd,0xb3,0xdb,0x11,0x81,0x76,0x80,0xd9,0xd9,0xe2,0x8a,0x40,
    0xdc,0xce,0x16,0x66,0x6b,0xa4,0xeb,0xc7,0xb6,0x2a,0xfb,0x19,0x7d,0x03,0xf9,0x61,
    0xa1,0x78,0x86,0x71,0x4f,0x95,0xf5,0x80,0xbb,0x4c,0x1c,0xce,0x6d,0x78,0x07,0x10,
    0xef,0x9e,0xda,0xb3,0xe9,0x2b,0x03,0xdf,0x0b,0xec,0xaf,0xfa,0x2d,0xef,0x5e,0x15,
    0xc8,0x99,0xdf,0xd7,0x04,0x62,0xb0,0x6b,0xf9,0xe9,0xda,0x40,0xdc,0x2e,0xcb,0x45,
    0xd7,0x05,0x8e,0xcd,0x6b,0x5d,0xee,0xbc,0xde,0xe5,0xce,0xeb,0xea,0x72,0xa7,0x8d,
    0xb1,0x1b,0xdd,0xd8,0x7e,0xa8,0xca,0xb1,0x8f,0xb9,0x70,0xbd,0x62,0x69,0xed,0x9e,
    0xa4,0x76,0x83,0x43,0x0c,0xc0,0x3d,0x68,0xcf,0x18,0x02,0x9f,0x81,0x4c,0xd2,0x3d,
    0xa9,0x5b,0x65,0xfb,0xd6,0x50,0x8c,0xd5,0xa6,0x26,0xca,0x6d,0xd6,0xb3,0x1e,0xb4,
    0x07,0xef,0x65,0xee,0x20,0xdc,0xae,0x36,0xbb,0xff,0x25,0x0e,0x3e,0x3f,0xe4,0xde,
    0x2b,0xbb,0x2d,0x90,0x2b,0x95,0x0a,0xec,0x0e,0x61,0x0d,0x0e,0xbb,0x4b,0x58,0xd9,
    0x3d,0xb7,0xb9,0x22,0xa2,0xbe,0x95,0x47,0x45,0xd4,0xb5,0xf2,0xd5,0x11,0xf5,0xec,
    0xb9,0xc2,0x35,0x11,0x75,0x20,0x77,0x75,0x54,0x3c,0x2f,0x18,0x97,0x92,0x3b,0xa7,
    0x21,0xe1,0x33,0x85,0xb4,0xf8,0x9e,0x07,0xf8,0xcd,0x9a,0x37,0xe0,0xfe,0x27,0x25,
    0x8f,0x77,0x57,0xed,0x19,0xc4,0x7d,0x29,0x71,0xbc,0xb7,0x6a,0x36,0x27,0xa4,0xc4,
    0x6d,0xed,0xbf,0x3f,0x65,0x3d,0x13,0xd2,0xa2,0x4d,0x13,0x53,0xe2,0xfe,0x9d,0xba,
    0x49,0x29,0x71,0x5c,0xf0,0xa7,0xf6,0xbc,0xc1,0xf9,0x33,0x49,0xcf,0x05,0x5b,0xf4,
    0x0d,0xc2,0xef,0x53,0xf2,0x66,0xf3,0x11,0xd9,0xf4,0xef,0xa6,0x4d,0x91,0xbd,0x47,
    0x9c,0xcd,0xa9,0xce,0xe6,0x94,0x3a,0x9b,0xd3,0x52,0xf2,0x66,0x73,0xba,0x6c,0x96,
    0x9d,0xcd,0x19,0xb2,0x39,0xdd,0xd9,0x9c,0xe9,0x6c,0xce,0xa8,0xb3,0x39,0x2b,0x25,
    0x6f,0xfa,0x73,0xe4,0x8f,0xf7,0xe9,0x49,0xa7,0x3f,0xa7,0x4e,0xff,0xa9,0x94,0xbc,
    0xe9,0xcf,0x93,0xae,0xaf,0xff,0x39,0xa7,0x3f,0xaf,0x4e,0x7f,0x7e,0x4a,0xde,0xf4,
    0x5f,0x94,0xae,0xd7,0xff,0xb3,0xd3,0x7f,0xb1,0x4e,0x7f,0x61,0x4a,0xfe,0x7c,0x8d,
    0x91,0xbf,0x7c,0xc9,0x18,0x39,0x57,0xdc,0x4b,0x5f,0xc2,0xd9,0x33,0xac,0x97,0x53,
    0xea,0x42,0x66,0x98,0xbe,0xe7,0x7b,0x25,0x25,0x8e,0xb9,0xf6,0x6a,0xca,0xb9,0x86,
    0xff,0x98,0xab,0xe0,0x9f,0xab,0x52,0x06,0xf3,0x2f,0xc9,0xe7,0xc0,0xa7,0xe2,0xe0,
    0xd7,0xbc,0x2a,0xbf,0x8f,0x01,0xb7,0x2e,0x2d,0xb8,0xda,0xb3,0x9d,0x2a,0xe7,0x27,
    0xb8,0x6d,0xe2,0xa6,0x69,0x8e,0xbf,0x96,0x92,0x6f,0xae,0x7d,0xcb,0xd3,0x58,0xfa,
    0x5c,0xbc,0xe5,0x5f,0xf0,0x8b,0xf1,0x3e,0x8e,0xfc,0x59,0x9c,0x72,0x1e,0xc1,0x9f,
    0x37,0x52,0x8e,0x3b,0x8c,0x13,0xf4,0xeb,0x1d,0xb9,0x4d,0xf8,0xf2,0x56,0x4a,0xee,
    0xb9,0x6a,0x21,0xbb,0x44,0x72,0xe8,0xbf,0xf9,0x4e,0x76,0x59,0x4a,0xce,0xcb,0xae,
    0x94,0x3d,0xc8,0x2d,0x74,0xb2,0xab,0x53,0x72,0x5e,0x76,0x6d,0xca,0xfa,0x60,0x67,
    0xb5,0x93,0xfd,0x38,0x25,0xb7,0xb6,0xf6,0x0e,0x4f,0x5c,0xc3,0xd6,0x69,0x3e,0xec,
    0x29,0xfe,0x71,0xc5,0x60,0x43,0x4a,0x0e,0xf1,0xc3,0xfa,0xb3,0xd5,0xb5,0x1f,0xdc,
    0xc6,0xfc,0xda,0xaa,0xf6,0xe3,0xf7,0x2f,0x55,0xc7,0xa6,0x94,0xdf,0x20,0xad,0xab,
    0x8d,0x91,0xa8,0xe6,0xcf,0x27,0xaa,0x73,0x93,0xfa,0xd1,0xf4,0xb6,0xba,0x7e,0x44,
    0xdf,0xad,0x55,0x5c,0x3f,0x91,0x7d,0xc8,0x7e,0x2a,0x59,0xfc,0xb7,0xf5,0x6c,0x9b,
    0xfa,0xa7,0xa5,0xb4,0xfd,0xb8,0x40,0x7f,0xcc,0x92,0xff,0x0d,0x19,0xfb,0x7f,0x96,
    0xfc,0xdf,0x29,0x2b,0xfc,0x07,0x57,0xce,0xaf,0x4a,0x46,0x3d,0xfc,0x86,0x9d,0x9d,
    0x54,0x06,0x7e,0x9a,0xda,0x13,0x65,0x8c,0x6d,0xa9,0x54,0xc4,0x2c,0xd6,0xbb,0xd2,
    0x8d,0xe2,0x4d,0x36,0x48,0xb6,0xc1,0xc9,0xa6,0x4e,0x16,0x7c,0x93,0xc6,0x66,0x26,
    0x7c,0x7f,0xd9,0x4b,0x9d,0x9d,0x26,0xd9,0x29,0x3b,0x3b,0x1d,0x9c,0x9d,0x26,0x67,
    0x67,0x07,0x67,0x07,0x36,0x21,0x67,0x7d,0xb1,0x63,0xc6,0xef,0xb4,0x20,0x63,0x7d,
    0xd1,0x49,0xb6,0x77,0xac,0x6b,0x33,0xfe,0x5b,0x5f,0xcc,0xaf,0xf2,0xbb,0x2f,0xc4,
    0xa5,0x93,0xe2,0x64,0xf3,0x71,0xe7,0x8c,0xf3,0xd6,0xc6,0xd4,0xae,0x19,0x31,0xe8,
    0x9c,0xd7,0x40,0x9f,0x3a,0x67,0xc5,0x1c,0xdf,0x35,0xe3,0x1c,0x1f,0x2c,0x6e,0xf7,
    0x2f,0xe1,0x1e,0x55,0x9f,0xed,0x91,0x11,0x83,0xbe,0xbd,0x43,0x87,0xef,0x8d,0xf1,
    0x6d,0x99,0xdd,0x3f,0xde,0x2b,0xa3,0x1c,0x70,0xec,0x0f,0x91,0x73,0x80,0xef,0xed,
    0xec,0xee,0x55,0x67,0x77,0x5f,0xd9,0x45,0xdd,0x66,0x67,0xbf,0x8c,0x78,0xbd,0x9d,
    0xae,0xce,0xce,0x7e,0xb2,0xf3,0xe3,0x06,0xae,0x91,0x07,0x88,0x43,0xfb,0x51,0x9f,
    0xe1,0xdd,0x1d,0xde,0x35,0x2b,0xf6,0x96,0x87,0x66,0xd4,0x29,0xb9,0xe7,0x24,0xdf,
    0xce,0x88,0xb7,0xba,0xe7,0x93,0xdf,0xc9,0x88,0xaf,0x71,0xfb,0xd2,0xc3,0xa4,0xdb,
    0xe0,0x74,0x0f,0xcf,0x88,0xfb,0x67,0x9b,0x47,0x64,0xc4,0x17,0xba,0x67,0x9b,0xdf,
    0xcb,0x68,0xf3,0x08,0xe7,0xcb,0x91,0xb2,0x57,0x76,0xf6,0x7a,0x64,0xc4,0x5b,0x9d,
    0xee,0x51,0x19,0xf5,0x7b,0x38,0xdd,0xde,0x19,0xdb,0xe8,0xdb,0x71,0x4c,0x46,0xdc,
    0xb7,0xe3,0xd8,0x8c,0xb8,0x6f,0x47,0x1f,0xe9,0xfa,0x76,0x1c,0x9f,0x11,0xf7,0xed,
    0xf8,0x7e,0x46,0xdc,0xb7,0xe3,0x84,0x8c,0x36,0xbf,0xef,0x7c,0x39,0x49,0xf6,0x7c,
    0x3b,0x7e,0x90,0x11,0xf7,0xed,0xf8,0x61,0x46,0x7d,0x70,0x76,0xbf,0xf6,0xf6,0x88,
    0xed,0xfb,0xa1,0xc6,0xfe,0x9d,0x7a,0xe7,0x1f,0xff,0x6d,0x5c,0xec,0xd8,0xb4,0xbd,
    0x9c,0xe1,0x1d,0x85,0x03,0x03,0x67,0x67,0x95,0xdf,0x45,0xe4,0xa0,0x87,0x3c,0x33,
    0xc1,0x7d,0x6b,0x00,0xee,0xbe,0xfc,0x9a,0xae,0x7a,0xf0,0xdb,0xd6,0xcc,0x89,0xda,
    0x9f,0x59,0x79,0x92,0xf6,0x67,0x56,0x7e,0xc8,0xed,0xcf,0x30,0xef,0x26,0x47,0xd4,
    0x81,0x1c,0x38,0x9b,0x8f,0x8f,0x44,0xec,0x57,0x2b,0x4f,0x8d,0x18,0x9f,0xeb,0x35,
    0xdf,0xcf,0xce,0x28,0x33,0xd5,0xcd,0xd9,0xfe,0xc2,0xc0,0x19,0x76,0x6e,0x46,0x19,
    0x8f,0x9d,0x9f,0xb1,0xde,0xb3,0x65,0x0f,0xd8,0x85,0x19,0xf1,0x73,0x1d,0x36,0x34,
    0xa3,0xcd,0x73,0x5d,0xee,0xb9,0x38,0xa3,0x2c,0xb8,0x9f,0x0b,0x6b,0xce,0x88,0xe3,
    0x1b,0xd7,0x6b,0x85,0x5d,0x92,0x11,0xc7,0x77,0xae,0x97,0xd8,0xb7,0xed,0x19,0x71,
    0x7b,0xcf,0x74,0x58,0x56,0xec,0xed,0x5b,0x32,0xae,0xdb,0xad,0x6e,0xaf,0xfb,0xb3,
    0x8c,0x32,0x76,0xbe,0xba,0x2c,0x23,0x36,0xca,0x8d,0x91,0xcb,0x85,0xd9,0xbb,0xaf,
    0xb5,0x77,0xce,0x32,0xca,0x82,0xb3,0x71,0xf8,0x9f,0x19,0x71,0xff,0xae,0xc0,0x95,
    0x19,0xf1,0xcb,0x35,0x6e,0x26,0xa8,0x3f,0xa7,0xeb,0xfb,0x92,0x59,0xae,0xcf,0x71,
    0x2e,0x98,0x99,0x97,0x67,0x49,0x06,0xbf,0xed,0xcc,0xf5,0x44,0xc4,0xb3,0xc1,0x66,
    0xad,0x5b,0x26,0x83,0xff,0x76,0xf6,0x98,0x1d,0xf1,0x6c,0x01,0xdb,0x90,0x9f,0xe9,
    0xc6,0xe6,0x9c,0x88,0xfc,0x84,0x52,0xf1,0x5e,0x92,0xf9,0x32,0x41,0x36,0x6a,0xef,
    0xb7,0x57,0xe9,0x33,0xc6,0xdb,0x1c,0xf9,0x62,0x7b,0xbb,0x67,0xf4,0x6d,0x08,0xbe,
    0x27,0xb1,0x36,0x3f,0x1b,0x51,0x07,0xdc,0x85,0xca,0x83,0x73,0xa3,0x22,0x0f,0x3e,
    0xab,0x7d,0x5a,0xfb,0x3b,0xf5,0x1a,0xf3,0x0b,0x5c,0x8c,0x16,0x44,0x9c,0x03,0xe0,
    0xf0,0x6d,0x11,0xde,0xfd,0xbb,0xa8,0x4a,0xbc,0x93,0xce,0x26,0x86,0x0f,0xad,0xd2,
    0x3e,0xf8,0x8a,0xeb,0xc7,0x85,0x11,0xfd,0x1a,0xa8,0x3d,0xe7,0x4b,0x2e,0x17,0xd7,
    0xce,0x54,0x38,0x87,0x8b,0x7b,0xe5,0x4b,0x38,0x9b,0x93,0x77,0x66,0xd4,0x85,0x0c,
    0xfa,0x67,0x9c,0x5b,0xfb,0xc1,0xdd,0x95,0x5f,0xe3,0xb4,0xee,0xe1,0xb7,0x9d,0xb9,
    0xff,0x21,0x9d,0x97,0xb2,0x62,0x1e,0xbe,0x9e,0x11,0x37,0x99,0xb7,0x32,0xd6,0xe7,
    0x65,0xde,0xce,0x88,0xdb,0xd8,0x7f,0x37,0x23,0xf6,0xba,0x1b,0xfb,0x4b,0x32,0xe2,
    0xdb,0xdc,0xd8,0x5f,0x9a,0x11,0xc7,0xd8,0x6f,0x56,0x0c,0x96,0x65,0xc4,0xaf,0x51,
    0x79,0x79,0x46,0xcc,0xc6,0xf6,0x8a,0x8c,0x18,0xbe,0xa7,0xb6,0xbc,0xb6,0x2a,0xe3,
    0x3d,0x88,0x15,0x59,0x71,0x06,0x5d,0x9d,0x11,0xb7,0xfb,0x25,0x16,0xe3,0xf7,0x33,
    0x72,0x36,0x07,0xd6,0x64,0xd4,0x7b,0x5f,0x63,0xdb,0xe2,0x32,0x2e,0x2b,0xc6,0xd3,
    0x92,0x2a,0xc7,0x1b,0xc6,0xd8,0x1a,0xc5,0x6f,0xaa,0xea,0x1e,0x9f,0xb1,0xdf,0xba,
    0xeb,0x19,0xd8,0x44,0x17,0x6b,0x70,0xf7,0xe6,0xd7,0x03,0xb2,0x89,0xdf,0xf6,0x8c,
    0xfb,0x3e,0xf5,0xdf,0xc2,0xa8,0x78,0x06,0x3c,0x21,0x23,0xee,0xc7,0xda,0xfd,0x19,
    0xeb,0x9f,0x20,0xff,0x26,0xca,0xd6,0x03,0x75,0xe5,0x89,0xce,0xdf,0xa5,0x55,0xea,
    0xdd,0xab,0xb5,0xfd,0x01,0xb7,0x06,0x4c,0xaa,0xf3,0x77,0xaa,0xf3,0x17,0x5c,0x5b,
    0x7e,0x4d,0x91,0xcd,0x36,0xe7,0xef,0x64,0xe7,0xef,0x75,0xc2,0x1e,0xce,0x88,0x7b,
    0x7f,0x1f,0x91,0xbf,0x0f,0xcb,0xbf,0xa9,0xb2,0x35,0xa5,0xae,0x3c,0xd5,0xf9,0xfb,
    0x5e,0x95,0x7a,0x6d,0xf2,0x17,0xb2,0x96,0x33,0xfe,0x58,0xe7,0xef,0x53,0xce,0x5f,
    0x70,0x8f,0xe6,0xd7,0x53,0xb2,0xf9,0xa8,0x1b,0x27,0x33,0xe4,0xc7,0x28,0xe7,0xdb,
    0xcc,0x8c,0xf8,0xcb,0x6e,0xde,0x3e,0x96,0x31,0x5e,0x33,0x9d,0xee,0x13,0xd2,0xc5,
    0x37,0xf9,0x96,0x3f,0x67,0x67,0xc4,0x7d,0x5e,0x7c,0x32,0xa3,0xef,0xb3,0xd5,0x36,
    0xf3,0xe3,0x29,0xd7,0xb6,0x55,0x55,0xca,0xa0,0xbd,0x4f,0xca,0x5f,0xe3,0x56,0x56,
    0x59,0x37,0xb8,0xc7,0xc4,0x59,0xfe,0x79,0xc6,0xcd,0x6f,0xc8,0x21,0xc6,0xed,0xb9,
    0xc9,0x71,0xab,0xaa,0xc5,0xfb,0x1f,0xb5,0x73,0xae,0xe6,0x30,0xde,0xab,0x35,0xec,
    0x79,0xcd,0x69,0x60,0xf6,0x1c,0x64,0x41,0x46,0xbc,0x9f,0x7b,0xe6,0xf1,0xa7,0x8c,
    0xfa,0xe0,0x6c,0xbe,0xbc,0x90,0x09,0x57,0x9b,0xff,0x9c,0x11,0x83,0x7f,0xf6,0xce,
    0xef,0xa2,0x8c,0x38,0xfc,0x3a,0xb5,0x94,0xd6,0x72,0xdc,0xab,0x11,0xf3,0x1c,0xb8,
    0x46,0x7d,0x3f,0x5d,0x96,0xcf,0xd6,0xb7,0xff,0xa7,0x7c,0x67,0xcf,0xe7,0x17,0xbb,
    0x75,0x04,0xdc,0x6b,0xf9,0xb5,0x58,0xf9,0xfd,0x35,0xf7,0x3d,0xdb,0xdf,0xf5,0x9d,
    0xe4,0x66,0xf7,0x1c,0xe3,0x1f,0x11,0xf1,0x1b,0xd4,0x96,0xd7,0x23,0x62,0xcd,0xa5,
    0x42,0xef,0x0d,0xe9,0xb5,0x38,0xbd,0x37,0x23,0xe2,0xa6,0xf7,0x56,0x44,0xac,0xd9,
    0x7d,0xe3,0xf9,0x76,0x44,0x7b,0x6f,0x45,0xc5,0x37,0x9e,0xef,0xea,0x5b,0xbd,0xb7,
    0xf5,0x4d,0x21,0xbe,0xd5,0x7e,0x4f,0xdf,0x69,0xdb,0xbd,0x91,0x15,0x11,0xe5,0xfc,
    0xfd,0xab,0x55,0xc2,0x1a,0x9c,0x5f,0x6b,0xe4,0xd7,0x08,0xe7,0xd7,0xda,0x88,0xb8,
    0x9d,0xf9,0x3e,0xd4,0x77,0x86,0x6b,0xa3,0xe2,0xfe,0xe0,0x47,0x11,0xeb,0x80,0x4d,
    0xf0,0xe7,0xe5,0xba,0xf0,0x01,0xf8,0xab,0xfa,0xae,0xd3,0xe2,0xb7,0xb8,0xee,0x3b,
    0x4f,0xfc,0xff,0x2c,0xf7,0xe2,0x7b,0xf9,0xf5,0x2f,0xf4,0x31,0xc3,0xc9,0xa0,0x4a,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//     uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     bool punchthrough;
//     result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//     uint minColor565 = packColorToRGB565(minColor);
//     uint maxColor565 = packColorToRGB565(maxColor);
//     if(minColor565 > maxColor565){
//         swap(minColor565, maxColor565);
//     }
//     uint indices = 0;
//     if(minColor565 != maxColor565){
//         indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//     }
//     else {
//         indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//     finalResult . b = maxColor565 |(minColor565 << 16);
//     finalResult . a = mask;
//
//     finalResult . rg = EncodeBC4(result . a, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
