// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5a,0x6b,0x90,0x56,0xc5,
    0x11,0xbd,0xb7,0x67,0x60,0x59,0x44,0x05,0x41,0x11,0x94,0x28,0x92,0x8a,0xa9,0x80,
    0x66,0x93,0x02,0x5d,0xc3,0x63,0x71,0x31,0x6e,0x4a,0x05,0x95,0xf5,0x45,0x19,0x10,
    0x85,0x2d,0x57,0x0a,0x48,0xd0,0x00,0x06,0x96,0xf7,0x2a,0x08,0x02,0x06,0x54,0x2c,
    0x93,0xfc,0x4b,0x2a,0xf1,0x05,0xa8,0xc1,0x68,0x82,0x51,0x11,0x45,0x65,0x7d,0xc1,
    0x82,0xf2,0x12,0x15,0xc1,0x12,0xa4,0x4c,0x14,0x4a,0x8d,0x0a,0x99,0xfe,0xce,0x69,
    0xbf,0xde,0xcf,0x0d,0x55,0xb7,0xee,0xd7,0xa7,0xfb,0xf4,0xf4,0xf4,0xcc,0x74,0xdf,
    0x7b,0x97,0x20,0xbd,0xca,0xb2,0x90,0x67,0xed,0xb3,0x76,0xd9,0x37,0x31,0x2b,0xfc,
    0xeb,0x94,0x49,0x96,0xf3,0x7e,0x36,0xef,0x03,0x79,0x1f,0x92,0xee,0xc7,0x64,0x6d,
    0x0b,0xfa,0x9a,0x4b,0x6a,0x2f,0x39,0xfb,0x96,0xdf,0x8c,0x3d,0xbb,0x6f,0xbf,0x0a,
    0xe5,0x1d,0x97,0x85,0x02,0x5f,0x75,0xc7,0x67,0x65,0x59,0x9b,0x74,0x57,0x97,0x13,
    0xae,0xbf,0x69,0xa2,0xe2,0x5b,0xd2,0xb5,0x33,0x5d,0x1d,0x13,0x3f,0x16,0xfc,0x65,
    0xd9,0x60,0xda,0xeb,0xf5,0x8b,0xc4,0xe8,0x87,0x10,0xb2,0x5e,0xbc,0x1b,0x96,0x13,
    0x8b,0x0e,0x13,0x62,0xed,0x1c,0x16,0x88,0x75,0x70,0x58,0x24,0xd6,0xd1,0x61,0x6d,
    0x88,0x75,0x71,0x58,0x5b,0x62,0x27,0xeb,0xdc,0x92,0x27,0x1b,0xa3,0x26,0x79,0xd8,
    0x52,0x98,0x77,0x96,0x75,0xa7,0xbc,0x93,0xf2,0x29,0x94,0x9b,0x52,0x80,0x67,0x30,
    0x66,0x93,0x7b,0x3a,0xb9,0xb3,0xb4,0xd4,0xab,0xdc,0x93,0xf3,0xd2,0xb1,0x54,0xee,
    0x46,0xdd,0xc9,0x02,0xdf,0x2a,0x77,0x4e,0x11,0x68,0x0c,0x3d,0x93,0x4d,0x60,0x3c,
    0x27,0x26,0x1b,0x8d,0xf5,0x74,0xfa,0xeb,0x9a,0xe4,0x32,0xc6,0x2f,0x05,0x3c,0x16,
    0x72,0x52,0xc6,0x4b,0xed,0xcb,0x69,0x9f,0x53,0xdf,0x9e,0xba,0x72,0xf2,0x3b,0xf2,
    0xb7,0xf1,0xbb,0x50,0xaf,0x3e,0x7b,0x93,0xff,0xe3,0x74,0x9d,0xe5,0xe4,0x0a,0xe6,
    0xfb,0x7b,0x49,0xea,0x47,0xfe,0xff,0xbb,0xd4,0xe7,0x39,0xfc,0xad,0xb6,0xfd,0x29,
    0x9f,0x4b,0xcc,0x7c,0x56,0x72,0x4c,0xb5,0x3f,0xcf,0xf1,0x4d,0x3f,0x80,0x73,0xee,
    0xc2,0x3d,0xd9,0x9b,0xb9,0xa8,0xe6,0xdc,0xcc,0xee,0x42,0xae,0xa3,0xc9,0x35,0xdc,
    0x27,0x26,0x0f,0xe7,0xda,0x9b,0x5c,0xcb,0x7d,0x62,0xf2,0x08,0xee,0x17,0x93,0x47,
    0x71,0xcf,0x98,0x3c,0x26,0x5d,0xa7,0x39,0xb9,0x8e,0xb9,0xd3,0x5c,0x4e,0x66,0xcc,
    0xd1,0xc5,0x37,0x85,0xfe,0x4e,0x4d,0xf2,0xd4,0x74,0x9f,0x4c,0xcc,0xf8,0xb7,0x16,
    0xce,0x4f,0x96,0xf5,0x49,0x59,0x57,0xdd,0x6f,0xe9,0x73,0x14,0x63,0xbf,0xd5,0xd9,
    0x4e,0x2b,0xc9,0xc9,0x74,0xee,0x77,0xe3,0x36,0x90,0x5b,0x49,0xdb,0xe9,0xce,0x76,
    0x46,0x49,0x9e,0x66,0x72,0x9d,0x8d,0x3b,0x8b,0x36,0xb5,0xd4,0x4d,0x77,0xba,0xd9,
    0xd4,0x55,0x30,0x2e,0xef,0x77,0x0e,0xcf,0x83,0xd9,0xce,0x75,0xf1,0xcf,0xa4,0xde,
    0x6c,0xe7,0xa5,0xab,0xbd,0xb3,0x6d,0x74,0xf1,0xd6,0x50,0x6f,0xba,0xdb,0x38,0x5e,
    0x25,0xfd,0x78,0xdd,0xed,0xe4,0xd5,0xb6,0xa2,0x9b,0xcf,0x58,0x6d,0xfc,0x69,0x4e,
    0xb7,0xa0,0x64,0x8e,0x5e,0x77,0x87,0x9b,0x63,0xa9,0x6e,0xa1,0xe3,0x55,0x96,0xe8,
    0x16,0x31,0x96,0x8a,0x56,0x74,0x77,0x72,0xdf,0xce,0xa0,0x8d,0xd7,0x2d,0x76,0xf9,
    0x9c,0xc9,0xf9,0x9b,0x6e,0x89,0x9b,0x5f,0xe5,0xb7,0xba,0xce,0x85,0xfd,0xb3,0x94,
    0x7b,0xa4,0x81,0x6b,0x36,0x9b,0x39,0x6f,0x64,0xce,0x6e,0x67,0x0e,0x16,0x70,0x4e,
    0x0b,0x19,0xe3,0x9d,0x1c,0x73,0x09,0xcf,0xd8,0x32,0xae,0xff,0x54,0xb7,0x3e,0xab,
    0x74,0x8f,0x7c,0x7d,0xf4,0xa8,0xc9,0x6b,0xd2,0x75,0x34,0x14,0xf5,0x4f,0xa8,0x9c,
    0x48,0x27,0xa5,0xd3,0xbf,0x96,0x75,0x45,0x75,0xfa,0x7b,0x5d,0xe1,0x74,0x1e,0xa9,
    0x36,0xf9,0xf9,0x82,0x3c,0x6b,0x88,0xc9,0x4d,0x38,0xbe,0x55,0x7a,0x4e,0x36,0xf3,
    0xac,0x07,0xc6,0xd2,0xcc,0xbd,0xb9,0x99,0xf5,0xa1,0x99,0x3d,0x23,0x77,0xf2,0x4e,
    0xb7,0x7f,0x95,0xbb,0x8b,0xf5,0x40,0xf9,0xef,0x50,0xd7,0xd6,0xe9,0xdf,0x2b,0x39,
    0x87,0x1f,0x16,0x7a,0x13,0xce,0xa9,0xe4,0xb0,0xf5,0xfa,0xb2,0xbc,0x58,0x27,0x54,
    0x6e,0x97,0xa3,0x8e,0xe8,0x9a,0xa8,0x7d,0x79,0x8e,0x31,0xd5,0x6e,0x0a,0xf5,0x66,
    0x7b,0x4c,0xfa,0x7d,0xd4,0x71,0x4f,0xca,0x51,0x13,0x4c,0x3e,0x25,0xc7,0x5c,0x2d,
    0x17,0xe7,0x69,0xb0,0xd9,0xbb,0x83,0x4d,0x5f,0x95,0x63,0x2d,0x4c,0xae,0xcf,0x8b,
    0x35,0x47,0xe5,0x45,0x79,0xcb,0x7a,0xbc,0x82,0xe3,0xe9,0x5c,0x1e,0x4e,0xbf,0x07,
    0xb2,0x06,0x75,0x4b,0xda,0x97,0x69,0xdb,0x26,0x6b,0xf9,0x2f,0xe7,0xfd,0x94,0x14,
    0xc9,0x2b,0x49,0x50,0x3b,0xcd,0xdd,0x46,0x2a,0x14,0xeb,0x4f,0xb9,0x89,0x98,0xfa,
    0xeb,0x24,0xf0,0x97,0x97,0xf8,0x93,0x42,0xfd,0x87,0x8f,0x13,0x84,0xcf,0x0f,0x02,
    0x1f,0x2a,0x77,0x26,0x66,0x73,0xe8,0x2a,0xe8,0xf9,0x7d,0x92,0xa4,0xeb,0xac,0xbd,
    0x4e,0xb1,0x6a,0xd6,0xf0,0x3e,0x29,0x62,0xad,0x93,0xff,0x8a,0xd8,0xef,0x35,0x0e,
    0x7b,0x26,0xe2,0x3c,0xd4,0x39,0xec,0xd9,0x88,0xf3,0x53,0xe1,0xd6,0xe8,0xb9,0x88,
    0xb5,0xf0,0x97,0xe5,0xec,0xeb,0x88,0x3e,0x76,0x4e,0xe2,0x0b,0xd7,0x3e,0xe3,0x1e,
    0xfc,0x22,0x21,0x6d,0xb8,0xd7,0xf4,0x5c,0x0c,0x0d,0x58,0x0f,0x93,0xff,0x2c,0x45,
    0x59,0xf7,0xc8,0x9e,0xbc,0xa5,0xfc,0x31,0xe5,0xcf,0x93,0xb7,0xbe,0x9c,0xf7,0x57,
    0xe9,0xb7,0xee,0x97,0x7e,0x02,0xff,0x7a,0x1f,0xc8,0xbd,0x5f,0x25,0xd8,0xdf,0x97,
    0x26,0x96,0xf2,0x06,0x0b,0xb0,0x2a,0x29,0xae,0x55,0x03,0x7b,0xf3,0xf9,0x02,0x7d,
    0x23,0xe7,0x3d,0x44,0x80,0x69,0x9e,0xce,0x4f,0x98,0xee,0xfd,0x0b,0x04,0xe7,0x43,
    0xc7,0x1b,0xc8,0x7c,0xff,0x5c,0x80,0xaf,0x4b,0x36,0x2a,0x5f,0x28,0xc0,0xde,0xa3,
    0xef,0x42,0x6f,0x14,0xe0,0x1b,0x68,0x73,0x11,0x6d,0x3e,0x74,0x36,0x17,0x0b,0x70,
    0xb5,0x51,0x79,0xa8,0x80,0x37,0x23,0x43,0x4c,0x8a,0x0d,0x13,0xd4,0x2a,0xd5,0x5d,
    0x4e,0xec,0x32,0x41,0xac,0x59,0xa1,0x46,0x01,0xbb,0x5c,0x80,0xab,0xfd,0xf0,0x34,
    0xa2,0xce,0xe7,0xfe,0x08,0xdc,0x6c,0x6d,0x9c,0x2b,0x38,0x4e,0x9d,0x1b,0xe7,0x4a,
    0xca,0x57,0xb8,0x71,0xae,0x26,0x37,0x77,0xe3,0x5c,0x23,0xc0,0xaf,0x74,0xe3,0xfc,
    0x31,0x02,0xd7,0xf1,0x72,0x37,0xce,0xb5,0x82,0x39,0x56,0x14,0x6a,0x16,0xb0,0x91,
    0xc4,0x74,0xac,0xcb,0x98,0xf7,0x51,0x02,0x5b,0xd5,0xcd,0x26,0x36,0x5a,0xe0,0x57,
    0x75,0xba,0x16,0xfa,0xdc,0xf2,0x97,0x1c,0xcf,0x36,0x15,0x5c,0x0b,0xf5,0xf7,0xd7,
    0x1c,0xb8,0xd9,0x3c,0x40,0x9b,0x5a,0x67,0xf3,0x60,0x0e,0xdc,0xc6,0x7b,0x28,0x07,
    0x4f,0xf1,0x55,0x09,0xd3,0x73,0xfe,0x48,0x8e,0x31,0x55,0x77,0x7f,0xe2,0xe9,0xb9,
    0x5f,0x49,0x5c,0xf7,0xde,0x6a,0x1e,0xd2,0xff,0x26,0x9d,0xe2,0xab,0xd2,0xa5,0x98,
    0xee,0x3f,0xfd,0xfd,0x65,0xba,0xf7,0xe5,0x7e,0x54,0xfc,0x79,0x8e,0xb5,0x86,0x7e,
    0xf5,0x9c,0x6d,0x20,0xf6,0x14,0x31,0x3d,0x67,0x96,0xeb,0xb5,0x39,0xf0,0xcc,0xad,
    0xc9,0xd3,0x39,0xe6,0xa1,0x3a,0xb3,0x7b,0x86,0x76,0x7e,0x4d,0x9e,0xcd,0x61,0xab,
    0x3a,0xe3,0xae,0x27,0x57,0x31,0xb3,0xdb,0x90,0x03,0x5f,0x9b,0x23,0x37,0x5a,0x97,
    0x5e,0x65,0x4d,0x32,0xff,0xaf,0xe7,0x88,0xd9,0xfb,0xdf,0xc4,0x7c,0xf9,0x75,0xdc,
    0x9c,0x03,0xf7,0x7b,0xa8,0x39,0x07,0x7f,0xb3,0xf3,0xb7,0x95,0xfe,0xfc,0x5e,0x7d,
    0x2b,0x87,0xed,0x56,0xb7,0x6e,0x6f,0x73,0xdd,0xea,0xdc,0xba,0x6d,0xcb,0x81,0x1b,
    0x6f,0x7b,0x0e,0xae,0xe2,0x63,0x93,0x8d,0xd6,0xd9,0x1d,0x9c,0xc3,0x75,0x5a,0x7b,
    0xd2,0x7d,0x27,0xb1,0xed,0x8c,0x41,0xcf,0xde,0x8d,0x02,0x3c,0x2f,0xec,0x39,0xd4,
    0xb3,0x49,0x02,0xdc,0x5f,0xeb,0xe8,0xe3,0x66,0x81,0x5e,0xfb,0xd2,0x06,0x62,0x93,
    0x05,0xf8,0x73,0xb1,0xe8,0x77,0xaa,0x00,0xd7,0x7f,0xeb,0x89,0xdd,0x2a,0xc0,0xdb,
    0xb9,0xf1,0xa7,0xd1,0x2e,0x77,0x76,0xd3,0x05,0xb8,0xf6,0xbb,0x17,0x88,0x35,0x08,
    0xf8,0xd3,0xa5,0xc8,0x9d,0x49,0xae,0x38,0xee,0x2c,0x01,0xae,0xfd,0xd2,0xb8,0xb3,
    0x05,0xfc,0x59,0x8e,0x3b,0x97,0xdc,0xe0,0xb8,0xf3,0x04,0xf8,0x2e,0x37,0x6e,0xa3,
    0x80,0x3f,0xcf,0x71,0xc7,0x31,0x67,0x99,0xcb,0xd9,0x1d,0x02,0xdc,0x5f,0x96,0xb3,
    0x85,0x02,0xbd,0xcf,0xd9,0x62,0x01,0xee,0x73,0xb6,0x54,0x80,0xfb,0x9c,0xdd,0x25,
    0xc0,0x7d,0xce,0x96,0xd1,0xce,0xe7,0x6c,0xb9,0x00,0xf7,0x39,0xbb,0x5b,0xc0,0x5f,
    0xee,0x62,0xbf,0x97,0x5c,0x9f,0xb3,0x15,0x02,0xdc,0xe7,0xec,0x3e,0x01,0x7f,0x85,
    0xe3,0xde,0x4f,0xae,0xcf,0xd9,0xef,0x05,0xb8,0xcf,0xd9,0x1f,0x04,0x7c,0xd5,0x69,
    0x5d,0xd1,0x5e,0x33,0x5e,0x90,0x4b,0xd5,0x0d,0x4a,0x1e,0xb4,0x97,0x8d,0x97,0xe2,
    0xf9,0x58,0xc9,0x5a,0xa8,0xe7,0x75,0x2e,0xb1,0x55,0x82,0xde,0xb9,0xd2,0xd5,0xb9,
    0xd5,0x82,0xb3,0x50,0xe9,0xce,0xc2,0xa3,0x02,0xfc,0xa1,0x64,0xa3,0xb5,0xe9,0x31,
    0x01,0x36,0x80,0xbd,0xf1,0x69,0x29,0xd6,0x27,0xd5,0x3d,0x9e,0xae,0x27,0x59,0x8f,
    0x1e,0xa7,0x6f,0x7d,0x37,0xfb,0x9b,0xa0,0xc7,0x56,0xbb,0x7e,0xb6,0x46,0x80,0x5b,
    0x5f,0x7a,0x42,0x80,0xbd,0x92,0xb4,0x2a,0xff,0x5d,0x80,0x5d,0xc8,0x67,0x07,0xad,
    0x75,0x4f,0xd3,0xf7,0x93,0xce,0xf7,0x53,0xad,0xf8,0xfe,0x87,0x00,0xdf,0x98,0x24,
    0x95,0xff,0x29,0xc0,0xcc,0x97,0x8d,0xb9,0x56,0xa0,0xf3,0xbe,0xf5,0x7e,0x38,0x65,
    0x56,0xf5,0xeb,0x22,0xe2,0xd0,0xb9,0xac,0xe5,0xdc,0x6c,0xdc,0x67,0x5a,0x19,0xf7,
    0x59,0x01,0x6e,0xe3,0x3e,0x27,0xc0,0x86,0xb3,0x37,0xd8,0xb8,0xeb,0x04,0x3a,0xe3,
    0xad,0x2f,0xe1,0xbd,0x20,0xc0,0x46,0x94,0xf0,0x5e,0x14,0xe8,0xac,0x1e,0xbe,0x24,
    0x58,0x4b,0x7d,0xe7,0xb0,0xb8,0x5e,0x66,0x5c,0x2f,0x39,0xff,0xaf,0x08,0x70,0xeb,
    0x91,0x4d,0xe4,0xe9,0xbb,0xaf,0x8d,0xf9,0xaa,0xc0,0xae,0x89,0x7d,0xd2,0xc6,0x7c,
    0x4d,0xa0,0xb3,0xbd,0xf3,0x86,0xe0,0xd9,0x6b,0xa5,0x8b,0x63,0x93,0x00,0xf7,0x71,
    0x6c,0x66,0x1c,0x9b,0x5c,0x1c,0xcd,0x02,0xdc,0xe2,0xd8,0x4a,0xde,0x98,0xac,0xf8,
    0x5c,0xf3,0x96,0xc0,0x6e,0xab,0x7b,0x8e,0x79,0x5b,0x80,0x57,0xbb,0xb8,0xb6,0x09,
    0x70,0xdd,0xf3,0xfa,0x3c,0xb7,0xb4,0x30,0x76,0xdb,0xc2,0xfb,0xe8,0x4e,0xc1,0x33,
    0x9e,0xe6,0xeb,0x35,0x29,0xee,0xe7,0x5d,0x02,0x9d,0xcd,0x65,0xb7,0xc0,0x8f,0x3e,
    0xfb,0xbc,0x48,0xec,0x5d,0x81,0xdd,0x6e,0x77,0x86,0xde,0x17,0xec,0x85,0x1a,0xd7,
    0x4f,0xf6,0x08,0x70,0x5d,0x1f,0x3b,0x1f,0x7b,0x05,0x6b,0x6b,0xe7,0xe3,0xa0,0x3b,
    0x1f,0xaa,0xdb,0x97,0xae,0x03,0xdc,0x67,0xfb,0x9c,0xff,0x8f,0x04,0xe3,0xae,0x73,
    0xd8,0x7e,0x01,0x6e,0x7b,0xff,0x20,0x79,0x07,0xa4,0xa5,0x7c,0xd0,0xed,0xd7,0xf5,
    0x11,0xbc,0x7d,0xf4,0x77,0x40,0x8a,0xf1,0xfe,0x5b,0x10,0xb3,0xda,0x3c,0xc0,0x33,
    0x76,0x48,0x70,0xa6,0x57,0xf1,0xbd,0xd6,0xf0,0x2f,0x88,0xaf,0xe1,0x3b,0x62,0x87,
    0xf4,0x54,0x5c,0x78,0xe6,0x66,0x6d,0x3c,0x8b,0xfe,0x94,0xaf,0xb6,0xca,0x5b,0xcb,
    0x87,0xef,0xc7,0x04,0xef,0x8e,0xfa,0xbe,0xf8,0x2b,0xbe,0x1f,0x49,0x00,0xd7,0xe4,
    0x18,0xc0,0x5b,0x90,0x62,0x53,0xb9,0x4d,0x80,0x8d,0xe2,0xb7,0x11,0x2b,0x0b,0xc0,
    0xd5,0xe7,0x1c,0x62,0xed,0x02,0x70,0x7d,0xf7,0x9c,0xc8,0x35,0x2d,0x0f,0xc0,0xad,
    0x96,0x1e,0x1f,0xd0,0x43,0x82,0xeb,0x21,0xdd,0x02,0x70,0x7f,0x59,0x0f,0xe9,0x1e,
    0xa0,0xf7,0x3d,0xa4,0x47,0x00,0xee,0x7b,0xc8,0x69,0x01,0xb8,0xef,0x21,0xa7,0x07,
    0xe0,0xbe,0x87,0x9c,0x41,0x3b,0xdf,0x43,0x7a,0x05,0xe0,0xbe,0x87,0x7c,0x3f,0x80,
    0xdf,0xcb,0xc5,0xfe,0x03,0x72,0x7d,0x0f,0x39,0x33,0x00,0xf7,0x3d,0xe4,0x87,0x01,
    0xfc,0x33,0x1d,0xf7,0x47,0xe4,0xfa,0x1e,0xd2,0x3b,0x00,0xf7,0x3d,0xa4,0x4f,0x00,
    0xbf,0xb7,0xe3,0x9e,0xc0,0x9c,0x89,0xcb,0xd9,0x4f,0x02,0x70,0x7f,0x59,0xce,0x7e,
    0x1a,0xa0,0xf7,0x39,0xeb,0x17,0x80,0xfb,0x9c,0x9d,0x1b,0x80,0xfb,0x9c,0x55,0x06,
    0xe0,0x3e,0x67,0x3f,0xa3,0x9d,0xcf,0x59,0xff,0x00,0xdc,0xe7,0x6c,0x40,0x00,0xbf,
    0xbf,0x8b,0x7d,0x10,0xb9,0x3e,0x67,0x55,0x01,0xb8,0xcf,0xd9,0xe0,0x00,0x7e,0x95,
    0xe3,0x56,0x93,0xeb,0x73,0x36,0x24,0x00,0xf7,0x39,0xbb,0x20,0x80,0xaf,0x3a,0xeb,
    0xbb,0x5d,0x02,0x72,0xa9,0x3a,0xad,0x41,0xfa,0xce,0xa8,0x98,0x9e,0xfb,0xba,0xd0,
    0xb2,0x2f,0x5e,0x9b,0xe4,0xd1,0x01,0xe7,0x55,0x7f,0x5b,0x8d,0xfc,0x65,0xc0,0xbb,
    0xa6,0xef,0x21,0x23,0x03,0x70,0xab,0x73,0xa3,0x02,0x30,0xeb,0x8b,0xd7,0x05,0x60,
    0xbe,0x2f,0xd6,0xd1,0xf7,0x68,0xe7,0xfb,0xfa,0x56,0x7c,0xdf,0x10,0x80,0x5b,0xcd,
    0x1f,0x13,0x80,0x95,0xf6,0xc5,0xb1,0x01,0x3a,0xef,0x5b,0xef,0x56,0x67,0x5e,0x8e,
    0x88,0x43,0xe7,0x32,0x96,0x73,0xb3,0x71,0x6f,0x6c,0x65,0xdc,0xfa,0x00,0xdc,0xc6,
    0xbd,0x29,0x00,0x2b,0xed,0x8b,0xe3,0x02,0x74,0xc6,0x1b,0x5f,0xc2,0x9b,0x10,0x80,
    0x95,0xf6,0xc5,0x89,0x01,0x3a,0x8b,0x61,0x12,0x63,0xf0,0x3d,0xf0,0xe6,0x00,0xdc,
    0x7c,0x4d,0x0e,0xc0,0x4a,0xfb,0xdd,0x94,0x00,0x9d,0xf9,0x9a,0x4e,0x5f,0xbe,0x8f,
    0x35,0x04,0xe0,0xd6,0xb3,0x66,0x05,0x60,0xbe,0x67,0xcd,0x0e,0xc0,0x7d,0xcf,0x9a,
    0x13,0x80,0xeb,0x7e,0xd1,0x6f,0x12,0xbe,0x67,0x35,0x06,0x7c,0xa7,0xd0,0xb9,0x4c,
    0x09,0xc5,0x9e,0x75,0x5b,0x80,0xce,0x7a,0xd6,0xfc,0x00,0x3f,0xbe,0x67,0x2d,0x08,
    0xb0,0x53,0x9d,0xf5,0x8f,0x85,0x01,0xeb,0xe4,0x7b,0xd6,0xa2,0x00,0xdc,0xf7,0xac,
    0xc5,0x01,0x79,0xb7,0x9e,0x75,0x8f,0xdb,0xbb,0xaa,0x5b,0x92,0xae,0xe5,0xdc,0x03,
    0x4b,0x9c,0xff,0xdf,0x05,0x8c,0x3b,0xce,0x61,0xcb,0x02,0x70,0xdb,0x97,0xf7,0x90,
    0xb7,0x3c,0xb4,0x94,0xef,0x71,0x7b,0x69,0x63,0x04,0x6f,0x09,0xfd,0xa9,0xad,0xc5,
    0x7b,0x5f,0x40,0xcc,0x6a,0x63,0x3d,0xe8,0x4f,0xa1,0xd8,0x83,0x54,0x6f,0x3d,0xc8,
    0x7a,0xcb,0x83,0x01,0x36,0xd6,0x5b,0x1e,0x09,0xc0,0x7c,0x6f,0x59,0x15,0x80,0xfb,
    0xde,0xb2,0x3a,0x00,0xf7,0xbd,0xe5,0xd1,0x00,0xbc,0x81,0xeb,0xfe,0x59,0x8e,0xf7,
    0xd9,0xeb,0x73,0xc4,0x5e,0x16,0x8b,0xdf,0x02,0xcb,0x59,0xab,0xc6,0x52,0x57,0xde,
    0x8a,0xce,0x72,0xbe,0x31,0x80,0xab,0x36,0x9a,0xf3,0x37,0x5d,0xce,0x55,0xd7,0x94,
    0xae,0x37,0x99,0xab,0x26,0xb7,0xf6,0x1d,0xc9,0x51,0xae,0xcd,0xb7,0x53,0x04,0x6e,
    0x36,0x5d,0x22,0xc6,0xf3,0x36,0x27,0x46,0xe0,0x96,0x93,0xae,0x11,0x98,0x72,0x2d,
    0x27,0x27,0x47,0xe0,0xfa,0x2d,0xd3,0x72,0xd2,0x2d,0x02,0xd7,0x9c,0x4c,0x60,0x0e,
    0xba,0x47,0xe0,0x33,0x29,0x9f,0x1a,0x81,0xd9,0xbe,0xef,0x11,0x81,0xe9,0x37,0xd0,
    0x87,0x39,0xdf,0xd3,0x22,0xbe,0xa1,0xf6,0x70,0xcf,0x1e,0xa7,0x47,0xe0,0x33,0xf8,
    0xec,0x61,0x39,0xee,0x19,0xa1,0x7b,0xd1,0x7a,0x67,0x04,0x4f,0x71,0xdd,0x43,0x96,
    0x97,0x37,0xb9,0x87,0xd4,0xe6,0xf5,0x88,0x7a,0xad,0xfb,0x4a,0xed,0x35,0x67,0xab,
    0x39,0xf6,0xe6,0x80,0x75,0xab,0xe7,0x37,0x95,0x1d,0x2e,0xd7,0xaa,0x6b,0x4e,0xd7,
    0x76,0xfa,0x6c,0xe6,0x5e,0x2e,0x3c,0x87,0x06,0xac,0xdf,0x67,0xfc,0x16,0x50,0x78,
    0x0e,0x0d,0xc0,0xa7,0xb8,0x7e,0xb1,0x2d,0x60,0xfc,0xb7,0xb9,0xc7,0x77,0xd0,0xd7,
    0xf6,0x12,0x79,0x87,0x8b,0xf7,0x8d,0x08,0x5e,0x33,0xfb,0x8c,0xda,0x5a,0xae,0xde,
    0x29,0x89,0x77,0x9f,0x8b,0x57,0x75,0xbb,0xd3,0xb5,0x97,0x3e,0x77,0xbb,0x78,0xdf,
    0x77,0xf1,0xce,0x25,0xb6,0x27,0x00,0xf7,0xf1,0x7e,0xc0,0x78,0xf7,0x30,0xbe,0x7d,
    0xf4,0xb5,0xb7,0x44,0xde,0xe7,0xe2,0xdd,0x14,0xc1,0xdb,0xcd,0x78,0xd5,0xf6,0x41,
    0xc6,0xfb,0x51,0x49,0xbc,0x87,0x5d,0xbc,0xaa,0xdb,0xaf,0x7e,0xe8,0x53,0x7f,0xdb,
    0x3e,0xf9,0x98,0x71,0x54,0xbb,0xd8,0x0e,0x06,0xe0,0x63,0x5c,0xef,0xfd,0x24,0x20,
    0x5f,0x07,0x1d,0xf7,0x3f,0xe4,0xea,0x77,0x74,0xab,0xc1,0x9f,0x06,0xe0,0x33,0x1c,
    0xf7,0x50,0x40,0xec,0x9f,0x72,0x6e,0x16,0xc7,0x61,0x37,0xb7,0xad,0x11,0x36,0x3a,
    0xdf,0x43,0x16,0x2f,0x75,0x5b,0x22,0xc6,0x56,0xdd,0x27,0xd4,0xd5,0xe7,0xd0,0x7d,
    0x1e,0x8a,0xe7,0x5b,0xed,0xa6,0x64,0x45,0xdd,0x97,0x4e,0xb7,0x95,0x3a,0x7b,0xe7,
    0xf9,0x2a,0xe0,0x0c,0xaf,0xc8,0x8b,0xd8,0x37,0x3c,0xaf,0x8a,0xad,0x27,0x76,0x24,
    0x00,0xaf,0xe1,0x7c,0xca,0xf9,0xb7,0x1b,0xe5,0x1f,0x71,0x35,0x49,0x3f,0x7c,0x2b,
    0x6e,0x73,0x96,0x08,0xec,0x73,0xf7,0xac,0x12,0x23,0x70,0x8d,0xcb,0x6a,0xd7,0x34,
    0x57,0x9f,0x1e,0x2d,0xa9,0x5d,0x0d,0xad,0xe8,0xac,0x76,0x0d,0x8a,0xe0,0x36,0xb0,
    0x76,0x5d,0x10,0x8b,0xeb,0xad,0xba,0xaa,0x74,0x29,0xa6,0x79,0xae,0x72,0x75,0x69,
    0x1e,0x39,0xd3,0x5c,0x5d,0x6a,0x8c,0xc0,0xbf,0xed,0x6d,0x11,0xe3,0x79,0x9b,0x05,
    0x11,0xb8,0xd5,0xae,0x85,0x11,0x58,0xa3,0xab,0x5d,0x8b,0x22,0x70,0x5f,0xbb,0xee,
    0x8c,0xc0,0x7d,0xed,0x5a,0x1c,0x81,0x5b,0xed,0x5a,0x1a,0x81,0xd9,0xbe,0xba,0x2b,
    0x02,0xf3,0xb5,0x6b,0x19,0x6b,0xd7,0x5d,0xae,0x76,0x2d,0x8f,0xc0,0x4b,0x6b,0xd7,
    0xdd,0x11,0x3a,0xab,0x5d,0xf7,0x46,0xf0,0xee,0x66,0xed,0xb2,0xbc,0xe8,0xdd,0xf6,
    0xd8,0x07,0xac,0x5d,0xba,0x27,0xef,0x65,0xfe,0x34,0xaf,0xc3,0x62,0xcb,0x3a,0x55,
    0x93,0xe4,0xa1,0xe4,0xeb,0x6f,0x3b,0xf7,0x17,0xc5,0xef,0xd6,0xa9,0x8b,0x23,0x70,
    0x7f,0xee,0x2f,0x89,0x18,0xeb,0x62,0xc6,0x32,0x8c,0xbe,0x86,0x96,0xc8,0xc3,0x5c,
    0x6c,0x7b,0x23,0x78,0x35,0x8c,0x71,0x28,0x63,0x1b,0x11,0x5b,0xd6,0xa4,0xe1,0xfa,
    0x2d,0x9e,0xfc,0xe1,0x2e,0xb6,0x2b,0xe3,0x77,0x6b,0xd2,0x55,0x11,0xb8,0x8f,0xed,
    0x6a,0xc6,0x76,0x15,0x63,0x19,0x41,0x5f,0xd7,0x94,0xc8,0x23,0x5c,0x6c,0x1f,0x46,
    0xf0,0x86,0x33,0xb6,0x6b,0x18,0x5b,0x7d,0x6c,0x59,0x7f,0x46,0x26,0xb9,0x9e,0xfc,
    0x91,0x6e,0xad,0xaf,0xe3,0x98,0xbe,0xfe,0x8c,0x8e,0xc0,0x7d,0xfd,0xb9,0x21,0x22,
    0x0f,0xa3,0x1d,0x77,0x2c,0xb9,0xbe,0xfe,0xd4,0x45,0xe0,0xbe,0xfe,0xdc,0x18,0x11,
    0x67,0x1d,0xe7,0x61,0x71,0xd4,0xbb,0x79,0x1c,0xa0,0x8d,0xce,0x4d,0xed,0x47,0x3a,
    0xdd,0x7e,0x8e,0xad,0xba,0x1b,0xa8,0xb3,0x1a,0x33,0xce,0x9d,0xd1,0xfd,0x25,0xf5,
    0x67,0xbc,0xd3,0x1d,0x28,0xa9,0x3f,0x13,0x79,0x0e,0x7d,0xfd,0xf9,0x35,0xcf,0xa5,
    0xaf,0x3f,0x93,0x22,0x70,0x5f,0x7f,0x6e,0x8e,0xe0,0xab,0xce,0xf6,0xfc,0x2d,0x11,
    0xb8,0xcd,0x79,0x72,0x04,0xa6,0xf1,0x59,0xfd,0x99,0x1a,0x81,0x6b,0x5c,0x97,0x26,
    0x4f,0xfa,0xbe,0x18,0x04,0x75,0x69,0x6a,0x2c,0xfe,0x8d,0x4c,0xf8,0xf7,0x3b,0xeb,
    0x2d,0x6d,0x04,0xcf,0x5b,0xf6,0x6c,0x5a,0xe6,0xbe,0xa7,0xa8,0xae,0xad,0x7e,0x5b,
    0xe5,0x77,0x90,0xb6,0xee,0x5b,0x66,0x3b,0x7e,0xcb,0x1c,0xe0,0xbe,0x65,0x96,0x0b,
    0xf0,0xf9,0x9c,0x4b,0x7b,0x01,0x56,0x9b,0x15,0x79,0xc7,0x90,0x37,0xc3,0xf1,0x3a,
    0x08,0x70,0xe3,0x1d,0x2b,0xc0,0x6a,0xdd,0xdf,0x92,0x8e,0x13,0xf8,0x3b,0xd6,0xfd,
    0x2d,0xa9,0xa3,0xe0,0x6f,0x10,0xc7,0xf1,0xbd,0x41,0xff,0x96,0xda,0x85,0x7f,0x47,
    0x1d,0xa3,0xff,0x2f,0x47,0x60,0x13,0xf8,0x3d,0xc7,0xe6,0x51,0x26,0x2d,0xff,0xae,
    0xa3,0xf7,0x6f,0x52,0x76,0x2a,0xd3,0xf5,0x3f,0x38,0x0e,0x88,0x50,0xe4,0x25,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(kAlphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         ivec3 dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
