// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x7b,0x94,0x57,0x55,
    0x15,0xbe,0x77,0x9f,0x33,0xc3,0x00,0xa6,0x3c,0x15,0xa4,0x50,0xd4,0x56,0xb4,0x44,
    0x33,0x4a,0x96,0x8a,0xc4,0xf8,0x20,0x67,0x21,0x41,0x23,0x6b,0x7c,0x61,0xe8,0xc4,
    0x63,0x01,0xe3,0xc8,0x4a,0x5c,0x6a,0x09,0x89,0x06,0xa5,0x61,0xbe,0x40,0xd1,0xb1,
    0xf0,0xaf,0x32,0xc5,0x04,0x49,0x4b,0x4b,0x7c,0x0c,0x22,0x4b,0x10,0x51,0x61,0x1c,
    0x5e,0xea,0xa8,0xc8,0x18,0x20,0xcb,0xf2,0x91,0x9a,0x42,0x67,0xdf,0xef,0xdb,0xfc,
    0xf6,0xfc,0x1c,0x67,0xad,0x33,0xf7,0xee,0x6f,0x3f,0xcf,0x3e,0xe7,0xec,0x7d,0xef,
    0xfd,0x05,0x39,0xba,0x4b,0x16,0xf2,0xac,0x5b,0x56,0x95,0xed,0x8b,0x59,0xf1,0xd7,
    0x33,0x93,0x2c,0xe7,0xf5,0x78,0x5e,0x47,0xf0,0x7a,0x46,0xba,0x76,0xcf,0x2a,0x0b,
    0xfe,0x59,0x63,0xc6,0x8f,0x39,0x7e,0xd6,0x15,0x93,0x8f,0xff,0xfe,0x89,0x27,0xa8,
    0xde,0xc1,0x59,0x28,0xf4,0x95,0x77,0x48,0xd6,0x25,0xab,0x48,0x57,0x35,0xd9,0x58,
    0x3f,0xfd,0x32,0xc5,0x87,0xa6,0x71,0x4a,0x1a,0x3d,0x92,0x7e,0x2c,0xec,0x65,0x59,
    0x35,0xe5,0x0b,0x7b,0x09,0x1d,0x5a,0xd8,0xcf,0xb2,0xc3,0x49,0x9f,0x42,0x7a,0x40,
    0x1a,0x35,0xc9,0xe2,0x62,0x84,0x98,0x1d,0xcd,0xab,0x61,0x39,0xb1,0xe8,0x30,0x21,
    0x56,0xe5,0xb0,0x40,0xec,0x20,0x87,0x45,0x62,0x3d,0x1c,0x56,0x41,0xac,0x8f,0xc3,
    0x2a,0x89,0xf5,0x2b,0x62,0x0b,0x07,0x7c,0x68,0x9c,0x2f,0xa5,0x00,0x8e,0x62,0x4c,
    0x46,0x0f,0x72,0x74,0x1f,0xe9,0xc8,0x57,0x7a,0xd0,0x81,0x79,0x87,0x82,0xee,0x4f,
    0x5e,0x7f,0xc1,0x9c,0x95,0xee,0x9d,0x3c,0xa8,0x8f,0x41,0x49,0x26,0xd0,0x5f,0xdf,
    0x24,0xa3,0xb1,0x1c,0x49,0xfd,0xc3,0x12,0xdd,0x85,0xf1,0x19,0xbf,0x3b,0xf9,0x59,
    0x71,0x8d,0xc5,0x7c,0xbb,0x30,0x97,0x2a,0xdf,0x93,0xf7,0x42,0x7e,0x2f,0xf2,0x7b,
    0x92,0x3e,0x8c,0x74,0x25,0xe5,0x4f,0xa0,0x7c,0x20,0xff,0xbb,0xf4,0xad,0xf8,0x70,
    0xd2,0x43,0x89,0x1d,0xcb,0xf8,0x86,0x31,0xf7,0xc6,0x3f,0xc5,0xf1,0xbb,0x17,0x78,
    0x29,0xbe,0x53,0xc9,0xeb,0xee,0xf8,0x23,0xb9,0x36,0x46,0x8f,0x2a,0xf6,0x55,0xc9,
    0x7e,0x8d,0xe3,0x2b,0x3d,0xba,0xcc,0x7f,0x2d,0xe7,0x67,0xfa,0x75,0x65,0xfc,0x09,
    0x9c,0x8f,0xce,0x6f,0x0a,0x7d,0x7b,0x7f,0x33,0x18,0xbf,0xd1,0x0d,0xdc,0x23,0x46,
    0x5f,0xca,0xbd,0x30,0x24,0x65,0x4a,0xf5,0x1b,0x39,0xa7,0x19,0x94,0xbd,0xd4,0xc9,
    0xce,0x4c,0x63,0xbf,0xa3,0x7f,0x51,0x16,0xdb,0xb5,0x8c,0xc5,0x62,0xbb,0x3d,0x8d,
    0xe3,0xd2,0x18,0x98,0x75,0x3d,0xb0,0xf7,0xbe,0x6a,0x68,0xfe,0xee,0x4a,0xd7,0xae,
    0x69,0x2c,0x66,0xbe,0x95,0xbe,0x9b,0x98,0xd9,0x6c,0x72,0xf2,0xf7,0x90,0x57,0xe9,
    0xf8,0x4b,0xb8,0x1e,0x7d,0x52,0x64,0xf7,0x3a,0xfc,0x3e,0xce,0xd3,0xe8,0x15,0x3c,
    0x17,0x46,0x3f,0xe6,0xf2,0xa2,0xf4,0x4a,0x9e,0x1f,0xa3,0x9b,0xd3,0x38,0x82,0x79,
    0xde,0x48,0x9f,0x9a,0xe7,0xaf,0xa7,0xff,0x9b,0xd2,0x75,0x23,0xf3,0x65,0xf2,0x2d,
    0x45,0x2d,0x41,0x5e,0x95,0xf7,0x2a,0xd7,0x72,0x25,0xf7,0x54,0x8b,0x93,0x6d,0x2d,
    0x9b,0xe3,0x66,0x9e,0x6d,0xd3,0xdd,0x42,0xdd,0x26,0xca,0x6e,0x76,0xb2,0x5b,0xb9,
    0xc7,0x4d,0x76,0x1b,0xf7,0x50,0x0d,0x79,0x9b,0x1d,0x6f,0x3b,0x79,0x13,0x18,0x87,
    0xb7,0xf3,0x1a,0xf7,0x8e,0xc9,0xbe,0xee,0xe2,0xdd,0x4a,0xbe,0xc9,0xbe,0x91,0x46,
    0x37,0x27,0xdb,0xe6,0xe2,0x1b,0x46,0xbe,0xf1,0xde,0xa4,0xbf,0x26,0xda,0xf1,0xbc,
    0xb7,0xa8,0x57,0xd3,0x09,0xef,0x6d,0xc6,0x6a,0xfe,0x5b,0x1d,0x6f,0x47,0xd9,0x1c,
    0x3d,0xef,0x1d,0x37,0xc7,0x72,0xde,0x4e,0xa7,0xd7,0x54,0xc6,0x6b,0x67,0x2c,0x13,
    0x3a,0xe1,0xbd,0xcb,0x7d,0x35,0x9a,0x32,0x9e,0xf7,0x2f,0x97,0xcf,0xad,0x9c,0xbf,
    0xf1,0x76,0xb9,0xf9,0x35,0x1d,0xe0,0xf5,0x2e,0xf6,0xcb,0x6e,0xee,0x89,0x2d,0x5c,
    0xb3,0xed,0xcc,0x79,0x1b,0x73,0xf6,0x16,0x73,0xb0,0x83,0x73,0xda,0xc9,0x18,0xdf,
    0xa5,0xcf,0x5d,0x3c,0x03,0x7b,0xb9,0xfe,0x9b,0xdc,0xfa,0x74,0x4f,0x05,0x22,0xff,
    0x7c,0xff,0x7e,0xa3,0x7b,0x26,0x7a,0x7f,0x28,0xf1,0x7b,0x29,0x9d,0x94,0x0e,0x4d,
    0xa7,0xb5,0x5f,0x8e,0x1a,0xab,0x3c,0xbd,0x1f,0xa8,0xc5,0x25,0xdb,0x77,0xba,0xd1,
    0x47,0x14,0xf4,0xb5,0x67,0x18,0x3d,0xb8,0xa0,0xb3,0x91,0x46,0x9f,0x5c,0xd0,0x6d,
    0xd5,0x07,0xea,0x5d,0x8e,0x78,0x8c,0x9e,0x96,0x97,0xce,0x91,0xd2,0x0b,0xf2,0x8e,
    0xe7,0x75,0x71,0x8e,0x9a,0xa2,0xe7,0xea,0xc1,0x74,0x7f,0x2f,0x6b,0x4a,0xff,0x74,
    0x22,0xd6,0xe7,0xd8,0x93,0x15,0x59,0xc7,0xbf,0x9c,0xd7,0x01,0x29,0xfe,0x17,0x13,
    0xb1,0x3e,0x47,0x2e,0x36,0x90,0xa1,0xd8,0x70,0xd2,0x2f,0x11,0x53,0x7b,0xbd,0xd8,
    0x93,0xf2,0x32,0x7b,0x52,0xd4,0x28,0xd8,0xe8,0x2d,0xc0,0x54,0x76,0x38,0xe9,0x3e,
    0xc4,0x6c,0x0e,0xfd,0x04,0x3d,0x7f,0x48,0x9a,0x81,0xf6,0x0e,0xed,0x75,0x8a,0xd5,
    0xb1,0x3e,0x0f,0x49,0x11,0x6b,0x0e,0x9e,0x8a,0x58,0xf3,0x61,0x0e,0x7b,0x3a,0x62,
    0x4f,0xd4,0x3a,0xec,0x99,0x88,0x3d,0x34,0xc1,0xd5,0xe1,0xe6,0x88,0x7a,0xeb,0x87,
    0xe5,0xec,0x8b,0xc4,0xfb,0x4e,0x61,0xb7,0xa2,0x88,0x9d,0x8f,0x3c,0x45,0xed,0xfd,
    0x24,0x21,0x15,0xac,0x9f,0xba,0x37,0xc6,0x06,0xac,0x87,0xd1,0x7f,0x92,0x12,0xad,
    0xfd,0x72,0x47,0xde,0x91,0x7e,0x8f,0xf4,0x7f,0x93,0xb5,0x13,0x39,0xef,0xff,0xa5,
    0x7b,0xed,0x09,0xc3,0x04,0xf6,0xf5,0x3a,0x82,0xfd,0xb4,0x5a,0xd0,0x33,0xc7,0x25,
    0x2d,0xed,0xbb,0xa7,0x09,0xb0,0x6a,0x29,0xad,0xd5,0x6c,0xf6,0xf6,0xd3,0x05,0xfc,
    0x79,0x9c,0xf7,0x99,0x02,0x4c,0xf3,0x74,0x5a,0xc2,0xb4,0x7f,0x8e,0x12,0xf4,0x58,
    0xf5,0x37,0x82,0xf9,0xfe,0xa1,0x00,0x6f,0x4e,0x32,0x4a,0x9f,0x25,0xc0,0x46,0xd2,
    0x76,0xd1,0x47,0x05,0xf8,0x1a,0xca,0x9c,0x4d,0x99,0x51,0x4e,0x66,0x8c,0x00,0x57,
    0x19,0xa5,0xc7,0x0a,0xf4,0xf4,0x5c,0xcf,0x23,0x36,0x4e,0x70,0x5e,0x95,0x57,0x4b,
    0xac,0x56,0x10,0xab,0xfe,0xcd,0x25,0x76,0x8e,0x00,0x57,0xf9,0x73,0x12,0xa2,0xf3,
    0xb9,0x27,0x02,0x37,0x59,0xf3,0x53,0x47,0x3f,0xb5,0xce,0xcf,0xb9,0xa4,0xeb,0x9c,
    0x9f,0xf3,0xa9,0x9b,0x3b,0x3f,0x17,0x08,0xf0,0x73,0x9d,0x9f,0x25,0x11,0xb8,0xfa,
    0xcb,0x9d,0x9f,0x8b,0x04,0x73,0xd4,0x7d,0xb4,0x8a,0xd8,0x44,0x62,0xea,0xeb,0xc7,
    0xcc,0xfb,0xc5,0x02,0x59,0xe5,0xcd,0x25,0x56,0x2f,0xb0,0xab,0x3c,0x5d,0x0b,0xed,
    0xad,0xf7,0xe5,0xe8,0xbf,0x13,0xb8,0x16,0x6a,0xef,0xcf,0x39,0x70,0x93,0xb9,0x9f,
    0x32,0x35,0x4e,0xe6,0x81,0x1c,0xb8,0xf9,0x5b,0x9a,0x43,0x4f,0xf1,0x65,0x09,0xd3,
    0x73,0xfe,0x97,0x1c,0x3e,0x95,0xd7,0x94,0xf4,0xf4,0xdc,0x3f,0x44,0x5c,0xf7,0xde,
    0x72,0x1e,0xd2,0xcf,0x12,0x4f,0xf1,0x65,0x69,0x28,0xa6,0xfb,0x4f,0xef,0x3f,0x4d,
    0xd7,0x13,0xb9,0x1f,0x15,0x5f,0x45,0x5f,0x8f,0xd2,0xae,0x9e,0xb3,0x35,0xc4,0x1e,
    0x27,0xf6,0x4c,0x2c,0xe5,0xfa,0x89,0x1c,0x78,0xe6,0xd6,0x64,0x65,0x8e,0x79,0x28,
    0xcf,0xe4,0x9e,0xa2,0x9c,0x5f,0x93,0xa7,0x73,0xc8,0x2a,0xcf,0x74,0x9f,0xa5,0xae,
    0x62,0x26,0xb7,0x26,0x07,0xfe,0x44,0x5e,0x5a,0x8f,0x75,0xcc,0x45,0x2d,0xf3,0xa5,
    0xb5,0xea,0x65,0xd6,0x29,0xf3,0xb9,0x31,0xc7,0x3c,0x72,0x17,0x5b,0x4b,0x0e,0x7c,
    0x9d,0x93,0x6b,0xa5,0x9c,0xdf,0x97,0x9b,0x73,0xc8,0xb6,0xba,0x35,0xda,0xc2,0x35,
    0xaa,0x75,0x6b,0xb4,0x35,0x07,0x6e,0x7a,0xdb,0x72,0xe8,0x2a,0x3e,0x39,0xc9,0x68,
    0x4d,0xdd,0xce,0xd8,0x2e,0x4e,0x32,0x5a,0x93,0x5e,0x23,0xb6,0x8d,0x31,0x14,0xf5,
    0x5d,0x80,0xe7,0xc5,0xfe,0x42,0xed,0xba,0x5c,0x80,0xfb,0xd1,0x4c,0x1b,0xb3,0x04,
    0xfc,0x46,0xee,0x5b,0xc5,0xae,0x14,0xe0,0xcd,0xb1,0x64,0xf7,0x6a,0x01,0xae,0x7f,
    0xcf,0x12,0xfb,0xb9,0x00,0xbf,0x34,0x2b,0xc9,0x5d,0x43,0xb9,0xdc,0xc9,0xcd,0x16,
    0xe0,0xfa,0x3c,0xb6,0x9a,0xd8,0x1c,0x81,0xfe,0x6c,0x29,0xe9,0x5e,0x4b,0x5d,0x71,
    0xba,0x73,0x05,0xf8,0x0c,0xa7,0x7b,0x9d,0x40,0x7f,0xae,0xd3,0xfd,0x15,0x75,0x83,
    0xd3,0x9d,0x27,0xc0,0x87,0x3b,0xdd,0xf9,0x02,0xfd,0x79,0x4e,0xb7,0x81,0x39,0xcb,
    0x5c,0xce,0x7e,0x2b,0xc0,0xfd,0xb0,0x9c,0x2d,0x10,0xf0,0x7d,0xce,0x6e,0x16,0xe0,
    0x3e,0x67,0xb7,0x0a,0x70,0x9f,0xb3,0xdb,0x04,0xb8,0xcf,0xd9,0x42,0xca,0xf9,0x9c,
    0x2d,0x12,0xe0,0x3e,0x67,0x77,0x08,0xf4,0x17,0xb9,0xd8,0x17,0x53,0xd7,0xe7,0xec,
    0x2e,0x01,0xee,0x73,0x76,0xb7,0x40,0xff,0x2e,0xa7,0x7b,0x0f,0x75,0x7d,0xce,0x7e,
    0x2f,0xc0,0x7d,0xce,0xfe,0x20,0xd0,0x57,0x9e,0xd6,0x10,0xed,0x2b,0x8d,0x82,0x5c,
    0x2a,0xef,0x07,0xc9,0x82,0xf6,0xad,0x46,0x29,0x9d,0x8f,0x65,0xac,0x7b,0x7a,0x36,
    0xaf,0x27,0xb6,0x5c,0xf0,0x0e,0xb2,0xcc,0xd5,0xb4,0x87,0x05,0x67,0xa1,0xc9,0x9d,
    0x85,0x15,0x02,0x7c,0x69,0x92,0xd1,0x3a,0xf4,0x57,0x01,0xb6,0x84,0x7d,0xf0,0x49,
    0x29,0xd5,0x22,0xe5,0x3d,0x92,0xc6,0xe3,0xac,0x3d,0x8f,0xd0,0xb6,0x3e,0xaf,0x3f,
    0x2a,0xe8,0xa7,0x75,0xae,0x77,0xfd,0x4d,0x80,0x5b,0x0f,0xfa,0xbb,0x00,0x5b,0x9b,
    0xa8,0xe2,0xbd,0x43,0x80,0xdd,0xc7,0xe7,0x04,0xad,0x6b,0x4f,0xd2,0xf6,0xe3,0xce,
    0xf6,0x3f,0x3a,0xb1,0xfd,0x4f,0x01,0xbe,0x2e,0x59,0x52,0xfa,0x09,0x01,0x66,0xb6,
    0xcc,0xe7,0x4a,0x01,0xcf,0xdb,0xd6,0xeb,0x47,0x69,0xef,0x29,0x7f,0x55,0x44,0x1c,
    0x3a,0x97,0x95,0x9c,0x9b,0xf9,0x7d,0xba,0x13,0xbf,0xcf,0x08,0x70,0xf3,0xdb,0x2c,
    0xc0,0x56,0xb0,0x0f,0x98,0xdf,0x55,0x02,0x9e,0xe9,0xad,0x2e,0xd3,0x7b,0x4e,0x80,
    0x3d,0x56,0xa6,0xb7,0x46,0xc0,0xb3,0x9a,0xf9,0xbc,0x60,0x2d,0xf5,0x19,0xdb,0xe2,
    0x5a,0xcb,0xb8,0x9e,0x77,0xf6,0xd7,0x09,0x70,0xeb,0x87,0xeb,0xa9,0xa7,0xef,0x6e,
    0xe6,0xf3,0x45,0x81,0xdc,0x7a,0xf6,0x44,0xf3,0xb9,0x41,0xc0,0xb3,0xbd,0xf3,0xb2,
    0xe0,0x39,0x6b,0x99,0x8b,0x63,0xa3,0x00,0xf7,0x71,0x6c,0x62,0x1c,0x1b,0x5d,0x1c,
    0x2d,0x02,0xdc,0xe2,0x68,0xa5,0x5e,0x73,0x56,0x7a,0x86,0xd9,0x2c,0x90,0x6b,0x75,
    0xcf,0x2c,0x5b,0x04,0x78,0x9d,0x8b,0x6b,0xab,0x00,0xd7,0x3d,0xaf,0xcf,0x6e,0xbb,
    0x0b,0xdf,0x95,0xc5,0xb7,0x8d,0xd7,0x04,0xcf,0x73,0x9a,0xaf,0x0d,0x52,0xda,0xcf,
    0xaf,0x0b,0x78,0x36,0x97,0x36,0x81,0x1d,0x7d,0xce,0x79,0x8e,0xd8,0x9b,0x02,0xb9,
    0x36,0x77,0x86,0xde,0x16,0xec,0x85,0x61,0xae,0x9f,0xec,0x10,0xe0,0xba,0x3e,0x76,
    0x3e,0x76,0x0a,0xd6,0xd6,0xce,0xc7,0x5e,0x77,0x3e,0x94,0xd7,0x9e,0xc6,0x1e,0xee,
    0xb3,0x76,0x67,0x7f,0x97,0xc0,0xef,0x2a,0x87,0xed,0x16,0xe0,0xb6,0xf7,0xf7,0x52,
    0x6f,0x8f,0x74,0xa4,0xf7,0xba,0xfd,0xba,0x3a,0x42,0xaf,0x9d,0xf6,0xf6,0x48,0x29,
    0xde,0x7f,0x0b,0x62,0x56,0x99,0xfb,0x79,0xc6,0x3e,0x12,0x9c,0x69,0x7d,0x2f,0xd2,
    0x98,0x0d,0xff,0x94,0xb8,0xbe,0x1f,0xe9,0x3b,0xd1,0x41,0x59,0x15,0x9e,0xaf,0x59,
    0x1b,0x8f,0xa3,0x3d,0xd5,0x57,0x59,0xd5,0xd3,0x77,0x9e,0x3c,0x40,0x6f,0x20,0xdf,
    0x8f,0x66,0xf2,0x5d,0x28,0x04,0xe8,0x1a,0x5d,0x11,0xa0,0x77,0x43,0x8a,0x4d,0xe9,
    0xca,0x00,0x19,0xc5,0xe7,0x13,0xab,0x0a,0xc0,0xd5,0xe6,0x75,0xc4,0xba,0x06,0xe0,
    0xfa,0xae,0x75,0x19,0xd7,0xb4,0x5b,0x00,0x6e,0xb5,0xb4,0x47,0x40,0x0f,0x09,0xae,
    0x87,0x1c,0x1e,0x80,0xfb,0x61,0x3d,0x64,0x40,0x00,0xdf,0xf7,0x90,0x81,0x01,0xb8,
    0xef,0x21,0x47,0x06,0xe0,0xbe,0x87,0x0c,0x0a,0xc0,0x7d,0x0f,0x39,0x9a,0x72,0xbe,
    0x87,0x1c,0x13,0x80,0xfb,0x1e,0xf2,0xcd,0x00,0xfd,0x63,0x5c,0xec,0xdf,0xa2,0xae,
    0xef,0x21,0x83,0x03,0x70,0xdf,0x43,0xbe,0x1d,0xa0,0x3f,0xd8,0xe9,0x1e,0x4b,0x5d,
    0xdf,0x43,0x86,0x04,0xe0,0xbe,0x87,0x1c,0x17,0xa0,0x3f,0xc4,0xe9,0xf6,0x66,0xce,
    0xc4,0xe5,0x6c,0x68,0x00,0xee,0x87,0xe5,0xec,0x7b,0x01,0x7c,0x9f,0xb3,0x61,0x01,
    0xb8,0xcf,0xd9,0x49,0x01,0xb8,0xcf,0xd9,0xc9,0x01,0xb8,0xcf,0xd9,0x70,0xca,0xf9,
    0x9c,0x9d,0x1a,0x80,0xfb,0x9c,0x8d,0x08,0xd0,0x3f,0xd5,0xc5,0x3e,0x92,0xba,0x3e,
    0x67,0xd5,0x01,0xb8,0xcf,0xd9,0x69,0x01,0xfa,0xd5,0x4e,0xf7,0x0c,0xea,0xfa,0x9c,
    0x9d,0x19,0x80,0xfb,0x9c,0x8d,0x0a,0xd0,0x57,0x9e,0xf5,0xdd,0xbe,0x01,0xb9,0x54,
    0x9e,0xd6,0x20,0x7d,0x3f,0x54,0x4c,0xcf,0xfd,0xd4,0xd0,0xb1,0x2f,0x5e,0x94,0xe8,
    0xfa,0x80,0xf3,0xaa,0xf7,0x56,0x23,0x7f,0x12,0xf0,0x5e,0xe9,0x7b,0xc8,0xc4,0x00,
    0xdc,0xea,0xdc,0xc5,0x01,0x98,0xf5,0xc5,0x4b,0x02,0x30,0xdf,0x17,0xa7,0xd2,0x76,
    0xbd,0xb3,0xfd,0xd3,0x4e,0x6c,0x4f,0x0a,0xc0,0xad,0xe6,0x4f,0x0e,0xc0,0xca,0xfb,
    0xe2,0x94,0x00,0x9e,0xb7,0xad,0x57,0xab,0x33,0x6b,0x23,0xe2,0xd0,0xb9,0x4c,0xe1,
    0xdc,0xcc,0xef,0xb4,0x4e,0xfc,0x4e,0x0f,0xc0,0xcd,0xef,0x8c,0x00,0xac,0xbc,0x2f,
    0x36,0x04,0xf0,0x4c,0xaf,0xb1,0x4c,0xef,0xb2,0x00,0xac,0xbc,0x2f,0xce,0x0c,0xe0,
    0x59,0x0c,0x97,0x33,0x06,0xdf,0x03,0x67,0x05,0xe0,0x66,0xeb,0xca,0x00,0xac,0xbc,
    0xdf,0x5d,0x15,0xc0,0x33,0x5b,0xb3,0x69,0xcb,0xf7,0xb1,0x39,0x01,0xb8,0xf5,0xac,
    0xb9,0x01,0x98,0xef,0x59,0xd7,0x05,0xe0,0xbe,0x67,0x5d,0x1f,0x80,0xeb,0x7e,0xd1,
    0xef,0x0f,0xbe,0x67,0xcd,0x0f,0xf8,0x26,0xa1,0x73,0xb9,0x2a,0x94,0x7a,0xd6,0xaf,
    0x03,0x78,0xd6,0xb3,0x6e,0x08,0xb0,0xe3,0x7b,0xd6,0x8d,0x01,0x72,0xca,0xb3,0xfe,
    0xb1,0x20,0x60,0x9d,0x7c,0xcf,0xba,0x29,0x00,0xf7,0x3d,0xeb,0xe6,0x80,0xbc,0x5b,
    0xcf,0xba,0xd3,0xed,0x5d,0xe5,0xdd,0x92,0xc6,0x22,0xee,0x81,0x5b,0x9c,0xfd,0xdb,
    0x03,0xfc,0x36,0x38,0x6c,0x61,0x00,0x6e,0xfb,0xf2,0x4e,0xea,0x2d,0x0a,0x1d,0xe9,
    0x3b,0xdd,0x5e,0x7a,0x21,0x42,0xef,0x16,0xda,0x53,0x59,0x8b,0xf7,0xee,0x80,0x98,
    0x55,0xc6,0x7a,0xd0,0x1f,0x43,0xa9,0x07,0x29,0xdf,0x7a,0x90,0xf5,0x96,0xa5,0x01,
    0x32,0xd6,0x5b,0x1e,0x0a,0xc0,0x7c,0x6f,0x59,0x1e,0x80,0xfb,0xde,0xf2,0x70,0x00,
    0xee,0x7b,0xcb,0x8a,0x00,0x7c,0x36,0xd7,0xfd,0xc3,0x1c,0xef,0xae,0xf5,0x39,0x62,
    0xaf,0x8a,0xa5,0x6f,0xfb,0xdd,0x58,0xab,0x26,0x93,0xd7,0xad,0x13,0x9e,0xe5,0xfc,
    0x85,0x00,0x5d,0x95,0xd1,0x9c,0xbf,0xe2,0x72,0xae,0xbc,0xf5,0x69,0xbc,0xc2,0x5c,
    0xad,0x77,0x6b,0xdf,0x93,0x3a,0x55,0xb1,0x34,0xdf,0x5e,0x11,0xb8,0xc9,0xf4,0x8d,
    0xf0,0xe7,0x65,0x0e,0x8d,0xc0,0x2d,0x27,0xfd,0x22,0x30,0xd5,0xb5,0x9c,0xf4,0x8f,
    0xc0,0xf5,0xbb,0xa5,0xe5,0xe4,0xf0,0x08,0x5c,0x73,0xd2,0xc8,0x1c,0x0c,0x88,0xc0,
    0x7f,0x49,0xfa,0x1b,0x11,0x98,0xed,0xfb,0x81,0x11,0x98,0x7e,0xef,0x7c,0x90,0xf3,
    0x3d,0x32,0xe2,0x37,0x91,0x81,0xee,0xd9,0x63,0x50,0x04,0x3e,0x9a,0xdf,0x90,0x2d,
    0xc7,0x47,0x45,0xf0,0x9e,0xb3,0xde,0x19,0xa1,0xa7,0xb8,0xee,0x21,0xcb,0xcb,0x2b,
    0xdc,0x43,0x2a,0xf3,0x52,0x44,0xbd,0xd6,0x7d,0xa5,0xf2,0x9a,0xb3,0xe5,0xf4,0xbd,
    0x29,0x60,0xdd,0xa6,0xf1,0xfb,0xc9,0x76,0x97,0x6b,0xe5,0xb5,0xa4,0xb1,0x8d,0x36,
    0x5b,0xb8,0x97,0x8b,0xe7,0xd0,0x80,0xf5,0xfb,0x90,0xdf,0x02,0x8a,0xe7,0xd0,0x00,
    0xbc,0xc1,0xf5,0x8b,0xad,0x01,0xfe,0xb7,0x70,0x8f,0x6f,0xa7,0xad,0x6d,0x65,0xf4,
    0x76,0x17,0xef,0xcb,0x11,0x7a,0x2d,0xec,0x33,0x2a,0x6b,0xb9,0x7a,0xa3,0x2c,0xde,
    0x76,0x17,0xaf,0xf2,0xda,0xd2,0xd8,0x49,0x9b,0x6d,0x2e,0xde,0xb7,0x5d,0xbc,0xd7,
    0x13,0xdb,0x11,0x80,0xfb,0x78,0xdf,0x61,0xbc,0x3b,0x18,0x5f,0x3b,0x6d,0xed,0x2c,
    0xa3,0xdb,0x5d,0xbc,0x1b,0x23,0xf4,0xda,0x18,0xaf,0xca,0x3e,0xc0,0x78,0x77,0x95,
    0xc5,0xfb,0xb1,0x8b,0x57,0x79,0xbb,0xd3,0xf8,0x98,0x36,0xf5,0xde,0xf6,0xc9,0x7b,
    0x8c,0xa3,0xce,0xc5,0xb6,0x37,0x00,0x6f,0x76,0xbd,0xf7,0xfd,0x80,0x7c,0xed,0x75,
    0xba,0xff,0xa1,0xae,0x7e,0x33,0xb7,0x1a,0xfc,0x41,0x00,0x3e,0xda,0xe9,0x7e,0x14,
    0x10,0xfb,0x07,0x9c,0x9b,0xc5,0xf1,0xb1,0x9b,0x5b,0x6b,0x84,0x4c,0x31,0x5f,0xc6,
    0x6b,0xbc,0x57,0x23,0x7c,0x2b,0xef,0x7d,0xf2,0xa6,0xe5,0xe0,0x7d,0x12,0x4a,0xe7,
    0x5b,0xe5,0x1a,0xb2,0x12,0xef,0x33,0xc7,0x6b,0x25,0xcf,0xde,0x79,0x3e,0x0f,0x38,
    0xc3,0xfa,0x7d,0xdf,0xb0,0x7d,0x3c,0xaf,0x8a,0x3d,0x4b,0x4c,0x7f,0x97,0xd8,0xc7,
    0x5a,0xba,0x9a,0x98,0x7e,0xd0,0x56,0xfd,0xfd,0xae,0x26,0xe5,0x11,0xb8,0xcd,0x39,
    0x44,0x60,0x9f,0xb8,0x67,0x95,0x8a,0x08,0x5c,0xe3,0xb2,0xda,0x75,0x8d,0xab,0x4f,
    0x2b,0xca,0x6a,0xd7,0x9c,0x4e,0x78,0x56,0xbb,0x46,0x46,0xe8,0xce,0x61,0xed,0x1a,
    0x15,0x4b,0xeb,0xad,0xbc,0xea,0x34,0x14,0xd3,0x3c,0x57,0xbb,0xba,0x34,0x8f,0x3a,
    0xd7,0xb8,0xba,0x34,0x3f,0x02,0x3f,0xd0,0xdb,0x22,0xfc,0x79,0x99,0x1b,0x23,0x70,
    0xab,0x5d,0x0b,0x22,0xb0,0xf9,0xae,0x76,0xdd,0x14,0x81,0xfb,0xda,0xf5,0xbb,0x08,
    0xdc,0xd7,0xae,0x9b,0x23,0x70,0xab,0x5d,0xb7,0x46,0x60,0xb6,0xaf,0x6e,0x8b,0xc0,
    0x7c,0xed,0x5a,0xc8,0xda,0x75,0x9b,0xab,0x5d,0x8b,0x22,0xf0,0xf2,0xda,0x75,0x47,
    0x04,0xcf,0x6a,0xd7,0xe2,0x08,0xbd,0x3b,0x58,0xbb,0x2c,0x2f,0x7a,0xb5,0x3d,0xf6,
    0x0e,0x6b,0x97,0xee,0xc9,0xc5,0xcc,0x9f,0xe6,0x75,0x5c,0xec,0x58,0xa7,0x6a,0x12,
    0x3d,0x96,0xfa,0x7a,0x6f,0xe7,0xfe,0xec,0xf8,0xe5,0x3a,0x35,0x26,0x02,0xf7,0xe7,
    0xfe,0x47,0x11,0xbe,0xc6,0x30,0x96,0x71,0xb4,0x35,0xb6,0x8c,0x1e,0xe7,0x62,0xdb,
    0x19,0xa1,0x57,0xc3,0x18,0xc7,0x32,0xb6,0x0b,0x63,0xc7,0x9a,0x34,0x5e,0xbf,0xbb,
    0x53,0x7f,0xbc,0x8b,0xed,0xdc,0xf8,0xe5,0x9a,0x74,0x5e,0x04,0xee,0x63,0x3b,0x9f,
    0xb1,0x9d,0xc7,0x58,0x2e,0xa4,0xad,0x0b,0xca,0xe8,0x0b,0x5d,0x6c,0xef,0x46,0xe8,
    0x8d,0x67,0x6c,0x17,0x30,0xb6,0xe9,0xb1,0x63,0xfd,0x99,0x98,0xe8,0xe9,0xd4,0x9f,
    0xe8,0xd6,0xfa,0x12,0xfa,0xf4,0xf5,0xa7,0x3e,0x02,0xf7,0xf5,0x67,0x52,0x44,0x1e,
    0xea,0x9d,0xee,0x14,0xea,0xfa,0xfa,0x33,0x35,0x02,0xf7,0xf5,0x67,0x5a,0x44,0x9c,
    0x53,0x39,0x0f,0x8b,0x63,0xba,0x9b,0xc7,0x1e,0xca,0xe8,0xdc,0x54,0x7e,0xa2,0xe3,
    0xed,0xa6,0x6f,0xe5,0x4d,0x22,0xcf,0x6a,0x4c,0x83,0x3b,0xa3,0xbb,0xcb,0xea,0x4f,
    0xa3,0xe3,0xed,0x29,0xab,0x3f,0x33,0x79,0x0e,0x7d,0xfd,0xf9,0x19,0xcf,0xa5,0xaf,
    0x3f,0x97,0x47,0xe0,0xbe,0xfe,0xcc,0x8a,0xd0,0x57,0x9e,0xed,0xf9,0x2b,0x22,0x70,
    0x9b,0xf3,0x95,0x11,0x98,0xc6,0x67,0xf5,0xe7,0xea,0x08,0x5c,0xe3,0x1a,0x97,0x75,
    0x2d,0xde,0x17,0xa3,0xa0,0x2e,0x5d,0x1d,0x4b,0xbf,0x87,0x09,0x63,0xb6,0xde,0x52,
    0x29,0x78,0xde,0xb2,0x67,0xd3,0x2a,0xf7,0x3d,0x45,0x79,0x5d,0xd2,0xa8,0xe2,0x77,
    0x90,0x2e,0xee,0x5b,0x66,0x57,0x7e,0xcb,0x5c,0xe2,0xbe,0x65,0x76,0x13,0xe0,0xbf,
    0xe1,0x5c,0xba,0x0b,0xb0,0x9a,0xac,0xa4,0x77,0x10,0xf5,0x46,0x3b,0xbd,0xaf,0x09,
    0x70,0xd3,0x3b,0x58,0x80,0xd5,0xb8,0xdf,0x8d,0x0e,0x11,0xd8,0x3b,0xd8,0xfd,0x6e,
    0xd4,0x53,0xf0,0x1b,0xc4,0x21,0x7c,0x6f,0xd0,0xdf,0x4d,0xfb,0xf2,0x37,0xd3,0x49,
    0x89,0xd6,0x7b,0x95,0x89,0xfc,0x9e,0x63,0xf3,0xa8,0x92,0x8e,0xbf,0xe1,0xe8,0xf5,
    0x8b,0x94,0x9d,0x93,0xd2,0xf8,0x3f,0xcc,0x9d,0x3e,0xc0,0xd0,0x25,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
