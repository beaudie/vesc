// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x97,0x55,
    0x15,0x7e,0xef,0xb9,0xbb,0x0b,0x88,0x53,0x2e,0x5a,0x08,0xd6,0xc2,0x42,0xcc,0x68,
    0x2e,0x5f,0x8b,0x10,0xee,0x8a,0x28,0x1b,0xb6,0x6d,0x18,0x6d,0x0d,0xd5,0xb0,0x53,
    0x68,0x80,0x01,0xb2,0xa8,0xd5,0x4c,0x4d,0x99,0x02,0xb3,0x7c,0x64,0x35,0xcd,0xc0,
    0x1f,0xe8,0x46,0x10,0x56,0x22,0xa0,0xc2,0x50,0x19,0x19,0x14,0xad,0x2b,0x8c,0x20,
    0x7d,0xed,0x0a,0xec,0x42,0x46,0x68,0x64,0xeb,0x8c,0x93,0x29,0xa2,0x42,0x6e,0xf7,
    0x79,0xcf,0x73,0xf6,0x77,0xf8,0xcd,0xb6,0x33,0x77,0xdf,0xdf,0x79,0xce,0xf7,0xb9,
    0xe7,0xde,0xfb,0xde,0x37,0xca,0xe8,0x01,0x59,0x0c,0xd9,0x25,0xd9,0xc0,0xec,0xe1,
    0x98,0xe5,0x7f,0xe5,0x99,0x64,0x81,0xcf,0x71,0x7c,0x4e,0xe4,0x73,0x1a,0x9f,0x75,
    0xe9,0x39,0x38,0x2b,0xcb,0xe5,0x3e,0x36,0xeb,0x33,0xb3,0xc6,0x7d,0xf5,0x6b,0x0b,
    0xc6,0x5d,0x37,0x79,0x02,0xf4,0xdf,0x93,0xa9,0x21,0xf0,0xde,0x9b,0x0d,0xc8,0x4a,
    0xd3,0xb3,0x24,0x8d,0xe6,0xdb,0x17,0x2f,0x03,0x5e,0x9d,0x46,0x4d,0x1a,0x97,0x25,
    0xfd,0x92,0xdc,0x5e,0x96,0xdd,0x44,0xf9,0xdc,0x5e,0x42,0xab,0x73,0xfb,0x59,0x36,
    0x9c,0x74,0x0d,0xe9,0xab,0xd2,0xa8,0x4f,0x16,0x37,0x68,0xa8,0xd9,0x68,0x3e,0x0d,
    0x0b,0xc4,0x4a,0x1c,0x26,0xc4,0x06,0x3a,0x2c,0x12,0xbb,0xd4,0x61,0x25,0xc4,0x2e,
    0x73,0x58,0x29,0xb1,0x2b,0x1c,0x56,0x46,0xec,0xca,0x3c,0xb6,0xd8,0xe7,0x03,0x71,
    0x3e,0x97,0x02,0x18,0xc5,0x98,0x8c,0xae,0x74,0x74,0x90,0x8b,0xf9,0xa0,0x2b,0xfb,
    0xf2,0x8e,0x39,0x3d,0x8c,0xbc,0x32,0xd1,0x9c,0x41,0x5f,0x9e,0x3c,0xc0,0x47,0x65,
    0x92,0x89,0xf4,0xf7,0x3e,0xc8,0xa4,0xe7,0x48,0xea,0x0f,0x4d,0xf4,0x00,0xc6,0x67,
    0xfc,0xc1,0xe4,0x67,0xf9,0xb3,0x24,0xcf,0x77,0x00,0x6b,0x09,0xf9,0x72,0xfe,0x16,
    0xf2,0x87,0x90,0x5f,0x4e,0x7a,0x28,0xe9,0x32,0xca,0x4f,0xa0,0x7c,0x24,0x7f,0x22,
    0x7d,0x03,0xaf,0x25,0x5d,0x4d,0xec,0x5a,0xc6,0x37,0x85,0xb5,0x37,0x7e,0x8d,0xe3,
    0x0f,0xce,0xf1,0x42,0x7c,0x37,0x90,0x37,0xd8,0xf1,0xa7,0x73,0x6e,0x8c,0x9e,0x99,
    0xf7,0x55,0xc1,0x7e,0xbd,0xe3,0x83,0x6e,0x28,0xf2,0xdf,0xc8,0xfc,0x4c,0x7f,0x4e,
    0x11,0xbf,0x89,0xf9,0x20,0xbf,0x85,0xf4,0xed,0xfd,0x2d,0x61,0xfc,0x46,0xdf,0xc9,
    0x1e,0x31,0x7a,0x29,0x7b,0xa1,0x2a,0x55,0x0a,0xfa,0xcd,0xcc,0x69,0x09,0x65,0x97,
    0x3a,0xd9,0xbb,0xd2,0xe8,0x75,0xf4,0x37,0x8b,0x62,0xbb,0x9f,0xb1,0x58,0x6c,0xeb,
    0xd2,0x18,0x9b,0x46,0x45,0x36,0xa8,0xaf,0xf7,0xfe,0xdf,0x40,0xfd,0x1e,0x4c,0xcf,
    0x41,0x69,0x6c,0x60,0xbd,0x41,0x3f,0x44,0xcc,0x6c,0xb6,0x3a,0xf9,0x1f,0x92,0x57,
    0xe6,0xf8,0x9b,0x38,0x1f,0x57,0xa4,0xc8,0x36,0x3b,0x7c,0x2b,0xf3,0x34,0x7a,0x37,
    0xd7,0x85,0xd1,0x7b,0x5c,0x5d,0x40,0xef,0xe3,0xfa,0x31,0xba,0x2d,0x8d,0x11,0xac,
    0x73,0x07,0x7d,0xa2,0xce,0x1f,0x48,0xff,0x3b,0xd3,0xb3,0x83,0xf5,0x32,0xf9,0xe7,
    0xf3,0xbd,0x44,0xeb,0x0a,0xde,0x51,0xce,0xe5,0x3e,0xf6,0xd4,0xf3,0x4e,0xf6,0x58,
    0x51,0x8e,0xc7,0xb9,0xb6,0x4d,0xb7,0x8b,0xba,0xad,0x94,0x3d,0xee,0x64,0xbb,0xd9,
    0xe3,0x26,0x7b,0x82,0x3d,0x54,0x4f,0xde,0x71,0xc7,0x3b,0x49,0x5e,0x13,0xe3,0xf0,
    0x76,0xfe,0xca,0xde,0x31,0xd9,0x17,0x5c,0xbc,0xdd,0xe4,0x9b,0xec,0xdf,0xd2,0xb8,
    0xc4,0xc9,0x9e,0x72,0xf1,0x4d,0x21,0xdf,0x78,0x7f,0xa7,0xbf,0x56,0xda,0xf1,0xbc,
    0xd3,0xd4,0xab,0xef,0x87,0xf7,0x22,0x63,0x35,0xff,0xc7,0x1c,0xef,0xa5,0xa2,0x1c,
    0x3d,0xef,0x1f,0x2e,0xc7,0x62,0xde,0x19,0xa7,0xd7,0x5a,0xc4,0xfb,0x27,0x63,0x69,
    0xea,0x87,0xf7,0x32,0xfb,0xaa,0x81,0x32,0x9e,0xf7,0x2f,0x57,0xcf,0x6e,0xe6,0x6f,
    0xbc,0x1e,0x97,0x5f,0x6b,0x1f,0xef,0xf2,0xbc,0x5f,0x5e,0x61,0x4f,0x74,0x71,0xce,
    0x4e,0xb2,0xe6,0xa7,0x58,0xb3,0xd3,0xac,0xc1,0x4b,0xcc,0xe9,0x0c,0x63,0x7c,0x99,
    0x3e,0x7b,0xb8,0x06,0x5e,0xe5,0xfc,0x77,0xba,0xf9,0x19,0x9c,0x36,0x88,0x70,0xa1,
    0xb7,0xd7,0xe8,0xf2,0x44,0xf7,0xc6,0x02,0x7f,0x08,0xe8,0xa4,0xf4,0xfe,0xb4,0x5a,
    0xaf,0x0c,0xba,0xc7,0x82,0x87,0xdf,0x15,0xd8,0x5c,0xb2,0x77,0x67,0x18,0x3d,0x22,
    0xa7,0xef,0xaf,0x33,0xfa,0xea,0x9c,0xce,0xa6,0x1b,0x7d,0x7d,0x4e,0x9f,0xba,0xa9,
    0x6f,0xbf,0x0b,0x1a,0x8f,0xd1,0x8b,0x42,0x61,0x1d,0x81,0xfe,0x6e,0xb8,0x78,0xbd,
    0x6e,0x08,0xba,0xa7,0x60,0x5d,0x3d,0x96,0x7e,0x6f,0xe6,0x9e,0x32,0x2c,0xad,0x88,
    0x67,0x83,0xf6,0x64,0x69,0x76,0xf1,0x5f,0xe0,0xf3,0xaa,0x14,0xff,0xa1,0x44,0x3c,
    0x1b,0xb4,0x16,0x87,0xc9,0x00,0x56,0x4b,0xfa,0x39,0x62,0xb0,0xd7,0x4b,0x7b,0xa1,
    0xc8,0x9e,0x9d,0xb1,0xb0,0x91,0x13,0xd8,0xe7,0x68,0x03,0x74,0x20,0x66,0x39,0x94,
    0x8a,0x9e,0xf9,0x55,0x29,0x03,0x9c,0x1d,0x38,0xeb,0x80,0xcd,0xe1,0xfe,0x5c,0x95,
    0x22,0x46,0x0d,0x5a,0xa2,0xce,0xf9,0x14,0x87,0xad,0x8a,0xda,0x13,0x8d,0x0e,0x5b,
    0x1d,0xb5,0x87,0x9a,0xdc,0x3e,0xbc,0x26,0xea,0x7e,0xeb,0x47,0x48,0xf9,0x82,0xd7,
    0xea,0xe6,0x72,0x4b,0xfa,0x3d,0x3e,0xf7,0x51,0x9a,0x87,0x5e,0xc2,0x9c,0xb0,0x0f,
    0xbf,0x95,0x90,0x52,0xee,0xa5,0xe8,0x93,0xf5,0xa2,0x73,0x53,0xcb,0xb3,0xf2,0x45,
    0xce,0xd5,0xb9,0x24,0x3d,0x8a,0x39,0x9e,0x4f,0xbf,0xb1,0xff,0x8f,0x16,0xd5,0xc7,
    0x73,0x1a,0xcf,0xce,0xb1,0xa2,0xe7,0xe3,0xec,0xa4,0x85,0x33,0x76,0x9c,0x28,0x36,
    0x56,0x0a,0xf3,0x72,0x2f,0xcf,0xf1,0xf1,0xa2,0xfc,0x16,0xe6,0x38,0x51,0x14,0x43,
    0x4d,0x6e,0x4e,0x18,0xce,0xca,0x6a,0xd1,0xf3,0x14,0xfe,0xa6,0xb1,0xb6,0x93,0x44,
    0xf1,0xb6,0x24,0x03,0xfa,0x3a,0x51,0x6c,0x3a,0x6d,0x23,0xe7,0xc9,0xa2,0xf8,0x41,
    0xca,0x4c,0xa5,0xcc,0x4c,0x27,0x73,0xbd,0x28,0x0e,0x19,0xd0,0xb5,0xa2,0x7a,0x58,
    0xc3,0x2d,0xc4,0x6e,0x10,0x5d,0x9b,0xe0,0x35,0x12,0xbb,0x51,0x34,0x56,0xfc,0x2d,
    0x27,0x36,0x5d,0x14,0x87,0xfc,0xa7,0x13,0x82,0x7c,0x9a,0xa3,0xe2,0x26,0x6b,0x7e,
    0x66,0xd0,0x4f,0xa3,0xf3,0x53,0x47,0x7a,0x86,0xf3,0x33,0x93,0xba,0xc1,0xf9,0xb9,
    0x45,0x14,0xaf,0x73,0x7e,0xee,0x8e,0x8a,0xc3,0x5f,0x70,0x7e,0x3e,0x2e,0x9a,0x23,
    0x7a,0xe6,0x69,0x62,0x9f,0x20,0x06,0x5f,0x9f,0x62,0xdd,0x67,0x89,0xca,0x82,0xb7,
    0x9c,0xd8,0x27,0x45,0xed,0x82,0x87,0xb9,0xc0,0x39,0xba,0x35,0xe8,0x59,0xdb,0xc4,
    0xb9,0x80,0xbd,0x47,0x83,0xe2,0x26,0xb3,0x8d,0x32,0xf5,0x4e,0x66,0x7b,0x50,0xdc,
    0xfc,0xed,0x08,0xaa,0x07,0x7c,0x67,0xc2,0xb0,0xa6,0x1f,0x0f,0xea,0x13,0xbc,0xd6,
    0xa4,0x87,0x35,0xfe,0x04,0x71,0xf4,0xde,0x2e,0x2e,0xc8,0x77,0x12,0x0f,0xf8,0xce,
    0x34,0x80,0xa1,0xff,0xf0,0xfb,0xed,0xf4,0x1c,0xc5,0x7e,0x04,0xfe,0x34,0x7d,0xfd,
    0x92,0x76,0xb1,0xa6,0x0e,0x12,0xfb,0x35,0xb1,0xd5,0xb1,0x50,0xeb,0xbd,0x41,0xf1,
    0xcc,0xcd,0xc9,0xbe,0xa0,0x79,0x80,0x67,0x72,0xbf,0xa3,0x9c,0x9f,0x93,0xfd,0x41,
    0x65,0xc1,0x33,0xdd,0x76,0xea,0x02,0x33,0xb9,0x83,0x41,0x71,0xd8,0x43,0x6d,0xb0,
    0x07,0x1d,0xe1,0xfe,0x63,0xf6,0xff,0x18,0x34,0x66,0x6f,0xff,0x2f,0xac,0x97,0x9f,
    0xc7,0x8e,0xa0,0xb8,0xef,0xa1,0xce,0xa0,0xfa,0x1d,0xce,0xde,0x51,0xda,0xf3,0xbd,
    0x7a,0x2c,0xa8,0xec,0x51,0x37,0x6f,0xc7,0x39,0x6f,0x8d,0x6e,0xde,0xba,0x82,0xe2,
    0xa6,0xd7,0x1d,0x54,0x17,0xf8,0x82,0x24,0x83,0x3d,0xf5,0x04,0x73,0x98,0x97,0x64,
    0xb0,0xef,0x9c,0x24,0xd6,0xcd,0x18,0xf2,0xf7,0x51,0x51,0x3c,0xe4,0x3d,0xa7,0x7b,
    0xd7,0x3c,0x51,0xdc,0x8f,0x36,0xda,0xb8,0x4d,0x94,0xdf,0xcc,0x5e,0x06,0x36,0x5f,
    0x14,0x5f,0x13,0x0b,0x76,0x17,0x8a,0xe2,0xf8,0x6b,0x27,0x76,0x87,0x28,0xbe,0x34,
    0x2b,0xc8,0x2d,0xa2,0x5c,0x70,0x72,0x8b,0x45,0x71,0xbc,0x8f,0x3d,0x43,0x6c,0x89,
    0xa8,0xfe,0x62,0x29,0xe8,0x2e,0xa5,0xae,0x38,0xdd,0x66,0x51,0x7c,0x89,0xd3,0x5d,
    0x26,0xaa,0xdf,0xec,0x74,0xef,0xa6,0x6e,0x74,0xba,0xf7,0x88,0xe2,0xb5,0x4e,0xf7,
    0x2b,0xa2,0xfa,0xf7,0x38,0xdd,0xcf,0xb3,0x66,0x99,0xab,0xd9,0xd7,0x45,0x71,0x3f,
    0xac,0x66,0xdf,0x10,0xe5,0xfb,0x9a,0x7d,0x4b,0x14,0xf7,0x35,0xfb,0xb6,0x28,0xee,
    0x6b,0x76,0x9f,0x28,0xee,0x6b,0xb6,0x9c,0x72,0xbe,0x66,0x2b,0x44,0x71,0x5f,0xb3,
    0x95,0xa2,0xfa,0x2b,0x5c,0xec,0x2d,0xd4,0xf5,0x35,0x5b,0x25,0x8a,0xfb,0x9a,0xad,
    0x16,0xd5,0x5f,0xe5,0x74,0xd7,0x52,0xd7,0xd7,0xec,0x3b,0xa2,0xb8,0xaf,0xd9,0x03,
    0xa2,0xfa,0xe0,0x61,0x5f,0xc1,0x59,0x33,0x57,0xb4,0x96,0xe0,0xdd,0x98,0x2c,0xe0,
    0xec,0x9a,0x2b,0x85,0xf5,0xb1,0x91,0x7b,0x21,0xd6,0xeb,0x4a,0x62,0x3f,0x12,0xbd,
    0x83,0x6c,0x74,0xfb,0xdc,0x26,0xd1,0xb5,0xd0,0xea,0xd6,0xc2,0x66,0x51,0x7c,0x47,
    0x92,0xc1,0xde,0xf4,0x63,0x21,0xc6,0xb3,0x71,0x87,0x14,0xf6,0x27,0xf0,0xb6,0xa4,
    0xf1,0x08,0xf7,0xa3,0x2d,0xb4,0x8d,0xf7,0xf5,0x87,0x45,0xcf,0xd4,0x39,0xee,0x3c,
    0xfb,0x89,0x28,0x6e,0xe7,0xd2,0x4f,0x45,0xb1,0x43,0x89,0x02,0xfd,0x33,0x51,0x6c,
    0x2b,0xdf,0x13,0xb0,0xd7,0xed,0xa0,0xed,0x47,0x9c,0xed,0xad,0xfd,0xd8,0x7e,0x54,
    0x14,0x3f,0x9c,0x2c,0x81,0xde,0x26,0xc4,0x68,0xcb,0x7c,0x6e,0x17,0xe5,0x79,0xdb,
    0x78,0x9e,0x4d,0xbd,0x07,0xfe,0xda,0xa8,0x71,0x20,0x97,0xed,0xcc,0xcd,0xfc,0x3e,
    0xde,0x8f,0xdf,0x27,0x44,0x71,0xf3,0xbb,0x53,0x14,0xdb,0xcd,0xb3,0xc1,0xfc,0xee,
    0x12,0xe5,0x99,0xde,0xee,0x22,0xbd,0x9f,0x8b,0x62,0x7b,0x8a,0xf4,0x7e,0x21,0xca,
    0xb3,0xfd,0xf0,0x49,0xd1,0xb9,0xc4,0x3b,0xb6,0xc5,0xf5,0x2b,0xc6,0xf5,0xa4,0xb3,
    0xbf,0x47,0x14,0xb7,0x33,0xf2,0x29,0xea,0xe1,0xee,0x66,0x3e,0x7f,0x23,0x2a,0xf7,
    0x14,0xcf,0x49,0xf3,0xb9,0x57,0x94,0x67,0xbd,0xf3,0x5b,0xd1,0x77,0xab,0x8d,0x2e,
    0x8e,0xfd,0xa2,0xb8,0x8f,0xe3,0xf7,0x8c,0x63,0xbf,0x8b,0xa3,0x4d,0x14,0xb7,0x38,
    0xda,0xa9,0xd7,0x96,0x15,0xde,0x6b,0x9e,0x11,0x95,0x6b,0x77,0xef,0x31,0x07,0x44,
    0xf1,0x39,0x2e,0xae,0x83,0xa2,0x38,0x7a,0x1e,0xef,0x6f,0xaf,0xe4,0xbe,0xcb,0xf2,
    0x6f,0x1b,0x87,0x44,0xdf,0xe9,0x50,0xaf,0xbd,0x52,0xe8,0xe7,0xc3,0xa2,0x3c,0xcb,
    0xe5,0x88,0xa8,0x1d,0xbc,0xfb,0x1c,0x20,0xf6,0x07,0x51,0xb9,0x23,0x6e,0x0d,0xfd,
    0x49,0xb4,0x17,0xa6,0xb8,0xf3,0xe4,0xcf,0xa2,0x38,0xe6,0xc7,0xd6,0x47,0x87,0xe8,
    0xdc,0xda,0xfa,0x38,0xe1,0xd6,0x07,0x78,0x9d,0x69,0x74,0xb1,0xcf,0x3a,0x9d,0xfd,
    0x63,0xa2,0x7e,0x77,0x39,0xec,0xb8,0x28,0x6e,0xbd,0x7f,0x82,0x7a,0x5d,0x72,0x31,
    0x7d,0xc2,0xf5,0xeb,0x03,0x51,0xf5,0x3a,0x69,0xaf,0x4b,0x0a,0xf1,0xbe,0x20,0x1a,
    0x33,0x64,0xb6,0x71,0x8d,0x9d,0x16,0x5d,0xd3,0xb8,0x17,0x21,0x66,0xc3,0xcf,0x10,
    0xc7,0xfd,0x08,0x77,0xa2,0x4b,0xb3,0x81,0x39,0xde,0xc3,0xbd,0x71,0x2c,0xed,0x41,
    0x1f,0xb2,0xd0,0xc3,0x9d,0xe7,0x55,0xea,0x55,0xf0,0x7e,0x74,0x17,0xef,0x42,0xff,
    0x16,0xd5,0x35,0xfa,0x3f,0xd4,0x5b,0x9b,0x62,0x03,0xfd,0xba,0xa8,0x0c,0xf0,0x55,
    0xc4,0xce,0x8a,0xe2,0xb0,0xb9,0x82,0xd8,0x9b,0xa2,0x38,0xee,0x5a,0xcb,0x38,0xa7,
    0xe7,0x44,0xf1,0x7b,0xd9,0x63,0x3d,0x41,0xdf,0x39,0x6e,0x0f,0x5a,0x93,0x5b,0x63,
    0xe1,0xfb,0xcb,0x39,0xee,0xe3,0x0b,0xc8,0x9b,0xdd,0x0f,0xcf,0xe6,0xb2,0x3c,0xaa,
    0x2e,0x64,0x30,0x97,0x43,0x63,0x61,0x2e,0xc1,0x1b,0x92,0x06,0x30,0xcc,0x01,0x7e,
    0x5b,0x4f,0x7d,0x96,0x3a,0xb7,0xc6,0x42,0xbe,0x9f,0x8b,0x8a,0x9b,0xcc,0xdc,0xa8,
    0xfe,0xbc,0x4c,0x53,0x54,0xdc,0x6a,0xf2,0x85,0xa8,0x18,0x74,0xad,0x26,0x5f,0x8c,
    0x8a,0xe3,0x6e,0x69,0x35,0x99,0x17,0x15,0x47,0x4d,0x9a,0x59,0x83,0xdb,0xa2,0xe2,
    0xf7,0x91,0xfe,0x52,0x54,0xcc,0xd6,0xd3,0xfc,0xa8,0x18,0xee,0xa4,0x8f,0x31,0xdf,
    0x85,0x51,0xbf,0x5b,0xcd,0x77,0xfd,0x71,0x47,0x54,0xbc,0x81,0xf7,0x7c,0xab,0xf1,
    0x97,0xa3,0xf2,0x0e,0xd8,0x7b,0x45,0x54,0x3d,0xe0,0xe8,0x4d,0xab,0x0b,0x9e,0xe8,
    0x4d,0xc8,0x7c,0x2f,0xea,0x59,0x86,0x7e,0x5d,0xcc,0xfa,0xed,0xa2,0xef,0x61,0x51,
    0xe7,0x6d,0x11,0xdf,0x7b,0x2b,0x5d,0xad,0xc1,0x1b,0x9e,0xc6,0x48,0xda,0xc4,0xef,
    0x16,0xfa,0xfd,0x20,0xe7,0xaf,0x87,0xef,0x6b,0xc0,0x2a,0xa2,0xe2,0x77,0xba,0xb3,
    0x74,0x44,0x54,0xff,0x15,0x8c,0xaf,0x92,0xb6,0x46,0x16,0xd1,0x95,0x2e,0xde,0xef,
    0x47,0xd5,0x1b,0xce,0xb8,0x21,0x6b,0xb5,0xfa,0x50,0x51,0xbc,0x55,0x2e,0x5e,0xf0,
    0xc6,0xe0,0x1e,0x4a,0x9b,0x63,0x5c,0xbc,0x57,0xbb,0x78,0x57,0x12,0xbb,0x26,0x2a,
    0xee,0xe3,0xfd,0x30,0xe3,0xbd,0x86,0xf1,0x55,0xd1,0xd6,0xb5,0x45,0x74,0x95,0x8b,
    0xf7,0x07,0x51,0xf5,0xc6,0x30,0x5e,0xc8,0x6e,0x67,0xbc,0xe3,0x8b,0xe2,0xad,0x75,
    0xf1,0x82,0x37,0x01,0x3a,0xb4,0x39,0xc1,0xf5,0x49,0x35,0xe3,0x98,0xe3,0x62,0x9b,
    0x14,0x15,0x6f,0x73,0xef,0x25,0x93,0xa3,0xd6,0x6b,0x92,0xd3,0xfd,0x08,0x75,0xf1,
    0x5d,0xc3,0xf6,0xf6,0xa9,0x51,0xf1,0x06,0xa7,0x5b,0x13,0x35,0xf6,0xa9,0xcc,0xcd,
    0xe2,0xa8,0x75,0xb9,0xad,0xa7,0x0c,0xf2,0xad,0x61,0xbc,0xc6,0x5b,0x47,0xdf,0xe0,
    0x4d,0x26,0x6f,0x51,0x50,0xde,0x34,0xb7,0xbe,0xd7,0xb1,0xc6,0xc6,0x9b,0xee,0x78,
    0xeb,0xc9,0xb3,0x73,0xe9,0x66,0xae,0x61,0x7c,0x83,0x31,0xac,0x8e,0x6b,0x1a,0x58,
    0x3b,0xb1,0x8f,0x46,0xc5,0xa7,0x30,0x9f,0xfc,0xfe,0x1a,0x55,0x1f,0x3c,0x5b,0x2f,
    0xb7,0x44,0xc5,0x2d,0xe7,0xfa,0xa8,0x18,0xe2,0xb3,0xf7,0xb8,0x86,0xa8,0x38,0xe2,
    0x9a,0x9d,0x0d,0xca,0xdf,0x65,0x5f,0x0b,0xfa,0x4d,0x03,0xbc,0x12,0x7e,0xef,0x11,
    0xc6,0x6c,0x73,0xfb,0x3a,0xf7,0x3b,0x3b,0x73,0xce,0xba,0x3b,0x23,0x78,0x6f,0x60,
    0x2f,0xe5,0x9d,0xf1,0x0d,0x77,0xf7,0x79,0x93,0x77,0x9f,0x4d,0xee,0x7d,0xef,0x5c,
    0x50,0x7c,0x0d,0x73,0x79,0x2b,0x28,0x56,0x9f,0x15,0xf4,0xde,0xa6,0x5e,0x83,0xd3,
    0x7b,0x27,0x28,0x6e,0x7a,0xe7,0x83,0x62,0xf5,0xee,0xbe,0x7d,0x21,0xa8,0xbd,0xf3,
    0xa1,0x70,0xdf,0x7e,0x97,0xf7,0xb4,0x0b,0xbc,0x1b,0xe2,0xdb,0x92,0xf0,0xbb,0xd2,
    0xfc,0x44,0xe3,0x37,0x64,0x5e,0xe3,0x5d,0xd7,0xf2,0x38,0x5b,0x74,0xf7,0xc5,0xf3,
    0xbf,0xe9,0x64,0x9a,0x9a,0xc6,0xff,0x00,0xa6,0xe9,0x5c,0xc8,0xfc,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
