// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000024.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000024[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xf7,0x3a,0xa7,0x37,0x28,0xad,0x45,0xea,0x05,0x04,0x39,0xa5,0xb4,0xa2,
    0x94,0x82,0x80,0x05,0x84,0xc3,0x45,0x2e,0x2d,0x5a,0xb9,0x94,0x9b,0x45,0xac,0xa2,
    0x55,0x44,0x94,0x0a,0x45,0x40,0xa5,0xa6,0x5c,0x8b,0x4a,0xa3,0xd0,0x18,0x41,0x13,
    0x7d,0x00,0x05,0xa2,0x92,0xf8,0x64,0x82,0x08,0x0f,0x82,0x48,0x63,0x08,0x1a,0xa5,
    0x26,0x4a,0x13,0xa5,0x0a,0xff,0x00,0x5a,0x04,0xc5,0x35,0x7b,0xff,0xa6,0x9d,0x9c,
    0x78,0x39,0xc9,0xca,0x3e,0xeb,0x5b,0x33,0xdf,0xcc,0x7c,0x6b,0xd6,0xda,0xa7,0x8d,
    0xc7,0x0a,0x33,0x83,0xc0,0x05,0x3d,0x83,0xac,0x60,0xb1,0x0b,0xc2,0x4f,0xef,0x20,
    0x16,0x38,0x9e,0x23,0xfd,0x33,0x3b,0xc8,0x08,0xe7,0xe5,0x95,0xf3,0x2a,0x4b,0xeb,
    0xd7,0xd4,0x96,0x8e,0xbe,0x6b,0x84,0xd8,0xe5,0x06,0xf1,0xd0,0x5e,0xd6,0xae,0x0b,
    0x32,0x83,0x34,0xff,0x94,0xf1,0xcc,0xd2,0xe5,0x2b,0x05,0x2f,0xf6,0xe3,0xa2,0x1f,
    0x79,0xde,0x4e,0xf0,0x4c,0xe1,0xf0,0xdf,0x8a,0x43,0x4e,0xf1,0x09,0x82,0x8a,0x20,
    0x3d,0x28,0x89,0xc2,0x06,0x85,0x3c,0x15,0x73,0x60,0x59,0x06,0x8b,0x81,0xe5,0x19,
    0x2c,0x0e,0x96,0x6f,0xb0,0x34,0xb0,0x9b,0x0d,0x96,0x0e,0xd6,0xdf,0x60,0x19,0x60,
    0x09,0x83,0x65,0x82,0x0d,0x36,0x58,0x16,0xd8,0x10,0x83,0xf5,0x00,0x2b,0x31,0x58,
    0x4f,0xb0,0x11,0x06,0xcb,0x06,0x1b,0x6d,0xb0,0x5e,0x60,0x63,0x0d,0x96,0x03,0x36,
    0x21,0xd4,0x29,0xde,0x55,0xaf,0x68,0xb6,0xc4,0x3f,0x07,0xa1,0x8f,0xce,0x0b,0xcc,
    0x5c,0x74,0xbe,0x95,0x79,0x1f,0xef,0x15,0x0b,0xd7,0xe3,0xa1,0x36,0xf2,0xfd,0x46,
    0xff,0x2d,0x83,0x3a,0x87,0x7a,0xfb,0x0c,0xe2,0xfd,0x7a,0xa8,0x28,0x99,0xef,0x2d,
    0x72,0x0d,0x2e,0x9a,0x1d,0x2a,0x5f,0x9a,0xd4,0xb9,0xe8,0xf5,0xd6,0x9e,0xbe,0x93,
    0x6f,0xf0,0xf3,0x04,0x1c,0xb2,0x37,0x37,0xf9,0x79,0x01,0xf3,0x18,0xf3,0xc1,0x68,
    0x9a,0x16,0xe2,0x69,0x41,0x11,0xb6,0x82,0x8f,0x67,0x5e,0x6c,0xfc,0x6f,0xc3,0x5e,
    0xfc,0x85,0x7f,0x28,0x7c,0x41,0x58,0x4f,0x5e,0xa8,0x41,0x01,0x23,0xd1,0x95,0xff,
    0x7f,0x8f,0x44,0xd7,0x33,0x2d,0x18,0xc6,0x3e,0x95,0x10,0x5f,0xe6,0xa5,0x60,0x43,
    0xa9,0x67,0x38,0xf9,0x88,0xfd,0x08,0xd6,0x0a,0xcc,0x7a,0x99,0xa9,0x67,0x4c,0x97,
    0x6f,0xb4,0x2e,0xcf,0xbb,0xc9,0x57,0xed,0xa7,0xd2,0x6b,0x3a,0x9f,0x85,0xd6,0x52,
    0xef,0x42,0xf2,0x13,0xbe,0xbe,0x9e,0xa9,0xda,0xe8,0x67,0x3f,0x1c,0xc5,0xe0,0x16,
    0xbf,0x6f,0x8b,0xfd,0xb3,0x9a,0xf8,0x0f,0x82,0x2f,0xa6,0x1e,0x99,0x2f,0x49,0x89,
    0x5f,0x93,0x32,0xaf,0xe5,0x8c,0x88,0xff,0xe3,0xe4,0x9f,0x20,0x9f,0xe5,0xe8,0x1f,
    0x67,0x5e,0xc7,0x5a,0xdc,0xf8,0xd7,0x93,0x9f,0xce,0xd7,0xe3,0xa3,0xf3,0xed,0x9c,
    0x19,0x9d,0xef,0xa3,0xe7,0x75,0x7e,0x98,0xf3,0xa3,0xf3,0x13,0x29,0xfa,0x9f,0xe1,
    0x3c,0x68,0xbf,0x7d,0x6f,0xf2,0x97,0xf9,0x2f,0xe1,0xac,0x71,0x92,0xe4,0x7f,0x81,
    0xdc,0xb4,0x9f,0x2e,0x70,0xc7,0xc4,0x8d,0xfd,0x34,0x2f,0xde,0xc6,0xc6,0xc6,0xf1,
    0x25,0x3e,0x2b,0xb1,0x9b,0xee,0x22,0xcc,0x0e,0xb5,0x9d,0xe1,0xbf,0xd7,0xed,0x5f,
    0x3d,0x49,0xe7,0xe5,0x7e,0xbe,0x73,0xf3,0x3b,0xc9,0x32,0xbf,0x83,0x31,0xf6,0x29,
    0x80,0xbf,0xd3,0x23,0xb2,0xaf,0x49,0xfa,0x7c,0x08,0xbd,0x3c,0xdb,0xc7,0x91,0x3e,
    0xbe,0x1d,0x6c,0x88,0xd9,0xc3,0x95,0x9c,0x91,0x3b,0x58,0x9f,0xe2,0x19,0xa4,0xc7,
    0xee,0xa4,0x0f,0x87,0xc3,0x27,0x36,0x23,0xc1,0x37,0x79,0x1b,0x99,0x8f,0xc2,0x6f,
    0x24,0x7e,0x63,0xb8,0x2f,0x4a,0xe9,0xc9,0x24,0xfd,0x37,0x0e,0xfc,0x03,0x6f,0x93,
    0x1b,0xea,0x12,0x61,0xd2,0x97,0xbf,0xfb,0xcc,0x93,0xe4,0xf3,0x87,0xb7,0x1f,0xcf,
    0xfd,0x92,0xa4,0x1e,0xf9,0x3e,0xd7,0xfb,0xc9,0x3e,0x4c,0x26,0xa6,0x7c,0x5e,0x62,
    0x6f,0xa6,0x80,0x57,0x79,0x75,0xc2,0x3a,0x5c,0x84,0xa9,0xdd,0x65,0xcf,0xa1,0x5c,
    0xf2,0xbc,0xe4,0xb5,0x10,0xbb,0x0a,0x17,0xd9,0xa4,0xe3,0x33,0xc1,0xd4,0x30,0x8d,
    0x1a,0xa6,0x9a,0x1a,0xa6,0x83,0x6b,0x0d,0x33,0xc0,0xb4,0x86,0x0a,0x53,0xc3,0x8c,
    0xf0,0xce,0x0b,0x42,0x4c,0xe2,0x96,0x9b,0x1a,0xee,0x23,0xb6,0x33,0x35,0x54,0x82,
    0x6b,0x0d,0xc3,0x5c,0x84,0xa9,0x9d,0xd4,0xa0,0x5c,0x15,0xa6,0x86,0x99,0x2e,0xb2,
    0x49,0xe2,0x53,0x6e,0x6a,0x98,0x4d,0x0d,0xb3,0x4c,0x0d,0x73,0xc0,0xb5,0x86,0xb9,
    0x60,0x5a,0xc3,0x3c,0x53,0xc3,0xdc,0x30,0x9f,0x20,0xc4,0x24,0x6e,0x15,0x7d,0x24,
    0x71,0x17,0x10,0x7b,0xa6,0xeb,0xbe,0x07,0x24,0x47,0xb5,0x9d,0x67,0x72,0xbc,0x17,
    0xbb,0x0a,0xfc,0xaa,0xc8,0x47,0xee,0x87,0x87,0xb8,0x1b,0xb4,0xe7,0x1e,0x26,0xe7,
    0x1a,0xd3,0x73,0x8f,0x80,0x37,0xd2,0x73,0x8f,0x82,0x09,0x6f,0x1d,0xf7,0xf3,0x63,
    0xe0,0xc2,0x23,0xf7,0xc7,0x13,0xf0,0xd4,0xc2,0x23,0x1a,0x2f,0x03,0xaf,0xe3,0x1c,
    0x3d,0x09,0x26,0xfb,0x22,0xf3,0xa7,0xe0,0x09,0x0c,0xb6,0x02,0xcc,0x85,0x3a,0x65,
    0x84,0x77,0xd1,0xd3,0xd8,0xae,0x80,0xa3,0xd6,0xf3,0x55,0x87,0xe7,0x28,0xaa,0x67,
    0x99,0xf7,0x95,0x3b,0xea,0x59,0xb0,0x1a,0x62,0x8a,0xef,0x2a,0xf0,0xed,0xde,0x46,
    0xe6,0xab,0xe1,0x5b,0x65,0x72,0x5f,0x43,0xee,0xf5,0x26,0xf7,0xe7,0xc0,0x35,0xf7,
    0xb5,0x60,0x8b,0xbc,0xc6,0x72,0x5f,0xaf,0x23,0xf6,0x6a,0x72,0x5d,0x6b,0xfa,0xe0,
    0x79,0xf8,0xd6,0x9b,0x3e,0x78,0x01,0x5c,0xfb,0xe0,0x45,0x30,0xed,0x83,0x06,0xd3,
    0x07,0xb2,0xb6,0xc1,0x8f,0x26,0xf6,0xb6,0xc9,0x70,0xbf,0x0c,0xf7,0x76,0xc3,0xfd,
    0x0a,0xb8,0x72,0xbf,0x0a,0xa6,0xdc,0xcd,0x86,0x5b,0xd6,0x76,0xf8,0xd1,0x0c,0xf7,
    0x0e,0x73,0x4e,0x5e,0xa3,0x2e,0xb9,0xd7,0x3e,0x82,0xeb,0x75,0xf0,0x1a,0xfa,0x4d,
    0xfd,0x9a,0xe9,0x37,0xb1,0xd9,0x49,0xcc,0x26,0xec,0x77,0x10,0xb7,0xc5,0xc4,0x15,
    0x9b,0x5d,0x7e,0xb4,0xe0,0xbf,0xcb,0xc4,0x7d,0xc3,0xc4,0x9d,0xed,0xdf,0x0a,0xb2,
    0x97,0x6f,0x82,0xad,0x33,0xf7,0x66,0x8c,0x9e,0x90,0xf5,0xdd,0xf8,0xe9,0x68,0xa2,
    0x07,0xf6,0xe0,0xbb,0x3b,0xe4,0xea,0x11,0xee,0xd5,0xdb,0xf0,0xec,0xe1,0xee,0x4e,
    0x37,0xef,0x37,0xa9,0x49,0x73,0x6a,0xa1,0x26,0xf1,0xb9,0xdf,0x45,0x3e,0xcd,0xf8,
    0xef,0xc2,0xb6,0x01,0xdb,0x0d,0x26,0xff,0xc6,0x7f,0xc8,0x7f,0xd3,0xff,0xe4,0xbf,
    0x19,0x3f,0x1d,0x5b,0xc8,0x7f,0x0b,0xbe,0x9b,0x4d,0xfe,0xdb,0xe0,0xd9,0xf2,0x2f,
    0xf9,0x6b,0x4e,0x0d,0x26,0xff,0x4a,0x17,0xd5,0xd0,0x82,0xff,0x06,0x7a,0x59,0xde,
    0x51,0xef,0xb2,0xbe,0xd5,0x33,0xc9,0x7c,0x2f,0xd8,0x74,0xd7,0xdd,0x67,0xef,0xd1,
    0x67,0xfb,0x4c,0x9f,0xbd,0x0f,0xae,0x7d,0xb6,0x1f,0x4c,0xfb,0xec,0xa0,0xd9,0x6f,
    0x59,0x3b,0xe0,0xc7,0x41,0x72,0x3b,0x60,0xce,0xf8,0x87,0xc4,0x0c,0xf0,0x8b,0x71,
    0xa1,0x5d,0xf1,0xdf,0x85,0xeb,0x37,0x7c,0xe4,0x79,0x84,0x58,0x9d,0xf8,0xe5,0xe0,
    0xe3,0x5c,0x77,0xac,0xce,0x50,0x87,0x20,0xb8,0x8a,0x9f,0x3c,0x37,0x12,0xeb,0x2f,
    0xfc,0xe4,0xf7,0xeb,0x56,0xb0,0x6b,0xe0,0xf2,0x9e,0xef,0xe5,0xf5,0xca,0x60,0x83,
    0x84,0xb2,0x1f,0xeb,0xfd,0xd1,0x56,0x72,0x13,0xce,0xcb,0xc6,0xff,0x0a,0x9c,0xf2,
    0xbb,0xc0,0xda,0x48,0x4e,0xd7,0x3c,0x4b,0x27,0xd8,0x25,0xb8,0x67,0xb9,0x88,0xff,
    0x2a,0xbe,0x97,0x79,0xef,0x88,0xf6,0xa3,0x5c,0xb4,0xbe,0x37,0xe5,0x1e,0xfc,0x18,
    0x8d,0x1c,0xf5,0xe6,0xa7,0x68,0x94,0x45,0x4c,0x79,0xaa,0x46,0x3d,0x5d,0xe4,0xa7,
    0x1a,0xf5,0x31,0x1a,0xc9,0x5a,0xb6,0x1f,0xb9,0xf8,0xc9,0x53,0x35,0xca,0xc3,0xcf,
    0x6a,0xd4,0xdb,0x45,0xb8,0xd5,0xe8,0x7a,0xa3,0x91,0xac,0xab,0x46,0xf9,0x70,0x66,
    0xbb,0x6e,0xff,0x1c,0x38,0x55,0x23,0xb5,0xe9,0x63,0x34,0xca,0x37,0x1a,0xcd,0x71,
    0x11,0xbf,0xe4,0x95,0x43,0xae,0xaa,0x51,0x99,0x8b,0xd6,0x47,0x11,0x5f,0x35,0xfa,
    0x04,0x8d,0x62,0xd4,0x5b,0x9c,0xa2,0x51,0x3f,0x62,0xf6,0x33,0x1a,0xf5,0x77,0x91,
    0x9f,0x6a,0x54,0x64,0x34,0x92,0xb5,0x01,0x7e,0x24,0xf0,0x4b,0x18,0x8d,0x06,0xe1,
    0x67,0x35,0x2a,0x74,0x11,0x6e,0x35,0x1a,0x6c,0x34,0x2a,0x34,0x1a,0x15,0xc3,0x39,
    0xc0,0x68,0x34,0x10,0x4e,0xd5,0x48,0x6d,0x8a,0x8c,0x46,0xc5,0x46,0xa3,0x2a,0x17,
    0xf1,0x4b,0x5e,0x03,0xc9,0x55,0x35,0x1a,0xe7,0xa2,0x75,0xd1,0x2a,0x46,0x4c,0x3d,
    0x7b,0x07,0xb9,0x17,0xc4,0x6e,0x3e,0xbd,0xd6,0x80,0x4f,0xb1,0x39,0xf3,0x9f,0x72,
    0xe6,0x0f,0x9b,0x33,0x7f,0x04,0x5c,0xcf,0xfc,0x67,0x60,0x7a,0xe6,0x8f,0x99,0x33,
    0x2f,0x6b,0x47,0xfd,0x38,0x4e,0xdc,0xe3,0xe6,0xbd,0xf5,0x05,0xdc,0x27,0x0c,0xf7,
    0x49,0x70,0xe5,0xfe,0x12,0x4c,0xb9,0x5b,0x0d,0xb7,0xac,0x9d,0xf2,0xe3,0x34,0xdc,
    0xa7,0xcd,0xfb,0xfb,0x6b,0xb8,0xcf,0x98,0xf7,0xf7,0x37,0xe0,0x27,0xb9,0xa3,0xbf,
    0x05,0xab,0x37,0xf1,0xbe,0x03,0xaf,0x21,0x5e,0x9b,0x89,0x27,0x6b,0x67,0xfd,0x68,
    0x23,0xde,0x59,0x73,0x66,0x27,0xba,0xe8,0xef,0x91,0xf9,0xe6,0xb7,0xa2,0xda,0xb5,
    0x19,0xad,0x17,0xb8,0xc8,0xe6,0x34,0x3e,0x67,0x4d,0x3e,0x3f,0x90,0x4f,0x99,0xc9,
    0xe7,0x47,0x70,0xcd,0xa7,0xdd,0xe4,0x23,0x6b,0xe7,0xfc,0x68,0x27,0xce,0x39,0x93,
    0xcf,0x64,0xf2,0x59,0x60,0xf6,0x5e,0xed,0xda,0x4d,0x3e,0x0b,0x5d,0x64,0xd3,0x86,
    0xcf,0x39,0x93,0xcf,0x4f,0xe4,0x73,0xd8,0xe4,0xf3,0x33,0xb8,0xe6,0xd3,0x61,0xf2,
    0x91,0xb5,0xf3,0x7e,0x74,0x10,0xe7,0xbc,0xc9,0xe7,0x1e,0x17,0xfd,0x7d,0x26,0xf1,
    0xf4,0x1d,0xa5,0x76,0x1d,0x26,0x9f,0x6a,0x17,0xd9,0xb4,0xe3,0x73,0x1e,0xdb,0x56,
    0x6c,0x4f,0x99,0xb3,0xfe,0x15,0x7a,0xc7,0x4d,0x9c,0x09,0xae,0x1b,0x0f,0x52,0x7c,
    0x5b,0x4d,0x9c,0x07,0x5c,0x14,0xab,0x03,0x9f,0x53,0xd8,0x1e,0xc3,0xf6,0x28,0xef,
    0x5a,0xb1,0xfd,0x1c,0x3e,0x19,0xfa,0xff,0xa9,0x98,0x79,0xd7,0xaa,0xcf,0x31,0xc3,
    0xbf,0xc8,0x45,0x31,0x5a,0xf1,0x17,0xbe,0x89,0xde,0xe3,0x22,0x6b,0x7f,0xfa,0x2e,
    0x19,0xeb,0xc7,0xdf,0xbf,0x48,0xc1,0x40,0x58,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
