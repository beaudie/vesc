// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000024.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000024[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xf9,0x73,0x54,0x45,
    0x10,0xc7,0x5f,0x76,0x37,0xbb,0x21,0x81,0x10,0x24,0x02,0x41,0xb0,0x12,0x2e,0xd1,
    0x60,0x40,0x0d,0x37,0xcb,0xa9,0x84,0x28,0x77,0x40,0x41,0x8c,0x1c,0xa2,0x42,0x84,
    0xa0,0x24,0x8a,0x20,0x47,0x40,0x94,0x44,0x11,0x44,0x3c,0x00,0x15,0x50,0x41,0x05,
    0xe4,0x50,0xb9,0x04,0x14,0x94,0xcb,0x03,0x44,0x25,0xa8,0x20,0xa0,0x3f,0xf9,0x1f,
    0x58,0x1e,0x55,0x1e,0xd3,0xc3,0xa7,0x53,0x5d,0xaf,0x50,0x53,0x35,0xf5,0xb6,0xbf,
    0xdd,0xd3,0xfd,0xed,0x63,0xe6,0xed,0x26,0x1a,0x69,0x9d,0x08,0xa2,0x29,0x41,0x7a,
    0x90,0x16,0xfc,0x14,0x5c,0xfa,0x6b,0x14,0x44,0x82,0x14,0xf7,0xcc,0x08,0xe2,0xfe,
    0x59,0x34,0xb8,0x64,0x70,0x41,0x45,0xe5,0xe4,0x82,0xc2,0xce,0x9d,0x44,0x9f,0x19,
    0x44,0xbd,0x9d,0xe8,0x1a,0x06,0x89,0x20,0xe6,0x9e,0xb2,0xa6,0x4f,0x9c,0x5a,0x2e,
    0x78,0x3b,0xb7,0x2e,0xba,0x95,0xe5,0xec,0x04,0x4f,0x88,0x0f,0xf7,0xa9,0x9d,0xf7,
    0x29,0x7b,0x82,0x60,0x50,0x90,0x1a,0x74,0x20,0x5e,0x6b,0x9e,0x8a,0xa5,0x80,0xa5,
    0x19,0x2c,0x02,0x96,0x65,0xb0,0x28,0x58,0xb6,0xc1,0x62,0x60,0xcd,0x0c,0x96,0x0a,
    0xd6,0xc2,0x60,0x71,0xb0,0x5c,0x83,0x25,0xc0,0xda,0x18,0x2c,0x0d,0xac,0xbd,0xc1,
    0xea,0x81,0x75,0x30,0x58,0x3a,0x58,0x27,0x83,0x65,0x80,0x15,0x1a,0xac,0x3e,0x58,
    0x37,0x83,0x35,0x00,0xeb,0xe5,0xeb,0x14,0xad,0xcb,0x57,0x6a,0x36,0xce,0x3d,0x5b,
    0x51,0x1f,0x95,0xf3,0x8c,0x2c,0x75,0xbe,0x1a,0xb9,0xb1,0xdb,0x15,0xf1,0xfa,0xa8,
    0xaf,0x8d,0x7c,0x6e,0xe2,0x3e,0xc5,0xc9,0x33,0xd7,0xd9,0x27,0xc8,0x33,0xee,0xed,
    0x62,0x3e,0xbf,0x38,0x58,0xbe,0x93,0xe3,0xf0,0xf9,0x79,0x5b,0xdb,0x64,0xb6,0xf3,
    0x90,0x69,0xf0,0xc6,0x6e,0x8d,0xdc,0x3b,0xb4,0x9f,0xca,0x52,0xe3,0x6d,0x45,0x13,
    0x93,0x2a,0x37,0x77,0x2b,0x99,0xbe,0xa4,0x8f,0xca,0x52,0xef,0x35,0xab,0x73,0xfa,
    0x5e,0xe9,0xe4,0x5c,0x38,0x48,0x6f,0x9b,0x3a,0x39,0x0f,0x39,0x02,0xaf,0x56,0x70,
    0xc8,0x43,0xdf,0x06,0x5e,0x31,0xf4,0x6d,0xd9,0x2b,0x78,0x4f,0xe4,0x76,0xc6,0xdf,
    0x35,0xd8,0x8b,0x3f,0x89,0x97,0x8f,0xff,0xc0,0xd7,0x27,0xcb,0xd7,0x34,0x8f,0xa5,
    0x5c,0xf2,0xff,0x67,0xe5,0xd6,0x3d,0x63,0xc1,0xf5,0xf4,0xbd,0x03,0xf1,0x45,0x2e,
    0x00,0xcb,0x27,0xbf,0x8e,0xf0,0x11,0xfb,0x4e,0xe8,0xf2,0x8c,0xbe,0x8b,0xc9,0xa7,
    0x6b,0xdd,0xde,0x4b,0x7a,0x79,0xf6,0x80,0xaf,0xe8,0x7b,0x53,0x8f,0x5c,0xb3,0x7f,
    0x00,0xb3,0xac,0xf6,0xc5,0xc4,0x53,0xfd,0x50,0x7a,0x27,0xf5,0xb8,0x9d,0xbd,0x1a,
    0xef,0x0e,0xfc,0x09,0x9e,0xe3,0x22,0x8f,0x35,0xf5,0xb7,0x7f,0x29,0x86,0xc3,0x9d,
    0x7c,0x1e,0x4b,0xce,0x22,0x8f,0x03,0xd3,0x98,0xa5,0x21,0x79,0x12,0xe7,0x52,0xf6,
    0xdf,0x43,0x8e,0xb9,0x70,0xba,0x8f,0xcf,0x51,0x63,0x5f,0x06,0x07,0x95,0xcb,0xe9,
    0xa3,0xe6,0x58,0x19,0xb2,0x9f,0x5f,0x57,0x97,0x58,0xf0,0x1c,0x9f,0xdb,0x98,0x19,
    0x7d,0xd1,0xb3,0x59,0x30,0x40,0xed,0xd7,0x70,0x0e,0xd5,0xdf,0x96,0x50,0xbc,0x1d,
    0x9c,0x71,0x95,0xf7,0x87,0x7a,0x7a,0x8c,0x33,0xab,0xfe,0xbf,0x34,0xf9,0x8a,0xfc,
    0x83,0x97,0xaa,0xfa,0x08,0x9f,0x0b,0x70,0xd5,0x19,0xbd,0xc0,0x3d,0x18,0xf5,0xbd,
    0x4f,0xf5,0x71,0x63,0xec,0x17,0xec,0x37,0x87,0xa4,0x62,0xdb,0x8a,0x3b,0x20,0x61,
    0xe4,0x42,0x23,0x4b,0xff,0xc6,0x18,0x59,0x72,0x5f,0x69,0x64,0x79,0xae,0x0f,0xc9,
    0x1b,0x43,0xf2,0x66,0x23,0xcb,0x7c,0x1d,0x45,0x4e,0x72,0xde,0xda,0x73,0xa6,0x86,
    0x39,0x54,0xce,0xd3,0xb5,0x60,0xed,0xcd,0x6c,0x94,0x73,0x76,0xaf,0x43,0xdf,0xcf,
    0x65,0x20,0xb3,0x7e,0x03,0xe7,0xa1,0x23,0xfe,0xc4,0xe6,0x46,0xf0,0x45,0xce,0x46,
    0xe4,0x9b,0xd8,0x27,0x78,0x6f,0x57,0x81,0xd6,0x60,0x6a,0xdf,0x99,0x1a,0x88,0xae,
    0x10,0x59,0xfc,0x77,0xe5,0xbe,0x2c,0xe0,0x0c,0x25,0xe9,0x65,0x77,0xf0,0x2d,0xce,
    0x26,0xd3,0xe7,0x75,0x09,0x93,0x73,0xf4,0xab,0xf3,0x91,0x84,0xf7,0x1f,0xce,0xbe,
    0x27,0xf7,0x6b,0x92,0xba,0xf7,0xc2,0xb7,0xd4,0xa1,0x0f,0xb5,0xee,0x81,0x6f,0xe9,
    0x7b,0x5f,0xf0,0xf9,0xc8,0xfd,0xc0,0x74,0x4f,0x7f,0xb3,0x47,0xf8,0xf6,0xc7,0xe6,
    0x77,0xe7,0x5b,0x63,0x24,0x0d,0xff,0x9b,0xe1,0x3f,0xc0,0xf0,0xbf,0x05,0x5c,0xf9,
    0x0f,0x04,0x53,0xfe,0x83,0x0c,0xff,0x81,0xfe,0xbe,0x0f,0x3c,0x26,0xbe,0x8b,0x0c,
    0x97,0x5b,0xe1,0x52,0x6c,0xf8,0xdf,0x06,0xae,0xfc,0x07,0x83,0xe9,0x9e,0x21,0x66,
    0x8f,0xf0,0x1f,0x82,0x8d,0xf0,0xd7,0x18,0x83,0x0c,0xff,0x61,0xf0,0x1f,0x6a,0xf8,
    0x0f,0x07,0x57,0xfe,0x23,0xc0,0x94,0x7f,0x89,0xe1,0x2f,0xba,0x91,0x6e,0x95,0xe0,
    0x7b,0xa4,0xe9,0xfb,0x28,0xb8,0xc8,0xdc,0x89,0x3c,0x1a,0x6c,0x94,0xb9,0x8f,0x74,
    0x26,0x46,0xc3,0x51,0xfd,0x94,0xe0,0x47,0xee,0xa8,0xbb,0xb8,0x9f,0x74,0x26,0xef,
    0x86,0x73,0xa9,0x89,0x35,0x1e,0x5c,0xe5,0x09,0xc4,0xae,0x62,0x46,0x27,0x62,0x33,
    0x01,0x3f,0x72,0x87,0x4d,0xc6,0xcf,0x24,0x53,0xdf,0x7b,0xc1,0x47,0x38,0x1b,0x91,
    0xef,0x67,0x6f,0x60,0xb0,0x29,0x60,0x29,0xbe,0x2e,0x71,0x7f,0xff,0x4d,0xc5,0x76,
    0x0a,0x3e,0x34,0xc6,0x03,0xc4,0x28,0x33,0x31,0xa6,0x81,0x8f,0x77,0x75,0x91,0x7b,
    0x7b,0x3a,0x39,0x4e,0xe5,0x0e,0x9b,0x46,0x5d,0xc6,0xa0,0xd3,0x5e,0xcd,0xc0,0x57,
    0xb9,0xe9,0xd5,0x83,0xe0,0xda,0xab,0x87,0xc0,0xb4,0x57,0x15,0xa6,0x57,0xa2,0x9b,
    0xe9,0xd6,0x3c,0x6a,0x3c,0xd3,0xcc,0xcd,0xc3,0xdc,0x43,0x95,0x86,0xe7,0x23,0xe0,
    0x49,0xde,0x3b,0xb3,0xb0,0x19,0xe6,0x6e,0x56,0xc9,0xf9,0x51,0xb0,0x59,0xe6,0x1e,
    0x89,0x98,0x9a,0xcc,0xc6,0x87,0xae,0xc5,0x2e,0x96,0xe0,0x73,0xd8,0x3b,0xdb,0xf8,
    0x7e,0xac,0xce,0x77,0x3d,0x2f,0xcf,0x05,0x9b,0xc3,0xdd,0x9a,0xca,0xfb,0x23,0x6a,
    0x6a,0x33,0x97,0x99,0xa9,0x20,0x9f,0x79,0xa6,0x56,0x0b,0xa8,0xd5,0x7c,0x53,0xab,
    0x2a,0x70,0xad,0xd5,0x42,0x30,0xad,0xd5,0xe3,0xa6,0x56,0x0b,0xfd,0xfd,0x16,0x78,
    0x4c,0x7c,0x2f,0x32,0xb5,0x5a,0x7c,0x99,0x5a,0x3d,0x01,0xbe,0x15,0xdf,0x4f,0x82,
    0x95,0xc2,0x51,0xfd,0xc8,0xf3,0x17,0xd7,0x77,0xb1,0x59,0x02,0x87,0x79,0xd8,0x2f,
    0x82,0x47,0x8d,0xe1,0x21,0x36,0xd5,0x6e,0xd5,0xb0,0xbf,0xda,0xf0,0x78,0xea,0x32,
    0x3c,0x9e,0x06,0xd7,0xba,0x2e,0x0d,0xf5,0xec,0x19,0xb0,0xa5,0xff,0xd2,0xb3,0x65,
    0xf8,0xd0,0xb5,0x84,0x9e,0x2d,0x67,0xef,0x32,0xe3,0xfb,0xd9,0x50,0xcf,0x56,0x80,
    0x2d,0xff,0x8f,0x9e,0xad,0xa0,0x1e,0x9a,0x4f,0x4d,0xa8,0x87,0x15,0xc6,0xff,0xf3,
    0xf8,0x9f,0xc1,0x7b,0xec,0x05,0x30,0xf1,0xb5,0x12,0x59,0xdf,0x71,0x2f,0xf1,0xde,
    0x1c,0xee,0x6a,0x2b,0xf2,0x2a,0xbe,0x33,0xd8,0x55,0xed,0x18,0x89,0x6e,0x35,0xf6,
    0xab,0x8c,0xaf,0xd5,0x66,0x76,0x5e,0x66,0x76,0xd6,0x98,0xd9,0x79,0x05,0x5c,0x67,
    0xe7,0x55,0x30,0x9d,0x9d,0x75,0xa6,0x67,0xa2,0x5b,0xeb,0xd6,0x3a,0x72,0x5a,0x8b,
    0x6f,0x79,0x27,0xbf,0x06,0x4f,0x7d,0x27,0x49,0x7d,0x5e,0x07,0x17,0x2e,0xeb,0x91,
    0xbb,0x3b,0x7b,0xd1,0xbd,0xc1,0x6f,0x90,0xf5,0xc6,0xc7,0x06,0xe3,0x43,0xf6,0x6c,
    0xc0,0x4e,0xf5,0x6f,0xa2,0x2f,0x36,0x31,0xde,0x02,0x17,0xfb,0x8d,0xc8,0x1a,0xe3,
    0x6d,0x62,0x6c,0x34,0x3e,0x36,0x19,0x1f,0xb2,0x67,0x13,0x76,0xaa,0x7f,0x07,0xfd,
    0x16,0x13,0x63,0x2b,0xb8,0xd8,0x6f,0x46,0xd6,0x18,0xdb,0x88,0xb1,0xd9,0xf8,0xd8,
    0x6e,0x7c,0xc8,0x9e,0xed,0xd8,0xc9,0x3c,0x68,0xed,0xd6,0x99,0xbe,0xbc,0x4b,0x5f,
    0x76,0x98,0xbe,0xbc,0x07,0xae,0x7d,0x79,0x1f,0x4c,0xfb,0xb2,0xcb,0xf4,0x45,0x74,
    0x3b,0xdd,0xda,0x87,0xef,0x9d,0x66,0x7e,0x76,0xc3,0x45,0xbf,0x23,0xed,0x01,0xdb,
    0x6d,0xbe,0xd7,0xa9,0xed,0xde,0x3a,0xdb,0x7a,0x5e,0xfe,0x00,0x6c,0x8f,0x99,0xfb,
    0x88,0x99,0xfb,0x95,0xd8,0x48,0x5e,0xbb,0x88,0xbd,0xcf,0xe4,0x75,0x80,0xbc,0xf6,
    0x9b,0xbc,0x3e,0x04,0xd7,0xbc,0x3e,0x02,0xd3,0xbc,0x0e,0x99,0xbc,0x44,0x77,0xd0,
    0xad,0x23,0xf8,0x3e,0x68,0x6a,0xfc,0x31,0x5c,0x2b,0x4d,0x9f,0x3e,0x01,0x57,0x9b,
    0xc3,0xa1,0x79,0x3a,0x8c,0x8d,0xf0,0x3d,0x84,0xcf,0x23,0xe6,0x9d,0x76,0x1c,0xbe,
    0xc7,0xcc,0xbd,0xf3,0x29,0xb8,0xec,0x3f,0x8a,0xac,0xba,0xcf,0xf8,0x4e,0x7a,0x9c,
    0xf7,0xe7,0xe7,0x60,0x65,0x26,0xbf,0x2f,0xc0,0x4b,0xc9,0xef,0xa4,0xc9,0x4f,0x74,
    0x27,0xdc,0x3a,0x09,0x97,0x13,0x86,0xfb,0xa9,0xd0,0x9c,0x9e,0xe2,0xbb,0xbc,0x70,
    0x57,0xfb,0x93,0x86,0xcb,0x57,0x21,0x2e,0x5f,0x83,0x75,0x31,0x5c,0xbe,0x01,0x57,
    0x2e,0xb5,0x86,0x8b,0xe8,0x4e,0xbb,0x55,0x8b,0xef,0xd3,0x86,0xcb,0x99,0xd0,0x3c,
    0x9f,0x31,0x5c,0xd4,0xbe,0xd6,0x70,0xf9,0x36,0xc4,0xe5,0x3b,0xb0,0x1d,0x86,0xcb,
    0xf7,0xe0,0xca,0xe5,0x9c,0xe1,0x22,0xba,0xb3,0x6e,0x9d,0xc3,0xf7,0x59,0xc3,0xe5,
    0xbc,0xe9,0xbb,0x70,0x39,0xcf,0x6f,0x1a,0xe1,0xa2,0xf6,0xe7,0x42,0x3d,0x3e,0x14,
    0x9a,0xd1,0x5d,0x66,0xe6,0x7f,0xc4,0x9f,0xf8,0xba,0x88,0xfc,0xa7,0x7b,0x7b,0x74,
    0x73,0xab,0x0b,0x67,0x3c,0x1d,0x6e,0xf2,0xbb,0xab,0xab,0xb3,0x4b,0xf0,0x9b,0x4b,
    0x7c,0x65,0x98,0xf9,0xab,0x0f,0x7e,0x80,0x1c,0x1b,0x82,0x35,0x20,0xc7,0x46,0x26,
    0xc7,0x86,0xfc,0x6f,0xa8,0x09,0x7e,0xb2,0x8c,0x9f,0x2b,0xf0,0x53,0x4d,0xfc,0x6c,
    0x30,0xf9,0x7f,0xc6,0x5f,0xce,0x36,0x9b,0x3d,0x4d,0xcc,0x9e,0xa6,0xec,0x59,0xc8,
    0x9e,0x1c,0xb0,0x66,0xc6,0xcf,0x55,0xe0,0xcd,0x3d,0xaf,0x84,0xc7,0x5a,0xf2,0xae,
    0x6c,0x8e,0xbe,0x05,0x31,0x5a,0x12,0x43,0x38,0xff,0x4d,0x3d,0xfe,0x01,0xf3,0x30,
    0x45,0x66,0x7c,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
