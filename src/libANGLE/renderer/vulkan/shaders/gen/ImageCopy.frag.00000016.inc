// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0x44,0x10,0x50,0x42,0xc5,0xf2,0xd5,0x43,0x0c,
    0xb1,0xc0,0x48,0x20,0x25,0x23,0xc9,0x28,0x05,0xcd,0x4a,0x28,0xc2,0xc4,0x12,0x93,
    0x24,0x49,0x93,0x48,0x4c,0x51,0x4b,0x2b,0xa9,0x7c,0xf4,0x12,0x2b,0xd1,0x4a,0xc4,
    0xfa,0x2f,0xfa,0x8b,0x9a,0x1e,0x33,0xcd,0xb4,0xd7,0xb9,0xbf,0xc5,0x7c,0x73,0xc7,
    0x8a,0x99,0x3d,0xe7,0xae,0x6f,0x7d,0x7b,0xed,0x6f,0xad,0xb5,0xcf,0x3a,0x24,0x13,
    0xcb,0xd3,0x51,0x32,0x27,0x2a,0x8c,0xf2,0xa3,0x5f,0xa2,0xcc,0xdf,0xbc,0x28,0x11,
    0xe5,0x84,0x67,0x51,0x94,0x8a,0x9f,0x9b,0x3b,0xb6,0x77,0xd4,0x1e,0x1a,0xde,0x53,
    0x5b,0xdf,0x50,0x67,0xfe,0xb9,0x51,0x32,0xe6,0x99,0xaf,0x24,0x4a,0x47,0xb9,0xe1,
    0x69,0xeb,0x40,0xdf,0xbe,0x41,0xc3,0x8b,0xc3,0xba,0x1d,0x56,0x69,0xe0,0x19,0x9e,
    0xb6,0x18,0xe1,0x57,0x71,0x1c,0xd3,0xf6,0x44,0x51,0x7b,0x94,0x17,0x95,0x73,0xde,
    0x72,0x9e,0x8e,0xe5,0x80,0xe5,0x0b,0x96,0x00,0x2b,0x15,0x2c,0x09,0x56,0x21,0x58,
    0x2e,0xd8,0x5d,0x82,0xe5,0x81,0x2d,0x16,0x2c,0x05,0x76,0x8f,0x60,0x69,0xb0,0x15,
    0x82,0xe5,0x83,0xdd,0x2f,0x58,0x01,0xd8,0x6a,0xc1,0x0a,0xc1,0xea,0x04,0x2b,0x02,
    0xab,0x17,0x6c,0x0e,0x58,0xa3,0x60,0xc5,0x60,0xcd,0x71,0x9d,0x92,0xb3,0xf9,0x5a,
    0xcd,0x36,0x85,0xe7,0x32,0xea,0xe3,0xf6,0x52,0xb1,0xad,0xce,0x4b,0xb0,0xcb,0xc3,
    0xae,0x44,0xec,0x4f,0xc6,0xb5,0xb1,0xdf,0xf3,0x03,0x27,0x45,0x9e,0x56,0xd7,0xca,
    0x60,0xa7,0xc9,0x3f,0x11,0xe3,0xb9,0x71,0x8e,0x69,0xd6,0x82,0xb0,0xb3,0x10,0xbe,
    0x71,0x8b,0xc8,0x2d,0x17,0xee,0x1c,0xe2,0x18,0xde,0x84,0x5d,0x2c,0xb1,0xe7,0xc2,
    0xf7,0xb3,0xcb,0x88,0x15,0xc5,0x3a,0x4b,0x67,0xeb,0xec,0x1a,0x6c,0x95,0xfd,0xcf,
    0x72,0x8e,0x9d,0x5f,0x41,0xfd,0xcb,0x39,0xbf,0x22,0x3e,0x27,0x83,0xd5,0x90,0xeb,
    0x02,0xf4,0x18,0xbf,0x12,0x5f,0x5a,0xfc,0xd5,0x92,0xcf,0x12,0xfc,0x65,0xf1,0x3d,
    0x4a,0xc4,0xb5,0xad,0x41,0xb7,0xd7,0xdd,0x78,0xf7,0x8a,0x66,0x8f,0x53,0xc3,0xdd,
    0x72,0xfe,0x5a,0xce,0x75,0xff,0x3a,0x6a,0x63,0x75,0x79,0x8c,0xbd,0x7e,0xee,0x06,
    0xe2,0x19,0x5e,0x15,0x14,0xb4,0xe2,0xcf,0xe1,0xcc,0xec,0xa7,0xed,0x79,0x9c,0xdf,
    0xad,0xe4,0x6e,0xf6,0x26,0x30,0x3f,0xb3,0x2d,0xcb,0xde,0xc2,0x7b,0x62,0xfb,0x9f,
    0x26,0xd7,0x14,0x9a,0x9e,0xe5,0x77,0x52,0xf8,0x5d,0xf4,0xce,0xed,0x9d,0x92,0xb3,
    0xe5,0xd8,0x93,0xc5,0xdf,0x4b,0x1e,0x16,0x6f,0x84,0x3a,0x7a,0x8e,0xef,0xe2,0x1b,
    0x11,0xfe,0x18,0xef,0x94,0xf1,0x4f,0xc1,0xd7,0xf3,0xce,0xa1,0xd1,0xf6,0x7f,0xca,
    0xfe,0x32,0xf1,0x5f,0xe6,0x1d,0x72,0x3d,0xd7,0xe5,0x1e,0xcf,0xa0,0x6d,0x84,0xfa,
    0xcc,0x30,0x87,0x92,0x71,0x2f,0xf2,0x62,0x5e,0x2e,0xf5,0x31,0xec,0x8f,0x80,0xe4,
    0xc1,0xcd,0x97,0x7b,0xe2,0xf6,0x22,0xb1,0xad,0x5f,0x1b,0xc5,0xb6,0xdc,0x46,0xc5,
    0xb6,0xfb,0x71,0x09,0xbb,0x85,0xf7,0xa6,0x84,0xfe,0x6f,0x0d,0xe8,0x5c,0x66,0x57,
    0x09,0xcb,0x7b,0x3b,0xc8,0xfb,0x38,0x0f,0x7f,0x6b,0x50,0x54,0xc9,0xfc,0x9a,0xcf,
    0x5d,0x6e,0x81,0x53,0x05,0x7e,0x22,0x70,0xcc,0x5e,0xc8,0xbe,0xaa,0xf8,0x1e,0x25,
    0x63,0xfd,0x0b,0x85,0xbf,0x98,0x9c,0xcc,0xb7,0x08,0xdb,0xe2,0xdb,0x9d,0xbf,0x9b,
    0xf8,0xd5,0xf0,0xfd,0x3d,0x35,0x7c,0x3a,0x70,0x96,0xca,0x7c,0xb4,0xf7,0xe0,0xf7,
    0x10,0x63,0x25,0xba,0xff,0x0a,0x7c,0x9f,0x93,0x2b,0xa9,0xe3,0x0a,0x62,0x5b,0x1d,
    0xee,0xa3,0x76,0xcb,0x88,0x9d,0x62,0x7e,0x1a,0x7e,0x0c,0xfb,0x01,0x30,0xdf,0xb3,
    0x4a,0xf6,0x98,0xde,0x55,0x70,0xfe,0x0c,0xb1,0xfd,0x8c,0x95,0xa2,0x7f,0x35,0xfa,
    0x6b,0x44,0xff,0x83,0xe0,0xae,0xbf,0x16,0xcc,0xf5,0xd7,0x89,0x7e,0xf3,0xad,0x61,
    0x5e,0x5b,0xec,0x35,0xa2,0xe5,0x21,0xb4,0xac,0x15,0xfd,0x0f,0x83,0xbb,0xfe,0x7a,
    0x30,0xdf,0xd3,0x20,0x7b,0x4c,0x7f,0x03,0x1c,0xd3,0xef,0x67,0xd4,0x89,0xfe,0x47,
    0xd0,0xbf,0x4e,0xf4,0x37,0x82,0xbb,0xfe,0x47,0xc1,0x5c,0x7f,0x93,0xe8,0x37,0xdf,
    0xfa,0xf8,0xee,0x65,0x62,0xaf,0x97,0xbe,0x37,0xa3,0xc5,0xee,0x5d,0xe6,0x3e,0x66,
    0xb0,0x66,0x99,0x27,0x7e,0x27,0x5a,0xd0,0xe8,0x71,0x9a,0x88,0x63,0x33,0xe6,0x09,
    0xe6,0x8b,0xdf,0xc9,0x27,0xd1,0xdc,0x26,0x67,0x6d,0x06,0x77,0xbb,0x9d,0xb3,0x8f,
    0x73,0x47,0x9f,0x82,0xd3,0x4e,0x1c,0x9b,0x41,0x1d,0xc4,0xd9,0x22,0xf5,0x7d,0x06,
    0xbc,0x33,0x70,0x52,0xb1,0xf6,0xcc,0xde,0x48,0xb0,0x6d,0x60,0x39,0xf1,0xef,0x54,
    0x3c,0xbf,0x3a,0xe1,0x6e,0x23,0x86,0x9f,0xb1,0x9d,0x33,0xba,0xe4,0x8c,0x1d,0xe0,
    0xbd,0x41,0x99,0xcd,0xdd,0xe7,0xc8,0xb1,0x93,0x19,0xb2,0x83,0xba,0x6c,0xc4,0xe7,
    0xbd,0x7a,0x9e,0x58,0x3b,0xa5,0x57,0x2f,0x80,0x7b,0xaf,0x5e,0x04,0xf3,0x5e,0x75,
    0x4b,0xaf,0xcc,0xb7,0x2b,0xac,0x7e,0x6a,0xbc,0x4b,0xee,0xcd,0x4b,0xcc,0x95,0x1e,
    0xd1,0xf9,0x32,0x78,0x0b,0xdf,0x8d,0x5e,0x38,0x5b,0xc3,0x54,0xb2,0x9c,0x5f,0x01,
    0xeb,0x95,0x39,0x92,0x90,0x9a,0xf4,0x11,0xc3,0xd7,0x78,0x38,0xcb,0xf0,0xdd,0xec,
    0xed,0x93,0xd8,0xaf,0xce,0xc6,0x2e,0x88,0xed,0x3d,0x60,0xbb,0x99,0x95,0x79,0xf2,
    0x8d,0xf0,0xda,0xec,0xe1,0xce,0x74,0x93,0x4f,0xbf,0xd4,0xea,0x35,0x6a,0xb5,0x57,
    0x6a,0xf5,0x3a,0xb8,0xd7,0x6a,0x1f,0x98,0xd7,0x6a,0xbf,0xd4,0xca,0x7c,0x03,0x61,
    0xed,0x27,0xf6,0x80,0xd4,0xea,0x8d,0x3b,0xd4,0xea,0x00,0xf8,0x0c,0xb1,0x07,0xc1,
    0xda,0xd0,0xe8,0x71,0xec,0xf9,0x5b,0xe8,0xbb,0x71,0xde,0x44,0x43,0x3f,0xfc,0x01,
    0x74,0x0c,0x89,0x0e,0xe3,0x1c,0x0c,0x6b,0x88,0xfd,0x07,0x45,0xc7,0x5b,0x77,0xd0,
    0x71,0x08,0xdc,0xeb,0x3a,0x9c,0xd5,0xb3,0xb7,0xc1,0x86,0xff,0xa5,0x67,0x87,0x89,
    0xe1,0xeb,0x0c,0x3d,0x3b,0xc2,0xde,0xc3,0x12,0xfb,0x9d,0xac,0x9e,0x1d,0x05,0x3b,
    0xf2,0x1f,0x3d,0x3b,0x4a,0x3d,0x3c,0x9f,0xa1,0xac,0x1e,0x76,0x4b,0xfc,0xf7,0x88,
    0x3f,0xca,0x37,0xfd,0x18,0x98,0xc5,0x1a,0xc5,0xf6,0x7e,0x1f,0xa7,0xdf,0x63,0xd2,
    0xef,0xf7,0xc1,0xbd,0xdf,0x27,0xc0,0xbc,0xdf,0xe3,0x52,0x67,0xf3,0x9d,0x0c,0xeb,
    0x2c,0x3a,0x4e,0x12,0xc7,0xce,0x3d,0xcd,0x37,0xd6,0xe6,0xd8,0xa9,0xb8,0x26,0x19,
    0xec,0xb4,0x7c,0xc3,0x9d,0xfb,0xc1,0x2c,0xb7,0x20,0xb6,0x3f,0x04,0x3b,0x23,0x35,
    0x49,0x48,0x4d,0x46,0xe1,0x58,0x0d,0xc6,0x39,0xfb,0xac,0xe4,0xf5,0x11,0x79,0x9d,
    0x93,0xbc,0x3e,0x06,0xf7,0xbc,0x3e,0x01,0xf3,0xbc,0x26,0x24,0x2f,0xf3,0x9d,0x0f,
    0xeb,0x22,0xb1,0xcf,0x13,0xdb,0xfe,0xa7,0xf9,0x0c,0xad,0x3d,0x12,0xfb,0x73,0x70,
    0xe7,0x5c,0x80,0xe3,0xdf,0xc3,0x0b,0x70,0x4c,0xef,0x04,0x31,0x2f,0xca,0xbc,0xfb,
    0x02,0xbd,0x97,0xe5,0x4e,0x7e,0x09,0x6e,0xfb,0x2f,0x61,0xbb,0xef,0x2b,0xfe,0x5f,
    0xf9,0x95,0xd9,0xfa,0x35,0x58,0x97,0xe4,0xf7,0x0d,0x78,0x1b,0xf9,0x4d,0x4a,0x7e,
    0xe6,0xbb,0x12,0xd6,0x24,0x5a,0xae,0x88,0xf6,0xab,0x68,0xf7,0x6f,0xe1,0x55,0xf2,
    0x30,0xed,0xce,0x9f,0x14,0x2d,0xdf,0x66,0x69,0xf9,0x0e,0xac,0x5a,0xb4,0x7c,0x0f,
    0xee,0x5a,0xa6,0x44,0x8b,0xf9,0xae,0x85,0x35,0x45,0xec,0x6b,0xa2,0xe5,0x06,0x5a,
    0xae,0xa3,0xe5,0x86,0x68,0x71,0xfe,0x94,0x68,0xf9,0x21,0x4b,0xcb,0x8f,0x60,0x63,
    0xa2,0xe5,0x27,0x70,0xd7,0x32,0x2d,0x5a,0xcc,0x77,0x33,0xe6,0x66,0x62,0xdf,0x14,
    0x2d,0xb7,0xa4,0xef,0xa6,0xe5,0x16,0x35,0x32,0x2d,0xce,0x9f,0xce,0xea,0xf1,0x44,
    0xd6,0x1d,0x1d,0x97,0x3b,0xff,0x33,0xf1,0x2c,0xd6,0x6d,0xec,0xbf,0xc3,0x64,0x69,
    0x0c,0xeb,0x1f,0xaa,0x06,0x02,0xdf,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
