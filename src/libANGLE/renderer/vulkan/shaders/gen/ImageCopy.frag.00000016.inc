// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xe9,0x4f,0x9c,0x55,
    0x14,0xc6,0xdf,0x99,0x77,0x16,0x0a,0xb2,0x14,0x68,0x91,0x2a,0xd5,0xda,0x92,0x68,
    0xa8,0x30,0x2a,0x56,0x04,0xdb,0x84,0x5a,0xa7,0x8d,0xe2,0x52,0x31,0xd6,0x16,0xed,
    0x62,0x21,0x2e,0xad,0x50,0x2d,0x44,0x05,0x17,0xaa,0x24,0x42,0x15,0xbe,0xd8,0x45,
    0x48,0x0c,0xa9,0x46,0x21,0x69,0xe1,0x83,0x42,0xda,0x0f,0x26,0x7e,0x32,0x8d,0xd1,
    0x1a,0x6d,0x5d,0xfe,0x12,0xe3,0x92,0x98,0x78,0xce,0x9d,0xdf,0x69,0x4e,0x26,0x9a,
    0x36,0xb9,0x79,0xe7,0x3e,0x67,0x7b,0x9e,0x73,0xcf,0xbd,0x34,0x4e,0xae,0xcf,0x46,
    0x51,0x22,0x2a,0x8d,0x4a,0xa2,0xdf,0xa2,0xc2,0xbf,0x95,0x51,0x52,0x90,0xc2,0xf7,
    0x4e,0xf9,0x96,0x45,0x99,0xb0,0xdf,0xde,0xd5,0xdd,0xd5,0x7c,0x74,0xb0,0xb7,0xb9,
    0xf5,0xee,0x9c,0xfa,0x55,0x44,0x71,0xf0,0x57,0x5b,0x65,0x94,0x8d,0x52,0xf2,0xd5,
    0xf5,0xd2,0x81,0x17,0xfa,0x15,0x2f,0x97,0x75,0x41,0x56,0x95,0xf8,0x29,0x9e,0xd5,
    0x1c,0xf2,0xab,0x3c,0xe4,0xd4,0x98,0x28,0xda,0x11,0xa5,0xa3,0x1a,0xea,0xae,0xe7,
    0x6b,0x58,0x02,0xac,0xc4,0x61,0x49,0xb0,0x2a,0x87,0xc5,0x60,0xb5,0x0e,0x4b,0x81,
    0x5d,0xef,0xb0,0x34,0xd8,0x8d,0x0e,0xcb,0x80,0xdd,0xec,0xb0,0x2c,0xd8,0x06,0x87,
    0x95,0x80,0xdd,0xea,0xb0,0x15,0x60,0x1b,0x1d,0x56,0x0a,0x96,0x73,0x58,0x19,0x58,
    0xab,0xc3,0xae,0x03,0x6b,0x73,0x58,0x39,0xd8,0x7d,0xa1,0x4f,0xf1,0x55,0xbd,0xda,
    0xb3,0x6d,0xf2,0xbd,0x85,0xfe,0xd8,0x7e,0x9d,0xdb,0x6b,0x9f,0xd7,0xb2,0xaf,0x91,
    0xa8,0x64,0xb0,0xc7,0xa1,0x37,0xfa,0x7b,0x95,0xf8,0x64,0xd0,0xa9,0x7d,0xad,0x93,
    0x7d,0x16,0xfd,0x6a,0x5f,0x2d,0x9e,0xa5,0xd8,0xd5,0x56,0x86,0x96,0x54,0xc0,0x52,
    0x81,0x6f,0x02,0x2d,0x1d,0xec,0xcb,0x5d,0xae,0x0a,0xfc,0xad,0x56,0x35,0xb9,0xa2,
    0xc0,0xab,0xea,0x6a,0x5f,0xad,0xa6,0xae,0xea,0x6b,0x2c,0xf3,0xd1,0xfa,0xb5,0xf4,
    0xbb,0x86,0xfa,0xb5,0xa1,0x4e,0x01,0x6b,0x42,0xdb,0x6a,0xf8,0xa8,0x7f,0x1d,0xb6,
    0xac,0xb3,0x37,0x38,0x3d,0x6b,0xb1,0x57,0x87,0xb9,0x49,0x86,0x5e,0x36,0xc1,0xdb,
    0xfa,0x6c,0x71,0x4d,0xcc,0x8e,0xd9,0xef,0xa0,0x8e,0xd9,0x37,0xd1,0x0b,0xed,0xc3,
    0x16,0x78,0x6b,0x9d,0x7a,0xa9,0xd0,0xc9,0x3e,0x41,0xce,0xe2,0xef,0x0d,0xd2,0xf7,
    0xad,0xf2,0xed,0x84,0xd7,0xfd,0xe0,0x5b,0xd1,0xa9,0xfb,0x6d,0x45,0x7c,0xf2,0x45,
    0xfb,0x2e,0xee,0x80,0xc6,0x3f,0x8c,0xae,0x0c,0x7c,0x76,0x72,0x2e,0x31,0xfb,0x5d,
    0xd8,0x62,0x17,0xdf,0xc3,0xb9,0xd9,0x7e,0x3f,0x3e,0xb6,0x3f,0x42,0x1f,0x35,0x7e,
    0x8c,0x9e,0xa5,0x9c,0x7d,0x82,0xfb,0x61,0xfb,0x93,0x45,0xe7,0x72,0x86,0x79,0x57,
    0x7e,0xe7,0xa9,0x3d,0x86,0xbe,0xf3,0xbc,0x11,0x71,0xe8,0x63,0x3a,0xf0,0x48,0xa1,
    0x4f,0xb1,0x3f,0x05,0xd1,0xde,0x6f,0x66,0x26,0x2b,0xe9,0xf5,0xa3,0xc2,0xa8,0x82,
    0x77,0xa0,0x92,0x65,0x7d,0xed,0x67,0xb6,0x57,0x62,0xef,0x94,0x0c,0x75,0xbc,0x05,
    0xab,0x98,0x93,0xcd,0xf8,0xd4,0x83,0xbf,0x23,0x3e,0xba,0x5f,0x43,0x5c,0x3d,0x71,
    0x3a,0x27,0x37,0x11,0xd7,0x40,0x9c,0xcd,0xb6,0xe2,0x67,0xc5,0x67,0x9d,0x7b,0x43,
    0x74,0x76,0xfe,0x10,0xe6,0x8d,0xf0,0xf9,0x5b,0xfc,0xed,0x2d,0x69,0x44,0x8f,0xfe,
    0xde,0x29,0x71,0x19,0xde,0x93,0x35,0xf8,0xbe,0x45,0xbf,0x6e,0x03,0x7f,0x5c,0x76,
    0xca,0xe9,0x2b,0x30,0xf3,0xfb,0x4b,0x72,0x58,0x2e,0xfd,0xfe,0x2e,0x5e,0xea,0xf7,
    0x3d,0x3e,0x69,0x62,0x36,0x38,0x0d,0x1b,0xd1,0xd0,0xe4,0x34,0xdc,0x0e,0x6e,0x1a,
    0x9a,0xc1,0x4c,0x43,0xce,0x69,0x50,0x5b,0x0b,0xef,0x9a,0xd6,0x6d,0x71,0x1a,0xee,
    0xa2,0x76,0xc2,0x69,0x68,0x05,0x37,0x0d,0x5f,0x83,0x99,0x9f,0x6a,0xb0,0x5c,0x39,
    0xa7,0xe1,0x12,0x3e,0x8d,0xc4,0xb4,0x38,0x0d,0xf7,0xa0,0x61,0x93,0xd3,0xd0,0x06,
    0x6e,0x1a,0xee,0x05,0x33,0x0d,0x1d,0x4e,0x83,0xda,0xda,0xc3,0xdc,0x15,0xea,0xb6,
    0x33,0x47,0xd9,0x90,0xaf,0x50,0xfb,0x92,0xbb,0x9b,0xca,0xd1,0x7c,0x3b,0x1c,0xc7,
    0x1f,0xf0,0xcb,0x11,0xd7,0x0e,0x1f,0xbd,0xb3,0x0f,0x70,0x5f,0x6d,0xe6,0xb6,0xc3,
    0x39,0xef,0x66,0x6e,0x07,0xf8,0x28,0x33,0xf7,0x20,0x98,0xe6,0x1d,0xe0,0x2d,0x7d,
    0x08,0x5c,0xf3,0xe8,0x9d,0x7e,0x84,0x3c,0x5d,0xe4,0xc9,0x04,0xee,0x05,0x5c,0x63,
    0xf4,0x8e,0x3f,0x06,0xa6,0xe7,0x52,0x1a,0x7a,0x5f,0xc8,0x13,0x39,0xac,0x1b,0x2c,
    0x11,0xfc,0x33,0xe1,0x7d,0x78,0x02,0xdf,0x6e,0x72,0xf4,0x4a,0x3e,0x7d,0x8f,0x9e,
    0x44,0xcf,0x73,0x12,0xab,0xef,0xc6,0x53,0x60,0x79,0x6a,0x6a,0xec,0x6e,0xf0,0x71,
    0xf1,0xd1,0xfd,0x1e,0xf2,0xed,0x76,0xdc,0x9f,0x86,0x7b,0x8f,0xe3,0xfe,0x0c,0xb8,
    0x71,0xdf,0x0b,0xb6,0x4b,0x3a,0xa2,0x6f,0xe8,0x3e,0x6a,0xef,0x81,0xeb,0x5e,0x37,
    0x07,0x07,0xc8,0xb7,0xdf,0xcd,0xc1,0xb3,0xe0,0x36,0x07,0x07,0xc1,0x6c,0x0e,0xfa,
    0xdc,0x1c,0x1c,0x0c,0x1a,0xb5,0x76,0xe1,0x6c,0x7b,0xdd,0x2c,0x3f,0x4f,0xed,0x38,
    0xf4,0xb2,0x24,0xe8,0x7e,0x11,0x6c,0x9f,0x7b,0x63,0x92,0xf4,0x4f,0xed,0x87,0x88,
    0xb3,0x35,0x46,0xbf,0x0e,0x13,0x7b,0x28,0xe4,0x5a,0x11,0x74,0xf5,0x93,0xe7,0x30,
    0xef,0x5c,0xda,0xbd,0xc7,0x3a,0x6f,0x7d,0x70,0x1a,0x70,0x7a,0x5f,0x46,0xef,0x11,
    0xa7,0xf7,0x15,0x70,0xd3,0x7b,0x14,0xcc,0xf4,0x0e,0x39,0xbd,0x6a,0x1b,0x94,0x35,
    0x44,0xee,0x41,0xa7,0xf7,0x55,0xa7,0x77,0x81,0x5c,0xaf,0x81,0xe7,0xe1,0x64,0x71,
    0x43,0xdc,0x01,0xf5,0x79,0x9d,0x9a,0x03,0xf8,0x0f,0x52,0x77,0xc4,0xd5,0x55,0x9f,
    0x61,0x59,0x23,0xc4,0x0f,0xbb,0xba,0x6f,0xfe,0x47,0x9f,0xdf,0xbe,0x46,0x9f,0x47,
    0x89,0xb3,0xf5,0x1e,0x7d,0x3e,0x46,0xec,0xa8,0xeb,0xf3,0xbb,0xe4,0x39,0xf6,0x3f,
    0x7d,0x36,0x4e,0x23,0x68,0xd2,0x98,0x9f,0x88,0x19,0x22,0x7e,0xb8,0xe8,0x4c,0xfa,
    0x9c,0xef,0x8f,0x9c,0x65,0x2f,0x71,0x9a,0xe7,0x0d,0xfe,0x3e,0x8e,0x63,0xb7,0xf3,
    0x3b,0xce,0xf9,0x4d,0xb8,0xf3,0x7b,0x1f,0xdc,0xce,0xef,0x03,0x30,0x3b,0xbf,0x29,
    0xd7,0x47,0xb5,0x4d,0xca,0x3a,0x01,0x8f,0x49,0x74,0x6a,0xad,0x0f,0xa9,0x37,0x8e,
    0xce,0x2c,0x3d,0x33,0x9d,0x53,0xc4,0x9c,0x70,0x7c,0x4e,0xc1,0xe7,0xa4,0xe3,0x73,
    0x1a,0xdc,0xf8,0x7c,0x04,0x66,0x7c,0x66,0x1c,0x1f,0xb5,0x4d,0xcb,0x9a,0x25,0xf7,
    0x34,0xe7,0xaa,0x79,0x3e,0x86,0x4b,0xcc,0xdb,0xaf,0x1c,0xbf,0x71,0xb8,0xbd,0xab,
    0x33,0xc4,0xce,0xba,0x77,0xe2,0x13,0x78,0x9d,0x71,0xef,0xc4,0xa7,0xe0,0x17,0x99,
    0x9b,0xcf,0xc0,0x7a,0x1c,0xd7,0xcf,0xc1,0xf3,0x70,0x9d,0x77,0x5c,0xd5,0x36,0x27,
    0x6b,0x9e,0x7a,0x73,0x8e,0xd7,0x45,0xf4,0x8d,0xbb,0xbf,0x49,0xe6,0x37,0xcf,0x59,
    0xab,0xdf,0x65,0x7c,0x66,0x89,0x99,0x73,0x7c,0xce,0xc2,0xa7,0xc1,0xf1,0x39,0x07,
    0x6e,0x7c,0x16,0x1d,0x9f,0x73,0xe1,0x9e,0x45,0x01,0xd3,0x3a,0x0b,0x8e,0xcf,0xb7,
    0xf0,0xb9,0xcc,0x19,0x2a,0x1f,0xf3,0x5b,0x74,0x7c,0xae,0xe0,0x33,0x4f,0xcc,0x82,
    0xe3,0xf3,0x05,0x7c,0x26,0x1c,0x9f,0x2f,0xc1,0x8d,0xcf,0xb2,0xe3,0xa3,0xb6,0x25,
    0x59,0xcb,0xd4,0x59,0x72,0x7c,0xbe,0xe3,0xff,0xba,0x57,0xdc,0x3c,0x99,0xdf,0xb2,
    0xe3,0xf3,0x2b,0x3e,0x8b,0xc4,0x2c,0x15,0x9d,0xf1,0x8c,0xf3,0xfd,0x85,0x79,0x98,
    0x26,0x6e,0xb9,0x68,0x4e,0xa7,0x9c,0xef,0xcf,0xcc,0xf7,0x24,0x71,0x9a,0x67,0x8b,
    0x30,0xb9,0x80,0xed,0x1f,0x39,0xb5,0x36,0x59,0xff,0x02,0xa8,0x31,0x20,0xe7,0xc4,
    0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
