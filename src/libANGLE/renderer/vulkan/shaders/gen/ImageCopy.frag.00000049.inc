// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000049.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000049[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x95,0x65,
    0x18,0xc7,0xef,0x73,0x9e,0xf3,0x82,0x10,0x2f,0x02,0x4a,0xb8,0xb0,0x7c,0x61,0xb3,
    0xa1,0x70,0xb6,0xc8,0x08,0x92,0x45,0x46,0xd6,0x26,0x96,0x58,0xf0,0x43,0x4d,0x54,
    0xa8,0x38,0x2b,0x70,0x4d,0x5c,0xfc,0x00,0x26,0xac,0xa5,0x15,0xac,0x31,0x6b,0x05,
    0x5b,0xc1,0x0f,0x05,0xd3,0x5a,0x5b,0x3f,0xb5,0xd6,0x4a,0x57,0x9a,0xf6,0x07,0x35,
    0xb3,0xad,0xad,0xeb,0xba,0xcf,0xe7,0xb2,0x6b,0x67,0x35,0xcf,0x76,0xef,0x79,0xee,
    0xef,0xf5,0xf6,0xfd,0x5e,0xf7,0xf5,0xdc,0x90,0xa4,0x77,0xe5,0x43,0x48,0x85,0xca,
    0x50,0x11,0x7e,0x0f,0xa5,0xdf,0xe6,0x90,0x16,0x24,0x84,0xaa,0x90,0x8b,0xcf,0x43,
    0x87,0x8f,0x1d,0x6e,0x3f,0x33,0x35,0xd6,0xde,0xf9,0x68,0x41,0xed,0x35,0x21,0x89,
    0x7e,0x6a,0xab,0x0d,0xf9,0x90,0x91,0xa7,0xae,0x89,0x93,0xc5,0x49,0xc5,0xab,0x65,
    0x5d,0x91,0x55,0x27,0x7e,0x8a,0xe7,0x35,0x87,0xbc,0x55,0xc7,0x9c,0x1a,0x13,0xc2,
    0xb3,0x21,0x1b,0x1a,0xa8,0xb7,0x8b,0xa7,0x61,0x29,0xb0,0x0a,0x87,0xa5,0xc1,0xea,
    0x1c,0x96,0x80,0x35,0x3a,0x2c,0x03,0x76,0xbf,0xc3,0xb2,0x60,0x0f,0x38,0x2c,0x07,
    0xf6,0x90,0xc3,0xf2,0x60,0xbb,0x1d,0x56,0x01,0xb6,0xc7,0x61,0x9b,0xc0,0xf6,0x3a,
    0xac,0x12,0xac,0xe0,0xb0,0x2a,0xb0,0x4e,0x87,0xdd,0x07,0xd6,0xe5,0xb0,0x6a,0xb0,
    0x27,0x62,0x9f,0x92,0xbb,0x7a,0xb5,0x67,0x07,0xe5,0xb9,0x93,0xfe,0xd8,0x7e,0x87,
    0xdb,0x6b,0x9f,0xb7,0xb3,0x6f,0x90,0xa8,0x74,0xb4,0x27,0xb1,0x37,0xfa,0xbe,0x45,
    0x7c,0x72,0xe8,0xd4,0xbe,0x36,0xc9,0x3e,0x8f,0x7e,0xb5,0x6f,0x15,0xcf,0x4a,0xec,
    0x6a,0xab,0x42,0x4b,0x26,0x62,0x99,0xc8,0x37,0x85,0x96,0x1e,0xf6,0xd5,0x2e,0x57,
    0x0d,0xfe,0x56,0xab,0x9e,0x5c,0x21,0xf2,0xaa,0xbb,0xdb,0x57,0xab,0xa9,0xab,0xfe,
    0x1e,0xcb,0x7c,0xb4,0x7e,0x23,0xfd,0x6e,0xa0,0x7e,0x63,0xac,0x53,0xc2,0xda,0xd0,
    0xb6,0x15,0x3e,0xea,0xdf,0x84,0x2d,0xef,0xec,0x2d,0x4e,0xcf,0x76,0xec,0xf5,0x71,
    0x6e,0xd2,0xb1,0x97,0x6d,0xf0,0xb6,0x3e,0x5b,0x5c,0x1b,0xb3,0x63,0xfb,0xfd,0x68,
    0x57,0xdd,0xbd,0xe4,0xd0,0xbc,0xcd,0x92,0xb1,0x8f,0x7d,0x2a,0xfc,0xfb,0x4b,0xb9,
    0xbd,0xd6,0x7e,0x8a,0xf7,0x3e,0xb4,0xe8,0xfe,0x60,0x59,0xcd,0xfe,0xb2,0xfd,0x00,
    0xbd,0xd5,0xf8,0x23,0x70,0xcf,0x39,0xfb,0x20,0x7b,0xe5,0xf4,0x0a,0x1c,0x12,0x67,
    0x1f,0xa3,0x17,0x6a,0x9f,0xc6,0x37,0xe3,0xec,0xb3,0xcc,0xb8,0xed,0x2f,0x96,0xf5,
    0xf6,0x12,0x33,0xab,0xf5,0x2f,0x93,0x7b,0x1a,0xfe,0x97,0xf9,0xce,0x93,0xd8,0x9b,
    0x6c,0xe4,0x99,0x81,0xbf,0x62,0x7f,0x0a,0xa2,0xfd,0x3b,0xc0,0x5c,0xd5,0xd2,0xbf,
    0xe7,0x85,0x51,0x0d,0xdf,0x72,0x2d,0xcb,0xfa,0x35,0xc9,0x7c,0x6e,0xc6,0xde,0x27,
    0x19,0x9a,0xf8,0x9e,0xb7,0x70,0xd6,0x07,0xf0,0x69,0x06,0x9f,0x17,0x1f,0xdd,0x6f,
    0x23,0xae,0x99,0x38,0x3d,0xeb,0x07,0x89,0x6b,0x21,0xce,0xe6,0x53,0xf1,0xaf,0xc5,
    0x67,0x87,0xbb,0x07,0xf4,0xfc,0x6f,0x0b,0xf3,0x56,0xf8,0xfc,0x25,0xfe,0x76,0x1f,
    0xb4,0xa2,0x47,0xdf,0x8f,0x4a,0x5c,0x8e,0x3b,0x61,0x1b,0xbe,0xe7,0xe8,0xd7,0xc3,
    0xe0,0x83,0xb2,0x53,0x4e,0xdf,0x82,0x99,0xdf,0x1d,0xc9,0x61,0xb9,0xf4,0xf9,0x87,
    0x78,0xa9,0xdf,0xcf,0xf8,0x64,0x89,0xd9,0xed,0x34,0xec,0x45,0x43,0x9b,0xd3,0xb0,
    0x0f,0xdc,0x34,0xb4,0x83,0x99,0x86,0x82,0xd3,0xa0,0xb6,0x0e,0xee,0x26,0xad,0xdb,
    0xe1,0x34,0x3c,0x42,0xed,0x94,0xd3,0xd0,0x09,0x6e,0x1a,0xbe,0x03,0x33,0x3f,0xd5,
    0x60,0xb9,0x0a,0x4e,0xc3,0x55,0x7c,0x5a,0x89,0xe9,0x70,0x1a,0x1e,0x43,0xc3,0x7e,
    0xa7,0xa1,0x0b,0xdc,0x34,0x3c,0x0e,0x66,0x1a,0x7a,0x9c,0x06,0xb5,0x75,0xc7,0xb9,
    0x2b,0xd5,0xed,0x66,0x8e,0xf2,0x31,0x5f,0xa9,0xf6,0x55,0xf7,0xbd,0x29,0x47,0xf3,
    0xed,0x71,0x1c,0xaf,0xe1,0x57,0x20,0xae,0x1b,0x3e,0xfa,0x4d,0x3e,0xcd,0xf7,0x68,
    0x33,0xf7,0x0c,0x9c,0xfb,0xdd,0xcc,0x1d,0x02,0x3f,0xcf,0xcc,0x3d,0x07,0x76,0x8d,
    0xb8,0x23,0x91,0x57,0x29,0x6e,0x80,0x38,0xed,0xe9,0x0b,0xe0,0x23,0x12,0xd5,0x1b,
    0xfb,0x5f,0xaa,0xa7,0xf1,0x4f,0x62,0xb7,0x5e,0x1d,0x23,0x7e,0xd0,0xf5,0xea,0x45,
    0x70,0xeb,0xd5,0x4b,0x60,0xd6,0xab,0x61,0xd7,0x2b,0xb5,0x0d,0xc9,0x1a,0x45,0xff,
    0x10,0xe7,0xad,0x79,0x5e,0xa6,0x76,0x12,0xf9,0x54,0xc4,0x3b,0xe3,0x38,0xd8,0x51,
    0xf7,0x1d,0xa6,0x23,0xa7,0x5c,0xb4,0x8f,0x10,0x67,0xeb,0x5d,0xc9,0xa5,0xf8,0x09,
    0x62,0x47,0x62,0xae,0x4d,0x51,0xd7,0x29,0xf2,0x9c,0xe0,0x2e,0xc8,0x72,0xe7,0x24,
    0x9c,0xc9,0x30,0x9c,0x46,0x9d,0xde,0x57,0xd1,0x3b,0xe6,0xf4,0xbe,0x06,0x6e,0x7a,
    0x5f,0x07,0x33,0xbd,0x45,0xa7,0x57,0x6d,0xe3,0xb2,0x8a,0xe4,0x1e,0x77,0x7a,0xdf,
    0x70,0x7a,0xbf,0x21,0xd7,0x9b,0xe0,0x3b,0xe1,0x64,0x71,0x45,0xe6,0x44,0x7d,0x26,
    0xa8,0x39,0x8a,0xff,0x38,0x75,0x4f,0xbb,0xba,0x13,0xf1,0xbe,0x0a,0x11,0xd3,0xf8,
    0x49,0x57,0xf7,0xad,0xff,0xe8,0xf3,0x99,0x7b,0xf4,0x79,0x8a,0x38,0x5b,0xef,0xd1,
    0xe7,0xb3,0xc4,0x4e,0xb9,0x3e,0xbf,0x4d,0x9e,0xb3,0xff,0xd3,0x67,0xe3,0x74,0x1a,
    0x4d,0x1a,0xf3,0x2b,0x31,0x45,0xe2,0x27,0xcb,0xce,0x64,0xd8,0xf9,0xfe,0xc2,0x59,
    0x0e,0x11,0xa7,0x79,0x66,0xf8,0x1b,0x32,0x83,0xdd,0xce,0xef,0x1c,0xe7,0x37,0xeb,
    0xce,0xef,0x1d,0x70,0x3b,0xbf,0xf3,0x60,0x76,0x7e,0xf3,0xae,0x8f,0x6a,0x9b,0x93,
    0x75,0x01,0x1e,0x73,0xe8,0x9c,0x8e,0x3d,0x28,0xd5,0x9b,0x41,0x67,0x9e,0x9e,0x99,
    0xce,0x79,0x62,0x2e,0x38,0x3e,0xef,0xc3,0xe7,0xa2,0xe3,0xf3,0x01,0xb8,0xf1,0xf9,
    0x10,0xcc,0xf8,0x2c,0x3a,0x3e,0x6a,0x5b,0x90,0xb5,0x44,0xee,0x05,0x77,0x5f,0x7e,
    0x04,0x97,0x84,0xfb,0x51,0x39,0x7e,0xef,0x70,0xbb,0x7b,0x16,0x89,0x5d,0x72,0xf7,
    0xc2,0xc7,0xf0,0xba,0xe4,0xee,0x85,0x4f,0xc0,0x6f,0x92,0xff,0x53,0xb0,0x01,0xc7,
    0xf5,0x33,0xf0,0x7e,0xb8,0xae,0x38,0xae,0x6a,0x5b,0x96,0xb5,0x42,0xbd,0x65,0xc7,
    0xeb,0x07,0x62,0x66,0xdc,0xbd,0x6d,0x7e,0x2b,0x9c,0xb5,0xfa,0x5d,0xc7,0x67,0x89,
    0x98,0x65,0xc7,0xe7,0x73,0xf8,0xb4,0x38,0x3e,0x5f,0x80,0x1b,0x9f,0x35,0xc7,0x47,
    0x6d,0xab,0xb2,0xd6,0xa8,0xb3,0xea,0xf8,0xfc,0x48,0xcc,0x75,0xce,0x50,0xf9,0x98,
    0xdf,0x9a,0xe3,0x73,0x03,0x9f,0x15,0x62,0x56,0x1d,0x9f,0x2f,0xe1,0x33,0xeb,0xf8,
    0x7c,0x05,0x6e,0x7c,0x36,0x1c,0x1f,0xb5,0xad,0xcb,0xda,0xa0,0xce,0xba,0xe3,0xf3,
    0x13,0xff,0x4f,0xdc,0x70,0xf3,0x64,0x7e,0x1b,0x8e,0xcf,0x2d,0x7c,0xd6,0x88,0x59,
    0x2f,0x3b,0xe3,0x45,0xe7,0x7b,0x93,0x79,0x58,0x20,0x6e,0xa3,0x6c,0x4e,0xe7,0x9d,
    0xef,0x6f,0xcc,0xf7,0x1c,0x71,0x9a,0xa7,0x57,0x98,0x5c,0xc1,0xf6,0xb7,0x9c,0x5a,
    0x97,0xac,0x7f,0x00,0xfe,0xc5,0x7a,0xb7,0xa4,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
