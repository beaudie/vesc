// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000049.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000049[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd6,0x65,
    0x14,0xc7,0xaf,0xfb,0xfe,0xdd,0x0f,0x08,0xf1,0x20,0xa0,0x84,0x85,0xe5,0x03,0x5b,
    0x0d,0x83,0x7b,0x8b,0x8c,0x20,0x5d,0x98,0xa1,0x6b,0x0e,0x2d,0xac,0xe0,0x45,0x0f,
    0x38,0xb0,0x84,0x49,0x30,0x4b,0x97,0x6b,0x60,0xc2,0x5a,0x5a,0xc1,0x1a,0xd3,0xa6,
    0xb0,0x15,0xbc,0x28,0x18,0xbc,0x68,0xf3,0x55,0x6b,0xad,0x74,0x25,0x3d,0xfc,0x3d,
    0xad,0x87,0xad,0xad,0x73,0xae,0xfb,0x73,0xec,0xec,0x5e,0x4d,0xb6,0x6b,0xbf,0xfb,
    0xfa,0x9e,0xa7,0xef,0xf7,0x5c,0xe7,0xba,0x34,0x49,0xef,0xca,0x87,0x90,0x0a,0xe5,
    0xa1,0x2c,0xfc,0x1a,0x8a,0x7f,0x9b,0x43,0x5a,0x90,0x10,0x2a,0x42,0x2e,0x7e,0x0f,
    0x1d,0xe9,0x3b,0xd2,0x7a,0xe6,0xad,0xa1,0xd6,0xf6,0xc7,0x0a,0x6a,0xaf,0x0a,0x49,
    0xf4,0x53,0x5b,0x75,0xc8,0x87,0x8c,0x7c,0x75,0x9d,0x1e,0x3c,0x35,0xa6,0x78,0xa5,
    0xac,0x75,0x59,0x35,0xe2,0xa7,0x78,0x5e,0x73,0xc8,0xaf,0xca,0x98,0x53,0x63,0x42,
    0x38,0x1c,0xb2,0xa1,0x8e,0x7a,0xbb,0xf8,0x1a,0x96,0x02,0x2b,0x73,0x58,0x1a,0xac,
    0xc6,0x61,0x09,0x58,0xbd,0xc3,0x32,0x60,0xf7,0x3a,0x2c,0x0b,0x76,0xbf,0xc3,0x72,
    0x60,0x0f,0x3a,0x2c,0x0f,0xb6,0xdb,0x61,0x65,0x60,0x0f,0x39,0x6c,0x13,0xd8,0x1e,
    0x87,0x95,0x83,0x15,0x1c,0x56,0x01,0xd6,0xee,0xb0,0x7b,0xc0,0x3a,0x1c,0x56,0x09,
    0xf6,0x64,0xec,0x53,0x72,0x47,0xaf,0xf6,0xec,0xa0,0x7c,0x77,0xd2,0x1f,0xdb,0xef,
    0x70,0x7b,0xed,0xf3,0x76,0xf6,0x75,0x12,0x95,0x8e,0xf6,0x24,0xf6,0x46,0x7f,0x6f,
    0x11,0x9f,0x1c,0x3a,0xb5,0xaf,0x0d,0xb2,0xcf,0xa3,0x5f,0xed,0x5b,0xc5,0xb3,0x1c,
    0xbb,0xda,0x2a,0xd0,0x92,0x89,0x58,0x26,0xf2,0x4d,0xa1,0xa5,0x8b,0x7d,0xa5,0xcb,
    0x55,0x85,0xbf,0xd5,0xaa,0x25,0x57,0x88,0xbc,0x6a,0xee,0xf4,0xd5,0x6a,0xea,0xaa,
    0xbd,0xcb,0x32,0x1f,0xad,0x5f,0x4f,0xbf,0xeb,0xa8,0x5f,0x1f,0xeb,0x14,0xb1,0x16,
    0xb4,0x6d,0x85,0x8f,0xfa,0x37,0x60,0xcb,0x3b,0x7b,0x93,0xd3,0xb3,0x1d,0x7b,0x6d,
    0x9c,0x9b,0x74,0xec,0x65,0x0b,0xbc,0xad,0xcf,0x16,0xd7,0xc2,0xec,0xd8,0x7e,0x2f,
    0xda,0x55,0xf7,0x7e,0x72,0x68,0xde,0x46,0xc9,0xd8,0xcd,0x3e,0x15,0xfe,0xfd,0x4b,
    0xb9,0xfd,0x7d,0xd2,0xe7,0x03,0xf2,0xed,0x86,0xc7,0xd3,0xe0,0x07,0xd0,0xa5,0xfb,
    0x83,0x25,0xf5,0x7b,0x4a,0xf6,0xbd,0xf4,0x59,0xe3,0x8f,0xa2,0x23,0xe7,0xec,0xc7,
    0xd9,0x2b,0xbf,0x57,0xe0,0x93,0x38,0xfb,0x49,0xfa,0xa2,0xf6,0xf3,0xf8,0x66,0x9c,
    0x7d,0x8a,0x79,0xb7,0xfd,0xe5,0x92,0x3e,0x5f,0x61,0x7e,0xb5,0xfe,0x1a,0xb9,0xcf,
    0xc3,0x7f,0x8d,0x3b,0x9f,0xc4,0x3e,0x65,0x23,0xcf,0x0c,0xfc,0x15,0xfb,0x43,0x10,
    0xed,0xe5,0x3e,0x66,0xac,0x9a,0x5e,0x1e,0x15,0x46,0x55,0xdc,0xeb,0x6a,0x96,0xf5,
    0x6e,0x8c,0x59,0xdd,0x8c,0xbd,0x5b,0x32,0x34,0x70,0xb7,0xb7,0x70,0xee,0xfb,0xf0,
    0x69,0x04,0xbf,0x28,0x3e,0xba,0xdf,0x46,0x5c,0x23,0x71,0x7a,0xee,0x0f,0x10,0xd7,
    0x44,0x9c,0xcd,0xaa,0xe2,0x6b,0xe2,0xb3,0xc3,0xbd,0x09,0x3a,0x0b,0xbf,0x0b,0xf3,
    0x66,0xf8,0xfc,0x25,0xfe,0xf6,0x36,0x34,0xa3,0x47,0x7f,0x3f,0x27,0x71,0x39,0xde,
    0x87,0x6d,0xf8,0x4e,0xd2,0xaf,0x87,0xc1,0x9f,0x97,0x9d,0x72,0xfa,0x0a,0xcc,0xfc,
    0xfe,0x94,0x1c,0x96,0x4b,0xbf,0xbf,0x89,0x97,0xfa,0x7d,0x8f,0x4f,0x96,0x98,0xdd,
    0x4e,0xc3,0x1e,0x34,0xb4,0x38,0x0d,0x8f,0x80,0x9b,0x86,0x56,0x30,0xd3,0x50,0x70,
    0x1a,0xd4,0xd6,0xc6,0x3b,0xa5,0x75,0xdb,0x9c,0x86,0x47,0xa9,0x9d,0x72,0x1a,0xda,
    0xc1,0x4d,0xc3,0x0d,0x30,0xf3,0x53,0x0d,0x96,0xab,0xe0,0x34,0xdc,0xc4,0xa7,0x99,
    0x98,0x36,0xa7,0xe1,0x71,0x34,0xec,0x75,0x1a,0x3a,0xc0,0x4d,0xc3,0x13,0x60,0xa6,
    0xa1,0xcb,0x69,0x50,0x5b,0x67,0x9c,0xbb,0x62,0xdd,0x4e,0xe6,0x28,0x1f,0xf3,0x15,
    0x6b,0xdf,0x74,0x77,0x4f,0x39,0x9a,0x6f,0x97,0xe3,0x78,0x0b,0xbf,0x02,0x71,0x9d,
    0xf0,0xd1,0x3b,0xf9,0x0c,0xf7,0xd1,0x66,0xee,0x10,0x9c,0x7b,0xdc,0xcc,0x1d,0x06,
    0xbf,0xc0,0xcc,0x3d,0x0b,0x76,0x8b,0x38,0xbd,0xa3,0xc7,0x88,0xeb,0x25,0x2e,0x17,
    0xfb,0x5d,0xc4,0x87,0x64,0xdf,0x1d,0x7b,0x5b,0xac,0xf7,0xaa,0x64,0xd1,0x77,0xa5,
    0x0f,0x4c,0xf3,0x3d,0x85,0xbf,0xf5,0xee,0x05,0xf2,0x1d,0x77,0xbd,0x7b,0x11,0xdc,
    0x7a,0xf7,0x12,0x98,0xf5,0x6e,0xc0,0xf5,0x4e,0x6d,0xfd,0xb2,0x86,0xe9,0x47,0x3f,
    0xe7,0xaf,0x79,0x5e,0xa6,0x76,0x12,0xfb,0x59,0x16,0xdf,0x90,0xd7,0xc0,0xfa,0xdc,
    0xbd,0x4c,0x47,0xfe,0xb9,0x68,0x1f,0x24,0xce,0xd6,0x8c,0xe4,0x52,0xfc,0x04,0xb1,
    0x83,0x31,0xd7,0xa6,0xa8,0x6b,0x88,0x3c,0x27,0x78,0x1b,0xb2,0xbc,0x41,0x09,0x67,
    0x34,0x00,0xa7,0x61,0xa7,0xf7,0x75,0xf4,0x9e,0x74,0x7a,0xdf,0x00,0x37,0xbd,0xa7,
    0xc0,0x4c,0xef,0xa8,0xd3,0xab,0xb6,0x11,0x59,0xa3,0xe4,0x1e,0x71,0x7a,0x4f,0x3b,
    0xbd,0xeb,0xe4,0x1a,0x03,0xdf,0x09,0x27,0x8b,0x1b,0x65,0x6e,0xd4,0xe7,0x4d,0x6a,
    0x0e,0xe3,0x3f,0x42,0xdd,0x09,0x57,0x57,0x7d,0xc6,0x65,0x4d,0x10,0x3f,0xee,0xea,
    0x9e,0xf9,0x8f,0x3e,0xbf,0x7d,0x97,0x3e,0x9f,0x25,0xce,0xd6,0xfb,0xf4,0xf9,0x1c,
    0xb1,0x67,0x5d,0x9f,0xdf,0x21,0xcf,0xb9,0xff,0xe9,0xb3,0x71,0x9a,0x40,0x93,0xc6,
    0xfc,0x48,0xcc,0x28,0xf1,0xe3,0x25,0x67,0x32,0xe0,0x7c,0x7f,0xe0,0x2c,0xfb,0x89,
    0xd3,0x3c,0xef,0xf2,0x6f,0xca,0x24,0x76,0x3b,0xbf,0x0b,0x9c,0xdf,0x94,0x3b,0xbf,
    0xf7,0xc0,0xed,0xfc,0x2e,0x82,0xd9,0xf9,0xcd,0xb8,0x3e,0xaa,0x6d,0x5a,0xd6,0x25,
    0x78,0x4c,0xa3,0x53,0x6b,0x7d,0x40,0xbd,0x49,0x74,0xe6,0xe9,0x99,0xe9,0x9c,0x21,
    0xe6,0x92,0xe3,0xf3,0x21,0x7c,0x2e,0x3b,0x3e,0x1f,0x81,0x1b,0x9f,0x8f,0xc1,0x8c,
    0xcf,0x9c,0xe3,0xa3,0xb6,0x59,0x59,0xf3,0xe4,0x9e,0x75,0xef,0xe7,0x27,0x70,0x49,
    0x78,0x2f,0x95,0xe3,0xd7,0x0e,0xb7,0xb7,0x68,0x8e,0xd8,0x79,0xf7,0x4e,0x5c,0x85,
    0xd7,0x15,0xf7,0x4e,0x7c,0x0a,0xbe,0x41,0xfe,0x6b,0x60,0xbd,0x8e,0xeb,0x75,0xf0,
    0x1e,0xb8,0x2e,0x3a,0xae,0x6a,0x5b,0x90,0xb5,0x48,0xbd,0x05,0xc7,0xeb,0x1b,0x62,
    0x26,0xdd,0x3b,0x6e,0x7e,0x8b,0x9c,0xb5,0xfa,0xdd,0xc6,0x67,0x9e,0x98,0x05,0xc7,
    0xe7,0x33,0xf8,0x34,0x39,0x3e,0x9f,0x83,0x1b,0x9f,0x65,0xc7,0x47,0x6d,0x4b,0xb2,
    0x96,0xa9,0xb3,0xe4,0xf8,0x7c,0x4b,0xcc,0x6d,0xce,0x50,0xf9,0x98,0xdf,0xb2,0xe3,
    0xb3,0x81,0xcf,0x22,0x31,0x4b,0x8e,0xcf,0x17,0xf0,0x99,0x72,0x7c,0xbe,0x04,0x37,
    0x3e,0xab,0x8e,0x8f,0xda,0x56,0x64,0xad,0x52,0x67,0xc5,0xf1,0xf9,0x8e,0xff,0x5f,
    0x6c,0xb8,0x79,0x32,0xbf,0x55,0xc7,0xe7,0x17,0x7c,0x96,0x89,0x59,0x29,0x39,0xe3,
    0x39,0xe7,0xfb,0x33,0xf3,0x30,0x4b,0xdc,0x6a,0xc9,0x9c,0xce,0x38,0xdf,0x9f,0x98,
    0xef,0x69,0xe2,0x34,0xcf,0x7e,0x61,0xb2,0x8e,0xed,0x6f,0x39,0xb5,0x0e,0x59,0xff,
    0x00,0x99,0xd7,0x4a,0x71,0xc0,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
