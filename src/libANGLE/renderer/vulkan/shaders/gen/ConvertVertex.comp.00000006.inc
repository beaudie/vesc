// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0xf7,0xf7,0x1b,0x33,0x63,0x37,0x96,0x41,0x63,0x9b,0x66,0x68,0x30,
    0x98,0x84,0x2c,0xe9,0x20,0x59,0x4a,0xa5,0x84,0x43,0x8b,0xa6,0xa6,0xbd,0x89,0xa2,
    0x94,0x24,0xd9,0x22,0x4b,0x2a,0x4b,0x68,0xa1,0x94,0x2c,0xd9,0x4b,0x85,0xb4,0x70,
    0x72,0x8e,0x0a,0x69,0xd3,0x5e,0x3a,0x87,0x2c,0x6d,0x4a,0x52,0xd2,0x73,0xdf,0xf7,
    0x73,0x9b,0xeb,0x69,0xfe,0xea,0x77,0xce,0x73,0xde,0xf7,0x7e,0xef,0xfa,0xdc,0x7b,
    0x9f,0xe5,0xf7,0x26,0x13,0x39,0x69,0x41,0x32,0x0c,0xca,0x05,0xe9,0x41,0x41,0x18,
    0x44,0xbf,0x8c,0x20,0x11,0xc8,0x6b,0xf9,0x20,0x35,0x7a,0x76,0xef,0xd5,0xa7,0x57,
    0xf3,0xa1,0xc3,0x8a,0x9a,0xb7,0x6a,0x5d,0x20,0xfc,0x4a,0x41,0x32,0x92,0x13,0x5e,
    0x65,0x27,0x53,0xc6,0x3d,0x53,0xdc,0x28,0x2e,0xbc,0xf1,0x56,0xc1,0x0f,0xb9,0x51,
    0xc5,0xe1,0x29,0x91,0xad,0x20,0xe8,0x84,0xac,0x8c,0x1e,0x4e,0xba,0x61,0xec,0x26,
    0xc8,0xe1,0xa9,0x58,0x08,0x96,0x62,0xb0,0x04,0x58,0xba,0xc1,0x92,0x60,0x15,0x0c,
    0x96,0x02,0x56,0xc5,0x60,0x65,0xc0,0xaa,0x1b,0x2c,0x15,0xac,0x96,0xc1,0xd2,0xc0,
    0xea,0x18,0x2c,0x1d,0xac,0x81,0xc1,0xca,0x82,0xe5,0x1a,0xac,0x1c,0x58,0x9e,0xc1,
    0xca,0x83,0xe5,0x1b,0xac,0x02,0x58,0x81,0xc1,0x2a,0x82,0xb5,0x32,0x58,0x25,0xb0,
    0xb6,0x92,0x77,0x37,0x53,0xcd,0x41,0x77,0x37,0xc3,0xab,0x88,0x5f,0xf3,0x53,0xe8,
    0xe5,0x51,0xe4,0x0b,0x8d,0xfc,0x35,0xee,0x79,0xea,0xbf,0xbc,0x98,0xce,0x26,0xcf,
    0x42,0xef,0xf5,0xec,0xed,0x2b,0xc5,0xde,0x3e,0x63,0x6f,0xbf,0x67,0x6f,0x3f,0xf6,
    0x94,0x3e,0xc4,0xdc,0xeb,0x40,0xb7,0x08,0x63,0xba,0xb6,0x1b,0xd5,0x9c,0x95,0x44,
    0x24,0x9f,0x8c,0xea,0x27,0xef,0x35,0x9c,0x4c,0x2a,0x39,0x0e,0xa2,0x67,0x4a,0x54,
    0x8b,0x34,0xe2,0xca,0x76,0x31,0xa5,0xf3,0xae,0x78,0xa6,0xd3,0xce,0x40,0x27,0xdb,
    0xc9,0x57,0xa5,0xc7,0xd2,0xd0,0xcf,0xe4,0x3d,0x03,0x7e,0x4d,0xde,0x33,0xb1,0x97,
    0x65,0xec,0x65,0x22,0xd3,0x80,0x78,0x04,0xab,0xe7,0xa4,0xb5,0x4f,0xfe,0xef,0x90,
    0x38,0x1a,0xd1,0x2f,0x62,0xab,0x03,0xf4,0x69,0x60,0x32,0xef,0x3c,0xe6,0x20,0xb5,
    0x68,0x0a,0xdd,0xd8,0xe8,0x37,0x41,0x36,0x15,0xbe,0x3c,0x5b,0x50,0x2b,0x95,0x6f,
    0x49,0xdc,0xca,0xef,0x40,0xdf,0x2a,0xbf,0x8b,0x47,0xf7,0x42,0xbf,0xba,0xd3,0xba,
    0xc8,0xe8,0x5d,0xc2,0x9a,0x12,0x5a,0x72,0xd5,0x9f,0x7a,0xd4,0x75,0xa8,0xf6,0x5c,
    0x3d,0x7a,0xeb,0x2a,0xe2,0xbb,0x9a,0x9e,0x2e,0x64,0x7e,0x42,0x5f,0x03,0xa6,0xfe,
    0x8a,0x4c,0x5d,0xaf,0x87,0x97,0x6a,0xf8,0x37,0xb1,0x06,0x34,0x8e,0x62,0xe4,0x95,
    0x3f,0x8c,0xf5,0xa5,0xf4,0x08,0x13,0xa7,0xd0,0xf7,0xb8,0x71,0x22,0x59,0x42,0x8f,
    0x62,0xfd,0xa8,0xbd,0xf1,0x46,0x5f,0xe8,0xe9,0x5e,0xbe,0xe6,0x51,0x03,0x89,0xef,
    0x49,0xea,0x9f,0x67,0xec,0x3f,0x2d,0xf6,0xdd,0x4f,0xe9,0x85,0x5e,0xbd,0xd6,0x9a,
    0xf9,0x4a,0xde,0x5e,0x8b,0xa2,0x1f,0x7d,0xa6,0xf2,0xb7,0x51,0x43,0xf5,0xb7,0xcb,
    0xd3,0xff,0x88,0xfd,0xaa,0xa6,0xa3,0x3f,0xa3,0x4f,0x13,0xe4,0x7d,0xaf,0xc9,0xbb,
    0xac,0xc1,0xbd,0xc4,0xf9,0x3d,0x3e,0xf7,0x91,0x77,0xa1,0xf7,0x83,0x89,0x9d,0x03,
    0xe8,0x25,0x91,0x3f,0x88,0xcf,0x03,0xc8,0x1f,0x64,0x7f,0x0e,0xe1,0xff,0xc0,0xbb,
    0xad,0x4b,0x1a,0xeb,0x56,0xe3,0x6e,0x1e,0xc6,0x7b,0x78,0xbe,0xa3,0xc4,0x8e,0xac,
    0x6b,0xc1,0x76,0x31,0xa7,0x36,0x6e,0x5d,0x25,0xe8,0xad,0x00,0xdf,0x47,0x1d,0x52,
    0x06,0x9f,0x92,0xd7,0x13,0xe4,0x57,0x69,0x71,0x6a,0xe9,0xf2,0x86,0x96,0x75,0x79,
    0x8a,0xc7,0xcf,0xf2,0xf8,0xf5,0x3c,0xba,0xbe,0x27,0x7f,0xaa,0xc7,0xcf,0xf5,0xf8,
    0x4d,0xa1,0x3b,0xbb,0x28,0x25,0x07,0xbf,0x93,0x17,0xe9,0xc1,0x8e,0xcc,0xfb,0x28,
    0xb8,0xc8,0xc8,0x7a,0xfc,0x83,0x35,0x5c,0x64,0x64,0x8e,0x81,0x2f,0x77,0x32,0xb2,
    0xa6,0xfe,0x44,0xef,0x58,0xa4,0x9b,0x0c,0x8e,0x93,0x93,0x63,0x4e,0x5e,0x78,0x7f,
    0xb9,0x71,0x9c,0xfc,0xc4,0xef,0x61,0xf4,0x2e,0xd8,0xd9,0x4e,0xfe,0x04,0x31,0xc8,
    0xbb,0xe4,0xa8,0x38,0xb2,0xef,0xce,0xe3,0x30,0xd6,0x91,0xe7,0x11,0x67,0xcb,0x1d,
    0xd9,0x41,0x0a,0xe7,0xb5,0xf0,0xcb,0xc0,0x97,0xa7,0xc6,0x96,0xca,0xa1,0xab,0xf1,
    0xa7,0x87,0x71,0xfc,0x69,0x46,0xa6,0x6c,0x18,0xe3,0x2b,0x89,0xbf,0x5c,0x18,0xeb,
    0x09,0x2e,0x31,0x0b,0x9d,0x70,0x23,0x89,0xfd,0x44,0x58,0x92,0xb3,0x0a,0xe1,0x7f,
    0x73,0x56,0x31,0x8c,0x71,0xf5,0x59,0xa9,0x14,0x9f,0x95,0xc3,0x18,0x1f,0xe7,0x64,
    0x84,0xae,0x12,0xc6,0x7a,0x95,0x8d,0x4c,0x06,0xb1,0x8f,0x46,0xa6,0x6a,0x18,0xcb,
    0x09,0x2e,0xb9,0x91,0x7e,0xa9,0x6a,0xe4,0xab,0x85,0x71,0x0f,0xa9,0xdf,0xea,0xf8,
    0x5d,0x68,0x62,0xab,0x11,0xc6,0xb8,0xd6,0x2a,0x33,0x8c,0xf5,0x04,0x97,0x5a,0xd5,
    0x0a,0x4b,0x6a,0x25,0xbc,0x9a,0x6e,0xd4,0x62,0xde,0xf2,0x2e,0x79,0xd6,0x3c,0xd4,
    0x32,0xbe,0xeb,0xe0,0x5b,0xe2,0x92,0x3e,0x15,0xba,0x9d,0xf3,0x21,0xeb,0xb9,0x6e,
    0x18,0xdf,0x3f,0xb2,0xe0,0x4b,0x5f,0xd7,0x45,0x37,0x3a,0xc7,0xc2,0xb8,0xd7,0x85,
    0x27,0x3d,0xdc,0xc0,0xe8,0x66,0x87,0xf1,0xd9,0x59,0x1f,0xbe,0xf4,0x7c,0xb6,0xf1,
    0x9b,0x63,0xfc,0x4a,0xbf,0xe7,0x18,0xbb,0x0d,0xc3,0x78,0x8d,0x08,0x4f,0x7a,0xbf,
    0x61,0x64,0x37,0x35,0xd2,0x6b,0x24,0x3c,0xd6,0x48,0xae,0xb1,0x77,0x5a,0x18,0xaf,
    0xd3,0x2d,0xe4,0x3c,0x2f,0x8c,0xb1,0x46,0x61,0x49,0x6f,0xe6,0x91,0x87,0x14,0xf2,
    0x90,0x62,0xf4,0x1b,0x7b,0x35,0x6b,0x12,0xc6,0xd8,0x42,0xd3,0xcf,0x4d,0xc2,0x93,
    0xfb,0x39,0x69,0xf4,0xf3,0xf1,0x2f,0xb2,0xb2,0x3e,0xf3,0xc9,0x85,0xec,0x2d,0xcd,
    0xc2,0xf8,0xee,0x21,0xb8,0xac,0x99,0xb6,0x6e,0xb4,0xc1,0x4f,0x79,0xd6,0x98,0x9c,
    0x75,0x67,0x3a,0xdd,0x34,0xf6,0x5d,0x7d,0x2f,0xc7,0x7a,0xab,0x60,0x7a,0x21,0x17,
    0x19,0xed,0x97,0xa6,0xac,0xed,0xc6,0x46,0x26,0x1f,0x5c,0xfb,0xb4,0x19,0x7a,0xf9,
    0x46,0xa6,0x39,0xf6,0x55,0xa6,0x00,0x4c,0xce,0x6a,0xcd,0xc3,0xe9,0xe8,0x16,0x18,
    0x7f,0x67,0xe0,0xaf,0xa5,0xb1,0xd5,0x0a,0x5c,0xf5,0x5a,0xa3,0x2b,0xf8,0xdf,0x2e,
    0xfe,0xd6,0xd1,0xbd,0xb0,0x64,0xde,0x95,0x4b,0x99,0x77,0x45,0xf3,0x5e,0x89,0x79,
    0x57,0x31,0xfb,0x5e,0x5b,0xf6,0x61,0xf5,0xd9,0x0e,0x9d,0x49,0xd8,0x6c,0x0f,0xd6,
    0xc2,0xcc,0xe9,0x2c,0xf0,0x0e,0xd4,0xa6,0x2d,0x98,0xda,0xe8,0x88,0x5d,0x89,0xb1,
    0xa3,0x89,0x31,0x83,0xbb,0xb7,0xfc,0xaa,0x9a,0xb8,0xaa,0x11,0x57,0x0d,0x13,0x57,
    0x27,0xef,0x7c,0xe8,0xe6,0xd1,0x03,0x3c,0x7a,0xa0,0x47,0x5f,0xee,0xd1,0x83,0x3c,
    0xfa,0x36,0x8f,0x1e,0xee,0xd1,0xe3,0x3c,0x7a,0xb2,0x47,0xcf,0xf6,0xe8,0x39,0x86,
    0x96,0xbb,0xc3,0x53,0x1e,0x7f,0x4d,0x70,0xf2,0xf9,0xb3,0xd1,0xa3,0x37,0x79,0x75,
    0xe8,0x4c,0x5e,0xb4,0x3f,0xce,0xa1,0x3f,0xba,0x18,0x99,0xae,0xe0,0x13,0xa8,0xcb,
    0xb9,0xe8,0x75,0xa5,0x2e,0x9d,0xc0,0x54,0xbe,0xbb,0x67,0xb3,0x47,0x29,0x36,0x7b,
    0x82,0x6b,0xfd,0xcf,0x43,0xaf,0x27,0x36,0xbb,0x81,0xa9,0xfc,0xf9,0xd4,0x46,0x6d,
    0x5e,0x80,0xcd,0x5e,0x46,0xe6,0x42,0x70,0xdd,0x67,0x7b,0xa3,0x77,0xa1,0x91,0xb9,
    0x18,0x3b,0x7a,0xee,0xf4,0x01,0x93,0xbb,0xe8,0x22,0xb0,0x4b,0xd1,0xed,0xc3,0x59,
    0xda,0xcf,0x9c,0xa5,0xc2,0xeb,0xeb,0x46,0x3f,0x7a,0xa9,0x2f,0xfd,0xd7,0x1f,0xba,
    0x9f,0xf1,0x75,0x19,0xfd,0x25,0xf3,0x19,0x08,0xad,0xbc,0x2b,0x88,0x43,0x78,0x97,
    0x43,0xeb,0x3e,0x79,0x25,0x7b,0xcb,0x40,0xfa,0x4b,0x64,0x06,0x80,0xab,0xfe,0xb5,
    0xf4,0xa6,0xd6,0xe4,0x3a,0xb0,0x16,0x51,0x8e,0x52,0xa3,0x7b,0xef,0x0d,0xdc,0x8d,
    0x8b,0xe0,0xab,0xee,0x8d,0xf0,0xc4,0xee,0x20,0x68,0xcd,0xeb,0xcd,0xe4,0xf5,0x26,
    0x23,0x7f,0x0b,0xf8,0x52,0xf2,0x73,0x2b,0x58,0x31,0xf9,0x19,0x62,0xf2,0x23,0xbc,
    0xc1,0x6e,0xcc,0x22,0x1f,0x83,0x8d,0x9d,0xdb,0x99,0xf3,0x12,0xec,0x0c,0x05,0x93,
    0xdc,0x2f,0x76,0x12,0x72,0x07,0xbc,0x03,0xbc,0x25,0xf7,0xf0,0x91,0xe8,0xde,0x09,
    0x4f,0x62,0xbe,0x0d,0x5a,0xed,0xde,0xe5,0xd9,0xbd,0x1b,0xcc,0xda,0x1d,0x09,0x3e,
    0x82,0xfb,0xbb,0xda,0xbd,0x17,0x9e,0xd8,0x1d,0x0e,0xad,0xb9,0xb8,0x8f,0x5c,0x8c,
    0x32,0xbe,0x46,0x83,0x6b,0x2e,0xee,0x07,0xd3,0x5c,0x8c,0x35,0xb9,0x10,0xde,0x18,
    0x37,0x26,0x92,0x8b,0x31,0xc6,0xce,0x04,0x62,0xd6,0xbd,0xee,0x01,0xfe,0x37,0x4c,
    0x20,0x96,0x71,0x60,0x72,0x66,0x8d,0x45,0x7f,0xa2,0xd1,0x9f,0xe4,0xcd,0xf9,0x41,
    0xb0,0x4b,0x88,0x63,0xaa,0x89,0x43,0x78,0x53,0xdc,0x98,0x86,0x9d,0x29,0xf8,0x98,
    0x1c,0x94,0xdc,0xf3,0xa6,0xc2,0x9b,0x66,0x7c,0x3c,0xc4,0xfe,0xa5,0xf4,0xc3,0xf8,
    0x1c,0x43,0xcc,0x8f,0xf0,0xdf,0xe6,0x61,0x33,0x8f,0x47,0xd1,0x7b,0xc4,0x9c,0x27,
    0x33,0xc0,0xa7,0x1b,0xbf,0x33,0x3c,0xbf,0x53,0x8d,0x9f,0x99,0xec,0x83,0x9a,0x87,
    0x99,0x5e,0x1e,0xc6,0x42,0x0f,0x81,0x9e,0x65,0x74,0x1f,0x63,0x5d,0x88,0xee,0x6c,
    0x68,0x79,0x9f,0xc3,0xda,0xd0,0x35,0x36,0x97,0x73,0x6c,0x36,0x7b,0xaa,0xfa,0x9a,
    0x6b,0x7a,0x6c,0x9e,0xb1,0xfb,0x38,0xb9,0xd0,0x7c,0x3f,0x01,0x36,0x8f,0x7c,0x2f,
    0x30,0xf9,0x16,0xde,0x7c,0x37,0x9e,0x21,0xbe,0xf9,0xd8,0x7c,0x8a,0xff,0x76,0x12,
    0xfb,0x02,0x78,0xcf,0x18,0x1f,0xcf,0xe2,0x63,0xb3,0xf3,0x21,0x3d,0xfb,0x1c,0xf7,
    0xc8,0x67,0xc9,0x79,0x5e,0xb4,0x47,0x95,0xe0,0x6a,0x73,0x91,0x67,0x73,0x01,0x36,
    0x45,0xfe,0x79,0xce,0x08,0xed,0xf7,0xc5,0x60,0xda,0xef,0x8b,0xbd,0x5c,0x0e,0x31,
    0xf1,0x2c,0xf1,0xf6,0xdc,0xa5,0xa5,0xec,0xb9,0xcb,0xc0,0x75,0xcf,0x7d,0x01,0xbd,
    0x65,0x46,0x66,0xb9,0xd7,0xab,0x2b,0xc0,0xec,0x9e,0xbb,0x12,0xdd,0x15,0xe4,0x73,
    0xb5,0xc9,0xa7,0xf0,0x56,0xb9,0xb1,0x8e,0x18,0x57,0x99,0x98,0x5e,0x24,0xa6,0xb5,
    0xc6,0xdf,0x4b,0xe0,0x32,0xc7,0x35,0xd0,0x32,0xc7,0xd5,0xe8,0xaf,0x33,0xb2,0x2f,
    0x73,0x66,0x2b,0xfd,0x0a,0x67,0xf2,0x9b,0xf4,0xee,0xab,0xc8,0xbc,0x62,0x64,0xd6,
    0x73,0x8e,0xbf,0x8d,0xcc,0x06,0xe4,0xd6,0x1b,0x9f,0x1b,0x3c,0x9f,0xab,0xe1,0x6d,
    0xe4,0xff,0xba,0xda,0x7a,0x9d,0x33,0x7b,0x24,0xf5,0x7a,0x03,0x6c,0x30,0xf7,0xe9,
    0x37,0xc1,0xf4,0x7e,0xfd,0x16,0x67,0xfa,0x78,0xee,0x39,0x9b,0x91,0x79,0x0b,0xfb,
    0x9b,0xc0,0x54,0x7e,0x0b,0x67,0xbe,0x9c,0x51,0x5b,0xbc,0x3b,0x52,0x6d,0x72,0x5c,
    0x93,0x3b,0x52,0x26,0xdf,0x27,0x25,0xde,0x53,0x8c,0x8d,0xad,0xe0,0x62,0x63,0xab,
    0x77,0x17,0xac,0x87,0x8d,0x2c,0x73,0xcf,0xaa,0x63,0xec,0xd5,0xc5,0x5e,0x7d,0x73,
    0x47,0xd9,0xe9,0xdd,0x59,0x76,0x07,0x25,0xff,0x89,0xa5,0xa6,0xef,0x50,0xd3,0x6d,
    0x26,0x4f,0xef,0x82,0x6b,0x0f,0xbd,0x07,0x36,0x9d,0x7e,0xd9,0x61,0xfa,0x45,0x78,
    0xdb,0xdd,0xf8,0x1a,0xdf,0xdb,0x8d,0x9d,0xf7,0x89,0x4f,0x6b,0xf7,0x01,0xd8,0x2e,
    0x63,0xfb,0x43,0xf0,0x62,0x73,0x7e,0x7c,0x0c,0x5e,0xc4,0xf7,0x13,0x5d,0x4f,0x9f,
    0xc0,0x93,0xdc,0xef,0x84,0xd6,0xbc,0x7d,0xca,0xfc,0x7b,0x3b,0xbb,0xf2,0x9d,0xe5,
    0x73,0xb0,0xfe,0xd1,0x77,0x93,0x78,0x1f,0xfa,0x82,0xef,0x20,0xed,0xe1,0x6b,0x9c,
    0x5f,0x92,0xa7,0xcd,0xc4,0xf9,0x15,0xb2,0x5f,0xe2,0x6b,0x37,0x98,0xf4,0xd8,0x0e,
    0xe6,0xf9,0xb5,0xf1,0xfd,0x0d,0xbe,0xb5,0xaf,0xbe,0x05,0xd3,0xb8,0xf7,0x80,0xa9,
    0xad,0x3d,0x9e,0xad,0x1d,0x26,0x96,0xef,0xa8,0x91,0xd4,0xff,0x3b,0x53,0xff,0x84,
    0xf9,0x2e,0xdb,0xc0,0xd4,0x3f,0x1b,0x1b,0x39,0xe6,0x3b,0xc7,0x8f,0xa5,0x7c,0xe7,
    0xf8,0x09,0x5c,0xeb,0xfe,0x33,0x75,0x1f,0x61,0x64,0x7e,0x01,0xd7,0x7b,0xce,0x61,
    0x30,0xfb,0x3f,0xe7,0x57,0x6c,0x1d,0x36,0x7a,0xbf,0x11,0x87,0xde,0x85,0x8e,0xf0,
    0xbd,0xaa,0x08,0x79,0x99,0xf7,0x11,0xe4,0xf4,0x7f,0xdd,0x3f,0xb1,0x32,0xcb,0x4a,
    0x94,0x18,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float divisor = 1.0f / 65536.0f;
//           float value = int(valueAsUint)* divisor;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
