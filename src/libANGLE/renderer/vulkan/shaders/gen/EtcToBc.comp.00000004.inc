// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x0d,0x6c,0x96,0x57,
    0x15,0x7e,0xef,0xb9,0xfd,0xda,0x6e,0xc5,0x41,0x07,0x52,0xb1,0x9b,0xfc,0xcc,0x60,
    0x70,0x80,0xc0,0x66,0xe7,0x5a,0x18,0x9b,0x84,0xf9,0xd9,0xa0,0xb3,0xce,0x3a,0x63,
    0x8d,0x8c,0xd1,0x4d,0x81,0x16,0x8c,0x10,0x5d,0xcc,0xe2,0x70,0xc1,0x88,0x3a,0xa3,
    0xd3,0x6d,0x8c,0x31,0x42,0x36,0xc3,0x14,0x86,0xab,0x33,0x23,0x41,0x64,0x0a,0xa5,
    0xb4,0x1d,0x73,0x1b,0x3f,0x93,0xb1,0x25,0x66,0x3a,0xfc,0xc3,0x08,0x98,0xe0,0x70,
    0xfc,0xa5,0xde,0xf3,0x3e,0xcf,0xe1,0x3d,0x7c,0x99,0x4d,0x6e,0xdf,0xf7,0x3c,0xcf,
    0x39,0xe7,0x9e,0x73,0xee,0xdf,0x7b,0xbf,0x28,0x57,0xd5,0x64,0x31,0x64,0x97,0x66,
    0xb5,0xd9,0x8a,0x98,0xe5,0x7f,0xf5,0x99,0x64,0x81,0xcf,0xa9,0x7c,0x4e,0xe7,0x73,
    0x16,0x9f,0x73,0xd2,0xb3,0x2e,0xab,0xce,0xf5,0x3e,0x36,0xef,0xd6,0x79,0x53,0x97,
    0xaf,0xe8,0x9c,0x7a,0xed,0x87,0xa7,0xa9,0xfd,0x65,0x19,0x1c,0x29,0x37,0x3c,0xab,
    0xc9,0x4a,0xe9,0x59,0x95,0x5a,0xf7,0x82,0x45,0x4b,0x15,0x9f,0x91,0x5a,0x73,0x6a,
    0x23,0x92,0x7d,0x55,0xee,0x2f,0xcb,0x6e,0xa4,0x7e,0xee,0x2f,0xa1,0x33,0x72,0xff,
    0x59,0xf6,0x5e,0xca,0xcd,0x94,0x1b,0x53,0x2b,0x27,0x8f,0x6f,0x23,0xd4,0xec,0x2a,
    0x3e,0x0d,0x0b,0xc4,0xaa,0x1c,0x26,0xc4,0x6a,0x1d,0x16,0x89,0x0d,0x73,0x58,0x15,
    0xb1,0x11,0x0e,0x2b,0x11,0x1b,0xe5,0xb0,0x6a,0x62,0xef,0xc9,0x63,0x8b,0x17,0xfa,
    0xd0,0x38,0x9f,0x4b,0x01,0x4c,0x60,0x4c,0x26,0x8f,0x77,0xf2,0x89,0x0a,0xfe,0x04,
    0xf9,0x40,0x5f,0x2a,0x8f,0x21,0xf7,0x9f,0x80,0x9c,0x55,0x1e,0x99,0x7a,0xd0,0x3e,
    0xc6,0x27,0x9d,0xc8,0xfe,0xde,0x9d,0x74,0x34,0x96,0x71,0xb4,0x6f,0x48,0x72,0x0d,
    0xe3,0x33,0xbe,0x8e,0x7c,0x96,0x3f,0xab,0xf2,0x7c,0x6b,0x58,0x4b,0xd5,0xaf,0xe7,
    0xbb,0x90,0xbf,0x9c,0x7c,0x3d,0xe5,0x06,0xca,0xd5,0xd4,0x9f,0x46,0xfd,0x48,0x7e,
    0x3a,0xfb,0x56,0xbc,0x85,0xf2,0x0c,0x62,0x57,0x33,0xbe,0x26,0xd6,0xde,0xf8,0x66,
    0xc7,0xd7,0xe5,0x78,0x11,0xdf,0x4c,0x72,0x75,0x8e,0x9f,0xcd,0xb1,0x31,0x79,0x6e,
    0x3e,0xaf,0x0a,0xff,0x65,0xc7,0xab,0xdc,0x5a,0xd1,0x7f,0x1b,0xf3,0x33,0xfb,0xf6,
    0x0a,0xbe,0x83,0xf9,0x68,0x7e,0x77,0xb2,0x6f,0xdf,0xdf,0x62,0xc6,0x6f,0xf2,0x12,
    0xce,0x11,0x93,0xbb,0x38,0x17,0x26,0xa7,0x4a,0xa9,0x7d,0x37,0x73,0x5a,0x4c,0xdd,
    0x2e,0xa7,0xbb,0x2c,0xb5,0x21,0x27,0x7f,0xa3,0x22,0xb6,0x7b,0x19,0x8b,0xc5,0xf6,
    0xe3,0xd4,0xa6,0x38,0x79,0x2d,0xfb,0x32,0x79,0x03,0xe7,0xa6,0xc9,0x1b,0x5d,0x6c,
    0x2a,0x6f,0xe6,0x1c,0x36,0xb9,0x27,0xb5,0xb1,0xcc,0x75,0x27,0xc7,0x55,0x73,0xbd,
    0x22,0xfd,0xdf,0x95,0x9e,0x3b,0x19,0xb3,0xe9,0xf7,0xe6,0xeb,0x19,0xb9,0x29,0xb7,
    0x9b,0xf5,0xdc,0xcc,0x71,0xed,0x75,0xba,0x7d,0xf4,0x67,0xf2,0x9e,0xd4,0x2e,0x71,
    0x72,0x3f,0xd7,0x9b,0xf9,0x1a,0xa0,0xaf,0x3e,0xea,0xf6,0x3b,0xdd,0x41,0xce,0x3b,
    0xd3,0x7d,0x9e,0xe3,0x5a,0x26,0xd7,0xef,0xb8,0xbd,0xe4,0x3a,0x18,0x97,0xf7,0xf3,
    0x02,0xc7,0xd3,0x74,0x7f,0xef,0xe2,0x1f,0x24,0x6f,0xba,0x2f,0xa6,0x76,0xa9,0xd3,
    0x7d,0xc9,0xc5,0xd7,0x44,0xde,0xb8,0x97,0xd9,0x5f,0x1f,0xfd,0x78,0x6e,0x1f,0xed,
    0xca,0xef,0xc0,0xed,0x67,0xac,0xd6,0xff,0x1e,0xc7,0x1d,0xa8,0xc8,0xd1,0x73,0x07,
    0x5d,0x8e,0x95,0xdc,0x2b,0xce,0xae,0xaf,0x82,0xfb,0x03,0x63,0xe9,0x70,0x9c,0xe5,
    0x7b,0x88,0xeb,0xce,0x74,0x5f,0x25,0xd6,0x4a,0x1b,0xef,0xe7,0xb0,0xab,0xef,0x20,
    0xeb,0x61,0xdc,0x6b,0x2e,0xdf,0xbe,0x0b,0xdc,0xc8,0x7c,0x3e,0xbd,0xce,0x39,0x33,
    0xc0,0x31,0xdc,0xcb,0x31,0x78,0x89,0x35,0xdc,0xc7,0x9a,0x1c,0x60,0x8e,0xaf,0x30,
    0xe6,0x57,0xd9,0xe7,0x6b,0xdc,0x17,0xfe,0xc8,0xf9,0xb0,0x2b,0x9f,0xef,0x92,0x1d,
    0x4d,0xcf,0xf7,0xa5,0xd9,0x65,0xfb,0xf1,0xff,0x6b,0x6a,0x7b,0x9a,0xf3,0xf0,0x6d,
    0xee,0x41,0x2a,0x9f,0x21,0xa6,0xfc,0x59,0xbe,0xfb,0xb9,0xab,0x6b,0x34,0x9c,0x1b,
    0x1a,0x32,0xb9,0x94,0x36,0x8c,0xa1,0x58,0xf0,0xd5,0x2a,0xa7,0x80,0x46,0xa7,0xd5,
    0xfa,0xae,0x80,0x3d,0x56,0x39,0x7d,0xbf,0x5c,0x37,0x97,0xec,0xde,0x39,0x26,0x8f,
    0xca,0xe5,0x6c,0xb6,0xc9,0x13,0x73,0xf9,0x4f,0x37,0xda,0x9a,0x9f,0x1c,0x90,0xdb,
    0x85,0xfd,0x29,0x14,0x6b,0x56,0xe5,0xbb,0xc3,0xc5,0xb1,0xad,0x0a,0x88,0x4f,0xd7,
    0xf0,0xda,0xf4,0x7e,0x94,0x7b,0xc8,0x98,0x94,0xc5,0x76,0x9e,0x19,0xa5,0xec,0xe2,
    0xbf,0xc0,0x67,0x63,0x8a,0xf7,0x37,0x49,0xd8,0x1e,0x90,0xfb,0x0e,0x12,0x8a,0xb5,
    0x50,0x7e,0x8e,0x98,0xfa,0x3b,0x46,0x7f,0xa1,0xc2,0x9f,0x9d,0xa9,0xea,0xe3,0x38,
    0xc9,0x63,0xf4,0xa1,0xf2,0x09,0x62,0x96,0xc3,0xc9,0x80,0x33,0x7e,0x72,0xca,0x40,
    0xcf,0x0a,0x3d,0xdb,0x14,0x6b,0xe7,0x7e,0x7c,0xa1,0xae,0xc9,0xf1,0x87,0x72,0xbd,
    0x52,0x5e,0x93,0xdb,0x23,0xe6,0x53,0x93,0xc3,0x16,0x44,0xcc,0xb7,0x36,0x87,0xdd,
    0x11,0x31,0x3f,0x3b,0xdc,0x3e,0xbc,0x30,0x62,0xbf,0xf5,0x2d,0xa4,0xfc,0x95,0x5b,
    0x9e,0xfb,0x2d,0xe5,0x79,0x54,0x31,0xa7,0x98,0xcf,0x11,0xc9,0x6b,0xd7,0xc2,0x39,
    0xb7,0x52,0x30,0x36,0x2d,0x3c,0x1b,0xf7,0x73,0xac,0xfe,0x9b,0xb4,0x47,0x08,0xec,
    0xce,0xa6,0x77,0xdd,0xef,0xeb,0x05,0xf6,0xfa,0x9c,0xc5,0xb3,0xb2,0x51,0x70,0x1e,
    0xde,0x92,0xac,0xf4,0x4c,0xbd,0x42,0x80,0x35,0x4a,0x31,0x2e,0xf7,0xf0,0xdc,0xbe,
    0x52,0xc0,0xaf,0x62,0x4e,0x63,0x05,0x98,0xd6,0xe0,0xa6,0x84,0xe9,0xd9,0x38,0x4e,
    0x70,0x7e,0x6a,0x7f,0xb3,0x58,0xdb,0xf1,0x02,0xbc,0x37,0xe9,0xa8,0x3c,0x41,0x80,
    0xcd,0xa6,0xef,0xfc,0x7b,0x45,0x80,0x0f,0x50,0x67,0x22,0x75,0xe6,0x3a,0x9d,0x0f,
    0x08,0x70,0xd5,0x51,0x79,0x92,0xc0,0x4e,0xf7,0x83,0x55,0xc4,0x3e,0x28,0x58,0xe7,
    0xca,0xb5,0x11,0x9b,0x2c,0x88,0x55,0xff,0x56,0x12,0x9b,0x22,0xc0,0x55,0xff,0xd3,
    0x09,0xd1,0x7c,0x3e,0x1e,0x81,0x9b,0xae,0xf5,0x33,0x8d,0xfd,0xb4,0xb9,0x7e,0xa6,
    0x53,0x9e,0xe6,0xfa,0xb9,0x86,0xb6,0xc1,0xf5,0x73,0xad,0x00,0x9f,0xee,0xfa,0x99,
    0x17,0x81,0x6b,0x7f,0xc1,0xf5,0x73,0x9d,0x20,0xc7,0x8e,0x7c,0x4f,0x02,0x76,0x3d,
    0x31,0xed,0xeb,0x53,0xac,0x7b,0xb3,0x40,0x57,0xb9,0x95,0xc4,0x66,0x0a,0xfc,0x2a,
    0xa7,0x63,0xa1,0x7b,0xc6,0x83,0x01,0xfb,0x48,0x07,0xc7,0x42,0xfd,0x3d,0x14,0x80,
    0x9b,0xce,0xc3,0xd4,0x29,0x3b,0x9d,0x35,0x01,0xb8,0xf5,0xf7,0x48,0x80,0x9d,0xe2,
    0x3d,0x09,0xd3,0x35,0xfd,0x68,0x40,0x9f,0xca,0x3d,0x9a,0xec,0x74,0x8d,0xaf,0x23,
    0xae,0x73,0x6f,0x3d,0xd7,0xd7,0x99,0xc4,0x29,0xfe,0x58,0x6a,0x8a,0xe9,0xfc,0xd3,
    0xf7,0xd3,0xe9,0x39,0x82,0xf3,0x51,0xf1,0xdd,0xec,0xeb,0x09,0xfa,0xd5,0x35,0x34,
    0x40,0xec,0x49,0x62,0x77,0xc4,0xa2,0xd6,0x9b,0x02,0xf0,0xcc,0x8d,0xc9,0xe6,0x80,
    0x3c,0x94,0x33,0xbd,0x2d,0xd4,0xf3,0x63,0xf2,0x8b,0x00,0x5d,0xe5,0xcc,0xf6,0x19,
    0xda,0x2a,0x66,0x7a,0xcf,0x06,0xe0,0x9b,0x42,0x31,0x1e,0xdb,0x58,0x8b,0x36,0xd6,
    0x4b,0xf7,0xa5,0xdf,0x72,0x4f,0xb2,0x3e,0x77,0x06,0xe4,0x11,0x5c,0x6c,0xbd,0x01,
    0xf8,0x36,0xa7,0xd7,0x47,0x3d,0x3f,0x2f,0xf7,0x04,0xe8,0xf6,0xb9,0x31,0xea,0xe7,
    0x18,0xb5,0xb9,0x31,0x1a,0x08,0xc0,0xcd,0x6e,0x30,0xc0,0x56,0xf1,0xce,0xa4,0xa3,
    0xfb,0xe7,0xf3,0x8c,0x6d,0x7e,0xd2,0xd1,0x3d,0x65,0x2f,0xb1,0x41,0xc6,0xa0,0xeb,
    0x6c,0x8e,0x00,0x0f,0xf9,0xfc,0xc2,0xbe,0xf4,0x09,0x01,0xee,0x5b,0x2f,0x7d,0x7c,
    0x52,0xc0,0x77,0x73,0xde,0x2a,0xd6,0x26,0xc0,0x17,0xc6,0xc2,0xef,0xad,0x02,0x3c,
    0xcb,0xcf,0x5c,0x60,0x9f,0x11,0xe0,0x5d,0x59,0xa1,0xf7,0x59,0xea,0x05,0xa7,0x77,
    0x9b,0x00,0x5f,0x92,0x9f,0xf1,0xc0,0x3e,0x27,0xb0,0xbf,0x4d,0x0a,0xdb,0xcf,0xd3,
    0x56,0x9c,0x6d,0x87,0x00,0x5f,0xec,0x6c,0xbf,0x20,0xb0,0xef,0x70,0xb6,0x5f,0xa4,
    0x6d,0x74,0xb6,0xf3,0x05,0x78,0x8b,0xb3,0xbd,0x5d,0x60,0x3f,0xdf,0xd9,0xde,0xcc,
    0x9a,0x65,0xae,0x66,0x77,0x0a,0x70,0xdf,0xac,0x66,0x77,0x09,0x78,0x5f,0xb3,0x45,
    0x02,0xdc,0xd7,0x6c,0x89,0x00,0xf7,0x35,0xeb,0x12,0xe0,0xbe,0x66,0x4b,0xa9,0xe7,
    0x6b,0xb6,0x4c,0x80,0xfb,0x9a,0x7d,0x45,0x60,0xbf,0xcc,0xc5,0xfe,0x55,0xda,0xfa,
    0x9a,0x2d,0x17,0xe0,0xbe,0x66,0x2b,0x04,0xf6,0xcb,0x9d,0xed,0xd7,0x68,0xeb,0x6b,
    0xf6,0x75,0x01,0xee,0x6b,0x76,0xb7,0xc0,0x5e,0x39,0xdd,0x43,0xf4,0x5c,0x29,0x0b,
    0x6a,0xa9,0xdc,0x0d,0xc9,0x83,0x9e,0x53,0x65,0x29,0xd6,0xc7,0x6a,0xee,0x7b,0xba,
    0x36,0xef,0x23,0xf6,0x5d,0xc1,0xfd,0x62,0x35,0xf7,0x34,0xfd,0x36,0xff,0x9e,0xe0,
    0x8c,0x6b,0x77,0xe7,0xcb,0xf7,0x05,0xf8,0x0b,0xc9,0x4a,0xe5,0xfb,0x05,0xd8,0x5a,
    0x9e,0xcb,0x76,0x7e,0xfc,0x40,0xc0,0x99,0xdd,0x0f,0x2b,0xec,0x7e,0x24,0xc0,0x36,
    0x70,0x3f,0x34,0xbb,0x07,0x04,0x9c,0xd9,0xfd,0xa4,0xc2,0xee,0x41,0x01,0xb6,0xb1,
    0xc2,0xee,0x21,0x01,0x67,0x7b,0xc7,0x1a,0x41,0x4e,0xfa,0x8d,0x6a,0xf9,0x3c,0xc2,
    0x7c,0xd6,0x38,0xff,0x6b,0x05,0xb8,0x9d,0x0b,0xeb,0x68,0xd7,0x93,0x15,0x7d,0x3e,
    0x26,0xd0,0x5b,0xc7,0xb3,0xc1,0xfa,0x5c,0x2f,0xe0,0xac,0x86,0x1b,0x04,0xdf,0x2c,
    0xab,0x5d,0x1c,0x8f,0x0b,0x70,0x1f,0xc7,0x13,0x8c,0xe3,0x71,0x17,0xc7,0x4f,0x05,
    0xb8,0xc5,0xb1,0x91,0x76,0x3d,0x59,0x71,0x96,0x3f,0x29,0xd0,0xdb,0xe8,0xce,0xee,
    0x9f,0x09,0xf0,0x76,0x17,0xd7,0xcf,0x05,0xb8,0x8e,0xbd,0x7e,0xb3,0xbc,0x9e,0xf7,
    0x5d,0x9d,0xdf,0xdf,0x9f,0x12,0x7c,0xc7,0x68,0xbd,0xd6,0x4b,0xb1,0xc7,0x6d,0x11,
    0x70,0x96,0xcb,0xd3,0x02,0x3f,0xad,0xf9,0x1d,0x0a,0x58,0x8f,0x40,0xef,0x69,0x37,
    0x97,0x9e,0x11,0x8c,0x75,0x93,0xdb,0x57,0x7f,0x25,0xc0,0x75,0x7c,0x9e,0x4a,0x98,
    0x9e,0x57,0xcf,0x0a,0xc6,0xf6,0x10,0xbf,0x97,0x76,0x48,0x71,0x66,0x29,0xb7,0x35,
    0xb5,0xed,0x3c,0xa3,0xb6,0x3a,0xff,0xdb,0x04,0xfd,0x3e,0xe0,0xb0,0x5f,0x0b,0x70,
    0xed,0x53,0xcf,0xb6,0x1d,0xb4,0x53,0x7b,0x2f,0xeb,0xf3,0xad,0xb4,0x67,0xa8,0x4d,
    0x67,0x84,0xdd,0x56,0xfa,0xdb,0x2e,0x45,0xbc,0xbf,0x13,0xc4,0xdc,0x19,0x8b,0x73,
    0x60,0xa7,0xe0,0x1c,0xe8,0x73,0xe7,0xc0,0x2e,0x01,0x6e,0x39,0xf5,0x0a,0x30,0xcd,
    0x69,0x53,0xd2,0x50,0x9d,0xdd,0x02,0x7c,0x28,0xbb,0x18,0x1f,0x20,0xae,0x77,0x07,
    0xbd,0x2f,0x0c,0xcb,0x6a,0x71,0x27,0xe5,0xde,0x32,0x85,0x71,0xa8,0xbd,0xea,0x2e,
    0xe3,0xfd,0xe0,0x45,0x81,0x8e,0xc9,0x2f,0x93,0x5f,0x9d,0x62,0x50,0x79,0x9f,0x40,
    0x47,0xf1,0x6f,0x13,0xdb,0x2f,0xc0,0xf5,0xee,0xf1,0x2d,0x62,0x07,0x04,0xb8,0xde,
    0x3f,0x96,0x32,0x9f,0x83,0x02,0xfc,0x1e,0xce,0xc1,0xc3,0x01,0xe7,0xf0,0x82,0x80,
    0x9a,0x4d,0x8a,0xc5,0x6f,0x10,0x07,0xb9,0xdf,0x75,0x92,0xbb,0xfa,0x1d,0x38,0xab,
    0xcb,0x31,0x81,0xad,0xea,0xe8,0x58,0x9f,0x74,0x63,0xad,0xdc,0xf1,0xd4,0x4e,0x72,
    0x8c,0x8e,0xbb,0x39,0x37,0x83,0x36,0x93,0x62,0x91,0xef,0x35,0x11,0xb8,0xe9,0x34,
    0x45,0xf4,0xe7,0x75,0xae,0x8b,0xc0,0xad,0x26,0xd7,0x47,0x60,0x6a,0x6b,0x35,0x69,
    0x8e,0xc0,0x27,0xba,0x9a,0xb4,0x44,0xe0,0x5a,0x93,0x6e,0xd6,0x60,0x66,0x04,0xfe,
    0x4d,0xca,0x37,0x44,0x60,0xb6,0xde,0x66,0x47,0x60,0x7a,0x4f,0xdb,0xc2,0x7c,0x6f,
    0x8a,0xf8,0xed,0x46,0x39,0x1b,0xef,0x8f,0x46,0xe0,0xad,0x9c,0x07,0x56,0xe3,0x39,
    0x11,0x5c,0x3f,0xfd,0xcd,0x8d,0xb0,0x53,0x5c,0xe7,0xae,0xd5,0xe5,0x24,0xe7,0xae,
    0xea,0xdc,0x15,0xb1,0xe7,0xeb,0x7c,0x56,0x7d,0xad,0xd9,0x2f,0xd9,0xf7,0x5b,0x82,
    0x71,0x6b,0xe7,0xb7,0xe0,0x79,0x57,0x6b,0xe5,0x4e,0xa5,0x76,0x8e,0x3e,0x4f,0x71,
    0x0d,0xa9,0xcf,0xd3,0x82,0xf1,0x3b,0xcc,0xef,0x1a,0xc5,0xce,0x08,0xf0,0x25,0xee,
    0xcc,0x39,0x2b,0xe8,0xff,0x0c,0xd7,0xd6,0x79,0xfa,0x3a,0x57,0x21,0x9f,0x77,0xf1,
    0x7e,0x29,0xc2,0xee,0x14,0xcf,0x2a,0xd5,0xb5,0x5a,0xe9,0x84,0xf1,0xf1,0xd6,0xc6,
    0x22,0x5e,0xe5,0x42,0x6a,0x35,0x11,0x3e,0xf5,0xdd,0xe2,0xad,0x8a,0x45,0xbc,0xf7,
    0x11,0x2b,0x45,0xe0,0x3e,0xde,0xea,0x88,0x78,0x4b,0xac,0x67,0x2d,0x7d,0xd5,0x54,
    0xc8,0xfa,0xb4,0x78,0x17,0x45,0xd8,0x05,0xd6,0x59,0x75,0x37,0x33,0xde,0xba,0x8a,
    0x78,0x1b,0x5c,0xbc,0xca,0x0d,0x4b,0xad,0x81,0x3e,0x87,0xb9,0x79,0x72,0x19,0xe3,
    0x68,0x77,0xb1,0x0d,0x8f,0xc0,0x7b,0xdc,0xf9,0x5d,0x1f,0x51,0xaf,0xe1,0xce,0x76,
    0x24,0x6d,0xf5,0xae,0x6f,0x7b,0xff,0xa8,0x08,0xbc,0xd5,0xd9,0x8e,0x8e,0x88,0x7d,
    0x14,0x73,0xb3,0x38,0x1a,0x5c,0x6e,0xdd,0xd4,0xd1,0x7c,0x47,0x33,0x5e,0xe3,0xba,
    0xd8,0xb7,0x72,0xf5,0xe4,0xbe,0x1c,0xc0,0x8d,0x71,0xeb,0xbb,0x8b,0x35,0x36,0xae,
    0xd1,0x71,0xdd,0xe4,0xec,0xdc,0xba,0x92,0x6b,0x58,0x7f,0x97,0x30,0x6c,0x2c,0xd7,
    0xb4,0x62,0x7d,0xc4,0xc6,0x45,0xe0,0x4d,0xcc,0x47,0xb1,0xf1,0x11,0xf6,0xca,0xd9,
    0x7a,0x99,0x10,0x81,0x5b,0xce,0xef,0x8f,0xc0,0x34,0x3e,0xfb,0xde,0x99,0x18,0x81,
    0x6b,0x5c,0xb7,0x64,0x97,0xe4,0xdf,0x7c,0x6f,0x04,0xdc,0xeb,0x95,0xab,0xe2,0xdd,
    0xba,0xc4,0x98,0x6d,0x6c,0xff,0xcc,0xfd,0xce,0xce,0xa4,0x23,0xee,0x1e,0xa5,0xdc,
    0x9b,0xa9,0x1d,0xe1,0x3d,0xea,0x4d,0x77,0x47,0xf8,0x0b,0xef,0x08,0x87,0xdc,0xd9,
    0xf0,0xd7,0x00,0xfc,0x3b,0xcc,0xe5,0x6f,0x01,0x58,0x39,0x2b,0xec,0xfe,0x4e,0xbb,
    0x56,0x67,0xf7,0x8f,0x00,0xdc,0xec,0x8e,0x06,0x60,0x65,0x77,0x07,0xfd,0x67,0x80,
    0xbf,0xa3,0xa1,0xb8,0x83,0xfe,0x8b,0xf7,0x19,0xe5,0xd4,0x97,0xfe,0xde,0xf2,0x6f,
    0xfe,0xd6,0xb2,0x30,0xc9,0xfa,0xae,0x3a,0x6f,0xf0,0xfe,0x67,0x79,0x1c,0xa9,0xb8,
    0x0f,0xea,0xf3,0x7c,0xaa,0xce,0x47,0x52,0xfb,0x1f,0x00,0xf8,0xd4,0xfe,0x00,0x1a,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//  uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
