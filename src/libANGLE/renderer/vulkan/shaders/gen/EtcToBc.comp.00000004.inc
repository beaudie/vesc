// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x79,0x70,0x57,0xd5,
    0x15,0x7e,0xf7,0xdc,0x2c,0x2c,0x8a,0x44,0xa1,0xca,0x32,0x15,0x45,0xac,0x23,0x3b,
    0x42,0xea,0x24,0x8d,0xe0,0x28,0x25,0x13,0x17,0x88,0x4e,0xea,0xd8,0xd8,0x69,0x69,
    0x71,0x6a,0x09,0x4b,0xa7,0x38,0x2d,0x30,0x58,0x68,0x48,0x8b,0xb5,0xfd,0xab,0x63,
    0x17,0x2c,0x96,0x6e,0xb4,0x65,0x71,0x22,0xd3,0xda,0x6a,0xd7,0x90,0x84,0x2c,0x22,
    0x69,0x58,0x84,0x4a,0xa7,0xd3,0x32,0x5d,0xd4,0x4a,0x37,0x1d,0x35,0x48,0x9d,0xf4,
    0x9e,0xf7,0x7d,0x87,0x77,0xf8,0x8d,0xcd,0xcc,0xcd,0xfb,0x9d,0xef,0x3b,0xe7,0xdc,
    0x73,0xce,0xdd,0xde,0x7d,0x51,0xa6,0x56,0x66,0x31,0x64,0xa3,0xb2,0x11,0xd9,0x23,
    0x31,0xcb,0xff,0xaa,0x32,0xc9,0x02,0x9f,0xb3,0xf8,0x9c,0xcb,0x67,0x1d,0x9f,0xb7,
    0xa4,0xe7,0xe8,0xac,0x22,0xd7,0x5b,0x72,0xfb,0xdd,0xb7,0xcf,0x5a,0xf7,0xe0,0x8a,
    0x59,0xf3,0x17,0xcc,0x51,0xfb,0x31,0x19,0x1c,0x29,0x77,0x49,0x56,0x99,0x95,0xa7,
    0x67,0x59,0x6a,0xab,0x97,0x7f,0x62,0x8d,0xe2,0xf3,0x52,0xab,0x49,0x6d,0x6c,0xb2,
    0x2f,0xcb,0xfd,0x65,0xd9,0x22,0xea,0xe7,0xfe,0x12,0x3a,0x2f,0xf7,0x9f,0x65,0x13,
    0x29,0xd7,0x50,0x9e,0x94,0x5a,0x7d,0xf2,0x38,0x84,0x50,0xb3,0xa9,0x7c,0x1a,0x16,
    0x88,0x95,0x39,0x4c,0x88,0x8d,0x70,0x58,0x24,0x76,0x91,0xc3,0xca,0x88,0x8d,0x75,
    0x58,0x39,0xb1,0x71,0x0e,0xab,0x20,0x76,0x45,0x1e,0x5b,0x3c,0xdf,0x87,0xc6,0xd9,
    0x95,0x02,0xb8,0x9a,0x31,0x99,0x7c,0x95,0x93,0x87,0x4a,0xf8,0x21,0xf2,0xc1,0x7c,
    0xa5,0x1f,0x13,0xc8,0x8d,0x10,0xe4,0xac,0xf2,0x65,0xa9,0x07,0xed,0xe3,0xaa,0xa4,
    0x13,0xd9,0xdf,0xf8,0xa4,0xa3,0xb1,0x4c,0xa1,0xfd,0xe5,0x49,0xae,0x64,0x7c,0xc6,
    0x8f,0x26,0x9f,0xe5,0xcf,0xb2,0x3c,0xdf,0x4a,0xd6,0x52,0xf5,0xab,0xf8,0x5b,0xc8,
    0x5f,0x4a,0xbe,0x8a,0xf2,0xe5,0x94,0x2b,0xa8,0x3f,0x87,0xfa,0x91,0xfc,0x5c,0xf6,
    0xad,0x78,0x2d,0xe5,0x79,0xc4,0xa6,0x33,0xbe,0x6a,0xd6,0xde,0xf8,0x1a,0xc7,0x8f,
    0xce,0xf1,0x22,0xbe,0xf7,0x91,0x1b,0xed,0xf8,0x85,0x1c,0x1b,0x93,0x17,0xe7,0xf3,
    0xaa,0xf0,0x5f,0xef,0x78,0x95,0x1b,0x4a,0xfa,0x6f,0x64,0x7e,0x66,0xdf,0x54,0xc2,
    0x37,0x33,0x1f,0xcd,0xef,0x7e,0xf6,0xed,0xfb,0x5b,0xc9,0xf8,0x4d,0x6e,0xe1,0x1c,
    0x31,0x79,0x15,0xe7,0xc2,0x8c,0x54,0x29,0xb5,0x5f,0xcd,0x9c,0x56,0x52,0x77,0x95,
    0xd3,0x5d,0x9b,0xda,0xb0,0x93,0x37,0x96,0xc4,0xb6,0x99,0xb1,0x58,0x6c,0x5f,0x49,
    0x6d,0xa6,0x93,0xb7,0xb3,0x2f,0x93,0x77,0x72,0x6e,0x9a,0xbc,0xcb,0xc5,0xa6,0xf2,
    0x1e,0xce,0x61,0x93,0xdb,0x53,0xbb,0x92,0xb9,0x76,0x70,0x5c,0x35,0xd7,0xc9,0xe9,
    0xff,0x81,0xf4,0xec,0x60,0xcc,0xa6,0xdf,0x99,0xaf,0x67,0xe4,0xa6,0x5c,0x17,0xeb,
    0xb9,0x87,0xe3,0xda,0xe9,0x74,0xbb,0xe9,0xcf,0xe4,0x83,0xa9,0x8d,0x74,0x72,0x0f,
    0xd7,0x9b,0xf9,0xea,0xa5,0xaf,0x6e,0xea,0xf6,0x38,0xdd,0x3e,0xce,0x3b,0xd3,0xed,
    0xe7,0xb8,0xd6,0x93,0xeb,0x71,0xdc,0xb3,0xe4,0x9a,0x19,0x97,0xf7,0x73,0x88,0xe3,
    0x69,0xba,0xcf,0xb9,0xf8,0xfb,0xc8,0x9b,0xee,0xe1,0xd4,0x46,0x39,0xdd,0x01,0x17,
    0x5f,0x35,0x79,0xe3,0x7e,0xcb,0xfe,0xba,0xe9,0xc7,0x73,0x83,0xb4,0xab,0x7f,0x07,
    0xee,0x08,0x63,0xb5,0xfe,0x0f,0x3a,0xee,0x68,0x49,0x8e,0x9e,0x3b,0xe6,0x72,0x2c,
    0xe5,0x8e,0x3b,0xbb,0xee,0x12,0xee,0x79,0xc6,0xd2,0xec,0x38,0xcb,0xf7,0x04,0xd7,
    0x9d,0xe9,0x9e,0x24,0xd6,0x40,0x1b,0xef,0xe7,0x77,0xae,0xbe,0x7d,0xac,0x87,0x71,
    0x2f,0xb8,0x7c,0xbb,0xcf,0x73,0x97,0xe5,0xf3,0xe9,0x14,0xe7,0x4c,0x2f,0xc7,0xf0,
    0x59,0x8e,0xc1,0x00,0x6b,0x38,0xc8,0x9a,0x1c,0x65,0x8e,0xc7,0x19,0xf3,0x49,0xf6,
    0xf9,0x02,0xf7,0x85,0x3f,0x70,0x3e,0x1c,0xc8,0xe7,0xbb,0x64,0x2f,0xa7,0xe7,0xbb,
    0xd3,0xec,0xb2,0xfd,0xf8,0xff,0x35,0xb5,0x3d,0xcb,0x79,0x38,0xc4,0x3d,0x48,0xe5,
    0xb7,0x88,0x29,0x7f,0x8e,0xbf,0xfd,0xdc,0xd5,0x35,0x1a,0xfe,0x3b,0x3c,0x6c,0x72,
    0x79,0xda,0x30,0x86,0x63,0xc1,0x57,0xa8,0x9c,0x02,0x7a,0x57,0x5a,0xad,0x17,0x07,
    0xec,0xb1,0xca,0xe9,0xef,0x4b,0x75,0x73,0xc9,0x36,0xdf,0x62,0xf2,0xb8,0x5c,0xce,
    0x16,0x9a,0x7c,0x6d,0x2e,0xff,0x69,0x91,0xad,0xf9,0x19,0x01,0xb9,0x9d,0xdf,0x9f,
    0x42,0xb1,0x66,0x55,0x5e,0x1f,0x2e,0x8c,0xad,0x2d,0x20,0x3e,0x5d,0xc3,0xdb,0xd3,
    0xef,0x97,0xb9,0x87,0x4c,0x48,0x59,0x74,0x04,0xcc,0xf7,0xf2,0xec,0xc2,0xbf,0xc0,
    0xe7,0xa4,0x14,0xef,0x81,0x24,0x74,0x04,0xe4,0xde,0x49,0x42,0xb1,0x5a,0xca,0x5d,
    0xc4,0xd4,0xdf,0x1b,0xa1,0x38,0x1f,0xfc,0x9f,0x9d,0xa9,0xea,0xe3,0x4d,0xea,0xbf,
    0x41,0x1f,0x2a,0x0f,0x11,0xd3,0x18,0xcb,0x04,0xf1,0x47,0x97,0x53,0xa5,0xe0,0xcc,
    0x9f,0x91,0x18,0x3d,0x3b,0xf4,0xac,0x53,0xac,0x89,0xfb,0xb3,0xe5,0x3a,0x31,0x61,
    0xb3,0x73,0xbd,0xf2,0xbc,0x46,0x9f,0x8e,0x98,0x5f,0xd5,0x0e,0xfb,0x4c,0xc4,0xfc,
    0x6b,0x74,0xd8,0xfa,0x88,0xf9,0xda,0xec,0xf6,0xe5,0x0d,0x11,0xfb,0xaf,0x6f,0x21,
    0x45,0xa5,0xdc,0x17,0x73,0xbf,0xe5,0x79,0x5e,0x65,0xcc,0x31,0xe6,0x73,0x46,0xf2,
    0x5a,0xd6,0x72,0x0e,0x3e,0x2a,0x18,0xab,0x5a,0x9e,0x95,0xa7,0x38,0x76,0x6f,0x26,
    0xed,0x6b,0x58,0xa4,0x73,0xe9,0xb7,0xee,0xff,0xd3,0x04,0xf6,0xfa,0xac,0xe3,0xd9,
    0x39,0x5b,0x70,0x3e,0x2e,0x4d,0x56,0x7a,0xc6,0xce,0x11,0x60,0xb3,0xa5,0x18,0xa7,
    0x4d,0x3c,0xc7,0xe7,0x0a,0xf8,0x36,0xe6,0x74,0x83,0x00,0xd3,0x1a,0xdc,0x9c,0x30,
    0x3d,0x2b,0xe7,0x0b,0xce,0x53,0xed,0xaf,0x8e,0xb5,0x5d,0x20,0xc0,0x3b,0x93,0x8e,
    0xca,0xd5,0x02,0x6c,0x21,0x7d,0x6b,0x5d,0xdf,0x2b,0xc0,0x7b,0xa9,0x53,0x43,0x9d,
    0xc5,0x4e,0xa7,0x56,0x80,0xab,0x8e,0xca,0x75,0x02,0x3b,0xdd,0x1f,0xda,0x88,0xdd,
    0x24,0x58,0xf7,0xca,0x35,0x12,0x5b,0x24,0x88,0x55,0xff,0xb6,0x10,0xbb,0x59,0x80,
    0xab,0xfe,0x5d,0x09,0xd1,0x7c,0x3e,0x14,0x81,0x9b,0xae,0xf5,0x73,0x2b,0xfb,0x69,
    0x74,0xfd,0x2c,0xa6,0x7c,0xab,0xeb,0x67,0x09,0x6d,0x83,0xeb,0xa7,0x5e,0x80,0x2f,
    0x76,0xfd,0x7c,0x24,0x02,0xd7,0xfe,0x82,0xeb,0xe7,0x36,0x41,0x8e,0xcd,0xf9,0x1e,
    0x05,0xec,0x0e,0x62,0xda,0xd7,0x32,0xd6,0xfd,0x4e,0x81,0xae,0x72,0x5b,0x88,0x2d,
    0x13,0xf8,0x55,0x4e,0xc7,0x42,0xf7,0x90,0x47,0x03,0xf6,0x95,0x66,0x8e,0x85,0xfa,
    0xfb,0x6a,0x00,0x6e,0x3a,0x5f,0xa3,0x4e,0xbd,0xd3,0xf9,0x7a,0x00,0x6e,0xfd,0x7d,
    0x23,0xc0,0x4e,0xf1,0xf6,0x84,0xe9,0x1a,0x7f,0x2c,0xa0,0x4f,0xe5,0x1e,0x4b,0x76,
    0xba,0xe6,0xbf,0x49,0x5c,0xe7,0xde,0xe3,0x5c,0x6f,0x6f,0x25,0x4e,0xf1,0x1d,0xa9,
    0x29,0xa6,0xf3,0x4f,0x7f,0x9f,0x4d,0xcf,0x6b,0x38,0x1f,0x15,0xef,0x62,0x5f,0xdf,
    0xa5,0x5f,0x5d,0x43,0xbd,0xc4,0x7e,0x40,0x6c,0x7d,0x2c,0x6a,0xbd,0x3b,0x00,0xcf,
    0xdc,0x98,0xec,0x09,0xc8,0x43,0x39,0xd3,0xdb,0x47,0x3d,0x3f,0x26,0x4f,0x04,0xe8,
    0x2a,0x67,0xb6,0xfb,0x69,0xab,0x98,0xe9,0xfd,0x24,0x00,0xdf,0x1d,0x8a,0xf1,0x78,
    0x9a,0xb5,0x68,0x74,0x63,0xf4,0x2b,0xd6,0xc6,0xcf,0x8f,0x5f,0x07,0xe8,0x2a,0xa7,
    0x75,0xd5,0xfd,0xac,0x9b,0x7b,0x99,0xad,0x95,0x9e,0x80,0xb5,0xb7,0xd1,0xad,0x95,
    0xde,0x00,0xdc,0xe6,0x7c,0x5f,0x00,0x66,0x7e,0xfb,0x03,0x7c,0xf7,0xb9,0x1c,0x0f,
    0x05,0xd4,0x2d,0xb8,0xfe,0x0f,0x07,0xe0,0x4f,0xbb,0x7c,0x06,0x02,0xec,0x0f,0x3b,
    0xdb,0x41,0xda,0xfa,0xb5,0x71,0x24,0x40,0x57,0xb9,0x15,0xfa,0x5e,0x96,0x9e,0x47,
    0x19,0xff,0x87,0x93,0x8e,0xee,0x4f,0xc7,0x88,0x1d,0xa1,0x2f,0x8d,0xfd,0x1e,0x01,
    0x1e,0xf2,0xb9,0x8a,0x3d,0x6e,0xb9,0x00,0xf7,0xad,0x93,0x3e,0x3e,0x2a,0xe0,0x57,
    0x73,0x0d,0x28,0x76,0xbf,0x00,0xdf,0x10,0x0b,0xbf,0x1f,0x17,0xe0,0x59,0x7e,0x9e,
    0x03,0x7b,0x40,0x80,0xaf,0xca,0x0a,0xbd,0x95,0xd4,0x0b,0x4e,0xaf,0x45,0x80,0xb7,
    0xe4,0xef,0x0f,0xc0,0x56,0x09,0xec,0x5b,0xa4,0xb0,0x5d,0x43,0x5b,0x71,0xb6,0x6b,
    0x05,0xf8,0x4a,0x67,0xfb,0x49,0x81,0xfd,0x5a,0x67,0xfb,0x29,0xda,0x46,0x67,0xbb,
    0x4e,0x80,0xd7,0x3a,0xdb,0x07,0x05,0xf6,0xeb,0x9c,0xed,0x07,0x59,0xb3,0xcc,0xd5,
    0x6c,0x83,0x00,0xf7,0xcd,0x6a,0xb6,0x51,0xc0,0xfb,0x9a,0x3d,0x24,0xc4,0x5d,0xcd,
    0x36,0x0b,0x70,0x5f,0xb3,0x2d,0x02,0xdc,0xd7,0xac,0x95,0x7a,0xbe,0x66,0x5b,0x05,
    0xb8,0xaf,0x59,0x9b,0xc0,0x7e,0xab,0x8b,0xfd,0x0b,0xb4,0xf5,0x35,0xdb,0x26,0xc0,
    0x7d,0xcd,0x1e,0x16,0xd8,0x6f,0x73,0xb6,0x8f,0xd0,0xd6,0xd7,0xec,0x4b,0x02,0xdc,
    0xd7,0xec,0xcb,0x02,0x7b,0xe5,0x74,0x3f,0xd2,0x33,0xea,0x3e,0x41,0x2d,0x95,0xbb,
    0x29,0x79,0xd0,0x33,0xef,0x3e,0x29,0xe6,0xfe,0x0e,0xee,0xa1,0xba,0xce,0x5b,0x89,
    0x3d,0x2e,0xb8,0xbb,0xec,0xe0,0xfe,0xa8,0xef,0xfd,0xdf,0x12,0x9c,0x97,0x4d,0x6e,
    0xfd,0xed,0x14,0xe0,0x87,0x92,0x95,0xca,0xdf,0x16,0x60,0xdb,0x79,0xc6,0xdb,0xba,
    0xfc,0x8e,0x80,0x33,0xbb,0xef,0x95,0xd8,0x7d,0x5f,0x80,0xed,0xe4,0xde,0x6a,0x76,
    0xbb,0x04,0x9c,0xd9,0xfd,0xb0,0xc4,0xee,0x47,0x02,0x6c,0x57,0x89,0xdd,0x6e,0x01,
    0x67,0x7b,0xce,0x5e,0x41,0x4e,0xfa,0xfe,0x6b,0xf9,0xec,0x63,0x3e,0x7b,0x9d,0xff,
    0x27,0x04,0xb8,0x9d,0x31,0xed,0xb4,0x6b,0xcf,0x8a,0x3e,0x9f,0x14,0xe8,0xb5,0xf3,
    0x9c,0xb1,0x3e,0xf7,0x0b,0x38,0xab,0xe1,0x8f,0x05,0xef,0x3f,0x3b,0x5c,0x1c,0x4f,
    0x09,0x70,0x1f,0xc7,0x4f,0x19,0xc7,0x53,0x2e,0x8e,0x9f,0x09,0x70,0x8b,0xe3,0x19,
    0xda,0xb5,0x67,0xc5,0x7b,0xc1,0xcf,0x05,0x7a,0xcf,0xb8,0xf7,0x80,0x5f,0x08,0xf0,
    0x26,0x17,0xd7,0x2f,0x05,0xb8,0x8e,0xbd,0xbe,0xff,0x9c,0xca,0xfb,0xae,0xc8,0xbf,
    0x0d,0xfc,0x46,0xf0,0x4e,0xa4,0xf5,0xda,0x2f,0xc5,0x99,0xd6,0x21,0xe0,0x2c,0x97,
    0x4e,0x81,0x9f,0x86,0xfc,0x7e,0x06,0xac,0x4b,0xa0,0xd7,0xe9,0xe6,0xd2,0x41,0xc1,
    0x58,0x57,0xbb,0xfd,0xb1,0x47,0x80,0xeb,0xf8,0xec,0x4d,0x98,0x9e,0x7d,0x7d,0x82,
    0xb1,0x3d,0xc1,0x77,0xaf,0x41,0x29,0xce,0x3f,0xe5,0xfa,0x53,0x1b,0xe0,0x79,0xd7,
    0xef,0xfc,0x3f,0x27,0xe8,0x77,0x97,0xc3,0x0e,0x0b,0x70,0xed,0x53,0xcf,0xc9,0x41,
    0xda,0xa9,0xbd,0x97,0xf5,0xf9,0x7a,0xda,0x33,0xd4,0x66,0x63,0x84,0x5d,0x3f,0xfd,
    0x0d,0x48,0x11,0xef,0x31,0x41,0xcc,0x1b,0x63,0x71,0xee,0x1f,0x17,0x9c,0xfb,0xdd,
    0xee,0xdc,0x7f,0x5e,0x80,0x5b,0x4e,0x27,0x04,0x98,0xe6,0xb4,0x3b,0x69,0xa8,0xce,
    0x49,0x01,0x3e,0x9c,0x5d,0x88,0xff,0x9e,0xb8,0xde,0x4b,0xf4,0x2e,0x72,0x51,0x36,
    0x22,0xc7,0xff,0xc8,0xbd,0x65,0x26,0xe3,0x50,0x7b,0xd5,0x5d,0xcb,0xbb,0xc7,0x69,
    0x81,0x8e,0xc9,0x7f,0x26,0xff,0x70,0x8a,0x41,0xe5,0xbf,0x08,0x74,0x14,0xff,0x3c,
    0xb1,0xbf,0x0a,0x70,0xbd,0xd7,0x7c,0x8e,0xd8,0xdf,0x04,0xb8,0xde,0x6d,0xd6,0x30,
    0x9f,0x17,0x05,0xf8,0x26,0xce,0xc1,0xd3,0x01,0x67,0xfa,0xf2,0x80,0x9a,0xd5,0xc5,
    0xe2,0xfb,0xc6,0x8b,0xdc,0xef,0x56,0x90,0x5b,0xf8,0x0e,0x9c,0xd5,0x25,0x44,0xd8,
    0xaa,0x8e,0x8e,0x75,0x65,0x2c,0xc6,0x5a,0x39,0x49,0x4d,0x31,0x1d,0x23,0xfd,0x6d,
    0x73,0xee,0xfd,0xb4,0xa9,0x8b,0x45,0xbe,0x4b,0x22,0x70,0xd3,0x69,0x88,0xe8,0xcf,
    0xeb,0xdc,0x16,0x81,0x5b,0x4d,0xee,0x88,0xc0,0xd4,0xd6,0x6a,0x72,0x67,0x04,0x7e,
    0xad,0xab,0xc9,0xd2,0x08,0x5c,0x6b,0xb2,0x9a,0x35,0x58,0x16,0x81,0x7f,0x96,0xf2,
    0x5d,0x11,0x98,0xad,0xb7,0xbb,0x23,0x30,0xbd,0x03,0xee,0x63,0xbe,0x4d,0x11,0xef,
    0x28,0xca,0xd9,0x78,0x7f,0x20,0x02,0x6f,0xe0,0x3c,0xb0,0x1a,0xdf,0x13,0xc1,0xf5,
    0xd0,0xdf,0xbd,0x11,0x76,0x8a,0xeb,0xdc,0xb5,0xba,0xe8,0x53,0xe7,0xae,0xea,0x6c,
    0x8a,0xd8,0xf3,0x75,0x3e,0xdf,0xcb,0xfa,0x3d,0xc9,0xbe,0x47,0x46,0x8c,0x5b,0x13,
    0xdf,0x2b,0xab,0x5c,0xad,0x95,0x1b,0x95,0xda,0x58,0xfa,0xd4,0xdf,0x6d,0xec,0xf7,
    0x62,0x8e,0xdf,0x69,0xbe,0xff,0x28,0x36,0x26,0x02,0x6f,0x71,0x67,0xce,0x25,0x11,
    0xfd,0x8f,0x61,0x7c,0x55,0xf4,0x35,0xb6,0x44,0xae,0x72,0xf1,0x3e,0x14,0x61,0x37,
    0x8a,0x71,0xab,0xae,0xd5,0x6a,0x5c,0x49,0xbc,0x93,0x5d,0xbc,0xca,0x8d,0x4f,0x6d,
    0x12,0x7d,0x8e,0x77,0xf1,0x5e,0xe1,0xe2,0x6d,0x25,0x36,0x21,0x02,0xf7,0xf1,0x4e,
    0x64,0xbc,0x13,0x18,0xdf,0x64,0xfa,0x9a,0x54,0x22,0x4f,0x76,0xf1,0x6e,0x8e,0xb0,
    0x1b,0xcf,0x78,0x55,0x77,0x0f,0xe3,0xbd,0xb2,0x24,0xde,0xe9,0x2e,0x5e,0xe5,0xa6,
    0xe8,0x37,0x06,0xfa,0x9c,0xe2,0xe6,0xc9,0xd5,0x8c,0xa3,0xc9,0xc5,0x36,0x35,0x02,
    0x6f,0x77,0xe7,0xf7,0xb4,0x88,0x7a,0x4d,0x75,0xb6,0xef,0xa1,0xad,0x7e,0x47,0xb0,
    0xbd,0xff,0xba,0x08,0xbc,0xc1,0xd9,0x5e,0x1f,0x11,0xfb,0x75,0xcc,0xcd,0xe2,0x98,
    0xee,0x72,0xdb,0x4a,0x1d,0xcd,0xf7,0x7a,0xc6,0x6b,0x5c,0x2b,0xfb,0x56,0x6e,0x1a,
    0xb9,0x07,0x02,0xb8,0x99,0x6e,0x7d,0xb7,0xb2,0xc6,0xc6,0xcd,0x76,0xdc,0x56,0x72,
    0x76,0x6e,0xcd,0xe5,0x1a,0xd6,0x6f,0x1e,0x86,0xdd,0xc0,0x35,0xad,0x58,0x37,0xb1,
    0xf9,0x11,0x78,0x35,0xf3,0x51,0x6c,0x41,0x84,0xbd,0x72,0xb6,0x5e,0xaa,0x23,0x70,
    0xcb,0xf9,0xc6,0x08,0x4c,0xe3,0xb3,0xf7,0x9d,0x9a,0x08,0x5c,0xe3,0x5a,0x9a,0x8d,
    0xcc,0xdf,0xf9,0x5e,0x0a,0xf8,0x46,0xa0,0x5c,0x19,0xef,0xe9,0xe5,0x8c,0xd9,0xc6,
    0xf6,0xef,0xdc,0xef,0xec,0x4c,0x3a,0xe3,0xee,0x64,0xca,0xbd,0x92,0xda,0x19,0xde,
    0xc9,0x5e,0x71,0x77,0xc2,0x7f,0xf0,0x4e,0x78,0xc2,0x9d,0x0d,0xff,0x0c,0xc0,0xb7,
    0x31,0x97,0x7f,0x05,0x60,0xf5,0x59,0x61,0xf7,0x6f,0xda,0x35,0x38,0xbb,0xff,0x04,
    0xe0,0x66,0xf7,0x6a,0x00,0x56,0xef,0xee,0xb3,0xaf,0x05,0xf8,0x7b,0x35,0x14,0xf7,
    0xd9,0xd7,0x79,0x2f,0x79,0x8d,0xf7,0x27,0xfd,0x96,0x73,0x96,0xdf,0x71,0xec,0xee,
    0x72,0x2e,0x40,0x2f,0xcb,0x0a,0xec,0x6d,0x62,0xc1,0xc5,0x15,0x78,0xd6,0x35,0xba,
    0xb8,0x44,0x80,0xdb,0x19,0x19,0x05,0x77,0x2a,0xc9,0xdf,0x33,0x2b,0xf2,0x6f,0x44,
    0xe5,0x82,0x3e,0xd4,0xa7,0xf2,0x1f,0xd3,0x6f,0x75,0x01,0xf8,0x4b,0xbc,0xc3,0x5a,
    0xfd,0xce,0x94,0xdc,0x69,0xf5,0xf9,0x76,0x8a,0xe2,0xc6,0xd4,0xfe,0x07,0x51,0x85,
    0x2b,0x44,0xd4,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
