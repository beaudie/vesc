// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x79,0x70,0x57,0xd5,
    0x15,0x7e,0xef,0xdc,0x9b,0x84,0x88,0x0b,0x08,0x16,0x70,0x43,0xa4,0x53,0x9d,0x8a,
    0x56,0x19,0xa5,0x16,0xd4,0xa8,0x68,0xc9,0x44,0x41,0xa1,0xc6,0x65,0x52,0x14,0x15,
    0xc6,0x18,0x03,0x56,0xad,0xda,0x41,0x46,0x50,0x71,0xb4,0x5a,0x91,0x82,0x8a,0x8d,
    0xad,0xfe,0xd3,0x8e,0x75,0x03,0xd4,0xda,0x62,0x2b,0x15,0x23,0x2e,0x08,0x6e,0x10,
    0x03,0x04,0x14,0xca,0x12,0x15,0xa4,0xb6,0x2e,0xa3,0xd6,0x85,0xde,0xf3,0xbe,0xef,
    0xf0,0x3b,0xf9,0x19,0x33,0x73,0xf3,0x7e,0xe7,0x3b,0xcb,0x3d,0xf7,0xdc,0x73,0xcf,
    0x79,0x4b,0x90,0xc1,0x55,0x59,0xc8,0xb3,0xdd,0xb2,0x1e,0xd9,0xd7,0x31,0x2b,0xfe,
    0x7a,0x67,0x92,0xe5,0xbc,0x1e,0xc1,0xeb,0xf1,0xbc,0x8e,0x4c,0xd7,0x9e,0x59,0x65,
    0xc1,0x1f,0x75,0xfa,0xcf,0x4e,0x3f,0xe2,0xaa,0x5f,0x4e,0x3c,0xe2,0xe8,0x63,0x8e,
    0x54,0xbd,0x3d,0xb3,0x50,0xe8,0x2b,0x6f,0xaf,0xac,0x2a,0xab,0x48,0x57,0x35,0x39,
    0xf9,0xc2,0x4b,0xa7,0x28,0x3e,0x34,0x8d,0xe1,0x69,0xf4,0x4a,0xfa,0xb1,0xb0,0x97,
    0x65,0x27,0x52,0xbe,0xb0,0x97,0xd0,0xa1,0x85,0xfd,0x2c,0xdb,0x97,0xf4,0x70,0xd2,
    0xfb,0xa5,0x51,0x9b,0x2c,0xce,0x83,0x8b,0xd9,0x60,0x5e,0x0d,0xcb,0x89,0x45,0x87,
    0x09,0xb1,0x1e,0x0e,0x0b,0xc4,0x76,0x77,0x58,0x24,0xd6,0xcb,0x61,0x15,0xc4,0xfa,
    0x3a,0xac,0x92,0x58,0xff,0xc2,0xb7,0xb0,0x6b,0x0e,0xf5,0x73,0x45,0x72,0xe0,0x60,
    0xfa,0x64,0xf4,0x20,0x47,0xf7,0x91,0xae,0x7c,0xa5,0x07,0xed,0x5a,0x77,0x28,0xe8,
    0x01,0xe4,0xf5,0x17,0xac,0x59,0xe9,0x3e,0x69,0x06,0x9d,0x63,0x50,0x92,0x09,0x9c,
    0x6f,0x9f,0x24,0xa3,0xbe,0x1c,0x44,0xfd,0x7e,0x89,0xae,0xa2,0x7f,0xc6,0xef,0x49,
    0x7e,0x56,0x5c,0x63,0xb1,0xde,0x2a,0xc6,0x52,0xe5,0x7b,0xf3,0xb7,0x90,0xbf,0x37,
    0xf9,0xbd,0x49,0xf7,0x23,0x5d,0x49,0xf9,0x23,0x29,0x1f,0xc8,0x3f,0x8a,0x73,0x2b,
    0x3e,0x82,0xf4,0x50,0x62,0x87,0xd1,0xbf,0x61,0x8c,0xbd,0xf1,0x87,0x3b,0x7e,0xcf,
    0x02,0x2f,0xf9,0x77,0x1c,0x79,0x3d,0x1d,0xbf,0x86,0x7b,0x63,0xf4,0xa9,0x45,0x5e,
    0x95,0xec,0xd7,0x3a,0xbe,0xd2,0x75,0x65,0xf3,0x8f,0xe5,0xfa,0x4c,0xbf,0xbe,0x8c,
    0xdf,0xc0,0xf5,0xe8,0xfa,0x26,0x71,0x6e,0x3f,0x5f,0x13,0xfd,0x37,0xfa,0x32,0xe6,
    0x88,0xd1,0xcd,0xcc,0x85,0x21,0x29,0x52,0xaa,0x3f,0x99,0x6b,0x6a,0xa2,0x6c,0xb3,
    0x93,0xbd,0x3c,0x8d,0x9d,0x8e,0x9e,0x5a,0xe6,0xdb,0x74,0xfa,0x62,0xbe,0xcd,0x49,
    0xe3,0xf0,0x34,0x0e,0xcc,0xaa,0x77,0xe5,0xde,0x77,0x0d,0x8d,0xdf,0xbd,0xe9,0x5a,
    0x9d,0xc6,0x3c,0xc6,0x5b,0xe9,0xdf,0x11,0x33,0x9b,0x2d,0x4e,0xfe,0x3e,0xf2,0x2a,
    0x1d,0xff,0x7e,0xee,0x47,0xdf,0xe4,0xd9,0x03,0x0e,0x7f,0x90,0xeb,0x34,0xfa,0x09,
    0x9e,0x0b,0xa3,0x17,0xb9,0xb8,0x28,0xbd,0x98,0xe7,0xc7,0xe8,0xd6,0x34,0x06,0x32,
    0xce,0xab,0x38,0xa7,0xc6,0x79,0xff,0xf4,0xbf,0x2d,0x5d,0x57,0x31,0x5e,0x26,0xff,
    0x56,0x51,0x4b,0x10,0x57,0xe5,0xb5,0x73,0x2f,0x17,0x33,0xa7,0xde,0x72,0xb2,0xab,
    0xcb,0xd6,0xb8,0x86,0x67,0xdb,0x74,0xd7,0x52,0xb7,0x85,0xb2,0x6b,0x9c,0x6c,0x07,
    0x73,0xdc,0x64,0xd7,0x31,0x87,0x6a,0xc9,0x5b,0xe3,0x78,0xeb,0xc9,0x6b,0xa0,0x1f,
    0xde,0xce,0xdb,0xcc,0x1d,0x93,0x7d,0xc7,0xf9,0xdb,0x41,0xbe,0xc9,0x6e,0x48,0x63,
    0x37,0x27,0xbb,0xd1,0xf9,0x37,0x8c,0x7c,0xe3,0xfd,0x8b,0xf3,0xb5,0xd0,0x8e,0xe7,
    0x6d,0xa2,0x5e,0x6d,0x37,0xbc,0xcd,0xf4,0xd5,0xe6,0x5f,0xed,0x78,0x5b,0xca,0xd6,
    0xe8,0x79,0x5b,0xdd,0x1a,0xcb,0x79,0x9d,0x4e,0xaf,0xa5,0x8c,0xf7,0x2e,0x7d,0x69,
    0xe8,0x86,0xf7,0x1e,0xf3,0xaa,0x8e,0x32,0x9e,0xf7,0xbe,0x8b,0x67,0x07,0xd7,0x6f,
    0xbc,0x6d,0x6e,0x7d,0x2d,0xbb,0x78,0x7d,0x8a,0x7c,0xd9,0xce,0x9c,0x58,0xcb,0x3d,
    0x5b,0xcf,0x98,0x6f,0x64,0xcc,0x36,0x31,0x06,0x5b,0xb8,0xa6,0x4e,0xfa,0xf8,0x1e,
    0xe7,0xdc,0xc6,0x33,0xf0,0x6f,0xee,0x7f,0x9b,0xdb,0x9f,0x9e,0xa9,0x40,0xe4,0x5f,
    0xed,0xdc,0x69,0x74,0xef,0x44,0xef,0x0c,0x25,0xfe,0xde,0x4a,0x27,0xa5,0xef,0xa5,
    0xd3,0xda,0x3f,0x47,0x8d,0x55,0x9e,0xfe,0x3e,0x50,0x8b,0x4b,0xf6,0xcd,0xc9,0x46,
    0x0f,0x2c,0xe8,0xe9,0x23,0x8d,0x3e,0xb4,0xa0,0xb3,0x1a,0xa3,0x7f,0x52,0xd0,0x1b,
    0x4f,0xdc,0x55,0xef,0x72,0xf8,0x63,0x74,0x63,0x5e,0x3a,0x47,0x4a,0xdf,0x9e,0x77,
    0x3d,0xaf,0xf3,0x72,0xd4,0x14,0x3d,0x57,0x8f,0xa6,0xdf,0x0f,0xb0,0xa6,0x0c,0x48,
    0x27,0x62,0x59,0x8e,0x9c,0xac,0xc8,0xba,0xfe,0xe5,0xbc,0xee,0x97,0xfc,0x7f,0x25,
    0x11,0xcb,0x72,0xc4,0x62,0x39,0x19,0x8a,0x8d,0x20,0xbd,0x82,0x98,0xda,0xeb,0xcd,
    0x9e,0x94,0x97,0xd9,0x93,0xa2,0x46,0xb1,0x87,0x08,0xef,0x1f,0x04,0x36,0x94,0xee,
    0x43,0xcc,0xd6,0xd0,0x4f,0xd0,0xf3,0x87,0xa4,0x15,0x68,0xef,0xd0,0x5e,0xa7,0x58,
    0x3d,0xeb,0xf3,0x90,0xe4,0xb1,0xc6,0xe0,0x9f,0x11,0x7b,0x3e,0xcc,0x61,0xcf,0x46,
    0xe4,0xc4,0x58,0x87,0x2d,0x89,0xc8,0xa1,0x06,0x57,0x87,0x9f,0x8b,0xa8,0xb7,0x7e,
    0x58,0xcc,0xbe,0x4a,0xbc,0x1f,0x15,0x76,0x2b,0x0a,0xdf,0x79,0xcb,0x53,0xd4,0xde,
    0xcf,0x13,0x52,0xc1,0xfa,0xa9,0xb9,0x31,0x3a,0x60,0x3f,0x8c,0xfe,0x93,0x94,0x68,
    0xed,0x97,0x9b,0xf3,0xae,0xf4,0x07,0xa4,0x3f,0x4b,0xd6,0x8e,0xe6,0xba,0xbf,0x4c,
    0xbf,0xb5,0x27,0x1c,0x23,0xb0,0xaf,0xd7,0xe3,0xd9,0x4f,0x6b,0x04,0x3d,0xf3,0x8c,
    0xa4,0x55,0xdc,0x0b,0x09,0xb0,0x1a,0x29,0xed,0xd5,0x34,0xf6,0xf6,0x93,0x04,0xfc,
    0x99,0x5c,0xf7,0x48,0x01,0xa6,0x71,0x3a,0x29,0x61,0xda,0x3f,0x4f,0x11,0xf4,0x58,
    0x9d,0xef,0x78,0xeb,0x99,0x02,0xbc,0x35,0xc9,0x28,0xfd,0x53,0x01,0x56,0x43,0xdb,
    0x1a,0x93,0x51,0x02,0xfc,0x25,0xca,0xd4,0x51,0xe6,0x54,0x27,0x73,0x9a,0x00,0x57,
    0x19,0xa5,0x47,0x0b,0xf4,0xf4,0x5c,0xcf,0x24,0x36,0x46,0x70,0x5e,0x95,0x37,0x96,
    0xd8,0x99,0x02,0x5f,0xf5,0x6f,0x06,0xb1,0xb1,0x02,0x5c,0xe5,0xc7,0x25,0x44,0xd7,
    0xd3,0x12,0x81,0x9b,0xac,0xcd,0x73,0x16,0xe7,0x19,0xeb,0xe6,0xa9,0x27,0x7d,0x96,
    0x9b,0xe7,0x1c,0xea,0xe6,0x6e,0x9e,0x73,0x05,0x78,0xbd,0x9b,0xe7,0x0f,0x11,0xb8,
    0xce,0x97,0xbb,0x79,0x1a,0x04,0x6b,0xd4,0x3c,0x7a,0x9e,0xd8,0x78,0x62,0x3a,0xd7,
    0x99,0x8c,0xfb,0xf9,0x02,0x59,0xe5,0xcd,0x20,0x36,0x41,0x60,0x57,0x79,0xba,0x17,
    0xda,0x5b,0x1f,0xcc,0xd1,0x7f,0x1b,0xb8,0x17,0x6a,0xef,0xcf,0x39,0x70,0x93,0x79,
    0x88,0x32,0xb5,0x4e,0xe6,0xe1,0x1c,0xb8,0xcd,0xf7,0x48,0x0e,0x3d,0xc5,0x17,0x24,
    0x4c,0xcf,0xf9,0x63,0x39,0xe6,0x54,0x5e,0x4b,0xd2,0xd3,0x73,0x3f,0x9f,0xb8,0xe6,
    0xde,0x42,0x1e,0xd2,0xff,0x25,0x9e,0xe2,0x0b,0xd2,0x50,0x4c,0xf3,0x4f,0x7f,0x7f,
    0x91,0xae,0x47,0x33,0x1f,0x15,0x7f,0x9e,0x73,0x3d,0x45,0xbb,0x7a,0xce,0x5e,0x22,
    0xf6,0x34,0xb1,0x25,0xb1,0x14,0xeb,0x67,0x72,0xe0,0x99,0xdb,0x93,0xc5,0x39,0xd6,
    0xa1,0x3c,0x93,0x7b,0x96,0x72,0x7e,0x4f,0x96,0xe4,0x90,0x55,0x9e,0xe9,0x2e,0xa5,
    0xae,0x62,0x26,0xf7,0x52,0x0e,0x5c,0xed,0x69,0x6c,0xb4,0x2e,0xbd,0xca,0x9a,0x64,
    0xf6,0x5f,0xcf,0xe1,0xb3,0xb7,0xbf,0x92,0xf1,0xf2,0xfb,0xb8,0x2a,0x07,0xee,0x73,
    0xa8,0x2d,0x87,0xfe,0x2a,0x67,0xaf,0x9d,0xf6,0x7c,0xae,0xae,0xce,0x21,0xdb,0xee,
    0xf6,0x6d,0x0d,0xf7,0x6d,0xac,0xdb,0xb7,0xb5,0x39,0x70,0xd3,0xeb,0xc8,0xa1,0xab,
    0xf8,0xc4,0x24,0xa3,0x75,0x76,0x1d,0xd7,0x70,0x41,0x92,0xd1,0x3a,0xb5,0x9e,0x58,
    0x07,0x7d,0xd0,0xb3,0x77,0x89,0x00,0xcf,0x8b,0x9c,0x43,0x3d,0xbb,0x42,0x80,0xfb,
    0xd1,0x4a,0x1b,0x57,0x0a,0xf8,0x93,0x99,0xcb,0x8a,0x5d,0x2d,0xc0,0x9f,0x8b,0x25,
    0xbb,0xd7,0x0a,0x70,0xfd,0x5b,0x4a,0xec,0x57,0x02,0xbc,0x39,0x2b,0xc9,0x4d,0xa5,
    0x5c,0xee,0xe4,0xae,0x13,0xe0,0x7a,0x8f,0xf6,0x02,0xb1,0x69,0x02,0xfd,0xeb,0xa4,
    0xa4,0x7b,0x3d,0x75,0xc5,0xe9,0x4e,0x17,0xe0,0x4d,0x4e,0x77,0x86,0x40,0x7f,0xba,
    0xd3,0xbd,0x91,0xba,0xc1,0xe9,0xde,0x24,0xc0,0x47,0x38,0xdd,0x99,0x02,0xfd,0x9b,
    0x9c,0x6e,0x13,0x63,0x96,0xb9,0x98,0xfd,0x5a,0x80,0xfb,0x61,0x31,0xbb,0x4d,0xc0,
    0xf7,0x31,0xbb,0x43,0x80,0xfb,0x98,0xdd,0x29,0xc0,0x7d,0xcc,0x66,0x0b,0x70,0x1f,
    0xb3,0x39,0x94,0xf3,0x31,0x9b,0x2b,0xc0,0x7d,0xcc,0xee,0x12,0xe8,0xcf,0x75,0xbe,
    0xdf,0x43,0x5d,0x1f,0xb3,0x79,0x02,0xdc,0xc7,0xec,0x5e,0x81,0xfe,0x3c,0xa7,0xdb,
    0x42,0x5d,0x1f,0xb3,0xfb,0x04,0xb8,0x8f,0xd9,0xef,0x05,0xfa,0xca,0xd3,0xba,0xa2,
    0xbd,0xa6,0x59,0x10,0x4b,0xe5,0x9d,0x90,0x2c,0x68,0x2f,0x6b,0x96,0xd2,0xf9,0x98,
    0xcf,0x5a,0xa8,0xe7,0xf5,0x46,0x62,0x0b,0x04,0xcf,0x25,0xf3,0x5d,0x9d,0x5b,0x28,
    0x38,0x0b,0x2d,0xee,0x2c,0x3c,0x2e,0xc0,0x1f,0x49,0x32,0x5a,0x9b,0x9e,0x10,0x60,
    0xf7,0xb3,0x37,0x2e,0x96,0x52,0x7d,0x52,0xde,0x93,0x69,0x2c,0x62,0x3d,0x7a,0x92,
    0xb6,0xf5,0x1e,0xfe,0x2f,0x82,0x1e,0x5b,0xef,0xfa,0xd9,0x53,0x02,0xdc,0xfa,0xd2,
    0x5f,0x05,0xd8,0x2b,0x89,0x52,0xfa,0x6f,0x02,0xec,0x41,0xde,0x3b,0x68,0xad,0x5b,
    0x4c,0xdb,0x8b,0x9c,0xed,0xa7,0xbb,0xb1,0xfd,0x77,0x01,0xbe,0x3c,0x59,0x52,0xfa,
    0x1f,0x02,0xcc,0x6c,0xd9,0x9c,0xcf,0x08,0x78,0xde,0xb6,0x5e,0x3f,0x4d,0xb9,0x57,
    0x3c,0xef,0x44,0xf8,0xa1,0x6b,0x79,0x86,0x6b,0xb3,0x79,0x9f,0xed,0x66,0xde,0x25,
    0x02,0xdc,0xe6,0x7d,0x4e,0x80,0x3d,0xc1,0xde,0x60,0xf3,0xb6,0x0a,0x78,0xa6,0xb7,
    0xb4,0x4c,0xef,0x05,0x01,0xb6,0xa8,0x4c,0xef,0x45,0x01,0xcf,0xea,0xe1,0xcb,0x82,
    0xbd,0xd4,0xfb,0x6e,0xf3,0x6b,0x19,0xfd,0x7a,0xd9,0xd9,0x7f,0x45,0x80,0x5b,0x8f,
    0x5c,0x41,0x3d,0x7d,0x9e,0xb3,0x39,0x5f,0x15,0xc8,0xad,0x60,0x9f,0xb4,0x39,0x5f,
    0x13,0xf0,0x2c,0x77,0xde,0x10,0xdc,0x7b,0xcd,0x77,0x7e,0xac,0x14,0xe0,0xde,0x8f,
    0x55,0xf4,0x63,0xa5,0xf3,0xa3,0x4d,0x80,0x9b,0x1f,0xed,0xd4,0x6b,0xcd,0x4a,0xf7,
    0x35,0xab,0x05,0x72,0xed,0xee,0x3e,0x66,0x8d,0x00,0xaf,0x77,0x7e,0xad,0x15,0xe0,
    0x9a,0xf3,0x7a,0x3f,0xb7,0xbd,0x98,0xbb,0xb2,0x78,0xdf,0xb1,0x5e,0x70,0x8f,0xa7,
    0xf1,0x7a,0x4d,0x4a,0xf9,0xfc,0xb6,0x80,0x67,0x6b,0xd9,0x20,0xb0,0xa3,0xf7,0x3e,
    0x2f,0x12,0xdb,0x28,0x90,0xdb,0xe0,0xce,0xd0,0x26,0x41,0x2e,0x0c,0x73,0xfd,0x64,
    0xb3,0x00,0xd7,0xfd,0xb1,0xf3,0xb1,0x55,0xb0,0xb7,0x76,0x3e,0x76,0xb8,0xf3,0xa1,
    0xbc,0x4e,0xf5,0x93,0x79,0xd6,0xe9,0xec,0xbf,0x2f,0x98,0xb7,0xd5,0x61,0xdb,0x04,
    0xb8,0xe5,0xfe,0x0e,0xea,0x6d,0x97,0xae,0xf4,0x0e,0x97,0xaf,0x4b,0x23,0xf4,0x3a,
    0x69,0x6f,0xbb,0x94,0xfc,0xfd,0x8f,0xc0,0x67,0x95,0x79,0x88,0x67,0xec,0x13,0xc1,
    0x99,0xd6,0x67,0x25,0xf5,0xd9,0xf0,0xcf,0x89,0xeb,0x33,0x93,0x3e,0x27,0xed,0x9e,
    0xf5,0xc0,0x3d,0x37,0x6b,0xe3,0xe1,0xb4,0xa7,0xfa,0x2a,0xab,0x7a,0xfa,0x1c,0xa4,
    0x05,0x4c,0xf5,0x0e,0xe4,0x33,0xd3,0xe5,0x7c,0x3e,0x92,0x00,0x5d,0xa3,0x63,0x80,
    0xde,0xad,0xc9,0x37,0xa5,0x2b,0x02,0x64,0x14,0xbf,0x99,0x58,0x55,0x00,0xae,0x36,
    0x6f,0x20,0xd6,0x23,0x00,0xd7,0xe7,0xaf,0x29,0xdc,0xd3,0xea,0x00,0xdc,0x6a,0xe9,
    0x5e,0x01,0x3d,0x24,0xb8,0x1e,0x32,0x20,0x00,0xf7,0xc3,0x7a,0xc8,0xbe,0x01,0x7c,
    0xdf,0x43,0x0e,0x08,0xc0,0x7d,0x0f,0x19,0x18,0x80,0xfb,0x1e,0x72,0x50,0x00,0xee,
    0x7b,0xc8,0xc1,0x94,0xf3,0x3d,0x64,0x70,0x00,0xee,0x7b,0xc8,0xf7,0x03,0xf4,0x07,
    0x3b,0xdf,0x7f,0x40,0x5d,0xdf,0x43,0x0e,0x09,0xc0,0x7d,0x0f,0x39,0x34,0x40,0xff,
    0x10,0xa7,0xfb,0x43,0xea,0xfa,0x1e,0x72,0x58,0x00,0xee,0x7b,0xc8,0x90,0x00,0xfd,
    0xc3,0x9c,0xee,0xde,0x8c,0x99,0xb8,0x98,0x1d,0x15,0x80,0xfb,0x61,0x31,0x1b,0x1a,
    0xc0,0xf7,0x31,0x3b,0x26,0x00,0xf7,0x31,0xfb,0x71,0x00,0xee,0x63,0x76,0x6c,0x00,
    0xee,0x63,0x36,0x9c,0x72,0x3e,0x66,0x23,0x02,0x70,0x1f,0xb3,0xe3,0x02,0xf4,0x47,
    0x38,0xdf,0x4f,0xa0,0xae,0x8f,0x59,0x4d,0x00,0xee,0x63,0x76,0x62,0x80,0x7e,0x8d,
    0xd3,0x3d,0x99,0xba,0x3e,0x66,0x23,0x03,0x70,0x1f,0xb3,0x53,0x02,0xf4,0x95,0x67,
    0x7d,0xb7,0x6f,0x40,0x2c,0x95,0xa7,0x35,0x48,0x9f,0x19,0x15,0xd3,0x73,0x3f,0x29,
    0x74,0xed,0x8b,0x0d,0x89,0x9e,0x10,0x70,0x5e,0xf5,0xb7,0xd5,0xc8,0x9f,0x07,0x3c,
    0x6b,0xfa,0x1e,0x32,0x3e,0x00,0xb7,0x3a,0x77,0x7e,0x00,0x66,0x7d,0xf1,0x82,0x00,
    0xcc,0xf7,0xc5,0x49,0xb4,0x3d,0xc1,0xd9,0xbe,0xb0,0x1b,0xdb,0x17,0x05,0xe0,0x56,
    0xf3,0x2f,0x0e,0xc0,0xca,0xfb,0xe2,0xc4,0x00,0x9e,0xb7,0xad,0x57,0xab,0x33,0xcb,
    0x22,0xfc,0xd0,0xb5,0x4c,0xe4,0xda,0x6c,0xde,0x4b,0xba,0x99,0xb7,0x31,0x00,0xb7,
    0x79,0x2f,0x0d,0xc0,0xca,0xfb,0x62,0x53,0x00,0xcf,0xf4,0x9a,0xcb,0xf4,0x26,0x07,
    0x60,0xe5,0x7d,0x71,0x4a,0x00,0xcf,0x7c,0xb8,0x82,0x3e,0xf8,0x1e,0x78,0x65,0x00,
    0x6e,0xb6,0xae,0x0e,0xc0,0xca,0xfb,0xdd,0x35,0x01,0x3c,0xb3,0x75,0x1d,0x6d,0xf9,
    0x3e,0x36,0x2d,0x00,0xb7,0x9e,0x35,0x3d,0x00,0xf3,0x3d,0x6b,0x46,0x00,0xee,0x7b,
    0xd6,0x0d,0x01,0xb8,0xe6,0x8b,0xbe,0x93,0xf0,0x3d,0x6b,0x66,0xc0,0x7b,0x0a,0x5d,
    0xcb,0x35,0xa1,0xd4,0xb3,0x6e,0x0e,0xe0,0x59,0xcf,0xba,0x25,0xc0,0x8e,0xef,0x59,
    0xb7,0x06,0xc8,0x29,0xcf,0xfa,0xc7,0x6d,0x01,0xfb,0xe4,0x7b,0xd6,0xed,0x01,0xb8,
    0xef,0x59,0x77,0x04,0xc4,0xdd,0x7a,0xd6,0xdd,0x2e,0x77,0x95,0x37,0x2b,0x8d,0xb9,
    0xcc,0x81,0x59,0xce,0xfe,0x6f,0x03,0xe6,0x6d,0x72,0xd8,0x9c,0x00,0xdc,0xf2,0xf2,
    0x6e,0xea,0xcd,0x0d,0x5d,0xe9,0xbb,0x5d,0x2e,0x2d,0x8f,0xd0,0x9b,0x45,0x7b,0x2a,
    0x6b,0xfe,0xde,0x1b,0xe0,0xb3,0xca,0x58,0x0f,0xfa,0x63,0x28,0xf5,0x20,0xe5,0x5b,
    0x0f,0xb2,0xde,0xf2,0x70,0x80,0x8c,0xf5,0x96,0xc7,0x02,0x30,0xdf,0x5b,0x16,0x04,
    0xe0,0xbe,0xb7,0x2c,0x0c,0xc0,0x7d,0x6f,0x79,0x3c,0x00,0x9f,0xc6,0x7d,0xff,0x38,
    0xc7,0xf3,0xec,0x85,0x39,0x7c,0xaf,0x8a,0xa5,0xf7,0xfd,0xd5,0xac,0x55,0x13,0xc9,
    0xab,0xee,0x86,0x67,0x31,0x5f,0x1e,0xa0,0xab,0x32,0x1a,0xf3,0x37,0x5d,0xcc,0x95,
    0xb7,0x22,0x8d,0x37,0x19,0xab,0x15,0x6e,0xef,0x7b,0x51,0xa7,0x2a,0x96,0xd6,0xdb,
    0x3b,0x02,0x37,0x99,0xbe,0x11,0xf3,0x79,0x99,0x7d,0x22,0x70,0x8b,0x49,0xbf,0x08,
    0x4c,0x75,0x2d,0x26,0xfd,0x23,0x70,0x7d,0x97,0x69,0x31,0x19,0x10,0x81,0x6b,0x4c,
    0x26,0x33,0x06,0xfb,0x46,0xe0,0xd7,0x93,0xde,0x3f,0x02,0xb3,0xbc,0x3f,0x20,0x02,
    0xd3,0x77,0xa0,0x8f,0x72,0xbd,0x03,0x23,0xbe,0x93,0x1c,0xe0,0xee,0x3d,0x0e,0x8a,
    0xc0,0xeb,0xf8,0x5e,0xd9,0x62,0x3c,0x28,0x82,0xf7,0xa2,0xf5,0xce,0x08,0x3d,0xc5,
    0x35,0x87,0x2c,0x2e,0x6f,0x32,0x87,0x54,0xe6,0xf5,0x88,0x7a,0xad,0x79,0xa5,0xf2,
    0x1a,0xb3,0x85,0x9c,0x7b,0x55,0xc0,0xbe,0x35,0xf2,0x9d,0xca,0x3a,0x17,0x6b,0xe5,
    0xb5,0xa5,0xd1,0x41,0x9b,0x6d,0xcc,0xe5,0xe2,0x3e,0x34,0x60,0xff,0x3e,0xe6,0xbb,
    0x80,0xe2,0x3e,0x34,0x00,0xbf,0xcc,0xf5,0x8b,0xb5,0x01,0xf3,0xaf,0x61,0x8e,0xaf,
    0xa3,0xad,0x8e,0x32,0x7a,0x9d,0xf3,0xf7,0x8d,0x08,0xbd,0x36,0xf6,0x19,0x95,0xb5,
    0x58,0xbd,0x53,0xe6,0x6f,0xa7,0xf3,0x57,0x79,0x1b,0xd2,0xd8,0x4a,0x9b,0x1b,0x9c,
    0xbf,0x9b,0x9c,0xbf,0x37,0x12,0xdb,0x1c,0x80,0x7b,0x7f,0xb7,0xd0,0xdf,0xcd,0xf4,
    0xaf,0x93,0xb6,0xb6,0x96,0xd1,0x9d,0xce,0xdf,0x95,0x11,0x7a,0x1b,0xe8,0xaf,0xca,
    0x3e,0x4c,0x7f,0xdf,0x2f,0xf3,0xf7,0x53,0xe7,0xaf,0xf2,0xb6,0xa9,0x1d,0xda,0xd4,
    0xdf,0x96,0x27,0x1f,0xd0,0x8f,0x7a,0xe7,0xdb,0x8e,0x00,0xbc,0xd5,0xf5,0xde,0x0f,
    0x03,0xe2,0xb5,0xc3,0xe9,0xfe,0x97,0xba,0xfa,0x1e,0xdd,0x6a,0xf0,0x47,0x01,0x78,
    0x9d,0xd3,0xfd,0x24,0xc0,0xf7,0x8f,0xb8,0x36,0xf3,0xe3,0x53,0xb7,0xb6,0xf6,0x08,
    0x19,0x5d,0xef,0x27,0xe6,0x2f,0x79,0x6f,0x45,0xcc,0xad,0xbc,0x0f,0xc9,0x6b,0xcc,
    0xc1,0xfb,0x2c,0x94,0xce,0xb7,0xca,0x5d,0x96,0x95,0x78,0x5f,0x38,0x5e,0x3b,0x79,
    0xf6,0xcc,0xf3,0x65,0xc0,0x19,0xd6,0x77,0xfe,0x86,0x7d,0xcd,0xf3,0xaa,0xd8,0x52,
    0x62,0xdf,0x04,0xe0,0xc3,0xb8,0x1e,0xc5,0xf4,0xfb,0x85,0xea,0x7f,0xe3,0x6a,0x92,
    0xbe,0xf8,0x56,0xdc,0xd6,0x2c,0x11,0xd8,0x67,0xee,0x5e,0x25,0x46,0xe0,0xea,0x97,
    0xd5,0xae,0xa9,0xae,0x3e,0x3d,0x5e,0x56,0xbb,0xa6,0x75,0xc3,0xb3,0xda,0x75,0x42,
    0x84,0xee,0x34,0xd6,0xae,0x53,0x62,0x69,0xbf,0x95,0x57,0x93,0x86,0x62,0x1a,0xe7,
    0x1a,0x57,0x97,0x6e,0xa2,0xce,0x54,0x57,0x97,0x66,0x46,0xe0,0xbb,0x7a,0x5b,0xc4,
    0x7c,0x5e,0xe6,0xd6,0x08,0xdc,0x6a,0xd7,0x6d,0x11,0xd8,0x4c,0x57,0xbb,0x6e,0x8f,
    0xc0,0x7d,0xed,0xfa,0x4d,0x04,0xee,0x6b,0xd7,0x1d,0x11,0xb8,0xd5,0xae,0x3b,0x23,
    0x30,0xcb,0xab,0xd9,0x11,0x98,0xaf,0x5d,0x73,0x58,0xbb,0x66,0xbb,0xda,0x35,0x37,
    0x02,0x2f,0xaf,0x5d,0x77,0x45,0xf0,0xac,0x76,0xdd,0x13,0xa1,0x77,0x17,0x6b,0x97,
    0xc5,0x45,0xaf,0x96,0x63,0x5b,0x58,0xbb,0x34,0x27,0xef,0x61,0xfc,0x34,0xae,0x63,
    0x62,0xd7,0x3a,0x35,0x2a,0xd1,0xa3,0xa9,0xaf,0xbf,0xed,0xdc,0xd7,0xc5,0x6f,0xd7,
    0xa9,0xd3,0x22,0x70,0x7f,0xee,0x4f,0x8f,0x98,0xeb,0x34,0xfa,0x32,0x86,0xb6,0x46,
    0x97,0xd1,0x63,0x9c,0x6f,0x5b,0x23,0xf4,0x46,0xd1,0xc7,0xd1,0xf4,0xed,0xbc,0xd8,
    0xb5,0x26,0x8d,0xd3,0x77,0xf1,0xd4,0x1f,0xe7,0x7c,0xab,0x8f,0xdf,0xae,0x49,0x67,
    0x47,0xe0,0xde,0xb7,0x73,0xe8,0xdb,0xd9,0xf4,0xe5,0x3c,0xda,0x3a,0xb7,0x8c,0x3e,
    0xcf,0xf9,0xf6,0x6e,0x84,0xde,0x38,0xfa,0x76,0x2e,0x7d,0x6b,0x8c,0x5d,0xeb,0xcf,
    0xf8,0x44,0x37,0x52,0x7f,0xbc,0xdb,0xeb,0x0b,0x38,0xa7,0xaf,0x3f,0x13,0x22,0x70,
    0x5f,0x7f,0x2e,0x8a,0x88,0xc3,0x04,0xa7,0x3b,0x91,0xba,0xbe,0xfe,0x4c,0x8a,0xc0,
    0x7d,0xfd,0xb9,0x24,0xc2,0xcf,0x49,0x5c,0x87,0xf9,0xd1,0xe8,0xd6,0xb1,0x9d,0x32,
    0xba,0x36,0x95,0x1f,0xef,0x78,0xdb,0x38,0xb7,0xf2,0x2e,0x22,0xcf,0x6a,0x4c,0x93,
    0x3b,0xa3,0xdb,0xca,0xea,0x4f,0xb3,0xe3,0x6d,0x2f,0xab,0x3f,0x53,0x78,0x0e,0x7d,
    0xfd,0xf9,0x05,0xcf,0xa5,0xaf,0x3f,0x57,0x44,0xe0,0xbe,0xfe,0x5c,0x19,0xa1,0xaf,
    0x3c,0xcb,0xf9,0xab,0x22,0x70,0x5b,0xf3,0xd5,0x11,0x98,0xfa,0x67,0xf5,0xe7,0xda,
    0x08,0x5c,0xfd,0x3a,0x23,0xab,0x2e,0x9e,0x17,0x83,0xa0,0x2e,0x5d,0x1b,0x4b,0xdf,
    0xc8,0x84,0x3e,0x5b,0x6f,0xa9,0x10,0xdc,0x6f,0xd9,0xbd,0x69,0x95,0x7b,0x9f,0xa2,
    0xbc,0x4a,0xfd,0x8e,0xc7,0xf7,0x20,0x95,0xee,0x5d,0x66,0x0f,0xbe,0xcb,0xbc,0xdf,
    0xbd,0xcb,0xac,0x16,0xe0,0xb7,0x70,0x2d,0xbb,0x09,0xb0,0xda,0xac,0xa4,0xd7,0x93,
    0x7a,0x75,0x4e,0x6f,0x77,0x01,0x6e,0x7a,0x7b,0x08,0xb0,0x5a,0xf7,0x2d,0x69,0x4f,
    0x81,0xbd,0x3d,0xdc,0xb7,0xa4,0x5e,0x82,0x6f,0x10,0x7b,0xf2,0xb9,0x41,0xbf,0xa5,
    0xf6,0xe5,0x77,0xd4,0x8b,0x13,0xad,0xbf,0x55,0x26,0xf0,0x7d,0x8e,0xad,0xa3,0x4a,
    0xba,0x7e,0xd7,0xd1,0xeb,0xd7,0x29,0x3a,0xc7,0xa6,0xf1,0x7f,0xa1,0x81,0x00,0xf3,
    0xe4,0x25,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = kIsSigned != 0 ? bitfieldExtract(int(payload . y), 24, 8): int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     float scale = kIsSigned != 0 ? 127.0f : 255.0f;
//     return int(a / float(maxValue)* scale + 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rg = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
