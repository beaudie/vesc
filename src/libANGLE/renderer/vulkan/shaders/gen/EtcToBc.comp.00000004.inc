// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x0d,0x90,0x96,0x55,
    0x15,0x7e,0xef,0xb9,0xfb,0x87,0x6b,0xc4,0x46,0xe2,0x6e,0x14,0xa2,0xe8,0x90,0xa5,
    0x08,0x0c,0x6c,0xc0,0x42,0x0b,0x99,0xe3,0xce,0xe6,0x20,0x5b,0xb3,0xcd,0x34,0xdb,
    0x84,0xb0,0x5b,0xc8,0xcf,0xda,0x34,0x30,0xd9,0x20,0xa3,0xe4,0xd8,0x44,0xff,0x68,
    0xbf,0x58,0x84,0x8e,0xed,0x14,0x88,0xad,0x15,0x41,0x19,0x4c,0xec,0xfa,0xb1,0x8b,
    0x60,0xa4,0xe6,0x62,0x3a,0x96,0xf4,0xa7,0x83,0xa1,0x4d,0xc3,0xb0,0xca,0xc2,0xce,
    0x76,0xcf,0xfb,0x3c,0xc7,0xf7,0xf8,0x8d,0x31,0x73,0x79,0xbf,0xf3,0x9c,0xff,0x73,
    0xef,0x3d,0xf7,0xde,0x8d,0x32,0xad,0x3a,0x8b,0x21,0xbb,0x20,0xab,0xc9,0x36,0xc4,
    0x2c,0xff,0x57,0x97,0x49,0x16,0xf8,0x9d,0xc1,0xef,0x2c,0x7e,0x17,0xf1,0x7b,0x6d,
    0xfa,0xd6,0x66,0x55,0xb9,0xdc,0xf5,0x37,0x7c,0xec,0x86,0x19,0xeb,0x37,0x74,0xcd,
    0x98,0x33,0x77,0xa6,0xea,0x8f,0xcf,0x60,0x48,0x79,0x6f,0xcf,0xaa,0xb3,0xca,0xf4,
    0xad,0x48,0xa3,0x7b,0xc5,0xea,0x5b,0x14,0x9f,0x9d,0xc6,0x82,0x34,0x26,0x24,0xfd,
    0x8a,0xdc,0x5e,0x96,0x2d,0xa6,0x7c,0x6e,0x2f,0xa1,0xb3,0x73,0xfb,0x59,0xf6,0x2e,
    0xd2,0x0b,0x48,0x4f,0x4e,0xa3,0x25,0x59,0x1c,0x41,0xa8,0xd9,0x34,0x7e,0x0d,0x0b,
    0xc4,0x2a,0x1c,0x26,0xc4,0x6a,0x1c,0x16,0x89,0x5d,0xe8,0xb0,0x0a,0x62,0x13,0x1c,
    0x56,0x49,0xec,0x9d,0x0e,0xab,0x22,0x56,0x9f,0xc7,0x16,0xdf,0xf0,0xa1,0x71,0xee,
    0x4b,0x01,0x5c,0xc6,0x98,0x8c,0xbe,0xd4,0xd1,0xa7,0xca,0xf8,0xa7,0xc8,0x0f,0xb4,
    0xa5,0x74,0x03,0x79,0xe7,0x03,0x72,0x56,0x7a,0x62,0xf2,0xa0,0x3e,0x2e,0x4d,0x32,
    0x91,0xfe,0x2e,0x4a,0x32,0x1a,0xcb,0x54,0xea,0x5f,0x9c,0xe8,0x6a,0xc6,0x67,0xfc,
    0x5a,0xf2,0xb3,0xfc,0x5b,0x91,0xe7,0x5b,0xcd,0x5a,0xaa,0x7c,0x1d,0x7f,0x0b,0xf9,
    0xef,0x20,0xbf,0x8e,0xf4,0xc5,0xa4,0xab,0x28,0x3f,0x93,0xf2,0x91,0xfc,0x59,0xf4,
    0xad,0x78,0x13,0xe9,0xd9,0xc4,0xde,0xcf,0xf8,0x1a,0x59,0x7b,0xe3,0x2f,0x70,0xfc,
    0xda,0x1c,0x2f,0xe2,0x5b,0x48,0x5e,0xad,0xe3,0x37,0x73,0x6e,0x8c,0xbe,0x2e,0x5f,
    0x57,0x85,0xfd,0x16,0xc7,0x57,0xba,0xb5,0xcc,0x7f,0x1b,0xf3,0x33,0xfd,0xf6,0x32,
    0x7e,0x07,0xf3,0xd1,0xfc,0x3e,0x4d,0xdf,0xde,0xdf,0x1a,0xc6,0x6f,0xf4,0x5a,0xae,
    0x11,0xa3,0xd7,0x71,0x2d,0x5c,0x95,0x2a,0xa5,0xfa,0xdd,0xcc,0x69,0x0d,0x65,0xd7,
    0x39,0xd9,0xcf,0xa6,0x31,0xe6,0xe8,0x8d,0x65,0xb1,0xdd,0xc1,0x58,0x2c,0xb6,0x7b,
    0xd2,0xb8,0xda,0xd1,0xdb,0xe8,0xcb,0xe8,0x1d,0x5c,0x9b,0x46,0xf7,0xb8,0xd8,0x94,
    0xde,0xc5,0x35,0x6c,0x74,0x6f,0x1a,0x97,0x30,0xd7,0x83,0x9c,0x57,0xcd,0xf5,0xdd,
    0xe9,0xff,0xbe,0xf4,0x3d,0xc8,0x98,0x4d,0xbe,0x3f,0xdf,0xcf,0xc8,0x4d,0x79,0x8f,
    0xb2,0x9e,0xbb,0x38,0xaf,0xfd,0x4e,0xb6,0x44,0x7b,0x46,0x1f,0x4a,0x63,0x9c,0xa3,
    0x07,0xb8,0xdf,0xcc,0xd6,0x20,0x6d,0x95,0x28,0x3b,0xe0,0x64,0x0f,0x73,0xdd,0x99,
    0xec,0x63,0x9c,0xd7,0x16,0xf2,0x06,0x1c,0xef,0x08,0x79,0x1d,0x8c,0xcb,0xdb,0x39,
    0xca,0xf9,0x34,0xd9,0xc7,0x5d,0xfc,0x87,0xc9,0x37,0xd9,0x3f,0xa4,0x71,0x81,0x93,
    0x3d,0xe6,0xe2,0x6b,0x24,0xdf,0x78,0x7f,0xa4,0xbf,0x12,0xed,0x78,0xde,0x13,0xd4,
    0x6b,0x79,0x0b,0xde,0x93,0x8c,0xd5,0xfc,0x1f,0x72,0xbc,0xa7,0xca,0x72,0xf4,0xbc,
    0x3f,0xb9,0x1c,0xcb,0x79,0x4f,0x3b,0xbd,0x52,0x19,0x6f,0x88,0xb1,0x74,0x38,0x9e,
    0xe5,0x7b,0x9c,0xfb,0xce,0x64,0x9f,0x21,0xd6,0x4a,0x1d,0x6f,0xe7,0xcf,0xae,0xbe,
    0x87,0x59,0x0f,0xe3,0x3d,0xeb,0xf2,0x2d,0xbd,0xc1,0x9b,0x98,0xaf,0xa7,0xe7,0xb8,
    0x66,0x06,0x39,0x87,0x47,0x38,0x07,0xc7,0x58,0xc3,0x27,0x58,0x93,0xa7,0x98,0xe3,
    0xd3,0x8c,0xf9,0x19,0xfa,0x7c,0x96,0x7d,0xe1,0x2f,0x5c,0x0f,0x7d,0xf9,0x7a,0x97,
    0xec,0x64,0xfa,0x4e,0x49,0xab,0xcb,0xfa,0xf1,0xff,0x1b,0xaa,0x7b,0x8e,0xeb,0x70,
    0x84,0x3d,0x48,0xe9,0xf3,0xc4,0x94,0x3f,0xca,0xdf,0x7e,0xed,0x86,0xd4,0x20,0x36,
    0x8f,0x8d,0x8d,0x19,0x5d,0x1d,0xb0,0x37,0x8d,0xae,0x09,0xd8,0xc7,0x93,0xd2,0x6e,
    0x9d,0x10,0xd0,0x63,0x95,0xa7,0xbf,0xa7,0x68,0x73,0xc9,0x4e,0x2c,0x36,0x7a,0x6a,
    0x4e,0x67,0xcd,0xb6,0xc7,0xaf,0x08,0xc8,0xc5,0xe8,0xa5,0xa1,0xd8,0xa3,0x4a,0xaf,
    0x0f,0x45,0xbf,0xfd,0x46,0xfa,0x7d,0x92,0x3d,0xa2,0x21,0x45,0xb9,0x87,0x67,0x42,
    0x65,0xf6,0xe6,0x7f,0x81,0xdf,0xc9,0x29,0x9e,0x5f,0x27,0x62,0x4f,0x40,0x6e,0x7b,
    0xc9,0x50,0xac,0x89,0xf4,0x3e,0x62,0x6a,0xef,0xe5,0x50,0xf4,0x7f,0xff,0xcf,0xce,
    0x4c,0xb5,0xf1,0x6f,0xca,0xbf,0x4c,0x1b,0x4a,0x9f,0x22,0xa6,0x31,0xbe,0xce,0x78,
    0xa3,0xcb,0xe1,0x5c,0xc0,0x99,0x7e,0x55,0xe2,0xe8,0xd9,0xa0,0x67,0x99,0x62,0xed,
    0xec,0xbf,0x56,0xc7,0xf1,0xc9,0xd1,0x35,0xb9,0x5c,0x65,0x5e,0x93,0x9b,0x22,0xd6,
    0x4f,0xa3,0xc3,0x56,0x44,0xac,0xaf,0x36,0x87,0xad,0x8c,0x58,0x8f,0x1d,0xae,0xef,
    0x76,0x46,0xf4,0x57,0x3f,0x42,0x8a,0x4a,0x79,0xeb,0x73,0xbb,0x95,0x79,0x5e,0x15,
    0xcc,0x51,0xe3,0x7d,0x3d,0x21,0x95,0x5c,0x17,0xba,0xc6,0xb6,0x08,0xe6,0xa6,0x89,
    0x67,0xe1,0x31,0xce,0xd5,0x6b,0x49,0xba,0x9e,0x45,0x3a,0x97,0x7e,0x6b,0x7f,0x6f,
    0x10,0xe8,0xeb,0x77,0x11,0xcf,0xc6,0x69,0x82,0xf3,0xef,0xc6,0xa4,0xa5,0x67,0xe8,
    0xe5,0x02,0x6c,0x9a,0x14,0xf3,0xb4,0x89,0xe7,0xf4,0x15,0x02,0xfe,0x5d,0xcc,0x69,
    0xba,0x00,0xd3,0x1a,0x2c,0x49,0x98,0x9e,0x85,0xef,0x15,0x9c,0x97,0xea,0x6f,0x11,
    0x6b,0x7b,0xa5,0x00,0xef,0x4f,0x32,0x4a,0xbf,0x4f,0x80,0x35,0xd3,0x76,0xbe,0x8e,
    0x05,0xf8,0x20,0x65,0x66,0x50,0xe6,0x3a,0x27,0x73,0x8d,0x00,0x57,0x19,0xa5,0x67,
    0x09,0xf4,0x74,0xff,0xdf,0x45,0x6c,0xb6,0x60,0x5f,0x2b,0xaf,0x8d,0xd8,0x1c,0x41,
    0xac,0xfa,0x6f,0x33,0xb1,0xb9,0x02,0x5c,0xe5,0x3f,0x9a,0x10,0xcd,0xe7,0xfa,0x08,
    0xdc,0x64,0xcd,0xcf,0x3c,0xfa,0x69,0x73,0x7e,0xe6,0x93,0x9e,0xe7,0xfc,0x34,0x51,
    0x37,0x38,0x3f,0x0b,0x05,0xf8,0x7c,0xe7,0xa7,0x35,0x02,0x57,0x7f,0xc1,0xf9,0x69,
    0x16,0xe4,0xd8,0x91,0xf7,0x20,0x60,0x4b,0x88,0xa9,0xaf,0x65,0xac,0xfb,0x87,0x04,
    0xb2,0xca,0xdb,0x4c,0xec,0xc3,0x02,0xbb,0xca,0xd3,0xb9,0xd0,0x1e,0xb1,0x25,0xa0,
    0x6f,0x74,0x70,0x2e,0xd4,0xde,0x57,0x02,0x70,0x93,0xf9,0x2a,0x65,0x5a,0x9c,0xcc,
    0xd7,0x02,0x70,0xf3,0xf7,0xf5,0x00,0x3d,0xc5,0x7b,0x13,0xa6,0x7b,0xfc,0x9b,0x01,
    0x3e,0x95,0x77,0x6f,0xd2,0xd3,0x3d,0xff,0x2d,0xe2,0xba,0xf6,0xee,0xe6,0x7e,0x1b,
    0x49,0x3c,0xc5,0xb7,0xa6,0xa1,0x98,0xae,0x3f,0xfd,0x7d,0x36,0x7d,0xeb,0xb9,0x1e,
    0x15,0x7f,0x94,0xbe,0xbe,0x47,0xbb,0xba,0x87,0x06,0x89,0xdd,0x4b,0x6c,0x65,0x2c,
    0x6a,0xbd,0x3d,0x00,0xcf,0xdc,0x9c,0xfc,0x38,0x20,0x0f,0xe5,0x99,0xdc,0x7d,0x94,
    0xf3,0x73,0x72,0x7f,0x80,0xac,0xf2,0x4c,0xb7,0x87,0xba,0x8a,0x99,0xdc,0xcf,0x02,
    0xf0,0xed,0xa1,0x98,0x8f,0xdd,0xac,0x45,0x9b,0x9b,0xa3,0x5f,0xb0,0x36,0x7e,0x7d,
    0xfc,0x32,0x40,0x56,0x79,0x5a,0x57,0xed,0x67,0xbf,0x61,0x2f,0xb3,0xbd,0xf2,0x48,
    0xc0,0xde,0xdb,0xe8,0xf6,0xca,0xef,0x02,0x70,0x5b,0xf3,0xfb,0x03,0x30,0xb3,0x7b,
    0x20,0xc0,0xf6,0x7e,0x97,0xe3,0xef,0x03,0xea,0x16,0x9c,0xff,0xbe,0x00,0x7c,0xb7,
    0xcb,0xa7,0x3f,0x40,0xbf,0xcf,0xe9,0x96,0xa8,0xeb,0xf7,0xc6,0xa1,0x00,0x59,0xe5,
    0x75,0xa5,0x38,0xb4,0x37,0x0f,0x30,0xfe,0xe5,0x49,0x46,0xfb,0xd3,0x20,0xb1,0x43,
    0xb4,0xa5,0xb1,0x7f,0x44,0x80,0x87,0x7c,0xad,0xa2,0xc7,0xb5,0x0b,0x70,0x3f,0xfa,
    0x69,0xe3,0xe3,0x02,0x7e,0x37,0xf7,0x80,0x62,0x9f,0x10,0xe0,0x9d,0xb1,0xb0,0xdb,
    0x21,0xc0,0xb3,0xfc,0xbc,0x06,0xf6,0x49,0x01,0xbe,0x2e,0x2b,0xe4,0x3e,0x45,0xb9,
    0xe0,0xe4,0x96,0x0b,0xf0,0xb5,0xf9,0xfd,0x00,0xd8,0x4d,0x02,0xfd,0xe5,0x52,0xe8,
    0xae,0xa4,0xae,0x38,0xdd,0x4e,0x01,0xbe,0xc6,0xe9,0x76,0x09,0xf4,0x3b,0x9d,0xee,
    0x67,0xa8,0x1b,0x9d,0xee,0x2a,0x01,0xde,0xe4,0x74,0x6f,0x16,0xe8,0xaf,0x72,0xba,
    0x4b,0x59,0xb3,0xcc,0xd5,0xac,0x5b,0x80,0xfb,0x61,0x35,0xbb,0x45,0xc0,0xf7,0x35,
    0xfb,0x9c,0x00,0xf7,0x35,0x5b,0x2f,0xc0,0x7d,0xcd,0x36,0x08,0x70,0x5f,0xb3,0xcf,
    0x53,0xce,0xd7,0xec,0x56,0x01,0xee,0x6b,0xf6,0x05,0x81,0xfe,0xad,0x2e,0xf6,0x8d,
    0xd4,0xf5,0x35,0xbb,0x4d,0x80,0xfb,0x9a,0x6d,0x12,0xe8,0xdf,0xe6,0x74,0x6f,0xa7,
    0xae,0xaf,0xd9,0x1d,0x02,0xdc,0xd7,0x6c,0xb3,0x40,0x5f,0x79,0xda,0x8f,0xf4,0x8c,
    0x5a,0x26,0xa8,0xa5,0xf2,0x3e,0x98,0x2c,0xe8,0x99,0xb7,0x4c,0x8a,0xb5,0xbf,0x95,
    0x3d,0x54,0xf7,0xf9,0x9d,0xc4,0xee,0x16,0xbc,0x4d,0xb6,0xb2,0x3f,0xea,0xbd,0xfe,
    0x1e,0xc1,0x79,0xd9,0xee,0xf6,0xdf,0xb7,0x05,0xf8,0xd1,0xa4,0xa5,0xf4,0x77,0x04,
    0xd8,0x36,0x9e,0xf1,0xb6,0x2f,0xbf,0x2b,0xe0,0x99,0xde,0xf7,0xcb,0xf4,0x7e,0x20,
    0xc0,0x76,0xb0,0xb7,0x9a,0xde,0x36,0x01,0xcf,0xf4,0x7e,0x58,0xa6,0xf7,0x23,0x01,
    0xd6,0x53,0xa6,0xb7,0x5d,0xc0,0xb3,0x9e,0xb3,0x43,0x90,0x93,0xde,0x6f,0x2d,0x9f,
    0xfb,0x98,0xcf,0x0e,0x67,0xff,0x7e,0x01,0x6e,0x67,0xcc,0x03,0xd4,0xeb,0xcd,0x0a,
    0x9f,0x3f,0x11,0xc8,0x3d,0xc0,0x73,0xc6,0x7c,0xf6,0x08,0x78,0x56,0xc3,0x9f,0x0a,
    0xee,0x3f,0x5b,0x5d,0x1c,0x3b,0x05,0xb8,0x8f,0x63,0x17,0xe3,0xd8,0xe9,0xe2,0x78,
    0x50,0x80,0x5b,0x1c,0x0f,0x51,0xaf,0x37,0x2b,0xee,0x05,0x3f,0x17,0xc8,0x3d,0xe4,
    0xee,0x01,0xbd,0x02,0xbc,0xdd,0xc5,0xf5,0xb0,0x00,0xd7,0xb9,0xd7,0xfb,0xcf,0x73,
    0xb9,0xef,0xaa,0xfc,0xed,0xff,0x2b,0xc1,0x9d,0x48,0xeb,0xd5,0x23,0xc5,0x99,0xb6,
    0x47,0xc0,0xb3,0x5c,0xf6,0x0a,0xec,0xb4,0xe6,0xef,0x2f,0x60,0xfb,0x04,0x72,0x7b,
    0xdd,0x5a,0xfa,0xad,0x60,0xae,0x1b,0x5d,0x7f,0x7c,0x44,0x80,0xeb,0xfc,0x3c,0x98,
    0x30,0x3d,0xfb,0xf6,0x0b,0xe6,0xf6,0x38,0xef,0x5e,0x25,0x29,0xce,0x3f,0xe5,0x1d,
    0xd0,0x3d,0xcc,0xf3,0xee,0x80,0xb3,0x7f,0x50,0xe0,0x77,0x9b,0xc3,0xfa,0x04,0xb8,
    0xfa,0xd4,0x73,0xb2,0x44,0x3d,0xd5,0xf7,0xb4,0x7e,0xcf,0xa4,0x9e,0xa1,0x3a,0x5d,
    0x11,0x7a,0x07,0x68,0xaf,0x5f,0x8a,0x78,0x07,0x05,0x31,0xab,0x8c,0xcd,0xdb,0x63,
    0x02,0xbc,0x23,0x2b,0xee,0x02,0x47,0x04,0x77,0x81,0x92,0xbb,0x0b,0x1c,0x15,0xe0,
    0x96,0xe7,0xe3,0x02,0x4c,0xf3,0xdc,0x99,0x24,0xf2,0x77,0xa8,0x00,0xd7,0x37,0x88,
    0xc7,0x9f,0x24,0xae,0x6f,0x11,0x7d,0x7f,0x5c,0x98,0xd5,0xe4,0xf8,0x10,0xfb,0xcd,
    0xd5,0x8c,0x43,0xf5,0x55,0x76,0x13,0xd7,0xca,0x50,0xc0,0xd9,0xbb,0x22,0x20,0xb7,
    0xe9,0xb1,0xf8,0x3b,0xc3,0x10,0xfb,0x52,0x17,0x79,0x57,0xbe,0x05,0xcf,0x62,0x7d,
    0x45,0xa0,0xab,0x32,0x3a,0x27,0xa7,0xdd,0x9c,0x28,0xef,0xd5,0x34,0x4e,0xb3,0x96,
    0xaf,0xba,0xb5,0x31,0x93,0x3a,0xd3,0xf3,0xfb,0x39,0xde,0x44,0xb3,0x22,0x70,0x93,
    0x99,0x13,0xe1,0xcf,0xcb,0xcc,0x8d,0xc0,0xb7,0x24,0x19,0xa5,0x3f,0x10,0x81,0xa9,
    0xee,0x97,0x88,0xcd,0x8b,0xc0,0xf5,0xcd,0xf5,0x45,0x62,0xf3,0x23,0x70,0x7d,0x77,
    0x75,0xb3,0x06,0x0b,0x22,0xf0,0xdb,0x49,0x2f,0x8c,0xc0,0x6c,0x5f,0x2c,0x8a,0xc0,
    0xf4,0x6d,0xb6,0x9b,0xf9,0x36,0x47,0xde,0x25,0x62,0x31,0x07,0x8b,0x23,0xf0,0x56,
    0xbe,0x95,0xad,0xc6,0x4b,0x22,0x78,0x03,0xb4,0x77,0x6d,0x84,0x9e,0xe2,0xba,0xc6,
    0xac,0x2e,0xa7,0xb9,0xc6,0xf2,0x73,0x2e,0xa2,0x37,0xeb,0xba,0x53,0x79,0xad,0xd9,
    0xc3,0xf4,0x7d,0x46,0x30,0x6f,0x4b,0x79,0xff,0x1b,0x75,0xb5,0x56,0xde,0xb0,0xae,
    0x2d,0xda,0x1c,0xe6,0x5a,0x57,0x9b,0x67,0x05,0xf3,0x37,0xc4,0x7b,0x8a,0x62,0x23,
    0x02,0x7c,0xad,0x3b,0x1b,0xce,0x09,0xfc,0x8f,0x70,0x0f,0x8c,0xd2,0xd6,0xf9,0x32,
    0x7a,0xd4,0xc5,0xbb,0x2a,0x42,0x6f,0x98,0x67,0x8a,0xca,0xde,0x1c,0xc0,0x1b,0x93,
    0x62,0xdd,0xa8,0x9c,0xfa,0xb2,0x3a,0x86,0xf8,0xe6,0x5c,0xc6,0xc5,0x22,0x17,0xe5,
    0x49,0x1a,0x35,0x11,0xfe,0xf4,0xb7,0xe5,0x52,0x19,0x8b,0x5c,0xee,0x24,0x56,0x15,
    0x81,0xfb,0x5c,0xaa,0x23,0x72,0xa9,0x62,0xad,0xc7,0xd1,0x56,0x4d,0x19,0xad,0x5f,
    0xcb,0x65,0x75,0x84,0x9e,0x70,0x0e,0x54,0xd6,0x72,0xa9,0x75,0x7b,0x60,0x35,0x7d,
    0xed,0x62,0x2e,0x6f,0x2b,0xcb,0xa5,0xc1,0xe5,0xa2,0xbc,0xf1,0x69,0x34,0xd0,0xdf,
    0x78,0xb7,0xbe,0x26,0x30,0xc6,0x76,0x17,0x77,0x5d,0x04,0xde,0xeb,0xce,0xe7,0x89,
    0x11,0xb5,0xac,0x73,0xba,0x17,0x51,0x57,0xff,0x2e,0x60,0xbd,0x7d,0x52,0x04,0xde,
    0xea,0x74,0xeb,0x23,0x62,0x9f,0xc4,0xbc,0x2d,0x8e,0x06,0x97,0x77,0x37,0x65,0xb4,
    0x16,0xf5,0x8c,0xd7,0x78,0xeb,0xe8,0x5b,0x79,0x13,0xc9,0xb3,0xf3,0x65,0x32,0xf7,
    0xb0,0xf6,0x1d,0xc3,0xde,0xc3,0x3d,0xad,0x58,0x89,0xd8,0x94,0x08,0xbc,0x91,0x71,
    0x29,0x76,0x49,0x84,0xbe,0xf2,0x6c,0xbf,0x4c,0x8d,0xc0,0x2d,0xf6,0xcb,0x22,0x30,
    0x8d,0xc1,0xee,0x25,0x97,0x47,0xe0,0x1a,0xf3,0x8d,0xd9,0xb8,0xfc,0x6e,0xf6,0x7c,
    0xc0,0x5b,0x5e,0x79,0x15,0x7c,0x4f,0x57,0x72,0xae,0x6c,0x8e,0xfe,0xca,0x7e,0x67,
    0x67,0xc7,0x09,0xf7,0x76,0x52,0xde,0x0b,0x69,0x9c,0xe0,0xdb,0xe9,0x05,0xf7,0x76,
    0xfb,0x1b,0xdf,0x6e,0xc7,0x5d,0xbf,0xfe,0x7b,0x00,0xfe,0x65,0xe6,0xf2,0x8f,0x00,
    0xac,0xc5,0xf5,0xf9,0x7f,0x52,0xaf,0xd5,0xe9,0xfd,0x2b,0x00,0x37,0xbd,0x17,0x03,
    0xb0,0x16,0xf7,0xee,0x7c,0x29,0xc0,0xde,0x8b,0xa1,0x78,0x77,0x9e,0xe4,0xfb,0xe1,
    0x25,0xbe,0x73,0xf4,0x6f,0x2e,0xaf,0xf0,0xef,0x2d,0xf6,0xc6,0xf8,0x4f,0x80,0x5c,
    0x96,0x15,0xd8,0x7f,0x89,0x05,0x17,0xd7,0x19,0xc6,0xd5,0xe6,0xe2,0x1a,0x0e,0xc0,
    0xed,0x2c,0x7b,0x8d,0x6f,0x9f,0xe1,0xfc,0x7d,0x5a,0x95,0xff,0x2d,0xe7,0x6c,0x80,
    0x0f,0xb5,0xa9,0xfc,0x4e,0xed,0xef,0xc4,0x9f,0xe7,0x5b,0xd3,0xea,0x77,0xa2,0xec,
    0xed,0xa9,0xdf,0xd1,0x14,0xc5,0xbc,0x34,0xfe,0x07,0x74,0x71,0xab,0xdc,0x5c,0x1a,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//  uniform int kOffsetX;
//  uniform int kOffsetY;
//  uniform int kOffsetZ;
//     uniform int kWidth;
//  uniform int kHeight;
//     uniform int kAlphaBits;
//  uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//  int blockid = int(gl_LocalInvocationID . x >> 4u);
//  int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//  int a = base * 8 + 4;
//  a += multiplier != 0 ? mod * multiplier * 8 : mod;
//  a >>= 3;
//  int minValue = kIsSigned != 0 ? - 128 : 0;
//  int maxValue = kIsSigned != 0 ? 127 : 255;
//  return clamp(a, minValue, maxValue);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//  vec3 dir = minColor - maxColor;
//  float distMin = dot(minColor, dir);
//  float distMax = dot(maxColor, dir);
//  float dist = dot(color, dir);
//  uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//  uint bit0_in = factor & 1u;
//  uint bit1_in = factor >> 1;
//  return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//  ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//  float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//  float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//  float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//  float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//  float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//  float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//  vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//  float eigenvalue = 0.0f;
//
//  for(int i = 0;i < 4;i ++){
//   float r = dot(vec3(cov0, cov1, cov2), vg);
//   float g = dot(vec3(cov1, cov3, cov4), vg);
//   float b = dot(vec3(cov2, cov4, cov5), vg);
//   vg = vec3(r, g, b);
//   eigenvalue = sqrt(dot(vg, vg));
//   if(eigenvalue > 0.0f){
//    float invNorm = 1.0f / eigenvalue;
//    vg *= invNorm;
//   }
//  }
//
//  const float kDefaultLuminanceThreshold = 4.0f * 255;
//  const float kQuantizeRange = 0.512f;
//
//  if(eigenvalue < kDefaultLuminanceThreshold){
//   vg = vec3(0.299f, 0.587f, 0.114f);
//  }
//  else {
//   float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//   vg *= kQuantizeRange / magn;
//  }
//  float dist = dot(vec3(rgbColor), vg);
//  float min_dist = subgroupClusteredMin(dist, 16);
//  float max_dist = subgroupClusteredMax(dist, 16);
//  uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//  uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//  minColor = subgroupShuffle(rgbColor, min_index);
//  maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//  float dist = float(maxAlpha - minAlpha);
//  uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//  ind = - ind & 7;
//     ind ^= int(2 > ind);
//  return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//  minAlpha = subgroupClusteredMin(alpha, 16);
//  maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//  int minValue, maxValue;
//  ComputeMaxMin(value, minValue, maxValue);
//  uint indices = 0;
//  if(minValue != maxValue)
//   indices = GetIndicesAlpha(value, minValue, maxValue);
//
//  uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//  uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//  if(pid == 5){
//   mask0 |=(indices & 0x1)<< 31;
//   mask1 |=(indices & 0x6)>> 1;
//  }
//  return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//  return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//  uint t = a;
//  a = b;
//  b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//  if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//   return;
//
//  ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//  int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//  int texOffsetY = kWidth >> 2;
//  int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//  ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//  uvec4 finalResult;
//
//  finalResult . rb = EncodeBC4(result . r, pid);
//
//  if(pid == 0){
//   tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//   imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//  }
//
// }
