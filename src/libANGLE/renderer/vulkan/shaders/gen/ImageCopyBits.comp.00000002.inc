// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x55,0xcb,0x4b,0xd4,0x51,
    0x14,0xbe,0xe7,0xf7,0x1b,0xc7,0xa6,0x34,0xed,0x4d,0x59,0xe2,0x63,0x1c,0x9d,0x14,
    0x09,0x6c,0x4c,0x2a,0x47,0x22,0x1b,0x1f,0x4d,0x45,0xd4,0x5a,0x28,0xd2,0x9c,0x85,
    0x11,0x94,0xbb,0x16,0x2d,0xa2,0x9d,0xff,0x40,0xeb,0x5e,0x5a,0x89,0x3d,0x44,0xd4,
    0x68,0xdf,0xa6,0xd7,0x46,0x04,0x11,0x44,0x70,0x5b,0x46,0xa4,0x15,0x41,0xe7,0xdc,
    0xfb,0x5d,0x3d,0x8d,0x0e,0x5c,0xee,0x3d,0xdf,0x3d,0xe7,0x3b,0x8f,0xdf,0x77,0x35,
    0x0c,0xaa,0x0b,0x8d,0x21,0xb3,0xd5,0x6c,0x31,0xe7,0xc9,0xd8,0xdf,0x0e,0x13,0x18,
    0x39,0x6e,0x33,0x51,0xbb,0x77,0x64,0x2f,0x65,0x1b,0x6f,0xdd,0xbe,0xd6,0x78,0x34,
    0x75,0x44,0xee,0xb7,0x9b,0xd0,0xfa,0xc9,0x5d,0x09,0xfb,0x14,0xf0,0x1e,0xe1,0x35,
    0x70,0x25,0x77,0x43,0xf0,0x32,0x5e,0xa5,0x8c,0x47,0x2c,0x97,0x61,0x66,0xb7,0x2c,
    0x17,0xa3,0x65,0x96,0xdb,0x98,0x83,0xbc,0x3a,0x39,0x3a,0xe1,0xd2,0x9a,0x6a,0xec,
    0x1e,0x23,0x60,0x45,0x0a,0x0b,0x80,0x95,0x2a,0x2c,0x04,0xa6,0xf9,0x22,0xc0,0x2a,
    0x14,0x56,0x00,0x2c,0xae,0xb0,0x28,0xb0,0x3a,0x5b,0x5b,0xb8,0x96,0x43,0xea,0xcc,
    0xf0,0x5e,0x85,0x9a,0xbc,0x5d,0xa9,0xec,0x5e,0xc4,0x47,0xc0,0xd7,0x97,0xd7,0x87,
    0xf0,0xf5,0xa1,0x3e,0xf1,0xef,0xcf,0xe3,0xeb,0x07,0x9f,0x9f,0xcb,0x14,0xe6,0xb2,
    0x9f,0xd7,0x2e,0xae,0x22,0xb0,0xf7,0xa1,0x8d,0x97,0xf3,0x1e,0xf6,0x89,0xa2,0x27,
    0x03,0xbb,0x08,0xb6,0x70,0xec,0x63,0xbb,0x18,0xf3,0x0a,0x61,0x97,0xa0,0xc6,0xd0,
    0xfa,0x45,0xcc,0x81,0xb5,0xef,0x66,0xcc,0x09,0xd8,0x65,0xc0,0xea,0xc1,0x5f,0x0e,
    0xfe,0x7a,0x95,0x4f,0xee,0xf7,0x32,0x8b,0x9f,0xa9,0x70,0xc7,0xd1,0xab,0xcf,0x55,
    0x83,0x5c,0x81,0xe5,0x88,0xd9,0x59,0xc6,0x81,0x15,0x63,0xf7,0xab,0x06,0xf5,0xd4,
    0xf2,0x1e,0xe3,0x95,0x40,0x3d,0xb5,0xf8,0x16,0x31,0xe4,0x97,0x5e,0x92,0x98,0xb1,
    0xf8,0x1f,0xc6,0x5d,0x54,0xd5,0xd7,0x84,0x1a,0xbc,0x9d,0x82,0xbf,0x8f,0x4f,0xa3,
    0x26,0x89,0x6f,0x43,0x7c,0xb1,0x9d,0x73,0xcc,0xb4,0x83,0x0b,0xd2,0x5f,0xfb,0x05,
    0x98,0x83,0xc4,0x9c,0x01,0xd6,0x8e,0x1a,0xc5,0xce,0x00,0x93,0xbe,0x3b,0x31,0xf3,
    0x00,0xf6,0x59,0xa5,0x0b,0x5f,0xd3,0x65,0x68,0xd6,0xd7,0xd4,0x83,0x9c,0x87,0xb8,
    0x72,0xaf,0xa3,0x72,0xe8,0xa5,0x17,0x79,0xaf,0x83,0xb3,0x0f,0x79,0xc5,0xee,0x07,
    0xe6,0x79,0x72,0xa8,0x43,0xfc,0x07,0x70,0xa7,0x67,0x33,0xa8,0xfc,0xc5,0x1e,0x42,
    0xad,0xe2,0xff,0x18,0xb3,0x90,0x6f,0xb4,0x9b,0xbd,0x86,0x51,0xff,0x08,0xef,0xc3,
    0x6a,0xa6,0xe2,0x3f,0x96,0x37,0xe3,0x49,0xbc,0xe9,0x06,0xb6,0x44,0x4b,0x53,0xc0,
    0x26,0xa1,0x8f,0x66,0x7e,0x0f,0x01,0x66,0x60,0x10,0xbb,0xca,0x88,0xbc,0xc1,0x15,
    0xb6,0xa6,0x81,0xff,0xe1,0xb3,0xcc,0xf9,0x2d,0xee,0x65,0x6f,0x85,0x6e,0x1f,0x42,
    0x9b,0x37,0xa1,0xb5,0x47,0xc0,0x4e,0x31,0x8b,0xd4,0xfe,0x04,0x5a,0xc9,0x21,0x46,
    0x7c,0x9e,0x02,0x7f,0xc7,0x3e,0xd2,0xc7,0x33,0xc4,0x09,0xfe,0x80,0x7d,0xa4,0xaf,
    0xe7,0xc0,0xa5,0x8e,0x51,0xd4,0xf1,0x9b,0xef,0x04,0x7f,0xc1,0x6b,0x14,0xb5,0xc8,
    0xf9,0x17,0xef,0xd3,0xb0,0x47,0x91,0x5b,0x34,0xf8,0x12,0xb9,0xc7,0x90,0x5b,0x66,
    0xf2,0x0a,0xf8,0x08,0xfb,0x48,0x9e,0xd7,0xc0,0x52,0xc8,0x35,0xae,0x72,0xc9,0xdd,
    0x1b,0x5e,0x13,0xe0,0x96,0xf3,0x1d,0xbc,0xdf,0xf7,0xe8,0xf3,0x22,0xf3,0x08,0xef,
    0x57,0xd8,0xa4,0xf2,0x7f,0x43,0xfe,0xa4,0xca,0xbf,0x0c,0xfc,0x1e,0xe2,0xbe,0x23,
    0x76,0x59,0x71,0xfd,0x00,0x97,0x51,0x7e,0x3f,0x81,0x8b,0x46,0xef,0x02,0x5b,0x01,
    0x2e,0x6f,0xeb,0x3e,0xb0,0x55,0xe0,0x29,0xe5,0xf7,0x17,0x79,0x56,0x51,0x5b,0x1b,
    0xfe,0x31,0xd4,0xe1,0xdd,0xb5,0xa2,0x27,0x22,0x87,0x4b,0x9c,0xd8,0x21,0xb9,0x3e,
    0x05,0x17,0x1f,0x79,0x5b,0x11,0x72,0xef,0xea,0x82,0x29,0xb4,0x6f,0x2a,0x4a,0xce,
    0x2f,0xc4,0xe3,0x94,0xed,0x2a,0xc7,0xcb,0xfb,0x2a,0x24,0xe7,0x2f,0x3e,0x7e,0x26,
    0x1f,0x30,0x93,0x1e,0x35,0x93,0x8f,0xc0,0x7d,0xff,0x9f,0x10,0x6b,0x14,0xf6,0x19,
    0x18,0x29,0xec,0x0b,0xb0,0xc0,0xf6,0x15,0xb5,0x6f,0x6b,0x06,0xef,0x2f,0x87,0xbe,
    0xd3,0xfc,0x4d,0x67,0xc0,0xe9,0xe7,0x31,0x8b,0xbb,0x0a,0x15,0x37,0xa7,0xe2,0x66,
    0x11,0x37,0x87,0xbc,0x3e,0x6e,0x1e,0x71,0x83,0x2a,0x6e,0x41,0xc5,0xcd,0x23,0x6e,
    0x01,0xb5,0xf9,0xb8,0x45,0xc4,0x35,0xa9,0xb8,0x25,0x15,0xb7,0x88,0xb8,0x25,0xcc,
    0x42,0xf4,0x3c,0x0e,0xcd,0x4d,0x28,0xcd,0xed,0xa4,0xff,0x35,0x97,0xa2,0x8d,0x9a,
    0x6b,0xa6,0x8d,0x9a,0x3b,0x46,0x0e,0xf7,0x5a,0x6a,0x21,0x17,0x2b,0xb8,0xe7,0x3a,
    0x4e,0x1b,0x35,0x77,0x92,0x1c,0x3e,0xa4,0x7a,0x69,0x25,0x87,0x6b,0xcd,0xa5,0xc9,
    0xe1,0x5a,0x73,0xa7,0xc9,0xe5,0x49,0xd3,0xba,0xe6,0x32,0x9b,0x68,0xae,0x83,0x1c,
    0xee,0x35,0xd7,0x45,0xae,0xcf,0x0e,0xa5,0xb9,0xee,0x3c,0xcd,0x65,0xc9,0xf9,0x75,
    0x6d,0xa2,0xb9,0x73,0xe4,0xfc,0xb3,0xaa,0xb7,0x4a,0x72,0xb8,0x51,0xf3,0xaf,0xa2,
    0xf5,0xf9,0x4b,0xad,0x32,0x7f,0xc1,0x2a,0x69,0xbd,0x87,0x38,0xb9,0xbb,0x0a,0x35,
    0xf3,0x04,0xb8,0x48,0x71,0xd5,0x2a,0xae,0x38,0xb8,0x04,0x4b,0x28,0xae,0x24,0xb8,
    0x06,0x15,0x57,0x3d,0xb8,0xb4,0x7e,0x1b,0x14,0x57,0x12,0x5c,0x82,0x89,0xaf,0xd6,
    0xc5,0x78,0xde,0xdf,0xbd,0x69,0xab,0x31,0x32,0x2d,0xbc,0xfe,0x01,0x53,0x0f,0xbd,
    0xc0,0x30,0x0a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform uimage2D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = 0;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord . xy). rgb;
//
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 16;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= v . r;
//     destData[destOffset + 1]= v . g;
//     destData[destOffset + 2]= v . b;
//     destData[destOffset + 3]= v . a;
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint pixelBytes = 12;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     destData[destOffset]= v0 . r;
//     destData[destOffset + 1]= v0 . g;
//     destData[destOffset + 2]= v0 . b;
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
