// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Unresolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kUnresolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x54,0xd1,0x6e,0x12,0x41,
    0x14,0x1d,0x76,0x11,0xba,0xb4,0x02,0xba,0x40,0x51,0x0a,0x14,0x0b,0x16,0xba,0x80,
    0xa0,0x4b,0x05,0xaa,0xd6,0x17,0xe3,0x4b,0x1f,0x34,0x35,0xc6,0x37,0x52,0x2d,0x49,
    0x9b,0x68,0x35,0x85,0x87,0x3e,0xf8,0x1b,0xfa,0xad,0xbe,0x98,0x78,0xef,0xec,0xb9,
    0xc9,0x75,0x1e,0x4a,0x32,0xd9,0x39,0xe7,0x9e,0x73,0xe7,0xb0,0x33,0xb3,0xbe,0xb7,
    0x97,0x35,0x26,0x65,0x72,0x66,0xc3,0xbc,0x36,0xc9,0xef,0x9e,0xf1,0x88,0x49,0x9e,
    0x5d,0x3c,0x7f,0x85,0x86,0x34,0x81,0x39,0x7d,0xf7,0x71,0xf1,0xe6,0xd3,0x87,0xc5,
    0xea,0xe2,0xec,0x7c,0x79,0xbd,0x58,0xad,0x97,0x57,0x5f,0x2e,0xbf,0x2e,0x96,0x37,
    0x3f,0xbe,0x5f,0xaf,0x49,0xbb,0x69,0x32,0xd6,0xfb,0xf6,0xe4,0xf4,0x64,0xb8,0x5a,
    0x9f,0x0f,0xe3,0xc9,0x88,0x7b,0xe6,0x8d,0x6f,0x7b,0x73,0xad,0x40,0x28,0x4d,0x4f,
    0x1e,0xdf,0xce,0x2e,0xaf,0x98,0x0f,0x68,0x94,0x69,0x34,0x68,0xb4,0x69,0xf0,0xba,
    0x7d,0x1a,0x6c,0x8e,0x69,0xcc,0x68,0x14,0xa9,0x07,0x7b,0xb2,0xdc,0x9f,0x66,0x01,
    0xf4,0x06,0x78,0x8b,0x9e,0x8f,0x1c,0xdc,0x72,0x70,0xa4,0xb0,0xac,0x97,0x02,0xae,
    0x3a,0xfe,0x2a,0xfc,0xba,0x1e,0x29,0xdc,0x80,0xdf,0x03,0x6e,0x39,0xfe,0x16,0xfc,
    0xba,0x1e,0x29,0xdc,0x86,0xdf,0x07,0xee,0x38,0xfe,0x0e,0xfc,0xba,0x1e,0x29,0xdc,
    0x85,0x3f,0x0d,0xdc,0x73,0xfc,0x3d,0xf8,0x75,0x3d,0x52,0xb8,0x0f,0xff,0x1d,0xe0,
    0x81,0xe3,0x1f,0xc0,0xaf,0xeb,0x91,0xc2,0x23,0xf8,0x33,0xc0,0x63,0xc7,0x3f,0x86,
    0x5f,0xd7,0x23,0x85,0x63,0xf8,0x65,0x3f,0x27,0x8e,0x7f,0x02,0xbf,0xae,0x47,0x0a,
    0xcf,0xec,0x79,0x33,0xe6,0x77,0x98,0xe0,0xb9,0xe3,0x9f,0xc3,0x1f,0x28,0xcc,0xfe,
    0x0d,0x1a,0x21,0xed,0x82,0x67,0xeb,0xbe,0x7d,0x9f,0x3c,0xaf,0xd0,0x8c,0xb3,0xed,
    0xd2,0xd8,0x26,0x7d,0x16,0x59,0xd3,0x96,0x4b,0x5b,0x9f,0x8f,0xf5,0x8f,0x80,0x03,
    0x70,0x0f,0x68,0x96,0x83,0x3e,0x63,0xfe,0xff,0x79,0x78,0x72,0x8f,0x4d,0xcc,0x73,
    0xe8,0xc1,0x78,0x0b,0x5c,0x99,0x70,0x1e,0xeb,0xa7,0x6c,0xd6,0x04,0x17,0x50,0xe7,
    0x4c,0x45,0x7b,0x97,0x92,0x9e,0x7d,0xda,0x89,0xa2,0xbd,0x9f,0x89,0xa6,0x00,0x4d,
    0x08,0x8d,0xe4,0x2e,0x21,0x63,0x88,0x35,0x4b,0xb8,0x6b,0x92,0xbb,0x02,0xfd,0x6d,
    0xb9,0xb7,0x31,0xaf,0xa0,0x07,0xe3,0xaa,0xca,0x5d,0x43,0x6e,0xc9,0xb9,0x43,0xcf,
    0x9a,0xca,0x50,0xc7,0x7a,0x3b,0xf0,0xd7,0xd5,0xd9,0xe7,0x0c,0x4d,0xe8,0x6f,0xcb,
    0x20,0xfd,0x9b,0xe8,0xb1,0xab,0xee,0xb7,0xec,0x47,0x1b,0x3d,0xe5,0xdd,0x76,0x54,
    0xbd,0x84,0xef,0x8a,0xaf,0xfe,0x43,0x4f,0xd5,0xeb,0xf8,0xe6,0xf8,0xaa,0xff,0xc0,
    0xe9,0x3f,0x72,0xfa,0x8f,0x9d,0xfe,0xb1,0xd3,0x7f,0xa2,0xf2,0x4f,0x51,0xcb,0xa3,
    0x3e,0xc5,0x77,0x4d,0xaf,0x37,0x87,0xfe,0x90,0xf6,0xd6,0xc3,0xfb,0x33,0xd0,0xfc,
    0x21,0x86,0xef,0xde,0x4b,0x62,0xf9,0xfc,0xdc,0xc5,0xd9,0xf9,0x4c,0x2c,0x9f,0xc9,
    0xfb,0xe0,0xf8,0x3c,0xbc,0x22,0x47,0x00,0x8e,0xf5,0x15,0xfb,0x9e,0x93,0x3d,0x63,
    0x3d,0x9f,0x85,0x87,0xe0,0x44,0x5f,0x06,0xc7,0xfa,0x26,0xee,0x52,0x0b,0x7a,0xde,
    0xb7,0x3d,0x70,0xa2,0x6f,0x80,0x93,0x3c,0x8f,0xf1,0xbe,0x25,0xcf,0x3e,0x38,0xd1,
    0xb7,0xc1,0x49,0x9e,0x03,0xbc,0x7f,0xc9,0x13,0x81,0x13,0x7d,0x17,0x9c,0xe4,0x19,
    0x62,0x3f,0x24,0xcf,0x13,0x70,0xa2,0xef,0x83,0x93,0x3c,0x4f,0xb1,0x3f,0x92,0xe7,
    0x19,0x38,0xd1,0x8f,0xc0,0x49,0x9e,0x43,0xec,0x97,0xe4,0x79,0x0e,0x4e,0xf4,0x31,
    0x38,0xc9,0x73,0x84,0xfd,0x92,0x3c,0x2f,0xc0,0xb1,0xfe,0x3d,0x71,0x35,0xeb,0x4b,
    0x78,0xfe,0xfd,0xc4,0x7d,0x3e,0x06,0xcf,0x3d,0x67,0xc0,0x7f,0xe9,0xc6,0x4f,0x69,
    0xfc,0x03,0x6d,0x4b,0xea,0x70,0x90,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
// layout(input_attachment_index = 0, set = 0, binding = 0)uniform subpassInput colorIn0;
// layout(input_attachment_index = 1, set = 0, binding = 1)uniform isubpassInput colorIn1;
// layout(input_attachment_index = 2, set = 0, binding = 2)uniform usubpassInput colorIn2;
// layout(input_attachment_index = 3, set = 0, binding = 3)uniform subpassInput colorIn3;
// layout(input_attachment_index = 4, set = 0, binding = 4)uniform isubpassInput colorIn4;
// layout(input_attachment_index = 5, set = 0, binding = 5)uniform usubpassInput colorIn5;
// layout(input_attachment_index = 6, set = 0, binding = 6)uniform subpassInput colorIn6;
// layout(input_attachment_index = 7, set = 0, binding = 7)uniform isubpassInput colorIn7;
//
// layout(input_attachment_index = 8, set = 0, binding = 9)uniform usubpassInput stencilIn;
//
// void main()
// {
//     colorOut0 = subpassLoad(colorIn0);
//     colorOut1 = subpassLoad(colorIn1);
//     colorOut2 = subpassLoad(colorIn2);
//     colorOut3 = subpassLoad(colorIn3);
//     colorOut4 = subpassLoad(colorIn4);
//     colorOut5 = subpassLoad(colorIn5);
//     colorOut6 = subpassLoad(colorIn6);
//     colorOut7 = subpassLoad(colorIn7);
//
//     gl_FragStencilRefARB = int(subpassLoad(stencilIn). x);
//
// }
