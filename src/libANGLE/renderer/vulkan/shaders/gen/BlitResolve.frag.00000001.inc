// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x96,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xf7,0x39,0xfb,0x5c,0xa8,0xc5,0x8a,0x20,0x42,0x55,0xbc,0xa1,0x28,0xa8,
    0xe4,0x54,0x39,0x8d,0x06,0x51,0x6a,0x82,0x54,0xa1,0x2d,0x82,0xf6,0xe2,0xfd,0x82,
    0x26,0x6d,0x85,0x26,0x5e,0xe0,0xa1,0x95,0x63,0x82,0x0a,0x0f,0xb6,0xc2,0x83,0x0a,
    0x3c,0x58,0x95,0x87,0x26,0xf5,0xf2,0x6f,0xf8,0x17,0x35,0x56,0x13,0x13,0x67,0xd6,
    0xfe,0x0d,0x99,0x6c,0x92,0x61,0xed,0xf9,0xbe,0x99,0xf9,0x66,0xf6,0x5a,0x7b,0x41,
    0x9c,0x6d,0x2e,0x46,0x71,0x26,0x5a,0x16,0x55,0x45,0xaf,0xa3,0xe4,0x67,0x65,0x94,
    0x8d,0x32,0xb2,0x7e,0x1a,0x15,0xc2,0xda,0xdb,0x3f,0xd4,0xdf,0x7e,0xfd,0xc6,0x70,
    0x7b,0x47,0xb9,0xa4,0xfc,0x67,0x51,0x1c,0xe2,0x94,0x5b,0x21,0x5e,0x4e,0x56,0xb5,
    0x91,0x0b,0x3f,0x8f,0x2a,0x5e,0x2d,0x76,0x45,0x4c,0x9d,0x71,0xb1,0x8a,0xd8,0xb4,
    0xd8,0xac,0xd8,0x82,0xd8,0xa2,0x58,0x8d,0xd4,0xd0,0x9c,0xa2,0xd6,0x97,0xa7,0xea,
    0xa0,0xa7,0xf5,0xa2,0xe8,0xeb,0x28,0x1f,0xad,0xa2,0x97,0x66,0x56,0xc3,0x32,0x60,
    0x55,0x0e,0xcb,0x82,0xd5,0x38,0x2c,0x06,0x6b,0x74,0x58,0x0e,0x6c,0x9d,0xc3,0xf2,
    0x60,0x1b,0x1d,0x56,0x00,0xdb,0xe2,0xb0,0x22,0xd8,0x76,0x87,0x55,0x81,0xed,0x74,
    0xd8,0x27,0x60,0xa5,0x30,0x57,0xbc,0xd4,0x9f,0xce,0xd8,0x2b,0xeb,0x66,0xe6,0x31,
    0x7f,0x93,0xf3,0xfb,0x52,0x7c,0x1f,0xbc,0xe5,0xeb,0x3b,0x5d,0xef,0xf8,0x51,0xfc,
    0x0c,0xfe,0x38,0xbe,0xc5,0x57,0xf0,0x63,0xfc,0x69,0xfc,0x1c,0xfe,0x2c,0x7e,0x1e,
    0x7f,0x01,0xbf,0x80,0xbf,0x88,0xaf,0xb3,0xd7,0x49,0xd5,0x6c,0xe8,0x27,0x0e,0xf5,
    0xf4,0x79,0xb5,0x3c,0x15,0x78,0x77,0x0d,0x12,0x5f,0x24,0x37,0x8b,0xbf,0x0c,0x3f,
    0x17,0x62,0x72,0x61,0x7f,0xb5,0x57,0xc5,0x3b,0xf1,0xab,0xc1,0xea,0xc5,0xaf,0xa5,
    0x96,0xf9,0x75,0xf8,0x51,0xe8,0xa3,0x7a,0x69,0x1f,0xcc,0x6a,0xb1,0x02,0x6b,0x9d,
    0x33,0xd5,0xab,0x67,0x3f,0x56,0xa1,0x57,0x1f,0x7a,0x4e,0xb0,0x1d,0xe8,0x35,0xa0,
    0xa7,0xf1,0x8d,0x70,0x45,0xc7,0x37,0xa1,0x6f,0xfe,0x66,0x78,0x8d,0x6f,0x26,0xbe,
    0x2e,0x68,0x64,0xa3,0x16,0xe2,0xd4,0xdf,0x96,0xca,0x2b,0x71,0x5e,0xcc,0xef,0x24,
    0xf7,0x73,0xf9,0xdd,0xc3,0x0c,0x19,0x72,0xd2,0xab,0x6a,0x1d,0xe6,0xb9,0x87,0x59,
    0x0e,0x87,0x3d,0x4a,0x7e,0xd6,0x88,0xf6,0x11,0xe2,0x8e,0x82,0x1d,0x21,0x4e,0xfd,
    0x3e,0xb0,0xb5,0xb2,0x5f,0xdf,0x50,0xc3,0xfa,0x18,0x60,0xbf,0xcc,0x3f,0xce,0x79,
    0xd1,0x5a,0x27,0xe8,0xb1,0x96,0xfd,0xfc,0x89,0x3e,0x63,0x17,0x7f,0x16,0x4c,0xe3,
    0x2f,0xc3,0xd9,0xfe,0x5e,0xe6,0x1e,0x88,0x9d,0x3f,0x9a,0xca,0xbf,0xc6,0xf9,0x30,
    0x7e,0x3c,0x15,0x5f,0x49,0xc5,0x4f,0xf2,0x9d,0x1b,0x3f,0x9d,0xe2,0xef,0x73,0x66,
    0x8c,0x9f,0x4d,0xf1,0x0f,0xc5,0xba,0x1d,0xbf,0x90,0xe2,0x9f,0x88,0xdd,0x76,0xfc,
    0x22,0xfc,0x97,0xf2,0x95,0x64,0xe9,0x35,0x02,0xfb,0x5f,0x10,0xfd,0x76,0xba,0x38,
    0xeb,0xcb,0x39,0xcf,0xc7,0x04,0x2d,0x70,0x97,0x2d,0x27,0xde,0xb0,0x1a,0xb0,0x4c,
    0x78,0xf7,0xf9,0x70,0x96,0x56,0x12,0xab,0xdc,0x57,0x82,0x35,0x86,0x73,0x91,0x9c,
    0xd5,0x06,0xea,0x17,0xc3,0x3e,0x27,0xf8,0x5d,0xf2,0xd6,0x91,0xbb,0xc6,0xe5,0xad,
    0x27,0xaf,0xc9,0xe5,0x6d,0x00,0x9f,0x24,0x6f,0x13,0xb9,0x1b,0xc8,0xb3,0xbb,0x6e,
    0x35,0xe7,0xbb,0x8b,0x33,0xbc,0x15,0xfc,0x85,0xc4,0xb4,0x70,0xf7,0x6d,0xe5,0x6c,
    0xbf,0x95,0x37,0xd0,0xc6,0x6c,0xef,0x25,0x5e,0xb9,0x56,0xb1,0x36,0xde,0x4b,0xab,
    0x9b,0x79,0x97,0xbb,0xe7,0x2a,0x12,0xab,0x58,0x3b,0xf8,0xa0,0x78,0xda,0xd3,0x3f,
    0x60,0x16,0xf7,0x4e,0x6a,0x58,0x2d,0x5d,0xff,0x93,0xa8,0x62,0xe8,0x25,0x89,0xc9,
    0x93,0xd3,0xea,0x66,0xf8,0x82,0x19,0x4a,0x6e,0x86,0xdd,0xe0,0x36,0xc3,0x1e,0x30,
    0x9b,0xa1,0xec,0x66,0x50,0xae,0x43,0xac,0x8c,0x6e,0x87,0x9b,0x61,0x2f,0xda,0x19,
    0x37,0xc3,0x3e,0x70,0x9b,0xe1,0x5f,0x30,0x8b,0xd3,0x19,0xac,0x56,0xd9,0xcd,0xf0,
    0x92,0x98,0x36,0x72,0x3a,0xdc,0x0c,0xfb,0x99,0xa1,0xd3,0xcd,0xd0,0x05,0x6e,0x33,
    0x1c,0x00,0xb3,0x19,0xba,0xdd,0x0c,0xca,0x1d,0xe4,0x8c,0xab,0xae,0x3e,0x7f,0x87,
    0xee,0x21,0xb4,0x5f,0xba,0xbb,0x45,0x7b,0xb4,0xd8,0x6e,0xd7,0xe3,0x2b,0xe2,0xca,
    0xe4,0x1d,0xa4,0x9f,0x9e,0xf0,0xb7,0x2e,0xb9,0x7b,0xd4,0xd7,0x7b,0xa6,0x9f,0x3b,
    0xe6,0x7b,0xe9,0x4f,0xef,0x97,0x6f,0x89,0xe9,0x77,0xe7,0xf2,0x18,0x73,0x0d,0xb8,
    0x73,0x39,0x08,0x6e,0xe7,0x79,0x08,0xdd,0x41,0xf2,0x4e,0x84,0x9a,0x49,0xde,0x71,
    0xf2,0xf4,0x1b,0xfd,0x01,0xfc,0x37,0xf6,0xe1,0x47,0x30,0xdb,0xab,0x93,0xd4,0xf2,
    0xdf,0xdd,0x29,0xb0,0xe4,0xbb,0x2b,0x84,0xbb,0xec,0x34,0xb1,0xa7,0x96,0x6a,0xe4,
    0xc3,0x77,0x7c,0x86,0x19,0x4e,0xbb,0x3e,0xce,0xd1,0xc7,0x59,0xd7,0xc7,0x79,0xf0,
    0x37,0x12,0xa3,0xfe,0x05,0xb0,0x06,0xb7,0x57,0x17,0xc1,0x9b,0xd8,0xab,0x61,0xb7,
    0x57,0xca,0x5d,0x12,0x1b,0xe6,0xfd,0x5f,0x0a,0x7b,0x1b,0x87,0x3b,0xf3,0x0c,0x7b,
    0x63,0xdc,0xb0,0xd3,0xf9,0x05,0x9d,0x01,0xa7,0xf3,0x2b,0xb8,0xe9,0x8c,0x38,0x1d,
    0xe5,0xae,0xea,0xff,0x67,0xd4,0xba,0x8a,0xce,0xa8,0xd3,0x31,0x6e,0xc4,0xe9,0x5c,
    0x47,0xe7,0x9a,0xd3,0xb9,0x01,0x6e,0x3a,0x63,0x4e,0x47,0xb9,0x9b,0x62,0x63,0xd4,
    0xba,0x89,0xce,0xb8,0xd3,0x31,0x6e,0xcc,0xe9,0xfc,0x8e,0x4e,0xc9,0xe9,0xfc,0x01,
    0x6e,0x3a,0x13,0x4e,0x47,0xb9,0x5b,0x62,0x13,0xd4,0xba,0x85,0x4e,0xc5,0xe9,0x18,
    0x37,0xe1,0x74,0xee,0xa0,0x33,0xe9,0x74,0xee,0x82,0x9b,0xce,0x94,0xd3,0x51,0xee,
    0x9e,0xd8,0x14,0xb5,0xee,0xa1,0x33,0xed,0x74,0x8c,0x9b,0x72,0x3a,0x7f,0xa2,0x73,
    0xdf,0xe9,0xfc,0x05,0x6e,0x3a,0x33,0x4e,0x47,0xb9,0x07,0x62,0x33,0xd4,0x7a,0x80,
    0xce,0xac,0xd3,0x31,0x6e,0xc6,0xe9,0x3c,0x42,0xe7,0xa1,0xd3,0x79,0x0c,0x6e,0x3a,
    0xf3,0x4e,0x47,0xb9,0x39,0xb1,0x79,0x6a,0xcd,0xa1,0xb3,0xe0,0x74,0x8c,0x9b,0x77,
    0x3a,0x7f,0xa3,0xf3,0xc4,0xe9,0x3c,0x05,0x37,0x9d,0xe7,0x4e,0x47,0xb9,0x67,0x62,
    0xcf,0xa9,0xf5,0x0c,0x9d,0x45,0xa7,0x63,0x9c,0xae,0x1f,0xe4,0xab,0xdc,0x2b,0xf6,
    0x11,0xf9,0xe6,0xcd,0xe1,0x8c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = texture(sampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
