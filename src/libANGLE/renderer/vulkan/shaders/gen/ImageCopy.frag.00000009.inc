// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x95,0x55,
    0x14,0xc5,0x3f,0xee,0x05,0x2e,0x0f,0x79,0x08,0x28,0xa1,0x62,0x89,0xda,0x43,0x0c,
    0xb1,0xc0,0x4c,0xa0,0x24,0x23,0x91,0x30,0x2a,0xa1,0x87,0x69,0x42,0x89,0x65,0x22,
    0xe6,0x83,0x28,0x52,0x51,0x53,0x4b,0xca,0x47,0x2f,0xb1,0x12,0xad,0x44,0xad,0xa9,
    0xff,0xa3,0xbf,0xa8,0xe9,0x31,0xd3,0x4c,0x67,0x9f,0xfb,0xdb,0xcc,0xea,0x8e,0x15,
    0x33,0x67,0xbe,0xbb,0xd7,0xde,0x67,0x9d,0xb5,0xf7,0x3e,0xdf,0xfe,0x48,0xa7,0x96,
    0x67,0x92,0x74,0x5e,0x52,0x92,0x14,0x25,0x3f,0x26,0xd9,0xbf,0xf9,0x49,0x2a,0xc9,
    0x0b,0xcf,0xd2,0xa4,0x30,0x3e,0x37,0xf7,0x6e,0xeb,0x6d,0x3a,0x7c,0x64,0x77,0x53,
    0x4b,0x6b,0xb3,0xf9,0xcb,0x93,0x74,0x8c,0x33,0x5f,0x45,0x92,0x49,0xf2,0xc3,0xd3,
    0xd6,0xfe,0xa1,0xbd,0xa3,0x86,0x97,0x85,0x75,0x3b,0xac,0xca,0x10,0x67,0x78,0xc6,
    0x38,0xc2,0xaf,0xb2,0xc8,0x69,0x7b,0x92,0xa4,0x3b,0x29,0x48,0xaa,0x39,0x6f,0x39,
    0x4f,0xc7,0xf2,0xc0,0x8a,0x04,0x4b,0x81,0x55,0x0a,0x96,0x06,0xab,0x11,0x2c,0x1f,
    0xec,0x2e,0xc1,0x0a,0xc0,0x96,0x08,0x56,0x08,0x76,0x8f,0x60,0x19,0xb0,0x15,0x82,
    0x15,0x81,0xdd,0x2f,0x58,0x31,0xd8,0x6a,0xc1,0x4a,0xc0,0x9a,0x05,0x2b,0x05,0x6b,
    0x11,0x6c,0x1e,0xd8,0x7a,0xc1,0xca,0xc0,0xda,0x63,0x9d,0xd2,0x73,0xf9,0x5a,0xcd,
    0x36,0x85,0x67,0x03,0xf5,0x71,0x7b,0x99,0xd8,0x56,0xe7,0xa5,0xd8,0xd5,0x61,0x57,
    0x2a,0xfa,0xd3,0xb1,0x36,0xf6,0x7b,0x41,0x88,0x29,0x24,0x4f,0xab,0x6b,0x6d,0xb0,
    0x33,0xe4,0x9f,0x8a,0x78,0x7e,0xcc,0x31,0xc3,0x5a,0x18,0x76,0x96,0x10,0x6f,0xb1,
    0xa5,0xe4,0x96,0x4f,0xec,0x3c,0x78,0x0c,0x6f,0xc3,0x2e,0x13,0xee,0x72,0xe2,0xfd,
    0xec,0x2a,0xb8,0x92,0xa8,0xb3,0x72,0xae,0xce,0xae,0xc1,0x56,0xd5,0xff,0x2c,0x8f,
    0xb1,0xf3,0x6b,0xa8,0x7f,0x35,0xe7,0xd7,0xc4,0x73,0xb2,0x58,0x23,0xb9,0x2e,0x44,
    0x8f,0xc5,0xd7,0xe2,0xcb,0x88,0xbf,0x5e,0xf2,0x59,0x8a,0xbf,0x2a,0xde,0xa3,0x54,
    0xac,0x6d,0x23,0xba,0xbd,0xee,0x16,0x77,0xaf,0x68,0x76,0x9e,0x46,0xee,0x96,0xc7,
    0xaf,0xe5,0x5c,0xf7,0xaf,0xa3,0x36,0x56,0x97,0xc7,0x38,0xc3,0xcf,0x7d,0x1c,0x3e,
    0xc3,0xeb,0x82,0x82,0x4e,0xfc,0x79,0xc9,0x3f,0xff,0xf2,0x44,0xc3,0x13,0xfc,0xee,
    0x24,0x77,0xb3,0x37,0x81,0xf9,0x99,0x5d,0x39,0x76,0x8f,0xf4,0xf9,0x69,0x72,0xd5,
    0x1c,0xfa,0xc4,0xb6,0xf3,0x07,0x78,0xaf,0x2c,0xfe,0x05,0x34,0x56,0x91,0xc3,0xcb,
    0xfc,0x4e,0xcb,0xfe,0x21,0x62,0xcc,0x3f,0x06,0x97,0xe7,0xf8,0x0e,0xbe,0x31,0x89,
    0x9f,0xe0,0x9d,0x72,0xfb,0x4c,0x4e,0xef,0x2e,0xf1,0x8e,0xb8,0x9e,0x6b,0xa2,0xff,
    0x16,0x67,0x8f,0x91,0xff,0x2d,0xe6,0x4c,0x3a,0xd6,0xba,0x20,0xc6,0xe5,0x93,0xbf,
    0x61,0xbf,0x07,0xa4,0x80,0xd8,0x22,0xb9,0x07,0x6e,0x2f,0x16,0xdb,0xfa,0xb1,0x51,
    0x6c,0xd3,0x3e,0x2e,0xb6,0xf5,0xff,0x22,0x76,0x07,0xef,0x45,0x05,0xfd,0xed,0x0b,
    0x68,0x39,0xb3,0xa9,0x82,0xe5,0xbd,0x1b,0xe5,0x7d,0x9b,0x8f,0xbf,0x33,0x28,0xaa,
    0x65,0x3e,0x2d,0xe0,0xae,0x76,0x10,0x53,0x07,0x7e,0x2a,0xc4,0x98,0xbd,0x88,0x7d,
    0x75,0xf1,0x9e,0xa4,0xa3,0xfe,0x45,0x12,0xbf,0x84,0x9c,0xcc,0xb7,0x18,0xdb,0xf8,
    0xed,0x4e,0xdf,0x0d,0x7f,0x3d,0xf1,0xfe,0x1e,0x1a,0xfe,0x53,0x88,0x59,0x26,0xf3,
    0xcf,0xee,0xf9,0x6f,0x81,0x63,0x25,0xba,0xff,0x0c,0xf1,0x3e,0x07,0x57,0x52,0xc7,
    0x15,0x70,0x5b,0x1d,0xee,0xa3,0x76,0x0d,0x70,0x17,0x32,0x1f,0x0d,0x3f,0x8e,0xfd,
    0x00,0x98,0xef,0x59,0x25,0x7b,0x4c,0xef,0x2a,0x62,0xfe,0x08,0xdc,0x7e,0xc6,0x4a,
    0xd1,0xbf,0x1a,0xfd,0x8d,0xa2,0xff,0x41,0x70,0xd7,0xdf,0x04,0xe6,0xfa,0x9b,0x45,
    0xbf,0xf9,0xd6,0x30,0x8f,0x8d,0x7b,0x8d,0x68,0x79,0x08,0x2d,0x6b,0x45,0xff,0xc3,
    0xe0,0xae,0xbf,0x05,0xcc,0xf7,0xb4,0xca,0x1e,0xd3,0xdf,0x4a,0x8c,0xe9,0xf7,0x33,
    0x9a,0x45,0xff,0x23,0xe8,0x5f,0x27,0xfa,0xd7,0x83,0xbb,0xfe,0x47,0xc1,0x5c,0x7f,
    0x9b,0xe8,0x37,0xdf,0x86,0x78,0xf7,0xb2,0xdc,0x1b,0xa4,0xef,0xed,0x68,0xb1,0x7b,
    0x97,0xbd,0x8f,0x59,0xac,0x5d,0xe6,0x85,0xdf,0x89,0x0e,0x34,0x3a,0x4f,0x1b,0x3c,
    0x36,0x43,0x9e,0x64,0x7e,0xf8,0x9d,0x7c,0x0a,0xcd,0x5d,0x72,0xd6,0x66,0x70,0xb7,
    0xbb,0x39,0xfb,0x04,0x77,0x74,0x0b,0x31,0xdd,0xf0,0xd8,0x8c,0xe9,0x85,0xa7,0x47,
    0xea,0xbb,0x15,0x7c,0x57,0xd8,0x65,0x33,0xef,0x19,0xce,0xdf,0xc2,0xfb,0xbd,0x15,
    0xcd,0x1b,0xf1,0x79,0x1d,0x9f,0x85,0xab,0x4f,0xea,0xf8,0x1c,0xb8,0xd7,0xf1,0x79,
    0x30,0xaf,0x63,0xbf,0xd4,0xd1,0x7c,0xdb,0xc2,0x1a,0x24,0xff,0x6d,0x70,0xdb,0x6c,
    0x7b,0x91,0x77,0x7e,0x40,0xb8,0x5f,0x02,0xef,0x60,0x66,0x6f,0x27,0xa6,0x2f,0x4c,
    0x0c,0x9b,0x7f,0xaf,0x80,0x6d,0x97,0x77,0x3c,0x15,0xf5,0x14,0x46,0xff,0x0e,0x38,
    0x7c,0x9d,0x0e,0x67,0x19,0xbe,0x93,0xbd,0x3b,0x84,0xfb,0xd5,0x39,0xee,0xe2,0x68,
    0xef,0x02,0xdb,0xc9,0x1c,0x2b,0x60,0x9e,0xa6,0xa5,0x36,0xbb,0xe8,0x67,0x3f,0xf9,
    0x0c,0x4a,0xad,0x5e,0xa3,0x56,0x43,0x92,0xcf,0xeb,0xe0,0x5e,0xab,0xdd,0x60,0x5e,
    0xab,0x3d,0x52,0x2b,0xf3,0x0d,0x87,0xb5,0x07,0xee,0x61,0xa9,0xd5,0x1b,0x77,0xa8,
    0xd5,0x9b,0xe0,0x3f,0xc3,0xbd,0x17,0xac,0x01,0x8d,0xce,0x63,0xcf,0x5f,0x43,0xdf,
    0x2d,0xe6,0x2d,0x34,0x0c,0x12,0x3f,0x8c,0x8e,0x11,0xd1,0x61,0x31,0xfb,0xc2,0x1a,
    0x61,0xff,0x3e,0xd1,0xb1,0xff,0x0e,0x3a,0x46,0xc1,0xbd,0xae,0x07,0x72,0x7a,0xf6,
    0x36,0xd8,0x81,0x7f,0xe9,0xd9,0x41,0x38,0x7c,0x9d,0xa5,0x67,0x87,0xd8,0x7b,0x50,
    0xb8,0x0f,0xe7,0xf4,0xec,0x08,0xd8,0xa1,0xff,0xe8,0xd9,0x11,0xea,0xe1,0xf9,0x8c,
    0xe4,0xf4,0xb0,0x5f,0xf8,0xdf,0x85,0xff,0x28,0xdf,0xd3,0xf7,0xc0,0x8c,0x6b,0x1c,
    0xdb,0xfb,0xfd,0x3e,0xfd,0x9e,0x90,0x5a,0x1c,0x05,0xf7,0x7e,0x1f,0x03,0xf3,0x7e,
    0x4f,0x4a,0x9d,0x8f,0xc5,0x79,0x67,0x77,0x34,0xab,0xe3,0x38,0x3c,0x63,0xf1,0xfd,
    0xce,0x7e,0xff,0x7c,0xc6,0x9c,0x04,0x3b,0x21,0xdf,0x57,0x8f,0x3d,0x35,0x17,0x5b,
    0x1c,0xed,0x0f,0xc0,0x4e,0x4a,0x4d,0x52,0x52,0x93,0x71,0x62,0xac,0x06,0x93,0x9c,
    0x7d,0x5a,0xf2,0x3a,0x4b,0x5e,0x67,0x24,0xaf,0x0f,0xc1,0x3d,0xaf,0x8f,0xc0,0x3c,
    0xaf,0x29,0xc9,0xcb,0x7c,0xe7,0xc2,0xba,0x00,0xf7,0x39,0x99,0xe3,0x1f,0xa3,0x75,
    0x40,0x66,0xd3,0x27,0xe0,0x1e,0x73,0x9e,0x18,0xff,0x56,0x9d,0x27,0xc6,0xf4,0x4e,
    0xc1,0x79,0x41,0xe6,0xdd,0xa7,0xe8,0xbd,0x24,0x9c,0x9f,0x81,0xdb,0xfe,0x8b,0xd8,
    0xee,0xfb,0x9c,0xff,0x25,0x7e,0x09,0xfb,0xcd,0xfe,0x02,0xac,0x47,0xf2,0xfb,0x12,
    0xbc,0x8b,0xfc,0xa6,0x25,0x3f,0xf3,0x5d,0x0e,0x6b,0x1a,0x2d,0x97,0x45,0xfb,0x15,
    0xb4,0xfb,0x77,0xea,0x0a,0x1c,0xa6,0xdd,0xe3,0xa7,0x45,0xcb,0x57,0x39,0x5a,0xbe,
    0x06,0xab,0x17,0x2d,0xdf,0x80,0xbb,0x96,0x19,0xd1,0x62,0xbe,0xab,0x61,0xcd,0xc0,
    0x7d,0x55,0xb4,0x5c,0x47,0xcb,0x35,0xb4,0x5c,0x17,0x2d,0x1e,0x3f,0x23,0x5a,0xbe,
    0xcd,0xd1,0xf2,0x1d,0xd8,0x84,0x68,0xf9,0x1e,0xdc,0xb5,0xcc,0x8a,0x16,0xf3,0xdd,
    0x08,0x6b,0x16,0xee,0x1b,0xa2,0xe5,0xa6,0xf4,0xdd,0xb4,0xdc,0xe4,0x7f,0x2f,0xd3,
    0xe2,0xf1,0xb3,0x39,0x3d,0x9e,0xca,0xb9,0xa3,0x93,0x72,0xe7,0x7f,0x80,0xcf,0xb8,
    0x6e,0x63,0xff,0x15,0x26,0xcb,0xfa,0xb0,0xfe,0x06,0x49,0xe3,0xd1,0xa4,0x54,0x0f,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
