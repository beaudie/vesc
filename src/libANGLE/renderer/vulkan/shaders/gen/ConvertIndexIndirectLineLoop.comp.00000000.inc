// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndexIndirectLineLoop.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndexIndirectLineLoop_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x6d,0x68,0x95,0x65,
    0x18,0x7e,0xef,0x73,0x8e,0x67,0xa6,0xa3,0x9c,0xee,0xa4,0xa7,0x72,0x1f,0x29,0xc1,
    0x58,0xac,0x26,0x5a,0x23,0xdd,0xdc,0xf0,0x87,0x42,0x43,0xe9,0x63,0xb4,0xd3,0x6a,
    0x15,0xae,0x48,0xf6,0x61,0x1e,0xe7,0x08,0x4c,0x72,0xcb,0x05,0x93,0x90,0x95,0x56,
    0x30,0x37,0xdc,0xe8,0x47,0x6c,0xab,0x7e,0xec,0x5f,0x44,0x0e,0xa2,0xda,0x5a,0x21,
    0x08,0x96,0xa0,0x20,0x58,0xc2,0x04,0xcb,0x5c,0xd0,0x77,0x59,0xcf,0xfd,0xde,0xd7,
    0x23,0x97,0x2f,0xef,0x81,0x87,0xf7,0x3c,0xd7,0x7d,0xdf,0xd7,0xfd,0x3c,0xd7,0xf5,
    0xbc,0x1f,0xc9,0xc4,0x9a,0x82,0x20,0x29,0xc1,0x92,0x60,0x71,0x70,0x5c,0x82,0xf0,
    0x57,0x14,0x24,0x02,0xfd,0xbb,0x34,0x48,0x87,0xd7,0xad,0x8d,0x8f,0x35,0x56,0xed,
    0xed,0x6e,0xab,0x5a,0xbf,0xe1,0x7e,0x8d,0xdf,0x1a,0x24,0xc3,0x3c,0x8d,0xdd,0xe6,
    0x72,0x16,0xb9,0x6b,0xca,0x8d,0xce,0xe7,0x76,0x75,0x29,0xde,0xe9,0xc6,0x32,0x87,
    0xa7,0x42,0xae,0x20,0xa8,0x47,0xae,0x8e,0x6d,0x2e,0xbb,0xc8,0xda,0x04,0x6b,0x70,
    0xf5,0x98,0x00,0x4b,0x11,0x96,0x00,0xb6,0x98,0xb0,0x24,0xb0,0x42,0xc2,0x52,0xc0,
    0x96,0xe9,0x7a,0x5d,0x86,0xaf,0xdd,0xea,0x22,0x25,0xee,0x9a,0xbe,0xc1,0x9b,0x0a,
    0x4a,0xd1,0x77,0x15,0xea,0x4b,0x23,0xeb,0xd1,0xfa,0x52,0xaa,0x2f,0x77,0xd7,0xbb,
    0x6f,0xc4,0x6c,0x5e,0x8e,0xf5,0xea,0xbc,0xf6,0x26,0xfe,0x45,0x41,0x5d,0x0c,0x5f,
    0x1d,0xf1,0xd5,0x47,0xf8,0xea,0xc1,0xe7,0xe7,0xcd,0x91,0xf5,0xe6,0x22,0xeb,0xcd,
    0xc5,0xf0,0xe7,0x88,0xbf,0x25,0xc2,0xdf,0x02,0x7e,0x1f,0xef,0x0c,0xbd,0x0d,0x82,
    0xbb,0x30,0x9f,0x89,0xac,0x7f,0x36,0x86,0x7f,0x96,0xea,0xe7,0x22,0xfc,0x73,0xe0,
    0x4f,0x62,0x7e,0x0d,0xfc,0x59,0x37,0x56,0xb8,0xaa,0x44,0x18,0x4f,0x86,0x71,0xfd,
    0x9f,0x71,0x39,0xda,0xaf,0x0c,0x1c,0x25,0x41,0x41,0xe8,0x57,0x3a,0x66,0x94,0xb9,
    0xdc,0xe5,0xee,0x7a,0x0b,0xce,0xd2,0x46,0xcc,0x57,0x00,0x53,0xae,0x62,0x70,0xa9,
    0x1f,0x95,0x98,0x67,0xd0,0x4b,0xeb,0x6f,0x47,0x6e,0x9a,0xe2,0x59,0xf4,0x5e,0xed,
    0x56,0xe5,0xcf,0x47,0x09,0x7c,0x2f,0x41,0x5d,0x19,0xce,0x58,0x29,0xfa,0x96,0x61,
    0x9f,0x85,0x88,0xaf,0xc5,0x7f,0xcf,0xab,0xd7,0x0a,0xe8,0xe0,0xfb,0x54,0xd2,0x5c,
    0xe3,0xd5,0x6e,0xfc,0x87,0xbe,0xb5,0xd4,0x57,0xcf,0x47,0x2d,0x78,0x37,0x83,0xb7,
    0x0e,0x7d,0x37,0xe3,0x1e,0x2a,0x24,0xde,0x6d,0xc4,0xd3,0x4c,0x3c,0x7a,0x0e,0x9a,
    0xc1,0xf3,0x24,0x6a,0x72,0xe0,0xd1,0x79,0x0b,0xf1,0x68,0xcd,0x4e,0xe8,0xb4,0xd2,
    0xcd,0xdb,0xc1,0x93,0x44,0x7d,0x07,0x34,0x6d,0x47,0x7d,0x07,0xee,0x6d,0xa1,0xfa,
    0x2e,0xe8,0xa8,0xf9,0xbb,0x11,0x63,0x3d,0xf2,0xc0,0x8a,0x5d,0x97,0xbd,0xb4,0xfe,
    0x81,0x88,0x5f,0xc7,0x70,0xfe,0x74,0x3f,0x33,0xb4,0x1f,0x3d,0x77,0x33,0xe0,0xff,
    0x0a,0x6b,0x9f,0xc5,0x7a,0x74,0x3e,0x17,0xd9,0xcf,0x3c,0x78,0xfc,0xfc,0x67,0x68,
    0x77,0xaf,0x9b,0xe9,0x3e,0xae,0x01,0xcb,0x63,0x3c,0xe0,0xce,0x7b,0x02,0x35,0x01,
    0xf6,0xfe,0x87,0x43,0xf4,0x99,0xf6,0xbb,0x9b,0x2d,0x00,0xff,0xdb,0xfd,0xd7,0xbd,
    0xfe,0x82,0xb8,0x5e,0x1b,0x5c,0x96,0x9e,0xad,0xa7,0x70,0x1e,0xb3,0xa1,0x87,0xd6,
    0xf7,0x69,0xe0,0x0d,0x6e,0xa6,0xe7,0xa4,0x15,0xda,0x67,0x11,0xf3,0x79,0xcf,0x20,
    0x76,0xd0,0x71,0xe9,0xbc,0x0d,0xf1,0x9d,0x54,0xfb,0x3c,0xd5,0xb6,0x51,0xed,0x0b,
    0x88,0xe9,0x3a,0x54,0xfb,0x97,0xe0,0x4f,0x17,0xe5,0xec,0x01,0xfe,0x91,0xcb,0x51,
    0xfd,0xbb,0x81,0xe5,0xb1,0xbf,0x1e,0xec,0xef,0x2f,0x97,0xaf,0xb1,0x7d,0x6e,0xf4,
    0x60,0x8f,0xfa,0xff,0x4f,0x77,0x5d,0xc0,0xbc,0x07,0xf3,0x57,0x31,0xd7,0xeb,0xaf,
    0xee,0xde,0xd5,0x3e,0xaf,0x8b,0xad,0x47,0x73,0x0e,0xbb,0xd1,0x47,0xb1,0x43,0x62,
    0x6b,0xd2,0xd8,0x90,0xdc,0x1c,0x7b,0x8d,0x62,0x6f,0x46,0x62,0x7d,0x14,0x1b,0x8c,
    0xc4,0x7a,0xc5,0xb4,0xd3,0xd8,0x51,0xf4,0xfb,0x00,0x7b,0xec,0x47,0x5c,0x6b,0x7f,
    0x73,0xfb,0xea,0x45,0xdc,0xef,0xb3,0x3f,0xd4,0x3b,0x08,0x71,0xdd,0xc7,0x41,0xd2,
    0xff,0x30,0xf6,0x32,0x40,0xfe,0xfe,0x03,0x7f,0x33,0xa4,0xeb,0xbf,0xc0,0x3f,0x43,
    0xdd,0x75,0x60,0x59,0xe2,0xd2,0x03,0xae,0x5c,0xd7,0x29,0x2f,0x81,0x17,0x61,0x86,
    0xfc,0x75,0xaf,0xdf,0xf0,0xb9,0x92,0x45,0xdc,0xf7,0x48,0x89,0xc5,0x66,0x50,0x9b,
    0x46,0xad,0x3e,0x63,0x3e,0x07,0x56,0x20,0x86,0x57,0x52,0x8f,0x25,0x62,0xb5,0x05,
    0x54,0xbb,0x54,0x0c,0xd7,0xe7,0xcf,0x04,0x74,0x3a,0x42,0x1a,0xab,0xaf,0x83,0xd0,
    0x43,0xaf,0xe3,0xae,0x2a,0x0d,0xbf,0x8e,0xa0,0xfe,0x50,0xe8,0x81,0xf1,0x1d,0x85,
    0xc6,0xac,0xd3,0xdb,0xd0,0xe9,0x18,0xe9,0xf4,0x0e,0x70,0xdf,0xf3,0x5d,0x60,0x79,
    0xc2,0x86,0xc0,0xaf,0x6b,0x7b,0x1f,0xd8,0x71,0xe4,0x0e,0xe1,0x9c,0x8e,0x90,0x7f,
    0x1a,0x1b,0x76,0x63,0x0a,0xeb,0x1d,0x26,0xef,0x4f,0x60,0x4f,0xfe,0x7c,0x8f,0x51,
    0x9d,0xc6,0x46,0xdd,0x18,0x43,0xdd,0x28,0x79,0xf5,0x1e,0xce,0x22,0xef,0xa7,0x48,
    0x6c,0x3f,0x95,0xb4,0x9f,0xe5,0x62,0xb8,0xd7,0xba,0x58,0xac,0x2e,0x43,0x5c,0x19,
    0xb1,0x3c,0x8d,0x79,0x8f,0x57,0x8a,0x3d,0x87,0xb2,0x88,0x7b,0xbe,0x55,0x62,0x31,
    0xef,0xd3,0x1d,0xe0,0x63,0x8f,0xef,0x14,0xc3,0x2b,0x81,0xe9,0xf3,0x72,0xb5,0xd8,
    0x3b,0x40,0x63,0xb3,0x78,0x86,0x96,0x88,0xe1,0xaf,0x80,0xbb,0x54,0x0c,0xf3,0xdc,
    0xe5,0x62,0xfd,0x14,0xf7,0xdc,0x6b,0xc5,0x3c,0x56,0x9e,0x2f,0x80,0xdd,0x23,0x96,
    0xab,0xb1,0x3a,0xa7,0xa1,0xae,0x4f,0x31,0x3d,0x23,0x5e,0xbb,0x31,0xba,0x17,0xdf,
    0xc0,0x9a,0x87,0xa1,0xe3,0x28,0xf9,0x31,0x4e,0x67,0x4c,0xfd,0x98,0x24,0x3f,0xc6,
    0xc3,0x33,0x10,0x84,0x98,0x72,0x4e,0x90,0x86,0x1f,0x82,0x97,0xfd,0xa8,0x8a,0xf1,
    0xe3,0x3e,0x31,0xdc,0xfb,0x51,0x2d,0x56,0xc7,0x7e,0xac,0x13,0xcb,0xab,0x26,0x3f,
    0xd6,0x93,0x1f,0xeb,0xc8,0x8f,0x0d,0x62,0x31,0xaf,0xd9,0x83,0xe0,0x63,0x3f,0x6a,
    0xc4,0x70,0xf6,0xe3,0x21,0xf8,0x51,0x43,0x7e,0x6c,0x14,0xc3,0xbd,0x1f,0x9b,0xc4,
    0x30,0xcf,0x5d,0x27,0xd6,0x6f,0x13,0xf9,0xd1,0x80,0xfb,0xa0,0x86,0xfc,0xd8,0x22,
    0x96,0xdb,0x00,0x3f,0x74,0x7d,0x5b,0xe0,0x87,0xd7,0x6e,0x92,0xfc,0x78,0x0b,0x6b,
    0x1e,0x83,0x8e,0x13,0xb8,0xbf,0x47,0x90,0x3b,0x45,0x9a,0x3e,0x1c,0xa3,0x69,0xa3,
    0x18,0xee,0x35,0xdd,0x1e,0x73,0xc6,0x77,0x88,0xe5,0x6d,0x27,0x4d,0x1f,0x21,0x4d,
    0x77,0x90,0xa6,0x8f,0x8a,0xc5,0xfc,0xbe,0x1f,0x8f,0x39,0xe3,0x4d,0x62,0x38,0x6b,
    0xfa,0x04,0x34,0x6d,0x22,0x4d,0x9b,0xc5,0x70,0xaf,0x69,0x4e,0x0c,0xf3,0xdc,0x2d,
    0x62,0xfd,0x72,0xa4,0x69,0xab,0xd8,0xf3,0xa5,0x89,0x34,0x7d,0x56,0x2c,0xb7,0x15,
    0x9a,0xea,0xfa,0x14,0xf3,0xfb,0xfb,0x98,0x9e,0x07,0x1e,0xfb,0x04,0x67,0x79,0x20,
    0xa2,0xe7,0x08,0x69,0xaf,0xef,0x30,0xd5,0x7f,0x12,0x1c,0x53,0x14,0x1b,0xc4,0x7d,
    0x30,0x09,0xae,0x29,0xf0,0xf4,0x81,0xa7,0x2f,0xf2,0x7e,0xed,0xa5,0xfb,0xe8,0xd3,
    0xc8,0x73,0x6d,0x9a,0xee,0x23,0x8d,0x9d,0x74,0x63,0x1a,0x75,0x27,0xc9,0xdf,0x17,
    0x63,0xfc,0xdd,0x25,0x86,0x7b,0x7f,0xdb,0x63,0xfc,0xed,0x10,0xcb,0x6b,0x27,0x7f,
    0xbb,0xc8,0xdf,0x0e,0xf2,0x77,0xb7,0x58,0xcc,0x7b,0xb0,0x27,0xc6,0xdf,0xbc,0x18,
    0xce,0xfe,0x76,0xc3,0xdf,0x3c,0xf9,0xbb,0x4f,0x0c,0xf7,0xfe,0xf6,0x88,0x61,0x9e,
    0xfb,0x65,0xb1,0x7e,0x3d,0xe4,0xef,0x7e,0xbc,0x9b,0xf2,0xe4,0xef,0x01,0xb1,0xdc,
    0xfd,0xf0,0x57,0xd7,0x77,0x80,0xfc,0xfd,0x92,0xfc,0x55,0xcd,0xbd,0x76,0xd3,0xe4,
    0x57,0x3f,0xf6,0xd1,0x8b,0x7c,0xd6,0xf5,0x6b,0xbc,0xeb,0x06,0x48,0xd7,0x6f,0x80,
    0x7b,0xbd,0x4e,0xe1,0xfb,0x34,0x8b,0x98,0xae,0xe3,0x14,0x78,0xfd,0x3a,0x4e,0x23,
    0x96,0x27,0xed,0xcf,0xe0,0x1b,0x30,0x4f,0x5c,0xdf,0xd2,0x37,0xe0,0x19,0xea,0xf9,
    0x1d,0x62,0x3e,0xef,0x2c,0xf5,0x3c,0x8d,0x9e,0x67,0x91,0xe7,0xf9,0xcf,0xa1,0x27,
    0x7f,0x63,0x9e,0xa7,0xba,0x73,0xa8,0x3b,0x8f,0x6f,0x49,0x5f,0x77,0x01,0x75,0x15,
    0x84,0x5d,0xc4,0x5a,0x2b,0x88,0xeb,0x7b,0x5a,0xeb,0x45,0x5a,0xeb,0x0f,0x88,0xf9,
    0xbc,0x4b,0xd4,0xf3,0x02,0x7a,0x5e,0x42,0x9e,0xe7,0xbf,0x8c,0x9e,0xf3,0x84,0x5d,
    0x41,0xcf,0x79,0xe2,0xfa,0x91,0x7a,0x5e,0xa1,0x9e,0x3f,0x21,0xe6,0xf3,0xae,0x52,
    0xcf,0xcb,0xe8,0x79,0x15,0x79,0xfc,0xad,0xbb,0x10,0x7e,0xcf,0x49,0x50,0xe3,0xc6,
    0xff,0x59,0x70,0xa2,0x11,0x24,0x11,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstData[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcData[];
// };
//
// layout(set = 0, binding = 2)readonly buffer cmd
// {
//
//     uint cmdData[];
// };
//
// layout(set = 0, binding = 3)buffer dstCmd
// {
//
//     uint dstCmdData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint cmdOffsetDiv4;
//
//     uint dstCmdOffsetDiv4;
//
//     uint srcOffset;
//
//     uint dstOffsetDiv4;
//
//     uint isRestartEnabled;
// };
//
// uint GetIndexValue(uint index)
// {
//
//     index += srcOffset >>(2 - 2);
//
//     uint srcBlock = srcData[index >> 2];
//
//     uint srcShift =((index & 0x3)<< 3);
//
//     uint value =(srcBlock >> srcShift)& 0xff;
//     return value;
//
// }
//
// void PutIndexValue(uint index, uint value)
// {
//
//     uint dstIndex = dstOffsetDiv4 +(index >> 2);
//
//     uint srcBlock = dstData[dstIndex];
//
//     uint srcShift =((index & 0x3)<< 3);
//
//     srcBlock &= ~(0xff << srcShift);
//
//     srcBlock |= value << srcShift;
//
//     dstData[dstIndex]= srcBlock;
//
// }
//
// void main()
// {
//
//     uint indexCount = cmdData[cmdOffsetDiv4];
//     uint firstIndex = cmdData[cmdOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     uint workingCount = 0;
//     uint srcIdx = firstIndex;
//     uint indicesRemaining = indexCount;
//     uint lineSize = 0;
//     uint firstIndexValue = 0;
//     while(indicesRemaining > 0)
//     {
//         uint indexValue;
//         uint restartValue = 0xff;
//         indexValue = GetIndexValue(srcIdx ++);
//         if(lineSize == 0)
//         {
//             firstIndexValue = indexValue;
//         }
//         indicesRemaining --;
//         if((isRestartEnabled == 1)&&(indexValue == restartValue))
//         {
//
//             if(lineSize > 1)
//             {
//                 PutIndexValue(workingCount ++, firstIndexValue);
//             }
//             if(lineSize > 0)
//             {
//                 PutIndexValue(workingCount ++, restartValue);
//             }
//             lineSize = 0;
//         } else {
//             PutIndexValue(workingCount, indexValue);
//             workingCount ++;
//             lineSize ++;
//         }
//     }
//     if(lineSize > 1)
//     {
//         PutIndexValue(workingCount, firstIndexValue);
//         workingCount ++;
//     }
//
//     dstCmdData[dstCmdOffsetDiv4]= workingCount;
//     dstCmdData[dstCmdOffsetDiv4 + 1]= cmdData[cmdOffsetDiv4 + 1];
//     dstCmdData[dstCmdOffsetDiv4 + 2]= 0;
//     dstCmdData[dstCmdOffsetDiv4 + 3]= cmdData[cmdOffsetDiv4 + 3];
//     dstCmdData[dstCmdOffsetDiv4 + 4]= cmdData[cmdOffsetDiv4 + 4];
// }
