// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x77,0x70,0x55,0x45,
    0x14,0xc6,0xef,0x26,0x21,0x89,0x04,0x02,0x08,0x48,0x11,0x22,0x11,0x84,0x60,0x22,
    0x20,0x84,0x00,0x06,0x90,0x16,0x13,0x25,0x31,0x20,0xd8,0xbb,0x62,0x01,0x06,0x2c,
    0x80,0x62,0x57,0x40,0x14,0x7b,0xc1,0xae,0xd8,0x15,0xb1,0x61,0x45,0xb1,0x23,0x08,
    0x16,0xec,0xce,0x38,0x63,0x6f,0xd8,0xb0,0x2b,0x82,0x88,0xb8,0xe7,0xee,0xef,0x98,
    0x93,0xe5,0xfd,0x65,0x66,0xee,0xbc,0xfb,0x7d,0xa7,0xee,0xd9,0xb3,0xe5,0xbd,0x64,
    0x67,0x75,0xcd,0x4b,0xb2,0x5d,0xd2,0x34,0xc9,0x4f,0xf6,0x76,0x49,0xfa,0xd7,0x2a,
    0xc9,0x4a,0xe4,0xb5,0x20,0xc9,0x4d,0x3f,0xab,0x6b,0xc7,0xd5,0xf6,0x9a,0x36,0x7d,
    0x42,0xaf,0xf2,0xfe,0x7d,0x44,0x5e,0x98,0x64,0xa7,0x7a,0x22,0x6b,0xe1,0x75,0x9a,
    0xf8,0xcf,0x1c,0xff,0x4c,0x39,0x7c,0xe2,0xd4,0xd4,0xde,0x0b,0x5a,0x7a,0x3e,0x27,
    0xf5,0x95,0x24,0xc3,0xd0,0x95,0xa7,0xc6,0x6b,0xef,0x10,0xc2,0x24,0x5d,0xf9,0x54,
    0xce,0xc1,0xe5,0x18,0x2e,0x0b,0x2e,0xdf,0x70,0xd9,0x70,0xcd,0x0c,0x97,0x03,0xd7,
    0xd2,0x70,0x4d,0xe0,0xda,0x18,0x2e,0x17,0xae,0xbd,0xe1,0xf2,0xe0,0x3a,0x19,0x2e,
    0x1f,0xae,0x8b,0xe1,0xb6,0x82,0xeb,0x66,0xb8,0xa6,0x70,0x25,0x86,0x2b,0x80,0x2b,
    0x33,0x5c,0x33,0xb8,0x3e,0x86,0x6b,0x0e,0x57,0x6e,0xb8,0x42,0xb8,0x81,0x52,0x77,
    0x3f,0x52,0xad,0x41,0xb5,0x1f,0xe1,0x74,0xf2,0xd7,0xfa,0xcc,0x88,0xea,0x28,0xfa,
    0x33,0x8c,0xfe,0xc9,0xfe,0x73,0xfb,0xff,0x64,0x01,0x17,0x53,0x67,0xc1,0x05,0xae,
    0xb1,0xbf,0x66,0x6e,0x4b,0x7f,0xc2,0xa9,0xbf,0x42,0xd7,0xd8,0x9f,0xe0,0x62,0x83,
    0x65,0xde,0x0b,0xa8,0xa3,0xe0,0xf1,0xe0,0x0e,0xfe,0x69,0xed,0xbd,0x64,0xa5,0xf1,
    0xb3,0xd3,0xf9,0x93,0xf7,0xb6,0x5e,0x27,0x97,0x1a,0x27,0xe9,0x67,0x4e,0x3a,0x17,
    0x79,0x8c,0xb3,0xd8,0xe7,0x94,0xcf,0xbb,0xf2,0xc5,0x5e,0xa7,0xad,0xe1,0x04,0x77,
    0xc1,0x9f,0xe0,0x22,0xdf,0x71,0x3a,0xcf,0xff,0xf7,0x91,0x3c,0xba,0x33,0xdf,0xe2,
    0xab,0x12,0xdc,0x03,0x4e,0xf2,0x2e,0x21,0x6f,0x29,0x59,0x29,0xb8,0xa7,0xb1,0xdf,
    0x11,0xdd,0x5c,0x23,0xef,0x4d,0x4f,0x2a,0x2e,0x27,0x6f,0xc5,0x95,0xf4,0x93,0xe2,
    0x61,0xf8,0x50,0x5c,0x45,0xef,0x97,0x52,0xb7,0x3a,0xe6,0x4e,0x71,0x3d,0x7d,0xab,
    0xfa,0xfb,0x44,0xf8,0x30,0xf4,0xdb,0xf8,0xa8,0x47,0x1a,0xbb,0xa3,0x23,0xbf,0x93,
    0x99,0x8f,0xce,0x9e,0xd5,0x9e,0x2b,0xa2,0xb7,0xa6,0x33,0xbe,0x93,0xe8,0xe9,0x19,
    0xd4,0x47,0xf0,0xc9,0x70,0x1a,0x6f,0xa6,0x99,0xd7,0xd3,0x90,0xd9,0x7a,0x9c,0xc9,
    0x1a,0x50,0x7c,0x91,0x7f,0x36,0x67,0x37,0xe0,0x4b,0x59,0x0f,0x9a,0xd7,0xd5,0xa6,
    0x3e,0x82,0x6f,0x35,0xf5,0x13,0xfc,0x30,0x73,0x22,0xf1,0x1e,0xa5,0x1f,0x4a,0x8c,
    0xff,0x27,0xc4,0xbf,0xff,0x53,0xbc,0x34,0x9a,0xbf,0x57,0xc8,0x51,0xc6,0xad,0x6b,
    0xa3,0x88,0x35,0x20,0x58,0xfc,0x36,0x77,0x41,0x47,0xb8,0x4a,0x70,0x21,0x5c,0x3b,
    0x8f,0x5b,0x60,0x97,0x4d,0x1e,0x2d,0x1d,0xfb,0x24,0xfa,0x82,0x5b,0xc1,0x89,0x7c,
    0x6b,0xde,0x6d,0x5d,0x4a,0x59,0x37,0x3a,0xae,0xbd,0x5c,0xe8,0x05,0xc5,0xe3,0xb0,
    0x29,0xf3,0x48,0xfc,0xca,0x3a,0x13,0x9d,0x71,0x3c,0x15,0xbe,0xcb,0xb2,0x98,0xeb,
    0x84,0x5c,0xd6,0x7b,0xa6,0x09,0x73,0x95,0xee,0x77,0x2e,0xd4,0x47,0x71,0xb7,0x08,
    0xf7,0x8e,0xf0,0xd0,0x08,0xef,0x1a,0xe1,0x11,0x11,0x1e,0x19,0xe1,0xdd,0x22,0x5c,
    0x13,0xe1,0x7a,0xf0,0x70,0x9f,0xa5,0xd4,0x64,0x5b,0xea,0x24,0xbd,0x38,0x84,0x71,
    0x77,0x82,0x17,0x1d,0x59,0x5f,0x9d,0x5d,0x58,0x93,0x33,0x8d,0x4e,0x91,0x0b,0xfc,
    0x03,0x5e,0x47,0x7a,0x7c,0x3b,0x17,0xec,0x84,0xff,0xd3,0x57,0xa2,0x98,0x3d,0xee,
    0x2f,0xaf,0x2f,0xb2,0x2e,0xb2,0x87,0xb9,0x50,0x1f,0x79,0xdf,0xe4,0x2b,0x2b,0xef,
    0xc2,0x0d,0xf5,0xfa,0x5d,0xc9,0x41,0xde,0xbb,0xf1,0xbe,0xc1,0xcb,0x77,0xc0,0x46,
    0x3e,0xd7,0x79,0x5f,0x3d,0xfc,0x67,0x09,0xbe,0x45,0xde,0x13,0xb9,0x7c,0x6a,0x6e,
    0x3b,0xba,0x50,0x67,0xcd,0xbf,0x8c,0xfc,0x4b,0x8d,0xce,0x4e,0x2e,0xf0,0x8b,0xc9,
    0xbf,0x97,0x0b,0x76,0xc2,0x4b,0xce,0x82,0xbb,0x8b,0x1d,0xfe,0xbb,0xbb,0x86,0x9a,
    0xf5,0xc9,0x50,0xb3,0x9d,0xe1,0x35,0x66,0xdf,0x0c,0x31,0xfb,0xb9,0xc0,0xcf,0xf1,
    0x3a,0x82,0xcb,0x5d,0xb0,0xeb,0x67,0x74,0xfa,0x93,0xfb,0xd9,0xe8,0x54,0xb8,0xa0,
    0xd7,0x9f,0x3a,0x49,0xbf,0x54,0x18,0xfd,0x01,0x2e,0xf4,0x90,0xc6,0x1d,0x48,0xdc,
    0xa5,0x26,0xb7,0x41,0x2e,0xf0,0x3a,0x57,0xbb,0xb8,0x60,0x37,0x88,0xb9,0x1a,0x6c,
    0xe6,0x4a,0x64,0x95,0xfe,0x19,0xcc,0xb8,0xe5,0x5d,0xea,0xac,0x75,0x18,0x6c,0x62,
    0x0f,0x23,0xb6,0xe4,0x25,0x7d,0x2a,0x78,0x10,0x79,0x0f,0x77,0xb2,0x4e,0x43,0xff,
    0x8a,0x5c,0xfa,0x7a,0xb8,0xb1,0x1d,0xe5,0x42,0xaf,0x8b,0x4c,0x7a,0x78,0x94,0xb1,
    0xad,0xf2,0xef,0x1d,0xe9,0x6d,0x91,0x4b,0xcf,0x57,0x19,0xdb,0x6a,0x13,0x57,0xfa,
    0xbd,0xda,0xc8,0x76,0x77,0x61,0x8d,0x88,0x4c,0x7a,0x7f,0xf7,0xd4,0x6f,0x6e,0x2a,
    0xdb,0x43,0xfa,0x93,0x35,0x52,0x63,0x6c,0x46,0xbb,0xb0,0x4e,0x57,0x10,0xbf,0xd6,
    0x05,0x6e,0x0f,0xd3,0x9b,0xb5,0xd4,0xa1,0x84,0x3a,0x94,0x18,0xfb,0xba,0x68,0xce,
    0xf6,0x74,0x81,0x5b,0x6a,0xfa,0x79,0x4f,0xd7,0xb8,0x9f,0x7b,0x18,0xfb,0x31,0xc4,
    0x17,0x5d,0x59,0x9f,0x63,0xa8,0x85,0xec,0x2d,0x63,0xb9,0x0b,0xd4,0xb3,0x66,0x06,
    0xfa,0xa7,0x82,0x38,0x05,0xec,0x3b,0x72,0xf6,0x0c,0xf0,0xb6,0x79,0x9c,0x63,0xfa,
    0xde,0x94,0xfd,0xa8,0x99,0xe9,0x85,0x6e,0xe8,0x68,0xbf,0x94,0x72,0xde,0xf6,0x34,
    0x3a,0x65,0xf0,0xda,0xa7,0x3b,0x61,0x57,0x66,0x74,0x7a,0xe1,0x5f,0xfd,0xf4,0xc1,
    0x4f,0x6f,0xbb,0x26,0xe0,0xd5,0x4f,0x5f,0xec,0x84,0xd7,0x5a,0xf5,0xc3,0x7f,0x5f,
    0xe3,0xab,0x3f,0xbe,0xca,0x8d,0xaf,0x0a,0x78,0xb5,0x1b,0x80,0xad,0xf0,0xff,0xf8,
    0x31,0x0e,0x48,0xef,0x72,0x0d,0xb5,0x69,0x91,0xa1,0x36,0xcd,0xcd,0x7b,0x21,0xb5,
    0x69,0x69,0x62,0xec,0x82,0x8e,0xe6,0x31,0x98,0x3c,0x2a,0x8d,0xce,0x10,0x78,0x1d,
    0xd3,0x50,0xec,0x86,0x18,0x9d,0x5d,0xf1,0xaf,0x7e,0x86,0xe3,0x67,0x98,0xd1,0x19,
    0x01,0xaf,0x7e,0x46,0x62,0x37,0xc2,0x8c,0x71,0x14,0xfe,0x47,0x1a,0x5f,0xbb,0xe1,
    0xab,0xca,0xf8,0xaa,0x86,0x57,0xbb,0x1a,0x6c,0xab,0xa9,0x4d,0x4d,0x54,0x9b,0xd6,
    0x19,0x6a,0xd3,0xca,0xbc,0x6f,0x4d,0x6d,0xda,0x98,0x73,0x63,0x34,0xe7,0xbc,0xc6,
    0xac,0xc5,0x66,0x9e,0xf6,0x3c,0x5c,0x9d,0x19,0xd3,0x18,0xf8,0x7a,0xd6,0xc1,0x68,
    0x38,0xf5,0x31,0x16,0xbf,0x92,0xe3,0xd8,0x28,0xc7,0x76,0xe4,0xd8,0xd6,0xe4,0xb5,
    0x0d,0x79,0xb5,0x37,0x79,0x8d,0x4f,0x1a,0x9f,0x6f,0x07,0x44,0x78,0x4a,0x84,0xa7,
    0x46,0xf8,0xf8,0x08,0x4f,0x8b,0xf0,0x9c,0x08,0xcf,0x8b,0xf0,0x55,0x11,0xbe,0x31,
    0xc2,0x0b,0x23,0xbc,0xc8,0x60,0xb9,0x3b,0x3d,0x16,0xc9,0x5f,0x8e,0xf0,0x3b,0x51,
    0xdd,0xf7,0xa6,0x0e,0xda,0x0f,0xfb,0xd2,0x0f,0xfb,0x18,0x9d,0xfd,0xe0,0xe7,0x52,
    0xcb,0xfd,0xb1,0xdb,0x8f,0x79,0x18,0x0f,0xa7,0xfa,0x07,0x46,0x3e,0x0f,0xca,0xe0,
    0xf3,0x60,0x78,0x9d,0xef,0x43,0xb0,0x3b,0x18,0x9f,0x07,0xc0,0xa9,0xfe,0xa1,0xcc,
    0x85,0xfa,0x3c,0x1c,0x9f,0x87,0x19,0x9d,0x23,0xe0,0xf5,0x5c,0x9a,0x80,0xdd,0x11,
    0x46,0xe7,0x28,0xfc,0xe8,0x39,0x7d,0x0c,0x9c,0xdc,0xa5,0xef,0x86,0x3b,0x16,0x5b,
    0x91,0xc9,0x79,0x36,0x29,0x69,0x38,0xcf,0x44,0x36,0xd1,0x3f,0x93,0xe8,0x9d,0x89,
    0xf4,0xdb,0x64,0xf0,0x24,0x13,0xeb,0x38,0xfa,0x49,0xc6,0x33,0x15,0xac,0xb2,0x13,
    0xc8,0x43,0x64,0xc7,0x83,0xf5,0x5c,0x39,0x91,0xbd,0x78,0x2a,0xfd,0x24,0x3a,0x53,
    0xe0,0xd5,0xfe,0x14,0x7a,0x51,0xe7,0xe4,0x54,0xb8,0xba,0xb4,0x46,0xb9,0xe9,0xbd,
    0xfd,0x74,0xee,0xf6,0x33,0x91,0xab,0xed,0x19,0xc8,0xc4,0xef,0x34,0xb0,0xd6,0xf5,
    0x2c,0xea,0x7a,0xa6,0xd1,0x3f,0x1b,0xfe,0x5e,0xea,0x73,0x0e,0xdc,0x64,0xea,0x33,
    0xdb,0xd4,0x47,0x64,0xb3,0xd2,0x5a,0x86,0x7a,0xcc,0x32,0x7e,0xce,0x65,0xcc,0x8b,
    0xf0,0x33,0x17,0x4e,0x6a,0x7f,0x8f,0xd7,0x90,0x3b,0xf4,0x79,0xf0,0xe5,0xec,0x93,
    0xa7,0x63,0x7b,0x3e,0x32,0xc9,0x79,0x0e,0x58,0xfd,0x5e,0x10,0xf9,0xbd,0x10,0xce,
    0xfa,0xbd,0x18,0xbe,0x8a,0xef,0x2b,0xea,0xf7,0x12,0x64,0xe2,0x77,0x1e,0x58,0x6b,
    0x71,0x19,0xb5,0xb8,0xd4,0xc4,0xba,0x1c,0x5e,0x6b,0x71,0x05,0x9c,0xd6,0x62,0xbe,
    0xa9,0x85,0xc8,0xae,0xf4,0xcf,0x75,0xd4,0xe2,0x4a,0xe3,0xe7,0x1a,0x72,0xd6,0xbd,
    0xed,0x5a,0xbe,0x27,0x5d,0x43,0x2e,0x57,0xc1,0xc9,0x19,0x3f,0x1f,0xfb,0xeb,0x8c,
    0xfd,0xf5,0xd1,0x98,0x6f,0x80,0x3b,0x9a,0x3c,0x16,0x98,0x3c,0x44,0x76,0x93,0x7f,
    0x6e,0xc6,0xcf,0x4d,0xc4,0xb8,0x31,0x69,0xb8,0x17,0x2f,0x40,0x76,0xb3,0x89,0x71,
    0x0b,0xfb,0x95,0xe2,0xdb,0x88,0x39,0x8b,0x9c,0x6f,0xe7,0xbb,0xdc,0x6d,0x66,0x1c,
    0x77,0x60,0x77,0xbb,0x39,0x3f,0xee,0x84,0xbf,0xd5,0xc4,0xbd,0x33,0x8a,0xbb,0xc0,
    0xc4,0xb9,0x8b,0x7d,0x4f,0xeb,0x70,0x57,0x54,0x87,0xf9,0xe0,0xd9,0xe0,0xbb,0x8d,
    0xed,0x3d,0xac,0x0b,0xb1,0x5d,0x08,0xd6,0xf9,0xbc,0x37,0xc3,0x9d,0xe2,0x3e,0x78,
    0xd1,0x5f,0x04,0xd6,0x75,0x78,0x3f,0x67,0xdb,0x42,0xf6,0x59,0xcd,0xe7,0x7e,0xe3,
    0xf3,0x81,0x0c,0x3e,0x1f,0x84,0xd7,0x9a,0x2c,0x86,0xab,0x37,0xfd,0xbb,0xd8,0xe8,
    0x3f,0x44,0x9d,0x75,0x2e,0x1f,0x81,0x7b,0x98,0xb9,0x5c,0x62,0xe6,0x52,0x64,0x8f,
    0xfb,0xe7,0x49,0xc6,0xfe,0x38,0x3e,0x1f,0xe3,0x7b,0xb2,0xd4,0x65,0x09,0xb2,0x27,
    0x4d,0x8c,0xa7,0x88,0xb1,0xdc,0xc7,0x90,0xf5,0xf0,0x34,0x77,0xfa,0xa7,0x98,0x4f,
    0xe1,0x9e,0x31,0xbc,0xfa,0x7c,0x26,0xf2,0xb9,0x04,0x9f,0xa2,0xff,0x2c,0xe7,0x8d,
    0xae,0xa5,0xe7,0xe0,0x74,0x2d,0x3d,0x17,0xcd,0xd3,0x6c,0x93,0xcf,0xf3,0xd1,0x7e,
    0xfe,0x42,0x86,0xfd,0x7c,0x19,0xbc,0xee,0xe7,0x2f,0x62,0xb7,0xcc,0xe8,0x2c,0x8f,
    0xd6,0xc1,0x0a,0x38,0xbb,0x9f,0xbf,0x84,0xed,0x0a,0xea,0xb9,0xca,0xd4,0x53,0x64,
    0x2b,0xfd,0xb3,0x9a,0x1c,0x57,0x9a,0x9c,0x5e,0x25,0xa7,0x57,0x4c,0xbc,0xd7,0xe0,
    0x65,0x8c,0x2f,0x83,0x65,0x8c,0xab,0xb0,0x5f,0x6d,0x74,0x5f,0xe7,0xfc,0x57,0xfc,
    0x06,0xe7,0xfb,0x32,0xfa,0xe2,0x4d,0x74,0xde,0x30,0x3a,0x6f,0x71,0x27,0x58,0x89,
    0xce,0xdb,0xe8,0xbd,0x65,0x62,0xbe,0x1d,0xc5,0x5c,0x65,0xec,0xdf,0xe5,0xcc,0x17,
    0xdd,0x77,0xc0,0x2a,0x7b,0x8f,0xf3,0x5f,0xce,0xab,0xf7,0xa2,0xfb,0x51,0xc7,0x0c,
    0xf7,0xa3,0x0e,0xf8,0xdf,0xd6,0xf8,0x78,0x1f,0x5e,0x7c,0xbc,0x1f,0xf9,0x28,0xca,
    0x70,0x0f,0xec,0x64,0xde,0x3b,0xe3,0x6f,0x3b,0x73,0x1f,0xf9,0x20,0xba,0x9f,0x7c,
    0x1a,0xe1,0xaf,0x22,0xbc,0x26,0xc2,0xdf,0x44,0xf8,0xfb,0x08,0xaf,0x8d,0xf0,0x8f,
    0x11,0xfe,0x35,0xc2,0xeb,0xa2,0xfb,0xd4,0x86,0x48,0x9e,0xe5,0x1a,0xdf,0x9f,0x3e,
    0x64,0x8c,0xda,0x33,0x1f,0x65,0xb8,0xeb,0x7c,0x0c,0xaf,0x67,0xf5,0x27,0xd8,0x7d,
    0xcc,0x3c,0x7d,0x00,0xa7,0xfa,0x9f,0x45,0x3e,0x3f,0xcf,0xe0,0xf3,0x0b,0x78,0xbd,
    0x3f,0x7d,0x89,0xdd,0x17,0xf8,0xfc,0x14,0x4e,0xf5,0xbf,0xa6,0xd6,0x22,0x5b,0x03,
    0x56,0xd9,0xb7,0xd4,0x5d,0x64,0xdf,0x80,0x75,0x0f,0xfc,0x8e,0xef,0x3e,0x6b,0xa8,
    0xb5,0xe8,0x7c,0x05,0xaf,0xf6,0x3f,0x30,0x4f,0x22,0x5b,0x0b,0xd6,0xdc,0x7f,0xca,
    0xf0,0x5d,0xe5,0x67,0x78,0xd1,0xff,0x11,0xac,0xf1,0x7e,0x61,0xcf,0x5d,0xcb,0x5c,
    0x89,0xce,0xf7,0xf0,0xea,0xf3,0xb7,0x0c,0x3e,0x7f,0x87,0xd7,0x3d,0xf7,0x0f,0x38,
    0xdd,0x73,0x7f,0x85,0x53,0xfd,0x3f,0x99,0x7b,0xdd,0x37,0xd6,0xc3,0xe9,0x9e,0xbb,
    0xd1,0xec,0x11,0xeb,0xd3,0xcf,0x24,0xf9,0x9b,0xfe,0xfd,0x0b,0x9f,0x1b,0xcc,0x9e,
    0xbb,0x11,0xd9,0xdf,0x26,0xc6,0x26,0x62,0xe8,0x9e,0xfb,0x0f,0x7b,0xeb,0x26,0xb3,
    0xe7,0x6e,0x36,0xbc,0xfa,0xdc,0x1c,0xf9,0xdc,0x68,0xf6,0xdc,0xc4,0x85,0x9e,0xd4,
    0x3d,0xd7,0xf1,0x0f,0x1a,0xb1,0x5d,0x07,0xd6,0xf8,0xd9,0x2e,0xac,0x39,0xc5,0x39,
    0x2e,0xf4,0xb7,0xee,0x2d,0x4d,0x5c,0xd0,0xc9,0x31,0x36,0xb9,0x2e,0xac,0xa1,0xe5,
    0xe8,0xe4,0xb9,0xa0,0x97,0x4b,0x8c,0xb4,0xff,0x8d,0x7e,0xbe,0x0b,0x6b,0x42,0xf6,
    0x03,0x79,0xd7,0xfd,0x20,0xcb,0xfc,0x0f,0xa3,0x8b,0xd9,0x03,0x8a,0x19,0x53,0x57,
    0xf3,0x9b,0x61,0xeb,0x0c,0xbf,0x7f,0xb5,0x81,0xd7,0x39,0x6f,0xeb,0xb6,0xfc,0x9e,
    0xba,0x8d,0x0b,0xbc,0xae,0xab,0x76,0x2e,0x70,0x75,0xe6,0xee,0xd1,0xde,0x05,0x5f,
    0xed,0x4c,0xce,0x1d,0xf8,0xff,0x87,0xde,0x93,0x3b,0xf2,0x5b,0xf0,0x4c,0xf4,0x65,
    0x9c,0xc2,0x75,0x30,0xbf,0x91,0xfc,0x0b,0x67,0x76,0x4f,0xa0,0x70,0x1b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        uint convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, uint value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                uint destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
