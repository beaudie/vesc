// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x99,0x7f,0x7c,0x97,0x55,
    0x15,0xc7,0x9f,0xbb,0xef,0x36,0x06,0x1b,0x03,0xe4,0xe7,0x86,0x0c,0xe6,0x00,0x4d,
    0xc6,0x98,0x38,0xc6,0x80,0x44,0x7e,0xc8,0x36,0x81,0x74,0x0e,0x0c,0x70,0x81,0x20,
    0xbf,0x85,0x4d,0x10,0x53,0x32,0x2a,0x52,0x41,0x2d,0xb5,0x32,0x15,0x7f,0x95,0x62,
    0xfe,0x02,0xd2,0x50,0x33,0x25,0x31,0xd3,0x30,0x12,0x2d,0x33,0x2d,0xc9,0xc2,0x2c,
    0x53,0xcc,0x32,0x2d,0x5f,0x2f,0x0a,0x53,0xec,0x9e,0xe7,0xbe,0x0f,0x3b,0xbb,0x7c,
    0xff,0x72,0xaf,0xd7,0xf3,0xfa,0x3e,0xe7,0x73,0xce,0xf9,0x9c,0x73,0xcf,0x3d,0xf7,
    0x3e,0xf7,0x79,0x96,0xc9,0xa9,0xe8,0x94,0x64,0x5c,0xd2,0x25,0x29,0x48,0xd6,0xb8,
    0x24,0xfd,0xeb,0x91,0xe4,0x24,0x72,0x5b,0x98,0xe4,0xa7,0xbf,0x0d,0xd3,0x67,0x4c,
    0xaf,0x5a,0x73,0xc1,0xa2,0xaa,0x9a,0x51,0xd5,0xa2,0x2f,0x4e,0x32,0xa9,0x9d,0xe8,
    0xba,0x79,0x9b,0x3c,0xff,0x9b,0xeb,0xaf,0xd6,0x05,0xcb,0xdb,0x04,0xaf,0xf6,0x8a,
    0xee,0x1e,0xcf,0x4d,0xb9,0x92,0x64,0x02,0xb6,0x72,0x35,0x7a,0xeb,0x4f,0x85,0x30,
    0x49,0x05,0xbf,0x8a,0x39,0xb0,0x5c,0x83,0xe5,0x80,0x15,0x18,0x2c,0x03,0x56,0x64,
    0xb0,0x5c,0xb0,0xee,0x06,0xcb,0x03,0xeb,0x65,0xb0,0x7c,0xb0,0x7e,0x06,0xeb,0x04,
    0x76,0xb4,0xc1,0x0a,0xc0,0x06,0x19,0xac,0x33,0xd8,0x60,0x83,0x75,0x01,0x3b,0xce,
    0x60,0x85,0x60,0x95,0x06,0x2b,0x02,0xab,0x36,0x58,0x57,0xb0,0x1a,0x83,0x15,0x83,
    0xd5,0x49,0xdd,0xfd,0x48,0xb5,0x06,0x0d,0x7e,0x84,0x17,0x91,0xbf,0xd6,0x67,0x6d,
    0x54,0x47,0xb1,0x5f,0x6b,0xec,0x2f,0xf6,0xbf,0xc7,0x1c,0xd6,0x05,0xb9,0x9c,0x3a,
    0x8b,0x7c,0xbc,0xeb,0xc8,0x37,0xcc,0x1d,0xc9,0x27,0x98,0xf2,0x0d,0x77,0x1d,0xf9,
    0x44,0x2e,0x37,0xb2,0xcc,0x7b,0x21,0x75,0x14,0xf9,0x7c,0xe4,0x12,0x7f,0xf5,0xf4,
    0x2c,0x39,0x69,0xfc,0x4c,0x3a,0x7f,0x72,0xdf,0xdb,0xdb,0xe4,0x53,0xe3,0x24,0xfd,
    0xcd,0x4d,0xe7,0xa2,0x13,0xe3,0x2c,0xf7,0x39,0x15,0x70,0xaf,0xb8,0xf8,0xf4,0xc6,
    0xc7,0xa5,0x36,0xb9,0x49,0x9f,0x14,0x0f,0x7a,0xe1,0x28,0x3d,0x6c,0x1b,0xf4,0xfd,
    0xb9,0x2f,0x85,0x73,0xa0,0xe1,0x2c,0xc5,0x66,0x30,0x39,0x09,0x56,0xe6,0xbb,0x56,
    0x7b,0xe5,0x93,0x5e,0x92,0xc7,0xf1,0xf4,0x8c,0x70,0x8d,0x43,0x1e,0x06,0x36,0x8c,
    0x71,0x54,0x1a,0xfb,0xe1,0xe8,0xf2,0x8d,0x7e,0x24,0x7d,0xac,0xf2,0x68,0xf2,0x54,
    0x79,0x3c,0x3d,0xa8,0xf2,0xe4,0x88,0xbf,0x91,0xf5,0x32,0x8c,0x5a,0x37,0x31,0xdf,
    0x2a,0x37,0xd3,0xeb,0x6a,0x3f,0x27,0x92,0x17,0x62,0xdf,0xcb,0x47,0x5d,0x62,0xfc,
    0x96,0x1b,0x5e,0xb1,0x6b,0x63,0x0e,0x07,0x78,0x54,0xfb,0xb4,0x8c,0x7e,0xbc,0x88,
    0xf1,0x7d,0x81,0x75,0xb0,0x96,0x7a,0x88,0x7c,0x31,0x98,0xe8,0xbf,0xc4,0xbd,0x1d,
    0xff,0x7a,0xd6,0x89,0xc6,0xbd,0x94,0x38,0xaa,0xff,0x86,0xbf,0x3e,0xce,0xb4,0xcb,
    0xd7,0xb2,0x86,0xd4,0xfe,0x26,0x53,0x1f,0x91,0xef,0x34,0xf5,0x13,0xf9,0x61,0x7a,
    0x49,0xfd,0x7f,0x2c,0x7c,0xfe,0x4f,0xe5,0x9d,0xf4,0x99,0xca,0xcf,0x99,0x7c,0x7f,
    0x4f,0xbf,0xd8,0xba,0xec,0xc3,0x5e,0xea,0xa0,0xeb,0xab,0x8c,0x75,0x24,0xb2,0xf8,
    0x55,0xba,0xc0,0x21,0xd8,0x38,0xe4,0xe1,0x60,0x7d,0xbd,0x5c,0x85,0x5f,0x86,0x38,
    0x23,0x5c,0xe0,0xac,0xc2,0x5e,0xe4,0x6a,0x30,0xd1,0x9f,0xc0,0xbd,0xad,0xdb,0x54,
    0xd6,0x9e,0xe6,0xb5,0xda,0x85,0x7d,0xb8,0xd2,0x4b,0xc2,0x23,0x6b,0x53,0xb0,0x7d,
    0xe4,0x5c,0xeb,0xbb,0x2c,0x87,0xb9,0x4e,0x88,0xfd,0x5f,0x8f,0xe4,0x31,0x57,0x32,
    0xce,0x49,0x2e,0x8c,0x57,0xe5,0xc9,0x91,0x7c,0x9a,0x91,0x65,0x5d,0xcd,0x8d,0xf4,
    0xf3,0x22,0xfd,0x82,0x48,0x3e,0x27,0xb2,0x5f,0x1c,0xe9,0x97,0x46,0xfa,0x36,0xe4,
    0x89,0x3e,0x4b,0xa9,0xc1,0x58,0xea,0x22,0x3d,0x72,0x12,0xe3,0x1e,0x07,0x2e,0x36,
    0xb2,0xbe,0x3e,0xed,0xc2,0x1a,0x6c,0x33,0x36,0x27,0xb9,0x80,0xdf,0xef,0x6d,0x64,
    0x2e,0xc7,0xbb,0xe0,0x27,0xf8,0x7f,0x7c,0x25,0x26,0xb0,0x2f,0x7e,0xe0,0xed,0x45,
    0x77,0xb2,0xd4,0xd2,0x85,0xfa,0xc8,0xfd,0x47,0xbe,0xfa,0x72,0x2f,0xd8,0x78,0x6f,
    0x3f,0x89,0x1c,0xe4,0x7e,0x32,0xf7,0x07,0xbd,0xfe,0x14,0x7c,0xe4,0xf7,0x80,0xe7,
    0xaa,0xf7,0xbf,0x0d,0x70,0x8b,0xbe,0x11,0xbd,0xfc,0x6a,0x6e,0xa7,0xba,0x50,0x67,
    0xcd,0x7f,0x1a,0xf9,0x4f,0x35,0x36,0xd3,0x5d,0xc0,0xb7,0x93,0xff,0x67,0x5c,0xf0,
    0x13,0x5c,0x72,0x16,0x79,0x8a,0xbf,0xea,0xe1,0x9f,0xe2,0xda,0x6b,0x76,0x7a,0x96,
    0x9a,0x35,0x81,0x6b,0xcc,0x33,0xb2,0xc4,0x6c,0x76,0x01,0xbf,0xcc,0xdb,0x88,0x3c,
    0xc3,0x05,0xbf,0x66,0x63,0x33,0x93,0xdc,0xd7,0x63,0x73,0xa6,0x0b,0x76,0x33,0xa9,
    0x93,0xf4,0xcb,0x99,0xc6,0xfe,0xb3,0x2e,0xf4,0x90,0xc6,0x9d,0x45,0xdc,0x9d,0x26,
    0xb7,0xd9,0x2e,0xe0,0x3a,0x57,0x73,0x5c,0xf0,0x9b,0xcd,0x5c,0xb5,0x98,0xb9,0x12,
    0xdd,0x59,0xfe,0x6a,0x61,0xdc,0x72,0x2f,0x75,0xd6,0x3a,0xb4,0x98,0xd8,0x67,0x13,
    0x5b,0xf2,0x92,0x3e,0x15,0x79,0x8c,0x8f,0x21,0x6b,0x69,0xbe,0x0b,0xe7,0x85,0x79,
    0xe8,0xa5,0xaf,0xe7,0xe3,0x9b,0xee,0x91,0x2e,0xf4,0xba,0xe8,0xa4,0x87,0x17,0x1a,
    0xdf,0x45,0x4e,0xf6,0x82,0xd0,0xdb,0xa2,0x97,0x9e,0x5f,0x64,0xe2,0x2e,0x31,0x71,
    0xa5,0xdf,0x97,0x18,0xde,0x65,0x2e,0xac,0x11,0xd1,0x49,0xef,0x2f,0x4b,0x79,0xf3,
    0xc3,0xfe,0xcb,0xb3,0x58,0x7c,0x96,0x1a,0xbe,0x73,0x5d,0x58,0xa7,0x4f,0x53,0xf3,
    0x15,0x2e,0x60,0xcb,0x4d,0x6f,0xae,0xa0,0x0e,0x0d,0xd4,0xa1,0xc1,0xf8,0xaf,0x8c,
    0xe6,0xac,0xd5,0x05,0x6c,0xa7,0xe9,0xe7,0x56,0xd7,0xb1,0x9f,0xeb,0x8d,0xff,0x79,
    0xc4,0x17,0x5b,0x59,0x9f,0xe7,0x51,0x0b,0xd9,0x5b,0x56,0xf9,0xfb,0xa1,0xac,0x5b,
    0x59,0x33,0x75,0xfe,0xaa,0x25,0x4e,0x21,0xfb,0x4e,0x41,0xfa,0x8c,0xcb,0xa4,0xeb,
    0xba,0xb3,0xb9,0xef,0xc2,0x7e,0x54,0x64,0x7a,0xe1,0x38,0x6c,0xb4,0x5f,0xaa,0x78,
    0xbe,0x56,0x1a,0x9b,0x11,0xe0,0xda,0xa7,0xd5,0xf8,0x8d,0x30,0x36,0x27,0xc0,0xaf,
    0x3c,0x27,0xc2,0x33,0xd2,0xd8,0xd4,0x80,0x2b,0xcf,0x28,0xfc,0x6a,0x92,0xf6,0x5a,
    0xd5,0xc2,0x3f,0xca,0x70,0xd5,0xc1,0x35,0xda,0x70,0x8d,0x01,0x57,0xbf,0xb1,0xf8,
    0x0a,0x7e,0xc8,0x8f,0x71,0x6c,0xaa,0x6f,0xaf,0x4d,0xb7,0x2c,0xb5,0xe9,0x6a,0xee,
    0x8b,0xa9,0x4d,0x77,0xbb,0xa7,0x61,0xa3,0x79,0x9c,0x4c,0x1e,0xe3,0x8d,0xcd,0x04,
    0x70,0x1d,0xd3,0x44,0xfc,0x26,0x18,0x9b,0x49,0xf0,0x2b,0xcf,0x29,0xf0,0x4c,0x36,
    0x36,0x53,0xc0,0x95,0xa7,0x1e,0xbf,0x29,0x66,0x8c,0x0d,0xf0,0xd7,0x1b,0xae,0x53,
    0xe1,0x6a,0x34,0x5c,0x53,0xc1,0xd5,0x6f,0x1a,0xbe,0x53,0xa9,0xcd,0xb4,0xa8,0x36,
    0x3d,0xb3,0xd4,0xa6,0x87,0xb9,0x3f,0x8a,0xda,0xf4,0xb2,0xcf,0x29,0x9e,0xdb,0x1a,
    0xf3,0x74,0x7c,0xae,0x84,0xf3,0x0c,0xb0,0x26,0x33,0xa6,0x19,0xe0,0xcd,0xac,0x83,
    0xd3,0xc0,0x0e,0xef,0x75,0xf0,0x4a,0x8e,0x33,0x4d,0x8e,0xbd,0x79,0xd7,0x90,0xbf,
    0x3e,0x26,0xaf,0xbe,0xe4,0x55,0x62,0xf2,0x9a,0x95,0x74,0x7c,0xbe,0xcd,0x8d,0xe4,
    0x55,0x91,0xbc,0x3a,0x92,0xd7,0x44,0xf2,0x85,0x91,0x7c,0x79,0x24,0x5f,0x15,0xc9,
    0x37,0x46,0xf2,0x6d,0x91,0xbc,0x2d,0x92,0xef,0x4b,0x3a,0x3e,0x9f,0x1f,0x89,0xf4,
    0xcf,0x1a,0x59,0xce,0x4a,0xaf,0x44,0xfa,0xd7,0x23,0xff,0x37,0x22,0xf9,0xbd,0x68,
    0x9e,0x66,0x53,0x37,0xed,0x9f,0xb3,0xe8,0x9f,0x39,0xc6,0xa6,0x05,0x7c,0x23,0xf3,
    0xf6,0x39,0xfc,0x5a,0x98,0xb7,0x59,0x60,0x6a,0x3f,0x2f,0xe2,0x3c,0x3b,0x0b,0xe7,
    0x7c,0x70,0xed,0x8f,0x05,0xf8,0xcd,0x87,0x73,0x2e,0x98,0xda,0x9f,0xc3,0xdc,0x29,
    0xe7,0x22,0x38,0x17,0x1a,0x9b,0xc5,0xe0,0xfa,0x1c,0x5b,0x8a,0xdf,0x62,0x63,0xb3,
    0x0c,0x1e,0x7d,0xae,0x9f,0x0b,0x26,0x67,0xef,0x7b,0xc0,0x56,0xe0,0x2b,0x3a,0x79,
    0xfe,0xb5,0x26,0xed,0xcf,0x3f,0xd1,0xad,0x94,0x3d,0x9c,0x5e,0x5b,0x49,0x7f,0xb6,
    0x21,0xb7,0x9a,0x58,0xe7,0xd3,0x7f,0x32,0x9e,0xd5,0xc8,0xaa,0xbb,0x80,0x3c,0x44,
    0xb7,0x06,0x59,0x9f,0x43,0x9f,0x67,0xef,0x5e,0x4d,0xff,0x89,0xcd,0x2a,0x70,0xf5,
    0xff,0x22,0xbd,0xab,0x73,0xb2,0x0e,0xac,0x29,0xad,0x51,0x7e,0x7a,0xee,0xff,0x32,
    0xef,0x02,0x6d,0xe8,0xd5,0xf7,0x2b,0xe8,0x84,0xf7,0x42,0x64,0xad,0xeb,0x57,0xa9,
    0xeb,0x7a,0x63,0x7f,0x09,0xf8,0x36,0xea,0x73,0x19,0xd8,0xa5,0xd4,0x67,0xa3,0xa9,
    0x8f,0xe8,0x36,0xf8,0x6b,0x2b,0xf5,0xd8,0x60,0x78,0xae,0x60,0xcc,0x5b,0xe1,0xb9,
    0x12,0x4c,0x6a,0xbf,0xc5,0x5b,0xc8,0xba,0xfe,0x1a,0xf8,0x68,0xf6,0xd5,0x75,0xf8,
    0x7e,0x1d,0x9d,0xe4,0x7c,0x39,0xb2,0xf2,0x5e,0x1d,0xf1,0x5e,0x03,0x66,0x79,0xbf,
    0x09,0xde,0xc8,0xfb,0x8d,0xf2,0x7e,0x0b,0x9d,0xf0,0x5e,0x85,0xac,0xb5,0xf8,0x36,
    0xb5,0xb8,0xd6,0xc4,0xba,0x0e,0x5c,0x6b,0x71,0x3d,0x98,0xd6,0x62,0x93,0xa9,0x85,
    0xe8,0x6e,0xf0,0xd7,0xad,0xd4,0xe2,0x06,0xc3,0x73,0x33,0x39,0xeb,0x5e,0x78,0x0b,
    0xef,0x55,0x37,0x93,0xcb,0x8d,0x60,0x72,0x26,0xd8,0x84,0xff,0xad,0xc6,0xff,0x3b,
    0xd1,0x98,0xbf,0x0b,0xb6,0x9c,0x3c,0x36,0x9b,0x3c,0x44,0x77,0xbb,0xbf,0xee,0x80,
    0xe7,0x76,0x62,0xdc,0x96,0xb4,0x9f,0xa3,0x37,0xa3,0xbb,0xc3,0xc4,0xf8,0x1e,0xfb,
    0x9b,0xca,0x77,0x11,0xf3,0x12,0x72,0xbe,0x9b,0x77,0xbf,0xbb,0xcc,0x38,0xee,0xc1,
    0xef,0x6e,0xf3,0xbc,0xb9,0x17,0xfc,0x4e,0x13,0xf7,0xde,0x28,0xee,0x66,0x13,0x67,
    0x0b,0xfb,0xa4,0xd6,0x61,0x4b,0x54,0x87,0x4d,0xc8,0x1b,0x91,0xb7,0x1a,0xdf,0xef,
    0xb3,0x2e,0xc4,0x77,0x1b,0xb2,0xce,0xe7,0xfd,0x59,0xce,0x20,0x3f,0x00,0x17,0xfb,
    0xfb,0x90,0x75,0x1d,0x6e,0xe7,0x59,0xb8,0x8d,0x7d,0x59,0xf3,0xd9,0x6e,0x38,0x1f,
    0xc8,0xc2,0xf9,0x20,0xb8,0xd6,0xe4,0x21,0xb0,0x66,0xd3,0xbf,0x0f,0x19,0xfb,0x1f,
    0x52,0x67,0x9d,0xcb,0x1f,0x81,0x3d,0xcc,0x5c,0xee,0x30,0x73,0x29,0xba,0x47,0xfd,
    0xf5,0x18,0x63,0x7f,0x14,0xce,0x47,0x78,0xcf,0x96,0xba,0xec,0x40,0xf7,0x98,0x89,
    0xf1,0x38,0x31,0x76,0xf1,0xfc,0xfc,0x09,0xef,0x00,0x8f,0x33,0x9f,0x82,0x3d,0x61,
    0x70,0xe5,0x7c,0x22,0xe2,0xdc,0x91,0xb4,0x9f,0xa5,0x7f,0xca,0xf3,0x49,0xd7,0xd2,
    0x93,0x60,0xba,0x96,0x9e,0x8c,0xe6,0x69,0xa3,0xc9,0xe7,0xa9,0x68,0x3f,0xff,0x59,
    0x96,0xfd,0x7c,0x17,0xb8,0xee,0xe7,0x4f,0xe3,0xb7,0xcb,0xd8,0xfc,0x3c,0x5a,0x07,
    0xbb,0xc1,0xec,0x7e,0xfe,0x0b,0x7c,0x77,0x53,0xcf,0x3d,0xa6,0x9e,0xa2,0x7b,0xc6,
    0x5f,0xcf,0x93,0xe3,0x33,0x26,0xa7,0x5f,0x92,0xd3,0x73,0x26,0xde,0xaf,0xc0,0x65,
    0x8c,0xcf,0x22,0xcb,0x18,0xf7,0xe0,0xff,0xbc,0xb1,0xfd,0x35,0xe7,0x05,0x95,0x5f,
    0xe0,0x3c,0xf0,0x14,0x7d,0xf1,0x1b,0x6c,0x5e,0x30,0x36,0x2f,0x72,0x86,0xd8,0x8d,
    0xcd,0x4b,0xd8,0xbd,0x68,0x62,0xbe,0x14,0xc5,0xdc,0x63,0xfc,0x7f,0xcb,0x3c,0xeb,
    0xf3,0xed,0x77,0x60,0xda,0x4b,0x7b,0xcd,0xd8,0x45,0xf7,0xb2,0xbf,0xf6,0xc2,0xf3,
    0xb2,0xe1,0xf9,0x03,0x67,0x0d,0x95,0xff,0x08,0xaf,0xae,0xfd,0x57,0xc1,0xf6,0x99,
    0x9e,0xfa,0x13,0xbd,0xf3,0xaa,0xe9,0x89,0xd7,0xc0,0x75,0x3c,0x7f,0x86,0xfb,0x35,
    0xb3,0x87,0xfe,0x05,0x5c,0xdf,0xef,0x5f,0x01,0x93,0xd8,0xa2,0xff,0x2b,0xe7,0x1c,
    0xc9,0x7f,0xbf,0xc9,0x5f,0xf0,0x37,0xfd,0xf5,0x36,0xf9,0xbf,0x69,0xf2,0x7d,0x2b,
    0xea,0xf7,0xbf,0xb1,0x3e,0xde,0x22,0xc6,0x1b,0x60,0x52,0xc7,0xfd,0xf8,0xbf,0x6d,
    0x74,0x6d,0x91,0x6e,0xbf,0xe9,0xfb,0xbf,0x73,0xae,0xd2,0x31,0xfe,0x03,0x4c,0x7c,
    0x5f,0x47,0xd6,0x3c,0xde,0xe1,0x4c,0xa6,0xf2,0x3f,0xa9,0xab,0xbe,0x4b,0xbe,0x0b,
    0xf6,0x8e,0x99,0xdf,0x77,0x89,0xad,0xf3,0xb2,0xd7,0xf8,0xff,0x0b,0xff,0x75,0xe4,
    0xf2,0x6f,0x30,0xf1,0x7d,0x0f,0x59,0xf3,0x7c,0x9f,0xf3,0x9e,0x9c,0x4f,0xde,0x8f,
    0xce,0xcf,0x03,0xa8,0x63,0x7f,0xce,0xcf,0xa5,0x7c,0x63,0x96,0x78,0x65,0x86,0xe3,
    0x00,0xb8,0x70,0x1c,0x88,0xde,0x13,0xf4,0xbb,0xf5,0x40,0x73,0x06,0x1f,0x64,0xf8,
    0xca,0xe1,0xab,0x30,0xe7,0xd3,0x83,0xd1,0x79,0xf5,0x50,0x24,0x67,0xa2,0xef,0x51,
    0xb9,0x91,0x9c,0x1f,0xc9,0x9d,0x23,0xb9,0x4b,0x24,0x17,0x45,0x72,0xf7,0x48,0xee,
    0x15,0x7d,0x0f,0xeb,0x1b,0xe9,0x07,0xb9,0x8e,0xe7,0xe5,0x0f,0x18,0xa3,0xee,0x11,
    0xff,0xcb,0x72,0xb6,0xfd,0x10,0x5c,0xcf,0x66,0x1f,0xe1,0xf7,0x21,0xf3,0x74,0x10,
    0x4c,0xed,0x3f,0x8e,0x38,0x13,0x77,0x24,0xa7,0xe3,0x9f,0x3d,0x7a,0x5e,0xce,0x71,
    0xc1,0xcf,0xf1,0x5d,0xe0,0x10,0x98,0xda,0xe7,0xb9,0x50,0x6b,0xd1,0x49,0x0d,0xf3,
    0x8c,0xae,0x93,0x0b,0x75,0x17,0x5d,0x5a,0x4f,0xf3,0x0d,0xa4,0xc0,0x85,0x77,0x63,
    0xf1,0xc9,0x87,0x5b,0xe6,0xa4,0xc0,0xf8,0x17,0xba,0x30,0x4f,0xa2,0x93,0x7a,0x17,
    0x9a,0xef,0x4b,0x5d,0xdd,0x91,0xef,0xb2,0xc5,0x2e,0xe0,0x62,0x2f,0xf3,0x51,0x6c,
    0xe2,0x75,0x73,0xe1,0x19,0x2b,0x3c,0x45,0xd8,0xc8,0x9c,0x76,0x33,0x9c,0x3d,0xb2,
    0x70,0x1e,0xe5,0x02,0xae,0xcf,0xd8,0x9e,0x2e,0x60,0xfa,0x8c,0x95,0x79,0xee,0x69,
    0x72,0xee,0xed,0xc2,0xdc,0xeb,0x73,0xa2,0x8f,0x0b,0x98,0xee,0x8b,0x25,0xe6,0x1b,
    0x97,0xe8,0xfa,0xf9,0xab,0x94,0x6f,0x31,0xfd,0xc8,0x4b,0x7a,0x43,0x9f,0xb1,0x25,
    0xe8,0x4a,0x4d,0x8c,0xfe,0xc4,0xd0,0x3d,0xe7,0x68,0xbe,0xf1,0x08,0xae,0xcf,0xd8,
    0x01,0xae,0x1d,0x57,0xce,0x01,0xae,0x23,0x67,0x89,0xf9,0x5e,0x55,0xe6,0x42,0x4f,
    0xea,0x5e,0x33,0xd0,0x05,0x4c,0x7c,0xa5,0x77,0x07,0x1a,0xdb,0x72,0xfe,0x77,0xa4,
    0xb6,0xc7,0xb8,0x80,0x69,0x7e,0x15,0x2e,0xf4,0xbb,0xee,0xc5,0x83,0x5d,0xb0,0xa9,
    0x30,0x36,0x43,0x5c,0x58,0x53,0xbb,0xb0,0x19,0xea,0x82,0xdd,0x10,0x62,0xca,0x7a,
    0x18,0x6a,0xec,0x8f,0x75,0x61,0x8d,0xc8,0xfe,0x20,0xf7,0xba,0x3f,0xc8,0xb7,0xa9,
    0xa1,0xec,0x0f,0x83,0xcd,0xfe,0x30,0x84,0x3d,0xe1,0x58,0xf3,0x8d,0x79,0x64,0x96,
    0xef,0xa5,0x27,0x82,0x6b,0x0f,0xd4,0xb8,0x23,0xbf,0x6b,0x8c,0x72,0x01,0xd7,0x75,
    0x56,0xeb,0x02,0xd6,0x64,0xce,0x9e,0xa3,0x5d,0xe0,0xaa,0x35,0x39,0xd7,0xb9,0x90,
    0x87,0xbe,0x27,0x8d,0xe1,0x7f,0x05,0x6d,0xd8,0xcb,0x38,0x05,0xab,0x33,0xdf,0xd4,
    0xfe,0x0f,0x81,0xa9,0x18,0xf2,0xd4,0x1d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       int loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     if(valueBits < 32)
//     {
//         bool isNegative =(valueAsUint &(1 <<(valueBits - 1)))!= 0;
//
//         uint signExtension = isNegative ? 0xFFFFFFFF << valueBits : 0;
//         valueAsUint |= signExtension;
//     }
//           int value = int(valueAsUint);
//
//     return value;
// }
//
//        int convertComponent(int srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, int value)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     uint offset = getDestinationComponentOffset(vertex, component);
//     uint shiftBits = getShiftBits(offset, params . Bd);
//
//     uint valueBits = params . Bd * 8;
//     uint valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     uint valueAsUint =(uint(value)& valueMask)<< shiftBits;
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               int srcValue = loadSourceComponent(cd);
//                int destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
