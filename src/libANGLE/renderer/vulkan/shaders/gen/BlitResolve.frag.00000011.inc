// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000011.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000011[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4e,0x53,0x41,
    0x14,0x86,0xa7,0x7b,0xb7,0xdd,0x80,0xa0,0xd0,0x72,0x12,0x39,0x08,0x08,0x0a,0x2a,
    0xa9,0xda,0x1a,0x0c,0x72,0x50,0x28,0x88,0x54,0x05,0x5a,0x10,0x05,0xad,0x04,0x50,
    0x30,0x0a,0x06,0xb8,0xf0,0xc2,0xc4,0x0b,0xe3,0x23,0xe8,0x4b,0xf8,0x7c,0xc6,0x43,
    0x62,0xe2,0x5a,0xb3,0xbf,0x21,0x13,0x76,0x32,0x9d,0x59,0xff,0xfc,0xeb,0xf0,0xcf,
    0xcc,0x6a,0x18,0xf4,0x47,0x26,0x4c,0x98,0x3a,0x53,0x63,0xde,0x9a,0xf8,0x6b,0x32,
    0x81,0x49,0x30,0x7f,0xcb,0x1a,0xd9,0xab,0x35,0xe5,0xc5,0xd5,0x6a,0x71,0xad,0x52,
    0x3d,0xda,0xdd,0xdc,0xde,0x39,0xac,0x1e,0x1d,0xef,0xec,0x6f,0xed,0xbd,0xab,0xee,
    0x7c,0xfc,0x70,0x70,0x78,0x2c,0xdc,0x33,0x26,0x6d,0x7d,0xe6,0x4a,0xe5,0xd2,0xc8,
    0xd1,0xf1,0xf6,0x48,0xbe,0x90,0xd3,0x58,0x67,0x4d,0x68,0x63,0xea,0xde,0x39,0x13,
    0x99,0xa4,0xcc,0x3a,0xde,0x6f,0xee,0xed,0x2b,0x5e,0x2f,0x63,0x46,0x46,0xa3,0xf0,
    0x14,0x8f,0x34,0x86,0xac,0xea,0x6d,0x4c,0xf5,0x31,0xe6,0x81,0x49,0x99,0x66,0x6a,
    0xeb,0x67,0x76,0x58,0x02,0xac,0xc6,0xc3,0x02,0xb0,0x46,0x0f,0x0b,0xc1,0xda,0x3d,
    0x2c,0x09,0xd6,0xe9,0x61,0x29,0xb0,0x8b,0x1e,0x96,0x06,0xbb,0xe4,0x61,0x11,0xd8,
    0x15,0x0f,0xab,0x01,0xbb,0xe6,0x61,0xb5,0x60,0x39,0xab,0x2b,0x3c,0xa9,0x4f,0x35,
    0xce,0xa0,0xf1,0x7b,0x36,0xb6,0xe7,0x64,0xdd,0x87,0x3e,0x67,0xf7,0xa2,0x51,0xed,
    0x85,0x53,0xfb,0x0b,0xec,0x6b,0xbc,0xac,0xfc,0x06,0xd6,0x0e,0xad,0x56,0x5d,0xb7,
    0xca,0x2a,0x8d,0x96,0x36,0xe1,0x47,0x68,0x09,0xb0,0xeb,0xb0,0x93,0x96,0x93,0xb4,
    0xb5,0x68,0x2e,0xc5,0xc7,0xb0,0xeb,0xc1,0x5a,0xc4,0xce,0x10,0xcb,0xd9,0x59,0x6c,
    0xfd,0xba,0x85,0xe9,0xce,0xc5,0x8d,0x0c,0x23,0xcd,0x9c,0xf5,0x86,0xe6,0x6b,0xe1,
    0x7c,0x9a,0xc9,0xd7,0x62,0x6b,0x8e,0xb1,0xab,0xe4,0x6b,0x23,0x9f,0xf2,0xdb,0xd9,
    0x8b,0xbc,0xfd,0x2e,0xf2,0x3b,0xbb,0x8f,0x7d,0xe5,0xf7,0xc3,0xcf,0xda,0x1c,0x81,
    0x19,0x84,0xa7,0xf6,0xe5,0x53,0x7e,0x39,0xee,0xcf,0xd9,0x63,0xf8,0x6a,0x9c,0x69,
    0xde,0x4f,0x86,0x3a,0xa7,0x79,0xb3,0x8a,0x9d,0x17,0x56,0x91,0x1c,0x09,0x62,0x9e,
    0x9e,0x35,0xc6,0x2c,0xeb,0x22,0x31,0x66,0xed,0x1d,0xc6,0x5f,0x87,0xd4,0x36,0x0f,
    0xef,0x21,0xd8,0x3c,0x3c,0xb5,0x17,0xc0,0x2e,0x48,0xc6,0x47,0xc4,0x70,0x75,0x2e,
    0x72,0x9f,0xce,0xae,0x50,0x97,0xc6,0x5a,0x41,0x43,0x86,0xfb,0x7e,0xc6,0x5d,0x84,
    0xd8,0x2f,0xa8,0x5b,0xef,0xff,0xb6,0xbc,0xd7,0x80,0xb5,0x81,0xf3,0x5b,0x10,0xed,
    0x87,0x71,0xde,0x4a,0x03,0xef,0x61,0x49,0xd0,0x34,0xbd,0xd9,0x00,0xdf,0x61,0x8d,
    0x60,0x09,0x5b,0x5b,0xca,0xde,0x45,0x13,0x5c,0xdd,0xbb,0x27,0x58,0xbb,0x3d,0xb7,
    0xf8,0xae,0xdb,0x88,0x1f,0xd9,0x73,0x88,0xf1,0xaf,0xf8,0x75,0xe2,0xdb,0xe1,0xf9,
    0x75,0xe3,0xd7,0xe5,0xf9,0xf5,0x80,0x7f,0xc1,0xaf,0x17,0xdf,0x1e,0xfc,0x5c,0xef,
    0xb6,0xf2,0x3e,0xc6,0x79,0x03,0x03,0xe0,0x3f,0x84,0x33,0x48,0x2f,0x0f,0xf0,0x36,
    0x7e,0xc9,0x09,0x0c,0xa3,0xed,0xaf,0xf0,0x75,0x6f,0x48,0xc6,0x30,0xe7,0x32,0xe4,
    0x69,0xbe,0x4e,0x4e,0xfd,0x3e,0x0b,0x57,0xb1,0x11,0xf0,0x65,0xb1,0xb4,0xa6,0x2d,
    0x30,0xc7,0xfb,0x23,0x31,0x5c,0x2c,0x9d,0x7f,0x0a,0x4b,0x79,0x6f,0xe0,0xa4,0xf0,
    0x19,0xf2,0x34,0xdc,0x40,0x43,0xce,0xd3,0x70,0x13,0xdc,0x69,0xb8,0x05,0xe6,0x34,
    0x14,0x3c,0x0d,0xba,0x97,0x97,0x51,0x20,0x6f,0xde,0xd3,0x30,0x4a,0xee,0x84,0xa7,
    0xe1,0x0e,0xb8,0xd3,0xf0,0x1a,0xcc,0xf1,0x54,0x83,0x8b,0x55,0xf0,0x34,0xec,0xc2,
    0x19,0xc6,0x27,0xef,0x69,0xb8,0x8b,0x86,0x31,0x4f,0xc3,0x38,0xb8,0xd3,0x30,0x01,
    0xe6,0x34,0x4c,0x79,0x1a,0x74,0x6f,0x52,0xc6,0x14,0x79,0x75,0xfd,0x84,0xbc,0xf7,
    0xc9,0xbd,0xeb,0xf5,0x9e,0xd6,0xe8,0xb8,0x53,0x5e,0x8d,0x7b,0xf0,0x0a,0xf8,0x4d,
    0x52,0x4f,0xd1,0xfe,0x77,0xc7,0xbd,0xa9,0xb6,0xf6,0x61,0x89,0x1e,0x5c,0x95,0xfa,
    0xb4,0xff,0x1e,0xc3,0x29,0x79,0xef,0x72,0x09,0x5d,0x8b,0xde,0xbb,0x5c,0x06,0x77,
    0xef,0xb9,0x4c,0xde,0x65,0xfc,0x56,0x6c,0xcc,0xd8,0xaf,0x82,0x9f,0xf6,0xea,0x53,
    0xf0,0x03,0xee,0x61,0x0d,0xcc,0xdd,0xd5,0x73,0x62,0xf9,0x7d,0xb7,0x0e,0x16,0xf7,
    0x5d,0xda,0xf6,0xfa,0x06,0xdc,0xf5,0x93,0x18,0x29,0xdb,0xf3,0x2f,0xd1,0xb0,0x81,
    0xbf,0xde,0x41,0x15,0x5c,0xbf,0x4f,0xd4,0xf1,0x0a,0x7c,0x42,0xee,0x60,0x06,0xfb,
    0x9f,0x64,0x18,0x95,0xf1,0x1f,0x0c,0xb0,0xe2,0xfa,0x38,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragStencilRefARB = int(texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x);
//
// }
