// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000D.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000D[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x53,0x41,
    0x10,0xc6,0xb7,0xe7,0xb4,0x3d,0x88,0x45,0x81,0x72,0x13,0xb9,0x08,0x15,0xb4,0x55,
    0x49,0xd5,0xd6,0x60,0x6a,0xa5,0xca,0x4d,0xa4,0x2a,0x14,0xf0,0x06,0x9a,0x90,0x20,
    0xea,0x83,0xfa,0xa0,0xef,0x3e,0x18,0xff,0x1a,0xff,0x3e,0xe3,0x25,0x31,0x71,0x66,
    0xcf,0x6f,0xc9,0xa4,0x4d,0x96,0x3d,0xf3,0xcd,0x37,0x97,0x6f,0x77,0x87,0x38,0x2a,
    0x25,0x2e,0xce,0xb8,0x5e,0xd7,0xe3,0xde,0xb9,0xf4,0x37,0xe0,0x22,0x97,0x91,0xfd,
    0xb4,0xcb,0xfb,0x7d,0xbd,0xbd,0xd3,0x5e,0xf8,0xfc,0xe5,0x68,0xa1,0x56,0xaf,0xaa,
    0xff,0x8c,0x8b,0x3d,0x4f,0x7d,0x67,0x5d,0xe2,0xb2,0xb2,0xeb,0xfa,0x70,0xf8,0xfe,
    0xa3,0xe2,0x05,0x59,0x2b,0xb2,0xfa,0x85,0xa7,0x78,0x62,0xbe,0xd5,0xb7,0x2e,0x5f,
    0x05,0x9f,0x5f,0xe3,0x9d,0x7b,0xe0,0x72,0x6e,0x88,0xda,0x25,0xf6,0x80,0x65,0xc0,
    0x7a,0x0c,0x16,0x81,0xf5,0x1b,0x2c,0x06,0x1b,0x33,0x58,0x16,0x6c,0xc2,0x60,0x39,
    0xb0,0x0b,0x06,0xcb,0x83,0x5d,0x34,0x58,0x02,0x76,0xd9,0x60,0x3d,0x60,0x57,0x0d,
    0x76,0x0a,0xac,0xea,0x75,0xc5,0x27,0xfd,0xa9,0xc6,0x15,0x34,0x8e,0x60,0xaf,0xcb,
    0x3e,0x8b,0xbe,0x60,0xcf,0x18,0x7b,0xb3,0xcb,0xbf,0x89,0x5f,0xf3,0x15,0xe5,0x6f,
    0xe4,0xed,0xd8,0x6b,0x8d,0x7c,0xde,0xd8,0xf7,0xae,0x5a,0x46,0x85,0x9f,0xa0,0x25,
    0xc2,0xee,0xc5,0xce,0x7a,0x4e,0xd6,0xf7,0xa2,0xe7,0xa9,0x78,0x03,0xbb,0x00,0x36,
    0x2c,0xf6,0x20,0xb9,0x82,0x5d,0xc4,0xd6,0xdf,0x94,0x30,0xc3,0xb9,0x84,0x35,0xc8,
    0xca,0xb3,0x17,0xcd,0xd2,0x7a,0xc3,0x9c,0xcf,0x10,0xf5,0x86,0x39,0x0b,0xc5,0xae,
    0x50,0x6f,0x94,0x7a,0xca,0x1f,0xc3,0x97,0x18,0xff,0x24,0xf5,0x83,0x3d,0x8b,0x5f,
    0xf9,0x25,0xf8,0x45,0x5f,0x23,0x72,0xf3,0xf0,0xd4,0xbe,0xd4,0x15,0x57,0xe5,0xfe,
    0x82,0xdd,0x20,0x56,0xf3,0x2c,0xf3,0x7e,0xf2,0xf4,0xb9,0xcc,0xfb,0x55,0xec,0x9c,
    0xb0,0x56,0xf1,0x65,0xc8,0xd9,0xbd,0x6b,0x8e,0x35,0xbe,0x57,0xc9,0xb1,0xe6,0xef,
    0x30,0xfd,0x8d,0x4b,0x6f,0x1b,0xf0,0x1e,0x82,0x6d,0xc0,0x53,0x7b,0x13,0xec,0xbc,
    0x54,0x7c,0x44,0x8e,0xd0,0xe7,0x16,0xf7,0x19,0xec,0x5d,0xfa,0xd2,0x5c,0x7b,0x68,
    0x18,0xe4,0xbe,0x5f,0xd0,0xa7,0xfa,0x6f,0xc9,0xfb,0x8c,0xb8,0x7b,0x07,0xf6,0x5b,
    0x10,0x7d,0xff,0x4d,0xde,0x46,0x1f,0xf7,0xbf,0x2d,0x68,0x9e,0x59,0xec,0x83,0x1f,
    0xb0,0x7e,0xb0,0x8c,0xef,0x25,0xe7,0xcf,0x7e,0x00,0xae,0xfa,0xee,0x09,0x36,0xe6,
    0xcf,0x29,0xbd,0xdb,0x51,0xf2,0x27,0x5e,0x77,0x8a,0x7f,0x27,0x6e,0x82,0xd8,0x71,
    0x13,0x37,0x45,0xdc,0xa4,0x89,0x9b,0x06,0xff,0x46,0xdc,0x0c,0xb1,0xd3,0xc4,0x85,
    0x59,0x1d,0xe1,0x3d,0x34,0xb9,0xf3,0x39,0xf0,0x1f,0xc2,0x99,0x67,0x76,0xe7,0x78,
    0x0b,0xbf,0xe4,0x04,0x2a,0x68,0xfb,0x2b,0x7c,0xf5,0x95,0x65,0x55,0x38,0x97,0xb2,
    0xd1,0x7c,0xcd,0xcc,0xe5,0x57,0xe1,0x2a,0xb6,0x00,0xde,0x11,0x4b,0x7b,0x3a,0x04,
    0x0b,0xbc,0x3f,0x92,0x23,0xe4,0xd2,0xfd,0xa7,0xb0,0x94,0xf7,0x06,0x4e,0x8e,0x98,
    0xb2,0xd1,0x70,0x1d,0x0d,0x55,0xa3,0xe1,0x06,0x78,0xd0,0x70,0x13,0x2c,0x68,0xa8,
    0x1b,0x0d,0xea,0xab,0xc9,0xaa,0x53,0xb7,0x66,0x34,0x2c,0x52,0x3b,0x63,0x34,0xdc,
    0x06,0x0f,0x1a,0x8e,0xc0,0x02,0x4f,0x35,0x84,0x5c,0x75,0xa3,0xe1,0x18,0x4e,0x85,
    0x98,0x9a,0xd1,0x70,0x07,0x0d,0x0d,0xa3,0xa1,0x09,0x1e,0x34,0xdc,0x05,0x0b,0x1a,
    0x5a,0x46,0x83,0xfa,0x96,0x64,0xb5,0xa8,0xab,0xdf,0x4f,0xa8,0x7b,0x9f,0xda,0xc7,
    0x66,0xd6,0xb4,0xc7,0xc0,0x6d,0x99,0x1e,0xdf,0xc2,0xab,0x13,0xb7,0x44,0x3f,0xab,
    0xfe,0x7f,0x75,0x3a,0x8b,0x6a,0xeb,0xdc,0xb5,0x99,0xb9,0xa7,0xd2,0x9f,0xce,0xdb,
    0x63,0x38,0x6d,0xf3,0x2e,0xb7,0xd1,0xb5,0x65,0xde,0x65,0x07,0x3c,0xbc,0xe7,0x1d,
    0xea,0x76,0x88,0xdb,0xf3,0x39,0xd3,0xb8,0x5d,0xe2,0x74,0x36,0x9f,0x81,0x7f,0xe2,
    0x1e,0x9e,0x83,0x85,0xbb,0x7a,0x49,0x2e,0x3b,0x77,0xfb,0x60,0xe9,0xdc,0xe5,0xfd,
    0x6c,0x1f,0xc0,0xdd,0x3f,0xc9,0x91,0xf3,0x73,0xfc,0x0a,0x0d,0x07,0x26,0xfe,0x35,
    0xb8,0xf3,0xe7,0x1f,0xfb,0xff,0x67,0x8a,0xfd,0x93,0x8c,0x8b,0xb2,0xfe,0x03,0x19,
    0x1b,0xa0,0xf6,0xf8,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
// }
