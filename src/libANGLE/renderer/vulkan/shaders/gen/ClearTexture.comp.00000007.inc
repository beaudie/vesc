// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0xdd,0x4e,0x53,0x51,
    0x10,0x85,0x37,0xe7,0x9c,0x1e,0xd0,0x8a,0xfc,0xf4,0x47,0xd0,0x52,0x2d,0x2d,0xda,
    0xd0,0xd2,0xb4,0xda,0x9a,0x02,0xd6,0x50,0x21,0xa1,0x68,0x05,0x8d,0x4f,0x40,0xe2,
    0x0d,0x17,0x7a,0xa3,0x0f,0xe0,0x85,0xcf,0xe3,0xeb,0xf9,0x17,0x13,0x67,0xf6,0xf9,
    0x76,0x33,0x39,0x4d,0x76,0xf6,0x9e,0x35,0x6b,0xd6,0x5e,0x67,0x66,0x37,0x8e,0x9a,
    0xcb,0xce,0x2d,0xb9,0xdb,0x6e,0xc5,0xbd,0x77,0xd9,0x6f,0xc3,0x45,0x82,0x38,0x57,
    0x74,0xa9,0xdf,0xcf,0xe7,0x1f,0xe6,0xbd,0x2f,0x5f,0x3f,0xf6,0x86,0xa3,0xbe,0xe6,
    0xef,0xba,0xd8,0xf3,0x34,0xb7,0x26,0x9c,0x82,0xec,0x89,0xac,0x4f,0xd7,0x37,0x9f,
    0x9d,0xaf,0x73,0x6e,0x5d,0xf0,0xc4,0x6b,0xe9,0x39,0xe3,0x7a,0x2d,0x41,0x8b,0x70,
    0x6a,0xc4,0x65,0xd9,0x53,0x34,0x66,0xa2,0x56,0xc1,0x47,0x93,0x3d,0x60,0x4b,0x60,
    0xeb,0x06,0x8b,0xc0,0xca,0x06,0x8b,0xc1,0x5a,0x06,0x4b,0xc0,0xda,0x06,0x2b,0x80,
    0x75,0x0d,0x96,0x82,0xf5,0x0d,0xb6,0x0c,0x36,0xf4,0x7e,0xe3,0xc5,0xbd,0xea,0x7d,
    0x3f,0xe7,0xbd,0x93,0xf3,0xae,0xfc,0x0e,0x9e,0x94,0x7f,0x20,0xfb,0xee,0x22,0x97,
    0xc5,0x0d,0x13,0x5f,0xd2,0x9b,0x6d,0x59,0x25,0xb9,0x25,0xf2,0xf9,0xd8,0xd7,0xeb,
    0xb9,0x22,0x1c,0xbd,0xef,0x11,0x35,0xf7,0x24,0xbe,0x85,0x87,0xd8,0xe3,0x89,0xcc,
    0x32,0xeb,0x95,0xe2,0xc7,0xc4,0x45,0xb0,0x0e,0xf5,0x77,0xa8,0x57,0xfe,0x2a,0x39,
    0xc5,0xab,0xa2,0xb2,0x81,0xbe,0x6a,0x6f,0x32,0xc3,0xc4,0xd4,0x96,0x88,0x6b,0x66,
    0x76,0x8a,0xd5,0xe5,0x26,0xed,0xcd,0x26,0x58,0xc8,0xe5,0x97,0xde,0x59,0xc5,0x5f,
    0x05,0x8f,0x55,0x7f,0x5f,0xc0,0x12,0xb7,0x85,0x87,0xe0,0x79,0x8b,0x9e,0x14,0xa8,
    0xbf,0x0f,0x37,0x35,0xf9,0x9d,0x5c,0xdc,0x60,0x76,0x65,0xe9,0xdc,0x9e,0xcf,0xc7,
    0x8b,0x79,0xd5,0x99,0xcb,0x3e,0x7a,0x5d,0xfa,0xdb,0xc1,0x8f,0xc6,0x07,0x0b,0x2c,
    0xd3,0xeb,0xd1,0xb3,0x10,0x0f,0xc8,0x6b,0xfd,0x90,0x73,0x6a,0xfa,0x34,0xce,0xf9,
    0x3f,0xca,0xcd,0xe0,0xc4,0xe8,0xa7,0x7e,0xfe,0xd9,0x0c,0x03,0xff,0xc2,0xc4,0x9a,
    0x7f,0xcb,0xdb,0xef,0x4a,0xa4,0xdf,0x7e,0x09,0x36,0x66,0x3d,0x97,0xee,0x44,0xcc,
    0xc6,0x51,0xfb,0x4b,0x10,0xed,0xd9,0x4f,0x89,0xae,0xc0,0xff,0xca,0x59,0xe7,0xff,
    0x8e,0xbc,0xee,0x53,0x61,0xad,0xfa,0xff,0x76,0xf6,0x56,0x34,0x3f,0xe1,0xde,0x35,
    0x70,0xe5,0x68,0xdf,0x1f,0x30,0xab,0x6d,0xc3,0xa9,0x81,0x07,0x4e,0x1d,0xce,0x8e,
    0xe1,0x3c,0x04,0xff,0x2e,0x9c,0xf0,0x86,0x6b,0xe0,0xa1,0x6e,0x97,0xba,0x86,0xa9,
    0x6b,0x82,0x87,0xba,0x16,0xb5,0x8a,0xff,0x10,0x4c,0x67,0xfb,0x18,0x9f,0x2d,0xbe,
    0xb5,0xcd,0xb7,0xfe,0x11,0x0d,0xcd,0x3d,0xe1,0xbf,0xaf,0xdf,0xab,0xe7,0xdf,0xb2,
    0x5f,0x11,0xb7,0x8d,0x76,0x1f,0x9d,0x92,0xf7,0x94,0x7a,0x4f,0x4f,0xf1,0x34,0xe0,
    0x0d,0x04,0x5f,0xcf,0xc8,0x29,0x4f,0xe7,0x3f,0xe2,0xcd,0xf4,0xd0,0x79,0x29,0x3e,
    0x46,0xf0,0xbe,0xa1,0x7f,0x48,0x6e,0x6c,0xf4,0x8f,0x8d,0xfe,0x91,0xd1,0x7f,0x41,
    0x2e,0xe8,0x4f,0x8c,0xfe,0x21,0xfa,0x13,0x78,0x41,0x7f,0x8a,0xfe,0x89,0xd1,0x7f,
    0x65,0xf4,0x07,0x46,0xff,0x94,0x5c,0xd0,0x3f,0x33,0xfa,0x53,0xf4,0xcf,0xe0,0x05,
    0xfd,0x19,0xfa,0xe7,0x46,0xff,0xb5,0xd1,0xbf,0x30,0xfa,0x6f,0xc8,0x05,0xfd,0xb9,
    0xd1,0x9f,0xa1,0x3f,0x87,0x67,0xe7,0xa1,0xfb,0x3f,0xf9,0xa7,0x8c,0x65,0xfd,0x07,
    0xef,0x81,0xfe,0x51,0xa0,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= params . width * params . height * params . depth)
//  {
//   return;
//  }
//     dataBuffer[threadId * 4]= params . rawData[0];
//     dataBuffer[threadId * 4 + 1]= params . rawData[1];
//     dataBuffer[threadId * 4 + 2]= params . rawData[2];
//     dataBuffer[threadId * 4 + 3]= params . rawData[3];
//
// }
