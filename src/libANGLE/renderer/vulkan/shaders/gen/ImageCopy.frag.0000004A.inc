// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000004A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000004A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd6,0x65,
    0x14,0xc7,0xaf,0xfb,0xfe,0xdd,0x0f,0x08,0xf1,0x20,0xa0,0x84,0x85,0xe5,0x03,0x9b,
    0x0d,0x83,0xbb,0x45,0x46,0x90,0x2e,0xcc,0xd0,0x35,0x87,0x0f,0x98,0xc1,0x0b,0x1f,
    0x70,0x60,0x09,0x93,0x60,0x96,0xae,0x37,0x2d,0x4c,0x78,0x93,0x56,0xb0,0xc6,0xcc,
    0x15,0x6c,0x05,0x2f,0x12,0x66,0x2f,0xda,0x7a,0xd5,0x9a,0x2b,0x1d,0x69,0x0f,0xff,
    0x8d,0xb3,0xda,0xda,0x3a,0xe7,0xba,0x3f,0xc7,0xce,0xee,0xd5,0x64,0xbb,0xf6,0xe3,
    0xfa,0x9e,0xa7,0xef,0xf7,0x5c,0xe7,0xba,0x76,0x27,0xe9,0x2d,0xf9,0x10,0x52,0xa1,
    0x3c,0x94,0x85,0xdf,0x43,0xf1,0x6f,0x6d,0x48,0x0b,0x12,0x42,0x45,0xc8,0xc5,0xef,
    0xde,0xfd,0x7d,0xfb,0x5b,0xcf,0xbd,0x3d,0xd4,0xda,0xfe,0x5c,0x41,0xed,0x55,0x21,
    0x89,0x7e,0x6a,0xab,0x0e,0xf9,0x90,0x91,0xaf,0xae,0xb3,0x83,0x67,0xc6,0x14,0xaf,
    0x94,0xf5,0x8d,0xac,0x1a,0xf1,0x53,0x3c,0xaf,0x39,0xe4,0xbf,0xca,0x98,0x53,0x63,
    0x42,0xd8,0x17,0xb2,0xa1,0x8e,0x7a,0x5b,0xf8,0x1a,0x96,0x02,0x2b,0x73,0x58,0x1a,
    0xac,0xc6,0x61,0x09,0x58,0xbd,0xc3,0x32,0x60,0x8f,0x3a,0x2c,0x0b,0xf6,0xb8,0xc3,
    0x72,0x60,0x4f,0x3a,0x2c,0x0f,0xb6,0xd5,0x61,0x65,0x60,0xdb,0x1c,0xb6,0x06,0x6c,
    0xbb,0xc3,0xca,0xc1,0x0a,0x0e,0xab,0x00,0x6b,0x77,0xd8,0x23,0x60,0x1d,0x0e,0xab,
    0x04,0x7b,0x31,0xf6,0x29,0x79,0xa0,0x57,0x7b,0xb6,0x47,0xbe,0x9b,0xe9,0x8f,0xed,
    0x37,0xb9,0xbd,0xf6,0x79,0x23,0xfb,0x3a,0x89,0x4a,0x47,0x7b,0x12,0x7b,0xa3,0xff,
    0xaf,0x13,0x9f,0x1c,0x3a,0xb5,0xaf,0x0d,0xb2,0xcf,0xa3,0x5f,0xed,0xeb,0xc5,0xb3,
    0x1c,0xbb,0xda,0x2a,0xd0,0x92,0x89,0x58,0x26,0xf2,0x4d,0xa1,0xa5,0x8b,0x7d,0xa5,
    0xcb,0x55,0x85,0xbf,0xd5,0xaa,0x25,0x57,0x88,0xbc,0x6a,0x1e,0xf4,0xd5,0x6a,0xea,
    0xaa,0x7d,0xc8,0x32,0x1f,0xad,0x5f,0x4f,0xbf,0xeb,0xa8,0x5f,0x1f,0xeb,0x14,0xb1,
    0x16,0xb4,0xad,0x87,0x8f,0xfa,0x37,0x60,0xcb,0x3b,0x7b,0x93,0xd3,0xb3,0x11,0x7b,
    0x6d,0x9c,0x9b,0x74,0xec,0x65,0x0b,0xbc,0xad,0xcf,0x16,0xd7,0xc2,0xec,0x98,0xfd,
    0x19,0xea,0x98,0x7d,0x07,0xbd,0xd0,0x3e,0xec,0x22,0xa7,0xd6,0x69,0x94,0x0a,0xdd,
    0xec,0x53,0xe1,0xdf,0xbf,0x94,0xdb,0x3f,0x26,0x7d,0xdf,0x2d,0xdf,0x6e,0x78,0xbd,
    0x0c,0xbe,0x1b,0x9d,0xba,0xdf,0x53,0xc2,0xa7,0xa7,0x64,0xdf,0x4b,0xdf,0x35,0xfe,
    0x00,0xba,0x72,0xce,0x7e,0x84,0xbd,0xf2,0x3b,0x0e,0x9f,0xc4,0xd9,0x4f,0x97,0xf4,
    0x69,0x92,0x79,0xb7,0xfd,0x95,0x92,0x3e,0x5f,0x65,0x7e,0xb5,0xde,0x0d,0x72,0xed,
    0x82,0xef,0x0d,0xee,0x7c,0x12,0xfb,0x92,0x8d,0xbc,0x32,0xf0,0x55,0xec,0x0f,0x41,
    0xb4,0x97,0x3b,0x99,0xb1,0x6a,0x7a,0x77,0x40,0x18,0x54,0x71,0xaf,0xab,0x59,0xd6,
    0xab,0x31,0x66,0x75,0x2d,0xf6,0x6e,0xc9,0xd0,0xc0,0xdd,0x5e,0xc7,0xb9,0xef,0xc4,
    0xa7,0x11,0xfc,0xa2,0xf8,0xe8,0x7e,0x03,0x71,0x8d,0xc4,0xe9,0xb9,0x3f,0x41,0x5c,
    0x13,0x71,0x36,0xab,0x8a,0x2f,0x8b,0xcf,0x26,0xf7,0x26,0xe8,0x2c,0xdc,0x17,0xe6,
    0xcd,0xf0,0xf9,0x4b,0xfc,0xed,0x6d,0x68,0x46,0x8f,0xfe,0x7f,0x48,0xe2,0x72,0xbc,
    0x0f,0x1b,0xf0,0x7d,0x8f,0x7e,0x3d,0x05,0x7e,0x58,0x76,0xca,0xe9,0x5b,0x30,0xf3,
    0xfb,0x53,0x72,0x58,0x2e,0xfd,0xde,0x13,0x2f,0xf5,0xfb,0x09,0x9f,0x2c,0x31,0x5b,
    0x9d,0x86,0xed,0x68,0x68,0x71,0x1a,0x9e,0x06,0x37,0x0d,0xad,0x60,0xa6,0xa1,0xe0,
    0x34,0xa8,0xad,0x8d,0x77,0x4a,0xeb,0xb6,0x39,0x0d,0xcf,0x52,0x3b,0xe5,0x34,0xb4,
    0x83,0x9b,0x86,0xef,0xc0,0xcc,0x4f,0x35,0x58,0xae,0x82,0xd3,0x70,0x0b,0x9f,0x66,
    0x62,0xda,0x9c,0x86,0xe7,0xd1,0xb0,0xc3,0x69,0xe8,0x00,0x37,0x0d,0x2f,0x80,0x99,
    0x86,0x2e,0xa7,0x41,0x6d,0x9d,0x71,0xee,0x8a,0x75,0x3b,0x99,0xa3,0x7c,0xcc,0x57,
    0xac,0x7d,0xcb,0xdd,0x35,0xe5,0x68,0xbe,0x5d,0x8e,0xe3,0x6d,0xfc,0x0a,0xc4,0x75,
    0xc2,0x47,0xef,0xe0,0x2b,0xdc,0x3f,0x9b,0xb9,0xbd,0x70,0xee,0x71,0x33,0xb7,0x0f,
    0xfc,0x7d,0x66,0xee,0x55,0xb0,0xdb,0xc4,0xe9,0x9d,0x3c,0x48,0x5c,0x2f,0x71,0xb9,
    0xd8,0xef,0x22,0x3e,0x24,0xfb,0xee,0xd8,0xdb,0x62,0xbd,0x13,0x92,0x45,0xef,0x53,
    0x1f,0x98,0xe6,0x7b,0x09,0x7f,0xeb,0xdd,0x6b,0xe4,0x3b,0xe2,0x7a,0x77,0x14,0xdc,
    0x7a,0xf7,0x3a,0x98,0xf5,0x6e,0xc0,0xf5,0x4e,0x6d,0xfd,0xb2,0x86,0xe9,0x47,0x3f,
    0xe7,0xaf,0x79,0x8e,0x51,0x3b,0x89,0xfd,0x2c,0x8b,0x6f,0xc6,0x49,0xb0,0x3e,0x77,
    0x2f,0xd3,0x91,0x7f,0x2e,0xda,0x07,0x89,0xb3,0x75,0x49,0x72,0x29,0x7e,0x8a,0xd8,
    0xc1,0x98,0x6b,0x4d,0xd4,0x35,0x44,0x9e,0x53,0xbc,0x0d,0x59,0xde,0xa7,0x84,0x33,
    0x1a,0x80,0xd3,0xb0,0xd3,0xfb,0x06,0x7a,0x4f,0x3b,0xbd,0x6f,0x82,0x9b,0xde,0x33,
    0x60,0xa6,0x77,0xd4,0xe9,0x55,0xdb,0x88,0xac,0x51,0x72,0x8f,0x38,0xbd,0x67,0x9d,
    0xde,0x15,0x72,0x8d,0x81,0x6f,0x86,0x93,0xc5,0x8d,0x32,0x37,0xea,0xf3,0x16,0x35,
    0x87,0xf1,0x1f,0xa1,0xee,0x84,0xab,0xab,0x3e,0xe3,0xb2,0x26,0x88,0x1f,0x77,0x75,
    0xcf,0xfd,0x47,0x9f,0xdf,0x79,0x48,0x9f,0xcf,0x13,0x67,0x6b,0x9a,0x3e,0x5f,0x20,
    0xf6,0xbc,0xeb,0xf3,0xbb,0xe4,0xb9,0xf0,0x3f,0x7d,0x36,0x4e,0x13,0x68,0xd2,0x98,
    0x9f,0x89,0x19,0x25,0x7e,0xbc,0xe4,0x4c,0x06,0x9c,0xef,0x2a,0x67,0xd9,0x4f,0xdc,
    0x84,0x3b,0xaf,0x8b,0x9c,0xd7,0xa4,0x3b,0xaf,0x0f,0xc0,0xed,0xbc,0x2e,0x81,0xd9,
    0x79,0x4d,0xbb,0xbe,0xa9,0x6d,0x4a,0xd6,0x65,0xea,0x4e,0x39,0x5d,0x1f,0x52,0x7b,
    0x15,0x5d,0x79,0x7a,0x64,0xba,0xa6,0x89,0xb9,0xec,0xf8,0x7c,0x04,0x9f,0x2b,0x8e,
    0xcf,0xc7,0xe0,0xc6,0xe7,0x13,0x30,0xe3,0x33,0xeb,0xf8,0xa8,0x6d,0x46,0xd6,0x1c,
    0xb9,0x67,0xdc,0x39,0x7e,0x0a,0x97,0x84,0xf7,0x51,0x39,0x7e,0xef,0x70,0x7b,0x7b,
    0x66,0x89,0x9d,0x73,0xef,0xc2,0x67,0xf0,0xba,0xea,0xde,0x85,0x6b,0xe0,0xab,0xbc,
    0xc7,0x9f,0x83,0xf5,0x3a,0xae,0x5f,0x80,0xf7,0xc0,0x75,0xc1,0x71,0x55,0xdb,0xbc,
    0xac,0x05,0xea,0xcd,0x3b,0x5e,0x3f,0xa0,0x6f,0xd5,0xbd,0xdb,0xe6,0xb7,0xe0,0xce,
    0xf6,0x0e,0x3e,0x73,0xc4,0xcc,0x3b,0x3e,0x5f,0xc2,0xa7,0xc9,0xf1,0xf9,0x0a,0xdc,
    0xf8,0x2c,0x39,0x3e,0x6a,0x5b,0x94,0xb5,0x44,0x9d,0x45,0xc7,0xe7,0x26,0x7c,0xee,
    0x70,0x86,0xca,0xc7,0xfc,0x96,0x1c,0x9f,0xbb,0xf8,0x2c,0x10,0xb3,0xe8,0xf8,0x7c,
    0x0d,0x9f,0x49,0xc7,0xe7,0x3a,0xb8,0xf1,0x59,0x71,0x7c,0xae,0x47,0xbf,0x10,0x31,
    0xad,0xb3,0xec,0xf8,0xfc,0xc8,0xef,0xbb,0xbb,0x6e,0x9e,0xcc,0x6f,0xc5,0xf1,0xf9,
    0x0d,0x9f,0x25,0x62,0x96,0x4b,0xce,0x78,0xd6,0xf9,0xfe,0xca,0x3c,0xcc,0x10,0xb7,
    0x52,0x32,0xa7,0xd3,0xce,0xf7,0x17,0xe6,0x7b,0x8a,0xb8,0xd9,0xf8,0xdb,0x2a,0x89,
    0xbf,0xa9,0xd4,0xf6,0xb7,0x9c,0x5a,0x87,0xac,0x7f,0x00,0x96,0x7f,0xdd,0xf0,0xb0,
    0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
