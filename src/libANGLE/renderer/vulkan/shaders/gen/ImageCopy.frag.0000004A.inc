// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000004A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000004A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x4f,0x5c,0x55,
    0x14,0xc6,0xcf,0xcc,0x19,0x66,0x28,0xc8,0xa5,0x40,0x8b,0x34,0x52,0xed,0x85,0x44,
    0x43,0x05,0x8c,0x58,0x11,0x2c,0x11,0x2b,0x56,0x93,0x52,0x2d,0x55,0x78,0xd0,0x48,
    0x15,0x54,0x26,0x0a,0xc4,0x94,0xc6,0x37,0xa9,0x85,0x98,0xd8,0xaa,0x10,0x43,0xaa,
    0x51,0x48,0x14,0x1e,0x14,0xc4,0x07,0x13,0x9f,0x8c,0x31,0xda,0x06,0xa9,0x97,0x7f,
    0xc7,0x78,0x49,0x4c,0xdc,0x6b,0xcf,0x6f,0xd5,0x2f,0x13,0x4d,0x27,0xd9,0x39,0x67,
    0x7f,0xeb,0xf6,0x7d,0x6b,0xaf,0xb3,0x33,0x69,0xf6,0x50,0x21,0x49,0x32,0x49,0x55,
    0x52,0x99,0xfc,0x9a,0x94,0x7e,0xbb,0x93,0x6c,0x40,0x92,0xa4,0x3a,0xc9,0xc7,0xe7,
    0x89,0x93,0x67,0x4e,0x76,0x9c,0x9b,0x9d,0xe8,0xe8,0xbe,0xaf,0xcb,0xec,0xb5,0x49,
    0x1a,0xfd,0xcc,0x56,0x97,0x14,0x92,0x5c,0x78,0xda,0x9a,0x7a,0xbe,0x38,0x6d,0x78,
    0x4d,0x58,0x5f,0x86,0x55,0x1f,0xfc,0x0c,0x2f,0x58,0x8e,0xf0,0x56,0x13,0x73,0x5a,
    0x4c,0x92,0x3c,0x96,0x54,0x24,0x8d,0xd4,0x3b,0xc4,0xd3,0xb1,0x0c,0x58,0xa5,0x60,
    0x59,0xb0,0x7a,0xc1,0x52,0xb0,0x26,0xc1,0x72,0x60,0xb7,0x0a,0x56,0x01,0x76,0x9b,
    0x60,0x79,0xb0,0x3b,0x04,0x2b,0x80,0x1d,0x16,0xac,0x12,0xec,0x4e,0xc1,0x76,0x81,
    0x1d,0x11,0xac,0x0a,0xac,0x4b,0xb0,0x6a,0xb0,0x6e,0xc1,0x6e,0x01,0xeb,0x11,0xac,
    0x06,0xec,0xc1,0xd8,0xa7,0xf4,0x86,0x5e,0xeb,0xd9,0xf1,0xf0,0x3c,0x48,0x7f,0x7c,
    0x7f,0x40,0xf6,0xd6,0xe7,0xfd,0xec,0x1b,0x43,0x54,0x36,0xda,0xd3,0xd8,0x1b,0x7b,
    0xdf,0x13,0x7c,0xf2,0xe8,0xb4,0xbe,0x36,0x87,0x7d,0x01,0xfd,0x66,0xdf,0x1b,0x3c,
    0xab,0xb0,0x9b,0xad,0x1a,0x2d,0xb9,0x88,0xe5,0x22,0xdf,0x0c,0x5a,0xfa,0xd8,0xd7,
    0x48,0xae,0x5a,0xfc,0xbd,0x56,0x03,0xb9,0x92,0xc8,0xab,0xfe,0x46,0x5f,0xbd,0xa6,
    0xad,0x86,0x9b,0x2c,0xf7,0xb1,0xfa,0x4d,0xf4,0xbb,0x91,0xfa,0x4d,0xb1,0x4e,0x09,
    0x6b,0x47,0xdb,0x5e,0xf8,0x98,0x7f,0x33,0xb6,0x82,0xd8,0x5b,0x45,0xcf,0x7e,0xec,
    0x0d,0x71,0x6e,0xb2,0xb1,0x97,0xed,0xf0,0xf6,0x3e,0x7b,0x5c,0x3b,0xb3,0xe3,0xf6,
    0x7b,0xa8,0xe3,0xf6,0xa3,0xf4,0xc2,0xfa,0xd0,0x4f,0x4e,0xab,0xd3,0x12,0x2a,0x0c,
    0xb0,0xcf,0x24,0xff,0xfe,0x32,0xb2,0x37,0x2e,0x0f,0xf3,0x3e,0x80,0x36,0xdb,0x1f,
    0x2f,0xe3,0x30,0x58,0xb6,0x1f,0xa2,0xd7,0x16,0x7f,0x0a,0x2d,0x79,0xb1,0x0f,0xb3,
    0x37,0x4e,0xcf,0xc2,0x21,0x15,0xfb,0x44,0x59,0x6f,0xe6,0x98,0x71,0xdf,0x5f,0x2e,
    0xeb,0xed,0x15,0x66,0xd6,0xea,0x6d,0x91,0xab,0x1f,0xbe,0x5b,0x7c,0xe7,0x69,0xec,
    0x45,0x45,0xe4,0x95,0x83,0xaf,0x61,0x7f,0x04,0xc4,0xfa,0x77,0x8c,0xb9,0xaa,0xa3,
    0x5f,0x4f,0x04,0x06,0xb5,0x7c,0xcb,0x75,0x2c,0xef,0xcf,0x34,0xf3,0xb9,0x1b,0xfb,
    0x40,0xc8,0xd0,0xcc,0xf7,0xbc,0x87,0xb3,0x3e,0x86,0x4f,0x0b,0xf8,0xc5,0xe0,0x63,
    0xfb,0x7d,0xc4,0xb5,0x10,0x67,0x67,0x7d,0x3b,0x71,0xad,0xc4,0xf9,0x7c,0x1a,0xfe,
    0x45,0xf0,0x39,0x20,0xf7,0x80,0x9d,0xff,0xef,0x81,0x79,0x1b,0x7c,0xfe,0x0a,0xfe,
    0x7e,0x1f,0xb4,0xa1,0xc7,0xde,0x4f,0x87,0xb8,0x3c,0x77,0xc2,0x3e,0x7c,0xdf,0xa0,
    0x5f,0x77,0x81,0x0f,0x87,0x9d,0x71,0xfa,0x0a,0xcc,0xfd,0xfe,0x0c,0x39,0x3c,0x97,
    0x3d,0x7f,0x0b,0x5e,0xe6,0xf7,0x03,0x3e,0x15,0xc4,0x1c,0x16,0x0d,0x47,0xd0,0xd0,
    0x2e,0x1a,0xee,0x06,0x77,0x0d,0x1d,0x60,0xae,0xa1,0x4b,0x34,0x98,0xad,0x93,0xbb,
    0xc9,0xea,0x76,0x8a,0x86,0x7b,0xa9,0x9d,0x11,0x0d,0xdd,0xe0,0xae,0xe1,0x6b,0x30,
    0xf7,0x33,0x0d,0x9e,0xab,0x4b,0x34,0x5c,0xc5,0xa7,0x8d,0x98,0x4e,0xd1,0x70,0x3f,
    0x1a,0x8e,0x8a,0x86,0x1e,0x70,0xd7,0xf0,0x00,0x98,0x6b,0xe8,0x13,0x0d,0x66,0xeb,
    0x8d,0x73,0x57,0xaa,0xdb,0xcb,0x1c,0x15,0x62,0xbe,0x52,0xed,0xab,0xf2,0x7d,0x19,
    0x47,0xf7,0xed,0x13,0x8e,0xd7,0xf0,0xeb,0x22,0xae,0x17,0x3e,0xf6,0x0d,0x3e,0xc2,
    0xf7,0xe7,0x33,0xf7,0x28,0x9c,0x07,0x65,0xe6,0x4e,0x80,0x5f,0x60,0xe6,0x1e,0x07,
    0xbb,0x46,0xdc,0xa9,0xc8,0xab,0x14,0x37,0x44,0x9c,0xf5,0xf4,0x49,0xf0,0xb1,0x10,
    0xd5,0x1f,0xfb,0x5f,0xaa,0x67,0xf1,0x0f,0x61,0xf7,0x5e,0x9d,0x21,0x7e,0x58,0x7a,
    0xf5,0x14,0xb8,0xf7,0xea,0x69,0x30,0xef,0xd5,0xa8,0xf4,0xca,0x6c,0x23,0x61,0x8d,
    0xa3,0x7f,0x84,0xf3,0xb6,0x3c,0xcf,0x50,0x3b,0x8d,0x7c,0x2a,0xe3,0x1d,0xf1,0x1c,
    0xd8,0x69,0xf9,0x0e,0xb3,0x91,0x53,0x3e,0xda,0xc7,0x88,0xf3,0xb5,0x10,0x72,0x19,
    0x7e,0x96,0xd8,0xb1,0x98,0x6b,0x57,0xd4,0xf5,0x02,0x79,0xce,0x72,0x17,0x54,0x70,
    0x1f,0xa5,0x9c,0xc9,0x28,0x9c,0xc6,0x45,0xef,0x8b,0xe8,0x9d,0x10,0xbd,0x2f,0x81,
    0xbb,0xde,0x97,0xc1,0x5c,0x6f,0x51,0xf4,0x9a,0x6d,0x32,0xac,0x22,0xb9,0x27,0x45,
    0xef,0x2b,0xa2,0x77,0x8b,0x5c,0xaf,0x82,0x1f,0x84,0x93,0xc7,0x15,0x99,0x13,0xf3,
    0x99,0xa2,0xe6,0x38,0xfe,0x93,0xd4,0x9d,0x91,0xba,0x53,0xf1,0xbe,0x4a,0x22,0x66,
    0xf1,0xd3,0x52,0xf7,0xb5,0xff,0xe8,0xf3,0xb9,0x9b,0xf4,0x79,0x96,0x38,0x5f,0x6f,
    0xd1,0xe7,0xf3,0xc4,0xce,0x4a,0x9f,0x5f,0x27,0xcf,0xf9,0xff,0xe9,0xb3,0x73,0x9a,
    0x41,0x93,0xc5,0xfc,0x48,0x4c,0x91,0xf8,0xe9,0xb2,0x33,0x19,0x15,0xdf,0x6d,0xce,
    0x72,0x84,0xb8,0x19,0x39,0xaf,0x0b,0x9c,0xd7,0x9c,0x9c,0xd7,0x9b,0xe0,0x7e,0x5e,
    0x17,0xc1,0xfc,0xbc,0x16,0xa4,0x6f,0x66,0x9b,0x0f,0xeb,0x12,0x75,0xe7,0x45,0xd7,
    0xdb,0xd4,0xde,0x46,0x57,0x81,0x1e,0xb9,0xae,0x05,0x62,0x2e,0x09,0x9f,0x77,0xe0,
    0x73,0x59,0xf8,0xbc,0x0b,0xee,0x7c,0xde,0x03,0x73,0x3e,0x4b,0xc2,0xc7,0x6c,0x8b,
    0x61,0x2d,0x93,0x7b,0x51,0xce,0xf1,0x7d,0xb8,0xa4,0xdc,0x87,0xc6,0xf1,0x1b,0xc1,
    0xfd,0xae,0x59,0x22,0x76,0x59,0xee,0x81,0x0f,0xe0,0x75,0x45,0xee,0x81,0x0f,0xc1,
    0x77,0xb8,0x7f,0x3f,0x02,0x1b,0x12,0xae,0x1f,0x83,0x0f,0xc2,0x75,0x55,0xb8,0x9a,
    0x6d,0x25,0xac,0x55,0xea,0xad,0x08,0xaf,0x6f,0xd1,0xb7,0x2d,0xf7,0xb4,0xfb,0xad,
    0xca,0xd9,0xee,0xe0,0xb3,0x4c,0xcc,0x8a,0xf0,0xf9,0x04,0x3e,0xad,0xc2,0xe7,0x53,
    0x70,0xe7,0xb3,0x2e,0x7c,0xcc,0xb6,0x16,0xd6,0x3a,0x75,0xd6,0x84,0xcf,0x77,0xf0,
    0xd9,0xe1,0x0c,0x8d,0x8f,0xfb,0xad,0x0b,0x9f,0xeb,0xf8,0xac,0x12,0xb3,0x26,0x7c,
    0x3e,0x83,0xcf,0x9c,0xf0,0xf9,0x1c,0xdc,0xf9,0x6c,0x0a,0x1f,0xb3,0x6d,0x84,0xb5,
    0x49,0x9d,0x0d,0xe1,0xf3,0x3d,0xff,0xe1,0xae,0xcb,0x3c,0xb9,0xdf,0xa6,0xf0,0xf9,
    0x05,0x9f,0x75,0x62,0x36,0xca,0xce,0x78,0x49,0x7c,0x7f,0x66,0x1e,0x16,0x89,0xdb,
    0x2c,0x9b,0xd3,0x05,0xf1,0xfd,0x89,0xf9,0x9e,0x27,0x6e,0x29,0xfe,0x97,0x4a,0xe3,
    0x7f,0x28,0xb3,0xfd,0x1d,0x4e,0xad,0x27,0xac,0x7f,0x00,0x2e,0x5c,0x49,0xb4,0x94,
    0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
