// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x55,0x5d,0x6f,0x8c,0x51,
    0x10,0x3e,0xf3,0xee,0x76,0xab,0x68,0x4b,0xd4,0xb7,0x96,0xb2,0x29,0xaa,0x5a,0x17,
    0x88,0x54,0x10,0x5f,0xd1,0x56,0x45,0x1b,0x17,0x15,0x11,0x89,0x46,0xa2,0x92,0x12,
    0xec,0x6a,0x11,0x42,0xd0,0x86,0x3b,0x42,0x22,0x1a,0x6e,0x44,0x2f,0x34,0xed,0x5f,
    0x10,0xe2,0x9b,0xa6,0x3e,0x1a,0x51,0xff,0xc0,0x8d,0xaf,0xab,0x2a,0x91,0x98,0x39,
    0xf3,0x9c,0xdd,0xc9,0x66,0x37,0x39,0x39,0xef,0x3c,0xe7,0x99,0x99,0xe7,0xcc,0x3b,
    0xf3,0x6e,0x2c,0x5a,0x52,0xe8,0x1c,0xb9,0xc9,0x6e,0x92,0x7b,0x42,0xce,0xff,0xa6,
    0xbb,0xc8,0xc9,0xe3,0x14,0x97,0xf0,0xfb,0x8e,0xe6,0x3d,0xcd,0xb5,0xa9,0xf4,0xa1,
    0xda,0xd5,0x6b,0x56,0xc9,0x79,0x89,0x8b,0x79,0x9e,0x9c,0x95,0x32,0xa7,0x80,0xf7,
    0x38,0xaf,0xa3,0x07,0x8f,0x1c,0x13,0xbc,0x92,0xd7,0x34,0xc6,0xe3,0x3e,0x96,0xe3,
    0xc8,0xba,0x7c,0x2c,0x46,0x2b,0x7d,0x6c,0xe7,0x16,0xf0,0x6a,0x60,0xef,0x15,0x9a,
    0xd6,0x2d,0xc1,0x1e,0x30,0x02,0x36,0xd5,0x60,0x11,0xb0,0x69,0x06,0x8b,0x01,0xb3,
    0xf1,0xe2,0xc0,0x16,0x19,0xac,0x00,0x58,0xd2,0x60,0x09,0x60,0xcb,0xbc,0xb6,0x58,
    0x26,0x87,0xe8,0xdc,0xc9,0xfb,0x62,0x68,0x0a,0x76,0xa5,0xb1,0x53,0xf0,0x8f,0x23,
    0x5e,0x3a,0xe7,0x1e,0x12,0x2f,0x0d,0x7d,0xc2,0xef,0xca,0x89,0xd7,0x85,0x78,0xa1,
    0x2e,0x9f,0x51,0x97,0xb9,0xbc,0x66,0xb0,0x8a,0xc8,0x9f,0xc7,0xbc,0xbf,0x3c,0xcf,
    0x64,0x4e,0x02,0x77,0x72,0xb0,0xa7,0xc2,0x96,0x18,0xb3,0xd9,0x2e,0x46,0xbd,0x62,
    0xb0,0x4b,0xa1,0x31,0xd8,0x65,0xb0,0x23,0xef,0x17,0xcf,0xf8,0x0a,0x6f,0x3d,0xec,
    0xa0,0x69,0x05,0xf2,0x25,0x91,0x2f,0xd8,0x55,0x38,0x9f,0xc5,0x51,0x97,0x23,0xbf,
    0xc4,0xae,0xe6,0x7d,0x39,0x72,0x55,0xb8,0x22,0x5f,0xcb,0x6a,0xe4,0x2b,0xc6,0x1e,
    0x56,0x19,0xf2,0xd7,0xf0,0x5e,0xe4,0x63,0x6b,0x7e,0xb1,0x57,0x66,0x30,0xbd,0x5f,
    0x2d,0x6a,0x2c,0xfc,0x3a,0x9c,0x25,0x8c,0x9e,0x75,0xc8,0x19,0xec,0x7a,0xf0,0x83,
    0xff,0x56,0x73,0xdf,0x6d,0xf0,0x2f,0xf6,0x75,0x2e,0x72,0x8d,0x88,0x85,0xd6,0xcf,
    0xfc,0x84,0xbf,0x10,0x3e,0x4d,0xc0,0x1a,0xa1,0x51,0xec,0x9d,0xc0,0xe4,0xde,0xbb,
    0x50,0xf3,0x08,0x76,0x8b,0xe9,0x8b,0xa0,0xa9,0x0d,0x13,0x13,0xec,0x76,0xcc,0x44,
    0xd0,0xd8,0x09,0x0d,0xe5,0x7c,0x93,0xd0,0x57,0x15,0xe8,0x9f,0x14,0x74,0x9c,0x42,
    0x8e,0x34,0x74,0x88,0xdd,0x05,0x2c,0xc4,0xe9,0x86,0x2e,0xe1,0x9f,0xc7,0x59,0x02,
    0xf6,0x2d,0xe4,0xb0,0xb5,0xbb,0x6d,0xfc,0xc5,0xee,0xcb,0xbc,0x9f,0xc8,0x3d,0x80,
    0xdf,0x73,0xd4,0xac,0x1a,0xf7,0x7b,0xc5,0xfb,0x03,0x53,0x73,0xc9,0x3b,0x02,0xbb,
    0x86,0xbd,0xa5,0x97,0x3e,0xe3,0x8e,0xed,0x99,0x7e,0x89,0x79,0xde,0x63,0x16,0xb0,
    0x96,0x67,0x25,0x42,0x7d,0x1c,0xfc,0x7e,0x33,0x22,0xf3,0x39,0xce,0xd6,0x18,0xf0,
    0xbf,0xfc,0x2c,0xbd,0xf7,0x05,0xe7,0xb2,0x6f,0x40,0x4f,0x3f,0x45,0x9f,0x1e,0x47,
    0xdf,0x3d,0x03,0xb6,0x99,0xa3,0x88,0xde,0x17,0xe8,0xa3,0x6e,0xf8,0x08,0xe7,0x25,
    0xf0,0x47,0xcc,0x91,0x3b,0xbc,0x86,0xdf,0x4b,0x7f,0xef,0xb8,0xbf,0xd3,0x1b,0xe0,
    0xa2,0x63,0x18,0x3a,0xfe,0xf0,0x99,0xe0,0x6f,0x79,0x0d,0x43,0x8b,0x3c,0x4f,0xf0,
    0x3e,0x06,0x7b,0x18,0xb9,0xa5,0x3f,0xdf,0x21,0xf7,0x08,0x72,0x4b,0x3d,0xdf,0x03,
    0x1f,0x60,0x8e,0xe4,0xf9,0x00,0xac,0x1e,0xb9,0x46,0x4d,0x2e,0x39,0xfb,0xc8,0xeb,
    0x13,0x62,0xcb,0xf3,0x39,0xcc,0xf6,0x57,0xdc,0xb3,0x95,0xe3,0xf8,0x59,0x22,0xb5,
    0xc9,0xe4,0x2f,0x24,0xcd,0x5f,0x6b,0xf2,0x4f,0x22,0xc5,0xaf,0xc0,0xaf,0x88,0xd4,
    0x57,0xf0,0x10,0x6b,0x0a,0x62,0xc9,0x2f,0xf0,0x8a,0x49,0x71,0x79,0x8f,0x17,0x81,
    0x95,0x90,0xe2,0x32,0x77,0xbd,0xc0,0x4a,0x49,0xf1,0x7a,0xc3,0x2b,0x23,0xcd,0x23,
    0x67,0xa2,0x4d,0x66,0x6f,0x36,0xb4,0x6d,0x85,0x36,0xb9,0xd3,0x1c,0x52,0x5c,0xfc,
    0xc4,0x9e,0x47,0x7a,0x4f,0xc1,0x85,0x23,0x73,0x37,0x9f,0x74,0xe6,0x76,0xbb,0x42,
    0x3f,0x6f,0xe5,0xa4,0xbc,0x79,0x18,0x5c,0xf2,0xbd,0x56,0xe0,0x67,0xaf,0x82,0x94,
    0x5f,0x4e,0xd9,0x9a,0x7c,0xc3,0x3b,0xe9,0x34,0x35,0xf9,0x0e,0x3c,0xdc,0xff,0x07,
    0x7c,0x9d,0xc1,0x7e,0x02,0x23,0x83,0xfd,0x02,0x16,0x99,0x3a,0x25,0x49,0xb9,0x6d,
    0xe6,0xfe,0x4b,0x49,0xf1,0x1f,0xfe,0xdd,0x24,0xfc,0x3c,0x8e,0x63,0x66,0xbb,0x51,
    0x9f,0x8d,0xfc,0xee,0xc7,0xc1,0x0d,0x7e,0x13,0x38,0xab,0x32,0xf1,0x6b,0x48,0xf5,
    0xda,0xf8,0x75,0xa4,0xf8,0x2f,0x13,0xff,0x9f,0x89,0x2f,0x71,0x24,0xfe,0x3f,0x70,
    0xa5,0x5f,0x47,0xd1,0x53,0x9f,0x4c,0x4f,0x6d,0xa2,0x6c,0x4f,0xc9,0x8c,0x6e,0x26,
    0xc5,0x1c,0x72,0x09,0xb6,0x85,0x14,0xef,0x34,0xbc,0xed,0xe0,0x09,0xb5,0x85,0xf3,
    0x4b,0xac,0x1d,0xa4,0x5c,0x39,0x7b,0x8c,0xfa,0xcb,0x77,0xa7,0x81,0x74,0x5e,0x93,
    0xa6,0xfe,0x8d,0xa4,0xf8,0x35,0xdc,0xa7,0x89,0x14,0xbb,0x6d,0x6a,0x7d,0x22,0x4f,
    0x7f,0x9f,0xcc,0xd3,0xdf,0x29,0x52,0x3c,0xd4,0x2b,0x4d,0xea,0x9b,0x32,0xfd,0xdd,
    0x95,0xa7,0xbf,0x4f,0x93,0xe2,0x7d,0xa6,0xae,0x67,0x48,0x71,0xdb,0xdf,0x67,0x49,
    0x71,0xdb,0xdf,0x17,0x48,0xf3,0x9c,0x35,0xfd,0x7d,0x29,0x4f,0x7f,0x5f,0x26,0xc5,
    0x43,0x7f,0xf7,0xa0,0x6e,0x97,0x4d,0x7f,0xf7,0xe6,0xf4,0xf7,0x55,0x52,0x5e,0x4f,
    0x9e,0xfe,0xbe,0x46,0xca,0x17,0x4e,0xf8,0x9e,0xb4,0x90,0xd6,0x2f,0x89,0xef,0x49,
    0x07,0x65,0xbf,0x27,0x72,0xd6,0x2a,0x33,0x4c,0xfa,0xee,0x5b,0x8d,0x96,0xeb,0xa4,
    0xef,0xcc,0x6a,0xb9,0x91,0xa3,0xe5,0x26,0x29,0xef,0x7a,0x1e,0x2d,0xb7,0x48,0xf9,
    0x37,0x4d,0x9d,0xef,0x90,0x6a,0x24,0x53,0xe7,0x3e,0x52,0xbc,0xcd,0xbc,0xdb,0xbb,
    0xe0,0x39,0x53,0xd3,0x7b,0xa4,0xdc,0xbb,0x94,0xed,0xe9,0xbd,0x94,0xed,0xe9,0x0b,
    0x98,0x19,0xc1,0xee,0x99,0x99,0xd9,0x47,0x7a,0x56,0x65,0xe2,0xef,0x47,0xfc,0xc8,
    0x60,0x07,0x48,0x35,0xdb,0x1e,0xb8,0x4f,0x8a,0xdb,0xd9,0xea,0x27,0xc5,0xf7,0x1b,
    0x1d,0x07,0x8d,0x8e,0x7d,0xd0,0x21,0x58,0x3f,0x66,0xab,0x03,0xf5,0x6d,0x37,0xb5,
    0x78,0x68,0x34,0x84,0x7c,0x03,0xa4,0xb8,0xad,0xc5,0xa0,0xa9,0x59,0xd0,0x30,0x44,
    0xca,0x1d,0x34,0x1a,0x0e,0xe7,0xa9,0x85,0x60,0x43,0x39,0x1a,0x3a,0x72,0xe6,0x7d,
    0x34,0xe7,0xff,0x6a,0xcc,0x7f,0x2b,0x88,0x7b,0x9c,0xdc,0x7f,0x30,0x3a,0x01,0xe0,
    0x04,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba16ui)uniform uimage2D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = 0;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord . xy). rgb;
//
// }
//
// uint makeUint(uvec2 v)
// {
//     return v . g * 0x10000u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 8;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v . rg);
//     destData[destOffset + 1]= makeUint(v . ba);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 2;
//     uint pixelBytes = 6;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     if(remainder == 0)
//     {
//         uvec3 v1 = fetchSrc(srcCoord1);
//
//         destData[destOffset]= makeUint(v0 . rg);
//         destData[destOffset + 1]= makeUint(uvec2(v0 . b, v1 . r));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(v0 . gb);
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
