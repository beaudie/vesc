// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x8d,0x77,0xce,0x65,
    0x18,0xc7,0x7f,0x7b,0x9e,0x67,0xcf,0x33,0x33,0x33,0x59,0x23,0xd1,0xd9,0x46,0x52,
    0xd3,0xac,0x9a,0x77,0x0f,0x8d,0x32,0x6a,0x88,0x59,0x24,0xa5,0x95,0x62,0x69,0x2b,
    0xa6,0xac,0x62,0x98,0x64,0x92,0x84,0x8a,0x52,0x94,0x88,0xac,0x49,0x45,0x84,0x8a,
    0x8a,0xe9,0xcd,0x54,0xa6,0xf2,0x56,0xff,0x44,0xa7,0x97,0x73,0x7a,0xb9,0xaf,0xdf,
    0x3e,0xd7,0xd3,0x75,0x7e,0xc7,0xa9,0x9d,0x73,0x9f,0xdf,0x73,0x7d,0xaf,0xeb,0xfe,
    0xde,0xdf,0xeb,0xba,0xee,0xfb,0xfe,0x3d,0xcf,0xc2,0xa1,0xee,0x31,0x2f,0x9c,0xe4,
    0xa5,0x7a,0x29,0xde,0xcf,0x5e,0xeb,0x5f,0x07,0x2f,0xe4,0x25,0xb9,0x67,0x5b,0x2f,
    0xea,0x3f,0x8b,0x4b,0x4a,0x4b,0xf2,0xab,0xe7,0x4e,0xcf,0x2f,0xec,0x5b,0x20,0xfe,
    0x74,0x2f,0xec,0xc7,0x89,0xaf,0xbd,0x17,0xf3,0x22,0xee,0x29,0xa3,0xb2,0xbc,0xa2,
    0x4a,0xf0,0x9e,0x6e,0x9c,0x77,0x23,0xc3,0xc5,0x09,0x1e,0x13,0x0e,0xf7,0xa9,0xa7,
    0xcf,0x29,0x73,0x3c,0x6f,0x94,0x97,0xec,0xf5,0x66,0xbd,0xee,0x3c,0x15,0x4b,0x02,
    0x4b,0x31,0x58,0x08,0x2c,0xc3,0x60,0x61,0xb0,0x4c,0x83,0x45,0xc0,0x3a,0x1b,0x2c,
    0x19,0xac,0xab,0xc1,0xa2,0x60,0xd9,0x06,0x8b,0x81,0xf5,0x30,0x58,0x0a,0x58,0x2f,
    0x83,0xb5,0x01,0xeb,0x6d,0xb0,0x54,0xb0,0x02,0x83,0xb5,0x05,0x2b,0x34,0x58,0x1a,
    0xd8,0x00,0x83,0xb5,0x03,0x1b,0xe2,0xd7,0x29,0x9c,0xc8,0x57,0x6a,0x36,0xc5,0x3d,
    0x73,0xa9,0x8f,0xda,0x39,0xc6,0x96,0x3a,0x5f,0x86,0xdd,0xd1,0xcd,0x0a,0xf9,0xfe,
    0xb0,0x5f,0x1b,0xf9,0x9c,0xe5,0x3e,0x45,0xc9,0x33,0xdb,0xc5,0xc7,0xc8,0x33,0xea,
    0xc7,0x45,0xfc,0xfc,0xa2,0x60,0x79,0xce,0x8e,0xa2,0xa7,0x6b,0xfe,0x98,0xc1,0x99,
    0x8e,0x21,0xdd,0xe0,0x1d,0xdd,0x98,0xb0,0x6f,0x6c,0x91,0xda,0x52,0xe3,0xb2,0xb2,
    0x96,0xa1,0x6a,0x77,0x71,0x23,0x9e,0xba,0x6c,0x98,0xda,0x52,0xef,0x9d,0xc5,0xe5,
    0xf1,0x8b,0x9d,0x9d,0x8d,0x06,0xe9,0x6d,0x27,0x67,0xe7,0x60,0x87,0xd0,0x95,0x8b,
    0x86,0x1c,0xfc,0x3d,0xd0,0x15,0xc1,0x7f,0x39,0x73,0x05,0x1f,0x8c,0xdd,0xd3,0xf0,
    0x5d,0x41,0xbc,0xf0,0xc9,0x7a,0x79,0xf0,0x7b,0x7e,0x7d,0x32,0xfc,0x9a,0xe6,0x30,
    0x54,0x4b,0xde,0xff,0x8c,0xec,0xc4,0x33,0xe2,0x5d,0x4d,0xdf,0x7b,0xb3,0xbe,0xd8,
    0xf9,0x60,0x79,0xe4,0xd7,0x07,0x3d,0x12,0x5f,0x80,0x2f,0xc7,0xf8,0xfb,0x99,0x7c,
    0xfa,0x27,0xe6,0xb6,0xfa,0xe5,0x39,0x08,0xbd,0xe2,0x1f,0x4a,0x3d,0xb2,0xcd,0xfc,
    0x11,0xec,0x65,0x8d,0x1f,0xcd,0x7a,0xea,0x1f,0x4b,0xef,0x64,0xfe,0xad,0xcc,0x97,
    0x7a,0x5d,0xe2,0x56,0x9a,0x4c,0x7d,0x92,0x58,0x23,0xf8,0x94,0x39,0xb7,0xf1,0x79,
    0x32,0x39,0x8a,0x3d,0x05,0x4c,0xd7,0x98,0x1a,0xb0,0xcb,0x39,0x87,0x32,0xff,0x6e,
    0x72,0xca,0xa6,0x27,0xf7,0xf2,0x39,0x6c,0xe2,0x2b,0xe8,0x91,0xda,0x95,0x9c,0x1d,
    0xcd,0xa9,0x36,0xe0,0x5f,0x82,0x6e,0xf5,0x2f,0x87,0x4f,0xf8,0x9f,0xc6,0x67,0xf9,
    0xd7,0x06,0xf6,0xf2,0x06,0xa3,0x57,0xec,0xed,0xbe,0xb5,0x70,0x84,0xcc,0x6f,0xa0,
    0xfe,0xda,0x93,0xb7,0x98,0xdb,0x60,0xf8,0x76,0x71,0x07,0x48,0xfc,0xfb,0xc4,0x5b,
    0x7d,0x07,0x13,0x39,0x47,0xbc,0x4f,0x12,0x6b,0xff,0xeb,0x3f,0xc6,0x99,0x17,0xff,
    0x39,0xb4,0x36,0x50,0xdf,0x73,0xdc,0x93,0x61,0x7f,0x6f,0x24,0xfb,0xbc,0x11,0xf4,
    0x0a,0xf6,0x9b,0x43,0x92,0x89,0xcd,0xe5,0x8e,0x88,0x19,0xbb,0xd0,0xd8,0xd2,0xef,
    0x49,0xc6,0x96,0x67,0x75,0xc0,0xae,0x09,0xd8,0x0b,0x8c,0x2d,0xb9,0x37,0x1a,0x5b,
    0xf6,0x5f,0x13,0x76,0x9c,0xf3,0xd8,0x8b,0x33,0x37,0xce,0xa1,0x72,0xde,0xae,0x04,
    0xeb,0x65,0xf6,0x52,0x15,0x67,0xfb,0x2a,0xfc,0x45,0x2e,0x03,0x39,0x0b,0xd7,0x70,
    0x5e,0xfa,0xc0,0x27,0x31,0xd7,0x82,0xd7,0xb9,0x18,0xb1,0xaf,0x63,0x9e,0xe0,0x43,
    0x5d,0x05,0xba,0x83,0x69,0x7c,0x5f,0x6a,0x20,0xbe,0x42,0x6c,0xe1,0xef,0xcf,0x7d,
    0x9a,0xcf,0x19,0x8b,0xb3,0x57,0x06,0x82,0x37,0xb8,0x98,0x74,0x3f,0xaf,0x56,0x4c,
    0xce,0xd9,0xaf,0x8e,0x23,0x8e,0xee,0x3f,0x5c,0xfc,0x60,0xee,0xdf,0x38,0x75,0x1f,
    0x02,0xb7,0xd4,0x61,0x18,0xb5,0x1e,0x04,0xb7,0xf4,0xf5,0x7a,0xf0,0x5a,0xec,0x22,
    0x30,0x9d,0x33,0xdc,0xcc,0x11,0xbd,0xc3,0x89,0xf9,0xdd,0x71,0xeb,0x1a,0x71,0xa3,
    0xff,0x06,0xf4,0x8f,0x30,0xfa,0x6f,0x04,0x57,0xfd,0x23,0xc1,0x54,0xff,0x28,0xa3,
    0x7f,0xa4,0xff,0x3e,0xf0,0x7c,0x4c,0xb8,0x8b,0x8d,0x96,0x9b,0xd0,0x32,0xda,0xe8,
    0xbf,0x19,0x5c,0xf5,0x97,0x80,0xe9,0x9c,0x31,0x66,0x8e,0xe8,0x1f,0x43,0x8c,0xe8,
    0xd7,0x35,0x46,0x19,0xfd,0xe3,0xd0,0x3f,0xd6,0xe8,0xbf,0x05,0x5c,0xf5,0x8f,0x07,
    0x53,0xfd,0xa5,0x46,0xbf,0xf8,0x26,0xb8,0x51,0x0a,0xf7,0x04,0xd3,0xf7,0x89,0x68,
    0x91,0x7d,0x27,0x76,0x19,0xd8,0x44,0x73,0x7f,0xe9,0x9e,0x28,0x43,0xa3,0xf2,0x94,
    0xc2,0x23,0x77,0xda,0xed,0xdc,0x67,0xba,0x27,0xef,0x40,0xf3,0x54,0xb3,0xd6,0x9d,
    0xe0,0x6a,0x4f,0x63,0xed,0x45,0xec,0xd1,0xbb,0x88,0x99,0x06,0x8f,0xdc,0x79,0xf7,
    0xc0,0x53,0x6e,0xea,0x3b,0x1d,0x7c,0xbc,0x8b,0x11,0xfb,0x3e,0xe6,0x7a,0x06,0x9b,
    0x01,0x96,0xe4,0xd7,0x25,0xea,0xdf,0x97,0x33,0x89,0x9d,0x01,0x87,0xae,0x71,0x3f,
    0x6b,0x54,0x98,0x35,0x66,0x81,0x4f,0x73,0x75,0x91,0xf3,0xf9,0x00,0x39,0xce,0xe4,
    0x8e,0x9a,0x45,0x5d,0x26,0xe1,0xd3,0x5e,0x55,0xc1,0x55,0x69,0x7a,0xf5,0x20,0xb8,
    0xf6,0xea,0x21,0x30,0xed,0xd5,0x1c,0xd3,0x2b,0xf1,0xcd,0x76,0x63,0x0e,0x35,0x9e,
    0x0d,0xb7,0xdc,0x15,0x73,0xb9,0x87,0xf4,0xac,0xc8,0x9d,0xfb,0x30,0xb8,0x68,0xa9,
    0xc6,0x1e,0xe8,0xe2,0xc5,0xf7,0x08,0xf7,0x7f,0xb5,0xe1,0x98,0x67,0x38,0x64,0xce,
    0x3c,0xe2,0xd4,0xff,0x28,0xfe,0xd1,0x66,0x8d,0xc7,0xc0,0x25,0xbe,0x06,0x5b,0xd7,
    0x78,0x9c,0x35,0x6a,0x0c,0xc7,0x7c,0xc3,0x21,0x73,0xe6,0x13,0xa7,0xfe,0x85,0xf8,
    0x6b,0xcd,0x1a,0x8b,0xc0,0x25,0x7e,0x01,0xb6,0xae,0xb1,0x98,0x35,0x16,0x18,0x8e,
    0x3a,0xc3,0x21,0x73,0xea,0x88,0x93,0xfd,0xa9,0xb5,0x9b,0x63,0xfa,0xf2,0x04,0x7d,
    0x59,0x62,0xfa,0xb2,0x14,0x5c,0xfb,0xf2,0x24,0x98,0xf6,0xa5,0xde,0xf4,0x45,0x7c,
    0xcb,0xdc,0x58,0x03,0xf7,0x32,0xa3,0xe5,0x29,0xb4,0x2c,0x37,0xf9,0xac,0x00,0xd7,
    0xfb,0x7d,0x25,0x31,0xe3,0xdc,0x1b,0x4f,0xde,0xad,0xcf,0x80,0xad,0x34,0xf7,0x7b,
    0xc8,0xc7,0x93,0x7d,0xff,0x2a,0x62,0x56,0x18,0x8e,0x67,0x13,0x1c,0x6d,0x7c,0x7b,
    0x35,0xd8,0x2a,0xde,0x6d,0xc9,0xe6,0x9d,0xad,0x7b,0x73,0x35,0x35,0xa9,0x47,0xf7,
    0x1a,0x53,0x93,0xe7,0xa8,0xc9,0x5a,0x53,0x93,0xe7,0xc1,0xb5,0x26,0x2f,0x80,0x69,
    0x4d,0xd6,0x9b,0x9a,0x88,0x6f,0x9d,0x1b,0xeb,0xe1,0x5e,0x67,0x6a,0xf2,0xe2,0x05,
    0x6a,0xf2,0x12,0xf8,0x7e,0xb8,0x5f,0x06,0xdb,0x80,0x46,0xe5,0x91,0xe7,0x2f,0x8e,
    0x45,0x62,0x5e,0x41,0xc3,0x1a,0xe2,0xd7,0xa1,0x63,0x93,0xd1,0x21,0x31,0x1b,0xdd,
    0xd8,0xc4,0xfc,0x8d,0x46,0xc7,0xab,0x17,0xd0,0xf1,0x1a,0xb8,0xd6,0x75,0x73,0xa0,
    0x37,0xaf,0x83,0x6d,0x0e,0xf4,0x46,0xee,0x11,0xf1,0x6f,0x81,0x43,0x47,0x3d,0x3d,
    0xdb,0xca,0xdc,0x2d,0x86,0xfb,0x8d,0x40,0xcf,0xb6,0x81,0x6d,0xfd,0x8f,0x9e,0x6d,
    0xa3,0x1e,0x9a,0xcf,0xa6,0x40,0x0f,0xeb,0x0d,0xff,0x9b,0xf0,0xcb,0xbe,0x11,0x7b,
    0x07,0xd8,0x76,0xc3,0xb7,0xc3,0xc4,0xef,0x24,0xbe,0x92,0xef,0x68,0x6f,0x83,0x49,
    0x6c,0x23,0xb6,0xee,0x8f,0x77,0xd8,0x1f,0xbb,0xcc,0xfe,0x78,0x17,0x5c,0xf7,0xc7,
    0x7b,0x60,0xba,0x3f,0xf6,0x98,0xbe,0x88,0x6f,0xb7,0x1b,0x07,0xd0,0xbd,0x1b,0x1e,
    0x59,0x77,0x2f,0xdf,0x89,0xe4,0xbd,0x23,0xdf,0xfd,0xf6,0x81,0xed,0x35,0xdf,0xd1,
    0x34,0xf6,0x83,0x44,0x6c,0x1b,0xdf,0xde,0x0f,0xb6,0xcf,0xd4,0x30,0x64,0x6a,0xd8,
    0x48,0x8c,0xd4,0x6c,0x0f,0x6b,0x1f,0x30,0x79,0x7d,0x48,0x5e,0x07,0x4d,0x5e,0x1f,
    0x81,0x6b,0x5e,0x1f,0x83,0x69,0x5e,0x87,0x4d,0x5e,0xe2,0x3b,0xe4,0xc6,0x51,0xb8,
    0x0f,0xc1,0x2d,0xdf,0x51,0x3f,0x45,0xeb,0x72,0xc3,0xfd,0x19,0xb8,0xc6,0x1c,0x21,
    0x46,0xef,0xe0,0x23,0xc4,0x88,0xde,0xc3,0x70,0x1e,0x35,0xef,0xa7,0xcf,0xd1,0x7b,
    0xcc,0xbc,0x9f,0xbe,0x00,0x97,0xf9,0x4d,0xd8,0xea,0xfb,0x92,0xef,0x97,0x4d,0xbc,
    0x0b,0xbf,0x02,0xab,0x30,0xf9,0x7d,0x0d,0x3e,0x95,0xfc,0x9a,0x4d,0x7e,0xe2,0x3b,
    0xee,0x46,0x33,0x5a,0x8e,0x1b,0xed,0x27,0xd0,0xae,0x77,0xfb,0x09,0xf2,0x10,0xed,
    0x1a,0xdf,0x6c,0xb4,0x7c,0x13,0xd0,0xf2,0x2d,0x58,0x3f,0xa3,0xe5,0x3b,0x70,0xd5,
    0xd2,0x62,0xb4,0x88,0xef,0xa4,0x1b,0x2d,0x70,0x9f,0x34,0x5a,0x4e,0xa1,0x45,0xdf,
    0x01,0xa7,0x8c,0x16,0x8d,0x6f,0x31,0x5a,0xbe,0x0f,0x68,0xf9,0x01,0x6c,0x97,0xd1,
    0xf2,0x23,0xb8,0x6a,0x39,0x63,0xb4,0x88,0xef,0xb4,0x1b,0x67,0xe0,0x3e,0x6d,0xb4,
    0x9c,0x35,0x7d,0x17,0x2d,0x67,0xa9,0x91,0x68,0xd1,0xf8,0x33,0x81,0x1e,0x1f,0x0e,
    0xec,0xd1,0x3d,0x66,0xcf,0xff,0x04,0x9f,0x70,0x9d,0xc7,0xfe,0xd3,0xdd,0x44,0x03,
    0xdc,0xe8,0xc7,0x7b,0x31,0x15,0x6d,0xf2,0x1b,0xaa,0xbf,0x8b,0x8b,0xf1,0x7b,0x49,
    0xb8,0xda,0x9a,0xfb,0x2e,0x0d,0xfc,0x20,0x39,0xb6,0x07,0x6b,0x47,0x8e,0x1d,0x4c,
    0x8e,0xed,0xf9,0x3f,0x50,0x16,0x3c,0x19,0x86,0xe7,0x22,0x78,0x96,0xb2,0x7e,0x26,
    0x98,0xfc,0xef,0xe2,0x2f,0x17,0x9b,0xc9,0x9c,0x2c,0x33,0xa7,0x13,0x73,0xd2,0x9c,
    0xba,0xa8,0xff,0x7b,0xb9,0xf5,0x3e,0xed,0x82,0xaf,0xb3,0xe1,0xbb,0x14,0x7f,0x17,
    0xff,0x3d,0xdd,0x8a,0x75,0x03,0xef,0xca,0x1a,0xdd,0x58,0x43,0x34,0xff,0x4d,0x3d,
    0xfe,0x01,0x5f,0xbb,0xe3,0xa1,0x68,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
