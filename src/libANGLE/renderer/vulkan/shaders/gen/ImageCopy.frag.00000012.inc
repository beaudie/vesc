// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x97,0xeb,0x6f,0x95,0x45,
    0x10,0xc6,0xdf,0x3d,0xe7,0xb4,0x85,0x72,0x2b,0x1c,0xbc,0x00,0x0d,0xb4,0xd0,0x22,
    0x48,0x6d,0xb1,0x72,0x93,0x72,0xc0,0x5a,0xa0,0x25,0x40,0x4b,0x5b,0x89,0x20,0x56,
    0x83,0xa0,0x08,0x86,0x72,0x07,0x15,0x22,0x46,0x31,0x1a,0x12,0x50,0x48,0x88,0x44,
    0x50,0x69,0x44,0x69,0x54,0x88,0x44,0x3e,0x14,0x04,0xbe,0x08,0x22,0x4d,0x0c,0x41,
    0x83,0x34,0x51,0x9a,0x28,0x0d,0xfc,0x05,0x84,0x0a,0x41,0xdc,0xd9,0xfd,0x6d,0x3b,
    0x39,0x8a,0x4d,0x96,0xf7,0xcc,0x33,0xb7,0x67,0x66,0x67,0xf7,0x7d,0x89,0xc7,0x46,
    0x64,0x45,0x91,0x89,0xb2,0xa3,0x1e,0xd1,0x53,0x26,0x72,0x7f,0xfd,0xa3,0x58,0x64,
    0x78,0x96,0xda,0x67,0xaf,0x28,0xd3,0xc9,0x95,0x73,0xea,0xe7,0x14,0xaf,0x5b,0xbf,
    0xb4,0x78,0xdc,0xf8,0xb1,0x62,0xd7,0x37,0x8a,0x3b,0x7b,0xd1,0xf5,0x8b,0xb2,0xa2,
    0x84,0x7d,0xca,0x5a,0xb9,0x78,0x79,0xa3,0xe0,0x23,0xed,0xba,0x6e,0x57,0x8e,0xb5,
    0x13,0x3c,0x4b,0x62,0xd8,0x5f,0x23,0x5d,0x4c,0xf1,0x89,0xa2,0xaa,0x28,0x23,0x2a,
    0xf2,0x69,0xa3,0x11,0x3c,0x03,0x66,0xc0,0x7a,0x28,0x2c,0x06,0x96,0xa3,0xb0,0x38,
    0xd8,0x40,0x85,0x25,0xc0,0x1e,0x54,0x58,0x06,0x58,0xae,0xc2,0x32,0xc1,0xf2,0x14,
    0x96,0x05,0x56,0xa0,0xb0,0x1e,0x60,0xa3,0x14,0xd6,0x13,0xac,0x48,0x61,0xd9,0x60,
    0x63,0x15,0xd6,0x0b,0x6c,0x9c,0xc2,0x7a,0x83,0x4d,0x52,0x58,0x1f,0xb0,0x29,0xae,
    0x4f,0xf1,0xae,0x7a,0xa5,0x67,0x8b,0xec,0x73,0x38,0xfd,0x09,0x72,0xbe,0x92,0xa5,
    0xcf,0x43,0x91,0x93,0xd6,0x2b,0xe6,0xf4,0x71,0xd7,0x1b,0xf9,0x7d,0xbf,0xfd,0x95,
    0x49,0x9d,0x63,0xac,0x7d,0x26,0xf9,0x72,0x8b,0xe7,0x96,0x0d,0xb4,0x16,0x7d,0x15,
    0x9e,0xb4,0xab,0xae,0xa5,0xba,0x3c,0xc8,0xd2,0xc3,0xf9,0xf3,0x2f,0x4d,0x0d,0xf2,
    0x60,0xbb,0x52,0xd9,0xef,0x4e,0x0b,0xb2,0xf4,0xf3,0x48,0xe5,0xe2,0xd4,0x7d,0x56,
    0xce,0x23,0x87,0xec,0xdd,0x03,0x56,0xce,0x47,0x8e,0x21,0x17,0xd0,0xf3,0x84,0xc3,
    0x13,0x51,0x21,0xb6,0x82,0x97,0x21,0x8f,0x54,0xfe,0x0f,0x61,0x2f,0xfe,0x12,0x7f,
    0x0c,0xf1,0x22,0x57,0x6f,0x8e,0xeb,0x51,0x3e,0x2b,0xaf,0xab,0xbe,0xff,0x5f,0x79,
    0x5d,0xcf,0x44,0xf4,0x08,0xfb,0x58,0x44,0x7e,0x91,0x8b,0xc1,0xc6,0x50,0x4f,0x09,
    0x7c,0xc4,0x7e,0x2c,0xba,0x7c,0xa5,0x9f,0xa0,0xea,0x99,0xd8,0xe5,0xeb,0xf5,0xf2,
    0x9c,0x0c,0xdf,0x60,0x5f,0xc1,0x2c,0x06,0xfd,0x2c,0xe2,0x07,0x7d,0x35,0x7b,0x33,
    0xc8,0x46,0x5a,0x40,0xfd,0x1c,0xcd,0x7f,0x3d,0x87,0xd8,0x7d,0x5d,0x68,0x9f,0x0b,
    0xc8,0xff,0x0c,0xf8,0x42,0xea,0x11,0x79,0x51,0x5a,0xfe,0x86,0x34,0x79,0x09,0x67,
    0x48,0xfc,0x97,0xc2,0x3f,0x8f,0xfe,0xbf,0x4c,0xfe,0x38,0x72,0x23,0xba,0xb8,0xf2,
    0x5f,0xcb,0xfe,0x04,0x79,0x13,0xe7,0x20,0xc8,0x3b,0x88,0x11,0xe4,0xfd,0x9c,0xb1,
    0x30,0x3f,0x07,0x15,0x1f,0x91,0x8f,0x3a,0x69,0x6b,0x85,0xe4,0x3b,0x46,0x2f,0x13,
    0xca,0xff,0x38,0xe7,0x31,0xc8,0x67,0xd3,0xf6,0xeb,0x22,0xe7,0x4b,0xea,0xb9,0x06,
    0xd7,0x63,0xf4,0xe3,0x1a,0x77,0x52,0xdc,0xed,0x5b,0x86,0xe3,0x9d,0x20,0xbf,0x60,
    0x9d,0x16,0x91,0xbd,0x49,0x31,0xab,0xa3,0x98,0xc7,0x1a,0xcb,0x58,0x66,0x71,0x34,
    0xd8,0x28,0xb5,0x0f,0x8d,0xcc,0xf9,0xc3,0xe8,0xcb,0x6d,0x04,0x99,0x93,0x47,0x99,
    0xa5,0x12,0xe2,0x89,0x4d,0x29,0xf8,0x5b,0xd6,0x46,0xe4,0xc7,0xf0,0x2b,0xc5,0x6f,
    0x22,0x77,0x42,0x31,0x73,0x95,0x62,0x46,0x1e,0x07,0xff,0xca,0xda,0xf4,0x75,0xb5,
    0x78,0x4c,0x66,0xeb,0xa6,0x65,0x9e,0x82,0xcf,0x2d,0x6b,0x5f,0xc6,0x1d,0x92,0xa2,
    0x1e,0xf9,0x5d,0x6b,0xfd,0xa4,0x37,0x4f,0x90,0x53,0xfe,0xde,0xa0,0x5f,0xe5,0xe0,
    0x75,0xb6,0xfb,0xc2,0x69,0xb4,0xf1,0x58,0xb0,0xfb,0xcb,0xc6,0x08,0xb1,0xe4,0x79,
    0xc3,0xf6,0x42,0xec,0x9e,0x34,0xde,0x26,0x03,0x9f,0x29,0xaa,0x86,0xe9,0xd4,0x50,
    0xa1,0x6a,0x98,0x01,0x1e,0x6a,0x98,0x09,0x16,0x6a,0xa8,0x52,0x35,0xcc,0x74,0xf7,
    0x5a,0xe4,0x30,0xc9,0x5b,0xa9,0x6a,0x98,0x4d,0x6e,0xa3,0x6a,0x98,0x03,0x1e,0x6a,
    0x28,0x32,0x1e,0x0b,0x76,0x52,0x43,0x88,0x55,0xa5,0x6a,0xa8,0x30,0xde,0x26,0x85,
    0x4f,0xa5,0xaa,0xa1,0x86,0x1a,0xaa,0x55,0x0d,0xf3,0xc0,0x43,0x0d,0xb5,0x60,0xa1,
    0x86,0x7a,0x55,0x43,0xad,0xe3,0x13,0x39,0x4c,0xf2,0xd6,0x31,0x47,0x92,0x77,0x3e,
    0xb9,0x2b,0x4c,0xf7,0x59,0x16,0x8e,0xc1,0xb6,0x5e,0x71,0x9c,0x8e,0x5d,0x15,0x7e,
    0x75,0xf0,0x91,0x33,0xfe,0x2c,0xe7,0x3b,0xcc,0xdc,0x73,0x70,0x6e,0x50,0x33,0xf7,
    0x3c,0xf8,0x9b,0xcc,0xdc,0x62,0x30,0x89,0xbb,0x8a,0x3b,0xf6,0x05,0x70,0x89,0x23,
    0x77,0xc0,0x8b,0xc4,0x59,0x42,0x1c,0xe9,0xf1,0x4b,0xe0,0xab,0x38,0xa7,0xcb,0xc0,
    0x64,0x5f,0x44,0x5e,0x4e,0x9c,0x48,0x61,0x2b,0xc0,0x8c,0xeb,0x53,0xa6,0xbb,0x4f,
    0x5e,0xc1,0x76,0x05,0x31,0x96,0xda,0x78,0x72,0x7f,0xad,0xa4,0x9e,0x65,0xd6,0xb7,
    0xd1,0xe5,0xf1,0x58,0x03,0x39,0xc5,0x77,0x35,0xf8,0x7b,0xd6,0x46,0xe4,0x35,0xc4,
    0x5b,0xad,0xb8,0xaf,0x83,0xfb,0x5a,0xc5,0x7d,0x3d,0x78,0xe0,0xbe,0x01,0xec,0x69,
    0xdb,0x63,0x39,0xe7,0x1b,0xc9,0xbd,0x06,0xae,0x1b,0xd4,0x1c,0xbc,0x4a,0xbc,0x4d,
    0x6a,0x0e,0x5e,0x03,0x0f,0x73,0xf0,0x3a,0x58,0x98,0x83,0x2d,0x6a,0x0e,0x44,0xb7,
    0xd9,0xae,0x2d,0xec,0xed,0x66,0xd5,0x9f,0xad,0xe4,0x8e,0xf0,0x33,0x0c,0xc3,0x6d,
    0xfb,0x7b,0xb2,0x9b,0x01,0xef,0x23,0xcf,0x93,0xe4,0xba,0x89,0x5f,0x1f,0x7c,0xc2,
    0x00,0x49,0xae,0x9b,0xce,0x5e,0xfc,0xbd,0xdf,0x6d,0x77,0x17,0x66,0xb9,0x5c,0x77,
    0xa8,0x6d,0x30,0xfe,0xf2,0x5e,0x7f,0x07,0x1e,0x7f,0xa3,0x17,0xdd,0xdb,0x60,0x77,
    0xc1,0x73,0x99,0x4d,0xe1,0x26,0x31,0x3b,0x95,0xdf,0x2d,0x62,0x25,0xd3,0x6c,0x24,
    0xd1,0x5d,0xfb,0x4f,0x27,0xd8,0x0d,0x38,0xcc,0x30,0x3e,0xee,0x6d,0x7c,0x3b,0x39,
    0xb3,0xb2,0x07,0x25,0xc6,0xeb,0x37,0xa6,0xcd,0xd0,0x36,0x7a,0x64,0xa8,0x37,0x99,
    0xd6,0xa3,0x2c,0x72,0xca,0x33,0xf4,0xa8,0xa7,0xf1,0x7e,0xa1,0x47,0x03,0x54,0x8f,
    0x44,0x97,0x6d,0x57,0x1f,0xfc,0xe4,0x19,0x7a,0xd4,0xcf,0x74,0xf7,0x68,0x5b,0x5a,
    0x8f,0x72,0x8c,0xd7,0xeb,0x1e,0xf5,0x37,0x1e,0x0f,0x3d,0x4a,0x12,0x53,0xe2,0x07,
    0xbf,0xde,0x70,0x49,0xa6,0xd9,0x0c,0x50,0x3d,0x4a,0xaa,0x1e,0x55,0x1a,0x1f,0xd7,
    0xf1,0x82,0x6b,0xe8,0x51,0xa9,0xf1,0xfa,0x12,0x78,0x86,0x1e,0x6d,0xa7,0x47,0x31,
    0xea,0x2d,0x4c,0xeb,0xd1,0x20,0x72,0x0e,0x52,0x3d,0x1a,0x62,0xbc,0x5f,0xe8,0x51,
    0x81,0xea,0x91,0xe8,0x72,0xed,0x1a,0x86,0xdf,0x30,0xd5,0xa3,0x7c,0xd5,0xa3,0xed,
    0x69,0x3d,0x1a,0x6e,0xbc,0x5e,0xf7,0x68,0x84,0xf1,0x78,0xe8,0x51,0x21,0x31,0x73,
    0x55,0x8f,0x86,0xc2,0x25,0x99,0x66,0x53,0xa0,0x7a,0x54,0xa8,0x7a,0x34,0xcb,0xf8,
    0xb8,0xc2,0x6b,0x28,0x5c,0x43,0x8f,0xc6,0x1b,0xaf,0x97,0x5e,0xc5,0x88,0x17,0xce,
    0xde,0x16,0xee,0x55,0xb1,0x9b,0xcd,0xac,0xd5,0xe3,0x53,0x68,0xba,0xcf,0xfc,0x4e,
    0xce,0xfc,0x0e,0x75,0xe6,0xdf,0x07,0x0f,0x67,0xfe,0x03,0xb0,0x70,0xe6,0x77,0xab,
    0x33,0x2f,0xba,0x5d,0x76,0xed,0x23,0xef,0x3e,0x75,0x9f,0x7c,0x4c,0xec,0xfd,0x2a,
    0xf6,0x27,0xe0,0x21,0xf6,0xa7,0x60,0x21,0x76,0x93,0x8a,0x2d,0xba,0x03,0x76,0x35,
    0x11,0xfb,0x80,0x9a,0x83,0xcf,0xa8,0x4b,0xbe,0x65,0x4e,0x10,0xeb,0x73,0xf0,0x83,
    0xf4,0x22,0xf8,0x35,0xd1,0x0b,0xb1,0xf9,0x82,0x9c,0xfb,0xb0,0x3f,0x40,0xde,0x66,
    0x95,0x57,0x6c,0x0e,0xd9,0xd5,0x8c,0xff,0x21,0x95,0xf7,0x4b,0x95,0xb7,0xc6,0x7e,
    0x9d,0xc9,0xdd,0xfc,0x35,0xd8,0x6c,0xd3,0xfd,0xad,0x14,0x53,0xef,0x81,0xc3,0xf8,
    0x85,0x15,0xee,0xf4,0x23,0xf8,0x1e,0x76,0xb1,0x7a,0xba,0xbd,0xfa,0x86,0x58,0x47,
    0xf8,0x5e,0xcb,0x50,0xdf,0xa5,0x52,0x53,0xe0,0xd4,0xac,0xf6,0xb7,0x9a,0xdc,0x4d,
    0xf8,0x1f,0xc2,0x76,0x37,0xb6,0xbb,0x14,0xff,0x3d,0xff,0xc1,0xff,0xc3,0x7b,0xf0,
    0xdf,0x09,0xcf,0xbd,0xd8,0xec,0x51,0x3c,0x3f,0xc2,0x67,0xef,0x3d,0x78,0x86,0xdc,
    0xbb,0x15,0xcf,0xb9,0xc6,0x73,0x6d,0xc6,0x7f,0x17,0x39,0x44,0xf7,0x2d,0xfa,0xa3,
    0xee,0x5d,0xe8,0xbf,0x87,0x5b,0xc0,0xc3,0x3c,0x9d,0x60,0x9e,0x8e,0xab,0x79,0xfa,
    0x0e,0x3c,0xcc,0xd3,0x49,0xb0,0x30,0x4f,0xa7,0xd5,0xbe,0x8a,0xee,0x94,0x5d,0x67,
    0xe0,0x76,0x46,0xc5,0xfe,0x81,0xd8,0x67,0x55,0xec,0x73,0xe0,0x21,0xf6,0x8f,0x60,
    0x21,0x76,0xab,0x8a,0x2d,0xba,0xf3,0x76,0x5d,0x20,0xf6,0x05,0xf5,0x9e,0xfe,0x99,
    0xd8,0x17,0xd5,0x7b,0xfa,0x17,0xf0,0x73,0x7c,0xeb,0x5d,0x02,0x5b,0xab,0xf2,0xfd,
    0x0a,0xde,0x40,0xbe,0x36,0x95,0x4f,0x74,0x97,0xed,0x6a,0x23,0xdf,0x65,0xde,0x2f,
    0xd2,0xb7,0x94,0xf1,0x1c,0x5b,0xa2,0xee,0x6f,0xc2,0x60,0xd7,0xc6,0x7e,0x88,0x5d,
    0x8d,0xf1,0x36,0x17,0xf0,0xb9,0xac,0xf8,0xfc,0x06,0x9f,0x09,0x8a,0xcf,0xef,0xe0,
    0x81,0x4f,0xbb,0xe2,0x23,0xba,0x2b,0x76,0xb5,0x93,0xe7,0x8a,0xe2,0x33,0x0d,0x3e,
    0x35,0xea,0x9e,0x0a,0x76,0xed,0x8a,0xcf,0x3c,0xe3,0x6d,0xda,0xf0,0xb9,0xa2,0xf8,
    0xfc,0x01,0x9f,0xe3,0x8a,0xcf,0x9f,0xe0,0x81,0x4f,0x87,0xe2,0x23,0xba,0xab,0x76,
    0x75,0x90,0xe7,0xaa,0xe2,0x53,0x6e,0xfc,0xff,0x45,0xe7,0x99,0xee,0x79,0x0d,0x76,
    0x1d,0x8a,0x4f,0xbd,0xf1,0x36,0xed,0xf8,0x5c,0xc5,0xb6,0x15,0xdb,0xf3,0x9c,0x2b,
    0x99,0x95,0x9f,0xe8,0x77,0x5c,0xe5,0x29,0x33,0xdd,0x78,0x94,0xe6,0xdb,0xaa,0xf2,
    0xd4,0x19,0x9f,0xab,0x03,0x9f,0xf3,0xd8,0x9e,0xc6,0xf6,0x14,0xe7,0x4e,0x6c,0xbf,
    0x27,0x5e,0x0b,0xe7,0x2e,0x8b,0xb3,0x1a,0x4f,0xf3,0x39,0xad,0xe2,0xd7,0x1a,0x9f,
    0xa3,0x15,0x7f,0x89,0x37,0xd5,0x7a,0x5c,0x47,0x77,0xc7,0x4e,0xc9,0x24,0xbb,0xfe,
    0x01,0xc0,0x72,0xa3,0x4b,0x24,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform sampler2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
