// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x0b,0xb8,0x55,0x55,
    0xb5,0xde,0x7b,0x9f,0xbd,0x1e,0x73,0x6d,0x40,0x44,0x1e,0xa2,0xc9,0x43,0x4d,0x45,
    0x01,0x79,0x54,0x68,0x88,0x68,0x58,0x20,0xa9,0x48,0x2a,0x09,0x96,0x88,0xa0,0x09,
    0x1e,0x8e,0x95,0x1c,0xaf,0xa7,0xc0,0xa3,0x24,0xd9,0xc3,0x0e,0x9a,0x9a,0x8f,0xaf,
    0xeb,0xf5,0xab,0x2c,0x4d,0xbd,0x2a,0xa9,0x51,0x81,0x2f,0x92,0x47,0x26,0xf7,0xaa,
    0x69,0xa9,0xd5,0x4d,0x6e,0xc6,0x4b,0x01,0x1f,0x80,0xa0,0xe2,0x5d,0xff,0xfe,0xff,
    0xc1,0x1a,0x6c,0xb9,0xe7,0xfb,0xe6,0xb7,0xce,0xfc,0xff,0x31,0xc6,0x9c,0x73,0xcc,
    0x39,0xc7,0x9c,0x6b,0xee,0xb9,0x9a,0x2a,0x87,0x24,0xa5,0xa6,0x72,0x29,0x2b,0xa5,
    0xa5,0x2b,0x6a,0xa5,0xfa,0xdf,0xbe,0xa5,0x4a,0xa9,0xac,0xe7,0x60,0x3d,0x87,0xea,
    0x39,0x4a,0xcf,0x13,0xf5,0x1c,0x93,0x3f,0x6b,0xa5,0xb8,0x2e,0x3f,0xf6,0x94,0x33,
    0x4e,0x19,0x7c,0xe9,0x9c,0x19,0x83,0x3f,0xf1,0xc9,0x21,0xb0,0xd3,0xa5,0xd4,0x54,
    0xb7,0x07,0x6e,0x9f,0xdc,0x7e,0x94,0x3f,0xab,0x79,0x9a,0x3d,0x6d,0x66,0x0b,0xf0,
    0x49,0x79,0x3a,0x37,0x4f,0xaf,0xe6,0x02,0x5d,0x73,0x1b,0xd5,0xba,0xcd,0x52,0xe9,
    0x04,0xe9,0xd4,0x6d,0xe6,0xe8,0xa4,0x7a,0x19,0xa5,0xd2,0x01,0xca,0x9f,0xab,0xfc,
    0x81,0xf5,0x7c,0x53,0x5d,0xbf,0x24,0x0e,0xff,0x83,0x1b,0x90,0xa7,0x71,0x79,0x89,
    0x97,0x55,0xc8,0x1d,0xc2,0xc7,0x6e,0xac,0x2c,0xac,0xea,0xb0,0x8a,0xb0,0xd4,0x61,
    0x4d,0xc2,0x3a,0x39,0xac,0x2a,0xac,0xab,0xc3,0x22,0x61,0xdd,0x1d,0x16,0x0b,0xdb,
    0x5f,0xf5,0xb4,0x32,0x50,0xcf,0xce,0xb9,0xc2,0xc1,0xa5,0xa2,0xde,0xc8,0xf7,0x77,
    0xf9,0x95,0x0d,0xfc,0x4a,0xf1,0x65,0xd9,0x42,0xbe,0xb7,0xb8,0x67,0x22,0xb6,0xb9,
    0xb7,0xb8,0x31,0x81,0x7a,0xfb,0xe5,0xa5,0xa1,0xbc,0xfe,0x39,0x86,0x76,0xe0,0xff,
    0x1e,0xb9,0x3c,0xea,0xd5,0x4f,0xb6,0x7a,0xe5,0xf9,0xa4,0xc4,0xba,0x1a,0x5f,0x13,
    0x5f,0xaa,0x3f,0xab,0xf5,0xb6,0x27,0xf2,0x39,0xe4,0xf7,0xd5,0xff,0x15,0xf1,0xdd,
    0xc4,0xef,0xab,0x7c,0x2f,0xe5,0x61,0xb3,0x67,0x5e,0xf2,0x41,0xb2,0x07,0xdd,0x3e,
    0xf9,0x13,0xf9,0x26,0xe5,0x0f,0x97,0xad,0x26,0xe9,0x9e,0x20,0xdd,0xa4,0xee,0x4b,
    0x8e,0x33,0xc8,0x8d,0x91,0xbd,0xaa,0xe4,0xce,0x52,0xfd,0xa1,0x3f,0x52,0xf9,0x49,
    0xc2,0x8e,0x52,0x1b,0xa7,0xa8,0x2f,0x8d,0x3f,0xd7,0xf1,0x28,0x73,0xaa,0x6b,0xe3,
    0x79,0xe2,0x6a,0x8e,0x9f,0xae,0xf2,0x2c,0x3f,0xb3,0x3e,0x8e,0x0b,0xfb,0xcd,0x8e,
    0x47,0xbe,0xa5,0xa1,0xfc,0x56,0xf9,0xc8,0xf4,0xdb,0x1a,0xf8,0x76,0xe7,0x87,0xef,
    0xaa,0x6c,0x5f,0x5e,0x87,0xea,0x6f,0xf9,0x85,0x1a,0x73,0x96,0xbf,0x4e,0x63,0x6b,
    0x60,0xee,0x2d,0xe8,0x5f,0xaf,0x36,0x75,0x48,0xf6,0x3a,0x27,0x7b,0x43,0x9e,0x3e,
    0x74,0xf9,0xdb,0x1b,0xea,0xf6,0x53,0xd5,0xc5,0xea,0xf6,0x48,0x9e,0x06,0xb9,0xfc,
    0x52,0x95,0x65,0xf9,0x65,0x1a,0xeb,0x96,0x5f,0xe5,0xea,0x86,0xfc,0xea,0x12,0xe7,
    0x84,0xe5,0x9f,0xcf,0x53,0xdf,0x3c,0x7d,0x2c,0xcf,0xff,0x33,0x7f,0x8e,0x51,0x1d,
    0x8d,0x7f,0xad,0x1e,0x2f,0xd8,0x16,0x70,0xff,0x92,0xff,0x56,0xab,0x1f,0x5f,0x73,
    0xb2,0x6b,0x35,0x16,0x2c,0xbf,0x2e,0x4f,0xc1,0xe5,0xd7,0x6b,0xbe,0x9a,0xad,0x0d,
    0xb2,0xb5,0x56,0xb2,0xeb,0x9d,0xec,0x46,0x8d,0x35,0x93,0x7d,0x5d,0xfd,0xd8,0x2c,
    0x6e,0xbd,0xe3,0xde,0x10,0xd7,0xae,0x7a,0x79,0x3b,0x9b,0xd4,0x7f,0x26,0xbb,0xd9,
    0xd5,0x7f,0xa3,0x78,0x93,0xdd,0x92,0xa7,0xcc,0xc9,0xbe,0xe9,0xea,0x37,0x45,0xbc,
    0x71,0x6f,0xa9,0xbc,0xb5,0xb2,0xe3,0xb9,0xb7,0xa5,0xd7,0xbc,0x17,0xee,0x1d,0xd5,
    0xd5,0xca,0x5f,0xe7,0xb8,0xad,0x0d,0x6d,0xf4,0xdc,0x36,0xd7,0xc6,0x46,0x6e,0xbb,
    0xd3,0x5b,0xdb,0xc0,0xbd,0xab,0xba,0xb4,0x3b,0xce,0xda,0xbb,0x43,0xf3,0xcc,0x64,
    0x77,0x0a,0x6b,0x91,0x8e,0xb7,0xf3,0x9e,0xf3,0xef,0x46,0xf9,0xc3,0xb8,0xf7,0x5d,
    0x7b,0xd7,0xee,0xe6,0xf6,0xab,0x8f,0xa7,0x0f,0x34,0x66,0x36,0xa8,0x0f,0xdf,0x50,
    0x1f,0xbc,0x29,0x1f,0xbe,0x2d,0x9f,0x6c,0x55,0x1b,0xb7,0xab,0xce,0x3b,0x55,0xe6,
    0xfb,0x8a,0x03,0x98,0xa0,0x18,0x0f,0xff,0x74,0xf5,0xef,0x52,0x2e,0xe6,0x0e,0x62,
    0xd7,0x60,0xae,0x37,0xa3,0x31,0x6f,0x47,0x97,0x39,0x16,0x9b,0x1c,0x7f,0xb5,0xd6,
    0x23,0xcb,0xdf,0x5f,0xcf,0x5f,0x39,0xda,0xf2,0x8b,0xeb,0xf9,0xf6,0x93,0x2c,0xbf,
    0x24,0xcf,0x5f,0xd3,0xf3,0xd6,0xe3,0x2d,0xbf,0x34,0xcf,0xff,0xe4,0xb3,0x3d,0x77,
    0xcb,0x3f,0x9a,0xe7,0x5f,0xb8,0x7c,0xfd,0xa8,0x81,0x79,0x49,0x88,0x9f,0x8f,0x95,
    0xa9,0x03,0x39,0x70,0x26,0xf7,0x4c,0xfe,0xff,0x25,0xdd,0x9a,0x46,0x8f,0x54,0x3c,
    0xc3,0x5a,0x58,0x76,0xf5,0xd8,0x55,0x2f,0xf7,0x1f,0x27,0xd8,0x9c,0xaf,0x56,0xd8,
    0x56,0xcb,0x0f,0xaa,0x14,0x73,0x16,0xf9,0xd3,0xb5,0x86,0x1d,0x99,0xb7,0x0e,0x71,
    0xb8,0x35,0xcf,0xf7,0xc9,0x67,0x9a,0xad,0x6d,0xff,0x5f,0x82,0x1f,0xff,0xad,0xc2,
    0x39,0x09,0xd9,0x91,0xca,0x5f,0x2e,0x0c,0x7c,0x9b,0xfe,0x8f,0xeb,0x6b,0x35,0xed,
    0x7f,0xbb,0x52,0x94,0xfd,0xbd,0x0a,0x62,0x45,0x91,0xff,0x7e,0xa5,0x88,0x37,0xc8,
    0x5f,0x5b,0xb1,0x39,0x1e,0xd7,0xd7,0x80,0x1f,0x54,0xa8,0x03,0xb9,0x6b,0x2b,0x45,
    0xdf,0xdd,0x58,0xd9,0x33,0x66,0xdf,0x52,0xe1,0x3a,0x65,0xf9,0x3b,0x2a,0xdc,0x47,
    0x58,0xfe,0x9e,0x0a,0xd6,0xcd,0xa2,0x9c,0xa7,0x2b,0x45,0xdc,0xfa,0x40,0xed,0xee,
    0x70,0xf2,0xbb,0x2a,0xa5,0xfa,0x7a,0x67,0xf9,0x0f,0x2b,0x5c,0xeb,0x2c,0x8f,0x81,
    0x31,0xc0,0xe5,0xcb,0x4d,0xdc,0xdf,0x0c,0xcc,0xad,0xc3,0x5e,0xa5,0xa9,0x98,0x33,
    0x9b,0x14,0x47,0x61,0x13,0x76,0xa0,0x0b,0x79,0xf8,0xab,0xda,0xc4,0xbe,0x82,0x0e,
    0xda,0x8c,0x71,0x77,0x4c,0x13,0xe7,0x91,0x25,0xc3,0x8f,0x6d,0xe2,0x98,0xb5,0x64,
    0x65,0x5f,0xd1,0xc4,0xdd,0x98,0xe5,0xaf,0x6a,0xe2,0x82,0x64,0xf9,0x67,0x9b,0xb8,
    0x87,0xb0,0xfc,0x2b,0x79,0xbe,0x9b,0x6f,0x5b,0x9e,0xef,0x2c,0x5f,0xfc,0xac,0xca,
    0xfa,0x74,0xd4,0xcb,0x8d,0xea,0xff,0xdf,0x59,0xe5,0xfc,0x9c,0xe2,0xb0,0x9f,0x57,
    0x39,0x97,0x6f,0x71,0x7d,0xf2,0x8b,0x2a,0xf7,0x00,0x26,0x73,0x57,0x95,0x31,0x00,
    0xb8,0xc9,0xdc,0x5d,0xc5,0xb8,0x2b,0x64,0x7e,0x59,0x65,0xf9,0x77,0x3b,0x99,0x7b,
    0xf2,0xff,0x8f,0x73,0x32,0xf7,0x56,0x59,0xe7,0x7b,0x9c,0xcc,0x7d,0xf9,0xff,0xa7,
    0x3b,0x99,0xff,0xac,0x72,0x2d,0xbb,0xcf,0xc9,0xdc,0x5f,0xe5,0xde,0xca,0xf2,0x0f,
    0xe4,0xf9,0x59,0x4e,0xe7,0xc1,0x2a,0x65,0x1e,0x70,0x3a,0x8b,0xf2,0xff,0x8f,0x76,
    0x3a,0xbf,0xca,0xf3,0xbf,0x76,0x3a,0x0f,0x55,0x29,0x03,0x1c,0x7d,0x0d,0x7f,0x3d,
    0x5c,0xa5,0x8f,0xe0,0x13,0xb4,0x19,0x6d,0x42,0x9d,0x51,0x27,0x94,0x01,0x1d,0xf4,
    0xf5,0x62,0xf9,0x16,0x3a,0x88,0x31,0x6f,0xe4,0xcf,0x13,0xb5,0x5e,0xf7,0xce,0x67,
    0x4d,0xa6,0xfd,0x5e,0x54,0xda,0xf3,0x4f,0x61,0x27,0x1f,0xcf,0x4d,0xa5,0x5a,0x4e,
    0x42,0xae,0xbe,0x7f,0x93,0x20,0xb0,0x91,0xca,0x77,0x16,0x06,0x7b,0xcb,0x65,0xaf,
    0xdc,0x60,0xcf,0xf6,0xc3,0xb0,0xb1,0x42,0xf2,0xcb,0x65,0x03,0xf9,0x95,0x51,0x11,
    0xe7,0xa0,0xff,0xc7,0xc8,0xc6,0x36,0xe7,0x24,0xf6,0xa5,0xc0,0xda,0xb4,0xf7,0x31,
    0xdf,0xd4,0x6a,0x1c,0x23,0x7e,0x9c,0x74,0xaa,0x71,0xec,0xb4,0x3a,0xac,0x73,0x8d,
    0x73,0xa3,0xdd,0xed,0x71,0xba,0xd4,0xb8,0x97,0xf1,0xc9,0xc6,0xfd,0x3e,0x4e,0xbe,
    0xdd,0xe1,0x5d,0x9d,0xed,0x56,0x87,0xef,0x5b,0xe3,0xb8,0xb4,0x64,0x78,0xb7,0x1a,
    0xe3,0x86,0x25,0x6b,0xcf,0x7e,0x35,0x8e,0xf7,0x8e,0xdd,0xe3,0x9e,0xf2,0xdd,0x6b,
    0x5c,0x93,0x2c,0x59,0xbc,0xed,0x51,0x7f,0x9f,0x3a,0xe1,0x84,0x72,0xde,0x1f,0x90,
    0xfb,0x78,0x0d,0x3e,0x6e,0xaa,0xb7,0xe3,0x54,0xf7,0xff,0xbc,0xfc,0xff,0x4f,0xe5,
    0x6d,0xae,0x68,0xff,0xa7,0xb0,0x91,0xaf,0x4f,0x95,0x7a,0x1f,0x8f,0xd4,0xba,0xb4,
    0x26,0x70,0x5c,0x8c,0x54,0x3c,0x58,0x10,0xef,0x99,0xff,0x91,0xcb,0x63,0x0c,0xdd,
    0xe7,0xf2,0xe8,0x97,0xa1,0x51,0x91,0xc7,0xbc,0xbe,0x53,0xf9,0xed,0x79,0x69,0xab,
    0xd5,0x97,0xef,0xe5,0xff,0x63,0x0f,0xf9,0x5f,0x11,0xcb,0xc7,0x73,0x94,0xf6,0xe9,
    0x2f,0x46,0xdc,0x63,0x4f,0xc8,0xb5,0x10,0x43,0xff,0x1c,0x11,0x7b,0x31,0x2a,0xc6,
    0xdf,0x5c,0xbd,0x4f,0xfc,0x25,0x22,0x7f,0xb5,0xfa,0xf2,0xe5,0x88,0x18,0xfa,0xfe,
    0xc4,0x1c,0xc3,0xfa,0xf4,0x4a,0xc4,0x3d,0x39,0xca,0x1b,0xa5,0x31,0xf4,0xd7,0x88,
    0xf8,0x93,0xb9,0x0c,0xf2,0x7f,0x8b,0x88,0x4d,0x97,0x6d,0xcc,0xb5,0xbf,0x47,0xc4,
    0x57,0x48,0xe6,0x55,0xc9,0xcc,0x74,0x32,0x6b,0x22,0xe2,0x90,0x41,0xfe,0x9f,0x11,
    0xf5,0xb0,0xe7,0xb8,0x5a,0xd8,0x6b,0x11,0xfb,0x0b,0xdc,0x44,0x61,0x6b,0x23,0xd6,
    0xb5,0xbe,0x62,0x0b,0x5b,0x17,0x11,0x87,0xfc,0x17,0x72,0x04,0xed,0xf9,0x7e,0x46,
    0xdc,0x64,0xad,0x9c,0x8d,0x2a,0xa7,0xd5,0x95,0xf3,0xba,0xf2,0x1b,0x5d,0x39,0x9b,
    0xa4,0x5b,0x76,0xe5,0x6c,0x8e,0x88,0xbf,0xee,0xca,0xe9,0xc8,0x88,0xa3,0xbc,0xb2,
    0x2b,0xe7,0xad,0x88,0x6d,0x6c,0xaf,0xef,0xc5,0x89,0xbd,0x23,0x0c,0x65,0x9d,0x2e,
    0xbf,0x6f,0x8d,0x28,0x0b,0xee,0x4a,0x61,0xdb,0x23,0xda,0x05,0x87,0xbe,0xc0,0x5a,
    0xbc,0xae,0xca,0xf5,0xb9,0x5d,0x7d,0x51,0xdf,0x47,0x57,0x89,0x9b,0xcc,0x06,0xc9,
    0x34,0x3b,0x99,0x8d,0x55,0xe2,0x56,0xde,0xeb,0x55,0xea,0x01,0xbf,0x3f,0xc7,0x10,
    0xbb,0x36,0x55,0x59,0x26,0xb8,0xdb,0x72,0x3d,0xc4,0xb2,0xcd,0x86,0xe7,0xe3,0xed,
    0x4d,0x0d,0xfa,0x9d,0x39,0x07,0x7c,0x4b,0x9e,0x80,0x61,0xfc,0xe1,0xff,0x1d,0xf9,
    0x73,0xb5,0xc6,0x23,0xf0,0x65,0x2a,0x6b,0x9b,0xec,0x22,0x76,0xac,0x10,0xb6,0x53,
    0x18,0x62,0x87,0xf9,0xfa,0x83,0x2a,0xf1,0x92,0xeb,0x93,0x5d,0x55,0xb6,0x03,0x9c,
    0xc9,0x61,0xb2,0xed,0xac,0xee,0xd9,0x27,0xe5,0x88,0xb2,0xa5,0xa8,0xd0,0x8d,0x34,
    0x6e,0x4a,0x51,0x21,0x97,0x46,0xc4,0x61,0xaf,0x3e,0x96,0xf3,0xff,0xbb,0x28,0xce,
    0x9a,0xfd,0xae,0x11,0xeb,0xec,0xed,0xef,0x17,0xd1,0x5f,0xbe,0x1f,0xbb,0x47,0xc4,
    0xfd,0x18,0xea,0x11,0x51,0xbf,0xbb,0xb3,0xd7,0x4b,0xf6,0xfc,0x58,0xdd,0x3f,0xa2,
    0x6c,0x2f,0xd7,0xb7,0xbd,0x23,0xf6,0x5b,0xab,0xeb,0xb7,0x03,0x22,0xe2,0xa6,0x77,
    0x60,0x44,0x5d,0xe0,0x33,0x72,0x19,0xac,0x1d,0x1f,0x53,0x1b,0xa6,0xe6,0x32,0x88,
    0x53,0x07,0x09,0x3b,0xd0,0xd9,0xee,0x23,0xdb,0xab,0x9d,0xed,0xbe,0x11,0xf1,0x5f,
    0xe6,0x32,0xe8,0xeb,0x7e,0x11,0xb1,0x29,0x8a,0x35,0x07,0x47,0x45,0x7f,0x83,0xeb,
    0x9f,0xa7,0x23,0xd4,0xbf,0x47,0xa8,0x7d,0x98,0xd7,0xc7,0xc6,0x2c,0xb3,0x5c,0x1f,
    0xcf,0x8c,0xff,0x63,0x62,0xe2,0x3e,0x3d,0xa9,0xfa,0x9d,0x14,0x93,0xbf,0x5e,0xf3,
    0x04,0xd8,0xd8,0x98,0x78,0x97,0x5a,0x61,0xf7,0xe4,0x98,0x38,0xfe,0x7e,0x2f,0x6c,
    0x7c,0x4c,0x1c,0xef,0xcc,0x26,0x77,0x8a,0xe4,0xca,0x4e,0xee,0xd4,0x98,0x38,0xde,
    0x5d,0x9f,0x12,0x76,0x5a,0x4c,0x7d,0x70,0xa6,0x7b,0xba,0x74,0x2b,0x4e,0x77,0x62,
    0x4c,0xbc,0xc3,0xe9,0x7e,0x21,0xa6,0xfe,0x44,0xa7,0x7b,0xa6,0x74,0x9b,0x9c,0xee,
    0x59,0x31,0xf1,0xa9,0x4e,0x77,0x52,0x4c,0xfd,0xb3,0x9c,0xee,0x71,0xf2,0x59,0xc9,
    0xf9,0xec,0x9c,0x98,0xb8,0x4f,0xe6,0xb3,0x2f,0xc5,0xe4,0xbd,0xcf,0xa6,0xc6,0xc4,
    0xbd,0xcf,0xa6,0xc5,0xc4,0xbd,0xcf,0xce,0x8f,0x89,0x7b,0x9f,0xcd,0x90,0x9c,0xf7,
    0xd9,0x05,0x31,0x71,0xef,0xb3,0x0b,0x63,0xea,0x5f,0xe0,0xea,0x7e,0x91,0x74,0xbd,
    0xcf,0x66,0xc6,0xc4,0xbd,0xcf,0x66,0xc5,0xd4,0x9f,0xe9,0x74,0x9b,0xa5,0xeb,0x7d,
    0x36,0x3b,0x16,0xee,0x74,0x5b,0x62,0xea,0x83,0x43,0xcc,0xc2,0x3a,0x76,0x7c,0x4c,
    0x5f,0x82,0x43,0xac,0x39,0x58,0x63,0xb1,0xbf,0x1b,0x8b,0xbb,0x22,0xfa,0xb5,0xc9,
    0xf9,0x35,0x8d,0x89,0xfb,0x64,0x7e,0x0d,0x31,0x79,0xef,0xd7,0x4e,0x31,0x71,0xef,
    0xd7,0x2e,0x31,0x71,0xef,0xd7,0x7d,0x62,0xe2,0xde,0xaf,0xfb,0x4a,0xce,0xfb,0xb5,
    0x5b,0x4c,0xdc,0xfb,0x75,0xbf,0x98,0xfa,0xdd,0x9c,0x6f,0x7a,0x48,0xd7,0xfb,0xb5,
    0x67,0x4c,0xdc,0xfb,0xb5,0x57,0x4c,0xfd,0x9e,0x4e,0xb7,0xb7,0x74,0xbd,0x5f,0x0f,
    0x88,0x89,0x7b,0xbf,0x1e,0x18,0x53,0xff,0x00,0xa7,0x5b,0xd6,0x58,0xac,0x38,0x9f,
    0xf5,0x8b,0x89,0xfb,0x64,0x3e,0xeb,0x1f,0x93,0xf7,0x3e,0x3b,0x34,0x26,0xee,0x7d,
    0x76,0x58,0x4c,0xdc,0xfb,0xec,0xf0,0x98,0xb8,0xf7,0xd9,0x00,0xc9,0x79,0x9f,0x1d,
    0x19,0x13,0xf7,0x3e,0x3b,0x2a,0xa6,0xfe,0x91,0xae,0xee,0x83,0xa4,0xeb,0x7d,0x36,
    0x38,0x26,0xee,0x7d,0x76,0x74,0x4c,0xfd,0xc1,0x4e,0x77,0xa8,0x74,0xbd,0xcf,0x86,
    0xc5,0xc4,0xbd,0xcf,0x86,0xc7,0xd4,0x1f,0xe6,0xc6,0x62,0x53,0x4c,0x5f,0x0e,0x6f,
    0x18,0x8b,0x78,0x6e,0xd5,0xbe,0xab,0x67,0x8d,0x63,0x16,0xb1,0x12,0xf2,0x18,0xa7,
    0xc7,0xe7,0xa5,0x0d,0xd5,0xfa,0x65,0xf5,0x78,0x30,0xa6,0xac,0xed,0x1b,0x80,0x2d,
    0x8a,0x89,0x63,0x3f,0x8e,0x18,0x8e,0x77,0xd7,0x87,0x62,0xee,0x0d,0xc1,0x59,0x0c,
    0x7f,0x38,0x26,0x6e,0xfb,0x8d,0x47,0x62,0x62,0xad,0x6e,0x9d,0xfa,0x75,0x4c,0xbc,
    0x45,0xfb,0x2e,0xd8,0x5f,0x1c,0x13,0xbf,0x47,0xb1,0xff,0x77,0x31,0x63,0x7f,0x8b,
    0x62,0xff,0x13,0x71,0x11,0xfb,0xc1,0x2d,0xc9,0x13,0x30,0xb4,0x71,0x49,0x5c,0xd4,
    0xf3,0x31,0xd5,0x13,0xe7,0x94,0xb6,0x8e,0x3c,0x1e,0x13,0x9f,0x5a,0xa2,0x6f,0x4c,
    0x0f,0x4f,0xf8,0x06,0x32,0x4f,0xc6,0x2c,0x13,0xfe,0x7a,0x5c,0xf6,0x51,0xee,0x65,
    0x69,0x51,0x2e,0x64,0x96,0xe5,0xe9,0x39,0xe9,0xe3,0xf9,0x74,0xde,0x22,0x94,0xfb,
    0x82,0xca,0xbd,0x43,0x6b,0x9a,0xed,0x27,0x5f,0x8c,0xc9,0x59,0xfe,0x25,0xc9,0xfd,
    0x21,0xcf,0x21,0xff,0x72,0x4c,0x6c,0xa9,0xde,0x3d,0xcc,0xde,0xdf,0x24,0x77,0x4f,
    0x83,0xbd,0xbf,0xc7,0xe4,0x4c,0x7f,0x8d,0xf4,0x57,0x35,0xe8,0xbf,0x26,0xfd,0x4d,
    0xa5,0x3d,0xf5,0xff,0x15,0x93,0x33,0xfd,0x0d,0xd2,0x9f,0x22,0x7d,0x5b,0xd7,0xdf,
    0x88,0x59,0x77,0xd4,0xcf,0xb0,0x2d,0x31,0xcb,0x5f,0xe3,0xb0,0xb7,0x63,0xda,0xdc,
    0x10,0x17,0x7d,0xb9,0x35,0xa6,0xfe,0xbd,0xf2,0xff,0xb6,0x98,0x18,0xce,0x44,0xe0,
    0xd3,0x56,0xe7,0x53,0x70,0xdb,0x31,0x8e,0x13,0xfa,0x14,0x4f,0xb3,0xf3,0x85,0x84,
    0x65,0x9a,0x9d,0x33,0x12,0x62,0x66,0x67,0x8e,0xb3,0x03,0xee,0xcc,0x3c,0x2d,0x97,
    0x9d,0xe5,0xce,0xce,0xca,0x84,0xf5,0x34,0x3b,0xab,0x12,0x62,0x66,0xe7,0x52,0x67,
    0x07,0xdc,0x1f,0xf2,0x74,0x6e,0x4a,0x3b,0x78,0x9e,0xae,0xf7,0xb5,0xf3,0x53,0xfa,
    0xe4,0xef,0x6a,0xb3,0xf9,0x74,0x46,0xca,0xf1,0x6b,0x72,0x17,0xa5,0xf4,0xdb,0x1a,
    0xf9,0xc5,0xf0,0x99,0x29,0x65,0x2d,0x61,0x8f,0x06,0x7c,0x56,0x4a,0x0e,0x7a,0x57,
    0x0a,0xbb,0x38,0x65,0x79,0xe0,0x7e,0x2f,0xac,0x25,0x25,0x8e,0xf7,0xd5,0x65,0xc2,
    0xbe,0x26,0x0c,0xef,0xaa,0x4f,0x09,0xfb,0x7a,0x4a,0x59,0x70,0x18,0xef,0x97,0xaa,
    0x2d,0x68,0x97,0x8d,0x8f,0x67,0x12,0x8e,0x0f,0x9c,0xdd,0xac,0x75,0xe3,0x63,0x75,
    0x42,0xce,0xe4,0x9e,0x95,0x1c,0xde,0x73,0xbd,0xdc,0x73,0x09,0x39,0x7b,0xdf,0x7a,
    0x41,0x72,0x38,0x47,0xd9,0x3d,0xf6,0x13,0xe2,0x16,0x0b,0xfe,0x9c,0x10,0xc3,0xd9,
    0xd4,0x53,0xc2,0xfe,0x92,0xd0,0xd6,0x9f,0x5d,0x99,0xaf,0xc8,0xd6,0x46,0x8d,0x49,
    0xb3,0xf7,0xd7,0x84,0x9c,0xc9,0xfd,0x4f,0x52,0x8c,0xf1,0x56,0x27,0xf7,0x8f,0x84,
    0xdc,0xef,0x55,0xc6,0xab,0x09,0xb1,0xf6,0x52,0x51,0xee,0x9a,0x84,0xf6,0x5e,0x75,
    0x6d,0x78,0xcd,0xd9,0xdb,0x3d,0x5f,0x12,0xe2,0xd6,0x86,0xb5,0x09,0x31,0x9c,0xb3,
    0x99,0xad,0x75,0x09,0xed,0xad,0x4d,0x0a,0xbd,0xd7,0x13,0xc6,0x45,0xab,0xeb,0x66,
    0xd9,0x6e,0x6d,0x98,0x8f,0x5b,0x12,0x72,0x56,0xd7,0x37,0x13,0x62,0x2d,0xae,0xae,
    0x6f,0x25,0xb4,0x07,0xce,0x62,0xf4,0x3b,0x09,0x63,0x74,0xc9,0xcd,0xf9,0xad,0x09,
    0xf1,0x0f,0x1b,0xfa,0x74,0x5b,0x42,0xce,0xe4,0x76,0x48,0x0e,0x7d,0xbf,0xd1,0xc9,
    0xed,0x4c,0xc8,0x99,0xdc,0x07,0x92,0xb3,0xdf,0x10,0x4c,0x6e,0x57,0x42,0xce,0xe4,
    0xca,0x29,0xe5,0xee,0x69,0x18,0x23,0x95,0x94,0x9c,0xc9,0x45,0x92,0xdb,0x51,0xda,
    0x53,0x2e,0x4e,0xc9,0x99,0x0f,0xd2,0x94,0xe3,0xd0,0xaf,0x19,0x99,0xb0,0x66,0xe7,
    0x97,0x5a,0x4a,0xd9,0xcc,0xe9,0x76,0x4e,0xe9,0x2f,0xaf,0xbb,0x8f,0x30,0xaf,0xdb,
    0x35,0xa5,0xec,0x3e,0x4e,0xb7,0x5b,0x4a,0x5f,0x79,0xdd,0xee,0xc2,0xbc,0x6e,0x8f,
    0x94,0xb2,0xdd,0x9d,0x6e,0xaf,0x94,0x63,0xb9,0xc5,0xe9,0xf6,0x16,0xb6,0xd6,0xe9,
    0x1e,0x90,0x52,0xb6,0xb7,0xd3,0xfd,0x58,0x4a,0xdf,0x7b,0xdd,0x3e,0xc2,0xbc,0x6e,
    0xdf,0x94,0xb2,0x7d,0x9c,0x6e,0xff,0x94,0xfd,0xe1,0x75,0x0f,0x11,0xe6,0x75,0x0f,
    0x4d,0x29,0x7b,0x88,0xd3,0x3d,0x2c,0xe5,0xd8,0xf5,0xed,0x3d,0x42,0x98,0x6f,0xef,
    0x80,0x94,0xb2,0x47,0x38,0xdd,0xa3,0x52,0xf6,0xaf,0xd7,0x1d,0x24,0xcc,0xeb,0x0e,
    0x4e,0x29,0x3b,0xc8,0xe9,0x0e,0x49,0xd9,0xe7,0x5e,0x77,0x98,0x30,0xaf,0x3b,0x3c,
    0xa5,0xec,0x30,0x17,0x83,0x47,0xa4,0xec,0x77,0xf8,0x71,0x80,0xc3,0x47,0xa6,0xec,
    0x53,0xf8,0x08,0x65,0xce,0x57,0x2c,0x1c,0x95,0x92,0x1b,0xe1,0x64,0x4f,0x4c,0xd9,
    0x87,0xf0,0xc9,0x70,0x27,0x3b,0x26,0x25,0x07,0x59,0xdb,0xe3,0x9c,0x94,0x72,0x8f,
    0x33,0xd5,0xbd,0xa7,0x7e,0x36,0x25,0x6e,0xf6,0xc6,0xa6,0xc4,0x2c,0x59,0x5c,0x1f,
    0x97,0xb2,0xfc,0xb1,0xce,0xde,0xc9,0xb2,0xd7,0xe6,0xec,0x8d,0x4f,0x89,0x9b,0xbd,
    0x53,0x52,0x62,0x96,0xcc,0xde,0xa9,0x29,0xeb,0x78,0x8a,0x5b,0x27,0x26,0xa6,0x2c,
    0xe7,0x54,0x87,0x9d,0x91,0x12,0xef,0xea,0xd6,0x89,0xb3,0x52,0xe2,0xc0,0x4c,0x6e,
    0x92,0xda,0x0a,0xae,0x53,0x29,0xad,0x63,0x67,0xa7,0xdc,0xf7,0xe1,0x37,0x5c,0xf0,
    0xf8,0xad,0xe0,0xd8,0xa6,0x3d,0xd7,0x11,0x3c,0xb1,0x6f,0x82,0xfc,0xc0,0x1a,0xcf,
    0x27,0xb1,0x4e,0x42,0x17,0x6b,0x8c,0x71,0x07,0xd7,0xb8,0x16,0x81,0x83,0x0c,0xb8,
    0xbb,0xf3,0x36,0x62,0x0d,0xfe,0x46,0x8d,0xeb,0x30,0x7e,0x1b,0xc2,0xef,0x37,0xb0,
    0x3f,0x47,0xf6,0xcf,0x74,0xb1,0xe5,0x8b,0x49,0xb1,0xaf,0x6a,0x76,0x31,0xe3,0xec,
    0x84,0x9c,0xc9,0x9d,0x23,0xb9,0xa5,0x0d,0x6b,0xc6,0x97,0x12,0x72,0x36,0xf6,0xbe,
    0x9c,0x10,0xc3,0x7c,0xb1,0xb8,0x7f,0x9e,0x74,0xf1,0x1b,0x90,0xed,0x23,0xa7,0x25,
    0xc4,0xdb,0x9c,0xad,0xf3,0x13,0xe2,0x36,0x3e,0xa7,0x27,0xb4,0x77,0xbe,0xab,0xc7,
    0x85,0xb2,0x75,0x63,0x65,0xcf,0x7a,0x7c,0x25,0x21,0x67,0x65,0xce,0x92,0xdc,0x42,
    0xb7,0xc7,0xbe,0x38,0x21,0xde,0xe1,0xf4,0x9a,0x13,0xe2,0x56,0xe6,0xec,0x84,0xb6,
    0x9a,0x5d,0x99,0x5f,0x75,0xeb,0x96,0xf7,0xd1,0xd7,0x12,0x72,0x26,0x37,0xc7,0xad,
    0xab,0x5e,0xae,0x35,0x21,0x67,0x72,0x97,0x4b,0xae,0xbd,0x41,0xae,0x2d,0x21,0x67,
    0xf5,0x9d,0x2b,0xb9,0xe9,0x3a,0x6f,0x02,0x36,0x3f,0xe1,0xde,0x7b,0x91,0xf6,0x88,
    0xc0,0xbe,0x95,0x50,0x16,0x9c,0x9d,0x4b,0x2d,0x48,0xd8,0x87,0xf8,0x6d,0xc9,0xb0,
    0x6b,0x12,0xfa,0x14,0xbf,0x2f,0xd9,0xfe,0xf2,0x3b,0x09,0x65,0xc1,0x19,0xf6,0xbd,
    0x84,0xf8,0x6c,0x67,0xef,0xda,0x84,0xed,0xf5,0xf6,0x3a,0x12,0xb6,0xcd,0xdb,0x5b,
    0x98,0x50,0xb6,0xc3,0xd9,0xbb,0x3e,0x21,0x8e,0xf6,0xdd,0xaf,0x3d,0xe2,0x0f,0x13,
    0x96,0x73,0xbd,0xc6,0x6c,0xfd,0x2e,0x44,0x42,0xbc,0x4d,0x67,0xcf,0xd6,0xbe,0x9b,
    0x12,0xb6,0x11,0x3c,0xde,0xa7,0x70,0x9e,0x8e,0xdf,0xe7,0x6c,0xce,0xdf,0x9c,0xf0,
    0x8c,0x1d,0x72,0x36,0xe7,0x6f,0x49,0x88,0xdb,0x7a,0x7e,0x9b,0x5b,0xcf,0xad,0x5e,
    0x3f,0x4e,0x38,0x8e,0xca,0xee,0x5c,0xfb,0xdf,0x13,0xca,0xfe,0xd8,0xf5,0xc3,0xed,
    0x09,0xf1,0xdb,0x5d,0x5f,0xfd,0x47,0x42,0xdc,0xf4,0x7e,0x2a,0xbd,0xb2,0x3b,0xff,
    0xfe,0x59,0x42,0xdc,0x8f,0xf1,0x3b,0x13,0xe2,0xf6,0x1e,0xf6,0x8b,0x84,0xb6,0x76,
    0xe8,0x3d,0x6c,0x51,0x52,0xec,0x95,0xc1,0xdd,0x95,0xa7,0xfb,0xb4,0xe7,0xc6,0xd3,
    0x62,0xd8,0x83,0xea,0xdf,0xe9,0xea,0x27,0xcc,0xef,0x45,0x92,0xbb,0xcb,0xc9,0xdd,
    0xab,0x7e,0x6b,0x95,0xff,0xbd,0xdc,0x22,0x17,0x4b,0x7a,0xd5,0x68,0x13,0x65,0xdc,
    0xab,0x72,0x2d,0x2e,0x3e,0x92,0x90,0xc7,0xef,0x32,0xd6,0xf7,0x8b,0xb5,0xae,0xa1,
    0x3d,0xf3,0x85,0xfd,0x46,0xf3,0x7e,0xb1,0x1b,0x37,0x4b,0x12,0xe2,0xb7,0xb8,0x3a,
    0x3d,0x9a,0x10,0xb7,0x64,0xf1,0xf2,0xb1,0x84,0x65,0x81,0xb7,0x78,0xf9,0x44,0x52,
    0xc4,0x4b,0xf0,0x3e,0x5e,0x5a,0x3c,0x9b,0xe3,0xe2,0xe5,0x51,0x35,0xc6,0x4c,0xc4,
    0x50,0xe8,0xfa,0x36,0xf6,0xaf,0x31,0x66,0x5e,0xaa,0x78,0x69,0x1c,0xfa,0xe1,0x80,
    0x1a,0x63,0x26,0x38,0xc4,0xcc,0x45,0xf2,0x55,0xab,0xca,0xd8,0xee,0xf6,0x9a,0x3b,
    0xe3,0x22,0x16,0xfa,0x7d,0xf1,0x7b,0x31,0x39,0x93,0xdb,0xe5,0xde,0x59,0xbd,0xdc,
    0x87,0x31,0x39,0x8b,0x99,0x38,0x20,0xff,0x50,0x7b,0x57,0x8b,0x43,0xe5,0x84,0xf6,
    0x4a,0x2e,0x6e,0x54,0x15,0x0f,0x96,0x35,0xc4,0x8d,0x28,0x21,0x67,0x72,0xa9,0xe4,
    0x56,0x35,0xc8,0x85,0x84,0x9c,0xc9,0x75,0x92,0xdc,0xfa,0x06,0xb9,0xce,0x09,0x39,
    0x93,0xeb,0x2a,0xb9,0x29,0x0d,0x72,0xfb,0x26,0xe4,0x4c,0xae,0xbb,0xe4,0x9a,0x1b,
    0xe4,0x7a,0x24,0xe4,0x4c,0x6e,0x7f,0xb7,0x57,0x6f,0x75,0x67,0x31,0xbd,0x13,0x72,
    0x2d,0xee,0x2c,0xe6,0xa0,0x84,0x38,0xe2,0x1d,0xe6,0xfe,0x82,0x86,0xb9,0xdf,0x37,
    0xe1,0xef,0x6d,0x07,0xb9,0xb9,0xdf,0x2f,0x21,0x6e,0x73,0xff,0xe0,0xbd,0xcc,0xfd,
    0x43,0xf7,0x32,0xf7,0x3f,0x9e,0x50,0xf6,0x50,0x37,0xf7,0x0f,0x4b,0x88,0xfb,0xb9,
    0x7f,0x78,0x42,0xdc,0xf4,0x8e,0x92,0x9e,0x9f,0xfb,0x03,0x13,0xe2,0x7e,0xee,0x0f,
    0x4a,0x88,0x5b,0x1f,0x0f,0x49,0x68,0x0b,0xb8,0x9d,0xa5,0x0c,0x4b,0x88,0x5b,0x3c,
    0x98,0xe0,0xe2,0x01,0xb8,0xe1,0x79,0x1a,0xa9,0xf9,0x3b,0xd2,0xcd,0xbd,0x51,0x9a,
    0x8f,0x43,0xdc,0x3c,0x3b,0x31,0x61,0x5f,0xa2,0x9f,0x7a,0xb8,0xf9,0x3c,0x26,0x21,
    0xe7,0xe7,0xf3,0xe7,0x12,0xda,0xe8,0xe7,0xf4,0xc7,0x26,0xc4,0x2d,0xd9,0x3c,0x1d,
    0x97,0xd0,0xc6,0x58,0x37,0x4f,0xc7,0xbb,0x79,0x3a,0xae,0x61,0x9e,0x4e,0x50,0x7d,
    0x87,0x3b,0xdb,0x23,0x12,0x8e,0x71,0x8c,0xdd,0xe0,0xea,0xf6,0xe9,0x84,0x1c,0xea,
    0xe6,0x75,0x27,0xb8,0x79,0x7c,0x74,0x8d,0xe5,0xa1,0xfd,0x9f,0x96,0x4f,0xfc,0x5c,
    0x6d,0x75,0xf1,0xe0,0xc8,0x1a,0x63,0x02,0x62,0x04,0xf4,0xbc,0x9d,0x7e,0x35,0xc6,
    0x84,0x39,0x8a,0x07,0x13,0x5c,0x3c,0xe8,0x5d,0x63,0x4c,0x98,0xa3,0x78,0x30,0x41,
    0x65,0x5c,0xa6,0x32,0x70,0x4e,0x35,0x21,0x6f,0x3b,0x7e,0x7f,0x7d,0x4a,0xe7,0x79,
    0x76,0xa6,0x67,0xc9,0xd6,0xec,0x15,0x5a,0xc3,0xed,0x0c,0x03,0x3a,0x2b,0x63,0xe2,
    0x96,0xd0,0x8f,0xc0,0x57,0xc5,0xbc,0x33,0xb3,0x52,0xe7,0xaf,0xc0,0xfe,0x10,0xb3,
    0x8c,0x55,0x3a,0x13,0x41,0xdd,0x9f,0x8e,0x89,0xaf,0x90,0xdf,0x56,0xc7,0xc4,0xba,
    0xd5,0x0a,0x5f,0x3e,0x1b,0x13,0x37,0x5f,0x5a,0xdd,0x2f,0x73,0xfe,0x19,0x50,0xa3,
    0x8f,0x5a,0xe5,0x83,0x65,0x71,0xc1,0xf5,0xad,0xd1,0x47,0xe0,0x9e,0x8d,0x0b,0x0e,
    0xfe,0xd9,0xbf,0x46,0x1f,0x81,0xc3,0xfe,0x72,0x99,0xce,0xf3,0xee,0x70,0x67,0x3d,
    0x90,0xb9,0x3c,0xcf,0xdf,0xa1,0x72,0xf1,0xbf,0xad,0x7b,0x73,0x75,0xa6,0x83,0x75,
    0xfe,0x6e,0x9d,0x95,0xcd,0x4b,0x89,0xb7,0xe8,0xde,0x8c,0x8d,0xcd,0x2b,0x52,0xee,
    0x95,0xe6,0xa5,0xc5,0x78,0x6f,0x4f,0xf9,0x9e,0x7f,0x85,0x7b,0xff,0xbd,0x32,0xd5,
    0xbe,0x4a,0xf2,0x36,0xff,0xe7,0xa7,0x1f,0x9d,0xff,0x57,0xa7,0x1f,0x9d,0xff,0x0b,
    0x52,0xca,0x82,0xb3,0x79,0xfc,0xed,0x94,0xb8,0x9f,0xff,0xd7,0xa4,0xc4,0x4d,0xef,
    0xfb,0xd2,0xf3,0xf3,0xff,0xda,0x94,0xb8,0x9f,0xff,0x3f,0x48,0x89,0x5b,0x1b,0x16,
    0xaa,0xad,0xb0,0x87,0xd8,0x86,0x7b,0x01,0x0f,0xd7,0x7f,0xd7,0x8d,0xeb,0xb1,0xed,
    0x87,0x29,0xef,0x0a,0xa0,0x5d,0xd0,0xb5,0xf8,0x76,0x43,0x4a,0xce,0xfc,0x73,0x53,
    0x4a,0x6c,0xa1,0x7b,0xc7,0xb9,0x25,0x25,0x6e,0xc9,0xe6,0xee,0xad,0x29,0xfb,0xf5,
    0x16,0xf7,0x4e,0x72,0x9b,0x7b,0x27,0xb9,0xb5,0xe1,0x9d,0xc4,0xfa,0xee,0x0e,0x37,
    0x66,0x8e,0xa8,0x71,0xdc,0x60,0x1c,0x41,0x17,0xfd,0x6a,0xbf,0x7d,0xfe,0x24,0x25,
    0x5f,0x2a,0x15,0xd8,0xcf,0x84,0x95,0x1d,0xf6,0x73,0x61,0x15,0x77,0x46,0x3d,0x26,
    0xa2,0xbe,0xe5,0x3f,0x17,0x51,0xd7,0xf2,0x27,0x47,0xd4,0xb3,0x39,0x34,0x3e,0xa2,
    0x0e,0xe4,0xc0,0xd9,0xdc,0x78,0x2c,0x25,0xf7,0xe5,0x3c,0xc0,0x40,0xee,0x89,0xb4,
    0xb8,0x47,0x0b,0x7c,0xa1,0xc6,0x01,0xb8,0x65,0x29,0x79,0xdc,0x21,0xb1,0xf9,0xf6,
    0x54,0x4a,0x1c,0xf7,0x47,0xcc,0xe6,0xf2,0x94,0xb8,0xbd,0xcb,0xae,0x48,0x59,0xce,
    0x72,0xd7,0xf6,0x55,0x29,0x71,0xff,0x7b,0xf6,0x1f,0x53,0xe2,0x48,0xa8,0x0f,0xb0,
    0x67,0x5c,0x7d,0xc0,0xa3,0x3e,0x97,0xe8,0x6e,0xca,0xea,0x94,0xbc,0xd9,0x7c,0x4e,
    0x36,0xcb,0xce,0xe6,0xf3,0xb2,0xf7,0x9c,0xb3,0xf9,0x27,0x67,0xf3,0xf9,0x06,0x9b,
    0x2f,0xa4,0xe4,0xcd,0xe6,0x4b,0xb2,0x59,0x71,0x36,0x5f,0x96,0xcd,0x97,0x9c,0xcd,
    0x57,0x9c,0xcd,0x97,0x1b,0x6c,0xfe,0x35,0x25,0x6f,0xfa,0xaf,0xaa,0x3e,0xbe,0x4e,
    0x6b,0x9c,0xfe,0xab,0x0d,0xfa,0xff,0x9b,0x92,0x37,0xfd,0x75,0xd2,0xf5,0xe5,0xaf,
    0x77,0xfa,0xeb,0x1a,0xf4,0x37,0xa4,0xe4,0x4d,0x7f,0xb3,0x74,0xbd,0xfe,0x16,0xa7,
    0xbf,0xb9,0x41,0xff,0xcd,0x94,0xfc,0x05,0x1a,0x23,0x6f,0xef,0x65,0x8c,0x9c,0x2f,
    0x6e,0xeb,0x5e,0x38,0x8b,0xd7,0xdb,0x52,0xea,0x42,0xe6,0xab,0xba,0x47,0xbf,0x3d,
    0x25,0x8e,0xf9,0xf3,0xae,0xe6,0xcf,0xbb,0x9a,0x3f,0xe0,0x87,0xd5,0x28,0x83,0x39,
    0xd5,0x8a,0x18,0x1b,0xc8,0xa1,0x5e,0x43,0x6b,0xbc,0xa7,0x0a,0xae,0x67,0x28,0xb8,
    0xfa,0x7e,0xa1,0xc6,0xb8,0x08,0xee,0x60,0x71,0x0f,0x2a,0x9e,0xbe,0x97,0x92,0x6f,
    0xae,0xdf,0xa3,0xad,0x96,0x0e,0x11,0x6f,0xb1,0x18,0xfc,0xfb,0x38,0x9f,0x0a,0xac,
    0xcf,0xfb,0x9a,0x47,0xa8,0x0f,0x2e,0x7c,0x62,0xdc,0x61,0x9c,0xa0,0x5f,0x6f,0xcc,
    0x6d,0xa2,0x2e,0x95,0x40,0x0e,0xf5,0x35,0xd9,0x38,0x50,0x0e,0xfd,0xb7,0xc1,0xc9,
    0xa6,0x81,0x9c,0x97,0xed,0x14,0x68,0x0f,0x72,0x6f,0x3a,0xd9,0x2e,0x81,0x9c,0x97,
    0xed,0x16,0x58,0x1e,0xec,0x80,0x37,0xd9,0x1e,0x81,0x1c,0x52,0xa7,0x5c,0x16,0x18,
    0xfc,0x52,0xd6,0xbd,0x75,0xf0,0xbf,0x95,0x0f,0xf6,0x0f,0xe4,0xe0,0x3f,0xac,0x45,
    0x7d,0x5d,0xfb,0xc1,0xf5,0xce,0x53,0x5f,0xb5,0x1f,0xff,0x7f,0x47,0x65,0x1c,0x18,
    0x78,0x17,0x18,0xba,0x1d,0x39,0x86,0xfa,0xf4,0x51,0x99,0xe0,0xd0,0x8f,0xa6,0xd7,
    0x37,0x14,0xfd,0x88,0xbe,0x83,0x0c,0x7c,0xd9,0x47,0xf6,0x21,0xdb,0x4f,0xb2,0x78,
    0xda,0x7a,0x83,0xfe,0x42,0xff,0xb4,0x94,0xf6,0x1c,0x17,0xe8,0x8f,0xc5,0xaa,0xff,
    0xc7,0x03,0xfb,0x7f,0xb1,0xea,0x3f,0xc2,0xd5,0x1f,0xdc,0x61,0x79,0x3a,0x5c,0xb6,
    0xf1,0x9c,0xa8,0xfa,0x0f,0x90,0x2f,0x4b,0xa5,0xc2,0x47,0x47,0xca,0x47,0x55,0xf1,
    0x26,0x3b,0x50,0xb2,0x65,0x27,0x3b,0xc8,0xc9,0x0e,0xac,0xfb,0x99,0x63,0x71,0xb0,
    0xf0,0x23,0x64,0x6f,0x90,0xb3,0x33,0x44,0x76,0x2a,0xce,0xce,0x50,0x67,0x67,0x88,
    0xb3,0x33,0xcc,0xd9,0x81,0xcd,0xa1,0xce,0xf7,0x9f,0x08,0xbc,0x1f,0x3d,0xcc,0xf9,
    0xfe,0x53,0xb2,0xfd,0x09,0xf9,0x73,0x84,0xda,0x7c,0x58,0x43,0x7e,0x84,0xeb,0x8b,
    0xe1,0x35,0xea,0xc1,0x2f,0xb8,0x87,0x0d,0x59,0x9b,0x8f,0xc7,0x06,0xce,0x5b,0x1b,
    0x53,0x23,0x03,0x31,0xe8,0x4c,0x2f,0xb3,0x8e,0xa3,0x42,0x31,0xc7,0xc1,0x63,0x8e,
    0x5f,0x28,0x6e,0xf4,0x5e,0xb8,0x87,0xd4,0x67,0x9f,0x09,0xc4,0xa0,0x6f,0x77,0xe5,
    0xf0,0x9d,0x0f,0xee,0x78,0xdb,0xb9,0xc6,0x49,0x81,0x72,0xc0,0xb1,0xdf,0x41,0xcc,
    0x01,0xfe,0x59,0x67,0xf7,0xa4,0x06,0xbb,0xe3,0x64,0x17,0x65,0x9b,0x9d,0xf1,0x81,
    0x78,0xa3,0x9d,0xcf,0x3b,0x3b,0xe3,0x65,0x67,0x72,0x99,0x6b,0xe4,0x69,0xe2,0xd0,
    0x7e,0x94,0x67,0xf8,0x44,0x87,0x7f,0x3e,0x14,0x7b,0xa5,0xb3,0x02,0x75,0x4a,0xee,
    0xfc,0x6e,0x52,0x20,0xde,0xee,0xde,0xd5,0xbe,0x18,0x88,0x6f,0x72,0xfb,0xac,0xc9,
    0xd2,0x2d,0x3b,0xdd,0x29,0x81,0xb8,0x7f,0xcf,0x3b,0x27,0x10,0x5f,0xed,0xde,0xf3,
    0xbe,0x14,0x68,0xf3,0x1c,0x57,0x97,0x73,0x65,0xaf,0xe2,0xec,0x4d,0x0d,0xc4,0xdb,
    0x9d,0xee,0x79,0x81,0xfa,0x53,0x9d,0xee,0x8c,0xc0,0x36,0xfa,0x76,0x5c,0x10,0x88,
    0xfb,0x76,0x5c,0x18,0x88,0xfb,0x76,0x5c,0x24,0x5d,0xdf,0x8e,0x99,0x81,0xb8,0x6f,
    0xc7,0xac,0x40,0xdc,0xb7,0xe3,0xe2,0x40,0x9b,0xb3,0x5c,0x5d,0x66,0xcb,0x9e,0x6f,
    0x47,0x4b,0x20,0xee,0xdb,0x71,0x49,0xa0,0x3e,0x38,0xdb,0x27,0x4f,0x8d,0xd8,0x3e,
    0x70,0x88,0x09,0xd3,0xdc,0x1d,0xad,0x3a,0x97,0xa7,0x69,0xba,0x8b,0x80,0xff,0x6d,
    0x7d,0x9b,0xa1,0xbd,0x94,0xe5,0xbf,0xa2,0xbd,0x94,0xe5,0x67,0xb9,0xbd,0x14,0xe6,
    0xc8,0xc5,0x11,0x75,0x20,0x07,0xce,0xe6,0xce,0xec,0x88,0x7d,0x60,0xf9,0x4b,0x22,
    0xb6,0xe5,0x5b,0x9a,0xab,0x6d,0x81,0xd8,0x6c,0x37,0xbf,0xe6,0x06,0xe6,0xdb,0x5c,
    0x1c,0x6f,0x97,0x9c,0xc7,0xe6,0x07,0x96,0xdb,0x26,0x7b,0xc0,0x16,0x04,0xe2,0x73,
    0x1d,0xf6,0x9d,0x40,0xfd,0xb9,0x2e,0x6e,0x7c,0x37,0x50,0x16,0xdc,0x02,0x61,0xd7,
    0x06,0xe2,0xb8,0xdf,0x7b,0x95,0xb0,0x1f,0x04,0xe2,0xf8,0x36,0xa4,0x45,0xfb,0xe7,
    0x8e,0x40,0x1c,0xfb,0x5f,0xe4,0xaf,0x0b,0xc5,0xfe,0xb7,0x23,0x70,0x8d,0x6d,0x77,
    0xfb,0xd2,0xeb,0x03,0x65,0xae,0xb0,0x6f,0xb6,0x02,0x31,0xdb,0xeb,0xdf,0x18,0x88,
    0x61,0x3e,0x3d,0xa0,0x7e,0xfb,0x51,0x20,0x7e,0x7b,0xa9,0x98,0xbf,0x37,0x07,0xe2,
    0x76,0xbe,0xb9,0x5c,0xfa,0xb7,0x4a,0xf6,0x66,0xc5,0x37,0xeb,0xcf,0x69,0xba,0x5b,
    0x02,0x99,0x63,0x6a,0xd4,0x41,0xcc,0x83,0x3c,0xfa,0xda,0xca,0xfa,0x46,0xc4,0xf1,
    0x71,0x9e,0xc6,0xc8,0x3c,0x37,0x46,0xc0,0xcd,0xcd,0xd3,0x3c,0xd9,0xc4,0xff,0x56,
    0x6e,0x7b,0x44,0xbb,0x6d,0x5a,0x93,0x4c,0x66,0x9e,0x2b,0xf7,0x84,0x1a,0x65,0x50,
    0x97,0x76,0xd9,0xba,0x53,0xe5,0xce,0x8f,0x58,0x76,0xab,0x7e,0x5f,0xb8,0x5a,0xfa,
    0x78,0x5a,0x9b,0xbf,0x59,0xa3,0x9c,0xd5,0xcf,0xf0,0xb9,0xc2,0x6d,0x6c,0xdb,0x9c,
    0xea,0x88,0xa8,0xb3,0xca,0xcd,0x8b,0x85,0x11,0xe5,0x3b,0xdc,0x5d,0xcf,0x1b,0x74,
    0x0f,0x13,0xf7,0x3b,0x4d,0xf7,0xc6,0x88,0xf5,0x05,0x77,0x91,0x62,0xe3,0x4d,0x51,
    0x11,0x1b,0x6f,0xd4,0xde,0x0d,0x3e,0xba,0xad,0xe1,0xae,0xe3,0xad,0x79,0x7a,0x48,
    0xf5,0x7f,0x48,0xf7,0x7c,0xeb,0x77,0xc9,0x6a,0x2c,0xff,0x54,0xad,0xaf,0x86,0x67,
    0x35,0xda,0x4e,0xb5,0x96,0xa2,0xfd,0xb7,0x49,0xff,0x56,0xa7,0xbf,0x3d,0xa3,0xfe,
    0x3c,0xad,0x95,0x86,0xef,0xc8,0xa8,0x0f,0xbe,0xc9,0xc5,0x9e,0x3b,0xc3,0x47,0xef,
    0x56,0xde,0x1f,0x88,0xfb,0x64,0x77,0xb3,0x1e,0x08,0xe4,0xfd,0xdd,0xac,0x5f,0x05,
    0xe2,0xfe,0x6e,0xd6,0xc3,0x81,0xb8,0xbf,0x9b,0xf5,0x48,0x20,0xee,0xef,0x66,0x2d,
    0x96,0x9c,0xbf,0x9b,0xf5,0x9b,0x40,0xdc,0xdf,0xcd,0xfa,0x6d,0xa0,0xfe,0x6f,0x5c,
    0x9c,0x5b,0x22,0x5d,0x7f,0x37,0x6b,0x69,0x20,0xee,0xef,0x66,0x3d,0x1a,0xa8,0xbf,
    0xd4,0xe9,0x3e,0x2e,0x5d,0x7f,0x37,0xeb,0x89,0x40,0xdc,0xdf,0xcd,0x7a,0x32,0x50,
    0xff,0x09,0xa7,0x7b,0x57,0xf8,0xe8,0xdd,0xca,0x15,0x81,0xb8,0x4f,0xe6,0xb3,0x95,
    0x81,0xbc,0xf7,0xd9,0xd3,0x81,0xb8,0xf7,0xd9,0x33,0x81,0xb8,0xf7,0xd9,0xea,0x40,
    0xdc,0xfb,0xec,0xbf,0x25,0xe7,0x7d,0xf6,0x6c,0x20,0xee,0x7d,0xf6,0x5c,0xa0,0xfe,
    0xb3,0xae,0xee,0x7f,0x92,0xae,0xf7,0xd9,0x0b,0x81,0xb8,0xf7,0xd9,0x8b,0x81,0xfa,
    0x2f,0x38,0xdd,0xbf,0x48,0xd7,0xfb,0xec,0xa5,0x40,0xdc,0xfb,0xec,0xe5,0x40,0x7d,
    0x70,0x76,0x9f,0xed,0x97,0x81,0xbe,0x04,0x87,0xb3,0x07,0x7c,0x73,0x00,0xcc,0xe6,
    0xd7,0x5a,0xad,0x4d,0x38,0xd3,0xb0,0xf3,0x8a,0x75,0x81,0xdf,0x9f,0x82,0xc3,0xf9,
    0x2b,0xbe,0xf3,0x5a,0x1f,0xf8,0xbd,0x42,0x9b,0xfb,0x56,0x60,0x43,0x20,0x6e,0xe7,
    0x32,0x1b,0x03,0xb1,0xa5,0xfa,0xb6,0x64,0xf7,0x1d,0x8e,0x40,0xce,0xf4,0x36,0x35,
    0xe8,0x6d,0x0e,0xc4,0x1a,0xcf,0xbb,0xb7,0x04,0x72,0xa6,0xf7,0x56,0x83,0xde,0xdb,
    0x81,0x58,0xe3,0xf9,0xf7,0x3b,0x81,0x9c,0xfd,0x26,0xbe,0x2d,0xb0,0x4d,0xab,0x4b,
    0x45,0x7b,0xb6,0xab,0x3d,0xdb,0x9c,0xfd,0x77,0x03,0x71,0xbb,0xa3,0xb2,0x53,0x7a,
    0xcf,0xbb,0xbb,0x21,0xef,0x05,0xca,0xed,0x0c,0x7b,0x9e,0xf5,0xbf,0x1f,0xc8,0x99,
    0x0f,0x77,0x05,0x7e,0x7f,0xb4,0xd6,0xd5,0x03,0x1f,0x9d,0xee,0x6a,0xa8,0x47,0x39,
    0x63,0x3d,0xc0,0x59,0x3d,0x2a,0x19,0x71,0xab,0x47,0x55,0x7a,0xcf,0xbb,0x7d,0x45,
    0x94,0x51,0xae,0x9a,0x15,0xeb,0x53,0x9c,0x11,0xf7,0x67,0x51,0x49,0x46,0x1c,0x7d,
    0x8f,0xef,0x57,0x3e,0x28,0x15,0xe7,0x4e,0x59,0xc6,0x6f,0x5a,0xe0,0xaf,0xf7,0x43,
    0x71,0xee,0x54,0xcb,0xc8,0x59,0x5b,0x3a,0x67,0xb4,0xd3,0xa2,0xb5,0xac,0xfe,0x4d,
    0x66,0x46,0x39,0x70,0x36,0x96,0xba,0x65,0xc4,0xb7,0xb8,0xf7,0xa1,0xfd,0x32,0xf6,
    0x3f,0x38,0x5b,0x87,0x7b,0x64,0xc5,0x3a,0x0c,0x7e,0x87,0xbe,0xf1,0xb4,0x75,0xf8,
    0xde,0x88,0xf1,0x7e,0x9a,0xde,0xef,0x2f,0xce,0x8a,0xd8,0x0e,0x5d,0xcc,0xb5,0x19,
    0xe2,0x66,0xef,0x85,0xb3,0x3d,0xd5,0xd1,0x19,0x75,0x21,0x83,0xb5,0xe0,0x93,0x59,
    0xb1,0x16,0x80,0x1b,0x92,0x27,0x60,0x88,0xe5,0x43,0x5c,0x7b,0xe7,0x48,0x07,0xba,
    0xb6,0x8f,0x6a,0xcd,0x88,0x9b,0xcc,0xe5,0x19,0xcb,0xf3,0x32,0x6d,0x19,0x71,0xdb,
    0xbb,0x7c,0x33,0x23,0x06,0x5d,0xdb,0xbb,0xcc,0xcd,0x88,0xe3,0x5b,0x50,0xdb,0xbb,
    0xcc,0xcb,0x88,0x63,0xef,0x32,0x5b,0x3e,0xb8,0x22,0x23,0x6e,0x7b,0x91,0x2b,0x33,
    0x62,0xd6,0xd7,0x57,0x65,0xc4,0xf0,0x0d,0xa9,0xdd,0xc7,0xfb,0x56,0xc6,0x7d,0x08,
    0x38,0x3b,0x6b,0xbd,0x3a,0x23,0x6e,0x67,0xad,0xe6,0xe3,0x05,0x19,0x39,0xdb,0x23,
    0x5c,0x93,0x51,0x6f,0x41,0xc6,0x35,0xce,0xfc,0x82,0xa7,0xed,0x11,0xce,0xd0,0xde,
    0x04,0xeb,0xde,0x35,0xf2,0x9f,0xed,0x4d,0x46,0x64,0xec,0xb7,0x41,0xba,0x0b,0x38,
    0xda,0xf9,0x1a,0xdc,0x31,0x18,0x83,0xb2,0x79,0xbc,0xca,0x18,0xad,0xfc,0x31,0x59,
    0x71,0x86,0x3e,0x52,0xfd,0x79,0x6f,0x54,0xfc,0x2e,0x7c,0x5c,0x46,0x7c,0xa1,0x8b,
    0x7f,0xa3,0x32,0xd6,0xe7,0xb8,0x06,0x5b,0xa3,0x5d,0x7d,0xcf,0x54,0x7d,0x51,0xde,
    0x28,0xd5,0xc1,0x7c,0xf5,0x99,0x86,0xfa,0x8e,0x77,0xf5,0x05,0x37,0x26,0x4f,0x27,
    0xcb,0xe6,0xc9,0x2a,0x63,0xbc,0xf2,0x63,0x5c,0x7d,0x3f,0xe7,0xea,0x3b,0x5f,0xd8,
    0xd8,0x8c,0xb8,0xaf,0xef,0x38,0xd5,0x77,0x6c,0x83,0xad,0xf1,0xae,0xbe,0x93,0x54,
    0x5f,0x94,0x37,0x4e,0x75,0xb0,0xdf,0x8b,0x4e,0x6d,0xa8,0xef,0x64,0x57,0x5f,0x70,
    0xa7,0xe5,0x69,0xb2,0x6c,0x9e,0xe6,0xc6,0xc9,0xe9,0x2a,0xb7,0xcd,0x7f,0x07,0x91,
    0x11,0x7f,0xde,0xad,0x1d,0x67,0x64,0xf4,0xd7,0x44,0xa7,0x7b,0x96,0x74,0xf1,0x1d,
    0xf2,0xee,0x77,0xc4,0x8c,0xb8,0xff,0xed,0xee,0xec,0x8c,0x75,0x9f,0xa4,0xb6,0x59,
    0x3d,0x26,0xbb,0xb6,0x4d,0xa9,0x51,0x06,0xed,0x3d,0x5b,0xf5,0x35,0x6e,0x72,0x8d,
    0x65,0x83,0x3b,0x43,0x9c,0xed,0xeb,0xce,0x71,0xf3,0x1b,0x72,0xf0,0xa9,0x71,0x5f,
    0x76,0xdc,0x94,0x5a,0x71,0x07,0x04,0xe3,0x7e,0xaa,0xe6,0x30,0xe2,0x8a,0x61,0xd3,
    0x34,0x5f,0x81,0xd9,0x6f,0xb2,0xe7,0x67,0xc4,0xa7,0xb8,0xdf,0x64,0xa7,0x67,0xd4,
    0x07,0x67,0xf3,0x65,0x46,0x46,0x7c,0xf7,0xf7,0x13,0x19,0x31,0xd4,0xcf,0xd6,0xda,
    0x8b,0x32,0xe2,0xa8,0xd7,0x84,0x52,0xe0,0x1e,0x2d,0xe2,0x1e,0x10,0x9c,0x3e,0x63,
    0x2a,0xe9,0xd3,0xe2,0x3d,0xf6,0x92,0xb7,0x69,0x2f,0x0e,0x9d,0xaf,0xd7,0xb8,0xef,
    0xc4,0xfe,0x14,0xfa,0x93,0xdd,0x38,0xf8,0xad,0x62,0xa3,0xfd,0x6e,0xb8,0xc4,0xed,
    0x6f,0xc1,0xfd,0x2e,0x4f,0x4b,0x64,0xf3,0x77,0xee,0x3b,0xa1,0xa5,0xfa,0x4e,0x68,
    0x87,0xbb,0x2f,0xf5,0x68,0x44,0xfc,0x1a,0xb5,0xfb,0xb1,0x88,0x58,0x73,0xa9,0xd0,
    0x7b,0x5c,0x7a,0x2d,0x4e,0xef,0x89,0x88,0xb8,0xe9,0x3d,0x19,0x11,0x6b,0x76,0xdf,
    0xbd,0x2d,0x8b,0x68,0xef,0x49,0xf7,0xdd,0xdb,0x53,0xfa,0x5e,0x6a,0x99,0xbe,0x69,
    0xc4,0xb7,0xac,0xab,0xf4,0x1d,0xeb,0x74,0xdc,0x19,0x8e,0x28,0xf3,0x75,0xfd,0x8e,
    0x65,0xed,0x58,0x12,0xed,0xf9,0x0d,0x1a,0x9e,0x1f,0xe4,0x2b,0xc8,0x31,0x79,0xfa,
    0x3f,0xaf,0x90,0xe7,0x6e,0x40,0x47,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = false;
//     bool punchthrough = false;
//
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = true;
//
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
