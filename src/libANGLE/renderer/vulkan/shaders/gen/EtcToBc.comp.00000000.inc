// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x5c,0x09,0xb4,0x15,0xc5,
    0xb5,0xbd,0xf7,0xdd,0x77,0x7b,0xbc,0x18,0x67,0x40,0x44,0x04,0x07,0x70,0x42,0x63,
    0x8c,0x89,0x12,0x44,0x70,0x56,0x44,0x14,0xa3,0x81,0x80,0x0c,0x02,0x82,0xfa,0x40,
    0x44,0xe5,0xe9,0x07,0x1f,0x51,0x44,0xc1,0x28,0x12,0x66,0x11,0x22,0xa8,0x20,0x46,
    0x63,0x62,0x8c,0x31,0x22,0x26,0x20,0x0e,0x01,0x95,0xa0,0x51,0x90,0x7c,0xa3,0x89,
    0x03,0x0e,0xcb,0xc4,0x01,0xfc,0x6a,0xe0,0x9b,0xde,0x77,0xef,0x43,0x9f,0x77,0xc3,
    0x5b,0xab,0xd7,0xed,0xda,0x67,0x9f,0x53,0xa7,0x4e,0x55,0x9f,0xaa,0xae,0xee,0x7e,
    0xa5,0xba,0x03,0xc2,0x42,0xa9,0x58,0x48,0x0a,0x51,0x21,0x69,0x51,0xa8,0xfe,0xed,
    0x56,0xa8,0x2b,0x14,0xf5,0xdb,0x59,0xbf,0x5d,0xf5,0xdb,0x5d,0xbf,0x27,0x65,0xbf,
    0x69,0x21,0xa8,0xf2,0x4e,0xeb,0xd9,0xa7,0x67,0xe7,0xb1,0x57,0x0d,0xed,0x7c,0xcc,
    0x77,0x8f,0x82,0xfe,0x2e,0x85,0x52,0xd5,0x0e,0x64,0xdf,0xca,0xec,0x96,0xb3,0xdf,
    0xfa,0xec,0x68,0x18,0x3c,0x72,0x14,0xf0,0x5e,0x99,0xf8,0xfc,0xec,0xe8,0x93,0x81,
    0xbb,0x66,0x36,0xea,0xab,0x36,0x0b,0x85,0x13,0xa5,0x83,0xe3,0xf4,0x4c,0xeb,0x45,
    0xba,0x53,0x38,0x40,0xbf,0x86,0x15,0x85,0xd5,0x3b,0xac,0x4e,0x58,0xe4,0xb0,0x92,
    0xb0,0x8a,0xc3,0xea,0x85,0xed,0xea,0xb0,0xb2,0xb0,0x3d,0x1d,0x16,0x08,0x6b,0xe5,
    0xb0,0x50,0xd8,0xbe,0x68,0x73,0x66,0xdd,0xea,0x3d,0x2d,0xb3,0x8a,0x36,0xa5,0xd9,
    0xf9,0x3e,0x2a,0x9f,0xaf,0x72,0x1b,0x71,0xd1,0xd6,0x82,0x64,0x38,0x87,0xec,0x10,
    0x95,0x67,0x67,0x0e,0x74,0x28,0xe4,0x72,0x94,0xdb,0xbb,0xf2,0xa8,0xa0,0xb9,0x1c,
    0xe5,0xf6,0x8a,0x03,0x6c,0xa3,0xdc,0x5a,0xb2,0xb1,0x01,0x6d,0xb7,0x96,0x6c,0x52,
    0x42,0xbd,0x3d,0x32,0x4f,0xe1,0x6b,0xfb,0x0c,0x2b,0xc9,0xef,0xbd,0x32,0x3e,0xda,
    0xb9,0xbf,0x6c,0xb7,0xcc,0xca,0xa1,0xda,0x5e,0x57,0xc5,0xeb,0xab,0xf1,0x0c,0x75,
    0x80,0x1f,0x8b,0x5f,0x94,0x3c,0x91,0x2c,0x96,0xfe,0xae,0x3a,0x37,0xfd,0xdd,0x24,
    0xdf,0xb5,0x1a,0xdf,0xba,0xc2,0xee,0xe2,0xed,0x29,0x5e,0xbd,0x78,0xed,0xc4,0x43,
    0xdd,0x7b,0x67,0x1e,0x76,0x52,0x3d,0xe0,0x22,0x4e,0x9d,0xd4,0x9f,0x28,0x1f,0x2d,
    0x1e,0xca,0x87,0xc9,0xa7,0xfe,0xd9,0x71,0x84,0x2b,0x0f,0x70,0x72,0x70,0x87,0xc8,
    0x67,0x93,0x0f,0x53,0xdf,0x5a,0x79,0xb8,0xc6,0x8e,0x95,0x2f,0xd7,0x78,0xb0,0x72,
    0x83,0x7c,0xb5,0xf2,0x58,0xb5,0xc9,0xca,0x8d,0x1a,0x47,0x56,0x9e,0x90,0x1d,0xed,
    0x5c,0xb9,0x49,0x31,0x31,0x7f,0xa6,0x49,0x7f,0xdf,0xac,0x7c,0x87,0xea,0x9a,0xe6,
    0xf8,0xd3,0xab,0xd7,0x51,0xa1,0x70,0x78,0x16,0x15,0xc8,0x7e,0x26,0x1b,0x8d,0xf2,
    0x75,0xba,0xe3,0xce,0x50,0x3c,0xac,0x3c,0x53,0xb1,0xb5,0xf2,0x2c,0x5d,0x03,0x66,
    0x6b,0xb6,0x6c,0xcd,0x10,0x77,0x96,0xe3,0xce,0xa9,0x89,0xd3,0x5c,0xf5,0x8b,0xe9,
    0xce,0x13,0xa7,0x41,0xb2,0x59,0x4e,0x76,0xa7,0x64,0x03,0xe4,0xa7,0xb7,0x3b,0xbf,
    0xc0,0x71,0x69,0xdc,0xbb,0x5c,0x7b,0xe6,0x4a,0x6e,0xdc,0x05,0xd9,0x91,0x38,0xee,
    0x42,0xe7,0xef,0x70,0xc9,0x4d,0xf6,0x73,0xd5,0x37,0x43,0x76,0xbc,0xec,0x6e,0xe9,
    0x35,0xec,0x44,0xb6,0x48,0xbe,0x5a,0xfd,0x33,0x9d,0x6c,0x71,0x4d,0x1b,0xbd,0xec,
    0x1e,0xd7,0xc6,0x5a,0xd9,0xbd,0x4e,0x6f,0x46,0x8d,0xec,0x3e,0xf9,0x32,0xc0,0xc9,
    0xac,0xbd,0x4b,0x74,0xfd,0x19,0x77,0xa9,0xb0,0x39,0xd2,0xf1,0x76,0xee,0x77,0xf1,
    0x9d,0xab,0x78,0x98,0x6c,0x99,0x6b,0xef,0x8c,0x1d,0xb2,0x3d,0xaa,0xe3,0xeb,0x01,
    0x8d,0xa1,0xd9,0xea,0xc3,0x3b,0xd5,0x07,0x0b,0x15,0xc3,0xbb,0x15,0x93,0xc5,0x6a,
    0xe3,0xbd,0xf2,0x79,0xa9,0xea,0x5c,0xa6,0xeb,0xf4,0x21,0x8d,0x87,0x3b,0x9c,0xff,
    0xcb,0xb3,0xe3,0x9b,0xec,0x38,0x34,0xbb,0xe2,0x70,0x7d,0xbf,0x90,0x1d,0xfb,0x65,
    0x3d,0x68,0x79,0x34,0xd0,0x78,0x0c,0x76,0x72,0xc0,0xe6,0x4b,0x92,0x83,0xdf,0x45,
    0xe5,0x75,0xc2,0x20,0xff,0xb3,0xd3,0xb7,0xeb,0x67,0x63,0xcd,0xf5,0xb4,0x49,0x31,
    0x3c,0x44,0x3e,0xbc,0xa9,0x5c,0xf1,0x96,0x74,0x7d,0x2e,0x78,0x57,0x39,0xdc,0xca,
    0xef,0xb9,0x6b,0x1d,0xe5,0xcd,0x3b,0xae,0x97,0xa0,0x9a,0x6b,0xde,0x97,0xce,0x7b,
    0x92,0x19,0xef,0x83,0x9a,0x9c,0xf0,0x49,0x75,0xbe,0xcb,0xcb,0x5b,0x34,0xaf,0x59,
    0x79,0x9b,0xe6,0x03,0x2b,0x87,0x45,0xe4,0xe5,0xdc,0x5e,0xc7,0x62,0x9e,0x33,0x50,
    0xee,0x5b,0x64,0x4e,0x42,0x8e,0xe8,0x57,0x64,0x3b,0x80,0x99,0xfe,0x8f,0x8b,0x68,
    0xa3,0xcb,0x81,0x45,0xe6,0xcc,0x1d,0x39,0xb0,0xc8,0x39,0xc6,0xca,0x17,0x15,0x39,
    0xc7,0x1e,0x9e,0x5d,0x89,0xb0,0x37,0xb0,0x98,0x8f,0xc7,0xf9,0xca,0x69,0xb0,0x09,
    0x3b,0xd0,0xbd,0xa8,0xc8,0xf8,0x0f,0x2e,0xb2,0xcf,0xa1,0x83,0x98,0x20,0xa6,0x77,
    0x16,0x39,0x46,0xed,0x30,0x7c,0x7e,0x91,0xe3,0xc1,0x0e,0xab,0xfb,0xad,0x22,0x57,
    0x04,0x56,0x7e,0x5b,0x13,0xbd,0x95,0x8f,0xaf,0xe3,0x9c,0x65,0xe5,0x93,0xb3,0xf2,
    0xee,0xae,0x3c,0x22,0x2b,0xb7,0x50,0x2c,0x5a,0x96,0x98,0x3b,0xfb,0x56,0xfd,0x29,
    0x57,0xcf,0x5b,0x95,0x38,0xf6,0x39,0xe6,0x89,0xb5,0x2e,0xf1,0x3a,0xd9,0xe2,0xec,
    0xec,0x93,0x61,0x6d,0x1d,0xa7,0x4d,0x89,0xd7,0x17,0x70,0xe3,0xec,0x5b,0xc2,0x58,
    0xce,0x39,0x6d,0x4b,0xac,0x7f,0x5f,0xc7,0xd9,0x2f,0x3b,0xff,0x81,0xe3,0xb4,0x2b,
    0xd1,0xe7,0xfd,0x1c,0x67,0xff,0xec,0xbc,0xb7,0xe3,0xb4,0x2f,0x71,0xde,0xd9,0xdf,
    0x71,0x3a,0x94,0x38,0x97,0x5b,0xf9,0x80,0xac,0x7c,0xa9,0xd3,0x39,0xb0,0x44,0xce,
    0x01,0x4e,0xe7,0xa0,0xec,0xfc,0x48,0xa7,0x73,0x70,0x56,0xfe,0x9d,0xd3,0xe9,0x58,
    0x22,0x07,0x38,0xfa,0x1a,0xf1,0xea,0x54,0x62,0x8c,0x10,0x13,0xb4,0x19,0x6d,0x82,
    0xcf,0xf0,0x09,0x75,0x40,0x07,0x7d,0x7d,0x58,0x89,0x7d,0xdd,0x52,0xe5,0xb3,0x4b,
    0x9c,0x0f,0x8e,0xd6,0xb5,0x89,0x72,0x2f,0x61,0x56,0x3e,0xbf,0x94,0xaf,0x07,0x7e,
    0xa8,0x73,0x7f,0xad,0xf6,0x2f,0xe5,0xd7,0x05,0xca,0x0d,0xa5,0x7c,0x2e,0x6f,0x2c,
    0x91,0x5b,0xef,0xe4,0x13,0x4a,0x9c,0x9b,0x91,0xd7,0x20,0xbf,0xbe,0xc4,0xeb,0x1b,
    0xfd,0x3d,0x4d,0x72,0xe3,0x4e,0x2c,0x31,0xf7,0xa0,0x8c,0x35,0xc2,0xef,0xb9,0xf4,
    0xdc,0x51,0x7e,0xa2,0x5a,0x9e,0xd8,0xcd,0xca,0x2b,0x28,0x3f,0xd1,0xca,0x4f,0x55,
    0xcb,0x27,0x9e,0x68,0xf6,0x56,0x97,0xb8,0x8e,0x68,0x95,0x95,0x3f,0x2e,0xf1,0xfa,
    0x29,0x39,0x7b,0x87,0x56,0xd7,0x71,0x4d,0x27,0x5b,0xb9,0x73,0x56,0xbe,0x79,0xef,
    0x79,0x27,0x58,0xf9,0xc8,0xac,0xbc,0xf8,0x94,0xbd,0x77,0xd4,0x77,0x54,0x56,0x7e,
    0xb5,0xf1,0x83,0xae,0xb8,0x3e,0x60,0xeb,0xdb,0xf5,0xd4,0x01,0x0f,0x32,0xe3,0x75,
    0xcb,0xce,0x47,0xef,0x5e,0xea,0xd6,0x45,0x31,0xc4,0x1a,0xb1,0xe8,0xea,0x1d,0x5b,
    0xad,0xf7,0xad,0x1d,0x7e,0x36,0x66,0xe5,0x31,0x17,0x1c,0x53,0x67,0xe5,0xbb,0xea,
    0xf3,0xf5,0x07,0xf8,0x7f,0xca,0xca,0x5f,0x7d,0xf9,0x65,0x57,0x2b,0xaf,0xc9,0xca,
    0xdb,0xb7,0x8d,0x3f,0xc1,0xfc,0x58,0x5b,0x4f,0xce,0x1a,0xfd,0xa2,0x2f,0xbe,0xa9,
    0xe7,0x35,0x67,0x7d,0x73,0x4d,0x99,0xe5,0xba,0xea,0x7a,0x32,0x2e,0xcc,0x28,0xb3,
    0xaf,0xca,0x85,0xe6,0x7f,0x45,0xfd,0xb6,0xc9,0x34,0x67,0x66,0x42,0xf0,0x30,0x16,
    0x66,0x89,0x08,0xac,0x8b,0xca,0xb3,0x85,0x41,0x7e,0x4f,0x99,0x39,0x2d,0xd6,0xd8,
    0xc5,0xb8,0xfb,0x67,0x99,0x7d,0xbd,0x49,0x75,0x5e,0x1e,0xb0,0xce,0x62,0x4d,0x9d,
    0x75,0xd5,0x39,0x86,0x76,0x1a,0x02,0x62,0xe0,0x76,0x51,0x79,0x54,0x90,0x8f,0x03,
    0x9c,0x5e,0x19,0x58,0xee,0x63,0x4e,0xc7,0x3a,0x19,0xd8,0x10,0xad,0x0d,0xad,0xfe,
    0x13,0x2b,0x1c,0x67,0x3e,0xb7,0x74,0xaf,0x30,0xb7,0x34,0xb9,0x6b,0xac,0x47,0x85,
    0xb9,0x73,0x80,0x1b,0xa7,0x27,0x55,0x38,0x1e,0xfd,0x61,0x79,0xf1,0x64,0xc7,0x1f,
    0xe0,0xf2,0xe5,0x29,0xce,0x76,0x93,0xc3,0x4f,0xad,0x30,0x6f,0xd9,0x61,0xf8,0x69,
    0x15,0xce,0x33,0x76,0x58,0x7b,0x4e,0x77,0x7e,0xf7,0x75,0x79,0xfa,0x8c,0x0a,0xd7,
    0x03,0x76,0x14,0xb3,0x3e,0x02,0x7e,0x49,0x85,0xe7,0xf0,0x7b,0x96,0xce,0x61,0x27,
    0xce,0x92,0xec,0xb1,0x59,0x1b,0xeb,0x74,0x4d,0x16,0x34,0x1e,0xbe,0xcc,0x90,0xb2,
    0xae,0x79,0xac,0x01,0xc6,0xc4,0xcc,0x13,0x5d,0x34,0x3f,0xfc,0x33,0x68,0x5e,0xfe,
    0xc6,0x95,0x91,0x53,0xf6,0x0e,0xf3,0x32,0xe6,0xc4,0x67,0xca,0x79,0x19,0x73,0xdc,
    0x46,0x95,0xff,0x2f,0xab,0xed,0x2a,0xf5,0xdd,0xbf,0xb3,0x73,0x8c,0x83,0xab,0x03,
    0xd6,0x8f,0xdf,0xae,0x5a,0xff,0x8f,0x0f,0x98,0x87,0xce,0xc9,0xb4,0xa0,0x37,0x21,
    0x20,0x36,0x3e,0xc8,0xc7,0xe4,0x24,0xf5,0x69,0x53,0x40,0x39,0xfa,0xb6,0x7b,0x86,
    0xe1,0xfa,0x9a,0x18,0x30,0x6f,0xc1,0x7e,0x57,0x8d,0x91,0x9f,0x04,0xc4,0x57,0x65,
    0x1c,0x94,0x6f,0x08,0x88,0x61,0x9e,0x7f,0x4e,0xd8,0x4d,0xc2,0x90,0xd3,0x0c,0xbb,
    0x39,0x20,0x77,0x88,0xea,0x04,0x76,0x8b,0xf4,0x20,0x3b,0x57,0xd8,0xd4,0x80,0xbe,
    0x54,0x33,0x92,0xb0,0x5b,0x03,0xe2,0xe0,0x9f,0x97,0x21,0xf0,0x77,0x51,0x4a,0xdc,
    0xb8,0x56,0xcf,0xed,0xaa,0x67,0xa3,0xab,0x67,0x9a,0xca,0xb7,0xbb,0x7a,0xa6,0x4b,
    0xb7,0xe8,0xea,0xf9,0x59,0x40,0x7c,0x9a,0xab,0xe7,0xde,0x94,0x38,0xea,0x2b,0xba,
    0x7a,0x66,0x05,0x6c,0x27,0xf2,0xb4,0xc5,0x62,0x8e,0x30,0x8c,0xd1,0xde,0x8a,0xeb,
    0xdc,0x80,0x5c,0xc8,0x26,0x0a,0xbb,0x33,0xa0,0x5d,0xc8,0xc6,0xeb,0x7e,0xf0,0xae,
    0x80,0x38,0x62,0x8f,0xb5,0xdc,0xe8,0x32,0xd7,0x77,0x03,0x5c,0xec,0xaf,0x28,0x13,
    0x1f,0xaf,0x39,0x6d,0x4c,0x99,0x98,0xe9,0x5c,0x29,0x9d,0x06,0xa7,0x33,0xb6,0x4c,
    0xdc,0x74,0xae,0x2a,0x13,0xeb,0xad,0x6b,0xf4,0xea,0x32,0xed,0x00,0x7f,0x38,0xc3,
    0x90,0xcf,0xc6,0x95,0xe9,0x0f,0x64,0x77,0x66,0x7a,0xc8,0x6f,0x8d,0xc2,0x31,0xf6,
    0xae,0x53,0x7e,0xfa,0x1a,0x73,0x53,0x76,0x7e,0x6d,0x76,0x00,0xc3,0xf8,0xc3,0xf9,
    0x57,0xd9,0xef,0x55,0x1a,0x8f,0xc0,0x9f,0x56,0x5d,0x4d,0xb2,0x8b,0x5c,0xf1,0x9c,
    0xb0,0x1b,0x85,0x21,0x57,0xa0,0x6f,0xe0,0xe3,0xe4,0x32,0xf1,0x82,0xfa,0x10,0xd8,
    0xcd,0x65,0xb6,0x0b,0x32,0xe3,0x4d,0x11,0xcf,0xfa,0x10,0xd8,0xd4,0x32,0xb9,0x90,
    0x99,0xee,0xed,0xd2,0x05,0x66,0xbc,0xe9,0x65,0xe2,0xb0,0x87,0x58,0x21,0xff,0xce,
    0x51,0xee,0x35,0xfb,0xf3,0xca,0xf4,0xd9,0x8f,0x91,0xbb,0x14,0x73,0xdf,0xef,0x0b,
    0xca,0xc4,0xd1,0xef,0x16,0xe7,0x85,0x65,0xe2,0xe6,0xc3,0xcf,0xcb,0xb4,0xb7,0xd0,
    0xd9,0x5f,0x24,0xfb,0x05,0xe7,0xff,0xe2,0x32,0xb9,0x8b,0xd4,0xaf,0xc8,0xff,0xf7,
    0xaa,0x5f,0x9b,0xd4,0xaf,0xe0,0xdd,0x27,0xdc,0xf4,0x96,0x94,0xa9,0x0b,0x7c,0x68,
    0xc6,0xc1,0xfc,0xb2,0x54,0x6d,0x1a,0x98,0x71,0x90,0xc3,0xee,0x17,0xb6,0xc4,0x8d,
    0x99,0x07,0x64,0xbb,0xd1,0x8d,0x99,0x5f,0x94,0x89,0x3f,0x90,0x71,0xd0,0xf7,0x0f,
    0x96,0x89,0x21,0x67,0xa2,0xff,0x1f,0x76,0xfd,0x0f,0xd9,0x2f,0xb3,0xe3,0x11,0xf5,
    0x3f,0xce,0x2d,0xdf,0xfc,0xba,0xcc,0x3a,0x71,0xd4,0x29,0x47,0x62,0x6c,0x3c,0x2c,
    0xee,0x23,0x8e,0xfb,0xa8,0xe3,0x5a,0x6e,0xf2,0x5c,0xfc,0x6e,0x15,0xf7,0xcc,0x0a,
    0x6d,0xa3,0xae,0x47,0x55,0xb7,0x5d,0xd7,0x8b,0x03,0xca,0x8b,0xd5,0x6b,0x90,0x73,
    0xce,0x83,0x01,0x71,0x7f,0xac,0x52,0x4c,0x1e,0x0a,0x28,0xbf,0x5e,0xb9,0x0a,0xd8,
    0xaf,0x02,0xe2,0x27,0x55,0x72,0xbb,0x8f,0x04,0xc4,0xf1,0xb7,0x5a,0xd8,0x6f,0x02,
    0xe2,0x58,0x6b,0x19,0xef,0xb7,0xe2,0x15,0x1d,0xef,0xb1,0x80,0x38,0xd6,0x65,0xcf,
    0x08,0xfb,0x5d,0x40,0xfd,0xc7,0x5c,0x4e,0xfa,0xbd,0x74,0xeb,0x9c,0xee,0x13,0x01,
    0x71,0xc4,0xde,0x74,0x97,0x07,0xd4,0x7f,0xc2,0xe9,0xae,0x90,0x6e,0xc9,0xe9,0x3e,
    0x15,0x10,0xdf,0xe4,0xea,0xfd,0x43,0x40,0xfd,0xa7,0x9c,0xee,0x7d,0x8a,0x59,0xc1,
    0xc5,0x6c,0x75,0x40,0xdc,0x1f,0x16,0xb3,0x67,0x02,0xca,0x7d,0xcc,0x9e,0x0f,0x88,
    0xfb,0x98,0xad,0x09,0x88,0xfb,0x98,0xad,0x0d,0x88,0xfb,0x98,0xbd,0x28,0x9e,0x8f,
    0xd9,0x4b,0x01,0x71,0x1f,0xb3,0x75,0x01,0xf5,0x5f,0x72,0xbe,0xaf,0x97,0xae,0x8f,
    0xd9,0xcb,0x01,0x71,0x1f,0xb3,0x57,0x02,0xea,0xbf,0xec,0x74,0x5f,0x95,0xae,0x8f,
    0xd9,0x6b,0x01,0x71,0x1f,0xb3,0x0d,0x01,0xf5,0x21,0xb3,0xbc,0xbe,0x34,0x60,0x2c,
    0x21,0xb3,0xeb,0x64,0xb9,0xae,0x93,0x21,0x9a,0xa3,0x57,0xb8,0xeb,0x04,0xb2,0x27,
    0xb3,0x63,0x85,0xc6,0x33,0xce,0x6d,0x2e,0xf9,0x63,0x99,0x76,0x36,0x16,0x72,0x5b,
    0x2b,0xcb,0xc4,0x37,0xe9,0x3a,0x30,0xbd,0x15,0xba,0x0e,0xc0,0x59,0x55,0x66,0x9d,
    0xb8,0x36,0x56,0xca,0xfe,0x09,0x59,0xbd,0xcf,0x28,0x2f,0x9a,0xfd,0x36,0x21,0xed,
    0xc3,0x2f,0x5c,0xf7,0xd8,0x37,0x6a,0x1b,0x72,0x7d,0x01,0x99,0xe5,0x94,0xfd,0x42,
    0xe2,0xcf,0x29,0xa7,0xb4,0x0b,0x89,0x21,0xef,0x3c,0x2d,0x6c,0xff,0x90,0xf8,0x1c,
    0xe5,0x3a,0xd8,0x6f,0x1f,0x12,0xff,0x85,0x7c,0x3f,0x30,0x6c,0x1e,0x87,0x43,0xc3,
    0x3c,0x0e,0x90,0x1d,0x94,0x1d,0xc0,0xd0,0x9e,0x83,0xc2,0xdc,0xcf,0x4e,0xe1,0x7f,
    0xc7,0xe1,0x90,0x90,0xb8,0xc5,0xc1,0xf4,0xf0,0x6b,0x71,0x38,0x2c,0x64,0x9d,0x88,
    0xcd,0x21,0xb2,0x8f,0x7a,0x3f,0x8a,0xf2,0x7a,0xc1,0x39,0x3c,0x3b,0xba,0x48,0x1f,
    0xe7,0xe7,0x64,0xab,0x2a,0xac,0x93,0x3a,0x87,0xec,0xcf,0xa5,0x41,0xbe,0xb7,0x5e,
    0x74,0xeb,0x87,0xa3,0x42,0xae,0x53,0xd0,0xce,0xde,0x5a,0x4b,0x7e,0x3b,0x24,0x6e,
    0xc7,0x0d,0x19,0x17,0xf8,0xd1,0x21,0xf7,0x42,0x20,0x5f,0x25,0xec,0x3b,0x21,0xeb,
    0x80,0x6c,0xbc,0xf6,0x5b,0x8e,0x09,0x89,0xa3,0xed,0x28,0x7f,0x2f,0x24,0x86,0xb5,
    0xeb,0x24,0x61,0xc7,0x87,0xc4,0xb1,0xce,0x45,0xdb,0xd1,0x1e,0xf8,0x8e,0x36,0xac,
    0xcd,0xfc,0x80,0x6f,0x27,0x28,0x66,0xdb,0x94,0xc3,0x6d,0xfe,0xe9,0x16,0x52,0x66,
    0xe5,0x1e,0xe2,0xad,0xc9,0xb4,0x50,0x3e,0x29,0x24,0x36,0x4c,0x6b,0x0c,0xb3,0x77,
    0xaa,0x78,0xd8,0x77,0xf1,0xf6,0x4e,0x0b,0x29,0x33,0xfd,0xb3,0xa4,0x3f,0xb6,0x46,
    0xbf,0x97,0xf4,0xe7,0xd7,0xf8,0x73,0x4e,0x48,0x99,0xe9,0xf7,0x91,0xfe,0x70,0xe9,
    0xdb,0x3c,0x76,0x41,0x48,0xdf,0xe1,0x9f,0x61,0x7d,0x43,0xd6,0x7f,0x96,0xc3,0xfa,
    0x87,0xb4,0xd9,0x27,0xcc,0xc7,0xe1,0x45,0x21,0xf5,0x1f,0xd4,0xd8,0x19,0x18,0x12,
    0xeb,0xa8,0x79,0xeb,0x43,0x37,0x1e,0x20,0x1b,0x94,0x1d,0x4f,0x69,0x3c,0x0c,0x72,
    0x31,0xbd,0x58,0x6d,0x18,0x56,0x68,0x3e,0xa7,0x0f,0x0d,0x29,0x33,0xde,0x25,0x2e,
    0xf6,0x9e,0x37,0x22,0xa4,0x6c,0xb5,0x7c,0x1d,0x19,0x12,0x6b,0x52,0x4e,0x01,0x76,
    0x69,0x48,0x7b,0x23,0x9d,0xbd,0x06,0xd9,0xbb,0x5c,0x6b,0x38,0xb3,0x37,0x2a,0xa4,
    0xcc,0x78,0x63,0xc4,0x1b,0x5b,0xc3,0xbb,0x32,0xa4,0xcc,0x78,0x57,0x8b,0x37,0xab,
    0x86,0x77,0x4d,0x48,0x99,0xf1,0xae,0x15,0x6f,0x78,0x0d,0xef,0xba,0x90,0x32,0xe3,
    0x4d,0x10,0xaf,0xa1,0x86,0x77,0x7d,0x48,0x99,0xf1,0x7e,0x22,0x9e,0xdd,0xaf,0x59,
    0x6e,0xbd,0x21,0xa4,0x6c,0x8e,0xcb,0xad,0x93,0x43,0xe2,0xc8,0x43,0xc8,0x5d,0xb8,
    0x47,0xc2,0x9e,0x9b,0xe5,0xa9,0x5b,0x42,0xde,0x37,0x4d,0x76,0x79,0x6a,0x4a,0x48,
    0xdc,0xc6,0xc2,0x6d,0x21,0xef,0xf3,0xb0,0xf6,0xb3,0x35,0xd9,0xed,0x21,0xf3,0xf3,
    0x6d,0x2e,0xbf,0x4c,0x0b,0x89,0x6f,0x74,0xbe,0xdf,0x11,0x12,0x37,0xbd,0x99,0xd2,
    0x9b,0xea,0xf2,0xe7,0xac,0x90,0xf8,0x10,0xa7,0x37,0x3b,0x24,0x6e,0xfd,0x39,0x2f,
    0xa4,0xad,0xd9,0xca,0x3d,0x0b,0x5d,0xce,0x43,0x9e,0x9e,0x9f,0x95,0x17,0x6a,0xac,
    0xe1,0xdc,0xf2,0xdb,0x82,0x90,0xba,0x4d,0xca,0x6f,0xc6,0x59,0xe8,0xf2,0x5b,0xdf,
    0x0a,0x73,0x3d,0xc6,0x28,0xf8,0x5e,0xff,0x6e,0xe9,0x2f,0xb1,0x39,0xc7,0xd5,0x0b,
    0xd9,0xa2,0xec,0x58,0x26,0x9b,0x8b,0x94,0xbf,0x90,0x5b,0xee,0x0b,0x39,0x06,0x31,
    0xb6,0x30,0x6e,0x2c,0xe7,0xdc,0x1f,0x52,0x66,0x39,0x67,0x85,0x74,0x97,0x29,0xc7,
    0xa1,0xad,0xbf,0x90,0xbf,0xf3,0x9c,0xbd,0x87,0x43,0x8e,0x2b,0x8c,0x99,0xeb,0x9d,
    0xbd,0x5f,0x87,0x94,0x9d,0x5a,0xc9,0xd7,0xc2,0x8f,0x86,0xb4,0x31,0xc5,0xe9,0xff,
    0x36,0x24,0x6e,0xc7,0x44,0xe9,0x3f,0x16,0xd2,0x06,0xe4,0x95,0x2c,0x5f,0x03,0x7b,
    0x3c,0x64,0x7e,0x3e,0x42,0x72,0xec,0xb3,0x62,0x4f,0xd5,0xfb,0xbb,0x42,0xf1,0x03,
    0xff,0xea,0x0a,0xdb,0x85,0xf6,0x3f,0xae,0x78,0x80,0xfb,0xa1,0xf2,0xe9,0x53,0x2e,
    0x87,0xfc,0x31,0x64,0xbe,0xb1,0x1c,0xb2,0x32,0x24,0x66,0x39,0xe4,0x03,0x97,0x43,
    0x20,0x5b,0x85,0x39,0x45,0x76,0x56,0xb9,0x6b,0xe0,0x19,0x97,0x1b,0xfc,0xb5,0xf2,
    0x6c,0x48,0x99,0xf1,0xfe,0xe4,0x72,0xcd,0x00,0xc7,0x5b,0x13,0x52,0x66,0x39,0x64,
    0x6d,0x48,0x0c,0xd7,0x8e,0x8d,0xd5,0x97,0xa4,0xfb,0x9e,0xbb,0x2f,0x5d,0x17,0x12,
    0xf7,0x63,0xf5,0xcf,0x21,0x71,0x1b,0xab,0xeb,0x43,0xda,0xfb,0xb3,0xf3,0xe3,0x2f,
    0xb2,0xf5,0x49,0x8d,0x1f,0xaf,0x86,0x94,0x59,0x9d,0x1b,0xc5,0x9b,0xe6,0xea,0x7c,
    0x3d,0x24,0x8e,0xf5,0x96,0xe9,0x6d,0x0a,0x89,0x5b,0x9d,0x7f,0x0d,0x69,0x6b,0x93,
    0xab,0xf3,0x6f,0x6e,0xae,0xf0,0x31,0x7a,0x33,0xa4,0xcc,0x78,0xff,0x10,0x6f,0x6e,
    0x0d,0xef,0xed,0x90,0x32,0xe3,0xbd,0x27,0xde,0x80,0x1a,0xde,0xe6,0x90,0x32,0xf3,
    0xf7,0x43,0xf1,0x3e,0x70,0x73,0xfc,0x27,0xca,0x0b,0x6d,0xc2,0xfc,0x5e,0xef,0xd3,
    0x90,0xdc,0x4f,0xc2,0x7c,0xec,0x7e,0x1e,0xb2,0x0f,0xb1,0x57,0x6f,0xd8,0xd6,0x90,
    0x31,0xc5,0x7e,0xbd,0xe5,0xa4,0x2f,0x42,0x72,0xb7,0xba,0x3c,0xf5,0x65,0x48,0xfc,
    0xaf,0xce,0xde,0xd7,0x21,0xdb,0xeb,0xed,0x6d,0x0b,0xd9,0x36,0x6f,0x6f,0x7b,0x48,
    0xee,0x36,0x67,0xef,0x9b,0x90,0x38,0xda,0xf7,0xb0,0xc6,0x2b,0x36,0x8a,0x50,0x0f,
    0x64,0xcb,0x14,0x97,0x62,0x44,0x7c,0x88,0xf6,0x0c,0xad,0x7d,0xa5,0x88,0x6d,0x84,
    0x1c,0xb9,0xf7,0x9b,0x9a,0xdc,0x5b,0x8e,0xb8,0x47,0x05,0x9e,0xe5,0xde,0x20,0x22,
    0x6e,0x3e,0x24,0xd1,0x7f,0xe7,0xde,0x34,0x62,0x0e,0x85,0xcc,0x62,0x5e,0x89,0x88,
    0xfb,0xdc,0xdb,0x22,0x22,0x6e,0x7a,0xbb,0x45,0xff,0x9d,0x7b,0x77,0x8f,0x88,0xfb,
    0xf1,0xbc,0x47,0x44,0x1c,0xd7,0xe3,0x3e,0x51,0xf3,0x3c,0xbb,0x57,0x56,0xde,0x47,
    0xd7,0xe3,0x5e,0xce,0xcf,0x56,0x11,0xeb,0x83,0xae,0xe5,0xce,0xd6,0x11,0x71,0xcb,
    0xbd,0xa6,0x87,0x5f,0xcb,0xbd,0xfd,0x95,0x7b,0x71,0x6d,0x83,0x0f,0x9b,0xb6,0xce,
    0xdd,0x57,0x36,0x2d,0xf7,0x76,0x74,0xbe,0x40,0xd6,0x36,0x3b,0x3a,0xc8,0x26,0xce,
    0x2d,0xd7,0xb5,0x8f,0xd8,0xe7,0x6f,0xab,0xef,0x50,0x77,0x47,0xf1,0x3a,0x38,0xde,
    0xc1,0x11,0xc7,0xda,0x7a,0x8d,0x19,0xcf,0xeb,0x18,0xe5,0xf9,0xad,0x67,0x85,0x36,
    0x51,0xc7,0xc1,0xaa,0xd3,0xf2,0xef,0x61,0x11,0xe5,0x3e,0xff,0x1e,0xa1,0x36,0x23,
    0x16,0x96,0xd3,0x3b,0x47,0xcc,0x2d,0x47,0x44,0x39,0xef,0xdb,0x11,0xf1,0xc0,0xf9,
    0xf4,0x9d,0x88,0xb8,0x1d,0x96,0xa7,0x8f,0x89,0x58,0x17,0xe4,0x96,0xa7,0x8f,0x8d,
    0xf2,0x3c,0x0d,0xb9,0xcf,0xd3,0x1f,0xd8,0x5a,0x36,0xca,0x73,0x6f,0xd7,0x88,0xeb,
    0x3a,0xcb,0xbd,0x27,0x44,0xc4,0x2c,0xf7,0xbe,0xef,0xe2,0x0b,0x59,0xb7,0xec,0x78,
    0x45,0x76,0x70,0x6e,0x79,0xa0,0x47,0xc4,0xeb,0x1b,0xcf,0xcb,0x66,0xb8,0x71,0x73,
    0x52,0x44,0xd9,0x8e,0xb5,0xae,0x78,0x5b,0x0a,0xcd,0x79,0xa7,0x45,0x94,0xd9,0xb8,
    0x3c,0x53,0x3c,0x3c,0xbb,0x32,0xce,0x59,0x11,0x71,0xbb,0x57,0xea,0x19,0x11,0xbb,
    0xa8,0x98,0xe7,0xbc,0xb3,0x23,0xda,0xea,0xe9,0xea,0xec,0x1d,0xe5,0xb9,0xcc,0xe7,
    0xd9,0x73,0x23,0xca,0x8c,0x77,0x7e,0x94,0xe7,0x46,0xbf,0xb6,0xfc,0x61,0x44,0x99,
    0xcd,0x0b,0x17,0x44,0xc4,0x06,0xb8,0xb5,0xe5,0x85,0x11,0xed,0x5d,0xe0,0xda,0xd0,
    0xcf,0xd9,0x33,0x5b,0x3f,0x8e,0x88,0x5b,0x1b,0xfa,0x47,0xc4,0xfa,0xbb,0x36,0x0c,
    0x88,0x68,0xaf,0x7f,0x94,0xeb,0x0d,0x8e,0x98,0x27,0xcd,0xd7,0xa1,0x51,0xbe,0xde,
    0xf3,0x6b,0xfe,0x61,0x11,0x65,0xe6,0xeb,0xf0,0x88,0xd8,0x1c,0xe7,0xeb,0x25,0x11,
    0xed,0x0d,0x77,0x6d,0xbf,0x54,0x79,0x60,0x44,0x4d,0xff,0x5d,0x16,0x51,0x66,0xbc,
    0x51,0xe2,0xa1,0x9f,0xe7,0x3a,0xde,0xe8,0x88,0x32,0xe3,0x5d,0x29,0x9e,0xbd,0xff,
    0x60,0xbc,0xb1,0x11,0x65,0xc6,0xbb,0x46,0x3c,0xdc,0xfb,0xf8,0x7a,0xc7,0x45,0x94,
    0x19,0xef,0x3a,0xf1,0x96,0xd4,0x8c,0x9b,0xff,0x89,0x28,0xb3,0xf6,0x4e,0x88,0x38,
    0xe6,0xfc,0xfd,0x73,0x93,0xb0,0x06,0x17,0x83,0x89,0x11,0xb9,0x4d,0x4e,0xf7,0x86,
    0x88,0xb1,0xf1,0xba,0x93,0x84,0x79,0xdd,0x9b,0x22,0x72,0x27,0x39,0xdd,0x9b,0x23,
    0xc6,0xca,0xeb,0x4e,0x11,0xe6,0x75,0xa7,0x46,0xe4,0x4e,0x71,0xba,0x3f,0x8d,0x38,
    0x6e,0xe7,0x38,0xdd,0xdb,0x85,0xcd,0x70,0xba,0xd3,0x22,0x72,0x6f,0x77,0xba,0xd3,
    0x23,0xc6,0xde,0xeb,0xce,0x10,0xe6,0x75,0x67,0x46,0xe4,0xce,0x70,0xba,0xb3,0x23,
    0xf6,0x87,0xd7,0x9d,0x2b,0xcc,0xeb,0xce,0x8b,0xc8,0x9d,0xeb,0x74,0xe7,0x47,0x1c,
    0xa7,0xbe,0xbd,0x0b,0x84,0xf9,0xf6,0x2e,0x8c,0xc8,0x5d,0xe0,0x74,0xef,0x8e,0xd8,
    0xbf,0x5e,0x77,0xb1,0x30,0xaf,0x7b,0x4f,0x44,0xee,0x62,0xa7,0x7b,0x5f,0xc4,0x3e,
    0xf7,0xba,0x4b,0x85,0x79,0xdd,0xfb,0x23,0x72,0x97,0xba,0x3c,0xfa,0x60,0xc4,0x7e,
    0x47,0x1c,0x17,0x3a,0xfc,0x57,0x11,0xfb,0x14,0x31,0xba,0x47,0xf9,0x19,0xf8,0x23,
    0x11,0x65,0x0f,0x3a,0xee,0x63,0x11,0xfb,0x10,0x31,0xb9,0xdf,0x71,0x1f,0x8f,0x28,
    0x03,0xd7,0xe6,0xf2,0xdf,0x47,0xdc,0xef,0xd9,0xe4,0xf6,0x90,0x9f,0x88,0x88,0x9b,
    0xbd,0x27,0x23,0x62,0x76,0xd8,0x1c,0xb2,0x22,0x62,0xfd,0x4f,0x3a,0x7b,0x4f,0xc9,
    0xde,0x10,0x67,0xef,0x0f,0x11,0x71,0xb3,0xb7,0x32,0x22,0x66,0x87,0xd9,0x5b,0x15,
    0xd1,0xc7,0x95,0x6e,0xfe,0x78,0x36,0x62,0x3d,0xab,0x1c,0xf6,0x7c,0x44,0x1c,0xcf,
    0xff,0x9e,0x16,0xb6,0x26,0x22,0x0e,0xcc,0x78,0x6b,0xd5,0xd6,0x35,0x6e,0xee,0x79,
    0xd1,0xcd,0x3d,0x6b,0x6b,0xe6,0x9e,0xf7,0x35,0x67,0xbc,0xe2,0x7c,0xdd,0x10,0x71,
    0xdf,0xe1,0x34,0xed,0x2b,0xd8,0x35,0xfd,0x7a,0x94,0xef,0xfb,0x80,0xf7,0x46,0xc4,
    0xbd,0x89,0xb3,0xb4,0xf7,0x60,0xf8,0xdf,0x22,0x72,0xed,0xb0,0xb6,0xbe,0x19,0x51,
    0xf6,0x86,0x6b,0xd7,0x5b,0x11,0xeb,0x7b,0x53,0x63,0x09,0xd8,0xdb,0x11,0xf1,0x93,
    0x5d,0x5b,0xdf,0x13,0x86,0xb6,0x3e,0x23,0x6c,0x73,0x44,0x2e,0x64,0xbe,0x2d,0xef,
    0xbb,0xf5,0xc0,0xb8,0x0a,0xdb,0x8f,0x39,0x11,0xcf,0x30,0x5f,0x71,0xb2,0xcb,0x2a,
    0xc4,0x20,0xdb,0xac,0xf9,0x13,0xeb,0xc4,0xea,0x33,0xec,0x16,0x9c,0x73,0x5f,0xd0,
    0xde,0xa2,0xe1,0x25,0x87,0xbf,0x59,0x68,0x3e,0x7f,0x7f,0xe0,0x6c,0x5f,0x53,0xe1,
    0x9c,0x8f,0xb5,0x09,0x7c,0xf0,0x3e,0x8d,0x50,0xbd,0x90,0x5d,0xe6,0x64,0xb0,0xdf,
    0xaf,0xc2,0x75,0x16,0x64,0xf0,0xc1,0xcb,0xce,0xab,0xb0,0x5e,0xc8,0x4a,0x92,0xf9,
    0x7b,0xb7,0x0f,0x5d,0x1d,0x57,0x55,0x78,0xaf,0x87,0x7b,0x3f,0xf8,0xe2,0x7d,0x1b,
    0xac,0xfa,0x21,0x1b,0xe1,0x64,0xa8,0xe3,0xc2,0x0a,0xef,0xb1,0x21,0xeb,0x57,0x23,
    0xeb,0xa5,0xfa,0x21,0x3b,0x4f,0x32,0xbf,0x17,0xf7,0x91,0xab,0xe3,0x0a,0xd5,0x81,
    0xbd,0x45,0xf8,0xe2,0x7d,0x1b,0x54,0xe1,0x7e,0x1e,0x64,0x83,0x9d,0x0c,0x75,0x5c,
    0xa0,0x35,0x26,0x64,0x17,0xd6,0xc8,0xce,0xae,0x30,0xe6,0x90,0xf5,0x92,0x0c,0x6b,
    0xa1,0x76,0x71,0xbe,0x16,0x02,0xe7,0xe3,0x0c,0x07,0x06,0x9f,0x3e,0x76,0x6b,0xd4,
    0x4f,0x35,0x7e,0x37,0x15,0xd8,0x9f,0x50,0xfb,0x2c,0x22,0x3e,0x47,0xef,0x25,0xed,
    0xb8,0xb7,0xd1,0x3a,0xe2,0x33,0xb7,0x2e,0xdc,0x12,0x71,0x4e,0xff,0xdc,0xcd,0x7f,
    0x5b,0x6d,0xdd,0x14,0x35,0xdf,0xbb,0xfb,0x6a,0x27,0xf7,0x02,0x5f,0x6b,0xae,0xfc,
    0xca,0xdd,0x0b,0xfc,0x3b,0x22,0xee,0xef,0x05,0xb6,0x45,0xc4,0x4d,0x0f,0x60,0xed,
    0xbd,0x40,0x51,0x2f,0x42,0xf8,0x7b,0x81,0xba,0x98,0xb8,0xf9,0x5b,0x1f,0xb3,0x5d,
    0xdb,0x14,0xa7,0x5d,0x5c,0x9c,0x10,0xe7,0x20,0x2b,0xef,0xa2,0x38,0xe1,0xdc,0xda,
    0x1e,0xc7,0xd4,0x85,0x3d,0x6b,0x4f,0x25,0xa6,0x1d,0x60,0x76,0xcf,0xd0,0x22,0x26,
    0x6e,0xf7,0x0c,0x66,0x0b,0xbf,0xd6,0x67,0x0d,0x15,0xf6,0x29,0xfa,0x01,0xfc,0x40,
    0xb2,0xea,0xfb,0x65,0x15,0xd6,0x03,0x59,0x2c,0x19,0xee,0xbd,0xf0,0xec,0x1f,0xef,
    0x1f,0x75,0xcf,0x5a,0x8a,0xfc,0xba,0x5b,0xcc,0xf7,0x01,0xb6,0xaa,0x7e,0xcb,0xb1,
    0xbb,0xc7,0x94,0x99,0xdf,0x7b,0xc6,0xc4,0x60,0xd7,0x72,0x51,0xcb,0x98,0xb8,0x1d,
    0x96,0x77,0x5a,0xc5,0x1c,0x87,0x90,0x5b,0x9e,0x6c,0x1d,0xe7,0x79,0x12,0x72,0x9f,
    0x27,0x6d,0x3c,0xb5,0x8b,0xf3,0x71,0x3c,0xba,0xc2,0x71,0x8e,0x71,0xdf,0x5a,0xb1,
    0xb4,0x76,0x5f,0xae,0x76,0x43,0x86,0x18,0x40,0xb6,0xd4,0x9e,0x09,0xc4,0x7c,0x56,
    0x71,0xb9,0xf6,0x95,0x0e,0x96,0x6d,0xfc,0xda,0xb8,0xac,0x6f,0x41,0xde,0x12,0xbd,
    0x17,0x87,0xf6,0xe0,0x7d,0x9b,0xb2,0x70,0x3b,0x96,0xa9,0x9d,0x41,0x0b,0xca,0xe0,
    0xf3,0x68,0xf7,0xfc,0xb8,0x53,0x4c,0x19,0xfe,0x0c,0x3b,0x54,0x58,0xd1,0x61,0x87,
    0x0b,0xab,0xd3,0x73,0x2f,0xbc,0xdf,0xd8,0x39,0xa6,0x3e,0xf8,0x90,0xc3,0x27,0x8c,
    0xa3,0x97,0x6b,0x9e,0x79,0xae,0xcf,0x8e,0x97,0xf5,0x4c,0x66,0xbd,0x7b,0xfe,0x78,
    0x4c,0xcc,0x67,0x98,0xfe,0xf9,0xe3,0x09,0x31,0x71,0x7f,0xd8,0xb3,0xb4,0x6e,0x31,
    0xe5,0xfe,0x59,0x5a,0x8f,0x98,0xb8,0x7f,0x96,0x76,0x72,0x4c,0xdc,0x3f,0x4b,0x3b,
    0x25,0x26,0xee,0x9f,0xa5,0x9d,0x26,0x9e,0x7f,0x96,0x76,0x7a,0x4c,0xdc,0x3f,0x4b,
    0x3b,0x23,0xa6,0x3e,0x64,0xa6,0x7b,0x96,0x74,0xfd,0xb3,0xb4,0x9e,0x31,0x71,0xff,
    0x2c,0xed,0xec,0x98,0xfa,0x3d,0x9d,0xee,0x39,0xd2,0xf5,0xcf,0xd2,0x7a,0xc7,0xc4,
    0xfd,0xb3,0xb4,0x73,0x63,0xea,0xf7,0x76,0xba,0xdf,0x8b,0xf3,0xe7,0xbe,0x16,0xb3,
    0x0b,0x62,0xe2,0xfe,0xb0,0x98,0x5d,0x18,0x53,0xee,0x63,0xd6,0x2f,0x26,0xee,0x63,
    0xd6,0x3f,0x26,0xee,0x63,0x36,0x20,0x26,0xee,0x63,0x36,0x50,0x3c,0x1f,0xb3,0x41,
    0x31,0x71,0x1f,0xb3,0xc1,0x31,0xf5,0x07,0x39,0xdf,0x2f,0x96,0xae,0x8f,0xd9,0xd0,
    0x98,0xb8,0x8f,0xd9,0xb0,0x98,0xfa,0x43,0x9d,0xee,0x25,0xd2,0xf5,0x31,0x1b,0x11,
    0x13,0xf7,0x31,0x1b,0x19,0x53,0x1f,0x32,0x7b,0xfe,0x78,0x5c,0xcc,0x58,0x8e,0x54,
    0xfe,0xc0,0xbb,0x41,0xc7,0xb9,0xbc,0x70,0x4d,0xcc,0xdc,0x8c,0xfc,0x69,0xb9,0x71,
    0x5c,0xcc,0x6f,0x00,0x20,0xc3,0x3a,0x0e,0xef,0xd1,0x36,0xc6,0x7c,0xaf,0x68,0x88,
    0x7b,0xfe,0x7f,0x6d,0x4c,0x7c,0xc7,0xfd,0x4e,0x4c,0x6c,0x98,0xde,0x1d,0xdd,0x71,
    0xbf,0x13,0x53,0x66,0x7a,0x13,0x6a,0xf4,0xae,0x8f,0x89,0xd5,0x3e,0xcf,0x68,0x8a,
    0x29,0xdb,0xf1,0x4e,0x51,0x8d,0xde,0x0d,0x31,0xb1,0xda,0xe7,0x1b,0x37,0xc6,0x94,
    0xd9,0x5a,0xfb,0xa6,0x98,0x6d,0x6a,0x2c,0xe4,0xed,0x99,0xac,0xf6,0xdc,0xe4,0xec,
    0xdf,0x1c,0x13,0xb7,0xfb,0xdc,0x29,0xd2,0x9b,0xe0,0x9e,0x5b,0x4d,0x8d,0xc9,0x9b,
    0x12,0x37,0xbf,0xdf,0xbe,0x35,0xa6,0xcc,0x62,0x78,0x5b,0xcc,0xf7,0x46,0xaf,0x71,
    0x7e,0x4c,0x8b,0x89,0x7b,0x3f,0xee,0x90,0x1f,0xd3,0x9c,0x1f,0xd3,0x63,0xe2,0xe6,
    0xc7,0x0c,0xe9,0x4d,0x70,0x7b,0xba,0x33,0x63,0xf2,0x66,0xc4,0xee,0xf9,0x43,0x4c,
    0xbc,0xd9,0xf3,0x87,0x98,0x38,0xfa,0x7e,0x4c,0xcc,0x77,0xd7,0x6d,0xee,0x98,0x17,
    0xf3,0xdd,0x33,0xc4,0xeb,0x56,0x37,0x77,0xdc,0x19,0x53,0x66,0x6d,0xb9,0x2b,0xa6,
    0x1d,0xcc,0x97,0xcf,0xda,0x7d,0x53,0x4c,0xde,0x5d,0x6e,0x2c,0x2d,0x8a,0x89,0x37,
    0xb9,0xb9,0x71,0x71,0xcc,0xfe,0x5f,0xa4,0xb9,0x04,0xd8,0xbd,0x6e,0x2e,0x59,0xec,
    0xf2,0x38,0xde,0xa5,0x42,0x6e,0xfd,0x3c,0x25,0xa7,0x73,0x9c,0xbf,0x0b,0x62,0x39,
    0xf4,0x65,0x3d,0xd7,0x06,0x6f,0x52,0x85,0x1c,0xcc,0x0d,0xd0,0x59,0xaf,0xf7,0x8e,
    0xde,0xad,0xc9,0xc1,0xef,0x64,0xc7,0xc7,0xd2,0x7f,0xa7,0x9c,0xef,0x23,0x6d,0x2e,
    0xf3,0xfd,0x1e,0xcb,0xf3,0x1f,0x96,0x69,0x13,0x75,0x0e,0x2e,0x72,0x1e,0xfe,0x28,
    0xce,0xdf,0xb1,0x85,0x1c,0xd7,0xf9,0x50,0xc9,0x3e,0xde,0x89,0xcc,0xd6,0x53,0xcb,
    0x63,0xea,0x82,0x03,0x9f,0x56,0xba,0xf5,0x05,0x64,0x4f,0x66,0xc7,0x4a,0xcd,0x6d,
    0x4f,0xba,0x58,0x6f,0x91,0x0e,0x74,0x47,0xeb,0x7d,0xd3,0xad,0x31,0x71,0xe3,0x7c,
    0x19,0xb3,0x3e,0xcf,0xf9,0x2a,0x26,0x7e,0x4b,0xc6,0x41,0xf9,0xdf,0x31,0x31,0xe8,
    0xde,0x24,0x6c,0x5b,0x4c,0x1c,0xef,0xbf,0xa2,0x2f,0x80,0x6d,0x8f,0xed,0xdd,0x58,
    0xca,0xf1,0xce,0x2f,0xe5,0x41,0x55,0xfe,0xff,0x71,0xfe,0x9c,0x1b,0xdc,0x51,0x1a,
    0x23,0xdf,0xc4,0x94,0x59,0xdf,0x17,0x13,0x62,0x0d,0xee,0x5a,0xa9,0x4b,0xf8,0x6e,
    0x2d,0x64,0x0d,0xea,0x47,0x6b,0xf3,0x4a,0xad,0x07,0xaa,0xef,0x01,0x56,0x98,0xc7,
    0xd0,0x37,0xd0,0x41,0x3c,0x1e,0x51,0x1c,0x9f,0x8e,0xd9,0x4f,0x78,0x27,0x17,0x71,
    0x5c,0xeb,0xe2,0x08,0xd9,0xea,0xec,0x58,0x23,0x9b,0xab,0xe3,0x7c,0x9f,0xfe,0x39,
    0xf5,0xcd,0xe6,0x72,0xbe,0x8f,0xfd,0xbc,0xf2,0x34,0x64,0x96,0x47,0xff,0x14,0xb3,
    0x7e,0xc8,0xe0,0xdf,0x5a,0xd9,0x5a,0x53,0x53,0x5e,0xeb,0xfc,0x9d,0x5c,0xa1,0xde,
    0x6a,0xe5,0x5f,0x70,0x7f,0x29,0x7f,0x5f,0xaa,0xf1,0x77,0x83,0xf3,0x17,0xb2,0x75,
    0xd9,0xf1,0x9a,0x6c,0xae,0x73,0x7e,0xac,0x97,0x1f,0x78,0x77,0xde,0xda,0xf0,0x8a,
    0x6b,0xc3,0x0d,0xc2,0xfe,0x12,0xf3,0xbd,0xea,0x57,0xe2,0x3c,0x17,0xbc,0x1a,0x53,
    0xff,0x2f,0xf2,0x79,0x83,0xec,0xbf,0x56,0x53,0xde,0xe0,0xda,0x70,0x4b,0x85,0x7a,
    0xeb,0xd4,0x86,0xd7,0xdc,0x9c,0xf1,0x7a,0xcc,0x36,0x82,0x33,0xa2,0xc8,0x77,0xa9,
    0xfe,0xea,0xc6,0xfa,0xeb,0x71,0xfe,0x5c,0x07,0xcd,0x7b,0x43,0x63,0x76,0xb9,0xc3,
    0xde,0xd4,0x18,0x5e,0x5e,0xc8,0xf7,0x41,0xde,0x8a,0x89,0x0f,0x77,0x7b,0x1e,0x7f,
    0x8f,0xa9,0x0f,0x99,0x5d,0x97,0xff,0x88,0x89,0xdb,0xfc,0xf7,0x4e,0xcc,0xfa,0x0b,
    0x6e,0xae,0x7b,0x37,0x26,0xef,0x1d,0xc7,0xdb,0x2c,0x5e,0xd1,0xbd,0x57,0xf9,0x7e,
    0x4c,0xee,0x66,0xc5,0xe2,0x5d,0xe5,0x81,0x8f,0xcb,0xcd,0xcb,0xef,0xba,0xf7,0xc6,
    0xa6,0x54,0xa8,0x87,0x78,0xfd,0x53,0xb9,0xe3,0x9c,0xcc,0x5b,0xac,0x1f,0x3e,0x2d,
    0xf3,0x1d,0xdf,0x29,0x95,0xfc,0xfd,0xb3,0x7a,0xbd,0xc7,0x7d,0x8e,0xd6,0xca,0x9f,
    0x2b,0x8f,0x4c,0x72,0x9c,0x3a,0xe5,0x64,0xbc,0xe7,0xb1,0xa5,0x4c,0x8e,0xbd,0xe3,
    0xb1,0x47,0x42,0x6c,0x40,0x16,0x6b,0xc8,0xf7,0x4a,0xf2,0x58,0x6f,0x51,0x5e,0x99,
    0xa8,0x77,0x44,0x5a,0x26,0x94,0xe3,0x1d,0x65,0x7b,0x6f,0xa4,0x75,0x42,0x1c,0xef,
    0x27,0x9b,0xcd,0x7d,0x12,0xe2,0xb6,0xd7,0xd3,0x26,0x61,0x3d,0xc0,0x2d,0xdf,0xb5,
    0x4d,0x88,0x17,0x0a,0xf9,0x3d,0x41,0xbb,0x84,0xb8,0x1d,0xb6,0x3f,0xb1,0x7f,0x42,
    0x19,0xf8,0xf0,0xb3,0xfa,0x7c,0xc2,0xf9,0x09,0x39,0xfc,0x1c,0xad,0x6f,0x0c,0x3b,
    0x24,0x94,0x5b,0x4c,0x0e,0x94,0x2e,0x8e,0xa2,0x8b,0x89,0xc9,0x0f,0xae,0x91,0xd7,
    0xe9,0xb0,0xfa,0x3b,0x26,0xb4,0x71,0xb0,0xab,0xbf,0x93,0xab,0xbf,0x63,0x4d,0xfd,
    0x87,0x24,0x94,0x0f,0x53,0x4c,0x0f,0xdb,0x49,0x4c,0x87,0x48,0x76,0xc4,0x4e,0x64,
    0xf6,0x9e,0x4e,0xe7,0x84,0xba,0xe0,0x5c,0x21,0xdb,0x47,0x26,0xc4,0xcf,0x55,0x5e,
    0x3d,0x3a,0x61,0x7b,0xed,0x9e,0x01,0xd8,0x77,0x13,0xfa,0x50,0x70,0xd8,0xb1,0xc2,
    0x3c,0xef,0x38,0xe9,0xd6,0x39,0xac,0xab,0x78,0x75,0xea,0x17,0xd4,0x79,0x46,0xc2,
    0x7a,0x60,0x17,0x76,0x0c,0x3f,0x33,0xa1,0x0d,0x60,0x5d,0x85,0xe3,0x5b,0x8b,0xb3,
    0x64,0x17,0x7a,0xe0,0x60,0xac,0xf7,0x4c,0x38,0xd6,0xf1,0x8b,0xb1,0x0e,0xfd,0x7b,
    0x2b,0x6c,0x0f,0xc6,0xff,0xf6,0xec,0x7c,0xb0,0x64,0xf0,0xe3,0x9e,0x0a,0xe7,0x03,
    0xc8,0x2e,0x4c,0x72,0x59,0x75,0x5e,0xaf,0x70,0xde,0x86,0xec,0x62,0xc9,0x7e,0xad,
    0x1c,0x78,0x4e,0x42,0x39,0x72,0xfe,0x17,0x59,0xcc,0x86,0x4a,0x6e,0x79,0x10,0xf2,
    0xde,0xd9,0x31,0x54,0xfe,0xe0,0x7c,0x7a,0xa6,0x0b,0x7f,0xfa,0x24,0xf4,0x1d,0x7e,
    0xcd,0x54,0x3c,0x2e,0x48,0x88,0xe3,0xb0,0x79,0xe9,0x42,0xc5,0xb1,0x9d,0xe4,0x4f,
    0xa8,0xee,0xbe,0x09,0x65,0xf0,0x1b,0xf9,0x77,0x90,0xab,0x17,0xb2,0x7e,0xd9,0x31,
    0x48,0xf5,0xe2,0xdc,0xe6,0xcb,0xfe,0x09,0xbf,0x6f,0x81,0xee,0xed,0xf2,0x65,0xa0,
    0xea,0xec,0xaf,0xf8,0x99,0xde,0x20,0x17,0x3f,0xc4,0xac,0x8f,0xda,0x33,0x50,0xf6,
    0xc1,0x1d,0x2c,0x2e,0x7e,0x6d,0x2d,0x74,0xb1,0xe2,0x32,0xa7,0xd0,0xbc,0x3f,0x10,
    0x87,0xc7,0xe5,0xff,0xf0,0x84,0x71,0x3f,0x54,0xf3,0x47,0xa3,0xf3,0x1f,0xb2,0x4b,
    0xb2,0x63,0x84,0xf4,0x2e,0x51,0x5d,0x8d,0x2a,0x8f,0x70,0x63,0xf2,0x52,0xc5,0xb0,
    0x50,0xc8,0x63,0x76,0x59,0x92,0xe7,0xab,0x4b,0x1d,0xb7,0x41,0xdc,0xa2,0xe3,0x8e,
    0x72,0xdc,0x86,0x6a,0xdc,0x39,0x26,0x46,0x0b,0x37,0x7b,0xa3,0x9c,0x9d,0x31,0xb2,
    0x53,0xe7,0xec,0x5c,0xe9,0xec,0x8c,0x71,0x76,0xc6,0x3a,0x3b,0xb0,0x79,0xa5,0xeb,
    0x8b,0xab,0x13,0x7e,0xc3,0x33,0xd6,0xf5,0xc5,0x38,0xd9,0xbe,0xba,0xa6,0xcd,0x8d,
    0xae,0x2f,0xee,0xab,0xf0,0x9b,0x20,0xc4,0x65,0x9c,0xe2,0x64,0xd7,0xec,0x75,0xca,
    0xb1,0x36,0xa6,0xc6,0x27,0xc4,0xa0,0x73,0x71,0x91,0x3e,0x5d,0xef,0xf2,0xc0,0x78,
    0xe5,0x93,0xe1,0x92,0x4d,0xdc,0x89,0xec,0x51,0xf5,0xd9,0x8d,0x09,0x31,0xe8,0xdb,
    0x1a,0x1e,0xdf,0x8a,0xe3,0xbb,0x23,0x7b,0xb6,0x7e,0x53,0x42,0x1e,0xf0,0x4d,0x4e,
    0xf7,0x16,0xe9,0xc2,0xbe,0x71,0xa7,0x26,0xc4,0x8d,0x6b,0x73,0xd9,0xad,0x09,0xed,
    0x4c,0x55,0x5e,0x03,0x76,0x9b,0xf3,0xeb,0x56,0xf9,0x65,0xf3,0xe1,0x1d,0x09,0xe5,
    0x85,0xea,0xf7,0x5e,0x7c,0x1f,0x71,0xba,0xf8,0x88,0xc5,0x1d,0x49,0xce,0x9d,0x29,
    0x6e,0xd1,0x71,0x67,0x39,0xee,0x4c,0x17,0xcb,0x6f,0xa5,0xb4,0x73,0x93,0xfa,0x66,
    0xd7,0x94,0xd8,0x5a,0xad,0x1b,0x81,0xed,0x96,0xe6,0x79,0x1e,0xf2,0x06,0xcd,0x7d,
    0xbb,0xa7,0x94,0x99,0xad,0xbd,0x53,0xd6,0x63,0xb6,0x5a,0xa6,0xc4,0xbc,0xad,0x56,
    0xce,0x56,0x4b,0x67,0xab,0x75,0x4a,0x19,0xf6,0xdc,0xb0,0xff,0xb3,0x34,0xa1,0x7d,
    0xe0,0xf3,0xf5,0x3d,0xc2,0xfd,0x09,0x71,0x5c,0x4b,0x71,0x9a,0x5f,0x4b,0xc0,0x97,
    0x65,0x07,0xb0,0xea,0x7b,0x4b,0x2e,0x16,0x6d,0x53,0xda,0xf1,0xfb,0x01,0xfb,0xa5,
    0xc4,0x07,0xb8,0x7b,0xb0,0xf6,0xc2,0x9a,0xdc,0xba,0xa4,0x43,0x4a,0x2e,0x64,0x66,
    0xef,0x40,0xd9,0xf3,0xfb,0x06,0x07,0xa5,0xc4,0x9b,0x9c,0xbd,0x4e,0xc2,0x1a,0x9c,
    0xbd,0x43,0x52,0x72,0x3b,0x39,0x7b,0x87,0xc9,0x9e,0xdf,0x4b,0x38,0x3c,0x25,0xee,
    0xfd,0x3b,0x52,0x98,0xf7,0xef,0xa8,0x94,0x5c,0xc8,0x76,0xbc,0xa3,0x9a,0xd2,0x6f,
    0xd4,0x05,0xb9,0xad,0x21,0x1e,0x4a,0xd8,0x37,0x56,0x7e,0x38,0x21,0xd7,0xd6,0x14,
    0xbf,0x4a,0xc8,0x79,0x58,0x79,0xb9,0xfa,0x1e,0x97,0xc6,0x50,0x28,0xb9,0xe9,0xfe,
    0x26,0xe1,0x98,0x31,0xdd,0xc7,0x12,0x62,0x5e,0xf7,0x77,0x4e,0xf7,0x31,0xb7,0xf6,
    0x78,0x22,0xa1,0x5d,0xc8,0x1f,0x52,0x5f,0x2f,0x4f,0x88,0x63,0x4f,0xcf,0xb0,0x15,
    0xe2,0x00,0x3b,0x57,0xd7,0xd7,0x1f,0x12,0x72,0x6d,0x1e,0xae,0xbe,0xab,0x95,0x90,
    0x5b,0x28,0xe4,0xfb,0x8e,0xab,0x12,0x72,0x57,0x26,0xf9,0x3e,0xe3,0xd3,0x09,0x71,
    0xdb,0xff,0xb6,0xf5,0xe9,0xea,0x84,0x32,0xeb,0x8f,0x67,0x13,0x8e,0x39,0xff,0x2d,
    0xd2,0x73,0x09,0x71,0x70,0xcf,0x53,0x9c,0xe3,0x0a,0xf1,0xb8,0x45,0x73,0x7f,0xd6,
    0xc8,0xc7,0xa2,0xc3,0x5e,0x90,0x8f,0x45,0xe7,0xe3,0x8b,0x09,0xb9,0x2f,0x38,0x1f,
    0x5f,0x4a,0x88,0xd7,0xfa,0xb8,0x2e,0xa1,0x6c,0xc7,0xfb,0xef,0xf2,0xd1,0x7f,0xa3,
    0xf2,0x72,0x42,0x7c,0x9d,0xf3,0x71,0x97,0x0a,0xf1,0xb8,0xd2,0xdc,0x9f,0x57,0xe5,
    0x63,0x9d,0xc3,0x36,0xc8,0xc7,0x3a,0xe7,0xe3,0xc6,0x84,0xdc,0x0d,0xce,0xc7,0xd7,
    0x13,0xe2,0xb5,0x3e,0x6e,0x4a,0x28,0x33,0x1f,0xff,0x57,0x3e,0xd6,0x39,0x1f,0xdf,
    0x48,0x88,0x6f,0x72,0x3e,0xee,0x51,0x21,0xbe,0x8b,0xe6,0x9a,0xea,0x3d,0xbf,0x9b,
    0x27,0xd1,0x8f,0x7f,0xc7,0x9a,0x46,0x73,0x04,0xce,0xef,0x57,0x3e,0x78,0x47,0x7d,
    0x5c,0x5d,0xfb,0x4b,0xfe,0x6e,0x92,0xef,0x4d,0xbf,0xa7,0x71,0x80,0x7c,0xf0,0x8e,
    0xec,0x58,0x3b,0x36,0x27,0x94,0xd7,0xb6,0xe3,0xfd,0x84,0x32,0xbb,0x47,0xfb,0x28,
    0x61,0x5e,0x78,0xdf,0xf9,0xdc,0xaa,0x42,0xdc,0xfa,0x1e,0x3e,0x7f,0xee,0x7c,0x46,
    0xbf,0xfe,0x2b,0x3b,0x3e,0x97,0x4f,0xff,0x72,0x3e,0x7f,0xa6,0x3e,0x87,0xcf,0x26,
    0xff,0xdc,0xf9,0xbc,0x45,0xe3,0x02,0xed,0xf8,0x4c,0x76,0xcc,0xe7,0xad,0x09,0xe5,
    0xb5,0x3e,0x7f,0x91,0x50,0x66,0x3e,0x7f,0x95,0x30,0xf7,0x7c,0xe1,0x7c,0x6e,0x5b,
    0x21,0xde,0x4a,0x63,0x01,0x3e,0x17,0x5d,0x0e,0x45,0x3f,0x6f,0xc7,0x18,0x55,0x0e,
    0xdd,0xee,0x7c,0xc6,0x3f,0xa8,0xd8,0x20,0x9f,0x4d,0x8e,0x5f,0xf3,0xb9,0x2e,0xe5,
    0x38,0xa9,0xc6,0x20,0xa5,0x1d,0xf3,0xb9,0x94,0x52,0x5e,0xeb,0x73,0x7d,0x4a,0x99,
    0xf9,0x1c,0x2a,0xbf,0x01,0x37,0x9f,0x3b,0x54,0x88,0xb7,0xd5,0xd8,0x40,0xfd,0x96,
    0xe3,0x63,0xd5,0x0f,0xde,0x03,0x15,0x8e,0x35,0xac,0x1f,0x30,0x9e,0x8a,0x4e,0xb6,
    0xac,0xc2,0xfc,0x0a,0x59,0x07,0xc9,0x6c,0x8c,0x7e,0x37,0xa5,0xdc,0xcf,0x0d,0xc7,
    0xa6,0xc4,0xe7,0xbb,0xb9,0xf7,0xfb,0xe2,0xf9,0x9c,0x7f,0x5c,0x4a,0xbc,0xd1,0xe5,
    0xe3,0xe3,0x53,0xea,0x1f,0xe7,0xea,0xf8,0x81,0x74,0xeb,0x1c,0xaf,0x6b,0x4a,0xee,
    0x0f,0x1c,0xaf,0x7b,0xca,0x76,0x78,0x5f,0x7a,0xa4,0xc4,0xbd,0x2f,0x27,0x8b,0xe7,
    0x7d,0x39,0x25,0x25,0xee,0x7d,0x39,0x35,0xa5,0xfe,0x29,0xae,0x8e,0xd3,0xa5,0xeb,
    0x7d,0x39,0x23,0x25,0xf7,0xf4,0x34,0x5f,0x9b,0xb4,0x08,0xe8,0x23,0x64,0xb6,0x07,
    0xb6,0xbb,0xc3,0x30,0x76,0xf6,0x0c,0xf2,0xb1,0x03,0xd9,0x1e,0xd9,0xb1,0xa7,0xbe,
    0xff,0xc3,0xb9,0xdd,0xbb,0xb5,0x0c,0x78,0x7f,0x6c,0xbe,0xf6,0x52,0x7c,0xfd,0xdc,
    0x76,0xae,0x30,0x3f,0xb7,0x9d,0x97,0x92,0x0b,0x99,0xe9,0xfe,0x50,0x31,0xf7,0xf3,
    0xec,0x8f,0x84,0xf9,0x79,0xb6,0x6f,0x4a,0xee,0x8f,0x9c,0x6e,0x7f,0xc5,0xdb,0xd7,
    0x3b,0x50,0x98,0xaf,0x77,0x50,0x4a,0xee,0x40,0x37,0xa7,0x0e,0x4e,0xe9,0x0f,0xec,
    0x0e,0x72,0xeb,0x9d,0x36,0x01,0x65,0x56,0xc7,0x70,0xf5,0x97,0xaf,0x63,0xa4,0x30,
    0x5f,0xc7,0xa5,0x29,0xb9,0x23,0x9d,0x6e,0x83,0xfa,0xd0,0xb7,0xed,0x0a,0x61,0xbe,
    0x6d,0x63,0x52,0x72,0xaf,0x70,0xba,0x57,0xa9,0xff,0x7c,0xbd,0xe3,0x84,0xf9,0x7a,
    0x1b,0x53,0x72,0xc7,0xb9,0xb6,0x5d,0x9b,0xd2,0x1f,0xd8,0x6d,0x74,0x6d,0x6b,0x17,
    0x50,0x76,0xa3,0xd6,0x72,0x37,0xa6,0xc4,0xd0,0x66,0x5b,0x77,0x4f,0x4e,0x59,0x86,
    0xcc,0xb0,0x29,0xe2,0x79,0xec,0xa7,0x29,0xc7,0xc1,0x8d,0xb2,0x07,0x6c,0x5a,0x4a,
    0x7c,0xb2,0xc3,0x7e,0x96,0x52,0x1f,0x98,0xdd,0x3f,0xcc,0x48,0xc9,0x85,0xcc,0xf6,
    0x39,0x67,0xa6,0xf9,0x3e,0x27,0xe4,0xb8,0x3f,0xc4,0xfd,0xde,0x32,0xdd,0xa7,0xcc,
    0x4e,0xf9,0x6c,0x1d,0xff,0xd3,0x00,0xff,0xc7,0xc0,0xf6,0x4c,0xe7,0xa4,0xd4,0x9d,
    0x9d,0xe6,0xf7,0x34,0x73,0xdd,0x7a,0x14,0x72,0xdb,0x13,0x9d,0x97,0x52,0x66,0xeb,
    0xf8,0xf9,0xb2,0x89,0x67,0x48,0xab,0x4b,0xf9,0x5e,0xe9,0x82,0x94,0xdc,0x26,0xb7,
    0x57,0xba,0x30,0x25,0x7f,0x41,0x9a,0x3f,0x33,0xb6,0x6b,0x03,0xbf,0xb6,0x6f,0xf7,
    0x5b,0xed,0x95,0x22,0x97,0x41,0x07,0xd7,0x8d,0xbd,0x07,0x79,0x58,0xcd,0xf5,0xd6,
    0xd9,0x5d,0x6f,0x90,0x1d,0x91,0x1d,0x9d,0x65,0x13,0xe7,0xcf,0xda,0x9a,0x30,0xa0,
    0xdd,0x21,0xee,0x7b,0xaa,0xef,0x04,0xc4,0xb1,0xfe,0xb7,0xb9,0xfd,0x98,0x80,0xed,
    0x81,0x0c,0xfe,0x1d,0x2b,0x5b,0xf8,0xb5,0x36,0x87,0x2d,0xc8,0xdb,0x28,0xbb,0xe0,
    0x59,0x9d,0x9d,0x5d,0x3b,0x36,0x56,0x58,0x27,0xda,0x06,0x1d,0xd8,0xb8,0x4f,0xf5,
    0x1c,0x17,0xb0,0x2d,0xab,0xb4,0x9f,0xdf,0xc5,0xb5,0x03,0xb2,0xe3,0xf1,0xbf,0x09,
    0x64,0x13,0xe7,0xf6,0x6d,0x68,0xd7,0x80,0x79,0xa8,0x45,0x90,0xff,0x8f,0x03,0xd4,
    0x6f,0xdc,0x2e,0x41,0xbe,0xc7,0xf7,0x7c,0x85,0x3c,0xf8,0xd4,0x55,0x36,0x51,0x57,
    0x8f,0xa0,0xf9,0xb7,0x78,0xdd,0xf1,0xcd,0xb1,0xf4,0xbb,0x07,0xf9,0xde,0xd9,0xc9,
    0x41,0xfe,0xac,0xc0,0x62,0x76,0x4a,0x40,0x7c,0x89,0xea,0x35,0xbd,0x1e,0x41,0x3e,
    0xef,0x9d,0x1a,0xf0,0xf9,0x36,0x7c,0x01,0xbf,0xbb,0x62,0x74,0xba,0xb8,0xa7,0xbb,
    0x58,0x46,0x2d,0xc8,0x47,0x1f,0x6c,0x74,0xcf,0x2b,0xcf,0x0c,0xe8,0x7f,0xd1,0xe5,
    0xf8,0x9e,0xc2,0xfc,0x5c,0x70,0x76,0x40,0x7c,0xac,0xbb,0x9e,0x7b,0x05,0xd4,0x3f,
    0x5b,0xdf,0xae,0x63,0x4f,0xb3,0x6b,0x85,0xf8,0xa7,0x35,0xdf,0x52,0x9f,0xa7,0x77,
    0x35,0xa7,0xbb,0x5c,0xdc,0x27,0xa0,0x5f,0x90,0x61,0x6f,0xb8,0xfa,0x0e,0x6a,0x90,
    0xdf,0x83,0xf6,0xd1,0x3b,0xff,0x66,0xbb,0x5b,0x85,0xf2,0xae,0x6e,0x0d,0xd1,0x2f,
    0x68,0xfe,0x7c,0xa6,0x6f,0x56,0xee,0xa7,0xf6,0xf7,0x0d,0xf2,0xbd,0xd6,0xfe,0x01,
    0xf5,0xbb,0x55,0xf2,0xef,0x82,0xfd,0x37,0xbf,0xa6,0xd3,0x4f,0xf1,0x85,0xce,0xd7,
    0xe2,0x23,0x8e,0xd0,0xef,0xeb,0xbe,0xbb,0xbc,0x28,0x60,0x5b,0xec,0x3d,0xec,0x41,
    0xce,0x0f,0xc8,0x06,0x66,0xc7,0x20,0xd9,0x1c,0xe8,0xbe,0xb1,0x1f,0x1c,0xf0,0xdb,
    0xe7,0x25,0xee,0xd9,0xe7,0x90,0x80,0xf8,0x64,0x7b,0xbe,0x1b,0x10,0xfb,0xc0,0x7f,
    0x07,0x16,0x10,0x37,0x3b,0xc3,0x64,0x67,0x8e,0xb3,0x33,0x3c,0x20,0x6e,0x76,0x2e,
    0x09,0x88,0x79,0x3b,0x23,0x02,0xe2,0xf6,0x2d,0xfe,0xc8,0x80,0xb6,0x47,0xe8,0x7f,
    0x05,0x00,0xbb,0x2c,0xe0,0x37,0xe2,0x23,0xf5,0x7f,0x1d,0xf0,0xff,0x3b,0x46,0xeb,
    0x7f,0x77,0x5c,0x9c,0x95,0x71,0x0e,0xce,0xd7,0x7a,0xaf,0xc2,0xda,0x39,0x28,0x68,
    0xfe,0x1d,0x3e,0x7e,0xb7,0x67,0x11,0xfe,0x7e,0x76,0xfc,0x07,0x9c,0x2d,0x51,0xce,
    0xd0,0x50,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndexRGB(vec3 color, vec3 minColor, vec3 maxColor, bool transparent)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     int ind = int(round(clamp((dist - distMin)/(distMax - distMin), 0.0, 1.0)*(transparent ? 2.0 : 3.0)));
//
//     return bitfieldExtract(transparent ? 0x18u : 0x2du, ind * 2, 2);
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3(subgroupClusteredAdd(rgbColor, 16)+ 8 >> 4);
//
//     vec3 cov0 = vec3(subgroupClusteredAdd(dx . r * dx, 16));
//     vec3 cov1 = vec3(subgroupClusteredAdd(dx . ggb * dx . gbb, 16));
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//
//     mat3 covMat = mat3(cov0,
//                        vec3(cov0 . y, cov1 . xy),
//                        vec3(cov0 . z, cov1 . yz));
//
//     float eigenvalue = 0.0f;
//     for(int i = 0;i < 4;i ++){
//         vg = covMat * vg;
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uvec2 indices = uvec2(dist == min_dist ? gl_SubgroupInvocationID : 0,
//                           dist == max_dist ? gl_SubgroupInvocationID : 0);
//     uvec2 minMaxIndex = subgroupClusteredMax(indices, 16);
//     minColor = subgroupShuffle(rgbColor, minMaxIndex . x);
//     maxColor = subgroupShuffle(rgbColor, minMaxIndex . y);
// }
//
// uint GetIndexAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     int ind = int(round(clamp((alpha - minAlpha)/ dist * 7.0f, 0.0, 7.0)));
//
//     return bitfieldExtract(0x2345671u, ind * 4, 4);
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint index = 0;
//     if(minValue != maxValue)
//         index = GetIndexAlpha(value, minValue, maxValue);
//
//     uvec2 mask = uvec2(pid <= 5 ? index <<(16 + 3 * pid): 0x0,
//                         pid >= 5 ?(index << 29)>>(45 - 3 * pid): 0x0);
//
//     mask = subgroupClusteredOr(mask, 16);
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask . x, mask . y);
// }
//
// uvec3 scaleColorToRGB565(uvec3 color){
//     return uvec3(round(vec3(color)* vec3(31.0 / 255.0, 63.0 / 255.0, 31.0 / 255.0)));
// }
//
// uvec3 convertRGB565ToRGB888(uvec3 color){
//     return uvec3(color . x << 3 |(color . x >> 2),
//                  color . y << 2 |(color . y >> 4),
//                  color . z << 3 |(color . z >> 2));
// }
//
// uint packRGB565(uvec3 color565){
//      return color565 . r << 11 |(color565 . g << 5)| color565 . b;
// }
//
// void modifyMinMax(inout uvec3 minColor, inout uvec3 maxColor){
//     uvec3 minColor565 = scaleColorToRGB565(minColor);
//     uvec3 maxColor565 = scaleColorToRGB565(maxColor);
//     if(all(equal(minColor565, maxColor565))){
//         uvec3 simulatedColor = convertRGB565ToRGB888(minColor565);
//         ivec3 signMax = sign(ivec3(maxColor)- ivec3(simulatedColor));
//         ivec3 signMin = sign(ivec3(minColor)- ivec3(simulatedColor));
//         bvec3 needCorrect = greaterThan(signMax * signMin, ivec3(0, 0, 0));
//         bvec3 positive = greaterThan(signMin, ivec3(0, 0, 0));
//         maxColor565 . r += needCorrect . r && positive . r ? 1 : 0;
//         maxColor565 . g += needCorrect . g && positive . g ? 1 : 0;
//         maxColor565 . b += needCorrect . b && positive . b ? 1 : 0;
//         minColor565 . r -= needCorrect . r && ! positive . r ? 1 : 0;
//         minColor565 . g -= needCorrect . g && ! positive . g ? 1 : 0;
//         minColor565 . b -= needCorrect . b && ! positive . b ? 1 : 0;
//     }
//     minColor = minColor565;
//     maxColor = maxColor565;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload = flip_endian(alphaBits == 8 ? payload . zw : payload . xy);
//     bool nonOpaque = alphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, nonOpaque);
//     if(alphaBits == 8){
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//     }
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint index = 0;
//
//     finalResult . ba = alphaBits == 8 ? EncodeBC4(result . a, pid): uvec2(0, 0);
//
//     ComputeMaxMinColor(uvec3(result . rgb), minColor, maxColor);
//     modifyMinMax(minColor, maxColor);
//     uvec2 endpoints = uvec2(packRGB565(minColor), packRGB565(maxColor));
//
//     if(endpoints . x != endpoints . y){
//         index = GetIndexRGB(vec3(result . rgb),
//                                 vec3(convertRGB565ToRGB888(minColor)),
//                                 vec3(convertRGB565ToRGB888(maxColor)),
//                                 nonOpaque);
//     }
//     bool flip = endpoints . x > endpoints . y;
//     if(flip){
//         index ^= 1;
//
//         if(nonOpaque && index == 3){
//             index = 2;
//         }
//     }
//     if(flip != nonOpaque){
//       endpoints = endpoints . yx;
//     }
//     if(alphaBits == 1 && result . a == 0){
//         index = 3;
//     }
//
//     finalResult . r = endpoints . y |(endpoints . x << 16);
//     finalResult . g = subgroupClusteredOr(index <<(2 * pid), 16);
//     if(alphaBits == 8){
//         finalResult = finalResult . barg;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
