// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x0b,0xd8,0x56,0x53,
    0xda,0x7e,0xdf,0xf7,0x7b,0xf7,0x99,0x28,0xc7,0x32,0x98,0x30,0xbf,0x90,0x43,0x26,
    0x44,0x47,0x62,0x34,0x0e,0x49,0xa6,0x10,0x23,0x8a,0xfc,0xf9,0x3f,0x5f,0x31,0x3e,
    0x5f,0x4d,0xe9,0x23,0x21,0xa1,0xf4,0x63,0xc8,0x69,0x8c,0x32,0x0e,0xa1,0x31,0xe3,
    0x14,0x45,0x54,0xca,0x20,0x63,0x32,0x63,0xfc,0x66,0x86,0xd0,0x49,0x18,0x66,0xc6,
    0x90,0x11,0xb3,0xef,0xf7,0xbe,0x9f,0xf6,0xd3,0xab,0xff,0xbd,0xae,0x75,0xed,0x77,
    0xdd,0xf7,0xf3,0x3c,0x6b,0xad,0x67,0xad,0xf5,0xac,0xb5,0xf7,0x5e,0xbb,0xa1,0xb2,
    0x7b,0x54,0x6a,0x28,0x97,0xd2,0x52,0x5c,0x5a,0x93,0x95,0x6a,0xbf,0xb6,0xa5,0x4a,
    0xa9,0xac,0xeb,0x7e,0xba,0x76,0xd1,0xb5,0xa7,0xae,0x87,0xeb,0xda,0x37,0xbf,0x66,
    0xa5,0xb0,0x26,0x7f,0xf4,0x71,0x27,0x1d,0xb7,0xdf,0x4f,0x2e,0x3a,0x7b,0xbf,0xae,
    0x07,0x1d,0x00,0x3b,0x6d,0x4a,0x0d,0x35,0x7b,0xe0,0xb6,0xca,0xed,0x07,0xf9,0xb5,
    0x9a,0xa7,0xf3,0xcf,0x1a,0xd9,0x04,0x7c,0x70,0x9e,0xce,0xc8,0xd3,0x8a,0x5c,0x60,
    0xeb,0xdc,0x46,0xb5,0x66,0xb3,0x54,0xea,0x23,0x9d,0x9a,0xcd,0x1c,0x1d,0x5c,0x2b,
    0xa3,0x54,0xea,0xa0,0xfc,0x19,0xca,0xef,0x54,0xcb,0x37,0xd4,0xf4,0x4b,0xe2,0xf0,
    0x1f,0xdc,0x5e,0x79,0xea,0x97,0x97,0x78,0x71,0x85,0xdc,0xee,0xbc,0x6c,0xc4,0xca,
    0xc2,0xaa,0x0e,0xab,0x08,0x8b,0x1d,0xd6,0x20,0x6c,0x0b,0x87,0x55,0x85,0x6d,0xed,
    0xb0,0x40,0xd8,0xb6,0x0e,0x0b,0x85,0xed,0xa8,0x7a,0x5a,0x19,0xa8,0xe7,0xde,0xb9,
    0xc2,0x6e,0xa5,0xa2,0xde,0xc8,0x77,0x74,0xf9,0x75,0x75,0xfc,0x3a,0xf1,0x65,0xd9,
    0x42,0xbe,0xbd,0xb8,0x4f,0x02,0xb6,0xb9,0xbd,0xb8,0xcb,0x13,0xea,0x6d,0x93,0x97,
    0x86,0xf2,0x3a,0xe6,0x18,0xda,0x81,0xff,0xdb,0xe5,0xf2,0xa8,0xd7,0x77,0x65,0x6b,
    0x87,0x3c,0x1f,0x95,0x58,0x57,0xe3,0x33,0xf1,0xa5,0xda,0xb5,0x5a,0x6b,0x7b,0x24,
    0x9f,0x43,0xbe,0xad,0xfe,0x57,0xc4,0xb7,0x13,0xdf,0x56,0xf9,0x1d,0x94,0x87,0xcd,
    0xed,0xf3,0x92,0x77,0x96,0x3d,0xe8,0xee,0x92,0x5f,0x91,0x6f,0x50,0x7e,0x4f,0xd9,
    0x6a,0x90,0x6e,0x1f,0xe9,0x46,0x35,0x5f,0x72,0x9c,0x41,0xae,0xaf,0xec,0x55,0x25,
    0x37,0x48,0xf5,0x87,0x7e,0x77,0xe5,0x07,0x0b,0xdb,0x47,0x6d,0x1c,0xa2,0xbe,0x34,
    0xfe,0x0c,0xc7,0xa3,0xcc,0xa1,0xae,0x8d,0x67,0x8a,0xcb,0x1c,0x3f,0x5c,0xe5,0x59,
    0x7e,0x64,0x6d,0x1c,0x17,0xf6,0x1b,0x1d,0x8f,0x7c,0x53,0x5d,0xf9,0xcd,0xf2,0x91,
    0xe9,0x8f,0xad,0xe3,0x5b,0x9d,0x1f,0xae,0x56,0xd9,0xbe,0xbc,0xa9,0xaa,0xbf,0xe5,
    0xa7,0x69,0xcc,0x59,0xfe,0x7a,0x8d,0xad,0xce,0xb9,0xb7,0xa0,0x3f,0x5d,0x6d,0x9a,
    0x2a,0xd9,0xeb,0x9d,0xec,0x0d,0x79,0xfa,0xc6,0xe5,0xef,0xac,0xab,0xdb,0x4c,0xd5,
    0xc5,0xea,0xf6,0x78,0x9e,0xf6,0x75,0xf9,0xf9,0x2a,0xcb,0xf2,0x0b,0x35,0xd6,0x2d,
    0xff,0xa2,0xab,0x1b,0xf2,0xcb,0x4a,0x9c,0x13,0x96,0x5f,0x9e,0xa7,0x5d,0xf3,0xf4,
    0x9d,0x3c,0xff,0x7e,0x7e,0xed,0xab,0x3a,0x1a,0xbf,0xb2,0x16,0x2f,0xd8,0x16,0x70,
    0xab,0xe4,0xbf,0x65,0xea,0xc7,0x95,0x4e,0x76,0xb5,0xc6,0x82,0xe5,0xd7,0xe4,0x29,
    0x71,0xf9,0xb5,0x9a,0xaf,0x66,0xeb,0x03,0xd9,0x5a,0x2d,0xd9,0xb5,0x4e,0x76,0x9d,
    0xc6,0x9a,0xc9,0x7e,0xa8,0x7e,0x6c,0x14,0xb7,0xd6,0x71,0x1f,0x89,0x6b,0x55,0xbd,
    0xbc,0x9d,0x8f,0xd5,0x7f,0x26,0xfb,0x37,0x57,0xff,0x75,0xe2,0x4d,0xf6,0x93,0x3c,
    0xa5,0x4e,0xf6,0x53,0x57,0xbf,0x21,0xe2,0x8d,0xfb,0xbb,0xca,0x5b,0x2d,0x3b,0x9e,
    0xfb,0x87,0xf4,0x1a,0x37,0xc3,0xfd,0x53,0x75,0xb5,0xf2,0xd7,0x38,0xee,0xb3,0xba,
    0x36,0x7a,0xee,0x5f,0xae,0x8d,0xf5,0xdc,0xe7,0x4e,0x6f,0x75,0x1d,0xf7,0x85,0xea,
    0xd2,0xea,0x38,0x6b,0xef,0x7a,0xcd,0x33,0x93,0xfd,0x52,0x58,0x93,0x74,0xbc,0x9d,
    0x7f,0x3b,0xff,0xae,0x93,0x3f,0x8c,0xfb,0xca,0xb5,0x77,0xf5,0x46,0x6e,0x9b,0xda,
    0x78,0xda,0xa0,0x31,0xf3,0x81,0xfa,0xf0,0x23,0xf5,0xc1,0xa7,0xf2,0xe1,0x3f,0xe4,
    0x93,0xcf,0xd4,0xc6,0xcf,0x55,0xe7,0x2f,0x55,0xe6,0x57,0x8a,0x03,0x98,0xa0,0x18,
    0x0f,0xef,0xbb,0xfa,0xb7,0x29,0x17,0x73,0x07,0xb1,0x6b,0x3f,0xae,0x37,0xbd,0x31,
    0x6f,0x7b,0x97,0x39,0x16,0x1b,0x1c,0x3f,0x49,0xeb,0x91,0xe5,0xe7,0xd4,0xf2,0x97,
    0xf6,0xb6,0xfc,0x93,0xb5,0x7c,0xeb,0x91,0x96,0x9f,0x97,0xe7,0xaf,0xda,0x7e,0x46,
    0x2f,0xcb,0xcf,0xcf,0xf3,0x77,0x1f,0xb5,0xfd,0x46,0xf9,0x67,0xf2,0xfc,0x1f,0xc6,
    0xac,0xed,0xd9,0x39,0x2f,0x09,0xf1,0xf3,0xd9,0x32,0x75,0x20,0x07,0xce,0xe4,0x5e,
    0xc9,0xff,0x8f,0x6a,0xd7,0xd0,0xbb,0xbb,0xe2,0x19,0xd6,0xc2,0xb2,0xab,0xc7,0xd7,
    0xb5,0x72,0xdf,0xe9,0x63,0x73,0xbe,0x5a,0x61,0x5b,0x2d,0xbf,0x6f,0xa5,0x98,0xb3,
    0xc8,0x0f,0xd0,0x1a,0xb6,0x77,0xde,0x3a,0xc4,0xe1,0xe6,0x3c,0xbf,0x4b,0x3e,0xd3,
    0x6c,0x6d,0xfb,0xff,0x12,0xfc,0xd8,0x52,0xe1,0x9c,0x84,0x6c,0x77,0xe5,0xc7,0x08,
    0x03,0x3f,0x56,0xff,0xc3,0xda,0x5a,0x4d,0xfb,0x57,0x56,0x8a,0xb2,0xa7,0x54,0x10,
    0x2b,0x8a,0xfc,0x35,0x95,0x22,0xde,0x20,0x7f,0x6d,0xc5,0xe6,0x78,0x58,0x5b,0x03,
    0xae,0xab,0x50,0x07,0x72,0xd7,0x56,0x8a,0xbe,0xbb,0xb1,0xb2,0x69,0xcc,0xbe,0xa5,
    0xc2,0x75,0xca,0xf2,0x77,0x55,0xb8,0x8f,0xb0,0xfc,0xec,0x0a,0xd6,0xcd,0xa2,0x9c,
    0x97,0x2a,0x45,0xdc,0xda,0xa0,0x76,0x4f,0x75,0xf2,0x5f,0x57,0x4a,0xb5,0xf5,0xce,
    0xf2,0xdf,0x54,0xb8,0xd6,0x59,0x1e,0x03,0x63,0x2f,0x97,0x2f,0x37,0x70,0x7f,0xd3,
    0x39,0xb7,0x0e,0x7b,0x95,0x86,0x62,0xce,0x7c,0xac,0x38,0x0a,0x9b,0xb0,0x03,0x5d,
    0xc8,0xc3,0x5f,0xd5,0x06,0xf6,0x15,0x74,0xd0,0x66,0x8c,0xbb,0x9e,0x0d,0x9c,0x47,
    0x96,0x0c,0xef,0xd5,0xc0,0x31,0x6b,0xc9,0xca,0xbe,0xbc,0x81,0xbb,0x31,0xcb,0x5f,
    0xd9,0xc0,0x05,0xc9,0xf2,0x7f,0x69,0xe0,0x1e,0x62,0x63,0x9c,0xcd,0xf3,0xed,0x5c,
    0x3e,0xcb,0xa7,0xc7,0x96,0xf2,0xc5,0x53,0x55,0xd6,0x67,0x6a,0xad,0xdc,0xa0,0xf6,
    0xff,0xe9,0x2a,0xe7,0xe7,0x10,0x87,0xcd,0xab,0x72,0x2e,0xdf,0xe2,0xfa,0x64,0x7e,
    0x95,0x7b,0x00,0x93,0x79,0xa6,0xca,0x18,0x00,0xdc,0x64,0x9e,0xad,0x62,0xdc,0x15,
    0x32,0x0b,0xaa,0x2c,0xff,0x59,0x27,0xf3,0x5c,0xfe,0xbf,0x87,0x93,0x79,0xbe,0xca,
    0x3a,0x3f,0xe7,0x64,0x16,0xe6,0xff,0x07,0x38,0x99,0x45,0x55,0xae,0x65,0x0b,0x9d,
    0xcc,0xe2,0x2a,0xf7,0x56,0x96,0x7f,0x21,0xcf,0x9f,0xe7,0x74,0x96,0x54,0x29,0xf3,
    0x82,0xd3,0x59,0x9a,0xff,0xdf,0xdf,0xaf,0x7f,0x79,0xfe,0x09,0xa7,0xf3,0xdb,0x2a,
    0x65,0x80,0xa3,0xaf,0xe1,0xaf,0x97,0xaa,0xf4,0x11,0x7c,0x82,0x36,0xa3,0x4d,0xa8,
    0x33,0xea,0x84,0x32,0xa0,0x83,0xbe,0x5e,0x26,0xdf,0x42,0x07,0x31,0x26,0xcd,0x27,
    0xe5,0xe1,0x5a,0xaf,0xdb,0xe7,0xb3,0x66,0x4f,0xed,0xf7,0x82,0xd2,0xa6,0x3f,0x85,
    0x9d,0x7c,0x3c,0x37,0x94,0x3a,0xe5,0x24,0xe4,0x60,0x6f,0x2f,0x09,0x02,0xeb,0xae,
    0xfc,0xde,0xc2,0x60,0x6f,0xad,0xec,0x95,0xeb,0xec,0xd9,0x7e,0x18,0x36,0x3e,0x90,
    0xfc,0x5a,0xd9,0x40,0x7e,0x5d,0x50,0xc4,0x39,0xe8,0xff,0x2d,0xb0,0xb1,0xcd,0x39,
    0x89,0x7d,0x29,0xb0,0xb1,0xda,0xfb,0x98,0x6f,0x8e,0xcd,0x38,0x46,0xfc,0x38,0x39,
    0x2e,0xe3,0xd8,0x69,0x76,0xd8,0xf1,0x19,0xe7,0x46,0xab,0xdb,0xe3,0xf4,0xcf,0xb8,
    0x97,0xf1,0xc9,0xc6,0xfd,0x09,0x4e,0xbe,0xd5,0xe1,0x03,0x9c,0xed,0x66,0x87,0x9f,
    0x98,0x71,0x5c,0x5a,0x32,0x7c,0x60,0xc6,0xb8,0x61,0xc9,0xda,0x73,0x52,0xc6,0xf1,
    0x3e,0x75,0xe3,0xb8,0xa7,0xfc,0x8f,0x32,0xae,0x49,0x96,0x2c,0xde,0x0e,0xaa,0xdd,
    0x4f,0xf5,0xe9,0x53,0xce,0xfb,0x03,0x72,0x17,0x66,0xf0,0x71,0x43,0xad,0x1d,0x0f,
    0x66,0xec,0xdb,0x77,0x33,0xf6,0x2d,0xa7,0x22,0xb9,0xd5,0x39,0x76,0x70,0xee,0x83,
    0x8a,0xf6,0x83,0x0a,0x23,0xf9,0x7a,0x55,0xa9,0xf5,0x79,0x77,0xad,0x53,0xbb,0xa5,
    0x1c,0x27,0xdd,0x15,0x1f,0xee,0x0b,0x37,0xcd,0xcf,0x75,0x79,0x8c,0xa9,0xdf,0xb9,
    0x3c,0xfa,0xa9,0x7f,0x50,0xe4,0x31,0xcf,0x97,0x2a,0xff,0x79,0x5e,0xda,0xa7,0xea,
    0xdb,0x7f,0xe7,0xff,0xb1,0xa7,0xfc,0x7b,0xc0,0xf2,0x71,0xed,0xa9,0x7d,0xfb,0xfa,
    0x80,0x7b,0xee,0x13,0x72,0x2d,0xc4,0xd4,0x2f,0x03,0x62,0xeb,0x83,0x62,0x3c,0x8e,
    0xd7,0xfd,0xc5,0xbf,0x03,0xf2,0x93,0xd4,0xb7,0x1b,0x02,0x62,0xc7,0xd6,0xda,0x1f,
    0xd4,0xd6,0xab,0xaf,0x03,0xee,0xd1,0x51,0x5e,0x4f,0x8d,0xa9,0x6f,0x02,0xe2,0xcf,
    0xe7,0x32,0x35,0x77,0x86,0xc4,0x86,0xcb,0x76,0x2d,0xa6,0x6a,0xe1,0x59,0x22,0x99,
    0xaa,0x64,0x46,0x3a,0x99,0x20,0x24,0x0e,0x19,0xe4,0xa3,0x90,0x7a,0xd8,0x83,0x4c,
    0x12,0x16,0x87,0xec,0x3f,0x70,0x27,0x0a,0x4b,0x43,0xd6,0xb5,0xb6,0x82,0x0b,0xcb,
    0x42,0xe2,0x90,0x1f,0x98,0x23,0x68,0xcf,0x4b,0x29,0x71,0x93,0xb5,0x72,0xda,0xa8,
    0x9c,0x66,0x57,0xce,0x56,0xca,0xb7,0x71,0xe5,0xb4,0x95,0x6e,0xd9,0x95,0xd3,0x2e,
    0x24,0xbe,0x95,0x2b,0x67,0x59,0x4a,0x1c,0xe5,0x95,0x5d,0x39,0xdb,0x85,0x6c,0x63,
    0x6b,0x6d,0x6f,0x4e,0x6c,0x07,0x61,0x28,0x6b,0x80,0xfc,0xbe,0x63,0x48,0x59,0x70,
    0x97,0x0a,0xeb,0x10,0xd2,0x2e,0x38,0xf4,0x05,0xd6,0xe6,0x20,0xe0,0x7a,0xdd,0xaa,
    0xbe,0xa8,0xb9,0x38,0x20,0x6e,0x32,0x91,0x64,0x1a,0x9d,0x4c,0x1c,0x10,0xb7,0xf2,
    0x92,0x80,0x7a,0xc0,0xe7,0xe4,0x18,0x62,0x59,0x16,0xb0,0x4c,0x70,0xb7,0xe6,0x7a,
    0x18,0xff,0x5b,0x08,0xc7,0xd8,0x6b,0x23,0x1f,0x7e,0x89,0x7b,0xcf,0xfc,0xff,0x96,
    0x79,0x6a,0xa3,0xf1,0x87,0xff,0xeb,0xf3,0xeb,0xa7,0xca,0x03,0x5f,0xa8,0xb2,0xb6,
    0x91,0x5d,0xc4,0x92,0x25,0xc2,0x76,0x10,0x86,0x58,0x62,0xbe,0xee,0x10,0x10,0x2f,
    0xb9,0x3e,0xd9,0x29,0x60,0x3b,0xc0,0x99,0xdc,0xce,0x92,0xf3,0x7d,0xb2,0x4b,0x40,
    0xd9,0x9d,0x83,0x42,0x77,0x37,0xe9,0x02,0x33,0xb9,0xef,0x05,0xc4,0x3b,0x68,0xbe,
    0x20,0xf6,0xee,0xa3,0xb8,0x6b,0xf6,0xf7,0x0d,0x58,0x67,0x6f,0xff,0x00,0xf9,0xcb,
    0xf7,0x63,0x97,0x80,0xb8,0x1f,0x43,0x07,0x06,0xd4,0xef,0xe2,0xec,0x75,0x95,0x3d,
    0x3f,0x56,0x0f,0x0a,0x28,0xdb,0xd5,0xf5,0xdb,0xc1,0xea,0xb7,0x66,0xd7,0x6f,0x87,
    0x04,0xc4,0x4d,0xaf,0x5b,0x40,0x5d,0xe0,0x67,0x63,0xbe,0xe7,0xd7,0x43,0xd5,0x86,
    0xa1,0xb9,0x0c,0xe2,0xd4,0x61,0xc2,0xba,0x39,0xdb,0xdd,0x65,0x7b,0x99,0xb3,0xdd,
    0x23,0x20,0xfe,0x40,0x2e,0x83,0xbe,0xee,0x19,0x10,0x1b,0xa2,0x58,0xd3,0xdb,0xf5,
    0x37,0xb8,0x5e,0x79,0x3a,0x4a,0xfd,0x7b,0x94,0xda,0x87,0x79,0x7d,0x7a,0xc8,0x32,
    0xcb,0xb5,0xf1,0xcc,0xf5,0x60,0x44,0x48,0xdc,0xa7,0xe7,0x55,0xbf,0x73,0x43,0xf2,
    0xd3,0x35,0x4f,0x80,0x9d,0x17,0x12,0xef,0x9f,0x15,0x76,0x1b,0x43,0xe2,0xf8,0x2d,
    0x12,0x76,0x7e,0x48,0x1c,0xf7,0xd0,0x26,0x37,0x4a,0x72,0x65,0x27,0x37,0x3a,0x24,
    0x8e,0x7b,0xd9,0xc5,0xc2,0x2e,0x08,0xa9,0x3f,0x3a,0x2c,0x74,0x7f,0x22,0xdd,0x8a,
    0xd3,0xbd,0x28,0x24,0x3e,0xd5,0xe9,0x36,0x87,0xd4,0xbf,0xc8,0xe9,0xb6,0x48,0xb7,
    0xc1,0xe9,0x8e,0x09,0x89,0x0f,0x75,0xba,0x63,0x43,0xea,0x8f,0x71,0xba,0x43,0xe5,
    0xb3,0x92,0xf3,0xd9,0x84,0x90,0xb8,0x4f,0xe6,0xb3,0xd6,0x90,0xbc,0xf7,0xd9,0xc4,
    0x90,0xb8,0xf7,0xd9,0xa4,0x90,0xb8,0xf7,0xd9,0x15,0x21,0x71,0xef,0xb3,0xab,0x24,
    0xe7,0x7d,0x36,0x39,0x24,0xee,0x7d,0x76,0x75,0x48,0xfd,0xc9,0xae,0xee,0xd7,0x48,
    0xd7,0xfb,0xec,0xda,0x90,0xb8,0xf7,0xd9,0x75,0x21,0xf5,0xaf,0x75,0xba,0xd3,0xa4,
    0xeb,0x7d,0x76,0x7d,0x48,0xdc,0xfb,0x6c,0x7a,0x48,0x7d,0x70,0x88,0x59,0x58,0xc7,
    0xce,0x0a,0xe9,0x4b,0x70,0x88,0x35,0xbd,0x35,0x16,0x7b,0xb9,0xb1,0xd8,0x51,0x7e,
    0x6d,0x70,0x7e,0xdd,0x27,0x24,0xee,0x93,0xf9,0xb5,0x73,0x48,0xde,0xfb,0x75,0xff,
    0x90,0xb8,0xf7,0x6b,0x97,0x90,0xb8,0xf7,0xeb,0x81,0x21,0x71,0xef,0xd7,0xae,0x92,
    0xf3,0x7e,0x3d,0x28,0x24,0xee,0xfd,0x7a,0x70,0x48,0xfd,0x83,0x9c,0x6f,0xba,0x49,
    0xd7,0xfb,0xf5,0xd0,0x90,0xb8,0xf7,0xeb,0x61,0x21,0xf5,0x0f,0x75,0xba,0x3d,0xa4,
    0xeb,0xfd,0xda,0x33,0x24,0xee,0xfd,0xda,0x2b,0xa4,0x7e,0x4f,0xa7,0xbb,0x87,0x7c,
    0x56,0x71,0x3e,0xeb,0x1b,0x12,0xf7,0xc9,0x7c,0x76,0x64,0x48,0xde,0xfb,0xec,0xe8,
    0x90,0xb8,0xf7,0xd9,0x0f,0x43,0xe2,0xde,0x67,0xc7,0x84,0xc4,0xbd,0xcf,0x8e,0x93,
    0x9c,0xf7,0xd9,0xf1,0x21,0x71,0xef,0xb3,0xfe,0x21,0xf5,0x8f,0x77,0x75,0x1f,0x20,
    0x5d,0xef,0xb3,0x13,0x43,0xe2,0xde,0x67,0x03,0x43,0xea,0x9f,0xe8,0x74,0x7f,0x24,
    0x5d,0xef,0xb3,0x41,0x21,0x71,0xef,0xb3,0xc1,0x21,0xf5,0x07,0xb9,0xb1,0xf8,0x5f,
    0x21,0x7d,0x39,0xb8,0x6e,0x2c,0xe2,0xfa,0x99,0xf6,0x5d,0x83,0x33,0x8e,0x59,0xc4,
    0xca,0x9a,0x3c,0x62,0x68,0x5e,0x5a,0x7f,0xad,0x5f,0x56,0x8f,0xd7,0x43,0xca,0xda,
    0xbe,0x01,0xd8,0x1f,0x42,0xe2,0xd8,0x9f,0x23,0x86,0xe3,0x5e,0xf6,0x8d,0x90,0x7b,
    0x43,0x70,0x16,0xc3,0xff,0x14,0x12,0xb7,0xfd,0xc6,0x9b,0x21,0xb1,0x66,0xb7,0x4e,
    0xfd,0x5f,0x48,0xbc,0x49,0xfb,0x2e,0xd8,0x7f,0x2b,0x24,0x3e,0x5b,0xb1,0xff,0xaf,
    0x21,0x63,0x7f,0x93,0x62,0xff,0xfb,0x61,0x11,0xfb,0xc1,0xbd,0x9d,0x27,0x60,0x68,
    0xe3,0xdb,0x6e,0x4f,0xf7,0xae,0xea,0x89,0xe7,0x96,0xb6,0x8e,0xbc,0x17,0x12,0x1f,
    0x5a,0xa2,0x6f,0x4c,0x0f,0x57,0xf8,0x06,0x32,0x2b,0x43,0x96,0x09,0x7f,0xbd,0x27,
    0xfb,0x28,0xf7,0x9e,0xb8,0x28,0x17,0x32,0xab,0xa0,0x23,0x7d,0x5c,0x5f,0xca,0x5b,
    0x84,0x72,0xbf,0x50,0xb9,0x77,0x69,0x4d,0xb3,0xfd,0xe4,0xfa,0x90,0x9c,0xe5,0xbf,
    0x92,0xdc,0x6f,0xf3,0x1c,0xf2,0x1b,0x42,0x62,0xf3,0x75,0x2f,0x62,0xf6,0xb0,0x29,
    0x81,0xdc,0xec,0x3a,0x7b,0x65,0x3d,0xf4,0x36,0xfd,0x20,0xa2,0xfe,0x8b,0x75,0xfa,
    0xb1,0xf4,0x3f,0x2e,0x6d,0xaa,0x9f,0x44,0xe4,0x4c,0x7f,0x4b,0xe9,0x0f,0x91,0xbe,
    0xad,0xeb,0x5b,0x47,0xac,0xfb,0x86,0xb0,0xc0,0xb6,0x89,0x58,0x3e,0xca,0x34,0x6c,
    0xfb,0x88,0x36,0x61,0xc7,0xfa,0x72,0xc7,0x88,0xfa,0x0f,0xca,0xff,0xed,0x23,0x62,
    0x78,0x46,0x02,0x9f,0xce,0x72,0x3e,0x05,0xd7,0x21,0x4f,0x63,0x22,0xfa,0x74,0x8c,
    0xb3,0xf3,0xd3,0x88,0x65,0x9a,0x9d,0x71,0x11,0x31,0xb3,0x33,0xd3,0xd9,0x01,0x37,
    0x3e,0x4f,0x9f,0xc9,0xce,0x67,0xce,0xce,0xe7,0x11,0xeb,0x69,0x76,0xbe,0x88,0x88,
    0x99,0x9d,0xbb,0x9d,0x1d,0x70,0xeb,0xf3,0x74,0x5d,0x4c,0x3b,0xb8,0x0e,0xd0,0xfd,
    0xdb,0xf4,0x98,0x3e,0x29,0xab,0xcd,0xe6,0xd3,0x1b,0x62,0x8e,0x5f,0x93,0xbb,0x39,
    0xa6,0xdf,0x02,0xf9,0xc5,0xf0,0x5b,0x62,0xca,0x5a,0xc2,0x1e,0x0d,0xf8,0x8c,0x98,
    0x1c,0xf4,0x2e,0x15,0x76,0x6b,0xcc,0xf2,0xc0,0x2d,0x12,0x76,0x47,0x4c,0x1c,0xf7,
    0xaf,0x0b,0x85,0xdd,0x25,0x0c,0xf7,0xae,0x8b,0x85,0xfd,0x22,0xa6,0x2c,0x38,0x8c,
    0xf7,0xbb,0xd5,0x16,0xb4,0xcb,0xc6,0xc7,0x57,0x1a,0x1f,0x78,0x96,0xb3,0xda,0x8d,
    0x8f,0x0d,0x11,0xb9,0x8d,0xe3,0x30,0xa6,0x1c,0xee,0x7b,0xbd,0x5c,0x39,0x26,0x67,
    0xf7,0x5b,0x55,0xc9,0xe1,0xb9,0xca,0xc6,0x7b,0xa9,0x98,0xb8,0xc5,0x82,0x30,0x26,
    0x86,0x67,0x55,0x8b,0xed,0xfe,0x2a,0xa6,0x2d,0x70,0x56,0x66,0x2a,0x5b,0xeb,0x34,
    0x26,0xcd,0x5e,0x16,0x93,0x33,0xb9,0x36,0x71,0x31,0xc6,0x9b,0x9d,0xdc,0x56,0x31,
    0xb9,0x45,0x36,0x96,0x63,0x62,0xad,0xa5,0xa2,0xdc,0xb6,0x31,0xed,0x6d,0xed,0xda,
    0xb0,0xad,0xb3,0x67,0xb6,0xb6,0x8b,0x89,0x5b,0x1b,0xb6,0x8f,0x89,0xe1,0xb9,0x9b,
    0xd9,0xda,0x21,0xa6,0x3d,0x70,0xa6,0xb7,0x53,0xcc,0xb8,0x68,0x75,0xdd,0x45,0xb6,
    0x9b,0xeb,0xe6,0xe3,0xae,0x31,0x39,0xab,0xeb,0x77,0x63,0x62,0x4d,0xae,0xae,0x1d,
    0x63,0xda,0x03,0x67,0x31,0x7a,0xf7,0x98,0x31,0xba,0xe4,0xe6,0xfc,0x1e,0x31,0x71,
    0x3c,0xff,0xf2,0x7d,0xf5,0xbd,0x98,0x9c,0xc9,0x75,0x92,0x1c,0xfa,0x7e,0x9d,0x93,
    0xdb,0x2b,0x26,0x67,0x72,0x9d,0x25,0x67,0xef,0x14,0x4c,0x6e,0xdf,0x98,0x9c,0xc9,
    0x1d,0x20,0xb9,0xd9,0x75,0x63,0xa4,0x4b,0x4c,0xce,0xe4,0xba,0x4a,0x6e,0x7d,0x69,
    0x53,0xb9,0x83,0x62,0x72,0xe6,0x83,0x43,0x62,0x8e,0x43,0xbf,0x66,0x1c,0x2a,0xac,
    0xd1,0xf9,0xe5,0xb0,0x98,0xb2,0x87,0x3a,0xdd,0x1e,0x31,0xfd,0xe5,0x75,0x7b,0x09,
    0xf3,0xba,0xbd,0x63,0xca,0xf6,0x72,0xba,0x87,0xc7,0xf4,0x95,0xd7,0xed,0x2b,0xcc,
    0xeb,0x1e,0x19,0x53,0xb6,0xaf,0xd3,0xfd,0x41,0xcc,0xb1,0xdc,0xe4,0x74,0xfb,0x09,
    0x5b,0xed,0x74,0x7f,0x18,0x53,0xb6,0x9f,0xd3,0x3d,0x36,0xa6,0xef,0xbd,0xee,0xf1,
    0xc2,0xbc,0x6e,0xff,0x98,0xb2,0xc7,0x3b,0xdd,0x01,0x31,0xfb,0xc3,0xeb,0x0e,0x14,
    0xe6,0x75,0x4f,0x8a,0x29,0x3b,0xd0,0xe9,0x0e,0x8a,0x39,0x76,0x7d,0x7b,0x4f,0x16,
    0xe6,0xdb,0x7b,0x4a,0x4c,0xd9,0x93,0x9d,0xee,0x90,0x98,0xfd,0xeb,0x75,0x4f,0x17,
    0xe6,0x75,0x7f,0x1c,0x53,0xf6,0x74,0xa7,0x3b,0x34,0x66,0x9f,0x7b,0xdd,0xb3,0x84,
    0x79,0xdd,0x61,0x31,0x65,0xcf,0x72,0x31,0x78,0x44,0xcc,0x7e,0x87,0x1f,0x4f,0x71,
    0xf8,0x79,0x31,0xfb,0x14,0x3e,0x42,0x99,0x13,0x15,0x0b,0x1b,0x63,0x72,0x23,0x9c,
    0xec,0xe8,0x98,0x7d,0x08,0x9f,0x0c,0x73,0xb2,0x17,0xc6,0xe4,0x20,0x6b,0x7b,0x9c,
    0x9f,0xc4,0xdc,0xe3,0x0c,0x75,0xf7,0xa9,0x17,0xc5,0xc4,0xcd,0xde,0xc5,0x31,0x31,
    0x4b,0x16,0xd7,0x5b,0x62,0x96,0x7f,0xb1,0xb3,0x37,0x46,0xf6,0xc6,0x3a,0x7b,0x63,
    0x63,0xe2,0x66,0x6f,0x5c,0x4c,0xcc,0x92,0xd9,0x1b,0x1f,0xb3,0x8e,0xe3,0xdc,0x3a,
    0x71,0x69,0xcc,0x72,0xc6,0x3b,0x6c,0x62,0x4c,0x7c,0x80,0x5b,0x27,0x26,0xc5,0xc4,
    0x81,0x99,0xdc,0x15,0x6a,0x2b,0xb8,0x2d,0xf2,0x60,0x0e,0xec,0xaa,0x98,0xfb,0x3e,
    0xbc,0xd3,0x05,0x8f,0x77,0x07,0xbd,0x1a,0x36,0x5d,0x47,0x70,0xc5,0xbe,0x09,0xf2,
    0x13,0x32,0x3e,0xaf,0xc4,0x3a,0x09,0x5d,0xac,0x31,0xc6,0x8d,0xca,0xb8,0x16,0x81,
    0x83,0x0c,0xb8,0xfb,0xf3,0x36,0x62,0x0d,0x7e,0x27,0xe3,0x3a,0x8c,0x77,0x45,0x78,
    0x9f,0x03,0xfb,0x33,0x65,0x7f,0xbc,0x5b,0x7f,0x5a,0xa3,0x62,0x5f,0xd5,0xe8,0x62,
    0xc6,0xa5,0x11,0x39,0x93,0xbb,0x5c,0x72,0xf3,0xeb,0xd6,0x8c,0x49,0x11,0x39,0x1b,
    0x7b,0x57,0x44,0xc4,0x30,0x5f,0x2c,0xee,0x4f,0x96,0x2e,0xde,0x09,0xd9,0x3e,0xf2,
    0xea,0x88,0xf8,0x58,0x67,0x6b,0x4a,0x44,0xdc,0xc6,0xe7,0x35,0x11,0xed,0x4d,0x71,
    0xf5,0x98,0x2a,0x5b,0x37,0x56,0x36,0xad,0xc7,0xb4,0x88,0x9c,0x95,0xf9,0xbf,0x92,
    0x9b,0xe6,0xf6,0xd8,0x37,0x44,0xc4,0xa7,0x3a,0xbd,0x1b,0x23,0xe2,0x56,0xe6,0x4d,
    0x11,0x6d,0xdd,0xe8,0xca,0xbc,0xc5,0xed,0xf5,0xbc,0x8f,0x66,0x44,0xe4,0x4c,0xee,
    0xf6,0xa8,0x58,0x57,0xbd,0xdc,0x1d,0x11,0x39,0x93,0xbb,0x4b,0x72,0xad,0x75,0x72,
    0xbf,0x88,0xc8,0x59,0x7d,0x67,0x49,0x6e,0xb8,0x9e,0x37,0x01,0x7b,0x20,0xe2,0xde,
    0xfb,0x0f,0xda,0x37,0x02,0x9b,0x1d,0x51,0x16,0x9c,0x3d,0x97,0x7a,0x28,0x62,0x1f,
    0xe2,0x5d,0x93,0x61,0x73,0x22,0xfa,0x14,0xef,0x9b,0x6c,0x7f,0xf9,0xab,0x88,0xb2,
    0x73,0xdc,0x9e,0xf3,0xd7,0x11,0xf1,0x9b,0x9c,0xbd,0x47,0x23,0xb6,0xd7,0xdb,0x7b,
    0x3c,0x62,0xdb,0xbc,0xbd,0x27,0x22,0xca,0x3e,0xee,0xec,0xcd,0x8d,0x88,0xa3,0x7d,
    0x73,0xb4,0x47,0x7c,0x2a,0x62,0x39,0x73,0x35,0x66,0xd1,0x8e,0xa7,0x23,0xe2,0x63,
    0xf5,0xec,0xd9,0xda,0x37,0x3f,0x62,0x1b,0xc1,0xe3,0x7e,0x0a,0xcf,0xd3,0xf1,0xbe,
    0xce,0xe6,0xfc,0xb3,0x11,0x9f,0xb1,0x43,0xce,0xe6,0xfc,0x82,0x88,0xb8,0xad,0xe7,
    0xcf,0x47,0xc5,0x7a,0x6e,0xf5,0x5a,0x14,0x71,0x1c,0xed,0xe2,0x9e,0x6b,0x2f,0x8e,
    0x28,0xbb,0xc8,0xf5,0xc3,0x0b,0x11,0xf1,0x3b,0x5d,0x5f,0x2d,0x89,0x88,0x9b,0xde,
    0x4b,0xd2,0x83,0x2d,0xd3,0x7b,0x39,0x22,0xee,0xc7,0xf8,0x2b,0x11,0x71,0xec,0x8b,
    0x5f,0x8f,0x8a,0x7d,0x31,0xe6,0xe9,0xab,0xe8,0x6f,0xed,0xaf,0x5f,0x75,0xfe,0xfb,
    0x7d,0xc4,0xf2,0xa0,0x6b,0xf7,0x5c,0xcb,0x23,0xe2,0xcd,0xba,0xe7,0x32,0xbd,0xd7,
    0xa3,0xe2,0x9e,0xeb,0xdc,0x8c,0xf3,0x1f,0xf3,0x1d,0xf2,0xb0,0x69,0xf7,0x7f,0x7f,
    0x94,0xcd,0xf5,0xba,0xff,0x5b,0xe1,0xea,0x02,0xee,0x8d,0x3c,0xfd,0x59,0x36,0xff,
    0xec,0xf6,0xd8,0xef,0x68,0x5c,0x5d,0xa3,0xf1,0x81,0xb2,0x57,0x48,0xee,0x0d,0x27,
    0xf7,0x96,0xc6,0xcb,0x1d,0xea,0x77,0x2f,0xb7,0xc2,0xc5,0xb0,0x53,0x32,0xda,0x44,
    0x19,0x6f,0xa9,0x5c,0x8b,0xc7,0x2b,0x23,0xf2,0x78,0x3f,0x64,0x63,0x6e,0xb5,0xda,
    0x0c,0x5f,0x4c,0x14,0xb6,0x46,0xf1,0x66,0xb5,0x1b,0xaf,0xeb,0x22,0xe2,0x0b,0x5c,
    0x9d,0x3e,0x8a,0x88,0x5b,0xb2,0x38,0xfd,0x71,0xc4,0xb2,0xc0,0x5b,0x9c,0xfe,0x24,
    0x2a,0xe2,0x34,0x78,0x1f,0xa7,0x2d,0x8e,0xce,0x74,0x71,0xfa,0x92,0x8c,0xb1,0x1a,
    0xb1,0x1b,0xba,0xbe,0x8d,0x4d,0x19,0x63,0xf5,0xdd,0x8a,0xd3,0x2b,0x5c,0x1f,0x9d,
    0xad,0x3e,0x02,0x77,0x6e,0x1d,0x77,0x5a,0xc6,0x38,0x0e,0x0e,0x32,0x2b,0xe4,0xc7,
    0x59,0x2a,0xbf,0x83,0x8b,0x29,0x3b,0xbb,0xf8,0xec,0xf7,0xea,0xbb,0x44,0xe4,0x4c,
    0xae,0xa3,0x8b,0xf7,0x5e,0x6e,0xb7,0x88,0x9c,0xc5,0xf1,0xdd,0x23,0x62,0xcd,0x6e,
    0xbf,0xb0,0x47,0x44,0x7b,0xbb,0x3b,0x7b,0x7b,0xca,0xde,0xc2,0xba,0x58,0xd6,0x29,
    0x22,0x67,0x72,0xfb,0x48,0xee,0xc5,0x3a,0xb9,0xce,0x11,0x39,0x93,0xdb,0x5f,0x72,
    0x6b,0xeb,0xe4,0x0e,0x88,0xc8,0x99,0xdc,0xf7,0x25,0x37,0xa4,0x4e,0xae,0x6b,0x44,
    0xce,0xe4,0x0e,0x91,0x5c,0x63,0x9d,0x5c,0xb7,0x88,0x9c,0xc9,0x75,0x8f,0x8a,0xfb,
    0x87,0x66,0xf7,0x7c,0xa8,0x47,0x44,0xae,0xc9,0x3d,0x1f,0xea,0x13,0x11,0x47,0x0c,
    0x46,0x3c,0xba,0xaf,0x2e,0x1e,0x1d,0x11,0xf1,0x1d,0x60,0x1f,0x17,0x8f,0xfa,0x46,
    0xc4,0x2d,0x1e,0x1d,0xb5,0x99,0x78,0x74,0xf4,0x66,0xe2,0x51,0xbf,0x88,0xb2,0x47,
    0xbb,0x78,0xf4,0xc3,0x88,0xb8,0x8f,0x47,0xc7,0x44,0xc4,0x4d,0xaf,0xbf,0xf4,0x7c,
    0x3c,0x3a,0x21,0x22,0xee,0xe3,0xd1,0x80,0x88,0xf8,0xc6,0x7d,0x6c,0x44,0x5b,0x03,
    0x14,0xa3,0x4e,0xa9,0x8b,0x51,0x83,0x30,0x27,0x35,0x8f,0x07,0xb9,0x78,0x74,0x72,
    0x44,0x5d,0x8b,0x47,0x26,0x73,0x8a,0x1b,0xcf,0x23,0x35,0xd6,0x31,0x6e,0x21,0xef,
    0xf5,0x87,0x48,0xdf,0xe2,0x51,0x8b,0x2b,0x17,0xdc,0x69,0x79,0x1a,0x2e,0x9b,0xc3,
    0xdd,0xdc,0x3f,0x47,0x65,0x9e,0xe4,0xe6,0xf9,0xc8,0x88,0xe3,0x05,0x63,0xa1,0x9b,
    0x8b,0x27,0xff,0x13,0x91,0xf3,0xf1,0xa4,0x29,0xa2,0x8d,0xbe,0x4e,0x7f,0x54,0x44,
    0xdc,0x92,0xc5,0x89,0xd1,0x11,0x6d,0x8c,0x72,0x71,0xe2,0x42,0x17,0x27,0x46,0xd7,
    0xc5,0x89,0x16,0xd5,0xf7,0x34,0x67,0x7b,0x68,0xc4,0x79,0x84,0xf9,0xd1,0xd9,0xd5,
    0x6d,0x58,0x44,0x0e,0x75,0xf3,0xba,0x2d,0x2e,0x8e,0x5c,0x96,0xb1,0x3c,0xb4,0x7f,
    0x98,0x7c,0xe2,0xe3,0xc1,0x2c,0x17,0x8f,0xc6,0x67,0x8c,0x49,0x88,0x51,0xd0,0xf3,
    0x76,0xce,0xcf,0x18,0x93,0x66,0x2a,0x1e,0xb5,0xb8,0x3e,0x1a,0x9e,0x31,0x26,0x81,
    0x1b,0x59,0xc7,0x0d,0xc9,0x18,0x93,0x66,0x2a,0x1e,0xb5,0xa8,0xfc,0x7b,0x54,0x3e,
    0x9e,0xdd,0x9d,0x90,0xfb,0x05,0xef,0xa4,0xd7,0xe8,0x19,0xa7,0x3d,0xe7,0xb4,0x64,
    0xfb,0x98,0x0f,0xb4,0xaf,0xb1,0xe7,0x3a,0xd0,0x59,0x17,0x12,0xb7,0x84,0x3e,0x06,
    0xfe,0x61,0xc8,0x73,0x45,0xeb,0xf4,0x4c,0x1a,0xd8,0x47,0x21,0xcb,0xf8,0x50,0xcf,
    0xfe,0x6a,0x71,0x3c,0x24,0xbe,0x44,0x3e,0xfd,0x34,0x24,0x36,0x30,0x2b,0xfc,0xfc,
    0xcf,0x90,0xb8,0xf9,0xd9,0xea,0x7e,0x8f,0xf3,0xdd,0xb8,0x8c,0xfe,0x9b,0x25,0xff,
    0xac,0x0a,0x0b,0xae,0x31,0xa3,0xff,0xc0,0xfd,0x33,0x2c,0x38,0xf8,0x67,0x58,0x46,
    0xff,0xcd,0x92,0x7f,0x3c,0x77,0x6a,0x46,0xff,0x81,0xbb,0x52,0x1c,0xc6,0xf9,0x9b,
    0xee,0xd9,0x18,0x64,0xee,0xcd,0xf3,0x6f,0xaa,0x4e,0xf8,0x6f,0xeb,0xf5,0x6c,0x3d,
    0x03,0xc3,0xbe,0xe8,0x7e,0x3d,0x5b,0x7c,0x30,0x26,0xde,0xa4,0x73,0x47,0x1b,0xf7,
    0x7e,0x7a,0x16,0xf3,0x60,0x5c,0xcc,0x93,0x87,0x63,0x3e,0x17,0x79,0xc8,0x3d,0x2f,
    0x98,0xa3,0x67,0x26,0x0f,0x4b,0xde,0x62,0xd3,0x23,0xf1,0xb7,0x63,0xd3,0x6f,0xe2,
    0x6f,0xc7,0xa6,0x47,0x63,0xca,0xfe,0x26,0x2e,0x62,0xcc,0x63,0x31,0x71,0x1f,0x9b,
    0x1e,0x8f,0x89,0x9b,0xde,0x53,0xd2,0xf3,0xb1,0xe9,0xe9,0x98,0xb8,0x8f,0x4d,0xf3,
    0x62,0xe2,0xd6,0x86,0x67,0xd4,0x56,0xd8,0x83,0xef,0x96,0x3a,0xdf,0xc1,0xf7,0x0b,
    0xf2,0xfc,0x52,0xf9,0x6e,0x41,0x5c,0xf8,0x63,0x61,0x4c,0xdd,0x79,0x71,0xd1,0x9e,
    0x17,0x62,0xda,0x01,0x66,0x31,0x68,0x49,0x4c,0xdc,0x62,0x98,0xd9,0x5a,0x1a,0x17,
    0xfd,0x38,0x26,0x63,0x3f,0xa3,0x6f,0x20,0xbf,0x40,0x1c,0x6c,0x9e,0x97,0xb1,0x1c,
    0x70,0x0b,0xc5,0x61,0x7d,0xc0,0x79,0x0f,0x9c,0x39,0x3a,0x3c,0x97,0xc2,0xfa,0xf0,
    0x52,0xcc,0x33,0x20,0x73,0x54,0xbe,0xad,0x11,0x2f,0xc7,0xe4,0xac,0xde,0xcb,0x62,
    0x62,0xb0,0x6b,0xf1,0xe3,0xb5,0x98,0xb8,0x25,0x8b,0x4d,0xbf,0x8f,0x39,0x36,0x5f,
    0x73,0xf7,0x9a,0xcb,0xdd,0xbd,0xe6,0xef,0xeb,0xee,0x35,0x6d,0x8c,0xbd,0xe9,0xc6,
    0xfd,0x4f,0x33,0x8e,0x7d,0xcc,0x85,0xe5,0xf2,0xa5,0xb5,0xbb,0x45,0xed,0x06,0x07,
    0x1f,0x2c,0x75,0x7e,0xfb,0x73,0x5c,0xbc,0x4b,0xb8,0xd7,0xde,0x2f,0xc4,0xc4,0x5b,
    0x34,0xcf,0xde,0x51,0x79,0xef,0xe8,0x3e,0x1c,0xe7,0x6d,0xde,0xcb,0x28,0x67,0xe9,
    0x7e,0xb5,0xf1,0x7d,0x71,0xa8,0xef,0x4f,0xdd,0x79,0x81,0x77,0x63,0x72,0xa5,0x52,
    0x81,0xbd,0x2f,0xac,0xec,0xb0,0x55,0xc2,0x2a,0xee,0xfd,0xc7,0x99,0x01,0xf5,0x2d,
    0x3f,0x3c,0xa0,0xae,0xe5,0x47,0x04,0xd4,0xb3,0x58,0x74,0x6e,0x40,0x1d,0xc8,0x81,
    0xb3,0x18,0xf3,0x4d,0x4c,0xee,0xc7,0xe5,0xa8,0x26,0x57,0x4e,0x8a,0x33,0xdb,0xc0,
    0xa7,0x69,0xce,0x80,0x6b,0x48,0xc8,0xe3,0xbc,0x92,0xc5,0xad,0x20,0x21,0x8e,0xb3,
    0x4a,0x66,0x33,0x4c,0x88,0xdb,0x73,0x92,0x28,0x61,0x39,0xc0,0xad,0x4d,0x49,0x42,
    0xdc,0x9f,0x95,0xd8,0x22,0x21,0x8e,0x84,0xfa,0xd4,0xde,0x37,0xb8,0xfa,0x80,0x47,
    0x7d,0x46,0xe9,0x1c,0x54,0x9b,0x84,0xbc,0xd9,0x6c,0x27,0x9b,0x65,0x67,0x73,0x1b,
    0xd9,0x6b,0xe7,0x6c,0x6e,0xeb,0x6c,0x6e,0x53,0x67,0x73,0xbb,0x84,0xbc,0xd9,0x6c,
    0x2f,0x9b,0x15,0x67,0xb3,0x83,0x6c,0xb6,0x77,0x36,0x77,0x72,0x36,0x3b,0xd4,0xd9,
    0xfc,0x4e,0x42,0xde,0xf4,0x3b,0xaa,0x3e,0xbe,0x4e,0xbb,0x39,0xfd,0x8e,0x75,0xfa,
    0xbb,0x27,0xe4,0x4d,0xbf,0x93,0x74,0x7d,0xf9,0x7b,0x39,0xfd,0x4e,0x75,0xfa,0x7b,
    0x27,0xe4,0x4d,0x7f,0x7f,0xe9,0x7a,0xfd,0x03,0x9c,0xfe,0xfe,0x75,0xfa,0x5d,0x12,
    0xf2,0xe7,0x68,0x8c,0x7c,0x7f,0x33,0x63,0x64,0x98,0xb8,0x83,0x36,0xc3,0xd9,0xba,
    0x77,0x70,0x42,0x5d,0xc8,0x8c,0xd6,0x37,0x1b,0x87,0x24,0xc4,0x31,0xa7,0xba,0x25,
    0x9c,0x53,0xb8,0x62,0x9e,0x82,0xbf,0x3e,0xa3,0x0c,0xe6,0xd9,0x5b,0xf9,0xff,0x33,
    0xc5,0xa1,0x5e,0xd3,0x32,0x9e,0x89,0x06,0x37,0x38,0x29,0xb8,0xda,0x59,0xda,0x8c,
    0x6b,0x08,0xb8,0x61,0xe2,0x1e,0xd1,0x5c,0xee,0x9e,0x90,0x6f,0xac,0x9d,0xd9,0xae,
    0x96,0x86,0x8b,0xb7,0xd8,0x0b,0xbe,0x47,0x9e,0x86,0xab,0x3e,0xf8,0x3f,0x40,0x67,
    0xa4,0xfb,0x24,0x1c,0x77,0x18,0x27,0xe8,0xd7,0x1b,0x73,0x9b,0xa8,0xcb,0x11,0x09,
    0xb9,0xeb,0xb3,0x42,0xf6,0x07,0x92,0x43,0xff,0xed,0xed,0x64,0xfb,0x25,0xe4,0xbc,
    0xec,0x71,0xb2,0x07,0xb9,0x2e,0x4e,0xb6,0x7f,0x42,0xce,0xcb,0x0e,0x4c,0x58,0x1e,
    0xec,0xf4,0x77,0xb2,0x83,0x12,0x72,0x48,0x5b,0xe4,0xb2,0xc0,0x06,0x6b,0x3e,0xec,
    0x2a,0xfe,0x29,0xf9,0xe0,0x94,0x84,0x1c,0xfc,0x87,0xb5,0x67,0xa8,0x6b,0x3f,0xb8,
    0x53,0xf3,0x34,0x54,0xed,0xc7,0xff,0xc9,0x2a,0xe3,0xb4,0x84,0xe7,0xce,0xa1,0x3b,
    0x35,0xc7,0x50,0x9f,0x33,0x54,0xe6,0x69,0xea,0x47,0xd3,0x1b,0xea,0xfa,0x11,0x7d,
    0x37,0x50,0x7e,0x3d,0x43,0xf6,0x21,0x7b,0xa6,0x64,0x71,0xb5,0xb5,0x6c,0x98,0xfa,
    0xa7,0xa9,0xb4,0xe9,0xb8,0x40,0x7f,0x3c,0xa9,0xfa,0x9f,0x93,0xb0,0xff,0x9f,0x54,
    0xfd,0x5b,0x5c,0xfd,0xc1,0x8d,0xc8,0xd3,0xb9,0xd2,0x3b,0x57,0xf3,0x19,0xf5,0x1f,
    0x29,0x5f,0x96,0x4a,0x85,0x8f,0xce,0x93,0x8f,0xaa,0xe2,0x4d,0xb6,0x51,0xb2,0x65,
    0x27,0x7b,0xbe,0x93,0x6d,0xac,0xf9,0x99,0x63,0xb1,0x49,0x78,0x27,0xd9,0x3b,0xdf,
    0xd9,0x19,0x2d,0x3b,0x15,0x67,0xe7,0x02,0x67,0x67,0xb4,0xb3,0x73,0xa1,0xb3,0x03,
    0x9b,0x17,0x38,0xdf,0x5f,0x94,0xf0,0x2c,0xfe,0x85,0xce,0xf7,0x17,0xcb,0xf6,0x45,
    0xf2,0x67,0x8b,0xda,0x3c,0xa2,0x2e,0xdf,0xe2,0xfa,0x62,0x7a,0x46,0x3d,0xf8,0x05,
    0x67,0xfe,0x47,0xb8,0xf9,0x38,0x36,0xe1,0xbc,0xb5,0x31,0x35,0x2e,0x21,0x06,0x9d,
    0xe1,0x65,0xd6,0xf1,0x12,0x37,0xc7,0xc7,0x29,0x56,0x8c,0x10,0xd7,0xba,0x19,0xee,
    0x51,0xf5,0xd9,0xc4,0x84,0x18,0xf4,0xed,0x1c,0x26,0xbe,0x29,0xc3,0xf7,0x04,0xf6,
    0xcc,0x6c,0x52,0x42,0x39,0xe0,0xd8,0x1b,0x22,0xe6,0xd4,0xce,0x00,0x39,0xbb,0x93,
    0xea,0xec,0x4e,0x96,0x5d,0x94,0x6d,0x76,0xa6,0x24,0xc4,0xeb,0xed,0x5c,0xe3,0xec,
    0x4c,0x91,0x9d,0x53,0xcb,0x5c,0x23,0xa7,0x8a,0x43,0xfb,0x51,0x9e,0xe1,0xd3,0x1d,
    0x7e,0x4d,0x52,0xec,0x2b,0x6f,0x4a,0xa8,0x53,0x72,0xcf,0x86,0x7f,0x96,0x10,0x6f,
    0x75,0xf7,0xdc,0x37,0x27,0xc4,0x3f,0x76,0x7b,0xd2,0x19,0xd2,0x2d,0x3b,0xdd,0x5b,
    0x13,0xe2,0xfe,0x7e,0xfd,0xb6,0x84,0xf8,0x32,0x77,0xbf,0x7e,0x7b,0x42,0x9b,0xb7,
    0xb9,0xba,0xdc,0x29,0x7b,0x15,0x67,0xef,0xe7,0x09,0xf1,0x56,0xa7,0x7b,0x57,0x42,
    0xfd,0x9f,0x3b,0xdd,0x59,0x09,0xdb,0xe8,0xdb,0x71,0x4f,0x42,0xdc,0xb7,0xe3,0x97,
    0x09,0x71,0xdf,0x8e,0xfb,0xa4,0xeb,0xdb,0x71,0x7f,0x42,0xdc,0xb7,0xe3,0x81,0x84,
    0xb8,0x6f,0xc7,0xec,0x84,0x36,0x1f,0x70,0x75,0x79,0x48,0xf6,0x7c,0x3b,0x1e,0x4e,
    0x88,0xfb,0x76,0xcc,0x49,0xa8,0x0f,0xce,0xee,0x29,0xc6,0x07,0x6c,0x1f,0x38,0xc4,
    0x84,0x09,0xee,0xfc,0x1f,0xb8,0x4b,0xf2,0x34,0x41,0xe7,0x5c,0xf0,0xdf,0xd6,0xb7,
    0xcb,0xb4,0x97,0xb2,0xfc,0x24,0xed,0xa5,0x2c,0x7f,0x95,0xdb,0x4b,0x61,0x8e,0x4c,
    0x0e,0xa8,0x03,0x39,0x70,0x36,0x77,0xa6,0x04,0xec,0x03,0xcb,0x5f,0x1b,0xb0,0x2d,
    0x97,0x6b,0xae,0xce,0x4d,0x88,0x4d,0x71,0xf3,0x6b,0x5e,0xc2,0xfc,0x5c,0x17,0xc7,
    0x9f,0x95,0x9c,0xc7,0x9e,0x4f,0x58,0xee,0x5c,0xd9,0x03,0xb6,0x38,0x21,0x3e,0xcf,
    0x61,0x4b,0x13,0xea,0xcf,0x73,0x71,0xe3,0xc5,0x84,0xb2,0xe0,0xae,0x10,0xf6,0x72,
    0x42,0x1c,0x67,0xc9,0x2f,0x13,0xf6,0x4a,0x42,0x1c,0xdf,0x21,0x35,0xd9,0xf7,0x76,
    0x09,0x71,0xec,0xc1,0x91,0xff,0x5d,0x52,0xec,0xc1,0x97,0x25,0x5c,0x63,0x5b,0xdd,
    0xbe,0xf4,0xb5,0x84,0x32,0x13,0x94,0x5f,0x9e,0x10,0xb3,0xfb,0xa2,0xd7,0x13,0x62,
    0x98,0x4f,0xbf,0xb2,0x67,0xb7,0x09,0xf1,0x3b,0x4b,0xc5,0xfc,0x7d,0x23,0x21,0x6e,
    0xcf,0xce,0x5f,0x90,0xfe,0x9b,0x92,0x7d,0x43,0xf1,0xcd,0xfa,0x73,0x82,0xce,0x2d,
    0xd5,0xe6,0x60,0x46,0x1d,0xc4,0x3c,0xc8,0xa3,0xaf,0xad,0xac,0x9b,0x03,0x8e,0x8f,
    0xbb,0x34,0x46,0x6e,0x75,0x63,0x04,0xdc,0x0c,0x9c,0x1d,0x96,0x4d,0xfc,0xb7,0x72,
    0x6f,0x0f,0x68,0x77,0xac,0xd6,0x24,0x93,0xb9,0xd5,0x95,0x7b,0x67,0x46,0x19,0xd4,
    0xe5,0x76,0xd9,0xba,0x47,0xe5,0xde,0x13,0xb0,0xec,0x66,0xbd,0xbb,0xba,0x57,0xfa,
    0xb8,0x5a,0x9b,0x57,0x66,0x94,0xb3,0xfa,0x19,0xbe,0x4a,0xb8,0x8d,0x6d,0x9b,0x53,
    0x8f,0x04,0xd4,0x79,0xd1,0xcd,0x8b,0x5f,0x07,0x94,0x7f,0xc4,0x9d,0x23,0x7e,0x5c,
    0x67,0x7c,0x71,0x76,0xd8,0x74,0x9f,0x08,0x58,0x5f,0x70,0xff,0xad,0xd8,0xf8,0x64,
    0x50,0xc4,0xc6,0x27,0xb4,0x77,0x83,0x8f,0xe6,0xd7,0x9d,0xa3,0x9d,0x97,0xa7,0x37,
    0x54,0x7f,0x5c,0x71,0x86,0x1c,0x67,0xe8,0xfa,0x65,0x2c,0xff,0x41,0xad,0xaf,0x86,
    0x1f,0x93,0xd1,0x76,0x3f,0xad,0xa5,0x68,0xff,0x7c,0xe9,0xcf,0x73,0xfa,0x87,0x48,
    0x7f,0xb5,0xd6,0x4a,0xc3,0x0f,0x95,0x3e,0xf8,0x06,0x17,0x7b,0x56,0x26,0xdf,0x3e,
    0xb7,0xfb,0xb7,0x84,0xb8,0x4f,0x76,0xee,0xef,0x93,0x84,0xbc,0x3f,0xf7,0xf7,0x8f,
    0x84,0xb8,0x3f,0xf7,0xf7,0x59,0x42,0xdc,0x9f,0xfb,0xfb,0x57,0x42,0xdc,0x9f,0xfb,
    0xfb,0x42,0x72,0xfe,0xdc,0xdf,0xfa,0x84,0xb8,0x3f,0xf7,0xf7,0x65,0x42,0xfd,0xf5,
    0x2e,0xce,0x7d,0x25,0x5d,0x7f,0xee,0x6f,0x43,0x42,0xdc,0x9f,0xfb,0xfb,0x3a,0xa1,
    0xfe,0x06,0xa7,0x8b,0x8f,0x3c,0xa1,0xeb,0xcf,0xfd,0x95,0x53,0xe2,0xfe,0xdc,0x5f,
    0x25,0xa5,0x3e,0x38,0xd3,0x5d,0x93,0x7c,0xfb,0xdc,0x6e,0x94,0x12,0xf7,0xc9,0x7c,
    0x16,0xa7,0xe4,0xbd,0xcf,0xb2,0x94,0xb8,0xf7,0xd9,0x96,0x29,0x71,0xef,0xb3,0x36,
    0x29,0x71,0xef,0xb3,0xad,0x25,0xe7,0x7d,0xd6,0x36,0x25,0xee,0x7d,0xd6,0x2e,0xa5,
    0x7e,0x5b,0x57,0xf7,0x6d,0xa5,0xeb,0x7d,0xb6,0x5d,0x4a,0xdc,0xfb,0x6c,0xfb,0x94,
    0xfa,0xdb,0x39,0xdd,0x1d,0xa5,0xeb,0x7d,0xd6,0x3e,0x25,0xee,0x7d,0xd6,0x21,0xa5,
    0x3e,0x38,0x3b,0x2b,0xf9,0x41,0x42,0x5f,0x82,0xc3,0xf3,0x0f,0x7c,0xcf,0xf2,0x81,
    0xbb,0x9f,0xda,0x33,0x65,0x0c,0xc4,0xf3,0x1f,0x7b,0xb6,0xd3,0x29,0xe5,0xb7,0xce,
    0xe0,0xf0,0x1c,0x1d,0xdf,0x14,0xee,0x95,0xf2,0x5b,0x98,0xb1,0xee,0x3b,0x94,0xbd,
    0x53,0xe2,0x1b,0xdf,0x2b,0xa4,0xc4,0xe6,0xeb,0x3b,0xa6,0x8d,0xef,0x15,0x52,0x72,
    0xa6,0xb7,0x5f,0x9d,0xde,0xfe,0x29,0xb1,0xfa,0xf7,0x16,0x07,0xa4,0xe4,0x4c,0xef,
    0xc0,0x3a,0xbd,0xef,0xa7,0xc4,0xea,0xdf,0x63,0x74,0x4d,0xc9,0xd9,0x79,0x8b,0x83,
    0x53,0xb6,0x69,0x59,0xa9,0x68,0xcf,0x21,0x6a,0xcf,0xc1,0xce,0x7e,0xb7,0x94,0xb8,
    0x9d,0x7f,0x3a,0x4c,0x7a,0xcb,0xdd,0xb9,0xa3,0xee,0x29,0xe5,0xc0,0xf9,0x77,0x36,
    0x3d,0x52,0x72,0xe6,0xc3,0x5e,0x29,0xbf,0x75,0xdb,0xd3,0xd5,0xa3,0x4f,0x4a,0xdc,
    0xd7,0xe3,0x70,0xd5,0xa3,0x8f,0xab,0xc7,0x11,0x29,0x71,0xab,0xc7,0x91,0xd2,0x5b,
    0xee,0xf6,0x15,0x47,0xa5,0x94,0x3b,0x32,0x2d,0xd6,0xa7,0x1f,0xa4,0xc4,0xfd,0x73,
    0xbb,0xa3,0x53,0xe2,0xe8,0x7b,0x7c,0x1b,0xb5,0xa1,0x54,0x3c,0xfb,0x3a,0x26,0xe5,
    0xf7,0x52,0xf0,0x57,0x8f,0xb4,0x78,0xf6,0x75,0x6c,0x4a,0xce,0xda,0x72,0x7c,0x4a,
    0x3b,0x4d,0x5a,0xcb,0x6a,0xe7,0x73,0x52,0xca,0x81,0xb3,0xb1,0x34,0x30,0x25,0x8e,
    0x7e,0xb3,0xfb,0xa1,0x93,0x52,0xf6,0x3f,0x38,0x5b,0x87,0x07,0xa5,0xc5,0x3a,0x0c,
    0x7e,0xbd,0xbe,0x27,0xb6,0x75,0xf8,0xd5,0x80,0xf1,0xfe,0x2c,0xdd,0xdf,0xcf,0x4e,
    0x8b,0xd8,0x3e,0x48,0x73,0xed,0x6c,0x71,0x0f,0x6d,0x86,0xb3,0x3d,0xd5,0xa8,0x94,
    0xba,0x90,0xc1,0x5a,0xd0,0x9c,0x16,0x6b,0x01,0xb8,0xd1,0xe8,0xc3,0x94,0xb1,0x7c,
    0xb4,0x6b,0xef,0xa3,0xd2,0x81,0xae,0xed,0xa3,0x1e,0x4b,0x89,0x9b,0xcc,0x93,0x29,
    0xcb,0xf3,0x32,0x73,0x53,0xe2,0xb6,0x77,0x79,0x3a,0x25,0x06,0x5d,0xdb,0xbb,0xcc,
    0x4b,0x89,0xe3,0xbb,0x63,0xdb,0xbb,0xcc,0x4f,0x89,0x63,0xef,0x72,0xbe,0x7c,0xf0,
    0x4c,0x4a,0xdc,0xf6,0x22,0x0b,0x52,0x62,0xd6,0xd7,0xcf,0xa5,0xc4,0xf0,0xbd,0xb2,
    0x9d,0xf5,0x5c,0x98,0x72,0x1f,0x02,0xce,0x9e,0x4b,0x2f,0x4a,0x89,0xdb,0x73,0x69,
    0xf3,0xf1,0xe2,0x94,0x9c,0xed,0x11,0x96,0xa4,0xd4,0x5b,0x9c,0x72,0x8d,0x33,0xbf,
    0xe0,0x6a,0x7b,0x84,0xc7,0xb4,0x37,0xc1,0xba,0xb7,0x44,0xfe,0xb3,0xbd,0x49,0x4b,
    0xca,0x7e,0xdb,0x57,0xe7,0x4c,0x5b,0x9d,0xaf,0xc1,0x8d,0x41,0x5b,0x64,0x73,0x82,
    0xca,0x68,0x55,0x7e,0x4c,0x5a,0xbc,0x8b,0x18,0xa7,0xfe,0x7c,0x35,0x28,0xce,0x1c,
    0x8c,0x4f,0x89,0x4f,0x73,0xf1,0xef,0x92,0x94,0xf5,0x19,0x5f,0x67,0xab,0xd5,0xd5,
    0xf7,0x71,0xd5,0x17,0xe5,0x5d,0xa2,0x3a,0x98,0xaf,0x26,0xd6,0xd5,0x77,0x8a,0xab,
    0x2f,0xb8,0xcb,0xf3,0x74,0xb5,0x6c,0x5e,0xad,0x32,0xa6,0x28,0x7f,0xb9,0xab,0xef,
    0x95,0xae,0xbe,0x13,0xed,0xfb,0x8e,0x94,0xb8,0xaf,0xef,0x64,0xd5,0xf7,0xaa,0x3a,
    0x5b,0x53,0x5c,0x7d,0x9f,0x54,0x7d,0x51,0xde,0x64,0xd5,0xc1,0x9e,0xeb,0x5e,0x57,
    0x57,0xdf,0x19,0xae,0xbe,0xe0,0xa6,0xe6,0x69,0x86,0x6c,0x4e,0x75,0xe3,0xe4,0x7a,
    0x95,0x3b,0xd6,0xd5,0x65,0x7a,0x4a,0x7c,0xb9,0x5b,0x3b,0x6e,0x48,0xe9,0xaf,0xe9,
    0x4e,0xf7,0x26,0xe9,0xe2,0x9b,0xf7,0x8d,0xf7,0x88,0x29,0x71,0xff,0x0e,0xf6,0x96,
    0x94,0x75,0xff,0x99,0xda,0x66,0xf5,0x98,0xe1,0xda,0x36,0x2f,0xa3,0x0c,0xda,0x7b,
    0x8b,0xea,0x6b,0xdc,0xd3,0x19,0xcb,0x06,0x77,0x83,0x38,0xdb,0xd7,0xdd,0xe6,0xe6,
    0x37,0xe4,0xe0,0x53,0xe3,0xee,0x70,0xdc,0xbc,0xac,0x38,0x5f,0x84,0x71,0xff,0x73,
    0xcd,0x61,0xc4,0x15,0xc3,0x7e,0xa1,0xf9,0x0a,0xcc,0xde,0xad,0xdf,0x9d,0x12,0x1f,
    0xe2,0xde,0xad,0xcf,0x4c,0xa9,0x0f,0xce,0xe6,0xcb,0xac,0x94,0xb8,0xb5,0xf9,0x97,
    0x29,0xb1,0xdb,0xdc,0x5a,0x7b,0x5f,0x4a,0x1c,0xf5,0x3a,0xa1,0x94,0xd4,0xf6,0x1b,
    0x7f,0x0c,0xb8,0x07,0x04,0x57,0xd5,0xf7,0xc9,0xfa,0x8c,0x7d,0x93,0xbd,0xe4,0x7c,
    0xed,0xc5,0xa1,0xf3,0xa7,0x8c,0xfb,0x4e,0xec,0x4f,0xa1,0x3f,0xc3,0x8d,0x83,0xbf,
    0x28,0x36,0xda,0xbb,0xd9,0xb7,0xdd,0xfe,0x16,0xdc,0x5f,0xf3,0xf4,0xb6,0x6c,0xfe,
    0xd5,0x7d,0x83,0xf6,0x8e,0xbe,0x41,0x5b,0xef,0xce,0xe2,0xad,0x08,0x88,0x5f,0x65,
    0xcf,0xf4,0x03,0x62,0x8d,0xa5,0x42,0xef,0x3d,0xe9,0x35,0x39,0xbd,0xf7,0x03,0xe2,
    0xa6,0xb7,0x32,0x20,0xd6,0xe8,0xbe,0xa9,0x5c,0x15,0xd0,0xde,0xca,0xa0,0xf8,0xa6,
    0x72,0x8d,0xbe,0xc5,0x5b,0xa5,0xef,0xff,0xf0,0xdd,0xf4,0x87,0xfa,0x66,0x7a,0x78,
    0x9e,0xc7,0x7f,0xc8,0xfc,0x49,0xef,0x29,0xac,0x1d,0x6f,0xd7,0x7d,0xdf,0x88,0xeb,
    0x86,0x7c,0x05,0xe9,0x96,0xa7,0xff,0x00,0x17,0x72,0x92,0xa9,0xac,0x49,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = false;
//     bool punchthrough = false;
//
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = true;
//
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
