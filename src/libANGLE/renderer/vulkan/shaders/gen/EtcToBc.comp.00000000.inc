// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x5c,0x09,0xdc,0x95,0x63,
    0xfa,0x3e,0xe7,0x3b,0xdf,0x79,0xd7,0x73,0x94,0x7d,0x4b,0x49,0xa2,0x12,0x46,0xc5,
    0x18,0x89,0x22,0x4b,0x65,0x09,0xf3,0x47,0x66,0x68,0x14,0xbe,0x94,0x35,0x63,0xf9,
    0xcf,0x14,0x5a,0x18,0x86,0xc1,0x10,0x2a,0x25,0x5b,0x48,0xb2,0x64,0xad,0x19,0x34,
    0x35,0x65,0xfb,0x5b,0x43,0x66,0x94,0x6c,0xa1,0x85,0xb1,0x65,0x84,0xf2,0x7f,0xaf,
    0x73,0x5d,0x77,0xef,0xfd,0x1d,0x7d,0xbf,0xdf,0xfb,0x3b,0xef,0x73,0x5d,0xf7,0x7d,
    0x3f,0xf7,0x73,0x3f,0xcf,0x73,0x3f,0xcf,0xbb,0x7d,0xa5,0x86,0x76,0x61,0xa1,0x54,
    0x2c,0x24,0x85,0xa8,0xf0,0x55,0xb5,0x50,0xfb,0xdb,0xb8,0xd0,0x50,0x28,0xea,0x77,
    0x37,0xfd,0xf6,0xd0,0x6f,0x2f,0xfd,0x1e,0x98,0xfd,0xa6,0x85,0xa0,0x26,0x77,0xc8,
    0x61,0xc7,0x1c,0xb6,0xdb,0x79,0xbf,0x3f,0x65,0xb7,0x6e,0x7b,0xfe,0x02,0xfa,0x1b,
    0x15,0x4a,0x35,0x3b,0xe0,0x5a,0x64,0x76,0xcb,0xd9,0x6f,0x63,0x76,0x9c,0x79,0xf2,
    0xe9,0x67,0x01,0x3f,0x26,0xa3,0x07,0x64,0xc7,0x79,0x19,0xd8,0x32,0xb3,0xd1,0x58,
    0xb3,0x59,0x28,0xf4,0x94,0x0e,0x8e,0x43,0x33,0xad,0xd7,0xe9,0x4e,0xa1,0x9d,0x7e,
    0x0d,0x2b,0x0a,0x6b,0x74,0x58,0x83,0xb0,0xc8,0x61,0x25,0x61,0x15,0x87,0x35,0x0a,
    0x6b,0xe9,0xb0,0xb2,0xb0,0xcd,0x1c,0x16,0x08,0xdb,0xca,0x61,0xa1,0xb0,0x56,0x68,
    0x73,0x66,0xdd,0xea,0x3d,0x24,0xb3,0x8a,0x36,0xa5,0xd9,0xf9,0x36,0x2a,0x0f,0x50,
    0x79,0x5b,0xc9,0xa2,0xad,0x05,0x71,0x38,0x07,0xd7,0x51,0xe5,0xd9,0x99,0x03,0x3b,
    0x14,0x72,0x1e,0xe5,0xb6,0xeb,0xcb,0xa5,0xc2,0x59,0x41,0xce,0x3d,0x13,0x34,0x97,
    0x45,0xb9,0xad,0x62,0x02,0x59,0x94,0xb7,0x16,0xf7,0xcf,0x80,0xf5,0x6c,0x2d,0xee,
    0xb8,0x84,0x7a,0x9b,0x66,0x5e,0xc3,0xef,0xb6,0x19,0x56,0x52,0x1b,0x36,0xcf,0xe4,
    0x51,0xcd,0xf6,0xb2,0xbd,0x65,0x56,0x0e,0x15,0x87,0x86,0x1a,0xde,0x58,0x8b,0x6d,
    0xa8,0x03,0xf2,0xb1,0xe4,0x8b,0xe2,0x13,0x71,0xb1,0xf4,0x5b,0xea,0xdc,0xf4,0x37,
    0x16,0xdf,0xb2,0x16,0xeb,0x86,0xc2,0x26,0x92,0xdb,0x4c,0x72,0x8d,0x92,0x6b,0x23,
    0x39,0xd4,0xbd,0x45,0xe6,0x61,0x07,0xd5,0x03,0x59,0xc4,0xac,0x83,0xfa,0x16,0xe5,
    0x2e,0x92,0x43,0x79,0x17,0xf9,0x74,0x72,0x76,0xec,0xea,0xca,0x83,0x1c,0x0f,0xd9,
    0x26,0xf9,0x6c,0xfc,0x50,0xf5,0xb3,0x95,0x87,0x69,0x1c,0x59,0xf9,0x5c,0x8d,0x0d,
    0x2b,0x0f,0x97,0xaf,0x56,0xbe,0x48,0x6d,0xb2,0xf2,0x48,0x8d,0x29,0x2b,0x8f,0xce,
    0x8e,0x36,0xae,0x3c,0x56,0x31,0x31,0x7f,0xc6,0x49,0xbf,0x55,0x56,0xbe,0x51,0x75,
    0x8d,0x73,0xf2,0x37,0xd5,0xe6,0x54,0xa1,0xd0,0x39,0x8b,0x0a,0xb8,0x9b,0x65,0x63,
    0xa4,0x7c,0xbd,0xc9,0xc9,0x8e,0x57,0x3c,0xac,0x3c,0x41,0xb1,0xb5,0xf2,0x44,0xcd,
    0x07,0xb3,0x75,0x8b,0x6c,0x8d,0x97,0xec,0x44,0x27,0x3b,0xa9,0x2e,0x4e,0x93,0xd5,
    0x2f,0xa6,0x7b,0xab,0x64,0x86,0x8b,0x9b,0xe8,0xb8,0x29,0xe2,0x06,0xc9,0x4f,0x6f,
    0xf7,0xb6,0x02,0xc7,0xa5,0xc9,0xde,0xee,0xda,0x33,0x59,0xbc,0xc9,0xde,0x91,0x1d,
    0x89,0x93,0xbd,0xd3,0xf9,0x3b,0x4c,0xbc,0x71,0x77,0xa9,0xbe,0xf1,0xb2,0xe3,0xb9,
    0xa9,0xd2,0x1b,0xbe,0x01,0xee,0x6e,0xf9,0x6a,0xf5,0x4f,0x70,0xdc,0x3d,0x75,0x6d,
    0xf4,0xdc,0xbd,0xae,0x8d,0xf5,0xdc,0x34,0xa7,0x37,0xbe,0x8e,0xbb,0x4f,0xbe,0x0c,
    0x72,0x9c,0xb5,0x77,0xba,0xe6,0x9f,0xc9,0xde,0x2f,0x6c,0x92,0x74,0xbc,0x9d,0x19,
    0x2e,0xbe,0x93,0x15,0x0f,0xe3,0x1e,0x70,0xed,0x1d,0xbf,0x9e,0xdb,0xb4,0x36,0xbe,
    0x1e,0xd4,0x18,0xba,0x45,0x7d,0x38,0x45,0x7d,0x70,0xa7,0x62,0x38,0x55,0x31,0xb9,
    0x47,0x6d,0x9c,0x26,0x9f,0xef,0x57,0x9d,0x0f,0x68,0x9e,0xce,0xd4,0x78,0xb8,0xd1,
    0xf9,0x3f,0x27,0x3b,0x7e,0xca,0x8e,0x4e,0xd9,0x8c,0xc3,0xfc,0x7e,0x2d,0x3b,0x5a,
    0x67,0x3d,0x68,0x39,0x35,0xd0,0x78,0x0c,0x36,0x70,0xc0,0xe6,0x42,0xf1,0x90,0xef,
    0xae,0xf2,0x1b,0xc2,0xc0,0xbf,0xe9,0xf4,0x6d,0xfe,0x2c,0xa9,0x9b,0x4f,0x4b,0x15,
    0xc3,0x8e,0xf2,0xe1,0x23,0xe5,0x8a,0x65,0xd2,0xf5,0xb9,0x60,0x85,0xf2,0xb9,0x95,
    0x57,0xba,0xb9,0x8e,0xf2,0xaa,0xf5,0xf3,0x25,0xa8,0xe5,0x9a,0xcf,0xa4,0xb3,0x52,
    0x9c,0xc9,0x7d,0x5e,0x97,0x13,0x56,0xd7,0xd6,0xbe,0xbc,0xbc,0x46,0x6b,0x9c,0x95,
    0x8b,0x45,0xae,0x0d,0x56,0xae,0x14,0x91,0x97,0x73,0x7b,0x9d,0x8b,0x79,0xce,0x40,
    0xf9,0xa4,0x22,0x73,0x12,0x72,0xc4,0xc0,0x22,0xdb,0x01,0xcc,0xf4,0x7f,0x57,0x44,
    0x1b,0x5d,0x0e,0x2c,0x32,0x67,0xae,0xcf,0x81,0x45,0xae,0x37,0x56,0x1e,0x5c,0xe4,
    0x7a,0xdb,0x39,0x9b,0x89,0xb0,0x77,0x4a,0x31,0x1f,0x8f,0xb7,0x29,0xa7,0xc1,0x26,
    0xec,0x40,0x77,0x70,0x91,0xf1,0x3f,0xad,0xc8,0x3e,0x87,0x0e,0x62,0x82,0x98,0x4e,
    0x29,0x72,0x8c,0xda,0x61,0xf8,0x6d,0x45,0x8e,0x07,0x3b,0xac,0xee,0x65,0x45,0xee,
    0x0e,0xac,0xfc,0xa9,0x16,0x7d,0x2b,0xef,0xdf,0xc0,0x35,0xcb,0xca,0x7d,0xb2,0xf2,
    0x26,0xae,0x7c,0x66,0x56,0xae,0x2a,0x16,0xad,0x4a,0xcc,0x9d,0x27,0xd5,0xfc,0x29,
    0xd7,0xce,0xb7,0x2b,0x71,0xec,0x73,0xcc,0x13,0x6b,0x5d,0xe2,0x3c,0x59,0xe3,0xec,
    0xb4,0xc9,0xb0,0xed,0x9c,0xcc,0xf6,0x25,0xce,0x2f,0xe0,0x26,0xd3,0xb6,0x84,0xb1,
    0x9c,0xcb,0xec,0x50,0x62,0xfd,0x6d,0x9d,0x4c,0xbb,0xec,0x7c,0x5f,0x27,0xb3,0x63,
    0x89,0x3e,0xb7,0x73,0x32,0xed,0xb3,0xf3,0xfe,0x4e,0x66,0xa7,0x12,0xd7,0x9d,0xf6,
    0x4e,0x66,0xe7,0x12,0xd7,0x72,0x2b,0x77,0x90,0x8c,0xe9,0x74,0x2c,0x51,0xa6,0x83,
    0xd3,0xe9,0x94,0x9d,0xef,0xee,0x74,0x76,0xc9,0xca,0x4f,0x38,0x9d,0xce,0x25,0xca,
    0x00,0x47,0x5f,0x23,0x5e,0xbb,0x96,0x18,0x23,0xc4,0x04,0x6d,0x46,0x9b,0xe0,0x33,
    0x7c,0x42,0x1d,0xd0,0x41,0x5f,0xff,0xa2,0xc4,0xbe,0x6e,0xa5,0xf2,0xd1,0x25,0xae,
    0x07,0x5d,0x34,0x37,0x51,0x3e,0x46,0x98,0x95,0x07,0x94,0xf2,0xfd,0xc0,0x09,0x3a,
    0xf7,0x73,0xf5,0xe4,0x52,0x3e,0x2f,0x50,0x1e,0x5e,0xca,0xd7,0xf2,0x91,0x25,0xca,
    0x36,0x3a,0x7e,0x74,0x89,0x6b,0x33,0xf2,0x1a,0xf8,0x31,0x25,0xce,0x6f,0xf4,0xf7,
    0x38,0xf1,0x26,0x7b,0x59,0x89,0xb9,0x07,0x65,0xec,0x11,0x9e,0xe6,0x36,0x74,0x7d,
    0xf9,0x99,0x5a,0xf9,0xd2,0xfd,0xad,0x3c,0x97,0x7c,0x4f,0x2b,0xcf,0xab,0x95,0x7b,
    0xf6,0x34,0x7b,0xcf,0x97,0xb8,0x8f,0xd8,0x2a,0x2b,0x57,0x1b,0x39,0x7f,0x4a,0xce,
    0x5e,0xdf,0xda,0x9e,0xee,0x92,0xde,0x56,0x3e,0x22,0x2b,0xff,0x69,0x8b,0x09,0xfb,
    0x59,0xf9,0xc8,0xac,0x7c,0xc7,0x41,0x5b,0xac,0xaf,0xaf,0x7f,0x56,0x7e,0xf3,0xa2,
    0xe5,0x3d,0x30,0x3f,0x60,0xeb,0xa8,0x46,0xea,0x40,0x0e,0x9c,0xc9,0x0d,0xcc,0xce,
    0xcf,0xde,0xa4,0xb4,0x7f,0x77,0xc5,0x10,0xfb,0xc5,0xa2,0xab,0xf7,0x86,0x5a,0xbd,
    0xef,0xad,0xf7,0x73,0x7c,0x56,0x3e,0xf7,0xd8,0x6e,0x0d,0x56,0xfe,0x7b,0x63,0xbe,
    0xff,0x80,0xfc,0xf2,0xac,0xbc,0xe6,0xbb,0xef,0x7a,0x58,0x79,0x45,0x56,0x5e,0xfb,
    0xe3,0x88,0xfd,0xcc,0x8f,0x95,0x8d,0x94,0x59,0xa1,0x5f,0xf4,0x45,0x9b,0x32,0xe7,
    0x9c,0xf5,0xcd,0x44,0x95,0x1b,0x6a,0xfb,0xc9,0xb8,0xf0,0x44,0x99,0x7d,0x55,0x2e,
    0x34,0xff,0x2b,0xea,0x77,0xdb,0x4c,0xf3,0xc9,0x8c,0x84,0x1c,0xc6,0xc2,0x2c,0x09,
    0x02,0xeb,0xae,0xf2,0x6c,0x61,0xe0,0x9f,0x2d,0x33,0xa7,0xf9,0xbd,0xca,0xb9,0x59,
    0x05,0x3f,0x65,0x7f,0xa8,0xef,0xa9,0x80,0xf5,0x15,0xeb,0xea,0x6b,0xa8,0xad,0x2f,
    0xb4,0xf1,0xb4,0xf6,0xc9,0x90,0xed,0xae,0xf2,0x33,0x41,0x3e,0x06,0x70,0x3a,0x2f,
    0xb0,0xbc,0xc7,0x7c,0x8e,0x3d,0x32,0xb0,0x26,0xed,0x0b,0x31,0x6f,0x30,0xe6,0x7f,
    0xa8,0x70,0x8c,0xf9,0xbc,0xf2,0x63,0x85,0x79,0x65,0xac,0x9b,0x5f,0x6b,0x2b,0xcc,
    0x9b,0x83,0xdc,0x18,0x5d,0x57,0xe1,0x58,0xf4,0x87,0xe5,0xc4,0x9f,0x9c,0xfc,0x20,
    0x97,0x2b,0x91,0xd0,0xcc,0xf6,0x58,0x87,0x17,0xab,0xcc,0x59,0x76,0x18,0xde,0x50,
    0xe5,0x1a,0x63,0x87,0xb5,0xa7,0x54,0xcd,0xfd,0x3e,0xc9,0xe5,0xe8,0xc6,0x2a,0xf7,
    0x02,0x76,0x98,0x7c,0xb9,0xca,0xf5,0xd3,0x8e,0x62,0xd6,0x6f,0x90,0xdf,0xb1,0xca,
    0x73,0xb4,0x67,0xbc,0xce,0x21,0xff,0x85,0xc3,0xbf,0xcc,0xce,0xf7,0xca,0xe2,0xd0,
    0xa0,0x39,0x5b,0xd0,0x78,0xf9,0x2e,0x43,0xca,0xca,0x09,0xd8,0x23,0xcc,0x4a,0x99,
    0x47,0xba,0x6b,0xfd,0xf8,0x43,0xd8,0xbc,0x7c,0x95,0x2b,0x23,0xe7,0xdc,0xe1,0xca,
    0x58,0x33,0x57,0x96,0xf3,0x32,0xd6,0xc0,0x89,0x01,0xcb,0xff,0xcd,0x6a,0x9b,0xaf,
    0xfe,0xfd,0x21,0x3b,0x47,0x5e,0x58,0x10,0xb0,0x7e,0xfc,0xf6,0xd0,0xf5,0xc1,0x4b,
    0x01,0xf3,0xd4,0x91,0x99,0x16,0xf4,0x5e,0x0e,0x88,0xbd,0x14,0xe4,0x63,0x76,0xac,
    0xfa,0xfd,0xd5,0x80,0x3c,0xfa,0xbf,0x57,0x86,0x61,0xfe,0xbd,0x16,0x30,0xaf,0xc1,
    0x7e,0x0f,0x8d,0xa3,0xd7,0x03,0xe2,0x73,0x33,0x19,0x94,0x17,0x06,0xc4,0xb0,0x0f,
    0x78,0x56,0xd8,0x5b,0xc2,0x90,0xf3,0x0c,0x7b,0x3b,0xa0,0x6c,0x93,0xea,0x04,0xf6,
    0x2f,0xe9,0x81,0x3b,0x4a,0xd8,0x3b,0x01,0x7d,0xa9,0x65,0x2c,0x61,0x8b,0x03,0xe2,
    0x90,0x3f,0x3a,0x43,0xe0,0xef,0xe1,0x15,0xe2,0x26,0x6b,0xf5,0x2c,0x55,0x3d,0x4b,
    0x5c,0x3d,0xef,0xa9,0xbc,0xd4,0xd5,0xf3,0x81,0x74,0x8b,0xae,0x9e,0x0f,0x03,0xe2,
    0xef,0xb9,0x7a,0xfa,0x57,0x88,0xa3,0xbe,0xa2,0xab,0xe7,0xe3,0x80,0xed,0x44,0x1e,
    0xb7,0x58,0x7c,0x2a,0x0c,0xe3,0xb8,0xbf,0xe2,0xba,0x3c,0xa0,0x2c,0xb8,0x4b,0x85,
    0xad,0x0c,0x68,0x17,0xdc,0x08,0x5d,0x2f,0x7e,0x16,0x10,0x47,0xec,0xb1,0xd7,0xbb,
    0xa1,0xcc,0xfd,0xdf,0x20,0x17,0xfb,0x71,0x65,0xe2,0x23,0x94,0x27,0x6e,0x2c,0x13,
    0x33,0x9d,0x9b,0xa4,0x33,0xdc,0xe9,0xdc,0x5c,0x26,0x6e,0x3a,0xe3,0xcb,0xc4,0xfa,
    0x6b,0x1e,0x4f,0x28,0xd3,0x0e,0xf0,0x07,0x33,0x0c,0xf9,0xee,0x96,0x32,0xfd,0x01,
    0x37,0x31,0xd3,0x43,0xfe,0x9b,0x24,0x1c,0x63,0xef,0x56,0xe5,0xaf,0xef,0x33,0x0e,
    0xf8,0xe4,0xec,0x00,0x86,0xf1,0x87,0xf3,0x35,0xd9,0xef,0x7c,0x8d,0x47,0xe0,0xf3,
    0x54,0xd7,0x9d,0xb2,0x8b,0x7c,0xf2,0xac,0xb0,0x7b,0x84,0x21,0x9f,0xa0,0x6f,0xe0,
    0xe3,0x7d,0x65,0xe2,0x05,0xf5,0x61,0xed,0xfa,0xa0,0xcc,0x76,0x81,0x33,0xb9,0x19,
    0x92,0xb3,0x3e,0x04,0xf6,0x40,0x99,0xb2,0xe0,0x4c,0x77,0xa6,0x74,0x81,0x99,0xdc,
    0x63,0x65,0xe2,0xb0,0x87,0x58,0x21,0x3f,0xff,0x4d,0xb9,0xd9,0xec,0x3f,0x55,0xa6,
    0xcf,0x7e,0x8c,0xcc,0x51,0xcc,0x7d,0xbf,0xff,0xa3,0x4c,0x1c,0xfd,0x6e,0x71,0x9e,
    0x5b,0x26,0x6e,0x3e,0xcc,0x2b,0xd3,0xde,0x5c,0x67,0x7f,0xbe,0xec,0x17,0x9c,0xff,
    0x0b,0xca,0x94,0x9d,0xaf,0x7e,0xc5,0xfa,0xf0,0x9c,0xfa,0x75,0xac,0xfa,0x15,0x72,
    0xcf,0x0b,0x37,0xbd,0x17,0xca,0xd4,0x05,0x7e,0x4a,0x26,0x83,0xf5,0xe7,0x45,0xb5,
    0x69,0x60,0x26,0x83,0xbc,0xf5,0x7f,0xc2,0x5e,0x70,0x63,0xe6,0x25,0xd9,0x1e,0xe9,
    0xc6,0xcc,0xcb,0x65,0xe2,0xf7,0x65,0x32,0xe8,0xfb,0x57,0xca,0xc4,0x90,0x57,0xd1,
    0xff,0xaf,0xb9,0xfe,0x07,0xf7,0x6a,0x76,0x2c,0x52,0xff,0xbf,0x5a,0xce,0xe7,0xd8,
    0xd7,0x01,0xeb,0x2c,0xd5,0xe6,0x03,0xd7,0x88,0xb5,0x01,0x71,0x7f,0xcc,0x95,0x7f,
    0xeb,0x02,0xf2,0x63,0x94,0x37,0x80,0x15,0x43,0xe2,0xeb,0x2a,0xb9,0xdd,0x52,0x48,
    0x1c,0x7f,0xff,0x14,0xd6,0x18,0x12,0xc7,0xbe,0xc8,0xe4,0x02,0xc9,0x15,0x9d,0x5c,
    0x18,0x12,0xc7,0x1e,0x6a,0xbe,0xb0,0x28,0xa4,0x3e,0x38,0xd3,0x4d,0xa4,0xdb,0xe0,
    0x74,0xd3,0x90,0x38,0xe2,0x60,0xba,0x95,0x90,0xfa,0xa9,0xd3,0xdd,0x48,0xba,0x25,
    0xa7,0xdb,0x22,0x24,0xbe,0xd4,0xd5,0xdb,0x32,0xa4,0x7e,0x0b,0xa7,0xfb,0xad,0x62,
    0xd6,0xe0,0x62,0xb6,0x79,0x48,0xdc,0x1f,0x16,0xb3,0x2d,0x42,0xf2,0x3e,0x66,0x5b,
    0x87,0xc4,0x7d,0xcc,0xb6,0x0d,0x89,0xfb,0x98,0xb5,0x0a,0x89,0xfb,0x98,0xb5,0x96,
    0x9c,0x8f,0x59,0x9b,0x90,0xb8,0x8f,0xd9,0xf6,0x21,0xf5,0xdb,0x38,0xdf,0x77,0x90,
    0xae,0x8f,0x59,0xbb,0x90,0xb8,0x8f,0xd9,0x8e,0x21,0xf5,0xdb,0x39,0xdd,0x9d,0xa4,
    0xeb,0x63,0xb6,0x73,0x48,0xdc,0xc7,0xac,0x43,0x48,0x7d,0x70,0x96,0x63,0xbf,0x0b,
    0x18,0x4b,0x70,0xc8,0x3d,0xaf,0x69,0x2c,0x2e,0x72,0x63,0x71,0xb7,0x90,0x71,0x2d,
    0xba,0xb8,0xee,0x1d,0x12,0xf7,0x87,0xc5,0xf5,0x57,0x21,0x79,0x1f,0xd7,0x7d,0x43,
    0xe2,0x3e,0xae,0xfb,0x85,0xc4,0x7d,0x5c,0xf7,0x0f,0x89,0xfb,0xb8,0xf6,0x92,0x9c,
    0x8f,0xeb,0x01,0x21,0x71,0x1f,0xd7,0x03,0x43,0xea,0x1f,0xe0,0x62,0x73,0x90,0x74,
    0x7d,0x5c,0x0f,0x0e,0x89,0xfb,0xb8,0x1e,0x12,0x52,0xff,0x60,0xa7,0xdb,0x47,0xba,
    0x3e,0xae,0x7d,0x43,0xe2,0x3e,0xae,0xfd,0x42,0xea,0xf7,0x75,0xba,0x7b,0x28,0x66,
    0x05,0x17,0xb3,0xfe,0x21,0x71,0x7f,0x58,0xcc,0x8e,0x0a,0xc9,0xfb,0x98,0xfd,0x3a,
    0x24,0xee,0x63,0x76,0x6c,0x48,0xdc,0xc7,0xec,0xb8,0x90,0xb8,0x8f,0xd9,0x00,0xc9,
    0xf9,0x98,0x9d,0x10,0x12,0xf7,0x31,0xfb,0x4d,0x48,0xfd,0x13,0x9c,0xef,0x27,0x4a,
    0xd7,0xc7,0xec,0xa4,0x90,0xb8,0x8f,0xd9,0xc0,0x90,0xfa,0x27,0x39,0xdd,0x93,0xa5,
    0xeb,0x63,0x36,0x28,0x24,0xee,0x63,0x36,0x38,0xa4,0xfe,0x20,0x37,0x16,0xbb,0x86,
    0x8c,0xe5,0xe0,0xba,0xb1,0x88,0xdf,0xd5,0xda,0x87,0x05,0x55,0x8e,0x59,0xe4,0x4a,
    0xc8,0x2f,0x72,0xb9,0x76,0xa9,0x72,0x6d,0x93,0xf6,0x79,0xef,0xbb,0x5c,0x0b,0xee,
    0xbd,0xec,0x78,0x5f,0x36,0xdf,0x73,0xe3,0xfb,0xc3,0x32,0xed,0xfa,0x3d,0xca,0x47,
    0x65,0xe2,0x4b,0x0a,0xb9,0xfd,0x65,0x65,0xe2,0x4b,0x0b,0xf4,0xcf,0x6c,0xbd,0x2f,
    0xff,0x20,0xf3,0x71,0x99,0x7e,0xc0,0xe7,0x65,0xaa,0x73,0xbf,0xcc,0x97,0x95,0x5a,
    0x6f,0xad,0xce,0xbb,0xc3,0x9f,0xd7,0x79,0x4f,0x48,0x1c,0xfe,0x63,0x8d,0xc1,0x3d,
    0xcc,0x69,0x21,0xf7,0xb2,0xe0,0x6c,0xfd,0xba,0x2f,0x24,0xfe,0xac,0xad,0xef,0x21,
    0x31,0xac,0x71,0xf3,0x84,0xdd,0x1f,0x12,0x9f,0xa4,0x75,0x15,0xf6,0x67,0x84,0xc2,
    0xd5,0x9e,0x87,0xc2,0xe6,0xf1,0x7a,0x3c,0xcc,0xe3,0x05,0xee,0xe1,0xec,0x00,0x86,
    0x36,0x3e,0x1c,0xe6,0x7e,0x3e,0x2a,0x3f,0x7d,0x6c,0x1e,0x0b,0x89,0x5b,0x6c,0x4c,
    0x0f,0xbf,0x16,0x9b,0x27,0x42,0xd6,0x89,0x78,0x3d,0x26,0xfb,0xa8,0xf7,0xc2,0x38,
    0xaf,0x17,0x32,0x4f,0xa2,0x2e,0xe9,0xe3,0xfc,0xc8,0x6c,0x07,0x8f,0x3d,0xf9,0x6c,
    0xc5,0xcc,0xe2,0x56,0x74,0xfb,0xf0,0xda,0x35,0x6c,0xc8,0x3d,0xf1,0x8c,0xda,0x98,
    0xe2,0xb5,0xca,0x53,0x21,0x71,0x3b,0x46,0x67,0xb2,0xc0,0x9f,0x0e,0x79,0x5f,0xee,
    0x29,0xcd,0x41,0x60,0xcf,0x84,0xac,0x03,0xdc,0x08,0xdd,0xfb,0x9b,0x13,0x12,0x47,
    0xdb,0x51,0x9e,0x17,0x12,0x6b,0xa8,0xb2,0x5e,0x60,0x0b,0x42,0xe2,0xbc,0xee,0x6a,
    0xa8,0xb5,0x07,0xbe,0xa3,0x0d,0x2f,0x66,0x7e,0xc0,0xb7,0x17,0x14,0x33,0xdc,0xc3,
    0x1b,0xe9,0xf6,0x3a,0x2f,0x86,0xe4,0xac,0xfc,0xb2,0xe4,0x5e,0xc8,0xb4,0x50,0x7e,
    0x25,0x24,0x36,0x54,0xfb,0x59,0xb3,0xf7,0xba,0xe4,0x2a,0x75,0xf6,0x16,0x86,0xe4,
    0x4c,0x7f,0x91,0xf4,0x2f,0xaa,0xd3,0xff,0xb7,0xf4,0x6f,0x2b,0x34,0xd7,0x7f,0x27,
    0x24,0x67,0xfa,0x4b,0xa5,0x3f,0x4c,0xfa,0xb6,0x67,0xfa,0x20,0xa4,0xef,0xf0,0xcf,
    0xb0,0x65,0x21,0xeb,0x5f,0xe4,0xb0,0x4f,0x43,0xda,0x5c,0x1a,0xe6,0xe3,0x70,0x45,
    0x48,0xfd,0xfb,0x35,0x76,0x56,0x86,0xc4,0x3a,0x6b,0x8f,0x74,0x81,0x1b,0x0f,0xe0,
    0x56,0x21,0xb7,0x46,0x8c,0xe9,0x2a,0x17,0xd3,0xff,0xa8,0x0d,0x43,0x0b,0xcd,0xf7,
    0x8f,0x5f,0x84,0xe4,0x4c,0xee,0x6b,0x17,0x7b,0x2f,0xf7,0x4d,0x48,0xee,0x9f,0xf2,
    0x75,0x75,0x48,0x6c,0xac,0xf2,0x14,0xb0,0x6f,0x43,0xda,0x5b,0xed,0xec,0xad,0x91,
    0xbd,0x73,0x75,0xbd,0x60,0xf6,0xbe,0x0f,0xc9,0x99,0xdc,0x5a,0xc9,0x5d,0x54,0x27,
    0xb7,0x2e,0x24,0x67,0x72,0xc5,0x88,0x72,0x13,0xeb,0xe4,0x1a,0x22,0x72,0x26,0x57,
    0x96,0xdc,0xb0,0x3a,0xb9,0x20,0x22,0x67,0x72,0xb1,0xe4,0x86,0xd7,0xc9,0x25,0x11,
    0x39,0x93,0xab,0x4a,0xce,0xee,0x1f,0x58,0xbe,0xde,0x28,0x22,0x37,0xc9,0xe5,0xeb,
    0x4d,0x22,0xe2,0xc8,0x43,0xc8,0x67,0xb8,0x1e,0xc7,0xfd,0x5f,0xcb,0x53,0x9b,0x45,
    0xbc,0x46,0x87,0x9c,0xe5,0xa9,0xcd,0x23,0xe2,0x96,0xf3,0xb6,0x8c,0x38,0x77,0xfd,
    0x9e,0x7d,0xeb,0x88,0xf7,0x22,0x70,0xed,0x61,0xd7,0x04,0xdb,0x44,0x94,0x05,0x67,
    0x39,0x67,0xdb,0x88,0xf8,0x12,0xd7,0x9e,0x56,0x11,0x71,0xd3,0xdb,0x5e,0x7a,0xb0,
    0x65,0x7a,0x6d,0x23,0xe2,0x4d,0x4e,0x6f,0x87,0x88,0xb8,0xf5,0x71,0xfb,0x88,0xb6,
    0x80,0x63,0xfc,0x75,0x8a,0xf2,0xf1,0x87,0x7c,0xbe,0x73,0x56,0xee,0xa4,0xf1,0x87,
    0x73,0xcb,0x79,0x1d,0x23,0xea,0x8e,0x55,0xce,0x33,0x99,0x4e,0x51,0x9e,0xf3,0xb6,
    0xa8,0x72,0x4d,0xc0,0xb8,0x85,0xbc,0xd7,0xef,0x2c,0xfd,0xe9,0xca,0xbf,0x7d,0x5c,
    0xbd,0xe0,0x76,0xcd,0x8e,0x3d,0x65,0x13,0xe7,0xfd,0x75,0x5f,0x66,0x8f,0x88,0xe3,
    0x12,0xe3,0x6d,0x5d,0x98,0xe7,0xa1,0x6e,0x11,0x39,0xcb,0x43,0x7d,0xa4,0x0b,0x1b,
    0xa3,0xd5,0xd6,0x5f,0xca,0xdf,0xf6,0xce,0x5e,0xf7,0x88,0x63,0x0d,0xe3,0x28,0x89,
    0x72,0x7b,0x3d,0x22,0x72,0xc5,0x6a,0x7e,0x2d,0xd6,0x33,0xa2,0x8d,0xcd,0x9d,0x7e,
    0xaf,0x88,0xb8,0x1d,0x97,0x4a,0xff,0x80,0x88,0x36,0xc0,0x57,0xb2,0x1c,0x0e,0xac,
    0x77,0xc4,0x9c,0xbd,0xab,0x78,0x3c,0x07,0xc0,0x3d,0x7f,0xef,0x6f,0x1f,0xc5,0x0f,
    0xf2,0x5d,0xaa,0x6c,0x17,0xda,0xdf,0x5b,0xf1,0x80,0xec,0x05,0xca,0xb1,0xc8,0x0b,
    0x96,0x57,0x0e,0x8b,0x98,0x83,0x2c,0xaf,0x1c,0x1e,0x11,0xb3,0xbc,0x72,0xbe,0xcb,
    0x2b,0xe0,0x8e,0xc0,0xf8,0x52,0x9d,0x47,0xb8,0x79,0x71,0x54,0x94,0xe7,0x0b,0x3f,
    0x7f,0x8e,0x8e,0xc8,0x99,0xdc,0xff,0x44,0x79,0xfe,0x19,0xe4,0xe4,0x8e,0x8d,0xc8,
    0x59,0x5e,0x39,0x2e,0x22,0x86,0xf9,0x64,0x63,0xf5,0x04,0xe9,0xae,0x74,0xeb,0xff,
    0x6f,0x22,0xe2,0x7e,0xac,0xfe,0x36,0x22,0x6e,0x63,0xf5,0xc4,0x88,0xf6,0x7e,0xeb,
    0xfc,0xf8,0x9d,0x6c,0xad,0xae,0xf3,0xe3,0xe4,0x88,0x9c,0xd5,0x79,0x8a,0xe4,0xc6,
    0xb9,0x3a,0x4f,0x8d,0x88,0x63,0x5f,0x67,0x7a,0xa7,0x45,0xc4,0xad,0xce,0xa6,0x88,
    0xb6,0x4e,0x73,0x75,0x0e,0x8d,0xf2,0xf5,0xc3,0xc7,0x68,0x58,0x44,0xce,0xe4,0xce,
    0x92,0xdc,0xe4,0x3a,0xb9,0xb3,0x23,0x72,0x26,0x37,0x5c,0x72,0x83,0xea,0xe4,0xce,
    0x8b,0xc8,0x99,0xbf,0x17,0x48,0xee,0x73,0xb7,0xee,0x8f,0x50,0x5e,0xb8,0x27,0xcc,
    0xef,0x35,0x8c,0x8c,0x28,0x3b,0x22,0xca,0xc7,0xee,0x25,0x11,0xfb,0x70,0x59,0x31,
    0xc7,0x46,0x45,0x8c,0x29,0x9e,0x27,0x59,0x4e,0x1a,0x1d,0x51,0x76,0x54,0x94,0x63,
    0x63,0x23,0xe2,0x4d,0xce,0xde,0xe5,0x11,0xdb,0xeb,0xed,0x5d,0x11,0xb1,0x6d,0xde,
    0xde,0x95,0x11,0x65,0xaf,0x70,0xf6,0xae,0x8a,0x88,0xa3,0x7d,0x0f,0x6a,0xbc,0x5e,
    0x1d,0xb1,0x1e,0x70,0xd3,0x14,0x97,0xbf,0x44,0xc4,0x9b,0xf4,0x8c,0xd2,0xda,0x77,
    0x6d,0xc4,0x36,0x82,0x47,0x3e,0xbe,0xaa,0x2e,0x1f,0xff,0x35,0xe2,0x3d,0xd2,0x6b,
    0x5d,0x3e,0xbe,0x3e,0x22,0x6e,0xf9,0x78,0xdc,0x06,0xf2,0xf1,0x4d,0x1b,0xc8,0xc7,
    0x37,0x47,0x94,0xbd,0xc9,0xf5,0xc3,0xf8,0x88,0xb8,0xcf,0xc7,0x13,0x22,0xe2,0xa6,
    0x37,0x59,0x7a,0x3e,0x1f,0xdf,0x1a,0x11,0xf7,0x63,0x7c,0x4a,0x44,0x1c,0x73,0xf4,
    0xee,0xba,0xdc,0x7b,0x3b,0xfa,0x5b,0x73,0xf4,0x76,0x17,0xbf,0xbb,0x22,0xd6,0x37,
    0xc5,0xe5,0xd3,0xa9,0x11,0x71,0xcb,0xc7,0xa6,0x77,0xb7,0xcb,0xc7,0x5b,0x2b,0x1f,
    0x63,0xbe,0x43,0xfe,0xf6,0x28,0xdf,0x0f,0xdf,0x2b,0x9b,0x96,0x8f,0x1f,0x71,0xbe,
    0x80,0x9b,0x86,0xb6,0xc8,0xe6,0x34,0x97,0xff,0x66,0x68,0x1c,0x9c,0xad,0xfe,0x44,
    0xdd,0x8f,0x48,0xee,0x01,0x27,0x37,0x53,0xe3,0xef,0x44,0x8d,0x23,0x2f,0xf7,0x88,
    0xcb,0x79,0x71,0x95,0x36,0x51,0xc7,0x4c,0xd5,0x69,0x39,0xf9,0x89,0x88,0xbc,0xcf,
    0xc9,0xb3,0xd4,0xe6,0x29,0x2e,0xcf,0xcf,0x56,0xbe,0x99,0xe5,0xc6,0xeb,0x53,0x11,
    0xf1,0xeb,0x9d,0x4f,0xcf,0x44,0xc4,0xed,0xb0,0xdc,0x3d,0x27,0x62,0x5d,0xcf,0xb8,
    0xdc,0x3d,0xd7,0xe5,0xee,0x39,0x75,0xb9,0xfb,0x7c,0xdb,0xf3,0xba,0x7c,0xfc,0x7c,
    0xc4,0xfd,0x9f,0xe5,0xe3,0x17,0x22,0x62,0x96,0x8f,0x7f,0xef,0xf2,0x31,0xb8,0x17,
    0xb3,0x63,0xa0,0xec,0xbc,0xe8,0x72,0xc3,0xcb,0x9a,0xf3,0x78,0xc6,0x3b,0xde,0x8d,
    0x9b,0x57,0x22,0x72,0xeb,0xf7,0xc4,0x92,0x5b,0x53,0x68,0x2e,0xb7,0x30,0x22,0x67,
    0xe3,0xf2,0x2d,0xc9,0xe1,0x79,0xab,0xc9,0x2c,0x8a,0x88,0xdb,0x35,0xd5,0xdb,0x11,
    0xb1,0xc1,0xc5,0x3c,0x0f,0xfe,0x2b,0xa2,0xad,0xb7,0x5d,0x9d,0x8b,0x5d,0x7e,0xf3,
    0xb9,0x77,0x49,0x44,0xce,0xe4,0xde,0x73,0xf9,0xd2,0xef,0x41,0xdf,0x8f,0xc8,0xd9,
    0x5a,0xf1,0x41,0x44,0x6c,0x90,0xdb,0x83,0x7e,0x18,0xd1,0xde,0x07,0xae,0x0d,0x1f,
    0x3b,0x7b,0x66,0xeb,0x93,0x88,0xb8,0xb5,0xe1,0xd3,0x88,0xd8,0xc9,0xae,0x0d,0xcb,
    0x23,0xda,0xfb,0x34,0xca,0xf5,0x3e,0xd3,0xbe,0xce,0x7c,0xfd,0xc2,0xed,0x0b,0xfd,
    0xb5,0xc1,0x97,0x11,0x39,0xf3,0xf5,0xab,0x88,0xd8,0x24,0xe7,0xeb,0xd7,0x11,0xed,
    0x7d,0xe5,0xf2,0xcc,0x6a,0x97,0x67,0xac,0x8e,0x6f,0x23,0xe2,0x67,0xd6,0xf5,0xe9,
    0x7f,0x23,0x72,0x26,0xf7,0xbd,0xe4,0xd0,0xf7,0x93,0x9d,0xdc,0x0f,0x11,0x39,0x93,
    0x5b,0x27,0x39,0x7b,0x8f,0xc7,0xe4,0x7e,0x8a,0xc8,0x99,0x5c,0x43,0x4c,0x39,0x5c,
    0x37,0xf9,0x7a,0x4b,0x31,0x39,0x93,0x0b,0x24,0x37,0xbd,0x6e,0x2c,0x85,0x31,0x39,
    0x8b,0x41,0x1c,0x73,0x1c,0xfa,0x6b,0xef,0x54,0xd8,0x70,0x17,0x97,0x4a,0x4c,0xd9,
    0xd4,0xe9,0x6e,0x14,0x33,0x5e,0x5e,0xb7,0xa5,0x30,0xaf,0xbb,0x71,0x4c,0xd9,0x96,
    0x4e,0x77,0xd3,0x98,0xb1,0xf2,0xba,0x9b,0x0b,0xf3,0xba,0x5b,0xc4,0x94,0xdd,0xdc,
    0xe9,0x6e,0x15,0x73,0x2c,0x4f,0x72,0xba,0xdb,0x08,0x1b,0xef,0x74,0xb7,0x8d,0x29,
    0xbb,0x8d,0xd3,0xdd,0x2e,0x66,0xec,0xbd,0x6e,0x1b,0x61,0x5e,0x77,0xfb,0x98,0xb2,
    0x6d,0x9c,0xee,0x0e,0x31,0xfb,0xc3,0xeb,0xee,0x28,0xcc,0xeb,0xb6,0x8f,0x29,0xbb,
    0xa3,0xd3,0xdd,0x39,0xe6,0xd8,0xf5,0xed,0xed,0x28,0xcc,0xb7,0xb7,0x53,0x4c,0xd9,
    0x8e,0x4e,0xb7,0x73,0xcc,0xfe,0xf5,0xba,0xbb,0x09,0xf3,0xba,0xbb,0xc7,0x94,0xdd,
    0xcd,0xe9,0xee,0x11,0xb3,0xcf,0xbd,0x6e,0x57,0x61,0x5e,0xb7,0x5b,0x4c,0x59,0x70,
    0x96,0x5b,0xf7,0x8e,0xd9,0xef,0x88,0x63,0x27,0x87,0xef,0x1b,0xb3,0x4f,0x11,0x23,
    0xd4,0x39,0x5a,0x39,0x77,0xbf,0x98,0xdc,0xde,0x4e,0xf6,0x80,0x98,0x7d,0x88,0x98,
    0x74,0x73,0xb2,0xbd,0x63,0x72,0x90,0xb5,0x35,0xff,0xa0,0x98,0xf7,0x8a,0x96,0xba,
    0x67,0x1d,0x07,0xc7,0xc4,0xcd,0xde,0xa1,0x31,0x31,0x3b,0x6c,0x5d,0xe9,0x13,0xb3,
    0xfe,0x43,0x9d,0xbd,0xbe,0xb2,0xd7,0xe4,0xec,0xf5,0x8b,0x89,0x9b,0xbd,0xc3,0x63,
    0x62,0x76,0x98,0xbd,0x23,0x62,0xfa,0x08,0xde,0xd6,0x94,0xa3,0x63,0xd6,0x73,0x84,
    0xc3,0x7e,0x1d,0x13,0xc7,0xb3,0xec,0x79,0xc2,0x8e,0x8d,0x89,0x03,0x33,0xb9,0xe3,
    0xd4,0x56,0x70,0xb6,0x1e,0x0d,0x88,0xf3,0xf5,0x08,0xbc,0x5f,0x8f,0x7e,0xaf,0x75,
    0x64,0xa0,0xf3,0x75,0x70,0xcc,0x7b,0x16,0x0b,0x75,0x4f,0xc2,0xe6,0xf4,0xa9,0x71,
    0x7e,0xcf,0x08,0x72,0xa7,0xc7,0xbc,0xaf,0xb1,0x48,0xf7,0x2d,0x0c,0x1f,0x1a,0x53,
    0xd6,0x0e,0x6b,0xeb,0xb0,0x98,0xdc,0xe9,0xae,0x5d,0x67,0xc4,0xac,0x6f,0x98,0xc6,
    0x12,0xb0,0xb3,0x63,0xe2,0x78,0x9e,0x6f,0x6d,0x1d,0x2e,0x0c,0x6d,0x9d,0x2f,0xec,
    0xbc,0x98,0xb2,0xe0,0x7c,0x5b,0xf0,0x6b,0x7b,0x84,0x6e,0x55,0xb6,0x1f,0xeb,0x24,
    0x9e,0xbb,0x0f,0x74,0x5c,0x87,0x2a,0x31,0x70,0xb0,0x05,0x0e,0xfb,0x49,0xac,0xc1,
    0x9f,0x54,0xb9,0x0e,0xbf,0xa6,0x7b,0x95,0x86,0x7f,0xea,0xf0,0x8f,0x0a,0xcd,0xd7,
    0xf4,0xf3,0x9d,0xed,0xae,0x55,0xee,0x03,0xb0,0x5f,0x81,0x0f,0xde,0xa7,0xf6,0xaa,
    0x17,0x5c,0x07,0xc7,0xd5,0xde,0xd9,0xad,0x72,0xef,0x05,0xee,0x93,0x3a,0xae,0x45,
    0x95,0xf5,0x82,0xfb,0x54,0x9c,0xbf,0xc6,0xbb,0xc0,0xd5,0xb1,0x47,0x95,0xd7,0x84,
    0xb8,0x46,0x84,0x2f,0xde,0xb7,0xd6,0xaa,0x1f,0x5c,0x7b,0xc7,0xa1,0x8e,0xcd,0xaa,
    0xbc,0x16,0x07,0xb7,0x65,0x1d,0x97,0xaa,0x7e,0x70,0x2d,0xc4,0xf9,0xfb,0x78,0x17,
    0xba,0x3a,0x76,0x55,0x1d,0xb8,0x2f,0x09,0x5f,0xbc,0x6f,0xdb,0x55,0x79,0x2f,0x10,
    0x5c,0x6b,0xc7,0xa1,0x8e,0x4d,0xb5,0xef,0x04,0xb7,0x59,0x1d,0x97,0x54,0x19,0x73,
    0x70,0xa9,0x38,0xec,0x8f,0xa6,0xbb,0xfd,0x11,0x64,0xfe,0x37,0x2b,0x4f,0x97,0x4f,
    0xb5,0x73,0xed,0xab,0x46,0x6a,0xfc,0x2e,0x2d,0xb0,0x3f,0xa1,0x76,0x71,0x4c,0x7c,
    0x92,0xde,0xaf,0x5b,0x7f,0x0d,0x14,0x73,0x6f,0x71,0x71,0x9c,0xef,0x15,0x2f,0x8d,
    0xb9,0xce,0x5f,0xe2,0xd6,0xbf,0x51,0x31,0xf7,0x00,0x97,0x4a,0xde,0xd6,0xf2,0x31,
    0xf1,0xcf,0xaf,0x19,0x2e,0x8b,0x7f,0x7e,0xcd,0x70,0x79,0x4c,0x59,0x70,0xb6,0xf7,
    0xff,0x53,0x4c,0xdc,0x5f,0x33,0x5c,0x11,0x13,0x37,0xbd,0xab,0xa5,0xe7,0xaf,0x19,
    0xfe,0x12,0x13,0xf7,0xd7,0x0c,0xd7,0xc4,0xc4,0xad,0x0d,0xd7,0xa9,0xad,0x57,0x28,
    0x76,0x13,0x5d,0xec,0x10,0xfb,0xeb,0xb3,0xf2,0x44,0xc5,0xee,0xfa,0x38,0x8f,0xc7,
    0x8d,0x31,0x75,0xaf,0x89,0xf3,0xf6,0x8c,0x8f,0x69,0x07,0x98,0x5d,0x5b,0x4c,0x88,
    0x89,0xdb,0xb5,0x85,0xd9,0x9a,0xe8,0xfa,0xb1,0x53,0x95,0xfd,0x8c,0xbe,0x81,0xfc,
    0xf5,0xe2,0x6a,0x6b,0x69,0x95,0xf5,0x80,0xbb,0x51,0x1c,0xae,0xdb,0xf0,0xde,0x0a,
    0xde,0xad,0xeb,0x95,0xb5,0x14,0x39,0x77,0x72,0xcc,0x77,0x59,0x46,0xa9,0x7e,0xcb,
    0xbb,0xb7,0xc6,0xe4,0xcc,0xef,0xdb,0x62,0x62,0xb0,0x6b,0xf9,0xe9,0xce,0x98,0xb8,
    0x1d,0x96,0x8b,0xee,0x8a,0x39,0x36,0xef,0x74,0xb9,0x73,0xaa,0xcb,0x9d,0x77,0xd5,
    0xe5,0x4e,0x1b,0x63,0xd3,0xdd,0xd8,0xee,0x5c,0xe5,0xd8,0xc7,0x5c,0x98,0xaa,0x58,
    0x5a,0xbb,0x3b,0xaa,0xdd,0xe0,0x10,0x03,0x70,0xf7,0xd8,0x33,0x86,0x98,0xcf,0x43,
    0x3a,0xea,0x9e,0xd4,0x4c,0xd9,0x9e,0x19,0xe7,0x63,0x75,0x79,0x95,0x72,0xd3,0xf5,
    0xce,0x27,0xda,0x83,0x77,0xc9,0x56,0x08,0xb7,0x63,0x9a,0xda,0xb9,0xb2,0x4a,0x0e,
    0x3e,0xc3,0x2f,0x7b,0x27,0xe0,0xd1,0x98,0x5c,0xa1,0x90,0x63,0x8f,0x0b,0x2b,0x3a,
    0xec,0x49,0x61,0x0d,0xb5,0x77,0x95,0xf9,0x8e,0xc6,0x0f,0x65,0x3e,0x9b,0xc0,0xd8,
    0x59,0xeb,0x9e,0x1b,0x01,0xff,0x31,0x3b,0xd6,0xea,0x59,0x0f,0xce,0x67,0xa8,0x6d,
    0x18,0x9c,0xf0,0x7d,0xba,0xc6,0x84,0xc9,0xac,0x75,0xcf,0x83,0x8a,0x01,0xed,0xce,
    0xd4,0x0b,0xc8,0x3f,0xea,0x3d,0x90,0xc6,0x20,0xaf,0x03,0x32,0xa5,0xec,0x68,0xd4,
    0x7b,0x1f,0xa5,0x20,0xbf,0x86,0x0a,0x03,0xb6,0xcb,0xca,0x49,0xc0,0x36,0x59,0xb9,
    0x1a,0xb0,0x3d,0xf6,0xbc,0x63,0xa3,0x80,0x3a,0x90,0x03,0x87,0xba,0x3e,0x8f,0x9b,
    0x3f,0x07,0x7b,0x25,0x2b,0x7f,0xa8,0x7e,0xc0,0xf9,0x89,0x45,0x8e,0xd1,0x57,0xe3,
    0xfc,0xdd,0xca,0x49,0xfa,0x9e,0x00,0x1c,0xec,0xbe,0xee,0x38,0xd4,0x31,0x4e,0x39,
    0x05,0xdc,0x1b,0x31,0x79,0xbc,0x17,0x66,0x7e,0xbd,0x15,0xd3,0x9e,0xf9,0xb5,0x28,
    0x26,0x66,0xc7,0xa5,0xd2,0x7d,0x3b,0xa6,0xfe,0x22,0x37,0xb6,0xff,0xad,0x79,0xf6,
    0xaa,0x6b,0xe7,0x3b,0x31,0x71,0xb3,0xb7,0x38,0x26,0x66,0xc7,0xe5,0xb2,0xb7,0x24,
    0xa6,0xcd,0xc5,0x71,0xfe,0x0c,0xe7,0xdd,0x98,0xb8,0x95,0xdf,0x8b,0xd9,0x06,0xdb,
    0x4b,0x7d,0x10,0x13,0x7b,0x57,0x79,0xff,0x73,0xc5,0xe6,0x43,0xa7,0xb3,0x4c,0x3a,
    0x16,0x8f,0x4f,0x36,0x10,0x0f,0x6b,0xd3,0xf2,0x98,0x3c,0xde,0xab,0xb3,0x67,0x4b,
    0x2b,0x63,0xe2,0x8d,0xd5,0xdc,0xe6,0xaa,0x98,0xb8,0xf9,0xf1,0x59,0xcc,0x7a,0x56,
    0xd5,0xf9,0xf1,0xb9,0x9b,0x87,0x07,0x56,0xe9,0x2f,0xfa,0xed,0x33,0xf5,0xa3,0x8d,
    0xeb,0x2f,0x62,0xf2,0x85,0x42,0x9e,0x13,0xbe,0x8a,0x89,0xdb,0x61,0x7b,0x96,0xaf,
    0x63,0x72,0x90,0x47,0x9b,0x80,0x7d,0xe3,0xda,0x04,0x1e,0x6d,0x3a,0x5b,0xdf,0xcf,
    0xac,0x8e,0xc9,0x1f,0xa9,0xfc,0xf1,0x5f,0xe9,0x1e,0xe8,0x9e,0xc5,0x61,0x3e,0x19,
    0xbf,0xa6,0x8e,0x6f,0xd0,0x61,0xf5,0x7f,0x1f,0xd3,0xc6,0x9a,0x38,0xaf,0xff,0x07,
    0x57,0xff,0xf7,0x75,0xf5,0xff,0x18,0x93,0x3f,0x55,0xf1,0x5f,0xb7,0x81,0xf8,0x0f,
    0x12,0x87,0x44,0x5a,0xcf,0xd9,0x73,0xbf,0x62,0x42,0x5d,0xc8,0x9c,0x23,0xdb,0x0d,
    0x09,0x71,0xc4,0x11,0xef,0xba,0x96,0x13,0xb6,0xd7,0x72,0x06,0xb0,0x28,0xa1,0x0f,
    0x05,0x87,0xc5,0xc2,0xbc,0x5c,0x45,0xba,0x0d,0x0e,0x6b,0x29,0xb9,0x06,0xf5,0x0b,
    0xea,0x6c,0x95,0xb0,0x1e,0xd8,0x85,0x1d,0xc3,0xb7,0x4b,0x68,0x03,0x58,0x4b,0xe1,
    0x78,0x8f,0xb8,0xb5,0xec,0x42,0x0f,0x32,0x18,0x1f,0x6d,0x12,0x8e,0x0f,0xfc,0x62,
    0x7c,0x40,0xff,0xe0,0x2a,0xdb,0x83,0x31,0xf3,0x3e,0xee,0x9d,0x8b,0x83,0x1f,0x07,
    0x55,0xf9,0x7e,0x33,0xb8,0x4e,0x49,0xce,0xa1,0x59,0xbd,0x95,0xc7,0xc0,0xed,0x25,
    0xee,0x61,0xe5,0xb9,0x1d,0x12,0xf2,0xb8,0xde,0xf9,0x36,0x8b,0xd9,0x2f,0xc5,0x5b,
    0x4e,0x01,0xdf,0x2e,0x3b,0x7e,0x29,0x7f,0x70,0xfe,0xd7,0x4c,0x17,0xfe,0xec,0x94,
    0xd0,0x77,0xf8,0x35,0x4e,0xf1,0xe8,0x98,0x10,0xc7,0x51,0xc9,0xda,0x07,0x0c,0xfe,
    0x14,0xf5,0xcd,0x13,0xf8,0xd9,0xf6,0x8c,0x24,0x21,0x07,0xbf,0x91,0xcb,0xba,0xba,
    0x7a,0xc1,0xed,0x9a,0x1d,0x5d,0x55,0x2f,0xce,0xaf,0x50,0x1d,0xbb,0x27,0x7c,0x77,
    0x1b,0xba,0xd7,0xc8,0x97,0x2e,0xaa,0x73,0x77,0xc5,0xcf,0xf4,0xba,0xba,0xf8,0x21,
    0x66,0x3b,0xa9,0x3d,0x5d,0x64,0x1f,0xb2,0xdd,0x24,0x8b,0x5f,0xdb,0x27,0xec,0xa5,
    0xb8,0x4c,0x2a,0x34,0xef,0x0f,0xc4,0xe1,0x49,0xf9,0xff,0xab,0x84,0x71,0xc7,0x7b,
    0xdf,0xf0,0xbf,0x9f,0xf3,0x1f,0xdc,0x3e,0xd9,0xd1,0x5d,0x7a,0xfb,0xa8,0xae,0x7e,
    0x2a,0x77,0x77,0x63,0xb2,0x87,0x62,0x58,0x28,0xe4,0x31,0xdb,0x4f,0x31,0x6b,0x14,
    0x6f,0xb2,0x3d,0x25,0x5b,0x74,0xb2,0xbd,0x9c,0x6c,0xcf,0x5a,0xdc,0x39,0x26,0x0e,
    0x10,0x6e,0xf6,0x7a,0x39,0x3b,0xbd,0x65,0xa7,0xc1,0xd9,0x39,0xc8,0xd9,0xe9,0xed,
    0xec,0x1c,0xec,0xec,0xc0,0xe6,0x41,0xae,0x2f,0x0e,0x4d,0xf8,0x7e,0xfa,0xc1,0xae,
    0x2f,0xfa,0xca,0xf6,0xa1,0x75,0x6d,0xee,0xe7,0xfa,0xe2,0x90,0x2a,0xdf,0x77,0x47,
    0x5c,0xfa,0x2a,0x4e,0x36,0x67,0x0f,0x4f,0x6c,0x6e,0xb3,0x8e,0x23,0x13,0x62,0xd0,
    0x19,0x5c,0xa4,0x4f,0x47,0xb9,0x3c,0x00,0x1e,0x79,0xe0,0x34,0x71,0xc7,0x6c,0x80,
    0x7b,0x54,0x7d,0x76,0x6c,0x42,0x0c,0xfa,0xf6,0x5e,0x1f,0xbe,0x83,0xc4,0x3b,0xf5,
    0x76,0x5f,0xfe,0xf8,0x84,0x72,0xc0,0x97,0x3a,0xdd,0xdf,0x48,0x17,0xf6,0x4d,0xf6,
    0xc4,0x84,0xb8,0xc9,0xda,0xfb,0x2e,0x27,0x25,0xb4,0x03,0x1e,0x79,0x0d,0xd8,0xef,
    0x9c,0x5f,0x27,0xc9,0x2f,0xdb,0x7b,0x0f,0x4e,0xc8,0xe3,0x6f,0x40,0x91,0xeb,0xe0,
    0x29,0x92,0x47,0x2c,0x06,0x27,0xb9,0x6c,0x93,0x64,0x8b,0x4e,0x76,0x88,0x93,0x6d,
    0x72,0xb1,0xfc,0x20,0xa1,0x9d,0xcb,0xd4,0x37,0x1f,0x26,0xc4,0xf0,0x8e,0x7f,0x45,
    0x79,0xe9,0xa3,0x24,0xcf,0xf3,0xe0,0xcf,0xd4,0x7b,0xd2,0xcb,0x12,0x72,0x66,0x6b,
    0x79,0xc2,0x7a,0xcc,0xd6,0x8a,0x84,0x98,0xb7,0xb5,0xd2,0xd9,0x5a,0xe1,0x6c,0xad,
    0x4a,0xc8,0x61,0xcf,0x8d,0xfd,0xdf,0x1f,0x13,0xda,0x07,0x7e,0x8b,0xf6,0x69,0x23,
    0x12,0xe2,0x98,0x4b,0x8b,0xdd,0x5c,0x02,0x3e,0x32,0x3b,0x16,0x6b,0x1c,0x8d,0x74,
    0xb1,0xf8,0x42,0x76,0xfc,0x3b,0x53,0x5f,0x26,0xc4,0x07,0xb9,0x67,0x72,0xdf,0x08,
    0x1b,0xeb,0x9e,0x7b,0xaf,0x4e,0x28,0xfb,0x8d,0xb3,0xf7,0x5f,0xd9,0xf3,0xef,0x56,
    0x7d,0x97,0x10,0x1f,0xeb,0xec,0xfd,0x20,0x6c,0xb8,0xb3,0xf7,0x63,0x42,0xd9,0x1f,
    0x9c,0xbd,0x75,0xb2,0xe7,0xdf,0xb7,0xfa,0x29,0x21,0xee,0xfd,0x6b,0x48,0x89,0x79,
    0xff,0x4a,0x29,0x65,0xc1,0xd9,0xde,0xa8,0x31,0xa5,0xdf,0xa8,0x0b,0xbc,0xed,0x37,
    0x46,0xa9,0x6f,0xac,0x3c,0x26,0xa1,0xac,0xed,0x3f,0xc6,0x26,0x94,0x19,0xe3,0x64,
    0x2e,0xd7,0xd8,0x30,0x99,0x2b,0x13,0x62,0x63,0x92,0x7c,0x2d,0xbf,0x3a,0x21,0x0e,
    0xfd,0x19,0xea,0xbb,0x6b,0x12,0xe2,0xd8,0xa3,0x1b,0x76,0x9d,0xe4,0x80,0x1d,0xa5,
    0xf9,0x72,0x7d,0x42,0x59,0x5b,0x57,0x81,0x8d,0x4b,0x28,0x5b,0x28,0xe4,0xd7,0x11,
    0x37,0x26,0x94,0x1d,0x97,0xe4,0xd7,0x0d,0x37,0x25,0xc4,0xed,0x1a,0xd7,0xf6,0x8a,
    0x37,0x27,0xe4,0x2c,0xbe,0x13,0x34,0x86,0xfc,0x7b,0xf1,0x13,0x13,0xe2,0x90,0x3d,
    0x5a,0x71,0x7b,0xb4,0x42,0xfc,0x8b,0x6a,0x73,0x7f,0x26,0xcb,0xc7,0xa2,0xc3,0xa6,
    0xc8,0xc7,0xa2,0xf3,0xf1,0xb6,0x84,0xb2,0x53,0x9c,0x8f,0xb7,0x27,0xc4,0xeb,0x7d,
    0xbc,0x23,0x21,0x67,0x3e,0xde,0x25,0x1f,0xfd,0xfb,0xd2,0x53,0x13,0xe2,0x77,0x38,
    0x1f,0x67,0x55,0x88,0x3f,0x5a,0x69,0xee,0xcf,0xbd,0xf2,0xb1,0xc1,0x61,0xf7,0xc9,
    0xc7,0x06,0xe7,0xe3,0xf4,0x84,0xb2,0xf7,0x39,0x1f,0xef,0x4f,0x88,0xd7,0xfb,0x38,
    0x23,0x21,0x67,0x3e,0x3e,0x28,0x1f,0x1b,0x9c,0x8f,0x0f,0x25,0xc4,0x67,0x38,0x1f,
    0x9f,0xae,0x10,0x87,0xaf,0x0d,0x7a,0x96,0xf6,0xa4,0x9b,0xab,0xe8,0xc7,0x47,0xb1,
    0x46,0x6a,0xae,0xe2,0xdc,0xae,0xc3,0x9e,0x50,0x1f,0x63,0x4d,0x30,0xfe,0xc9,0x24,
    0xbf,0x9e,0x9a,0xa5,0x71,0x80,0xf9,0xfd,0x84,0xec,0x58,0x3b,0x66,0x27,0xe4,0xeb,
    0xdb,0xf1,0xb7,0x84,0xdc,0x68,0xf9,0xfc,0xb4,0xe6,0xf9,0xdf,0x9c,0xcf,0xf3,0x2a,
    0xc2,0xd5,0xf7,0xf0,0x79,0x81,0xf3,0x19,0xfd,0x3a,0x37,0x3b,0x16,0xc8,0xa7,0xb9,
    0xce,0xe7,0xf9,0xea,0x73,0xf8,0x6c,0xfc,0x02,0xe7,0xf3,0xb3,0x1a,0x17,0x68,0xc7,
    0x7c,0xd9,0x31,0x9f,0x9f,0x4b,0xc8,0xd7,0xfb,0xfc,0x7c,0x42,0xce,0x7c,0xfe,0x3f,
    0xe5,0x92,0xe7,0x9d,0xcf,0xcf,0x55,0x88,0xcf,0xd3,0x58,0x80,0xcf,0x6f,0x38,0x9f,
    0xd1,0xcf,0xaf,0x66,0xc7,0x1b,0xf2,0xe9,0x55,0xe7,0xf3,0x42,0x8d,0x01,0xf8,0x6c,
    0xfc,0x1b,0xce,0xe7,0x37,0x35,0x4e,0xd0,0x8e,0x85,0xb2,0x63,0x3e,0xbf,0x95,0x90,
    0xaf,0xf7,0x79,0x51,0x42,0xce,0x7c,0xfe,0xb7,0x72,0xd8,0x22,0xe7,0xf3,0x4b,0x15,
    0xe2,0xcf,0x69,0x6c,0xa0,0x7e,0xcb,0xd9,0x8b,0x55,0x3f,0xe4,0x0e,0xab,0x72,0xac,
    0x61,0x3f,0x80,0xf1,0xf4,0x86,0xe3,0xfa,0x55,0x99,0x2f,0xc1,0xbd,0x24,0xce,0xc6,
    0x68,0x94,0x92,0xf7,0xb9,0x3e,0x4e,0x89,0xdf,0xe6,0xd6,0xd2,0x54,0x72,0x3e,0x87,
    0x57,0x52,0xe2,0x23,0x5d,0x7e,0xad,0xa6,0xd4,0x07,0x67,0xba,0x2d,0xa4,0xdb,0xe0,
    0xdf,0x47,0x4f,0x29,0xdb,0xc2,0xc9,0x6d,0x96,0xb2,0x1d,0xde,0x97,0xcd,0x53,0xe2,
    0xde,0x97,0x2d,0x25,0xe7,0x7d,0xd9,0x2a,0x25,0xee,0x7d,0xd9,0x3a,0xa5,0xfe,0x56,
    0xae,0x8e,0x6d,0xa5,0xeb,0x7d,0x69,0x95,0x52,0x16,0x9c,0xdd,0x23,0xec,0x14,0xd0,
    0x47,0x70,0x18,0x27,0x9d,0xdd,0xfd,0x07,0x70,0xbb,0x64,0x47,0x67,0xdd,0x7f,0xc0,
    0xf9,0xd9,0xfa,0xee,0x6f,0x77,0xdd,0x7f,0xb0,0x72,0x17,0xdd,0x7f,0xb0,0xf2,0x9e,
    0xee,0xfe,0x03,0xd6,0xf6,0xbd,0x02,0xea,0x40,0x0e,0x9c,0xb5,0xa7,0xad,0xfa,0xc0,
    0xaf,0x67,0x3b,0x0a,0xf3,0xeb,0x59,0xfb,0x94,0xb2,0xe0,0x4c,0xb7,0x83,0xfa,0xc5,
    0xaf,0xad,0xbb,0x08,0xf3,0x6b,0x6b,0xe7,0x94,0xb2,0xbb,0x38,0xdd,0xdd,0xd5,0x27,
    0xbe,0xde,0x2e,0xc2,0x7c,0xbd,0x5d,0x53,0xca,0x76,0x71,0xeb,0x68,0xb7,0x94,0xfe,
    0xc0,0x2e,0x78,0xdb,0xe3,0xec,0x13,0x90,0xb3,0x3a,0x7e,0xa5,0x3e,0xf5,0x75,0xec,
    0x2b,0xcc,0xd7,0xd1,0x23,0xa5,0xec,0xbe,0x4e,0xb7,0xa7,0xfa,0xd9,0xb7,0xed,0x40,
    0x61,0xbe,0x6d,0xbd,0x53,0xca,0x1e,0xe8,0x74,0x0f,0x51,0x1f,0xfb,0x7a,0xfb,0x0a,
    0xf3,0xf5,0xf6,0x4b,0x29,0xdb,0xd7,0xb5,0xed,0xb0,0x94,0xfe,0xc0,0x6e,0x3f,0xd7,
    0xb6,0xfd,0x02,0x72,0x63,0xb4,0x7f,0x3b,0x36,0x25,0xb6,0x8f,0xdb,0x6b,0x0f,0x48,
    0x59,0x06,0x67,0xd8,0x6f,0x25,0xe7,0xb1,0x81,0x29,0xc7,0xc3,0xb1,0xb2,0x07,0x6c,
    0x50,0x4a,0x7c,0x80,0xc3,0x4e,0x4d,0xa9,0x0f,0xcc,0xae,0x19,0x4e,0x4b,0x29,0x0b,
    0x0e,0xf7,0x2c,0x81,0x35,0xa5,0xf6,0x4d,0x2b,0x79,0x5c,0x13,0xe2,0x1a,0x6f,0x9a,
    0xae,0x4d,0x4e,0x4f,0x79,0x8f,0x1d,0xdf,0xe8,0xe2,0xbb,0xdc,0xcb,0x64,0x6b,0x68,
    0x4a,0xdd,0xd3,0xd3,0xfc,0x3a,0x66,0x58,0x9a,0xef,0x41,0xc1,0x9f,0xa5,0xfb,0xac,
    0x67,0xa4,0xe4,0x6c,0xef,0x7e,0x96,0x6c,0xe2,0xdd,0xfa,0xe7,0x4b,0xf9,0x3d,0xaa,
    0x73,0x52,0xca,0x8e,0x75,0xcf,0xb4,0xcf,0x4d,0x29,0x7f,0x4e,0x9a,0xdf,0x27,0xb6,
    0x39,0x85,0x5f,0xe4,0xaf,0xda,0xbb,0xf9,0x55,0x5e,0x07,0x20,0xdf,0x41,0x07,0xf3,
    0xed,0x21,0xcd,0xd3,0x43,0x03,0xce,0xd1,0x96,0x9a,0xa7,0xfd,0xdc,0x3c,0x05,0xd7,
    0x37,0x3b,0xfa,0xc9,0x26,0xce,0x17,0xa8,0x8f,0x0f,0x0f,0x68,0xb7,0xc9,0xbd,0x93,
    0xdd,0x3f,0x20,0x8e,0x3d,0xbf,0xad,0xff,0x47,0x05,0x6c,0x0f,0x38,0xf8,0x77,0x8c,
    0x6c,0xe1,0xd7,0xda,0xbc,0xaa,0x4a,0xb9,0x25,0xb2,0x5b,0xbb,0x3e,0x93,0x5c,0x3f,
    0xd7,0x8e,0xcb,0xaa,0xac,0x13,0x6d,0x83,0x0e,0x6c,0x4c,0xb5,0x6b,0xa8,0x80,0x6d,
    0xf9,0x58,0xdf,0xb4,0x1d,0x2f,0xfd,0xe3,0x5d,0x3d,0x9f,0x55,0x29,0x67,0xed,0x35,
    0xfc,0x73,0xe1,0x96,0xaf,0xd6,0x7f,0x47,0x10,0x50,0xe7,0x22,0xff,0x1d,0x41,0x40,
    0xf9,0x41,0xf2,0xd3,0xee,0xa1,0x36,0x3a,0x3f,0xc7,0x28,0xde,0xb8,0x2f,0x0b,0x9f,
    0x8f,0x77,0xdc,0x50,0xc7,0xc1,0xd6,0xf1,0xba,0x67,0x3a,0x24,0x68,0x7e,0xcf,0xb4,
    0x29,0x2b,0x0f,0x91,0xed,0x26,0xc9,0x9c,0x59,0x77,0x0f,0xf7,0x8c,0xec,0x38,0x47,
    0x32,0x67,0x04,0xf9,0xb5,0x23,0xfe,0x17,0x0f,0xae,0x1d,0xd7,0xbf,0xfb,0x16,0x10,
    0x83,0xbf,0x67,0x4a,0xfe,0x9c,0xba,0xf2,0x99,0x41,0x7e,0x6f,0x66,0x48,0x95,0x3a,
    0xb0,0x79,0xae,0xea,0x38,0x45,0xf7,0x6c,0xcf,0x0b,0xf2,0xeb,0xc5,0x21,0x55,0x5e,
    0x2f,0x5a,0xce,0x3f,0x3f,0x20,0x7f,0xae,0xfc,0xbd,0xd0,0xf9,0x0b,0xee,0x82,0xec,
    0xb8,0x50,0xf5,0x5d,0xe0,0xee,0x39,0xff,0x41,0x7a,0xb8,0x6e,0x44,0xf9,0x8f,0xaa,
    0x03,0xb1,0xfa,0x83,0xfc,0x34,0xbd,0x0b,0x5d,0x2c,0xaf,0xa9,0x52,0x06,0xbe,0xff,
    0x51,0xf6,0x51,0xef,0xc5,0xae,0x5e,0x3c,0x07,0x18,0x99,0x95,0x2f,0x96,0x3e,0xce,
    0x6d,0xbc,0x8e,0xaa,0xbb,0x9f,0x6e,0x32,0x17,0x07,0xf9,0xbe,0x64,0x74,0xc0,0x67,
    0x09,0xa8,0x17,0xf2,0x23,0xe5,0xcf,0x58,0xc9,0x8e,0x75,0xe3,0xeb,0x3f,0x55,0xca,
    0xc3,0xf7,0x31,0x7a,0xfe,0x60,0x7d,0x38,0xc4,0xf9,0x7d,0x95,0xfc,0xc6,0x98,0x41,
    0x1b,0xc6,0x3a,0x6e,0x74,0x95,0xba,0xe0,0xfe,0x23,0x6e,0xfd,0xbb,0x7e,0xfa,0x5e,
    0x15,0xdf,0x43,0xda,0x18,0xbd,0x32,0xa0,0x0e,0xb8,0x21,0x45,0xda,0xf8,0xb3,0xeb,
    0xa3,0x2b,0x75,0x3f,0x12,0x71,0xb9,0x36,0x68,0xfe,0x2d,0xe0,0x35,0xf0,0x5d,0xfe,
    0x5d,0xa3,0xef,0x68,0xf1,0x1d,0xd0,0xb2,0x0a,0x7d,0xfc,0x52,0xeb,0xbc,0xe1,0x9f,
    0x54,0x68,0x1b,0x7c,0xc9,0xed,0x27,0x46,0xa4,0x3f,0xff,0x5e,0xeb,0xf2,0x94,0xb8,
    0x3f,0xec,0xdb,0xa3,0x3f,0xa5,0xe4,0xfd,0xb7,0x47,0x7f,0x4e,0x89,0xfb,0x6f,0x8f,
    0xae,0x4e,0x89,0xfb,0xfd,0xcc,0x5f,0x52,0xe2,0xfe,0xdb,0xa3,0x6b,0x25,0xe7,0xf7,
    0x33,0xd7,0xa5,0xc4,0xfd,0xb7,0x47,0x7f,0x4d,0xa9,0x7f,0x9d,0xdb,0xcf,0xdc,0x20,
    0x5d,0x7f,0x2d,0x3c,0x2e,0x25,0xee,0xbf,0x3d,0xba,0x31,0xa5,0xfe,0x38,0xa7,0x7b,
    0xb3,0x74,0xfd,0xb7,0x47,0xe3,0x53,0xe2,0xfe,0xdb,0xa3,0x09,0x29,0xf5,0xc7,0x3b,
    0xdd,0x4b,0xd2,0x9f,0x7f,0xaf,0x75,0x6b,0x4a,0xdc,0x1f,0x16,0xb3,0x29,0x29,0x79,
    0x1f,0xb3,0x3b,0x52,0xe2,0x3e,0x66,0x77,0xa5,0xc4,0x7d,0xcc,0xa6,0xa6,0xc4,0x7d,
    0xcc,0xee,0x91,0x9c,0x8f,0xd9,0xbd,0x29,0x71,0x1f,0xb3,0x69,0x29,0xf5,0xef,0x75,
    0xbe,0x4f,0x97,0xae,0x8f,0xd9,0xfd,0x29,0x71,0x1f,0xb3,0x19,0x29,0xf5,0xef,0x77,
    0xba,0x0f,0x4a,0xd7,0xc7,0xec,0xa1,0x94,0xb8,0x8f,0xd9,0xc3,0x29,0xf5,0x1f,0x4a,
    0xf3,0xfb,0x57,0xa3,0x52,0xc6,0x12,0x1c,0x9e,0x65,0xe2,0x1b,0xfb,0x51,0x69,0x3e,
    0x3f,0x9e,0xd6,0xde,0x04,0xcf,0x72,0xed,0x39,0xed,0x33,0x29,0xff,0xd7,0x16,0x38,
    0xbc,0x67,0x82,0xfb,0xbd,0x73,0x52,0x7e,0x9f,0xdf,0xe4,0xbe,0xa3,0xfd,0x47,0x4a,
    0xdc,0xd6,0xd6,0xb9,0x29,0xb1,0xa1,0xfa,0x1f,0x2d,0x96,0x4b,0xe7,0xa5,0xe4,0x4c,
    0x6f,0x7e,0x9d,0xde,0x82,0x94,0x58,0xfd,0xb7,0x1a,0xcf,0xa6,0xe4,0x4c,0xef,0xf9,
    0x3a,0xbd,0x17,0x52,0x62,0xf5,0xdf,0x6e,0xbc,0x98,0x92,0xb3,0x77,0x81,0x5e,0x4a,
    0xd9,0xa6,0x91,0x85,0xbc,0x3d,0x2f,0xab,0x3d,0x2f,0x39,0xfb,0xaf,0xa4,0xc4,0xed,
    0xdd,0xbc,0xd7,0xa4,0x37,0xda,0x7f,0xd3,0x93,0x52,0xee,0xb5,0xb4,0xf9,0x3b,0x82,
    0x0b,0x53,0x72,0x16,0xc3,0x37,0x53,0xfe,0x7f,0x96,0xa7,0x9d,0x1f,0x8b,0x52,0xe2,
    0xde,0x8f,0xb7,0xe5,0xc7,0x22,0xe7,0xc7,0xbf,0x52,0xe2,0xe6,0xc7,0x3b,0xd2,0x1b,
    0xed,0xf6,0x90,0x8b,0x53,0xca,0xbd,0x93,0xe6,0xcf,0xe0,0x97,0xa4,0xc4,0xfd,0x33,
    0xf8,0x77,0x53,0xe2,0xe8,0x7b,0xfc,0xbf,0x86,0x07,0x0b,0xf9,0x73,0xec,0xf7,0x53,
    0xfe,0x0f,0x07,0xc4,0x6b,0x61,0x9a,0x3f,0xc7,0xfe,0x20,0x25,0x67,0x6d,0xf9,0x28,
    0xa5,0x1d,0x5c,0x4b,0x2e,0xb0,0xef,0x88,0x52,0xca,0x7d,0xe4,0xc6,0xd2,0xf2,0x94,
    0x38,0xfa,0xcd,0xee,0xbf,0xaf,0x48,0xd9,0xff,0xcb,0xb5,0x47,0x04,0xb6,0x2a,0xcd,
    0x9f,0x6b,0xaf,0x48,0xf3,0x67,0xca,0xb6,0xb6,0xdd,0x1e,0x30,0x5f,0x9f,0xac,0xf5,
    0xb3,0x6b,0x25,0xcf,0xcd,0xab,0x34,0xd7,0x6c,0x6d,0xdd,0x73,0x03,0x9c,0xad,0xad,
    0xa5,0x0a,0x75,0x21,0x83,0x5c,0x1e,0x57,0xf2,0x5c,0x0e,0xae,0x31,0x3b,0x80,0xd5,
    0xf6,0x22,0x95,0xbc,0xbd,0xfb,0x4a,0x07,0xba,0x76,0x0d,0xd5,0xa3,0x42,0xdc,0x64,
    0x7a,0x56,0x58,0x9f,0x97,0xe9,0x55,0x21,0x6e,0xfb,0xe3,0x03,0x2b,0xc4,0xa0,0x6b,
    0xfb,0xdc,0xde,0x15,0xe2,0x37,0x34,0xe6,0x7b,0xe6,0x83,0x2a,0xf9,0x9e,0x19,0x3c,
    0xf6,0xcc,0x37,0x34,0xe6,0xfb,0xe0,0x83,0x2b,0xf9,0x3e,0x18,0xb2,0xb6,0x0f,0x3e,
    0xa4,0x42,0xce,0xe2,0xdf,0xa7,0x42,0x6c,0xb8,0x1b,0xaf,0x7d,0x2b,0xfc,0x3f,0x32,
    0x7d,0x84,0x63,0x7d,0xb5,0x36,0xe3,0xd7,0xd6,0xd0,0x47,0xb4,0xc7,0xc2,0x9a,0xd6,
    0x57,0xb1,0x99,0xa9,0x38,0xa6,0x15,0xf6,0xc9,0xdf,0xf5,0x7c,0x64,0x53,0x17,0x47,
    0x70,0x95,0xec,0xd8,0x44,0x36,0x2b,0x95,0xfc,0x9d,0xff,0x16,0xea,0x9b,0xdb,0x83,
    0xfc,0x5e,0x54,0xcb,0x0a,0xfb,0x08,0x9c,0xe5,0xb2,0x8d,0x2b,0xac,0x1f,0x1c,0xfc,
    0xdb,0x54,0xb6,0x36,0xa9,0x2b,0x6f,0xea,0xfc,0x7d,0xb4,0x4a,0x3d,0xd4,0x07,0xbf,
    0x21,0xfb,0x80,0xfc,0xdd,0xa2,0xce,0xdf,0x36,0xce,0x5f,0x70,0x5b,0x66,0x47,0x6b,
    0xd9,0xdc,0xd2,0xf9,0xb1,0xb5,0xfc,0x68,0x53,0xca,0xdb,0xb0,0xad,0x6b,0x83,0xdd,
    0x33,0x69,0x55,0xe1,0x75,0x06,0x38,0x9b,0x8f,0xdb,0x55,0xa8,0xdf,0x4a,0x3e,0xb7,
    0x91,0xfd,0xd6,0x75,0xe5,0x36,0xae,0x0d,0x8f,0x57,0xa9,0xb7,0xa5,0xda,0x00,0x59,
    0xcb,0xdb,0x6d,0x2b,0x6c,0x23,0x64,0x86,0xe8,0xb9,0x43,0x3b,0x37,0xd6,0xdb,0x56,
    0xf2,0x6f,0x44,0x6a,0xef,0x63,0x6a,0xcc,0xce,0x71,0xd8,0xce,0x1a,0xc3,0x73,0x0a,
    0xf9,0xbb,0x92,0x1d,0x2a,0xc4,0x87,0xb9,0xf7,0x22,0x3b,0x56,0xa8,0x0f,0xce,0xe6,
    0x60,0xa7,0x0a,0x71,0x5b,0x83,0x3a,0x57,0x58,0x7f,0xc1,0xad,0x37,0xbb,0x56,0x28,
    0xd7,0xd9,0xc9,0xed,0x2e,0xb9,0xa2,0x7b,0x86,0xf2,0x8b,0x0a,0x65,0xc1,0x1d,0x99,
    0xd5,0x88,0x75,0xf8,0xde,0x80,0x7b,0x23,0x70,0x8d,0xfa,0x7f,0x43,0x0d,0xfa,0x3f,
    0x33,0x88,0xd7,0xb5,0xda,0x63,0x4d,0x73,0x7b,0xac,0xef,0xb4,0xc7,0x1a,0xaf,0xfb,
    0x35,0x86,0x7f,0xaf,0x3d,0xd6,0x77,0xaa,0xd7,0xeb,0x5f,0xab,0x7d,0x22,0xe4,0xde,
    0xad,0xb2,0x5e,0xf4,0x01,0x74,0xa6,0xb9,0x7d,0xed,0x83,0xca,0x39,0xf6,0x5d,0xc1,
    0xc3,0x6e,0xdf,0x07,0xee,0xa1,0xec,0x78,0x58,0x36,0x1f,0x72,0xff,0xc7,0x64,0x66,
    0xc0,0xff,0x2f,0x31,0xdd,0xad,0x8b,0x8f,0x04,0xc4,0x2f,0xb7,0x6f,0x71,0x03,0x62,
    0x9f,0xbb,0xbc,0xfc,0x58,0x40,0xdc,0xec,0x3c,0x2e,0x3b,0x93,0x9c,0x9d,0x27,0x02,
    0xe2,0x66,0xe7,0xc9,0x80,0x98,0xb7,0x33,0x2b,0x20,0x6e,0xff,0xef,0x64,0x76,0x40,
    0xdb,0xb3,0x34,0xe7,0x80,0xfd,0x3d,0xe0,0xff,0xe1,0x98,0xad,0xeb,0x1d,0xfc,0x1f,
    0xa5,0x39,0xfa,0x1f,0x4a,0x83,0xb3,0x32,0xce,0x21,0xf3,0xae,0xf6,0xdf,0xd6,0xce,
    0x87,0x83,0xe6,0xff,0xeb,0x04,0xbf,0x6b,0xb3,0x08,0xef,0x9d,0x1d,0xff,0x0f,0x5e,
    0x04,0x58,0x5f,0x60,0x56,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, bool transparent)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     int ind = int(round(clamp((dist - distMin)/(distMax - distMin), 0.0, 1.0)*(transparent ? 2.0 : 3.0)));
//
//     return bitfieldExtract(transparent ? 0x18u : 0x2du, ind * 2, 2);
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(alphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3(subgroupClusteredAdd(rgbColor, 16)+ 8 >> 4);
//     }
//     vec3 cov0 = vec3(subgroupClusteredAdd(dx . r * dx, 16));
//     vec3 cov1 = vec3(subgroupClusteredAdd(dx . ggb * dx . gbb, 16));
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//
//     mat3 coffMat = mat3(cov0, vec3(cov0 . y, cov1 . xy), vec3(cov0 . z, cov1 . yz));
//
//  float eigenvalue = 0.0f;
//     for(int i = 0;i < 4;i ++){
//         vg = coffMat * vg;
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uvec2 indices = uvec2(dist == min_dist ? gl_SubgroupInvocationID : 0,
//                           dist == max_dist ? gl_SubgroupInvocationID : 0);
//     uvec2 minMaxIndex = subgroupClusteredMax(indices, 16);
//     minColor = subgroupShuffle(rgbColor, minMaxIndex . x);
//     maxColor = subgroupShuffle(rgbColor, minMaxIndex . y);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     int ind = int(round(clamp((alpha - minAlpha)/ dist * 7.0f, 0.0, 7.0)));
//
//     return bitfieldExtract(0x2345671u, ind * 4, 4);
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uvec2 mask = uvec2(pid <= 5 ? indices <<(16 + 3 * pid): 0x0,
//                      pid >= 5 ?(indices << 29)>>(45 - 3 * pid): 0x0);
//
//     mask = subgroupClusteredOr(mask, 16);
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask . x, mask . y);
// }
//
// uvec3 scaleColorToRGB565(uvec3 color){
//     return uvec3(round(vec3(color)* vec3(31.0 / 255.0, 63.0 / 255.0, 31.0 / 255.0)));
// }
//
// uvec3 convertRGB565ToRGB888(uvec3 color){
//  return uvec3(color . x << 3 |(color . x >> 2),
//               color . y << 2 |(color . y >> 4),
//                  color . z << 3 |(color . z >> 2));
// }
//
// uint packRGB565(uvec3 color565){
//      return color565 . r << 11 |(color565 . g << 5)| color565 . b;
// }
//
// void modifyMinMax(inout uvec3 minColor, inout uvec3 maxColor){
//  uvec3 minColor565 = scaleColorToRGB565(minColor);
//  uvec3 maxColor565 = scaleColorToRGB565(maxColor);
//  if(all(equal(minColor565, maxColor565))){
//      uvec3 simulatedColor = convertRGB565ToRGB888(minColor565);
//      ivec3 signMax = ivec3(maxColor)- ivec3(simulatedColor);
//   ivec3 signMin = ivec3(minColor)- ivec3(simulatedColor);
//   ivec3 sign = signMin * signMax;
//   bvec3 needCorrect = greaterThan(sign, ivec3(0, 0, 0));
//   bvec3 positive = greaterThan(signMin, ivec3(0, 0, 0));
//   maxColor565 . r += needCorrect . r && positive . r ? 1 : 0;
//   maxColor565 . g += needCorrect . g && positive . g ? 1 : 0;
//   maxColor565 . b += needCorrect . b && positive . b ? 1 : 0;
//   minColor565 . r -= needCorrect . r && ! positive . r ? 1 : 0;
//   minColor565 . g -= needCorrect . g && ! positive . g ? 1 : 0;
//   minColor565 . b -= needCorrect . b && ! positive . b ? 1 : 0;
//  }
//  minColor = minColor565;
//  maxColor = maxColor565;
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(alphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = alphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = alphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//         modifyMinMax(minColor, maxColor);
//         uint minColor565 = packRGB565(minColor);
//         uint maxColor565 = packRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b),
//                                     vec3(convertRGB565ToRGB888(minColor)),
//                                     vec3(convertRGB565ToRGB888(maxColor)),
//                                     nonOpaque);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//     if(alphaBits == 1){
//         int active_lane_index = subgroupClusteredMax(controlFlag ? int(gl_SubgroupInvocationID): - 1, 16);
//         if(active_lane_index != - 1){
//             color565 = subgroupShuffle(color565, active_lane_index);
//         }
//         if(punchthrough && result . a == 0){
//             indices = 3;
//         }
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(alphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
