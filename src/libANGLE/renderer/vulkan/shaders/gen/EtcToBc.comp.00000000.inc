// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x09,0xb4,0x55,0xc5,
    0x95,0x7d,0xff,0xfd,0x7b,0x6f,0xd5,0x7d,0x18,0xe3,0x90,0x41,0x1c,0x83,0x06,0x9c,
    0x22,0xc2,0x0a,0x92,0x44,0x44,0x25,0x0e,0x10,0x62,0x04,0xc5,0xb4,0xa2,0xf8,0x51,
    0xe0,0x8b,0xa8,0xf0,0x55,0x1c,0x50,0x3f,0x0e,0xa0,0x31,0x46,0xdb,0x81,0xb6,0xc5,
    0x01,0x13,0x54,0x14,0x15,0x8d,0x1a,0x07,0xd4,0x60,0x27,0x20,0x74,0x56,0x3b,0x04,
    0xc3,0x28,0x83,0x8a,0x8a,0x01,0xc5,0x19,0x67,0x4d,0xd2,0x77,0xbf,0xbd,0x0f,0xf7,
    0xf0,0x24,0x7f,0xad,0x5a,0xef,0xd7,0xde,0xe7,0x9c,0xaa,0x3a,0x75,0xea,0x54,0xdd,
    0xa9,0xb9,0xba,0x4b,0xa8,0x34,0x37,0x55,0x6a,0x95,0x58,0xf9,0x67,0xad,0x52,0xff,
    0xdb,0xb2,0x52,0xad,0x34,0xe9,0xb7,0xab,0x7e,0xbb,0xeb,0xb7,0xb7,0x7e,0xfb,0xe8,
    0xf7,0xa0,0xe2,0xb7,0x43,0x25,0xab,0xcb,0xf7,0x3d,0x6c,0xd0,0x61,0x5d,0xc7,0x9e,
    0x35,0xa2,0x6b,0x8f,0x7d,0xba,0xc1,0xce,0xe6,0x95,0xe6,0xba,0x3d,0x70,0xdf,0x2c,
    0xec,0xa7,0xc5,0x6f,0x52,0x94,0xd1,0x27,0x8e,0x1a,0x03,0xfc,0xd0,0xa2,0x1c,0x5e,
    0x94,0x17,0x0a,0x81,0x2d,0x0a,0x1b,0x49,0xdd,0x66,0xa5,0x72,0xa0,0x74,0xea,0x36,
    0x0b,0xf4,0xd0,0x7a,0x1b,0x95,0xca,0xb6,0xaa,0x1f,0xae,0xfa,0x76,0xf5,0x7a,0x73,
    0x5d,0xbf,0x22,0x0e,0xff,0x83,0xdb,0xbd,0x28,0xfd,0x8a,0x16,0x5f,0x15,0xb7,0x0b,
    0x7f,0x36,0x60,0x4d,0xc2,0x12,0x87,0x55,0x85,0x45,0x87,0x35,0x0b,0xdb,0xcc,0x61,
    0x89,0xb0,0x2d,0x1c,0x96,0x0a,0xfb,0x96,0xc3,0x32,0x61,0xdb,0xa8,0x9f,0xd6,0x46,
    0xbd,0x9f,0x85,0x91,0x9d,0x2b,0xae,0xdf,0x45,0xbd,0x93,0xab,0x1f,0x95,0x6e,0xcc,
    0xa3,0xde,0x69,0x83,0x4f,0x9a,0xeb,0xf5,0x8e,0xe2,0x86,0xa7,0x1c,0x73,0x47,0x71,
    0xd7,0xe4,0xd4,0xdb,0xba,0x68,0x0d,0xed,0x75,0x2a,0x30,0x8c,0x03,0xff,0x7f,0xbb,
    0x90,0x47,0xbf,0xbe,0x27,0x5b,0xdf,0x2d,0xea,0xa1,0xc2,0xbe,0x1a,0xdf,0x41,0x7c,
    0xa5,0xfe,0x9b,0xd4,0xc7,0x1e,0xe4,0x73,0xc8,0x6f,0xa9,0xff,0xab,0xe2,0xb7,0x12,
    0xbf,0xa5,0xea,0xdf,0x55,0x1d,0x36,0xbf,0x53,0xb4,0xbc,0x83,0xec,0x41,0x77,0xc7,
    0xe2,0x17,0xf5,0x66,0xd5,0xbb,0xc8,0x56,0xb3,0x74,0xbb,0x4a,0x37,0x88,0xdf,0x5b,
    0x7c,0x52,0xf7,0x2d,0xe3,0x10,0xf8,0x0f,0x65,0x3f,0x91,0xde,0x21,0x1a,0x0f,0xec,
    0xf5,0x52,0xfd,0x50,0x61,0x7b,0x6a,0xcc,0xfd,0x35,0xb7,0xc6,0x1f,0xee,0x78,0xb4,
    0x31,0xc0,0x8d,0x79,0xa0,0xb8,0x0e,0x8e,0x1f,0xa4,0xf6,0xac,0x3e,0xb8,0x1e,0xd7,
    0xa5,0xfd,0x21,0x8e,0x47,0xbd,0xa5,0xa1,0xfd,0x56,0xf9,0xcc,0xf4,0x47,0x35,0xf0,
    0x6d,0xf2,0x83,0xf1,0xed,0xea,0xaf,0xd5,0xc7,0x2b,0xe6,0xac,0x7e,0xa1,0x62,0xeb,
    0x07,0x85,0xb7,0xe0,0xa7,0x8b,0x34,0x86,0x76,0xc9,0x5e,0xe8,0x64,0x2f,0x29,0xca,
    0xbf,0x5c,0xfd,0xaa,0x86,0xbe,0x5c,0xe7,0xda,0x46,0x5f,0xa6,0x15,0x65,0x2f,0x57,
    0x9f,0xa1,0xb6,0xac,0xfe,0x90,0x62,0xdd,0xea,0x33,0x5d,0xdf,0x50,0x9f,0x55,0xe1,
    0x9a,0xb0,0xfa,0xec,0xa2,0xec,0x54,0x94,0xed,0x8b,0xfa,0x82,0xe2,0xf7,0x87,0xea,
    0xa3,0xf1,0x0b,0xeb,0xf9,0x82,0x63,0x01,0xb7,0x48,0xfe,0x9a,0xa5,0x79,0x5b,0xe8,
    0x64,0x17,0x6b,0xee,0xad,0xbe,0xa4,0x28,0xb9,0xab,0x2f,0xd5,0x7a,0x35,0x5b,0x2f,
    0xca,0xd6,0x62,0xc9,0x2e,0x75,0xb2,0xcb,0x14,0x6b,0x26,0xbb,0x5c,0xf3,0x36,0x44,
    0xdc,0x52,0xc7,0xad,0x10,0xd7,0xa6,0x7e,0x79,0x3b,0x2b,0x15,0x2b,0x26,0xfb,0x92,
    0xeb,0xff,0x32,0xf1,0x26,0xfb,0x72,0x51,0x6a,0x4e,0xf6,0x15,0xd7,0xbf,0xfe,0xe2,
    0x8d,0x5b,0xa5,0xf6,0x16,0xcb,0x8e,0xe7,0x5e,0x95,0xde,0x90,0x4d,0x70,0xaf,0xa9,
    0xaf,0xd6,0xfe,0x12,0xc7,0xbd,0xde,0x30,0x46,0xcf,0xad,0x76,0x63,0x6c,0xe4,0xde,
    0x70,0x7a,0x8b,0x1b,0xb8,0xbf,0xab,0x2f,0x6d,0x8e,0xb3,0xf1,0xae,0xd1,0xba,0x32,
    0xd9,0xb5,0xc2,0x5a,0xa4,0xe3,0xed,0xbc,0xe9,0xfc,0xbb,0x4c,0xfe,0x30,0xee,0x2d,
    0x37,0xde,0xc5,0x1b,0xb8,0xad,0xeb,0xf1,0xb4,0x4e,0x31,0xf3,0xa2,0xe6,0x70,0x85,
    0xe6,0xe0,0x15,0xf9,0xf0,0x55,0xf9,0xe4,0x75,0x8d,0xf1,0x0d,0xf5,0x79,0xad,0xda,
    0x7c,0x4b,0xeb,0xfe,0x5d,0xc5,0xc3,0x02,0xd7,0xff,0xaf,0xdc,0xda,0x41,0xee,0xea,
    0x58,0xdf,0x53,0x0e,0x3c,0xd0,0xea,0xdb,0x71,0x8f,0x39,0x00,0x79,0xa9,0xab,0xf2,
    0x7e,0xb3,0x93,0x1f,0xab,0x3d,0xc8,0xea,0xbf,0xad,0xd7,0x2f,0x3e,0xc0,0xea,0xd3,
    0xeb,0xf5,0x8b,0x0e,0xb6,0xfa,0x8c,0xa2,0x7e,0xf9,0x77,0x6e,0xda,0xdf,0xea,0xf7,
    0x15,0xf5,0xdb,0x0f,0xf9,0xce,0x06,0xf9,0xfb,0x8b,0xfa,0xe2,0x71,0x6f,0xf6,0xfe,
    0x41,0xd1,0x12,0xf2,0xe9,0xef,0x9b,0xa8,0x03,0x39,0x70,0x26,0x37,0xab,0xf8,0xbf,
    0x6d,0xab,0xe6,0x03,0x7a,0x29,0x9f,0xbd,0xa0,0x7d,0x6f,0xc7,0x62,0xb5,0xd8,0xfe,
    0xf4,0xef,0x0a,0x7c,0xf1,0x5a,0x13,0xd7,0x15,0x64,0x7b,0xa9,0xfe,0xba,0x30,0xf0,
    0xab,0xf5,0x3f,0xe4,0xf7,0x28,0x46,0x8c,0xdc,0xdc,0xa1,0x8a,0xbd,0x97,0xff,0xef,
    0x5c,0x2d,0xf3,0x4b,0x97,0x2a,0xd6,0x7e,0x59,0xdf,0xb5,0x5a,0xe6,0x0f,0xd4,0x77,
    0xab,0xda,0x9a,0xcd,0xea,0x39,0x7c,0xf7,0x2a,0x75,0x20,0xb7,0x5b,0xb5,0x9c,0x8b,
    0x6e,0xd5,0x8d,0x73,0x6e,0x8f,0x2a,0xf7,0x1d,0xab,0xef,0x57,0xe5,0xb9,0xc0,0xea,
    0x7d,0xab,0xd8,0x07,0xcb,0x76,0x46,0x56,0xcb,0x3c,0x74,0x53,0x95,0x7d,0x6f,0x77,
    0xf2,0x37,0x57,0x2b,0xf5,0xfd,0xcb,0xea,0xb7,0x54,0xb9,0x77,0x59,0x7d,0x4a,0x95,
    0x67,0x0b,0xab,0xdf,0x5a,0xe5,0x79,0xe5,0x07,0x85,0x75,0xd8,0xfb,0x6d,0xb5,0x5c,
    0x03,0x2b,0x95,0x17,0x61,0x13,0x76,0xa0,0x7b,0x6b,0x95,0xbe,0x9b,0x5a,0x65,0x9c,
    0x41,0x07,0x63,0x46,0xdc,0x2c,0xab,0x72,0x5d,0x58,0x31,0x7c,0x79,0x95,0x31,0x68,
    0xc5,0xda,0xde,0xa9,0x99,0xa7,0x2b,0xab,0xef,0xdc,0xcc,0x0d,0xc5,0xea,0xe7,0x35,
    0xf3,0x4c,0x60,0xf5,0x89,0x45,0x7d,0x2b,0x57,0x9f,0x5e,0xd4,0xbf,0x21,0x5f,0xfc,
    0x47,0xc2,0xfe,0xb4,0xd7,0xdb,0x4d,0xeb,0xff,0x1f,0x9d,0x70,0xbd,0xf5,0x77,0xd8,
    0x31,0x09,0xd7,0x66,0x0f,0x37,0x27,0x83,0x13,0xee,0xe9,0x26,0x73,0x6c,0xc2,0x35,
    0x0d,0xdc,0x64,0x8e,0x4b,0x10,0x23,0xa5,0xcc,0x90,0x84,0xed,0x1f,0xe7,0x64,0x8e,
    0x2f,0xfe,0xdf,0xcf,0xc9,0xb4,0x24,0xec,0xf3,0xf1,0x4e,0x66,0x68,0xf1,0xff,0x40,
    0x27,0x73,0x42,0xc2,0xbd,0x69,0xa8,0x93,0x39,0x51,0x67,0x29,0xab,0x0f,0x2b,0xea,
    0xa7,0x38,0x9d,0xe1,0x09,0x65,0x86,0x39,0x9d,0x11,0xc5,0xff,0x7b,0xfb,0xbd,0x3a,
    0xe1,0xdc,0x99,0xce,0x49,0x09,0x65,0x80,0x63,0xae,0xe1,0xaf,0x91,0x09,0x7d,0x04,
    0x9f,0x60,0xcc,0x18,0x13,0xfa,0x8c,0x3e,0xa1,0x0d,0xe8,0x60,0xae,0x4f,0x91,0x6f,
    0xa1,0x83,0x1c,0x71,0x57,0xf1,0xdb,0x5d,0xfb,0x6f,0xc7,0x62,0x05,0x3d,0x9f,0x70,
    0xef,0x48,0x2b,0x1b,0xff,0x29,0x6d,0x14,0xf1,0xdc,0x5c,0xf9,0x6b,0x21,0xf3,0xbc,
    0xec,0xcd,0x4f,0x88,0x03,0xeb,0xa5,0xfa,0x0b,0xc2,0x60,0xef,0xc8,0xb4,0x3c,0x9f,
    0xf9,0x3f,0x3b,0xdf,0xc2,0xc6,0x20,0x35,0x06,0xd9,0x5e,0xaa,0x1f,0x95,0x96,0x79,
    0x0a,0xfa,0xc3,0x52,0x8b,0x6d,0xae,0x49,0x9c,0x33,0x81,0x8d,0xd2,0xd9,0xc5,0x7c,
    0x73,0x6a,0x8d,0x31,0xe2,0xe3,0xe4,0xb4,0x1a,0x63,0xa7,0xd5,0x61,0xa3,0x6b,0x5c,
    0x1b,0x6d,0xee,0xcc,0x32,0xa6,0xc6,0xb3,0x89,0x2f,0x16,0xf7,0x6d,0x4e,0xbe,0xcd,
    0xe1,0xa7,0x3b,0xdb,0xad,0x0e,0x3f,0xa3,0xc6,0xb8,0xb4,0x62,0xf8,0x99,0x35,0xe6,
    0x0d,0x2b,0x36,0x9e,0xb1,0x35,0xc6,0x7b,0xfb,0x86,0xb8,0xa7,0xfc,0x59,0x35,0xee,
    0x31,0x56,0x9a,0x0a,0xff,0x03,0xff,0x5d,0x8d,0xff,0xa3,0xdf,0x8b,0x6a,0x9c,0xcb,
    0xcf,0x6b,0x9c,0x4b,0x2c,0xbd,0x9e,0xc5,0x38,0xab,0x3a,0x03,0x56,0x84,0x7d,0x56,
    0x20,0xa9,0xce,0x9c,0xd8,0x5b,0x7e,0x1e,0x19,0x0b,0xbd,0x74,0x6e,0x9e,0x94,0x96,
    0x75,0xe4,0x84,0xfb,0x1a,0xea,0x4f,0xb9,0x3a,0xe2,0x68,0x91,0xab,0xe3,0xac,0xbc,
    0x5a,0xb1,0xf5,0x69,0xd1,0xda,0x08,0xcd,0xdf,0x97,0xc5,0xff,0x38,0x07,0xb6,0xa6,
    0x6c,0x1f,0xbf,0xbd,0x75,0xd6,0x3e,0x2d,0xe5,0xb9,0x78,0x40,0xa1,0x85,0xbc,0x39,
    0x3a,0x25,0x76,0x5a,0x5a,0xc6,0x5c,0xbb,0xae,0x09,0xc6,0xa4,0xe4,0x2f,0xd5,0xfc,
    0x9d,0x9e,0x12,0xc3,0x7c,0xf7,0x29,0x30,0xac,0xc3,0x33,0x52,0x9e,0xa3,0xd1,0x5e,
    0x6f,0xc5,0xcd,0x99,0x29,0xf1,0x39,0x85,0x0c,0xea,0x63,0x53,0x62,0x83,0x64,0x1b,
    0xeb,0xeb,0xac,0x94,0xf8,0x5f,0x24,0x73,0xae,0x64,0x06,0x3b,0x99,0x71,0x29,0x71,
    0xc8,0xa0,0x7e,0x7e,0x4a,0x3d,0x9c,0x1b,0x2e,0x15,0x76,0x41,0xca,0x39,0x02,0x77,
    0x84,0xb0,0xf1,0x29,0xfb,0x5a,0xdf,0x65,0x85,0x5d,0x98,0x12,0x87,0xfc,0x91,0x05,
    0x82,0xf1,0xbc,0x9b,0x13,0x37,0x59,0x6b,0xe7,0x12,0xb5,0xd3,0xea,0xda,0x99,0xa0,
    0xfa,0x25,0xae,0x9d,0x4b,0xa5,0xdb,0xe4,0xda,0xb9,0x2c,0x25,0x3e,0xc1,0xb5,0xf3,
    0x41,0x4e,0x1c,0xed,0x35,0xb9,0x76,0x7e,0x9d,0x72,0x8c,0x88,0xed,0xa7,0x85,0xfd,
    0x46,0x18,0xda,0x1a,0x28,0xbf,0x5f,0x99,0x52,0x16,0xdc,0xc5,0xc2,0xfe,0x33,0xa5,
    0x5d,0x70,0x98,0x0b,0xec,0xc5,0xb7,0x25,0xdc,0x9f,0xdb,0x34,0x17,0xb0,0x77,0x7b,
    0x42,0xdc,0x64,0xee,0x90,0xcc,0x10,0x27,0x33,0x2d,0x21,0x6e,0xed,0xdd,0x99,0x50,
    0x0f,0xf8,0x03,0x05,0x86,0x7c,0x35,0x3d,0x61,0x9b,0xe0,0x6e,0x2e,0xf4,0x10,0xf3,
    0x77,0x0b,0x47,0xec,0xdd,0xab,0xa0,0xff,0xa2,0xe0,0x80,0xdf,0x53,0x14,0x60,0x88,
    0x3f,0xfc,0xff,0x79,0xf1,0x3b,0x42,0xf1,0x08,0xfc,0x69,0xb5,0xf5,0x80,0xec,0x22,
    0x5f,0xfc,0x45,0xd8,0xc3,0xc2,0x90,0x2f,0xcc,0xd7,0x8f,0x25,0xc4,0x2b,0x6e,0x4e,
    0x66,0x26,0x1c,0x07,0x38,0x93,0x7b,0x42,0x72,0x7e,0x4e,0x9e,0x4c,0x28,0x0b,0xce,
    0x74,0xff,0x47,0xba,0xc0,0x4c,0x6e,0x76,0x42,0xfc,0xb1,0xa4,0x9c,0x8f,0x79,0xf2,
    0x45,0xab,0x9b,0xa3,0x67,0xe4,0x1b,0x1f,0x1f,0xcf,0x26,0x94,0x05,0x07,0xbf,0x22,
    0x37,0xff,0x4d,0x79,0xd9,0xd6,0xca,0xc2,0x84,0x6b,0xef,0x2a,0xb7,0x56,0x16,0x25,
    0xc4,0x2d,0xe6,0x17,0x27,0xc4,0xcc,0xee,0x92,0x84,0xb6,0x17,0xbb,0x31,0xbe,0x98,
    0xd0,0x6f,0x4d,0xae,0xfd,0xe5,0x09,0xf1,0x79,0x6e,0x3c,0x2b,0x12,0xea,0x2f,0x77,
    0xba,0x2f,0x49,0xd7,0xaf,0x8d,0x97,0x13,0xca,0x82,0x1b,0x51,0xf4,0x03,0xfb,0xcc,
    0x2b,0xea,0xff,0xd0,0x42,0x06,0xf9,0x6e,0x95,0x30,0xc8,0xee,0x5f,0xcc,0xf7,0x6a,
    0xf9,0xd9,0xe2,0x6a,0x69,0xca,0xb8,0x9a,0xe5,0xe2,0xea,0xc5,0x94,0xf8,0xbd,0x85,
    0x0c,0xe2,0x65,0x59,0x4a,0xac,0xbf,0xf2,0xd5,0xda,0xb4,0x8c,0x19,0x70,0xcb,0x8b,
    0xb2,0x5a,0x31,0xb2,0x5c,0xeb,0x0c,0x3e,0xda,0x3c,0xb2,0xfd,0xa6,0xfa,0x9a,0xe0,
    0xbe,0xb1,0x4d,0x24,0xee,0xcb,0x1c,0xf5,0xb5,0x63,0x24,0x7f,0x91,0xd6,0x1a,0xb0,
    0xed,0x23,0xf1,0x31,0xb5,0xd2,0xee,0x8e,0x91,0x38,0xfe,0xe6,0x0a,0xdb,0x29,0x12,
    0xc7,0xb5,0xb3,0xc9,0x75,0x92,0x5c,0x93,0x93,0xdb,0x39,0x12,0xc7,0x35,0xec,0x3c,
    0x61,0xbb,0x44,0xea,0x83,0x33,0xdd,0xce,0xd2,0xad,0x3a,0xdd,0x2e,0x91,0x78,0xbb,
    0xd3,0xdd,0x35,0x52,0xbf,0x8b,0xd3,0xdd,0x5d,0xba,0xcd,0x4e,0x77,0x8f,0x48,0x7c,
    0x80,0xd3,0xdd,0x33,0x52,0x7f,0x0f,0xa7,0xbb,0xa5,0x7c,0x56,0x71,0x3e,0xeb,0x16,
    0x89,0xfb,0x62,0x3e,0xeb,0x1e,0xc9,0x7b,0x9f,0xf5,0x88,0xc4,0xbd,0xcf,0x7a,0x46,
    0xe2,0xde,0x67,0x3f,0x8a,0xc4,0xbd,0xcf,0x7e,0x22,0x39,0xef,0xb3,0x7d,0x23,0x71,
    0xef,0xb3,0x5e,0x91,0xfa,0xfb,0xba,0xbe,0xf7,0x96,0xae,0xf7,0xd9,0xfe,0x91,0xb8,
    0xf7,0xd9,0x01,0x91,0xfa,0xfb,0x3b,0xdd,0x3e,0xd2,0xf5,0x3e,0xfb,0x69,0x24,0xee,
    0x7d,0x76,0x50,0xa4,0x3e,0x38,0xe4,0x3d,0xec,0x85,0x5b,0x47,0xfa,0x12,0x1c,0x62,
    0x1c,0x7b,0x33,0x30,0x5b,0x63,0x03,0x23,0x73,0x2b,0xf2,0xc9,0x04,0x61,0x47,0x44,
    0xde,0x2b,0x01,0x87,0xb5,0x80,0x6b,0x98,0x23,0x23,0xf7,0xf5,0x51,0x6e,0x9d,0x0f,
    0x8a,0xc4,0x9f,0x2d,0xb4,0x50,0x3f,0x2a,0x12,0x9b,0xa1,0x73,0x93,0xad,0xff,0x5f,
    0x46,0x72,0xa6,0x77,0x74,0x83,0xde,0x31,0x91,0xd8,0x43,0x3a,0x9b,0x98,0xde,0xe0,
    0x48,0xce,0xf4,0x8e,0x6b,0xd0,0x1b,0x12,0x89,0xcd,0x6c,0xd0,0x3b,0x3e,0x92,0xb3,
    0xdc,0x36,0x34,0x72,0x4c,0x58,0xc7,0x36,0x9e,0x13,0x34,0x9e,0xa1,0xce,0xfe,0x89,
    0x91,0xb8,0xed,0x65,0xc3,0xa5,0x87,0xfb,0x3c,0xd6,0xe6,0x88,0x48,0x39,0x70,0xad,
    0xae,0xcd,0xd6,0x48,0xce,0x7c,0x38,0x32,0xf2,0x6c,0x3d,0xd0,0xf5,0x63,0x54,0x24,
    0xee,0xfb,0x71,0x8a,0xf9,0xd5,0xf5,0xe3,0xd4,0x48,0xdc,0xfa,0x31,0x5a,0x7a,0xe8,
    0x87,0x9d,0x3f,0xc6,0x44,0xca,0x8d,0x8e,0xe5,0x79,0xa3,0x2d,0x12,0x1f,0xe5,0xfa,
    0x75,0x7a,0x24,0x8e,0xb9,0xc7,0x39,0x6d,0x5d,0xbd,0xed,0xac,0x7e,0x3d,0x38,0x36,
    0xf2,0xec,0x06,0x7f,0xb5,0xc6,0x32,0xc7,0x9d,0x15,0xc9,0xd9,0x58,0xce,0x89,0xb4,
    0x83,0x33,0xca,0xff,0x0a,0x3b,0x37,0x52,0xee,0x1c,0x17,0x4b,0x17,0x44,0xe2,0x98,
    0x37,0xcb,0xc3,0xed,0x91,0xf3,0x0f,0x6e,0xb3,0x4a,0xe4,0xb9,0x45,0x6b,0x68,0x2f,
    0xf1,0x6b,0x74,0x0d,0x68,0xf1,0x7e,0xa9,0xd6,0x79,0xb3,0x5b,0xe7,0x57,0x47,0xe2,
    0xbe,0xd8,0x3a,0xbf,0x26,0x92,0xf7,0xeb,0x7c,0x52,0x24,0xee,0xd7,0xf9,0xf5,0x91,
    0xb8,0x5f,0xe7,0xff,0x1d,0x89,0xfb,0x75,0x3e,0x59,0x72,0x7e,0x9d,0xdf,0x18,0x89,
    0xfb,0x75,0x7e,0x53,0xa4,0xfe,0x8d,0x6e,0xad,0xde,0x22,0x5d,0xbf,0xce,0xa7,0x44,
    0xe2,0x7e,0x9d,0xdf,0x1a,0xa9,0x3f,0xc5,0xe9,0xfe,0x4e,0xba,0x7e,0x9d,0x4f,0x8d,
    0xc4,0xfd,0x3a,0xbf,0x2d,0x52,0x7f,0xaa,0xd3,0xbd,0x5c,0x3e,0xab,0x3a,0x9f,0xdd,
    0x15,0x89,0xfb,0x62,0x3e,0x9b,0x1e,0xc9,0x7b,0x9f,0xdd,0x1b,0x89,0x7b,0x9f,0xdd,
    0x17,0x89,0x7b,0x9f,0xdd,0x1f,0x89,0x7b,0x9f,0x3d,0x20,0x39,0xef,0xb3,0x07,0x23,
    0x71,0xef,0xb3,0x87,0x22,0xf5,0x1f,0x74,0x7d,0x7f,0x58,0xba,0xde,0x67,0x8f,0x44,
    0xe2,0xde,0x67,0x8f,0x46,0xea,0x3f,0xe2,0x74,0x67,0x4a,0xd7,0xfb,0xec,0xf1,0x48,
    0xdc,0xfb,0xec,0x89,0x48,0xfd,0xc7,0x5d,0x6e,0xbc,0x22,0xd2,0x97,0xe0,0x70,0x96,
    0x5b,0xab,0x7d,0x7a,0xb5,0xdb,0xa7,0xff,0xb4,0x89,0x7d,0xfa,0xff,0x22,0x71,0x5f,
    0xcc,0xaf,0xcf,0x44,0xf2,0xde,0xaf,0xcf,0x47,0xe2,0xde,0xaf,0xf3,0x23,0x71,0xef,
    0xd7,0x17,0x22,0x71,0xef,0xd7,0x05,0x92,0xf3,0x7e,0x5d,0x18,0x89,0x7b,0xbf,0x2e,
    0x8a,0xd4,0x5f,0xe8,0x7c,0xb3,0x44,0xba,0xde,0xaf,0x4b,0x23,0x71,0xef,0xd7,0x17,
    0x23,0xf5,0x97,0x3a,0xdd,0xe5,0xd2,0xf5,0x7e,0x5d,0x11,0x89,0x7b,0xbf,0xae,0x8c,
    0xd4,0x5f,0xe1,0x74,0xe7,0x6c,0x62,0x9f,0x7e,0x35,0x12,0xdf,0xa8,0xc8,0x3f,0xaf,
    0x45,0xf2,0xde,0x67,0x6f,0x44,0xe2,0xde,0x67,0x6b,0x22,0x71,0xef,0xb3,0xb5,0x91,
    0xb8,0xf7,0xd9,0x5b,0x92,0xf3,0x3e,0x5b,0x17,0x89,0x7b,0x9f,0xbd,0x1d,0xa9,0xbf,
    0xce,0xf5,0xfd,0x5d,0xe9,0x7a,0x9f,0xbd,0x17,0x89,0x7b,0x9f,0xbd,0x1f,0xa9,0xff,
    0x9e,0xd3,0xfd,0x50,0xba,0xde,0x67,0xeb,0x23,0x71,0xef,0xb3,0x8f,0x22,0xf5,0xd7,
    0xbb,0x58,0x9c,0x1b,0xe9,0xcb,0x8f,0x1a,0x62,0x11,0xbf,0x1f,0x17,0x3e,0x44,0xde,
    0x7c,0xb4,0xc6,0xdc,0x89,0x73,0x24,0xf2,0xe5,0x6a,0x71,0xd0,0x3f,0xa7,0xc6,0x78,
    0x06,0x07,0x5b,0x3e,0x86,0xdf,0x4a,0xc9,0xdb,0x75,0x5a,0xdd,0x1f,0x29,0xf1,0x51,
    0xda,0x8b,0xb0,0x1f,0xbc,0x93,0xf2,0xda,0x7b,0x5d,0x5a,0xee,0x05,0xef,0xa6,0xc4,
    0x6d,0x2f,0x7a,0x2f,0x25,0xe6,0xaf,0x1d,0xde,0x4f,0x89,0xb7,0x68,0xdf,0x81,0xfd,
    0x0f,0x52,0xe2,0x76,0x4e,0xfe,0x48,0xe7,0xe4,0x16,0x9d,0x93,0xbf,0x74,0xe7,0x64,
    0x70,0x1f,0x17,0xe5,0x0b,0x8d,0xf9,0x63,0x77,0x0d,0xfd,0x99,0xfa,0x89,0xeb,0x0b,
    0xb3,0xf5,0x79,0x4a,0x1c,0x3e,0x85,0xaf,0xbe,0x94,0x1e,0xf4,0x7d,0xfd,0x4b,0xf9,
    0x07,0x3a,0xe7,0xd7,0xa8,0x07,0xdb,0xb8,0x9f,0x0b,0xd9,0x19,0xb2,0xf7,0xcf,0x86,
    0xbe,0x25,0x59,0xd9,0x37,0x70,0xff,0x2a,0x0a,0x30,0xd8,0xfc,0x97,0xeb,0x5b,0x35,
    0xfb,0x7a,0xdf,0x9a,0x33,0xe2,0xd6,0x37,0xd3,0xc3,0xaf,0xf5,0x25,0xcd,0xd8,0x26,
    0xfa,0x07,0x79,0xd8,0x44,0xbb,0xf3,0x42,0xd9,0x2e,0x64,0xb2,0xa2,0x7c,0x5b,0xfa,
    0x59,0xdd,0x66,0xac,0xdf,0xef,0x88,0x19,0xe7,0xd3,0xe6,0xd4,0xca,0xa5,0xea,0x57,
    0x2d,0xe3,0x7d,0x09,0xcc,0xc1,0x40,0xdd,0x17,0xea,0x90,0x11,0xb7,0x82,0xbd,0x1d,
    0xf8,0x66,0x19,0xef,0x4b,0x83,0x9f,0x23,0xec,0x1b,0x19,0xdb,0x00,0xd7,0xae,0xfb,
    0xff,0x9b,0x67,0xc4,0x31,0x76,0xd4,0xb7,0xcc,0x88,0xe1,0x3e,0xd4,0xa5,0xc2,0xbe,
    0x95,0x11,0xc7,0x3d,0x2b,0x8c,0x1d,0xe3,0x41,0xdf,0x31,0x06,0x3b,0x3f,0x6d,0x23,
    0x9f,0xe1,0x9e,0xf6,0x2c,0x77,0x4e,0xe9,0x98,0x91,0xb3,0xfa,0xf6,0x92,0x7b,0xa6,
    0xa8,0xa1,0xbe,0x43,0x46,0x6c,0x86,0xee,0x9b,0x99,0xbd,0xef,0x49,0xae,0x6f,0x83,
    0xbd,0x4e,0x19,0x39,0xd3,0xef,0x2c,0xfd,0x99,0x0d,0xfa,0xbb,0x49,0x7f,0x65,0x65,
    0x63,0xfd,0xdd,0x33,0x72,0xa6,0xbf,0x97,0xf4,0xfb,0x4b,0xdf,0xce,0x37,0xdd,0x32,
    0xf6,0x1d,0xfd,0x33,0xec,0x87,0x19,0xdb,0xef,0xec,0xb0,0x9e,0x19,0x6d,0xee,0x95,
    0x95,0x6b,0xe4,0xc7,0x19,0xf5,0xef,0x53,0xec,0xfc,0x24,0x23,0x86,0xfb,0xf9,0x88,
    0x87,0xb9,0x2e,0x1e,0xc0,0xed,0x5b,0x94,0x1b,0x15,0x0f,0xfb,0x3a,0x9f,0xf6,0xd6,
    0x18,0x66,0x54,0x36,0x3e,0x93,0xee,0x9f,0x91,0x33,0xb9,0x3e,0xce,0xf7,0x5e,0xee,
    0xa7,0x19,0xb9,0xb9,0xea,0xeb,0x41,0x19,0xb1,0x56,0xe5,0x2c,0x60,0x07,0x67,0xb4,
    0x77,0x90,0xb3,0xd7,0x57,0xf6,0x1a,0xcf,0xed,0xfd,0x32,0x72,0x26,0xf7,0x73,0xc9,
    0x35,0x9e,0xd3,0x0f,0xcb,0xc8,0x99,0xdc,0x00,0xc9,0x2d,0x6d,0x90,0x1b,0x98,0x91,
    0x33,0xb9,0x41,0x92,0xeb,0xdf,0x20,0x77,0x54,0x46,0xce,0xe4,0x8e,0x96,0xdc,0x90,
    0x06,0xb9,0x63,0x32,0x72,0x26,0x77,0x9c,0xe4,0xec,0xde,0xab,0xe5,0xee,0x21,0x19,
    0xb9,0x16,0x97,0xbb,0x4f,0xc8,0x88,0x23,0x47,0xe2,0x4c,0x8d,0x7b,0x9b,0x78,0x3e,
    0x62,0x39,0x74,0x58,0xc6,0xfb,0x9d,0x90,0xb3,0x1c,0x3a,0x3c,0x23,0x6e,0xf9,0xb8,
    0x55,0xeb,0xd7,0xdf,0xaf,0x18,0x99,0xf1,0x3e,0x2e,0xae,0xc3,0xec,0x8c,0x7f,0x72,
    0x46,0xd9,0x91,0x59,0x99,0x73,0x46,0x65,0xc4,0xaf,0x72,0xe3,0x39,0x25,0x23,0xbe,
    0xe1,0xda,0x40,0x7a,0xb0,0xb5,0xe1,0xda,0x20,0x23,0xbe,0xd1,0xb5,0x41,0x46,0xdc,
    0xe6,0x78,0x6c,0x46,0x5b,0xc0,0x11,0x7f,0xe3,0x5c,0x1e,0x44,0xfe,0x3c,0xbb,0xa8,
    0x8f,0x53,0xfc,0xe1,0x7f,0xcb,0x79,0xe7,0x66,0xd4,0x6d,0x55,0xce,0x33,0x99,0x71,
    0x2e,0xe7,0x5d,0x57,0x63,0x0e,0x46,0xdc,0x42,0xde,0xeb,0x9f,0x2f,0xfd,0x35,0xca,
    0xbf,0x93,0x7d,0xbb,0xc5,0xff,0x17,0x14,0x65,0xa2,0x6c,0xe2,0xff,0x81,0xba,0xa7,
    0x7d,0x51,0xc6,0xb8,0x44,0xbc,0x21,0x96,0x2c,0x0f,0x4d,0xc8,0xc8,0x59,0x1e,0x9a,
    0x2c,0xdd,0x89,0x59,0x79,0x4d,0x73,0x99,0xfa,0x3b,0xd6,0xd9,0xbb,0x22,0x63,0xac,
    0x21,0x8e,0x8e,0x71,0xf6,0xae,0xcc,0xc8,0x9d,0x51,0x2b,0xaf,0x75,0xae,0xce,0x68,
    0x63,0xb8,0xd3,0xbf,0x26,0x23,0x6e,0xe5,0x62,0xe9,0x5f,0x9b,0xd1,0x06,0x78,0x5c,
    0x03,0x01,0x9b,0x94,0x95,0xd7,0x40,0xe0,0xf1,0x9c,0x0c,0xcf,0xc4,0x7c,0x7f,0x27,
    0xcb,0x7f,0x90,0xbf,0xbf,0xc6,0x71,0x61,0xfc,0x93,0xe4,0x0f,0xc8,0xce,0x55,0x8e,
    0xbd,0xd1,0xe5,0x95,0x9b,0x33,0xe6,0x20,0xcb,0x2b,0xb7,0x64,0xc4,0x2c,0xaf,0x3c,
    0xed,0xf2,0x0a,0xb8,0x29,0xd8,0x67,0x64,0x67,0x8a,0x5b,0x17,0xbf,0x73,0xf9,0xc2,
    0xaf,0x9f,0xa9,0x19,0x39,0x93,0xbb,0xc3,0xe5,0x9f,0x36,0x27,0x37,0x2d,0x23,0x67,
    0x79,0xe5,0xce,0x8c,0x58,0x8b,0xbb,0x8e,0xbd,0x5b,0xba,0x78,0x26,0x6a,0xb1,0x7a,
    0x4f,0x46,0xdc,0xc7,0xea,0xbd,0x19,0x71,0x8b,0xd5,0x19,0x19,0xed,0xdd,0xeb,0xfa,
    0xf1,0x7b,0xd9,0xea,0x56,0xdd,0xb8,0x1f,0x0f,0x64,0xe4,0xac,0xcd,0x3f,0x48,0x6e,
    0xbc,0x3b,0x0f,0x3d,0x9c,0x11,0x6f,0x77,0x7a,0x8f,0x64,0xc4,0xad,0xcd,0x47,0x33,
    0xda,0x7a,0xc4,0xb5,0xf9,0xb8,0xdb,0x3f,0xbc,0x8f,0x9e,0xc8,0xc8,0x99,0xdc,0x2c,
    0xc9,0x2d,0x6b,0x90,0x7b,0x2a,0x23,0x67,0x72,0x7f,0x96,0x5c,0x5b,0x83,0xdc,0xec,
    0x8c,0x9c,0xf5,0x77,0xae,0xe4,0x06,0xb9,0x7d,0xff,0x19,0xe5,0x85,0x75,0xba,0xa7,
    0x0e,0xec,0xd9,0x8c,0xb2,0xcf,0x64,0x65,0xec,0x3e,0x9f,0x71,0x0e,0xf1,0xac,0xd5,
    0xb0,0xf9,0x19,0x7d,0x8a,0xe7,0xad,0x96,0x93,0x5e,0xc8,0x28,0x3b,0xdf,0xed,0x63,
    0x0b,0x32,0xe2,0x8f,0x3a,0x7b,0x8b,0x32,0x8e,0xd7,0xdb,0x5b,0x92,0x71,0x6c,0xde,
    0xde,0xd2,0x8c,0xb2,0x4b,0x9c,0xbd,0x65,0x19,0x71,0x8c,0xef,0x01,0xc5,0xeb,0xf2,
    0x8c,0xed,0x80,0xbb,0x47,0x7e,0x59,0x91,0x11,0x1f,0xa5,0xe7,0x32,0x36,0xbe,0x97,
    0x32,0x8e,0x11,0x3c,0xf2,0xf1,0x53,0x0d,0xf9,0xf8,0x95,0x8c,0xcf,0x9b,0x5e,0x72,
    0xf9,0x78,0x55,0x46,0xdc,0xf2,0xf1,0x6b,0x9b,0xc8,0xc7,0xab,0x37,0x91,0x8f,0xdf,
    0xc8,0x28,0xbb,0xda,0xcd,0xc3,0xdf,0x33,0xe2,0x3e,0x1f,0xaf,0xc9,0x88,0x9b,0xde,
    0x3a,0xe9,0xf9,0x7c,0xfc,0x76,0x46,0xdc,0xc7,0xf8,0x3b,0x19,0x71,0xac,0xd1,0x8f,
    0x1a,0x72,0xef,0x7b,0x45,0xfd,0x23,0xe5,0x85,0xf7,0x9c,0xff,0x3e,0xcc,0xd8,0xde,
    0x3b,0x2e,0x9f,0xae,0xcf,0x88,0x5b,0x3e,0x36,0xbd,0x8f,0x5c,0x3e,0xbe,0x5e,0xf9,
    0x18,0xeb,0x1d,0xf2,0xef,0x65,0xe5,0x79,0xf8,0x13,0xd9,0xb4,0x7c,0xdc,0xe4,0xf2,
    0x05,0xb8,0x4f,0x8b,0xf2,0x95,0x6c,0x7e,0xea,0xf2,0xdf,0x97,0x8a,0x83,0xa7,0x34,
    0x9f,0x68,0xbb,0x49,0x79,0xe5,0x2b,0x27,0x87,0x07,0x22,0x53,0x15,0x6f,0x8f,0x36,
    0xc8,0xe1,0xd7,0x72,0xde,0x05,0x35,0xda,0x44,0x1b,0xd0,0xf9,0xca,0xe5,0xe4,0x34,
    0x90,0xf7,0x39,0x39,0x04,0x8e,0xf9,0x1d,0x97,0xe7,0x63,0x60,0xbe,0x01,0x67,0x72,
    0x1d,0x02,0xf1,0x55,0xae,0x4f,0xdf,0x08,0xc4,0xad,0x58,0xee,0xde,0x3c,0xb0,0x2d,
    0xf0,0x96,0xbb,0xb7,0x08,0x65,0xee,0x06,0xef,0x73,0xf7,0xd3,0x76,0xe6,0x0d,0x65,
    0x3e,0xfe,0x6e,0xe0,0xf9,0xcf,0xf2,0xf1,0x36,0x81,0x98,0xe5,0xe3,0x39,0xce,0xbf,
    0xe0,0x3a,0x16,0xe5,0x7e,0xd9,0xc1,0xff,0x96,0x1b,0xb6,0x0f,0x5c,0xf3,0x78,0x07,
    0x62,0xb1,0x8b,0x9b,0x1d,0x02,0xb9,0x0d,0x67,0x62,0xc9,0xe1,0x79,0xb1,0x97,0xeb,
    0x14,0xc8,0x59,0x5c,0x7e,0x5f,0x72,0x78,0x1f,0xc1,0x64,0x3a,0x07,0xe2,0x76,0xbd,
    0xd7,0x25,0x10,0xc3,0x3b,0x1e,0x96,0x07,0x77,0x0d,0xb4,0xd5,0xc5,0xb5,0xb9,0x47,
    0x28,0xf3,0x9b,0xcf,0xbd,0x7b,0x06,0x72,0x26,0xd7,0x35,0x94,0xf9,0xd2,0x9f,0x41,
    0xf7,0x0e,0xe4,0x6c,0xaf,0xe8,0x16,0x88,0xb5,0xb9,0x33,0x68,0xf7,0x40,0x7b,0xdd,
    0xdc,0x18,0x7a,0x38,0x7b,0x66,0x6b,0x9f,0x40,0xdc,0xc6,0xd0,0x33,0x10,0xbb,0xc5,
    0x8d,0xe1,0x47,0x81,0xf6,0x7a,0x86,0x52,0xaf,0x57,0x60,0xee,0xb4,0xbe,0xee,0x1f,
    0xca,0x73,0xa1,0xbf,0x36,0x38,0x20,0x90,0xb3,0xbe,0x1e,0x18,0x88,0xb5,0xb8,0xbe,
    0xf6,0x09,0xb4,0x07,0xce,0xf2,0xcc,0x41,0xa1,0xcc,0x33,0xd6,0xc6,0xc1,0x81,0xf8,
    0xf4,0x86,0x39,0x3d,0x24,0x90,0x33,0xb9,0x7e,0x92,0xc3,0xdc,0x2f,0x73,0x72,0x3f,
    0x0b,0xe4,0x4c,0xee,0x30,0xc9,0xd9,0xbb,0x75,0x26,0xf7,0x8b,0x40,0xce,0xe4,0x06,
    0x4a,0xae,0x6f,0x43,0x8c,0x1c,0x11,0xc8,0x6d,0xb8,0xa7,0x2f,0xb9,0x35,0x95,0x8d,
    0xe5,0x7e,0x19,0xc8,0x99,0x0f,0x8e,0x0e,0x8c,0x43,0x7f,0x5f,0x60,0xb0,0xb0,0x21,
    0xce,0x2f,0xc7,0x06,0xca,0x0e,0x76,0xba,0x43,0x02,0xfd,0xe5,0x75,0x5b,0x84,0x79,
    0xdd,0xa1,0x81,0xb2,0x2d,0x4e,0xf7,0xc4,0x40,0x5f,0x79,0xdd,0xe1,0xc2,0xbc,0xee,
    0x88,0x40,0xd9,0xe1,0x4e,0xf7,0xa4,0xc0,0x58,0x6e,0x71,0xba,0x27,0x0b,0x5b,0xec,
    0x74,0x47,0x05,0xca,0x9e,0xec,0x74,0x4f,0x0d,0xf4,0xbd,0xd7,0x1d,0x2d,0xcc,0xeb,
    0x8e,0x09,0x94,0x1d,0xed,0x74,0x4f,0x0f,0x9c,0x0f,0xaf,0x7b,0xa6,0x30,0xaf,0x3b,
    0x36,0x50,0xf6,0x4c,0xa7,0x7b,0x76,0x60,0xec,0xfa,0xf1,0x9e,0x2b,0xcc,0x8f,0x77,
    0x5c,0xa0,0xec,0xb9,0x4e,0xf7,0xfc,0xc0,0xf9,0xf5,0xba,0xed,0xc2,0xbc,0xee,0xf8,
    0x40,0xd9,0x76,0xa7,0x7b,0x51,0xe0,0x9c,0x7b,0xdd,0x4b,0x84,0x79,0xdd,0x09,0x81,
    0xb2,0xe0,0x2c,0xb7,0xfe,0x2a,0x70,0xde,0xe1,0xc7,0x71,0x0e,0xff,0x4d,0xe0,0x9c,
    0xc2,0x47,0x68,0x73,0x82,0x72,0xee,0x55,0x81,0xdc,0xaf,0x9c,0xec,0xb5,0x81,0x73,
    0x08,0x9f,0x4c,0x70,0xb2,0x93,0x02,0x39,0xc8,0xda,0x9e,0xff,0x5f,0x81,0xf7,0xb1,
    0x06,0xb8,0xe7,0xb6,0xd7,0x07,0xe2,0x66,0xef,0x86,0x40,0xcc,0x8a,0xed,0x2b,0x93,
    0x03,0xdb,0xbf,0xc1,0xd9,0xbb,0x51,0xf6,0x46,0x39,0x7b,0x37,0x05,0xe2,0x66,0xef,
    0x96,0x40,0xcc,0x8a,0xd9,0x9b,0x12,0xd8,0xc7,0x5b,0xdc,0x9e,0x32,0x35,0xb0,0x9d,
    0x29,0x0e,0xbb,0x3d,0x10,0xc7,0x7b,0x40,0x4f,0x0b,0x9b,0x16,0x88,0x03,0x33,0xb9,
    0x3b,0x35,0xd6,0x69,0x6e,0x3f,0x9a,0xee,0xf6,0xa3,0x3b,0x1b,0xf6,0xa3,0x39,0xda,
    0x47,0xee,0x77,0x7d,0x7d,0x28,0xf0,0x9e,0x45,0x27,0xdd,0x93,0xb0,0x35,0xfd,0x70,
    0x28,0xef,0x19,0x41,0x6e,0x66,0xe0,0x7d,0x8d,0xce,0xba,0x6f,0x61,0xf8,0xe3,0x81,
    0xb2,0x56,0x6c,0xac,0x4f,0x04,0x72,0x33,0xdd,0xb8,0x9e,0x0c,0x6c,0xef,0x09,0xc5,
    0x12,0xb0,0xa7,0x02,0xf1,0x36,0x37,0xd6,0x3f,0x0b,0xc3,0x58,0xe7,0x09,0x9b,0x1d,
    0x28,0x0b,0xce,0x8f,0x65,0x8e,0x3b,0x23,0x3c,0x50,0xe3,0xf8,0xb1,0x4f,0xe2,0x5d,
    0xa6,0xfb,0x1d,0x77,0x47,0x8d,0x18,0xb8,0xd9,0xda,0x53,0x71,0x9e,0xac,0x9f,0x71,
    0x6a,0xdc,0x87,0x71,0x2f,0x10,0xe7,0x20,0xc3,0x3f,0x75,0xf8,0xce,0x0d,0x7b,0xfa,
    0xd3,0xce,0xf6,0xef,0x6b,0x3a,0x07,0x04,0xf6,0xc1,0xf7,0x69,0xaa,0xda,0x05,0x77,
    0x87,0xe3,0x60,0x7f,0x52,0x8d,0x67,0x2f,0x70,0x9f,0x34,0x70,0x13,0x6a,0x6c,0x17,
    0xdc,0xa7,0xe2,0xfc,0x35,0xde,0x5c,0xd7,0xc6,0x7d,0x35,0x5e,0x13,0xe2,0x1a,0x11,
    0x7d,0xf1,0x7d,0xbb,0x49,0xed,0x83,0x9b,0xea,0x38,0xb4,0x71,0x4d,0x8d,0xd7,0xe2,
    0xe0,0x26,0x35,0x70,0xe3,0xd5,0x3e,0xb8,0x09,0xe2,0xfc,0x7d,0xbc,0x79,0xae,0x8d,
    0xbb,0xd5,0x06,0xee,0x4b,0xa2,0x2f,0xbe,0x6f,0x37,0xd6,0x78,0x2f,0x10,0xdc,0x4d,
    0x8e,0x43,0x1b,0x57,0xeb,0xdc,0x09,0xee,0x9a,0x06,0xae,0xbd,0x46,0x9f,0x83,0x1b,
    0x2f,0x0e,0xe7,0xa3,0xcf,0xdd,0xf9,0x08,0x32,0x7f,0x41,0xbf,0xd4,0x27,0xfc,0x6f,
    0xe7,0xd6,0x67,0x15,0xbf,0x58,0xf7,0xf7,0xe8,0xbe,0xdd,0x73,0x81,0x78,0x8b,0xde,
    0x3f,0xdd,0x70,0x0d,0xa4,0xb3,0xc5,0x73,0xa1,0x3c,0x2b,0xfe,0x35,0x70,0x9f,0x7f,
    0xde,0xed,0x7f,0xf3,0x75,0x06,0xf8,0xab,0xe4,0x6d,0x2f,0xff,0x5b,0xf8,0xfa,0x35,
    0xc3,0xc2,0xf0,0xf5,0x6b,0x86,0x45,0x81,0xb2,0x0b,0x43,0x79,0xf6,0x5f,0x1c,0x88,
    0xfb,0x6b,0x86,0x25,0x81,0xb8,0xe9,0x2d,0x97,0x9e,0xbf,0x66,0x58,0x11,0x88,0xfb,
    0x6b,0x86,0x95,0x81,0xb8,0x8d,0xe1,0x65,0x8d,0x75,0x89,0x7c,0xb7,0xd6,0xf9,0x0e,
    0xbe,0x5f,0x55,0xd4,0xd7,0xca,0x77,0xab,0xdc,0x99,0xf8,0xf5,0x40,0xdd,0x95,0xa1,
    0x1c,0xcf,0xdf,0x03,0xed,0x00,0xb3,0x6b,0x8b,0x35,0x81,0xb8,0x5d,0x5b,0x98,0xad,
    0xb5,0x6e,0x1e,0xef,0xac,0x71,0x9e,0x31,0x37,0x90,0x5f,0x15,0xca,0x67,0x18,0x37,
    0xd4,0xd8,0x0e,0xb8,0xd7,0xc5,0xe1,0xba,0x0d,0xef,0x00,0x8e,0x4c,0xca,0x67,0xd3,
    0xeb,0x02,0xdf,0x0b,0x9c,0xaf,0xf6,0x2d,0xef,0xbe,0x1d,0xc8,0x59,0xbf,0xdf,0x0d,
    0xc4,0x60,0xd7,0xf2,0xd3,0x07,0x81,0xb8,0x15,0xcb,0x45,0x1f,0x06,0xc6,0xe6,0x07,
    0x2e,0x77,0xae,0x77,0xb9,0xf3,0xc3,0x86,0xdc,0x69,0x31,0xf6,0xb9,0x8b,0xed,0xe9,
    0x35,0xc6,0x3e,0xd6,0xc2,0x7a,0xf9,0xd2,0xc6,0x3d,0x4d,0xe3,0x06,0x07,0x1f,0x80,
    0x9b,0x6e,0xcf,0x18,0x02,0x9f,0x81,0x4c,0xd3,0x3d,0x29,0x7c,0x04,0xf3,0x99,0x7e,
    0x2d,0x56,0x3f,0xab,0x51,0x6e,0x8d,0x9e,0xf5,0x60,0x3c,0x78,0x17,0xf3,0x0b,0xe1,
    0x56,0xee,0xb1,0xeb,0x2d,0x71,0xe8,0xf3,0x74,0xf7,0x5e,0x59,0x35,0x92,0xab,0x54,
    0x4a,0x2c,0x11,0xd6,0xe4,0xb0,0x4c,0x58,0xd5,0x3d,0xb7,0x79,0x3f,0xa1,0xbe,0xd5,
    0xd7,0x27,0xd4,0xb5,0xfa,0x27,0x09,0xf5,0xec,0xb9,0xc2,0xa7,0x09,0x75,0x20,0xf7,
    0x49,0x52,0x3e,0x2f,0xe8,0x90,0x93,0x3b,0xbe,0x48,0x66,0xf5,0x67,0x0a,0x79,0xf9,
    0x3d,0x0e,0xf0,0xf1,0x5a,0x37,0xe0,0xbe,0x99,0x93,0xc7,0xbb,0xab,0xf6,0x0c,0x62,
    0xcb,0x9c,0xf8,0x59,0xb5,0xd2,0xe6,0x56,0x39,0x71,0xdb,0xfb,0xb7,0xce,0xd9,0x0e,
    0x70,0x1b,0xd3,0xb7,0x73,0xe2,0xfe,0x9d,0xba,0x6d,0x72,0xe2,0x28,0xe8,0x4f,0xfd,
    0x79,0x83,0xeb,0x0f,0xf8,0xf1,0xf5,0xeb,0x16,0x7e,0x63,0xb0,0x6d,0x4e,0xde,0x6c,
    0xee,0x28,0x9b,0xfe,0xdd,0xb4,0x9d,0x64,0x6f,0x47,0x67,0xf3,0x7b,0xce,0xe6,0x4e,
    0x0d,0x36,0x3b,0xe5,0xe4,0xcd,0x66,0x67,0xd9,0xac,0x3a,0x9b,0x5d,0x64,0xb3,0xb3,
    0xb3,0xb9,0xab,0xb3,0xd9,0xa5,0xc1,0xe6,0x6e,0x39,0x79,0xd3,0xdf,0x4b,0xfd,0xf1,
    0x7d,0xea,0xea,0xf4,0xf7,0x6a,0xd0,0xdf,0x3b,0x27,0x6f,0xfa,0x3d,0xa4,0xeb,0xdb,
    0xdf,0xc7,0xe9,0xf7,0x68,0xd0,0xef,0x99,0x93,0x37,0xfd,0x5e,0xd2,0xf5,0xfa,0xfb,
    0x39,0xfd,0x5e,0x0d,0xfa,0xbd,0x73,0xf2,0xad,0x8a,0x91,0x03,0x36,0x11,0x23,0xc3,
    0xc4,0xf5,0xd9,0x04,0x67,0xcf,0xb0,0x7e,0x9a,0x53,0x17,0x32,0xa7,0xeb,0x7b,0xbc,
    0x83,0x72,0xe2,0x58,0x6b,0x07,0xe7,0x5c,0x6b,0xf8,0xc5,0x5a,0x05,0x3f,0xbb,0x46,
    0x19,0xac,0xbf,0xf5,0xc5,0xff,0xa7,0x89,0x43,0xbf,0xfe,0x5c,0xd3,0xf7,0x2d,0x05,
    0x37,0x2c,0x2f,0x39,0x8c,0xe7,0x4f,0x35,0x7d,0xfb,0x83,0x67,0xd3,0xe2,0x1e,0xd2,
    0x1a,0xef,0x9b,0x93,0xc7,0x79,0xf8,0x93,0xa2,0x1f,0x6d,0xe2,0x2d,0xff,0x82,0xef,
    0x57,0x94,0x36,0xf5,0x07,0xff,0x0f,0xd4,0xf7,0x2e,0x87,0xe5,0x8c,0x3b,0xc4,0x09,
    0xe6,0xf5,0xfa,0xc2,0x26,0xfa,0x72,0x78,0x4e,0x6e,0x76,0xad,0x94,0x3d,0x52,0x72,
    0x98,0xbf,0x9e,0x4e,0xf6,0xa8,0x9c,0x9c,0x97,0x3d,0x46,0xf6,0x20,0xd7,0xdb,0xc9,
    0x1e,0x9b,0x93,0xf3,0xb2,0x2d,0x39,0xdb,0x83,0x9d,0x63,0x9d,0xec,0x89,0x39,0x39,
    0x94,0xcd,0x0a,0x59,0x60,0xc3,0xb4,0x1e,0x76,0x12,0xff,0xa4,0x7c,0x30,0x22,0x27,
    0x07,0xff,0x61,0xff,0x39,0xd5,0x8d,0x1f,0x5c,0x6b,0x51,0x4e,0xd5,0xf8,0xf1,0xff,
    0xaf,0xd5,0xc6,0xc8,0x9c,0xdf,0x10,0x41,0xf7,0xea,0x02,0x43,0x7f,0x4e,0x51,0x9b,
    0x23,0x35,0x8f,0xa6,0x77,0xaa,0x9b,0x47,0xcc,0x5d,0x8b,0xfc,0x7a,0x8a,0xec,0x43,
    0xf6,0x34,0xc9,0xe2,0xd7,0xf6,0xb3,0x31,0x9a,0x9f,0x96,0xca,0xc6,0x71,0x81,0xf9,
    0x78,0x5c,0xfd,0x3f,0x23,0xe7,0xfc,0x4f,0x57,0xff,0x27,0xba,0xfe,0x83,0x3b,0x13,
    0x63,0x93,0xde,0x99,0x6a,0x6b,0xa2,0xea,0x63,0xb5,0xbe,0x31,0x9e,0xb3,0xe5,0xdb,
    0x4a,0xa5,0xf4,0xd9,0x39,0xf2,0x59,0x22,0xde,0x64,0xc7,0x49,0xb6,0xc9,0xc9,0x9e,
    0xe7,0x64,0xc7,0xd5,0xfd,0xce,0xd8,0x3c,0x5f,0xf8,0x6e,0xb2,0x77,0x9e,0xb3,0xd3,
    0x2e,0x3b,0x55,0x67,0x67,0xbc,0xb3,0xd3,0xee,0xec,0x5c,0xe8,0xec,0xc0,0xe6,0x78,
    0x37,0x17,0x17,0xe7,0xfc,0xce,0xea,0x42,0x37,0x17,0x13,0x64,0xfb,0xe2,0x86,0x31,
    0x4f,0x74,0x73,0x31,0xa7,0xc6,0xef,0xb6,0xe0,0x97,0x09,0xf2,0x93,0xad,0xc7,0xcb,
    0xb4,0x1f,0x58,0x4c,0x5d,0x9e,0x13,0x83,0xce,0xf0,0x26,0xf6,0xe9,0x0a,0xb7,0xc6,
    0x2f,0x57,0xae,0x38,0x49,0xdc,0x95,0x9b,0xe0,0x1e,0xd1,0x9c,0x5d,0x9d,0x13,0x83,
    0xbe,0xbd,0x43,0x87,0xef,0x85,0xf1,0x6d,0x98,0xdd,0x3f,0xbe,0x36,0xa7,0x1c,0xf0,
    0xfa,0x77,0x04,0x85,0xdd,0xfa,0x37,0xa2,0xce,0xee,0xb5,0x0d,0x76,0xaf,0x97,0x5d,
    0xb4,0x6d,0x76,0x6e,0xc8,0x89,0x37,0xda,0x99,0xec,0xec,0xdc,0x20,0x3b,0x83,0x9b,
    0xb8,0x47,0xde,0x2c,0x0e,0xe3,0x47,0x7b,0x86,0xdf,0xea,0xf0,0xc9,0x79,0x79,0xb6,
    0xbc,0x2d,0xa7,0x4e,0xc5,0x3d,0x27,0xb9,0x3d,0x27,0xde,0xe6,0x9e,0x4f,0xde,0x91,
    0x13,0x5f,0xe9,0xce,0xa5,0x77,0x4a,0xb7,0xc9,0xe9,0xde,0x95,0x13,0xf7,0xcf,0x36,
    0xa7,0xe7,0xc4,0x67,0xb9,0x67,0x9b,0x77,0xe7,0xb4,0x39,0xdd,0xf5,0xe5,0x5e,0xd9,
    0xab,0x3a,0x7b,0x33,0x72,0xe2,0x6d,0x4e,0xf7,0xbe,0x9c,0xfa,0x33,0x9c,0xee,0x83,
    0x39,0xc7,0xe8,0xc7,0xf1,0x50,0x4e,0xdc,0x8f,0xe3,0x0f,0x39,0x71,0x3f,0x8e,0x47,
    0xa4,0xeb,0xc7,0xf1,0x68,0x4e,0xdc,0x8f,0xe3,0xb1,0x9c,0xb8,0x1f,0xc7,0xcc,0x9c,
    0x36,0x1f,0x73,0x7d,0x79,0x42,0xf6,0xfc,0x38,0x9e,0xcc,0x89,0xfb,0x71,0xfc,0x31,
    0xa7,0x3e,0x38,0xbb,0x5f,0xbb,0x59,0xca,0xf1,0xfd,0x51,0xb1,0xbf,0xb9,0xde,0x2f,
    0xc1,0xaf,0xc5,0xc5,0x57,0xb5,0x8d,0xe5,0x0c,0xff,0x87,0x70,0x60,0xe0,0xec,0x5a,
    0xa5,0x63,0x4a,0x0e,0x7a,0xc8,0x33,0xdb,0xb9,0xf7,0x61,0xc0,0x6d,0x5b,0x94,0xae,
    0x6a,0x67,0xdb,0xb4,0xdc,0x33,0x77,0x4c,0x79,0x3e,0xdb,0x70,0xae,0x48,0x79,0x3e,
    0xb3,0xfa,0xf7,0xd3,0xf2,0x7c,0x86,0x75,0xd7,0x39,0xa5,0x0e,0xe4,0xc0,0xd9,0x7a,
    0xdc,0x35,0xe5,0xbc,0x5a,0x7d,0xf7,0x94,0xfe,0x99,0xa8,0xf5,0xfe,0x5c,0x4e,0x19,
    0xe0,0xb6,0x66,0xe7,0x0b,0x7b,0xce,0xed,0x0d,0x0b,0x72,0xca,0x78,0x6c,0x71,0xce,
    0x76,0x9f,0x93,0x3d,0x60,0x2f,0xe6,0xc4,0x17,0x38,0x6c,0x45,0x4e,0x9b,0x0b,0x5c,
    0xee,0x59,0x99,0x53,0x16,0xdc,0x65,0xc2,0x5e,0xca,0x89,0xe3,0x1b,0xd5,0x4b,0x84,
    0xbd,0x9c,0x13,0xc7,0x77,0xaa,0x63,0x74,0x6d,0xf0,0x4a,0x4e,0xdc,0xde,0x33,0x5d,
    0x95,0x97,0x67,0x7b,0x70,0x6b,0xdc,0xbd,0x69,0xcc,0xcd,0xab,0x39,0x65,0xec,0xfa,
    0xea,0xf5,0x9c,0xd8,0x28,0x17,0x23,0x6f,0x08,0xb3,0x77,0x5f,0xeb,0xef,0x9c,0xe5,
    0x94,0x05,0x67,0x71,0xf8,0x66,0x4e,0xdc,0xbf,0x2b,0xb0,0x2e,0x27,0xfe,0x86,0xe2,
    0x66,0x3b,0xcd,0x67,0x57,0xbd,0xef,0xd3,0xdd,0xcd,0x39,0xae,0x0b,0xba,0x15,0xf5,
    0xee,0x92,0xe9,0xe6,0xde,0x9d,0xea,0x91,0xf2,0xda,0x60,0x8d,0xf6,0x2d,0x93,0xe9,
    0xee,0xde,0x6f,0xda,0x47,0xd7,0x16,0xb0,0x0d,0xf9,0x6e,0x2e,0x36,0x7b,0xa6,0xe4,
    0xaf,0xab,0x94,0xef,0x25,0x59,0x5f,0xb6,0x93,0x0d,0xc8,0xcd,0xab,0xb1,0xcf,0x88,
    0xb7,0x9e,0xea,0x8b,0x9d,0xed,0xf6,0xd5,0x7d,0x70,0x7c,0x4f,0x62,0x63,0xee,0x95,
    0x52,0x07,0xdc,0xc9,0xca,0x83,0xfb,0xa5,0xee,0xbc,0xa7,0x67,0xac,0x26,0x7f,0xa0,
    0x62,0x7e,0xa6,0xf3,0x51,0x9f,0x94,0x6b,0xe0,0x40,0x7d,0x5b,0x84,0x77,0xff,0x4e,
    0xaa,0x11,0x5f,0xa4,0xfd,0xd3,0xf0,0x93,0x6b,0xb4,0x7f,0x92,0xf6,0x4a,0xf3,0xcf,
    0xa1,0x29,0xfb,0x65,0xcf,0xab,0xfa,0x39,0xbf,0x82,0xeb,0x5b,0x94,0x7e,0x1a,0x6f,
    0x5f,0xf7,0x6d,0xd1,0xcf,0xf4,0x7d,0xc7,0x1a,0x77,0x5f,0xaf,0x7f,0x4a,0xfc,0x72,
    0x8d,0xfb,0xe7,0x29,0xb1,0x21,0x95,0x52,0xef,0x30,0xe9,0xb5,0x38,0xbd,0x5f,0xa4,
    0xc4,0x4d,0xef,0xf0,0x94,0xd8,0x10,0xf7,0xcd,0xd3,0x80,0x94,0xf6,0x0e,0x77,0xdf,
    0x3c,0x1d,0x91,0xf2,0xdb,0x95,0x01,0x7a,0xe7,0x0e,0xdf,0x2e,0xfe,0x52,0xdf,0x2d,
    0xda,0xb5,0xc2,0xd1,0x29,0xe5,0xfc,0xf5,0xdc,0x60,0x61,0x4d,0xae,0x5f,0xc7,0xab,
    0x5f,0xad,0xae,0x5f,0x2d,0x29,0x71,0x3b,0x03,0x0d,0x4d,0xf9,0xdd,0x4d,0x8b,0xbb,
    0xcf,0x77,0x42,0xca,0x36,0x60,0x13,0xfc,0xf0,0x42,0x17,0x7d,0x00,0x7e,0xb2,0xae,
    0x57,0xcd,0x7f,0xfd,0xd2,0x8d,0xbf,0x7b,0xc2,0xef,0x3f,0x8a,0x5e,0xfc,0xb8,0x28,
    0xff,0x0f,0x11,0xc7,0x2d,0x7e,0x78,0x45,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//     uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     bool punchthrough;
//     result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//     uint minColor565 = packColorToRGB565(minColor);
//     uint maxColor565 = packColorToRGB565(maxColor);
//     if(minColor565 > maxColor565){
//         swap(minColor565, maxColor565);
//     }
//     uint indices = 0;
//     if(minColor565 != maxColor565){
//         indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//     }
//     else {
//         indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//     finalResult . r = maxColor565 |(minColor565 << 16);
//     finalResult . g = mask;
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
