// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x5b,0x09,0x94,0x55,0xc5,
    0xb5,0x7d,0xfd,0xfa,0xdd,0x5b,0x75,0x1f,0x6a,0xb4,0x71,0x9e,0x91,0x28,0xa8,0x88,
    0x38,0x25,0xfa,0x11,0x51,0x23,0xa0,0x68,0x04,0xc5,0x09,0x68,0x1a,0x54,0x5a,0x6c,
    0x8d,0xb6,0x51,0xbf,0x71,0x68,0x82,0x4a,0x13,0x87,0x38,0x6b,0xbe,0x8a,0x43,0x9c,
    0x51,0x1c,0xc9,0xcf,0x12,0x35,0x24,0xa8,0x88,0x38,0x84,0x28,0x68,0x0b,0x08,0xa2,
    0x38,0x81,0x1a,0x4d,0x8c,0xf1,0xc7,0x68,0xa2,0xb9,0xfb,0xed,0x7d,0xb8,0x87,0xa7,
    0xbf,0xd7,0xaa,0xd5,0xaf,0xf6,0x3e,0xe7,0x54,0xd5,0xa9,0x53,0xa7,0xea,0x4e,0x8d,
    0xe5,0x9e,0xa1,0xd4,0xd8,0x50,0xaa,0x96,0x62,0xe9,0x83,0x6a,0xa9,0xf6,0xb7,0x5e,
    0xa9,0x5c,0x6a,0xd0,0xff,0xbe,0xfa,0xbf,0x8b,0xfe,0x0f,0xd0,0xff,0xfd,0xf4,0xff,
    0x47,0xf9,0xff,0x6e,0xa5,0xb4,0x26,0x3f,0xe4,0x90,0x11,0x87,0xf4,0x3d,0xe3,0xcc,
    0xf1,0x7d,0x77,0xdf,0xa3,0x1f,0xec,0xac,0x53,0x6a,0xac,0xd9,0x03,0xf7,0xbd,0xdc,
    0x7e,0x92,0xff,0xaf,0xe4,0xe5,0x94,0x63,0xdb,0x4e,0x05,0x3e,0x38,0x2f,0x87,0xe6,
    0xe5,0xe5,0x5c,0x60,0xdd,0xdc,0x46,0xa5,0x66,0xb3,0x54,0xda,0x57,0x3a,0x35,0x9b,
    0x39,0x3a,0xb8,0xd6,0x46,0xa9,0xb4,0xa9,0xea,0x87,0xaa,0xbe,0x59,0xad,0xde,0x58,
    0xd3,0x2f,0x89,0xc3,0x6f,0x70,0xdb,0xe7,0xe5,0xc0,0xbc,0xc5,0x15,0xe2,0x7a,0xf2,
    0xdf,0x6a,0xac,0x41,0x58,0xc5,0x61,0x65,0x61,0xd1,0x61,0x8d,0xc2,0xd6,0x72,0x58,
    0x45,0xd8,0xba,0x0e,0x4b,0x84,0xad,0xef,0xb0,0x54,0xd8,0xc6,0xea,0xa7,0xb5,0x81,
    0x7e,0xbe,0x90,0x1b,0xd9,0xa6,0x54,0xf4,0x1b,0xf5,0x1e,0xae,0x7e,0x70,0xb2,0x26,
    0x8f,0x7a,0x8f,0xd5,0x3e,0x69,0xac,0xd5,0x37,0x11,0x37,0x3c,0xe1,0x98,0x37,0x11,
    0xd7,0x91,0x51,0xaf,0x7b,0xde,0x1a,0xda,0xeb,0x91,0x63,0x18,0x07,0x7e,0x6f,0x90,
    0xcb,0xa3,0x5f,0x5b,0xcb,0xd6,0x46,0x79,0x3d,0x94,0xd8,0x57,0xe3,0xbb,0x89,0x2f,
    0xd5,0xfe,0x57,0x6a,0x63,0x0f,0xf2,0x39,0xe4,0xd7,0xd3,0xef,0xb2,0xf8,0x26,0xf1,
    0xeb,0xa9,0xbe,0x91,0xea,0xb0,0xb9,0x61,0xde,0xf2,0x16,0xb2,0x07,0xdd,0x2d,0xf3,
    0xff,0xa8,0x37,0xaa,0xbe,0x9d,0x6c,0x35,0x4a,0xb7,0xaf,0x74,0x83,0xf8,0x9d,0xc5,
    0x57,0x6a,0xbe,0x65,0x1c,0x02,0xdf,0x4d,0xf6,0x2b,0xd2,0x1b,0xa4,0xf1,0xc0,0x5e,
    0x7f,0xd5,0x07,0x0b,0xdb,0x51,0x63,0x1e,0xaa,0xb9,0x35,0xfe,0x50,0xc7,0xa3,0x8d,
    0x61,0x6e,0xcc,0xc3,0xc5,0x75,0x73,0xfc,0x08,0xb5,0x67,0xf5,0x91,0xb5,0xb8,0x2e,
    0xec,0x37,0x3b,0x1e,0xf5,0x96,0xba,0xf6,0x5b,0xe5,0x33,0xd3,0x6f,0xab,0xe3,0xdb,
    0xe5,0x07,0xe3,0x3b,0xd4,0x5f,0xab,0x4f,0x54,0xcc,0x59,0xfd,0xe7,0x8a,0xad,0x3e,
    0xb9,0xb7,0xe0,0xa7,0x49,0x1a,0x43,0x87,0x64,0x7f,0xee,0x64,0x2f,0xc8,0xcb,0x37,
    0xae,0x7e,0x59,0x5d,0x5f,0xae,0x76,0x6d,0xa3,0x2f,0x77,0xe5,0x65,0x27,0x57,0xbf,
    0x5f,0x6d,0x59,0x7d,0x86,0x62,0xdd,0xea,0x33,0x5d,0xdf,0x50,0x9f,0x55,0xe2,0x9a,
    0xb0,0xfa,0x53,0x79,0xd9,0x2a,0x2f,0x9b,0xe7,0xf5,0x85,0xf9,0xff,0xdd,0xd4,0x47,
    0xe3,0x5f,0xa9,0xe5,0x0b,0x8e,0x05,0xdc,0xab,0xf2,0xd7,0x2c,0xcd,0xdb,0x2b,0x4e,
    0xb6,0x4b,0x73,0x6f,0xf5,0xd7,0xf2,0x92,0xb9,0xfa,0x22,0xad,0x57,0xb3,0xb5,0x58,
    0xb6,0xba,0x24,0xbb,0xc8,0xc9,0x2e,0x51,0xac,0x99,0xec,0xeb,0x9a,0xb7,0x66,0x71,
    0x8b,0x1c,0xb7,0x54,0x5c,0xbb,0xfa,0xe5,0xed,0x2c,0x53,0xac,0x98,0xec,0x1b,0xae,
    0xff,0x4b,0xc4,0x9b,0xec,0xf2,0xbc,0x54,0x9d,0xec,0x9b,0xae,0x7f,0x43,0xc5,0x1b,
    0xf7,0x96,0xda,0xeb,0x92,0x1d,0xcf,0xad,0x90,0x5e,0xf3,0x77,0x70,0x6f,0xab,0xaf,
    0xd6,0xfe,0x6b,0x8e,0x7b,0xa7,0x6e,0x8c,0x9e,0x7b,0xd7,0x8d,0xb1,0x9e,0x7b,0xcf,
    0xe9,0x75,0xd5,0x71,0xef,0xab,0x2f,0xed,0x8e,0xb3,0xf1,0xae,0xd4,0xba,0x32,0xd9,
    0x55,0xc2,0x5a,0xa4,0xe3,0xed,0x7c,0xe0,0xfc,0xbb,0x44,0xfe,0x30,0xee,0x43,0x37,
    0xde,0xae,0xd5,0x5c,0xf7,0x5a,0x3c,0x7d,0xa4,0x98,0x59,0xac,0x39,0x5c,0xaa,0x39,
    0x78,0x53,0x3e,0x5c,0x21,0x9f,0xbc,0xa3,0x31,0xbe,0xa7,0x3e,0xaf,0x52,0x9b,0x1f,
    0x6a,0xdd,0x7f,0xa2,0x78,0x58,0xe8,0xfa,0xff,0x2f,0xb7,0x76,0x90,0xbb,0x36,0xa9,
    0xed,0x29,0xfb,0xee,0x6b,0xf5,0xcd,0xb8,0xc7,0x0c,0x44,0x5e,0xea,0xab,0xbc,0xdf,
    0xe8,0xe4,0xcf,0xd0,0x1e,0x64,0xf5,0x5b,0x6b,0xf5,0xf3,0x07,0x5a,0x7d,0x5a,0xad,
    0x3e,0xe9,0x00,0xab,0xdf,0x9f,0xd7,0x2f,0xda,0xf0,0xc6,0x7d,0xac,0xfe,0x40,0x5e,
    0xbf,0x63,0xd0,0x86,0xab,0xe5,0x1f,0xcc,0xeb,0x5d,0x67,0x7f,0x30,0xa0,0x4f,0xde,
    0x12,0xf2,0xe9,0x43,0x0d,0xd4,0x81,0x1c,0x38,0x93,0x9b,0x95,0xff,0x6e,0x6f,0x6a,
    0x1c,0xd8,0x5f,0xf9,0xec,0x65,0xed,0x7b,0x5b,0xe6,0xab,0xc5,0xf6,0xa7,0xff,0xaf,
    0xc0,0x17,0x6f,0x37,0x70,0x5d,0x41,0xb6,0xbf,0xea,0xef,0x08,0x03,0xff,0xae,0x7e,
    0x43,0x7e,0x87,0x7c,0xc4,0xc8,0xcd,0xdd,0xca,0xd8,0x7b,0xf9,0x7b,0x9b,0x72,0x91,
    0x5f,0xb6,0x2b,0x63,0xed,0x17,0xf5,0x5e,0xe5,0x22,0x7f,0xa0,0xde,0xbb,0x6c,0x6b,
    0x36,0xad,0xe5,0xf0,0xed,0xcb,0xd4,0x81,0x5c,0xef,0x72,0x31,0x17,0xfd,0xca,0x6b,
    0xe6,0xdc,0xdd,0xcb,0xdc,0x77,0xac,0xbe,0x77,0x99,0xe7,0x02,0xab,0x0f,0x29,0x63,
    0x1f,0x2c,0xda,0x99,0x50,0x2e,0xf2,0xd0,0x8d,0x65,0xf6,0xbd,0xc3,0xc9,0x4f,0x2d,
    0x97,0x6a,0xfb,0x97,0xd5,0x6f,0x2a,0x73,0xef,0xb2,0xfa,0xcd,0x65,0x9e,0x2d,0xac,
    0x7e,0x4b,0x99,0xe7,0x95,0x3e,0xb9,0x75,0xd8,0xbb,0xb5,0x5c,0xac,0x81,0x65,0xca,
    0x8b,0xb0,0x09,0x3b,0xd0,0xbd,0xa5,0x4c,0xdf,0xdd,0x56,0x66,0x9c,0x41,0x07,0x63,
    0x46,0xdc,0x2c,0x29,0x73,0x5d,0x58,0x31,0xfc,0xf5,0x32,0x63,0xd0,0x8a,0xb5,0xbd,
    0x55,0x23,0x4f,0x57,0x56,0xdf,0xa6,0x91,0x1b,0x8a,0xd5,0xcf,0x69,0xe4,0x99,0xc0,
    0xea,0x93,0xf3,0x7a,0x93,0xab,0x4f,0xcb,0xeb,0x6b,0xcb,0x17,0x47,0x55,0xd8,0x9f,
    0x8e,0x5a,0xbb,0x49,0xed,0xf7,0xd1,0x15,0xae,0xb7,0xa1,0x0e,0x3b,0xa6,0xc2,0xb5,
    0xb9,0xbb,0x9b,0x93,0x91,0x15,0xee,0xe9,0x26,0x33,0xaa,0xc2,0x35,0x0d,0xdc,0x64,
    0x46,0x57,0x10,0x23,0x85,0x4c,0x73,0x85,0xed,0x8f,0x76,0x32,0x63,0xf2,0xdf,0x7b,
    0x3b,0x99,0x96,0x0a,0xfb,0x3c,0xc6,0xc9,0x8c,0xcd,0x7f,0x0f,0x77,0x32,0xe3,0x2a,
    0xdc,0x9b,0xc6,0x3a,0x99,0x63,0x75,0x96,0xb2,0xfa,0x71,0x79,0xfd,0x24,0xa7,0x73,
    0x7c,0x85,0x32,0xc7,0x39,0x9d,0xf1,0xf9,0xef,0x9d,0xfd,0x5e,0x5d,0xe1,0xdc,0x99,
    0xce,0x09,0x15,0xca,0x00,0xc7,0x5c,0xc3,0x5f,0x13,0x2a,0xf4,0x11,0x7c,0x82,0x31,
    0x63,0x4c,0xe8,0x33,0xfa,0x84,0x36,0xa0,0x83,0xb9,0x3e,0x49,0xbe,0x85,0x0e,0x72,
    0xc4,0x3d,0xf9,0xff,0x5d,0xb4,0xff,0x6e,0x92,0xaf,0xa0,0x79,0x15,0xee,0x1d,0x49,
    0x69,0xcd,0x3f,0xa5,0x8d,0x3c,0x9e,0x1b,0x4b,0xcf,0xe5,0x32,0xf3,0x64,0xef,0xf9,
    0x0a,0x71,0x60,0xfd,0x55,0x7f,0x41,0x18,0xec,0x1d,0xa4,0xf3,0x60,0x43,0x9d,0x3d,
    0x3b,0xdf,0xc2,0xc6,0x50,0x35,0x06,0xd9,0xfe,0xaa,0x1f,0x9c,0x14,0x79,0xaa,0x76,
    0x1e,0x4a,0x2c,0xb6,0xb9,0x26,0x71,0xce,0x04,0xd6,0xa6,0xb3,0x8b,0xf9,0xe6,0xa8,
    0x2a,0x63,0xc4,0xc7,0xc9,0xd1,0x55,0xc6,0x4e,0xab,0x8f,0x9d,0x2a,0xd7,0x46,0xbb,
    0x3b,0xb3,0x8c,0xac,0xf2,0x6c,0xe2,0x8b,0xc5,0xfd,0x28,0x27,0xdf,0xee,0xf0,0xd1,
    0xce,0x76,0xab,0xc3,0x9b,0xab,0x8c,0x4b,0x2b,0x86,0x8f,0xa9,0x32,0x6f,0x58,0xb1,
    0xf1,0xb4,0x54,0x19,0xef,0x1d,0xab,0xe3,0x9e,0xf2,0x63,0xab,0xdc,0x63,0xac,0x34,
    0xe4,0xfe,0x07,0x7e,0x69,0x95,0xbf,0xd1,0xef,0xd9,0x55,0xce,0xe5,0xbb,0x55,0xce,
    0x25,0x96,0xde,0x0f,0xf2,0x71,0x96,0x75,0x06,0x2c,0x09,0xfb,0x22,0x47,0x12,0x9d,
    0x39,0xb1,0xb7,0xec,0x19,0x19,0x0b,0xfd,0x75,0x6e,0x9e,0x94,0x14,0x75,0xe4,0x84,
    0x1b,0xeb,0xea,0xd3,0x5d,0x1d,0x71,0xf4,0x94,0xab,0xe3,0xac,0xbc,0x54,0xb1,0xf5,
    0x8f,0xbc,0xb5,0xc3,0x34,0x7f,0x5f,0xe5,0xbf,0x71,0x0e,0x3c,0x3c,0x61,0xfb,0xf8,
    0x3f,0x40,0x67,0xed,0x91,0x09,0xcf,0xc5,0xc3,0x72,0x2d,0xe4,0xcd,0x51,0x09,0xb1,
    0x91,0x49,0x11,0x73,0x1d,0xba,0x26,0x18,0x9d,0x90,0xef,0xd4,0xfc,0x8d,0x49,0x88,
    0x61,0xbe,0xf7,0xcb,0x31,0xac,0xc3,0x96,0x84,0xe7,0x68,0xb4,0x37,0x40,0x71,0x33,
    0x36,0x21,0xfe,0x74,0x2e,0x83,0xfa,0xb8,0x84,0xd8,0x08,0xd9,0xae,0xad,0xd1,0x84,
    0xf8,0x3c,0xc9,0x8c,0x97,0xcc,0x48,0x27,0xd3,0x9a,0x10,0x87,0x0c,0xea,0x13,0x12,
    0xea,0xe1,0xdc,0xd0,0x29,0xec,0xc4,0x84,0x73,0x04,0xee,0x30,0x61,0x27,0x25,0xec,
    0x6b,0x6d,0x97,0x15,0x76,0x72,0x42,0x1c,0xf2,0x87,0xe7,0x08,0xc6,0xb3,0x34,0x23,
    0x6e,0xb2,0xd6,0xce,0xa9,0x6a,0xa7,0xd5,0xb5,0xd3,0xae,0xfa,0xa9,0xae,0x9d,0x9f,
    0x4a,0xb7,0xc1,0xb5,0x73,0x7a,0x42,0xbc,0xdd,0xb5,0xb3,0x3c,0x23,0x8e,0xf6,0x1a,
    0x5c,0x3b,0xff,0x9d,0x70,0x8c,0x88,0xed,0x39,0xc2,0x7e,0x26,0x0c,0x6d,0x0d,0x97,
    0xdf,0xcf,0x4e,0x28,0x0b,0xee,0x7c,0x61,0xe7,0x26,0xb4,0x0b,0x0e,0x73,0x81,0xbd,
    0xf8,0xf6,0x0a,0xf7,0xe7,0x76,0xcd,0x05,0xec,0xdd,0x51,0x21,0x6e,0x32,0x77,0x4a,
    0xa6,0xd9,0xc9,0xdc,0x55,0x21,0x6e,0xed,0xdd,0x5d,0xa1,0x1e,0xf0,0x87,0x73,0x0c,
    0xf9,0x6a,0x5a,0x85,0x6d,0x82,0x9b,0x9a,0xeb,0x21,0xe6,0xef,0x15,0x8e,0xd8,0x9b,
    0xae,0xa0,0xff,0x32,0xe7,0x80,0xdf,0x97,0x17,0x60,0x88,0x3f,0xfc,0xfe,0x67,0xfe,
    0xff,0x30,0xc5,0x23,0xf0,0x39,0x6a,0xeb,0x61,0xd9,0x45,0xbe,0x98,0x27,0xec,0x7f,
    0x85,0x21,0x5f,0x98,0xaf,0x1f,0xad,0x10,0x2f,0xb9,0x39,0x99,0x59,0xe1,0x38,0xc0,
    0x99,0xdc,0xe3,0x92,0xf3,0x73,0xf2,0x44,0x85,0xb2,0xe0,0x4c,0xf7,0x0f,0xd2,0x05,
    0x66,0x72,0x4f,0x55,0x88,0x3f,0x5a,0x29,0xe6,0x63,0xae,0x7c,0xd1,0x2a,0x7f,0x21,
    0xe7,0xbe,0xa8,0x7c,0x6b,0x6d,0xce,0xaf,0x70,0x1c,0x0d,0xae,0x6f,0x2f,0x55,0x88,
    0xcf,0x75,0x72,0x0b,0x24,0xe7,0xe3,0x72,0x61,0x85,0xb2,0x0b,0xdc,0x1c,0xbd,0xa2,
    0x39,0x6a,0x75,0x73,0xf4,0x6a,0x85,0xb8,0xe9,0x75,0x55,0xa8,0x0b,0x7c,0x7c,0x2e,
    0x83,0xbd,0xe1,0x35,0xf5,0x6d,0x6c,0x2e,0x83,0x1c,0xb5,0x48,0x18,0x64,0xf7,0xc9,
    0xe7,0x68,0xa9,0x7c,0x63,0xed,0x3c,0x93,0xb0,0x9d,0x59,0xae,0x9d,0xb9,0x09,0xf1,
    0xe9,0xb9,0x0c,0xe6,0xf8,0xd9,0x84,0xd8,0x50,0xe5,0x98,0xae,0xa4,0x98,0x67,0x70,
    0xf3,0xf2,0xb2,0x40,0xf3,0x3a,0x4f,0x6b,0x03,0xeb,0xf9,0xab,0xc0,0xf6,0x1b,0x6a,
    0x71,0xcc,0x5c,0x9f,0x44,0xe2,0xbe,0x3c,0xad,0xbe,0xa6,0x91,0xfc,0x24,0xad,0x0f,
    0x60,0x59,0x24,0x3e,0xb2,0x5a,0xd8,0xed,0x16,0x89,0xe3,0xef,0x19,0x61,0x6b,0x45,
    0xe2,0xb8,0xde,0x35,0xb9,0x75,0x24,0xd7,0xe0,0xe4,0xbe,0x17,0x89,0xe3,0xba,0x73,
    0xae,0xb0,0x75,0x23,0xf5,0xc1,0x99,0x6e,0x93,0x74,0xcb,0x4e,0xb7,0x7b,0x24,0xde,
    0xe1,0x74,0xd7,0x8f,0xd4,0xef,0xee,0x74,0x37,0x94,0x6e,0xa3,0xd3,0xdd,0x28,0x12,
    0x1f,0xe6,0x74,0x37,0x8e,0xd4,0xdf,0xc8,0xe9,0x7e,0x2d,0x9f,0x95,0x9c,0xcf,0xb6,
    0x88,0xc4,0x7d,0x31,0x9f,0x6d,0x19,0xc9,0x7b,0x9f,0xf5,0x88,0xc4,0xbd,0xcf,0x7a,
    0x46,0xe2,0xde,0x67,0xdf,0x8f,0xc4,0xbd,0xcf,0xb6,0x93,0x9c,0xf7,0x59,0xaf,0x48,
    0xdc,0xfb,0xac,0x77,0xa4,0x7e,0x2f,0xd7,0xf7,0x1d,0xa4,0xeb,0x7d,0xb6,0x63,0x24,
    0xee,0x7d,0xd6,0x27,0x52,0x7f,0x47,0xa7,0xdb,0x57,0xba,0xde,0x67,0x3b,0x47,0xe2,
    0xde,0x67,0xfd,0x22,0xf5,0xc1,0x21,0x57,0x61,0xff,0xc2,0x0d,0x12,0xf8,0x12,0x1c,
    0x62,0x1c,0xfb,0x29,0x30,0x5b,0x87,0x03,0x22,0xf3,0x21,0x72,0xc0,0x85,0xc2,0xf6,
    0x89,0xbc,0xbf,0x01,0x0e,0x6b,0x01,0xd7,0x1d,0x03,0x23,0xf7,0xe2,0x36,0xb7,0x8f,
    0xed,0x1b,0x89,0xbf,0x98,0x6b,0xa1,0xbe,0x5f,0x24,0x76,0xbf,0xce,0x3a,0xb6,0x4f,
    0xed,0x1f,0xc9,0x99,0xde,0x01,0x75,0x7a,0x83,0x22,0xb1,0x19,0x3a,0x4f,0x98,0xde,
    0xe0,0x48,0xce,0xf4,0x0e,0xac,0xd3,0x3b,0x28,0x12,0x9b,0x59,0xa7,0x37,0x34,0x92,
    0xb3,0x1c,0x75,0x48,0xe4,0x98,0xb0,0x8e,0x6d,0x3c,0x3f,0xd6,0x78,0x0e,0x71,0xf6,
    0x0f,0x8d,0xc4,0x6d,0xff,0x19,0x2e,0x3d,0xdc,0x9b,0xb1,0x36,0x0f,0x8b,0x94,0x03,
    0xd7,0xea,0xda,0x3c,0x3c,0x92,0x33,0x1f,0x1e,0x11,0x79,0x1e,0x1e,0xe0,0xfa,0x71,
    0x54,0x24,0xee,0xfb,0x71,0xb4,0xfa,0x71,0x94,0xeb,0xc7,0x31,0x91,0xb8,0xf5,0x63,
    0x94,0xf4,0xd0,0x0f,0x3b,0x33,0x8c,0x8e,0x94,0x1b,0x15,0x8b,0x33,0x42,0x73,0x24,
    0xde,0xe6,0xfa,0x35,0x26,0x12,0xc7,0xdc,0xe3,0x6c,0xf5,0x51,0xad,0xed,0xb4,0x76,
    0x0d,0x37,0x2e,0xf2,0xbc,0x05,0x7f,0x1d,0x1e,0x8b,0x1c,0x77,0x6c,0x24,0x67,0x63,
    0x39,0x3e,0xd2,0x0e,0xce,0x15,0xcf,0x0a,0x1b,0x1f,0x29,0x77,0xbc,0x8b,0xa5,0x13,
    0x23,0x71,0xcc,0x9b,0xe5,0xe1,0xb6,0xc8,0xf9,0x07,0xb7,0x56,0x1e,0x78,0xb5,0xb3,
    0x86,0xd6,0xd0,0x4e,0xe2,0x57,0xea,0xba,0xcd,0xe2,0xfd,0xa7,0x91,0xeb,0xbc,0xd1,
    0xad,0xf3,0xf3,0x22,0x71,0x5f,0x6c,0x9d,0x77,0x44,0xf2,0x7e,0x9d,0x4f,0x8a,0xc4,
    0xfd,0x3a,0xbf,0x20,0x12,0xf7,0xeb,0xfc,0xc2,0x48,0xdc,0xaf,0xf3,0x4e,0xc9,0xf9,
    0x75,0x3e,0x25,0x12,0xf7,0xeb,0xfc,0x17,0x91,0xfa,0x53,0xdc,0x5a,0xbd,0x58,0xba,
    0x7e,0x9d,0x5f,0x12,0x89,0xfb,0x75,0x7e,0x69,0xa4,0xfe,0x25,0x4e,0xf7,0x32,0xe9,
    0xfa,0x75,0x7e,0x79,0x24,0xee,0xd7,0xf9,0x15,0x91,0xfa,0x97,0x3b,0xdd,0x33,0xe5,
    0xb3,0xb2,0xf3,0xd9,0xb5,0x91,0xb8,0x2f,0xe6,0xb3,0xeb,0x22,0x79,0xef,0xb3,0xeb,
    0x23,0x71,0xef,0xb3,0x1b,0x23,0x71,0xef,0xb3,0xa9,0x91,0xb8,0xf7,0xd9,0xcd,0x92,
    0xf3,0x3e,0xbb,0x25,0x12,0xf7,0x3e,0xbb,0x35,0x52,0xff,0x16,0xd7,0xf7,0xdb,0xa4,
    0xeb,0x7d,0x76,0x7b,0x24,0xee,0x7d,0x76,0x47,0xa4,0xfe,0xed,0x4e,0xf7,0x2e,0xe9,
    0x7a,0x9f,0xdd,0x1d,0x89,0x7b,0x9f,0xdd,0x13,0xa9,0x7f,0xb7,0xcb,0x8d,0x67,0x45,
    0xfa,0x12,0x1c,0xce,0x5f,0x5d,0xda,0xa7,0x17,0xb8,0x7d,0xfa,0x81,0xf8,0xed,0x7d,
    0xfa,0xd1,0x48,0xdc,0x17,0xf3,0xeb,0xcc,0x48,0xde,0xfb,0xf5,0x89,0x48,0xdc,0xfb,
    0x75,0x56,0x24,0xee,0xfd,0xfa,0xfb,0x48,0xdc,0xfb,0x75,0xb6,0xe4,0xbc,0x5f,0x9f,
    0x8c,0xc4,0xbd,0x5f,0x9f,0x8a,0xd4,0x7f,0xd2,0xf9,0x66,0x8e,0x74,0xbd,0x5f,0x9f,
    0x89,0xc4,0xbd,0x5f,0xe7,0x46,0xea,0x3f,0xe3,0x74,0xe7,0x49,0xd7,0xfb,0xf5,0xb9,
    0x48,0xdc,0xfb,0xf5,0xf9,0x48,0xfd,0xe7,0x9c,0xee,0xc3,0xf1,0xdb,0xfb,0xf4,0x9f,
    0x22,0x71,0x5f,0xcc,0x67,0x2f,0x45,0xf2,0xde,0x67,0x0b,0x23,0x71,0xef,0xb3,0x57,
    0x23,0x71,0xef,0xb3,0xae,0x48,0xdc,0xfb,0x6c,0x91,0xe4,0xbc,0xcf,0x16,0x47,0xe2,
    0xde,0x67,0x4b,0x22,0xf5,0x17,0xbb,0xbe,0x2f,0x95,0xae,0xf7,0xd9,0xb2,0x48,0xdc,
    0xfb,0xec,0x8d,0x48,0xfd,0x65,0x4e,0xf7,0x4d,0xe9,0x7a,0x9f,0xbd,0x15,0x89,0x7b,
    0x9f,0xad,0x88,0xd4,0x7f,0xcb,0xc5,0xe2,0x8c,0x48,0x5f,0xae,0xa8,0x8b,0x45,0xfc,
    0xff,0x3c,0xf7,0x21,0xf2,0xe6,0x6d,0x55,0xe6,0x4e,0x9c,0x23,0x91,0x2f,0x17,0x88,
    0x83,0xfe,0xb1,0x55,0xc6,0x33,0x38,0xd8,0xf2,0x31,0xbc,0x28,0x21,0x6f,0xd7,0x56,
    0x35,0x7f,0x24,0xc4,0xdb,0xb4,0x17,0x61,0x3f,0x78,0x3d,0xe1,0xf5,0xf2,0xe2,0xa4,
    0xd8,0x0b,0x96,0x26,0xc4,0x6d,0x2f,0x5a,0x96,0x10,0x6b,0x75,0xd7,0x64,0x6f,0x24,
    0xc4,0x5b,0xb4,0xef,0xc0,0xfe,0xf2,0x84,0xb8,0x9d,0x93,0x57,0xe8,0x9c,0xdc,0xa2,
    0x73,0xf2,0x2a,0x77,0x4e,0x06,0xf7,0x76,0x5e,0x56,0x6a,0xcc,0x6f,0xbb,0xeb,0xde,
    0xf7,0xd4,0x4f,0x3c,0x8f,0x31,0x5b,0xef,0x27,0xc4,0xe1,0x53,0xf8,0x6a,0x95,0xf4,
    0xa0,0xef,0xeb,0xab,0xe4,0x1f,0xe8,0xb4,0x56,0xa9,0x07,0xdb,0xb8,0x07,0x0b,0xd9,
    0xfb,0x65,0xef,0xa3,0xba,0xbe,0x7d,0xea,0xfa,0x06,0xee,0xcf,0x79,0xf9,0x54,0x36,
    0xff,0xec,0xfa,0xf6,0x97,0xef,0xe8,0xdb,0x5f,0x13,0xe2,0xd6,0x37,0xd3,0xfb,0xd4,
    0xf5,0xe5,0x6f,0x09,0xdb,0x44,0xff,0xfe,0x2a,0xfb,0x68,0xf7,0x37,0xa1,0x68,0x17,
    0x32,0x9f,0xe5,0xa5,0x9c,0x52,0xff,0xb3,0x9a,0xcd,0x58,0xbb,0x47,0xf1,0xb9,0xe6,
    0xd3,0xe6,0xd4,0x4a,0xa7,0xfa,0xf5,0x0f,0xdd,0x4b,0xc0,0x1c,0x0c,0xd7,0xbd,0x9c,
    0x2f,0x12,0xe2,0x56,0xb0,0xb7,0x03,0xff,0x67,0xc2,0x7b,0xc9,0x5f,0xe8,0x7e,0x04,
    0xb0,0x2f,0x13,0xb6,0x01,0xae,0x43,0xf7,0xec,0xbf,0x4a,0x88,0x63,0xec,0xa8,0x7f,
    0x9d,0x10,0xc3,0xbd,0xa3,0x4e,0x61,0x0d,0x29,0x71,0xdc,0x67,0xc2,0xd8,0x31,0x1e,
    0xf4,0x1d,0x63,0xb0,0xf3,0x53,0x92,0xd2,0x67,0xb8,0x0f,0x3d,0xcb,0x9d,0x53,0xd2,
    0x94,0x9c,0xd5,0x33,0xc9,0xbd,0x90,0xd7,0x50,0xaf,0xa6,0xc4,0xee,0xd7,0xbd,0x2e,
    0xb3,0xb7,0xb6,0xe4,0x86,0xd4,0xd9,0x5b,0x27,0x25,0x67,0xfa,0x4d,0xd2,0x9f,0x59,
    0xa7,0xbf,0x81,0xf4,0x97,0x95,0xd6,0xd4,0xdf,0x30,0x25,0x67,0xfa,0x9b,0x4a,0x7f,
    0xa8,0xf4,0xed,0x7c,0xb3,0x45,0xca,0xbe,0xa3,0x7f,0x86,0x6d,0x9d,0xb2,0xfd,0x26,
    0x87,0xf5,0x4c,0x69,0x73,0xd3,0xb4,0x58,0x23,0xdb,0xa6,0xd4,0x7f,0x40,0xb1,0xb3,
    0x5d,0x4a,0x0c,0xf7,0xe0,0x11,0x0f,0x33,0x5c,0x3c,0x80,0xeb,0x95,0x97,0x29,0x8a,
    0x87,0x5e,0xce,0xa7,0x3b,0x68,0x0c,0xf7,0x97,0xd6,0x3c,0x93,0xee,0x98,0x92,0x33,
    0xb9,0xbe,0xce,0xf7,0x5e,0x6e,0xe7,0x94,0xdc,0x33,0xea,0x6b,0xbf,0x94,0x58,0xab,
    0x72,0x16,0xb0,0x5d,0x52,0xda,0xeb,0xe7,0xec,0xed,0x2e,0x7b,0xf5,0xe7,0xf6,0x3d,
    0x52,0x72,0x26,0xb7,0xa7,0xe4,0xea,0xcf,0xe9,0x7b,0xa5,0xe4,0x4c,0x6e,0x6f,0xc9,
    0x2d,0xaa,0x93,0x1b,0x90,0x92,0x33,0xb9,0x7d,0x25,0x37,0xb4,0x4e,0x6e,0xbf,0x94,
    0x9c,0xc9,0x1d,0x20,0xb9,0xe6,0x3a,0xb9,0x41,0x29,0x39,0x93,0x3b,0x50,0x72,0x76,
    0xbf,0xd4,0x72,0xf7,0x41,0x29,0xb9,0x16,0x97,0xbb,0x7f,0x9c,0x12,0x47,0x8e,0xc4,
    0x99,0x1a,0xf7,0x23,0xf1,0x4c,0xc3,0x72,0xe8,0xb0,0x94,0xf7,0x28,0x21,0x67,0x39,
    0x74,0x78,0x4a,0xdc,0xf2,0xf1,0xe1,0x29,0xd7,0xae,0xbf,0xcf,0x71,0x44,0xca,0x7b,
    0xaf,0xb8,0x0e,0xb3,0x33,0xfe,0x91,0x29,0x65,0xc1,0x59,0xce,0x39,0x2a,0x25,0x7e,
    0x99,0x1b,0xcf,0xd1,0x29,0xf1,0xd5,0xd7,0x06,0xd2,0x83,0xad,0xd5,0xd7,0x06,0x29,
    0xf1,0x35,0xae,0x0d,0x52,0xe2,0x36,0xc7,0xe3,0x52,0xda,0x02,0x8e,0xf8,0x6b,0x4d,
    0x8b,0xf8,0x43,0xfe,0x3c,0x0e,0x31,0xa1,0xf8,0xc3,0x6f,0xcb,0x79,0xe3,0x53,0xea,
    0xb6,0x2a,0xe7,0x99,0x0c,0xfe,0x5b,0xce,0xeb,0xa8,0x32,0x07,0x23,0x6e,0x21,0xef,
    0xf5,0x27,0x48,0x7f,0xa5,0xf2,0x6f,0xa7,0x6b,0x17,0xdc,0x89,0x79,0x39,0x4d,0x36,
    0xf1,0x7b,0xb8,0xee,0x43,0xff,0x24,0x65,0x5c,0x22,0xde,0x10,0x4b,0x96,0x87,0xda,
    0x53,0x72,0x96,0x87,0x3a,0xa5,0x0b,0x1b,0x76,0x4d,0x73,0xba,0xfa,0x3b,0xce,0xd9,
    0x3b,0x2b,0x65,0xac,0x21,0x8e,0x06,0x39,0x7b,0x67,0xa7,0xe4,0x9a,0xab,0xc5,0xb5,
    0xce,0x79,0x29,0x6d,0x0c,0x77,0xfa,0x1d,0x29,0x71,0x2b,0xe7,0x4b,0x7f,0x62,0x4a,
    0x1b,0xe0,0x71,0x0d,0x04,0x6c,0x52,0x5a,0x5c,0x03,0x81,0xc7,0xb3,0x2d,0x3c,0xc7,
    0xf2,0xfd,0xed,0x94,0xff,0x20,0x7f,0x43,0x95,0xe3,0xc2,0xf8,0x27,0xc9,0x1f,0x90,
    0x9d,0xa1,0x1c,0x3b,0xc5,0xe5,0x95,0x8b,0x52,0xe6,0x20,0xcb,0x2b,0x17,0xa7,0xc4,
    0x2c,0xaf,0x3c,0xe2,0xf2,0x0a,0xb8,0x4b,0xf2,0x52,0x96,0x9d,0x4b,0xdc,0xba,0xb8,
    0xcc,0xe5,0x0b,0xbf,0x7e,0x2e,0x4f,0xc9,0x99,0xdc,0x55,0x2e,0xff,0xb4,0x3b,0xb9,
    0xab,0x53,0x72,0x96,0x57,0xae,0x49,0x89,0xb5,0xb8,0xeb,0xd8,0x5f,0x49,0x17,0xcf,
    0x31,0x2d,0x56,0xff,0x27,0x25,0xee,0x63,0xf5,0xfa,0x94,0xb8,0xc5,0xea,0x0d,0x29,
    0xed,0x5d,0xef,0xfa,0x71,0x93,0x6c,0xf5,0x2b,0xaf,0xd9,0x8f,0x9b,0x53,0x72,0xd6,
    0xe6,0xaf,0x25,0x37,0xd1,0x9d,0x87,0x6e,0x4b,0x89,0x77,0x38,0xbd,0xdb,0x53,0xe2,
    0xd6,0xe6,0x1d,0x29,0x6d,0xdd,0xee,0xda,0xbc,0xdb,0xed,0x1f,0xde,0x47,0xf7,0xa4,
    0xe4,0x4c,0xee,0x3e,0xc9,0x2d,0xa9,0x93,0x9b,0x9e,0x92,0x33,0xb9,0x07,0x25,0xd7,
    0x5e,0x27,0xf7,0x50,0x4a,0xce,0xfa,0x3b,0x43,0x72,0x23,0xdc,0xbe,0x3f,0x53,0x79,
    0x61,0xb1,0xee,0x83,0x03,0x7b,0x2c,0xa5,0xec,0xcc,0xb4,0x88,0xdd,0x27,0x52,0xce,
    0x21,0x9e,0x8f,0x1a,0x36,0x2b,0xa5,0x4f,0xf1,0x8c,0xd4,0x72,0xd2,0xef,0x53,0xca,
    0xce,0x72,0xfb,0xd8,0xec,0x94,0xf8,0x1d,0xce,0xde,0x53,0x29,0xc7,0xeb,0xed,0xcd,
    0x49,0x39,0x36,0x6f,0xef,0x99,0x94,0xb2,0x73,0x9c,0xbd,0x67,0x53,0xe2,0x18,0xdf,
    0xc3,0x8a,0xd7,0x79,0x29,0xdb,0x01,0x77,0x9f,0xfc,0xf2,0x5c,0x4a,0xbc,0x4d,0xcf,
    0x52,0x6c,0x7c,0x2f,0xa4,0x1c,0x23,0x78,0xe4,0xe3,0xe9,0x75,0xf9,0xf8,0x8f,0x29,
    0x9f,0x11,0xbd,0xe0,0xf2,0xf1,0xfc,0x94,0xb8,0xe5,0xe3,0x97,0xbe,0x23,0x1f,0x2f,
    0xf8,0x8e,0x7c,0xbc,0x30,0xa5,0xec,0x02,0x37,0x0f,0xaf,0xa4,0xc4,0x7d,0x3e,0x7e,
    0x35,0x25,0x6e,0x7a,0x8b,0xa5,0xe7,0xf3,0xf1,0x92,0x94,0xb8,0x8f,0xf1,0xd7,0x53,
    0xe2,0x58,0xa3,0x2b,0xea,0x72,0xef,0xb2,0xbc,0xbe,0x42,0x79,0x61,0x99,0xf3,0xdf,
    0x9b,0x29,0xdb,0x7b,0xdd,0xe5,0xd3,0xb7,0x52,0xe2,0x96,0x8f,0x4d,0x6f,0x85,0xcb,
    0xc7,0x93,0x94,0x8f,0xb1,0xde,0x21,0xbf,0x2c,0x2d,0xce,0xc3,0xef,0xc8,0xa6,0xe5,
    0xe3,0x4f,0x5c,0x5f,0xc0,0xbd,0x9b,0x97,0x0f,0x64,0xf3,0x5d,0x97,0xff,0x56,0x29,
    0x0e,0xa6,0x6b,0x3e,0xd1,0xf6,0x27,0x92,0xfb,0xc0,0xc9,0x7d,0xac,0xf8,0xbb,0x41,
    0x71,0xe4,0xe5,0x3e,0x71,0x39,0xef,0x84,0x2a,0x6d,0xa2,0x8d,0x8f,0xd5,0xa6,0xe5,
    0xe4,0xbf,0xa5,0xe4,0x7d,0x4e,0xfe,0xbb,0xc6,0xfc,0xba,0xcb,0xf3,0x9f,0x2b,0xdf,
    0xfc,0xdd,0xc5,0xeb,0x17,0x29,0xf1,0xf9,0xae,0x4f,0x5f,0xa6,0xc4,0xad,0x58,0xee,
    0xfe,0x2a,0x65,0x5b,0x5f,0xba,0xdc,0xfd,0x6f,0x97,0xbb,0xbf,0xaa,0xcb,0xdd,0x8f,
    0xd8,0x99,0x37,0x14,0xf9,0xb8,0x12,0x78,0xfe,0xb3,0x7c,0x9c,0x04,0x62,0x96,0x8f,
    0x1f,0x76,0xf9,0x18,0x5c,0x9a,0x97,0xa9,0xb2,0x83,0xdf,0x96,0x1b,0xb2,0xc0,0x35,
    0x8f,0xf7,0x16,0xba,0x5c,0xdc,0x54,0x03,0xb9,0xd5,0x67,0x62,0xc9,0xe1,0x19,0xaf,
    0x97,0x5b,0x27,0x90,0xb3,0xb8,0x5c,0x4f,0x72,0x78,0x87,0xc0,0x64,0x9a,0x02,0x71,
    0xbb,0xde,0xeb,0x1e,0x88,0xe1,0xbd,0x0c,0xcb,0x83,0xeb,0x07,0xda,0xea,0xee,0xda,
    0xdc,0x28,0x14,0xf9,0xcd,0xe7,0xde,0x8d,0x03,0x39,0x93,0xdb,0x2c,0x14,0xf9,0xd2,
    0x9f,0x41,0x37,0x0f,0xe4,0x6c,0xaf,0xd8,0x22,0x10,0x6b,0x77,0x67,0xd0,0x2d,0x03,
    0xed,0x6d,0xe1,0xc6,0xd0,0xc3,0xd9,0x33,0x5b,0xdb,0x04,0xe2,0x36,0x86,0x9e,0x81,
    0xd8,0x4d,0x6e,0x0c,0xdf,0x0f,0xb4,0xd7,0x33,0x14,0x7a,0xbd,0x03,0x73,0xa7,0xf5,
    0x75,0xc7,0x50,0x9c,0x0b,0xfd,0xb5,0x41,0x9f,0x40,0xce,0xfa,0xba,0x53,0x20,0xd6,
    0xe2,0xfa,0xda,0x37,0xd0,0x1e,0x38,0xcb,0x33,0xfd,0x42,0x91,0x67,0xac,0x8d,0x5d,
    0x02,0xf1,0x69,0x75,0x73,0xba,0x6b,0x20,0x67,0x72,0x7b,0x48,0x0e,0x73,0xbf,0xc4,
    0xc9,0xfd,0x20,0x90,0x33,0xb9,0xbd,0x24,0x67,0xef,0xc3,0x99,0xdc,0x7f,0x05,0x72,
    0x26,0x37,0x40,0x72,0x43,0xea,0x62,0x64,0x9f,0x40,0x6e,0xf5,0x3d,0x7d,0xc9,0xad,
    0x2c,0xad,0x29,0xb7,0x7f,0x20,0x67,0x3e,0x38,0x20,0x30,0x0e,0xfd,0x7d,0x81,0xc1,
    0xc2,0x9a,0x9d,0x5f,0x86,0x04,0xca,0x0e,0x76,0xba,0x07,0x05,0xfa,0xcb,0xeb,0x1e,
    0x2c,0xcc,0xeb,0x1e,0x12,0x28,0x7b,0xb0,0xd3,0x3d,0x34,0xd0,0x57,0x5e,0x77,0xb8,
    0x30,0xaf,0x7b,0x58,0xa0,0xec,0x70,0xa7,0x3b,0x22,0x30,0x96,0x5b,0x9c,0xee,0x91,
    0xc2,0xba,0x9c,0xee,0x51,0x81,0xb2,0x47,0x3a,0xdd,0x63,0x02,0x7d,0xef,0x75,0x47,
    0x09,0xf3,0xba,0xa3,0x03,0x65,0x47,0x39,0xdd,0x31,0x81,0xf3,0xe1,0x75,0xc7,0x0a,
    0xf3,0xba,0xe3,0x02,0x65,0xc7,0x3a,0xdd,0xe3,0x02,0x63,0xd7,0x8f,0x77,0xbc,0x30,
    0x3f,0xde,0xd6,0x40,0xd9,0xf1,0x4e,0x77,0x42,0xe0,0xfc,0x7a,0xdd,0x36,0x61,0x5e,
    0xf7,0xa4,0x40,0xd9,0x36,0xa7,0xfb,0x93,0xc0,0x39,0xf7,0xba,0xa7,0x0a,0xf3,0xba,
    0xed,0x81,0xb2,0xe0,0x2c,0xb7,0x9e,0x11,0x38,0xef,0xf0,0x63,0xab,0xc3,0x7f,0x16,
    0x38,0xa7,0xf0,0x11,0xda,0xbc,0x50,0x39,0xf7,0x9c,0x40,0xee,0x0c,0x27,0x3b,0x31,
    0x70,0x0e,0xe1,0x93,0x76,0x27,0x3b,0x29,0x90,0x83,0xac,0xed,0xf9,0xe7,0x07,0xde,
    0xc7,0x1a,0xe6,0x9e,0xdb,0x5e,0x10,0x88,0x9b,0xbd,0xc9,0x81,0x98,0x15,0xdb,0x57,
    0x3a,0x03,0xdb,0x9f,0xec,0xec,0x4d,0x91,0xbd,0x36,0x67,0xef,0x17,0x81,0xb8,0xd9,
    0xbb,0x38,0x10,0xb3,0x62,0xf6,0x2e,0x09,0xec,0x23,0x78,0xdb,0x53,0x2e,0x0f,0x6c,
    0xe7,0x12,0x87,0x5d,0x19,0x88,0xe3,0xdd,0x9d,0x39,0xc2,0xae,0x0e,0xc4,0x81,0x99,
    0xdc,0x35,0x1a,0x2b,0x38,0xdb,0x8f,0xae,0x0b,0xc5,0x7e,0x04,0xde,0xef,0x47,0x0f,
    0x6b,0x1f,0x99,0xea,0xfa,0x7a,0x6b,0xe0,0x3d,0x8b,0x75,0x74,0x4f,0xc2,0xd6,0xf4,
    0x6d,0xa1,0xb8,0x67,0x04,0xb9,0xbb,0x02,0xef,0x6b,0x34,0xe9,0xbe,0x85,0xe1,0x77,
    0x07,0xca,0x5a,0xb1,0xb1,0xde,0x13,0xc8,0xdd,0xe5,0xc6,0x35,0x2d,0xb0,0xbd,0x7b,
    0x14,0x4b,0xc0,0xa6,0x07,0xe2,0xa3,0xdc,0x58,0x1f,0x14,0x86,0xb1,0xce,0x15,0xf6,
    0x50,0xa0,0x2c,0x38,0x3f,0x16,0xfc,0xb7,0x33,0xc2,0xd4,0x2a,0xc7,0x8f,0x7d,0x12,
    0xef,0x1f,0x4d,0x75,0xdc,0x15,0x55,0x62,0xe0,0x1e,0xd2,0x9e,0x8a,0xf3,0x64,0xed,
    0x7e,0x64,0x95,0xfb,0x30,0xee,0x05,0xe2,0x1c,0x64,0xf8,0xdb,0x0e,0xdf,0xa6,0x6e,
    0x4f,0x7f,0xc4,0xd9,0xbe,0xb1,0xca,0x73,0x00,0xce,0x2b,0xe8,0x83,0xef,0xd3,0x2f,
    0xd5,0x2e,0xb8,0x2b,0x1c,0x07,0xfb,0x13,0xab,0x3c,0x7b,0x81,0x5b,0x51,0xc7,0x9d,
    0x52,0x65,0xbb,0xe0,0xde,0x16,0xe7,0xaf,0xf1,0x66,0xb8,0x36,0xae,0xaf,0xf2,0x9a,
    0x10,0xd7,0x88,0xe8,0x8b,0xef,0x5b,0xa7,0xda,0x07,0xf7,0x4b,0xc7,0xa1,0x8d,0x73,
    0xab,0xbc,0x16,0x07,0x37,0xb1,0x8e,0x3b,0x51,0xed,0x83,0x3b,0x45,0x9c,0xbf,0x8f,
    0xf7,0x1b,0xd7,0xc6,0xb5,0x6a,0x03,0xf7,0x25,0xd1,0x17,0xdf,0xb7,0xc9,0x55,0xde,
    0x0b,0x04,0xd7,0xe9,0x38,0xb4,0x71,0x8e,0xce,0x9d,0xe0,0xce,0xad,0xe3,0x26,0x54,
    0xe9,0x73,0x70,0x27,0x8a,0xc3,0xf9,0xe8,0x7d,0x77,0x3e,0x82,0xcc,0x6f,0xf3,0xfa,
    0xfb,0xea,0x13,0x7e,0xdb,0xb9,0xf5,0x31,0xc5,0x2f,0xd6,0xfd,0x7d,0xba,0x6f,0xf7,
    0x78,0x20,0xde,0xa2,0x77,0x46,0x57,0x5f,0x03,0xe9,0x6c,0xf1,0x78,0x28,0xce,0x8a,
    0xbf,0x0b,0xdc,0xe7,0x9f,0x70,0xfb,0xdf,0x2c,0x9d,0x01,0x7e,0x27,0x79,0xdb,0xcb,
    0xff,0x10,0xbe,0x7d,0xcd,0xf0,0x64,0xf8,0xf6,0x35,0xc3,0x53,0x81,0xb2,0x4f,0x86,
    0xe2,0xec,0xff,0x74,0x20,0xee,0xaf,0x19,0xe6,0x04,0xe2,0xa6,0x37,0x4f,0x7a,0xfe,
    0x9a,0xe1,0xb9,0x40,0xdc,0x5f,0x33,0x3c,0x1f,0x88,0xdb,0x18,0x5e,0xb4,0x7d,0x45,
    0xbe,0xeb,0x72,0xbe,0x83,0xef,0xe7,0x63,0x8f,0x91,0xef,0xe6,0x87,0xc2,0x1f,0x2f,
    0x07,0xea,0x3e,0x1f,0x8a,0xf1,0xbc,0x12,0x68,0x07,0x98,0x5d,0x5b,0xbc,0x1a,0x88,
    0xdb,0xb5,0x85,0xd9,0xea,0x72,0xf3,0x78,0x55,0x95,0xf3,0x8c,0xb9,0x81,0xfc,0xfc,
    0x50,0x3c,0xc3,0xb8,0xa0,0xca,0x76,0xc0,0xbd,0x2c,0x0e,0xd7,0x6d,0x78,0x6f,0x6f,
    0x42,0xa5,0x78,0x36,0xbd,0x38,0xf0,0x5d,0xbe,0x59,0x6a,0xdf,0xf2,0xee,0x92,0x40,
    0xce,0xfa,0xbd,0x34,0x10,0x83,0x5d,0xcb,0x4f,0xcb,0x03,0x71,0x2b,0x96,0x8b,0xde,
    0x0c,0x8c,0xcd,0xe5,0x2e,0x77,0xbe,0xe5,0x72,0xe7,0x9b,0x75,0xb9,0xd3,0x62,0xec,
    0x7d,0x17,0xdb,0xd7,0x54,0x19,0xfb,0x58,0x0b,0x6f,0xc9,0x97,0x36,0xee,0x2b,0x35,
    0x6e,0x70,0xf0,0x01,0xb8,0x69,0xf6,0x8c,0x21,0xf0,0x19,0xc8,0x95,0xba,0x27,0xf5,
    0xb1,0x6c,0x7f,0x1c,0x8a,0x58,0x7d,0xa7,0x4a,0xb9,0x95,0x7a,0xd6,0x83,0xf1,0xe0,
    0xfd,0xc9,0xf7,0x84,0x5b,0xb9,0x4f,0xe3,0x7c,0x5f,0x1c,0xfa,0x7c,0x8d,0x7b,0x17,
    0xec,0x2f,0x81,0x5c,0xa9,0x54,0x60,0x9f,0x0a,0x6b,0x70,0xd8,0x67,0xc2,0xca,0xee,
    0xb9,0xcd,0xca,0x0a,0xf5,0xad,0xfe,0x61,0x85,0xba,0x56,0xff,0xb8,0x42,0x3d,0x7b,
    0xae,0xf0,0x49,0x85,0x3a,0x90,0x03,0x67,0xcf,0x0b,0xbe,0x88,0xe4,0xc6,0x34,0x04,
    0x3e,0x53,0x88,0xc5,0x37,0x34,0xc0,0x27,0x6a,0xdd,0x80,0xfb,0x57,0x24,0x8f,0xf7,
    0x4d,0xed,0x19,0xc4,0xd7,0x91,0xf8,0xd8,0x6a,0x61,0xf3,0x9b,0x48,0xdc,0xf6,0x7e,
    0xbc,0x5c,0x8f,0x76,0xbe,0x89,0xc5,0x98,0xca,0x99,0x3e,0x76,0x71,0x6b,0x3d,0xc9,
    0x88,0xa3,0xa0,0x3f,0xb5,0xe7,0x0d,0x59,0xd1,0x1f,0xf0,0x13,0x6b,0xd7,0x2d,0xfc,
    0x2e,0x20,0x64,0xe4,0xcd,0x66,0x37,0xd9,0xf4,0xef,0xaf,0xad,0x25,0x7b,0xdd,0x9c,
    0xcd,0xb5,0x9d,0xcd,0xb5,0xea,0x6c,0xae,0x93,0x91,0x37,0x9b,0x4d,0xb2,0x59,0x76,
    0x36,0xbb,0xcb,0x66,0x93,0xb3,0xb9,0xbe,0xb3,0xd9,0xbd,0xce,0xe6,0x06,0x19,0x79,
    0xd3,0xdf,0x54,0xfd,0xf1,0x7d,0xda,0xcc,0xe9,0x6f,0x5a,0xa7,0xbf,0x79,0x46,0xde,
    0xf4,0x7b,0x48,0xd7,0xb7,0xbf,0x8d,0xd3,0xef,0x51,0xa7,0xdf,0x33,0x23,0x6f,0xfa,
    0xbd,0xa5,0xeb,0xf5,0xb7,0x77,0xfa,0xbd,0xeb,0xf4,0x77,0xc8,0xc8,0xb7,0x2a,0x46,
    0xfa,0x64,0xdf,0x8e,0x91,0xe3,0xc4,0xf5,0xfd,0x0e,0xce,0x9e,0x61,0xed,0x9c,0x51,
    0x17,0x32,0xa7,0xe9,0x1b,0xba,0x7e,0x19,0x71,0xac,0xb5,0x5d,0x32,0xae,0x35,0xfc,
    0xc7,0x5a,0x05,0xff,0x40,0x95,0x32,0x58,0x7f,0xcb,0xf3,0xdf,0x23,0xc5,0xd5,0xbe,
    0x2f,0xa9,0xf2,0x9b,0x14,0x70,0xc3,0xb2,0x82,0xab,0xdd,0xaf,0xab,0x72,0x7d,0x82,
    0x1b,0x2d,0x6e,0x86,0xd6,0xf8,0xee,0x19,0x79,0x9c,0x87,0xff,0x2f,0xef,0x47,0xb3,
    0x78,0xcb,0xbf,0xe0,0xf7,0xc8,0x4b,0xb3,0xfa,0x83,0xdf,0xc3,0xf5,0x8d,0xca,0x5e,
    0x19,0xe3,0x0e,0x71,0x82,0x79,0xbd,0x2e,0xb7,0x89,0xbe,0xf4,0xcf,0xc8,0x3d,0x50,
    0x2d,0x64,0x07,0x4a,0x0e,0xf3,0xd7,0xd3,0xc9,0xee,0x97,0x91,0xf3,0xb2,0x83,0x64,
    0x0f,0x72,0x3b,0x38,0xd9,0x21,0x19,0x39,0x2f,0x7b,0x70,0xc6,0xf6,0x60,0x67,0x88,
    0x93,0x3d,0x34,0x23,0x87,0xb2,0x56,0x2e,0x0b,0x6c,0x98,0xd6,0xc3,0x56,0xe2,0x9f,
    0x90,0x0f,0x0e,0xcb,0xc8,0xc1,0x7f,0xd8,0x7f,0x8e,0x71,0xe3,0x07,0x77,0x78,0x5e,
    0x8e,0xd1,0xf8,0xf1,0xfb,0x62,0xb5,0x71,0x44,0xc6,0xef,0x7e,0xa0,0x7b,0x45,0x8e,
    0xa1,0x3f,0x47,0xab,0xcd,0x23,0x34,0x8f,0xa6,0x77,0x8c,0x9b,0x47,0xcc,0xdd,0xc1,
    0xf2,0xeb,0xd1,0xb2,0x0f,0xd9,0x91,0x92,0xc5,0x7f,0xdb,0xcf,0x46,0x6b,0x7e,0x5a,
    0x4a,0x6b,0xc6,0x05,0xe6,0xe3,0x31,0xf5,0xbf,0x25,0xe3,0xfc,0x4f,0x53,0xff,0x4f,
    0x73,0xfd,0x07,0x37,0x36,0x2f,0xe3,0xa4,0x37,0x56,0x6d,0x9d,0xa6,0xfa,0x38,0xad,
    0x6f,0x8c,0xe7,0x38,0xf9,0xb6,0x54,0x2a,0x7c,0x76,0xbc,0x7c,0x56,0x11,0x6f,0xb2,
    0xad,0x92,0x6d,0x70,0xb2,0x27,0x38,0xd9,0xd6,0x9a,0xdf,0x19,0x9b,0x13,0x84,0xf7,
    0x96,0xbd,0x13,0x9c,0x9d,0x36,0xd9,0x29,0x3b,0x3b,0x27,0x39,0x3b,0x6d,0xce,0xce,
    0xc9,0xce,0x0e,0x6c,0x9e,0xe4,0xe6,0xe2,0x94,0x8c,0xdf,0x46,0x9d,0xec,0xe6,0xa2,
    0x5d,0xb6,0x4f,0xa9,0x1b,0xf3,0x69,0x6e,0x2e,0x1e,0xac,0xf2,0x5b,0x2b,0xf8,0xa5,
    0x5d,0x7e,0xb2,0xf5,0x78,0x7a,0xc6,0x75,0x6b,0x31,0x75,0x66,0x46,0x0c,0x3a,0xc7,
    0x37,0xb0,0x4f,0x67,0xb9,0x35,0x7e,0xa6,0x72,0xc5,0x09,0xe2,0xce,0xfe,0x0e,0xee,
    0xb7,0x9a,0xb3,0xf3,0x32,0x62,0xd0,0xb7,0x77,0xe8,0xf0,0x8d,0x2f,0xbe,0xe7,0xb2,
    0xfb,0xc7,0x13,0x33,0xca,0x01,0xc7,0xf9,0x10,0x39,0xa7,0xf6,0x8d,0xa8,0xb3,0x3b,
    0xb1,0xce,0xee,0x05,0xb2,0x8b,0xb6,0xcd,0xce,0xe4,0x8c,0x78,0xbd,0x9d,0x4e,0x67,
    0x67,0xb2,0xec,0x8c,0x6c,0xe0,0x1e,0x79,0x91,0x38,0x8c,0x1f,0xed,0x19,0x7e,0xa9,
    0xc3,0x3b,0xb3,0xe2,0x6c,0x79,0x45,0x46,0x9d,0x92,0x7b,0x4e,0x72,0x65,0x46,0xbc,
    0xdd,0x3d,0x9f,0xbc,0x2a,0x23,0xbe,0xcc,0x9d,0x4b,0xaf,0x91,0x6e,0x83,0xd3,0xbd,
    0x36,0x23,0xee,0x9f,0x6d,0x5e,0x97,0x11,0x9f,0xe5,0x9e,0x6d,0xfe,0x2a,0xa3,0xcd,
    0xeb,0x5c,0x5f,0xae,0x97,0xbd,0xb2,0xb3,0x77,0x43,0x46,0xbc,0xdd,0xe9,0xde,0x98,
    0x51,0xff,0x06,0xa7,0x7b,0x4b,0xc6,0x31,0xfa,0x71,0xdc,0x9a,0x11,0xf7,0xe3,0xf8,
    0x75,0x46,0xdc,0x8f,0xe3,0x76,0xe9,0xfa,0x71,0xdc,0x91,0x11,0xf7,0xe3,0xb8,0x33,
    0x23,0xee,0xc7,0x71,0x57,0x46,0x9b,0x77,0xba,0xbe,0xdc,0x23,0x7b,0x7e,0x1c,0xd3,
    0x32,0xe2,0x7e,0x1c,0xf7,0x66,0xd4,0x07,0x67,0xf7,0x6b,0x1b,0x13,0x8e,0xef,0x5e,
    0xc5,0x7e,0xa2,0x77,0x3a,0xf0,0xdf,0xe2,0x62,0x65,0x75,0x4d,0x39,0xc3,0x57,0x09,
    0x07,0x06,0xce,0xae,0x55,0xd6,0x4d,0xc8,0x41,0x0f,0x79,0xa6,0xc9,0xbd,0x73,0x02,
    0x6e,0xbd,0xbc,0x6c,0xab,0x76,0xd6,0x4b,0xdc,0x9e,0x9f,0xf0,0x7c,0x66,0xf5,0x8d,
    0x13,0x9e,0xcf,0xac,0xbe,0x59,0x52,0x9c,0xcf,0xb0,0xee,0x36,0x4f,0xa8,0x03,0x39,
    0x70,0xb6,0x1e,0xb7,0x4c,0x38,0xaf,0x56,0xdf,0x3a,0xa1,0x7f,0x26,0x6b,0xbd,0x3f,
    0x9e,0x51,0x06,0xb8,0xad,0xd9,0x59,0xc2,0x1e,0x77,0x7b,0xc3,0xec,0x8c,0x32,0x1e,
    0x7b,0x3a,0x63,0xbb,0x8f,0xcb,0x1e,0xb0,0xb9,0x19,0xf1,0xd9,0x0e,0x7b,0x2e,0xa3,
    0xcd,0xd9,0x2e,0xf7,0x3c,0x9f,0x51,0x16,0xdc,0x14,0x61,0x2f,0x64,0xc4,0xf1,0x5d,
    0xe9,0x05,0xc2,0x5e,0xcc,0x88,0xe3,0xdb,0xd2,0x53,0x75,0x6d,0xf0,0xc7,0x8c,0xb8,
    0xbd,0x67,0x3a,0x3f,0x2b,0xce,0xf6,0xe0,0x56,0xba,0x7b,0xd3,0x98,0x9b,0x3f,0x65,
    0x94,0xb1,0xeb,0xab,0x97,0x33,0x62,0x6d,0x2e,0x46,0x16,0x0a,0xb3,0x77,0x5f,0x6b,
    0xef,0x9c,0x65,0x94,0x05,0x67,0x71,0xf8,0x5a,0x46,0xdc,0xbf,0x2b,0xb0,0x38,0x23,
    0xbe,0x50,0x71,0xd3,0xa4,0xf9,0xdc,0x56,0xef,0xfb,0xf4,0x76,0x73,0x8e,0xeb,0x82,
    0x5e,0x79,0xbd,0xb7,0x64,0x7a,0xb9,0x77,0xa7,0x76,0x4c,0x78,0x6d,0xb0,0x52,0xfb,
    0x96,0xc9,0xf4,0x76,0xef,0x14,0xf5,0xd1,0xb5,0x05,0x6c,0x43,0xbe,0x97,0x8b,0xcd,
    0x9d,0x12,0xf2,0x57,0x97,0x8a,0xf7,0x92,0xac,0x2f,0x4d,0xb2,0x01,0xb9,0x47,0xaa,
    0xec,0x33,0xe2,0x6d,0x27,0xf5,0xc5,0xce,0x76,0xbb,0xe8,0x3e,0x38,0xbe,0x01,0xb1,
    0x31,0xef,0x9a,0x50,0x07,0xdc,0x89,0xca,0x83,0xbb,0x25,0x45,0x1e,0xdc,0x55,0xcf,
    0x58,0x4d,0xfe,0x87,0x8a,0xf9,0x99,0xce,0x47,0x7b,0x26,0x5c,0x03,0x3f,0xd4,0xf7,
    0x40,0x78,0xf7,0x6f,0x44,0x95,0xf8,0x6c,0xed,0x9f,0x86,0x1f,0x59,0xa5,0xfd,0x11,
    0xda,0x2b,0xcd,0x3f,0x03,0x12,0xf6,0xcb,0x9e,0x57,0x0d,0x74,0x7e,0x05,0xb7,0x4f,
    0x5e,0x06,0x6a,0xbc,0xfb,0xb8,0xef,0x81,0xf6,0xd5,0xf7,0x1d,0x2b,0xdd,0x7d,0xbd,
    0xfd,0x12,0xe2,0x17,0x69,0xdc,0xfb,0x27,0xc4,0x9a,0x4b,0x85,0xde,0x8f,0xa4,0xd7,
    0xe2,0xf4,0x0e,0x48,0x88,0x9b,0xde,0xa0,0x84,0x58,0xb3,0xfb,0x4e,0x69,0x70,0x42,
    0x7b,0x83,0xdc,0x77,0x4a,0x07,0x26,0xfc,0xe6,0x65,0xb0,0xde,0xb9,0xc3,0xf7,0x86,
    0x87,0xe8,0x5b,0xc3,0xe3,0xf3,0x3a,0x7e,0x43,0xe6,0x48,0x5d,0x37,0xda,0x38,0x06,
    0x26,0x6b,0x7e,0x33,0x84,0xff,0xff,0xce,0xbd,0xb2,0x67,0x5e,0xfe,0x03,0x23,0xca,
    0x32,0x3e,0xb4,0x44,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//  uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// ivec4 DecodeRGBA(ivec2 pixel_coord, uvec4 payload, int linear_pixel, inout bool punchthrough){
//     uvec2 color_payload;
//     int alpha_result;
//     if(kAlphaBits == 8)
//     {
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         alpha_result = decode_etc2_alpha(alpha_payload, linear_pixel);
//         color_payload = flip_endian(payload . zw);
//     }
//     else
//     {
//         color_payload = flip_endian(payload . xy);
//         alpha_result = 0xff;
//     }
//
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits == 1)
//         punchthrough =(color_payload . y & 2u)== 0u;
//     else
//         punchthrough = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//             punchthrough = false;
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     bool punchthrough;
//     result = DecodeRGBA(pixel_coord, payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//     uint minColor565 = packColorToRGB565(minColor);
//     uint maxColor565 = packColorToRGB565(maxColor);
//     if(minColor565 > maxColor565){
//         swap(minColor565, maxColor565);
//     }
//     uint indices = 0;
//     if(minColor565 != maxColor565){
//         indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor));
//     }
//     else {
//         indices = punchthrough && result . a == 0 ? 0x3u : 0x0u;
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//
//     finalResult . r = maxColor565 |(minColor565 << 16);
//     finalResult . g = mask;
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
