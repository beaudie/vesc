// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x5c,0x0b,0xb8,0x96,0x53,
    0xda,0xfe,0xbe,0xfd,0xf5,0x9e,0xb7,0x74,0xa2,0x91,0x88,0x31,0x63,0x50,0x1a,0xe3,
    0x10,0xa3,0x12,0x1a,0x87,0xf9,0xf9,0x15,0x46,0x99,0x09,0xc9,0x68,0xc7,0x4c,0x45,
    0x46,0x6c,0x99,0x7f,0xf8,0x1d,0xc3,0x96,0x9d,0xc2,0x48,0x74,0x42,0x18,0xa3,0x99,
    0x74,0x99,0xb8,0xc6,0xfc,0x46,0x25,0x6a,0xd2,0x69,0x32,0x8c,0x43,0xa4,0x9f,0x9a,
    0xd1,0xc8,0xd0,0x81,0xa2,0xff,0xbd,0xbf,0xfb,0x7e,0xf6,0xfb,0xf4,0xe5,0xfa,0xf7,
    0x75,0xad,0xeb,0x7b,0xd7,0xfd,0x1c,0xd6,0xb3,0x9e,0xf5,0xac,0x67,0xad,0xf7,0x7d,
    0xd7,0xbb,0x2b,0x75,0x07,0x44,0xa5,0x4a,0xb9,0x94,0x96,0xe2,0xd2,0xcc,0xfa,0x52,
    0xf5,0xaf,0x6d,0xa9,0xae,0x54,0xd6,0x6f,0x77,0xfd,0xf6,0xd6,0xef,0x09,0xfa,0xed,
    0x9b,0xff,0x66,0xa5,0xb0,0xca,0x77,0xca,0xe9,0x67,0x9f,0xde,0xfd,0x17,0x57,0x5e,
    0xdc,0xfd,0xc8,0xa3,0x0e,0x83,0x7c,0xeb,0x52,0xa5,0xaa,0x07,0xb4,0xdd,0x73,0xbd,
    0x41,0xfe,0xdb,0x2a,0x2f,0x23,0x86,0x5c,0x3a,0x12,0xf8,0x29,0x39,0xf9,0x8c,0xbc,
    0xdc,0x96,0x83,0x6d,0x72,0x1d,0xad,0xaa,0x3a,0x4b,0xa5,0xe3,0x25,0x83,0x72,0x6a,
    0x2e,0xf5,0x12,0xcd,0x29,0x1d,0xa0,0x5f,0xc3,0xca,0xc2,0x5a,0x39,0xac,0x4e,0x58,
    0xec,0xb0,0x8a,0xb0,0x7a,0x87,0xb5,0x12,0xd6,0xc6,0x61,0x81,0xb0,0x0e,0x0e,0x0b,
    0x85,0x7d,0xc3,0x61,0x91,0xb0,0xce,0xe8,0x43,0xae,0xdd,0xda,0x3d,0x25,0xd7,0x8a,
    0x3e,0x65,0xf9,0x75,0x27,0xd5,0xcf,0x50,0x7d,0x6f,0xf1,0xa2,0xaf,0x25,0xd1,0x70,
    0x0d,0xda,0xc1,0xaa,0x9f,0x96,0x1b,0xf0,0xcd,0x52,0x41,0x47,0x7d,0xff,0x96,0x7a,
    0xa5,0xf4,0x69,0x50,0xd0,0x4e,0x0c,0x77,0xe6,0x45,0x7d,0x7f,0xf9,0x04,0xbc,0xa8,
    0xef,0x65,0x36,0x85,0x6c,0x67,0x2f,0xd1,0x36,0x25,0x94,0x6b,0x9f,0x5b,0x0d,0xbb,
    0xf7,0xcf,0xb1,0x8a,0xfa,0xb0,0x47,0xce,0x8f,0x3e,0xef,0x27,0xdd,0x1d,0xf3,0x7a,
    0x24,0x3f,0xd4,0x55,0xf1,0x56,0x55,0xdf,0x46,0x2a,0xe0,0x4f,0xc4,0x5f,0x16,0x3d,
    0x15,0x2d,0x91,0x7c,0x1b,0x5d,0x9b,0x7c,0x5b,0xd1,0xdb,0x54,0x7d,0x5d,0x57,0x6a,
    0x27,0xbe,0x0e,0xe2,0x6b,0x25,0xbe,0x2e,0xe2,0x43,0xdb,0x7b,0xe6,0x16,0x1e,0xa4,
    0x76,0xc0,0x0b,0x9f,0x1d,0xa4,0xb1,0x45,0xfd,0x70,0xf1,0xa1,0xde,0x55,0x36,0x9d,
    0x93,0x97,0x43,0x5d,0x7d,0x80,0xa3,0x83,0x77,0x90,0x6c,0x36,0xfa,0x05,0x1a,0x67,
    0xab,0x0f,0x56,0x1c,0x59,0x7d,0xa8,0x62,0xc3,0xea,0x0d,0xb2,0xd5,0xea,0xc3,0xd5,
    0x27,0xab,0x8f,0x52,0x4c,0x59,0xfd,0xaa,0xbc,0x74,0x71,0xf5,0x46,0xf9,0xc4,0xec,
    0x19,0x2b,0xf9,0xce,0x88,0x0d,0xb5,0x35,0xd6,0xf1,0xdf,0x5e,0x9d,0x53,0xa5,0x52,
    0xb7,0xdc,0x2b,0xa0,0xdd,0x21,0x1d,0xa3,0x64,0xeb,0xed,0x8e,0xb7,0x49,0xfe,0xb0,
    0xfa,0x9d,0xf2,0xad,0xd5,0xc7,0x69,0x3e,0x98,0xae,0xbb,0xa4,0xab,0x49,0xbc,0xe3,
    0x1c,0x6f,0x73,0x8d,0x9f,0xc6,0x6b,0x5c,0x4c,0xf6,0x6e,0xf1,0x34,0x88,0x36,0xce,
    0xd1,0x26,0x88,0x36,0x40,0x76,0x7a,0xbd,0x13,0x4b,0x8c,0x4b,0xe3,0xbd,0xc7,0xf5,
    0x67,0xbc,0xe8,0xc6,0x7b,0x6f,0x5e,0x52,0xc7,0x7b,0x9f,0xb3,0x77,0xb0,0xe8,0x46,
    0xfb,0xb5,0xda,0x6b,0x92,0x1e,0x4f,0xbb,0x5f,0x72,0x0d,0x5f,0x43,0x9b,0x24,0x5b,
    0xad,0xfd,0x3b,0x1d,0xed,0x81,0x9a,0x3e,0x7a,0xda,0x64,0xd7,0xc7,0x5a,0xda,0x83,
    0x4e,0xae,0xa9,0x86,0xf6,0x90,0x6c,0x19,0xe0,0x68,0xd6,0xdf,0x29,0x9a,0x7f,0xc6,
    0x3b,0x55,0x58,0xb3,0x64,0xbc,0x9e,0x69,0xce,0xbf,0xe3,0xe5,0x0f,0xa3,0x4d,0x77,
    0xfd,0x6d,0x6a,0xa1,0xb5,0xaf,0xc6,0xd7,0x0c,0xc5,0xd0,0x5d,0x1a,0xc3,0x09,0x1a,
    0x83,0xfb,0xe4,0xc3,0xfb,0xe5,0x93,0x07,0xd4,0xc7,0x07,0x65,0xf3,0x54,0xb5,0x39,
    0x5d,0xf3,0xf4,0x51,0xc5,0xc3,0x6d,0xce,0xfe,0x39,0x79,0xd9,0x91,0x97,0x43,0xf2,
    0x19,0x87,0xf9,0xbd,0x20,0x2f,0xfb,0xe6,0x23,0xf8,0x92,0xe2,0xf0,0xff,0x2b,0xd0,
    0xb9,0x50,0xd7,0xe0,0xef,0xa9,0xfa,0xcb,0x8e,0xfe,0x8a,0xe3,0xb7,0xf9,0xb3,0xbc,
    0x66,0x3e,0xad,0x94,0x0f,0x0f,0x96,0x0d,0xaf,0x2b,0x57,0xbc,0x21,0x39,0x9f,0x0b,
    0xde,0x51,0x3e,0xb7,0xfa,0x6a,0x37,0xd7,0x51,0x7f,0xb7,0x65,0xbe,0x84,0xd5,0x5c,
    0xf3,0x9e,0x64,0x56,0x8b,0x66,0x7c,0x6b,0x6a,0x72,0xc2,0xfa,0xea,0xda,0x57,0xd4,
    0x37,0x68,0x8d,0xb3,0xfa,0x26,0xad,0x0d,0x56,0xc7,0x44,0x6b,0xef,0xf4,0xed,0x57,
    0x2e,0x72,0x06,0xea,0x67,0x95,0x99,0x93,0x90,0x23,0xce,0x2e,0xb3,0x1f,0xc0,0x4c,
    0xfe,0x47,0x65,0xf4,0xd1,0xe5,0xc0,0x32,0x73,0x66,0x4b,0x0e,0x2c,0x73,0xbd,0xb1,
    0xfa,0xc0,0x32,0xd7,0xdb,0x6e,0xf9,0x4c,0x84,0xbe,0x73,0xcb,0x45,0x3c,0x4e,0x54,
    0x4e,0x83,0x4e,0xe8,0x81,0xec,0xc0,0x32,0xfd,0xff,0x93,0x32,0xc7,0x1c,0x32,0xf0,
    0x09,0x7c,0x3a,0xa1,0xcc,0x18,0xb5,0x62,0xf8,0xc4,0x32,0xe3,0xc1,0x8a,0xb5,0xfd,
    0x46,0x99,0x1d,0xb6,0xfa,0x5b,0x5a,0xf4,0xad,0x7e,0x44,0x1d,0xd7,0x2c,0xab,0xf7,
    0xce,0xeb,0xed,0x5c,0x7d,0x48,0x5e,0xdf,0x4d,0xbe,0x68,0x53,0x61,0xee,0x3c,0xab,
    0x6a,0x4f,0x50,0xbd,0x6e,0x5b,0x61,0xec,0x33,0xe6,0x89,0xb5,0xab,0x70,0x9e,0x6c,
    0x70,0x7a,0xda,0xe7,0xd8,0x3e,0x8e,0xa7,0x43,0x85,0xf3,0x0b,0xb8,0xf1,0xec,0x51,
    0x41,0x2c,0x17,0x3c,0x7b,0x56,0xd8,0xfe,0x1e,0x8e,0xa7,0x63,0x7e,0xdd,0xcb,0xf1,
    0x7c,0xa3,0x42,0x9b,0x3b,0x3a,0x9e,0xbd,0xf2,0xeb,0xfe,0x8e,0xa7,0x53,0x85,0xeb,
    0xce,0x5e,0x8e,0x67,0xef,0x0a,0xd7,0x72,0xab,0x77,0xce,0xeb,0x3f,0x73,0x32,0xfb,
    0x54,0xc8,0xd3,0xd9,0xc9,0xec,0x9b,0x5f,0x7f,0xd7,0xc9,0x74,0xc9,0xeb,0x7f,0x70,
    0x32,0xfb,0x55,0xc8,0x03,0x1c,0x63,0x0d,0x7f,0xed,0x5f,0xa1,0x8f,0xe0,0x13,0xf4,
    0x19,0x7d,0x82,0xcd,0xb0,0x09,0x6d,0x40,0x06,0x63,0xfd,0xad,0x8a,0xd6,0x6b,0xd5,
    0x4f,0xae,0x70,0x3d,0x38,0x5c,0x73,0x13,0xf5,0x53,0x84,0x59,0xfd,0x8c,0x4a,0xb1,
    0x1f,0xe8,0xa7,0xeb,0xd0,0xc5,0xf1,0xc0,0x0a,0xe7,0x05,0xe6,0xe3,0x15,0x15,0xd2,
    0x5a,0x39,0xfa,0xd5,0x15,0xae,0xc5,0xc8,0x63,0xa0,0x37,0x56,0x38,0x9f,0x31,0xbe,
    0x63,0x45,0x37,0xde,0x31,0x15,0xe6,0x1a,0xab,0xdf,0x56,0x29,0xe6,0x36,0xf6,0x08,
    0x7f,0xe0,0x36,0xb4,0x8f,0xd5,0xbb,0x69,0x0f,0x66,0xf5,0x81,0xd5,0xfa,0xf5,0x2d,
    0xf4,0x0b,0xab,0xf5,0xeb,0x7e,0x60,0xf5,0x8b,0xf3,0xfa,0xad,0x7b,0xde,0x7f,0x9c,
    0xd5,0x87,0xe6,0xf5,0xe9,0x27,0xed,0xd9,0xc2,0xdf,0x90,0xd7,0x57,0x35,0xae,0xef,
    0x8d,0x78,0xc7,0xdc,0x1a,0xd6,0x8a,0x32,0xe0,0x03,0xcd,0xf8,0x46,0xe7,0xd7,0x97,
    0xb5,0xab,0xf4,0xe9,0x29,0x9f,0x60,0xff,0x57,0x76,0x76,0x3c,0x5a,0x6d,0xf7,0xdd,
    0xe3,0xad,0x1f,0x4f,0xb6,0xa2,0xdf,0xad,0xbe,0xaa,0x55,0xb1,0x9f,0x40,0x7d,0x6b,
    0x2b,0xfa,0x0d,0x3e,0xec,0x1a,0x70,0x6e,0xd4,0x55,0xf7,0x79,0x49,0xe9,0xd4,0x80,
    0x34,0x6d,0x19,0x5b,0xfe,0xca,0xfa,0xdd,0x3b,0xf7,0xd0,0x0f,0x73,0x22,0xf8,0x30,
    0x46,0xff,0x21,0x46,0x60,0x3d,0x55,0x3f,0x2d,0x28,0xfc,0x84,0x98,0xda,0x9c,0xd7,
    0x77,0xe4,0x7f,0xd0,0x7f,0x7c,0x48,0xfd,0xe5,0x1a,0xfd,0x75,0xd5,0x3c,0x4f,0x9d,
    0x27,0x84,0xc4,0xc0,0xdb,0x53,0xf5,0x13,0xc3,0x42,0x27,0x2e,0x4f,0x0e,0x2d,0xff,
    0x30,0xaf,0x62,0xaf,0x0a,0x6c,0x90,0xf6,0x67,0x16,0xbf,0x2f,0x65,0x9c,0xc7,0x7e,
    0x2e,0x2f,0xcc,0x38,0xbf,0x1b,0x1d,0xf6,0x72,0xc6,0xfc,0x35,0xc0,0xc5,0xce,0x2b,
    0x19,0x63,0xc4,0x17,0xcb,0x4d,0x8b,0x1c,0xff,0x00,0x97,0xb3,0x16,0x3b,0xdd,0x8d,
    0x0e,0xff,0x4b,0xc6,0xdc,0x61,0xc5,0xf0,0x25,0x19,0x73,0xbd,0x15,0xeb,0xcf,0xab,
    0x19,0x63,0xd6,0x8a,0xf1,0x2f,0xcd,0xb8,0x26,0x5b,0x31,0xfe,0x65,0x19,0xd7,0x31,
    0x2b,0xe5,0x7c,0x9c,0xc0,0xff,0x71,0xc6,0x6b,0xf4,0xa7,0x5f,0x3d,0xc7,0x7c,0x4a,
    0x3d,0xc7,0xbc,0x52,0x2a,0x68,0x8f,0xe6,0x58,0x8f,0xdc,0x17,0x75,0x9a,0x4f,0x25,
    0xd1,0xb7,0xe6,0x48,0xa0,0xf9,0x89,0xf5,0x7a,0x52,0xca,0xd8,0xea,0xa9,0x5c,0xbe,
    0x23,0xdc,0xb9,0xde,0x26,0x2a,0xea,0x98,0xff,0xdf,0x71,0x75,0xac,0x5f,0x63,0x82,
    0xa2,0x8e,0xf5,0xa8,0x8b,0xe4,0xb7,0xe4,0xad,0x9d,0xaa,0x31,0xde,0x96,0x5f,0x63,
    0xce,0xfe,0x30,0x64,0xfb,0xf8,0xed,0xad,0xbd,0x7a,0xff,0x90,0x39,0xa3,0x5f,0x2e,
    0x05,0xb9,0x33,0x43,0x62,0xfd,0xc3,0x22,0x4e,0x7f,0xa9,0x7b,0x87,0xb3,0x42,0xd2,
    0x6f,0xd2,0x18,0xff,0x28,0x24,0x86,0x98,0x38,0x21,0xc7,0x30,0x97,0xce,0x09,0x99,
    0x73,0xd0,0x5e,0x6f,0xc5,0xd6,0x80,0x90,0xf8,0x8b,0x39,0x4f,0x35,0xe7,0x84,0xc4,
    0xd6,0x48,0x37,0x62,0xfa,0xdc,0x90,0xf8,0x42,0xf1,0x0c,0x12,0x0f,0xf2,0x93,0xf1,
    0x9c,0x17,0x12,0x07,0x4f,0xf5,0x3e,0x21,0xa4,0x1c,0xf6,0x62,0x37,0x09,0x1b,0x1c,
    0x72,0x1c,0x41,0x3b,0x53,0xd8,0x90,0x90,0xb6,0x56,0xb3,0x8b,0xb0,0x8b,0x42,0xe2,
    0xe0,0x3f,0x2b,0x6f,0x11,0xfd,0xe9,0x9b,0x11,0x37,0x5e,0x6b,0x67,0xa8,0xda,0x69,
    0x74,0xed,0x34,0xa8,0x3e,0xd4,0xb5,0x73,0x89,0x64,0xcb,0xae,0x9d,0x4b,0x43,0xe2,
    0x0d,0xae,0x9d,0x93,0x33,0xe2,0x7d,0x33,0xf2,0x5a,0x3b,0xc3,0x43,0xf6,0x11,0xf1,
    0x3f,0x4f,0xd8,0x48,0x61,0x68,0xab,0xbf,0xfc,0x7e,0x59,0x48,0x5e,0xd0,0xae,0x17,
    0x36,0x2a,0xa4,0x5e,0xd0,0x30,0x16,0xd8,0x97,0x1d,0x18,0x70,0xaf,0x36,0x40,0x63,
    0x01,0x7d,0xdf,0x09,0x88,0x1b,0xcf,0x41,0xe2,0x69,0x70,0x3c,0x07,0x07,0xc4,0xad,
    0xbd,0x43,0x02,0xca,0x01,0x9f,0x95,0x63,0xc8,0x71,0xdd,0x02,0xb6,0x09,0xda,0xa4,
    0x5c,0x0e,0xf1,0x7f,0xa8,0x70,0xc4,0xde,0x77,0x95,0xb3,0xbe,0xc8,0x69,0xc0,0xbb,
    0xe7,0x05,0x18,0xe2,0x0f,0xd7,0x9f,0xe7,0xbf,0xa7,0x2a,0x1e,0x81,0xcf,0x53,0x5b,
    0x47,0x4a,0x2f,0x72,0xca,0x42,0x61,0xc7,0x08,0x43,0x4e,0x31,0x5f,0xf7,0x0c,0x88,
    0x97,0xdc,0x98,0xf4,0x0a,0xd8,0x0f,0xd0,0x8c,0xef,0x38,0xf1,0xf9,0x31,0xe9,0x13,
    0x90,0x17,0x34,0x93,0xed,0x2b,0x59,0x60,0xc6,0x77,0x72,0x40,0x1c,0xfa,0xe0,0x1b,
    0xe4,0xe4,0xd3,0x95,0x8f,0x4d,0xff,0x19,0x01,0x6d,0xf6,0xfa,0xcf,0x94,0xbf,0xfc,
    0x38,0x9e,0x15,0x10,0xf7,0x31,0x74,0x76,0x40,0xf9,0xb3,0x9c,0xbe,0x73,0xa4,0xcf,
    0xc7,0xea,0x80,0x80,0xbc,0xe7,0xb8,0x71,0x1b,0xa8,0x71,0x6b,0x74,0xe3,0x76,0x6e,
    0x40,0xdc,0xe4,0x7e,0x1c,0x50,0x16,0xf8,0xc5,0x39,0x0f,0xd6,0x98,0x9f,0xa8,0x0f,
    0x83,0x73,0x1e,0xe4,0xa9,0x41,0xc2,0x7e,0xec,0x74,0x9f,0x27,0xdd,0xa3,0x9c,0xee,
    0xf3,0x03,0xe2,0x4f,0xe4,0x3c,0x18,0xeb,0x0b,0x02,0x62,0x83,0x95,0x6b,0x2e,0x74,
    0xe3,0x0d,0xda,0x60,0xf8,0x53,0xe3,0x3d,0x58,0xfd,0xc3,0xb4,0x6a,0x0c,0xd9,0x66,
    0xa5,0x1a,0xcf,0x5c,0x17,0x6e,0x08,0x89,0xfb,0xf2,0xa2,0xec,0xbb,0x31,0x14,0xbd,
    0xc2,0x78,0x00,0x76,0x4b,0x48,0xfc,0x95,0xac,0xd0,0x3b,0x36,0x24,0x8e,0xbf,0xf9,
    0xc2,0x6e,0x0b,0x89,0x63,0x8f,0x62,0x7c,0x77,0x88,0xaf,0xec,0xf8,0x9a,0x42,0xe2,
    0x63,0xab,0xf7,0x47,0xc4,0xee,0x0c,0x29,0xdf,0x14,0x16,0xb2,0x77,0x49,0xb6,0xce,
    0xc9,0x36,0x87,0xc4,0xb1,0xa6,0x98,0xec,0xf8,0x90,0xf2,0xcd,0x4e,0x76,0x82,0x64,
    0x2b,0x4e,0x76,0x62,0x48,0x7c,0xa5,0x6b,0xf7,0x9e,0x90,0xf2,0x13,0x9d,0xec,0xb5,
    0xf2,0x59,0x9d,0xf3,0xd9,0xa4,0x90,0xb8,0x2f,0xe6,0xb3,0x07,0x42,0xd2,0xbd,0xcf,
    0x1e,0x0a,0x89,0x7b,0x9f,0x4d,0x0d,0x89,0x7b,0x9f,0x4d,0x0b,0x89,0x7b,0x9f,0xcd,
    0x10,0x9f,0xf7,0xd9,0xc3,0x21,0x71,0xef,0xb3,0x47,0x42,0xca,0x3f,0xec,0x6c,0x9f,
    0x29,0x59,0xef,0xb3,0xc7,0x42,0xe2,0xde,0x67,0x8f,0x87,0x94,0x7f,0xcc,0xc9,0xfe,
    0x46,0xb2,0xde,0x67,0x4f,0x86,0xc4,0xbd,0xcf,0x7e,0x1b,0x52,0x1e,0x34,0xe4,0x2c,
    0xac,0x63,0xff,0x15,0xd2,0x97,0xa0,0x21,0xd7,0x5c,0xa8,0x58,0x6c,0x70,0xb1,0xf8,
    0xb4,0xfc,0x5a,0x76,0x7e,0x7d,0x3e,0x24,0xee,0x8b,0xf9,0xf5,0x4f,0x21,0xe9,0xde,
    0xaf,0x7f,0x0e,0x89,0x7b,0xbf,0xce,0x0b,0x89,0x7b,0xbf,0xce,0x0f,0x89,0x7b,0xbf,
    0xbe,0x24,0x3e,0xef,0xd7,0x85,0x21,0x71,0xef,0xd7,0x97,0x43,0xca,0x2f,0x74,0xbe,
    0x59,0x24,0x59,0xef,0xd7,0xc5,0x21,0x71,0xef,0xd7,0xbf,0x84,0x94,0x5f,0xec,0x64,
    0x5f,0x95,0xac,0xf7,0xeb,0xd2,0x90,0xb8,0xf7,0xeb,0xb2,0x90,0xf2,0x4b,0x9d,0xec,
    0x33,0xf2,0x59,0xc9,0xf9,0x6c,0x55,0x48,0xdc,0x17,0xf3,0xd9,0x6b,0x21,0xe9,0xde,
    0x67,0x6f,0x84,0xc4,0xbd,0xcf,0xde,0x0c,0x89,0x7b,0x9f,0xbd,0x15,0x12,0xf7,0x3e,
    0x7b,0x47,0x7c,0xde,0x67,0xab,0x43,0xe2,0xde,0x67,0xef,0x86,0x94,0x5f,0xed,0x6c,
    0x5f,0x23,0x59,0xef,0xb3,0xf7,0x43,0xe2,0xde,0x67,0x6b,0x43,0xca,0xbf,0xef,0x64,
    0x3f,0x90,0xac,0xf7,0xd9,0x87,0x21,0x71,0xef,0xb3,0x75,0x21,0xe5,0x3f,0x74,0xb1,
    0x38,0x37,0xa4,0x2f,0xd7,0xd5,0xc4,0x22,0x7e,0x37,0x69,0xdf,0xb5,0x3c,0x63,0xcc,
    0x22,0x57,0x82,0xbf,0xc1,0xe5,0xda,0x91,0xca,0xb5,0xcd,0xca,0xb5,0x97,0xbb,0x5c,
    0x0b,0xda,0x65,0x79,0xb9,0x5c,0x3a,0x2f,0x73,0xf1,0x7d,0x45,0x40,0xbd,0xb6,0xc7,
    0x00,0xf6,0x8b,0x40,0x78,0xa9,0xd0,0x7f,0x65,0x40,0x1c,0xfd,0x80,0x7d,0xa6,0xeb,
    0x72,0xd9,0x07,0x9e,0xd1,0x01,0xed,0x80,0xcd,0x57,0xaa,0xcd,0xe3,0x72,0x5b,0xc6,
    0x68,0x7d,0xb5,0x36,0xbb,0x46,0xbb,0xb6,0xd9,0x2d,0x22,0x8e,0xfb,0x08,0xac,0x31,
    0x78,0x7e,0xd8,0x3d,0xe2,0xde,0x15,0x34,0x5b,0x63,0xbe,0x1b,0x11,0xb7,0xfd,0xd0,
    0x61,0x11,0xb1,0x46,0xb7,0x8e,0x7e,0x2f,0x22,0xde,0xac,0xbd,0x23,0xf4,0x1f,0x1e,
    0x11,0xff,0x8d,0xfa,0x73,0x54,0xb4,0xb3,0xbf,0x7a,0x46,0x85,0xbf,0x40,0xeb,0x91,
    0x17,0x60,0xe8,0x63,0x8f,0xa8,0xb0,0xf3,0xfb,0xb2,0xd3,0xfb,0xe6,0xd8,0x88,0xb8,
    0xf9,0xc6,0xe4,0xf0,0x6b,0xbe,0xe9,0x15,0xb1,0x4d,0xf8,0xeb,0x58,0xe9,0x47,0xbb,
    0xdb,0xe3,0xa2,0x5d,0xf0,0xf4,0xce,0xcb,0xe9,0x92,0xc7,0x75,0xbf,0x7c,0xc7,0x8e,
    0x3d,0x78,0x1f,0xf9,0xcc,0xfc,0x66,0xe5,0x26,0xd9,0x75,0x42,0xc4,0xbd,0x32,0xfa,
    0xd9,0x5f,0xf7,0x27,0x27,0x46,0xc4,0xad,0xdc,0x90,0xf3,0x02,0xef,0x1b,0xf1,0x99,
    0x18,0xe8,0x2f,0x0a,0xfb,0x41,0xc4,0x36,0x40,0xfb,0xa5,0x9e,0xbb,0x9d,0x14,0x11,
    0x47,0xdf,0x51,0x3f,0x35,0x22,0x86,0xfb,0xa7,0x9b,0x84,0x9d,0x16,0x11,0xc7,0xbd,
    0x16,0xfa,0x8e,0xfe,0xc0,0x76,0xf4,0x61,0x71,0x6e,0x07,0x6c,0xeb,0x27,0x9f,0x6d,
    0xd2,0x7e,0xc1,0xf6,0xea,0xfd,0x23,0xd2,0xac,0x7e,0xb6,0xf8,0x16,0xe5,0x52,0xd5,
    0xe7,0x63,0x11,0xb1,0x0b,0xb4,0x3f,0x35,0x7d,0x03,0xc5,0x07,0x07,0x78,0x7d,0xe7,
    0x46,0xa4,0x99,0xfc,0x79,0x92,0x1f,0x5e,0x23,0x3f,0x58,0xf2,0x13,0x6b,0xec,0xb9,
    0x30,0x22,0xcd,0xe4,0x2f,0x96,0xfc,0x60,0xc9,0xdb,0x9e,0x69,0x58,0x44,0xdb,0x61,
    0x9f,0x61,0x3f,0x8b,0xd8,0xfe,0x79,0x0e,0x1b,0x11,0x51,0xe7,0xc5,0x51,0x11,0x87,
    0x97,0x45,0x94,0x7f,0x52,0xb1,0x73,0x79,0x44,0x0c,0xcf,0x0e,0x11,0x0f,0xdb,0x5c,
    0x3c,0x80,0x36,0x2a,0x2f,0x4b,0x15,0x0f,0xa3,0x9c,0x4f,0xaf,0x54,0x1f,0x2e,0xd0,
    0xfe,0xce,0xfa,0x30,0x3a,0x22,0xcd,0xf8,0x1a,0x9d,0xef,0x3d,0xdf,0x35,0x11,0x69,
    0xf3,0x65,0xeb,0x98,0x48,0x98,0xf2,0x14,0xb0,0x6b,0x23,0xea,0x1b,0xe3,0xf4,0xfd,
    0x4a,0xfa,0x86,0xea,0x7e,0xc0,0xf4,0x5d,0x17,0x91,0x66,0x7c,0x37,0x88,0x6f,0x78,
    0x0d,0xdf,0x8d,0x11,0x69,0xc6,0x77,0x8b,0xf8,0xc6,0xd5,0xf0,0xdd,0x1a,0x91,0x66,
    0x7c,0xb7,0x8b,0x6f,0x70,0x0d,0xdf,0x1d,0x11,0x69,0xc6,0x37,0x4e,0x7c,0x0d,0x35,
    0x7c,0x77,0x45,0xa4,0x19,0xdf,0xdd,0xe2,0xb3,0x67,0x06,0x96,0xaf,0x27,0x44,0xa4,
    0x35,0xbb,0x7c,0x7d,0x5f,0x44,0x1c,0x79,0x08,0xf9,0x0c,0xf7,0xdf,0x78,0xf6,0x6a,
    0x79,0xea,0xfe,0x88,0xf7,0xe4,0xf7,0xb9,0x3c,0x35,0x29,0x22,0x6e,0x39,0x6f,0xb2,
    0xe6,0xaf,0xdf,0xb3,0x3f,0x14,0xf1,0xf9,0x03,0xee,0x35,0xec,0xbe,0x77,0x4a,0x44,
    0xde,0x87,0x5c,0xce,0x99,0x1a,0x11,0x5f,0xee,0xfa,0x33,0x2d,0x22,0x6e,0x72,0x8f,
    0x48,0x0e,0xba,0x4c,0xee,0xd1,0x88,0xf8,0x20,0x27,0x37,0x33,0x22,0x6e,0x63,0xfc,
    0x44,0x44,0x5d,0x33,0x95,0x8f,0x66,0xb9,0x3c,0x88,0x7c,0xfe,0x64,0x5e,0x9f,0xa5,
    0xf8,0xc3,0xb5,0xe5,0xbc,0xa7,0x22,0xca,0x36,0x2a,0xe7,0x19,0xcf,0x2c,0x97,0xf3,
    0xde,0xcb,0xb8,0x26,0x20,0x6e,0xc1,0xef,0xe5,0x7f,0x2f,0xf9,0x29,0xca,0xbf,0xaf,
    0xba,0x76,0x41,0x9b,0x9d,0x97,0xe7,0xa4,0x73,0xb6,0x72,0x1a,0xf2,0xcd,0x33,0x11,
    0xe3,0x12,0xf1,0x86,0x58,0xb2,0x3c,0xf4,0x6c,0x44,0x9a,0xe5,0xa1,0x57,0x25,0xfb,
    0x9c,0xf2,0x1e,0xfa,0xfa,0x47,0xd9,0xfb,0x84,0xd3,0xf7,0x42,0xc4,0x58,0x43,0x1c,
    0xdd,0xe5,0xf4,0xbd,0x18,0x91,0xf6,0x97,0xac,0xb8,0x17,0x5b,0x10,0x51,0xc7,0x24,
    0x27,0xff,0x52,0x44,0xdc,0xca,0xf5,0x92,0x5f,0x18,0x51,0x07,0xe8,0xf5,0x79,0x0e,
    0x07,0xf6,0x4a,0xc4,0x9c,0x7d,0xa8,0xe8,0x78,0x06,0x8f,0xe7,0xed,0xde,0xde,0x57,
    0xe5,0x3f,0xf0,0x7f,0x99,0xb1,0x5f,0xe8,0xff,0x2b,0xf2,0x07,0x78,0xb7,0x29,0xc7,
    0x2e,0x75,0x79,0x65,0x79,0xc4,0x1c,0x64,0x79,0x65,0x45,0x44,0xcc,0xf2,0xca,0x17,
    0x2e,0xaf,0x80,0xb6,0x12,0xeb,0x8c,0xf4,0xac,0x74,0xf3,0xe2,0x35,0x97,0x2f,0xfc,
    0xfc,0xf9,0x5b,0x44,0x9a,0xf1,0xfd,0xdd,0xe5,0x9f,0x01,0x8e,0xef,0xcd,0x88,0x34,
    0xcb,0x2b,0x6f,0x45,0xc4,0x30,0x9f,0x2c,0x56,0x57,0x4b,0x76,0xb5,0x5b,0xff,0xdf,
    0x8d,0x88,0xfb,0x58,0x7d,0x2f,0x22,0x6e,0xb1,0xba,0x26,0xa2,0xbe,0xf7,0x9c,0x1d,
    0xff,0x2b,0x5d,0xeb,0x6b,0xec,0xf8,0x20,0x22,0xcd,0xda,0x5c,0x2f,0xbe,0xb1,0xae,
    0xcd,0x7f,0x44,0xc4,0xb1,0xaf,0x33,0xb9,0x7f,0x46,0xc4,0xad,0xcd,0x8f,0x22,0xea,
    0xfa,0xa7,0x6b,0xf3,0x63,0xb7,0x7e,0x78,0x1f,0x6d,0x8c,0x48,0x33,0xbe,0x4f,0xc5,
    0x37,0xbe,0x86,0xef,0xb3,0x88,0x34,0xe3,0xdb,0x22,0xbe,0x01,0x35,0x7c,0x5b,0x23,
    0xd2,0xcc,0xde,0x6d,0xe2,0x5b,0xe3,0xd6,0xfd,0x72,0xcc,0xbc,0xd0,0x4d,0xb1,0x57,
    0x7d,0xf7,0x1f,0x93,0x17,0x34,0x8b,0xdd,0x56,0x31,0xc7,0x10,0xef,0x71,0x0c,0x0b,
    0x63,0xf9,0xb4,0x5c,0xe4,0xa4,0x28,0x26,0x2f,0x68,0x86,0x25,0x31,0xf1,0x8f,0xa2,
    0x42,0x36,0x8b,0xd9,0x5f,0xaf,0x6f,0xb7,0x98,0x7d,0xf3,0xfa,0x5a,0xc7,0xe4,0xdd,
    0xcd,0xe9,0x6b,0x13,0x13,0x47,0xff,0x66,0x29,0x5e,0xdb,0xc6,0x6c,0x07,0xb4,0xc7,
    0xe5,0x97,0x76,0x31,0xf1,0x41,0x7a,0x3f,0x68,0xfd,0xeb,0x10,0xb3,0x8f,0xa0,0x23,
    0x1f,0xe3,0xf9,0xa7,0xcf,0xc7,0x7b,0xc6,0x7c,0x26,0x0a,0x3e,0xcb,0xc7,0x1d,0x63,
    0xe2,0x96,0x8f,0xf7,0x8a,0x77,0xcd,0xc7,0x7b,0xc7,0xbb,0xe6,0xe3,0xce,0x31,0x79,
    0x41,0xb3,0x71,0xd8,0x27,0x26,0xee,0xf3,0xf1,0xbe,0x31,0x71,0x93,0xfb,0xa6,0xe4,
    0x7c,0x3e,0x3e,0x20,0x26,0xee,0x63,0xfc,0x5b,0x31,0x71,0xcc,0xd1,0xae,0xf1,0xce,
    0xb9,0xf7,0xc0,0xbc,0xde,0x55,0x73,0xf4,0x40,0xe7,0xbf,0x83,0x63,0xb6,0x07,0x59,
    0xcb,0xa7,0x87,0xc4,0xc4,0x2d,0x1f,0x9b,0x1c,0x7e,0x2d,0x1f,0xaf,0x55,0x3e,0xc6,
    0x7c,0x07,0x3f,0x74,0xda,0x7e,0xf8,0x50,0xe9,0xb4,0x7c,0x7c,0x8c,0xb3,0x05,0xb4,
    0xee,0x79,0x39,0x42,0x3a,0x71,0x6d,0xf9,0xef,0x70,0xc5,0x01,0xc6,0x7d,0xab,0xf2,
    0xd3,0x31,0xe2,0x3b,0xc2,0xf1,0x1d,0xad,0xf8,0x43,0xbc,0x7d,0x54,0xc3,0x77,0x4c,
    0x5c,0xe4,0xbc,0xbf,0x66,0xd4,0x89,0x36,0x8e,0x56,0x9b,0x96,0x93,0x7b,0xc5,0xa4,
    0xfb,0x9c,0x7c,0x9c,0xfa,0x0c,0x5f,0x58,0x9e,0xef,0x13,0x33,0xdf,0x1c,0xe7,0xe2,
    0xff,0xc4,0x98,0x78,0x47,0x67,0xd3,0x0f,0x62,0xe2,0x56,0x2c,0x77,0x9f,0x14,0xb3,
    0x2d,0xd0,0x2d,0x77,0x9f,0x12,0x17,0xb9,0x1b,0x74,0x9f,0xbb,0xbf,0xb0,0x3d,0x6f,
    0x5c,0xe4,0xe3,0x33,0x62,0xee,0xff,0x2c,0x1f,0xf7,0x8b,0x89,0x59,0x3e,0xfe,0xdc,
    0xf9,0x17,0xb4,0xfe,0x79,0x59,0x2b,0x3d,0xb8,0xb6,0xdc,0x70,0x76,0xcc,0x39,0x8f,
    0xf7,0xab,0x4d,0x2e,0x6e,0x7e,0x14,0x93,0xd6,0xb2,0x27,0x16,0xdf,0x86,0xd2,0xce,
    0x7c,0xe7,0xc6,0xa4,0x59,0x5c,0x0e,0x12,0x1f,0xde,0x75,0xb6,0x3c,0x33,0x8f,0x89,
    0xdb,0x3d,0xd5,0xf9,0x31,0xb1,0x81,0xe5,0x22,0x0f,0x5e,0x10,0x53,0xd7,0xf9,0xae,
    0xcd,0x21,0x71,0x91,0xdf,0x7c,0xee,0xbd,0x28,0x26,0xcd,0xf8,0x86,0xc6,0x45,0xbe,
    0xf4,0x7b,0xd0,0x86,0x98,0x34,0x5b,0x2b,0x86,0xc5,0xc4,0x06,0xb8,0x3d,0xe8,0x25,
    0x31,0xf5,0x0d,0x73,0x7d,0xf8,0xb9,0xd3,0x67,0xba,0x86,0xc7,0xc4,0xad,0x0f,0x23,
    0x62,0x62,0xe7,0xb8,0x3e,0x8c,0x8c,0xa9,0x6f,0x44,0x5c,0xc8,0x5d,0x11,0x33,0x77,
    0x9a,0xad,0xa3,0xe3,0x62,0x5f,0xe8,0xef,0x0d,0xae,0x8a,0x49,0x33,0x5b,0xaf,0x8e,
    0x89,0x35,0x3b,0x5b,0x1b,0x63,0xea,0xbb,0xda,0xe5,0x99,0x31,0x2e,0xcf,0x58,0x1b,
    0xd7,0xc6,0xc4,0x87,0xd4,0x8c,0xe9,0x2f,0x63,0xd2,0x8c,0xef,0x3a,0xf1,0x61,0xec,
    0xc7,0x3b,0xbe,0xeb,0x63,0xd2,0x8c,0xef,0x46,0xf1,0xd9,0x19,0x1a,0xe3,0xbb,0x29,
    0x26,0xcd,0xf8,0x6e,0x15,0x1f,0x02,0xd9,0xb7,0x3b,0x36,0x26,0xcd,0xf8,0xee,0x10,
    0xdf,0x94,0x9a,0x58,0x6a,0x8a,0x49,0x33,0x1f,0x8c,0x8b,0x19,0x87,0xfe,0xde,0xbb,
    0x59,0x58,0x83,0xf3,0xcb,0xf8,0x98,0xbc,0xcd,0x4e,0x76,0x42,0x4c,0x7f,0x79,0xd9,
    0x7b,0x84,0x79,0xd9,0x7b,0x63,0xf2,0xde,0xe3,0x64,0x7f,0x1d,0xd3,0x57,0x5e,0x76,
    0x92,0x30,0x2f,0xfb,0x40,0x4c,0xde,0x49,0x4e,0xf6,0xc1,0x98,0xb1,0xdc,0xec,0x64,
    0xa7,0x08,0x6b,0x72,0xb2,0x53,0x63,0xf2,0x4e,0x71,0xb2,0xd3,0x63,0xfa,0xde,0xcb,
    0x3e,0x2c,0xcc,0xcb,0x3e,0x12,0x93,0xf7,0x61,0x27,0x3b,0x33,0xe6,0x78,0x78,0xd9,
    0xc7,0x85,0x79,0xd9,0x27,0x62,0xf2,0x3e,0xee,0x64,0x9f,0x8c,0x19,0xbb,0xbe,0xbf,
    0x4f,0x09,0xf3,0xfd,0x9d,0x15,0x93,0xf7,0x29,0x27,0xfb,0xfb,0x98,0xe3,0xeb,0x65,
    0x9f,0x16,0xe6,0x65,0xe7,0xc4,0xe4,0x7d,0xda,0xc9,0x3e,0x13,0x73,0xcc,0xbd,0xec,
    0x5c,0x61,0x5e,0xf6,0xd9,0x98,0xbc,0x73,0x5d,0x6e,0x7d,0x3e,0xe6,0xb8,0xc3,0x8f,
    0xb3,0x1c,0xfe,0xe7,0x98,0x63,0x0a,0x1f,0xcd,0x51,0xce,0x06,0x3e,0x2f,0x26,0xed,
    0x79,0xc7,0xbb,0x30,0xe6,0x18,0xc2,0x27,0xcf,0x3a,0xde,0x57,0x62,0xd2,0xc0,0x6b,
    0x6b,0xfe,0xa2,0x98,0xcf,0x8a,0x56,0xba,0xf7,0x11,0x8b,0x63,0xe2,0xa6,0x6f,0x49,
    0x4c,0xcc,0x8a,0xad,0x2b,0xaf,0xc6,0x6c,0x7f,0x89,0xd3,0xb7,0x54,0xfa,0x06,0x39,
    0x7d,0xcb,0x62,0xe2,0xa6,0x6f,0x45,0x4c,0xcc,0x8a,0xe9,0x5b,0x19,0xd3,0xc6,0x15,
    0x6e,0x4d,0xf9,0x5b,0xcc,0x76,0x56,0x3a,0xec,0x8d,0x98,0x38,0xde,0x5f,0xcf,0x13,
    0xf6,0x66,0x4c,0x1c,0x98,0xf1,0xbd,0xa5,0xbe,0xbe,0xe9,0xd6,0xa3,0x77,0xdc,0x7a,
    0xf4,0x56,0xcd,0x7a,0xf4,0xb9,0xd6,0x91,0xb5,0xce,0xd6,0x75,0x31,0x9f,0x59,0x9c,
    0xab,0x67,0x12,0x36,0xa7,0xff,0x11,0x17,0xcf,0x8c,0xc0,0xf7,0xaf,0x98,0xcf,0x35,
    0xce,0xd3,0x73,0x0b,0xc3,0x3f,0x8e,0xc9,0x6b,0xc5,0xfa,0xba,0x31,0x26,0xed,0x5f,
    0xae,0x5f,0x9f,0xc4,0x6c,0x6f,0xa3,0x62,0x09,0xd8,0x67,0x31,0xf1,0x45,0xae,0xaf,
    0x5b,0x84,0xa1,0xaf,0x0b,0x84,0x6d,0x8d,0xc9,0x0b,0x9a,0xef,0xcb,0xe7,0x6e,0x8f,
    0xb0,0x23,0x63,0xff,0xb1,0x4e,0xe2,0x5d,0xfb,0x5a,0x47,0xfb,0x34,0x23,0x06,0xda,
    0x56,0xad,0xa9,0xd8,0x4f,0x62,0x0d,0x9e,0x5c,0xcf,0x75,0x78,0x81,0x9e,0x55,0x1a,
    0xfe,0xa0,0xc3,0x5f,0x2f,0xed,0xbc,0xa6,0x7f,0xe1,0x74,0x7f,0x95,0x71,0x1f,0x80,
    0xfd,0x0a,0x6c,0xf0,0x36,0x6d,0x54,0xbb,0xa0,0x7d,0xea,0x68,0xd0,0xbf,0x26,0xe3,
    0xde,0x0b,0x34,0xd8,0xe0,0x69,0x7f,0xcf,0xd8,0x2e,0x68,0x0f,0x8a,0xe6,0xef,0xf1,
    0xb6,0xb9,0x36,0xb6,0x67,0xbc,0x27,0xc4,0x3d,0x22,0x6c,0xf1,0xb6,0xad,0x57,0xfb,
    0xa0,0x6d,0x74,0x34,0xb4,0xb1,0x3a,0xe3,0xbd,0x38,0x68,0x6b,0x6a,0x68,0xaf,0xa9,
    0x7d,0xd0,0xfe,0x2e,0x9a,0x7f,0x8e,0xb7,0xdd,0xb5,0xb1,0x55,0x6d,0xe0,0xb9,0x24,
    0x6c,0xf1,0xb6,0xad,0xcb,0xf8,0x2c,0x10,0xb4,0xf5,0x8e,0x86,0x36,0xde,0xd1,0xbe,
    0x13,0xb4,0xd5,0x35,0xb4,0x55,0x19,0x7d,0x0e,0xda,0x6b,0xa2,0x61,0x7f,0x74,0x58,
    0x52,0xec,0x8f,0xc0,0xf3,0x55,0x8e,0x03,0x83,0x4d,0x5f,0xb9,0x7d,0x6b,0x5d,0xc2,
    0xf8,0xc5,0xbc,0x7f,0x5c,0xcf,0xed,0x2a,0x09,0xf1,0x66,0x9d,0x6d,0x6b,0xb9,0x07,
    0x4a,0x74,0xae,0x38,0x29,0xf6,0x8a,0x41,0xc2,0x75,0x1e,0x34,0x5b,0xff,0xc2,0x84,
    0x7b,0x80,0x40,0xfc,0xb6,0x96,0xc7,0xc9,0xae,0xf7,0x0c,0x69,0xb2,0xeb,0x3d,0x43,
    0x96,0x90,0x17,0x34,0xdb,0xfb,0xd7,0x27,0xc4,0xfd,0x3d,0xc3,0x6e,0x09,0x71,0x93,
    0x6b,0x2b,0x39,0x7f,0xcf,0xd0,0x2e,0x21,0xee,0xef,0x19,0xda,0x27,0xc4,0xad,0x0f,
    0x7b,0xa8,0xaf,0xd0,0x07,0xdf,0x75,0x71,0xbe,0x83,0xef,0x3b,0xe6,0xf5,0x2e,0xf2,
    0x1d,0xae,0xcd,0x1f,0x9d,0x12,0xca,0x42,0x9f,0xf5,0x67,0x9f,0x84,0x7a,0x80,0xd9,
    0xbd,0xc5,0xbe,0x09,0x71,0xbb,0xb7,0x30,0x5d,0xf8,0xb5,0x71,0xdc,0x94,0x71,0x9c,
    0x31,0x36,0xe0,0xef,0x28,0x5a,0xf5,0x5e,0x3c,0x63,0x3b,0xa0,0x75,0x12,0x0d,0xf7,
    0x6d,0x38,0xa7,0x82,0x73,0x6d,0x27,0xe4,0x3d,0x45,0xce,0xfd,0x66,0xc2,0xb3,0x2b,
    0xa1,0xda,0xb7,0xbc,0x7b,0x40,0x42,0x9a,0xd9,0xfd,0xed,0x84,0x18,0xf4,0x5a,0x7e,
    0x3a,0x28,0x21,0x6e,0xc5,0x72,0xd1,0xc1,0x09,0x63,0x13,0x74,0xcb,0x9d,0x87,0x24,
    0x45,0xee,0x04,0xdd,0xe7,0x4e,0x8b,0xb1,0xc3,0x92,0x22,0xb6,0xb7,0x64,0x8c,0x7d,
    0xcc,0x85,0x43,0xe4,0x4b,0xeb,0xf7,0x67,0xea,0x77,0x75,0x9e,0x64,0xa4,0xcd,0xb4,
    0x77,0x0c,0x09,0xdf,0x87,0x7c,0xa6,0x67,0x52,0x47,0x4b,0x37,0x7e,0x2d,0x56,0x1f,
    0xaa,0x27,0xdf,0x14,0x9d,0xb7,0x44,0x7f,0x70,0x56,0x68,0xaa,0x70,0x2b,0x8f,0xab,
    0x9f,0xd3,0x44,0x83,0xcd,0x5b,0xdc,0x59,0x87,0xef,0x27,0xa4,0x95,0x4a,0xee,0xfc,
    0x83,0xb0,0xb2,0xc3,0x7a,0x0b,0xc3,0xfb,0xad,0xc7,0x74,0x26,0xe3,0xf6,0x80,0xef,
    0x26,0x10,0x3b,0x4d,0xee,0xbd,0x11,0xf0,0x3b,0xf2,0xd2,0xa4,0x77,0x3d,0xb8,0xfe,
    0xad,0xfa,0x76,0x57,0x40,0xdb,0xa7,0x28,0x26,0x8c,0xa7,0xc9,0xbd,0x0f,0x6a,0x96,
    0x5e,0xf4,0xf7,0x2e,0xe9,0x42,0x1b,0x13,0x5c,0x1b,0xe0,0xb9,0x3b,0x2f,0x13,0x24,
    0x8f,0x6b,0xbb,0x87,0xba,0x37,0x60,0xbf,0xac,0x7e,0x7f,0xc0,0x3e,0x59,0x7d,0x72,
    0xc0,0xfe,0xd8,0xfb,0x8e,0x07,0x03,0xca,0x80,0x6f,0xb2,0xda,0xba,0x26,0xd9,0xf9,
    0x3d,0xd8,0x4f,0x30,0x26,0x1a,0x07,0x5c,0x9f,0x5f,0x66,0x8c,0x0e,0x4a,0x8a,0xb3,
    0x88,0xcd,0x3a,0xcb,0x0f,0x1a,0xf4,0x9e,0xef,0x68,0x68,0x63,0xac,0x72,0x0a,0x68,
    0x83,0x13,0xd2,0x71,0x16,0xcc,0xec,0x1a,0x92,0x50,0x9f,0xd9,0x75,0x51,0x42,0xcc,
    0xca,0xf5,0x92,0xfd,0x69,0x42,0xf9,0x8b,0x5c,0x6c,0x0f,0xd5,0x3c,0x1b,0xe4,0xfa,
    0xd9,0x90,0x10,0x37,0x7d,0xc3,0x12,0x62,0x56,0x6e,0x91,0xbe,0x4b,0x12,0xea,0x1c,
    0x96,0x14,0xef,0x70,0x2e,0x4d,0x88,0x5b,0xfd,0xe7,0x09,0xfb,0x60,0x7b,0xa9,0x11,
    0x09,0x31,0xf0,0x61,0x1c,0xaf,0x91,0x6f,0x46,0x3a,0x99,0xcb,0x25,0x63,0xfe,0xb8,
    0xe2,0x6b,0xfc,0x61,0x7d,0xba,0x32,0x21,0x1d,0x67,0xe9,0xec,0xdd,0xd2,0x55,0x09,
    0xf1,0xa5,0x59,0xa1,0xf3,0xea,0x84,0xb8,0xd9,0xd1,0x98,0xb0,0x9d,0xab,0x6b,0xec,
    0xb8,0xc6,0xcd,0xc3,0xd6,0xf5,0xb4,0x17,0xe3,0xd6,0xa8,0x71,0xb4,0xb8,0xbe,0x36,
    0x21,0xdd,0x9f,0xf5,0xf9,0x55,0x42,0xfc,0x5a,0x37,0xce,0xd7,0x39,0xdb,0x41,0x87,
    0xed,0x97,0xe9,0x4c,0xe7,0xf5,0x09,0xe9,0xa6,0xf3,0x26,0xe9,0x2c,0x3b,0x9d,0x37,
    0x4b,0xdf,0x4d,0x4e,0xe7,0x2d,0x4e,0xe7,0xcd,0x35,0x3a,0x6f,0x4d,0x48,0x37,0x9d,
    0x77,0x48,0x67,0x9d,0xd3,0xd9,0x24,0x9d,0x77,0x38,0x9d,0x77,0x3a,0x9d,0x4d,0x35,
    0x3a,0xc7,0x25,0xa4,0x9b,0xfc,0x04,0xd9,0xe3,0x6d,0x9a,0xe8,0xe4,0x27,0xd4,0xc8,
    0xdf,0x93,0x90,0x6e,0xf2,0x93,0x24,0xeb,0xdb,0x7f,0xc0,0xc9,0x4f,0xaa,0x91,0x9f,
    0x9c,0x90,0x6e,0xf2,0xd3,0x24,0xeb,0xe5,0xa7,0x3b,0xf9,0x69,0x35,0xf2,0x33,0x12,
    0xd2,0x87,0x2a,0x9e,0x1e,0xf9,0x9a,0x78,0xba,0x48,0xb4,0x99,0x5f,0x43,0xb3,0xf7,
    0x98,0x8f,0x25,0x94,0x05,0xcf,0xe5,0xfa,0xce,0xe8,0xf1,0x84,0x38,0x62,0xe8,0x09,
    0xc5,0xd0,0x13,0x8a,0x21,0xd0,0xdb,0xd6,0x93,0x07,0x71,0x75,0x6f,0x7e,0xbd,0x42,
    0x34,0xd8,0xd5,0xa6,0x9e,0xe7,0x8d,0x41,0x7b,0x39,0x29,0x68,0xe8,0xcf,0xee,0xca,
    0x75,0xa0,0xfd,0x55,0xb4,0xdf,0x2b,0x17,0xfe,0x36,0x21,0x1d,0xf7,0x44,0x9b,0xb1,
    0x5f,0x11,0xdd,0xf2,0x0e,0xe8,0x4f,0xe5,0x65,0x95,0xec,0x79,0x4a,0x73,0x19,0xf6,
    0xcc,0x4e,0x18,0x77,0x88,0x13,0x8c,0xeb,0xc4,0x5c,0x27,0x6c,0x99,0x93,0x90,0x06,
    0x7b,0x8d,0x77,0xae,0xf8,0x30,0x7e,0x93,0x1d,0xef,0x73,0x09,0x69,0x9e,0xf7,0x4f,
    0xd2,0x07,0xbe,0x19,0x8e,0xf7,0x85,0x84,0x34,0xcf,0x3b,0x3f,0x61,0x7b,0xd0,0xf3,
    0x82,0xe3,0x5d,0x98,0x90,0x36,0xbf,0xba,0x76,0x86,0x55,0xec,0x65,0xad,0x9d,0x5d,
    0x44,0x7f,0x4e,0x3e,0x58,0x24,0x9f,0xc1,0x7f,0xc8,0xbb,0xcb,0x5d,0xff,0x41,0x5b,
    0x8c,0xbd,0x8f,0xfa,0xbf,0xb8,0x1a,0x0f,0x6c,0x63,0x49,0xc2,0x33,0xdd,0x90,0x1d,
    0x97,0x63,0xb0,0x67,0x99,0xda,0x5c,0xa2,0x71,0x34,0xb9,0xe5,0x6e,0x1c,0x31,0x76,
    0xf3,0xe5,0xd7,0x65,0xd2,0x0f,0xde,0x15,0xe2,0x5d,0xe1,0xf6,0x34,0x7f,0xd5,0xf8,
    0x34,0x97,0x76,0x8e,0x0b,0x8c,0xc7,0x5c,0xd9,0xff,0xb7,0x84,0xe3,0x7f,0xa1,0xec,
    0x5f,0xef,0xec,0x07,0xed,0xf5,0xbc,0xbc,0x21,0xb9,0xd7,0xd5,0xd6,0x7a,0xd5,0xdf,
    0xd0,0xfc,0x46,0x7f,0xde,0x94,0x6f,0x4b,0xa5,0xc2,0x67,0x6f,0xc9,0x67,0xad,0x44,
    0x37,0xde,0x77,0xc4,0x5b,0x76,0xbc,0xab,0x1d,0xef,0x3b,0x55,0xbf,0x33,0x36,0xdf,
    0x15,0x6e,0xfa,0x56,0x3b,0x3d,0x6b,0xa4,0xa7,0xce,0xe9,0x79,0xdf,0xe9,0x59,0xe3,
    0xf4,0xac,0x75,0x7a,0xa0,0xf3,0x7d,0x37,0x16,0x1f,0x24,0x3c,0xf7,0xbe,0xd6,0x8d,
    0xc5,0x3a,0xe9,0xfe,0xa0,0xa6,0xcf,0xeb,0xdd,0x58,0xb4,0xab,0xe7,0x39,0x7a,0xf8,
    0x65,0x9d,0xfc,0x64,0xf3,0xf1,0x9f,0x5a,0x3b,0x2c,0xa6,0x36,0x24,0xc4,0x20,0xf3,
    0xd3,0x32,0x6d,0xfa,0xd8,0xcd,0xf1,0x0d,0xca,0x15,0x0d,0xa2,0x7d,0xf2,0x35,0xb4,
    0x39,0x1a,0xb3,0xcf,0x12,0x62,0x1f,0x27,0xc5,0x39,0x62,0x7c,0x2f,0x89,0xb3,0xfa,
    0xf6,0x0e,0x61,0x73,0x42,0x3e,0xe0,0xb8,0x47,0x40,0xce,0xa9,0xbe,0x73,0x71,0x7a,
    0x37,0xd7,0xe8,0xfd,0x42,0x7a,0x3f,0x49,0x0a,0x3d,0xdb,0x13,0xe2,0xb5,0x7a,0xbe,
    0x74,0x7a,0xb6,0x4b,0xcf,0x8f,0xcb,0x5c,0xa7,0xb1,0xa9,0x05,0x0d,0xfd,0x47,0x7b,
    0x86,0x57,0x1c,0xfe,0x65,0x52,0xdc,0x5f,0x44,0xa9,0x3e,0x9c,0x73,0xef,0xca,0xe2,
    0x94,0xf8,0x00,0xf7,0x8e,0x3a,0x49,0x89,0x4f,0x74,0xf7,0x26,0x99,0x64,0xcb,0x4e,
    0xb6,0x3e,0x25,0xee,0xdf,0x6f,0xef,0x96,0x12,0x1f,0xe5,0xde,0x6f,0xb7,0x4e,0xa9,
    0x13,0x34,0xd3,0xd7,0x46,0xfa,0xea,0x9c,0xbe,0xb6,0x29,0xf1,0x01,0x4e,0xb6,0x5d,
    0x4a,0xf9,0xb6,0x4e,0x76,0xcf,0x94,0x7d,0xf4,0xfd,0xe8,0x98,0x12,0xf7,0xfd,0xf8,
    0x46,0x4a,0xdc,0xf7,0xa3,0x93,0x64,0x7d,0x3f,0xf6,0x4e,0x89,0xfb,0x7e,0x74,0x4e,
    0x89,0xfb,0x7e,0xec,0x93,0x52,0x67,0x67,0x67,0x4b,0x17,0xe9,0xf3,0xfd,0xd8,0x2f,
    0x25,0xee,0xfb,0xb1,0x7f,0x4a,0x79,0xd0,0xec,0xde,0x72,0x76,0xc0,0xfe,0x81,0x86,
    0x9c,0x30,0xc7,0xed,0x5b,0x41,0x7b,0x3a,0x2f,0x73,0xb4,0x6f,0xc5,0xb5,0xad,0x6f,
    0x7f,0xd0,0xbe,0xd5,0xea,0xcf,0x69,0xdf,0x6a,0xf5,0xe7,0xdd,0xbe,0xb5,0x9a,0xab,
    0x03,0xca,0x80,0x0f,0x34,0x9b,0x3b,0x2f,0x04,0x1c,0x03,0xab,0xbf,0x18,0xb0,0x2f,
    0x76,0xef,0x30,0x3f,0xe0,0x7d,0xb5,0x7d,0x97,0x78,0xa3,0xe6,0x6c,0xd7,0x94,0xbc,
    0x2f,0xb8,0x79,0xd7,0x3d,0x65,0xbd,0x6b,0x5a,0x60,0xdf,0x13,0x9f,0xc7,0x8e,0x4c,
    0x69,0x0f,0xb0,0x1b,0x85,0x1d,0x9d,0x12,0xef,0xee,0xb0,0x63,0x53,0xca,0x03,0xb3,
    0xfc,0xd1,0x33,0x25,0x2f,0x68,0xd6,0xd7,0xde,0x29,0xed,0xbc,0x59,0x3c,0xc7,0xa5,
    0xe4,0x03,0xfe,0xdf,0xc2,0xfa,0xa4,0xc4,0xf1,0xed,0xcf,0x48,0xdd,0xf3,0x1d,0x9f,
    0x12,0xc7,0x3d,0x5b,0xf5,0xfd,0x4d,0x5a,0xdc,0xb3,0x81,0x36,0x45,0xfd,0xb7,0x3d,
    0x72,0xdf,0x94,0x3c,0xbf,0x52,0xfd,0xa4,0x94,0x98,0xdd,0x47,0x9f,0x9c,0x12,0xc3,
    0xbc,0xfb,0x9d,0xc6,0xf7,0xd4,0x94,0xf8,0xf2,0x52,0x31,0xcf,0x7f,0x98,0x12,0xb7,
    0x77,0x8e,0x2f,0x49,0xfe,0x34,0xf1,0x82,0x6e,0x6d,0xfe,0xa7,0xfa,0x66,0xef,0x25,
    0xfb,0xa5,0xe4,0x03,0x7e,0x83,0xb0,0x33,0x53,0xe2,0x68,0x17,0xf9,0xd3,0xe2,0x65,
    0x8e,0xee,0x93,0xaa,0xf3,0xa0,0x9e,0x6d,0x21,0xa7,0x82,0x1f,0xb1,0x64,0x36,0x2e,
    0x09,0x18,0x7f,0xed,0x14,0x83,0xcb,0x5c,0x0c,0x82,0xb6,0x34,0x2f,0xcb,0xa4,0x13,
    0xd7,0x66,0xef,0x8a,0x80,0x7a,0x07,0xb9,0x73,0x6a,0xab,0x02,0xe2,0xb0,0xc5,0xee,
    0x51,0x5f,0x53,0x0c,0xad,0xd2,0x79,0xfb,0xd7,0xa5,0xeb,0xf5,0xa0,0xf0,0xc9,0xf4,
    0x7a,0xf2,0x2d,0x97,0x5e,0xf0,0x59,0x9b,0xcb,0x5c,0x3f,0x7a,0xd5,0xb3,0x4d,0xf4,
    0x0d,0x32,0xd0,0xf1,0x88,0xda,0x79,0x33,0x60,0x5f,0x46,0x4b,0xfe,0x6d,0xc9,0xbf,
    0xed,0xda,0x99,0x51,0x4f,0x3e,0xeb,0xaf,0xe1,0x0f,0x0b,0xb7,0xb9,0xd8,0x72,0xb6,
    0x32,0xa0,0xcc,0x70,0x7f,0xb6,0x32,0x20,0xff,0x87,0x6a,0xc7,0xee,0x2b,0x27,0x38,
    0x3b,0x8f,0x95,0xbf,0x71,0xaf,0x0a,0x9b,0xdf,0x76,0xb4,0x6f,0x3b,0x1a,0x74,0xbd,
    0xad,0xfb,0xc8,0x0d,0x35,0xe7,0x29,0x3f,0xca,0xcb,0x06,0xe9,0xfe,0x48,0x3c,0xff,
    0xae,0xb9,0xaf,0xfd,0x04,0x7a,0xc5,0xf3,0x49,0x50,0xac,0x51,0xf8,0xdf,0x00,0x58,
    0xa3,0x5a,0xce,0x03,0x04,0xc4,0x60,0xef,0xbf,0xc5,0xbf,0xa9,0xa6,0xfe,0xef,0xa0,
    0xd8,0x8b,0x1e,0x50,0x4f,0x19,0xe8,0xdc,0xac,0x36,0x2e,0xd6,0xbe,0x7b,0x6b,0x50,
    0xac,0x47,0xe0,0xc3,0x7a,0x64,0xf9,0xec,0x8b,0x80,0xf4,0xcd,0xb2,0x77,0xbb,0xb3,
    0x17,0xb4,0x6d,0x79,0xd9,0xae,0xf6,0xb6,0xb9,0xb9,0xb5,0x43,0x72,0x58,0xbf,0xaa,
    0xc7,0x6f,0x43,0xb6,0x01,0x5f,0xed,0x90,0x9d,0x26,0xb7,0xdd,0xf9,0xf2,0xa4,0x7a,
    0xf2,0x54,0xfd,0x12,0x52,0x3f,0xda,0xad,0x84,0x45,0xbb,0x78,0x36,0x52,0x87,0x33,
    0xb3,0xfa,0xce,0x03,0xd7,0x16,0xaf,0x61,0xb8,0xf3,0x33,0x06,0xe3,0xc1,0xaf,0x3d,
    0x63,0x88,0x42,0x3e,0x5f,0x41,0xbb,0xe0,0xaf,0xd3,0xf9,0xd9,0x44,0xbc,0xf8,0xb5,
    0x38,0x7a,0xa4,0x9e,0xfc,0xb0,0x1d,0x31,0x00,0x3e,0x1b,0xc3,0x0d,0xce,0xee,0x13,
    0x65,0x37,0x62,0x06,0x7d,0x48,0xc2,0x82,0xf6,0xfd,0x7a,0xca,0x82,0xf6,0x88,0x68,
    0x2d,0xe7,0x1f,0xf4,0x0d,0x0e,0xbe,0x09,0xb1,0x18,0x6d,0x1d,0x52,0x06,0xb4,0x4b,
    0xb4,0x67,0xd8,0x3d,0x2c,0xc6,0xa8,0xb5,0xce,0x24,0xc3,0x2f,0x1d,0xc2,0x9d,0xbf,
    0x8f,0x68,0x9f,0xd7,0xbb,0xab,0x1f,0xed,0xf5,0x6d,0x10,0xce,0x46,0xcf,0xce,0x68,
    0xe3,0xa3,0xda,0xf3,0x19,0x3e,0x27,0xa3,0x6e,0xd0,0x2b,0x6e,0x4d,0x3d,0x3f,0xdd,
    0xf5,0x0c,0xfb,0xb0,0x94,0xb8,0x2f,0x76,0x1e,0xfb,0x92,0x94,0x74,0x7f,0x1e,0xfb,
    0xe7,0x29,0x71,0x7f,0x1e,0x7b,0x44,0x4a,0xdc,0x9f,0xc7,0x1e,0x99,0x12,0xf7,0xe7,
    0xb1,0x2f,0x17,0x9f,0x3f,0x8f,0x3d,0x2a,0x25,0xee,0xcf,0x63,0x5f,0x91,0x52,0x7e,
    0x94,0x5b,0xbf,0xaf,0x94,0xac,0x3f,0x8f,0x3d,0x3a,0x25,0xee,0xcf,0x63,0x5f,0x95,
    0x52,0x7e,0xb4,0x93,0x6d,0x94,0xac,0x3f,0x8f,0x7d,0x4d,0x4a,0xdc,0x9f,0xc7,0x1e,
    0x93,0x52,0xfe,0x1a,0x27,0x7b,0x61,0xba,0xeb,0x19,0xf6,0xeb,0x52,0xe2,0xbe,0x98,
    0xcf,0xae,0x4f,0x49,0xf7,0x3e,0xbb,0x31,0x25,0xee,0x7d,0x76,0x73,0x4a,0xdc,0xfb,
    0xec,0x96,0x94,0xb8,0xf7,0xd9,0x58,0xf1,0x79,0x9f,0xdd,0x96,0x12,0xf7,0x3e,0xbb,
    0x3d,0xa5,0xfc,0x6d,0xce,0xf6,0x26,0xc9,0x7a,0x9f,0xdd,0x99,0x12,0xf7,0x3e,0x1b,
    0x97,0x52,0xfe,0x4e,0x27,0xdb,0x2c,0x59,0xef,0xb3,0xf1,0x29,0x71,0xef,0xb3,0xbb,
    0x53,0xca,0x83,0x66,0x67,0xd8,0x2f,0x4a,0xe9,0x4b,0xd0,0xf0,0x7c,0x17,0xdf,0x19,
    0x02,0xb3,0xf9,0x31,0x45,0x7b,0xae,0x3e,0x41,0xf1,0xec,0x7a,0x6a,0xca,0xff,0xfd,
    0x01,0x1a,0xde,0xbd,0xe1,0xbe,0x72,0x5a,0xca,0x6f,0x14,0x07,0xb9,0xef,0x03,0xa7,
    0xa7,0xc4,0xed,0x19,0xfd,0x8c,0x94,0xd8,0x05,0xfa,0xce,0xd4,0x72,0xe9,0xc3,0x29,
    0x69,0x26,0xf7,0x68,0x8d,0xdc,0xcc,0x94,0x58,0xed,0xf9,0xd5,0xc7,0x52,0xd2,0x4c,
    0xee,0x89,0x1a,0xb9,0xdf,0xa4,0xc4,0x6a,0xcf,0xb3,0x3e,0x99,0x92,0xd6,0xf2,0x5e,
    0x36,0x65,0x9f,0x46,0x95,0x8a,0xfe,0xcc,0x52,0x7f,0x9e,0x72,0xfa,0x7f,0x97,0x12,
    0xb7,0xf3,0x0a,0xb3,0x25,0x77,0x95,0x3b,0x27,0xf0,0x74,0x4a,0xbe,0xd9,0xe9,0xce,
    0xe7,0x26,0xe6,0xa4,0xa4,0x99,0x0f,0x9f,0x49,0xf9,0xbd,0xf8,0x14,0x67,0xc7,0xdc,
    0x94,0xb8,0xb7,0xe3,0x59,0xd9,0x31,0xd7,0xd9,0xf1,0x5c,0x4a,0xdc,0xec,0xf8,0xa3,
    0xe4,0xae,0x72,0xfb,0xe5,0xe7,0x53,0xf2,0xfd,0xd1,0xed,0xa7,0xfe,0x94,0x12,0xf7,
    0xef,0x25,0xfe,0x27,0x25,0x8e,0xb1,0xc7,0x37,0xab,0x33,0x4a,0xc5,0xb3,0xfd,0x17,
    0x53,0x7e,0xc7,0x0a,0x7f,0xcd,0x49,0x8b,0x67,0xfb,0xf3,0x52,0xd2,0xac,0x2f,0x0b,
    0x52,0xea,0x69,0xd6,0xde,0xab,0xfa,0x7f,0x25,0x52,0xf2,0x2d,0x70,0xb1,0xb4,0x28,
    0x25,0x8e,0x71,0xb3,0xfb,0xfc,0xc5,0x29,0xc7,0x7f,0x91,0xdb,0x37,0x2e,0x71,0xfb,
    0xc6,0xc5,0x69,0xf1,0x9c,0xdd,0xd6,0xb6,0x03,0x43,0xe6,0xeb,0x21,0x5a,0x3f,0x0f,
    0xc8,0x8a,0xdc,0xbc,0x44,0x73,0xcd,0xd6,0xd6,0x6f,0x7f,0x0d,0xcd,0xd6,0xd6,0x0f,
    0x53,0xca,0x82,0xa7,0xba,0x5f,0x48,0x8b,0x5c,0x0e,0xda,0xba,0xbc,0x00,0x43,0x2e,
    0x5f,0xe7,0xfa,0xdb,0x4d,0x32,0x90,0xb5,0x3d,0xf3,0xa1,0x19,0x71,0xe3,0x39,0x2c,
    0x63,0x7b,0x9e,0xe7,0x7b,0x19,0x71,0xdb,0x7b,0x1f,0x91,0x11,0x83,0xac,0xed,0xb5,
    0x8f,0xcc,0x88,0xe3,0x5b,0x75,0xdb,0x6b,0x1f,0x95,0x11,0xc7,0x5e,0x7b,0x84,0x7c,
    0xd0,0x23,0x23,0x6e,0x7b,0xe7,0x63,0x32,0x62,0x2d,0xdf,0x3c,0x64,0xc4,0xf0,0x8d,
    0xbb,0x9d,0x67,0xea,0xa9,0x6f,0x9f,0x41,0xb3,0xfb,0x91,0x5e,0x19,0x71,0x7b,0xef,
    0x66,0x3e,0xee,0x9d,0x91,0x66,0x7b,0xd3,0x3e,0x19,0xe5,0x7a,0xeb,0xbd,0x88,0xf9,
    0x05,0xbf,0xb6,0xce,0x36,0x68,0x1f,0x86,0x75,0x0f,0xfc,0xf0,0x99,0xed,0x89,0x3f,
    0x4e,0x39,0x6e,0xab,0xf4,0xac,0x66,0x8b,0xf3,0x35,0x68,0x1b,0xf3,0xb2,0x59,0x3a,
    0x37,0xa6,0xc5,0x59,0xc9,0x4f,0xb5,0x0f,0x3f,0x30,0x2c,0xf6,0xec,0x9f,0xa5,0xc4,
    0xc7,0xba,0x7c,0xb7,0x29,0x65,0xfb,0xa0,0xc1,0xbe,0x2d,0xd2,0xb5,0xb9,0xa6,0xbe,
    0xc5,0xd9,0x3b,0xac,0x9e,0x72,0x1b,0x95,0x27,0xc1,0x6b,0xbe,0xfa,0xa2,0xc6,0xde,
    0xba,0xcc,0xed,0xbb,0x72,0xda,0x36,0xc4,0x68,0xa6,0x7d,0x97,0xb3,0xf7,0x2b,0x67,
    0xaf,0xdd,0x4f,0xec,0x48,0x89,0x7b,0x7b,0xf1,0x8f,0x79,0x60,0xef,0x0e,0xd9,0x57,
    0x27,0x5d,0xe5,0x6c,0xe7,0x3a,0x7e,0xcd,0xde,0x4b,0xeb,0x29,0xb7,0x4d,0xf6,0x82,
    0xd7,0xf6,0x5d,0x41,0xb6,0xb3,0xbd,0x6d,0x9d,0xbd,0xa0,0x85,0x79,0x69,0x2b,0x9d,
    0xa1,0x8b,0x93,0x58,0x76,0x0c,0xf2,0xcf,0x2a,0x32,0xe2,0x57,0xb9,0xb5,0x23,0xcb,
    0xe8,0xaf,0xc4,0xc9,0xee,0x26,0x59,0xfc,0x9f,0x04,0xcb,0x3b,0xad,0x33,0xe2,0xfe,
    0x2c,0x7e,0x9b,0x8c,0xb6,0xb7,0x56,0xdf,0xcc,0x8e,0xb6,0xae,0x6f,0x23,0xea,0xc9,
    0x83,0xfe,0xb6,0x91,0xbd,0x46,0x1b,0x5e,0xcf,0xb6,0x41,0xcb,0x44,0xb3,0x7d,0x59,
    0x7b,0x37,0xbf,0x87,0x6b,0xef,0x6c,0xb4,0x3d,0x1c,0x6d,0x44,0x7d,0x71,0x8e,0xb8,
    0x7a,0xb6,0x54,0x73,0x78,0x8e,0xc3,0xf6,0xd2,0x9c,0x9e,0x53,0x2a,0xce,0xd3,0x74,
    0xca,0x88,0x0f,0x76,0x67,0x67,0xf6,0xce,0x28,0xdf,0xc9,0xbd,0x3f,0xea,0x9c,0x11,
    0xb7,0x3e,0xef,0x9b,0x11,0x6b,0x9f,0x15,0x6b,0xed,0x7e,0x19,0x71,0xd8,0xd5,0x2f,
    0xd7,0x84,0xfd,0xc6,0xa1,0x21,0xf7,0x80,0xa0,0xb5,0xd2,0xff,0x93,0xa8,0xd3,0xff,
    0x14,0x80,0xaf,0x3a,0x68,0x2f,0xd9,0xdd,0xed,0x25,0xe7,0x69,0x2f,0xd9,0x4f,0xcf,
    0x2c,0x0d,0x5f,0xa0,0xbd,0xe4,0x3c,0x7d,0x6f,0xe4,0xe5,0x3b,0x68,0x3f,0x0c,0xbe,
    0x09,0xf5,0x6c,0x17,0xfe,0x87,0x4c,0x77,0xb7,0x7f,0x3f,0x52,0xb9,0xd5,0xce,0x94,
    0xf6,0x70,0xfb,0x5b,0xd0,0x8e,0xca,0x4b,0x0f,0xe9,0x3c,0xca,0x7d,0x93,0x7e,0x74,
    0xc8,0x6f,0x8b,0xa7,0xb8,0xb3,0x37,0xc7,0x84,0xc4,0x6f,0xb5,0xf7,0x9d,0x21,0xb1,
    0x86,0x52,0x21,0x77,0xac,0xe4,0x9a,0x9d,0x5c,0xcf,0x90,0xb8,0xc9,0xf5,0x0a,0x89,
    0x35,0xb8,0x6f,0xe5,0x7b,0x87,0xd4,0xd7,0xcb,0x7d,0x2b,0xdf,0x27,0xe4,0x37,0xd6,
    0xbd,0xf5,0x7f,0x10,0xf0,0x7f,0x31,0xfa,0xea,0x7f,0x62,0xfc,0x34,0xaf,0xe3,0x1a,
    0x3c,0x13,0x74,0x1f,0x61,0xfd,0xe8,0x11,0xee,0xfc,0xdd,0x3a,0x7e,0xbf,0xcc,0x3d,
    0x78,0x4c,0x5e,0xfe,0x0f,0xe9,0x52,0xae,0xfd,0xb8,0x4f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kTexelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
//  uniform int kIsEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(kAlphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= pixel_coord . x;
//             dy *= pixel_coord . y;
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(kAlphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, int scale)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint ind = uint(clamp(int((dist - distMin)/(distMax - distMin)* scale + 0.5f), 0, scale));
//
//     ind = - ind & 3;
//     ind ^= uint(ind < 2);
//     ind += scale;
//     ind -= 3;
//     return ind;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(kAlphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     }
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y *((kWidth + 3)>> 2)+ tile_coord . x + kTexelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(kAlphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = kAlphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = kAlphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//
//         uint minColor565 = packColorToRGB565(minColor);
//         uint maxColor565 = packColorToRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b), vec3(minColor), vec3(maxColor), nonOpaque ? 2 : 3);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//     if(kAlphaBits == 1){
//         int active_lane_index = subgroupClusteredMax(controlFlag ? int(gl_SubgroupInvocationID): - 1, 16);
//         if(active_lane_index != - 1){
//             color565 = subgroupShuffle(color565, active_lane_index);
//         }
//         if(punchthrough && result . a == 0){
//             indices = 3;
//         }
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(kAlphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
