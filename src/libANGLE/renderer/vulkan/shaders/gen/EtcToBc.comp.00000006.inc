// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x7b,0x94,0x5f,0xd3,
    0x15,0xbe,0x67,0x9f,0x33,0x99,0x49,0x86,0x88,0xa6,0xc4,0xc4,0x23,0x0f,0x5a,0xab,
    0x41,0x3c,0x2a,0x83,0x44,0xc4,0xa3,0x64,0x3a,0x08,0x83,0x58,0xba,0xa6,0x6d,0x8a,
    0x54,0x11,0xa1,0x8a,0x2a,0xcb,0x22,0x14,0x45,0x83,0xb0,0x96,0x7a,0x54,0x4c,0xe5,
    0x51,0x4c,0xe8,0x90,0x88,0xb4,0x0d,0x4b,0x12,0x93,0x07,0xd1,0x44,0x23,0x4d,0x1a,
    0xcf,0xb6,0x59,0x96,0xe5,0x8f,0x5a,0xa4,0x55,0x21,0x64,0x7a,0xf6,0xfd,0xbe,0x9d,
    0xbb,0xf3,0x43,0xd6,0xba,0xb9,0xb3,0xbf,0xfd,0x38,0x7b,0xef,0x73,0xce,0x77,0xee,
    0xbd,0xbf,0x28,0x7b,0xd7,0x17,0x31,0x14,0x7d,0x8a,0x86,0x62,0x5e,0x2a,0xca,0x7f,
    0x3b,0x17,0x52,0x04,0xde,0x87,0xf3,0x3e,0x9a,0xf7,0xe3,0xf2,0xbd,0xb1,0xe8,0x55,
    0xea,0xc7,0x9e,0x74,0xfa,0x49,0xc3,0x2f,0xbb,0x7c,0xe2,0xf0,0x43,0x47,0x1c,0xa4,
    0x7e,0x7d,0x8b,0x58,0xfa,0xab,0x6e,0xa7,0xa2,0xbe,0xa8,0xcb,0x77,0x0d,0x39,0xf9,
    0xec,0x0b,0x2e,0x56,0xfc,0x90,0x7c,0x8d,0xcc,0x57,0xbf,0xec,0x9f,0xca,0x78,0x45,
    0x71,0x34,0xed,0xcb,0x78,0x19,0x3d,0xa4,0x8c,0x5f,0x14,0x03,0x29,0x8f,0xa4,0xbc,
    0x7b,0xbe,0x5a,0x72,0xc4,0x4f,0x91,0x62,0xb1,0x37,0xef,0x86,0x05,0x62,0xc9,0x61,
    0x42,0xac,0xc1,0x61,0x91,0xd8,0x0e,0x0e,0x4b,0xc4,0xfa,0x39,0xac,0x8e,0xd8,0xd7,
    0x1d,0xd6,0x8b,0xd8,0x6e,0x65,0x6e,0x71,0xdb,0x18,0x9a,0xe7,0x82,0x9c,0xc0,0x50,
    0xe6,0x64,0xf2,0x10,0x27,0x6f,0xad,0xd1,0x6f,0xa5,0x3e,0x30,0x96,0xca,0x4d,0xd4,
    0xf5,0x15,0xd4,0xac,0x72,0xff,0x3c,0x82,0x8e,0x31,0x24,0xdb,0x44,0x8e,0xb7,0x4b,
    0xb6,0xd1,0x5c,0x06,0xd3,0x7f,0x40,0x96,0xeb,0x99,0x9f,0xe9,0x1b,0xa9,0x2f,0xca,
    0x7b,0x2a,0xeb,0xad,0x67,0x2f,0xd5,0x7e,0x67,0xfe,0x2d,0xd4,0x7f,0x8d,0xfa,0x9d,
    0x29,0x0f,0xa0,0xdc,0x8b,0xf6,0x07,0xd1,0x3e,0x52,0x7f,0x30,0xc7,0x56,0x7c,0x14,
    0xe5,0x43,0x88,0xed,0xc7,0xfc,0x9a,0xd9,0x7b,0xd3,0x8f,0x74,0xfa,0xc6,0x12,0xaf,
    0xf2,0x3b,0x92,0xba,0x46,0xa7,0x1f,0xc3,0xb9,0x31,0xf9,0xf8,0x72,0x5d,0x55,0xf1,
    0x5b,0x9c,0x5e,0xe5,0xd6,0x9a,0xf1,0xdb,0x58,0x9f,0xf9,0x8f,0xaf,0xd1,0xb7,0xb3,
    0x1e,0xad,0xef,0xc7,0x1c,0xdb,0x8f,0x77,0x21,0xf3,0x37,0x79,0x12,0xd7,0x88,0xc9,
    0x17,0x71,0x2d,0xec,0x9f,0x3b,0xa5,0xfe,0x93,0x59,0xd3,0x85,0xb4,0xbd,0xc8,0xd9,
    0x5e,0x92,0xaf,0x1e,0x27,0x5f,0x5d,0x93,0xdb,0x75,0xcc,0xc5,0x72,0xbb,0x3b,0x5f,
    0x07,0x38,0xf9,0x7e,0x8e,0x65,0x72,0x07,0xd7,0xa6,0xc9,0xb3,0x5d,0x6e,0x2a,0x77,
    0x72,0x0d,0x9b,0xdc,0x95,0xaf,0x41,0xac,0x75,0x11,0xe7,0x55,0x6b,0xdd,0x23,0xff,
    0xbf,0x38,0xdf,0x17,0x31,0x67,0xb3,0x5f,0x52,0xee,0x67,0xd4,0xa6,0xba,0x17,0xd8,
    0xcf,0x4e,0xce,0xeb,0x12,0x67,0xdb,0xcd,0x78,0x26,0x2f,0xcd,0x57,0x6f,0x27,0x2f,
    0xe3,0x7e,0xb3,0x58,0xcb,0x19,0xab,0x9b,0xb6,0xcb,0x9c,0xed,0x0a,0xae,0x3b,0xb3,
    0x7d,0x91,0xf3,0xda,0x42,0xdd,0x32,0xa7,0x7b,0x89,0xba,0x76,0xe6,0xe5,0xe3,0xac,
    0xe4,0x7c,0x9a,0xed,0xcb,0x2e,0xff,0x15,0xd4,0x9b,0xed,0x5f,0xf2,0xd5,0xc7,0xd9,
    0xae,0x72,0xf9,0x35,0x53,0x6f,0xba,0xd5,0x1c,0xaf,0x9b,0x71,0xbc,0xee,0x15,0xfa,
    0xb5,0x7c,0x89,0xee,0xaf,0xcc,0xd5,0xc6,0x5f,0xea,0x74,0x6b,0x6a,0x6a,0xf4,0xba,
    0x57,0x5d,0x8d,0xb5,0xba,0xb5,0xce,0xaf,0xbb,0x46,0xf7,0x37,0xe6,0xd2,0xee,0x74,
    0x56,0xef,0x3a,0xee,0x3b,0xb3,0x5d,0x4f,0xac,0x95,0x3e,0x3e,0xce,0xdf,0x5d,0x7f,
    0x57,0xb0,0x1f,0xa6,0xdb,0xe0,0xea,0xed,0xde,0xa6,0xeb,0x5f,0xae,0xa7,0xd7,0xb8,
    0x66,0x96,0x73,0x0e,0x5f,0xe2,0x1c,0xac,0x62,0x0f,0x5f,0x61,0x4f,0xd6,0xb0,0xc6,
    0xb5,0xcc,0x79,0x3d,0xc7,0xdc,0x40,0x5e,0x78,0x93,0xeb,0x61,0x71,0xb9,0xde,0xa5,
    0x78,0x2f,0xdf,0xf7,0xca,0xab,0xcb,0xf8,0xf8,0xab,0x2e,0xf5,0xdd,0xc2,0x75,0xf8,
    0x29,0x39,0x48,0xe5,0xcf,0x88,0xa9,0xfe,0x73,0xfe,0xed,0xd7,0x6e,0xc8,0x04,0x31,
    0xa5,0xa7,0xa7,0xc7,0xe4,0xfa,0x80,0xbd,0x69,0x72,0x43,0xc0,0x3e,0xde,0x35,0xef,
    0xd6,0x7e,0x01,0x1c,0xab,0x3a,0xfd,0x7b,0x2f,0x25,0x97,0xe2,0x1f,0x47,0x9b,0x3c,
    0xb8,0x94,0x8b,0x31,0xb6,0xc7,0xbf,0x11,0x50,0x8b,0xc9,0xe3,0x42,0xb5,0x47,0x55,
    0xbe,0x2c,0x54,0x7c,0x7b,0x7b,0xfe,0xfb,0x3d,0x72,0x44,0x53,0xce,0xf2,0xe9,0x80,
    0xf5,0x5c,0x57,0x6c,0xff,0x2f,0xf0,0xbe,0x7b,0xce,0x67,0x7e,0x16,0x9e,0x0e,0xa8,
    0xed,0x19,0x2a,0x14,0x1b,0x45,0x79,0x01,0x31,0x8d,0xf7,0x59,0xa8,0xf8,0xdf,0xff,
    0x93,0xb2,0xbf,0xec,0x0f,0xed,0x3f,0x63,0x0c,0x95,0xb7,0x12,0xd3,0x1c,0xfb,0x08,
    0xf2,0x8d,0xae,0x86,0x1d,0x05,0x67,0xfa,0xfe,0x59,0xa3,0x67,0x83,0x9e,0x65,0x8a,
    0x8d,0x27,0xff,0x5a,0x1f,0x07,0x67,0xec,0xc0,0xd2,0xae,0xae,0xec,0xc9,0xb5,0x09,
    0xeb,0xa7,0xd9,0x61,0xd7,0x25,0xac,0xaf,0x36,0x87,0x4d,0x49,0x58,0x8f,0xed,0x8e,
    0x77,0xaf,0x4f,0xe0,0x57,0x7f,0x85,0x9c,0x95,0xea,0xee,0x4d,0xf8,0x5b,0x73,0x9b,
    0x5b,0x8e,0x51,0x57,0xd6,0xc8,0x47,0x9d,0x32,0xf7,0xcd,0x19,0xa9,0xe3,0x1a,0xd1,
    0xf5,0x36,0x2c,0x62,0x9e,0x4c,0x7e,0x40,0x2a,0x59,0xcf,0xc9,0x55,0x61,0x7b,0x79,
    0x3d,0xe5,0x8f,0x73,0xb4,0x61,0x6c,0xe8,0x96,0xfc,0xb7,0x9e,0x05,0xfb,0x09,0xe2,
    0xeb,0x7d,0x34,0xcf,0xd1,0x11,0x82,0xb3,0xf2,0x94,0xec,0xa5,0xe7,0x6d,0xb3,0x00,
    0x1b,0x21,0xd5,0x9c,0x5e,0xc3,0x33,0xfd,0x30,0x81,0xfe,0x46,0xd6,0x7f,0x84,0x00,
    0xd3,0x7e,0x1d,0x93,0x31,0x3d,0x37,0x47,0x0a,0xce,0x56,0x1d,0x6f,0xb4,0x9d,0xad,
    0x02,0x7c,0x49,0xb6,0x51,0xf9,0x48,0x01,0x36,0x86,0xb1,0x75,0x0e,0x46,0x0b,0xf0,
    0xe5,0xb4,0x39,0x9a,0x36,0xc7,0x3b,0x9b,0x63,0x04,0xb8,0xda,0xa8,0x7c,0x9c,0xc0,
    0x4f,0xb9,0xe2,0x46,0x62,0xdf,0x11,0x70,0x80,0xea,0xda,0x88,0x9d,0x20,0xc8,0x55,
    0xff,0x4d,0x21,0x36,0x56,0x80,0xab,0xfd,0x69,0x19,0xd1,0x7a,0xce,0x4a,0xc0,0xcd,
    0xd6,0xc6,0x69,0xe5,0x38,0x6d,0x6e,0x9c,0x13,0x29,0xb7,0xba,0x71,0x4e,0xa6,0x6f,
    0x70,0xe3,0x8c,0x13,0xe0,0x27,0xba,0x71,0xda,0x13,0xf0,0xb3,0x12,0x6c,0x6d,0x9c,
    0x36,0x41,0x8d,0xed,0x25,0x5f,0x01,0x3b,0x9d,0x98,0x8e,0x75,0x2a,0xfb,0x7e,0x86,
    0xc0,0x56,0x75,0x53,0x88,0x9d,0x29,0x88,0xab,0x3a,0x9d,0x0b,0xe5,0x93,0x5b,0x02,
    0x38,0xa6,0x9d,0x73,0xa1,0xf1,0x6e,0x0d,0xc0,0xcd,0xe6,0x36,0xda,0xb4,0x38,0x9b,
    0x5f,0x07,0xe0,0x36,0xde,0xd4,0x00,0x3f,0xc5,0xbb,0x32,0xa6,0x7c,0x70,0x47,0xc0,
    0x98,0xaa,0x7b,0x20,0xfb,0x29,0x3f,0xdc,0x49,0x5c,0xd7,0xde,0x5d,0xdc,0x9b,0x9f,
    0x66,0x9d,0xe2,0xd3,0xf2,0xa5,0x98,0xae,0x3f,0xfd,0xfb,0x93,0x7c,0x1f,0xc6,0xf5,
    0xa8,0xf8,0x0b,0x1c,0xeb,0x37,0x8c,0xab,0xfb,0x6d,0x39,0xb1,0x07,0x88,0x4d,0x49,
    0x55,0xaf,0xa7,0x07,0xe0,0x85,0x9b,0x93,0x87,0x02,0xea,0x50,0x9d,0xd9,0xfd,0x8e,
    0x76,0x7e,0x4e,0x1e,0x0e,0xb0,0x55,0x9d,0xf9,0xce,0xa6,0xaf,0x62,0x66,0xf7,0x68,
    0x00,0x3e,0x3d,0x54,0xf3,0xf1,0x38,0x7b,0xd1,0xe6,0xe6,0xe8,0x29,0xf6,0xc6,0xaf,
    0x8f,0xb9,0x01,0xb6,0xaa,0xd3,0xbe,0x2a,0xf7,0xfd,0x91,0xbc,0x67,0x7b,0xe5,0xcf,
    0x01,0x7b,0xef,0x6a,0xb7,0x57,0x16,0x06,0xe0,0xb6,0xe6,0x9f,0x0d,0xc0,0x2c,0xee,
    0x73,0x01,0xb1,0x9f,0x75,0x35,0x3e,0x1f,0xd0,0xb7,0xe0,0xc6,0x5f,0x1c,0x80,0x3f,
    0xee,0xea,0x59,0x12,0xe0,0xbf,0xd8,0xf9,0x76,0xd3,0xd7,0xef,0x8d,0xa5,0x01,0xb6,
    0xaa,0x9b,0x98,0xf3,0x50,0x1e,0x5f,0xc6,0xfc,0x27,0x64,0x1b,0xe5,0xb2,0xe5,0xc4,
    0x96,0x32,0x96,0xe6,0xfe,0x03,0x01,0x1e,0xca,0xb5,0x0a,0x3e,0xfc,0x89,0x00,0xf7,
    0xd7,0x12,0xc6,0x38,0x5f,0xa0,0x9f,0xcc,0x3d,0xa0,0xd8,0x24,0x01,0x7e,0x7d,0xaa,
    0xe2,0x4e,0x16,0xe0,0x45,0x79,0xb6,0x03,0xbb,0x58,0x80,0x5f,0x54,0x54,0x76,0x3f,
    0xa5,0x5d,0x70,0x76,0x97,0x0a,0xf1,0xf2,0x59,0x02,0xd8,0xcf,0x04,0xfe,0x97,0x4a,
    0xe5,0x7b,0x39,0x7d,0xc5,0xf9,0x5e,0x21,0xc0,0x2f,0x74,0xbe,0x3f,0x17,0xf8,0x5f,
    0xe1,0x7c,0x7f,0x41,0xdf,0xe8,0x7c,0xaf,0x12,0xe0,0xa3,0x9c,0xef,0xd5,0x02,0xff,
    0xab,0x9c,0xef,0x8f,0xd8,0xb3,0xc2,0xf5,0xec,0x3a,0x01,0xee,0x2f,0xeb,0xd9,0x14,
    0x81,0xde,0xf7,0xec,0x97,0x02,0xdc,0xf7,0xec,0x26,0x01,0xee,0x7b,0x76,0xb3,0x00,
    0xf7,0x3d,0xbb,0x85,0x76,0xbe,0x67,0xb7,0x0a,0x70,0xdf,0xb3,0xdb,0x04,0xfe,0xb7,
    0xba,0xdc,0xa7,0xd2,0xd7,0xf7,0xec,0x76,0x01,0xee,0x7b,0x76,0x87,0xc0,0xff,0x76,
    0xe7,0x3b,0x8d,0xbe,0xbe,0x67,0x77,0x09,0x70,0xdf,0xb3,0xbb,0x05,0xfe,0xaa,0x53,
    0x3e,0xd2,0x33,0xea,0x1c,0x41,0x2f,0x55,0x77,0x54,0x8e,0xa0,0x67,0xe0,0x39,0x52,
    0xad,0xfd,0x19,0xe4,0x50,0xdd,0xe7,0x37,0x10,0x9b,0x29,0x78,0x8f,0x99,0x41,0x7e,
    0xd4,0x77,0x80,0x59,0x82,0xf3,0x73,0xbc,0xdb,0x7f,0xb3,0x05,0xf8,0xca,0xec,0xa5,
    0xf2,0xef,0x05,0xd8,0xfd,0x7c,0x1e,0xb0,0x7d,0xf9,0x88,0x40,0x67,0x7e,0x8f,0xd5,
    0xf8,0x75,0x0a,0xb0,0x0e,0x72,0xab,0xf9,0xcd,0x11,0xe8,0xcc,0xef,0x89,0x1a,0xbf,
    0x3f,0x08,0xb0,0xd9,0x35,0x7e,0x5d,0x02,0xdd,0x36,0xce,0x11,0xd4,0xa4,0xcf,0xc2,
    0x56,0xcf,0x5c,0xd6,0xf3,0x94,0x8b,0x3f,0x4f,0x80,0xdb,0x19,0x33,0x9f,0x7e,0x5d,
    0x45,0x35,0xe6,0x33,0x02,0xbb,0xf9,0x3c,0x67,0x6c,0xcc,0x05,0x02,0x9d,0xf5,0xf0,
    0x4f,0x82,0x67,0xa5,0x19,0x2e,0x8f,0x85,0x02,0xdc,0xe7,0xf1,0x2c,0xf3,0x58,0xe8,
    0xf2,0x78,0x4e,0x80,0x5b,0x1e,0xcf,0xd3,0xaf,0xab,0xa8,0x9e,0x0b,0x16,0x09,0xec,
    0x9e,0x77,0xcf,0x01,0x8b,0x05,0xf8,0x78,0x97,0xd7,0x12,0x01,0xae,0x73,0xaf,0xcf,
    0x43,0xaf,0x95,0x63,0xf7,0x2a,0xbf,0x13,0x2c,0x15,0x3c,0x23,0x69,0xbf,0x16,0x48,
    0x75,0xa6,0x2d,0x13,0xe8,0xac,0x96,0x15,0x82,0x38,0xad,0xe5,0xbb,0x1a,0xb0,0x17,
    0x05,0x76,0x2b,0xdc,0x5a,0x5a,0x29,0x98,0xeb,0x66,0xc7,0x8f,0x2f,0x0b,0x70,0x9d,
    0x9f,0x39,0x19,0xd3,0xb3,0x6f,0x95,0x60,0x6e,0xd7,0xf1,0xd9,0x6b,0x9d,0x54,0xe7,
    0x9f,0xea,0x56,0xe7,0x6b,0x2d,0xcf,0xbb,0xd5,0x2e,0xfe,0x1a,0xc1,0xb8,0x73,0x1c,
    0xf6,0xaa,0x00,0xd7,0x31,0xf5,0x9c,0x5c,0x47,0x3f,0xf5,0xf7,0xb2,0xde,0x3f,0xca,
    0x9c,0xa1,0x3e,0x37,0x24,0xf8,0xad,0x66,0xbc,0xb5,0x52,0xe5,0xbb,0x41,0x90,0xb3,
    0xda,0xd8,0xbc,0xbd,0x2e,0xc0,0xdb,0x8b,0xea,0x59,0xe0,0x0d,0xc1,0xb3,0x40,0xb7,
    0x7b,0x16,0x78,0x53,0x80,0x5b,0x9d,0x6f,0x09,0x30,0xad,0xf3,0xb1,0x6c,0xa1,0x36,
    0x6f,0x0b,0x70,0x7d,0x5f,0xf1,0xf8,0x46,0xe2,0xfa,0xde,0xa2,0xef,0x2a,0x3b,0x14,
    0x0d,0x25,0xfe,0x2e,0xf9,0xe6,0x00,0xe6,0xa1,0xfe,0x1b,0x1d,0x37,0xfc,0x9b,0x9c,
    0x18,0x1d,0x27,0x7e,0x2c,0xc0,0xfd,0x65,0x9c,0xb8,0x59,0xa0,0xf7,0x9c,0xb8,0x45,
    0x80,0x7b,0x4e,0xfc,0x5c,0x80,0x7b,0x4e,0xdc,0x2a,0xc0,0x3d,0x27,0xea,0xc0,0x5b,
    0x6a,0x38,0x31,0x44,0xe0,0x9e,0x13,0x25,0xc2,0x5f,0x75,0xe6,0x9b,0xe8,0xeb,0x39,
    0xb1,0x2e,0x02,0xf7,0x9c,0xd8,0x2b,0xc2,0xbf,0xce,0xf9,0x36,0xd0,0xd7,0x73,0x62,
    0xef,0x08,0xdc,0x73,0x62,0x9f,0x08,0xff,0xde,0xce,0xf7,0x03,0xf6,0x4c,0x5c,0xcf,
    0x76,0x8a,0xc0,0xfd,0x65,0x3d,0xeb,0x17,0xa1,0xf7,0x3d,0xeb,0x1f,0x81,0xfb,0x9e,
    0xed,0x12,0x81,0xfb,0x9e,0xed,0x1a,0x81,0xfb,0x9e,0xed,0x46,0x3b,0xdf,0xb3,0xa6,
    0x08,0xdc,0xf7,0x6c,0x60,0x84,0x7f,0x93,0xcb,0x7d,0x0f,0xfa,0xfa,0x9e,0xed,0x19,
    0x81,0xfb,0x9e,0xed,0x15,0xe1,0xbf,0xa7,0xf3,0x1d,0x4c,0x5f,0xdf,0xb3,0x21,0x11,
    0xb8,0xef,0xd9,0xd0,0x08,0x7f,0xd5,0xd9,0x39,0xb2,0x49,0xd0,0x4b,0xd5,0x29,0x97,
    0xe8,0xbb,0xd3,0x26,0x77,0x3e,0x1c,0x1a,0xf1,0x3e,0xe5,0xcf,0x87,0x11,0x11,0xb8,
    0x71,0x67,0x73,0x04,0x56,0x7b,0x3e,0x1c,0x16,0xa1,0x33,0xbf,0x23,0x6a,0xfc,0x46,
    0x46,0x60,0xb5,0xe7,0xc3,0xa8,0x08,0x9d,0xf9,0x8d,0xae,0xf1,0x3b,0x2a,0x02,0xab,
    0x3d,0x1f,0xc6,0x44,0xe8,0x2c,0xf7,0x63,0x99,0xbb,0x3f,0x0b,0x8e,0x8b,0xc0,0x2d,
    0xd6,0x09,0x11,0x58,0x2d,0xef,0x8f,0x8d,0xd0,0x59,0xac,0x93,0x18,0xcb,0xf3,0xf9,
    0xc9,0x11,0xb8,0x71,0xf7,0xa9,0x11,0x98,0xe7,0xee,0xb6,0x08,0xdc,0x73,0xf7,0x69,
    0x11,0xb8,0xf6,0x5b,0xdf,0x6d,0x3d,0x77,0x8f,0x8f,0x78,0xdf,0xd5,0x5a,0xc6,0xc6,
    0x8a,0x83,0xce,0x8c,0xd0,0x19,0x77,0x9f,0x15,0x11,0xc7,0x73,0xf7,0xf7,0x22,0xec,
    0x54,0x67,0x3c,0xda,0x1e,0x39,0x0f,0x8e,0xbb,0xbf,0x1f,0x81,0x7b,0xee,0xfe,0x61,
    0x44,0xdf,0x8d,0xbb,0xcf,0x8b,0x15,0x77,0xab,0x6e,0x42,0xbe,0x26,0x46,0x70,0xee,
    0x04,0x17,0xff,0x9c,0x88,0x71,0x47,0x39,0xec,0xdc,0x08,0xdc,0xb8,0xfb,0x3c,0xfa,
    0xa9,0xbf,0x97,0xf5,0x6e,0xdc,0x7d,0x73,0x82,0xdf,0x04,0xc6,0x53,0x5b,0xcb,0xf7,
    0x82,0x88,0x9c,0x6f,0x76,0xdc,0x3d,0x29,0x02,0x6f,0x2f,0x2a,0x4e,0xbd,0x32,0x56,
    0x9c,0xaa,0x7a,0xe3,0xd4,0x6b,0x38,0x5f,0x6f,0x05,0xbc,0xcf,0x9c,0x1d,0x30,0xe6,
    0x8b,0xb1,0xfa,0xce,0xfb,0x2e,0x9f,0xf5,0x26,0x52,0xb7,0xf2,0x4b,0x74,0xd6,0xab,
    0x3b,0x23,0x7c,0xd5,0x46,0x7b,0x75,0x8f,0xeb,0x95,0xea,0xa6,0xe5,0xeb,0x1e,0xd6,
    0x38,0xcd,0xcd,0xd9,0x1a,0xfa,0xa8,0xef,0x25,0xfc,0x26,0xf5,0x6a,0x04,0x6e,0x36,
    0xeb,0x22,0xc6,0xf3,0x36,0xeb,0x23,0xf0,0x5b,0xb2,0x8d,0xca,0x1b,0x22,0x30,0xf5,
    0xbd,0x89,0xd8,0x6b,0x11,0xb8,0x7e,0xf3,0xba,0x9e,0xd8,0xeb,0x11,0xb8,0x7e,0xf7,
    0x9a,0xcc,0x1e,0xbc,0x11,0x81,0x5f,0x6b,0x3d,0x89,0xc0,0x6c,0xbd,0xbe,0x1d,0x81,
    0xe9,0xb7,0xb1,0xc7,0x59,0xef,0x3f,0x23,0xde,0xcf,0x54,0x67,0xe7,0xda,0xbf,0x22,
    0xf0,0x56,0x7e,0xab,0xb4,0x1e,0x6f,0x8c,0xd0,0x2d,0x63,0xbc,0x77,0x22,0xfc,0x36,
    0x72,0xee,0xad,0x2f,0xf7,0x70,0xee,0xcb,0x67,0xed,0x04,0x9e,0xd2,0xf5,0xf0,0x0e,
    0xfb,0xf7,0x24,0xc7,0xbe,0x37,0x62,0xde,0xc6,0xf1,0x9d,0xba,0xc3,0xf5,0x5a,0x75,
    0xf7,0xe5,0xeb,0x21,0xc6,0xbc,0x8f,0x6b,0x50,0x63,0xfe,0x96,0xf3,0xf7,0x16,0xdf,
    0xfd,0x14,0x7b,0x30,0x02,0x9f,0xe4,0x78,0x72,0x7a,0xc4,0xf8,0x0f,0x32,0xbf,0x0e,
    0xc6,0x7a,0xa8,0x46,0xee,0x70,0xf9,0xde,0x96,0xe0,0x77,0x1f,0xf9,0x55,0x6d,0xcf,
    0x0f,0xd0,0x3d,0xec,0xd6,0x8d,0xda,0xe9,0x58,0xd6,0xc7,0x99,0x35,0xb5,0xcc,0x71,
    0xb5,0xa8,0x6e,0x56,0xbe,0x3a,0x39,0xde,0x2c,0x57,0xcb,0x23,0xae,0x96,0x1b,0x88,
    0x3d,0x1a,0x81,0xfb,0x5a,0x1e,0x63,0x2d,0x8f,0x32,0xf7,0x39,0x8c,0xd5,0x59,0x23,
    0xcf,0x71,0xb5,0x4c,0x4d,0xf0,0x9b,0xc5,0x5a,0x3a,0x5d,0x2d,0x4f,0xb8,0x5a,0xa6,
    0xb2,0x96,0x4e,0xd6,0xd2,0x55,0x53,0xcb,0x42,0x57,0x8b,0xea,0x9e,0xcc,0xd7,0x42,
    0x8e,0xf7,0xa4,0x5b,0x5f,0x73,0x99,0xe3,0x78,0x97,0xf7,0xbc,0x08,0xbc,0xcb,0x9d,
    0x55,0xf3,0x23,0x7a,0x39,0x8f,0xb9,0x5b,0xac,0x85,0x2e,0xf7,0x3b,0x13,0x6c,0xb4,
    0x9e,0xf9,0x1c,0xd3,0x9e,0xad,0x9f,0xe3,0x5e,0xd3,0x67,0xae,0x6d,0xcf,0xdb,0xdc,
    0x7b,0x8a,0x75,0x13,0x5b,0x14,0x81,0x37,0x73,0xec,0xf2,0xbb,0x41,0x84,0xbf,0xea,
    0x6c,0x5d,0x2f,0x89,0xc0,0x2d,0xbf,0xee,0x08,0x4c,0x73,0xb0,0xb3,0x74,0x59,0x04,
    0xae,0xdf,0x35,0x4f,0x29,0x7a,0x97,0xcf,0x13,0xef,0x04,0x7c,0xf3,0x54,0x5d,0xe2,
    0xb7,0xc4,0x3a,0xf6,0xd4,0x78,0xe8,0xf0,0x54,0xf5,0xf9,0xca,0xb8,0x3d,0x0f,0x8d,
    0xfc,0x12,0x9d,0xf1,0xd0,0xd6,0x08,0x5f,0xb5,0xd1,0x39,0x48,0xa9,0x9a,0x03,0xd5,
    0xf5,0xe8,0x98,0x09,0x7d,0xeb,0x71,0x1c,0x73,0x0c,0x7d,0x0e,0x4f,0x15,0xc7,0x1c,
    0x9b,0x80,0x9b,0xcd,0xf1,0x09,0xe3,0x79,0x9b,0x13,0x12,0x70,0xe3,0xa1,0x96,0x04,
    0x4c,0x7d,0x8d,0x87,0xbe,0x9b,0x80,0x7b,0x1e,0x6a,0x4d,0xc0,0x3d,0x0f,0x9d,0x98,
    0x80,0x1b,0x0f,0x9d,0x9c,0x80,0xd9,0x3a,0x19,0x97,0x80,0x79,0x1e,0x3a,0x35,0x81,
    0x87,0x54,0x67,0x3c,0xd4,0x96,0x80,0xd7,0xf2,0xd0,0x69,0x09,0x3a,0xe3,0xa1,0x33,
    0x12,0xfc,0x14,0xd7,0xf5,0x64,0x7d,0xd1,0xbb,0xad,0xa7,0x07,0xc9,0x43,0xba,0xc6,
    0xd4,0xbe,0x87,0xfc,0xde,0x37,0x6d,0xcf,0x39,0xf5,0x59,0xde,0x91,0xfe,0xfa,0xb7,
    0xed,0xd3,0x3e,0xe9,0x8b,0x9c,0xd3,0x98,0x80,0xfb,0x7d,0xba,0x43,0xc2,0x58,0x8d,
    0xcc,0xa5,0x2f,0x63,0xed,0x58,0x23,0xf7,0x75,0xb9,0x4d,0x4f,0xf0,0xab,0x67,0x8e,
    0x6a,0x6b,0xfb,0xb4,0x9f,0x5b,0x23,0xd3,0x39,0x96,0xe6,0x3d,0x30,0x6d,0xcf,0x2f,
    0xfd,0xb3,0xdc,0xc4,0xd8,0xfd,0x5d,0xde,0xbb,0xa6,0x2f,0xf2,0xcb,0x80,0x04,0xdc,
    0xe7,0xbd,0x1b,0xf3,0x1e,0xc0,0x3c,0x07,0x32,0x56,0x53,0x8d,0x3c,0xd0,0xe5,0xdd,
    0x91,0xe0,0xd7,0x9f,0x79,0x37,0xb9,0xbc,0xf7,0x70,0x79,0x77,0xb8,0xbc,0x87,0xa5,
    0xed,0xb9,0x64,0x50,0x96,0x87,0x31,0xf6,0x20,0xb7,0x46,0x86,0x30,0x1f,0xcf,0x25,
    0x43,0x13,0x70,0xcf,0x25,0xfb,0x24,0xf4,0x68,0xa8,0xf3,0xfd,0x26,0x7d,0xf5,0x37,
    0x1e,0x7b,0x7e,0xdb,0x37,0x01,0x6f,0x75,0xbe,0xdf,0x4a,0xc8,0x73,0x5f,0xd6,0x68,
    0x79,0x0c,0x73,0x35,0xce,0xa4,0x8d,0xd6,0xad,0xf6,0x83,0x9c,0x6e,0x06,0xc7,0x56,
    0xdd,0x3e,0xd4,0x19,0x1f,0xed,0xcf,0x7d,0xe8,0x39,0x6a,0x38,0xf7,0xa5,0xe7,0xa8,
    0x03,0x13,0x70,0xcf,0x51,0x07,0x25,0xf8,0xab,0xce,0xd6,0xfc,0xc1,0x09,0xb8,0xe5,
    0xfe,0xed,0x04,0x6c,0x86,0xe3,0xa8,0x11,0x09,0xf8,0x4c,0xc7,0x51,0xef,0x07,0xf0,
    0xd4,0x88,0x54,0xfd,0xde,0x91,0xc8,0x53,0xc6,0xf7,0x1f,0xf0,0xd9,0xc9,0x9e,0x0f,
    0x37,0xb9,0x6f,0xdb,0xaa,0xfb,0x50,0xdf,0x1b,0xf8,0x6d,0xfb,0x43,0xf7,0x6d,0xfd,
    0x3f,0xfc,0xb6,0xbe,0xce,0xbd,0x4f,0xff,0x37,0x00,0xff,0x15,0x6b,0xf9,0x28,0x00,
    0x6b,0x71,0xef,0xe1,0xff,0xa3,0x5f,0xab,0xf3,0xfb,0x38,0x00,0x37,0xbf,0xcd,0x01,
    0x58,0x8b,0xfb,0x5d,0xe0,0x93,0x80,0x78,0x9b,0x43,0xf5,0xbb,0xc0,0x16,0x7e,0xdf,
    0xfd,0x84,0xdf,0xa1,0xf5,0xf7,0xb3,0x1e,0xfe,0x76,0x66,0xdf,0x80,0x83,0xc0,0xae,
    0x28,0x2a,0x2c,0x12,0x0b,0x2e,0xaf,0x7a,0x7e,0x1f,0x68,0x73,0x79,0x35,0x08,0x70,
    0x7b,0x5e,0xed,0x2d,0xf8,0x36,0xdd,0x50,0x7e,0xaf,0xeb,0x55,0xfe,0x2e,0xd7,0x28,
    0x18,0x43,0x63,0xaa,0xfe,0xdc,0xec,0xab,0x39,0x28,0xfe,0x3e,0x7f,0x0b,0xb0,0xfe,
    0x6d,0xaa,0xf9,0x6d,0x40,0xef,0x9f,0xe7,0x2c,0x0e,0xcf,0xd7,0xff,0x01,0xe9,0xf9,
    0x64,0xba,0x20,0x24,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//  uniform int kOffsetX;
//  uniform int kOffsetY;
//  uniform int kOffsetZ;
//     uniform int kWidth;
//  uniform int kHeight;
//     uniform int kAlphaBits;
//  uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//  int blockid = int(gl_LocalInvocationID . x >> 4u);
//  int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//  int a = base * 8 + 4;
//  a += multiplier != 0 ? mod * multiplier * 8 : mod;
//  a >>= 3;
//  int minValue = kIsSigned != 0 ? - 128 : 0;
//  int maxValue = kIsSigned != 0 ? 127 : 255;
//  return clamp(a, minValue, maxValue);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//  vec3 dir = minColor - maxColor;
//  float distMin = dot(minColor, dir);
//  float distMax = dot(maxColor, dir);
//  float dist = dot(color, dir);
//  uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//  uint bit0_in = factor & 1u;
//  uint bit1_in = factor >> 1;
//  return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//  ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//  float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//  float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//  float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//  float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//  float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//  float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//  vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//  float eigenvalue = 0.0f;
//
//  for(int i = 0;i < 4;i ++){
//   float r = dot(vec3(cov0, cov1, cov2), vg);
//   float g = dot(vec3(cov1, cov3, cov4), vg);
//   float b = dot(vec3(cov2, cov4, cov5), vg);
//   vg = vec3(r, g, b);
//   eigenvalue = sqrt(dot(vg, vg));
//   if(eigenvalue > 0.0f){
//    float invNorm = 1.0f / eigenvalue;
//    vg *= invNorm;
//   }
//  }
//
//  const float kDefaultLuminanceThreshold = 4.0f * 255;
//  const float kQuantizeRange = 0.512f;
//
//  if(eigenvalue < kDefaultLuminanceThreshold){
//   vg = vec3(0.299f, 0.587f, 0.114f);
//  }
//  else {
//   float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//   vg *= kQuantizeRange / magn;
//  }
//  float dist = dot(vec3(rgbColor), vg);
//  float min_dist = subgroupClusteredMin(dist, 16);
//  float max_dist = subgroupClusteredMax(dist, 16);
//  uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//  uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//  minColor = subgroupShuffle(rgbColor, min_index);
//  maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//  float dist = float(maxAlpha - minAlpha);
//  uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//  ind = - ind & 7;
//     ind ^= int(2 > ind);
//  return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//  minAlpha = subgroupClusteredMin(alpha, 16);
//  maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//  int minValue, maxValue;
//  ComputeMaxMin(value, minValue, maxValue);
//  uint indices = 0;
//  if(minValue != maxValue)
//   indices = GetIndicesAlpha(value, minValue, maxValue);
//
//  uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//  uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//  if(pid == 5){
//   mask0 |=(indices & 0x1)<< 31;
//   mask1 |=(indices & 0x6)>> 1;
//  }
//  return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//  return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//  uint t = a;
//  a = b;
//  b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//  if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//   return;
//
//  ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//  int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//  int texOffsetY = kWidth >> 2;
//  int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//  ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//  uvec4 finalResult;
//
//  finalResult . rb = EncodeBC4(result . r, pid);
//
//  finalResult . ba = EncodeBC4(result . g, pid);
//
//  if(pid == 0){
//   tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//   imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//  }
//
// }
