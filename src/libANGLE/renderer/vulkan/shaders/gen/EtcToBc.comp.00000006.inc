// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x79,0x90,0x17,0xd5,
    0x11,0x9e,0xe9,0xf7,0x76,0x41,0x51,0x22,0x8a,0x2e,0x0a,0xa5,0x1c,0x55,0x9a,0x18,
    0x0e,0x5d,0x91,0x20,0x87,0x88,0x88,0xd9,0xac,0x46,0x5d,0x75,0x35,0x82,0x44,0x8c,
    0x18,0x15,0x41,0x63,0x4c,0x2a,0x46,0x8c,0x57,0x61,0xe2,0xf5,0x47,0xca,0x28,0x09,
    0x8b,0x62,0x79,0xa0,0x59,0x64,0x5d,0x2c,0x49,0xf0,0x44,0x8e,0x85,0x45,0x24,0x44,
    0x3c,0x23,0x29,0x63,0xf0,0x48,0x62,0x2c,0x53,0x5a,0x11,0x05,0x31,0x6e,0x5e,0xcf,
    0xf7,0x35,0xd3,0x3b,0x2a,0x55,0x8f,0xf9,0xf5,0xd7,0xdd,0xef,0x75,0xf7,0x7b,0xf3,
    0xf5,0xcc,0x6c,0x90,0x21,0x3d,0xb2,0x90,0x67,0xbb,0x67,0x3d,0xb3,0x87,0x63,0x56,
    0xfc,0xeb,0x93,0x49,0x96,0xf3,0x3a,0x9c,0xd7,0xf1,0xbc,0x4e,0x4a,0xd7,0x5e,0x59,
    0x6d,0xa1,0xff,0xf6,0x89,0xa7,0x9d,0x38,0xfc,0xf2,0x9f,0xcc,0x18,0x3e,0xf2,0xc8,
    0xc3,0xd4,0xaf,0x77,0x16,0x0a,0x7f,0xd5,0x7d,0x2d,0xeb,0x91,0xd5,0xa4,0xab,0x4e,
    0x39,0xfb,0xdc,0x8b,0x2e,0x51,0xbc,0x3e,0x8d,0x31,0x69,0xec,0x95,0xfc,0x63,0x31,
    0x5f,0x96,0x1d,0x43,0xfb,0x62,0xbe,0x84,0xd6,0x17,0xf3,0x67,0xd9,0x01,0x94,0xc7,
    0x50,0xee,0x9f,0x46,0x43,0x9a,0x71,0x3b,0x42,0xcc,0x86,0xf0,0x6a,0x58,0x4e,0x2c,
    0x3a,0x4c,0x88,0xf5,0x74,0x58,0x20,0xb6,0x87,0xc3,0x22,0xb1,0xbd,0x1c,0x56,0x43,
    0xac,0xaf,0xc3,0x6a,0x89,0xf5,0x2b,0x62,0x0b,0xbb,0xd6,0xd0,0x38,0x9f,0x4e,0x01,
    0x0c,0x66,0x4c,0x26,0x0f,0x72,0x72,0x2e,0xdd,0xf5,0x2a,0x0f,0xda,0x95,0x77,0x28,
    0xe4,0xfd,0xa9,0xab,0x15,0xe4,0xac,0xf2,0x3e,0x69,0x05,0x5d,0x63,0x50,0xb2,0x09,
    0x5c,0x6f,0x5f,0xb5,0x49,0xd7,0x81,0xf4,0xaf,0x4b,0x72,0x0f,0xc6,0x67,0xfa,0x5e,
    0xd4,0x67,0xc5,0x35,0x16,0xf9,0xf6,0x60,0x2d,0xd5,0xbe,0x0f,0x7f,0x0b,0xf5,0x7b,
    0x53,0xdf,0x87,0x72,0x1d,0xe5,0x5a,0xda,0x1f,0x46,0xfb,0x40,0xfd,0xe1,0x5c,0x5b,
    0xf1,0xb1,0x94,0xeb,0x89,0x7d,0x93,0xf1,0x8d,0x62,0xed,0x4d,0x3f,0xc6,0xe9,0x7b,
    0x15,0x78,0x19,0xdf,0x38,0xea,0x7a,0x39,0xfd,0x04,0xee,0x8d,0xc9,0x93,0x8b,0x73,
    0x55,0xce,0xdf,0xe0,0xf4,0x2a,0x37,0x56,0xd6,0x6f,0x62,0x7e,0xe6,0xdf,0x5c,0xd1,
    0x4f,0x65,0x3e,0x9a,0xdf,0xf9,0x5c,0xdb,0xaf,0x37,0x93,0xf1,0x9b,0x7c,0x31,0xcf,
    0x88,0xc9,0xb3,0x78,0x16,0x86,0xa6,0x4a,0xa9,0xff,0x6c,0xe6,0x34,0x93,0xb6,0xb3,
    0x9c,0xed,0xa5,0x69,0x74,0x39,0xf9,0xca,0x4a,0x6c,0xd7,0x30,0x16,0x8b,0xed,0xb6,
    0x34,0x86,0x39,0x79,0x3e,0xd7,0x32,0xf9,0x6e,0x9e,0x4d,0x93,0x17,0xb9,0xd8,0x54,
    0x5e,0xcc,0x33,0x6c,0x72,0x7b,0x1a,0x07,0x31,0xd7,0x95,0xdc,0x57,0xcd,0x75,0x40,
    0xfa,0x7f,0x55,0xba,0xae,0x64,0xcc,0x66,0xbf,0xba,0xb8,0x9f,0x91,0x9b,0xea,0xd6,
    0xb0,0x9e,0x8b,0xb9,0xaf,0xab,0x9d,0x6d,0x07,0xe7,0x33,0x79,0x6d,0x1a,0xbb,0x39,
    0x79,0x1d,0xef,0x37,0x9b,0xab,0x93,0x73,0x75,0xd0,0x76,0x9d,0xb3,0x5d,0xcf,0x73,
    0x67,0xb6,0xcf,0x72,0x5f,0x1b,0xa8,0x5b,0xe7,0x74,0x1b,0xa8,0x9b,0xca,0xb8,0xfc,
    0x3c,0xcf,0x71,0x3f,0xcd,0x76,0xa3,0x8b,0x7f,0x3d,0xf5,0x66,0xfb,0xa7,0x34,0x76,
    0x77,0xb6,0x9b,0x5c,0x7c,0xa3,0xa8,0x37,0xdd,0x9f,0xb9,0x5e,0x07,0xe7,0xf1,0xba,
    0xe7,0xe9,0xd7,0xf0,0x25,0xba,0xcd,0x8c,0xd5,0xd6,0x5f,0xeb,0x74,0x2f,0x54,0x72,
    0xf4,0xba,0x17,0x5d,0x8e,0x55,0xdd,0x4b,0xce,0xaf,0xa3,0xa2,0x7b,0x99,0xb1,0x4c,
    0x75,0x3a,0xcb,0xf7,0x15,0xde,0x77,0x66,0xfb,0x2a,0xb1,0x46,0xfa,0xf8,0x79,0xfe,
    0xe2,0xea,0xbb,0x9e,0xf5,0x30,0xdd,0x6b,0x2e,0xdf,0x8e,0x5d,0xba,0x7d,0x8a,0xf3,
    0xb4,0x85,0x67,0xa6,0x93,0x7b,0xb8,0x81,0x7b,0xb0,0x89,0x35,0x7c,0x9e,0x35,0x79,
    0x81,0x39,0xbe,0xc4,0x98,0x5f,0xe5,0x9a,0xaf,0x91,0x17,0x5e,0xe7,0x79,0x58,0x55,
    0x9c,0x77,0xc9,0xde,0x4d,0xd7,0x03,0xd3,0xe9,0x32,0x3e,0xfe,0xaa,0xa1,0xbe,0x3b,
    0x78,0x0e,0xb7,0x93,0x83,0x54,0xfe,0x94,0x98,0xea,0x77,0xf2,0xb7,0x3f,0xbb,0x7a,
    0x8f,0xe6,0x9f,0x75,0x75,0x99,0x5c,0x93,0x08,0xa3,0x2b,0x94,0xfa,0x5a,0x95,0x53,
    0x40,0xfb,0xa5,0xbb,0x75,0xcf,0x1c,0x1c,0xab,0x3a,0xfd,0xbd,0xb7,0x92,0x4b,0x76,
    0xcd,0x24,0x93,0xfb,0x16,0x72,0x36,0xc1,0xe4,0x83,0x0b,0xf9,0xef,0xc7,0xd8,0x3d,
    0x3f,0x34,0x47,0x6e,0xbb,0xf8,0x29,0x2f,0xef,0x59,0x95,0xaf,0xc8,0xbb,0xc7,0x36,
    0x37,0x47,0x7c,0x7a,0x0f,0xcf,0x4f,0xbf,0xdf,0x25,0x87,0xec,0x9f,0xb2,0x78,0x22,
    0xc7,0x79,0xaf,0xc9,0xba,0xff,0xcb,0x79,0xed,0x9f,0xe2,0x7d,0x32,0x09,0x4f,0xe4,
    0xc8,0xfd,0x29,0x2a,0x14,0x1b,0x4b,0xf9,0x69,0x62,0x3a,0x5f,0x17,0xe7,0xcb,0x2b,
    0xf3,0x49,0x51,0x7f,0xcc,0x51,0x08,0x5a,0x33,0xce,0xa1,0x72,0x4e,0xcc,0x72,0xa8,
    0x11,0xf4,0xf8,0xa1,0x29,0x03,0xed,0x15,0xda,0xdb,0x14,0x6b,0x26,0x1f,0x5b,0x6e,
    0xfd,0x12,0x36,0xa2,0xb0,0xab,0x29,0x6a,0x72,0x63,0xc4,0x79,0x1a,0xe5,0xb0,0x9b,
    0x22,0xce,0x5b,0x93,0xc3,0x6e,0x8e,0x38,0x9f,0x53,0x1d,0x0f,0xdf,0x12,0xc1,0xb7,
    0x7e,0xe4,0x29,0x7f,0xd5,0xdd,0x53,0xcc,0x5b,0x53,0x84,0xce,0xc7,0x9d,0x82,0x77,
    0xb7,0x27,0xa4,0x86,0xe7,0x44,0xcf,0xdc,0xd7,0x03,0xf6,0xc6,0xe4,0xdb,0xa4,0x94,
    0xb5,0x57,0x6e,0xce,0xbb,0xcb,0x5b,0x28,0x7f,0x92,0x66,0x1b,0xcc,0x1a,0xec,0x4c,
    0xbf,0xb5,0x1f,0x0c,0x11,0xcc,0xaf,0xd7,0xf1,0xec,0xa5,0xc3,0x04,0xfd,0xf2,0xe4,
    0xe4,0xa5,0x3d,0x77,0xb8,0x00,0x1b,0x26,0xe5,0xbe,0x5d,0xc5,0xbe,0x3e,0x42,0xa0,
    0x9f,0xcb,0x9c,0x0f,0x17,0x60,0x5a,0xa3,0x89,0x09,0xd3,0xde,0x59,0x2f,0xe8,0xaf,
    0xba,0xde,0x78,0xd6,0xfe,0x08,0x01,0xbe,0x3a,0xd9,0xa8,0x3c,0x52,0x80,0x4d,0xe0,
    0xdc,0x5a,0xf7,0x23,0x05,0x78,0x27,0x6d,0x46,0xd3,0x66,0xb2,0xb3,0x39,0x4a,0x80,
    0xab,0x8d,0xca,0x63,0x05,0x7e,0xca,0x17,0x73,0x89,0x8d,0x13,0xf0,0x80,0xea,0x9a,
    0x88,0x1d,0x2d,0x88,0x55,0xff,0x5d,0x4b,0x6c,0x82,0x00,0x57,0xfb,0x53,0x13,0xa2,
    0xf9,0xcc,0x88,0xc0,0xcd,0xd6,0xd6,0x39,0x96,0xeb,0x34,0xb9,0x75,0x26,0x51,0x3e,
    0xd6,0xad,0x33,0x99,0xbe,0xb9,0x5b,0xe7,0x78,0x01,0x3e,0xc9,0xad,0x73,0x41,0x04,
    0xae,0xeb,0xe5,0x6e,0x9d,0xef,0x08,0x72,0x9c,0x5a,0x70,0x16,0xb0,0x13,0x88,0xe9,
    0x5a,0xa7,0xb0,0xee,0x27,0x0a,0x6c,0x55,0x77,0x2d,0xb1,0x93,0x04,0xf3,0xaa,0x4e,
    0xf7,0x42,0x39,0xe5,0xf6,0x1c,0x3c,0x33,0x95,0x7b,0xa1,0xf3,0xdd,0x91,0x03,0x37,
    0x9b,0x79,0xb4,0x69,0x70,0x36,0xbf,0xcd,0x81,0xdb,0x7a,0xbf,0xcb,0xe1,0xa7,0x78,
    0x7b,0xc2,0xf4,0x9e,0x6f,0xc9,0xb1,0xa6,0xea,0x5a,0x92,0x9f,0x72,0xc0,0x02,0xe2,
    0x7a,0xf6,0xee,0xe2,0x0d,0xfb,0x69,0xd2,0x29,0x7e,0x67,0x1a,0x8a,0xe9,0xf9,0xd3,
    0xdf,0x3b,0xd2,0x75,0x30,0xcf,0xa3,0xe2,0x6b,0xb8,0xd6,0xbd,0x9c,0x57,0xef,0xb1,
    0x4e,0x62,0x0f,0x10,0xbb,0x39,0x96,0xb5,0x6e,0xcd,0x81,0x67,0x6e,0x4f,0x16,0xe7,
    0xc8,0x43,0x75,0x66,0xb7,0x84,0x76,0x7e,0x4f,0xda,0x72,0xd8,0xaa,0xce,0x7c,0x1f,
    0xa1,0xaf,0x62,0x66,0xb7,0x2c,0x07,0xde,0x9a,0x97,0xfb,0xf1,0x18,0x6b,0xd1,0xc4,
    0x7a,0x29,0x6f,0xad,0x20,0x67,0xd9,0x9a,0x2b,0x73,0xe4,0x91,0xbb,0xd8,0x56,0xe7,
    0xc0,0x1f,0x73,0x76,0x1d,0xb4,0xf3,0xe7,0x72,0x6d,0x0e,0xdb,0x0e,0xb7,0x47,0xeb,
    0xb8,0x47,0x4d,0x6e,0x8f,0x3a,0x73,0xe0,0xe6,0xb7,0x3e,0x87,0xaf,0xe2,0x33,0x92,
    0x8d,0xf2,0xeb,0xb3,0x8c,0xed,0x9c,0x64,0xa3,0x9c,0xb3,0x81,0xd8,0x7a,0xc6,0x50,
    0x70,0xbd,0x00,0xcf,0x8b,0xf3,0x05,0xde,0x3a,0x47,0x80,0xfb,0xb1,0x9a,0x73,0x4c,
    0x17,0xe8,0x67,0xf3,0xdc,0x2a,0x76,0x9e,0x00,0xbf,0x25,0x96,0xf3,0x9e,0x2f,0xc0,
    0xb3,0xa2,0x27,0x03,0xfb,0xa1,0x00,0x9f,0x95,0x95,0x76,0x17,0xd2,0x2e,0x77,0x76,
    0x17,0x09,0xf0,0x8b,0x8b,0x67,0x00,0x60,0x33,0x05,0xfe,0x17,0x49,0xe9,0x3b,0x8b,
    0xbe,0xe2,0x7c,0x67,0x0b,0xf0,0x99,0xce,0xf7,0x12,0x81,0xff,0x6c,0xe7,0xfb,0x23,
    0xfa,0x06,0xe7,0x7b,0x99,0x00,0x1f,0xeb,0x7c,0x7f,0x2c,0xf0,0xbf,0xcc,0xf9,0x7e,
    0x8f,0x35,0xcb,0x5c,0xcd,0x7e,0x26,0xc0,0xfd,0xb0,0x9a,0x5d,0x21,0xd0,0xfb,0x9a,
    0xcd,0x11,0xe0,0xbe,0x66,0xbf,0x10,0xe0,0xbe,0x66,0x57,0x0b,0x70,0x5f,0xb3,0x6b,
    0x69,0xe7,0x6b,0x76,0x9d,0x00,0xf7,0x35,0xbb,0x5e,0xe0,0x7f,0x9d,0x8b,0x7d,0x2e,
    0x7d,0x7d,0xcd,0x6e,0x10,0xe0,0xbe,0x66,0xbf,0x14,0xf8,0xdf,0xe0,0x7c,0x6f,0xa4,
    0xaf,0xaf,0xd9,0x4d,0x02,0xdc,0xd7,0xec,0x66,0x81,0xbf,0xea,0x94,0x43,0xb4,0xaf,
    0x4c,0x11,0xd4,0x52,0x75,0x47,0xa7,0x19,0xb4,0x6f,0x4d,0x91,0xf2,0xfe,0x68,0x21,
    0xef,0xe9,0xbd,0x79,0x3d,0xb1,0x05,0x82,0xf7,0x8f,0x16,0x72,0x9a,0x3e,0xbb,0xdf,
    0x29,0xe8,0x79,0xcd,0xae,0xbf,0xdc,0x25,0xc0,0x9f,0x4b,0x5e,0x2a,0x2f,0x14,0x60,
    0xf3,0xd9,0xb7,0xad,0x7f,0xdc,0x2d,0xd0,0x99,0xdf,0x3d,0x15,0xbf,0x7b,0x05,0xd8,
    0xdd,0xe4,0x43,0xf3,0xbb,0x4f,0xa0,0x33,0xbf,0x45,0x15,0xbf,0x07,0x04,0xd8,0xa2,
    0x8a,0xdf,0x83,0x02,0x9d,0x71,0x47,0xab,0x20,0x27,0x7d,0x86,0xb5,0x7c,0x16,0x33,
    0x9f,0x56,0x37,0xff,0x43,0x02,0xdc,0xfa,0x42,0x1b,0xfd,0xda,0xb3,0x72,0xcd,0x87,
    0x05,0x76,0x6d,0xec,0x0d,0xb6,0x66,0xbb,0x40,0x67,0x35,0x7c,0x44,0xf0,0x4c,0xd3,
    0xe2,0xe2,0x78,0x54,0x80,0xfb,0x38,0x96,0x31,0x8e,0x47,0x5d,0x1c,0x7f,0x10,0xe0,
    0x16,0xc7,0x72,0xfa,0xb5,0x67,0x65,0x2f,0x7f,0x4c,0x60,0xb7,0xdc,0xf5,0xee,0xc7,
    0x05,0x78,0xb3,0x8b,0xeb,0x09,0x01,0xae,0x7b,0xaf,0xcf,0x30,0x5b,0x8a,0xb5,0x6b,
    0x8b,0xf7,0xfb,0xa7,0x05,0xcf,0x35,0x5a,0xaf,0x76,0x29,0x39,0x6e,0x85,0x40,0x67,
    0xb9,0xac,0x14,0xcc,0xd3,0x58,0xbc,0x63,0x01,0x5b,0x25,0xb0,0x5b,0xe9,0xce,0xd2,
    0x1a,0xc1,0x5e,0x8f,0x72,0xbc,0xda,0x21,0xc0,0x75,0x7f,0x1e,0x4a,0x98,0xf6,0xab,
    0x75,0x82,0xbd,0x7d,0x85,0xcf,0x4b,0x9b,0xa4,0xec,0x59,0xaa,0xeb,0x4c,0x63,0x23,
    0x7b,0x54,0xa7,0x9b,0x7f,0x83,0x60,0xdd,0xfb,0x1c,0xf6,0x9c,0x00,0xd7,0x35,0xb5,
    0xb7,0x6d,0xa2,0x9f,0xfa,0x7b,0x59,0xaf,0xdb,0x12,0x67,0xa8,0xcf,0xad,0x11,0x7e,
    0x9d,0x9c,0x6f,0xa3,0x94,0xf1,0x6e,0x16,0xc4,0x7c,0x6b,0x2c,0xfb,0xc0,0x0b,0x82,
    0x3e,0xd0,0xe1,0xfa,0xc0,0x8b,0x02,0xdc,0x72,0x7a,0x49,0x80,0x69,0x4e,0xad,0xc9,
    0x42,0x6d,0x5e,0x16,0xe0,0x5d,0x59,0x77,0xfc,0x35,0xe2,0xfa,0x6e,0xa1,0xef,0x13,
    0x7b,0x64,0x3d,0x0b,0xfc,0x75,0x72,0xcb,0x30,0xc6,0xa1,0xfe,0x6a,0x7b,0x29,0xdf,
    0x1f,0xde,0x10,0xd8,0x98,0xbc,0x95,0xfa,0x1b,0x53,0x0c,0x2a,0xbf,0x29,0xb0,0x51,
    0xfc,0x06,0x62,0x6f,0x09,0x70,0x7d,0x37,0xb9,0x8e,0xd8,0xdb,0x02,0x5c,0xdf,0x4f,
    0x2e,0x61,0x3e,0xef,0x08,0x70,0xe3,0x9c,0xf7,0xc8,0xb5,0xc1,0x71,0xed,0x36,0x01,
    0xee,0x87,0x71,0xed,0xc7,0x02,0xbd,0xe7,0xda,0x1d,0x02,0xdc,0x73,0xed,0x4e,0x01,
    0xee,0xb9,0xf6,0x33,0x01,0xee,0xb9,0xf6,0x73,0xda,0x79,0xae,0xed,0x12,0xe0,0x9e,
    0x6b,0x35,0x40,0xf5,0xef,0x72,0xb1,0x4b,0x80,0xaf,0xe7,0xda,0x10,0x80,0x7b,0xae,
    0x8d,0x01,0xfe,0xaa,0x33,0xdf,0x5a,0xfa,0x7a,0xae,0xed,0x11,0x80,0x7b,0xae,0xed,
    0x19,0xe0,0xdf,0xc3,0xf9,0xfe,0x87,0x35,0x13,0x57,0xb3,0x3d,0x03,0x70,0x3f,0xac,
    0x66,0xbd,0x03,0xf4,0xbe,0x66,0x7d,0x02,0x70,0x5f,0xb3,0x7d,0x02,0x70,0x5f,0xb3,
    0xbe,0x01,0xb8,0xaf,0xd9,0x7e,0xb4,0xf3,0x35,0xab,0x0b,0xc0,0x7d,0xcd,0xfa,0x05,
    0xf8,0xd7,0xb9,0xd8,0x0f,0xa0,0xaf,0xaf,0x59,0xff,0x00,0xdc,0xd7,0x6c,0x40,0x80,
    0x7f,0x7f,0xe7,0x7b,0x20,0x7d,0x7d,0xcd,0x0e,0x0a,0xc0,0x7d,0xcd,0x06,0x06,0xf8,
    0xab,0xce,0xfa,0xd3,0x07,0x82,0x5a,0xaa,0x4e,0x39,0x4a,0xdf,0xa3,0x3e,0x70,0x7d,
    0xa7,0x3e,0xe0,0xdd,0xca,0xf7,0x9d,0x23,0x02,0x70,0xe3,0xe4,0x91,0x01,0x58,0xb5,
    0xef,0x1c,0x19,0xa0,0x33,0xbf,0x6f,0x55,0xfc,0x46,0x07,0x60,0xd5,0xbe,0x73,0x54,
    0x80,0xce,0xfc,0xc6,0x56,0xfc,0xc6,0x05,0x60,0xd5,0xbe,0x33,0x3e,0x40,0x67,0xb1,
    0x1f,0xc3,0xd8,0x7d,0x8f,0x99,0x18,0x80,0xdb,0x5c,0xc7,0x05,0x60,0xd5,0x7e,0x32,
    0x39,0x50,0xc7,0xb9,0x1a,0x39,0x97,0xef,0x13,0x27,0x04,0xe0,0xd6,0x13,0x4e,0x0a,
    0xc0,0x7c,0x4f,0x38,0x39,0x00,0xf7,0x3d,0xe1,0x94,0x00,0x5c,0xeb,0xad,0xef,0xb9,
    0xbe,0x27,0x9c,0x16,0xf0,0xee,0xab,0xb9,0x4c,0x0e,0x25,0xdf,0x9d,0x1e,0xa0,0xb3,
    0x9e,0x70,0x46,0xc0,0x3c,0xbe,0x27,0x9c,0x19,0x60,0xa7,0x3a,0xe3,0xe7,0xb3,0x02,
    0xf6,0xc1,0xf7,0x84,0x29,0x01,0xb8,0xef,0x09,0x67,0x07,0xd4,0xdd,0x7a,0xc2,0x8c,
    0x50,0xf6,0x04,0xd5,0x4d,0x4b,0xe3,0x07,0x01,0x5c,0x3e,0xcd,0xcd,0x3f,0x3d,0x60,
    0xdd,0xa3,0x1c,0x76,0x6e,0x00,0x6e,0x3d,0x61,0x06,0xfd,0xd4,0xdf,0xcb,0x7a,0xb5,
    0x9e,0xf0,0xeb,0x08,0xbf,0x69,0x9c,0x4f,0x6d,0x2d,0xde,0x0b,0x02,0x62,0x56,0x1b,
    0xe3,0xea,0xcb,0x43,0xc9,0xd5,0xaa,0xaf,0x72,0xf5,0x4f,0x03,0x6c,0x8c,0x9b,0xaf,
    0x08,0xc0,0x3c,0x37,0xff,0x3c,0x00,0xf7,0xdc,0x7c,0x65,0x00,0xee,0xb9,0x79,0x4e,
    0x00,0x7e,0x15,0xf7,0x7d,0x6b,0x8e,0x77,0xa4,0x73,0x73,0xc4,0xbe,0x39,0x94,0xdf,
    0x8f,0xdf,0x21,0x3f,0xce,0xa0,0xee,0xc5,0x2f,0xd1,0x59,0xcd,0xef,0x08,0xf0,0x55,
    0x1b,0xad,0xf9,0x02,0x57,0x73,0xd5,0xcd,0x4b,0x63,0x01,0x6b,0x35,0xcf,0xed,0xfd,
    0x16,0xfa,0xa8,0xaf,0xe5,0xfb,0xd7,0x00,0xdc,0x6c,0xfe,0x16,0xb0,0x9e,0xb7,0x79,
    0x23,0x00,0xb7,0x9a,0x6c,0x0d,0xc0,0xd4,0xd7,0x6a,0xf2,0x66,0x00,0x7e,0xb0,0xab,
    0xc9,0x5b,0x01,0xb8,0xd6,0x64,0x36,0x6b,0xf0,0x76,0x00,0x7e,0x35,0xe5,0x7f,0x04,
    0x60,0x76,0xee,0xff,0x19,0x80,0xe9,0x37,0xb6,0x25,0xcc,0xf7,0xdd,0x80,0xef,0xee,
    0xaa,0xb3,0x5e,0xfc,0xef,0x00,0xbc,0x91,0x3d,0xda,0x6a,0xfc,0x5e,0x80,0x6e,0x1d,
    0xe7,0x7b,0x3f,0xc0,0xef,0x3d,0x9e,0x21,0xab,0xcb,0x02,0x9e,0x21,0xb5,0xf9,0x4d,
    0x04,0xdf,0xe9,0xb9,0x7a,0x9f,0xf5,0x5b,0xca,0xb5,0xef,0x0a,0xd8,0xb7,0x66,0xbe,
    0xa7,0x2f,0x72,0xb5,0x56,0xdd,0xc2,0x34,0xee,0xe7,0x9c,0x0b,0x79,0x96,0x8b,0x67,
    0x65,0xee,0xdf,0x56,0xbe,0x73,0x16,0xcf,0xcb,0x01,0xf8,0xc5,0x8e,0x6f,0xef,0x0b,
    0x58,0xff,0x5e,0xc6,0xb7,0x88,0x73,0xdd,0x5f,0x91,0x17,0xb9,0x78,0x6f,0x8f,0xf0,
    0x5b,0x48,0x9e,0x56,0x5b,0xab,0xd5,0xef,0x2b,0xf1,0x2e,0x75,0xf1,0xaa,0xae,0x35,
    0x8d,0x76,0xce,0xd9,0xea,0xe2,0x5d,0xe2,0xe2,0xbd,0x9e,0x58,0x5b,0x00,0xee,0xe3,
    0x7d,0x98,0xf1,0xb6,0x31,0xbe,0xa5,0x9c,0xab,0xbd,0x22,0x2f,0x75,0xf1,0xce,0x8b,
    0xf0,0x6b,0x65,0xbc,0x6a,0xbb,0x98,0xf1,0x3e,0x5a,0x89,0xf7,0x19,0x17,0xaf,0xea,
    0x96,0xa5,0xf1,0x0c,0xe7,0x5c,0xe6,0xce,0xc9,0x1f,0x19,0x47,0xb3,0x8b,0x6d,0x79,
    0x00,0xde,0xee,0x7a,0xd7,0xe3,0x01,0xf5,0x5a,0xee,0x7c,0x9f,0xa4,0xaf,0x7e,0xa7,
    0x35,0x0e,0x7e,0x2a,0x00,0x6f,0x74,0xbe,0x2b,0x02,0x62,0x7f,0x8a,0xb9,0x59,0x1c,
    0xcf,0xb8,0xdc,0x5a,0x22,0x6c,0x34,0xdf,0x15,0x8c,0xd7,0x74,0xf3,0x23,0xd6,0x56,
    0xdd,0xe3,0xd4,0x5d,0x98,0x43,0xb7,0xca,0xdd,0xdf,0x6a,0xa7,0x35,0x36,0xdd,0x1a,
    0xa7,0x6b,0xa1,0xce,0xde,0x29,0xd6,0xf2,0x1e,0xd6,0x6f,0xca,0x86,0x75,0xf2,0x9e,
    0x56,0xac,0xc3,0xbe,0x6f,0x04,0xe0,0xa3,0x98,0x8f,0x62,0xcf,0x06,0xf8,0xaf,0x77,
    0x9c,0xb4,0x21,0x10,0x67,0xce,0x1b,0x03,0xb0,0x55,0xae,0xd7,0x6f,0x0a,0xc0,0x35,
    0xae,0x93,0xb3,0xdd,0x8a,0xe7,0x9d,0x7f,0xe5,0xf8,0x26,0xab,0xba,0xc8,0xef,0x9e,
    0x35,0x8c,0xd9,0xf8,0xed,0xb8,0x58,0xe6,0x31,0x27,0x74,0xe7,0xb7,0xe3,0xbf,0x44,
    0x67,0xfc,0xd6,0x33,0xc2,0x57,0x6d,0xf4,0x4c,0xf4,0x8e,0xe5,0x99,0x50,0xdd,0x6e,
    0x69,0x28,0xa6,0x7b,0xa1,0xbf,0x8d,0xbb,0xbe,0x4b,0x9f,0xe3,0x62,0xc9,0x5d,0x27,
    0x45,0xe0,0x66,0xd3,0x14,0xb1,0x9e,0xb7,0x39,0x35,0x02,0x37,0x7e,0x3b,0x3d,0x02,
    0x53,0x5f,0xe3,0xb7,0xe6,0x08,0xdc,0xf3,0xdb,0x19,0x11,0xb8,0xe7,0xb7,0x33,0x23,
    0x70,0xe3,0xb7,0xb3,0x22,0x30,0x3b,0x7b,0x53,0x22,0x30,0xcf,0x6f,0x67,0x47,0xf0,
    0x9b,0xea,0x8c,0xdf,0xa6,0x45,0xe0,0x55,0x7e,0xfb,0x7e,0x84,0xce,0xf8,0x6d,0x7a,
    0x84,0x9f,0xe2,0x7a,0x46,0xad,0x2e,0x7a,0xb5,0x73,0xf8,0x00,0xf9,0x4d,0xcf,0xed,
    0x74,0xd6,0x4f,0xeb,0xda,0x2f,0x76,0xe7,0xb2,0x3e,0x49,0xae,0xa3,0xbf,0xfe,0x36,
    0x6e,0xe8,0x1b,0xbf,0xc8,0x65,0xfb,0x46,0xe0,0x9e,0x1b,0xf6,0x8b,0x58,0x6b,0x5f,
    0xc6,0xd2,0x8f,0x73,0xd5,0x55,0xe4,0x7e,0x2e,0xb6,0x07,0x23,0xfc,0xfa,0x30,0xc6,
    0x3a,0xc6,0x36,0x24,0x76,0xe7,0xad,0x01,0x49,0x1e,0x4c,0xff,0x01,0x2e,0xb6,0x83,
    0xe2,0x17,0x79,0x6b,0x60,0x04,0xee,0x63,0x1b,0xc4,0xd8,0x06,0x32,0x96,0x21,0x9c,
    0x6b,0x70,0x45,0x1e,0xe2,0x62,0x6b,0x8d,0xf0,0x1b,0xc0,0xd8,0x06,0x33,0xb6,0xfa,
    0xd8,0x9d,0xa3,0x0e,0x49,0x72,0x3d,0xfd,0x0f,0x71,0x7b,0xfd,0x0d,0xae,0xe9,0x39,
    0xea,0xd0,0x08,0xdc,0x73,0xd4,0xd0,0x88,0x3a,0x1c,0xea,0x7c,0x87,0xd3,0xd7,0x73,
    0xd4,0x88,0x08,0xdc,0x73,0xd4,0xe1,0x11,0x71,0x8e,0x60,0x1e,0x16,0x47,0xbd,0xcb,
    0xa3,0x8d,0x36,0x9a,0x9b,0xda,0x1f,0xe2,0x74,0x4b,0xb8,0xb6,0xea,0x86,0x52,0x67,
    0x3c,0x34,0xd2,0xdd,0xa3,0x4b,0x2a,0x1c,0x35,0xca,0xe9,0xda,0x2a,0x1c,0x35,0x9a,
    0xf7,0xa1,0xe7,0xa8,0x31,0xbc,0x2f,0x3d,0x47,0x8d,0x8d,0xc0,0x3d,0x47,0x8d,0x8b,
    0xf0,0x57,0x9d,0x9d,0xf9,0xf1,0x11,0xb8,0xe5,0x3c,0x21,0x02,0xd3,0xf8,0x8c,0xa3,
    0x26,0x46,0xe0,0x1a,0x97,0x71,0xd4,0x87,0x39,0x78,0x6a,0x62,0x2c,0xff,0x36,0x13,
    0xc9,0x53,0xd6,0x7f,0xfe,0xcb,0x67,0x32,0x7b,0x7e,0xdd,0xe6,0xbe,0xc3,0xab,0xee,
    0xa3,0x34,0xb6,0xf1,0x3b,0xfc,0x47,0xee,0x1b,0xf3,0xc7,0xfc,0xc6,0xfc,0x8a,0xfb,
    0xb6,0xf0,0x49,0x0e,0xfc,0x57,0xcc,0x65,0x7b,0x0e,0xac,0x21,0x2b,0xfd,0x76,0xd0,
    0xaf,0xd1,0xf9,0x7d,0x9a,0x03,0x37,0xbf,0x9d,0x39,0xb0,0x06,0xf7,0x37,0x8c,0xcf,
    0x72,0xcc,0xb7,0x33,0x2f,0xff,0x86,0xf1,0x39,0xbf,0x87,0xab,0x4e,0xe7,0xd2,0xbf,
    0xe7,0x09,0xff,0x96,0x77,0x5e,0x92,0xf5,0xb7,0xda,0x7c,0xc8,0xbf,0x1f,0x58,0x1e,
    0xdb,0x2a,0x7f,0x4f,0xd0,0xeb,0xff,0x52,0x75,0x46,0xa7,0xf1,0x7f,0xa6,0x6e,0x84,
    0x69,0x58,0x24,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//  uniform int texelOffset;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * texOffsetY + tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
