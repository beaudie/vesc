// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x59,0x0b,0x90,0x57,0x65,
    0x15,0xbf,0xf7,0x7c,0xdf,0xf2,0xd4,0x7c,0x80,0xa2,0x62,0x0f,0x74,0x34,0x95,0x15,
    0x09,0x71,0x69,0x5c,0x51,0x94,0x01,0xd7,0x0d,0x83,0xd5,0xd6,0x17,0x53,0xa6,0x62,
    0x29,0x2f,0x25,0xa9,0xc8,0xb7,0x0e,0x66,0x4d,0x96,0x93,0xa3,0x26,0xe6,0x7b,0x46,
    0x67,0xd8,0xcc,0x45,0x2a,0x81,0x12,0x65,0x1f,0xb2,0xab,0x2b,0xc8,0x53,0x14,0xd4,
    0x18,0x1b,0x33,0x9d,0xa9,0xc6,0x1c,0x15,0x50,0xd8,0xbe,0x73,0x7f,0xbf,0xc3,0x3d,
    0x7b,0xb3,0x9d,0xb9,0x7b,0xff,0xe7,0xf7,0x3b,0xe7,0xfb,0xce,0x39,0xdf,0x77,0xcf,
    0xb9,0x8f,0x20,0x47,0xf6,0xcf,0x42,0x9e,0x0d,0xca,0x06,0x64,0x9d,0x31,0x2b,0xfe,
    0x0e,0xc8,0x24,0xcb,0x79,0x1e,0xc5,0xf3,0x78,0x9e,0x27,0xa6,0xf3,0xe0,0xac,0x5f,
    0xc1,0x9f,0x39,0xe5,0xdc,0x29,0xa3,0xae,0x99,0x3f,0x63,0xd4,0xd8,0x93,0x46,0xab,
    0xdd,0x17,0xb2,0x50,0xd8,0x2b,0xb7,0x5f,0xd6,0x3f,0xab,0x49,0x67,0x1d,0x72,0xce,
    0x25,0x57,0xce,0x55,0x7c,0x4c,0x3a,0x4e,0x4e,0xc7,0xfe,0xc9,0x3e,0x16,0xe3,0x65,
    0xd9,0x04,0xea,0x17,0xe3,0x25,0x74,0x4c,0x31,0x7e,0x96,0x1d,0x46,0xf9,0x64,0xca,
    0xc3,0xd3,0xd1,0x90,0x46,0xdc,0x01,0x17,0xb3,0x23,0x79,0x36,0x2c,0x27,0x16,0x1d,
    0x26,0xc4,0x06,0x38,0x2c,0x10,0xdb,0xc7,0x61,0x91,0xd8,0xfe,0x0e,0xab,0x21,0x36,
    0xd4,0x61,0xfd,0x88,0x1d,0x52,0xf8,0x16,0xf6,0xce,0xa1,0x7e,0x76,0x24,0x07,0x8e,
    0xa0,0x4f,0x26,0x8f,0x70,0xf2,0x20,0xe9,0xcb,0xab,0x3c,0x62,0x6f,0xdc,0xa1,0x90,
    0x0f,0x25,0x77,0x98,0x20,0x66,0x95,0x87,0xa4,0x19,0x74,0x8e,0x11,0x49,0x27,0x70,
    0xbe,0x83,0x92,0x8e,0xfa,0xf2,0x15,0xda,0x0f,0x4b,0x72,0x7f,0xfa,0x67,0xfc,0x60,
    0xf2,0x59,0x71,0x8e,0x45,0xbc,0xfd,0x99,0x4b,0xd5,0x3f,0x80,0xbf,0x85,0xfc,0x81,
    0xe4,0x0f,0xa0,0x3c,0x8c,0x72,0x3f,0xea,0x8f,0xa6,0x7e,0x20,0xff,0x35,0xce,0xad,
    0x78,0x3d,0xe5,0x31,0xc4,0x46,0xd2,0xbf,0x3a,0xe6,0xde,0xf8,0x93,0x1d,0x3f,0xb8,
    0xc0,0x4b,0xff,0x4e,0x21,0x37,0xd8,0xf1,0xa7,0x71,0x6d,0x4c,0x9e,0x54,0xec,0xab,
    0x72,0xfc,0x06,0xc7,0xab,0xdc,0x58,0x99,0xbf,0x89,0xf1,0x99,0x7d,0x73,0x85,0x9f,
    0xce,0x78,0x34,0xbe,0xcb,0x39,0xb7,0x9f,0x6f,0x26,0xfd,0x37,0x79,0x16,0xf7,0x88,
    0xc9,0xb3,0xb9,0x17,0x6a,0x53,0xa6,0xd4,0x7e,0x0e,0x63,0x9a,0x49,0xdd,0xd9,0x4e,
    0xf7,0xaa,0x74,0xf4,0x3a,0xf9,0xda,0x8a,0x6f,0x37,0xd1,0x17,0xf3,0xed,0xae,0x74,
    0x1c,0xef,0xe4,0x45,0x9c,0xcb,0xe4,0x87,0xb9,0x37,0x4d,0x7e,0xdc,0xf9,0xa6,0x72,
    0x0b,0xf7,0xb0,0xc9,0xad,0xe9,0xf8,0x32,0x63,0x5d,0xc5,0x75,0xd5,0x58,0x0f,0x4f,
    0xff,0xdb,0xd2,0x79,0x15,0x7d,0x36,0xfd,0xf6,0xe2,0x7a,0x46,0x6c,0xca,0x75,0x30,
    0x9f,0x2d,0x5c,0xd7,0x76,0xa7,0xdb,0xc9,0xf1,0x4c,0x7e,0x21,0x1d,0x03,0x9d,0xbc,
    0x9a,0xd7,0x9b,0x8d,0xd5,0xc5,0xb1,0x3a,0xa9,0xbb,0xda,0xe9,0x76,0x73,0xdf,0x99,
    0xee,0x8b,0x5c,0xd7,0x06,0x72,0xab,0x1d,0xf7,0x12,0xb9,0xe9,0xf4,0xcb,0x8f,0xd3,
    0xc3,0xf5,0x34,0xdd,0x97,0x9d,0xff,0xdd,0xe4,0x4d,0x77,0x4d,0x3a,0x06,0x39,0xdd,
    0xb5,0xce,0xbf,0x3a,0xf2,0xc6,0xbd,0xc2,0xf9,0x3a,0x39,0x8e,0xe7,0xd6,0xd1,0xae,
    0xe1,0x73,0xb8,0xf5,0xf4,0xd5,0xe6,0x7f,0xc1,0x71,0x1b,0x2a,0x31,0x7a,0x6e,0xa3,
    0x8b,0xb1,0xca,0x6d,0x72,0x76,0x9d,0x15,0x6e,0x33,0x7d,0x99,0xee,0x38,0x8b,0xf7,
    0x55,0x5e,0x77,0xa6,0xbb,0x85,0x58,0x23,0x6d,0xfc,0x38,0xaf,0xb9,0xfc,0x76,0x33,
    0x1f,0xc6,0xbd,0xee,0xe2,0xed,0xdc,0xcb,0x0d,0x29,0xf6,0xd3,0x56,0xee,0x99,0x2e,
    0xae,0xe1,0x4b,0x5c,0x83,0xb5,0xcc,0xe1,0x3a,0xe6,0x64,0x03,0x63,0xdc,0x44,0x9f,
    0xb7,0x70,0xce,0xd7,0x59,0x17,0xde,0xe4,0x7e,0x68,0x2b,0xf6,0xbb,0x64,0xef,0xa5,
    0xf3,0x97,0xd2,0xee,0xb2,0x7a,0xfc,0xff,0x0e,0xb5,0xdd,0xc9,0x7d,0xb8,0x83,0x35,
    0x48,0xe5,0x5d,0xc4,0x94,0xff,0x94,0xbf,0xfd,0xde,0xd5,0x6b,0x34,0xff,0xac,0xb7,
    0xd7,0xe4,0x9a,0x54,0x30,0x7a,0x43,0xc9,0xf7,0x53,0x39,0x39,0x74,0x70,0xba,0x5a,
    0xf7,0xcd,0x51,0x63,0x95,0xd3,0xdf,0x07,0x6a,0x71,0xc9,0x6e,0x9a,0x68,0xf2,0xd0,
    0x42,0xce,0x4e,0x33,0xf9,0xe8,0x42,0xde,0x3e,0xc1,0xae,0xf9,0xda,0x1c,0xb1,0xed,
    0xad,0x4f,0x79,0x79,0xcd,0xaa,0xbc,0x20,0xef,0xeb,0xdb,0xc2,0x1c,0xfe,0xe9,0x35,
    0xbc,0x28,0xfd,0x7e,0x8f,0x35,0xe4,0xd0,0x14,0xc5,0xaa,0x1c,0xfb,0xbd,0x26,0xeb,
    0xfb,0x97,0xf3,0x3c,0x3c,0xf9,0xdb,0x96,0x84,0x55,0x39,0x62,0x6f,0x27,0xa1,0x58,
    0x3d,0xe5,0x0e,0x62,0x3a,0xde,0x00,0x29,0xfb,0x83,0xff,0x93,0x22,0xff,0x18,0x63,
    0x20,0x49,0xd5,0xad,0xa7,0x3c,0x88,0x98,0xfa,0x78,0xb0,0xc0,0xff,0xe0,0x62,0x3a,
    0x54,0xd0,0xf3,0x6b,0x13,0xa3,0xbd,0x43,0x7b,0x9d,0x62,0xcd,0xac,0xcf,0x16,0x6b,
    0x6d,0xc2,0x4e,0x28,0xf4,0x6a,0x8a,0x1c,0x3d,0x14,0xb1,0xbf,0xea,0x1c,0xf6,0x70,
    0xc4,0xfe,0x6b,0x72,0xd8,0x23,0x11,0xfb,0x75,0xba,0xab,0xcb,0x8f,0x46,0xd4,0x5f,
    0x7f,0xe4,0xc9,0x2b,0xe5,0x96,0x15,0xe3,0xd6,0x14,0x71,0xf1,0xf6,0xa7,0xf0,0x77,
    0x47,0x42,0x6a,0xb8,0x6f,0x74,0x0f,0x9e,0x12,0xb0,0x56,0x26,0x3f,0x21,0xa5,0xac,
    0xbd,0x73,0x6b,0xde,0x57,0xfe,0x1b,0xe5,0x4f,0xd2,0x68,0x75,0xcc,0xc9,0xa7,0xe9,
    0xb7,0xf6,0x87,0x71,0x82,0xf1,0xf5,0x3c,0x9e,0xbd,0xf5,0x74,0x41,0xff,0x9c,0x9a,
    0xac,0xb4,0x07,0x9f,0x21,0xc0,0x4e,0x97,0x72,0x1d,0xaf,0x67,0x9f,0x9f,0x28,0xe0,
    0x17,0x32,0xe6,0x49,0x02,0x4c,0x73,0x74,0x7a,0xc2,0xb4,0x97,0x4e,0x16,0xf4,0x5b,
    0x9d,0x6f,0x3c,0x73,0x7f,0xa6,0x00,0x6f,0x4f,0x3a,0x2a,0x37,0x08,0xb0,0xd3,0x38,
    0xb6,0xe6,0xfd,0x2c,0x01,0xde,0x45,0x9d,0x29,0xd4,0x99,0xe4,0x74,0xce,0x16,0xe0,
    0xaa,0xa3,0xf2,0x54,0x81,0x9d,0xd6,0x8f,0x85,0xc4,0xa6,0x09,0xea,0x82,0x72,0x4d,
    0xc4,0xce,0x11,0xf8,0xaa,0x7f,0x37,0x13,0x3b,0x57,0x80,0xab,0xfe,0x39,0x09,0xd1,
    0x78,0x16,0x44,0xe0,0xa6,0x6b,0xf3,0x9c,0xc7,0x79,0x9a,0xdc,0x3c,0xe7,0x53,0x3e,
    0xcf,0xcd,0x73,0x21,0x6d,0x73,0x37,0xcf,0x45,0x02,0xfc,0x7c,0x37,0xcf,0x75,0x11,
    0xb8,0xce,0x97,0xbb,0x79,0xbe,0x2d,0x88,0x71,0x7a,0x51,0xc3,0x80,0x5d,0x4c,0x4c,
    0xe7,0x9a,0xc6,0xbc,0x7f,0x57,0xa0,0xab,0xdc,0xcd,0xc4,0x2e,0x15,0x8c,0xab,0x9c,
    0xae,0x85,0xd6,0x98,0xbb,0x73,0xd4,0x9d,0xe9,0x5c,0x0b,0x1d,0xef,0x9e,0x1c,0xb8,
    0xe9,0xdc,0x4b,0x9d,0x06,0xa7,0xf3,0x9b,0x1c,0xb8,0xcd,0x77,0x5f,0x0e,0x3b,0xc5,
    0x5b,0x13,0xa6,0x35,0xe0,0xfe,0x1c,0x73,0x2a,0x77,0x7f,0xb2,0xd3,0x9a,0xf0,0x5b,
    0xe2,0xba,0xf7,0x1e,0xe4,0x35,0xbd,0x2b,0x71,0x8a,0x3f,0x90,0x0e,0xc5,0x74,0xff,
    0xe9,0xef,0x9d,0xe9,0x5c,0xc7,0xfd,0xa8,0x78,0x07,0xe7,0x7a,0x8c,0xe3,0xea,0x35,
    0xd6,0x45,0xec,0x09,0x62,0x8f,0xc4,0x32,0xd7,0x8b,0x73,0xe0,0x99,0x5b,0x93,0x96,
    0x1c,0x71,0x28,0x67,0x7a,0x4f,0x52,0xcf,0xaf,0xc9,0xef,0x73,0xe8,0x2a,0x67,0xb6,
    0x4f,0xd3,0x56,0x31,0xd3,0xfb,0x63,0x0e,0x7c,0x71,0x5e,0xae,0xc7,0x72,0xe6,0xa2,
    0xc9,0xad,0xd1,0x4a,0xe6,0xc6,0xef,0x8f,0xe7,0x72,0xe8,0x2a,0xa7,0x79,0xd5,0x7a,
    0xd7,0xc9,0x5a,0x67,0xd7,0xca,0xea,0x1c,0xd7,0xde,0xb5,0xee,0x5a,0xe9,0xca,0x81,
    0xdb,0x9e,0xef,0xce,0x81,0xd9,0xb8,0x2f,0xe6,0x18,0xbb,0xdb,0xc5,0xd8,0x93,0x23,
    0x6f,0xb9,0x9b,0x7f,0x4d,0x0e,0x7c,0xb9,0x8b,0x67,0x6d,0x0e,0xfb,0x35,0xce,0x76,
    0x1d,0x6d,0xfd,0xb5,0xb1,0x3e,0x87,0xae,0x72,0x33,0xf4,0xbe,0x2d,0x9d,0x37,0xd0,
    0xff,0x8b,0x93,0x8e,0xd6,0xaf,0x8d,0xc4,0xd6,0x73,0x2c,0xf5,0xfd,0x4a,0x01,0x9e,
    0x17,0x7b,0x15,0x35,0xf0,0x1a,0x01,0xee,0x8f,0x76,0x8e,0x31,0x5f,0xc0,0xcf,0xe1,
    0x35,0xa0,0xd8,0x8f,0x05,0xf8,0xa3,0xb1,0x1c,0xf7,0x27,0x02,0x3c,0x2b,0xfa,0x3d,
    0xb0,0x6b,0x05,0xf8,0xec,0xac,0xd4,0xbb,0x9e,0x7a,0xb9,0xd3,0xbb,0x41,0x80,0xcf,
    0x2a,0xee,0x2f,0x80,0xdd,0x28,0xb0,0xbf,0x41,0x4a,0xdb,0x9b,0x69,0x2b,0xce,0xf6,
    0x16,0x01,0x3e,0xd3,0xd9,0xde,0x2a,0xb0,0xbf,0xc5,0xd9,0x2e,0xa4,0x6d,0x70,0xb6,
    0xb7,0x09,0xf0,0x7a,0x67,0xfb,0x53,0x81,0xfd,0x6d,0xce,0x76,0x36,0x73,0x96,0xb9,
    0x9c,0xfd,0x42,0x80,0xfb,0xc3,0x72,0x76,0x87,0x80,0xf7,0x39,0xbb,0x53,0x80,0xfb,
    0x9c,0xfd,0x5a,0x80,0xfb,0x9c,0xdd,0x25,0xc0,0x7d,0xce,0xee,0xa6,0x9e,0xcf,0xd9,
    0x3d,0x02,0xdc,0xe7,0xec,0x5e,0x81,0xfd,0x3d,0xce,0xf7,0xfb,0x68,0xeb,0x73,0xb6,
    0x48,0x80,0xfb,0x9c,0xdd,0x2f,0xb0,0x5f,0xe4,0x6c,0x1f,0xa0,0xad,0xcf,0xd9,0x83,
    0x02,0xdc,0xe7,0xec,0x21,0x81,0xbd,0x72,0x5a,0x8f,0xb4,0x47,0xcd,0x15,0xe4,0x52,
    0xb9,0x53,0xd3,0x08,0xda,0x03,0xe7,0x4a,0xb9,0xf7,0x9f,0x62,0x0d,0xd5,0xeb,0xfc,
    0x56,0x62,0xad,0x82,0x67,0x9b,0xa7,0x58,0x1f,0xf5,0xb9,0x60,0x89,0xa0,0x7f,0x36,
    0xbb,0xeb,0xef,0x69,0x01,0xde,0x93,0xac,0x54,0x5e,0x2a,0xc0,0x16,0xf1,0x1e,0xc0,
    0xae,0xcb,0x3f,0x08,0x38,0xb3,0xfb,0x53,0xc5,0xee,0x19,0x01,0xf6,0x30,0x6b,0xab,
    0xd9,0x2d,0x13,0x70,0x66,0xb7,0xa2,0x62,0xf7,0x67,0x01,0xf6,0x78,0xc5,0xee,0x2f,
    0x02,0x6e,0x6f,0xcd,0x11,0xc4,0xa4,0xf7,0xc7,0x16,0xcf,0x73,0x8c,0x67,0xa5,0x1b,
    0xff,0x79,0x01,0x6e,0x3d,0xa6,0x8d,0x76,0xad,0x59,0x39,0x67,0xbb,0x40,0xaf,0x8d,
    0x7d,0xc6,0xe6,0xec,0x10,0x70,0x96,0xc3,0x17,0x04,0xf7,0x47,0x4f,0x39,0x3f,0xba,
    0x04,0xb8,0xf7,0xa3,0x9b,0x7e,0x74,0x39,0x3f,0x5e,0x14,0xe0,0xe6,0x47,0x0f,0xed,
    0x5a,0xb3,0xf2,0xbe,0xe0,0x65,0x81,0x5e,0x8f,0xbb,0x0f,0x58,0x23,0xc0,0x9b,0x9d,
    0x5f,0x6b,0x05,0xb8,0xae,0xbd,0xde,0x0f,0x6d,0x2d,0xe6,0xee,0x57,0xbc,0x3b,0x58,
    0x2f,0xb8,0x47,0xd2,0x7c,0x75,0x48,0xd9,0xd3,0x36,0x08,0x38,0x8b,0x65,0x93,0x60,
    0x9c,0xc6,0xe2,0xf9,0x0d,0xd8,0x66,0x81,0xde,0x26,0xb7,0x97,0xb6,0x08,0xd6,0xba,
    0xce,0xd5,0xc7,0xd7,0x04,0xb8,0xae,0xcf,0xef,0x12,0xa6,0xbd,0x6f,0xab,0x60,0x6d,
    0x5f,0xe5,0xbd,0xd7,0xdb,0x52,0xf6,0x3f,0xe5,0xb6,0xa5,0x63,0x3b,0xfb,0xdd,0x36,
    0x37,0xfe,0x5b,0x82,0x79,0x97,0x39,0xec,0xaf,0x02,0x5c,0xe7,0xd4,0x3e,0xf9,0x36,
    0xed,0xd4,0xde,0xcb,0x7a,0xfe,0x28,0xd5,0x0c,0xb5,0x79,0x2c,0xc2,0x6e,0x1b,0xc7,
    0xdb,0x2e,0xa5,0xbf,0xef,0x08,0x7c,0x7e,0x2c,0x96,0x7d,0xff,0xef,0x82,0xbe,0xdf,
    0xe9,0xfa,0xfe,0xbb,0x02,0xdc,0x62,0xfa,0x87,0x00,0xd3,0x98,0x16,0x27,0x0d,0xd5,
    0x79,0x4f,0x80,0xf7,0x66,0x7d,0xf1,0x7f,0x12,0xd7,0xe7,0x16,0x7d,0x56,0xd9,0x27,
    0x1b,0x50,0xe0,0x1f,0xb0,0xb6,0x1c,0x4f,0x3f,0xd4,0x5e,0x75,0xaf,0xe2,0xb3,0xc9,
    0x87,0x02,0x1d,0x93,0x3f,0x22,0xff,0xb3,0xe4,0x83,0xca,0x1f,0x0b,0x74,0x14,0xbf,
    0x8d,0xd8,0x27,0x02,0x5c,0x9f,0x7b,0x6e,0x21,0xb6,0x43,0x80,0xeb,0xb3,0xcf,0x5c,
    0xc6,0xb3,0x53,0x80,0x5b,0xcd,0xe9,0x65,0xad,0x0d,0xae,0xd6,0x0e,0x0c,0xc0,0xfd,
    0x61,0xb5,0x76,0x50,0x00,0xef,0x6b,0xed,0xbe,0x01,0xb8,0xaf,0xb5,0xfb,0x05,0xe0,
    0xbe,0xd6,0xee,0x1f,0x80,0xfb,0x5a,0x7b,0x20,0xf5,0x7c,0xad,0x1d,0x12,0x80,0xfb,
    0x5a,0x3b,0x34,0xc0,0x5e,0x39,0xb3,0x3d,0x98,0xb6,0xbe,0xd6,0x0e,0x0b,0xc0,0x7d,
    0xad,0x3d,0x24,0xc0,0x7e,0x98,0xb3,0x3d,0x8c,0xb6,0xbe,0xd6,0x0e,0x0f,0xc0,0x7d,
    0xad,0x3d,0x3c,0xc0,0x7e,0xb8,0xb3,0x95,0x80,0x9c,0x89,0xcb,0xd9,0x88,0x00,0xdc,
    0x1f,0x96,0xb3,0x23,0x02,0x78,0x9f,0xb3,0xa3,0x02,0x70,0x9f,0xb3,0xaf,0x06,0xe0,
    0x3e,0x67,0xc7,0x04,0xe0,0x3e,0x67,0xc7,0x51,0xcf,0xe7,0x6c,0x64,0x00,0xee,0x73,
    0x56,0x1b,0x60,0x3f,0xd2,0xf9,0x3e,0x8a,0xb6,0x3e,0x67,0x27,0x04,0xe0,0x3e,0x67,
    0xa3,0x03,0xec,0x4f,0x70,0xb6,0x63,0x68,0xeb,0x73,0x76,0x62,0x00,0xee,0x73,0x36,
    0x36,0xc0,0x5e,0x39,0xeb,0x4f,0x31,0x20,0x97,0xca,0x69,0x8d,0xd2,0x67,0x32,0xc5,
    0xac,0x3e,0x4e,0x0e,0x78,0x4e,0xf3,0x7d,0xe7,0xcc,0x00,0xdc,0x6a,0x72,0x43,0x00,
    0x56,0xed,0x3b,0x67,0x05,0x70,0x66,0xf7,0x8d,0x8a,0xdd,0x94,0x00,0xac,0xda,0x77,
    0xce,0x0e,0xe0,0xcc,0x6e,0x6a,0xc5,0x6e,0x5a,0x00,0x56,0xed,0x3b,0x4d,0x01,0x9c,
    0xf9,0xfe,0x2d,0xfa,0xee,0x7b,0x4c,0x73,0x00,0x6e,0x63,0x5d,0x10,0x80,0x55,0xfb,
    0xc9,0x85,0x01,0x9c,0x8d,0xf5,0x1d,0x8e,0xe5,0xfb,0xc4,0xc5,0x01,0xb8,0xf5,0x84,
    0x4b,0x03,0x30,0xdf,0x13,0x2e,0x0b,0xc0,0x7d,0x4f,0x98,0x11,0x80,0x6b,0xbe,0xf5,
    0x99,0xd9,0xf7,0x84,0xef,0x07,0x3c,0x47,0x6b,0x2c,0x17,0x86,0xb2,0xde,0x5d,0x11,
    0xc0,0x59,0x4f,0x98,0x19,0x30,0x8e,0xef,0x09,0xb3,0x02,0xf4,0x94,0xb3,0xfa,0x3c,
    0x27,0x60,0x1d,0x7c,0x4f,0x98,0x1b,0x80,0xfb,0x9e,0x70,0x75,0x40,0xde,0xad,0x27,
    0x2c,0x08,0x65,0x4f,0x50,0x6e,0x5e,0x3a,0x7e,0x14,0x50,0xcb,0xe7,0xb9,0xf1,0xe7,
    0x07,0xcc,0x7b,0xb6,0xc3,0x7e,0x18,0x80,0x5b,0x4f,0x58,0x40,0x3b,0xb5,0xf7,0xb2,
    0x9e,0xad,0x27,0x3c,0x11,0x61,0x37,0x8f,0xe3,0xa9,0xae,0xf9,0x7b,0x5d,0x80,0xcf,
    0xaa,0x63,0xb5,0xfa,0xf6,0x50,0xd6,0x6a,0xe5,0xab,0xb5,0xfa,0xe7,0x01,0x3a,0x56,
    0x9b,0xef,0x08,0xc0,0x7c,0x6d,0xfe,0x65,0x00,0xee,0x6b,0xf3,0xaf,0x02,0x70,0x5f,
    0x9b,0xef,0x0c,0xc0,0xaf,0xe7,0xba,0xbf,0x9f,0xe3,0x79,0xeb,0x92,0x1c,0xbe,0xbf,
    0x13,0xca,0x77,0xd3,0x3b,0x79,0x2f,0x3a,0x83,0xdc,0xbb,0x9f,0xc3,0x59,0xce,0x17,
    0x07,0xd8,0xaa,0x8e,0xe6,0xbc,0xd5,0xe5,0x5c,0xb9,0x96,0x74,0xb4,0x32,0x57,0x2d,
    0x6e,0xed,0xff,0x45,0x1b,0xb5,0xb5,0x78,0xff,0x1d,0x80,0x9b,0xce,0x7f,0x02,0xe6,
    0xf3,0x3a,0x1f,0x06,0xe0,0x96,0x93,0x8f,0x02,0x30,0xb5,0xb5,0x9c,0x7c,0x1c,0x80,
    0x1f,0xed,0x72,0xf2,0x49,0x00,0xae,0x39,0x99,0xc3,0x1c,0xec,0x08,0xc0,0x6f,0xa4,
    0xbc,0x2b,0x00,0xb3,0x7d,0xff,0x69,0x00,0xa6,0xef,0xef,0x9e,0x64,0xbc,0xbb,0x03,
    0x9e,0x1f,0x95,0xb3,0x5e,0xbc,0x27,0x00,0x6f,0x64,0x8f,0xb6,0x1c,0xeb,0xfb,0x44,
    0xe5,0x56,0x73,0xbc,0x3c,0xc2,0xae,0x97,0x7b,0xc8,0xf2,0xd2,0xca,0x3d,0xa4,0x3a,
    0x8b,0x23,0xea,0x9d,0xee,0x2b,0xd5,0xd7,0x9c,0x2d,0xe1,0xdc,0x4f,0x07,0xac,0x5b,
    0x33,0x9f,0xf9,0x57,0xb8,0x5c,0x2b,0xb7,0x34,0x1d,0xcb,0x39,0xe6,0x52,0xee,0xe5,
    0xe2,0x5e,0x99,0xeb,0xf7,0x3e,0x9f,0x4d,0x8b,0xfb,0xe5,0x00,0x7c,0x96,0xab,0xb7,
    0xcb,0x02,0xe6,0x7f,0x86,0xfe,0xad,0xe0,0x58,0xcb,0x2b,0xf2,0x0a,0xe7,0x6f,0x4b,
    0x84,0xdd,0x52,0xd6,0x69,0xd5,0xb5,0x5c,0x3d,0x5b,0xf1,0xb7,0xd3,0xf9,0xab,0xdc,
    0xca,0x74,0x74,0x70,0xcc,0x95,0xce,0xdf,0x55,0xce,0xdf,0x5b,0x89,0xb5,0x05,0xe0,
    0xde,0xdf,0x76,0xfa,0xdb,0x46,0xff,0x3a,0x39,0x56,0x47,0x45,0xee,0x74,0xfe,0x3e,
    0x19,0x61,0xb7,0x92,0xfe,0xaa,0x6e,0x0b,0xfd,0xed,0xaa,0xf8,0xbb,0xd1,0xf9,0xab,
    0x5c,0xb7,0xf6,0x66,0x8e,0xd9,0xed,0xf6,0xc9,0x4b,0xf4,0xa3,0xd9,0xf9,0xd6,0x13,
    0x80,0xb7,0xba,0xde,0xb5,0x26,0x20,0x5f,0x3d,0xce,0xf6,0x15,0xda,0xea,0x3b,0x60,
    0xab,0xc1,0xeb,0x02,0xf0,0x46,0x67,0xbb,0x21,0xc0,0xf7,0x75,0x8c,0xcd,0xfc,0xd8,
    0xe8,0x62,0x5b,0x12,0xa1,0xa3,0xf1,0x6e,0xa0,0xbf,0xc6,0xb5,0x46,0xcc,0xad,0xdc,
    0x1a,0x72,0x57,0xe4,0xe0,0x36,0xbb,0xeb,0x5b,0xf5,0x34,0xc7,0xc6,0x6d,0x71,0xdc,
    0x12,0x72,0xf6,0x4c,0xf1,0x3a,0xaf,0x61,0x7d,0x5f,0x6d,0xd8,0x36,0x5e,0xd3,0x8a,
    0x75,0x12,0x7b,0x23,0x00,0xaf,0x63,0x3c,0x8a,0xbd,0x19,0x60,0xff,0x86,0xab,0x49,
    0x6f,0x05,0xe0,0x16,0xf3,0xf6,0x00,0x6c,0xb3,0xeb,0xf5,0x6f,0x07,0xe0,0xea,0xd7,
    0xd4,0x6c,0x60,0x71,0xbf,0xf3,0x41,0x8e,0xf7,0xbb,0xca,0x45,0xbe,0x43,0xad,0xa1,
    0xcf,0x56,0xdf,0x2e,0x88,0x65,0x1c,0x77,0x86,0xbe,0xf5,0xed,0xa2,0xcf,0xe1,0xac,
    0xbe,0x1d,0x1e,0x61,0xab,0x3a,0xba,0x27,0x8e,0x88,0xe5,0x9e,0x50,0xee,0x8b,0xe9,
    0x50,0x4c,0xd7,0x42,0x7f,0x5b,0xed,0xba,0x84,0x36,0x17,0xc4,0xb2,0x76,0x5d,0x1a,
    0x81,0x9b,0xce,0xe5,0x11,0xf3,0x79,0x9d,0xef,0x45,0xe0,0x56,0xdf,0xae,0x88,0xc0,
    0xd4,0xd6,0xea,0xdb,0x95,0x11,0xb8,0xaf,0x6f,0x33,0x23,0x70,0x5f,0xdf,0x66,0x45,
    0xe0,0x56,0xdf,0xe6,0x44,0x60,0xb6,0xf7,0xe6,0x46,0x60,0xbe,0xbe,0x5d,0x1d,0x51,
    0xdf,0x94,0xb3,0xfa,0x36,0x2f,0x02,0xaf,0xd6,0xb7,0x1f,0x44,0x70,0x56,0xdf,0xe6,
    0x47,0xd8,0x29,0xae,0x7b,0xd4,0xf2,0xa2,0x67,0xdb,0x87,0xcf,0xb2,0xbe,0xe9,0xbe,
    0x9d,0xcf,0xfc,0x69,0x5e,0x6b,0x63,0xdf,0x5a,0x76,0x54,0x92,0x47,0xd2,0x5e,0x7f,
    0x5b,0x6d,0x38,0x26,0xfe,0x6f,0x2d,0x3b,0x36,0x02,0xf7,0xb5,0xe1,0xb8,0x88,0xb9,
    0x8e,0xa5,0x2f,0xb5,0x1c,0x6b,0x64,0x45,0xae,0x75,0xbe,0xad,0x8c,0xb0,0x3b,0x8a,
    0x3e,0x8e,0xa4,0x6f,0xe3,0x62,0xdf,0xba,0x35,0x5a,0xbf,0x25,0xd0,0x7e,0xb4,0xf3,
    0xed,0xc4,0xf8,0xbf,0x75,0x6b,0x6c,0x04,0xee,0x7d,0x3b,0x89,0xbe,0x8d,0xa5,0x2f,
    0xe3,0x38,0x56,0x5d,0x45,0x1e,0xe7,0x7c,0x7b,0x3e,0xc2,0x6e,0x34,0x7d,0xab,0xa3,
    0x6f,0x93,0x63,0xdf,0x1a,0x55,0x9f,0xe4,0xc9,0xb4,0xaf,0x77,0x6b,0x3d,0x9e,0x73,
    0xfa,0x1a,0x75,0x6a,0x04,0xee,0x6b,0xd4,0x84,0x88,0x3c,0x9c,0xea,0x6c,0xcf,0xa0,
    0xad,0xaf,0x51,0x13,0x23,0x70,0x5f,0xa3,0x26,0x45,0xf8,0x39,0x91,0x71,0x98,0x1f,
    0x93,0x5d,0x1c,0x1d,0xd4,0xd1,0xd8,0x54,0xbf,0xde,0x71,0xed,0x9c,0x5b,0xb9,0x09,
    0xe4,0xac,0x0e,0x35,0xb8,0x6b,0xb4,0xbd,0x52,0xa3,0x1a,0x1d,0xd7,0x51,0xa9,0x51,
    0x53,0x78,0x1d,0xfa,0x1a,0xf5,0x4d,0x5e,0x97,0xbe,0x46,0x4d,0x8d,0xc0,0x7d,0x8d,
    0x9a,0x16,0x61,0xaf,0x9c,0xed,0xf9,0xa6,0x08,0xdc,0x62,0x3e,0x37,0x02,0x53,0xff,
    0xac,0x46,0x35,0x47,0xe0,0xea,0x97,0xd5,0xa8,0x5d,0x39,0xea,0x54,0x73,0x2c,0xbf,
    0xf3,0x44,0xd6,0x29,0xeb,0x3f,0x9f,0xf1,0x9e,0xcc,0xee,0x5f,0xf7,0xb8,0x77,0xfa,
    0xca,0xed,0x4e,0xc7,0x1e,0xbe,0xd3,0xdf,0xed,0xbe,0x29,0xf4,0xf2,0x9b,0xc2,0xab,
    0xee,0xdd,0x82,0x3e,0x84,0x29,0x7e,0x3b,0x63,0xc9,0x05,0x58,0x43,0x56,0xda,0x09,
    0xdf,0x49,0x34,0x3a,0xbb,0x20,0xc0,0xcd,0x2e,0x0a,0xb0,0x06,0xf7,0x3d,0xa4,0x46,
    0x30,0x5e,0x74,0xdf,0x43,0xfa,0x0b,0xde,0x6b,0xd7,0xf0,0xd9,0xa2,0xf8,0xae,0xc8,
    0xef,0x84,0xf6,0xee,0x7b,0x5f,0x81,0x5e,0x96,0x95,0xd8,0x7e,0xc4,0x72,0xe7,0xd7,
    0x10,0xfa,0xd5,0xe4,0xfc,0x1a,0x2a,0xc0,0xed,0x7e,0xfa,0x20,0xc1,0x3b,0xf9,0xa1,
    0xc5,0x7b,0xca,0x7e,0xc5,0x37,0xc8,0x61,0x82,0x39,0x74,0x4c,0xe5,0x2f,0xd3,0x35,
    0x23,0xbe,0x8b,0xdf,0x40,0x2c,0x7f,0x7b,0x2a,0xdf,0x44,0xf4,0xbc,0x3b,0x79,0xf1,
    0xf5,0x74,0xfc,0x17,0xf7,0x87,0x1a,0xae,0x2c,0x25,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage3D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     result . g = decode_etc2_alpha(flip_endian(payload . zw), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     finalResult . ba = EncodeBC4(result . g, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
