// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x95,0xdb,0x4e,0x53,0x51,
    0x10,0x86,0x57,0xcf,0x80,0xa0,0x40,0x39,0x89,0x1c,0x04,0x04,0x05,0x95,0x54,0x6d,
    0x0d,0x06,0x11,0x14,0x0a,0x22,0x55,0x81,0x42,0x41,0x8c,0x36,0x04,0x6a,0x24,0x81,
    0x42,0x80,0x0b,0x2f,0x4c,0xbc,0x30,0x3e,0x82,0xbe,0x84,0xcf,0x67,0x3c,0x24,0x26,
    0xce,0xac,0x7e,0xcb,0x8c,0x5c,0xb8,0x93,0x95,0xbd,0xe7,0x9f,0x7f,0x0e,0xff,0xda,
    0x6b,0xf6,0x8e,0x45,0x87,0x52,0x2e,0x16,0x71,0x0d,0xae,0xce,0x1d,0xb9,0xda,0xd5,
    0xe2,0xa2,0x2e,0xc2,0xfd,0x73,0xda,0x89,0xaf,0xde,0x15,0x97,0x4b,0xe5,0xfc,0xe6,
    0x5a,0xf9,0xe4,0xed,0xf6,0x6e,0xe5,0xb8,0x7c,0x72,0x5a,0xa9,0xee,0xec,0xed,0x97,
    0x2b,0xef,0x8e,0x0e,0x8f,0x4f,0x85,0x7b,0xce,0x25,0x7d,0xcc,0x42,0xa1,0x58,0x18,
    0x3f,0x39,0xdd,0x1d,0xcf,0xe6,0x32,0x9a,0xeb,0xbc,0x8b,0xf9,0x9c,0xea,0xbb,0x20,
    0x35,0xe2,0x72,0xd7,0x75,0xb0,0xbd,0x57,0x55,0xbc,0x51,0xd6,0x9c,0xac,0x0d,0x59,
    0xcd,0xc2,0x55,0x5f,0xca,0x3c,0xab,0x7f,0x41,0x9e,0x1a,0x7d,0x0d,0xcd,0xe1,0xdc,
    0x63,0x97,0x70,0x6d,0xf4,0x3a,0xc4,0x3d,0x60,0x11,0xb0,0x3a,0x83,0x45,0xc1,0x9a,
    0x0d,0x16,0x03,0xeb,0x32,0x58,0x1c,0xac,0xc7,0x60,0x09,0xb0,0xcb,0x06,0x4b,0x82,
    0x5d,0x31,0x58,0x0a,0xec,0x9a,0xc1,0xea,0xc0,0x6e,0x18,0xac,0x1e,0x2c,0xe3,0x75,
    0xc5,0xfe,0xf6,0xa7,0x1a,0xe7,0xd0,0xd8,0x81,0xbd,0x20,0xf7,0x41,0xf4,0x05,0x7b,
    0xc0,0xd8,0x4b,0x67,0xfc,0x4b,0xf8,0x43,0xbe,0x0d,0xf2,0x7d,0x49,0xd7,0xec,0xad,
    0x33,0xfc,0x2d,0xf8,0xba,0x67,0x69,0x89,0x8a,0x7a,0x3b,0xe6,0xf7,0x26,0xea,0xfb,
    0x88,0x79,0xad,0xaa,0xbd,0x53,0xf8,0x29,0xb4,0x47,0xb1,0x1b,0xb0,0xe3,0x9e,0x13,
    0xf7,0xb5,0x34,0x97,0xe2,0x93,0xd8,0x8d,0x60,0xed,0x62,0xb7,0x92,0x2b,0xd8,0x69,
    0x6c,0xbd,0xfa,0x84,0x19,0xf6,0x31,0xac,0x56,0x56,0x92,0x7b,0xda,0x2c,0xad,0xd7,
    0xce,0x7e,0xb6,0x51,0xaf,0x9d,0xbd,0x53,0xec,0x3a,0xf5,0x3a,0xa9,0xa7,0xfc,0x2e,
    0x7c,0x29,0xe3,0xef,0xa5,0x7e,0xb0,0x07,0xf1,0x2b,0x7f,0x08,0x7e,0xda,0xd7,0x88,
    0xba,0x11,0x78,0x6a,0x5f,0x3d,0x13,0x97,0xe1,0x7d,0x07,0x7b,0x92,0x58,0xcd,0x33,
    0xcb,0x79,0x4b,0xd2,0xe7,0x2c,0x67,0x5e,0xb1,0x8b,0xc2,0xca,0xe3,0x8b,0xb8,0x7f,
    0xaf,0x60,0x6b,0x8e,0x79,0x9e,0xf3,0xe4,0x98,0xf7,0xef,0xb0,0x76,0x75,0x4b,0x6f,
    0x8b,0xf0,0x9e,0x80,0x2d,0xc2,0x53,0x7b,0x09,0xec,0x92,0x54,0x7c,0x4a,0x8e,0xd0,
    0xe7,0x32,0xef,0x53,0x63,0x4b,0xf4,0xd4,0x4a,0x6c,0x89,0xb9,0x0c,0x7d,0x6e,0xb2,
    0x17,0xff,0xeb,0xf3,0x05,0xcf,0x9b,0xe4,0x50,0x7b,0xcb,0xd4,0x7f,0x85,0x4f,0xcf,
    0xcf,0x0e,0xf9,0xf4,0xfc,0xdc,0x95,0xf9,0x88,0xf2,0xec,0xa8,0xf9,0x43,0x10,0x9d,
    0xbf,0x29,0xce,0x5a,0x13,0xe7,0x69,0x45,0xd0,0x24,0xdf,0x82,0x26,0xf8,0x01,0x6b,
    0x06,0x8b,0x78,0x6d,0x09,0xff,0x2e,0x5b,0xe0,0xaa,0xef,0xa1,0x60,0x5d,0x5e,0x4f,
    0xed,0xac,0x74,0x92,0x3f,0xe5,0xf7,0xb1,0x86,0x7f,0x22,0xae,0x87,0xd8,0x6e,0x13,
    0xd7,0x47,0x5c,0xaf,0x89,0xeb,0x07,0xff,0x48,0xdc,0x00,0xb1,0xfd,0xc4,0x85,0x6f,
    0x45,0x07,0xe7,0x6b,0x8a,0x33,0x34,0x0c,0xfe,0x55,0x38,0x23,0x7c,0x3b,0x86,0x39,
    0x5b,0xdf,0x65,0x07,0xc6,0xd0,0xf6,0x4b,0xf8,0xea,0x1b,0x95,0x35,0xc6,0xbe,0x8c,
    0x1a,0xcd,0x37,0xcd,0x77,0xe1,0x83,0x70,0x15,0x1b,0x07,0x5f,0x15,0x4b,0x7b,0xda,
    0x03,0x0b,0xbc,0x9f,0x92,0x23,0xe4,0xd2,0xfb,0x37,0x61,0x29,0xef,0x00,0x4e,0x82,
    0x98,0x51,0xa3,0xe1,0x16,0x1a,0x32,0x46,0xc3,0x6d,0xf0,0xa0,0xe1,0x0e,0x58,0xd0,
    0x90,0x33,0x1a,0xd4,0x97,0x95,0x95,0xa3,0x6e,0xd6,0x68,0x98,0xa0,0x76,0xc4,0x68,
    0xb8,0x07,0x1e,0x34,0xec,0x83,0x05,0x9e,0x6a,0x08,0xb9,0x72,0x46,0x43,0x15,0xce,
    0x18,0x31,0x59,0xa3,0xe1,0x3e,0x1a,0x26,0x8d,0x86,0x29,0xf0,0xa0,0xe1,0x01,0x58,
    0xd0,0x30,0x63,0x34,0xa8,0x6f,0x5a,0xd6,0x0c,0x75,0xf5,0xf9,0x39,0x75,0x1f,0x51,
    0xbb,0x6a,0x66,0x42,0x7b,0x0c,0xdc,0x19,0xd3,0xe3,0x21,0xbc,0x1c,0x71,0xd3,0xf4,
    0x93,0xf7,0xff,0x8a,0xda,0x6c,0xab,0xad,0x73,0x5c,0x60,0x86,0x4b,0xd2,0x9f,0xce,
    0xef,0x33,0x38,0x05,0x73,0x2e,0x57,0xd0,0xb5,0x6c,0xce,0xe5,0x2a,0x78,0x38,0xcf,
    0x45,0xea,0xae,0xfa,0xb9,0x4e,0xf8,0x99,0x5a,0x23,0x5f,0xd1,0xbc,0x8b,0x75,0x70,
    0xe7,0xf7,0x22,0xe6,0xbf,0x55,0xeb,0xe4,0xd5,0xd9,0x7d,0xc9,0x4c,0x6b,0x3f,0x3a,
    0xcf,0xaf,0xc1,0x0a,0xe4,0xd5,0xb9,0xde,0x05,0x0f,0x79,0x75,0x9f,0x2b,0xe0,0x7a,
    0xbd,0xe7,0xfb,0xf3,0x06,0x5c,0xeb,0x6c,0x60,0xff,0x96,0xdd,0x9b,0x90,0xf5,0x07,
    0xed,0xff,0x33,0xec,0x9c,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
//     gl_FragStencilRefARB = int(texture(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent). x);
//
// }
