// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x97,0xfd,0x4f,0x96,0x65,
    0x14,0xc7,0xef,0xeb,0x01,0x1e,0x31,0xa6,0x85,0x60,0x90,0x12,0xa5,0xa4,0xb9,0xa8,
    0x47,0x5d,0xa4,0x60,0x51,0x90,0x94,0xbc,0x2d,0xde,0x17,0x86,0x20,0x28,0xcb,0xa9,
    0x51,0x4e,0xc8,0xe5,0x78,0x73,0x99,0xaf,0xfd,0x64,0x3f,0xb5,0xf5,0x0f,0x24,0x84,
    0x59,0xc9,0xda,0x74,0xeb,0xa7,0x52,0xc3,0xd5,0x52,0x7f,0xcc,0x2d,0x73,0xc6,0x2c,
    0x62,0x19,0xcd,0x5e,0x6d,0x74,0xce,0x7d,0x7d,0x0f,0x7e,0xbb,0x07,0xdb,0xb5,0xfb,
    0x39,0xdf,0x73,0xae,0x73,0x3e,0xd7,0xb9,0xae,0xfb,0x7a,0x1e,0x92,0x62,0x79,0x73,
    0x82,0xc0,0x05,0x77,0x05,0xa9,0xc1,0x71,0x17,0x84,0x7f,0xe9,0x41,0x2c,0xd0,0x8f,
    0x69,0x41,0x3c,0x7c,0x6e,0xa8,0x6e,0xa8,0x4e,0x74,0xf7,0x74,0x26,0x0a,0x9e,0x58,
    0xa5,0xfe,0xf9,0x41,0x52,0x18,0xa7,0xbe,0xbb,0x83,0x39,0x41,0x8a,0x3c,0x93,0x65,
    0x74,0x75,0x6c,0x7f,0x55,0xf5,0x06,0x19,0x43,0x32,0xee,0x91,0xf9,0xc9,0x61,0xbe,
    0x20,0x28,0x41,0x7c,0x98,0x4f,0xd4,0x86,0x30,0x7f,0x10,0x2c,0x86,0xbd,0x49,0x9e,
    0xf1,0x70,0x4e,0x10,0x94,0x4b,0xc6,0x56,0x8f,0x12,0xe4,0xe1,0xb9,0x41,0x6a,0xaa,
    0x16,0x43,0xfc,0x66,0x79,0x2e,0x9d,0xf1,0x79,0x7b,0x09,0xe5,0x1f,0x42,0xfe,0x45,
    0xc8,0x37,0x32,0x4b,0xbe,0x11,0xca,0x37,0x16,0xc9,0x37,0x86,0x7c,0x16,0xab,0xf6,
    0x7d,0xf0,0x5d,0x46,0x6e,0xb5,0x33,0x24,0x43,0x2c,0x8c,0x4d,0x0a,0xbb,0xa2,0x9f,
    0x17,0x4a,0x8c,0xae,0xe5,0x41,0xcc,0xcf,0x12,0x3b,0x0d,0xeb,0x53,0x7f,0x3e,0xfc,
    0x0b,0xb0,0xde,0x4c,0x51,0x33,0x48,0xcf,0xc2,0xdc,0x1c,0xb1,0xb3,0x31,0xcf,0x6b,
    0xc9,0x61,0x4d,0xed,0xa9,0xea,0x4f,0xc2,0x5e,0x04,0x4d,0xfd,0x39,0xf8,0x1c,0xa7,
    0x7c,0xba,0xe6,0x54,0xb2,0x13,0x88,0x31,0xbb,0x28,0xc2,0x55,0x86,0x3e,0x2a,0x77,
    0x1d,0x72,0x25,0x21,0x7f,0x3d,0x7c,0x75,0xa8,0x5f,0x8f,0xfd,0x76,0x34,0xbf,0x11,
    0xeb,0xd6,0xf8,0x26,0xf8,0xe2,0xc8,0xd7,0x8c,0xcf,0x5c,0xbf,0x05,0xe7,0x23,0x07,
    0xe7,0xa0,0x19,0x5a,0x2e,0xf6,0x7c,0x13,0x72,0xb5,0x81,0xb3,0x15,0xb5,0xd5,0xde,
    0x4c,0x3d,0x6f,0x47,0xdf,0x8c,0x45,0xed,0x0e,0x62,0xe9,0x44,0x6c,0x33,0x58,0x76,
    0x87,0xfb,0xe7,0xb5,0x47,0xe5,0x8c,0xe8,0x1e,0x0d,0x82,0xbf,0x91,0xd6,0x37,0x84,
    0x9c,0xb9,0x38,0x33,0x71,0xe4,0x3b,0x21,0xcf,0xb9,0x32,0x46,0x10,0xab,0xf6,0x87,
    0xd0,0xd4,0x7f,0x12,0x9f,0xe3,0x94,0xff,0x34,0xf6,0x23,0x2f,0x3c,0x3f,0x73,0x83,
    0xf3,0xf0,0xe3,0xd5,0x9b,0xf9,0x8b,0x85,0xf5,0x7c,0x9e,0x2f,0xa1,0x9d,0x47,0x1d,
    0xb5,0xc7,0xe8,0x6c,0x7d,0x25,0xcf,0xf6,0x99,0x75,0xc4,0xc3,0xbd,0xb9,0x8c,0x1e,
    0x96,0x61,0x58,0xaf,0x0f,0x4a,0xa1,0x9b,0xd3,0xd3,0xd3,0x66,0x1f,0x12,0xfb,0x06,
    0xd9,0x87,0xc5,0xbe,0x4e,0xf6,0x11,0xb1,0xaf,0x91,0x7d,0x54,0xec,0xef,0xc5,0x4e,
    0x48,0x2f,0x74,0x3d,0xef,0x8b,0xbd,0x46,0xd6,0x16,0xc3,0x9e,0x06,0x38,0x2b,0x7f,
    0x8a,0xa2,0xf7,0x42,0x31,0xce,0xd0,0x30,0xfa,0x58,0x23,0xf7,0x85,0xce,0xfb,0x00,
    0xda,0x30,0xe6,0xe8,0xfa,0x4b,0x65,0x86,0xf6,0xec,0x23,0xf4,0xb1,0x03,0xf3,0xb5,
    0xee,0xc7,0xd0,0x87,0x25,0x46,0xf7,0xec,0x13,0x68,0xba,0x4f,0x7f,0x48,0xc5,0x51,
    0xe4,0xf9,0x5b,0xe2,0xd5,0x77,0x4a,0xc6,0x28,0x38,0x4e,0x51,0xdd,0x4f,0x51,0x53,
    0xb9,0xad,0xe7,0x7f,0x49,0x8c,0xc5,0xea,0xf3,0x16,0x62,0xdf,0x76,0x9e,0x33,0x05,
    0xf3,0x34,0xcf,0x5b,0xd8,0xc7,0x33,0xf0,0xeb,0x7e,0xee,0x83,0xf6,0x19,0xf4,0xd3,
    0x58,0x8b,0x9e,0xfd,0x6f,0xf1,0x7e,0x34,0xd2,0x5a,0xae,0x40,0x2f,0x15,0x4b,0xcf,
    0xe4,0x77,0x38,0xc7,0x1d,0xf0,0x15,0xe3,0x3d,0xb9,0x0a,0x5f,0x9d,0xe4,0xd2,0x79,
    0xd7,0xa0,0x05,0xa4,0x5d,0x87,0xa6,0xfd,0x3f,0x89,0xde,0xfc,0x80,0xd8,0xeb,0xe8,
    0xcd,0x04,0xf5,0x46,0x7d,0xe3,0x32,0x26,0xb0,0xde,0x71,0xea,0xcd,0x0d,0xe4,0xba,
    0x4a,0x7b,0xa2,0x39,0xf5,0x3d,0xf9,0x11,0x7e,0x5d,0xe3,0x7b,0x92,0x47,0xeb,0xfc,
    0x04,0x5d,0xfb,0x67,0xf9,0x26,0xd0,0x3f,0xf5,0xff,0x0c,0x96,0x51,0xc4,0x8e,0x83,
    0x67,0x8a,0x78,0x34,0x66,0x52,0xc6,0x14,0xe6,0x4f,0x12,0xcf,0x2f,0xc4,0x13,0xc3,
    0xb9,0x3a,0x01,0x9e,0x9b,0xf0,0x9f,0x21,0x9e,0x5f,0xa1,0x2b,0x8f,0xe5,0x9b,0x22,
    0x9e,0xdf,0xc0,0x34,0x81,0xd8,0x49,0xea,0xd9,0x2d,0xf4,0x3e,0x0b,0x8c,0xe9,0xee,
    0x0e,0xa3,0xfa,0x7e,0xd7,0xf7,0xd4,0xf9,0x9c,0xfa,0xf9,0xb8,0x74,0x3f,0x1e,0xd6,
    0xf2,0x79,0xcb,0xb0,0xc7,0x9f,0x63,0x5f,0xfe,0x81,0xef,0x0a,0xce,0x82,0xde,0xcb,
    0xb7,0x71,0x57,0xab,0xf6,0xb4,0xd4,0xb8,0x8d,0x38,0x63,0x58,0xec,0xbc,0x6f,0x01,
    0x18,0xaa,0x89,0x41,0x7d,0x39,0x32,0xaa,0xc1,0xa0,0x9f,0xf7,0xa1,0xd6,0xfd,0x34,
    0xcf,0x6a,0xe5,0x3a,0x5f,0x4b,0x7d,0x76,0xee,0x1e,0x70,0x5e,0x37,0x7b,0x89,0xf3,
    0x4c,0x5f,0x20,0xcf,0x52,0xe7,0x35,0x8d,0x33,0x3e,0xd5,0x8c,0xef,0x21,0xd4,0xc9,
    0x03,0x5f,0x15,0xf1,0xa9,0x6f,0x99,0x8c,0x2a,0xf0,0x2d,0x23,0xbe,0xe5,0x34,0xcf,
    0xf8,0x1e,0x06,0xdf,0x72,0xe2,0x59,0xe1,0xbc,0x6e,0xf6,0x23,0x11,0xbe,0x7c,0xe7,
    0xb5,0x15,0xc4,0x97,0x4f,0x7c,0x8f,0xa1,0x4e,0x02,0x7c,0x95,0xc4,0xa7,0xbe,0x84,
    0x8c,0x4a,0xf0,0x25,0x88,0x6f,0x25,0xcd,0x33,0xbe,0x55,0xe0,0x5b,0x49,0x3c,0xab,
    0x9d,0xd7,0xcd,0x7e,0x3c,0xc2,0x57,0xe0,0xbc,0xb6,0x9a,0xf8,0x0a,0x88,0x6f,0x0d,
    0xea,0x14,0x81,0xaf,0x82,0xf8,0xd4,0xb7,0x56,0x46,0x05,0xf8,0xd6,0x12,0x5f,0x21,
    0xcd,0x33,0xbe,0x22,0xf0,0x15,0x12,0xcf,0x3a,0xe7,0x75,0xb3,0x9f,0x8a,0xf0,0x15,
    0x3b,0xaf,0xad,0x23,0xbe,0x62,0xe2,0x7b,0x06,0x75,0xca,0xc0,0x57,0x4e,0x7c,0xea,
    0x2b,0x91,0x51,0x0e,0xbe,0x12,0xe2,0x2b,0xa5,0x79,0xc6,0xf7,0x2c,0xf8,0x4a,0x89,
    0x67,0xbd,0xf3,0xba,0xd9,0xcf,0x45,0xf8,0x9e,0x77,0x5e,0x5b,0x4f,0x7c,0xaa,0xe9,
    0xfb,0x6c,0x75,0xcb,0x61,0x5b,0x9f,0x2a,0x60,0xdb,0xbe,0x56,0xc2,0xb6,0x73,0x58,
    0x05,0xdb,0xde,0x1b,0x7d,0x0e,0x61,0xbd,0x01,0xb8,0xed,0x3b,0x24,0x85,0xd6,0xab,
    0x3e,0x27,0x23,0x05,0xf3,0xf4,0xb3,0xad,0x2d,0x86,0xb5,0xf1,0xf7,0x53,0x92,0xf3,
    0x7a,0xbd,0x58,0x7a,0x77,0xed,0x77,0x5e,0x1b,0xa4,0xef,0x18,0xcb,0xa5,0x4f,0xfb,
    0x8e,0x79,0x07,0x31,0xca,0xb5,0x1f,0x35,0x35,0x36,0x1d,0xb1,0x7a,0xe7,0xbc,0x89,
    0xfe,0xa4,0xba,0x3b,0x77,0x94,0xdd,0x3f,0x69,0x6e,0xf6,0xfb,0x67,0x9e,0xf3,0xbe,
    0x54,0xe2,0x9e,0x0f,0xee,0x54,0xf4,0x57,0xed,0x79,0xb4,0xff,0x2f,0x20,0xde,0xee,
    0x9f,0x41,0xea,0x87,0xfa,0x6a,0x94,0x15,0x5c,0x35,0xb4,0xff,0xb5,0xe0,0x3a,0x48,
    0xb5,0xea,0x50,0xab,0x96,0xf6,0xbb,0xde,0x79,0xdd,0xec,0x46,0xe7,0x99,0x6c,0xff,
    0x9b,0x9c,0xd7,0xea,0x89,0xaf,0x89,0xf8,0x5e,0x04,0x9f,0xdd,0x3f,0x03,0xc4,0xa7,
    0xbe,0x66,0x19,0x03,0xe0,0x6b,0x26,0xbe,0x8d,0xe0,0x3b,0x44,0x7c,0x2f,0x81,0x6f,
    0x23,0xf1,0xb4,0x38,0xaf,0x9b,0xdd,0x1a,0xe1,0x6b,0x73,0x5e,0x6b,0x21,0xbe,0x36,
    0xe2,0x6b,0x07,0x9f,0xdd,0x3f,0xfd,0xc4,0xa7,0xbe,0x0e,0x19,0xfd,0xe0,0xeb,0x20,
    0xbe,0x2d,0xe0,0x3b,0x4c,0x7c,0x5b,0xc1,0xb7,0x85,0x78,0x3a,0x9d,0xd7,0xcd,0x7e,
    0x39,0xc2,0xb7,0xcd,0x79,0xad,0x93,0xf8,0xb6,0x11,0xdf,0x76,0xf0,0xd9,0xfd,0xd3,
    0x47,0x7c,0xea,0xdb,0x21,0xa3,0x0f,0x7c,0x3b,0x88,0x6f,0x27,0xf8,0x8e,0x10,0xdf,
    0x2b,0xe0,0xdb,0x49,0x3c,0x5d,0xce,0xeb,0x66,0xbf,0x16,0xe1,0xdb,0xe5,0xbc,0xd6,
    0x45,0x7c,0xbb,0x88,0x6f,0x37,0xf8,0xec,0xfe,0xe9,0x25,0x3e,0xf5,0x75,0xcb,0xe8,
    0x05,0x5f,0x37,0xf1,0xf5,0x80,0xef,0x28,0xf1,0xbd,0x0e,0xbe,0x1e,0xe2,0xd9,0xe3,
    0xbc,0x6e,0xf6,0x1b,0x11,0xbe,0xbd,0xce,0x6b,0x7b,0x88,0x6f,0x2f,0xde,0x47,0xab,
    0xdb,0x0b,0xdb,0xfa,0xd4,0x07,0xdb,0xf6,0xb5,0x1f,0xb6,0x9d,0xc3,0x01,0xd8,0xf6,
    0xde,0x0c,0x46,0xde,0xef,0x74,0xba,0x0b,0x8e,0x39,0x7f,0x1f,0xa4,0xe0,0x4e,0x18,
    0xa4,0xbb,0x2a,0x23,0x72,0x57,0x65,0x53,0x6f,0xd4,0x97,0x29,0x23,0x1b,0x39,0x33,
    0xa9,0x0f,0x0b,0x67,0xb9,0xab,0xee,0x75,0x5e,0xb7,0xbb,0xea,0x80,0xf3,0xda,0x31,
    0xfc,0x26,0x56,0x3e,0xcb,0x95,0x4d,0x7c,0xef,0x22,0x46,0x99,0x0f,0xa0,0xa6,0xb2,
    0x9c,0x0b,0xfe,0xcf,0x72,0x56,0x3e,0x9f,0xc3,0xef,0xaf,0xb3,0xa8,0xab,0xff,0xbb,
    0x5c,0xc0,0xff,0x2d,0x7d,0xf8,0x9f,0xe5,0x6b,0xfc,0x86,0xb6,0xdf,0xb2,0xdf,0xa0,
    0x06,0xff,0xbe,0xbd,0x08,0x4d,0xe5,0x5a,0xe1,0xd0,0xdf,0xc5,0x97,0x10,0x7b,0x91,
    0xfe,0x57,0xdb,0x2a,0x39,0x2f,0x20,0xe7,0x25,0xac,0xc1,0x18,0xf4,0xf9,0xaf,0x64,
    0x28,0x94,0xf1,0x1f,0xdb,0xbe,0xf2,0xab,0xf0,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//     bool rotateXY;
// } params;
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// shared uint intersectingWidgets[32];
//
// void accumulateWidgets(const uint localId)
// {
//
//     if(localId < 16)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 16];
//         if(localId < 8)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//             if(localId < 4)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//                 if(localId < 2)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                     if(localId < 1)
//                     {
//                         intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                     }
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     if(localId < 32)
//     {
//         intersectingWidgets[localId]= uint(intersects)<< localId;
//         accumulateWidgets(localId);
//         if(localId == 0)
//         {
//             ballot . x = intersectingWidgets[0];
//         }
//     }
//     else
//     {
//         const uint graphLocalId = localId - 32;
//         intersectingWidgets[graphLocalId]= uint(intersects)<< graphLocalId;
//         accumulateWidgets(graphLocalId);
//     }
//     if(localId == 0)
//     {
//         ballot . y = intersectingWidgets[0];
//     }
//
//     return ballot;
//
// }
//
// void main()
// {
//
//     uvec2 outCoord = gl_WorkGroupID . xy;
//     if(params . rotateXY)
//     {
//         outCoord . xy = outCoord . yx;
//     }
//
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 8);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 8);
//
//     uvec2 culledWidgets;
//
//     culledWidgets = cullWidgets(0, blockCoordLow, blockCoordHigh);
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
