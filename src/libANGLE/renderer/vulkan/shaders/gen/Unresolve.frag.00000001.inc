// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Unresolve.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kUnresolve_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0x4f,0x73,0x12,0x41,
    0x10,0xc5,0x87,0x5d,0x84,0x00,0x2a,0x28,0x84,0x44,0x13,0x42,0x30,0xa0,0xe0,0x02,
    0x12,0x85,0x08,0x44,0xcd,0xd1,0x4b,0x2e,0x96,0x9f,0x40,0xcb,0x8b,0x07,0xbd,0xe8,
    0x87,0xf7,0x62,0x95,0xdd,0xb3,0xbf,0xae,0x6a,0xe7,0x10,0xaa,0xa6,0x76,0xdf,0xeb,
    0xf7,0x7a,0x1e,0xf3,0x67,0xf3,0xec,0xa2,0x1e,0x42,0x25,0x34,0xc3,0x41,0xb8,0x09,
    0xe5,0xef,0x51,0xc8,0x84,0x29,0x9f,0x53,0x79,0xb6,0x42,0x2d,0xe2,0x8f,0xb7,0x9f,
    0x6f,0x97,0xbf,0x7e,0x7f,0x5b,0xae,0x37,0x2b,0xd5,0x3d,0x0c,0x79,0xd4,0x6b,0xad,
    0x2d,0xa8,0x2a,0x4f,0x1d,0x3f,0xbe,0x7c,0xff,0xa9,0x7c,0x43,0xc6,0xa1,0x8c,0x33,
    0x19,0x63,0x19,0xda,0x6b,0x2e,0x43,0xcd,0x6b,0x19,0x3b,0x19,0x1d,0xe9,0xa1,0x9e,
    0xba,0x7b,0xbf,0xaf,0x73,0xc9,0x5b,0x03,0x6f,0x00,0x2b,0xff,0x2c,0xc1,0xa3,0x04,
    0x17,0x0e,0xdb,0xdc,0x15,0xf0,0x71,0xe2,0x3f,0xc6,0xef,0xeb,0x85,0xc3,0x67,0xf8,
    0x33,0xf0,0x28,0xf1,0x8f,0xf0,0xfb,0x7a,0xe1,0xf0,0x18,0x7f,0x0e,0x9e,0x24,0xfe,
    0x09,0x7e,0x5f,0x2f,0x1c,0x9e,0xe2,0xaf,0x82,0x67,0x89,0x7f,0x86,0xdf,0xd7,0x0b,
    0x87,0xe7,0xf8,0xef,0x81,0x17,0x89,0x7f,0x81,0xdf,0xd7,0x0b,0x87,0x57,0xf8,0x6b,
    0xe0,0xcb,0xc4,0x7f,0x89,0xdf,0xd7,0x0b,0x87,0xd7,0xf8,0xeb,0xe0,0x4d,0xe2,0xdf,
    0xe0,0xf7,0xf5,0xc2,0xe1,0x5d,0x3c,0x7b,0x21,0xf4,0xc1,0xfb,0xc4,0xbf,0xc7,0x7f,
    0xe0,0x70,0x01,0xee,0xca,0x2e,0x64,0xb1,0x9e,0xc7,0xf5,0xcc,0x62,0x9f,0x3c,0x66,
    0x3b,0x97,0x71,0x24,0xfa,0x3a,0x59,0xab,0x91,0xab,0x46,0x5f,0xce,0xfc,0xd7,0xe0,
    0x06,0xdc,0x13,0x79,0x6b,0xa2,0xaf,0x85,0xff,0x7f,0x19,0x4f,0xed,0xd1,0xe2,0xbd,
    0x49,0x8f,0x16,0xe7,0x39,0xc4,0xbb,0x50,0x95,0x5b,0x52,0xce,0x5f,0x89,0x59,0x4b,
    0xdc,0xa6,0xae,0x99,0x3a,0xf1,0x5e,0x95,0x3d,0xe7,0xb2,0x13,0x9d,0x78,0x0f,0x4b,
    0x4d,0x1b,0x4d,0x17,0x8d,0xe5,0xee,0x91,0xb1,0xcb,0x9c,0x3d,0xee,0x9d,0xe5,0xee,
    0xa3,0xbf,0x2b,0xf7,0x11,0xef,0x7d,0x7a,0x28,0x3e,0x76,0xb9,0x4f,0xc8,0x6d,0x39,
    0x4f,0xe5,0x79,0xe2,0x32,0x0c,0x98,0xef,0x14,0xff,0xc0,0x9d,0x7d,0xcd,0x30,0x44,
    0x7f,0x57,0x06,0xeb,0x3f,0xa4,0xc7,0xb9,0xbb,0xdf,0xb6,0x1f,0x63,0x7a,0xda,0xda,
    0x4e,0x5c,0xbd,0xc7,0x37,0x26,0x77,0xff,0x61,0xe6,0xea,0x03,0xbe,0x3f,0xb9,0xeb,
    0xbf,0x48,0xfa,0xaf,0x92,0xfe,0x97,0x49,0xff,0x75,0xd2,0x7f,0xe3,0xf2,0x6f,0xa9,
    0xd5,0xa8,0x6f,0xf9,0xc6,0xf9,0x7e,0x7b,0xf4,0x57,0xb2,0xb7,0x19,0xeb,0x17,0xd0,
    0xfc,0x11,0x46,0xef,0xde,0x7b,0x61,0xf5,0xfc,0x3c,0xe0,0xec,0x7c,0x15,0x56,0xcf,
    0xe4,0x63,0x38,0x3d,0x0f,0x1f,0xc4,0xd1,0x80,0x53,0x7d,0x3f,0xae,0x73,0xb9,0x67,
    0xaa,0xd7,0xb3,0xf0,0x14,0xce,0xf4,0x87,0x70,0xaa,0x1f,0x72,0x97,0x46,0xe8,0x75,
    0xdf,0x2e,0xe0,0x4c,0x7f,0x06,0x67,0x79,0x9e,0xb3,0xde,0x96,0xe7,0x05,0x9c,0xe9,
    0xc7,0x70,0x96,0xe7,0x25,0xeb,0x6f,0x79,0x0a,0x38,0xd3,0x4f,0xe1,0x2c,0xcf,0x92,
    0xfd,0xb0,0x3c,0xaf,0xe0,0x4c,0x3f,0x87,0xb3,0x3c,0xaf,0xd9,0x1f,0xcb,0xf3,0x06,
    0xce,0xf4,0x2b,0x38,0xcb,0x73,0xc5,0x7e,0x59,0x9e,0xb7,0x70,0xa6,0x5f,0xc3,0x59,
    0xff,0x6b,0xf6,0xcb,0xfa,0xbf,0x83,0x53,0xfd,0x27,0xe1,0x6a,0xd1,0x57,0xf2,0x81,
    0x1e,0x3b,0xb8,0xbf,0x72,0xc3,0xb7,0x32,0xfe,0x01,0xfc,0xc5,0x22,0x3f,0x60,0x07,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
// layout(input_attachment_index = 0, set = 0, binding = 0)uniform subpassInput colorIn0;
// layout(input_attachment_index = 1, set = 0, binding = 1)uniform isubpassInput colorIn1;
// layout(input_attachment_index = 2, set = 0, binding = 2)uniform usubpassInput colorIn2;
// layout(input_attachment_index = 3, set = 0, binding = 3)uniform subpassInput colorIn3;
// layout(input_attachment_index = 4, set = 0, binding = 4)uniform isubpassInput colorIn4;
// layout(input_attachment_index = 5, set = 0, binding = 5)uniform usubpassInput colorIn5;
// layout(input_attachment_index = 6, set = 0, binding = 6)uniform subpassInput colorIn6;
// layout(input_attachment_index = 7, set = 0, binding = 7)uniform isubpassInput colorIn7;
//
// layout(input_attachment_index = 8, set = 0, binding = 8)uniform subpassInput depthIn;
//
// void main()
// {
//     colorOut0 = subpassLoad(colorIn0);
//     colorOut1 = subpassLoad(colorIn1);
//     colorOut2 = subpassLoad(colorIn2);
//     colorOut3 = subpassLoad(colorIn3);
//     colorOut4 = subpassLoad(colorIn4);
//     colorOut5 = subpassLoad(colorIn5);
//     colorOut6 = subpassLoad(colorIn6);
//     colorOut7 = subpassLoad(colorIn7);
//
//     gl_FragDepth = subpassLoad(depthIn). x;
//
// }
