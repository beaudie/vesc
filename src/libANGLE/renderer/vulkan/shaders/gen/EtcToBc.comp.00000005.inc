// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x79,0x70,0x57,0xd5,
    0x15,0x7e,0xf7,0xdc,0x2c,0x2c,0x8a,0x44,0xa1,0xca,0x32,0x15,0x45,0xac,0x23,0x3b,
    0x42,0xea,0x24,0x8d,0xe0,0x28,0x25,0x13,0x17,0x88,0x4e,0xea,0xd8,0xd8,0x69,0x69,
    0x71,0x6a,0x09,0x4b,0xa7,0x38,0x2d,0x30,0x58,0x68,0x48,0x8b,0xb5,0xfd,0xab,0x63,
    0x17,0x2c,0x96,0x6e,0xb4,0x65,0x71,0x22,0xd3,0xda,0x6a,0xd7,0x90,0x84,0x2c,0x22,
    0x69,0x58,0x84,0x4a,0xa7,0xd3,0x32,0x5d,0xd4,0x4a,0x37,0x1d,0x35,0x48,0x9d,0xf4,
    0x9e,0xf7,0x7d,0x87,0x77,0xf8,0x8d,0xcd,0xcc,0xcd,0xfb,0x9d,0xef,0x3b,0xe7,0xdc,
    0x73,0xce,0xdd,0xde,0x7d,0x51,0xa6,0x56,0x66,0x31,0x64,0xa3,0xb2,0x11,0xd9,0x23,
    0x31,0xcb,0xff,0xaa,0x32,0xc9,0x02,0x9f,0xb3,0xf8,0x9c,0xcb,0x67,0x1d,0x9f,0xb7,
    0xa4,0xe7,0xe8,0xac,0x22,0xd7,0x5b,0x72,0xfb,0xdd,0xb7,0xcf,0x5a,0xf7,0xe0,0x8a,
    0x59,0xf3,0x17,0xcc,0x51,0xfb,0x31,0x19,0x1c,0x29,0x77,0x49,0x56,0x99,0x95,0xa7,
    0x67,0x59,0x6a,0xab,0x97,0x7f,0x62,0x8d,0xe2,0xf3,0x52,0xab,0x49,0x6d,0x6c,0xb2,
    0x2f,0xcb,0xfd,0x65,0xd9,0x22,0xea,0xe7,0xfe,0x12,0x3a,0x2f,0xf7,0x9f,0x65,0x13,
    0x29,0xd7,0x50,0x9e,0x94,0x5a,0x7d,0xf2,0x38,0x84,0x50,0xb3,0xa9,0x7c,0x1a,0x16,
    0x88,0x95,0x39,0x4c,0x88,0x8d,0x70,0x58,0x24,0x76,0x91,0xc3,0xca,0x88,0x8d,0x75,
    0x58,0x39,0xb1,0x71,0x0e,0xab,0x20,0x76,0x45,0x1e,0x5b,0x3c,0xdf,0x87,0xc6,0xd9,
    0x95,0x02,0xb8,0x9a,0x31,0x99,0x7c,0x95,0x93,0x87,0x4a,0xf8,0x21,0xf2,0xc1,0x7c,
    0xa5,0x1f,0x13,0xc8,0x8d,0x10,0xe4,0xac,0xf2,0x65,0xa9,0x07,0xed,0xe3,0xaa,0xa4,
    0x13,0xd9,0xdf,0xf8,0xa4,0xa3,0xb1,0x4c,0xa1,0xfd,0xe5,0x49,0xae,0x64,0x7c,0xc6,
    0x8f,0x26,0x9f,0xe5,0xcf,0xb2,0x3c,0xdf,0x4a,0xd6,0x52,0xf5,0xab,0xf8,0x5b,0xc8,
    0x5f,0x4a,0xbe,0x8a,0xf2,0xe5,0x94,0x2b,0xa8,0x3f,0x87,0xfa,0x91,0xfc,0x5c,0xf6,
    0xad,0x78,0x2d,0xe5,0x79,0xc4,0xa6,0x33,0xbe,0x6a,0xd6,0xde,0xf8,0x1a,0xc7,0x8f,
    0xce,0xf1,0x22,0xbe,0xf7,0x91,0x1b,0xed,0xf8,0x85,0x1c,0x1b,0x93,0x17,0xe7,0xf3,
    0xaa,0xf0,0x5f,0xef,0x78,0x95,0x1b,0x4a,0xfa,0x6f,0x64,0x7e,0x66,0xdf,0x54,0xc2,
    0x37,0x33,0x1f,0xcd,0xef,0x7e,0xf6,0xed,0xfb,0x5b,0xc9,0xf8,0x4d,0x6e,0xe1,0x1c,
    0x31,0x79,0x15,0xe7,0xc2,0x8c,0x54,0x29,0xb5,0x5f,0xcd,0x9c,0x56,0x52,0x77,0x95,
    0xd3,0x5d,0x9b,0xda,0xb0,0x93,0x37,0x96,0xc4,0xb6,0x99,0xb1,0x58,0x6c,0x5f,0x49,
    0x6d,0xa6,0x93,0xb7,0xb3,0x2f,0x93,0x77,0x72,0x6e,0x9a,0xbc,0xcb,0xc5,0xa6,0xf2,
    0x1e,0xce,0x61,0x93,0xdb,0x53,0xbb,0x92,0xb9,0x76,0x70,0x5c,0x35,0xd7,0xc9,0xe9,
    0xff,0x81,0xf4,0xec,0x60,0xcc,0xa6,0xdf,0x99,0xaf,0x67,0xe4,0xa6,0x5c,0x17,0xeb,
    0xb9,0x87,0xe3,0xda,0xe9,0x74,0xbb,0xe9,0xcf,0xe4,0x83,0xa9,0x8d,0x74,0x72,0x0f,
    0xd7,0x9b,0xf9,0xea,0xa5,0xaf,0x6e,0xea,0xf6,0x38,0xdd,0x3e,0xce,0x3b,0xd3,0xed,
    0xe7,0xb8,0xd6,0x93,0xeb,0x71,0xdc,0xb3,0xe4,0x9a,0x19,0x97,0xf7,0x73,0x88,0xe3,
    0x69,0xba,0xcf,0xb9,0xf8,0xfb,0xc8,0x9b,0xee,0xe1,0xd4,0x46,0x39,0xdd,0x01,0x17,
    0x5f,0x35,0x79,0xe3,0x7e,0xcb,0xfe,0xba,0xe9,0xc7,0x73,0x83,0xb4,0xab,0x7f,0x07,
    0xee,0x08,0x63,0xb5,0xfe,0x0f,0x3a,0xee,0x68,0x49,0x8e,0x9e,0x3b,0xe6,0x72,0x2c,
    0xe5,0x8e,0x3b,0xbb,0xee,0x12,0xee,0x79,0xc6,0xd2,0xec,0x38,0xcb,0xf7,0x04,0xd7,
    0x9d,0xe9,0x9e,0x24,0xd6,0x40,0x1b,0xef,0xe7,0x77,0xae,0xbe,0x7d,0xac,0x87,0x71,
    0x2f,0xb8,0x7c,0xbb,0xcf,0x73,0x97,0xe5,0xf3,0xe9,0x14,0xe7,0x4c,0x2f,0xc7,0xf0,
    0x59,0x8e,0xc1,0x00,0x6b,0x38,0xc8,0x9a,0x1c,0x65,0x8e,0xc7,0x19,0xf3,0x49,0xf6,
    0xf9,0x02,0xf7,0x85,0x3f,0x70,0x3e,0x1c,0xc8,0xe7,0xbb,0x64,0x2f,0xa7,0xe7,0xbb,
    0xd3,0xec,0xb2,0xfd,0xf8,0xff,0x35,0xb5,0x3d,0xcb,0x79,0x38,0xc4,0x3d,0x48,0xe5,
    0xb7,0x88,0x29,0x7f,0x8e,0xbf,0xfd,0xdc,0xd5,0x35,0x1a,0xfe,0x3b,0x3c,0x6c,0x72,
    0x79,0xda,0x30,0x86,0x63,0xc1,0x57,0xa8,0x9c,0x02,0x7a,0x57,0x5a,0xad,0x17,0x07,
    0xec,0xb1,0xca,0xe9,0xef,0x4b,0x75,0x73,0xc9,0x36,0xdf,0x62,0xf2,0xb8,0x5c,0xce,
    0x16,0x9a,0x7c,0x6d,0x2e,0xff,0x69,0x91,0xad,0xf9,0x19,0x01,0xb9,0x9d,0xdf,0x9f,
    0x42,0xb1,0x66,0x55,0x5e,0x1f,0x2e,0x8c,0xad,0x2d,0x20,0x3e,0x5d,0xc3,0xdb,0xd3,
    0xef,0x97,0xb9,0x87,0x4c,0x48,0x59,0x74,0x04,0xcc,0xf7,0xf2,0xec,0xc2,0xbf,0xc0,
    0xe7,0xa4,0x14,0xef,0x81,0x24,0x74,0x04,0xe4,0xde,0x49,0x42,0xb1,0x5a,0xca,0x5d,
    0xc4,0xd4,0xdf,0x1b,0xf4,0x17,0x4a,0xfc,0xd8,0x99,0xaa,0x3e,0xde,0x24,0xf8,0x06,
    0x7d,0xa8,0x3c,0x44,0x4c,0x63,0x2c,0x13,0xc4,0x1f,0x5d,0x4e,0x95,0x82,0x33,0x7f,
    0x46,0x62,0xf4,0xec,0xd0,0xb3,0x4e,0xb1,0x26,0xee,0xcf,0x96,0xeb,0xc4,0x84,0xcd,
    0xce,0xf5,0xca,0xf3,0x1a,0x7d,0x3a,0x62,0x7e,0x55,0x3b,0xec,0x33,0x11,0xf3,0xaf,
    0xd1,0x61,0xeb,0x23,0xe6,0x6b,0xb3,0xdb,0x97,0x37,0x44,0xec,0xbf,0xbe,0x85,0x14,
    0x95,0x72,0x5f,0xcc,0xfd,0x96,0xe7,0x79,0x95,0x31,0xc7,0x98,0xcf,0x19,0xc9,0x6b,
    0x59,0xcb,0x39,0xf8,0xa8,0x60,0xac,0x6a,0x79,0x56,0x9e,0xe2,0xd8,0xbd,0x99,0xb4,
    0xaf,0x11,0xd8,0x9d,0x4b,0xbf,0x75,0xff,0x9f,0x26,0xb0,0xd7,0x67,0x1d,0xcf,0xce,
    0xd9,0x82,0xf3,0x71,0x69,0xb2,0xd2,0x33,0x76,0x8e,0x00,0x9b,0x2d,0x45,0x7d,0x37,
    0xf1,0x1c,0x9f,0x2b,0xe0,0xdb,0x98,0xd3,0x0d,0x02,0x4c,0x6b,0x70,0x73,0xc2,0xf4,
    0xac,0x9c,0x2f,0x38,0x4f,0xb5,0xbf,0x3a,0xd6,0x76,0x81,0x00,0xef,0x4c,0x3a,0x2a,
    0x57,0x0b,0xb0,0x85,0xf4,0xad,0x75,0x7d,0xaf,0x00,0xef,0xa5,0x4e,0x0d,0x75,0x16,
    0x3b,0x9d,0x5a,0x01,0xae,0x3a,0x2a,0xd7,0x09,0xec,0x74,0x7f,0x68,0x23,0x76,0x93,
    0x60,0xdd,0x2b,0xd7,0x48,0x6c,0x91,0x20,0x56,0xfd,0xdb,0x42,0xec,0x66,0x01,0xae,
    0xfa,0x77,0x25,0x44,0xf3,0xf9,0x50,0x04,0x6e,0xba,0xd6,0xcf,0xad,0xec,0xa7,0xd1,
    0xf5,0xb3,0x98,0xf2,0xad,0xae,0x9f,0x25,0xb4,0x0d,0xae,0x9f,0x7a,0x01,0xbe,0xd8,
    0xf5,0xf3,0x91,0x08,0x5c,0xfb,0x0b,0xae,0x9f,0xdb,0x04,0x39,0x36,0xe7,0x7b,0x14,
    0xb0,0x3b,0x88,0x69,0x5f,0xcb,0x58,0xf7,0x3b,0x05,0xba,0xca,0x6d,0x21,0xb6,0x4c,
    0xe0,0x57,0x39,0x1d,0x0b,0xdd,0x43,0x1e,0x0d,0xd8,0x57,0x9a,0x39,0x16,0xea,0xef,
    0xab,0x01,0xb8,0xe9,0x7c,0x8d,0x3a,0xf5,0x4e,0xe7,0xeb,0x01,0xb8,0xf5,0xf7,0x8d,
    0x00,0x3b,0xc5,0xdb,0x13,0xa6,0x6b,0xfc,0xb1,0x80,0x3e,0x95,0x7b,0x2c,0xd9,0xe9,
    0x9a,0xff,0x26,0x71,0x9d,0x7b,0x8f,0x73,0xbd,0xbd,0x95,0x38,0xc5,0x77,0xa4,0xa6,
    0x98,0xce,0x3f,0xfd,0x7d,0x36,0x3d,0xaf,0xe1,0x7c,0x54,0xbc,0x8b,0x7d,0x7d,0x97,
    0x7e,0x75,0x0d,0xf5,0x12,0xfb,0x01,0xb1,0xf5,0xb1,0xa8,0xf5,0xee,0x00,0x3c,0x73,
    0x63,0xb2,0x27,0x20,0x0f,0xe5,0x4c,0x6f,0x1f,0xf5,0xfc,0x98,0x3c,0x11,0xa0,0xab,
    0x9c,0xd9,0xee,0xa7,0xad,0x62,0xa6,0xf7,0x93,0x00,0x7c,0x77,0x28,0xc6,0xe3,0x69,
    0xd6,0xa2,0xd1,0x8d,0xd1,0xaf,0x58,0x1b,0x3f,0x3f,0x7e,0x1d,0xa0,0xab,0x9c,0xd6,
    0x55,0xf7,0xb3,0x6e,0xee,0x65,0xb6,0x56,0x7a,0x02,0xd6,0xde,0x46,0xb7,0x56,0x7a,
    0x03,0x70,0x9b,0xf3,0x7d,0x01,0x98,0xf9,0xed,0x0f,0xf0,0xdd,0xe7,0x72,0x3c,0x14,
    0x50,0xb7,0xe0,0xfa,0x3f,0x1c,0x80,0x3f,0xed,0xf2,0x19,0x08,0xb0,0x3f,0xec,0x6c,
    0x07,0x69,0xeb,0xd7,0xc6,0x91,0x00,0x5d,0xe5,0x56,0xe8,0x7b,0x59,0x7a,0x1e,0x65,
    0xfc,0x1f,0x4e,0x3a,0xba,0x3f,0x1d,0x23,0x76,0x84,0xbe,0x34,0xf6,0x7b,0x04,0x78,
    0xc8,0xe7,0x2a,0xf6,0xb8,0xe5,0x02,0xdc,0xb7,0x4e,0xfa,0xf8,0xa8,0x80,0x5f,0xcd,
    0x35,0xa0,0xd8,0xfd,0x02,0x7c,0x43,0x2c,0xfc,0x7e,0x5c,0x80,0x67,0xf9,0x79,0x0e,
    0xec,0x01,0x01,0xbe,0x2a,0x2b,0xf4,0x56,0x52,0x2f,0x38,0xbd,0x16,0x01,0xde,0x92,
    0xbf,0x3f,0x00,0x5b,0x25,0xb0,0x6f,0x91,0xc2,0x76,0x0d,0x6d,0xc5,0xd9,0xae,0x15,
    0xe0,0x2b,0x9d,0xed,0x27,0x05,0xf6,0x6b,0x9d,0xed,0xa7,0x68,0x1b,0x9d,0xed,0x3a,
    0x01,0x5e,0xeb,0x6c,0x1f,0x14,0xd8,0xaf,0x73,0xb6,0x1f,0x64,0xcd,0x32,0x57,0xb3,
    0x0d,0x02,0xdc,0x37,0xab,0xd9,0x46,0x01,0xef,0x6b,0xf6,0x90,0x10,0x77,0x35,0xdb,
    0x2c,0xc0,0x7d,0xcd,0xb6,0x08,0x70,0x5f,0xb3,0x56,0xea,0xf9,0x9a,0x6d,0x15,0xe0,
    0xbe,0x66,0x6d,0x02,0xfb,0xad,0x2e,0xf6,0x2f,0xd0,0xd6,0xd7,0x6c,0x9b,0x00,0xf7,
    0x35,0x7b,0x58,0x60,0xbf,0xcd,0xd9,0x3e,0x42,0x5b,0x5f,0xb3,0x2f,0x09,0x70,0x5f,
    0xb3,0x2f,0x0b,0xec,0x95,0xd3,0xfd,0x48,0xcf,0xa8,0xfb,0x04,0xb5,0x54,0xee,0xa6,
    0xe4,0x41,0xcf,0xbc,0xfb,0xa4,0x98,0xfb,0x3b,0xb8,0x87,0xea,0x3a,0x6f,0x25,0xf6,
    0xb8,0xe0,0xee,0xb2,0x83,0xfb,0xa3,0xbe,0xf7,0x7f,0x4b,0x70,0x5e,0x36,0xb9,0xf5,
    0xb7,0x53,0x80,0x1f,0x4a,0x56,0x2a,0x7f,0x5b,0x80,0x6d,0xe7,0x19,0x6f,0xeb,0xf2,
    0x3b,0x02,0xce,0xec,0xbe,0x57,0x62,0xf7,0x7d,0x01,0xb6,0x93,0x7b,0xab,0xd9,0xed,
    0x12,0x70,0x66,0xf7,0xc3,0x12,0xbb,0x1f,0x09,0xb0,0x5d,0x25,0x76,0xbb,0x05,0x9c,
    0xed,0x39,0x7b,0x05,0x39,0xe9,0xfb,0xaf,0xe5,0xb3,0x8f,0xf9,0xec,0x75,0xfe,0x9f,
    0x10,0xe0,0x76,0xc6,0xb4,0xd3,0xae,0x3d,0x2b,0xfa,0x7c,0x52,0xa0,0xd7,0xce,0x73,
    0xc6,0xfa,0xdc,0x2f,0xe0,0xac,0x86,0x3f,0x16,0xbc,0xff,0xec,0x70,0x71,0x3c,0x25,
    0xc0,0x7d,0x1c,0x3f,0x65,0x1c,0x4f,0xb9,0x38,0x7e,0x26,0xc0,0x2d,0x8e,0x67,0x68,
    0xd7,0x9e,0x15,0xef,0x05,0x3f,0x17,0xe8,0x3d,0xe3,0xde,0x03,0x7e,0x21,0xc0,0x9b,
    0x5c,0x5c,0xbf,0x14,0xe0,0x3a,0xf6,0xfa,0xfe,0x73,0x2a,0xef,0xbb,0x22,0xff,0x36,
    0xf0,0x1b,0xc1,0x3b,0x91,0xd6,0x6b,0xbf,0x14,0x67,0x5a,0x87,0x80,0xb3,0x5c,0x3a,
    0x05,0x7e,0x1a,0xf2,0xfb,0x19,0xb0,0x2e,0x81,0x5e,0xa7,0x9b,0x4b,0x07,0x05,0x63,
    0x5d,0xed,0xf6,0xc7,0x1e,0x01,0xae,0xe3,0xb3,0x37,0x61,0x7a,0xf6,0xf5,0x09,0xc6,
    0xf6,0x04,0xdf,0xbd,0x06,0xa5,0x38,0xff,0x94,0xeb,0x4f,0x6d,0x80,0xe7,0x5d,0xbf,
    0xf3,0xff,0x9c,0xa0,0xdf,0x5d,0x0e,0x3b,0x2c,0xc0,0xb5,0x4f,0x3d,0x27,0x07,0x69,
    0xa7,0xf6,0x5e,0xd6,0xe7,0xeb,0x69,0xcf,0x50,0x9b,0x8d,0x11,0x76,0xfd,0xf4,0x37,
    0x20,0x45,0xbc,0xc7,0x04,0x31,0x6f,0x8c,0xc5,0xb9,0x7f,0x5c,0x70,0xee,0x77,0xbb,
    0x73,0xff,0x79,0x01,0x6e,0x39,0x9d,0x10,0x60,0x9a,0xd3,0xee,0xa4,0xa1,0x3a,0x27,
    0x05,0xf8,0x70,0x76,0x21,0xfe,0x7b,0xe2,0x7a,0x2f,0xd1,0xbb,0xc8,0x45,0xd9,0x88,
    0x1c,0xff,0x23,0xf7,0x96,0x99,0x8c,0x43,0xed,0x55,0x77,0x2d,0xef,0x1e,0xa7,0x05,
    0x3a,0x26,0xff,0x99,0xfc,0xc3,0x29,0x06,0x95,0xff,0x22,0xd0,0x51,0xfc,0xf3,0xc4,
    0xfe,0x2a,0xc0,0xf5,0x5e,0xf3,0x39,0x62,0x7f,0x13,0xe0,0x7a,0xb7,0x59,0xc3,0x7c,
    0x5e,0x14,0xe0,0x9b,0x38,0x07,0x4f,0x07,0x9c,0xe9,0xcb,0x03,0x6a,0x56,0x17,0x8b,
    0xef,0x1b,0x2f,0x72,0xbf,0x5b,0x41,0x6e,0xe1,0x3b,0x70,0x56,0x97,0x10,0x61,0xab,
    0x3a,0x3a,0xd6,0x95,0xb1,0x18,0x6b,0xe5,0x24,0x35,0xc5,0x74,0x8c,0xf4,0xb7,0xcd,
    0xb9,0xf7,0xd3,0xa6,0x2e,0x16,0xf9,0x2e,0x89,0xc0,0x4d,0xa7,0x21,0xa2,0x3f,0xaf,
    0x73,0x5b,0x04,0x6e,0x35,0xb9,0x23,0x02,0x53,0x5b,0xab,0xc9,0x9d,0x11,0xf8,0xb5,
    0xae,0x26,0x4b,0x23,0x70,0xad,0xc9,0x6a,0xd6,0x60,0x59,0x04,0xfe,0x59,0xca,0x77,
    0x45,0x60,0xb6,0xde,0xee,0x8e,0xc0,0xf4,0x0e,0xb8,0x8f,0xf9,0x36,0x45,0xbc,0xa3,
    0x28,0x67,0xe3,0xfd,0x81,0x08,0xbc,0x81,0xf3,0xc0,0x6a,0x7c,0x4f,0x04,0xd7,0x43,
    0x7f,0xf7,0x46,0xd8,0x29,0xae,0x73,0xd7,0xea,0xa2,0x4f,0x9d,0xbb,0xaa,0xb3,0x29,
    0x62,0xcf,0xd7,0xf9,0x7c,0x2f,0xeb,0xf7,0x24,0xfb,0x1e,0x19,0x31,0x6e,0x4d,0x7c,
    0xaf,0xac,0x72,0xb5,0x56,0x6e,0x54,0x6a,0x63,0xe9,0x53,0x7f,0xb7,0xb1,0xdf,0x8b,
    0x39,0x7e,0xa7,0xf9,0xfe,0xa3,0xd8,0x98,0x08,0xbc,0xc5,0x9d,0x39,0x97,0x44,0xf4,
    0x3f,0x86,0xf1,0x55,0xd1,0xd7,0xd8,0x12,0xb9,0xca,0xc5,0xfb,0x50,0x84,0xdd,0x28,
    0xc6,0xad,0xba,0x56,0xab,0x71,0x25,0xf1,0x4e,0x76,0xf1,0x2a,0x37,0x3e,0xb5,0x49,
    0xf4,0x39,0xde,0xc5,0x7b,0x85,0x8b,0xb7,0x95,0xd8,0x84,0x08,0xdc,0xc7,0x3b,0x91,
    0xf1,0x4e,0x60,0x7c,0x93,0xe9,0x6b,0x52,0x89,0x3c,0xd9,0xc5,0xbb,0x39,0xc2,0x6e,
    0x3c,0xe3,0x55,0xdd,0x3d,0x8c,0xf7,0xca,0x92,0x78,0xa7,0xbb,0x78,0x95,0x9b,0xa2,
    0xdf,0x18,0xe8,0x73,0x8a,0x9b,0x27,0x57,0x33,0x8e,0x26,0x17,0xdb,0xd4,0x08,0xbc,
    0xdd,0x9d,0xdf,0xd3,0x22,0xea,0x35,0xd5,0xd9,0xbe,0x87,0xb6,0xfa,0x1d,0xc1,0xf6,
    0xfe,0xeb,0x22,0xf0,0x06,0x67,0x7b,0x7d,0x44,0xec,0xd7,0x31,0x37,0x8b,0x63,0xba,
    0xcb,0x6d,0x2b,0x75,0x34,0xdf,0xeb,0x19,0xaf,0x71,0xad,0xec,0x5b,0xb9,0x69,0xe4,
    0x1e,0x08,0xe0,0x66,0xba,0xf5,0xdd,0xca,0x1a,0x1b,0x37,0xdb,0x71,0x5b,0xc9,0xd9,
    0xb9,0x35,0x97,0x6b,0x58,0xbf,0x79,0x18,0x76,0x03,0xd7,0xb4,0x62,0xdd,0xc4,0xe6,
    0x47,0xe0,0xd5,0xcc,0x47,0xb1,0x05,0x11,0xf6,0xca,0xd9,0x7a,0xa9,0x8e,0xc0,0x2d,
    0xe7,0x1b,0x23,0x30,0x8d,0xcf,0xde,0x77,0x6a,0x22,0x70,0x8d,0x6b,0x69,0x36,0x32,
    0x7f,0xe7,0x7b,0x29,0xe0,0x1b,0x81,0x72,0x65,0xbc,0xa7,0x97,0x33,0x66,0x1b,0xdb,
    0xbf,0x73,0xbf,0xb3,0x33,0xe9,0x8c,0xbb,0x93,0x29,0xf7,0x4a,0x6a,0x67,0x78,0x27,
    0x7b,0xc5,0xdd,0x09,0xff,0xc1,0x3b,0xe1,0x09,0x77,0x36,0xfc,0x33,0x00,0xdf,0xc6,
    0x5c,0xfe,0x15,0x80,0xd5,0x67,0x85,0xdd,0xbf,0x69,0xd7,0xe0,0xec,0xfe,0x13,0x80,
    0x9b,0xdd,0xab,0x01,0x58,0xbd,0xbb,0xcf,0xbe,0x16,0xe0,0xef,0xd5,0x50,0xdc,0x67,
    0x5f,0xe7,0xbd,0xe4,0x35,0xde,0x9f,0xf4,0x5b,0xce,0x59,0x7e,0xc7,0xb1,0xbb,0xcb,
    0xb9,0x00,0xbd,0x2c,0x2b,0xb0,0xb7,0x89,0x05,0x17,0x57,0xe0,0x59,0xd7,0xe8,0xe2,
    0x12,0x01,0x6e,0x67,0x64,0x14,0xdc,0xa9,0x24,0x7f,0xcf,0xac,0xc8,0xbf,0x11,0x95,
    0x0b,0xfa,0x50,0x9f,0xca,0x7f,0x4c,0xbf,0xd5,0x05,0xe0,0x2f,0xf1,0x0e,0x6b,0xf5,
    0x3b,0x53,0x72,0xa7,0xd5,0xe7,0xdb,0x29,0x8a,0x1b,0x53,0xfb,0x1f,0x54,0x53,0xbc,
    0x9c,0xd4,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     int minValue = kIsSigned != 0 ? - 1023 : 0;
//     int maxValue = kIsSigned != 0 ? 1023 : 2047;
//     a = clamp(a, minValue, maxValue);
//     return int(a / float(maxValue)*(255.0f)+ 0.5f);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint indices0 = pid < 5 ? indices <<(3 * pid + 16): 0x0;
//     uint indices1 = pid > 5 ? indices <<(3 * pid - 16): 0x0;
//     if(pid == 5){
//         indices0 |=(indices & 0x1)<< 31;
//         indices1 |=(indices & 0x6)>> 1;
//     }
//     uint mask0 = subgroupClusteredOr(indices0, 16);
//     uint mask1 = subgroupClusteredOr(indices1, 16);
//
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
