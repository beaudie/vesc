// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x0b,0x90,0x96,0x65,
    0x15,0xfe,0xde,0xf3,0xee,0x0d,0xd7,0x88,0x8d,0xc4,0xdd,0x28,0x44,0xd1,0x21,0x4b,
    0x11,0x18,0xd8,0x80,0x85,0x16,0x32,0xc7,0x9d,0xcd,0x41,0xb6,0x66,0x9b,0x69,0xb6,
    0x09,0x61,0xb7,0x90,0xcb,0xda,0x34,0x30,0xd9,0x20,0xa3,0xe4,0xd8,0x44,0x77,0xb4,
    0x2b,0x16,0xa1,0x63,0x3b,0x05,0x62,0x6b,0x45,0x50,0x06,0x13,0xbb,0xfe,0xec,0x22,
    0x18,0xa9,0xb9,0x98,0x8e,0x25,0xdd,0x74,0x30,0xb4,0x69,0x18,0x56,0x59,0xd8,0xd9,
    0xde,0xf3,0x3d,0xcf,0xf1,0x3b,0xfe,0x63,0xcc,0xbc,0x7c,0xff,0x79,0xce,0xfd,0xbc,
    0xe7,0xbd,0x6d,0x94,0x69,0xd5,0x59,0x0c,0xd9,0x05,0x59,0x4d,0xb6,0x21,0x66,0xf9,
    0xbf,0xba,0x4c,0xb2,0xc0,0xef,0x0c,0x7e,0x67,0xf1,0xbb,0x88,0xdf,0x6b,0xd3,0xb7,
    0x36,0xab,0xca,0xe5,0xae,0xbf,0xe1,0x63,0x37,0xcc,0x58,0xbf,0xa1,0x6b,0xc6,0x9c,
    0xb9,0x33,0x55,0x7f,0x7c,0x06,0x43,0xca,0x7b,0x7b,0x56,0x9d,0x55,0xa6,0x6f,0x45,
    0x1a,0xdd,0x2b,0x56,0xdf,0xa2,0xf8,0xec,0x34,0x16,0xa4,0x31,0x21,0xe9,0x57,0xe4,
    0xf6,0xb2,0x6c,0x31,0xe5,0x73,0x7b,0x09,0x9d,0x9d,0xdb,0xcf,0xb2,0x77,0x91,0x5e,
    0x40,0x7a,0x72,0x1a,0x2d,0xc9,0xe2,0x08,0x42,0xcd,0xa6,0xf1,0x6b,0x58,0x20,0x56,
    0xe1,0x30,0x21,0x56,0xe3,0xb0,0x48,0xec,0x42,0x87,0x55,0x10,0x9b,0xe0,0xb0,0x4a,
    0x62,0xef,0x74,0x58,0x15,0xb1,0xfa,0x3c,0xb6,0xf8,0x86,0x0f,0x8d,0x73,0x5f,0x0a,
    0xe0,0x32,0xc6,0x64,0xf4,0xa5,0x8e,0x3e,0x55,0xc6,0x3f,0x45,0x7e,0xa0,0x2d,0xa5,
    0x1b,0xc8,0x3b,0x1f,0x90,0xb3,0xd2,0x13,0x93,0x07,0xf5,0x71,0x69,0x92,0x89,0xf4,
    0x77,0x51,0x92,0xd1,0x58,0xa6,0x52,0xff,0xe2,0x44,0x57,0x33,0x3e,0xe3,0xd7,0x92,
    0x9f,0xe5,0xdf,0x8a,0x3c,0xdf,0x6a,0xd6,0x52,0xe5,0xeb,0xf8,0x5b,0xc8,0x7f,0x07,
    0xf9,0x75,0xa4,0x2f,0x26,0x5d,0x45,0xf9,0x99,0x94,0x8f,0xe4,0xcf,0xa2,0x6f,0xc5,
    0x9b,0x48,0xcf,0x26,0xf6,0x7e,0xc6,0xd7,0xc8,0xda,0x1b,0x7f,0x81,0xe3,0xd7,0xe6,
    0x78,0x11,0xdf,0x42,0xf2,0x6a,0x1d,0xbf,0x99,0x73,0x63,0xf4,0x75,0x79,0x5f,0x15,
    0xf6,0x5b,0x1c,0x5f,0xe9,0xd6,0x32,0xff,0x6d,0xcc,0xcf,0xf4,0xdb,0xcb,0xf8,0x1d,
    0xcc,0x47,0xf3,0xfb,0x34,0x7d,0x7b,0x7f,0x6b,0x18,0xbf,0xd1,0x6b,0xd9,0x23,0x46,
    0xaf,0x63,0x2f,0x5c,0x95,0x2a,0xa5,0xfa,0xdd,0xcc,0x69,0x0d,0x65,0xd7,0x39,0xd9,
    0xcf,0xa6,0x31,0xe6,0xe8,0x8d,0x65,0xb1,0xdd,0xc1,0x58,0x2c,0xb6,0x7b,0xd2,0xb8,
    0xda,0xd1,0xdb,0xe8,0xcb,0xe8,0x1d,0xec,0x4d,0xa3,0x7b,0x5c,0x6c,0x4a,0xef,0x62,
    0x0f,0x1b,0xdd,0x9b,0xc6,0x25,0xcc,0xf5,0x20,0xe7,0x55,0x73,0x7d,0x77,0xfa,0xbf,
    0x2f,0x7d,0x0f,0x32,0x66,0x93,0xef,0xcf,0xd7,0x33,0x72,0x53,0xde,0xa3,0xac,0xe7,
    0x2e,0xce,0x6b,0xbf,0x93,0x2d,0xd1,0x9e,0xd1,0x87,0xd2,0x18,0xe7,0xe8,0x01,0xae,
    0x37,0xb3,0x35,0x48,0x5b,0x25,0xca,0x0e,0x38,0xd9,0xc3,0xec,0x3b,0x93,0x7d,0x8c,
    0xf3,0xda,0x42,0xde,0x80,0xe3,0x1d,0x21,0xaf,0x83,0x71,0x79,0x3b,0x47,0x39,0x9f,
    0x26,0xfb,0xb8,0x8b,0xff,0x30,0xf9,0x26,0xfb,0x87,0x34,0x2e,0x70,0xb2,0xc7,0x5c,
    0x7c,0x8d,0xe4,0x1b,0xef,0x8f,0xf4,0x57,0xa2,0x1d,0xcf,0x7b,0x82,0x7a,0x2d,0x6f,
    0xc1,0x7b,0x92,0xb1,0x9a,0xff,0x43,0x8e,0xf7,0x54,0x59,0x8e,0x9e,0xf7,0x27,0x97,
    0x63,0x39,0xef,0x69,0xa7,0x57,0x2a,0xe3,0x0d,0x31,0x96,0x0e,0xc7,0xb3,0x7c,0x8f,
    0x73,0xdd,0x99,0xec,0x33,0xc4,0x5a,0xa9,0xe3,0xed,0xfc,0xd9,0xd5,0xf7,0x30,0xeb,
    0x61,0xbc,0x67,0x5d,0xbe,0xa5,0x37,0x78,0x13,0xf3,0x7e,0x7a,0x8e,0x3d,0x33,0xc8,
    0x39,0x3c,0xc2,0x39,0x38,0xc6,0x1a,0x3e,0xc1,0x9a,0x3c,0xc5,0x1c,0x9f,0x66,0xcc,
    0xcf,0xd0,0xe7,0xb3,0xdc,0x17,0xfe,0xc2,0x7e,0xe8,0xcb,0xfb,0x5d,0xb2,0x93,0xe9,
    0x3b,0x25,0x75,0x97,0xed,0xc7,0xff,0x6f,0xa8,0xee,0x39,0xf6,0xe1,0x08,0xf7,0x20,
    0xa5,0xcf,0x13,0x53,0xfe,0x28,0x7f,0xfb,0xde,0x0d,0x69,0x83,0xd8,0x3c,0x36,0x36,
    0x66,0x74,0x75,0xc0,0xda,0x34,0xba,0x26,0x60,0x1d,0x4f,0x4a,0xab,0x75,0x42,0xc0,
    0x1e,0xab,0x3c,0xfd,0x3d,0x45,0x37,0x97,0xec,0xc4,0x62,0xa3,0xa7,0xe6,0x74,0xd6,
    0x6c,0x6b,0xfc,0x8a,0x80,0x5c,0x8c,0x5e,0x1a,0x8a,0x35,0xaa,0xf4,0xfa,0x50,0xec,
    0xb7,0xdf,0x48,0xbf,0x4f,0x72,0x8f,0x68,0x48,0x51,0xee,0xe1,0x99,0x50,0x99,0xbd,
    0xf9,0x5f,0xe0,0x77,0x72,0x8a,0xe7,0xd7,0x89,0xd8,0x13,0x90,0xdb,0x5e,0x32,0x14,
    0x6b,0x22,0xbd,0x8f,0x98,0xda,0x7b,0x99,0xf6,0x42,0x99,0x1d,0x3b,0x33,0xd5,0xc6,
    0xbf,0x09,0xbe,0x4c,0x1b,0x4a,0x9f,0x22,0xa6,0x31,0xbe,0xce,0x78,0xa3,0xcb,0xe1,
    0x5c,0xc0,0x99,0x7e,0x55,0xe2,0xe8,0xd9,0xa0,0x67,0x99,0x62,0xed,0xdc,0x7f,0xad,
    0x8e,0xe3,0x93,0xa3,0x6b,0x72,0xb9,0xca,0xbc,0x26,0x37,0x45,0xf4,0x4f,0xa3,0xc3,
    0x56,0x44,0xf4,0x57,0x9b,0xc3,0x56,0x46,0xf4,0x63,0x87,0xdb,0x77,0x3b,0x23,0xf6,
    0x57,0x3f,0x42,0x8a,0x4a,0x79,0xeb,0x73,0xbb,0x95,0x79,0x5e,0x15,0xcc,0x51,0xe3,
    0x7d,0x3d,0x21,0x95,0xec,0x0b,0xed,0xb1,0x2d,0x82,0xb9,0x69,0xe2,0x59,0x78,0x8c,
    0x73,0xf5,0x5a,0x92,0xae,0x17,0xe8,0x9d,0x4b,0xbf,0x75,0x7f,0x6f,0x10,0xe8,0xeb,
    0x77,0x11,0xcf,0xc6,0x69,0x82,0xf3,0xef,0xc6,0xa4,0xa5,0x67,0xe8,0xe5,0x02,0x6c,
    0x9a,0x14,0xf5,0xdd,0xc4,0x73,0xfa,0x0a,0x01,0xff,0x2e,0xe6,0x34,0x5d,0x80,0x69,
    0x0d,0x96,0x24,0x4c,0xcf,0xc2,0xf7,0x0a,0xce,0x4b,0xf5,0xb7,0x88,0xb5,0xbd,0x52,
    0x80,0xf7,0x27,0x19,0xa5,0xdf,0x27,0xc0,0x9a,0x69,0x3b,0xef,0x63,0x01,0x3e,0x48,
    0x99,0x19,0x94,0xb9,0xce,0xc9,0x5c,0x23,0xc0,0x55,0x46,0xe9,0x59,0x02,0x3d,0x5d,
    0xff,0x77,0x11,0x9b,0x2d,0x58,0xd7,0xca,0x6b,0x23,0x36,0x47,0x10,0xab,0xfe,0xdb,
    0x4c,0x6c,0xae,0x00,0x57,0xf9,0x8f,0x26,0x44,0xf3,0xb9,0x3e,0x02,0x37,0x59,0xf3,
    0x33,0x8f,0x7e,0xda,0x9c,0x9f,0xf9,0xa4,0xe7,0x39,0x3f,0x4d,0xd4,0x0d,0xce,0xcf,
    0x42,0x01,0x3e,0xdf,0xf9,0x69,0x8d,0xc0,0xd5,0x5f,0x70,0x7e,0x9a,0x05,0x39,0x76,
    0xe4,0x7b,0x10,0xb0,0x25,0xc4,0xd4,0xd7,0x32,0xd6,0xfd,0x43,0x02,0x59,0xe5,0x6d,
    0x26,0xf6,0x61,0x81,0x5d,0xe5,0xe9,0x5c,0xe8,0x1e,0xb1,0x25,0x60,0xdf,0xe8,0xe0,
    0x5c,0xa8,0xbd,0xaf,0x04,0xe0,0x26,0xf3,0x55,0xca,0xb4,0x38,0x99,0xaf,0x05,0xe0,
    0xe6,0xef,0xeb,0x01,0x7a,0x8a,0xf7,0x26,0x4c,0xd7,0xf8,0x37,0x03,0x7c,0x2a,0xef,
    0xde,0xa4,0xa7,0x6b,0xfe,0x5b,0xc4,0xb5,0xf7,0xee,0xe6,0x7a,0x1b,0x49,0x3c,0xc5,
    0xb7,0xa6,0xa1,0x98,0xf6,0x9f,0xfe,0x3e,0x9b,0xbe,0xf5,0xec,0x47,0xc5,0x1f,0xa5,
    0xaf,0xef,0xd1,0xae,0xae,0xa1,0x41,0x62,0xf7,0x12,0x5b,0x19,0x8b,0x5a,0x6f,0x0f,
    0xc0,0x33,0x37,0x27,0x3f,0x0e,0xc8,0x43,0x79,0x26,0x77,0x1f,0xe5,0xfc,0x9c,0xdc,
    0x1f,0x20,0xab,0x3c,0xd3,0xed,0xa1,0xae,0x62,0x26,0xf7,0xb3,0x00,0x7c,0x7b,0x28,
    0xe6,0x63,0x37,0x6b,0xd1,0xe6,0xe6,0xe8,0x17,0xac,0x8d,0xef,0x8f,0x5f,0x06,0xc8,
    0x2a,0x4f,0xeb,0xaa,0xfb,0xd9,0x6f,0xb8,0x97,0xd9,0x5a,0x79,0x24,0x60,0xed,0x6d,
    0x74,0x6b,0xe5,0x77,0x01,0xb8,0xf5,0xfc,0xfe,0x00,0xcc,0xec,0x1e,0x08,0xb0,0xbd,
    0xdf,0xe5,0xf8,0xfb,0x80,0xba,0x05,0xe7,0xbf,0x2f,0x00,0xdf,0xed,0xf2,0xe9,0x0f,
    0xd0,0xef,0x73,0xba,0x25,0xea,0xfa,0xb5,0x71,0x28,0x40,0x56,0x79,0x5d,0x29,0x0e,
    0xdd,0x9b,0x07,0x18,0xff,0xf2,0x24,0xa3,0xfb,0xd3,0x20,0xb1,0x43,0xb4,0xa5,0xb1,
    0x7f,0x44,0x80,0x87,0xbc,0x57,0xb1,0xc7,0xb5,0x0b,0x70,0x3f,0xfa,0x69,0xe3,0xe3,
    0x02,0x7e,0x37,0xd7,0x80,0x62,0x9f,0x10,0xe0,0x9d,0xb1,0xb0,0xdb,0x21,0xc0,0xb3,
    0xfc,0xbc,0x06,0xf6,0x49,0x01,0xbe,0x2e,0x2b,0xe4,0x3e,0x45,0xb9,0xe0,0xe4,0x96,
    0x0b,0xf0,0xb5,0xf9,0xfd,0x00,0xd8,0x4d,0x02,0xfd,0xe5,0x52,0xe8,0xae,0xa4,0xae,
    0x38,0xdd,0x4e,0x01,0xbe,0xc6,0xe9,0x76,0x09,0xf4,0x3b,0x9d,0xee,0x67,0xa8,0x1b,
    0x9d,0xee,0x2a,0x01,0xde,0xe4,0x74,0x6f,0x16,0xe8,0xaf,0x72,0xba,0x4b,0x59,0xb3,
    0xcc,0xd5,0xac,0x5b,0x80,0xfb,0x61,0x35,0xbb,0x45,0xc0,0xf7,0x35,0xfb,0x9c,0x00,
    0xf7,0x35,0x5b,0x2f,0xc0,0x7d,0xcd,0x36,0x08,0x70,0x5f,0xb3,0xcf,0x53,0xce,0xd7,
    0xec,0x56,0x01,0xee,0x6b,0xf6,0x05,0x81,0xfe,0xad,0x2e,0xf6,0x8d,0xd4,0xf5,0x35,
    0xbb,0x4d,0x80,0xfb,0x9a,0x6d,0x12,0xe8,0xdf,0xe6,0x74,0x6f,0xa7,0xae,0xaf,0xd9,
    0x1d,0x02,0xdc,0xd7,0x6c,0xb3,0x40,0x5f,0x79,0xba,0x1f,0xe9,0x19,0xb5,0x4c,0x50,
    0x4b,0xe5,0x7d,0x30,0x59,0xd0,0x33,0x6f,0x99,0x14,0xbd,0xbf,0x95,0x7b,0xa8,0xae,
    0xf3,0x3b,0x89,0xdd,0x2d,0x78,0x9b,0x6c,0xe5,0xfe,0xa8,0xf7,0xfa,0x7b,0x04,0xe7,
    0x65,0xbb,0x5b,0x7f,0xdf,0x16,0xe0,0x47,0x93,0x96,0xd2,0xdf,0x11,0x60,0xdb,0x78,
    0xc6,0xdb,0xba,0xfc,0xae,0x80,0x67,0x7a,0xdf,0x2f,0xd3,0xfb,0x81,0x00,0xdb,0xc1,
    0xbd,0xd5,0xf4,0xb6,0x09,0x78,0xa6,0xf7,0xc3,0x32,0xbd,0x1f,0x09,0xb0,0x9e,0x32,
    0xbd,0xed,0x02,0x9e,0xed,0x39,0x3b,0x04,0x39,0xe9,0xfd,0xd6,0xf2,0xb9,0x8f,0xf9,
    0xec,0x70,0xf6,0xef,0x17,0xe0,0x76,0xc6,0x3c,0x40,0xbd,0xde,0xac,0xf0,0xf9,0x13,
    0x81,0xdc,0x03,0x3c,0x67,0xcc,0x67,0x8f,0x80,0x67,0x35,0xfc,0xa9,0xe0,0xfe,0xb3,
    0xd5,0xc5,0xb1,0x53,0x80,0xfb,0x38,0x76,0x31,0x8e,0x9d,0x2e,0x8e,0x07,0x05,0xb8,
    0xc5,0xf1,0x10,0xf5,0x7a,0xb3,0xe2,0x5e,0xf0,0x73,0x81,0xdc,0x43,0xee,0x1e,0xd0,
    0x2b,0xc0,0xdb,0x5d,0x5c,0x0f,0x0b,0x70,0x9d,0x7b,0xbd,0xff,0x3c,0x97,0xfb,0xae,
    0xca,0xdf,0xfe,0xbf,0x12,0xdc,0x89,0xb4,0x5e,0x3d,0x52,0x9c,0x69,0x7b,0x04,0x3c,
    0xcb,0x65,0xaf,0xc0,0x4e,0x6b,0xfe,0xfe,0x02,0xb6,0x4f,0x20,0xb7,0xd7,0xf5,0xd2,
    0x6f,0x05,0x73,0xdd,0xe8,0xf6,0xc7,0x47,0x04,0xb8,0xce,0xcf,0x83,0x09,0xd3,0xb3,
    0x6f,0xbf,0x60,0x6e,0x8f,0xf3,0xee,0x55,0x92,0xe2,0xfc,0x53,0xde,0x01,0x5d,0xc3,
    0x3c,0xef,0x0e,0x38,0xfb,0x07,0x05,0x7e,0xb7,0x39,0xac,0x4f,0x80,0xab,0x4f,0x3d,
    0x27,0x4b,0xd4,0x53,0x7d,0x4f,0xeb,0xf7,0x4c,0xda,0x33,0x54,0xa7,0x2b,0x42,0xef,
    0x00,0xed,0xf5,0x4b,0x11,0xef,0xa0,0x20,0x66,0x95,0xb1,0x79,0x7b,0x4c,0x80,0x77,
    0x64,0xc5,0x5d,0xe0,0x88,0xe0,0x2e,0x50,0x72,0x77,0x81,0xa3,0x02,0xdc,0xf2,0x7c,
    0x5c,0x80,0x69,0x9e,0x3b,0x93,0x44,0xfe,0x0e,0x15,0xe0,0xfa,0x06,0xf1,0xf8,0x93,
    0xc4,0xf5,0x2d,0xa2,0xef,0x8f,0x0b,0xb3,0x9a,0x1c,0x1f,0xe2,0x7e,0x73,0x35,0xe3,
    0x50,0x7d,0x95,0xdd,0xc4,0x5e,0x19,0x0a,0x38,0x7b,0x57,0x04,0xe4,0x36,0x3d,0x16,
    0x7f,0x67,0x18,0xe2,0xbe,0xd4,0x45,0xde,0x95,0x6f,0xc1,0xb3,0x58,0x5f,0x11,0xe8,
    0xaa,0x8c,0xce,0xc9,0x69,0x37,0x27,0xca,0x7b,0x35,0x8d,0xd3,0xac,0xe5,0xab,0xae,
    0x37,0x66,0x52,0x67,0x7a,0x7e,0x3f,0xc7,0x9b,0x68,0x56,0x04,0x6e,0x32,0x73,0x22,
    0xfc,0x79,0x99,0xb9,0x11,0xf8,0x96,0x24,0xa3,0xf4,0x07,0x22,0x30,0xd5,0xfd,0x12,
    0xb1,0x79,0x11,0xb8,0xbe,0xb9,0xbe,0x48,0x6c,0x7e,0x04,0xae,0xef,0xae,0x6e,0xd6,
    0x60,0x41,0x04,0x7e,0x3b,0xe9,0x85,0x11,0x98,0xad,0x8b,0x45,0x11,0x98,0xbe,0xcd,
    0x76,0x33,0xdf,0xe6,0xc8,0xbb,0x44,0x2c,0xe6,0x60,0x71,0x04,0xde,0xca,0xb7,0xb2,
    0xd5,0x78,0x49,0x04,0x6f,0x80,0xf6,0xae,0x8d,0xd0,0x53,0x5c,0x7b,0xcc,0xea,0x72,
    0x9a,0x3d,0x96,0x9f,0x73,0x11,0x7b,0xb3,0xf6,0x9d,0xca,0x6b,0xcd,0x1e,0xa6,0xef,
    0x33,0x82,0x79,0x5b,0xca,0xfb,0xdf,0xa8,0xab,0xb5,0xf2,0x86,0xb5,0xb7,0x68,0x73,
    0x98,0xbd,0xae,0x36,0xcf,0x0a,0xe6,0x6f,0x88,0xf7,0x14,0xc5,0x46,0x04,0xf8,0x5a,
    0x77,0x36,0x9c,0x13,0xf8,0x1f,0xe1,0x1a,0x18,0xa5,0xad,0xf3,0x65,0xf4,0xa8,0x8b,
    0x77,0x55,0x84,0xde,0x30,0xcf,0x14,0x95,0xbd,0x39,0x80,0x37,0x26,0x45,0xdf,0xa8,
    0x9c,0xfa,0xb2,0x3a,0x86,0xf8,0xe6,0x5c,0xc6,0xc5,0x22,0x17,0xe5,0x49,0x1a,0x35,
    0x11,0xfe,0xf4,0xb7,0xe5,0x52,0x19,0x8b,0x5c,0xee,0x24,0x56,0x15,0x81,0xfb,0x5c,
    0xaa,0x23,0x72,0xa9,0x62,0xad,0xc7,0xd1,0x56,0x4d,0x19,0xad,0x5f,0xcb,0x65,0x75,
    0x84,0x9e,0x70,0x0e,0x54,0xd6,0x72,0xa9,0x75,0x6b,0x60,0x35,0x7d,0xed,0x62,0x2e,
    0x6f,0x2b,0xcb,0xa5,0xc1,0xe5,0xa2,0xbc,0xf1,0x69,0x34,0xd0,0xdf,0x78,0xd7,0x5f,
    0x13,0x18,0x63,0xbb,0x8b,0xbb,0x2e,0x02,0xef,0x75,0xe7,0xf3,0xc4,0x88,0x5a,0xd6,
    0x39,0xdd,0x8b,0xa8,0xab,0x7f,0x17,0xb0,0xbd,0x7d,0x52,0x04,0xde,0xea,0x74,0xeb,
    0x23,0x62,0x9f,0xc4,0xbc,0x2d,0x8e,0x06,0x97,0x77,0x37,0x65,0xb4,0x16,0xf5,0x8c,
    0xd7,0x78,0xeb,0xe8,0x5b,0x79,0x13,0xc9,0xb3,0xf3,0x65,0x32,0xd7,0xb0,0xee,0x3b,
    0x86,0xbd,0x87,0x6b,0x5a,0xb1,0x12,0xb1,0x29,0x11,0x78,0x23,0xe3,0x52,0xec,0x92,
    0x08,0x7d,0xe5,0xd9,0x7a,0x99,0x1a,0x81,0x5b,0xec,0x97,0x45,0x60,0x1a,0x83,0xdd,
    0x4b,0x2e,0x8f,0xc0,0x35,0xe6,0x1b,0xb3,0x71,0xf9,0xdd,0xec,0xf9,0x80,0xb7,0xbc,
    0xf2,0x2a,0xf8,0x9e,0xae,0xe4,0x5c,0xd9,0x1c,0xfd,0x95,0xfb,0x9d,0x9d,0x1d,0x27,
    0xdc,0xdb,0x49,0x79,0x2f,0xa4,0x71,0x82,0x6f,0xa7,0x17,0xdc,0xdb,0xed,0x6f,0x7c,
    0xbb,0x1d,0x77,0xfb,0xf5,0xdf,0x03,0xf0,0x2f,0x33,0x97,0x7f,0x04,0x60,0x2d,0x6e,
    0x9f,0xff,0x27,0xf5,0x5a,0x9d,0xde,0xbf,0x02,0x70,0xd3,0x7b,0x31,0x00,0x6b,0x71,
    0xef,0xce,0x97,0x02,0xec,0xbd,0x18,0x8a,0x77,0xe7,0x49,0xbe,0x1f,0x5e,0xe2,0x3b,
    0x47,0xff,0xe6,0xf2,0x0a,0xff,0xde,0x62,0x6f,0x8c,0xff,0x04,0xc8,0x65,0x59,0x81,
    0xfd,0x97,0x58,0x70,0x71,0x9d,0x61,0x5c,0x6d,0x2e,0xae,0xe1,0x00,0xdc,0xce,0xb2,
    0xd7,0xf8,0xf6,0x19,0xce,0xdf,0xa7,0x55,0xf9,0xdf,0x72,0xce,0x06,0xf8,0x50,0x9b,
    0xca,0xef,0xd4,0xfd,0x9d,0xf8,0xf3,0x7c,0x6b,0x5a,0xfd,0x4e,0x94,0xbd,0x3d,0xf5,
    0x3b,0x9a,0xa2,0x98,0x97,0xc6,0xff,0x00,0x9f,0xd0,0x03,0x45,0x5c,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
// #extension GL_KHR_shader_subgroup_basic : enable
// #extension GL_KHR_shader_subgroup_arithmetic : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rg32ui)writeonly uniform uimage2DArray uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uniform int kOffsetX;
//     uniform int kOffsetY;
//     uniform int kOffsetZ;
//     uniform int kWidth;
//     uniform int kHeight;
//     uniform int kAlphaBits;
//     uniform int kIsSigned;
// };
//
// ivec2 build_coord()
// {
//     ivec2 base = ivec2(gl_WorkGroupID . xy)* 8;
//     int blockid = int(gl_LocalInvocationID . x >> 4u);
//     int blockxy = int(gl_LocalInvocationID . x & 0xfu);
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += ivec2(blockxy & 0x3, blockxy >> 0x2);
//     return base;
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base * 8 + 4;
//     a += multiplier != 0 ? mod * multiplier * 8 : mod;
//     a >>= 3;
//     int minValue = kIsSigned != 0 ? - 128 : 0;
//     int maxValue = kIsSigned != 0 ? 127 : 255;
//     return clamp(a, minValue, maxValue);
//
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor)
// {
//     vec3 dir = minColor - maxColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     uint factor = uint(clamp(int((dist - distMax)/(distMin - distMax)* 3.0f + 0.5f), 0, 3));
//
//     uint bit0_in = factor & 1u;
//     uint bit1_in = factor >> 1;
//     return((bit0_in ^ bit1_in)<< 1)| bit1_in;
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx = ivec3(rgbColor)- ivec3((subgroupClusteredAdd(rgbColor, 16)+ 8)>> 4);
//     float cov0 = float(subgroupClusteredAdd(dx . r * dx . r, 16));
//     float cov1 = float(subgroupClusteredAdd(dx . r * dx . g, 16));
//     float cov2 = float(subgroupClusteredAdd(dx . r * dx . b, 16));
//     float cov3 = float(subgroupClusteredAdd(dx . g * dx . g, 16));
//     float cov4 = float(subgroupClusteredAdd(dx . g * dx . b, 16));
//     float cov5 = float(subgroupClusteredAdd(dx . b * dx . b, 16));
//
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//     float eigenvalue = 0.0f;
//
//     for(int i = 0;i < 4;i ++){
//         float r = dot(vec3(cov0, cov1, cov2), vg);
//         float g = dot(vec3(cov1, cov3, cov4), vg);
//         float b = dot(vec3(cov2, cov4, cov5), vg);
//         vg = vec3(r, g, b);
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uint min_index = subgroupClusteredMax(dist == min_dist ? gl_SubgroupInvocationID : 0, 16);
//     uint max_index = subgroupClusteredMax(dist == max_dist ? gl_SubgroupInvocationID : 0, 16);
//     minColor = subgroupShuffle(rgbColor, min_index);
//     maxColor = subgroupShuffle(rgbColor, max_index);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     uint ind = uint(float(alpha - minAlpha)/ dist * 7.0f + 0.5f);
//
//     ind = - ind & 7;
//     ind ^= int(2 > ind);
//     return ind;
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uint mask0 = subgroupClusteredOr(pid < 5 ? indices <<(3 * pid + 16): 0x0, 16);
//     uint mask1 = subgroupClusteredOr(pid > 5 ? indices <<(3 * pid - 16): 0x0, 16);
//     if(pid == 5){
//         mask0 |=(indices & 0x1)<< 31;
//         mask1 |=(indices & 0x6)>> 1;
//     }
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask0, mask1);
// }
//
// uint packColorToRGB565(uvec3 color){
//     return((color . r >> 3)<< 11)|((color . g >> 2)<< 5)|(color . b >> 3);
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(kWidth, kHeight))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//
//     int texOffsetY = kWidth >> 2;
//     int texOffsetZ = texOffsetY *(kHeight >> 2);
//
//     uvec4 payload = texelFetch(uInputBuffer, texOffsetZ * int(gl_WorkGroupID . z)+ tile_coord . y * texOffsetY + tile_coord . x);
//
//     ivec4 result;
//
//     result . r = decode_etc2_alpha(flip_endian(payload . xy), linear_pixel);
//
//     uvec4 finalResult;
//
//     finalResult . rb = EncodeBC4(result . r, pid);
//
//     if(pid == 0){
//         tile_coord += ivec2(kOffsetX / 4, kOffsetY / 4);
//         imageStore(uOutput, ivec3(tile_coord . r, tile_coord . g, int(gl_WorkGroupID . z)+ kOffsetZ), finalResult);
//     }
//
// }
