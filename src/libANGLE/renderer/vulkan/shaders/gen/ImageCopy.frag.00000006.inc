// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x95,0x55,
    0x14,0xc5,0x3f,0xee,0x05,0x2e,0x0f,0x79,0x08,0x28,0xa1,0x62,0xf9,0xea,0x21,0x86,
    0x58,0x60,0x24,0x50,0x92,0x91,0x48,0x18,0x15,0x50,0x99,0x26,0x5a,0x58,0x29,0x49,
    0x1a,0x44,0x51,0x4a,0x6a,0x9a,0x49,0xe5,0xa3,0x97,0x58,0x89,0x56,0xa2,0x56,0xd3,
    0xdf,0xd1,0x5f,0xd4,0xf4,0x98,0x69,0xa6,0xb3,0xcf,0xfd,0x6d,0x66,0x75,0xc7,0x8a,
    0x99,0x33,0xdf,0xdd,0x6b,0xef,0xb3,0xcf,0xda,0x6b,0x9f,0x6f,0x7f,0xa4,0x53,0xab,
    0x32,0x49,0x3a,0x2f,0x29,0x49,0x8a,0x92,0x1f,0x93,0xec,0xdf,0xc2,0x24,0x95,0xe4,
    0x85,0x67,0x69,0x52,0x18,0x9f,0x5b,0x7b,0xfb,0x7b,0x1b,0xc7,0xc6,0x87,0x1b,0x9b,
    0x5b,0x9a,0xcc,0x5f,0x9e,0xa4,0x63,0x9c,0xf9,0x2a,0x92,0x4c,0x92,0x1f,0x9e,0xb6,
    0x0e,0xee,0xdd,0x3f,0x6a,0x78,0x59,0x58,0x37,0xc3,0xaa,0x0c,0x71,0x86,0x67,0x2c,
    0x47,0xf8,0x55,0x16,0x73,0xda,0x9e,0x24,0xe9,0x4e,0x0a,0x92,0x6a,0xce,0x5b,0xc5,
    0xd3,0xb1,0x3c,0xb0,0x22,0xc1,0x52,0x60,0x95,0x82,0xa5,0xc1,0x6a,0x04,0xcb,0x07,
    0xbb,0x4d,0xb0,0x02,0xb0,0x65,0x82,0x15,0x82,0xdd,0x21,0x58,0x06,0x6c,0xb5,0x60,
    0x45,0x60,0x77,0x0b,0x56,0x0c,0xb6,0x4e,0xb0,0x12,0xb0,0x26,0xc1,0x4a,0xc1,0x9a,
    0x05,0x5b,0x00,0xd6,0x2a,0x58,0x19,0x58,0x7b,0xd4,0x29,0x3d,0x5f,0xaf,0x69,0xb6,
    0x25,0x3c,0x57,0xa2,0x8f,0xdb,0x2b,0xc4,0x36,0x9d,0x97,0x63,0x57,0x87,0x5d,0xa9,
    0xe8,0x4f,0x47,0x6d,0xec,0xf7,0xa2,0x10,0x53,0x48,0x9d,0xa6,0x6b,0x6d,0xb0,0x33,
    0xd4,0x9f,0x8a,0x78,0x7e,0xac,0x31,0xc3,0x5a,0x1c,0x76,0x96,0x10,0x6f,0xb1,0xa5,
    0xd4,0x96,0x4f,0xec,0x02,0xf2,0x18,0xde,0x86,0x5d,0x26,0xb9,0xcb,0x89,0xf7,0xb3,
    0xab,0xc8,0x95,0x44,0x9e,0x95,0xf3,0x3a,0x3b,0x07,0x5b,0x55,0xff,0xb3,0x3c,0xc6,
    0xce,0xaf,0x41,0xff,0x6a,0xce,0xaf,0x89,0xe7,0x64,0xb1,0x06,0x6a,0x5d,0x0c,0x1f,
    0x8b,0xaf,0xc5,0x97,0x11,0x7f,0xbd,0xd4,0xb3,0x1c,0x7f,0x55,0xbc,0x47,0xa9,0xa8,
    0x6d,0x03,0xbc,0x5d,0x77,0x8b,0xbb,0x53,0x38,0x7b,0x9e,0x06,0xee,0x96,0xc7,0x6f,
    0xe0,0x5c,0xf7,0x6f,0x44,0x1b,0xd3,0xe5,0x21,0xf6,0xfa,0xb9,0x0f,0x93,0xcf,0xf0,
    0xba,0xc0,0xa0,0x13,0x7f,0x5e,0xf2,0xcf,0xbf,0x3c,0xe1,0xf0,0x08,0xbf,0x3b,0xa9,
    0xdd,0xec,0x2d,0x60,0x7e,0x66,0x57,0x8e,0xdd,0x23,0x7d,0x7e,0x9c,0x5a,0xb5,0x86,
    0x3e,0xb1,0xad,0x86,0x41,0xde,0x2b,0xe3,0xfc,0x1c,0xbe,0xb4,0xc4,0xef,0x81,0xb7,
    0xf9,0xc7,0xd1,0xcd,0x6b,0x7a,0x13,0xdf,0xb8,0xc4,0x4f,0xf2,0x0e,0x59,0xfc,0x7b,
    0xc4,0xa7,0xc4,0x7f,0x0a,0x4e,0xb6,0xff,0x23,0xf6,0x57,0x89,0xff,0x02,0xef,0x8c,
    0xf3,0xbb,0x22,0xf5,0xdc,0x80,0xdb,0x38,0x7a,0xdc,0x60,0xee,0xa4,0xa3,0xf6,0x05,
    0x31,0x2e,0x1f,0x3d,0x0c,0xfb,0x3d,0x20,0x05,0xc4,0x16,0xc9,0xbd,0x70,0x7b,0xa9,
    0xd8,0xd6,0x9f,0xcd,0x62,0x5b,0x6d,0x13,0x62,0xdb,0x7d,0x38,0x8f,0xdd,0xc1,0x7b,
    0x52,0x41,0xbf,0xfb,0x02,0x5a,0xce,0xac,0xaa,0x60,0x79,0x2f,0x47,0x79,0xff,0x16,
    0xe2,0xef,0x0c,0x8c,0x6a,0x99,0x57,0x8b,0xb8,0xbb,0x1d,0xc4,0xd4,0x81,0x9f,0x08,
    0x31,0x66,0x2f,0x61,0x5f,0x5d,0xbc,0x37,0xe9,0xc8,0x7f,0x89,0xc4,0x2f,0xa3,0x26,
    0xf3,0x2d,0xc5,0xb6,0xfc,0x76,0xc7,0x6f,0x27,0x7f,0x3d,0xf1,0xfe,0x5e,0x1a,0xfe,
    0x53,0x88,0x59,0x21,0xf3,0xd0,0xee,0xfd,0x6f,0x21,0xc7,0x1a,0x78,0xff,0x19,0xe2,
    0x7d,0x2e,0xae,0x41,0xc7,0xd5,0xe4,0x36,0x1d,0xee,0x42,0xbb,0x95,0xe4,0x2e,0x64,
    0x5e,0x1a,0x3e,0x85,0x7d,0x0f,0x98,0xef,0x59,0x2b,0x7b,0x8c,0xef,0x5a,0x62,0xfe,
    0x08,0xb9,0xfd,0x8c,0x35,0xc2,0x7f,0x1d,0xfc,0x1b,0x84,0xff,0xbd,0xe0,0xce,0xbf,
    0x11,0xcc,0xf9,0x37,0x09,0x7f,0xf3,0xad,0x67,0x3e,0x5b,0xee,0xf5,0xc2,0xe5,0x3e,
    0xb8,0x6c,0x10,0xfe,0xf7,0x83,0x3b,0xff,0x66,0x30,0xdf,0xd3,0x22,0x7b,0x8c,0x7f,
    0x0b,0x31,0xc6,0xdf,0xcf,0x68,0x12,0xfe,0x0f,0xc0,0x7f,0xa3,0xf0,0x6f,0x05,0x77,
    0xfe,0x0f,0x82,0x39,0xff,0x36,0xe1,0x6f,0xbe,0x4d,0xf1,0xee,0x65,0x73,0x6f,0x92,
    0xbe,0xb7,0xc3,0xc5,0xee,0x5d,0xf6,0x3e,0x66,0xb1,0x76,0x99,0x1f,0x7e,0x27,0x3a,
    0xe0,0xe8,0x79,0xda,0xc8,0x63,0x33,0xe5,0x51,0xe6,0x89,0xdf,0xc9,0xc7,0xe0,0xdc,
    0x25,0x67,0x6d,0x05,0x77,0xbb,0x9b,0xb3,0x8f,0x71,0x47,0xb7,0x11,0xd3,0x4d,0x1e,
    0x9b,0x39,0xbd,0xe4,0xe9,0x11,0x7d,0xb7,0x83,0x0f,0x85,0x5d,0x36,0x03,0x9f,0xe0,
    0xfc,0x6d,0xbc,0xdf,0xdb,0xe1,0xbc,0x19,0x9f,0xeb,0xf8,0x24,0xb9,0xfa,0x44,0xc7,
    0xa7,0xc0,0x5d,0xc7,0xa7,0xc1,0x5c,0xc7,0x01,0xd1,0xd1,0x7c,0xfd,0xf1,0xdc,0x6c,
    0xfd,0xfd,0xd2,0xd3,0x67,0x78,0xe7,0x07,0x85,0xe7,0xb3,0xe0,0x1d,0xcc,0xf0,0x1d,
    0xc4,0xf4,0x85,0x89,0x61,0xf3,0xf1,0x79,0xb0,0x1d,0xf2,0x8e,0xa7,0x22,0x9f,0xc2,
    0xe8,0xdf,0x49,0x0e,0x5f,0x27,0xc3,0x59,0x86,0xef,0x62,0xef,0x4e,0xc9,0xfd,0xc2,
    0x7c,0xee,0xe2,0x68,0xef,0x06,0xdb,0xc5,0x1c,0x2b,0x90,0x79,0xec,0xda,0xec,0xa6,
    0x9f,0x03,0xd4,0x33,0x24,0x5a,0xed,0x45,0xab,0x3d,0xa2,0xd5,0x8b,0xe0,0xae,0xd5,
    0x4b,0x60,0xae,0xd5,0x3e,0xd1,0xca,0x7c,0xc3,0x61,0xed,0x23,0xf7,0xb0,0x68,0xf5,
    0xf2,0x2d,0xb4,0x7a,0x05,0xfc,0x67,0x72,0xbf,0x0a,0xd6,0x05,0x47,0xcf,0x63,0xcf,
    0x5f,0x43,0xdf,0x2d,0x66,0x3f,0x1c,0x86,0x88,0x1f,0x86,0xc7,0x88,0xf0,0xb0,0x98,
    0x03,0x61,0x8d,0xb0,0xff,0x80,0xf0,0x78,0xed,0x16,0x3c,0x0e,0x82,0xbb,0xae,0xa3,
    0x39,0x3d,0x7b,0x1d,0x6c,0xf4,0x5f,0x7a,0x76,0x88,0x1c,0xbe,0x4e,0xd3,0xb3,0xc3,
    0xec,0x3d,0x24,0xb9,0xdf,0xc8,0xe9,0xd9,0x18,0xd8,0xe1,0xff,0xe8,0xd9,0x18,0x7a,
    0x78,0x3d,0x23,0x39,0x3d,0x1c,0x90,0xfc,0x6f,0x91,0xff,0x08,0xdf,0xdb,0xb7,0xc1,
    0x2c,0xd7,0x04,0xb6,0xf7,0xfb,0x1d,0xfa,0x3d,0x29,0xfd,0x7e,0x17,0xdc,0xfb,0x7d,
    0x04,0xcc,0xfb,0x3d,0x25,0x3a,0x9b,0xef,0x68,0xbc,0xa3,0x59,0x1e,0x47,0xc9,0x33,
    0x1e,0xdf,0xef,0xec,0xf7,0xcf,0x66,0x8c,0x7d,0xc7,0x8f,0x83,0x1d,0x93,0xef,0xab,
    0xc7,0x9e,0x98,0x8f,0x2d,0x8e,0xf6,0xfb,0x60,0xc7,0x45,0x93,0x94,0x68,0x32,0x41,
    0x8c,0x69,0x30,0xc5,0xd9,0x27,0xa5,0xae,0x0f,0xa8,0xeb,0x94,0xd4,0x75,0x1a,0xdc,
    0xeb,0xfa,0x10,0xcc,0xeb,0x9a,0x96,0xba,0xcc,0x77,0x26,0xac,0x73,0xe4,0x3e,0x43,
    0x6e,0xfb,0x7f,0xe3,0x63,0xb8,0x0e,0x4a,0xee,0x4f,0xc0,0x3d,0xe6,0x2c,0x31,0xfe,
    0xad,0x3a,0x4b,0x8c,0xf1,0x9d,0x26,0xe7,0x39,0x99,0x77,0x9f,0xc2,0xf7,0x82,0xdc,
    0xc9,0xcf,0xc0,0x6d,0xff,0x79,0x6c,0xf7,0x7d,0xce,0xff,0x12,0xbf,0x84,0xfd,0x66,
    0x7f,0x01,0xd6,0x23,0xf5,0x7d,0x09,0xde,0x45,0x7d,0x33,0x52,0x9f,0xf9,0x2e,0x86,
    0x35,0x03,0x97,0x8b,0xc2,0xfd,0x12,0xdc,0xfd,0x3b,0x75,0x89,0x3a,0x8c,0xbb,0xc7,
    0xcf,0x08,0x97,0xaf,0x72,0xb8,0x7c,0x0d,0x56,0x2f,0x5c,0xbe,0x01,0x77,0x2e,0xb3,
    0xc2,0xc5,0x7c,0x97,0xc3,0x9a,0x25,0xf7,0x65,0xe1,0x72,0x15,0x2e,0x57,0xe0,0x72,
    0x55,0xb8,0x78,0xfc,0xac,0x70,0xf9,0x36,0x87,0xcb,0x77,0x60,0x93,0xc2,0xe5,0x7b,
    0x70,0xe7,0x32,0x27,0x5c,0xcc,0x77,0x2d,0xac,0x39,0x72,0x5f,0x13,0x2e,0xd7,0xa5,
    0xef,0xc6,0xe5,0x3a,0x1a,0x19,0x17,0x8f,0x9f,0xcb,0xe9,0xf1,0x74,0xce,0x1d,0x9d,
    0x92,0x3b,0xff,0x03,0xf9,0x2c,0xd7,0x4d,0xec,0xbf,0xc2,0x64,0x69,0x0d,0xeb,0x6f,
    0xc2,0x9e,0xaa,0x41,0x64,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
