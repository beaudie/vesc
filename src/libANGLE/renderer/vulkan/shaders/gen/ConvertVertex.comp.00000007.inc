// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x79,0x94,0x8f,0x65,
    0x14,0xc7,0xdf,0xf7,0x37,0x63,0x66,0x8c,0x75,0x0c,0x63,0x1b,0x63,0xa6,0x09,0x63,
    0xc9,0x4c,0xa2,0x2c,0xe9,0x20,0x91,0x92,0x8a,0x70,0x48,0x21,0xd3,0x42,0x91,0xf6,
    0xd2,0x24,0x21,0x91,0x25,0x95,0xa5,0xa8,0x50,0x24,0x4b,0x65,0x2b,0x49,0xdb,0x29,
    0xa9,0x90,0x36,0x2d,0x52,0x9c,0x43,0xa2,0x4d,0xbb,0xa4,0xd0,0x73,0xdf,0xf7,0x73,
    0x9b,0xeb,0x69,0xfe,0xea,0x77,0xce,0x7b,0x7e,0xef,0xfd,0xde,0xf5,0xf9,0x3e,0xf7,
    0x59,0x7e,0xbf,0xa4,0x44,0x7e,0x6a,0x90,0x14,0x06,0xe9,0x41,0x5a,0xd0,0x34,0x0c,
    0xa2,0x4f,0x46,0x90,0x08,0xe4,0xb5,0x42,0x90,0x12,0x7d,0x77,0xed,0xde,0xab,0x7b,
    0xf3,0x1b,0x6e,0x2c,0x6e,0xde,0xb2,0x55,0x91,0xe8,0x2b,0x07,0x49,0x91,0x9d,0xe8,
    0xaa,0x38,0x9b,0x72,0xee,0x3b,0xd9,0x3d,0xc3,0x07,0x0f,0x1d,0x21,0xf8,0x7e,0xf7,
    0x54,0x75,0x78,0x72,0x14,0x2b,0x08,0x3a,0x60,0x2b,0xcf,0xd9,0xce,0xba,0x41,0x9c,
    0x26,0xc8,0xe7,0x5b,0xb1,0x10,0x2c,0xd9,0x60,0x09,0xb0,0x34,0x83,0x25,0x81,0x55,
    0x34,0x58,0x32,0x58,0x55,0x83,0x95,0x03,0xab,0x6e,0xb0,0x14,0xb0,0x5a,0x06,0x4b,
    0x05,0xcb,0x36,0x58,0x1a,0x58,0xae,0xc1,0xca,0x83,0x9d,0x68,0xb0,0x74,0xb0,0x02,
    0x83,0x55,0x00,0x6b,0x66,0xb0,0x8a,0x60,0x45,0x06,0xab,0x04,0xd6,0xd2,0x60,0x95,
    0xc1,0x5a,0x0b,0xef,0x6e,0xa4,0xca,0x41,0x57,0x37,0xc2,0x41,0xd4,0xaf,0xfc,0x0c,
    0xf6,0x78,0x14,0xfb,0xc1,0xc6,0x7e,0x88,0xfb,0x3e,0xe1,0x5f,0x5d,0x2c,0xe7,0xc1,
    0xb3,0xc8,0xbb,0xbd,0x78,0x7b,0xca,0x88,0xb7,0xc7,0xc4,0xdb,0xeb,0xc5,0xdb,0x4b,
    0x3c,0x95,0xf7,0x33,0xf6,0x6c,0xe4,0x26,0x61,0x2c,0xd7,0x76,0x4f,0xa6,0x8b,0x92,
    0x88,0xec,0x93,0xa2,0xf9,0x93,0xf7,0x1a,0xce,0x26,0x05,0x8e,0x83,0xe8,0x3b,0x39,
    0x9a,0x8b,0x54,0xea,0xca,0x73,0x35,0xa5,0xf1,0xae,0x78,0x96,0xf3,0xce,0xc0,0x27,
    0xcf,0xd9,0x57,0xa3,0xc7,0x52,0xf1,0xcf,0xe2,0x3d,0x03,0x7d,0x4d,0xde,0xb3,0x88,
    0x57,0xd7,0xc4,0xcb,0xc2,0x26,0x97,0x7a,0x04,0xcb,0x71,0xd6,0xda,0x27,0xff,0xf7,
    0x91,0x3a,0x1a,0xd2,0x2f,0x12,0xab,0x1d,0x72,0x23,0x30,0x19,0x77,0x01,0x63,0x90,
    0xb9,0x68,0x8a,0xdc,0xd8,0xf8,0x37,0xc1,0x36,0x05,0xbd,0x7c,0x17,0x32,0x57,0x6a,
    0xdf,0x82,0xba,0x55,0xdf,0x8e,0xbe,0x55,0x7d,0x27,0x4f,0xee,0x8e,0x7f,0x75,0xe7,
    0x75,0xbe,0xf1,0xeb,0xc9,0x9a,0x12,0x59,0xb8,0xea,0xcb,0x7c,0xd4,0x73,0xa8,0xf6,
    0x5c,0x0e,0xbd,0x35,0x88,0xfa,0x2e,0xa3,0xa7,0x07,0x33,0x3e,0x91,0x87,0x80,0x69,
    0xbe,0x62,0x33,0xaf,0x57,0xa2,0x4b,0x31,0xfa,0x61,0xac,0x01,0xad,0x63,0x38,0xf6,
    0xaa,0xbf,0x91,0xf5,0xa5,0xf2,0x28,0x53,0xa7,0xc8,0xb7,0xbb,0xe7,0x58,0x52,0xa9,
    0x3c,0x9a,0xf5,0xa3,0xf1,0xee,0x36,0xfe,0x22,0x4f,0xf7,0xf8,0x9a,0xcb,0x1c,0x48,
    0x7d,0x8f,0x31,0xff,0x05,0x26,0xfe,0xe3,0x12,0xdf,0x7d,0x54,0x5e,0xe8,0xcd,0xd7,
    0x1a,0x6f,0xbc,0x1b,0x99,0x33,0x8d,0xbf,0xd5,0xb3,0xff,0x80,0xfd,0xa9,0xa6,0x93,
    0x3f,0xa1,0x2f,0x13,0xf0,0xbc,0xdb,0xf0,0x2c,0x6b,0x6e,0x37,0x75,0x7d,0x45,0x8e,
    0x3d,0xf0,0x2c,0xf2,0x5e,0x30,0x89,0xf3,0x35,0x7e,0x49,0xd8,0xef,0x23,0xe7,0xd7,
    0xd8,0xef,0x63,0x3f,0x0e,0xd1,0x7f,0xc3,0xbb,0x9d,0x87,0x04,0xeb,0x54,0xeb,0x6e,
    0x1c,0xc6,0x7b,0x76,0x33,0x27,0x49,0x1c,0x59,0xc7,0x82,0x6d,0x65,0x4c,0xa7,0xba,
    0x75,0x94,0xa0,0x97,0x02,0x72,0x1f,0x72,0x48,0x39,0x72,0x0a,0x8f,0x87,0xe1,0x53,
    0xe5,0xbf,0x3c,0x39,0x25,0x2c,0x95,0x65,0x1d,0xd6,0x08,0x8f,0xd7,0x67,0x79,0xfa,
    0xda,0x9e,0x5c,0xc7,0xb3,0xaf,0xe7,0xe9,0xeb,0x7b,0xfa,0x86,0xc8,0x1d,0x5d,0x95,
    0xc2,0xc1,0x2f,0xf0,0x22,0x3d,0xd7,0x9e,0x71,0xff,0x0a,0x2e,0x36,0xb2,0xfe,0x7e,
    0x63,0xcd,0x16,0x1b,0x9b,0xdf,0xc1,0x9f,0x71,0x36,0xb2,0x86,0x0e,0xe2,0x27,0xf8,
    0x1f,0x8e,0x89,0x43,0x70,0x72,0xd8,0xd9,0x1f,0x8c,0xb0,0x20,0xc2,0x84,0x1f,0x79,
    0x3f,0xe2,0xd8,0x97,0x77,0xc1,0xce,0x70,0xf6,0x87,0xa9,0x41,0xde,0xff,0xe2,0xfd,
    0x4f,0xa7,0xff,0x1b,0x9f,0xbf,0xa3,0x1c,0xc9,0xc1,0x51,0xe9,0x45,0x62,0x8b,0x5e,
    0x26,0xf1,0x10,0xdf,0x5a,0x5b,0x18,0xc6,0x3c,0x6b,0xfd,0xee,0x58,0x8f,0xea,0x4f,
    0x18,0x9b,0xe4,0x30,0xc6,0x57,0x50,0x7f,0xb9,0x30,0xf6,0x13,0x5c,0x6a,0x16,0xf9,
    0x88,0xc3,0x8f,0x92,0xff,0x88,0xe1,0x2c,0x35,0xfc,0x2f,0x67,0x69,0x61,0x8c,0x6b,
    0xce,0xf2,0x65,0xe4,0x4c,0x0f,0x63,0x7c,0xbc,0xb3,0x11,0xb9,0x42,0x18,0xfb,0xa5,
    0x1b,0x9b,0x8a,0xd4,0x3e,0x06,0x9b,0x4a,0x61,0x6c,0x27,0xb8,0x70,0x23,0xfd,0x52,
    0xc9,0xd8,0x57,0x0e,0xe3,0x1e,0xd2,0xbc,0x55,0xc8,0xbb,0xd0,0xd4,0x56,0x35,0x8c,
    0x71,0x9d,0xab,0x8c,0x30,0xf6,0x13,0x5c,0xe6,0x2a,0x33,0x2c,0x9d,0x2b,0xd1,0x55,
    0x73,0x4f,0x26,0xbc,0xca,0xbb,0xf0,0xac,0x3c,0x64,0x9a,0xdc,0x35,0xc9,0x2d,0x75,
    0x49,0x9f,0x8a,0xdc,0xc6,0xe5,0x90,0xf5,0x5c,0x2b,0x8c,0xef,0x1b,0x59,0xe8,0xa5,
    0xaf,0x6b,0xe1,0x2b,0xfa,0xba,0x61,0xdc,0xeb,0xa2,0x93,0x1e,0xae,0x6b,0x7c,0xb3,
    0xc3,0xf8,0xac,0xac,0x83,0x5e,0x7a,0x3e,0xdb,0xe4,0xcd,0x31,0x79,0xa5,0xdf,0x73,
    0x4c,0xdc,0xdc,0x30,0x5e,0x23,0xa2,0x93,0xde,0xcf,0x8d,0xe2,0xa6,0xc4,0xe7,0xa8,
    0xd8,0xb2,0x46,0xea,0x9b,0x78,0x27,0x84,0xf1,0x3a,0x7d,0x13,0xce,0xf3,0xc3,0x18,
    0xcb,0x0b,0x4b,0x7b,0x33,0x1f,0x1e,0x8e,0xc1,0xc3,0x31,0xc3,0xef,0x89,0xde,0x9c,
    0x35,0x08,0x63,0x6c,0xa1,0xe9,0xe7,0x06,0xe1,0xf1,0xfd,0x7c,0xd4,0xf8,0x37,0x22,
    0xbf,0xd8,0xca,0xfa,0x6c,0x04,0x17,0xb2,0xb7,0x14,0x84,0xf1,0x5d,0xa3,0x61,0x18,
    0xaf,0x99,0xd6,0xee,0x39,0x55,0xfb,0x87,0x75,0x20,0x67,0xdb,0x69,0xce,0x37,0x95,
    0x7d,0x57,0xdf,0xd3,0xc9,0x55,0xd1,0xd6,0x8a,0x8d,0xf6,0x4b,0x53,0xd6,0x76,0x63,
    0x63,0xd3,0x0c,0x5c,0xfb,0xf4,0x24,0xfc,0x9a,0x19,0x9b,0xe6,0xc4,0x57,0x9b,0x22,
    0xb0,0x42,0xc3,0xc3,0xc9,0xf8,0x16,0x99,0x7c,0xa7,0x90,0xaf,0x85,0x89,0xd5,0x12,
    0x5c,0xfd,0x5a,0xe1,0xdb,0x32,0x5a,0x7f,0x89,0x48,0xb6,0xe3,0xae,0x52,0xc6,0xb8,
    0x2b,0x99,0xf7,0xca,0x8c,0xbb,0xaa,0xd9,0xf7,0x5a,0xb3,0xef,0x6a,0xce,0x36,0xf8,
    0x4c,0x22,0x66,0x5b,0xb0,0x42,0x33,0xa6,0xd3,0xc1,0xdb,0x31,0x37,0xad,0xc1,0x34,
    0x46,0x7b,0xe2,0x4a,0x8d,0xed,0x4d,0x8d,0x19,0xdc,0xb5,0xe5,0x53,0xcd,0xd4,0x95,
    0x49,0x5d,0x35,0x4c,0x5d,0x1d,0xbc,0xf3,0xa0,0x8b,0x27,0xf7,0xf3,0xe4,0xfe,0x9e,
    0x3c,0xc0,0x93,0x07,0x7a,0xf2,0x75,0x9e,0x7c,0x8b,0x27,0x8f,0xf7,0xe4,0xc9,0x9e,
    0x3c,0xdb,0x93,0x1f,0x36,0xb2,0xdc,0x15,0xe6,0x79,0xfa,0xd5,0xc1,0xf1,0xe7,0xcf,
    0xcb,0x1e,0xef,0x1d,0xe1,0x41,0xfb,0xe1,0x4c,0xfa,0xa1,0x93,0xb1,0xe9,0x0c,0x3e,
    0x81,0x79,0x38,0x0b,0xbf,0xce,0xcc,0x43,0x07,0x30,0xb5,0xef,0xea,0xc5,0x3c,0xbb,
    0x8c,0x98,0xdd,0xc0,0x75,0xbe,0xcf,0xc1,0xaf,0x1b,0x31,0xbb,0x80,0xa9,0xfd,0xb9,
    0xcc,0x85,0xc6,0x3c,0x8f,0x98,0xdd,0x8d,0x4d,0x0f,0x70,0xdd,0x57,0x2f,0xc0,0xaf,
    0x87,0xb1,0xb9,0x90,0x38,0x7a,0xce,0xf4,0x02,0x93,0xbb,0xe6,0x62,0xb0,0x8b,0xf0,
    0xed,0xc5,0xd9,0xd9,0xc7,0x9c,0x9d,0xa2,0xeb,0xed,0x9e,0x3e,0xf4,0x4e,0x6f,0xfa,
    0xad,0x2f,0x72,0x1f,0x93,0xeb,0x62,0xfa,0x49,0xc6,0xd3,0x1f,0x59,0x75,0x97,0x50,
    0x87,0xe8,0x06,0x20,0xeb,0xbe,0x78,0x29,0x7b,0x49,0x7f,0xfa,0x49,0x6c,0xfa,0x81,
    0xab,0xff,0xe5,0xf4,0xa2,0xce,0xc9,0x15,0x60,0x85,0x11,0x47,0x29,0xd1,0xbd,0xf6,
    0x2a,0xee,0xbe,0xc5,0xe8,0xd5,0x77,0x28,0x3a,0x89,0x3b,0x10,0x59,0x79,0xbd,0x1a,
    0x5e,0x87,0x19,0xfb,0x6b,0xc0,0x97,0xc1,0xcf,0x08,0xb0,0xe1,0xf0,0x33,0xd2,0xf0,
    0x23,0xba,0x6b,0xdd,0x33,0x0b,0x3e,0xae,0x35,0x71,0xae,0x67,0xcc,0x4b,0x89,0x73,
    0x03,0x98,0x70,0xbf,0xc4,0x59,0xc8,0x9d,0xef,0x26,0xf0,0x16,0xdc,0xb3,0x4b,0xf0,
    0xbd,0x19,0x9d,0xd4,0x7c,0x1d,0xb2,0xc6,0xbd,0xd5,0x8b,0x7b,0x1b,0x98,0x8d,0x5b,
    0x02,0x3e,0x8a,0xfb,0xb9,0xc6,0xbd,0x03,0x9d,0xc4,0xbd,0x05,0x59,0xb9,0xb8,0x13,
    0x2e,0x46,0x9b,0x5c,0x63,0xc0,0x95,0x8b,0xbb,0xc0,0x94,0x8b,0x71,0x86,0x0b,0xd1,
    0x8d,0x75,0xcf,0x44,0xb8,0x18,0x6b,0xe2,0x4c,0xa0,0x66,0xdd,0xdb,0xee,0xe1,0x77,
    0xc1,0x04,0x6a,0x19,0x0f,0x26,0x67,0xd4,0x38,0xfc,0x27,0x1a,0xff,0x49,0xde,0x98,
    0xef,0x05,0xeb,0x49,0x1d,0x53,0x4d,0x1d,0xa2,0x9b,0xe2,0x9e,0x69,0xc4,0x99,0x42,
    0x8e,0xc9,0xe6,0x5e,0x37,0x15,0xdd,0x34,0x93,0xe3,0x3e,0xf6,0x2b,0x95,0xef,0x27,
    0xe7,0x58,0x6a,0x7e,0x80,0xdf,0x2e,0xf7,0x9b,0x71,0x3c,0x88,0xdf,0x03,0xe6,0xfc,
    0x98,0x01,0x3e,0xdd,0xe4,0x9d,0xe1,0xe5,0x9d,0x6a,0xf2,0xcc,0x64,0xdf,0x53,0x1e,
    0x66,0x7a,0x3c,0x8c,0x43,0x1e,0x89,0x3c,0xcb,0xf8,0x3e,0xc4,0xba,0x10,0xdf,0xd9,
    0xc8,0xf2,0xfe,0x30,0x6b,0x43,0xd7,0xd8,0x1c,0xce,0xad,0xd9,0xec,0xa1,0x9a,0x6b,
    0x8e,0xe9,0xb1,0xb9,0x26,0xee,0x23,0x70,0xa1,0x7c,0x3f,0x0a,0x36,0x17,0xbe,0x17,
    0x18,0xbe,0x45,0x37,0xdf,0x3d,0x4f,0x50,0xdf,0x7c,0x62,0xce,0xe3,0xb7,0x9b,0xd4,
    0xbe,0x00,0xdd,0x13,0x26,0xc7,0x22,0x72,0x6c,0x70,0x39,0xa4,0x67,0x9f,0xe4,0xde,
    0xb8,0x08,0xce,0x0b,0xa2,0x3d,0xaa,0x14,0xd7,0x98,0x8b,0xbd,0x98,0x0b,0x88,0x29,
    0xf6,0x4f,0x71,0x26,0x68,0xbf,0x2f,0x01,0xd3,0x7e,0x5f,0xe2,0x71,0x39,0xd2,0xd4,
    0xb3,0xd4,0xdb,0x73,0x97,0x95,0xb1,0xe7,0x2e,0x07,0xd7,0x3d,0xf7,0x69,0xfc,0x96,
    0x1b,0x9b,0x67,0xbc,0x5e,0x7d,0x16,0xcc,0xee,0xb9,0x2b,0xf0,0x7d,0x16,0x3e,0x57,
    0x19,0x3e,0x45,0xb7,0xd2,0x3d,0x6b,0xa9,0x71,0xa5,0xa9,0xe9,0x39,0x6a,0x5a,0x63,
    0xf2,0x3d,0x0f,0x2e,0x63,0x5c,0x8d,0x2c,0x63,0x5c,0x85,0xff,0x5a,0x63,0xfb,0x02,
    0x67,0xb4,0xca,0xeb,0x38,0x83,0x5f,0xa7,0x77,0x5f,0xc4,0x66,0x9d,0xb1,0x59,0xcf,
    0xb9,0xfd,0x16,0x36,0x2f,0x61,0xb7,0xde,0xe4,0x7c,0xc9,0xcb,0xb9,0xca,0xf8,0xbf,
    0xc2,0xb9,0x5c,0xc2,0x1d,0xf9,0x55,0x30,0xf1,0x7d,0x19,0x59,0xef,0xcf,0xaf,0x71,
    0x66,0xcb,0x19,0xf3,0x9a,0x77,0xa7,0xa9,0x0d,0x47,0x35,0xb9,0xd3,0x64,0xf1,0xff,
    0xa1,0xe4,0xab,0x63,0x62,0xbc,0x01,0x2e,0x31,0xde,0xf0,0xee,0x6e,0x39,0xc4,0xa8,
    0x6b,0xee,0x45,0xd9,0x26,0x5e,0x3d,0xe2,0xd5,0x37,0x77,0x8a,0x2d,0xde,0x1d,0x63,
    0x5b,0x50,0xfa,0x1b,0xb6,0x49,0xc4,0x4b,0x3c,0x27,0x1b,0xcd,0x98,0xdf,0x06,0xd7,
    0x1e,0x78,0x07,0x6c,0x3a,0xf3,0xbd,0xd9,0xcc,0xb7,0xe8,0x36,0xb9,0x67,0x07,0xb9,
    0x37,0x99,0x38,0xef,0x52,0x9f,0x72,0xff,0x1e,0xd8,0x56,0x13,0xfb,0x7d,0xf0,0xe1,
    0x66,0xff,0xff,0x10,0xbc,0x98,0xff,0x3b,0x74,0x3d,0x7c,0x84,0x4e,0xb8,0xdf,0x82,
    0xac,0xbc,0x7d,0xcc,0xf8,0x2f,0x70,0x71,0xe5,0x7f,0x91,0x4f,0xc1,0xfa,0x46,0xff,
    0x73,0xc4,0xfb,0xc8,0x67,0xfc,0x6f,0xd1,0x16,0xbd,0xd6,0xb9,0x1d,0x9e,0x36,0x50,
    0xe7,0xe7,0xd8,0x6e,0x27,0xd7,0x36,0x30,0xe9,0x91,0xcd,0x8c,0x73,0x87,0xc9,0xfd,
    0x05,0xb9,0x4b,0x58,0xc7,0x5f,0x82,0x69,0xdd,0x3b,0xc1,0x34,0xd6,0x4e,0x2f,0xd6,
    0x66,0x53,0xcb,0x2e,0xe6,0x48,0xe6,0x7f,0x97,0x99,0xff,0x84,0xf9,0xdf,0x34,0xd7,
    0xcc,0x7f,0x1e,0x31,0xf2,0xcd,0x6f,0xec,0x6f,0xcb,0xf8,0x5f,0xe2,0x3b,0x70,0x9d,
    0xf7,0xef,0x99,0xf7,0x51,0xc6,0xe6,0x07,0x70,0xbd,0xa7,0x1c,0x00,0xb3,0xbf,0x4b,
    0x7e,0x24,0xd6,0x01,0xe3,0xf7,0x13,0x75,0xe8,0x5d,0xe6,0x67,0xfe,0x5f,0x2a,0xc6,
    0x5e,0xc6,0xfd,0x33,0x76,0xfa,0x3b,0xec,0x1f,0xbc,0x1d,0x00,0xe7,0x34,0x18,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * 4 + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, 4);
//         valueBits = 4 * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           float value = uintBitsToFloat(valueAsUint);
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
