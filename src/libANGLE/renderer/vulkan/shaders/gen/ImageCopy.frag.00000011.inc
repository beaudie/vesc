// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000011.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000011[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x89,0x53,0xd5,0x55,
    0x14,0xc7,0x7f,0xbc,0x07,0xef,0x09,0x6e,0x98,0xa4,0x66,0xda,0x80,0x18,0x59,0x18,
    0x5a,0x21,0xae,0x4f,0x53,0x4b,0xa4,0x04,0x52,0x24,0xcd,0x2c,0xa3,0x2c,0x25,0x93,
    0x12,0x2c,0xa9,0xdc,0xcd,0xc4,0xcc,0x4c,0xad,0xb4,0x2c,0x29,0xd3,0x34,0x49,0xb3,
    0x72,0x4b,0x2d,0x2d,0xb7,0x16,0xb1,0x72,0x29,0xb7,0xfa,0x2f,0x9a,0x96,0x99,0x96,
    0x7b,0x2e,0x9f,0xc3,0x9c,0xf9,0x8d,0x53,0xcc,0xdc,0xf9,0xbd,0xf3,0x3d,0xe7,0x7e,
    0xef,0xf7,0x9c,0x73,0xef,0xfd,0xbd,0x47,0x34,0x92,0x1d,0x0f,0xa2,0x49,0x41,0x5a,
    0xd0,0x22,0xf8,0x25,0x68,0xfa,0x6b,0x17,0x44,0x82,0x24,0xf7,0x6c,0x19,0xc4,0xfc,
    0xb3,0x70,0x54,0xd9,0xa8,0xbc,0x9a,0x99,0x93,0xf3,0xf2,0xfb,0xf4,0x16,0x7f,0x9b,
    0x20,0xea,0xe3,0xc4,0xd7,0x36,0x88,0x07,0xc9,0xee,0x29,0x63,0x7a,0x45,0x65,0x95,
    0xe0,0x39,0x6e,0x5c,0x72,0x23,0xdd,0xc5,0x09,0x1e,0x17,0x0e,0xf7,0x29,0xc7,0x73,
    0xca,0x9c,0x20,0x18,0x19,0xa4,0x04,0x3d,0x59,0x2f,0x9b,0xa7,0x62,0x49,0x60,0x2d,
    0x0c,0x16,0x01,0x4b,0x37,0x58,0x14,0x2c,0xc3,0x60,0xc9,0x60,0x9d,0x0c,0x96,0x02,
    0xd6,0xc5,0x60,0x31,0xb0,0x4c,0x83,0xc5,0xc1,0xba,0x1b,0xac,0x05,0x58,0x0f,0x83,
    0xa5,0x82,0xf5,0x34,0x58,0x1a,0x58,0x6f,0x83,0xb5,0x04,0xcb,0x37,0x58,0x2b,0xb0,
    0x7e,0x06,0x6b,0x0d,0x36,0xc8,0xd7,0x29,0xda,0x9c,0xaf,0xd4,0x6c,0x82,0x7b,0x76,
    0xa3,0x3e,0x6a,0x67,0x19,0x5b,0xea,0x7c,0x0d,0x76,0x7b,0x37,0x2b,0xe2,0xfd,0x51,
    0x5f,0x1b,0xf9,0xdc,0xc1,0x7d,0x8a,0x91,0x67,0xa6,0x8b,0x8f,0x93,0x67,0xcc,0xc7,
    0x25,0xfb,0xfc,0x62,0x60,0xb9,0xce,0x8e,0xa1,0xa7,0x4b,0x5e,0xf1,0xc0,0x0c,0xc7,
    0xd0,0xc6,0xe0,0xed,0xdd,0x18,0xb3,0xb7,0x64,0xa8,0xda,0x52,0xe3,0xf2,0xf2,0xb3,
    0x83,0xd5,0xee,0xec,0x46,0x22,0x6d,0xc9,0x10,0xb5,0xa5,0xde,0xdb,0x0b,0x2b,0x12,
    0x57,0x3a,0x3b,0x13,0x0d,0xd2,0xdb,0x8e,0xce,0xce,0xc2,0x8e,0xa0,0xab,0x1b,0x1a,
    0xb2,0xf0,0x77,0x47,0x57,0x32,0xfe,0x6b,0x99,0x2b,0xf8,0x40,0xec,0x1c,0xc3,0x77,
    0x1d,0xf1,0xc2,0x27,0xeb,0xe5,0xc2,0x1f,0xf8,0xfa,0xa4,0xfb,0x9a,0x66,0x31,0x54,
    0x4b,0xee,0xff,0x8c,0xcc,0xe6,0x67,0x72,0x70,0x23,0x7d,0xef,0xc9,0xfa,0x62,0xe7,
    0x81,0xe5,0x92,0x5f,0x2f,0xf4,0x48,0x7c,0x6f,0x7c,0x59,0xc6,0x5f,0x60,0xf2,0xe9,
    0xdb,0x3c,0xb7,0xc9,0x2f,0xcf,0x01,0xe8,0x15,0xff,0x60,0xea,0x91,0x69,0xe6,0x0f,
    0x67,0x2f,0x6b,0x7c,0x11,0xeb,0xa9,0xbf,0x84,0xde,0xc9,0xfc,0xbb,0x99,0x2f,0xf5,
    0xba,0xca,0xad,0x34,0x9e,0xfa,0x24,0xb1,0x46,0xf8,0x29,0x73,0xee,0xe1,0xf3,0x78,
    0x72,0x14,0x7b,0x02,0x98,0xae,0x31,0x31,0x64,0x57,0x70,0x0e,0x65,0xfe,0x83,0xe4,
    0x94,0x49,0x4f,0x1e,0xe6,0x73,0xd4,0xc4,0x57,0xd2,0x23,0xb5,0xa7,0x73,0x76,0x34,
    0xa7,0xb9,0x21,0xff,0x22,0x74,0xab,0x7f,0x29,0x7c,0xc2,0xff,0x22,0x3e,0xcb,0xbf,
    0x3a,0xb4,0x97,0xd7,0x19,0xbd,0x62,0x6f,0xf1,0xd6,0xbc,0xe1,0x32,0xbf,0x01,0x7d,
    0xda,0x93,0x0f,0x98,0xdb,0x60,0xf8,0x76,0x70,0x07,0xa8,0xbd,0x3f,0xd4,0xf3,0x63,
    0x9c,0x69,0x99,0x7f,0x11,0x2d,0x0d,0xd4,0xef,0x22,0xf7,0x60,0xd4,0xf7,0x3e,0xc5,
    0xe7,0x95,0x8c,0x1e,0xc1,0x7e,0x77,0x48,0x0a,0xb1,0xdd,0xb8,0x03,0xe2,0xc6,0xce,
    0x37,0xb6,0xf4,0x73,0x9c,0xb1,0xe5,0x59,0x13,0xb2,0x6b,0x43,0xf6,0x1c,0x63,0x4b,
    0x6e,0xdb,0x8c,0x2d,0xfb,0xeb,0x28,0x76,0x82,0xf3,0xd6,0x83,0x33,0x55,0xea,0x50,
    0x39,0x4f,0xd7,0x83,0xf5,0x30,0x7b,0xa5,0x8a,0xb3,0x7b,0x03,0xfe,0xa1,0x2e,0x03,
    0xd9,0xeb,0x37,0x71,0x1e,0x7a,0xc1,0x27,0x31,0x37,0x83,0x2f,0x74,0x31,0x62,0xdf,
    0xc2,0x3c,0xc1,0x07,0xbb,0x0a,0x64,0x83,0x69,0x7c,0x1f,0x6a,0x20,0xbe,0x7c,0x6c,
    0xe1,0xef,0xcb,0x7d,0x99,0xc7,0x19,0x4a,0xb0,0x17,0xfa,0x83,0x37,0xb8,0x98,0x36,
    0x3e,0xaf,0x26,0x4c,0xce,0xd1,0x6f,0x8e,0x23,0x81,0xee,0x3f,0x5d,0xfc,0x40,0xee,
    0xd7,0x04,0x75,0x1f,0x04,0xb7,0xd4,0x61,0x08,0xb5,0x1e,0x00,0xb7,0xf4,0xf5,0x56,
    0xf0,0xb9,0xd8,0x43,0xc1,0x74,0xce,0x30,0x33,0x47,0xf4,0x0e,0x23,0xe6,0x0f,0xc7,
    0xad,0x6b,0x24,0x8c,0xfe,0xdb,0xd0,0x3f,0xdc,0xe8,0xbf,0x1d,0x5c,0xf5,0x8f,0x00,
    0x53,0xfd,0x23,0x8d,0xfe,0x11,0xfe,0xbe,0x0f,0x3c,0x26,0xdc,0x85,0x46,0xcb,0x1d,
    0x68,0x29,0x32,0xfa,0xef,0x04,0x57,0xfd,0xa3,0xc0,0x74,0x4e,0xb1,0x99,0x23,0xfa,
    0x8b,0x89,0x11,0xfd,0xba,0xc6,0x48,0xa3,0xbf,0x14,0xfd,0x25,0x46,0xff,0x5d,0xe0,
    0xaa,0x7f,0x34,0x98,0xea,0x2f,0x33,0xfa,0xc5,0x37,0xc6,0x8d,0x32,0xb8,0xc7,0x98,
    0xbe,0x8f,0x45,0x8b,0xec,0x3b,0xb1,0xcb,0xc1,0xc6,0x9a,0xfb,0x49,0xf7,0x44,0x39,
    0x1a,0x95,0xa7,0x0c,0x1e,0xb9,0xb3,0xee,0xe5,0xbe,0xd2,0x3d,0x79,0x1f,0x9a,0x27,
    0x9a,0xb5,0xee,0x07,0x57,0x7b,0x12,0x6b,0xcf,0x67,0x8f,0x3e,0x40,0xcc,0x24,0x78,
    0xe4,0x4e,0x7b,0x08,0x9e,0x0a,0x53,0xdf,0xc9,0xe0,0xa3,0x5d,0x8c,0xd8,0x8f,0x30,
    0x37,0x30,0xd8,0x14,0xb0,0x24,0x5f,0x97,0x98,0xbf,0x0f,0xa7,0x12,0x3b,0x05,0x0e,
    0x5d,0xe3,0x51,0xd6,0xa8,0x34,0x6b,0x4c,0x03,0x9f,0xe4,0xea,0x22,0xe7,0xf3,0x31,
    0x72,0x9c,0xca,0x1d,0x39,0x8d,0xba,0x8c,0xc3,0xa7,0xbd,0xaa,0x82,0x6b,0xba,0xe9,
    0xd5,0xe3,0xe0,0xda,0xab,0x27,0xc0,0xb4,0x57,0xd5,0xa6,0x57,0xe2,0x9b,0xe1,0x46,
    0x35,0x35,0x9e,0x01,0xb7,0xdc,0x15,0x33,0xb9,0x87,0xf4,0xac,0xc8,0x9d,0xfa,0x24,
    0xb8,0x68,0xa9,0xc1,0xee,0xef,0xe2,0xc5,0xf7,0x14,0xf7,0x7b,0x8d,0xe1,0x98,0x65,
    0x38,0x64,0xce,0x2c,0xe2,0xd4,0xff,0x34,0xfe,0x22,0xb3,0xc6,0x33,0xe0,0x12,0x5f,
    0x8b,0xad,0x6b,0x3c,0xcb,0x1a,0xb5,0x86,0x63,0xb6,0xe1,0x90,0x39,0xb3,0x89,0x53,
    0xff,0x3c,0xfc,0x73,0xcd,0x1a,0xf3,0xc1,0x25,0x7e,0x0e,0xb6,0xae,0xb1,0x80,0x35,
    0xe6,0x18,0x8e,0x85,0x86,0x43,0xe6,0x2c,0x24,0x4e,0xf6,0xa7,0xd6,0xae,0xda,0xf4,
    0xe5,0x39,0xfa,0xb2,0xc8,0xf4,0x65,0x31,0xb8,0xf6,0xe5,0x79,0x30,0xed,0x4b,0x9d,
    0xe9,0x8b,0xf8,0x96,0xb8,0xb1,0x0a,0xee,0x25,0x46,0xcb,0x0b,0x68,0x59,0x6a,0xf2,
    0x59,0x06,0xae,0xf7,0xfb,0x72,0x62,0x4a,0xdd,0x1b,0x4d,0xde,0x9d,0x2f,0x81,0x2d,
    0x37,0xf7,0x7b,0xc4,0xe3,0x29,0xde,0xbf,0x82,0x98,0x65,0x86,0xe3,0xe5,0x66,0x8e,
    0x54,0x6f,0xaf,0x04,0x5b,0xc1,0xbb,0x2d,0xc5,0xbc,0x93,0x75,0x6f,0xae,0xa4,0x26,
    0x75,0xe8,0x5e,0x65,0x6a,0xf2,0x0a,0x35,0x59,0x6d,0x6a,0xf2,0x2a,0xb8,0xd6,0xe4,
    0x35,0x30,0xad,0xc9,0x5a,0x53,0x13,0xf1,0xad,0x71,0x63,0x2d,0xdc,0x6b,0x4c,0x4d,
    0x5e,0xbf,0x4c,0x4d,0xde,0x00,0xdf,0x07,0xf7,0x9b,0x60,0xeb,0xd0,0xa8,0x3c,0xf2,
    0xfc,0xd5,0xb1,0x48,0xcc,0x5b,0x68,0x58,0x45,0xfc,0x1a,0x74,0xd4,0x1b,0x1d,0x12,
    0xb3,0xde,0x8d,0x7a,0xe6,0xaf,0x37,0x3a,0xde,0xbe,0x8c,0x8e,0x77,0xc0,0xb5,0xae,
    0x1b,0x42,0xbd,0x79,0x17,0x6c,0x43,0xa8,0x37,0x72,0x8f,0x88,0x7f,0x23,0x1c,0x3a,
    0xea,0xe8,0xd9,0x26,0xe6,0x6e,0x34,0xdc,0xef,0x85,0x7a,0xb6,0x19,0x6c,0xd3,0x7f,
    0xf4,0x6c,0x33,0xf5,0xd0,0x7c,0xea,0x43,0x3d,0xac,0x33,0xfc,0xef,0xc3,0x2f,0xfb,
    0x46,0xec,0xad,0x60,0x5b,0x0c,0xdf,0x56,0x13,0xbf,0x9d,0xf8,0x2a,0xbe,0x83,0x7d,
    0x08,0x26,0xb1,0xdb,0xb0,0x75,0x7f,0x7c,0xc4,0xfe,0xd8,0x61,0xf6,0xc7,0xc7,0xe0,
    0xba,0x3f,0x3e,0x01,0xd3,0xfd,0xb1,0xcb,0xf4,0x45,0x7c,0x3b,0x7d,0xbf,0x9b,0x74,
    0xef,0x84,0x47,0xd6,0xdd,0xcd,0x77,0x22,0x7d,0xef,0xec,0x01,0xdb,0x6d,0xbe,0xa3,
    0x69,0xec,0xde,0xe6,0xd8,0x54,0x6f,0x7f,0x0a,0xb6,0xc7,0xd4,0x30,0x62,0x6a,0xb8,
    0x8d,0x18,0xa9,0xd9,0x2e,0xd6,0xde,0x67,0xf2,0x3a,0x40,0x5e,0xfb,0x4d,0x5e,0x9f,
    0x81,0x6b,0x5e,0x9f,0x83,0x69,0x5e,0x87,0x4c,0x5e,0xe2,0x3b,0xe8,0xc6,0x11,0xb8,
    0x0f,0x9a,0x77,0xfb,0x17,0x68,0x5d,0x6a,0xde,0x25,0x5f,0x82,0x6b,0xcc,0x61,0x62,
    0xf4,0x0e,0x3e,0x4c,0x8c,0xe8,0x3d,0x04,0xe7,0x11,0xf3,0x7e,0x3a,0x8e,0xde,0x63,
    0x86,0xf3,0x2b,0x70,0x99,0x7f,0x14,0x5b,0x7d,0x5f,0xf3,0xfd,0xf2,0x38,0xef,0xc2,
    0x6f,0xc0,0x2a,0x4d,0x7e,0xdf,0x82,0x4f,0x24,0xbf,0x46,0x93,0x9f,0xf8,0x4e,0xb8,
    0xd1,0x88,0x96,0x13,0x46,0xfb,0x49,0xb4,0xeb,0xdd,0x7e,0x12,0x0e,0xd1,0xae,0xf1,
    0x8d,0x46,0xcb,0x77,0x21,0x2d,0xdf,0x83,0x15,0x18,0x2d,0x3f,0x80,0xab,0x96,0xd3,
    0x46,0x8b,0xf8,0x4e,0xb9,0x71,0x1a,0xee,0x53,0x46,0xcb,0x19,0xb4,0xe8,0x3b,0xe0,
    0x8c,0xd1,0xa2,0xf1,0xa7,0x8d,0x96,0xb3,0x21,0x2d,0x3f,0x82,0xed,0x30,0x5a,0x7e,
    0x02,0x57,0x2d,0xe7,0x8d,0x16,0xf1,0x9d,0x73,0xe3,0x3c,0xdc,0xe7,0x8c,0x96,0x0b,
    0xa6,0xef,0xa2,0xe5,0x02,0xdf,0xc7,0x45,0x8b,0xc6,0x9f,0x0f,0xf5,0xf8,0x50,0x68,
    0x8f,0xee,0x32,0x7b,0xfe,0x67,0xf8,0x84,0xeb,0x12,0xf6,0x5f,0xee,0x26,0xea,0xe7,
    0x46,0x01,0xef,0xc5,0x34,0xb4,0xc9,0x6f,0xa4,0xbe,0x2e,0x2e,0xce,0xef,0x23,0xe1,
    0x6a,0x69,0xee,0xbb,0x56,0xe0,0x07,0xc8,0xb1,0x2d,0x58,0x6b,0x72,0x6c,0x67,0x72,
    0x6c,0xcb,0xff,0x79,0x3a,0xc0,0x93,0x6e,0x78,0xae,0x80,0x67,0x31,0xeb,0x67,0x80,
    0xc9,0xff,0x26,0xfe,0x76,0xb1,0x19,0xcc,0xe9,0x60,0xe6,0x74,0x64,0x4e,0x2b,0xa7,
    0x2e,0xe6,0x7f,0x0f,0x37,0xdd,0xa7,0x9d,0xf1,0x75,0x32,0x7c,0x57,0xe3,0xef,0xec,
    0xdf,0xd3,0x4d,0x58,0x57,0xf0,0x2e,0xac,0xd1,0x95,0x35,0x44,0xf3,0x3f,0xd4,0xe3,
    0x5f,0xf8,0x44,0xa7,0x3f,0x48,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
