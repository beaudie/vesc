// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000011.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000011[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x97,0xff,0x4f,0x95,0x75,
    0x14,0xc7,0x9f,0xcf,0xbd,0xc0,0x45,0x4c,0xc4,0x61,0x99,0x84,0x05,0x62,0x6a,0x7e,
    0x41,0x52,0xf3,0x4b,0x7a,0x55,0x22,0x05,0x27,0x82,0xc0,0x5c,0x9a,0x51,0x33,0x2d,
    0xd3,0x26,0x7e,0xd7,0x4a,0x97,0xad,0x6c,0x35,0x37,0x2d,0xdd,0x5c,0x2e,0xad,0x64,
    0x59,0xb2,0x4a,0x97,0xcb,0x1f,0xd0,0xd4,0x1f,0xd2,0x52,0xd6,0x9c,0xb5,0x82,0xad,
    0x64,0x2b,0x99,0xfe,0x05,0x4d,0xd3,0xcc,0xec,0x73,0x9e,0xe7,0x75,0xb8,0xa7,0x5b,
    0xc6,0xf6,0xd9,0xf3,0x9c,0xf7,0xf9,0xf6,0x3e,0xe7,0x73,0x3e,0x9f,0xfb,0x10,0x8f,
    0x95,0x24,0x82,0xc0,0x05,0x39,0x41,0x76,0x50,0xef,0x82,0xf0,0xaf,0x4f,0x10,0x0b,
    0x1c,0xcf,0xd1,0xfe,0xd9,0x33,0xc8,0x0a,0xe5,0xca,0xea,0x86,0xea,0xd2,0x35,0x6b,
    0x17,0x97,0x8e,0x7d,0xa8,0x4c,0xec,0x72,0x83,0x78,0x68,0x2f,0xba,0xde,0x41,0x22,
    0xc8,0xf0,0x4f,0x59,0xcb,0x17,0x2e,0x6d,0x12,0x7c,0xb0,0x5f,0x97,0xfd,0xca,0xf3,
    0x76,0x82,0x27,0x24,0x86,0x7f,0x1b,0x1c,0xc6,0x14,0x9f,0x20,0xa8,0x0a,0x32,0x83,
    0x11,0x51,0xda,0xa0,0x84,0xa7,0x62,0x0e,0x2c,0xdb,0x60,0x31,0xb0,0x3c,0x83,0xc5,
    0xc1,0xfa,0x1a,0x2c,0x03,0xec,0x6e,0x83,0x65,0x82,0x15,0x1a,0x2c,0x0b,0xac,0xc8,
    0x60,0x09,0xb0,0x41,0x06,0xcb,0x06,0x1b,0x6a,0xb0,0x1e,0x60,0x23,0x0c,0x96,0x03,
    0x56,0x66,0xb0,0x9e,0x60,0x63,0x0d,0x76,0x07,0xd8,0x04,0x83,0xf5,0x02,0x9b,0x1c,
    0xf6,0x29,0xde,0x5d,0xaf,0xf4,0x6c,0x81,0x7f,0x0e,0xa4,0x3f,0x2a,0x17,0x1b,0x59,
    0xfa,0x7c,0x2f,0x72,0xbe,0xf7,0x8a,0x85,0xfa,0x78,0xd8,0x1b,0x79,0xbf,0xcb,0xbf,
    0x65,0x51,0xe7,0x70,0x6f,0x9f,0x45,0xbe,0xc2,0xd2,0xd9,0x93,0xfa,0x7a,0x8b,0x5c,
    0x83,0xe7,0xfb,0x55,0xdf,0x5a,0x53,0xae,0xb2,0xf4,0x70,0xee,0xdc,0xf6,0x29,0x2a,
    0x17,0xf8,0x95,0xcc,0x79,0x63,0xaa,0xca,0xd2,0xcf,0x43,0x95,0x0b,0x93,0x77,0x7a,
    0xb9,0x88,0x1c,0xb2,0x77,0xfd,0xbc,0x5c,0x8c,0x1c,0x43,0x1e,0x44,0xcf,0x33,0x42,
    0x3c,0x23,0xb8,0x1f,0x5b,0xc1,0x27,0x21,0x0f,0x36,0xfe,0x43,0xb0,0x17,0x7f,0x89,
    0x3f,0x9c,0x78,0x41,0x58,0x6f,0x5e,0xd8,0xa3,0x62,0x56,0x51,0x77,0x7d,0xff,0xbf,
    0x8a,0xba,0x9f,0x19,0xc1,0x48,0xf6,0x71,0x04,0xf9,0x45,0x2e,0x05,0x1b,0x4e,0x3d,
    0xa3,0xe0,0x23,0xf6,0x65,0xe8,0x8a,0x8d,0x7e,0x9c,0xa9,0x67,0x7c,0xb7,0x6f,0xa4,
    0x97,0xe7,0xc3,0xf0,0x55,0xfb,0x0a,0x66,0x51,0xe5,0x1a,0xf6,0xa2,0xbf,0xf7,0x9c,
    0x47,0xbd,0x1c,0xc5,0x7f,0x3d,0xef,0xf1,0xfb,0x38,0xdf,0x3f,0xe7,0x91,0xef,0x71,
    0xf0,0xf9,0xf0,0x17,0x79,0x41,0x5a,0xbe,0xc6,0x34,0x79,0x11,0x67,0x46,0xfc,0x17,
    0xc3,0xb7,0x88,0x7e,0x3f,0x47,0xfe,0x38,0x72,0x13,0xba,0xb8,0xf1,0x5f,0xcd,0x7e,
    0xa8,0xbc,0x81,0xb9,0x57,0x79,0x1b,0x31,0x54,0xde,0xcb,0x99,0xd2,0x79,0xd9,0x6f,
    0xf8,0x88,0x7c,0x38,0x94,0x36,0x57,0x48,0xbe,0x23,0xe4,0xcb,0x30,0xfe,0x47,0x39,
    0x7f,0x2a,0x9f,0x4e,0xdb,0x9f,0xf3,0x9c,0x27,0xa9,0xe7,0x12,0x5c,0x8f,0xd0,0x8f,
    0x4b,0xdc,0x41,0xf1,0x70,0x9f,0x32,0x43,0xde,0x19,0xe4,0x17,0xec,0x9a,0x47,0x64,
    0x2f,0x92,0xcc,0xe6,0x50,0xe6,0xaf,0xd6,0x33,0x96,0xd9,0x7b,0x00,0x6c,0xa8,0xd9,
    0x87,0x26,0xe6,0x7a,0x18,0xfa,0x72,0x1f,0x41,0xe6,0xe2,0x41,0x66,0x67,0x14,0xf1,
    0xc4,0x66,0x34,0xf8,0xab,0xde,0x46,0xe4,0x31,0xf8,0x8d,0xc6,0x6f,0x3c,0x77,0x40,
    0x29,0x73,0x94,0x64,0x66,0x26,0x82,0x7f,0xea,0x6d,0x72,0xc3,0x5a,0x22,0x4c,0x66,
    0xe9,0x77,0xcf,0x3c,0x09,0x9f,0x3f,0xbc,0xfd,0x24,0xee,0x8c,0x24,0xf5,0xc8,0x7b,
    0x9d,0xf7,0x93,0xde,0x4c,0x23,0xa7,0xfc,0xbd,0x4c,0xbf,0xca,0xc1,0xeb,0x7d,0xf7,
    0x85,0xd3,0x10,0x17,0x61,0x6a,0x77,0xdd,0xc7,0xd0,0x58,0xf2,0xbc,0xe2,0x7b,0x21,
    0x76,0xd3,0x5c,0x64,0x93,0x89,0xcf,0x64,0x53,0xc3,0xa3,0xd4,0x50,0x61,0x6a,0x98,
    0x0e,0xae,0x35,0xcc,0x00,0xd3,0x1a,0xaa,0x4c,0x0d,0x33,0xc2,0x7b,0x2c,0x08,0x31,
    0xc9,0x5b,0x69,0x6a,0x98,0x45,0x6e,0x67,0x6a,0xa8,0x06,0xd7,0x1a,0x86,0xb9,0x08,
    0x53,0x3b,0xa9,0x41,0x63,0x55,0x99,0x1a,0xca,0x5d,0x64,0x93,0xc4,0xa7,0xd2,0xd4,
    0x50,0x4b,0x0d,0x35,0xa6,0x86,0x39,0xe0,0x5a,0x43,0x1d,0x98,0xd6,0xd0,0x60,0x6a,
    0xa8,0x0b,0xf9,0x04,0x21,0x26,0x79,0xeb,0x99,0x23,0xc9,0x3b,0x97,0xdc,0xe5,0x2e,
    0x75,0x96,0x85,0xa3,0xda,0x36,0x18,0x8e,0x8f,0x60,0x57,0x85,0x5f,0x3d,0x7c,0xe4,
    0x8c,0x3f,0xc1,0xf9,0xd6,0x99,0x7b,0x12,0xce,0x8d,0x66,0xe6,0x9e,0x02,0x7f,0x85,
    0x99,0x5b,0x08,0x26,0x71,0x57,0x70,0xa7,0x3e,0x0d,0x2e,0x71,0xe4,0x0e,0x78,0x86,
    0x38,0x8b,0x88,0x23,0x3d,0x7e,0x16,0x7c,0x05,0xe7,0x74,0x09,0x98,0xec,0x8b,0xc8,
    0x4b,0x89,0x13,0x18,0x6c,0x19,0x98,0x0b,0xfb,0x94,0x15,0xde,0x27,0xcf,0x63,0xbb,
    0x8c,0x18,0x8b,0x7d,0x3c,0xb9,0xbf,0x96,0x53,0xcf,0x12,0xef,0xdb,0x14,0xe6,0x89,
    0xb0,0x46,0x72,0x8a,0xef,0x4a,0xf0,0x37,0xbd,0x8d,0xc8,0xab,0x88,0xb7,0xd2,0x70,
    0x5f,0x03,0xf7,0xd5,0x86,0xfb,0x5a,0x70,0xe5,0xbe,0x0e,0xec,0x31,0xdf,0x63,0x39,
    0xe7,0xeb,0xc9,0xbd,0x0a,0xae,0xeb,0xcc,0x1c,0xbc,0x40,0xbc,0x0d,0x66,0x0e,0x5e,
    0x04,0xd7,0x39,0x78,0x09,0x4c,0xe7,0x60,0x93,0x99,0x03,0xd1,0x6d,0xf4,0x6b,0x13,
    0x7b,0xbb,0xd1,0xf4,0x67,0x33,0xb9,0x03,0xfc,0x6e,0xf1,0x7e,0xc3,0xbf,0x4b,0xac,
    0xdf,0xf0,0x91,0xe7,0x71,0x72,0x5d,0xc1,0xaf,0x17,0x3e,0x7f,0x99,0x5c,0xa2,0xbb,
    0x1a,0xce,0x52,0xe4,0x77,0x3d,0xbc,0x0b,0x13,0x61,0xae,0x1b,0xd4,0x56,0x80,0xbf,
    0xfc,0x8e,0xbf,0x0e,0x8f,0x3f,0xd1,0x8b,0xee,0x35,0xb0,0x9b,0xe0,0x85,0xcc,0xe6,
    0x2d,0x62,0x5e,0x35,0x7e,0xd7,0x88,0x95,0x9f,0x66,0x23,0x9c,0x6e,0xf9,0x6c,0xd7,
    0xc0,0xae,0xc0,0xa1,0xc2,0x45,0x71,0xaf,0xe3,0x7b,0x95,0x33,0x2b,0x7b,0x30,0xd2,
    0x45,0xfa,0xf5,0x69,0x33,0xb4,0x85,0x1e,0x39,0xea,0xed,0xe3,0xfe,0xd9,0xa3,0x4c,
    0xc7,0xbd,0xed,0x52,0x3d,0x4a,0xb8,0xc8,0x4f,0x7b,0x94,0xe7,0x52,0x3d,0x12,0x5d,
    0xb6,0x5f,0x3d,0xf1,0x93,0xa7,0xf6,0xa8,0x97,0x4b,0xf5,0x68,0x4b,0x5a,0x8f,0x72,
    0x5d,0xa4,0xb7,0x3d,0xea,0xed,0x22,0x5c,0x7b,0xd4,0x87,0x98,0x12,0x5f,0xfd,0x72,
    0xe0,0x92,0x9f,0x66,0x23,0x9c,0xb4,0x47,0x82,0x69,0x8f,0xa6,0xbb,0x28,0xae,0xf0,
    0xca,0x81,0xab,0xf6,0xa8,0xcc,0x45,0xfa,0x91,0xf0,0xd4,0x1e,0x6d,0xa5,0x47,0x31,
    0xea,0x2d,0x49,0xeb,0x51,0x3f,0x72,0xf6,0x33,0x3d,0xea,0xef,0x22,0x3f,0xed,0xd1,
    0x40,0xd3,0x23,0xd1,0x15,0xf8,0x35,0x00,0xbf,0x01,0xa6,0x47,0xf7,0x99,0x1e,0x6d,
    0x4d,0xeb,0x51,0x91,0x8b,0xf4,0xb6,0x47,0xc5,0x2e,0xc2,0xb5,0x47,0x25,0xc4,0x2c,
    0x30,0x3d,0x2a,0x84,0x4b,0x7e,0x9a,0xcd,0x40,0xd3,0xa3,0x12,0xd3,0xa3,0x4a,0x17,
    0xc5,0x15,0x5e,0x85,0x70,0xd5,0x1e,0x8d,0x71,0x91,0x5e,0x7a,0x15,0x23,0x9e,0x9e,
    0xbd,0x4d,0xcc,0xa2,0xd8,0xcd,0x64,0xd6,0x1a,0xf0,0x29,0x71,0xa9,0x33,0xbf,0x9d,
    0x33,0xbf,0xcd,0x9c,0xf9,0xb7,0xc0,0xf5,0xcc,0xbf,0x0d,0xa6,0x67,0x7e,0xa7,0x39,
    0x87,0xa2,0xdb,0xe1,0xd7,0x1e,0xf2,0xee,0x31,0xf7,0xc9,0x7b,0xc4,0xde,0x6b,0x62,
    0xbf,0x0f,0xae,0xb1,0x3f,0x00,0xd3,0xd8,0xcd,0x26,0xb6,0xe8,0xf6,0xf9,0xd5,0x4c,
    0xec,0x7d,0x66,0x0e,0x3e,0xa4,0x2e,0xf9,0x96,0x39,0x46,0xac,0x8f,0xc0,0xf7,0xd3,
    0x0b,0xf5,0x6b,0xa6,0x17,0x62,0xf3,0x31,0x39,0xf7,0x60,0xbf,0x8f,0xbc,0x2d,0x26,
    0xaf,0xd8,0x1c,0xf0,0xab,0x05,0xff,0x03,0x26,0xef,0x27,0x26,0x6f,0xad,0xff,0x3a,
    0x93,0xbb,0xf9,0x33,0xb0,0x99,0x2e,0xf5,0xad,0x14,0x33,0xbf,0x03,0x07,0xf1,0xd3,
    0xa5,0x77,0xfa,0x21,0x7c,0x0f,0x86,0xb1,0x7a,0x84,0x7b,0xf5,0x39,0xb1,0x0e,0xf1,
    0xbd,0x96,0x69,0xbe,0x4b,0xa5,0x26,0xe5,0xd4,0x62,0xf6,0xb7,0x9a,0xdc,0xcd,0xf8,
    0x1f,0xc0,0x76,0x27,0xb6,0x3b,0x0c,0xff,0x5d,0xff,0xc1,0xff,0x9d,0xdb,0xf0,0xdf,
    0x0e,0xcf,0xdd,0xd8,0xec,0x32,0x3c,0xdf,0xc5,0x67,0xf7,0x6d,0x78,0x6a,0xee,0x9d,
    0x86,0xe7,0x2c,0x17,0x71,0x6d,0xc1,0x7f,0x07,0x39,0x44,0xf7,0x05,0xfa,0xc3,0x7c,
    0x67,0xca,0x77,0x6c,0x2b,0xb8,0xce,0xd3,0x31,0xe6,0xe9,0xa8,0x99,0xa7,0x2f,0xc1,
    0x75,0x9e,0x8e,0x83,0xe9,0x3c,0x9d,0x34,0xfb,0x2a,0xba,0x13,0x7e,0x9d,0x82,0xdb,
    0x29,0x13,0xfb,0x6b,0x62,0x9f,0x36,0xb1,0xbf,0x01,0xd7,0xd8,0x67,0xc0,0x34,0x76,
    0x9b,0x89,0x2d,0xba,0xb3,0x7e,0x9d,0x23,0xf6,0x39,0xf3,0x3b,0xfd,0x1d,0xb1,0xcf,
    0x9b,0xdf,0xe9,0xef,0xc1,0xcf,0xf0,0xad,0xf7,0x03,0xd8,0x6a,0x93,0xef,0x47,0xf0,
    0x46,0xf2,0x75,0x98,0x7c,0xa2,0x6b,0xf7,0xab,0x83,0x7c,0xed,0xfc,0xbe,0x84,0xdf,
    0xff,0x2e,0xf2,0x69,0x0d,0x52,0xdf,0x84,0x6a,0xd7,0xc1,0x7e,0x88,0xdd,0x6c,0x17,
    0xd9,0x9c,0xc3,0xa7,0xdd,0xf0,0xf9,0x09,0x3e,0xe3,0x0c,0x9f,0x9f,0xc1,0x95,0x4f,
    0xa7,0xe1,0x23,0xba,0x0b,0x7e,0x75,0x92,0xe7,0x82,0xe1,0x93,0x84,0xcf,0x6c,0x73,
    0x4f,0xa9,0x5d,0xa7,0xe1,0x53,0xe3,0x22,0x9b,0x0e,0x7c,0x2e,0x18,0x3e,0xbf,0xc0,
    0xe7,0xa8,0xe1,0xf3,0x2b,0xb8,0xf2,0xe9,0x32,0x7c,0x44,0x77,0xd1,0xaf,0x2e,0xf2,
    0x5c,0x34,0x7c,0xa6,0xba,0xe8,0x7f,0x95,0x1a,0x97,0x9a,0x57,0xb5,0xeb,0x32,0x7c,
    0xea,0x5c,0x64,0xd3,0x89,0xcf,0x45,0x6c,0xdb,0xb0,0x3d,0x6b,0xbe,0xd5,0xbf,0xa5,
    0xdf,0x71,0x93,0x67,0xa2,0x4b,0xe1,0x41,0x9a,0x6f,0x9b,0xc9,0x33,0xc7,0x45,0xb9,
    0xba,0xf0,0x39,0x8b,0xed,0x49,0x6c,0x4f,0x70,0xee,0xc4,0xf6,0x2b,0xe2,0xb5,0x72,
    0xee,0x12,0x9c,0xd5,0x78,0x9a,0xcf,0x49,0x13,0xbf,0xd6,0x45,0x39,0xda,0xf0,0x97,
    0x78,0x53,0xbc,0xc7,0x65,0x74,0x37,0xfd,0x94,0x4c,0xf0,0xeb,0x6f,0x02,0x3f,0xb4,
    0xaf,0x14,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform sampler2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
