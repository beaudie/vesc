// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xdd,0x6f,0x94,0x45,
    0x14,0xc6,0xa7,0xdd,0x76,0x5b,0x56,0x5b,0x5a,0x6c,0x01,0xbb,0x40,0xa9,0x35,0xa0,
    0xae,0x41,0x4c,0xf8,0x8c,0x6d,0x23,0x7e,0x50,0x43,0x48,0x54,0xd0,0x16,0x6e,0x0c,
    0x68,0x1b,0xe3,0x45,0x21,0xa1,0x6d,0x82,0xb1,0xb6,0x88,0x56,0xdb,0x20,0x62,0xd1,
    0xa0,0xa0,0xc1,0x48,0x0c,0x09,0x51,0x6a,0x0d,0x8a,0xc6,0x08,0x85,0x44,0xe3,0x85,
    0x57,0xde,0xa0,0x20,0x5e,0xe1,0xbf,0xe0,0x77,0x8c,0x9e,0x67,0xde,0xdf,0x98,0xe3,
    0xc6,0x4d,0x26,0xf3,0xce,0x73,0x3e,0x9f,0x33,0x67,0x66,0x36,0x57,0xd9,0x5e,0x13,
    0x42,0x45,0x28,0x84,0xda,0xf0,0x53,0xc8,0x7e,0x8d,0xa1,0xd2,0x90,0x10,0xae,0x0b,
    0xf9,0x38,0x77,0x6f,0xde,0xba,0x79,0xc5,0xe0,0x50,0xdf,0x8a,0x55,0xab,0x57,0x4a,
    0x5e,0x1f,0x72,0x51,0x4f,0xb2,0xb9,0xa6,0x53,0x6d,0x73,0x95,0x8d,0x81,0x9d,0x4f,
    0xed,0x12,0x5e,0x67,0xa3,0xc1,0xf0,0xaa,0xe8,0x2b,0x98,0xe7,0x6c,0x44,0x5f,0x86,
    0xd6,0x45,0xdf,0x21,0x2c,0xb2,0xf1,0x80,0x59,0x2f,0x26,0x6e,0x3b,0x73,0xc2,0x2a,
    0xc0,0x6a,0x1d,0x56,0x09,0xd6,0xe0,0xb0,0x1c,0xd8,0x42,0x87,0x55,0x81,0xf9,0x18,
    0xd5,0x60,0x4b,0x1d,0x96,0x07,0x5b,0xe9,0xb0,0x1a,0xb0,0x55,0x0e,0xab,0x05,0x5b,
    0xe7,0xb0,0x39,0x60,0x1d,0x91,0x57,0xee,0xdf,0xfc,0xc4,0xf1,0xa0,0xcd,0x37,0xc1,
    0x27,0xad,0xdb,0x5c,0x0d,0xa6,0xca,0xe4,0x53,0xc8,0x93,0xfd,0x69,0x72,0xab,0x22,
    0xde,0x74,0x59,0x8d,0x14,0x6f,0x1a,0xee,0xd2,0x9f,0x29,0xf3,0x37,0x83,0xbf,0xb4,
    0x9e,0xa5,0xe6,0x37,0xda,0xb8,0xc1,0xa2,0x54,0x46,0x79,0x2e,0xda,0xeb,0xbb,0xd9,
    0x74,0xf2,0xd4,0x46,0x39,0x2e,0xb0,0x75,0x0d,0x39,0x24,0x79,0x01,0x79,0x40,0x2e,
    0x7f,0x05,0x72,0x58,0x6a,0xeb,0xeb,0xb1,0x15,0x7e,0x17,0xeb,0x3a,0xb0,0x12,0xf6,
    0xf5,0xd8,0x4b,0x7f,0x2e,0xb2,0x82,0x93,0xcf,0x83,0x73,0x5a,0x37,0xa3,0x33,0xdf,
    0xa2,0xb4,0x10,0x5f,0xb1,0x8b,0x36,0xb7,0x90,0x9b,0xd6,0x8b,0x5c,0xbd,0x96,0x58,
    0x64,0xed,0x45,0xd1,0x8d,0x3c,0x23,0xe9,0x15,0xdc,0x50,0x2e,0x4b,0xd8,0xcf,0xc5,
    0xe4,0xae,0x75,0x2b,0x58,0xc9,0xd5,0xa6,0x1a,0xfd,0x36,0x64,0xf2,0xd7,0x64,0x59,
    0x2c,0x23,0x8f,0xe5,0x36,0x2f,0x23,0xaf,0x64,0xb7,0x06,0x0e,0xb2,0x5b,0x8b,0x5d,
    0xd1,0xc9,0x3b,0xa8,0x49,0x5a,0x6f,0xa0,0x07,0xa5,0x7f,0x0f,0xfa,0x05,0x27,0xdf,
    0x42,0x3f,0xa6,0xf5,0x8e,0xb2,0x3c,0x07,0x6c,0xfc,0x6d,0xbf,0xb4,0xde,0xeb,0x6a,
    0xaa,0x9a,0x8d,0xb8,0x3d,0xd8,0x8f,0x6d,0x3e,0xf6,0xc6,0x9c,0x70,0x80,0x58,0x15,
    0xe1,0xbf,0xbf,0x0a,0x67,0xf3,0x32,0xdf,0x07,0xa8,0x95,0xd6,0x07,0xc1,0x5a,0x8c,
    0xf9,0x21,0xf4,0x5e,0x05,0x3b,0x84,0x9e,0xd6,0x53,0x60,0x45,0xdb,0xcf,0xd7,0xf0,
    0x91,0xf2,0x3c,0xe2,0xf6,0xf3,0x18,0x79,0xf8,0x5e,0x38,0x2e,0x5e,0x71,0x8f,0x72,
    0xf1,0x7c,0x14,0xe2,0x5e,0x67,0xe7,0xe0,0x34,0x31,0x3f,0xc4,0xc7,0x34,0x31,0xb5,
    0x9e,0x29,0xdb,0x8f,0x33,0xf0,0x95,0xfe,0x17,0xc8,0x7c,0x0f,0x9e,0xa7,0xbe,0xb7,
    0x9b,0x96,0x7a,0x79,0x16,0xec,0x3c,0xfd,0x98,0xea,0xf8,0x5d,0x64,0xb2,0x6f,0x76,
    0x8d,0x75,0x45,0x25,0xb9,0x06,0xce,0xc3,0x6f,0x86,0xa8,0x57,0x7e,0xb5,0xd5,0x05,
    0xf0,0x3f,0xed,0x5b,0xfd,0x7f,0x11,0xf9,0xc5,0xb8,0xd7,0xd5,0xf1,0x1c,0x34,0x70,
    0x56,0x24,0xef,0x24,0x8f,0x46,0xf0,0x17,0x4c,0xa7,0x10,0xcf,0x6d,0x86,0xcd,0x8b,
    0x7b,0x98,0x71,0x69,0x02,0x4f,0x7e,0xe6,0xe3,0xa7,0xd9,0xf9,0x59,0x00,0x9e,0x6c,
    0x16,0x82,0x3d,0x64,0x36,0x35,0xdc,0x09,0x4d,0xe0,0xf2,0xd3,0xc6,0x5d,0xd2,0x4a,
    0xcf,0x77,0x72,0xbe,0xda,0xc1,0x1f,0x34,0x2b,0xd9,0xdd,0x0c,0xd6,0x4e,0x0d,0x73,
    0xb1,0xb6,0xd5,0xf1,0x0c,0xdc,0x82,0x5c,0xbe,0x8f,0x99,0xbd,0xce,0xc4,0xad,0xe0,
    0xaa,0x49,0x89,0x9a,0xfc,0x61,0x32,0xe1,0xb7,0xc5,0xba,0x66,0x75,0xd1,0xf7,0xef,
    0x36,0x5f,0x60,0x5d,0x72,0x31,0xef,0x70,0x31,0x53,0x5f,0xee,0x83,0xc7,0x9d,0xc4,
    0x93,0xce,0x6e,0xee,0x88,0xd5,0xe0,0xe2,0xb5,0x96,0xfb,0xbb,0x95,0x33,0xd9,0x89,
    0xce,0x7a,0xf0,0x71,0xd3,0x29,0xc6,0xbe,0xc9,0xec,0xd6,0x3b,0xbb,0x4e,0xec,0x3a,
    0x9c,0x5d,0x17,0xf8,0xf3,0xd8,0xdd,0x8d,0x6d,0x17,0x76,0x3a,0xbb,0xf7,0x62,0xb7,
    0xc1,0xed,0xc7,0x7d,0xe0,0xef,0x9b,0x8e,0xea,0x72,0x3f,0x58,0x3d,0xb5,0xe9,0x76,
    0xb5,0x91,0x6c,0x63,0xbc,0xc3,0xb3,0x5a,0xe8,0xfb,0x61,0xb3,0x53,0xff,0x6d,0x22,
    0x66,0x20,0x87,0x96,0xb8,0xa7,0x59,0x5f,0x6e,0x8a,0xf7,0x44,0x3e,0xe6,0xf5,0x0d,
    0x78,0xd2,0x55,0x6d,0x93,0x3f,0xcd,0x3f,0x5b,0xf5,0xa4,0xf7,0x3d,0x3a,0x25,0x6c,
    0x36,0x3a,0x1e,0x5b,0xe1,0xb1,0xc5,0xf1,0x78,0x04,0x3c,0xf1,0x78,0x14,0x2c,0xf1,
    0xe8,0x75,0x3c,0x24,0xeb,0xb1,0xd1,0x4b,0xdc,0x1e,0xc7,0x63,0x3b,0xb1,0x2b,0x1c,
    0x8f,0xc7,0xe0,0xb1,0xdd,0xf1,0xf8,0x16,0x3c,0xe9,0x8a,0x47,0xf2,0xd7,0xeb,0x78,
    0x5c,0x46,0xa7,0x1b,0x9b,0x1e,0xc7,0x63,0x27,0x3c,0x76,0x38,0x1e,0x8f,0x83,0x27,
    0x1e,0x4f,0x80,0x25,0x1e,0xfd,0x8e,0x87,0x64,0x7d,0x36,0xfa,0x89,0xdb,0x47,0x6f,
    0x2a,0xee,0x93,0xc4,0xbe,0xec,0xee,0x4b,0xe5,0x98,0x74,0xfb,0x5d,0x8e,0x3f,0xa2,
    0xd7,0x8b,0x9d,0xfc,0x9c,0x32,0x9e,0x3a,0x9f,0xbb,0xe8,0x89,0x01,0xfa,0x54,0x3e,
    0xf6,0xe0,0x63,0x8f,0xf3,0x71,0x15,0x3f,0xf2,0x7b,0xc9,0xc6,0x30,0x32,0x71,0xfa,
    0x81,0xfc,0x25,0xbb,0xe6,0x64,0xf2,0x7f,0x85,0x3e,0x96,0xec,0x03,0x64,0x1f,0xc1,
    0xfd,0x69,0xe4,0x7a,0x33,0x7e,0x31,0xbe,0x43,0xc8,0x13,0x7f,0xc9,0x07,0x6d,0x0c,
    0x91,0xcf,0xa0,0xdb,0xc7,0x67,0xc8,0x29,0xc4,0xbb,0x32,0xf3,0xf7,0x2c,0xf8,0x08,
    0xb5,0x1c,0x73,0xbe,0x24,0x1b,0xb5,0x31,0x86,0xaf,0x51,0xf6,0x69,0x7f,0xec,0x83,
    0x6c,0x9f,0xf6,0xb2,0x4f,0xf9,0x78,0x0f,0x66,0xf8,0x6e,0xee,0xdf,0x71,0xb0,0xcf,
    0x88,0xf5,0x22,0xb1,0xc6,0xa9,0x59,0xf2,0x3b,0x06,0x77,0xe9,0xbc,0x44,0x4e,0x83,
    0xe8,0x8f,0x92,0xd7,0xa4,0xcb,0x4b,0x3a,0x13,0x36,0x26,0xb1,0x9f,0x20,0x07,0xbd,
    0x55,0xaf,0xf0,0xd6,0x69,0xad,0x77,0xed,0x30,0x6f,0x5a,0x8f,0xe5,0xa0,0xf7,0xec,
    0x75,0x74,0x0e,0xbb,0xbb,0xe3,0x0d,0xb8,0x1c,0x71,0x77,0xc7,0x9b,0xe0,0xe9,0xce,
    0x39,0x4a,0xed,0x84,0x6f,0xb3,0x5c,0xf5,0xfe,0xbd,0x85,0xbf,0xa3,0xdc,0xaf,0x23,
    0xd4,0x5a,0xfb,0xfb,0x36,0x72,0xfd,0xbe,0x06,0x7b,0x07,0xfc,0x38,0x6f,0x86,0x6a,
    0xf6,0x2e,0xfb,0xa9,0x73,0xfb,0x25,0x7a,0x27,0xd0,0x95,0xec,0x2b,0xb0,0xf7,0xe8,
    0x99,0x13,0xd4,0x2e,0x71,0x9f,0x74,0x3d,0x75,0x0d,0x9d,0x31,0xf4,0x27,0xdc,0x5e,
    0x9c,0xa4,0x6f,0x9f,0xa3,0x17,0x4e,0xb1,0x17,0x27,0xdd,0xf9,0xbd,0x04,0x7e,0xd5,
    0x9d,0x8d,0x61,0xe2,0x0c,0x73,0x8f,0xe7,0xe9,0xc9,0x2b,0xff,0xd3,0xfb,0x43,0xae,
    0x3f,0x3e,0xa6,0xa6,0x67,0x5c,0x7f,0x7c,0x02,0x3e,0xc2,0xb9,0x3e,0x0b,0x96,0xde,
    0xcf,0x4f,0x79,0xf7,0xce,0x12,0x4b,0xd8,0xe7,0xe0,0x8d,0xd1,0x77,0x3e,0xfe,0x1f,
    0x38,0xc7,0x7f,0x86,0x0e,0xe4,0x5d,0xd6,0x1f,0xe7,0xe0,0xee,0xdf,0x25,0xcd,0x7f,
    0xd9,0x49,0x5f,0x67,0xe3,0x1f,0xd7,0x45,0xfe,0x52,0x48,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//
//     ivec4 blitArea;
//     int destPitch;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)buffer dest
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             vec2 srcImageCoords = vec2(destSubImageCoords);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//     {
//         srcImageCoords . x = - srcImageCoords . x;
//
//         srcImageCoords . x -= 1;
//     }
//     if(params . flipY)
//     {
//         srcImageCoords . y = - srcImageCoords . y;
//         srcImageCoords . y -= 1;
//     }
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = params . flipX ? - 1 : 1;
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if(srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)
//         {
//
//             uint stencilValue = texture(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         srcImageCoords . x += xDir;
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
