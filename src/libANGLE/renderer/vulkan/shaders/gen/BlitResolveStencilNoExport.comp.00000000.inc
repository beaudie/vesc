// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xe9,0x6f,0x94,0x55,
    0x14,0xc6,0xdf,0x99,0x69,0x67,0xca,0x68,0x4b,0xab,0x2d,0x60,0x07,0x28,0xb5,0x04,
    0x97,0x31,0x80,0x09,0x6b,0x6c,0x1b,0x71,0xa1,0x44,0x41,0xda,0x82,0xa2,0xd2,0x98,
    0x98,0xd4,0x0f,0x5d,0xb4,0xc6,0xd2,0x26,0x6a,0xa5,0xb5,0x54,0x2c,0x1a,0x04,0x31,
    0x18,0xd1,0x90,0x90,0x48,0x6d,0x04,0x31,0x31,0x6c,0xfd,0xa4,0x09,0xd1,0x20,0x88,
    0x9f,0xf0,0x5f,0x71,0x8f,0xd1,0xf3,0xdc,0xf7,0x77,0xcd,0xb1,0x71,0x92,0x9b,0xfb,
    0xde,0xe7,0xec,0xdb,0xbd,0x93,0xcb,0xb6,0x14,0x92,0x5c,0x26,0x29,0x26,0x55,0xc9,
    0x4f,0x49,0xfa,0xab,0x4b,0xb2,0x49,0xc6,0xf6,0x5b,0x92,0x7c,0xd8,0x3b,0xb6,0xef,
    0xda,0xbe,0x7a,0x78,0x5f,0xef,0xea,0x75,0xeb,0xd7,0x8a,0x5e,0x93,0xe4,0x02,0x9f,
    0x68,0x0b,0x8d,0xa7,0xd2,0xf6,0x0a,0x5b,0x2f,0x3e,0xdf,0xf7,0x92,0xf0,0x6a,0x5b,
    0xb5,0x86,0x57,0x04,0x5d,0x89,0x69,0x4e,0x57,0xd0,0x65,0x68,0x75,0xd0,0x9d,0x24,
    0x4b,0x6d,0x6d,0x33,0xe9,0x65,0xd8,0x6d,0x61,0x8f,0x58,0x06,0xac,0xca,0x61,0x59,
    0xb0,0x5a,0x87,0xe5,0xc0,0x96,0x38,0xac,0x02,0xcc,0xdb,0xa8,0x04,0x5b,0xe1,0xb0,
    0x3c,0xd8,0x5a,0x87,0x15,0xc0,0xd6,0x39,0xac,0x0a,0x6c,0x93,0xc3,0x16,0x80,0xb5,
    0x86,0xb8,0x72,0xff,0xfa,0xa7,0x18,0xa7,0x6c,0xbf,0x93,0x78,0xe2,0xb9,0xd9,0xe5,
    0x60,0x7a,0x1e,0x7d,0x1a,0x7a,0x94,0x3f,0x8d,0x6f,0x15,0xd8,0x9b,0x99,0x97,0x23,
    0xd9,0x9b,0x71,0xfc,0xb3,0xf3,0xf4,0xcd,0xa2,0x2f,0x9e,0x2f,0x91,0xf3,0x3b,0x6c,
    0xdd,0x6e,0x52,0xd9,0x40,0xcf,0x85,0xdc,0xe9,0xbb,0xc1,0x78,0xf2,0xe4,0x46,0x3e,
    0x2e,0xb6,0x73,0x01,0x1f,0x22,0xbd,0x08,0x3d,0x81,0x2e,0x7d,0x45,0xf2,0xbf,0xc2,
    0xce,0xb7,0x22,0x2b,0xfc,0x01,0xce,0xd5,0x60,0x65,0xe4,0x6b,0x90,0x17,0xff,0x42,
    0x68,0x45,0x47,0xbf,0x8d,0x98,0xe3,0xb9,0x01,0x9e,0x45,0x66,0xa5,0x11,0xfb,0xb2,
    0x5d,0xb2,0xbd,0x11,0xdf,0x74,0x5e,0xea,0xf2,0xb5,0xdc,0x2c,0xab,0x16,0x25,0xb7,
    0xf2,0xac,0xc8,0x57,0x74,0x4b,0xbe,0x2c,0xa7,0x9e,0xcb,0xf0,0x5d,0xe7,0x26,0xb0,
    0xb2,0xcb,0x4d,0x25,0xfc,0xcd,0xd0,0xa4,0xaf,0xde,0xbc,0x58,0x85,0x1f,0x77,0xd9,
    0xbe,0x0a,0xbf,0xa2,0xdc,0x06,0x62,0x90,0xdc,0x46,0xe4,0x4a,0x8e,0xde,0x4a,0x4e,
    0xe2,0x79,0x0b,0x3d,0x28,0xfe,0x87,0xe0,0x2f,0x3a,0xfa,0x0e,0xfa,0x31,0x9e,0xf7,
    0xcc,0xf3,0xb3,0xd7,0xd6,0xdf,0xf6,0x8b,0xe7,0x21,0x97,0x53,0xe5,0x6c,0xd8,0xd5,
    0xe0,0x55,0x64,0xf3,0xa1,0x37,0x16,0x24,0x93,0xd8,0xca,0x24,0xff,0xfd,0x65,0x9c,
    0xcc,0x01,0xbe,0x27,0xc9,0x95,0xce,0x53,0x60,0x8d,0x16,0xf9,0x41,0xf8,0xde,0x06,
    0x3b,0x08,0x9f,0xce,0xd3,0x60,0x25,0xab,0xe7,0x3b,0xe8,0x88,0x7e,0x1e,0x76,0xf5,
    0x7c,0x1f,0x3f,0x7c,0x2f,0x1c,0x57,0x5c,0xa1,0x46,0xb9,0x30,0x1f,0xc5,0x50,0xeb,
    0x74,0x0e,0x4e,0x63,0xf3,0x33,0xdb,0xd5,0x77,0x33,0xd8,0xd4,0x79,0x16,0x2c,0xda,
    0x39,0x43,0xbc,0xe2,0x3f,0x0f,0xcd,0xf7,0xe0,0x45,0xf2,0x7b,0x9f,0x71,0xa9,0x97,
    0x2f,0x81,0x5d,0xa4,0x1f,0x37,0x58,0x17,0x64,0xf1,0x2d,0xa1,0xff,0x7f,0x33,0x44,
    0xbd,0xf1,0xab,0x9d,0x2e,0x83,0xff,0x69,0xdf,0xea,0xf7,0x39,0xe8,0x73,0xa1,0xb6,
    0x95,0xa1,0xef,0x6b,0x99,0x0d,0xd1,0xdb,0xb0,0x5b,0x07,0x3e,0x65,0x3c,0xc5,0x30,
    0xa7,0x29,0xa6,0x99,0x18,0xc3,0xf7,0x7a,0xf0,0xa8,0x67,0x11,0x7a,0x1a,0x9c,0x9e,
    0xc5,0xe0,0x51,0x66,0x09,0x58,0xa7,0xc9,0x14,0xb8,0x03,0xea,0xc1,0xa5,0xa7,0x99,
    0xbb,0xa3,0x89,0x1e,0x6f,0x63,0x9e,0x5a,0xc0,0x77,0x9a,0x94,0xe4,0x56,0x82,0xb5,
    0x50,0x27,0xc5,0x7d,0xde,0xe4,0xd5,0xf3,0x77,0x43,0x97,0xee,0x8f,0x4d,0x5e,0x33,
    0x70,0x0f,0xb8,0x72,0x52,0x26,0x27,0x7f,0x18,0x4d,0xf8,0xbd,0x21,0xdf,0x69,0x5e,
    0xf4,0xfd,0xbb,0xed,0x97,0x39,0x97,0x9d,0xcd,0x35,0xce,0x66,0xec,0xc3,0x09,0xe2,
    0xb8,0x1f,0x7b,0x6b,0x42,0x8f,0xa7,0x77,0xc2,0x7a,0x70,0xc5,0xb5,0x91,0xfb,0xba,
    0x89,0x19,0x6c,0x83,0x67,0x33,0xf8,0x5b,0xc6,0x53,0x0a,0x7d,0x92,0xca,0x6d,0x76,
    0x72,0x6d,0xc8,0xb5,0x3a,0xb9,0x76,0xf0,0x03,0xc8,0x3d,0x88,0x6c,0x3b,0x72,0x9a,
    0xd5,0x87,0x91,0xdb,0xe2,0xea,0xf1,0x08,0xf8,0x59,0xe3,0x51,0x5e,0x1e,0x05,0xab,
    0x21,0x37,0x1d,0x2e,0x37,0xa2,0x6d,0x0d,0x77,0x76,0x9a,0x0b,0x7d,0x77,0x99,0x9c,
    0xe6,0xf6,0x31,0x6c,0xea,0x37,0xce,0x2c,0x3f,0x0e,0xde,0x6d,0x95,0x96,0x4f,0xdf,
    0x80,0x45,0x3e,0xe5,0x35,0xea,0xd2,0xfe,0xb3,0x65,0x4e,0x7c,0xdf,0xc3,0x53,0x46,
    0x66,0xab,0x8b,0xe1,0x09,0x62,0xd8,0xe1,0x62,0xd8,0x09,0x1e,0x63,0xe8,0x04,0x8b,
    0x31,0x74,0xbb,0x18,0x3a,0x83,0xcf,0x49,0xc0,0x64,0xb7,0xcb,0xc5,0xb0,0x1b,0xdb,
    0x19,0x17,0xc3,0x93,0xe0,0x31,0x86,0x2b,0x60,0x91,0x4f,0x31,0x44,0x5d,0xdd,0x2e,
    0x86,0x6b,0xf0,0x74,0x20,0xd3,0xe5,0x62,0x78,0x9a,0x18,0xf6,0xb8,0x18,0x9e,0x01,
    0x8f,0x31,0x3c,0x0b,0x16,0x63,0xe8,0x71,0x31,0x88,0xb6,0xd7,0x56,0x0f,0x76,0xf7,
    0xd2,0x93,0xb2,0xfb,0x1c,0xb6,0xaf,0xb9,0x7b,0x51,0x3e,0x46,0xde,0x1e,0xe7,0xe3,
    0x8f,0xf0,0x75,0x23,0x27,0x3d,0x9f,0x5b,0x9c,0x9a,0xcb,0x17,0xe8,0x85,0x5e,0xfa,
    0x53,0x3a,0xfa,0xd0,0xd1,0xe7,0x74,0xdc,0x40,0x8f,0xf4,0x5e,0xb5,0x35,0x08,0x4d,
    0x31,0xfd,0x80,0xff,0xa2,0xdd,0x74,0x34,0xe9,0xbf,0x4e,0xff,0x8a,0xf6,0x29,0xb4,
    0xaf,0x88,0xfd,0x65,0xe8,0x7a,0x1b,0x7e,0xb1,0x78,0x07,0xa0,0xc7,0xf8,0x45,0xef,
    0xb7,0x35,0x80,0x3f,0xfd,0xae,0x86,0xaf,0xe0,0x93,0x7e,0x5f,0xa3,0x6f,0x1f,0xf8,
    0x30,0xb9,0x1c,0x75,0xba,0x44,0x1b,0xb1,0x35,0x8a,0xae,0x11,0xea,0xa4,0xb7,0xe7,
    0x35,0xea,0x34,0x44,0x9d,0xe4,0xf7,0xeb,0xe0,0x43,0xf4,0xc7,0x18,0xd8,0x1c,0xb6,
    0xde,0xc0,0xd6,0x18,0x39,0x8b,0x7a,0x47,0x89,0x5d,0x3c,0xfb,0xf1,0xa9,0x1f,0xfe,
    0x11,0xfc,0x9a,0x70,0x7e,0xed,0x0f,0x3d,0x98,0x04,0x4c,0xf2,0xe3,0xf8,0x30,0x19,
    0xee,0x86,0xf4,0x4d,0xd3,0x59,0xef,0xd7,0x21,0xde,0xae,0xa7,0xcc,0x07,0xbd,0x5b,
    0xef,0xc2,0x73,0xc8,0xdd,0x19,0xef,0x11,0xcb,0x61,0x77,0x67,0x1c,0x01,0x8f,0x77,
    0xcd,0x51,0x72,0x77,0x24,0xf4,0x62,0x21,0xbc,0x73,0xc7,0xd0,0x77,0x94,0x7b,0x75,
    0x98,0x5c,0xab,0xbe,0x1f,0x40,0x4f,0x42,0xed,0x53,0xec,0x43,0xf0,0xe3,0xbc,0x15,
    0xca,0xd9,0x47,0xd4,0x53,0x33,0xfb,0x2d,0x7c,0x27,0xe0,0x15,0xed,0x3b,0xb0,0x4f,
    0xe8,0x99,0x13,0xe4,0x2e,0xc6,0x3e,0xe1,0x7a,0xea,0x26,0x3c,0xa3,0xf0,0x8f,0xbb,
    0x5a,0x9c,0xa4,0x6f,0xdf,0xa4,0x17,0x4e,0x51,0x8b,0x93,0x6e,0x7e,0xaf,0x82,0xdf,
    0x70,0xb3,0x31,0x88,0x9d,0x41,0xee,0xef,0x3c,0x3d,0x79,0xfd,0x7f,0x7a,0x7f,0xc0,
    0xf5,0xc7,0x59,0x72,0x7a,0xc6,0xf5,0xc7,0x17,0xe0,0x63,0xcc,0xf5,0x39,0xb0,0xf8,
    0x6e,0x7e,0xc9,0x7b,0x77,0x0e,0x5b,0xc5,0xd0,0xf7,0x29,0x5e,0x17,0x74,0xe7,0xc3,
    0xbb,0x7f,0x81,0xff,0x06,0xad,0xd0,0xdb,0xad,0x3f,0x2e,0x10,0xbb,0x7f,0x8f,0xb4,
    0xff,0x65,0x93,0xbe,0xc9,0xd6,0x3f,0x1a,0xc6,0xd8,0x56,0x30,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//
//     ivec4 blitArea;
//     int destPitch;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             vec2 srcImageCoords = vec2(destSubImageCoords);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = params . flipX ? - 1 : 1;
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if(srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)
//         {
//
//             uint stencilValue = texture(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         srcImageCoords . x += xDir;
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
