// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x09,0x94,0x8e,0x65,
    0x14,0xc7,0xdf,0xf9,0xbe,0x59,0xec,0xfb,0x12,0xd9,0x4a,0xb6,0x43,0xd3,0x9c,0x33,
    0x43,0x98,0x8c,0xa5,0x18,0xca,0x2e,0x2a,0x14,0x53,0x76,0xa1,0x50,0x52,0xd9,0x42,
    0x86,0x8a,0x0a,0x09,0xa1,0xa2,0x14,0x25,0xa2,0xac,0x85,0x0a,0x45,0x45,0x65,0x28,
    0x2a,0xca,0xd2,0x86,0xca,0x92,0x3d,0x3d,0xf7,0xf9,0x7e,0x77,0xce,0xed,0x3d,0x4e,
    0xcd,0x39,0xcf,0xf9,0xbe,0xfb,0xbf,0xf7,0xb9,0xf7,0x7f,0x97,0xe7,0xf9,0xde,0x79,
    0xa3,0x91,0xca,0x49,0x41,0x34,0x2e,0xc8,0x17,0xe4,0x09,0x2e,0x05,0xb1,0xbf,0xa2,
    0x41,0x24,0x88,0x73,0x9f,0xf9,0x83,0x44,0xff,0x99,0xd9,0xb2,0x43,0xcb,0xe4,0x21,
    0x43,0x7b,0x24,0xa7,0xd5,0x4e,0x11,0x7d,0xa1,0x20,0xea,0xed,0x44,0x57,0x38,0x48,
    0x0a,0xe2,0xdd,0xa7,0xac,0x01,0x59,0x7d,0x07,0x0a,0x5e,0xcf,0xad,0x8b,0x6e,0x15,
    0x71,0x76,0x82,0x27,0x89,0x0f,0xf7,0xad,0x9e,0xf7,0x29,0x7b,0x82,0xa0,0x79,0x90,
    0x10,0x34,0x24,0x5e,0x65,0x3e,0x15,0x8b,0x03,0xcb,0x63,0xb0,0x08,0x58,0x11,0x83,
    0x45,0xc1,0x4a,0x18,0x2c,0x1e,0xec,0x0a,0x83,0x25,0x80,0x95,0x33,0x58,0x22,0x58,
    0x25,0x83,0x25,0x81,0x5d,0x63,0xb0,0x3c,0x60,0xd5,0x0d,0x96,0x17,0xac,0x96,0xc1,
    0xf2,0x81,0xa5,0x18,0x2c,0x3f,0x58,0x9a,0xc1,0x0a,0x80,0xd5,0x35,0x58,0x41,0xb0,
    0x1b,0x7c,0x9d,0xa2,0xb9,0xf9,0x4a,0xcd,0x06,0xb8,0xcf,0xab,0xa9,0x8f,0xca,0x57,
    0x19,0x59,0xea,0x5c,0x01,0xb9,0xb8,0xdb,0x15,0xf1,0xfa,0xa8,0xaf,0x8d,0x7c,0x2f,
    0xe5,0xbe,0x25,0x92,0x67,0x25,0x67,0x9f,0x44,0x9e,0x89,0xde,0x2e,0xde,0xe7,0x97,
    0x08,0x56,0xd3,0xc9,0x89,0xd4,0xb8,0x5c,0x72,0xab,0xf4,0x12,0xce,0x43,0x51,0x83,
    0x97,0x72,0xab,0xfd,0xaa,0xd6,0x8d,0x55,0xbe,0xd2,0xad,0x8e,0x1d,0x73,0x32,0x54,
    0x2e,0xef,0x56,0x83,0x7c,0x13,0x1a,0xaa,0x5c,0xd1,0xad,0x25,0x99,0x59,0x0d,0x54,
    0x96,0xba,0x1e,0x5e,0x52,0x25,0x57,0xbe,0xce,0xad,0x59,0x33,0xcb,0x34,0x2a,0xe9,
    0xe4,0x54,0x38,0x4a,0xef,0x4b,0x3b,0x59,0x6a,0x96,0x4a,0x0e,0xc2,0xbb,0x36,0x1c,
    0xd3,0xd0,0x5f,0x0f,0xef,0x78,0xf4,0x75,0xd9,0x2b,0x78,0x3a,0x72,0x3d,0xe3,0xaf,
    0x3e,0xf6,0xe2,0x4f,0xe2,0x65,0x10,0x2f,0xf0,0xf5,0x2b,0xe2,0x6b,0x9e,0xc6,0x4a,
    0x65,0x65,0xfc,0xcf,0x52,0x1b,0x89,0xdf,0x88,0xb9,0x68,0x48,0x7c,0x91,0x1b,0x83,
    0xd5,0x24,0xbf,0x26,0xf0,0x11,0xfb,0x1b,0xd1,0xa5,0x19,0x7d,0x0b,0x93,0xcf,0xcd,
    0xe8,0x33,0xd0,0xcb,0x67,0x2b,0xf8,0x8a,0xbe,0x1d,0xf5,0x48,0x35,0xfb,0x3b,0x31,
    0xeb,0x6a,0xdf,0x95,0x78,0xaa,0xcf,0x62,0xd6,0x64,0x7f,0x5f,0xf6,0x4b,0xbd,0xca,
    0xb8,0x48,0xfd,0xa9,0x4f,0x5c,0xf0,0xef,0xbf,0x38,0x13,0xf3,0x5e,0xbe,0xf7,0x27,
    0x47,0x91,0x07,0x80,0x69,0x8c,0x41,0x21,0x79,0xa8,0xe9,0xe1,0x03,0xe4,0x64,0x39,
    0x0f,0xe7,0xec,0x28,0xe7,0x49,0xd8,0xab,0x7e,0x0a,0xbc,0x54,0x3f,0x9d,0x73,0x2f,
    0x3d,0x7d,0x1e,0x5d,0xd4,0xd8,0xcf,0x0b,0xcd,0xf2,0xc2,0x10,0x9f,0xb5,0x9c,0x4b,
    0x95,0x77,0x70,0xc6,0x55,0xde,0x1b,0xea,0xd9,0x61,0xce,0xac,0xfa,0x3b,0xe7,0xbd,
    0x8d,0x6e,0x28,0xf9,0x5c,0x20,0xb6,0xce,0xdc,0x05,0xee,0x3d,0xc1,0xea,0xb8,0x4e,
    0x44,0xe8,0x67,0x00,0x76,0xc6,0x21,0x09,0xd8,0xd6,0xf6,0x36,0x31,0xae,0x2a,0x67,
    0x1a,0x59,0xfa,0xd3,0xcf,0xc8,0xf2,0x39,0x2a,0x24,0x8f,0x0b,0xc9,0x13,0x43,0xfb,
    0x57,0x84,0xf4,0x1b,0x43,0xf2,0xe6,0x90,0xbc,0xcd,0xc8,0x32,0x5f,0x87,0x90,0x1b,
    0x70,0xde,0xd2,0x39,0x53,0x6d,0x1c,0x5a,0x9f,0xfb,0x2a,0x9d,0xa5,0xb3,0x32,0x90,
    0xb3,0xdb,0x00,0x7d,0x63,0x97,0xb1,0xcc,0xfa,0x4d,0x9c,0x87,0x26,0xf8,0x13,0x9b,
    0xa6,0xe0,0x8f,0x39,0x1b,0x91,0x9b,0xb1,0xaf,0xa9,0x9f,0xfb,0xa8,0xaf,0x4f,0x33,
    0x63,0xdf,0x9c,0x9a,0x89,0x2e,0x13,0x59,0xfc,0xcb,0x59,0xb9,0x05,0xff,0x2d,0xb0,
    0x97,0x59,0x69,0x09,0xbe,0xd8,0xd9,0xc8,0x3d,0xd6,0x1a,0x4c,0xce,0xd1,0x69,0xe7,
    0xa3,0x2d,0xbc,0xcf,0x39,0xfb,0xd6,0x3e,0xaf,0xc0,0x63,0xd2,0xa7,0x36,0xf8,0x96,
    0x3a,0xb4,0xa7,0x37,0xad,0xf0,0x2d,0x73,0xd1,0x01,0x7c,0x24,0xf2,0xad,0x60,0xba,
    0xa7,0xa3,0xd9,0x23,0x7c,0x3b,0x62,0x73,0xd6,0xf9,0xd6,0x18,0x6d,0x0d,0xff,0xdb,
    0xe0,0xdf,0xc9,0xf0,0xbf,0x1d,0x5c,0xf9,0xdf,0x01,0xa6,0xfc,0xbb,0x18,0xfe,0xa2,
    0xeb,0xec,0x56,0x17,0x7c,0x77,0x36,0x5c,0xee,0x84,0x4b,0x57,0xc3,0xff,0x2e,0x70,
    0xe5,0xdf,0x0d,0x4c,0xf7,0x74,0x37,0x7b,0x84,0x7f,0x77,0x6c,0x84,0xbf,0xc6,0xe8,
    0x62,0xf8,0xdf,0x0d,0xff,0x2c,0xc3,0xff,0x1e,0x70,0xe5,0xdf,0x03,0x4c,0xf9,0xf7,
    0x32,0xfc,0x45,0xd7,0xd3,0xad,0x5e,0xf8,0xee,0x69,0xfa,0xde,0x1b,0x2e,0x32,0x77,
    0x22,0xf7,0x01,0xeb,0x6d,0xee,0x27,0x9d,0x89,0x3e,0x70,0x54,0x3f,0xbd,0xf0,0xd3,
    0xdf,0xcf,0x66,0xec,0xbe,0xd2,0x99,0xbc,0x0f,0xce,0x83,0x4c,0xac,0xfb,0xc1,0x55,
    0x1e,0x4c,0xec,0xd1,0xcc,0xe8,0x10,0x6c,0x06,0xe3,0x47,0xee,0xb4,0x07,0xf1,0x33,
    0xd4,0xd4,0x77,0x18,0x78,0x37,0xc7,0x59,0xce,0xce,0x43,0xc4,0x1f,0xc2,0xfd,0x36,
    0x0c,0xce,0xfd,0xd0,0x69,0x1d,0x1f,0xc6,0xd7,0x70,0x53,0xc7,0x47,0xc0,0xb5,0x8e,
    0x8f,0x82,0x69,0x1d,0x47,0x9a,0x3a,0x8a,0x6e,0x84,0xef,0x6b,0x2c,0xff,0x11,0xf8,
    0x4e,0xf2,0x39,0xc4,0xee,0x14,0x9d,0x63,0xb9,0xcf,0xc6,0x80,0x0b,0x97,0x51,0xc8,
    0xf5,0x9c,0x7d,0xa2,0x3f,0x97,0xb1,0xbb,0x79,0x94,0xf1,0x31,0xd6,0xf8,0x90,0x3d,
    0x63,0xb1,0x53,0xfd,0x78,0xf4,0x5d,0x4d,0x8c,0xc7,0xc1,0xc5,0x7e,0x1c,0xb2,0xc6,
    0x98,0x40,0x8c,0x71,0xc6,0x47,0xb6,0xf1,0x21,0x7b,0xb2,0xb1,0x53,0xfd,0x13,0xe8,
    0x27,0x99,0x18,0x4f,0x82,0x8b,0xfd,0x44,0x64,0x8d,0xf1,0x14,0x31,0x26,0x1a,0x1f,
    0x93,0x8d,0x0f,0xd9,0x33,0x19,0x3b,0x99,0x1d,0xad,0xdd,0x48,0xd3,0x97,0xa7,0xe9,
    0xcb,0x14,0xd3,0x97,0x67,0xc0,0xb5,0x2f,0xcf,0x82,0x69,0x5f,0xa6,0x99,0xbe,0x88,
    0x6e,0xaa,0x5b,0x73,0xf1,0x3d,0xd5,0x70,0x79,0x0e,0x2e,0xd3,0x4d,0x3e,0x33,0xc0,
    0xf5,0xee,0x9d,0x89,0x4d,0x1b,0xf7,0x6b,0x25,0xbf,0x7b,0xb3,0xc0,0x66,0x9a,0xbb,
    0x37,0xe2,0xf3,0x4a,0xf0,0xfa,0xd9,0xd8,0xcc,0x30,0x3e,0x5e,0xc8,0xf5,0x91,0xd7,
    0xcb,0x73,0xc0,0x66,0xf3,0x3b,0x95,0x60,0x7e,0x4f,0x75,0x36,0xe7,0x50,0x93,0x69,
    0xf0,0x9e,0x6b,0x6a,0xf2,0x22,0x35,0x99,0x67,0x6a,0xf2,0x12,0xb8,0xd6,0xe4,0x65,
    0x30,0xad,0xc9,0x02,0x53,0x13,0xd1,0xcd,0x77,0x6b,0x01,0xbe,0xe7,0x9b,0x9a,0xbc,
    0x72,0x99,0x9a,0xbc,0x0a,0xbe,0x06,0xdf,0xaf,0x81,0x2d,0x84,0xa3,0xfa,0x91,0xcf,
    0x53,0xce,0x8b,0xd8,0xbc,0x0e,0x87,0xb9,0xd8,0xcf,0x87,0xc7,0x62,0xc3,0x43,0x6c,
    0x16,0x79,0xce,0xb1,0xfd,0x8b,0x0c,0x8f,0x37,0x2e,0xc3,0xe3,0x4d,0x70,0xad,0xeb,
    0x92,0x50,0x6f,0xde,0x02,0x5b,0x12,0xea,0x4d,0x5b,0xb7,0x5b,0xf4,0x4b,0xf1,0xa1,
    0x2b,0x9b,0x9e,0x2d,0x63,0xef,0x52,0xe3,0xfb,0xed,0x50,0xcf,0x96,0x83,0x2d,0xfb,
    0x8f,0x9e,0x2d,0xa7,0x1e,0x9a,0xcf,0xe2,0x50,0x0f,0xa7,0x19,0xff,0xef,0xe0,0xbf,
    0x1d,0x67,0xe5,0x5d,0xb0,0xc0,0x60,0x2b,0xc1,0xe2,0x0c,0xb6,0x0a,0x2c,0x62,0xb0,
    0xd5,0x60,0x51,0x9f,0x6b,0xec,0xde,0x5b,0x83,0xcf,0x95,0xec,0x59,0x0d,0xcf,0x15,
    0xe8,0x74,0x96,0xd6,0x31,0x4b,0x6b,0xcd,0x2c,0xbd,0x07,0xae,0xb3,0xf4,0x3e,0x98,
    0xce,0xd2,0x06,0xd3,0x43,0xd1,0xad,0x77,0x6b,0x03,0x39,0xae,0x37,0x3d,0xfc,0x80,
    0x67,0x21,0x7b,0xef,0x7d,0x08,0x2e,0x5c,0x36,0x22,0xeb,0x7d,0xf1,0x11,0xcf,0xc9,
    0x1b,0x8d,0x8f,0x4d,0xc6,0x87,0xec,0xd9,0x84,0x9d,0xea,0xb7,0xa0,0xb7,0xf7,0xde,
    0xc7,0xe0,0x62,0xbf,0x19,0x59,0x63,0x7c,0x42,0x8c,0xcd,0xc6,0xc7,0x56,0xe3,0x43,
    0xf6,0x6c,0xc5,0x4e,0xf5,0x9f,0xa2,0xb7,0xf7,0xde,0x67,0xe0,0x62,0xbf,0x0d,0x59,
    0x63,0x7c,0x4e,0x8c,0x6d,0xc6,0xc7,0x76,0xe3,0x43,0xf6,0x6c,0xc7,0x4e,0xe6,0x43,
    0x6b,0xb7,0xc1,0xf4,0xe5,0x0b,0xfa,0xb2,0xc3,0xf4,0xe5,0x4b,0x70,0xed,0xcb,0x57,
    0x60,0xda,0x97,0x1c,0xd3,0x17,0xd1,0xed,0x74,0x6b,0x0f,0xbe,0x77,0x9a,0xd9,0xdb,
    0x05,0x17,0x7d,0x9e,0xdc,0x0d,0xb6,0xcb,0x3c,0x33,0xab,0xed,0xd7,0xb9,0xb6,0xb1,
    0x73,0xf0,0x0d,0xd8,0x6e,0x73,0x0e,0x22,0xe6,0x1c,0xac,0xc0,0x46,0xf2,0xca,0x21,
    0xf6,0x1e,0x93,0xd7,0xb7,0xe4,0xb5,0xd7,0xe4,0xf5,0x1d,0xb8,0xe6,0xf5,0x3d,0x98,
    0xe6,0xb5,0xdf,0xe4,0x25,0xba,0x7d,0x6e,0x1d,0xc4,0xf7,0x3e,0x53,0xe3,0x1f,0xe0,
    0x6a,0xef,0x8c,0x1f,0xc1,0xd5,0xe6,0x40,0x68,0x9e,0x0e,0x60,0x23,0x7c,0xf7,0xe3,
    0xf3,0xa0,0x79,0xc6,0xf8,0x09,0xbe,0x87,0xcd,0x33,0xc6,0xcf,0xe0,0xb2,0xff,0x10,
    0xb2,0xea,0x7e,0xe1,0xf9,0x7d,0x8b,0xdb,0x2f,0xf2,0xaf,0x60,0x43,0x4d,0x7e,0xbf,
    0x81,0x0f,0x22,0xbf,0xa3,0x26,0x3f,0xd1,0x1d,0x71,0xeb,0x28,0x5c,0x8e,0x18,0xee,
    0xc7,0x42,0x73,0x7a,0xcc,0xdc,0xc1,0x6a,0x7f,0xd4,0x70,0xf9,0x3d,0xc4,0xe5,0x0f,
    0xb0,0x16,0x86,0xcb,0x9f,0xe0,0xca,0xe5,0x84,0xe1,0x22,0xba,0xe3,0x6e,0x9d,0xc0,
    0xf7,0x71,0xc3,0xe5,0x64,0x68,0x9e,0x4f,0x1a,0x2e,0x6a,0x7f,0xc2,0x70,0x39,0x15,
    0xe2,0xf2,0x17,0xd8,0x0e,0xc3,0xe5,0x34,0xb8,0x72,0x39,0x6b,0xb8,0x9c,0xf6,0x3e,
    0x03,0x8f,0x89,0xef,0x33,0x86,0xcb,0x79,0xd3,0x77,0xe1,0x72,0x9e,0xff,0x17,0x85,
    0x8b,0xda,0x9f,0x0d,0xf5,0x78,0x7f,0x68,0x46,0x73,0xcc,0xcc,0xff,0x8d,0x3f,0xf1,
    0x75,0x11,0xf9,0xa2,0xbb,0x85,0xeb,0xba,0x55,0x87,0x33,0x9e,0x0f,0x6e,0x79,0xfc,
    0xff,0xa1,0x51,0xcf,0x23,0x2f,0xbe,0xf2,0x9b,0xf9,0x2b,0x0c,0xbe,0x8e,0x1c,0x8b,
    0x81,0x15,0x21,0xc7,0x12,0x26,0xc7,0x62,0xfe,0x5d,0x92,0xbc,0x17,0x88,0xf9,0x29,
    0x6e,0xfc,0x94,0xc4,0xcf,0x78,0xe2,0x97,0x06,0x2b,0xe5,0xf9,0x45,0xbc,0x2c,0x7b,
    0xca,0x98,0x3d,0x65,0xd9,0x53,0xc0,0xb1,0x4b,0xe4,0x3d,0x5c,0x1c,0x78,0x59,0xde,
    0x23,0xa9,0xbf,0x0a,0xe8,0xcb,0xfb,0x67,0xcd,0x84,0xdc,0x77,0x57,0x15,0x78,0x9f,
    0x24,0x31,0x2a,0x11,0x43,0x38,0x5f,0x0a,0xd5,0xa3,0xe0,0x65,0xea,0x51,0x00,0xfb,
    0x42,0x86,0x53,0x65,0x70,0xad,0x47,0x15,0xf3,0xee,0x4f,0xea,0x51,0xcd,0xd4,0x43,
    0x74,0x55,0xfd,0x3b,0x80,0x98,0x9f,0xaa,0xc6,0x4f,0x75,0xfc,0x64,0x13,0xbf,0x06,
    0x98,0xd6,0xa3,0x06,0x7b,0x6a,0x9a,0x3d,0xb5,0xd8,0x33,0x86,0x3d,0xd7,0x82,0x55,
    0x34,0x7e,0x92,0xc1,0xcb,0x9b,0xba,0xa5,0x98,0xba,0x25,0xf3,0xfe,0x4c,0x62,0xa4,
    0x10,0xa3,0x9a,0xa9,0xc7,0x3f,0x4d,0x94,0x97,0x10,0xd8,0x15,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
