// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndirectLineLoop.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndirectLineLoop_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0x6b,0x4b,0xd4,0x51,
    0x10,0xc6,0xcf,0x5e,0x5c,0x2f,0xd9,0xae,0x99,0x66,0x91,0x77,0x6b,0x2b,0xab,0xdd,
    0x5e,0xb8,0xdb,0x9a,0x18,0x2e,0x8a,0x5a,0x2c,0x92,0x97,0x42,0x10,0x2c,0x41,0x41,
    0x05,0x17,0xcc,0x4d,0x7b,0x23,0xf9,0x81,0x22,0xfa,0x72,0xdd,0x09,0x9a,0x39,0xfe,
    0x46,0xa6,0x45,0xe1,0x78,0xfe,0xf3,0xcc,0x3c,0xcf,0x5c,0xce,0x39,0x9b,0x4a,0x8e,
    0xb5,0x86,0x54,0x22,0x74,0x84,0xb6,0x70,0x16,0xce,0xff,0xae,0x85,0x64,0x48,0xc8,
    0x7e,0x25,0x64,0xe2,0xbe,0x50,0x5b,0xad,0x15,0x8e,0x1a,0xdb,0x85,0x89,0xd2,0x13,
    0xf5,0x67,0x43,0x2a,0xc6,0xa9,0x2f,0x27,0x31,0x2d,0xb2,0xa7,0x65,0x1d,0x6c,0xed,
    0xd5,0x15,0x1f,0x91,0xd5,0x25,0x78,0x3a,0x6a,0x85,0x30,0x43,0x6c,0xd4,0x12,0xb4,
    0x5d,0xf6,0x0c,0x9c,0x45,0xf9,0xdf,0x41,0xde,0x9b,0xd1,0x6e,0xb9,0xb0,0xc7,0xd8,
    0x17,0x24,0x9f,0x62,0x49,0xf8,0x9d,0xb2,0x8f,0x5e,0xf8,0xce,0xed,0x11,0x6c,0xe5,
    0xe7,0x9a,0xf8,0x86,0x25,0xc0,0xd2,0x0e,0x4b,0x82,0xb5,0x91,0x27,0xe7,0xf2,0x8c,
    0xc4,0x19,0x84,0xd0,0x8f,0x5d,0xfa,0xaf,0xee,0x96,0x50,0xbe,0xa4,0xce,0xb2,0xe3,
    0x57,0x9a,0xea,0xac,0x50,0xa7,0xf9,0x97,0x9b,0xf4,0x56,0x2e,0xd1,0x5b,0x71,0xf1,
    0x6b,0x4d,0x7a,0x6b,0xe8,0xd9,0x5c,0x8f,0xa9,0xf7,0x96,0xac,0xeb,0xc2,0x4a,0x46,
    0x7f,0x2a,0x9e,0x96,0x7e,0xf7,0x4a,0x8c,0xe6,0x1b,0x46,0x63,0x40,0x3c,0x76,0x16,
    0x83,0xcc,0xb8,0x3d,0xfa,0xd3,0x51,0x47,0xe7,0xaa,0xd8,0x94,0xb3,0x3b,0xd1,0xb9,
    0x8a,0x8e,0xe6,0x7e,0x88,0x9d,0x45,0x77,0x90,0xd9,0x66,0xdc,0x52,0xcd,0x2e,0xf4,
    0x73,0x68,0x76,0x71,0x3f,0x2c,0x67,0x37,0xdf,0x16,0xdf,0x4b,0xbe,0x0c,0x39,0x74,
    0xbf,0x4d,0x2f,0x7d,0x62,0x0f,0xe1,0x4b,0x11,0x6f,0xf5,0x0c,0xa1,0x3f,0xec,0xe6,
    0x63,0x7c,0x9b,0x9f,0xc6,0x8f,0xe1,0xf3,0xfa,0x79,0xb0,0x1e,0xc9,0x72,0x8f,0x19,
    0x95,0xdc,0x8c,0xf4,0x7c,0x4b,0xf0,0x9f,0x52,0x5f,0x99,0x7c,0x6a,0x57,0xc0,0x6c,
    0x26,0x93,0xd4,0x6b,0xf6,0x2c,0xfa,0xaa,0xbb,0xec,0x74,0xf5,0x9c,0x97,0xd1,0x5d,
    0x45,0x63,0x05,0x5d,0xb5,0xd7,0x9c,0xae,0x72,0x76,0xe9,0xdb,0xec,0x03,0xee,0x91,
    0xd9,0x1f,0x78,0x77,0x8f,0xc4,0xd2,0x79,0x1c,0x83,0xe5,0x59,0x65,0x39,0xa3,0x24,
    0x9c,0x80,0xd6,0x4f,0x41,0xf4,0x2d,0xff,0x10,0xeb,0x04,0xfc,0x8f,0x7c,0xeb,0xcc,
    0x3e,0xe2,0xd7,0xbd,0x2a,0x51,0xdd,0xf1,0x8e,0x9d,0x9f,0x9f,0x9e,0xfb,0x34,0x79,
    0x7b,0xc0,0xab,0x62,0xe9,0xf9,0xdd,0xa0,0xee,0x2c,0x3e,0x8b,0xeb,0xc3,0x77,0x26,
    0x5a,0x19,0xde,0x58,0x0f,0xe7,0x6b,0xdc,0x01,0xc7,0xed,0x77,0xdc,0x41,0x7c,0x5a,
    0x87,0x9e,0xe1,0x1d,0xce,0x79,0xd4,0xc5,0xdc,0x05,0xff,0x22,0x31,0x7a,0x8e,0xf7,
    0xc1,0xf2,0xf4,0x37,0x4e,0x7f,0xbf,0x25,0x5e,0x7d,0x0f,0x64,0x8d,0xd3,0xa3,0x7e,
    0xff,0x92,0xfd,0x04,0x7b,0x1c,0xfb,0x31,0xb6,0xee,0xdf,0x42,0x6b,0xcc,0x73,0x4a,
    0x5e,0x8d,0x99,0x93,0x55,0x90,0xf5,0x95,0x9c,0x13,0xf8,0xb5,0xd7,0xef,0x92,0xa7,
    0x88,0xdf,0xf2,0x4e,0x60,0x17,0xd1,0x2d,0xb8,0xd9,0x3e,0x63,0xb6,0x93,0xae,0xa7,
    0x29,0x70,0x9b,0xd9,0x34,0xd8,0xa9,0xc3,0x66,0x98,0xcf,0xa9,0x9b,0x63,0x95,0x7b,
    0x99,0x85,0xf3,0x5c,0xfa,0xaf,0x12,0x6b,0xbc,0x39,0x38,0xb3,0x4d,0xbd,0x6a,0x6d,
    0x9f,0xe9,0x67,0x9e,0x5e,0x6c,0x86,0x8b,0xae,0x97,0xf9,0xf8,0x1b,0x14,0x22,0xa6,
    0xbc,0x05,0xd7,0xcb,0x8b,0x4b,0x7a,0x79,0x09,0x6e,0xf9,0x6b,0x60,0x7d,0xae,0xee,
    0x25,0x57,0x77,0x8d,0xba,0x97,0xe8,0xcf,0x78,0xaf,0xe0,0x58,0xdd,0x96,0x7f,0xd1,
    0x9d,0xd1,0x27,0x62,0x8a,0xc4,0xfb,0xda,0x5e,0x53,0xdb,0xac,0xab,0xed,0x0d,0xb8,
    0xd5,0xb1,0xce,0xfb,0xcb,0xe2,0xd3,0x3a,0xd6,0xd1,0xb5,0x3a,0x36,0xf0,0xe5,0x1d,
    0xb6,0xc9,0x9d,0xce,0x3b,0xad,0xb7,0xee,0x4e,0x6f,0xba,0x9c,0xef,0xf0,0x59,0xdc,
    0x96,0xcb,0xb9,0x41,0xce,0x2d,0xe2,0x4c,0x7f,0x9b,0x9c,0xfe,0xcd,0xec,0x38,0xde,
    0x36,0xbc,0x1d,0xee,0xa8,0xf1,0xf6,0xe0,0xed,0x3a,0xde,0xbe,0xe3,0xed,0xc1,0xdb,
    0x6f,0xe2,0xd5,0xe1,0x1d,0x38,0xec,0x90,0x1e,0xbd,0xd6,0x7b,0xd7,0xe3,0xa1,0xeb,
    0xf1,0x08,0x9f,0xc5,0x35,0x5c,0xce,0x3a,0x39,0x1b,0xc4,0xf9,0xf7,0xa7,0xfb,0x5f,
    0xf9,0xd5,0xac,0xc8,0xfa,0x07,0x89,0x64,0x59,0x9c,0xb0,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)readonly buffer srcIndirectBuf
// {
//
//     uint indirectBuf[];
// };
//
// layout(set = 0, binding = 1)buffer dstIndirectBuf
// {
//
//     uint indexIndirectBuf[];
// };
//
// layout(set = 0, binding = 2)buffer dstIndexBuf
// {
//
//     uint dstData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint indirectBufferOffsetDiv4;
//
//     uint indexIndirectBufOffsetDiv4;
//
//     uint dstDataOffsetDiv4;
// };
//
// void main()
// {
//
//     uint vertexCount = indirectBuf[indirectBufferOffsetDiv4];
//     uint firstVertex = indirectBuf[indirectBufferOffsetDiv4 + 2];
//
//     if(gl_GlobalInvocationID . x >= 1)
//         return;
//
//     for(uint i = 0;i < vertexCount;i ++)
//     {
//         dstData[dstDataOffsetDiv4 + i]= firstVertex + i;
//     }
//     if(vertexCount > 1)
//     {
//         dstData[dstDataOffsetDiv4 + vertexCount]= firstVertex;
//         vertexCount ++;
//     }
//
//     indexIndirectBuf[indexIndirectBufOffsetDiv4]= vertexCount;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 1]= indirectBuf[indirectBufferOffsetDiv4 + 1];
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 2]= 0;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 3]= 0;
//     indexIndirectBuf[indexIndirectBufOffsetDiv4 + 4]= indirectBuf[indirectBufferOffsetDiv4 + 3];
// }
