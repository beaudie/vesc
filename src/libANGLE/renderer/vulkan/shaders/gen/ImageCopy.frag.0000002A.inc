// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000002A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000002A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0xcf,0xbd,0x17,0xee,0x45,0x90,0x87,0x80,0x12,0x2a,0x96,0x28,0x3d,0xc4,
    0x10,0x0b,0xcc,0x04,0x54,0x32,0x92,0x8c,0x52,0xd1,0xac,0xc4,0x32,0x92,0x44,0x0b,
    0xad,0xc4,0x4c,0x93,0xf2,0x99,0x92,0x96,0x56,0x52,0x3e,0x7a,0x89,0x95,0x68,0x2a,
    0x6a,0xfd,0x11,0xfd,0x45,0x4d,0x8f,0x99,0x66,0xda,0xeb,0xdc,0xdf,0x62,0xbe,0xee,
    0x58,0xdd,0x99,0x3d,0xe7,0xec,0x6f,0xad,0xfd,0xed,0x6f,0xad,0xbd,0xf6,0x3a,0x37,
    0x95,0x9c,0x93,0x89,0x52,0x89,0xa8,0x30,0x2a,0x88,0x7e,0x8e,0xb2,0xbf,0x29,0x51,
    0x32,0x4a,0x84,0x67,0x51,0x94,0x8e,0x9f,0x2b,0xbb,0xd6,0x75,0x35,0x0c,0xee,0xee,
    0x6b,0x68,0x6a,0x6e,0x34,0x7b,0x49,0x94,0x8a,0xfd,0xcc,0x56,0x1a,0x65,0xa2,0xbc,
    0xf0,0xb4,0xb1,0xa3,0x77,0xfb,0x4e,0xc3,0x8b,0xc3,0xb8,0x1d,0x46,0x59,0xf0,0x33,
    0x3c,0x63,0x1c,0xe1,0xad,0x38,0xe6,0xb4,0x35,0x51,0xd4,0x19,0xe5,0x47,0x15,0xec,
    0x37,0x87,0xa7,0x63,0x09,0xb0,0x02,0xc1,0x92,0x60,0x65,0x82,0xa5,0xc0,0x2a,0x05,
    0xcb,0x03,0xbb,0x4b,0xb0,0x7c,0xb0,0x99,0x82,0xa5,0xc1,0xee,0x11,0x2c,0x03,0x36,
    0x57,0xb0,0x02,0xb0,0xfb,0x05,0x9b,0x04,0x36,0x5f,0xb0,0x42,0xb0,0x46,0xc1,0x8a,
    0xc0,0x9a,0x04,0x9b,0x0c,0xb6,0x58,0xb0,0x62,0xb0,0xd6,0x38,0x4f,0xa9,0x89,0x78,
    0x2d,0x67,0x2b,0xc2,0xb3,0x96,0xfc,0xf8,0x7c,0xb6,0xcc,0x2d,0xcf,0xb3,0x98,0x57,
    0x84,0x55,0xc9,0xd8,0x9e,0x8a,0x73,0x63,0xef,0x53,0x83,0x4f,0x9a,0x38,0x2d,0xaf,
    0x55,0x61,0x9e,0x21,0xfe,0x64,0x8c,0xe7,0xc5,0x31,0x66,0x18,0xd3,0xc2,0xca,0x42,
    0xfc,0xcd,0xb7,0x88,0xd8,0xf2,0xf0,0x9d,0x0c,0x8f,0xe1,0x2d,0xcc,0x8b,0x85,0xbb,
    0x04,0x7f,0xdf,0xbb,0x1c,0xae,0x28,0xd6,0x59,0x36,0x91,0x67,0xd7,0x60,0xa3,0xfc,
    0x7f,0x86,0xfb,0xd8,0xfe,0x95,0xe4,0xbf,0x82,0xfd,0x2b,0xe3,0x7d,0xb2,0x58,0x3d,
    0xb1,0x4e,0x43,0x8f,0xf9,0x57,0x61,0xcb,0x88,0xbd,0x46,0xe2,0x99,0x85,0xbd,0x3c,
    0xae,0xa3,0x64,0x9c,0xdb,0x7a,0x74,0x7b,0xde,0xcd,0xef,0x5e,0xd1,0xec,0x3c,0xf5,
    0xd4,0x96,0xfb,0x2f,0x64,0x5f,0xb7,0x2f,0x22,0x37,0x96,0x97,0xa5,0xec,0xe1,0xfb,
    0x2e,0x83,0xcf,0xf0,0xea,0xa0,0xa0,0x1d,0x7b,0x32,0xfa,0xe7,0x2f,0x21,0x1a,0x1e,
    0xe3,0xbd,0x9d,0xd8,0x6d,0xbe,0x02,0xcc,0xf7,0xec,0xc8,0x99,0xaf,0xe2,0x9e,0xd8,
    0xfa,0xa7,0x88,0x35,0x8d,0xa6,0x67,0x78,0x4f,0x89,0x7f,0x37,0x1a,0x7c,0xbe,0x41,
    0x62,0x36,0x7d,0x9b,0x84,0xef,0x45,0x62,0x28,0x87,0xef,0x65,0xde,0x95,0x6f,0x5b,
    0x4e,0xee,0x8f,0x70,0xa7,0xcc,0xff,0x43,0x89,0xd9,0xed,0xa7,0x73,0xce,0xf2,0x02,
    0x77,0xc6,0xf7,0xbf,0x22,0x75,0x7b,0x8b,0xbd,0x96,0x92,0x8f,0x5b,0xf4,0x9d,0x54,
    0x9c,0xfb,0xfc,0xd8,0x2f,0x8f,0x7c,0x18,0xf6,0x7b,0x40,0xf2,0xf1,0x2d,0x90,0xba,
    0xf0,0xf9,0x0c,0x99,0xdb,0xf9,0x2c,0xcf,0x99,0x0f,0xc9,0xdc,0xea,0xe1,0x3c,0xf3,
    0x36,0xee,0x49,0x29,0xe7,0xbd,0x3a,0xa0,0x25,0xf4,0xaa,0x52,0x86,0x9f,0xe5,0x4e,
    0xee,0xdf,0x14,0xec,0xed,0x41,0x51,0x15,0xfd,0x6a,0x2a,0xb5,0xdb,0x86,0x4f,0x35,
    0xf8,0xe1,0xe0,0x63,0xf3,0xe9,0xac,0xab,0x8e,0x63,0x4e,0xc5,0xfa,0xa7,0x8b,0xff,
    0x4c,0x62,0x32,0xdb,0x0c,0xe6,0xc6,0x6f,0x35,0x7e,0x37,0xfc,0x35,0xf8,0xfb,0xbd,
    0x34,0xfc,0x5a,0xf0,0x99,0x2d,0xfd,0xd0,0xea,0xfe,0xb7,0xc0,0x51,0x87,0xee,0x3f,
    0x83,0xbf,0xf7,0xc5,0x3a,0xf2,0x38,0x17,0x6e,0xcb,0xc3,0x7d,0xe4,0xae,0x16,0xee,
    0x34,0xfd,0xd2,0xf0,0xf7,0x99,0x3f,0x00,0xe6,0x6b,0xe6,0xc9,0x1a,0xd3,0x3b,0x0f,
    0x9f,0x3f,0x02,0xb7,0xef,0x51,0x27,0xfa,0xe7,0xa3,0xbf,0x5e,0xf4,0x3f,0x08,0xee,
    0xfa,0x1b,0xc0,0x5c,0x7f,0xa3,0xe8,0x37,0xdb,0x02,0xfa,0xb3,0x71,0x2f,0x10,0x2d,
    0x0f,0xa1,0x65,0xa1,0xe8,0x7f,0x18,0xdc,0xf5,0x37,0x81,0xf9,0x9a,0x66,0x59,0x63,
    0xfa,0x9b,0xf1,0x31,0xfd,0xbe,0x47,0xa3,0xe8,0x7f,0x04,0xfd,0x8b,0x44,0xff,0x62,
    0x70,0xd7,0xff,0x28,0x98,0xeb,0x6f,0x11,0xfd,0x66,0x5b,0x12,0xd7,0x5e,0x96,0x7b,
    0x89,0x9c,0x7b,0x2b,0x5a,0xac,0xee,0xb2,0xf5,0x98,0xc5,0x5a,0xa5,0x7f,0x78,0x4d,
    0xb4,0xa1,0xd1,0x79,0x5a,0xe0,0xb1,0x9e,0xf2,0x38,0xfd,0xc4,0x6b,0xf2,0x09,0x34,
    0x77,0xc8,0x5e,0x2b,0xc1,0x7d,0xde,0xc9,0xde,0x07,0xa9,0xd1,0x27,0xf1,0xe9,0x84,
    0xc7,0x7a,0x4e,0x17,0x3c,0xab,0x24,0xbf,0x4f,0x83,0xaf,0x0d,0x3e,0xe9,0x58,0x7b,
    0x76,0x6d,0x24,0xd8,0x1a,0xb0,0x44,0xfc,0x9e,0x8e,0xfb,0xd5,0x5a,0x7c,0xd7,0xc0,
    0xe1,0x7b,0xac,0x63,0x8f,0x6e,0xd9,0x63,0x3d,0xf8,0xe6,0xa0,0xcc,0x7a,0xc4,0xb3,
    0xc4,0xb8,0x96,0x1e,0xb2,0x9e,0xbc,0x2c,0xc7,0xe6,0x67,0xf5,0x1c,0x5c,0x1b,0xe4,
    0xac,0x9e,0x07,0xf7,0xb3,0x7a,0x01,0xcc,0xcf,0xaa,0x47,0xce,0xca,0x6c,0x1b,0xc3,
    0xe8,0x27,0xc7,0x1b,0xe1,0xb6,0x7e,0xf9,0x12,0x7d,0x65,0x93,0x70,0x6f,0x06,0x6f,
    0xe3,0x3b,0xd1,0x8b,0xcf,0xea,0xd0,0x95,0xac,0xa7,0xbe,0x02,0xd6,0x2b,0x7d,0x24,
    0x49,0x4e,0xcc,0xbe,0x05,0x0e,0x1f,0x47,0xc3,0x5e,0x86,0xf7,0xb1,0x76,0x8b,0x70,
    0xbf,0x3a,0xc1,0x3d,0x29,0x9e,0x6f,0x05,0xeb,0xa3,0x57,0xe6,0xcb,0x37,0xc1,0x73,
    0xb3,0x95,0x9a,0xe9,0x21,0x9e,0x7e,0xc9,0xd5,0x76,0x72,0xb5,0x4d,0xe2,0x79,0x0d,
    0xdc,0x73,0xf5,0x3a,0x98,0xe7,0x6a,0x87,0xe4,0xca,0x6c,0x03,0xf6,0xdf,0x11,0xee,
    0x01,0xc9,0xd5,0xce,0x3b,0xe4,0xea,0x0d,0xf0,0xeb,0x70,0xbf,0x09,0x56,0x8b,0x46,
    0xe7,0xb1,0xe7,0xaf,0xe1,0xdc,0xcd,0xe7,0x2d,0x34,0xf4,0xe3,0x3f,0x80,0x8e,0x41,
    0xd1,0x61,0x3e,0xbb,0xc2,0x18,0x64,0xfd,0x2e,0xd1,0xb1,0xfb,0x0e,0x3a,0xde,0x06,
    0xf7,0xbc,0xee,0xc9,0x39,0xb3,0x77,0xc0,0xf6,0xfc,0xcb,0x99,0xed,0x85,0xc3,0xc7,
    0x31,0xce,0x6c,0x1f,0x6b,0xf7,0x0a,0xf7,0xbb,0x39,0x67,0xb6,0x1f,0x6c,0xdf,0x7f,
    0x9c,0xd9,0x7e,0xf2,0xe1,0xf1,0x0c,0xe6,0x9c,0x61,0x8f,0xf0,0xbf,0x07,0xbf,0xdd,
    0xbb,0xf2,0xb8,0xe7,0x65,0xb1,0x48,0xb0,0x03,0x60,0x09,0xc1,0x0e,0x82,0x25,0x05,
    0x3b,0x04,0x96,0x8a,0x63,0xcd,0xde,0xbb,0xc3,0x70,0x1e,0x60,0xcd,0x21,0x74,0x0e,
    0x61,0xf3,0x5a,0x3a,0x4a,0x2d,0x1d,0x91,0x3c,0x7f,0x00,0xee,0xb5,0x74,0x0c,0xcc,
    0x6b,0x69,0x58,0xce,0xd0,0x6c,0xc7,0xc3,0x38,0x45,0x8c,0xc7,0x25,0xc6,0x13,0x7c,
    0xbf,0xad,0x47,0xda,0xff,0x8e,0x93,0x60,0x27,0xe4,0xff,0x81,0xfb,0x7e,0x34,0xe1,
    0x9b,0xcd,0xf7,0xc7,0x60,0x27,0x25,0xdf,0x49,0xc9,0xf7,0x10,0x3e,0x96,0xdf,0x61,
    0xf6,0x3e,0x25,0x71,0x7d,0x42,0x5c,0xa7,0x25,0xae,0x4f,0xc1,0x3d,0xae,0xcf,0xc0,
    0x3c,0xae,0x11,0x89,0xcb,0x6c,0x67,0xc2,0x38,0x07,0xf7,0x19,0xa9,0xcd,0xcf,0xd1,
    0xaa,0xb5,0xf9,0x05,0xb8,0xfb,0x9c,0xc5,0xc7,0xbf,0xb5,0x67,0xf1,0x31,0xbd,0x23,
    0x70,0x9e,0x93,0x5e,0xfa,0x25,0x7a,0x2f,0x48,0x2f,0xfd,0x0a,0xdc,0xd6,0x9f,0x67,
    0xee,0xb6,0xaf,0xf9,0x2f,0xf4,0x0b,0x7d,0xfb,0x1b,0xb0,0x6e,0x89,0xef,0x5b,0xf0,
    0x0e,0xe2,0x1b,0x95,0xf8,0xcc,0x76,0x31,0x8c,0x51,0xb4,0x5c,0x14,0xed,0x97,0xd0,
    0xee,0xdf,0xd9,0x4b,0x72,0xd7,0xdd,0x7f,0x54,0xb4,0x7c,0x97,0xa3,0xe5,0x7b,0xb0,
    0x1a,0xd1,0xf2,0x03,0xb8,0x6b,0x19,0x13,0x2d,0x66,0xbb,0x1c,0xc6,0x18,0xdc,0x97,
    0x45,0xcb,0x55,0xb4,0x5c,0x41,0xcb,0x55,0xd1,0xe2,0xfe,0x63,0xa2,0xe5,0xc7,0x1c,
    0x2d,0xd7,0xc0,0x8e,0x88,0x96,0xeb,0xe0,0xae,0x65,0x5c,0xb4,0x98,0xed,0x46,0x18,
    0xe3,0x70,0xdf,0x10,0x2d,0x37,0xe5,0xdc,0x4d,0xcb,0x4d,0x72,0x64,0x5a,0xdc,0x7f,
    0x3c,0xe7,0x8c,0x47,0x72,0x6a,0x74,0x58,0x6a,0xfe,0x27,0xf8,0x8c,0xeb,0x36,0xf3,
    0xbf,0xc2,0x6d,0x5f,0x1c,0xc6,0xdf,0xd7,0x88,0x76,0x46,0x24,0x10,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
