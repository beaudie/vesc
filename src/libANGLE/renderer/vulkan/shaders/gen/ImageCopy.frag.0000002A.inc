// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000002A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000002A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x4f,0x5c,0x55,
    0x14,0xc6,0xf7,0xcc,0x81,0x19,0x0a,0x72,0x29,0xd0,0x22,0x55,0xaa,0xbd,0x90,0x68,
    0xa8,0x80,0x8a,0x15,0xc1,0x36,0xa1,0x56,0xda,0x28,0x5e,0x2a,0xc6,0xda,0xa2,0xbd,
    0x58,0x88,0x69,0x23,0x28,0x6d,0x85,0xa8,0xe0,0x85,0xaa,0xf1,0x05,0x2b,0xbc,0xd8,
    0xda,0x42,0x0c,0xa9,0x46,0xc1,0x28,0x3c,0x28,0xa4,0x3e,0x98,0xf8,0xa2,0x31,0x46,
    0x6b,0xb0,0xf5,0xf2,0x7f,0x18,0x2f,0x89,0x89,0x6b,0xed,0xf9,0xad,0x66,0x39,0xd1,
    0x74,0x92,0x9d,0x33,0xfb,0x5b,0xb7,0xef,0x5b,0x7b,0x9d,0x3d,0x93,0xa4,0x37,0x64,
    0x43,0x48,0x85,0xe2,0x50,0x14,0x7e,0x0d,0xb9,0xcf,0xca,0x90,0x16,0x24,0xf7,0xbc,
    0x45,0x9e,0x25,0x21,0x13,0xf7,0x3b,0xba,0xba,0xbb,0x1a,0x8f,0x1d,0xef,0x6d,0x6c,
    0xb9,0xad,0x59,0xfd,0xca,0x42,0x12,0xfd,0xd5,0x56,0x1e,0xb2,0xa1,0x40,0x9e,0xba,
    0xfa,0x0f,0x1e,0x1e,0x50,0xbc,0x54,0xd6,0xe7,0xb2,0x2a,0xc4,0x4f,0xf1,0xac,0xe6,
    0x90,0x6f,0xa5,0x31,0xa7,0xc6,0x84,0xb0,0x33,0x14,0x86,0x2a,0xea,0x6e,0xe0,0x69,
    0x58,0x0a,0xac,0xc8,0x61,0x69,0xb0,0x0a,0x87,0x25,0x60,0xd5,0x0e,0x2b,0x00,0xbb,
    0xda,0x61,0x85,0x60,0xd7,0x3a,0x2c,0x03,0x76,0xbd,0xc3,0xb2,0x60,0x1b,0x1d,0x56,
    0x04,0x76,0x83,0xc3,0x56,0x80,0x6d,0x72,0x58,0x31,0x58,0xb3,0xc3,0x4a,0xc0,0x5a,
    0x1c,0x76,0x15,0x58,0xab,0xc3,0x4a,0xc1,0xee,0x8c,0x7d,0x4a,0x2e,0xeb,0xd5,0x9e,
    0x6d,0x97,0xe7,0x7a,0xfa,0x63,0xfb,0x75,0x6e,0xaf,0x7d,0x5e,0xcb,0xbe,0x4a,0xa2,
    0xd2,0xd1,0x9e,0xc4,0xde,0xe8,0xf7,0x55,0xe2,0x93,0x41,0xa7,0xf6,0xb5,0x46,0xf6,
    0x59,0xf4,0xab,0x7d,0xb5,0x78,0x16,0x63,0x57,0x5b,0x09,0x5a,0x0a,0x22,0x56,0x10,
    0xf9,0xa6,0xd0,0xd2,0xce,0xbe,0xd4,0xe5,0x2a,0xc3,0xdf,0x6a,0x55,0x92,0x2b,0x44,
    0x5e,0x15,0x97,0xfb,0x6a,0x35,0x75,0x55,0x5e,0x61,0x99,0x8f,0xd6,0xaf,0xa6,0xdf,
    0x55,0xd4,0xaf,0x8e,0x75,0x72,0x58,0x03,0xda,0x56,0xc3,0x47,0xfd,0x6b,0xb0,0x65,
    0x9d,0xbd,0xce,0xe9,0x59,0x8b,0xbd,0x32,0xce,0x4d,0x3a,0xf6,0xb2,0x01,0xde,0xd6,
    0x67,0x8b,0x6b,0x60,0x76,0xcc,0x7e,0x33,0x75,0xcc,0xbe,0x99,0x5e,0x68,0x1f,0xb6,
    0x92,0x53,0xeb,0xd4,0x4a,0x85,0x0e,0xf6,0xe9,0xf0,0xef,0x4f,0x8a,0xe7,0x35,0xd2,
    0xf7,0x6d,0xf2,0xec,0x80,0xd7,0x5d,0xe0,0xdb,0xd0,0xa9,0xfb,0xed,0x79,0x7c,0x3a,
    0xf3,0xf6,0x5d,0xbc,0x03,0x1a,0x7f,0x1f,0xba,0x32,0xf0,0xd9,0xc5,0xb9,0x24,0xec,
    0x77,0x63,0x4b,0x5c,0x7c,0x0f,0xfc,0x6c,0x7f,0xc0,0xc5,0x1f,0x81,0xbf,0xf7,0x3f,
    0x9a,0xd7,0xd7,0x71,0xde,0x0f,0xdb,0x9f,0xce,0x3b,0x97,0x73,0xcc,0xbb,0xf2,0x3b,
    0x4f,0xae,0xad,0xe8,0x3b,0xcf,0x1d,0x91,0xc4,0x3e,0x16,0x46,0x1e,0x05,0xe8,0x53,
    0xec,0x0f,0x41,0xb4,0xf7,0x5b,0x98,0xc9,0x72,0x7a,0xfd,0x80,0x30,0x28,0xe3,0x1e,
    0x28,0x67,0x59,0x5f,0x07,0x98,0xed,0x95,0xd8,0x3b,0x24,0x43,0x0d,0x77,0xc1,0x2a,
    0xe6,0x64,0x0b,0x3e,0xb5,0xe0,0x63,0xe2,0xa3,0xfb,0x35,0xc4,0xd5,0x12,0xa7,0x73,
    0x72,0x1d,0x71,0x75,0xc4,0xd9,0x6c,0x2b,0x3e,0x27,0x3e,0xeb,0xdc,0x1d,0xa2,0xb3,
    0xf3,0xbb,0x30,0xaf,0x87,0xcf,0x5f,0xe2,0x6f,0x77,0x49,0x3d,0x7a,0xf4,0xfb,0x2e,
    0x89,0xcb,0x70,0x9f,0xac,0xc1,0xf7,0x45,0xfa,0x75,0x23,0xf8,0x43,0xb2,0x53,0x4e,
    0x5f,0x80,0x99,0xdf,0x9f,0x92,0xc3,0x72,0xe9,0xf3,0x37,0xf1,0x52,0xbf,0xef,0xf1,
    0x29,0x24,0x66,0xa3,0xd3,0xb0,0x09,0x0d,0x0d,0x4e,0xc3,0x4d,0xe0,0xa6,0xa1,0x11,
    0xcc,0x34,0x34,0x3b,0x0d,0x6a,0x6b,0xe2,0x5e,0xd3,0xba,0x4d,0x4e,0xc3,0xad,0xd4,
    0x4e,0x39,0x0d,0x2d,0xe0,0xa6,0xe1,0x4b,0x30,0xf3,0x53,0x0d,0x96,0xab,0xd9,0x69,
    0xb8,0x80,0x4f,0x3d,0x31,0x4d,0x4e,0xc3,0xed,0x68,0xd8,0xec,0x34,0xb4,0x82,0x9b,
    0x86,0x3b,0xc0,0x4c,0x43,0xbb,0xd3,0xa0,0xb6,0xb6,0x38,0x77,0xb9,0xba,0x6d,0xcc,
    0x51,0x36,0xe6,0xcb,0xd5,0xbe,0xe0,0xde,0x4d,0xe5,0x68,0xbe,0xed,0x8e,0xe3,0x0f,
    0xf8,0x35,0x13,0xd7,0x06,0x1f,0x7d,0x67,0xef,0xe6,0x7d,0xb5,0x99,0xdb,0x01,0xe7,
    0x4e,0x37,0x73,0x3b,0xc1,0x5f,0x66,0xe6,0xee,0x01,0xd3,0xbc,0x4f,0x73,0x97,0xde,
    0x0b,0xae,0x79,0xf4,0x9d,0xbe,0x9f,0x3c,0x5d,0xe4,0xc9,0x44,0xee,0x39,0x5c,0x63,
    0xf4,0x1d,0x7f,0x10,0x4c,0xcf,0xa5,0x38,0xf6,0x3e,0x97,0x27,0x38,0xac,0x1b,0x2c,
    0x15,0xfd,0x33,0xf1,0x7e,0x78,0x18,0xdf,0x6e,0x72,0xf4,0x4a,0x3e,0xbd,0x8f,0x1e,
    0x41,0xcf,0x93,0x12,0xab,0xf7,0xc6,0xa3,0x60,0x9d,0xd4,0xd4,0xd8,0x3d,0xe0,0x6f,
    0x88,0x8f,0xee,0xf7,0x92,0x6f,0x8f,0xe3,0xfe,0x18,0xdc,0x7b,0x1c,0xf7,0xc7,0xc1,
    0x8d,0xfb,0x3e,0xb0,0xdd,0xd2,0x11,0xbd,0x1b,0xf6,0x53,0x7b,0x2f,0x5c,0xf7,0xb9,
    0x39,0x38,0x48,0xbe,0x03,0x6e,0x0e,0x9e,0x00,0xb7,0x39,0x38,0x04,0x66,0x73,0xd0,
    0xe7,0xe6,0xe0,0x50,0xd4,0x18,0xc2,0x20,0x67,0xdb,0x4b,0x7f,0x34,0xcf,0x61,0x6a,
    0x27,0xb1,0x97,0x45,0xf1,0xfe,0x7b,0x0a,0x6c,0xbf,0xbb,0x63,0xd2,0xf4,0x4f,0xed,
    0xfd,0xc4,0xd9,0x7a,0x55,0x72,0x1d,0x89,0xf7,0x50,0x2e,0xb6,0x3f,0xe6,0x5a,0x11,
    0x75,0x3d,0x43,0x9e,0x01,0xee,0xb9,0x42,0x77,0x1f,0xeb,0xbc,0xf5,0xc1,0x69,0xd0,
    0xe9,0x3d,0x86,0xde,0xa3,0x4e,0xef,0x71,0x70,0xd3,0xfb,0x2c,0x98,0xe9,0x1d,0x76,
    0x7a,0xd5,0x36,0x24,0x6b,0x98,0xdc,0x43,0x4e,0xef,0x73,0x4e,0xef,0x47,0xe4,0x7a,
    0x1e,0x7c,0x3d,0x9c,0x2c,0x6e,0x98,0x77,0x40,0x7d,0x5e,0xa0,0xe6,0x20,0xfe,0x43,
    0xd4,0x1d,0x75,0x75,0xd5,0x67,0x44,0xd6,0x28,0xf1,0x23,0xae,0xee,0x4b,0xff,0xd1,
    0xe7,0x57,0xae,0xd0,0xe7,0x31,0xe2,0x6c,0xbd,0x4e,0x9f,0x4f,0x10,0x3b,0xe6,0xfa,
    0xfc,0x1a,0x79,0x4e,0xfc,0x4f,0x9f,0x8d,0xd3,0x28,0x9a,0x34,0xe6,0x47,0x62,0x86,
    0x89,0x1f,0xc9,0x3b,0x93,0x3e,0xe7,0xbb,0xcc,0x59,0xf6,0x12,0x37,0xea,0xce,0xeb,
    0x4d,0xce,0x6b,0xdc,0x9d,0xd7,0x49,0x70,0x3b,0xaf,0xb7,0xc0,0xec,0xbc,0x26,0x5d,
    0xdf,0xd4,0x36,0x21,0xeb,0x14,0x75,0x27,0x9c,0xae,0xb7,0xa9,0xbd,0x8c,0xae,0x2c,
    0x3d,0x32,0x5d,0x93,0xc4,0x9c,0x72,0x7c,0xde,0x81,0xcf,0x69,0xc7,0xe7,0x0c,0xb8,
    0xf1,0x39,0x0b,0x66,0x7c,0xa6,0x1d,0x1f,0xb5,0x4d,0xc9,0x9a,0x21,0xf7,0x94,0x3b,
    0xc7,0x77,0xe1,0x92,0x70,0xd7,0x2b,0xc7,0xaf,0x1d,0x6e,0xf7,0xe8,0x34,0xb1,0x33,
    0xee,0x5e,0x78,0x0f,0x5e,0xe7,0xdc,0xbd,0xf0,0x3e,0xf8,0x57,0xfc,0xb6,0x7c,0x00,
    0xd6,0xe3,0xb8,0x7e,0x08,0xde,0x09,0xd7,0x39,0xc7,0x55,0x6d,0xb3,0xd1,0x37,0x57,
    0x6f,0xd6,0xf1,0xfa,0x06,0x7d,0xcb,0xee,0x37,0xc8,0xfc,0xe6,0xdc,0xd9,0x5e,0xc4,
    0x67,0x86,0x98,0x59,0xc7,0xe7,0x63,0xf8,0xd4,0x39,0x3e,0x9f,0x80,0x1b,0x9f,0x05,
    0xc7,0x47,0x6d,0xf3,0xb2,0x16,0xa8,0x33,0xef,0xf8,0x7c,0x0b,0x9f,0x8b,0x9c,0xa1,
    0xf2,0x31,0xbf,0x05,0xc7,0xe7,0x12,0x3e,0x73,0xc4,0xcc,0x3b,0x3e,0x9f,0xc2,0x67,
    0xdc,0xf1,0xf9,0x0c,0xdc,0xf8,0x2c,0x39,0x3e,0x6a,0x5b,0x94,0xb5,0x44,0x9d,0x45,
    0xc7,0xe7,0x3b,0xfe,0xdb,0x5e,0x72,0xf3,0x64,0x7e,0x4b,0x8e,0xcf,0x2f,0xf8,0x2c,
    0x10,0xb3,0x98,0x77,0xc6,0xd3,0xce,0xf7,0x67,0xe6,0x61,0x8a,0xb8,0xa5,0xbc,0x39,
    0x9d,0x74,0xbe,0x3f,0x31,0xdf,0x13,0xc4,0x4d,0xc7,0xff,0x89,0x49,0xfc,0x7f,0xa8,
    0xb6,0xbf,0xe5,0xd4,0x5a,0x65,0xfd,0x03,0x5f,0xbe,0x7a,0x12,0xb4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
