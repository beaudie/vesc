// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0xdb,0x4f,0x95,0x57,
    0x10,0xc5,0xf7,0xb9,0xe3,0x29,0x20,0x72,0x2d,0xa9,0x17,0x14,0x92,0x1a,0xd4,0x03,
    0x69,0x8b,0x0a,0x16,0xe3,0x2d,0x29,0xb5,0x78,0x29,0xd6,0x4b,0x8c,0xd1,0x78,0x6d,
    0x69,0x8b,0x62,0xac,0x55,0x78,0x50,0x39,0x0f,0xad,0xf0,0x80,0x0a,0x0f,0xb6,0xc2,
    0x83,0x17,0x78,0xb0,0x2a,0x89,0x4d,0xaa,0xf4,0xb5,0x7d,0xf0,0x2f,0xaa,0x55,0x13,
    0x13,0x67,0xb6,0xbf,0x21,0x93,0x43,0x32,0x7e,0x67,0xd6,0x9a,0x3d,0x6b,0xaf,0xf9,
    0xf6,0xb7,0x4d,0x25,0x9b,0x73,0x21,0x24,0x42,0x3e,0x94,0x85,0x7f,0xc3,0xfb,0xbf,
    0x25,0x21,0x29,0x48,0x08,0x1f,0x84,0x6c,0x7c,0x7e,0xd1,0xbb,0xaf,0xb7,0x70,0xe1,
    0xa7,0x53,0x85,0xcf,0x3a,0xda,0x95,0xaf,0x0c,0xa9,0x58,0xa7,0xdc,0x62,0xc9,0xd2,
    0xf2,0xd4,0x18,0x38,0xde,0x7f,0x56,0xf1,0x0a,0x89,0xf3,0x12,0xc3,0x12,0x45,0x89,
    0x31,0x89,0x49,0x89,0x69,0x89,0x59,0x89,0x39,0x89,0x2a,0xe9,0xa1,0x6b,0x72,0xda,
    0x5f,0x7e,0x55,0x44,0x3d,0xed,0x17,0x42,0x4f,0xc8,0x84,0x1a,0xf6,0xd2,0xcc,0xd3,
    0xb0,0x04,0x58,0x99,0xc3,0x92,0x60,0x55,0x0e,0x4b,0x81,0x7d,0xe8,0xb0,0x34,0xd8,
    0x52,0x87,0x65,0xc0,0x9a,0x1c,0x96,0x05,0x6b,0x71,0x58,0x0e,0x6c,0xb5,0xc3,0xca,
    0xc0,0xd6,0x3a,0x6c,0x11,0x58,0x7b,0xf4,0x95,0x5a,0xd8,0x9f,0x7a,0xdc,0x23,0xcf,
    0x55,0xf8,0xb1,0x7c,0xa5,0xcb,0x75,0x66,0xcb,0x5d,0x3e,0x4c,0x9e,0x20,0x2f,0x92,
    0x5b,0xbf,0x31,0xf2,0x14,0xf9,0x24,0x79,0x9a,0x7c,0x9a,0x3c,0x43,0x3e,0x4b,0x9e,
    0x25,0x9f,0x23,0x57,0x6f,0x35,0xd2,0x35,0x19,0xf7,0x93,0x8a,0xfd,0xf4,0x77,0x9d,
    0xd4,0x64,0x99,0x8d,0xee,0xa1,0x41,0xf2,0x1c,0xeb,0x95,0xaf,0x97,0xca,0x3c,0xbc,
    0x72,0xfa,0xfe,0xf2,0xe8,0x37,0xc9,0xbf,0xe5,0xac,0x53,0x7c,0x13,0x79,0x85,0xeb,
    0x55,0x49,0xbd,0x69,0x55,0xd3,0x2b,0xc4,0x7d,0x95,0x2f,0xcc,0xbd,0x92,0xc8,0x12,
    0x79,0x9e,0xd5,0x2e,0x54,0xaf,0x96,0xf9,0xd7,0xa0,0x57,0x1b,0xfb,0xbe,0xc7,0xd6,
    0xe0,0xa5,0x9e,0xfe,0x5a,0xdf,0x00,0x97,0x73,0xfc,0x52,0x72,0xe5,0x97,0xc1,0x6b,
    0xff,0x5a,0xd9,0x65,0x13,0x75,0xd5,0xee,0xbd,0xd9,0xba,0x56,0xce,0x83,0xf1,0xed,
    0xf8,0x34,0xbe,0x83,0x5e,0xea,0xbb,0x9b,0x9e,0xe9,0x78,0x76,0x72,0x31,0xdf,0x42,
    0x4f,0x8b,0x76,0xb7,0xb6,0xc7,0xcd,0xf4,0x4b,0xfa,0x28,0xde,0x28,0xbf,0x76,0xd1,
    0x2b,0xc1,0x7e,0x12,0x2e,0xcc,0xe7,0x6e,0x7e,0xef,0x62,0x2e,0x9a,0xef,0x29,0xd9,
    0x7f,0x1f,0xe7,0x48,0xf7,0xb7,0x9f,0xfe,0x29,0xc7,0x1f,0x2d,0xf1,0x73,0x82,0x73,
    0xa5,0xfd,0x4f,0xb2,0xa7,0xbc,0xe3,0xfb,0xe9,0xa1,0xfc,0x20,0xbd,0xba,0xd1,0x1f,
    0xe4,0x7e,0xf0,0xfd,0x2f,0x72,0x0e,0x8c,0x1f,0x86,0xb7,0xbc,0x58,0x92,0x8f,0x95,
    0xac,0x1f,0xe7,0xfb,0x37,0x7e,0xb2,0x84,0xbf,0xcd,0xd9,0x32,0x7e,0xba,0x84,0xbf,
    0xcb,0x3b,0x30,0x7e,0xb6,0x84,0x7f,0x28,0x71,0xcd,0xf1,0x73,0xf0,0xeb,0x65,0x0a,
    0x49,0xde,0x4f,0x00,0x7b,0x25,0x48,0x26,0xfa,0x4d,0x2f,0xdc,0x69,0x15,0x71,0xe6,
    0xb9,0x78,0x8e,0xab,0xc0,0x16,0xbb,0x77,0x76,0x96,0x6f,0x6b,0x09,0xfc,0x56,0xe9,
    0xd0,0xc0,0xfd,0x55,0xc7,0xb9,0xed,0xa6,0xa6,0x11,0xbc,0x28,0x35,0x9a,0x7f,0xc4,
    0xba,0x46,0xd6,0x2d,0xe3,0xbb,0xae,0xe3,0x3c,0x77,0x73,0x26,0x57,0x80,0x3f,0x92,
    0x9a,0x26,0xee,0xa2,0x15,0x9c,0xb7,0xff,0x65,0xe7,0x2d,0xec,0xe7,0x8d,0xd4,0xaf,
    0x72,0x77,0xa0,0xfa,0xd1,0xdf,0x5f,0xcb,0x3a,0x9d,0xc5,0xc7,0x68,0xea,0xdf,0x15,
    0xe6,0xb3,0x1a,0xbc,0x4f,0x32,0xdd,0xd3,0x9f,0x60,0x56,0xf7,0x5a,0x7a,0x58,0x2f,
    0x7d,0xfe,0x27,0x55,0x5a,0xf7,0x8c,0x9a,0x0c,0x6b,0x9a,0x9d,0x87,0x35,0x78,0x68,
    0x75,0x1e,0xd6,0x82,0x9b,0x87,0x75,0x60,0xe6,0xa1,0xcd,0x79,0x50,0xae,0x20,0xd1,
    0x86,0x6e,0xc1,0x79,0xf8,0x04,0xed,0x84,0xf3,0xf0,0x29,0xb8,0x79,0xf8,0x0b,0xcc,
    0xea,0xd4,0x83,0xf5,0x6a,0x73,0x1e,0x9e,0x53,0xd3,0xc2,0x9a,0x82,0xf3,0xb0,0x1e,
    0x0f,0x1d,0xce,0xc3,0x06,0x70,0xf3,0xb0,0x11,0xcc,0x3c,0x74,0x39,0x0f,0xca,0x75,
    0x4a,0x74,0xa1,0xdb,0xc9,0x39,0x52,0xdd,0xcf,0xd1,0x7e,0xee,0xbe,0x77,0xdd,0xa3,
    0xd5,0x76,0xb9,0x3d,0xfe,0x43,0x5d,0x1b,0xeb,0x3a,0xa9,0xdd,0x46,0xed,0x36,0x6a,
    0xf5,0x1b,0xfd,0x9b,0x6f,0x41,0xd7,0x1f,0x91,0xd8,0x0e,0xa7,0x33,0x9a,0xe7,0x2c,
    0x2a,0x77,0x0c,0x4e,0xbd,0xea,0xbd,0xb4,0x13,0xaf,0x3d,0x78,0xd5,0xfa,0xaf,0xc0,
    0x9f,0xe2,0xb5,0x97,0x1e,0x8a,0xbf,0x94,0x9a,0x1d,0xf4,0x30,0xbf,0xbd,0xe4,0x3b,
    0xd8,0xd7,0x76,0x7a,0xe9,0xdd,0xb5,0x97,0x7b,0xcb,0xf4,0xf6,0xa1,0xd7,0xe7,0xf4,
    0xbe,0x01,0xb7,0xf7,0x7c,0x00,0xef,0xc1,0x61,0x07,0xc1,0x12,0xb1,0x67,0x36,0xde,
    0x77,0x87,0xa8,0x3d,0x48,0x8f,0x63,0xcc,0xe2,0x30,0xba,0x87,0x98,0xc9,0x7c,0xbc,
    0x07,0x32,0x91,0x3b,0xc2,0xac,0x0e,0x83,0x65,0x99,0xc9,0x3c,0xf7,0xa5,0x9f,0xaf,
    0xfa,0x19,0xe4,0x3e,0x38,0xce,0x3a,0xf5,0xa1,0x77,0xe7,0x29,0x7c,0x9c,0xc0,0x87,
    0xde,0xa3,0xa7,0xc1,0xc7,0xa5,0x46,0xd7,0x9c,0x61,0x9d,0xe2,0xe5,0xa2,0xa4,0xd8,
    0xb7,0xee,0xae,0x57,0x7e,0x80,0xff,0x5b,0xbe,0x83,0xb3,0x39,0x7d,0x4f,0xff,0x7e,
    0x37,0xa7,0x1f,0xc0,0x5f,0xb0,0xef,0x1f,0xc1,0x8e,0xba,0x73,0x39,0x00,0x5e,0xcf,
    0xb9,0x3c,0xe7,0xde,0xd3,0x40,0xbc,0xb3,0x42,0xc4,0xd4,0x9f,0xfe,0xde,0x2c,0x35,
    0xe7,0xd1,0x57,0xef,0xc6,0x9d,0x73,0x3a,0x3f,0xa3,0x73,0xd1,0xe9,0x5c,0x02,0x37,
    0x9d,0x21,0xa7,0xa3,0xdc,0x65,0x89,0x21,0x7a,0x5d,0x46,0x67,0xd8,0xe9,0x18,0x37,
    0xe4,0x74,0xae,0xa0,0xd3,0xe3,0x74,0xae,0x82,0x9b,0xce,0x88,0xd3,0xb9,0xca,0xfd,
    0x3e,0x42,0xaf,0x6b,0xe8,0x14,0x9d,0x8e,0x71,0x23,0x4e,0xe7,0x17,0x74,0x5a,0x9d,
    0xce,0xaf,0xe0,0xa6,0x33,0xea,0x74,0x94,0xbb,0x2e,0x31,0x4a,0xaf,0xeb,0xe8,0x8c,
    0x39,0x1d,0xe3,0x46,0x9d,0xce,0x0d,0x74,0xc6,0x9d,0xce,0x4d,0x70,0xd3,0x99,0x70,
    0x3a,0xca,0xdd,0x92,0x98,0xa0,0xd7,0x2d,0x74,0x26,0x9d,0x8e,0x71,0x13,0x4e,0xe7,
    0x37,0x74,0x6e,0x3b,0x9d,0xdf,0xc1,0x4d,0x67,0xca,0xe9,0x28,0x77,0x47,0x62,0x8a,
    0x5e,0x77,0xd0,0x99,0x76,0x3a,0xc6,0x4d,0x39,0x9d,0x7b,0xe8,0xdc,0x75,0x3a,0xf7,
    0xc1,0x4d,0x67,0xc6,0xe9,0x28,0xf7,0x40,0x62,0x86,0x5e,0x0f,0xd0,0x99,0x75,0x3a,
    0xc6,0xcd,0x38,0x9d,0x3f,0xd0,0x79,0xe8,0x74,0x1e,0x81,0x9b,0xce,0x13,0xa7,0xa3,
    0xdc,0x63,0x89,0x27,0xf4,0x7a,0x8c,0xce,0x9c,0xd3,0x31,0x4e,0x9f,0x6f,0xe5,0xeb,
    0xdb,0x28,0xf1,0x0e,0xa3,0x9d,0x11,0xbf,0x48,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMSArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 1);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
