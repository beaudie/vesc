// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0xcd,0x6f,0x55,0x55,
    0x14,0xc5,0xef,0xfb,0xae,0xcf,0xb6,0x94,0x7e,0xda,0x08,0x52,0x68,0x13,0x49,0xc1,
    0x57,0xa2,0x16,0x69,0xb5,0x46,0x81,0xc4,0x8a,0x45,0xb4,0xa8,0x10,0x42,0x20,0x20,
    0x7e,0x54,0x2d,0x94,0x28,0x4a,0x3b,0x00,0xfa,0x06,0x4a,0x3b,0xa8,0xd2,0x0e,0x50,
    0xda,0x01,0x4a,0x3b,0x40,0xa0,0x89,0x26,0x4a,0x9d,0xea,0xc0,0xbf,0xc8,0xcf,0xc4,
    0xc4,0xbd,0x2f,0xbf,0xdd,0xac,0xbc,0x97,0xec,0xde,0xbb,0xd7,0xda,0x67,0xad,0xb3,
    0xcf,0x39,0xf7,0x34,0x97,0xed,0x2e,0x25,0xb9,0x4c,0x52,0x4e,0xea,0x92,0xdf,0x92,
    0x07,0xbf,0x8d,0x49,0x36,0xc9,0xd8,0xf3,0xe1,0xa4,0x98,0x3e,0x5f,0x1a,0x39,0x3c,
    0x52,0xf9,0xf8,0x93,0x33,0x95,0xa7,0xfb,0x77,0x39,0xdf,0x98,0xe4,0xd2,0x3a,0xe7,
    0x36,0x58,0x96,0xb7,0xa7,0xc7,0xf8,0xa9,0xb1,0xb3,0x8e,0x37,0x58,0x9c,0xb7,0x98,
    0xb2,0xa8,0x5a,0xcc,0x5a,0x2c,0x58,0x2c,0x59,0xac,0x58,0xac,0x5a,0x34,0x99,0x86,
    0x8f,0x29,0xb9,0xbe,0xbd,0x35,0xa4,0x7e,0xae,0x97,0x24,0xc3,0x49,0x21,0x69,0x61,
    0x2e,0xdd,0x3c,0x03,0xcb,0x80,0xd5,0x09,0x96,0x05,0x6b,0x12,0x2c,0x07,0xf6,0x88,
    0x60,0x79,0xb0,0x4d,0x82,0x15,0xc0,0xba,0x04,0x2b,0x82,0xf5,0x08,0x56,0x02,0xdb,
    0x2e,0x58,0x1d,0xd8,0x4e,0xc1,0x1e,0x02,0xdb,0x95,0xf6,0x95,0x5b,0x9f,0x9f,0xf7,
    0x78,0xc8,0x9e,0xdb,0xe8,0x27,0xf2,0xad,0x92,0xfb,0x9a,0x3d,0x26,0xf9,0x14,0x79,
    0x86,0xbc,0x4a,0x1e,0x7a,0xb3,0xe4,0x39,0xf2,0x05,0xf2,0x3c,0xf9,0x12,0x79,0x81,
    0x7c,0x85,0xbc,0x48,0xbe,0x4a,0xee,0xbd,0xb5,0x98,0x6a,0x36,0x9d,0x4f,0x2e,0xd5,
    0xf3,0xf7,0x36,0xab,0x29,0xb2,0x36,0x3e,0x87,0x0e,0xcb,0x4b,0x8c,0x77,0xbe,0xdd,
    0x2a,0xcb,0xf0,0xce,0xf9,0xfe,0x95,0xf1,0xef,0xb2,0xbf,0xf5,0x8c,0x73,0xfc,0x59,
    0xf2,0x06,0xd1,0x6a,0xa4,0x3e,0xbc,0x9a,0xd1,0x4a,0xd2,0x79,0xd5,0xaf,0xaf,0x7b,
    0x23,0x51,0x24,0xca,0x3c,0x9b,0x25,0xdc,0xaf,0x95,0xf5,0x6f,0xc1,0xaf,0x35,0xd5,
    0x7d,0x80,0xed,0xa0,0x97,0x76,0xf4,0xbd,0xbe,0x03,0xae,0x24,0xfc,0x26,0x72,0xe7,
    0x37,0xc3,0xbb,0x7e,0xab,0xcd,0xb2,0x8b,0xba,0x66,0xd9,0xb7,0x18,0xd7,0xcb,0x79,
    0x88,0xbc,0x9f,0xb1,0xde,0xe7,0x10,0x1a,0xf9,0xf4,0xac,0x94,0xd2,0xfc,0x05,0x34,
    0x34,0x62,0xec,0xb0,0xac,0xe1,0xcb,0xe8,0x38,0xde,0x69,0x6f,0x07,0xd1,0xca,0xe0,
    0x9f,0x91,0x88,0xbe,0x5e,0xe5,0xfd,0x20,0xeb,0xe0,0xf9,0xa1,0x9a,0xf9,0x8e,0x72,
    0x6e,0x7c,0x7e,0x6f,0xa2,0x9f,0x13,0xfe,0x04,0x9a,0x91,0x9f,0xe6,0x1c,0xb9,0xfe,
    0xdb,0xcc,0xa9,0x2c,0xfc,0x18,0x1a,0xce,0x4f,0xa0,0x35,0x84,0xff,0x04,0xf7,0x81,
    0xea,0x5f,0x60,0xdf,0x83,0x9f,0x82,0x8f,0xbc,0x5a,0x93,0xcf,0xd6,0x8c,0x9f,0xe3,
    0x7b,0x0f,0x7e,0xa1,0x86,0xbf,0xce,0x59,0x0a,0x7e,0xa9,0x86,0xbf,0xc9,0x1e,0x04,
    0xbf,0x52,0xc3,0xdf,0xb6,0xb8,0x22,0xfc,0x2a,0xfc,0x6e,0x5b,0x85,0x2c,0xfb,0x93,
    0x80,0xfd,0x6d,0x48,0x21,0xed,0x37,0xbf,0x7e,0x87,0x35,0xa4,0x6b,0x5e,0x4a,0xcf,
    0x6d,0x13,0xd8,0x06,0xd9,0xb3,0xb3,0x7c,0x4b,0x1b,0xe1,0x5f,0x34,0x85,0x0e,0xee,
    0xab,0x36,0xce,0xe9,0x10,0x35,0x9d,0xe0,0x55,0xab,0xf1,0xfc,0x51,0xc6,0x75,0x32,
    0x6e,0x33,0xdf,0x71,0x1b,0xe7,0x77,0x88,0x33,0xba,0x05,0xfc,0x8e,0xd5,0x74,0x71,
    0xf7,0x6c,0xe1,0xac,0xfd,0x65,0x33,0xef,0x61,0x3e,0xff,0x5a,0xfd,0x36,0xb9,0xf3,
    0xbc,0x1f,0x7f,0x7f,0xdd,0xc6,0xf9,0x5a,0x3c,0x8e,0xa7,0xff,0x2e,0xb1,0x3e,0xdb,
    0xc1,0x47,0x2d,0xf3,0x39,0xfd,0x08,0x16,0x75,0xff,0x98,0x46,0x68,0xf9,0xf3,0x0f,
    0xab,0xf2,0xba,0x9f,0xa9,0x29,0x30,0xa6,0x5b,0x7a,0xd8,0x41,0x0f,0xbd,0xd2,0xc3,
    0x4e,0xf0,0xe8,0xe1,0x09,0xb0,0xe8,0xa1,0x4f,0x7a,0x70,0xae,0x62,0xd1,0x87,0x6f,
    0x45,0x7a,0x78,0x12,0xef,0x8c,0xf4,0xf0,0x14,0x78,0xf4,0xf0,0x13,0x58,0xd4,0x79,
    0x0f,0xa1,0xd5,0x27,0x3d,0xdc,0xa7,0xa6,0x87,0x31,0x15,0xe9,0x61,0x37,0x3d,0xf4,
    0x4b,0x0f,0xcf,0x80,0x47,0x0f,0x7b,0xc0,0xa2,0x87,0x41,0xe9,0xc1,0xb9,0x01,0x8b,
    0x41,0x7c,0x07,0x38,0x47,0xee,0xfb,0x1c,0xde,0xf7,0xe5,0x7b,0xf7,0x39,0x46,0xed,
    0xa0,0xcc,0xf1,0x57,0xea,0xfa,0x18,0x37,0x40,0xed,0x5e,0x6a,0xf7,0x52,0xeb,0xdf,
    0xe8,0x2f,0x7c,0x0b,0x3e,0xfe,0xb8,0xc5,0x3e,0x38,0x5f,0xa3,0x35,0xce,0xa2,0x73,
    0x27,0xe1,0xbc,0x57,0xbf,0x97,0x0e,0xd0,0xeb,0x30,0xbd,0x7a,0xfd,0x2b,0xe0,0x3f,
    0xd0,0xeb,0x08,0x1a,0x8e,0xff,0x69,0x35,0xfb,0xd1,0x88,0x7e,0x47,0xc8,0xf7,0x33,
    0xaf,0x7d,0x68,0xf9,0xdd,0xf5,0x1a,0xf7,0x56,0xf8,0x1d,0xc6,0x6f,0x54,0xfc,0xde,
    0x00,0x8f,0x7d,0x7e,0x8b,0xde,0x13,0xc1,0x8e,0x80,0x65,0x52,0xcd,0x62,0x7a,0xdf,
    0x1d,0xa5,0xf6,0x08,0x1a,0x27,0x59,0x8b,0x63,0xf8,0x1e,0x65,0x4d,0xd6,0xd2,0x7b,
    0xa0,0x90,0x72,0xc7,0x59,0xab,0x63,0x60,0x45,0xd6,0x64,0x8d,0xfb,0x52,0xd7,0xd7,
    0xfb,0x99,0xe0,0x3e,0x38,0xc5,0x38,0xef,0xc3,0xef,0xce,0x33,0xf4,0x71,0x9a,0x3e,
    0xfc,0x1e,0x7d,0x07,0x7c,0xce,0x6a,0x7c,0xcc,0xbb,0x8c,0x73,0xbc,0xde,0x9c,0x1c,
    0x7b,0x4f,0xee,0x7a,0xe7,0xc7,0xf9,0xdf,0xf2,0x3e,0x5c,0xac,0xd3,0x07,0xe8,0x8f,
    0xc9,0x3a,0x7d,0x08,0xfe,0x3b,0xf3,0xfe,0x08,0xec,0x84,0x9c,0xcb,0x71,0xf0,0x76,
    0xce,0xe5,0x39,0xd9,0xa7,0xf1,0xf4,0xce,0x4a,0x52,0xcc,0xfb,0xf3,0xf7,0xe7,0xad,
    0xe6,0x3c,0xfe,0xde,0x7b,0x70,0xe7,0xc4,0xe7,0x53,0x7c,0x2e,0x88,0xcf,0x67,0xe0,
    0xe1,0x33,0x29,0x3e,0xce,0x5d,0xb4,0x98,0x44,0xeb,0x22,0x3e,0x53,0xe2,0x13,0xdc,
    0xa4,0xf8,0x5c,0xc2,0x67,0x58,0x7c,0x2e,0x83,0x87,0xcf,0xb4,0xf8,0x5c,0xe6,0x7e,
    0x9f,0x46,0xeb,0x0a,0x3e,0x55,0xf1,0x09,0x6e,0x5a,0x7c,0x3e,0xc7,0xa7,0x57,0x7c,
    0xbe,0x00,0x0f,0x9f,0x19,0xf1,0x71,0xee,0xaa,0xc5,0x0c,0x5a,0x57,0xf1,0x99,0x15,
    0x9f,0xe0,0x66,0xc4,0xe7,0x4b,0x7c,0xe6,0xc4,0xe7,0x2b,0xf0,0xf0,0x99,0x17,0x1f,
    0xe7,0xae,0x59,0xcc,0xa3,0x75,0x0d,0x9f,0x05,0xf1,0x09,0x6e,0x5e,0x7c,0xbe,0xc6,
    0xe7,0xba,0xf8,0x7c,0x03,0x1e,0x3e,0x8b,0xe2,0xe3,0xdc,0x0d,0x8b,0x45,0xb4,0x6e,
    0xe0,0xb3,0x24,0x3e,0xc1,0x2d,0x8a,0xcf,0xb7,0xf8,0xdc,0x14,0x9f,0xef,0xc0,0xc3,
    0x67,0x59,0x7c,0x9c,0xbb,0x65,0xb1,0x8c,0xd6,0x2d,0x7c,0x56,0xc4,0x27,0xb8,0x65,
    0xf1,0xf9,0x1e,0x9f,0xdb,0xe2,0x73,0x07,0x3c,0x7c,0xee,0x89,0x8f,0x73,0x77,0x2d,
    0xee,0xa1,0x75,0x17,0x9f,0x55,0xf1,0x09,0xce,0x9f,0xff,0xd9,0xd7,0xb7,0xc7,0xe2,
    0x7f,0x10,0x38,0xb9,0xa5,0x38,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMSArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
