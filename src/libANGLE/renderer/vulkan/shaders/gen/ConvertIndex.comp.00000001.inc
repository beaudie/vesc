// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0x5d,0x4b,0x93,0x61,
    0x18,0xc7,0xef,0x3d,0xcf,0x9c,0x56,0xd2,0x0b,0x69,0x6e,0x50,0xdb,0x6c,0x74,0x62,
    0xa1,0x21,0x19,0x8d,0x28,0xea,0x40,0x4c,0x98,0x96,0x0c,0x82,0xdc,0x51,0xd0,0x49,
    0x07,0x65,0xb4,0x7d,0x80,0xb6,0x56,0x10,0xa6,0x7d,0x80,0x8a,0x8a,0xc0,0x4a,0x24,
    0x42,0x3a,0x0e,0x13,0x63,0x45,0x78,0x24,0x79,0xd2,0xcb,0xb7,0x88,0xde,0x08,0xbb,
    0xae,0x67,0xbf,0xdb,0xae,0x24,0xe1,0xe6,0xda,0xf5,0xbf,0xfe,0xd7,0xdb,0xff,0xbe,
    0x1f,0xc3,0x20,0xd7,0xea,0xc2,0x98,0xdb,0xec,0xda,0xdc,0x17,0xd7,0xfc,0xdb,0xe1,
    0x02,0x17,0x13,0xbb,0xc5,0x25,0x22,0x3b,0x54,0x28,0x16,0x7a,0xcb,0x95,0x0b,0xbd,
    0x87,0x06,0x0e,0x6a,0x7c,0xab,0x0b,0x23,0x9e,0xc6,0xb6,0x09,0xa7,0x45,0x6c,0x5c,
    0xce,0xa5,0xf3,0x17,0x2f,0x2b,0x3e,0x2a,0x67,0xbb,0xe0,0xf1,0xa8,0x96,0x73,0x27,
    0xe0,0xea,0x39,0x25,0xec,0x0e,0xfa,0xe4,0xb0,0x1e,0x8b,0x81,0xc5,0x0d,0x16,0x80,
    0xb5,0x19,0x2c,0x04,0x6b,0xd7,0xd9,0xc4,0xf3,0xbc,0x21,0xc9,0x4c,0x8b,0x4d,0xac,
    0xd7,0x88,0xbb,0x0c,0x3d,0x92,0xe4,0x67,0x36,0xf4,0xd6,0xfc,0x8c,0xc9,0xef,0x16,
    0xbb,0x77,0x3d,0xd6,0xf4,0xbb,0x99,0x4d,0xfd,0xd1,0x48,0x17,0xe7,0x76,0xe3,0x57,
    0xff,0xe9,0xd7,0xe2,0x6a,0xff,0xa9,0x5f,0x33,0xf5,0xeb,0x1b,0xea,0xd7,0xa9,0xef,
    0xfd,0x29,0xea,0xa7,0xe4,0xec,0x94,0xac,0x20,0x8a,0x87,0xd1,0xce,0xfa,0xbb,0x53,
    0x38,0xda,0x2f,0x4b,0x4e,0x5a,0xbc,0x0e,0x66,0xb0,0x27,0x2b,0xbc,0x4e,0xb1,0x9b,
    0xe4,0x68,0xfc,0x28,0xfe,0x2e,0x30,0xad,0xd3,0x45,0x1d,0xdd,0x6d,0x3f,0x7e,0x92,
    0xba,0x9a,0x9f,0x82,0xab,0xf5,0xf6,0xc8,0x04,0x5e,0xdb,0x34,0x9a,0xa5,0xe1,0x65,
    0xb9,0x8b,0x0c,0x7d,0xb2,0xec,0xd4,0x6e,0xea,0xe6,0x98,0x5f,0xf9,0xfb,0x88,0x25,
    0x88,0xab,0xed,0xe1,0x5e,0x3d,0xbf,0xcf,0xf8,0x1a,0xef,0x97,0xb3,0x16,0xed,0x12,
    0xb8,0x01,0x83,0xe7,0x15,0x5f,0xfb,0xeb,0x0f,0x32,0x7f,0x97,0xf8,0x05,0x7a,0x84,
    0xf4,0x1d,0x61,0xd7,0x02,0x73,0x8e,0xf0,0x56,0x63,0xc4,0x4f,0xf3,0x3b,0x61,0xe6,
    0x28,0x1a,0x7d,0x14,0x9f,0xc0,0x57,0x3d,0xaa,0x46,0x0f,0xbd,0xe3,0x2a,0x75,0xae,
    0xb3,0x5f,0x8d,0x3e,0xea,0xd7,0x8d,0x1e,0x9a,0x73,0x9b,0xef,0xe2,0x80,0x78,0x3a,
    0xcf,0x14,0xd8,0x04,0xc7,0xf3,0x56,0xa3,0x6f,0xc9,0xb9,0xc3,0xf2,0xb6,0x02,0xde,
    0x99,0x63,0xa7,0xef,0x82,0xe8,0xb7,0xf7,0x4d,0xbc,0x69,0xf0,0x5f,0xf2,0x5b,0x35,
    0xb8,0x43,0x5c,0xed,0x49,0x61,0xa5,0xa2,0xf7,0xd9,0xbc,0x7f,0xbd,0x8b,0x63,0xd4,
    0x1f,0x06,0x57,0x8e,0xee,0x7f,0x06,0x4d,0x06,0x0d,0x67,0x0c,0x7c,0x49,0x38,0xea,
    0x9f,0x05,0x53,0x6d,0x9e,0x0b,0xa6,0xf7,0x71,0x0e,0x7c,0x98,0x79,0x4a,0xcc,0xf3,
    0x53,0x6a,0x68,0x6c,0x5c,0x4e,0x89,0x99,0xf4,0xf7,0x0f,0xb1,0xd3,0xf8,0x25,0x33,
    0xe3,0x5d,0x66,0x4c,0x9a,0xfe,0xf7,0xc0,0xaf,0xd1,0xff,0x3e,0xbd,0x14,0x5f,0x04,
    0x7b,0x00,0x9e,0x8b,0x6a,0x25,0xa2,0x37,0xf6,0x90,0x77,0x98,0x24,0xee,0xeb,0x3d,
    0x22,0xd6,0x20,0xf7,0x31,0xb9,0x3d,0x66,0xc7,0x19,0xf0,0x3e,0xd3,0xe3,0x09,0xb9,
    0x33,0x26,0xf7,0x29,0xb8,0xbe,0xcf,0x59,0xb4,0x98,0x05,0xef,0x67,0xcf,0x39,0xf6,
    0x54,0xfb,0x4c,0xb2,0x34,0xef,0x13,0xbc,0x3c,0x5c,0xdf,0x77,0x9e,0x98,0xea,0xff,
    0x06,0xec,0x25,0xfe,0xbc,0xd1,0xe0,0x0a,0x1a,0xe8,0x5b,0x79,0x41,0xdf,0xab,0xe0,
    0xfe,0x0e,0x2a,0xe6,0x0e,0x34,0x56,0x96,0x53,0x61,0x96,0xb2,0xa9,0xf5,0x8a,0x3c,
    0xab,0xe7,0x02,0xb8,0xd5,0xf3,0xb5,0xd1,0x73,0xc1,0xe8,0xb9,0x48,0xcc,0x6b,0xb2,
    0x44,0xae,0xd5,0xb3,0x01,0x6e,0xf5,0x7c,0x4b,0x6e,0xc3,0xe4,0xbe,0x03,0xb7,0x7a,
    0xbe,0x07,0xf7,0x7a,0x2e,0xb3,0xc3,0xb2,0xd1,0xf3,0x33,0xbc,0x3c,0x5c,0xdf,0x77,
    0x85,0xd8,0xaa,0xd1,0xf3,0x03,0x9a,0xae,0x50,0xcf,0x6b,0xa2,0xf6,0xab,0x6b,0x8d,
    0x38,0x1f,0xe1,0xcc,0xc1,0x5f,0x36,0x6f,0xf4,0x06,0x6f,0xb4,0x68,0x34,0xb8,0x09,
    0xee,0x35,0xbd,0x05,0x36,0x66,0xf4,0x9b,0xe4,0xff,0x40,0x92,0xf8,0x71,0xb9,0xa3,
    0x49,0x7a,0xd9,0xef,0x41,0xed,0x6f,0xf9,0x2f,0x73,0x44,0xce,0x1f,0xf5,0x52,0x80,
    0xec,0xa0,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint _padding;
// };
//
// uint PullIndex(uint index)
// {
//     uint srcIndex = index + srcIndexOffset;
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     if(value == 0xFF)
//         value = 0xFFFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint firstIndex = 0;
//     uint endIndex = firstIndex + maxIndex;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
// }
