// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7b,0x90,0x97,0x55,
    0x19,0xfe,0xde,0xf3,0x5b,0x96,0x5d,0x97,0x20,0x53,0x32,0x15,0x48,0x16,0x0c,0xe3,
    0xb2,0x2d,0x23,0x2c,0xea,0x86,0xb8,0x40,0x2c,0x34,0x18,0x97,0xa5,0x99,0x84,0x0a,
    0x01,0xcb,0x60,0xc4,0x76,0x80,0x35,0x98,0x16,0x58,0x2e,0x6a,0x20,0x5e,0xa6,0x04,
    0x16,0x04,0x64,0xa4,0x09,0x93,0x86,0xe0,0xbf,0xc6,0x66,0x2a,0x99,0x26,0x83,0x20,
    0x18,0x93,0x8b,0x91,0xc5,0x2d,0x03,0x95,0x10,0x2a,0xe5,0xaa,0x9d,0xe7,0x7b,0x9f,
    0x97,0xef,0xfd,0x7d,0xb3,0xfc,0x66,0xce,0x7c,0xdf,0x79,0xde,0xdb,0x73,0xce,0x79,
    0xcf,0x39,0xef,0xef,0x2b,0x84,0x1e,0xed,0x93,0x44,0x92,0xeb,0x92,0xb2,0xe4,0x33,
    0x85,0x24,0xfd,0x5d,0x9f,0x84,0x88,0x24,0x49,0x45,0x52,0x9a,0x3e,0xeb,0x47,0x37,
    0x8c,0xae,0x9a,0x3d,0xe7,0xa1,0xaa,0x01,0x03,0xab,0x21,0xef,0x98,0xa8,0x22,0x64,
    0x9d,0x92,0xf6,0x49,0xbb,0xf8,0x2c,0x89,0x6d,0xe6,0x94,0xe9,0x8f,0x02,0x3f,0x18,
    0xdb,0x99,0xd8,0x3e,0x1d,0xed,0x4b,0x52,0x7f,0x49,0xf4,0xae,0x3a,0xa9,0xbf,0xf8,
    0x76,0x5f,0x7c,0x96,0xa6,0x3a,0x49,0x32,0x32,0x7a,0xa8,0xd3,0xd0,0x49,0x0f,0x3e,
    0x0d,0x13,0x62,0x5e,0x2f,0x10,0xbb,0xcd,0x61,0x05,0x62,0xd5,0xf4,0x3f,0x8c,0xfe,
    0xab,0x45,0x75,0x86,0xe7,0xfc,0xd7,0x47,0x8b,0xe1,0xf4,0x05,0xfd,0x11,0xf1,0x59,
    0x79,0x55,0xa6,0xfd,0xee,0x8e,0xef,0x92,0x9c,0x7c,0x09,0xe5,0x25,0xec,0xaf,0xce,
    0x8d,0xa7,0xb5,0x8d,0xf1,0xb4,0xb6,0x31,0x9e,0xd6,0x36,0xc6,0xd3,0xda,0xc6,0x78,
    0xd6,0xe4,0xc6,0xb3,0xb6,0x8d,0xf1,0xac,0x75,0xe3,0x59,0x97,0xe3,0xbb,0x8e,0x7c,
    0x4d,0x7e,0x30,0x5d,0xdf,0x24,0xe9,0xc2,0x98,0x87,0xdb,0xe0,0x7b,0xd8,0xf1,0x2d,
    0x63,0x8c,0xc3,0xce,0xc7,0xe9,0x5c,0x8c,0xd3,0x8c,0x51,0x60,0xff,0x0c,0x63,0xdc,
    0xc2,0xfe,0x3b,0x52,0xac,0x8f,0x7e,0x77,0xd7,0xbf,0x28,0xaa,0x7f,0x73,0x6c,0x37,
    0xc4,0x28,0x21,0xf5,0x57,0x48,0xfd,0xe1,0xbd,0x73,0xd4,0x29,0xe5,0x3c,0xe1,0x77,
    0x53,0xec,0xb7,0xe7,0xbc,0x04,0xf6,0xcb,0xd8,0xc7,0xba,0xdc,0x18,0xd1,0xf2,0xf8,
    0xfc,0x6c,0xf4,0xd0,0x99,0x76,0xd0,0xa9,0x4c,0x7d,0xa9,0x0e,0xfa,0x5f,0x8c,0xcf,
    0x72,0xfa,0xe8,0xc3,0x18,0x35,0x8c,0x61,0xfd,0x5a,0xea,0x5b,0x7f,0x08,0xd7,0xb0,
    0x0b,0x73,0xb9,0x8c,0x58,0xb7,0x28,0xad,0x63,0xbf,0x92,0xcf,0xfb,0x9c,0xdd,0x50,
    0xf2,0xe8,0xc2,0x1c,0xad,0x23,0xd6,0x8d,0xf9,0x38,0x2c,0x95,0x97,0x24,0x5f,0x21,
    0x9f,0xe1,0x69,0x6c,0xed,0x8f,0x70,0xf3,0x50,0x4f,0x3f,0x42,0xdf,0xf5,0xe9,0x9a,
    0x65,0x9c,0xd1,0x1f,0xc5,0xb5,0x80,0xbf,0xd1,0xb4,0x2d,0x73,0x5c,0x26,0x39,0x7b,
    0xf4,0xa7,0xe5,0xe6,0xa0,0x31,0xa7,0xdf,0x14,0xdb,0x27,0xe9,0xfa,0x94,0x27,0x8b,
    0x38,0x87,0xc2,0x98,0xf9,0x27,0x62,0x2e,0xe6,0xfb,0x22,0x8e,0x01,0xfd,0x25,0x6e,
    0xed,0x7e,0x94,0xae,0x7b,0xb6,0x76,0x4f,0xb1,0x5f,0xe0,0xfc,0xac,0xce,0xcd,0x6b,
    0x6b,0x6e,0x5e,0x57,0x53,0x0f,0x7b,0xa3,0xd5,0xcd,0x23,0xf6,0xc1,0x1a,0x72,0x78,
    0x81,0xfe,0xd7,0x92,0x03,0xfa,0xeb,0x5c,0xcc,0xdf,0x71,0x1c,0x05,0x8e,0x13,0xef,
    0x3b,0x52,0x86,0x2d,0x43,0x20,0xdf,0xcf,0x7c,0xb2,0x79,0x3c,0xc0,0x31,0xee,0xa7,
    0xbf,0x03,0x3c,0xef,0x24,0x8d,0x5d,0x92,0xee,0x0f,0xcb,0x49,0xe8,0xff,0x8d,0xb9,
    0x75,0x98,0xfa,0xe8,0xbf,0x4d,0x0c,0xf2,0xbf,0xf3,0xbd,0xbd,0x8b,0x7f,0x92,0x73,
    0xd4,0x37,0xa2,0x18,0xeb,0x29,0x62,0xd6,0x76,0x70,0x0d,0xde,0x63,0x1c,0x9b,0xf3,
    0xa4,0x8d,0x35,0x78,0x9f,0xef,0xef,0x31,0x3e,0xfa,0xa7,0x89,0x19,0xff,0x33,0xb9,
    0x3c,0x2a,0x15,0xed,0x5b,0xfc,0x5a,0x29,0x8e,0x7f,0xd2,0xe9,0x0e,0x17,0x9d,0xcb,
    0x34,0x67,0xf9,0x6e,0x63,0xff,0x01,0xfb,0x95,0x2e,0x87,0xb6,0x46,0xec,0x41,0x37,
    0xd6,0x57,0x63,0x7f,0xcf,0xee,0xdd,0xf7,0x5a,0xac,0x5f,0xe7,0x62,0x41,0x0e,0x5f,
    0x7f,0x12,0x9d,0xa7,0x52,0x8e,0xfd,0x84,0x14,0xe7,0x9f,0xfd,0x02,0x31,0xd8,0xfc,
    0x93,0x42,0xe8,0xd6,0xb2,0xff,0x8e,0xd8,0xdc,0x96,0xa6,0x6b,0x88,0x33,0xa7,0x91,
    0xfb,0x1b,0xfb,0xa1,0x2a,0xae,0x34,0xd6,0xe2,0xfa,0x02,0xce,0x80,0x76,0xa9,0xbf,
    0x12,0xfa,0x46,0x0e,0x9c,0x8f,0x08,0xee,0xbb,0x8f,0x62,0xef,0x12,0x7d,0x5d,0x8a,
    0xef,0x38,0x2f,0x2e,0x8b,0xca,0xf1,0x1c,0xcc,0xdc,0x39,0xc4,0xfc,0x18,0x13,0xbd,
    0xc2,0xef,0x5b,0xc4,0x0e,0xb9,0xb5,0xaa,0x8b,0x1e,0x91,0x07,0xff,0x60,0x6e,0x60,
    0x1f,0x0f,0xe6,0xd9,0x76,0x84,0xf8,0xd6,0xa8,0x83,0x73,0xea,0x28,0x7d,0x1c,0x49,
    0x73,0xba,0x24,0x9d,0x93,0x63,0xc4,0xc1,0xe9,0x04,0xfd,0x5e,0x8c,0x32,0xe0,0xc7,
    0x31,0x7e,0xf2,0xc6,0xfb,0x85,0xf8,0xbc,0x44,0x9e,0x27,0x18,0x07,0xb9,0xf1,0x6f,
    0xe6,0x85,0xf1,0xfe,0x80,0x79,0x61,0xbc,0xcf,0x12,0xfb,0xc0,0xf1,0x6e,0xe6,0x1e,
    0x3e,0x47,0xf9,0xe4,0xa8,0x89,0x7d,0xf9,0x1f,0xfa,0x3b,0xc7,0xf5,0xc0,0x78,0xc6,
    0x45,0xfe,0xa5,0x29,0x47,0x95,0x27,0x0e,0xbb,0x48,0x4c,0x8c,0x1f,0xf9,0xe2,0xf9,
    0x3f,0xe6,0xc5,0xbe,0xa0,0xfb,0x00,0x9c,0x0b,0x71,0x21,0x3e,0xa6,0x0c,0xf6,0xbb,
    0x83,0xfa,0x80,0xac,0x42,0x54,0xb6,0x25,0xfa,0xc6,0xdc,0x88,0xa8,0x1c,0xeb,0xf3,
    0x61,0xe4,0x7b,0x25,0x51,0xb9,0xcd,0x11,0xe4,0x97,0xe3,0xfb,0x15,0xc6,0xc4,0x7b,
    0x87,0xe8,0x15,0xb9,0x5d,0xc2,0x7d,0x30,0x8a,0x31,0x9a,0x99,0xc3,0xed,0x44,0x65,
    0xbf,0x8f,0x31,0xa0,0x57,0x26,0xba,0x67,0x80,0x9b,0x4e,0xb9,0x28,0xfe,0x07,0x8e,
    0xb1,0x82,0x3c,0x80,0xd7,0x45,0xde,0x38,0x8f,0x3b,0x8a,0x9e,0x45,0x23,0xe9,0xd3,
    0xd6,0x1d,0x73,0xd8,0x49,0x54,0x6e,0xf3,0xdf,0x3e,0x28,0xd6,0x49,0xb2,0xf9,0xb7,
    0x9c,0x28,0x0b,0x9a,0x13,0xd0,0x79,0x81,0x39,0x51,0x1e,0x14,0x47,0x4e,0x74,0x0c,
    0xd9,0x78,0x81,0x5f,0x17,0x1b,0x30,0x8c,0x17,0xef,0x16,0xa3,0xc2,0xc5,0x08,0xcc,
    0xf7,0x6d,0x8c,0xd1,0x81,0x31,0x2a,0x5c,0x8c,0x4f,0x05,0xc5,0xb1,0x66,0xe6,0x0f,
    0x4f,0xac,0x0b,0xe4,0x9d,0x82,0xf2,0xb8,0x4c,0x5d,0xc4,0x7a,0x99,0xb6,0x37,0x88,
    0xca,0xc1,0xaf,0xb3,0x64,0xfc,0x80,0xdf,0x88,0xbd,0xcd,0x1c,0xc5,0x3b,0xfc,0x7f,
    0xcc,0xf5,0x01,0x6e,0x79,0xf3,0x39,0xc9,0xf6,0x91,0x61,0xb7,0xb8,0x39,0x7a,0x85,
    0x39,0x70,0xab,0xa8,0x2e,0x64,0x16,0xbf,0x8b,0x28,0x8e,0xf8,0xdd,0x5c,0x7c,0xe0,
    0x5d,0x63,0xeb,0xc6,0xf8,0x5d,0x5d,0xbc,0xdb,0x18,0x4f,0x5c,0xbc,0x4a,0xc6,0x13,
    0x17,0xaf,0x87,0xa8,0x6e,0x25,0xb9,0x9b,0x2f,0x3c,0x6d,0x6e,0x7a,0x32,0x3e,0xc6,
    0xd3,0x83,0x31,0x8d,0xdb,0xed,0xa2,0x72,0x70,0xeb,0xe5,0xb8,0x01,0xff,0x42,0x6c,
    0xbd,0xe8,0x0f,0xef,0x2d,0xe4,0xd1,0x9b,0x63,0x9c,0xe4,0xb8,0xf5,0x75,0x6b,0x69,
    0xdc,0xfa,0x89,0xea,0xf6,0x25,0x37,0xf3,0xd5,0xcb,0x71,0xab,0x62,0x7c,0xf0,0xed,
    0xc7,0x98,0xc6,0xed,0x4b,0xa2,0x72,0x70,0xeb,0xef,0xb8,0x01,0x47,0x6d,0xda,0x9f,
    0xfe,0xaa,0xdd,0xbc,0xdd,0xe9,0xe6,0xcd,0xf8,0x0e,0x10,0xc5,0x3d,0xdf,0x1a,0xf2,
    0x2d,0x38,0xbe,0x83,0x44,0x75,0x6b,0xc8,0xd7,0xfc,0xf7,0x77,0x7c,0xef,0x22,0x27,
    0x8c,0x61,0x10,0x79,0x80,0xdf,0x3d,0x8e,0x1f,0x74,0xee,0x8e,0xed,0x1e,0xda,0xdf,
    0x9d,0xcb,0x2b,0xe0,0x8b,0x63,0x4c,0xec,0x83,0x3a,0xc9,0xf6,0x53,0x5d,0xdc,0x8d,
    0xb8,0xd7,0x46,0xe4,0xf6,0x2a,0xee,0xbd,0x1a,0xee,0x57,0x70,0xaf,0xa7,0x0e,0xe2,
    0x0e,0x0a,0xc5,0xf7,0xc2,0x4d,0xdc,0x1b,0x78,0x5e,0xcd,0xdd,0xa0,0x71,0xf0,0x7b,
    0x82,0xd8,0xcd,0x41,0x71,0xf8,0x32,0xec,0xd6,0xa0,0x78,0x6d,0xa2,0x5c,0x70,0x6e,
    0x74,0x09,0xc5,0x5c,0x46,0x51,0xcf,0xce,0x8e,0xae,0x41,0x75,0x96,0xd1,0xc7,0xe7,
    0x9d,0x0f,0x9b,0xd7,0xee,0x41,0xf1,0x1a,0xde,0x1b,0x35,0xee,0x8c,0x80,0xac,0x32,
    0xb6,0xdb,0xc9,0x1b,0x4f,0xb3,0xeb,0x45,0xbb,0x49,0xb4,0x1b,0xe8,0xec,0x20,0xbb,
    0x23,0xb6,0x3e,0xb4,0xeb,0xe3,0xec,0xfa,0xd1,0x6e,0x1a,0xed,0x06,0x38,0x3b,0xc8,
    0xaa,0x62,0xeb,0x4f,0xbb,0xfe,0x6e,0x9e,0xee,0x0c,0x3a,0x9e,0x02,0xef,0x86,0x41,
    0xd4,0xa9,0x72,0x3a,0xd5,0xd4,0x09,0x39,0x1d,0xc4,0xf8,0x24,0x66,0x1d,0xde,0xef,
    0x70,0xfa,0xbd,0xa9,0x2f,0x39,0xfd,0x81,0x4e,0xbf,0xd2,0xe9,0xf7,0xa4,0x7e,0x92,
    0xd3,0xaf,0x71,0xfa,0x83,0xd2,0x73,0xaf,0x22,0xd5,0x3f,0x1e,0x94,0x37,0xc6,0x51,
    0xcd,0xb1,0xf5,0xe6,0xdc,0xf4,0xe4,0xdc,0x9a,0xef,0xb1,0x2e,0xe7,0x0d,0x1b,0xef,
    0xce,0x94,0xc5,0xc4,0x1a,0x44,0x75,0x21,0xfb,0x05,0xe7,0xf4,0x1b,0xa2,0xb1,0x1a,
    0x98,0x77,0x13,0x5d,0xbe,0x43,0xf6,0x40,0x6c,0x13,0x99,0xef,0x0f,0xb8,0xfd,0xf8,
    0x4d,0xd1,0xdc,0xf3,0xfb,0xf1,0x5b,0xa2,0x78,0x2d,0xef,0x15,0xf8,0x9f,0x2c,0x8a,
    0x37,0x70,0xaf,0x98,0xaf,0x89,0x6e,0xef,0x3d,0x28,0xca,0x03,0xe3,0x9f,0xcc,0x98,
    0xe0,0x32,0xd5,0x71,0x81,0xce,0x94,0xd8,0xa6,0xd2,0x7e,0x8a,0xe3,0xf2,0x5d,0xc7,
    0xc5,0xee,0xca,0x87,0x45,0xf7,0x01,0x64,0xaf,0x13,0xfb,0x9e,0x28,0x3e,0xc9,0xe5,
    0xf0,0x74,0x51,0xbc,0x86,0xeb,0x62,0xfe,0xa7,0x3a,0x7e,0x33,0x44,0x39,0x82,0xf3,
    0x74,0xf2,0xb0,0xd8,0x33,0x5d,0x6c,0x9b,0xe7,0x47,0x39,0x5e,0xc8,0xb6,0x31,0x4e,
    0xa3,0x28,0x7e,0xdc,0xdd,0x5f,0xb3,0x44,0x7d,0x6f,0xa6,0xce,0x6c,0x51,0xbd,0x59,
    0x1c,0x7f,0x93,0x1b,0x3f,0x64,0x73,0x62,0x6b,0x22,0xbf,0x39,0xac,0x01,0x50,0x1f,
    0xcf,0xcd,0x9d,0x2b,0xa5,0xac,0x1d,0x51,0xf3,0xcc,0xa3,0x7c,0x4c,0xdc,0xd5,0xf8,
    0x9f,0x52,0x1b,0xb4,0x0e,0xda,0x17,0xb2,0x1a,0x20,0x30,0x6f,0x50,0x0b,0x7f,0x39,
    0xa8,0x4d,0x21,0xfd,0x9f,0xa5,0xd8,0xe0,0xa0,0xff,0x17,0x20,0x7b,0x26,0x62,0xf0,
    0x73,0x6f,0x50,0x5f,0x83,0x43,0xe6,0x7b,0x08,0x6d,0xe7,0x49,0xb1,0x6f,0xb3,0xa9,
    0x0b,0xaa,0x03,0x3f,0x8b,0x88,0x0d,0x0d,0xea,0xab,0x2e,0x64,0x1c,0x86,0x91,0x1f,
    0x38,0x3c,0x4e,0x6c,0x44,0x50,0x7c,0xb0,0xd3,0xab,0x0f,0x6a,0x9f,0x38,0xfe,0x23,
    0x89,0x89,0xc3,0x46,0x11,0x83,0xea,0x58,0xd6,0x82,0x5f,0x0d,0x6a,0x0f,0x7d,0xc8,
    0x47,0xb0,0x06,0xb1,0xf9,0x6d,0x92,0xac,0x6e,0x2c,0x29,0x28,0x1f,0xe4,0x04,0xec,
    0xe6,0xe4,0xce,0x7d,0xad,0x23,0xcb,0x53,0xdd,0x02,0x75,0x51,0x73,0xd4,0xf2,0xbe,
    0x80,0x7d,0x93,0x14,0xd7,0xa5,0x57,0x98,0x6f,0xf3,0x19,0x6f,0xbe,0x8b,0xb7,0x97,
    0xe3,0x87,0x4e,0xbb,0x68,0xdb,0x22,0x59,0x9d,0xba,0x27,0x68,0xfd,0x0b,0xd9,0x0a,
    0x51,0x99,0xd5,0xa9,0x4b,0x44,0xe5,0x56,0xa7,0x2e,0xa4,0xdc,0x72,0x08,0xf2,0x05,
    0xb1,0x2d,0x64,0x4c,0xbc,0x5b,0x9d,0xfa,0x84,0xab,0x53,0xf7,0xb8,0x3a,0xf5,0x49,
    0x51,0x99,0xd5,0xa9,0xcb,0x98,0x5f,0x4f,0xba,0x3a,0x75,0xb9,0x28,0x6e,0x7b,0x6f,
    0x05,0x79,0x2c,0x77,0x75,0xea,0xb3,0xa2,0xdf,0x1e,0x46,0xd2,0xa7,0xaf,0x53,0x9f,
    0x13,0x95,0x5b,0x0d,0x79,0x7f,0x50,0xec,0xb9,0x36,0xea,0xd4,0xaf,0xb1,0x86,0xbc,
    0xdf,0xd5,0x90,0x63,0x82,0xe2,0xd8,0x33,0x13,0xdc,0x9d,0x00,0x7c,0x6c,0x6c,0x13,
    0x78,0xd6,0x8e,0x75,0x75,0xea,0x38,0x17,0x23,0x5f,0xa7,0x8e,0x67,0x8c,0x71,0x2e,
    0x46,0x43,0x50,0x1c,0x6b,0x66,0xfe,0x26,0xb8,0x3a,0xf5,0xeb,0x41,0x79,0x60,0x4e,
    0x1b,0x18,0xd7,0xf6,0xf9,0xf3,0xa2,0x72,0xf0,0x5b,0xe5,0xd6,0x03,0xf8,0xca,0xd8,
    0x56,0x71,0x3d,0x56,0x32,0x47,0x5a,0xd8,0x5f,0xe5,0xea,0x89,0x75,0x92,0x8d,0xdb,
    0xe6,0xf4,0xc5,0xdc,0x9c,0x0e,0x97,0x6c,0x4e,0x37,0x8a,0xca,0x6d,0xbc,0x9b,0x44,
    0xb1,0x8d,0x6e,0x4e,0xed,0x0c,0xfb,0x19,0xf1,0xe0,0xb0,0x2d,0x4e,0xd7,0xb0,0x6f,
    0x07,0xe5,0xe1,0xeb,0x8d,0xc9,0x41,0xf1,0x2d,0xae,0xde,0x98,0x12,0x14,0xaf,0x75,
    0x7a,0xd3,0x82,0xe2,0xbe,0x06,0x79,0x28,0x14,0xf3,0x1f,0x45,0x3d,0x1b,0xc3,0x77,
    0x82,0xea,0x58,0x0d,0xf2,0xb0,0xf3,0x71,0xf5,0xfc,0x0e,0x8a,0x5b,0x0d,0xb2,0xc0,
    0xad,0x3f,0x64,0x33,0x62,0x9b,0xc9,0xf5,0x9a,0xe9,0x6a,0x89,0xef,0xd3,0xce,0x6a,
    0x90,0xf9,0xce,0x0e,0xb2,0xc6,0xd8,0x66,0xd3,0x6e,0xb6,0xb3,0x6b,0xa2,0x9d,0xd5,
    0x20,0xcd,0xce,0x0e,0xb2,0xc7,0x70,0x06,0xd2,0x6e,0x9e,0xbb,0xa3,0x7f,0x18,0x74,
    0x3c,0x56,0x83,0x34,0x53,0xe7,0x31,0xa7,0x33,0x97,0x3a,0x21,0xa7,0xd3,0x1c,0xb2,
    0xfd,0xff,0xd7,0xa0,0xbe,0xe0,0x7b,0x2e,0xe3,0xa5,0xe7,0x08,0x75,0x1b,0x9d,0xbf,
    0x59,0xf4,0x67,0x35,0x8a,0xe9,0xcc,0x77,0xfe,0xde,0x0a,0xea,0x13,0x31,0x66,0x71,
    0xdc,0xd0,0x5d,0x40,0xdd,0x19,0xce,0xdf,0x23,0xf4,0x67,0x35,0x8c,0xe9,0x2c,0x70,
    0xfe,0x0e,0x05,0xf5,0x89,0x18,0x8f,0x70,0xfe,0x6d,0xfd,0x5a,0x5c,0x5e,0x2c,0x25,
    0xb6,0x28,0x28,0xde,0x98,0x7e,0x93,0x52,0x6c,0x69,0x50,0x3f,0x90,0xd9,0xdd,0xfd,
    0x78,0x50,0xbc,0x29,0xc9,0xee,0xd4,0x5f,0x8a,0xe2,0x5b,0x79,0x5f,0x6e,0x77,0x7b,
    0x0b,0xb2,0x6d,0xb1,0x6d,0xe7,0x5e,0xc2,0xfb,0x32,0xee,0xa5,0xe5,0xcc,0xe3,0x4d,
    0x92,0x71,0x7b,0x2a,0xa8,0xaf,0xa1,0x2e,0x67,0x57,0x38,0x6c,0x2c,0x6d,0x9f,0x0e,
    0xaa,0x0b,0xd9,0x52,0x62,0xcf,0x04,0xf5,0xf5,0x34,0x73,0x17,0xdf,0x2a,0x9f,0x0d,
    0xfa,0x9d,0xb2,0x85,0x3a,0x3f,0x0e,0xaa,0xb7,0x3c,0x64,0xdf,0x3c,0x7e,0x12,0x14,
    0x6f,0xe6,0x77,0xb0,0xe7,0x83,0xee,0xc5,0x71,0x3c,0x6b,0x57,0x06,0xd5,0xb1,0x3d,
    0x08,0x6c,0x15,0x31,0x49,0x39,0x95,0xa6,0xdf,0x3b,0x57,0x07,0xd5,0x85,0x0c,0x3e,
    0x26,0xf3,0x1e,0x69,0x0d,0xca,0x63,0x75,0x28,0xfe,0x86,0x82,0x3b,0x71,0x4d,0x50,
    0x79,0x92,0x64,0x75,0xc4,0x6f,0x72,0xe7,0x89,0xaf,0x23,0x7e,0x4b,0xb9,0xdd,0x9f,
    0xaf,0x89,0xfa,0xf0,0xad,0x43,0xdc,0xb5,0x90,0xed,0xe0,0x5d,0x52,0xc5,0x6f,0x71,
    0xb0,0x7d,0xcd,0xd5,0x20,0xeb,0x82,0xde,0x71,0x7b,0xaf,0x51,0x83,0xac,0x0f,0xea,
    0xc3,0xd7,0x20,0x1b,0x58,0x83,0xac,0x77,0x35,0xc8,0x8b,0x41,0x7d,0x6d,0x70,0x35,
    0xc8,0x46,0xda,0xee,0xb8,0x46,0x0d,0xf2,0x52,0x50,0x9d,0xf5,0xae,0x06,0xd9,0x14,
    0xd4,0xd7,0x4b,0xae,0xb6,0xf8,0x29,0xf9,0xf9,0x1a,0x64,0x73,0x50,0x7c,0x83,0xd3,
    0x7b,0x39,0xa8,0xbd,0xaf,0x41,0x7e,0x4e,0xcc,0xd7,0x20,0xaf,0x10,0xf3,0x35,0xc8,
    0x96,0xa0,0xf6,0xd0,0x87,0x7c,0x33,0xf7,0x9e,0xe5,0xec,0x76,0x57,0x13,0x94,0x16,
    0x94,0x0f,0xf6,0x1a,0xec,0xb6,0xe5,0xee,0x8a,0x16,0xa7,0xdb,0x8e,0xba,0xb8,0x4f,
    0x60,0xb7,0x5d,0x8a,0x6b,0x8d,0x85,0x92,0xf1,0x7a,0x5d,0xb2,0x71,0xfe,0x8a,0xfb,
    0xea,0x8f,0xa2,0xf8,0x0e,0x9e,0x71,0xbb,0xdc,0xbe,0x82,0x6c,0x67,0x6c,0xbb,0xe8,
    0x6b,0xa7,0xe8,0xb7,0x47,0x7c,0x5b,0xdd,0x2d,0xfa,0xed,0xd1,0xf2,0x26,0xad,0x57,
    0x88,0x5b,0x8d,0xf2,0x67,0x51,0xcc,0xce,0xeb,0x7d,0xce,0x37,0x64,0x7b,0x63,0xdb,
    0x47,0xdf,0x7b,0xdd,0xfd,0xf5,0x06,0xff,0xff,0xe3,0x9b,0xaa,0x7d,0xaf,0xad,0x8b,
    0x11,0x10,0xf7,0x2f,0x92,0x7d,0xf3,0x9c,0xe4,0xfe,0x4f,0xbf,0x49,0x99,0xd5,0xe5,
    0xfb,0x45,0x31,0xff,0xbd,0xe0,0xa0,0xfb,0xae,0x60,0x7a,0x87,0x44,0x75,0x21,0x1b,
    0x1f,0x11,0xc4,0xdf,0x19,0x14,0x7f,0x43,0xb2,0xf3,0xcf,0x78,0xee,0xe3,0xdc,0x43,
    0xef,0x4d,0xd6,0x0e,0x98,0x17,0xd8,0xec,0x75,0x79,0xff,0xb6,0xb4,0x9d,0xf7,0xaf,
    0x72,0x6e,0x8e,0x70,0xde,0x4f,0x72,0x6e,0x8e,0xb9,0xb9,0x81,0xec,0x68,0x6c,0xc7,
    0x18,0xf3,0x28,0xe7,0x18,0xdf,0xa5,0xff,0xc5,0x6f,0xd2,0x76,0xae,0x9c,0x12,0xe5,
    0x31,0x35,0xfa,0x45,0x3e,0xbc,0x4b,0x9d,0x53,0x8e,0xcb,0xfb,0xa2,0xf8,0xbb,0xd7,
    0xd8,0x27,0x67,0x44,0x75,0xc0,0xc7,0xf6,0xc9,0x59,0xd1,0x31,0x9c,0x61,0x3e,0x19,
    0x97,0x63,0x1c,0x3f,0x74,0x0e,0x04,0xd5,0xc1,0x9c,0x9c,0x25,0x67,0xe3,0x79,0x2e,
    0xc7,0xf3,0xbf,0xe4,0x69,0xb9,0xf8,0xa1,0xa8,0xbd,0xdf,0x4b,0x1f,0x11,0xf3,0x7b,
    0xe9,0x3c,0x31,0xbf,0x97,0x2e,0x88,0xda,0x43,0xff,0x3c,0x73,0x77,0x5a,0x8c,0x83,
    0x98,0x88,0x73,0x81,0x9c,0x2d,0x6f,0x77,0x49,0xf1,0x77,0x6c,0x3c,0xaf,0xc4,0x28,
    0x77,0xc5,0xf6,0x7f,0xb0,0x00,0x80,0x71,0xd0,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
