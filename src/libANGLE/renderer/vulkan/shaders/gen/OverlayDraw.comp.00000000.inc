// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x6c,0x97,0xd5,
    0x15,0x7e,0xcf,0xed,0xf7,0xc4,0x59,0xa7,0x6e,0x41,0x6b,0x33,0x0a,0x4c,0x27,0xb4,
    0x43,0xc5,0x0e,0xd7,0x40,0x5b,0x40,0xa8,0xe0,0x26,0x08,0x8a,0x19,0x59,0x80,0x8d,
    0xb1,0x6c,0x64,0x24,0xcb,0x16,0x93,0x7e,0x80,0xcc,0xa9,0x8c,0x45,0xf7,0x87,0x93,
    0x7d,0x40,0xf8,0xd0,0x6e,0x93,0x49,0xd9,0xca,0xa4,0x83,0x75,0x2e,0xa6,0x02,0x25,
    0x59,0x04,0x06,0x63,0xc9,0x24,0x0b,0x34,0x71,0x55,0x3a,0x23,0x4a,0x13,0xb4,0x40,
    0x1b,0x76,0x9e,0xf7,0x3c,0xd7,0xf7,0xfc,0x7e,0x2b,0xbf,0xe4,0xe6,0x7d,0xef,0x73,
    0xce,0x3d,0xe7,0xb9,0xe7,0x9e,0x7b,0xcf,0xfd,0xbd,0x05,0x61,0x7c,0x49,0x92,0x48,
    0xf2,0x89,0xa4,0x34,0xf9,0x71,0x48,0xd2,0xdf,0xf5,0x49,0x50,0x24,0x49,0xae,0x49,
    0x8a,0xd3,0xe7,0xdc,0x07,0x16,0x3d,0x50,0xf3,0xfd,0x1f,0xac,0xac,0x99,0x7a,0xcf,
    0x14,0xc8,0x3f,0x99,0x14,0xa4,0x7a,0x90,0x5d,0x97,0x94,0x24,0x45,0xfa,0x2c,0xd4,
    0xf6,0xdd,0x15,0xdf,0x5e,0x03,0x7c,0xbb,0xb6,0x7d,0xda,0xca,0x75,0x7c,0x61,0x6a,
    0x2f,0x51,0xeb,0xa6,0x93,0xda,0xd3,0xb7,0x7a,0x7d,0x16,0xa7,0x3a,0x49,0xd2,0xa4,
    0x16,0x1a,0xcc,0x75,0x32,0x9e,0xcf,0x88,0x09,0x31,0xaf,0x17,0x88,0x7d,0xd6,0x61,
    0x05,0xc4,0xa6,0xd0,0xfe,0x4c,0xda,0x9f,0x22,0xa6,0x33,0x2b,0xcf,0xfe,0x5c,0x1d,
    0x31,0x8b,0xb6,0xa0,0x7f,0x9f,0x3e,0xab,0x3e,0x96,0x59,0x7f,0x9c,0xe3,0xbb,0x2a,
    0x4f,0xbe,0x8a,0xf2,0x42,0xf6,0x9b,0xf3,0xe6,0xd3,0x32,0xca,0x7c,0x5a,0x46,0x99,
    0x4f,0xcb,0x28,0xf3,0x69,0x19,0x65,0x3e,0xad,0x79,0xf3,0x69,0x1b,0x65,0x3e,0x6d,
    0x6e,0x3e,0xeb,0xf2,0xf8,0xae,0x23,0xdf,0x28,0xdf,0x9e,0xae,0x6f,0x92,0x54,0xd0,
    0x67,0xfb,0x28,0x7c,0xdb,0x1d,0xdf,0x52,0xfa,0x68,0x77,0x36,0xba,0xf2,0x7c,0x74,
    0xd1,0x47,0x01,0xfb,0xfb,0xe8,0xe3,0x66,0xf6,0xf7,0x48,0xae,0x3e,0xfa,0xe3,0x5c,
    0xff,0x90,0x98,0xfe,0x58,0x6d,0x37,0xa8,0x97,0x90,0xda,0x2b,0x48,0xed,0xe1,0xfd,
    0x26,0xd5,0x29,0x66,0x9c,0xf0,0xfb,0x8c,0xf6,0x4b,0x18,0x97,0xc0,0x7e,0x29,0xfb,
    0x58,0x97,0x1b,0x15,0x2d,0xd3,0xe7,0xa7,0xd5,0xc2,0x4d,0x1c,0x07,0x9d,0xaa,0xd4,
    0x96,0xe9,0xa0,0xff,0x79,0x7d,0x96,0xd1,0xc6,0x24,0xfa,0xa8,0xa5,0x8f,0xd8,0xaf,
    0xa3,0x7e,0xec,0xcf,0xe0,0x1a,0x56,0x30,0x97,0x4b,0x89,0x55,0xaa,0xb4,0x81,0xfd,
    0x2a,0x3e,0xeb,0xdd,0xb8,0x46,0xf2,0xa8,0x60,0x8e,0x36,0x10,0xab,0x64,0x3e,0xce,
    0x4c,0xe5,0x85,0xc9,0x6c,0xf2,0x99,0x95,0xfa,0xb6,0xfe,0x7d,0x2e,0x0e,0x73,0x68,
    0x47,0x68,0x7b,0x4e,0x1a,0xc3,0x8c,0xf3,0x9c,0x74,0x0d,0x6d,0x2d,0x60,0xef,0xcb,
    0x1c,0x5b,0xec,0xb8,0x2c,0x22,0xbf,0xd8,0x7f,0x54,0xdb,0x95,0x34,0xfe,0x65,0xc9,
    0x4a,0xc6,0x48,0x68,0x33,0xff,0x09,0x9b,0xdf,0xe4,0xfb,0x4a,0x72,0x44,0x7f,0x95,
    0x5b,0x9b,0xd5,0xfa,0x9c,0xe3,0xd6,0x66,0x0d,0xfb,0x05,0x9c,0x7f,0x73,0x5e,0xdc,
    0x5a,0xf2,0xe2,0xd6,0x4c,0x3d,0xe4,0x7e,0x8b,0x8b,0x13,0xf2,0xbc,0x95,0x1c,0xd6,
    0xd2,0x7e,0x1b,0x39,0xa0,0xbf,0xce,0xf9,0xdc,0xc0,0x79,0x14,0x70,0x9e,0x78,0xdf,
    0x98,0x32,0x5c,0x5f,0x0f,0xf9,0x56,0xc6,0x24,0xc6,0x69,0x1b,0xe7,0xb8,0x95,0xf6,
    0xb6,0xf1,0x3c,0x93,0xd4,0x77,0x61,0x9a,0xff,0x31,0xe7,0xa0,0xff,0x6b,0xe6,0x4e,
    0x3b,0xf5,0xd1,0xff,0x0d,0x31,0xc8,0x7f,0xcb,0xf7,0x12,0xe7,0xbf,0x93,0x31,0x9a,
    0xac,0x28,0xe6,0xba,0x87,0x58,0x6c,0x1b,0xb9,0x06,0xaf,0xd0,0x4f,0x8c,0x79,0x32,
    0xca,0x1a,0xec,0xe5,0xfb,0x2b,0xf4,0x8f,0x7e,0x17,0xb1,0xc8,0x7f,0x9f,0xcb,0x13,
    0xd8,0xeb,0xc9,0xcb,0x9b,0x63,0xec,0xc3,0xde,0xbf,0x18,0xbb,0x52,0xc7,0xaf,0x44,
    0x72,0xf9,0x75,0xba,0xb1,0xe5,0x62,0xfa,0x18,0x3b,0x93,0xef,0x55,0xce,0x57,0xb3,
    0x62,0xcb,0xdd,0xdc,0x9f,0xd2,0xfe,0x91,0x37,0xde,0x98,0x11,0x6d,0x3f,0x9d,0x67,
    0x1b,0x72,0xd8,0xfa,0xb9,0x58,0xdc,0x8a,0x19,0x8b,0x3f,0x48,0x6e,0x3e,0xc6,0x5f,
    0x70,0xdc,0x3b,0x29,0x84,0x6e,0x1d,0xfb,0x7b,0x24,0xc6,0xba,0x38,0x5d,0x53,0x9c,
    0x31,0x8b,0xb8,0x9f,0x11,0x87,0x1a,0x5d,0x79,0xac,0xcd,0x86,0x80,0x3d,0x5f,0x94,
    0xda,0x2b,0xa4,0x6d,0xe4,0xc4,0x90,0x22,0xa8,0x6f,0x1f,0x69,0xaf,0x97,0xb6,0x2e,
    0xeb,0x3b,0xce,0x87,0xc3,0x62,0x72,0x3c,0xa7,0x33,0x97,0x76,0x30,0x5f,0x1e,0x54,
    0xab,0xb0,0xfb,0x02,0xb1,0x1d,0x6e,0xed,0x1a,0xd5,0x22,0xf2,0xe2,0x25,0xe6,0x0a,
    0xf6,0xed,0x74,0x9e,0x65,0x3b,0x89,0xff,0x5e,0x75,0x70,0x2e,0xfd,0x8e,0x36,0x80,
    0x6f,0x56,0x1d,0xc4,0xe4,0x65,0xe2,0xe0,0xd4,0x41,0xbb,0x97,0x54,0x06,0x7c,0x97,
    0xb6,0x0e,0xf2,0xc6,0xfb,0x45,0x7d,0xf6,0x92,0x67,0x07,0xfd,0x20,0x57,0xfe,0xc4,
    0x3c,0x89,0xbc,0xf7,0x33,0x4f,0x22,0xef,0x3f,0x13,0xdb,0xef,0x78,0xb7,0x71,0x4f,
    0x77,0x53,0xbe,0x4c,0x35,0x91,0x27,0x7f,0xa1,0xbd,0xee,0x8f,0x6b,0x43,0x92,0x2c,
    0x54,0xfe,0x58,0xbb,0xd7,0x28,0x4f,0x1c,0x76,0x80,0x98,0x90,0xdf,0x41,0xf2,0xc5,
    0xf3,0x02,0xf3,0x62,0x49,0xb0,0x7d,0x01,0xce,0x6b,0xf5,0xfd,0x30,0x65,0xe9,0xb9,
    0x15,0xcc,0x06,0x64,0x27,0x13,0x93,0xed,0x52,0xdb,0x88,0xcd,0xdf,0x28,0xc7,0xfa,
    0x7c,0xa8,0x7c,0x7b,0x29,0x8f,0x31,0x82,0xfc,0x90,0xb6,0x5e,0xfa,0xc4,0xfb,0x18,
    0xb5,0x8a,0x5c,0x3e,0x42,0x4e,0xf7,0xd3,0x46,0x1b,0x73,0xf8,0x28,0x65,0x07,0xd5,
    0x07,0xf4,0x8e,0x73,0xcf,0x1c,0x4d,0x32,0x9d,0x13,0xc4,0x7b,0x39,0xc7,0x93,0xb4,
    0x71,0x22,0x5d,0xef,0x92,0x74,0x5f,0xbd,0xc9,0xb3,0x69,0x2e,0xc7,0xc6,0x75,0x47,
    0x0c,0x4f,0x51,0x1e,0xe3,0x7f,0x44,0x0c,0x3b,0xe5,0xe2,0x1f,0x73,0xe2,0xa8,0x58,
    0x4e,0x40,0x67,0x0b,0x73,0xe2,0x98,0x18,0x8e,0x9c,0x38,0x29,0xd9,0x7c,0x81,0xff,
    0x5d,0xdb,0x49,0xe6,0x00,0xde,0xa3,0x8f,0xe3,0xce,0x47,0x60,0xbe,0x77,0xd2,0xc7,
    0x09,0xfa,0x38,0xee,0x7c,0xfc,0x43,0x0c,0xc7,0x9a,0x45,0x7b,0x78,0x62,0x5d,0x20,
    0xff,0xa7,0x18,0x8f,0x43,0xd4,0x85,0xaf,0x9d,0x1c,0x7b,0x9a,0x72,0xf0,0xeb,0x73,
    0xeb,0x01,0xfc,0x8c,0xb6,0x3e,0xae,0xc7,0x19,0xe6,0xc4,0x61,0xf6,0xfb,0x5c,0xde,
    0xbc,0xe5,0xf6,0x51,0xc4,0xfa,0x5d,0x8c,0x5e,0x66,0x0e,0xbc,0x4d,0xdd,0xfe,0x24,
    0xf3,0xff,0x0e,0x71,0xf8,0x1f,0x70,0xfe,0x81,0x9f,0xd5,0x36,0x40,0x7f,0x67,0x9d,
    0xed,0x77,0xe9,0x4f,0x1c,0xf6,0x1e,0xfd,0x89,0xf3,0x77,0x8e,0xba,0xef,0x91,0x7b,
    0xb4,0x35,0x90,0x64,0xb1,0x79,0x9f,0xfe,0xfb,0xa8,0x7f,0xd6,0x71,0xfb,0x80,0x72,
    0x70,0x1b,0x74,0xdc,0x80,0x9f,0xd7,0x36,0x48,0x7b,0x78,0x5f,0x4f,0x1e,0x17,0x38,
    0xc7,0x1e,0xc7,0x6d,0xc8,0xad,0x65,0xe4,0x76,0x91,0xba,0x43,0xe4,0x16,0x6d,0x0d,
    0x3a,0x6e,0x97,0xe8,0x7f,0x80,0xfa,0xe7,0x1d,0xb7,0xcb,0x94,0x83,0xdb,0x88,0xe3,
    0x06,0x7c,0x58,0xdb,0x08,0xed,0x0d,0x3b,0x1e,0x57,0x5c,0xdc,0x22,0x5f,0x74,0xae,
    0xe4,0xf1,0x0d,0xcc,0xbf,0x02,0xc7,0xb7,0x40,0x4c,0x37,0x30,0xcf,0xa2,0xfd,0x11,
    0xc7,0xb7,0x50,0x8c,0xd3,0x20,0xf5,0x87,0xc9,0xaf,0xd8,0xe5,0x3d,0x74,0x8a,0xb4,
    0x15,0x33,0x4f,0x8b,0x24,0x37,0xaf,0x80,0x3f,0xa1,0x3e,0xb1,0x0f,0xae,0x75,0xfb,
    0xa9,0x51,0x77,0x23,0xee,0x4a,0xd7,0x4b,0xee,0x5e,0x45,0x9d,0xab,0xe5,0x7e,0x05,
    0xf7,0x4f,0x89,0xe9,0xc4,0xb9,0xbc,0x29,0x66,0x07,0xbf,0xa7,0x89,0x9d,0x12,0xc3,
    0xa1,0x1b,0xb1,0x7f,0x8b,0xe1,0x75,0x69,0x9d,0x37,0xec,0xb4,0xc3,0x1a,0x75,0x86,
    0xf0,0x7f,0x26,0xcf,0x7f,0x13,0xc7,0x9e,0x96,0x8c,0x43,0x9f,0x98,0x5e,0xe4,0x70,
    0x8b,0x8b,0x67,0xc4,0x6e,0x95,0x2c,0x5f,0x9f,0x20,0x56,0x29,0xa6,0x0b,0x59,0x07,
    0xe3,0x3e,0x5e,0xcc,0x5e,0x25,0xf7,0xe8,0x44,0x17,0x4b,0xc8,0x26,0x68,0x9b,0xc8,
    0x58,0x4e,0x70,0x3e,0x6f,0xe3,0xbc,0xfd,0x5a,0xdf,0x2e,0x86,0xd7,0xf1,0xcc,0x82,
    0xfd,0x3b,0xc4,0xf0,0x4a,0xae,0x43,0xb4,0x35,0xd1,0x9d,0x1f,0x93,0xc4,0x78,0x60,
    0x6d,0xee,0xa0,0x4f,0x70,0xa9,0x76,0x5c,0xa0,0x33,0x59,0x5b,0x35,0xc7,0x4f,0x76,
    0x5c,0xee,0x74,0x5c,0xe2,0x39,0x7c,0x17,0xd7,0x00,0xb2,0xc3,0xc4,0xee,0x16,0xc3,
    0x7b,0x5c,0xde,0x4d,0x15,0xc3,0x6b,0xb9,0x4f,0xa2,0xfd,0x6a,0xc7,0xef,0x1e,0x31,
    0x8e,0xe0,0x3c,0x95,0x3c,0xa2,0xef,0x69,0xce,0x77,0x8c,0xf3,0xbd,0x9c,0xef,0x34,
    0xb1,0x73,0x15,0x36,0xea,0xc4,0xf0,0x3e,0x77,0x36,0x4e,0x17,0xb3,0xfd,0x12,0x75,
    0x66,0x88,0xe9,0x4d,0xe7,0xfc,0x1b,0xdc,0xfc,0x21,0xab,0xd7,0xd6,0x40,0x7e,0xf5,
    0x62,0xf5,0x05,0x77,0xaf,0x59,0x79,0x39,0x73,0x8c,0xf9,0x8a,0x7a,0x3a,0x9b,0xf2,
    0x07,0x35,0xbf,0x71,0x27,0x7e,0x4b,0xac,0xc6,0x2e,0x09,0x59,0x7d,0x09,0xcc,0x1b,
    0xdc,0xb3,0xfe,0x23,0x36,0x06,0xb9,0xf4,0x23,0x62,0xfd,0x62,0x77,0x53,0xc8,0x7e,
    0xaa,0x18,0xec,0xbc,0x2d,0x66,0xab,0xdf,0xd9,0x7e,0x87,0x63,0x67,0x4b,0xae,0xed,
    0x38,0x66,0x40,0x4c,0x07,0x76,0x7e,0x48,0xec,0xbf,0x62,0xb6,0x06,0x24,0xe3,0xf0,
    0x2e,0x39,0x82,0xc3,0x53,0xc4,0xce,0x89,0xe1,0xfd,0x4e,0xef,0x7d,0xb1,0xf1,0x89,
    0xe3,0xff,0x01,0x31,0x71,0xd8,0x79,0x62,0xe0,0xb2,0x80,0xf7,0x8c,0x41,0xb1,0xf1,
    0xd0,0x87,0xfc,0x1c,0xf3,0x33,0xc6,0xb7,0x41,0xb2,0x3b,0xc9,0x3a,0xc6,0x0b,0x39,
    0x31,0xc8,0x75,0xf0,0x67,0x8a,0xdd,0x51,0xca,0x52,0xdd,0xb5,0xd4,0x3d,0xc3,0xfb,
    0x33,0xce,0x1f,0x8c,0x6f,0x90,0xdc,0x3b,0x4f,0x2f,0xf3,0xad,0x89,0xfe,0x9a,0x9c,
    0xbf,0x47,0x68,0x03,0x3a,0x8f,0xeb,0x73,0xbe,0x64,0x77,0xa0,0xc5,0xc1,0xee,0x56,
    0x90,0x2d,0x11,0x93,0xc5,0x3b,0xd0,0x57,0xc4,0xe4,0xf1,0x0e,0x34,0x8f,0xf2,0x98,
    0x43,0x90,0xdf,0xaf,0x6d,0x1e,0x7d,0xe2,0x3d,0xde,0x81,0x16,0x4a,0x76,0x07,0x5a,
    0xec,0xee,0x40,0x0f,0x89,0xc9,0xe2,0x1d,0x68,0xb1,0x58,0x7e,0x01,0x8f,0x3a,0x0f,
    0x8b,0xe1,0x71,0xef,0x2d,0x21,0x8f,0x87,0x25,0xbb,0x03,0x7d,0x55,0xec,0x7f,0xec,
    0x5c,0x8e,0xf5,0x77,0xa0,0xa5,0x62,0xf2,0x78,0x3f,0xb9,0x20,0x86,0x2d,0x95,0xff,
    0xbf,0x03,0x7d,0xc8,0x33,0xfb,0x82,0xbb,0x9f,0x7c,0x24,0x86,0x63,0xcf,0x0c,0xbb,
    0xf9,0x02,0x1f,0x42,0x9d,0xe0,0x7c,0x87,0x9c,0x8f,0x8b,0xce,0x47,0xfe,0x1d,0xe8,
    0x12,0x7d,0x5c,0x74,0x3e,0x2e,0x8b,0xe1,0x58,0xb3,0x68,0x6f,0xd8,0x9d,0x11,0x23,
    0x62,0x3c,0x10,0xd3,0xcb,0xf4,0x1b,0xf7,0xf9,0x32,0xa1,0x5c,0xbd,0xac,0x70,0xfc,
    0x80,0x2f,0xd7,0xb6,0x82,0xf6,0x96,0xd3,0xfe,0x7c,0xf6,0x57,0xb8,0x5a,0xf5,0x2d,
    0x37,0xef,0x18,0xd3,0xef,0xe4,0xc5,0xb4,0x5c,0xb2,0x98,0xae,0x16,0x93,0xc7,0xf9,
    0xae,0x11,0xc3,0x56,0xbb,0x98,0xc6,0x33,0xec,0x7b,0xc4,0x83,0xc3,0x1e,0x73,0xba,
    0x11,0x2b,0x0c,0xc6,0xc3,0xd7,0xba,0xa2,0x60,0xf8,0x63,0xae,0xd6,0x95,0x04,0xc3,
    0xeb,0x9c,0x5e,0x59,0x30,0xdc,0xd7,0xbf,0x6b,0x1c,0x16,0xeb,0xdf,0x98,0x90,0x3b,
    0xa7,0x26,0x8e,0x85,0x6e,0xac,0x7f,0xd7,0x06,0xd3,0x8b,0x76,0xae,0x73,0xfe,0x9e,
    0x24,0x56,0x1e,0x0c,0xc7,0x7f,0xbe,0xd7,0x89,0xdd,0x10,0x6c,0x6c,0x79,0xc8,0x6a,
    0xc2,0x8d,0xc1,0xf0,0x47,0x93,0xec,0xac,0x6e,0x11,0xc3,0x9b,0xb9,0x66,0x6d,0x6e,
    0xcd,0x20,0x6b,0x45,0xee,0x73,0x8d,0x5a,0xc5,0x78,0x20,0xc6,0x63,0x19,0x9f,0x35,
    0x92,0x71,0xbb,0x39,0x98,0xad,0x46,0x17,0x8b,0x5b,0x1c,0xb6,0x80,0x63,0x2b,0x82,
    0xe9,0x42,0xf6,0x24,0xb1,0x5b,0x83,0xd9,0xaa,0xe0,0xdc,0xf1,0xbd,0xa5,0x32,0xd8,
    0xb7,0x96,0xf5,0xd4,0x19,0x17,0x4c,0x6f,0x6c,0xc8,0xfe,0xa7,0x55,0x05,0xc3,0xdb,
    0xf8,0x5f,0x7d,0x7c,0xb0,0x35,0x5e,0xc8,0x3d,0x3c,0x21,0x98,0x4e,0x5c,0x5b,0x60,
    0x13,0x89,0x49,0xca,0xa9,0x38,0xfd,0x66,0xf3,0xb9,0x60,0xba,0x90,0xc1,0xc6,0x32,
    0x9e,0x4f,0xb7,0x05,0xe3,0x01,0xb9,0xff,0xdf,0x87,0xb3,0xf6,0xf6,0x60,0xf2,0x24,
    0xc9,0xea,0xd3,0xc6,0xbc,0x3c,0xf5,0xf5,0xe9,0x27,0x94,0xc7,0x73,0xf9,0x19,0x31,
    0x1b,0xbe,0x8d,0xd1,0x8c,0x86,0xec,0x59,0x9e,0x51,0x35,0xfc,0x7e,0x80,0xb1,0xcf,
    0xb8,0xfa,0x33,0x29,0xd8,0xd9,0xf9,0xc8,0x55,0x6a,0xdb,0xe4,0x60,0x36,0x7c,0x6d,
    0xab,0x0e,0x56,0xdb,0x20,0x8b,0x75,0xaa,0x26,0x98,0x2d,0xc8,0xa2,0xed,0x2f,0x70,
    0xec,0xb3,0x57,0xa9,0x6d,0x77,0x06,0xd3,0x81,0x9d,0x58,0xdb,0xee,0x0a,0x66,0x0b,
    0xb2,0xc8,0xe1,0x6e,0xf2,0xf3,0xb5,0xad,0x36,0x18,0x5e,0xed,0xf4,0xbe,0x18,0x6c,
    0xbc,0xaf,0x6d,0xd3,0x88,0xf9,0xda,0x76,0x2f,0x31,0x5f,0xdb,0xbe,0x14,0x6c,0x3c,
    0xf4,0x21,0x87,0x7d,0x9c,0x2b,0x31,0x67,0xdb,0x5c,0xad,0x59,0x4f,0x3e,0x38,0x6b,
    0x30,0xae,0x35,0xef,0x0c,0x9a,0xef,0x74,0x1f,0xa7,0x2e,0xce,0x29,0x8c,0x6b,0x93,
    0xdc,0x1a,0x36,0xcf,0xd5,0xe6,0xe7,0x24,0x9b,0xe7,0x7e,0xee,0xab,0x9f,0x89,0xe1,
    0x1b,0x79,0x6f,0xdf,0xe4,0xf6,0x15,0x64,0xcf,0x6b,0xdb,0x44,0x5b,0xcf,0x8b,0x7d,
    0x2f,0xc1,0xf7,0xa0,0x5f,0x88,0x7d,0x2f,0x39,0xe6,0xee,0xe1,0xbf,0x24,0x1e,0x6b,
    0xdf,0xaf,0xc4,0xb0,0x5a,0xda,0xde,0xe2,0x6c,0x43,0xb6,0x19,0x67,0x39,0x6d,0x6f,
    0x76,0xe7,0xe2,0x56,0xb1,0xff,0x2c,0x1b,0x42,0xf6,0x8d,0xa9,0x51,0x3d,0xc0,0xef,
    0x36,0xc9,0xbe,0xd3,0xf4,0x38,0xdf,0xdb,0x29,0x8b,0xf7,0xbd,0x1d,0x62,0x98,0xff,
    0x8f,0xf3,0xa2,0x64,0xff,0x85,0xa2,0x5e,0xbb,0x98,0x2e,0x64,0x0f,0x29,0x02,0xff,
    0x0b,0x82,0xe1,0x5b,0xe9,0x1c,0xf1,0x8c,0x3c,0xb7,0x30,0xf6,0xd0,0x5b,0x1a,0xec,
    0xfc,0x47,0x5c,0x30,0x66,0xb3,0xcb,0xfb,0x9d,0x32,0x7a,0xde,0x77,0x33,0x36,0xbb,
    0x18,0xf7,0x4e,0xc6,0x66,0xb7,0x8b,0x0d,0x64,0x1d,0xda,0x76,0xc7,0x6f,0x45,0xac,
    0x21,0xf8,0x96,0xf6,0x47,0x7e,0x47,0x8b,0xe7,0xca,0x5e,0x31,0x1e,0x5f,0x57,0xbb,
    0xc8,0x87,0x2e,0xea,0xec,0x75,0x5c,0xf6,0x89,0xe1,0x5d,0x57,0xd9,0x27,0xdd,0x62,
    0x3a,0xcf,0xb9,0x3b,0xe0,0xab,0x62,0x73,0xe8,0x66,0x3e,0x45,0x2e,0xbb,0x39,0x7f,
    0xe8,0x7c,0x2d,0x98,0x0e,0x62,0xf2,0x2a,0x39,0x47,0x9e,0x7f,0xcd,0xe3,0xf9,0x1a,
    0x79,0xc6,0x5c,0xec,0x11,0x1b,0xef,0xf7,0xd2,0xeb,0xc4,0xfc,0x5e,0x3a,0x40,0xcc,
    0xef,0xa5,0x83,0x62,0xe3,0xa1,0x7f,0x80,0xb9,0xfb,0x0d,0xf5,0x03,0x9f,0xf0,0x73,
    0x90,0x9c,0x63,0xde,0x6e,0x92,0xdc,0x6f,0x6f,0x78,0x8e,0xa8,0x97,0x69,0xda,0xfe,
    0x07,0x78,0x5c,0x97,0x23,0x74,0x1b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint packedChars = textWidgetsData[textWidget]. text[packIndex / 4][packIndex % 4];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     return graphWidgetsData[graphWidget]. values[valueIndex / 4][valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
