// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x97,0x55,
    0x15,0x7e,0xcf,0xfd,0x2d,0xfb,0x81,0x8e,0x50,0xca,0x97,0x2d,0x5f,0xcb,0xa0,0xd0,
    0xee,0xac,0x40,0xb0,0x51,0x80,0xb0,0x82,0x02,0x81,0xa0,0x29,0x53,0xb1,0x10,0xc9,
    0xc7,0x88,0x31,0xc0,0x1a,0x18,0x5f,0x1b,0x01,0x41,0x88,0x98,0xb9,0xbb,0xd0,0x96,
    0x18,0xd5,0x3f,0x96,0xc2,0x34,0xfe,0x53,0x53,0xe6,0x36,0x13,0x81,0x26,0x88,0x22,
    0x34,0x44,0x09,0x91,0x81,0x4a,0x2b,0xd4,0xe4,0x07,0x5f,0xda,0xd8,0x7d,0xde,0xf3,
    0x1c,0xde,0xb3,0xef,0x2c,0xbf,0x99,0x3b,0xef,0x7b,0x9f,0x73,0xee,0x39,0xcf,0x3d,
    0xf7,0xdc,0x7b,0xcf,0xef,0x2d,0x84,0x01,0x25,0x49,0x41,0x92,0xce,0x49,0x69,0x52,
    0x52,0x48,0xd2,0xdf,0x27,0x92,0x90,0x48,0x7c,0x5e,0x93,0x14,0xa7,0xcf,0x89,0x53,
    0xef,0x99,0x5a,0xbd,0x6c,0xf9,0xfc,0xea,0xe1,0x23,0x86,0x40,0x7e,0x5d,0xa2,0x8a,
    0x90,0x75,0x49,0x4a,0x92,0x4e,0xf1,0x59,0x14,0xdb,0xe2,0xfb,0x1e,0x58,0x02,0xfc,
    0x70,0x6c,0x6d,0xb1,0x75,0x8d,0xe3,0x8b,0x52,0x7b,0x49,0xb4,0xae,0x3a,0xa9,0xbd,
    0xf8,0x36,0x2e,0x3e,0x8b,0x53,0x9d,0x24,0x99,0x14,0x2d,0xd4,0xaa,0xeb,0x64,0x00,
    0x9f,0x86,0x09,0x31,0xaf,0x17,0x88,0xf5,0x73,0x58,0x81,0xd8,0x10,0xda,0x1f,0x4f,
    0xfb,0x43,0x44,0x75,0x26,0xe4,0xec,0x4f,0x8c,0x23,0x26,0xd0,0x16,0xf4,0xef,0x88,
    0xcf,0x8a,0x2b,0x32,0xed,0xf7,0x77,0x7c,0xd7,0xe6,0xe4,0x6b,0x29,0x2f,0x62,0xbf,
    0x29,0x37,0x9f,0xe6,0x0e,0xe6,0xd3,0xdc,0xc1,0x7c,0x9a,0x3b,0x98,0x4f,0x73,0x07,
    0xf3,0xd9,0x66,0xf3,0x29,0x52,0x9d,0xed,0x1d,0xcc,0x67,0xbb,0x9b,0x4f,0x4b,0x8e,
    0x6f,0x0b,0xf9,0x9a,0xfc,0x70,0xba,0xbe,0x49,0x52,0x4e,0x9f,0x47,0x3b,0xe0,0x7b,
    0xd4,0xf1,0x2d,0xa5,0x8f,0xa3,0xce,0xc6,0x99,0x9c,0x8f,0x33,0xf4,0x51,0x60,0xbf,
    0x8d,0x3e,0x6e,0x64,0xff,0x0d,0x69,0xaf,0x8f,0x7e,0x7f,0xd7,0xff,0x40,0x54,0xbf,
    0x57,0x6c,0xd7,0x47,0x2f,0x21,0xb5,0x57,0x48,0xed,0xe1,0xbd,0x5b,0xd4,0x29,0x66,
    0x9c,0xf0,0xeb,0x11,0xfb,0x25,0x8c,0x4b,0x60,0xbf,0x94,0x7d,0xac,0xcb,0x0d,0x11,
    0x2d,0x8b,0xcf,0xee,0xd1,0x42,0x37,0x8e,0x83,0x4e,0x45,0x6a,0x4b,0x75,0xd0,0x1f,
    0x1c,0x9f,0x65,0xb4,0x51,0x49,0x1f,0x35,0xf4,0x61,0xfd,0x51,0xd4,0xb7,0xfe,0x58,
    0xae,0x61,0x39,0x73,0xb9,0x94,0x58,0x9f,0x28,0xad,0x65,0xbf,0x82,0xcf,0x71,0x6e,
    0xdc,0x6d,0xe4,0x51,0xce,0x1c,0xad,0x25,0xd6,0x87,0xf9,0x38,0x3e,0x95,0x17,0x25,
    0xb7,0x93,0xcf,0x84,0xd4,0xb7,0xf6,0xef,0x70,0x71,0x98,0x48,0x3b,0x42,0xdb,0x13,
    0xd3,0x35,0xcb,0x38,0xa3,0x3f,0x99,0x6b,0x01,0x7b,0x53,0x39,0xb6,0xd4,0x71,0xa9,
    0x73,0xe3,0xd1,0x9f,0x97,0x8b,0x41,0x7d,0x4e,0xff,0xa1,0xd8,0x3e,0x4e,0xd7,0xa7,
    0x2c,0x69,0x60,0x0c,0x85,0x3e,0xf3,0x4f,0xf8,0xfc,0x16,0xdf,0x1b,0x38,0x07,0xf4,
    0xd7,0xba,0xb5,0x5b,0x9f,0xae,0x7b,0xb6,0x76,0x1b,0xd9,0x2f,0x38,0x9f,0x8d,0x8c,
    0x5f,0x39,0xf7,0x58,0x29,0x31,0xc4,0xb9,0x39,0x17,0xe7,0x26,0xea,0x61,0xaf,0x34,
    0xbb,0xb8,0x62,0x5f,0x6c,0x23,0xa7,0x1f,0xd0,0xdf,0x76,0x72,0x42,0xbf,0xc5,0x71,
    0xf8,0x1d,0xe7,0x65,0x1c,0xf0,0xde,0x9a,0x32,0x5e,0x37,0x16,0xf2,0x43,0xcc,0x2f,
    0x8b,0xeb,0x6b,0x9c,0xf3,0x21,0xda,0x7b,0x8d,0xe7,0x9f,0xa4,0xbe,0x8b,0xd2,0xfd,
    0x62,0x39,0x0a,0xfd,0xbf,0x30,0xd7,0x8e,0x52,0x1f,0xfd,0x63,0xc4,0x20,0xff,0x2b,
    0xdf,0x4b,0x9c,0xff,0x53,0x8c,0x59,0x55,0x44,0x31,0xd7,0xd3,0xc4,0xac,0xb5,0x72,
    0x4d,0xde,0xa2,0x1f,0x5b,0x83,0xa4,0x83,0x35,0x79,0x9b,0xef,0x6f,0xd1,0x3f,0xfa,
    0x67,0x88,0x19,0xff,0xb6,0x5c,0x5e,0x89,0x68,0xdf,0xfc,0xd7,0x48,0x7b,0xff,0xa7,
    0x9c,0xee,0x58,0xd1,0x58,0xc2,0xd7,0x38,0xbe,0xdb,0xdc,0xbf,0xc1,0x7e,0x85,0x5b,
    0xdf,0xa7,0x23,0x36,0xc7,0xcd,0xf5,0x57,0xb1,0x7f,0xf0,0xe5,0x97,0x6f,0x35,0x5f,
    0xbf,0xce,0xf9,0x82,0x1c,0xb6,0x5e,0x10,0x8d,0x53,0x31,0xe7,0x7e,0x52,0xda,0xe7,
    0xa3,0xfd,0x02,0x31,0x8c,0xf9,0x07,0x85,0xd0,0x1d,0xc5,0xfe,0x1b,0x62,0xb1,0x2d,
    0x4e,0xd7,0x10,0x67,0x50,0x3d,0xf7,0x3b,0xf6,0x47,0x75,0x5c,0xe9,0x74,0xfd,0x0a,
    0x38,0x13,0x3a,0xa5,0xf6,0x8a,0x68,0x1b,0x39,0x70,0x31,0x22,0xb8,0xff,0x2e,0xc4,
    0xde,0x79,0xda,0xfa,0x30,0xbe,0xe3,0xfc,0xb8,0x20,0x2a,0xc7,0x73,0x0c,0x73,0xe7,
    0x08,0xf3,0x63,0x7a,0xb4,0x0a,0xbb,0x7f,0x26,0x76,0xc4,0xad,0x55,0x6d,0xb4,0x88,
    0x3c,0xf8,0x1b,0x73,0x03,0xfb,0x7a,0x0c,0xcf,0xba,0xd7,0x89,0xff,0x32,0xea,0xe0,
    0xdc,0x3a,0x4e,0x1b,0xc0,0x9f,0x88,0x3a,0x88,0xc9,0x09,0xe2,0xe0,0x74,0x92,0x76,
    0x2f,0x47,0x19,0xf0,0xbf,0x63,0xfe,0xe4,0x8d,0xf7,0x4b,0xf1,0x79,0x9e,0x3c,0x4f,
    0xd2,0x0f,0x72,0xe3,0x5f,0xcc,0x0b,0xe3,0xfd,0x0e,0xf3,0xc2,0x78,0x9f,0x25,0xf6,
    0x8e,0xe3,0xdd,0xc0,0x3d,0x7d,0x8e,0xf2,0x39,0x51,0x13,0xfb,0xf2,0xdf,0xb4,0x77,
    0x8e,0xeb,0x81,0xf9,0xdc,0x1d,0xf9,0x63,0xed,0xde,0xa5,0x3c,0x71,0xd8,0x07,0xc4,
    0xc4,0xf8,0x91,0xef,0xf9,0x54,0xa6,0x79,0xb1,0x2f,0xe8,0x3e,0x48,0xe7,0x12,0xa0,
    0xa7,0x32,0x8c,0xff,0x43,0x50,0x1b,0x90,0x15,0x8b,0xca,0x76,0x45,0xdb,0x88,0xcd,
    0x47,0x94,0x63,0x7d,0xce,0x47,0xbe,0x17,0x13,0x95,0x5b,0x8c,0x3e,0x4a,0xe3,0x96,
    0xa4,0x78,0xba,0x76,0xf1,0x79,0x6d,0xb4,0x3a,0x91,0x67,0x9f,0xf0,0x5c,0x85,0x8d,
    0x06,0xe6,0x30,0x40,0xc8,0xf6,0x46,0x1f,0xe9,0xf9,0x25,0xba,0x67,0x80,0x9b,0x4e,
    0x91,0x28,0xfe,0x02,0xe7,0x08,0x5e,0xb0,0x01,0xbc,0x36,0xf2,0xc6,0xf9,0x5c,0x26,
    0x7a,0x16,0x4d,0xa2,0x4d,0x5b,0x77,0xc4,0xb0,0xb3,0xa8,0xdc,0xe2,0x1f,0x82,0x62,
    0x9d,0x25,0x8b,0xbf,0xe5,0x44,0x21,0x68,0x4e,0x40,0x67,0x07,0x73,0xa2,0x28,0x28,
    0x8e,0x9c,0x28,0x0b,0xd9,0x7c,0x81,0x77,0x8a,0x0d,0x58,0x9a,0xcb,0x21,0xf3,0x51,
    0xec,0x7c,0x04,0xe6,0xfb,0xb3,0xf4,0x51,0x42,0x1f,0xc5,0xce,0x47,0x69,0x50,0x1c,
    0x6b,0x66,0xf6,0xca,0x82,0xae,0x0b,0xe4,0x9d,0x83,0xf2,0xb8,0x40,0x5d,0xf8,0xfa,
    0x05,0xc7,0x5e,0x27,0x2a,0x07,0xbf,0xae,0x92,0xf1,0x03,0xde,0x25,0xb6,0xae,0xcc,
    0xd1,0x2e,0xa2,0xf6,0x2f,0x71,0x7d,0x80,0x5b,0xde,0x5c,0x2f,0xd9,0x3e,0x32,0xac,
    0x9b,0x8b,0xd1,0x33,0xcc,0x81,0xee,0xa2,0xba,0x90,0x99,0xff,0x1e,0xa2,0x38,0xfc,
    0xf7,0x72,0xfe,0x81,0xf7,0x8c,0xad,0x17,0xfd,0xf7,0x74,0xfe,0x3e,0x45,0x7f,0xe2,
    0xfc,0xf5,0xa6,0x3f,0x71,0xfe,0xfa,0x88,0xea,0xf6,0x26,0x77,0xb3,0x85,0xa7,0xc5,
    0xa6,0x2f,0xfd,0x63,0x3e,0x7d,0xe8,0xd3,0xb8,0xf5,0x13,0x95,0x83,0x5b,0x85,0xe3,
    0x06,0xbc,0x3f,0x6a,0x2a,0xda,0xc3,0xfb,0x3a,0xf2,0x18,0xc8,0x39,0xd6,0x39,0x6e,
    0x37,0xbb,0xb5,0x34,0x6e,0x83,0x44,0x75,0x6f,0x26,0x37,0xb3,0x55,0xe1,0xb8,0x0d,
    0xa6,0x7f,0xf0,0x1d,0x44,0x9f,0xc6,0xed,0xd3,0xa2,0x72,0x70,0xab,0x72,0xdc,0x80,
    0x57,0xc6,0x56,0x45,0x7b,0x95,0x2e,0x6e,0xd5,0x2e,0x6e,0xc6,0xf7,0x16,0x51,0xdc,
    0xf3,0x1d,0x4a,0xbe,0x05,0xc7,0x77,0x98,0xa8,0xee,0x50,0xf2,0x35,0xfb,0x55,0x8e,
    0xef,0x67,0xc8,0x09,0x73,0x18,0x46,0x1e,0xe0,0x37,0xc2,0xf1,0x83,0xce,0xf0,0xd8,
    0x46,0x70,0xfc,0xf0,0x5c,0x5e,0x01,0xdf,0x10,0x7d,0x62,0x1f,0x8c,0x96,0x6c,0x3f,
    0xd5,0xc6,0xdd,0x88,0x7b,0xad,0x36,0xb7,0x57,0x71,0xef,0xd5,0x70,0xbf,0xa6,0x75,
    0x1e,0x75,0xe0,0x77,0x58,0x68,0x7f,0x2f,0x7c,0x92,0x7b,0x03,0xcf,0x2b,0xb9,0x1b,
    0xd4,0x0f,0x7e,0xdf,0x25,0x76,0x43,0x50,0x1c,0xb6,0x0c,0xeb,0x1e,0x14,0x1f,0x95,
    0x28,0x17,0x9c,0x1b,0x3d,0x42,0x7b,0x2e,0x93,0xa9,0x67,0x67,0x47,0xcf,0xa0,0x3a,
    0x5b,0x68,0xe3,0x46,0x67,0xc3,0xe2,0x5a,0x1e,0x14,0xaf,0xe1,0xbd,0x31,0xd4,0x9d,
    0x11,0x90,0xf5,0x8e,0xad,0x1f,0x79,0xe3,0x69,0xe3,0x2a,0x38,0xae,0x8e,0xe3,0x86,
    0xb8,0x71,0x90,0x0d,0x88,0xed,0x26,0x8e,0xbb,0xc9,0x8d,0x1b,0xc4,0x71,0xf3,0x38,
    0xee,0x16,0x37,0x0e,0xb2,0xc1,0xb1,0x55,0x71,0x5c,0x95,0x8b,0x53,0x75,0xd0,0xf9,
    0x14,0x78,0x37,0x0c,0xa3,0xce,0x60,0xa7,0x53,0x49,0x9d,0x90,0xd3,0x81,0x8f,0x8f,
    0x63,0x80,0xf0,0x3e,0xc0,0xe9,0x0f,0xa4,0xbe,0xe4,0xf4,0x87,0x38,0xfd,0xde,0x4e,
    0xbf,0x2f,0xf5,0x93,0x9c,0xfe,0x50,0xa7,0x3f,0x2c,0x3d,0xf7,0xae,0x49,0xf5,0x8f,
    0x05,0xe5,0x8d,0x79,0x54,0x72,0x6e,0x03,0x19,0x9b,0xbe,0x8c,0xad,0xd9,0x9e,0xe2,
    0x72,0xde,0xb0,0x3b,0xdd,0x99,0xb2,0x81,0xd8,0x34,0x51,0x5d,0xc8,0x76,0x33,0xa6,
    0xf7,0x88,0xfa,0x9a,0xc6,0xbc,0x9b,0xe1,0xf2,0x1d,0xb2,0x7b,0x63,0x9b,0xc1,0x7c,
    0xbf,0xd7,0xed,0xc7,0x2f,0x89,0xe6,0x9e,0xdf,0x8f,0x5f,0x16,0xc5,0x47,0xf1,0x5e,
    0x81,0xfd,0x99,0xa2,0xf8,0x34,0xee,0x15,0xb3,0x35,0xc3,0xed,0xbd,0x3a,0x51,0x1e,
    0x98,0xff,0x4c,0xfa,0x04,0x97,0xd9,0x8e,0x0b,0x74,0x66,0xc5,0x36,0x9b,0xe3,0x67,
    0x39,0x2e,0xf7,0x39,0x2e,0x76,0x57,0xce,0x15,0xdd,0x07,0x90,0xbd,0x48,0x6c,0x9e,
    0x28,0x5e,0xe7,0x72,0x78,0xbe,0x28,0x5e,0xc3,0x75,0x31,0xfb,0xb3,0x1d,0xbf,0x05,
    0xa2,0x1c,0xc1,0x79,0x3e,0x79,0x98,0xef,0x85,0xce,0xb7,0xc5,0xf9,0x01,0xce,0x17,
    0xb2,0x67,0xe9,0x67,0x91,0x28,0x7e,0xcc,0xdd,0x5f,0x8b,0x45,0x6d,0xff,0x9c,0x3a,
    0x4b,0x44,0xf5,0x16,0x73,0xfe,0xf5,0x6e,0xfe,0x90,0x2d,0x45,0x9d,0x49,0x7e,0x4b,
    0x59,0x03,0xa0,0x3e,0x5e,0x96,0x3b,0x57,0x84,0xb5,0x23,0x6a,0x9e,0xe5,0x94,0x4f,
    0x8f,0xbb,0x1a,0xff,0x53,0x6a,0x82,0xd6,0x41,0xfb,0x42,0x56,0x03,0x04,0xe6,0x0d,
    0x6a,0xe1,0xcf,0x06,0x1d,0x83,0x5c,0xfa,0x0e,0xb1,0x91,0x41,0xff,0x2f,0x40,0xf6,
    0x58,0xc4,0x60,0xe7,0x73,0x41,0x6d,0x8d,0x0c,0x99,0xed,0xcf,0x73,0xec,0x72,0x69,
    0x6f,0xdb,0xc6,0x8c,0x0e,0xaa,0x03,0x3b,0xeb,0x89,0x8d,0x09,0x6a,0x6b,0x74,0xc8,
    0x38,0xdc,0x4a,0x7e,0xe0,0xb0,0x89,0x58,0x6d,0x50,0x7c,0xa4,0xd3,0xbb,0x2d,0xe8,
    0xf8,0xc4,0xf1,0x1f,0x4f,0x4c,0x1c,0x36,0x81,0x18,0x54,0xef,0x62,0x2d,0x78,0x7b,
    0xd0,0xf1,0xd0,0x87,0xbc,0x96,0x35,0x88,0xc5,0xb7,0x5e,0xb2,0xba,0xf1,0x12,0xf9,
    0x20,0x27,0x30,0x6e,0x69,0xee,0xdc,0xd7,0x3a,0xb2,0x2c,0xd5,0xbd,0x48,0x5d,0xd4,
    0x1c,0x35,0xbc,0x2f,0x30,0xbe,0x5e,0xda,0xd7,0xa5,0x17,0x99,0x6f,0x2b,0xe9,0x6f,
    0xa5,0xf3,0xb7,0x97,0x36,0xa0,0x73,0x39,0x3e,0xd7,0x48,0x56,0xa7,0xee,0x09,0x5a,
    0xff,0x42,0xb6,0x59,0x54,0x66,0x75,0xea,0x5a,0x51,0xb9,0xd5,0xa9,0xab,0x29,0xb7,
    0x1c,0x82,0x7c,0x55,0x6c,0xab,0xe9,0x13,0xef,0x56,0xa7,0xae,0x97,0xac,0x4e,0xdd,
    0xe3,0xea,0xd4,0x0d,0xa2,0x32,0xab,0x53,0x37,0x32,0xbf,0x36,0xb8,0x3a,0x75,0x93,
    0x28,0x6e,0x7b,0x6f,0x33,0x79,0x6c,0x72,0x75,0xea,0x23,0xa2,0xdf,0x22,0x26,0xd1,
    0xa6,0xaf,0x53,0xb7,0x8a,0xca,0xad,0x86,0x9c,0x14,0x14,0xdb,0xda,0x41,0x9d,0x3a,
    0x99,0x35,0xe4,0x24,0x57,0x43,0x7e,0x21,0x28,0x8e,0x3d,0x33,0xdd,0xdd,0x09,0xc0,
    0xa7,0x20,0x3f,0x79,0xd6,0x4e,0x71,0x75,0xea,0x54,0xe7,0x23,0x5f,0xa7,0xde,0x49,
    0x1f,0x53,0x9d,0x8f,0x69,0x41,0x71,0xac,0x99,0xd9,0x9b,0xee,0xea,0xd4,0xbb,0x82,
    0xf2,0x40,0x4c,0xa7,0xd1,0xaf,0xed,0xf3,0xef,0x8b,0xca,0xc1,0xaf,0xd1,0xad,0x07,
    0xf0,0xc7,0x63,0x6b,0xe4,0x7a,0x3c,0xce,0x1c,0x59,0xc3,0x7e,0xa3,0xab,0x27,0x5a,
    0x24,0x9b,0xb7,0xc5,0xf4,0x89,0x5c,0x4c,0xc7,0x4a,0x16,0xd3,0x1d,0xa2,0x72,0x9b,
    0xef,0x4e,0x51,0x6c,0x87,0x8b,0xa9,0x9d,0x61,0x3f,0x23,0x1e,0x1c,0xf6,0x94,0xd3,
    0x35,0xec,0x2b,0x41,0x79,0xf8,0x7a,0x63,0x66,0x50,0xfc,0x29,0x57,0x6f,0xcc,0x0a,
    0x8a,0x8f,0x72,0x7a,0x5f,0x0d,0x8a,0xfb,0x1a,0x64,0x4e,0x68,0xcf,0x7f,0x32,0xf5,
    0x6c,0x0e,0x5f,0x0b,0xaa,0x63,0x35,0xc8,0x5c,0x67,0xe3,0xca,0xf9,0x1d,0x14,0xb7,
    0x1a,0x64,0x95,0x5b,0x7f,0xc8,0x16,0xc4,0xb6,0x90,0xeb,0xb5,0xd0,0xd5,0x12,0x5f,
    0xe7,0x38,0xab,0x41,0x56,0xba,0x71,0x90,0x2d,0x8a,0x6d,0x09,0xc7,0x2d,0x71,0xe3,
    0xea,0x39,0xce,0x6a,0x90,0x15,0x6e,0x1c,0x64,0x0f,0xe2,0x0c,0xe4,0xb8,0xe5,0xee,
    0x8e,0xfe,0x66,0xd0,0xf9,0x58,0x0d,0xb2,0x82,0x3a,0x0f,0x3a,0x9d,0x65,0xd4,0x09,
    0x39,0x9d,0x15,0x21,0xdb,0xff,0xaf,0x06,0xb5,0x05,0xdb,0xcb,0xe8,0x2f,0x3d,0x47,
    0xa8,0xbb,0xc8,0xd9,0x5b,0x4c,0x7b,0x56,0xa3,0x98,0xce,0x4a,0x67,0xef,0x95,0xa0,
    0x36,0xe1,0x63,0x31,0xe7,0x0d,0xdd,0x55,0xd4,0x5d,0xe0,0xec,0xdd,0x4f,0x7b,0x56,
    0xc3,0x98,0xce,0x2a,0x67,0xef,0x60,0x50,0x9b,0xf0,0x71,0x3f,0xe3,0x6f,0xeb,0xb7,
    0xc6,0xe5,0xc5,0x46,0x62,0x0d,0x41,0x71,0x7c,0x3f,0xd9,0x43,0xec,0xdb,0x41,0xed,
    0x40,0x66,0x77,0xf7,0xba,0xa0,0xf8,0x43,0x49,0x76,0xa7,0x3e,0x23,0x8a,0x3f,0xcd,
    0xfb,0x72,0xb7,0xdb,0x5b,0x90,0xed,0x42,0x9d,0xc3,0xbd,0x84,0xf7,0x2d,0xdc,0x4b,
    0x1b,0x99,0xc7,0x3b,0xb9,0x5f,0xf0,0xad,0x71,0x53,0xd0,0xef,0x8c,0xf6,0x3d,0x62,
    0x73,0x50,0xbd,0x06,0x7e,0xa3,0x7a,0x38,0xa8,0xaf,0xbb,0x79,0x0e,0x6e,0x09,0xaa,
    0x63,0xfb,0x03,0xd8,0x23,0xc4,0x24,0xbd,0x67,0x8a,0xd3,0x6f,0x93,0x5b,0x83,0xea,
    0x42,0xf6,0xb0,0xb3,0xf7,0x68,0xd0,0x7d,0x37,0x87,0x67,0xfe,0xf7,0x82,0x72,0xd8,
    0xca,0xf5,0x7f,0xd4,0xdd,0x73,0x8f,0x05,0x95,0x27,0x49,0x76,0xe7,0xff,0x36,0xb7,
    0xf7,0xfd,0x9d,0xff,0x1c,0xe5,0x76,0xd7,0x3d,0x2f,0x6a,0xc3,0xb7,0x6b,0xe3,0x0e,
    0x83,0xac,0x95,0xe7,0x7e,0x35,0xbf,0x9b,0x61,0xec,0xf3,0xae,0x5e,0x68,0x0c,0x7a,
    0x1f,0xed,0xbd,0x4a,0xbd,0xd0,0x14,0xd4,0x86,0xaf,0x17,0x9a,0x59,0x2f,0x34,0xb9,
    0x7a,0x61,0x5b,0x50,0x5b,0xcd,0xae,0x5e,0xd8,0xce,0xb1,0xad,0x57,0xa9,0x17,0x5a,
    0x82,0xea,0x34,0xb9,0x7a,0xe1,0x87,0x41,0x6d,0xb5,0xb8,0xf8,0xfc,0x88,0xfc,0x7c,
    0xbd,0xf0,0x64,0x50,0xbc,0xd9,0xe9,0xfd,0x38,0xe8,0x78,0x5f,0x2f,0xec,0x24,0xe6,
    0xeb,0x85,0x9f,0x10,0xf3,0xf5,0xc2,0x4f,0x83,0x8e,0x87,0x3e,0xe4,0x4f,0x72,0x9f,
    0x58,0x7e,0xed,0x76,0xf7,0xf7,0x87,0xe4,0x83,0x7d,0x81,0x71,0xbb,0x72,0xe7,0xfa,
    0x1a,0xa7,0x7b,0x99,0xba,0x38,0xfb,0x31,0x6e,0xb7,0xb4,0xaf,0x0b,0x56,0x4b,0xc6,
    0x6b,0x8f,0x64,0xf3,0xfc,0x0d,0xf7,0xc0,0x1f,0x45,0xf1,0x56,0x9e,0x47,0xfb,0xdc,
    0x1e,0x80,0x6c,0x6f,0x6c,0xfb,0x68,0x6b,0xaf,0xe8,0x77,0x42,0x7c,0x07,0x7d,0x51,
    0xf4,0x3b,0xa1,0xe5,0x0d,0xf6,0xd8,0x9f,0x88,0x5b,0x3d,0xf1,0x92,0x28,0x66,0x67,
    0xeb,0x01,0x67,0x1b,0xb2,0xfd,0xb1,0x1d,0xa0,0xed,0xfd,0xee,0xae,0x39,0xc8,0xff,
    0xea,0xf8,0xfe,0x69,0xdf,0x56,0x6b,0xa3,0x07,0xf8,0x7d,0x45,0xb2,0xef,0x93,0x75,
    0xee,0xbf,0xef,0xab,0x94,0x59,0x0d,0x7d,0x48,0x14,0xf3,0xff,0xed,0x0f,0xbb,0x6f,
    0x00,0xa6,0x77,0x44,0x54,0x17,0xb2,0x2f,0x46,0x04,0xfe,0x7f,0x1f,0x14,0x3f,0x28,
    0xd9,0x59,0x65,0x3c,0x0f,0x30,0xf6,0xd0,0x7b,0x89,0xf7,0x3c,0xe2,0x82,0x31,0xfb,
    0x5d,0xde,0x1f,0x93,0x8e,0xf3,0xfe,0x39,0xc6,0xe6,0x75,0xc6,0xfd,0x14,0x63,0x73,
    0xc2,0xc5,0x06,0xb2,0xe3,0xb1,0x9d,0xa0,0xcf,0xe3,0x8c,0x31,0xbe,0x21,0xff,0x93,
    0xdf,0x8f,0xed,0x9c,0x39,0x2d,0xca,0x63,0x6e,0xb4,0x8b,0x7c,0x78,0x93,0x3a,0xa7,
    0x1d,0x97,0xb7,0x45,0xf1,0x37,0xaf,0xb2,0x4f,0xda,0x44,0x75,0xc0,0xc7,0xf6,0xc9,
    0x59,0xd1,0x39,0xb4,0x31,0x9f,0x8c,0xcb,0x09,0xce,0x1f,0x3a,0x07,0x82,0xea,0x20,
    0x26,0x67,0xc9,0xd9,0x78,0x9e,0xcb,0xf1,0xfc,0x0f,0x79,0x5a,0x2e,0xfe,0x57,0x74,
    0xbc,0xdf,0x4b,0xef,0x12,0xf3,0x7b,0xe9,0x3d,0x62,0x7e,0x2f,0xbd,0x2f,0x3a,0x1e,
    0xfa,0xef,0x31,0x77,0xe7,0x45,0x3f,0xf0,0x09,0x3f,0xef,0x93,0xb3,0xe5,0xed,0x3e,
    0x69,0xff,0xcd,0x19,0xcf,0xff,0x45,0x2f,0x23,0x63,0xfb,0x3f,0x37,0x2b,0xa4,0x9f,
    0x8c,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontMip)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     return texelFetch(font, ivec3(coordInGlyph, textChar), int(fontMip)). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontMip = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar < 95)
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontMip);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
