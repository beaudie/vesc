// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x6c,0x97,0xd5,
    0x15,0x7e,0xcf,0xfd,0xf5,0x03,0x90,0x29,0x7e,0xa0,0x73,0xc3,0x4e,0x0b,0x44,0xe5,
    0x2b,0x6c,0x22,0x61,0x69,0xa0,0x1f,0x94,0x52,0xc1,0x4d,0x19,0x1a,0xcd,0xfc,0x03,
    0x2a,0x88,0x71,0x64,0x24,0x8b,0x8b,0x49,0xdb,0xdf,0x08,0x73,0xea,0xc2,0xa2,0xfb,
    0xc3,0xc9,0x1f,0xfb,0xa0,0xa2,0x0c,0x64,0x82,0xa6,0x0a,0xb5,0x0c,0x13,0xb5,0x08,
    0x25,0x71,0x22,0xc3,0x30,0xe6,0xd8,0x62,0xeb,0x88,0x48,0xd5,0xba,0x49,0x82,0x43,
    0x6c,0xc7,0xce,0xf3,0x9e,0xe7,0xfa,0x9e,0xdf,0xbb,0xd2,0xe4,0xe6,0x7d,0xef,0x73,
    0xce,0x7d,0xce,0x73,0xcf,0x3d,0xef,0xbd,0xb7,0xbf,0x42,0x98,0x58,0x99,0x24,0x92,
    0x8c,0x49,0x46,0x25,0xf7,0x84,0x24,0xfd,0xbb,0x38,0x09,0x8a,0x24,0xc9,0x05,0x49,
    0x45,0xfa,0x5c,0x78,0xf3,0xd2,0x9b,0x67,0xdc,0xff,0xe3,0x95,0x33,0x66,0xdd,0x38,
    0x13,0xf6,0x0b,0x93,0x42,0xea,0x07,0xdb,0x45,0x49,0x65,0x52,0xae,0xcf,0x32,0x6d,
    0x3f,0x6c,0xb9,0x6f,0x0d,0xf0,0x27,0xb5,0x75,0x6b,0x1b,0xa7,0xe3,0xcb,0x52,0xbe,
    0x44,0xd9,0xcd,0x27,0xe5,0xd3,0xb7,0x5a,0x7d,0x56,0xa4,0x3e,0x49,0xd2,0xac,0x0c,
    0x75,0x16,0x3a,0x99,0xc8,0x67,0xc4,0x84,0x98,0xf7,0x0b,0xc4,0xae,0x76,0x58,0x81,
    0xd8,0x4c,0xf2,0x37,0x90,0x7f,0xa6,0x98,0xcf,0xfc,0x1c,0xff,0x42,0x1d,0x31,0x9f,
    0x5c,0xf0,0x5f,0xa0,0xcf,0xea,0x2f,0x6d,0xd6,0xbf,0xc6,0xe9,0x5d,0x95,0xb3,0xaf,
    0xa2,0xbd,0x8c,0xfd,0xd6,0xdc,0x7c,0xda,0x46,0x98,0x4f,0xdb,0x08,0xf3,0x69,0x1b,
    0x61,0x3e,0x6d,0x23,0xcc,0xa7,0x3d,0x37,0x9f,0xe2,0x08,0xf3,0x29,0xba,0xf9,0xac,
    0xcd,0xe9,0x5d,0x4b,0xbd,0xd1,0xfe,0x64,0xba,0xbe,0x49,0x32,0x81,0x31,0x37,0x8f,
    0xc0,0xb7,0xd9,0xf9,0x77,0xe5,0xf8,0xba,0xc8,0x57,0x60,0xbf,0x9b,0x7c,0x5f,0x63,
    0xff,0x69,0x29,0xf5,0x47,0xff,0x1a,0xd7,0x7f,0x49,0xcc,0xff,0x4a,0x6d,0x97,0x6a,
    0x94,0x90,0xf2,0x15,0x52,0x3e,0xbc,0x8f,0x57,0x9f,0x0a,0xe6,0x04,0x7f,0x57,0x68,
    0xbf,0x92,0x39,0x08,0xec,0x8f,0x62,0x1f,0x6b,0x70,0x99,0xa2,0xa3,0xf5,0x79,0xb9,
    0x32,0x8c,0xe7,0x38,0xf8,0x54,0xa7,0x5c,0xe6,0x83,0xfe,0xf5,0xfa,0x1c,0x4d,0x8e,
    0xa9,0x8c,0x31,0x9b,0x31,0x62,0xbf,0x86,0xfe,0xb1,0x3f,0x8f,0xeb,0x35,0x81,0x75,
    0x3b,0x8a,0x58,0x95,0x5a,0xeb,0xd8,0xaf,0xe6,0xb3,0xd6,0x8d,0xab,0xa7,0x8e,0x09,
    0xac,0xc7,0x3a,0x62,0x55,0xac,0xbd,0x86,0xd4,0x5e,0x96,0x34,0x52,0xcf,0xfc,0x34,
    0xb6,0xf5,0x17,0xb8,0x3c,0x34,0x91,0x47,0xc8,0xdd,0x94,0xe6,0x30,0xd3,0xdc,0x94,
    0xae,0xa1,0xad,0x05,0xf8,0xbe,0xc3,0xb1,0x15,0x4e,0xcb,0x52,0xea,0x8b,0xfd,0x3b,
    0xb5,0x9d,0x4b,0xf3,0x3f,0x3a,0x59,0xc9,0x1c,0x09,0x39,0xf3,0x4f,0x70,0xde,0xc3,
    0xf7,0x95,0xd4,0x88,0xfe,0x2a,0xb7,0x36,0xab,0xf5,0xd9,0xe4,0xd6,0x66,0x0d,0xfb,
    0x05,0xce,0xbf,0x35,0x97,0xb7,0xb6,0x5c,0xde,0x5a,0xe9,0x87,0x3a,0x6f,0x73,0x79,
    0x42,0x4d,0xb7,0x53,0xc3,0x4f,0xc8,0x5f,0xa4,0x06,0xf4,0xd7,0xba,0x98,0x3f,0xe7,
    0x3c,0x0a,0x9c,0x27,0xde,0xd7,0xa7,0x0a,0xd7,0xd5,0xc2,0xbe,0x91,0x39,0x89,0x79,
    0xea,0xe0,0x1c,0x37,0x92,0xaf,0x83,0x7b,0x97,0x30,0x36,0xea,0xbf,0x92,0xbe,0xbf,
    0x67,0xdd,0x6c,0xa6,0x2f,0xfa,0x5b,0x88,0xc1,0xbe,0x95,0xef,0x95,0x2e,0x76,0x27,
    0xf3,0x33,0x4d,0x51,0xcc,0xf3,0x05,0x62,0xb1,0xad,0x67,0xfe,0x77,0x52,0x57,0xcc,
    0x77,0x32,0x42,0xfe,0x77,0xf1,0x7d,0x27,0xe3,0xa3,0xdf,0x45,0x2c,0x6a,0xef,0x76,
    0x35,0x02,0xbe,0x9e,0x5c,0xcd,0x1c,0x62,0x1f,0x7c,0xef,0x30,0x6f,0xa3,0x9c,0xbe,
    0x4a,0x29,0xd5,0xd7,0xe9,0xc6,0x8e,0x13,0xf3,0xc7,0xd8,0x06,0xbe,0x57,0xbb,0x58,
    0xad,0x8a,0x2d,0x77,0x73,0x7f,0x58,0xfb,0x07,0xdf,0x7c,0x73,0x5e,0xe4,0x7e,0x24,
    0xc7,0x0d,0x3b,0xe6,0xbe,0x49,0x4a,0x6b,0x2f,0xfe,0x05,0xa7,0xf5,0x29,0x1a,0xe1,
    0x5b,0xc3,0xfe,0xd3,0x12,0x73,0x5b,0x91,0xae,0x1f,0xf6,0x93,0xa5,0xfc,0x76,0x7b,
    0xd2,0x6f,0xba,0x3c,0xe5,0x28,0x23,0x1f,0xd6,0xfc,0x8c,0x22,0x38,0xab,0xfe,0xa3,
    0xbd,0x6e,0x8e,0xff,0x42,0xdf,0xf1,0xfd,0xef,0x16,0xb3,0xe3,0x39,0x97,0xb5,0xb2,
    0x89,0xf5,0x70,0x8b,0xce,0x01,0xeb,0xfa,0x14,0xb1,0x4d,0x6e,0x7d,0xea,0x95,0x11,
    0x6b,0xff,0x0c,0xeb,0x01,0xdf,0xe5,0x5c,0xee,0x55,0xdb,0x88,0x3f,0xaf,0x3e,0xd8,
    0x77,0xfe,0x40,0x0e,0xe0,0xbf,0x51,0x1f,0xd4,0xcb,0xb3,0xc4,0xa1,0x69,0x07,0x79,
    0xcf,0xaa,0x0d,0xf8,0x76,0x6d,0x3b,0xa8,0x1b,0xef,0x9f,0xeb,0xb3,0x9b,0x3a,0x77,
    0x30,0x0e,0xea,0xe1,0x25,0xd6,0x42,0xd4,0xbd,0x9b,0xb5,0x10,0x75,0xff,0x91,0xd8,
    0x6e,0xa7,0xbb,0xc8,0x6f,0x76,0x0f,0xed,0xcb,0xd4,0x13,0xb5,0xf0,0x32,0xf9,0xf6,
    0x7c,0xb9,0xf7,0x27,0xc9,0x12,0xd5,0x8f,0x35,0x7e,0x95,0xf6,0xc4,0x61,0xaf,0x13,
    0x13,0xea,0xdb,0x47,0xbd,0x78,0x9e,0xe6,0xda,0x2f,0x08,0x56,0xfb,0xd0,0xdc,0xa2,
    0xef,0x07,0x68,0x4b,0xf7,0xc8,0x60,0x1c,0xb0,0x1d,0x49,0xcc,0xb6,0x5d,0xb9,0x91,
    0x9b,0x37,0x68,0xc7,0xfa,0x7c,0xa6,0x7a,0x7b,0x69,0x8f,0x39,0x82,0x7d,0xbf,0xb6,
    0x5e,0xc6,0xc4,0xfb,0x58,0x65,0x45,0xbd,0x1e,0xa4,0xa6,0x9b,0xc8,0x51,0x64,0x9d,
    0xbe,0x45,0xdb,0x3e,0x8d,0x01,0xbf,0xc3,0xfc,0x2e,0xde,0x4a,0x32,0x9f,0xb7,0x89,
    0xf7,0x72,0x8e,0x47,0xc8,0xf1,0x76,0xba,0xde,0x95,0xe9,0xb7,0xf3,0x37,0xee,0x3d,
    0x0b,0x39,0x36,0xae,0x3b,0x72,0x78,0x8c,0xf6,0x98,0xff,0x57,0xc4,0xb0,0x63,0x2e,
    0xff,0xb1,0x26,0x5e,0x15,0xab,0x09,0xf8,0xfc,0x96,0x35,0xf1,0x9a,0x18,0x8e,0x9a,
    0xd8,0x2f,0xd9,0x7c,0x81,0xf7,0x68,0xdb,0xcf,0x1a,0xc0,0x7b,0x8c,0xb1,0xd7,0xc5,
    0x08,0xac,0xf7,0x4e,0xc6,0x78,0x9d,0x31,0xf6,0xba,0x18,0xfb,0xc4,0x70,0xac,0x59,
    0xe4,0xc3,0x13,0xeb,0x02,0x7b,0xaf,0x98,0x8e,0xfd,0xf4,0x45,0xac,0x6d,0x1c,0xfb,
    0x2e,0xed,0xd0,0xd7,0xef,0xd6,0x03,0x78,0x9f,0xb6,0x7e,0xae,0x47,0x1f,0x6b,0xe2,
    0x00,0xfb,0xfd,0xae,0x6e,0x8e,0xbb,0xef,0x28,0x62,0xef,0xbb,0x1c,0x3d,0xcb,0x1a,
    0x38,0x41,0xdf,0xf7,0x93,0x2c,0xfe,0x07,0xc4,0x11,0x7f,0xc0,0xc5,0x07,0x7e,0x52,
    0xdb,0x00,0xe3,0x9d,0x74,0xdc,0x1f,0x31,0x9e,0x38,0x6c,0x90,0xf1,0xc4,0xc5,0xfb,
    0x84,0xbe,0x83,0xd4,0x1e,0xb9,0x06,0x92,0x2c,0x37,0xff,0x62,0xfc,0x7e,0xfa,0x9f,
    0x74,0xda,0xfe,0x4d,0x3b,0xb4,0x9d,0x72,0xda,0x80,0x7f,0xaa,0xed,0x14,0xf9,0xf0,
    0xbe,0x8e,0x3a,0x4e,0x73,0x8e,0x3d,0x4e,0xdb,0x19,0xb7,0x96,0x51,0xdb,0xe7,0xf4,
    0x3d,0x43,0x6d,0x91,0xeb,0x94,0xd3,0x76,0x96,0xf1,0x07,0xe8,0xff,0xa9,0xd3,0xf6,
    0x05,0xed,0xd0,0x36,0xec,0xb4,0x01,0x1f,0xd2,0x36,0x4c,0xbe,0x21,0xa7,0xe3,0x9c,
    0xcb,0x5b,0xd4,0x8b,0xce,0xb9,0x9c,0xde,0xc0,0xfa,0x2b,0x38,0xbd,0x05,0x31,0xdf,
    0xc0,0x3a,0x8b,0xfc,0xc3,0x4e,0x6f,0x99,0x98,0xa6,0x53,0xf4,0x1f,0xa2,0xbe,0x0a,
    0x57,0xf7,0xf0,0x29,0xd7,0x56,0xc1,0x3a,0x2d,0x97,0xd2,0xba,0x02,0xfe,0xa0,0xc6,
    0xc4,0x77,0xf0,0x15,0xf7,0x3d,0xd5,0xeb,0xd7,0x88,0xbb,0xd0,0xc5,0x52,0xfa,0xad,
    0xe2,0x2c,0x9b,0xcd,0xef,0x15,0xda,0x2f,0x11,0xf3,0x89,0x73,0x79,0x43,0x8c,0x07,
    0x7f,0x8f,0x10,0xfb,0x93,0x18,0x0e,0xdf,0x88,0x1d,0x14,0xc3,0x6b,0xd2,0xb3,0xdc,
    0xb0,0x43,0x0e,0xab,0xd7,0x19,0x22,0xfe,0x9f,0x73,0xf1,0x9b,0x39,0xf6,0x90,0x64,
    0x1a,0x0e,0x8b,0xf9,0x45,0x0d,0x5f,0x77,0xf9,0x8c,0xd8,0x55,0x92,0xd5,0xeb,0x83,
    0xc4,0xaa,0xc4,0x7c,0x61,0xdb,0xc1,0xbc,0x4f,0x14,0xe3,0xab,0xe2,0x37,0x3a,0xd9,
    0xe5,0x12,0xb6,0x49,0xda,0x26,0x33,0x97,0x93,0x5c,0xcc,0x6b,0x39,0x6f,0xbf,0xd6,
    0xd7,0x89,0xe1,0x35,0xdc,0xb3,0xc0,0x3f,0x45,0x0c,0xaf,0xe2,0x3a,0x44,0xae,0xc9,
    0x6e,0xff,0x98,0x2a,0xa6,0x03,0x6b,0x33,0x85,0x31,0xa1,0x65,0xba,0xd3,0x02,0x9f,
    0x69,0xda,0xa6,0x73,0xfc,0x34,0xa7,0xe5,0x9b,0x4e,0x4b,0xdc,0x87,0xbf,0xc5,0x35,
    0x80,0xed,0x00,0xb1,0x1b,0xc4,0xf0,0x1e,0x57,0x77,0xb3,0xc4,0xf0,0xd9,0xfc,0x4e,
    0x22,0xff,0x74,0xa7,0xef,0x46,0x31,0x8d,0xd0,0x3c,0x8b,0x3a,0x62,0xec,0x39,0x2e,
    0x76,0xcc,0xf3,0xb7,0x39,0xdf,0x39,0x62,0xfb,0x2a,0x38,0x6a,0xc4,0xf0,0xc3,0x6e,
    0x6f,0x9c,0x2b,0xc6,0xfd,0x0c,0x7d,0xe6,0x89,0xf9,0xcd,0xe5,0xfc,0xeb,0xdc,0xfc,
    0x61,0xab,0xd5,0x56,0x47,0x7d,0xb5,0x62,0xe7,0x0b,0xee,0x57,0xf3,0x73,0x35,0x73,
    0x88,0xf5,0x8a,0xf3,0xb4,0x91,0xf6,0x5b,0xb4,0xbe,0x71,0xe7,0x3d,0x22,0x76,0xc6,
    0x2e,0x08,0xd9,0xf9,0x12,0x58,0x37,0xb8,0x5b,0xfd,0x45,0x6c,0x0c,0x6a,0xe9,0x67,
    0xc4,0x8e,0x8a,0xdd,0x3f,0x61,0xfb,0xa5,0x62,0xe0,0xf9,0xab,0x18,0xd7,0x51,0xc7,
    0xfd,0x0e,0xc7,0x36,0x4a,0x29,0x77,0x1c,0x73,0x4c,0xcc,0x07,0x3c,0x3f,0x25,0xf6,
    0x77,0x31,0xae,0x63,0x92,0x69,0xf8,0x07,0x35,0x42,0xc3,0xc3,0xc4,0xfa,0xc4,0xf0,
    0xa3,0xce,0xaf,0x5f,0x6c,0x7c,0xe2,0xf4,0xbf,0x47,0x4c,0x1c,0xf6,0x4f,0x62,0xd0,
    0x72,0x2b,0xef,0x19,0xc7,0xc5,0xc6,0xc3,0x1f,0xf6,0x3e,0xd6,0x67,0xcc,0x6f,0x9d,
    0x64,0x77,0x92,0xbb,0x99,0x2f,0xd4,0xc4,0x71,0xae,0x83,0xdf,0x53,0xec,0x8e,0x32,
    0x3a,0xf5,0x6d,0xa1,0x6f,0x1f,0xef,0xc8,0xd8,0x7f,0x30,0xbe,0x4e,0x4a,0xef,0x3c,
    0xbd,0xac,0xb7,0x66,0xc6,0x6b,0x76,0xf1,0x1a,0xc9,0x01,0x9f,0x15,0xfa,0x5c,0x2c,
    0xd9,0x1d,0xa8,0x21,0xd8,0xdd,0x0a,0xb6,0x3b,0xc4,0x6c,0xf1,0x0e,0xf4,0x5d,0x31,
    0x7b,0xbc,0x03,0x2d,0xa2,0x3d,0xd6,0x10,0xec,0x37,0x69,0x5b,0xc4,0x98,0x78,0x8f,
    0x77,0xa0,0x25,0x92,0xdd,0x81,0x1a,0xdc,0x1d,0xe8,0x7b,0x62,0xb6,0x78,0x07,0xba,
    0x4d,0xac,0xbe,0x80,0x47,0x9f,0xdb,0xc5,0xf0,0xf8,0xed,0xdd,0x41,0x1d,0xb7,0x4b,
    0x76,0x07,0xfa,0xbe,0xd8,0xff,0xa9,0x0b,0x39,0xd6,0xdf,0x81,0xee,0x12,0xb3,0xc7,
    0xfb,0xc9,0x09,0x31,0xec,0x2e,0xf9,0xff,0x3b,0xd0,0x07,0xdc,0xb3,0x4f,0xb8,0xfb,
    0xc9,0x49,0x31,0x1c,0xdf,0xcc,0xa0,0x9b,0x2f,0xf0,0x01,0x6d,0x83,0x9c,0xef,0x80,
    0x8b,0xf1,0xa1,0x8b,0x91,0xbf,0x03,0x7d,0xc4,0x18,0x1f,0xba,0x18,0x1f,0x8b,0xe1,
    0x58,0xb3,0xc8,0x37,0xe8,0xf6,0x88,0x4f,0xc4,0x74,0x20,0xa7,0x1f,0x33,0x6e,0xfc,
    0xce,0x97,0x89,0xd9,0xa1,0xaf,0xc5,0xe9,0x03,0xbe,0x5c,0x5b,0x0b,0xf9,0x96,0x93,
    0x7f,0x31,0xfb,0x2d,0xee,0xac,0xba,0xd7,0xcd,0x3b,0xe6,0xf4,0x07,0xb9,0x9c,0x8e,
    0x93,0x2c,0xa7,0xab,0xc5,0xec,0x71,0xbe,0x6b,0xc4,0xb0,0xd5,0x2e,0xa7,0x71,0x0f,
    0xfb,0x11,0xf1,0xe0,0xb0,0x07,0x9c,0x6f,0xc4,0x4e,0x8b,0xe9,0xf0,0x67,0xdd,0x67,
    0x62,0xf8,0x03,0xee,0xac,0x3b,0x23,0x86,0xd7,0x38,0xbf,0xb3,0x62,0xb8,0x3f,0xff,
    0x86,0x1c,0x16,0xcf,0xbf,0xe1,0xdc,0x9c,0x9a,0x39,0x76,0xc8,0x9d,0x7f,0xff,0x15,
    0xf3,0x8b,0x3c,0x10,0x1e,0xe3,0x3d,0x44,0x4c,0x82,0xe1,0xf8,0x3f,0x6f,0x2f,0xb1,
    0xb2,0x60,0x63,0x25,0x64,0x67,0x42,0x79,0x30,0xfc,0xce,0x24,0xdb,0xab,0xdb,0xc4,
    0xf0,0x56,0xae,0x59,0xd1,0xad,0x19,0x6c,0xed,0xa8,0x7d,0xae,0x51,0x3b,0x75,0x20,
    0xc7,0x63,0x82,0xe5,0x67,0x8d,0xd3,0x76,0x41,0x30,0xae,0x7a,0x97,0x8b,0xb1,0x0e,
    0xbb,0x35,0xde,0x45,0x82,0xf9,0xc2,0xf6,0x10,0xb1,0x0b,0x83,0x71,0xc1,0x86,0xb9,
    0xe3,0xf7,0x94,0x8b,0x82,0xfd,0x96,0xb2,0x8e,0x3e,0x97,0x04,0xf3,0x1b,0x13,0xb2,
    0xff,0xd3,0x2e,0x0d,0x86,0x17,0xf9,0xff,0xf8,0x65,0xc1,0xd6,0x78,0x09,0xbf,0xe1,
    0xf1,0xc1,0x7c,0xe2,0xda,0x02,0xbb,0x9c,0x98,0xa4,0x9a,0x2a,0xd2,0xdf,0x64,0xae,
    0x08,0xe6,0x0b,0x1b,0x38,0x96,0x71,0x7f,0xfa,0x6a,0x30,0x1d,0xb0,0xfb,0xff,0xfb,
    0xb0,0xd7,0x5e,0x19,0xcc,0x9e,0x24,0xd9,0xf9,0xb4,0x3e,0xb7,0xa6,0xfe,0x7c,0xfa,
    0x05,0xed,0x71,0x5f,0x7e,0x54,0x8c,0xc3,0xb7,0xb1,0x5a,0xd1,0xb0,0x3d,0xc6,0x3d,
    0x6a,0x06,0x7f,0x23,0xc0,0xd8,0x47,0xdd,0xf9,0x33,0x21,0xd8,0xde,0xd9,0x78,0x9e,
    0xb3,0xed,0xaa,0x60,0x1c,0xfe,0x6c,0xab,0x0a,0x76,0xb6,0xc1,0x16,0xcf,0xa9,0x6f,
    0x04,0xe3,0x82,0x2d,0x72,0x5f,0xcd,0xb1,0x8f,0x9d,0xe7,0x6c,0xab,0x0e,0xe6,0x03,
    0x9e,0x78,0xb6,0x4d,0x0c,0xc6,0x05,0x5b,0xd4,0x30,0x89,0xfa,0xfc,0xd9,0x76,0x6d,
    0x30,0xbc,0xca,0xf9,0x5d,0x17,0x6c,0xbc,0x3f,0xdb,0xae,0x27,0xe6,0xcf,0xb6,0x29,
    0xc4,0xfc,0xd9,0x36,0x35,0xd8,0x78,0xf8,0xc3,0x0e,0x7e,0xec,0x2b,0xb1,0x66,0x8b,
    0xee,0xac,0x59,0x49,0x3d,0xd8,0x6b,0x30,0xae,0x3d,0xb7,0x07,0x2d,0x76,0xbe,0x2b,
    0xe8,0x8b,0x7d,0x0a,0xe3,0x8a,0x52,0x7a,0x86,0x2d,0x72,0x67,0xf3,0xe3,0x92,0xcd,
    0x73,0x37,0xbf,0xab,0x5f,0x89,0xe1,0xeb,0x79,0x6f,0xdf,0xe0,0xbe,0x2b,0xd8,0x9e,
    0xd0,0xb6,0x81,0x5c,0x4f,0xb8,0x75,0xfd,0xb5,0x8c,0xbc,0xae,0x7b,0xc8,0xfb,0x3b,
    0xf2,0x76,0x92,0xb7,0xc3,0xf1,0xc2,0xb6,0x51,0x5b,0x07,0x79,0x37,0x72,0x1f,0xc1,
    0xef,0x43,0x9b,0xf9,0xdb,0x50,0xfc,0x6e,0xb6,0x70,0x8f,0xbd,0x5b,0x79,0x31,0xdf,
    0xad,0xf4,0xd9,0xe2,0xb4,0x6c,0x13,0xc3,0xb7,0x9e,0xa7,0x0e,0xb6,0x8b,0xf9,0x3c,
    0xee,0xee,0x38,0xcf,0x89,0xcd,0x61,0x3b,0xf3,0x15,0xb5,0x74,0x30,0xb7,0xf0,0x69,
    0x0a,0xe6,0x83,0x79,0x3f,0x47,0xcd,0x51,0xe7,0xf3,0x39,0x9d,0x9d,0xd4,0x19,0x73,
    0xfd,0xa2,0xd8,0x78,0x5f,0x2b,0x3b,0x89,0xf9,0x5a,0xd9,0x45,0xcc,0xd7,0x4a,0x97,
    0xd8,0x78,0xf8,0xef,0xe2,0xda,0xac,0xd0,0x38,0x88,0x89,0x38,0x5d,0xd4,0x1c,0xd7,
    0x65,0x83,0x94,0xfe,0xb6,0x84,0xe7,0xb0,0x46,0x99,0xa3,0xed,0x7f,0x09,0x27,0x51,
    0xe6,0x20,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint packedChars = textWidgetsData[textWidget]. text[packIndex / 4][packIndex % 4];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     return graphWidgetsData[graphWidget]. values[valueIndex / 4][valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     const uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
