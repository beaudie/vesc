// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x6b,0x90,0x56,0x47,
    0x11,0xbd,0x3d,0xfb,0x06,0x0a,0xf3,0x24,0x31,0x3c,0xdc,0x85,0x04,0xc2,0x06,0x16,
    0x12,0x70,0x03,0x2c,0x60,0x6d,0x8c,0xc5,0x63,0x97,0x05,0x96,0xf0,0x83,0x00,0x22,
    0xb0,0x12,0x79,0x19,0xe4,0xb1,0x8b,0x01,0x0d,0xac,0x40,0x42,0xa0,0xd0,0x60,0x4c,
    0x10,0xd4,0x98,0xd4,0x2e,0x0f,0x35,0x16,0x86,0x3f,0x96,0xa5,0x96,0xe1,0xa1,0x15,
    0x21,0x2a,0x54,0xd4,0x82,0xc4,0x42,0x03,0x26,0x58,0x41,0x23,0x82,0x98,0xf0,0x08,
    0xce,0xb9,0x7d,0x3a,0x5f,0xef,0xad,0x8f,0xaf,0x6a,0xea,0xde,0x39,0xdd,0xd3,0x7d,
    0x66,0xa6,0x7b,0xa6,0xbf,0x5b,0x10,0xfa,0x94,0x24,0x89,0x24,0x9d,0x92,0xd2,0xa4,
    0x73,0x41,0x92,0xfe,0x6e,0x4c,0x42,0x44,0x92,0xa4,0x73,0x52,0x9c,0x3e,0xc7,0xd4,
    0x4f,0xa9,0xaf,0x5a,0xb6,0xbc,0xa9,0x6a,0xe8,0x27,0x07,0x43,0xde,0x35,0x51,0x45,
    0xc8,0x3e,0x96,0x94,0x24,0x45,0xf1,0x59,0x18,0xdb,0xe2,0xd9,0xf3,0xbf,0x08,0xfc,
    0x8d,0xd8,0xce,0xc7,0x76,0x43,0x1c,0x5f,0x98,0xda,0x4b,0xa2,0x75,0xd5,0x49,0xed,
    0xc5,0xb7,0xf1,0xf1,0x59,0x9c,0xea,0x24,0xc9,0xd8,0x68,0xa1,0x4e,0x5d,0x27,0x7d,
    0xf8,0x34,0x4c,0x88,0x79,0xbd,0x40,0xac,0xdc,0x61,0x05,0xc4,0x06,0xd3,0xfe,0x04,
    0xda,0x1f,0x2c,0xaa,0xd3,0x90,0xb1,0x3f,0x26,0x8e,0x68,0xa0,0x2d,0xe8,0x4f,0x8a,
    0xcf,0xde,0x1f,0xc9,0xb4,0x5f,0xe1,0xf8,0x6e,0xc8,0xc8,0x37,0x50,0x5e,0xc8,0x7e,
    0x5b,0x66,0x3e,0xed,0x79,0xe6,0xd3,0x9e,0x67,0x3e,0xed,0x79,0xe6,0xd3,0x9e,0x67,
    0x3e,0x3b,0x33,0xf3,0xd9,0x95,0x67,0x3e,0xbb,0xdc,0x7c,0xf6,0x64,0xf8,0xee,0x21,
    0x5f,0x93,0xbf,0x91,0xee,0x6f,0x92,0xf4,0xa0,0xcf,0x93,0x79,0xf8,0x9e,0x74,0x7c,
    0x4b,0xe9,0xe3,0xa4,0xb3,0x71,0x2e,0xe3,0xe3,0x1c,0x7d,0x14,0xb0,0x7f,0x9e,0x3e,
    0xee,0x60,0xff,0x8c,0x74,0xd4,0x47,0xbf,0xc2,0xf5,0xaf,0x88,0xea,0x7f,0x3c,0xb6,
    0x9b,0xa3,0x97,0x90,0xda,0x2b,0x48,0xed,0xe1,0xfd,0xd6,0xa8,0x53,0xcc,0x75,0xc2,
    0xef,0xb6,0xd8,0x2f,0xe1,0xba,0x04,0xf6,0x4b,0xd9,0xc7,0xbe,0xdc,0x12,0xd1,0xb2,
    0xf8,0xec,0x16,0x2d,0xdc,0xca,0x71,0xd0,0xe9,0x9d,0xda,0x52,0x1d,0xf4,0xfb,0xc7,
    0x67,0x19,0x6d,0x94,0xc7,0xfe,0xd0,0xf8,0x34,0xbb,0xf7,0xd0,0x67,0x35,0x7d,0x5a,
    0xbf,0x86,0xe3,0xa1,0x3f,0x86,0xfa,0xa5,0x4e,0x3e,0x8e,0x7b,0xdc,0x83,0xb1,0x5e,
    0x4a,0xac,0x57,0x94,0xd6,0xb1,0xdf,0x9b,0xcf,0xf1,0x6e,0x5c,0x3d,0x79,0xf6,0x60,
    0x0c,0xd7,0x11,0xeb,0xc5,0x78,0x9d,0x40,0x9f,0x13,0xc9,0xb7,0x21,0xe5,0xa2,0xfd,
    0x49,0x6e,0x9d,0x26,0xd3,0x8e,0xd0,0x36,0xfa,0x8d,0x6e,0x0e,0xe8,0x4f,0xe1,0x5e,
    0xc1,0xde,0x43,0x1c,0xeb,0xe7,0x30,0x2d,0x33,0x7e,0xa6,0xeb,0x43,0x3e,0x87,0x63,
    0x4c,0x3e,0xcf,0xf5,0x21,0x5f,0x96,0xb1,0xb7,0x32,0xb6,0x6b,0xe9,0xfe,0x96,0x25,
    0xeb,0xb8,0x07,0x42,0x4e,0xd9,0x27,0x38,0xad,0xe7,0xfb,0x3a,0xce,0x11,0xfd,0x0d,
    0x6e,0xef,0x37,0xc5,0xe7,0x64,0xb7,0xf7,0x5b,0xd8,0x2f,0xe0,0xfa,0xb5,0x65,0xd6,
    0xbd,0x3d,0xb3,0xee,0x6d,0xd4,0x43,0x6e,0xb5,0xbb,0x75,0x46,0x1e,0xed,0x24,0x87,
    0xdd,0xb4,0xbf,0x8b,0x1c,0xd0,0xdf,0xe3,0x7c,0x1e,0xe0,0x3c,0x0a,0x38,0x4f,0xbc,
    0x1f,0x4a,0x19,0xae,0xf9,0x14,0xe4,0xc7,0x19,0x47,0xb6,0xce,0x27,0x38,0xc7,0xe3,
    0xb4,0x77,0x82,0xe7,0xa5,0xa4,0xbe,0x0b,0xd3,0xfc,0xb2,0xd8,0x83,0xfe,0x5f,0x19,
    0x9b,0x27,0xa9,0x8f,0xfe,0xdf,0x88,0x41,0xfe,0x16,0xdf,0x4b,0x9c,0xff,0xb3,0x5c,
    0xa3,0x01,0x11,0xc5,0x5c,0xff,0x49,0xcc,0xda,0x21,0xee,0xc1,0x7b,0xf4,0x63,0x6b,
    0x9e,0xe4,0xd9,0x83,0x7f,0xf3,0xfd,0x3d,0xfa,0x47,0xff,0x1c,0x31,0xe3,0x7f,0x9e,
    0x63,0xcc,0xdf,0x68,0xe9,0xe8,0xef,0xac,0xe5,0x89,0xe8,0xba,0xd9,0xdc,0xbe,0xcc,
    0x7e,0x6f,0x17,0x23,0x7b,0x23,0xf6,0x39,0x37,0x97,0x9f,0xc7,0xfe,0x6b,0x47,0x8e,
    0x8c,0x36,0xdb,0xbf,0xc8,0xd8,0x86,0x1c,0xb6,0x5e,0x13,0x5d,0x87,0x62,0xce,0xed,
    0x6d,0xe9,0x18,0x5f,0xf6,0x0b,0xc4,0x30,0xe6,0x1d,0x0a,0xa1,0x5b,0xc3,0xfe,0x19,
    0xb1,0xb5,0x2b,0x4e,0xf7,0x08,0x67,0xd2,0x32,0xe6,0x3b,0xf2,0xa1,0x2a,0xee,0x24,
    0xd6,0xba,0x53,0x01,0xce,0x84,0xa2,0xd4,0x5e,0x21,0x6d,0x63,0x8f,0xdf,0x8f,0x48,
    0x11,0xd7,0x06,0xe7,0xc2,0xd4,0xa0,0x7b,0x63,0xfd,0x1b,0xd8,0xff,0x5f,0xd4,0xbe,
    0x4a,0x5f,0x97,0xe3,0x3b,0xce,0x97,0x0f,0x45,0xc7,0xe3,0x39,0x8a,0xb1,0xf3,0x26,
    0xe3,0x63,0x62,0x1c,0x85,0x71,0x7f,0x21,0xf6,0xa6,0xdb,0xab,0xda,0xe8,0x11,0x71,
    0x70,0x8a,0xb1,0x81,0x3c,0x1f,0xc5,0xb3,0xf1,0x34,0xf1,0x1f,0x47,0x1d,0x9c,0x73,
    0x7f,0xa7,0x0d,0xe0,0xdb,0xa3,0x0e,0xd6,0xec,0x6d,0xe2,0xe0,0x74,0x86,0x76,0x2f,
    0x45,0x19,0xf0,0x77,0x62,0x3b,0xc3,0x79,0xe1,0xfd,0x83,0xf8,0xbc,0x4a,0x9e,0x67,
    0xe8,0x07,0xb1,0xf1,0x1f,0xc6,0x85,0xf1,0xbe,0xc0,0xb8,0x30,0xde,0xff,0x25,0x76,
    0xc1,0xf1,0x5e,0xcd,0x1c,0xbe,0x48,0xf9,0xac,0xa8,0x59,0x9a,0xf2,0x50,0x7b,0x17,
    0xb9,0x5f,0x8d,0x69,0x5e,0x17,0xa5,0x7b,0x7b,0x99,0xf2,0xc4,0x61,0x1f,0x12,0x13,
    0xf2,0xbb,0x46,0xbe,0xd7,0x52,0xbb,0x1a,0x37,0x87,0x82,0xe6,0x01,0x38,0x5f,0x8a,
    0xef,0x41,0x54,0x86,0xf1,0xaf,0x04,0xb5,0x01,0x59,0x57,0x51,0xd9,0x0f,0xa3,0x6d,
    0xac,0x4d,0x91,0xa8,0xbc,0x3a,0xe5,0x53,0x98,0x08,0xe5,0xb6,0x46,0x90,0xc3,0xb1,
    0x70,0x4d,0xf0,0xde,0x25,0x5a,0xc5,0x39,0x54,0x2a,0xca,0x69,0x1c,0x7d,0xac,0x66,
    0x8c,0x97,0x89,0xca,0x0e,0x46,0x1f,0xd0,0xeb,0x2c,0x7a,0xb6,0x02,0x37,0x9d,0x2e,
    0xa2,0xf8,0xaf,0x39,0xc7,0xae,0xe4,0x01,0xbc,0x36,0xf2,0xc6,0x79,0x7d,0xa3,0xe8,
    0x59,0xd4,0xc8,0xb1,0xb6,0xef,0x58,0xc3,0x9b,0x44,0xe5,0xb6,0xfe,0x85,0x41,0xb1,
    0x9b,0x24,0xb7,0xfe,0x16,0x13,0x45,0x41,0x63,0x02,0x3a,0x3b,0x18,0x13,0xc5,0x41,
    0x71,0xc4,0x44,0xe7,0x90,0x9b,0x2f,0xf0,0x92,0xd8,0x80,0x61,0xbe,0x78,0x37,0x1f,
    0xa5,0xce,0x47,0x60,0x3e,0xec,0xa5,0x8f,0x32,0xfa,0x28,0x75,0x3e,0x3a,0x05,0xc5,
    0xb1,0x67,0x66,0x0f,0x4f,0xec,0x0b,0xe4,0x5d,0x82,0xf2,0x00,0xd9,0x4e,0xf4,0xbb,
    0x9b,0x63,0xbb,0x89,0xca,0xc1,0xef,0x76,0xb7,0x1f,0xc0,0x6f,0x8b,0xed,0x76,0xee,
    0x07,0xde,0x61,0x3f,0xb0,0x0f,0xdc,0xe2,0xa6,0xbb,0xe4,0xf2,0xc8,0xb0,0x9e,0x6e,
    0x8d,0x7e,0xc0,0x18,0xe8,0x25,0xaa,0x0b,0x99,0xf9,0xff,0x84,0x28,0x0e,0xff,0x15,
    0xce,0x3f,0xf0,0x72,0xd4,0x35,0xf4,0x57,0xee,0xfc,0xf5,0xa1,0x3f,0x71,0xfe,0xee,
    0xa2,0x3f,0x71,0xfe,0xfa,0x8a,0xea,0xde,0x45,0xee,0x66,0xab,0x42,0x72,0x6b,0xd3,
    0x8f,0xfe,0x31,0x9f,0xbe,0xf4,0x69,0xdc,0xee,0x16,0x95,0x83,0x5b,0xa5,0xe3,0x06,
    0xbc,0x7f,0x6c,0x95,0xb4,0x87,0xf7,0x35,0xe4,0x31,0x90,0x73,0x9c,0xe6,0xb8,0x0d,
    0x72,0x7b,0x69,0xdc,0x50,0x7f,0x42,0x77,0x10,0xb9,0x99,0xad,0x4a,0xc7,0xed,0x5e,
    0xfa,0x07,0xdf,0xc1,0xf4,0x69,0xdc,0xee,0x13,0x95,0x83,0xdb,0x50,0xc7,0x0d,0xf8,
    0x90,0xd8,0x86,0xd2,0xde,0x10,0xb7,0x6e,0xd5,0x6e,0xdd,0x8c,0xef,0xfd,0xa2,0xb8,
    0xe7,0x3b,0x9c,0x7c,0x0b,0x1c,0xdf,0x11,0xa2,0xba,0xc3,0xc9,0xd7,0xec,0x0f,0x75,
    0x7c,0x6b,0xc8,0x09,0x73,0x18,0x41,0x1e,0xe0,0x37,0xca,0xf1,0x83,0xce,0x48,0x9c,
    0xcb,0x1c,0x3f,0x32,0x13,0x57,0xc0,0x5b,0xa3,0x4f,0xe4,0xc1,0x83,0x92,0xcb,0xa7,
    0xda,0x98,0x8d,0xb8,0xf7,0xc6,0x66,0x72,0x75,0x1e,0x6b,0xca,0x51,0x56,0x2f,0x52,
    0xc7,0xe6,0x72,0x73,0x50,0x3b,0x49,0x5a,0xf3,0x28,0x76,0x4b,0x50,0x1c,0xba,0x86,
    0x75,0x0b,0x8a,0xd7,0xb8,0x39,0xdf,0x11,0x14,0xaf,0xe6,0x99,0x3e,0xc8,0xe5,0x2f,
    0x64,0xdd,0x63,0xeb,0xc5,0x7c,0xeb,0x4e,0x8e,0x38,0x4f,0x7a,0x84,0x8e,0x1c,0xa7,
    0x24,0x1d,0xcf,0x94,0x9e,0x41,0x75,0x46,0x47,0x9b,0xb8,0xc7,0x7a,0x32,0x77,0x07,
    0xd1,0x16,0x6c,0x1a,0x87,0x72,0x72,0x98,0x46,0x0e,0x55,0x8e,0x03,0x64,0x15,0xb1,
    0xdd,0xc9,0x71,0x15,0x8e,0x43,0xef,0x3c,0x1c,0x66,0x3a,0x0e,0x7d,0x82,0xea,0x18,
    0x87,0x3e,0xe4,0x50,0x45,0x5b,0x77,0x3a,0x0e,0x7d,0xc9,0x61,0x0e,0x39,0x0c,0x74,
    0x1c,0x20,0xeb,0x17,0x5b,0x25,0xc7,0xf5,0x73,0x1c,0xee,0xce,0xc3,0x61,0x9e,0xe3,
    0xd0,0x3f,0xa8,0x8e,0x71,0xe8,0x4f,0x0e,0x03,0x69,0xab,0xd2,0xd9,0xba,0x27,0x8f,
    0xad,0x29,0xce,0xd6,0x80,0xa0,0x3a,0x66,0x6b,0x40,0xc6,0xd6,0xc0,0xcc,0xfc,0xaa,
    0x32,0x6b,0x8e,0xe7,0x46,0xc6,0xc2,0xbd,0x2e,0x16,0x50,0x13,0xe0,0x7f,0xcc,0x7d,
    0x41,0x6b,0x0e,0xc8,0x2c,0xd6,0x86,0x04,0xc5,0x2d,0xd6,0x1a,0x5d,0xde,0x18,0xf6,
    0x90,0x3b,0x97,0x5a,0x89,0x4d,0x15,0xd5,0x85,0xec,0x47,0x5c,0xe3,0x87,0x45,0xed,
    0x4d,0x65,0xce,0xcc,0x70,0x39,0x03,0xd9,0xf4,0xd8,0x66,0x30,0x47,0xa6,0xbb,0xf8,
    0xfe,0xac,0x68,0x7c,0xfb,0x9c,0x9e,0x25,0x8a,0xd7,0xf0,0x6e,0x82,0xfd,0xd9,0xa2,
    0xf8,0x54,0xe6,0x9b,0xd9,0x9a,0xe1,0xf2,0x77,0x8e,0x28,0x0f,0xac,0xc5,0x6c,0xfa,
    0x04,0x97,0x26,0xc7,0x05,0x3a,0x73,0x63,0x6b,0xe2,0xf8,0xb9,0x8e,0xcb,0x17,0x1c,
    0x17,0xbb,0x6f,0xe7,0x8b,0xe6,0x1a,0x64,0xbf,0x21,0xb6,0x40,0x14,0x9f,0xe6,0x72,
    0x6d,0xa1,0x28,0x5e,0xcd,0xda,0xc3,0xec,0x37,0x39,0x7e,0x8b,0x44,0x39,0x82,0xf3,
    0x42,0xf2,0x30,0xdf,0x8f,0x3a,0xdf,0xb6,0xce,0x4b,0x38,0x5f,0xc8,0xf6,0xd2,0xcf,
    0x52,0x51,0x7c,0x88,0xbb,0x03,0x97,0x8b,0xda,0xde,0x45,0x9d,0x15,0xa2,0x7a,0xcb,
    0x39,0xff,0x16,0x37,0x7f,0xc8,0x9a,0x63,0x6b,0x21,0xbf,0x66,0xd6,0x11,0xa8,0xc1,
    0x1f,0xcb,0x9c,0x4d,0x96,0x6f,0xa8,0x9b,0x56,0x51,0x3e,0x31,0x46,0x2b,0xfe,0xeb,
    0x54,0x07,0xad,0xa5,0x0e,0x85,0x5c,0x1d,0x11,0x18,0x37,0xa8,0xb7,0xef,0x0f,0x3a,
    0x06,0xb1,0xf4,0x35,0x62,0xc3,0x82,0xfe,0xe7,0x80,0x6c,0x4b,0xc4,0x60,0x67,0x78,
    0x50,0x5b,0xc3,0x42,0xce,0xf6,0x08,0x8e,0x5d,0x25,0x1d,0x6d,0xdb,0x98,0x91,0x41,
    0x75,0x60,0x67,0x2d,0xb1,0x51,0x41,0x6d,0x8d,0x0c,0x39,0x0e,0xa3,0xc9,0x0f,0x1c,
    0xd6,0x13,0xab,0x0d,0x8a,0x0f,0x73,0x7a,0x0f,0x04,0x1d,0x9f,0x38,0xfe,0x9f,0x26,
    0x26,0x0e,0x7b,0x90,0x58,0x48,0xff,0x63,0x6b,0x3d,0xf9,0x99,0xa0,0xe3,0xa1,0x0f,
    0x79,0x2d,0xf3,0xd2,0xd6,0xb7,0x45,0x72,0xb5,0xe7,0x65,0xf2,0x41,0x4c,0x60,0x5c,
    0x73,0xe6,0xee,0xd0,0x5a,0xb4,0x2c,0xd5,0xbd,0x44,0x5d,0xd4,0x2d,0xa3,0x79,0xe7,
    0x60,0x7c,0x8b,0x74,0xac,0x6d,0x85,0xfd,0xc7,0x69,0xe3,0x71,0xe7,0xef,0x20,0x6d,
    0x40,0xe7,0x4a,0x7c,0xb6,0xba,0x5a,0x77,0x7f,0xd0,0x1a,0x1a,0xb2,0x2d,0xa2,0x32,
    0xab,0x75,0xd7,0x8b,0xca,0xad,0xd6,0x5d,0x4b,0xb9,0xc5,0x10,0xe4,0x6b,0x62,0x5b,
    0x4b,0x9f,0x6b,0x5c,0xad,0xfb,0xa4,0xab,0x75,0xf7,0xbb,0x5a,0x77,0xa3,0xa8,0xcc,
    0x6a,0xdd,0x4d,0x8c,0xaf,0x8d,0xae,0xd6,0xdd,0x2c,0x8a,0x5b,0xee,0x6d,0x21,0x8f,
    0xcd,0xae,0xd6,0x7d,0x5a,0xf4,0xfb,0x46,0x23,0xc7,0xfa,0x7b,0x69,0xab,0xa8,0xdc,
    0xea,0xd0,0xb1,0x41,0xb1,0xad,0x79,0x6a,0xdd,0x71,0xac,0x43,0xc7,0xba,0x3a,0x74,
    0x7c,0x50,0x1c,0x39,0x33,0xd1,0xdd,0x11,0xc0,0xeb,0x10,0x9f,0x3c,0x6b,0xeb,0x5c,
    0xad,0x5b,0xef,0x7c,0x64,0x6b,0xdd,0x09,0xf4,0x51,0xef,0x7c,0x34,0x04,0xc5,0xb1,
    0x67,0x66,0x6f,0xa2,0xab,0x75,0x27,0x05,0xe5,0x81,0x35,0x6d,0xa0,0x5f,0xcb,0xf3,
    0x67,0x45,0xe5,0xe0,0xb7,0xcd,0xed,0x07,0xf0,0xe7,0x62,0xdb,0xc6,0xfd,0x78,0x8e,
    0x31,0xd1,0xca,0xfe,0x36,0x57,0x93,0x7c,0x4f,0x72,0xf3,0xb6,0x35,0x7d,0x21,0xb3,
    0xa6,0xfe,0x8e,0x7b,0x51,0x54,0x6e,0xf3,0x6d,0x17,0xc5,0x5e,0x74,0x6b,0x6a,0x67,
    0xd8,0x6e,0xe2,0xc1,0x61,0x2f,0x39,0x5d,0xc3,0x1e,0x0e,0xca,0xc3,0xd7,0x34,0xd3,
    0x83,0xe2,0x2f,0xb9,0x9a,0x66,0x66,0x50,0xbc,0xc6,0xe9,0xcd,0x0a,0x8a,0x03,0xb3,
    0xfb,0x6e,0xb6,0xc3,0xec,0x3c,0x9e,0x1b,0x54,0xd7,0x6a,0x9f,0x95,0x6e,0x3f,0x21,
    0x6b,0x8a,0xed,0x11,0xae,0x7f,0x93,0xbb,0xa7,0x3f,0x1f,0x3a,0xae,0x45,0xb6,0xf6,
    0x99,0x17,0x54,0x07,0xf7,0x34,0xfe,0xd3,0xcf,0xe3,0x5e,0xae,0xa4,0xad,0x47,0x5c,
    0xdd,0x31,0x9f,0x1c,0xac,0xf6,0x69,0x71,0x1c,0x20,0x5b,0x10,0xdb,0x62,0x8e,0x5b,
    0xe0,0x38,0x2c,0xcc,0xc3,0xc1,0xd7,0x3e,0x8b,0x82,0xea,0x18,0x87,0x45,0x76,0xe6,
    0xd0,0xd6,0x62,0xc7,0xe1,0x51,0x72,0xb0,0xda,0xa7,0xd9,0x71,0x80,0x6c,0x49,0x6c,
    0xcb,0x38,0x6e,0x89,0xe3,0xf0,0xa5,0x3c,0x1c,0x7c,0x5c,0x2c,0x0d,0xaa,0x63,0x1c,
    0x96,0x92,0x43,0x33,0x6d,0x2d,0x73,0xb6,0x96,0xe7,0xb1,0xe5,0x6b,0x9f,0x15,0x41,
    0x75,0xcc,0xd6,0x8a,0x8c,0xad,0xe6,0xcc,0xfc,0x5a,0x32,0x6b,0xbe,0x32,0xe4,0xea,
    0x9c,0xc7,0x82,0x7e,0x6b,0x99,0xed,0xea,0x9c,0x55,0x41,0x71,0x8b,0x97,0xaf,0xb8,
    0xb8,0x5a,0x47,0xec,0xab,0x41,0x71,0x7c,0xe3,0xd9,0x4f,0x6c,0x6d,0xd0,0xb1,0x90,
    0xd9,0xdd,0xdf,0x1a,0x14,0x5f,0x99,0xe4,0xee,0xe4,0x9f,0x88,0xe2,0x7b,0x79,0xdf,
    0xee,0x73,0xb9,0x09,0xd9,0xcb,0xb1,0xed,0x63,0x2e,0xe2,0x7d,0x23,0x73,0xf1,0x09,
    0xe6,0x41,0xbb,0xe4,0xb8,0x3d,0x19,0xd4,0x56,0xbd,0x8b,0xf9,0x8d,0x0e,0x9b,0xc4,
    0xb1,0x4f,0x05,0xd5,0x85,0x6c,0x1d,0xb1,0x4d,0x41,0x6d,0x3d,0xc5,0xb9,0xe3,0x7b,
    0xe9,0xe6,0xa0,0xdf,0x4a,0xd7,0x50,0xe7,0xeb,0x41,0xf5,0x9e,0x08,0xb9,0xef,0x2e,
    0xdf,0x08,0x8a,0xaf,0xe6,0xf7,0xdb,0xa7,0x83,0xe6,0xf2,0x64,0x9e,0xd5,0x5b,0x83,
    0xea,0x58,0x0e,0x03,0xfb,0x26,0x31,0x49,0x39,0x15,0xa7,0xdf,0x5c,0x9f,0x09,0xaa,
    0x0b,0x19,0x6c,0xcc,0xe2,0x3d,0xf4,0xad,0xa0,0x3c,0x9e,0x09,0x1d,0xbf,0xe3,0xe0,
    0x4e,0x7d,0x36,0xa8,0x3c,0x49,0x72,0x75,0xc8,0xaf,0x32,0xe7,0x91,0xaf,0x43,0x5e,
    0xf9,0x48,0xae,0xb6,0x0f,0x88,0xda,0xf0,0xad,0x4b,0x8c,0xaa,0xf4,0xfe,0xe3,0x5d,
    0x54,0xc5,0xef,0x85,0x18,0x7b,0xc0,0xd5,0x30,0xdf,0x0e,0x7a,0x47,0x1e,0xbc,0x4e,
    0x0d,0xb3,0x3d,0xa8,0x0d,0x5f,0xc3,0xec,0x60,0x0d,0xb3,0xdd,0xd5,0x30,0xdf,0x09,
    0x6a,0x6b,0x87,0xab,0x61,0xbe,0xcb,0xb1,0x07,0xaf,0x53,0xc3,0x3c,0x1f,0x54,0x67,
    0xbb,0xab,0x61,0xbe,0x1f,0xd4,0xd6,0xf3,0xae,0x36,0x79,0x81,0xfc,0x7c,0x0d,0xd3,
    0x16,0x14,0xdf,0xe1,0xf4,0xda,0x83,0x8e,0xf7,0x35,0xcc,0x4e,0x62,0xbe,0x86,0xd9,
    0x45,0xcc,0xd7,0x30,0xbb,0x83,0x8e,0x87,0x3e,0xe4,0x6d,0xcc,0x2f,0x8b,0xd9,0x7d,
    0xae,0xa6,0xb8,0x4a,0x3e,0xc8,0x39,0x8c,0x7b,0x39,0x73,0xd7,0xb4,0x3a,0xdd,0x2b,
    0xd4,0xc5,0x7d,0x84,0x71,0xfb,0x32,0xb5,0xca,0x5a,0xc9,0xf1,0x7a,0x55,0x72,0xf3,
    0xfc,0x29,0xf3,0xea,0xb7,0xa2,0xf8,0x21,0x9e,0x5d,0x47,0x5c,0x5e,0x41,0x76,0x38,
    0xb6,0x23,0xb4,0x75,0x58,0xf4,0x0c,0xc0,0xf7,0xdf,0xdf,0x89,0x7e,0xff,0x9c,0xe9,
    0xfe,0x57,0xff,0x9e,0xb8,0xd5,0x38,0x7f,0x10,0xc5,0xec,0x7e,0x38,0xe6,0x6c,0x43,
    0x76,0x34,0xb6,0x63,0xb4,0x7d,0xd4,0xdd,0x7f,0xaf,0xf3,0x1b,0x04,0xbe,0xfb,0xda,
    0x37,0xe5,0xda,0xe8,0x01,0x7e,0xff,0x28,0xb9,0xef,0xae,0xd3,0x9c,0xef,0x3f,0x51,
    0x66,0x75,0xfd,0x9f,0x45,0x31,0xff,0xcd,0xe2,0xb8,0xfb,0xb6,0x61,0x7a,0x27,0x44,
    0x75,0x8f,0xa7,0x75,0x4e,0x71,0xea,0xff,0x97,0x41,0xf1,0xd7,0xe9,0x1c,0xeb,0x69,
    0x3c,0x8f,0x71,0xed,0xa1,0xf7,0x2a,0x6b,0x0f,0xac,0x0b,0xc6,0x1c,0x75,0x71,0x7f,
    0x52,0xf2,0xc7,0xfd,0xcf,0xb8,0x36,0x6f,0x71,0xdd,0xcf,0x72,0x6d,0x4e,0xbb,0xb5,
    0x81,0xec,0x54,0x6c,0xa7,0xe9,0xf3,0x14,0xbf,0x51,0xe3,0xdb,0xf9,0x3f,0xf8,0xdd,
    0xdc,0xce,0x95,0x77,0x45,0x79,0xcc,0x89,0x76,0x11,0x0f,0x67,0xa9,0xf3,0xae,0xe3,
    0xf2,0x2f,0x51,0xfc,0xec,0x75,0xf2,0xe4,0x9c,0xa8,0x0e,0xf8,0x58,0x9e,0x9c,0x17,
    0x9d,0xc3,0x39,0xc6,0x93,0x71,0x39,0xcd,0xf9,0x43,0xe7,0x70,0x50,0x1d,0xac,0xc9,
    0x79,0x72,0x36,0x9e,0x17,0x32,0x3c,0x2f,0x92,0xa7,0xc5,0xe2,0xfb,0xa2,0xe3,0x7d,
    0x2e,0x7d,0x40,0xcc,0xe7,0xd2,0x25,0x62,0x3e,0x97,0x2e,0x8b,0x8e,0x87,0xfe,0x25,
    0xc6,0xee,0xdc,0xe8,0x07,0x3e,0xe1,0xe7,0x32,0x39,0x5b,0xdc,0x1e,0x91,0x8e,0xdf,
    0xd2,0xf1,0xbc,0x1a,0xbd,0x0c,0x8b,0xed,0xff,0x8a,0x48,0x76,0x19,0x94,0x1f,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint col = packIndex / 4;
//     const uint row = packIndex % 4;
//
//     uvec4 rows;
//     if(col == 0)
//     {
//         rows = textWidgetsData[textWidget]. text[0];
//     }
//     else if(col == 1)
//     {
//         rows = textWidgetsData[textWidget]. text[1];
//     }
//     else if(col == 2)
//     {
//         rows = textWidgetsData[textWidget]. text[2];
//     }
//     else
//     {
//         rows = textWidgetsData[textWidget]. text[3];
//     }
//
//     const uint packedChars = rows[row];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uint col = valueIndex / 4;
//     const uint row = valueIndex % 4;
//
//     uvec4 rows;
//     if(col == 0)
//     {
//         rows = graphWidgetsData[graphWidget]. values[0];
//     }
//     else if(col == 1)
//     {
//         rows = graphWidgetsData[graphWidget]. values[1];
//     }
//     else if(col == 2)
//     {
//         rows = graphWidgetsData[graphWidget]. values[2];
//     }
//     else
//     {
//         rows = graphWidgetsData[graphWidget]. values[3];
//     }
//
//     return rows[valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
