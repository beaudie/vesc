// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x79,0x8c,0x57,0x57,
    0x15,0x7e,0xe7,0xfe,0x86,0x61,0xa6,0x20,0x54,0x81,0x5a,0x60,0x3a,0x2d,0x43,0x0b,
    0x55,0x61,0x3a,0xb4,0x38,0x2c,0x93,0x16,0x06,0x86,0x2d,0x21,0x81,0x16,0x35,0x2d,
    0x23,0x65,0x4d,0x11,0x22,0x8b,0x94,0x51,0x9b,0xb2,0x0c,0x4b,0xd9,0xac,0x80,0x69,
    0x81,0x01,0x26,0xb1,0x49,0x13,0x35,0x62,0x10,0xfe,0x33,0x90,0xd2,0x32,0x31,0x62,
    0x49,0x35,0xb1,0x84,0x52,0x3b,0x56,0x91,0x62,0xd8,0xa5,0xd6,0x54,0x5b,0x56,0xef,
    0xf7,0xce,0x77,0x7c,0xe7,0xf7,0x32,0x4c,0x72,0xf3,0xde,0xfd,0xce,0xf6,0xdd,0x73,
    0xcf,0x7d,0xf7,0xcc,0xaf,0x10,0xfa,0x77,0x4e,0x12,0x49,0xee,0x4a,0xca,0x92,0x4b,
    0x21,0x49,0xff,0xbe,0x98,0x84,0x88,0x24,0x49,0x97,0xa4,0x34,0x7d,0x4e,0x98,0x3c,
    0x6d,0x72,0xf5,0xf3,0xcb,0xe7,0x55,0x0f,0xfd,0x7a,0x0d,0xe4,0xdd,0x92,0x42,0xaa,
    0x07,0x59,0xf7,0xa4,0x73,0xd2,0x29,0x3e,0x4b,0xe2,0x58,0x34,0x7b,0xc1,0x62,0xe0,
    0xa7,0xe2,0xb8,0x1a,0xc7,0xdd,0xd1,0xbe,0x24,0xf5,0x97,0x44,0xef,0xaa,0x93,0xfa,
    0x8b,0x6f,0xa3,0xe3,0xb3,0x34,0xd5,0x49,0x92,0x89,0xd1,0x43,0xbd,0x86,0x4e,0xfa,
    0xf3,0x69,0x98,0x10,0xf3,0x7a,0x81,0xd8,0x03,0x0e,0x2b,0x10,0xab,0xa1,0xff,0xb1,
    0xf4,0x5f,0x23,0xaa,0xd3,0x90,0xf3,0x3f,0x21,0x5a,0x34,0xd0,0x17,0xf4,0xc7,0xc7,
    0x67,0xd5,0xff,0x65,0x3a,0xef,0xe7,0xf8,0xae,0xcb,0xc9,0xd7,0x51,0x5e,0xc2,0xf9,
    0xae,0xdc,0x7a,0x5a,0x3a,0x58,0x4f,0x4b,0x07,0xeb,0x69,0xe9,0x60,0x3d,0x2d,0x1d,
    0xac,0x67,0x77,0x6e,0x3d,0x7b,0x3a,0x58,0xcf,0x1e,0xb7,0x9e,0xd6,0x1c,0xdf,0x56,
    0xf2,0x35,0xf9,0xa9,0x74,0x7f,0x93,0xa4,0x82,0x31,0xdb,0x3b,0xf0,0xd7,0xee,0xf4,
    0xaf,0xe4,0xfc,0x5d,0xa1,0xbf,0x02,0xe7,0x57,0xe9,0xaf,0x8f,0xf9,0x97,0x62,0x7d,
    0xcc,0xfb,0xb9,0xf9,0x25,0x51,0xfd,0xde,0x71,0xf4,0x88,0x51,0x42,0xea,0xaf,0x90,
    0xfa,0xc3,0x7b,0xaf,0xa8,0x53,0xca,0x9c,0xe0,0xef,0xcb,0x71,0xde,0x99,0x39,0x08,
    0x9c,0x97,0x71,0x8e,0x3d,0xe8,0x19,0xd1,0xf2,0xf8,0xbc,0x27,0x7a,0xe8,0x45,0x3b,
    0xe8,0x54,0xa5,0xbe,0x54,0x07,0xf3,0xaf,0xc4,0x67,0x39,0x7d,0x7c,0x8d,0x31,0x6a,
    0x19,0xc3,0xe6,0x75,0xd4,0xb7,0xf9,0x28,0xee,0x57,0x05,0xeb,0xb6,0x8c,0x58,0x65,
    0x94,0xd6,0x73,0x5e,0xc5,0xe7,0x68,0x67,0x37,0x86,0x3c,0x2a,0x58,0x8f,0xf5,0xc4,
    0x2a,0x59,0x7b,0x63,0x53,0x79,0x49,0x32,0x8e,0x7c,0x1a,0xd2,0xd8,0x3a,0x1f,0xef,
    0xf2,0x30,0x81,0x7e,0x84,0xbe,0x27,0xa4,0x7b,0x96,0x71,0xc6,0x7c,0x12,0xf7,0x02,
    0xfe,0x26,0xd3,0xb6,0xcc,0x71,0x69,0x74,0xf6,0x98,0xcf,0xcd,0xe5,0x60,0x69,0x4e,
    0xbf,0x29,0x8e,0xdb,0xe9,0xfe,0x94,0x27,0x6b,0x98,0x43,0x61,0xcc,0xfc,0x13,0x31,
    0xd7,0xf2,0x7d,0x0d,0xd7,0x80,0xf9,0x3a,0xb7,0x77,0x9b,0xd2,0x7d,0xcf,0xf6,0xee,
    0x47,0x9c,0x17,0x98,0x9f,0x5d,0xb9,0xbc,0xb6,0xe4,0xf2,0xba,0x8b,0x7a,0x38,0x07,
    0x2d,0x2e,0x8f,0xa8,0xf9,0xdd,0xe4,0xb0,0x97,0xfe,0xf7,0x90,0x03,0xe6,0xad,0x2e,
    0xe6,0x5b,0x5c,0x47,0x81,0xeb,0xc4,0x7b,0x5b,0xca,0xb0,0x79,0x14,0xe4,0x27,0x59,
    0x4f,0x96,0xc7,0xf7,0xb8,0xc6,0x93,0xf4,0xf7,0x1e,0xbf,0x6d,0xc2,0xd8,0x38,0x1f,
    0x9d,0xa9,0xfb,0x17,0xd6,0x55,0x3b,0x75,0x31,0xff,0x90,0x18,0xe4,0x7f,0xe5,0x7b,
    0x67,0x17,0xfb,0x3c,0xf3,0x33,0x28,0xa2,0x58,0xe7,0x05,0x62,0x36,0xda,0x98,0xff,
    0x4b,0xe4,0x65,0xf9,0x4e,0x3a,0xc8,0xff,0x65,0xbe,0x5f,0x62,0x7c,0xcc,0xaf,0x10,
    0x33,0xee,0x57,0x73,0x35,0x54,0x2a,0x3a,0xb7,0xf8,0x75,0x52,0x1c,0xff,0xbc,0xd3,
    0x6d,0x10,0xcd,0x63,0x5a,0xaf,0x7c,0x2f,0xe5,0xfc,0x07,0x9c,0x57,0xb9,0xfa,0xd9,
    0x1f,0xb1,0x59,0x6e,0xad,0x87,0xe2,0xfc,0x0f,0xef,0xbc,0xf3,0x84,0xc5,0x3a,0x9c,
    0x8b,0x05,0x39,0xd6,0x7a,0x52,0x8a,0x6b,0xcd,0xfe,0x02,0xb1,0x74,0x5f,0x28,0x84,
    0x6e,0x1d,0xe7,0xa7,0xc4,0x72,0x59,0x9a,0xee,0x17,0xbe,0x2f,0x4b,0x79,0x96,0x1b,
    0xd3,0x33,0xde,0x29,0xf5,0x51,0x42,0x7f,0xd8,0xe3,0xcf,0x22,0x82,0xbb,0xeb,0xbf,
    0x71,0x76,0x99,0xf6,0xd7,0xe3,0x3b,0xbe,0x07,0x57,0x44,0xe5,0x78,0x3e,0xce,0xda,
    0x78,0x9f,0xfb,0x3f,0x25,0xae,0x01,0xfb,0xf8,0x67,0x62,0xef,0xbb,0xfd,0xa8,0x8f,
    0x1e,0xb1,0xd7,0x7f,0xe3,0xfe,0xe3,0x9c,0x3e,0xce,0x6f,0xd7,0x69,0xe2,0xfb,0xa3,
    0x0e,0xbe,0x43,0x7f,0xa7,0x8f,0xd3,0x69,0xcd,0x96,0xa4,0xf5,0x71,0x86,0x38,0x38,
    0x9d,0xa5,0xdf,0x6b,0x51,0x06,0xfc,0xa3,0x38,0xce,0x92,0x37,0xde,0x3f,0x8f,0xcf,
    0xcb,0xe4,0x79,0x96,0x71,0xb0,0xff,0xff,0xe4,0xde,0x1b,0xef,0x8f,0xb9,0xf7,0xc6,
    0xfb,0x5f,0xc4,0x3e,0x76,0xbc,0x57,0xf0,0x8c,0x7e,0x42,0xf9,0xcc,0xa8,0x89,0x73,
    0xf7,0x6f,0xfa,0xfb,0x84,0x7b,0x80,0xf5,0x3c,0x19,0xf9,0x97,0xa6,0x1c,0x55,0x9e,
    0x38,0xec,0x1a,0x31,0x21,0xbf,0xeb,0xe4,0x8b,0xe7,0xa7,0xdc,0xfb,0x23,0x41,0x6b,
    0x1d,0x9c,0xcf,0xc5,0xf7,0x5b,0x94,0xc1,0xfe,0x50,0x50,0x1f,0x90,0x75,0x11,0x95,
    0xed,0x8b,0xbe,0x91,0x1b,0x11,0x95,0x63,0x7f,0xfe,0x13,0xf9,0xde,0x4c,0x54,0x6e,
    0x39,0x82,0xfc,0x46,0x7c,0xbf,0xc9,0x98,0x78,0xef,0x1a,0xbd,0xa2,0x7e,0x4b,0x58,
    0xeb,0x93,0x18,0x63,0x05,0xeb,0xb4,0x93,0xa8,0xec,0xb7,0x31,0x06,0xf4,0xca,0x44,
    0xcf,0x05,0x70,0xd3,0x29,0x17,0xc5,0x7f,0xc7,0x35,0x76,0x21,0x0f,0xe0,0xf5,0x91,
    0x37,0xbe,0xb7,0xdd,0x44,0xbf,0x35,0x13,0xe9,0xd3,0xf6,0x1d,0x39,0xec,0x2e,0x2a,
    0xb7,0xfc,0x7f,0x26,0x8a,0x75,0x97,0x2c,0xff,0x56,0x13,0x9f,0x8b,0xd6,0x04,0x74,
    0xf6,0xb2,0x26,0xae,0x89,0xe2,0xa8,0x89,0xdb,0x92,0xad,0x17,0xf8,0xf5,0x38,0x6e,
    0xb3,0x06,0xae,0xbb,0x18,0x37,0x5c,0x8c,0xc0,0x7a,0x3f,0xc0,0x18,0x37,0x19,0xe3,
    0x86,0x8b,0x71,0x4b,0x14,0xc7,0x9e,0x99,0x3f,0x3c,0xb1,0x2f,0xe5,0x3c,0x80,0xd7,
    0x98,0xdf,0x5b,0x8c,0xfb,0x0b,0xda,0xf6,0x10,0x95,0x83,0x5f,0x2f,0xc7,0x0f,0x78,
    0x4f,0x9c,0x67,0xfa,0xeb,0x49,0xff,0xb7,0xb8,0x3f,0xc0,0xad,0x6e,0xee,0x95,0xec,
    0x1c,0x19,0xd6,0xc7,0xe5,0xe8,0x97,0xac,0x81,0xbe,0xa2,0xba,0x7d,0x5c,0xfc,0x0a,
    0x51,0x1c,0xf1,0x2b,0x5d,0x7c,0xe0,0xf7,0xc5,0x51,0xc9,0xf8,0xf7,0xb9,0x78,0x0f,
    0x30,0x9e,0xb8,0x78,0x55,0x8c,0x27,0x2e,0x5e,0x7f,0x51,0xdd,0x2a,0x72,0x37,0x5f,
    0x95,0x2e,0x37,0x0f,0x32,0x3e,0xd6,0xd3,0x9f,0x31,0x8d,0xdb,0x43,0xa2,0x72,0x70,
    0x1b,0xe8,0xb8,0x01,0x1f,0x10,0xc7,0x40,0xfa,0xc3,0x7b,0x33,0x79,0x7c,0x95,0x6b,
    0x6c,0x74,0xdc,0x06,0xb9,0xbd,0x34,0x6e,0x83,0x45,0x75,0x07,0x91,0x9b,0xf9,0x1a,
    0xe8,0xb8,0x55,0x33,0x3e,0xf8,0x0e,0x66,0x4c,0xe3,0xf6,0x88,0xa8,0x1c,0xdc,0x86,
    0x38,0x6e,0xc0,0xd1,0x67,0x0e,0xa1,0xbf,0x1a,0x97,0xb7,0xc7,0x5c,0xde,0x8c,0xef,
    0x50,0x51,0xdc,0xf3,0xad,0x25,0xdf,0x82,0xe3,0x3b,0x4c,0x54,0xb7,0x96,0x7c,0xcd,
    0xff,0x10,0xc7,0x77,0x38,0x39,0x61,0x0d,0xc3,0xc8,0x03,0xfc,0x46,0x3a,0x7e,0xd0,
    0x19,0x11,0xc7,0x48,0xda,0x8f,0xc8,0xd5,0x15,0xf0,0xb5,0x31,0x26,0xce,0x41,0xbd,
    0x3b,0x4f,0xf5,0xf1,0x34,0xe2,0xee,0x1a,0x9f,0x3b,0xab,0xb8,0xdb,0x6a,0x79,0x5e,
    0xc1,0x7d,0x02,0x75,0x10,0xf7,0xe1,0x50,0x7c,0x2f,0x94,0x05,0x8d,0x81,0xa7,0xad,
    0xb5,0x3c,0x68,0x1c,0xfc,0x6d,0x20,0x76,0x57,0x50,0x1c,0xbe,0x0c,0xeb,0x1a,0x14,
    0xaf,0x4b,0x94,0x0b,0xbe,0x1b,0x5f,0x08,0xc5,0x5c,0x26,0x51,0xcf,0xbe,0x1d,0xdd,
    0x82,0xea,0x6c,0xa6,0x8f,0xbb,0x9d,0x0f,0xcb,0xeb,0x97,0x82,0xe2,0xb5,0xbc,0x37,
    0x06,0x86,0x2c,0x57,0x90,0xf5,0x88,0xe3,0x1e,0xf2,0xc6,0xd3,0xec,0xee,0xa5,0x5d,
    0x23,0xed,0x06,0x38,0x3b,0xc8,0x7a,0xc7,0x51,0x41,0xbb,0x0a,0x67,0x57,0x49,0xbb,
    0xb9,0xb4,0x7b,0xc8,0xd9,0x41,0x76,0x7f,0x1c,0x55,0xb4,0xab,0x72,0x79,0x7a,0x30,
    0xe8,0x7a,0x0a,0xbc,0x1b,0x1e,0xa6,0xce,0xfd,0x4e,0xa7,0x1f,0x75,0x42,0x4e,0x07,
    0x31,0x6e,0xc7,0xaa,0xc3,0x7b,0x6f,0xa7,0xdf,0x97,0xfa,0x92,0xd3,0x1f,0xe0,0xf4,
    0x7b,0x38,0xfd,0x5e,0xd4,0x4f,0x72,0xfa,0x03,0x9d,0x3e,0xb0,0x4f,0xd3,0xff,0x7e,
    0x93,0xe4,0x58,0x50,0xde,0x58,0x47,0x3f,0xae,0xad,0x2f,0x73,0xd3,0x8b,0xb9,0x35,
    0xdf,0x53,0x5d,0xcd,0x1b,0xf6,0x94,0xfb,0xa6,0xac,0x25,0x36,0x4d,0x54,0x17,0xb2,
    0x5f,0x31,0xa7,0x4f,0x8b,0xc6,0x9a,0xc6,0xba,0x9b,0xee,0xea,0x1d,0xb2,0x67,0xe2,
    0x98,0xce,0x7a,0x7f,0xc6,0x9d,0xc7,0x6f,0x8b,0xd6,0x9e,0x3f,0x8f,0x33,0x44,0xf1,
    0x3a,0xde,0x2b,0xf0,0x3f,0x53,0x14,0x9f,0xc6,0xb3,0x62,0xbe,0xa6,0xbb,0xb3,0x37,
    0x4b,0x94,0x07,0xd6,0x3f,0x93,0x31,0xc1,0x65,0x8e,0xe3,0x02,0x9d,0xd9,0x71,0xcc,
    0xa1,0xfd,0x6c,0xc7,0xe5,0x39,0xc7,0xc5,0xee,0xca,0xf9,0xa2,0xe7,0x00,0xb2,0x63,
    0xc4,0xbe,0x23,0x8a,0x37,0xba,0x1a,0x5e,0x20,0x8a,0xd7,0x72,0x5f,0xcc,0xff,0x1c,
    0xc7,0x6f,0xa1,0x28,0x47,0x70,0x5e,0x40,0x1e,0x16,0x7b,0x91,0x8b,0x6d,0x79,0x5e,
    0xcc,0xf5,0x42,0x76,0x80,0x71,0x96,0x8a,0xe2,0xc8,0xb5,0x7d,0x07,0x97,0x89,0xfa,
    0xfe,0x39,0x75,0x9e,0x17,0xd5,0x5b,0xc6,0xf5,0x37,0xb9,0xf5,0x43,0xb6,0x3c,0x8e,
    0x26,0xf2,0x5b,0xce,0x1e,0x00,0x3d,0xf0,0x0f,0x73,0xdf,0x95,0x52,0xf6,0x8e,0xe8,
    0x79,0x5e,0xa0,0x7c,0x4a,0x3c,0xd5,0xf8,0x3f,0x64,0x50,0xd0,0x3e,0xe8,0x48,0xc8,
    0x7a,0x80,0xc0,0xba,0x41,0xff,0x3b,0x38,0xa8,0x4d,0x21,0xfd,0x3f,0x4a,0xb1,0xea,
    0xa0,0xff,0x13,0x40,0xb6,0x35,0x62,0xf0,0xf3,0x48,0x50,0x5f,0x90,0x99,0xef,0x1a,
    0xda,0xbe,0x20,0xc5,0xbe,0xcd,0xe6,0xd1,0xa0,0x3a,0xf0,0xb3,0x86,0xd8,0x63,0x41,
    0x7d,0x3d,0x1a,0x32,0x0e,0x43,0xc9,0x0f,0x1c,0x5e,0x22,0x36,0x2c,0x28,0x5e,0xed,
    0xf4,0x86,0x07,0xb5,0x4f,0x1c,0xff,0x11,0xc4,0xc4,0x61,0x23,0x89,0x41,0x75,0xaa,
    0xfd,0xcf,0x11,0xd4,0x1e,0xfa,0x90,0xc3,0x3f,0xf6,0xdf,0xf2,0xdb,0x24,0x59,0xdf,
    0x78,0x9e,0x7c,0x50,0x13,0xb0,0x5b,0x9e,0xfb,0xee,0x6b,0x1f,0x59,0x9e,0xea,0x9e,
    0xa3,0x2e,0x7a,0x8e,0x3a,0xde,0x17,0xb0,0x6f,0x92,0xe2,0xbe,0xf4,0x26,0xeb,0x6d,
    0x25,0xe3,0xad,0x74,0xf1,0xde,0xa0,0x0f,0xe8,0x5c,0x88,0xcf,0x66,0xc9,0xfa,0xd4,
    0xc3,0x41,0xfb,0x5f,0xc8,0x5e,0x16,0x95,0x59,0x9f,0xba,0x4e,0x54,0x6e,0x7d,0xea,
    0x6a,0xca,0xad,0x86,0x20,0x5f,0x15,0xc7,0x6a,0xc6,0xc4,0xbb,0xf5,0xa9,0x1b,0x5c,
    0x9f,0x7a,0xd8,0xf5,0xa9,0x1b,0x45,0x65,0xd6,0xa7,0x6e,0x66,0x7d,0x6d,0x74,0x7d,
    0xea,0x16,0x51,0xdc,0xce,0xde,0xcb,0xe4,0xb1,0xc5,0xf5,0xa9,0xdb,0x44,0x7f,0x5b,
    0x98,0x48,0x9f,0xbe,0x4f,0xdd,0x2e,0x2a,0xb7,0x1e,0xf2,0x89,0xa0,0xd8,0xf6,0x0e,
    0xfa,0xd4,0x51,0x41,0xef,0x55,0xe8,0x58,0x0f,0x39,0x3a,0x28,0x8e,0x33,0x33,0xce,
    0xdd,0x09,0xc0,0xeb,0xe3,0x18,0xc7,0x6f,0x6d,0x7d,0xc8,0x62,0x8c,0x71,0x31,0xf2,
    0x7d,0xea,0x58,0xc6,0x18,0xe3,0x62,0x34,0x04,0xc5,0xb1,0x67,0xe6,0x6f,0x5c,0xc8,
    0xbe,0x11,0xe3,0x83,0xf2,0x40,0x4e,0x1b,0x18,0xd7,0xce,0xf9,0xab,0xa2,0x72,0xf0,
    0xdb,0xe9,0xf6,0x03,0xf8,0x8e,0x38,0x76,0x72,0x3f,0x76,0xb0,0x46,0x9a,0x39,0xdf,
    0xe9,0xfa,0x89,0x56,0xc9,0xd6,0x6d,0x39,0xfd,0x69,0x2e,0xa7,0x0d,0x92,0xe5,0xf4,
    0x35,0x51,0xb9,0xad,0xf7,0x75,0x51,0xec,0x35,0x97,0x53,0xfb,0x86,0xfd,0x8c,0x78,
    0x70,0xd8,0x3e,0xa7,0x6b,0xd8,0x94,0xa0,0x3c,0x7c,0xbf,0x31,0x35,0x28,0xbe,0xcf,
    0xf5,0x1b,0x4f,0x05,0xc5,0xeb,0x9c,0xde,0x37,0x82,0xe2,0xbe,0x07,0xf9,0x66,0x28,
    0xe6,0x3f,0x89,0x7a,0xb6,0x86,0x6f,0x05,0xd5,0xb1,0x1e,0xe4,0x69,0xe7,0xc3,0xbe,
    0xdf,0xd3,0x83,0xe2,0xd6,0x83,0x2c,0x71,0xfb,0x0f,0x59,0x63,0x1c,0xcf,0x72,0xbf,
    0x9e,0x75,0xbd,0xc4,0x2c,0xda,0x59,0x0f,0xb2,0xd8,0xd9,0x41,0x36,0x3b,0x8e,0x79,
    0xb4,0x9b,0xe7,0xec,0x9e,0xa3,0x9d,0xf5,0x20,0x8b,0x9c,0x1d,0x64,0xf3,0xe3,0x58,
    0x48,0xbb,0x85,0xee,0x8e,0xfe,0x6e,0xd0,0xf5,0x58,0x0f,0xb2,0x88,0x3a,0xf3,0x9d,
    0xce,0x02,0xea,0x84,0x9c,0xce,0xa2,0x90,0x9d,0xff,0xb6,0xa0,0xbe,0xe0,0x7b,0x01,
    0xe3,0x41,0x77,0x31,0x75,0x67,0x3b,0x7f,0x73,0xe9,0xcf,0x7a,0x14,0xd3,0x59,0xec,
    0xfc,0x1d,0x0d,0xea,0x13,0x31,0xe6,0x72,0xdd,0xd0,0x5d,0x42,0xdd,0x46,0xe7,0x6f,
    0x06,0xfd,0x59,0x0f,0x63,0x3a,0x4b,0x9c,0xbf,0xb7,0x82,0xfa,0x44,0x8c,0x19,0xcc,
    0xbf,0xed,0xdf,0xf7,0x5c,0x5d,0xac,0x27,0xb6,0x2c,0x28,0xbe,0x34,0xfd,0xdd,0x49,
    0xb1,0xa6,0xa0,0x7e,0x20,0xb3,0xbb,0xfb,0xfb,0x41,0xf1,0xa6,0x24,0xbb,0x53,0x7f,
    0x2d,0x8a,0xef,0xe7,0x7d,0x79,0xd0,0x9d,0x2d,0xc8,0x0e,0xc4,0x71,0x90,0x67,0x09,
    0xef,0x9b,0x79,0x96,0x5e,0x64,0x1d,0xbf,0x2e,0x19,0xb7,0x15,0x41,0x7d,0x8d,0x71,
    0x35,0xbb,0xd2,0x61,0x53,0x69,0xbb,0x2a,0xa8,0x2e,0x64,0xeb,0x89,0xad,0x0e,0xea,
    0x6b,0x15,0x6b,0x17,0xbf,0x45,0x36,0x07,0xfd,0x1d,0xb2,0x99,0x3a,0xeb,0x82,0xea,
    0xbd,0x18,0xb2,0xdf,0x3c,0xd6,0x07,0xc5,0x57,0xf0,0xb7,0xae,0x97,0x82,0x9e,0xc5,
    0x27,0xf9,0xad,0xdd,0x10,0x54,0xc7,0xce,0x20,0xb0,0x8d,0xc4,0x24,0xe5,0x54,0x9a,
    0xfe,0x9e,0xb9,0x29,0xa8,0x2e,0x64,0xf0,0x31,0x93,0xf7,0xc8,0xe6,0xa0,0x3c,0x36,
    0x85,0xe2,0xdf,0x50,0x70,0x27,0x6e,0x09,0x2a,0x4f,0x92,0xac,0x8f,0x38,0x92,0xfb,
    0x9e,0xf8,0x3e,0xe2,0x4d,0xca,0xed,0xfe,0x3c,0x2a,0xea,0xc3,0x8f,0xae,0xf1,0xd4,
    0x42,0xd6,0xc6,0xbb,0xa4,0x9a,0xbf,0xb7,0xc1,0xf6,0xa8,0xeb,0x41,0x7e,0x1c,0xf4,
    0x8e,0x7b,0xe3,0x0e,0x3d,0xc8,0xd6,0xa0,0x3e,0x7c,0x0f,0xb2,0x8d,0x3d,0xc8,0x56,
    0xd7,0x83,0x6c,0x0f,0xea,0x6b,0x9b,0xeb,0x41,0x7e,0x42,0xdb,0xb6,0x3b,0xf4,0x20,
    0xaf,0x04,0xd5,0xd9,0xea,0x7a,0x90,0x57,0x83,0xfa,0x7a,0xc5,0xf5,0x16,0x3b,0xc8,
    0xcf,0xf7,0x20,0x2d,0x41,0xf1,0x6d,0x4e,0x6f,0x77,0x50,0x7b,0xdf,0x83,0xec,0x21,
    0xe6,0x7b,0x90,0xbd,0xc4,0x7c,0x0f,0xd2,0x1a,0xd4,0x1e,0xfa,0x90,0xb7,0xf0,0xec,
    0x59,0xcd,0x1e,0x74,0x3d,0xc1,0x45,0xf2,0xc1,0x59,0x83,0xdd,0x81,0xdc,0x5d,0xd1,
    0xec,0x74,0x2f,0x50,0x17,0xf7,0x09,0xec,0x0e,0x4a,0x71,0xaf,0xb1,0x5a,0x32,0x5e,
    0xc7,0x24,0x5b,0xe7,0x6f,0x78,0xae,0x7e,0x2f,0x8a,0xb7,0xf1,0x1b,0x77,0xdc,0x9d,
    0x2b,0xc8,0xde,0x8e,0xe3,0x38,0x7d,0xbd,0xed,0xf6,0xf5,0x8f,0xd2,0xf1,0xbe,0x1e,
    0xa2,0xdf,0x3f,0xd1,0xef,0x79,0xfa,0x3d,0xe1,0xfc,0x42,0xf6,0x6e,0x1c,0x27,0xe8,
    0xf7,0x5d,0xfb,0xfd,0x13,0xff,0xf7,0xf3,0x77,0x56,0x3b,0x37,0x1f,0xf0,0x2e,0x9c,
    0x13,0xfd,0x62,0xbd,0xed,0xd4,0xf9,0xc0,0x71,0xf9,0x50,0x14,0x6f,0xbf,0x43,0x1d,
    0x9c,0x16,0xd5,0x01,0x1f,0xab,0x83,0x33,0xa2,0x6b,0x38,0xcd,0x7c,0x19,0x97,0x13,
    0xcc,0x2d,0x74,0xde,0x0c,0xaa,0x83,0x75,0x9f,0x21,0x67,0xe3,0xf9,0x51,0x8e,0xe7,
    0x3f,0xc8,0xd3,0x72,0x7d,0x4e,0xd4,0xde,0xd7,0xca,0x79,0x62,0xbe,0x56,0x2e,0x10,
    0xf3,0xb5,0x72,0x51,0xd4,0x1e,0xfa,0x17,0xb8,0x37,0x73,0x63,0x1c,0xc4,0x44,0x9c,
    0x8b,0xe4,0x6c,0xfb,0x72,0x5c,0x8a,0x7f,0xa7,0xc5,0xf3,0x66,0x8c,0x32,0x3c,0x8e,
    0xff,0x01,0x9c,0xa1,0x9f,0x18,0x7c,0x1d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     const uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
