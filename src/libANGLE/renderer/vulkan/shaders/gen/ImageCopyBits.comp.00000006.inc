// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x54,0xcb,0x4e,0x54,0x41,
    0x10,0xed,0xba,0x77,0x18,0xe4,0x31,0x80,0xf1,0x15,0x1d,0x9d,0x28,0xa0,0x10,0x70,
    0x60,0x42,0xc0,0x18,0x40,0x94,0xe8,0x20,0x91,0x21,0x4a,0x94,0xe0,0x63,0xa5,0xb8,
    0x11,0x9c,0x89,0x51,0x97,0x2e,0x5c,0x18,0x3f,0x80,0xa5,0x7f,0x20,0x2a,0x3e,0x08,
    0x3e,0x08,0x01,0xfc,0x01,0x37,0xbe,0x36,0xc4,0x84,0x90,0x10,0x12,0xb6,0x0a,0xf2,
    0x90,0x58,0x75,0xfb,0x34,0x94,0x33,0x92,0xdc,0xf4,0xd4,0xe9,0x3a,0xa7,0xaa,0xab,
    0x4f,0xe3,0x7b,0x15,0xf9,0xc6,0x90,0x29,0x34,0xdb,0xcc,0x35,0x32,0xc1,0xdf,0x76,
    0xe3,0x19,0xf9,0x59,0x64,0xc2,0xc1,0x7a,0x36,0x75,0x31,0x55,0x77,0xef,0xfe,0xcd,
    0xba,0xc6,0xa6,0x84,0xec,0x97,0x18,0x3f,0xc8,0x93,0xbd,0x52,0xce,0xc9,0xe3,0x35,
    0xc4,0x5f,0xfa,0xfa,0xad,0x8c,0xe0,0x51,0xfe,0xca,0x18,0x0f,0x05,0x5a,0x86,0x95,
    0xed,0x17,0x68,0x31,0x1a,0x0d,0xb4,0x8d,0xd9,0xcf,0x5f,0x27,0xb3,0x2b,0x6d,0x59,
    0x53,0x81,0xd5,0x61,0x04,0xac,0x58,0x61,0x1e,0xb0,0x32,0x85,0xf9,0xc0,0xb4,0x5e,
    0x08,0xd8,0x41,0x85,0xe5,0x01,0xab,0x54,0x58,0x18,0x58,0x75,0xd0,0x9b,0xbf,0x59,
    0x43,0xfa,0xec,0xe6,0xb5,0x1c,0x3d,0xb9,0xf8,0x90,0x8a,0x07,0xc0,0x0f,0x41,0x6f,
    0x30,0xeb,0x1c,0xa2,0x37,0x88,0xfe,0x24,0x3f,0x9d,0xa5,0x97,0x86,0x9e,0x9b,0xcb,
    0x14,0xe6,0xb2,0x97,0xbf,0x1d,0xdc,0x85,0x17,0xec,0xfb,0x01,0x5f,0x7e,0xef,0xe2,
    0x9c,0x30,0xce,0x64,0x10,0x17,0x23,0x16,0x8d,0x3d,0x1c,0x47,0x30,0x2f,0x1f,0x71,
    0x29,0x7a,0xf4,0x83,0xbc,0x90,0xd9,0xb7,0x79,0x6f,0xc6,0xb4,0x20,0x8e,0x02,0xab,
    0x85,0x7e,0x0c,0xf5,0x76,0x33,0xeb,0x10,0xf4,0x45,0xab,0x1c,0xfd,0x3a,0xed,0x0a,
    0x68,0x7b,0x01,0xa7,0x20,0x98,0x5d,0x39,0xb0,0x08,0xd6,0xb0,0x9a,0xb1,0xd4,0x3f,
    0xcc,0x6b,0x01,0xee,0xa0,0x05,0xf1,0x11,0x60,0xb5,0x38,0x4f,0x15,0xee,0x4a,0xf2,
    0xab,0xb1,0x17,0x56,0xfd,0xc5,0x55,0xbf,0x92,0x9f,0xc0,0x1d,0xb8,0xfd,0x26,0xcc,
    0xc7,0xc5,0xcd,0xe8,0xd9,0xc5,0xad,0x2a,0x5f,0xf8,0x49,0x9c,0x41,0xea,0x75,0xa0,
    0x5e,0x24,0xb8,0x87,0x02,0xd3,0x85,0xda,0x78,0x1a,0x9b,0xab,0x87,0x39,0x09,0x27,
    0x05,0xac,0x0b,0x67,0x92,0xb8,0x1b,0x98,0xcc,0xe9,0x82,0xf2,0x89,0xeb,0xe1,0x0a,
    0x3c,0xec,0x7a,0xe8,0x87,0xf6,0x01,0xee,0xd4,0xf9,0x2a,0x06,0xff,0x0c,0xa0,0xce,
    0x6d,0xd4,0x1d,0x44,0x1d,0x89,0xd3,0xc0,0x9c,0x4e,0x06,0x75,0x25,0xff,0x2e,0xf6,
    0xf4,0xec,0x86,0xe0,0x0f,0xd9,0x7f,0x86,0xb3,0xca,0x9d,0xed,0xe4,0xcc,0x11,0xf4,
    0xfb,0x92,0xd7,0x11,0x35,0x33,0xc9,0x1f,0xcb,0x9a,0xe1,0x24,0xde,0xf4,0x51,0x8e,
    0xc4,0x4b,0x53,0xc0,0x26,0x71,0x3f,0xc7,0xf8,0x06,0x3d,0x9c,0xd9,0x80,0xfb,0x9b,
    0x11,0xb9,0xd7,0x65,0x8e,0xa6,0x81,0xaf,0xf1,0x6f,0xb9,0xaf,0x8f,0xd8,0x97,0xf5,
    0x04,0x7c,0xfb,0x14,0xde,0xbc,0x03,0xef,0x0d,0x03,0x6b,0x67,0x15,0xe9,0xfd,0x39,
    0xbc,0x93,0x01,0x47,0x72,0x5e,0x00,0x9f,0xe4,0x1c,0x39,0xc7,0x2b,0xf0,0x04,0x7f,
    0xc2,0x39,0x72,0xae,0xd7,0xc0,0xa5,0x8f,0x51,0xf4,0xb1,0xca,0x7b,0x82,0xbf,0xe1,
    0x6f,0x14,0xbd,0xc8,0xef,0x15,0x5e,0xa7,0x11,0x8f,0xa2,0xb6,0x78,0xf2,0x2d,0x6a,
    0x8f,0xa1,0xb6,0xcc,0xe4,0x1d,0xf0,0x61,0xce,0x91,0x3a,0xef,0x81,0xb5,0xa2,0xd6,
    0xb8,0xaa,0x25,0x7b,0x1f,0xf8,0x9b,0x80,0xb6,0xfc,0x7e,0x80,0xf7,0xfb,0x09,0xe7,
    0xec,0x61,0x1d,0xd1,0xfd,0x89,0xd8,0x53,0xf5,0x7f,0xa1,0x7e,0x95,0xaa,0xbf,0x04,
    0xfc,0x11,0x78,0xcb,0xe0,0x2e,0x29,0xad,0x15,0x68,0x91,0xd2,0x5a,0x85,0x56,0x42,
    0x69,0xad,0x01,0x77,0x5a,0xeb,0xe0,0xae,0x29,0xad,0x0d,0x68,0x19,0x95,0x27,0xc2,
    0x1b,0xf0,0xf7,0x43,0x60,0x44,0x16,0x97,0x77,0xf8,0x18,0x98,0x47,0x16,0x6f,0x55,
    0x79,0x79,0x64,0x7b,0x5e,0x57,0x58,0x3e,0x59,0x5c,0xf2,0xa5,0x5f,0x79,0x9f,0x85,
    0x64,0xfb,0x4d,0xa2,0x5f,0x99,0x59,0x11,0x59,0x5c,0x78,0x12,0x47,0xc8,0xce,0x51,
    0x70,0xc9,0x91,0xb7,0x59,0x42,0xf6,0x5d,0xde,0xe0,0x1c,0x79,0x93,0x65,0x64,0xb1,
    0x08,0x6d,0xcd,0xe2,0x33,0x66,0xd1,0xaf,0x66,0xf1,0x05,0xb8,0x3b,0xf7,0x57,0x70,
    0x8d,0xc2,0xbe,0x01,0x23,0x85,0x7d,0x07,0x66,0xef,0x2d,0x1c,0xbc,0xc7,0x19,0xbc,
    0xd9,0x0c,0xce,0xd6,0xc6,0xbe,0x98,0x81,0xa6,0x3b,0xf3,0x0f,0xec,0xc5,0x15,0x6f,
    0x56,0xf1,0x64,0x5f,0x78,0xb3,0xa8,0xeb,0x78,0x73,0xe0,0xc5,0x14,0x6f,0x5e,0xf1,
    0xe6,0xc0,0x9b,0x47,0x6f,0x8e,0xb7,0x00,0x5e,0xb3,0xe2,0x2d,0x2a,0xde,0x02,0x78,
    0x8b,0x98,0x85,0xbc,0x89,0x71,0xf8,0x76,0x42,0xf9,0x36,0x4a,0xff,0xfa,0xb6,0x8d,
    0x72,0x7d,0x7b,0x92,0x72,0x7d,0x7b,0x8a,0x2c,0xee,0x3c,0xd4,0x4e,0x96,0x2b,0xb8,
    0xd3,0x3a,0x4d,0xb9,0xbe,0x3d,0x43,0xb9,0xbe,0x4d,0x92,0xc5,0x9d,0x56,0x07,0x59,
    0x6e,0x52,0x69,0x75,0x52,0xae,0x6f,0xcf,0x91,0xc5,0x87,0xd4,0x5c,0xba,0xc8,0xe2,
    0xda,0xb7,0x29,0xb2,0xb8,0xf6,0xed,0x79,0xb2,0x3d,0x77,0xd0,0x16,0xd6,0x43,0x16,
    0x4f,0x29,0xdf,0x5e,0xfa,0x8f,0x6f,0x7b,0xc9,0xe2,0xce,0xb7,0x7d,0x64,0xe7,0xd8,
    0xab,0x7c,0x7b,0x39,0xcb,0xb7,0x57,0xc9,0x62,0x7d,0xea,0x4c,0x35,0x64,0x71,0xa3,
    0xee,0xb0,0x96,0xb6,0xee,0xb0,0x07,0x5e,0x13,0xac,0x46,0xf5,0x19,0x27,0xbb,0x17,
    0x57,0xf7,0x56,0x0f,0x2d,0x52,0x5a,0x09,0xa5,0x15,0x87,0x96,0x60,0xf5,0x4a,0xab,
    0x01,0x5a,0x31,0xa5,0xd5,0x08,0x2d,0xfd,0x06,0x9a,0x94,0x56,0x03,0xb4,0x04,0x93,
    0x5c,0xed,0xad,0xf1,0xac,0xff,0xbf,0xb2,0xfe,0xe1,0xae,0x8e,0xf3,0xf7,0x17,0xa8,
    0xe2,0xb6,0xea,0xb8,0x0a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform uimage2DArray src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 16;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= v . r;
//     destData[destOffset + 1]= v . g;
//     destData[destOffset + 2]= v . b;
//     destData[destOffset + 3]= v . a;
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint pixelBytes = 12;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     destData[destOffset]= v0 . r;
//     destData[destOffset + 1]= v0 . g;
//     destData[destOffset + 2]= v0 . b;
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
