// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x5f,0x68,0xd5,0x65,
    0x18,0xfe,0x9e,0x73,0xe6,0xd9,0xce,0x72,0x4d,0xc9,0xfe,0x58,0x69,0x5b,0x8e,0xd1,
    0xb6,0xe3,0xb6,0x8b,0x92,0x4e,0x87,0x09,0x82,0x51,0xd8,0xa8,0x44,0x4a,0xa2,0x19,
    0x9d,0xd1,0x4d,0x49,0xb5,0xfe,0x4c,0x12,0x5c,0x67,0x45,0x0e,0x46,0x05,0x6d,0xa3,
    0x9b,0x2c,0x23,0xca,0x9b,0x41,0x62,0xd8,0x9d,0xa1,0x57,0x82,0x81,0x81,0x37,0x81,
    0xd6,0xac,0x35,0xb4,0x36,0x74,0xba,0xbb,0xfe,0x11,0xf4,0xbe,0xbf,0xf7,0xf9,0xb6,
    0xd7,0x1f,0xbf,0x03,0x9f,0xdf,0x79,0x9f,0xef,0xfd,0xde,0x3f,0xcf,0xf7,0x3e,0x67,
    0xe6,0x73,0x9b,0xea,0x43,0x40,0x68,0x0c,0x0d,0xa1,0x31,0x17,0x92,0xcf,0xda,0x90,
    0x13,0x24,0x84,0x9b,0x42,0x21,0xd9,0x1f,0xe9,0xdf,0xd5,0xdf,0xfd,0xc6,0x9b,0x2f,
    0x74,0xdf,0xff,0x40,0xaf,0x9e,0xdf,0x1c,0xf2,0x89,0x9f,0x9e,0x35,0x8b,0xcf,0x2a,
    0xd9,0xeb,0x64,0xbd,0x5c,0x7d,0xf1,0x15,0xc5,0x5b,0x65,0xad,0x11,0xbc,0x2e,0x89,
    0x15,0x24,0xb2,0xad,0x24,0x96,0xa0,0xad,0x49,0xec,0x10,0xee,0x96,0xf5,0xa8,0xdc,
    0x2e,0x59,0xda,0xb0,0x89,0x7b,0xc4,0x40,0x6c,0xb5,0xc3,0x72,0xc4,0xd6,0x38,0x2c,
    0x4f,0xcc,0xc7,0xab,0x23,0xd6,0xe2,0xb0,0x55,0xc4,0xda,0x1c,0x56,0x20,0x76,0x5f,
    0x52,0x5b,0x7e,0x39,0x87,0xd6,0xd9,0x2f,0xfb,0xbd,0xac,0x29,0xda,0xad,0xce,0x3e,
    0xc0,0xfb,0x75,0x8c,0x37,0x92,0xea,0x43,0xe3,0x8d,0xb0,0x3e,0xf5,0xaf,0xa5,0xe2,
    0xd5,0x18,0x2f,0xf2,0x72,0x8d,0xbc,0xac,0x97,0x75,0x8b,0x54,0x91,0x4b,0xce,0xf3,
    0xc9,0x7d,0xfd,0x7e,0xab,0xf8,0x14,0xd8,0x53,0xa0,0xbd,0x9a,0xb6,0xc6,0xb8,0x5d,
    0xec,0x26,0xf2,0x95,0xa7,0xdd,0xcc,0x1a,0xa3,0xbd,0xce,0xd5,0xdc,0x22,0xff,0xb6,
    0x2c,0xbf,0x63,0x08,0x15,0xda,0xb1,0xa6,0x2e,0xe6,0x6b,0x63,0xbe,0x68,0xb7,0xf3,
    0xfc,0x36,0x89,0xda,0xc1,0xfc,0x1a,0xbb,0x53,0xf6,0x0e,0x97,0xab,0x8b,0xb9,0xb4,
    0xf6,0x8d,0xa1,0x98,0x70,0xdb,0x49,0xac,0x89,0x7b,0x5c,0x5d,0xac,0x67,0xb3,0xec,
    0x45,0x59,0x25,0xd6,0xa3,0x76,0x37,0xb1,0x2e,0xf6,0xdb,0xe3,0xea,0xef,0xe5,0x59,
    0xc1,0xd5,0x57,0x66,0x0d,0xd1,0xae,0xd0,0x3f,0xde,0xdf,0xce,0x9a,0xf4,0xfe,0xc3,
    0xbc,0xdf,0x94,0xf0,0x5e,0x0c,0x3b,0x18,0x0b,0xe1,0xc6,0x4f,0x8e,0x7d,0xea,0x9d,
    0xc7,0x88,0xed,0x60,0x8d,0x6a,0xf7,0x13,0xd3,0xbe,0x1f,0xe7,0x1b,0xe4,0x5c,0x0d,
    0xbb,0xed,0x18,0xd1,0x1e,0xa0,0x82,0xa2,0x5d,0xa5,0xa0,0x62,0x8d,0xc3,0xac,0x61,
    0x83,0x74,0x12,0xe7,0x6c,0x23,0xe7,0xe9,0x00,0xeb,0x78,0x9b,0x39,0x46,0x58,0x87,
    0xda,0x35,0x97,0x57,0xe3,0x8c,0xb2,0x2e,0xf5,0x3f,0xc8,0xb3,0x02,0xed,0x8f,0x99,
    0x43,0xed,0x75,0x72,0x72,0x88,0xf8,0xcf,0xe4,0xa4,0x93,0xfd,0xfc,0x22,0xfb,0x21,
    0xc7,0xa9,0xc6,0xbd,0x94,0xe2,0x78,0x91,0x1a,0x2f,0x89,0xa5,0xb3,0x74,0x8d,0xd8,
    0xe2,0xf2,0xbc,0xe4,0x93,0x7b,0x45,0x29,0x60,0x8b,0x68,0x25,0xc7,0x37,0x09,0x8c,
    0xf3,0x97,0x20,0xaa,0xcf,0x3f,0xc5,0xba,0x4e,0xfc,0x5f,0xf9,0xae,0xb3,0xb7,0xc4,
    0x73,0xdd,0xfb,0x38,0xd3,0x17,0x38,0xa7,0x43,0x9c,0xbb,0x9f,0x88,0x6d,0x93,0x28,
    0x5a,0xff,0x0c,0xe7,0x66,0x94,0x77,0xd4,0xe7,0x22,0xf1,0x93,0xe2,0xa3,0x3d,0xfd,
    0xca,0x7b,0x8a,0x7f,0x22,0x3e,0xda,0xe3,0x2c,0x71,0xad,0x63,0x8e,0x75,0xfc,0x23,
    0x67,0x8a,0xff,0x26,0x6b,0x8e,0xb5,0xe8,0xf7,0xbf,0x65,0xbf,0x4e,0x7b,0x8e,0xb9,
    0x75,0x1e,0x2f,0x33,0xf7,0x25,0xe6,0x56,0x7e,0x7e,0x27,0x3e,0x2d,0x3e,0x9a,0xe7,
    0x0f,0x62,0x15,0xe6,0x5a,0x70,0xb9,0xf4,0x6c,0x5e,0xd6,0x15,0xc6,0x9e,0x4f,0xde,
    0xdc,0xb4,0x0d,0x58,0x9f,0x3b,0x25,0x8e,0xc6,0xbd,0x83,0x36,0x5c,0xfe,0xf5,0xb0,
    0xfc,0x3d,0x2e,0xff,0x9d,0x30,0xfc,0x3d,0xde,0xbb,0x0b,0x76,0x57,0xf1,0x18,0x6b,
    0x03,0x63,0xe9,0x27,0xfa,0xdd,0x03,0xc3,0x2b,0x09,0x97,0x86,0xb5,0xc0,0x70,0xd5,
    0xd9,0x18,0xb1,0x56,0x18,0xee,0xfd,0xda,0x61,0x79,0xf4,0x4c,0x6b,0x53,0xad,0x75,
    0xb0,0xb6,0xed,0xac,0x4d,0x7b,0xea,0x84,0xe1,0x7a,0x4f,0xed,0x12,0xac,0x4f,0xc5,
    0xd5,0x47,0x75,0xb6,0x19,0xa6,0xb1,0x27,0x42,0x7d,0xa2,0xaf,0x1e,0x98,0x5f,0x89,
    0x42,0xd5,0x6d,0x50,0xee,0xeb,0xef,0x5b,0x2f,0xcc,0xbf,0x07,0x2b,0x9c,0x14,0x98,
    0x77,0xd8,0x71,0x52,0x0f,0xc3,0x63,0xff,0x0d,0xb0,0xbb,0xc1,0xf1,0x5b,0x24,0x06,
    0x87,0x35,0x12,0xcb,0x39,0x9e,0xb6,0xc0,0xe2,0xed,0x76,0x58,0x19,0xe6,0x3b,0xe0,
    0x38,0x79,0x08,0xe6,0x5b,0x76,0x6f,0xd1,0x07,0xcb,0x53,0x75,0x7e,0x5b,0x61,0xbe,
    0x7d,0x58,0xc1,0xb6,0xc1,0xf0,0x86,0xa4,0xaf,0x42,0xa2,0xe7,0x66,0x98,0xe6,0x47,
    0xc9,0xf7,0x56,0x99,0x25,0xc5,0xd4,0x57,0xe7,0x73,0x81,0x33,0x74,0x85,0x73,0x36,
    0x85,0x1b,0xb5,0xb5,0x13,0x76,0xae,0x7b,0x9c,0xb1,0x5d,0x6e,0xc6,0x54,0xb3,0x4f,
    0xc1,0xb0,0xc0,0xfa,0x14,0x7b,0x1a,0x86,0x0f,0x3b,0xbf,0x67,0xe8,0xa7,0xae,0x4f,
    0x4a,0x7d,0x1a,0xeb,0x59,0x98,0xaf,0x9e,0xa9,0xf6,0xf5,0x3d,0xf4,0x77,0x67,0x00,
    0xa6,0xdf,0x36,0xf7,0x1e,0x7b,0x60,0xf8,0x38,0xfb,0x7d,0x0e,0x86,0x55,0x9c,0x6e,
    0x9e,0x87,0xe1,0x65,0xf6,0x33,0x88,0x15,0xdd,0xe8,0x59,0x55,0xd6,0x20,0x7b,0xaa,
    0x92,0x83,0x29,0xda,0x83,0xee,0xad,0x3f,0xcd,0xd0,0xcd,0x67,0x19,0xba,0x39,0x0c,
    0xc3,0xe3,0x5b,0x7d,0x0e,0xbb,0x7b,0xd8,0xc5,0xfa,0x22,0x43,0x37,0x5f,0xc2,0xf0,
    0xb2,0x7b,0xd3,0xaf,0x60,0xb8,0xd7,0xcd,0x11,0x18,0xee,0x75,0x33,0x0d,0xcb,0x73,
    0xc4,0xe9,0xe6,0xeb,0x0c,0xdd,0x1c,0x85,0xe1,0x51,0x37,0xc7,0xc8,0xff,0x51,0xa7,
    0x9b,0x6f,0x52,0xba,0x39,0x0e,0xf3,0x3b,0x96,0xa1,0x9b,0x6f,0x61,0xfe,0xc7,0x5d,
    0xcc,0x13,0xb0,0x37,0xf4,0x31,0xbf,0x4b,0xc5,0x3c,0x09,0xf3,0x3b,0x91,0x11,0xf3,
    0x14,0xcc,0x5f,0x7d,0xe2,0x1b,0xbe,0xc4,0x37,0x6c,0xe3,0x1b,0x4e,0xba,0x37,0xd4,
    0xb3,0xbd,0xb2,0xf6,0xf1,0xcd,0xf6,0x3a,0x9e,0x5f,0x85,0xc5,0xf3,0xfa,0x1c,0x82,
    0xd5,0xed,0xb1,0xd7,0x88,0x79,0xcd,0xbe,0x4e,0xcc,0x6b,0xf6,0x34,0x2c,0xa6,0xd7,
    0xec,0x19,0x98,0xaf,0xd7,0xec,0xf7,0x30,0xdf,0x33,0x6e,0x0e,0xce,0xc2,0xf2,0x78,
    0xcd,0xfe,0x00,0xf3,0x3d,0xeb,0x34,0x7b,0x0e,0x86,0x0f,0x39,0xcd,0x0e,0x3b,0xcd,
    0x4e,0x53,0xb3,0x8a,0x9d,0xe3,0xbc,0x4e,0xb2,0xf7,0x7d,0x8e,0xb3,0xb7,0xc8,0x59,
    0x3b,0x39,0x9b,0x70,0x9c,0xe9,0xd9,0x7e,0x59,0x63,0xbc,0xb7,0xdf,0x71,0x56,0xcb,
    0xe0,0x62,0xd4,0x71,0x11,0xb1,0x77,0x32,0xb8,0x7d,0x97,0x18,0x1c,0x3f,0x3f,0xc2,
    0x70,0xcf,0xd9,0x79,0xd8,0x7d,0xcf,0xd9,0x05,0x98,0xef,0x79,0xc7,0xd9,0x0c,0x2c,
    0xb7,0xe7,0xec,0x22,0xcc,0x77,0xc6,0x71,0x36,0x0b,0xc3,0x6b,0x8e,0xb3,0x83,0x19,
    0x9c,0x29,0x36,0x4b,0xce,0x26,0xd8,0xfb,0x98,0xeb,0x7d,0x3c,0xa3,0xcf,0xf7,0x33,
    0xfa,0xfc,0xc0,0xf5,0x19,0xb1,0x0f,0x89,0xf9,0x79,0xb9,0x0c,0xc3,0x7d,0xef,0xf3,
    0xb0,0xfb,0xbe,0xf7,0x05,0x98,0xef,0xbc,0xeb,0xfd,0x2a,0x2c,0xb7,0xef,0x7d,0x11,
    0xe6,0x7b,0xd5,0xf5,0xbe,0x04,0xc3,0xc7,0x5d,0xef,0x1f,0x65,0xf4,0xae,0xd8,0x52,
    0xaa,0xf7,0x89,0xd4,0xfc,0x4c,0xa6,0x7e,0xff,0xa6,0x52,0x7f,0x13,0x16,0x52,0xff,
    0x87,0xd1,0xfd,0x3f,0x61,0xe1,0x41,0x59,0xff,0x03,0xc7,0x69,0x54,0xaa,0x18,0x0e,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba8ui)uniform uimage2D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = 0;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord . xy). rgb;
//
// }
//
// uint makeUint(uvec4 v)
// {
//     return v . a * 0x1000000u + v . b * 0x10000u + v . g * 0x100u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 4;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 4;
//     uint pixelBytes = 3;
//
//     if(remainder == 3)
//     {
//         return;
//     }
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     uvec3 v1 = fetchSrc(srcCoord1);
//
//     if(remainder == 0)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . rgb, v1 . r));
//     }
//     else if(remainder == 1)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . gb, v1 . rg));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . b, v1 . rgb));
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
