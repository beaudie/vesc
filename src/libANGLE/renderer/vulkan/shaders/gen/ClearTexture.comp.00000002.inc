// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x92,0xdb,0x4e,0x53,0x51,
    0x10,0x86,0x17,0x7b,0xd7,0x0a,0x16,0x84,0xda,0x52,0x2b,0xd9,0x82,0x50,0x95,0x0b,
    0x0a,0x45,0xa0,0x46,0x43,0xa8,0x20,0x27,0x2f,0xb8,0xf3,0x09,0x4c,0xb8,0xe1,0x42,
    0x43,0x82,0x4f,0x60,0x8c,0x89,0x2f,0xe5,0x85,0xd1,0x67,0xe2,0x60,0x4c,0xfc,0x67,
    0xd6,0xb7,0xcc,0x0a,0x3b,0x99,0xcc,0x9e,0x7f,0xfe,0x39,0xae,0x29,0x8b,0xde,0xdd,
    0x10,0xc6,0xc2,0xbd,0x30,0x1e,0x8e,0x43,0xfc,0x9a,0xa1,0x10,0x12,0x42,0x23,0xd4,
    0x5d,0x1f,0x9f,0xbc,0x3f,0x59,0xbb,0xf8,0x7c,0xba,0xb6,0x35,0x5c,0x37,0xff,0xfd,
    0x50,0x3a,0xcf,0x7c,0xd3,0xe2,0xdc,0x91,0xae,0x49,0x3e,0x7e,0x38,0xfb,0x14,0x3c,
    0x2e,0x84,0x19,0xe1,0x35,0xcf,0x65,0xff,0x91,0xeb,0xb9,0x84,0x36,0xe0,0x54,0xd8,
    0x0f,0xa4,0xeb,0xe4,0x78,0xa7,0x6c,0x2d,0xfa,0xe8,0xa1,0x13,0x36,0x06,0x36,0xe3,
    0x71,0xa5,0x63,0x05,0x39,0x36,0x6e,0xe5,0xd8,0xbc,0x95,0xc3,0xf8,0x86,0x95,0xf0,
    0x87,0xd2,0x4b,0xff,0x7d,0xd1,0x5e,0xcc,0xec,0x03,0x7a,0x7c,0x24,0x69,0xa9,0x4a,
    0xe1,0xfe,0xd2,0xe3,0xed,0x7f,0x56,0x1c,0xab,0xf7,0x84,0x98,0x87,0xb2,0x27,0xe8,
    0xa1,0x74,0xbc,0xa6,0x9d,0xc6,0x9e,0x0d,0xdf,0xc6,0x6e,0x80,0xad,0x10,0x3f,0x49,
    0xbc,0xf1,0xa7,0xf0,0xd5,0x33,0x7f,0x93,0x99,0xaa,0x6c,0x4f,0x86,0xcd,0xcb,0xb6,
    0xf9,0x13,0x66,0xf1,0x6d,0x6a,0xb5,0xa8,0xd7,0xf6,0x3e,0x23,0x66,0xfd,0x76,0xe8,
    0x37,0xd5,0xef,0x78,0xdf,0xd1,0xb6,0xf8,0x2e,0x5c,0xcb,0xd7,0xd1,0x14,0x15,0xfc,
    0xd4,0xcb,0x02,0xb3,0xb5,0xb5,0x81,0xa7,0x19,0xde,0x97,0x8c,0x67,0x39,0x07,0xcc,
    0xf4,0x58,0xec,0xf4,0x2e,0xf3,0xec,0x7f,0x83,0x5a,0x5b,0xec,0x71,0x93,0x5e,0xcd,
    0x1e,0x82,0xa5,0xbc,0xdb,0x92,0x2e,0xfc,0x5d,0x7c,0xf9,0x6e,0xde,0x72,0x0b,0xc9,
    0xde,0x67,0x96,0xbe,0x2c,0x9b,0xe3,0x00,0xce,0x3e,0xf2,0x52,0x77,0x51,0xb0,0xcf,
    0xc0,0x2c,0x57,0x42,0xec,0x7e,0x2f,0x65,0x1d,0x82,0xff,0xd1,0xbf,0xbd,0xcb,0x11,
    0x7e,0xd3,0x7b,0x62,0x4d,0xf9,0xed,0xc7,0x37,0x34,0xff,0x0e,0x75,0xa7,0xc1,0x8d,
    0xd3,0xe5,0x66,0x66,0xd9,0x6d,0xe2,0xcc,0x81,0x9f,0xcb,0xae,0x7c,0x37,0x31,0xee,
    0xab,0x62,0xd2,0x1d,0xcd,0xb1,0xe3,0x6f,0x60,0x8b,0xe0,0xcd,0x2c,0x6e,0x09,0x7c,
    0x52,0x8c,0x8a,0xfb,0x4e,0x37,0x66,0xbe,0x1f,0x8a,0xb5,0xb7,0x79,0x46,0x8d,0x1e,
    0xb3,0x2d,0x33,0xdb,0x8d,0xf2,0x98,0xef,0xb9,0x64,0x99,0xf9,0xec,0xff,0x5a,0xfa,
    0x10,0xdb,0xf0,0xef,0xf4,0xb0,0x42,0x9f,0x0b,0x59,0xaf,0xab,0xe0,0x7d,0x9f,0xb9,
    0xee,0x33,0xaf,0x33,0xf3,0x00,0x49,0x73,0xbf,0xc0,0xf7,0x93,0xd8,0xd7,0x60,0x96,
    0xe3,0x0b,0xd8,0x0e,0x6f,0x6d,0xd8,0x2f,0xb0,0x11,0x3c,0xf3,0xfd,0x06,0x7b,0x43,
    0xfc,0x88,0xba,0xbb,0xae,0xe3,0xdd,0x0c,0xe8,0x73,0xa4,0x59,0xf7,0xe0,0xe6,0x33,
    0x99,0xfe,0xab,0x4d,0xbd,0x92,0xfc,0x03,0x1a,0x50,0x6d,0x11,0xf4,0x04,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//  uint data[4];
//  uint texelCount;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//  uint texelCount = params . texelCount;
//
//  if(threadId >= ceil(texelCount * 3 / 4))
//  {
//   return;
//  }
//
//  uint shift =(threadId % 3)* 8;
//  uint byteData = params . data[0];
//
//  dataBuffer[threadId]=(byteData >> shift)|(byteData <<(24 - shift));
//
// }
