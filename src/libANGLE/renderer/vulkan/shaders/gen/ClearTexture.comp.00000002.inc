// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0x6b,0x4f,0x53,0x41,
    0x10,0x86,0x97,0xb6,0x1c,0xd0,0x16,0xb9,0x95,0x02,0x42,0x2b,0xb6,0x15,0xd1,0x62,
    0x43,0x4c,0x8b,0x97,0x52,0x88,0x91,0x5b,0x6a,0x49,0x30,0x45,0x48,0x0c,0x22,0x55,
    0xbf,0xf8,0x41,0x63,0xa2,0x3f,0xc1,0x98,0xf8,0x57,0xfc,0x11,0x7e,0x30,0xfa,0x9b,
    0xbc,0xc5,0xc4,0x99,0x3d,0xcf,0x92,0xc9,0x09,0x4d,0x36,0xbb,0xf3,0xce,0x3b,0x33,
    0xef,0xcc,0xee,0x69,0x3a,0x55,0x19,0x72,0x6e,0xc0,0x5d,0x74,0xc3,0xee,0xa5,0x8b,
    0x7f,0xe3,0x2e,0x25,0x88,0x73,0x59,0x17,0xf9,0x7d,0xa7,0xdb,0xeb,0xd6,0xdf,0x7f,
    0x78,0x55,0x6f,0x34,0x57,0xd4,0x7f,0xc9,0xa5,0x3d,0x4f,0x7d,0xa3,0xc2,0x19,0x94,
    0x3d,0x23,0xeb,0x4d,0xff,0xf5,0x5b,0xe7,0xe3,0x9c,0x1b,0x13,0x3c,0xe3,0x73,0xe9,
    0x39,0xe6,0xfa,0x5c,0x82,0x66,0xe1,0xcc,0x63,0x4f,0xc9,0x1e,0x91,0x63,0x57,0xb2,
    0x15,0xd0,0x51,0x61,0x0f,0xd8,0x00,0xd8,0x98,0xc1,0x52,0x60,0x79,0x83,0xa5,0xc1,
    0xaa,0x06,0xcb,0x80,0x2d,0x19,0x6c,0x10,0x6c,0xd9,0x60,0x11,0xd8,0x8a,0xc1,0x86,
    0xc0,0x1a,0x5e,0x6f,0xfa,0xac,0xae,0x6a,0x5f,0x4b,0x68,0x6f,0x27,0xb4,0x2b,0xbf,
    0x8d,0x26,0xe5,0x6f,0xc8,0x5e,0x3e,0xf3,0xc5,0xf6,0x55,0x63,0x9f,0x32,0x9b,0x59,
    0x59,0x93,0x52,0x25,0xe5,0xfd,0x69,0x1f,0xaf,0xe7,0x29,0xe1,0x68,0xbd,0x05,0x62,
    0xa6,0xc5,0xbe,0x80,0x86,0xb4,0xc7,0x33,0x72,0x97,0xf1,0xac,0x14,0x6f,0x61,0x67,
    0xc1,0x6a,0xc4,0xe7,0x88,0x57,0xfe,0x08,0x3e,0xc5,0x0b,0x92,0x65,0x9c,0xfc,0x9a,
    0x7b,0x92,0x3b,0xcc,0x98,0xd8,0x3c,0xf6,0xbc,0xb9,0x3b,0xc5,0x4a,0x52,0xa9,0xe0,
    0x75,0xc7,0x58,0xf0,0x25,0x97,0xd6,0x9c,0x46,0x5f,0x01,0x8d,0x6a,0xcf,0x80,0x69,
    0x8f,0xb3,0x68,0x08,0x9a,0xd5,0xbe,0xcc,0x9d,0x69,0xfc,0x1c,0xdc,0xc8,0xf8,0x4b,
    0x09,0xbb,0xcc,0xdd,0x05,0xdd,0x8b,0xcc,0x28,0x2f,0x93,0xac,0x19,0x5e,0x83,0xd9,
    0x06,0xbb,0xc9,0x6c,0x8a,0xc2,0x0e,0xf7,0x5b,0xe2,0x1e,0xd7,0xa8,0xbf,0x4e,0x4c,
    0x1b,0xfd,0x6a,0x6f,0x24,0xf2,0x3c,0xa4,0x27,0xe5,0x6f,0xe3,0x8b,0x8c,0x9e,0x4e,
    0xa2,0xbf,0x7d,0x59,0xc3,0xc6,0xee,0xf1,0xd6,0x03,0xff,0x39,0xf6,0xb2,0x58,0xda,
    0xfb,0x29,0x58,0x87,0xb5,0x2a,0xd3,0x49,0x71,0x37,0x8e,0x5e,0x7f,0x09,0xa2,0x33,
    0xfb,0x29,0x56,0x1f,0xfc,0xaf,0x9c,0xf5,0xfe,0x5f,0xe0,0xd7,0xfd,0x81,0xb0,0x46,
    0xfc,0xb7,0x1d,0xbf,0x95,0x9c,0xef,0x2d,0xae,0x3b,0x0a,0xfe,0x4e,0x6c,0x7d,0x0b,
    0x13,0x60,0x1a,0x33,0xc7,0x77,0x3c,0xc3,0xfd,0x84,0x98,0x22,0x78,0xe0,0x5c,0x81,
    0x53,0x32,0x9c,0x05,0xf0,0x8f,0xc2,0x89,0xf8,0x0e,0x8a,0xe0,0x21,0xae,0x42,0x5c,
    0xd9,0xc4,0x55,0xc1,0x43,0xdc,0x35,0x62,0xab,0x06,0xbb,0x0e,0xae,0x77,0xfe,0x09,
    0x6c,0x09,0x3c,0x6f,0x7a,0xb9,0x01,0x9e,0x13,0x86,0xda,0x37,0xcd,0xb7,0xa3,0xbe,
    0xaf,0x12,0x5b,0xe3,0x3f,0x62,0x02,0xbf,0xce,0xb2,0xce,0x2c,0xff,0x48,0x1e,0xf5,
    0xdd,0x92,0x55,0x67,0x9e,0x7a,0xfe,0x2d,0x7b,0x1f,0x5b,0xf1,0xcf,0x68,0xb8,0xcd,
    0xec,0x16,0x7d,0x8f,0x91,0xef,0x71,0x95,0x1e,0x1b,0xbc,0xbd,0xd0,0xe7,0x1d,0x7c,
    0x5f,0xd0,0x70,0x8f,0xf8,0x1c,0x1a,0x5a,0x46,0x83,0xfa,0xee,0xfb,0xff,0xa0,0xb8,
    0xa6,0x9e,0xbf,0x53,0x73,0x93,0x5c,0xfa,0x1e,0x7f,0x80,0x6d,0x81,0x6d,0xa2,0x63,
    0xdb,0xff,0xff,0xc4,0x6f,0xb8,0x89,0xc6,0x75,0xa9,0xb1,0x03,0x57,0xfb,0x69,0x91,
    0x7b,0xd7,0x68,0x7a,0x84,0xa6,0x0e,0x9a,0xf6,0x8c,0x26,0xf5,0x75,0x65,0x1d,0x11,
    0xa7,0xe7,0x6f,0xd4,0x7f,0x4c,0xfd,0x7d,0xa3,0xf3,0x00,0xac,0x67,0x74,0x3e,0x81,
    0x7b,0x60,0x74,0x1e,0x9e,0xa3,0xf3,0x10,0xae,0xea,0xdc,0xa3,0xde,0x91,0xa9,0xf7,
    0xd4,0xe4,0x0e,0xf5,0x8e,0x8d,0x86,0x50,0xef,0x19,0xdc,0x63,0x53,0xef,0xe4,0x9c,
    0x7a,0x27,0x70,0x6d,0xbd,0xbd,0xc4,0x9c,0x5a,0x89,0x77,0xa0,0xfb,0x3f,0x79,0x5d,
    0x77,0x65,0xfd,0x07,0x1f,0xee,0x5d,0x49,0x78,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth * 3 / 4))
//  {
//   return;
//  }
//
//  uint shift = threadId % 3;
//  uint byteData = params . rawData[0];
//  if(shift == 0)
//  {
//   dataBuffer[threadId]=(byteData)|(byteData << 24);
//  }
//  else if(shift == 1)
//  {
//   dataBuffer[threadId]=(byteData >> 8)|(byteData << 16);
//  }
//  else
//  {
//   dataBuffer[threadId]=(byteData >> 16)|(byteData << 8);
//  }
//
// }
