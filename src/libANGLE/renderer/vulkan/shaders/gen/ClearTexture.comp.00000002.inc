// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4e,0x53,0x41,
    0x14,0x86,0x87,0xee,0xb2,0x41,0x5b,0xe4,0x54,0x0a,0x08,0x54,0x6c,0x2b,0xa2,0xc5,
    0x86,0x48,0x2d,0x48,0xc5,0x84,0x18,0x4e,0x52,0xf4,0xc2,0x27,0x30,0xf1,0xc6,0x0b,
    0x8d,0x89,0x3e,0x81,0x31,0x26,0xbe,0x94,0x17,0x46,0x9f,0xc9,0x53,0x4c,0x5c,0xff,
    0xec,0x6f,0xc8,0x4a,0x49,0x26,0xb3,0xd7,0xb7,0xd6,0x3f,0xb3,0x0e,0x53,0xb2,0x52,
    0x6b,0x22,0x84,0xb1,0x70,0x35,0x4c,0x86,0xe7,0xa1,0xf8,0x9b,0x0d,0x25,0x23,0x21,
    0x54,0x42,0x1e,0xf7,0x93,0xe1,0x8b,0x61,0xf7,0xfd,0x87,0x57,0xdd,0xde,0x83,0x6d,
    0xf9,0xaf,0x85,0x2c,0xc6,0xc9,0x37,0x6d,0x31,0xe3,0xb6,0x97,0x6d,0xbd,0x79,0xf9,
    0xfa,0x6d,0x88,0xba,0x10,0x66,0x8c,0x97,0xe3,0x59,0xfa,0x2e,0x62,0xe3,0x59,0x46,
    0x2b,0xc4,0xac,0x62,0x2f,0xd8,0x9e,0x73,0xc6,0xa9,0x9d,0x56,0x27,0x8f,0x16,0x7b,
    0x62,0x63,0xb0,0x19,0xc7,0x4a,0xb0,0x9a,0x63,0x19,0xac,0xed,0x58,0x19,0xb6,0xe9,
    0xd8,0x38,0x6c,0xcb,0xb1,0x1c,0xb6,0xed,0xd8,0x04,0xac,0x17,0xf3,0xcd,0x2e,0xef,
    0x55,0xee,0xfb,0x23,0xb9,0x0f,0x46,0x72,0x57,0xfc,0x80,0x9c,0x14,0x7f,0x60,0x7b,
    0xf3,0xd2,0x57,0xd8,0x37,0x9d,0x3d,0xa4,0x37,0xcb,0xb6,0xe6,0xed,0x96,0x52,0xf4,
    0x67,0x51,0xaf,0xef,0x05,0x8b,0xd1,0x7d,0xeb,0x68,0x16,0xcd,0xbe,0x42,0x0e,0x59,
    0xe4,0x65,0x9b,0x65,0xd1,0x2b,0xf1,0x01,0x76,0x05,0xd6,0x41,0x5f,0x45,0xaf,0xf8,
    0x29,0x7c,0xe2,0x75,0x3b,0x65,0x96,0xf3,0x75,0xf6,0x3c,0x33,0x2c,0x3b,0x6d,0x0d,
    0x7b,0xd5,0xcd,0x4e,0xac,0x61,0x37,0xd5,0x63,0xde,0x05,0x4b,0xbe,0xd1,0xa5,0x3b,
    0x17,0xc9,0xaf,0x4e,0x8e,0xb2,0x97,0x60,0xaa,0x71,0x99,0x1c,0x52,0xce,0xb2,0xaf,
    0x33,0x33,0xe9,0x57,0x88,0xcd,0x9d,0xbf,0x31,0x62,0x37,0x99,0x5d,0xca,0x7b,0x83,
    0x1e,0xd5,0xac,0x93,0x1d,0xc7,0x77,0x6c,0x4d,0x3a,0x5d,0x9f,0x5e,0x27,0x7b,0x97,
    0x5e,0xad,0x99,0x3a,0xcd,0xbb,0xc1,0x5c,0xf7,0xc9,0xe7,0x11,0x9a,0x01,0xf5,0xc8,
    0x3e,0x70,0xe7,0x48,0xf3,0x84,0x1a,0x15,0x7f,0x8a,0x2f,0x77,0xfe,0xa7,0xbc,0xed,
    0x64,0x9f,0x53,0xff,0x96,0x59,0xaa,0x75,0x48,0xcc,0x39,0xab,0x6f,0xdd,0x28,0x31,
    0x8b,0x40,0x6d,0xbf,0x8c,0xa8,0x47,0x3f,0xcd,0xba,0x80,0xff,0xb5,0x6f,0xcd,0xfb,
    0x19,0x7e,0xed,0x87,0x16,0x35,0x15,0x7f,0xcb,0xc5,0xdb,0xa8,0xc6,0x7c,0x8b,0x7b,
    0xa7,0xe1,0xef,0xcc,0xd6,0xec,0xe7,0x60,0xd2,0xac,0xf0,0xbb,0x5d,0x62,0x1e,0x49,
    0xb3,0x06,0x4f,0x31,0x37,0x88,0x69,0xb8,0x98,0x75,0xf8,0x27,0x8b,0xc9,0x79,0xf7,
    0x6b,0xf0,0xa4,0x6b,0xa1,0x6b,0x3a,0x5d,0x1b,0x9e,0x74,0xb7,0xd0,0xb6,0x1d,0xbb,
    0x0d,0xd7,0x8c,0x3f,0xc3,0x36,0xe1,0x35,0x57,0xcb,0x1d,0x78,0xd5,0x22,0x64,0xdf,
    0x75,0xbf,0x15,0xf9,0xbe,0x9a,0xb6,0xc3,0xff,0x84,0x39,0xfc,0xea,0x65,0x97,0x5e,
    0xfe,0xb1,0x73,0xe4,0xbb,0x67,0xab,0x4b,0x3f,0xf5,0xfd,0xdb,0xf6,0x0b,0x6c,0xf1,
    0x2f,0xe4,0x70,0x9f,0xde,0x6d,0xb8,0x5c,0x7b,0xf0,0x9d,0x58,0x77,0x1e,0xeb,0xde,
    0xa3,0xee,0x3e,0xef,0x2d,0xd5,0xfe,0x10,0xdf,0x37,0xb4,0x87,0x30,0x9d,0xf1,0x11,
    0x76,0xc4,0xdb,0x12,0xfb,0x0e,0x3b,0x26,0x4e,0xbe,0x1f,0xb0,0x13,0xf4,0xc7,0xdc,
    0xab,0x37,0x78,0xc6,0x3b,0xdd,0x25,0xcf,0xc7,0x56,0xeb,0x19,0xb1,0xbe,0x26,0xed,
    0xff,0xac,0x53,0x7b,0xb6,0xfe,0x03,0x69,0x66,0xed,0x83,0x34,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth * 3 / 4))
//  {
//   return;
//  }
//
//  uint shift =(threadId % 3)* 8;
//  uint byteData = params . rawData[0];
//
//  dataBuffer[threadId]=(byteData >> shift)|(byteData <<(24 - shift));
//
// }
