// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000022.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000022[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x97,0xeb,0x6f,0x95,0x45,
    0x10,0xc6,0xdf,0x3d,0xa7,0x17,0x28,0xb7,0xc2,0xc1,0x0b,0xd0,0x40,0x0b,0x2d,0x82,
    0xd4,0x16,0x2b,0x37,0x29,0x07,0xac,0x05,0x5a,0x02,0xb4,0xb4,0x95,0x08,0x62,0x35,
    0x08,0x8a,0x60,0x28,0x77,0x50,0x21,0x62,0x14,0x83,0x21,0x01,0x85,0x84,0x48,0x04,
    0x95,0x46,0x94,0x46,0x85,0x48,0xe4,0x43,0x41,0xe0,0x8b,0x20,0xd2,0xc4,0x10,0x34,
    0x48,0x13,0xa5,0x89,0xd2,0xc0,0x5f,0x40,0xa8,0x10,0xc4,0x9d,0xdd,0xdf,0xf6,0x4c,
    0x4e,0xc4,0x26,0xcb,0x7b,0xe6,0x99,0xdb,0x33,0xb3,0xb3,0xfb,0xbe,0xc4,0x63,0x23,
    0xb2,0xa3,0xc8,0x44,0x39,0x51,0x8f,0xe8,0x19,0x13,0xb9,0xbf,0xfe,0x51,0x2c,0x32,
    0x3c,0xcb,0xec,0xb3,0x57,0x94,0xe5,0xe4,0xaa,0x39,0x0d,0x73,0x4a,0xd6,0xad,0x5f,
    0x5a,0x32,0x6e,0xfc,0x58,0xb1,0xeb,0x1b,0xc5,0x9d,0xbd,0xe8,0xfa,0x45,0xd9,0x51,
    0x86,0x7d,0xca,0x5a,0xb9,0x78,0x79,0x93,0xe0,0x23,0xed,0xba,0x61,0x57,0xae,0xb5,
    0x13,0x3c,0x5b,0x62,0xd8,0x5f,0x23,0x5d,0x4c,0xf1,0x89,0xa2,0xea,0x28,0x33,0x2a,
    0xf6,0x69,0xa3,0x11,0x3c,0x03,0x66,0xc0,0x7a,0x28,0x2c,0x06,0x96,0xab,0xb0,0x38,
    0xd8,0x40,0x85,0x65,0x80,0x3d,0xac,0xb0,0x4c,0xb0,0x3c,0x85,0x65,0x81,0xe5,0x2b,
    0x2c,0x1b,0xac,0x50,0x61,0x3d,0xc0,0x46,0x29,0xac,0x27,0x58,0xb1,0xc2,0x72,0xc0,
    0xc6,0x2a,0xac,0x17,0xd8,0x38,0x85,0xf5,0x06,0x9b,0xa4,0xb0,0x3e,0x60,0x53,0x5c,
    0x9f,0xe2,0xdd,0xf5,0x4a,0xcf,0x16,0xd9,0xe7,0x70,0xfa,0x13,0xe4,0x02,0x25,0x4b,
    0x9f,0x87,0x22,0x27,0xac,0x57,0xcc,0xe9,0xe3,0xae,0x37,0xf2,0xfb,0x41,0xfb,0x2b,
    0x8b,0x3a,0xc7,0x58,0xfb,0x2c,0xf2,0xe5,0x95,0xcc,0x2d,0x1f,0x68,0x2d,0xfa,0x2a,
    0x3c,0x61,0x57,0x7d,0x6b,0x4d,0x45,0x90,0xa5,0x87,0xf3,0xe7,0x5f,0x9e,0x1a,0xe4,
    0xc1,0x76,0x25,0x73,0xb6,0x4f,0x0b,0xb2,0xf4,0xf3,0x68,0xd5,0xe2,0xe4,0x03,0x56,
    0xce,0x27,0x87,0xec,0xdd,0x43,0x56,0x2e,0x40,0x8e,0x21,0x17,0xd2,0xf3,0x0c,0x87,
    0x67,0x44,0x45,0xd8,0x0a,0x5e,0x8e,0x3c,0x52,0xf9,0x3f,0x82,0xbd,0xf8,0x4b,0xfc,
    0x31,0xc4,0x8b,0x5c,0xbd,0xb9,0xae,0x47,0x05,0xac,0xfc,0xee,0xfa,0xfe,0x7f,0xe5,
    0x77,0x3f,0x33,0xa2,0xc7,0xd8,0xc7,0x62,0xf2,0x8b,0x5c,0x02,0x36,0x86,0x7a,0x4a,
    0xe1,0x23,0xf6,0x63,0xd1,0x15,0x28,0xfd,0x04,0x55,0xcf,0xc4,0x6e,0x5f,0xaf,0x97,
    0xe7,0x64,0xf8,0x06,0xfb,0x4a,0x66,0x31,0xe8,0x67,0x11,0x3f,0xe8,0x6b,0xd8,0x9b,
    0x41,0x36,0xd2,0x02,0x55,0xbf,0xfe,0xe3,0xa8,0x46,0x43,0xec,0xbe,0x2e,0xb4,0xcf,
    0x05,0xe4,0x7f,0x0e,0x7c,0x21,0xf5,0x88,0xbc,0x28,0x2d,0x7f,0x63,0x9a,0xbc,0x84,
    0x33,0x24,0xfe,0x4b,0xe1,0x9f,0x4f,0xff,0x5f,0x25,0x7f,0x1c,0xb9,0x09,0x5d,0x5c,
    0xf9,0xaf,0x85,0x5f,0x90,0x37,0x71,0x0e,0x82,0xbc,0x93,0x18,0x41,0x3e,0xc0,0x19,
    0x0b,0xf3,0x73,0x48,0xf1,0x11,0xf9,0x98,0x93,0xb6,0x56,0x4a,0xbe,0xe3,0xf4,0x32,
    0x43,0xf9,0x9f,0xe0,0x3c,0x06,0xf9,0x5c,0xda,0x7e,0x5d,0xe2,0x7c,0x49,0x3d,0xd7,
    0xe1,0x7a,0x9c,0x7e,0x5c,0xe7,0x4e,0x8a,0xbb,0x7d,0xcb,0x74,0xbc,0x33,0xc8,0x2f,
    0x58,0x97,0x45,0x64,0x6f,0x92,0xcc,0xea,0x28,0xe6,0xb1,0xd6,0x32,0x96,0x59,0x1c,
    0x0d,0x36,0x4a,0xed,0x43,0x13,0x73,0xfe,0x28,0xfa,0x0a,0x1b,0x41,0xe6,0xe4,0x71,
    0x66,0xa9,0x94,0x78,0x62,0x53,0x06,0xfe,0x8e,0xb5,0x11,0xf9,0x09,0xfc,0xca,0xf0,
    0x9b,0xc8,0x9d,0x50,0xc2,0x5c,0x25,0x99,0x91,0x27,0xc1,0xbf,0xb6,0x36,0x7d,0x5d,
    0x2d,0x1e,0x93,0xd9,0xba,0x65,0x99,0x27,0xe1,0x73,0xdb,0xda,0x97,0x73,0x87,0x24,
    0xa9,0x47,0x7e,0xd7,0x59,0x3f,0xe9,0xcd,0x53,0xe4,0x94,0xbf,0xb7,0xe8,0x57,0x05,
    0x78,0xbd,0xed,0xbe,0x70,0x1a,0x6d,0x3c,0x16,0xec,0xfe,0xb6,0x31,0x42,0x2c,0x79,
    0xde,0xb4,0xbd,0x10,0xbb,0xa7,0x8d,0xb7,0xc9,0xc4,0x67,0x8a,0xaa,0x61,0x3a,0x35,
    0x54,0xaa,0x1a,0x66,0x80,0x87,0x1a,0x66,0x82,0x85,0x1a,0xaa,0x55,0x0d,0x33,0xdd,
    0xbd,0x16,0x39,0x4c,0xf2,0x56,0xa9,0x1a,0x66,0x93,0xdb,0xa8,0x1a,0xe6,0x80,0x87,
    0x1a,0x8a,0x8d,0xc7,0x82,0x9d,0xd4,0x10,0x62,0x55,0xab,0x1a,0x2a,0x8d,0xb7,0x49,
    0xe2,0x53,0xa5,0x6a,0xa8,0xa5,0x86,0x1a,0x55,0xc3,0x3c,0xf0,0x50,0x43,0x1d,0x58,
    0xa8,0xa1,0x41,0xd5,0x50,0xe7,0xf8,0x44,0x0e,0x93,0xbc,0xf5,0xcc,0x91,0xe4,0x9d,
    0x4f,0xee,0x4a,0x93,0x3a,0xcb,0xc2,0x31,0xd8,0x36,0x28,0x8e,0xd3,0xb1,0xab,0xc6,
    0xaf,0x1e,0x3e,0x72,0xc6,0x9f,0xe7,0x7c,0x87,0x99,0x7b,0x01,0xce,0x8d,0x6a,0xe6,
    0x5e,0x04,0x7f,0x9b,0x99,0x5b,0x0c,0x26,0x71,0x57,0x71,0xc7,0xbe,0x04,0x2e,0x71,
    0xe4,0x0e,0x78,0x99,0x38,0x4b,0x88,0x23,0x3d,0x7e,0x05,0x7c,0x15,0xe7,0x74,0x19,
    0x98,0xec,0x8b,0xc8,0xcb,0x89,0x13,0x29,0x6c,0x05,0x98,0x71,0x7d,0xca,0x72,0xf7,
    0xc9,0x6b,0xd8,0xae,0x20,0xc6,0x52,0x1b,0x4f,0xee,0xaf,0x95,0xd4,0xb3,0xcc,0xfa,
    0x36,0xb9,0x3c,0x1e,0x6b,0x24,0xa7,0xf8,0xae,0x06,0x7f,0xdf,0xda,0x88,0xbc,0x86,
    0x78,0xab,0x15,0xf7,0x75,0x70,0x5f,0xab,0xb8,0xaf,0x07,0x0f,0xdc,0x37,0x80,0x3d,
    0x6b,0x7b,0x2c,0xe7,0x7c,0x23,0xb9,0xd7,0xc0,0x75,0x83,0x9a,0x83,0xd7,0x89,0xb7,
    0x49,0xcd,0xc1,0x1b,0xe0,0x61,0x0e,0xde,0x04,0x0b,0x73,0xb0,0x45,0xcd,0x81,0xe8,
    0x36,0xdb,0xb5,0x85,0xbd,0xdd,0xac,0xfa,0xb3,0x95,0xdc,0x11,0x7e,0x86,0x61,0xb8,
    0x63,0x7f,0x4f,0x76,0x33,0xe0,0x7d,0xe4,0x79,0x8a,0x5c,0xb7,0xf0,0xeb,0x83,0x4f,
    0x18,0x20,0xc9,0x75,0xcb,0xd9,0x8b,0xbf,0xf7,0xbb,0xe3,0xee,0xc2,0x6c,0x97,0xeb,
    0x2e,0xb5,0x0d,0xc6,0x5f,0xde,0xeb,0xef,0xc1,0xe3,0x1f,0xf4,0xa2,0x7b,0x17,0xec,
    0x1e,0x78,0x1e,0xb3,0x29,0xdc,0x24,0x66,0x97,0xf2,0xbb,0x4d,0xac,0x44,0x9a,0x8d,
    0x24,0xba,0x67,0xff,0xe9,0x02,0xbb,0x09,0x87,0x19,0xc6,0xc7,0xbd,0x83,0x6f,0x17,
    0x67,0x56,0xf6,0xa0,0xd4,0x78,0xfd,0xc6,0xb4,0x19,0xda,0x46,0x8f,0x0c,0xf5,0x26,
    0xd2,0x7a,0x94,0x4d,0x4e,0x79,0x86,0x1e,0xf5,0x34,0xde,0x2f,0xf4,0x68,0x80,0xea,
    0x91,0xe8,0x72,0xec,0xea,0x83,0x9f,0x3c,0x43,0x8f,0xfa,0x99,0x54,0x8f,0xb6,0xa5,
    0xf5,0x28,0xd7,0x78,0xbd,0xee,0x51,0x7f,0xe3,0xf1,0xd0,0xa3,0x04,0x31,0x25,0x7e,
    0xf0,0xeb,0x0d,0x97,0x44,0x9a,0xcd,0x00,0xd5,0xa3,0x84,0xea,0x51,0x95,0xf1,0x71,
    0x1d,0x2f,0xb8,0x86,0x1e,0x95,0x19,0xaf,0x2f,0x85,0x67,0xe8,0xd1,0x0e,0x7a,0x14,
    0xa3,0xde,0xa2,0xb4,0x1e,0x0d,0x22,0xe7,0x20,0xd5,0xa3,0x21,0xc6,0xfb,0x85,0x1e,
    0x15,0xaa,0x1e,0x89,0x2e,0xcf,0xae,0x61,0xf8,0x0d,0x53,0x3d,0x2a,0x50,0x3d,0xda,
    0x91,0xd6,0xa3,0xe1,0xc6,0xeb,0x75,0x8f,0x46,0x18,0x8f,0x87,0x1e,0x15,0x11,0x33,
    0x4f,0xf5,0x68,0x28,0x5c,0x12,0x69,0x36,0x85,0xaa,0x47,0x45,0xaa,0x47,0xb3,0x8c,
    0x8f,0x2b,0xbc,0x86,0xc2,0x35,0xf4,0x68,0xbc,0xf1,0x7a,0xe9,0x55,0x8c,0x78,0xe1,
    0xec,0x6d,0xe1,0x5e,0x15,0xbb,0xd9,0xcc,0x5a,0x03,0x3e,0x45,0x26,0x75,0xe6,0x77,
    0x71,0xe6,0x77,0xaa,0x33,0xff,0x01,0x78,0x38,0xf3,0x1f,0x82,0x85,0x33,0xbf,0x47,
    0x9d,0x79,0xd1,0xed,0xb6,0x6b,0x3f,0x79,0xf7,0xab,0xfb,0xe4,0x13,0x62,0x1f,0x50,
    0xb1,0x3f,0x05,0x0f,0xb1,0x3f,0x03,0x0b,0xb1,0x9b,0x55,0x6c,0xd1,0x1d,0xb4,0xab,
    0x99,0xd8,0x07,0xd5,0x1c,0x7c,0x4e,0x5d,0xf2,0x2d,0x73,0x92,0x58,0x5f,0x80,0x1f,
    0xa2,0x17,0xc1,0xaf,0x99,0x5e,0x88,0xcd,0x97,0xe4,0xdc,0x8f,0xfd,0x41,0xf2,0xb6,
    0xa8,0xbc,0x62,0x73,0xd8,0xae,0x16,0xfc,0x0f,0xab,0xbc,0x5f,0xa9,0xbc,0xb5,0xf6,
    0xeb,0x4c,0xee,0xe6,0x6f,0xc0,0x66,0x9b,0xd4,0xb7,0x52,0x4c,0xbd,0x07,0x8e,0xe0,
    0x17,0x56,0xb8,0xd3,0x8f,0xe2,0x7b,0xc4,0xc5,0xea,0xe9,0xf6,0xea,0x5b,0x62,0x1d,
    0xe5,0x7b,0x2d,0x53,0x7d,0x97,0x4a,0x4d,0x81,0x53,0x8b,0xda,0xdf,0x1a,0x72,0x37,
    0xe3,0x7f,0x18,0xdb,0x3d,0xd8,0xee,0x56,0xfc,0xf7,0xfe,0x07,0xff,0x8f,0xee,0xc3,
    0x7f,0x17,0x3c,0xf7,0x61,0xb3,0x57,0xf1,0xfc,0x18,0x9f,0x7d,0xf7,0xe1,0x19,0x72,
    0xef,0x51,0x3c,0xe7,0x1a,0xcf,0xb5,0x05,0xff,0xdd,0xe4,0x10,0xdd,0x77,0xe8,0x8f,
    0xb9,0x77,0xa1,0xff,0x1e,0x6e,0x05,0x0f,0xf3,0x74,0x92,0x79,0x3a,0xa1,0xe6,0xe9,
    0x7b,0xf0,0x30,0x4f,0xa7,0xc0,0xc2,0x3c,0x9d,0x51,0xfb,0x2a,0xba,0xd3,0x76,0x9d,
    0x85,0xdb,0x59,0x15,0xfb,0x47,0x62,0x9f,0x53,0xb1,0xcf,0x83,0x87,0xd8,0x3f,0x81,
    0x85,0xd8,0x6d,0x2a,0xb6,0xe8,0x2e,0xd8,0x75,0x91,0xd8,0x17,0xd5,0x7b,0xfa,0x17,
    0x62,0x5f,0x52,0xef,0xe9,0x5f,0xc1,0xcf,0xf3,0xad,0x77,0x19,0x6c,0xad,0xca,0xf7,
    0x1b,0x78,0x23,0xf9,0xda,0x55,0x3e,0xd1,0x5d,0xb1,0xab,0x9d,0x7c,0x57,0x78,0xbf,
    0x48,0xdf,0x92,0xc6,0x73,0x6c,0x8d,0x52,0xdf,0x84,0xc1,0xae,0x9d,0xfd,0x10,0xbb,
    0x5a,0xe3,0x6d,0x2e,0xe2,0x73,0x45,0xf1,0xf9,0x1d,0x3e,0x13,0x14,0x9f,0x3f,0xc0,
    0x03,0x9f,0x0e,0xc5,0x47,0x74,0x57,0xed,0xea,0x20,0xcf,0x55,0xc5,0x67,0x1a,0x7c,
    0x6a,0xd5,0x3d,0x15,0xec,0x3a,0x14,0x9f,0x79,0xc6,0xdb,0xb4,0xe3,0x73,0x55,0xf1,
    0xf9,0x13,0x3e,0x27,0x14,0x9f,0xbf,0xc0,0x03,0x9f,0x4e,0xc5,0x47,0x74,0xd7,0xec,
    0xea,0x24,0xcf,0x35,0xc5,0xa7,0xc2,0xf8,0xff,0x8b,0xce,0x33,0xa9,0x79,0x0d,0x76,
    0x9d,0x8a,0x4f,0x83,0xf1,0x36,0x1d,0xf8,0x5c,0xc3,0xb6,0x0d,0xdb,0x0b,0x9c,0x2b,
    0x99,0x95,0x9f,0xe9,0x77,0x5c,0xe5,0x29,0x37,0x29,0x3c,0x4a,0xf3,0x6d,0x53,0x79,
    0xea,0x8d,0xcf,0xd5,0x89,0xcf,0x05,0x6c,0xcf,0x60,0x7b,0x9a,0x73,0x27,0xb6,0x3f,
    0x10,0xaf,0x95,0x73,0x97,0xcd,0x59,0x8d,0xa7,0xf9,0x9c,0x51,0xf1,0xeb,0x8c,0xcf,
    0xd1,0x86,0xbf,0xc4,0x9b,0x6a,0x3d,0x6e,0xa0,0xbb,0x6b,0xa7,0x64,0x92,0x5d,0xff,
    0x02,0xef,0x0f,0x1a,0x53,0x24,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform sampler3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
