// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0x5d,0x4b,0x54,0x51,
    0x14,0x86,0xf7,0x39,0x67,0xe6,0x68,0x25,0x7d,0xd0,0x98,0x47,0xa8,0x99,0xb1,0xa1,
    0x1b,0x0b,0x0d,0xa9,0x08,0xa2,0xac,0x04,0xc7,0x52,0x21,0xb0,0xe6,0x3e,0xe8,0x26,
    0xc3,0xf1,0xa2,0x2e,0x67,0x1a,0x83,0x30,0xed,0x07,0x54,0x54,0x04,0xd6,0x95,0x04,
    0xd1,0x4d,0x58,0x04,0x16,0x51,0x96,0xf5,0x7b,0xa2,0x2f,0xa2,0xd6,0xda,0x3e,0x5b,
    0x56,0xd2,0xc0,0x66,0x9d,0xf5,0xae,0xef,0x77,0xaf,0x3d,0x49,0x5c,0x69,0x73,0x49,
    0xe4,0x36,0xbb,0x76,0xf7,0xc5,0xad,0xfd,0x76,0xb8,0xd8,0x45,0x22,0xb7,0xb8,0xd4,
    0xcb,0xea,0xd8,0xc4,0x58,0xdf,0xd5,0x6b,0x97,0xfa,0x0e,0x1d,0x3e,0xa8,0xf6,0xad,
    0x2e,0xf1,0x7e,0x6a,0xdb,0x26,0x3e,0x79,0x91,0x39,0x39,0x53,0x17,0x2f,0xd7,0x15,
    0x1f,0x91,0xb3,0x5d,0xf0,0x9c,0xcf,0xe5,0xdc,0x49,0x7c,0x23,0x6f,0xcb,0xbb,0x02,
    0x75,0x2a,0xc8,0x80,0x45,0x60,0x39,0x83,0xc5,0x60,0xed,0x06,0x4b,0xc0,0x3a,0xb4,
    0x37,0xd1,0x82,0x5f,0x55,0x22,0x8b,0x22,0xd3,0xf5,0x1c,0x39,0x57,0xa2,0x46,0x46,
    0x7c,0x69,0x43,0x6d,0x8d,0x2f,0x99,0xf8,0x1e,0x91,0x7b,0xd7,0x6d,0x6b,0x7a,0x0f,
    0xbd,0xa9,0x3e,0xe2,0x79,0x71,0x6e,0x37,0x7a,0xe3,0x9f,0x7a,0x79,0xd7,0xfc,0x4f,
    0xfe,0xa6,0xc9,0xdf,0xda,0x90,0xbf,0x45,0xfe,0xa0,0xcf,0x91,0xbf,0x5b,0xce,0x4e,
    0x89,0x8a,0xbd,0x3d,0xf1,0x33,0xeb,0x77,0xa7,0xf8,0x68,0xbd,0x32,0x31,0x45,0xd1,
    0x0a,0xf4,0x60,0x4f,0x59,0xfc,0x3a,0x45,0x6e,0x92,0xa3,0xf6,0x63,0xe8,0xbb,0xc0,
    0x34,0x4f,0x17,0x79,0x74,0xb6,0xfd,0xe8,0x19,0x79,0x35,0xbe,0x1b,0x5f,0xcd,0xb7,
    0x47,0x3a,0x08,0xdc,0x16,0xe1,0xac,0x88,0x5f,0x99,0xbb,0x28,0x51,0xa7,0xcc,0x4c,
    0x1d,0x26,0x6f,0x85,0xfe,0xd5,0x7f,0x1f,0xb6,0x14,0xbb,0xca,0x5e,0xee,0x35,0xf8,
    0xf7,0x1b,0x5d,0xed,0x03,0x72,0xfe,0x18,0x7d,0x90,0x3e,0xbb,0x44,0x1f,0x26,0x57,
    0x42,0xfe,0x2a,0x33,0x0d,0xd3,0x4f,0x95,0x9d,0x8c,0xb0,0x9f,0xe1,0x3b,0x35,0xf5,
    0xc6,0xc1,0x0a,0xd2,0xe5,0x84,0xa9,0x33,0x09,0xae,0xf3,0x37,0xcc,0xfc,0x7a,0xa7,
    0x0d,0xf2,0x5d,0x67,0x9e,0x26,0xf5,0x54,0x6f,0x99,0xf9,0x35,0xe6,0x16,0xef,0xe0,
    0x80,0x68,0xda,0xd7,0x1c,0xd8,0x24,0x27,0xf8,0xad,0xfa,0xb7,0xe3,0xdc,0x11,0xd9,
    0xa5,0x98,0xbd,0x72,0xcc,0xf6,0x5d,0x10,0x7d,0x6b,0xdf,0x44,0x9b,0x07,0xff,0x25,
    0xdf,0xca,0xc5,0x6d,0xec,0x2a,0x4f,0x89,0x97,0xde,0xdd,0x69,0xee,0x5b,0xb9,0x3f,
    0x4e,0xfe,0x21,0x70,0xf5,0x51,0x1e,0xce,0xc2,0xcd,0xa0,0xf1,0x19,0x05,0x7f,0x2f,
    0x3e,0xaa,0x9f,0x03,0x53,0x8e,0x9e,0x09,0xa6,0xfc,0x9c,0x07,0x1f,0xa2,0x9f,0x1a,
    0xfd,0xfc,0x94,0x1c,0x6a,0xbb,0x20,0xa7,0x46,0x4f,0xfa,0xfd,0x43,0xe4,0x3c,0x7a,
    0xcd,0xf4,0x78,0x87,0x1e,0x33,0x53,0xff,0x2e,0xf8,0x0c,0xf5,0xef,0x51,0x4b,0xf1,
    0x77,0x60,0xf7,0xc1,0x2b,0x3e,0x57,0xea,0x77,0xea,0x01,0x7b,0x97,0x61,0x0f,0xf9,
    0x1e,0x62,0xfb,0x48,0xec,0x23,0x62,0x7b,0xcd,0x8c,0x0b,0xe0,0xfd,0xa6,0xc6,0x63,
    0x62,0x17,0x4c,0xec,0x13,0xf0,0x01,0x13,0xbb,0x08,0xae,0x1c,0x7e,0x00,0x7b,0x8a,
    0xbe,0x68,0xe6,0xb8,0xc2,0x1c,0x7a,0xdf,0xcf,0xe1,0x71,0x0a,0x3c,0xf0,0x38,0x6d,
    0x78,0x54,0x9b,0xfe,0xa1,0x4e,0xc3,0x5b,0xdd,0xe4,0x7a,0x41,0x9c,0xe5,0x64,0x09,
    0xdc,0x72,0xf2,0xd2,0x70,0xb2,0x64,0x38,0x79,0x85,0x2d,0xcc,0xf5,0x9a,0x58,0xcb,
    0xc9,0x32,0xb8,0xe5,0xe4,0x0d,0xb1,0xcb,0x26,0xf6,0x2d,0xb8,0xe5,0x64,0x05,0x7c,
    0xd5,0x70,0xf2,0x09,0x5e,0x56,0xd8,0x87,0x30,0x97,0xca,0xaf,0xae,0xcd,0xfb,0x7c,
    0xc6,0xa7,0x86,0x7f,0xdd,0xec,0xca,0x0c,0xbb,0x32,0x6e,0xe6,0xb8,0x01,0x1e,0x78,
    0xb9,0x09,0x36,0x6a,0x38,0x98,0xe5,0x3d,0x66,0xd8,0x4f,0x08,0xcf,0xb3,0xd4,0xb2,
    0x7b,0xa9,0xf2,0xb7,0xbc,0xf6,0xa3,0x72,0xfe,0x02,0x3d,0xc3,0x65,0x60,0x18,0x07,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint _padding;
// };
//
// uint PullIndex(uint index)
// {
//     uint srcIndex = index + srcIndexOffset;
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint firstIndex = 0;
//     uint endIndex = firstIndex + maxIndex;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
// }
