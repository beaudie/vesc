// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x93,0xdb,0x6a,0x53,0x51,
    0x10,0x86,0x67,0xef,0x9c,0x5a,0x05,0xad,0x89,0x12,0x6c,0xd3,0xb4,0x1a,0xc8,0x8d,
    0x25,0x08,0x1e,0x10,0x24,0x68,0x6f,0x12,0xab,0x51,0x1b,0x02,0x6d,0xc1,0x2b,0x6d,
    0x6a,0xd4,0xd2,0xd8,0xa2,0xa0,0x60,0x90,0x18,0xaa,0xb1,0xa8,0x11,0x2f,0x84,0x8a,
    0x6f,0xa0,0x20,0xbe,0x9c,0x78,0x00,0xc1,0x99,0x95,0x6f,0xc7,0x65,0x31,0x30,0xac,
    0xcc,0xe9,0x9f,0x7f,0x0e,0x3b,0x16,0x16,0x52,0x12,0x0b,0x64,0x9f,0x8c,0xc9,0x07,
    0x19,0xfe,0x0e,0x49,0x28,0x01,0x6f,0x99,0xf7,0xa2,0xbe,0xfb,0x25,0xe9,0xec,0xd5,
    0x5a,0xa3,0x56,0x7a,0xf0,0xb0,0x59,0x3a,0x7d,0xe6,0xa4,0xc5,0x1f,0x90,0x98,0xcb,
    0x33,0xdf,0x41,0x49,0x49,0x42,0xdf,0xb8,0xca,0xc6,0xcd,0xbb,0x6d,0xb3,0xa7,0x55,
    0x2a,0x2a,0x13,0x9a,0x1f,0x77,0x78,0xe2,0xf0,0x02,0xa4,0xaa,0xd6,0xb4,0xc3,0x17,
    0x99,0x42,0xb7,0x37,0xe9,0x72,0x44,0x2e,0x29,0x62,0x0e,0x6e,0x05,0xde,0xaa,0xd6,
    0x34,0x5b,0x48,0x7c,0x5e,0xdf,0xe3,0x23,0xdf,0x50,0x3f,0xe6,0xe1,0x57,0xc0,0x9f,
    0x04,0x6f,0xe1,0x3f,0x78,0x0b,0x1e,0x5e,0x6b,0x0f,0x5e,0x0b,0xbc,0x28,0xd6,0xf4,
    0xa3,0xf8,0xb6,0xc0,0x36,0x3d,0xa3,0x08,0xa1,0x8b,0x8d,0xb9,0xa9,0xd8,0xff,0x23,
    0x1a,0x63,0xbd,0xcc,0x92,0x9f,0x55,0x3d,0x45,0x7f,0x21,0xfa,0x04,0x7a,0xcc,0xc5,
    0xc5,0xdd,0x8c,0x02,0xfa,0x3f,0x8f,0x9e,0xc6,0x76,0x02,0xbc,0x0c,0x78,0x16,0x7f,
    0x18,0x5f,0x12,0xbc,0x2c,0xff,0xe3,0x5e,0xfc,0x24,0x73,0xcf,0x31,0xdf,0x2c,0xb6,
    0x3c,0xb3,0x9c,0x02,0x6b,0x1a,0x5e,0x39,0x6a,0x4f,0xbb,0x98,0xbf,0xbd,0xcc,0xd0,
    0x4b,0xc4,0x65,0xc6,0xeb,0xcd,0xf2,0x0b,0xa3,0xbe,0x44,0x79,0x85,0x52,0x84,0xd3,
    0x29,0x7d,0x8b,0xf8,0x22,0x4e,0x17,0xe8,0x39,0xea,0xb1,0x02,0x6e,0x9e,0x7d,0x24,
    0xc1,0xbc,0xac,0xef,0xb8,0xca,0x02,0xb1,0xa6,0x5f,0xc1,0x66,0xfe,0x1a,0xff,0x93,
    0x1e,0xf6,0x92,0xca,0x98,0xca,0x9c,0xee,0xdb,0xe6,0xbd,0x8c,0x6d,0xc9,0xed,0x6a,
    0x5c,0xd6,0x88,0x0f,0xe4,0xdf,0x5f,0x48,0xbf,0x86,0x7b,0x1b,0xdb,0x1a,0x75,0x4d,
    0x6f,0x79,0x7b,0xbc,0xa7,0xef,0xcc,0x9e,0x9e,0x36,0xc1,0x9c,0x53,0xcd,0xf6,0xb7,
    0xc5,0x9c,0x37,0x91,0x92,0xf6,0x66,0x7c,0x76,0x55,0xce,0x2a,0xb7,0x90,0x3d,0x09,
    0xb3,0xf8,0xa1,0x16,0xfb,0x86,0xca,0xdc,0x45,0x95,0xb9,0x5c,0xd7,0xac,0x94,0xbb,
    0xdf,0xa1,0xad,0x4a,0x8e,0xd5,0x9a,0xd7,0x0c,0x9b,0xc1,0x55,0xe6,0x32,0x4b,0xbe,
    0xf1,0xb9,0x86,0xfd,0xb3,0xc6,0x14,0x1d,0xce,0xd0,0x66,0xf7,0xf3,0x5d,0x2b,0xd6,
    0xc1,0xf9,0xa5,0xf1,0xe6,0x5b,0x54,0xa9,0xc3,0x63,0xd1,0xab,0xdb,0xa0,0xe6,0xae,
    0x37,0xb3,0x9f,0x1a,0x13,0xc5,0xda,0xfb,0x8d,0xd8,0xf7,0xf0,0x4c,0x90,0x67,0x38,
    0xdb,0xec,0x61,0x05,0xbf,0xed,0xa3,0x8b,0xed,0x06,0xf6,0x65,0x7a,0xb1,0x7b,0x7e,
    0xc4,0xcd,0x67,0xbc,0x5e,0x1e,0x63,0x9f,0x57,0xcd,0xee,0xec,0xc9,0x68,0x57,0x43,
    0x5f,0x99,0xdb,0xef,0xe0,0xab,0x2b,0x96,0xe5,0x3d,0xc5,0x26,0x9e,0xad,0x8b,0xcd,
    0xe6,0xff,0x95,0xd9,0x3c,0x23,0xb6,0xcb,0x6c,0xfa,0xde,0x6c,0xcc,0xd7,0x53,0xe9,
    0xd3,0x6f,0xcf,0x9b,0xcd,0x36,0x58,0x1d,0x6f,0x27,0x86,0x69,0x37,0xff,0x1c,0xbf,
    0xf5,0xf8,0x51,0x71,0xac,0xce,0x0b,0xec,0x36,0xbf,0x08,0xaf,0xcf,0xfc,0xcc,0xff,
    0x12,0x2e,0x75,0x62,0x7b,0xf0,0x19,0x78,0x7c,0x2c,0x66,0x47,0x65,0x40,0xfe,0x8e,
    0xc7,0xe7,0x95,0xc7,0x27,0xe4,0xae,0xbe,0xc0,0xe7,0x35,0xfe,0x15,0x8f,0xcf,0x1b,
    0xec,0xc6,0x27,0xc2,0x1b,0x78,0x7c,0xde,0xc2,0xa9,0x4f,0xac,0xd5,0x6a,0x04,0x09,
    0x37,0xeb,0x77,0x7c,0xc7,0x16,0xf3,0x89,0x39,0xde,0x62,0x1f,0xd1,0x8d,0x35,0x3d,
    0xde,0xe6,0x5b,0x55,0x69,0x52,0x67,0x95,0xbd,0xd9,0x37,0x76,0x87,0xef,0xab,0xc3,
    0xb7,0xb5,0xce,0xad,0x44,0x3b,0xdb,0xa0,0x9e,0xbf,0xc7,0x36,0xb6,0xc0,0xdd,0x59,
    0xca,0x71,0xba,0x4f,0x6c,0x1b,0x0e,0x19,0x57,0x33,0xee,0xf0,0xd7,0xf1,0x5b,0xaf,
    0x11,0x07,0x7b,0x7f,0x2b,0xc2,0x39,0x95,0x3f,0x6c,0x6d,0x7b,0xcc,0x14,0x07,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_ballot : require
//
// layout(push_constant)uniform PushConstants {
//
//     bool rotateXY;
// } params;
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return subgroupBallot(intersects). xy;
//
// }
//
// void main()
// {
//
//     uvec2 outCoord = gl_WorkGroupID . xy;
//     if(params . rotateXY)
//     {
//         outCoord . xy = outCoord . yx;
//     }
//
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 8);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 8);
//
//     uvec2 culledWidgets;
//
//     culledWidgets = cullWidgets(0, blockCoordLow, blockCoordHigh);
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
