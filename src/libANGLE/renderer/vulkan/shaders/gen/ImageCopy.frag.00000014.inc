// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xf7,0x3a,0xa7,0x37,0x28,0xad,0x45,0xea,0x05,0x04,0x39,0xa5,0xf4,0x88,
    0x52,0x0a,0x02,0x16,0x10,0x0e,0x17,0xb9,0xb4,0x68,0xe5,0x52,0x6e,0x16,0xb1,0x8a,
    0x56,0x11,0x51,0x2a,0x14,0x01,0x95,0x9a,0x72,0xb3,0xa8,0x34,0x0a,0x8d,0x11,0x34,
    0xd1,0x07,0x50,0x20,0x2a,0x89,0x4f,0x26,0x88,0xf0,0x20,0x88,0x34,0x86,0xa0,0x51,
    0x6a,0xa2,0x34,0x51,0xaa,0xf0,0x0f,0xa0,0x45,0x50,0x5c,0xb3,0xf7,0x6f,0xda,0x49,
    0x83,0xda,0x64,0x65,0xef,0xf5,0xad,0x99,0x6f,0x66,0xbe,0x35,0x6b,0xed,0xb6,0xf1,
    0x58,0x61,0x66,0x10,0xb8,0xa0,0x67,0x90,0x15,0x2c,0x76,0x41,0xf8,0xd3,0x3b,0x88,
    0x05,0x8e,0xe7,0x48,0xff,0xcc,0x0e,0x32,0xc2,0x79,0x59,0xc5,0xbc,0x8a,0x92,0xba,
    0x35,0x35,0x25,0xa3,0xef,0x1a,0x21,0x76,0xb9,0x41,0x3c,0xb4,0x97,0xb5,0xeb,0x82,
    0xcc,0x20,0xcd,0x3f,0x65,0x3c,0xb3,0x74,0xf9,0x4a,0xc1,0x93,0x7e,0x5c,0xf0,0x23,
    0xcf,0xdb,0x09,0x9e,0x29,0x1c,0xfe,0x2d,0x19,0x72,0x8a,0x4f,0x10,0x94,0x07,0xe9,
    0x41,0x71,0x14,0x36,0x28,0xe4,0xa9,0x98,0x03,0xcb,0x32,0x58,0x0c,0x2c,0xcf,0x60,
    0x71,0xb0,0x7c,0x83,0xa5,0x81,0xdd,0x6c,0xb0,0x74,0xb0,0xfe,0x06,0xcb,0x00,0x4b,
    0x18,0x2c,0x13,0x6c,0xb0,0xc1,0xb2,0xc0,0x86,0x18,0xac,0x07,0x58,0xb1,0xc1,0x7a,
    0x82,0x8d,0x30,0x58,0x36,0xd8,0x68,0x83,0xf5,0x02,0x1b,0x6b,0xb0,0x1c,0xb0,0x09,
    0xa1,0x4e,0xf1,0xce,0x7a,0x45,0xb3,0x25,0xfe,0x39,0x08,0x7d,0x74,0x5e,0x60,0xe6,
    0xa2,0xf3,0xad,0xcc,0xfb,0x78,0xaf,0x58,0xb8,0x1e,0x0f,0xb5,0x91,0xf7,0x1b,0xfd,
    0x5b,0x06,0x75,0x0e,0xf5,0xf6,0x19,0xc4,0xfb,0xed,0x60,0x51,0x2a,0xdf,0x5b,0xe4,
    0x1a,0x5c,0x34,0x3b,0x58,0xb6,0x34,0xa5,0x73,0xd1,0xeb,0xed,0xdd,0x7d,0x27,0xdf,
    0xe0,0xe7,0x09,0x38,0x64,0x6f,0x6e,0xf2,0xf3,0x02,0xe6,0x31,0xe6,0x83,0xd1,0x34,
    0x2d,0xc4,0xd3,0x82,0x22,0x6c,0x05,0x1f,0xcf,0x3c,0x69,0xfc,0x6f,0xc3,0x5e,0xfc,
    0x85,0x7f,0x28,0x7c,0x41,0x58,0x4f,0x5e,0xa8,0x41,0x01,0x23,0xd1,0x99,0xff,0x7f,
    0x8f,0x44,0xe7,0x33,0x2d,0x18,0xc6,0x3e,0x15,0x13,0x5f,0xe6,0x25,0x60,0x43,0xa9,
    0x67,0x38,0xf9,0x88,0xfd,0x08,0xd6,0x0a,0xcc,0x7a,0xa9,0xa9,0x67,0x4c,0xa7,0x6f,
    0xb4,0x2e,0xcf,0xbb,0xc9,0x57,0xed,0xa7,0xd2,0x6b,0x3a,0x9f,0x85,0xd6,0x52,0xef,
    0x42,0xf2,0x13,0xbe,0xbe,0x9e,0xa9,0xca,0xe8,0x19,0x5c,0xe3,0x79,0x8b,0xdf,0xb7,
    0xc5,0xfe,0x59,0x45,0xfc,0x07,0xc1,0x17,0x53,0x8f,0xcc,0x97,0x74,0x8b,0x5f,0xdd,
    0x6d,0x5e,0xc3,0x19,0x11,0xff,0xc7,0xc9,0x3f,0x41,0x3e,0xcb,0xd1,0x3f,0xce,0xbc,
    0x96,0xb5,0xb8,0xf1,0xaf,0x63,0x7f,0x74,0xbe,0x1e,0x1f,0x9d,0x6f,0xe3,0xcc,0xe8,
    0x7c,0x2f,0x3d,0xaf,0xf3,0x43,0x9c,0x1f,0x9d,0x1f,0xef,0xa6,0xff,0x69,0xce,0x83,
    0xf6,0xdb,0x0f,0x26,0x7f,0x99,0xff,0x1a,0xce,0x1a,0x26,0x49,0xfe,0xe7,0xc9,0x4d,
    0xfb,0xe9,0x3c,0x77,0x4c,0xdc,0xd8,0x4f,0xf3,0xe2,0x6d,0x6c,0x68,0x18,0x5f,0xec,
    0xb3,0x12,0xbb,0xe9,0x2e,0xc2,0xec,0x50,0xdb,0x19,0xfe,0xbd,0x76,0xdf,0xea,0x49,
    0x3a,0x2f,0xf3,0xf3,0x1d,0x9b,0xdf,0x4d,0x95,0xfa,0x1d,0x8c,0xb1,0x4f,0x01,0xfc,
    0x1d,0x1e,0x91,0x7d,0x4d,0xd1,0xe7,0x43,0xe8,0xe5,0xd9,0x3e,0x8e,0xf4,0xf1,0xed,
    0x60,0x43,0xcc,0x1e,0xae,0xe4,0x8c,0xdc,0xc1,0xfa,0x14,0xcf,0x20,0x3d,0x76,0x27,
    0x7d,0x38,0x1c,0x3e,0xb1,0x19,0x09,0xbe,0xc9,0xdb,0xc8,0x7c,0x14,0x7e,0x23,0xf1,
    0x1b,0xc3,0x7d,0x51,0x42,0x4f,0xa6,0xe8,0xbf,0x71,0xe0,0x1f,0x7a,0x9b,0xdc,0x50,
    0x97,0x08,0x93,0xbe,0xfc,0xc3,0x67,0x9e,0x22,0x9f,0x3f,0xbd,0xfd,0x78,0xee,0x97,
    0x14,0xf5,0xc8,0xfb,0x5c,0xef,0x27,0xfb,0x30,0x99,0x98,0xf2,0xf3,0x12,0x7b,0x33,
    0x05,0xbc,0xd2,0xab,0x13,0xd6,0xe1,0x22,0x4c,0xed,0x2e,0x79,0x0e,0xe5,0x92,0xe7,
    0x45,0xaf,0x85,0xd8,0x95,0xbb,0xc8,0x26,0x1d,0x9f,0x09,0xa6,0x86,0x69,0xd4,0x30,
    0xd5,0xd4,0x30,0x1d,0x5c,0x6b,0x98,0x01,0xa6,0x35,0x94,0x9b,0x1a,0x66,0x84,0x77,
    0x5e,0x10,0x62,0x12,0xb7,0xcc,0xd4,0x70,0x1f,0xb1,0x9d,0xa9,0xa1,0x02,0x5c,0x6b,
    0x18,0xe6,0x22,0x4c,0xed,0xa4,0x06,0xe5,0x2a,0x37,0x35,0xcc,0x74,0x91,0x4d,0x0a,
    0x9f,0x32,0x53,0xc3,0x6c,0x6a,0x98,0x65,0x6a,0x98,0x03,0xae,0x35,0xcc,0x05,0xd3,
    0x1a,0xe6,0x99,0x1a,0xe6,0x86,0xf9,0x04,0x21,0x26,0x71,0x2b,0xe9,0x23,0x89,0xbb,
    0x80,0xd8,0x33,0x5d,0xd7,0x3d,0x20,0x39,0xaa,0xed,0x3c,0x93,0xe3,0xbd,0xd8,0x95,
    0xe3,0x57,0x49,0x3e,0x72,0x3f,0x3c,0xc4,0xdd,0xa0,0x3d,0xf7,0x30,0x39,0x57,0x9b,
    0x9e,0x7b,0x04,0xbc,0x81,0x9e,0x7b,0x14,0x4c,0x78,0x6b,0xb9,0x9f,0x1f,0x03,0x17,
    0x1e,0xb9,0x3f,0x9e,0x80,0xa7,0x06,0x1e,0xd1,0x78,0x19,0x78,0x2d,0xe7,0xe8,0x49,
    0x30,0xd9,0x17,0x99,0x3f,0x05,0x4f,0x60,0xb0,0x15,0x60,0x2e,0xd4,0x29,0x23,0xbc,
    0x8b,0x9e,0xc6,0x76,0x05,0x1c,0x35,0x9e,0xaf,0x2a,0x3c,0x47,0x51,0x3d,0xcb,0xbc,
    0xaf,0xdc,0x51,0xcf,0x82,0x55,0x13,0x53,0x7c,0x57,0x81,0x6f,0xf3,0x36,0x32,0x5f,
    0x0d,0xdf,0x2a,0x93,0xfb,0x1a,0x72,0xaf,0x33,0xb9,0x3f,0x07,0xae,0xb9,0xaf,0x05,
    0x5b,0xe4,0x35,0x96,0xfb,0x7a,0x1d,0xb1,0x57,0x93,0xeb,0x5a,0xd3,0x07,0xcf,0xc3,
    0xb7,0xde,0xf4,0xc1,0x0b,0xe0,0xda,0x07,0x2f,0x82,0x69,0x1f,0xd4,0x9b,0x3e,0x90,
    0xb5,0x0d,0x7e,0x34,0xb2,0xb7,0x8d,0x86,0xfb,0x15,0xb8,0xb7,0x19,0xee,0x57,0xc1,
    0x95,0xfb,0x35,0x30,0xe5,0x6e,0x32,0xdc,0xb2,0xb6,0xdd,0x8f,0x26,0xb8,0xb7,0x9b,
    0x73,0xf2,0x3a,0x75,0xc9,0xbd,0xf6,0x31,0x5c,0x6f,0x80,0x57,0xd3,0x6f,0xea,0xd7,
    0x44,0xbf,0x89,0xcd,0x0e,0x62,0x36,0x62,0xbf,0x9d,0xb8,0xcd,0x26,0xae,0xd8,0xec,
    0xf4,0xa3,0x19,0xff,0x9d,0x26,0xee,0x9b,0x26,0xee,0x6c,0xff,0x55,0x90,0xbd,0x7c,
    0x0b,0x6c,0x9d,0xb9,0x37,0x63,0xf4,0x84,0xac,0xef,0xc2,0x4f,0x47,0x23,0x3d,0xb0,
    0x1b,0xdf,0x5d,0x21,0x57,0x8f,0x70,0xaf,0xde,0x81,0x67,0x37,0x77,0x77,0xba,0xf9,
    0xbe,0x49,0x4d,0x9a,0x53,0x33,0x35,0x89,0xcf,0xfd,0x2e,0xf2,0x69,0xc2,0x7f,0x27,
    0xb6,0xf5,0xd8,0x6e,0x30,0xf9,0x37,0x5c,0x23,0xff,0x4d,0xff,0x93,0xff,0x66,0xfc,
    0x74,0x6c,0x21,0xff,0x2d,0xf8,0x6e,0x36,0xf9,0xbf,0x0c,0xcf,0x96,0x7f,0xc9,0x5f,
    0x73,0xaa,0x37,0xf9,0x57,0xb8,0xa8,0x86,0x66,0xfc,0x37,0xd0,0xcb,0xf2,0x8d,0x7a,
    0x8f,0xf5,0xad,0x9e,0x49,0xe6,0x7b,0xc0,0xa6,0xbb,0xae,0x3e,0x7b,0x9f,0x3e,0xdb,
    0x6b,0xfa,0xec,0x03,0x70,0xed,0xb3,0x7d,0x60,0xda,0x67,0x07,0xcc,0x7e,0xcb,0xda,
    0x7e,0x3f,0x0e,0x90,0xdb,0x7e,0x73,0xc6,0x3f,0x22,0x66,0x80,0x5f,0x8c,0x0b,0xed,
    0xb2,0x7f,0x17,0xae,0xdf,0xf1,0x91,0xe7,0x61,0x62,0x75,0xe0,0x97,0x83,0x8f,0x73,
    0x5d,0xb1,0x3a,0x42,0x1d,0x82,0xe0,0x0a,0x7e,0xf2,0xdc,0x48,0xac,0xbf,0xf1,0x93,
    0xdf,0x5f,0xb7,0x82,0x5d,0x05,0x97,0xef,0x7c,0x2f,0xaf,0x57,0x06,0x1b,0x24,0x94,
    0xfd,0x58,0xef,0x8f,0xb6,0x92,0x9b,0x70,0x5e,0x32,0xfe,0x97,0xe1,0x94,0xdf,0x0b,
    0xac,0x8d,0xe4,0x74,0xd5,0xb3,0x74,0x80,0x5d,0x84,0x7b,0x96,0x8b,0xf8,0xaf,0xe0,
    0x7b,0x89,0xef,0x8e,0x68,0x3f,0xca,0x45,0xeb,0x7b,0xba,0xdd,0x83,0x9f,0xa0,0x91,
    0xa3,0xde,0xfc,0x6e,0x1a,0x65,0x11,0x53,0x9e,0xaa,0x51,0x4f,0x17,0xf9,0xa9,0x46,
    0x7d,0x8c,0x46,0xb2,0x96,0xed,0x47,0x2e,0x7e,0xf2,0x54,0x8d,0xf2,0xf0,0xb3,0x1a,
    0xf5,0x76,0x11,0x6e,0x35,0xba,0xde,0x68,0x24,0xeb,0xaa,0x51,0x3e,0x9c,0xd9,0xae,
    0xcb,0x3f,0x07,0x4e,0xd5,0x48,0x6d,0xfa,0x18,0x8d,0xf2,0x8d,0x46,0x73,0x5c,0xc4,
    0x2f,0x79,0xe5,0x90,0xab,0x6a,0x54,0xea,0xa2,0xf5,0x51,0xc4,0x57,0x8d,0x3e,0x45,
    0xa3,0x18,0xf5,0x26,0xbb,0x69,0xd4,0x8f,0x98,0xfd,0x8c,0x46,0xfd,0x5d,0xe4,0xa7,
    0x1a,0x15,0x19,0x8d,0x64,0x6d,0x80,0x1f,0x09,0xfc,0x12,0x46,0xa3,0x41,0xf8,0x59,
    0x8d,0x0a,0x5d,0x84,0x5b,0x8d,0x06,0x1b,0x8d,0x0a,0x8d,0x46,0x49,0x38,0x07,0x18,
    0x8d,0x06,0xc2,0xa9,0x1a,0xa9,0x4d,0x91,0xd1,0x28,0x69,0x34,0xaa,0x74,0x11,0xbf,
    0xe4,0x35,0x90,0x5c,0x55,0xa3,0x71,0x2e,0x5a,0x17,0xad,0x62,0xc4,0xd4,0xb3,0x77,
    0x80,0x7b,0x41,0xec,0xe6,0xd3,0x6b,0xf5,0xf8,0x24,0xcd,0x99,0xff,0x8c,0x33,0x7f,
    0xc8,0x9c,0xf9,0xc3,0xe0,0x7a,0xe6,0x3f,0x07,0xd3,0x33,0x7f,0xd4,0x9c,0x79,0x59,
    0x3b,0xe2,0xc7,0x31,0xe2,0x1e,0x33,0xdf,0xad,0x2f,0xe1,0x3e,0x6e,0xb8,0x4f,0x80,
    0x2b,0xf7,0x57,0x60,0xca,0xdd,0x62,0xb8,0x65,0xed,0xa4,0x1f,0xa7,0xe0,0x3e,0x65,
    0xbe,0xdf,0xdf,0xc0,0x7d,0xda,0x7c,0xbf,0xbf,0x05,0x3f,0xc1,0x1d,0xfd,0x1d,0x58,
    0x9d,0x89,0xf7,0x3d,0x78,0x35,0xf1,0x5a,0x4d,0x3c,0x59,0x3b,0xe3,0x47,0x2b,0xf1,
    0xce,0x98,0x33,0x3b,0xd1,0x45,0x7f,0x8f,0xcc,0x37,0xbf,0x2b,0xaa,0x5d,0xab,0xd1,
    0x7a,0x81,0x8b,0x6c,0x4e,0xe1,0x73,0xc6,0xe4,0xf3,0x23,0xf9,0x94,0x9a,0x7c,0x7e,
    0x02,0xd7,0x7c,0xda,0x4c,0x3e,0xb2,0x76,0xd6,0x8f,0x36,0xe2,0x9c,0x35,0xf9,0x4c,
    0x26,0x9f,0x05,0x66,0xef,0xd5,0xae,0xcd,0xe4,0xb3,0xd0,0x45,0x36,0xad,0xf8,0x9c,
    0x35,0xf9,0xfc,0x4c,0x3e,0x87,0x4c,0x3e,0xbf,0x80,0x6b,0x3e,0xed,0x26,0x1f,0x59,
    0x3b,0xe7,0x47,0x3b,0x71,0xce,0x99,0x7c,0xee,0x71,0xd1,0xdf,0x67,0x12,0x4f,0xbf,
    0x51,0x6a,0xd7,0x6e,0xf2,0xa9,0x72,0x91,0x4d,0x1b,0x3e,0xe7,0xb0,0x6d,0xc1,0xf6,
    0xa4,0x39,0xeb,0x5f,0xa3,0x77,0xdc,0xc4,0x99,0xe0,0xba,0xf0,0xa0,0x9b,0x6f,0x8b,
    0x89,0xf3,0x80,0x8b,0x62,0xb5,0xe3,0x73,0x12,0xdb,0xa3,0xd8,0x1e,0xe1,0x5b,0x2b,
    0xb6,0x5f,0xc0,0x27,0x43,0xff,0x3f,0x15,0x33,0xdf,0x5a,0xf5,0x39,0x6a,0xf8,0x17,
    0xb9,0x28,0x46,0x0b,0xfe,0xc2,0x37,0xd1,0x7b,0x5c,0x60,0xed,0x2f,0xdf,0x25,0x63,
    0xfd,0xf8,0x07,0x63,0x0d,0xab,0xc6,0x58,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
