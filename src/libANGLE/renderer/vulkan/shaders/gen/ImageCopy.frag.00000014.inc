// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xf7,0x73,0x55,0x55,
    0x10,0xc7,0x6f,0xde,0x7b,0x79,0x8f,0x84,0x16,0x24,0xd2,0x04,0x27,0x05,0x10,0x0d,
    0x86,0xa8,0x21,0xd4,0x47,0x8b,0x52,0x94,0x1e,0x50,0x10,0x23,0x45,0x54,0x40,0x08,
    0x4a,0xa2,0x08,0xd2,0x45,0x93,0x28,0x82,0x88,0x05,0x50,0x01,0x15,0x54,0x82,0x04,
    0x54,0x9a,0x80,0x82,0xd2,0x2c,0x20,0x2a,0xa0,0x82,0x80,0xfe,0xe4,0x7f,0xe0,0x58,
    0x66,0x2c,0x67,0x0f,0x9f,0xcd,0xec,0xdc,0x41,0xcd,0xcc,0x99,0xfb,0xf6,0xbb,0x7b,
    0x76,0xbf,0x5b,0xce,0xb9,0xef,0x25,0x1a,0xc9,0x4d,0x04,0xd1,0x94,0x20,0x3d,0xa8,
    0x17,0xfc,0x14,0x5c,0xfa,0x6b,0x12,0x44,0x82,0x14,0xf7,0xac,0x1f,0xc4,0xfd,0x73,
    0xc0,0xe0,0x92,0xc1,0xf9,0xe5,0x15,0x93,0xf3,0x0b,0x3b,0x17,0x88,0xbe,0x51,0x10,
    0xf5,0x76,0xa2,0x6b,0x1c,0x24,0x82,0x98,0x7b,0xca,0x9a,0x31,0x71,0x6a,0x99,0xe0,
    0xed,0xdd,0xba,0xe8,0x56,0x86,0xb3,0x13,0x3c,0x21,0x3e,0xdc,0xa7,0xf6,0xde,0xa7,
    0xec,0x09,0x82,0x81,0x41,0x6a,0xd0,0x91,0x78,0xb9,0x3c,0x15,0x4b,0x01,0xab,0x67,
    0xb0,0x08,0x58,0x86,0xc1,0xa2,0x60,0x99,0x06,0x8b,0x81,0xb5,0x30,0x58,0x2a,0x58,
    0x6b,0x83,0xc5,0xc1,0xb2,0x0c,0x96,0x00,0x6b,0x6b,0xb0,0x7a,0x60,0x1d,0x0c,0x96,
    0x06,0xd6,0xd1,0x60,0xe9,0x60,0x05,0x06,0xab,0x0f,0x56,0x68,0xb0,0x06,0x60,0x5d,
    0x0d,0xd6,0x10,0xac,0xa7,0xaf,0x53,0xb4,0x2e,0x5f,0xa9,0xd9,0x38,0xf7,0xcc,0xa1,
    0x3e,0x2a,0x67,0x1b,0x59,0xea,0x7c,0x35,0x72,0x53,0xb7,0x2b,0xe2,0xf5,0x51,0x5f,
    0x1b,0xf9,0xdc,0xcc,0x7d,0x8a,0x93,0x67,0x96,0xb3,0x4f,0x90,0x67,0xdc,0xdb,0xc5,
    0x7c,0x7e,0x71,0xb0,0x3c,0x27,0xc7,0xe1,0xf3,0x73,0x6d,0xbb,0x64,0xa6,0xf3,0xd0,
    0xc8,0xe0,0x4d,0xdd,0x1a,0xb9,0x67,0x68,0x5f,0x95,0xa5,0xc6,0xb5,0x03,0x26,0x26,
    0x55,0x6e,0xe5,0x56,0x32,0xbd,0xb2,0xb7,0xca,0x52,0xef,0xb5,0x6b,0x5a,0xf6,0xb9,
    0xd2,0xc9,0x59,0x70,0x90,0xde,0x36,0x77,0x72,0x36,0x72,0x04,0x5e,0x39,0x70,0xc8,
    0x46,0xdf,0x16,0x5e,0x31,0xf4,0xed,0xd8,0x2b,0x78,0x0f,0xe4,0xf6,0xc6,0xdf,0x35,
    0xd8,0x8b,0x3f,0x89,0x97,0x87,0xff,0xc0,0xd7,0x27,0xc3,0xd7,0x34,0x9b,0xa5,0x5c,
    0xf2,0xfe,0x67,0x65,0xd5,0x3d,0x63,0xc1,0xf5,0xf4,0xbd,0x23,0xf1,0x45,0xce,0x07,
    0xcb,0x23,0xbf,0x4e,0xf0,0x11,0xfb,0x02,0x74,0xd9,0x46,0x5f,0x64,0xf2,0xe9,0x52,
    0xb7,0xf7,0x92,0x5e,0x9e,0xdd,0xe1,0x2b,0xfa,0x5e,0xd4,0x23,0xcb,0xec,0x2f,0x66,
    0x96,0xd5,0x7e,0x10,0xf1,0x54,0x3f,0x94,0xde,0x49,0x3d,0x6e,0x67,0xaf,0xc6,0xbb,
    0x03,0x7f,0x82,0xb7,0x74,0x91,0xc7,0x9a,0x7e,0x04,0x97,0x79,0xca,0x9e,0x3b,0xf9,
    0x3c,0x96,0x9c,0x45,0x1e,0x07,0xa6,0x31,0x4b,0x43,0xf2,0x24,0xce,0xa5,0xec,0xbf,
    0x87,0x1c,0xb3,0xe0,0x74,0x1f,0x9f,0xa3,0xc6,0x7e,0x1a,0x3d,0x53,0xb9,0x8c,0x3e,
    0x6a,0x8e,0x15,0x21,0xfb,0x05,0x75,0x75,0x89,0x05,0xcf,0xf1,0xb9,0xad,0x99,0xd1,
    0x17,0x3d,0x9b,0x85,0xc5,0x6a,0xbf,0x96,0x73,0xa8,0xfe,0xb6,0x84,0xe2,0x6d,0xe7,
    0x8c,0xab,0xbc,0x2f,0xd4,0xd3,0xa3,0x9c,0x59,0xf5,0xff,0xa5,0xc9,0x57,0xe4,0x1f,
    0xbc,0xb4,0xa8,0xb7,0xf0,0xb9,0x00,0x57,0x9d,0xd1,0x0b,0xdc,0x83,0x51,0xdf,0xfb,
    0x54,0x1f,0x37,0xc6,0x7e,0xc1,0x7e,0x73,0x48,0x2a,0xb6,0x39,0xdc,0x01,0x09,0x23,
    0x17,0x1a,0x59,0xfa,0x37,0xc6,0xc8,0x92,0xfb,0x2a,0x23,0xcb,0x73,0x43,0x48,0xde,
    0x14,0x92,0x6b,0x8c,0x2c,0xf3,0x75,0x04,0x39,0xc9,0x79,0xeb,0xc0,0x99,0x1a,0xe6,
    0x50,0x39,0x4f,0xd7,0x82,0x75,0x30,0xb3,0x51,0xc6,0xd9,0xbd,0x0e,0x7d,0x5f,0x97,
    0x81,0xcc,0xfa,0x0d,0x9c,0x87,0x4e,0xf8,0x13,0x9b,0x1b,0xc1,0x97,0x38,0x1b,0x91,
    0x6f,0x62,0x9f,0xe0,0xbd,0x5c,0x05,0x72,0xc1,0xd4,0xbe,0x33,0x35,0x10,0x5d,0x21,
    0xb2,0xf8,0xef,0xc2,0x7d,0x99,0xcf,0x19,0x4a,0xd2,0xcb,0x6e,0xe0,0x5b,0x9c,0x4d,
    0x23,0x9f,0xd7,0x25,0x4c,0xce,0xd1,0xaf,0xce,0x47,0x12,0xde,0x7f,0x38,0xfb,0x1e,
    0xdc,0xaf,0x49,0xea,0xde,0x13,0xdf,0x52,0x87,0xde,0xd4,0xba,0x3b,0xbe,0xa5,0xef,
    0x7d,0xc0,0x17,0x20,0xf7,0x05,0xd3,0x3d,0xfd,0xcc,0x1e,0xe1,0xdb,0x0f,0x9b,0xdf,
    0x9d,0x6f,0x8d,0x91,0x34,0xfc,0x6f,0x86,0x7f,0xb1,0xe1,0x7f,0x0b,0xb8,0xf2,0xef,
    0x0f,0xa6,0xfc,0x07,0x1a,0xfe,0xfd,0xfd,0x7d,0x1f,0x78,0x4c,0x7c,0x0f,0x30,0x5c,
    0x6e,0x85,0xcb,0x20,0xc3,0xff,0x36,0x70,0xe5,0x3f,0x18,0x4c,0xf7,0x0c,0x31,0x7b,
    0x84,0xff,0x10,0x6c,0x84,0xbf,0xc6,0x18,0x68,0xf8,0x0f,0x83,0xff,0x50,0xc3,0x7f,
    0x38,0xb8,0xf2,0x1f,0x01,0xa6,0xfc,0x4b,0x0c,0x7f,0xd1,0x8d,0x74,0xab,0x04,0xdf,
    0x23,0x4d,0xdf,0x47,0xc1,0x45,0xe6,0x4e,0xe4,0xd1,0x60,0xa3,0xcc,0x7d,0xa4,0x33,
    0x31,0x1a,0x8e,0xea,0xa7,0x04,0x3f,0x72,0x47,0xdd,0xc5,0xfd,0xa4,0x33,0x79,0x37,
    0x9c,0x4b,0x4d,0xac,0xf1,0xe0,0x2a,0x4f,0x20,0xf6,0x22,0x66,0x74,0x22,0x36,0x13,
    0xf0,0x23,0x77,0xd8,0x64,0xfc,0x4c,0x32,0xf5,0xbd,0x17,0x7c,0x84,0xb3,0x11,0xf9,
    0x7e,0xf6,0x06,0x06,0x9b,0x02,0x96,0xe2,0xeb,0x12,0xf7,0xf7,0xdf,0x54,0x6c,0xa7,
    0xe0,0x43,0x63,0x3c,0x40,0x8c,0x69,0x26,0xc6,0x74,0xf0,0xf1,0xae,0x2e,0x72,0x6f,
    0xcf,0x20,0xc7,0xa9,0xdc,0x61,0xd3,0xa9,0xcb,0x18,0x74,0xda,0xab,0x99,0xf8,0x2a,
    0x33,0xbd,0x7a,0x10,0x5c,0x7b,0xf5,0x10,0x98,0xf6,0xaa,0xdc,0xf4,0x4a,0x74,0xb3,
    0xdc,0x9a,0x4f,0x8d,0x67,0x99,0xb9,0x79,0x98,0x7b,0xa8,0xc2,0xf0,0x7c,0x04,0x3c,
    0xc9,0x7b,0x67,0x36,0x36,0xc3,0xdc,0xcd,0x2a,0x39,0x3f,0x0a,0x36,0xdb,0xdc,0x23,
    0x11,0x53,0x93,0x39,0xf8,0xd0,0xb5,0xd4,0xc5,0x12,0x7c,0x2e,0x7b,0xe7,0x18,0xdf,
    0x8f,0xd5,0xf9,0x4e,0xf3,0xf2,0x3c,0xb0,0xb9,0xdc,0xad,0xa9,0xbc,0x3f,0xa2,0xa6,
    0x36,0xf3,0x98,0x99,0x72,0xf2,0x99,0x6f,0x6a,0xb5,0x90,0x5a,0x2d,0x30,0xb5,0x5a,
    0x04,0xae,0xb5,0x5a,0x0c,0xa6,0xb5,0x7a,0xdc,0xd4,0x6a,0xb1,0xbf,0xdf,0x02,0x8f,
    0x89,0xef,0x25,0xa6,0x56,0x4b,0x2f,0x53,0xab,0x27,0xc0,0xb7,0xe2,0xfb,0x49,0xb0,
    0x52,0x38,0xaa,0x1f,0x79,0xfe,0xe2,0xfa,0x2e,0x36,0x95,0x70,0x98,0x8f,0xfd,0x12,
    0x78,0x54,0x1b,0x1e,0x62,0x53,0xe5,0x56,0x35,0xfb,0xab,0x0c,0x8f,0xa7,0x2e,0xc3,
    0xe3,0x69,0x70,0xad,0xeb,0xb2,0x50,0xcf,0x9e,0x01,0x5b,0xf6,0x2f,0x3d,0x5b,0x8e,
    0x0f,0x5d,0x95,0xf4,0x6c,0x05,0x7b,0x97,0x1b,0xdf,0xcf,0x86,0x7a,0xb6,0x12,0x6c,
    0xc5,0x7f,0xf4,0x6c,0x25,0xf5,0xd0,0x7c,0xaa,0x43,0x3d,0x2c,0x37,0xfe,0x9f,0xc7,
    0xff,0x4c,0xde,0x63,0x2f,0x80,0x89,0xaf,0x55,0xc8,0xfa,0x8e,0x7b,0x89,0xf7,0xe6,
    0x70,0x57,0x5b,0x91,0x57,0xf3,0x9d,0xc1,0xae,0x2a,0xc7,0x48,0x74,0x6b,0xb0,0x5f,
    0x6d,0x7c,0xad,0x31,0xb3,0xf3,0x32,0xb3,0xb3,0xd6,0xcc,0xce,0x2b,0xe0,0x3a,0x3b,
    0xaf,0x82,0xe9,0xec,0xac,0x37,0x3d,0x13,0xdd,0x3a,0xb7,0xd6,0x93,0xd3,0x3a,0x7c,
    0xcb,0x3b,0xf9,0x35,0x78,0xea,0x3b,0x49,0xea,0xf3,0x3a,0xb8,0x70,0xd9,0x80,0xdc,
    0xcd,0xd9,0x8b,0xee,0x0d,0x7e,0x83,0x6c,0x30,0x3e,0x36,0x1a,0x1f,0xb2,0x67,0x23,
    0x76,0xaa,0x7f,0x13,0xfd,0x20,0x13,0xe3,0x2d,0x70,0xb1,0xdf,0x84,0xac,0x31,0xde,
    0x26,0xc6,0x26,0xe3,0x63,0xb3,0xf1,0x21,0x7b,0x36,0x63,0xa7,0xfa,0x77,0xd0,0x6f,
    0x31,0x31,0xb6,0x82,0x8b,0x7d,0x0d,0xb2,0xc6,0xa8,0x25,0x46,0x8d,0xf1,0xb1,0xcd,
    0xf8,0x90,0x3d,0xdb,0xb0,0x93,0x79,0xd0,0xda,0xad,0x37,0x7d,0x79,0x97,0xbe,0x6c,
    0x37,0x7d,0x79,0x0f,0x5c,0xfb,0xf2,0x3e,0x98,0xf6,0x65,0xa7,0xe9,0x8b,0xe8,0x76,
    0xb8,0xb5,0x17,0xdf,0x3b,0xcc,0xfc,0xec,0x82,0x8b,0x7e,0x47,0xda,0x0d,0xb6,0xcb,
    0x7c,0xaf,0x53,0xdb,0x3d,0x75,0xb6,0x69,0x5e,0xfe,0x00,0x6c,0xb7,0x99,0xfb,0x88,
    0x99,0xfb,0x55,0xd8,0x48,0x5e,0x3b,0x89,0xbd,0xd7,0xe4,0xb5,0x9f,0xbc,0xf6,0x99,
    0xbc,0x3e,0x04,0xd7,0xbc,0x3e,0x02,0xd3,0xbc,0x0e,0x9a,0xbc,0x44,0x77,0xc0,0xad,
    0xc3,0xf8,0x3e,0x60,0x6a,0xfc,0x31,0x5c,0x2b,0x4c,0x9f,0x3e,0x01,0x57,0x9b,0x43,
    0xa1,0x79,0x3a,0x84,0x8d,0xf0,0x3d,0x88,0xcf,0xc3,0xe6,0x9d,0x76,0x0c,0xbe,0x47,
    0xcd,0xbd,0xf3,0x29,0xb8,0xec,0x3f,0x82,0xac,0xba,0xcf,0xf8,0x4e,0x7a,0x8c,0xf7,
    0xe7,0xe7,0x60,0xd3,0x4c,0x7e,0x5f,0x80,0x97,0x92,0xdf,0x09,0x93,0x9f,0xe8,0x8e,
    0xbb,0x75,0x02,0x2e,0xc7,0x0d,0xf7,0x93,0xa1,0x39,0x3d,0xc9,0x77,0x79,0xe1,0xae,
    0xf6,0x27,0x0c,0x97,0xaf,0x42,0x5c,0xbe,0x06,0x2b,0x32,0x5c,0xbe,0x01,0x57,0x2e,
    0xa7,0x0d,0x17,0xd1,0x9d,0x72,0xeb,0x34,0xbe,0x4f,0x19,0x2e,0x67,0x42,0xf3,0x7c,
    0xc6,0x70,0x51,0xfb,0xd3,0x86,0xcb,0xb7,0x21,0x2e,0xdf,0x81,0x6d,0x37,0x5c,0xbe,
    0x07,0x57,0x2e,0xe7,0x0c,0x17,0xd1,0x9d,0x75,0xeb,0x1c,0xbe,0xcf,0x1a,0x2e,0xe7,
    0x4d,0xdf,0x85,0xcb,0x79,0x7e,0xd3,0x08,0x17,0xb5,0x3f,0x17,0xea,0xf1,0xc1,0xd0,
    0x8c,0xee,0x34,0x33,0xff,0x23,0xfe,0xc4,0xd7,0x45,0xe4,0x3f,0xdd,0xdb,0xa3,0xab,
    0x5b,0x45,0x9c,0xf1,0x74,0xb8,0xc9,0xef,0xae,0x2e,0xce,0x2e,0xc1,0x6f,0x2e,0xf1,
    0x55,0xdf,0xcc,0x5f,0x03,0xf0,0xfd,0xe4,0xd8,0x18,0xac,0x21,0x39,0x36,0x31,0x39,
    0x36,0xe6,0x7f,0x43,0xcd,0xf0,0x93,0x61,0xfc,0x5c,0x81,0x9f,0x2a,0xe2,0x67,0x82,
    0xc9,0xff,0x33,0xfe,0x72,0xb6,0x99,0xec,0x69,0x66,0xf6,0x34,0x67,0xcf,0x62,0xf6,
    0xb4,0x04,0x6b,0x61,0xfc,0x5c,0x05,0xde,0xca,0xf3,0x4a,0x78,0xac,0x0d,0xef,0xca,
    0x56,0xe8,0x5b,0x13,0xa3,0x0d,0x31,0x84,0xf3,0xdf,0xd4,0xe3,0x1f,0xdc,0x4d,0xfc,
    0x7e,0x7c,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
