// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0x59,0x6c,0x55,0x55,
    0x14,0x86,0x4f,0x7b,0xdb,0xd3,0x72,0xb5,0xa5,0xc5,0x96,0xa1,0x17,0x28,0xb5,0x06,
    0x87,0x6b,0x10,0x13,0xc6,0xd8,0x36,0xe2,0x40,0x0d,0x21,0x51,0x41,0x5b,0x79,0x31,
    0xa0,0x6d,0x8c,0x0f,0x85,0x84,0xb6,0x09,0xc6,0xda,0x22,0x5a,0x6d,0x83,0x88,0x45,
    0x83,0x88,0x13,0xa8,0xc1,0x88,0x86,0x84,0x28,0xb5,0x09,0x5a,0x12,0x43,0x19,0x9e,
    0x7d,0xf2,0x05,0x05,0xf1,0x09,0x5f,0x9d,0x63,0x74,0xfd,0xfb,0x7c,0xdb,0xac,0xdc,
    0xd8,0x64,0xe7,0xdc,0xfd,0xaf,0xf1,0x5f,0x6b,0xed,0xbd,0x9b,0x2b,0x6f,0xad,0x4a,
    0x92,0xb2,0x24,0x9f,0x54,0x27,0x3f,0x27,0xd9,0x5f,0x7d,0x52,0x6e,0x48,0x92,0x5c,
    0x97,0xa4,0xe1,0xdb,0xb9,0x71,0xf3,0xc6,0x65,0xfd,0x03,0x3d,0xcb,0x56,0xac,0x5c,
    0x2e,0x79,0x6d,0x92,0x0b,0x7a,0x92,0xcd,0x36,0x9d,0x4a,0xfb,0x56,0xd8,0xea,0xdb,
    0xf6,0xf4,0x76,0xe1,0x35,0xb6,0xea,0x0c,0xaf,0x08,0xbe,0x12,0xf3,0x9c,0xad,0xe0,
    0xcb,0xd0,0x9a,0xe0,0x3b,0x49,0x16,0xda,0x7a,0xc0,0xac,0x17,0x11,0xb7,0x95,0x6f,
    0xc4,0xca,0xc0,0xaa,0x1d,0x56,0x0e,0x56,0xe7,0xb0,0x1c,0xd8,0x7c,0x87,0x55,0x80,
    0xf9,0x18,0x95,0x60,0x4b,0x1c,0x96,0x82,0x2d,0x77,0x58,0x15,0xd8,0x0a,0x87,0x55,
    0x83,0xad,0x71,0xd8,0x2c,0xb0,0xb6,0xc0,0x2b,0xf7,0x5f,0x7e,0xe2,0xb8,0xcf,0xbe,
    0x37,0xc2,0x27,0xee,0x5b,0x5c,0x0d,0x26,0x4a,0xe4,0x13,0xc8,0xa3,0xfd,0x29,0x72,
    0xab,0x20,0xde,0x64,0x49,0x8d,0x14,0x6f,0x12,0xee,0xd2,0x9f,0x2a,0xf1,0x37,0x85,
    0xbf,0xb8,0x3f,0x4f,0xcd,0x17,0xd8,0xba,0xc1,0xa2,0x94,0x07,0x79,0x2e,0xd8,0xeb,
    0x77,0xa3,0xe9,0xa4,0xd4,0x46,0x39,0xce,0xb3,0x7d,0x15,0x39,0x44,0x79,0x1e,0x79,
    0x82,0x5c,0xfe,0xf2,0xe4,0xb0,0xc4,0xf6,0xd7,0x63,0x2b,0xfc,0x2e,0xf6,0x35,0x60,
    0x45,0xec,0x6b,0xb1,0x97,0xfe,0x6c,0x64,0x79,0x27,0x9f,0x03,0xe7,0xb8,0x6f,0x44,
    0x67,0xae,0x45,0x69,0x22,0xbe,0x62,0x17,0xec,0xdb,0x44,0x6e,0xda,0x2f,0x74,0xf5,
    0x5a,0x6c,0x91,0xd5,0x8b,0x82,0x5b,0x29,0x2b,0xea,0xe5,0xdd,0x52,0x2e,0x8b,0xe9,
    0xe7,0x22,0x72,0xd7,0xbe,0x19,0xac,0xe8,0x6a,0x53,0x89,0x7e,0x0b,0x32,0xf9,0x6b,
    0xb0,0x2c,0x96,0x92,0xc7,0xcd,0xf6,0x5d,0x4a,0x5e,0xd1,0x6e,0x15,0x1c,0x64,0xb7,
    0x1a,0xbb,0x82,0x93,0xb7,0x51,0x93,0xb8,0x5f,0xc7,0x0c,0x4a,0xff,0x1e,0xf4,0xf3,
    0x4e,0xbe,0x89,0x79,0x8c,0xfb,0xad,0x25,0x79,0xf6,0xd9,0xfa,0xc7,0xfe,0xe2,0x7e,
    0x97,0xab,0xa9,0x6a,0x36,0xe4,0x7a,0xb0,0x07,0xdb,0x34,0xcc,0xc6,0xac,0x64,0x2f,
    0xb1,0xca,0xd0,0x29,0xfd,0xca,0xe6,0x15,0x7e,0xef,0xa5,0x56,0xda,0xef,0x03,0x6b,
    0x32,0xe6,0xfb,0xd1,0x7b,0x0d,0x6c,0x3f,0x7a,0xda,0x4f,0x80,0x15,0xac,0x9f,0xaf,
    0xe3,0x23,0xe6,0x79,0xb0,0xa4,0x6e,0x87,0x99,0x2d,0xd5,0xf5,0x3d,0xfa,0x1d,0xf7,
    0x1f,0x90,0xa7,0x9f,0x95,0x63,0xe2,0x1d,0x7a,0x98,0x0b,0xe7,0x27,0x1f,0x66,0x21,
    0x3b,0x27,0xa7,0xc8,0xe9,0x4b,0x62,0x4c,0x92,0x93,0xf6,0x53,0x25,0x71,0x4f,0x53,
    0x0f,0xe9,0x9f,0x45,0xe6,0x67,0xf4,0x1c,0xf5,0xbf,0xdd,0xb4,0x34,0xeb,0xe7,0xc1,
    0xce,0x31,0xaf,0xb1,0xce,0xdf,0x07,0xa6,0xbb,0xcf,0xac,0xb2,0xa9,0x29,0x27,0xd7,
    0x04,0x0e,0xbf,0x1b,0xa2,0x59,0xfa,0xcd,0x76,0x17,0xc0,0xff,0xb2,0xdf,0x3a,0x1f,
    0x17,0x91,0x5f,0x0c,0xb3,0x50,0x19,0xce,0x49,0x1d,0x67,0x49,0xf2,0x76,0xf2,0xa8,
    0x07,0x7f,0xd1,0x74,0xf2,0xe1,0x5c,0x67,0xd8,0x9c,0xd0,0xe3,0x8c,0x4b,0x03,0x78,
    0xf4,0x33,0x17,0x3f,0x8d,0xce,0xcf,0x3c,0xf0,0x68,0x33,0x1f,0xec,0x21,0xb3,0xa9,
    0xe2,0xce,0x68,0x00,0x97,0x9f,0x16,0xee,0x9a,0x66,0xce,0x44,0x3b,0xe7,0xaf,0x15,
    0xfc,0x41,0xb3,0x92,0xdd,0x4d,0x60,0xad,0xd4,0x50,0xbc,0x3f,0x37,0x7b,0x9d,0x91,
    0x5b,0x90,0x2f,0x08,0x7d,0xae,0x08,0x67,0xe6,0x56,0x70,0xd5,0xa4,0x48,0x4d,0xfe,
    0x34,0x99,0xf0,0xdb,0x42,0x5d,0xb3,0xba,0xe8,0xf7,0x1f,0xf6,0xbd,0xc0,0xbe,0xe8,
    0x62,0xde,0xe1,0x62,0xc6,0xb9,0xdd,0x0d,0x8f,0x3b,0x89,0x27,0x9d,0x1d,0xdc,0x21,
    0x2b,0xc1,0xc5,0x6b,0x35,0xf7,0x7b,0x33,0x67,0xb6,0x1d,0x9d,0xb5,0xe0,0xa3,0xa6,
    0x53,0x08,0x73,0x93,0xd9,0xad,0x75,0x76,0xed,0xd8,0xb5,0x39,0xbb,0x0e,0xf0,0x17,
    0xb0,0xbb,0x1b,0xdb,0x0e,0xec,0x74,0xb6,0xef,0xc5,0x6e,0x9d,0xeb,0xc7,0x7d,0xe0,
    0x9f,0x9a,0x8e,0xea,0x72,0x3f,0x58,0x2d,0xb5,0xe9,0x74,0xb5,0x91,0x6c,0x7d,0xb8,
    0xe3,0xb3,0x5a,0xe8,0xf7,0xc3,0x66,0xa7,0xf9,0xdb,0x40,0xcc,0x84,0x1c,0x9a,0x42,
    0x4f,0xb3,0xb9,0xdc,0x10,0xee,0x91,0x34,0xe4,0xf5,0x2d,0x78,0xd4,0x55,0x6d,0xa3,
    0x3f,0x7d,0x7f,0xb1,0xea,0x49,0xef,0x07,0x74,0x8a,0xd8,0xac,0x77,0x3c,0x36,0xc3,
    0x63,0x93,0xe3,0xf1,0x08,0x78,0xe4,0xf1,0x28,0x58,0xe4,0xd1,0xed,0x78,0x48,0xd6,
    0x65,0xab,0x9b,0xb8,0x5d,0x8e,0xc7,0x16,0x62,0x97,0x39,0x1e,0x8f,0xc3,0x63,0x8b,
    0xe3,0xf1,0x1d,0x78,0xd4,0x15,0x8f,0xe8,0xaf,0xdb,0xf1,0xb8,0x8c,0x4e,0x27,0x36,
    0x5d,0x8e,0xc7,0x36,0x78,0x6c,0x75,0x3c,0x9e,0x00,0x8f,0x3c,0x9e,0x04,0x8b,0x3c,
    0x7a,0x1d,0x0f,0xc9,0x7a,0x6c,0xf5,0x12,0xb7,0x87,0xd9,0x54,0xdc,0xa7,0x88,0x7d,
    0xd9,0xdd,0xa7,0xca,0x31,0xea,0xf6,0xba,0x1c,0x7f,0x42,0xaf,0x1b,0x3b,0xf9,0xf9,
    0xc4,0x78,0xea,0x7c,0x6e,0x67,0x26,0xfa,0x98,0x53,0xf9,0xd8,0x89,0x8f,0x9d,0xce,
    0xc7,0x55,0xfc,0xc8,0xef,0x25,0x5b,0x83,0xc8,0xc4,0xe9,0x47,0xf2,0x97,0xec,0x9a,
    0x93,0xc9,0xff,0x15,0xe6,0x58,0xb2,0x2f,0x90,0x9d,0x84,0xfb,0x33,0xc8,0xf5,0xa6,
    0xfc,0x6a,0x7c,0x07,0x90,0x47,0xfe,0x92,0xf7,0xdb,0x1a,0x20,0x9f,0x7e,0xd7,0xc7,
    0x67,0xc9,0x49,0x7f,0xd3,0xf8,0x7b,0x0e,0x7c,0x88,0x5a,0x8e,0x38,0x5f,0x92,0x0d,
    0xdb,0x1a,0xc1,0xd7,0x30,0x7d,0xda,0x13,0xe6,0x20,0xeb,0xd3,0x2e,0xfa,0x94,0x86,
    0x7b,0x30,0xc3,0x77,0x70,0xff,0x8e,0x82,0x4d,0x11,0xeb,0x25,0x62,0x8d,0x52,0xb3,
    0xe8,0x77,0x04,0xee,0xd2,0x79,0x99,0x9c,0xfa,0xd1,0x1f,0x26,0xaf,0x71,0x97,0x97,
    0x74,0xc6,0x6c,0x8d,0x63,0x3f,0x46,0x0e,0x7a,0xcb,0x5e,0xe5,0x2d,0xd4,0x5e,0xef,
    0xde,0x01,0xde,0xbc,0x2e,0xcb,0x41,0xef,0xdd,0x1b,0xe8,0x1c,0x70,0x77,0xc7,0x9b,
    0x70,0x39,0xe8,0xee,0x8e,0x43,0xe0,0xf1,0xce,0x79,0x8b,0xda,0x1d,0x72,0x35,0x78,
    0x1b,0xbb,0xc3,0xae,0x06,0xef,0x80,0xc7,0x1a,0xbc,0x0b,0x16,0x7b,0xf0,0x3e,0xbe,
    0x12,0x87,0x1d,0x01,0x2b,0x0b,0xf7,0x40,0x1a,0xde,0xda,0xa3,0xe8,0x1e,0xc1,0xc7,
    0x63,0x56,0x1f,0xbd,0xb9,0x1f,0xc2,0xe1,0x28,0x77,0xfa,0x10,0x7e,0x34,0x53,0x1f,
    0x21,0x4f,0xc2,0x9b,0x98,0x61,0x1f,0x83,0x1f,0xe3,0x9d,0x4a,0xc3,0x1c,0x67,0x33,
    0xa4,0xbb,0xe2,0x2c,0x7a,0xc7,0xd1,0x95,0x6c,0x06,0xec,0x33,0xe6,0xf4,0x38,0xfd,
    0x8a,0xf5,0x1e,0x77,0x73,0x7c,0x0d,0x9d,0x11,0xf4,0xc7,0x1c,0xf7,0x13,0x9c,0x95,
    0xe7,0xe1,0x79,0x92,0xfe,0x9f,0x70,0x77,0xc6,0x25,0xf0,0xab,0xee,0x3c,0x0e,0x12,
    0x67,0x90,0xb7,0x23,0xe5,0x1c,0x5c,0xf9,0x9f,0xf3,0x36,0xe0,0xfa,0xf1,0x15,0xfd,
    0x38,0xed,0xfa,0xf1,0x35,0xf8,0x10,0x77,0xc9,0x34,0x58,0x7c,0xb3,0xcf,0xf0,0xd6,
    0x4e,0x13,0x4b,0xd8,0x37,0xe0,0xf5,0xc1,0x77,0x1a,0xfe,0x07,0x99,0xe1,0xff,0x94,
    0x36,0xe4,0x1d,0x36,0x93,0x33,0x70,0xf7,0x6f,0xa1,0xbe,0x7f,0x5b,0x27,0xd7,0xd8,
    0xfa,0x17,0xa6,0x3f,0xe9,0xd3,0xdc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//
//     ivec4 blitArea;
//     int destPitch;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)buffer dest
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             vec2 srcImageCoords = vec2(destSubImageCoords);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//     {
//         srcImageCoords . x = - srcImageCoords . x;
//
//         srcImageCoords . x -= 1;
//     }
//     if(params . flipY)
//     {
//         srcImageCoords . y = - srcImageCoords . y;
//         srcImageCoords . y -= 1;
//     }
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = params . flipX ? - 1 : 1;
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if(srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)
//         {
//
//             uint stencilValue = texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         srcImageCoords . x += xDir;
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
