// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xd9,0x6f,0x94,0x55,
    0x18,0xc6,0xbf,0xe9,0xb4,0xd3,0x32,0xda,0xd2,0x6a,0x0b,0xd8,0x01,0x4a,0xad,0xc1,
    0x65,0x0c,0x60,0xc2,0x1a,0xdb,0x46,0x5c,0xa8,0x51,0x90,0xb6,0x2e,0xa0,0x34,0x26,
    0x26,0xf5,0xa2,0x8b,0xd6,0x58,0xda,0x44,0xad,0xb4,0x96,0x8a,0x45,0x83,0x08,0x2e,
    0x6c,0xc1,0x48,0x0c,0x89,0x46,0x6a,0x23,0x88,0xd1,0xc8,0x76,0xa1,0x31,0xf1,0x06,
    0x41,0xbc,0xc2,0x7f,0xc3,0x3d,0x46,0xdf,0xe7,0x7c,0xbf,0x63,0xde,0x4c,0x9c,0xe4,
    0xe4,0x7c,0xe7,0x79,0xf7,0xed,0x9c,0xc9,0x96,0xb5,0x54,0x26,0xd9,0x4c,0x92,0x4f,
    0xaa,0x92,0x9f,0x93,0xf4,0x57,0x97,0x94,0x25,0x19,0xdb,0xaf,0x49,0x72,0x61,0xef,
    0xd8,0xf8,0xf0,0xc6,0x65,0xc3,0xdb,0x7b,0x97,0xad,0x5c,0xb5,0x42,0xf4,0x9a,0x24,
    0x1b,0xf8,0x44,0x9b,0x6b,0x3c,0x15,0xb6,0x97,0xdb,0x7a,0xe6,0xa9,0xbe,0x67,0x85,
    0x57,0xdb,0xaa,0x35,0xbc,0x3c,0xe8,0x4a,0x4c,0x73,0xba,0x82,0x2e,0x43,0xab,0x83,
    0xee,0x24,0x59,0x68,0xeb,0x7e,0x93,0x5e,0x84,0xdd,0x16,0xf6,0x88,0x65,0xc0,0xaa,
    0x1c,0x56,0x06,0x56,0xeb,0xb0,0x2c,0xd8,0x02,0x87,0x95,0x83,0x79,0x1b,0x15,0x60,
    0x4b,0x1c,0x96,0x03,0x5b,0xe1,0xb0,0x4a,0xb0,0x95,0x0e,0xab,0x02,0x5b,0xeb,0xb0,
    0x39,0x60,0xad,0x21,0xae,0xec,0x7f,0xfe,0x29,0xc6,0x29,0xdb,0x6f,0x24,0x9e,0x78,
    0x6e,0x76,0x39,0x98,0x2e,0xa1,0x4f,0x43,0x8f,0xf2,0x27,0xf0,0xad,0x1c,0x7b,0x33,
    0x25,0x39,0x92,0xbd,0x19,0xc7,0x3f,0x5b,0xa2,0x6f,0x16,0x7d,0xf1,0x7c,0x8e,0x9c,
    0xdf,0x60,0xeb,0x7a,0x93,0x2a,0x0b,0xf4,0x6c,0xc8,0x9d,0xbe,0x1b,0x8c,0x27,0x47,
    0x6e,0xe4,0xe3,0x7c,0x3b,0x57,0xe2,0x43,0xa4,0xe7,0xa1,0x27,0xd0,0xa5,0x2f,0x4f,
    0xfe,0x97,0xd8,0xf9,0x5a,0x64,0x85,0xdf,0xc9,0xb9,0x1a,0xac,0x88,0x7c,0x0d,0xf2,
    0xe2,0x9f,0x0b,0x2d,0xef,0xe8,0xd7,0x11,0x73,0x3c,0x37,0xc0,0x33,0xcf,0xac,0x34,
    0x62,0x5f,0xb6,0x0b,0xb6,0x37,0xe2,0x9b,0xce,0x0b,0x5d,0xbe,0x16,0x9b,0x65,0xd5,
    0xa2,0xe0,0x56,0x8e,0x15,0xf9,0xf2,0x6e,0xc9,0x97,0xc5,0xd4,0x73,0x11,0xbe,0xeb,
    0xdc,0x04,0x56,0x74,0xb9,0xa9,0x80,0xbf,0x19,0x9a,0xf4,0xd5,0x9b,0x17,0x4b,0xf1,
    0xe3,0x66,0xdb,0x97,0xe2,0x57,0x94,0x5b,0x4d,0x0c,0x92,0x5b,0x83,0x5c,0xc1,0xd1,
    0x5b,0xc9,0x49,0x3c,0xaf,0xa7,0x07,0xc5,0x7f,0x37,0xfc,0x79,0x47,0xdf,0x44,0x3f,
    0xc6,0xf3,0x96,0x12,0x3f,0x7b,0x6d,0xfd,0x63,0xbf,0x78,0x1e,0x72,0x39,0x55,0xce,
    0x86,0x5d,0x0d,0x5e,0x40,0x36,0x17,0x7a,0x63,0x4e,0x32,0x89,0xad,0x0c,0x3c,0xa5,
    0xbb,0x64,0x76,0xf2,0x3d,0x49,0xae,0x74,0x9e,0x02,0x6b,0xb4,0xc8,0x77,0xc1,0xf7,
    0x1a,0xd8,0x2e,0xf8,0x74,0x9e,0x06,0x2b,0x58,0x3d,0x5f,0x47,0x47,0xf4,0x73,0x4f,
    0x49,0xde,0xf6,0xd1,0x5b,0xca,0xeb,0xbb,0xd4,0x3b,0x9e,0x0f,0xe1,0xa7,0xef,0x95,
    0xa3,0x8a,0x3b,0xd4,0x30,0x1b,0xe6,0x27,0x1f,0x7a,0x21,0x9d,0x93,0x13,0xf8,0xf4,
    0xa9,0xed,0xea,0xcb,0x19,0x7c,0xd2,0x79,0x16,0x2c,0xda,0x3d,0x49,0x3e,0xc4,0xff,
    0x35,0x34,0xdf,0xa3,0x67,0xc9,0xff,0xed,0xc6,0xa5,0x5e,0x3f,0x07,0x76,0x96,0x7e,
    0x5d,0x6d,0x5d,0x52,0x86,0x6f,0x09,0x3e,0xff,0x6e,0x88,0x7a,0xe7,0x37,0x3b,0x9d,
    0x07,0xff,0xcb,0xbe,0x35,0x0f,0x17,0xa0,0x5f,0x08,0xb5,0xaf,0x08,0x73,0x51,0xcb,
    0xec,0x88,0xde,0x86,0xdd,0x3a,0xf0,0x29,0xe3,0xc9,0x87,0x39,0x4e,0x31,0xcd,0xcc,
    0x18,0xbe,0xd7,0x83,0x47,0x3d,0xf3,0xd0,0xd3,0xe0,0xf4,0xcc,0x07,0x8f,0x32,0x0b,
    0xc0,0x3a,0x4d,0xa6,0x92,0x3b,0xa2,0x1e,0x5c,0x7a,0x9a,0xb9,0x5b,0x9a,0x98,0x81,
    0x36,0xe6,0xad,0x05,0x7c,0xb3,0x49,0x49,0xee,0x26,0xb0,0x16,0xea,0xa8,0xb8,0x4f,
    0x99,0xbc,0x66,0xe2,0x16,0xe8,0xd2,0x7d,0xd8,0xe4,0x35,0x23,0xb7,0x82,0x2b,0x27,
    0x45,0x72,0xf2,0xa7,0xd1,0x84,0xdf,0x16,0xf2,0x9d,0xe6,0x45,0xdf,0x7f,0xd8,0x7e,
    0x9e,0x73,0xd1,0xd9,0x5c,0xee,0x6c,0xc6,0x3e,0x9d,0x20,0x8e,0x3b,0xb0,0xb7,0x3c,
    0xcc,0x40,0x7a,0x67,0xac,0x02,0x57,0x5c,0x6b,0xb8,0xcf,0x9b,0x98,0xd1,0x36,0x78,
    0xd6,0x81,0xbf,0x6a,0x3c,0x85,0xd0,0x27,0xa9,0xdc,0x3a,0x27,0xd7,0x86,0x5c,0xab,
    0x93,0x6b,0x07,0xdf,0x89,0xdc,0x5d,0xc8,0xb6,0x23,0xa7,0x59,0xbe,0x07,0xb9,0xf5,
    0xae,0x1e,0xf7,0x82,0x7f,0x62,0x3c,0xca,0xcb,0x7d,0x60,0x35,0xe4,0xa6,0xc3,0xe5,
    0x46,0xb4,0x0d,0xe1,0x4e,0x4f,0x73,0xa1,0xef,0x2e,0x93,0xd3,0x6c,0x3c,0x80,0x4d,
    0xfd,0xc6,0x99,0xf5,0x07,0xc1,0xbb,0xad,0xd2,0xf2,0xe9,0x3b,0xb0,0xc8,0xa7,0xbc,
    0x46,0x5d,0xda,0x7f,0xb1,0xcc,0x89,0xef,0x07,0x78,0x8a,0xc8,0x6c,0x70,0x31,0x3c,
    0x44,0x0c,0x9b,0x5c,0x0c,0x9b,0xc1,0x63,0x0c,0x9d,0x60,0x31,0x86,0x6e,0x17,0x43,
    0x67,0xf0,0x39,0x09,0x98,0xec,0x76,0xb9,0x18,0x1e,0xc1,0x76,0xc6,0xc5,0xf0,0x28,
    0x78,0x8c,0xe1,0x7b,0xb0,0xc8,0xa7,0x18,0xa2,0xae,0x6e,0x17,0xc3,0x25,0x78,0x3a,
    0x90,0xe9,0x72,0x31,0x6c,0x25,0x86,0x2d,0x2e,0x86,0xc7,0xc1,0x63,0x0c,0x4f,0x80,
    0xc5,0x18,0x7a,0x5c,0x0c,0xa2,0x6d,0xb3,0xd5,0x83,0xdd,0x6d,0xf4,0xa4,0xec,0x3e,
    0x89,0xed,0x4b,0xee,0xde,0x94,0x8f,0x91,0xb7,0xc7,0xf9,0xf8,0x13,0x7c,0xdd,0xc8,
    0x49,0xcf,0xc7,0x16,0xa7,0xe6,0xf2,0x69,0x7a,0xa1,0x97,0xfe,0x94,0x8e,0x3e,0x74,
    0xf4,0x39,0x1d,0x57,0xd0,0x23,0xbd,0x17,0x6d,0x0d,0x42,0x53,0x4c,0x3f,0xe2,0xbf,
    0x68,0x57,0x1d,0x4d,0xfa,0x2f,0xd3,0xbf,0x3d,0x21,0xe6,0x94,0xf6,0x19,0xb1,0x3f,
    0x07,0x5d,0x6f,0xc7,0xaf,0x16,0xef,0x00,0xf4,0x18,0xbf,0xe8,0xfd,0xb6,0x06,0xf0,
    0xa7,0xdf,0xd5,0xf0,0x79,0x7c,0x4a,0xc2,0xdd,0x98,0xea,0xdb,0x0e,0x3e,0x4c,0x2e,
    0x47,0x9d,0x2e,0xd1,0x46,0x6c,0x8d,0xa2,0x6b,0x84,0x3a,0xe9,0x6d,0x7a,0x91,0x3a,
    0x0d,0x51,0x27,0xf9,0xfd,0x12,0xf8,0x10,0xfd,0x31,0x06,0xf6,0x25,0xb6,0x5e,0xc6,
    0xd6,0x18,0x39,0x8b,0x7a,0x47,0x89,0x5d,0x3c,0x3b,0xf0,0xa9,0x1f,0xfe,0x11,0xfc,
    0x9a,0x70,0x7e,0xed,0x08,0x3d,0x98,0x04,0x4c,0xf2,0xe3,0xf8,0x30,0x19,0xee,0x86,
    0xf4,0xcd,0xd3,0x59,0xef,0xdb,0x6e,0xde,0xb6,0xc7,0xcc,0x07,0xbd,0x6b,0x6f,0xc0,
    0xb3,0xdb,0xdd,0x19,0x6f,0x12,0xcb,0x1e,0x77,0x67,0xec,0x05,0x8f,0x77,0xcd,0x5b,
    0xe4,0x6e,0xaf,0xcb,0xc1,0x7e,0xe4,0xf6,0xb9,0x1c,0xbc,0x0d,0x1e,0x73,0xf0,0x0e,
    0x58,0xac,0xc1,0x7b,0xe8,0x4a,0x1c,0x76,0x00,0x2c,0x13,0xe6,0x33,0x17,0xde,0xd4,
    0x83,0xf0,0x1e,0x40,0xc7,0x56,0xcb,0xcf,0xa1,0x70,0x47,0xa7,0x31,0x1c,0xe4,0x2e,
    0x1f,0x46,0x8f,0x7a,0xea,0x08,0xf4,0x24,0xdc,0x0d,0x29,0xf6,0x3e,0xf8,0x51,0xde,
    0x27,0xf9,0xf8,0x01,0x3d,0xa4,0x7b,0xe2,0x1b,0xf8,0x8e,0xc1,0x2b,0xda,0xb7,0x60,
    0x1f,0xd2,0xa7,0xc7,0xa8,0x57,0xcc,0xf7,0x84,0xeb,0xe3,0xab,0xf0,0x8c,0xc2,0x3f,
    0xee,0x62,0x3f,0xce,0xac,0xbc,0x42,0x9c,0x1f,0x51,0xff,0xe3,0xee,0xce,0xb8,0x08,
    0x7e,0xc5,0xcd,0xe3,0x20,0x76,0x06,0x79,0x33,0x72,0xcc,0xc1,0xe5,0xff,0x99,0xb7,
    0x01,0x57,0x8f,0x53,0xd4,0xe3,0xa4,0xab,0xc7,0xe7,0xe0,0x63,0xdc,0x25,0xa7,0xc1,
    0xe2,0x5b,0xfd,0x05,0x6f,0xec,0x69,0x6c,0x09,0xfb,0x0a,0xbc,0x2e,0xe8,0xce,0x85,
    0xff,0x1a,0x67,0xf8,0x3f,0xd2,0x0a,0xbd,0xdd,0x7a,0xf2,0x0c,0xb1,0xfb,0x37,0x50,
    0xfb,0xdf,0x56,0xc9,0xb5,0xb6,0xfe,0x05,0x45,0x04,0x8f,0x5f,0xc4,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//
//     ivec4 blitArea;
//     int destPitch;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             vec2 srcImageCoords = vec2(destSubImageCoords);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = params . flipX ? - 1 : 1;
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if(srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)
//         {
//
//             uint stencilValue = texture(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer)). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         srcImageCoords . x += xDir;
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
