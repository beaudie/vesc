// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x97,0x55,
    0x15,0x7e,0xcf,0xfd,0x2d,0xfb,0x81,0x8e,0x50,0xca,0x97,0x2d,0x5f,0xcb,0xa0,0xd0,
    0xee,0xac,0x40,0xb0,0x51,0x80,0xb0,0x82,0x02,0x81,0xa0,0x29,0x53,0xb1,0x10,0xc9,
    0xc7,0x88,0x31,0xc0,0x1a,0x18,0x5f,0x1b,0x01,0x41,0x88,0x98,0xb9,0xbb,0xd0,0x96,
    0x18,0xd5,0x3f,0x96,0xc2,0x34,0xfe,0x53,0x53,0xe6,0x36,0x13,0x81,0x26,0x88,0x22,
    0x34,0x44,0x09,0x91,0x81,0x4a,0x2b,0xd4,0xe4,0x07,0x5f,0xda,0xd8,0x7d,0xde,0xf3,
    0x1c,0xde,0xb3,0xef,0x2c,0xbf,0x99,0x3b,0xef,0x7b,0x9f,0x73,0xee,0x39,0xcf,0x3d,
    0xf7,0xdc,0x7b,0xcf,0xef,0x2d,0x84,0x01,0x25,0x49,0x41,0x92,0xce,0x49,0x69,0x52,
    0x52,0x48,0xd2,0xdf,0x27,0x92,0x90,0x48,0x7c,0x5e,0x93,0x14,0xa7,0xcf,0x89,0x53,
    0xef,0x99,0x5a,0xbd,0x6c,0xf9,0xfc,0xea,0xe1,0x23,0x86,0x40,0x7e,0x5d,0xa2,0x8a,
    0x90,0x75,0x49,0x4a,0x92,0x4e,0xf1,0x59,0x14,0xdb,0xe2,0xfb,0x1e,0x58,0x02,0xfc,
    0x70,0x6c,0x6d,0xb1,0x75,0x8d,0xe3,0x8b,0x52,0x7b,0x49,0xb4,0xae,0x2d,0xb5,0x17,
    0xd1,0x71,0xf1,0x59,0x9c,0xea,0x24,0xc9,0xa4,0x68,0xa1,0x56,0x5d,0x27,0x03,0xf8,
    0x34,0x4c,0x88,0x79,0xbd,0x40,0xac,0x9f,0xc3,0x0a,0xc4,0x86,0xd0,0xfe,0x78,0xda,
    0x1f,0x22,0xaa,0x33,0x21,0x67,0x7f,0x62,0x1c,0x31,0x81,0xb6,0xa0,0x7f,0x47,0x7c,
    0x56,0x5c,0x91,0x69,0xbf,0xbf,0xe3,0xbb,0x36,0x27,0x5f,0x4b,0x79,0x11,0xfb,0x4d,
    0xb9,0xf9,0x34,0x77,0x30,0x9f,0xe6,0x0e,0xe6,0xd3,0xdc,0xc1,0x7c,0x9a,0x3b,0x98,
    0xcf,0x36,0x9b,0x4f,0x91,0xea,0x6c,0xef,0x60,0x3e,0xdb,0xdd,0x7c,0x5a,0x72,0x7c,
    0x5b,0xc8,0xd7,0xe4,0x87,0xd3,0xf5,0x4d,0x92,0x72,0xfa,0x3c,0xda,0x01,0xdf,0xa3,
    0x8e,0x6f,0x29,0x7d,0x1c,0x75,0x36,0xce,0xe4,0x7c,0x9c,0xa1,0x8f,0x02,0xfb,0x6d,
    0xf4,0x71,0x23,0xfb,0x6f,0x48,0x7b,0x7d,0xf4,0xfb,0xbb,0xfe,0x07,0xa2,0xfa,0xbd,
    0x62,0xbb,0x3e,0x7a,0x09,0xa9,0xbd,0x42,0x6a,0x0f,0xef,0xdd,0xa2,0x4e,0x31,0xe3,
    0x84,0x5f,0x8f,0xd8,0x2f,0x61,0x5c,0x02,0xfb,0xa5,0xec,0x63,0x5d,0x6e,0x88,0x68,
    0x59,0x7c,0x76,0x8f,0x16,0xba,0x71,0x1c,0x74,0x2a,0x52,0x5b,0xaa,0x83,0xfe,0xe0,
    0xf8,0x2c,0xa3,0x8d,0x4a,0xfa,0xa8,0xa1,0x0f,0xeb,0x8f,0xa2,0xbe,0xf5,0xc7,0x72,
    0x0d,0xcb,0x99,0xcb,0xa5,0xc4,0xfa,0x44,0x69,0x2d,0xfb,0x15,0x7c,0x8e,0x73,0xe3,
    0x6e,0x23,0x8f,0x72,0xe6,0x68,0x2d,0xb1,0x3e,0xcc,0xc7,0xf1,0xa9,0xbc,0x28,0xb9,
    0x9d,0x7c,0x26,0xa4,0xbe,0xb5,0x7f,0x87,0x8b,0xc3,0x44,0xda,0x11,0xda,0x9e,0x98,
    0xae,0x59,0xc6,0x19,0xfd,0xc9,0x5c,0x0b,0xd8,0x9b,0xca,0xb1,0xa5,0x8e,0x4b,0x9d,
    0x1b,0x8f,0xfe,0xbc,0x5c,0x0c,0xea,0x73,0xfa,0x0f,0xc5,0xf6,0x71,0xba,0x3e,0x65,
    0x49,0x03,0x63,0x28,0xf4,0x99,0x7f,0xc2,0xe7,0xb7,0xf8,0xde,0xc0,0x39,0xa0,0xbf,
    0xd6,0xad,0xdd,0xfa,0x74,0xdd,0xb3,0xb5,0xdb,0xc8,0x7e,0xc1,0xf9,0x6c,0x64,0xfc,
    0xca,0xb9,0xc7,0x4a,0x89,0x21,0xce,0xcd,0xb9,0x38,0x37,0x51,0x0f,0x7b,0xa5,0xd9,
    0xc5,0x15,0xfb,0x62,0x1b,0x39,0xfd,0x80,0xfe,0xb6,0x93,0x13,0xfa,0x2d,0x8e,0xc3,
    0xef,0x38,0x2f,0xe3,0x80,0xf7,0xd6,0x94,0xf1,0xba,0xb1,0x90,0x1f,0x62,0x7e,0x59,
    0x5c,0x5f,0xe3,0x9c,0x0f,0xd1,0xde,0x6b,0x3c,0xff,0x24,0xf5,0x5d,0x94,0xee,0x17,
    0xcb,0x51,0xe8,0xff,0x85,0xb9,0x76,0x94,0xfa,0xe8,0x1f,0x23,0x06,0xf9,0x5f,0xf9,
    0x5e,0xe2,0xfc,0x9f,0x62,0xcc,0xaa,0x22,0x8a,0xb9,0x9e,0x26,0x66,0xad,0x95,0x6b,
    0xf2,0x16,0xfd,0xd8,0x1a,0x24,0x1d,0xac,0xc9,0xdb,0x7c,0x7f,0x8b,0xfe,0xd1,0x3f,
    0x43,0xcc,0xf8,0xb7,0xe5,0xf2,0x4a,0x44,0xfb,0xe6,0xbf,0x46,0xda,0xfb,0x3f,0xe5,
    0x74,0xc7,0x8a,0xc6,0x12,0xbe,0xc6,0xf1,0xdd,0xe6,0xfe,0x0d,0xf6,0x2b,0xdc,0xfa,
    0x3e,0x1d,0xb1,0x39,0x6e,0xae,0xbf,0x8a,0xfd,0x83,0x2f,0xbf,0x7c,0xab,0xf9,0xfa,
    0x75,0xce,0x17,0xe4,0xb0,0xf5,0x82,0x68,0x9c,0x8a,0x39,0xf7,0x93,0xd2,0x3e,0x1f,
    0xed,0x17,0x88,0x61,0xcc,0x3f,0x28,0x84,0xee,0x28,0xf6,0xdf,0x10,0x8b,0x6d,0x71,
    0xba,0x86,0x38,0x83,0xea,0x99,0xfb,0xd8,0x1f,0xd5,0x71,0xa5,0xd3,0xf5,0x2b,0xe0,
    0x4c,0xe8,0x94,0xda,0x2b,0xa2,0x6d,0xe4,0xc0,0xc5,0x88,0xe0,0xfe,0xbb,0x10,0x7b,
    0xe7,0x69,0xeb,0xc3,0xf8,0x8e,0xf3,0xe3,0x82,0xa8,0x1c,0xcf,0x31,0xcc,0x9d,0x23,
    0xcc,0x8f,0xe9,0xd1,0x2a,0xec,0xfe,0x99,0xd8,0x11,0xb7,0x56,0xb5,0xd1,0x22,0xf2,
    0xe0,0x6f,0xcc,0x0d,0xec,0xeb,0x31,0x3c,0xeb,0x5e,0x27,0xfe,0xcb,0xa8,0x83,0x73,
    0xeb,0x38,0x6d,0x00,0x7f,0x22,0xea,0x20,0x26,0x27,0x88,0x83,0xd3,0x49,0xda,0xbd,
    0x1c,0x65,0xc0,0xff,0x8e,0xf9,0x93,0x37,0xde,0x2f,0xc5,0xe7,0x79,0xf2,0x3c,0x49,
    0x3f,0xc8,0x8d,0x7f,0x31,0x2f,0x8c,0xf7,0x3b,0xcc,0x0b,0xe3,0x7d,0x96,0xd8,0x3b,
    0x8e,0x77,0x03,0xf7,0xf4,0x39,0xca,0xe7,0x44,0x4d,0xec,0xcb,0x7f,0xd3,0xde,0x39,
    0xae,0x07,0xe6,0x73,0x77,0xe4,0x8f,0xb5,0x7b,0x97,0xf2,0xc4,0x61,0x1f,0x10,0x13,
    0xe3,0x47,0xbe,0xe7,0x53,0x99,0xe6,0xc5,0xbe,0xa0,0xfb,0x20,0x9d,0x4b,0x80,0x9e,
    0xca,0x30,0xfe,0x0f,0x41,0x6d,0x40,0x56,0x2c,0x2a,0xdb,0x15,0x6d,0x23,0x36,0x1f,
    0x51,0x8e,0xf5,0x39,0x1f,0xf9,0x5e,0x4c,0x54,0x6e,0x31,0xfa,0x28,0x8d,0x5b,0x92,
    0xe2,0xe9,0xda,0xc5,0xe7,0xb5,0xd1,0xea,0x44,0x9e,0x7d,0xc2,0x73,0x15,0x36,0x1a,
    0x98,0xc3,0x00,0x21,0xdb,0x1b,0x7d,0xa4,0xe7,0x97,0xe8,0x9e,0x01,0x6e,0x3a,0x45,
    0xa2,0xf8,0x0b,0x9c,0x23,0x78,0xc1,0x06,0xf0,0xda,0xc8,0x1b,0xe7,0x73,0x99,0xe8,
    0x59,0x34,0x89,0x36,0x6d,0xdd,0x11,0xc3,0xce,0xa2,0x72,0x8b,0x7f,0x08,0x8a,0x75,
    0x96,0x2c,0xfe,0x96,0x13,0x85,0xa0,0x39,0x01,0x9d,0x1d,0xcc,0x89,0xa2,0xa0,0x38,
    0x72,0xa2,0x2c,0x64,0xf3,0x05,0xde,0x29,0x36,0x60,0x69,0x2e,0x87,0xcc,0x47,0xb1,
    0xf3,0x11,0x98,0xef,0xcf,0xd2,0x47,0x09,0x7d,0x14,0x3b,0x1f,0xa5,0x41,0x71,0xac,
    0x99,0xd9,0x2b,0x0b,0xba,0x2e,0x90,0x77,0x0e,0xca,0xe3,0x02,0x75,0xe1,0xeb,0x17,
    0x1c,0x7b,0x9d,0xa8,0x1c,0xfc,0xba,0x4a,0xc6,0x0f,0x78,0x97,0xd8,0xba,0x32,0x47,
    0xbb,0x88,0xda,0xbf,0xc4,0xf5,0x01,0x6e,0x79,0x73,0xbd,0x64,0xfb,0xc8,0xb0,0x6e,
    0x2e,0x46,0xcf,0x30,0x07,0xba,0x8b,0xea,0x42,0x66,0xfe,0x7b,0x88,0xe2,0xf0,0xdf,
    0xcb,0xf9,0x07,0xde,0x33,0xb6,0x5e,0xf4,0xdf,0xd3,0xf9,0xfb,0x14,0xfd,0x89,0xf3,
    0xd7,0x9b,0xfe,0xc4,0xf9,0xeb,0x23,0xaa,0xdb,0x9b,0xdc,0xcd,0x16,0x9e,0x16,0x9b,
    0xbe,0xf4,0x8f,0xf9,0xf4,0xa1,0x4f,0xe3,0xd6,0x4f,0x54,0x0e,0x6e,0x15,0x8e,0x1b,
    0xf0,0xfe,0xa8,0xa9,0x68,0x0f,0xef,0xeb,0xc8,0x63,0x20,0xe7,0x58,0xe7,0xb8,0xdd,
    0xec,0xd6,0xd2,0xb8,0x0d,0x12,0xd5,0xbd,0x99,0xdc,0xcc,0x56,0x85,0xe3,0x36,0x98,
    0xfe,0xc1,0x77,0x10,0x7d,0x1a,0xb7,0x4f,0x8b,0xca,0xc1,0xad,0xca,0x71,0x03,0x5e,
    0x19,0x5b,0x15,0xed,0x55,0xba,0xb8,0x55,0xbb,0xb8,0x19,0xdf,0x5b,0x44,0x71,0xcf,
    0x77,0x28,0xf9,0x16,0x1c,0xdf,0x61,0xa2,0xba,0x43,0xc9,0xd7,0xec,0x57,0x39,0xbe,
    0x9f,0x21,0x27,0xcc,0x61,0x18,0x79,0x80,0xdf,0x08,0xc7,0x0f,0x3a,0xc3,0x63,0x1b,
    0xc1,0xf1,0xc3,0x73,0x79,0x05,0x7c,0x43,0xf4,0x89,0x7d,0x30,0x5a,0xb2,0xfd,0x54,
    0x1b,0x77,0x23,0xee,0xb5,0xda,0xdc,0x5e,0xc5,0xbd,0x57,0xc3,0xfd,0x9a,0xd6,0x79,
    0xd4,0x81,0xdf,0x61,0xa1,0xfd,0xbd,0xf0,0x49,0xee,0x0d,0x3c,0xaf,0xe4,0x6e,0x50,
    0x3f,0xf8,0x7d,0x97,0xd8,0x0d,0x41,0x71,0xd8,0x32,0xac,0x7b,0x50,0x7c,0x54,0xa2,
    0x5c,0x70,0x6e,0xf4,0x08,0xed,0xb9,0x4c,0xa6,0x9e,0x9d,0x1d,0x3d,0x83,0xea,0x6c,
    0xa1,0x8d,0x1b,0x9d,0x0d,0x8b,0x6b,0x79,0x50,0xbc,0x86,0xf7,0xc6,0x50,0x77,0x46,
    0x40,0xd6,0x3b,0xb6,0x7e,0xe4,0x8d,0xa7,0x8d,0xab,0xe0,0xb8,0x3a,0x8e,0x1b,0xe2,
    0xc6,0x41,0x36,0x20,0xb6,0x9b,0x38,0xee,0x26,0x37,0x6e,0x10,0xc7,0xcd,0xe3,0xb8,
    0x5b,0xdc,0x38,0xc8,0x06,0xc7,0x56,0xc5,0x71,0x55,0x2e,0x4e,0xd5,0x41,0xe7,0x53,
    0xe0,0xdd,0x30,0x8c,0x3a,0x83,0x9d,0x4e,0x25,0x75,0x42,0x4e,0x07,0x3e,0x3e,0x8e,
    0x01,0xc2,0xfb,0x00,0xa7,0x3f,0x90,0xfa,0x92,0xd3,0x1f,0xe2,0xf4,0x7b,0x3b,0xfd,
    0xbe,0xd4,0x4f,0x72,0xfa,0x43,0x9d,0xfe,0xb0,0xf4,0xdc,0xbb,0x26,0xd5,0x3f,0x16,
    0x94,0x37,0xe6,0x51,0xc9,0xb9,0x0d,0x64,0x6c,0xfa,0x32,0xb6,0x66,0x7b,0x8a,0xcb,
    0x79,0xc3,0xee,0x74,0x67,0xca,0x06,0x62,0xd3,0x44,0x75,0x21,0xdb,0xcd,0x98,0xde,
    0x23,0xea,0x6b,0x1a,0xf3,0x6e,0x86,0xcb,0x77,0xc8,0xee,0x8d,0x6d,0x06,0xf3,0xfd,
    0x5e,0xb7,0x1f,0xbf,0x24,0x9a,0x7b,0x7e,0x3f,0x7e,0x59,0x14,0x1f,0xc5,0x7b,0x05,
    0xf6,0x67,0x8a,0xe2,0xd3,0xb8,0x57,0xcc,0xd6,0x0c,0xb7,0xf7,0xea,0x44,0x79,0x60,
    0xfe,0x33,0xe9,0x13,0x5c,0x66,0x3b,0x2e,0xd0,0x99,0x15,0xdb,0x6c,0x8e,0x9f,0xe5,
    0xb8,0xdc,0xe7,0xb8,0xd8,0x5d,0x39,0x57,0x74,0x1f,0x40,0xf6,0x22,0xb1,0x79,0xa2,
    0x78,0x9d,0xcb,0xe1,0xf9,0xa2,0x78,0x0d,0xd7,0xc5,0xec,0xcf,0x76,0xfc,0x16,0x88,
    0x72,0x04,0xe7,0xf9,0xe4,0x61,0xbe,0x17,0x3a,0xdf,0x16,0xe7,0x07,0x38,0x5f,0xc8,
    0x9e,0xa5,0x9f,0x45,0xa2,0xf8,0x31,0x77,0x7f,0x2d,0x16,0xb5,0xfd,0x73,0xea,0x2c,
    0x11,0xd5,0x5b,0xcc,0xf9,0xd7,0xbb,0xf9,0x43,0xb6,0x14,0x75,0x26,0xf9,0x2d,0x65,
    0x0d,0x80,0xfa,0x78,0x59,0xee,0x5c,0x11,0xd6,0x8e,0xa8,0x79,0x96,0x53,0x3e,0x3d,
    0xee,0x6a,0xfc,0x4f,0xa9,0x09,0x5a,0x07,0xed,0x0b,0x59,0x0d,0x10,0x98,0x37,0xa8,
    0x85,0x3f,0x1b,0x74,0x0c,0x72,0xe9,0x3b,0xc4,0x46,0x06,0xfd,0xbf,0x00,0xd9,0x63,
    0x11,0x83,0x9d,0xcf,0x05,0xb5,0x35,0x32,0x64,0xb6,0x3f,0xcf,0xb1,0xcb,0xa5,0xbd,
    0x6d,0x1b,0x33,0x3a,0xa8,0x0e,0xec,0xac,0x27,0x36,0x26,0xa8,0xad,0xd1,0x21,0xe3,
    0x70,0x2b,0xf9,0x81,0xc3,0x26,0x62,0xb5,0x41,0xf1,0x91,0x4e,0xef,0xb6,0xa0,0xe3,
    0x13,0xc7,0x7f,0x3c,0x31,0x71,0xd8,0x04,0x62,0x50,0xbd,0x8b,0xb5,0xe0,0xed,0x41,
    0xc7,0x43,0x1f,0xf2,0x5a,0xd6,0x20,0x16,0xdf,0x7a,0xc9,0xea,0xc6,0x4b,0xe4,0x83,
    0x9c,0xc0,0xb8,0xa5,0xb9,0x73,0x5f,0xeb,0xc8,0xb2,0x54,0xf7,0x22,0x75,0x51,0x73,
    0xd4,0xf0,0xbe,0xc0,0xf8,0x7a,0x69,0x5f,0x97,0x5e,0x64,0xbe,0xad,0xa4,0xbf,0x95,
    0xce,0xdf,0x5e,0xda,0x80,0xce,0xe5,0xf8,0x5c,0x23,0x59,0x9d,0xba,0x27,0x68,0xfd,
    0x0b,0xd9,0x66,0x51,0x99,0xd5,0xa9,0x6b,0x45,0xe5,0x56,0xa7,0xae,0xa6,0xdc,0x72,
    0x08,0xf2,0x55,0xb1,0xad,0xa6,0x4f,0xbc,0x5b,0x9d,0xba,0x5e,0xb2,0x3a,0x75,0x8f,
    0xab,0x53,0x37,0x88,0xca,0xac,0x4e,0xdd,0xc8,0xfc,0xda,0xe0,0xea,0xd4,0x4d,0xa2,
    0xb8,0xed,0xbd,0xcd,0xe4,0xb1,0xc9,0xd5,0xa9,0x8f,0x88,0x7e,0x8b,0x98,0x44,0x9b,
    0xbe,0x4e,0xdd,0x2a,0x2a,0xb7,0x1a,0x72,0x52,0x50,0x6c,0x6b,0x07,0x75,0xea,0x64,
    0xd6,0x90,0x93,0x5c,0x0d,0xf9,0x85,0xa0,0x38,0xf6,0xcc,0x74,0x77,0x27,0x00,0x9f,
    0x82,0xfc,0xe4,0x59,0x3b,0xc5,0xd5,0xa9,0x53,0x9d,0x8f,0x7c,0x9d,0x7a,0x27,0x7d,
    0x4c,0x75,0x3e,0xa6,0x05,0xc5,0xb1,0x66,0x66,0x6f,0xba,0xab,0x53,0xef,0x0a,0xca,
    0x03,0x31,0x9d,0x46,0xbf,0xb6,0xcf,0xbf,0x2f,0x2a,0x07,0xbf,0x46,0xb7,0x1e,0xc0,
    0x1f,0x8f,0xad,0x91,0xeb,0xf1,0x38,0x73,0x64,0x0d,0xfb,0x8d,0xae,0x9e,0x68,0x91,
    0x6c,0xde,0x16,0xd3,0x27,0x72,0x31,0x1d,0x2b,0x59,0x4c,0x77,0x88,0xca,0x6d,0xbe,
    0x3b,0x45,0xb1,0x1d,0x2e,0xa6,0x76,0x86,0xfd,0x8c,0x78,0x70,0xd8,0x53,0x4e,0xd7,
    0xb0,0xaf,0x04,0xe5,0xe1,0xeb,0x8d,0x99,0x41,0xf1,0xa7,0x5c,0xbd,0x31,0x2b,0x28,
    0x3e,0xca,0xe9,0x7d,0x35,0x28,0xee,0x6b,0x90,0x39,0xa1,0x3d,0xff,0xc9,0xd4,0xb3,
    0x39,0x7c,0x2d,0xa8,0x8e,0xd5,0x20,0x73,0x9d,0x8d,0x2b,0xe7,0x77,0x50,0xdc,0x6a,
    0x90,0x55,0x6e,0xfd,0x21,0x5b,0x10,0xdb,0x42,0xae,0xd7,0x42,0x57,0x4b,0x7c,0x9d,
    0xe3,0xac,0x06,0x59,0xe9,0xc6,0x41,0xb6,0x28,0xb6,0x25,0x1c,0xb7,0xc4,0x8d,0xab,
    0xe7,0x38,0xab,0x41,0x56,0xb8,0x71,0x90,0x3d,0x88,0x33,0x90,0xe3,0x96,0xbb,0x3b,
    0xfa,0x9b,0x41,0xe7,0x63,0x35,0xc8,0x0a,0xea,0x3c,0xe8,0x74,0x96,0x51,0x27,0xe4,
    0x74,0x56,0x84,0x6c,0xff,0xbf,0x1a,0xd4,0x16,0x6c,0x2f,0xa3,0xbf,0xf4,0x1c,0xa1,
    0xee,0x22,0x67,0x6f,0x31,0xed,0x59,0x8d,0x62,0x3a,0x2b,0x9d,0xbd,0x57,0x82,0xda,
    0x84,0x8f,0xc5,0x9c,0x37,0x74,0x57,0x51,0x77,0x81,0xb3,0x77,0x3f,0xed,0x59,0x0d,
    0x63,0x3a,0xab,0x9c,0xbd,0x83,0x41,0x6d,0xc2,0xc7,0xfd,0x8c,0xbf,0xad,0xdf,0x1a,
    0x97,0x17,0x1b,0x89,0x35,0x04,0xc5,0xf1,0xed,0x64,0x0f,0xb1,0x6f,0x07,0xb5,0x03,
    0x99,0xdd,0xdd,0xeb,0x82,0xe2,0x0f,0x25,0xd9,0x9d,0xfa,0x8c,0x28,0xfe,0x34,0xef,
    0xcb,0xdd,0x6e,0x6f,0x41,0xb6,0x0b,0x75,0x0e,0xf7,0x12,0xde,0xb7,0x70,0x2f,0x6d,
    0x64,0x1e,0xef,0xe4,0x7e,0xc1,0xb7,0xc6,0x4d,0x41,0xbf,0x33,0xda,0xf7,0x88,0xcd,
    0x41,0xf5,0x1a,0xf8,0x8d,0xea,0xe1,0xa0,0xbe,0xee,0xe6,0x39,0xb8,0x25,0xa8,0x8e,
    0xed,0x0f,0x60,0x8f,0x10,0x93,0xf4,0x9e,0x29,0x4e,0xbf,0x4d,0x6e,0x0d,0xaa,0x0b,
    0xd9,0xc3,0xce,0xde,0xa3,0x41,0xf7,0xdd,0x1c,0x9e,0xf9,0xdf,0x0b,0xca,0x61,0x2b,
    0xd7,0xff,0x51,0x77,0xcf,0x3d,0x16,0x54,0x9e,0x24,0xd9,0x9d,0xff,0xdb,0xdc,0xde,
    0xf7,0x77,0xfe,0x73,0x94,0xdb,0x5d,0xf7,0xbc,0xa8,0x0d,0xdf,0xae,0x8d,0x3b,0x0c,
    0xb2,0x56,0x9e,0xfb,0xd5,0xfc,0x6e,0x86,0xb1,0xcf,0xbb,0x7a,0xa1,0x31,0xe8,0x7d,
    0xb4,0xf7,0x2a,0xf5,0x42,0x53,0x50,0x1b,0xbe,0x5e,0x68,0x66,0xbd,0xd0,0xe4,0xea,
    0x85,0x6d,0x41,0x6d,0x35,0xbb,0x7a,0x61,0x3b,0xc7,0xb6,0x5e,0xa5,0x5e,0x68,0x09,
    0xaa,0xd3,0xe4,0xea,0x85,0x1f,0x06,0xb5,0xd5,0xe2,0xe2,0xf3,0x23,0xf2,0xf3,0xf5,
    0xc2,0x93,0x41,0xf1,0x66,0xa7,0xf7,0xe3,0xa0,0xe3,0x7d,0xbd,0xb0,0x93,0x98,0xaf,
    0x17,0x7e,0x42,0xcc,0xd7,0x0b,0x3f,0x0d,0x3a,0x1e,0xfa,0x90,0x3f,0xc9,0x7d,0x62,
    0xf9,0xb5,0xdb,0xdd,0xdf,0x1f,0x92,0x0f,0xf6,0x05,0xc6,0xed,0xca,0x9d,0xeb,0x6b,
    0x9c,0xee,0x65,0xea,0xe2,0xec,0xc7,0xb8,0xdd,0xd2,0xbe,0x2e,0x58,0x2d,0x19,0xaf,
    0x3d,0x92,0xcd,0xf3,0x37,0xdc,0x03,0x7f,0x14,0xc5,0x5b,0x79,0x1e,0xed,0x73,0x7b,
    0x00,0xb2,0xbd,0xb1,0xed,0xa3,0xad,0xbd,0xa2,0xdf,0x09,0xf1,0x1d,0xf4,0x45,0xd1,
    0xef,0x84,0x96,0x37,0xd8,0x63,0x7f,0x22,0x6e,0xf5,0xc4,0x4b,0xa2,0x98,0x9d,0xad,
    0x07,0x9c,0x6d,0xc8,0xf6,0xc7,0x76,0x80,0xb6,0xf7,0xbb,0xbb,0xe6,0x20,0xff,0xab,
    0xe3,0xfb,0xa7,0x7d,0x5b,0xad,0x8d,0x1e,0xe0,0xf7,0x15,0xc9,0xbe,0x4f,0xd6,0xb9,
    0xff,0xbe,0xaf,0x52,0x66,0x35,0xf4,0x21,0x51,0xcc,0xff,0xb7,0x3f,0xec,0xbe,0x01,
    0x98,0xde,0x11,0x51,0x5d,0xc8,0xbe,0x18,0x11,0xf8,0xff,0x7d,0x50,0xfc,0xa0,0x64,
    0x67,0x95,0xf1,0x3c,0xc0,0xd8,0x43,0xef,0x25,0xde,0xf3,0x88,0x0b,0xc6,0xec,0x77,
    0x79,0x7f,0x4c,0x3a,0xce,0xfb,0xe7,0x18,0x9b,0xd7,0x19,0xf7,0x53,0x8c,0xcd,0x09,
    0x17,0x1b,0xc8,0x8e,0xc7,0x76,0x82,0x3e,0x8f,0x33,0xc6,0xf8,0x86,0xfc,0x4f,0x7e,
    0x3f,0xb6,0x73,0xe6,0xb4,0x28,0x8f,0xb9,0xd1,0x2e,0xf2,0xe1,0x4d,0xea,0x9c,0x76,
    0x5c,0xde,0x16,0xc5,0xdf,0xbc,0xca,0x3e,0x69,0x13,0xd5,0x01,0x1f,0xdb,0x27,0x67,
    0x45,0xe7,0xd0,0xc6,0x7c,0x32,0x2e,0x27,0x38,0x7f,0xe8,0x1c,0x08,0xaa,0x83,0x98,
    0x9c,0x25,0x67,0xe3,0x79,0x2e,0xc7,0xf3,0x3f,0xe4,0x69,0xb9,0xf8,0x5f,0xd1,0xf1,
    0x7e,0x2f,0xbd,0x4b,0xcc,0xef,0xa5,0xf7,0x88,0xf9,0xbd,0xf4,0xbe,0xe8,0x78,0xe8,
    0xbf,0xc7,0xdc,0x9d,0x17,0xfd,0xc0,0x27,0xfc,0xbc,0x4f,0xce,0x96,0xb7,0xfb,0xa4,
    0xfd,0x37,0x67,0x3c,0xff,0x17,0xbd,0x8c,0x8c,0xed,0xff,0xf0,0xed,0x16,0x52,0x8c,
    0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontMip)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     return texelFetch(font, ivec3(coordInGlyph, textChar), int(fontMip)). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontMip = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar < 95)
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontMip);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
