// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x6c,0x97,0xd5,
    0x15,0x7e,0xcf,0xfd,0xf5,0x03,0x90,0x29,0x7e,0xa0,0x73,0xc3,0x4e,0x0b,0x44,0xe5,
    0x2b,0x6c,0x22,0x61,0x69,0xa0,0x1f,0x94,0x52,0xc1,0x4d,0x19,0x1a,0xcd,0xfc,0x03,
    0x2a,0x88,0x71,0x64,0x24,0x8b,0x8b,0x49,0xdb,0xdf,0x08,0x73,0xea,0xc2,0xa2,0xfb,
    0xc3,0xc9,0x1f,0xfb,0xa0,0xa2,0x0c,0x64,0x82,0xa6,0x0a,0xb5,0x0c,0x13,0xb5,0x08,
    0x25,0x71,0x22,0xc3,0x30,0xe6,0xd8,0x62,0xeb,0x88,0x48,0xd5,0xba,0x49,0x82,0x43,
    0x6c,0xc7,0xce,0xf3,0x9e,0xe7,0xfa,0x9e,0xdf,0xbb,0xd2,0xe4,0xe6,0x7d,0xef,0x73,
    0xce,0x7d,0xce,0x73,0xcf,0x3d,0xef,0xbd,0xb7,0xbf,0x42,0x98,0x58,0x99,0x24,0x92,
    0x8c,0x49,0x46,0x25,0xf7,0x84,0x24,0xfd,0xbb,0x38,0x09,0x8a,0x24,0xc9,0x05,0x49,
    0x45,0xfa,0x5c,0x78,0xf3,0xd2,0x9b,0x67,0xdc,0xff,0xe3,0x95,0x33,0x66,0xdd,0x38,
    0x13,0xf6,0x0b,0x93,0x42,0xea,0x07,0xdb,0x45,0x49,0x65,0x52,0xae,0xcf,0x32,0x6d,
    0x3f,0x6c,0xb9,0x6f,0x0d,0xf0,0x27,0xb5,0x75,0x6b,0x1b,0xa7,0xe3,0xcb,0x52,0xbe,
    0x44,0xd9,0xad,0xa5,0x7c,0x8a,0xd6,0xea,0xb3,0x22,0xf5,0x49,0x92,0x66,0x65,0xa8,
    0xb3,0xd0,0xc9,0x44,0x3e,0x23,0x26,0xc4,0xbc,0x5f,0x20,0x76,0xb5,0xc3,0x0a,0xc4,
    0x66,0x92,0xbf,0x81,0xfc,0x33,0xc5,0x7c,0xe6,0xe7,0xf8,0x17,0xea,0x88,0xf9,0xe4,
    0x82,0xff,0x02,0x7d,0x56,0x7f,0x69,0xb3,0xfe,0x35,0x4e,0xef,0xaa,0x9c,0x7d,0x15,
    0xed,0x65,0xec,0xb7,0xe6,0xe6,0xd3,0x36,0xc2,0x7c,0xda,0x46,0x98,0x4f,0xdb,0x08,
    0xf3,0x69,0x1b,0x61,0x3e,0xed,0xb9,0xf9,0x14,0x47,0x98,0x4f,0xd1,0xcd,0x67,0x6d,
    0x4e,0xef,0x5a,0xea,0x8d,0xf6,0x27,0xd3,0xf5,0x4d,0x92,0x09,0x8c,0xb9,0x79,0x04,
    0xbe,0xcd,0xce,0xbf,0x2b,0xc7,0xd7,0x45,0xbe,0x02,0xfb,0xdd,0xe4,0xfb,0x1a,0xfb,
    0x4f,0x4b,0xa9,0x3f,0xfa,0xd7,0xb8,0xfe,0x4b,0x62,0xfe,0x57,0x6a,0xbb,0x54,0xa3,
    0x84,0x94,0xaf,0x90,0xf2,0xe1,0x7d,0xbc,0xfa,0x54,0x30,0x27,0xf8,0xbb,0x42,0xfb,
    0x95,0xcc,0x41,0x60,0x7f,0x14,0xfb,0x58,0x83,0xcb,0x14,0x1d,0xad,0xcf,0xcb,0x95,
    0x61,0x3c,0xc7,0xc1,0xa7,0x3a,0xe5,0x32,0x1f,0xf4,0xaf,0xd7,0xe7,0x68,0x72,0x4c,
    0x65,0x8c,0xd9,0x8c,0x11,0xfb,0x35,0xf4,0x8f,0xfd,0x79,0x5c,0xaf,0x09,0xac,0xdb,
    0x51,0xc4,0xaa,0xd4,0x5a,0xc7,0x7e,0x35,0x9f,0xb5,0x6e,0x5c,0x3d,0x75,0x4c,0x60,
    0x3d,0xd6,0x11,0xab,0x62,0xed,0x35,0xa4,0xf6,0xb2,0xa4,0x91,0x7a,0xe6,0xa7,0xb1,
    0xad,0xbf,0xc0,0xe5,0xa1,0x89,0x3c,0x42,0xee,0xa6,0x34,0x87,0x99,0xe6,0xa6,0x74,
    0x0d,0x6d,0x2d,0xc0,0xf7,0x1d,0x8e,0xad,0x70,0x5a,0x96,0x52,0x5f,0xec,0xdf,0xa9,
    0xed,0x5c,0x9a,0xff,0xd1,0xc9,0x4a,0xe6,0x48,0xc8,0x99,0x7f,0x82,0xf3,0x1e,0xbe,
    0xaf,0xa4,0x46,0xf4,0x57,0xb9,0xb5,0x59,0xad,0xcf,0x26,0xb7,0x36,0x6b,0xd8,0x2f,
    0x70,0xfe,0xad,0xb9,0xbc,0xb5,0xe5,0xf2,0xd6,0x4a,0x3f,0xd4,0x79,0x9b,0xcb,0x13,
    0x6a,0xba,0x9d,0x1a,0x7e,0x42,0xfe,0x22,0x35,0xa0,0xbf,0xd6,0xc5,0xfc,0x39,0xe7,
    0x51,0xe0,0x3c,0xf1,0xbe,0x3e,0x55,0xb8,0xae,0x16,0xf6,0x8d,0xcc,0x49,0xcc,0x53,
    0x07,0xe7,0xb8,0x91,0x7c,0x1d,0xdc,0xbb,0x84,0xb1,0x51,0xff,0x95,0xf4,0xfd,0x3d,
    0xeb,0x66,0x33,0x7d,0xd1,0xdf,0x42,0x0c,0xf6,0xad,0x7c,0xaf,0x74,0xb1,0x3b,0x99,
    0x9f,0x69,0x8a,0x62,0x9e,0x2f,0x10,0x8b,0x6d,0x3d,0xf3,0xbf,0x93,0xba,0x62,0xbe,
    0x93,0x11,0xf2,0xbf,0x8b,0xef,0x3b,0x19,0x1f,0xfd,0x2e,0x62,0x51,0x7b,0xb7,0xab,
    0x11,0xf0,0xf5,0xe4,0x6a,0xe6,0x10,0xfb,0xe0,0x7b,0x87,0x79,0x1b,0xe5,0xf4,0x55,
    0x4a,0xa9,0xbe,0x4e,0x37,0x76,0x9c,0x98,0x3f,0xc6,0x36,0xf0,0xbd,0xda,0xc5,0x6a,
    0x55,0x6c,0xb9,0x9b,0xfb,0xc3,0xda,0x3f,0xf8,0xe6,0x9b,0xf3,0x22,0xf7,0x23,0x39,
    0x6e,0xd8,0x31,0xf7,0x4d,0x52,0x5a,0x7b,0xf1,0x2f,0x38,0xad,0x4f,0xd1,0x08,0xdf,
    0x1a,0xf6,0x9f,0x96,0x98,0xdb,0x8a,0x74,0xfd,0xb0,0x9f,0x2c,0x65,0x9d,0xf7,0xa4,
    0xdf,0x74,0x79,0xca,0x51,0x46,0x3e,0xac,0xf9,0x19,0x45,0x70,0x56,0xfd,0x47,0x7b,
    0xdd,0x1c,0xff,0x85,0xbe,0xe3,0xfb,0xdf,0x2d,0x66,0xc7,0x73,0x2e,0x6b,0x65,0x13,
    0xeb,0xe1,0x16,0x9d,0x03,0xd6,0xf5,0x29,0x62,0x9b,0xdc,0xfa,0xd4,0x2b,0x23,0xd6,
    0xfe,0x19,0xd6,0x03,0xbe,0xcb,0xb9,0xdc,0xab,0xb6,0x11,0x7f,0x5e,0x7d,0xb0,0xef,
    0xfc,0x81,0x1c,0xc0,0x7f,0xa3,0x3e,0xa8,0x97,0x67,0x89,0x43,0xd3,0x0e,0xf2,0x9e,
    0x55,0x1b,0xf0,0xed,0xda,0x76,0x50,0x37,0xde,0x3f,0xd7,0x67,0x37,0x75,0xee,0x60,
    0x1c,0xd4,0xc3,0x4b,0xac,0x85,0xa8,0x7b,0x37,0x6b,0x21,0xea,0xfe,0x23,0xb1,0xdd,
    0x4e,0x77,0x91,0xdf,0xec,0x1e,0xda,0x97,0xa9,0x27,0x6a,0xe1,0x65,0xf2,0xed,0xf9,
    0x72,0xef,0x4f,0x92,0x25,0xaa,0x1f,0x6b,0xfc,0x2a,0xed,0x89,0xc3,0x5e,0x27,0x26,
    0xd4,0xb7,0x8f,0x7a,0xf1,0x3c,0xcd,0xb5,0x5f,0x10,0xac,0xf6,0xa1,0xb9,0x45,0xdf,
    0x0f,0xd0,0x96,0xee,0x91,0xc1,0x38,0x60,0x3b,0x92,0x98,0x6d,0xbb,0x72,0x23,0x37,
    0x6f,0xd0,0x8e,0xf5,0xf9,0x4c,0xf5,0xf6,0xd2,0x1e,0x73,0x04,0xfb,0x7e,0x6d,0xbd,
    0x8c,0x89,0xf7,0xb1,0xca,0x8a,0x7a,0x3d,0x48,0x4d,0x37,0x91,0xa3,0xc8,0x3a,0x7d,
    0x8b,0xb6,0x7d,0x1a,0x03,0x7e,0x87,0xf9,0x5d,0xbc,0x95,0x64,0x3e,0x6f,0x13,0xef,
    0xe5,0x1c,0x8f,0x90,0xe3,0xed,0x74,0xbd,0x2b,0xd3,0x6f,0xe7,0x6f,0xdc,0x7b,0x16,
    0x72,0x6c,0x5c,0x77,0xe4,0xf0,0x18,0xed,0x31,0xff,0xaf,0x88,0x61,0xc7,0x5c,0xfe,
    0x63,0x4d,0xbc,0x2a,0x56,0x13,0xf0,0xf9,0x2d,0x6b,0xe2,0x35,0x31,0x1c,0x35,0xb1,
    0x5f,0xb2,0xf9,0x02,0xef,0xd1,0xb6,0x9f,0x35,0x80,0xf7,0x18,0x63,0xaf,0x8b,0x11,
    0x58,0xef,0x9d,0x8c,0xf1,0x3a,0x63,0xec,0x75,0x31,0xf6,0x89,0xe1,0x58,0xb3,0xc8,
    0x87,0x27,0xd6,0x05,0xf6,0x5e,0x31,0x1d,0xfb,0xe9,0x8b,0x58,0xdb,0x38,0xf6,0x5d,
    0xda,0xa1,0xaf,0xdf,0xad,0x07,0xf0,0x3e,0x6d,0xfd,0x5c,0x8f,0x3e,0xd6,0xc4,0x01,
    0xf6,0xfb,0x5d,0xdd,0x1c,0x77,0xdf,0x51,0xc4,0xde,0x77,0x39,0x7a,0x96,0x35,0x70,
    0x82,0xbe,0xef,0x27,0x59,0xfc,0x0f,0x88,0x23,0xfe,0x80,0x8b,0x0f,0xfc,0xa4,0xb6,
    0x01,0xc6,0x3b,0xe9,0xb8,0x3f,0x62,0x3c,0x71,0xd8,0x20,0xe3,0x89,0x8b,0xf7,0x09,
    0x7d,0x07,0xa9,0x3d,0x72,0x0d,0x24,0x59,0x6e,0xfe,0xc5,0xf8,0xfd,0xf4,0x3f,0xe9,
    0xb4,0xfd,0x9b,0x76,0x68,0x3b,0xe5,0xb4,0x01,0xff,0x54,0xdb,0x29,0xf2,0xe1,0x7d,
    0x1d,0x75,0x9c,0xe6,0x1c,0x7b,0x9c,0xb6,0x33,0x6e,0x2d,0xa3,0xb6,0xcf,0xe9,0x7b,
    0x86,0xda,0x22,0xd7,0x29,0xa7,0xed,0x2c,0xe3,0x0f,0xd0,0xff,0x53,0xa7,0xed,0x0b,
    0xda,0xa1,0x6d,0xd8,0x69,0x03,0x3e,0xa4,0x6d,0x98,0x7c,0x43,0x4e,0xc7,0x39,0x97,
    0xb7,0xa8,0x17,0x9d,0x73,0x39,0xbd,0x81,0xf5,0x57,0x70,0x7a,0x0b,0x62,0xbe,0x81,
    0x75,0x16,0xf9,0x87,0x9d,0xde,0x32,0x31,0x4d,0xa7,0xe8,0x3f,0x44,0x7d,0x15,0xae,
    0xee,0xe1,0x53,0xae,0xad,0x82,0x75,0x5a,0x2e,0xa5,0x75,0x05,0xfc,0x41,0x8d,0x89,
    0xef,0xe0,0x2b,0xee,0x7b,0xaa,0xd7,0xaf,0x11,0x77,0xa1,0x8b,0xa5,0xf4,0x5b,0xc5,
    0x59,0x36,0x9b,0xdf,0x2b,0xb4,0x5f,0x22,0xe6,0x13,0xe7,0xf2,0x86,0x18,0x0f,0xfe,
    0x1e,0x21,0xf6,0x27,0x31,0x1c,0xbe,0x11,0x3b,0x28,0x86,0xd7,0xa4,0x67,0xb9,0x61,
    0x87,0x1c,0x56,0xaf,0x33,0x44,0xfc,0x3f,0xe7,0xe2,0x37,0x73,0xec,0x21,0xc9,0x34,
    0x1c,0x16,0xf3,0x8b,0x1a,0xbe,0xee,0xf2,0x19,0xb1,0xab,0x24,0xab,0xd7,0x07,0x89,
    0x55,0x89,0xf9,0xc2,0xb6,0x83,0x79,0x9f,0x28,0xc6,0x57,0xc5,0x6f,0x74,0xb2,0xcb,
    0x25,0x6c,0x93,0xb4,0x4d,0x66,0x2e,0x27,0xb9,0x98,0xd7,0x72,0xde,0x7e,0xad,0xaf,
    0x13,0xc3,0x6b,0xb8,0x67,0x81,0x7f,0x8a,0x18,0x5e,0xc5,0x75,0x88,0x5c,0x93,0xdd,
    0xfe,0x31,0x55,0x4c,0x07,0xd6,0x66,0x0a,0x63,0x42,0xcb,0x74,0xa7,0x05,0x3e,0xd3,
    0xb4,0x4d,0xe7,0xf8,0x69,0x4e,0xcb,0x37,0x9d,0x96,0xb8,0x0f,0x7f,0x8b,0x6b,0x00,
    0xdb,0x01,0x62,0x37,0x88,0xe1,0x3d,0xae,0xee,0x66,0x89,0xe1,0xb3,0xf9,0x9d,0x44,
    0xfe,0xe9,0x4e,0xdf,0x8d,0x62,0x1a,0xa1,0x79,0x16,0x75,0xc4,0xd8,0x73,0x5c,0xec,
    0x98,0xe7,0x6f,0x73,0xbe,0x73,0xc4,0xf6,0x55,0x70,0xd4,0x88,0xe1,0x87,0xdd,0xde,
    0x38,0x57,0x8c,0xfb,0x19,0xfa,0xcc,0x13,0xf3,0x9b,0xcb,0xf9,0xd7,0xb9,0xf9,0xc3,
    0x56,0xab,0xad,0x8e,0xfa,0x6a,0xc5,0xce,0x17,0xdc,0xaf,0xe6,0xe7,0x6a,0xe6,0x10,
    0xeb,0x15,0xe7,0x69,0x23,0xed,0xb7,0x68,0x7d,0xe3,0xce,0x7b,0x44,0xec,0x8c,0x5d,
    0x10,0xb2,0xf3,0x25,0xb0,0x6e,0x70,0xb7,0xfa,0x8b,0xd8,0x18,0xd4,0xd2,0xcf,0x88,
    0x1d,0x15,0xbb,0x7f,0xc2,0xf6,0x4b,0xc5,0xc0,0xf3,0x57,0x31,0xae,0xa3,0x8e,0xfb,
    0x1d,0x8e,0x6d,0x94,0x52,0xee,0x38,0xe6,0x98,0x98,0x0f,0x78,0x7e,0x4a,0xec,0xef,
    0x62,0x5c,0xc7,0x24,0xd3,0xf0,0x0f,0x6a,0x84,0x86,0x87,0x89,0xf5,0x89,0xe1,0x47,
    0x9d,0x5f,0xbf,0xd8,0xf8,0xc4,0xe9,0x7f,0x8f,0x98,0x38,0xec,0x9f,0xc4,0xa0,0xe5,
    0x56,0xde,0x33,0x8e,0x8b,0x8d,0x87,0x3f,0xec,0x7d,0xac,0xcf,0x98,0xdf,0x3a,0xc9,
    0xee,0x24,0x77,0x33,0x5f,0xa8,0x89,0xe3,0x5c,0x07,0xbf,0xa7,0xd8,0x1d,0x65,0x74,
    0xea,0xdb,0x42,0xdf,0x3e,0xde,0x91,0xb1,0xff,0x60,0x7c,0x9d,0x94,0xde,0x79,0x7a,
    0x59,0x6f,0xcd,0x8c,0xd7,0xec,0xe2,0x35,0x92,0x03,0x3e,0x2b,0xf4,0xb9,0x58,0xb2,
    0x3b,0x50,0x43,0xb0,0xbb,0x15,0x6c,0x77,0x88,0xd9,0xe2,0x1d,0xe8,0xbb,0x62,0xf6,
    0x78,0x07,0x5a,0x44,0x7b,0xac,0x21,0xd8,0x6f,0xd2,0xb6,0x88,0x31,0xf1,0x1e,0xef,
    0x40,0x4b,0x24,0xbb,0x03,0x35,0xb8,0x3b,0xd0,0xf7,0xc4,0x6c,0xf1,0x0e,0x74,0x9b,
    0x58,0x7d,0x01,0x8f,0x3e,0xb7,0x8b,0xe1,0xf1,0xdb,0xbb,0x83,0x3a,0x6e,0x97,0xec,
    0x0e,0xf4,0x7d,0xb1,0xff,0x53,0x17,0x72,0xac,0xbf,0x03,0xdd,0x25,0x66,0x8f,0xf7,
    0x93,0x13,0x62,0xd8,0x5d,0xf2,0xff,0x77,0xa0,0x0f,0xb8,0x67,0x9f,0x70,0xf7,0x93,
    0x93,0x62,0x38,0xbe,0x99,0x41,0x37,0x5f,0xe0,0x03,0xda,0x06,0x39,0xdf,0x01,0x17,
    0xe3,0x43,0x17,0x23,0x7f,0x07,0xfa,0x88,0x31,0x3e,0x74,0x31,0x3e,0x16,0xc3,0xb1,
    0x66,0x91,0x6f,0xd0,0xed,0x11,0x9f,0x88,0xe9,0x40,0x4e,0x3f,0x66,0xdc,0xf8,0x9d,
    0x2f,0x13,0xb3,0x43,0x5f,0x8b,0xd3,0x07,0x7c,0xb9,0xb6,0x16,0xf2,0x2d,0x27,0xff,
    0x62,0xf6,0x5b,0xdc,0x59,0x75,0xaf,0x9b,0x77,0xcc,0xe9,0x0f,0x72,0x39,0x1d,0x27,
    0x59,0x4e,0x57,0x8b,0xd9,0xe3,0x7c,0xd7,0x88,0x61,0xab,0x5d,0x4e,0xe3,0x1e,0xf6,
    0x23,0xe2,0xc1,0x61,0x0f,0x38,0xdf,0x88,0x9d,0x16,0xd3,0xe1,0xcf,0xba,0xcf,0xc4,
    0xf0,0x07,0xdc,0x59,0x77,0x46,0x0c,0xaf,0x71,0x7e,0x67,0xc5,0x70,0x7f,0xfe,0x0d,
    0x39,0x2c,0x9e,0x7f,0xc3,0xb9,0x39,0x35,0x73,0xec,0x90,0x3b,0xff,0xfe,0x2b,0xe6,
    0x17,0x79,0x20,0x3c,0xc6,0x7b,0x88,0x98,0x04,0xc3,0xf1,0x3f,0xde,0x5e,0x62,0x65,
    0xc1,0xc6,0x4a,0xc8,0xce,0x84,0xf2,0x60,0xf8,0x9d,0x49,0xb6,0x57,0xb7,0x89,0xe1,
    0xad,0x5c,0xb3,0xa2,0x5b,0x33,0xd8,0xda,0x51,0xfb,0x5c,0xa3,0x76,0xea,0x40,0x8e,
    0xc7,0x04,0xcb,0xcf,0x1a,0xa7,0xed,0x82,0x60,0x5c,0xf5,0x2e,0x17,0x63,0x1d,0x76,
    0x6b,0xbc,0x8b,0x04,0xf3,0x85,0xed,0x21,0x62,0x17,0x06,0xe3,0x82,0x0d,0x73,0xc7,
    0xef,0x29,0x17,0x05,0xfb,0x2d,0x65,0x1d,0x7d,0x2e,0x09,0xe6,0x37,0x26,0x64,0xff,
    0xa7,0x5d,0x1a,0x0c,0x2f,0xf2,0xff,0xf1,0xcb,0x82,0xad,0xf1,0x12,0x7e,0xc3,0xe3,
    0x83,0xf9,0xc4,0xb5,0x05,0x76,0x39,0x31,0x49,0x35,0x55,0xa4,0xbf,0xc9,0x5c,0x11,
    0xcc,0x17,0x36,0x70,0x2c,0xe3,0xfe,0xf4,0xd5,0x60,0x3a,0x60,0xf7,0xff,0xf7,0x61,
    0xaf,0xbd,0x32,0x98,0x3d,0x49,0xb2,0xf3,0x69,0x7d,0x6e,0x4d,0xfd,0xf9,0xf4,0x0b,
    0xda,0xe3,0xbe,0xfc,0xa8,0x18,0x87,0x6f,0x63,0xb5,0xa2,0x61,0x7b,0x8c,0x7b,0xd4,
    0x0c,0xfe,0x46,0x80,0xb1,0x8f,0xba,0xf3,0x67,0x42,0xb0,0xbd,0xb3,0xf1,0x3c,0x67,
    0xdb,0x55,0xc1,0x38,0xfc,0xd9,0x56,0x15,0xec,0x6c,0x83,0x2d,0x9e,0x53,0xdf,0x08,
    0xc6,0x05,0x5b,0xe4,0xbe,0x9a,0x63,0x1f,0x3b,0xcf,0xd9,0x56,0x1d,0xcc,0x07,0x3c,
    0xf1,0x6c,0x9b,0x18,0x8c,0x0b,0xb6,0xa8,0x61,0x12,0xf5,0xf9,0xb3,0xed,0xda,0x60,
    0x78,0x95,0xf3,0xbb,0x2e,0xd8,0x78,0x7f,0xb6,0x5d,0x4f,0xcc,0x9f,0x6d,0x53,0x88,
    0xf9,0xb3,0x6d,0x6a,0xb0,0xf1,0xf0,0x87,0x1d,0xfc,0xd8,0x57,0x62,0xcd,0x16,0xdd,
    0x59,0xb3,0x92,0x7a,0xb0,0xd7,0x60,0x5c,0x7b,0x6e,0x0f,0x5a,0xec,0x7c,0x57,0xd0,
    0x17,0xfb,0x14,0xc6,0x15,0xa5,0xf4,0x0c,0x5b,0xe4,0xce,0xe6,0xc7,0x25,0x9b,0xe7,
    0x6e,0x7e,0x57,0xbf,0x12,0xc3,0xd7,0xf3,0xde,0xbe,0xc1,0x7d,0x57,0xb0,0x3d,0xa1,
    0x6d,0x03,0xb9,0x9e,0x70,0xeb,0xfa,0x6b,0x19,0x79,0x5d,0xf7,0x90,0xf7,0x77,0xe4,
    0xed,0x24,0x6f,0x87,0xe3,0x85,0x6d,0xa3,0xb6,0x0e,0xf2,0x6e,0xe4,0x3e,0x82,0xdf,
    0x87,0x36,0xf3,0xb7,0xa1,0xf8,0xdd,0x6c,0xe1,0x1e,0x7b,0xb7,0xf2,0x62,0xbe,0x5b,
    0xe9,0xb3,0xc5,0x69,0xd9,0x26,0x86,0x6f,0x3d,0x4f,0x1d,0x6c,0x17,0xf3,0x79,0xdc,
    0xdd,0x71,0x9e,0x13,0x9b,0xc3,0x76,0xe6,0x2b,0x6a,0xe9,0x60,0x6e,0xe1,0xd3,0x14,
    0xcc,0x07,0xf3,0x7e,0x8e,0x9a,0xa3,0xce,0xe7,0x73,0x3a,0x3b,0xa9,0x33,0xe6,0xfa,
    0x45,0xb1,0xf1,0xbe,0x56,0x76,0x12,0xf3,0xb5,0xb2,0x8b,0x98,0xaf,0x95,0x2e,0xb1,
    0xf1,0xf0,0xdf,0xc5,0xb5,0x59,0xa1,0x71,0x10,0x13,0x71,0xba,0xa8,0x39,0xae,0xcb,
    0x06,0x29,0xfd,0x6d,0x09,0xcf,0x61,0x8d,0x32,0x47,0xdb,0xff,0x00,0xf3,0xc5,0xa4,
    0x97,0x20,0x1a,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint packedChars = textWidgetsData[textWidget]. text[packIndex / 4][packIndex % 4];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     return graphWidgetsData[graphWidget]. values[valueIndex / 4][valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     const uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
