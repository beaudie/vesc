// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x6b,0x90,0x56,0x47,
    0x11,0xbd,0x3d,0xfb,0x06,0x0a,0xf3,0x24,0x31,0x3c,0xdc,0x85,0x04,0xc2,0x06,0x16,
    0x12,0x70,0x03,0x2c,0x60,0x6d,0x8c,0xc5,0x63,0x97,0x05,0x96,0xf0,0x83,0x00,0x22,
    0xb0,0x12,0x79,0x19,0xe4,0xb1,0x8b,0x01,0x0d,0xac,0x40,0x42,0xa0,0xd0,0x60,0x4c,
    0x10,0xd4,0x98,0xd4,0x2e,0x0f,0x35,0x16,0x86,0x3f,0x96,0xa5,0x96,0xe1,0xa1,0x15,
    0x21,0x2a,0x54,0xd4,0x82,0xc4,0x42,0x03,0x26,0x58,0x41,0x23,0x82,0x98,0xf0,0x08,
    0xce,0xb9,0x7d,0x3a,0x5f,0xef,0xad,0x8f,0xaf,0x6a,0xea,0xde,0x39,0xdd,0xd3,0x7d,
    0x66,0xa6,0x7b,0xa6,0xbf,0x5b,0x10,0xfa,0x94,0x24,0x89,0x24,0x9d,0x92,0xd2,0xa4,
    0x73,0x41,0x92,0xfe,0x6e,0x4c,0x42,0x44,0x92,0xa4,0x73,0x52,0x9c,0x3e,0xc7,0xd4,
    0x4f,0xa9,0xaf,0x5a,0xb6,0xbc,0xa9,0x6a,0xe8,0x27,0x07,0x43,0xde,0x35,0x51,0x45,
    0xc8,0x3e,0x96,0x94,0x24,0x45,0xf1,0x59,0x18,0xdb,0xe2,0xd9,0xf3,0xbf,0x08,0xfc,
    0x8d,0xd8,0xce,0xc7,0x76,0x43,0x1c,0x5f,0x98,0xda,0x4b,0xa2,0x75,0x6d,0xa9,0xbd,
    0x88,0x8e,0x8f,0xcf,0xe2,0x54,0x27,0x49,0xc6,0x46,0x0b,0x75,0xea,0x3a,0xe9,0xc3,
    0xa7,0x61,0x42,0xcc,0xeb,0x05,0x62,0xe5,0x0e,0x2b,0x20,0x36,0x98,0xf6,0x27,0xd0,
    0xfe,0x60,0x51,0x9d,0x86,0x8c,0xfd,0x31,0x71,0x44,0x03,0x6d,0x41,0x7f,0x52,0x7c,
    0xf6,0xfe,0x48,0xa6,0xfd,0x0a,0xc7,0x77,0x43,0x46,0xbe,0x81,0xf2,0x42,0xf6,0xdb,
    0x32,0xf3,0x69,0xcf,0x33,0x9f,0xf6,0x3c,0xf3,0x69,0xcf,0x33,0x9f,0xf6,0x3c,0xf3,
    0xd9,0x99,0x99,0xcf,0xae,0x3c,0xf3,0xd9,0xe5,0xe6,0xb3,0x27,0xc3,0x77,0x0f,0xf9,
    0x9a,0xfc,0x8d,0x74,0x7f,0x93,0xa4,0x07,0x7d,0x9e,0xcc,0xc3,0xf7,0xa4,0xe3,0x5b,
    0x4a,0x1f,0x27,0x9d,0x8d,0x73,0x19,0x1f,0xe7,0xe8,0xa3,0x80,0xfd,0xf3,0xf4,0x71,
    0x07,0xfb,0x67,0xa4,0xa3,0x3e,0xfa,0x15,0xae,0x7f,0x45,0x54,0xff,0xe3,0xb1,0xdd,
    0x1c,0xbd,0x84,0xd4,0x5e,0x41,0x6a,0x0f,0xef,0xb7,0x46,0x9d,0x62,0xae,0x13,0x7e,
    0xb7,0xc5,0x7e,0x09,0xd7,0x25,0xb0,0x5f,0xca,0x3e,0xf6,0xe5,0x96,0x88,0x96,0xc5,
    0x67,0xb7,0x68,0xe1,0x56,0x8e,0x83,0x4e,0xef,0xd4,0x96,0xea,0xa0,0xdf,0x3f,0x3e,
    0xcb,0x68,0xa3,0x3c,0xf6,0x87,0xc6,0xa7,0xd9,0xbd,0x87,0x3e,0xab,0xe9,0xd3,0xfa,
    0x35,0x1c,0x0f,0xfd,0x31,0xd4,0x2f,0x75,0xf2,0x71,0xdc,0xe3,0x1e,0x8c,0xf5,0x52,
    0x62,0xbd,0xa2,0xb4,0x8e,0xfd,0xde,0x7c,0x8e,0x77,0xe3,0xea,0xc9,0xb3,0x07,0x63,
    0xb8,0x8e,0x58,0x2f,0xc6,0xeb,0x04,0xfa,0x9c,0x48,0xbe,0x0d,0x29,0x17,0xed,0x4f,
    0x72,0xeb,0x34,0x99,0x76,0x84,0xb6,0xd1,0x6f,0x74,0x73,0x40,0x7f,0x0a,0xf7,0x0a,
    0xf6,0x1e,0xe2,0x58,0x3f,0x87,0x69,0x99,0xf1,0x33,0x5d,0x1f,0xf2,0x39,0x1c,0x63,
    0xf2,0x79,0xae,0x0f,0xf9,0xb2,0x8c,0xbd,0x95,0xb1,0x5d,0x4b,0xf7,0xb7,0x2c,0x59,
    0xc7,0x3d,0x10,0x72,0xca,0x3e,0xc1,0x69,0x3d,0xdf,0xd7,0x71,0x8e,0xe8,0x6f,0x70,
    0x7b,0xbf,0x29,0x3e,0x27,0xbb,0xbd,0xdf,0xc2,0x7e,0x01,0xd7,0xaf,0x2d,0xb3,0xee,
    0xed,0x99,0x75,0x6f,0xa3,0x1e,0x72,0xab,0xdd,0xad,0x33,0xf2,0x68,0x27,0x39,0xec,
    0xa6,0xfd,0x5d,0xe4,0x80,0xfe,0x1e,0xe7,0xf3,0x00,0xe7,0x51,0xc0,0x79,0xe2,0xfd,
    0x50,0xca,0x70,0xcd,0xa7,0x20,0x3f,0xce,0x38,0xb2,0x75,0x3e,0xc1,0x39,0x1e,0xa7,
    0xbd,0x13,0x3c,0x2f,0x25,0xf5,0x5d,0x98,0xe6,0x97,0xc5,0x1e,0xf4,0xff,0xca,0xd8,
    0x3c,0x49,0x7d,0xf4,0xff,0x46,0x0c,0xf2,0xb7,0xf8,0x5e,0xe2,0xfc,0x9f,0xe5,0x1a,
    0x0d,0x88,0x28,0xe6,0xfa,0x4f,0x62,0xd6,0x0e,0x71,0x0f,0xde,0xa3,0x1f,0x5b,0xf3,
    0x24,0xcf,0x1e,0xfc,0x9b,0xef,0xef,0xd1,0x3f,0xfa,0xe7,0x88,0x19,0xff,0xf3,0x1c,
    0x63,0xfe,0x46,0x4b,0x47,0x7f,0x67,0x2d,0x4f,0x44,0xd7,0xcd,0xe6,0xf6,0x65,0xf6,
    0x7b,0xbb,0x18,0xd9,0x1b,0xb1,0xcf,0xb9,0xb9,0xfc,0x3c,0xf6,0x5f,0x3b,0x72,0x64,
    0xb4,0xd9,0xfe,0x45,0xc6,0x36,0xe4,0xb0,0xf5,0x9a,0xe8,0x3a,0x14,0x73,0x6e,0x6f,
    0x4b,0xc7,0xf8,0xb2,0x5f,0x20,0x86,0x31,0xef,0x50,0x08,0xdd,0x1a,0xf6,0xcf,0x88,
    0xad,0x5d,0x71,0xba,0x47,0x38,0x93,0x96,0x31,0x96,0x91,0x0f,0x55,0x71,0x27,0xb1,
    0xd6,0x9d,0x0a,0x70,0x26,0x14,0xa5,0xf6,0x0a,0x69,0x1b,0x7b,0xfc,0x7e,0x44,0x8a,
    0xb8,0x36,0x38,0x17,0xa6,0x06,0xdd,0x1b,0xeb,0xdf,0xc0,0xfe,0xff,0xa2,0xf6,0x55,
    0xfa,0xba,0x1c,0xdf,0x71,0xbe,0x7c,0x28,0x3a,0x1e,0xcf,0x51,0x8c,0x9d,0x37,0x19,
    0x1f,0x13,0xe3,0x28,0x8c,0xfb,0x0b,0xb1,0x37,0xdd,0x5e,0xd5,0x46,0x8f,0x88,0x83,
    0x53,0x8c,0x0d,0xe4,0xf9,0x28,0x9e,0x8d,0xa7,0x89,0xff,0x38,0xea,0xe0,0x9c,0xfb,
    0x3b,0x6d,0x00,0xdf,0x1e,0x75,0xb0,0x66,0x6f,0x13,0x07,0xa7,0x33,0xb4,0x7b,0x29,
    0xca,0x80,0xbf,0x13,0xdb,0x19,0xce,0x0b,0xef,0x1f,0xc4,0xe7,0x55,0xf2,0x3c,0x43,
    0x3f,0x88,0x8d,0xff,0x30,0x2e,0x8c,0xf7,0x05,0xc6,0x85,0xf1,0xfe,0x2f,0xb1,0x0b,
    0x8e,0xf7,0x6a,0xe6,0xf0,0x45,0xca,0x67,0x45,0xcd,0xd2,0x94,0x87,0xda,0xbb,0xc8,
    0xfd,0x6a,0x4c,0xf3,0xba,0x28,0xdd,0xdb,0xcb,0x94,0x27,0x0e,0xfb,0x90,0x98,0x90,
    0xdf,0x35,0xf2,0xbd,0x96,0xda,0xd5,0xb8,0x39,0x14,0x34,0x0f,0xc0,0xf9,0x52,0x7c,
    0x0f,0xa2,0x32,0x8c,0x7f,0x25,0xa8,0x0d,0xc8,0xba,0x8a,0xca,0x7e,0x18,0x6d,0x63,
    0x6d,0x8a,0x44,0xe5,0xd5,0x29,0x9f,0xc2,0x44,0x28,0xb7,0x35,0x82,0x1c,0x8e,0x85,
    0x6b,0x82,0xf7,0x2e,0xd1,0x2a,0xce,0xa1,0x52,0x51,0x4e,0xe3,0xe8,0x63,0x35,0x63,
    0xbc,0x4c,0x54,0x76,0x30,0xfa,0x80,0x5e,0x67,0xd1,0xb3,0x15,0xb8,0xe9,0x74,0x11,
    0xc5,0x7f,0xcd,0x39,0x76,0x25,0x0f,0xe0,0xb5,0x91,0x37,0xce,0xeb,0x1b,0x45,0xcf,
    0xa2,0x46,0x8e,0xb5,0x7d,0xc7,0x1a,0xde,0x24,0x2a,0xb7,0xf5,0x2f,0x0c,0x8a,0xdd,
    0x24,0xb9,0xf5,0xb7,0x98,0x28,0x0a,0x1a,0x13,0xd0,0xd9,0xc1,0x98,0x28,0x0e,0x8a,
    0x23,0x26,0x3a,0x87,0xdc,0x7c,0x81,0x97,0xc4,0x06,0x0c,0xf3,0xc5,0xbb,0xf9,0x28,
    0x75,0x3e,0x02,0xf3,0x61,0x2f,0x7d,0x94,0xd1,0x47,0xa9,0xf3,0xd1,0x29,0x28,0x8e,
    0x3d,0x33,0x7b,0x78,0x62,0x5f,0x20,0xef,0x12,0x94,0x07,0xc8,0x76,0xa2,0xdf,0xdd,
    0x1c,0xdb,0x4d,0x54,0x0e,0x7e,0xb7,0xbb,0xfd,0x00,0x7e,0x5b,0x6c,0xb7,0x73,0x3f,
    0xf0,0x0e,0xfb,0x81,0x7d,0xe0,0x16,0x37,0xdd,0x25,0x97,0x47,0x86,0xf5,0x74,0x6b,
    0xf4,0x03,0xc6,0x40,0x2f,0x51,0x5d,0xc8,0xcc,0xff,0x27,0x44,0x71,0xf8,0xaf,0x70,
    0xfe,0x81,0x97,0xa3,0xae,0xa1,0xbf,0x72,0xe7,0xaf,0x0f,0xfd,0x89,0xf3,0x77,0x17,
    0xfd,0x89,0xf3,0xd7,0x57,0x54,0xf7,0x2e,0x72,0x37,0x5b,0x15,0x92,0x5b,0x9b,0x7e,
    0xf4,0x8f,0xf9,0xf4,0xa5,0x4f,0xe3,0x76,0xb7,0xa8,0x1c,0xdc,0x2a,0x1d,0x37,0xe0,
    0xfd,0x63,0xab,0xa4,0x3d,0xbc,0xaf,0x21,0x8f,0x81,0x9c,0xe3,0x34,0xc7,0x6d,0x90,
    0xdb,0x4b,0xe3,0x86,0xfa,0x13,0xba,0x83,0xc8,0xcd,0x6c,0x55,0x3a,0x6e,0xf7,0xd2,
    0x3f,0xf8,0x0e,0xa6,0x4f,0xe3,0x76,0x9f,0xa8,0x1c,0xdc,0x86,0x3a,0x6e,0xc0,0x87,
    0xc4,0x36,0x94,0xf6,0x86,0xb8,0x75,0xab,0x76,0xeb,0x66,0x7c,0xef,0x17,0xc5,0x3d,
    0xdf,0xe1,0xe4,0x5b,0xe0,0xf8,0x8e,0x10,0xd5,0x1d,0x4e,0xbe,0x66,0x7f,0xa8,0xe3,
    0x5b,0x43,0x4e,0x98,0xc3,0x08,0xf2,0x00,0xbf,0x51,0x8e,0x1f,0x74,0x46,0xe2,0x5c,
    0xe6,0xf8,0x91,0x99,0xb8,0x02,0xde,0x1a,0x7d,0x22,0x0f,0x1e,0x94,0x5c,0x3e,0xd5,
    0xc6,0x6c,0xc4,0xbd,0x37,0x36,0x93,0xab,0xf3,0x58,0x53,0x8e,0xb2,0x7a,0x91,0x3a,
    0x36,0x97,0x9b,0x83,0xda,0x49,0xd2,0x9a,0x47,0xb1,0x5b,0x82,0xe2,0xd0,0x35,0xac,
    0x5b,0x50,0xbc,0xc6,0xcd,0xf9,0x8e,0xa0,0x78,0x35,0xcf,0xf4,0x41,0x2e,0x7f,0x21,
    0xeb,0x1e,0x5b,0x2f,0xe6,0x5b,0x77,0x72,0xc4,0x79,0xd2,0x23,0x74,0xe4,0x38,0x25,
    0xe9,0x78,0xa6,0xf4,0x0c,0xaa,0x33,0x3a,0xda,0xc4,0x3d,0xd6,0x93,0xb9,0x3b,0x88,
    0xb6,0x60,0xd3,0x38,0x94,0x93,0xc3,0x34,0x72,0xa8,0x72,0x1c,0x20,0xab,0x88,0xed,
    0x4e,0x8e,0xab,0x70,0x1c,0x7a,0xe7,0xe1,0x30,0xd3,0x71,0xe8,0x13,0x54,0xc7,0x38,
    0xf4,0x21,0x87,0x2a,0xda,0xba,0xd3,0x71,0xe8,0x4b,0x0e,0x73,0xc8,0x61,0xa0,0xe3,
    0x00,0x59,0xbf,0xd8,0x2a,0x39,0xae,0x9f,0xe3,0x70,0x77,0x1e,0x0e,0xf3,0x1c,0x87,
    0xfe,0x41,0x75,0x8c,0x43,0x7f,0x72,0x18,0x48,0x5b,0x95,0xce,0xd6,0x3d,0x79,0x6c,
    0x4d,0x71,0xb6,0x06,0x04,0xd5,0x31,0x5b,0x03,0x32,0xb6,0x06,0x66,0xe6,0x57,0x95,
    0x59,0x73,0x3c,0x37,0x32,0x16,0xee,0x75,0xb1,0x80,0x9a,0x00,0xff,0x63,0xee,0x0b,
    0x5a,0x73,0x40,0x66,0xb1,0x36,0x24,0x28,0x6e,0xb1,0xd6,0xe8,0xf2,0xc6,0xb0,0x87,
    0xdc,0xb9,0xd4,0x4a,0x6c,0xaa,0xa8,0x2e,0x64,0x3f,0xe2,0x1a,0x3f,0x2c,0x6a,0x6f,
    0x2a,0x73,0x66,0x86,0xcb,0x19,0xc8,0xa6,0xc7,0x36,0x83,0x39,0x32,0xdd,0xc5,0xf7,
    0x67,0x45,0xe3,0xdb,0xe7,0xf4,0x2c,0x51,0xbc,0x86,0x77,0x13,0xec,0xcf,0x16,0xc5,
    0xa7,0x32,0xdf,0xcc,0xd6,0x0c,0x97,0xbf,0x73,0x44,0x79,0x60,0x2d,0x66,0xd3,0x27,
    0xb8,0x34,0x39,0x2e,0xd0,0x99,0x1b,0x5b,0x13,0xc7,0xcf,0x75,0x5c,0xbe,0xe0,0xb8,
    0xd8,0x7d,0x3b,0x5f,0x34,0xd7,0x20,0xfb,0x0d,0xb1,0x05,0xa2,0xf8,0x34,0x97,0x6b,
    0x0b,0x45,0xf1,0x6a,0xd6,0x1e,0x66,0xbf,0xc9,0xf1,0x5b,0x24,0xca,0x11,0x9c,0x17,
    0x92,0x87,0xf9,0x7e,0xd4,0xf9,0xb6,0x75,0x5e,0xc2,0xf9,0x42,0xb6,0x97,0x7e,0x96,
    0x8a,0xe2,0x43,0xdc,0x1d,0xb8,0x5c,0xd4,0xf6,0x2e,0xea,0xac,0x10,0xd5,0x5b,0xce,
    0xf9,0xb7,0xb8,0xf9,0x43,0xd6,0x1c,0x5b,0x0b,0xf9,0x35,0xb3,0x8e,0x40,0x0d,0xfe,
    0x58,0xe6,0x6c,0xb2,0x7c,0x43,0xdd,0xb4,0x8a,0xf2,0x89,0x31,0x5a,0xf1,0x5f,0xa7,
    0x3a,0x68,0x2d,0x75,0x28,0xe4,0xea,0x88,0xc0,0xb8,0x41,0xbd,0x7d,0x7f,0xd0,0x31,
    0x88,0xa5,0xaf,0x11,0x1b,0x16,0xf4,0x3f,0x07,0x64,0x5b,0x22,0x06,0x3b,0xc3,0x83,
    0xda,0x1a,0x16,0x72,0xb6,0x47,0x70,0xec,0x2a,0xe9,0x68,0xdb,0xc6,0x8c,0x0c,0xaa,
    0x03,0x3b,0x6b,0x89,0x8d,0x0a,0x6a,0x6b,0x64,0xc8,0x71,0x18,0x4d,0x7e,0xe0,0xb0,
    0x9e,0x58,0x6d,0x50,0x7c,0x98,0xd3,0x7b,0x20,0xe8,0xf8,0xc4,0xf1,0xff,0x34,0x31,
    0x71,0xd8,0x83,0xc4,0x42,0xfa,0x1f,0x5b,0xeb,0xc9,0xcf,0x04,0x1d,0x0f,0x7d,0xc8,
    0x6b,0x99,0x97,0xb6,0xbe,0x2d,0x92,0xab,0x3d,0x2f,0x93,0x0f,0x62,0x02,0xe3,0x9a,
    0x33,0x77,0x87,0xd6,0xa2,0x65,0xa9,0xee,0x25,0xea,0xa2,0x6e,0x19,0xcd,0x3b,0x07,
    0xe3,0x5b,0xa4,0x63,0x6d,0x2b,0xec,0x3f,0x4e,0x1b,0x8f,0x3b,0x7f,0x07,0x69,0x03,
    0x3a,0x57,0xe2,0xb3,0xd5,0xd5,0xba,0xfb,0x83,0xd6,0xd0,0x90,0x6d,0x11,0x95,0x59,
    0xad,0xbb,0x5e,0x54,0x6e,0xb5,0xee,0x5a,0xca,0x2d,0x86,0x20,0x5f,0x13,0xdb,0x5a,
    0xfa,0x5c,0xe3,0x6a,0xdd,0x27,0x5d,0xad,0xbb,0xdf,0xd5,0xba,0x1b,0x45,0x65,0x56,
    0xeb,0x6e,0x62,0x7c,0x6d,0x74,0xb5,0xee,0x66,0x51,0xdc,0x72,0x6f,0x0b,0x79,0x6c,
    0x76,0xb5,0xee,0xd3,0xa2,0xdf,0x37,0x1a,0x39,0xd6,0xdf,0x4b,0x5b,0x45,0xe5,0x56,
    0x87,0x8e,0x0d,0x8a,0x6d,0xcd,0x53,0xeb,0x8e,0x63,0x1d,0x3a,0xd6,0xd5,0xa1,0xe3,
    0x83,0xe2,0xc8,0x99,0x89,0xee,0x8e,0x00,0x5e,0x87,0xf8,0xe4,0x59,0x5b,0xe7,0x6a,
    0xdd,0x7a,0xe7,0x23,0x5b,0xeb,0x4e,0xa0,0x8f,0x7a,0xe7,0xa3,0x21,0x28,0x8e,0x3d,
    0x33,0x7b,0x13,0x5d,0xad,0x3b,0x29,0x28,0x0f,0xac,0x69,0x03,0xfd,0x5a,0x9e,0x3f,
    0x2b,0x2a,0x07,0xbf,0x6d,0x6e,0x3f,0x80,0x3f,0x17,0xdb,0x36,0xee,0xc7,0x73,0x8c,
    0x89,0x56,0xf6,0xb7,0xb9,0x9a,0xe4,0x7b,0x92,0x9b,0xb7,0xad,0xe9,0x0b,0x99,0x35,
    0xf5,0x77,0xdc,0x8b,0xa2,0x72,0x9b,0x6f,0xbb,0x28,0xf6,0xa2,0x5b,0x53,0x3b,0xc3,
    0x76,0x13,0x0f,0x0e,0x7b,0xc9,0xe9,0x1a,0xf6,0x70,0x50,0x1e,0xbe,0xa6,0x99,0x1e,
    0x14,0x7f,0xc9,0xd5,0x34,0x33,0x83,0xe2,0x35,0x4e,0x6f,0x56,0x50,0x1c,0x98,0xdd,
    0x77,0xb3,0x1d,0x66,0xe7,0xf1,0xdc,0xa0,0xba,0x56,0xfb,0xac,0x74,0xfb,0x09,0x59,
    0x53,0x6c,0x8f,0x70,0xfd,0x9b,0xdc,0x3d,0xfd,0xf9,0xd0,0x71,0x2d,0xb2,0xb5,0xcf,
    0xbc,0xa0,0x3a,0xb8,0xa7,0xf1,0x9f,0x7e,0x1e,0xf7,0x72,0x25,0x6d,0x3d,0xe2,0xea,
    0x8e,0xf9,0xe4,0x60,0xb5,0x4f,0x8b,0xe3,0x00,0xd9,0x82,0xd8,0x16,0x73,0xdc,0x02,
    0xc7,0x61,0x61,0x1e,0x0e,0xbe,0xf6,0x59,0x14,0x54,0xc7,0x38,0x2c,0xb2,0x33,0x87,
    0xb6,0x16,0x3b,0x0e,0x8f,0x92,0x83,0xd5,0x3e,0xcd,0x8e,0x03,0x64,0x4b,0x62,0x5b,
    0xc6,0x71,0x4b,0x1c,0x87,0x2f,0xe5,0xe1,0xe0,0xe3,0x62,0x69,0x50,0x1d,0xe3,0xb0,
    0x94,0x1c,0x9a,0x69,0x6b,0x99,0xb3,0xb5,0x3c,0x8f,0x2d,0x5f,0xfb,0xac,0x08,0xaa,
    0x63,0xb6,0x56,0x64,0x6c,0x35,0x67,0xe6,0xd7,0x92,0x59,0xf3,0x95,0x21,0x57,0xe7,
    0x3c,0x16,0xf4,0x5b,0xcb,0x6c,0x57,0xe7,0xac,0x0a,0x8a,0x5b,0xbc,0x7c,0xc5,0xc5,
    0xd5,0x3a,0x62,0x5f,0x0d,0x8a,0xe3,0xfb,0xce,0x7e,0x62,0x6b,0x83,0x8e,0x85,0xcc,
    0xee,0xfe,0xd6,0xa0,0xf8,0xca,0x24,0x77,0x27,0xff,0x44,0x14,0xdf,0xcb,0xfb,0x76,
    0x9f,0xcb,0x4d,0xc8,0x5e,0x8e,0x6d,0x1f,0x73,0x11,0xef,0x1b,0x99,0x8b,0x4f,0x30,
    0x0f,0xda,0x25,0xc7,0xed,0xc9,0xa0,0xb6,0xea,0x5d,0xcc,0x6f,0x74,0xd8,0x24,0x8e,
    0x7d,0x2a,0xa8,0x2e,0x64,0xeb,0x88,0x6d,0x0a,0x6a,0xeb,0x29,0xce,0x1d,0xdf,0x4b,
    0x37,0x07,0xfd,0x56,0xba,0x86,0x3a,0x5f,0x0f,0xaa,0xf7,0x44,0xc8,0x7d,0x77,0xf9,
    0x46,0x50,0x7c,0x35,0xbf,0xdf,0x3e,0x1d,0x34,0x97,0x27,0xf3,0xac,0xde,0x1a,0x54,
    0xc7,0x72,0x18,0xd8,0x37,0x89,0x49,0xca,0xa9,0x38,0xfd,0xe6,0xfa,0x4c,0x50,0x5d,
    0xc8,0x60,0x63,0x16,0xef,0xa1,0x6f,0x05,0xe5,0xf1,0x4c,0xe8,0xf8,0x1d,0x07,0x77,
    0xea,0xb3,0x41,0xe5,0x49,0x92,0xab,0x43,0x7e,0x95,0x39,0x8f,0x7c,0x1d,0xf2,0xca,
    0x47,0x72,0xb5,0x7d,0x40,0xd4,0x86,0x6f,0x5d,0x62,0x54,0xa5,0xf7,0x1f,0xef,0xa2,
    0x2a,0x7e,0x2f,0xc4,0xd8,0x03,0xae,0x86,0xf9,0x76,0xd0,0x3b,0xf2,0xe0,0x75,0x6a,
    0x98,0xed,0x41,0x6d,0xf8,0x1a,0x66,0x07,0x6b,0x98,0xed,0xae,0x86,0xf9,0x4e,0x50,
    0x5b,0x3b,0x5c,0x0d,0xf3,0x5d,0x8e,0x3d,0x78,0x9d,0x1a,0xe6,0xf9,0xa0,0x3a,0xdb,
    0x5d,0x0d,0xf3,0xfd,0xa0,0xb6,0x9e,0x77,0xb5,0xc9,0x0b,0xe4,0xe7,0x6b,0x98,0xb6,
    0xa0,0xf8,0x0e,0xa7,0xd7,0x1e,0x74,0xbc,0xaf,0x61,0x76,0x12,0xf3,0x35,0xcc,0x2e,
    0x62,0xbe,0x86,0xd9,0x1d,0x74,0x3c,0xf4,0x21,0x6f,0x63,0x7e,0x59,0xcc,0xee,0x73,
    0x35,0xc5,0x55,0xf2,0x41,0xce,0x61,0xdc,0xcb,0x99,0xbb,0xa6,0xd5,0xe9,0x5e,0xa1,
    0x2e,0xee,0x23,0x8c,0xdb,0x97,0xa9,0x55,0xd6,0x4a,0x8e,0xd7,0xab,0x92,0x9b,0xe7,
    0x4f,0x99,0x57,0xbf,0x15,0xc5,0x0f,0xf1,0xec,0x3a,0xe2,0xf2,0x0a,0xb2,0xc3,0xb1,
    0x1d,0xa1,0xad,0xc3,0xa2,0x67,0x00,0xbe,0xff,0xfe,0x4e,0xf4,0xfb,0xe7,0x4c,0xf7,
    0xbf,0xfa,0xf7,0xc4,0xad,0xc6,0xf9,0x83,0x28,0x66,0xf7,0xc3,0x31,0x67,0x1b,0xb2,
    0xa3,0xb1,0x1d,0xa3,0xed,0xa3,0xee,0xfe,0x7b,0x9d,0xdf,0x20,0xf0,0xdd,0xd7,0xbe,
    0x29,0xd7,0x46,0x0f,0xf0,0xfb,0x47,0xc9,0x7d,0x77,0x9d,0xe6,0x7c,0xff,0x89,0x32,
    0xab,0xeb,0xff,0x2c,0x8a,0xf9,0x6f,0x16,0xc7,0xdd,0xb7,0x0d,0xd3,0x3b,0x21,0xaa,
    0x7b,0x3c,0xad,0x73,0x8a,0x53,0xff,0xbf,0x0c,0x8a,0xbf,0x4e,0xe7,0x58,0x4f,0xe3,
    0x79,0x8c,0x6b,0x0f,0xbd,0x57,0x59,0x7b,0x60,0x5d,0x30,0xe6,0xa8,0x8b,0xfb,0x93,
    0x92,0x3f,0xee,0x7f,0xc6,0xb5,0x79,0x8b,0xeb,0x7e,0x96,0x6b,0x73,0xda,0xad,0x0d,
    0x64,0xa7,0x62,0x3b,0x4d,0x9f,0xa7,0xf8,0x8d,0x1a,0xdf,0xce,0xff,0xc1,0xef,0xe6,
    0x76,0xae,0xbc,0x2b,0xca,0x63,0x4e,0xb4,0x8b,0x78,0x38,0x4b,0x9d,0x77,0x1d,0x97,
    0x7f,0x89,0xe2,0x67,0xaf,0x93,0x27,0xe7,0x44,0x75,0xc0,0xc7,0xf2,0xe4,0xbc,0xe8,
    0x1c,0xce,0x31,0x9e,0x8c,0xcb,0x69,0xce,0x1f,0x3a,0x87,0x83,0xea,0x60,0x4d,0xce,
    0x93,0xb3,0xf1,0xbc,0x90,0xe1,0x79,0x91,0x3c,0x2d,0x16,0xdf,0x17,0x1d,0xef,0x73,
    0xe9,0x03,0x62,0x3e,0x97,0x2e,0x11,0xf3,0xb9,0x74,0x59,0x74,0x3c,0xf4,0x2f,0x31,
    0x76,0xe7,0x46,0x3f,0xf0,0x09,0x3f,0x97,0xc9,0xd9,0xe2,0xf6,0x88,0x74,0xfc,0x96,
    0x8e,0xe7,0xd5,0xe8,0x65,0x58,0x6c,0xff,0x07,0xb4,0xf1,0xc3,0x92,0x94,0x1f,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint col = packIndex / 4;
//     const uint row = packIndex % 4;
//
//     uvec4 rows;
//     if(col == 0)
//     {
//         rows = textWidgetsData[textWidget]. text[0];
//     }
//     else if(col == 1)
//     {
//         rows = textWidgetsData[textWidget]. text[1];
//     }
//     else if(col == 2)
//     {
//         rows = textWidgetsData[textWidget]. text[2];
//     }
//     else
//     {
//         rows = textWidgetsData[textWidget]. text[3];
//     }
//
//     const uint packedChars = rows[row];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uint col = valueIndex / 4;
//     const uint row = valueIndex % 4;
//
//     uvec4 rows;
//     if(col == 0)
//     {
//         rows = graphWidgetsData[graphWidget]. values[0];
//     }
//     else if(col == 1)
//     {
//         rows = graphWidgetsData[graphWidget]. values[1];
//     }
//     else if(col == 2)
//     {
//         rows = graphWidgetsData[graphWidget]. values[2];
//     }
//     else
//     {
//         rows = graphWidgetsData[graphWidget]. values[3];
//     }
//
//     return rows[valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
