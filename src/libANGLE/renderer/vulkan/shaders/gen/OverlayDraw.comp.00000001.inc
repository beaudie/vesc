// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7b,0x90,0x97,0x55,
    0x19,0xfe,0xde,0xf3,0x5b,0x96,0x5d,0x97,0x20,0x53,0x32,0x15,0x48,0x16,0x0c,0xe3,
    0xb2,0x2d,0x23,0x2c,0xea,0x86,0xb8,0x40,0x2c,0x34,0x18,0x97,0xa5,0x99,0x84,0x0a,
    0x01,0xcb,0x60,0xc4,0x76,0x80,0x35,0x98,0x16,0x58,0x2e,0x6a,0x20,0x5e,0xa6,0x04,
    0x16,0x04,0x64,0xa4,0x09,0x93,0x86,0xe0,0xbf,0xc6,0x66,0x2a,0x99,0x26,0x83,0x20,
    0x18,0x93,0x8b,0x91,0xc5,0x2d,0x03,0x95,0x10,0x2a,0xe5,0xaa,0x9d,0xe7,0x7b,0x9f,
    0x97,0xef,0xfd,0x7d,0xb3,0xfc,0x66,0xce,0x7c,0xdf,0x79,0xde,0xdb,0x73,0xce,0x79,
    0xcf,0x39,0xef,0xef,0x2b,0x84,0x1e,0xed,0x93,0x44,0x92,0xeb,0x92,0xb2,0xe4,0x33,
    0x85,0x24,0xfd,0x5d,0x9f,0x84,0x88,0x24,0x49,0x45,0x52,0x9a,0x3e,0xeb,0x47,0x37,
    0x8c,0xae,0x9a,0x3d,0xe7,0xa1,0xaa,0x01,0x03,0xab,0x21,0xef,0x98,0xa8,0x22,0x64,
    0x9d,0x92,0xf6,0x49,0xbb,0xf8,0x2c,0x89,0x6d,0xe6,0x94,0xe9,0x8f,0x02,0x3f,0x18,
    0xdb,0x99,0xd8,0x3e,0x1d,0xed,0x4b,0x52,0x7f,0x49,0xf4,0xae,0x2d,0xf5,0x17,0xd1,
    0xfb,0xe2,0xb3,0x34,0xd5,0x49,0x92,0x91,0xd1,0x43,0x9d,0x86,0x4e,0x7a,0xf0,0x69,
    0x98,0x10,0xf3,0x7a,0x81,0xd8,0x6d,0x0e,0x2b,0x10,0xab,0xa6,0xff,0x61,0xf4,0x5f,
    0x2d,0xaa,0x33,0x3c,0xe7,0xbf,0x3e,0x5a,0x0c,0xa7,0x2f,0xe8,0x8f,0x88,0xcf,0xca,
    0xab,0x32,0xed,0x77,0x77,0x7c,0x97,0xe4,0xe4,0x4b,0x28,0x2f,0x61,0x7f,0x75,0x6e,
    0x3c,0xad,0x6d,0x8c,0xa7,0xb5,0x8d,0xf1,0xb4,0xb6,0x31,0x9e,0xd6,0x36,0xc6,0xb3,
    0x26,0x37,0x9e,0xb5,0x6d,0x8c,0x67,0xad,0x1b,0xcf,0xba,0x1c,0xdf,0x75,0xe4,0x6b,
    0xf2,0x83,0xe9,0xfa,0x26,0x49,0x17,0xc6,0x3c,0xdc,0x06,0xdf,0xc3,0x8e,0x6f,0x19,
    0x63,0x1c,0x76,0x3e,0x4e,0xe7,0x62,0x9c,0x66,0x8c,0x02,0xfb,0x67,0x18,0xe3,0x16,
    0xf6,0xdf,0x91,0x62,0x7d,0xf4,0xbb,0xbb,0xfe,0x45,0x51,0xfd,0x9b,0x63,0xbb,0x21,
    0x46,0x09,0xa9,0xbf,0x42,0xea,0x0f,0xef,0x9d,0xa3,0x4e,0x29,0xe7,0x09,0xbf,0x9b,
    0x62,0xbf,0x3d,0xe7,0x25,0xb0,0x5f,0xc6,0x3e,0xd6,0xe5,0xc6,0x88,0x96,0xc7,0xe7,
    0x67,0xa3,0x87,0xce,0xb4,0x83,0x4e,0x65,0xea,0x4b,0x75,0xd0,0xff,0x62,0x7c,0x96,
    0xd3,0x47,0x1f,0xc6,0xa8,0x61,0x0c,0xeb,0xd7,0x52,0xdf,0xfa,0x43,0xb8,0x86,0x5d,
    0x98,0xcb,0x65,0xc4,0xba,0x45,0x69,0x1d,0xfb,0x95,0x7c,0xde,0xe7,0xec,0x86,0x92,
    0x47,0x17,0xe6,0x68,0x1d,0xb1,0x6e,0xcc,0xc7,0x61,0xa9,0xbc,0x24,0xf9,0x0a,0xf9,
    0x0c,0x4f,0x63,0x6b,0x7f,0x84,0x9b,0x87,0x7a,0xfa,0x11,0xfa,0xae,0x4f,0xd7,0x2c,
    0xe3,0x8c,0xfe,0x28,0xae,0x05,0xfc,0x8d,0xa6,0x6d,0x99,0xe3,0x32,0xc9,0xd9,0xa3,
    0x3f,0x2d,0x37,0x07,0x8d,0x39,0xfd,0xa6,0xd8,0x3e,0x49,0xd7,0xa7,0x3c,0x59,0xc4,
    0x39,0x14,0xc6,0xcc,0x3f,0x11,0x73,0x31,0xdf,0x17,0x71,0x0c,0xe8,0x2f,0x71,0x6b,
    0xf7,0xa3,0x74,0xdd,0xb3,0xb5,0x7b,0x8a,0xfd,0x02,0xe7,0x67,0x75,0x6e,0x5e,0x5b,
    0x73,0xf3,0xba,0x9a,0x7a,0xd8,0x1b,0xad,0x6e,0x1e,0xb1,0x0f,0xd6,0x90,0xc3,0x0b,
    0xf4,0xbf,0x96,0x1c,0xd0,0x5f,0xe7,0x62,0xfe,0x8e,0xe3,0x28,0x70,0x9c,0x78,0xdf,
    0x91,0x32,0x6c,0x19,0x02,0xf9,0x7e,0xe6,0x93,0xcd,0xe3,0x01,0x8e,0x71,0x3f,0xfd,
    0x1d,0xe0,0x79,0x27,0x69,0xec,0x92,0x74,0x7f,0x58,0x4e,0x42,0xff,0x6f,0xcc,0xad,
    0xc3,0xd4,0x47,0xff,0x6d,0x62,0x90,0xff,0x9d,0xef,0xed,0x5d,0xfc,0x93,0x9c,0xa3,
    0xbe,0x11,0xc5,0x58,0x4f,0x11,0xb3,0xb6,0x83,0x6b,0xf0,0x1e,0xe3,0xd8,0x9c,0x27,
    0x6d,0xac,0xc1,0xfb,0x7c,0x7f,0x8f,0xf1,0xd1,0x3f,0x4d,0xcc,0xf8,0x9f,0xc9,0xe5,
    0x51,0xa9,0x68,0xdf,0xe2,0xd7,0x4a,0x71,0xfc,0x93,0x4e,0x77,0xb8,0xe8,0x5c,0xa6,
    0x39,0xcb,0x77,0x1b,0xfb,0x0f,0xd8,0xaf,0x74,0x39,0xb4,0x35,0x62,0x0f,0xba,0xb1,
    0xbe,0x1a,0xfb,0x7b,0x76,0xef,0xbe,0xd7,0x62,0xfd,0x3a,0x17,0x0b,0x72,0xf8,0xfa,
    0x93,0xe8,0x3c,0x95,0x72,0xec,0x27,0xa4,0x38,0xff,0xec,0x17,0x88,0xc1,0xe6,0x9f,
    0x14,0x42,0xb7,0x96,0xfd,0x77,0xc4,0xe6,0xb6,0x34,0x5d,0x43,0x9c,0x39,0x8d,0xcc,
    0x75,0xec,0x87,0xaa,0xb8,0xd2,0x58,0x8b,0xeb,0x0b,0x38,0x03,0xda,0xa5,0xfe,0x4a,
    0xe8,0x1b,0x39,0x70,0x3e,0x22,0xb8,0xef,0x3e,0x8a,0xbd,0x4b,0xf4,0x75,0x29,0xbe,
    0xe3,0xbc,0xb8,0x2c,0x2a,0xc7,0x73,0x30,0x73,0xe7,0x10,0xf3,0x63,0x4c,0xf4,0x0a,
    0xbf,0x6f,0x11,0x3b,0xe4,0xd6,0xaa,0x2e,0x7a,0x44,0x1e,0xfc,0x83,0xb9,0x81,0x7d,
    0x3c,0x98,0x67,0xdb,0x11,0xe2,0x5b,0xa3,0x0e,0xce,0xa9,0xa3,0xf4,0x71,0x24,0xcd,
    0xe9,0x92,0x74,0x4e,0x8e,0x11,0x07,0xa7,0x13,0xf4,0x7b,0x31,0xca,0x80,0x1f,0xc7,
    0xf8,0xc9,0x1b,0xef,0x17,0xe2,0xf3,0x12,0x79,0x9e,0x60,0x1c,0xe4,0xc6,0xbf,0x99,
    0x17,0xc6,0xfb,0x03,0xe6,0x85,0xf1,0x3e,0x4b,0xec,0x03,0xc7,0xbb,0x99,0x7b,0xf8,
    0x1c,0xe5,0x93,0xa3,0x26,0xf6,0xe5,0x7f,0xe8,0xef,0x1c,0xd7,0x03,0xe3,0x19,0x17,
    0xf9,0x97,0xa6,0x1c,0x55,0x9e,0x38,0xec,0x22,0x31,0x31,0x7e,0xe4,0x8b,0xe7,0xff,
    0x98,0x17,0xfb,0x82,0xee,0x03,0x70,0x2e,0xc4,0x85,0xf8,0x98,0x32,0xd8,0xef,0x0e,
    0xea,0x03,0xb2,0x0a,0x51,0xd9,0x96,0xe8,0x1b,0x73,0x23,0xa2,0x72,0xac,0xcf,0x87,
    0x91,0xef,0x95,0x44,0xe5,0x36,0x47,0x90,0x5f,0x8e,0xef,0x57,0x18,0x13,0xef,0x1d,
    0xa2,0x57,0xe4,0x76,0x09,0xf7,0xc1,0x28,0xc6,0x68,0x66,0x0e,0xb7,0x13,0x95,0xfd,
    0x3e,0xc6,0x80,0x5e,0x99,0xe8,0x9e,0x01,0x6e,0x3a,0xe5,0xa2,0xf8,0x1f,0x38,0xc6,
    0x0a,0xf2,0x00,0x5e,0x17,0x79,0xe3,0x3c,0xee,0x28,0x7a,0x16,0x8d,0xa4,0x4f,0x5b,
    0x77,0xcc,0x61,0x27,0x51,0xb9,0xcd,0x7f,0xfb,0xa0,0x58,0x27,0xc9,0xe6,0xdf,0x72,
    0xa2,0x2c,0x68,0x4e,0x40,0xe7,0x05,0xe6,0x44,0x79,0x50,0x1c,0x39,0xd1,0x31,0x64,
    0xe3,0x05,0x7e,0x5d,0x6c,0xc0,0x30,0x5e,0xbc,0x5b,0x8c,0x0a,0x17,0x23,0x30,0xdf,
    0xb7,0x31,0x46,0x07,0xc6,0xa8,0x70,0x31,0x3e,0x15,0x14,0xc7,0x9a,0x99,0x3f,0x3c,
    0xb1,0x2e,0x90,0x77,0x0a,0xca,0xe3,0x32,0x75,0x11,0xeb,0x65,0xda,0xde,0x20,0x2a,
    0x07,0xbf,0xce,0x92,0xf1,0x03,0x7e,0x23,0xf6,0x36,0x73,0x14,0xef,0xf0,0xff,0x31,
    0xd7,0x07,0xb8,0xe5,0xcd,0xe7,0x24,0xdb,0x47,0x86,0xdd,0xe2,0xe6,0xe8,0x15,0xe6,
    0xc0,0xad,0xa2,0xba,0x90,0x59,0xfc,0x2e,0xa2,0x38,0xe2,0x77,0x73,0xf1,0x81,0x77,
    0x8d,0xad,0x1b,0xe3,0x77,0x75,0xf1,0x6e,0x63,0x3c,0x71,0xf1,0x2a,0x19,0x4f,0x5c,
    0xbc,0x1e,0xa2,0xba,0x95,0xe4,0x6e,0xbe,0xf0,0xb4,0xb9,0xe9,0xc9,0xf8,0x18,0x4f,
    0x0f,0xc6,0x34,0x6e,0xb7,0x8b,0xca,0xc1,0xad,0x97,0xe3,0x06,0xfc,0x0b,0xb1,0xf5,
    0xa2,0x3f,0xbc,0xb7,0x90,0x47,0x6f,0x8e,0x71,0x92,0xe3,0xd6,0xd7,0xad,0xa5,0x71,
    0xeb,0x27,0xaa,0xdb,0x97,0xdc,0xcc,0x57,0x2f,0xc7,0xad,0x8a,0xf1,0xc1,0xb7,0x1f,
    0x63,0x1a,0xb7,0x2f,0x89,0xca,0xc1,0xad,0xbf,0xe3,0x06,0x1c,0xb5,0x69,0x7f,0xfa,
    0xab,0x76,0xf3,0x76,0xa7,0x9b,0x37,0xe3,0x3b,0x40,0x14,0xf7,0x7c,0x6b,0xc8,0xb7,
    0xe0,0xf8,0x0e,0x12,0xd5,0xad,0x21,0x5f,0xf3,0xdf,0xdf,0xf1,0xbd,0x8b,0x9c,0x30,
    0x86,0x41,0xe4,0x01,0x7e,0xf7,0x38,0x7e,0xd0,0xb9,0x3b,0xb6,0x7b,0x68,0x7f,0x77,
    0x2e,0xaf,0x80,0x2f,0x8e,0x31,0xb1,0x0f,0xea,0x24,0xdb,0x4f,0x75,0x71,0x37,0xe2,
    0x5e,0x1b,0x91,0xdb,0xab,0xb8,0xf7,0x6a,0xb8,0x5f,0xc1,0xbd,0x9e,0x3a,0x88,0x3b,
    0x28,0x14,0xdf,0x0b,0x37,0x71,0x6f,0xe0,0x79,0x35,0x77,0x83,0xc6,0xc1,0xef,0x09,
    0x62,0x37,0x07,0xc5,0xe1,0xcb,0xb0,0x5b,0x83,0xe2,0xb5,0x89,0x72,0xc1,0xb9,0xd1,
    0x25,0x14,0x73,0x19,0x45,0x3d,0x3b,0x3b,0xba,0x06,0xd5,0x59,0x46,0x1f,0x9f,0x77,
    0x3e,0x6c,0x5e,0xbb,0x07,0xc5,0x6b,0x78,0x6f,0xd4,0xb8,0x33,0x02,0xb2,0xca,0xd8,
    0x6e,0x27,0x6f,0x3c,0xcd,0xae,0x17,0xed,0x26,0xd1,0x6e,0xa0,0xb3,0x83,0xec,0x8e,
    0xd8,0xfa,0xd0,0xae,0x8f,0xb3,0xeb,0x47,0xbb,0x69,0xb4,0x1b,0xe0,0xec,0x20,0xab,
    0x8a,0xad,0x3f,0xed,0xfa,0xbb,0x79,0xba,0x33,0xe8,0x78,0x0a,0xbc,0x1b,0x06,0x51,
    0xa7,0xca,0xe9,0x54,0x53,0x27,0xe4,0x74,0x10,0xe3,0x93,0x98,0x75,0x78,0xbf,0xc3,
    0xe9,0xf7,0xa6,0xbe,0xe4,0xf4,0x07,0x3a,0xfd,0x4a,0xa7,0xdf,0x93,0xfa,0x49,0x4e,
    0xbf,0xc6,0xe9,0x0f,0x4a,0xcf,0xbd,0x8a,0x54,0xff,0x78,0x50,0xde,0x18,0x47,0x35,
    0xc7,0xd6,0x9b,0x73,0xd3,0x93,0x73,0x6b,0xbe,0xc7,0xba,0x9c,0x37,0x6c,0xbc,0x3b,
    0x53,0x16,0x13,0x6b,0x10,0xd5,0x85,0xec,0x17,0x9c,0xd3,0x6f,0x88,0xc6,0x6a,0x60,
    0xde,0x4d,0x74,0xf9,0x0e,0xd9,0x03,0xb1,0x4d,0x64,0xbe,0x3f,0xe0,0xf6,0xe3,0x37,
    0x45,0x73,0xcf,0xef,0xc7,0x6f,0x89,0xe2,0xb5,0xbc,0x57,0xe0,0x7f,0xb2,0x28,0xde,
    0xc0,0xbd,0x62,0xbe,0x26,0xba,0xbd,0xf7,0xa0,0x28,0x0f,0x8c,0x7f,0x32,0x63,0x82,
    0xcb,0x54,0xc7,0x05,0x3a,0x53,0x62,0x9b,0x4a,0xfb,0x29,0x8e,0xcb,0x77,0x1d,0x17,
    0xbb,0x2b,0x1f,0x16,0xdd,0x07,0x90,0xbd,0x4e,0xec,0x7b,0xa2,0xf8,0x24,0x97,0xc3,
    0xd3,0x45,0xf1,0x1a,0xae,0x8b,0xf9,0x9f,0xea,0xf8,0xcd,0x10,0xe5,0x08,0xce,0xd3,
    0xc9,0xc3,0x62,0xcf,0x74,0xb1,0x6d,0x9e,0x1f,0xe5,0x78,0x21,0xdb,0xc6,0x38,0x8d,
    0xa2,0xf8,0x71,0x77,0x7f,0xcd,0x12,0xf5,0xbd,0x99,0x3a,0xb3,0x45,0xf5,0x66,0x71,
    0xfc,0x4d,0x6e,0xfc,0x90,0xcd,0x89,0xad,0x89,0xfc,0xe6,0xb0,0x06,0x40,0x7d,0x3c,
    0x37,0x77,0xae,0x94,0xb2,0x76,0x44,0xcd,0x33,0x8f,0xf2,0x31,0x71,0x57,0xe3,0x7f,
    0x4a,0x6d,0xd0,0x3a,0x68,0x5f,0xc8,0x6a,0x80,0xc0,0xbc,0x41,0x2d,0xfc,0xe5,0xa0,
    0x36,0x85,0xf4,0x7f,0x96,0x62,0x83,0x83,0xfe,0x5f,0x80,0xec,0x99,0x88,0xc1,0xcf,
    0xbd,0x41,0x7d,0x0d,0x0e,0x99,0xef,0x21,0xb4,0x9d,0x27,0xc5,0xbe,0xcd,0xa6,0x2e,
    0xa8,0x0e,0xfc,0x2c,0x22,0x36,0x34,0xa8,0xaf,0xba,0x90,0x71,0x18,0x46,0x7e,0xe0,
    0xf0,0x38,0xb1,0x11,0x41,0xf1,0xc1,0x4e,0xaf,0x3e,0xa8,0x7d,0xe2,0xf8,0x8f,0x24,
    0x26,0x0e,0x1b,0x45,0x0c,0xaa,0x63,0x59,0x0b,0x7e,0x35,0xa8,0x3d,0xf4,0x21,0x1f,
    0xc1,0x1a,0xc4,0xe6,0xb7,0x49,0xb2,0xba,0xb1,0xa4,0xa0,0x7c,0x90,0x13,0xb0,0x9b,
    0x93,0x3b,0xf7,0xb5,0x8e,0x2c,0x4f,0x75,0x0b,0xd4,0x45,0xcd,0x51,0xcb,0xfb,0x02,
    0xf6,0x4d,0x52,0x5c,0x97,0x5e,0x61,0xbe,0xcd,0x67,0xbc,0xf9,0x2e,0xde,0x5e,0x8e,
    0x1f,0x3a,0xed,0xa2,0x6d,0x8b,0x64,0x75,0xea,0x9e,0xa0,0xf5,0x2f,0x64,0x2b,0x44,
    0x65,0x56,0xa7,0x2e,0x11,0x95,0x5b,0x9d,0xba,0x90,0x72,0xcb,0x21,0xc8,0x17,0xc4,
    0xb6,0x90,0x31,0xf1,0x6e,0x75,0xea,0x13,0xae,0x4e,0xdd,0xe3,0xea,0xd4,0x27,0x45,
    0x65,0x56,0xa7,0x2e,0x63,0x7e,0x3d,0xe9,0xea,0xd4,0xe5,0xa2,0xb8,0xed,0xbd,0x15,
    0xe4,0xb1,0xdc,0xd5,0xa9,0xcf,0x8a,0x7e,0x7b,0x18,0x49,0x9f,0xbe,0x4e,0x7d,0x4e,
    0x54,0x6e,0x35,0xe4,0xfd,0x41,0xb1,0xe7,0xda,0xa8,0x53,0xbf,0xc6,0x1a,0xf2,0x7e,
    0x57,0x43,0x8e,0x09,0x8a,0x63,0xcf,0x4c,0x70,0x77,0x02,0xf0,0xb1,0xb1,0x4d,0xe0,
    0x59,0x3b,0xd6,0xd5,0xa9,0xe3,0x5c,0x8c,0x7c,0x9d,0x3a,0x9e,0x31,0xc6,0xb9,0x18,
    0x0d,0x41,0x71,0xac,0x99,0xf9,0x9b,0xe0,0xea,0xd4,0xaf,0x07,0xe5,0x81,0x39,0x6d,
    0x60,0x5c,0xdb,0xe7,0xcf,0x8b,0xca,0xc1,0x6f,0x95,0x5b,0x0f,0xe0,0x2b,0x63,0x5b,
    0xc5,0xf5,0x58,0xc9,0x1c,0x69,0x61,0x7f,0x95,0xab,0x27,0xd6,0x49,0x36,0x6e,0x9b,
    0xd3,0x17,0x73,0x73,0x3a,0x5c,0xb2,0x39,0xdd,0x28,0x2a,0xb7,0xf1,0x6e,0x12,0xc5,
    0x36,0xba,0x39,0xb5,0x33,0xec,0x67,0xc4,0x83,0xc3,0xb6,0x38,0x5d,0xc3,0xbe,0x1d,
    0x94,0x87,0xaf,0x37,0x26,0x07,0xc5,0xb7,0xb8,0x7a,0x63,0x4a,0x50,0xbc,0xd6,0xe9,
    0x4d,0x0b,0x8a,0xfb,0x1a,0xe4,0xa1,0x50,0xcc,0x7f,0x14,0xf5,0x6c,0x0c,0xdf,0x09,
    0xaa,0x63,0x35,0xc8,0xc3,0xce,0xc7,0xd5,0xf3,0x3b,0x28,0x6e,0x35,0xc8,0x02,0xb7,
    0xfe,0x90,0xcd,0x88,0x6d,0x26,0xd7,0x6b,0xa6,0xab,0x25,0xbe,0x4f,0x3b,0xab,0x41,
    0xe6,0x3b,0x3b,0xc8,0x1a,0x63,0x9b,0x4d,0xbb,0xd9,0xce,0xae,0x89,0x76,0x56,0x83,
    0x34,0x3b,0x3b,0xc8,0x1e,0xc3,0x19,0x48,0xbb,0x79,0xee,0x8e,0xfe,0x61,0xd0,0xf1,
    0x58,0x0d,0xd2,0x4c,0x9d,0xc7,0x9c,0xce,0x5c,0xea,0x84,0x9c,0x4e,0x73,0xc8,0xf6,
    0xff,0x5f,0x83,0xfa,0x82,0xef,0xb9,0x8c,0x97,0x9e,0x23,0xd4,0x6d,0x74,0xfe,0x66,
    0xd1,0x9f,0xd5,0x28,0xa6,0x33,0xdf,0xf9,0x7b,0x2b,0xa8,0x4f,0xc4,0x98,0xc5,0x71,
    0x43,0x77,0x01,0x75,0x67,0x38,0x7f,0x8f,0xd0,0x9f,0xd5,0x30,0xa6,0xb3,0xc0,0xf9,
    0x3b,0x14,0xd4,0x27,0x62,0x3c,0xc2,0xf9,0xb7,0xf5,0x6b,0x71,0x79,0xb1,0x94,0xd8,
    0xa2,0xa0,0x78,0x63,0xfa,0x4d,0x4a,0xb1,0xa5,0x41,0xfd,0x40,0x66,0x77,0xf7,0xe3,
    0x41,0xf1,0xa6,0x24,0xbb,0x53,0x7f,0x29,0x8a,0x6f,0xe5,0x7d,0xb9,0xdd,0xed,0x2d,
    0xc8,0xb6,0xc5,0xb6,0x9d,0x7b,0x09,0xef,0xcb,0xb8,0x97,0x96,0x33,0x8f,0x37,0x49,
    0xc6,0xed,0xa9,0xa0,0xbe,0x86,0xba,0x9c,0x5d,0xe1,0xb0,0xb1,0xb4,0x7d,0x3a,0xa8,
    0x2e,0x64,0x4b,0x89,0x3d,0x13,0xd4,0xd7,0xd3,0xcc,0x5d,0x7c,0xab,0x7c,0x36,0xe8,
    0x77,0xca,0x16,0xea,0xfc,0x38,0xa8,0xde,0xf2,0x90,0x7d,0xf3,0xf8,0x49,0x50,0xbc,
    0x99,0xdf,0xc1,0x9e,0x0f,0xba,0x17,0xc7,0xf1,0xac,0x5d,0x19,0x54,0xc7,0xf6,0x20,
    0xb0,0x55,0xc4,0x24,0xe5,0x54,0x9a,0x7e,0xef,0x5c,0x1d,0x54,0x17,0x32,0xf8,0x98,
    0xcc,0x7b,0xa4,0x35,0x28,0x8f,0xd5,0xa1,0xf8,0x1b,0x0a,0xee,0xc4,0x35,0x41,0xe5,
    0x49,0x92,0xd5,0x11,0xbf,0xc9,0x9d,0x27,0xbe,0x8e,0xf8,0x2d,0xe5,0x76,0x7f,0xbe,
    0x26,0xea,0xc3,0xb7,0x0e,0x71,0xd7,0x42,0xb6,0x83,0x77,0x49,0x15,0xbf,0xc5,0xc1,
    0xf6,0x35,0x57,0x83,0xac,0x0b,0x7a,0xc7,0xed,0xbd,0x46,0x0d,0xb2,0x3e,0xa8,0x0f,
    0x5f,0x83,0x6c,0x60,0x0d,0xb2,0xde,0xd5,0x20,0x2f,0x06,0xf5,0xb5,0xc1,0xd5,0x20,
    0x1b,0x69,0xbb,0xe3,0x1a,0x35,0xc8,0x4b,0x41,0x75,0xd6,0xbb,0x1a,0x64,0x53,0x50,
    0x5f,0x2f,0xb9,0xda,0xe2,0xa7,0xe4,0xe7,0x6b,0x90,0xcd,0x41,0xf1,0x0d,0x4e,0xef,
    0xe5,0xa0,0xf6,0xbe,0x06,0xf9,0x39,0x31,0x5f,0x83,0xbc,0x42,0xcc,0xd7,0x20,0x5b,
    0x82,0xda,0x43,0x1f,0xf2,0xcd,0xdc,0x7b,0x96,0xb3,0xdb,0x5d,0x4d,0x50,0x5a,0x50,
    0x3e,0xd8,0x6b,0xb0,0xdb,0x96,0xbb,0x2b,0x5a,0x9c,0x6e,0x3b,0xea,0xe2,0x3e,0x81,
    0xdd,0x76,0x29,0xae,0x35,0x16,0x4a,0xc6,0xeb,0x75,0xc9,0xc6,0xf9,0x2b,0xee,0xab,
    0x3f,0x8a,0xe2,0x3b,0x78,0xc6,0xed,0x72,0xfb,0x0a,0xb2,0x9d,0xb1,0xed,0xa2,0xaf,
    0x9d,0xa2,0xdf,0x1e,0xf1,0x6d,0x75,0xb7,0xe8,0xb7,0x47,0xcb,0x9b,0xb4,0x5e,0x21,
    0x6e,0x35,0xca,0x9f,0x45,0x31,0x3b,0xaf,0xf7,0x39,0xdf,0x90,0xed,0x8d,0x6d,0x1f,
    0x7d,0xef,0x75,0xf7,0xd7,0x1b,0xfc,0xff,0x8f,0x6f,0xaa,0xf6,0xbd,0xb6,0x2e,0x46,
    0x40,0xdc,0xbf,0x48,0xf6,0xcd,0x73,0x92,0xfb,0x3f,0xfd,0x26,0x65,0x56,0x97,0xef,
    0x17,0xc5,0xfc,0xf7,0x82,0x83,0xee,0xbb,0x82,0xe9,0x1d,0x12,0xd5,0x85,0x6c,0x7c,
    0x44,0x10,0x7f,0x67,0x50,0xfc,0x0d,0xc9,0xce,0x3f,0xe3,0xb9,0x8f,0x73,0x0f,0xbd,
    0x37,0x59,0x3b,0x60,0x5e,0x60,0xb3,0xd7,0xe5,0xfd,0xdb,0xd2,0x76,0xde,0xbf,0xca,
    0xb9,0x39,0xc2,0x79,0x3f,0xc9,0xb9,0x39,0xe6,0xe6,0x06,0xb2,0xa3,0xb1,0x1d,0x63,
    0xcc,0xa3,0x9c,0x63,0x7c,0x97,0xfe,0x17,0xbf,0x49,0xdb,0xb9,0x72,0x4a,0x94,0xc7,
    0xd4,0xe8,0x17,0xf9,0xf0,0x2e,0x75,0x4e,0x39,0x2e,0xef,0x8b,0xe2,0xef,0x5e,0x63,
    0x9f,0x9c,0x11,0xd5,0x01,0x1f,0xdb,0x27,0x67,0x45,0xc7,0x70,0x86,0xf9,0x64,0x5c,
    0x8e,0x71,0xfc,0xd0,0x39,0x10,0x54,0x07,0x73,0x72,0x96,0x9c,0x8d,0xe7,0xb9,0x1c,
    0xcf,0xff,0x92,0xa7,0xe5,0xe2,0x87,0xa2,0xf6,0x7e,0x2f,0x7d,0x44,0xcc,0xef,0xa5,
    0xf3,0xc4,0xfc,0x5e,0xba,0x20,0x6a,0x0f,0xfd,0xf3,0xcc,0xdd,0x69,0x31,0x0e,0x62,
    0x22,0xce,0x05,0x72,0xb6,0xbc,0xdd,0x25,0xc5,0xdf,0xb1,0xf1,0xbc,0x12,0xa3,0xdc,
    0x15,0xdb,0xff,0x01,0xfe,0x4e,0x88,0x4b,0xd0,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
