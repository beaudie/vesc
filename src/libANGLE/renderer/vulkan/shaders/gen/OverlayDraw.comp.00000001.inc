// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x79,0x8c,0x57,0x57,
    0x15,0x7e,0xe7,0xfe,0x86,0x61,0xa6,0x20,0x54,0x81,0x5a,0x60,0x3a,0x2d,0x43,0x0b,
    0x55,0x61,0x3a,0xb4,0x38,0x2c,0x93,0x16,0x06,0x86,0x2d,0x21,0x81,0x16,0x35,0x2d,
    0x23,0x65,0x4d,0x11,0x22,0x8b,0x94,0x51,0x9b,0xb2,0x0c,0x4b,0xd9,0xac,0x80,0x69,
    0x81,0x01,0x26,0xb1,0x49,0x13,0x35,0x62,0x10,0xfe,0x33,0x90,0xd2,0x32,0x31,0x62,
    0x49,0x35,0xb1,0x84,0x52,0x3b,0x56,0x91,0x62,0xd8,0xa5,0xd6,0x54,0x5b,0x56,0xef,
    0xf7,0xce,0x77,0x7c,0xe7,0xf7,0x32,0x4c,0x72,0xf3,0xde,0xfd,0xce,0xf6,0xdd,0x73,
    0xcf,0x7d,0xf7,0xcc,0xaf,0x10,0xfa,0x77,0x4e,0x12,0x49,0xee,0x4a,0xca,0x92,0x4b,
    0x21,0x49,0xff,0xbe,0x98,0x84,0x88,0x24,0x49,0x97,0xa4,0x34,0x7d,0x4e,0x98,0x3c,
    0x6d,0x72,0xf5,0xf3,0xcb,0xe7,0x55,0x0f,0xfd,0x7a,0x0d,0xe4,0xdd,0x92,0x42,0xaa,
    0x07,0x59,0xf7,0xa4,0x73,0xd2,0x29,0x3e,0x4b,0xe2,0x58,0x34,0x7b,0xc1,0x62,0xe0,
    0xa7,0xe2,0xb8,0x1a,0xc7,0xdd,0xd1,0xbe,0x24,0xf5,0x97,0x44,0xef,0x3a,0x52,0x7f,
    0x11,0x1d,0x1d,0x9f,0xa5,0xa9,0x4e,0x92,0x4c,0x8c,0x1e,0xea,0x35,0x74,0xd2,0x9f,
    0x4f,0xc3,0x84,0x98,0xd7,0x0b,0xc4,0x1e,0x70,0x58,0x81,0x58,0x0d,0xfd,0x8f,0xa5,
    0xff,0x1a,0x51,0x9d,0x86,0x9c,0xff,0x09,0xd1,0xa2,0x81,0xbe,0xa0,0x3f,0x3e,0x3e,
    0xab,0xfe,0x2f,0xd3,0x79,0x3f,0xc7,0x77,0x5d,0x4e,0xbe,0x8e,0xf2,0x12,0xce,0x77,
    0xe5,0xd6,0xd3,0xd2,0xc1,0x7a,0x5a,0x3a,0x58,0x4f,0x4b,0x07,0xeb,0x69,0xe9,0x60,
    0x3d,0xbb,0x73,0xeb,0xd9,0xd3,0xc1,0x7a,0xf6,0xb8,0xf5,0xb4,0xe6,0xf8,0xb6,0x92,
    0xaf,0xc9,0x4f,0xa5,0xfb,0x9b,0x24,0x15,0x8c,0xd9,0xde,0x81,0xbf,0x76,0xa7,0x7f,
    0x25,0xe7,0xef,0x0a,0xfd,0x15,0x38,0xbf,0x4a,0x7f,0x7d,0xcc,0xbf,0x14,0xeb,0x63,
    0xde,0xcf,0xcd,0x2f,0x89,0xea,0xf7,0x8e,0xa3,0x47,0x8c,0x12,0x52,0x7f,0x85,0xd4,
    0x1f,0xde,0x7b,0x45,0x9d,0x52,0xe6,0x04,0x7f,0x5f,0x8e,0xf3,0xce,0xcc,0x41,0xe0,
    0xbc,0x8c,0x73,0xec,0x41,0xcf,0x88,0x96,0xc7,0xe7,0x3d,0xd1,0x43,0x2f,0xda,0x41,
    0xa7,0x2a,0xf5,0xa5,0x3a,0x98,0x7f,0x25,0x3e,0xcb,0xe9,0xe3,0x6b,0x8c,0x51,0xcb,
    0x18,0x36,0xaf,0xa3,0xbe,0xcd,0x47,0x71,0xbf,0x2a,0x58,0xb7,0x65,0xc4,0x2a,0xa3,
    0xb4,0x9e,0xf3,0x2a,0x3e,0x47,0x3b,0xbb,0x31,0xe4,0x51,0xc1,0x7a,0xac,0x27,0x56,
    0xc9,0xda,0x1b,0x9b,0xca,0x4b,0x92,0x71,0xe4,0xd3,0x90,0xc6,0xd6,0xf9,0x78,0x97,
    0x87,0x09,0xf4,0x23,0xf4,0x3d,0x21,0xdd,0xb3,0x8c,0x33,0xe6,0x93,0xb8,0x17,0xf0,
    0x37,0x99,0xb6,0x65,0x8e,0x4b,0xa3,0xb3,0xc7,0x7c,0x6e,0x2e,0x07,0x4b,0x73,0xfa,
    0x4d,0x71,0xdc,0x4e,0xf7,0xa7,0x3c,0x59,0xc3,0x1c,0x0a,0x63,0xe6,0x9f,0x88,0xb9,
    0x96,0xef,0x6b,0xb8,0x06,0xcc,0xd7,0xb9,0xbd,0xdb,0x94,0xee,0x7b,0xb6,0x77,0x3f,
    0xe2,0xbc,0xc0,0xfc,0xec,0xca,0xe5,0xb5,0x25,0x97,0xd7,0x5d,0xd4,0xc3,0x39,0x68,
    0x71,0x79,0x44,0xcd,0xef,0x26,0x87,0xbd,0xf4,0xbf,0x87,0x1c,0x30,0x6f,0x75,0x31,
    0xdf,0xe2,0x3a,0x0a,0x5c,0x27,0xde,0xdb,0x52,0x86,0xcd,0xa3,0x20,0x3f,0xc9,0x7a,
    0xb2,0x3c,0xbe,0xc7,0x35,0x9e,0xa4,0xbf,0xf7,0xf8,0x6d,0x13,0xc6,0xc6,0xf9,0xe8,
    0x4c,0xdd,0xbf,0xb0,0xae,0xda,0xa9,0x8b,0xf9,0x87,0xc4,0x20,0xff,0x2b,0xdf,0x3b,
    0xbb,0xd8,0xe7,0x99,0x9f,0x41,0x11,0xc5,0x3a,0x2f,0x10,0xb3,0xd1,0xc6,0xfc,0x5f,
    0x22,0x2f,0xcb,0x77,0xd2,0x41,0xfe,0x2f,0xf3,0xfd,0x12,0xe3,0x63,0x7e,0x85,0x98,
    0x71,0xbf,0x9a,0xab,0xa1,0x52,0xd1,0xb9,0xc5,0xaf,0x93,0xe2,0xf8,0xe7,0x9d,0x6e,
    0x83,0x68,0x1e,0xd3,0x7a,0xe5,0x7b,0x29,0xe7,0x3f,0xe0,0xbc,0xca,0xd5,0xcf,0xfe,
    0x88,0xcd,0x72,0x6b,0x3d,0x14,0xe7,0x7f,0x78,0xe7,0x9d,0x27,0x2c,0xd6,0xe1,0x5c,
    0x2c,0xc8,0xb1,0xd6,0x93,0x52,0x5c,0x6b,0xf6,0x17,0x88,0xa5,0xfb,0x42,0x21,0x74,
    0xeb,0x38,0x3f,0x25,0x96,0xcb,0xd2,0x74,0xbf,0xf0,0x7d,0x59,0xca,0xba,0x6e,0x4c,
    0xcf,0x78,0xa7,0xd4,0x47,0x09,0xfd,0x61,0x8f,0x3f,0x8b,0x08,0xee,0xae,0xff,0xc6,
    0xd9,0x65,0xda,0x5f,0x8f,0xef,0xf8,0x1e,0x5c,0x11,0x95,0xe3,0xf9,0x38,0x6b,0xe3,
    0x7d,0xee,0xff,0x94,0xb8,0x06,0xec,0xe3,0x9f,0x89,0xbd,0xef,0xf6,0xa3,0x3e,0x7a,
    0xc4,0x5e,0xff,0x8d,0xfb,0x8f,0x73,0xfa,0x38,0xbf,0x5d,0xa7,0x89,0xef,0x8f,0x3a,
    0xf8,0x0e,0xfd,0x9d,0x3e,0x4e,0xa7,0x35,0x5b,0x92,0xd6,0xc7,0x19,0xe2,0xe0,0x74,
    0x96,0x7e,0xaf,0x45,0x19,0xf0,0x8f,0xe2,0x38,0x4b,0xde,0x78,0xff,0x3c,0x3e,0x2f,
    0x93,0xe7,0x59,0xc6,0xc1,0xfe,0xff,0x93,0x7b,0x6f,0xbc,0x3f,0xe6,0xde,0x1b,0xef,
    0x7f,0x11,0xfb,0xd8,0xf1,0x5e,0xc1,0x33,0xfa,0x09,0xe5,0x33,0xa3,0x26,0xce,0xdd,
    0xbf,0xe9,0xef,0x13,0xee,0x01,0xd6,0xf3,0x64,0xe4,0x5f,0x9a,0x72,0x54,0x79,0xe2,
    0xb0,0x6b,0xc4,0x84,0xfc,0xae,0x93,0x2f,0x9e,0x9f,0x72,0xef,0x8f,0x04,0xad,0x75,
    0x70,0x3e,0x17,0xdf,0x6f,0x51,0x06,0xfb,0x43,0x41,0x7d,0x40,0xd6,0x45,0x54,0xb6,
    0x2f,0xfa,0x46,0x6e,0x44,0x54,0x8e,0xfd,0xf9,0x4f,0xe4,0x7b,0x33,0x51,0xb9,0xe5,
    0x08,0xf2,0x1b,0xf1,0xfd,0x26,0x63,0xe2,0xbd,0x6b,0xf4,0x8a,0xfa,0x2d,0x61,0xad,
    0x4f,0x62,0x8c,0x15,0xac,0xd3,0x4e,0xa2,0xb2,0xdf,0xc6,0x18,0xd0,0x2b,0x13,0x3d,
    0x17,0xc0,0x4d,0xa7,0x5c,0x14,0xff,0x1d,0xd7,0xd8,0x85,0x3c,0x80,0xd7,0x47,0xde,
    0xf8,0xde,0x76,0x13,0xfd,0xd6,0x4c,0xa4,0x4f,0xdb,0x77,0xe4,0xb0,0xbb,0xa8,0xdc,
    0xf2,0xff,0x99,0x28,0xd6,0x5d,0xb2,0xfc,0x5b,0x4d,0x7c,0x2e,0x5a,0x13,0xd0,0xd9,
    0xcb,0x9a,0xb8,0x26,0x8a,0xa3,0x26,0x6e,0x4b,0xb6,0x5e,0xe0,0xd7,0xe3,0xb8,0xcd,
    0x1a,0xb8,0xee,0x62,0xdc,0x70,0x31,0x02,0xeb,0xfd,0x00,0x63,0xdc,0x64,0x8c,0x1b,
    0x2e,0xc6,0x2d,0x51,0x1c,0x7b,0x66,0xfe,0xf0,0xc4,0xbe,0x94,0xf3,0x00,0x5e,0x63,
    0x7e,0x6f,0x31,0xee,0x2f,0x68,0xdb,0x43,0x54,0x0e,0x7e,0xbd,0x1c,0x3f,0xe0,0x3d,
    0x71,0x9e,0xe9,0xaf,0x27,0xfd,0xdf,0xe2,0xfe,0x00,0xb7,0xba,0xb9,0x57,0xb2,0x73,
    0x64,0x58,0x1f,0x97,0xa3,0x5f,0xb2,0x06,0xfa,0x8a,0xea,0xf6,0x71,0xf1,0x2b,0x44,
    0x71,0xc4,0xaf,0x74,0xf1,0x81,0xdf,0x17,0x47,0x25,0xe3,0xdf,0xe7,0xe2,0x3d,0xc0,
    0x78,0xe2,0xe2,0x55,0x31,0x9e,0xb8,0x78,0xfd,0x45,0x75,0xab,0xc8,0xdd,0x7c,0x55,
    0xba,0xdc,0x3c,0xc8,0xf8,0x58,0x4f,0x7f,0xc6,0x34,0x6e,0x0f,0x89,0xca,0xc1,0x6d,
    0xa0,0xe3,0x06,0x7c,0x40,0x1c,0x03,0xe9,0x0f,0xef,0xcd,0xe4,0xf1,0x55,0xae,0xb1,
    0xd1,0x71,0x1b,0xe4,0xf6,0xd2,0xb8,0x0d,0x16,0xd5,0x1d,0x44,0x6e,0xe6,0x6b,0xa0,
    0xe3,0x56,0xcd,0xf8,0xe0,0x3b,0x98,0x31,0x8d,0xdb,0x23,0xa2,0x72,0x70,0x1b,0xe2,
    0xb8,0x01,0x47,0x9f,0x39,0x84,0xfe,0x6a,0x5c,0xde,0x1e,0x73,0x79,0x33,0xbe,0x43,
    0x45,0x71,0xcf,0xb7,0x96,0x7c,0x0b,0x8e,0xef,0x30,0x51,0xdd,0x5a,0xf2,0x35,0xff,
    0x43,0x1c,0xdf,0xe1,0xe4,0x84,0x35,0x0c,0x23,0x0f,0xf0,0x1b,0xe9,0xf8,0x41,0x67,
    0x44,0x1c,0x23,0x69,0x3f,0x22,0x57,0x57,0xc0,0xd7,0xc6,0x98,0x38,0x07,0xf5,0xee,
    0x3c,0xd5,0xc7,0xd3,0x88,0xbb,0x6b,0x7c,0xee,0xac,0xe2,0x6e,0xab,0xe5,0x79,0x05,
    0xf7,0x09,0xd4,0x41,0xdc,0x87,0x43,0xf1,0xbd,0x50,0x16,0x34,0x06,0x9e,0xb6,0xd6,
    0xf2,0xa0,0x71,0xf0,0xb7,0x81,0xd8,0x5d,0x41,0x71,0xf8,0x32,0xac,0x6b,0x50,0xbc,
    0x2e,0x51,0x2e,0xf8,0x6e,0x7c,0x21,0x14,0x73,0x99,0x44,0x3d,0xfb,0x76,0x74,0x0b,
    0xaa,0xb3,0x99,0x3e,0xee,0x76,0x3e,0x2c,0xaf,0x5f,0x0a,0x8a,0xd7,0xf2,0xde,0x18,
    0x18,0xb2,0x5c,0x41,0xd6,0x23,0x8e,0x7b,0xc8,0x1b,0x4f,0xb3,0xbb,0x97,0x76,0x8d,
    0xb4,0x1b,0xe0,0xec,0x20,0xeb,0x1d,0x47,0x05,0xed,0x2a,0x9c,0x5d,0x25,0xed,0xe6,
    0xd2,0xee,0x21,0x67,0x07,0xd9,0xfd,0x71,0x54,0xd1,0xae,0xca,0xe5,0xe9,0xc1,0xa0,
    0xeb,0x29,0xf0,0x6e,0x78,0x98,0x3a,0xf7,0x3b,0x9d,0x7e,0xd4,0x09,0x39,0x1d,0xc4,
    0xb8,0x1d,0xab,0x0e,0xef,0xbd,0x9d,0x7e,0x5f,0xea,0x4b,0x4e,0x7f,0x80,0xd3,0xef,
    0xe1,0xf4,0x7b,0x51,0x3f,0xc9,0xe9,0x0f,0x74,0xfa,0xc0,0x3e,0x4d,0xff,0xfb,0x4d,
    0x92,0x63,0x41,0x79,0x63,0x1d,0xfd,0xb8,0xb6,0xbe,0xcc,0x4d,0x2f,0xe6,0xd6,0x7c,
    0x4f,0x75,0x35,0x6f,0xd8,0x53,0xee,0x9b,0xb2,0x96,0xd8,0x34,0x51,0x5d,0xc8,0x7e,
    0xc5,0x9c,0x3e,0x2d,0x1a,0x6b,0x1a,0xeb,0x6e,0xba,0xab,0x77,0xc8,0x9e,0x89,0x63,
    0x3a,0xeb,0xfd,0x19,0x77,0x1e,0xbf,0x2d,0x5a,0x7b,0xfe,0x3c,0xce,0x10,0xc5,0xeb,
    0x78,0xaf,0xc0,0xff,0x4c,0x51,0x7c,0x1a,0xcf,0x8a,0xf9,0x9a,0xee,0xce,0xde,0x2c,
    0x51,0x1e,0x58,0xff,0x4c,0xc6,0x04,0x97,0x39,0x8e,0x0b,0x74,0x66,0xc7,0x31,0x87,
    0xf6,0xb3,0x1d,0x97,0xe7,0x1c,0x17,0xbb,0x2b,0xe7,0x8b,0x9e,0x03,0xc8,0x8e,0x11,
    0xfb,0x8e,0x28,0xde,0xe8,0x6a,0x78,0x81,0x28,0x5e,0xcb,0x7d,0x31,0xff,0x73,0x1c,
    0xbf,0x85,0xa2,0x1c,0xc1,0x79,0x01,0x79,0x58,0xec,0x45,0x2e,0xb6,0xe5,0x79,0x31,
    0xd7,0x0b,0xd9,0x01,0xc6,0x59,0x2a,0x8a,0x23,0xd7,0xf6,0x1d,0x5c,0x26,0xea,0xfb,
    0xe7,0xd4,0x79,0x5e,0x54,0x6f,0x19,0xd7,0xdf,0xe4,0xd6,0x0f,0xd9,0xf2,0x38,0x9a,
    0xc8,0x6f,0x39,0x7b,0x00,0xf4,0xc0,0x3f,0xcc,0x7d,0x57,0x4a,0xd9,0x3b,0xa2,0xe7,
    0x79,0x81,0xf2,0x29,0xf1,0x54,0xe3,0xff,0x90,0x41,0x41,0xfb,0xa0,0x23,0x21,0xeb,
    0x01,0x02,0xeb,0x06,0xfd,0xef,0xe0,0xa0,0x36,0x85,0xf4,0xff,0x28,0xc5,0xaa,0x83,
    0xfe,0x4f,0x00,0xd9,0xd6,0x88,0xc1,0xcf,0x23,0x41,0x7d,0x41,0x66,0xbe,0x6b,0x68,
    0xfb,0x82,0x14,0xfb,0x36,0x9b,0x47,0x83,0xea,0xc0,0xcf,0x1a,0x62,0x8f,0x05,0xf5,
    0xf5,0x68,0xc8,0x38,0x0c,0x25,0x3f,0x70,0x78,0x89,0xd8,0xb0,0xa0,0x78,0xb5,0xd3,
    0x1b,0x1e,0xd4,0x3e,0x71,0xfc,0x47,0x10,0x13,0x87,0x8d,0x24,0x06,0xd5,0xa9,0xf6,
    0x3f,0x47,0x50,0x7b,0xe8,0x43,0x0e,0xff,0xd8,0x7f,0xcb,0x6f,0x93,0x64,0x7d,0xe3,
    0x79,0xf2,0x41,0x4d,0xc0,0x6e,0x79,0xee,0xbb,0xaf,0x7d,0x64,0x79,0xaa,0x7b,0x8e,
    0xba,0xe8,0x39,0xea,0x78,0x5f,0xc0,0xbe,0x49,0x8a,0xfb,0xd2,0x9b,0xac,0xb7,0x95,
    0x8c,0xb7,0xd2,0xc5,0x7b,0x83,0x3e,0xa0,0x73,0x21,0x3e,0x9b,0x25,0xeb,0x53,0x0f,
    0x07,0xed,0x7f,0x21,0x7b,0x59,0x54,0x66,0x7d,0xea,0x3a,0x51,0xb9,0xf5,0xa9,0xab,
    0x29,0xb7,0x1a,0x82,0x7c,0x55,0x1c,0xab,0x19,0x13,0xef,0xd6,0xa7,0x6e,0x70,0x7d,
    0xea,0x61,0xd7,0xa7,0x6e,0x14,0x95,0x59,0x9f,0xba,0x99,0xf5,0xb5,0xd1,0xf5,0xa9,
    0x5b,0x44,0x71,0x3b,0x7b,0x2f,0x93,0xc7,0x16,0xd7,0xa7,0x6e,0x13,0xfd,0x6d,0x61,
    0x22,0x7d,0xfa,0x3e,0x75,0xbb,0xa8,0xdc,0x7a,0xc8,0x27,0x82,0x62,0xdb,0x3b,0xe8,
    0x53,0x47,0x05,0xbd,0x57,0xa1,0x63,0x3d,0xe4,0xe8,0xa0,0x38,0xce,0xcc,0x38,0x77,
    0x27,0x00,0xaf,0x8f,0x63,0x1c,0xbf,0xb5,0xf5,0x21,0x8b,0x31,0xc6,0xc5,0xc8,0xf7,
    0xa9,0x63,0x19,0x63,0x8c,0x8b,0xd1,0x10,0x14,0xc7,0x9e,0x99,0xbf,0x71,0x21,0xfb,
    0x46,0x8c,0x0f,0xca,0x03,0x39,0x6d,0x60,0x5c,0x3b,0xe7,0xaf,0x8a,0xca,0xc1,0x6f,
    0xa7,0xdb,0x0f,0xe0,0x3b,0xe2,0xd8,0xc9,0xfd,0xd8,0xc1,0x1a,0x69,0xe6,0x7c,0xa7,
    0xeb,0x27,0x5a,0x25,0x5b,0xb7,0xe5,0xf4,0xa7,0xb9,0x9c,0x36,0x48,0x96,0xd3,0xd7,
    0x44,0xe5,0xb6,0xde,0xd7,0x45,0xb1,0xd7,0x5c,0x4e,0xed,0x1b,0xf6,0x33,0xe2,0xc1,
    0x61,0xfb,0x9c,0xae,0x61,0x53,0x82,0xf2,0xf0,0xfd,0xc6,0xd4,0xa0,0xf8,0x3e,0xd7,
    0x6f,0x3c,0x15,0x14,0xaf,0x73,0x7a,0xdf,0x08,0x8a,0xfb,0x1e,0xe4,0x9b,0xa1,0x98,
    0xff,0x24,0xea,0xd9,0x1a,0xbe,0x15,0x54,0xc7,0x7a,0x90,0xa7,0x9d,0x0f,0xfb,0x7e,
    0x4f,0x0f,0x8a,0x5b,0x0f,0xb2,0xc4,0xed,0x3f,0x64,0x8d,0x71,0x3c,0xcb,0xfd,0x7a,
    0xd6,0xf5,0x12,0xb3,0x68,0x67,0x3d,0xc8,0x62,0x67,0x07,0xd9,0xec,0x38,0xe6,0xd1,
    0x6e,0x9e,0xb3,0x7b,0x8e,0x76,0xd6,0x83,0x2c,0x72,0x76,0x90,0xcd,0x8f,0x63,0x21,
    0xed,0x16,0xba,0x3b,0xfa,0xbb,0x41,0xd7,0x63,0x3d,0xc8,0x22,0xea,0xcc,0x77,0x3a,
    0x0b,0xa8,0x13,0x72,0x3a,0x8b,0x42,0x76,0xfe,0xdb,0x82,0xfa,0x82,0xef,0x05,0x8c,
    0x07,0xdd,0xc5,0xd4,0x9d,0xed,0xfc,0xcd,0xa5,0x3f,0xeb,0x51,0x4c,0x67,0xb1,0xf3,
    0x77,0x34,0xa8,0x4f,0xc4,0x98,0xcb,0x75,0x43,0x77,0x09,0x75,0x1b,0x9d,0xbf,0x19,
    0xf4,0x67,0x3d,0x8c,0xe9,0x2c,0x71,0xfe,0xde,0x0a,0xea,0x13,0x31,0x66,0x30,0xff,
    0xb6,0x7f,0xdf,0x73,0x75,0xb1,0x9e,0xd8,0xb2,0xa0,0xf8,0xd2,0xf4,0x77,0x27,0xc5,
    0x9a,0x82,0xfa,0x81,0xcc,0xee,0xee,0xef,0x07,0xc5,0x9b,0x92,0xec,0x4e,0xfd,0xb5,
    0x28,0xbe,0x9f,0xf7,0xe5,0x41,0x77,0xb6,0x20,0x3b,0x10,0xc7,0x41,0x9e,0x25,0xbc,
    0x6f,0xe6,0x59,0x7a,0x91,0x75,0xfc,0xba,0x64,0xdc,0x56,0x04,0xf5,0x35,0xc6,0xd5,
    0xec,0x4a,0x87,0x4d,0xa5,0xed,0xaa,0xa0,0xba,0x90,0xad,0x27,0xb6,0x3a,0xa8,0xaf,
    0x55,0xac,0x5d,0xfc,0x16,0xd9,0x1c,0xf4,0x77,0xc8,0x66,0xea,0xac,0x0b,0xaa,0xf7,
    0x62,0xc8,0x7e,0xf3,0x58,0x1f,0x14,0x5f,0xc1,0xdf,0xba,0x5e,0x0a,0x7a,0x16,0x9f,
    0xe4,0xb7,0x76,0x43,0x50,0x1d,0x3b,0x83,0xc0,0x36,0x12,0x93,0x94,0x53,0x69,0xfa,
    0x7b,0xe6,0xa6,0xa0,0xba,0x90,0xc1,0xc7,0x4c,0xde,0x23,0x9b,0x83,0xf2,0xd8,0x14,
    0x8a,0x7f,0x43,0xc1,0x9d,0xb8,0x25,0xa8,0x3c,0x49,0xb2,0x3e,0xe2,0x48,0xee,0x7b,
    0xe2,0xfb,0x88,0x37,0x29,0xb7,0xfb,0xf3,0xa8,0xa8,0x0f,0x3f,0xba,0xc6,0x53,0x0b,
    0x59,0x1b,0xef,0x92,0x6a,0xfe,0xde,0x06,0xdb,0xa3,0xae,0x07,0xf9,0x71,0xd0,0x3b,
    0xee,0x8d,0x3b,0xf4,0x20,0x5b,0x83,0xfa,0xf0,0x3d,0xc8,0x36,0xf6,0x20,0x5b,0x5d,
    0x0f,0xb2,0x3d,0xa8,0xaf,0x6d,0xae,0x07,0xf9,0x09,0x6d,0xdb,0xee,0xd0,0x83,0xbc,
    0x12,0x54,0x67,0xab,0xeb,0x41,0x5e,0x0d,0xea,0xeb,0x15,0xd7,0x5b,0xec,0x20,0x3f,
    0xdf,0x83,0xb4,0x04,0xc5,0xb7,0x39,0xbd,0xdd,0x41,0xed,0x7d,0x0f,0xb2,0x87,0x98,
    0xef,0x41,0xf6,0x12,0xf3,0x3d,0x48,0x6b,0x50,0x7b,0xe8,0x43,0xde,0xc2,0xb3,0x67,
    0x35,0x7b,0xd0,0xf5,0x04,0x17,0xc9,0x07,0x67,0x0d,0x76,0x07,0x72,0x77,0x45,0xb3,
    0xd3,0xbd,0x40,0x5d,0xdc,0x27,0xb0,0x3b,0x28,0xc5,0xbd,0xc6,0x6a,0xc9,0x78,0x1d,
    0x93,0x6c,0x9d,0xbf,0xe1,0xb9,0xfa,0xbd,0x28,0xde,0xc6,0x6f,0xdc,0x71,0x77,0xae,
    0x20,0x7b,0x3b,0x8e,0xe3,0xf4,0xf5,0xb6,0xdb,0xd7,0x3f,0x4a,0xc7,0xfb,0x7a,0x88,
    0x7e,0xff,0x44,0xbf,0xe7,0xe9,0xf7,0x84,0xf3,0x0b,0xd9,0xbb,0x71,0x9c,0xa0,0xdf,
    0x77,0xed,0xf7,0x4f,0xfc,0xdf,0xcf,0xdf,0x59,0xed,0xdc,0x7c,0xc0,0xbb,0x70,0x4e,
    0xf4,0x8b,0xf5,0xb6,0x53,0xe7,0x03,0xc7,0xe5,0x43,0x51,0xbc,0xfd,0x0e,0x75,0x70,
    0x5a,0x54,0x07,0x7c,0xac,0x0e,0xce,0x88,0xae,0xe1,0x34,0xf3,0x65,0x5c,0x4e,0x30,
    0xb7,0xd0,0x79,0x33,0xa8,0x0e,0xd6,0x7d,0x86,0x9c,0x8d,0xe7,0x47,0x39,0x9e,0xff,
    0x20,0x4f,0xcb,0xf5,0x39,0x51,0x7b,0x5f,0x2b,0xe7,0x89,0xf9,0x5a,0xb9,0x40,0xcc,
    0xd7,0xca,0x45,0x51,0x7b,0xe8,0x5f,0xe0,0xde,0xcc,0x8d,0x71,0x10,0x13,0x71,0x2e,
    0x92,0xb3,0xed,0xcb,0x71,0x29,0xfe,0x9d,0x16,0xcf,0x9b,0x31,0xca,0xf0,0x38,0xfe,
    0x07,0xb7,0x27,0x57,0x70,0x7c,0x1d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     const uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
