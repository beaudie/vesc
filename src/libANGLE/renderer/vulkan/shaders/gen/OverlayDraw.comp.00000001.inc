// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x6c,0x97,0xd5,
    0x15,0x7e,0xcf,0xed,0xf7,0xc4,0x59,0xa7,0x6e,0x41,0x6b,0x33,0x0a,0x4c,0x27,0xb4,
    0x43,0xc5,0x0e,0xd7,0x40,0x5b,0x40,0xa8,0xe0,0x26,0x08,0x8a,0x19,0x59,0x80,0x8d,
    0xb1,0x6c,0x64,0x24,0xcb,0x16,0x93,0x7e,0x80,0xcc,0xa9,0x8c,0x45,0xf7,0x87,0x93,
    0x7d,0x40,0xf8,0xd0,0x6e,0x93,0x49,0xd9,0xca,0xa4,0x83,0x75,0x2e,0xa6,0x02,0x25,
    0x59,0x04,0x06,0x63,0xc9,0x24,0x0b,0x34,0x71,0x55,0x3a,0x23,0x4a,0x13,0xb4,0x40,
    0x1b,0x76,0x9e,0xf7,0x3c,0xd7,0xf7,0xfc,0x7e,0x2b,0xbf,0xe4,0xe6,0x7d,0xef,0x73,
    0xce,0x3d,0xe7,0xb9,0xe7,0x9e,0x7b,0xcf,0xfd,0xbd,0x05,0x61,0x7c,0x49,0x92,0x48,
    0xf2,0x89,0xa4,0x34,0xf9,0x71,0x48,0xd2,0xdf,0xf5,0x49,0x50,0x24,0x49,0xae,0x49,
    0x8a,0xd3,0xe7,0xdc,0x07,0x16,0x3d,0x50,0xf3,0xfd,0x1f,0xac,0xac,0x99,0x7a,0xcf,
    0x14,0xc8,0x3f,0x99,0x14,0xa4,0x7a,0x90,0x5d,0x97,0x94,0x24,0x45,0xfa,0x2c,0xd4,
    0xf6,0xdd,0x15,0xdf,0x5e,0x03,0x7c,0xbb,0xb6,0x7d,0xda,0xca,0x75,0x7c,0x61,0x6a,
    0x2f,0x51,0xeb,0xd6,0x52,0x7b,0x8a,0xd6,0xeb,0xb3,0x38,0xd5,0x49,0x92,0x26,0xb5,
    0xd0,0x60,0xae,0x93,0xf1,0x7c,0x46,0x4c,0x88,0x79,0xbd,0x40,0xec,0xb3,0x0e,0x2b,
    0x20,0x36,0x85,0xf6,0x67,0xd2,0xfe,0x14,0x31,0x9d,0x59,0x79,0xf6,0xe7,0xea,0x88,
    0x59,0xb4,0x05,0xfd,0xfb,0xf4,0x59,0xf5,0xb1,0xcc,0xfa,0xe3,0x1c,0xdf,0x55,0x79,
    0xf2,0x55,0x94,0x17,0xb2,0xdf,0x9c,0x37,0x9f,0x96,0x51,0xe6,0xd3,0x32,0xca,0x7c,
    0x5a,0x46,0x99,0x4f,0xcb,0x28,0xf3,0x69,0xcd,0x9b,0x4f,0xdb,0x28,0xf3,0x69,0x73,
    0xf3,0x59,0x97,0xc7,0x77,0x1d,0xf9,0x46,0xf9,0xf6,0x74,0x7d,0x93,0xa4,0x82,0x3e,
    0xdb,0x47,0xe1,0xdb,0xee,0xf8,0x96,0xd2,0x47,0xbb,0xb3,0xd1,0x95,0xe7,0xa3,0x8b,
    0x3e,0x0a,0xd8,0xdf,0x47,0x1f,0x37,0xb3,0xbf,0x47,0x72,0xf5,0xd1,0x1f,0xe7,0xfa,
    0x87,0xc4,0xf4,0xc7,0x6a,0xbb,0x41,0xbd,0x84,0xd4,0x5e,0x41,0x6a,0x0f,0xef,0x37,
    0xa9,0x4e,0x31,0xe3,0x84,0xdf,0x67,0xb4,0x5f,0xc2,0xb8,0x04,0xf6,0x4b,0xd9,0xc7,
    0xba,0xdc,0xa8,0x68,0x99,0x3e,0x3f,0xad,0x16,0x6e,0xe2,0x38,0xe8,0x54,0xa5,0xb6,
    0x4c,0x07,0xfd,0xcf,0xeb,0xb3,0x8c,0x36,0x26,0xd1,0x47,0x2d,0x7d,0xc4,0x7e,0x1d,
    0xf5,0x63,0x7f,0x06,0xd7,0xb0,0x82,0xb9,0x5c,0x4a,0xac,0x52,0xa5,0x0d,0xec,0x57,
    0xf1,0x59,0xef,0xc6,0x35,0x92,0x47,0x05,0x73,0xb4,0x81,0x58,0x25,0xf3,0x71,0x66,
    0x2a,0x2f,0x4c,0x66,0x93,0xcf,0xac,0xd4,0xb7,0xf5,0xef,0x73,0x71,0x98,0x43,0x3b,
    0x42,0xdb,0x73,0xd2,0x18,0x66,0x9c,0xe7,0xa4,0x6b,0x68,0x6b,0x01,0x7b,0x5f,0xe6,
    0xd8,0x62,0xc7,0x65,0x11,0xf9,0xc5,0xfe,0xa3,0xda,0xae,0xa4,0xf1,0x2f,0x4b,0x56,
    0x32,0x46,0x42,0x9b,0xf9,0x4f,0xd8,0xfc,0x26,0xdf,0x57,0x92,0x23,0xfa,0xab,0xdc,
    0xda,0xac,0xd6,0xe7,0x1c,0xb7,0x36,0x6b,0xd8,0x2f,0xe0,0xfc,0x9b,0xf3,0xe2,0xd6,
    0x92,0x17,0xb7,0x66,0xea,0x21,0xf7,0x5b,0x5c,0x9c,0x90,0xe7,0xad,0xe4,0xb0,0x96,
    0xf6,0xdb,0xc8,0x01,0xfd,0x75,0xce,0xe7,0x06,0xce,0xa3,0x80,0xf3,0xc4,0xfb,0xc6,
    0x94,0xe1,0xfa,0x7a,0xc8,0xb7,0x32,0x26,0x31,0x4e,0xdb,0x38,0xc7,0xad,0xb4,0xb7,
    0x8d,0xe7,0x99,0xa4,0xbe,0x0b,0xd3,0xfc,0x8f,0x39,0x07,0xfd,0x5f,0x33,0x77,0xda,
    0xa9,0x8f,0xfe,0x6f,0x88,0x41,0xfe,0x5b,0xbe,0x97,0x38,0xff,0x9d,0x8c,0xd1,0x64,
    0x45,0x31,0xd7,0x3d,0xc4,0x62,0xdb,0xc8,0x35,0x78,0x85,0x7e,0x62,0xcc,0x93,0x51,
    0xd6,0x60,0x2f,0xdf,0x5f,0xa1,0x7f,0xf4,0xbb,0x88,0x45,0xfe,0xfb,0x5c,0x9e,0xc0,
    0x5e,0x4f,0x5e,0xde,0x1c,0x63,0x1f,0xf6,0xfe,0xc5,0xd8,0x95,0x3a,0x7e,0x25,0x92,
    0xcb,0xaf,0xd3,0x8d,0x2d,0x17,0xd3,0xc7,0xd8,0x99,0x7c,0xaf,0x72,0xbe,0x9a,0x15,
    0x5b,0xee,0xe6,0xfe,0x94,0xf6,0x8f,0xbc,0xf1,0xc6,0x8c,0x68,0xfb,0xe9,0x3c,0xdb,
    0x90,0xc3,0xd6,0xcf,0xc5,0xe2,0x56,0xcc,0x58,0xfc,0x41,0x72,0xf3,0x31,0xfe,0x82,
    0xe3,0xde,0x49,0x21,0x74,0xeb,0xd8,0xdf,0x23,0x31,0xd6,0xc5,0xe9,0x9a,0xe2,0x8c,
    0x59,0xc4,0xdc,0x47,0x1c,0x6a,0x74,0xe5,0xb1,0x36,0x1b,0x02,0xf6,0x7c,0x51,0x6a,
    0xaf,0x90,0xb6,0x91,0x13,0x43,0x8a,0xa0,0xbe,0x7d,0xa4,0xbd,0x5e,0xda,0xba,0xac,
    0xef,0x38,0x1f,0x0e,0x8b,0xc9,0xf1,0x9c,0xce,0x5c,0xda,0xc1,0x7c,0x79,0x50,0xad,
    0xc2,0xee,0x0b,0xc4,0x76,0xb8,0xb5,0x6b,0x54,0x8b,0xc8,0x8b,0x97,0x98,0x2b,0xd8,
    0xb7,0xd3,0x79,0x96,0xed,0x24,0xfe,0x7b,0xd5,0xc1,0xb9,0xf4,0x3b,0xda,0x00,0xbe,
    0x59,0x75,0x10,0x93,0x97,0x89,0x83,0x53,0x07,0xed,0x5e,0x52,0x19,0xf0,0x5d,0xda,
    0x3a,0xc8,0x1b,0xef,0x17,0xf5,0xd9,0x4b,0x9e,0x1d,0xf4,0x83,0x5c,0xf9,0x13,0xf3,
    0x24,0xf2,0xde,0xcf,0x3c,0x89,0xbc,0xff,0x4c,0x6c,0xbf,0xe3,0xdd,0xc6,0x3d,0xdd,
    0x4d,0xf9,0x32,0xd5,0x44,0x9e,0xfc,0x85,0xf6,0xba,0x3f,0xae,0x0d,0x49,0xb2,0x50,
    0xf9,0x63,0xed,0x5e,0xa3,0x3c,0x71,0xd8,0x01,0x62,0x42,0x7e,0x07,0xc9,0x17,0xcf,
    0x0b,0xcc,0x8b,0x25,0xc1,0xf6,0x05,0x38,0xaf,0xd5,0xf7,0xc3,0x94,0xa5,0xe7,0x56,
    0x30,0x1b,0x90,0x9d,0x4c,0x4c,0xb6,0x4b,0x6d,0x23,0x36,0x7f,0xa3,0x1c,0xeb,0xf3,
    0xa1,0xf2,0xed,0xa5,0x3c,0xc6,0x08,0xf2,0x43,0xda,0x7a,0xe9,0x13,0xef,0x63,0xd4,
    0x2a,0x72,0xf9,0x08,0x39,0xdd,0x4f,0x1b,0x6d,0xcc,0xe1,0xa3,0x94,0x1d,0x54,0x1f,
    0xd0,0x3b,0xce,0x3d,0x73,0x34,0xc9,0x74,0x4e,0x10,0xef,0xe5,0x1c,0x4f,0xd2,0xc6,
    0x89,0x74,0xbd,0x4b,0xd2,0x7d,0xf5,0x26,0xcf,0xa6,0xb9,0x1c,0x1b,0xd7,0x1d,0x31,
    0x3c,0x45,0x79,0x8c,0xff,0x11,0x31,0xec,0x94,0x8b,0x7f,0xcc,0x89,0xa3,0x62,0x39,
    0x01,0x9d,0x2d,0xcc,0x89,0x63,0x62,0x38,0x72,0xe2,0xa4,0x64,0xf3,0x05,0xfe,0x77,
    0x6d,0x27,0x99,0x03,0x78,0x8f,0x3e,0x8e,0x3b,0x1f,0x81,0xf9,0xde,0x49,0x1f,0x27,
    0xe8,0xe3,0xb8,0xf3,0xf1,0x0f,0x31,0x1c,0x6b,0x16,0xed,0xe1,0x89,0x75,0x81,0xfc,
    0x9f,0x62,0x3c,0x0e,0x51,0x17,0xbe,0x76,0x72,0xec,0x69,0xca,0xc1,0xaf,0xcf,0xad,
    0x07,0xf0,0x33,0xda,0xfa,0xb8,0x1e,0x67,0x98,0x13,0x87,0xd9,0xef,0x73,0x79,0xf3,
    0x96,0xdb,0x47,0x11,0xeb,0x77,0x31,0x7a,0x99,0x39,0xf0,0x36,0x75,0xfb,0x93,0xcc,
    0xff,0x3b,0xc4,0xe1,0x7f,0xc0,0xf9,0x07,0x7e,0x56,0xdb,0x00,0xfd,0x9d,0x75,0xb6,
    0xdf,0xa5,0x3f,0x71,0xd8,0x7b,0xf4,0x27,0xce,0xdf,0x39,0xea,0xbe,0x47,0xee,0xd1,
    0xd6,0x40,0x92,0xc5,0xe6,0x7d,0xfa,0xef,0xa3,0xfe,0x59,0xc7,0xed,0x03,0xca,0xc1,
    0x6d,0xd0,0x71,0x03,0x7e,0x5e,0xdb,0x20,0xed,0xe1,0x7d,0x3d,0x79,0x5c,0xe0,0x1c,
    0x7b,0x1c,0xb7,0x21,0xb7,0x96,0x91,0xdb,0x45,0xea,0x0e,0x91,0x5b,0xb4,0x35,0xe8,
    0xb8,0x5d,0xa2,0xff,0x01,0xea,0x9f,0x77,0xdc,0x2e,0x53,0x0e,0x6e,0x23,0x8e,0x1b,
    0xf0,0x61,0x6d,0x23,0xb4,0x37,0xec,0x78,0x5c,0x71,0x71,0x8b,0x7c,0xd1,0xb9,0x92,
    0xc7,0x37,0x30,0xff,0x0a,0x1c,0xdf,0x02,0x31,0xdd,0xc0,0x3c,0x8b,0xf6,0x47,0x1c,
    0xdf,0x42,0x31,0x4e,0x83,0xd4,0x1f,0x26,0xbf,0x62,0x97,0xf7,0xd0,0x29,0xd2,0x56,
    0xcc,0x3c,0x2d,0x92,0xdc,0xbc,0x02,0xfe,0x84,0xfa,0xc4,0x3e,0xb8,0xd6,0xed,0xa7,
    0x46,0xdd,0x8d,0xb8,0x2b,0x5d,0x2f,0xb9,0x7b,0x15,0x75,0xae,0x96,0xfb,0x15,0xdc,
    0x3f,0x25,0xa6,0x13,0xe7,0xf2,0xa6,0x98,0x1d,0xfc,0x9e,0x26,0x76,0x4a,0x0c,0x87,
    0x6e,0xc4,0xfe,0x2d,0x86,0xd7,0xa5,0x75,0xde,0xb0,0xd3,0x0e,0x6b,0xd4,0x19,0xc2,
    0xff,0x99,0x3c,0xff,0x4d,0x1c,0x7b,0x5a,0x32,0x0e,0x7d,0x62,0x7a,0x91,0xc3,0x2d,
    0x2e,0x9e,0x11,0xbb,0x55,0xb2,0x7c,0x7d,0x82,0x58,0xa5,0x98,0x2e,0x64,0x1d,0x8c,
    0xfb,0x78,0x31,0x7b,0x95,0xdc,0xa3,0x13,0x5d,0x2c,0x21,0x9b,0xa0,0x6d,0x22,0x63,
    0x39,0xc1,0xf9,0xbc,0x8d,0xf3,0xf6,0x6b,0x7d,0xbb,0x18,0x5e,0xc7,0x33,0x0b,0xf6,
    0xef,0x10,0xc3,0x2b,0xb9,0x0e,0xd1,0xd6,0x44,0x77,0x7e,0x4c,0x12,0xe3,0x81,0xb5,
    0xb9,0x83,0x3e,0xc1,0xa5,0xda,0x71,0x81,0xce,0x64,0x6d,0xd5,0x1c,0x3f,0xd9,0x71,
    0xb9,0xd3,0x71,0x89,0xe7,0xf0,0x5d,0x5c,0x03,0xc8,0x0e,0x13,0xbb,0x5b,0x0c,0xef,
    0x71,0x79,0x37,0x55,0x0c,0xaf,0xe5,0x3e,0x89,0xf6,0xab,0x1d,0xbf,0x7b,0xc4,0x38,
    0x82,0xf3,0x54,0xf2,0x88,0xbe,0xa7,0x39,0xdf,0x31,0xce,0xf7,0x72,0xbe,0xd3,0xc4,
    0xce,0x55,0xd8,0xa8,0x13,0xc3,0xfb,0xdc,0xd9,0x38,0x5d,0xcc,0xf6,0x4b,0xd4,0x99,
    0x21,0xa6,0x37,0x9d,0xf3,0x6f,0x70,0xf3,0x87,0xac,0x5e,0x5b,0x03,0xf9,0xd5,0x8b,
    0xd5,0x17,0xdc,0xbd,0x66,0xe5,0xe5,0xcc,0x31,0xe6,0x2b,0xea,0xe9,0x6c,0xca,0x1f,
    0xd4,0xfc,0xc6,0x9d,0xf8,0x2d,0xb1,0x1a,0xbb,0x24,0x64,0xf5,0x25,0x30,0x6f,0x70,
    0xcf,0xfa,0x8f,0xd8,0x18,0xe4,0xd2,0x8f,0x88,0xf5,0x8b,0xdd,0x4d,0x21,0xfb,0xa9,
    0x62,0xb0,0xf3,0xb6,0x98,0xad,0x7e,0x67,0xfb,0x1d,0x8e,0x9d,0x2d,0xb9,0xb6,0xe3,
    0x98,0x01,0x31,0x1d,0xd8,0xf9,0x21,0xb1,0xff,0x8a,0xd9,0x1a,0x90,0x8c,0xc3,0xbb,
    0xe4,0x08,0x0e,0x4f,0x11,0x3b,0x27,0x86,0xf7,0x3b,0xbd,0xf7,0xc5,0xc6,0x27,0x8e,
    0xff,0x07,0xc4,0xc4,0x61,0xe7,0x89,0x81,0xcb,0x02,0xde,0x33,0x06,0xc5,0xc6,0x43,
    0x1f,0xf2,0x73,0xcc,0xcf,0x18,0xdf,0x06,0xc9,0xee,0x24,0xeb,0x18,0x2f,0xe4,0xc4,
    0x20,0xd7,0xc1,0x9f,0x29,0x76,0x47,0x29,0x4b,0x75,0xd7,0x52,0xf7,0x0c,0xef,0xcf,
    0x38,0x7f,0x30,0xbe,0x41,0x72,0xef,0x3c,0xbd,0xcc,0xb7,0x26,0xfa,0x6b,0x72,0xfe,
    0x1e,0xa1,0x0d,0xe8,0x3c,0xae,0xcf,0xf9,0x92,0xdd,0x81,0x16,0x07,0xbb,0x5b,0x41,
    0xb6,0x44,0x4c,0x16,0xef,0x40,0x5f,0x11,0x93,0xc7,0x3b,0xd0,0x3c,0xca,0x63,0x0e,
    0x41,0x7e,0xbf,0xb6,0x79,0xf4,0x89,0xf7,0x78,0x07,0x5a,0x28,0xd9,0x1d,0x68,0xb1,
    0xbb,0x03,0x3d,0x24,0x26,0x8b,0x77,0xa0,0xc5,0x62,0xf9,0x05,0x3c,0xea,0x3c,0x2c,
    0x86,0xc7,0xbd,0xb7,0x84,0x3c,0x1e,0x96,0xec,0x0e,0xf4,0x55,0xb1,0xff,0xb1,0x73,
    0x39,0xd6,0xdf,0x81,0x96,0x8a,0xc9,0xe3,0xfd,0xe4,0x82,0x18,0xb6,0x54,0xfe,0xff,
    0x0e,0xf4,0x21,0xcf,0xec,0x0b,0xee,0x7e,0xf2,0x91,0x18,0x8e,0x3d,0x33,0xec,0xe6,
    0x0b,0x7c,0x08,0x75,0x82,0xf3,0x1d,0x72,0x3e,0x2e,0x3a,0x1f,0xf9,0x77,0xa0,0x4b,
    0xf4,0x71,0xd1,0xf9,0xb8,0x2c,0x86,0x63,0xcd,0xa2,0xbd,0x61,0x77,0x46,0x8c,0x88,
    0xf1,0x40,0x4c,0x2f,0xd3,0x6f,0xdc,0xe7,0xcb,0x84,0x72,0xf5,0xb2,0xc2,0xf1,0x03,
    0xbe,0x5c,0xdb,0x0a,0xda,0x5b,0x4e,0xfb,0xf3,0xd9,0x5f,0xe1,0x6a,0xd5,0xb7,0xdc,
    0xbc,0x63,0x4c,0xbf,0x93,0x17,0xd3,0x72,0xc9,0x62,0xba,0x5a,0x4c,0x1e,0xe7,0xbb,
    0x46,0x0c,0x5b,0xed,0x62,0x1a,0xcf,0xb0,0xef,0x11,0x0f,0x0e,0x7b,0xcc,0xe9,0x46,
    0xac,0x30,0x18,0x0f,0x5f,0xeb,0x8a,0x82,0xe1,0x8f,0xb9,0x5a,0x57,0x12,0x0c,0xaf,
    0x73,0x7a,0x65,0xc1,0x70,0x5f,0xff,0xae,0x71,0x58,0xac,0x7f,0x63,0x42,0xee,0x9c,
    0x9a,0x38,0x16,0xba,0xb1,0xfe,0x5d,0x1b,0x4c,0x2f,0xda,0xb9,0xce,0xf9,0x7b,0x92,
    0x58,0x79,0x30,0x1c,0xff,0xf7,0x5e,0x27,0x76,0x43,0xb0,0xb1,0xe5,0x21,0xab,0x09,
    0x37,0x06,0xc3,0x1f,0x4d,0xb2,0xb3,0xba,0x45,0x0c,0x6f,0xe6,0x9a,0xb5,0xb9,0x35,
    0x83,0xac,0x15,0xb9,0xcf,0x35,0x6a,0x15,0xe3,0x81,0x18,0x8f,0x65,0x7c,0xd6,0x48,
    0xc6,0xed,0xe6,0x60,0xb6,0x1a,0x5d,0x2c,0x6e,0x71,0xd8,0x02,0x8e,0xad,0x08,0xa6,
    0x0b,0xd9,0x93,0xc4,0x6e,0x0d,0x66,0xab,0x82,0x73,0xc7,0xf7,0x96,0xca,0x60,0xdf,
    0x5a,0xd6,0x53,0x67,0x5c,0x30,0xbd,0xb1,0x21,0xfb,0x9f,0x56,0x15,0x0c,0x6f,0xe3,
    0x7f,0xf5,0xf1,0xc1,0xd6,0x78,0x21,0xf7,0xf0,0x84,0x60,0x3a,0x71,0x6d,0x81,0x4d,
    0x24,0x26,0x29,0xa7,0xe2,0xf4,0x9b,0xcd,0xe7,0x82,0xe9,0x42,0x06,0x1b,0xcb,0x78,
    0x3e,0xdd,0x16,0x8c,0x07,0xe4,0xfe,0x7f,0x1f,0xce,0xda,0xdb,0x83,0xc9,0x93,0x24,
    0xab,0x4f,0x1b,0xf3,0xf2,0xd4,0xd7,0xa7,0x9f,0x50,0x1e,0xcf,0xe5,0x67,0xc4,0x6c,
    0xf8,0x36,0x46,0x33,0x1a,0xb2,0x67,0x79,0x46,0xd5,0xf0,0xfb,0x01,0xc6,0x3e,0xe3,
    0xea,0xcf,0xa4,0x60,0x67,0xe7,0x23,0x57,0xa9,0x6d,0x93,0x83,0xd9,0xf0,0xb5,0xad,
    0x3a,0x58,0x6d,0x83,0x2c,0xd6,0xa9,0x9a,0x60,0xb6,0x20,0x8b,0xb6,0xbf,0xc0,0xb1,
    0xcf,0x5e,0xa5,0xb6,0xdd,0x19,0x4c,0x07,0x76,0x62,0x6d,0xbb,0x2b,0x98,0x2d,0xc8,
    0x22,0x87,0xbb,0xc9,0xcf,0xd7,0xb6,0xda,0x60,0x78,0xb5,0xd3,0xfb,0x62,0xb0,0xf1,
    0xbe,0xb6,0x4d,0x23,0xe6,0x6b,0xdb,0xbd,0xc4,0x7c,0x6d,0xfb,0x52,0xb0,0xf1,0xd0,
    0x87,0x1c,0xf6,0x71,0xae,0xc4,0x9c,0x6d,0x73,0xb5,0x66,0x3d,0xf9,0xe0,0xac,0xc1,
    0xb8,0xd6,0xbc,0x33,0x68,0xbe,0xd3,0x7d,0x9c,0xba,0x38,0xa7,0x30,0xae,0x4d,0x72,
    0x6b,0xd8,0x3c,0x57,0x9b,0x9f,0x93,0x6c,0x9e,0xfb,0xb9,0xaf,0x7e,0x26,0x86,0x6f,
    0xe4,0xbd,0x7d,0x93,0xdb,0x57,0x90,0x3d,0xaf,0x6d,0x13,0x6d,0x3d,0x2f,0xf6,0xbd,
    0x04,0xdf,0x83,0x7e,0x21,0xf6,0xbd,0xe4,0x98,0xbb,0x87,0xff,0x92,0x78,0xac,0x7d,
    0xbf,0x12,0xc3,0x6a,0x69,0x7b,0x8b,0xb3,0x0d,0xd9,0x66,0x9c,0xe5,0xb4,0xbd,0xd9,
    0x9d,0x8b,0x5b,0xc5,0xfe,0xb3,0x6c,0x08,0xd9,0x37,0xa6,0x46,0xf5,0x00,0xbf,0xdb,
    0x24,0xfb,0x4e,0xd3,0xe3,0x7c,0x6f,0xa7,0x2c,0xde,0xf7,0x76,0x88,0x61,0xfe,0x3f,
    0xce,0x8b,0x92,0xfd,0x17,0x8a,0x7a,0xed,0x62,0xba,0x90,0x3d,0xa4,0x08,0xfc,0x2f,
    0x08,0x86,0x6f,0xa5,0x73,0xc4,0x33,0xf2,0xdc,0xc2,0xd8,0x43,0x6f,0x69,0xb0,0xf3,
    0x1f,0x71,0xc1,0x98,0xcd,0x2e,0xef,0x77,0xca,0xe8,0x79,0xdf,0xcd,0xd8,0xec,0x62,
    0xdc,0x3b,0x19,0x9b,0xdd,0x2e,0x36,0x90,0x75,0x68,0xdb,0x1d,0xbf,0x15,0xb1,0x86,
    0xe0,0x5b,0xda,0x1f,0xf9,0x1d,0x2d,0x9e,0x2b,0x7b,0xc5,0x78,0x7c,0x5d,0xed,0x22,
    0x1f,0xba,0xa8,0xb3,0xd7,0x71,0xd9,0x27,0x86,0x77,0x5d,0x65,0x9f,0x74,0x8b,0xe9,
    0x3c,0xe7,0xee,0x80,0xaf,0x8a,0xcd,0xa1,0x9b,0xf9,0x14,0xb9,0xec,0xe6,0xfc,0xa1,
    0xf3,0xb5,0x60,0x3a,0x88,0xc9,0xab,0xe4,0x1c,0x79,0xfe,0x35,0x8f,0xe7,0x6b,0xe4,
    0x19,0x73,0xb1,0x47,0x6c,0xbc,0xdf,0x4b,0xaf,0x13,0xf3,0x7b,0xe9,0x00,0x31,0xbf,
    0x97,0x0e,0x8a,0x8d,0x87,0xfe,0x01,0xe6,0xee,0x37,0xd4,0x0f,0x7c,0xc2,0xcf,0x41,
    0x72,0x8e,0x79,0xbb,0x49,0x72,0xbf,0xbd,0xe1,0x39,0xa2,0x5e,0xa6,0x69,0xfb,0x1f,
    0x6b,0xaa,0x56,0x54,0x74,0x1b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[64 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uint packedChars = textWidgetsData[textWidget]. text[packIndex / 4][packIndex % 4];
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontLayer)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     const uvec2 glyphOffset = fontGlyphSize *
//         uvec2(textChar % 32, textChar / 32);
//
//     return texelFetch(font, ivec3(glyphOffset + coordInGlyph, fontLayer), 0). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     return graphWidgetsData[graphWidget]. values[valueIndex / 4][valueIndex % 4];
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontLayer = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar <(32 * 3))
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontLayer);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
