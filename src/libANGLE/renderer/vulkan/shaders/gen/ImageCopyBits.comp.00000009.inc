// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x55,0xdd,0x6f,0xcd,0x59,
    0x14,0x3d,0xfb,0x77,0xaf,0x4b,0x69,0xa9,0x6f,0x4d,0x4c,0x29,0x57,0x5a,0x94,0x48,
    0xa3,0x13,0xa9,0x30,0xe9,0x13,0x41,0x68,0x2b,0xf3,0x40,0xfa,0x62,0x10,0x41,0x66,
    0xe2,0x86,0x07,0xd5,0x2b,0x68,0x04,0x13,0x91,0x10,0xe2,0x41,0x62,0xcc,0xcb,0x4c,
    0x74,0x1e,0x26,0xf1,0x40,0xf0,0xe0,0xd9,0xc7,0x7c,0x35,0x66,0x68,0x04,0xff,0xc1,
    0xbc,0x18,0xc3,0x7c,0x20,0xf6,0x3a,0x7b,0x9d,0xde,0x9d,0x9b,0xdb,0xe4,0x38,0x77,
    0xaf,0xb3,0xf7,0xda,0xeb,0xec,0xb3,0xf7,0x4f,0x2e,0x5b,0x38,0x3e,0x04,0x09,0x13,
    0xc3,0x84,0x70,0x57,0x42,0xfc,0x9b,0x1a,0xb2,0x80,0x9f,0x93,0x42,0x21,0xee,0xeb,
    0x36,0x6d,0xdd,0xb4,0xfc,0xe0,0xa1,0x5d,0xcb,0x57,0x76,0xae,0xc0,0xf9,0xe4,0x90,
    0x8b,0x7e,0x38,0x9b,0xa2,0x3e,0xe3,0x74,0xcf,0xeb,0xfa,0x72,0xc7,0xde,0xaf,0x80,
    0xb7,0xe8,0x6a,0x54,0x3c,0x1f,0xb9,0xec,0x2c,0xad,0x75,0xfa,0x6f,0x4b,0xe4,0x0e,
    0x61,0xae,0xae,0xf5,0x1a,0xbd,0xd8,0xd2,0x86,0x85,0xdc,0x13,0x26,0xc4,0xea,0x1d,
    0x96,0x11,0x6b,0x74,0x58,0x8e,0x98,0xe7,0xcb,0x13,0x9b,0xef,0xb0,0x71,0xc4,0x8a,
    0x0e,0x2b,0x10,0x6b,0x8b,0xda,0x72,0x63,0x39,0xa0,0xb3,0x4f,0xf7,0x05,0xd4,0x94,
    0xec,0x16,0x67,0x1f,0x66,0x7c,0x9e,0x7c,0x03,0x55,0xf7,0x00,0xdf,0x00,0xf5,0xc1,
    0x7f,0xb0,0x8a,0x6f,0x90,0x7c,0x42,0xfb,0x39,0xeb,0xd2,0xa4,0x6b,0xba,0xaa,0xc8,
    0xe2,0x79,0x2e,0xc6,0xe3,0xf7,0x4c,0xf5,0x29,0xf0,0x4e,0x81,0x76,0x3d,0x6d,0x70,
    0xcc,0x56,0xbb,0x81,0xf5,0xca,0xd1,0x9e,0x42,0x8d,0xc9,0x9e,0x41,0x3b,0x8b,0x71,
    0xf9,0xb1,0x58,0xf8,0xad,0xa6,0x9d,0x34,0x2d,0x65,0xbe,0x22,0xfd,0x67,0x29,0x4b,
    0x2b,0xf3,0x81,0x0b,0x35,0x6b,0x25,0x77,0x73,0xa8,0x8b,0xb5,0x6b,0x23,0x7f,0x03,
    0xf7,0xb4,0x66,0x30,0xdf,0x12,0xdd,0xeb,0x74,0x2d,0x66,0xbe,0x25,0x31,0x8f,0x61,
    0x4b,0x79,0x9f,0x76,0xbe,0x15,0xfc,0x97,0xf1,0xac,0xe0,0xf4,0x74,0x38,0x7d,0xf0,
    0xef,0xe4,0x1b,0xa4,0xf3,0x2e,0xd6,0x27,0xd9,0x9f,0x51,0x63,0xb2,0xbb,0x9d,0x3f,
    0xe2,0x37,0xb8,0x7a,0x6c,0x64,0xbe,0x86,0xf8,0x0e,0x75,0xa1,0xc7,0xd5,0xcb,0xff,
    0xc1,0x9e,0xc7,0x98,0x5e,0x62,0x3d,0xbc,0x13,0xec,0x3e,0x62,0xa8,0xd3,0xe7,0xae,
    0x4f,0x92,0x86,0x7e,0x4e,0x50,0xb2,0xf7,0xe8,0x9a,0xe0,0x34,0x95,0x78,0xc7,0x4f,
    0x54,0x79,0xea,0xb3,0x66,0xf6,0xd3,0x61,0xe6,0x3d,0x42,0x1d,0x03,0xcc,0x0b,0x7b,
    0x90,0x58,0xe2,0x29,0x53,0x07,0xfc,0x87,0x78,0x56,0xa0,0x7d,0x85,0x39,0x7c,0x6d,
    0xaf,0x8d,0xbd,0x57,0x16,0x86,0xe9,0xf7,0x90,0x35,0x69,0xe3,0x7d,0x7e,0xd6,0x7d,
    0xd8,0xd5,0x14,0x79,0x1e,0xd3,0x6e,0xd7,0x68,0xf4,0xd2,0x73,0xd6,0x39,0xad,0x4f,
    0xf5,0x45,0x33,0xd6,0x20,0xd0,0xf7,0x1f,0x45,0xf0,0xce,0x6f,0xd5,0x7a,0x41,0xfc,
    0x7f,0xfd,0x8d,0xf7,0x7b,0xc9,0x73,0xec,0x6b,0xd8,0xc7,0xf7,0xd9,0x9b,0x07,0xd8,
    0x7b,0x0f,0x88,0x75,0x2b,0x0b,0x34,0x3e,0x62,0x2f,0x95,0x19,0x03,0x9f,0x9f,0x88,
    0xdf,0x53,0x1f,0xe8,0xfe,0x85,0x71,0xc0,0xaf,0xa8,0x0f,0xee,0xf1,0x2b,0x71,0xe8,
    0x18,0xa1,0x8e,0xff,0xf4,0x0c,0xf8,0x6f,0xba,0x46,0xa8,0x05,0xbf,0xff,0xd5,0xfd,
    0x05,0xed,0x11,0xe6,0x46,0x8f,0xfe,0xce,0xdc,0x8f,0x99,0x1b,0x35,0xfc,0x83,0xf8,
    0x0f,0xea,0x83,0x3c,0x4f,0x88,0x75,0x33,0xd7,0xa8,0xcb,0x85,0xb3,0xa7,0xba,0x9e,
    0x91,0xfb,0x69,0xbc,0x87,0xcd,0xf3,0x9f,0xbc,0x67,0xaf,0xf2,0x80,0x77,0x92,0x98,
    0x9d,0xb9,0xfc,0xf5,0x62,0xf9,0xdb,0x5d,0xfe,0x06,0x31,0xfc,0x24,0xe3,0x26,0x8b,
    0xc5,0x02,0x4f,0x5c,0x8d,0xe4,0x12,0xc7,0x35,0x95,0x5c,0x9d,0x8e,0x6b,0x9a,0x18,
    0x9e,0xb8,0xa6,0x8b,0xc5,0x4e,0x73,0x5c,0x33,0xc9,0x85,0xbf,0xe4,0x37,0x5b,0x0c,
    0x47,0x7f,0x1f,0x27,0x36,0x47,0x0c,0xc7,0x5c,0x9e,0x22,0xd6,0x24,0x86,0x77,0x3b,
    0xbf,0xb9,0x62,0x9a,0x91,0x2b,0x61,0xcd,0x62,0x78,0x93,0x98,0x5e,0xcc,0x6b,0x0b,
    0xf5,0x6e,0xa0,0x5e,0xd4,0x6c,0x81,0x18,0x8e,0x38,0xd8,0x45,0xb1,0x3a,0x02,0x87,
    0x0f,0x66,0x75,0x91,0xd8,0x9c,0x7e,0xa1,0x3e,0x98,0xd1,0x56,0x31,0xac,0x28,0x95,
    0x5a,0xbc,0xe2,0xbb,0x96,0x5c,0x2d,0xfe,0x22,0x9e,0xee,0xfd,0x9a,0xb1,0xc1,0x61,
    0x7f,0x13,0x13,0x87,0xbd,0x21,0x96,0xb9,0xfa,0x2c,0x13,0xf3,0xed,0x77,0xf7,0x5e,
    0x21,0x86,0xbf,0x8e,0x6f,0x52,0x88,0x73,0xfb,0x8e,0xb3,0x5d,0x66,0x0d,0xd6,0x6a,
    0xff,0xbc,0xa3,0x6f,0x8a,0xfb,0xc0,0xb3,0x0e,0xc7,0xdf,0x29,0xa6,0xd7,0xf3,0xaf,
    0x12,0xc3,0xdf,0x38,0xfe,0x4c,0x2a,0xfc,0xe0,0x01,0x3f,0x30,0xf8,0xa2,0xe7,0x47,
    0xd9,0x97,0xcf,0x5c,0x5f,0xae,0x97,0x4a,0x5f,0xc6,0xef,0xa8,0x18,0x16,0x98,0x0b,
    0xd8,0x46,0x31,0xbc,0xe4,0xfc,0x36,0xd3,0x4f,0x1c,0xb6,0x85,0x58,0x16,0xbf,0xa3,
    0x85,0xc8,0xdf,0x23,0x16,0x0f,0xff,0x2d,0x7c,0x13,0x7c,0xb3,0x7a,0xc5,0xbe,0x03,
    0x5d,0xee,0x4d,0xfa,0xc4,0xf0,0xaf,0x79,0xc7,0xad,0x62,0x58,0xd1,0xd5,0xff,0x48,
    0x8d,0xb9,0x19,0xac,0x31,0x37,0x65,0x31,0x3c,0xd5,0xf0,0xa8,0x58,0x6c,0xd9,0xf5,
    0xfa,0xb1,0x1a,0x73,0x73,0xbc,0xc6,0xdc,0x9c,0x10,0xc3,0x13,0xd7,0x90,0x58,0xec,
    0x09,0xc7,0x75,0xb2,0xc6,0xdc,0x9c,0x12,0xc3,0xaf,0xb9,0x77,0x3b,0x2d,0x86,0xfb,
    0xb9,0x39,0x23,0x86,0xfb,0xb9,0x39,0x2b,0xa6,0x79,0xc8,0xf5,0xc6,0x39,0x31,0xfc,
    0x8c,0x9b,0x9b,0xf3,0x35,0xe6,0xe6,0x82,0x18,0x9e,0xe6,0xe6,0x22,0xdf,0xe5,0x82,
    0x9b,0x9b,0x4b,0x55,0x73,0x73,0x59,0x0c,0x83,0x6f,0xfa,0xd6,0x6d,0x13,0x7b,0x83,
    0x2e,0x7e,0xeb,0x4a,0x52,0xf9,0xd6,0xe1,0x6c,0xbb,0xae,0xfd,0x62,0x3d,0xb5,0xdd,
    0xe5,0xbb,0x2a,0xf6,0xee,0x3e,0xdf,0x37,0x55,0xf9,0xbe,0x15,0xc3,0xae,0xba,0x1a,
    0x7e,0x27,0xa6,0x43,0x5c,0x0d,0xbf,0x17,0xc3,0xfb,0x5d,0x0f,0x5c,0xa7,0x5f,0x70,
    0xf5,0x1a,0x16,0xf3,0xbd,0x2e,0x95,0x79,0xd8,0xe1,0xe6,0xe1,0x1c,0xe7,0x0d,0xd8,
    0xb0,0xab,0xe9,0x4e,0xb1,0xb3,0x0e,0xc7,0xbf,0x9b,0xfc,0x99,0xc3,0xf6,0x88,0x69,
    0xf6,0xef,0xfb,0xa3,0x18,0xee,0xe7,0xf2,0x86,0x18,0xbe,0xdb,0xe9,0xd8,0xe7,0x74,
    0xec,0xa4,0x0e,0x60,0x37,0x38,0x97,0x25,0xd6,0x70,0xbf,0xab,0xc5,0x4d,0xa7,0x21,
    0xe5,0xbb,0x25,0x86,0xfb,0x5a,0xdc,0x76,0x35,0x4b,0x1a,0xee,0x88,0xf9,0xde,0x76,
    0x1a,0x0e,0xd4,0xa8,0x05,0xb0,0x3b,0x55,0x1a,0x4a,0x55,0xdf,0x8a,0xd1,0xaa,0xff,
    0x2f,0xb1,0xbf,0xd7,0x6c,0xab,0x74,0x7d,0x04,0xc2,0x94,0xb4,0x85,0x78,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 4, local_size_y = 4, local_size_z = 4)in;
//
// layout(set = 0, binding = 0, rgba16ui)uniform uimage3D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// uint makeUint(uvec2 v)
// {
//     return v . g * 0x10000u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 8;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v . rg);
//     destData[destOffset + 1]= makeUint(v . ba);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 2;
//     uint pixelBytes = 6;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     if(remainder == 0)
//     {
//         uvec3 v1 = fetchSrc(srcCoord1);
//
//         destData[destOffset]= makeUint(v0 . rg);
//         destData[destOffset + 1]= makeUint(uvec2(v0 . b, v1 . r));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(v0 . gb);
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
