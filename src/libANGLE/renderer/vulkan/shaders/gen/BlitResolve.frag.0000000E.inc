// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000E.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000E[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x4d,0x93,0x5f,0x6f,0x12,0x51,
    0x10,0xc5,0x2f,0xbb,0x85,0x45,0x2c,0xd0,0x02,0x2d,0x12,0xa9,0xc5,0x42,0x62,0xd3,
    0x56,0x68,0x54,0x6a,0x41,0x69,0x8b,0xb1,0xd1,0x44,0x6a,0xa3,0x7e,0x00,0x63,0xe2,
    0x8b,0x0f,0xf6,0x45,0x9f,0x7d,0xf0,0xeb,0xf8,0xf9,0x8c,0x7f,0x12,0x13,0xe7,0x2c,
    0xbf,0xab,0x43,0x72,0xb9,0x3b,0x67,0xce,0xfc,0x39,0xb3,0xb3,0x69,0xd2,0xcf,0x42,
    0x5a,0x08,0x95,0x50,0x0e,0x97,0x61,0xf9,0x5b,0x0f,0x49,0x28,0xd8,0x7d,0x3d,0x94,
    0xf2,0xfb,0xd9,0xe2,0xcd,0x62,0xf8,0xe9,0xf3,0xfb,0xe1,0x83,0xf1,0xa1,0xfc,0xb5,
    0x90,0xe6,0x3c,0xf9,0xea,0x21,0x0b,0x2b,0x76,0xeb,0x7c,0x7c,0xf7,0xe1,0x4a,0x78,
    0xd5,0xce,0x89,0x9d,0x35,0xe3,0x09,0xcf,0xdc,0xf3,0xaa,0xf2,0xd9,0x53,0x35,0xcf,
    0xaf,0xf8,0x10,0x9e,0x87,0x62,0x68,0x52,0xbb,0xcf,0x1d,0xb1,0x02,0x58,0xd9,0x61,
    0x09,0xd8,0x9a,0xc3,0x52,0xb0,0x1b,0x0e,0x5b,0x01,0xeb,0x3a,0xac,0x08,0xd6,0x73,
    0x58,0x09,0x6c,0xe0,0xb0,0x0c,0x6c,0xd7,0x61,0x65,0xb0,0x03,0x87,0x5d,0x03,0x3b,
    0xcc,0x75,0xa5,0xff,0xfa,0x93,0xc6,0x13,0x34,0x6e,0x62,0xcf,0xed,0xde,0x41,0x5f,
    0xb4,0x6f,0x63,0x37,0x2d,0x2a,0xc9,0xed,0x34,0xd7,0xa2,0xe7,0x0d,0xe3,0x94,0xe8,
    0x55,0x73,0x68,0x9b,0x9d,0xd1,0x6f,0x92,0xe7,0x4d,0xed,0xbd,0x2d,0xfd,0xf2,0xa9,
    0x56,0x05,0xdd,0x3d,0xfb,0x5f,0x25,0x4e,0xf8,0x23,0xec,0xaa,0xcb,0x55,0x83,0x1f,
    0x6b,0x35,0xc8,0xa5,0xdf,0x2d,0x63,0xc7,0x39,0xd4,0x38,0x25,0x4e,0x85,0xbb,0xe1,
    0x8e,0xea,0xb5,0x98,0x47,0x93,0x7a,0xad,0x3c,0xef,0x12,0xdb,0x47,0xcb,0x26,0xf9,
    0xc5,0x6f,0xe3,0xcb,0x9c,0xbf,0x8b,0x2d,0xff,0x16,0x7e,0xe5,0x6f,0x59,0x97,0x3d,
    0x78,0x0d,0x37,0xb7,0x18,0xb7,0xc7,0xfb,0x89,0xf6,0x98,0x58,0xe5,0x99,0xb1,0x1f,
    0x15,0xfa,0x9a,0xb1,0x9f,0xc2,0x3a,0xc6,0x3a,0xc5,0x57,0x08,0xff,0x7f,0x05,0x67,
    0x2b,0xc7,0x19,0xcf,0xa7,0xe4,0x90,0x3d,0x07,0x3b,0xb2,0x5d,0x48,0x98,0x7b,0x20,
    0xef,0x4f,0x43,0xb4,0x6b,0x33,0xde,0x4b,0x9d,0xd9,0x5f,0x9a,0xba,0x1a,0xbb,0x5b,
    0xe7,0xc4,0x7a,0x57,0xbc,0xdf,0x75,0xfc,0x73,0xcb,0xd0,0x66,0xa7,0x37,0x98,0xdd,
    0x0c,0x4e,0x07,0xfc,0xab,0x71,0x64,0xdf,0x24,0xae,0x43,0xdc,0x56,0xfe,0x0e,0x97,
    0x71,0x5d,0xe2,0x34,0xb7,0x6d,0xf0,0x6f,0xc6,0xe9,0xb1,0x8f,0xdb,0xcc,0xf3,0x87,
    0x75,0x3e,0xa0,0x9f,0xdf,0xc6,0xdf,0x71,0xdf,0x85,0xf4,0xe8,0xf9,0x95,0xc5,0x69,
    0xbe,0x77,0xa8,0xa9,0xdf,0x17,0x66,0xbe,0x0b,0xfe,0xda,0xac,0x2c,0xff,0x46,0x96,
    0x58,0xe4,0xfd,0xb2,0x1c,0x31,0x97,0xee,0xef,0xc6,0x12,0x6f,0x01,0xa7,0x48,0x4c,
    0xdf,0x69,0xd8,0x47,0xc3,0x9e,0xd3,0x70,0x00,0x1e,0x35,0xdc,0x05,0x8b,0x1a,0x46,
    0x4e,0x83,0x7c,0x43,0x3b,0x23,0xea,0x0e,0x9d,0x86,0x7b,0xd4,0x2e,0x38,0x0d,0xf7,
    0xc1,0xa3,0x86,0x17,0x60,0x91,0x27,0x0d,0x31,0xd7,0xc8,0x69,0xb8,0x80,0x33,0x20,
    0x66,0xe8,0x34,0x1c,0xa1,0x61,0xec,0x34,0x3c,0x04,0x8f,0x1a,0x8e,0xc1,0xa2,0x86,
    0xa9,0xd3,0x20,0xdf,0xc4,0xce,0x94,0xba,0x13,0xf6,0x48,0x75,0x1f,0x53,0xfb,0xc2,
    0xed,0xab,0x7a,0x8c,0xdc,0xa9,0xeb,0xf1,0x25,0xbc,0x11,0x71,0x13,0xfa,0xd1,0x4e,
    0x3f,0x61,0x9f,0xdf,0x1a,0x53,0xfb,0xfa,0x14,0x4c,0x31,0x67,0xec,0x9e,0xe6,0xa6,
    0xef,0xe4,0x1c,0x7f,0xc8,0xbf,0xa3,0x34,0xff,0x96,0x84,0xfd,0xb1,0x0e,0x8e,0xed,
    0xfc,0x05,0x18,0x5c,0x60,0xbe,0x54,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
// }
