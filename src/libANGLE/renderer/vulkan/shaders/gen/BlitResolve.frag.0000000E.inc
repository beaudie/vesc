// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2021 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000E.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000E[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x5b,0x6f,0x12,0x51,
    0x14,0x85,0x0f,0x33,0x85,0x41,0x2c,0xd0,0x16,0x5a,0x24,0x52,0x8b,0x85,0xc4,0xa6,
    0xad,0xd0,0xa8,0xd4,0x82,0xd2,0x16,0xe3,0x35,0xc1,0xd6,0xcb,0x0f,0x30,0x26,0xbe,
    0xf8,0x60,0x5f,0xf4,0xd9,0x07,0xff,0x8e,0xbf,0xcf,0x78,0x49,0x4c,0xdc,0x6b,0xf8,
    0x8e,0xee,0x38,0xc9,0x99,0x33,0x7b,0xed,0xb5,0x2f,0xeb,0x9c,0x3d,0x69,0xd2,0xcb,
    0x42,0x28,0x84,0x4a,0x28,0x87,0x17,0x61,0xf1,0xac,0x86,0xc4,0x90,0x10,0x2e,0x87,
    0x52,0xbe,0x3f,0x99,0xbf,0x9e,0x0f,0x3e,0x7e,0x7a,0x37,0xb8,0x33,0x3a,0x90,0xbf,
    0x16,0xd2,0x9c,0x27,0x5f,0x3d,0x64,0x61,0xc9,0x76,0xad,0x0f,0x6f,0xdf,0x5f,0x08,
    0xaf,0xda,0x3a,0xb6,0xb5,0x62,0x3c,0xe1,0x99,0xfb,0x5e,0x56,0x3e,0xfb,0xaa,0xe6,
    0xf9,0x15,0x1f,0xc2,0xd3,0x50,0x0c,0x0d,0x6a,0xf7,0xd8,0x23,0x56,0x00,0x2b,0x3b,
    0x2c,0x01,0x5b,0x71,0x58,0x0a,0x76,0xc5,0x61,0x4b,0x60,0x1d,0x87,0x15,0xc1,0xba,
    0x0e,0x2b,0x81,0xf5,0x1d,0x96,0x81,0xed,0x38,0xac,0x0c,0xb6,0xef,0xb0,0x4b,0x60,
    0x07,0xb9,0xae,0xf4,0x6f,0x7f,0xd2,0x78,0x8c,0xc6,0x0d,0xec,0x99,0xed,0xdb,0xe8,
    0x8b,0xf6,0x75,0xec,0x86,0x45,0x25,0xb9,0x9d,0xe6,0x5a,0xf4,0xbd,0x6e,0x9c,0x12,
    0xbd,0xea,0x1c,0x5a,0x66,0x67,0xf4,0x9b,0xe4,0x79,0x53,0xbb,0xb7,0x85,0x5f,0x3e,
    0xd5,0xaa,0xa0,0xbb,0x6b,0xef,0x65,0xe2,0x84,0xdf,0xc3,0xae,0xba,0x5c,0x35,0xf8,
    0xb1,0xd6,0x1a,0xb9,0xf4,0x5c,0x33,0x76,0x3c,0x87,0x1a,0xab,0xc4,0xaa,0xb0,0xaf,
    0xb9,0xa5,0x7a,0x4d,0xce,0xa3,0x41,0xbd,0x66,0x9e,0x77,0x81,0xed,0xa1,0x65,0x83,
    0xfc,0xe2,0xb7,0xf0,0x65,0xce,0xdf,0xc1,0x96,0x7f,0x13,0xbf,0xf2,0x37,0xad,0xcb,
    0x2e,0xbc,0x35,0x77,0x6e,0x31,0x6e,0x97,0xfb,0x89,0xf6,0x88,0x58,0xe5,0x99,0x32,
    0x1f,0x15,0xfa,0x9a,0x32,0x9f,0xc2,0xda,0xc6,0x3a,0xc1,0x57,0x08,0xff,0x9e,0x82,
    0xb3,0x95,0xe3,0x94,0xef,0x13,0x72,0xc8,0x9e,0xfd,0xd7,0xc3,0x43,0x62,0x0e,0x6d,
    0x36,0x12,0xee,0x21,0x50,0xe7,0x87,0x21,0x9a,0xbd,0x29,0xf7,0x54,0xe7,0x2e,0xce,
    0x4d,0x6d,0x8d,0x59,0xae,0xb3,0x62,0xfd,0x0b,0xee,0x7b,0x15,0xff,0xcc,0x32,0xb4,
    0x98,0xf1,0x75,0xce,0x72,0x0a,0xa7,0x0d,0xfe,0xc5,0x38,0xb2,0xaf,0x12,0xd7,0x26,
    0x6e,0x33,0xbf,0xd3,0x45,0x5c,0x87,0x38,0x9d,0xe3,0x16,0xf8,0x57,0xe3,0x74,0x99,
    0xcf,0x2d,0xce,0xf7,0xbb,0x75,0xde,0xa7,0x9f,0x5f,0xc6,0xdf,0x76,0xff,0x89,0xf4,
    0xe8,0xfb,0xa5,0xc5,0x49,0xfb,0x0d,0x6a,0xea,0xf9,0xcc,0x79,0xec,0x80,0xbf,0x32,
    0x4b,0x3d,0x3d,0x03,0x8b,0xbc,0x9f,0x96,0x23,0xe6,0xd2,0xfe,0xcd,0x58,0xe2,0x3d,
    0x87,0x53,0x24,0xa6,0xe7,0x34,0xec,0xa1,0x61,0xd7,0x69,0xd8,0x07,0x8f,0x1a,0x6e,
    0x82,0x45,0x0d,0x43,0xa7,0x41,0xbe,0x81,0xad,0x21,0x75,0x07,0x4e,0xc3,0x2d,0x6a,
    0x17,0x9c,0x86,0xdb,0xe0,0x51,0xc3,0x1c,0x2c,0xf2,0xa4,0x21,0xe6,0x1a,0x3a,0x0d,
    0x67,0x70,0xfa,0xc4,0x0c,0x9c,0x86,0x43,0x34,0x8c,0x9c,0x86,0xbb,0xe0,0x51,0xc3,
    0x11,0x58,0xd4,0x30,0x71,0x1a,0xe4,0x1b,0xdb,0x9a,0x50,0x77,0xcc,0x1c,0xa9,0xee,
    0x7d,0x6a,0x9f,0xb9,0xf9,0x55,0x8f,0x91,0x3b,0x71,0x3d,0x9e,0xc3,0x1b,0x12,0x37,
    0xa6,0x1f,0xcd,0xf8,0x03,0xe6,0xfb,0x8d,0x31,0x35,0xaf,0x8f,0xc0,0x14,0x73,0xca,
    0xac,0xeb,0xdc,0xf4,0xdf,0x3c,0xc6,0x1f,0xf2,0xff,0x2a,0xcd,0xff,0x2d,0x61,0xbf,
    0xad,0x83,0x23,0x5b,0x7f,0x00,0x66,0x1a,0x24,0xcf,0x64,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 1). x;
//
// }
