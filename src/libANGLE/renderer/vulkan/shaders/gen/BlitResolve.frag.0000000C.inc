// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000C.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000C[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5b,0x6f,0x52,0x41,
    0x14,0x85,0x87,0x73,0x80,0x83,0x95,0x2a,0x2d,0xa5,0x60,0xed,0xc5,0x16,0x5b,0x05,
    0x95,0xa0,0x82,0xa9,0x41,0x2c,0xda,0x52,0xac,0xa0,0xb6,0xc5,0x5b,0xa2,0xd5,0x98,
    0xf8,0xe2,0x83,0xbe,0xe8,0xbb,0x0f,0xc6,0x5f,0xe3,0xef,0x33,0x5e,0x12,0x13,0xf7,
    0x1e,0xbe,0x31,0xdb,0x9e,0x64,0x98,0xd9,0x6b,0xaf,0x7d,0x59,0x73,0x21,0x8e,0xaa,
    0x89,0x8b,0x53,0x6e,0xca,0xe5,0xdc,0x6b,0x37,0xf9,0x66,0x5c,0xe4,0x52,0x32,0x9f,
    0x74,0x59,0x3f,0x0f,0x46,0xe3,0x51,0xe3,0xe3,0xa7,0xb7,0x8d,0x56,0xbb,0xa9,0xfe,
    0x53,0x2e,0xf6,0x3c,0xf5,0x9d,0x76,0x89,0x4b,0xcb,0xac,0xe3,0xfd,0x9b,0x77,0x1f,
    0x14,0xcf,0xcb,0xd8,0x91,0x51,0x10,0x9e,0xe2,0x89,0x59,0xab,0x6f,0x20,0xab,0xbc,
    0xcf,0xaf,0xf1,0xce,0xdd,0x73,0x19,0x37,0x47,0xed,0x2a,0x73,0xc0,0x52,0x60,0x39,
    0x83,0x45,0x60,0x05,0x83,0xc5,0x60,0x15,0x83,0xa5,0xc1,0x16,0x0d,0x96,0x01,0x3b,
    0x67,0xb0,0x2c,0xd8,0x79,0x83,0x25,0x60,0x17,0x0d,0x96,0x03,0xbb,0x6c,0xb0,0x13,
    0x60,0x4d,0xaf,0x2b,0xfe,0xd7,0x9f,0x6a,0xdc,0x41,0xe3,0x3c,0xf6,0x40,0xe6,0x35,
    0xf4,0x05,0x7b,0xd5,0xd8,0xc3,0x63,0xfe,0x21,0x7e,0xcd,0x57,0x94,0xdf,0xc8,0xdb,
    0xb1,0xd7,0x1a,0xf9,0xbc,0xb1,0xef,0x5d,0xb5,0x94,0x85,0x9f,0xa0,0x25,0xc2,0x9e,
    0xc2,0x4e,0x7b,0x4e,0xda,0xf7,0xa2,0xfb,0xa9,0x78,0x07,0x3b,0x0f,0x56,0x12,0x7b,
    0x96,0x5c,0xc1,0x2e,0x62,0xeb,0xb7,0x2c,0xcc,0xb0,0x2f,0x61,0xcc,0x32,0xb2,0xcc,
    0x45,0x33,0xb4,0x5e,0x89,0xfd,0x99,0xa3,0x5e,0x89,0xbd,0x50,0xec,0x12,0xf5,0xca,
    0xd4,0x53,0x7e,0x05,0x5f,0x62,0xfc,0x4b,0xd4,0x0f,0xf6,0x1a,0x7e,0xe5,0x57,0xe1,
    0x17,0x7d,0x8d,0xc8,0x6d,0xc0,0x53,0xfb,0xc2,0xb1,0xb8,0x26,0xe7,0x17,0xec,0x0e,
    0xb1,0x9a,0x67,0x9b,0xfb,0x93,0xa5,0xcf,0x6d,0xee,0xaf,0x62,0x67,0x84,0xd5,0xc7,
    0x97,0x72,0xff,0x7f,0xc1,0xd6,0x1c,0xbb,0xac,0xfb,0xe4,0xd8,0xf5,0x67,0x38,0xf9,
    0x16,0xa4,0xb7,0x3d,0x78,0xf7,0xc1,0xf6,0xe0,0xa9,0x3d,0x04,0x3b,0x2b,0x15,0x1f,
    0x90,0x23,0xf4,0xb9,0xcf,0x79,0xde,0x90,0xfb,0x16,0x71,0x96,0x8e,0xde,0x7e,0x0a,
    0xa2,0xf7,0xb9,0xcb,0x59,0x4f,0x73,0x9e,0x07,0x82,0x66,0x79,0x5b,0xd3,0xf0,0x03,
    0x56,0x00,0x4b,0xf9,0xdc,0x19,0xbf,0x97,0x33,0x70,0xd5,0x77,0x47,0xb0,0x8a,0xd7,
    0x3d,0x39,0xab,0x32,0xf9,0x13,0xaf,0x63,0x82,0x7f,0x25,0x6e,0x91,0xd8,0x05,0x13,
    0xb7,0x4c,0xdc,0x92,0x89,0x5b,0x01,0xff,0x42,0xdc,0x2a,0xb1,0x2b,0xc4,0x85,0xb7,
    0x37,0xcf,0xf9,0x76,0x39,0xc3,0x75,0xf0,0x6f,0xc2,0xd9,0xe0,0x2d,0xae,0x73,0xb6,
    0x3f,0x64,0x07,0xea,0x68,0xfb,0x2d,0x7c,0xf5,0xd5,0x64,0xd4,0xd9,0x97,0x9a,0xd1,
    0x7c,0xc5,0xbc,0xb3,0xcf,0xc2,0x55,0xac,0x01,0x7e,0x28,0x96,0xf6,0xf4,0x1c,0x2c,
    0xf0,0x7e,0x49,0x8e,0x90,0x4b,0xe7,0xef,0xc2,0x52,0xde,0x4b,0x38,0x19,0x62,0x6a,
    0x46,0xc3,0x55,0x34,0x34,0x8d,0x86,0x6b,0xe0,0x41,0xc3,0x75,0xb0,0xa0,0xa1,0x6d,
    0x34,0xa8,0xaf,0x25,0xa3,0x4d,0xdd,0x96,0xd1,0xb0,0x49,0xed,0x94,0xd1,0x70,0x13,
    0x3c,0x68,0x78,0x01,0x16,0x78,0xaa,0x21,0xe4,0x6a,0x1b,0x0d,0x47,0x70,0xea,0xc4,
    0xb4,0x8c,0x86,0x5b,0x68,0xe8,0x18,0x0d,0x5d,0xf0,0xa0,0xe1,0x36,0x58,0xd0,0xd0,
    0x33,0x1a,0xd4,0xb7,0x25,0xa3,0x47,0x5d,0x5d,0x3f,0xa2,0xee,0x5d,0x6a,0x1f,0x99,
    0xb7,0xa3,0x3d,0x06,0x6e,0xcf,0xf4,0xf8,0x0a,0x5e,0x9b,0xb8,0x2d,0xfa,0xe9,0xfb,
    0xff,0xde,0xc9,0xdb,0x52,0x5b,0xdf,0xd1,0x88,0x37,0xf4,0x54,0xfa,0xd3,0xf7,0xf3,
    0x10,0xce,0xc8,0xdc,0xcb,0x03,0x74,0xed,0x9b,0x7b,0x79,0x08,0x1e,0xee,0xf3,0x98,
    0xba,0x8a,0x3f,0x13,0x4c,0xdf,0xd4,0x63,0xf2,0x8d,0xcd,0x59,0x3c,0x01,0x77,0x7e,
    0x2f,0x62,0xff,0x5f,0xa1,0xd8,0x1f,0x51,0xb5,0x29,0xe3,0x2f,0x82,0xc1,0xf2,0xe7,
    0x54,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texture(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent). x;
//
// }
