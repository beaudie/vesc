// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertIndex.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertIndex_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0x4b,0x48,0x95,0x51,
    0x10,0xc7,0xcf,0x7d,0x78,0xb5,0x07,0x65,0xf4,0x32,0x28,0x1f,0x37,0x69,0x63,0x84,
    0x60,0x45,0x14,0x85,0x37,0x2b,0x03,0xcd,0x45,0x65,0x56,0x54,0x60,0xdd,0x8d,0x4a,
    0x6d,0x6a,0x61,0x94,0xd0,0x5a,0xb3,0x20,0x84,0x52,0xb3,0x16,0x05,0x81,0x3d,0x90,
    0x82,0xc0,0x12,0x7a,0x19,0xad,0x33,0x2a,0x82,0x6a,0x15,0x2d,0x2b,0xec,0xa9,0x12,
    0x35,0xf3,0x7d,0xbf,0x13,0xd3,0xc7,0x0d,0x0e,0xe7,0xce,0x7f,0xe6,0xff,0x9f,0x39,
    0x33,0xe7,0x3b,0x96,0x88,0x2f,0xcd,0x77,0x89,0x98,0x9b,0xee,0x0a,0x5c,0x7e,0xcc,
    0x05,0xff,0xe6,0xb8,0xb8,0xd3,0x9f,0x33,0x5c,0x2a,0xd8,0x6b,0xeb,0x77,0xd4,0xaf,
    0x38,0x7a,0x2c,0xbb,0x62,0xe5,0xaa,0x4a,0xf5,0xcf,0x72,0x89,0x20,0x4e,0x7d,0xb3,
    0x25,0x26,0x4f,0xf6,0xa4,0xac,0xc3,0xcd,0x2d,0x47,0x14,0xdf,0x25,0xab,0x50,0xf0,
    0x64,0xa0,0xe5,0x5c,0x35,0xb1,0xba,0xb6,0x4a,0xf4,0xbc,0x30,0x8d,0x5b,0xca,0xee,
    0xb1,0x18,0x58,0xd2,0x60,0x71,0xb0,0x02,0x83,0x25,0xc0,0x66,0x1a,0x2c,0x09,0x56,
    0xa8,0xf5,0x4a,0x84,0xe7,0xd6,0x8a,0xa7,0x58,0xf6,0xd4,0x3f,0xdd,0xa4,0x2b,0x21,
    0x6f,0x11,0xfc,0x92,0x48,0x3d,0xca,0x2f,0x31,0xfc,0x32,0xd9,0xd3,0xff,0x7c,0xa1,
    0x5d,0x46,0xbd,0x6a,0x57,0x47,0xf4,0x33,0x11,0xfd,0x4c,0x0e,0xfd,0x8c,0xd1,0xaf,
    0x89,0xe8,0xd7,0xa0,0xef,0xfd,0xbb,0x82,0x59,0x38,0xb7,0x18,0xbb,0xf3,0xbf,0x7c,
    0x79,0xae,0x2b,0x87,0x7e,0x97,0xe1,0x77,0x47,0xf4,0xbb,0xd1,0xf7,0x76,0x5f,0x44,
    0xaf,0x3f,0x87,0x5e,0xbf,0xd1,0x1b,0x88,0xe8,0x0d,0xa0,0x97,0xc0,0x7e,0x42,0xbd,
    0x8b,0x64,0xcd,0x15,0x56,0x3c,0xf0,0x27,0x02,0xbf,0xfe,0x9e,0x2f,0x31,0x9a,0xaf,
    0x14,0x8d,0x62,0x97,0x1f,0xcc,0x2b,0x95,0x63,0x95,0x4a,0xec,0x7c,0xd9,0xa7,0xc9,
    0xd2,0x98,0x75,0xd8,0x0b,0xc0,0x54,0x6b,0x21,0x5a,0x3a,0x8f,0x0a,0xec,0x22,0x6c,
    0xe5,0x2f,0x22,0x56,0xf5,0x96,0x48,0x15,0xfe,0x3e,0x14,0x33,0xe7,0x62,0xe2,0x4a,
    0xb9,0x53,0x25,0xe4,0x29,0xe5,0x5c,0x33,0x8d,0xae,0x3f,0xb7,0xb7,0xcb,0x39,0x93,
    0xf2,0x97,0x11,0x9b,0xc2,0x1f,0xee,0x61,0x5f,0x7c,0x7c,0xa5,0xb1,0xd5,0x5f,0x25,
    0xeb,0x8f,0xf1,0xaf,0x65,0x0e,0x5a,0x67,0xb5,0xa9,0x33,0xc3,0x77,0xa4,0x79,0x36,
    0x92,0x27,0x43,0x9d,0x6a,0xd7,0x98,0x3a,0x95,0x53,0x47,0x5d,0x0b,0xc5,0xde,0x89,
    0x4e,0x02,0x7e,0x23,0xbd,0xd9,0x09,0xbf,0x91,0x6f,0x36,0x66,0xf8,0x4d,0x9c,0x53,
    0xe3,0x77,0xe3,0x4b,0x05,0x33,0x88,0xbb,0x66,0x13,0xd7,0x8e,0x4f,0xeb,0xed,0x34,
    0xf5,0xea,0xfd,0xeb,0x84,0x7f,0x9a,0xda,0xba,0xc8,0xa7,0x76,0x37,0x98,0xf2,0xfa,
    0x0c,0x4f,0xef,0x59,0x1f,0xbc,0x8b,0xc4,0xf4,0xc3,0x53,0x7b,0x20,0x72,0xce,0x07,
    0xf4,0xcb,0xdb,0x8f,0xe9,0xd3,0x72,0xb1,0xf4,0x7c,0x4f,0xc0,0xda,0x59,0x3e,0x2e,
    0x19,0x0b,0xdf,0x8a,0xd5,0x72,0xdf,0xe3,0x68,0x38,0x7a,0xf4,0x4b,0x10,0x7d,0xd3,
    0x7e,0x8a,0x35,0x0a,0x3e,0x25,0xbf,0xb5,0x27,0x4f,0xf1,0x3f,0x0d,0xfa,0x9f,0x17,
    0xdc,0xad,0x4d,0xdc,0x47,0xbd,0x1b,0xeb,0xd1,0xdf,0x0c,0x9e,0x11,0x4b,0xef,0xc5,
    0x16,0x66,0x94,0xc6,0xe7,0xe3,0x6a,0xf1,0x9d,0x12,0x2d,0xb5,0xeb,0xf1,0xd7,0x19,
    0xee,0x36,0xc3,0xad,0x37,0xdc,0x06,0x7c,0x9e,0xbb,0x1d,0xac,0x96,0xda,0x74,0x6e,
    0x7b,0x98,0x6d,0x93,0xe1,0xed,0x05,0x7f,0x0c,0x6f,0x1f,0xbc,0x22,0xa3,0xb5,0x9f,
    0x38,0xf5,0x8d,0x82,0x1d,0x00,0xd7,0xb8,0x5b,0x82,0xe9,0x3d,0x38,0x08,0xbe,0x9d,
    0x7e,0x65,0xe9,0xd7,0xa4,0xe4,0x52,0xdf,0x21,0x59,0x59,0x7a,0xa6,0xbf,0x27,0x64,
    0x1f,0xc5,0xce,0x1a,0x9d,0x16,0x74,0x1a,0xd0,0x69,0x33,0x3a,0xea,0x6b,0x95,0xd5,
    0x06,0xaf,0xd5,0xf4,0xfe,0x39,0xbd,0x2f,0x32,0xe7,0x1b,0x03,0xf7,0x67,0x79,0x81,
    0xf6,0x98,0x39,0xf3,0x4b,0xf0,0x72,0xd3,0xe7,0x57,0x7c,0xef,0x69,0xfc,0x5e,0xef,
    0x35,0xbe,0x67,0x70,0xdf,0xc0,0xad,0x30,0xbd,0x79,0x0b,0x5e,0x69,0x72,0xbc,0x83,
    0xfb,0xd6,0x70,0xdf,0x83,0x57,0x19,0xee,0x07,0xf0,0xf0,0x7e,0x85,0xd8,0x47,0xec,
    0x0f,0xf4,0xcc,0x9f,0x5d,0xf7,0xef,0xf2,0x5e,0x6a,0x4c,0x5e,0x2c,0x8c,0xc9,0x12,
    0xdf,0x6a,0xce,0x7c,0x9c,0x33,0xeb,0x9d,0x1f,0xa2,0xc7,0x27,0xc0,0xfd,0xac,0x3a,
    0x4c,0x8f,0xd5,0x77,0x52,0x56,0x07,0x79,0x4e,0x9a,0x1e,0x7f,0xca,0xd1,0xe3,0xcf,
    0xe0,0x3e,0xdf,0x17,0xb4,0x3f,0x9b,0xf3,0x8f,0x83,0xdb,0x1e,0x7f,0x35,0x3d,0x1e,
    0x37,0x7a,0xdf,0xf0,0xf9,0x3e,0xfd,0x80,0x6b,0x7b,0x3c,0x01,0x6e,0x7b,0x3c,0x09,
    0x77,0xc2,0x70,0xa7,0xc0,0x6d,0x8f,0x63,0xb1,0x10,0xd7,0xef,0xde,0xf7,0x58,0xfe,
    0xdb,0x13,0xf4,0x50,0x7d,0xda,0x63,0x7f,0xf6,0x0e,0xd3,0xe3,0x14,0x31,0x6d,0xc4,
    0xdb,0xbe,0x9c,0xa1,0x2f,0xe5,0xe6,0x1c,0x67,0xc1,0x7d,0x5f,0xce,0x81,0xed,0x35,
    0x3d,0xe8,0xe1,0xfd,0x4b,0xe3,0xdf,0x20,0xb3,0xe8,0x21,0xd7,0x20,0xb3,0x3a,0x0f,
    0xa7,0x89,0x59,0xf5,0x9a,0x59,0xa9,0xef,0x82,0xac,0x5e,0xea,0xbd,0x60,0x6a,0xba,
    0x44,0x4d,0x6b,0x4d,0x4d,0x97,0xc1,0xbd,0x7d,0x85,0x37,0xc7,0xd7,0x73,0x95,0x77,
    0x35,0x4d,0xac,0xd6,0x73,0x95,0x38,0x7f,0x8e,0x6b,0xf8,0xda,0x0d,0x36,0xc8,0x5b,
    0xd5,0x6e,0xb4,0xae,0x9b,0xb7,0x6a,0xd0,0xe4,0xbc,0x81,0xcf,0xc7,0xdd,0x34,0x39,
    0xaf,0x91,0xf3,0x26,0x71,0x5e,0x7f,0x88,0x9c,0x75,0x66,0xb6,0xb7,0x79,0x23,0x6c,
    0xce,0x3b,0x46,0x6b,0x08,0xad,0x3b,0xc4,0x7a,0xad,0xbb,0x68,0x55,0x18,0x6c,0x98,
    0xfa,0x2b,0x8c,0xd6,0x3d,0x53,0xff,0xb0,0xa9,0xff,0x3e,0x3e,0x1f,0x37,0x62,0x72,
    0xde,0x25,0xe7,0x08,0x71,0x5e,0xff,0x21,0x39,0x1f,0x18,0xde,0x23,0xc3,0x7b,0x08,
    0xef,0x11,0x73,0xd6,0x3b,0xe8,0x67,0xda,0x1b,0x79,0x2b,0x75,0xff,0x2d,0x7f,0x69,
    0xd7,0xc8,0xfa,0x0b,0x22,0x48,0xa7,0x4d,0xb4,0x0b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint dstIndexBuf[];
// };
//
// layout(set = 0, binding = 1)readonly buffer src
// {
//
//     uint srcIndexBuf[];
// };
//
// layout(set = 0, binding = 2)readonly buffer srcIndirect
// {
//
//     uint srcIndirectBuf[];
// };
//
// layout(set = 0, binding = 3)buffer dstIndirect
// {
//
//     uint dstIndirectBuf[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint srcIndirectOffsetDiv4;
//
//     uint srcIndexOffset;
//
//     uint dstIndexBufOffsetDiv4;
//
//     uint maxIndex;
//
//     uint dstIndirectBufOffsetDiv4;
// };
//
// uint PullIndex(uint index)
// {
//     uint srcIndex = index + srcIndexOffset;
//     uint srcBlock = srcIndexBuf[srcIndex >> 2];
//     uint srcComponent =(srcIndex & 3);
//
//     uint value =(srcBlock >>(srcComponent << 3))& 0xFF;
//
//     return value;
// }
//
// void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
// {
//
//     dstValue |= srcValue <<(indexIndex << 4);
// }
//
// void main()
// {
//
//     uint indexCount = srcIndirectBuf[srcIndirectOffsetDiv4];
//     uint firstIndex = srcIndirectBuf[srcIndirectOffsetDiv4 + 2];
//     uint endIndex = firstIndex + indexCount;
//
//     uint index =((gl_GlobalInvocationID . x +(firstIndex >> 1))<< 1);
//
//     if(index >= endIndex)
//         return;
//
//     uint dstValue = 0;
//
//     if(index >= firstIndex)
//     {
//         uint srcValue = PullIndex(index);
//         PackIndexValue(srcValue, 0, dstValue);
//     }
//
//     if(index + 1 < endIndex)
//     {
//         uint srcValue = PullIndex(index + 1);
//         PackIndexValue(srcValue, 1, dstValue);
//     }
//
//     dstIndexBuf[dstIndexBufOffsetDiv4 + gl_GlobalInvocationID . x]= dstValue;
//
//     if(gl_GlobalInvocationID . x == 0)
//     {
//         dstIndirectBuf[dstIndirectBufOffsetDiv4]= srcIndirectBuf[srcIndirectOffsetDiv4];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 1]= srcIndirectBuf[srcIndirectOffsetDiv4 + 1];
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 2]= firstIndex & 1;
//
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 3]= srcIndirectBuf[srcIndirectOffsetDiv4 + 3];
//         dstIndirectBuf[dstIndirectBufOffsetDiv4 + 4]= 0;
//     }
//
// }
