// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xd7,0x39,0xa7,0x37,0x0f,0xbd,0x40,0xaf,0x36,0x82,0x54,0xda,0x44,0x52,
    0xea,0x29,0x51,0x8b,0xb4,0x5a,0x81,0x40,0xa3,0xc5,0x52,0xf0,0x12,0x53,0x82,0x5a,
    0x4d,0x0c,0x8a,0xb6,0x7d,0xe0,0xd2,0x3e,0x28,0x2d,0x5e,0x68,0x1f,0x10,0xe8,0x03,
    0x4a,0xfb,0x80,0xd2,0x3e,0x20,0x70,0x1e,0x8c,0x8a,0xbc,0xe2,0x9b,0x7f,0x91,0xd7,
    0xc4,0xc4,0xf9,0x76,0x7f,0x83,0x93,0x73,0x92,0x39,0x7b,0xcf,0xf7,0xcd,0x9a,0x6f,
    0x66,0xd6,0xda,0xab,0x90,0xef,0xae,0x4d,0x29,0x97,0x8a,0xa9,0x2e,0xfd,0x9a,0x36,
    0x7e,0x5b,0x52,0xde,0x90,0x94,0x36,0xa5,0x9a,0xec,0xf9,0xd2,0xd8,0xeb,0x63,0xa5,
    0x33,0x67,0xdf,0x2f,0x3d,0x3b,0xb0,0x5b,0x7c,0x63,0x2a,0x64,0x71,0xe2,0x9a,0xcc,
    0xab,0xb2,0xa7,0x6c,0xfa,0xbd,0x53,0x33,0xc2,0x1b,0xcc,0xf4,0x32,0x67,0xb6,0x60,
    0xb6,0x64,0xb6,0x6c,0xb6,0x6a,0xb6,0x6e,0x56,0x36,0xdb,0x6c,0x39,0xb4,0xa6,0x56,
    0xf9,0xed,0xad,0x21,0xd3,0x53,0xbe,0x94,0x5e,0x4e,0xd5,0xa9,0x85,0x5a,0xba,0x79,
    0x3a,0x96,0x03,0xab,0x0b,0x58,0x1e,0x6c,0x73,0xc0,0x0a,0x60,0x8f,0x06,0xac,0x0a,
    0x6c,0x6b,0xc0,0xaa,0xc1,0xba,0x02,0x56,0x03,0xd6,0x13,0xb0,0x5a,0xb0,0x9d,0x01,
    0xab,0x03,0xeb,0x0b,0xd8,0x23,0x60,0xbb,0xb3,0xbe,0x0a,0x0f,0xeb,0x53,0x8f,0xc7,
    0xec,0xb9,0x83,0x7e,0xdc,0x7f,0x22,0xf8,0x9a,0xd9,0xe3,0xc1,0x9f,0xc3,0xcf,0xe1,
    0x2f,0xe0,0x7b,0xbe,0x25,0xfc,0x02,0xfe,0x32,0x7e,0x15,0xfe,0x2a,0x7e,0x35,0xfe,
    0x3a,0x7e,0x0d,0x7e,0x19,0x5f,0xbd,0xb5,0x58,0xd6,0x7c,0x56,0x4f,0x21,0xcb,0xa7,
    0xf7,0x36,0x8b,0xa9,0x61,0x36,0xaa,0xa1,0xc3,0xfc,0x5a,0xd6,0x8b,0x6f,0xb7,0xc8,
    0x22,0xbc,0x38,0xed,0x5f,0x11,0xfd,0x2e,0xfb,0xaf,0x67,0x9d,0xf0,0xe7,0xf1,0x1b,
    0x42,0xae,0x46,0xe2,0x5d,0xab,0x99,0x5c,0x29,0xab,0xab,0xfe,0xe1,0xdc,0x1b,0xb1,
    0x1a,0xac,0xc8,0xb3,0x39,0x98,0xf4,0x5a,0x99,0x7f,0x0b,0x7a,0xad,0x59,0xde,0x0d,
    0x6c,0x17,0xbd,0xb4,0x93,0x5f,0xf1,0x1d,0x70,0xb5,0x81,0xdf,0x8a,0x2f,0x7e,0x1b,
    0xbc,0xf2,0xb7,0x5a,0x95,0x5d,0xc4,0x35,0x87,0x7d,0xf3,0x75,0xbd,0x9c,0x07,0xf7,
    0x07,0x82,0xae,0xea,0xdd,0x17,0xe2,0xe5,0xef,0xcf,0xbc,0x0b,0xfb,0xfa,0x4c,0x4d,
    0xf3,0x39,0x40,0x8c,0xdb,0xfe,0x90,0x6b,0x34,0xcc,0xf4,0x30,0x79,0x85,0x77,0xda,
    0xdb,0x38,0xf3,0xc8,0xa5,0xff,0x7f,0xb9,0xe0,0x6b,0xcd,0x51,0xde,0xc7,0x99,0x8b,
    0xfc,0x63,0x15,0xf5,0x4f,0xb0,0xc6,0xfd,0x13,0x9c,0x1b,0xad,0x7f,0x0b,0xcd,0x62,
    0xe0,0x4f,0x52,0x83,0xf8,0x69,0xce,0xa0,0xef,0xf3,0x34,0xdf,0x7f,0x21,0xc4,0x9f,
    0x66,0x9f,0x9d,0x9f,0x83,0x77,0x7f,0xa1,0xc2,0x5f,0xaa,0x58,0x7f,0x89,0xef,0xdb,
    0xf9,0xe5,0x0a,0xfe,0x1a,0x67,0xc7,0xf9,0xd5,0x0a,0xfe,0x06,0x33,0x75,0x7e,0xbd,
    0x82,0xbf,0xa5,0xdd,0x08,0x7c,0x19,0x7e,0x8f,0x4d,0x21,0xcf,0xfc,0x13,0xd8,0x5f,
    0x86,0x68,0x36,0xc3,0x9c,0xf9,0x26,0xce,0xf5,0x51,0xdb,0xcb,0x46,0xea,0x6c,0xc2,
    0x7c,0x3f,0x66,0xf8,0x76,0xb6,0xc0,0x1f,0xb0,0x0c,0x1d,0xdc,0x4f,0x6d,0x9c,0xcb,
    0x61,0x62,0x3a,0xc1,0x3f,0xb7,0x18,0xf9,0x8f,0xb1,0xae,0x93,0x75,0xdb,0xf8,0x6e,
    0xdb,0x38,0xaf,0xc3,0x9c,0xc9,0xed,0xe0,0x65,0x8b,0xe9,0xe2,0xae,0xd9,0xce,0x59,
    0xfd,0xd3,0x2a,0xef,0xa1,0x9e,0x7f,0x2c,0x7e,0x47,0xb8,0xe3,0xd4,0x8f,0xde,0x5f,
    0xb5,0x75,0x9a,0xc5,0x93,0x68,0xea,0x37,0xcf,0x7c,0x76,0x82,0xbf,0x66,0x9e,0x6a,
    0xfa,0x01,0xcc,0xe3,0xfe,0xb6,0x1c,0x9e,0x4b,0xcf,0xdf,0x2d,0x4a,0x71,0x3f,0x13,
    0x53,0xcd,0x9a,0xee,0xd0,0xc3,0x2e,0x7a,0xe8,0x0d,0x3d,0xf4,0x81,0x7b,0x0f,0x4f,
    0x81,0x79,0x0f,0xfd,0xa1,0x07,0x71,0x25,0xb3,0x7e,0x74,0x4b,0xa1,0x87,0xa7,0xd1,
    0xce,0x85,0x1e,0x9e,0x01,0xf7,0x1e,0x7e,0x02,0xf3,0x38,0xf5,0xe0,0xb9,0xfa,0x43,
    0x0f,0xf7,0x88,0xe9,0x61,0x4d,0x29,0xf4,0xb0,0x87,0x1e,0x06,0x42,0x0f,0xcf,0x81,
    0x7b,0x0f,0x7b,0xc1,0xbc,0x87,0xa1,0xd0,0x83,0xb8,0x41,0xb3,0x21,0x74,0x07,0x39,
    0x47,0xd2,0x7d,0x01,0xed,0x7b,0xe1,0x7b,0x56,0x8d,0x1e,0x3b,0x14,0x6a,0x7c,0x40,
    0x5c,0x3f,0xeb,0x06,0x89,0x3d,0x48,0xec,0x41,0x62,0x75,0x5e,0xef,0x73,0xdf,0x68,
    0xfd,0x9b,0x66,0x87,0xe0,0x34,0xa3,0x5f,0x38,0x8b,0xe2,0x8e,0xc3,0xa9,0x57,0xdd,
    0x3b,0xaf,0xd0,0xeb,0x28,0xbd,0x2a,0x7e,0x0c,0xfc,0x47,0x7a,0x3d,0x42,0x0e,0xe1,
    0x7f,0x58,0xcc,0x08,0x39,0xbc,0xdf,0x23,0xf8,0x23,0xd4,0x75,0x88,0x5c,0xe3,0xd9,
    0xde,0x6d,0xdc,0x4b,0x93,0xd4,0xf9,0x06,0xd8,0x03,0xbe,0x5d,0xe5,0xfd,0xcc,0x74,
    0x36,0x51,0xf7,0x7d,0x62,0x2e,0xb0,0xe7,0xc7,0x89,0x99,0xa8,0xe8,0x7d,0x84,0x1e,
    0x74,0x8f,0xbd,0x4d,0x0f,0x27,0xd0,0xd5,0x9d,0xf6,0x0e,0xf8,0x15,0x72,0x4f,0x92,
    0x5b,0x78,0xbd,0x65,0x16,0xf6,0x6e,0xb8,0x57,0x27,0xc3,0x4c,0x3e,0x20,0xdf,0xc9,
    0x30,0x93,0x0f,0xc1,0x7f,0xa3,0xae,0x53,0x60,0x13,0xe1,0x4c,0x7c,0x04,0xde,0xce,
    0x99,0x98,0x0a,0x33,0x12,0xf7,0xb1,0xd9,0x14,0xf5,0xeb,0xfd,0x45,0x8b,0x99,0xa1,
    0x0e,0xf5,0xe6,0xdc,0x54,0xd0,0x39,0x83,0xce,0xe9,0xa0,0x73,0x16,0xdc,0x75,0x66,
    0x83,0x8e,0xb8,0x73,0x66,0xb3,0xe4,0x3a,0x87,0xce,0x5c,0xd0,0x71,0x6e,0x36,0xe8,
    0x7c,0x82,0xce,0x68,0xd0,0xf9,0x14,0xdc,0x75,0xe6,0x83,0x8e,0xb8,0xf3,0xd9,0x77,
    0xb8,0x91,0xeb,0x3c,0x3a,0x0b,0x41,0xc7,0xb9,0xf9,0xa0,0xf3,0x05,0x3a,0xbd,0x41,
    0xe7,0x4b,0x70,0xd7,0x59,0x0c,0x3a,0xe2,0x2e,0x9a,0x2d,0x92,0xeb,0x22,0x3a,0x4b,
    0x41,0xc7,0xb9,0xc5,0xa0,0xf3,0x15,0x3a,0x97,0x82,0xce,0x65,0x70,0xd7,0xb9,0x1a,
    0x74,0x2e,0x67,0x67,0x25,0x65,0x98,0x72,0x5d,0x41,0x67,0x39,0xe8,0x38,0x77,0x35,
    0xe8,0x7c,0x8d,0xce,0xb5,0xa0,0xf3,0x0d,0xb8,0xeb,0xac,0x04,0x1d,0x71,0xd7,0xcd,
    0x56,0xc8,0x75,0x1d,0x9d,0xd5,0xa0,0xe3,0xdc,0x4a,0xd0,0xf9,0x16,0x9d,0x1b,0x41,
    0xe7,0x3b,0x70,0xd7,0x59,0x0b,0x3a,0xe2,0x6e,0x9a,0xad,0x91,0xeb,0x26,0x3a,0xeb,
    0x41,0xc7,0xb9,0xb5,0xa0,0xf3,0x3d,0x3a,0xb7,0x82,0xce,0x6d,0x70,0xd7,0xb9,0x1b,
    0x74,0xc4,0xdd,0x31,0xbb,0x4b,0xae,0x3b,0xe8,0x94,0x83,0x8e,0x73,0x7a,0xfe,0x6b,
    0x5f,0xdb,0x5e,0xb3,0xff,0x00,0x72,0xab,0xf6,0x8c,0xa4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 1);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = vec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
