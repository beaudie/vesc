// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x49,0x4f,0x54,0x51,
    0x10,0x85,0x6f,0x77,0x43,0x37,0xb6,0x02,0xca,0x28,0x71,0x42,0x21,0xd1,0x00,0x36,
    0x46,0x45,0x05,0xc5,0x91,0x44,0x54,0x14,0x95,0x18,0x40,0x8d,0x38,0xa1,0x31,0x0a,
    0x92,0x38,0xc0,0xc2,0xa1,0x35,0x0e,0xb0,0x70,0x80,0x85,0x03,0x2c,0x9c,0x58,0x98,
    0x38,0xc5,0x9d,0xfe,0x02,0x7f,0x91,0x63,0x62,0x62,0xd5,0xf3,0x2b,0xad,0x74,0x27,
    0xd5,0xef,0xd5,0x39,0x55,0x75,0xaa,0xee,0xbd,0xef,0x26,0xe2,0x35,0xa9,0x90,0x88,
    0x85,0x74,0x28,0x08,0x9f,0xc3,0xdf,0xdf,0x9c,0x10,0x0f,0x31,0x79,0xce,0x0c,0xc9,
    0xe8,0xb9,0xbd,0xa3,0xab,0x23,0x73,0xe1,0xe2,0xc9,0xcc,0xea,0xa6,0x15,0xca,0x17,
    0x85,0x44,0x14,0xa7,0x5c,0xb1,0x78,0x79,0xf2,0x54,0x1b,0x38,0x76,0x66,0x50,0xf1,
    0x42,0xb1,0xd3,0x62,0x43,0x62,0x23,0x62,0x59,0xb1,0x31,0xb1,0x09,0xb1,0x29,0xb1,
    0x69,0xb1,0xd9,0x52,0x43,0x73,0x52,0x5a,0x5f,0xde,0x0a,0x23,0x3d,0xad,0x17,0x42,
    0x7b,0xc8,0x0f,0xa5,0xf4,0x52,0xc3,0xd3,0xb0,0x18,0x58,0x81,0xc3,0xe2,0x60,0xb3,
    0x1d,0x96,0x00,0x9b,0xeb,0xb0,0x3c,0xb0,0xf9,0x0e,0xcb,0x07,0xab,0x76,0x58,0x12,
    0xac,0xd6,0x61,0x29,0xb0,0x65,0x0e,0x2b,0x00,0x6b,0x70,0xd8,0x0c,0xb0,0x15,0xd1,
    0x5c,0x89,0x7f,0xfd,0xe9,0x8c,0x9d,0xf2,0x5c,0xc2,0x3c,0xe6,0x2f,0x76,0xbe,0xae,
    0xd9,0x42,0xe7,0x0f,0xe1,0xc7,0xf0,0x47,0xf0,0xad,0x5e,0x16,0x3f,0x81,0x3f,0x86,
    0x9f,0x87,0x3f,0x81,0x9f,0x8f,0x3f,0x85,0x9f,0xc4,0x9f,0xc6,0xd7,0xd9,0x4a,0xa5,
    0x6a,0x3c,0xea,0x27,0x11,0xd5,0xd3,0xf7,0x72,0x89,0x49,0xb2,0x36,0xda,0x43,0xa5,
    0xf8,0x29,0xf2,0x95,0xaf,0x90,0xc8,0x34,0xbc,0x72,0xba,0x7f,0x69,0xf4,0xab,0xe5,
    0x7f,0x16,0x79,0x8a,0xaf,0xc7,0x2f,0x74,0xb5,0x8a,0x88,0x37,0xad,0x12,0x6a,0x85,
    0xa8,0xaf,0x59,0xff,0xd6,0xbd,0x08,0x4b,0x62,0x69,0x9e,0x25,0xce,0x54,0xaf,0x8c,
    0xf5,0x2f,0x45,0xaf,0x2c,0xaa,0xfb,0x17,0xab,0x67,0x96,0x0a,0xea,0x6b,0x7c,0x25,
    0x5c,0xca,0xf1,0xf3,0xf1,0x95,0x5f,0x00,0xaf,0xf5,0xcb,0xa4,0xcb,0x6a,0xe2,0x4a,
    0xdc,0xbe,0x59,0x5e,0x1d,0xe7,0xc1,0xfc,0x26,0xa7,0xab,0xfd,0x6e,0x22,0xbe,0x41,
    0xaa,0xeb,0x7a,0x6c,0x06,0xf3,0x66,0xb9,0xed,0x6e,0x0d,0x77,0x50,0x47,0xf1,0x2a,
    0x79,0xdb,0xcd,0xfc,0xb1,0xf0,0xff,0x17,0x73,0xbe,0xe6,0xec,0xe1,0x7d,0x37,0xeb,
    0xa0,0x7e,0x67,0x4e,0xbf,0xdd,0xe4,0x98,0xdf,0xcb,0x39,0xd1,0xfc,0x83,0x68,0xa6,
    0x1d,0xdf,0x47,0x0f,0xca,0x9f,0xe2,0xcc,0xd9,0xbe,0x9e,0xe2,0x7b,0x4f,0xb8,0xf8,
    0xb3,0xec,0xab,0xf1,0x43,0xf0,0xe6,0x8f,0xe4,0xf8,0xd9,0x9c,0xfc,0x5b,0x7c,0xcf,
    0xc6,0x8f,0xe5,0xf0,0xf7,0x38,0x2b,0xc6,0x4f,0xe4,0xf0,0x8f,0x58,0x63,0xe3,0xa7,
    0x72,0xf8,0x67,0x68,0x1a,0x3f,0x0d,0xbf,0x46,0x56,0x21,0xce,0xfa,0x07,0xb0,0x1f,
    0x82,0xe8,0xda,0xb4,0x72,0xc6,0x8b,0x39,0xc7,0x9d,0xb2,0x97,0x45,0xf4,0x59,0x8c,
    0xd9,0x7e,0x0c,0xf2,0xad,0xcc,0x81,0xdf,0x22,0x15,0x2a,0xb9,0x8f,0xca,0x39,0x87,
    0xad,0xc4,0x54,0x81,0xdf,0x94,0x18,0xf5,0xe7,0x91,0x57,0x45,0xde,0x02,0xbe,0xd3,
    0x72,0xce,0x67,0x2b,0x67,0x70,0x11,0xf8,0x1b,0x89,0xa9,0xe6,0x6e,0x59,0xc4,0xd9,
    0xfc,0x2e,0x9d,0xd7,0xd2,0xcf,0x2f,0x89,0x5f,0xe2,0xee,0x34,0x9d,0x47,0xdf,0xf7,
    0x49,0x9e,0xae,0xc5,0x52,0x34,0xf5,0x77,0x8d,0xf5,0x59,0x06,0xbe,0x5f,0x3c,0xed,
    0xe9,0x35,0x98,0xc5,0xfd,0x94,0x1a,0x56,0x4b,0x9f,0x5f,0x25,0x4a,0xe3,0xde,0x12,
    0x93,0x4f,0x4e,0x8d,0x9b,0xa1,0x9e,0x19,0xea,0xdc,0x0c,0x0d,0xe0,0x36,0xc3,0x72,
    0x30,0x9b,0xa1,0xd1,0xcd,0xa0,0x5c,0x46,0xac,0x11,0xdd,0x8c,0x9b,0x61,0x25,0xda,
    0x31,0x37,0xc3,0x2a,0x70,0x9b,0xe1,0x0d,0x98,0xc5,0xe9,0x0c,0x56,0xab,0xd1,0xcd,
    0xf0,0x8e,0x98,0x5a,0x72,0x32,0x6e,0x86,0x35,0xcc,0xd0,0xe4,0x66,0x58,0x0b,0x6e,
    0x33,0xac,0x03,0xb3,0x19,0x5a,0xdc,0x0c,0xca,0x35,0x8b,0xb5,0xa0,0xdb,0xcc,0x39,
    0x52,0xdd,0x0d,0x68,0xbf,0x73,0xdf,0xb3,0xf6,0x68,0xb1,0x2d,0xae,0xc7,0x4f,0xc4,
    0x35,0x92,0xd7,0x4c,0xec,0x56,0x62,0xb7,0x12,0xab,0xe7,0xf5,0x03,0xdf,0x82,0xe6,
    0x1f,0x10,0xdb,0x06,0xa7,0x6b,0xf4,0x9e,0xb3,0xa8,0x5c,0x0f,0x9c,0xce,0xaa,0xf7,
    0xce,0x4e,0x66,0x6d,0x67,0x56,0x8d,0xdf,0x05,0xfe,0x91,0x59,0x3b,0xa8,0xa1,0xf8,
    0x37,0x89,0x69,0xa3,0x86,0xcd,0xdb,0x81,0xdf,0x46,0x5f,0xdb,0xa8,0xa5,0x77,0xd3,
    0x5e,0xee,0xa5,0x3e,0xfa,0xec,0x02,0xfb,0x44,0xbf,0x5a,0xf7,0x86,0xe8,0xcc,0xa4,
    0xef,0x0f,0xc4,0x64,0xd9,0xf3,0x1e,0x62,0xba,0x73,0x66,0x6f,0x63,0x06,0xbd,0xc7,
    0x0e,0x31,0x43,0x2f,0xba,0x7a,0xa7,0x1d,0x06,0xbf,0x4f,0xed,0x23,0xd4,0x3e,0xec,
    0x66,0x3f,0x4a,0x5e,0x9f,0x9b,0xfd,0x18,0xf8,0x17,0xf4,0x8f,0x83,0x75,0xbb,0xbd,
    0x3f,0x01,0x5e,0xc1,0xde,0xf7,0xbb,0xb5,0x50,0xee,0xa4,0x58,0x3f,0x7d,0xea,0xfb,
    0x46,0x89,0x39,0x4d,0x0f,0x3a,0x83,0x71,0xfd,0x4e,0xe7,0x1c,0x3a,0x67,0x9d,0xce,
    0x00,0xb8,0xe9,0x9c,0x77,0x3a,0x03,0xd1,0xfd,0x13,0x22,0x4c,0x6b,0x0d,0xa2,0x33,
    0xe4,0x74,0x8c,0x3b,0xef,0x74,0x2e,0xa2,0xd3,0xee,0x74,0x2e,0x81,0x9b,0xce,0xb0,
    0xd3,0x51,0xee,0xb2,0xd8,0x30,0xb5,0x2e,0xa3,0x33,0xe2,0x74,0x8c,0x1b,0x76,0x3a,
    0x57,0xd0,0xa9,0x73,0x3a,0x57,0xc1,0x4d,0xe7,0xba,0xd3,0xb9,0x1a,0x7d,0xd3,0x21,
    0xc2,0xb4,0xd6,0x35,0x74,0xb2,0x4e,0xc7,0xb8,0xeb,0x4e,0xe7,0x36,0x3a,0xb7,0x9c,
    0xce,0x1d,0x70,0xd3,0x19,0x75,0x3a,0xca,0xdd,0x15,0x1b,0xa5,0xd6,0x5d,0x74,0xc6,
    0x9c,0x8e,0x71,0xa3,0x4e,0xe7,0x3e,0x3a,0xf7,0x9c,0xce,0x03,0x70,0xd3,0x19,0x77,
    0x3a,0xca,0x3d,0x14,0x1b,0xa7,0xd6,0x43,0x74,0x26,0x9c,0x8e,0x71,0xe3,0x4e,0xe7,
    0x31,0x3a,0x8f,0x9c,0xce,0x13,0x70,0xd3,0x99,0x74,0x3a,0xca,0x3d,0x15,0x9b,0xa4,
    0xd6,0x53,0x74,0xa6,0x9c,0x8e,0x71,0x93,0x4e,0xe7,0x39,0x3a,0xcf,0x9c,0xce,0x0b,
    0x70,0xd3,0x79,0xe5,0x74,0x94,0x7b,0x29,0xf6,0x8a,0x5a,0x2f,0xd1,0x99,0x76,0x3a,
    0xc6,0xe9,0xf3,0xb7,0xdc,0x6e,0xeb,0xc4,0xfe,0x00,0xe4,0x91,0x76,0x4c,0x7c,0x0c,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue *= params . invSamples;
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
