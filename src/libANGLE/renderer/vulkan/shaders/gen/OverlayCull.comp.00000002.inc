// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x96,0x4b,0x6c,0x95,0x55,
    0x10,0xc7,0xcf,0xdc,0xdb,0x16,0x94,0x44,0x1e,0x15,0x2b,0xe5,0xda,0x40,0xaf,0x89,
    0x21,0x9a,0x82,0xa9,0x8f,0x5e,0xb5,0x4a,0x25,0xb6,0xbd,0xb5,0xb5,0xf4,0xf6,0x21,
    0xf6,0xb1,0x20,0x98,0x10,0x17,0xb2,0x91,0x9d,0x2e,0x4c,0x60,0x51,0x4c,0x24,0x71,
    0xe3,0xa6,0x1b,0x8a,0x25,0x3e,0x02,0xc6,0x85,0x4d,0x24,0x46,0x1b,0xb4,0x10,0xb5,
    0x26,0x46,0x16,0x56,0xd3,0x44,0x90,0x48,0x04,0x89,0x44,0x10,0xad,0x05,0x09,0xce,
    0xff,0x3b,0xff,0x69,0xa7,0x5f,0x9b,0x9c,0x7c,0xdf,0xfc,0x67,0xce,0xcc,0xef,0x3c,
    0xbe,0xe9,0xcd,0x66,0xf2,0xcb,0x42,0x56,0xc2,0xed,0x61,0x79,0xd8,0x2f,0x21,0xf9,
    0x5b,0x1d,0x32,0x01,0xaf,0x2b,0x42,0x45,0xf2,0x6c,0x69,0xef,0x6e,0xaf,0x7b,0x65,
    0xef,0x8b,0x75,0x0f,0x3d,0xbc,0x05,0xfe,0x3b,0x42,0x36,0x89,0x83,0x6f,0x65,0x58,
    0x16,0xca,0xf5,0x59,0xa6,0xe3,0xe5,0x9d,0x2f,0xed,0x81,0xde,0xaa,0x63,0x58,0xc7,
    0x2a,0x9d,0x5f,0x96,0xe4,0xc3,0x7b,0x8c,0x4f,0xf2,0xa9,0xda,0x9a,0xe4,0x0f,0x61,
    0x3d,0xed,0x2e,0x7d,0x56,0x30,0xae,0x55,0x33,0x96,0x22,0x4a,0xc8,0xf3,0xd9,0xa2,
    0x35,0xa1,0x65,0x18,0xdf,0xa3,0xcf,0xda,0x79,0x5f,0xb4,0x37,0xba,0xfc,0xc3,0xcc,
    0x5f,0x4d,0x7b,0x2c,0x15,0x3f,0xc6,0x78,0xcb,0x0d,0x7b,0x1d,0x7d,0xc7,0x38,0x17,
    0x76,0xa5,0x56,0xcc,0x24,0xb1,0xd9,0x64,0xd5,0x78,0x5f,0xab,0x31,0x60,0xdd,0xc0,
    0xf9,0x55,0x6a,0xaf,0x20,0x3f,0xfc,0xf7,0xd3,0xbf,0x46,0xc7,0x72,0x1d,0x77,0xaa,
    0x5a,0xe9,0xf4,0x2a,0xae,0x33,0xa7,0xf6,0xdd,0x9c,0x57,0x95,0xe4,0x2b,0x4b,0x6a,
    0x62,0xcf,0xa0,0x3f,0x4e,0xbb,0x9a,0x1a,0xfc,0x39,0xbe,0x57,0xb8,0x7c,0x79,0x6a,
    0x66,0xd7,0xa5,0x38,0x0a,0xdc,0x17,0x70,0x36,0x73,0x6e,0x96,0xf9,0x5a,0xe8,0x6b,
    0x66,0xbd,0x16,0x9e,0x9f,0xb8,0xf9,0x45,0xae,0x13,0xf1,0x6d,0xf4,0x55,0x30,0x5f,
    0x07,0xdf,0x7d,0xfd,0xed,0xdc,0x9b,0x1c,0xcf,0xb5,0x83,0x5a,0x0d,0xcf,0xb0,0x8b,
    0xb9,0xba,0xc9,0x59,0x62,0x6d,0xd8,0x3d,0x6e,0x8f,0x7b,0x99,0xc7,0x58,0x60,0xf7,
    0x39,0x96,0x17,0x18,0xdb,0x41,0x96,0xdd,0xc9,0x79,0x45,0xed,0x01,0xbd,0x43,0x38,
    0x93,0xbd,0xe4,0x2f,0xba,0xf5,0x0d,0x33,0xa7,0xc5,0xbc,0xc9,0x3d,0xcc,0x27,0x67,
    0x7e,0x5b,0x38,0xcc,0x35,0xf1,0x73,0x98,0xff,0xcb,0x24,0x6b,0x88,0xb5,0xdf,0xa1,
    0x76,0x98,0x79,0x61,0x8f,0xb9,0xfb,0xf0,0xae,0x3e,0x7b,0xe7,0x59,0x2a,0x92,0xfd,
    0x3d,0xc6,0x73,0x2e,0xcc,0x9f,0x49,0x36,0xa9,0xbf,0x4f,0x0b,0x3d,0xa2,0x2c,0x19,
    0xee,0x63,0xe0,0xf9,0xfc,0xab,0x0a,0xbe,0xad,0x46,0x9e,0xdb,0x01,0xb2,0x77,0xea,
    0x37,0x87,0x79,0x6f,0x50,0x3b,0xc0,0x39,0xe0,0xdd,0xcf,0x35,0x1d,0xa4,0x1f,0x6b,
    0x7b,0x9d,0xda,0x5b,0xd4,0xa1,0x35,0xa9,0x86,0xb3,0xfc,0x98,0xe7,0x5d,0x64,0x1d,
    0xac,0x7b,0x9c,0x7a,0x93,0x5a,0xd8,0xe3,0x4f,0x78,0x2e,0x7d,0xf4,0x35,0xf2,0xdc,
    0x8f,0xd3,0xd7,0xa5,0xb9,0x30,0xef,0x53,0x6a,0xc1,0x69,0x9f,0x51,0xc3,0xda,0x3e,
    0x52,0x0d,0xe7,0xf3,0x39,0x63,0xe1,0x9b,0xd5,0x95,0x4e,0x72,0xce,0x75,0xcd,0x0b,
    0xdf,0x84,0x8e,0x49,0xae,0x7f,0xc2,0xad,0xf7,0x04,0x73,0x1d,0x77,0xeb,0x45,0x4e,
    0x9c,0xfb,0x17,0xf4,0x63,0x8d,0x23,0x9a,0x07,0x75,0xbe,0xa4,0x3e,0xa7,0x79,0x2c,
    0x1f,0x9e,0x7f,0x6b,0x3e,0xf8,0x4f,0x92,0xa5,0x9c,0xb1,0x13,0xe4,0x99,0x72,0x3c,
    0x88,0x39,0xa5,0x63,0x8a,0xf3,0x4f,0x39,0x9e,0xaf,0x1c,0x4f,0x86,0x67,0xf6,0x21,
    0x79,0xbe,0xa6,0xff,0xa0,0xe3,0xf9,0x86,0x3a,0x78,0x2c,0xdf,0x94,0xe3,0xf9,0x96,
    0x4c,0x93,0x8c,0x45,0xad,0xf7,0x75,0x17,0xb1,0x8f,0xdf,0xd1,0x5f,0xe0,0x59,0x4d,
    0x72,0x7f,0xbf,0xa7,0x6f,0x9c,0x67,0x8a,0xfe,0x70,0x9a,0x3d,0x03,0xda,0x93,0x4a,
    0x75,0x9a,0x71,0xb6,0xff,0x3f,0xd3,0xb7,0x86,0xeb,0x2d,0x97,0x85,0xf5,0xc2,0x77,
    0x06,0x7b,0x22,0x91,0xef,0x0c,0xef,0x0f,0x6a,0x9d,0x75,0xf3,0xac,0xd6,0x2f,0xac,
    0x75,0xd6,0xdd,0x9f,0x73,0xd4,0xcd,0xfe,0x95,0x4c,0x27,0x99,0xe7,0x3c,0xb5,0x73,
    0x8e,0xef,0xbc,0xe3,0xfb,0x8d,0x75,0xf2,0xe4,0x2b,0x73,0x7c,0xf0,0x5d,0xc0,0x77,
    0x42,0xbe,0x0b,0x8e,0xef,0xa2,0x9b,0x67,0x7c,0xbf,0x93,0xef,0xa2,0xe3,0xb9,0x44,
    0xdd,0xec,0x3f,0x52,0x7c,0x97,0xa9,0x5d,0x72,0x7c,0x97,0x1d,0xdf,0x9f,0xac,0x53,
    0x47,0xbe,0xac,0xe3,0x83,0xef,0x0a,0xee,0x02,0xf9,0xae,0x38,0xbe,0xab,0x6e,0x9e,
    0xf1,0xfd,0x45,0xbe,0xab,0x8e,0xe7,0x1a,0x75,0xb3,0xff,0x49,0xf1,0xcd,0x52,0xbb,
    0xe6,0xf8,0x66,0x1d,0xdf,0x1c,0xeb,0x14,0xc8,0x97,0x71,0x7c,0x73,0xc9,0x33,0x24,
    0x1a,0xf8,0xae,0x3b,0xbe,0x1b,0x6e,0x9e,0xf1,0xfd,0x47,0xbe,0x1b,0x8e,0xe7,0x26,
    0x75,0xb3,0x6f,0xa5,0xf8,0xf0,0x61,0xde,0x62,0x9c,0xf1,0x41,0xc3,0xbd,0xb7,0xba,
    0x19,0xda,0xb6,0x4f,0x59,0xda,0x76,0xae,0x65,0xb4,0xed,0x1e,0xe2,0xf9,0x01,0xd7,
    0xf7,0x03,0x39,0x8b,0x5c,0xdf,0x8c,0xfb,0x5e,0xe1,0x9b,0xd6,0x31,0xc3,0xef,0x6b,
    0xda,0xad,0xe5,0x47,0xae,0xa5,0xcf,0xb1,0xff,0x44,0xbd,0xa4,0x16,0xbe,0xe9,0x9d,
    0x12,0xb5,0x7d,0xdc,0x33,0x30,0x58,0xae,0x19,0x7e,0xab,0x88,0xdb,0x23,0xf1,0x7f,
    0x0b,0xb8,0x30,0x67,0xda,0xf5,0xbc,0xb7,0xe9,0x0f,0x6e,0x6f,0x57,0x4a,0xec,0xfd,
    0xe3,0xae,0xaf,0xae,0x92,0x85,0xbe,0x0a,0xbf,0xf5,0xd5,0xd5,0x12,0x7d,0x96,0xaf,
    0x52,0xa2,0xe6,0xfb,0xea,0x5a,0x6a,0xbe,0xaf,0xde,0x25,0x31,0x16,0x3e,0xec,0x4b,
    0xce,0x9d,0x3b,0x7c,0x55,0x3a,0x72,0xdc,0x4f,0xbc,0x5b,0x1f,0x5b,0xc7,0x5c,0x56,
    0xc3,0xf7,0xd5,0x6a,0x89,0x7e,0xdf,0x57,0xd7,0x4b,0xd4,0xb1,0x37,0x96,0x0f,0x4f,
    0xeb,0x63,0xf7,0x48,0x64,0x99,0x61,0x6c,0x15,0x79,0xf2,0x8e,0x07,0x31,0x35,0x3a,
    0xf2,0x9c,0x5f,0xe3,0x78,0x36,0x38,0x9e,0x74,0x5f,0xdd,0x28,0xd1,0xef,0xfb,0x6a,
    0xad,0x44,0x1d,0x3c,0x96,0x2f,0xef,0x78,0xee,0x95,0xc8,0x04,0xc6,0x5a,0xd6,0xb5,
    0xbe,0x7a,0x9f,0x44,0x7f,0xba,0xaf,0x6e,0x92,0xe8,0xf3,0x3d,0x74,0x13,0xd7,0x31,
    0x94,0xea,0x97,0x8f,0xaa,0x3d,0xc4,0xba,0x78,0xb7,0x33,0x6f,0x90,0xa5,0xfd,0xb2,
    0x20,0xf1,0x0e,0x36,0xc8,0xc2,0x1d,0x7c,0x4c,0xa2,0x6e,0xf6,0x13,0xb2,0xf8,0x7b,
    0x6a,0x94,0xa8,0x21,0xce,0x58,0xa0,0xd9,0xb9,0x3f,0x25,0x8b,0xfb,0xe5,0xa0,0xe3,
    0x83,0x6f,0xab,0x8e,0x41,0xf2,0x6d,0x75,0x7c,0x4d,0xb2,0xb4,0x5f,0x3e,0x4d,0xbe,
    0x26,0xc7,0xb3,0x4d,0xa2,0x6e,0xf6,0x33,0x29,0xbe,0x66,0x89,0xda,0x36,0xc7,0xd7,
    0xec,0xf8,0x5a,0x65,0x71,0xbf,0x1c,0x70,0x7c,0xf0,0x15,0x75,0x0c,0x90,0xaf,0xe8,
    0xf8,0xda,0x64,0x69,0xbf,0x7c,0x96,0x7c,0x6d,0x8e,0xa7,0x5d,0xa2,0x6e,0xf6,0x73,
    0x29,0xbe,0x4e,0x89,0x5a,0xbb,0xe3,0xeb,0x74,0x7c,0x5d,0xb2,0xb8,0x5f,0xf6,0x3b,
    0x3e,0xf8,0x4a,0x3a,0xfa,0xc9,0x57,0x72,0x7c,0xdd,0xb2,0xb4,0x5f,0xf6,0x90,0xaf,
    0xdb,0xf1,0xf4,0x4a,0xd4,0xcd,0x7e,0x3e,0xc5,0xb7,0x43,0xa2,0xd6,0xeb,0xf8,0x76,
    0xf0,0x3e,0x5b,0xdd,0x7e,0xda,0xb6,0x4f,0x03,0xb4,0xed,0x5c,0x07,0x69,0xdb,0x3d,
    0x1c,0xe2,0x5d,0xad,0x97,0xc5,0xbd,0x71,0xb3,0xda,0xf5,0x8c,0xc1,0xbb,0x71,0x6f,
    0x91,0xa5,0xbd,0xf1,0x41,0x89,0xba,0xf5,0xc6,0xdd,0x12,0x35,0xdf,0x1b,0x2d,0x57,
    0xbd,0x2c,0xf4,0xc6,0x57,0xd9,0x1b,0xc1,0x80,0x39,0x9b,0x5d,0x2f,0x1b,0xa1,0x3f,
    0x70,0xaf,0x47,0x53,0xbd,0xfb,0x90,0x8e,0x51,0xf6,0xdb,0x43,0x64,0xc1,0x6f,0xec,
    0x23,0xfc,0x7d,0xfd,0x1a,0x7f,0x5b,0xbf,0xc7,0xdf,0xb7,0xdb,0xb5,0x26,0x7a,0xe6,
    0x51,0xf6,0xdd,0x11,0xf7,0x7b,0x7f,0x97,0xc6,0x1e,0x61,0xec,0x51,0xf2,0x5a,0xee,
    0xd1,0xe4,0xff,0x93,0x84,0x06,0x1d,0xff,0x03,0x35,0x4a,0x44,0x9f,0x04,0x0f,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[16 + 16];
// };
//
// shared uint intersectingWidgets[16];
//
// void accumulateWidgets(const uint localId)
// {
//     if(localId < 8)
//     {
//         intersectingWidgets[localId]|= intersectingWidgets[localId + 8];
//         if(localId < 4)
//         {
//             intersectingWidgets[localId]|= intersectingWidgets[localId + 4];
//             if(localId < 2)
//             {
//                 intersectingWidgets[localId]|= intersectingWidgets[localId + 2];
//                 if(localId < 1)
//                 {
//                     intersectingWidgets[localId]|= intersectingWidgets[localId + 1];
//                 }
//             }
//         }
//     }
// }
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     uvec2 ballot = uvec2(0, 0);
//
//     intersectingWidgets[localId]= uint(intersects)<< localId;
//     accumulateWidgets(localId);
//     if(localId == 0)
//     {
//         ballot . x = intersectingWidgets[0];
//     }
//
//     return ballot;
// }
//
// void main()
// {
//
//     const uvec2 outCoord = gl_WorkGroupID . xy;
//     const uvec2 blockCoordLow = outCoord * uvec2(4, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(4, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(16, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
