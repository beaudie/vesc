// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayCull.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayCull_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x94,0xdb,0x4b,0x54,0x51,
    0x14,0xc6,0xf7,0x9c,0x19,0x47,0x2b,0x28,0xd3,0x62,0x30,0xaf,0x25,0xf8,0xa2,0x48,
    0xd0,0x85,0x20,0x64,0x92,0x1e,0x0c,0x2f,0xa9,0xe9,0x10,0x78,0x81,0xa2,0xa0,0x7a,
    0xa8,0xbc,0x8c,0xd4,0x83,0x82,0x90,0x90,0x84,0x49,0x35,0x49,0x35,0x12,0xf5,0x9a,
    0x8a,0x98,0x54,0xd3,0x50,0x19,0xa1,0xcf,0xbd,0xdb,0xff,0x11,0x5d,0x20,0x68,0xad,
    0x33,0xbf,0x63,0xab,0xc1,0x81,0xc5,0x9e,0xbd,0xd6,0xb7,0xbf,0xfd,0xad,0xf5,0x9d,
    0x73,0xc2,0x5e,0x6d,0xa1,0x0b,0x87,0xdc,0x4e,0x57,0xe4,0xbe,0xb9,0xdc,0x6f,0xaf,
    0xf3,0x5c,0x88,0xb5,0x89,0x35,0x2e,0xeb,0x2e,0x17,0xf5,0xf3,0x2d,0xed,0x3d,0xed,
    0x8d,0xa3,0xc9,0xcb,0x8d,0x47,0x8f,0x1d,0x56,0xfc,0x6e,0x17,0xf6,0xcf,0x69,0x6d,
    0x8f,0x2b,0x74,0x05,0xb2,0x46,0x24,0xae,0x5f,0xbc,0x76,0x43,0xf3,0x25,0x12,0xad,
    0x12,0xc5,0x72,0x3e,0xe2,0xf3,0x39,0x57,0x03,0xde,0xe7,0x93,0x6c,0x89,0xcf,0xef,
    0x5c,0x39,0x7b,0x5d,0xa3,0xfe,0x19,0xe7,0xce,0x08,0x63,0x05,0xda,0x6a,0x59,0x5b,
    0xe4,0x4e,0xcd,0x79,0xe0,0xab,0x64,0x3d,0xb4,0x55,0xcb,0xed,0x0f,0x1a,0xfe,0x56,
    0xf8,0x0f,0xc0,0xd7,0xb1,0x0d,0x5f,0x87,0xe1,0x4b,0xe6,0xf1,0x25,0xe1,0x0b,0xb0,
    0xba,0x2f,0xa3,0x36,0x01,0xb7,0xee,0x4b,0x85,0xc1,0xf3,0xb1,0x61,0x7f,0x2a,0xfa,
    0x7f,0xbf,0x60,0xa2,0xf4,0xac,0xbf,0x98,0xec,0x0b,0xe9,0xcf,0x63,0x5f,0xcc,0x3e,
    0xec,0xe3,0x22,0xfe,0x8c,0x42,0xf4,0x7f,0x92,0x7d,0x09,0xb9,0x7a,0xf8,0x4a,0xe1,
    0x53,0xfc,0x3e,0x6a,0x51,0xf8,0x62,0xfc,0x8f,0x18,0xbc,0xf6,0x7e,0x4a,0xa2,0x82,
    0xf9,0xc6,0xc8,0x55,0x31,0xcb,0x72,0xb8,0x2a,0xd1,0x55,0xc1,0xdd,0x95,0x3e,0xe6,
    0x5f,0x2f,0xd5,0xc6,0xbf,0x7a,0xb3,0x0f,0xb4,0xd4,0x6e,0xf5,0xe5,0x44,0x97,0xe7,
    0xea,0xd0,0x74,0x44,0xd6,0x3a,0x6a,0x81,0xa6,0x78,0x5e,0x4f,0xa7,0x99,0x41,0xd0,
    0x73,0x2b,0xf5,0x2a,0xfc,0x89,0x72,0xc7,0x59,0x59,0x77,0x48,0x74,0x80,0xd5,0x7d,
    0x27,0x39,0xad,0x77,0xf1,0x3f,0x6a,0xb8,0xfb,0x24,0x8a,0xcc,0xbe,0x9f,0xf9,0x34,
    0xc8,0xf3,0xa0,0x7e,0x0c,0x80,0xe9,0x37,0x98,0x2b,0xf4,0x56,0x26,0x6c,0x23,0xf0,
    0x85,0xdc,0xff,0x3f,0x8f,0xf9,0xe8,0xbd,0xa3,0xe4,0x46,0xd0,0xa5,0xfb,0xa4,0xf1,
    0xfd,0x96,0xac,0xd5,0x9c,0x69,0x10,0x36,0xf5,0x77,0x82,0x7b,0xe2,0x44,0xa3,0xf4,
    0xaa,0x7a,0x36,0x25,0x8e,0x8b,0x36,0x0f,0x9d,0x8e,0xd9,0xfc,0x94,0x8c,0xbe,0x63,
    0x4d,0x3c,0x37,0x6d,0xcc,0xa9,0x53,0x4e,0xe9,0xb9,0x76,0x72,0x6d,0x9c,0x51,0xbd,
    0xcd,0x72,0x42,0x67,0xd2,0xcd,0x9c,0x6a,0x38,0xaf,0xfd,0x9c,0x23,0xbf,0x28,0x18,
    0xf5,0xa7,0x87,0x9c,0x3e,0x5f,0x3f,0xe4,0xc6,0x04,0x3c,0xbf,0x05,0xaf,0xb5,0x5e,
    0x89,0x04,0x3a,0x7a,0xcd,0xbd,0xe7,0xb9,0x73,0xd3,0xcc,0xe8,0x97,0x60,0x02,0xac,
    0xae,0xdf,0xc1,0x7e,0x45,0x67,0x01,0xe7,0x94,0x67,0x0a,0x1f,0x06,0xa9,0xab,0x1f,
    0x93,0xe4,0x2e,0x90,0x1f,0xa0,0x17,0x7d,0xde,0xef,0xf0,0x4e,0x94,0x9a,0x5e,0xa6,
    0xc8,0x37,0xcb,0x4e,0x9f,0xc3,0xbb,0x5b,0xde,0xe4,0x6a,0x4d,0xbc,0x1b,0xd3,0xd4,
    0xba,0x85,0x4b,0xcf,0xdd,0x23,0xe7,0x4c,0x6e,0x86,0x9c,0xce,0x7f,0x85,0xd9,0xdc,
    0x07,0x3b,0xc3,0x6c,0x52,0x66,0x36,0x5a,0x9b,0x95,0x48,0xd1,0xef,0xac,0x99,0xcd,
    0x03,0xb8,0xa6,0x8d,0x27,0xca,0xa9,0xef,0xc4,0x43,0xea,0xda,0xe3,0xbc,0xf0,0xe8,
    0x3d,0x8f,0xc8,0xeb,0xfc,0x02,0xbe,0x14,0xf3,0xd3,0xfa,0x63,0xb4,0x24,0xc0,0xce,
    0xa2,0x27,0x6d,0xf4,0x28,0x66,0x4e,0x22,0xcd,0xf9,0x39,0xa3,0xe7,0x89,0xd1,0xe3,
    0xf1,0x5c,0x2d,0xa3,0xe7,0x29,0xf5,0x41,0xa3,0xe7,0x19,0x79,0xd5,0x13,0xf0,0xa5,
    0x8d,0x9e,0x79,0x34,0xa5,0xc0,0xea,0x5d,0xaf,0x64,0x8a,0x3a,0xc7,0xe7,0xd4,0xe3,
    0x78,0xb5,0xc1,0x7c,0x5f,0x50,0x53,0x5f,0xae,0x86,0x72,0xd8,0x97,0x7c,0x03,0x1c,
    0xf5,0x49,0xb0,0x0b,0xbc,0x23,0x53,0xc6,0xdb,0x45,0xe3,0xed,0x82,0xf1,0x76,0x89,
    0x5a,0xe0,0xe3,0x32,0x39,0xeb,0xed,0x0a,0x39,0xeb,0xed,0x6b,0xb0,0x2b,0xcc,0x32,
    0x63,0x66,0xa9,0xb5,0x55,0x89,0x0c,0xbd,0xaf,0x9a,0x59,0xbe,0x81,0x6b,0x69,0x1b,
    0x6f,0xdf,0x52,0xb7,0xde,0xbe,0x23,0xaf,0xb3,0x0c,0xf8,0x32,0x66,0x96,0xef,0xd1,
    0x92,0x06,0xbb,0x8a,0x9e,0x35,0xa3,0x47,0x31,0x59,0x89,0x35,0xce,0x67,0x8d,0x9e,
    0x0f,0x46,0x4f,0xbe,0xb7,0x1f,0xa9,0x5b,0x6f,0x3f,0x91,0x57,0x3d,0x01,0xdf,0x9a,
    0xd1,0xf3,0x19,0x4d,0x19,0xb0,0x59,0xe3,0xed,0x17,0xea,0xf9,0xde,0xae,0x53,0xb3,
    0xde,0x6e,0x18,0x6f,0xd7,0x7d,0xcf,0x72,0x73,0xbf,0x09,0x2e,0xf8,0xde,0x0c,0x9b,
    0x3e,0xb5,0x36,0x24,0x31,0x8c,0xae,0x21,0x7c,0xd6,0xef,0xeb,0x18,0xdf,0xd6,0x71,
    0xbe,0xab,0xb7,0xf9,0x6e,0x74,0x89,0xee,0x98,0x9f,0xcf,0x3d,0x4f,0x1b,0x70,0x6b,
    0x5c,0x12,0xec,0x18,0xd8,0x71,0x7a,0x0e,0xb8,0x75,0xfd,0x23,0xee,0x9d,0x90,0xf8,
    0x0b,0x43,0x5f,0x9f,0xac,0x18,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_KHR_shader_subgroup_arithmetic : require
//
// layout(push_constant)uniform PushConstants {
//
//     bool rotateXY;
// } params;
//
// layout(local_size_x = 32, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba32ui)uniform writeonly uimage2D culledWidgetsOut;
//
// layout(set = 0, binding = 1)uniform WidgetCoordinates
// {
//     uvec4 coordinates[32 + 32];
// };
//
// uvec2 cullWidgets(const uint offset, const uvec2 blockCoordLow, const uvec2 blockCoordHigh)
// {
//     const uint localId = gl_LocalInvocationID . x;
//     const uvec4 widgetCoords = coordinates[offset + localId];
//
//     const bool intersects = widgetCoords . x < widgetCoords . z &&
//                             all(lessThan(widgetCoords . xy, blockCoordHigh))&&
//                             all(greaterThanEqual(widgetCoords . zw, blockCoordLow));
//
//     return uvec2(subgroupOr(uint(intersects)<< localId), 0);
//
// }
//
// void main()
// {
//
//     uvec2 outCoord = gl_WorkGroupID . xy;
//     if(params . rotateXY)
//     {
//         outCoord . xy = outCoord . yx;
//     }
//
//     const uvec2 blockCoordLow = outCoord * uvec2(8, 4);
//     const uvec2 blockCoordHigh = blockCoordLow + uvec2(8, 4);
//
//     uvec2 culledWidgets;
//
//     culledWidgets . x = cullWidgets(0, blockCoordLow, blockCoordHigh). x;
//     culledWidgets . y = cullWidgets(32, blockCoordLow, blockCoordHigh). x;
//
//     if(gl_LocalInvocationID . x == 0)
//     {
//         imageStore(culledWidgetsOut, ivec2(outCoord), uvec4(culledWidgets, 0, 0));
//     }
// }
