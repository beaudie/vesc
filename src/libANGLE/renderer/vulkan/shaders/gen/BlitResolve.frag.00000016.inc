// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x93,0x5d,0x4f,0x53,0x41,
    0x10,0x86,0xb7,0x3d,0xd0,0x96,0x02,0x05,0xda,0x02,0x12,0x41,0xca,0x47,0x22,0x01,
    0x6c,0x89,0x0a,0x02,0x5a,0xa0,0xc6,0x02,0x22,0x2a,0x5a,0x83,0xd5,0x9b,0x86,0x08,
    0x89,0x24,0x8a,0x86,0x72,0xe1,0x85,0xf1,0xc2,0xff,0xa0,0x7f,0xc2,0xdf,0x67,0xfc,
    0x48,0x4c,0x9c,0xd9,0xf3,0x2c,0x4e,0xb8,0xf0,0x24,0x7b,0xce,0x99,0x77,0xde,0xf9,
    0x78,0x77,0x77,0xa2,0xe4,0x54,0xda,0x45,0x09,0x97,0x75,0x19,0xf7,0xd2,0xc5,0xcf,
    0x80,0x4b,0xba,0x04,0xdf,0x2f,0x05,0x27,0xbe,0x2e,0xd7,0xd8,0xdb,0x6f,0xd5,0x9b,
    0xcf,0x5a,0xed,0xd7,0x07,0x87,0x47,0xa7,0xad,0xf6,0xd9,0xd1,0xc9,0xab,0xe3,0x37,
    0xad,0xa3,0x0f,0xef,0xdf,0x9d,0x9e,0x09,0xb7,0xdb,0xa5,0x7c,0xcc,0xd6,0x6e,0x63,
    0xb7,0xdc,0x3e,0x3b,0x2c,0xdf,0x5c,0x5c,0xd0,0x5c,0x39,0x17,0xf9,0x9c,0xea,0xeb,
    0x93,0x1a,0x1d,0xf2,0xd5,0xf5,0xf6,0xe0,0xf8,0x44,0xf1,0x5e,0x59,0x6b,0x1a,0x27,
    0xab,0x5f,0xb8,0xea,0x4b,0x9b,0xff,0x1e,0xef,0xeb,0xf0,0xbc,0x6e,0x9f,0xc3,0xb9,
    0x6d,0xd7,0xe9,0x0a,0xf4,0x3a,0xc5,0x37,0x60,0x09,0xb0,0x8c,0xc1,0x92,0x60,0xfd,
    0x06,0x8b,0xc0,0x2e,0x19,0xac,0x03,0x6c,0xd4,0x60,0x9d,0x60,0x25,0x83,0xa5,0xc0,
    0xa6,0x0d,0x96,0x06,0x9b,0x31,0x58,0x06,0x6c,0xde,0x60,0x5d,0x60,0x0b,0x5e,0x57,
    0x74,0xde,0x9f,0x6a,0x5c,0x43,0xe3,0x10,0x76,0x4d,0xbe,0x93,0xe8,0x0b,0xf6,0x84,
    0xb1,0xb7,0xe0,0x7f,0x2d,0xc4,0xf6,0xce,0x05,0xfe,0x0e,0x7c,0xdd,0x93,0x82,0x54,
    0x49,0x7a,0x3b,0xf2,0xda,0xf5,0x7f,0x50,0x38,0x29,0xb4,0x29,0x67,0x58,0xec,0x34,
    0xfa,0x92,0xbe,0x8f,0x48,0xce,0x3e,0xf6,0xab,0x4f,0x6b,0x65,0xd9,0xa7,0x92,0xbc,
    0x7b,0x88,0x53,0xfc,0x36,0x76,0xaf,0xc9,0x95,0x83,0x1f,0x6a,0xe5,0xc9,0xa5,0xcf,
    0x15,0x61,0x87,0x7d,0xcb,0xb1,0x52,0xac,0x2c,0xdf,0xbc,0x59,0x5a,0xaf,0xc8,0xfe,
    0x15,0xa8,0x57,0xf4,0x79,0x63,0x6c,0x0e,0x2d,0x43,0xe4,0x57,0xfe,0x30,0xbe,0xb4,
    0xf1,0x8f,0x62,0xab,0x7f,0x0c,0xbf,0xe6,0x2f,0x4a,0x97,0x25,0x78,0x79,0xb3,0xcf,
    0x21,0x6e,0x96,0xf3,0x0c,0xf6,0x22,0xb1,0x9a,0xa7,0xca,0x7d,0xca,0xd2,0x57,0x95,
    0x3b,0xad,0xd8,0x88,0xb0,0xd6,0xf1,0x25,0xdc,0xbf,0x27,0x61,0x6c,0xcd,0xb1,0xc1,
    0xff,0x3a,0x39,0xd4,0xae,0x19,0xff,0x26,0xf9,0x52,0xf8,0x37,0x99,0x99,0x50,0x63,
    0x1b,0x1d,0xff,0xab,0x71,0xff,0x7c,0x56,0xe2,0x1c,0x6a,0xef,0x80,0xe9,0x79,0x3d,
    0x24,0x87,0x9e,0xef,0x92,0xdc,0xd7,0x24,0xff,0x8e,0x3a,0x3f,0x05,0xd1,0x79,0xa8,
    0x72,0x17,0xfa,0x38,0xef,0xc7,0xb2,0xa3,0x39,0xe6,0xab,0x8f,0x15,0xea,0x9f,0x70,
    0xa7,0x06,0xf0,0xd7,0x24,0xc3,0x30,0x73,0x37,0xc8,0x79,0x55,0xe1,0x8c,0x80,0x7f,
    0x16,0x8e,0xda,0x97,0x89,0x1b,0x21,0x6e,0xcc,0xdf,0x9b,0x38,0x6e,0x94,0x38,0xed,
    0x77,0x1c,0xfc,0x9b,0x70,0x4a,0xcc,0xc0,0x38,0x67,0xf8,0x43,0x3a,0x9f,0xa6,0x9f,
    0xdf,0xc2,0x9f,0x34,0xb3,0xab,0x7a,0xf4,0xff,0x89,0xc4,0xe9,0xbe,0x5e,0xa5,0xa6,
    0x3e,0x9f,0x38,0xe7,0x19,0xf0,0xa7,0x62,0x69,0x4f,0x0d,0xb0,0xc0,0xfb,0x25,0x39,
    0x42,0x2e,0xfd,0x7e,0x17,0x96,0xf2,0x9e,0xc3,0xe9,0x24,0x66,0xca,0x68,0x98,0x43,
    0xc3,0xac,0xd1,0x30,0x0f,0x1e,0x34,0x5c,0x03,0x0b,0x1a,0x2a,0x46,0x83,0xfa,0xca,
    0xb2,0x2a,0xd4,0x2d,0x1b,0x0d,0xd7,0xa9,0x9d,0x30,0x1a,0x6e,0x80,0x07,0x0d,0xfb,
    0x60,0x81,0xa7,0x1a,0x42,0xae,0x8a,0xd1,0xd0,0x84,0x33,0x4d,0x4c,0xd9,0x68,0x58,
    0x42,0xc3,0xa2,0xd1,0x70,0x0b,0x3c,0x68,0x58,0x06,0x0b,0x1a,0x56,0x8d,0x06,0xf5,
    0xad,0xc8,0x5a,0xa5,0xee,0x0a,0xf7,0x48,0xeb,0xde,0xa1,0x76,0xd3,0xdc,0x5f,0xed,
    0x31,0x70,0x57,0x4d,0x8f,0x2f,0xe0,0x55,0x88,0x5b,0xa1,0x1f,0x9d,0xa3,0xbb,0xcc,
    0x50,0x4b,0x98,0x7a,0x5f,0xef,0x81,0x69,0xcc,0x06,0x77,0x4f,0xf7,0x4d,0x67,0xb3,
    0x8e,0xdf,0xf9,0xd9,0x8d,0xfc,0xfc,0xd6,0xc9,0xa5,0xf3,0xf2,0x80,0x59,0xd1,0x5c,
    0x3a,0x27,0x8f,0xc0,0x2e,0xe6,0xca,0x7b,0x1d,0xb1,0x5f,0x9f,0x8f,0x9c,0xc1,0x1e,
    0xb8,0xe6,0xde,0xc2,0xfe,0x23,0xea,0x96,0x65,0xfd,0x05,0x71,0xa5,0x1f,0xfd,0x84,
    0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
