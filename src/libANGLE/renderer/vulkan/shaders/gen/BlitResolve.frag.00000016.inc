// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2021 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x93,0xdb,0x4e,0x93,0x41,
    0x14,0x85,0xa7,0x2d,0xb4,0x50,0xa1,0x1c,0xca,0x41,0x22,0x68,0x05,0x12,0x09,0x60,
    0x4b,0x54,0x10,0xd0,0x72,0x30,0x72,0x12,0x82,0x20,0x44,0x41,0x2f,0x1a,0x22,0x24,
    0x92,0x28,0x1a,0xe0,0xc2,0x0b,0xe3,0x85,0xef,0xa0,0x2f,0xe1,0xf3,0x19,0x0f,0x89,
    0x89,0x7b,0xfd,0xfd,0x46,0x77,0xb8,0xb0,0xc9,0xf4,0x9f,0xbd,0xf6,0xda,0x87,0x35,
    0x33,0x3b,0x93,0x1e,0xca,0x85,0x90,0x0a,0xf9,0xd0,0x14,0x5e,0x84,0xfa,0xaf,0x23,
    0xa4,0x0d,0xa9,0x7f,0x3f,0x17,0x83,0xf9,0x9a,0xc3,0xce,0xd6,0xd3,0xda,0xd2,0xde,
    0x6e,0xed,0xec,0xd5,0xc1,0xe1,0xd1,0x69,0xed,0xec,0xfc,0xe8,0xe4,0xe5,0xf1,0xeb,
    0xda,0xd1,0xfb,0x77,0x6f,0x4f,0xcf,0x8d,0x7b,0x29,0x64,0x93,0x98,0x95,0x8d,0x9d,
    0x8d,0xf2,0xd9,0xf9,0x61,0xf9,0xce,0xe4,0x84,0x72,0x15,0x42,0x26,0xc9,0x29,0x5f,
    0x9b,0xd5,0x68,0xb0,0xaf,0xd6,0x9b,0x83,0xe3,0x13,0xe1,0xad,0xb6,0xe6,0x6c,0xad,
    0xda,0x6a,0x37,0xae,0x7c,0x39,0xb7,0x6f,0x51,0x4e,0xdb,0xb5,0x26,0x35,0x94,0x43,
    0xdc,0xc6,0x50,0xa4,0xd7,0x21,0xbe,0x11,0x4b,0x81,0x35,0x39,0x2c,0x0d,0xd6,0xee,
    0xb0,0x0c,0xd8,0x65,0x87,0x35,0x80,0xf5,0x3b,0xac,0x11,0xac,0xe4,0xb0,0x2c,0xd8,
    0xb0,0xc3,0x72,0x60,0x23,0x0e,0x6b,0x02,0x1b,0x77,0x58,0x33,0xd8,0x44,0xa2,0x2b,
    0xf3,0xb7,0x3f,0x69,0x9c,0x43,0x63,0x0f,0xf6,0xa2,0x7d,0x07,0xd1,0x17,0xed,0xeb,
    0xce,0x5e,0x85,0xff,0xa5,0x58,0xb7,0xd7,0x2f,0xf0,0xd7,0xe1,0xeb,0x4c,0x8a,0x56,
    0x25,0x9d,0xd8,0x99,0x44,0xbb,0xf6,0xdd,0xc6,0xc9,0xa2,0x4d,0x9c,0x5e,0xb3,0x73,
    0xe8,0x4b,0x27,0x7d,0x64,0xec,0xee,0xeb,0x7e,0xf9,0x54,0x2b,0xcf,0x39,0x95,0xec,
    0xbf,0x85,0x38,0xe1,0xf7,0xb0,0x5b,0x5d,0xae,0x02,0xfc,0x58,0xab,0x93,0x5c,0xfa,
    0x5d,0x35,0x76,0x3c,0xb7,0x02,0x2b,0xcb,0xca,0xf3,0xed,0x74,0x4b,0xf5,0xba,0x38,
    0xbf,0x22,0xf5,0xba,0x92,0xbc,0x75,0x6c,0x0c,0x2d,0x3d,0xe4,0x17,0xbf,0x17,0x5f,
    0xce,0xf9,0xfb,0xb1,0xe5,0x1f,0xc0,0xaf,0xfc,0x5d,0xd6,0x65,0x09,0x5e,0xa7,0x3b,
    0xe7,0x18,0x37,0xca,0x7d,0x46,0x7b,0x92,0x58,0xe5,0xa9,0xf2,0x9e,0xf2,0xf4,0x55,
    0xe5,0x4d,0x0b,0xeb,0x33,0xd6,0x3c,0xbe,0x54,0xf8,0xf7,0x4b,0x39,0x5b,0x39,0x16,
    0xd8,0xcf,0x93,0x43,0xf6,0xe2,0x85,0x1e,0x1e,0x12,0x23,0xfe,0x0a,0xf9,0xb3,0xf0,
    0x57,0x98,0xa1,0x58,0x73,0x0d,0x5d,0xff,0xab,0xf9,0x88,0xfd,0x1a,0x39,0x64,0xaf,
    0x83,0xe9,0xfe,0x36,0xc9,0xa1,0xfb,0x9e,0xb2,0xf7,0x9b,0x66,0x1f,0xa8,0xf3,0xc3,
    0x10,0xcd,0x47,0x95,0xb7,0xd1,0xc6,0xfd,0x3f,0xb6,0x13,0x2e,0x30,0x6f,0x6d,0xac,
    0x58,0xff,0x84,0x37,0xd6,0x81,0x7f,0xd1,0x32,0xf4,0x32,0x87,0xdd,0xdc,0x5f,0x15,
    0x4e,0x1f,0xf8,0x27,0xe3,0xc8,0xbe,0x42,0x5c,0x1f,0x71,0x03,0xc9,0x3b,0xaa,0xc7,
    0xf5,0x13,0xa7,0x7e,0xaf,0x81,0x7f,0x35,0x4e,0x89,0x99,0xb8,0xc6,0x9d,0x7e,0xb7,
    0xce,0x87,0xe9,0xe7,0x97,0xf1,0x07,0xdd,0x2c,0x4b,0x8f,0xf6,0xdb,0x16,0xa7,0x73,
    0xbd,0x41,0x4d,0xfd,0x3e,0x72,0x07,0x23,0xe0,0x4f,0xcc,0x52,0x4f,0xbb,0x60,0x91,
    0xf7,0xd3,0x72,0xc4,0x5c,0xfa,0x7e,0x33,0x96,0x78,0x7b,0x70,0x1a,0x89,0x19,0x72,
    0x1a,0xc6,0xd0,0x30,0xea,0x34,0x8c,0x83,0x47,0x0d,0x37,0xc1,0xa2,0x86,0x8a,0xd3,
    0x20,0x5f,0xd9,0x56,0x85,0xba,0x65,0xa7,0xe1,0x16,0xb5,0x53,0x4e,0xc3,0x6d,0xf0,
    0xa8,0xe1,0x19,0x58,0xe4,0x49,0x43,0xcc,0x55,0x71,0x1a,0xf6,0xe1,0x0c,0x13,0x53,
    0x76,0x1a,0xa6,0xd0,0x30,0xe9,0x34,0xdc,0x05,0x8f,0x1a,0xa6,0xc1,0xa2,0x86,0x59,
    0xa7,0x41,0xbe,0x19,0x5b,0xb3,0xd4,0x9d,0xe1,0x1d,0xa9,0xee,0x7d,0x6a,0xef,0xbb,
    0xf7,0xab,0x1e,0x23,0x77,0xd6,0xf5,0xf8,0x1c,0x5e,0x85,0xb8,0x19,0xfa,0xd1,0x5c,
    0x3d,0x60,0xa6,0x6a,0xc6,0xd4,0x7b,0x5d,0x02,0x53,0xcc,0x02,0xf3,0xa5,0x73,0xd3,
    0xac,0x2e,0xe3,0x0f,0xc9,0x2c,0x67,0x92,0x79,0x5e,0x26,0x97,0xe6,0x65,0x83,0x59,
    0x51,0xae,0xcd,0xa4,0xd7,0x3a,0x16,0x73,0xf5,0x90,0x4b,0xe7,0xb0,0x85,0x5f,0xbf,
    0x0f,0xdc,0xc1,0x36,0xb8,0x72,0xaf,0x62,0xff,0x36,0x75,0xd3,0xb6,0xfe,0x00,0xdb,
    0x92,0xd2,0xb8,0x94,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 1). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
