// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x57,0x45,
    0x10,0xc7,0xdf,0xe5,0x17,0x42,0x48,0x42,0x09,0x25,0x91,0x6a,0x20,0x94,0x60,0x42,
    0x08,0x10,0x8a,0x88,0x88,0xa3,0x88,0x28,0x0a,0x8a,0xa8,0x30,0xa2,0xa2,0x48,0x6c,
    0x68,0x14,0x6c,0x08,0x2a,0x16,0x14,0x51,0x8a,0x88,0x05,0x0b,0x76,0xa9,0xf6,0x8a,
    0x1d,0xc1,0xee,0x8c,0x33,0x36,0x14,0x7b,0x57,0x98,0x01,0xb1,0xa3,0x82,0xb7,0xef,
    0x3e,0x6b,0x96,0x33,0x7f,0x99,0x99,0x37,0xbf,0xb7,0xdf,0xdd,0xfd,0xee,0xde,0xde,
    0x5e,0xc9,0xcb,0x64,0x95,0x36,0x4c,0x32,0x2e,0xc9,0x4b,0x72,0x93,0x01,0x2e,0x49,
    0xff,0x0a,0x93,0xac,0x44,0x5e,0xf3,0x93,0x9c,0xf4,0x77,0xd8,0x88,0xd1,0x23,0x2a,
    0xa7,0x4c,0x9d,0x58,0x59,0xdd,0xb7,0x4a,0xf4,0x4d,0x92,0x4c,0x6a,0x27,0xba,0xa6,
    0xde,0xa6,0x81,0xff,0xcd,0xf6,0xcf,0xe4,0x09,0x27,0x9d,0x26,0xf8,0x2f,0xfe,0x69,
    0xe6,0xf1,0xec,0x94,0x2b,0x49,0x86,0x60,0x2b,0xcf,0xfe,0xde,0xba,0x4b,0x08,0x93,
    0x94,0xf2,0xab,0x98,0x03,0xcb,0x36,0x58,0x16,0x58,0xae,0xc1,0x32,0x60,0x05,0x06,
    0xcb,0x06,0x6b,0x66,0xb0,0x06,0x60,0x2d,0x0d,0x96,0x03,0xb6,0x8b,0xc1,0x1a,0x82,
    0xb5,0x33,0x58,0x2e,0x58,0x89,0xc1,0x1a,0x81,0x75,0x36,0x58,0x1e,0x58,0x99,0xc1,
    0xf2,0xc1,0x2a,0x0c,0x56,0x00,0x56,0x65,0xb0,0xc6,0x60,0xd5,0x06,0x6b,0x02,0x36,
    0x40,0xea,0xee,0x47,0xaa,0x35,0x18,0xe6,0x47,0x78,0x3c,0xf9,0x6b,0x7d,0x26,0x46,
    0x75,0x14,0xfb,0x89,0xc6,0x7e,0x92,0xff,0xed,0xf4,0xaf,0x2e,0xc8,0x1d,0xa9,0xb3,
    0xc8,0x9b,0x23,0xbe,0x2d,0xf5,0xf0,0x6d,0x31,0x7c,0x5b,0x23,0xbe,0xad,0xf0,0xa9,
    0xfc,0x0b,0x63,0x6f,0x87,0xdc,0xdf,0x05,0xb9,0xb5,0x7f,0x5a,0x78,0x96,0xac,0xd4,
    0x3e,0x93,0xce,0x9f,0xbc,0xb7,0xf2,0x36,0x39,0xd4,0x38,0x49,0x7f,0xb3,0xd3,0xb9,
    0x68,0x48,0x5e,0x1d,0x7d,0x4e,0xb9,0xbc,0x2b,0x5e,0xe4,0xbd,0x0b,0xf1,0xe9,0xe8,
    0xed,0x9b,0xd3,0x63,0x0d,0xf1,0x2f,0xe2,0xbd,0x10,0x7d,0x31,0xef,0x45,0xf0,0xb5,
    0x35,0x7c,0x45,0xd8,0x94,0x90,0x8f,0x60,0x1d,0xbc,0xb5,0xf6,0xc9,0xff,0x7d,0x24,
    0x8f,0xae,0xf4,0x8b,0x70,0xed,0x81,0xdc,0x0d,0x4c,0xc6,0x5d,0xc6,0x18,0x64,0x2e,
    0xca,0x91,0xbb,0x1b,0xff,0xdd,0xb0,0xcd,0x31,0xfa,0x9e,0xf4,0xb4,0xca,0xd5,0xe4,
    0x5d,0x4e,0x1d,0x07,0x31,0x97,0x2a,0x0f,0xa6,0x8f,0xd5,0x7e,0x68,0x24,0x8f,0xc4,
    0xbe,0xa5,0x67,0x39,0xd4,0xf8,0x8d,0x61,0x8d,0x89,0x2c,0xb5,0x1b,0xc7,0xfc,0xb4,
    0xf7,0xa8,0xf6,0x60,0x07,0x7a,0xed,0x78,0xf2,0x3d,0x81,0x1e,0x9f,0xc8,0x78,0x45,
    0x9e,0x04,0xa6,0xf1,0x6a,0xcc,0x3c,0x9f,0x8c,0xce,0x8e,0x6f,0x32,0x6b,0x42,0xf3,
    0xa8,0xc5,0x5e,0xf5,0xe7,0xb0,0xde,0x54,0x9e,0x61,0xf2,0x14,0xf9,0x02,0xff,0xec,
    0xc8,0xd4,0xc9,0x33,0x59,0x4f,0xca,0x77,0x85,0xf1,0x17,0x79,0x61,0x54,0xbf,0xbb,
    0x98,0x13,0xc9,0xef,0x1e,0xfa,0xa1,0xcc,0xf0,0x2f,0x17,0x7e,0xff,0xa7,0xf2,0xca,
    0x68,0xfe,0x9e,0x8e,0xc6,0xfb,0x36,0x73,0xa8,0xfc,0x1b,0x22,0xfb,0x4f,0xd8,0xaf,
    0x8a,0xbd,0xfc,0x25,0x7d,0x9a,0x45,0x9d,0x37,0x9b,0x3a,0xcb,0x1a,0xdc,0x4c,0x5e,
    0x3f,0x12,0x63,0x0b,0x75,0x16,0x79,0x2b,0x98,0xf0,0xfc,0x84,0x5f,0x06,0xfb,0x9f,
    0x89,0xf9,0x13,0xf6,0x3f,0xb3,0x3f,0x3b,0xf4,0xbf,0xf2,0x6e,0xe7,0xa1,0x29,0xeb,
    0x56,0xf3,0xee,0xe7,0xc2,0x1e,0x5e,0xe1,0x25,0xe1,0x91,0x75,0x2d,0xd8,0x06,0xc6,
    0xd4,0xcf,0x77,0x65,0x16,0xbd,0x94,0x10,0xfb,0x77,0x8f,0x34,0x20,0x66,0xba,0x76,
    0x5d,0xa8,0xa7,0xca,0xb9,0x91,0xdc,0xc2,0xc8,0xb2,0x2e,0x3b,0x45,0xfa,0xd2,0x48,
    0xdf,0x35,0x92,0xbb,0x45,0xf6,0xbb,0x45,0xfa,0x8a,0x48,0xdf,0x07,0x79,0x6f,0x9f,
    0xa5,0xd4,0x60,0x07,0x75,0x91,0x9e,0xdb,0x93,0x71,0x4b,0x61,0x76,0x60,0x23,0xeb,
    0xd1,0xb9,0xb0,0x86,0x6b,0x8c,0x4d,0x96,0x0b,0xf8,0x7d,0xde,0x46,0xd6,0x50,0x86,
    0x83,0x4e,0xf0,0xdf,0x7c,0x25,0x1a,0x70,0xa6,0x6e,0xf3,0xf6,0xa2,0xcb,0xf6,0x8f,
    0x60,0x52,0x1f,0x79,0xff,0xdb,0x1b,0xa7,0xb5,0x72,0xb2,0x5e,0x33,0x69,0x9d,0x6a,
    0x93,0xf0,0x9e,0xcb,0xfb,0x1f,0x5e,0xdf,0x08,0x1f,0xf9,0xfd,0xd5,0x73,0xe5,0xfb,
    0xdf,0x02,0xb8,0x45,0xdf,0x18,0xbd,0xfc,0x6a,0x6e,0x4d,0x5c,0xa8,0xb3,0xe6,0xdf,
    0x8c,0xfc,0x9b,0x1a,0x9b,0x42,0x17,0xf0,0x07,0xc8,0xbf,0xb9,0x0b,0x7e,0x82,0x4b,
    0xce,0x22,0xe7,0x49,0x3f,0xc0,0x9f,0xe7,0xea,0x6a,0xd6,0xd2,0xfd,0xb7,0x66,0xad,
    0x5c,0xc0,0x35,0x66,0x51,0x3d,0x31,0x8b,0x5d,0xc0,0x2f,0xf5,0x36,0x22,0xef,0xe2,
    0x82,0x5f,0xb1,0xb1,0x69,0x4d,0xee,0x17,0x61,0xd3,0xc6,0x05,0xbb,0xd6,0xd4,0x49,
    0xfa,0xa5,0x8d,0xb1,0x6f,0xeb,0x42,0x0f,0x69,0xdc,0x76,0xc4,0x5d,0x69,0x72,0x6b,
    0xef,0x02,0xae,0x73,0xd5,0xc1,0x05,0xbf,0xf6,0xcc,0x55,0x89,0x99,0x2b,0xd1,0xed,
    0xea,0x9f,0x12,0xc6,0x2d,0xef,0x52,0x67,0xad,0x43,0x89,0x89,0xdd,0x99,0xd8,0x92,
    0x97,0xf4,0xa9,0xc8,0xbb,0xfb,0x18,0xb2,0x9e,0xbb,0xb8,0x70,0xff,0x28,0x45,0x2f,
    0x7d,0xdd,0x05,0x5f,0xd1,0x97,0xb9,0xd0,0xeb,0xa2,0x93,0x1e,0x2e,0x33,0xbe,0xdd,
    0x5d,0x38,0x3b,0xbb,0xa1,0x97,0x9e,0xef,0x6e,0xe2,0x96,0x9b,0xb8,0xd2,0xef,0xe5,
    0x86,0xb7,0x87,0x0b,0x6b,0x44,0x74,0xd2,0xfb,0x3d,0x52,0xde,0x9c,0xd4,0xaf,0xd2,
    0xc9,0xbe,0x12,0xd6,0x48,0x85,0xe1,0xeb,0xe9,0xc2,0x3a,0x5d,0x47,0xcd,0xab,0x5c,
    0xc0,0x2a,0x4d,0x6f,0x56,0x51,0x87,0x02,0xea,0x50,0x60,0xfc,0x7b,0x45,0x73,0xd6,
    0xdb,0x05,0x6c,0xa5,0xe9,0xe7,0xde,0x6e,0xe7,0x7e,0xce,0x37,0xfe,0xd5,0xc4,0x17,
    0x5b,0x59,0x9f,0xd5,0xd4,0x42,0xf6,0x96,0xbe,0x2e,0xdc,0x3d,0xfa,0xb0,0x66,0x06,
    0xf8,0xa7,0x1f,0x71,0xf2,0xd9,0x77,0xe4,0x6c,0xeb,0x2f,0x79,0xb2,0xef,0xea,0x7b,
    0x1e,0xfb,0x51,0x81,0xe9,0x85,0xce,0xd8,0x68,0xbf,0x94,0x73,0x3e,0x77,0x37,0x36,
    0x15,0xe0,0xda,0xa7,0x3d,0xf0,0xab,0x30,0x36,0x95,0xf0,0x2b,0x4f,0x15,0x3c,0x3d,
    0x8d,0x4d,0x2f,0x70,0xe5,0xe9,0x8d,0x9f,0xe0,0x5a,0xab,0x3e,0xf0,0xf7,0x36,0x5c,
    0x7d,0xe1,0xaa,0x36,0x5c,0xfd,0xc0,0xd5,0xaf,0x3f,0xbe,0x82,0x6f,0xf7,0x63,0xec,
    0x9f,0xde,0x1d,0xeb,0x6a,0xd3,0xb4,0x9e,0xda,0x34,0x36,0xef,0x4d,0xa8,0x4d,0x33,
    0xb3,0x37,0x0e,0xe4,0xec,0xd3,0x98,0x7b,0xe0,0x33,0x1b,0xce,0x3d,0xc1,0x06,0x99,
    0x31,0xed,0x05,0x3e,0x98,0xb9,0x1e,0xf8,0x2f,0x16,0x38,0x86,0xc0,0x2b,0x39,0x0e,
    0x31,0x39,0x16,0x72,0x3f,0x97,0xbf,0xe6,0x26,0xaf,0x16,0xe4,0xd5,0xca,0xe4,0xb5,
    0x4f,0xb2,0xf3,0x1e,0x3e,0x3c,0x92,0x8f,0x8a,0xe4,0xf1,0x91,0x7c,0x4c,0x24,0x1f,
    0x17,0xc9,0x53,0x23,0x79,0x5a,0x24,0x5f,0x1e,0xc9,0x73,0x23,0x79,0x71,0x24,0xdf,
    0x6c,0x64,0xb9,0x4f,0xdc,0x1b,0xe9,0x9f,0x4a,0x76,0x3e,0xa3,0xd6,0x45,0xf2,0x2b,
    0xd1,0x3c,0xec,0x4b,0x5d,0xb4,0x3f,0xf6,0xa3,0x3f,0x86,0x1a,0x9b,0x61,0xe0,0xb3,
    0x98,0x97,0xfd,0xf1,0x1b,0xc6,0xbc,0xec,0x03,0xa6,0xf6,0x07,0x44,0x9c,0x07,0xd6,
    0xc3,0x39,0x02,0x5c,0xe7,0xff,0x20,0xfc,0x46,0xc0,0x39,0x1c,0x4c,0xed,0x0f,0x66,
    0x6e,0x94,0x73,0x14,0x9c,0x23,0x8d,0xcd,0x21,0xe0,0xba,0x17,0x8f,0xc6,0xef,0x10,
    0x63,0x73,0x18,0x3c,0x7a,0x36,0x1d,0x0e,0x36,0x26,0xad,0x65,0xc0,0x8e,0xc0,0x57,
    0x74,0xb2,0x87,0x8f,0x4d,0xea,0xf6,0x70,0xd1,0x1d,0xe9,0x9f,0xb1,0xf4,0xd2,0x91,
    0xf4,0xdf,0x38,0xe4,0xb1,0x26,0xd6,0xd1,0xf4,0x97,0x8c,0x67,0x3c,0xb2,0xea,0x8e,
    0x25,0x0f,0xd1,0x1d,0x83,0xac,0x7b,0xe9,0x04,0xf6,0x9f,0xf1,0xf4,0x97,0xd8,0x1c,
    0x05,0xae,0xfe,0x27,0xd2,0x9b,0x3a,0x27,0x27,0x81,0x0d,0x4a,0x6b,0x94,0x93,0xde,
    0x85,0x4f,0xe1,0xbe,0x5c,0x83,0x5e,0x7d,0x4f,0x45,0x27,0xbc,0xc7,0x21,0x6b,0x5d,
    0x4f,0xa3,0xae,0x93,0x8d,0xfd,0xe9,0xe0,0x2b,0xa8,0xcf,0x19,0x60,0xb5,0xd4,0x67,
    0x8a,0xa9,0x8f,0xe8,0xce,0xf4,0xcf,0x8d,0xd4,0xe3,0x4c,0xc3,0x73,0x16,0x63,0x5e,
    0x0e,0xcf,0xd9,0x60,0x52,0xfb,0x65,0xde,0x42,0xee,0x89,0xe7,0x82,0x57,0x73,0x37,
    0x9f,0x8e,0xef,0x79,0xe8,0x24,0xe7,0xa9,0xc8,0xca,0x7b,0x7e,0xc4,0x3b,0x1d,0xcc,
    0xf2,0x5e,0x08,0x3e,0x83,0x3b,0xbd,0xf2,0x5e,0x84,0x4e,0x78,0xa7,0x21,0x6b,0x2d,
    0x2e,0xa6,0x16,0x33,0x4d,0xac,0x4b,0xc0,0xb5,0x16,0x97,0x82,0x69,0x2d,0x66,0x99,
    0x5a,0x88,0xee,0x32,0xff,0xcc,0xa1,0x16,0x97,0x19,0x9e,0xd9,0xe4,0xac,0x7b,0xdd,
    0x95,0xfc,0x2f,0x31,0x9b,0x5c,0x2e,0x07,0x93,0x73,0x6d,0x16,0xfe,0x73,0x8c,0xff,
    0x55,0xd1,0x98,0xaf,0x06,0x1b,0x43,0x1e,0xf3,0x4d,0x1e,0xa2,0x9b,0xe7,0x9f,0x05,
    0xf0,0xcc,0x23,0xc6,0xdc,0xa4,0xee,0x2e,0x38,0x1f,0xdd,0x02,0x13,0xe3,0x1a,0xf6,
    0x2f,0x95,0xaf,0x25,0xe6,0xc5,0xe4,0xbc,0x88,0xff,0x77,0xae,0x35,0xe3,0xb8,0x0e,
    0xbf,0x45,0xe6,0x3c,0xb9,0x1e,0x7c,0xa1,0x89,0x7b,0x7d,0x14,0x77,0xbe,0x89,0x73,
    0x03,0xfb,0xa0,0xd6,0xe1,0x86,0xa8,0x0e,0xb3,0x90,0xa7,0x20,0xdf,0x68,0x7c,0x6f,
    0x62,0x5d,0x88,0xef,0x62,0x64,0x9d,0xcf,0x5b,0xea,0x39,0x47,0x6f,0x05,0x17,0xfb,
    0x9b,0x91,0x75,0x1d,0x2e,0xe1,0xac,0x5b,0xcc,0xbe,0xab,0xf9,0x2c,0x31,0x9c,0xb7,
    0xd5,0xc3,0x79,0x3b,0xb8,0xd6,0xe4,0x0e,0xb0,0xc1,0xa6,0x7f,0xef,0x30,0xf6,0x77,
    0x52,0x67,0x9d,0xcb,0xbb,0xc1,0xee,0x62,0x2e,0x97,0x99,0xb9,0x14,0xdd,0xd2,0xb4,
    0xff,0xc2,0xd8,0x97,0xc2,0x79,0x2f,0xff,0x4b,0x4a,0x5d,0x96,0xa1,0x5b,0x61,0x62,
    0xac,0x22,0xc6,0x5a,0x1f,0xa3,0x2c,0xdd,0x23,0xc3,0x1d,0x6a,0x15,0xf3,0x29,0xd8,
    0xfd,0x06,0x57,0xce,0xfb,0x23,0xce,0x65,0x70,0x96,0xa5,0x7b,0x68,0x38,0x7f,0x74,
    0x2d,0x3d,0x08,0xa6,0x6b,0xe9,0xc1,0x68,0x9e,0xa6,0x98,0x7c,0x1e,0x8a,0xf6,0xf3,
    0x87,0xeb,0xd9,0xcf,0x1f,0x01,0xd7,0xfd,0xfc,0x51,0xfc,0x1e,0x31,0x36,0x8f,0x45,
    0xeb,0xe0,0x71,0x30,0xbb,0x9f,0x3f,0x81,0xef,0xe3,0xd4,0x73,0xb5,0xa9,0xa7,0xe8,
    0x9e,0xf4,0xcf,0x73,0xe4,0xf8,0xa4,0xc9,0xe9,0x19,0x72,0x7a,0xda,0xc4,0x7b,0x16,
    0x5c,0xc6,0xf8,0x14,0xb2,0x8c,0x71,0x35,0xfe,0xcf,0x19,0xdb,0xe7,0xb9,0x0f,0xa8,
    0xfc,0x02,0xe7,0xfd,0x1a,0xfa,0x62,0x0d,0x36,0x2f,0x18,0x9b,0x17,0xb9,0x23,0xbc,
    0x8c,0xcd,0x5a,0xec,0x5e,0x34,0x31,0xd7,0x46,0x31,0x57,0x1b,0xff,0x97,0xf0,0xaf,
    0xe5,0xce,0xfe,0x32,0x98,0xf8,0xae,0x43,0x56,0xdb,0x57,0xb9,0x2f,0xa8,0xed,0x6b,
    0x60,0x7a,0xdf,0x7f,0x9d,0xfb,0xc3,0x15,0xdc,0xa9,0xde,0xc0,0xe6,0x75,0xf8,0x5e,
    0x01,0x53,0xfb,0x37,0xb9,0x5f,0xc8,0x79,0xf8,0x66,0x74,0x1f,0x6b,0x4d,0xcd,0x8b,
    0xb9,0x8f,0x15,0xf1,0xbd,0x54,0xf2,0x6f,0x63,0x38,0xde,0x02,0x17,0x8e,0xb7,0xa2,
    0x7b,0x67,0x07,0x38,0xda,0x9a,0x3b,0x5d,0x3b,0xc3,0xd7,0x1e,0xbe,0x5d,0xcd,0x7d,
    0xe8,0x83,0xe8,0x7e,0xf4,0x79,0x52,0xf7,0x3f,0xba,0xcc,0xf1,0x3b,0xcc,0xf1,0xdb,
    0xa6,0x2e,0xef,0x82,0x6b,0x4f,0xbd,0x07,0xb6,0x90,0xfe,0x59,0x6f,0xfa,0x47,0x74,
    0xef,0xfb,0xe7,0x3b,0x62,0xbf,0x6f,0x78,0x3e,0x24,0x3f,0x9d,0xcb,0x8f,0xc0,0x36,
    0x18,0xee,0x8f,0xc1,0x6b,0xcd,0x59,0xf5,0x29,0x78,0x0d,0xdf,0x73,0x74,0x7d,0x7d,
    0x86,0x4e,0x6a,0xff,0x01,0xb2,0xd6,0xed,0x0b,0xc6,0x3f,0xca,0xf3,0xca,0x77,0x9f,
    0xaf,0xc0,0xc6,0xa5,0xdf,0x71,0xc2,0x7e,0xf6,0x35,0xdf,0x65,0x06,0xa2,0xd7,0x3c,
    0xbf,0xa1,0x4e,0x6b,0xc9,0xf3,0x5b,0x6c,0xbf,0x21,0xd6,0xe7,0x60,0xd2,0x73,0xeb,
    0x19,0xe7,0x77,0x26,0xf6,0xf7,0xc4,0x9e,0xce,0xbe,0xf0,0x03,0x98,0xe6,0xbd,0x11,
    0x4c,0xb9,0x36,0x46,0x5c,0xeb,0x4d,0x2e,0x9b,0x98,0x23,0x99,0xff,0x4d,0x66,0xfe,
    0xb3,0xcc,0x77,0xe2,0x12,0x33,0xff,0x1d,0xe1,0x28,0x35,0xdf,0x5d,0x7e,0xab,0xe7,
    0xbb,0xcb,0xef,0xe0,0x3a,0xef,0x7f,0x30,0xef,0x33,0x8c,0xcd,0x36,0x70,0xbd,0x53,
    0xfd,0x09,0x36,0xc8,0x9c,0x65,0x7f,0xc1,0xf5,0xa7,0xf1,0xfb,0x9b,0x3c,0xf4,0xde,
    0xb5,0x9d,0xef,0x67,0x35,0xd8,0xcb,0xb8,0xb7,0x63,0xa7,0xff,0x67,0xfe,0x03,0x15,
    0x2f,0xbd,0xa9,0x24,0x19,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       float loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//     float positiveMax = valueMask;
//
//           float value = valueAsUint / positiveMax;
//
//     return value;
// }
//
//        float convertComponent(float srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               float srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
