// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x0b,0x53,0x95,0x55,
    0x14,0x86,0xbf,0x73,0x0e,0x70,0x10,0xe4,0x22,0xa0,0x84,0x8a,0xe5,0x85,0x2e,0x62,
    0x88,0x05,0x46,0x02,0x2a,0x19,0x89,0x84,0x91,0x81,0x95,0x69,0xa2,0x85,0x95,0x92,
    0xa4,0x41,0x99,0x51,0x8a,0xe4,0x9d,0xf2,0xd2,0x4d,0xac,0x44,0x2b,0x51,0xab,0xe9,
    0x77,0xf4,0x8b,0x9a,0x2e,0x33,0xcd,0xb4,0xd7,0x77,0x9e,0xc5,0xbc,0x7d,0x63,0xc5,
    0xcc,0x9e,0x73,0xf6,0xb3,0xd6,0x5e,0xfb,0x5d,0x6b,0xaf,0xbd,0x0f,0x99,0xf4,0xf2,
    0x6c,0x94,0x49,0x45,0x45,0x51,0x61,0xf4,0x63,0x94,0xfb,0x9b,0x17,0xa5,0xa3,0x54,
    0xf8,0x2c,0x8e,0x0a,0xe2,0xcf,0xcd,0x3d,0x7d,0x3d,0x0d,0x23,0xa3,0x83,0x0d,0x4d,
    0xcd,0x8d,0x66,0x2f,0x8d,0x32,0xb1,0x9f,0xd9,0xca,0xa2,0x6c,0x94,0x17,0x3e,0x6d,
    0x1c,0xdc,0xbb,0x7f,0xd8,0x78,0x49,0x18,0x77,0xc2,0x28,0x0f,0x7e,0xc6,0xb3,0x16,
    0x23,0x7c,0x2b,0x89,0x63,0xda,0x9a,0x28,0xea,0x8a,0xf2,0xa3,0x4a,0xf6,0x5b,0xce,
    0xa7,0xb3,0x14,0xac,0x50,0x58,0x1a,0x56,0x2e,0x2c,0x03,0xab,0x12,0x96,0x07,0xbb,
    0x47,0x58,0x3e,0x6c,0xb1,0xb0,0x02,0xd8,0x7d,0xc2,0xb2,0xb0,0x15,0xc2,0x0a,0x61,
    0x0f,0x0a,0x9b,0x03,0x5b,0x25,0xac,0x08,0xd6,0x28,0xac,0x18,0xd6,0x24,0x6c,0x2e,
    0xac,0x45,0x58,0x09,0xac,0x2d,0xae,0x53,0x66,0x36,0x5f,0xab,0xd9,0xa6,0xf0,0xb9,
    0x8c,0xfa,0xf8,0x7c,0xa9,0xcc,0xad,0xce,0x4b,0x98,0x57,0x86,0x55,0xe9,0xd8,0x9e,
    0x89,0x6b,0x63,0xdf,0xe7,0x07,0x9f,0x02,0xf2,0xb4,0xba,0x56,0x87,0x79,0x96,0xfc,
    0xd3,0x31,0xcf,0x8b,0x73,0xcc,0x32,0x16,0x84,0x95,0x45,0xf8,0x9b,0x6f,0x31,0xb9,
    0xe5,0xe1,0x3b,0x97,0x38,0xc6,0x5b,0x99,0x97,0x48,0xec,0x52,0xfc,0x7d,0xef,0x0a,
    0x62,0x45,0xb1,0xce,0xf2,0xd9,0x3a,0xbb,0x06,0x1b,0x15,0xff,0x33,0xdc,0xc7,0xf6,
    0xaf,0xa2,0xfe,0x95,0xec,0x5f,0x15,0xef,0x93,0x63,0xf5,0xe4,0xba,0x00,0x3d,0xe6,
    0x5f,0x8d,0x2d,0x2b,0xf6,0x5a,0xc9,0x67,0x09,0xf6,0x8a,0xb8,0x8f,0xd2,0x71,0x6d,
    0xeb,0xd1,0xed,0x75,0x37,0xbf,0xfb,0x45,0xb3,0xc7,0xa9,0xa7,0xb7,0xdc,0x7f,0x0d,
    0xfb,0xba,0x7d,0x2d,0xb5,0xb1,0xba,0xac,0x67,0xad,0xef,0xbb,0x81,0x78,0xc6,0x6b,
    0x82,0x82,0x0e,0xec,0xa9,0xe8,0x9f,0x7f,0x29,0xd1,0xf0,0x04,0xdf,0x3b,0xc8,0xdd,
    0xe6,0x9b,0x60,0xbe,0x67,0x67,0x62,0xde,0x2d,0xe7,0xfc,0x34,0xb9,0x6a,0x0e,0xbd,
    0x32,0xb7,0x1c,0xb6,0x73,0xaf,0x4c,0xf3,0x8b,0xd8,0x32,0xe2,0xbf,0x27,0x51,0xcb,
    0x31,0xee,0x88,0xcf,0x4f,0x27,0xce,0xe2,0x32,0x3d,0xef,0xf1,0xaf,0x8b,0x9e,0xdb,
    0xc4,0x5e,0x4f,0x3e,0xb7,0x79,0x37,0x32,0x71,0xed,0xf2,0x63,0xbf,0x3c,0xf2,0x31,
    0xf6,0x7b,0x20,0xf9,0xf8,0x16,0xca,0xb9,0xfa,0x7c,0x91,0xcc,0xad,0xbe,0x1b,0x13,
    0xf3,0x51,0x99,0xdb,0x79,0x5e,0x62,0xde,0x4e,0x9f,0x97,0x71,0x5e,0xbd,0x81,0x96,
    0xf2,0xd6,0x94,0x31,0xfc,0x2c,0x86,0xb9,0x3f,0xf3,0xb0,0x77,0x04,0x45,0xd5,0xbc,
    0x37,0xf3,0xe9,0xbd,0x76,0x7c,0x6a,0xe0,0x13,0xc1,0xc7,0xe6,0x0b,0x59,0x57,0x13,
    0xe7,0x9c,0x89,0xf5,0x2f,0x14,0xff,0xc5,0xe4,0x64,0xb6,0x45,0xcc,0x2d,0xbe,0xf5,
    0xe8,0xbd,0xc4,0xaf,0xc5,0xdf,0xef,0x95,0xf1,0x9f,0x82,0xcf,0x52,0x79,0xcf,0xac,
    0x6f,0x7f,0x0b,0x31,0xea,0xd0,0xfd,0x67,0xf0,0xf7,0x77,0xad,0x8e,0x3a,0xae,0x20,
    0xb6,0xd5,0xe1,0x01,0x6a,0xb7,0x8c,0xd8,0x05,0xbc,0x77,0xc6,0x8f,0x31,0x7f,0x08,
    0xe6,0x6b,0x56,0xca,0x1a,0xd3,0xbb,0x12,0x9f,0x3f,0x42,0x6c,0xdf,0xa3,0x4e,0xf4,
    0xaf,0x42,0x7f,0xbd,0xe8,0x7f,0x18,0xee,0xfa,0x1b,0x60,0xae,0xbf,0x51,0xf4,0x9b,
    0x6d,0x35,0xef,0xab,0xc5,0x5e,0x2d,0x5a,0x1e,0x41,0xcb,0x1a,0xd1,0xff,0x28,0xdc,
    0xf5,0x37,0xc1,0x7c,0x4d,0xb3,0xac,0x31,0xfd,0xcd,0xf8,0x98,0x7e,0xdf,0xa3,0x51,
    0xf4,0x3f,0x86,0xfe,0xb5,0xa2,0xbf,0x05,0xee,0xfa,0x1f,0x87,0xb9,0xfe,0x56,0xd1,
    0x6f,0xb6,0x75,0x71,0xef,0xe5,0x62,0xaf,0x93,0x73,0x6f,0x43,0x8b,0xf5,0x5d,0xae,
    0x1f,0x73,0xac,0x4d,0xee,0xbf,0xf7,0x44,0x3b,0x1a,0x3d,0x4e,0x2b,0x71,0xec,0x4d,
    0x78,0x92,0xf7,0xc0,0x7b,0xf2,0x29,0x34,0x77,0xca,0x5e,0x9b,0xe1,0x3e,0xef,0x62,
    0xef,0x71,0x7a,0x74,0x0b,0x3e,0x5d,0xc4,0xb1,0x37,0xa3,0x87,0x38,0xdd,0x52,0xdf,
    0xad,0xf0,0x81,0xb0,0xca,0xee,0xef,0x33,0xec,0xbf,0x85,0xfb,0xbd,0x15,0xcd,0x1b,
    0xb1,0x79,0x1d,0x9f,0x25,0x56,0xaf,0xd4,0x71,0x1b,0xdc,0xeb,0xf8,0x1c,0xcc,0xeb,
    0xd8,0x2f,0x75,0x34,0x5b,0x5f,0xbc,0x6f,0x2e,0xff,0x3e,0x39,0xd3,0xe7,0xb9,0xf3,
    0xdb,0x45,0xe7,0x0b,0xf0,0x76,0xde,0xe0,0x1d,0xf8,0xf4,0x86,0x17,0xc3,0xde,0xb7,
    0x97,0x60,0x3b,0xe4,0x8e,0xa7,0x63,0x3d,0x05,0xb1,0x7d,0x27,0x31,0x7c,0x9c,0x0c,
    0x7b,0x19,0xdf,0xc5,0xda,0x9d,0x12,0xfb,0xe5,0xd9,0xd8,0x73,0xe2,0xf9,0x6e,0xd8,
    0x2e,0xde,0xb1,0x7c,0x79,0x4f,0xbd,0x36,0xbb,0x39,0xcf,0x7e,0xf2,0x19,0x90,0x5a,
    0xed,0xa5,0x56,0x7b,0xa4,0x56,0xaf,0xc0,0xbd,0x56,0xaf,0xc2,0xbc,0x56,0xfb,0xa4,
    0x56,0x66,0x1b,0x0c,0x63,0x1f,0xb1,0x07,0xa5,0x56,0xaf,0xdd,0xa5,0x56,0xaf,0xc3,
    0x7f,0x26,0xf6,0x1b,0xb0,0x4e,0x34,0x7a,0x1c,0xfb,0xfc,0x35,0x9c,0xbb,0xf9,0xec,
    0x47,0xc3,0x00,0xfe,0x83,0xe8,0x18,0x12,0x1d,0xe6,0x73,0x20,0x8c,0x21,0xd6,0x1f,
    0x10,0x1d,0x6f,0xde,0x45,0xc7,0x41,0xb8,0xd7,0x75,0x38,0x71,0x66,0x6f,0xc1,0x86,
    0xff,0xe5,0xcc,0x0e,0x11,0xc3,0xc7,0x19,0xce,0xec,0x30,0x6b,0x0f,0x49,0xec,0xb7,
    0x13,0x67,0x36,0x02,0x3b,0xfc,0x1f,0x67,0x36,0x42,0x3d,0x3c,0x9f,0xa1,0xc4,0x19,
    0xf6,0x4b,0xfc,0x77,0x88,0xbf,0x2d,0x44,0xb2,0x38,0xef,0xc2,0x22,0x61,0x47,0x60,
    0x29,0x61,0xef,0xc1,0xd2,0xc2,0x8e,0xc2,0x32,0x71,0xae,0xb9,0x7b,0xf7,0x3e,0x31,
    0x8f,0xb0,0xe6,0x28,0x3a,0x47,0xb1,0x79,0x2f,0x7d,0x40,0x2f,0x8d,0x49,0x2f,0x7d,
    0x08,0xf7,0x5e,0x3a,0x06,0xf3,0x5e,0x1a,0x97,0x33,0x34,0xdb,0xf1,0x30,0x4e,0x91,
    0xe3,0x71,0xc9,0xf1,0x04,0xbf,0xad,0xfe,0x7e,0x4d,0xc0,0x4e,0xc8,0x6f,0xb7,0xfb,
    0x7e,0x34,0xeb,0x9b,0xab,0xf7,0x49,0xd8,0x84,0xd4,0x3b,0x2d,0xf5,0x1e,0xc5,0xc7,
    0xea,0x3b,0xce,0xde,0xa7,0x24,0xaf,0x33,0xe4,0x75,0x5a,0xf2,0x3a,0x0b,0xf7,0xbc,
    0xce,0xc1,0x3c,0xaf,0x49,0xc9,0xcb,0x6c,0xe7,0xc3,0xb8,0x48,0xec,0xf3,0xd2,0x9b,
    0x1f,0xa3,0x55,0x7b,0xf3,0x13,0xb8,0xfb,0x5c,0xc0,0xc7,0x7f,0x07,0x2f,0xe0,0x63,
    0x7a,0x27,0x89,0x79,0x51,0xde,0xd2,0x4f,0xd1,0x7b,0x59,0x62,0x7e,0x06,0xb7,0xf5,
    0x97,0x98,0xbb,0xed,0x73,0xfe,0x4f,0xf9,0x85,0x1e,0xf8,0x02,0xd6,0x2d,0xf9,0x7d,
    0x09,0xef,0x24,0xbf,0x29,0xc9,0xcf,0x6c,0x57,0xc2,0x98,0x42,0xcb,0x15,0xd1,0x7e,
    0x15,0xed,0xfe,0x1b,0x78,0x55,0xee,0xba,0xfb,0x4f,0x89,0x96,0xaf,0x12,0x5a,0xbe,
    0x86,0xd5,0x8a,0x96,0x6f,0xe0,0xae,0x65,0x5a,0xb4,0x98,0xed,0x5a,0x18,0xd3,0xc4,
    0xbe,0x26,0x5a,0x6e,0xa0,0xe5,0x3a,0x5a,0x6e,0x88,0x16,0xf7,0x9f,0x16,0x2d,0xdf,
    0x26,0xb4,0x7c,0x07,0x1b,0x13,0x2d,0xdf,0xc3,0x5d,0xcb,0x8c,0x68,0x31,0xdb,0xcd,
    0x30,0x66,0x88,0x7d,0x53,0xb4,0xdc,0x92,0x73,0x37,0x2d,0xb7,0xf8,0xbf,0xce,0xb4,
    0xb8,0xff,0x4c,0xe2,0x8c,0x27,0x13,0x3d,0x3a,0x2e,0x3d,0xff,0x03,0xf1,0x2c,0xd6,
    0x1d,0xe6,0x7f,0x85,0xdb,0xde,0x12,0xc6,0xdf,0xcb,0xdc,0xce,0xab,0x80,0x0f,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
