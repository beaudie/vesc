// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xd9,0x4f,0x54,0x59,
    0x10,0xc6,0x6f,0xef,0xd8,0x02,0x22,0xeb,0x10,0x75,0x40,0x21,0xd1,0xa0,0x36,0x46,
    0xc5,0x11,0x94,0xc9,0x8c,0x9a,0x88,0x8a,0xe3,0x42,0x8c,0xc6,0x7d,0x17,0x4c,0x64,
    0x94,0x9e,0x64,0x46,0x48,0x5c,0xe0,0x41,0x47,0xc8,0x04,0x15,0x1e,0x98,0x11,0x1e,
    0xdc,0x78,0x30,0x71,0xc4,0x57,0x7d,0xf7,0x2f,0x72,0x4d,0x4c,0xac,0x3a,0xfd,0x2b,
    0xac,0x74,0x27,0xd5,0xf7,0xd6,0xf7,0x55,0xd5,0x57,0x75,0xee,0x39,0x27,0x11,0x6f,
    0xca,0x44,0x89,0x58,0x94,0x8d,0x4a,0xa2,0xb7,0x51,0xe1,0xb7,0x38,0x8a,0x47,0x31,
    0x79,0x2e,0x8c,0xd2,0xe1,0xb9,0xb3,0xbb,0xa7,0x3b,0x97,0xff,0xe3,0x7c,0x6e,0x63,
    0xdb,0x3a,0xe5,0xcb,0xa3,0x44,0x88,0x53,0x6e,0x91,0x78,0x49,0x79,0xaa,0x5d,0x39,
    0xd3,0xd7,0xaf,0x78,0x99,0xd8,0x65,0xb1,0xbc,0xd8,0x90,0xd8,0x88,0xd8,0x98,0xd8,
    0xa4,0xd8,0x8c,0xd8,0xac,0x58,0x85,0xd4,0xd0,0x9c,0x8c,0xd6,0x97,0xb7,0xb2,0xa0,
    0xa7,0xf5,0xa2,0xa8,0x2b,0x4a,0x45,0x55,0xf4,0xd2,0xc4,0xd3,0xb0,0x18,0x58,0x89,
    0xc3,0xe2,0x60,0x15,0x0e,0x4b,0x80,0xfd,0xe0,0xb0,0x24,0xd8,0x52,0x87,0xa5,0xc0,
    0x1a,0x1d,0x96,0x06,0x6b,0x76,0x58,0x06,0x6c,0x95,0xc3,0x4a,0xc0,0xd6,0x38,0x6c,
    0x01,0xd8,0xba,0x30,0x57,0x62,0xbe,0x3f,0x9d,0x71,0x9f,0x3c,0x57,0x30,0x8f,0xf9,
    0xcb,0x9d,0xaf,0x6b,0xf6,0xa3,0xf3,0xf3,0xf8,0x31,0xfc,0x21,0x7c,0xab,0x37,0x82,
    0x9f,0xc0,0x1f,0xc3,0x4f,0xe2,0x4f,0xe2,0xa7,0xf0,0x67,0xf0,0xd3,0xf8,0xb3,0xf8,
    0x3a,0x5b,0x95,0x54,0x8d,0x87,0x7e,0x12,0xa1,0x9e,0xbe,0xd7,0x48,0x4c,0x9a,0xb5,
    0xd1,0x1e,0xea,0xc4,0xcf,0x90,0xaf,0x7c,0xad,0x44,0x66,0xe1,0x95,0xd3,0xef,0x97,
    0x45,0xbf,0x51,0xfe,0x4b,0xc9,0x53,0x7c,0x0b,0x7e,0x99,0xab,0x55,0x4e,0xbc,0x69,
    0x55,0x52,0x2b,0x0a,0x7d,0x95,0xce,0xaf,0x7b,0x39,0x96,0xc6,0xb2,0x3c,0x2b,0x9d,
    0xa9,0x5e,0x35,0xeb,0x5f,0x85,0x5e,0x75,0xa8,0x5b,0xc0,0x56,0x33,0x4b,0x2d,0xf5,
    0x35,0xbe,0x0e,0x2e,0xe3,0xf8,0xa5,0xf8,0xca,0x2f,0x83,0xd7,0xfa,0xd5,0xd2,0x65,
    0x23,0x71,0x95,0xee,0xbb,0x59,0x5e,0x0b,0xfb,0xc1,0xfc,0x36,0x72,0x75,0xce,0x4e,
    0x6a,0x24,0xc3,0x5e,0xc9,0x04,0xff,0x17,0x6a,0x78,0xb3,0xdc,0x2e,0xb7,0x86,0xbb,
    0xa8,0xa3,0x78,0xbd,0xbc,0xed,0xa5,0x56,0x2c,0xfa,0xfe,0x8b,0x39,0x5f,0x73,0x7e,
    0xe3,0x7d,0x2f,0xeb,0xa0,0xfe,0xbe,0xa2,0x7e,0x0f,0x93,0x63,0xfe,0x31,0xf6,0x89,
    0xe6,0x1f,0x47,0x33,0xeb,0xf8,0xb3,0xf4,0xa0,0x7c,0x1f,0x7b,0xae,0x93,0xfa,0x7d,
    0x9c,0xf7,0x84,0x8b,0xef,0xe7,0xbb,0x1a,0x9f,0x87,0x37,0x7f,0xa8,0xc8,0x1f,0x29,
    0xca,0xbf,0xc3,0x79,0x36,0x7e,0xac,0x88,0x1f,0x67,0xaf,0x18,0x3f,0x59,0xc4,0x4f,
    0xb1,0xc6,0xc6,0xcf,0x14,0xf1,0x8f,0xc5,0x6e,0x39,0x7e,0x16,0x7e,0x93,0xac,0x42,
    0x9c,0xf5,0x8f,0xc0,0x3e,0x09,0x92,0x0a,0xf3,0x26,0xe7,0xef,0xa8,0xb2,0xb0,0xa6,
    0x99,0xb0,0x2f,0x2b,0xc0,0x16,0xb9,0xef,0xd1,0xcf,0x59,0x59,0x0c,0xff,0xab,0x54,
    0xa8,0xe3,0x3e,0xaa,0x61,0x1f,0x76,0x12,0x53,0x0f,0x3e,0x2c,0x31,0xea,0x2f,0x21,
    0xaf,0x9e,0xbc,0x65,0x9c,0xd3,0x1a,0xf6,0x67,0x27,0x7b,0xb0,0x01,0xfc,0x85,0xc4,
    0x34,0x72,0xb7,0x34,0xb0,0x97,0x3e,0x4a,0xe7,0xcd,0xf4,0xf3,0x45,0xe2,0x57,0xb8,
    0x3b,0x4d,0xe7,0xd1,0xf7,0x03,0x92,0xa7,0x6b,0xb1,0x12,0x4d,0xfd,0xdd,0x60,0x7d,
    0x56,0x81,0x1f,0x14,0x2f,0x13,0x34,0x0a,0x98,0xc5,0x7d,0x96,0x1a,0x56,0x4b,0x9f,
    0xef,0x25,0x4a,0xe3,0xfe,0x27,0x26,0x45,0x4e,0x93,0x9b,0x61,0x35,0x33,0xb4,0xb8,
    0x19,0xd6,0x80,0xdb,0x0c,0x6b,0xc1,0x6c,0x86,0x56,0x37,0x83,0x72,0x39,0xb1,0x56,
    0x74,0x73,0x6e,0x86,0xf5,0x68,0xc7,0xdc,0x0c,0x1b,0xc0,0x6d,0x86,0x97,0x60,0x16,
    0xa7,0x33,0x58,0xad,0x56,0x37,0xc3,0x2b,0x62,0x9a,0xc9,0xc9,0xb9,0x19,0x36,0x31,
    0x43,0x9b,0x9b,0xe1,0x27,0x70,0x9b,0x61,0x33,0x98,0xcd,0xd0,0xe1,0x66,0x50,0xae,
    0x5d,0xac,0x03,0xdd,0x76,0xf6,0x91,0xea,0x6e,0x45,0xfb,0x95,0x3b,0xcf,0xda,0xa3,
    0xc5,0x76,0xb8,0x1e,0xdf,0x10,0xd7,0x4a,0x5e,0x3b,0xb1,0xdb,0x88,0xdd,0x46,0xac,
    0x9e,0xd1,0xd7,0x9c,0x05,0xcd,0x3f,0x24,0xb6,0x1d,0x4e,0xd7,0x68,0x8e,0xbd,0xa8,
    0xdc,0x11,0x38,0x9d,0x55,0xef,0x9d,0xdd,0xcc,0xda,0xc5,0xac,0x1a,0xbf,0x07,0x7c,
    0x8e,0x59,0xbb,0xa9,0xa1,0xf8,0x07,0x89,0xd9,0x41,0x0d,0x9b,0xb7,0x1b,0x7f,0x07,
    0x7d,0x6d,0xa7,0x96,0xde,0x4d,0xfb,0xb9,0x97,0x4e,0xd1,0x67,0x0f,0xd8,0x1b,0xfa,
    0x9d,0x0b,0x67,0x34,0x15,0xb8,0x43,0xcc,0xd1,0x03,0x96,0xa6,0xdf,0x39,0xee,0x32,
    0x3f,0xbb,0x6a,0x5d,0xe5,0xac,0x1e,0x25,0x4f,0x67,0xd2,0x7b,0xed,0x04,0x33,0x1d,
    0xa3,0x0f,0xbd,0xe3,0x4e,0x82,0xff,0x23,0x31,0x0b,0x43,0x3f,0x85,0x3c,0xc5,0x4b,
    0x45,0x49,0xb1,0xd3,0xee,0x9e,0x55,0xfe,0x0a,0xf7,0xfa,0x19,0x38,0x5b,0xb3,0x73,
    0xd4,0x3f,0xeb,0xd6,0xec,0x3c,0xf8,0x3b,0xfa,0xbe,0x00,0x76,0xd8,0xed,0x99,0x8b,
    0xe0,0xb5,0xec,0x99,0x5e,0xb7,0x86,0xca,0x5d,0x12,0xeb,0x65,0x3e,0x7d,0xff,0x59,
    0x62,0x2e,0xa3,0xaf,0xb3,0x1b,0xd7,0xeb,0x74,0x7e,0x47,0xa7,0xdf,0xe9,0x5c,0x05,
    0x37,0x9d,0x01,0xa7,0xa3,0xdc,0x35,0xb1,0x01,0x6a,0x5d,0x43,0x27,0xef,0x74,0x8c,
    0x1b,0x70,0x3a,0x7f,0xa2,0xd3,0xe5,0x74,0xfe,0x02,0x37,0x9d,0x41,0xa7,0xa3,0xdc,
    0x75,0xb1,0x41,0x6a,0x5d,0x47,0x67,0xc8,0xe9,0x18,0x37,0xe8,0x74,0x6e,0xa2,0xd3,
    0xe2,0x74,0x6e,0x81,0x9b,0xce,0xb0,0xd3,0x51,0xee,0x76,0xb8,0x57,0x0b,0xb5,0x6e,
    0xa3,0x33,0xe2,0x74,0x8c,0x1b,0x76,0x3a,0x77,0xd1,0xb9,0xe3,0x74,0xfe,0x06,0x37,
    0x9d,0x51,0xa7,0xa3,0xdc,0x3d,0xb1,0x51,0x6a,0xdd,0x43,0x67,0xcc,0xe9,0x18,0x37,
    0xea,0x74,0xee,0xa3,0x33,0xee,0x74,0x1e,0x80,0x9b,0xce,0x84,0xd3,0x51,0xee,0xa1,
    0xd8,0x04,0xb5,0x1e,0xa2,0x33,0xe9,0x74,0x8c,0x9b,0x70,0x3a,0xff,0xa2,0x33,0xe5,
    0x74,0xfe,0x03,0x37,0x9d,0x69,0xa7,0xa3,0xdc,0x23,0xb1,0x69,0x6a,0x3d,0x42,0x67,
    0xc6,0xe9,0x18,0x37,0xed,0x74,0x9e,0xa0,0xf3,0xd8,0xe9,0x3c,0x05,0x37,0x9d,0xe7,
    0x4e,0x47,0xb9,0x67,0x62,0xcf,0xa9,0xf5,0x0c,0x9d,0x59,0xa7,0x63,0x9c,0x3e,0xbf,
    0xca,0xe9,0xdb,0x2c,0xf6,0x0d,0xd4,0x4d,0x5c,0xb9,0xb4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMS color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
