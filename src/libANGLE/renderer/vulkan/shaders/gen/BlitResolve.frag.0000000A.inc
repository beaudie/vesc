// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x95,0x57,
    0x10,0xc5,0xf7,0xb9,0xd3,0x23,0x20,0x72,0x2d,0xa9,0x17,0x0a,0x24,0x1a,0xd4,0x03,
    0x69,0x8b,0x0a,0x2d,0xc6,0x5b,0x22,0x6d,0x51,0x5b,0x89,0xd1,0x54,0xdb,0xaa,0x55,
    0x0b,0x26,0xa2,0x72,0x9a,0xa8,0x90,0xb4,0x0a,0x0f,0x56,0x21,0xc6,0x0b,0x3c,0x78,
    0x81,0x07,0x5b,0xe4,0xc1,0x44,0xa5,0xaf,0xf6,0xdd,0xbf,0xc8,0x56,0x9b,0x34,0x71,
    0x66,0x9f,0xdf,0xe0,0xe4,0x90,0x0c,0xdf,0x37,0x6b,0xcd,0x9e,0x35,0x6b,0x9f,0xfd,
    0xed,0x54,0xb2,0x2d,0x17,0x42,0x22,0xe4,0x43,0x45,0xf8,0x3b,0x94,0xfe,0x56,0x85,
    0xa4,0x20,0x21,0xac,0x08,0xd9,0xf8,0xdc,0x3b,0x30,0x38,0x50,0x28,0xfe,0x72,0xaa,
    0xf0,0x59,0x77,0x97,0xf2,0xd5,0x21,0x15,0xeb,0x94,0x5b,0x29,0x59,0x5a,0x9e,0x1a,
    0xe7,0x4e,0x0c,0x8f,0x28,0x5e,0x25,0x71,0x56,0xa2,0x28,0x31,0x2e,0x31,0x29,0x31,
    0x2d,0x31,0x2b,0x31,0x2f,0xb1,0x28,0x51,0x23,0x3d,0x74,0x4d,0x4e,0xfb,0xcb,0x5b,
    0x55,0xd4,0xd3,0x7e,0x21,0xf4,0x87,0x4c,0xa8,0x63,0x96,0x36,0x9e,0x86,0x25,0xc0,
    0x2a,0x1c,0x96,0x04,0xab,0x71,0x58,0x0a,0xec,0x43,0x87,0xa5,0xc1,0x56,0x3b,0x2c,
    0x03,0xd6,0xe2,0xb0,0x2c,0x58,0xbb,0xc3,0x72,0x60,0x1b,0x1c,0x56,0x01,0xb6,0xc9,
    0x61,0x1f,0x80,0x75,0x45,0x5f,0xa9,0xe5,0xf9,0xd4,0xe3,0x01,0x79,0xb6,0xe2,0xc7,
    0xf2,0x8f,0x5d,0xae,0x7b,0xb6,0xd6,0xe5,0x45,0xf2,0x04,0xf9,0x38,0xb9,0xf5,0x9b,
    0x24,0x4f,0x91,0x4f,0x93,0xa7,0xc9,0x67,0xc9,0x33,0xe4,0xf3,0xe4,0x59,0xf2,0x45,
    0x72,0xf5,0x56,0x27,0x5d,0x93,0x71,0x9e,0x54,0xec,0xa7,0xef,0x0d,0x52,0x93,0x65,
    0x6f,0x74,0x86,0x26,0xc9,0x73,0xac,0x57,0xbe,0x51,0x2a,0xf3,0xf0,0xca,0xe9,0xef,
    0x97,0x47,0xbf,0x45,0xfe,0x57,0xb2,0x4e,0xf1,0xcf,0xc9,0xab,0x5c,0xaf,0x6a,0xea,
    0x4d,0xab,0x96,0x5e,0x21,0xce,0x55,0xb9,0xbc,0xef,0xd5,0x44,0x96,0xc8,0xf3,0xac,
    0x75,0xa1,0x7a,0xf5,0xec,0x7f,0x1d,0x7a,0xf5,0xb1,0x6f,0x09,0xdb,0x88,0x97,0x46,
    0xfa,0x6b,0x7d,0x13,0x5c,0xce,0xf1,0xab,0xc9,0x95,0x5f,0x03,0xaf,0xfd,0xeb,0x65,
    0xca,0x16,0xea,0x6a,0xdd,0xef,0x66,0xeb,0x3a,0x38,0x0f,0xc6,0x77,0xe1,0xd3,0xf8,
    0x6e,0x7a,0xa9,0xef,0x3e,0x7a,0xa6,0xe3,0xd9,0xc9,0xc5,0x7c,0x07,0x3d,0x2d,0xba,
    0xdc,0xda,0x7e,0xb7,0xa7,0x5f,0xd2,0x47,0xf1,0x66,0x79,0xdb,0x47,0xaf,0x44,0x78,
    0xff,0x97,0x70,0xb9,0xae,0xd9,0xcf,0xfb,0x3e,0xf6,0x45,0xf3,0x03,0x65,0xf3,0x1f,
    0x2e,0x9b,0xf7,0x28,0xe7,0x46,0xd7,0x1f,0x43,0x33,0xef,0xf8,0x93,0xcc,0xa0,0xfc,
    0x30,0x67,0xb0,0x8f,0xfe,0xc3,0x7c,0xff,0x29,0x57,0x3f,0xc2,0xef,0x6c,0x7c,0x11,
    0xde,0xf2,0xf1,0xb2,0x7c,0xb2,0x6c,0xfd,0x75,0xbe,0x6f,0xe3,0xa7,0xcb,0xf8,0xdb,
    0x9c,0x1d,0xe3,0x67,0xcb,0xf8,0xfb,0xec,0xb1,0xf1,0xf3,0x65,0xfc,0x63,0x89,0xab,
    0x8e,0x5f,0x84,0xdf,0x22,0xbb,0x90,0x64,0xff,0x03,0xd8,0x1b,0x41,0x32,0xd1,0x6f,
    0x7a,0xf9,0xce,0xaa,0x8a,0x7b,0x9a,0x8b,0xe7,0xb4,0x06,0x6c,0xa5,0xfb,0x3d,0x46,
    0xf8,0x76,0x56,0xc1,0xef,0x94,0x0e,0x4d,0xdc,0x4f,0x0d,0x9c,0xcb,0x3e,0x6a,0x9a,
    0xc1,0x27,0xa4,0x46,0xf3,0x8f,0x58,0xd7,0xcc,0xba,0x35,0x7c,0xb7,0x0d,0x9c,0xd7,
    0x3e,0xce,0xdc,0x3a,0xf0,0xa7,0x52,0xd3,0xc2,0x5d,0xb3,0x8e,0xf3,0xf4,0xaf,0x4c,
    0xde,0xce,0x3c,0xff,0x49,0x7d,0xab,0xbb,0xe3,0xd4,0x8f,0xbe,0x7f,0x2b,0xeb,0x74,
    0x2f,0xd6,0xa3,0xa9,0x7f,0xbf,0xb2,0x3f,0x1b,0xc0,0x0f,0x4a,0x96,0x8b,0x1a,0x25,
    0xcc,0xea,0xde,0x4a,0x0f,0xeb,0xa5,0xcf,0xd7,0x52,0xa5,0x75,0xcf,0xa9,0xc9,0xb0,
    0xa6,0xcd,0x79,0xd8,0x88,0x87,0x0e,0xe7,0x61,0x13,0xb8,0x79,0xd8,0x0c,0x66,0x1e,
    0x3a,0x9d,0x07,0xe5,0x0a,0x12,0x9d,0xe8,0x16,0x9c,0x87,0x4f,0xd0,0x4e,0x38,0x0f,
    0x9f,0x82,0x9b,0x87,0x67,0x60,0x56,0xa7,0x1e,0xac,0x57,0xa7,0xf3,0xf0,0x82,0x9a,
    0x76,0xd6,0x14,0x9c,0x87,0x2d,0x78,0xe8,0x76,0x1e,0xb6,0x82,0x9b,0x87,0x6d,0x60,
    0xe6,0xa1,0xd7,0x79,0x50,0xae,0x47,0xa2,0x17,0xdd,0x1e,0xce,0x91,0xea,0x7e,0x81,
    0xf6,0x0b,0xf7,0x3d,0xeb,0x8c,0x56,0xdb,0xeb,0x66,0x7c,0x49,0x5d,0x27,0xeb,0x7a,
    0xa8,0xdd,0x45,0xed,0x2e,0x6a,0xf5,0x1b,0xfd,0x8b,0x6f,0x41,0xd7,0x1f,0x92,0xd8,
    0x0d,0xa7,0x7b,0xb4,0xc4,0x59,0x54,0xee,0x08,0x9c,0x7a,0xd5,0x7b,0xe7,0x2b,0xbc,
    0xf6,0xe3,0x55,0xeb,0xbf,0x06,0x5f,0xc2,0xeb,0x00,0x3d,0x14,0xff,0x47,0x6a,0xf6,
    0xd0,0xc3,0xfc,0x0e,0x90,0xef,0x61,0xae,0xdd,0xf4,0xd2,0xbb,0xe9,0x1b,0xee,0xa5,
    0x1f,0x99,0x73,0x10,0xec,0x25,0xf3,0x2e,0xc5,0x6f,0x34,0x13,0xb9,0x43,0xf8,0x18,
    0x04,0xcb,0x32,0xef,0x12,0x77,0x99,0xf7,0xae,0x5a,0x17,0xf8,0x56,0xbf,0x63,0x9d,
    0x7a,0xd2,0x7b,0xed,0x7b,0x3c,0x1d,0x65,0x0e,0xbd,0xe3,0x7e,0x00,0xbf,0x25,0x35,
    0x2b,0xe2,0x3c,0xa5,0x75,0x8a,0x57,0x8a,0x92,0x62,0xc7,0xdd,0x3d,0xab,0xfc,0x39,
    0xee,0xf5,0x13,0x70,0xb6,0x67,0x3f,0xd1,0xff,0xa4,0xdb,0xb3,0x53,0xe0,0xaf,0x98,
    0xfb,0x34,0xd8,0x61,0x77,0x66,0xce,0x80,0x37,0x72,0x66,0x86,0xdc,0x1e,0x2a,0xf7,
    0xb3,0xc4,0x10,0xfe,0xf4,0x7d,0xbb,0xd4,0x9c,0x45,0x5f,0xbd,0x1b,0x37,0xe4,0x74,
    0xce,0xa3,0x33,0xe2,0x74,0x2e,0x80,0x9b,0xce,0xa8,0xd3,0x51,0xee,0xa2,0xc4,0x28,
    0xbd,0x2e,0xa2,0x53,0x74,0x3a,0xc6,0x8d,0x3a,0x9d,0x4b,0xe8,0xf4,0x3b,0x9d,0xcb,
    0xe0,0xa6,0x33,0xe6,0x74,0x94,0xbb,0x22,0x31,0x46,0xaf,0x2b,0xe8,0x8c,0x3b,0x1d,
    0xe3,0xc6,0x9c,0xce,0x6f,0xe8,0x74,0x38,0x9d,0xab,0xe0,0xa6,0x33,0xe1,0x74,0x94,
    0xbb,0x16,0xef,0xd5,0x52,0xaf,0x6b,0xe8,0x4c,0x3a,0x1d,0xe3,0x26,0x9c,0xce,0xef,
    0xe8,0x5c,0x77,0x3a,0x37,0xc0,0x4d,0x67,0xca,0xe9,0x28,0x77,0x53,0x62,0x8a,0x5e,
    0x37,0xd1,0x99,0x76,0x3a,0xc6,0x4d,0x39,0x9d,0x3b,0xe8,0xdc,0x76,0x3a,0x77,0xc1,
    0x4d,0x67,0xc6,0xe9,0x28,0x77,0x4f,0x62,0x86,0x5e,0xf7,0xd0,0x99,0x75,0x3a,0xc6,
    0xcd,0x38,0x9d,0x07,0xe8,0xdc,0x77,0x3a,0x0f,0xc1,0x4d,0x67,0xce,0xe9,0x28,0xf7,
    0x48,0x62,0x8e,0x5e,0x8f,0xd0,0x99,0x77,0x3a,0xc6,0xcd,0x39,0x9d,0x3f,0xd0,0x79,
    0xec,0x74,0xfe,0x04,0x37,0x9d,0x27,0x4e,0x47,0xb9,0x05,0x89,0x27,0xf4,0x5a,0x40,
    0x67,0xd1,0xe9,0x18,0xa7,0xcf,0xff,0xe5,0xeb,0xdb,0x26,0xf1,0x0e,0x29,0x14,0x4c,
    0xf6,0xc4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform utexture2DMS color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             uvec4 colorValue = uvec4(0, 0, 0, 1);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
