// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0xd4,0x55,
    0x14,0xc7,0x7f,0xbb,0x0b,0x2c,0x82,0x3c,0x04,0x94,0x50,0xb1,0x44,0xe9,0x21,0x86,
    0x58,0x60,0x24,0x60,0x92,0x91,0x48,0x18,0x19,0xd8,0xc3,0x34,0xa0,0xc4,0x32,0x11,
    0x53,0xa1,0xcc,0x48,0x05,0x4d,0xad,0xa4,0x7c,0xf4,0x12,0x2b,0xd1,0x4a,0x7c,0xfd,
    0x1f,0xfd,0x45,0x4d,0x8f,0x99,0x66,0xba,0xe7,0xb7,0x9f,0xc3,0x7c,0xdb,0xb1,0x62,
    0xe6,0xce,0xee,0xf9,0x9c,0x73,0xcf,0xfd,0x9e,0x73,0x1f,0x4b,0x2a,0xb9,0x22,0x1d,
    0xa5,0x12,0x51,0x41,0x94,0x1f,0xdd,0x8d,0x32,0x7f,0x0b,0xa2,0x64,0x94,0x08,0x9f,
    0x85,0x51,0x5e,0xfc,0xb9,0xb9,0xbb,0xb7,0xbb,0xfe,0xf0,0xe8,0xee,0xfa,0xc6,0xa6,
    0x06,0xf3,0x17,0x47,0xa9,0x38,0xce,0x7c,0x25,0x51,0x3a,0xca,0x09,0x9f,0x36,0xf6,
    0x0f,0xee,0x1d,0x31,0x5e,0x14,0xc6,0xed,0x30,0x4a,0x43,0x9c,0xf1,0xb4,0xe5,0x08,
    0xdf,0x8a,0xe2,0x9c,0x36,0x27,0x8a,0x3a,0xa3,0xdc,0xa8,0x9c,0xf5,0x56,0xf0,0xe9,
    0x2c,0x01,0xcb,0x17,0x96,0x84,0x95,0x0a,0x4b,0xc1,0x2a,0x84,0xe5,0xc0,0xee,0x13,
    0x96,0x0b,0x5b,0x2a,0x2c,0x0f,0xf6,0x80,0xb0,0x34,0x6c,0xa5,0xb0,0x7c,0xd8,0xc3,
    0xc2,0xe6,0xc1,0x56,0x0b,0x2b,0x80,0x35,0x08,0x2b,0x84,0x35,0x0a,0x9b,0x0f,0x6b,
    0x16,0x56,0x04,0x6b,0x8d,0xfb,0x94,0x9a,0xab,0xd7,0x7a,0xb6,0x29,0x7c,0xd6,0xd0,
    0x1f,0xb7,0x97,0x8b,0x6d,0x7d,0x5e,0x86,0x5d,0x1e,0x66,0x25,0x63,0x7f,0x2a,0xee,
    0x8d,0x7d,0x5f,0x18,0x62,0xf2,0xa8,0xd3,0xfa,0x5a,0x19,0xec,0x34,0xf5,0x27,0x63,
    0x9e,0x13,0xd7,0x98,0x66,0x2c,0x0a,0x33,0x0b,0x88,0xb7,0xd8,0x42,0x6a,0xcb,0x21,
    0x76,0x3e,0x79,0x8c,0xb7,0x60,0x17,0x49,0xee,0x62,0xe2,0x7d,0xed,0x32,0x72,0x45,
    0xb1,0xce,0xd2,0xb9,0x3e,0xbb,0x06,0x1b,0x65,0xff,0x33,0x3c,0xc6,0xd6,0xaf,0xa0,
    0xff,0xe5,0xac,0x5f,0x11,0xaf,0x93,0x61,0x75,0xd4,0xba,0x08,0x3d,0x16,0x5f,0x89,
    0x2f,0x2d,0xfe,0x6a,0xa9,0x67,0x19,0xfe,0xb2,0xf8,0x1c,0x25,0xe3,0xde,0xd6,0xa1,
    0xdb,0xfb,0x6e,0x71,0x0f,0x8a,0x66,0xcf,0x53,0xc7,0xd9,0xf2,0xf8,0xb5,0xac,0xeb,
    0xfe,0x75,0xf4,0xc6,0xfa,0xb2,0x81,0x35,0x7c,0xdd,0xa7,0xc8,0x67,0xbc,0x2a,0x28,
    0x68,0xc7,0x9f,0x88,0xfe,0xf9,0x97,0x10,0x0d,0x4f,0xf3,0xbd,0x9d,0xda,0xcd,0xde,
    0x04,0xf3,0x35,0x3b,0xb2,0xec,0x2e,0xd9,0xe7,0xe7,0xa8,0x55,0x6b,0xe8,0x11,0xdb,
    0xd6,0xdf,0xce,0xbd,0xb2,0xf8,0x97,0xd0,0x58,0x46,0x0d,0xaf,0xf2,0x3d,0x25,0xf3,
    0x07,0xb3,0x7a,0x3b,0xce,0x9d,0xb1,0xf8,0x49,0xe2,0x93,0xe2,0x3f,0x9b,0xb5,0x57,
    0x97,0xb8,0x13,0xbe,0xfe,0x35,0xd1,0x7b,0x8b,0xb5,0x36,0x50,0xef,0x2d,0xde,0x95,
    0x54,0xdc,0xdb,0xdc,0x38,0x2e,0x87,0x7a,0x8d,0xfd,0x1e,0x48,0x2e,0xb1,0xf9,0xb2,
    0xef,0x6e,0x2f,0x11,0xdb,0xfa,0xbf,0x31,0xcb,0x1e,0x13,0xdb,0xf6,0xfb,0x22,0x76,
    0x1b,0xf7,0xa0,0x84,0xfd,0xec,0x09,0xb4,0x98,0xb7,0xa8,0x84,0xe1,0x7b,0x35,0xc2,
    0xfd,0x5a,0x80,0xbf,0x3d,0x28,0xaa,0xe4,0x3d,0x5a,0xc8,0xd9,0x6c,0x23,0xa6,0x0a,
    0x3e,0x19,0x62,0xcc,0x5e,0xcc,0xbc,0xaa,0xb8,0xe6,0x54,0xac,0x7f,0xb1,0xc4,0x2f,
    0xa5,0x26,0xf3,0x2d,0xc1,0xb6,0xfc,0x76,0x86,0xef,0x27,0x7f,0x35,0xf1,0x7e,0xef,
    0x8c,0xdf,0x09,0x31,0xcb,0xe5,0xbd,0xb3,0x73,0xfd,0x5b,0xc8,0x51,0x8b,0xee,0x3f,
    0x43,0xbc,0xbf,0x7b,0xb5,0xf4,0x71,0x25,0xb9,0xad,0x0f,0x0f,0xd1,0xbb,0x1a,0x72,
    0xe7,0xf1,0x1e,0x1a,0x3f,0x86,0xfd,0x08,0xcc,0xe7,0xac,0x92,0x39,0xa6,0x77,0x15,
    0x31,0x7f,0x84,0xdc,0xbe,0x46,0xad,0xe8,0x5f,0x8d,0xfe,0x3a,0xd1,0xff,0x28,0xdc,
    0xf5,0xd7,0xc3,0x5c,0x7f,0x83,0xe8,0x37,0xdf,0x1a,0xde,0x5f,0xcb,0xbd,0x46,0xb4,
    0x3c,0x86,0x96,0xb5,0xa2,0xff,0x71,0xb8,0xeb,0x6f,0x84,0xf9,0x9c,0x26,0x99,0x63,
    0xfa,0x9b,0x88,0x31,0xfd,0xbe,0x46,0x83,0xe8,0x7f,0x02,0xfd,0xeb,0x44,0x7f,0x33,
    0xdc,0xf5,0x3f,0x09,0x73,0xfd,0x2d,0xa2,0xdf,0x7c,0xeb,0xe3,0xb3,0x97,0xc9,0xbd,
    0x5e,0xf6,0xbd,0x15,0x2d,0x76,0xee,0x32,0xe7,0x31,0xc3,0x5a,0xe5,0x7d,0xf0,0x33,
    0xd1,0x86,0x46,0xcf,0xd3,0x42,0x1e,0x7b,0x33,0x9e,0xe1,0xbd,0xf0,0x33,0xf9,0x2c,
    0x9a,0x3b,0x64,0xad,0xcd,0x70,0xb7,0x3b,0x59,0xfb,0x04,0x67,0x74,0x0b,0x31,0x9d,
    0xe4,0xb1,0x37,0xa5,0x9b,0x3c,0x5d,0xd2,0xdf,0xad,0xf0,0xfe,0x30,0xcb,0xee,0xef,
    0xf3,0xac,0xbf,0x85,0xfb,0xbd,0x15,0xcd,0x1b,0xf1,0x79,0x1f,0x5f,0x20,0x57,0x8f,
    0xf4,0x71,0x1b,0xdc,0xfb,0xf8,0x22,0xcc,0xfb,0xd8,0x27,0x7d,0x34,0x5f,0x6f,0x18,
    0x03,0xd4,0xdf,0x4b,0x6e,0x7b,0xcb,0x5e,0xe6,0xce,0x6f,0x97,0xdc,0xaf,0xc0,0xdb,
    0x78,0xa3,0x77,0x10,0xd3,0x13,0x5e,0x0c,0x7b,0xef,0x5e,0x83,0xed,0x90,0x3b,0x9e,
    0x8c,0xf5,0xe4,0xc5,0xfe,0x9d,0xe4,0xf0,0x71,0x2a,0xac,0x65,0x7c,0x17,0x73,0x77,
    0x4a,0xee,0xd7,0xe7,0x72,0xcf,0x8b,0xed,0x7e,0xd8,0x2e,0xde,0xb1,0x5c,0xde,0xe2,
    0x94,0xf4,0xa6,0x9f,0xfd,0xec,0xa3,0x9e,0x01,0xe9,0xd5,0x1b,0xf4,0x6a,0x50,0xea,
    0x79,0x13,0xee,0xbd,0xda,0x0d,0xf3,0x5e,0xed,0x91,0x5e,0x99,0x6f,0x28,0x8c,0x3d,
    0xe4,0x1e,0x92,0x5e,0xbd,0x75,0x8f,0x5e,0xbd,0x0d,0xbf,0x4b,0xee,0xbd,0xb0,0x1a,
    0x34,0x7a,0x1e,0xfb,0xfc,0x35,0xec,0xbb,0xc5,0xbc,0x83,0x86,0x01,0xe2,0x87,0xd0,
    0x31,0x2c,0x3a,0x2c,0x66,0x5f,0x18,0xc3,0xcc,0xdf,0x27,0x3a,0xf6,0xdf,0x43,0xc7,
    0x08,0xdc,0xfb,0x7a,0x20,0x6b,0xcf,0xde,0x85,0x1d,0xf8,0x97,0x3d,0x3b,0x48,0x0e,
    0x1f,0xa7,0xd9,0xb3,0x43,0xcc,0x3d,0x28,0xb9,0x0f,0x67,0xed,0xd9,0x28,0xec,0xd0,
    0x7f,0xec,0xd9,0x28,0xfd,0xf0,0x7a,0x86,0xb3,0xf6,0xb0,0x4f,0xf2,0xbf,0x47,0xfe,
    0x6d,0x21,0x93,0xd5,0xf6,0x3e,0x2c,0x12,0x76,0x04,0x96,0x10,0xf6,0x01,0x2c,0x29,
    0xec,0x28,0x2c,0x15,0xd7,0x9a,0xb9,0x77,0x1f,0x92,0xf3,0x08,0x73,0x8e,0xa2,0x73,
    0x0c,0x9f,0x9f,0xa5,0x8f,0x38,0x4b,0xe3,0xd2,0xe7,0x63,0x70,0x3f,0x4b,0xc7,0x61,
    0x7e,0x96,0x26,0x64,0x0f,0x8f,0xc7,0x6f,0x44,0x14,0x9d,0xa1,0xc6,0x13,0x52,0xe3,
    0x49,0x7e,0x5b,0xed,0xfd,0x9a,0x8c,0xef,0x48,0x86,0x9d,0x94,0xdf,0x6e,0x8f,0xfd,
    0x78,0x2e,0x36,0xd3,0xef,0xd3,0xb0,0x53,0xd2,0xef,0xa4,0xf4,0x7b,0x8c,0x18,0xeb,
    0xef,0x04,0x6b,0x9f,0x91,0xba,0x3e,0xa1,0xae,0xb3,0x52,0xd7,0xa7,0x70,0xaf,0xeb,
    0x33,0x98,0xd7,0x35,0x25,0x75,0x99,0xef,0x5c,0x18,0x17,0xc8,0x7d,0x4e,0xce,0xe6,
    0xe7,0x68,0xd5,0xb3,0xf9,0x05,0xdc,0x63,0xce,0x13,0xe3,0xbf,0x83,0xe7,0x89,0x31,
    0xbd,0x53,0xe4,0xbc,0x20,0x6f,0xe9,0x97,0xe8,0xbd,0x24,0x6f,0xe9,0x57,0x70,0x9b,
    0x7f,0x11,0xdb,0x7d,0x5f,0xf3,0x7f,0xca,0x2f,0x61,0xbe,0xd9,0xdf,0xc0,0xba,0xa4,
    0xbe,0x6f,0xe1,0x1d,0xd4,0x37,0x2d,0xf5,0x99,0xef,0x72,0x18,0xd3,0x68,0xb9,0x2c,
    0xda,0xaf,0xa0,0xdd,0x7f,0x03,0xaf,0xc8,0x5d,0xf7,0xf8,0x69,0xd1,0xf2,0x5d,0x96,
    0x96,0xef,0x61,0xd5,0xa2,0xe5,0x07,0xb8,0x6b,0x99,0x11,0x2d,0xe6,0xbb,0x1a,0xc6,
    0x0c,0xb9,0xaf,0x8a,0x96,0xeb,0x68,0xb9,0x86,0x96,0xeb,0xa2,0xc5,0xe3,0x67,0x44,
    0xcb,0x8f,0x59,0x5a,0x7e,0x82,0x8d,0x8b,0x96,0x9f,0xe1,0xae,0x65,0x56,0xb4,0x98,
    0xef,0x46,0x18,0xb3,0xe4,0xbe,0x21,0x5a,0x6e,0xca,0xbe,0x9b,0x96,0x9b,0xf4,0xc8,
    0xb4,0x78,0xfc,0x6c,0xd6,0x1e,0x4f,0x65,0x9d,0xd1,0x09,0x39,0xf3,0x77,0xc8,0x67,
    0xb9,0x6e,0x63,0xff,0x15,0x6e,0x7b,0x73,0x18,0x7f,0x03,0xca,0x54,0xdc,0xd1,0xa0,
    0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
