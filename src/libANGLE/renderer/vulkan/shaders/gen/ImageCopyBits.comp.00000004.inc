// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x6d,0x68,0x96,0x65,
    0x14,0xbe,0xcf,0xfb,0xce,0xb7,0x96,0x7b,0x9d,0xd1,0x2a,0x82,0x5c,0x9b,0x5b,0xec,
    0x4b,0x87,0x30,0x7b,0x2b,0x46,0xb5,0xde,0x40,0x23,0xf7,0xa3,0xb5,0x7f,0x31,0xca,
    0xd4,0x15,0x3a,0x8a,0xc0,0xfd,0x68,0x15,0xe9,0x3e,0x08,0x57,0x90,0x20,0x15,0xb4,
    0xed,0x87,0x7f,0xca,0x30,0x25,0x4a,0x10,0x21,0x59,0xf4,0xaf,0xe8,0x57,0x60,0x60,
    0x20,0x95,0x35,0x9b,0xab,0x35,0x4c,0x27,0xcd,0x52,0xe8,0x9c,0xe7,0x5c,0xf7,0x76,
    0xf5,0xf0,0x08,0xb7,0xf7,0x7b,0xae,0xfb,0x7c,0x5e,0xe7,0x9c,0x47,0xf3,0xb9,0x86,
    0x9b,0x42,0x90,0x70,0x4b,0xb8,0x39,0xdc,0x90,0x90,0xfc,0xb9,0x35,0xe4,0x82,0xfd,
    0x5c,0x1d,0x0a,0xc9,0xbd,0xb5,0xbb,0xb7,0xbb,0x7d,0xef,0xe0,0xae,0xf6,0xcd,0xf7,
    0x6d,0xb2,0xf7,0x35,0x21,0x9f,0xe8,0xd9,0x5b,0xb5,0xea,0xac,0xd2,0xbb,0x42,0xcf,
    0x8b,0xcf,0xed,0x7e,0xc9,0xf0,0x7a,0x3d,0x6b,0x15,0xaf,0x48,0x7c,0x05,0xf5,0xec,
    0x27,0xf1,0xa5,0x68,0x7d,0xe2,0x3b,0x84,0xbb,0xf5,0x3c,0xae,0xd6,0xad,0x1e,0x36,
    0x34,0xe0,0x8e,0x98,0x00,0xab,0x22,0x2c,0x07,0x6c,0x2d,0x61,0x79,0x60,0xec,0xaf,
    0x02,0x58,0x1d,0x61,0xab,0x80,0x35,0x12,0x56,0x00,0xd6,0x9c,0xe4,0x96,0x5f,0x8e,
    0x61,0x79,0xf6,0xea,0xbd,0x1e,0x39,0x45,0xb9,0x9e,0xe4,0xfd,0xb0,0xaf,0x80,0xbf,
    0xe1,0x54,0x1d,0xe6,0x6f,0x18,0xf9,0x99,0xfe,0x68,0xca,0xdf,0x28,0xfc,0x45,0x5e,
    0xae,0x80,0x97,0xbb,0xf4,0xdc,0xa6,0x59,0xe4,0x92,0xf7,0x7c,0x62,0x6f,0xbf,0x6f,
    0x57,0x9d,0x02,0x6a,0x0a,0x90,0xab,0x20,0x9b,0x8f,0x3b,0x55,0x2e,0x82,0xaf,0x3c,
    0xe4,0x6a,0xe4,0x18,0xe5,0x1a,0xca,0xb9,0x4e,0xff,0xae,0x5b,0xee,0x63,0x08,0x9d,
    0x90,0x63,0x4e,0x77,0xa8,0x55,0x13,0xfc,0x9b,0xad,0x71,0xd4,0x44,0xbe,0x5a,0xe0,
    0xcb,0x72,0xab,0x0d,0x95,0x09,0x77,0xcd,0xc0,0x8a,0xb8,0xe3,0x69,0x41,0xbc,0x36,
    0xbd,0x2b,0xf5,0xb4,0x22,0x9e,0xc9,0x1b,0x80,0xb5,0xa1,0x9e,0x8d,0xe8,0x95,0xe9,
    0xb7,0xe3,0xad,0x80,0x77,0xbb,0x3b,0x90,0x5f,0xd4,0x2f,0xa1,0x9e,0xf8,0xde,0x09,
    0x7e,0xa2,0xdc,0x85,0x9c,0xa3,0x5c,0x26,0x7d,0xb3,0xdf,0x86,0x1a,0x2c,0x5e,0x37,
    0xe2,0x15,0x93,0x3e,0x54,0x86,0x1e,0xc4,0xc6,0x6a,0x2c,0xdf,0x39,0xf0,0x62,0x36,
    0x4f,0x01,0xeb,0x41,0x4d,0x26,0xf7,0xa6,0x72,0xe8,0x83,0x79,0x94,0xb7,0xc3,0x5b,
    0x94,0xfb,0xe1,0x3c,0xe6,0x34,0x84,0x58,0xeb,0x34,0xf3,0x38,0x67,0xb5,0x98,0xa7,
    0xfd,0x88,0x3b,0x82,0x3c,0x86,0x11,0xd7,0xe4,0x51,0x60,0xd1,0xcf,0x18,0xf2,0x30,
    0xfd,0x71,0xbc,0x15,0x20,0x4f,0x20,0x86,0xc9,0x35,0xfa,0x72,0x18,0xf8,0xcf,0xe0,
    0xa0,0x19,0x7d,0xfe,0x55,0xef,0xc3,0xc4,0xa1,0xf9,0x9d,0x4b,0x71,0x7a,0x19,0x3b,
    0xbe,0x41,0x25,0x9b,0xa5,0x2b,0xc0,0x2e,0xa3,0x5f,0x25,0xed,0x68,0x0e,0xbc,0x07,
    0xd8,0x2e,0x29,0x62,0x7d,0xfe,0x5b,0xa5,0x45,0xe0,0xff,0xea,0x6f,0xeb,0xdf,0x55,
    0xbc,0xdb,0xfd,0x10,0xe6,0xf8,0x47,0xcc,0xe6,0xcb,0x98,0xc5,0x9f,0x80,0x3d,0xaa,
    0x5e,0x2c,0xe7,0xf3,0x98,0xa5,0x31,0xd8,0x98,0xce,0x2f,0xc0,0xa7,0x55,0xc7,0xea,
    0x98,0x81,0x9d,0xe1,0x13,0xaa,0x63,0x75,0x5d,0x00,0x6e,0x79,0xcc,0x22,0x8f,0x7f,
    0xf4,0xcd,0xf0,0xdf,0xf4,0xcc,0x22,0x17,0xfb,0x7d,0x4d,0xef,0x45,0xc8,0xb3,0x88,
    0x6d,0x33,0xfa,0x3b,0x62,0xcf,0x21,0xb6,0x71,0xf2,0x07,0xf0,0xa3,0xaa,0x63,0x71,
    0xe6,0x81,0x95,0x11,0x6b,0x81,0x62,0xd9,0xdb,0x9f,0x7a,0x2e,0xc1,0xb7,0xfd,0x7e,
    0x1d,0xfb,0x5c,0x10,0xaf,0xb3,0x47,0xfd,0x98,0xdf,0x75,0x90,0x73,0x14,0xbf,0x56,
    0x3c,0xfe,0x46,0x8a,0x7f,0x8f,0x38,0x3e,0x06,0xbb,0x3a,0x71,0x5b,0xc3,0xa3,0xaf,
    0xf5,0xf0,0x25,0xe4,0xab,0x01,0xbe,0x4a,0xe4,0xab,0x51,0x1c,0x8f,0xbe,0xee,0x15,
    0xb7,0x6d,0x24,0x5f,0x4d,0xf0,0x15,0xc2,0x8a,0x5e,0x8b,0x38,0x5e,0x4e,0xe6,0xd6,
    0xb1,0x56,0x71,0xdc,0xf6,0xf2,0x4d,0x60,0x6d,0xe2,0x38,0xeb,0xb5,0x8b,0xe7,0x6c,
    0xb1,0x22,0xb6,0x49,0x1c,0x37,0x7d,0xcb,0xd7,0xf6,0xb5,0x03,0xf9,0x6e,0x43,0xbe,
    0xc6,0xd9,0x66,0x71,0xdc,0xec,0x4c,0x2e,0x89,0xf3,0x68,0xb8,0xe9,0xd8,0xae,0xde,
    0x2f,0xbe,0xa7,0x3b,0x54,0xc7,0xbe,0x8b,0x0f,0x8a,0x63,0x25,0x59,0xe1,0x62,0x35,
    0x7c,0x0f,0x11,0x17,0x55,0xe2,0x78,0xac,0xbb,0x28,0x6e,0x1b,0xa8,0x47,0x6b,0x80,
    0x09,0x61,0xd5,0xc0,0x72,0xc4,0xcf,0x23,0xe2,0xfe,0xfa,0x08,0x2b,0x8b,0xeb,0x6e,
    0x27,0x2e,0x1e,0x13,0xd7,0x2d,0x53,0x0f,0xb6,0x88,0xc7,0xe9,0x27,0xbd,0xad,0xe2,
    0xba,0x5b,0x88,0xb3,0x27,0xc4,0xf1,0x62,0x52,0x57,0x21,0xf9,0x0e,0xd4,0x88,0x7f,
    0x2b,0xc6,0xc0,0xe9,0xc3,0x3a,0x8f,0x86,0x99,0xae,0xcd,0xf8,0x02,0xe6,0xf0,0x12,
    0x66,0x75,0x4a,0xfe,0xbf,0x9f,0x4f,0x8b,0xbf,0xdb,0x1d,0xe7,0xb4,0x8f,0xe6,0xd4,
    0xbe,0x11,0xcf,0x88,0x63,0x01,0xf9,0x19,0xf6,0xac,0x38,0x3e,0x44,0x7a,0x3b,0xa0,
    0x27,0x84,0xed,0x04,0x66,0x5c,0x3d,0xa9,0x39,0x9b,0xff,0x5d,0xe2,0xf6,0xa6,0xbf,
    0x13,0x3d,0xb2,0x6f,0x58,0xbf,0xf8,0x77,0xa1,0x93,0x7a,0xf4,0xbc,0x38,0x3e,0x0e,
    0x0e,0x5e,0x10,0xc7,0xca,0xb4,0x8f,0xbb,0xc5,0xf1,0x2e,0xd4,0x38,0x20,0x2b,0xfb,
    0x68,0x6f,0x7b,0xf4,0x0c,0xa0,0xce,0x3d,0xe0,0x65,0x0a,0xf2,0x00,0xf5,0xff,0xc3,
    0x8c,0x7d,0xfc,0x28,0x63,0x1f,0x8f,0x88,0xe3,0xb1,0x7f,0x1f,0x8b,0xdb,0x1e,0x21,
    0x5f,0x47,0x33,0xf6,0xf1,0x93,0x8c,0x7d,0x3c,0x26,0x8e,0x47,0x5f,0xc7,0xc5,0x6d,
    0x8f,0x91,0xaf,0x4f,0x33,0xf6,0xf1,0x33,0x71,0xbc,0x8b,0x66,0xe6,0x73,0x71,0x9c,
    0xf7,0xf1,0x84,0x38,0xce,0xfb,0x78,0x52,0x3c,0xe7,0xe3,0x34,0x5b,0xa7,0xc4,0xf1,
    0x13,0xb4,0x8f,0x5f,0x64,0xec,0xe3,0x69,0x71,0x3c,0xee,0xe3,0x34,0xfa,0x7b,0x9a,
    0xf6,0xf1,0xcb,0xd4,0x3e,0x7e,0x25,0x8e,0x4d,0x93,0xdd,0xd7,0xe2,0x73,0xc0,0x76,
    0xdf,0xa4,0xec,0xbe,0x15,0xc7,0x4c,0x37,0xf6,0x7a,0x2f,0x7a,0xdd,0x89,0x5e,0x4f,
    0x52,0xaf,0xed,0x6d,0x50,0xcf,0x3e,0xf4,0x76,0x90,0x38,0x7c,0x45,0xdc,0x1f,0xef,
    0xf6,0x90,0x78,0x6e,0x8c,0xbd,0x0a,0x8c,0xf7,0xfd,0x35,0x60,0xbc,0xef,0xdf,0x89,
    0xfb,0xe4,0x7d,0x3f,0x23,0xae,0xcb,0xfb,0xfe,0xbd,0xb8,0xee,0x19,0xea,0xf1,0x59,
    0xf1,0x38,0xbc,0xef,0x3f,0x88,0xeb,0x9e,0xa5,0x9e,0x9c,0x13,0xc7,0x87,0x68,0xdf,
    0xdf,0xa0,0x7d,0x3f,0x85,0x7d,0x37,0xec,0x1c,0xe6,0x7a,0x12,0xb5,0xef,0x23,0xce,
    0x86,0xc1,0x59,0x07,0x38,0x9b,0x20,0xce,0xec,0x6d,0x44,0xcf,0x41,0xd8,0x8d,0x10,
    0x67,0x07,0x32,0xb8,0x18,0x27,0x2e,0x22,0xf6,0x56,0x06,0xb7,0x6f,0x03,0x13,0xe2,
    0xe7,0xbc,0x38,0xce,0x9c,0xcd,0x88,0xdb,0x33,0x67,0x17,0xc4,0x75,0x67,0x88,0xb3,
    0x8b,0xe2,0xb1,0x99,0xb3,0x39,0x71,0xdd,0x8b,0xc4,0xd9,0xbc,0x38,0x7e,0x80,0x38,
    0x7b,0x27,0x83,0x33,0xc3,0xe6,0xc1,0xd9,0x04,0x6a,0x3f,0x48,0xb5,0x1f,0xca,0xa8,
    0xf3,0xdd,0x8c,0x3a,0xdf,0xa3,0x3a,0x23,0xf6,0x3e,0x30,0x9e,0x97,0xbf,0xc4,0x71,
    0xae,0x7d,0x51,0xdc,0x9e,0x6b,0xbf,0x2a,0xae,0xbb,0x48,0xb5,0x2f,0x89,0xc7,0xe6,
    0xda,0xaf,0x89,0xeb,0x2e,0x51,0xed,0xd7,0xc5,0xf1,0x43,0x54,0xfb,0x07,0x19,0xb5,
    0x1b,0x76,0x3d,0x55,0xfb,0x44,0x6a,0x7e,0x26,0x53,0xdf,0xc9,0xa9,0xd4,0xbf,0x27,
    0x0b,0xa9,0xff,0x43,0xd9,0x7d,0x43,0x59,0x78,0x40,0xcf,0x7f,0xdc,0xdb,0x05,0xc9,
    0x8c,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(set = 0, binding = 0, rgba8ui)uniform uimage2DArray src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// uint makeUint(uvec4 v)
// {
//     return v . a * 0x1000000u + v . b * 0x10000u + v . g * 0x100u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 4;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 4;
//     uint pixelBytes = 3;
//
//     if(remainder == 3)
//     {
//         return;
//     }
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     uvec3 v1 = fetchSrc(srcCoord1);
//
//     if(remainder == 0)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . rgb, v1 . r));
//     }
//     else if(remainder == 1)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . gb, v1 . rg));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . b, v1 . rgb));
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
