// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/GenerateFragmentShadingRate.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kGenerateFragmentShadingRate_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x93,0xdd,0x4f,0x13,0x41,
    0x14,0xc5,0xa7,0xbb,0xcb,0x02,0xb6,0x58,0x2a,0x2b,0xa5,0x4b,0x29,0x5f,0x25,0xa8,
    0x45,0xd0,0x68,0x4d,0x85,0x28,0x28,0x9f,0x0f,0x3c,0x90,0xf8,0x17,0x18,0x7d,0xf1,
    0x41,0x5f,0xf4,0x91,0x3f,0xc8,0x27,0xff,0x3b,0xe3,0x57,0x4c,0x3c,0x77,0xf6,0x37,
    0x64,0xc4,0xba,0xc9,0xe4,0xf6,0x9e,0x39,0x77,0xce,0x99,0x3b,0xb7,0x69,0xb2,0x3e,
    0xe9,0x5c,0xcd,0xdd,0x70,0x53,0xee,0xcc,0x55,0x5f,0xcb,0x25,0x42,0xaa,0xf8,0x50,
    0xb1,0xee,0x72,0x9f,0x9f,0x9e,0xbf,0x3a,0xdf,0xfe,0xf8,0xe9,0xed,0xf6,0xe3,0xe1,
    0x03,0xe3,0xdd,0x74,0xa9,0xe7,0xdb,0x5e,0x53,0x9c,0x09,0xc5,0x4c,0xeb,0xfd,0xeb,
    0x77,0x1f,0x9c,0xaf,0x73,0x6e,0x56,0x78,0xe6,0xcf,0x72,0x6e,0x85,0xe5,0xcf,0x12,
    0x5a,0x87,0xd3,0xd5,0x3a,0x53,0x75,0x1b,0xfd,0x75,0x62,0xc0,0x6a,0x60,0x59,0x84,
    0x25,0x60,0x53,0x11,0x96,0x82,0x35,0x22,0x2c,0x03,0x9b,0x45,0xb3,0xa3,0x98,0x6b,
    0x15,0x70,0xca,0x31,0x9a,0xe5,0x18,0xcd,0x72,0x8c,0x66,0x39,0x46,0xb3,0xbc,0xa6,
    0x19,0xb0,0x09,0xb0,0x58,0x37,0x07,0x5b,0x88,0xb0,0x49,0xb0,0xae,0xf7,0x9b,0x5e,
    0xe9,0x9a,0xf7,0x5d,0xc5,0x35,0x7c,0x86,0x7c,0xf5,0x2a,0x4f,0x7d,0xde,0x61,0xef,
    0x98,0xde,0x5a,0x3e,0xa7,0x13,0x12,0xcf,0x4d,0xbd,0x5f,0xfb,0x7d,0x5b,0x9c,0x9c,
    0xf7,0xb0,0xaf,0xad,0x7c,0x1a,0x4f,0xa9,0xc7,0x33,0xcd,0x44,0xd5,0x07,0xc3,0xf7,
    0xc8,0xeb,0x60,0x03,0xea,0x1b,0xd4,0x1b,0x7f,0x86,0xbd,0x3c,0xda,0x6f,0x81,0x15,
    0x52,0xb5,0xbb,0xcf,0xeb,0xf4,0x79,0x74,0x7b,0xba,0x6d,0xdb,0x63,0xff,0xae,0x50,
    0xbf,0x80,0xdf,0x2e,0x6f,0xd7,0x06,0xeb,0xc9,0x4d,0xe8,0xe1,0xff,0x56,0x07,0x5f,
    0x8b,0xdc,0xa1,0xe4,0x1e,0x8b,0xf4,0x77,0x9a,0x3e,0x2c,0x45,0x73,0x39,0x20,0xef,
    0xa1,0x6b,0xf5,0xcb,0x70,0xf3,0x68,0x7f,0x93,0x3e,0x59,0xdf,0x76,0x14,0x97,0xe0,
    0x77,0xc4,0x1c,0xc1,0xad,0xb9,0xbf,0xbf,0x84,0x3a,0x3b,0xf3,0x29,0xd8,0x08,0x4f,
    0x96,0xef,0x82,0x05,0x8d,0xfd,0xe8,0x6d,0x0e,0xd0,0xc8,0xc8,0x5f,0xa2,0x91,0x45,
    0xbd,0x3a,0xe2,0x1e,0x5b,0xca,0xcc,0xef,0x31,0xd8,0x11,0xef,0xf0,0x44,0x33,0x96,
    0x50,0xe3,0xf0,0xff,0x5d,0x88,0xcd,0xe6,0x37,0x65,0x27,0xe0,0xbf,0xf4,0xbb,0xe1,
    0xe7,0xa8,0xda,0xb7,0xf8,0x42,0xac,0x19,0xff,0x9f,0xaf,0x66,0xc0,0xf6,0x9f,0xa1,
    0xdb,0x04,0x0f,0x9c,0x5b,0x70,0x5a,0x11,0x67,0x0e,0xdc,0x38,0xcb,0xf8,0xec,0xd2,
    0xe7,0xc0,0x59,0x05,0xff,0x22,0x4e,0xc1,0xac,0x37,0xc1,0x3f,0x8b,0x53,0xf0,0xdf,
    0x58,0xc3,0xef,0x06,0x7e,0x7f,0x6a,0xcf,0xf0,0xbe,0xd6,0x06,0x9e,0xfb,0x91,0xd6,
    0x1d,0xb4,0x36,0x23,0xad,0xbb,0xe0,0x41,0xeb,0x1e,0x1e,0x0d,0xff,0xa1,0xfa,0x70,
    0x8e,0xc5,0xaf,0x9a,0xd3,0xc2,0xf7,0xb9,0xd2,0x3e,0x85,0xdf,0xc7,0xc7,0xfd,0xc8,
    0xc7,0xc0,0xf7,0xdf,0x79,0xcc,0xea,0xb7,0x38,0xef,0x84,0xdc,0xf0,0x4b,0xde,0xf7,
    0x11,0xf7,0x0b,0xf9,0x10,0x0f,0x17,0xf2,0xb4,0xe3,0xdf,0xab,0xe2,0x0c,0xf1,0x5d,
    0xcd,0x4a,0x35,0x27,0xa1,0xe6,0x39,0x6f,0x71,0x21,0x8f,0x07,0xfe,0xce,0x15,0xb6,
    0x1f,0xad,0x4b,0xe6,0xe5,0x90,0xfd,0x37,0xca,0xf7,0x38,0xff,0xf0,0x9a,0x3f,0x8b,
    0xbf,0x35,0xb9,0x23,0xad,0x3f,0xad,0x30,0xf9,0xfe,0x1c,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// struct FocalPoint {
//     float focalX;
//     float focalY;
//     float gainX;
//     float gainY;
//     float foveaArea;
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint textureWidth;
//     uint textureHeight;
//     uint attachmentWidth;
//     uint attachmentHeight;
//     uint attachmentBlockWidth;
//     uint attachmentBlockHeight;
//     uint numOfFocalPoints;
//     FocalPoint focalPoints[2];
// } params;
//
// layout(binding = 0, r8ui)uniform writeonly uimage2D fragmentShadingRateImage;
// layout(local_size_x = 32, local_size_y = 32, local_size_z = 1)in;
//
// uint computeValue(ivec2 pos)
// {
//     float minPixelDensity = 0.0f;
//     float focalPointDensity = 0.0f;
//     float px =((float(pos . x)* params . attachmentBlockWidth)/ params . textureWidth - 0.5f)* 2.0f;
//     float py =((float(pos . y)* params . attachmentBlockHeight)/ params . textureHeight - 0.5f)* 2.0f;
//
//     for(uint point = 0;point < params . numOfFocalPoints;point ++)
//     {
//         float density = 1.0f / max(pow(params . focalPoints[point]. focalX - px, 2)*
//                                    pow(params . focalPoints[point]. gainX, 2)+
//                                    pow(params . focalPoints[point]. focalY - py, 2)*
//                                    pow(params . focalPoints[point]. gainY, 2)-
//                                    params . focalPoints[point]. foveaArea,
//                                    1.0f);
//
//         if(density > focalPointDensity)
//         {
//             focalPointDensity = density;
//         }
//     }
//     minPixelDensity = max(minPixelDensity, focalPointDensity);
//
//     uint val = 0;
//     if(minPixelDensity > 0.75f)
//     {
//
//         val = 0;
//     }
//     else if(minPixelDensity > 0.5f)
//     {
//
//         val =(1 << 2);
//     }
//     else
//     {
//
//         val =(1 << 2)| 1;
//     }
//     return val;
// }
//
// void main()
// {
//     uint i = gl_GlobalInvocationID . x;
//     uint j = gl_GlobalInvocationID . y;
//
//     if(i >= params . attachmentWidth || j >= params . attachmentHeight)
//     {
//         return;
//     }
//
//     ivec2 pos = ivec2(i, j);
//     uint val = 0;
//
//     imageStore(fragmentShadingRateImage, pos, ivec4(val, 0, 0, 0));
// }
