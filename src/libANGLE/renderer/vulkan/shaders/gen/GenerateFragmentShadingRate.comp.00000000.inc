// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/GenerateFragmentShadingRate.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kGenerateFragmentShadingRate_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x96,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xd7,0x3a,0xe7,0xf4,0x72,0xa4,0x39,0x05,0xa5,0x95,0x72,0xb6,0x2d,0xd2,
    0x34,0x42,0x39,0x01,0x0d,0x6a,0x9a,0x18,0x53,0x7d,0xaa,0x31,0x40,0x9a,0xf8,0xd0,
    0x67,0x53,0x5f,0x78,0x50,0x49,0xe4,0xb1,0x0f,0x18,0xd2,0xc0,0x03,0x17,0x8d,0xc6,
    0x4b,0x89,0x17,0xfa,0x60,0x0a,0x82,0x31,0x5e,0x80,0xf6,0x4f,0x50,0x51,0x51,0x12,
    0x15,0x15,0x84,0x44,0x21,0x1a,0x09,0x97,0x80,0x45,0x10,0x9d,0x59,0xfb,0x37,0x65,
    0xdc,0x36,0x9e,0x64,0x65,0xed,0xf9,0x66,0xd6,0x37,0xdf,0xac,0x35,0x7b,0xed,0x53,
    0x2e,0xf5,0xb6,0x84,0x10,0xc3,0x6d,0xa1,0x35,0xf4,0xc7,0x90,0x7e,0x8b,0x42,0x29,
    0x44,0xe6,0xfb,0x64,0x5e,0x10,0x9a,0x93,0x3d,0xb4,0xee,0x89,0x75,0xab,0x9f,0xdb,
    0xfc,0xd4,0xea,0xfb,0x1f,0xb8,0x57,0xe3,0x6a,0xa1,0x9c,0xe2,0xd5,0xd7,0x2e,0x31,
    0x4d,0x32,0x57,0x64,0x3c,0xfd,0xe4,0xc6,0x67,0x14,0xdf,0x25,0x63,0xa1,0xe0,0x95,
    0xc4,0x15,0xc2,0x32,0x86,0xc6,0x3f,0x26,0xd1,0x5d,0x79,0xba,0xd0,0xcb,0x6c,0x58,
    0x04,0xab,0x38,0xac,0x04,0xd6,0xea,0xb0,0x32,0x58,0x9b,0xc3,0x2a,0x60,0x0b,0x55,
    0xaf,0x58,0x75,0x99,0x9b,0x65,0x2c,0x26,0x26,0x9b,0x27,0x67,0x36,0x4f,0xce,0x6c,
    0x9e,0x9c,0xd9,0x3c,0x39,0xb3,0x42,0x4e,0xc3,0x9a,0xc0,0x7c,0xde,0x66,0xb0,0x25,
    0x0e,0x6b,0x01,0xcb,0x92,0xde,0xf2,0x5c,0x5e,0xd5,0xbe,0x2b,0xed,0xbd,0xf9,0x2a,
    0xe1,0x80,0xcc,0xcb,0xd1,0x6d,0xf6,0xdd,0x73,0x76,0x39,0xd9,0x5d,0xf8,0x8e,0xb0,
    0x56,0xed,0x3b,0x84,0xb1,0x94,0x62,0xcb,0x49,0xbf,0x3e,0x77,0x48,0x4c,0xb3,0x3b,
    0x8f,0x3b,0xc5,0x6e,0x41,0xa3,0xf9,0xab,0xf8,0xf5,0xd7,0x29,0x2b,0x6b,0xd8,0xab,
    0xc4,0x57,0xe3,0x4c,0x03,0x76,0x95,0x5a,0xf5,0xd7,0x2d,0x4c,0x5d,0xa9,0x3f,0xfe,
    0x3b,0x2c,0x76,0x29,0x79,0x32,0xce,0xa8,0x0b,0xac,0x5b,0x3a,0x51,0xeb,0xad,0xfe,
    0xcf,0xa8,0x27,0x1d,0x95,0x70,0x17,0xb6,0xc6,0x3f,0x84,0xdd,0x0d,0xb6,0x8a,0xfa,
    0x7a,0x38,0x1f,0x8d,0x5f,0xe6,0x38,0xcc,0xdf,0xe7,0x6a,0x50,0x7d,0xfd,0xb9,0x39,
    0x68,0x76,0x23,0xb7,0x1f,0x31,0xdd,0x6b,0xd8,0x2f,0x5b,0xbf,0x96,0xb3,0x36,0x7b,
    0xa0,0xe0,0x1f,0x9a,0xeb,0xbf,0x52,0x78,0xdc,0xe5,0x59,0x9f,0x68,0xb7,0x0c,0x5a,
    0xdc,0x06,0x7a,0x41,0x75,0x0e,0xa3,0xb1,0xe6,0x78,0x46,0xd8,0x2f,0xb3,0x47,0xe9,
    0x45,0xe3,0x1b,0xcb,0x65,0x0e,0x9a,0xce,0x71,0xea,0x36,0x7b,0x1b,0x3a,0xf5,0x9c,
    0x77,0xc0,0x5f,0x26,0xdf,0x4e,0x34,0xef,0x60,0x1f,0x77,0xf2,0xee,0x46,0xfc,0xbb,
    0x79,0xae,0xa6,0x73,0xaa,0x86,0xfd,0x3c,0x73,0x5d,0xcc,0xfd,0x54,0xdf,0x3d,0xac,
    0x79,0x17,0x6c,0x3f,0x9c,0x6a,0x1f,0x00,0x53,0x0d,0x1f,0xb2,0x2f,0x15,0xec,0x8f,
    0xe1,0xf4,0x9a,0x0f,0xd3,0x6f,0x0d,0x89,0x54,0x6d,0x47,0xc0,0x0e,0x73,0x0e,0x0f,
    0x4a,0x45,0x25,0xd6,0x04,0xea,0x99,0x15,0x44,0xeb,0xfc,0x43,0xac,0x69,0xf0,0xeb,
    0xf2,0xac,0xbd,0x39,0x83,0x5f,0xe7,0x47,0x25,0x4a,0xeb,0x7a,0x81,0x5a,0xd5,0xff,
    0x30,0x79,0x5f,0x04,0xb7,0x98,0x97,0x88,0x59,0xe3,0x62,0x5e,0x06,0xd7,0x18,0xd5,
    0xf8,0x0a,0xbd,0x37,0xe2,0x62,0x5e,0x05,0x7f,0x4f,0x62,0xf4,0xec,0x5f,0x83,0x5b,
    0xf1,0x29,0x89,0x51,0xec,0x75,0x70,0xd5,0xbb,0x07,0xbd,0x7f,0x8a,0x4f,0xf1,0x09,
    0x19,0x7b,0xd0,0x3c,0xe1,0x72,0xbd,0x41,0xae,0x51,0x97,0xeb,0x4d,0x70,0xcb,0xf5,
    0x16,0x1a,0x15,0xbf,0x26,0xeb,0x8d,0x47,0xe7,0x2b,0xd2,0x69,0x1a,0xf3,0x36,0xb9,
    0x67,0x88,0x9f,0x40,0xc7,0xa4,0xd3,0xa1,0x31,0x7b,0x65,0x4c,0xb2,0x7e,0x2f,0x7c,
    0xd3,0xd8,0x93,0xa9,0xf7,0xf2,0x9e,0x7c,0x87,0xfa,0xcc,0x9e,0x42,0xc3,0xb0,0x68,
    0xd2,0xde,0xde,0x47,0xcc,0x14,0xba,0xb5,0x37,0x0e,0xd2,0x17,0xcf,0xd2,0xc7,0x9f,
    0x10,0x63,0xb5,0x7e,0x4a,0xad,0x3d,0xae,0xd6,0xcf,0xc0,0x37,0xb1,0xe6,0x28,0xd8,
    0xb8,0xac,0x51,0xfb,0x73,0x78,0x8e,0x3a,0x9e,0x2f,0xe0,0xe9,0x73,0x3c,0x5f,0x82,
    0x1b,0xcf,0x31,0xb0,0xed,0xf0,0x7c,0x05,0x97,0xe2,0x5b,0xc1,0xbe,0x06,0xef,0x77,
    0xf9,0x8e,0x83,0x37,0x5c,0x1d,0xdf,0x50,0xa7,0xe5,0xff,0x96,0xfc,0x6b,0x5d,0xfe,
    0xef,0xc0,0x2d,0xff,0x09,0x30,0xe3,0xfd,0x1e,0x9e,0x13,0x8e,0xe7,0x07,0x78,0x06,
    0x1c,0xcf,0x8f,0xe0,0xc6,0x73,0x12,0xcc,0xea,0x38,0x05,0xd7,0x49,0x57,0xc7,0x4f,
    0xe0,0xbe,0x8e,0xd3,0xe0,0x0d,0xce,0xf8,0x0c,0x67,0x7c,0x86,0x9e,0xd1,0x98,0xe5,
    0x31,0xbf,0xf7,0xf5,0xdc,0x57,0xc8,0x73,0x5b,0xcc,0x7d,0xe9,0x5b,0x11,0xf3,0xf7,
    0x48,0x7d,0x35,0x7c,0xa6,0xfb,0x67,0x74,0x0f,0x39,0xdd,0xbf,0x80,0xbf,0x4f,0xcf,
    0x9e,0x85,0x43,0xf1,0xab,0x12,0xd3,0x0e,0x87,0xf5,0xa2,0xfa,0xcf,0xe9,0x7f,0x8d,
    0x98,0xeb,0x3a,0x97,0xf6,0xa5,0x25,0xdd,0x97,0xbf,0xc2,0xbf,0x01,0x0e,0x3b,0x67,
    0xd5,0xfc,0x1b,0x7e,0xab,0xfd,0x77,0xb0,0xe3,0xe9,0x3b,0x9e,0xd7,0x75,0x9e,0xfb,
    0x6c,0x29,0xfe,0x86,0xe3,0xbe,0x50,0xe0,0x1e,0x71,0xdc,0x17,0xf1,0x1b,0xcf,0x25,
    0xc7,0x73,0x11,0x1e,0xdb,0xdf,0xcb,0xe4,0xb9,0xe4,0xb8,0xaf,0x14,0xb8,0x07,0x1c,
    0xf7,0x55,0xfc,0xa6,0x7b,0x16,0xec,0xb4,0xcb,0x77,0xcd,0xe5,0x9b,0x2d,0xe8,0xbe,
    0x5e,0xe0,0x1e,0x75,0xdc,0x37,0xf0,0x1b,0xcf,0x5f,0x8e,0xe7,0x46,0x41,0xf7,0x4d,
    0xf2,0x68,0xcc,0xf3,0x60,0x7f,0x53,0xcf,0x4d,0x97,0x2f,0xc6,0x7f,0xe7,0xeb,0x71,
    0xf9,0x4a,0x31,0xf7,0x5b,0x2d,0xe5,0x98,0x73,0x28,0x6e,0x1a,0x2a,0x31,0xd7,0xb0,
    0x02,0xff,0x7a,0xd7,0xc3,0x4d,0xd8,0x1a,0x33,0x43,0xbf,0xb4,0xc6,0x1c,0xd7,0x9e,
    0xd4,0x7e,0x5d,0x40,0x5f,0xe8,0xbc,0x4f,0x6e,0xa0,0x1a,0x3d,0x5a,0x8c,0x6b,0x23,
    0x4e,0xe7,0x2d,0xc2,0x55,0xa5,0x5f,0x6d,0xff,0x7d,0xef,0xb7,0x3b,0x7d,0xb7,0x3b,
    0x7d,0x8b,0x78,0x17,0x4c,0xcb,0xe2,0x98,0xfb,0xc7,0xb8,0x43,0x33,0xd7,0xb7,0xea,
    0xeb,0x90,0xd1,0x49,0xde,0x0e,0x74,0x64,0xd8,0x9d,0x8e,0x67,0x09,0x3c,0xfd,0xe8,
    0xa8,0x13,0x53,0xa7,0x26,0xd5,0xba,0x32,0xe6,0x71,0xe3,0x7c,0xd7,0x3d,0x57,0xe6,
    0xde,0xc7,0x5e,0xde,0x47,0xcd,0xa7,0x6b,0xea,0xf1,0xd6,0xdd,0xfc,0x01,0xfe,0x61,
    0x89,0xd5,0x6f,0xf1,0x47,0x60,0x7d,0x6e,0x8c,0xf1,0x5d,0x3e,0x84,0x7f,0x54,0xec,
    0x83,0xdc,0xe3,0x87,0x0a,0xdf,0x81,0xe9,0xd4,0x1f,0x51,0xf6,0x2f,0x86,0x7f,0x00,
    0xa0,0x74,0x6b,0xb0,0x54,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// struct FocalPoint {
//     float focalX;
//     float focalY;
//     float gainX;
//     float gainY;
//     float foveaArea;
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint textureWidth;
//     uint textureHeight;
//     uint attachmentWidth;
//     uint attachmentHeight;
//     uint attachmentBlockWidth;
//     uint attachmentBlockHeight;
//     uint numOfFocalPoints;
//     FocalPoint focalPoints[2];
// } params;
//
// layout(binding = 0, r8ui)uniform writeonly uimage2D fragmentShadingRateImage;
// layout(local_size_x = 32, local_size_y = 32, local_size_z = 1)in;
//
// uint computeValue(ivec2 pos)
// {
//     float minPixelDensity = 0.0f;
//     float focalPointDensity = 0.0f;
//     float px =((float(pos . x)* params . attachmentBlockWidth)/ params . textureWidth - 0.5f)* 2.0f;
//     float py =((float(pos . y)* params . attachmentBlockHeight)/ params . textureHeight - 0.5f)* 2.0f;
//
//     for(uint point = 0;point < params . numOfFocalPoints;point ++)
//     {
//         float density = 1.0f / max(pow(params . focalPoints[point]. focalX - px, 2)*
//                                    pow(params . focalPoints[point]. gainX, 2)+
//                                    pow(params . focalPoints[point]. focalY - py, 2)*
//                                    pow(params . focalPoints[point]. gainY, 2)-
//                                    params . focalPoints[point]. foveaArea,
//                                    1.0f);
//
//         if(density > focalPointDensity)
//         {
//             focalPointDensity = density;
//         }
//     }
//     minPixelDensity = max(minPixelDensity, focalPointDensity);
//
//     uint val = 0;
//     if(minPixelDensity > 0.75f)
//     {
//
//         val = 0;
//     }
//     else if(minPixelDensity > 0.5f)
//     {
//
//         val =(1 << 2);
//     }
//     else
//     {
//
//         val =(1 << 2)| 1;
//     }
//     return val;
// }
//
// void main()
// {
//     uint i = gl_GlobalInvocationID . x;
//     uint j = gl_GlobalInvocationID . y;
//
//     if(i >= params . attachmentWidth || j >= params . attachmentHeight)
//     {
//         return;
//     }
//
//     ivec2 pos = ivec2(i, j);
//     imageStore(fragmentShadingRateImage, pos, ivec4(computeValue(pos), 0, 0, 0));
// }
