// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0xdb,0x4f,0x95,0x57,
    0x10,0xc5,0xf7,0x39,0xdf,0xb9,0xa0,0x05,0x45,0x10,0xa1,0x2a,0x5a,0xa5,0x60,0xa1,
    0x95,0x1c,0x2d,0xa7,0xb1,0x41,0x2a,0x9a,0x20,0x5a,0x50,0xb9,0xb7,0x15,0x6c,0xd2,
    0x16,0x48,0xbc,0x00,0x0f,0x2a,0x3c,0x78,0x81,0xa4,0x5a,0xe0,0xc1,0x56,0x78,0x50,
    0x81,0x87,0x26,0x15,0x7d,0xf1,0x0f,0xe9,0x5f,0xd4,0xf4,0x92,0x98,0x38,0xb3,0xcf,
    0x6f,0xcc,0xf4,0x9c,0x64,0xf8,0xbe,0xb5,0xd6,0xec,0x59,0x7b,0xf6,0xde,0xdf,0x26,
    0x49,0x37,0xe5,0x43,0x92,0x0a,0x3b,0x43,0x45,0x78,0x1d,0x4a,0xbf,0x3d,0x21,0x1d,
    0x52,0xf2,0xfc,0x20,0xe4,0xe2,0xb3,0xb7,0x7f,0xb8,0xbf,0xfd,0xf6,0x9d,0xc9,0xf6,
    0x8e,0x62,0x41,0xf5,0x5d,0x21,0x89,0x79,0xaa,0xed,0x16,0x94,0x91,0xa7,0xc6,0xcc,
    0x0f,0xd7,0x67,0x95,0xaf,0x94,0xf8,0x5e,0x62,0x5a,0x62,0x4e,0x62,0x41,0x62,0x49,
    0x62,0x55,0x62,0x5d,0x62,0x4b,0xa2,0x5a,0x6a,0xe8,0x98,0xbc,0xd6,0x97,0xb7,0xca,
    0xe8,0xa7,0xf5,0x42,0xb8,0x10,0xb2,0x61,0x2f,0x73,0x69,0xe2,0x69,0x5c,0x0a,0xae,
    0xc2,0x71,0x69,0xb8,0x6a,0xc7,0x25,0x70,0x0d,0x8e,0xcb,0xc0,0x1d,0x74,0x5c,0x16,
    0xee,0x23,0xc7,0xe5,0xe0,0x3e,0x76,0x5c,0x1e,0xee,0x13,0xc7,0x55,0xc0,0x7d,0xe6,
    0xb8,0x1d,0x70,0x85,0xd8,0x57,0xf2,0x7e,0x7e,0xda,0x63,0xaf,0x3c,0x8f,0xd2,0x8f,
    0xe1,0x23,0x0e,0xf7,0x95,0xe9,0x7d,0xe8,0x36,0x5e,0xd7,0xf4,0x90,0xd3,0xa7,0xc1,
    0x29,0xf0,0x1c,0xd8,0xf2,0x17,0xc0,0x09,0x78,0x09,0x9c,0x01,0xaf,0x82,0xb3,0xe0,
    0x75,0x70,0x0e,0xbc,0x05,0xd6,0xde,0x6b,0xa5,0x6a,0x3a,0xce,0x27,0x89,0xf5,0xf4,
    0x7d,0x9f,0xbc,0xe5,0x58,0xbb,0x7a,0xc9,0xcf,0x33,0x36,0x0d,0xde,0x09,0xce,0xc4,
    0x9c,0x4c,0xdc,0x5f,0x9d,0xab,0xf2,0x9d,0xe0,0x4a,0xb8,0x3a,0xc1,0x35,0xd4,0x32,
    0x5c,0x0b,0x0e,0x71,0x1e,0x95,0xef,0xf7,0xc1,0xa2,0x86,0xc8,0xf1,0xac,0x75,0xa1,
    0x7e,0x75,0xec,0xc7,0x5e,0xfc,0xea,0xe2,0x9c,0x4b,0xdc,0xa7,0xf8,0xd5,0xe3,0xa7,
    0xf9,0x0d,0x68,0x79,0xa7,0x37,0xe2,0x6f,0xf8,0x28,0xba,0xe6,0x37,0x91,0x5f,0x1b,
    0x3d,0xd2,0xa1,0x85,0x3c,0xc5,0xc7,0xca,0xc6,0x15,0x38,0x2f,0x86,0x3b,0x19,0xfb,
    0xa1,0xfc,0xed,0xa1,0x87,0x54,0xf8,0xff,0xcf,0xb0,0x7a,0x9d,0xe7,0xbd,0x87,0x5e,
    0xce,0xc7,0x3d,0x2a,0xfd,0xf6,0x8b,0xf7,0x45,0xf2,0xbe,0x86,0xbb,0x48,0x9e,0xe2,
    0x3e,0xb8,0x03,0xb2,0x5f,0x97,0xa8,0x61,0xf3,0x18,0x60,0xbf,0x0c,0x8f,0x32,0x17,
    0xad,0x35,0xc6,0x1c,0x6b,0xc0,0xd7,0x38,0x4b,0xb6,0x7f,0xd7,0xf8,0xce,0x13,0x87,
    0xa7,0xc1,0x56,0xef,0x06,0xfb,0x6f,0xfa,0x5c,0x59,0xfe,0x42,0x59,0xfe,0x3d,0xbe,
    0x63,0xd3,0x97,0xca,0xf4,0x47,0x9c,0x09,0xd3,0x57,0xcb,0xf4,0x27,0x12,0xdd,0x4e,
    0x5f,0x2f,0xd3,0x9f,0x51,0xd3,0xf4,0x2d,0xf4,0x2f,0xe4,0x2b,0x48,0x33,0xd7,0x00,
    0xf7,0x8f,0x30,0xfa,0x6d,0x74,0x71,0x96,0xab,0x38,0xaf,0x83,0xc2,0xe6,0xb8,0xab,
    0xaa,0xc8,0x37,0xae,0x1a,0x2e,0x15,0xd7,0x36,0x1b,0xcf,0xca,0x1e,0x72,0x55,0x3b,
    0x2b,0x5c,0x43,0xdc,0xf7,0xd2,0x59,0xac,0xa7,0x7e,0x3e,0xee,0x63,0x89,0x7f,0xcc,
    0xb8,0x83,0x8c,0xdd,0xef,0xc6,0x1d,0x62,0x5c,0xa3,0x1b,0x77,0x18,0xfe,0x67,0xc6,
    0x1d,0x61,0xec,0x61,0xc6,0xd9,0x5d,0xb6,0x8f,0xf3,0xdb,0xc5,0x19,0x6d,0x86,0x7f,
    0x23,0x39,0x2d,0xdc,0x6d,0xcd,0x9c,0xdd,0xbf,0x65,0x05,0xda,0xe8,0xed,0x3f,0xc9,
    0x57,0xad,0x55,0xa2,0x8d,0x75,0x69,0x75,0x3d,0x1f,0x77,0xf7,0xd8,0xa2,0xe4,0x2a,
    0xd7,0x0e,0x3f,0x24,0x48,0xe7,0xf4,0x3b,0x9c,0xe5,0xfd,0x2b,0x35,0xac,0x96,0x3e,
    0xff,0x92,0x2c,0xcd,0x7b,0x49,0x4e,0x96,0x31,0xad,0xae,0x87,0x13,0xf4,0x50,0x70,
    0x3d,0x9c,0x84,0xb7,0x1e,0x3e,0x87,0xb3,0x1e,0x8a,0xae,0x07,0xd5,0x3a,0x24,0x8a,
    0xf8,0x76,0xb8,0x1e,0x4e,0xe1,0x9d,0x72,0x3d,0x7c,0x09,0x6f,0x3d,0xfc,0x01,0x67,
    0x79,0xda,0x83,0xd5,0x2a,0xba,0x1e,0xb6,0xc9,0x69,0x63,0x4c,0x87,0xeb,0xe1,0x34,
    0x3d,0x74,0xba,0x1e,0xba,0xe0,0xad,0x87,0xaf,0xe0,0xac,0x87,0x6e,0xd7,0x83,0x6a,
    0x67,0x38,0xe3,0xea,0xab,0xef,0x57,0xf0,0x3d,0x87,0xf7,0xb6,0xbb,0x3b,0x74,0x8e,
    0x96,0xdb,0xed,0xe6,0xf8,0x8a,0xbc,0x22,0xe3,0xce,0x30,0x9f,0x9e,0xf8,0xbf,0xac,
    0x74,0xb7,0x28,0xd6,0x7b,0xa4,0x9f,0x3b,0x64,0x4c,0xe6,0xa7,0xf7,0xc7,0x65,0x72,
    0xfa,0xdd,0xb9,0x1c,0xa4,0xaf,0x01,0x77,0x2e,0x87,0xe0,0xed,0x3c,0x0f,0xe3,0xab,
    0xfc,0x37,0xc2,0xe9,0x37,0x35,0x42,0xbd,0x61,0x6a,0x8d,0x45,0xad,0x54,0x6b,0x94,
    0x5a,0xfa,0xdd,0x7e,0x0b,0xff,0xa7,0xe4,0x28,0xfe,0x0e,0xae,0xde,0xad,0xdb,0x55,
    0xf8,0x46,0xd6,0x6d,0xc2,0xad,0x9b,0x6a,0xe3,0x12,0x13,0xac,0xc5,0x78,0x5c,0xe7,
    0x24,0xde,0x5f,0x23,0xac,0x93,0x69,0x13,0xce,0xe7,0x47,0x7c,0x06,0x9c,0xcf,0x4f,
    0xf0,0xe6,0x33,0xe5,0x7c,0x54,0x9b,0x94,0x98,0xa2,0xd6,0x24,0x3e,0xd3,0xce,0xc7,
    0xb4,0x29,0xe7,0x73,0x13,0x9f,0x1b,0xce,0xe7,0x16,0xbc,0xf9,0xcc,0x3a,0x1f,0xd5,
    0x66,0x24,0x66,0xa9,0x35,0x83,0xcf,0x9c,0xf3,0x31,0x6d,0xd6,0xf9,0xdc,0xc6,0xa7,
    0xe0,0x7c,0xee,0xc0,0x9b,0xcf,0xbc,0xf3,0x51,0xed,0xae,0xc4,0x3c,0xb5,0xee,0xe2,
    0xb3,0xe0,0x7c,0x4c,0x9b,0x77,0x3e,0xf7,0xf1,0xb9,0xe7,0x7c,0x1e,0xc0,0x9b,0xcf,
    0xa2,0xf3,0x51,0xed,0x61,0xfc,0xf6,0x4a,0xb5,0x1e,0xe2,0xb3,0xe4,0x7c,0x4c,0x5b,
    0x74,0x3e,0x8f,0xf1,0x79,0xe4,0x7c,0x7e,0x81,0x37,0x9f,0x15,0xe7,0xa3,0xda,0xb2,
    0xc4,0x0a,0xb5,0x96,0xf1,0x59,0x75,0x3e,0xa6,0xad,0x38,0x9f,0x5f,0xf1,0x79,0xe2,
    0x7c,0x7e,0x83,0x37,0x9f,0x35,0xe7,0xa3,0xda,0x53,0x89,0x35,0x6a,0x3d,0xc5,0x67,
    0xdd,0xf9,0x98,0xb6,0xe6,0x7c,0x9e,0xe3,0xf3,0xcc,0xf9,0xbc,0x80,0x37,0x9f,0x4d,
    0xe7,0xa3,0xda,0x86,0xc4,0x26,0xb5,0x36,0xf0,0xd9,0x72,0x3e,0xa6,0xe9,0xf3,0xad,
    0xdc,0x0c,0xa7,0x24,0xde,0x01,0x56,0x9b,0x68,0x2b,0xf8,0x0b,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2D color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = texture(sampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent);
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
