// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ConvertVertex.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kConvertVertex_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x9d,0x98,0x77,0x70,0x55,0x55,
    0x10,0xc6,0xef,0x7d,0x2f,0x79,0x89,0xa1,0x05,0x48,0x28,0x09,0x25,0x10,0x4a,0x30,
    0xa1,0x47,0x50,0x88,0x88,0x83,0x1a,0x50,0x54,0x14,0x51,0xc8,0x80,0x8a,0x46,0x23,
    0x2a,0x16,0xb0,0xa1,0x51,0x11,0x05,0x01,0x0b,0x0a,0xa8,0x20,0x36,0x6c,0xa0,0xb1,
    0xa0,0x28,0x02,0x76,0x44,0x1d,0x9d,0xb1,0x00,0x62,0xc3,0x5e,0x67,0x40,0xb0,0xd3,
    0x2c,0x78,0xf6,0xde,0xdf,0xfa,0x96,0x63,0xfe,0x32,0x33,0x77,0x72,0xf7,0xdb,0xdd,
    0xef,0xec,0xd9,0xdd,0x53,0xde,0x4d,0x26,0x8a,0xb3,0x82,0x64,0x18,0xe4,0x04,0xd9,
    0x41,0xdf,0x30,0x88,0xfe,0x9a,0x06,0x89,0x40,0x5e,0x1b,0x04,0xa9,0xe8,0x7f,0xe5,
    0xf0,0x91,0xc3,0x7b,0x4c,0xbe,0xa0,0xba,0x47,0xf9,0x7e,0xbd,0x44,0xdf,0x38,0x48,
    0x46,0x76,0xa2,0x6b,0xe2,0x6c,0x32,0xdd,0xff,0x0c,0xf7,0x4c,0x1c,0x3f,0xe1,0x1c,
    0xc1,0x7f,0x72,0x4f,0xae,0xc3,0x33,0x22,0xae,0x20,0x18,0x8c,0xad,0x3c,0x43,0x9d,
    0x75,0xe7,0x78,0x98,0xa0,0x98,0xff,0x8a,0x85,0x60,0x19,0x06,0x4b,0x80,0x65,0x1b,
    0x2c,0x09,0xd6,0xd0,0x60,0x19,0x60,0xb9,0x06,0xcb,0x04,0xcb,0x33,0x58,0x0a,0xac,
    0x95,0xc1,0xb2,0xc0,0xda,0x18,0x2c,0x1b,0xac,0xc8,0x60,0xfb,0x80,0x75,0x32,0x58,
    0x0e,0x58,0x89,0xc1,0x1a,0x80,0x95,0x19,0xac,0x21,0x58,0x2f,0x83,0x35,0x02,0x2b,
    0x37,0x58,0x63,0xb0,0xfd,0x25,0xef,0x6e,0xa6,0x9a,0x83,0x4a,0x37,0xc3,0x53,0x89,
    0x5f,0xf3,0x53,0xed,0xe5,0x51,0xec,0xab,0x8d,0xfd,0xe9,0xee,0x7f,0xc7,0x7f,0x75,
    0xb1,0xdc,0x81,0x3c,0x8b,0xbc,0xd9,0xe3,0xdb,0x52,0x0f,0xdf,0x16,0xc3,0xb7,0xd5,
    0xe3,0xdb,0x0a,0x9f,0xca,0x3f,0x31,0xf7,0x36,0xc8,0x7d,0xc2,0x58,0x6e,0xed,0x9e,
    0xe6,0x8e,0x25,0x11,0xd9,0x27,0xa3,0xfa,0xc9,0x7b,0xbe,0xb3,0x49,0x91,0xe3,0x20,
    0xfa,0x9f,0x11,0xd5,0x22,0x8b,0xb8,0x3a,0xb8,0x98,0xb2,0x79,0x57,0xbc,0x83,0xb3,
    0x69,0x6a,0xb0,0x16,0x8e,0x2d,0x1f,0x0e,0xd1,0xb5,0x88,0x78,0x63,0x9d,0xf0,0x15,
    0xf0,0x9e,0x0f,0x5f,0xa1,0xf1,0x2d,0xc0,0xa7,0x88,0x78,0x04,0x6b,0xe7,0xd8,0xb5,
    0x4f,0xfe,0xef,0x23,0xe3,0x76,0xa1,0x5f,0x84,0x6b,0x20,0x72,0x57,0x30,0x99,0x77,
    0x09,0x31,0x4b,0x2d,0x4a,0x91,0xbb,0x19,0xff,0x7d,0xb1,0x4d,0x19,0x7d,0x4f,0x7a,
    0x5a,0xe5,0x72,0xe2,0x2e,0x25,0x8f,0x15,0xd4,0x52,0xe5,0x41,0xf4,0xb1,0xda,0x1f,
    0xea,0xc9,0x47,0x63,0x9f,0xe7,0x58,0x8e,0x35,0x7e,0xa3,0x58,0x63,0x2a,0x57,0x51,
    0x9f,0xb6,0x0e,0xd5,0x1e,0x6c,0x47,0xaf,0x9d,0x4a,0xbc,0xa7,0xd1,0xe3,0xd5,0xcc,
    0x57,0xe4,0xd3,0xc1,0x74,0xbc,0x1a,0x53,0xe7,0x33,0xd1,0xd9,0xf9,0x4d,0x64,0x4d,
    0xa8,0x7c,0x11,0xeb,0x4b,0xe5,0x5a,0x13,0x97,0xc8,0x97,0xbb,0x67,0x4f,0x32,0x2d,
    0x4f,0x65,0xfd,0x68,0xdc,0xd7,0x1a,0x7f,0x91,0xe7,0x7a,0xf9,0xba,0x8f,0x1a,0x48,
    0x3c,0x0f,0x50,0xff,0x12,0xc3,0xff,0x90,0xf0,0xbb,0x3f,0x95,0xeb,0xbc,0x7a,0x3d,
    0xeb,0xcd,0xef,0x2d,0x6a,0xa6,0xfc,0x1b,0x3d,0xfb,0x0f,0xd9,0x9f,0x44,0x96,0x7e,
    0xfc,0x94,0x7c,0xb4,0x74,0xf2,0x67,0xf4,0x68,0x82,0x3c,0x6f,0x36,0x79,0x96,0x35,
    0xb8,0x99,0x38,0x7f,0x60,0xcc,0x2d,0xe4,0x59,0xe4,0xad,0x60,0xc2,0xb3,0x0d,0xbf,
    0x24,0xf6,0x3f,0x12,0xc3,0x36,0xec,0x7f,0x64,0x7f,0x0e,0xd1,0xff,0xcc,0xbb,0xad,
    0x43,0x0e,0xeb,0x56,0xe7,0xd1,0x3b,0x8c,0xf7,0xf0,0x32,0x27,0x09,0x8f,0xac,0x6b,
    0xc1,0x36,0x32,0xc7,0x7e,0xae,0x2b,0x13,0xf4,0x52,0xc0,0xd8,0x3b,0x1d,0x92,0xc9,
    0x98,0x92,0xd7,0x44,0x18,0xe7,0x57,0xe5,0xa4,0x27,0x37,0xf6,0xe4,0xb6,0x9e,0xdc,
    0xce,0xc8,0xd1,0xba,0xf5,0xf4,0x1d,0x3d,0xb9,0xb3,0x67,0xdf,0xd5,0xd3,0xf7,0x40,
    0x3e,0xd8,0x45,0x29,0x39,0xd8,0x4d,0x5e,0xa4,0xd7,0x0f,0x64,0xde,0x7f,0x80,0x8b,
    0x8d,0xac,0xc7,0x3f,0x59,0xc3,0x35,0xc6,0xe6,0x2f,0xf0,0xc7,0x9c,0x8d,0xac,0xa1,
    0xbf,0xf1,0x13,0x7c,0x87,0x64,0x82,0x33,0x75,0xb7,0xb3,0x17,0xdd,0x1e,0x0e,0x4e,
    0xc9,0xcf,0x9e,0xc8,0x2e,0x8c,0xde,0x05,0x1b,0xe4,0xec,0x25,0x4f,0x55,0x41,0xfc,
    0x9e,0xe4,0x7d,0x97,0xd3,0x67,0xe0,0x23,0xff,0xb7,0xcb,0xd8,0x12,0x3f,0xdc,0xa2,
    0xcf,0x46,0x2f,0xff,0x35,0xb6,0x7d,0xc2,0x38,0xcf,0x1a,0x7f,0x83,0x30,0x8e,0x3f,
    0xc7,0xd8,0x34,0x0c,0x63,0x7c,0x19,0xf1,0x37,0x0a,0x63,0x3f,0xc1,0x25,0x66,0x91,
    0x33,0xdd,0x93,0x82,0x3f,0x33,0x4c,0xe7,0xac,0x49,0xf8,0xdf,0x9c,0xe5,0x86,0x31,
    0xae,0x63,0x36,0xad,0x67,0xcc,0x66,0x61,0x8c,0x5f,0xe3,0x6c,0x44,0x6e,0x1e,0xc6,
    0x7e,0xcd,0x8c,0x4d,0x1e,0xb1,0x4f,0xc5,0x26,0x3f,0x8c,0xed,0xf2,0xc8,0x93,0xf4,
    0x4b,0xbe,0xb1,0x6f,0x11,0xc6,0x3d,0xa4,0xe3,0xb6,0x64,0xdc,0x3a,0x13,0x5b,0xab,
    0x30,0xc6,0xb5,0x56,0xad,0xc3,0xd8,0x4f,0x70,0xa9,0x55,0xa1,0xa9,0x95,0xe8,0x0a,
    0xdc,0x53,0xc8,0xbc,0xe5,0x5d,0xf2,0xac,0x79,0x28,0x34,0x63,0xb7,0x67,0x6c,0x89,
    0x4b,0xfa,0x54,0xe4,0x03,0x88,0xbb,0x48,0xe2,0xa6,0x7f,0x45,0x2f,0x7d,0x5d,0x64,
    0x7c,0x8b,0xc3,0xb8,0xd7,0x45,0x27,0x3d,0x5c,0x8c,0xaf,0xec,0x05,0x9d,0xc2,0xf8,
    0x9e,0xd2,0x11,0xbd,0xf4,0x7c,0x27,0xe3,0xdb,0xc5,0x8c,0x2b,0xfd,0xde,0x05,0x9d,
    0xf8,0x96,0x84,0xf1,0x1a,0x11,0x9d,0xf4,0x7e,0x49,0xc4,0x9b,0x8a,0xfc,0xba,0x85,
    0xb2,0xaf,0xc4,0x6b,0xa4,0xab,0xe1,0xdb,0x37,0x8c,0xd7,0xe9,0xab,0xc4,0x5e,0x1a,
    0xc6,0x58,0x37,0xd3,0x9b,0xa5,0xe4,0x21,0x8b,0x3c,0x64,0x19,0xff,0x32,0xaf,0x66,
    0xdd,0xc3,0x18,0xab,0x33,0xfd,0xdc,0x3d,0xdc,0xbb,0x9f,0x53,0xc6,0xbf,0x27,0xe3,
    0x8b,0xad,0xac,0xcf,0x9e,0xe4,0x42,0xf6,0x96,0x5e,0x61,0x7c,0xf7,0x10,0x5c,0xd6,
    0xcc,0xfe,0xee,0xe9,0xc7,0x38,0x0d,0xd8,0x77,0xe4,0x6c,0xeb,0xef,0x7c,0xb3,0xd8,
    0x87,0xf5,0x3d,0x87,0xfd,0xa8,0xa1,0xe9,0x85,0x4e,0xd8,0x68,0xbf,0x94,0xb2,0xb6,
    0xbb,0x19,0x9b,0x32,0x70,0xed,0xd3,0xee,0xf8,0x95,0x19,0x9b,0x1e,0xf0,0x2b,0x4f,
    0x2f,0x78,0x7a,0x1a,0x9b,0xde,0xe0,0xca,0xd3,0x07,0xbf,0xde,0x41,0x3a,0x57,0x7d,
    0xe1,0xef,0x63,0xb8,0xf6,0x83,0xab,0xdc,0x70,0xf5,0x03,0x57,0xbf,0xfe,0xf8,0xf6,
    0x8b,0xf6,0x9e,0x44,0x24,0xdb,0xdc,0x34,0xa9,0x27,0x37,0x8d,0xcc,0x7b,0x63,0x72,
    0x93,0x6b,0xf6,0xc6,0x01,0x9c,0x85,0x3a,0xe6,0x40,0x7c,0x66,0xc1,0x79,0x20,0x58,
    0x85,0x99,0xd3,0x41,0xe0,0x83,0xa8,0xf5,0x80,0x7f,0xb1,0x98,0x63,0x30,0xbc,0x12,
    0xe3,0x60,0x2f,0xc6,0xe6,0x81,0xfe,0xee,0x48,0xc7,0xd5,0x8c,0xb8,0xf2,0x4c,0x5c,
    0x43,0x82,0xbd,0xf7,0xf0,0x61,0x9e,0x3c,0xd6,0x93,0xc7,0x79,0xf2,0x49,0x9e,0x7c,
    0x8a,0x27,0x4f,0xf6,0xe4,0x29,0x9e,0x3c,0xc3,0x93,0x6f,0xf0,0xe4,0x85,0x9e,0xbc,
    0xc8,0xc8,0x72,0xbf,0x78,0xd0,0xd3,0xaf,0xf6,0xe4,0xb5,0x5e,0xde,0x0f,0x21,0x0f,
    0xda,0x0f,0x87,0xd1,0x0f,0x87,0x1a,0x9b,0x4a,0xf0,0x19,0xe4,0x72,0x28,0x7e,0x95,
    0xd4,0x61,0x08,0x98,0xda,0x1f,0xee,0x71,0x1e,0x51,0x0f,0xe7,0x70,0x70,0xad,0xf7,
    0x91,0xf8,0x0d,0x87,0x73,0x18,0x98,0xda,0x1f,0x45,0x2d,0x94,0x73,0x04,0x9c,0x47,
    0x1b,0x9b,0x63,0xc0,0x75,0xef,0x1d,0x89,0xdf,0x31,0xc6,0xe6,0x38,0x78,0xf4,0x2c,
    0x3a,0x1e,0x4c,0xee,0xa3,0x4b,0xc0,0x4e,0xc0,0xf7,0x78,0xce,0xd7,0x31,0x41,0x7a,
    0xcf,0x16,0xdd,0x68,0xf7,0x8c,0xa1,0x77,0x46,0xd3,0x6f,0x55,0xc8,0x63,0xcc,0x58,
    0x27,0xd2,0x4f,0x32,0x9f,0x71,0xc8,0xaa,0x3b,0x99,0x38,0x44,0x77,0x12,0xb2,0xee,
    0x9d,0xe3,0xd9,0x6f,0xc6,0xd1,0x4f,0x62,0x33,0x16,0x5c,0xfd,0xcf,0xa0,0x17,0xb5,
    0x26,0x13,0xc0,0x2a,0xa2,0x1c,0xa5,0xa2,0xbb,0xef,0x59,0xdc,0x8f,0x6b,0xd0,0xab,
    0xef,0xd9,0xe8,0x84,0xf7,0x14,0x64,0xcd,0xeb,0x39,0xe4,0x75,0xa2,0xb1,0x3f,0x17,
    0xbc,0x8e,0xfc,0x9c,0x07,0x56,0x45,0x7e,0x26,0x99,0xfc,0x88,0xee,0x7c,0xf7,0x2c,
    0x20,0x1f,0xe7,0x1b,0x9e,0x0b,0x98,0xf3,0xc3,0xf0,0x5c,0x08,0x36,0x2a,0xba,0x07,
    0xa7,0xa2,0x7b,0xe1,0xc5,0xe0,0xe5,0xdc,0xcd,0x6b,0xf1,0xbd,0x04,0x9d,0xc4,0x3c,
    0x19,0x59,0x79,0x2f,0xf5,0x78,0x2f,0x03,0xb3,0xbc,0x57,0x80,0xd7,0x72,0xa7,0x57,
    0xde,0x2b,0xd1,0x09,0xef,0x14,0x64,0xcd,0xc5,0x55,0xe4,0x62,0xaa,0x19,0x6b,0x1a,
    0xb8,0xe6,0xe2,0x6a,0x30,0xcd,0xc5,0x74,0x93,0x8b,0xab,0xa3,0xbd,0x2b,0x08,0x66,
    0x93,0x8b,0x6b,0x0c,0xcf,0x4c,0x62,0xd6,0xbd,0x6d,0x16,0xbf,0x25,0x66,0x12,0xcb,
    0x0c,0x30,0x39,0xc7,0xa6,0xe3,0x3f,0xdb,0xf8,0x5f,0xe7,0xcd,0xf9,0x7a,0xb0,0x51,
    0xc4,0x31,0xc7,0xc4,0x21,0xba,0x1b,0xdd,0x73,0x13,0x3c,0x37,0x32,0xc6,0x0d,0x41,
    0xfa,0xee,0x37,0x07,0xdd,0x4d,0x66,0x8c,0x9b,0xd9,0xaf,0x54,0x9e,0xc7,0x98,0xd3,
    0x88,0x79,0x3e,0xbf,0x77,0xe6,0x99,0x79,0xdc,0x82,0xdf,0x7c,0x73,0x7e,0xdc,0x0a,
    0x3e,0xd7,0x8c,0x7b,0xab,0x37,0xee,0x1c,0x33,0xce,0x6d,0xec,0x7b,0x9a,0x87,0xdb,
    0xbc,0x3c,0x4c,0x47,0x9e,0x84,0xbc,0xc0,0xf8,0xde,0xce,0xba,0x10,0xdf,0x85,0xc8,
    0x5a,0xcf,0x3b,0xea,0x39,0x37,0xef,0x04,0x17,0xfb,0x45,0xc8,0xba,0x0e,0xef,0xe2,
    0x6c,0x5b,0xc8,0x3e,0xab,0xf1,0xdc,0x65,0x38,0xef,0xae,0x87,0xf3,0x1e,0x70,0xcd,
    0xc9,0x62,0xb0,0x41,0xa6,0x7f,0x17,0x1b,0xfb,0x7b,0xc9,0xb3,0xd6,0xf2,0x7e,0xb0,
    0xfb,0xa8,0xe5,0x52,0x53,0xcb,0xfb,0xa3,0x7d,0x4a,0x6c,0xe3,0xb9,0x2f,0x81,0xf3,
    0x41,0x7e,0x4b,0x4a,0x5e,0x96,0xa2,0x7b,0xd8,0x8c,0xf1,0x08,0x63,0xac,0x75,0x63,
    0xc8,0x7a,0x78,0x94,0x7b,0xeb,0x23,0xd4,0xb3,0x24,0xda,0x37,0xd3,0xb8,0x72,0x3e,
    0xe6,0x71,0x2e,0x85,0x53,0xec,0x1f,0xe7,0xbc,0xd1,0xb5,0xb4,0x0c,0x4c,0xd7,0xd2,
    0x32,0xaf,0x4e,0x93,0x4c,0x3c,0x4f,0x78,0xfb,0xf9,0x93,0xf5,0xec,0xe7,0xcb,0xc1,
    0x75,0x3f,0x7f,0x0a,0xbf,0xe5,0xc6,0xe6,0x69,0x6f,0x1d,0xac,0x00,0xb3,0xfb,0xf9,
    0x33,0xf8,0xae,0x20,0x9f,0xab,0x4c,0x3e,0x45,0xb7,0xd2,0x3d,0x2f,0x10,0xe3,0x4a,
    0x13,0xd3,0x73,0xc4,0xf4,0xac,0x19,0xef,0x79,0x70,0x99,0xe3,0x6a,0x64,0x99,0xe3,
    0x2a,0xfc,0x5f,0x30,0xb6,0x2f,0x72,0xfe,0xab,0xfc,0x12,0xe7,0xfb,0x1a,0xfa,0xe2,
    0x65,0x6c,0x5e,0x32,0x36,0x6b,0xb8,0x13,0xbc,0x8e,0xcd,0x2b,0xd8,0xad,0x31,0x63,
    0xbe,0xe2,0x8d,0xb9,0xca,0xf8,0xbf,0xca,0x99,0x2f,0xb6,0x6b,0x91,0x55,0xf7,0x1a,
    0xe7,0xbf,0x9c,0x57,0xaf,0x99,0xfb,0x51,0x3e,0xdf,0x2a,0x83,0xe8,0x5b,0x57,0xfa,
    0x7e,0xd4,0x12,0xfe,0xd6,0x86,0xe3,0x0d,0xf0,0xf3,0xf8,0x0d,0xf0,0x26,0x98,0x70,
    0xbe,0xe9,0xdd,0xb9,0xda,0xc1,0x59,0x68,0x38,0xdb,0xf0,0x5e,0x10,0x7d,0x83,0x88,
    0xf9,0xdb,0x9b,0xfb,0xc9,0x06,0xef,0xbe,0xb2,0x29,0x48,0xff,0x86,0x96,0x9a,0xbc,
    0x4d,0x4d,0xde,0x32,0x31,0xbd,0x03,0xae,0x3d,0xf0,0x2e,0xd8,0x5c,0xea,0xbd,0xde,
    0xd4,0x5b,0x74,0xeb,0xdc,0xf3,0x35,0x63,0xaf,0x33,0x3c,0xef,0x11,0x9f,0xe6,0xfe,
    0x7d,0xb0,0x8d,0x86,0xfb,0x03,0xf0,0x2a,0x73,0xb6,0x7c,0x04,0x5e,0xc3,0xf7,0x17,
    0x5d,0x0f,0x1f,0xa3,0x93,0x5a,0x6c,0x40,0xd6,0xdf,0x4e,0x9f,0x30,0xff,0x11,0x8e,
    0x57,0xbe,0xcb,0x7c,0x0e,0xf6,0x69,0xf4,0x9d,0x25,0xde,0x7f,0xbe,0xe0,0xbb,0xc9,
    0x00,0xf4,0x1a,0xe7,0x97,0xe4,0x69,0x2d,0x71,0x7e,0x85,0xed,0x97,0x8c,0xb5,0x09,
    0x4c,0x7a,0x64,0x3d,0xf3,0xfc,0xda,0x8c,0xfd,0x0d,0x63,0xd7,0xb2,0x8e,0xbf,0x05,
    0xd3,0xb8,0xbf,0x03,0x53,0xae,0xef,0x3c,0xae,0xf5,0x26,0x96,0xef,0xa9,0x91,0xd4,
    0xff,0x7b,0x53,0xff,0x84,0xf9,0x8e,0x5b,0x64,0xea,0xdf,0x01,0x8e,0x62,0xf3,0x5d,
    0xe4,0x97,0x7a,0xbe,0x8b,0xfc,0x0a,0xae,0x75,0xff,0x8d,0xba,0xd7,0x1a,0x9b,0xdf,
    0xc1,0xf5,0x0e,0xb4,0x1d,0xac,0xc2,0x9c,0x3d,0x3b,0xe0,0xda,0x6e,0xfc,0x76,0x12,
    0x87,0xde,0x93,0x76,0xf1,0x7d,0xab,0x06,0x7b,0x99,0xf7,0x2e,0xec,0xf4,0x77,0xe0,
    0x3f,0x78,0xa3,0x59,0x34,0xc4,0x18,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dst
// {
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)buffer src
// {
//     uint srcData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     uint outputCount;
//
//     uint componentCount;
//
//     uint srcOffset;
//     uint dstOffset;
//
//     uint Ns;
//     uint Bs;
//     uint Ss;
//     uint Es;
//
//     uint Nd;
//     uint Bd;
//     uint Sd;
//     uint Ed;
//
//     uint srcEmulatedAlpha;
//
//     bool isSrcHDR;
//     bool isSrcA2BGR10;
// } params;
//
// uint getSourceComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Ss + component * params . Bs + params . srcOffset;
// }
//
// uint getDestinationComponentOffset(uint vertex, uint component)
// {
//     return vertex * params . Sd + component * params . Bd + params . dstOffset;
// }
//
// uint getShiftBits(uint offset, uint B)
// {
//
//     uint shift =(offset % 4)* 8;
//
//     return shift;
// }
//
//       uint loadSourceComponent(uint cd)
// {
//
//     uint vertex = cd / params . Nd;
//     uint component = cd % params . Nd;
//
//     if(component >= params . Ns && component < 3)
//     {
//         return 0;
//     }
//
//     uint offset = getSourceComponentOffset(vertex, component);
//     uint block = srcData[offset / 4];
//
//     uint shiftBits;
//     uint valueBits;
//     uint valueMask;
//
//     if(params . isSrcHDR)
//     {
//         valueBits = component == 3 ? 2 : 10;
//         valueMask = component == 3 ? 0x03 : 0x3FF;
//         if(params . isSrcA2BGR10)
//         {
//             shiftBits = 10 * component;
//         }
//         else
//         {
//
//             shiftBits = component == 3 ? 0 :(valueBits *(2 - component)+ 2);
//         }
//     }
//     else
//     {
//         shiftBits = getShiftBits(offset, params . Bs);
//         valueBits = params . Bs * 8;
//         valueMask = valueBits == 32 ? - 1 :(1 << valueBits)- 1;
//     }
//
//     uint valueAsUint;
//
//     if(component >= params . Ns && component == 3)
//     {
//         valueAsUint = params . srcEmulatedAlpha;
//     }
//     else
//     {
//         valueAsUint =(block >> shiftBits)& valueMask;
//     }
//
//           uint value = valueAsUint;
//
//     return value;
// }
//
//        float convertComponent(uint srcValue)
// {
//
//     return srcValue;
// }
//
// uint makeDestinationComponent(uint cd, float value)
// {
//
//     uint valueAsUint;
//
//     if(params . Bd == 2)
//     {
//
//         uint shift =((cd & 1)== 0)? 0 : 16;
//         valueAsUint = packHalf2x16(vec2(value, 0.0))<< shift;
//     }
//     else
//     {
//         valueAsUint = floatBitsToInt(value);
//     }
//
//     return valueAsUint;
// }
//
// void storeDestinationComponents(uint valueAsUint)
// {
//
//     destData[gl_GlobalInvocationID . x + params . dstOffset / 4]= valueAsUint;
// }
//
// void main()
// {
//     if(gl_GlobalInvocationID . x >= params . outputCount)
//         return;
//
//     uint valueOut = 0;
//     for(uint i = 0;i < params . Ed;++ i)
//     {
//         uint cd = gl_GlobalInvocationID . x * params . Ed + i;
//         if(cd >= params . componentCount)
//         {
//             break;
//         }
//
//               uint srcValue = loadSourceComponent(cd);
//                float destValue = convertComponent(srcValue);
//         valueOut |= makeDestinationComponent(cd, destValue);
//     }
//
//     storeDestinationComponents(valueOut);
// }
