// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000021.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000021[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x97,0xff,0x4f,0x95,0x75,
    0x14,0xc7,0x9f,0xcf,0xbd,0xc0,0x45,0x4c,0xc4,0x61,0x99,0x84,0x05,0x62,0x6a,0x7e,
    0x41,0x52,0xf3,0x4b,0x7a,0x55,0x22,0x05,0x27,0x82,0xc0,0x5c,0x9a,0x51,0x33,0x2d,
    0xd3,0x26,0x7e,0xd7,0x4a,0x97,0xad,0x6c,0x39,0x37,0x2d,0xdd,0x5c,0x2e,0xad,0x64,
    0x59,0xb2,0x4a,0x97,0xcb,0x1f,0xd0,0xd4,0x1f,0xd2,0x52,0xd6,0x9c,0xb5,0x82,0xad,
    0x64,0x2b,0x99,0xfe,0x05,0x4d,0xd3,0xcc,0xec,0x73,0x9e,0xe7,0x75,0xb8,0xa7,0xbb,
    0x8c,0xed,0xb3,0xe7,0x39,0xef,0xf3,0xed,0x7d,0xce,0xe7,0x7c,0x3e,0xf7,0x21,0x1e,
    0x2b,0x49,0x04,0x81,0x0b,0x72,0x82,0xec,0xa0,0xde,0x05,0xe1,0x5f,0x9f,0x20,0x16,
    0x38,0x9e,0xa3,0xfd,0xb3,0x67,0x90,0x15,0xca,0x95,0xd5,0x0d,0xd5,0xa5,0x6b,0xd6,
    0x2e,0x2e,0x1d,0xfb,0x48,0x99,0xd8,0xe5,0x06,0xf1,0xd0,0x5e,0x74,0xbd,0x83,0x44,
    0x90,0xe1,0x9f,0xb2,0x96,0x2f,0x5c,0xda,0x24,0xf8,0x60,0xbf,0xae,0xf8,0x95,0xe7,
    0xed,0x04,0x4f,0x48,0x0c,0xff,0x36,0x38,0x8c,0x29,0x3e,0x41,0x50,0x15,0x64,0x06,
    0x23,0xa2,0xb4,0x41,0x09,0x4f,0xc5,0x1c,0x58,0xb6,0xc1,0x62,0x60,0x79,0x06,0x8b,
    0x83,0xf5,0x35,0x58,0x06,0xd8,0xbd,0x06,0xcb,0x04,0x2b,0x34,0x58,0x16,0x58,0x91,
    0xc1,0x12,0x60,0x83,0x0c,0x96,0x0d,0x36,0xd4,0x60,0x3d,0xc0,0x46,0x18,0x2c,0x07,
    0xac,0xcc,0x60,0x3d,0xc1,0xc6,0x1a,0xec,0x2e,0xb0,0x09,0x06,0xeb,0x05,0x36,0x39,
    0xec,0x53,0xbc,0xbb,0x5e,0xe9,0xd9,0x02,0xff,0x1c,0x48,0x7f,0x54,0x2e,0x36,0xb2,
    0xf4,0xf9,0x7e,0xe4,0x7c,0xef,0x15,0x0b,0xf5,0xf1,0xb0,0x37,0xf2,0x7e,0x8f,0x7f,
    0xcb,0xa2,0xce,0xe1,0xde,0x3e,0x8b,0x7c,0x85,0xa5,0xb3,0x27,0xf5,0xf5,0x16,0xb9,
    0x06,0xcf,0xf7,0xab,0xbe,0xb5,0xa6,0x5c,0x65,0xe9,0xe1,0xdc,0xb9,0xed,0x53,0x54,
    0x2e,0xf0,0x2b,0x99,0xf3,0xd6,0x54,0x95,0xa5,0x9f,0x87,0x2b,0x17,0x26,0xef,0xf6,
    0x72,0x11,0x39,0x64,0xef,0xfa,0x79,0xb9,0x18,0x39,0x86,0x3c,0x88,0x9e,0x67,0x84,
    0x78,0x46,0xf0,0x20,0xb6,0x82,0x4f,0x42,0x1e,0x6c,0xfc,0x87,0x60,0x2f,0xfe,0x12,
    0x7f,0x38,0xf1,0x82,0xb0,0xde,0xbc,0xb0,0x47,0xc5,0xac,0xa2,0xee,0xfa,0xfe,0x7f,
    0x15,0x75,0x3f,0x33,0x82,0x91,0xec,0xe3,0x08,0xf2,0x8b,0x5c,0x0a,0x36,0x9c,0x7a,
    0x46,0xc1,0x47,0xec,0xcb,0xd0,0x15,0x1b,0xfd,0x38,0x53,0xcf,0xf8,0x6e,0xdf,0x48,
    0x2f,0xcf,0x47,0xe1,0xab,0xf6,0x15,0xcc,0xa2,0xca,0x35,0xec,0x45,0x7f,0xef,0x39,
    0xcf,0xd4,0x6b,0xff,0x38,0x9a,0xc1,0x7d,0x7e,0x1f,0xe7,0xfb,0xe7,0x3c,0xf2,0x3d,
    0x09,0x3e,0x1f,0xfe,0x22,0x2f,0x48,0xcb,0xd7,0x98,0x26,0x2f,0xe2,0xcc,0x88,0xff,
    0x62,0xf8,0x16,0xd1,0xef,0x17,0xc8,0x1f,0x47,0x6e,0x42,0x17,0x37,0xfe,0xab,0xe1,
    0xa7,0xf2,0x06,0xe6,0x5e,0xe5,0xed,0xc4,0x50,0x79,0x1f,0x67,0x4a,0xe7,0xe5,0x80,
    0xe1,0x23,0xf2,0x91,0x50,0xda,0x5c,0x21,0xf9,0x8e,0x92,0x2f,0xc3,0xf8,0x1f,0xe3,
    0xfc,0xa9,0x7c,0x26,0x6d,0x7f,0x2e,0x70,0x9e,0xa4,0x9e,0xcb,0x70,0x3d,0x4a,0x3f,
    0x2e,0x73,0x07,0xc5,0xc3,0x7d,0xca,0x0c,0x79,0x67,0x90,0x5f,0xb0,0xeb,0x1e,0x91,
    0xbd,0x48,0x32,0x9b,0x43,0x99,0xbf,0x5a,0xcf,0x58,0x66,0xef,0x21,0xb0,0xa1,0x66,
    0x1f,0x9a,0x98,0xeb,0x61,0xe8,0xcb,0x7d,0x04,0x99,0x8b,0x87,0x99,0x9d,0x51,0xc4,
    0x13,0x9b,0xd1,0xe0,0xaf,0x7b,0x1b,0x91,0xc7,0xe0,0x37,0x1a,0xbf,0xf1,0xdc,0x01,
    0xa5,0xcc,0x51,0x92,0x99,0x99,0x08,0xfe,0x99,0xb7,0xc9,0x0d,0x6b,0x89,0x30,0x99,
    0xa5,0x3f,0x3c,0xf3,0x24,0x7c,0xfe,0xf4,0xf6,0x93,0xb8,0x33,0x92,0xd4,0x23,0xef,
    0x75,0xde,0x4f,0x7a,0x33,0x8d,0x9c,0xf2,0xf7,0x2a,0xfd,0x2a,0x07,0xaf,0xf7,0xdd,
    0x17,0x4e,0x43,0x5c,0x84,0xa9,0xdd,0x0d,0x1f,0x43,0x63,0xc9,0xf3,0xaa,0xef,0x85,
    0xd8,0x4d,0x73,0x91,0x4d,0x26,0x3e,0x93,0x4d,0x0d,0x8f,0x53,0x43,0x85,0xa9,0x61,
    0x3a,0xb8,0xd6,0x30,0x03,0x4c,0x6b,0xa8,0x32,0x35,0xcc,0x08,0xef,0xb1,0x20,0xc4,
    0x24,0x6f,0xa5,0xa9,0x61,0x16,0xb9,0x9d,0xa9,0xa1,0x1a,0x5c,0x6b,0x18,0xe6,0x22,
    0x4c,0xed,0xa4,0x06,0x8d,0x55,0x65,0x6a,0x28,0x77,0x91,0x4d,0x12,0x9f,0x4a,0x53,
    0x43,0x2d,0x35,0xd4,0x98,0x1a,0xe6,0x80,0x6b,0x0d,0x75,0x60,0x5a,0x43,0x83,0xa9,
    0xa1,0x2e,0xe4,0x13,0x84,0x98,0xe4,0xad,0x67,0x8e,0x24,0xef,0x5c,0x72,0x97,0xbb,
    0xd4,0x59,0x16,0x8e,0x6a,0xdb,0x60,0x38,0x3e,0x86,0x5d,0x15,0x7e,0xf5,0xf0,0x91,
    0x33,0xfe,0x14,0xe7,0x5b,0x67,0xee,0x69,0x38,0x37,0x9a,0x99,0x7b,0x06,0xfc,0x35,
    0x66,0x6e,0x21,0x98,0xc4,0x5d,0xc1,0x9d,0xfa,0x2c,0xb8,0xc4,0x91,0x3b,0xe0,0x39,
    0xe2,0x2c,0x22,0x8e,0xf4,0xf8,0x79,0xf0,0x15,0x9c,0xd3,0x25,0x60,0xb2,0x2f,0x22,
    0x2f,0x25,0x4e,0x60,0xb0,0x65,0x60,0x2e,0xec,0x53,0x56,0x78,0x9f,0xbc,0x88,0xed,
    0x32,0x62,0x2c,0xf6,0xf1,0xe4,0xfe,0x5a,0x4e,0x3d,0x4b,0xbc,0x6f,0x53,0x98,0x27,
    0xc2,0x1a,0xc9,0x29,0xbe,0x2b,0xc1,0xb7,0x7a,0x1b,0x91,0x57,0x11,0x6f,0xa5,0xe1,
    0xbe,0x06,0xee,0xab,0x0d,0xf7,0xb5,0xe0,0xca,0x7d,0x1d,0xd8,0x13,0xbe,0xc7,0x72,
    0xce,0xd7,0x93,0x7b,0x15,0x5c,0xd7,0x99,0x39,0x78,0x89,0x78,0x1b,0xcc,0x1c,0xbc,
    0x0c,0xae,0x73,0xf0,0x0a,0x98,0xce,0xc1,0x26,0x33,0x07,0xa2,0xdb,0xe8,0xd7,0x26,
    0xf6,0x76,0xa3,0xe9,0xcf,0x66,0x72,0x07,0xf8,0xdd,0xe6,0xfd,0xa6,0x7f,0x97,0x58,
    0xbf,0xe3,0x23,0xcf,0x13,0xe4,0xba,0x8a,0x5f,0x2f,0x7c,0xfe,0x36,0xb9,0x44,0x77,
    0x2d,0x9c,0xa5,0xc8,0xef,0x46,0x78,0x17,0x26,0xc2,0x5c,0x37,0xa9,0xad,0x00,0x7f,
    0xf9,0x1d,0x7f,0x13,0x1e,0x7f,0xa1,0x17,0xdd,0x1b,0x60,0xb7,0xc0,0x0b,0x99,0xcd,
    0xdb,0xc4,0xbc,0x66,0xfc,0xae,0x13,0x2b,0x3f,0xcd,0x46,0x38,0xdd,0xf6,0xd9,0xae,
    0x83,0x5d,0x85,0x43,0x85,0x8b,0xe2,0xde,0xc0,0xf7,0x1a,0x67,0x56,0xf6,0x60,0xa4,
    0x8b,0xf4,0xeb,0xd3,0x66,0x68,0x0b,0x3d,0x72,0xd4,0xdb,0xc7,0xfd,0xbb,0x47,0x99,
    0x8e,0x7b,0xdb,0xa5,0x7a,0x94,0x70,0x91,0x9f,0xf6,0x28,0xcf,0xa5,0x7a,0x24,0xba,
    0x6c,0xbf,0x7a,0xe2,0x27,0x4f,0xed,0x51,0x2f,0x97,0xea,0xd1,0x96,0xb4,0x1e,0xe5,
    0xba,0x48,0x6f,0x7b,0xd4,0xdb,0x45,0xb8,0xf6,0xa8,0x0f,0x31,0x25,0xbe,0xfa,0xe5,
    0xc0,0x25,0x3f,0xcd,0x46,0x38,0x69,0x8f,0x04,0xd3,0x1e,0x4d,0x77,0x51,0x5c,0xe1,
    0x95,0x03,0x57,0xed,0x51,0x99,0x8b,0xf4,0x23,0xe1,0xa9,0x3d,0xda,0x46,0x8f,0x62,
    0xd4,0x5b,0x92,0xd6,0xa3,0x7e,0xe4,0xec,0x67,0x7a,0xd4,0xdf,0x45,0x7e,0xda,0xa3,
    0x81,0xa6,0x47,0xa2,0x2b,0xf0,0x6b,0x00,0x7e,0x03,0x4c,0x8f,0x1e,0x30,0x3d,0xda,
    0x96,0xd6,0xa3,0x22,0x17,0xe9,0x6d,0x8f,0x8a,0x5d,0x84,0x6b,0x8f,0x4a,0x88,0x59,
    0x60,0x7a,0x54,0x08,0x97,0xfc,0x34,0x9b,0x81,0xa6,0x47,0x25,0xa6,0x47,0x95,0x2e,
    0x8a,0x2b,0xbc,0x0a,0xe1,0xaa,0x3d,0x1a,0xe3,0x22,0xbd,0xf4,0x2a,0x46,0x3c,0x3d,
    0x7b,0x9b,0x98,0x45,0xb1,0x9b,0xc9,0xac,0x35,0xe0,0x53,0xe2,0x52,0x67,0x7e,0x07,
    0x67,0x7e,0xbb,0x39,0xf3,0x6f,0x83,0xeb,0x99,0x7f,0x07,0x4c,0xcf,0xfc,0x2e,0x73,
    0x0e,0x45,0xb7,0xd3,0xaf,0xbd,0xe4,0xdd,0x6b,0xee,0x93,0xf7,0x89,0xbd,0xcf,0xc4,
    0xfe,0x00,0x5c,0x63,0x7f,0x08,0xa6,0xb1,0x9b,0x4d,0x6c,0xd1,0xed,0xf7,0xab,0x99,
    0xd8,0xfb,0xcd,0x1c,0x7c,0x44,0x5d,0xf2,0x2d,0x73,0x9c,0x58,0x1f,0x83,0x1f,0xa0,
    0x17,0xea,0xd7,0x4c,0x2f,0xc4,0xe6,0x13,0x72,0xee,0xc5,0x7e,0x3f,0x79,0x5b,0x4c,
    0x5e,0xb1,0x39,0xe8,0x57,0x0b,0xfe,0x07,0x4d,0xde,0x4f,0x4d,0xde,0x5a,0xff,0x75,
    0x26,0x77,0xf3,0xe7,0x60,0x33,0x5d,0xea,0x5b,0x29,0x66,0x7e,0x07,0x0e,0xe1,0xa7,
    0x4b,0xef,0xf4,0xc3,0xf8,0x1e,0x0a,0x63,0xf5,0x08,0xf7,0xea,0x0b,0x62,0x1d,0xe6,
    0x7b,0x2d,0xd3,0x7c,0x97,0x4a,0x4d,0xca,0xa9,0xc5,0xec,0x6f,0x35,0xb9,0x9b,0xf1,
    0x3f,0x88,0xed,0x2e,0x6c,0x77,0x1a,0xfe,0xbb,0xff,0x83,0xff,0xbb,0x77,0xe0,0xbf,
    0x03,0x9e,0x7b,0xb0,0xd9,0x6d,0x78,0xbe,0x87,0xcf,0x9e,0x3b,0xf0,0xd4,0xdc,0xbb,
    0x0c,0xcf,0x59,0x2e,0xe2,0xda,0x82,0xff,0x4e,0x72,0x88,0xee,0x4b,0xf4,0x47,0xf8,
    0xce,0x94,0xef,0xd8,0x56,0x70,0x9d,0xa7,0xe3,0xcc,0xd3,0x31,0x33,0x4f,0x5f,0x81,
    0xeb,0x3c,0x9d,0x00,0xd3,0x79,0x3a,0x65,0xf6,0x55,0x74,0x27,0xfd,0x3a,0x0d,0xb7,
    0xd3,0x26,0xf6,0x37,0xc4,0x3e,0x63,0x62,0x7f,0x0b,0xae,0xb1,0xcf,0x82,0x69,0xec,
    0x36,0x13,0x5b,0x74,0xe7,0xfc,0x3a,0x4f,0xec,0xf3,0xe6,0x77,0xfa,0x7b,0x62,0x5f,
    0x30,0xbf,0xd3,0x3f,0x80,0x9f,0xe5,0x5b,0xef,0x47,0xb0,0xd5,0x26,0xdf,0x4f,0xe0,
    0x8d,0xe4,0xeb,0x30,0xf9,0x44,0xd7,0xee,0x57,0x07,0xf9,0xda,0xf9,0x7d,0x09,0xbf,
    0xff,0x5d,0xe4,0xd3,0x1a,0xa4,0xbe,0x09,0xd5,0xae,0x83,0xfd,0x10,0xbb,0xd9,0x2e,
    0xb2,0x39,0x8f,0x4f,0xbb,0xe1,0xf3,0x33,0x7c,0xc6,0x19,0x3e,0xbf,0x80,0x2b,0x9f,
    0x4e,0xc3,0x47,0x74,0x17,0xfd,0xea,0x24,0xcf,0x45,0xc3,0x27,0x09,0x9f,0xd9,0xe6,
    0x9e,0x52,0xbb,0x4e,0xc3,0xa7,0xc6,0x45,0x36,0x1d,0xf8,0x5c,0x34,0x7c,0x7e,0x85,
    0xcf,0x31,0xc3,0xe7,0x37,0x70,0xe5,0xd3,0x65,0xf8,0x88,0xee,0x92,0x5f,0x5d,0xe4,
    0xb9,0x64,0xf8,0x4c,0x75,0xd1,0xff,0x2a,0x35,0x2e,0x35,0xaf,0x6a,0xd7,0x65,0xf8,
    0xd4,0xb9,0xc8,0xa6,0x13,0x9f,0x4b,0xd8,0xb6,0x61,0x7b,0xce,0x7c,0xab,0x7f,0x47,
    0xbf,0xe3,0x26,0xcf,0x44,0x97,0xc2,0x83,0x34,0xdf,0x36,0x93,0x67,0x8e,0x8b,0x72,
    0x75,0xe1,0x73,0x0e,0xdb,0x53,0xd8,0x9e,0xe4,0xdc,0x89,0xed,0xd7,0xc4,0x6b,0xe5,
    0xdc,0x25,0x38,0xab,0xf1,0x34,0x9f,0x53,0x26,0x7e,0xad,0x8b,0x72,0xb4,0xe1,0x2f,
    0xf1,0xa6,0x78,0x8f,0x2b,0xe8,0x6e,0xf9,0x29,0x99,0xe0,0xd7,0x3f,0x2d,0x42,0x0d,
    0xb7,0x14,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform sampler3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
