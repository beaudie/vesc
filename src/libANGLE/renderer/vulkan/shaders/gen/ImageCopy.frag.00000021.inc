// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000021.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000021[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x8b,0x97,0x8e,0x55,
    0x14,0xc6,0xdf,0x99,0x6f,0xe6,0x1b,0xc6,0x6d,0x64,0x42,0xa2,0x35,0x83,0xa4,0x46,
    0x43,0x35,0xee,0x46,0xa1,0x5c,0xca,0x25,0xc6,0x44,0x52,0x9a,0x52,0x4c,0x32,0xc5,
    0x28,0x2a,0xb7,0x48,0x46,0x92,0x50,0x51,0x8a,0x12,0x91,0x89,0x54,0x6e,0xa1,0x28,
    0xb7,0x2e,0xa8,0x5c,0xca,0xad,0xfe,0x8b,0x56,0x97,0xb5,0xba,0x9c,0xfd,0xce,0x6f,
    0xcf,0x7a,0xd6,0xb7,0xac,0x9a,0xb5,0xce,0x7a,0xbf,0xfd,0xec,0x7d,0x9e,0xf3,0xec,
    0xbd,0xcf,0x39,0xef,0xf7,0x4d,0x22,0xbd,0x4d,0x56,0x94,0x48,0x8b,0xb2,0xa3,0x3a,
    0xd1,0x2f,0x51,0xcd,0x5f,0xe3,0x28,0x3d,0x4a,0x0b,0xcf,0x7a,0x51,0x32,0x7e,0x0e,
    0x18,0x5c,0x32,0xb8,0xb0,0x72,0xda,0xf8,0xc2,0xa2,0xce,0x9d,0xcc,0xdf,0x30,0x4a,
    0xc4,0x71,0xe6,0x6b,0x14,0x65,0x45,0x19,0xe1,0x69,0x63,0x72,0x59,0x79,0x85,0xe1,
    0xed,0xc2,0xb8,0x18,0x46,0x4e,0x88,0x33,0x3c,0xcb,0x38,0xc2,0xa7,0x76,0x31,0xa7,
    0xcd,0x89,0xa2,0x81,0x51,0x66,0xd4,0x81,0xf5,0xda,0xf0,0x74,0x2c,0x0d,0xac,0x8e,
    0x60,0xe9,0x60,0x39,0x82,0x25,0xc0,0x72,0x05,0xcb,0x00,0x6b,0x2e,0x58,0x26,0x58,
    0x4b,0xc1,0x92,0x60,0x79,0x82,0x65,0x81,0xb5,0x15,0xac,0x0e,0x58,0x7b,0xc1,0xea,
    0x82,0x75,0x10,0x2c,0x1b,0xac,0x93,0x60,0xf5,0xc0,0x8a,0x04,0xab,0x0f,0xd6,0x4d,
    0xb0,0x06,0x60,0xbd,0xe2,0x3a,0x25,0x6a,0xf3,0xb5,0x9a,0x8d,0x09,0xcf,0xd6,0xd4,
    0xc7,0xed,0x7c,0xb1,0xad,0xce,0x57,0x61,0x37,0x09,0xb3,0xd2,0x63,0x7f,0x22,0xae,
    0x8d,0x7d,0x6e,0x1a,0x3e,0x25,0xc9,0x33,0x2f,0xc4,0x67,0x91,0x67,0x32,0x8e,0xcb,
    0x88,0xf3,0x4b,0x82,0x15,0x04,0x3b,0x89,0x9e,0x96,0x85,0x43,0x7a,0xe6,0x06,0x86,
    0x86,0x82,0x37,0x09,0x63,0xc4,0xee,0xa1,0x7d,0xdc,0xb6,0x1a,0x97,0x96,0x9e,0xe9,
    0xed,0x76,0x8b,0x30,0x8a,0xb3,0x17,0xde,0xec,0xb6,0xd5,0x7b,0xeb,0x80,0xb2,0xe2,
    0xcb,0x83,0x9d,0x87,0x06,0xeb,0x6d,0xb3,0x60,0xe7,0x63,0xa7,0xa3,0xab,0x35,0x1a,
    0xf2,0xf1,0xb7,0x45,0x57,0x06,0xfe,0xab,0x99,0x6b,0x78,0x4f,0xec,0x76,0xc2,0x77,
    0x0d,0xf1,0xc6,0x67,0xeb,0x15,0xc0,0x1f,0xc5,0xf5,0xc9,0x89,0x6b,0x9a,0xcf,0x70,
    0x2d,0x05,0xff,0x33,0xf2,0x6a,0x9f,0x19,0xd1,0xf5,0xf4,0xbd,0x03,0xeb,0x9b,0x5d,
    0x08,0x56,0x40,0x7e,0x1d,0xd1,0x63,0xf1,0x9d,0xf0,0xe5,0x8b,0xbf,0x8b,0xe4,0xd3,
    0xb5,0x76,0x6e,0x8d,0xdf,0x9e,0x3d,0xd0,0x6b,0xfe,0xde,0xd4,0x23,0x4f,0xe6,0xf7,
    0x63,0x2f,0x7b,0xfc,0x20,0xd6,0x73,0xff,0x50,0x7a,0x67,0xf3,0xef,0x62,0xbe,0xd5,
    0xeb,0x8a,0xb0,0xd2,0x68,0xa9,0x8f,0xfe,0xa5,0xc9,0x9a,0x77,0xf3,0x79,0x34,0x39,
    0x9a,0x3d,0x06,0xcc,0xd7,0x18,0x9b,0x62,0x97,0x71,0x0e,0x6d,0xfe,0x03,0xe4,0x94,
    0x47,0x4f,0x1e,0xe2,0x73,0x42,0xe2,0xcb,0xd1,0xe0,0xf6,0x64,0xce,0x8e,0xe7,0x34,
    0x3b,0xc5,0x3f,0x1f,0xdd,0xee,0x5f,0x04,0x9f,0xf1,0xbf,0x88,0x4f,0xf9,0x57,0xa4,
    0xec,0xe5,0xd5,0xa2,0xd7,0xec,0x4d,0xb1,0x35,0xa7,0x9f,0xcd,0xaf,0x46,0x9f,0xf7,
    0xe4,0x03,0xe6,0x56,0x0b,0xdf,0x36,0xee,0x00,0xb7,0xf7,0xa6,0xf4,0xfc,0x08,0x67,
    0xda,0xe6,0x5f,0x40,0x4b,0x35,0xf5,0xbb,0xc0,0x3d,0x98,0x88,0x7b,0x9f,0x19,0xe7,
    0x95,0x81,0x1e,0xc3,0x7e,0x0f,0x48,0x26,0xb1,0xad,0xb9,0x03,0xb2,0xc4,0x2e,0x12,
    0xdb,0xfa,0x39,0x4a,0x6c,0x7b,0x56,0xa6,0xd8,0x33,0x52,0xec,0x59,0x62,0x5b,0x6e,
    0x5b,0xc4,0xb6,0xfd,0x75,0x18,0xbb,0x98,0xf3,0xd6,0x9e,0x33,0x35,0x2c,0xa0,0x76,
    0x9e,0xae,0x05,0x6b,0x2f,0x7b,0xa5,0x82,0xb3,0x7b,0x1d,0xfe,0x3e,0x21,0x03,0xdb,
    0xeb,0x37,0x70,0x1e,0x3a,0xc2,0x67,0x31,0x37,0x82,0xcf,0x0b,0x31,0x66,0xdf,0xc4,
    0x3c,0xc3,0x7b,0x87,0x0a,0xb4,0x01,0xf3,0xf8,0xce,0xd4,0xc0,0x7c,0x45,0xd8,0xc6,
    0xdf,0x95,0xfb,0xb2,0x90,0x33,0x54,0xcc,0x5e,0xe8,0x0e,0x5e,0x1d,0x62,0x1a,0xc6,
    0x79,0xd5,0x60,0x76,0x8e,0x7e,0x0b,0x1c,0xc5,0xe8,0xfe,0x33,0xc4,0xf7,0xe4,0x7e,
    0x2d,0xa6,0xee,0xbd,0xe0,0xb6,0x3a,0xdc,0x4c,0xad,0x7b,0xc0,0x6d,0x7d,0xbd,0x05,
    0x7c,0x36,0x76,0x1f,0x30,0x9f,0xd3,0x57,0xe6,0x98,0xde,0xbe,0xc4,0xfc,0x11,0xb8,
    0x7d,0x8d,0x62,0xd1,0x7f,0x2b,0xfa,0xfb,0x89,0xfe,0xdb,0xc0,0x5d,0x7f,0x7f,0x30,
    0xd7,0x3f,0x50,0xf4,0xf7,0x8f,0xef,0xfb,0x28,0xc6,0x8c,0x7b,0x80,0x68,0xb9,0x1d,
    0x2d,0x83,0x44,0xff,0x1d,0xe0,0xae,0x7f,0x30,0x98,0xcf,0x19,0x22,0x73,0x4c,0xff,
    0x10,0x62,0x4c,0xbf,0xaf,0x31,0x50,0xf4,0x0f,0x43,0xff,0x50,0xd1,0x7f,0x27,0xb8,
    0xeb,0x1f,0x0e,0xe6,0xfa,0x4b,0x44,0xbf,0xf9,0x46,0x84,0x51,0x02,0xf7,0x08,0xe9,
    0xfb,0x48,0xb4,0xd8,0xbe,0x33,0xbb,0x14,0x6c,0xa4,0xdc,0x4f,0xbe,0x27,0x4a,0xd1,
    0xe8,0x3c,0x25,0xf0,0xd8,0x9d,0x75,0x0f,0xf7,0x95,0xef,0xc9,0x7b,0xd1,0x3c,0x56,
    0xd6,0xba,0x0f,0xdc,0xed,0x71,0xac,0x3d,0x97,0x3d,0x7a,0x3f,0x31,0xe3,0xe0,0xb1,
    0x3b,0xed,0x41,0x78,0xca,0xa4,0xbe,0xe3,0xc1,0x87,0x87,0x18,0xb3,0x1f,0x66,0x6e,
    0x24,0xd8,0x04,0xb0,0xb4,0xb8,0x2e,0xc9,0xf8,0x3e,0x9c,0x48,0xec,0x04,0x38,0x7c,
    0x8d,0x47,0x58,0xa3,0x5c,0xd6,0x98,0x04,0x3e,0x2e,0xd4,0xc5,0xce,0xe7,0xa3,0xe4,
    0x38,0x91,0x3b,0x72,0x12,0x75,0x19,0x85,0xcf,0x7b,0x55,0x01,0xd7,0x64,0xe9,0xd5,
    0x63,0xe0,0xde,0xab,0xc7,0xc1,0xbc,0x57,0x53,0xa5,0x57,0xe6,0x9b,0x12,0xc6,0x54,
    0x6a,0x3c,0x05,0x6e,0xbb,0x2b,0xa6,0x71,0x0f,0xf9,0x59,0xb1,0x3b,0xf5,0x09,0x70,
    0xd3,0x52,0x89,0xdd,0x3d,0xc4,0x9b,0xef,0x49,0xee,0xf7,0x4a,0xe1,0x98,0x2e,0x1c,
    0x36,0x67,0x3a,0x71,0xee,0x7f,0x0a,0xff,0x20,0x59,0xe3,0x69,0x70,0x8b,0x9f,0x81,
    0xed,0x6b,0x3c,0xc3,0x1a,0x33,0x84,0x63,0xa6,0x70,0xd8,0x9c,0x99,0xc4,0xb9,0x7f,
    0x0e,0xfe,0xd9,0xb2,0xc6,0x5c,0x70,0x8b,0x9f,0x85,0xed,0x6b,0x3c,0xcb,0x1a,0xb3,
    0x84,0x63,0x9e,0x70,0xd8,0x9c,0x79,0xc4,0xd9,0xfe,0xf4,0xda,0x4d,0x95,0xbe,0x3c,
    0x47,0x5f,0xe6,0x4b,0x5f,0x16,0x80,0x7b,0x5f,0x9e,0x07,0xf3,0xbe,0x54,0x49,0x5f,
    0xcc,0xb7,0x30,0x8c,0xe5,0x70,0x2f,0x14,0x2d,0x2f,0xa0,0x65,0x91,0xe4,0xb3,0x18,
    0xdc,0xef,0xf7,0x25,0xc4,0x0c,0x0b,0x6f,0x34,0x7b,0x77,0xbe,0x04,0xb6,0x44,0xee,
    0xf7,0xf4,0x18,0xcf,0x8c,0xfd,0x4b,0x89,0x59,0x2c,0x1c,0x2f,0xd7,0x72,0xd4,0x8d,
    0xed,0x65,0x60,0x4b,0x79,0xb7,0x65,0xca,0x3b,0xd9,0xf7,0xe6,0x32,0x6a,0x52,0x85,
    0xee,0xe5,0x52,0x93,0x57,0xa8,0xc9,0x0a,0xa9,0xc9,0xab,0xe0,0x5e,0x93,0xd7,0xc0,
    0xbc,0x26,0xab,0xa4,0x26,0xe6,0x5b,0x19,0xc6,0x2a,0xb8,0x57,0x4a,0x4d,0x5e,0xbf,
    0x44,0x4d,0xde,0x00,0xdf,0x03,0xf7,0x9b,0x60,0xab,0xd1,0xe8,0x3c,0xf6,0xfc,0x35,
    0xb0,0x58,0xcc,0x5b,0x68,0x58,0x4e,0xfc,0x4a,0x74,0xac,0x15,0x1d,0x16,0xb3,0x26,
    0x8c,0xb5,0xcc,0x5f,0x23,0x3a,0xde,0xbe,0x84,0x8e,0x77,0xc0,0xbd,0xae,0xeb,0x52,
    0x7a,0xf3,0x2e,0xd8,0xba,0x94,0xde,0xd8,0x3d,0x62,0xfe,0xf5,0x70,0xf8,0xa8,0xa2,
    0x67,0x1b,0x98,0xbb,0x5e,0xb8,0xdf,0x4b,0xe9,0xd9,0x46,0xb0,0x0d,0xff,0xd1,0xb3,
    0x8d,0xd4,0xc3,0xf3,0x59,0x9b,0xd2,0xc3,0x2a,0xe1,0x7f,0x1f,0x7e,0xdb,0x37,0x66,
    0x6f,0x06,0xdb,0x24,0x7c,0x9b,0x25,0x7e,0x2b,0xf1,0x15,0x7c,0x07,0xfb,0x10,0xcc,
    0x62,0xb7,0x60,0xfb,0xfe,0xf8,0x88,0xfd,0xb1,0x4d,0xf6,0xc7,0xc7,0xe0,0xbe,0x3f,
    0x3e,0x01,0xf3,0xfd,0xb1,0x43,0xfa,0x62,0xbe,0xed,0x71,0xbf,0x6b,0x74,0x6f,0x87,
    0xc7,0xd6,0xdd,0xc9,0x77,0x22,0x7f,0xef,0xec,0x02,0xdb,0x29,0xdf,0xd1,0x3c,0x76,
    0x77,0x6d,0x6c,0xdd,0xd8,0xfe,0x14,0x6c,0x97,0xd4,0x30,0x5d,0x6a,0xb8,0x85,0x18,
    0xab,0xd9,0x0e,0xd6,0xde,0x23,0x79,0xed,0x23,0xaf,0xbd,0x92,0xd7,0x67,0xe0,0x9e,
    0xd7,0xe7,0x60,0x9e,0xd7,0x01,0xc9,0xcb,0x7c,0xfb,0xc3,0x38,0x04,0xf7,0x7e,0x79,
    0xb7,0x7f,0x81,0xd6,0x45,0xf2,0x2e,0xf9,0x12,0xdc,0x63,0x0e,0x12,0xe3,0x77,0xf0,
    0x41,0x62,0x4c,0xef,0x01,0x38,0x0f,0xc9,0xfb,0xe9,0x28,0x7a,0x8f,0x08,0xe7,0x57,
    0xe0,0x36,0xff,0x30,0xb6,0xfb,0xbe,0xe6,0xfb,0xe5,0x51,0xde,0x85,0xdf,0x80,0x95,
    0x4b,0x7e,0xdf,0x82,0x8f,0x25,0xbf,0xe3,0x92,0x9f,0xf9,0x8e,0x85,0x71,0x1c,0x2d,
    0xc7,0x44,0xfb,0x09,0xb4,0xfb,0xdd,0x7e,0x02,0x0e,0xd3,0xee,0xf1,0xc7,0x45,0xcb,
    0x77,0x29,0x5a,0xbe,0x07,0xeb,0x22,0x5a,0x7e,0x00,0x77,0x2d,0xa7,0x44,0x8b,0xf9,
    0x4e,0x86,0x71,0x0a,0xee,0x93,0xa2,0xe5,0x34,0x5a,0xfc,0x1d,0x70,0x5a,0xb4,0x78,
    0xfc,0x29,0xd1,0x72,0x26,0x45,0xcb,0x8f,0x60,0xdb,0x44,0xcb,0x4f,0xe0,0xae,0xe5,
    0x9c,0x68,0x31,0xdf,0xd9,0x30,0xce,0xc1,0x7d,0x56,0xb4,0x9c,0x97,0xbe,0x9b,0x96,
    0xf3,0x7c,0x1f,0x37,0x2d,0x1e,0x7f,0x2e,0xa5,0xc7,0x07,0x52,0xf6,0xe8,0x0e,0xd9,
    0xf3,0x3f,0xc3,0x67,0x5c,0x17,0xb1,0xff,0x0a,0x37,0x51,0xb7,0x30,0xba,0xf0,0x5e,
    0xcc,0x46,0x9b,0xfd,0x46,0xea,0x1a,0xe2,0xb2,0xf8,0x7d,0x64,0x5c,0xf5,0xe4,0xbe,
    0xab,0x0f,0xbe,0x8f,0x1c,0x1b,0x81,0x35,0x20,0xc7,0xc6,0x92,0x63,0x23,0xfe,0xcf,
    0xd3,0x14,0x9e,0x1c,0xe1,0xb9,0x0c,0x9e,0x05,0xac,0x9f,0x0b,0x66,0xff,0x9b,0xf8,
    0x3b,0xc4,0xe6,0x32,0xa7,0xa9,0xcc,0x69,0xc6,0x9c,0xfa,0x41,0x5d,0x32,0xfe,0x3d,
    0x5c,0x73,0x9f,0xb6,0xc0,0xd7,0x5c,0xf8,0xae,0xc4,0xdf,0x22,0x7e,0x4f,0xd7,0x60,
    0xad,0xc0,0x5b,0xb2,0x46,0x2b,0xd6,0x30,0xcd,0xff,0x50,0x8f,0x7f,0x01,0x75,0xf3,
    0xff,0xc4,0x48,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
