// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x6f,0x4f,0x13,0x41,
    0x10,0x87,0x97,0xbb,0xe3,0x00,0x0b,0x42,0xa5,0x14,0x10,0x5a,0xb1,0x05,0x41,0x68,
    0xa0,0x6a,0x5b,0x9b,0x68,0x09,0x35,0xc5,0x22,0x54,0xdf,0xf8,0x09,0x4c,0x78,0xe3,
    0x0b,0x8d,0x09,0x7c,0x04,0xe2,0xc7,0xf2,0x95,0x84,0x8f,0xc4,0x1f,0x63,0x74,0x66,
    0xef,0x59,0x32,0xb9,0x4b,0x36,0x7b,0xf3,0xec,0x6f,0x66,0x67,0x67,0xf6,0x2e,0x8e,
    0xea,0x13,0xce,0x8d,0xb9,0x07,0x6e,0xd2,0x7d,0x72,0xd9,0x53,0x74,0x91,0x10,0xe7,
    0x0a,0x2e,0xf5,0xf3,0x70,0xf4,0x79,0xb4,0x7b,0x76,0x7e,0xba,0xdb,0x6a,0x37,0x75,
    0xfd,0xa1,0x8b,0xbd,0x4e,0xd7,0x66,0x45,0x33,0x2e,0x73,0x22,0xe3,0xdb,0x97,0xaf,
    0xdf,0x9d,0xf7,0x73,0x6e,0x4e,0x78,0xe2,0x63,0xe9,0x7b,0xa6,0xf5,0xb1,0x84,0x16,
    0xd0,0xac,0x62,0x2f,0xc8,0x9c,0x12,0xe3,0x48,0xa2,0x95,0xc9,0xa3,0xce,0x1c,0xd8,
    0x18,0x6c,0xce,0xb0,0x08,0x56,0x32,0x2c,0x86,0xad,0x1b,0x96,0xc0,0xb6,0x0c,0x1b,
    0x87,0x35,0x0c,0x4b,0x61,0x4d,0xc3,0x26,0x60,0x2d,0x9f,0x6f,0x7c,0xbf,0xaf,0xe6,
    0xde,0xce,0xe5,0xde,0xc9,0xe5,0xae,0xfa,0x0e,0x39,0xa9,0xbe,0x2b,0x73,0xed,0x7e,
    0x2d,0xb3,0x9f,0x1a,0xfb,0x84,0xda,0x2c,0xcb,0x98,0x97,0x5d,0x22,0xbf,0x1e,0x7b,
    0x7f,0x7d,0x5f,0x10,0x8d,0xee,0xb7,0x86,0xcf,0xa2,0xd8,0x53,0xe4,0x10,0x7b,0x9e,
    0x48,0x2f,0xb3,0x5a,0x29,0x7f,0x83,0x5d,0x80,0xed,0xe0,0x3f,0x8d,0xbf,0xea,0x67,
    0x58,0x53,0x5e,0x96,0x28,0x45,0xe2,0x6b,0xec,0x79,0x7a,0x98,0x18,0xdf,0x12,0xf6,
    0xaa,0xe9,0x9d,0xb2,0xaa,0xec,0x54,0xf6,0x79,0x67,0x2c,0xac,0xe5,0x87,0xee,0xb9,
    0x48,0x7e,0x65,0x72,0x54,0x7b,0x09,0xa6,0x67,0x5c,0x26,0x87,0x90,0xb3,0xda,0x8f,
    0xe9,0x99,0xfa,0xaf,0xa0,0x4d,0xcd,0x7a,0x35,0x67,0xd7,0xe8,0x5d,0x49,0x2a,0xf7,
    0xdc,0xf0,0x3d,0x6a,0x19,0xec,0x26,0xb5,0x08,0xe7,0x7b,0x25,0xe3,0x9f,0x8c,0x8a,
    0xd4,0x22,0xf4,0xb7,0x4a,0x1f,0xdb,0xec,0xff,0x9a,0x18,0x1d,0xf2,0x57,0xbb,0x9b,
    0x8b,0xfb,0x56,0xc6,0xa4,0xb1,0x0f,0xb8,0xbb,0xc1,0x1e,0x70,0x66,0x8d,0x37,0xc4,
    0x37,0x35,0x79,0x7c,0x30,0x7a,0xb5,0x8f,0xa9,0x47,0x43,0x2c,0x3d,0xfb,0x09,0x9a,
    0x63,0x46,0x47,0xaa,0x13,0xd1,0x1b,0xc7,0x7d,0xb8,0x11,0xa2,0x35,0xbb,0x16,0x6b,
    0x04,0xff,0x23,0xef,0xda,0xff,0x8f,0xac,0xeb,0xdc,0x17,0xd5,0x8c,0xff,0xb6,0xb3,
    0xbb,0xa2,0xeb,0x3d,0xf6,0x9d,0x85,0xff,0x10,0x5b,0xef,0xc2,0x23,0x98,0xfa,0xac,
    0xf0,0x1d,0x2f,0xd1,0x9f,0xe0,0x53,0x81,0x07,0xcd,0x13,0x34,0x55,0xa3,0x59,0x83,
    0x5f,0x88,0x26,0xe5,0x3b,0xa8,0xc0,0x83,0x5f,0x1d,0xbf,0x9a,0xf1,0x5b,0x87,0x07,
    0xbf,0x0d,0x7c,0x95,0xff,0x84,0x3d,0x83,0x97,0x4c,0xde,0x9b,0xf0,0x69,0x51,0x14,
    0xf9,0x17,0x84,0xef,0x44,0xd7,0x7e,0x89,0xaf,0xde,0x93,0x6d,0xce,0xb8,0x45,0xdd,
    0x1a,0xd4,0xed,0x4e,0xe2,0x6c,0xfb,0x7e,0x64,0xff,0x0c,0xad,0x9d,0xbe,0xdf,0xca,
    0x3c,0xc2,0x6e,0xf8,0xdc,0x53,0x9f,0xfb,0x0b,0x72,0xdf,0xe3,0x8e,0x85,0xfc,0x5f,
    0xb2,0x76,0x45,0xae,0x2d,0x98,0xde,0xbb,0xdf,0xb0,0x1e,0x5c,0xef,0xd0,0x25,0x6c,
    0x1f,0xd6,0x33,0xba,0x3e,0xec,0xc0,0xe8,0xde,0xa1,0xed,0x1b,0xdd,0x21,0xba,0x81,
    0xd1,0xbd,0x47,0x7b,0x48,0xce,0x43,0xff,0x0f,0xcb,0xee,0x71,0x93,0x1e,0xef,0xcb,
    0xf9,0x8f,0xd0,0xda,0x73,0xea,0xfc,0x57,0xaa,0xd7,0x95,0xf1,0x1f,0x56,0x01,0xd5,
    0xae,0x44,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//  uint byteData = params . rawData[0]& 0xFF;
//     dataBuffer[threadId]=(byteData)|(byteData << 8)|(byteData << 16)|(byteData << 24);
//
// }
