// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x95,0x7b,0x4b,0x55,0x41,
    0x14,0xc5,0xc7,0x7b,0xf5,0x5a,0x69,0x3e,0xf2,0x91,0x89,0x8a,0x8f,0x12,0xcc,0xb7,
    0x69,0x99,0x92,0x8f,0x1e,0x2a,0x24,0x26,0x24,0x42,0x20,0x65,0x99,0x69,0x98,0x8f,
    0x52,0x4a,0x2c,0xca,0x34,0x02,0xcb,0xd4,0x7f,0xec,0x23,0x44,0x14,0x44,0x9f,0xa0,
    0x6f,0xd5,0x9b,0xa0,0xbd,0xe7,0xfc,0xc6,0x36,0x17,0x13,0xc6,0x39,0xb3,0xf6,0x9a,
    0xbd,0xd7,0x9a,0x3d,0xe7,0xdc,0x78,0xac,0x2a,0xdd,0xb9,0x14,0x77,0xc8,0x1d,0x70,
    0x6f,0x5d,0xf4,0x97,0xeb,0x62,0x82,0x38,0x97,0xe1,0x12,0x7e,0xee,0x1f,0xbc,0x3a,
    0xd8,0xb0,0xb8,0x74,0xbb,0xa1,0xb5,0xad,0x49,0xe3,0x59,0x2e,0xee,0x79,0x1a,0xcb,
    0x16,0x4e,0x9a,0xcc,0xa9,0x32,0x66,0x6f,0xde,0x9d,0x73,0x7e,0x9f,0x73,0x39,0x82,
    0xa7,0xfa,0x5c,0x11,0x31,0x05,0x7e,0xbf,0xa0,0x19,0x70,0x4a,0x58,0x1f,0x91,0x39,
    0x41,0x8e,0x01,0xc9,0x96,0x87,0x8e,0x2a,0xe6,0x80,0xa5,0x80,0xe5,0x18,0x2c,0x06,
    0x96,0x6f,0xb0,0x38,0x58,0x91,0xc1,0x52,0xc1,0xa2,0x9a,0xf1,0xbd,0xbd,0x5a,0xbf,
    0x39,0xa9,0x7e,0x4b,0x52,0x7d,0xe5,0xb7,0x90,0x57,0xf9,0xad,0x32,0x57,0xee,0xc5,
    0xa2,0x75,0x85,0x59,0x6f,0xe1,0xef,0x98,0x8c,0x3c,0xa9,0x12,0xf3,0xf1,0xb8,0xdf,
    0xaf,0xcf,0x05,0xc2,0xd1,0x7a,0xe5,0xec,0x39,0x2a,0xeb,0x83,0x68,0x88,0x7b,0x3c,
    0x55,0xfa,0x11,0xf9,0x55,0xbc,0x93,0x75,0x06,0x58,0x2d,0xfb,0x33,0xd9,0xaf,0xfc,
    0xc3,0xc4,0x12,0x26,0x9e,0x8b,0xa7,0x12,0x73,0xc6,0x8a,0x95,0xb9,0x74,0xef,0x3f,
    0x60,0x76,0x68,0xae,0x7c,0xea,0xe6,0x51,0x3b,0xdf,0x6b,0x8e,0x30,0xd5,0x5e,0x88,
    0xf6,0xa0,0xa5,0xd0,0x7b,0x88,0xd6,0xba,0xbf,0x08,0x6e,0xc2,0xc4,0x4b,0xf0,0x56,
    0x6b,0xf6,0xc7,0x7c,0xdf,0x62,0xfe,0x9c,0x83,0xe6,0x9a,0x24,0x8f,0x75,0xf0,0x4a,
    0x65,0x77,0xe8,0x53,0x19,0xfd,0x68,0xa6,0xde,0x29,0x38,0x2d,0xe8,0xd5,0x75,0x2b,
    0x58,0xa8,0xd7,0x66,0xce,0xea,0x2c,0x31,0xab,0xaf,0x97,0xb3,0x0a,0x75,0x27,0xd1,
    0x5b,0x28,0xff,0x57,0xd0,0x1b,0x62,0x6f,0xb8,0xd3,0x75,0xb2,0x52,0x9f,0x5b,0x60,
    0x35,0x8c,0xd3,0x72,0x87,0x62,0xe4,0x73,0xe4,0xf9,0x21,0x88,0xbe,0x27,0xdf,0x65,
    0xb5,0x0d,0xfe,0x5b,0x9e,0xb5,0x87,0x3b,0xc4,0x77,0xbc,0x8e,0x34,0xdf,0xcb,0x2c,
    0xfa,0xad,0xf1,0x73,0xd4,0xcd,0x06,0x57,0x4e,0x11,0xf7,0xab,0x80,0xb3,0x0f,0x9c,
    0x62,0xf0,0xc0,0x29,0x85,0x53,0x62,0x38,0x65,0xe0,0x81,0x53,0x01,0xa7,0xdc,0x70,
    0x2a,0xc1,0x3f,0x09,0x47,0xfb,0x73,0x9c,0xfa,0x95,0x78,0xa8,0xc6,0xc3,0x2f,0xe1,
    0x6b,0xec,0x84,0x8c,0x6a,0x7c,0xe8,0xf3,0x4f,0x99,0xb7,0x59,0x2b,0xfe,0x81,0x3c,
    0x27,0xa9,0x5f,0x63,0xb0,0x7a,0x30,0xed,0xf5,0x3b,0xb0,0x06,0xb8,0xf5,0xd4,0x6b,
    0x32,0xf5,0x34,0xd6,0xe8,0x7b,0x1d,0xe5,0x6f,0xf4,0x5e,0x12,0xde,0xcb,0x19,0xbc,
    0xb4,0x31,0x82,0x9f,0x76,0x62,0xca,0xd3,0xfe,0x77,0x70,0x47,0xda,0xf0,0xd5,0x25,
    0x35,0x3a,0xe0,0xa9,0xf6,0x26,0x72,0x6b,0x8d,0x0d,0xd1,0x94,0xf0,0xb9,0x22,0x9d,
    0xb9,0x46,0x7b,0x17,0x78,0x26,0x3a,0x7b,0x8c,0x4e,0x8d,0x75,0xcb,0xe8,0x21,0x57,
    0xb7,0x39,0xf3,0xf3,0xe8,0xec,0x35,0x1a,0x2f,0x80,0x7f,0x24,0xf7,0x45,0x30,0xcd,
    0xfd,0x5e,0x38,0x8a,0x5d,0x02,0x57,0x8d,0x21,0xaf,0xce,0x5f,0xe5,0x9d,0xd6,0x78,
    0x1f,0x9a,0x3a,0xe1,0x76,0xa3,0x6b,0xc0,0xe8,0xea,0xf3,0xdf,0x29,0xe7,0x26,0xd8,
    0xaf,0xcf,0x2f,0xf1,0x78,0xd9,0x78,0xd4,0x1a,0x43,0x70,0x86,0xa8,0xa1,0xef,0xca,
    0x2e,0xe7,0xa6,0xfb,0x6e,0xc9,0xb8,0x22,0xe3,0x09,0x1e,0x46,0x88,0x7f,0xc6,0xc3,
    0x28,0x98,0xe6,0xfd,0x26,0x9c,0x61,0xf8,0x41,0xcb,0x28,0xeb,0x61,0xea,0xe8,0xf3,
    0x0b,0xb4,0x5c,0x63,0x9f,0xf6,0x67,0x15,0x6c,0x0c,0x7c,0xc4,0xf4,0xfc,0xba,0xe9,
    0xf9,0xae,0x39,0xcf,0x1b,0xc4,0x42,0xcf,0xc7,0x4d,0xcf,0xc7,0xe8,0xf9,0x38,0x3c,
    0xcd,0x5f,0x88,0x9f,0x5d,0xde,0x29,0xeb,0x7f,0x98,0xf5,0x00,0xeb,0x09,0x73,0x07,
    0xee,0x70,0x66,0x93,0x9c,0xf5,0xb4,0xf1,0xa7,0xb1,0x29,0x19,0xf3,0xec,0x9b,0x32,
    0xf7,0x69,0x06,0x6f,0x93,0xc6,0xcb,0x3d,0xe3,0x65,0xc6,0x78,0x99,0x25,0x16,0xbc,
    0xcc,0xed,0x73,0x7f,0xe7,0xe0,0xa9,0xce,0x69,0xea,0xcd,0x9b,0x3b,0xb7,0xb0,0xcf,
    0x9d,0xbb,0x0f,0x1e,0xee,0xdc,0x03,0xb0,0x70,0x9f,0x97,0x8c,0x17,0x8d,0x2d,0xca,
    0x58,0x22,0xf7,0xa2,0xd1,0xfd,0xf0,0x3f,0xef,0xdd,0x23,0x62,0x41,0xf7,0xf2,0x3e,
    0xba,0x97,0xe1,0x2d,0xc8,0x1e,0xfd,0xd6,0x3e,0x26,0x16,0xee,0xe4,0x53,0xbe,0x3b,
    0xb9,0x86,0xf3,0x0c,0x3c,0x53,0x18,0x2b,0xbe,0x7f,0xff,0x7e,0x2f,0x35,0xf6,0x05,
    0x3f,0xcf,0xc9,0xb7,0x8a,0x9f,0x75,0xe3,0x47,0x63,0x6b,0x32,0xd6,0xf1,0xb3,0x96,
    0xf4,0xdd,0x5a,0x37,0xf7,0x6e,0x03,0x4d,0xc5,0xc6,0xf3,0x2b,0xe3,0xd9,0x7e,0x83,
    0x5f,0x13,0x0b,0x9e,0x37,0x8d,0xe7,0x0d,0x3c,0x6f,0xc2,0xd3,0x7a,0xe1,0x3c,0x97,
    0x92,0x7a,0x37,0x9d,0x74,0xe7,0x06,0x92,0xbe,0x4d,0x4d,0x49,0x7a,0x75,0xfe,0x23,
    0xa7,0xd0,0x2e,0xe3,0x2f,0x97,0xee,0x91,0xc9,0xd8,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 256, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint data[4];
//     uint texelCount;
//     uint maxThreadId;
//     uint dataSize;
//     bool hasDepthAndStencil;
// } params;
//
// void main()
// {
//     uint threadId = gl_GlobalInvocationID . x;
//     uint texelCount = params . texelCount;
//     uint dataSize = params . dataSize;
//
//     if(threadId >= params . maxThreadId)
//     {
//         return;
//     }
//
//     if(dataSize == 1 || dataSize == 2)
//     {
//         dataBuffer[threadId]= params . data[0];
//     }
//     else if(dataSize % 4 == 0 && ! params . hasDepthAndStencil)
//     {
//         uint dataCount = dataSize / 4;
//         for(int i = 0;i < dataCount;i ++)
//         {
//             dataBuffer[dataCount * threadId + i]= params . data[i];
//         }
//     }
//     else if(dataSize == 3)
//     {
//         dataBuffer[threadId]= params . data[threadId % 3];
//     }
//     else if(params . hasDepthAndStencil)
//     {
//         dataBuffer[threadId]= params . data[0];
//         if(threadId >= ceil(params . maxThreadId / 4))
//         {
//             return;
//         }
//         uint offset = texelCount;
//         dataBuffer[threadId + offset]= params . data[1];
//     }
// }
