// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x95,0xfb,0x4a,0x55,0x41,
    0x14,0xc6,0xc7,0x73,0xf4,0x68,0x69,0xea,0xc9,0x4b,0x16,0x27,0x49,0x2d,0xc1,0xbc,
    0x9b,0x96,0x29,0x69,0x57,0x13,0x12,0x13,0x12,0x21,0x90,0xb2,0xcc,0x34,0xcc,0x4b,
    0x29,0x25,0x16,0x65,0x9a,0x41,0x76,0xf5,0x1f,0x7b,0x83,0x88,0x82,0xe8,0x09,0x7a,
    0x96,0x5e,0xa2,0x3b,0x41,0x6b,0xcd,0xfe,0x4d,0x2e,0x0e,0x26,0x8c,0xb3,0xe7,0x5b,
    0xdf,0xac,0xf5,0x7d,0xb3,0x66,0xef,0x13,0x8f,0x55,0x65,0x3b,0x97,0xe1,0xb6,0xbb,
    0x1c,0xf7,0xc6,0x45,0x7f,0x49,0x17,0x13,0xc4,0xb9,0x5c,0x97,0xf0,0xf3,0xd9,0xbe,
    0x0b,0x7d,0x0d,0x73,0xf3,0xd7,0x1a,0x5a,0xdb,0x9a,0x34,0x9e,0xef,0xe2,0x9e,0xa7,
    0xb1,0x02,0xe1,0x64,0xc9,0x9c,0x29,0x63,0xea,0xca,0x8d,0x69,0xe7,0xf7,0x39,0x57,
    0x28,0x78,0xa6,0xcf,0xa5,0xcf,0x11,0xd7,0xe7,0x12,0x34,0x17,0x4e,0x8a,0xf5,0x4e,
    0x99,0x13,0xe4,0xe8,0x95,0x6c,0x45,0xe8,0xa8,0x62,0x0e,0x58,0x06,0x58,0xa1,0xc1,
    0x62,0x60,0xc5,0x06,0x8b,0x83,0x95,0x19,0x2c,0x13,0x2c,0xaa,0x19,0xff,0xb7,0x57,
    0xeb,0x37,0xa7,0xd5,0x6f,0x49,0xab,0xaf,0xfc,0x16,0xf2,0x2a,0xbf,0x55,0xe6,0xca,
    0x7f,0xb1,0x68,0x5d,0x61,0xd6,0xaf,0xf0,0xb7,0x5b,0x46,0x91,0x54,0x89,0xf9,0x78,
    0xdc,0xef,0xd7,0xe7,0x12,0xe1,0x68,0xbd,0x7d,0xec,0xd9,0x25,0xeb,0x6d,0x68,0x88,
    0x7b,0x3c,0x53,0xfa,0x11,0xf9,0x55,0xbc,0x93,0x75,0x2e,0x58,0x2d,0xfb,0xf3,0xd8,
    0xaf,0xfc,0x1d,0xc4,0x12,0x26,0x9e,0xc4,0x53,0xca,0x9c,0xb1,0x62,0xe5,0x2e,0xdb,
    0xfb,0x0f,0x98,0x1d,0x9a,0xab,0x98,0xba,0x45,0xd4,0x2e,0xf6,0x9a,0x23,0x4c,0xb5,
    0x97,0xa2,0x3d,0x68,0x29,0xf5,0x1e,0xa2,0xb5,0xee,0x2f,0x83,0x9b,0x30,0xf1,0x14,
    0xde,0x6a,0xcd,0xfe,0x98,0xef,0x5b,0xcc,0x9f,0x73,0xd0,0x5c,0x93,0xe6,0xb1,0x0e,
    0xde,0x5e,0xd9,0x1d,0xfa,0x54,0x4e,0x3f,0x9a,0xa9,0x77,0x08,0x4e,0x0b,0x7a,0x75,
    0xdd,0x0a,0x16,0xea,0xb5,0x99,0xb3,0x3a,0x4a,0xcc,0xea,0x3b,0xc1,0x59,0x85,0xba,
    0x63,0xe8,0x2d,0x95,0xff,0x8b,0xe8,0x0d,0xb1,0x55,0x19,0x39,0x19,0x9b,0xeb,0x97,
    0xdc,0xc9,0x3a,0x59,0xa9,0xef,0x57,0x60,0x35,0x8c,0xc3,0x72,0xa7,0x62,0xe4,0x77,
    0xe4,0xfd,0x21,0x88,0xbe,0x37,0xdf,0x65,0xf5,0x1a,0xfc,0xb7,0x3c,0x6b,0x4f,0xd7,
    0x89,0xaf,0x7b,0x5d,0x59,0xbe,0xb7,0xf9,0xf4,0x5f,0xe3,0xc7,0xa8,0x5b,0x00,0xae,
    0x9c,0x32,0xee,0x5b,0x09,0xbd,0x08,0x9c,0x3d,0xe0,0x81,0xb3,0x17,0x4e,0xca,0x70,
    0xca,0xc1,0x03,0xa7,0x02,0xce,0x3e,0xc3,0xa9,0x04,0xff,0x28,0x1c,0xed,0xd7,0x7e,
    0xea,0x57,0xe2,0xa1,0x1a,0x0f,0xbf,0x84,0xaf,0xb1,0x03,0x32,0xaa,0xf1,0xa1,0xcf,
    0x3f,0x65,0x7e,0xcd,0x5a,0xf1,0xf7,0xe4,0x39,0x48,0xfd,0x1a,0x83,0xd5,0x83,0x69,
    0xef,0xdf,0x82,0x35,0xc0,0xad,0xa7,0x5e,0x93,0xa9,0xa7,0xb1,0x46,0xdf,0xfb,0x28,
    0x7f,0xa3,0xf7,0x92,0xf0,0x5e,0x8e,0xe0,0xa5,0x8d,0x11,0xfc,0xb4,0x13,0x53,0x9e,
    0xde,0x87,0x0e,0xee,0x4c,0x1b,0xbe,0xba,0xa4,0x46,0x07,0x3c,0xd5,0xde,0x44,0x6e,
    0xad,0xf1,0x54,0x34,0x25,0x7c,0xae,0x48,0x67,0xd2,0x68,0xef,0x02,0xcf,0x43,0xe7,
    0x71,0xa3,0x53,0x63,0xdd,0x32,0x8e,0x93,0xab,0xdb,0x9c,0xf9,0x49,0x74,0x9e,0x30,
    0x1a,0x4f,0x81,0x7f,0x20,0xf7,0x69,0x30,0xcd,0xfd,0x4e,0x38,0x8a,0x9d,0x01,0x57,
    0x8d,0x21,0xaf,0xce,0x5f,0xe5,0x1d,0xd7,0x78,0x0f,0x9a,0x3a,0xe1,0x76,0xa3,0xab,
    0xd7,0xe8,0xea,0xf1,0xdf,0x2d,0xe7,0x46,0xd9,0xaf,0xcf,0x4f,0xf0,0x78,0xce,0x78,
    0xd4,0x1a,0xfd,0x70,0xfa,0xa9,0xa1,0xef,0xce,0x06,0xe7,0xa6,0xfb,0xae,0xca,0x38,
    0x2f,0xe3,0x3e,0x1e,0x06,0x89,0x7f,0xc2,0xc3,0x10,0x98,0xe6,0xfd,0x26,0x9c,0x01,
    0xf8,0x41,0xcb,0x10,0xeb,0x01,0xea,0xe8,0xf3,0x63,0xb4,0x5c,0x64,0x9f,0xf6,0x67,
    0x09,0x6c,0x18,0x7c,0xd0,0xf4,0xfc,0x92,0xe9,0xf9,0x86,0x39,0xcf,0xcb,0xc4,0x42,
    0xcf,0x47,0x4c,0xcf,0x87,0xe9,0xf9,0x08,0x3c,0xcd,0x5f,0x8a,0x9f,0x0d,0xde,0x29,
    0xeb,0x7f,0x80,0x75,0x2f,0xeb,0x51,0x73,0x07,0xae,0x73,0x66,0x63,0x9c,0xf5,0x84,
    0xf1,0xa7,0xb1,0x71,0x19,0x33,0xec,0x1b,0x37,0xf7,0x69,0x12,0x6f,0x63,0xc6,0xcb,
    0x4d,0xe3,0x65,0xd2,0x78,0x99,0x22,0x16,0xbc,0x4c,0x6f,0x71,0x7f,0xa7,0xe1,0xa9,
    0xce,0x09,0xea,0xcd,0x98,0x3b,0x37,0xbb,0xc5,0x9d,0xbb,0x05,0x1e,0xee,0xdc,0x6d,
    0xb0,0x70,0x9f,0xe7,0x8d,0x17,0x8d,0xcd,0xc9,0x98,0x27,0xf7,0x9c,0xd1,0x7d,0xe7,
    0x3f,0xef,0xdd,0x5d,0x62,0x41,0xf7,0xc2,0x16,0xba,0x17,0xe0,0xcd,0xca,0x1e,0xfd,
    0xf6,0xde,0x23,0x16,0xee,0xe4,0x03,0xbe,0x3b,0x49,0xc3,0x79,0x08,0x9e,0x27,0x8c,
    0x45,0xdf,0xbf,0xcd,0xdf,0x4f,0x8d,0x7d,0xc6,0xcf,0x23,0xf2,0x2d,0xe1,0x67,0xc5,
    0xf8,0xd1,0xd8,0xb2,0x8c,0x15,0xfc,0x2c,0xa7,0x7d,0xb7,0x14,0xff,0x22,0xbc,0x3a,
    0xbe,0x4d,0xab,0xe6,0x1e,0xae,0xa1,0x71,0x8f,0x39,0x83,0x67,0xe6,0x0c,0xec,0x37,
    0xf9,0x39,0xb1,0x70,0x06,0x2f,0xcc,0x19,0xac,0x71,0x06,0x2f,0xe0,0x69,0xfd,0x70,
    0xbe,0xf3,0x69,0xbd,0x9c,0x48,0xbb,0x83,0xbd,0x69,0xdf,0xaa,0xa6,0x34,0xfd,0x3a,
    0xff,0x91,0x53,0x69,0x97,0xf1,0x17,0xdb,0xd6,0x52,0x11,0xf8,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint data[4];
//     uint texelCount;
//  uint maxThreadId;
//  uint dataSize;
//  bool hasDepthAndStencil;
// } params;
//
// void main()
// {
//     uint threadId = gl_GlobalInvocationID . x;
//     uint texelCount = params . texelCount;
//  uint dataSize = params . dataSize;
//
//  if(threadId >= params . maxThreadId)
//  {
//   return;
//  }
//
//  if(dataSize == 1 || dataSize == 2)
//  {
//   dataBuffer[threadId]= params . data[0];
//  }
//  else if(dataSize % 4 == 0 && ! params . hasDepthAndStencil)
//  {
//   uint dataCount = dataSize / 4;
//   for(int i = 0;i < dataCount;i ++)
//   {
//    dataBuffer[dataCount * threadId + i]= params . data[i];
//   }
//  }
//  else if(dataSize == 3)
//  {
//   dataBuffer[threadId]= params . data[threadId % 3];
//  }
//  else if(params . hasDepthAndStencil)
//  {
//         dataBuffer[threadId]= params . data[0];
//         if(threadId >= ceil(params . maxThreadId / 4))
//         {
//             return;
//         }
//
//         barrier();
//         uint offset = texelCount;
//         dataBuffer[threadId + offset]= params . data[1];
//  }
// }
