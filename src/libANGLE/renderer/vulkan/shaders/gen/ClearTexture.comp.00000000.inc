// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x95,0x7b,0x4b,0x55,0x41,
    0x14,0xc5,0xc7,0x7b,0xf5,0x5a,0x69,0xea,0xcd,0x47,0x26,0x2a,0x3e,0x4a,0x30,0xdf,
    0xa6,0x65,0x4a,0x3e,0x7a,0x98,0x90,0x98,0x90,0x08,0x81,0x94,0x65,0xa6,0x61,0x3e,
    0x4a,0x29,0xb1,0x28,0xd3,0x08,0x2c,0x4b,0xff,0xb1,0x8f,0x10,0x51,0x10,0x7d,0x82,
    0xbe,0x55,0x6f,0x82,0xf6,0x9e,0xf3,0x1b,0xdb,0x5c,0x4c,0x18,0xe7,0xcc,0xda,0x6b,
    0xf6,0x5e,0x6b,0xf6,0x9c,0x73,0xe3,0xb1,0xea,0x4c,0xe7,0xd2,0xdc,0x01,0xb7,0xcf,
    0xbd,0x75,0xd1,0x5f,0xd2,0xc5,0x04,0x71,0x2e,0xcb,0x25,0xfc,0x7c,0x71,0xf0,0xca,
    0x60,0xe3,0xe2,0xd2,0xad,0xc6,0xb6,0xf6,0x66,0x8d,0xe7,0xb8,0xb8,0xe7,0x69,0x2c,
    0x57,0x38,0x19,0x32,0xa7,0xcb,0x98,0xbd,0x71,0x67,0xce,0xf9,0x7d,0xce,0xe5,0x09,
    0x9e,0xee,0x73,0xe9,0x73,0xc4,0xf5,0xb9,0x04,0xcd,0x82,0x53,0xca,0xfa,0x90,0xcc,
    0x09,0x72,0x0c,0x48,0xb6,0x7c,0x74,0x54,0x33,0x07,0x2c,0x0d,0x2c,0xcf,0x60,0x31,
    0xb0,0x02,0x83,0xc5,0xc1,0x8a,0x0d,0x96,0x0e,0x16,0xd5,0x8c,0xef,0xee,0xd5,0xfa,
    0x2d,0x29,0xf5,0x5b,0x53,0xea,0x2b,0xbf,0x95,0xbc,0xca,0x6f,0x93,0xb9,0x6a,0x37,
    0x16,0xad,0x2b,0xcd,0xfa,0x0d,0xfe,0x8e,0xc8,0xc8,0x97,0x2a,0x31,0x1f,0x8f,0xfb,
    0xfd,0xfa,0x5c,0x28,0x1c,0xad,0x57,0xc1,0x9e,0xc3,0xb2,0xde,0x8f,0x86,0xb8,0xc7,
    0xd3,0xa5,0x1f,0x91,0x5f,0xc5,0xbb,0x58,0x67,0x81,0xd5,0xb1,0x3f,0x9b,0xfd,0xca,
    0x3f,0x48,0x2c,0x61,0xe2,0x49,0x3c,0x95,0x9a,0x33,0x56,0xac,0xdc,0x65,0x7a,0xff,
    0x01,0xb3,0x43,0x73,0x15,0x50,0x37,0x9f,0xda,0x05,0x5e,0x73,0x84,0xa9,0xf6,0x22,
    0xb4,0x07,0x2d,0x45,0xde,0x43,0xb4,0xd6,0xfd,0xc5,0x70,0x13,0x26,0x5e,0x8a,0xb7,
    0x3a,0xb3,0x3f,0xe6,0xfb,0x16,0xf3,0xe7,0x1c,0x34,0xd7,0xa6,0x78,0xac,0x87,0x57,
    0x26,0xbb,0x43,0x9f,0xca,0xe9,0x47,0x0b,0xf5,0x4e,0xc0,0x69,0x45,0xaf,0xae,0xdb,
    0xc0,0x42,0xbd,0x76,0x73,0x56,0xa7,0x89,0x59,0x7d,0x7d,0x9c,0x55,0xa8,0x3b,0x89,
    0xde,0x22,0xf9,0xbf,0x82,0xde,0x10,0x7b,0xcd,0x1d,0xac,0x97,0x95,0xfa,0x7c,0x03,
    0x56,0xcb,0x38,0x29,0x77,0x28,0x46,0x3e,0x47,0x9e,0x1f,0x82,0xe8,0x7b,0xf2,0x5d,
    0x56,0x5b,0xe0,0xbf,0xe5,0x59,0x7b,0xb8,0x4d,0x7c,0xdb,0xeb,0xc8,0xf0,0xbd,0xcc,
    0xa1,0xdf,0x1a,0x3f,0x43,0xdd,0x5c,0x70,0xe5,0x14,0x73,0xbf,0x0a,0x39,0xfb,0xc0,
    0x29,0x01,0x0f,0x9c,0x32,0x38,0xa5,0x86,0x53,0x0e,0x1e,0x38,0x95,0x70,0x2a,0x0c,
    0xa7,0x0a,0xfc,0x93,0x70,0xb4,0x3f,0x47,0xa9,0x5f,0x85,0x87,0x1a,0x3c,0xfc,0x12,
    0xbe,0xc6,0x8e,0xc9,0xa8,0xc1,0x87,0x3e,0xff,0x94,0x79,0x8b,0xb5,0xe2,0x1f,0xc8,
    0x73,0x9c,0xfa,0xb5,0x06,0x6b,0x00,0xd3,0x5e,0xbf,0x03,0x6b,0x84,0xdb,0x40,0xbd,
    0x66,0x53,0x4f,0x63,0x4d,0xbe,0xd7,0x51,0xfe,0x26,0xef,0x25,0xe1,0xbd,0x9c,0xc2,
    0x4b,0x3b,0x23,0xf8,0xe9,0x20,0xa6,0x3c,0xed,0x7f,0x27,0x77,0xa4,0x1d,0x5f,0xdd,
    0x52,0xa3,0x13,0x9e,0x6a,0x6f,0x26,0xb7,0xd6,0xd8,0x10,0x4d,0x09,0x9f,0x2b,0xd2,
    0x99,0x34,0xda,0xbb,0xc1,0xb3,0xd1,0xd9,0x6b,0x74,0x6a,0xac,0x47,0x46,0x2f,0xb9,
    0x7a,0xcc,0x99,0x9f,0x45,0x67,0x9f,0xd1,0x78,0x0e,0xfc,0x23,0xb9,0xcf,0x83,0x69,
    0xee,0xf7,0xc2,0x51,0xec,0x02,0xb8,0x6a,0x0c,0x79,0x75,0xfe,0x2a,0xef,0xb4,0xc6,
    0xfb,0xd1,0xd4,0x05,0xb7,0x07,0x5d,0x03,0x46,0x57,0xbf,0xff,0x4e,0x39,0x37,0xc1,
    0x7e,0x7d,0x7e,0x81,0xc7,0x4b,0xc6,0xa3,0xd6,0x18,0x82,0x33,0x44,0x0d,0x7d,0x57,
    0x76,0x38,0x37,0xdd,0x77,0x53,0xc6,0x65,0x19,0x8f,0xf1,0x30,0x42,0xfc,0x33,0x1e,
    0x46,0xc1,0x34,0xef,0x37,0xe1,0x0c,0xc3,0x0f,0x5a,0x46,0x59,0x0f,0x53,0x47,0x9f,
    0x9f,0xa3,0xe5,0x2a,0xfb,0xb4,0x3f,0xab,0x60,0x63,0xe0,0x23,0xa6,0xe7,0xd7,0x4c,
    0xcf,0x77,0xcc,0x79,0x5e,0x27,0x16,0x7a,0x3e,0x6e,0x7a,0x3e,0x46,0xcf,0xc7,0xe1,
    0x69,0xfe,0x22,0xfc,0xec,0xf0,0x4e,0x59,0xff,0xc3,0xac,0x07,0x58,0x4f,0x98,0x3b,
    0x70,0x9b,0x33,0x9b,0xe4,0xac,0xa7,0x8d,0x3f,0x8d,0x4d,0xc9,0x98,0x67,0xdf,0x94,
    0xb9,0x4f,0x33,0x78,0x9b,0x34,0x5e,0xee,0x1a,0x2f,0x33,0xc6,0xcb,0x2c,0xb1,0xe0,
    0x65,0x6e,0x8f,0xfb,0x3b,0x07,0x4f,0x75,0x4e,0x53,0x6f,0xde,0xdc,0xb9,0x85,0x3d,
    0xee,0xdc,0x3d,0xf0,0x70,0xe7,0xee,0x83,0x85,0xfb,0xbc,0x64,0xbc,0x68,0x6c,0x51,
    0xc6,0x12,0xb9,0x17,0x8d,0xee,0x07,0xff,0x79,0xef,0x1e,0x12,0x0b,0xba,0x97,0xf7,
    0xd0,0xbd,0x0c,0x6f,0x41,0xf6,0xe8,0xb7,0xf6,0x11,0xb1,0x70,0x27,0x9f,0xf0,0xdd,
    0x49,0x1a,0xce,0x53,0xf0,0x6c,0x61,0xac,0xf8,0xfe,0xfd,0xfb,0xbd,0xd4,0xd8,0x17,
    0xfc,0x3c,0x23,0xdf,0x2a,0x7e,0xd6,0x8d,0x1f,0x8d,0xad,0xc9,0x58,0xc7,0xcf,0x5a,
    0xca,0x77,0x6b,0xdd,0xdc,0xbb,0x0d,0x34,0x95,0x18,0xcf,0x2f,0x8d,0x67,0xfb,0x0d,
    0x7e,0x45,0x2c,0x78,0xde,0x34,0x9e,0x37,0xf0,0xbc,0x09,0x4f,0xeb,0x85,0xf3,0x5c,
    0x4a,0xe9,0xdd,0x74,0xca,0x9d,0x1b,0x48,0xf9,0x36,0x35,0xa7,0xe8,0xd5,0xf9,0x8f,
    0x9c,0x42,0x87,0x8c,0xbf,0xae,0x34,0x8a,0x8c,0xd8,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint data[4];
//     uint texelCount;
//     uint maxThreadId;
//     uint dataSize;
//     bool hasDepthAndStencil;
// } params;
//
// void main()
// {
//     uint threadId = gl_GlobalInvocationID . x;
//     uint texelCount = params . texelCount;
//     uint dataSize = params . dataSize;
//
//     if(threadId >= params . maxThreadId)
//     {
//         return;
//     }
//
//     if(dataSize == 1 || dataSize == 2)
//     {
//         dataBuffer[threadId]= params . data[0];
//     }
//     else if(dataSize % 4 == 0 && ! params . hasDepthAndStencil)
//     {
//         uint dataCount = dataSize / 4;
//         for(int i = 0;i < dataCount;i ++)
//         {
//             dataBuffer[dataCount * threadId + i]= params . data[i];
//         }
//     }
//     else if(dataSize == 3)
//     {
//         dataBuffer[threadId]= params . data[threadId % 3];
//     }
//     else if(params . hasDepthAndStencil)
//     {
//         dataBuffer[threadId]= params . data[0];
//         if(threadId >= ceil(params . maxThreadId / 4))
//         {
//             return;
//         }
//         uint offset = texelCount;
//         dataBuffer[threadId + offset]= params . data[1];
//     }
// }
