// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x4f,0x55,0x57,
    0x10,0xc6,0xf7,0x39,0xfb,0x70,0x0e,0x2a,0x54,0x0a,0x22,0x68,0xc5,0x0b,0xd4,0x0b,
    0xa8,0xe4,0x54,0x39,0xc6,0x06,0xa9,0xb4,0x26,0xa2,0xf6,0x68,0x8b,0x78,0x6b,0xeb,
    0x5d,0xd0,0x34,0x0a,0xe7,0x01,0x15,0x1e,0x5a,0x21,0x11,0x2b,0x3c,0xd8,0x0a,0x0f,
    0x56,0xe1,0xc1,0x1b,0x0f,0x4d,0xf0,0xf2,0x67,0xf4,0x2f,0x32,0xda,0x26,0x4d,0x3a,
    0xb3,0xf6,0x6f,0xcc,0x64,0x9f,0x64,0xb2,0xce,0x7c,0xdf,0xcc,0x7c,0x33,0x6b,0xad,
    0xbd,0xe2,0x6c,0x5b,0x21,0x8a,0x33,0xd1,0xf2,0xa8,0x3a,0x7a,0x1b,0x25,0xbf,0x4f,
    0xa3,0x6c,0x94,0x91,0x75,0x45,0x94,0x0f,0x6b,0x5f,0x79,0xa0,0xdc,0x39,0x7a,0x73,
    0xb0,0xb3,0xab,0x54,0x54,0xfe,0x93,0x28,0x0e,0x71,0xca,0xad,0x14,0x2f,0x27,0xab,
    0xda,0xf0,0xa5,0x9f,0x47,0x14,0xaf,0x11,0xbb,0x26,0x56,0x11,0x1b,0x17,0x9b,0x14,
    0x9b,0x11,0x9b,0x13,0x5b,0x10,0x5b,0x14,0xab,0x93,0x1a,0x9a,0x53,0xd0,0xfa,0xf2,
    0xaf,0x26,0xe8,0x69,0xbd,0x28,0x3a,0x14,0x55,0x45,0xab,0xe8,0xa5,0x8d,0xd5,0xb0,
    0x0c,0x58,0xb5,0xc3,0xb2,0x60,0x75,0x0e,0x8b,0xc1,0x9a,0x1d,0x96,0x03,0x5b,0xe7,
    0xb0,0x2a,0xb0,0x8d,0x0e,0xcb,0x83,0x7d,0xee,0xb0,0x02,0xd8,0x36,0x87,0x55,0x83,
    0xed,0x70,0xd8,0x32,0xb0,0x62,0x98,0x2b,0xfe,0xd8,0x9f,0xce,0x78,0x48,0xd6,0x56,
    0xe6,0x31,0x7f,0x93,0xf3,0xcb,0x29,0xbe,0x0c,0x6f,0xf9,0xba,0xa7,0xeb,0x1d,0x5f,
    0xc1,0xcf,0xe0,0x8f,0xe3,0x5b,0xfc,0x24,0x7e,0x8c,0x3f,0x83,0x9f,0xc3,0x9f,0xc3,
    0xaf,0xc2,0x5f,0xc0,0xcf,0xe3,0x2f,0xe2,0xeb,0xec,0x0d,0x52,0x35,0x1b,0xfa,0x89,
    0x43,0x3d,0xfd,0xbf,0x5a,0xfe,0xe5,0xd9,0xbb,0x26,0x89,0x2f,0x90,0x9b,0xc5,0x5f,
    0x8e,0x9f,0x0b,0x31,0xb9,0x70,0xbe,0xda,0xab,0xe2,0xdd,0xf8,0x35,0x60,0x8d,0xe2,
    0xd7,0x53,0xcb,0xfc,0x06,0xfc,0x28,0xf4,0x51,0xf3,0xf1,0x1c,0xcc,0xea,0xb1,0x3c,
    0x6b,0x83,0x33,0xd5,0x6b,0xe4,0x3c,0x56,0xa1,0xd7,0x18,0x7a,0x4e,0xb0,0xed,0xe8,
    0x35,0xa1,0xa7,0xf1,0xcd,0x70,0x05,0xc7,0xb7,0xa0,0x6f,0x7e,0x2b,0xbc,0xc6,0xb7,
    0x11,0xdf,0x10,0x34,0xb2,0xd1,0x16,0xe2,0xd4,0xdf,0x9a,0xca,0x2b,0x72,0x5f,0xcc,
    0xef,0x26,0x57,0xf7,0xe9,0x00,0xfd,0xeb,0x3e,0xad,0x11,0xf4,0x20,0x7e,0x86,0x1a,
    0xe9,0x55,0xb5,0xfb,0xf8,0x7f,0x90,0xd9,0xfa,0xc2,0x1d,0x4c,0x7e,0x6b,0xa5,0x97,
    0x23,0xc4,0x7d,0x0b,0x76,0x84,0x38,0xf5,0xcb,0x60,0x9f,0xc9,0xf9,0x1d,0xa3,0x86,
    0xf5,0xd5,0xcf,0xf9,0x99,0x7f,0x92,0xfb,0xa3,0xb5,0x4e,0xd1,0x73,0x3d,0x7d,0xff,
    0xc8,0xde,0xc7,0x2e,0xfe,0x02,0x98,0xc6,0x5f,0x85,0x3b,0x80,0xf6,0x55,0xde,0x85,
    0xd8,0xf9,0x95,0x54,0xfe,0x28,0xfb,0x60,0xfc,0x78,0x2a,0x7e,0x32,0x15,0x3f,0xc5,
    0x77,0x6f,0xfc,0x4c,0x8a,0x7f,0xc0,0x1d,0x32,0x7e,0x2e,0xc5,0x3f,0x12,0xeb,0x75,
    0xfc,0x42,0x8a,0x7f,0x8a,0xa6,0xf1,0x8b,0xf0,0x7b,0xe4,0xab,0xc9,0xd2,0x6b,0x04,
    0xf6,0x41,0x10,0xfd,0x96,0x7a,0xb8,0xfb,0xb5,0xdc,0xef,0x7e,0x41,0xf3,0xbc,0x6d,
    0xb5,0xc4,0x1b,0x56,0x07,0xa6,0x67,0xfb,0xbd,0x60,0x85,0xf0,0xfe,0x26,0xb1,0xca,
    0x7d,0x2d,0x58,0x73,0xb8,0x17,0xc9,0xdd,0x6d,0xa2,0x7e,0x21,0x9c,0x73,0x82,0xdf,
    0x23,0x6f,0x1d,0xb9,0x6b,0x5d,0xde,0x7a,0xf2,0x5a,0x5c,0xde,0x06,0xf0,0xbb,0xe4,
    0x6d,0x22,0x77,0x03,0x79,0xf6,0xf6,0xad,0xe6,0xbe,0xf7,0x70,0xa7,0x37,0x83,0x2f,
    0x49,0xcc,0x16,0xde,0xc2,0xcd,0xdc,0xf5,0xf7,0xb2,0x03,0x1d,0xcc,0xf6,0xaf,0xc4,
    0x2b,0xd7,0x2e,0xd6,0xc1,0xbe,0xb4,0xbb,0x99,0x77,0xba,0x77,0x6f,0x42,0x62,0x15,
    0xeb,0x04,0x3f,0x2e,0x9e,0xf6,0xf4,0x17,0x98,0xc5,0xfd,0x23,0x35,0xac,0x96,0xae,
    0xef,0x24,0x4a,0xe3,0x5e,0x11,0x53,0x45,0x4e,0xbb,0x9b,0xe1,0x0b,0x66,0x28,0xba,
    0x19,0x76,0x81,0xdb,0x0c,0xbb,0xc1,0x6c,0x86,0x92,0x9b,0x41,0xb9,0x2e,0xb1,0x12,
    0xba,0x5d,0x6e,0x86,0xbd,0x68,0x67,0xdc,0x0c,0x5f,0x82,0xdb,0x0c,0x4b,0x60,0x16,
    0xa7,0x33,0x58,0xad,0x92,0x9b,0xe1,0x35,0x31,0x1d,0xe4,0x74,0xb9,0x19,0xf6,0x31,
    0x43,0xb7,0x9b,0xa1,0x07,0xdc,0x66,0xf8,0x0a,0xcc,0x66,0xe8,0x75,0x33,0x28,0xb7,
    0x9f,0x3b,0xae,0xba,0xfa,0xff,0x3b,0x74,0xbf,0x41,0xfb,0xb5,0x7b,0x5b,0xb4,0x47,
    0x8b,0xed,0x75,0x3d,0xbe,0x21,0xae,0x44,0xde,0x7e,0xfa,0xd1,0xb7,0xe3,0x30,0x6f,
    0x8f,0xfa,0xfa,0xce,0x1c,0xe5,0x8d,0x39,0x25,0xfd,0x1d,0x0b,0x7a,0x49,0xcc,0x51,
    0x77,0x2f,0x8f,0x33,0x57,0xbf,0xbb,0x97,0x03,0xe0,0x76,0x9f,0x4f,0xa0,0x3b,0x40,
    0x9e,0xbe,0x3f,0xa7,0xc9,0x3b,0x49,0x9e,0x7e,0xa3,0x67,0xc0,0x2b,0x9c,0xc3,0x0f,
    0x60,0x76,0x56,0x3f,0x51,0xcb,0x7f,0x77,0x67,0xc1,0x92,0xef,0x2e,0x1f,0xde,0xb2,
    0x73,0xc4,0x9e,0xa5,0xc6,0x69,0x89,0xd5,0xb7,0xeb,0x3c,0x33,0x9c,0x73,0x7d,0x5c,
    0xa4,0x8f,0x0b,0xae,0x8f,0x4b,0xe0,0x7f,0x4b,0x8c,0xfa,0x97,0xc1,0x9a,0xdc,0x59,
    0x5d,0x01,0x6f,0xe1,0xac,0x86,0xdc,0x59,0x29,0x37,0x28,0x36,0xc4,0xfe,0x0f,0x86,
    0xb3,0x8d,0xc3,0x9b,0x79,0x9e,0xb3,0x31,0x6e,0xc8,0xe9,0x5c,0x47,0xa7,0xdf,0xe9,
    0xdc,0x00,0x37,0x9d,0x11,0xa7,0xa3,0xdc,0xb0,0xd8,0x08,0xb5,0x86,0xd1,0xa9,0x38,
    0x1d,0xe3,0x46,0x9c,0xce,0x4d,0x74,0x46,0x9d,0xce,0x2d,0x70,0xd3,0x19,0x73,0x3a,
    0xca,0xdd,0x16,0x1b,0xa3,0xd6,0x6d,0x74,0xc6,0x9d,0x8e,0x71,0x63,0x4e,0xe7,0x17,
    0x74,0x8a,0x4e,0xe7,0x57,0x70,0xd3,0x99,0x70,0x3a,0xca,0xdd,0x09,0xdf,0x61,0x52,
    0xeb,0x0e,0x3a,0x93,0x4e,0xc7,0xb8,0x09,0xa7,0x73,0x0f,0x9d,0x29,0xa7,0xf3,0x1b,
    0xb8,0xe9,0x4c,0x3b,0x1d,0xe5,0xee,0x8b,0x4d,0x53,0xeb,0x3e,0x3a,0x33,0x4e,0xc7,
    0xb8,0x69,0xa7,0xf3,0x3b,0x3a,0x0f,0x9c,0xce,0x1f,0xe0,0xa6,0x33,0xeb,0x74,0x94,
    0x7b,0x28,0x36,0x4b,0xad,0x87,0xe8,0xcc,0x39,0x1d,0xe3,0x66,0x9d,0xce,0x9f,0xe8,
    0x3c,0x72,0x3a,0x8f,0xc1,0x4d,0x67,0xde,0xe9,0x28,0xf7,0x44,0x6c,0x9e,0x5a,0x4f,
    0xd0,0x59,0x70,0x3a,0xc6,0xcd,0x3b,0x9d,0x67,0xe8,0x3c,0x75,0x3a,0xcf,0xc1,0x4d,
    0xe7,0xa5,0xd3,0x51,0xee,0x85,0xd8,0x4b,0x6a,0xbd,0x40,0x67,0xd1,0xe9,0x18,0xa7,
    0xeb,0x7f,0xf2,0x55,0xee,0x15,0xfb,0x1f,0x70,0xed,0xe5,0xe1,0x9c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform itexture2DArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// void main()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             ivec4 colorValue = texture(isampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
