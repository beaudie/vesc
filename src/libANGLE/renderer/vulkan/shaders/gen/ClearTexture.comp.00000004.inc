// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x5d,0x4f,0x53,0x41,
    0x10,0x86,0x97,0x9e,0x72,0x40,0x0b,0x02,0x52,0x0a,0x08,0xad,0xd8,0x56,0x41,0x4b,
    0x4a,0xc5,0x16,0x0c,0x44,0x13,0x6f,0xa4,0x02,0x77,0xde,0x70,0x01,0x09,0xc6,0x1a,
    0x20,0x58,0x28,0xe2,0x0f,0xf0,0xc2,0xf8,0xa3,0xbc,0xf0,0xc2,0x68,0xfc,0x49,0x7e,
    0xc5,0xd4,0x99,0x3d,0xcf,0x92,0xc9,0x39,0xc9,0x66,0x77,0xde,0x79,0x67,0xf7,0x9d,
    0x8f,0x13,0x65,0x2a,0x43,0xce,0x0d,0xb8,0xeb,0x6e,0xd8,0x5d,0xba,0xe4,0x9b,0x70,
    0x19,0x41,0x9c,0xcb,0xb9,0xd8,0xef,0x5b,0xbb,0x2f,0x77,0xeb,0x97,0xef,0x3b,0xf5,
    0x66,0xab,0xa1,0xfe,0x1b,0x2e,0xf2,0x3c,0xf5,0x8d,0x09,0x67,0x50,0xf6,0xac,0xac,
    0xee,0xab,0x93,0x33,0xe7,0xe3,0x9c,0x1b,0x17,0x3c,0xeb,0xef,0xd2,0x73,0xc2,0xf5,
    0x77,0x09,0x9a,0x83,0x33,0x8f,0x3d,0x25,0x7b,0xcc,0x1d,0x6d,0xb9,0xad,0x80,0x8e,
    0x0a,0x7b,0xc0,0x06,0xc0,0xc6,0x0d,0x96,0x01,0xcb,0x1b,0x2c,0x02,0xab,0x1a,0x2c,
    0x0b,0xb6,0x64,0xb0,0x41,0xb0,0x65,0x83,0xc5,0x60,0x0d,0x83,0x0d,0x81,0x35,0xbd,
    0xde,0xe8,0xea,0x5d,0xd5,0xde,0x4c,0x69,0x6f,0xa5,0xb4,0x2b,0xbf,0x85,0x26,0xe5,
    0xaf,0xcb,0x5e,0xbe,0xf2,0x25,0xf6,0x1d,0x63,0xf7,0xa8,0xcd,0xac,0xac,0x49,0x79,
    0x25,0xe3,0xfd,0x91,0x8f,0xd7,0xf3,0x94,0x70,0xf4,0xbd,0x05,0x62,0xa6,0xc5,0xbe,
    0x86,0x86,0xc8,0xe3,0x59,0xe9,0x65,0x52,0x2b,0xc5,0x37,0xb1,0x73,0x60,0x35,0xe2,
    0x47,0x88,0x57,0xfe,0x28,0x3e,0xc5,0x0b,0x72,0xcb,0x04,0xf7,0xeb,0xdd,0x93,0xf4,
    0x30,0x6b,0x62,0xf3,0xd8,0xf3,0xa6,0x77,0x8a,0x95,0xe4,0xa5,0x82,0xd7,0x9d,0x60,
    0xc1,0x97,0x5e,0xfa,0xe6,0x34,0xfa,0x0a,0x68,0x54,0x7b,0x06,0x4c,0x73,0x9c,0x45,
    0x43,0xd0,0xac,0xf6,0x2d,0x7a,0xa6,0xf1,0x73,0x70,0x63,0xe3,0x2f,0xa5,0xec,0x32,
    0xbd,0xcb,0x4b,0xe5,0x96,0x0c,0x5e,0xa7,0x96,0xc1,0x5e,0xa1,0x16,0x21,0xbf,0x55,
    0x59,0xfd,0x7e,0xdf,0x15,0xa5,0x16,0xa1,0xbf,0x25,0xfa,0xd8,0xe4,0xfd,0x35,0xee,
    0x68,0xa1,0x5f,0xed,0x75,0x30,0xf5,0x6f,0x70,0xb6,0x7a,0xf6,0xc9,0x31,0xd8,0xaf,
    0x65,0x0d,0x1b,0xfb,0x88,0xd9,0x0e,0x3a,0xce,0x52,0xf6,0x39,0xf5,0x58,0x16,0x4b,
    0x73,0xef,0xc1,0x39,0x67,0xad,0x49,0x75,0x32,0xf4,0xc6,0x31,0x0f,0xbf,0x04,0xd1,
    0x9a,0xfd,0x14,0xeb,0x02,0xfc,0xaf,0x9c,0xb5,0xff,0xef,0xf0,0xeb,0xfe,0x4c,0x58,
    0xa3,0xfe,0xdf,0x4e,0x66,0x45,0xfd,0x4f,0x78,0x77,0x0c,0xbc,0x27,0xb6,0xce,0xc2,
    0x4d,0x30,0x8d,0x99,0xe3,0x3f,0x9e,0xa1,0x3f,0x21,0xa6,0x08,0x1e,0x38,0xb7,0xe1,
    0x94,0x0c,0x67,0x01,0xfc,0xa3,0x70,0x62,0xfe,0x83,0x22,0x78,0x88,0xab,0x10,0x57,
    0x36,0x71,0x55,0xf0,0x10,0x77,0x97,0xd8,0xaa,0xd1,0x78,0x0f,0x7c,0x44,0x18,0x6a,
    0x2f,0x9a,0x7f,0x42,0x7d,0x5f,0x24,0x56,0x67,0xe2,0x3e,0xf9,0x2c,0x52,0xa3,0x1a,
    0x35,0xfa,0x23,0xf7,0xa8,0xef,0x81,0xaf,0x7f,0x52,0x27,0x3d,0xff,0x96,0xfd,0x02,
    0xbb,0xe6,0x75,0xc6,0x5e,0x67,0x03,0x9d,0x75,0xe6,0x29,0x68,0x7d,0x88,0xef,0x07,
    0x5a,0x1f,0x81,0xad,0x12,0xbb,0xe1,0xe7,0x27,0x99,0x9d,0x15,0xea,0xfa,0x54,0x74,
    0x6c,0xc2,0xfd,0x44,0xdc,0x73,0xf2,0xc9,0x9b,0x1c,0xb7,0xc0,0x43,0x8e,0x6d,0x93,
    0xa3,0xfa,0x3e,0x93,0xe3,0x0b,0x72,0x6c,0x93,0xe3,0x8e,0xc9,0x51,0x7d,0xdb,0xb2,
    0x76,0xc8,0x69,0x3b,0x95,0xa3,0xe2,0x5d,0x72,0xd9,0xa3,0x4e,0x5f,0xd1,0x74,0x40,
    0x2e,0x3a,0xd7,0x1f,0xc0,0x0e,0xc9,0x41,0xb9,0xdf,0xc0,0x3a,0x70,0x75,0xde,0xbf,
    0x83,0xbd,0x01,0xeb,0x18,0xde,0x31,0xd8,0x91,0xe1,0x9d,0xc0,0x3d,0x36,0xbc,0x53,
    0x78,0xfb,0x86,0xf7,0x16,0xee,0xa9,0xa9,0x6b,0xd7,0xd4,0xf5,0x90,0xba,0x76,0xe1,
    0xda,0x1c,0x75,0xff,0x27,0x95,0x7b,0x2c,0xeb,0x3f,0x28,0x17,0x33,0x2f,0x10,0x07,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth))
//  {
//   return;
//  }
//
//  uint depthValue = params . rawData[0]& 0xFFFFFF;
//  dataBuffer[threadId]= depthValue;
//
//  if(threadId > ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//
//  uint offset = uint((ceil(params . width * params . height * params . depth)));
//  uint stencilValue = params . rawData[0]>> 24;
//  dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
