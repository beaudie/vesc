// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0xdf,0x4e,0x53,0x41,
    0x10,0x87,0x97,0x73,0x0e,0x07,0xb4,0x20,0x20,0xa5,0x80,0xd0,0x8a,0x6d,0x15,0xb4,
    0xa4,0x54,0x6c,0xc1,0x40,0x34,0xf1,0x46,0x2a,0x70,0xe7,0x0d,0x17,0x98,0x60,0x20,
    0xa0,0x60,0xa1,0x88,0x0f,0xe0,0x85,0xf1,0xa1,0xbc,0xf0,0xc2,0x68,0x7c,0x24,0xff,
    0xc5,0xe8,0xcc,0x9e,0x6f,0xc9,0xa4,0x27,0xd9,0xec,0xce,0x37,0xbf,0xd9,0x9d,0x99,
    0xdd,0x13,0x47,0x95,0x01,0xe7,0xfa,0xdc,0x55,0x37,0xe8,0x2e,0x5c,0xf6,0x8d,0xb9,
    0x48,0x88,0x73,0x39,0x97,0xfa,0x79,0x63,0xfb,0xf9,0x76,0xfd,0xe2,0xdd,0x41,0xbd,
    0xd9,0x6a,0xa8,0xff,0x9a,0x8b,0xbd,0x4e,0x7d,0x23,0xa2,0xe9,0x97,0x39,0x91,0xd1,
    0x79,0xf9,0xfa,0xd4,0xf9,0x38,0xe7,0x46,0x85,0x27,0x7e,0x2f,0x5d,0x67,0x5a,0xbf,
    0x97,0xd0,0x1c,0x9a,0x59,0xec,0x09,0x99,0x53,0xf6,0x68,0xcb,0x6e,0x05,0xf2,0xa8,
    0x30,0x07,0xd6,0x07,0x1b,0x35,0x2c,0x82,0xe5,0x0d,0x8b,0x61,0x55,0xc3,0x12,0xd8,
    0x82,0x61,0xfd,0xb0,0x45,0xc3,0x52,0x58,0xc3,0xb0,0x01,0x58,0xd3,0xe7,0x1b,0x5f,
    0x9e,0xab,0xb9,0x37,0x7b,0x72,0x6f,0xf5,0xe4,0xae,0xfa,0x16,0x39,0xa9,0x7e,0x55,
    0xe6,0xf2,0xa5,0x2f,0xb3,0x6f,0x19,0xbb,0x4b,0x6f,0xa6,0x65,0x8c,0xcb,0x29,0x91,
    0xf7,0xc7,0x3e,0x5e,0xd7,0x13,0xa2,0xd1,0xf3,0xe6,0x88,0x99,0x14,0xfb,0x0a,0x39,
    0xc4,0x9e,0x27,0x72,0x97,0x59,0xaf,0x94,0xaf,0x63,0xe7,0x60,0x35,0xe2,0x87,0x88,
    0x57,0xfd,0x30,0x3e,0xe5,0x05,0xd9,0x65,0x8c,0xfd,0x75,0xef,0x71,0xee,0x30,0x31,
    0xb1,0x79,0xec,0x59,0x73,0x77,0xca,0x4a,0x72,0x52,0xc1,0xe7,0x9d,0xb1,0xe0,0xeb,
    0x1d,0x7a,0xe6,0x24,0xf9,0x15,0xc8,0x51,0xed,0x29,0x98,0xd6,0x38,0x4d,0x0e,0x21,
    0x67,0xb5,0x6f,0x70,0x67,0x1a,0x3f,0x83,0x36,0x35,0xfe,0x52,0x8f,0x5d,0xe6,0xee,
    0xf2,0xd2,0xb9,0x05,0xc3,0xeb,0xf4,0x32,0xd8,0x4b,0xf4,0x22,0xd8,0xcb,0x32,0x06,
    0x65,0x14,0xa5,0x17,0xe1,0x7e,0x4b,0xdc,0x63,0x93,0xf3,0x57,0xd8,0xa3,0x45,0xfe,
    0x6a,0xaf,0xc2,0xd4,0xbf,0xc6,0x3a,0x35,0x7d,0xdb,0x95,0xf1,0xcf,0x9c,0x73,0xc8,
    0x5b,0x0e,0xf6,0x31,0x3d,0x08,0xfa,0x53,0xe3,0x57,0xfb,0x8c,0x7e,0x2c,0x8a,0xa5,
    0xb5,0x77,0xd1,0x9c,0x31,0x56,0xa4,0x3b,0x11,0x77,0xe3,0x78,0x0f,0x3f,0x85,0x68,
    0xcf,0x7e,0x88,0x75,0x0e,0xff,0x23,0x6b,0xbd,0xff,0xb7,0xf8,0x75,0x7e,0x22,0xaa,
    0x61,0xff,0x6f,0x67,0x6f,0x45,0xfd,0x8f,0x38,0x77,0x04,0xde,0x15,0x5b,0xdf,0xc2,
    0x75,0x98,0xc6,0xcc,0xf0,0x1f,0x4f,0x71,0x3f,0x21,0xa6,0x08,0x0f,0x9a,0x9b,0x68,
    0x4a,0x46,0x33,0x07,0xff,0x20,0x9a,0x94,0xff,0xa0,0x08,0x0f,0x71,0x15,0xe2,0xca,
    0x26,0xae,0x0a,0x0f,0x71,0xb7,0x89,0xad,0x9a,0x1c,0xef,0xc0,0x87,0x44,0xa1,0xf6,
    0xbc,0xf9,0x27,0xd4,0xf7,0x59,0x62,0xf5,0x4d,0xdc,0xa5,0x9e,0x79,0x7a,0x54,0xa3,
    0x47,0xbf,0x65,0x1f,0xf5,0xdd,0xf3,0xfd,0xcf,0xfa,0xa4,0xeb,0x5f,0x32,0x9f,0x63,
    0xd7,0x7c,0x9e,0xa9,0xcf,0xb3,0x41,0x9e,0x75,0xde,0x53,0xc8,0xf5,0x3e,0xbe,0x2f,
    0xe4,0xfa,0x00,0xb6,0x4c,0xec,0x9a,0x7f,0x3f,0xd9,0xdb,0x59,0xa2,0xaf,0x8f,0x25,
    0x8f,0x75,0xb4,0x1f,0x89,0x7b,0x4a,0x3d,0x79,0x53,0xe3,0x06,0x3c,0xd4,0xd8,0x36,
    0x35,0xaa,0xef,0x13,0x35,0x3e,0xa3,0xc6,0x36,0x35,0x6e,0x99,0x1a,0xd5,0xb7,0x29,
    0x63,0x8b,0x9a,0x36,0x7b,0x6a,0x54,0xde,0xa1,0x96,0x1d,0xfa,0xf4,0x9d,0x9c,0x5e,
    0x50,0x8b,0xbe,0xeb,0xf7,0xb0,0x3d,0x6a,0x50,0xed,0x57,0xd8,0x3e,0x5a,0xad,0xf9,
    0x1b,0xec,0x00,0xb6,0x6f,0x74,0x47,0xb0,0x43,0xa3,0x7b,0x85,0xf6,0xc8,0xe8,0x4e,
    0xd0,0x1d,0x1b,0xdd,0x1b,0xb4,0x27,0xa6,0xaf,0x1d,0xd3,0xd7,0x3d,0xfa,0xda,0x41,
    0x6b,0x6b,0xd4,0xf9,0xaf,0x74,0xee,0xa1,0x8c,0xff,0x0d,0xd9,0x45,0x83,0x10,0x07,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     vec4 clearValue;
//  uint depthValue;
//  uint rawData[4];
//  uint dataSize;
//  uint stencilValue;
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth))
//  {
//   return;
//  }
//
//  uint depthValue = params . rawData[0]>> 8;
//  dataBuffer[threadId]= depthValue;
//
//  if(threadId > ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//
//  uint offset = uint((ceil(params . width * params . height * params . depth)));
//  uint stencilValue = params . rawData[0]& 0xFF;
//  dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
