// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdf,0x4e,0x53,0x41,
    0x10,0xc6,0xb7,0xe7,0xd4,0x23,0x5a,0x10,0xb0,0x7f,0x04,0x2d,0x85,0x52,0x45,0xad,
    0xb6,0x02,0xa5,0x06,0x62,0x34,0x31,0x51,0x0a,0x09,0x77,0x26,0x5e,0x60,0x42,0x02,
    0x0a,0xa6,0x62,0x0b,0x46,0x1f,0xc0,0x0b,0xe3,0x43,0x79,0xe1,0x85,0xd1,0xf8,0x48,
    0xa2,0xc6,0xd4,0x99,0x3d,0xbf,0x6d,0x26,0x6d,0xb2,0xd9,0x9d,0x6f,0xbe,0x99,0x9d,
    0x6f,0x76,0x4e,0xe3,0xa8,0x76,0xde,0xb9,0x8c,0xbb,0xe8,0xc6,0xdc,0x3b,0x97,0xfe,
    0xa6,0x5d,0x24,0x88,0x73,0x39,0x97,0xf8,0xbd,0xb3,0xf3,0x6c,0xa7,0xf9,0xfe,0xc3,
    0xab,0xe6,0x5a,0x7b,0x59,0xfd,0x97,0x5c,0xec,0x79,0xea,0x9b,0x14,0xce,0x39,0xd9,
    0xb3,0xb2,0x7a,0xfb,0xdd,0xbe,0xf3,0x71,0xce,0x4d,0x09,0x9e,0xf5,0xb9,0xf4,0x9c,
    0x72,0x7d,0x2e,0x41,0x73,0x70,0xca,0xd8,0x05,0xd9,0x13,0x72,0x6c,0x49,0xb6,0x22,
    0x75,0xd4,0xd8,0x03,0x96,0x01,0x9b,0x32,0x58,0x04,0x56,0x30,0x58,0x0c,0x36,0xe3,
    0xf3,0xc7,0x43,0x9e,0xde,0xb5,0x3a,0x72,0x57,0x6b,0xe4,0x2e,0xe5,0xb7,0xc8,0xa1,
    0xfc,0xb6,0xec,0x8b,0x43,0x5f,0x6a,0x57,0x8d,0xdd,0x47,0xcb,0xac,0xac,0xbc,0xdc,
    0x12,0x79,0x7f,0xec,0xe3,0xf5,0x5c,0x14,0x8e,0xde,0xb7,0x40,0xcc,0x15,0xb1,0x2f,
    0x50,0x43,0xec,0xf1,0xac,0xf4,0x3e,0xd5,0xa6,0xf8,0x03,0xec,0x1c,0xd8,0x1d,0xe2,
    0xc7,0x89,0x57,0xfe,0x04,0x3e,0xc5,0x4b,0x92,0x65,0x9a,0xfc,0x81,0x9b,0x47,0x5f,
    0xd9,0xf4,0x56,0xb1,0x8a,0x9c,0x8a,0xf4,0x2a,0x31,0x4b,0x73,0x96,0xb8,0xbf,0x48,
    0x0d,0x25,0x5f,0x6b,0xc0,0xb2,0xbe,0x97,0x0b,0xa6,0xa6,0x19,0x34,0x67,0x88,0xbf,
    0x0a,0x37,0x31,0xfe,0x39,0x7a,0x10,0xec,0x2a,0x9a,0x0b,0x82,0xde,0x34,0x78,0x03,
    0x6d,0xa1,0x7e,0x1d,0xb2,0xc1,0x60,0x20,0xf1,0xf1,0xf0,0xbd,0x2a,0xbc,0xcb,0x2a,
    0xf7,0xad,0x91,0xbb,0x45,0xbd,0x6a,0xb7,0xc1,0xd4,0xbf,0xce,0xd9,0xd6,0xb3,0xcb,
    0x4c,0x04,0x7b,0x5f,0xd6,0x98,0xb1,0x0f,0x99,0xad,0x50,0xc7,0xdb,0x11,0xbb,0x87,
    0xde,0xbb,0x62,0xa9,0xd6,0x3e,0x9c,0x1e,0xeb,0xbe,0xcc,0x53,0x44,0xef,0x1d,0x5a,
    0xcf,0x04,0xd1,0xef,0xe3,0x97,0x58,0x27,0xe0,0x7f,0xe5,0xac,0xef,0x79,0x8a,0x5f,
    0xf7,0xc7,0xc2,0x9a,0xf0,0xdf,0x56,0xfa,0xf6,0xea,0x7f,0xc8,0xbd,0x93,0xe0,0xa7,
    0x62,0xeb,0x5b,0x5f,0x06,0xd3,0x18,0xed,0xfb,0x35,0xde,0x6a,0xd6,0xc4,0x94,0xc1,
    0x03,0xa7,0x02,0x67,0xce,0x70,0xe6,0xc1,0x3f,0x09,0x27,0xcc,0x68,0x19,0x3c,0xc4,
    0x2d,0x12,0x57,0x35,0x71,0x35,0xf0,0x10,0x77,0x9d,0xd8,0x9a,0xa9,0xf1,0x06,0xf8,
    0xb8,0x30,0xd4,0x5e,0x32,0x33,0xae,0xbe,0xaf,0x12,0xab,0x33,0x70,0x0b,0x3d,0x4b,
    0xf4,0xa8,0x4e,0x8f,0xfe,0x48,0x1e,0xf5,0xdd,0x96,0x55,0xa7,0x4f,0x7a,0xfe,0x2d,
    0xfb,0x09,0x76,0xdd,0xd7,0x99,0xf8,0x3a,0x9b,0xd4,0xd9,0x60,0x85,0x5a,0xef,0xe1,
    0xfb,0x49,0xad,0x2b,0x60,0xcb,0xc4,0xea,0x9c,0x6c,0x30,0x3b,0x0d,0xfa,0xfa,0x48,
    0xea,0xd8,0x80,0xfb,0x99,0xb8,0x27,0xe8,0xc9,0x1b,0x8d,0x4f,0xc1,0x83,0xc6,0x4d,
    0xa3,0x51,0x7d,0x5f,0xd0,0xd8,0x41,0xe3,0x26,0x1a,0xb7,0x8d,0xc6,0x8e,0xff,0x1f,
    0x72,0x1e,0x53,0x4d,0x5b,0x23,0x1a,0xb7,0xfd,0x6c,0xa5,0x5a,0x9e,0xd3,0xa7,0x6f,
    0xd4,0xf4,0x02,0x2d,0x3a,0xd7,0x1f,0xc1,0xf6,0xd0,0xa0,0xdc,0xef,0x60,0x07,0x70,
    0x75,0xde,0x7f,0x80,0xbd,0x04,0x3b,0x30,0xbc,0x23,0xb0,0x43,0xc3,0x7b,0x0d,0xf7,
    0xc8,0xf0,0xba,0xf0,0x76,0x0d,0xef,0x0d,0xdc,0xae,0xe9,0xeb,0xb1,0xe9,0xeb,0x1e,
    0x7d,0x3d,0x86,0x6b,0x35,0xea,0xfe,0x4f,0x3a,0xb7,0x2e,0xeb,0x3f,0x61,0xbc,0x3c,
    0xe1,0x90,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//  uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//  uint rawData[4];
//  uint width;
//  uint height;
//  uint depth;
// } params;
//
// void main()
// {
//  uint threadId = gl_GlobalInvocationID . x;
//
//  if(threadId >= ceil(params . width * params . height * params . depth))
//  {
//   return;
//  }
//
//  uint depthValue = params . rawData[0]& 0xFFFFFF;
//  dataBuffer[threadId]= depthValue;
//
//  if(threadId > ceil(params . width * params . height * params . depth / 4))
//  {
//   return;
//  }
//
//  uint offset = uint((ceil(params . width * params . height * params . depth)));
//  uint stencilValue = params . rawData[0]>> 24;
//  dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
