// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ClearTexture.comp.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kClearTexture_comp_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xeb,0x4e,0x53,0x51,
    0x10,0x85,0x37,0xe7,0x94,0x8a,0x16,0xb9,0xd8,0x52,0x2b,0x01,0x44,0xab,0xc8,0xc5,
    0x14,0x23,0xb5,0x1a,0x14,0x13,0x4c,0x88,0x60,0x8a,0x41,0xae,0xfe,0x35,0xf1,0x8f,
    0x3f,0x34,0x26,0xfa,0x00,0x3e,0x90,0xf1,0x21,0x8c,0xc6,0xd7,0xf0,0x2d,0xbc,0xc5,
    0xd4,0x35,0x73,0xbe,0x4d,0xb6,0x87,0x64,0x67,0x9f,0x59,0xb3,0x66,0x66,0xcd,0xec,
    0x29,0x79,0xd6,0x3e,0x13,0xc2,0x50,0x38,0x17,0x46,0xc2,0xf3,0x50,0xfc,0x4d,0x86,
    0x4c,0x48,0x08,0xb5,0x50,0xf5,0xfb,0x71,0xff,0xa0,0xdf,0x79,0xf7,0xfe,0x65,0xa7,
    0x7b,0xe7,0x96,0xf9,0xc7,0x42,0xee,0x3c,0xf3,0x8d,0x8b,0x33,0xac,0xbb,0xa2,0xf3,
    0xfa,0xc5,0xab,0x37,0xc1,0xe3,0x42,0x98,0x10,0x5e,0xf1,0x5c,0xf6,0x5d,0x70,0x3d,
    0x97,0xd0,0x1a,0x9c,0x19,0xec,0x0b,0xba,0xab,0xe4,0xd8,0x56,0xb6,0x3a,0x3a,0xda,
    0xdc,0x11,0x1b,0x02,0x9b,0xf0,0xb8,0xdc,0xb1,0x8c,0x1c,0x8b,0xa5,0x1c,0x4b,0xa5,
    0x1c,0xc6,0x37,0x2c,0x87,0xbf,0xa2,0xfb,0xea,0xa9,0xaf,0xb0,0xaf,0x24,0xf6,0x11,
    0x1a,0x2f,0xe9,0xd4,0x55,0x25,0x73,0x7f,0xee,0xf1,0xf6,0x3d,0x25,0x8e,0xd5,0x9b,
    0x27,0xe6,0xa2,0xec,0xb3,0x68,0xc8,0x1d,0xaf,0x68,0xa6,0x85,0x66,0xc3,0xef,0x63,
    0xd7,0xc0,0x56,0x88,0x1f,0x25,0xde,0xf8,0xe7,0xf1,0x55,0x13,0xff,0x24,0x3d,0xcd,
    0x24,0x73,0x32,0x6c,0x4e,0xb6,0xf5,0x1f,0x31,0x8b,0x6f,0x50,0xab,0x4e,0xbd,0x86,
    0xeb,0x2c,0x30,0xd3,0xdb,0x44,0x6f,0xac,0xdf,0x74,0xdd,0x85,0x6d,0xf1,0x2d,0xb8,
    0x96,0xaf,0xa1,0x2e,0x67,0x13,0x5e,0x9c,0x63,0xd4,0xb5,0xa0,0x33,0x18,0x0c,0xc4,
    0xc9,0x4f,0x67,0x3f,0xc7,0x8c,0x17,0xc9,0xb7,0xcc,0xac,0x96,0xd0,0xb3,0xec,0xf1,
    0x05,0x66,0xfe,0x0e,0xdf,0x69,0xbf,0x3d,0xb0,0x68,0xdf,0xd5,0x19,0x91,0xc0,0xa6,
    0x72,0xaf,0xa3,0x3f,0x6a,0xda,0xd4,0x69,0x25,0xf6,0xb6,0x71,0x13,0xbb,0xcf,0xae,
    0xc4,0x5c,0x07,0x25,0xfb,0x90,0xde,0x6f,0xca,0xb2,0xbe,0x8f,0xe0,0x1c,0x72,0x7a,
    0xda,0xa3,0x8c,0xf9,0x07,0xde,0xf5,0xa7,0x10,0xdb,0xf7,0x1f,0xb2,0x8e,0xc1,0xff,
    0xe8,0xdb,0xde,0xf1,0x04,0xff,0x89,0x6b,0x1b,0xf6,0xf7,0x1c,0xe3,0xcd,0xcd,0xbf,
    0x41,0xdd,0x71,0x70,0xe3,0xb4,0xd8,0xb1,0x29,0xde,0x22,0x72,0xa6,0xc1,0x3f,0x89,
    0x33,0xeb,0xb3,0x2d,0xe2,0xa6,0xa9,0x1d,0xf7,0xee,0xb7,0xf8,0xe6,0xbb,0xcc,0x6c,
    0xac,0xbe,0x7d,0xff,0xd2,0x7d,0x8c,0x3d,0xef,0xb5,0xaa,0x5e,0xeb,0x1a,0xb5,0xda,
    0x9c,0x58,0xef,0x3a,0xbe,0x6f,0xaa,0x67,0xf6,0x0d,0xb0,0x05,0x62,0xed,0xad,0x56,
    0x79,0xbf,0x36,0x5a,0x1e,0x4a,0xc7,0x2a,0xdc,0x8f,0xe8,0xbc,0x5d,0xd2,0xd9,0x4d,
    0x74,0x9a,0x6f,0x4d,0xa7,0x8b,0xae,0xb5,0x92,0x4e,0xc3,0xbf,0x8b,0xd7,0x63,0x0f,
    0xec,0xed,0xdf,0xca,0x5e,0xf7,0xfd,0x29,0x72,0x8e,0x4a,0x8b,0xd9,0x0f,0xfe,0xfb,
    0x6d,0xe9,0x7f,0x0f,0x7d,0x6c,0xe0,0xfb,0x4c,0x1f,0x8f,0xe8,0xc3,0x76,0xe5,0x03,
    0xd8,0x16,0x1a,0x8d,0xfb,0x05,0x6c,0x07,0xae,0xed,0xd0,0x57,0xb0,0x27,0x60,0x3b,
    0x09,0x6f,0x17,0xac,0x9f,0xf0,0x9e,0xc2,0xdd,0x4d,0x78,0x7b,0xf0,0x36,0x13,0xde,
    0x33,0xb8,0x7b,0xc9,0x4c,0xf7,0x93,0x99,0x6e,0x31,0xd3,0x7d,0xb8,0xe9,0x6c,0xec,
    0xfe,0xab,0x8e,0xef,0xe9,0xfc,0x03,0x6f,0x80,0x03,0x90,0xb4,0x05,0x00,0x00
};

// Generated from:
//
// #version 450 core
// layout(local_size_x = 16, local_size_y = 1, local_size_z = 1)in;
//
// layout(set = 0, binding = 0)buffer dest
// {
//     uint dataBuffer[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//     uint data[4];
//     uint texelCount;
// } params;
//
// void main()
// {
//     uint threadId = gl_GlobalInvocationID . x;
//     uint texelCount = params . texelCount;
//
//     if(threadId >= texelCount)
//     {
//         return;
//     }
//
//     uint depthValue = params . data[0]& 0xFFFFFF;
//     dataBuffer[threadId]= depthValue;
//
//     if(threadId > texelCount)
//     {
//         return;
//     }
//
//     barrier();
//
//     uint offset = uint(ceil(texelCount));
//     uint stencilValue = params . data[0]>> 24;
//     dataBuffer[threadId + offset]=(stencilValue)|(stencilValue << 8)|(stencilValue << 16)|(stencilValue << 24);
//
// }
