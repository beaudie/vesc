// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyBits.comp.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyBits_comp_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x56,0x6f,0x68,0xd5,0x65,
    0x14,0x7e,0x9f,0x7b,0xb7,0x5b,0xd3,0x4d,0x0d,0xad,0x08,0x74,0x6d,0x4e,0x72,0x9b,
    0x6e,0x45,0x6b,0x43,0x18,0xc9,0x76,0xc1,0x2c,0xdc,0x87,0xd6,0x3e,0x45,0x16,0xba,
    0x5c,0xb4,0x41,0x11,0x2d,0xc8,0x45,0xc9,0x6e,0x1b,0xd9,0x82,0x04,0xa9,0xa0,0xdd,
    0x7d,0xf1,0x43,0x19,0xa9,0x44,0x09,0x21,0x24,0x4a,0xdf,0x8a,0x3e,0x05,0x06,0x06,
    0x42,0x59,0xb3,0x6e,0xb6,0x1a,0xc3,0x09,0xb3,0x56,0xd0,0x39,0xbf,0xf3,0xbc,0xee,
    0xf4,0xe3,0x37,0x78,0xf7,0xde,0xf3,0xbc,0xe7,0xef,0x73,0xce,0xb9,0x5b,0x3e,0xd7,
    0x74,0x4b,0x08,0x08,0xab,0xc2,0xad,0xe1,0x1f,0x84,0xe4,0xe7,0xb6,0x90,0x0b,0xfa,
    0x71,0x75,0x28,0x24,0xf7,0xee,0xbe,0x81,0xbe,0xf6,0xd1,0x97,0x0e,0xb4,0x3f,0xd0,
    0x79,0x9f,0xbe,0xaf,0x09,0xf9,0x44,0x4f,0xdf,0xd6,0x8a,0x4e,0xb5,0xdc,0x55,0x72,
    0x9e,0xdb,0x3f,0xfc,0xbc,0xe2,0x8d,0x72,0xd6,0x09,0x5e,0x95,0xf8,0xb2,0xb7,0x78,
    0x76,0xcb,0xef,0xc6,0xc4,0x77,0x08,0x1b,0xe5,0x3c,0x2c,0xd6,0xad,0x16,0x36,0x34,
    0xf1,0x8e,0x18,0x88,0xd5,0x3a,0x2c,0x47,0x6c,0x9d,0xc3,0xf2,0xc4,0xbc,0xbf,0x2a,
    0x62,0x0d,0x0e,0xab,0x26,0xb6,0xc5,0x61,0x05,0x62,0xcd,0x49,0x6e,0xf9,0x9b,0x31,
    0x34,0xcf,0x01,0xb9,0x37,0x33,0xa7,0x28,0x37,0x3a,0x79,0x9c,0xf6,0x55,0xf4,0x57,
    0x4a,0xd5,0xa1,0xfe,0x4a,0xcc,0x4f,0xf5,0x27,0x52,0xfe,0x26,0xe8,0x0f,0x94,0xaf,
    0x91,0x97,0xbb,0xe4,0xac,0x97,0x2c,0x72,0xc9,0x7b,0x3e,0xb1,0xd7,0xcf,0xb7,0x8b,
    0x4e,0x81,0x35,0x05,0xca,0xb5,0x94,0xd5,0xc7,0x9d,0x22,0xd7,0x91,0xaf,0x3c,0xe5,
    0xb5,0xcc,0x31,0xca,0x1b,0x5c,0xce,0x0d,0xf2,0xbb,0xe1,0x66,0x1f,0x43,0xe8,0xa6,
    0x1c,0x73,0xba,0x43,0xac,0xb6,0xd2,0xbf,0xda,0x2a,0x47,0x5b,0x9d,0xaf,0x16,0xfa,
    0xd2,0xdc,0xea,0x43,0x4d,0xc2,0x5d,0x33,0xb1,0x3a,0xde,0xf1,0xb4,0x30,0xde,0x36,
    0xb9,0x6b,0xe4,0xb4,0x32,0x9e,0xca,0xdb,0x89,0x6d,0x63,0x3d,0x6d,0xec,0x95,0xea,
    0xb7,0xf3,0xad,0xc0,0x77,0xbd,0x3b,0x98,0x5f,0xd4,0xef,0x62,0x3d,0xf1,0xbd,0x9b,
    0xfc,0x44,0xb9,0x87,0x39,0x47,0xb9,0xe8,0xf4,0xd5,0x7e,0x0f,0x6b,0xd0,0x78,0x7d,
    0x8c,0x57,0x97,0xf4,0xa1,0x26,0xf4,0xbb,0x1a,0xfd,0x4f,0x8e,0xbc,0xa8,0xcd,0x63,
    0xc4,0xfa,0x59,0x93,0xca,0x03,0xa9,0x1c,0xf6,0x9a,0x88,0x28,0xef,0xe3,0x06,0x45,
    0x79,0x88,0x0b,0x15,0x73,0x1a,0x63,0x8d,0x9b,0x24,0xf3,0x38,0x67,0xf5,0x9c,0xa7,
    0x71,0xc6,0x7d,0x9d,0x79,0x94,0x18,0x57,0xe5,0x09,0x62,0xd1,0xcf,0x24,0xf3,0x50,
    0xfd,0x29,0xbe,0x15,0x28,0x97,0x19,0x43,0xe5,0x0d,0xf2,0x72,0x8c,0xf8,0x65,0x72,
    0xd0,0xcc,0x3e,0xcf,0xca,0x7d,0xcc,0x71,0xa8,0x7e,0xaf,0x52,0xde,0x2e,0xd6,0x3a,
    0x3b,0xd7,0xc8,0x6b,0x3c,0x5d,0xd2,0xc1,0x1c,0x79,0x0e,0xd4,0xbd,0x21,0x88,0xf6,
    0x75,0x49,0xa4,0x45,0xe2,0xcb,0xf2,0x59,0xfb,0x75,0x9d,0xef,0x7a,0x3f,0xc8,0xb9,
    0xfd,0x81,0xb3,0xf8,0x02,0x67,0xef,0x47,0x62,0xbd,0xe2,0x45,0x73,0xfc,0x89,0xb3,
    0x33,0x49,0x1b,0xd5,0xf9,0x99,0xf8,0x79,0xd1,0xd1,0xbc,0xaf,0xd0,0x4e,0xf1,0xb2,
    0xe8,0x68,0x1d,0xbf,0x10,0xd7,0x3c,0x2a,0xcc,0xe3,0x6f,0x79,0x53,0xfc,0x57,0x39,
    0x15,0xe6,0xa2,0x9f,0xff,0x92,0x7b,0x91,0x72,0x85,0xb1,0x75,0x26,0x7f,0x67,0xec,
    0xab,0x8c,0xad,0x1c,0xce,0x11,0x3f,0x21,0x3a,0x1a,0xe7,0x0f,0x62,0x45,0xc6,0x9a,
    0x77,0xb1,0xf4,0xed,0x4f,0x39,0x0b,0xf4,0xad,0x9f,0x5f,0xe5,0xfe,0x56,0xc3,0xea,
    0xec,0x17,0x3f,0xea,0x77,0x23,0xe5,0x9c,0x8b,0xbf,0x09,0x16,0xbf,0xcd,0xc5,0xaf,
    0x87,0xe1,0x93,0xb4,0xbb,0x1b,0x66,0xab,0x78,0xf4,0xd5,0x48,0x5f,0x70,0xbe,0x36,
    0xd3,0x57,0x97,0xf3,0xd5,0x04,0xc3,0xa3,0xaf,0x2d,0x30,0xdb,0x26,0xe7,0xeb,0x1e,
    0xfa,0x0a,0x61,0x45,0xaf,0x19,0x86,0x17,0x93,0x39,0x35,0xac,0x05,0x86,0xeb,0x1e,
    0xbe,0x41,0xac,0x15,0x86,0x7b,0xbd,0x36,0x58,0xce,0x1a,0x2b,0x62,0xf7,0xc2,0x70,
    0xd5,0xd7,0x7c,0x75,0x3f,0xef,0x67,0xbe,0x7b,0x98,0xaf,0x72,0xd6,0x01,0xc3,0xd5,
    0x4e,0xe5,0x4e,0x18,0x8f,0x8a,0xab,0x8e,0xee,0x66,0x17,0x6c,0x2f,0x07,0x45,0x47,
    0xbf,0x07,0x77,0xc0,0xb0,0x4e,0xac,0x70,0xb1,0x8a,0xbe,0xc7,0x1c,0x17,0xab,0x61,
    0x78,0xac,0xbb,0x16,0x66,0x1b,0x5c,0x8f,0xea,0x88,0xc1,0x61,0x6b,0x88,0xe5,0x1c,
    0x3f,0x3b,0x61,0xfe,0xf6,0x3a,0xac,0x17,0xa6,0xbb,0xcf,0x71,0x51,0x84,0xe9,0xf6,
    0xba,0x1e,0xec,0x82,0xc5,0x19,0x72,0x7a,0x0f,0xc1,0x74,0x77,0x39,0xce,0x1e,0x81,
    0xe1,0xb5,0x49,0x5d,0x85,0x64,0xef,0xd7,0xc3,0xbe,0x1b,0x26,0xc9,0xe9,0x4e,0x99,
    0x47,0xc5,0x54,0x57,0x67,0x7c,0x9e,0x73,0xb8,0xc0,0x59,0x9d,0xc1,0xff,0xf7,0xf3,
    0x71,0xd8,0xbb,0xde,0x71,0x4e,0x9f,0x70,0x73,0xaa,0xdf,0x09,0x4f,0xc2,0xb0,0xc0,
    0xfc,0x14,0x7b,0x0a,0x86,0x8f,0x39,0xbd,0xfd,0xd4,0x83,0xc3,0x06,0x89,0x29,0x57,
    0x8f,0x4a,0xce,0xea,0xff,0x69,0x98,0xbd,0xea,0x0f,0xb2,0x47,0xfa,0x9d,0x75,0x00,
    0xf6,0xbd,0xd0,0xed,0x7a,0x34,0x04,0xc3,0xa7,0xc8,0xc1,0x33,0x30,0xac,0xe8,0xf6,
    0xf1,0x59,0x18,0xde,0xc3,0x1a,0x47,0xb0,0xb2,0x8f,0xfa,0x36,0x2c,0x67,0x84,0x75,
    0x0e,0x93,0x97,0x19,0xca,0x23,0xae,0xff,0x1f,0x64,0xec,0xe3,0x87,0x19,0xfb,0x78,
    0x1c,0x86,0xc7,0xfe,0x7d,0x04,0xb3,0x3d,0xee,0x7c,0x7d,0x9c,0xb1,0x8f,0x27,0x32,
    0xf6,0xf1,0x24,0x0c,0x8f,0xbe,0x4e,0xc1,0x6c,0x4f,0x3a,0x5f,0x9f,0x64,0xec,0xe3,
    0xa7,0x30,0xbc,0xc7,0xcd,0xcc,0x67,0x30,0xdc,0xef,0xe3,0x69,0x18,0xee,0xf7,0xf1,
    0x73,0x58,0xce,0xa7,0xdc,0x6c,0x9d,0x81,0xe1,0xa7,0xdd,0x3e,0x7e,0x91,0xb1,0x8f,
    0x67,0x61,0x78,0xdc,0xc7,0x73,0xec,0xef,0x59,0xb7,0x8f,0xe7,0x53,0xfb,0xf8,0x25,
    0x0c,0x3b,0xe7,0xec,0xbe,0x82,0xcd,0x81,0xb7,0xfb,0x3a,0x65,0xf7,0x0d,0x0c,0x53,
    0xdd,0xd8,0xeb,0x17,0xd9,0xeb,0x6e,0xf6,0xba,0xec,0x7a,0xad,0x6f,0xa3,0x72,0x0e,
    0xb1,0xb7,0xa3,0x8e,0xc3,0x97,0x61,0xfe,0xfc,0x6e,0x1f,0x84,0xe5,0xe6,0xb1,0x31,
    0x62,0x7e,0xdf,0x5f,0x21,0xe6,0xf7,0xfd,0x5b,0x98,0x4f,0xbf,0xef,0x17,0x60,0xba,
    0x7e,0xdf,0xbf,0x83,0xe9,0x5e,0x70,0x3d,0xbe,0x08,0x8b,0xe3,0xf7,0xfd,0x7b,0x98,
    0xee,0x45,0xd7,0x93,0x4b,0x30,0xfc,0xa0,0xdb,0xf7,0xd7,0xdc,0xbe,0x9f,0xe1,0xbe,
    0x2b,0x76,0x89,0x73,0x5d,0x66,0xed,0x87,0x1c,0x67,0xe3,0xe4,0xac,0x83,0x9c,0x4d,
    0x3b,0xce,0xf4,0xad,0x24,0xe7,0x08,0xed,0x4a,0x8e,0xb3,0xc3,0x19,0x5c,0xbc,0xe9,
    0xb8,0x88,0xd8,0x54,0x06,0xb7,0x6f,0x11,0x83,0xe3,0xe7,0x32,0x0c,0xf7,0x9c,0xcd,
    0xc2,0xec,0x3d,0x67,0x57,0x60,0xba,0xb3,0x8e,0xb3,0x0a,0x2c,0xb6,0xe7,0xec,0x37,
    0x98,0x6e,0xc5,0x71,0x36,0x07,0xc3,0x0f,0x3b,0xce,0xde,0xce,0xe0,0x4c,0xb1,0x39,
    0x72,0x36,0xcd,0xda,0x8f,0xb8,0xda,0x8f,0x66,0xd4,0xf9,0x4e,0x46,0x9d,0xef,0xba,
    0x3a,0x23,0xf6,0x1e,0x31,0x3f,0x2f,0x0b,0x30,0xdc,0xd7,0xbe,0x08,0xb3,0xf7,0xb5,
    0x5f,0x87,0xe9,0x2e,0xba,0xda,0x97,0x60,0xb1,0x7d,0xed,0x37,0x60,0xba,0x4b,0xae,
    0xf6,0x65,0x18,0x7e,0xd4,0xd5,0xfe,0x7e,0x46,0xed,0x8a,0x2d,0xa7,0x6a,0x9f,0x4e,
    0xcd,0x4f,0x39,0xf5,0x3d,0x39,0x93,0xfa,0x7b,0x32,0x9f,0xfa,0x1f,0x4a,0xef,0x7f,
    0x85,0x85,0x1d,0x72,0xfe,0x03,0xcb,0xa9,0x8e,0x91,0x7c,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 4, local_size_y = 4, local_size_z = 4)in;
//
// layout(set = 0, binding = 0, rgba8ui)uniform uimage3D src;
// layout(set = 0, binding = 1)buffer dest
// {
//     uint destData[];
// };
//
// layout(push_constant)uniform PushConstants
// {
//
//     vec3 extents;
//
//     uint emulatedAlphaValue;
//
//     ivec3 srcOffset;
//
//     uint destChannelCount;
//
//     uint destRowPitch;
//     uint destDepthPitch;
//
//     uvec2 _padding;
// } params;
//
// uint getDestOffset(uint pixelBytes)
// {
//     uvec3 srcCoord = gl_GlobalInvocationID;
//
//     uint depthOffset = srcCoord . z * params . destDepthPitch;
//
//     uint rowOffset = srcCoord . y * params . destRowPitch;
//
//     uint colOffset =(srcCoord . x * pixelBytes + 3)/ 4;
//
//     return depthOffset + rowOffset + colOffset;
// }
//
// uvec3 fetchSrc(ivec3 srcCoord)
// {
//     srcCoord += params . srcOffset;
//
//     return imageLoad(src, srcCoord). rgb;
//
// }
//
// uint makeUint(uvec4 v)
// {
//     return v . a * 0x1000000u + v . b * 0x10000u + v . g * 0x100u + v . r;
// }
//
// void copyRGBToRGBA()
// {
//     ivec3 srcCoord = ivec3(gl_GlobalInvocationID);
//
//     uint pixelBytes = 4;
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec4 v = uvec4(fetchSrc(srcCoord), params . emulatedAlphaValue);
//
//     destData[destOffset]= makeUint(v);
//
// }
//
// void copyRGBAToRGB()
// {
//     ivec3 srcCoord0 = ivec3(gl_GlobalInvocationID);
//     ivec3 srcCoord1 = ivec3(srcCoord0 . x + 1, srcCoord0 . yz);
//
//     uint remainder = gl_GlobalInvocationID . x % 4;
//     uint pixelBytes = 3;
//
//     if(remainder == 3)
//     {
//         return;
//     }
//
//     uint destOffset = getDestOffset(pixelBytes);
//
//     uvec3 v0 = fetchSrc(srcCoord0);
//
//     uvec3 v1 = fetchSrc(srcCoord1);
//
//     if(remainder == 0)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . rgb, v1 . r));
//     }
//     else if(remainder == 1)
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . gb, v1 . rg));
//     }
//     else
//     {
//         destData[destOffset]= makeUint(uvec4(v0 . b, v1 . rgb));
//     }
//
// }
//
// void main()
// {
//     if(any(greaterThanEqual(gl_GlobalInvocationID, params . extents)))
//     {
//         return;
//     }
//
//     if(params . destChannelCount == 4)
//     {
//         copyRGBToRGBA();
//     }
//     else
//     {
//         copyRGBAToRGB();
//     }
// }
