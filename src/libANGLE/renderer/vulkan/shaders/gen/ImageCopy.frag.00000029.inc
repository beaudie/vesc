// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000029.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000029[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xe9,0x4f,0x9c,0x55,
    0x14,0xc6,0xdf,0x99,0x77,0x16,0x0a,0xb2,0x14,0x68,0x91,0x2a,0xd5,0x2e,0x24,0x1a,
    0x2a,0x4c,0x14,0x2b,0x82,0x6d,0x42,0xad,0xb4,0xa9,0xb8,0x54,0x8c,0xb5,0x45,0xbb,
    0x58,0x88,0x69,0x23,0x28,0x6d,0x85,0xa8,0xe0,0x42,0x95,0x18,0x50,0xe1,0x83,0xad,
    0x16,0x62,0x48,0x35,0x0a,0x49,0x0b,0x1f,0x14,0xd2,0x7e,0x30,0xf1,0x93,0x69,0x8c,
    0xd6,0x68,0xeb,0xf2,0x97,0x18,0x97,0xc4,0xc4,0x73,0xee,0xfc,0x4e,0x73,0x9c,0x68,
    0x3a,0xc9,0xcd,0x3b,0xf7,0x39,0xdb,0xf3,0x9c,0x7b,0xde,0x3b,0x13,0x27,0x37,0x64,
    0xa3,0x28,0x11,0x15,0x47,0x45,0xd1,0xaf,0x51,0xfe,0xb3,0x32,0x4a,0x0a,0x92,0x7f,
    0xde,0x29,0xcf,0x92,0x28,0x13,0xf6,0x3b,0x3a,0xbb,0x3a,0x1b,0x8f,0x9f,0xe8,0x69,
    0x6c,0xbe,0x3b,0xa7,0x7e,0x65,0x51,0x1c,0xfc,0xd5,0x56,0x1e,0x65,0xa3,0x94,0x3c,
    0x75,0xf5,0x1d,0x3a,0xd2,0xaf,0x78,0xa9,0xac,0x8b,0xb2,0x2a,0xc4,0x4f,0xf1,0xac,
    0xe6,0x90,0x6f,0xa5,0x21,0xa7,0xc6,0x44,0xd1,0xce,0x28,0x1d,0x55,0x51,0x77,0x03,
    0x4f,0xc3,0x12,0x60,0x45,0x0e,0x4b,0x82,0x55,0x38,0x2c,0x06,0xab,0x76,0x58,0x0a,
    0xec,0x46,0x87,0xa5,0xc1,0x6e,0x76,0x58,0x06,0xec,0x56,0x87,0x65,0xc1,0x36,0x3a,
    0xac,0x08,0xec,0x36,0x87,0xad,0x00,0xdb,0xe4,0xb0,0x62,0xb0,0x9c,0xc3,0x4a,0xc0,
    0x9a,0x1d,0x76,0x03,0x58,0x8b,0xc3,0x4a,0xc1,0xee,0x0b,0x7d,0x8a,0xaf,0xe9,0xd5,
    0x9e,0x6d,0x97,0xe7,0x7a,0xfa,0x63,0xfb,0x75,0x6e,0xaf,0x7d,0x5e,0xcb,0xbe,0x4a,
    0xa2,0x92,0xc1,0x1e,0x87,0xde,0xe8,0xf7,0x55,0xe2,0x93,0x41,0xa7,0xf6,0xb5,0x46,
    0xf6,0x59,0xf4,0xab,0x7d,0xb5,0x78,0x16,0x63,0x57,0x5b,0x09,0x5a,0x52,0x01,0x4b,
    0x05,0xbe,0x09,0xb4,0xb4,0xb1,0x2f,0x75,0xb9,0xca,0xf0,0xb7,0x5a,0x95,0xe4,0x8a,
    0x02,0xaf,0x8a,0x6b,0x7d,0xb5,0x9a,0xba,0x2a,0xaf,0xb3,0xcc,0x47,0xeb,0x57,0xd3,
    0xef,0x2a,0xea,0x57,0x87,0x3a,0x79,0xac,0x01,0x6d,0xab,0xe1,0xa3,0xfe,0x35,0xd8,
    0xb2,0xce,0x5e,0xe7,0xf4,0xac,0xc5,0x5e,0x19,0xe6,0x26,0x19,0x7a,0xd9,0x00,0x6f,
    0xeb,0xb3,0xc5,0x35,0x30,0x3b,0xb6,0xdf,0x8c,0x76,0xd5,0xbd,0x95,0x1c,0x9a,0xb7,
    0x56,0x32,0xb6,0xb3,0x4f,0x46,0xff,0xfe,0x24,0x78,0xde,0x24,0x7d,0xde,0x26,0xcf,
    0x76,0x78,0xdc,0x0f,0xbe,0x0d,0x5d,0xba,0xdf,0x5e,0x50,0xbf,0xa3,0x60,0xdf,0xc9,
    0xcc,0x6b,0xfc,0x43,0xe8,0xc8,0xc0,0x67,0x37,0xe7,0x10,0xb3,0xdf,0x83,0x2d,0x76,
    0xf1,0xdd,0xf0,0xb3,0xfd,0x41,0x17,0x7f,0x14,0xfe,0xde,0xff,0x18,0x7d,0x54,0xfb,
    0x18,0xbe,0x29,0x67,0x9f,0xe0,0xfd,0xb0,0xfd,0xe9,0x82,0x73,0x39,0xcb,0xbc,0x2b,
    0xdf,0x0b,0xe4,0x1e,0x43,0xef,0x05,0xee,0x88,0x38,0xf4,0x35,0x1d,0x78,0xa5,0xd0,
    0xab,0xd8,0x1f,0x82,0x68,0xef,0xb7,0x30,0x93,0xe5,0xf4,0xfe,0x11,0x61,0x54,0xc6,
    0x3d,0x50,0xce,0xb2,0x3e,0xf7,0x33,0xdb,0x2b,0xb1,0xb7,0x4b,0x86,0x1a,0xee,0x82,
    0x55,0xcc,0xc9,0x16,0x7c,0x6a,0xc1,0x47,0xc5,0x47,0xf7,0x6b,0x88,0xab,0x25,0x4e,
    0xe7,0xe4,0x16,0xe2,0xea,0x88,0xb3,0xd9,0x56,0xfc,0x9c,0xf8,0xac,0x73,0x77,0x88,
    0xce,0xce,0xef,0xc2,0xbc,0x1e,0x3e,0x7f,0x89,0xbf,0xdd,0x25,0xf5,0xe8,0xd1,0xef,
    0xbb,0x25,0x2e,0xc3,0x7d,0xb2,0x06,0xdf,0x57,0xe9,0xd7,0xed,0xe0,0x8f,0xc9,0x4e,
    0x39,0x7d,0x09,0x66,0x7e,0x7f,0x4a,0x0e,0xcb,0xa5,0xcf,0xdf,0xc4,0x4b,0xfd,0xbe,
    0xc3,0x27,0x4d,0xcc,0x46,0xa7,0x61,0x13,0x1a,0x1a,0x9c,0x86,0x3b,0xc0,0x4d,0x43,
    0x23,0x98,0x69,0xc8,0x39,0x0d,0x6a,0x6b,0xe2,0x5e,0xd3,0xba,0x4d,0x4e,0xc3,0x5d,
    0xd4,0x4e,0x38,0x0d,0xcd,0xe0,0xa6,0xe1,0x2b,0x30,0xf3,0x53,0x0d,0x96,0x2b,0xe7,
    0x34,0x5c,0xc6,0xa7,0x9e,0x98,0x26,0xa7,0xe1,0x1e,0x34,0x6c,0x76,0x1a,0x5a,0xc0,
    0x4d,0xc3,0xbd,0x60,0xa6,0xa1,0xcd,0x69,0x50,0x5b,0x6b,0x98,0xbb,0x7c,0xdd,0x56,
    0xe6,0x28,0x1b,0xf2,0xe5,0x6b,0x5f,0x76,0xef,0xaa,0x72,0x34,0xdf,0x36,0xc7,0xf1,
    0x7b,0xfc,0x72,0xc4,0xb5,0xc2,0x47,0xdf,0xe1,0x07,0x78,0x7f,0x6d,0xe6,0x76,0xc0,
    0xb9,0xc3,0xcd,0xdc,0x4e,0xf0,0xd7,0x99,0xb9,0x5d,0x60,0x9a,0xf7,0x79,0xee,0xd2,
    0x07,0xc1,0x35,0x8f,0xbe,0xe3,0x0f,0x93,0xa7,0x93,0x3c,0x99,0xc0,0x3d,0x8f,0x6b,
    0x8c,0xbe,0xf3,0x8f,0x82,0xe9,0xb9,0x14,0x87,0xde,0xe7,0xf3,0x44,0x0e,0xeb,0x02,
    0x4b,0x04,0xff,0x4c,0xb8,0x2f,0x1e,0xc7,0xb7,0x8b,0x1c,0x3d,0x92,0x4f,0xef,0xa7,
    0x27,0xd0,0xf3,0xac,0xc4,0xea,0x3d,0xf2,0x24,0x58,0x07,0x35,0x35,0x76,0x2f,0xf8,
    0xdb,0xe2,0xa3,0xfb,0x7d,0xe4,0xdb,0xeb,0xb8,0x3f,0x05,0xf7,0x6e,0xc7,0xfd,0x69,
    0x70,0xe3,0xbe,0x1f,0x6c,0x8f,0x74,0x44,0xef,0xd4,0x03,0xd4,0xde,0x07,0xd7,0xfd,
    0x6e,0x0e,0x0e,0x91,0xef,0xa0,0x9b,0x83,0x67,0xc0,0x6d,0x0e,0x0e,0x83,0xd9,0x1c,
    0xf4,0xba,0x39,0x38,0x1c,0x34,0x46,0xd1,0x00,0x67,0xdb,0x43,0x7f,0x34,0xcf,0x11,
    0x6a,0xc7,0xa1,0x97,0x45,0xe1,0x3e,0x7c,0x0e,0xec,0x80,0xbb,0x63,0x92,0xf4,0x4f,
    0xed,0x7d,0xc4,0xd9,0x7a,0x53,0x72,0x1d,0x0d,0xf7,0x50,0x3e,0xb6,0x2f,0xe4,0x5a,
    0x11,0x74,0xbd,0x40,0x9e,0x7e,0xee,0xb9,0xb4,0xbb,0x9f,0x75,0xde,0x7a,0xe1,0x34,
    0xe0,0xf4,0x1e,0x47,0xef,0x31,0xa7,0xf7,0x04,0xb8,0xe9,0x7d,0x11,0xcc,0xf4,0x0e,
    0x39,0xbd,0x6a,0x1b,0x94,0x35,0x44,0xee,0x41,0xa7,0xf7,0x25,0xa7,0xf7,0x3c,0xb9,
    0x5e,0x06,0x5f,0x0f,0x27,0x8b,0x1b,0xe2,0x1d,0x50,0x9f,0x57,0xa8,0x39,0x80,0xff,
    0x20,0x75,0x47,0x5c,0x5d,0xf5,0x19,0x96,0x35,0x42,0xfc,0xb0,0xab,0xfb,0xda,0x7f,
    0xf4,0xf9,0x8d,0xeb,0xf4,0x79,0x94,0x38,0x5b,0x63,0xf4,0xf9,0x24,0xb1,0xa3,0xae,
    0xcf,0x6f,0x91,0xe7,0xe4,0xff,0xf4,0xd9,0x38,0x8d,0xa0,0x49,0x63,0x7e,0x24,0x66,
    0x88,0xf8,0xe1,0x82,0x33,0xe9,0x75,0xbe,0x3f,0x70,0x96,0x3d,0xc4,0x8d,0x04,0xff,
    0xfc,0xef,0xe3,0x38,0x76,0x3b,0xbf,0x77,0x38,0xbf,0x09,0x77,0x7e,0xef,0x82,0xdb,
    0xf9,0xbd,0x07,0x66,0xe7,0x37,0xe5,0xfa,0xa8,0xb6,0x49,0x59,0xa7,0xe0,0x31,0x89,
    0x4e,0xad,0xf5,0x3e,0xf5,0xc6,0xd1,0x99,0xa5,0x67,0xa6,0x73,0x8a,0x98,0x53,0x8e,
    0xcf,0x07,0xf0,0x39,0xed,0xf8,0x7c,0x08,0x6e,0x7c,0xce,0x80,0x19,0x9f,0x19,0xc7,
    0x47,0x6d,0xd3,0xb2,0x66,0xc9,0x3d,0xed,0x7e,0x0b,0x3e,0x82,0x4b,0xcc,0xdd,0xaf,
    0x1c,0xbf,0x76,0xb8,0xdd,0xab,0x33,0xc4,0xce,0xba,0x7b,0xe2,0x63,0x78,0x9d,0x75,
    0xf7,0xc4,0x27,0xe0,0x97,0xc8,0xff,0x29,0x58,0xb7,0xe3,0xfa,0x19,0x78,0x07,0x5c,
    0xe7,0x1d,0x57,0xb5,0xcd,0xc9,0x9a,0xa7,0xde,0x9c,0xe3,0x75,0x89,0x98,0x71,0xf7,
    0x9b,0x64,0x7e,0xf3,0x9c,0xb5,0xfa,0x5d,0xc1,0x67,0x96,0x98,0x39,0xc7,0xe7,0x1c,
    0x7c,0xea,0x1c,0x9f,0xf3,0xe0,0xc6,0x67,0xd1,0xf1,0x51,0xdb,0x82,0xac,0x45,0xea,
    0x2c,0x38,0x3e,0xdf,0x10,0x73,0x85,0x33,0x54,0x3e,0xe6,0xb7,0xe8,0xf8,0x5c,0xc5,
    0x67,0x9e,0x98,0x05,0xc7,0xe7,0x73,0xf8,0x4c,0x38,0x3e,0x5f,0x80,0x1b,0x9f,0x65,
    0xc7,0x47,0x6d,0x4b,0xb2,0x96,0xa9,0xb3,0xe4,0xf8,0x7c,0xcb,0x7f,0xa5,0xab,0x6e,
    0x9e,0xcc,0x6f,0xd9,0xf1,0xf9,0x05,0x9f,0x45,0x62,0x96,0x0a,0xce,0x78,0xc6,0xf9,
    0xfe,0xcc,0x3c,0x4c,0x13,0xb7,0x5c,0x30,0xa7,0x53,0xce,0xf7,0x27,0xe6,0x7b,0x92,
    0x38,0xcd,0xb3,0x55,0x98,0x5c,0xc4,0xf6,0xb7,0x9c,0x5a,0x8b,0xac,0x7f,0x00,0xd0,
    0xb9,0x6f,0x1b,0xc4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform usampler3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
