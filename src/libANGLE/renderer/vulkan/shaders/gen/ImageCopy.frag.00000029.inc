// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000029.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000029[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0xe4,0x21,0xa0,0x84,0x8a,0x25,0x4a,0x96,0x18,
    0x62,0x81,0x91,0x40,0x49,0x46,0x92,0x51,0x8a,0x9a,0x95,0x50,0x46,0x92,0x68,0x21,
    0x95,0x98,0x69,0x12,0x89,0x29,0x5a,0x5a,0x49,0xf9,0xe8,0x25,0x56,0xa2,0x95,0xa8,
    0xf5,0x5f,0xf4,0x17,0x35,0x3d,0x66,0x9a,0x69,0xaf,0x73,0x7f,0x8b,0xf9,0xba,0x63,
    0xc5,0xcc,0x9e,0x7b,0xd6,0xb7,0xd6,0xfe,0xf6,0xb7,0xd6,0xda,0x67,0x1d,0x92,0x89,
    0xa5,0xe9,0x28,0x99,0x13,0x15,0x46,0xf9,0xd1,0xcf,0x51,0xe6,0x6f,0x6e,0x94,0x88,
    0x72,0xc2,0x6f,0x51,0x94,0x8a,0x7f,0x37,0x74,0x6f,0xed,0x6e,0x18,0x39,0x30,0xd0,
    0xd0,0xd4,0xdc,0x68,0xfe,0x92,0x28,0x19,0xc7,0x99,0xaf,0x34,0x4a,0x47,0xb9,0xe1,
    0xd7,0xd6,0xbe,0xfe,0xbd,0xc3,0x86,0x17,0x87,0x75,0x2b,0xac,0xb2,0x10,0x67,0x78,
    0xda,0x38,0xc2,0x53,0x71,0xcc,0x69,0x7b,0xa2,0xa8,0x2b,0xca,0x8b,0x2a,0x38,0x6f,
    0x29,0xbf,0x8e,0xe5,0x80,0xe5,0x0b,0x96,0x00,0x2b,0x13,0x2c,0x09,0x56,0x29,0x58,
    0x2e,0xd8,0x1d,0x82,0xe5,0x81,0x2d,0x12,0x2c,0x05,0x76,0x97,0x60,0x69,0xb0,0x65,
    0x82,0xe5,0x83,0xdd,0x23,0x58,0x01,0xd8,0x4a,0xc1,0x0a,0xc1,0x1a,0x05,0x2b,0x02,
    0x6b,0x12,0x6c,0x0e,0x58,0x8b,0x60,0xc5,0x60,0x6d,0x71,0x9d,0x92,0xb3,0xf9,0x5a,
    0xcd,0xd6,0x87,0xdf,0x5a,0xea,0xe3,0xf6,0x12,0xb1,0xad,0xce,0x8b,0xb1,0x2b,0xc2,
    0xae,0x44,0xec,0x4f,0xc6,0xb5,0xb1,0xe7,0x79,0x21,0x26,0x45,0x9e,0x56,0xd7,0xaa,
    0x60,0xa7,0xc9,0x3f,0x11,0xe3,0xb9,0x71,0x8e,0x69,0xd6,0xfc,0xb0,0xb3,0x90,0x78,
    0x8b,0x2d,0x22,0xb7,0x5c,0x62,0xe7,0xc0,0x63,0x78,0x2b,0x76,0xb1,0x70,0x97,0x10,
    0xef,0x67,0x97,0xc3,0x15,0xc5,0x3a,0xcb,0x66,0xeb,0xec,0x1a,0x6c,0x95,0xff,0xcf,
    0xf2,0x18,0x3b,0xbf,0x92,0xfa,0x57,0x70,0x7e,0x65,0x7c,0x4e,0x06,0xab,0x27,0xd7,
    0xf9,0xe8,0xb1,0xf8,0x2a,0x7c,0x69,0xf1,0xd7,0x48,0x3e,0x8b,0xf1,0x97,0xc7,0xf7,
    0x28,0x11,0xd7,0xb6,0x1e,0xdd,0x5e,0x77,0x8b,0xbb,0x5b,0x34,0x3b,0x4f,0x3d,0x77,
    0xcb,0xe3,0x57,0x73,0xae,0xfb,0xd7,0x50,0x1b,0xab,0xcb,0xc3,0x9c,0xe1,0xe7,0x3e,
    0x02,0x9f,0xe1,0xd5,0x41,0x41,0x07,0xfe,0x44,0xf4,0xcf,0xbf,0x1c,0xd1,0xf0,0x28,
    0xcf,0x1d,0xe4,0x6e,0xf6,0x7a,0x30,0x3f,0xb3,0x33,0xcb,0xde,0xc8,0x7b,0x62,0xfb,
    0x9f,0x24,0xd7,0x14,0x9a,0x9e,0xe6,0x39,0x29,0xf1,0x5b,0xd0,0xe0,0xf6,0x76,0xc9,
    0xd9,0xf4,0xf5,0x09,0xdf,0x0b,0xe4,0x50,0x0e,0xdf,0x4b,0x3c,0x2b,0xdf,0x1e,0x62,
    0xcc,0x3f,0x0a,0x97,0xd7,0xe0,0x5d,0x7c,0xa3,0x12,0x3f,0xce,0x3b,0xe7,0xf6,0x99,
    0xac,0xde,0x5e,0xe4,0x1d,0x72,0x3d,0x57,0xe5,0x1e,0xdf,0xe4,0xec,0x51,0xea,0x73,
    0x93,0x39,0x94,0x8c,0x7b,0x91,0x17,0xc7,0xe5,0x52,0x1f,0xc3,0x7e,0x0f,0x48,0x1e,
    0xb1,0xf9,0x72,0x4f,0xdc,0x5e,0x28,0xb6,0xf5,0x6b,0x9d,0xd8,0xa6,0x7d,0x4c,0x6c,
    0xbb,0x1f,0x17,0xb0,0xdb,0x79,0x6f,0x4a,0xe9,0xff,0xa6,0x80,0x96,0x30,0xbb,0x4a,
    0x59,0xde,0xdb,0x61,0xde,0xc7,0xb9,0xf8,0x3b,0x82,0xa2,0x2a,0xe6,0xd7,0x3c,0xee,
    0x72,0x3b,0x31,0xd5,0xe0,0xc7,0x42,0x8c,0xd9,0x0b,0xd8,0x57,0x1d,0xdf,0xa3,0x64,
    0xac,0x7f,0x81,0xc4,0x2f,0x22,0x27,0xf3,0x2d,0xc4,0x36,0x7e,0xbb,0xf3,0x77,0xc2,
    0x5f,0x43,0xbc,0xbf,0xa7,0x86,0xcf,0x84,0x98,0x25,0x32,0x1f,0xed,0x3d,0xf8,0x2d,
    0x70,0xd4,0xa1,0xfb,0xcf,0x10,0xef,0x73,0xb2,0x8e,0x3a,0x2e,0x83,0xdb,0xea,0xb0,
    0x9c,0xda,0xd5,0xc2,0x9d,0x62,0x7e,0x2e,0x8f,0x6b,0x96,0xb1,0xef,0x05,0xf3,0x3d,
    0x2b,0x64,0x8f,0xe9,0x5d,0x41,0xcc,0x1f,0x81,0xdb,0xcf,0xa8,0x13,0xfd,0x2b,0xd1,
    0x5f,0x2f,0xfa,0xef,0x03,0x77,0xfd,0x0d,0x60,0xae,0xbf,0x51,0xf4,0x9b,0x6f,0x15,
    0xf3,0xda,0xb8,0x57,0x89,0x96,0xfb,0xd1,0xb2,0x5a,0xf4,0x3f,0x00,0xee,0xfa,0x9b,
    0xc0,0x7c,0x4f,0xb3,0xec,0x31,0xfd,0xcd,0xc4,0x98,0x7e,0x3f,0xa3,0x51,0xf4,0x3f,
    0x88,0xfe,0x35,0xa2,0xbf,0x05,0xdc,0xf5,0x3f,0x04,0xe6,0xfa,0x5b,0x45,0xbf,0xf9,
    0xd6,0xc6,0x77,0x2f,0xc3,0xbd,0x56,0xfa,0xde,0x86,0x16,0xbb,0x77,0x99,0xfb,0x98,
    0xc1,0xda,0x64,0x9e,0xf8,0x9d,0x68,0x47,0xa3,0xf3,0xb4,0xc2,0x63,0x33,0xe6,0x31,
    0xe6,0x8b,0xdf,0xc9,0xc7,0xd1,0xdc,0x29,0x67,0x6d,0x00,0x77,0xbb,0x8b,0xb3,0x8f,
    0x72,0x47,0x9f,0x20,0xa6,0x0b,0x1e,0x9b,0x41,0xdd,0xf0,0x6c,0x94,0xfa,0x3e,0x05,
    0xde,0x13,0x62,0x52,0xb1,0xf6,0xcc,0xde,0x48,0xb0,0xcd,0x60,0x39,0xf1,0x73,0x2a,
    0x9e,0x5f,0x3d,0xc4,0x6e,0x86,0xc3,0xcf,0xd8,0xca,0x19,0x5b,0xe4,0x8c,0x6d,0xe0,
    0x3b,0x83,0x32,0x9b,0xbb,0xcf,0x90,0x63,0x0f,0x33,0x64,0x1b,0x75,0x59,0x87,0xcf,
    0x7b,0xf5,0x2c,0x5c,0xdb,0xa5,0x57,0xcf,0x81,0x7b,0xaf,0x9e,0x07,0xf3,0x5e,0xf5,
    0x4a,0xaf,0xcc,0xb7,0x23,0xac,0x41,0x6a,0xbc,0x03,0x6e,0x9b,0x9f,0x2f,0x32,0x57,
    0xfa,0x84,0x7b,0x27,0x78,0x3b,0xdf,0x8d,0x7e,0x62,0x36,0x85,0xa9,0x64,0x33,0xf6,
    0x65,0xb0,0x7e,0x99,0x23,0x09,0x6a,0x62,0xfe,0x5d,0x70,0xf8,0x3a,0x1e,0xce,0x32,
    0x7c,0x80,0xbd,0xbb,0x84,0xfb,0x95,0x59,0xee,0x82,0xd8,0xde,0x0d,0x36,0xc0,0xac,
    0xcc,0x93,0x6f,0x84,0xd7,0x66,0x37,0x77,0xa6,0x97,0x7c,0x06,0xa5,0x56,0x7b,0xa9,
    0xd5,0x1e,0xc9,0xe7,0x55,0x70,0xaf,0xd5,0x6b,0x60,0x5e,0xab,0x7d,0x52,0x2b,0xf3,
    0x0d,0xd9,0xff,0x92,0x70,0x0f,0x49,0xad,0x86,0x6f,0x53,0xab,0xd7,0xc1,0x6f,0xc0,
    0xfd,0x06,0x58,0x2d,0x1a,0x9d,0xc7,0x7e,0x7f,0x0d,0x7d,0xb7,0x98,0x37,0xd1,0x30,
    0x48,0xfc,0x10,0x3a,0x46,0x44,0x87,0xc5,0xec,0x0f,0x6b,0x84,0xfd,0xfb,0x45,0xc7,
    0x81,0xdb,0xe8,0x78,0x0b,0xdc,0xeb,0x7a,0x30,0xab,0x67,0x6f,0x83,0x1d,0xfc,0x97,
    0x9e,0x1d,0x82,0xc3,0xd7,0x04,0x3d,0x3b,0xcc,0xde,0x43,0xc2,0xfd,0x4e,0x56,0xcf,
    0x8e,0x80,0x1d,0xfe,0x8f,0x9e,0x1d,0xa1,0x1e,0x9e,0xcf,0x48,0x56,0x0f,0x7b,0x85,
    0xff,0x3d,0xf8,0x47,0xf9,0x66,0x1f,0x05,0x33,0xae,0x31,0x6c,0xef,0xf7,0x31,0xfa,
    0x3d,0x2e,0xb5,0x78,0x1f,0xdc,0xfb,0x7d,0x1c,0xcc,0xfb,0x3d,0x21,0x75,0x36,0xdf,
    0x89,0xb0,0x4e,0xa3,0xe3,0x04,0x3c,0x76,0xee,0x49,0xbe,0xb1,0x3e,0xc7,0x4e,0x81,
    0x9d,0x94,0x6f,0xb8,0xc7,0x7e,0x30,0x1b,0x5b,0x10,0xdb,0x1f,0x82,0x9d,0x92,0x9a,
    0x24,0xa4,0x26,0x63,0xc4,0x58,0x0d,0x26,0x38,0xfb,0xb4,0xe4,0xf5,0x11,0x79,0x9d,
    0x91,0xbc,0x3e,0x06,0xf7,0xbc,0x3e,0x01,0xf3,0xbc,0x26,0x25,0x2f,0xf3,0x9d,0x0d,
    0xeb,0x3c,0xdc,0x67,0xe5,0x5b,0xf1,0x29,0x5a,0xfb,0x64,0x36,0x7d,0x06,0xee,0x31,
    0xe7,0x88,0xf1,0xef,0xe1,0x39,0x62,0x4c,0xef,0x24,0x9c,0xe7,0x65,0xde,0x7d,0x8e,
    0xde,0x8b,0xc2,0xf9,0x05,0xb8,0xed,0xbf,0x80,0xed,0xbe,0x2f,0xf9,0x7f,0xe5,0x17,
    0x66,0xeb,0x57,0x60,0x5b,0x24,0xbf,0xaf,0xc1,0x3b,0xc9,0x6f,0x4a,0xf2,0x33,0xdf,
    0xa5,0xb0,0xa6,0xd0,0x72,0x49,0xb4,0x5f,0x46,0xbb,0x7f,0x0b,0x2f,0xc3,0x61,0xda,
    0x3d,0x7e,0x4a,0xb4,0x7c,0x93,0xa5,0xe5,0x5b,0xb0,0x1a,0xd1,0xf2,0x1d,0xb8,0x6b,
    0x99,0x16,0x2d,0xe6,0xbb,0x12,0xd6,0x34,0xdc,0x57,0x44,0xcb,0x35,0xb4,0x5c,0x45,
    0xcb,0x35,0xd1,0xe2,0xf1,0xd3,0xa2,0xe5,0xfb,0x2c,0x2d,0x3f,0x80,0x8d,0x8b,0x96,
    0x1f,0xc1,0x5d,0xcb,0x8c,0x68,0x31,0xdf,0xf5,0x38,0x36,0xc3,0x7d,0x5d,0xb4,0xdc,
    0x90,0xbe,0x9b,0x96,0x1b,0xfc,0x7f,0x67,0x5a,0x3c,0x7e,0x26,0xab,0xc7,0x93,0x59,
    0x77,0x74,0x42,0xee,0xfc,0x4f,0xf0,0x19,0xd7,0x2d,0xec,0xbf,0xc2,0x64,0x69,0x09,
    0xeb,0x6f,0xea,0x8f,0xb5,0x09,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
