// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000026.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000026[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xd9,0x4f,0x5d,0x55,
    0x14,0xc6,0xcf,0xbd,0xe7,0x0e,0x14,0x64,0x28,0xd0,0x22,0x55,0xaa,0xb5,0x25,0xd1,
    0x50,0xe1,0xaa,0x58,0x11,0x6c,0x13,0x6a,0xbd,0x6d,0x14,0x87,0x8a,0xb1,0xb6,0x68,
    0x07,0x0b,0x71,0x68,0x85,0x6a,0x21,0x2a,0x38,0x50,0x25,0x11,0xaa,0xf0,0x62,0x07,
    0x21,0x31,0xa4,0x1a,0x85,0xa4,0x85,0x07,0x85,0xb4,0x0f,0x26,0x3e,0x99,0xc6,0x68,
    0x8d,0xb6,0x0e,0x7f,0x89,0x71,0x48,0x4c,0x5c,0x6b,0xdf,0xdf,0x6a,0x56,0x6e,0x34,
    0x25,0xd9,0x39,0xec,0x6f,0x4d,0xdf,0xb7,0xf6,0xda,0x1b,0xe2,0xe4,0xfa,0x6c,0x14,
    0x25,0xa2,0xd2,0xa8,0x24,0xfa,0x2d,0x2a,0xfc,0xac,0x8c,0x92,0x82,0x14,0xbe,0x77,
    0xca,0xb7,0x2c,0xca,0x84,0xfd,0xf6,0xae,0xee,0xae,0xe6,0xa3,0x83,0xbd,0xcd,0xad,
    0x77,0xe7,0xd4,0xaf,0x22,0x8a,0x83,0xbf,0xda,0x2a,0xa3,0x6c,0x94,0x92,0xaf,0xae,
    0x97,0x0e,0xbc,0xd0,0xaf,0x78,0xb9,0xac,0x0b,0xb2,0xaa,0xc4,0x4f,0xf1,0xac,0xe6,
    0x90,0xdf,0xca,0x43,0x4e,0x8d,0x89,0xa2,0x1d,0x51,0x3a,0xaa,0xa1,0xee,0x7a,0xbe,
    0x86,0x25,0xc0,0x4a,0x1c,0x96,0x04,0xab,0x72,0x58,0x0c,0x56,0xeb,0xb0,0x14,0xd8,
    0xf5,0x0e,0x4b,0x83,0xdd,0xe8,0xb0,0x0c,0xd8,0xcd,0x0e,0xcb,0x82,0x6d,0x70,0x58,
    0x09,0xd8,0xad,0x0e,0x5b,0x01,0xb6,0xd1,0x61,0xa5,0x60,0x39,0x87,0x95,0x81,0xb5,
    0x3a,0xec,0x3a,0xb0,0x36,0x87,0x95,0x83,0xdd,0x17,0xfa,0x14,0x5f,0xd5,0xab,0x3d,
    0xdb,0x26,0xdf,0x5b,0xe8,0x8f,0xed,0xd7,0xb9,0xbd,0xf6,0x79,0x2d,0xfb,0x1a,0x89,
    0x4a,0x06,0x7b,0x1c,0x7a,0xa3,0xbf,0xaf,0x12,0x9f,0x0c,0x3a,0xb5,0xaf,0x75,0xb2,
    0xcf,0xa2,0x5f,0xed,0xab,0xc5,0xb3,0x14,0xbb,0xda,0xca,0xd0,0x92,0x0a,0x58,0x2a,
    0xf0,0x4d,0xa0,0xa5,0x83,0x7d,0xb9,0xcb,0x55,0x81,0xbf,0xd5,0xaa,0x26,0x57,0x14,
    0x78,0x55,0x5d,0xed,0xab,0xd5,0xd4,0x55,0x7d,0x8d,0x65,0x3e,0x5a,0xbf,0x96,0x7e,
    0xd7,0x50,0xbf,0x36,0xd4,0x29,0x60,0x4d,0x68,0x5b,0x0d,0x1f,0xf5,0xaf,0xc3,0x96,
    0x75,0xf6,0x06,0xa7,0x67,0x2d,0xf6,0xea,0x30,0x37,0xc9,0xd0,0xcb,0x26,0x78,0x5b,
    0x9f,0x2d,0xae,0x89,0xd9,0x31,0xfb,0x1d,0xd4,0x31,0xfb,0x26,0x7a,0xa1,0x7d,0xd8,
    0x02,0x6f,0xad,0x53,0x2f,0x15,0x3a,0x5d,0x8f,0xfd,0x4f,0x82,0xef,0x0d,0xd2,0xf7,
    0xad,0xf2,0xed,0x84,0xd7,0xfd,0xe0,0x5b,0xd1,0xa9,0xfb,0x6d,0x45,0x7c,0xf2,0x45,
    0xfb,0x2e,0xee,0x80,0xc6,0x3f,0x8c,0xae,0x0c,0x7c,0x76,0x72,0x2e,0x31,0xfb,0x5d,
    0xd8,0x62,0x17,0xdf,0x03,0x3f,0xdb,0xef,0xc7,0xc7,0xf6,0x47,0xe8,0xa3,0xc6,0x8f,
    0xd1,0xb3,0x94,0xb3,0x4f,0x70,0x3f,0x6c,0x7f,0xb2,0xe8,0x5c,0xce,0x30,0xef,0xca,
    0xef,0x3c,0xb5,0xc7,0xd0,0x77,0x9e,0x37,0x22,0x0e,0x7d,0x4c,0x07,0x1e,0x29,0xf4,
    0x29,0xf6,0xa7,0x20,0xda,0xfb,0xcd,0xcc,0x64,0x25,0xbd,0x7e,0x54,0x18,0x55,0xf0,
    0x0e,0x54,0xb2,0xac,0xaf,0xfd,0xcc,0xf6,0x4a,0xec,0x9d,0x92,0xa1,0x8e,0xb7,0x60,
    0x15,0x73,0xb2,0x19,0x9f,0x7a,0xf0,0x77,0xc4,0x47,0xf7,0x6b,0x88,0xab,0x27,0x4e,
    0xe7,0xe4,0x26,0xe2,0x1a,0x88,0xb3,0xd9,0x56,0xfc,0xac,0xf8,0xac,0x73,0x6f,0x88,
    0xce,0xce,0x1f,0xc2,0xbc,0x11,0x3e,0x7f,0x8b,0xbf,0xbd,0x25,0x8d,0xe8,0xd1,0xdf,
    0x77,0x4a,0x5c,0x86,0xf7,0x64,0x0d,0xbe,0x6f,0xd1,0xaf,0xdb,0xc0,0x1f,0x97,0x9d,
    0x72,0xfa,0x0a,0xcc,0xfc,0xfe,0x92,0x1c,0x96,0x4b,0xbf,0xbf,0x8b,0x97,0xfa,0x7d,
    0x8f,0x4f,0x9a,0x98,0x0d,0x4e,0xc3,0x46,0x34,0x34,0x39,0x0d,0xb7,0x83,0x9b,0x86,
    0x66,0x30,0xd3,0x90,0x73,0x1a,0xd4,0xd6,0xc2,0xbb,0xa6,0x75,0x5b,0x9c,0x86,0xbb,
    0xa8,0x9d,0x70,0x1a,0x5a,0xc1,0x4d,0xc3,0xd7,0x60,0xe6,0xa7,0x1a,0x2c,0x57,0xce,
    0x69,0xb8,0x84,0x4f,0x23,0x31,0x2d,0x4e,0xc3,0x3d,0x68,0xd8,0xe4,0x34,0xb4,0x81,
    0x9b,0x86,0x7b,0xc1,0x4c,0x43,0x87,0xd3,0xa0,0xb6,0xf6,0x30,0x77,0x85,0xba,0xed,
    0xcc,0x51,0x36,0xe4,0x2b,0xd4,0xbe,0xe4,0xee,0xa6,0x72,0x34,0xdf,0x0e,0xc7,0xf1,
    0x07,0xfc,0x72,0xc4,0xb5,0xc3,0x47,0xef,0xec,0x03,0xdc,0x57,0x9b,0xb9,0xed,0x70,
    0xce,0xbb,0x99,0xdb,0x01,0x3e,0xca,0xcc,0x3d,0x08,0xa6,0x79,0x07,0x78,0x4b,0x1f,
    0x02,0xd7,0x3c,0x7a,0xa7,0x1f,0x21,0x4f,0x17,0x79,0x32,0x81,0x7b,0x01,0xd7,0x18,
    0xbd,0xe3,0x8f,0x81,0xe9,0xb9,0x94,0x86,0xde,0x17,0xf2,0x44,0x0e,0xeb,0x06,0x4b,
    0x04,0xff,0x4c,0x78,0x1f,0x9e,0xc0,0xb7,0x9b,0x1c,0xbd,0x92,0x4f,0xdf,0xa3,0x27,
    0xd1,0xf3,0x9c,0xc4,0xea,0xbb,0xf1,0x14,0x58,0x9e,0x9a,0x1a,0xbb,0x1b,0x7c,0x5c,
    0x7c,0x74,0xbf,0x87,0x7c,0xbb,0x1d,0xf7,0xa7,0xe1,0xde,0xe3,0xb8,0x3f,0x03,0x6e,
    0xdc,0xf7,0x82,0xed,0x92,0x8e,0xe8,0x1b,0xba,0x8f,0xda,0x7b,0xe0,0xba,0xd7,0xcd,
    0xc1,0x01,0xf2,0xed,0x77,0x73,0xf0,0x2c,0xb8,0xcd,0xc1,0x41,0x30,0x9b,0x83,0x3e,
    0x37,0x07,0x07,0x83,0x46,0xad,0x5d,0x38,0xdb,0x5e,0x37,0xcb,0xcf,0x53,0x3b,0x0e,
    0xbd,0x2c,0x09,0xba,0x5f,0x04,0xdb,0xe7,0xde,0x98,0x24,0xfd,0x53,0xfb,0x21,0xe2,
    0x6c,0x8d,0xd1,0xaf,0xc3,0xc4,0x1e,0x0a,0xb9,0x56,0x04,0x5d,0xfd,0xe4,0x39,0xcc,
    0x3b,0x97,0x76,0xef,0xb1,0xce,0x5b,0x1f,0x9c,0x06,0x9c,0xde,0x97,0xd1,0x7b,0xc4,
    0xe9,0x7d,0x05,0xdc,0xf4,0x1e,0x05,0x33,0xbd,0x43,0x4e,0xaf,0xda,0x06,0x65,0x0d,
    0x91,0x7b,0xd0,0xe9,0x7d,0xd5,0xe9,0x5d,0x20,0xd7,0x6b,0xe0,0x79,0x38,0x59,0xdc,
    0x10,0x77,0x40,0x7d,0x5e,0xa7,0xe6,0x00,0xfe,0x83,0xd4,0x1d,0x71,0x75,0xd5,0x67,
    0x58,0xd6,0x08,0xf1,0xc3,0xae,0xee,0x9b,0xff,0xd1,0xe7,0xb7,0xaf,0xd1,0xe7,0x51,
    0xe2,0x6c,0xbd,0x47,0x9f,0x8f,0x11,0x3b,0xea,0xfa,0xfc,0x2e,0x79,0x8e,0xfd,0x4f,
    0x9f,0x8d,0xd3,0x08,0x9a,0x34,0xe6,0x27,0x62,0x86,0x88,0x1f,0x2e,0x3a,0x93,0x3e,
    0xe7,0xfb,0x23,0x67,0xd9,0x4b,0x9c,0xe6,0x79,0x83,0xbf,0x8f,0xe3,0xd8,0xed,0xfc,
    0x8e,0x73,0x7e,0x13,0xee,0xfc,0xde,0x07,0xb7,0xf3,0xfb,0x00,0xcc,0xce,0x6f,0xca,
    0xf5,0x51,0x6d,0x93,0xb2,0x4e,0xc0,0x63,0x12,0x9d,0x5a,0xeb,0x43,0xea,0x8d,0xa3,
    0x33,0x4b,0xcf,0x4c,0xe7,0x14,0x31,0x27,0x1c,0x9f,0x53,0xf0,0x39,0xe9,0xf8,0x9c,
    0x06,0x37,0x3e,0x1f,0x81,0x19,0x9f,0x19,0xc7,0x47,0x6d,0xd3,0xb2,0x66,0xc9,0x3d,
    0xcd,0xb9,0x6a,0x9e,0x8f,0xe1,0x12,0xf3,0xf6,0x2b,0xc7,0x6f,0x1c,0x6e,0xef,0xea,
    0x0c,0xb1,0xb3,0xee,0x9d,0xf8,0x04,0x5e,0x67,0xdc,0x3b,0xf1,0x29,0xf8,0x45,0xe6,
    0xe6,0x33,0xb0,0x1e,0xc7,0xf5,0x73,0xf0,0x3c,0x5c,0xe7,0x1d,0x57,0xb5,0xcd,0xc9,
    0x9a,0xa7,0xde,0x9c,0xe3,0x75,0x11,0x7d,0xe3,0xee,0x6f,0x92,0xf9,0xcd,0x73,0xd6,
    0xea,0x77,0x19,0x9f,0x59,0x62,0xe6,0x1c,0x9f,0xb3,0xf0,0x69,0x70,0x7c,0xce,0x81,
    0x1b,0x9f,0x45,0xc7,0xe7,0x5c,0xb8,0x67,0x51,0xc0,0xb4,0xce,0x82,0xe3,0xf3,0x2d,
    0x7c,0x2e,0x73,0x86,0xca,0xc7,0xfc,0x16,0x1d,0x9f,0x2b,0xf8,0xcc,0x13,0xb3,0xe0,
    0xf8,0x7c,0x01,0x9f,0x09,0xc7,0xe7,0x4b,0x70,0xe3,0xb3,0xec,0xf8,0xa8,0x6d,0x49,
    0xd6,0x32,0x75,0x96,0x1c,0x9f,0xef,0xf8,0x5f,0xf7,0x8a,0x9b,0x27,0xf3,0x5b,0x76,
    0x7c,0x7e,0xc5,0x67,0x91,0x98,0xa5,0xa2,0x33,0x9e,0x71,0xbe,0xbf,0x30,0x0f,0xd3,
    0xc4,0x2d,0x17,0xcd,0xe9,0x94,0xf3,0xfd,0x99,0xf9,0x9e,0x24,0x4e,0xf3,0x6c,0x11,
    0x26,0x17,0xb0,0xfd,0x23,0xa7,0xd6,0x26,0xeb,0x5f,0xdc,0xe7,0x6b,0xe4,0xc4,0x0e,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// layout(set = 0, binding = 0)uniform isampler3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec3(params . srcOffset + srcSubImageCoords, params . srcLayer)/ textureSize(src, 0),
//         params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
