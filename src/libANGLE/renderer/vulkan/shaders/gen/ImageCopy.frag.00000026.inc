// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000026.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000026[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x8b,0x53,0x55,0x55,
    0x14,0xc6,0x0f,0xf7,0xc2,0xbd,0x3c,0x44,0x10,0x50,0x42,0xc5,0xf2,0xd5,0x43,0x0c,
    0xb1,0xc0,0x48,0x20,0x25,0x23,0xc9,0x28,0x05,0xcd,0x4a,0x28,0xc2,0xc4,0x12,0x93,
    0x24,0x49,0x93,0x48,0x4c,0x51,0x4b,0x2b,0xa9,0x7c,0xf4,0x12,0x2b,0xd1,0x4a,0xc4,
    0xfa,0x2f,0xfa,0x8b,0x9a,0x1e,0x33,0xcd,0xb4,0xd7,0xb9,0xbf,0xc5,0x7c,0x73,0xc7,
    0x8a,0x99,0x3d,0xe7,0xae,0x6f,0x7d,0x7b,0xed,0x6f,0xad,0xb5,0xcf,0x3a,0x24,0x13,
    0xcb,0xd3,0x51,0x32,0x27,0x2a,0x8c,0xf2,0xa3,0x5f,0xa2,0xcc,0xdf,0xbc,0x28,0x11,
    0xe5,0x84,0x67,0x51,0x94,0x8a,0x9f,0x9b,0x3b,0xb6,0x77,0xd4,0x1e,0x1a,0xde,0x53,
    0x5b,0xdf,0x50,0x67,0xfe,0xb9,0x51,0x32,0xe6,0x99,0xaf,0x24,0x4a,0x47,0xb9,0xe1,
    0x69,0xeb,0x40,0xdf,0xbe,0x41,0xc3,0x8b,0xc3,0xba,0x1d,0x56,0x69,0xe0,0x19,0x9e,
    0xb6,0x18,0xe1,0x57,0x71,0x1c,0xd3,0xf6,0x44,0x51,0x7b,0x94,0x17,0x95,0x73,0xde,
    0x72,0x9e,0x8e,0xe5,0x80,0xe5,0x0b,0x96,0x00,0x2b,0x15,0x2c,0x09,0x56,0x21,0x58,
    0x2e,0xd8,0x5d,0x82,0xe5,0x81,0x2d,0x16,0x2c,0x05,0x76,0x8f,0x60,0x69,0xb0,0x15,
    0x82,0xe5,0x83,0xdd,0x2f,0x58,0x01,0xd8,0x6a,0xc1,0x0a,0xc1,0xea,0x04,0x2b,0x02,
    0xab,0x17,0x6c,0x0e,0x58,0xa3,0x60,0xc5,0x60,0xcd,0x71,0x9d,0x92,0xb3,0xf9,0x5a,
    0xcd,0x36,0x85,0xe7,0x32,0xea,0xe3,0xf6,0x52,0xb1,0xad,0xce,0x4b,0xb0,0xcb,0xc3,
    0xae,0x44,0xec,0x4f,0xc6,0xb5,0xb1,0xdf,0xf3,0x03,0x27,0x45,0x9e,0x56,0xd7,0xca,
    0x60,0xa7,0xc9,0x3f,0x11,0xe3,0xb9,0x71,0x8e,0x69,0xd6,0x82,0xb0,0xb3,0x10,0xbe,
    0x71,0x8b,0xc8,0x2d,0x17,0xee,0x1c,0xe2,0x18,0xde,0x84,0x5d,0x2c,0xb1,0xe7,0xc2,
    0xf7,0xb3,0xcb,0x88,0x15,0xc5,0x3a,0x4b,0x67,0xeb,0xec,0x1a,0x6c,0x95,0xfd,0xcf,
    0x72,0x8e,0x9d,0x5f,0x41,0xfd,0xcb,0x39,0xbf,0x22,0x3e,0x27,0x83,0xd5,0x90,0xeb,
    0x02,0xf4,0x18,0xbf,0x12,0x5f,0x5a,0xfc,0xd5,0x92,0xcf,0x12,0xfc,0x65,0xf1,0x3d,
    0x4a,0xc4,0xb5,0xad,0x41,0xb7,0xd7,0xdd,0x78,0xf7,0x8a,0x66,0x8f,0x53,0xc3,0xdd,
    0x72,0xfe,0x5a,0xce,0x75,0xff,0x3a,0x6a,0x63,0x75,0x79,0x8c,0xbd,0x7e,0xee,0x06,
    0xe2,0x19,0x5e,0x15,0x14,0xb4,0x4a,0x4f,0xf4,0x2f,0x47,0x34,0x3c,0xce,0xef,0x56,
    0x72,0x37,0x7b,0x13,0x98,0x9f,0xd9,0x96,0x65,0x6f,0xe1,0x3d,0xb1,0xfd,0x4f,0x93,
    0x6b,0x0a,0x4d,0xcf,0xf2,0x3b,0x29,0xfc,0x2e,0x34,0xb8,0xbd,0x53,0x72,0xb6,0x1c,
    0x7b,0xb2,0xf8,0x7b,0xc9,0xc3,0xe2,0x8d,0x50,0x47,0xcf,0xf1,0x5d,0x7c,0x23,0xc2,
    0x1f,0xe3,0x9d,0x32,0xfe,0x29,0xf8,0x7a,0xde,0x39,0x34,0xda,0xfe,0x4f,0xd9,0x5f,
    0x26,0xfe,0xcb,0xbc,0x43,0xae,0xe7,0xba,0xdc,0xe3,0x19,0xb4,0x8d,0x50,0x9f,0x19,
    0xe6,0x50,0x32,0xee,0x45,0x5e,0xcc,0xcb,0xa5,0x3e,0x86,0xfd,0x11,0x90,0x3c,0xb8,
    0xf9,0x72,0x4f,0xdc,0x5e,0x24,0xb6,0xf5,0x6b,0xa3,0xd8,0x96,0xdb,0xa8,0xd8,0x76,
    0x3f,0x2e,0x61,0xb7,0xf0,0xde,0x94,0xd0,0xff,0xad,0x01,0x9d,0xcb,0xec,0x2a,0x61,
    0x79,0x6f,0x07,0x79,0x1f,0xe7,0xe1,0x6f,0x0d,0x8a,0x2a,0x99,0x5f,0xf3,0xb9,0xcb,
    0x2d,0x70,0xaa,0xc0,0x4f,0x04,0x8e,0xd9,0x0b,0xd9,0x57,0x15,0xdf,0xa3,0x64,0xac,
    0x7f,0xa1,0xf0,0x17,0x93,0x93,0xf9,0x16,0x61,0x5b,0x7c,0xbb,0xf3,0x77,0x13,0xbf,
    0x1a,0xbe,0xbf,0xa7,0x86,0x4f,0x07,0xce,0x52,0x99,0x8f,0xf6,0x1e,0xfc,0x1e,0x62,
    0xac,0x44,0xf7,0x5f,0x81,0xef,0x73,0x72,0x25,0x75,0x5c,0x41,0x6c,0xab,0xc3,0x7d,
    0xd4,0x6e,0x19,0xb1,0x53,0xcc,0x4f,0xc3,0x8f,0x61,0x3f,0x00,0xe6,0x7b,0x56,0xc9,
    0x1e,0xd3,0xbb,0x0a,0xce,0x9f,0x21,0xb6,0x9f,0xb1,0x52,0xf4,0xaf,0x46,0x7f,0x8d,
    0xe8,0x7f,0x10,0xdc,0xf5,0xd7,0x82,0xb9,0xfe,0x3a,0xd1,0x6f,0xbe,0x35,0xcc,0x6b,
    0x8b,0xbd,0x46,0xb4,0x3c,0x84,0x96,0xb5,0xa2,0xff,0x61,0x70,0xd7,0x5f,0x0f,0xe6,
    0x7b,0x1a,0x64,0x8f,0xe9,0x6f,0x80,0x63,0xfa,0xfd,0x8c,0x3a,0xd1,0xff,0x08,0xfa,
    0xd7,0x89,0xfe,0x46,0x70,0xd7,0xff,0x28,0x98,0xeb,0x6f,0x12,0xfd,0xe6,0x5b,0x1f,
    0xdf,0xbd,0x4c,0xec,0xf5,0xd2,0xf7,0x66,0xb4,0xd8,0xbd,0xcb,0xdc,0xc7,0x0c,0xd6,
    0x2c,0xf3,0xc4,0xef,0x44,0x0b,0x1a,0x3d,0x4e,0x13,0x71,0x6c,0xc6,0x3c,0xc1,0x7c,
    0xf1,0x3b,0xf9,0x24,0x9a,0xdb,0xe4,0xac,0xcd,0xe0,0x6e,0xb7,0x73,0xf6,0x71,0xee,
    0xe8,0x53,0x70,0xda,0x89,0x63,0x33,0xa8,0x83,0x38,0x5b,0xa4,0xbe,0xcf,0x80,0x77,
    0x06,0x4e,0x2a,0xd6,0x9e,0xd9,0x1b,0x09,0xb6,0x0d,0x2c,0x27,0xfe,0x9d,0x8a,0xe7,
    0x57,0x27,0xdc,0x6d,0xc4,0xf0,0x33,0xb6,0x73,0x46,0x97,0x9c,0xb1,0x03,0xbc,0x37,
    0x28,0xb3,0xb9,0xfb,0x1c,0x39,0x76,0x32,0x43,0x76,0x50,0x97,0x8d,0xf8,0xbc,0x57,
    0xcf,0x13,0x6b,0xa7,0xf4,0xea,0x05,0x70,0xef,0xd5,0x8b,0x60,0xde,0xab,0x6e,0xe9,
    0x95,0xf9,0x76,0x85,0xd5,0x4f,0x8d,0x77,0xc9,0xbd,0x79,0x89,0xb9,0xd2,0x23,0x3a,
    0x5f,0x06,0x6f,0xe1,0xbb,0xd1,0x0b,0x67,0x6b,0x98,0x4a,0x96,0xf3,0x2b,0x60,0xbd,
    0x32,0x47,0x12,0x52,0x93,0x3e,0x62,0xf8,0x1a,0x0f,0x67,0x19,0xbe,0x9b,0xbd,0x7d,
    0x12,0xfb,0xd5,0xd9,0xd8,0x05,0xb1,0xbd,0x07,0x6c,0x37,0xb3,0x32,0x4f,0xbe,0x11,
    0x5e,0x9b,0x3d,0xdc,0x99,0x6e,0xf2,0xe9,0x97,0x5a,0xbd,0x46,0xad,0xf6,0x4a,0xad,
    0x5e,0x07,0xf7,0x5a,0xed,0x03,0xf3,0x5a,0xed,0x97,0x5a,0x99,0x6f,0x20,0xac,0xfd,
    0xc4,0x1e,0x90,0x5a,0xbd,0x71,0x87,0x5a,0x1d,0x00,0x9f,0x21,0xf6,0x20,0x58,0x1b,
    0x1a,0x3d,0x8e,0x3d,0x7f,0x0b,0x7d,0x37,0xce,0x9b,0x68,0xe8,0x87,0x3f,0x80,0x8e,
    0x21,0xd1,0x61,0x9c,0x83,0x61,0x0d,0xb1,0xff,0xa0,0xe8,0x78,0xeb,0x0e,0x3a,0x0e,
    0x81,0x7b,0x5d,0x87,0xb3,0x7a,0xf6,0x36,0xd8,0xf0,0xbf,0xf4,0xec,0x30,0x31,0x7c,
    0x9d,0xa1,0x67,0x47,0xd8,0x7b,0x58,0x62,0xbf,0x93,0xd5,0xb3,0xa3,0x60,0x47,0xfe,
    0xa3,0x67,0x47,0xa9,0x87,0xe7,0x33,0x94,0xd5,0xc3,0x6e,0x89,0xff,0x1e,0xf1,0x47,
    0xf9,0xa6,0x1f,0x03,0xb3,0x58,0xa3,0xd8,0xde,0xef,0xe3,0xf4,0x7b,0x4c,0xfa,0xfd,
    0x3e,0xb8,0xf7,0xfb,0x04,0x98,0xf7,0x7b,0x5c,0xea,0x6c,0xbe,0x93,0x61,0x9d,0x45,
    0xc7,0x49,0xe2,0xd8,0xb9,0xa7,0xf9,0xc6,0xda,0x1c,0x3b,0x15,0xd7,0x24,0x83,0x9d,
    0x96,0x6f,0xb8,0x73,0x3f,0x98,0xe5,0x16,0xc4,0xf6,0x87,0x60,0x67,0xa4,0x26,0x09,
    0xa9,0xc9,0x28,0x1c,0xab,0xc1,0x38,0x67,0x9f,0x95,0xbc,0x3e,0x22,0xaf,0x73,0x92,
    0xd7,0xc7,0xe0,0x9e,0xd7,0x27,0x60,0x9e,0xd7,0x84,0xe4,0x65,0xbe,0xf3,0x61,0x5d,
    0x24,0xf6,0x79,0x62,0xdb,0xff,0x34,0x9f,0xa1,0xb5,0x47,0x62,0x7f,0x0e,0xee,0x9c,
    0x0b,0x70,0xfc,0x7b,0x78,0x01,0x8e,0xe9,0x9d,0x20,0xe6,0x45,0x99,0x77,0x5f,0xa0,
    0xf7,0xb2,0xdc,0xc9,0x2f,0xc1,0x6d,0xff,0x25,0x6c,0xf7,0x7d,0xc5,0xff,0x2b,0xbf,
    0x32,0x5b,0xbf,0x06,0xeb,0x92,0xfc,0xbe,0x01,0x6f,0x23,0xbf,0x49,0xc9,0xcf,0x7c,
    0x57,0xc2,0x9a,0x44,0xcb,0x15,0xd1,0x7e,0x15,0xed,0xfe,0x2d,0xbc,0x4a,0x1e,0xa6,
    0xdd,0xf9,0x93,0xa2,0xe5,0xdb,0x2c,0x2d,0xdf,0x81,0x55,0x8b,0x96,0xef,0xc1,0x5d,
    0xcb,0x94,0x68,0x31,0xdf,0xb5,0xb0,0xa6,0x88,0x7d,0x4d,0xb4,0xdc,0x40,0xcb,0x75,
    0xb4,0xdc,0x10,0x2d,0xce,0x9f,0x12,0x2d,0x3f,0x64,0x69,0xf9,0x11,0x6c,0x4c,0xb4,
    0xfc,0x04,0xee,0x5a,0xa6,0x45,0x8b,0xf9,0x6e,0xc6,0xdc,0x4c,0xec,0x9b,0xa2,0xe5,
    0x96,0xf4,0xdd,0xb4,0xdc,0xa2,0x46,0xa6,0xc5,0xf9,0xd3,0x59,0x3d,0x9e,0xc8,0xba,
    0xa3,0xe3,0x72,0xe7,0x7f,0x26,0x9e,0xc5,0xba,0x8d,0xfd,0x77,0x98,0x2c,0x8d,0x61,
    0xfd,0x03,0x24,0x67,0x7e,0x41,0xd8,0x0f,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
