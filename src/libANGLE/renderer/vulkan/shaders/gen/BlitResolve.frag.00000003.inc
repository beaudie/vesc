// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x53,0x95,0x65,
    0x14,0xc6,0xbf,0xbd,0x37,0xec,0x4d,0x5b,0x01,0xe5,0x18,0xa3,0x26,0x09,0x33,0x39,
    0x88,0x1b,0xa7,0xc2,0x84,0xa4,0x83,0x32,0x13,0x15,0x46,0x61,0xa5,0xd3,0x34,0xa0,
    0x79,0x28,0x0b,0xb8,0xf0,0x00,0x17,0x25,0xa8,0x25,0x5c,0x98,0xca,0x85,0x26,0x5c,
    0x58,0xc2,0x85,0xa5,0xfb,0xa2,0xa9,0xcc,0xdb,0xba,0xeb,0x2f,0xca,0x0e,0x33,0xcd,
    0xb4,0xd6,0xc7,0x6f,0x39,0xcf,0x6c,0x66,0x16,0xdf,0x5e,0xcf,0xb3,0xde,0xe7,0x59,
    0xeb,0xfd,0xde,0xef,0xcd,0x65,0x3b,0x0a,0x49,0x2e,0x93,0x14,0x93,0x9a,0xe4,0xf7,
    0x64,0xed,0x6f,0x63,0x92,0x4d,0x32,0xf6,0x5c,0x97,0xe4,0xd3,0xe7,0x6b,0xc3,0x07,
    0x87,0x4b,0x67,0xce,0x1e,0x2f,0x3d,0xdf,0xbb,0xcb,0xf9,0xba,0x24,0x97,0xd6,0x39,
    0x57,0x6f,0x59,0x95,0x3d,0x3d,0x26,0x8f,0x9e,0x9a,0x72,0xbc,0xd6,0xc2,0x7f,0xcc,
    0x58,0xcc,0x59,0x2c,0x58,0x2c,0x5a,0x2c,0x5b,0xac,0x5a,0x94,0x2d,0x36,0x98,0x86,
    0xaf,0x29,0xb8,0xbe,0xfd,0xaa,0x4d,0xfd,0x5c,0x2f,0x49,0x86,0x92,0xea,0xa4,0x91,
    0x5e,0x3a,0x78,0x06,0x96,0x01,0xab,0x11,0x2c,0x0b,0xb6,0x41,0xb0,0x1c,0xd8,0x93,
    0x82,0x55,0x81,0x6d,0x16,0xac,0x1a,0xac,0x5d,0xb0,0x3c,0x58,0xa7,0x60,0x05,0xb0,
    0xed,0x82,0xd5,0x80,0x75,0x0b,0xf6,0x04,0xd8,0xae,0x74,0xae,0xdc,0xe3,0xfe,0x7c,
    0xc6,0x11,0x7b,0x6e,0x63,0x9e,0xc8,0x9f,0x96,0xdc,0xf7,0xec,0x29,0xc9,0x67,0xc8,
    0x33,0xe4,0x73,0xe4,0xa1,0xb7,0x40,0x9e,0x23,0x5f,0x24,0xaf,0x22,0x5f,0x26,0xaf,
    0x26,0x5f,0x25,0xcf,0x93,0x97,0xc9,0x7d,0xb6,0x46,0x53,0xcd,0xa6,0xfd,0xe4,0x52,
    0x3d,0xff,0xdd,0x6c,0x35,0x79,0xf6,0xc6,0x7b,0x68,0xb5,0xbc,0xc0,0x7a,0xe7,0x5b,
    0xac,0xb2,0x08,0xef,0x9c,0xbf,0xbf,0x22,0xfe,0xed,0xf6,0x7f,0x3d,0xeb,0x1c,0x7f,
    0x91,0xbc,0x56,0xb4,0xea,0xa8,0x0f,0xaf,0x06,0xb4,0x92,0xb4,0xaf,0xf5,0x8f,0xf7,
    0xbd,0x8e,0xc8,0x13,0x45,0x9e,0x0d,0x12,0xee,0xd7,0xc4,0xfe,0x37,0xe2,0xd7,0x94,
    0xea,0xae,0x61,0x3b,0x98,0xa5,0x05,0x7d,0xaf,0x6f,0x85,0x2b,0x08,0xbf,0x99,0xdc,
    0xf9,0x2d,0xf0,0xae,0xdf,0x64,0x5d,0xb6,0x53,0xd7,0x20,0xef,0x2d,0xd6,0x75,0x71,
    0x1e,0x22,0xef,0x15,0x5f,0xef,0xf7,0x65,0xea,0xbb,0x4d,0xdd,0xf7,0xe3,0x15,0x30,
    0x8d,0x58,0x3b,0x24,0x7b,0xf8,0x3a,0x3a,0x8e,0xb7,0xd9,0xaf,0x03,0xcc,0x9f,0x41,
    0x2f,0x23,0x11,0x73,0xbd,0xc5,0xef,0x03,0xec,0x83,0xe7,0x23,0x15,0xfd,0x8e,0x72,
    0x6e,0xfc,0x3d,0xbc,0x87,0x7e,0x4e,0xf8,0x31,0x34,0x23,0x3f,0xc2,0x39,0x72,0xfd,
    0xa3,0xf4,0x54,0x14,0xfe,0x24,0x1a,0xce,0x4f,0xa2,0x15,0xef,0x7d,0x92,0xfb,0x40,
    0xf5,0x4f,0xf3,0xde,0x83,0x9f,0x81,0x8f,0x7c,0xae,0x22,0x5f,0xa8,0x58,0x7f,0x85,
    0xef,0x3d,0xf8,0xc5,0x0a,0xfe,0x06,0x67,0x29,0xf8,0xe5,0x0a,0xfe,0x36,0xef,0x20,
    0xf8,0xd5,0x0a,0xfe,0xae,0xc5,0x05,0xe1,0xcb,0xf0,0xbb,0x6d,0x17,0xb2,0xbc,0x9f,
    0x04,0xec,0x6f,0x43,0x7c,0x6f,0x06,0xf8,0x06,0xea,0x39,0xe7,0x23,0xf6,0xae,0xeb,
    0xe8,0xb3,0x9e,0x88,0x77,0x36,0xc5,0xb7,0xb4,0x11,0xfe,0x55,0x53,0x68,0xe5,0xbe,
    0x6a,0xe6,0x9c,0x0e,0x50,0xd3,0x06,0x7e,0xc9,0x6a,0x3c,0xdf,0xc4,0xba,0x36,0xd6,
    0x6d,0xe1,0x3b,0x6e,0xe6,0xfc,0x0e,0x70,0x46,0xb7,0x82,0x97,0xad,0xa6,0x9d,0xbb,
    0x67,0x2b,0x67,0xf7,0x2f,0xeb,0xbc,0x93,0x7e,0xfe,0xb5,0xfa,0x6d,0x72,0xe7,0xf9,
    0x3c,0xfe,0xfb,0x1d,0x5b,0xe7,0x7b,0xf1,0x0c,0x9e,0xfe,0x37,0xcb,0xfe,0x6c,0x07,
    0x1f,0xb5,0xcc,0x7b,0xfa,0x11,0x2c,0xea,0xfe,0x31,0x8d,0xd0,0xf2,0xe7,0x9f,0x56,
    0xe5,0x75,0xbf,0x50,0x53,0xcd,0x9a,0x0e,0x99,0x61,0x07,0x33,0x74,0xc9,0x0c,0xdd,
    0xe0,0x31,0xc3,0x4e,0xb0,0x98,0xa1,0x47,0x66,0x70,0xae,0x64,0xd1,0x83,0x6f,0x49,
    0x66,0x78,0x16,0xef,0x8c,0xcc,0xf0,0x1c,0x78,0xcc,0xf0,0x33,0x58,0xd4,0xf9,0x0c,
    0xa1,0xd5,0x23,0x33,0x3c,0xa0,0xa6,0x93,0x35,0x25,0x99,0x61,0x37,0x33,0xf4,0xca,
    0x0c,0x2f,0x80,0xc7,0x0c,0x7b,0xc0,0x62,0x86,0x7e,0x99,0xc1,0xb9,0x3e,0x8b,0x7e,
    0x7c,0xfb,0x38,0x47,0xee,0xbb,0x17,0xef,0x07,0xf2,0xbd,0x7b,0x8f,0x51,0xdb,0x2f,
    0x3d,0xfe,0x46,0x5d,0x0f,0xeb,0xfa,0xa8,0xdd,0x47,0xed,0x3e,0x6a,0xfd,0xbc,0x3e,
    0xe4,0x5b,0xf0,0xf5,0x1f,0x5a,0xec,0x87,0xf3,0x3d,0xfa,0x95,0xb3,0xe8,0xdc,0x38,
    0x9c,0xcf,0xea,0xf7,0xd2,0x1b,0xcc,0x3a,0xc4,0xac,0x5e,0xff,0x26,0xf8,0x4f,0xcc,
    0x3a,0x8c,0x86,0xe3,0x8f,0xac,0x66,0x10,0x8d,0x98,0x77,0x98,0x7c,0x90,0xbe,0xf6,
    0xa3,0xe5,0x77,0xd7,0xdb,0xdc,0x5b,0xe1,0x77,0x10,0xbf,0x51,0xf1,0x7b,0x17,0x3c,
    0xde,0xf3,0xfb,0xcc,0x9e,0x08,0x76,0x08,0x2c,0x93,0x6a,0xe6,0xd3,0xfb,0xee,0x30,
    0xb5,0x87,0xd0,0x18,0x67,0x2f,0x3e,0xc0,0xf7,0x30,0x7b,0xe2,0xbd,0x5f,0x34,0x9d,
    0x75,0xec,0xcd,0x43,0x6a,0x2e,0xa0,0x3d,0x4e,0xcd,0x58,0xc5,0xfe,0x0e,0xd2,0xb7,
    0xdf,0x95,0x1f,0xd1,0xf7,0x11,0xfa,0xf6,0x7b,0xf3,0x18,0xf8,0x35,0xb4,0x4f,0xa0,
    0x7d,0x4c,0xe6,0xfd,0x98,0x75,0x27,0x65,0xde,0x4f,0xc0,0xff,0xc0,0xff,0x14,0xd8,
    0x98,0x9c,0xaf,0x4f,0xc1,0x5b,0x38,0x5f,0x13,0xb2,0xdf,0xce,0x7d,0x66,0x31,0x41,
    0x9f,0xfe,0xfb,0x25,0xab,0x99,0xa2,0x07,0x9f,0x21,0xb8,0x09,0xf1,0x39,0x83,0xcf,
    0x69,0xf1,0x39,0x0b,0x1e,0x3e,0xd3,0xe2,0xe3,0xdc,0x39,0x8b,0x69,0xb4,0xce,0xe1,
    0x33,0x23,0x3e,0xc1,0x4d,0x8b,0xcf,0xe7,0xf8,0x0c,0x89,0xcf,0x17,0xe0,0xe1,0x33,
    0x2b,0x3e,0xce,0x9d,0x4f,0xbf,0xe9,0x35,0xad,0xf3,0xf8,0xcc,0x89,0x4f,0x70,0xb3,
    0xe2,0xf3,0x25,0x3e,0x5d,0xe2,0xf3,0x15,0x78,0xf8,0xcc,0x8b,0x8f,0x73,0x97,0x2d,
    0xe6,0xd1,0xba,0x8c,0xcf,0x82,0xf8,0x04,0x37,0x2f,0x3e,0x5f,0xe3,0x73,0x45,0x7c,
    0xae,0x82,0x87,0xcf,0x75,0xf1,0xb9,0x9a,0x9e,0x89,0x24,0xc5,0x5c,0xeb,0x1a,0x3e,
    0x8b,0xe2,0x13,0xdc,0x75,0xf1,0xb9,0x89,0xcf,0x0d,0xf1,0xf9,0x06,0x3c,0x7c,0x96,
    0xc4,0xc7,0xb9,0x5b,0x16,0x4b,0x68,0xdd,0xc2,0x67,0x59,0x7c,0x82,0x5b,0x12,0x9f,
    0x6f,0xf1,0xb9,0x2d,0x3e,0xdf,0x81,0x87,0xcf,0x8a,0xf8,0x38,0x77,0xc7,0x62,0x05,
    0xad,0x3b,0xf8,0xac,0x8a,0x4f,0x70,0x2b,0xe2,0xf3,0x3d,0x3e,0x77,0xc5,0xe7,0x07,
    0xf0,0xf0,0xb9,0x2f,0x3e,0xce,0xdd,0xb3,0xb8,0x8f,0xd6,0x3d,0x7c,0xca,0xe2,0x13,
    0x9c,0x3f,0xff,0xb3,0xdb,0x60,0x8f,0xc5,0xff,0x8d,0xc9,0x9b,0xc9,0x00,0x0d,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue *= params . invSamples;
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
