// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xdb,0x6f,0x54,0x65,
    0x14,0xc5,0xcf,0xcc,0xb4,0x33,0x75,0xe8,0x05,0x7a,0xb5,0x11,0xa4,0xd2,0x26,0x92,
    0x52,0xa7,0x44,0x2d,0xd2,0x6a,0x05,0x02,0x8d,0x56,0x4b,0x41,0xeb,0x05,0x62,0x4c,
    0x11,0x11,0xe3,0x43,0xeb,0xa5,0xe5,0x01,0xa5,0x0d,0x22,0xed,0x83,0xd2,0x79,0x40,
    0x69,0x1f,0x40,0xda,0x07,0x94,0x36,0x06,0x85,0x3e,0x98,0x28,0xf2,0x2a,0x7f,0x91,
    0xd7,0xc4,0xc4,0xbd,0x4f,0x7f,0x9b,0xac,0x4c,0x93,0xdd,0x33,0x7b,0xad,0xfd,0xad,
    0xb5,0xf7,0x77,0xbe,0xf3,0xe5,0xb2,0x9d,0x85,0x24,0xc9,0x24,0xc5,0xa4,0x26,0xb9,
    0x9f,0x6c,0xfc,0x6d,0x49,0xb2,0x86,0x24,0xc9,0xa6,0x24,0x9f,0x3e,0x5f,0x18,0x19,
    0x1b,0x29,0x4d,0x4d,0x9f,0x2a,0x3d,0xdd,0xb7,0xdb,0xf9,0xfa,0x24,0x97,0xd6,0x39,
    0xd7,0x60,0x59,0x95,0x3d,0x3d,0x26,0xde,0xf9,0x60,0xd2,0xf1,0x3a,0x8b,0x33,0x16,
    0xb3,0x16,0xf3,0x16,0x65,0x8b,0x25,0x8b,0x15,0x8b,0x35,0x8b,0x75,0x8b,0xcd,0xa6,
    0xe1,0x6b,0x0a,0xae,0x6f,0xbf,0xea,0x52,0x3f,0xd7,0x4b,0x92,0x17,0x93,0xea,0xa4,
    0x89,0x5e,0x3a,0x79,0x06,0x96,0x01,0xab,0x11,0x2c,0x0b,0xb6,0x59,0xb0,0x1c,0xd8,
    0xc3,0x82,0x55,0x81,0x6d,0x15,0xac,0x1a,0xac,0x43,0xb0,0x3c,0x58,0x97,0x60,0x05,
    0xb0,0x9d,0x82,0xd5,0x80,0xf5,0x08,0xf6,0x10,0xd8,0xee,0x74,0xae,0xdc,0x83,0xfe,
    0x7c,0xc6,0xa3,0xf6,0xdc,0xc1,0x3c,0x91,0x3f,0x26,0xb9,0xef,0xd9,0xa3,0x92,0xcf,
    0x92,0x67,0xc8,0xe7,0xc9,0x43,0xaf,0x4c,0x9e,0x23,0x5f,0x22,0xaf,0x22,0x5f,0x21,
    0xaf,0x26,0x5f,0x23,0xcf,0x93,0xaf,0x93,0xfb,0x6c,0x4d,0xa6,0x9a,0x4d,0xfb,0xc9,
    0xa5,0x7a,0xfe,0xbb,0xc5,0x6a,0xf2,0xec,0x8d,0xf7,0xd0,0x66,0x79,0x81,0xf5,0xce,
    0xb7,0x5a,0x65,0x11,0xde,0x39,0x7f,0x7f,0x45,0xfc,0x3b,0xec,0x7f,0x2d,0xeb,0x1c,
    0x7f,0x96,0xbc,0x4e,0xb4,0xea,0xa9,0x0f,0xaf,0x46,0xb4,0x92,0xb4,0xaf,0xda,0x07,
    0xfb,0x5e,0x4f,0xe4,0x89,0x22,0xcf,0x46,0x09,0xf7,0x6b,0x66,0xff,0x9b,0xf0,0x6b,
    0x4e,0x75,0x37,0xb0,0x5d,0xcc,0xd2,0x8a,0xbe,0xd7,0xb7,0xc1,0x15,0x84,0xdf,0x4a,
    0xee,0xfc,0x36,0x78,0xd7,0x6f,0xb6,0x2e,0x3b,0xa8,0x6b,0x94,0xf7,0x16,0xeb,0xba,
    0x39,0x0f,0x91,0xf7,0x89,0xaf,0xf7,0xbb,0x4f,0xea,0x3d,0xdf,0x9f,0x66,0xe7,0xf7,
    0xf5,0x98,0x9b,0xef,0xcf,0x01,0x6a,0x22,0xf6,0x8b,0xd6,0xb0,0xec,0xe9,0x4b,0xe8,
    0x3a,0xde,0x6e,0xbf,0x46,0xd9,0x8f,0x0c,0xfa,0x19,0x89,0x98,0xf3,0x08,0xbf,0x47,
    0xd9,0x17,0xcf,0x8f,0x56,0xf4,0x3f,0xc6,0x39,0xf2,0xf7,0xf2,0x06,0xfa,0x39,0xe1,
    0xc7,0xd1,0x8c,0xfc,0x24,0xe7,0xca,0xf5,0xdf,0xa5,0xa7,0xa2,0xf0,0x13,0x68,0x38,
    0x3f,0x8d,0x56,0x9c,0x83,0x69,0xee,0x07,0xd5,0x3f,0xcb,0x39,0x08,0x7e,0x16,0x3e,
    0xf2,0xf9,0x8a,0xbc,0x5c,0xb1,0xfe,0x32,0xdf,0x7f,0xf0,0x4b,0x15,0xfc,0x55,0xce,
    0x56,0xf0,0x2b,0x15,0xfc,0x0d,0xf6,0x3c,0xf8,0xb5,0x0a,0xfe,0x96,0xbf,0x2d,0xe1,
    0xd7,0xe1,0xf7,0xd8,0x2e,0x64,0x79,0x3f,0x09,0xd8,0xdf,0x86,0xf8,0xde,0x0c,0xf2,
    0x4d,0x34,0x70,0xee,0x8f,0xd8,0xbb,0xae,0xa7,0xcf,0x06,0x22,0xde,0xd9,0x24,0xdf,
    0xd6,0x16,0xf8,0x03,0xa6,0xd0,0xc6,0xfd,0xd5,0xc2,0xb9,0x1d,0xa4,0xa6,0x1d,0xfc,
    0x82,0xd5,0x78,0xfe,0x08,0xeb,0xda,0x59,0xb7,0x8d,0xef,0xba,0x85,0xf3,0x3c,0xc8,
    0x99,0xdd,0x0e,0xfe,0x83,0xd5,0x74,0x70,0x17,0x6d,0xe7,0x2c,0xff,0x65,0x9d,0x77,
    0xd1,0xcf,0xbf,0x56,0xbf,0x43,0xee,0x40,0x9f,0xc7,0x7f,0xbf,0x62,0xeb,0x7c,0x2f,
    0x1e,0xc7,0x33,0x49,0xdf,0xd3,0xc6,0xfe,0xec,0x04,0x7f,0xd5,0x32,0xef,0xe9,0x67,
    0xb0,0xa8,0xfb,0xc7,0x34,0x42,0xcb,0x9f,0x7f,0x58,0x95,0xd7,0xfd,0x4a,0x4d,0x35,
    0x6b,0x3a,0x65,0x86,0x5d,0xcc,0xd0,0x2d,0x33,0xf4,0x80,0xc7,0x0c,0x4f,0x80,0xc5,
    0x0c,0xbd,0x32,0x83,0x73,0x25,0x8b,0x5e,0x7c,0x4b,0x32,0xc3,0x93,0x78,0x67,0x64,
    0x86,0xa7,0xc0,0x63,0x86,0x5f,0xc0,0xa2,0xce,0x67,0x08,0xad,0x5e,0x99,0xe1,0x2e,
    0x35,0x5d,0xac,0x29,0xc9,0x0c,0x7b,0x98,0xa1,0x4f,0x66,0x78,0x06,0x3c,0x66,0xd8,
    0x0b,0x16,0x33,0x0c,0xc8,0x0c,0xce,0xf5,0x5b,0x0c,0xe0,0xdb,0xcf,0x39,0x72,0xdf,
    0xe7,0xf0,0xbe,0x2b,0xdf,0xbb,0xf7,0x18,0xb5,0x03,0xd2,0xe3,0xef,0xd4,0xf5,0xb2,
    0xae,0x9f,0xda,0x83,0xd4,0x1e,0xa4,0xd6,0xcf,0xeb,0x3d,0xee,0x23,0x5f,0xff,0xb6,
    0xc5,0x21,0x38,0xdf,0xa3,0xdf,0x38,0x8b,0xce,0x9d,0x80,0xf3,0x59,0xfd,0x5e,0x7a,
    0x99,0x59,0x87,0x99,0xd5,0xeb,0x47,0xc0,0xef,0x30,0xeb,0x61,0x34,0x1c,0xff,0xd3,
    0x6a,0x86,0xd0,0x88,0x79,0x0f,0x93,0x0f,0xd1,0xd7,0x21,0xb4,0x46,0xd3,0x77,0xb7,
    0x71,0x6f,0x85,0xdf,0x6b,0xf8,0x8d,0x89,0xdf,0xeb,0xe0,0xf1,0x9e,0xdf,0x64,0xf6,
    0x44,0xb0,0x63,0x60,0x99,0x54,0x2f,0x9f,0xde,0x77,0xc7,0xa9,0x3d,0x86,0xc6,0x38,
    0x7b,0xf1,0x16,0xbe,0xc7,0xb9,0x1f,0xbc,0xf7,0xcf,0x4d,0x67,0x13,0x7b,0x73,0x8f,
    0x9a,0xf3,0x68,0x9f,0xa0,0x66,0xbc,0x62,0x7f,0x87,0xe8,0xdb,0xef,0xca,0x53,0xf4,
    0x7d,0x92,0xbe,0xfd,0xde,0x7c,0x0f,0xbc,0x8c,0xf6,0x69,0xb4,0x1d,0xaf,0x35,0x65,
    0xc7,0xde,0x97,0xbb,0xfd,0xb4,0xec,0xc3,0x24,0x7a,0x13,0xb2,0x0f,0x1f,0x82,0xdf,
    0xa7,0xaf,0x8f,0xc0,0xc6,0xe5,0xdc,0x7d,0x0c,0xde,0xca,0xb9,0x9b,0x92,0xf7,0xe0,
    0xdc,0x27,0x16,0x53,0xf4,0xef,0xbf,0x9f,0xb7,0x9a,0x33,0xf4,0xe1,0xb3,0x05,0x37,
    0x25,0x3e,0x9f,0xe2,0x73,0x56,0x7c,0x3e,0x03,0x0f,0x9f,0x19,0xf1,0x71,0xee,0x9c,
    0xc5,0x0c,0x5a,0xe7,0xf0,0x99,0x15,0x9f,0xe0,0x66,0xc4,0xe7,0x02,0x3e,0xc3,0xe2,
    0xf3,0x05,0x78,0xf8,0xcc,0x89,0x8f,0x73,0x17,0x2d,0xe6,0xd0,0xba,0x88,0xcf,0xbc,
    0xf8,0x04,0x37,0x27,0x3e,0x5f,0xe2,0xd3,0x2d,0x3e,0x5f,0x81,0x87,0xcf,0x82,0xf8,
    0x38,0x77,0xc9,0x62,0x01,0xad,0x4b,0xf8,0x94,0xc5,0x27,0xb8,0x05,0xf1,0xf9,0x1a,
    0x9f,0xcb,0xe2,0xf3,0x0d,0x78,0xf8,0x2c,0x8a,0x8f,0x73,0x57,0x2c,0x16,0xd1,0xba,
    0x82,0xcf,0x92,0xf8,0x04,0xb7,0x28,0x3e,0xd7,0xf0,0xb9,0x2a,0x3e,0xdf,0x82,0x87,
    0xcf,0xb2,0xf8,0x38,0x77,0xdd,0x62,0x19,0xad,0xeb,0xf8,0xac,0x88,0x4f,0x70,0xcb,
    0xe2,0xf3,0x1d,0x3e,0x37,0xc4,0xe7,0x7b,0xf0,0xf0,0x59,0x15,0x1f,0xe7,0x6e,0x5a,
    0xac,0xa2,0x75,0x13,0x9f,0x35,0xf1,0x09,0x6e,0x55,0x7c,0x7e,0xc4,0xe7,0x96,0xf8,
    0xfc,0x04,0x1e,0x3e,0x77,0xc4,0xc7,0xb9,0xdb,0xe9,0x7d,0xb4,0xa1,0x75,0x1b,0x9f,
    0x75,0xf1,0x09,0xce,0x9f,0xff,0xd9,0xd7,0xb6,0xd7,0xe2,0x7f,0xdf,0xcf,0x2b,0x40,
    0x28,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
// layout(set = 0, binding = 0)uniform texture2DMSArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// void main()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//             vec4 colorValue = vec4(0, 0, 0, 1);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = vec4(round(colorValue * params . invSamples));
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
//
// }
