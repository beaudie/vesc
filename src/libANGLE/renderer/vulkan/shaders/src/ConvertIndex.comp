//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ConvertIndex.comp: Convert UINT_8 indices into UINT_16 using a compute shader.
//
// The following defines tweak the functionality, and a different shader is built based on these.
//
//  (Currently no parameters)
//

#version 450 core

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer dst
{
    // Note: every shader invocation outputs one packed value with two 16-bit indices.
    uint dstData[];
};

layout (set = 0, binding = 1) buffer src
{
    // Note: every shader invocation reads half of one packed value with two 8-bit indices.
    uint srcData[];
};

layout (push_constant) uniform PushConstants
{
    // srcOffset: used in all cases
    uint srcOffset;
    // dstOffset: used in all cases
    uint dstOffset;
    // maxIndex: used in all cases
    uint maxIndex;
    // unused
    uint _padding;
};

uint PullIndex(uint index)
{
    uint srcIndex = index + srcOffset;
    uint srcBlock = srcData[srcIndex >> 2];
    uint srcComponent = (srcIndex & 3);

    return (srcBlock >> (srcComponent << 3)) & 0xF;
}

void PackIndexValue(uint srcValue, uint indexIndex, inout uint dstValue)
{
    // Pack 16-byte index into the 32-byte destination.
    dstValue |= srcValue << (indexIndex << 4);
}

// Note: Once support for primitive restart is added, the shader needs to
// convert 0xFF -> 0xFFFF. http://anglebug.com/3215

void main()
{
    // The element index is simply the invocation ID times two.
    uint index = (gl_GlobalInvocationID.x << 1);

    // Don't write anything to dest if we're entirely past the end of the buffer.
    // We assume buffer size is uint-aligned.
    if (index >= maxIndex)
        return;

    uint dstValue = 0;

    // Skip packing if this index is before the start of the first copy element.
    uint srcValue = PullIndex(index);
    PackIndexValue(srcValue, 0, dstValue);

    // Skip packing the second index if we're after the last element.
    if (index + 1 < maxIndex)
    {
        uint srcValue = PullIndex(index + 1);
        PackIndexValue(srcValue, 1, dstValue);
    }

    uint dstOffsetInUints = dstOffset >> 2;
    dstData[dstOffsetInUints + gl_GlobalInvocationID.x] = dstValue;
}
