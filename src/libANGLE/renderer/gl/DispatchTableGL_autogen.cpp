// GENERATED FILE - DO NOT EDIT.
// Generated by generate_gl_dispatch_table.py using data from gl_bindings_data.json and gl.xml.
//
// Copyright 2017 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// DispatchTableGL_autogen.cpp:
//   Initialize the native bindings for ANGLE's OpenGL back-end.

#include "libANGLE/renderer/gl/DispatchTableGL_autogen.h"

#include "libANGLE/Version.h"
#include "libANGLE/renderer/gl/FunctionsGL.h"

#if defined(ANGLE_ENABLE_OPENGL_NULL)
#include "libANGLE/renderer/gl/null_functions.h"
#endif  // defined(ANGLE_ENABLE_OPENGL_NULL)

#define ASSIGN(NAME, FP) *reinterpret_cast<void **>(&table->FP) = functionsGL->loadProcAddress(NAME)

#if defined(ANGLE_ENABLE_OPENGL_NULL)
#define ASSIGN_NULL(NAME, FP) *reinterpret_cast<void **>(&table->FP) = FP##NULL
#endif  // defined(ANGLE_ENABLE_OPENGL_NULL)

namespace rx
{

void InitializeTableDesktopGL(DispatchTableGL *table,
                              FunctionsGL *functionsGL,
                              const std::set<std::string> &extensions)
{
    const gl::Version &version = functionsGL->version;

    if (version >= gl::Version(1, 0))
    {
        ASSIGN("glBlendFunc", blendFunc);
        ASSIGN("glClear", clear);
        ASSIGN("glClearColor", clearColor);
        ASSIGN("glClearDepth", clearDepth);
        ASSIGN("glClearStencil", clearStencil);
        ASSIGN("glColorMask", colorMask);
        ASSIGN("glCullFace", cullFace);
        ASSIGN("glDepthFunc", depthFunc);
        ASSIGN("glDepthMask", depthMask);
        ASSIGN("glDepthRange", depthRange);
        ASSIGN("glDisable", disable);
        ASSIGN("glDrawBuffer", drawBuffer);
        ASSIGN("glEnable", enable);
        ASSIGN("glFinish", finish);
        ASSIGN("glFlush", flush);
        ASSIGN("glFrontFace", frontFace);
        ASSIGN("glGetBooleanv", getBooleanv);
        ASSIGN("glGetDoublev", getDoublev);
        ASSIGN("glGetError", getError);
        ASSIGN("glGetFloatv", getFloatv);
        ASSIGN("glGetIntegerv", getIntegerv);
        ASSIGN("glGetString", getString);
        ASSIGN("glGetTexImage", getTexImage);
        ASSIGN("glGetTexLevelParameterfv", getTexLevelParameterfv);
        ASSIGN("glGetTexLevelParameteriv", getTexLevelParameteriv);
        ASSIGN("glGetTexParameterfv", getTexParameterfv);
        ASSIGN("glGetTexParameteriv", getTexParameteriv);
        ASSIGN("glHint", hint);
        ASSIGN("glIsEnabled", isEnabled);
        ASSIGN("glLineWidth", lineWidth);
        ASSIGN("glLogicOp", logicOp);
        ASSIGN("glPixelStoref", pixelStoref);
        ASSIGN("glPixelStorei", pixelStorei);
        ASSIGN("glPointSize", pointSize);
        ASSIGN("glPolygonMode", polygonMode);
        ASSIGN("glReadBuffer", readBuffer);
        ASSIGN("glReadPixels", readPixels);
        ASSIGN("glScissor", scissor);
        ASSIGN("glStencilFunc", stencilFunc);
        ASSIGN("glStencilMask", stencilMask);
        ASSIGN("glStencilOp", stencilOp);
        ASSIGN("glTexImage1D", texImage1D);
        ASSIGN("glTexImage2D", texImage2D);
        ASSIGN("glTexParameterf", texParameterf);
        ASSIGN("glTexParameterfv", texParameterfv);
        ASSIGN("glTexParameteri", texParameteri);
        ASSIGN("glTexParameteriv", texParameteriv);
        ASSIGN("glViewport", viewport);
    }

    if (version >= gl::Version(1, 1))
    {
        ASSIGN("glBindTexture", bindTexture);
        ASSIGN("glCopyTexImage1D", copyTexImage1D);
        ASSIGN("glCopyTexImage2D", copyTexImage2D);
        ASSIGN("glCopyTexSubImage1D", copyTexSubImage1D);
        ASSIGN("glCopyTexSubImage2D", copyTexSubImage2D);
        ASSIGN("glDeleteTextures", deleteTextures);
        ASSIGN("glDrawArrays", drawArrays);
        ASSIGN("glDrawElements", drawElements);
        ASSIGN("glGenTextures", genTextures);
        ASSIGN("glIsTexture", isTexture);
        ASSIGN("glPolygonOffset", polygonOffset);
        ASSIGN("glTexSubImage1D", texSubImage1D);
        ASSIGN("glTexSubImage2D", texSubImage2D);
    }

    if (version >= gl::Version(1, 2))
    {
        ASSIGN("glCopyTexSubImage3D", copyTexSubImage3D);
        ASSIGN("glDrawRangeElements", drawRangeElements);
        ASSIGN("glTexImage3D", texImage3D);
        ASSIGN("glTexSubImage3D", texSubImage3D);
    }

    if (version >= gl::Version(1, 3))
    {
        ASSIGN("glActiveTexture", activeTexture);
        ASSIGN("glCompressedTexImage1D", compressedTexImage1D);
        ASSIGN("glCompressedTexImage2D", compressedTexImage2D);
        ASSIGN("glCompressedTexImage3D", compressedTexImage3D);
        ASSIGN("glCompressedTexSubImage1D", compressedTexSubImage1D);
        ASSIGN("glCompressedTexSubImage2D", compressedTexSubImage2D);
        ASSIGN("glCompressedTexSubImage3D", compressedTexSubImage3D);
        ASSIGN("glGetCompressedTexImage", getCompressedTexImage);
        ASSIGN("glSampleCoverage", sampleCoverage);
    }

    if (version >= gl::Version(1, 4))
    {
        ASSIGN("glBlendFuncSeparate", blendFuncSeparate);
        ASSIGN("glMultiDrawArrays", multiDrawArrays);
        ASSIGN("glMultiDrawElements", multiDrawElements);
        ASSIGN("glPointParameterf", pointParameterf);
        ASSIGN("glPointParameterfv", pointParameterfv);
        ASSIGN("glPointParameteri", pointParameteri);
        ASSIGN("glPointParameteriv", pointParameteriv);
        ASSIGN("glBlendColor", blendColor);
        ASSIGN("glBlendEquation", blendEquation);
    }

    if (version >= gl::Version(1, 5))
    {
        ASSIGN("glBeginQuery", beginQuery);
        ASSIGN("glBindBuffer", bindBuffer);
        ASSIGN("glBufferData", bufferData);
        ASSIGN("glBufferSubData", bufferSubData);
        ASSIGN("glDeleteBuffers", deleteBuffers);
        ASSIGN("glDeleteQueries", deleteQueries);
        ASSIGN("glEndQuery", endQuery);
        ASSIGN("glGenBuffers", genBuffers);
        ASSIGN("glGenQueries", genQueries);
        ASSIGN("glGetBufferParameteriv", getBufferParameteriv);
        ASSIGN("glGetBufferPointerv", getBufferPointerv);
        ASSIGN("glGetBufferSubData", getBufferSubData);
        ASSIGN("glGetQueryObjectiv", getQueryObjectiv);
        ASSIGN("glGetQueryObjectuiv", getQueryObjectuiv);
        ASSIGN("glGetQueryiv", getQueryiv);
        ASSIGN("glIsBuffer", isBuffer);
        ASSIGN("glIsQuery", isQuery);
        ASSIGN("glMapBuffer", mapBuffer);
        ASSIGN("glUnmapBuffer", unmapBuffer);
    }

    if (version >= gl::Version(2, 0))
    {
        ASSIGN("glAttachShader", attachShader);
        ASSIGN("glBindAttribLocation", bindAttribLocation);
        ASSIGN("glBlendEquationSeparate", blendEquationSeparate);
        ASSIGN("glCompileShader", compileShader);
        ASSIGN("glCreateProgram", createProgram);
        ASSIGN("glCreateShader", createShader);
        ASSIGN("glDeleteProgram", deleteProgram);
        ASSIGN("glDeleteShader", deleteShader);
        ASSIGN("glDetachShader", detachShader);
        ASSIGN("glDisableVertexAttribArray", disableVertexAttribArray);
        ASSIGN("glDrawBuffers", drawBuffers);
        ASSIGN("glEnableVertexAttribArray", enableVertexAttribArray);
        ASSIGN("glGetActiveAttrib", getActiveAttrib);
        ASSIGN("glGetActiveUniform", getActiveUniform);
        ASSIGN("glGetAttachedShaders", getAttachedShaders);
        ASSIGN("glGetAttribLocation", getAttribLocation);
        ASSIGN("glGetProgramInfoLog", getProgramInfoLog);
        ASSIGN("glGetProgramiv", getProgramiv);
        ASSIGN("glGetShaderInfoLog", getShaderInfoLog);
        ASSIGN("glGetShaderSource", getShaderSource);
        ASSIGN("glGetShaderiv", getShaderiv);
        ASSIGN("glGetUniformLocation", getUniformLocation);
        ASSIGN("glGetUniformfv", getUniformfv);
        ASSIGN("glGetUniformiv", getUniformiv);
        ASSIGN("glGetVertexAttribPointerv", getVertexAttribPointerv);
        ASSIGN("glGetVertexAttribdv", getVertexAttribdv);
        ASSIGN("glGetVertexAttribfv", getVertexAttribfv);
        ASSIGN("glGetVertexAttribiv", getVertexAttribiv);
        ASSIGN("glIsProgram", isProgram);
        ASSIGN("glIsShader", isShader);
        ASSIGN("glLinkProgram", linkProgram);
        ASSIGN("glShaderSource", shaderSource);
        ASSIGN("glStencilFuncSeparate", stencilFuncSeparate);
        ASSIGN("glStencilMaskSeparate", stencilMaskSeparate);
        ASSIGN("glStencilOpSeparate", stencilOpSeparate);
        ASSIGN("glUniform1f", uniform1f);
        ASSIGN("glUniform1fv", uniform1fv);
        ASSIGN("glUniform1i", uniform1i);
        ASSIGN("glUniform1iv", uniform1iv);
        ASSIGN("glUniform2f", uniform2f);
        ASSIGN("glUniform2fv", uniform2fv);
        ASSIGN("glUniform2i", uniform2i);
        ASSIGN("glUniform2iv", uniform2iv);
        ASSIGN("glUniform3f", uniform3f);
        ASSIGN("glUniform3fv", uniform3fv);
        ASSIGN("glUniform3i", uniform3i);
        ASSIGN("glUniform3iv", uniform3iv);
        ASSIGN("glUniform4f", uniform4f);
        ASSIGN("glUniform4fv", uniform4fv);
        ASSIGN("glUniform4i", uniform4i);
        ASSIGN("glUniform4iv", uniform4iv);
        ASSIGN("glUniformMatrix2fv", uniformMatrix2fv);
        ASSIGN("glUniformMatrix3fv", uniformMatrix3fv);
        ASSIGN("glUniformMatrix4fv", uniformMatrix4fv);
        ASSIGN("glUseProgram", useProgram);
        ASSIGN("glValidateProgram", validateProgram);
        ASSIGN("glVertexAttrib1d", vertexAttrib1d);
        ASSIGN("glVertexAttrib1dv", vertexAttrib1dv);
        ASSIGN("glVertexAttrib1f", vertexAttrib1f);
        ASSIGN("glVertexAttrib1fv", vertexAttrib1fv);
        ASSIGN("glVertexAttrib1s", vertexAttrib1s);
        ASSIGN("glVertexAttrib1sv", vertexAttrib1sv);
        ASSIGN("glVertexAttrib2d", vertexAttrib2d);
        ASSIGN("glVertexAttrib2dv", vertexAttrib2dv);
        ASSIGN("glVertexAttrib2f", vertexAttrib2f);
        ASSIGN("glVertexAttrib2fv", vertexAttrib2fv);
        ASSIGN("glVertexAttrib2s", vertexAttrib2s);
        ASSIGN("glVertexAttrib2sv", vertexAttrib2sv);
        ASSIGN("glVertexAttrib3d", vertexAttrib3d);
        ASSIGN("glVertexAttrib3dv", vertexAttrib3dv);
        ASSIGN("glVertexAttrib3f", vertexAttrib3f);
        ASSIGN("glVertexAttrib3fv", vertexAttrib3fv);
        ASSIGN("glVertexAttrib3s", vertexAttrib3s);
        ASSIGN("glVertexAttrib3sv", vertexAttrib3sv);
        ASSIGN("glVertexAttrib4Nbv", vertexAttrib4Nbv);
        ASSIGN("glVertexAttrib4Niv", vertexAttrib4Niv);
        ASSIGN("glVertexAttrib4Nsv", vertexAttrib4Nsv);
        ASSIGN("glVertexAttrib4Nub", vertexAttrib4Nub);
        ASSIGN("glVertexAttrib4Nubv", vertexAttrib4Nubv);
        ASSIGN("glVertexAttrib4Nuiv", vertexAttrib4Nuiv);
        ASSIGN("glVertexAttrib4Nusv", vertexAttrib4Nusv);
        ASSIGN("glVertexAttrib4bv", vertexAttrib4bv);
        ASSIGN("glVertexAttrib4d", vertexAttrib4d);
        ASSIGN("glVertexAttrib4dv", vertexAttrib4dv);
        ASSIGN("glVertexAttrib4f", vertexAttrib4f);
        ASSIGN("glVertexAttrib4fv", vertexAttrib4fv);
        ASSIGN("glVertexAttrib4iv", vertexAttrib4iv);
        ASSIGN("glVertexAttrib4s", vertexAttrib4s);
        ASSIGN("glVertexAttrib4sv", vertexAttrib4sv);
        ASSIGN("glVertexAttrib4ubv", vertexAttrib4ubv);
        ASSIGN("glVertexAttrib4uiv", vertexAttrib4uiv);
        ASSIGN("glVertexAttrib4usv", vertexAttrib4usv);
        ASSIGN("glVertexAttribPointer", vertexAttribPointer);
    }

    if (version >= gl::Version(2, 1))
    {
        ASSIGN("glUniformMatrix2x3fv", uniformMatrix2x3fv);
        ASSIGN("glUniformMatrix2x4fv", uniformMatrix2x4fv);
        ASSIGN("glUniformMatrix3x2fv", uniformMatrix3x2fv);
        ASSIGN("glUniformMatrix3x4fv", uniformMatrix3x4fv);
        ASSIGN("glUniformMatrix4x2fv", uniformMatrix4x2fv);
        ASSIGN("glUniformMatrix4x3fv", uniformMatrix4x3fv);
    }

    if (version >= gl::Version(3, 0))
    {
        ASSIGN("glBeginConditionalRender", beginConditionalRender);
        ASSIGN("glBeginTransformFeedback", beginTransformFeedback);
        ASSIGN("glBindBufferBase", bindBufferBase);
        ASSIGN("glBindBufferRange", bindBufferRange);
        ASSIGN("glBindFragDataLocation", bindFragDataLocation);
        ASSIGN("glBindFramebuffer", bindFramebuffer);
        ASSIGN("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN("glBindVertexArray", bindVertexArray);
        ASSIGN("glBlitFramebuffer", blitFramebuffer);
        ASSIGN("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN("glClampColor", clampColor);
        ASSIGN("glClearBufferfi", clearBufferfi);
        ASSIGN("glClearBufferfv", clearBufferfv);
        ASSIGN("glClearBufferiv", clearBufferiv);
        ASSIGN("glClearBufferuiv", clearBufferuiv);
        ASSIGN("glColorMaski", colorMaski);
        ASSIGN("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN("glDisablei", disablei);
        ASSIGN("glEnablei", enablei);
        ASSIGN("glEndConditionalRender", endConditionalRender);
        ASSIGN("glEndTransformFeedback", endTransformFeedback);
        ASSIGN("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN("glFramebufferTexture1D", framebufferTexture1D);
        ASSIGN("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN("glFramebufferTexture3D", framebufferTexture3D);
        ASSIGN("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN("glGenFramebuffers", genFramebuffers);
        ASSIGN("glGenRenderbuffers", genRenderbuffers);
        ASSIGN("glGenVertexArrays", genVertexArrays);
        ASSIGN("glGenerateMipmap", generateMipmap);
        ASSIGN("glGetBooleani_v", getBooleani_v);
        ASSIGN("glGetFragDataLocation", getFragDataLocation);
        ASSIGN("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN("glGetIntegeri_v", getIntegeri_v);
        ASSIGN("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN("glGetStringi", getStringi);
        ASSIGN("glGetTexParameterIiv", getTexParameterIiv);
        ASSIGN("glGetTexParameterIuiv", getTexParameterIuiv);
        ASSIGN("glGetTransformFeedbackVarying", getTransformFeedbackVarying);
        ASSIGN("glGetUniformuiv", getUniformuiv);
        ASSIGN("glGetVertexAttribIiv", getVertexAttribIiv);
        ASSIGN("glGetVertexAttribIuiv", getVertexAttribIuiv);
        ASSIGN("glIsEnabledi", isEnabledi);
        ASSIGN("glIsFramebuffer", isFramebuffer);
        ASSIGN("glIsRenderbuffer", isRenderbuffer);
        ASSIGN("glIsVertexArray", isVertexArray);
        ASSIGN("glMapBufferRange", mapBufferRange);
        ASSIGN("glRenderbufferStorage", renderbufferStorage);
        ASSIGN("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
        ASSIGN("glTexParameterIiv", texParameterIiv);
        ASSIGN("glTexParameterIuiv", texParameterIuiv);
        ASSIGN("glTransformFeedbackVaryings", transformFeedbackVaryings);
        ASSIGN("glUniform1ui", uniform1ui);
        ASSIGN("glUniform1uiv", uniform1uiv);
        ASSIGN("glUniform2ui", uniform2ui);
        ASSIGN("glUniform2uiv", uniform2uiv);
        ASSIGN("glUniform3ui", uniform3ui);
        ASSIGN("glUniform3uiv", uniform3uiv);
        ASSIGN("glUniform4ui", uniform4ui);
        ASSIGN("glUniform4uiv", uniform4uiv);
        ASSIGN("glVertexAttribI1i", vertexAttribI1i);
        ASSIGN("glVertexAttribI1iv", vertexAttribI1iv);
        ASSIGN("glVertexAttribI1ui", vertexAttribI1ui);
        ASSIGN("glVertexAttribI1uiv", vertexAttribI1uiv);
        ASSIGN("glVertexAttribI2i", vertexAttribI2i);
        ASSIGN("glVertexAttribI2iv", vertexAttribI2iv);
        ASSIGN("glVertexAttribI2ui", vertexAttribI2ui);
        ASSIGN("glVertexAttribI2uiv", vertexAttribI2uiv);
        ASSIGN("glVertexAttribI3i", vertexAttribI3i);
        ASSIGN("glVertexAttribI3iv", vertexAttribI3iv);
        ASSIGN("glVertexAttribI3ui", vertexAttribI3ui);
        ASSIGN("glVertexAttribI3uiv", vertexAttribI3uiv);
        ASSIGN("glVertexAttribI4bv", vertexAttribI4bv);
        ASSIGN("glVertexAttribI4i", vertexAttribI4i);
        ASSIGN("glVertexAttribI4iv", vertexAttribI4iv);
        ASSIGN("glVertexAttribI4sv", vertexAttribI4sv);
        ASSIGN("glVertexAttribI4ubv", vertexAttribI4ubv);
        ASSIGN("glVertexAttribI4ui", vertexAttribI4ui);
        ASSIGN("glVertexAttribI4uiv", vertexAttribI4uiv);
        ASSIGN("glVertexAttribI4usv", vertexAttribI4usv);
        ASSIGN("glVertexAttribIPointer", vertexAttribIPointer);
    }

    if (version >= gl::Version(3, 1))
    {
        ASSIGN("glCopyBufferSubData", copyBufferSubData);
        ASSIGN("glDrawArraysInstanced", drawArraysInstanced);
        ASSIGN("glDrawElementsInstanced", drawElementsInstanced);
        ASSIGN("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN("glGetActiveUniformName", getActiveUniformName);
        ASSIGN("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN("glGetUniformIndices", getUniformIndices);
        ASSIGN("glPrimitiveRestartIndex", primitiveRestartIndex);
        ASSIGN("glTexBuffer", texBuffer);
        ASSIGN("glUniformBlockBinding", uniformBlockBinding);
    }

    if (version >= gl::Version(3, 2))
    {
        ASSIGN("glClientWaitSync", clientWaitSync);
        ASSIGN("glDeleteSync", deleteSync);
        ASSIGN("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN("glFenceSync", fenceSync);
        ASSIGN("glFramebufferTexture", framebufferTexture);
        ASSIGN("glGetBufferParameteri64v", getBufferParameteri64v);
        ASSIGN("glGetInteger64i_v", getInteger64i_v);
        ASSIGN("glGetInteger64v", getInteger64v);
        ASSIGN("glGetMultisamplefv", getMultisamplefv);
        ASSIGN("glGetSynciv", getSynciv);
        ASSIGN("glIsSync", isSync);
        ASSIGN("glMultiDrawElementsBaseVertex", multiDrawElementsBaseVertex);
        ASSIGN("glProvokingVertex", provokingVertex);
        ASSIGN("glSampleMaski", sampleMaski);
        ASSIGN("glTexImage2DMultisample", texImage2DMultisample);
        ASSIGN("glTexImage3DMultisample", texImage3DMultisample);
        ASSIGN("glWaitSync", waitSync);
    }

    if (version >= gl::Version(3, 3))
    {
        ASSIGN("glBindFragDataLocationIndexed", bindFragDataLocationIndexed);
        ASSIGN("glBindSampler", bindSampler);
        ASSIGN("glDeleteSamplers", deleteSamplers);
        ASSIGN("glGenSamplers", genSamplers);
        ASSIGN("glGetFragDataIndex", getFragDataIndex);
        ASSIGN("glGetQueryObjecti64v", getQueryObjecti64v);
        ASSIGN("glGetQueryObjectui64v", getQueryObjectui64v);
        ASSIGN("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN("glIsSampler", isSampler);
        ASSIGN("glQueryCounter", queryCounter);
        ASSIGN("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN("glSamplerParameterf", samplerParameterf);
        ASSIGN("glSamplerParameterfv", samplerParameterfv);
        ASSIGN("glSamplerParameteri", samplerParameteri);
        ASSIGN("glSamplerParameteriv", samplerParameteriv);
        ASSIGN("glVertexAttribDivisor", vertexAttribDivisor);
        ASSIGN("glVertexAttribP1ui", vertexAttribP1ui);
        ASSIGN("glVertexAttribP1uiv", vertexAttribP1uiv);
        ASSIGN("glVertexAttribP2ui", vertexAttribP2ui);
        ASSIGN("glVertexAttribP2uiv", vertexAttribP2uiv);
        ASSIGN("glVertexAttribP3ui", vertexAttribP3ui);
        ASSIGN("glVertexAttribP3uiv", vertexAttribP3uiv);
        ASSIGN("glVertexAttribP4ui", vertexAttribP4ui);
        ASSIGN("glVertexAttribP4uiv", vertexAttribP4uiv);
    }

    if (version >= gl::Version(4, 0))
    {
        ASSIGN("glBeginQueryIndexed", beginQueryIndexed);
        ASSIGN("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN("glBlendEquationSeparatei", blendEquationSeparatei);
        ASSIGN("glBlendEquationi", blendEquationi);
        ASSIGN("glBlendFuncSeparatei", blendFuncSeparatei);
        ASSIGN("glBlendFunci", blendFunci);
        ASSIGN("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN("glDrawElementsIndirect", drawElementsIndirect);
        ASSIGN("glDrawTransformFeedback", drawTransformFeedback);
        ASSIGN("glDrawTransformFeedbackStream", drawTransformFeedbackStream);
        ASSIGN("glEndQueryIndexed", endQueryIndexed);
        ASSIGN("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN("glGetActiveSubroutineName", getActiveSubroutineName);
        ASSIGN("glGetActiveSubroutineUniformName", getActiveSubroutineUniformName);
        ASSIGN("glGetActiveSubroutineUniformiv", getActiveSubroutineUniformiv);
        ASSIGN("glGetProgramStageiv", getProgramStageiv);
        ASSIGN("glGetQueryIndexediv", getQueryIndexediv);
        ASSIGN("glGetSubroutineIndex", getSubroutineIndex);
        ASSIGN("glGetSubroutineUniformLocation", getSubroutineUniformLocation);
        ASSIGN("glGetUniformSubroutineuiv", getUniformSubroutineuiv);
        ASSIGN("glGetUniformdv", getUniformdv);
        ASSIGN("glIsTransformFeedback", isTransformFeedback);
        ASSIGN("glMinSampleShading", minSampleShading);
        ASSIGN("glPatchParameterfv", patchParameterfv);
        ASSIGN("glPatchParameteri", patchParameteri);
        ASSIGN("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN("glResumeTransformFeedback", resumeTransformFeedback);
        ASSIGN("glUniform1d", uniform1d);
        ASSIGN("glUniform1dv", uniform1dv);
        ASSIGN("glUniform2d", uniform2d);
        ASSIGN("glUniform2dv", uniform2dv);
        ASSIGN("glUniform3d", uniform3d);
        ASSIGN("glUniform3dv", uniform3dv);
        ASSIGN("glUniform4d", uniform4d);
        ASSIGN("glUniform4dv", uniform4dv);
        ASSIGN("glUniformMatrix2dv", uniformMatrix2dv);
        ASSIGN("glUniformMatrix2x3dv", uniformMatrix2x3dv);
        ASSIGN("glUniformMatrix2x4dv", uniformMatrix2x4dv);
        ASSIGN("glUniformMatrix3dv", uniformMatrix3dv);
        ASSIGN("glUniformMatrix3x2dv", uniformMatrix3x2dv);
        ASSIGN("glUniformMatrix3x4dv", uniformMatrix3x4dv);
        ASSIGN("glUniformMatrix4dv", uniformMatrix4dv);
        ASSIGN("glUniformMatrix4x2dv", uniformMatrix4x2dv);
        ASSIGN("glUniformMatrix4x3dv", uniformMatrix4x3dv);
        ASSIGN("glUniformSubroutinesuiv", uniformSubroutinesuiv);
    }

    if (version >= gl::Version(4, 1))
    {
        ASSIGN("glActiveShaderProgram", activeShaderProgram);
        ASSIGN("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN("glClearDepthf", clearDepthf);
        ASSIGN("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN("glDepthRangeArrayv", depthRangeArrayv);
        ASSIGN("glDepthRangeIndexed", depthRangeIndexed);
        ASSIGN("glDepthRangef", depthRangef);
        ASSIGN("glGenProgramPipelines", genProgramPipelines);
        ASSIGN("glGetDoublei_v", getDoublei_v);
        ASSIGN("glGetFloati_v", getFloati_v);
        ASSIGN("glGetProgramBinary", getProgramBinary);
        ASSIGN("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN("glGetVertexAttribLdv", getVertexAttribLdv);
        ASSIGN("glIsProgramPipeline", isProgramPipeline);
        ASSIGN("glProgramBinary", programBinary);
        ASSIGN("glProgramParameteri", programParameteri);
        ASSIGN("glProgramUniform1d", programUniform1d);
        ASSIGN("glProgramUniform1dv", programUniform1dv);
        ASSIGN("glProgramUniform1f", programUniform1f);
        ASSIGN("glProgramUniform1fv", programUniform1fv);
        ASSIGN("glProgramUniform1i", programUniform1i);
        ASSIGN("glProgramUniform1iv", programUniform1iv);
        ASSIGN("glProgramUniform1ui", programUniform1ui);
        ASSIGN("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN("glProgramUniform2d", programUniform2d);
        ASSIGN("glProgramUniform2dv", programUniform2dv);
        ASSIGN("glProgramUniform2f", programUniform2f);
        ASSIGN("glProgramUniform2fv", programUniform2fv);
        ASSIGN("glProgramUniform2i", programUniform2i);
        ASSIGN("glProgramUniform2iv", programUniform2iv);
        ASSIGN("glProgramUniform2ui", programUniform2ui);
        ASSIGN("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN("glProgramUniform3d", programUniform3d);
        ASSIGN("glProgramUniform3dv", programUniform3dv);
        ASSIGN("glProgramUniform3f", programUniform3f);
        ASSIGN("glProgramUniform3fv", programUniform3fv);
        ASSIGN("glProgramUniform3i", programUniform3i);
        ASSIGN("glProgramUniform3iv", programUniform3iv);
        ASSIGN("glProgramUniform3ui", programUniform3ui);
        ASSIGN("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN("glProgramUniform4d", programUniform4d);
        ASSIGN("glProgramUniform4dv", programUniform4dv);
        ASSIGN("glProgramUniform4f", programUniform4f);
        ASSIGN("glProgramUniform4fv", programUniform4fv);
        ASSIGN("glProgramUniform4i", programUniform4i);
        ASSIGN("glProgramUniform4iv", programUniform4iv);
        ASSIGN("glProgramUniform4ui", programUniform4ui);
        ASSIGN("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN("glProgramUniformMatrix2dv", programUniformMatrix2dv);
        ASSIGN("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN("glProgramUniformMatrix2x3dv", programUniformMatrix2x3dv);
        ASSIGN("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN("glProgramUniformMatrix2x4dv", programUniformMatrix2x4dv);
        ASSIGN("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN("glProgramUniformMatrix3dv", programUniformMatrix3dv);
        ASSIGN("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN("glProgramUniformMatrix3x2dv", programUniformMatrix3x2dv);
        ASSIGN("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN("glProgramUniformMatrix3x4dv", programUniformMatrix3x4dv);
        ASSIGN("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN("glProgramUniformMatrix4dv", programUniformMatrix4dv);
        ASSIGN("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN("glProgramUniformMatrix4x2dv", programUniformMatrix4x2dv);
        ASSIGN("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN("glProgramUniformMatrix4x3dv", programUniformMatrix4x3dv);
        ASSIGN("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN("glScissorArrayv", scissorArrayv);
        ASSIGN("glScissorIndexed", scissorIndexed);
        ASSIGN("glScissorIndexedv", scissorIndexedv);
        ASSIGN("glShaderBinary", shaderBinary);
        ASSIGN("glUseProgramStages", useProgramStages);
        ASSIGN("glValidateProgramPipeline", validateProgramPipeline);
        ASSIGN("glVertexAttribL1d", vertexAttribL1d);
        ASSIGN("glVertexAttribL1dv", vertexAttribL1dv);
        ASSIGN("glVertexAttribL2d", vertexAttribL2d);
        ASSIGN("glVertexAttribL2dv", vertexAttribL2dv);
        ASSIGN("glVertexAttribL3d", vertexAttribL3d);
        ASSIGN("glVertexAttribL3dv", vertexAttribL3dv);
        ASSIGN("glVertexAttribL4d", vertexAttribL4d);
        ASSIGN("glVertexAttribL4dv", vertexAttribL4dv);
        ASSIGN("glVertexAttribLPointer", vertexAttribLPointer);
        ASSIGN("glViewportArrayv", viewportArrayv);
        ASSIGN("glViewportIndexedf", viewportIndexedf);
        ASSIGN("glViewportIndexedfv", viewportIndexedfv);
    }

    if (version >= gl::Version(4, 2))
    {
        ASSIGN("glBindImageTexture", bindImageTexture);
        ASSIGN("glDrawArraysInstancedBaseInstance", drawArraysInstancedBaseInstance);
        ASSIGN("glDrawElementsInstancedBaseInstance", drawElementsInstancedBaseInstance);
        ASSIGN("glDrawElementsInstancedBaseVertexBaseInstance",
               drawElementsInstancedBaseVertexBaseInstance);
        ASSIGN("glDrawTransformFeedbackInstanced", drawTransformFeedbackInstanced);
        ASSIGN("glDrawTransformFeedbackStreamInstanced", drawTransformFeedbackStreamInstanced);
        ASSIGN("glGetActiveAtomicCounterBufferiv", getActiveAtomicCounterBufferiv);
        ASSIGN("glGetInternalformativ", getInternalformativ);
        ASSIGN("glMemoryBarrier", memoryBarrier);
        ASSIGN("glTexStorage1D", texStorage1D);
        ASSIGN("glTexStorage2D", texStorage2D);
        ASSIGN("glTexStorage3D", texStorage3D);
    }

    if (version >= gl::Version(4, 3))
    {
        ASSIGN("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN("glClearBufferData", clearBufferData);
        ASSIGN("glClearBufferSubData", clearBufferSubData);
        ASSIGN("glCopyImageSubData", copyImageSubData);
        ASSIGN("glDebugMessageCallback", debugMessageCallback);
        ASSIGN("glDebugMessageControl", debugMessageControl);
        ASSIGN("glDebugMessageInsert", debugMessageInsert);
        ASSIGN("glDispatchCompute", dispatchCompute);
        ASSIGN("glDispatchComputeIndirect", dispatchComputeIndirect);
        ASSIGN("glFramebufferParameteri", framebufferParameteri);
        ASSIGN("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN("glGetFramebufferParameteriv", getFramebufferParameteriv);
        ASSIGN("glGetInternalformati64v", getInternalformati64v);
        ASSIGN("glGetPointerv", getPointerv);
        ASSIGN("glGetObjectLabel", getObjectLabel);
        ASSIGN("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN("glGetProgramResourceLocationIndex", getProgramResourceLocationIndex);
        ASSIGN("glGetProgramResourceName", getProgramResourceName);
        ASSIGN("glGetProgramResourceiv", getProgramResourceiv);
        ASSIGN("glInvalidateBufferData", invalidateBufferData);
        ASSIGN("glInvalidateBufferSubData", invalidateBufferSubData);
        ASSIGN("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN("glInvalidateTexImage", invalidateTexImage);
        ASSIGN("glInvalidateTexSubImage", invalidateTexSubImage);
        ASSIGN("glMultiDrawArraysIndirect", multiDrawArraysIndirect);
        ASSIGN("glMultiDrawElementsIndirect", multiDrawElementsIndirect);
        ASSIGN("glObjectLabel", objectLabel);
        ASSIGN("glObjectPtrLabel", objectPtrLabel);
        ASSIGN("glPopDebugGroup", popDebugGroup);
        ASSIGN("glPushDebugGroup", pushDebugGroup);
        ASSIGN("glShaderStorageBlockBinding", shaderStorageBlockBinding);
        ASSIGN("glTexBufferRange", texBufferRange);
        ASSIGN("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN("glTexStorage3DMultisample", texStorage3DMultisample);
        ASSIGN("glTextureView", textureView);
        ASSIGN("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN("glVertexAttribLFormat", vertexAttribLFormat);
        ASSIGN("glVertexBindingDivisor", vertexBindingDivisor);
    }

    if (version >= gl::Version(4, 4))
    {
        ASSIGN("glBindBuffersBase", bindBuffersBase);
        ASSIGN("glBindBuffersRange", bindBuffersRange);
        ASSIGN("glBindImageTextures", bindImageTextures);
        ASSIGN("glBindSamplers", bindSamplers);
        ASSIGN("glBindTextures", bindTextures);
        ASSIGN("glBindVertexBuffers", bindVertexBuffers);
        ASSIGN("glBufferStorage", bufferStorage);
        ASSIGN("glClearTexImage", clearTexImage);
        ASSIGN("glClearTexSubImage", clearTexSubImage);
    }

    if (version >= gl::Version(4, 5))
    {
        ASSIGN("glBindTextureUnit", bindTextureUnit);
        ASSIGN("glBlitNamedFramebuffer", blitNamedFramebuffer);
        ASSIGN("glCheckNamedFramebufferStatus", checkNamedFramebufferStatus);
        ASSIGN("glClearNamedBufferData", clearNamedBufferData);
        ASSIGN("glClearNamedBufferSubData", clearNamedBufferSubData);
        ASSIGN("glClearNamedFramebufferfi", clearNamedFramebufferfi);
        ASSIGN("glClearNamedFramebufferfv", clearNamedFramebufferfv);
        ASSIGN("glClearNamedFramebufferiv", clearNamedFramebufferiv);
        ASSIGN("glClearNamedFramebufferuiv", clearNamedFramebufferuiv);
        ASSIGN("glClipControl", clipControl);
        ASSIGN("glCompressedTextureSubImage1D", compressedTextureSubImage1D);
        ASSIGN("glCompressedTextureSubImage2D", compressedTextureSubImage2D);
        ASSIGN("glCompressedTextureSubImage3D", compressedTextureSubImage3D);
        ASSIGN("glCopyNamedBufferSubData", copyNamedBufferSubData);
        ASSIGN("glCopyTextureSubImage1D", copyTextureSubImage1D);
        ASSIGN("glCopyTextureSubImage2D", copyTextureSubImage2D);
        ASSIGN("glCopyTextureSubImage3D", copyTextureSubImage3D);
        ASSIGN("glCreateBuffers", createBuffers);
        ASSIGN("glCreateFramebuffers", createFramebuffers);
        ASSIGN("glCreateProgramPipelines", createProgramPipelines);
        ASSIGN("glCreateQueries", createQueries);
        ASSIGN("glCreateRenderbuffers", createRenderbuffers);
        ASSIGN("glCreateSamplers", createSamplers);
        ASSIGN("glCreateTextures", createTextures);
        ASSIGN("glCreateTransformFeedbacks", createTransformFeedbacks);
        ASSIGN("glCreateVertexArrays", createVertexArrays);
        ASSIGN("glDisableVertexArrayAttrib", disableVertexArrayAttrib);
        ASSIGN("glEnableVertexArrayAttrib", enableVertexArrayAttrib);
        ASSIGN("glFlushMappedNamedBufferRange", flushMappedNamedBufferRange);
        ASSIGN("glGenerateTextureMipmap", generateTextureMipmap);
        ASSIGN("glGetCompressedTextureImage", getCompressedTextureImage);
        ASSIGN("glGetCompressedTextureSubImage", getCompressedTextureSubImage);
        ASSIGN("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN("glGetNamedBufferParameteri64v", getNamedBufferParameteri64v);
        ASSIGN("glGetNamedBufferParameteriv", getNamedBufferParameteriv);
        ASSIGN("glGetNamedBufferPointerv", getNamedBufferPointerv);
        ASSIGN("glGetNamedBufferSubData", getNamedBufferSubData);
        ASSIGN("glGetNamedFramebufferAttachmentParameteriv",
               getNamedFramebufferAttachmentParameteriv);
        ASSIGN("glGetNamedFramebufferParameteriv", getNamedFramebufferParameteriv);
        ASSIGN("glGetNamedRenderbufferParameteriv", getNamedRenderbufferParameteriv);
        ASSIGN("glGetQueryBufferObjecti64v", getQueryBufferObjecti64v);
        ASSIGN("glGetQueryBufferObjectiv", getQueryBufferObjectiv);
        ASSIGN("glGetQueryBufferObjectui64v", getQueryBufferObjectui64v);
        ASSIGN("glGetQueryBufferObjectuiv", getQueryBufferObjectuiv);
        ASSIGN("glGetTextureImage", getTextureImage);
        ASSIGN("glGetTextureLevelParameterfv", getTextureLevelParameterfv);
        ASSIGN("glGetTextureLevelParameteriv", getTextureLevelParameteriv);
        ASSIGN("glGetTextureParameterIiv", getTextureParameterIiv);
        ASSIGN("glGetTextureParameterIuiv", getTextureParameterIuiv);
        ASSIGN("glGetTextureParameterfv", getTextureParameterfv);
        ASSIGN("glGetTextureParameteriv", getTextureParameteriv);
        ASSIGN("glGetTextureSubImage", getTextureSubImage);
        ASSIGN("glGetTransformFeedbacki64_v", getTransformFeedbacki64_v);
        ASSIGN("glGetTransformFeedbacki_v", getTransformFeedbacki_v);
        ASSIGN("glGetTransformFeedbackiv", getTransformFeedbackiv);
        ASSIGN("glGetVertexArrayIndexed64iv", getVertexArrayIndexed64iv);
        ASSIGN("glGetVertexArrayIndexediv", getVertexArrayIndexediv);
        ASSIGN("glGetVertexArrayiv", getVertexArrayiv);
        ASSIGN("glGetnCompressedTexImage", getnCompressedTexImage);
        ASSIGN("glGetnTexImage", getnTexImage);
        ASSIGN("glGetnUniformdv", getnUniformdv);
        ASSIGN("glGetnUniformfv", getnUniformfv);
        ASSIGN("glGetnUniformiv", getnUniformiv);
        ASSIGN("glGetnUniformuiv", getnUniformuiv);
        ASSIGN("glInvalidateNamedFramebufferData", invalidateNamedFramebufferData);
        ASSIGN("glInvalidateNamedFramebufferSubData", invalidateNamedFramebufferSubData);
        ASSIGN("glMapNamedBuffer", mapNamedBuffer);
        ASSIGN("glMapNamedBufferRange", mapNamedBufferRange);
        ASSIGN("glMemoryBarrierByRegion", memoryBarrierByRegion);
        ASSIGN("glNamedBufferData", namedBufferData);
        ASSIGN("glNamedBufferStorage", namedBufferStorage);
        ASSIGN("glNamedBufferSubData", namedBufferSubData);
        ASSIGN("glNamedFramebufferDrawBuffer", namedFramebufferDrawBuffer);
        ASSIGN("glNamedFramebufferDrawBuffers", namedFramebufferDrawBuffers);
        ASSIGN("glNamedFramebufferParameteri", namedFramebufferParameteri);
        ASSIGN("glNamedFramebufferReadBuffer", namedFramebufferReadBuffer);
        ASSIGN("glNamedFramebufferRenderbuffer", namedFramebufferRenderbuffer);
        ASSIGN("glNamedFramebufferTexture", namedFramebufferTexture);
        ASSIGN("glNamedFramebufferTextureLayer", namedFramebufferTextureLayer);
        ASSIGN("glNamedRenderbufferStorage", namedRenderbufferStorage);
        ASSIGN("glNamedRenderbufferStorageMultisample", namedRenderbufferStorageMultisample);
        ASSIGN("glReadnPixels", readnPixels);
        ASSIGN("glTextureBarrier", textureBarrier);
        ASSIGN("glTextureBuffer", textureBuffer);
        ASSIGN("glTextureBufferRange", textureBufferRange);
        ASSIGN("glTextureParameterIiv", textureParameterIiv);
        ASSIGN("glTextureParameterIuiv", textureParameterIuiv);
        ASSIGN("glTextureParameterf", textureParameterf);
        ASSIGN("glTextureParameterfv", textureParameterfv);
        ASSIGN("glTextureParameteri", textureParameteri);
        ASSIGN("glTextureParameteriv", textureParameteriv);
        ASSIGN("glTextureStorage1D", textureStorage1D);
        ASSIGN("glTextureStorage2D", textureStorage2D);
        ASSIGN("glTextureStorage2DMultisample", textureStorage2DMultisample);
        ASSIGN("glTextureStorage3D", textureStorage3D);
        ASSIGN("glTextureStorage3DMultisample", textureStorage3DMultisample);
        ASSIGN("glTextureSubImage1D", textureSubImage1D);
        ASSIGN("glTextureSubImage2D", textureSubImage2D);
        ASSIGN("glTextureSubImage3D", textureSubImage3D);
        ASSIGN("glTransformFeedbackBufferBase", transformFeedbackBufferBase);
        ASSIGN("glTransformFeedbackBufferRange", transformFeedbackBufferRange);
        ASSIGN("glUnmapNamedBuffer", unmapNamedBuffer);
        ASSIGN("glVertexArrayAttribBinding", vertexArrayAttribBinding);
        ASSIGN("glVertexArrayAttribFormat", vertexArrayAttribFormat);
        ASSIGN("glVertexArrayAttribIFormat", vertexArrayAttribIFormat);
        ASSIGN("glVertexArrayAttribLFormat", vertexArrayAttribLFormat);
        ASSIGN("glVertexArrayBindingDivisor", vertexArrayBindingDivisor);
        ASSIGN("glVertexArrayElementBuffer", vertexArrayElementBuffer);
        ASSIGN("glVertexArrayVertexBuffer", vertexArrayVertexBuffer);
        ASSIGN("glVertexArrayVertexBuffers", vertexArrayVertexBuffers);
    }

    if (extensions.count("GL_ARB_ES2_compatibility") != 0)
    {
        ASSIGN("glClearDepthf", clearDepthf);
        ASSIGN("glDepthRangef", depthRangef);
        ASSIGN("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN("glShaderBinary", shaderBinary);
    }

    if (extensions.count("GL_ARB_ES3_1_compatibility") != 0)
    {
        ASSIGN("glMemoryBarrierByRegion", memoryBarrierByRegion);
    }

    if (extensions.count("GL_ARB_base_instance") != 0)
    {
        ASSIGN("glDrawArraysInstancedBaseInstance", drawArraysInstancedBaseInstance);
        ASSIGN("glDrawElementsInstancedBaseInstance", drawElementsInstancedBaseInstance);
        ASSIGN("glDrawElementsInstancedBaseVertexBaseInstance",
               drawElementsInstancedBaseVertexBaseInstance);
    }

    if (extensions.count("GL_ARB_blend_func_extended") != 0)
    {
        ASSIGN("glBindFragDataLocationIndexed", bindFragDataLocationIndexed);
        ASSIGN("glGetFragDataIndex", getFragDataIndex);
    }

    if (extensions.count("GL_ARB_buffer_storage") != 0)
    {
        ASSIGN("glBufferStorage", bufferStorage);
    }

    if (extensions.count("GL_ARB_clear_buffer_object") != 0)
    {
        ASSIGN("glClearBufferData", clearBufferData);
        ASSIGN("glClearBufferSubData", clearBufferSubData);
    }

    if (extensions.count("GL_ARB_clear_texture") != 0)
    {
        ASSIGN("glClearTexImage", clearTexImage);
        ASSIGN("glClearTexSubImage", clearTexSubImage);
    }

    if (extensions.count("GL_ARB_clip_control") != 0)
    {
        ASSIGN("glClipControl", clipControl);
    }

    if (extensions.count("GL_ARB_compute_shader") != 0)
    {
        ASSIGN("glDispatchCompute", dispatchCompute);
        ASSIGN("glDispatchComputeIndirect", dispatchComputeIndirect);
    }

    if (extensions.count("GL_ARB_copy_buffer") != 0)
    {
        ASSIGN("glCopyBufferSubData", copyBufferSubData);
    }

    if (extensions.count("GL_ARB_copy_image") != 0)
    {
        ASSIGN("glCopyImageSubData", copyImageSubData);
    }

    if (extensions.count("GL_ARB_direct_state_access") != 0)
    {
        ASSIGN("glBindTextureUnit", bindTextureUnit);
        ASSIGN("glBlitNamedFramebuffer", blitNamedFramebuffer);
        ASSIGN("glCheckNamedFramebufferStatus", checkNamedFramebufferStatus);
        ASSIGN("glClearNamedBufferData", clearNamedBufferData);
        ASSIGN("glClearNamedBufferSubData", clearNamedBufferSubData);
        ASSIGN("glClearNamedFramebufferfi", clearNamedFramebufferfi);
        ASSIGN("glClearNamedFramebufferfv", clearNamedFramebufferfv);
        ASSIGN("glClearNamedFramebufferiv", clearNamedFramebufferiv);
        ASSIGN("glClearNamedFramebufferuiv", clearNamedFramebufferuiv);
        ASSIGN("glCompressedTextureSubImage1D", compressedTextureSubImage1D);
        ASSIGN("glCompressedTextureSubImage2D", compressedTextureSubImage2D);
        ASSIGN("glCompressedTextureSubImage3D", compressedTextureSubImage3D);
        ASSIGN("glCopyNamedBufferSubData", copyNamedBufferSubData);
        ASSIGN("glCopyTextureSubImage1D", copyTextureSubImage1D);
        ASSIGN("glCopyTextureSubImage2D", copyTextureSubImage2D);
        ASSIGN("glCopyTextureSubImage3D", copyTextureSubImage3D);
        ASSIGN("glCreateBuffers", createBuffers);
        ASSIGN("glCreateFramebuffers", createFramebuffers);
        ASSIGN("glCreateProgramPipelines", createProgramPipelines);
        ASSIGN("glCreateQueries", createQueries);
        ASSIGN("glCreateRenderbuffers", createRenderbuffers);
        ASSIGN("glCreateSamplers", createSamplers);
        ASSIGN("glCreateTextures", createTextures);
        ASSIGN("glCreateTransformFeedbacks", createTransformFeedbacks);
        ASSIGN("glCreateVertexArrays", createVertexArrays);
        ASSIGN("glDisableVertexArrayAttrib", disableVertexArrayAttrib);
        ASSIGN("glEnableVertexArrayAttrib", enableVertexArrayAttrib);
        ASSIGN("glFlushMappedNamedBufferRange", flushMappedNamedBufferRange);
        ASSIGN("glGenerateTextureMipmap", generateTextureMipmap);
        ASSIGN("glGetCompressedTextureImage", getCompressedTextureImage);
        ASSIGN("glGetNamedBufferParameteri64v", getNamedBufferParameteri64v);
        ASSIGN("glGetNamedBufferParameteriv", getNamedBufferParameteriv);
        ASSIGN("glGetNamedBufferPointerv", getNamedBufferPointerv);
        ASSIGN("glGetNamedBufferSubData", getNamedBufferSubData);
        ASSIGN("glGetNamedFramebufferAttachmentParameteriv",
               getNamedFramebufferAttachmentParameteriv);
        ASSIGN("glGetNamedFramebufferParameteriv", getNamedFramebufferParameteriv);
        ASSIGN("glGetNamedRenderbufferParameteriv", getNamedRenderbufferParameteriv);
        ASSIGN("glGetQueryBufferObjecti64v", getQueryBufferObjecti64v);
        ASSIGN("glGetQueryBufferObjectiv", getQueryBufferObjectiv);
        ASSIGN("glGetQueryBufferObjectui64v", getQueryBufferObjectui64v);
        ASSIGN("glGetQueryBufferObjectuiv", getQueryBufferObjectuiv);
        ASSIGN("glGetTextureImage", getTextureImage);
        ASSIGN("glGetTextureLevelParameterfv", getTextureLevelParameterfv);
        ASSIGN("glGetTextureLevelParameteriv", getTextureLevelParameteriv);
        ASSIGN("glGetTextureParameterIiv", getTextureParameterIiv);
        ASSIGN("glGetTextureParameterIuiv", getTextureParameterIuiv);
        ASSIGN("glGetTextureParameterfv", getTextureParameterfv);
        ASSIGN("glGetTextureParameteriv", getTextureParameteriv);
        ASSIGN("glGetTransformFeedbacki64_v", getTransformFeedbacki64_v);
        ASSIGN("glGetTransformFeedbacki_v", getTransformFeedbacki_v);
        ASSIGN("glGetTransformFeedbackiv", getTransformFeedbackiv);
        ASSIGN("glGetVertexArrayIndexed64iv", getVertexArrayIndexed64iv);
        ASSIGN("glGetVertexArrayIndexediv", getVertexArrayIndexediv);
        ASSIGN("glGetVertexArrayiv", getVertexArrayiv);
        ASSIGN("glInvalidateNamedFramebufferData", invalidateNamedFramebufferData);
        ASSIGN("glInvalidateNamedFramebufferSubData", invalidateNamedFramebufferSubData);
        ASSIGN("glMapNamedBuffer", mapNamedBuffer);
        ASSIGN("glMapNamedBufferRange", mapNamedBufferRange);
        ASSIGN("glNamedBufferData", namedBufferData);
        ASSIGN("glNamedBufferStorage", namedBufferStorage);
        ASSIGN("glNamedBufferSubData", namedBufferSubData);
        ASSIGN("glNamedFramebufferDrawBuffer", namedFramebufferDrawBuffer);
        ASSIGN("glNamedFramebufferDrawBuffers", namedFramebufferDrawBuffers);
        ASSIGN("glNamedFramebufferParameteri", namedFramebufferParameteri);
        ASSIGN("glNamedFramebufferReadBuffer", namedFramebufferReadBuffer);
        ASSIGN("glNamedFramebufferRenderbuffer", namedFramebufferRenderbuffer);
        ASSIGN("glNamedFramebufferTexture", namedFramebufferTexture);
        ASSIGN("glNamedFramebufferTextureLayer", namedFramebufferTextureLayer);
        ASSIGN("glNamedRenderbufferStorage", namedRenderbufferStorage);
        ASSIGN("glNamedRenderbufferStorageMultisample", namedRenderbufferStorageMultisample);
        ASSIGN("glTextureBuffer", textureBuffer);
        ASSIGN("glTextureBufferRange", textureBufferRange);
        ASSIGN("glTextureParameterIiv", textureParameterIiv);
        ASSIGN("glTextureParameterIuiv", textureParameterIuiv);
        ASSIGN("glTextureParameterf", textureParameterf);
        ASSIGN("glTextureParameterfv", textureParameterfv);
        ASSIGN("glTextureParameteri", textureParameteri);
        ASSIGN("glTextureParameteriv", textureParameteriv);
        ASSIGN("glTextureStorage1D", textureStorage1D);
        ASSIGN("glTextureStorage2D", textureStorage2D);
        ASSIGN("glTextureStorage2DMultisample", textureStorage2DMultisample);
        ASSIGN("glTextureStorage3D", textureStorage3D);
        ASSIGN("glTextureStorage3DMultisample", textureStorage3DMultisample);
        ASSIGN("glTextureSubImage1D", textureSubImage1D);
        ASSIGN("glTextureSubImage2D", textureSubImage2D);
        ASSIGN("glTextureSubImage3D", textureSubImage3D);
        ASSIGN("glTransformFeedbackBufferBase", transformFeedbackBufferBase);
        ASSIGN("glTransformFeedbackBufferRange", transformFeedbackBufferRange);
        ASSIGN("glUnmapNamedBuffer", unmapNamedBuffer);
        ASSIGN("glVertexArrayAttribBinding", vertexArrayAttribBinding);
        ASSIGN("glVertexArrayAttribFormat", vertexArrayAttribFormat);
        ASSIGN("glVertexArrayAttribIFormat", vertexArrayAttribIFormat);
        ASSIGN("glVertexArrayAttribLFormat", vertexArrayAttribLFormat);
        ASSIGN("glVertexArrayBindingDivisor", vertexArrayBindingDivisor);
        ASSIGN("glVertexArrayElementBuffer", vertexArrayElementBuffer);
        ASSIGN("glVertexArrayVertexBuffer", vertexArrayVertexBuffer);
        ASSIGN("glVertexArrayVertexBuffers", vertexArrayVertexBuffers);
    }

    if (extensions.count("GL_ARB_draw_elements_base_vertex") != 0)
    {
        ASSIGN("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN("glMultiDrawElementsBaseVertex", multiDrawElementsBaseVertex);
    }

    if (extensions.count("GL_ARB_draw_indirect") != 0)
    {
        ASSIGN("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN("glDrawElementsIndirect", drawElementsIndirect);
    }

    if (extensions.count("GL_ARB_framebuffer_no_attachments") != 0)
    {
        ASSIGN("glFramebufferParameteri", framebufferParameteri);
        ASSIGN("glGetFramebufferParameteriv", getFramebufferParameteriv);
    }

    if (extensions.count("GL_ARB_framebuffer_object") != 0)
    {
        ASSIGN("glBindFramebuffer", bindFramebuffer);
        ASSIGN("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN("glBlitFramebuffer", blitFramebuffer);
        ASSIGN("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN("glFramebufferTexture1D", framebufferTexture1D);
        ASSIGN("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN("glFramebufferTexture3D", framebufferTexture3D);
        ASSIGN("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN("glGenFramebuffers", genFramebuffers);
        ASSIGN("glGenRenderbuffers", genRenderbuffers);
        ASSIGN("glGenerateMipmap", generateMipmap);
        ASSIGN("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN("glIsFramebuffer", isFramebuffer);
        ASSIGN("glIsRenderbuffer", isRenderbuffer);
        ASSIGN("glRenderbufferStorage", renderbufferStorage);
        ASSIGN("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
    }

    if (extensions.count("GL_ARB_get_program_binary") != 0)
    {
        ASSIGN("glGetProgramBinary", getProgramBinary);
        ASSIGN("glProgramBinary", programBinary);
        ASSIGN("glProgramParameteri", programParameteri);
    }

    if (extensions.count("GL_ARB_get_texture_sub_image") != 0)
    {
        ASSIGN("glGetCompressedTextureSubImage", getCompressedTextureSubImage);
        ASSIGN("glGetTextureSubImage", getTextureSubImage);
    }

    if (extensions.count("GL_ARB_gpu_shader_fp64") != 0)
    {
        ASSIGN("glGetUniformdv", getUniformdv);
        ASSIGN("glUniform1d", uniform1d);
        ASSIGN("glUniform1dv", uniform1dv);
        ASSIGN("glUniform2d", uniform2d);
        ASSIGN("glUniform2dv", uniform2dv);
        ASSIGN("glUniform3d", uniform3d);
        ASSIGN("glUniform3dv", uniform3dv);
        ASSIGN("glUniform4d", uniform4d);
        ASSIGN("glUniform4dv", uniform4dv);
        ASSIGN("glUniformMatrix2dv", uniformMatrix2dv);
        ASSIGN("glUniformMatrix2x3dv", uniformMatrix2x3dv);
        ASSIGN("glUniformMatrix2x4dv", uniformMatrix2x4dv);
        ASSIGN("glUniformMatrix3dv", uniformMatrix3dv);
        ASSIGN("glUniformMatrix3x2dv", uniformMatrix3x2dv);
        ASSIGN("glUniformMatrix3x4dv", uniformMatrix3x4dv);
        ASSIGN("glUniformMatrix4dv", uniformMatrix4dv);
        ASSIGN("glUniformMatrix4x2dv", uniformMatrix4x2dv);
        ASSIGN("glUniformMatrix4x3dv", uniformMatrix4x3dv);
    }

    if (extensions.count("GL_ARB_imaging") != 0)
    {
        ASSIGN("glBlendColor", blendColor);
        ASSIGN("glBlendEquation", blendEquation);
    }

    if (extensions.count("GL_ARB_internalformat_query") != 0)
    {
        ASSIGN("glGetInternalformativ", getInternalformativ);
    }

    if (extensions.count("GL_ARB_internalformat_query2") != 0)
    {
        ASSIGN("glGetInternalformati64v", getInternalformati64v);
    }

    if (extensions.count("GL_ARB_invalidate_subdata") != 0)
    {
        ASSIGN("glInvalidateBufferData", invalidateBufferData);
        ASSIGN("glInvalidateBufferSubData", invalidateBufferSubData);
        ASSIGN("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN("glInvalidateTexImage", invalidateTexImage);
        ASSIGN("glInvalidateTexSubImage", invalidateTexSubImage);
    }

    if (extensions.count("GL_ARB_map_buffer_range") != 0)
    {
        ASSIGN("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN("glMapBufferRange", mapBufferRange);
    }

    if (extensions.count("GL_ARB_multi_bind") != 0)
    {
        ASSIGN("glBindBuffersBase", bindBuffersBase);
        ASSIGN("glBindBuffersRange", bindBuffersRange);
        ASSIGN("glBindImageTextures", bindImageTextures);
        ASSIGN("glBindSamplers", bindSamplers);
        ASSIGN("glBindTextures", bindTextures);
        ASSIGN("glBindVertexBuffers", bindVertexBuffers);
    }

    if (extensions.count("GL_ARB_multi_draw_indirect") != 0)
    {
        ASSIGN("glMultiDrawArraysIndirect", multiDrawArraysIndirect);
        ASSIGN("glMultiDrawElementsIndirect", multiDrawElementsIndirect);
    }

    if (extensions.count("GL_ARB_program_interface_query") != 0)
    {
        ASSIGN("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN("glGetProgramResourceLocationIndex", getProgramResourceLocationIndex);
        ASSIGN("glGetProgramResourceName", getProgramResourceName);
        ASSIGN("glGetProgramResourceiv", getProgramResourceiv);
    }

    if (extensions.count("GL_ARB_provoking_vertex") != 0)
    {
        ASSIGN("glProvokingVertex", provokingVertex);
    }

    if (extensions.count("GL_ARB_sampler_objects") != 0)
    {
        ASSIGN("glBindSampler", bindSampler);
        ASSIGN("glDeleteSamplers", deleteSamplers);
        ASSIGN("glGenSamplers", genSamplers);
        ASSIGN("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN("glIsSampler", isSampler);
        ASSIGN("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN("glSamplerParameterf", samplerParameterf);
        ASSIGN("glSamplerParameterfv", samplerParameterfv);
        ASSIGN("glSamplerParameteri", samplerParameteri);
        ASSIGN("glSamplerParameteriv", samplerParameteriv);
    }

    if (extensions.count("GL_ARB_separate_shader_objects") != 0)
    {
        ASSIGN("glActiveShaderProgram", activeShaderProgram);
        ASSIGN("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN("glGenProgramPipelines", genProgramPipelines);
        ASSIGN("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN("glIsProgramPipeline", isProgramPipeline);
        ASSIGN("glProgramUniform1d", programUniform1d);
        ASSIGN("glProgramUniform1dv", programUniform1dv);
        ASSIGN("glProgramUniform1f", programUniform1f);
        ASSIGN("glProgramUniform1fv", programUniform1fv);
        ASSIGN("glProgramUniform1i", programUniform1i);
        ASSIGN("glProgramUniform1iv", programUniform1iv);
        ASSIGN("glProgramUniform1ui", programUniform1ui);
        ASSIGN("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN("glProgramUniform2d", programUniform2d);
        ASSIGN("glProgramUniform2dv", programUniform2dv);
        ASSIGN("glProgramUniform2f", programUniform2f);
        ASSIGN("glProgramUniform2fv", programUniform2fv);
        ASSIGN("glProgramUniform2i", programUniform2i);
        ASSIGN("glProgramUniform2iv", programUniform2iv);
        ASSIGN("glProgramUniform2ui", programUniform2ui);
        ASSIGN("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN("glProgramUniform3d", programUniform3d);
        ASSIGN("glProgramUniform3dv", programUniform3dv);
        ASSIGN("glProgramUniform3f", programUniform3f);
        ASSIGN("glProgramUniform3fv", programUniform3fv);
        ASSIGN("glProgramUniform3i", programUniform3i);
        ASSIGN("glProgramUniform3iv", programUniform3iv);
        ASSIGN("glProgramUniform3ui", programUniform3ui);
        ASSIGN("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN("glProgramUniform4d", programUniform4d);
        ASSIGN("glProgramUniform4dv", programUniform4dv);
        ASSIGN("glProgramUniform4f", programUniform4f);
        ASSIGN("glProgramUniform4fv", programUniform4fv);
        ASSIGN("glProgramUniform4i", programUniform4i);
        ASSIGN("glProgramUniform4iv", programUniform4iv);
        ASSIGN("glProgramUniform4ui", programUniform4ui);
        ASSIGN("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN("glProgramUniformMatrix2dv", programUniformMatrix2dv);
        ASSIGN("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN("glProgramUniformMatrix2x3dv", programUniformMatrix2x3dv);
        ASSIGN("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN("glProgramUniformMatrix2x4dv", programUniformMatrix2x4dv);
        ASSIGN("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN("glProgramUniformMatrix3dv", programUniformMatrix3dv);
        ASSIGN("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN("glProgramUniformMatrix3x2dv", programUniformMatrix3x2dv);
        ASSIGN("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN("glProgramUniformMatrix3x4dv", programUniformMatrix3x4dv);
        ASSIGN("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN("glProgramUniformMatrix4dv", programUniformMatrix4dv);
        ASSIGN("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN("glProgramUniformMatrix4x2dv", programUniformMatrix4x2dv);
        ASSIGN("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN("glProgramUniformMatrix4x3dv", programUniformMatrix4x3dv);
        ASSIGN("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN("glUseProgramStages", useProgramStages);
        ASSIGN("glValidateProgramPipeline", validateProgramPipeline);
    }

    if (extensions.count("GL_ARB_shader_atomic_counters") != 0)
    {
        ASSIGN("glGetActiveAtomicCounterBufferiv", getActiveAtomicCounterBufferiv);
    }

    if (extensions.count("GL_ARB_shader_image_load_store") != 0)
    {
        ASSIGN("glBindImageTexture", bindImageTexture);
        ASSIGN("glMemoryBarrier", memoryBarrier);
    }

    if (extensions.count("GL_ARB_shader_storage_buffer_object") != 0)
    {
        ASSIGN("glShaderStorageBlockBinding", shaderStorageBlockBinding);
    }

    if (extensions.count("GL_ARB_shader_subroutine") != 0)
    {
        ASSIGN("glGetActiveSubroutineName", getActiveSubroutineName);
        ASSIGN("glGetActiveSubroutineUniformName", getActiveSubroutineUniformName);
        ASSIGN("glGetActiveSubroutineUniformiv", getActiveSubroutineUniformiv);
        ASSIGN("glGetProgramStageiv", getProgramStageiv);
        ASSIGN("glGetSubroutineIndex", getSubroutineIndex);
        ASSIGN("glGetSubroutineUniformLocation", getSubroutineUniformLocation);
        ASSIGN("glGetUniformSubroutineuiv", getUniformSubroutineuiv);
        ASSIGN("glUniformSubroutinesuiv", uniformSubroutinesuiv);
    }

    if (extensions.count("GL_ARB_sync") != 0)
    {
        ASSIGN("glClientWaitSync", clientWaitSync);
        ASSIGN("glDeleteSync", deleteSync);
        ASSIGN("glFenceSync", fenceSync);
        ASSIGN("glGetInteger64v", getInteger64v);
        ASSIGN("glGetSynciv", getSynciv);
        ASSIGN("glIsSync", isSync);
        ASSIGN("glWaitSync", waitSync);
    }

    if (extensions.count("GL_ARB_tessellation_shader") != 0)
    {
        ASSIGN("glPatchParameterfv", patchParameterfv);
        ASSIGN("glPatchParameteri", patchParameteri);
    }

    if (extensions.count("GL_ARB_texture_barrier") != 0)
    {
        ASSIGN("glTextureBarrier", textureBarrier);
    }

    if (extensions.count("GL_ARB_texture_buffer_range") != 0)
    {
        ASSIGN("glTexBufferRange", texBufferRange);
    }

    if (extensions.count("GL_ARB_texture_multisample") != 0)
    {
        ASSIGN("glGetMultisamplefv", getMultisamplefv);
        ASSIGN("glSampleMaski", sampleMaski);
        ASSIGN("glTexImage2DMultisample", texImage2DMultisample);
        ASSIGN("glTexImage3DMultisample", texImage3DMultisample);
    }

    if (extensions.count("GL_ARB_texture_storage") != 0)
    {
        ASSIGN("glTexStorage1D", texStorage1D);
        ASSIGN("glTexStorage2D", texStorage2D);
        ASSIGN("glTexStorage3D", texStorage3D);
    }

    if (extensions.count("GL_ARB_texture_storage_multisample") != 0)
    {
        ASSIGN("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN("glTexStorage3DMultisample", texStorage3DMultisample);
    }

    if (extensions.count("GL_ARB_texture_view") != 0)
    {
        ASSIGN("glTextureView", textureView);
    }

    if (extensions.count("GL_ARB_timer_query") != 0)
    {
        ASSIGN("glGetQueryObjecti64v", getQueryObjecti64v);
        ASSIGN("glGetQueryObjectui64v", getQueryObjectui64v);
        ASSIGN("glQueryCounter", queryCounter);
    }

    if (extensions.count("GL_ARB_transform_feedback2") != 0)
    {
        ASSIGN("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN("glDrawTransformFeedback", drawTransformFeedback);
        ASSIGN("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN("glIsTransformFeedback", isTransformFeedback);
        ASSIGN("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN("glResumeTransformFeedback", resumeTransformFeedback);
    }

    if (extensions.count("GL_ARB_transform_feedback3") != 0)
    {
        ASSIGN("glBeginQueryIndexed", beginQueryIndexed);
        ASSIGN("glDrawTransformFeedbackStream", drawTransformFeedbackStream);
        ASSIGN("glEndQueryIndexed", endQueryIndexed);
        ASSIGN("glGetQueryIndexediv", getQueryIndexediv);
    }

    if (extensions.count("GL_ARB_transform_feedback_instanced") != 0)
    {
        ASSIGN("glDrawTransformFeedbackInstanced", drawTransformFeedbackInstanced);
        ASSIGN("glDrawTransformFeedbackStreamInstanced", drawTransformFeedbackStreamInstanced);
    }

    if (extensions.count("GL_ARB_uniform_buffer_object") != 0)
    {
        ASSIGN("glBindBufferBase", bindBufferBase);
        ASSIGN("glBindBufferRange", bindBufferRange);
        ASSIGN("glGetIntegeri_v", getIntegeri_v);
        ASSIGN("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN("glGetActiveUniformName", getActiveUniformName);
        ASSIGN("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN("glGetUniformIndices", getUniformIndices);
        ASSIGN("glUniformBlockBinding", uniformBlockBinding);
    }

    if (extensions.count("GL_ARB_vertex_array_object") != 0)
    {
        ASSIGN("glBindVertexArray", bindVertexArray);
        ASSIGN("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN("glGenVertexArrays", genVertexArrays);
        ASSIGN("glIsVertexArray", isVertexArray);
    }

    if (extensions.count("GL_ARB_vertex_attrib_64bit") != 0)
    {
        ASSIGN("glGetVertexAttribLdv", getVertexAttribLdv);
        ASSIGN("glVertexAttribL1d", vertexAttribL1d);
        ASSIGN("glVertexAttribL1dv", vertexAttribL1dv);
        ASSIGN("glVertexAttribL2d", vertexAttribL2d);
        ASSIGN("glVertexAttribL2dv", vertexAttribL2dv);
        ASSIGN("glVertexAttribL3d", vertexAttribL3d);
        ASSIGN("glVertexAttribL3dv", vertexAttribL3dv);
        ASSIGN("glVertexAttribL4d", vertexAttribL4d);
        ASSIGN("glVertexAttribL4dv", vertexAttribL4dv);
        ASSIGN("glVertexAttribLPointer", vertexAttribLPointer);
    }

    if (extensions.count("GL_ARB_vertex_attrib_binding") != 0)
    {
        ASSIGN("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN("glVertexAttribLFormat", vertexAttribLFormat);
        ASSIGN("glVertexBindingDivisor", vertexBindingDivisor);
    }

    if (extensions.count("GL_ARB_vertex_type_2_10_10_10_rev") != 0)
    {
        ASSIGN("glVertexAttribP1ui", vertexAttribP1ui);
        ASSIGN("glVertexAttribP1uiv", vertexAttribP1uiv);
        ASSIGN("glVertexAttribP2ui", vertexAttribP2ui);
        ASSIGN("glVertexAttribP2uiv", vertexAttribP2uiv);
        ASSIGN("glVertexAttribP3ui", vertexAttribP3ui);
        ASSIGN("glVertexAttribP3uiv", vertexAttribP3uiv);
        ASSIGN("glVertexAttribP4ui", vertexAttribP4ui);
        ASSIGN("glVertexAttribP4uiv", vertexAttribP4uiv);
    }

    if (extensions.count("GL_ARB_viewport_array") != 0)
    {
        ASSIGN("glDepthRangeArrayv", depthRangeArrayv);
        ASSIGN("glDepthRangeIndexed", depthRangeIndexed);
        ASSIGN("glGetDoublei_v", getDoublei_v);
        ASSIGN("glGetFloati_v", getFloati_v);
        ASSIGN("glScissorArrayv", scissorArrayv);
        ASSIGN("glScissorIndexed", scissorIndexed);
        ASSIGN("glScissorIndexedv", scissorIndexedv);
        ASSIGN("glViewportArrayv", viewportArrayv);
        ASSIGN("glViewportIndexedf", viewportIndexedf);
        ASSIGN("glViewportIndexedfv", viewportIndexedfv);
    }

    if (extensions.count("GL_EXT_direct_state_access") != 0)
    {
        ASSIGN("glMatrixLoadfEXT", matrixLoadfEXT);
    }

    if (extensions.count("GL_KHR_debug") != 0)
    {
        ASSIGN("glDebugMessageCallback", debugMessageCallback);
        ASSIGN("glDebugMessageControl", debugMessageControl);
        ASSIGN("glDebugMessageInsert", debugMessageInsert);
        ASSIGN("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN("glGetPointerv", getPointerv);
        ASSIGN("glGetObjectLabel", getObjectLabel);
        ASSIGN("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN("glObjectLabel", objectLabel);
        ASSIGN("glObjectPtrLabel", objectPtrLabel);
        ASSIGN("glPopDebugGroup", popDebugGroup);
        ASSIGN("glPushDebugGroup", pushDebugGroup);
    }

    if (extensions.count("GL_KHR_robustness") != 0)
    {
        ASSIGN("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN("glGetnUniformfv", getnUniformfv);
        ASSIGN("glGetnUniformiv", getnUniformiv);
        ASSIGN("glGetnUniformuiv", getnUniformuiv);
        ASSIGN("glReadnPixels", readnPixels);
    }

    if (extensions.count("GL_NV_fence") != 0)
    {
        ASSIGN("glDeleteFencesNV", deleteFencesNV);
        ASSIGN("glGenFencesNV", genFencesNV);
        ASSIGN("glIsFenceNV", isFenceNV);
        ASSIGN("glTestFenceNV", testFenceNV);
        ASSIGN("glGetFenceivNV", getFenceivNV);
        ASSIGN("glFinishFenceNV", finishFenceNV);
        ASSIGN("glSetFenceNV", setFenceNV);
    }

    if (extensions.count("GL_NV_framebuffer_mixed_samples") != 0)
    {
        ASSIGN("glCoverageModulationNV", coverageModulationNV);
    }

    if (extensions.count("GL_NV_internalformat_sample_query") != 0)
    {
        ASSIGN("glGetInternalformatSampleivNV", getInternalformatSampleivNV);
    }

    if (extensions.count("GL_NV_path_rendering") != 0)
    {
        ASSIGN("glMatrixLoadfEXT", matrixLoadfEXT);
        ASSIGN("glGenPathsNV", genPathsNV);
        ASSIGN("glDeletePathsNV", deletePathsNV);
        ASSIGN("glPathCommandsNV", pathCommandsNV);
        ASSIGN("glIsPathNV", isPathNV);
        ASSIGN("glPathParameterfNV", pathParameterfNV);
        ASSIGN("glPathParameteriNV", pathParameteriNV);
        ASSIGN("glGetPathParameterfvNV", getPathParameterfvNV);
        ASSIGN("glGetPathParameterivNV", getPathParameterivNV);
        ASSIGN("glPathStencilFuncNV", pathStencilFuncNV);
        ASSIGN("glStencilFillPathNV", stencilFillPathNV);
        ASSIGN("glStencilStrokePathNV", stencilStrokePathNV);
        ASSIGN("glCoverFillPathNV", coverFillPathNV);
        ASSIGN("glCoverStrokePathNV", coverStrokePathNV);
        ASSIGN("glStencilThenCoverFillPathNV", stencilThenCoverFillPathNV);
        ASSIGN("glStencilThenCoverStrokePathNV", stencilThenCoverStrokePathNV);
        ASSIGN("glCoverFillPathInstancedNV", coverFillPathInstancedNV);
        ASSIGN("glCoverStrokePathInstancedNV", coverStrokePathInstancedNV);
        ASSIGN("glStencilFillPathInstancedNV", stencilFillPathInstancedNV);
        ASSIGN("glStencilStrokePathInstancedNV", stencilStrokePathInstancedNV);
        ASSIGN("glStencilThenCoverFillPathInstancedNV", stencilThenCoverFillPathInstancedNV);
        ASSIGN("glStencilThenCoverStrokePathInstancedNV", stencilThenCoverStrokePathInstancedNV);
        ASSIGN("glProgramPathFragmentInputGenNV", programPathFragmentInputGenNV);
    }
}

void InitializeTableGLES(DispatchTableGL *table,
                         FunctionsGL *functionsGL,
                         const std::set<std::string> &extensions)
{
    const gl::Version &version = functionsGL->version;

    if (version >= gl::Version(2, 0))
    {
        ASSIGN("glBlendFuncSeparate", blendFuncSeparate);
        ASSIGN("glBindBuffer", bindBuffer);
        ASSIGN("glBufferData", bufferData);
        ASSIGN("glBufferSubData", bufferSubData);
        ASSIGN("glDeleteBuffers", deleteBuffers);
        ASSIGN("glGenBuffers", genBuffers);
        ASSIGN("glGetBufferParameteriv", getBufferParameteriv);
        ASSIGN("glIsBuffer", isBuffer);
        ASSIGN("glBlendFunc", blendFunc);
        ASSIGN("glClear", clear);
        ASSIGN("glClearColor", clearColor);
        ASSIGN("glClearStencil", clearStencil);
        ASSIGN("glColorMask", colorMask);
        ASSIGN("glCullFace", cullFace);
        ASSIGN("glDepthFunc", depthFunc);
        ASSIGN("glDepthMask", depthMask);
        ASSIGN("glDisable", disable);
        ASSIGN("glEnable", enable);
        ASSIGN("glFinish", finish);
        ASSIGN("glFlush", flush);
        ASSIGN("glFrontFace", frontFace);
        ASSIGN("glGetBooleanv", getBooleanv);
        ASSIGN("glGetError", getError);
        ASSIGN("glGetFloatv", getFloatv);
        ASSIGN("glGetIntegerv", getIntegerv);
        ASSIGN("glGetString", getString);
        ASSIGN("glGetTexParameterfv", getTexParameterfv);
        ASSIGN("glGetTexParameteriv", getTexParameteriv);
        ASSIGN("glHint", hint);
        ASSIGN("glIsEnabled", isEnabled);
        ASSIGN("glLineWidth", lineWidth);
        ASSIGN("glPixelStorei", pixelStorei);
        ASSIGN("glReadPixels", readPixels);
        ASSIGN("glScissor", scissor);
        ASSIGN("glStencilFunc", stencilFunc);
        ASSIGN("glStencilMask", stencilMask);
        ASSIGN("glStencilOp", stencilOp);
        ASSIGN("glTexImage2D", texImage2D);
        ASSIGN("glTexParameterf", texParameterf);
        ASSIGN("glTexParameterfv", texParameterfv);
        ASSIGN("glTexParameteri", texParameteri);
        ASSIGN("glTexParameteriv", texParameteriv);
        ASSIGN("glViewport", viewport);
        ASSIGN("glBindTexture", bindTexture);
        ASSIGN("glCopyTexImage2D", copyTexImage2D);
        ASSIGN("glCopyTexSubImage2D", copyTexSubImage2D);
        ASSIGN("glDeleteTextures", deleteTextures);
        ASSIGN("glDrawArrays", drawArrays);
        ASSIGN("glDrawElements", drawElements);
        ASSIGN("glGenTextures", genTextures);
        ASSIGN("glIsTexture", isTexture);
        ASSIGN("glPolygonOffset", polygonOffset);
        ASSIGN("glTexSubImage2D", texSubImage2D);
        ASSIGN("glBlendColor", blendColor);
        ASSIGN("glBlendEquation", blendEquation);
        ASSIGN("glActiveTexture", activeTexture);
        ASSIGN("glCompressedTexImage2D", compressedTexImage2D);
        ASSIGN("glCompressedTexSubImage2D", compressedTexSubImage2D);
        ASSIGN("glSampleCoverage", sampleCoverage);
        ASSIGN("glBindFramebuffer", bindFramebuffer);
        ASSIGN("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN("glGenFramebuffers", genFramebuffers);
        ASSIGN("glGenRenderbuffers", genRenderbuffers);
        ASSIGN("glGenerateMipmap", generateMipmap);
        ASSIGN("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN("glIsFramebuffer", isFramebuffer);
        ASSIGN("glIsRenderbuffer", isRenderbuffer);
        ASSIGN("glRenderbufferStorage", renderbufferStorage);
        ASSIGN("glAttachShader", attachShader);
        ASSIGN("glBindAttribLocation", bindAttribLocation);
        ASSIGN("glBlendEquationSeparate", blendEquationSeparate);
        ASSIGN("glCompileShader", compileShader);
        ASSIGN("glCreateProgram", createProgram);
        ASSIGN("glCreateShader", createShader);
        ASSIGN("glDeleteProgram", deleteProgram);
        ASSIGN("glDeleteShader", deleteShader);
        ASSIGN("glDetachShader", detachShader);
        ASSIGN("glDisableVertexAttribArray", disableVertexAttribArray);
        ASSIGN("glEnableVertexAttribArray", enableVertexAttribArray);
        ASSIGN("glGetActiveAttrib", getActiveAttrib);
        ASSIGN("glGetActiveUniform", getActiveUniform);
        ASSIGN("glGetAttachedShaders", getAttachedShaders);
        ASSIGN("glGetAttribLocation", getAttribLocation);
        ASSIGN("glGetProgramInfoLog", getProgramInfoLog);
        ASSIGN("glGetProgramiv", getProgramiv);
        ASSIGN("glGetShaderInfoLog", getShaderInfoLog);
        ASSIGN("glGetShaderSource", getShaderSource);
        ASSIGN("glGetShaderiv", getShaderiv);
        ASSIGN("glGetUniformLocation", getUniformLocation);
        ASSIGN("glGetUniformfv", getUniformfv);
        ASSIGN("glGetUniformiv", getUniformiv);
        ASSIGN("glGetVertexAttribPointerv", getVertexAttribPointerv);
        ASSIGN("glGetVertexAttribfv", getVertexAttribfv);
        ASSIGN("glGetVertexAttribiv", getVertexAttribiv);
        ASSIGN("glIsProgram", isProgram);
        ASSIGN("glIsShader", isShader);
        ASSIGN("glLinkProgram", linkProgram);
        ASSIGN("glShaderSource", shaderSource);
        ASSIGN("glStencilFuncSeparate", stencilFuncSeparate);
        ASSIGN("glStencilMaskSeparate", stencilMaskSeparate);
        ASSIGN("glStencilOpSeparate", stencilOpSeparate);
        ASSIGN("glUniform1f", uniform1f);
        ASSIGN("glUniform1fv", uniform1fv);
        ASSIGN("glUniform1i", uniform1i);
        ASSIGN("glUniform1iv", uniform1iv);
        ASSIGN("glUniform2f", uniform2f);
        ASSIGN("glUniform2fv", uniform2fv);
        ASSIGN("glUniform2i", uniform2i);
        ASSIGN("glUniform2iv", uniform2iv);
        ASSIGN("glUniform3f", uniform3f);
        ASSIGN("glUniform3fv", uniform3fv);
        ASSIGN("glUniform3i", uniform3i);
        ASSIGN("glUniform3iv", uniform3iv);
        ASSIGN("glUniform4f", uniform4f);
        ASSIGN("glUniform4fv", uniform4fv);
        ASSIGN("glUniform4i", uniform4i);
        ASSIGN("glUniform4iv", uniform4iv);
        ASSIGN("glUniformMatrix2fv", uniformMatrix2fv);
        ASSIGN("glUniformMatrix3fv", uniformMatrix3fv);
        ASSIGN("glUniformMatrix4fv", uniformMatrix4fv);
        ASSIGN("glUseProgram", useProgram);
        ASSIGN("glValidateProgram", validateProgram);
        ASSIGN("glVertexAttrib1f", vertexAttrib1f);
        ASSIGN("glVertexAttrib1fv", vertexAttrib1fv);
        ASSIGN("glVertexAttrib2f", vertexAttrib2f);
        ASSIGN("glVertexAttrib2fv", vertexAttrib2fv);
        ASSIGN("glVertexAttrib3f", vertexAttrib3f);
        ASSIGN("glVertexAttrib3fv", vertexAttrib3fv);
        ASSIGN("glVertexAttrib4f", vertexAttrib4f);
        ASSIGN("glVertexAttrib4fv", vertexAttrib4fv);
        ASSIGN("glVertexAttribPointer", vertexAttribPointer);
        ASSIGN("glClearDepthf", clearDepthf);
        ASSIGN("glDepthRangef", depthRangef);
        ASSIGN("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN("glShaderBinary", shaderBinary);
    }

    if (version >= gl::Version(3, 0))
    {
        ASSIGN("glBeginQuery", beginQuery);
        ASSIGN("glDeleteQueries", deleteQueries);
        ASSIGN("glEndQuery", endQuery);
        ASSIGN("glGenQueries", genQueries);
        ASSIGN("glGetBufferPointerv", getBufferPointerv);
        ASSIGN("glGetQueryObjectuiv", getQueryObjectuiv);
        ASSIGN("glGetQueryiv", getQueryiv);
        ASSIGN("glIsQuery", isQuery);
        ASSIGN("glUnmapBuffer", unmapBuffer);
        ASSIGN("glReadBuffer", readBuffer);
        ASSIGN("glCopyTexSubImage3D", copyTexSubImage3D);
        ASSIGN("glDrawRangeElements", drawRangeElements);
        ASSIGN("glTexImage3D", texImage3D);
        ASSIGN("glTexSubImage3D", texSubImage3D);
        ASSIGN("glCompressedTexImage3D", compressedTexImage3D);
        ASSIGN("glCompressedTexSubImage3D", compressedTexSubImage3D);
        ASSIGN("glClientWaitSync", clientWaitSync);
        ASSIGN("glDeleteSync", deleteSync);
        ASSIGN("glFenceSync", fenceSync);
        ASSIGN("glGetBufferParameteri64v", getBufferParameteri64v);
        ASSIGN("glGetInteger64i_v", getInteger64i_v);
        ASSIGN("glGetInteger64v", getInteger64v);
        ASSIGN("glGetSynciv", getSynciv);
        ASSIGN("glIsSync", isSync);
        ASSIGN("glWaitSync", waitSync);
        ASSIGN("glBindSampler", bindSampler);
        ASSIGN("glDeleteSamplers", deleteSamplers);
        ASSIGN("glGenSamplers", genSamplers);
        ASSIGN("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN("glIsSampler", isSampler);
        ASSIGN("glSamplerParameterf", samplerParameterf);
        ASSIGN("glSamplerParameterfv", samplerParameterfv);
        ASSIGN("glSamplerParameteri", samplerParameteri);
        ASSIGN("glSamplerParameteriv", samplerParameteriv);
        ASSIGN("glVertexAttribDivisor", vertexAttribDivisor);
        ASSIGN("glBeginTransformFeedback", beginTransformFeedback);
        ASSIGN("glBindBufferBase", bindBufferBase);
        ASSIGN("glBindBufferRange", bindBufferRange);
        ASSIGN("glBindVertexArray", bindVertexArray);
        ASSIGN("glBlitFramebuffer", blitFramebuffer);
        ASSIGN("glClearBufferfi", clearBufferfi);
        ASSIGN("glClearBufferfv", clearBufferfv);
        ASSIGN("glClearBufferiv", clearBufferiv);
        ASSIGN("glClearBufferuiv", clearBufferuiv);
        ASSIGN("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN("glEndTransformFeedback", endTransformFeedback);
        ASSIGN("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN("glGenVertexArrays", genVertexArrays);
        ASSIGN("glGetFragDataLocation", getFragDataLocation);
        ASSIGN("glGetIntegeri_v", getIntegeri_v);
        ASSIGN("glGetStringi", getStringi);
        ASSIGN("glGetTransformFeedbackVarying", getTransformFeedbackVarying);
        ASSIGN("glGetUniformuiv", getUniformuiv);
        ASSIGN("glGetVertexAttribIiv", getVertexAttribIiv);
        ASSIGN("glGetVertexAttribIuiv", getVertexAttribIuiv);
        ASSIGN("glIsVertexArray", isVertexArray);
        ASSIGN("glMapBufferRange", mapBufferRange);
        ASSIGN("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
        ASSIGN("glTransformFeedbackVaryings", transformFeedbackVaryings);
        ASSIGN("glUniform1ui", uniform1ui);
        ASSIGN("glUniform1uiv", uniform1uiv);
        ASSIGN("glUniform2ui", uniform2ui);
        ASSIGN("glUniform2uiv", uniform2uiv);
        ASSIGN("glUniform3ui", uniform3ui);
        ASSIGN("glUniform3uiv", uniform3uiv);
        ASSIGN("glUniform4ui", uniform4ui);
        ASSIGN("glUniform4uiv", uniform4uiv);
        ASSIGN("glVertexAttribI4i", vertexAttribI4i);
        ASSIGN("glVertexAttribI4iv", vertexAttribI4iv);
        ASSIGN("glVertexAttribI4ui", vertexAttribI4ui);
        ASSIGN("glVertexAttribI4uiv", vertexAttribI4uiv);
        ASSIGN("glVertexAttribIPointer", vertexAttribIPointer);
        ASSIGN("glCopyBufferSubData", copyBufferSubData);
        ASSIGN("glDrawArraysInstanced", drawArraysInstanced);
        ASSIGN("glDrawElementsInstanced", drawElementsInstanced);
        ASSIGN("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN("glGetUniformIndices", getUniformIndices);
        ASSIGN("glUniformBlockBinding", uniformBlockBinding);
        ASSIGN("glUniformMatrix2x3fv", uniformMatrix2x3fv);
        ASSIGN("glUniformMatrix2x4fv", uniformMatrix2x4fv);
        ASSIGN("glUniformMatrix3x2fv", uniformMatrix3x2fv);
        ASSIGN("glUniformMatrix3x4fv", uniformMatrix3x4fv);
        ASSIGN("glUniformMatrix4x2fv", uniformMatrix4x2fv);
        ASSIGN("glUniformMatrix4x3fv", uniformMatrix4x3fv);
        ASSIGN("glDrawBuffers", drawBuffers);
        ASSIGN("glGetProgramBinary", getProgramBinary);
        ASSIGN("glProgramBinary", programBinary);
        ASSIGN("glProgramParameteri", programParameteri);
        ASSIGN("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN("glIsTransformFeedback", isTransformFeedback);
        ASSIGN("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN("glResumeTransformFeedback", resumeTransformFeedback);
        ASSIGN("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN("glGetInternalformativ", getInternalformativ);
        ASSIGN("glTexStorage2D", texStorage2D);
        ASSIGN("glTexStorage3D", texStorage3D);
    }

    if (version >= gl::Version(3, 1))
    {
        ASSIGN("glGetTexLevelParameterfv", getTexLevelParameterfv);
        ASSIGN("glGetTexLevelParameteriv", getTexLevelParameteriv);
        ASSIGN("glGetMultisamplefv", getMultisamplefv);
        ASSIGN("glSampleMaski", sampleMaski);
        ASSIGN("glGetBooleani_v", getBooleani_v);
        ASSIGN("glMemoryBarrierByRegion", memoryBarrierByRegion);
        ASSIGN("glActiveShaderProgram", activeShaderProgram);
        ASSIGN("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN("glGenProgramPipelines", genProgramPipelines);
        ASSIGN("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN("glIsProgramPipeline", isProgramPipeline);
        ASSIGN("glProgramUniform1f", programUniform1f);
        ASSIGN("glProgramUniform1fv", programUniform1fv);
        ASSIGN("glProgramUniform1i", programUniform1i);
        ASSIGN("glProgramUniform1iv", programUniform1iv);
        ASSIGN("glProgramUniform1ui", programUniform1ui);
        ASSIGN("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN("glProgramUniform2f", programUniform2f);
        ASSIGN("glProgramUniform2fv", programUniform2fv);
        ASSIGN("glProgramUniform2i", programUniform2i);
        ASSIGN("glProgramUniform2iv", programUniform2iv);
        ASSIGN("glProgramUniform2ui", programUniform2ui);
        ASSIGN("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN("glProgramUniform3f", programUniform3f);
        ASSIGN("glProgramUniform3fv", programUniform3fv);
        ASSIGN("glProgramUniform3i", programUniform3i);
        ASSIGN("glProgramUniform3iv", programUniform3iv);
        ASSIGN("glProgramUniform3ui", programUniform3ui);
        ASSIGN("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN("glProgramUniform4f", programUniform4f);
        ASSIGN("glProgramUniform4fv", programUniform4fv);
        ASSIGN("glProgramUniform4i", programUniform4i);
        ASSIGN("glProgramUniform4iv", programUniform4iv);
        ASSIGN("glProgramUniform4ui", programUniform4ui);
        ASSIGN("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN("glUseProgramStages", useProgramStages);
        ASSIGN("glValidateProgramPipeline", validateProgramPipeline);
        ASSIGN("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN("glDrawElementsIndirect", drawElementsIndirect);
        ASSIGN("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN("glDispatchCompute", dispatchCompute);
        ASSIGN("glDispatchComputeIndirect", dispatchComputeIndirect);
        ASSIGN("glFramebufferParameteri", framebufferParameteri);
        ASSIGN("glGetFramebufferParameteriv", getFramebufferParameteriv);
        ASSIGN("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN("glGetProgramResourceName", getProgramResourceName);
        ASSIGN("glGetProgramResourceiv", getProgramResourceiv);
        ASSIGN("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN("glVertexBindingDivisor", vertexBindingDivisor);
        ASSIGN("glBindImageTexture", bindImageTexture);
        ASSIGN("glMemoryBarrier", memoryBarrier);
    }

    if (version >= gl::Version(3, 2))
    {
        ASSIGN("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN("glFramebufferTexture", framebufferTexture);
        ASSIGN("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN("glColorMaski", colorMaski);
        ASSIGN("glDisablei", disablei);
        ASSIGN("glEnablei", enablei);
        ASSIGN("glGetTexParameterIiv", getTexParameterIiv);
        ASSIGN("glGetTexParameterIuiv", getTexParameterIuiv);
        ASSIGN("glIsEnabledi", isEnabledi);
        ASSIGN("glTexParameterIiv", texParameterIiv);
        ASSIGN("glTexParameterIuiv", texParameterIuiv);
        ASSIGN("glTexBuffer", texBuffer);
        ASSIGN("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN("glGetnUniformfv", getnUniformfv);
        ASSIGN("glGetnUniformiv", getnUniformiv);
        ASSIGN("glGetnUniformuiv", getnUniformuiv);
        ASSIGN("glReadnPixels", readnPixels);
        ASSIGN("glBlendEquationSeparatei", blendEquationSeparatei);
        ASSIGN("glBlendEquationi", blendEquationi);
        ASSIGN("glBlendFuncSeparatei", blendFuncSeparatei);
        ASSIGN("glBlendFunci", blendFunci);
        ASSIGN("glMinSampleShading", minSampleShading);
        ASSIGN("glPatchParameteri", patchParameteri);
        ASSIGN("glCopyImageSubData", copyImageSubData);
        ASSIGN("glDebugMessageCallback", debugMessageCallback);
        ASSIGN("glDebugMessageControl", debugMessageControl);
        ASSIGN("glDebugMessageInsert", debugMessageInsert);
        ASSIGN("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN("glGetPointerv", getPointerv);
        ASSIGN("glGetObjectLabel", getObjectLabel);
        ASSIGN("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN("glObjectLabel", objectLabel);
        ASSIGN("glObjectPtrLabel", objectPtrLabel);
        ASSIGN("glPopDebugGroup", popDebugGroup);
        ASSIGN("glPushDebugGroup", pushDebugGroup);
        ASSIGN("glTexBufferRange", texBufferRange);
        ASSIGN("glTexStorage3DMultisample", texStorage3DMultisample);
        ASSIGN("glBlendBarrier", blendBarrier);
        ASSIGN("glPrimitiveBoundingBox", primitiveBoundingBox);
    }

    if (extensions.count("GL_EXT_discard_framebuffer") != 0)
    {
        ASSIGN("glDiscardFramebufferEXT", discardFramebufferEXT);
    }

    if (extensions.count("GL_KHR_debug") != 0)
    {
        ASSIGN("glDebugMessageCallbackKHR", debugMessageCallback);
        ASSIGN("glDebugMessageControlKHR", debugMessageControl);
        ASSIGN("glDebugMessageInsertKHR", debugMessageInsert);
        ASSIGN("glGetDebugMessageLogKHR", getDebugMessageLog);
        ASSIGN("glGetPointervKHR", getPointerv);
        ASSIGN("glGetObjectLabelKHR", getObjectLabel);
        ASSIGN("glGetObjectPtrLabelKHR", getObjectPtrLabel);
        ASSIGN("glObjectLabelKHR", objectLabel);
        ASSIGN("glObjectPtrLabelKHR", objectPtrLabel);
        ASSIGN("glPopDebugGroupKHR", popDebugGroup);
        ASSIGN("glPushDebugGroupKHR", pushDebugGroup);
    }

    if (extensions.count("GL_KHR_robustness") != 0)
    {
        ASSIGN("glGetGraphicsResetStatusKHR", getGraphicsResetStatus);
        ASSIGN("glGetnUniformfvKHR", getnUniformfv);
        ASSIGN("glGetnUniformivKHR", getnUniformiv);
        ASSIGN("glGetnUniformuivKHR", getnUniformuiv);
        ASSIGN("glReadnPixelsKHR", readnPixels);
    }

    if (extensions.count("GL_NV_fence") != 0)
    {
        ASSIGN("glDeleteFencesNV", deleteFencesNV);
        ASSIGN("glGenFencesNV", genFencesNV);
        ASSIGN("glIsFenceNV", isFenceNV);
        ASSIGN("glTestFenceNV", testFenceNV);
        ASSIGN("glGetFenceivNV", getFenceivNV);
        ASSIGN("glFinishFenceNV", finishFenceNV);
        ASSIGN("glSetFenceNV", setFenceNV);
    }

    if (extensions.count("GL_NV_framebuffer_mixed_samples") != 0)
    {
        ASSIGN("glCoverageModulationNV", coverageModulationNV);
    }

    if (extensions.count("GL_NV_internalformat_sample_query") != 0)
    {
        ASSIGN("glGetInternalformatSampleivNV", getInternalformatSampleivNV);
    }

    if (extensions.count("GL_NV_path_rendering") != 0)
    {
        ASSIGN("glMatrixLoadfEXT", matrixLoadfEXT);
        ASSIGN("glGenPathsNV", genPathsNV);
        ASSIGN("glDeletePathsNV", deletePathsNV);
        ASSIGN("glPathCommandsNV", pathCommandsNV);
        ASSIGN("glIsPathNV", isPathNV);
        ASSIGN("glPathParameterfNV", pathParameterfNV);
        ASSIGN("glPathParameteriNV", pathParameteriNV);
        ASSIGN("glGetPathParameterfvNV", getPathParameterfvNV);
        ASSIGN("glGetPathParameterivNV", getPathParameterivNV);
        ASSIGN("glPathStencilFuncNV", pathStencilFuncNV);
        ASSIGN("glStencilFillPathNV", stencilFillPathNV);
        ASSIGN("glStencilStrokePathNV", stencilStrokePathNV);
        ASSIGN("glCoverFillPathNV", coverFillPathNV);
        ASSIGN("glCoverStrokePathNV", coverStrokePathNV);
        ASSIGN("glStencilThenCoverFillPathNV", stencilThenCoverFillPathNV);
        ASSIGN("glStencilThenCoverStrokePathNV", stencilThenCoverStrokePathNV);
        ASSIGN("glCoverFillPathInstancedNV", coverFillPathInstancedNV);
        ASSIGN("glCoverStrokePathInstancedNV", coverStrokePathInstancedNV);
        ASSIGN("glStencilFillPathInstancedNV", stencilFillPathInstancedNV);
        ASSIGN("glStencilStrokePathInstancedNV", stencilStrokePathInstancedNV);
        ASSIGN("glStencilThenCoverFillPathInstancedNV", stencilThenCoverFillPathInstancedNV);
        ASSIGN("glStencilThenCoverStrokePathInstancedNV", stencilThenCoverStrokePathInstancedNV);
        ASSIGN("glProgramPathFragmentInputGenNV", programPathFragmentInputGenNV);
    }

    if (extensions.count("GL_OES_EGL_image") != 0)
    {
        ASSIGN("glEGLImageTargetRenderbufferStorageOES", eGLImageTargetRenderbufferStorageOES);
        ASSIGN("glEGLImageTargetTexture2DOES", eGLImageTargetTexture2DOES);
    }
}

#if defined(ANGLE_ENABLE_OPENGL_NULL)
void InitializeTableDesktopGLNULL(DispatchTableGL *table,
                                  FunctionsGL *functionsGL,
                                  const std::set<std::string> &extensions)
{
    const gl::Version &version = functionsGL->version;

    if (version >= gl::Version(1, 0))
    {
        ASSIGN_NULL("glBlendFunc", blendFunc);
        ASSIGN_NULL("glClear", clear);
        ASSIGN_NULL("glClearColor", clearColor);
        ASSIGN_NULL("glClearDepth", clearDepth);
        ASSIGN_NULL("glClearStencil", clearStencil);
        ASSIGN_NULL("glColorMask", colorMask);
        ASSIGN_NULL("glCullFace", cullFace);
        ASSIGN_NULL("glDepthFunc", depthFunc);
        ASSIGN_NULL("glDepthMask", depthMask);
        ASSIGN_NULL("glDepthRange", depthRange);
        ASSIGN_NULL("glDisable", disable);
        ASSIGN_NULL("glDrawBuffer", drawBuffer);
        ASSIGN_NULL("glEnable", enable);
        ASSIGN_NULL("glFinish", finish);
        ASSIGN_NULL("glFlush", flush);
        ASSIGN_NULL("glFrontFace", frontFace);
        ASSIGN_NULL("glGetBooleanv", getBooleanv);
        ASSIGN_NULL("glGetDoublev", getDoublev);
        ASSIGN_NULL("glGetError", getError);
        ASSIGN_NULL("glGetFloatv", getFloatv);
        ASSIGN_NULL("glGetIntegerv", getIntegerv);
        ASSIGN_NULL("glGetString", getString);
        ASSIGN_NULL("glGetTexImage", getTexImage);
        ASSIGN_NULL("glGetTexLevelParameterfv", getTexLevelParameterfv);
        ASSIGN_NULL("glGetTexLevelParameteriv", getTexLevelParameteriv);
        ASSIGN_NULL("glGetTexParameterfv", getTexParameterfv);
        ASSIGN_NULL("glGetTexParameteriv", getTexParameteriv);
        ASSIGN_NULL("glHint", hint);
        ASSIGN_NULL("glIsEnabled", isEnabled);
        ASSIGN_NULL("glLineWidth", lineWidth);
        ASSIGN_NULL("glLogicOp", logicOp);
        ASSIGN_NULL("glPixelStoref", pixelStoref);
        ASSIGN_NULL("glPixelStorei", pixelStorei);
        ASSIGN_NULL("glPointSize", pointSize);
        ASSIGN_NULL("glPolygonMode", polygonMode);
        ASSIGN_NULL("glReadBuffer", readBuffer);
        ASSIGN_NULL("glReadPixels", readPixels);
        ASSIGN_NULL("glScissor", scissor);
        ASSIGN_NULL("glStencilFunc", stencilFunc);
        ASSIGN_NULL("glStencilMask", stencilMask);
        ASSIGN_NULL("glStencilOp", stencilOp);
        ASSIGN_NULL("glTexImage1D", texImage1D);
        ASSIGN_NULL("glTexImage2D", texImage2D);
        ASSIGN_NULL("glTexParameterf", texParameterf);
        ASSIGN_NULL("glTexParameterfv", texParameterfv);
        ASSIGN_NULL("glTexParameteri", texParameteri);
        ASSIGN_NULL("glTexParameteriv", texParameteriv);
        ASSIGN_NULL("glViewport", viewport);
    }

    if (version >= gl::Version(1, 1))
    {
        ASSIGN_NULL("glBindTexture", bindTexture);
        ASSIGN_NULL("glCopyTexImage1D", copyTexImage1D);
        ASSIGN_NULL("glCopyTexImage2D", copyTexImage2D);
        ASSIGN_NULL("glCopyTexSubImage1D", copyTexSubImage1D);
        ASSIGN_NULL("glCopyTexSubImage2D", copyTexSubImage2D);
        ASSIGN_NULL("glDeleteTextures", deleteTextures);
        ASSIGN_NULL("glDrawArrays", drawArrays);
        ASSIGN_NULL("glDrawElements", drawElements);
        ASSIGN_NULL("glGenTextures", genTextures);
        ASSIGN_NULL("glIsTexture", isTexture);
        ASSIGN_NULL("glPolygonOffset", polygonOffset);
        ASSIGN_NULL("glTexSubImage1D", texSubImage1D);
        ASSIGN_NULL("glTexSubImage2D", texSubImage2D);
    }

    if (version >= gl::Version(1, 2))
    {
        ASSIGN_NULL("glCopyTexSubImage3D", copyTexSubImage3D);
        ASSIGN_NULL("glDrawRangeElements", drawRangeElements);
        ASSIGN_NULL("glTexImage3D", texImage3D);
        ASSIGN_NULL("glTexSubImage3D", texSubImage3D);
    }

    if (version >= gl::Version(1, 3))
    {
        ASSIGN_NULL("glActiveTexture", activeTexture);
        ASSIGN_NULL("glCompressedTexImage1D", compressedTexImage1D);
        ASSIGN_NULL("glCompressedTexImage2D", compressedTexImage2D);
        ASSIGN_NULL("glCompressedTexImage3D", compressedTexImage3D);
        ASSIGN_NULL("glCompressedTexSubImage1D", compressedTexSubImage1D);
        ASSIGN_NULL("glCompressedTexSubImage2D", compressedTexSubImage2D);
        ASSIGN_NULL("glCompressedTexSubImage3D", compressedTexSubImage3D);
        ASSIGN_NULL("glGetCompressedTexImage", getCompressedTexImage);
        ASSIGN_NULL("glSampleCoverage", sampleCoverage);
    }

    if (version >= gl::Version(1, 4))
    {
        ASSIGN_NULL("glBlendFuncSeparate", blendFuncSeparate);
        ASSIGN_NULL("glMultiDrawArrays", multiDrawArrays);
        ASSIGN_NULL("glMultiDrawElements", multiDrawElements);
        ASSIGN_NULL("glPointParameterf", pointParameterf);
        ASSIGN_NULL("glPointParameterfv", pointParameterfv);
        ASSIGN_NULL("glPointParameteri", pointParameteri);
        ASSIGN_NULL("glPointParameteriv", pointParameteriv);
        ASSIGN_NULL("glBlendColor", blendColor);
        ASSIGN_NULL("glBlendEquation", blendEquation);
    }

    if (version >= gl::Version(1, 5))
    {
        ASSIGN_NULL("glBeginQuery", beginQuery);
        ASSIGN_NULL("glBindBuffer", bindBuffer);
        ASSIGN_NULL("glBufferData", bufferData);
        ASSIGN_NULL("glBufferSubData", bufferSubData);
        ASSIGN_NULL("glDeleteBuffers", deleteBuffers);
        ASSIGN_NULL("glDeleteQueries", deleteQueries);
        ASSIGN_NULL("glEndQuery", endQuery);
        ASSIGN_NULL("glGenBuffers", genBuffers);
        ASSIGN_NULL("glGenQueries", genQueries);
        ASSIGN_NULL("glGetBufferParameteriv", getBufferParameteriv);
        ASSIGN_NULL("glGetBufferPointerv", getBufferPointerv);
        ASSIGN_NULL("glGetBufferSubData", getBufferSubData);
        ASSIGN_NULL("glGetQueryObjectiv", getQueryObjectiv);
        ASSIGN_NULL("glGetQueryObjectuiv", getQueryObjectuiv);
        ASSIGN_NULL("glGetQueryiv", getQueryiv);
        ASSIGN_NULL("glIsBuffer", isBuffer);
        ASSIGN_NULL("glIsQuery", isQuery);
        ASSIGN_NULL("glMapBuffer", mapBuffer);
        ASSIGN_NULL("glUnmapBuffer", unmapBuffer);
    }

    if (version >= gl::Version(2, 0))
    {
        ASSIGN_NULL("glAttachShader", attachShader);
        ASSIGN_NULL("glBindAttribLocation", bindAttribLocation);
        ASSIGN_NULL("glBlendEquationSeparate", blendEquationSeparate);
        ASSIGN_NULL("glCompileShader", compileShader);
        ASSIGN_NULL("glCreateProgram", createProgram);
        ASSIGN_NULL("glCreateShader", createShader);
        ASSIGN_NULL("glDeleteProgram", deleteProgram);
        ASSIGN_NULL("glDeleteShader", deleteShader);
        ASSIGN_NULL("glDetachShader", detachShader);
        ASSIGN_NULL("glDisableVertexAttribArray", disableVertexAttribArray);
        ASSIGN_NULL("glDrawBuffers", drawBuffers);
        ASSIGN_NULL("glEnableVertexAttribArray", enableVertexAttribArray);
        ASSIGN_NULL("glGetActiveAttrib", getActiveAttrib);
        ASSIGN_NULL("glGetActiveUniform", getActiveUniform);
        ASSIGN_NULL("glGetAttachedShaders", getAttachedShaders);
        ASSIGN_NULL("glGetAttribLocation", getAttribLocation);
        ASSIGN_NULL("glGetProgramInfoLog", getProgramInfoLog);
        ASSIGN_NULL("glGetProgramiv", getProgramiv);
        ASSIGN_NULL("glGetShaderInfoLog", getShaderInfoLog);
        ASSIGN_NULL("glGetShaderSource", getShaderSource);
        ASSIGN_NULL("glGetShaderiv", getShaderiv);
        ASSIGN_NULL("glGetUniformLocation", getUniformLocation);
        ASSIGN_NULL("glGetUniformfv", getUniformfv);
        ASSIGN_NULL("glGetUniformiv", getUniformiv);
        ASSIGN_NULL("glGetVertexAttribPointerv", getVertexAttribPointerv);
        ASSIGN_NULL("glGetVertexAttribdv", getVertexAttribdv);
        ASSIGN_NULL("glGetVertexAttribfv", getVertexAttribfv);
        ASSIGN_NULL("glGetVertexAttribiv", getVertexAttribiv);
        ASSIGN_NULL("glIsProgram", isProgram);
        ASSIGN_NULL("glIsShader", isShader);
        ASSIGN_NULL("glLinkProgram", linkProgram);
        ASSIGN_NULL("glShaderSource", shaderSource);
        ASSIGN_NULL("glStencilFuncSeparate", stencilFuncSeparate);
        ASSIGN_NULL("glStencilMaskSeparate", stencilMaskSeparate);
        ASSIGN_NULL("glStencilOpSeparate", stencilOpSeparate);
        ASSIGN_NULL("glUniform1f", uniform1f);
        ASSIGN_NULL("glUniform1fv", uniform1fv);
        ASSIGN_NULL("glUniform1i", uniform1i);
        ASSIGN_NULL("glUniform1iv", uniform1iv);
        ASSIGN_NULL("glUniform2f", uniform2f);
        ASSIGN_NULL("glUniform2fv", uniform2fv);
        ASSIGN_NULL("glUniform2i", uniform2i);
        ASSIGN_NULL("glUniform2iv", uniform2iv);
        ASSIGN_NULL("glUniform3f", uniform3f);
        ASSIGN_NULL("glUniform3fv", uniform3fv);
        ASSIGN_NULL("glUniform3i", uniform3i);
        ASSIGN_NULL("glUniform3iv", uniform3iv);
        ASSIGN_NULL("glUniform4f", uniform4f);
        ASSIGN_NULL("glUniform4fv", uniform4fv);
        ASSIGN_NULL("glUniform4i", uniform4i);
        ASSIGN_NULL("glUniform4iv", uniform4iv);
        ASSIGN_NULL("glUniformMatrix2fv", uniformMatrix2fv);
        ASSIGN_NULL("glUniformMatrix3fv", uniformMatrix3fv);
        ASSIGN_NULL("glUniformMatrix4fv", uniformMatrix4fv);
        ASSIGN_NULL("glUseProgram", useProgram);
        ASSIGN_NULL("glValidateProgram", validateProgram);
        ASSIGN_NULL("glVertexAttrib1d", vertexAttrib1d);
        ASSIGN_NULL("glVertexAttrib1dv", vertexAttrib1dv);
        ASSIGN_NULL("glVertexAttrib1f", vertexAttrib1f);
        ASSIGN_NULL("glVertexAttrib1fv", vertexAttrib1fv);
        ASSIGN_NULL("glVertexAttrib1s", vertexAttrib1s);
        ASSIGN_NULL("glVertexAttrib1sv", vertexAttrib1sv);
        ASSIGN_NULL("glVertexAttrib2d", vertexAttrib2d);
        ASSIGN_NULL("glVertexAttrib2dv", vertexAttrib2dv);
        ASSIGN_NULL("glVertexAttrib2f", vertexAttrib2f);
        ASSIGN_NULL("glVertexAttrib2fv", vertexAttrib2fv);
        ASSIGN_NULL("glVertexAttrib2s", vertexAttrib2s);
        ASSIGN_NULL("glVertexAttrib2sv", vertexAttrib2sv);
        ASSIGN_NULL("glVertexAttrib3d", vertexAttrib3d);
        ASSIGN_NULL("glVertexAttrib3dv", vertexAttrib3dv);
        ASSIGN_NULL("glVertexAttrib3f", vertexAttrib3f);
        ASSIGN_NULL("glVertexAttrib3fv", vertexAttrib3fv);
        ASSIGN_NULL("glVertexAttrib3s", vertexAttrib3s);
        ASSIGN_NULL("glVertexAttrib3sv", vertexAttrib3sv);
        ASSIGN_NULL("glVertexAttrib4Nbv", vertexAttrib4Nbv);
        ASSIGN_NULL("glVertexAttrib4Niv", vertexAttrib4Niv);
        ASSIGN_NULL("glVertexAttrib4Nsv", vertexAttrib4Nsv);
        ASSIGN_NULL("glVertexAttrib4Nub", vertexAttrib4Nub);
        ASSIGN_NULL("glVertexAttrib4Nubv", vertexAttrib4Nubv);
        ASSIGN_NULL("glVertexAttrib4Nuiv", vertexAttrib4Nuiv);
        ASSIGN_NULL("glVertexAttrib4Nusv", vertexAttrib4Nusv);
        ASSIGN_NULL("glVertexAttrib4bv", vertexAttrib4bv);
        ASSIGN_NULL("glVertexAttrib4d", vertexAttrib4d);
        ASSIGN_NULL("glVertexAttrib4dv", vertexAttrib4dv);
        ASSIGN_NULL("glVertexAttrib4f", vertexAttrib4f);
        ASSIGN_NULL("glVertexAttrib4fv", vertexAttrib4fv);
        ASSIGN_NULL("glVertexAttrib4iv", vertexAttrib4iv);
        ASSIGN_NULL("glVertexAttrib4s", vertexAttrib4s);
        ASSIGN_NULL("glVertexAttrib4sv", vertexAttrib4sv);
        ASSIGN_NULL("glVertexAttrib4ubv", vertexAttrib4ubv);
        ASSIGN_NULL("glVertexAttrib4uiv", vertexAttrib4uiv);
        ASSIGN_NULL("glVertexAttrib4usv", vertexAttrib4usv);
        ASSIGN_NULL("glVertexAttribPointer", vertexAttribPointer);
    }

    if (version >= gl::Version(2, 1))
    {
        ASSIGN_NULL("glUniformMatrix2x3fv", uniformMatrix2x3fv);
        ASSIGN_NULL("glUniformMatrix2x4fv", uniformMatrix2x4fv);
        ASSIGN_NULL("glUniformMatrix3x2fv", uniformMatrix3x2fv);
        ASSIGN_NULL("glUniformMatrix3x4fv", uniformMatrix3x4fv);
        ASSIGN_NULL("glUniformMatrix4x2fv", uniformMatrix4x2fv);
        ASSIGN_NULL("glUniformMatrix4x3fv", uniformMatrix4x3fv);
    }

    if (version >= gl::Version(3, 0))
    {
        ASSIGN_NULL("glBeginConditionalRender", beginConditionalRender);
        ASSIGN_NULL("glBeginTransformFeedback", beginTransformFeedback);
        ASSIGN_NULL("glBindBufferBase", bindBufferBase);
        ASSIGN_NULL("glBindBufferRange", bindBufferRange);
        ASSIGN_NULL("glBindFragDataLocation", bindFragDataLocation);
        ASSIGN_NULL("glBindFramebuffer", bindFramebuffer);
        ASSIGN_NULL("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN_NULL("glBindVertexArray", bindVertexArray);
        ASSIGN_NULL("glBlitFramebuffer", blitFramebuffer);
        ASSIGN_NULL("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN_NULL("glClampColor", clampColor);
        ASSIGN_NULL("glClearBufferfi", clearBufferfi);
        ASSIGN_NULL("glClearBufferfv", clearBufferfv);
        ASSIGN_NULL("glClearBufferiv", clearBufferiv);
        ASSIGN_NULL("glClearBufferuiv", clearBufferuiv);
        ASSIGN_NULL("glColorMaski", colorMaski);
        ASSIGN_NULL("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN_NULL("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN_NULL("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN_NULL("glDisablei", disablei);
        ASSIGN_NULL("glEnablei", enablei);
        ASSIGN_NULL("glEndConditionalRender", endConditionalRender);
        ASSIGN_NULL("glEndTransformFeedback", endTransformFeedback);
        ASSIGN_NULL("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN_NULL("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN_NULL("glFramebufferTexture1D", framebufferTexture1D);
        ASSIGN_NULL("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN_NULL("glFramebufferTexture3D", framebufferTexture3D);
        ASSIGN_NULL("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN_NULL("glGenFramebuffers", genFramebuffers);
        ASSIGN_NULL("glGenRenderbuffers", genRenderbuffers);
        ASSIGN_NULL("glGenVertexArrays", genVertexArrays);
        ASSIGN_NULL("glGenerateMipmap", generateMipmap);
        ASSIGN_NULL("glGetBooleani_v", getBooleani_v);
        ASSIGN_NULL("glGetFragDataLocation", getFragDataLocation);
        ASSIGN_NULL("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN_NULL("glGetIntegeri_v", getIntegeri_v);
        ASSIGN_NULL("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN_NULL("glGetStringi", getStringi);
        ASSIGN_NULL("glGetTexParameterIiv", getTexParameterIiv);
        ASSIGN_NULL("glGetTexParameterIuiv", getTexParameterIuiv);
        ASSIGN_NULL("glGetTransformFeedbackVarying", getTransformFeedbackVarying);
        ASSIGN_NULL("glGetUniformuiv", getUniformuiv);
        ASSIGN_NULL("glGetVertexAttribIiv", getVertexAttribIiv);
        ASSIGN_NULL("glGetVertexAttribIuiv", getVertexAttribIuiv);
        ASSIGN_NULL("glIsEnabledi", isEnabledi);
        ASSIGN_NULL("glIsFramebuffer", isFramebuffer);
        ASSIGN_NULL("glIsRenderbuffer", isRenderbuffer);
        ASSIGN_NULL("glIsVertexArray", isVertexArray);
        ASSIGN_NULL("glMapBufferRange", mapBufferRange);
        ASSIGN_NULL("glRenderbufferStorage", renderbufferStorage);
        ASSIGN_NULL("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
        ASSIGN_NULL("glTexParameterIiv", texParameterIiv);
        ASSIGN_NULL("glTexParameterIuiv", texParameterIuiv);
        ASSIGN_NULL("glTransformFeedbackVaryings", transformFeedbackVaryings);
        ASSIGN_NULL("glUniform1ui", uniform1ui);
        ASSIGN_NULL("glUniform1uiv", uniform1uiv);
        ASSIGN_NULL("glUniform2ui", uniform2ui);
        ASSIGN_NULL("glUniform2uiv", uniform2uiv);
        ASSIGN_NULL("glUniform3ui", uniform3ui);
        ASSIGN_NULL("glUniform3uiv", uniform3uiv);
        ASSIGN_NULL("glUniform4ui", uniform4ui);
        ASSIGN_NULL("glUniform4uiv", uniform4uiv);
        ASSIGN_NULL("glVertexAttribI1i", vertexAttribI1i);
        ASSIGN_NULL("glVertexAttribI1iv", vertexAttribI1iv);
        ASSIGN_NULL("glVertexAttribI1ui", vertexAttribI1ui);
        ASSIGN_NULL("glVertexAttribI1uiv", vertexAttribI1uiv);
        ASSIGN_NULL("glVertexAttribI2i", vertexAttribI2i);
        ASSIGN_NULL("glVertexAttribI2iv", vertexAttribI2iv);
        ASSIGN_NULL("glVertexAttribI2ui", vertexAttribI2ui);
        ASSIGN_NULL("glVertexAttribI2uiv", vertexAttribI2uiv);
        ASSIGN_NULL("glVertexAttribI3i", vertexAttribI3i);
        ASSIGN_NULL("glVertexAttribI3iv", vertexAttribI3iv);
        ASSIGN_NULL("glVertexAttribI3ui", vertexAttribI3ui);
        ASSIGN_NULL("glVertexAttribI3uiv", vertexAttribI3uiv);
        ASSIGN_NULL("glVertexAttribI4bv", vertexAttribI4bv);
        ASSIGN_NULL("glVertexAttribI4i", vertexAttribI4i);
        ASSIGN_NULL("glVertexAttribI4iv", vertexAttribI4iv);
        ASSIGN_NULL("glVertexAttribI4sv", vertexAttribI4sv);
        ASSIGN_NULL("glVertexAttribI4ubv", vertexAttribI4ubv);
        ASSIGN_NULL("glVertexAttribI4ui", vertexAttribI4ui);
        ASSIGN_NULL("glVertexAttribI4uiv", vertexAttribI4uiv);
        ASSIGN_NULL("glVertexAttribI4usv", vertexAttribI4usv);
        ASSIGN_NULL("glVertexAttribIPointer", vertexAttribIPointer);
    }

    if (version >= gl::Version(3, 1))
    {
        ASSIGN_NULL("glCopyBufferSubData", copyBufferSubData);
        ASSIGN_NULL("glDrawArraysInstanced", drawArraysInstanced);
        ASSIGN_NULL("glDrawElementsInstanced", drawElementsInstanced);
        ASSIGN_NULL("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN_NULL("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN_NULL("glGetActiveUniformName", getActiveUniformName);
        ASSIGN_NULL("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN_NULL("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN_NULL("glGetUniformIndices", getUniformIndices);
        ASSIGN_NULL("glPrimitiveRestartIndex", primitiveRestartIndex);
        ASSIGN_NULL("glTexBuffer", texBuffer);
        ASSIGN_NULL("glUniformBlockBinding", uniformBlockBinding);
    }

    if (version >= gl::Version(3, 2))
    {
        ASSIGN_NULL("glClientWaitSync", clientWaitSync);
        ASSIGN_NULL("glDeleteSync", deleteSync);
        ASSIGN_NULL("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN_NULL("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN_NULL("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN_NULL("glFenceSync", fenceSync);
        ASSIGN_NULL("glFramebufferTexture", framebufferTexture);
        ASSIGN_NULL("glGetBufferParameteri64v", getBufferParameteri64v);
        ASSIGN_NULL("glGetInteger64i_v", getInteger64i_v);
        ASSIGN_NULL("glGetInteger64v", getInteger64v);
        ASSIGN_NULL("glGetMultisamplefv", getMultisamplefv);
        ASSIGN_NULL("glGetSynciv", getSynciv);
        ASSIGN_NULL("glIsSync", isSync);
        ASSIGN_NULL("glMultiDrawElementsBaseVertex", multiDrawElementsBaseVertex);
        ASSIGN_NULL("glProvokingVertex", provokingVertex);
        ASSIGN_NULL("glSampleMaski", sampleMaski);
        ASSIGN_NULL("glTexImage2DMultisample", texImage2DMultisample);
        ASSIGN_NULL("glTexImage3DMultisample", texImage3DMultisample);
        ASSIGN_NULL("glWaitSync", waitSync);
    }

    if (version >= gl::Version(3, 3))
    {
        ASSIGN_NULL("glBindFragDataLocationIndexed", bindFragDataLocationIndexed);
        ASSIGN_NULL("glBindSampler", bindSampler);
        ASSIGN_NULL("glDeleteSamplers", deleteSamplers);
        ASSIGN_NULL("glGenSamplers", genSamplers);
        ASSIGN_NULL("glGetFragDataIndex", getFragDataIndex);
        ASSIGN_NULL("glGetQueryObjecti64v", getQueryObjecti64v);
        ASSIGN_NULL("glGetQueryObjectui64v", getQueryObjectui64v);
        ASSIGN_NULL("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN_NULL("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN_NULL("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN_NULL("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN_NULL("glIsSampler", isSampler);
        ASSIGN_NULL("glQueryCounter", queryCounter);
        ASSIGN_NULL("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN_NULL("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN_NULL("glSamplerParameterf", samplerParameterf);
        ASSIGN_NULL("glSamplerParameterfv", samplerParameterfv);
        ASSIGN_NULL("glSamplerParameteri", samplerParameteri);
        ASSIGN_NULL("glSamplerParameteriv", samplerParameteriv);
        ASSIGN_NULL("glVertexAttribDivisor", vertexAttribDivisor);
        ASSIGN_NULL("glVertexAttribP1ui", vertexAttribP1ui);
        ASSIGN_NULL("glVertexAttribP1uiv", vertexAttribP1uiv);
        ASSIGN_NULL("glVertexAttribP2ui", vertexAttribP2ui);
        ASSIGN_NULL("glVertexAttribP2uiv", vertexAttribP2uiv);
        ASSIGN_NULL("glVertexAttribP3ui", vertexAttribP3ui);
        ASSIGN_NULL("glVertexAttribP3uiv", vertexAttribP3uiv);
        ASSIGN_NULL("glVertexAttribP4ui", vertexAttribP4ui);
        ASSIGN_NULL("glVertexAttribP4uiv", vertexAttribP4uiv);
    }

    if (version >= gl::Version(4, 0))
    {
        ASSIGN_NULL("glBeginQueryIndexed", beginQueryIndexed);
        ASSIGN_NULL("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN_NULL("glBlendEquationSeparatei", blendEquationSeparatei);
        ASSIGN_NULL("glBlendEquationi", blendEquationi);
        ASSIGN_NULL("glBlendFuncSeparatei", blendFuncSeparatei);
        ASSIGN_NULL("glBlendFunci", blendFunci);
        ASSIGN_NULL("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN_NULL("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN_NULL("glDrawElementsIndirect", drawElementsIndirect);
        ASSIGN_NULL("glDrawTransformFeedback", drawTransformFeedback);
        ASSIGN_NULL("glDrawTransformFeedbackStream", drawTransformFeedbackStream);
        ASSIGN_NULL("glEndQueryIndexed", endQueryIndexed);
        ASSIGN_NULL("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN_NULL("glGetActiveSubroutineName", getActiveSubroutineName);
        ASSIGN_NULL("glGetActiveSubroutineUniformName", getActiveSubroutineUniformName);
        ASSIGN_NULL("glGetActiveSubroutineUniformiv", getActiveSubroutineUniformiv);
        ASSIGN_NULL("glGetProgramStageiv", getProgramStageiv);
        ASSIGN_NULL("glGetQueryIndexediv", getQueryIndexediv);
        ASSIGN_NULL("glGetSubroutineIndex", getSubroutineIndex);
        ASSIGN_NULL("glGetSubroutineUniformLocation", getSubroutineUniformLocation);
        ASSIGN_NULL("glGetUniformSubroutineuiv", getUniformSubroutineuiv);
        ASSIGN_NULL("glGetUniformdv", getUniformdv);
        ASSIGN_NULL("glIsTransformFeedback", isTransformFeedback);
        ASSIGN_NULL("glMinSampleShading", minSampleShading);
        ASSIGN_NULL("glPatchParameterfv", patchParameterfv);
        ASSIGN_NULL("glPatchParameteri", patchParameteri);
        ASSIGN_NULL("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN_NULL("glResumeTransformFeedback", resumeTransformFeedback);
        ASSIGN_NULL("glUniform1d", uniform1d);
        ASSIGN_NULL("glUniform1dv", uniform1dv);
        ASSIGN_NULL("glUniform2d", uniform2d);
        ASSIGN_NULL("glUniform2dv", uniform2dv);
        ASSIGN_NULL("glUniform3d", uniform3d);
        ASSIGN_NULL("glUniform3dv", uniform3dv);
        ASSIGN_NULL("glUniform4d", uniform4d);
        ASSIGN_NULL("glUniform4dv", uniform4dv);
        ASSIGN_NULL("glUniformMatrix2dv", uniformMatrix2dv);
        ASSIGN_NULL("glUniformMatrix2x3dv", uniformMatrix2x3dv);
        ASSIGN_NULL("glUniformMatrix2x4dv", uniformMatrix2x4dv);
        ASSIGN_NULL("glUniformMatrix3dv", uniformMatrix3dv);
        ASSIGN_NULL("glUniformMatrix3x2dv", uniformMatrix3x2dv);
        ASSIGN_NULL("glUniformMatrix3x4dv", uniformMatrix3x4dv);
        ASSIGN_NULL("glUniformMatrix4dv", uniformMatrix4dv);
        ASSIGN_NULL("glUniformMatrix4x2dv", uniformMatrix4x2dv);
        ASSIGN_NULL("glUniformMatrix4x3dv", uniformMatrix4x3dv);
        ASSIGN_NULL("glUniformSubroutinesuiv", uniformSubroutinesuiv);
    }

    if (version >= gl::Version(4, 1))
    {
        ASSIGN_NULL("glActiveShaderProgram", activeShaderProgram);
        ASSIGN_NULL("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN_NULL("glClearDepthf", clearDepthf);
        ASSIGN_NULL("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN_NULL("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN_NULL("glDepthRangeArrayv", depthRangeArrayv);
        ASSIGN_NULL("glDepthRangeIndexed", depthRangeIndexed);
        ASSIGN_NULL("glDepthRangef", depthRangef);
        ASSIGN_NULL("glGenProgramPipelines", genProgramPipelines);
        ASSIGN_NULL("glGetDoublei_v", getDoublei_v);
        ASSIGN_NULL("glGetFloati_v", getFloati_v);
        ASSIGN_NULL("glGetProgramBinary", getProgramBinary);
        ASSIGN_NULL("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN_NULL("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN_NULL("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN_NULL("glGetVertexAttribLdv", getVertexAttribLdv);
        ASSIGN_NULL("glIsProgramPipeline", isProgramPipeline);
        ASSIGN_NULL("glProgramBinary", programBinary);
        ASSIGN_NULL("glProgramParameteri", programParameteri);
        ASSIGN_NULL("glProgramUniform1d", programUniform1d);
        ASSIGN_NULL("glProgramUniform1dv", programUniform1dv);
        ASSIGN_NULL("glProgramUniform1f", programUniform1f);
        ASSIGN_NULL("glProgramUniform1fv", programUniform1fv);
        ASSIGN_NULL("glProgramUniform1i", programUniform1i);
        ASSIGN_NULL("glProgramUniform1iv", programUniform1iv);
        ASSIGN_NULL("glProgramUniform1ui", programUniform1ui);
        ASSIGN_NULL("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN_NULL("glProgramUniform2d", programUniform2d);
        ASSIGN_NULL("glProgramUniform2dv", programUniform2dv);
        ASSIGN_NULL("glProgramUniform2f", programUniform2f);
        ASSIGN_NULL("glProgramUniform2fv", programUniform2fv);
        ASSIGN_NULL("glProgramUniform2i", programUniform2i);
        ASSIGN_NULL("glProgramUniform2iv", programUniform2iv);
        ASSIGN_NULL("glProgramUniform2ui", programUniform2ui);
        ASSIGN_NULL("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN_NULL("glProgramUniform3d", programUniform3d);
        ASSIGN_NULL("glProgramUniform3dv", programUniform3dv);
        ASSIGN_NULL("glProgramUniform3f", programUniform3f);
        ASSIGN_NULL("glProgramUniform3fv", programUniform3fv);
        ASSIGN_NULL("glProgramUniform3i", programUniform3i);
        ASSIGN_NULL("glProgramUniform3iv", programUniform3iv);
        ASSIGN_NULL("glProgramUniform3ui", programUniform3ui);
        ASSIGN_NULL("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN_NULL("glProgramUniform4d", programUniform4d);
        ASSIGN_NULL("glProgramUniform4dv", programUniform4dv);
        ASSIGN_NULL("glProgramUniform4f", programUniform4f);
        ASSIGN_NULL("glProgramUniform4fv", programUniform4fv);
        ASSIGN_NULL("glProgramUniform4i", programUniform4i);
        ASSIGN_NULL("glProgramUniform4iv", programUniform4iv);
        ASSIGN_NULL("glProgramUniform4ui", programUniform4ui);
        ASSIGN_NULL("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN_NULL("glProgramUniformMatrix2dv", programUniformMatrix2dv);
        ASSIGN_NULL("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN_NULL("glProgramUniformMatrix2x3dv", programUniformMatrix2x3dv);
        ASSIGN_NULL("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN_NULL("glProgramUniformMatrix2x4dv", programUniformMatrix2x4dv);
        ASSIGN_NULL("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN_NULL("glProgramUniformMatrix3dv", programUniformMatrix3dv);
        ASSIGN_NULL("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN_NULL("glProgramUniformMatrix3x2dv", programUniformMatrix3x2dv);
        ASSIGN_NULL("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN_NULL("glProgramUniformMatrix3x4dv", programUniformMatrix3x4dv);
        ASSIGN_NULL("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN_NULL("glProgramUniformMatrix4dv", programUniformMatrix4dv);
        ASSIGN_NULL("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN_NULL("glProgramUniformMatrix4x2dv", programUniformMatrix4x2dv);
        ASSIGN_NULL("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN_NULL("glProgramUniformMatrix4x3dv", programUniformMatrix4x3dv);
        ASSIGN_NULL("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN_NULL("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN_NULL("glScissorArrayv", scissorArrayv);
        ASSIGN_NULL("glScissorIndexed", scissorIndexed);
        ASSIGN_NULL("glScissorIndexedv", scissorIndexedv);
        ASSIGN_NULL("glShaderBinary", shaderBinary);
        ASSIGN_NULL("glUseProgramStages", useProgramStages);
        ASSIGN_NULL("glValidateProgramPipeline", validateProgramPipeline);
        ASSIGN_NULL("glVertexAttribL1d", vertexAttribL1d);
        ASSIGN_NULL("glVertexAttribL1dv", vertexAttribL1dv);
        ASSIGN_NULL("glVertexAttribL2d", vertexAttribL2d);
        ASSIGN_NULL("glVertexAttribL2dv", vertexAttribL2dv);
        ASSIGN_NULL("glVertexAttribL3d", vertexAttribL3d);
        ASSIGN_NULL("glVertexAttribL3dv", vertexAttribL3dv);
        ASSIGN_NULL("glVertexAttribL4d", vertexAttribL4d);
        ASSIGN_NULL("glVertexAttribL4dv", vertexAttribL4dv);
        ASSIGN_NULL("glVertexAttribLPointer", vertexAttribLPointer);
        ASSIGN_NULL("glViewportArrayv", viewportArrayv);
        ASSIGN_NULL("glViewportIndexedf", viewportIndexedf);
        ASSIGN_NULL("glViewportIndexedfv", viewportIndexedfv);
    }

    if (version >= gl::Version(4, 2))
    {
        ASSIGN_NULL("glBindImageTexture", bindImageTexture);
        ASSIGN_NULL("glDrawArraysInstancedBaseInstance", drawArraysInstancedBaseInstance);
        ASSIGN_NULL("glDrawElementsInstancedBaseInstance", drawElementsInstancedBaseInstance);
        ASSIGN_NULL("glDrawElementsInstancedBaseVertexBaseInstance",
                    drawElementsInstancedBaseVertexBaseInstance);
        ASSIGN_NULL("glDrawTransformFeedbackInstanced", drawTransformFeedbackInstanced);
        ASSIGN_NULL("glDrawTransformFeedbackStreamInstanced", drawTransformFeedbackStreamInstanced);
        ASSIGN_NULL("glGetActiveAtomicCounterBufferiv", getActiveAtomicCounterBufferiv);
        ASSIGN_NULL("glGetInternalformativ", getInternalformativ);
        ASSIGN_NULL("glMemoryBarrier", memoryBarrier);
        ASSIGN_NULL("glTexStorage1D", texStorage1D);
        ASSIGN_NULL("glTexStorage2D", texStorage2D);
        ASSIGN_NULL("glTexStorage3D", texStorage3D);
    }

    if (version >= gl::Version(4, 3))
    {
        ASSIGN_NULL("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN_NULL("glClearBufferData", clearBufferData);
        ASSIGN_NULL("glClearBufferSubData", clearBufferSubData);
        ASSIGN_NULL("glCopyImageSubData", copyImageSubData);
        ASSIGN_NULL("glDebugMessageCallback", debugMessageCallback);
        ASSIGN_NULL("glDebugMessageControl", debugMessageControl);
        ASSIGN_NULL("glDebugMessageInsert", debugMessageInsert);
        ASSIGN_NULL("glDispatchCompute", dispatchCompute);
        ASSIGN_NULL("glDispatchComputeIndirect", dispatchComputeIndirect);
        ASSIGN_NULL("glFramebufferParameteri", framebufferParameteri);
        ASSIGN_NULL("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN_NULL("glGetFramebufferParameteriv", getFramebufferParameteriv);
        ASSIGN_NULL("glGetInternalformati64v", getInternalformati64v);
        ASSIGN_NULL("glGetPointerv", getPointerv);
        ASSIGN_NULL("glGetObjectLabel", getObjectLabel);
        ASSIGN_NULL("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN_NULL("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN_NULL("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN_NULL("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN_NULL("glGetProgramResourceLocationIndex", getProgramResourceLocationIndex);
        ASSIGN_NULL("glGetProgramResourceName", getProgramResourceName);
        ASSIGN_NULL("glGetProgramResourceiv", getProgramResourceiv);
        ASSIGN_NULL("glInvalidateBufferData", invalidateBufferData);
        ASSIGN_NULL("glInvalidateBufferSubData", invalidateBufferSubData);
        ASSIGN_NULL("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN_NULL("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN_NULL("glInvalidateTexImage", invalidateTexImage);
        ASSIGN_NULL("glInvalidateTexSubImage", invalidateTexSubImage);
        ASSIGN_NULL("glMultiDrawArraysIndirect", multiDrawArraysIndirect);
        ASSIGN_NULL("glMultiDrawElementsIndirect", multiDrawElementsIndirect);
        ASSIGN_NULL("glObjectLabel", objectLabel);
        ASSIGN_NULL("glObjectPtrLabel", objectPtrLabel);
        ASSIGN_NULL("glPopDebugGroup", popDebugGroup);
        ASSIGN_NULL("glPushDebugGroup", pushDebugGroup);
        ASSIGN_NULL("glShaderStorageBlockBinding", shaderStorageBlockBinding);
        ASSIGN_NULL("glTexBufferRange", texBufferRange);
        ASSIGN_NULL("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN_NULL("glTexStorage3DMultisample", texStorage3DMultisample);
        ASSIGN_NULL("glTextureView", textureView);
        ASSIGN_NULL("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN_NULL("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN_NULL("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN_NULL("glVertexAttribLFormat", vertexAttribLFormat);
        ASSIGN_NULL("glVertexBindingDivisor", vertexBindingDivisor);
    }

    if (version >= gl::Version(4, 4))
    {
        ASSIGN_NULL("glBindBuffersBase", bindBuffersBase);
        ASSIGN_NULL("glBindBuffersRange", bindBuffersRange);
        ASSIGN_NULL("glBindImageTextures", bindImageTextures);
        ASSIGN_NULL("glBindSamplers", bindSamplers);
        ASSIGN_NULL("glBindTextures", bindTextures);
        ASSIGN_NULL("glBindVertexBuffers", bindVertexBuffers);
        ASSIGN_NULL("glBufferStorage", bufferStorage);
        ASSIGN_NULL("glClearTexImage", clearTexImage);
        ASSIGN_NULL("glClearTexSubImage", clearTexSubImage);
    }

    if (version >= gl::Version(4, 5))
    {
        ASSIGN_NULL("glBindTextureUnit", bindTextureUnit);
        ASSIGN_NULL("glBlitNamedFramebuffer", blitNamedFramebuffer);
        ASSIGN_NULL("glCheckNamedFramebufferStatus", checkNamedFramebufferStatus);
        ASSIGN_NULL("glClearNamedBufferData", clearNamedBufferData);
        ASSIGN_NULL("glClearNamedBufferSubData", clearNamedBufferSubData);
        ASSIGN_NULL("glClearNamedFramebufferfi", clearNamedFramebufferfi);
        ASSIGN_NULL("glClearNamedFramebufferfv", clearNamedFramebufferfv);
        ASSIGN_NULL("glClearNamedFramebufferiv", clearNamedFramebufferiv);
        ASSIGN_NULL("glClearNamedFramebufferuiv", clearNamedFramebufferuiv);
        ASSIGN_NULL("glClipControl", clipControl);
        ASSIGN_NULL("glCompressedTextureSubImage1D", compressedTextureSubImage1D);
        ASSIGN_NULL("glCompressedTextureSubImage2D", compressedTextureSubImage2D);
        ASSIGN_NULL("glCompressedTextureSubImage3D", compressedTextureSubImage3D);
        ASSIGN_NULL("glCopyNamedBufferSubData", copyNamedBufferSubData);
        ASSIGN_NULL("glCopyTextureSubImage1D", copyTextureSubImage1D);
        ASSIGN_NULL("glCopyTextureSubImage2D", copyTextureSubImage2D);
        ASSIGN_NULL("glCopyTextureSubImage3D", copyTextureSubImage3D);
        ASSIGN_NULL("glCreateBuffers", createBuffers);
        ASSIGN_NULL("glCreateFramebuffers", createFramebuffers);
        ASSIGN_NULL("glCreateProgramPipelines", createProgramPipelines);
        ASSIGN_NULL("glCreateQueries", createQueries);
        ASSIGN_NULL("glCreateRenderbuffers", createRenderbuffers);
        ASSIGN_NULL("glCreateSamplers", createSamplers);
        ASSIGN_NULL("glCreateTextures", createTextures);
        ASSIGN_NULL("glCreateTransformFeedbacks", createTransformFeedbacks);
        ASSIGN_NULL("glCreateVertexArrays", createVertexArrays);
        ASSIGN_NULL("glDisableVertexArrayAttrib", disableVertexArrayAttrib);
        ASSIGN_NULL("glEnableVertexArrayAttrib", enableVertexArrayAttrib);
        ASSIGN_NULL("glFlushMappedNamedBufferRange", flushMappedNamedBufferRange);
        ASSIGN_NULL("glGenerateTextureMipmap", generateTextureMipmap);
        ASSIGN_NULL("glGetCompressedTextureImage", getCompressedTextureImage);
        ASSIGN_NULL("glGetCompressedTextureSubImage", getCompressedTextureSubImage);
        ASSIGN_NULL("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN_NULL("glGetNamedBufferParameteri64v", getNamedBufferParameteri64v);
        ASSIGN_NULL("glGetNamedBufferParameteriv", getNamedBufferParameteriv);
        ASSIGN_NULL("glGetNamedBufferPointerv", getNamedBufferPointerv);
        ASSIGN_NULL("glGetNamedBufferSubData", getNamedBufferSubData);
        ASSIGN_NULL("glGetNamedFramebufferAttachmentParameteriv",
                    getNamedFramebufferAttachmentParameteriv);
        ASSIGN_NULL("glGetNamedFramebufferParameteriv", getNamedFramebufferParameteriv);
        ASSIGN_NULL("glGetNamedRenderbufferParameteriv", getNamedRenderbufferParameteriv);
        ASSIGN_NULL("glGetQueryBufferObjecti64v", getQueryBufferObjecti64v);
        ASSIGN_NULL("glGetQueryBufferObjectiv", getQueryBufferObjectiv);
        ASSIGN_NULL("glGetQueryBufferObjectui64v", getQueryBufferObjectui64v);
        ASSIGN_NULL("glGetQueryBufferObjectuiv", getQueryBufferObjectuiv);
        ASSIGN_NULL("glGetTextureImage", getTextureImage);
        ASSIGN_NULL("glGetTextureLevelParameterfv", getTextureLevelParameterfv);
        ASSIGN_NULL("glGetTextureLevelParameteriv", getTextureLevelParameteriv);
        ASSIGN_NULL("glGetTextureParameterIiv", getTextureParameterIiv);
        ASSIGN_NULL("glGetTextureParameterIuiv", getTextureParameterIuiv);
        ASSIGN_NULL("glGetTextureParameterfv", getTextureParameterfv);
        ASSIGN_NULL("glGetTextureParameteriv", getTextureParameteriv);
        ASSIGN_NULL("glGetTextureSubImage", getTextureSubImage);
        ASSIGN_NULL("glGetTransformFeedbacki64_v", getTransformFeedbacki64_v);
        ASSIGN_NULL("glGetTransformFeedbacki_v", getTransformFeedbacki_v);
        ASSIGN_NULL("glGetTransformFeedbackiv", getTransformFeedbackiv);
        ASSIGN_NULL("glGetVertexArrayIndexed64iv", getVertexArrayIndexed64iv);
        ASSIGN_NULL("glGetVertexArrayIndexediv", getVertexArrayIndexediv);
        ASSIGN_NULL("glGetVertexArrayiv", getVertexArrayiv);
        ASSIGN_NULL("glGetnCompressedTexImage", getnCompressedTexImage);
        ASSIGN_NULL("glGetnTexImage", getnTexImage);
        ASSIGN_NULL("glGetnUniformdv", getnUniformdv);
        ASSIGN_NULL("glGetnUniformfv", getnUniformfv);
        ASSIGN_NULL("glGetnUniformiv", getnUniformiv);
        ASSIGN_NULL("glGetnUniformuiv", getnUniformuiv);
        ASSIGN_NULL("glInvalidateNamedFramebufferData", invalidateNamedFramebufferData);
        ASSIGN_NULL("glInvalidateNamedFramebufferSubData", invalidateNamedFramebufferSubData);
        ASSIGN_NULL("glMapNamedBuffer", mapNamedBuffer);
        ASSIGN_NULL("glMapNamedBufferRange", mapNamedBufferRange);
        ASSIGN_NULL("glMemoryBarrierByRegion", memoryBarrierByRegion);
        ASSIGN_NULL("glNamedBufferData", namedBufferData);
        ASSIGN_NULL("glNamedBufferStorage", namedBufferStorage);
        ASSIGN_NULL("glNamedBufferSubData", namedBufferSubData);
        ASSIGN_NULL("glNamedFramebufferDrawBuffer", namedFramebufferDrawBuffer);
        ASSIGN_NULL("glNamedFramebufferDrawBuffers", namedFramebufferDrawBuffers);
        ASSIGN_NULL("glNamedFramebufferParameteri", namedFramebufferParameteri);
        ASSIGN_NULL("glNamedFramebufferReadBuffer", namedFramebufferReadBuffer);
        ASSIGN_NULL("glNamedFramebufferRenderbuffer", namedFramebufferRenderbuffer);
        ASSIGN_NULL("glNamedFramebufferTexture", namedFramebufferTexture);
        ASSIGN_NULL("glNamedFramebufferTextureLayer", namedFramebufferTextureLayer);
        ASSIGN_NULL("glNamedRenderbufferStorage", namedRenderbufferStorage);
        ASSIGN_NULL("glNamedRenderbufferStorageMultisample", namedRenderbufferStorageMultisample);
        ASSIGN_NULL("glReadnPixels", readnPixels);
        ASSIGN_NULL("glTextureBarrier", textureBarrier);
        ASSIGN_NULL("glTextureBuffer", textureBuffer);
        ASSIGN_NULL("glTextureBufferRange", textureBufferRange);
        ASSIGN_NULL("glTextureParameterIiv", textureParameterIiv);
        ASSIGN_NULL("glTextureParameterIuiv", textureParameterIuiv);
        ASSIGN_NULL("glTextureParameterf", textureParameterf);
        ASSIGN_NULL("glTextureParameterfv", textureParameterfv);
        ASSIGN_NULL("glTextureParameteri", textureParameteri);
        ASSIGN_NULL("glTextureParameteriv", textureParameteriv);
        ASSIGN_NULL("glTextureStorage1D", textureStorage1D);
        ASSIGN_NULL("glTextureStorage2D", textureStorage2D);
        ASSIGN_NULL("glTextureStorage2DMultisample", textureStorage2DMultisample);
        ASSIGN_NULL("glTextureStorage3D", textureStorage3D);
        ASSIGN_NULL("glTextureStorage3DMultisample", textureStorage3DMultisample);
        ASSIGN_NULL("glTextureSubImage1D", textureSubImage1D);
        ASSIGN_NULL("glTextureSubImage2D", textureSubImage2D);
        ASSIGN_NULL("glTextureSubImage3D", textureSubImage3D);
        ASSIGN_NULL("glTransformFeedbackBufferBase", transformFeedbackBufferBase);
        ASSIGN_NULL("glTransformFeedbackBufferRange", transformFeedbackBufferRange);
        ASSIGN_NULL("glUnmapNamedBuffer", unmapNamedBuffer);
        ASSIGN_NULL("glVertexArrayAttribBinding", vertexArrayAttribBinding);
        ASSIGN_NULL("glVertexArrayAttribFormat", vertexArrayAttribFormat);
        ASSIGN_NULL("glVertexArrayAttribIFormat", vertexArrayAttribIFormat);
        ASSIGN_NULL("glVertexArrayAttribLFormat", vertexArrayAttribLFormat);
        ASSIGN_NULL("glVertexArrayBindingDivisor", vertexArrayBindingDivisor);
        ASSIGN_NULL("glVertexArrayElementBuffer", vertexArrayElementBuffer);
        ASSIGN_NULL("glVertexArrayVertexBuffer", vertexArrayVertexBuffer);
        ASSIGN_NULL("glVertexArrayVertexBuffers", vertexArrayVertexBuffers);
    }

    if (extensions.count("GL_ARB_ES2_compatibility") != 0)
    {
        ASSIGN_NULL("glClearDepthf", clearDepthf);
        ASSIGN_NULL("glDepthRangef", depthRangef);
        ASSIGN_NULL("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN_NULL("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN_NULL("glShaderBinary", shaderBinary);
    }

    if (extensions.count("GL_ARB_ES3_1_compatibility") != 0)
    {
        ASSIGN_NULL("glMemoryBarrierByRegion", memoryBarrierByRegion);
    }

    if (extensions.count("GL_ARB_base_instance") != 0)
    {
        ASSIGN_NULL("glDrawArraysInstancedBaseInstance", drawArraysInstancedBaseInstance);
        ASSIGN_NULL("glDrawElementsInstancedBaseInstance", drawElementsInstancedBaseInstance);
        ASSIGN_NULL("glDrawElementsInstancedBaseVertexBaseInstance",
                    drawElementsInstancedBaseVertexBaseInstance);
    }

    if (extensions.count("GL_ARB_blend_func_extended") != 0)
    {
        ASSIGN_NULL("glBindFragDataLocationIndexed", bindFragDataLocationIndexed);
        ASSIGN_NULL("glGetFragDataIndex", getFragDataIndex);
    }

    if (extensions.count("GL_ARB_buffer_storage") != 0)
    {
        ASSIGN_NULL("glBufferStorage", bufferStorage);
    }

    if (extensions.count("GL_ARB_clear_buffer_object") != 0)
    {
        ASSIGN_NULL("glClearBufferData", clearBufferData);
        ASSIGN_NULL("glClearBufferSubData", clearBufferSubData);
    }

    if (extensions.count("GL_ARB_clear_texture") != 0)
    {
        ASSIGN_NULL("glClearTexImage", clearTexImage);
        ASSIGN_NULL("glClearTexSubImage", clearTexSubImage);
    }

    if (extensions.count("GL_ARB_clip_control") != 0)
    {
        ASSIGN_NULL("glClipControl", clipControl);
    }

    if (extensions.count("GL_ARB_compute_shader") != 0)
    {
        ASSIGN_NULL("glDispatchCompute", dispatchCompute);
        ASSIGN_NULL("glDispatchComputeIndirect", dispatchComputeIndirect);
    }

    if (extensions.count("GL_ARB_copy_buffer") != 0)
    {
        ASSIGN_NULL("glCopyBufferSubData", copyBufferSubData);
    }

    if (extensions.count("GL_ARB_copy_image") != 0)
    {
        ASSIGN_NULL("glCopyImageSubData", copyImageSubData);
    }

    if (extensions.count("GL_ARB_direct_state_access") != 0)
    {
        ASSIGN_NULL("glBindTextureUnit", bindTextureUnit);
        ASSIGN_NULL("glBlitNamedFramebuffer", blitNamedFramebuffer);
        ASSIGN_NULL("glCheckNamedFramebufferStatus", checkNamedFramebufferStatus);
        ASSIGN_NULL("glClearNamedBufferData", clearNamedBufferData);
        ASSIGN_NULL("glClearNamedBufferSubData", clearNamedBufferSubData);
        ASSIGN_NULL("glClearNamedFramebufferfi", clearNamedFramebufferfi);
        ASSIGN_NULL("glClearNamedFramebufferfv", clearNamedFramebufferfv);
        ASSIGN_NULL("glClearNamedFramebufferiv", clearNamedFramebufferiv);
        ASSIGN_NULL("glClearNamedFramebufferuiv", clearNamedFramebufferuiv);
        ASSIGN_NULL("glCompressedTextureSubImage1D", compressedTextureSubImage1D);
        ASSIGN_NULL("glCompressedTextureSubImage2D", compressedTextureSubImage2D);
        ASSIGN_NULL("glCompressedTextureSubImage3D", compressedTextureSubImage3D);
        ASSIGN_NULL("glCopyNamedBufferSubData", copyNamedBufferSubData);
        ASSIGN_NULL("glCopyTextureSubImage1D", copyTextureSubImage1D);
        ASSIGN_NULL("glCopyTextureSubImage2D", copyTextureSubImage2D);
        ASSIGN_NULL("glCopyTextureSubImage3D", copyTextureSubImage3D);
        ASSIGN_NULL("glCreateBuffers", createBuffers);
        ASSIGN_NULL("glCreateFramebuffers", createFramebuffers);
        ASSIGN_NULL("glCreateProgramPipelines", createProgramPipelines);
        ASSIGN_NULL("glCreateQueries", createQueries);
        ASSIGN_NULL("glCreateRenderbuffers", createRenderbuffers);
        ASSIGN_NULL("glCreateSamplers", createSamplers);
        ASSIGN_NULL("glCreateTextures", createTextures);
        ASSIGN_NULL("glCreateTransformFeedbacks", createTransformFeedbacks);
        ASSIGN_NULL("glCreateVertexArrays", createVertexArrays);
        ASSIGN_NULL("glDisableVertexArrayAttrib", disableVertexArrayAttrib);
        ASSIGN_NULL("glEnableVertexArrayAttrib", enableVertexArrayAttrib);
        ASSIGN_NULL("glFlushMappedNamedBufferRange", flushMappedNamedBufferRange);
        ASSIGN_NULL("glGenerateTextureMipmap", generateTextureMipmap);
        ASSIGN_NULL("glGetCompressedTextureImage", getCompressedTextureImage);
        ASSIGN_NULL("glGetNamedBufferParameteri64v", getNamedBufferParameteri64v);
        ASSIGN_NULL("glGetNamedBufferParameteriv", getNamedBufferParameteriv);
        ASSIGN_NULL("glGetNamedBufferPointerv", getNamedBufferPointerv);
        ASSIGN_NULL("glGetNamedBufferSubData", getNamedBufferSubData);
        ASSIGN_NULL("glGetNamedFramebufferAttachmentParameteriv",
                    getNamedFramebufferAttachmentParameteriv);
        ASSIGN_NULL("glGetNamedFramebufferParameteriv", getNamedFramebufferParameteriv);
        ASSIGN_NULL("glGetNamedRenderbufferParameteriv", getNamedRenderbufferParameteriv);
        ASSIGN_NULL("glGetQueryBufferObjecti64v", getQueryBufferObjecti64v);
        ASSIGN_NULL("glGetQueryBufferObjectiv", getQueryBufferObjectiv);
        ASSIGN_NULL("glGetQueryBufferObjectui64v", getQueryBufferObjectui64v);
        ASSIGN_NULL("glGetQueryBufferObjectuiv", getQueryBufferObjectuiv);
        ASSIGN_NULL("glGetTextureImage", getTextureImage);
        ASSIGN_NULL("glGetTextureLevelParameterfv", getTextureLevelParameterfv);
        ASSIGN_NULL("glGetTextureLevelParameteriv", getTextureLevelParameteriv);
        ASSIGN_NULL("glGetTextureParameterIiv", getTextureParameterIiv);
        ASSIGN_NULL("glGetTextureParameterIuiv", getTextureParameterIuiv);
        ASSIGN_NULL("glGetTextureParameterfv", getTextureParameterfv);
        ASSIGN_NULL("glGetTextureParameteriv", getTextureParameteriv);
        ASSIGN_NULL("glGetTransformFeedbacki64_v", getTransformFeedbacki64_v);
        ASSIGN_NULL("glGetTransformFeedbacki_v", getTransformFeedbacki_v);
        ASSIGN_NULL("glGetTransformFeedbackiv", getTransformFeedbackiv);
        ASSIGN_NULL("glGetVertexArrayIndexed64iv", getVertexArrayIndexed64iv);
        ASSIGN_NULL("glGetVertexArrayIndexediv", getVertexArrayIndexediv);
        ASSIGN_NULL("glGetVertexArrayiv", getVertexArrayiv);
        ASSIGN_NULL("glInvalidateNamedFramebufferData", invalidateNamedFramebufferData);
        ASSIGN_NULL("glInvalidateNamedFramebufferSubData", invalidateNamedFramebufferSubData);
        ASSIGN_NULL("glMapNamedBuffer", mapNamedBuffer);
        ASSIGN_NULL("glMapNamedBufferRange", mapNamedBufferRange);
        ASSIGN_NULL("glNamedBufferData", namedBufferData);
        ASSIGN_NULL("glNamedBufferStorage", namedBufferStorage);
        ASSIGN_NULL("glNamedBufferSubData", namedBufferSubData);
        ASSIGN_NULL("glNamedFramebufferDrawBuffer", namedFramebufferDrawBuffer);
        ASSIGN_NULL("glNamedFramebufferDrawBuffers", namedFramebufferDrawBuffers);
        ASSIGN_NULL("glNamedFramebufferParameteri", namedFramebufferParameteri);
        ASSIGN_NULL("glNamedFramebufferReadBuffer", namedFramebufferReadBuffer);
        ASSIGN_NULL("glNamedFramebufferRenderbuffer", namedFramebufferRenderbuffer);
        ASSIGN_NULL("glNamedFramebufferTexture", namedFramebufferTexture);
        ASSIGN_NULL("glNamedFramebufferTextureLayer", namedFramebufferTextureLayer);
        ASSIGN_NULL("glNamedRenderbufferStorage", namedRenderbufferStorage);
        ASSIGN_NULL("glNamedRenderbufferStorageMultisample", namedRenderbufferStorageMultisample);
        ASSIGN_NULL("glTextureBuffer", textureBuffer);
        ASSIGN_NULL("glTextureBufferRange", textureBufferRange);
        ASSIGN_NULL("glTextureParameterIiv", textureParameterIiv);
        ASSIGN_NULL("glTextureParameterIuiv", textureParameterIuiv);
        ASSIGN_NULL("glTextureParameterf", textureParameterf);
        ASSIGN_NULL("glTextureParameterfv", textureParameterfv);
        ASSIGN_NULL("glTextureParameteri", textureParameteri);
        ASSIGN_NULL("glTextureParameteriv", textureParameteriv);
        ASSIGN_NULL("glTextureStorage1D", textureStorage1D);
        ASSIGN_NULL("glTextureStorage2D", textureStorage2D);
        ASSIGN_NULL("glTextureStorage2DMultisample", textureStorage2DMultisample);
        ASSIGN_NULL("glTextureStorage3D", textureStorage3D);
        ASSIGN_NULL("glTextureStorage3DMultisample", textureStorage3DMultisample);
        ASSIGN_NULL("glTextureSubImage1D", textureSubImage1D);
        ASSIGN_NULL("glTextureSubImage2D", textureSubImage2D);
        ASSIGN_NULL("glTextureSubImage3D", textureSubImage3D);
        ASSIGN_NULL("glTransformFeedbackBufferBase", transformFeedbackBufferBase);
        ASSIGN_NULL("glTransformFeedbackBufferRange", transformFeedbackBufferRange);
        ASSIGN_NULL("glUnmapNamedBuffer", unmapNamedBuffer);
        ASSIGN_NULL("glVertexArrayAttribBinding", vertexArrayAttribBinding);
        ASSIGN_NULL("glVertexArrayAttribFormat", vertexArrayAttribFormat);
        ASSIGN_NULL("glVertexArrayAttribIFormat", vertexArrayAttribIFormat);
        ASSIGN_NULL("glVertexArrayAttribLFormat", vertexArrayAttribLFormat);
        ASSIGN_NULL("glVertexArrayBindingDivisor", vertexArrayBindingDivisor);
        ASSIGN_NULL("glVertexArrayElementBuffer", vertexArrayElementBuffer);
        ASSIGN_NULL("glVertexArrayVertexBuffer", vertexArrayVertexBuffer);
        ASSIGN_NULL("glVertexArrayVertexBuffers", vertexArrayVertexBuffers);
    }

    if (extensions.count("GL_ARB_draw_elements_base_vertex") != 0)
    {
        ASSIGN_NULL("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN_NULL("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN_NULL("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN_NULL("glMultiDrawElementsBaseVertex", multiDrawElementsBaseVertex);
    }

    if (extensions.count("GL_ARB_draw_indirect") != 0)
    {
        ASSIGN_NULL("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN_NULL("glDrawElementsIndirect", drawElementsIndirect);
    }

    if (extensions.count("GL_ARB_framebuffer_no_attachments") != 0)
    {
        ASSIGN_NULL("glFramebufferParameteri", framebufferParameteri);
        ASSIGN_NULL("glGetFramebufferParameteriv", getFramebufferParameteriv);
    }

    if (extensions.count("GL_ARB_framebuffer_object") != 0)
    {
        ASSIGN_NULL("glBindFramebuffer", bindFramebuffer);
        ASSIGN_NULL("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN_NULL("glBlitFramebuffer", blitFramebuffer);
        ASSIGN_NULL("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN_NULL("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN_NULL("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN_NULL("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN_NULL("glFramebufferTexture1D", framebufferTexture1D);
        ASSIGN_NULL("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN_NULL("glFramebufferTexture3D", framebufferTexture3D);
        ASSIGN_NULL("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN_NULL("glGenFramebuffers", genFramebuffers);
        ASSIGN_NULL("glGenRenderbuffers", genRenderbuffers);
        ASSIGN_NULL("glGenerateMipmap", generateMipmap);
        ASSIGN_NULL("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN_NULL("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN_NULL("glIsFramebuffer", isFramebuffer);
        ASSIGN_NULL("glIsRenderbuffer", isRenderbuffer);
        ASSIGN_NULL("glRenderbufferStorage", renderbufferStorage);
        ASSIGN_NULL("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
    }

    if (extensions.count("GL_ARB_get_program_binary") != 0)
    {
        ASSIGN_NULL("glGetProgramBinary", getProgramBinary);
        ASSIGN_NULL("glProgramBinary", programBinary);
        ASSIGN_NULL("glProgramParameteri", programParameteri);
    }

    if (extensions.count("GL_ARB_get_texture_sub_image") != 0)
    {
        ASSIGN_NULL("glGetCompressedTextureSubImage", getCompressedTextureSubImage);
        ASSIGN_NULL("glGetTextureSubImage", getTextureSubImage);
    }

    if (extensions.count("GL_ARB_gpu_shader_fp64") != 0)
    {
        ASSIGN_NULL("glGetUniformdv", getUniformdv);
        ASSIGN_NULL("glUniform1d", uniform1d);
        ASSIGN_NULL("glUniform1dv", uniform1dv);
        ASSIGN_NULL("glUniform2d", uniform2d);
        ASSIGN_NULL("glUniform2dv", uniform2dv);
        ASSIGN_NULL("glUniform3d", uniform3d);
        ASSIGN_NULL("glUniform3dv", uniform3dv);
        ASSIGN_NULL("glUniform4d", uniform4d);
        ASSIGN_NULL("glUniform4dv", uniform4dv);
        ASSIGN_NULL("glUniformMatrix2dv", uniformMatrix2dv);
        ASSIGN_NULL("glUniformMatrix2x3dv", uniformMatrix2x3dv);
        ASSIGN_NULL("glUniformMatrix2x4dv", uniformMatrix2x4dv);
        ASSIGN_NULL("glUniformMatrix3dv", uniformMatrix3dv);
        ASSIGN_NULL("glUniformMatrix3x2dv", uniformMatrix3x2dv);
        ASSIGN_NULL("glUniformMatrix3x4dv", uniformMatrix3x4dv);
        ASSIGN_NULL("glUniformMatrix4dv", uniformMatrix4dv);
        ASSIGN_NULL("glUniformMatrix4x2dv", uniformMatrix4x2dv);
        ASSIGN_NULL("glUniformMatrix4x3dv", uniformMatrix4x3dv);
    }

    if (extensions.count("GL_ARB_imaging") != 0)
    {
        ASSIGN_NULL("glBlendColor", blendColor);
        ASSIGN_NULL("glBlendEquation", blendEquation);
    }

    if (extensions.count("GL_ARB_internalformat_query") != 0)
    {
        ASSIGN_NULL("glGetInternalformativ", getInternalformativ);
    }

    if (extensions.count("GL_ARB_internalformat_query2") != 0)
    {
        ASSIGN_NULL("glGetInternalformati64v", getInternalformati64v);
    }

    if (extensions.count("GL_ARB_invalidate_subdata") != 0)
    {
        ASSIGN_NULL("glInvalidateBufferData", invalidateBufferData);
        ASSIGN_NULL("glInvalidateBufferSubData", invalidateBufferSubData);
        ASSIGN_NULL("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN_NULL("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN_NULL("glInvalidateTexImage", invalidateTexImage);
        ASSIGN_NULL("glInvalidateTexSubImage", invalidateTexSubImage);
    }

    if (extensions.count("GL_ARB_map_buffer_range") != 0)
    {
        ASSIGN_NULL("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN_NULL("glMapBufferRange", mapBufferRange);
    }

    if (extensions.count("GL_ARB_multi_bind") != 0)
    {
        ASSIGN_NULL("glBindBuffersBase", bindBuffersBase);
        ASSIGN_NULL("glBindBuffersRange", bindBuffersRange);
        ASSIGN_NULL("glBindImageTextures", bindImageTextures);
        ASSIGN_NULL("glBindSamplers", bindSamplers);
        ASSIGN_NULL("glBindTextures", bindTextures);
        ASSIGN_NULL("glBindVertexBuffers", bindVertexBuffers);
    }

    if (extensions.count("GL_ARB_multi_draw_indirect") != 0)
    {
        ASSIGN_NULL("glMultiDrawArraysIndirect", multiDrawArraysIndirect);
        ASSIGN_NULL("glMultiDrawElementsIndirect", multiDrawElementsIndirect);
    }

    if (extensions.count("GL_ARB_program_interface_query") != 0)
    {
        ASSIGN_NULL("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN_NULL("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN_NULL("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN_NULL("glGetProgramResourceLocationIndex", getProgramResourceLocationIndex);
        ASSIGN_NULL("glGetProgramResourceName", getProgramResourceName);
        ASSIGN_NULL("glGetProgramResourceiv", getProgramResourceiv);
    }

    if (extensions.count("GL_ARB_provoking_vertex") != 0)
    {
        ASSIGN_NULL("glProvokingVertex", provokingVertex);
    }

    if (extensions.count("GL_ARB_sampler_objects") != 0)
    {
        ASSIGN_NULL("glBindSampler", bindSampler);
        ASSIGN_NULL("glDeleteSamplers", deleteSamplers);
        ASSIGN_NULL("glGenSamplers", genSamplers);
        ASSIGN_NULL("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN_NULL("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN_NULL("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN_NULL("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN_NULL("glIsSampler", isSampler);
        ASSIGN_NULL("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN_NULL("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN_NULL("glSamplerParameterf", samplerParameterf);
        ASSIGN_NULL("glSamplerParameterfv", samplerParameterfv);
        ASSIGN_NULL("glSamplerParameteri", samplerParameteri);
        ASSIGN_NULL("glSamplerParameteriv", samplerParameteriv);
    }

    if (extensions.count("GL_ARB_separate_shader_objects") != 0)
    {
        ASSIGN_NULL("glActiveShaderProgram", activeShaderProgram);
        ASSIGN_NULL("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN_NULL("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN_NULL("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN_NULL("glGenProgramPipelines", genProgramPipelines);
        ASSIGN_NULL("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN_NULL("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN_NULL("glIsProgramPipeline", isProgramPipeline);
        ASSIGN_NULL("glProgramUniform1d", programUniform1d);
        ASSIGN_NULL("glProgramUniform1dv", programUniform1dv);
        ASSIGN_NULL("glProgramUniform1f", programUniform1f);
        ASSIGN_NULL("glProgramUniform1fv", programUniform1fv);
        ASSIGN_NULL("glProgramUniform1i", programUniform1i);
        ASSIGN_NULL("glProgramUniform1iv", programUniform1iv);
        ASSIGN_NULL("glProgramUniform1ui", programUniform1ui);
        ASSIGN_NULL("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN_NULL("glProgramUniform2d", programUniform2d);
        ASSIGN_NULL("glProgramUniform2dv", programUniform2dv);
        ASSIGN_NULL("glProgramUniform2f", programUniform2f);
        ASSIGN_NULL("glProgramUniform2fv", programUniform2fv);
        ASSIGN_NULL("glProgramUniform2i", programUniform2i);
        ASSIGN_NULL("glProgramUniform2iv", programUniform2iv);
        ASSIGN_NULL("glProgramUniform2ui", programUniform2ui);
        ASSIGN_NULL("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN_NULL("glProgramUniform3d", programUniform3d);
        ASSIGN_NULL("glProgramUniform3dv", programUniform3dv);
        ASSIGN_NULL("glProgramUniform3f", programUniform3f);
        ASSIGN_NULL("glProgramUniform3fv", programUniform3fv);
        ASSIGN_NULL("glProgramUniform3i", programUniform3i);
        ASSIGN_NULL("glProgramUniform3iv", programUniform3iv);
        ASSIGN_NULL("glProgramUniform3ui", programUniform3ui);
        ASSIGN_NULL("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN_NULL("glProgramUniform4d", programUniform4d);
        ASSIGN_NULL("glProgramUniform4dv", programUniform4dv);
        ASSIGN_NULL("glProgramUniform4f", programUniform4f);
        ASSIGN_NULL("glProgramUniform4fv", programUniform4fv);
        ASSIGN_NULL("glProgramUniform4i", programUniform4i);
        ASSIGN_NULL("glProgramUniform4iv", programUniform4iv);
        ASSIGN_NULL("glProgramUniform4ui", programUniform4ui);
        ASSIGN_NULL("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN_NULL("glProgramUniformMatrix2dv", programUniformMatrix2dv);
        ASSIGN_NULL("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN_NULL("glProgramUniformMatrix2x3dv", programUniformMatrix2x3dv);
        ASSIGN_NULL("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN_NULL("glProgramUniformMatrix2x4dv", programUniformMatrix2x4dv);
        ASSIGN_NULL("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN_NULL("glProgramUniformMatrix3dv", programUniformMatrix3dv);
        ASSIGN_NULL("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN_NULL("glProgramUniformMatrix3x2dv", programUniformMatrix3x2dv);
        ASSIGN_NULL("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN_NULL("glProgramUniformMatrix3x4dv", programUniformMatrix3x4dv);
        ASSIGN_NULL("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN_NULL("glProgramUniformMatrix4dv", programUniformMatrix4dv);
        ASSIGN_NULL("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN_NULL("glProgramUniformMatrix4x2dv", programUniformMatrix4x2dv);
        ASSIGN_NULL("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN_NULL("glProgramUniformMatrix4x3dv", programUniformMatrix4x3dv);
        ASSIGN_NULL("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN_NULL("glUseProgramStages", useProgramStages);
        ASSIGN_NULL("glValidateProgramPipeline", validateProgramPipeline);
    }

    if (extensions.count("GL_ARB_shader_atomic_counters") != 0)
    {
        ASSIGN_NULL("glGetActiveAtomicCounterBufferiv", getActiveAtomicCounterBufferiv);
    }

    if (extensions.count("GL_ARB_shader_image_load_store") != 0)
    {
        ASSIGN_NULL("glBindImageTexture", bindImageTexture);
        ASSIGN_NULL("glMemoryBarrier", memoryBarrier);
    }

    if (extensions.count("GL_ARB_shader_storage_buffer_object") != 0)
    {
        ASSIGN_NULL("glShaderStorageBlockBinding", shaderStorageBlockBinding);
    }

    if (extensions.count("GL_ARB_shader_subroutine") != 0)
    {
        ASSIGN_NULL("glGetActiveSubroutineName", getActiveSubroutineName);
        ASSIGN_NULL("glGetActiveSubroutineUniformName", getActiveSubroutineUniformName);
        ASSIGN_NULL("glGetActiveSubroutineUniformiv", getActiveSubroutineUniformiv);
        ASSIGN_NULL("glGetProgramStageiv", getProgramStageiv);
        ASSIGN_NULL("glGetSubroutineIndex", getSubroutineIndex);
        ASSIGN_NULL("glGetSubroutineUniformLocation", getSubroutineUniformLocation);
        ASSIGN_NULL("glGetUniformSubroutineuiv", getUniformSubroutineuiv);
        ASSIGN_NULL("glUniformSubroutinesuiv", uniformSubroutinesuiv);
    }

    if (extensions.count("GL_ARB_sync") != 0)
    {
        ASSIGN_NULL("glClientWaitSync", clientWaitSync);
        ASSIGN_NULL("glDeleteSync", deleteSync);
        ASSIGN_NULL("glFenceSync", fenceSync);
        ASSIGN_NULL("glGetInteger64v", getInteger64v);
        ASSIGN_NULL("glGetSynciv", getSynciv);
        ASSIGN_NULL("glIsSync", isSync);
        ASSIGN_NULL("glWaitSync", waitSync);
    }

    if (extensions.count("GL_ARB_tessellation_shader") != 0)
    {
        ASSIGN_NULL("glPatchParameterfv", patchParameterfv);
        ASSIGN_NULL("glPatchParameteri", patchParameteri);
    }

    if (extensions.count("GL_ARB_texture_barrier") != 0)
    {
        ASSIGN_NULL("glTextureBarrier", textureBarrier);
    }

    if (extensions.count("GL_ARB_texture_buffer_range") != 0)
    {
        ASSIGN_NULL("glTexBufferRange", texBufferRange);
    }

    if (extensions.count("GL_ARB_texture_multisample") != 0)
    {
        ASSIGN_NULL("glGetMultisamplefv", getMultisamplefv);
        ASSIGN_NULL("glSampleMaski", sampleMaski);
        ASSIGN_NULL("glTexImage2DMultisample", texImage2DMultisample);
        ASSIGN_NULL("glTexImage3DMultisample", texImage3DMultisample);
    }

    if (extensions.count("GL_ARB_texture_storage") != 0)
    {
        ASSIGN_NULL("glTexStorage1D", texStorage1D);
        ASSIGN_NULL("glTexStorage2D", texStorage2D);
        ASSIGN_NULL("glTexStorage3D", texStorage3D);
    }

    if (extensions.count("GL_ARB_texture_storage_multisample") != 0)
    {
        ASSIGN_NULL("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN_NULL("glTexStorage3DMultisample", texStorage3DMultisample);
    }

    if (extensions.count("GL_ARB_texture_view") != 0)
    {
        ASSIGN_NULL("glTextureView", textureView);
    }

    if (extensions.count("GL_ARB_timer_query") != 0)
    {
        ASSIGN_NULL("glGetQueryObjecti64v", getQueryObjecti64v);
        ASSIGN_NULL("glGetQueryObjectui64v", getQueryObjectui64v);
        ASSIGN_NULL("glQueryCounter", queryCounter);
    }

    if (extensions.count("GL_ARB_transform_feedback2") != 0)
    {
        ASSIGN_NULL("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN_NULL("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN_NULL("glDrawTransformFeedback", drawTransformFeedback);
        ASSIGN_NULL("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN_NULL("glIsTransformFeedback", isTransformFeedback);
        ASSIGN_NULL("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN_NULL("glResumeTransformFeedback", resumeTransformFeedback);
    }

    if (extensions.count("GL_ARB_transform_feedback3") != 0)
    {
        ASSIGN_NULL("glBeginQueryIndexed", beginQueryIndexed);
        ASSIGN_NULL("glDrawTransformFeedbackStream", drawTransformFeedbackStream);
        ASSIGN_NULL("glEndQueryIndexed", endQueryIndexed);
        ASSIGN_NULL("glGetQueryIndexediv", getQueryIndexediv);
    }

    if (extensions.count("GL_ARB_transform_feedback_instanced") != 0)
    {
        ASSIGN_NULL("glDrawTransformFeedbackInstanced", drawTransformFeedbackInstanced);
        ASSIGN_NULL("glDrawTransformFeedbackStreamInstanced", drawTransformFeedbackStreamInstanced);
    }

    if (extensions.count("GL_ARB_uniform_buffer_object") != 0)
    {
        ASSIGN_NULL("glBindBufferBase", bindBufferBase);
        ASSIGN_NULL("glBindBufferRange", bindBufferRange);
        ASSIGN_NULL("glGetIntegeri_v", getIntegeri_v);
        ASSIGN_NULL("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN_NULL("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN_NULL("glGetActiveUniformName", getActiveUniformName);
        ASSIGN_NULL("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN_NULL("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN_NULL("glGetUniformIndices", getUniformIndices);
        ASSIGN_NULL("glUniformBlockBinding", uniformBlockBinding);
    }

    if (extensions.count("GL_ARB_vertex_array_object") != 0)
    {
        ASSIGN_NULL("glBindVertexArray", bindVertexArray);
        ASSIGN_NULL("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN_NULL("glGenVertexArrays", genVertexArrays);
        ASSIGN_NULL("glIsVertexArray", isVertexArray);
    }

    if (extensions.count("GL_ARB_vertex_attrib_64bit") != 0)
    {
        ASSIGN_NULL("glGetVertexAttribLdv", getVertexAttribLdv);
        ASSIGN_NULL("glVertexAttribL1d", vertexAttribL1d);
        ASSIGN_NULL("glVertexAttribL1dv", vertexAttribL1dv);
        ASSIGN_NULL("glVertexAttribL2d", vertexAttribL2d);
        ASSIGN_NULL("glVertexAttribL2dv", vertexAttribL2dv);
        ASSIGN_NULL("glVertexAttribL3d", vertexAttribL3d);
        ASSIGN_NULL("glVertexAttribL3dv", vertexAttribL3dv);
        ASSIGN_NULL("glVertexAttribL4d", vertexAttribL4d);
        ASSIGN_NULL("glVertexAttribL4dv", vertexAttribL4dv);
        ASSIGN_NULL("glVertexAttribLPointer", vertexAttribLPointer);
    }

    if (extensions.count("GL_ARB_vertex_attrib_binding") != 0)
    {
        ASSIGN_NULL("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN_NULL("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN_NULL("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN_NULL("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN_NULL("glVertexAttribLFormat", vertexAttribLFormat);
        ASSIGN_NULL("glVertexBindingDivisor", vertexBindingDivisor);
    }

    if (extensions.count("GL_ARB_vertex_type_2_10_10_10_rev") != 0)
    {
        ASSIGN_NULL("glVertexAttribP1ui", vertexAttribP1ui);
        ASSIGN_NULL("glVertexAttribP1uiv", vertexAttribP1uiv);
        ASSIGN_NULL("glVertexAttribP2ui", vertexAttribP2ui);
        ASSIGN_NULL("glVertexAttribP2uiv", vertexAttribP2uiv);
        ASSIGN_NULL("glVertexAttribP3ui", vertexAttribP3ui);
        ASSIGN_NULL("glVertexAttribP3uiv", vertexAttribP3uiv);
        ASSIGN_NULL("glVertexAttribP4ui", vertexAttribP4ui);
        ASSIGN_NULL("glVertexAttribP4uiv", vertexAttribP4uiv);
    }

    if (extensions.count("GL_ARB_viewport_array") != 0)
    {
        ASSIGN_NULL("glDepthRangeArrayv", depthRangeArrayv);
        ASSIGN_NULL("glDepthRangeIndexed", depthRangeIndexed);
        ASSIGN_NULL("glGetDoublei_v", getDoublei_v);
        ASSIGN_NULL("glGetFloati_v", getFloati_v);
        ASSIGN_NULL("glScissorArrayv", scissorArrayv);
        ASSIGN_NULL("glScissorIndexed", scissorIndexed);
        ASSIGN_NULL("glScissorIndexedv", scissorIndexedv);
        ASSIGN_NULL("glViewportArrayv", viewportArrayv);
        ASSIGN_NULL("glViewportIndexedf", viewportIndexedf);
        ASSIGN_NULL("glViewportIndexedfv", viewportIndexedfv);
    }

    if (extensions.count("GL_EXT_direct_state_access") != 0)
    {
        ASSIGN_NULL("glMatrixLoadfEXT", matrixLoadfEXT);
    }

    if (extensions.count("GL_KHR_debug") != 0)
    {
        ASSIGN_NULL("glDebugMessageCallback", debugMessageCallback);
        ASSIGN_NULL("glDebugMessageControl", debugMessageControl);
        ASSIGN_NULL("glDebugMessageInsert", debugMessageInsert);
        ASSIGN_NULL("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN_NULL("glGetPointerv", getPointerv);
        ASSIGN_NULL("glGetObjectLabel", getObjectLabel);
        ASSIGN_NULL("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN_NULL("glObjectLabel", objectLabel);
        ASSIGN_NULL("glObjectPtrLabel", objectPtrLabel);
        ASSIGN_NULL("glPopDebugGroup", popDebugGroup);
        ASSIGN_NULL("glPushDebugGroup", pushDebugGroup);
    }

    if (extensions.count("GL_KHR_robustness") != 0)
    {
        ASSIGN_NULL("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN_NULL("glGetnUniformfv", getnUniformfv);
        ASSIGN_NULL("glGetnUniformiv", getnUniformiv);
        ASSIGN_NULL("glGetnUniformuiv", getnUniformuiv);
        ASSIGN_NULL("glReadnPixels", readnPixels);
    }

    if (extensions.count("GL_NV_fence") != 0)
    {
        ASSIGN_NULL("glDeleteFencesNV", deleteFencesNV);
        ASSIGN_NULL("glGenFencesNV", genFencesNV);
        ASSIGN_NULL("glIsFenceNV", isFenceNV);
        ASSIGN_NULL("glTestFenceNV", testFenceNV);
        ASSIGN_NULL("glGetFenceivNV", getFenceivNV);
        ASSIGN_NULL("glFinishFenceNV", finishFenceNV);
        ASSIGN_NULL("glSetFenceNV", setFenceNV);
    }

    if (extensions.count("GL_NV_framebuffer_mixed_samples") != 0)
    {
        ASSIGN_NULL("glCoverageModulationNV", coverageModulationNV);
    }

    if (extensions.count("GL_NV_internalformat_sample_query") != 0)
    {
        ASSIGN_NULL("glGetInternalformatSampleivNV", getInternalformatSampleivNV);
    }

    if (extensions.count("GL_NV_path_rendering") != 0)
    {
        ASSIGN_NULL("glMatrixLoadfEXT", matrixLoadfEXT);
        ASSIGN_NULL("glGenPathsNV", genPathsNV);
        ASSIGN_NULL("glDeletePathsNV", deletePathsNV);
        ASSIGN_NULL("glPathCommandsNV", pathCommandsNV);
        ASSIGN_NULL("glIsPathNV", isPathNV);
        ASSIGN_NULL("glPathParameterfNV", pathParameterfNV);
        ASSIGN_NULL("glPathParameteriNV", pathParameteriNV);
        ASSIGN_NULL("glGetPathParameterfvNV", getPathParameterfvNV);
        ASSIGN_NULL("glGetPathParameterivNV", getPathParameterivNV);
        ASSIGN_NULL("glPathStencilFuncNV", pathStencilFuncNV);
        ASSIGN_NULL("glStencilFillPathNV", stencilFillPathNV);
        ASSIGN_NULL("glStencilStrokePathNV", stencilStrokePathNV);
        ASSIGN_NULL("glCoverFillPathNV", coverFillPathNV);
        ASSIGN_NULL("glCoverStrokePathNV", coverStrokePathNV);
        ASSIGN_NULL("glStencilThenCoverFillPathNV", stencilThenCoverFillPathNV);
        ASSIGN_NULL("glStencilThenCoverStrokePathNV", stencilThenCoverStrokePathNV);
        ASSIGN_NULL("glCoverFillPathInstancedNV", coverFillPathInstancedNV);
        ASSIGN_NULL("glCoverStrokePathInstancedNV", coverStrokePathInstancedNV);
        ASSIGN_NULL("glStencilFillPathInstancedNV", stencilFillPathInstancedNV);
        ASSIGN_NULL("glStencilStrokePathInstancedNV", stencilStrokePathInstancedNV);
        ASSIGN_NULL("glStencilThenCoverFillPathInstancedNV", stencilThenCoverFillPathInstancedNV);
        ASSIGN_NULL("glStencilThenCoverStrokePathInstancedNV",
                    stencilThenCoverStrokePathInstancedNV);
        ASSIGN_NULL("glProgramPathFragmentInputGenNV", programPathFragmentInputGenNV);
    }
}

void InitializeTableGLESNULL(DispatchTableGL *table,
                             FunctionsGL *functionsGL,
                             const std::set<std::string> &extensions)
{
    const gl::Version &version = functionsGL->version;

    if (version >= gl::Version(2, 0))
    {
        ASSIGN_NULL("glBlendFuncSeparate", blendFuncSeparate);
        ASSIGN_NULL("glBindBuffer", bindBuffer);
        ASSIGN_NULL("glBufferData", bufferData);
        ASSIGN_NULL("glBufferSubData", bufferSubData);
        ASSIGN_NULL("glDeleteBuffers", deleteBuffers);
        ASSIGN_NULL("glGenBuffers", genBuffers);
        ASSIGN_NULL("glGetBufferParameteriv", getBufferParameteriv);
        ASSIGN_NULL("glIsBuffer", isBuffer);
        ASSIGN_NULL("glBlendFunc", blendFunc);
        ASSIGN_NULL("glClear", clear);
        ASSIGN_NULL("glClearColor", clearColor);
        ASSIGN_NULL("glClearStencil", clearStencil);
        ASSIGN_NULL("glColorMask", colorMask);
        ASSIGN_NULL("glCullFace", cullFace);
        ASSIGN_NULL("glDepthFunc", depthFunc);
        ASSIGN_NULL("glDepthMask", depthMask);
        ASSIGN_NULL("glDisable", disable);
        ASSIGN_NULL("glEnable", enable);
        ASSIGN_NULL("glFinish", finish);
        ASSIGN_NULL("glFlush", flush);
        ASSIGN_NULL("glFrontFace", frontFace);
        ASSIGN_NULL("glGetBooleanv", getBooleanv);
        ASSIGN_NULL("glGetError", getError);
        ASSIGN_NULL("glGetFloatv", getFloatv);
        ASSIGN_NULL("glGetIntegerv", getIntegerv);
        ASSIGN_NULL("glGetString", getString);
        ASSIGN_NULL("glGetTexParameterfv", getTexParameterfv);
        ASSIGN_NULL("glGetTexParameteriv", getTexParameteriv);
        ASSIGN_NULL("glHint", hint);
        ASSIGN_NULL("glIsEnabled", isEnabled);
        ASSIGN_NULL("glLineWidth", lineWidth);
        ASSIGN_NULL("glPixelStorei", pixelStorei);
        ASSIGN_NULL("glReadPixels", readPixels);
        ASSIGN_NULL("glScissor", scissor);
        ASSIGN_NULL("glStencilFunc", stencilFunc);
        ASSIGN_NULL("glStencilMask", stencilMask);
        ASSIGN_NULL("glStencilOp", stencilOp);
        ASSIGN_NULL("glTexImage2D", texImage2D);
        ASSIGN_NULL("glTexParameterf", texParameterf);
        ASSIGN_NULL("glTexParameterfv", texParameterfv);
        ASSIGN_NULL("glTexParameteri", texParameteri);
        ASSIGN_NULL("glTexParameteriv", texParameteriv);
        ASSIGN_NULL("glViewport", viewport);
        ASSIGN_NULL("glBindTexture", bindTexture);
        ASSIGN_NULL("glCopyTexImage2D", copyTexImage2D);
        ASSIGN_NULL("glCopyTexSubImage2D", copyTexSubImage2D);
        ASSIGN_NULL("glDeleteTextures", deleteTextures);
        ASSIGN_NULL("glDrawArrays", drawArrays);
        ASSIGN_NULL("glDrawElements", drawElements);
        ASSIGN_NULL("glGenTextures", genTextures);
        ASSIGN_NULL("glIsTexture", isTexture);
        ASSIGN_NULL("glPolygonOffset", polygonOffset);
        ASSIGN_NULL("glTexSubImage2D", texSubImage2D);
        ASSIGN_NULL("glBlendColor", blendColor);
        ASSIGN_NULL("glBlendEquation", blendEquation);
        ASSIGN_NULL("glActiveTexture", activeTexture);
        ASSIGN_NULL("glCompressedTexImage2D", compressedTexImage2D);
        ASSIGN_NULL("glCompressedTexSubImage2D", compressedTexSubImage2D);
        ASSIGN_NULL("glSampleCoverage", sampleCoverage);
        ASSIGN_NULL("glBindFramebuffer", bindFramebuffer);
        ASSIGN_NULL("glBindRenderbuffer", bindRenderbuffer);
        ASSIGN_NULL("glCheckFramebufferStatus", checkFramebufferStatus);
        ASSIGN_NULL("glDeleteFramebuffers", deleteFramebuffers);
        ASSIGN_NULL("glDeleteRenderbuffers", deleteRenderbuffers);
        ASSIGN_NULL("glFramebufferRenderbuffer", framebufferRenderbuffer);
        ASSIGN_NULL("glFramebufferTexture2D", framebufferTexture2D);
        ASSIGN_NULL("glGenFramebuffers", genFramebuffers);
        ASSIGN_NULL("glGenRenderbuffers", genRenderbuffers);
        ASSIGN_NULL("glGenerateMipmap", generateMipmap);
        ASSIGN_NULL("glGetFramebufferAttachmentParameteriv", getFramebufferAttachmentParameteriv);
        ASSIGN_NULL("glGetRenderbufferParameteriv", getRenderbufferParameteriv);
        ASSIGN_NULL("glIsFramebuffer", isFramebuffer);
        ASSIGN_NULL("glIsRenderbuffer", isRenderbuffer);
        ASSIGN_NULL("glRenderbufferStorage", renderbufferStorage);
        ASSIGN_NULL("glAttachShader", attachShader);
        ASSIGN_NULL("glBindAttribLocation", bindAttribLocation);
        ASSIGN_NULL("glBlendEquationSeparate", blendEquationSeparate);
        ASSIGN_NULL("glCompileShader", compileShader);
        ASSIGN_NULL("glCreateProgram", createProgram);
        ASSIGN_NULL("glCreateShader", createShader);
        ASSIGN_NULL("glDeleteProgram", deleteProgram);
        ASSIGN_NULL("glDeleteShader", deleteShader);
        ASSIGN_NULL("glDetachShader", detachShader);
        ASSIGN_NULL("glDisableVertexAttribArray", disableVertexAttribArray);
        ASSIGN_NULL("glEnableVertexAttribArray", enableVertexAttribArray);
        ASSIGN_NULL("glGetActiveAttrib", getActiveAttrib);
        ASSIGN_NULL("glGetActiveUniform", getActiveUniform);
        ASSIGN_NULL("glGetAttachedShaders", getAttachedShaders);
        ASSIGN_NULL("glGetAttribLocation", getAttribLocation);
        ASSIGN_NULL("glGetProgramInfoLog", getProgramInfoLog);
        ASSIGN_NULL("glGetProgramiv", getProgramiv);
        ASSIGN_NULL("glGetShaderInfoLog", getShaderInfoLog);
        ASSIGN_NULL("glGetShaderSource", getShaderSource);
        ASSIGN_NULL("glGetShaderiv", getShaderiv);
        ASSIGN_NULL("glGetUniformLocation", getUniformLocation);
        ASSIGN_NULL("glGetUniformfv", getUniformfv);
        ASSIGN_NULL("glGetUniformiv", getUniformiv);
        ASSIGN_NULL("glGetVertexAttribPointerv", getVertexAttribPointerv);
        ASSIGN_NULL("glGetVertexAttribfv", getVertexAttribfv);
        ASSIGN_NULL("glGetVertexAttribiv", getVertexAttribiv);
        ASSIGN_NULL("glIsProgram", isProgram);
        ASSIGN_NULL("glIsShader", isShader);
        ASSIGN_NULL("glLinkProgram", linkProgram);
        ASSIGN_NULL("glShaderSource", shaderSource);
        ASSIGN_NULL("glStencilFuncSeparate", stencilFuncSeparate);
        ASSIGN_NULL("glStencilMaskSeparate", stencilMaskSeparate);
        ASSIGN_NULL("glStencilOpSeparate", stencilOpSeparate);
        ASSIGN_NULL("glUniform1f", uniform1f);
        ASSIGN_NULL("glUniform1fv", uniform1fv);
        ASSIGN_NULL("glUniform1i", uniform1i);
        ASSIGN_NULL("glUniform1iv", uniform1iv);
        ASSIGN_NULL("glUniform2f", uniform2f);
        ASSIGN_NULL("glUniform2fv", uniform2fv);
        ASSIGN_NULL("glUniform2i", uniform2i);
        ASSIGN_NULL("glUniform2iv", uniform2iv);
        ASSIGN_NULL("glUniform3f", uniform3f);
        ASSIGN_NULL("glUniform3fv", uniform3fv);
        ASSIGN_NULL("glUniform3i", uniform3i);
        ASSIGN_NULL("glUniform3iv", uniform3iv);
        ASSIGN_NULL("glUniform4f", uniform4f);
        ASSIGN_NULL("glUniform4fv", uniform4fv);
        ASSIGN_NULL("glUniform4i", uniform4i);
        ASSIGN_NULL("glUniform4iv", uniform4iv);
        ASSIGN_NULL("glUniformMatrix2fv", uniformMatrix2fv);
        ASSIGN_NULL("glUniformMatrix3fv", uniformMatrix3fv);
        ASSIGN_NULL("glUniformMatrix4fv", uniformMatrix4fv);
        ASSIGN_NULL("glUseProgram", useProgram);
        ASSIGN_NULL("glValidateProgram", validateProgram);
        ASSIGN_NULL("glVertexAttrib1f", vertexAttrib1f);
        ASSIGN_NULL("glVertexAttrib1fv", vertexAttrib1fv);
        ASSIGN_NULL("glVertexAttrib2f", vertexAttrib2f);
        ASSIGN_NULL("glVertexAttrib2fv", vertexAttrib2fv);
        ASSIGN_NULL("glVertexAttrib3f", vertexAttrib3f);
        ASSIGN_NULL("glVertexAttrib3fv", vertexAttrib3fv);
        ASSIGN_NULL("glVertexAttrib4f", vertexAttrib4f);
        ASSIGN_NULL("glVertexAttrib4fv", vertexAttrib4fv);
        ASSIGN_NULL("glVertexAttribPointer", vertexAttribPointer);
        ASSIGN_NULL("glClearDepthf", clearDepthf);
        ASSIGN_NULL("glDepthRangef", depthRangef);
        ASSIGN_NULL("glGetShaderPrecisionFormat", getShaderPrecisionFormat);
        ASSIGN_NULL("glReleaseShaderCompiler", releaseShaderCompiler);
        ASSIGN_NULL("glShaderBinary", shaderBinary);
    }

    if (version >= gl::Version(3, 0))
    {
        ASSIGN_NULL("glBeginQuery", beginQuery);
        ASSIGN_NULL("glDeleteQueries", deleteQueries);
        ASSIGN_NULL("glEndQuery", endQuery);
        ASSIGN_NULL("glGenQueries", genQueries);
        ASSIGN_NULL("glGetBufferPointerv", getBufferPointerv);
        ASSIGN_NULL("glGetQueryObjectuiv", getQueryObjectuiv);
        ASSIGN_NULL("glGetQueryiv", getQueryiv);
        ASSIGN_NULL("glIsQuery", isQuery);
        ASSIGN_NULL("glUnmapBuffer", unmapBuffer);
        ASSIGN_NULL("glReadBuffer", readBuffer);
        ASSIGN_NULL("glCopyTexSubImage3D", copyTexSubImage3D);
        ASSIGN_NULL("glDrawRangeElements", drawRangeElements);
        ASSIGN_NULL("glTexImage3D", texImage3D);
        ASSIGN_NULL("glTexSubImage3D", texSubImage3D);
        ASSIGN_NULL("glCompressedTexImage3D", compressedTexImage3D);
        ASSIGN_NULL("glCompressedTexSubImage3D", compressedTexSubImage3D);
        ASSIGN_NULL("glClientWaitSync", clientWaitSync);
        ASSIGN_NULL("glDeleteSync", deleteSync);
        ASSIGN_NULL("glFenceSync", fenceSync);
        ASSIGN_NULL("glGetBufferParameteri64v", getBufferParameteri64v);
        ASSIGN_NULL("glGetInteger64i_v", getInteger64i_v);
        ASSIGN_NULL("glGetInteger64v", getInteger64v);
        ASSIGN_NULL("glGetSynciv", getSynciv);
        ASSIGN_NULL("glIsSync", isSync);
        ASSIGN_NULL("glWaitSync", waitSync);
        ASSIGN_NULL("glBindSampler", bindSampler);
        ASSIGN_NULL("glDeleteSamplers", deleteSamplers);
        ASSIGN_NULL("glGenSamplers", genSamplers);
        ASSIGN_NULL("glGetSamplerParameterfv", getSamplerParameterfv);
        ASSIGN_NULL("glGetSamplerParameteriv", getSamplerParameteriv);
        ASSIGN_NULL("glIsSampler", isSampler);
        ASSIGN_NULL("glSamplerParameterf", samplerParameterf);
        ASSIGN_NULL("glSamplerParameterfv", samplerParameterfv);
        ASSIGN_NULL("glSamplerParameteri", samplerParameteri);
        ASSIGN_NULL("glSamplerParameteriv", samplerParameteriv);
        ASSIGN_NULL("glVertexAttribDivisor", vertexAttribDivisor);
        ASSIGN_NULL("glBeginTransformFeedback", beginTransformFeedback);
        ASSIGN_NULL("glBindBufferBase", bindBufferBase);
        ASSIGN_NULL("glBindBufferRange", bindBufferRange);
        ASSIGN_NULL("glBindVertexArray", bindVertexArray);
        ASSIGN_NULL("glBlitFramebuffer", blitFramebuffer);
        ASSIGN_NULL("glClearBufferfi", clearBufferfi);
        ASSIGN_NULL("glClearBufferfv", clearBufferfv);
        ASSIGN_NULL("glClearBufferiv", clearBufferiv);
        ASSIGN_NULL("glClearBufferuiv", clearBufferuiv);
        ASSIGN_NULL("glDeleteVertexArrays", deleteVertexArrays);
        ASSIGN_NULL("glEndTransformFeedback", endTransformFeedback);
        ASSIGN_NULL("glFlushMappedBufferRange", flushMappedBufferRange);
        ASSIGN_NULL("glFramebufferTextureLayer", framebufferTextureLayer);
        ASSIGN_NULL("glGenVertexArrays", genVertexArrays);
        ASSIGN_NULL("glGetFragDataLocation", getFragDataLocation);
        ASSIGN_NULL("glGetIntegeri_v", getIntegeri_v);
        ASSIGN_NULL("glGetStringi", getStringi);
        ASSIGN_NULL("glGetTransformFeedbackVarying", getTransformFeedbackVarying);
        ASSIGN_NULL("glGetUniformuiv", getUniformuiv);
        ASSIGN_NULL("glGetVertexAttribIiv", getVertexAttribIiv);
        ASSIGN_NULL("glGetVertexAttribIuiv", getVertexAttribIuiv);
        ASSIGN_NULL("glIsVertexArray", isVertexArray);
        ASSIGN_NULL("glMapBufferRange", mapBufferRange);
        ASSIGN_NULL("glRenderbufferStorageMultisample", renderbufferStorageMultisample);
        ASSIGN_NULL("glTransformFeedbackVaryings", transformFeedbackVaryings);
        ASSIGN_NULL("glUniform1ui", uniform1ui);
        ASSIGN_NULL("glUniform1uiv", uniform1uiv);
        ASSIGN_NULL("glUniform2ui", uniform2ui);
        ASSIGN_NULL("glUniform2uiv", uniform2uiv);
        ASSIGN_NULL("glUniform3ui", uniform3ui);
        ASSIGN_NULL("glUniform3uiv", uniform3uiv);
        ASSIGN_NULL("glUniform4ui", uniform4ui);
        ASSIGN_NULL("glUniform4uiv", uniform4uiv);
        ASSIGN_NULL("glVertexAttribI4i", vertexAttribI4i);
        ASSIGN_NULL("glVertexAttribI4iv", vertexAttribI4iv);
        ASSIGN_NULL("glVertexAttribI4ui", vertexAttribI4ui);
        ASSIGN_NULL("glVertexAttribI4uiv", vertexAttribI4uiv);
        ASSIGN_NULL("glVertexAttribIPointer", vertexAttribIPointer);
        ASSIGN_NULL("glCopyBufferSubData", copyBufferSubData);
        ASSIGN_NULL("glDrawArraysInstanced", drawArraysInstanced);
        ASSIGN_NULL("glDrawElementsInstanced", drawElementsInstanced);
        ASSIGN_NULL("glGetActiveUniformBlockName", getActiveUniformBlockName);
        ASSIGN_NULL("glGetActiveUniformBlockiv", getActiveUniformBlockiv);
        ASSIGN_NULL("glGetActiveUniformsiv", getActiveUniformsiv);
        ASSIGN_NULL("glGetUniformBlockIndex", getUniformBlockIndex);
        ASSIGN_NULL("glGetUniformIndices", getUniformIndices);
        ASSIGN_NULL("glUniformBlockBinding", uniformBlockBinding);
        ASSIGN_NULL("glUniformMatrix2x3fv", uniformMatrix2x3fv);
        ASSIGN_NULL("glUniformMatrix2x4fv", uniformMatrix2x4fv);
        ASSIGN_NULL("glUniformMatrix3x2fv", uniformMatrix3x2fv);
        ASSIGN_NULL("glUniformMatrix3x4fv", uniformMatrix3x4fv);
        ASSIGN_NULL("glUniformMatrix4x2fv", uniformMatrix4x2fv);
        ASSIGN_NULL("glUniformMatrix4x3fv", uniformMatrix4x3fv);
        ASSIGN_NULL("glDrawBuffers", drawBuffers);
        ASSIGN_NULL("glGetProgramBinary", getProgramBinary);
        ASSIGN_NULL("glProgramBinary", programBinary);
        ASSIGN_NULL("glProgramParameteri", programParameteri);
        ASSIGN_NULL("glBindTransformFeedback", bindTransformFeedback);
        ASSIGN_NULL("glDeleteTransformFeedbacks", deleteTransformFeedbacks);
        ASSIGN_NULL("glGenTransformFeedbacks", genTransformFeedbacks);
        ASSIGN_NULL("glIsTransformFeedback", isTransformFeedback);
        ASSIGN_NULL("glPauseTransformFeedback", pauseTransformFeedback);
        ASSIGN_NULL("glResumeTransformFeedback", resumeTransformFeedback);
        ASSIGN_NULL("glInvalidateFramebuffer", invalidateFramebuffer);
        ASSIGN_NULL("glInvalidateSubFramebuffer", invalidateSubFramebuffer);
        ASSIGN_NULL("glGetInternalformativ", getInternalformativ);
        ASSIGN_NULL("glTexStorage2D", texStorage2D);
        ASSIGN_NULL("glTexStorage3D", texStorage3D);
    }

    if (version >= gl::Version(3, 1))
    {
        ASSIGN_NULL("glGetTexLevelParameterfv", getTexLevelParameterfv);
        ASSIGN_NULL("glGetTexLevelParameteriv", getTexLevelParameteriv);
        ASSIGN_NULL("glGetMultisamplefv", getMultisamplefv);
        ASSIGN_NULL("glSampleMaski", sampleMaski);
        ASSIGN_NULL("glGetBooleani_v", getBooleani_v);
        ASSIGN_NULL("glMemoryBarrierByRegion", memoryBarrierByRegion);
        ASSIGN_NULL("glActiveShaderProgram", activeShaderProgram);
        ASSIGN_NULL("glBindProgramPipeline", bindProgramPipeline);
        ASSIGN_NULL("glCreateShaderProgramv", createShaderProgramv);
        ASSIGN_NULL("glDeleteProgramPipelines", deleteProgramPipelines);
        ASSIGN_NULL("glGenProgramPipelines", genProgramPipelines);
        ASSIGN_NULL("glGetProgramPipelineInfoLog", getProgramPipelineInfoLog);
        ASSIGN_NULL("glGetProgramPipelineiv", getProgramPipelineiv);
        ASSIGN_NULL("glIsProgramPipeline", isProgramPipeline);
        ASSIGN_NULL("glProgramUniform1f", programUniform1f);
        ASSIGN_NULL("glProgramUniform1fv", programUniform1fv);
        ASSIGN_NULL("glProgramUniform1i", programUniform1i);
        ASSIGN_NULL("glProgramUniform1iv", programUniform1iv);
        ASSIGN_NULL("glProgramUniform1ui", programUniform1ui);
        ASSIGN_NULL("glProgramUniform1uiv", programUniform1uiv);
        ASSIGN_NULL("glProgramUniform2f", programUniform2f);
        ASSIGN_NULL("glProgramUniform2fv", programUniform2fv);
        ASSIGN_NULL("glProgramUniform2i", programUniform2i);
        ASSIGN_NULL("glProgramUniform2iv", programUniform2iv);
        ASSIGN_NULL("glProgramUniform2ui", programUniform2ui);
        ASSIGN_NULL("glProgramUniform2uiv", programUniform2uiv);
        ASSIGN_NULL("glProgramUniform3f", programUniform3f);
        ASSIGN_NULL("glProgramUniform3fv", programUniform3fv);
        ASSIGN_NULL("glProgramUniform3i", programUniform3i);
        ASSIGN_NULL("glProgramUniform3iv", programUniform3iv);
        ASSIGN_NULL("glProgramUniform3ui", programUniform3ui);
        ASSIGN_NULL("glProgramUniform3uiv", programUniform3uiv);
        ASSIGN_NULL("glProgramUniform4f", programUniform4f);
        ASSIGN_NULL("glProgramUniform4fv", programUniform4fv);
        ASSIGN_NULL("glProgramUniform4i", programUniform4i);
        ASSIGN_NULL("glProgramUniform4iv", programUniform4iv);
        ASSIGN_NULL("glProgramUniform4ui", programUniform4ui);
        ASSIGN_NULL("glProgramUniform4uiv", programUniform4uiv);
        ASSIGN_NULL("glProgramUniformMatrix2fv", programUniformMatrix2fv);
        ASSIGN_NULL("glProgramUniformMatrix2x3fv", programUniformMatrix2x3fv);
        ASSIGN_NULL("glProgramUniformMatrix2x4fv", programUniformMatrix2x4fv);
        ASSIGN_NULL("glProgramUniformMatrix3fv", programUniformMatrix3fv);
        ASSIGN_NULL("glProgramUniformMatrix3x2fv", programUniformMatrix3x2fv);
        ASSIGN_NULL("glProgramUniformMatrix3x4fv", programUniformMatrix3x4fv);
        ASSIGN_NULL("glProgramUniformMatrix4fv", programUniformMatrix4fv);
        ASSIGN_NULL("glProgramUniformMatrix4x2fv", programUniformMatrix4x2fv);
        ASSIGN_NULL("glProgramUniformMatrix4x3fv", programUniformMatrix4x3fv);
        ASSIGN_NULL("glUseProgramStages", useProgramStages);
        ASSIGN_NULL("glValidateProgramPipeline", validateProgramPipeline);
        ASSIGN_NULL("glDrawArraysIndirect", drawArraysIndirect);
        ASSIGN_NULL("glDrawElementsIndirect", drawElementsIndirect);
        ASSIGN_NULL("glBindVertexBuffer", bindVertexBuffer);
        ASSIGN_NULL("glDispatchCompute", dispatchCompute);
        ASSIGN_NULL("glDispatchComputeIndirect", dispatchComputeIndirect);
        ASSIGN_NULL("glFramebufferParameteri", framebufferParameteri);
        ASSIGN_NULL("glGetFramebufferParameteriv", getFramebufferParameteriv);
        ASSIGN_NULL("glGetProgramInterfaceiv", getProgramInterfaceiv);
        ASSIGN_NULL("glGetProgramResourceIndex", getProgramResourceIndex);
        ASSIGN_NULL("glGetProgramResourceLocation", getProgramResourceLocation);
        ASSIGN_NULL("glGetProgramResourceName", getProgramResourceName);
        ASSIGN_NULL("glGetProgramResourceiv", getProgramResourceiv);
        ASSIGN_NULL("glTexStorage2DMultisample", texStorage2DMultisample);
        ASSIGN_NULL("glVertexAttribBinding", vertexAttribBinding);
        ASSIGN_NULL("glVertexAttribFormat", vertexAttribFormat);
        ASSIGN_NULL("glVertexAttribIFormat", vertexAttribIFormat);
        ASSIGN_NULL("glVertexBindingDivisor", vertexBindingDivisor);
        ASSIGN_NULL("glBindImageTexture", bindImageTexture);
        ASSIGN_NULL("glMemoryBarrier", memoryBarrier);
    }

    if (version >= gl::Version(3, 2))
    {
        ASSIGN_NULL("glDrawElementsBaseVertex", drawElementsBaseVertex);
        ASSIGN_NULL("glDrawElementsInstancedBaseVertex", drawElementsInstancedBaseVertex);
        ASSIGN_NULL("glDrawRangeElementsBaseVertex", drawRangeElementsBaseVertex);
        ASSIGN_NULL("glFramebufferTexture", framebufferTexture);
        ASSIGN_NULL("glGetSamplerParameterIiv", getSamplerParameterIiv);
        ASSIGN_NULL("glGetSamplerParameterIuiv", getSamplerParameterIuiv);
        ASSIGN_NULL("glSamplerParameterIiv", samplerParameterIiv);
        ASSIGN_NULL("glSamplerParameterIuiv", samplerParameterIuiv);
        ASSIGN_NULL("glColorMaski", colorMaski);
        ASSIGN_NULL("glDisablei", disablei);
        ASSIGN_NULL("glEnablei", enablei);
        ASSIGN_NULL("glGetTexParameterIiv", getTexParameterIiv);
        ASSIGN_NULL("glGetTexParameterIuiv", getTexParameterIuiv);
        ASSIGN_NULL("glIsEnabledi", isEnabledi);
        ASSIGN_NULL("glTexParameterIiv", texParameterIiv);
        ASSIGN_NULL("glTexParameterIuiv", texParameterIuiv);
        ASSIGN_NULL("glTexBuffer", texBuffer);
        ASSIGN_NULL("glGetGraphicsResetStatus", getGraphicsResetStatus);
        ASSIGN_NULL("glGetnUniformfv", getnUniformfv);
        ASSIGN_NULL("glGetnUniformiv", getnUniformiv);
        ASSIGN_NULL("glGetnUniformuiv", getnUniformuiv);
        ASSIGN_NULL("glReadnPixels", readnPixels);
        ASSIGN_NULL("glBlendEquationSeparatei", blendEquationSeparatei);
        ASSIGN_NULL("glBlendEquationi", blendEquationi);
        ASSIGN_NULL("glBlendFuncSeparatei", blendFuncSeparatei);
        ASSIGN_NULL("glBlendFunci", blendFunci);
        ASSIGN_NULL("glMinSampleShading", minSampleShading);
        ASSIGN_NULL("glPatchParameteri", patchParameteri);
        ASSIGN_NULL("glCopyImageSubData", copyImageSubData);
        ASSIGN_NULL("glDebugMessageCallback", debugMessageCallback);
        ASSIGN_NULL("glDebugMessageControl", debugMessageControl);
        ASSIGN_NULL("glDebugMessageInsert", debugMessageInsert);
        ASSIGN_NULL("glGetDebugMessageLog", getDebugMessageLog);
        ASSIGN_NULL("glGetPointerv", getPointerv);
        ASSIGN_NULL("glGetObjectLabel", getObjectLabel);
        ASSIGN_NULL("glGetObjectPtrLabel", getObjectPtrLabel);
        ASSIGN_NULL("glObjectLabel", objectLabel);
        ASSIGN_NULL("glObjectPtrLabel", objectPtrLabel);
        ASSIGN_NULL("glPopDebugGroup", popDebugGroup);
        ASSIGN_NULL("glPushDebugGroup", pushDebugGroup);
        ASSIGN_NULL("glTexBufferRange", texBufferRange);
        ASSIGN_NULL("glTexStorage3DMultisample", texStorage3DMultisample);
        ASSIGN_NULL("glBlendBarrier", blendBarrier);
        ASSIGN_NULL("glPrimitiveBoundingBox", primitiveBoundingBox);
    }

    if (extensions.count("GL_EXT_discard_framebuffer") != 0)
    {
        ASSIGN_NULL("glDiscardFramebufferEXT", discardFramebufferEXT);
    }

    if (extensions.count("GL_KHR_debug") != 0)
    {
        ASSIGN_NULL("glDebugMessageCallbackKHR", debugMessageCallback);
        ASSIGN_NULL("glDebugMessageControlKHR", debugMessageControl);
        ASSIGN_NULL("glDebugMessageInsertKHR", debugMessageInsert);
        ASSIGN_NULL("glGetDebugMessageLogKHR", getDebugMessageLog);
        ASSIGN_NULL("glGetPointervKHR", getPointerv);
        ASSIGN_NULL("glGetObjectLabelKHR", getObjectLabel);
        ASSIGN_NULL("glGetObjectPtrLabelKHR", getObjectPtrLabel);
        ASSIGN_NULL("glObjectLabelKHR", objectLabel);
        ASSIGN_NULL("glObjectPtrLabelKHR", objectPtrLabel);
        ASSIGN_NULL("glPopDebugGroupKHR", popDebugGroup);
        ASSIGN_NULL("glPushDebugGroupKHR", pushDebugGroup);
    }

    if (extensions.count("GL_KHR_robustness") != 0)
    {
        ASSIGN_NULL("glGetGraphicsResetStatusKHR", getGraphicsResetStatus);
        ASSIGN_NULL("glGetnUniformfvKHR", getnUniformfv);
        ASSIGN_NULL("glGetnUniformivKHR", getnUniformiv);
        ASSIGN_NULL("glGetnUniformuivKHR", getnUniformuiv);
        ASSIGN_NULL("glReadnPixelsKHR", readnPixels);
    }

    if (extensions.count("GL_NV_fence") != 0)
    {
        ASSIGN_NULL("glDeleteFencesNV", deleteFencesNV);
        ASSIGN_NULL("glGenFencesNV", genFencesNV);
        ASSIGN_NULL("glIsFenceNV", isFenceNV);
        ASSIGN_NULL("glTestFenceNV", testFenceNV);
        ASSIGN_NULL("glGetFenceivNV", getFenceivNV);
        ASSIGN_NULL("glFinishFenceNV", finishFenceNV);
        ASSIGN_NULL("glSetFenceNV", setFenceNV);
    }

    if (extensions.count("GL_NV_framebuffer_mixed_samples") != 0)
    {
        ASSIGN_NULL("glCoverageModulationNV", coverageModulationNV);
    }

    if (extensions.count("GL_NV_internalformat_sample_query") != 0)
    {
        ASSIGN_NULL("glGetInternalformatSampleivNV", getInternalformatSampleivNV);
    }

    if (extensions.count("GL_NV_path_rendering") != 0)
    {
        ASSIGN_NULL("glMatrixLoadfEXT", matrixLoadfEXT);
        ASSIGN_NULL("glGenPathsNV", genPathsNV);
        ASSIGN_NULL("glDeletePathsNV", deletePathsNV);
        ASSIGN_NULL("glPathCommandsNV", pathCommandsNV);
        ASSIGN_NULL("glIsPathNV", isPathNV);
        ASSIGN_NULL("glPathParameterfNV", pathParameterfNV);
        ASSIGN_NULL("glPathParameteriNV", pathParameteriNV);
        ASSIGN_NULL("glGetPathParameterfvNV", getPathParameterfvNV);
        ASSIGN_NULL("glGetPathParameterivNV", getPathParameterivNV);
        ASSIGN_NULL("glPathStencilFuncNV", pathStencilFuncNV);
        ASSIGN_NULL("glStencilFillPathNV", stencilFillPathNV);
        ASSIGN_NULL("glStencilStrokePathNV", stencilStrokePathNV);
        ASSIGN_NULL("glCoverFillPathNV", coverFillPathNV);
        ASSIGN_NULL("glCoverStrokePathNV", coverStrokePathNV);
        ASSIGN_NULL("glStencilThenCoverFillPathNV", stencilThenCoverFillPathNV);
        ASSIGN_NULL("glStencilThenCoverStrokePathNV", stencilThenCoverStrokePathNV);
        ASSIGN_NULL("glCoverFillPathInstancedNV", coverFillPathInstancedNV);
        ASSIGN_NULL("glCoverStrokePathInstancedNV", coverStrokePathInstancedNV);
        ASSIGN_NULL("glStencilFillPathInstancedNV", stencilFillPathInstancedNV);
        ASSIGN_NULL("glStencilStrokePathInstancedNV", stencilStrokePathInstancedNV);
        ASSIGN_NULL("glStencilThenCoverFillPathInstancedNV", stencilThenCoverFillPathInstancedNV);
        ASSIGN_NULL("glStencilThenCoverStrokePathInstancedNV",
                    stencilThenCoverStrokePathInstancedNV);
        ASSIGN_NULL("glProgramPathFragmentInputGenNV", programPathFragmentInputGenNV);
    }

    if (extensions.count("GL_OES_EGL_image") != 0)
    {
        ASSIGN_NULL("glEGLImageTargetRenderbufferStorageOES", eGLImageTargetRenderbufferStorageOES);
        ASSIGN_NULL("glEGLImageTargetTexture2DOES", eGLImageTargetTexture2DOES);
    }
}
#endif  // defined(ANGLE_ENABLE_OPENGL_NULL)

}  // namespace rx
