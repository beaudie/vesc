// GENERATED FILE - DO NOT EDIT.
// Generated by generate_gl_dispatch_table.py using data from gl_bindings_data.json and gl.xml.
//
// Copyright 2017 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// null_functions.h:
//   Declares the NULL/Stub bindings for the OpenGL back-end.

#ifndef LIBGLESV2_RENDERER_GL_NULL_GL_FUNCTIONS_AUTOGEN_H_
#define LIBGLESV2_RENDERER_GL_NULL_GL_FUNCTIONS_AUTOGEN_H_

#include "libANGLE/renderer/gl/functionsgl_typedefs.h"

namespace rx
{
void activeShaderProgramNULL(GLuint pipeline, GLuint program);
void activeTextureNULL(GLenum texture);
void attachShaderNULL(GLuint program, GLuint shader);
void beginConditionalRenderNULL(GLuint id, GLenum mode);
void beginQueryNULL(GLenum target, GLuint id);
void beginQueryIndexedNULL(GLenum target, GLuint index, GLuint id);
void beginTransformFeedbackNULL(GLenum primitiveMode);
void bindAttribLocationNULL(GLuint program, GLuint index, const GLchar *name);
void bindBufferNULL(GLenum target, GLuint buffer);
void bindBufferBaseNULL(GLenum target, GLuint index, GLuint buffer);
void bindBufferRangeNULL(GLenum target,
                         GLuint index,
                         GLuint buffer,
                         GLintptr offset,
                         GLsizeiptr size);
void bindBuffersBaseNULL(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void bindBuffersRangeNULL(GLenum target,
                          GLuint first,
                          GLsizei count,
                          const GLuint *buffers,
                          const GLintptr *offsets,
                          const GLsizeiptr *sizes);
void bindFragDataLocationNULL(GLuint program, GLuint color, const GLchar *name);
void bindFragDataLocationIndexedNULL(GLuint program,
                                     GLuint colorNumber,
                                     GLuint index,
                                     const GLchar *name);
void bindFramebufferNULL(GLenum target, GLuint framebuffer);
void bindImageTextureNULL(GLuint unit,
                          GLuint texture,
                          GLint level,
                          GLboolean layered,
                          GLint layer,
                          GLenum access,
                          GLenum format);
void bindImageTexturesNULL(GLuint first, GLsizei count, const GLuint *textures);
void bindProgramPipelineNULL(GLuint pipeline);
void bindRenderbufferNULL(GLenum target, GLuint renderbuffer);
void bindSamplerNULL(GLuint unit, GLuint sampler);
void bindSamplersNULL(GLuint first, GLsizei count, const GLuint *samplers);
void bindTextureNULL(GLenum target, GLuint texture);
void bindTextureUnitNULL(GLuint unit, GLuint texture);
void bindTexturesNULL(GLuint first, GLsizei count, const GLuint *textures);
void bindTransformFeedbackNULL(GLenum target, GLuint id);
void bindVertexArrayNULL(GLuint array);
void bindVertexBufferNULL(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void bindVertexBuffersNULL(GLuint first,
                           GLsizei count,
                           const GLuint *buffers,
                           const GLintptr *offsets,
                           const GLsizei *strides);
void blendBarrierNULL();
void blendColorNULL(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void blendEquationNULL(GLenum mode);
void blendEquationSeparateNULL(GLenum modeRGB, GLenum modeAlpha);
void blendEquationSeparateiNULL(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
void blendEquationiNULL(GLuint buf, GLenum mode);
void blendFuncNULL(GLenum sfactor, GLenum dfactor);
void blendFuncSeparateNULL(GLenum sfactorRGB,
                           GLenum dfactorRGB,
                           GLenum sfactorAlpha,
                           GLenum dfactorAlpha);
void blendFuncSeparateiNULL(GLuint buf,
                            GLenum srcRGB,
                            GLenum dstRGB,
                            GLenum srcAlpha,
                            GLenum dstAlpha);
void blendFunciNULL(GLuint buf, GLenum src, GLenum dst);
void blitFramebufferNULL(GLint srcX0,
                         GLint srcY0,
                         GLint srcX1,
                         GLint srcY1,
                         GLint dstX0,
                         GLint dstY0,
                         GLint dstX1,
                         GLint dstY1,
                         GLbitfield mask,
                         GLenum filter);
void blitNamedFramebufferNULL(GLuint readFramebuffer,
                              GLuint drawFramebuffer,
                              GLint srcX0,
                              GLint srcY0,
                              GLint srcX1,
                              GLint srcY1,
                              GLint dstX0,
                              GLint dstY0,
                              GLint dstX1,
                              GLint dstY1,
                              GLbitfield mask,
                              GLenum filter);
void bufferDataNULL(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
void bufferStorageNULL(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
void bufferSubDataNULL(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
GLenum checkFramebufferStatusNULL(GLenum target);
GLenum checkNamedFramebufferStatusNULL(GLuint framebuffer, GLenum target);
void clampColorNULL(GLenum target, GLenum clamp);
void clearNULL(GLbitfield mask);
void clearBufferDataNULL(GLenum target,
                         GLenum internalformat,
                         GLenum format,
                         GLenum type,
                         const void *data);
void clearBufferSubDataNULL(GLenum target,
                            GLenum internalformat,
                            GLintptr offset,
                            GLsizeiptr size,
                            GLenum format,
                            GLenum type,
                            const void *data);
void clearBufferfiNULL(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void clearBufferfvNULL(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void clearBufferivNULL(GLenum buffer, GLint drawbuffer, const GLint *value);
void clearBufferuivNULL(GLenum buffer, GLint drawbuffer, const GLuint *value);
void clearColorNULL(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void clearDepthNULL(GLdouble depth);
void clearDepthfNULL(GLfloat d);
void clearNamedBufferDataNULL(GLuint buffer,
                              GLenum internalformat,
                              GLenum format,
                              GLenum type,
                              const void *data);
void clearNamedBufferSubDataNULL(GLuint buffer,
                                 GLenum internalformat,
                                 GLintptr offset,
                                 GLsizeiptr size,
                                 GLenum format,
                                 GLenum type,
                                 const void *data);
void clearNamedFramebufferfiNULL(GLuint framebuffer,
                                 GLenum buffer,
                                 GLint drawbuffer,
                                 GLfloat depth,
                                 GLint stencil);
void clearNamedFramebufferfvNULL(GLuint framebuffer,
                                 GLenum buffer,
                                 GLint drawbuffer,
                                 const GLfloat *value);
void clearNamedFramebufferivNULL(GLuint framebuffer,
                                 GLenum buffer,
                                 GLint drawbuffer,
                                 const GLint *value);
void clearNamedFramebufferuivNULL(GLuint framebuffer,
                                  GLenum buffer,
                                  GLint drawbuffer,
                                  const GLuint *value);
void clearStencilNULL(GLint s);
void clearTexImageNULL(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
void clearTexSubImageNULL(GLuint texture,
                          GLint level,
                          GLint xoffset,
                          GLint yoffset,
                          GLint zoffset,
                          GLsizei width,
                          GLsizei height,
                          GLsizei depth,
                          GLenum format,
                          GLenum type,
                          const void *data);
GLenum clientWaitSyncNULL(GLsync sync, GLbitfield flags, GLuint64 timeout);
void clipControlNULL(GLenum origin, GLenum depth);
void colorMaskNULL(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void colorMaskiNULL(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void compileShaderNULL(GLuint shader);
void compressedTexImage1DNULL(GLenum target,
                              GLint level,
                              GLenum internalformat,
                              GLsizei width,
                              GLint border,
                              GLsizei imageSize,
                              const void *data);
void compressedTexImage2DNULL(GLenum target,
                              GLint level,
                              GLenum internalformat,
                              GLsizei width,
                              GLsizei height,
                              GLint border,
                              GLsizei imageSize,
                              const void *data);
void compressedTexImage3DNULL(GLenum target,
                              GLint level,
                              GLenum internalformat,
                              GLsizei width,
                              GLsizei height,
                              GLsizei depth,
                              GLint border,
                              GLsizei imageSize,
                              const void *data);
void compressedTexSubImage1DNULL(GLenum target,
                                 GLint level,
                                 GLint xoffset,
                                 GLsizei width,
                                 GLenum format,
                                 GLsizei imageSize,
                                 const void *data);
void compressedTexSubImage2DNULL(GLenum target,
                                 GLint level,
                                 GLint xoffset,
                                 GLint yoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLenum format,
                                 GLsizei imageSize,
                                 const void *data);
void compressedTexSubImage3DNULL(GLenum target,
                                 GLint level,
                                 GLint xoffset,
                                 GLint yoffset,
                                 GLint zoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth,
                                 GLenum format,
                                 GLsizei imageSize,
                                 const void *data);
void compressedTextureSubImage1DNULL(GLuint texture,
                                     GLint level,
                                     GLint xoffset,
                                     GLsizei width,
                                     GLenum format,
                                     GLsizei imageSize,
                                     const void *data);
void compressedTextureSubImage2DNULL(GLuint texture,
                                     GLint level,
                                     GLint xoffset,
                                     GLint yoffset,
                                     GLsizei width,
                                     GLsizei height,
                                     GLenum format,
                                     GLsizei imageSize,
                                     const void *data);
void compressedTextureSubImage3DNULL(GLuint texture,
                                     GLint level,
                                     GLint xoffset,
                                     GLint yoffset,
                                     GLint zoffset,
                                     GLsizei width,
                                     GLsizei height,
                                     GLsizei depth,
                                     GLenum format,
                                     GLsizei imageSize,
                                     const void *data);
void copyBufferSubDataNULL(GLenum readTarget,
                           GLenum writeTarget,
                           GLintptr readOffset,
                           GLintptr writeOffset,
                           GLsizeiptr size);
void copyImageSubDataNULL(GLuint srcName,
                          GLenum srcTarget,
                          GLint srcLevel,
                          GLint srcX,
                          GLint srcY,
                          GLint srcZ,
                          GLuint dstName,
                          GLenum dstTarget,
                          GLint dstLevel,
                          GLint dstX,
                          GLint dstY,
                          GLint dstZ,
                          GLsizei srcWidth,
                          GLsizei srcHeight,
                          GLsizei srcDepth);
void copyNamedBufferSubDataNULL(GLuint readBuffer,
                                GLuint writeBuffer,
                                GLintptr readOffset,
                                GLintptr writeOffset,
                                GLsizeiptr size);
void copyTexImage1DNULL(GLenum target,
                        GLint level,
                        GLenum internalformat,
                        GLint x,
                        GLint y,
                        GLsizei width,
                        GLint border);
void copyTexImage2DNULL(GLenum target,
                        GLint level,
                        GLenum internalformat,
                        GLint x,
                        GLint y,
                        GLsizei width,
                        GLsizei height,
                        GLint border);
void copyTexSubImage1DNULL(GLenum target,
                           GLint level,
                           GLint xoffset,
                           GLint x,
                           GLint y,
                           GLsizei width);
void copyTexSubImage2DNULL(GLenum target,
                           GLint level,
                           GLint xoffset,
                           GLint yoffset,
                           GLint x,
                           GLint y,
                           GLsizei width,
                           GLsizei height);
void copyTexSubImage3DNULL(GLenum target,
                           GLint level,
                           GLint xoffset,
                           GLint yoffset,
                           GLint zoffset,
                           GLint x,
                           GLint y,
                           GLsizei width,
                           GLsizei height);
void copyTextureSubImage1DNULL(GLuint texture,
                               GLint level,
                               GLint xoffset,
                               GLint x,
                               GLint y,
                               GLsizei width);
void copyTextureSubImage2DNULL(GLuint texture,
                               GLint level,
                               GLint xoffset,
                               GLint yoffset,
                               GLint x,
                               GLint y,
                               GLsizei width,
                               GLsizei height);
void copyTextureSubImage3DNULL(GLuint texture,
                               GLint level,
                               GLint xoffset,
                               GLint yoffset,
                               GLint zoffset,
                               GLint x,
                               GLint y,
                               GLsizei width,
                               GLsizei height);
void coverFillPathInstancedNVNULL(GLsizei numPaths,
                                  GLenum pathNameType,
                                  const void *paths,
                                  GLuint pathBase,
                                  GLenum coverMode,
                                  GLenum transformType,
                                  const GLfloat *transformValues);
void coverFillPathNVNULL(GLuint path, GLenum coverMode);
void coverStrokePathInstancedNVNULL(GLsizei numPaths,
                                    GLenum pathNameType,
                                    const void *paths,
                                    GLuint pathBase,
                                    GLenum coverMode,
                                    GLenum transformType,
                                    const GLfloat *transformValues);
void coverStrokePathNVNULL(GLuint path, GLenum coverMode);
void coverageModulationNVNULL(GLenum components);
void createBuffersNULL(GLsizei n, GLuint *buffers);
void createFramebuffersNULL(GLsizei n, GLuint *framebuffers);
GLuint createProgramNULL();
void createProgramPipelinesNULL(GLsizei n, GLuint *pipelines);
void createQueriesNULL(GLenum target, GLsizei n, GLuint *ids);
void createRenderbuffersNULL(GLsizei n, GLuint *renderbuffers);
void createSamplersNULL(GLsizei n, GLuint *samplers);
GLuint createShaderNULL(GLenum type);
GLuint createShaderProgramvNULL(GLenum type, GLsizei count, const GLchar *const *strings);
void createTexturesNULL(GLenum target, GLsizei n, GLuint *textures);
void createTransformFeedbacksNULL(GLsizei n, GLuint *ids);
void createVertexArraysNULL(GLsizei n, GLuint *arrays);
void cullFaceNULL(GLenum mode);
void debugMessageCallbackNULL(GLDEBUGPROC callback, const void *userParam);
void debugMessageControlNULL(GLenum source,
                             GLenum type,
                             GLenum severity,
                             GLsizei count,
                             const GLuint *ids,
                             GLboolean enabled);
void debugMessageInsertNULL(GLenum source,
                            GLenum type,
                            GLuint id,
                            GLenum severity,
                            GLsizei length,
                            const GLchar *buf);
void deleteBuffersNULL(GLsizei n, const GLuint *buffers);
void deleteFencesNVNULL(GLsizei n, const GLuint *fences);
void deleteFramebuffersNULL(GLsizei n, const GLuint *framebuffers);
void deletePathsNVNULL(GLuint path, GLsizei range);
void deleteProgramNULL(GLuint program);
void deleteProgramPipelinesNULL(GLsizei n, const GLuint *pipelines);
void deleteQueriesNULL(GLsizei n, const GLuint *ids);
void deleteRenderbuffersNULL(GLsizei n, const GLuint *renderbuffers);
void deleteSamplersNULL(GLsizei count, const GLuint *samplers);
void deleteShaderNULL(GLuint shader);
void deleteSyncNULL(GLsync sync);
void deleteTexturesNULL(GLsizei n, const GLuint *textures);
void deleteTransformFeedbacksNULL(GLsizei n, const GLuint *ids);
void deleteVertexArraysNULL(GLsizei n, const GLuint *arrays);
void depthFuncNULL(GLenum func);
void depthMaskNULL(GLboolean flag);
void depthRangeNULL(GLdouble near, GLdouble far);
void depthRangeArrayvNULL(GLuint first, GLsizei count, const GLdouble *v);
void depthRangeIndexedNULL(GLuint index, GLdouble n, GLdouble f);
void depthRangefNULL(GLfloat n, GLfloat f);
void detachShaderNULL(GLuint program, GLuint shader);
void disableNULL(GLenum cap);
void disableVertexArrayAttribNULL(GLuint vaobj, GLuint index);
void disableVertexAttribArrayNULL(GLuint index);
void disableiNULL(GLenum target, GLuint index);
void discardFramebufferEXTNULL(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void dispatchComputeNULL(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void dispatchComputeIndirectNULL(GLintptr indirect);
void drawArraysNULL(GLenum mode, GLint first, GLsizei count);
void drawArraysIndirectNULL(GLenum mode, const void *indirect);
void drawArraysInstancedNULL(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void drawArraysInstancedBaseInstanceNULL(GLenum mode,
                                         GLint first,
                                         GLsizei count,
                                         GLsizei instancecount,
                                         GLuint baseinstance);
void drawBufferNULL(GLenum buf);
void drawBuffersNULL(GLsizei n, const GLenum *bufs);
void drawElementsNULL(GLenum mode, GLsizei count, GLenum type, const void *indices);
void drawElementsBaseVertexNULL(GLenum mode,
                                GLsizei count,
                                GLenum type,
                                const void *indices,
                                GLint basevertex);
void drawElementsIndirectNULL(GLenum mode, GLenum type, const void *indirect);
void drawElementsInstancedNULL(GLenum mode,
                               GLsizei count,
                               GLenum type,
                               const void *indices,
                               GLsizei instancecount);
void drawElementsInstancedBaseInstanceNULL(GLenum mode,
                                           GLsizei count,
                                           GLenum type,
                                           const void *indices,
                                           GLsizei instancecount,
                                           GLuint baseinstance);
void drawElementsInstancedBaseVertexNULL(GLenum mode,
                                         GLsizei count,
                                         GLenum type,
                                         const void *indices,
                                         GLsizei instancecount,
                                         GLint basevertex);
void drawElementsInstancedBaseVertexBaseInstanceNULL(GLenum mode,
                                                     GLsizei count,
                                                     GLenum type,
                                                     const void *indices,
                                                     GLsizei instancecount,
                                                     GLint basevertex,
                                                     GLuint baseinstance);
void drawRangeElementsNULL(GLenum mode,
                           GLuint start,
                           GLuint end,
                           GLsizei count,
                           GLenum type,
                           const void *indices);
void drawRangeElementsBaseVertexNULL(GLenum mode,
                                     GLuint start,
                                     GLuint end,
                                     GLsizei count,
                                     GLenum type,
                                     const void *indices,
                                     GLint basevertex);
void drawTransformFeedbackNULL(GLenum mode, GLuint id);
void drawTransformFeedbackInstancedNULL(GLenum mode, GLuint id, GLsizei instancecount);
void drawTransformFeedbackStreamNULL(GLenum mode, GLuint id, GLuint stream);
void drawTransformFeedbackStreamInstancedNULL(GLenum mode,
                                              GLuint id,
                                              GLuint stream,
                                              GLsizei instancecount);
void eGLImageTargetRenderbufferStorageOESNULL(GLenum target, GLeglImageOES image);
void eGLImageTargetTexture2DOESNULL(GLenum target, GLeglImageOES image);
void enableNULL(GLenum cap);
void enableVertexArrayAttribNULL(GLuint vaobj, GLuint index);
void enableVertexAttribArrayNULL(GLuint index);
void enableiNULL(GLenum target, GLuint index);
void endConditionalRenderNULL();
void endQueryNULL(GLenum target);
void endQueryIndexedNULL(GLenum target, GLuint index);
void endTransformFeedbackNULL();
GLsync fenceSyncNULL(GLenum condition, GLbitfield flags);
void finishNULL();
void finishFenceNVNULL(GLuint fence);
void flushNULL();
void flushMappedBufferRangeNULL(GLenum target, GLintptr offset, GLsizeiptr length);
void flushMappedNamedBufferRangeNULL(GLuint buffer, GLintptr offset, GLsizeiptr length);
void framebufferParameteriNULL(GLenum target, GLenum pname, GLint param);
void framebufferRenderbufferNULL(GLenum target,
                                 GLenum attachment,
                                 GLenum renderbuffertarget,
                                 GLuint renderbuffer);
void framebufferTextureNULL(GLenum target, GLenum attachment, GLuint texture, GLint level);
void framebufferTexture1DNULL(GLenum target,
                              GLenum attachment,
                              GLenum textarget,
                              GLuint texture,
                              GLint level);
void framebufferTexture2DNULL(GLenum target,
                              GLenum attachment,
                              GLenum textarget,
                              GLuint texture,
                              GLint level);
void framebufferTexture3DNULL(GLenum target,
                              GLenum attachment,
                              GLenum textarget,
                              GLuint texture,
                              GLint level,
                              GLint zoffset);
void framebufferTextureLayerNULL(GLenum target,
                                 GLenum attachment,
                                 GLuint texture,
                                 GLint level,
                                 GLint layer);
void frontFaceNULL(GLenum mode);
void genBuffersNULL(GLsizei n, GLuint *buffers);
void genFencesNVNULL(GLsizei n, GLuint *fences);
void genFramebuffersNULL(GLsizei n, GLuint *framebuffers);
GLuint genPathsNVNULL(GLsizei range);
void genProgramPipelinesNULL(GLsizei n, GLuint *pipelines);
void genQueriesNULL(GLsizei n, GLuint *ids);
void genRenderbuffersNULL(GLsizei n, GLuint *renderbuffers);
void genSamplersNULL(GLsizei count, GLuint *samplers);
void genTexturesNULL(GLsizei n, GLuint *textures);
void genTransformFeedbacksNULL(GLsizei n, GLuint *ids);
void genVertexArraysNULL(GLsizei n, GLuint *arrays);
void generateMipmapNULL(GLenum target);
void generateTextureMipmapNULL(GLuint texture);
void getActiveAtomicCounterBufferivNULL(GLuint program,
                                        GLuint bufferIndex,
                                        GLenum pname,
                                        GLint *params);
void getActiveAttribNULL(GLuint program,
                         GLuint index,
                         GLsizei bufSize,
                         GLsizei *length,
                         GLint *size,
                         GLenum *type,
                         GLchar *name);
void getActiveSubroutineNameNULL(GLuint program,
                                 GLenum shadertype,
                                 GLuint index,
                                 GLsizei bufsize,
                                 GLsizei *length,
                                 GLchar *name);
void getActiveSubroutineUniformNameNULL(GLuint program,
                                        GLenum shadertype,
                                        GLuint index,
                                        GLsizei bufsize,
                                        GLsizei *length,
                                        GLchar *name);
void getActiveSubroutineUniformivNULL(GLuint program,
                                      GLenum shadertype,
                                      GLuint index,
                                      GLenum pname,
                                      GLint *values);
void getActiveUniformNULL(GLuint program,
                          GLuint index,
                          GLsizei bufSize,
                          GLsizei *length,
                          GLint *size,
                          GLenum *type,
                          GLchar *name);
void getActiveUniformBlockNameNULL(GLuint program,
                                   GLuint uniformBlockIndex,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *uniformBlockName);
void getActiveUniformBlockivNULL(GLuint program,
                                 GLuint uniformBlockIndex,
                                 GLenum pname,
                                 GLint *params);
void getActiveUniformNameNULL(GLuint program,
                              GLuint uniformIndex,
                              GLsizei bufSize,
                              GLsizei *length,
                              GLchar *uniformName);
void getActiveUniformsivNULL(GLuint program,
                             GLsizei uniformCount,
                             const GLuint *uniformIndices,
                             GLenum pname,
                             GLint *params);
void getAttachedShadersNULL(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
GLint getAttribLocationNULL(GLuint program, const GLchar *name);
void getBooleani_vNULL(GLenum target, GLuint index, GLboolean *data);
void getBooleanvNULL(GLenum pname, GLboolean *data);
void getBufferParameteri64vNULL(GLenum target, GLenum pname, GLint64 *params);
void getBufferParameterivNULL(GLenum target, GLenum pname, GLint *params);
void getBufferPointervNULL(GLenum target, GLenum pname, void **params);
void getBufferSubDataNULL(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
void getCompressedTexImageNULL(GLenum target, GLint level, void *img);
void getCompressedTextureImageNULL(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
void getCompressedTextureSubImageNULL(GLuint texture,
                                      GLint level,
                                      GLint xoffset,
                                      GLint yoffset,
                                      GLint zoffset,
                                      GLsizei width,
                                      GLsizei height,
                                      GLsizei depth,
                                      GLsizei bufSize,
                                      void *pixels);
GLuint getDebugMessageLogNULL(GLuint count,
                              GLsizei bufSize,
                              GLenum *sources,
                              GLenum *types,
                              GLuint *ids,
                              GLenum *severities,
                              GLsizei *lengths,
                              GLchar *messageLog);
void getDoublei_vNULL(GLenum target, GLuint index, GLdouble *data);
void getDoublevNULL(GLenum pname, GLdouble *data);
GLenum getErrorNULL();
void getFenceivNVNULL(GLuint fence, GLenum pname, GLint *params);
void getFloati_vNULL(GLenum target, GLuint index, GLfloat *data);
void getFloatvNULL(GLenum pname, GLfloat *data);
GLint getFragDataIndexNULL(GLuint program, const GLchar *name);
GLint getFragDataLocationNULL(GLuint program, const GLchar *name);
void getFramebufferAttachmentParameterivNULL(GLenum target,
                                             GLenum attachment,
                                             GLenum pname,
                                             GLint *params);
void getFramebufferParameterivNULL(GLenum target, GLenum pname, GLint *params);
GLenum getGraphicsResetStatusNULL();
void getInteger64i_vNULL(GLenum target, GLuint index, GLint64 *data);
void getInteger64vNULL(GLenum pname, GLint64 *data);
void getIntegeri_vNULL(GLenum target, GLuint index, GLint *data);
void getIntegervNULL(GLenum pname, GLint *data);
void getInternalformatSampleivNVNULL(GLenum target,
                                     GLenum internalformat,
                                     GLsizei samples,
                                     GLenum pname,
                                     GLsizei bufSize,
                                     GLint *params);
void getInternalformati64vNULL(GLenum target,
                               GLenum internalformat,
                               GLenum pname,
                               GLsizei bufSize,
                               GLint64 *params);
void getInternalformativNULL(GLenum target,
                             GLenum internalformat,
                             GLenum pname,
                             GLsizei bufSize,
                             GLint *params);
void getMultisamplefvNULL(GLenum pname, GLuint index, GLfloat *val);
void getNamedBufferParameteri64vNULL(GLuint buffer, GLenum pname, GLint64 *params);
void getNamedBufferParameterivNULL(GLuint buffer, GLenum pname, GLint *params);
void getNamedBufferPointervNULL(GLuint buffer, GLenum pname, void **params);
void getNamedBufferSubDataNULL(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
void getNamedFramebufferAttachmentParameterivNULL(GLuint framebuffer,
                                                  GLenum attachment,
                                                  GLenum pname,
                                                  GLint *params);
void getNamedFramebufferParameterivNULL(GLuint framebuffer, GLenum pname, GLint *param);
void getNamedRenderbufferParameterivNULL(GLuint renderbuffer, GLenum pname, GLint *params);
void getObjectLabelNULL(GLenum identifier,
                        GLuint name,
                        GLsizei bufSize,
                        GLsizei *length,
                        GLchar *label);
void getObjectPtrLabelNULL(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void getPathParameterfvNVNULL(GLuint path, GLenum pname, GLfloat *value);
void getPathParameterivNVNULL(GLuint path, GLenum pname, GLint *value);
void getPointervNULL(GLenum pname, void **params);
void getProgramBinaryNULL(GLuint program,
                          GLsizei bufSize,
                          GLsizei *length,
                          GLenum *binaryFormat,
                          void *binary);
void getProgramInfoLogNULL(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void getProgramInterfaceivNULL(GLuint program,
                               GLenum programInterface,
                               GLenum pname,
                               GLint *params);
void getProgramPipelineInfoLogNULL(GLuint pipeline,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *infoLog);
void getProgramPipelineivNULL(GLuint pipeline, GLenum pname, GLint *params);
GLuint getProgramResourceIndexNULL(GLuint program, GLenum programInterface, const GLchar *name);
GLint getProgramResourceLocationNULL(GLuint program, GLenum programInterface, const GLchar *name);
GLint getProgramResourceLocationIndexNULL(GLuint program,
                                          GLenum programInterface,
                                          const GLchar *name);
void getProgramResourceNameNULL(GLuint program,
                                GLenum programInterface,
                                GLuint index,
                                GLsizei bufSize,
                                GLsizei *length,
                                GLchar *name);
void getProgramResourceivNULL(GLuint program,
                              GLenum programInterface,
                              GLuint index,
                              GLsizei propCount,
                              const GLenum *props,
                              GLsizei bufSize,
                              GLsizei *length,
                              GLint *params);
void getProgramStageivNULL(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
void getProgramivNULL(GLuint program, GLenum pname, GLint *params);
void getQueryBufferObjecti64vNULL(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void getQueryBufferObjectivNULL(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void getQueryBufferObjectui64vNULL(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void getQueryBufferObjectuivNULL(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void getQueryIndexedivNULL(GLenum target, GLuint index, GLenum pname, GLint *params);
void getQueryObjecti64vNULL(GLuint id, GLenum pname, GLint64 *params);
void getQueryObjectivNULL(GLuint id, GLenum pname, GLint *params);
void getQueryObjectui64vNULL(GLuint id, GLenum pname, GLuint64 *params);
void getQueryObjectuivNULL(GLuint id, GLenum pname, GLuint *params);
void getQueryivNULL(GLenum target, GLenum pname, GLint *params);
void getRenderbufferParameterivNULL(GLenum target, GLenum pname, GLint *params);
void getSamplerParameterIivNULL(GLuint sampler, GLenum pname, GLint *params);
void getSamplerParameterIuivNULL(GLuint sampler, GLenum pname, GLuint *params);
void getSamplerParameterfvNULL(GLuint sampler, GLenum pname, GLfloat *params);
void getSamplerParameterivNULL(GLuint sampler, GLenum pname, GLint *params);
void getShaderInfoLogNULL(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void getShaderPrecisionFormatNULL(GLenum shadertype,
                                  GLenum precisiontype,
                                  GLint *range,
                                  GLint *precision);
void getShaderSourceNULL(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void getShaderivNULL(GLuint shader, GLenum pname, GLint *params);
void getStringNULL(GLenum name);
void getStringiNULL(GLenum name, GLuint index);
GLuint getSubroutineIndexNULL(GLuint program, GLenum shadertype, const GLchar *name);
GLint getSubroutineUniformLocationNULL(GLuint program, GLenum shadertype, const GLchar *name);
void getSyncivNULL(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void getTexImageNULL(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
void getTexLevelParameterfvNULL(GLenum target, GLint level, GLenum pname, GLfloat *params);
void getTexLevelParameterivNULL(GLenum target, GLint level, GLenum pname, GLint *params);
void getTexParameterIivNULL(GLenum target, GLenum pname, GLint *params);
void getTexParameterIuivNULL(GLenum target, GLenum pname, GLuint *params);
void getTexParameterfvNULL(GLenum target, GLenum pname, GLfloat *params);
void getTexParameterivNULL(GLenum target, GLenum pname, GLint *params);
void getTextureImageNULL(GLuint texture,
                         GLint level,
                         GLenum format,
                         GLenum type,
                         GLsizei bufSize,
                         void *pixels);
void getTextureLevelParameterfvNULL(GLuint texture, GLint level, GLenum pname, GLfloat *params);
void getTextureLevelParameterivNULL(GLuint texture, GLint level, GLenum pname, GLint *params);
void getTextureParameterIivNULL(GLuint texture, GLenum pname, GLint *params);
void getTextureParameterIuivNULL(GLuint texture, GLenum pname, GLuint *params);
void getTextureParameterfvNULL(GLuint texture, GLenum pname, GLfloat *params);
void getTextureParameterivNULL(GLuint texture, GLenum pname, GLint *params);
void getTextureSubImageNULL(GLuint texture,
                            GLint level,
                            GLint xoffset,
                            GLint yoffset,
                            GLint zoffset,
                            GLsizei width,
                            GLsizei height,
                            GLsizei depth,
                            GLenum format,
                            GLenum type,
                            GLsizei bufSize,
                            void *pixels);
void getTransformFeedbackVaryingNULL(GLuint program,
                                     GLuint index,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLsizei *size,
                                     GLenum *type,
                                     GLchar *name);
void getTransformFeedbacki64_vNULL(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void getTransformFeedbacki_vNULL(GLuint xfb, GLenum pname, GLuint index, GLint *param);
void getTransformFeedbackivNULL(GLuint xfb, GLenum pname, GLint *param);
GLuint getUniformBlockIndexNULL(GLuint program, const GLchar *uniformBlockName);
void getUniformIndicesNULL(GLuint program,
                           GLsizei uniformCount,
                           const GLchar *const *uniformNames,
                           GLuint *uniformIndices);
GLint getUniformLocationNULL(GLuint program, const GLchar *name);
void getUniformSubroutineuivNULL(GLenum shadertype, GLint location, GLuint *params);
void getUniformdvNULL(GLuint program, GLint location, GLdouble *params);
void getUniformfvNULL(GLuint program, GLint location, GLfloat *params);
void getUniformivNULL(GLuint program, GLint location, GLint *params);
void getUniformuivNULL(GLuint program, GLint location, GLuint *params);
void getVertexArrayIndexed64ivNULL(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void getVertexArrayIndexedivNULL(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void getVertexArrayivNULL(GLuint vaobj, GLenum pname, GLint *param);
void getVertexAttribIivNULL(GLuint index, GLenum pname, GLint *params);
void getVertexAttribIuivNULL(GLuint index, GLenum pname, GLuint *params);
void getVertexAttribLdvNULL(GLuint index, GLenum pname, GLdouble *params);
void getVertexAttribPointervNULL(GLuint index, GLenum pname, void **pointer);
void getVertexAttribdvNULL(GLuint index, GLenum pname, GLdouble *params);
void getVertexAttribfvNULL(GLuint index, GLenum pname, GLfloat *params);
void getVertexAttribivNULL(GLuint index, GLenum pname, GLint *params);
void getnCompressedTexImageNULL(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
void getnTexImageNULL(GLenum target,
                      GLint level,
                      GLenum format,
                      GLenum type,
                      GLsizei bufSize,
                      void *pixels);
void getnUniformdvNULL(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void getnUniformfvNULL(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void getnUniformivNULL(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void getnUniformuivNULL(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void hintNULL(GLenum target, GLenum mode);
void invalidateBufferDataNULL(GLuint buffer);
void invalidateBufferSubDataNULL(GLuint buffer, GLintptr offset, GLsizeiptr length);
void invalidateFramebufferNULL(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void invalidateNamedFramebufferDataNULL(GLuint framebuffer,
                                        GLsizei numAttachments,
                                        const GLenum *attachments);
void invalidateNamedFramebufferSubDataNULL(GLuint framebuffer,
                                           GLsizei numAttachments,
                                           const GLenum *attachments,
                                           GLint x,
                                           GLint y,
                                           GLsizei width,
                                           GLsizei height);
void invalidateSubFramebufferNULL(GLenum target,
                                  GLsizei numAttachments,
                                  const GLenum *attachments,
                                  GLint x,
                                  GLint y,
                                  GLsizei width,
                                  GLsizei height);
void invalidateTexImageNULL(GLuint texture, GLint level);
void invalidateTexSubImageNULL(GLuint texture,
                               GLint level,
                               GLint xoffset,
                               GLint yoffset,
                               GLint zoffset,
                               GLsizei width,
                               GLsizei height,
                               GLsizei depth);
GLboolean isBufferNULL(GLuint buffer);
GLboolean isEnabledNULL(GLenum cap);
GLboolean isEnablediNULL(GLenum target, GLuint index);
GLboolean isFenceNVNULL(GLuint fence);
GLboolean isFramebufferNULL(GLuint framebuffer);
GLboolean isPathNVNULL(GLuint path);
GLboolean isProgramNULL(GLuint program);
GLboolean isProgramPipelineNULL(GLuint pipeline);
GLboolean isQueryNULL(GLuint id);
GLboolean isRenderbufferNULL(GLuint renderbuffer);
GLboolean isSamplerNULL(GLuint sampler);
GLboolean isShaderNULL(GLuint shader);
GLboolean isSyncNULL(GLsync sync);
GLboolean isTextureNULL(GLuint texture);
GLboolean isTransformFeedbackNULL(GLuint id);
GLboolean isVertexArrayNULL(GLuint array);
void lineWidthNULL(GLfloat width);
void linkProgramNULL(GLuint program);
void logicOpNULL(GLenum opcode);
void mapBufferNULL(GLenum target, GLenum access);
void mapBufferRangeNULL(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void mapNamedBufferNULL(GLuint buffer, GLenum access);
void mapNamedBufferRangeNULL(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
void matrixLoadfEXTNULL(GLenum mode, const GLfloat *m);
void memoryBarrierNULL(GLbitfield barriers);
void memoryBarrierByRegionNULL(GLbitfield barriers);
void minSampleShadingNULL(GLfloat value);
void multiDrawArraysNULL(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void multiDrawArraysIndirectNULL(GLenum mode,
                                 const void *indirect,
                                 GLsizei drawcount,
                                 GLsizei stride);
void multiDrawElementsNULL(GLenum mode,
                           const GLsizei *count,
                           GLenum type,
                           const void *const *indices,
                           GLsizei drawcount);
void multiDrawElementsBaseVertexNULL(GLenum mode,
                                     const GLsizei *count,
                                     GLenum type,
                                     const void *const *indices,
                                     GLsizei drawcount,
                                     const GLint *basevertex);
void multiDrawElementsIndirectNULL(GLenum mode,
                                   GLenum type,
                                   const void *indirect,
                                   GLsizei drawcount,
                                   GLsizei stride);
void namedBufferDataNULL(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
void namedBufferStorageNULL(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
void namedBufferSubDataNULL(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
void namedFramebufferDrawBufferNULL(GLuint framebuffer, GLenum buf);
void namedFramebufferDrawBuffersNULL(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void namedFramebufferParameteriNULL(GLuint framebuffer, GLenum pname, GLint param);
void namedFramebufferReadBufferNULL(GLuint framebuffer, GLenum src);
void namedFramebufferRenderbufferNULL(GLuint framebuffer,
                                      GLenum attachment,
                                      GLenum renderbuffertarget,
                                      GLuint renderbuffer);
void namedFramebufferTextureNULL(GLuint framebuffer,
                                 GLenum attachment,
                                 GLuint texture,
                                 GLint level);
void namedFramebufferTextureLayerNULL(GLuint framebuffer,
                                      GLenum attachment,
                                      GLuint texture,
                                      GLint level,
                                      GLint layer);
void namedRenderbufferStorageNULL(GLuint renderbuffer,
                                  GLenum internalformat,
                                  GLsizei width,
                                  GLsizei height);
void namedRenderbufferStorageMultisampleNULL(GLuint renderbuffer,
                                             GLsizei samples,
                                             GLenum internalformat,
                                             GLsizei width,
                                             GLsizei height);
void objectLabelNULL(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void objectPtrLabelNULL(const void *ptr, GLsizei length, const GLchar *label);
void patchParameterfvNULL(GLenum pname, const GLfloat *values);
void patchParameteriNULL(GLenum pname, GLint value);
void pathCommandsNVNULL(GLuint path,
                        GLsizei numCommands,
                        const GLubyte *commands,
                        GLsizei numCoords,
                        GLenum coordType,
                        const void *coords);
void pathParameterfNVNULL(GLuint path, GLenum pname, GLfloat value);
void pathParameteriNVNULL(GLuint path, GLenum pname, GLint value);
void pathStencilFuncNVNULL(GLenum func, GLint ref, GLuint mask);
void pauseTransformFeedbackNULL();
void pixelStorefNULL(GLenum pname, GLfloat param);
void pixelStoreiNULL(GLenum pname, GLint param);
void pointParameterfNULL(GLenum pname, GLfloat param);
void pointParameterfvNULL(GLenum pname, const GLfloat *params);
void pointParameteriNULL(GLenum pname, GLint param);
void pointParameterivNULL(GLenum pname, const GLint *params);
void pointSizeNULL(GLfloat size);
void polygonModeNULL(GLenum face, GLenum mode);
void polygonOffsetNULL(GLfloat factor, GLfloat units);
void popDebugGroupNULL();
void primitiveBoundingBoxNULL(GLfloat minX,
                              GLfloat minY,
                              GLfloat minZ,
                              GLfloat minW,
                              GLfloat maxX,
                              GLfloat maxY,
                              GLfloat maxZ,
                              GLfloat maxW);
void primitiveRestartIndexNULL(GLuint index);
void programBinaryNULL(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
void programParameteriNULL(GLuint program, GLenum pname, GLint value);
void programPathFragmentInputGenNVNULL(GLuint program,
                                       GLint location,
                                       GLenum genMode,
                                       GLint components,
                                       const GLfloat *coeffs);
void programUniform1dNULL(GLuint program, GLint location, GLdouble v0);
void programUniform1dvNULL(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void programUniform1fNULL(GLuint program, GLint location, GLfloat v0);
void programUniform1fvNULL(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void programUniform1iNULL(GLuint program, GLint location, GLint v0);
void programUniform1ivNULL(GLuint program, GLint location, GLsizei count, const GLint *value);
void programUniform1uiNULL(GLuint program, GLint location, GLuint v0);
void programUniform1uivNULL(GLuint program, GLint location, GLsizei count, const GLuint *value);
void programUniform2dNULL(GLuint program, GLint location, GLdouble v0, GLdouble v1);
void programUniform2dvNULL(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void programUniform2fNULL(GLuint program, GLint location, GLfloat v0, GLfloat v1);
void programUniform2fvNULL(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void programUniform2iNULL(GLuint program, GLint location, GLint v0, GLint v1);
void programUniform2ivNULL(GLuint program, GLint location, GLsizei count, const GLint *value);
void programUniform2uiNULL(GLuint program, GLint location, GLuint v0, GLuint v1);
void programUniform2uivNULL(GLuint program, GLint location, GLsizei count, const GLuint *value);
void programUniform3dNULL(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
void programUniform3dvNULL(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void programUniform3fNULL(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void programUniform3fvNULL(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void programUniform3iNULL(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
void programUniform3ivNULL(GLuint program, GLint location, GLsizei count, const GLint *value);
void programUniform3uiNULL(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
void programUniform3uivNULL(GLuint program, GLint location, GLsizei count, const GLuint *value);
void programUniform4dNULL(GLuint program,
                          GLint location,
                          GLdouble v0,
                          GLdouble v1,
                          GLdouble v2,
                          GLdouble v3);
void programUniform4dvNULL(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void programUniform4fNULL(GLuint program,
                          GLint location,
                          GLfloat v0,
                          GLfloat v1,
                          GLfloat v2,
                          GLfloat v3);
void programUniform4fvNULL(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void programUniform4iNULL(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void programUniform4ivNULL(GLuint program, GLint location, GLsizei count, const GLint *value);
void programUniform4uiNULL(GLuint program,
                           GLint location,
                           GLuint v0,
                           GLuint v1,
                           GLuint v2,
                           GLuint v3);
void programUniform4uivNULL(GLuint program, GLint location, GLsizei count, const GLuint *value);
void programUniformMatrix2dvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLdouble *value);
void programUniformMatrix2fvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLfloat *value);
void programUniformMatrix2x3dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix2x3fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void programUniformMatrix2x4dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix2x4fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void programUniformMatrix3dvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLdouble *value);
void programUniformMatrix3fvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLfloat *value);
void programUniformMatrix3x2dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix3x2fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void programUniformMatrix3x4dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix3x4fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void programUniformMatrix4dvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLdouble *value);
void programUniformMatrix4fvNULL(GLuint program,
                                 GLint location,
                                 GLsizei count,
                                 GLboolean transpose,
                                 const GLfloat *value);
void programUniformMatrix4x2dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix4x2fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void programUniformMatrix4x3dvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLdouble *value);
void programUniformMatrix4x3fvNULL(GLuint program,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value);
void provokingVertexNULL(GLenum mode);
void pushDebugGroupNULL(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void queryCounterNULL(GLuint id, GLenum target);
void readBufferNULL(GLenum src);
void readPixelsNULL(GLint x,
                    GLint y,
                    GLsizei width,
                    GLsizei height,
                    GLenum format,
                    GLenum type,
                    void *pixels);
void readnPixelsNULL(GLint x,
                     GLint y,
                     GLsizei width,
                     GLsizei height,
                     GLenum format,
                     GLenum type,
                     GLsizei bufSize,
                     void *data);
void releaseShaderCompilerNULL();
void renderbufferStorageNULL(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void renderbufferStorageMultisampleNULL(GLenum target,
                                        GLsizei samples,
                                        GLenum internalformat,
                                        GLsizei width,
                                        GLsizei height);
void resumeTransformFeedbackNULL();
void sampleCoverageNULL(GLfloat value, GLboolean invert);
void sampleMaskiNULL(GLuint maskNumber, GLbitfield mask);
void samplerParameterIivNULL(GLuint sampler, GLenum pname, const GLint *param);
void samplerParameterIuivNULL(GLuint sampler, GLenum pname, const GLuint *param);
void samplerParameterfNULL(GLuint sampler, GLenum pname, GLfloat param);
void samplerParameterfvNULL(GLuint sampler, GLenum pname, const GLfloat *param);
void samplerParameteriNULL(GLuint sampler, GLenum pname, GLint param);
void samplerParameterivNULL(GLuint sampler, GLenum pname, const GLint *param);
void scissorNULL(GLint x, GLint y, GLsizei width, GLsizei height);
void scissorArrayvNULL(GLuint first, GLsizei count, const GLint *v);
void scissorIndexedNULL(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void scissorIndexedvNULL(GLuint index, const GLint *v);
void setFenceNVNULL(GLuint fence, GLenum condition);
void shaderBinaryNULL(GLsizei count,
                      const GLuint *shaders,
                      GLenum binaryformat,
                      const void *binary,
                      GLsizei length);
void shaderSourceNULL(GLuint shader,
                      GLsizei count,
                      const GLchar *const *string,
                      const GLint *length);
void shaderStorageBlockBindingNULL(GLuint program,
                                   GLuint storageBlockIndex,
                                   GLuint storageBlockBinding);
void stencilFillPathInstancedNVNULL(GLsizei numPaths,
                                    GLenum pathNameType,
                                    const void *paths,
                                    GLuint pathBase,
                                    GLenum fillMode,
                                    GLuint mask,
                                    GLenum transformType,
                                    const GLfloat *transformValues);
void stencilFillPathNVNULL(GLuint path, GLenum fillMode, GLuint mask);
void stencilFuncNULL(GLenum func, GLint ref, GLuint mask);
void stencilFuncSeparateNULL(GLenum face, GLenum func, GLint ref, GLuint mask);
void stencilMaskNULL(GLuint mask);
void stencilMaskSeparateNULL(GLenum face, GLuint mask);
void stencilOpNULL(GLenum fail, GLenum zfail, GLenum zpass);
void stencilOpSeparateNULL(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void stencilStrokePathInstancedNVNULL(GLsizei numPaths,
                                      GLenum pathNameType,
                                      const void *paths,
                                      GLuint pathBase,
                                      GLint reference,
                                      GLuint mask,
                                      GLenum transformType,
                                      const GLfloat *transformValues);
void stencilStrokePathNVNULL(GLuint path, GLint reference, GLuint mask);
void stencilThenCoverFillPathInstancedNVNULL(GLsizei numPaths,
                                             GLenum pathNameType,
                                             const void *paths,
                                             GLuint pathBase,
                                             GLenum fillMode,
                                             GLuint mask,
                                             GLenum coverMode,
                                             GLenum transformType,
                                             const GLfloat *transformValues);
void stencilThenCoverFillPathNVNULL(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
void stencilThenCoverStrokePathInstancedNVNULL(GLsizei numPaths,
                                               GLenum pathNameType,
                                               const void *paths,
                                               GLuint pathBase,
                                               GLint reference,
                                               GLuint mask,
                                               GLenum coverMode,
                                               GLenum transformType,
                                               const GLfloat *transformValues);
void stencilThenCoverStrokePathNVNULL(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
GLboolean testFenceNVNULL(GLuint fence);
void texBufferNULL(GLenum target, GLenum internalformat, GLuint buffer);
void texBufferRangeNULL(GLenum target,
                        GLenum internalformat,
                        GLuint buffer,
                        GLintptr offset,
                        GLsizeiptr size);
void texImage1DNULL(GLenum target,
                    GLint level,
                    GLint internalformat,
                    GLsizei width,
                    GLint border,
                    GLenum format,
                    GLenum type,
                    const void *pixels);
void texImage2DNULL(GLenum target,
                    GLint level,
                    GLint internalformat,
                    GLsizei width,
                    GLsizei height,
                    GLint border,
                    GLenum format,
                    GLenum type,
                    const void *pixels);
void texImage2DMultisampleNULL(GLenum target,
                               GLsizei samples,
                               GLenum internalformat,
                               GLsizei width,
                               GLsizei height,
                               GLboolean fixedsamplelocations);
void texImage3DNULL(GLenum target,
                    GLint level,
                    GLint internalformat,
                    GLsizei width,
                    GLsizei height,
                    GLsizei depth,
                    GLint border,
                    GLenum format,
                    GLenum type,
                    const void *pixels);
void texImage3DMultisampleNULL(GLenum target,
                               GLsizei samples,
                               GLenum internalformat,
                               GLsizei width,
                               GLsizei height,
                               GLsizei depth,
                               GLboolean fixedsamplelocations);
void texParameterIivNULL(GLenum target, GLenum pname, const GLint *params);
void texParameterIuivNULL(GLenum target, GLenum pname, const GLuint *params);
void texParameterfNULL(GLenum target, GLenum pname, GLfloat param);
void texParameterfvNULL(GLenum target, GLenum pname, const GLfloat *params);
void texParameteriNULL(GLenum target, GLenum pname, GLint param);
void texParameterivNULL(GLenum target, GLenum pname, const GLint *params);
void texStorage1DNULL(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
void texStorage2DNULL(GLenum target,
                      GLsizei levels,
                      GLenum internalformat,
                      GLsizei width,
                      GLsizei height);
void texStorage2DMultisampleNULL(GLenum target,
                                 GLsizei samples,
                                 GLenum internalformat,
                                 GLsizei width,
                                 GLsizei height,
                                 GLboolean fixedsamplelocations);
void texStorage3DNULL(GLenum target,
                      GLsizei levels,
                      GLenum internalformat,
                      GLsizei width,
                      GLsizei height,
                      GLsizei depth);
void texStorage3DMultisampleNULL(GLenum target,
                                 GLsizei samples,
                                 GLenum internalformat,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth,
                                 GLboolean fixedsamplelocations);
void texSubImage1DNULL(GLenum target,
                       GLint level,
                       GLint xoffset,
                       GLsizei width,
                       GLenum format,
                       GLenum type,
                       const void *pixels);
void texSubImage2DNULL(GLenum target,
                       GLint level,
                       GLint xoffset,
                       GLint yoffset,
                       GLsizei width,
                       GLsizei height,
                       GLenum format,
                       GLenum type,
                       const void *pixels);
void texSubImage3DNULL(GLenum target,
                       GLint level,
                       GLint xoffset,
                       GLint yoffset,
                       GLint zoffset,
                       GLsizei width,
                       GLsizei height,
                       GLsizei depth,
                       GLenum format,
                       GLenum type,
                       const void *pixels);
void textureBarrierNULL();
void textureBufferNULL(GLuint texture, GLenum internalformat, GLuint buffer);
void textureBufferRangeNULL(GLuint texture,
                            GLenum internalformat,
                            GLuint buffer,
                            GLintptr offset,
                            GLsizeiptr size);
void textureParameterIivNULL(GLuint texture, GLenum pname, const GLint *params);
void textureParameterIuivNULL(GLuint texture, GLenum pname, const GLuint *params);
void textureParameterfNULL(GLuint texture, GLenum pname, GLfloat param);
void textureParameterfvNULL(GLuint texture, GLenum pname, const GLfloat *param);
void textureParameteriNULL(GLuint texture, GLenum pname, GLint param);
void textureParameterivNULL(GLuint texture, GLenum pname, const GLint *param);
void textureStorage1DNULL(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void textureStorage2DNULL(GLuint texture,
                          GLsizei levels,
                          GLenum internalformat,
                          GLsizei width,
                          GLsizei height);
void textureStorage2DMultisampleNULL(GLuint texture,
                                     GLsizei samples,
                                     GLenum internalformat,
                                     GLsizei width,
                                     GLsizei height,
                                     GLboolean fixedsamplelocations);
void textureStorage3DNULL(GLuint texture,
                          GLsizei levels,
                          GLenum internalformat,
                          GLsizei width,
                          GLsizei height,
                          GLsizei depth);
void textureStorage3DMultisampleNULL(GLuint texture,
                                     GLsizei samples,
                                     GLenum internalformat,
                                     GLsizei width,
                                     GLsizei height,
                                     GLsizei depth,
                                     GLboolean fixedsamplelocations);
void textureSubImage1DNULL(GLuint texture,
                           GLint level,
                           GLint xoffset,
                           GLsizei width,
                           GLenum format,
                           GLenum type,
                           const void *pixels);
void textureSubImage2DNULL(GLuint texture,
                           GLint level,
                           GLint xoffset,
                           GLint yoffset,
                           GLsizei width,
                           GLsizei height,
                           GLenum format,
                           GLenum type,
                           const void *pixels);
void textureSubImage3DNULL(GLuint texture,
                           GLint level,
                           GLint xoffset,
                           GLint yoffset,
                           GLint zoffset,
                           GLsizei width,
                           GLsizei height,
                           GLsizei depth,
                           GLenum format,
                           GLenum type,
                           const void *pixels);
void textureViewNULL(GLuint texture,
                     GLenum target,
                     GLuint origtexture,
                     GLenum internalformat,
                     GLuint minlevel,
                     GLuint numlevels,
                     GLuint minlayer,
                     GLuint numlayers);
void transformFeedbackBufferBaseNULL(GLuint xfb, GLuint index, GLuint buffer);
void transformFeedbackBufferRangeNULL(GLuint xfb,
                                      GLuint index,
                                      GLuint buffer,
                                      GLintptr offset,
                                      GLsizeiptr size);
void transformFeedbackVaryingsNULL(GLuint program,
                                   GLsizei count,
                                   const GLchar *const *varyings,
                                   GLenum bufferMode);
void uniform1dNULL(GLint location, GLdouble x);
void uniform1dvNULL(GLint location, GLsizei count, const GLdouble *value);
void uniform1fNULL(GLint location, GLfloat v0);
void uniform1fvNULL(GLint location, GLsizei count, const GLfloat *value);
void uniform1iNULL(GLint location, GLint v0);
void uniform1ivNULL(GLint location, GLsizei count, const GLint *value);
void uniform1uiNULL(GLint location, GLuint v0);
void uniform1uivNULL(GLint location, GLsizei count, const GLuint *value);
void uniform2dNULL(GLint location, GLdouble x, GLdouble y);
void uniform2dvNULL(GLint location, GLsizei count, const GLdouble *value);
void uniform2fNULL(GLint location, GLfloat v0, GLfloat v1);
void uniform2fvNULL(GLint location, GLsizei count, const GLfloat *value);
void uniform2iNULL(GLint location, GLint v0, GLint v1);
void uniform2ivNULL(GLint location, GLsizei count, const GLint *value);
void uniform2uiNULL(GLint location, GLuint v0, GLuint v1);
void uniform2uivNULL(GLint location, GLsizei count, const GLuint *value);
void uniform3dNULL(GLint location, GLdouble x, GLdouble y, GLdouble z);
void uniform3dvNULL(GLint location, GLsizei count, const GLdouble *value);
void uniform3fNULL(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void uniform3fvNULL(GLint location, GLsizei count, const GLfloat *value);
void uniform3iNULL(GLint location, GLint v0, GLint v1, GLint v2);
void uniform3ivNULL(GLint location, GLsizei count, const GLint *value);
void uniform3uiNULL(GLint location, GLuint v0, GLuint v1, GLuint v2);
void uniform3uivNULL(GLint location, GLsizei count, const GLuint *value);
void uniform4dNULL(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void uniform4dvNULL(GLint location, GLsizei count, const GLdouble *value);
void uniform4fNULL(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void uniform4fvNULL(GLint location, GLsizei count, const GLfloat *value);
void uniform4iNULL(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void uniform4ivNULL(GLint location, GLsizei count, const GLint *value);
void uniform4uiNULL(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void uniform4uivNULL(GLint location, GLsizei count, const GLuint *value);
void uniformBlockBindingNULL(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void uniformMatrix2dvNULL(GLint location,
                          GLsizei count,
                          GLboolean transpose,
                          const GLdouble *value);
void uniformMatrix2fvNULL(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void uniformMatrix2x3dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix2x3fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformMatrix2x4dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix2x4fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformMatrix3dvNULL(GLint location,
                          GLsizei count,
                          GLboolean transpose,
                          const GLdouble *value);
void uniformMatrix3fvNULL(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void uniformMatrix3x2dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix3x2fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformMatrix3x4dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix3x4fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformMatrix4dvNULL(GLint location,
                          GLsizei count,
                          GLboolean transpose,
                          const GLdouble *value);
void uniformMatrix4fvNULL(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void uniformMatrix4x2dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix4x2fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformMatrix4x3dvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLdouble *value);
void uniformMatrix4x3fvNULL(GLint location,
                            GLsizei count,
                            GLboolean transpose,
                            const GLfloat *value);
void uniformSubroutinesuivNULL(GLenum shadertype, GLsizei count, const GLuint *indices);
GLboolean unmapBufferNULL(GLenum target);
GLboolean unmapNamedBufferNULL(GLuint buffer);
void useProgramNULL(GLuint program);
void useProgramStagesNULL(GLuint pipeline, GLbitfield stages, GLuint program);
void validateProgramNULL(GLuint program);
void validateProgramPipelineNULL(GLuint pipeline);
void vertexArrayAttribBindingNULL(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void vertexArrayAttribFormatNULL(GLuint vaobj,
                                 GLuint attribindex,
                                 GLint size,
                                 GLenum type,
                                 GLboolean normalized,
                                 GLuint relativeoffset);
void vertexArrayAttribIFormatNULL(GLuint vaobj,
                                  GLuint attribindex,
                                  GLint size,
                                  GLenum type,
                                  GLuint relativeoffset);
void vertexArrayAttribLFormatNULL(GLuint vaobj,
                                  GLuint attribindex,
                                  GLint size,
                                  GLenum type,
                                  GLuint relativeoffset);
void vertexArrayBindingDivisorNULL(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void vertexArrayElementBufferNULL(GLuint vaobj, GLuint buffer);
void vertexArrayVertexBufferNULL(GLuint vaobj,
                                 GLuint bindingindex,
                                 GLuint buffer,
                                 GLintptr offset,
                                 GLsizei stride);
void vertexArrayVertexBuffersNULL(GLuint vaobj,
                                  GLuint first,
                                  GLsizei count,
                                  const GLuint *buffers,
                                  const GLintptr *offsets,
                                  const GLsizei *strides);
void vertexAttrib1dNULL(GLuint index, GLdouble x);
void vertexAttrib1dvNULL(GLuint index, const GLdouble *v);
void vertexAttrib1fNULL(GLuint index, GLfloat x);
void vertexAttrib1fvNULL(GLuint index, const GLfloat *v);
void vertexAttrib1sNULL(GLuint index, GLshort x);
void vertexAttrib1svNULL(GLuint index, const GLshort *v);
void vertexAttrib2dNULL(GLuint index, GLdouble x, GLdouble y);
void vertexAttrib2dvNULL(GLuint index, const GLdouble *v);
void vertexAttrib2fNULL(GLuint index, GLfloat x, GLfloat y);
void vertexAttrib2fvNULL(GLuint index, const GLfloat *v);
void vertexAttrib2sNULL(GLuint index, GLshort x, GLshort y);
void vertexAttrib2svNULL(GLuint index, const GLshort *v);
void vertexAttrib3dNULL(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void vertexAttrib3dvNULL(GLuint index, const GLdouble *v);
void vertexAttrib3fNULL(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void vertexAttrib3fvNULL(GLuint index, const GLfloat *v);
void vertexAttrib3sNULL(GLuint index, GLshort x, GLshort y, GLshort z);
void vertexAttrib3svNULL(GLuint index, const GLshort *v);
void vertexAttrib4NbvNULL(GLuint index, const GLbyte *v);
void vertexAttrib4NivNULL(GLuint index, const GLint *v);
void vertexAttrib4NsvNULL(GLuint index, const GLshort *v);
void vertexAttrib4NubNULL(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void vertexAttrib4NubvNULL(GLuint index, const GLubyte *v);
void vertexAttrib4NuivNULL(GLuint index, const GLuint *v);
void vertexAttrib4NusvNULL(GLuint index, const GLushort *v);
void vertexAttrib4bvNULL(GLuint index, const GLbyte *v);
void vertexAttrib4dNULL(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void vertexAttrib4dvNULL(GLuint index, const GLdouble *v);
void vertexAttrib4fNULL(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void vertexAttrib4fvNULL(GLuint index, const GLfloat *v);
void vertexAttrib4ivNULL(GLuint index, const GLint *v);
void vertexAttrib4sNULL(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void vertexAttrib4svNULL(GLuint index, const GLshort *v);
void vertexAttrib4ubvNULL(GLuint index, const GLubyte *v);
void vertexAttrib4uivNULL(GLuint index, const GLuint *v);
void vertexAttrib4usvNULL(GLuint index, const GLushort *v);
void vertexAttribBindingNULL(GLuint attribindex, GLuint bindingindex);
void vertexAttribDivisorNULL(GLuint index, GLuint divisor);
void vertexAttribFormatNULL(GLuint attribindex,
                            GLint size,
                            GLenum type,
                            GLboolean normalized,
                            GLuint relativeoffset);
void vertexAttribI1iNULL(GLuint index, GLint x);
void vertexAttribI1ivNULL(GLuint index, const GLint *v);
void vertexAttribI1uiNULL(GLuint index, GLuint x);
void vertexAttribI1uivNULL(GLuint index, const GLuint *v);
void vertexAttribI2iNULL(GLuint index, GLint x, GLint y);
void vertexAttribI2ivNULL(GLuint index, const GLint *v);
void vertexAttribI2uiNULL(GLuint index, GLuint x, GLuint y);
void vertexAttribI2uivNULL(GLuint index, const GLuint *v);
void vertexAttribI3iNULL(GLuint index, GLint x, GLint y, GLint z);
void vertexAttribI3ivNULL(GLuint index, const GLint *v);
void vertexAttribI3uiNULL(GLuint index, GLuint x, GLuint y, GLuint z);
void vertexAttribI3uivNULL(GLuint index, const GLuint *v);
void vertexAttribI4bvNULL(GLuint index, const GLbyte *v);
void vertexAttribI4iNULL(GLuint index, GLint x, GLint y, GLint z, GLint w);
void vertexAttribI4ivNULL(GLuint index, const GLint *v);
void vertexAttribI4svNULL(GLuint index, const GLshort *v);
void vertexAttribI4ubvNULL(GLuint index, const GLubyte *v);
void vertexAttribI4uiNULL(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void vertexAttribI4uivNULL(GLuint index, const GLuint *v);
void vertexAttribI4usvNULL(GLuint index, const GLushort *v);
void vertexAttribIFormatNULL(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void vertexAttribIPointerNULL(GLuint index,
                              GLint size,
                              GLenum type,
                              GLsizei stride,
                              const void *pointer);
void vertexAttribL1dNULL(GLuint index, GLdouble x);
void vertexAttribL1dvNULL(GLuint index, const GLdouble *v);
void vertexAttribL2dNULL(GLuint index, GLdouble x, GLdouble y);
void vertexAttribL2dvNULL(GLuint index, const GLdouble *v);
void vertexAttribL3dNULL(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void vertexAttribL3dvNULL(GLuint index, const GLdouble *v);
void vertexAttribL4dNULL(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void vertexAttribL4dvNULL(GLuint index, const GLdouble *v);
void vertexAttribLFormatNULL(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void vertexAttribLPointerNULL(GLuint index,
                              GLint size,
                              GLenum type,
                              GLsizei stride,
                              const void *pointer);
void vertexAttribP1uiNULL(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void vertexAttribP1uivNULL(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void vertexAttribP2uiNULL(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void vertexAttribP2uivNULL(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void vertexAttribP3uiNULL(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void vertexAttribP3uivNULL(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void vertexAttribP4uiNULL(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void vertexAttribP4uivNULL(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void vertexAttribPointerNULL(GLuint index,
                             GLint size,
                             GLenum type,
                             GLboolean normalized,
                             GLsizei stride,
                             const void *pointer);
void vertexBindingDivisorNULL(GLuint bindingindex, GLuint divisor);
void viewportNULL(GLint x, GLint y, GLsizei width, GLsizei height);
void viewportArrayvNULL(GLuint first, GLsizei count, const GLfloat *v);
void viewportIndexedfNULL(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void viewportIndexedfvNULL(GLuint index, const GLfloat *v);
void waitSyncNULL(GLsync sync, GLbitfield flags, GLuint64 timeout);
}  // namespace rx

#endif  // LIBGLESV2_RENDERER_GL_NULL_GL_FUNCTIONS_AUTOGEN_H_
