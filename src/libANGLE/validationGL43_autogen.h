// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and wgl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationGL43_autogen.h:
//   Validation functions for the OpenGL 4.3 entry points.

#ifndef LIBANGLE_VALIDATION_GL43_AUTOGEN_H_
#define LIBANGLE_VALIDATION_GL43_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateClearBufferData(const Context *context,
                             const GLenum target,
                             const GLenum internalformat,
                             const GLenum format,
                             const GLenum type,
                             const void *data);
bool ValidateClearBufferSubData(const Context *context,
                                const GLenum target,
                                const GLenum internalformat,
                                const GLintptr offset,
                                const GLsizeiptr size,
                                const GLenum format,
                                const GLenum type,
                                const void *data);
bool ValidateGetInternalformati64v(const Context *context,
                                   const GLenum target,
                                   const GLenum internalformat,
                                   const GLenum pname,
                                   const GLsizei bufSize,
                                   const GLint64 *params);
bool ValidateGetProgramResourceLocationIndex(const Context *context,
                                             const ShaderProgramID programPacked,
                                             const GLenum programInterface,
                                             const GLchar *name);
bool ValidateInvalidateBufferData(const Context *context, const BufferID bufferPacked);
bool ValidateInvalidateBufferSubData(const Context *context,
                                     const BufferID bufferPacked,
                                     const GLintptr offset,
                                     const GLsizeiptr length);
bool ValidateInvalidateTexImage(const Context *context,
                                const TextureID texturePacked,
                                const GLint level);
bool ValidateInvalidateTexSubImage(const Context *context,
                                   const TextureID texturePacked,
                                   const GLint level,
                                   const GLint xoffset,
                                   const GLint yoffset,
                                   const GLint zoffset,
                                   const GLsizei width,
                                   const GLsizei height,
                                   const GLsizei depth);
bool ValidateMultiDrawArraysIndirect(const Context *context,
                                     const GLenum mode,
                                     const void *indirect,
                                     const GLsizei drawcount,
                                     const GLsizei stride);
bool ValidateMultiDrawElementsIndirect(const Context *context,
                                       const GLenum mode,
                                       const GLenum type,
                                       const void *indirect,
                                       const GLsizei drawcount,
                                       const GLsizei stride);
bool ValidateShaderStorageBlockBinding(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLuint storageBlockIndex,
                                       const GLuint storageBlockBinding);
bool ValidateTextureView(const Context *context,
                         const TextureID texturePacked,
                         const GLenum target,
                         const GLuint origtexture,
                         const GLenum internalformat,
                         const GLuint minlevel,
                         const GLuint numlevels,
                         const GLuint minlayer,
                         const GLuint numlayers);
bool ValidateVertexAttribLFormat(const Context *context,
                                 const GLuint attribindex,
                                 const GLint size,
                                 const GLenum type,
                                 const GLuint relativeoffset);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_GL43_AUTOGEN_H_
