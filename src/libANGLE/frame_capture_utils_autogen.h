// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// frame_capture_utils_autogen.h:
//   ANGLE Frame capture types and helper functions.

#ifndef LIBANGLE_FRAME_CAPTURE_UTILS_AUTOGEN_H_
#define LIBANGLE_FRAME_CAPTURE_UTILS_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace angle
{
enum class ParamType
{
    TAlphaTestFunc,
    TBufferBinding,
    TBufferID,
    TBufferIDConstPointer,
    TBufferIDPointer,
    TBufferUsage,
    TClientVertexArrayType,
    TCullFaceMode,
    TDrawElementsType,
    TGLDEBUGPROC,
    TGLDEBUGPROCKHR,
    TGLbitfield,
    TGLboolean,
    TGLbooleanConstPointer,
    TGLbooleanPointer,
    TGLbyte,
    TGLbyteConstPointer,
    TGLcharConstPointer,
    TGLcharConstPointerPointer,
    TGLcharPointer,
    TGLclampx,
    TGLdouble,
    TGLdoubleConstPointer,
    TGLdoublePointer,
    TGLeglImageOES,
    TGLenum,
    TGLenumConstPointer,
    TGLenumPointer,
    TGLfixed,
    TGLfixedConstPointer,
    TGLfixedPointer,
    TGLfloat,
    TGLfloatConstPointer,
    TGLfloatPointer,
    TGLint,
    TGLint64Pointer,
    TGLintConstPointer,
    TGLintPointer,
    TGLintptr,
    TGLintptrConstPointer,
    TGLshort,
    TGLshortConstPointer,
    TGLsizei,
    TGLsizeiConstPointer,
    TGLsizeiPointer,
    TGLsizeiptr,
    TGLsizeiptrConstPointer,
    TGLsync,
    TGLubyte,
    TGLubyteConstPointer,
    TGLubytePointer,
    TGLuint,
    TGLuint64,
    TGLuint64ConstPointer,
    TGLuint64Pointer,
    TGLuintConstPointer,
    TGLuintPointer,
    TGLushort,
    TGLushortConstPointer,
    TGLushortPointer,
    TGLvoidConstPointer,
    TGLvoidConstPointerPointer,
    TGraphicsResetStatus,
    THandleType,
    TLightParameter,
    TLogicalOperation,
    TMaterialParameter,
    TMatrixType,
    TPointParameter,
    TPrimitiveMode,
    TProvokingVertexConvention,
    TQueryType,
    TRenderbufferID,
    TRenderbufferIDConstPointer,
    TRenderbufferIDPointer,
    TShaderType,
    TShadingModel,
    TTextureEnvParameter,
    TTextureEnvTarget,
    TTextureID,
    TTextureIDConstPointer,
    TTextureIDPointer,
    TTextureTarget,
    TTextureType,
    TVertexAttribType,
    TvoidConstPointer,
    TvoidConstPointerPointer,
    TvoidPointer,
    TvoidPointerPointer,
};

union ParamValue
{
    gl::AlphaTestFunc AlphaTestFuncVal;
    gl::BufferBinding BufferBindingVal;
    gl::BufferID BufferIDVal;
    const gl::BufferID *BufferIDConstPointerVal;
    gl::BufferID *BufferIDPointerVal;
    gl::BufferUsage BufferUsageVal;
    gl::ClientVertexArrayType ClientVertexArrayTypeVal;
    gl::CullFaceMode CullFaceModeVal;
    gl::DrawElementsType DrawElementsTypeVal;
    GLDEBUGPROC GLDEBUGPROCVal;
    GLDEBUGPROCKHR GLDEBUGPROCKHRVal;
    GLbitfield GLbitfieldVal;
    GLboolean GLbooleanVal;
    const GLboolean *GLbooleanConstPointerVal;
    GLboolean *GLbooleanPointerVal;
    GLbyte GLbyteVal;
    const GLbyte *GLbyteConstPointerVal;
    const GLchar *GLcharConstPointerVal;
    const GLchar *const *GLcharConstPointerPointerVal;
    GLchar *GLcharPointerVal;
    GLclampx GLclampxVal;
    GLdouble GLdoubleVal;
    const GLdouble *GLdoubleConstPointerVal;
    GLdouble *GLdoublePointerVal;
    GLeglImageOES GLeglImageOESVal;
    GLenum GLenumVal;
    const GLenum *GLenumConstPointerVal;
    GLenum *GLenumPointerVal;
    GLfixed GLfixedVal;
    const GLfixed *GLfixedConstPointerVal;
    GLfixed *GLfixedPointerVal;
    GLfloat GLfloatVal;
    const GLfloat *GLfloatConstPointerVal;
    GLfloat *GLfloatPointerVal;
    GLint GLintVal;
    GLint64 *GLint64PointerVal;
    const GLint *GLintConstPointerVal;
    GLint *GLintPointerVal;
    GLintptr GLintptrVal;
    const GLintptr *GLintptrConstPointerVal;
    GLshort GLshortVal;
    const GLshort *GLshortConstPointerVal;
    GLsizei GLsizeiVal;
    const GLsizei *GLsizeiConstPointerVal;
    GLsizei *GLsizeiPointerVal;
    GLsizeiptr GLsizeiptrVal;
    const GLsizeiptr *GLsizeiptrConstPointerVal;
    GLsync GLsyncVal;
    GLubyte GLubyteVal;
    const GLubyte *GLubyteConstPointerVal;
    GLubyte *GLubytePointerVal;
    GLuint GLuintVal;
    GLuint64 GLuint64Val;
    const GLuint64 *GLuint64ConstPointerVal;
    GLuint64 *GLuint64PointerVal;
    const GLuint *GLuintConstPointerVal;
    GLuint *GLuintPointerVal;
    GLushort GLushortVal;
    const GLushort *GLushortConstPointerVal;
    GLushort *GLushortPointerVal;
    const GLvoid *GLvoidConstPointerVal;
    const GLvoid *const *GLvoidConstPointerPointerVal;
    gl::GraphicsResetStatus GraphicsResetStatusVal;
    gl::HandleType HandleTypeVal;
    gl::LightParameter LightParameterVal;
    gl::LogicalOperation LogicalOperationVal;
    gl::MaterialParameter MaterialParameterVal;
    gl::MatrixType MatrixTypeVal;
    gl::PointParameter PointParameterVal;
    gl::PrimitiveMode PrimitiveModeVal;
    gl::ProvokingVertexConvention ProvokingVertexConventionVal;
    gl::QueryType QueryTypeVal;
    gl::RenderbufferID RenderbufferIDVal;
    const gl::RenderbufferID *RenderbufferIDConstPointerVal;
    gl::RenderbufferID *RenderbufferIDPointerVal;
    gl::ShaderType ShaderTypeVal;
    gl::ShadingModel ShadingModelVal;
    gl::TextureEnvParameter TextureEnvParameterVal;
    gl::TextureEnvTarget TextureEnvTargetVal;
    gl::TextureID TextureIDVal;
    const gl::TextureID *TextureIDConstPointerVal;
    gl::TextureID *TextureIDPointerVal;
    gl::TextureTarget TextureTargetVal;
    gl::TextureType TextureTypeVal;
    gl::VertexAttribType VertexAttribTypeVal;
    const void *voidConstPointerVal;
    const void *const *voidConstPointerPointerVal;
    void *voidPointerVal;
    void **voidPointerPointerVal;
};

template <ParamType PType, typename T>
void GetParamVal(const ParamValue &value, T *valueOut);

template <>
inline void GetParamVal<ParamType::TAlphaTestFunc, gl::AlphaTestFunc>(const ParamValue &value,
                                                                      gl::AlphaTestFunc *valueOut)
{
    *valueOut = value.AlphaTestFuncVal;
}

template <>
inline void GetParamVal<ParamType::TBufferBinding, gl::BufferBinding>(const ParamValue &value,
                                                                      gl::BufferBinding *valueOut)
{
    *valueOut = value.BufferBindingVal;
}

template <>
inline void GetParamVal<ParamType::TBufferID, gl::BufferID>(const ParamValue &value,
                                                            gl::BufferID *valueOut)
{
    *valueOut = value.BufferIDVal;
}

template <>
inline void GetParamVal<ParamType::TBufferIDConstPointer, const gl::BufferID *>(
    const ParamValue &value,
    const gl::BufferID **valueOut)
{
    *valueOut = value.BufferIDConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TBufferIDPointer, gl::BufferID *>(const ParamValue &value,
                                                                     gl::BufferID **valueOut)
{
    *valueOut = value.BufferIDPointerVal;
}

template <>
inline void GetParamVal<ParamType::TBufferUsage, gl::BufferUsage>(const ParamValue &value,
                                                                  gl::BufferUsage *valueOut)
{
    *valueOut = value.BufferUsageVal;
}

template <>
inline void GetParamVal<ParamType::TClientVertexArrayType, gl::ClientVertexArrayType>(
    const ParamValue &value,
    gl::ClientVertexArrayType *valueOut)
{
    *valueOut = value.ClientVertexArrayTypeVal;
}

template <>
inline void GetParamVal<ParamType::TCullFaceMode, gl::CullFaceMode>(const ParamValue &value,
                                                                    gl::CullFaceMode *valueOut)
{
    *valueOut = value.CullFaceModeVal;
}

template <>
inline void GetParamVal<ParamType::TDrawElementsType, gl::DrawElementsType>(
    const ParamValue &value,
    gl::DrawElementsType *valueOut)
{
    *valueOut = value.DrawElementsTypeVal;
}

template <>
inline void GetParamVal<ParamType::TGLDEBUGPROC, GLDEBUGPROC>(const ParamValue &value,
                                                              GLDEBUGPROC *valueOut)
{
    *valueOut = value.GLDEBUGPROCVal;
}

template <>
inline void GetParamVal<ParamType::TGLDEBUGPROCKHR, GLDEBUGPROCKHR>(const ParamValue &value,
                                                                    GLDEBUGPROCKHR *valueOut)
{
    *valueOut = value.GLDEBUGPROCKHRVal;
}

template <>
inline void GetParamVal<ParamType::TGLbitfield, GLbitfield>(const ParamValue &value,
                                                            GLbitfield *valueOut)
{
    *valueOut = value.GLbitfieldVal;
}

template <>
inline void GetParamVal<ParamType::TGLboolean, GLboolean>(const ParamValue &value,
                                                          GLboolean *valueOut)
{
    *valueOut = value.GLbooleanVal;
}

template <>
inline void GetParamVal<ParamType::TGLbooleanConstPointer, const GLboolean *>(
    const ParamValue &value,
    const GLboolean **valueOut)
{
    *valueOut = value.GLbooleanConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLbooleanPointer, GLboolean *>(const ParamValue &value,
                                                                   GLboolean **valueOut)
{
    *valueOut = value.GLbooleanPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLbyte, GLbyte>(const ParamValue &value, GLbyte *valueOut)
{
    *valueOut = value.GLbyteVal;
}

template <>
inline void GetParamVal<ParamType::TGLbyteConstPointer, const GLbyte *>(const ParamValue &value,
                                                                        const GLbyte **valueOut)
{
    *valueOut = value.GLbyteConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLcharConstPointer, const GLchar *>(const ParamValue &value,
                                                                        const GLchar **valueOut)
{
    *valueOut = value.GLcharConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLcharConstPointerPointer, const GLchar *const *>(
    const ParamValue &value,
    const GLchar *const **valueOut)
{
    *valueOut = value.GLcharConstPointerPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLcharPointer, GLchar *>(const ParamValue &value,
                                                             GLchar **valueOut)
{
    *valueOut = value.GLcharPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLclampx, GLclampx>(const ParamValue &value, GLclampx *valueOut)
{
    *valueOut = value.GLclampxVal;
}

template <>
inline void GetParamVal<ParamType::TGLdouble, GLdouble>(const ParamValue &value, GLdouble *valueOut)
{
    *valueOut = value.GLdoubleVal;
}

template <>
inline void GetParamVal<ParamType::TGLdoubleConstPointer, const GLdouble *>(
    const ParamValue &value,
    const GLdouble **valueOut)
{
    *valueOut = value.GLdoubleConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLdoublePointer, GLdouble *>(const ParamValue &value,
                                                                 GLdouble **valueOut)
{
    *valueOut = value.GLdoublePointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLeglImageOES, GLeglImageOES>(const ParamValue &value,
                                                                  GLeglImageOES *valueOut)
{
    *valueOut = value.GLeglImageOESVal;
}

template <>
inline void GetParamVal<ParamType::TGLenum, GLenum>(const ParamValue &value, GLenum *valueOut)
{
    *valueOut = value.GLenumVal;
}

template <>
inline void GetParamVal<ParamType::TGLenumConstPointer, const GLenum *>(const ParamValue &value,
                                                                        const GLenum **valueOut)
{
    *valueOut = value.GLenumConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLenumPointer, GLenum *>(const ParamValue &value,
                                                             GLenum **valueOut)
{
    *valueOut = value.GLenumPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLfixed, GLfixed>(const ParamValue &value, GLfixed *valueOut)
{
    *valueOut = value.GLfixedVal;
}

template <>
inline void GetParamVal<ParamType::TGLfixedConstPointer, const GLfixed *>(const ParamValue &value,
                                                                          const GLfixed **valueOut)
{
    *valueOut = value.GLfixedConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLfixedPointer, GLfixed *>(const ParamValue &value,
                                                               GLfixed **valueOut)
{
    *valueOut = value.GLfixedPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLfloat, GLfloat>(const ParamValue &value, GLfloat *valueOut)
{
    *valueOut = value.GLfloatVal;
}

template <>
inline void GetParamVal<ParamType::TGLfloatConstPointer, const GLfloat *>(const ParamValue &value,
                                                                          const GLfloat **valueOut)
{
    *valueOut = value.GLfloatConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLfloatPointer, GLfloat *>(const ParamValue &value,
                                                               GLfloat **valueOut)
{
    *valueOut = value.GLfloatPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLint, GLint>(const ParamValue &value, GLint *valueOut)
{
    *valueOut = value.GLintVal;
}

template <>
inline void GetParamVal<ParamType::TGLint64Pointer, GLint64 *>(const ParamValue &value,
                                                               GLint64 **valueOut)
{
    *valueOut = value.GLint64PointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLintConstPointer, const GLint *>(const ParamValue &value,
                                                                      const GLint **valueOut)
{
    *valueOut = value.GLintConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLintPointer, GLint *>(const ParamValue &value,
                                                           GLint **valueOut)
{
    *valueOut = value.GLintPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLintptr, GLintptr>(const ParamValue &value, GLintptr *valueOut)
{
    *valueOut = value.GLintptrVal;
}

template <>
inline void GetParamVal<ParamType::TGLintptrConstPointer, const GLintptr *>(
    const ParamValue &value,
    const GLintptr **valueOut)
{
    *valueOut = value.GLintptrConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLshort, GLshort>(const ParamValue &value, GLshort *valueOut)
{
    *valueOut = value.GLshortVal;
}

template <>
inline void GetParamVal<ParamType::TGLshortConstPointer, const GLshort *>(const ParamValue &value,
                                                                          const GLshort **valueOut)
{
    *valueOut = value.GLshortConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLsizei, GLsizei>(const ParamValue &value, GLsizei *valueOut)
{
    *valueOut = value.GLsizeiVal;
}

template <>
inline void GetParamVal<ParamType::TGLsizeiConstPointer, const GLsizei *>(const ParamValue &value,
                                                                          const GLsizei **valueOut)
{
    *valueOut = value.GLsizeiConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLsizeiPointer, GLsizei *>(const ParamValue &value,
                                                               GLsizei **valueOut)
{
    *valueOut = value.GLsizeiPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLsizeiptr, GLsizeiptr>(const ParamValue &value,
                                                            GLsizeiptr *valueOut)
{
    *valueOut = value.GLsizeiptrVal;
}

template <>
inline void GetParamVal<ParamType::TGLsizeiptrConstPointer, const GLsizeiptr *>(
    const ParamValue &value,
    const GLsizeiptr **valueOut)
{
    *valueOut = value.GLsizeiptrConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLsync, GLsync>(const ParamValue &value, GLsync *valueOut)
{
    *valueOut = value.GLsyncVal;
}

template <>
inline void GetParamVal<ParamType::TGLubyte, GLubyte>(const ParamValue &value, GLubyte *valueOut)
{
    *valueOut = value.GLubyteVal;
}

template <>
inline void GetParamVal<ParamType::TGLubyteConstPointer, const GLubyte *>(const ParamValue &value,
                                                                          const GLubyte **valueOut)
{
    *valueOut = value.GLubyteConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLubytePointer, GLubyte *>(const ParamValue &value,
                                                               GLubyte **valueOut)
{
    *valueOut = value.GLubytePointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLuint, GLuint>(const ParamValue &value, GLuint *valueOut)
{
    *valueOut = value.GLuintVal;
}

template <>
inline void GetParamVal<ParamType::TGLuint64, GLuint64>(const ParamValue &value, GLuint64 *valueOut)
{
    *valueOut = value.GLuint64Val;
}

template <>
inline void GetParamVal<ParamType::TGLuint64ConstPointer, const GLuint64 *>(
    const ParamValue &value,
    const GLuint64 **valueOut)
{
    *valueOut = value.GLuint64ConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLuint64Pointer, GLuint64 *>(const ParamValue &value,
                                                                 GLuint64 **valueOut)
{
    *valueOut = value.GLuint64PointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLuintConstPointer, const GLuint *>(const ParamValue &value,
                                                                        const GLuint **valueOut)
{
    *valueOut = value.GLuintConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLuintPointer, GLuint *>(const ParamValue &value,
                                                             GLuint **valueOut)
{
    *valueOut = value.GLuintPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLushort, GLushort>(const ParamValue &value, GLushort *valueOut)
{
    *valueOut = value.GLushortVal;
}

template <>
inline void GetParamVal<ParamType::TGLushortConstPointer, const GLushort *>(
    const ParamValue &value,
    const GLushort **valueOut)
{
    *valueOut = value.GLushortConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLushortPointer, GLushort *>(const ParamValue &value,
                                                                 GLushort **valueOut)
{
    *valueOut = value.GLushortPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLvoidConstPointer, const GLvoid *>(const ParamValue &value,
                                                                        const GLvoid **valueOut)
{
    *valueOut = value.GLvoidConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGLvoidConstPointerPointer, const GLvoid *const *>(
    const ParamValue &value,
    const GLvoid *const **valueOut)
{
    *valueOut = value.GLvoidConstPointerPointerVal;
}

template <>
inline void GetParamVal<ParamType::TGraphicsResetStatus, gl::GraphicsResetStatus>(
    const ParamValue &value,
    gl::GraphicsResetStatus *valueOut)
{
    *valueOut = value.GraphicsResetStatusVal;
}

template <>
inline void GetParamVal<ParamType::THandleType, gl::HandleType>(const ParamValue &value,
                                                                gl::HandleType *valueOut)
{
    *valueOut = value.HandleTypeVal;
}

template <>
inline void GetParamVal<ParamType::TLightParameter, gl::LightParameter>(
    const ParamValue &value,
    gl::LightParameter *valueOut)
{
    *valueOut = value.LightParameterVal;
}

template <>
inline void GetParamVal<ParamType::TLogicalOperation, gl::LogicalOperation>(
    const ParamValue &value,
    gl::LogicalOperation *valueOut)
{
    *valueOut = value.LogicalOperationVal;
}

template <>
inline void GetParamVal<ParamType::TMaterialParameter, gl::MaterialParameter>(
    const ParamValue &value,
    gl::MaterialParameter *valueOut)
{
    *valueOut = value.MaterialParameterVal;
}

template <>
inline void GetParamVal<ParamType::TMatrixType, gl::MatrixType>(const ParamValue &value,
                                                                gl::MatrixType *valueOut)
{
    *valueOut = value.MatrixTypeVal;
}

template <>
inline void GetParamVal<ParamType::TPointParameter, gl::PointParameter>(
    const ParamValue &value,
    gl::PointParameter *valueOut)
{
    *valueOut = value.PointParameterVal;
}

template <>
inline void GetParamVal<ParamType::TPrimitiveMode, gl::PrimitiveMode>(const ParamValue &value,
                                                                      gl::PrimitiveMode *valueOut)
{
    *valueOut = value.PrimitiveModeVal;
}

template <>
inline void GetParamVal<ParamType::TProvokingVertexConvention, gl::ProvokingVertexConvention>(
    const ParamValue &value,
    gl::ProvokingVertexConvention *valueOut)
{
    *valueOut = value.ProvokingVertexConventionVal;
}

template <>
inline void GetParamVal<ParamType::TQueryType, gl::QueryType>(const ParamValue &value,
                                                              gl::QueryType *valueOut)
{
    *valueOut = value.QueryTypeVal;
}

template <>
inline void GetParamVal<ParamType::TRenderbufferID, gl::RenderbufferID>(
    const ParamValue &value,
    gl::RenderbufferID *valueOut)
{
    *valueOut = value.RenderbufferIDVal;
}

template <>
inline void GetParamVal<ParamType::TRenderbufferIDConstPointer, const gl::RenderbufferID *>(
    const ParamValue &value,
    const gl::RenderbufferID **valueOut)
{
    *valueOut = value.RenderbufferIDConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TRenderbufferIDPointer, gl::RenderbufferID *>(
    const ParamValue &value,
    gl::RenderbufferID **valueOut)
{
    *valueOut = value.RenderbufferIDPointerVal;
}

template <>
inline void GetParamVal<ParamType::TShaderType, gl::ShaderType>(const ParamValue &value,
                                                                gl::ShaderType *valueOut)
{
    *valueOut = value.ShaderTypeVal;
}

template <>
inline void GetParamVal<ParamType::TShadingModel, gl::ShadingModel>(const ParamValue &value,
                                                                    gl::ShadingModel *valueOut)
{
    *valueOut = value.ShadingModelVal;
}

template <>
inline void GetParamVal<ParamType::TTextureEnvParameter, gl::TextureEnvParameter>(
    const ParamValue &value,
    gl::TextureEnvParameter *valueOut)
{
    *valueOut = value.TextureEnvParameterVal;
}

template <>
inline void GetParamVal<ParamType::TTextureEnvTarget, gl::TextureEnvTarget>(
    const ParamValue &value,
    gl::TextureEnvTarget *valueOut)
{
    *valueOut = value.TextureEnvTargetVal;
}

template <>
inline void GetParamVal<ParamType::TTextureID, gl::TextureID>(const ParamValue &value,
                                                              gl::TextureID *valueOut)
{
    *valueOut = value.TextureIDVal;
}

template <>
inline void GetParamVal<ParamType::TTextureIDConstPointer, const gl::TextureID *>(
    const ParamValue &value,
    const gl::TextureID **valueOut)
{
    *valueOut = value.TextureIDConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TTextureIDPointer, gl::TextureID *>(const ParamValue &value,
                                                                       gl::TextureID **valueOut)
{
    *valueOut = value.TextureIDPointerVal;
}

template <>
inline void GetParamVal<ParamType::TTextureTarget, gl::TextureTarget>(const ParamValue &value,
                                                                      gl::TextureTarget *valueOut)
{
    *valueOut = value.TextureTargetVal;
}

template <>
inline void GetParamVal<ParamType::TTextureType, gl::TextureType>(const ParamValue &value,
                                                                  gl::TextureType *valueOut)
{
    *valueOut = value.TextureTypeVal;
}

template <>
inline void GetParamVal<ParamType::TVertexAttribType, gl::VertexAttribType>(
    const ParamValue &value,
    gl::VertexAttribType *valueOut)
{
    *valueOut = value.VertexAttribTypeVal;
}

template <>
inline void GetParamVal<ParamType::TvoidConstPointer, const void *>(const ParamValue &value,
                                                                    const void **valueOut)
{
    *valueOut = value.voidConstPointerVal;
}

template <>
inline void GetParamVal<ParamType::TvoidConstPointerPointer, const void *const *>(
    const ParamValue &value,
    const void *const **valueOut)
{
    *valueOut = value.voidConstPointerPointerVal;
}

template <>
inline void GetParamVal<ParamType::TvoidPointer, void *>(const ParamValue &value, void **valueOut)
{
    *valueOut = value.voidPointerVal;
}

template <>
inline void GetParamVal<ParamType::TvoidPointerPointer, void **>(const ParamValue &value,
                                                                 void ***valueOut)
{
    *valueOut = value.voidPointerPointerVal;
}

template <ParamType PType, typename T>
void GetParamVal(const ParamValue &value, T *valueOut)
{
    UNREACHABLE();
}

template <typename T>
void AccessParamValue(ParamType paramType, const ParamValue &value, T *valueOut)
{
    switch (paramType)
    {
        case ParamType::TAlphaTestFunc:
            GetParamVal<ParamType::TAlphaTestFunc>(value, valueOut);
            break;
        case ParamType::TBufferBinding:
            GetParamVal<ParamType::TBufferBinding>(value, valueOut);
            break;
        case ParamType::TBufferID:
            GetParamVal<ParamType::TBufferID>(value, valueOut);
            break;
        case ParamType::TBufferIDConstPointer:
            GetParamVal<ParamType::TBufferIDConstPointer>(value, valueOut);
            break;
        case ParamType::TBufferIDPointer:
            GetParamVal<ParamType::TBufferIDPointer>(value, valueOut);
            break;
        case ParamType::TBufferUsage:
            GetParamVal<ParamType::TBufferUsage>(value, valueOut);
            break;
        case ParamType::TClientVertexArrayType:
            GetParamVal<ParamType::TClientVertexArrayType>(value, valueOut);
            break;
        case ParamType::TCullFaceMode:
            GetParamVal<ParamType::TCullFaceMode>(value, valueOut);
            break;
        case ParamType::TDrawElementsType:
            GetParamVal<ParamType::TDrawElementsType>(value, valueOut);
            break;
        case ParamType::TGLDEBUGPROC:
            GetParamVal<ParamType::TGLDEBUGPROC>(value, valueOut);
            break;
        case ParamType::TGLDEBUGPROCKHR:
            GetParamVal<ParamType::TGLDEBUGPROCKHR>(value, valueOut);
            break;
        case ParamType::TGLbitfield:
            GetParamVal<ParamType::TGLbitfield>(value, valueOut);
            break;
        case ParamType::TGLboolean:
            GetParamVal<ParamType::TGLboolean>(value, valueOut);
            break;
        case ParamType::TGLbooleanConstPointer:
            GetParamVal<ParamType::TGLbooleanConstPointer>(value, valueOut);
            break;
        case ParamType::TGLbooleanPointer:
            GetParamVal<ParamType::TGLbooleanPointer>(value, valueOut);
            break;
        case ParamType::TGLbyte:
            GetParamVal<ParamType::TGLbyte>(value, valueOut);
            break;
        case ParamType::TGLbyteConstPointer:
            GetParamVal<ParamType::TGLbyteConstPointer>(value, valueOut);
            break;
        case ParamType::TGLcharConstPointer:
            GetParamVal<ParamType::TGLcharConstPointer>(value, valueOut);
            break;
        case ParamType::TGLcharConstPointerPointer:
            GetParamVal<ParamType::TGLcharConstPointerPointer>(value, valueOut);
            break;
        case ParamType::TGLcharPointer:
            GetParamVal<ParamType::TGLcharPointer>(value, valueOut);
            break;
        case ParamType::TGLclampx:
            GetParamVal<ParamType::TGLclampx>(value, valueOut);
            break;
        case ParamType::TGLdouble:
            GetParamVal<ParamType::TGLdouble>(value, valueOut);
            break;
        case ParamType::TGLdoubleConstPointer:
            GetParamVal<ParamType::TGLdoubleConstPointer>(value, valueOut);
            break;
        case ParamType::TGLdoublePointer:
            GetParamVal<ParamType::TGLdoublePointer>(value, valueOut);
            break;
        case ParamType::TGLeglImageOES:
            GetParamVal<ParamType::TGLeglImageOES>(value, valueOut);
            break;
        case ParamType::TGLenum:
            GetParamVal<ParamType::TGLenum>(value, valueOut);
            break;
        case ParamType::TGLenumConstPointer:
            GetParamVal<ParamType::TGLenumConstPointer>(value, valueOut);
            break;
        case ParamType::TGLenumPointer:
            GetParamVal<ParamType::TGLenumPointer>(value, valueOut);
            break;
        case ParamType::TGLfixed:
            GetParamVal<ParamType::TGLfixed>(value, valueOut);
            break;
        case ParamType::TGLfixedConstPointer:
            GetParamVal<ParamType::TGLfixedConstPointer>(value, valueOut);
            break;
        case ParamType::TGLfixedPointer:
            GetParamVal<ParamType::TGLfixedPointer>(value, valueOut);
            break;
        case ParamType::TGLfloat:
            GetParamVal<ParamType::TGLfloat>(value, valueOut);
            break;
        case ParamType::TGLfloatConstPointer:
            GetParamVal<ParamType::TGLfloatConstPointer>(value, valueOut);
            break;
        case ParamType::TGLfloatPointer:
            GetParamVal<ParamType::TGLfloatPointer>(value, valueOut);
            break;
        case ParamType::TGLint:
            GetParamVal<ParamType::TGLint>(value, valueOut);
            break;
        case ParamType::TGLint64Pointer:
            GetParamVal<ParamType::TGLint64Pointer>(value, valueOut);
            break;
        case ParamType::TGLintConstPointer:
            GetParamVal<ParamType::TGLintConstPointer>(value, valueOut);
            break;
        case ParamType::TGLintPointer:
            GetParamVal<ParamType::TGLintPointer>(value, valueOut);
            break;
        case ParamType::TGLintptr:
            GetParamVal<ParamType::TGLintptr>(value, valueOut);
            break;
        case ParamType::TGLintptrConstPointer:
            GetParamVal<ParamType::TGLintptrConstPointer>(value, valueOut);
            break;
        case ParamType::TGLshort:
            GetParamVal<ParamType::TGLshort>(value, valueOut);
            break;
        case ParamType::TGLshortConstPointer:
            GetParamVal<ParamType::TGLshortConstPointer>(value, valueOut);
            break;
        case ParamType::TGLsizei:
            GetParamVal<ParamType::TGLsizei>(value, valueOut);
            break;
        case ParamType::TGLsizeiConstPointer:
            GetParamVal<ParamType::TGLsizeiConstPointer>(value, valueOut);
            break;
        case ParamType::TGLsizeiPointer:
            GetParamVal<ParamType::TGLsizeiPointer>(value, valueOut);
            break;
        case ParamType::TGLsizeiptr:
            GetParamVal<ParamType::TGLsizeiptr>(value, valueOut);
            break;
        case ParamType::TGLsizeiptrConstPointer:
            GetParamVal<ParamType::TGLsizeiptrConstPointer>(value, valueOut);
            break;
        case ParamType::TGLsync:
            GetParamVal<ParamType::TGLsync>(value, valueOut);
            break;
        case ParamType::TGLubyte:
            GetParamVal<ParamType::TGLubyte>(value, valueOut);
            break;
        case ParamType::TGLubyteConstPointer:
            GetParamVal<ParamType::TGLubyteConstPointer>(value, valueOut);
            break;
        case ParamType::TGLubytePointer:
            GetParamVal<ParamType::TGLubytePointer>(value, valueOut);
            break;
        case ParamType::TGLuint:
            GetParamVal<ParamType::TGLuint>(value, valueOut);
            break;
        case ParamType::TGLuint64:
            GetParamVal<ParamType::TGLuint64>(value, valueOut);
            break;
        case ParamType::TGLuint64ConstPointer:
            GetParamVal<ParamType::TGLuint64ConstPointer>(value, valueOut);
            break;
        case ParamType::TGLuint64Pointer:
            GetParamVal<ParamType::TGLuint64Pointer>(value, valueOut);
            break;
        case ParamType::TGLuintConstPointer:
            GetParamVal<ParamType::TGLuintConstPointer>(value, valueOut);
            break;
        case ParamType::TGLuintPointer:
            GetParamVal<ParamType::TGLuintPointer>(value, valueOut);
            break;
        case ParamType::TGLushort:
            GetParamVal<ParamType::TGLushort>(value, valueOut);
            break;
        case ParamType::TGLushortConstPointer:
            GetParamVal<ParamType::TGLushortConstPointer>(value, valueOut);
            break;
        case ParamType::TGLushortPointer:
            GetParamVal<ParamType::TGLushortPointer>(value, valueOut);
            break;
        case ParamType::TGLvoidConstPointer:
            GetParamVal<ParamType::TGLvoidConstPointer>(value, valueOut);
            break;
        case ParamType::TGLvoidConstPointerPointer:
            GetParamVal<ParamType::TGLvoidConstPointerPointer>(value, valueOut);
            break;
        case ParamType::TGraphicsResetStatus:
            GetParamVal<ParamType::TGraphicsResetStatus>(value, valueOut);
            break;
        case ParamType::THandleType:
            GetParamVal<ParamType::THandleType>(value, valueOut);
            break;
        case ParamType::TLightParameter:
            GetParamVal<ParamType::TLightParameter>(value, valueOut);
            break;
        case ParamType::TLogicalOperation:
            GetParamVal<ParamType::TLogicalOperation>(value, valueOut);
            break;
        case ParamType::TMaterialParameter:
            GetParamVal<ParamType::TMaterialParameter>(value, valueOut);
            break;
        case ParamType::TMatrixType:
            GetParamVal<ParamType::TMatrixType>(value, valueOut);
            break;
        case ParamType::TPointParameter:
            GetParamVal<ParamType::TPointParameter>(value, valueOut);
            break;
        case ParamType::TPrimitiveMode:
            GetParamVal<ParamType::TPrimitiveMode>(value, valueOut);
            break;
        case ParamType::TProvokingVertexConvention:
            GetParamVal<ParamType::TProvokingVertexConvention>(value, valueOut);
            break;
        case ParamType::TQueryType:
            GetParamVal<ParamType::TQueryType>(value, valueOut);
            break;
        case ParamType::TRenderbufferID:
            GetParamVal<ParamType::TRenderbufferID>(value, valueOut);
            break;
        case ParamType::TRenderbufferIDConstPointer:
            GetParamVal<ParamType::TRenderbufferIDConstPointer>(value, valueOut);
            break;
        case ParamType::TRenderbufferIDPointer:
            GetParamVal<ParamType::TRenderbufferIDPointer>(value, valueOut);
            break;
        case ParamType::TShaderType:
            GetParamVal<ParamType::TShaderType>(value, valueOut);
            break;
        case ParamType::TShadingModel:
            GetParamVal<ParamType::TShadingModel>(value, valueOut);
            break;
        case ParamType::TTextureEnvParameter:
            GetParamVal<ParamType::TTextureEnvParameter>(value, valueOut);
            break;
        case ParamType::TTextureEnvTarget:
            GetParamVal<ParamType::TTextureEnvTarget>(value, valueOut);
            break;
        case ParamType::TTextureID:
            GetParamVal<ParamType::TTextureID>(value, valueOut);
            break;
        case ParamType::TTextureIDConstPointer:
            GetParamVal<ParamType::TTextureIDConstPointer>(value, valueOut);
            break;
        case ParamType::TTextureIDPointer:
            GetParamVal<ParamType::TTextureIDPointer>(value, valueOut);
            break;
        case ParamType::TTextureTarget:
            GetParamVal<ParamType::TTextureTarget>(value, valueOut);
            break;
        case ParamType::TTextureType:
            GetParamVal<ParamType::TTextureType>(value, valueOut);
            break;
        case ParamType::TVertexAttribType:
            GetParamVal<ParamType::TVertexAttribType>(value, valueOut);
            break;
        case ParamType::TvoidConstPointer:
            GetParamVal<ParamType::TvoidConstPointer>(value, valueOut);
            break;
        case ParamType::TvoidConstPointerPointer:
            GetParamVal<ParamType::TvoidConstPointerPointer>(value, valueOut);
            break;
        case ParamType::TvoidPointer:
            GetParamVal<ParamType::TvoidPointer>(value, valueOut);
            break;
        case ParamType::TvoidPointerPointer:
            GetParamVal<ParamType::TvoidPointerPointer>(value, valueOut);
            break;
    }
}

template <ParamType PType, typename T>
void SetParamVal(T valueIn, ParamValue *valueOut);

template <>
inline void SetParamVal<ParamType::TAlphaTestFunc>(gl::AlphaTestFunc valueIn, ParamValue *valueOut)
{
    valueOut->AlphaTestFuncVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TBufferBinding>(gl::BufferBinding valueIn, ParamValue *valueOut)
{
    valueOut->BufferBindingVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TBufferID>(gl::BufferID valueIn, ParamValue *valueOut)
{
    valueOut->BufferIDVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TBufferIDConstPointer>(const gl::BufferID *valueIn,
                                                          ParamValue *valueOut)
{
    valueOut->BufferIDConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TBufferIDPointer>(gl::BufferID *valueIn, ParamValue *valueOut)
{
    valueOut->BufferIDPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TBufferUsage>(gl::BufferUsage valueIn, ParamValue *valueOut)
{
    valueOut->BufferUsageVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TClientVertexArrayType>(gl::ClientVertexArrayType valueIn,
                                                           ParamValue *valueOut)
{
    valueOut->ClientVertexArrayTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TCullFaceMode>(gl::CullFaceMode valueIn, ParamValue *valueOut)
{
    valueOut->CullFaceModeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TDrawElementsType>(gl::DrawElementsType valueIn,
                                                      ParamValue *valueOut)
{
    valueOut->DrawElementsTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLDEBUGPROC>(GLDEBUGPROC valueIn, ParamValue *valueOut)
{
    valueOut->GLDEBUGPROCVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLDEBUGPROCKHR>(GLDEBUGPROCKHR valueIn, ParamValue *valueOut)
{
    valueOut->GLDEBUGPROCKHRVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLbitfield>(GLbitfield valueIn, ParamValue *valueOut)
{
    valueOut->GLbitfieldVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLboolean>(GLboolean valueIn, ParamValue *valueOut)
{
    valueOut->GLbooleanVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLbooleanConstPointer>(const GLboolean *valueIn,
                                                           ParamValue *valueOut)
{
    valueOut->GLbooleanConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLbooleanPointer>(GLboolean *valueIn, ParamValue *valueOut)
{
    valueOut->GLbooleanPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLbyte>(GLbyte valueIn, ParamValue *valueOut)
{
    valueOut->GLbyteVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLbyteConstPointer>(const GLbyte *valueIn, ParamValue *valueOut)
{
    valueOut->GLbyteConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLcharConstPointer>(const GLchar *valueIn, ParamValue *valueOut)
{
    valueOut->GLcharConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLcharConstPointerPointer>(const GLchar *const *valueIn,
                                                               ParamValue *valueOut)
{
    valueOut->GLcharConstPointerPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLcharPointer>(GLchar *valueIn, ParamValue *valueOut)
{
    valueOut->GLcharPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLclampx>(GLclampx valueIn, ParamValue *valueOut)
{
    valueOut->GLclampxVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLdouble>(GLdouble valueIn, ParamValue *valueOut)
{
    valueOut->GLdoubleVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLdoubleConstPointer>(const GLdouble *valueIn,
                                                          ParamValue *valueOut)
{
    valueOut->GLdoubleConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLdoublePointer>(GLdouble *valueIn, ParamValue *valueOut)
{
    valueOut->GLdoublePointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLeglImageOES>(GLeglImageOES valueIn, ParamValue *valueOut)
{
    valueOut->GLeglImageOESVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLenum>(GLenum valueIn, ParamValue *valueOut)
{
    valueOut->GLenumVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLenumConstPointer>(const GLenum *valueIn, ParamValue *valueOut)
{
    valueOut->GLenumConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLenumPointer>(GLenum *valueIn, ParamValue *valueOut)
{
    valueOut->GLenumPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfixed>(GLfixed valueIn, ParamValue *valueOut)
{
    valueOut->GLfixedVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfixedConstPointer>(const GLfixed *valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GLfixedConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfixedPointer>(GLfixed *valueIn, ParamValue *valueOut)
{
    valueOut->GLfixedPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfloat>(GLfloat valueIn, ParamValue *valueOut)
{
    valueOut->GLfloatVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfloatConstPointer>(const GLfloat *valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GLfloatConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLfloatPointer>(GLfloat *valueIn, ParamValue *valueOut)
{
    valueOut->GLfloatPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLint>(GLint valueIn, ParamValue *valueOut)
{
    valueOut->GLintVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLint64Pointer>(GLint64 *valueIn, ParamValue *valueOut)
{
    valueOut->GLint64PointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLintConstPointer>(const GLint *valueIn, ParamValue *valueOut)
{
    valueOut->GLintConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLintPointer>(GLint *valueIn, ParamValue *valueOut)
{
    valueOut->GLintPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLintptr>(GLintptr valueIn, ParamValue *valueOut)
{
    valueOut->GLintptrVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLintptrConstPointer>(const GLintptr *valueIn,
                                                          ParamValue *valueOut)
{
    valueOut->GLintptrConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLshort>(GLshort valueIn, ParamValue *valueOut)
{
    valueOut->GLshortVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLshortConstPointer>(const GLshort *valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GLshortConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsizei>(GLsizei valueIn, ParamValue *valueOut)
{
    valueOut->GLsizeiVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsizeiConstPointer>(const GLsizei *valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GLsizeiConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsizeiPointer>(GLsizei *valueIn, ParamValue *valueOut)
{
    valueOut->GLsizeiPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsizeiptr>(GLsizeiptr valueIn, ParamValue *valueOut)
{
    valueOut->GLsizeiptrVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsizeiptrConstPointer>(const GLsizeiptr *valueIn,
                                                            ParamValue *valueOut)
{
    valueOut->GLsizeiptrConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLsync>(GLsync valueIn, ParamValue *valueOut)
{
    valueOut->GLsyncVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLubyte>(GLubyte valueIn, ParamValue *valueOut)
{
    valueOut->GLubyteVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLubyteConstPointer>(const GLubyte *valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GLubyteConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLubytePointer>(GLubyte *valueIn, ParamValue *valueOut)
{
    valueOut->GLubytePointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuint>(GLuint valueIn, ParamValue *valueOut)
{
    valueOut->GLuintVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuint64>(GLuint64 valueIn, ParamValue *valueOut)
{
    valueOut->GLuint64Val = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuint64ConstPointer>(const GLuint64 *valueIn,
                                                          ParamValue *valueOut)
{
    valueOut->GLuint64ConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuint64Pointer>(GLuint64 *valueIn, ParamValue *valueOut)
{
    valueOut->GLuint64PointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuintConstPointer>(const GLuint *valueIn, ParamValue *valueOut)
{
    valueOut->GLuintConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLuintPointer>(GLuint *valueIn, ParamValue *valueOut)
{
    valueOut->GLuintPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLushort>(GLushort valueIn, ParamValue *valueOut)
{
    valueOut->GLushortVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLushortConstPointer>(const GLushort *valueIn,
                                                          ParamValue *valueOut)
{
    valueOut->GLushortConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLushortPointer>(GLushort *valueIn, ParamValue *valueOut)
{
    valueOut->GLushortPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLvoidConstPointer>(const GLvoid *valueIn, ParamValue *valueOut)
{
    valueOut->GLvoidConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGLvoidConstPointerPointer>(const GLvoid *const *valueIn,
                                                               ParamValue *valueOut)
{
    valueOut->GLvoidConstPointerPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TGraphicsResetStatus>(gl::GraphicsResetStatus valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->GraphicsResetStatusVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::THandleType>(gl::HandleType valueIn, ParamValue *valueOut)
{
    valueOut->HandleTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TLightParameter>(gl::LightParameter valueIn,
                                                    ParamValue *valueOut)
{
    valueOut->LightParameterVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TLogicalOperation>(gl::LogicalOperation valueIn,
                                                      ParamValue *valueOut)
{
    valueOut->LogicalOperationVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TMaterialParameter>(gl::MaterialParameter valueIn,
                                                       ParamValue *valueOut)
{
    valueOut->MaterialParameterVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TMatrixType>(gl::MatrixType valueIn, ParamValue *valueOut)
{
    valueOut->MatrixTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TPointParameter>(gl::PointParameter valueIn,
                                                    ParamValue *valueOut)
{
    valueOut->PointParameterVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TPrimitiveMode>(gl::PrimitiveMode valueIn, ParamValue *valueOut)
{
    valueOut->PrimitiveModeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TProvokingVertexConvention>(
    gl::ProvokingVertexConvention valueIn,
    ParamValue *valueOut)
{
    valueOut->ProvokingVertexConventionVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TQueryType>(gl::QueryType valueIn, ParamValue *valueOut)
{
    valueOut->QueryTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TRenderbufferID>(gl::RenderbufferID valueIn,
                                                    ParamValue *valueOut)
{
    valueOut->RenderbufferIDVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TRenderbufferIDConstPointer>(const gl::RenderbufferID *valueIn,
                                                                ParamValue *valueOut)
{
    valueOut->RenderbufferIDConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TRenderbufferIDPointer>(gl::RenderbufferID *valueIn,
                                                           ParamValue *valueOut)
{
    valueOut->RenderbufferIDPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TShaderType>(gl::ShaderType valueIn, ParamValue *valueOut)
{
    valueOut->ShaderTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TShadingModel>(gl::ShadingModel valueIn, ParamValue *valueOut)
{
    valueOut->ShadingModelVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureEnvParameter>(gl::TextureEnvParameter valueIn,
                                                         ParamValue *valueOut)
{
    valueOut->TextureEnvParameterVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureEnvTarget>(gl::TextureEnvTarget valueIn,
                                                      ParamValue *valueOut)
{
    valueOut->TextureEnvTargetVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureID>(gl::TextureID valueIn, ParamValue *valueOut)
{
    valueOut->TextureIDVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureIDConstPointer>(const gl::TextureID *valueIn,
                                                           ParamValue *valueOut)
{
    valueOut->TextureIDConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureIDPointer>(gl::TextureID *valueIn, ParamValue *valueOut)
{
    valueOut->TextureIDPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureTarget>(gl::TextureTarget valueIn, ParamValue *valueOut)
{
    valueOut->TextureTargetVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TTextureType>(gl::TextureType valueIn, ParamValue *valueOut)
{
    valueOut->TextureTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TVertexAttribType>(gl::VertexAttribType valueIn,
                                                      ParamValue *valueOut)
{
    valueOut->VertexAttribTypeVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TvoidConstPointer>(const void *valueIn, ParamValue *valueOut)
{
    valueOut->voidConstPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TvoidConstPointerPointer>(const void *const *valueIn,
                                                             ParamValue *valueOut)
{
    valueOut->voidConstPointerPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TvoidPointer>(void *valueIn, ParamValue *valueOut)
{
    valueOut->voidPointerVal = valueIn;
}

template <>
inline void SetParamVal<ParamType::TvoidPointerPointer>(void **valueIn, ParamValue *valueOut)
{
    valueOut->voidPointerPointerVal = valueIn;
}

template <ParamType PType, typename T>
void SetParamVal(T valueIn, ParamValue *valueOut)
{
    UNREACHABLE();
}

template <typename T>
void InitParamValue(ParamType paramType, T valueIn, ParamValue *valueOut)
{
    switch (paramType)
    {
        case ParamType::TAlphaTestFunc:
            SetParamVal<ParamType::TAlphaTestFunc>(valueIn, valueOut);
            break;
        case ParamType::TBufferBinding:
            SetParamVal<ParamType::TBufferBinding>(valueIn, valueOut);
            break;
        case ParamType::TBufferID:
            SetParamVal<ParamType::TBufferID>(valueIn, valueOut);
            break;
        case ParamType::TBufferIDConstPointer:
            SetParamVal<ParamType::TBufferIDConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TBufferIDPointer:
            SetParamVal<ParamType::TBufferIDPointer>(valueIn, valueOut);
            break;
        case ParamType::TBufferUsage:
            SetParamVal<ParamType::TBufferUsage>(valueIn, valueOut);
            break;
        case ParamType::TClientVertexArrayType:
            SetParamVal<ParamType::TClientVertexArrayType>(valueIn, valueOut);
            break;
        case ParamType::TCullFaceMode:
            SetParamVal<ParamType::TCullFaceMode>(valueIn, valueOut);
            break;
        case ParamType::TDrawElementsType:
            SetParamVal<ParamType::TDrawElementsType>(valueIn, valueOut);
            break;
        case ParamType::TGLDEBUGPROC:
            SetParamVal<ParamType::TGLDEBUGPROC>(valueIn, valueOut);
            break;
        case ParamType::TGLDEBUGPROCKHR:
            SetParamVal<ParamType::TGLDEBUGPROCKHR>(valueIn, valueOut);
            break;
        case ParamType::TGLbitfield:
            SetParamVal<ParamType::TGLbitfield>(valueIn, valueOut);
            break;
        case ParamType::TGLboolean:
            SetParamVal<ParamType::TGLboolean>(valueIn, valueOut);
            break;
        case ParamType::TGLbooleanConstPointer:
            SetParamVal<ParamType::TGLbooleanConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLbooleanPointer:
            SetParamVal<ParamType::TGLbooleanPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLbyte:
            SetParamVal<ParamType::TGLbyte>(valueIn, valueOut);
            break;
        case ParamType::TGLbyteConstPointer:
            SetParamVal<ParamType::TGLbyteConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLcharConstPointer:
            SetParamVal<ParamType::TGLcharConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLcharConstPointerPointer:
            SetParamVal<ParamType::TGLcharConstPointerPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLcharPointer:
            SetParamVal<ParamType::TGLcharPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLclampx:
            SetParamVal<ParamType::TGLclampx>(valueIn, valueOut);
            break;
        case ParamType::TGLdouble:
            SetParamVal<ParamType::TGLdouble>(valueIn, valueOut);
            break;
        case ParamType::TGLdoubleConstPointer:
            SetParamVal<ParamType::TGLdoubleConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLdoublePointer:
            SetParamVal<ParamType::TGLdoublePointer>(valueIn, valueOut);
            break;
        case ParamType::TGLeglImageOES:
            SetParamVal<ParamType::TGLeglImageOES>(valueIn, valueOut);
            break;
        case ParamType::TGLenum:
            SetParamVal<ParamType::TGLenum>(valueIn, valueOut);
            break;
        case ParamType::TGLenumConstPointer:
            SetParamVal<ParamType::TGLenumConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLenumPointer:
            SetParamVal<ParamType::TGLenumPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLfixed:
            SetParamVal<ParamType::TGLfixed>(valueIn, valueOut);
            break;
        case ParamType::TGLfixedConstPointer:
            SetParamVal<ParamType::TGLfixedConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLfixedPointer:
            SetParamVal<ParamType::TGLfixedPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLfloat:
            SetParamVal<ParamType::TGLfloat>(valueIn, valueOut);
            break;
        case ParamType::TGLfloatConstPointer:
            SetParamVal<ParamType::TGLfloatConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLfloatPointer:
            SetParamVal<ParamType::TGLfloatPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLint:
            SetParamVal<ParamType::TGLint>(valueIn, valueOut);
            break;
        case ParamType::TGLint64Pointer:
            SetParamVal<ParamType::TGLint64Pointer>(valueIn, valueOut);
            break;
        case ParamType::TGLintConstPointer:
            SetParamVal<ParamType::TGLintConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLintPointer:
            SetParamVal<ParamType::TGLintPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLintptr:
            SetParamVal<ParamType::TGLintptr>(valueIn, valueOut);
            break;
        case ParamType::TGLintptrConstPointer:
            SetParamVal<ParamType::TGLintptrConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLshort:
            SetParamVal<ParamType::TGLshort>(valueIn, valueOut);
            break;
        case ParamType::TGLshortConstPointer:
            SetParamVal<ParamType::TGLshortConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLsizei:
            SetParamVal<ParamType::TGLsizei>(valueIn, valueOut);
            break;
        case ParamType::TGLsizeiConstPointer:
            SetParamVal<ParamType::TGLsizeiConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLsizeiPointer:
            SetParamVal<ParamType::TGLsizeiPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLsizeiptr:
            SetParamVal<ParamType::TGLsizeiptr>(valueIn, valueOut);
            break;
        case ParamType::TGLsizeiptrConstPointer:
            SetParamVal<ParamType::TGLsizeiptrConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLsync:
            SetParamVal<ParamType::TGLsync>(valueIn, valueOut);
            break;
        case ParamType::TGLubyte:
            SetParamVal<ParamType::TGLubyte>(valueIn, valueOut);
            break;
        case ParamType::TGLubyteConstPointer:
            SetParamVal<ParamType::TGLubyteConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLubytePointer:
            SetParamVal<ParamType::TGLubytePointer>(valueIn, valueOut);
            break;
        case ParamType::TGLuint:
            SetParamVal<ParamType::TGLuint>(valueIn, valueOut);
            break;
        case ParamType::TGLuint64:
            SetParamVal<ParamType::TGLuint64>(valueIn, valueOut);
            break;
        case ParamType::TGLuint64ConstPointer:
            SetParamVal<ParamType::TGLuint64ConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLuint64Pointer:
            SetParamVal<ParamType::TGLuint64Pointer>(valueIn, valueOut);
            break;
        case ParamType::TGLuintConstPointer:
            SetParamVal<ParamType::TGLuintConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLuintPointer:
            SetParamVal<ParamType::TGLuintPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLushort:
            SetParamVal<ParamType::TGLushort>(valueIn, valueOut);
            break;
        case ParamType::TGLushortConstPointer:
            SetParamVal<ParamType::TGLushortConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLushortPointer:
            SetParamVal<ParamType::TGLushortPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLvoidConstPointer:
            SetParamVal<ParamType::TGLvoidConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TGLvoidConstPointerPointer:
            SetParamVal<ParamType::TGLvoidConstPointerPointer>(valueIn, valueOut);
            break;
        case ParamType::TGraphicsResetStatus:
            SetParamVal<ParamType::TGraphicsResetStatus>(valueIn, valueOut);
            break;
        case ParamType::THandleType:
            SetParamVal<ParamType::THandleType>(valueIn, valueOut);
            break;
        case ParamType::TLightParameter:
            SetParamVal<ParamType::TLightParameter>(valueIn, valueOut);
            break;
        case ParamType::TLogicalOperation:
            SetParamVal<ParamType::TLogicalOperation>(valueIn, valueOut);
            break;
        case ParamType::TMaterialParameter:
            SetParamVal<ParamType::TMaterialParameter>(valueIn, valueOut);
            break;
        case ParamType::TMatrixType:
            SetParamVal<ParamType::TMatrixType>(valueIn, valueOut);
            break;
        case ParamType::TPointParameter:
            SetParamVal<ParamType::TPointParameter>(valueIn, valueOut);
            break;
        case ParamType::TPrimitiveMode:
            SetParamVal<ParamType::TPrimitiveMode>(valueIn, valueOut);
            break;
        case ParamType::TProvokingVertexConvention:
            SetParamVal<ParamType::TProvokingVertexConvention>(valueIn, valueOut);
            break;
        case ParamType::TQueryType:
            SetParamVal<ParamType::TQueryType>(valueIn, valueOut);
            break;
        case ParamType::TRenderbufferID:
            SetParamVal<ParamType::TRenderbufferID>(valueIn, valueOut);
            break;
        case ParamType::TRenderbufferIDConstPointer:
            SetParamVal<ParamType::TRenderbufferIDConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TRenderbufferIDPointer:
            SetParamVal<ParamType::TRenderbufferIDPointer>(valueIn, valueOut);
            break;
        case ParamType::TShaderType:
            SetParamVal<ParamType::TShaderType>(valueIn, valueOut);
            break;
        case ParamType::TShadingModel:
            SetParamVal<ParamType::TShadingModel>(valueIn, valueOut);
            break;
        case ParamType::TTextureEnvParameter:
            SetParamVal<ParamType::TTextureEnvParameter>(valueIn, valueOut);
            break;
        case ParamType::TTextureEnvTarget:
            SetParamVal<ParamType::TTextureEnvTarget>(valueIn, valueOut);
            break;
        case ParamType::TTextureID:
            SetParamVal<ParamType::TTextureID>(valueIn, valueOut);
            break;
        case ParamType::TTextureIDConstPointer:
            SetParamVal<ParamType::TTextureIDConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TTextureIDPointer:
            SetParamVal<ParamType::TTextureIDPointer>(valueIn, valueOut);
            break;
        case ParamType::TTextureTarget:
            SetParamVal<ParamType::TTextureTarget>(valueIn, valueOut);
            break;
        case ParamType::TTextureType:
            SetParamVal<ParamType::TTextureType>(valueIn, valueOut);
            break;
        case ParamType::TVertexAttribType:
            SetParamVal<ParamType::TVertexAttribType>(valueIn, valueOut);
            break;
        case ParamType::TvoidConstPointer:
            SetParamVal<ParamType::TvoidConstPointer>(valueIn, valueOut);
            break;
        case ParamType::TvoidConstPointerPointer:
            SetParamVal<ParamType::TvoidConstPointerPointer>(valueIn, valueOut);
            break;
        case ParamType::TvoidPointer:
            SetParamVal<ParamType::TvoidPointer>(valueIn, valueOut);
            break;
        case ParamType::TvoidPointerPointer:
            SetParamVal<ParamType::TvoidPointerPointer>(valueIn, valueOut);
            break;
    }
}

void WriteParamTypeToStream(std::ostream &os, ParamType paramType, const ParamValue &paramValue);
const char *ParamTypeToString(ParamType paramType);
}  // namespace angle

#endif  // LIBANGLE_FRAME_CAPTURE_UTILS_AUTOGEN_H_
