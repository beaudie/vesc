// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and wgl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationGL33_autogen.h:
//   Validation functions for the OpenGL 3.3 entry points.

#ifndef LIBANGLE_VALIDATION_GL33_AUTOGEN_H_
#define LIBANGLE_VALIDATION_GL33_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateBindFragDataLocationIndexed(const Context *context,
                                         const ShaderProgramID programPacked,
                                         const GLuint colorNumber,
                                         const GLuint index,
                                         const GLchar *name);
bool ValidateColorP3ui(const Context *context, const GLenum type, const GLuint color);
bool ValidateColorP3uiv(const Context *context, const GLenum type, const GLuint *color);
bool ValidateColorP4ui(const Context *context, const GLenum type, const GLuint color);
bool ValidateColorP4uiv(const Context *context, const GLenum type, const GLuint *color);
bool ValidateGetFragDataIndex(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLchar *name);
bool ValidateGetQueryObjecti64v(const Context *context,
                                const QueryID idPacked,
                                const GLenum pname,
                                const GLint64 *params);
bool ValidateGetQueryObjectui64v(const Context *context,
                                 const QueryID idPacked,
                                 const GLenum pname,
                                 const GLuint64 *params);
bool ValidateMultiTexCoordP1ui(const Context *context,
                               const GLenum texture,
                               const GLenum type,
                               const GLuint coords);
bool ValidateMultiTexCoordP1uiv(const Context *context,
                                const GLenum texture,
                                const GLenum type,
                                const GLuint *coords);
bool ValidateMultiTexCoordP2ui(const Context *context,
                               const GLenum texture,
                               const GLenum type,
                               const GLuint coords);
bool ValidateMultiTexCoordP2uiv(const Context *context,
                                const GLenum texture,
                                const GLenum type,
                                const GLuint *coords);
bool ValidateMultiTexCoordP3ui(const Context *context,
                               const GLenum texture,
                               const GLenum type,
                               const GLuint coords);
bool ValidateMultiTexCoordP3uiv(const Context *context,
                                const GLenum texture,
                                const GLenum type,
                                const GLuint *coords);
bool ValidateMultiTexCoordP4ui(const Context *context,
                               const GLenum texture,
                               const GLenum type,
                               const GLuint coords);
bool ValidateMultiTexCoordP4uiv(const Context *context,
                                const GLenum texture,
                                const GLenum type,
                                const GLuint *coords);
bool ValidateNormalP3ui(const Context *context, const GLenum type, const GLuint coords);
bool ValidateNormalP3uiv(const Context *context, const GLenum type, const GLuint *coords);
bool ValidateQueryCounter(const Context *context,
                          const QueryID idPacked,
                          const QueryType targetPacked);
bool ValidateSecondaryColorP3ui(const Context *context, const GLenum type, const GLuint color);
bool ValidateSecondaryColorP3uiv(const Context *context, const GLenum type, const GLuint *color);
bool ValidateTexCoordP1ui(const Context *context, const GLenum type, const GLuint coords);
bool ValidateTexCoordP1uiv(const Context *context, const GLenum type, const GLuint *coords);
bool ValidateTexCoordP2ui(const Context *context, const GLenum type, const GLuint coords);
bool ValidateTexCoordP2uiv(const Context *context, const GLenum type, const GLuint *coords);
bool ValidateTexCoordP3ui(const Context *context, const GLenum type, const GLuint coords);
bool ValidateTexCoordP3uiv(const Context *context, const GLenum type, const GLuint *coords);
bool ValidateTexCoordP4ui(const Context *context, const GLenum type, const GLuint coords);
bool ValidateTexCoordP4uiv(const Context *context, const GLenum type, const GLuint *coords);
bool ValidateVertexAttribP1ui(const Context *context,
                              const GLuint index,
                              const GLenum type,
                              const GLboolean normalized,
                              const GLuint value);
bool ValidateVertexAttribP1uiv(const Context *context,
                               const GLuint index,
                               const GLenum type,
                               const GLboolean normalized,
                               const GLuint *value);
bool ValidateVertexAttribP2ui(const Context *context,
                              const GLuint index,
                              const GLenum type,
                              const GLboolean normalized,
                              const GLuint value);
bool ValidateVertexAttribP2uiv(const Context *context,
                               const GLuint index,
                               const GLenum type,
                               const GLboolean normalized,
                               const GLuint *value);
bool ValidateVertexAttribP3ui(const Context *context,
                              const GLuint index,
                              const GLenum type,
                              const GLboolean normalized,
                              const GLuint value);
bool ValidateVertexAttribP3uiv(const Context *context,
                               const GLuint index,
                               const GLenum type,
                               const GLboolean normalized,
                               const GLuint *value);
bool ValidateVertexAttribP4ui(const Context *context,
                              const GLuint index,
                              const GLenum type,
                              const GLboolean normalized,
                              const GLuint value);
bool ValidateVertexAttribP4uiv(const Context *context,
                               const GLuint index,
                               const GLenum type,
                               const GLboolean normalized,
                               const GLuint *value);
bool ValidateVertexP2ui(const Context *context, const GLenum type, const GLuint value);
bool ValidateVertexP2uiv(const Context *context, const GLenum type, const GLuint *value);
bool ValidateVertexP3ui(const Context *context, const GLenum type, const GLuint value);
bool ValidateVertexP3uiv(const Context *context, const GLenum type, const GLuint *value);
bool ValidateVertexP4ui(const Context *context, const GLenum type, const GLuint value);
bool ValidateVertexP4uiv(const Context *context, const GLenum type, const GLuint *value);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_GL33_AUTOGEN_H_
