// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationESEXT_autogen.h:
//   Validation functions for the OpenGL ES extension entry points.

#ifndef LIBANGLE_VALIDATION_ESEXT_AUTOGEN_H_
#define LIBANGLE_VALIDATION_ESEXT_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

// GL_ANGLE_base_vertex_base_instance
bool ValidateDrawArraysInstancedBaseInstanceANGLE(const Context *context,
                                                  const PrimitiveMode modePacked,
                                                  const GLint first,
                                                  const GLsizei count,
                                                  const GLsizei instanceCount,
                                                  const GLuint baseInstance);
bool ValidateDrawElementsInstancedBaseVertexBaseInstanceANGLE(const Context *context,
                                                              const PrimitiveMode modePacked,
                                                              const GLsizei count,
                                                              const DrawElementsType typePacked,
                                                              const GLvoid *indices,
                                                              const GLsizei instanceCounts,
                                                              const GLint baseVertex,
                                                              const GLuint baseInstance);
bool ValidateMultiDrawArraysInstancedBaseInstanceANGLE(const Context *context,
                                                       const PrimitiveMode modePacked,
                                                       const GLint *firsts,
                                                       const GLsizei *counts,
                                                       const GLsizei *instanceCounts,
                                                       const GLuint *baseInstances,
                                                       const GLsizei drawcount);
bool ValidateMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(
    const Context *context,
    const PrimitiveMode modePacked,
    const GLsizei *counts,
    const DrawElementsType typePacked,
    const GLvoid *const *indices,
    const GLsizei *instanceCounts,
    const GLint *baseVertices,
    const GLuint *baseInstances,
    const GLsizei drawcount);

// GL_ANGLE_copy_texture_3d
bool ValidateCopyTexture3DANGLE(const Context *context,
                                const TextureID sourceIdPacked,
                                const GLint sourceLevel,
                                const TextureTarget destTargetPacked,
                                const TextureID destIdPacked,
                                const GLint destLevel,
                                const GLint internalFormat,
                                const GLenum destType,
                                const GLboolean unpackFlipY,
                                const GLboolean unpackPremultiplyAlpha,
                                const GLboolean unpackUnmultiplyAlpha);
bool ValidateCopySubTexture3DANGLE(const Context *context,
                                   const TextureID sourceIdPacked,
                                   const GLint sourceLevel,
                                   const TextureTarget destTargetPacked,
                                   const TextureID destIdPacked,
                                   const GLint destLevel,
                                   const GLint xoffset,
                                   const GLint yoffset,
                                   const GLint zoffset,
                                   const GLint x,
                                   const GLint y,
                                   const GLint z,
                                   const GLint width,
                                   const GLint height,
                                   const GLint depth,
                                   const GLboolean unpackFlipY,
                                   const GLboolean unpackPremultiplyAlpha,
                                   const GLboolean unpackUnmultiplyAlpha);

// GL_ANGLE_framebuffer_blit
bool ValidateBlitFramebufferANGLE(const Context *context,
                                  const GLint srcX0,
                                  const GLint srcY0,
                                  const GLint srcX1,
                                  const GLint srcY1,
                                  const GLint dstX0,
                                  const GLint dstY0,
                                  const GLint dstX1,
                                  const GLint dstY1,
                                  const GLbitfield mask,
                                  const GLenum filter);

// GL_ANGLE_framebuffer_multisample
bool ValidateRenderbufferStorageMultisampleANGLE(const Context *context,
                                                 const GLenum target,
                                                 const GLsizei samples,
                                                 const GLenum internalformat,
                                                 const GLsizei width,
                                                 const GLsizei height);

// GL_ANGLE_get_image
bool ValidateGetTexImageANGLE(const Context *context,
                              const TextureTarget targetPacked,
                              const GLint level,
                              const GLenum format,
                              const GLenum type,
                              const void *pixels);
bool ValidateGetRenderbufferImageANGLE(const Context *context,
                                       const GLenum target,
                                       const GLenum format,
                                       const GLenum type,
                                       const void *pixels);

// GL_ANGLE_instanced_arrays
bool ValidateDrawArraysInstancedANGLE(const Context *context,
                                      const PrimitiveMode modePacked,
                                      const GLint first,
                                      const GLsizei count,
                                      const GLsizei primcount);
bool ValidateDrawElementsInstancedANGLE(const Context *context,
                                        const PrimitiveMode modePacked,
                                        const GLsizei count,
                                        const DrawElementsType typePacked,
                                        const void *indices,
                                        const GLsizei primcount);
bool ValidateVertexAttribDivisorANGLE(const Context *context,
                                      const GLuint index,
                                      const GLuint divisor);

// GL_ANGLE_multi_draw
bool ValidateMultiDrawArraysANGLE(const Context *context,
                                  const PrimitiveMode modePacked,
                                  const GLint *firsts,
                                  const GLsizei *counts,
                                  const GLsizei drawcount);
bool ValidateMultiDrawArraysInstancedANGLE(const Context *context,
                                           const PrimitiveMode modePacked,
                                           const GLint *firsts,
                                           const GLsizei *counts,
                                           const GLsizei *instanceCounts,
                                           const GLsizei drawcount);
bool ValidateMultiDrawElementsANGLE(const Context *context,
                                    const PrimitiveMode modePacked,
                                    const GLsizei *counts,
                                    const DrawElementsType typePacked,
                                    const GLvoid *const *indices,
                                    const GLsizei drawcount);
bool ValidateMultiDrawElementsInstancedANGLE(const Context *context,
                                             const PrimitiveMode modePacked,
                                             const GLsizei *counts,
                                             const DrawElementsType typePacked,
                                             const GLvoid *const *indices,
                                             const GLsizei *instanceCounts,
                                             const GLsizei drawcount);

// GL_ANGLE_program_binary

// GL_ANGLE_provoking_vertex
bool ValidateProvokingVertexANGLE(const Context *context,
                                  const ProvokingVertexConvention modePacked);

// GL_ANGLE_request_extension
bool ValidateRequestExtensionANGLE(const Context *context, const GLchar *name);
bool ValidateDisableExtensionANGLE(const Context *context, const GLchar *name);

// GL_ANGLE_robust_client_memory
bool ValidateGetBooleanvRobustANGLE(const Context *context,
                                    const GLenum pname,
                                    const GLsizei bufSize,
                                    const GLsizei *length,
                                    const GLboolean *params);
bool ValidateGetBufferParameterivRobustANGLE(const Context *context,
                                             const BufferBinding targetPacked,
                                             const GLenum pname,
                                             const GLsizei bufSize,
                                             const GLsizei *length,
                                             const GLint *params);
bool ValidateGetFloatvRobustANGLE(const Context *context,
                                  const GLenum pname,
                                  const GLsizei bufSize,
                                  const GLsizei *length,
                                  const GLfloat *params);
bool ValidateGetFramebufferAttachmentParameterivRobustANGLE(const Context *context,
                                                            const GLenum target,
                                                            const GLenum attachment,
                                                            const GLenum pname,
                                                            const GLsizei bufSize,
                                                            const GLsizei *length,
                                                            const GLint *params);
bool ValidateGetIntegervRobustANGLE(const Context *context,
                                    const GLenum pname,
                                    const GLsizei bufSize,
                                    const GLsizei *length,
                                    const GLint *data);
bool ValidateGetProgramivRobustANGLE(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLenum pname,
                                     const GLsizei bufSize,
                                     const GLsizei *length,
                                     const GLint *params);
bool ValidateGetRenderbufferParameterivRobustANGLE(const Context *context,
                                                   const GLenum target,
                                                   const GLenum pname,
                                                   const GLsizei bufSize,
                                                   const GLsizei *length,
                                                   const GLint *params);
bool ValidateGetShaderivRobustANGLE(const Context *context,
                                    const ShaderProgramID shaderPacked,
                                    const GLenum pname,
                                    const GLsizei bufSize,
                                    const GLsizei *length,
                                    const GLint *params);
bool ValidateGetTexParameterfvRobustANGLE(const Context *context,
                                          const TextureType targetPacked,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const GLfloat *params);
bool ValidateGetTexParameterivRobustANGLE(const Context *context,
                                          const TextureType targetPacked,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const GLint *params);
bool ValidateGetUniformfvRobustANGLE(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLint location,
                                     const GLsizei bufSize,
                                     const GLsizei *length,
                                     const GLfloat *params);
bool ValidateGetUniformivRobustANGLE(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLint location,
                                     const GLsizei bufSize,
                                     const GLsizei *length,
                                     const GLint *params);
bool ValidateGetVertexAttribfvRobustANGLE(const Context *context,
                                          const GLuint index,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const GLfloat *params);
bool ValidateGetVertexAttribivRobustANGLE(const Context *context,
                                          const GLuint index,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const GLint *params);
bool ValidateGetVertexAttribPointervRobustANGLE(const Context *context,
                                                const GLuint index,
                                                const GLenum pname,
                                                const GLsizei bufSize,
                                                const GLsizei *length,
                                                const void *const *pointer);
bool ValidateReadPixelsRobustANGLE(const Context *context,
                                   const GLint x,
                                   const GLint y,
                                   const GLsizei width,
                                   const GLsizei height,
                                   const GLenum format,
                                   const GLenum type,
                                   const GLsizei bufSize,
                                   const GLsizei *length,
                                   const GLsizei *columns,
                                   const GLsizei *rows,
                                   const void *pixels);
bool ValidateTexImage2DRobustANGLE(const Context *context,
                                   const TextureTarget targetPacked,
                                   const GLint level,
                                   const GLint internalformat,
                                   const GLsizei width,
                                   const GLsizei height,
                                   const GLint border,
                                   const GLenum format,
                                   const GLenum type,
                                   const GLsizei bufSize,
                                   const void *pixels);
bool ValidateTexParameterfvRobustANGLE(const Context *context,
                                       const TextureType targetPacked,
                                       const GLenum pname,
                                       const GLsizei bufSize,
                                       const GLfloat *params);
bool ValidateTexParameterivRobustANGLE(const Context *context,
                                       const TextureType targetPacked,
                                       const GLenum pname,
                                       const GLsizei bufSize,
                                       const GLint *params);
bool ValidateTexSubImage2DRobustANGLE(const Context *context,
                                      const TextureTarget targetPacked,
                                      const GLint level,
                                      const GLint xoffset,
                                      const GLint yoffset,
                                      const GLsizei width,
                                      const GLsizei height,
                                      const GLenum format,
                                      const GLenum type,
                                      const GLsizei bufSize,
                                      const void *pixels);
bool ValidateTexImage3DRobustANGLE(const Context *context,
                                   const TextureTarget targetPacked,
                                   const GLint level,
                                   const GLint internalformat,
                                   const GLsizei width,
                                   const GLsizei height,
                                   const GLsizei depth,
                                   const GLint border,
                                   const GLenum format,
                                   const GLenum type,
                                   const GLsizei bufSize,
                                   const void *pixels);
bool ValidateTexSubImage3DRobustANGLE(const Context *context,
                                      const TextureTarget targetPacked,
                                      const GLint level,
                                      const GLint xoffset,
                                      const GLint yoffset,
                                      const GLint zoffset,
                                      const GLsizei width,
                                      const GLsizei height,
                                      const GLsizei depth,
                                      const GLenum format,
                                      const GLenum type,
                                      const GLsizei bufSize,
                                      const void *pixels);
bool ValidateCompressedTexImage2DRobustANGLE(const Context *context,
                                             const TextureTarget targetPacked,
                                             const GLint level,
                                             const GLenum internalformat,
                                             const GLsizei width,
                                             const GLsizei height,
                                             const GLint border,
                                             const GLsizei imageSize,
                                             const GLsizei dataSize,
                                             const GLvoid *data);
bool ValidateCompressedTexSubImage2DRobustANGLE(const Context *context,
                                                const TextureTarget targetPacked,
                                                const GLint level,
                                                const GLsizei xoffset,
                                                const GLsizei yoffset,
                                                const GLsizei width,
                                                const GLsizei height,
                                                const GLenum format,
                                                const GLsizei imageSize,
                                                const GLsizei dataSize,
                                                const GLvoid *data);
bool ValidateCompressedTexImage3DRobustANGLE(const Context *context,
                                             const TextureTarget targetPacked,
                                             const GLint level,
                                             const GLenum internalformat,
                                             const GLsizei width,
                                             const GLsizei height,
                                             const GLsizei depth,
                                             const GLint border,
                                             const GLsizei imageSize,
                                             const GLsizei dataSize,
                                             const GLvoid *data);
bool ValidateCompressedTexSubImage3DRobustANGLE(const Context *context,
                                                const TextureTarget targetPacked,
                                                const GLint level,
                                                const GLint xoffset,
                                                const GLint yoffset,
                                                const GLint zoffset,
                                                const GLsizei width,
                                                const GLsizei height,
                                                const GLsizei depth,
                                                const GLenum format,
                                                const GLsizei imageSize,
                                                const GLsizei dataSize,
                                                const GLvoid *data);
bool ValidateGetQueryivRobustANGLE(const Context *context,
                                   const QueryType targetPacked,
                                   const GLenum pname,
                                   const GLsizei bufSize,
                                   const GLsizei *length,
                                   const GLint *params);
bool ValidateGetQueryObjectuivRobustANGLE(const Context *context,
                                          const QueryID idPacked,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const GLuint *params);
bool ValidateGetBufferPointervRobustANGLE(const Context *context,
                                          const BufferBinding targetPacked,
                                          const GLenum pname,
                                          const GLsizei bufSize,
                                          const GLsizei *length,
                                          const void *const *params);
bool ValidateGetIntegeri_vRobustANGLE(const Context *context,
                                      const GLenum target,
                                      const GLuint index,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLint *data);
bool ValidateGetInternalformativRobustANGLE(const Context *context,
                                            const GLenum target,
                                            const GLenum internalformat,
                                            const GLenum pname,
                                            const GLsizei bufSize,
                                            const GLsizei *length,
                                            const GLint *params);
bool ValidateGetVertexAttribIivRobustANGLE(const Context *context,
                                           const GLuint index,
                                           const GLenum pname,
                                           const GLsizei bufSize,
                                           const GLsizei *length,
                                           const GLint *params);
bool ValidateGetVertexAttribIuivRobustANGLE(const Context *context,
                                            const GLuint index,
                                            const GLenum pname,
                                            const GLsizei bufSize,
                                            const GLsizei *length,
                                            const GLuint *params);
bool ValidateGetUniformuivRobustANGLE(const Context *context,
                                      const ShaderProgramID programPacked,
                                      const GLint location,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLuint *params);
bool ValidateGetActiveUniformBlockivRobustANGLE(const Context *context,
                                                const ShaderProgramID programPacked,
                                                const GLuint uniformBlockIndex,
                                                const GLenum pname,
                                                const GLsizei bufSize,
                                                const GLsizei *length,
                                                const GLint *params);
bool ValidateGetInteger64vRobustANGLE(const Context *context,
                                      const GLenum pname,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLint64 *data);
bool ValidateGetInteger64i_vRobustANGLE(const Context *context,
                                        const GLenum target,
                                        const GLuint index,
                                        const GLsizei bufSize,
                                        const GLsizei *length,
                                        const GLint64 *data);
bool ValidateGetBufferParameteri64vRobustANGLE(const Context *context,
                                               const BufferBinding targetPacked,
                                               const GLenum pname,
                                               const GLsizei bufSize,
                                               const GLsizei *length,
                                               const GLint64 *params);
bool ValidateSamplerParameterivRobustANGLE(const Context *context,
                                           const SamplerID samplerPacked,
                                           const GLuint pname,
                                           const GLsizei bufSize,
                                           const GLint *param);
bool ValidateSamplerParameterfvRobustANGLE(const Context *context,
                                           const SamplerID samplerPacked,
                                           const GLenum pname,
                                           const GLsizei bufSize,
                                           const GLfloat *param);
bool ValidateGetSamplerParameterivRobustANGLE(const Context *context,
                                              const SamplerID samplerPacked,
                                              const GLenum pname,
                                              const GLsizei bufSize,
                                              const GLsizei *length,
                                              const GLint *params);
bool ValidateGetSamplerParameterfvRobustANGLE(const Context *context,
                                              const SamplerID samplerPacked,
                                              const GLenum pname,
                                              const GLsizei bufSize,
                                              const GLsizei *length,
                                              const GLfloat *params);
bool ValidateGetFramebufferParameterivRobustANGLE(const Context *context,
                                                  const GLenum target,
                                                  const GLenum pname,
                                                  const GLsizei bufSize,
                                                  const GLsizei *length,
                                                  const GLint *params);
bool ValidateGetProgramInterfaceivRobustANGLE(const Context *context,
                                              const ShaderProgramID programPacked,
                                              const GLenum programInterface,
                                              const GLenum pname,
                                              const GLsizei bufSize,
                                              const GLsizei *length,
                                              const GLint *params);
bool ValidateGetBooleani_vRobustANGLE(const Context *context,
                                      const GLenum target,
                                      const GLuint index,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLboolean *data);
bool ValidateGetMultisamplefvRobustANGLE(const Context *context,
                                         const GLenum pname,
                                         const GLuint index,
                                         const GLsizei bufSize,
                                         const GLsizei *length,
                                         const GLfloat *val);
bool ValidateGetTexLevelParameterivRobustANGLE(const Context *context,
                                               const TextureTarget targetPacked,
                                               const GLint level,
                                               const GLenum pname,
                                               const GLsizei bufSize,
                                               const GLsizei *length,
                                               const GLint *params);
bool ValidateGetTexLevelParameterfvRobustANGLE(const Context *context,
                                               const TextureTarget targetPacked,
                                               const GLint level,
                                               const GLenum pname,
                                               const GLsizei bufSize,
                                               const GLsizei *length,
                                               const GLfloat *params);
bool ValidateGetPointervRobustANGLERobustANGLE(const Context *context,
                                               const GLenum pname,
                                               const GLsizei bufSize,
                                               const GLsizei *length,
                                               const void *const *params);
bool ValidateReadnPixelsRobustANGLE(const Context *context,
                                    const GLint x,
                                    const GLint y,
                                    const GLsizei width,
                                    const GLsizei height,
                                    const GLenum format,
                                    const GLenum type,
                                    const GLsizei bufSize,
                                    const GLsizei *length,
                                    const GLsizei *columns,
                                    const GLsizei *rows,
                                    const void *data);
bool ValidateGetnUniformfvRobustANGLE(const Context *context,
                                      const ShaderProgramID programPacked,
                                      const GLint location,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLfloat *params);
bool ValidateGetnUniformivRobustANGLE(const Context *context,
                                      const ShaderProgramID programPacked,
                                      const GLint location,
                                      const GLsizei bufSize,
                                      const GLsizei *length,
                                      const GLint *params);
bool ValidateGetnUniformuivRobustANGLE(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei bufSize,
                                       const GLsizei *length,
                                       const GLuint *params);
bool ValidateTexParameterIivRobustANGLE(const Context *context,
                                        const TextureType targetPacked,
                                        const GLenum pname,
                                        const GLsizei bufSize,
                                        const GLint *params);
bool ValidateTexParameterIuivRobustANGLE(const Context *context,
                                         const TextureType targetPacked,
                                         const GLenum pname,
                                         const GLsizei bufSize,
                                         const GLuint *params);
bool ValidateGetTexParameterIivRobustANGLE(const Context *context,
                                           const TextureType targetPacked,
                                           const GLenum pname,
                                           const GLsizei bufSize,
                                           const GLsizei *length,
                                           const GLint *params);
bool ValidateGetTexParameterIuivRobustANGLE(const Context *context,
                                            const TextureType targetPacked,
                                            const GLenum pname,
                                            const GLsizei bufSize,
                                            const GLsizei *length,
                                            const GLuint *params);
bool ValidateSamplerParameterIivRobustANGLE(const Context *context,
                                            const SamplerID samplerPacked,
                                            const GLenum pname,
                                            const GLsizei bufSize,
                                            const GLint *param);
bool ValidateSamplerParameterIuivRobustANGLE(const Context *context,
                                             const SamplerID samplerPacked,
                                             const GLenum pname,
                                             const GLsizei bufSize,
                                             const GLuint *param);
bool ValidateGetSamplerParameterIivRobustANGLE(const Context *context,
                                               const SamplerID samplerPacked,
                                               const GLenum pname,
                                               const GLsizei bufSize,
                                               const GLsizei *length,
                                               const GLint *params);
bool ValidateGetSamplerParameterIuivRobustANGLE(const Context *context,
                                                const SamplerID samplerPacked,
                                                const GLenum pname,
                                                const GLsizei bufSize,
                                                const GLsizei *length,
                                                const GLuint *params);
bool ValidateGetQueryObjectivRobustANGLE(const Context *context,
                                         const QueryID idPacked,
                                         const GLenum pname,
                                         const GLsizei bufSize,
                                         const GLsizei *length,
                                         const GLint *params);
bool ValidateGetQueryObjecti64vRobustANGLE(const Context *context,
                                           const QueryID idPacked,
                                           const GLenum pname,
                                           const GLsizei bufSize,
                                           const GLsizei *length,
                                           const GLint64 *params);
bool ValidateGetQueryObjectui64vRobustANGLE(const Context *context,
                                            const QueryID idPacked,
                                            const GLenum pname,
                                            const GLsizei bufSize,
                                            const GLsizei *length,
                                            const GLuint64 *params);

// GL_ANGLE_texture_external_update
bool ValidateTexImage2DExternalANGLE(const Context *context,
                                     const TextureTarget targetPacked,
                                     const GLint level,
                                     const GLint internalformat,
                                     const GLsizei width,
                                     const GLsizei height,
                                     const GLint border,
                                     const GLenum format,
                                     const GLenum type);
bool ValidateInvalidateTextureANGLE(const Context *context, const TextureType targetPacked);

// GL_ANGLE_texture_multisample
bool ValidateTexStorage2DMultisampleANGLE(const Context *context,
                                          const TextureType targetPacked,
                                          const GLsizei samples,
                                          const GLenum internalformat,
                                          const GLsizei width,
                                          const GLsizei height,
                                          const GLboolean fixedsamplelocations);
bool ValidateGetTexLevelParameterivANGLE(const Context *context,
                                         const TextureTarget targetPacked,
                                         const GLint level,
                                         const GLenum pname,
                                         const GLint *params);
bool ValidateGetTexLevelParameterfvANGLE(const Context *context,
                                         const TextureTarget targetPacked,
                                         const GLint level,
                                         const GLenum pname,
                                         const GLfloat *params);
bool ValidateGetMultisamplefvANGLE(const Context *context,
                                   const GLenum pname,
                                   const GLuint index,
                                   const GLfloat *val);
bool ValidateSampleMaskiANGLE(const Context *context,
                              const GLuint maskNumber,
                              const GLbitfield mask);

// GL_ANGLE_translated_shader_source
bool ValidateGetTranslatedShaderSourceANGLE(const Context *context,
                                            const ShaderProgramID shaderPacked,
                                            const GLsizei bufsize,
                                            const GLsizei *length,
                                            const GLchar *source);

// GL_CHROMIUM_bind_uniform_location
bool ValidateBindUniformLocationCHROMIUM(const Context *context,
                                         const ShaderProgramID programPacked,
                                         const GLint location,
                                         const GLchar *name);

// GL_CHROMIUM_copy_compressed_texture
bool ValidateCompressedCopyTextureCHROMIUM(const Context *context,
                                           const TextureID sourceIdPacked,
                                           const TextureID destIdPacked);

// GL_CHROMIUM_copy_texture
bool ValidateCopyTextureCHROMIUM(const Context *context,
                                 const TextureID sourceIdPacked,
                                 const GLint sourceLevel,
                                 const TextureTarget destTargetPacked,
                                 const TextureID destIdPacked,
                                 const GLint destLevel,
                                 const GLint internalFormat,
                                 const GLenum destType,
                                 const GLboolean unpackFlipY,
                                 const GLboolean unpackPremultiplyAlpha,
                                 const GLboolean unpackUnmultiplyAlpha);
bool ValidateCopySubTextureCHROMIUM(const Context *context,
                                    const TextureID sourceIdPacked,
                                    const GLint sourceLevel,
                                    const TextureTarget destTargetPacked,
                                    const TextureID destIdPacked,
                                    const GLint destLevel,
                                    const GLint xoffset,
                                    const GLint yoffset,
                                    const GLint x,
                                    const GLint y,
                                    const GLint width,
                                    const GLint height,
                                    const GLboolean unpackFlipY,
                                    const GLboolean unpackPremultiplyAlpha,
                                    const GLboolean unpackUnmultiplyAlpha);

// GL_CHROMIUM_framebuffer_mixed_samples
bool ValidateCoverageModulationCHROMIUM(const Context *context, const GLenum components);
bool ValidateMatrixLoadfCHROMIUM(const Context *context,
                                 const GLenum matrixMode,
                                 const GLfloat *matrix);
bool ValidateMatrixLoadIdentityCHROMIUM(const Context *context, const GLenum matrixMode);

// GL_CHROMIUM_lose_context
bool ValidateLoseContextCHROMIUM(const Context *context,
                                 const GraphicsResetStatus currentPacked,
                                 const GraphicsResetStatus otherPacked);

// GL_CHROMIUM_path_rendering
bool ValidateGenPathsCHROMIUM(const Context *context, const GLsizei range);
bool ValidateDeletePathsCHROMIUM(const Context *context,
                                 const PathID firstPacked,
                                 const GLsizei range);
bool ValidateIsPathCHROMIUM(const Context *context, const PathID pathPacked);
bool ValidatePathCommandsCHROMIUM(const Context *context,
                                  const PathID pathPacked,
                                  const GLsizei numCommands,
                                  const GLubyte *commands,
                                  const GLsizei numCoords,
                                  const GLenum coordType,
                                  const void *coords);
bool ValidatePathParameterfCHROMIUM(const Context *context,
                                    const PathID pathPacked,
                                    const GLenum pname,
                                    const GLfloat value);
bool ValidatePathParameteriCHROMIUM(const Context *context,
                                    const PathID pathPacked,
                                    const GLenum pname,
                                    const GLint value);
bool ValidateGetPathParameterfvCHROMIUM(const Context *context,
                                        const PathID pathPacked,
                                        const GLenum pname,
                                        const GLfloat *value);
bool ValidateGetPathParameterivCHROMIUM(const Context *context,
                                        const PathID pathPacked,
                                        const GLenum pname,
                                        const GLint *value);
bool ValidatePathStencilFuncCHROMIUM(const Context *context,
                                     const GLenum func,
                                     const GLint ref,
                                     const GLuint mask);
bool ValidateStencilFillPathCHROMIUM(const Context *context,
                                     const PathID pathPacked,
                                     const GLenum fillMode,
                                     const GLuint mask);
bool ValidateStencilStrokePathCHROMIUM(const Context *context,
                                       const PathID pathPacked,
                                       const GLint reference,
                                       const GLuint mask);
bool ValidateCoverFillPathCHROMIUM(const Context *context,
                                   const PathID pathPacked,
                                   const GLenum coverMode);
bool ValidateCoverStrokePathCHROMIUM(const Context *context,
                                     const PathID pathPacked,
                                     const GLenum coverMode);
bool ValidateStencilThenCoverFillPathCHROMIUM(const Context *context,
                                              const PathID pathPacked,
                                              const GLenum fillMode,
                                              const GLuint mask,
                                              const GLenum coverMode);
bool ValidateStencilThenCoverStrokePathCHROMIUM(const Context *context,
                                                const PathID pathPacked,
                                                const GLint reference,
                                                const GLuint mask,
                                                const GLenum coverMode);
bool ValidateCoverFillPathInstancedCHROMIUM(const Context *context,
                                            const GLsizei numPath,
                                            const GLenum pathNameType,
                                            const void *paths,
                                            const PathID pathBasePacked,
                                            const GLenum coverMode,
                                            const GLenum transformType,
                                            const GLfloat *transformValues);
bool ValidateCoverStrokePathInstancedCHROMIUM(const Context *context,
                                              const GLsizei numPath,
                                              const GLenum pathNameType,
                                              const void *paths,
                                              const PathID pathBasePacked,
                                              const GLenum coverMode,
                                              const GLenum transformType,
                                              const GLfloat *transformValues);
bool ValidateStencilStrokePathInstancedCHROMIUM(const Context *context,
                                                const GLsizei numPath,
                                                const GLenum pathNameType,
                                                const void *paths,
                                                const PathID pathBasePacked,
                                                const GLint reference,
                                                const GLuint mask,
                                                const GLenum transformType,
                                                const GLfloat *transformValues);
bool ValidateStencilFillPathInstancedCHROMIUM(const Context *context,
                                              const GLsizei numPaths,
                                              const GLenum pathNameType,
                                              const void *paths,
                                              const PathID pathBasePacked,
                                              const GLenum fillMode,
                                              const GLuint mask,
                                              const GLenum transformType,
                                              const GLfloat *transformValues);
bool ValidateStencilThenCoverFillPathInstancedCHROMIUM(const Context *context,
                                                       const GLsizei numPaths,
                                                       const GLenum pathNameType,
                                                       const void *paths,
                                                       const PathID pathBasePacked,
                                                       const GLenum fillMode,
                                                       const GLuint mask,
                                                       const GLenum coverMode,
                                                       const GLenum transformType,
                                                       const GLfloat *transformValues);
bool ValidateStencilThenCoverStrokePathInstancedCHROMIUM(const Context *context,
                                                         const GLsizei numPaths,
                                                         const GLenum pathNameType,
                                                         const void *paths,
                                                         const PathID pathBasePacked,
                                                         const GLint reference,
                                                         const GLuint mask,
                                                         const GLenum coverMode,
                                                         const GLenum transformType,
                                                         const GLfloat *transformValues);
bool ValidateBindFragmentInputLocationCHROMIUM(const Context *context,
                                               const ShaderProgramID programsPacked,
                                               const GLint location,
                                               const GLchar *name);
bool ValidateProgramPathFragmentInputGenCHROMIUM(const Context *context,
                                                 const ShaderProgramID programPacked,
                                                 const GLint location,
                                                 const GLenum genMode,
                                                 const GLint components,
                                                 const GLfloat *coeffs);

// GL_EXT_blend_func_extended
bool ValidateBindFragDataLocationEXT(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLuint color,
                                     const GLchar *name);
bool ValidateBindFragDataLocationIndexedEXT(const Context *context,
                                            const ShaderProgramID programPacked,
                                            const GLuint colorNumber,
                                            const GLuint index,
                                            const GLchar *name);
bool ValidateGetFragDataIndexEXT(const Context *context,
                                 const ShaderProgramID programPacked,
                                 const GLchar *name);
bool ValidateGetProgramResourceLocationIndexEXT(const Context *context,
                                                const ShaderProgramID programPacked,
                                                const GLenum programInterface,
                                                const GLchar *name);

// GL_EXT_debug_marker
bool ValidateInsertEventMarkerEXT(const Context *context,
                                  const GLsizei length,
                                  const GLchar *marker);
bool ValidatePopGroupMarkerEXT(const Context *context);
bool ValidatePushGroupMarkerEXT(const Context *context, const GLsizei length, const GLchar *marker);

// GL_EXT_discard_framebuffer
bool ValidateDiscardFramebufferEXT(const Context *context,
                                   const GLenum target,
                                   const GLsizei numAttachments,
                                   const GLenum *attachments);

// GL_EXT_disjoint_timer_query
bool ValidateBeginQueryEXT(const Context *context,
                           const QueryType targetPacked,
                           const QueryID idPacked);
bool ValidateDeleteQueriesEXT(const Context *context, const GLsizei n, const QueryID *idsPacked);
bool ValidateEndQueryEXT(const Context *context, const QueryType targetPacked);
bool ValidateGenQueriesEXT(const Context *context, const GLsizei n, const QueryID *idsPacked);
bool ValidateGetQueryObjecti64vEXT(const Context *context,
                                   const QueryID idPacked,
                                   const GLenum pname,
                                   const GLint64 *params);
bool ValidateGetQueryObjectivEXT(const Context *context,
                                 const QueryID idPacked,
                                 const GLenum pname,
                                 const GLint *params);
bool ValidateGetQueryObjectui64vEXT(const Context *context,
                                    const QueryID idPacked,
                                    const GLenum pname,
                                    const GLuint64 *params);
bool ValidateGetQueryObjectuivEXT(const Context *context,
                                  const QueryID idPacked,
                                  const GLenum pname,
                                  const GLuint *params);
bool ValidateGetQueryivEXT(const Context *context,
                           const QueryType targetPacked,
                           const GLenum pname,
                           const GLint *params);
bool ValidateIsQueryEXT(const Context *context, const QueryID idPacked);
bool ValidateQueryCounterEXT(const Context *context,
                             const QueryID idPacked,
                             const QueryType targetPacked);

// GL_EXT_draw_buffers
bool ValidateDrawBuffersEXT(const Context *context, const GLsizei n, const GLenum *bufs);

// GL_EXT_draw_elements_base_vertex
bool ValidateDrawElementsBaseVertexEXT(const Context *context,
                                       const PrimitiveMode modePacked,
                                       const GLsizei count,
                                       const DrawElementsType typePacked,
                                       const void *indices,
                                       const GLint basevertex);
bool ValidateDrawElementsInstancedBaseVertexEXT(const Context *context,
                                                const PrimitiveMode modePacked,
                                                const GLsizei count,
                                                const DrawElementsType typePacked,
                                                const void *indices,
                                                const GLsizei instancecount,
                                                const GLint basevertex);
bool ValidateDrawRangeElementsBaseVertexEXT(const Context *context,
                                            const PrimitiveMode modePacked,
                                            const GLuint start,
                                            const GLuint end,
                                            const GLsizei count,
                                            const DrawElementsType typePacked,
                                            const void *indices,
                                            const GLint basevertex);
bool ValidateMultiDrawElementsBaseVertexEXT(const Context *context,
                                            const PrimitiveMode modePacked,
                                            const GLsizei *count,
                                            const DrawElementsType typePacked,
                                            const void *const *indices,
                                            const GLsizei primcount,
                                            const GLint *basevertex);

// GL_EXT_geometry_shader
bool ValidateFramebufferTextureEXT(const Context *context,
                                   const GLenum target,
                                   const GLenum attachment,
                                   const TextureID texturePacked,
                                   const GLint level);

// GL_EXT_instanced_arrays
bool ValidateDrawArraysInstancedEXT(const Context *context,
                                    const PrimitiveMode modePacked,
                                    const GLint start,
                                    const GLsizei count,
                                    const GLsizei primcount);
bool ValidateDrawElementsInstancedEXT(const Context *context,
                                      const PrimitiveMode modePacked,
                                      const GLsizei count,
                                      const DrawElementsType typePacked,
                                      const void *indices,
                                      const GLsizei primcount);
bool ValidateVertexAttribDivisorEXT(const Context *context,
                                    const GLuint index,
                                    const GLuint divisor);

// GL_EXT_map_buffer_range
bool ValidateFlushMappedBufferRangeEXT(const Context *context,
                                       const BufferBinding targetPacked,
                                       const GLintptr offset,
                                       const GLsizeiptr length);
bool ValidateMapBufferRangeEXT(const Context *context,
                               const BufferBinding targetPacked,
                               const GLintptr offset,
                               const GLsizeiptr length,
                               const GLbitfield access);

// GL_EXT_memory_object
bool ValidateBufferStorageMemEXT(const Context *context,
                                 const TextureType targetPacked,
                                 const GLsizeiptr size,
                                 const MemoryObjectID memoryPacked,
                                 const GLuint64 offset);
bool ValidateCreateMemoryObjectsEXT(const Context *context,
                                    const GLsizei n,
                                    const MemoryObjectID *memoryObjectsPacked);
bool ValidateDeleteMemoryObjectsEXT(const Context *context,
                                    const GLsizei n,
                                    const MemoryObjectID *memoryObjectsPacked);
bool ValidateGetMemoryObjectParameterivEXT(const Context *context,
                                           const MemoryObjectID memoryObjectPacked,
                                           const GLenum pname,
                                           const GLint *params);
bool ValidateGetUnsignedBytevEXT(const Context *context, const GLenum pname, const GLubyte *data);
bool ValidateGetUnsignedBytei_vEXT(const Context *context,
                                   const GLenum target,
                                   const GLuint index,
                                   const GLubyte *data);
bool ValidateIsMemoryObjectEXT(const Context *context, const MemoryObjectID memoryObjectPacked);
bool ValidateMemoryObjectParameterivEXT(const Context *context,
                                        const MemoryObjectID memoryObjectPacked,
                                        const GLenum pname,
                                        const GLint *params);
bool ValidateTexStorageMem2DEXT(const Context *context,
                                const TextureType targetPacked,
                                const GLsizei levels,
                                const GLenum internalFormat,
                                const GLsizei width,
                                const GLsizei height,
                                const MemoryObjectID memoryPacked,
                                const GLuint64 offset);
bool ValidateTexStorageMem2DMultisampleEXT(const Context *context,
                                           const TextureType targetPacked,
                                           const GLsizei samples,
                                           const GLenum internalFormat,
                                           const GLsizei width,
                                           const GLsizei height,
                                           const GLboolean fixedSampleLocations,
                                           const MemoryObjectID memoryPacked,
                                           const GLuint64 offset);
bool ValidateTexStorageMem3DEXT(const Context *context,
                                const TextureType targetPacked,
                                const GLsizei levels,
                                const GLenum internalFormat,
                                const GLsizei width,
                                const GLsizei height,
                                const GLsizei depth,
                                const MemoryObjectID memoryPacked,
                                const GLuint64 offset);
bool ValidateTexStorageMem3DMultisampleEXT(const Context *context,
                                           const TextureType targetPacked,
                                           const GLsizei samples,
                                           const GLenum internalFormat,
                                           const GLsizei width,
                                           const GLsizei height,
                                           const GLsizei depth,
                                           const GLboolean fixedSampleLocations,
                                           const MemoryObjectID memoryPacked,
                                           const GLuint64 offset);

// GL_EXT_memory_object_fd
bool ValidateImportMemoryFdEXT(const Context *context,
                               const MemoryObjectID memoryPacked,
                               const GLuint64 size,
                               const HandleType handleTypePacked,
                               const GLint fd);

// GL_EXT_multisampled_render_to_texture
bool ValidateFramebufferTexture2DMultisampleEXT(const Context *context,
                                                const GLenum target,
                                                const GLenum attachment,
                                                const GLenum textarget,
                                                const GLuint texture,
                                                const GLint level,
                                                const GLsizei samples);
bool ValidateRenderbufferStorageMultisampleEXT(const Context *context,
                                               const GLenum target,
                                               const GLsizei samples,
                                               const GLenum internalformat,
                                               const GLsizei width,
                                               const GLsizei height);

// GL_EXT_occlusion_query_boolean

// GL_EXT_read_format_bgra

// GL_EXT_robustness
bool ValidateGetGraphicsResetStatusEXT(const Context *context);
bool ValidateGetnUniformfvEXT(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLsizei bufSize,
                              const GLfloat *params);
bool ValidateGetnUniformivEXT(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLsizei bufSize,
                              const GLint *params);
bool ValidateReadnPixelsEXT(const Context *context,
                            const GLint x,
                            const GLint y,
                            const GLsizei width,
                            const GLsizei height,
                            const GLenum format,
                            const GLenum type,
                            const GLsizei bufSize,
                            const void *data);

// GL_EXT_sRGB

// GL_EXT_semaphore
bool ValidateDeleteSemaphoresEXT(const Context *context,
                                 const GLsizei n,
                                 const SemaphoreID *semaphoresPacked);
bool ValidateGenSemaphoresEXT(const Context *context,
                              const GLsizei n,
                              const SemaphoreID *semaphoresPacked);
bool ValidateGetSemaphoreParameterui64vEXT(const Context *context,
                                           const SemaphoreID semaphorePacked,
                                           const GLenum pname,
                                           const GLuint64 *params);
bool ValidateIsSemaphoreEXT(const Context *context, const SemaphoreID semaphorePacked);
bool ValidateSemaphoreParameterui64vEXT(const Context *context,
                                        const SemaphoreID semaphorePacked,
                                        const GLenum pname,
                                        const GLuint64 *params);
bool ValidateSignalSemaphoreEXT(const Context *context,
                                const SemaphoreID semaphorePacked,
                                const GLuint numBufferBarriers,
                                const BufferID *buffersPacked,
                                const GLuint numTextureBarriers,
                                const TextureID *texturesPacked,
                                const GLenum *dstLayouts);
bool ValidateWaitSemaphoreEXT(const Context *context,
                              const SemaphoreID semaphorePacked,
                              const GLuint numBufferBarriers,
                              const BufferID *buffersPacked,
                              const GLuint numTextureBarriers,
                              const TextureID *texturesPacked,
                              const GLenum *srcLayouts);

// GL_EXT_semaphore_fd
bool ValidateImportSemaphoreFdEXT(const Context *context,
                                  const SemaphoreID semaphorePacked,
                                  const HandleType handleTypePacked,
                                  const GLint fd);

// GL_EXT_texture_compression_bptc

// GL_EXT_texture_compression_dxt1

// GL_EXT_texture_compression_rgtc

// GL_EXT_texture_compression_s3tc

// GL_EXT_texture_compression_s3tc_srgb

// GL_EXT_texture_filter_anisotropic

// GL_EXT_texture_format_BGRA8888

// GL_EXT_texture_storage
bool ValidateTexStorage1DEXT(const Context *context,
                             const GLenum target,
                             const GLsizei levels,
                             const GLenum internalformat,
                             const GLsizei width);
bool ValidateTexStorage2DEXT(const Context *context,
                             const TextureType targetPacked,
                             const GLsizei levels,
                             const GLenum internalformat,
                             const GLsizei width,
                             const GLsizei height);
bool ValidateTexStorage3DEXT(const Context *context,
                             const TextureType targetPacked,
                             const GLsizei levels,
                             const GLenum internalformat,
                             const GLsizei width,
                             const GLsizei height,
                             const GLsizei depth);

// GL_KHR_debug
bool ValidateDebugMessageCallbackKHR(const Context *context,
                                     const GLDEBUGPROCKHR callback,
                                     const void *userParam);
bool ValidateDebugMessageControlKHR(const Context *context,
                                    const GLenum source,
                                    const GLenum type,
                                    const GLenum severity,
                                    const GLsizei count,
                                    const GLuint *ids,
                                    const GLboolean enabled);
bool ValidateDebugMessageInsertKHR(const Context *context,
                                   const GLenum source,
                                   const GLenum type,
                                   const GLuint id,
                                   const GLenum severity,
                                   const GLsizei length,
                                   const GLchar *buf);
bool ValidateGetDebugMessageLogKHR(const Context *context,
                                   const GLuint count,
                                   const GLsizei bufSize,
                                   const GLenum *sources,
                                   const GLenum *types,
                                   const GLuint *ids,
                                   const GLenum *severities,
                                   const GLsizei *lengths,
                                   const GLchar *messageLog);
bool ValidateGetObjectLabelKHR(const Context *context,
                               const GLenum identifier,
                               const GLuint name,
                               const GLsizei bufSize,
                               const GLsizei *length,
                               const GLchar *label);
bool ValidateGetObjectPtrLabelKHR(const Context *context,
                                  const void *ptr,
                                  const GLsizei bufSize,
                                  const GLsizei *length,
                                  const GLchar *label);
bool ValidateGetPointervKHR(const Context *context, const GLenum pname, const void *const *params);
bool ValidateObjectLabelKHR(const Context *context,
                            const GLenum identifier,
                            const GLuint name,
                            const GLsizei length,
                            const GLchar *label);
bool ValidateObjectPtrLabelKHR(const Context *context,
                               const void *ptr,
                               const GLsizei length,
                               const GLchar *label);
bool ValidatePopDebugGroupKHR(const Context *context);
bool ValidatePushDebugGroupKHR(const Context *context,
                               const GLenum source,
                               const GLuint id,
                               const GLsizei length,
                               const GLchar *message);

// GL_KHR_parallel_shader_compile
bool ValidateMaxShaderCompilerThreadsKHR(const Context *context, const GLuint count);

// GL_NV_fence
bool ValidateDeleteFencesNV(const Context *context, const GLsizei n, const FenceNVID *fencesPacked);
bool ValidateFinishFenceNV(const Context *context, const FenceNVID fencePacked);
bool ValidateGenFencesNV(const Context *context, const GLsizei n, const FenceNVID *fencesPacked);
bool ValidateGetFenceivNV(const Context *context,
                          const FenceNVID fencePacked,
                          const GLenum pname,
                          const GLint *params);
bool ValidateIsFenceNV(const Context *context, const FenceNVID fencePacked);
bool ValidateSetFenceNV(const Context *context,
                        const FenceNVID fencePacked,
                        const GLenum condition);
bool ValidateTestFenceNV(const Context *context, const FenceNVID fencePacked);

// GL_OES_EGL_image
bool ValidateEGLImageTargetRenderbufferStorageOES(const Context *context,
                                                  const GLenum target,
                                                  const GLeglImageOES image);
bool ValidateEGLImageTargetTexture2DOES(const Context *context,
                                        const TextureType targetPacked,
                                        const GLeglImageOES image);

// GL_OES_compressed_ETC1_RGB8_texture

// GL_OES_depth32

// GL_OES_draw_elements_base_vertex
bool ValidateDrawElementsBaseVertexOES(const Context *context,
                                       const PrimitiveMode modePacked,
                                       const GLsizei count,
                                       const DrawElementsType typePacked,
                                       const void *indices,
                                       const GLint basevertex);
bool ValidateDrawElementsInstancedBaseVertexOES(const Context *context,
                                                const PrimitiveMode modePacked,
                                                const GLsizei count,
                                                const DrawElementsType typePacked,
                                                const void *indices,
                                                const GLsizei instancecount,
                                                const GLint basevertex);
bool ValidateDrawRangeElementsBaseVertexOES(const Context *context,
                                            const PrimitiveMode modePacked,
                                            const GLuint start,
                                            const GLuint end,
                                            const GLsizei count,
                                            const DrawElementsType typePacked,
                                            const void *indices,
                                            const GLint basevertex);

// GL_OES_draw_texture
bool ValidateDrawTexfOES(const Context *context,
                         const GLfloat x,
                         const GLfloat y,
                         const GLfloat z,
                         const GLfloat width,
                         const GLfloat height);
bool ValidateDrawTexfvOES(const Context *context, const GLfloat *coords);
bool ValidateDrawTexiOES(const Context *context,
                         const GLint x,
                         const GLint y,
                         const GLint z,
                         const GLint width,
                         const GLint height);
bool ValidateDrawTexivOES(const Context *context, const GLint *coords);
bool ValidateDrawTexsOES(const Context *context,
                         const GLshort x,
                         const GLshort y,
                         const GLshort z,
                         const GLshort width,
                         const GLshort height);
bool ValidateDrawTexsvOES(const Context *context, const GLshort *coords);
bool ValidateDrawTexxOES(const Context *context,
                         const GLfixed x,
                         const GLfixed y,
                         const GLfixed z,
                         const GLfixed width,
                         const GLfixed height);
bool ValidateDrawTexxvOES(const Context *context, const GLfixed *coords);

// GL_OES_framebuffer_object
bool ValidateBindFramebufferOES(const Context *context,
                                const GLenum target,
                                const FramebufferID framebufferPacked);
bool ValidateBindRenderbufferOES(const Context *context,
                                 const GLenum target,
                                 const RenderbufferID renderbufferPacked);
bool ValidateCheckFramebufferStatusOES(const Context *context, const GLenum target);
bool ValidateDeleteFramebuffersOES(const Context *context,
                                   const GLsizei n,
                                   const FramebufferID *framebuffersPacked);
bool ValidateDeleteRenderbuffersOES(const Context *context,
                                    const GLsizei n,
                                    const RenderbufferID *renderbuffersPacked);
bool ValidateFramebufferRenderbufferOES(const Context *context,
                                        const GLenum target,
                                        const GLenum attachment,
                                        const GLenum renderbuffertarget,
                                        const RenderbufferID renderbufferPacked);
bool ValidateFramebufferTexture2DOES(const Context *context,
                                     const GLenum target,
                                     const GLenum attachment,
                                     const TextureTarget textargetPacked,
                                     const TextureID texturePacked,
                                     const GLint level);
bool ValidateGenFramebuffersOES(const Context *context,
                                const GLsizei n,
                                const FramebufferID *framebuffersPacked);
bool ValidateGenRenderbuffersOES(const Context *context,
                                 const GLsizei n,
                                 const RenderbufferID *renderbuffersPacked);
bool ValidateGenerateMipmapOES(const Context *context, const TextureType targetPacked);
bool ValidateGetFramebufferAttachmentParameterivOES(const Context *context,
                                                    const GLenum target,
                                                    const GLenum attachment,
                                                    const GLenum pname,
                                                    const GLint *params);
bool ValidateGetRenderbufferParameterivOES(const Context *context,
                                           const GLenum target,
                                           const GLenum pname,
                                           const GLint *params);
bool ValidateIsFramebufferOES(const Context *context, const FramebufferID framebufferPacked);
bool ValidateIsRenderbufferOES(const Context *context, const RenderbufferID renderbufferPacked);
bool ValidateRenderbufferStorageOES(const Context *context,
                                    const GLenum target,
                                    const GLenum internalformat,
                                    const GLsizei width,
                                    const GLsizei height);

// GL_OES_get_program_binary
bool ValidateGetProgramBinaryOES(const Context *context,
                                 const ShaderProgramID programPacked,
                                 const GLsizei bufSize,
                                 const GLsizei *length,
                                 const GLenum *binaryFormat,
                                 const void *binary);
bool ValidateProgramBinaryOES(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLenum binaryFormat,
                              const void *binary,
                              const GLint length);

// GL_OES_mapbuffer
bool ValidateGetBufferPointervOES(const Context *context,
                                  const BufferBinding targetPacked,
                                  const GLenum pname,
                                  const void *const *params);
bool ValidateMapBufferOES(const Context *context,
                          const BufferBinding targetPacked,
                          const GLenum access);
bool ValidateUnmapBufferOES(const Context *context, const BufferBinding targetPacked);

// GL_OES_matrix_palette
bool ValidateCurrentPaletteMatrixOES(const Context *context, const GLuint matrixpaletteindex);
bool ValidateLoadPaletteFromModelViewMatrixOES(const Context *context);
bool ValidateMatrixIndexPointerOES(const Context *context,
                                   const GLint size,
                                   const GLenum type,
                                   const GLsizei stride,
                                   const void *pointer);
bool ValidateWeightPointerOES(const Context *context,
                              const GLint size,
                              const GLenum type,
                              const GLsizei stride,
                              const void *pointer);

// GL_OES_point_size_array
bool ValidatePointSizePointerOES(const Context *context,
                                 const VertexAttribType typePacked,
                                 const GLsizei stride,
                                 const void *pointer);

// GL_OES_query_matrix
bool ValidateQueryMatrixxOES(const Context *context,
                             const GLfixed *mantissa,
                             const GLint *exponent);

// GL_OES_texture_3D
bool ValidateCompressedTexImage3DOES(const Context *context,
                                     const TextureTarget targetPacked,
                                     const GLint level,
                                     const GLenum internalformat,
                                     const GLsizei width,
                                     const GLsizei height,
                                     const GLsizei depth,
                                     const GLint border,
                                     const GLsizei imageSize,
                                     const void *data);
bool ValidateCompressedTexSubImage3DOES(const Context *context,
                                        const TextureTarget targetPacked,
                                        const GLint level,
                                        const GLint xoffset,
                                        const GLint yoffset,
                                        const GLint zoffset,
                                        const GLsizei width,
                                        const GLsizei height,
                                        const GLsizei depth,
                                        const GLenum format,
                                        const GLsizei imageSize,
                                        const void *data);
bool ValidateCopyTexSubImage3DOES(const Context *context,
                                  const TextureTarget targetPacked,
                                  const GLint level,
                                  const GLint xoffset,
                                  const GLint yoffset,
                                  const GLint zoffset,
                                  const GLint x,
                                  const GLint y,
                                  const GLsizei width,
                                  const GLsizei height);
bool ValidateFramebufferTexture3DOES(const Context *context,
                                     const GLenum target,
                                     const GLenum attachment,
                                     const TextureTarget textargetPacked,
                                     const TextureID texturePacked,
                                     const GLint level,
                                     const GLint zoffset);
bool ValidateTexImage3DOES(const Context *context,
                           const TextureTarget targetPacked,
                           const GLint level,
                           const GLenum internalformat,
                           const GLsizei width,
                           const GLsizei height,
                           const GLsizei depth,
                           const GLint border,
                           const GLenum format,
                           const GLenum type,
                           const void *pixels);
bool ValidateTexSubImage3DOES(const Context *context,
                              const TextureTarget targetPacked,
                              const GLint level,
                              const GLint xoffset,
                              const GLint yoffset,
                              const GLint zoffset,
                              const GLsizei width,
                              const GLsizei height,
                              const GLsizei depth,
                              const GLenum format,
                              const GLenum type,
                              const void *pixels);

// GL_OES_texture_border_clamp
bool ValidateGetSamplerParameterIivOES(const Context *context,
                                       const SamplerID samplerPacked,
                                       const GLenum pname,
                                       const GLint *params);
bool ValidateGetSamplerParameterIuivOES(const Context *context,
                                        const SamplerID samplerPacked,
                                        const GLenum pname,
                                        const GLuint *params);
bool ValidateGetTexParameterIivOES(const Context *context,
                                   const TextureType targetPacked,
                                   const GLenum pname,
                                   const GLint *params);
bool ValidateGetTexParameterIuivOES(const Context *context,
                                    const TextureType targetPacked,
                                    const GLenum pname,
                                    const GLuint *params);
bool ValidateSamplerParameterIivOES(const Context *context,
                                    const SamplerID samplerPacked,
                                    const GLenum pname,
                                    const GLint *param);
bool ValidateSamplerParameterIuivOES(const Context *context,
                                     const SamplerID samplerPacked,
                                     const GLenum pname,
                                     const GLuint *param);
bool ValidateTexParameterIivOES(const Context *context,
                                const TextureType targetPacked,
                                const GLenum pname,
                                const GLint *params);
bool ValidateTexParameterIuivOES(const Context *context,
                                 const TextureType targetPacked,
                                 const GLenum pname,
                                 const GLuint *params);

// GL_OES_texture_cube_map
bool ValidateGetTexGenfvOES(const Context *context,
                            const GLenum coord,
                            const GLenum pname,
                            const GLfloat *params);
bool ValidateGetTexGenivOES(const Context *context,
                            const GLenum coord,
                            const GLenum pname,
                            const GLint *params);
bool ValidateGetTexGenxvOES(const Context *context,
                            const GLenum coord,
                            const GLenum pname,
                            const GLfixed *params);
bool ValidateTexGenfOES(const Context *context,
                        const GLenum coord,
                        const GLenum pname,
                        const GLfloat param);
bool ValidateTexGenfvOES(const Context *context,
                         const GLenum coord,
                         const GLenum pname,
                         const GLfloat *params);
bool ValidateTexGeniOES(const Context *context,
                        const GLenum coord,
                        const GLenum pname,
                        const GLint param);
bool ValidateTexGenivOES(const Context *context,
                         const GLenum coord,
                         const GLenum pname,
                         const GLint *params);
bool ValidateTexGenxOES(const Context *context,
                        const GLenum coord,
                        const GLenum pname,
                        const GLfixed param);
bool ValidateTexGenxvOES(const Context *context,
                         const GLenum coord,
                         const GLenum pname,
                         const GLfixed *params);

// GL_OES_texture_half_float

// GL_OES_texture_storage_multisample_2d_array
bool ValidateTexStorage3DMultisampleOES(const Context *context,
                                        const TextureType targetPacked,
                                        const GLsizei samples,
                                        const GLenum internalformat,
                                        const GLsizei width,
                                        const GLsizei height,
                                        const GLsizei depth,
                                        const GLboolean fixedsamplelocations);

// GL_OES_vertex_array_object
bool ValidateBindVertexArrayOES(const Context *context, const VertexArrayID arrayPacked);
bool ValidateDeleteVertexArraysOES(const Context *context,
                                   const GLsizei n,
                                   const VertexArrayID *arraysPacked);
bool ValidateGenVertexArraysOES(const Context *context,
                                const GLsizei n,
                                const VertexArrayID *arraysPacked);
bool ValidateIsVertexArrayOES(const Context *context, const VertexArrayID arrayPacked);

// GL_OVR_multiview
bool ValidateFramebufferTextureMultiviewOVR(const Context *context,
                                            const GLenum target,
                                            const GLenum attachment,
                                            const TextureID texturePacked,
                                            const GLint level,
                                            const GLint baseViewIndex,
                                            const GLsizei numViews);

// GL_OVR_multiview2
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_ESEXT_AUTOGEN_H_
