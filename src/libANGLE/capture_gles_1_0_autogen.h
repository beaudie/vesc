// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gles_1_0_autogen.h:
//   Capture functions for the OpenGL ES 1.0 entry points.

#ifndef LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace angle
{
struct ParamCapture;
}  // namespace angle

namespace gl
{
class Context;

// Method Captures

void CaptureAlphaFunc(Context *context, AlphaTestFunc funcPacked, GLfloat ref);
void CaptureAlphaFuncx(Context *context, AlphaTestFunc funcPacked, GLfixed ref);
void CaptureClearColorx(Context *context, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void CaptureClearDepthx(Context *context, GLfixed depth);
void CaptureClientActiveTexture(Context *context, GLenum texture);
void CaptureClipPlanef(Context *context, GLenum p, const GLfloat *eqn);
void CaptureClipPlanex(Context *context, GLenum plane, const GLfixed *equation);
void CaptureColor4f(Context *context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void CaptureColor4ub(Context *context, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void CaptureColor4x(Context *context, GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void CaptureColorPointer(Context *context,
                         GLint size,
                         VertexAttribType typePacked,
                         GLsizei stride,
                         const void *pointer);
void CaptureDepthRangex(Context *context, GLfixed n, GLfixed f);
void CaptureDisableClientState(Context *context, ClientVertexArrayType arrayPacked);
void CaptureEnableClientState(Context *context, ClientVertexArrayType arrayPacked);
void CaptureFogf(Context *context, GLenum pname, GLfloat param);
void CaptureFogfv(Context *context, GLenum pname, const GLfloat *params);
void CaptureFogx(Context *context, GLenum pname, GLfixed param);
void CaptureFogxv(Context *context, GLenum pname, const GLfixed *param);
void CaptureFrustumf(Context *context,
                     GLfloat l,
                     GLfloat r,
                     GLfloat b,
                     GLfloat t,
                     GLfloat n,
                     GLfloat f);
void CaptureFrustumx(Context *context,
                     GLfixed l,
                     GLfixed r,
                     GLfixed b,
                     GLfixed t,
                     GLfixed n,
                     GLfixed f);
void CaptureGetClipPlanef(Context *context, GLenum plane, GLfloat *equation);
void CaptureGetClipPlanex(Context *context, GLenum plane, GLfixed *equation);
void CaptureGetFixedv(Context *context, GLenum pname, GLfixed *params);
void CaptureGetLightfv(Context *context, GLenum light, LightParameter pnamePacked, GLfloat *params);
void CaptureGetLightxv(Context *context, GLenum light, LightParameter pnamePacked, GLfixed *params);
void CaptureGetMaterialfv(Context *context,
                          GLenum face,
                          MaterialParameter pnamePacked,
                          GLfloat *params);
void CaptureGetMaterialxv(Context *context,
                          GLenum face,
                          MaterialParameter pnamePacked,
                          GLfixed *params);
void CaptureGetPointerv(Context *context, GLenum pname, void **params);
void CaptureGetTexEnvfv(Context *context,
                        TextureEnvTarget targetPacked,
                        TextureEnvParameter pnamePacked,
                        GLfloat *params);
void CaptureGetTexEnviv(Context *context,
                        TextureEnvTarget targetPacked,
                        TextureEnvParameter pnamePacked,
                        GLint *params);
void CaptureGetTexEnvxv(Context *context,
                        TextureEnvTarget targetPacked,
                        TextureEnvParameter pnamePacked,
                        GLfixed *params);
void CaptureGetTexParameterxv(Context *context,
                              TextureType targetPacked,
                              GLenum pname,
                              GLfixed *params);
void CaptureLightModelf(Context *context, GLenum pname, GLfloat param);
void CaptureLightModelfv(Context *context, GLenum pname, const GLfloat *params);
void CaptureLightModelx(Context *context, GLenum pname, GLfixed param);
void CaptureLightModelxv(Context *context, GLenum pname, const GLfixed *param);
void CaptureLightf(Context *context, GLenum light, LightParameter pnamePacked, GLfloat param);
void CaptureLightfv(Context *context,
                    GLenum light,
                    LightParameter pnamePacked,
                    const GLfloat *params);
void CaptureLightx(Context *context, GLenum light, LightParameter pnamePacked, GLfixed param);
void CaptureLightxv(Context *context,
                    GLenum light,
                    LightParameter pnamePacked,
                    const GLfixed *params);
void CaptureLineWidthx(Context *context, GLfixed width);
void CaptureLoadIdentity(Context *context);
void CaptureLoadMatrixf(Context *context, const GLfloat *m);
void CaptureLoadMatrixx(Context *context, const GLfixed *m);
void CaptureLogicOp(Context *context, LogicalOperation opcodePacked);
void CaptureMaterialf(Context *context, GLenum face, MaterialParameter pnamePacked, GLfloat param);
void CaptureMaterialfv(Context *context,
                       GLenum face,
                       MaterialParameter pnamePacked,
                       const GLfloat *params);
void CaptureMaterialx(Context *context, GLenum face, MaterialParameter pnamePacked, GLfixed param);
void CaptureMaterialxv(Context *context,
                       GLenum face,
                       MaterialParameter pnamePacked,
                       const GLfixed *param);
void CaptureMatrixMode(Context *context, MatrixType modePacked);
void CaptureMultMatrixf(Context *context, const GLfloat *m);
void CaptureMultMatrixx(Context *context, const GLfixed *m);
void CaptureMultiTexCoord4f(Context *context,
                            GLenum target,
                            GLfloat s,
                            GLfloat t,
                            GLfloat r,
                            GLfloat q);
void CaptureMultiTexCoord4x(Context *context,
                            GLenum texture,
                            GLfixed s,
                            GLfixed t,
                            GLfixed r,
                            GLfixed q);
void CaptureNormal3f(Context *context, GLfloat nx, GLfloat ny, GLfloat nz);
void CaptureNormal3x(Context *context, GLfixed nx, GLfixed ny, GLfixed nz);
void CaptureNormalPointer(Context *context,
                          VertexAttribType typePacked,
                          GLsizei stride,
                          const void *pointer);
void CaptureOrthof(Context *context,
                   GLfloat l,
                   GLfloat r,
                   GLfloat b,
                   GLfloat t,
                   GLfloat n,
                   GLfloat f);
void CaptureOrthox(Context *context,
                   GLfixed l,
                   GLfixed r,
                   GLfixed b,
                   GLfixed t,
                   GLfixed n,
                   GLfixed f);
void CapturePointParameterf(Context *context, PointParameter pnamePacked, GLfloat param);
void CapturePointParameterfv(Context *context, PointParameter pnamePacked, const GLfloat *params);
void CapturePointParameterx(Context *context, PointParameter pnamePacked, GLfixed param);
void CapturePointParameterxv(Context *context, PointParameter pnamePacked, const GLfixed *params);
void CapturePointSize(Context *context, GLfloat size);
void CapturePointSizex(Context *context, GLfixed size);
void CapturePolygonOffsetx(Context *context, GLfixed factor, GLfixed units);
void CapturePopMatrix(Context *context);
void CapturePushMatrix(Context *context);
void CaptureRotatef(Context *context, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void CaptureRotatex(Context *context, GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void CaptureSampleCoveragex(Context *context, GLclampx value, GLboolean invert);
void CaptureScalef(Context *context, GLfloat x, GLfloat y, GLfloat z);
void CaptureScalex(Context *context, GLfixed x, GLfixed y, GLfixed z);
void CaptureShadeModel(Context *context, ShadingModel modePacked);
void CaptureTexCoordPointer(Context *context,
                            GLint size,
                            VertexAttribType typePacked,
                            GLsizei stride,
                            const void *pointer);
void CaptureTexEnvf(Context *context,
                    TextureEnvTarget targetPacked,
                    TextureEnvParameter pnamePacked,
                    GLfloat param);
void CaptureTexEnvfv(Context *context,
                     TextureEnvTarget targetPacked,
                     TextureEnvParameter pnamePacked,
                     const GLfloat *params);
void CaptureTexEnvi(Context *context,
                    TextureEnvTarget targetPacked,
                    TextureEnvParameter pnamePacked,
                    GLint param);
void CaptureTexEnviv(Context *context,
                     TextureEnvTarget targetPacked,
                     TextureEnvParameter pnamePacked,
                     const GLint *params);
void CaptureTexEnvx(Context *context,
                    TextureEnvTarget targetPacked,
                    TextureEnvParameter pnamePacked,
                    GLfixed param);
void CaptureTexEnvxv(Context *context,
                     TextureEnvTarget targetPacked,
                     TextureEnvParameter pnamePacked,
                     const GLfixed *params);
void CaptureTexParameterx(Context *context, TextureType targetPacked, GLenum pname, GLfixed param);
void CaptureTexParameterxv(Context *context,
                           TextureType targetPacked,
                           GLenum pname,
                           const GLfixed *params);
void CaptureTranslatef(Context *context, GLfloat x, GLfloat y, GLfloat z);
void CaptureTranslatex(Context *context, GLfixed x, GLfixed y, GLfixed z);
void CaptureVertexPointer(Context *context,
                          GLint size,
                          VertexAttribType typePacked,
                          GLsizei stride,
                          const void *pointer);

// Parameter Captures

void CaptureClipPlanef_eqn(Context *context,
                           GLenum p,
                           const GLfloat *eqn,
                           bool isCallValid,
                           angle::ParamCapture *paramCapture);
void CaptureClipPlanex_equation(Context *context,
                                GLenum plane,
                                const GLfixed *equation,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureColorPointer_pointer(Context *context,
                                 GLint size,
                                 VertexAttribType typePacked,
                                 GLsizei stride,
                                 const void *pointer,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureFogfv_params(Context *context,
                         GLenum pname,
                         const GLfloat *params,
                         bool isCallValid,
                         angle::ParamCapture *paramCapture);
void CaptureFogxv_param(Context *context,
                        GLenum pname,
                        const GLfixed *param,
                        bool isCallValid,
                        angle::ParamCapture *paramCapture);
void CaptureGetClipPlanef_equation(Context *context,
                                   GLenum plane,
                                   GLfloat *equation,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetClipPlanex_equation(Context *context,
                                   GLenum plane,
                                   GLfixed *equation,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetFixedv_params(Context *context,
                             GLenum pname,
                             GLfixed *params,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureGetLightfv_params(Context *context,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfloat *params,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureGetLightxv_params(Context *context,
                              GLenum light,
                              LightParameter pnamePacked,
                              GLfixed *params,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureGetMaterialfv_params(Context *context,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfloat *params,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetMaterialxv_params(Context *context,
                                 GLenum face,
                                 MaterialParameter pnamePacked,
                                 GLfixed *params,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetPointerv_params(Context *context,
                               GLenum pname,
                               void **params,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnvfv_params(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfloat *params,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnviv_params(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLint *params,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexEnvxv_params(Context *context,
                               TextureEnvTarget targetPacked,
                               TextureEnvParameter pnamePacked,
                               GLfixed *params,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexParameterxv_params(Context *context,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLfixed *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureLightModelfv_params(Context *context,
                                GLenum pname,
                                const GLfloat *params,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureLightModelxv_param(Context *context,
                               GLenum pname,
                               const GLfixed *param,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureLightfv_params(Context *context,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfloat *params,
                           bool isCallValid,
                           angle::ParamCapture *paramCapture);
void CaptureLightxv_params(Context *context,
                           GLenum light,
                           LightParameter pnamePacked,
                           const GLfixed *params,
                           bool isCallValid,
                           angle::ParamCapture *paramCapture);
void CaptureLoadMatrixf_m(Context *context,
                          const GLfloat *m,
                          bool isCallValid,
                          angle::ParamCapture *paramCapture);
void CaptureLoadMatrixx_m(Context *context,
                          const GLfixed *m,
                          bool isCallValid,
                          angle::ParamCapture *paramCapture);
void CaptureMaterialfv_params(Context *context,
                              GLenum face,
                              MaterialParameter pnamePacked,
                              const GLfloat *params,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureMaterialxv_param(Context *context,
                             GLenum face,
                             MaterialParameter pnamePacked,
                             const GLfixed *param,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureMultMatrixf_m(Context *context,
                          const GLfloat *m,
                          bool isCallValid,
                          angle::ParamCapture *paramCapture);
void CaptureMultMatrixx_m(Context *context,
                          const GLfixed *m,
                          bool isCallValid,
                          angle::ParamCapture *paramCapture);
void CaptureNormalPointer_pointer(Context *context,
                                  VertexAttribType typePacked,
                                  GLsizei stride,
                                  const void *pointer,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CapturePointParameterfv_params(Context *context,
                                    PointParameter pnamePacked,
                                    const GLfloat *params,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CapturePointParameterxv_params(Context *context,
                                    PointParameter pnamePacked,
                                    const GLfixed *params,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureTexCoordPointer_pointer(Context *context,
                                    GLint size,
                                    VertexAttribType typePacked,
                                    GLsizei stride,
                                    const void *pointer,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureTexEnvfv_params(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfloat *params,
                            bool isCallValid,
                            angle::ParamCapture *paramCapture);
void CaptureTexEnviv_params(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLint *params,
                            bool isCallValid,
                            angle::ParamCapture *paramCapture);
void CaptureTexEnvxv_params(Context *context,
                            TextureEnvTarget targetPacked,
                            TextureEnvParameter pnamePacked,
                            const GLfixed *params,
                            bool isCallValid,
                            angle::ParamCapture *paramCapture);
void CaptureTexParameterxv_params(Context *context,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLfixed *params,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureVertexPointer_pointer(Context *context,
                                  GLint size,
                                  VertexAttribType typePacked,
                                  GLsizei stride,
                                  const void *pointer,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GLES_1_0_AUTOGEN_H_
