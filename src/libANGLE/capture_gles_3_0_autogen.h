// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gles_3_0_autogen.h:
//   Capture functions for the OpenGL ES 3.0 entry points.

#ifndef LIBANGLE_CAPTURE_GLES_3_0_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GLES_3_0_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace angle
{
struct ParamCapture;
}  // namespace angle

namespace gl
{
class Context;

// Method Captures

void CaptureBeginQuery(Context *context, QueryType targetPacked, GLuint id);
void CaptureBeginTransformFeedback(Context *context, PrimitiveMode primitiveModePacked);
void CaptureBindBufferBase(Context *context,
                           BufferBinding targetPacked,
                           GLuint index,
                           GLuint buffer);
void CaptureBindBufferRange(Context *context,
                            BufferBinding targetPacked,
                            GLuint index,
                            GLuint buffer,
                            GLintptr offset,
                            GLsizeiptr size);
void CaptureBindSampler(Context *context, GLuint unit, GLuint sampler);
void CaptureBindTransformFeedback(Context *context, GLenum target, GLuint id);
void CaptureBindVertexArray(Context *context, GLuint array);
void CaptureBlitFramebuffer(Context *context,
                            GLint srcX0,
                            GLint srcY0,
                            GLint srcX1,
                            GLint srcY1,
                            GLint dstX0,
                            GLint dstY0,
                            GLint dstX1,
                            GLint dstY1,
                            GLbitfield mask,
                            GLenum filter);
void CaptureClearBufferfi(Context *context,
                          GLenum buffer,
                          GLint drawbuffer,
                          GLfloat depth,
                          GLint stencil);
void CaptureClearBufferfv(Context *context, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void CaptureClearBufferiv(Context *context, GLenum buffer, GLint drawbuffer, const GLint *value);
void CaptureClearBufferuiv(Context *context, GLenum buffer, GLint drawbuffer, const GLuint *value);
void CaptureClientWaitSync(Context *context, GLsync sync, GLbitfield flags, GLuint64 timeout);
void CaptureCompressedTexImage3D(Context *context,
                                 TextureTarget targetPacked,
                                 GLint level,
                                 GLenum internalformat,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth,
                                 GLint border,
                                 GLsizei imageSize,
                                 const void *data);
void CaptureCompressedTexSubImage3D(Context *context,
                                    TextureTarget targetPacked,
                                    GLint level,
                                    GLint xoffset,
                                    GLint yoffset,
                                    GLint zoffset,
                                    GLsizei width,
                                    GLsizei height,
                                    GLsizei depth,
                                    GLenum format,
                                    GLsizei imageSize,
                                    const void *data);
void CaptureCopyBufferSubData(Context *context,
                              BufferBinding readTargetPacked,
                              BufferBinding writeTargetPacked,
                              GLintptr readOffset,
                              GLintptr writeOffset,
                              GLsizeiptr size);
void CaptureCopyTexSubImage3D(Context *context,
                              TextureTarget targetPacked,
                              GLint level,
                              GLint xoffset,
                              GLint yoffset,
                              GLint zoffset,
                              GLint x,
                              GLint y,
                              GLsizei width,
                              GLsizei height);
void CaptureDeleteQueries(Context *context, GLsizei n, const GLuint *ids);
void CaptureDeleteSamplers(Context *context, GLsizei count, const GLuint *samplers);
void CaptureDeleteSync(Context *context, GLsync sync);
void CaptureDeleteTransformFeedbacks(Context *context, GLsizei n, const GLuint *ids);
void CaptureDeleteVertexArrays(Context *context, GLsizei n, const GLuint *arrays);
void CaptureDrawArraysInstanced(Context *context,
                                PrimitiveMode modePacked,
                                GLint first,
                                GLsizei count,
                                GLsizei instancecount);
void CaptureDrawBuffers(Context *context, GLsizei n, const GLenum *bufs);
void CaptureDrawElementsInstanced(Context *context,
                                  PrimitiveMode modePacked,
                                  GLsizei count,
                                  DrawElementsType typePacked,
                                  const void *indices,
                                  GLsizei instancecount);
void CaptureDrawRangeElements(Context *context,
                              PrimitiveMode modePacked,
                              GLuint start,
                              GLuint end,
                              GLsizei count,
                              DrawElementsType typePacked,
                              const void *indices);
void CaptureEndQuery(Context *context, QueryType targetPacked);
void CaptureEndTransformFeedback(Context *context);
void CaptureFenceSync(Context *context, GLenum condition, GLbitfield flags);
void CaptureFlushMappedBufferRange(Context *context,
                                   BufferBinding targetPacked,
                                   GLintptr offset,
                                   GLsizeiptr length);
void CaptureFramebufferTextureLayer(Context *context,
                                    GLenum target,
                                    GLenum attachment,
                                    GLuint texture,
                                    GLint level,
                                    GLint layer);
void CaptureGenQueries(Context *context, GLsizei n, GLuint *ids);
void CaptureGenSamplers(Context *context, GLsizei count, GLuint *samplers);
void CaptureGenTransformFeedbacks(Context *context, GLsizei n, GLuint *ids);
void CaptureGenVertexArrays(Context *context, GLsizei n, GLuint *arrays);
void CaptureGetActiveUniformBlockName(Context *context,
                                      GLuint program,
                                      GLuint uniformBlockIndex,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *uniformBlockName);
void CaptureGetActiveUniformBlockiv(Context *context,
                                    GLuint program,
                                    GLuint uniformBlockIndex,
                                    GLenum pname,
                                    GLint *params);
void CaptureGetActiveUniformsiv(Context *context,
                                GLuint program,
                                GLsizei uniformCount,
                                const GLuint *uniformIndices,
                                GLenum pname,
                                GLint *params);
void CaptureGetBufferParameteri64v(Context *context,
                                   BufferBinding targetPacked,
                                   GLenum pname,
                                   GLint64 *params);
void CaptureGetBufferPointerv(Context *context,
                              BufferBinding targetPacked,
                              GLenum pname,
                              void **params);
void CaptureGetFragDataLocation(Context *context, GLuint program, const GLchar *name);
void CaptureGetInteger64i_v(Context *context, GLenum target, GLuint index, GLint64 *data);
void CaptureGetInteger64v(Context *context, GLenum pname, GLint64 *data);
void CaptureGetIntegeri_v(Context *context, GLenum target, GLuint index, GLint *data);
void CaptureGetInternalformativ(Context *context,
                                GLenum target,
                                GLenum internalformat,
                                GLenum pname,
                                GLsizei bufSize,
                                GLint *params);
void CaptureGetProgramBinary(Context *context,
                             GLuint program,
                             GLsizei bufSize,
                             GLsizei *length,
                             GLenum *binaryFormat,
                             void *binary);
void CaptureGetQueryObjectuiv(Context *context, GLuint id, GLenum pname, GLuint *params);
void CaptureGetQueryiv(Context *context, QueryType targetPacked, GLenum pname, GLint *params);
void CaptureGetSamplerParameterfv(Context *context, GLuint sampler, GLenum pname, GLfloat *params);
void CaptureGetSamplerParameteriv(Context *context, GLuint sampler, GLenum pname, GLint *params);
void CaptureGetStringi(Context *context, GLenum name, GLuint index);
void CaptureGetSynciv(Context *context,
                      GLsync sync,
                      GLenum pname,
                      GLsizei bufSize,
                      GLsizei *length,
                      GLint *values);
void CaptureGetTransformFeedbackVarying(Context *context,
                                        GLuint program,
                                        GLuint index,
                                        GLsizei bufSize,
                                        GLsizei *length,
                                        GLsizei *size,
                                        GLenum *type,
                                        GLchar *name);
void CaptureGetUniformBlockIndex(Context *context, GLuint program, const GLchar *uniformBlockName);
void CaptureGetUniformIndices(Context *context,
                              GLuint program,
                              GLsizei uniformCount,
                              const GLchar *const *uniformNames,
                              GLuint *uniformIndices);
void CaptureGetUniformuiv(Context *context, GLuint program, GLint location, GLuint *params);
void CaptureGetVertexAttribIiv(Context *context, GLuint index, GLenum pname, GLint *params);
void CaptureGetVertexAttribIuiv(Context *context, GLuint index, GLenum pname, GLuint *params);
void CaptureInvalidateFramebuffer(Context *context,
                                  GLenum target,
                                  GLsizei numAttachments,
                                  const GLenum *attachments);
void CaptureInvalidateSubFramebuffer(Context *context,
                                     GLenum target,
                                     GLsizei numAttachments,
                                     const GLenum *attachments,
                                     GLint x,
                                     GLint y,
                                     GLsizei width,
                                     GLsizei height);
void CaptureIsQuery(Context *context, GLuint id);
void CaptureIsSampler(Context *context, GLuint sampler);
void CaptureIsSync(Context *context, GLsync sync);
void CaptureIsTransformFeedback(Context *context, GLuint id);
void CaptureIsVertexArray(Context *context, GLuint array);
void CaptureMapBufferRange(Context *context,
                           BufferBinding targetPacked,
                           GLintptr offset,
                           GLsizeiptr length,
                           GLbitfield access);
void CapturePauseTransformFeedback(Context *context);
void CaptureProgramBinary(Context *context,
                          GLuint program,
                          GLenum binaryFormat,
                          const void *binary,
                          GLsizei length);
void CaptureProgramParameteri(Context *context, GLuint program, GLenum pname, GLint value);
void CaptureReadBuffer(Context *context, GLenum src);
void CaptureRenderbufferStorageMultisample(Context *context,
                                           GLenum target,
                                           GLsizei samples,
                                           GLenum internalformat,
                                           GLsizei width,
                                           GLsizei height);
void CaptureResumeTransformFeedback(Context *context);
void CaptureSamplerParameterf(Context *context, GLuint sampler, GLenum pname, GLfloat param);
void CaptureSamplerParameterfv(Context *context,
                               GLuint sampler,
                               GLenum pname,
                               const GLfloat *param);
void CaptureSamplerParameteri(Context *context, GLuint sampler, GLenum pname, GLint param);
void CaptureSamplerParameteriv(Context *context, GLuint sampler, GLenum pname, const GLint *param);
void CaptureTexImage3D(Context *context,
                       TextureTarget targetPacked,
                       GLint level,
                       GLint internalformat,
                       GLsizei width,
                       GLsizei height,
                       GLsizei depth,
                       GLint border,
                       GLenum format,
                       GLenum type,
                       const void *pixels);
void CaptureTexStorage2D(Context *context,
                         TextureType targetPacked,
                         GLsizei levels,
                         GLenum internalformat,
                         GLsizei width,
                         GLsizei height);
void CaptureTexStorage3D(Context *context,
                         TextureType targetPacked,
                         GLsizei levels,
                         GLenum internalformat,
                         GLsizei width,
                         GLsizei height,
                         GLsizei depth);
void CaptureTexSubImage3D(Context *context,
                          TextureTarget targetPacked,
                          GLint level,
                          GLint xoffset,
                          GLint yoffset,
                          GLint zoffset,
                          GLsizei width,
                          GLsizei height,
                          GLsizei depth,
                          GLenum format,
                          GLenum type,
                          const void *pixels);
void CaptureTransformFeedbackVaryings(Context *context,
                                      GLuint program,
                                      GLsizei count,
                                      const GLchar *const *varyings,
                                      GLenum bufferMode);
void CaptureUniform1ui(Context *context, GLint location, GLuint v0);
void CaptureUniform1uiv(Context *context, GLint location, GLsizei count, const GLuint *value);
void CaptureUniform2ui(Context *context, GLint location, GLuint v0, GLuint v1);
void CaptureUniform2uiv(Context *context, GLint location, GLsizei count, const GLuint *value);
void CaptureUniform3ui(Context *context, GLint location, GLuint v0, GLuint v1, GLuint v2);
void CaptureUniform3uiv(Context *context, GLint location, GLsizei count, const GLuint *value);
void CaptureUniform4ui(Context *context,
                       GLint location,
                       GLuint v0,
                       GLuint v1,
                       GLuint v2,
                       GLuint v3);
void CaptureUniform4uiv(Context *context, GLint location, GLsizei count, const GLuint *value);
void CaptureUniformBlockBinding(Context *context,
                                GLuint program,
                                GLuint uniformBlockIndex,
                                GLuint uniformBlockBinding);
void CaptureUniformMatrix2x3fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUniformMatrix2x4fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUniformMatrix3x2fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUniformMatrix3x4fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUniformMatrix4x2fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUniformMatrix4x3fv(Context *context,
                               GLint location,
                               GLsizei count,
                               GLboolean transpose,
                               const GLfloat *value);
void CaptureUnmapBuffer(Context *context, BufferBinding targetPacked);
void CaptureVertexAttribDivisor(Context *context, GLuint index, GLuint divisor);
void CaptureVertexAttribI4i(Context *context, GLuint index, GLint x, GLint y, GLint z, GLint w);
void CaptureVertexAttribI4iv(Context *context, GLuint index, const GLint *v);
void CaptureVertexAttribI4ui(Context *context,
                             GLuint index,
                             GLuint x,
                             GLuint y,
                             GLuint z,
                             GLuint w);
void CaptureVertexAttribI4uiv(Context *context, GLuint index, const GLuint *v);
void CaptureVertexAttribIPointer(Context *context,
                                 GLuint index,
                                 GLint size,
                                 VertexAttribType typePacked,
                                 GLsizei stride,
                                 const void *pointer);
void CaptureWaitSync(Context *context, GLsync sync, GLbitfield flags, GLuint64 timeout);

// Parameter Captures

void CaptureClearBufferfv_value(Context *context,
                                GLenum buffer,
                                GLint drawbuffer,
                                const GLfloat *value,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureClearBufferiv_value(Context *context,
                                GLenum buffer,
                                GLint drawbuffer,
                                const GLint *value,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureClearBufferuiv_value(Context *context,
                                 GLenum buffer,
                                 GLint drawbuffer,
                                 const GLuint *value,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureCompressedTexImage3D_data(Context *context,
                                      TextureTarget targetPacked,
                                      GLint level,
                                      GLenum internalformat,
                                      GLsizei width,
                                      GLsizei height,
                                      GLsizei depth,
                                      GLint border,
                                      GLsizei imageSize,
                                      const void *data,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureCompressedTexSubImage3D_data(Context *context,
                                         TextureTarget targetPacked,
                                         GLint level,
                                         GLint xoffset,
                                         GLint yoffset,
                                         GLint zoffset,
                                         GLsizei width,
                                         GLsizei height,
                                         GLsizei depth,
                                         GLenum format,
                                         GLsizei imageSize,
                                         const void *data,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureDeleteQueries_ids(Context *context,
                              GLsizei n,
                              const GLuint *ids,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureDeleteSamplers_samplers(Context *context,
                                    GLsizei count,
                                    const GLuint *samplers,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureDeleteTransformFeedbacks_ids(Context *context,
                                         GLsizei n,
                                         const GLuint *ids,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureDeleteVertexArrays_arrays(Context *context,
                                      GLsizei n,
                                      const GLuint *arrays,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureDrawBuffers_bufs(Context *context,
                             GLsizei n,
                             const GLenum *bufs,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureDrawElementsInstanced_indices(Context *context,
                                          PrimitiveMode modePacked,
                                          GLsizei count,
                                          DrawElementsType typePacked,
                                          const void *indices,
                                          GLsizei instancecount,
                                          bool isCallValid,
                                          angle::ParamCapture *paramCapture);
void CaptureDrawRangeElements_indices(Context *context,
                                      PrimitiveMode modePacked,
                                      GLuint start,
                                      GLuint end,
                                      GLsizei count,
                                      DrawElementsType typePacked,
                                      const void *indices,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureGenQueries_ids(Context *context,
                           GLsizei n,
                           GLuint *ids,
                           bool isCallValid,
                           angle::ParamCapture *paramCapture);
void CaptureGenSamplers_samplers(Context *context,
                                 GLsizei count,
                                 GLuint *samplers,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGenTransformFeedbacks_ids(Context *context,
                                      GLsizei n,
                                      GLuint *ids,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureGenVertexArrays_arrays(Context *context,
                                   GLsizei n,
                                   GLuint *arrays,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformBlockName_length(Context *context,
                                             GLuint program,
                                             GLuint uniformBlockIndex,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLchar *uniformBlockName,
                                             bool isCallValid,
                                             angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformBlockName_uniformBlockName(Context *context,
                                                       GLuint program,
                                                       GLuint uniformBlockIndex,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       GLchar *uniformBlockName,
                                                       bool isCallValid,
                                                       angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformBlockiv_params(Context *context,
                                           GLuint program,
                                           GLuint uniformBlockIndex,
                                           GLenum pname,
                                           GLint *params,
                                           bool isCallValid,
                                           angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformsiv_uniformIndices(Context *context,
                                               GLuint program,
                                               GLsizei uniformCount,
                                               const GLuint *uniformIndices,
                                               GLenum pname,
                                               GLint *params,
                                               bool isCallValid,
                                               angle::ParamCapture *paramCapture);
void CaptureGetActiveUniformsiv_params(Context *context,
                                       GLuint program,
                                       GLsizei uniformCount,
                                       const GLuint *uniformIndices,
                                       GLenum pname,
                                       GLint *params,
                                       bool isCallValid,
                                       angle::ParamCapture *paramCapture);
void CaptureGetBufferParameteri64v_params(Context *context,
                                          BufferBinding targetPacked,
                                          GLenum pname,
                                          GLint64 *params,
                                          bool isCallValid,
                                          angle::ParamCapture *paramCapture);
void CaptureGetBufferPointerv_params(Context *context,
                                     BufferBinding targetPacked,
                                     GLenum pname,
                                     void **params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetFragDataLocation_name(Context *context,
                                     GLuint program,
                                     const GLchar *name,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetInteger64i_v_data(Context *context,
                                 GLenum target,
                                 GLuint index,
                                 GLint64 *data,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetInteger64v_data(Context *context,
                               GLenum pname,
                               GLint64 *data,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetIntegeri_v_data(Context *context,
                               GLenum target,
                               GLuint index,
                               GLint *data,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetInternalformativ_params(Context *context,
                                       GLenum target,
                                       GLenum internalformat,
                                       GLenum pname,
                                       GLsizei bufSize,
                                       GLint *params,
                                       bool isCallValid,
                                       angle::ParamCapture *paramCapture);
void CaptureGetProgramBinary_length(Context *context,
                                    GLuint program,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLenum *binaryFormat,
                                    void *binary,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureGetProgramBinary_binaryFormat(Context *context,
                                          GLuint program,
                                          GLsizei bufSize,
                                          GLsizei *length,
                                          GLenum *binaryFormat,
                                          void *binary,
                                          bool isCallValid,
                                          angle::ParamCapture *paramCapture);
void CaptureGetProgramBinary_binary(Context *context,
                                    GLuint program,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLenum *binaryFormat,
                                    void *binary,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureGetQueryObjectuiv_params(Context *context,
                                     GLuint id,
                                     GLenum pname,
                                     GLuint *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetQueryiv_params(Context *context,
                              QueryType targetPacked,
                              GLenum pname,
                              GLint *params,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureGetSamplerParameterfv_params(Context *context,
                                         GLuint sampler,
                                         GLenum pname,
                                         GLfloat *params,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureGetSamplerParameteriv_params(Context *context,
                                         GLuint sampler,
                                         GLenum pname,
                                         GLint *params,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureGetSynciv_length(Context *context,
                             GLsync sync,
                             GLenum pname,
                             GLsizei bufSize,
                             GLsizei *length,
                             GLint *values,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureGetSynciv_values(Context *context,
                             GLsync sync,
                             GLenum pname,
                             GLsizei bufSize,
                             GLsizei *length,
                             GLint *values,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureGetTransformFeedbackVarying_length(Context *context,
                                               GLuint program,
                                               GLuint index,
                                               GLsizei bufSize,
                                               GLsizei *length,
                                               GLsizei *size,
                                               GLenum *type,
                                               GLchar *name,
                                               bool isCallValid,
                                               angle::ParamCapture *paramCapture);
void CaptureGetTransformFeedbackVarying_size(Context *context,
                                             GLuint program,
                                             GLuint index,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLsizei *size,
                                             GLenum *type,
                                             GLchar *name,
                                             bool isCallValid,
                                             angle::ParamCapture *paramCapture);
void CaptureGetTransformFeedbackVarying_type(Context *context,
                                             GLuint program,
                                             GLuint index,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLsizei *size,
                                             GLenum *type,
                                             GLchar *name,
                                             bool isCallValid,
                                             angle::ParamCapture *paramCapture);
void CaptureGetTransformFeedbackVarying_name(Context *context,
                                             GLuint program,
                                             GLuint index,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLsizei *size,
                                             GLenum *type,
                                             GLchar *name,
                                             bool isCallValid,
                                             angle::ParamCapture *paramCapture);
void CaptureGetUniformBlockIndex_uniformBlockName(Context *context,
                                                  GLuint program,
                                                  const GLchar *uniformBlockName,
                                                  bool isCallValid,
                                                  angle::ParamCapture *paramCapture);
void CaptureGetUniformIndices_uniformNames(Context *context,
                                           GLuint program,
                                           GLsizei uniformCount,
                                           const GLchar *const *uniformNames,
                                           GLuint *uniformIndices,
                                           bool isCallValid,
                                           angle::ParamCapture *paramCapture);
void CaptureGetUniformIndices_uniformIndices(Context *context,
                                             GLuint program,
                                             GLsizei uniformCount,
                                             const GLchar *const *uniformNames,
                                             GLuint *uniformIndices,
                                             bool isCallValid,
                                             angle::ParamCapture *paramCapture);
void CaptureGetUniformuiv_params(Context *context,
                                 GLuint program,
                                 GLint location,
                                 GLuint *params,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribIiv_params(Context *context,
                                      GLuint index,
                                      GLenum pname,
                                      GLint *params,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribIuiv_params(Context *context,
                                       GLuint index,
                                       GLenum pname,
                                       GLuint *params,
                                       bool isCallValid,
                                       angle::ParamCapture *paramCapture);
void CaptureInvalidateFramebuffer_attachments(Context *context,
                                              GLenum target,
                                              GLsizei numAttachments,
                                              const GLenum *attachments,
                                              bool isCallValid,
                                              angle::ParamCapture *paramCapture);
void CaptureInvalidateSubFramebuffer_attachments(Context *context,
                                                 GLenum target,
                                                 GLsizei numAttachments,
                                                 const GLenum *attachments,
                                                 GLint x,
                                                 GLint y,
                                                 GLsizei width,
                                                 GLsizei height,
                                                 bool isCallValid,
                                                 angle::ParamCapture *paramCapture);
void CaptureProgramBinary_binary(Context *context,
                                 GLuint program,
                                 GLenum binaryFormat,
                                 const void *binary,
                                 GLsizei length,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureSamplerParameterfv_param(Context *context,
                                     GLuint sampler,
                                     GLenum pname,
                                     const GLfloat *param,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureSamplerParameteriv_param(Context *context,
                                     GLuint sampler,
                                     GLenum pname,
                                     const GLint *param,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureTexImage3D_pixels(Context *context,
                              TextureTarget targetPacked,
                              GLint level,
                              GLint internalformat,
                              GLsizei width,
                              GLsizei height,
                              GLsizei depth,
                              GLint border,
                              GLenum format,
                              GLenum type,
                              const void *pixels,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureTexSubImage3D_pixels(Context *context,
                                 TextureTarget targetPacked,
                                 GLint level,
                                 GLint xoffset,
                                 GLint yoffset,
                                 GLint zoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth,
                                 GLenum format,
                                 GLenum type,
                                 const void *pixels,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureTransformFeedbackVaryings_varyings(Context *context,
                                               GLuint program,
                                               GLsizei count,
                                               const GLchar *const *varyings,
                                               GLenum bufferMode,
                                               bool isCallValid,
                                               angle::ParamCapture *paramCapture);
void CaptureUniform1uiv_value(Context *context,
                              GLint location,
                              GLsizei count,
                              const GLuint *value,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureUniform2uiv_value(Context *context,
                              GLint location,
                              GLsizei count,
                              const GLuint *value,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureUniform3uiv_value(Context *context,
                              GLint location,
                              GLsizei count,
                              const GLuint *value,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureUniform4uiv_value(Context *context,
                              GLint location,
                              GLsizei count,
                              const GLuint *value,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureUniformMatrix2x3fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureUniformMatrix2x4fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureUniformMatrix3x2fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureUniformMatrix3x4fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureUniformMatrix4x2fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureUniformMatrix4x3fv_value(Context *context,
                                     GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4iv_v(Context *context,
                               GLuint index,
                               const GLint *v,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureVertexAttribI4uiv_v(Context *context,
                                GLuint index,
                                const GLuint *v,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureVertexAttribIPointer_pointer(Context *context,
                                         GLuint index,
                                         GLint size,
                                         VertexAttribType typePacked,
                                         GLsizei stride,
                                         const void *pointer,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GLES_3_0_AUTOGEN_H_
