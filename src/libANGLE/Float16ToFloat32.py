# Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#

# This script generates a function that converts 16-bit precision floating
# point numbers to 32-bit.
# It is based on ftp://ftp.fox-toolkit.org/pub/fasthalffloatconversion.pdf.

import sys

def convertMantissa(i):
    if i == 0:
        return 0
    elif i < 1024:
        m = i << 13
        e = 0
        while not (m & 0x00800000):
            e -= 0x00800000
            m = m << 1
        m &= ~0x00800000
        e += 0x38800000
        return m | e
    else:
        return 0x38000000 + ((i - 1024) << 13)

def convertExponent(i):
    if i == 0:
        return 0
    elif i in range(1, 31):
        return i << 23
    elif i == 31:
        return 0x47800000
    elif i == 32:
        return 0x80000000
    elif i in range(33, 63):
        return 0x80000000 + ((i - 32) << 23)
    else:
        return 0xC7800000

def convertOffset(i):
    if i == 0 or i == 32:
        return 0
    else:
        return 1024

def generateConversionFile(path):
    output = open(path, 'w')

    output.write("//\n")
    output.write("// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.\n")
    output.write("// Use of this source code is governed by a BSD-style license that can be\n")
    output.write("// found in the LICENSE file.\n")
    output.write("//\n")
    output.write("\n")
    output.write("// This file is automatically generated.\n")
    output.write("\n")
    output.write("namespace gl\n")
    output.write("{\n")
    output.write("\n")

    output.write("const static unsigned g_mantissa[2048] =\n")
    output.write("{\n")
    for i in range(0, 2048):
        output.write("    %#010x,\n" % convertMantissa(i))
    output.write("};\n")
    output.write("\n")

    output.write("const static unsigned g_exponent[64] =\n")
    output.write("{\n")
    for i in range(0, 64):
        output.write("    %#010x,\n" % convertExponent(i))
    output.write("};\n")
    output.write("\n")

    output.write("const static unsigned g_offset[64] =\n")
    output.write("{\n")
    for i in range(0, 64):
        output.write("    %#010x,\n" % convertOffset(i))
    output.write("};\n")
    output.write("\n")

    output.write("float float16ToFloat32(unsigned short h)\n")
    output.write("{\n")
    output.write("    unsigned i32 = g_mantissa[g_offset[h >> 10] + (h & 0x3ff)] + g_exponent[h >> 10];\n")
    output.write("    return *((float*)(&i32));\n")
    output.write("}\n")
    output.write("\n")
    output.write("}\n")
    output.close()
    return 0

if __name__ == '__main__':
    args = sys.argv[1:]
    sys.exit(generateConversionFile(args[0]))
