// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationES3_autogen.h:
//   Validation functions for the OpenGL ES 3.0 entry points.

#ifndef LIBANGLE_VALIDATION_ES3_AUTOGEN_H_
#define LIBANGLE_VALIDATION_ES3_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateBeginQuery(const Context *context,
                        const QueryType targetPacked,
                        const QueryID idPacked);
bool ValidateBeginTransformFeedback(const Context *context,
                                    const PrimitiveMode primitiveModePacked);
bool ValidateBindBufferBase(const Context *context,
                            const BufferBinding targetPacked,
                            const GLuint index,
                            const BufferID bufferPacked);
bool ValidateBindBufferRange(const Context *context,
                             const BufferBinding targetPacked,
                             const GLuint index,
                             const BufferID bufferPacked,
                             const GLintptr offset,
                             const GLsizeiptr size);
bool ValidateBindSampler(const Context *context, const GLuint unit, const SamplerID samplerPacked);
bool ValidateBindTransformFeedback(const Context *context,
                                   const GLenum target,
                                   const TransformFeedbackID idPacked);
bool ValidateBindVertexArray(const Context *context, const VertexArrayID arrayPacked);
bool ValidateBlitFramebuffer(const Context *context,
                             const GLint srcX0,
                             const GLint srcY0,
                             const GLint srcX1,
                             const GLint srcY1,
                             const GLint dstX0,
                             const GLint dstY0,
                             const GLint dstX1,
                             const GLint dstY1,
                             const GLbitfield mask,
                             const GLenum filter);
bool ValidateClearBufferfi(const Context *context,
                           const GLenum buffer,
                           const GLint drawbuffer,
                           const GLfloat depth,
                           const GLint stencil);
bool ValidateClearBufferfv(const Context *context,
                           const GLenum buffer,
                           const GLint drawbuffer,
                           const GLfloat *value);
bool ValidateClearBufferiv(const Context *context,
                           const GLenum buffer,
                           const GLint drawbuffer,
                           const GLint *value);
bool ValidateClearBufferuiv(const Context *context,
                            const GLenum buffer,
                            const GLint drawbuffer,
                            const GLuint *value);
bool ValidateClientWaitSync(const Context *context,
                            const GLsync sync,
                            const GLbitfield flags,
                            const GLuint64 timeout);
bool ValidateCompressedTexImage3D(const Context *context,
                                  const TextureTarget targetPacked,
                                  const GLint level,
                                  const GLenum internalformat,
                                  const GLsizei width,
                                  const GLsizei height,
                                  const GLsizei depth,
                                  const GLint border,
                                  const GLsizei imageSize,
                                  const void *data);
bool ValidateCompressedTexSubImage3D(const Context *context,
                                     const TextureTarget targetPacked,
                                     const GLint level,
                                     const GLint xoffset,
                                     const GLint yoffset,
                                     const GLint zoffset,
                                     const GLsizei width,
                                     const GLsizei height,
                                     const GLsizei depth,
                                     const GLenum format,
                                     const GLsizei imageSize,
                                     const void *data);
bool ValidateCopyBufferSubData(const Context *context,
                               const BufferBinding readTargetPacked,
                               const BufferBinding writeTargetPacked,
                               const GLintptr readOffset,
                               const GLintptr writeOffset,
                               const GLsizeiptr size);
bool ValidateCopyTexSubImage3D(const Context *context,
                               const TextureTarget targetPacked,
                               const GLint level,
                               const GLint xoffset,
                               const GLint yoffset,
                               const GLint zoffset,
                               const GLint x,
                               const GLint y,
                               const GLsizei width,
                               const GLsizei height);
bool ValidateDeleteQueries(const Context *context, const GLsizei n, const QueryID *idsPacked);
bool ValidateDeleteSamplers(const Context *context,
                            const GLsizei count,
                            const SamplerID *samplersPacked);
bool ValidateDeleteSync(const Context *context, const GLsync sync);
bool ValidateDeleteTransformFeedbacks(const Context *context,
                                      const GLsizei n,
                                      const TransformFeedbackID *idsPacked);
bool ValidateDeleteVertexArrays(const Context *context,
                                const GLsizei n,
                                const VertexArrayID *arraysPacked);
bool ValidateDrawArraysInstanced(const Context *context,
                                 const PrimitiveMode modePacked,
                                 const GLint first,
                                 const GLsizei count,
                                 const GLsizei instancecount);
bool ValidateDrawBuffers(const Context *context, const GLsizei n, const GLenum *bufs);
bool ValidateDrawElementsInstanced(const Context *context,
                                   const PrimitiveMode modePacked,
                                   const GLsizei count,
                                   const DrawElementsType typePacked,
                                   const void *indices,
                                   const GLsizei instancecount);
bool ValidateDrawRangeElements(const Context *context,
                               const PrimitiveMode modePacked,
                               const GLuint start,
                               const GLuint end,
                               const GLsizei count,
                               const DrawElementsType typePacked,
                               const void *indices);
bool ValidateEndQuery(const Context *context, const QueryType targetPacked);
bool ValidateEndTransformFeedback(const Context *context);
bool ValidateFenceSync(const Context *context, const GLenum condition, const GLbitfield flags);
bool ValidateFlushMappedBufferRange(const Context *context,
                                    const BufferBinding targetPacked,
                                    const GLintptr offset,
                                    const GLsizeiptr length);
bool ValidateFramebufferTextureLayer(const Context *context,
                                     const GLenum target,
                                     const GLenum attachment,
                                     const TextureID texturePacked,
                                     const GLint level,
                                     const GLint layer);
bool ValidateGenQueries(const Context *context, const GLsizei n, const QueryID *idsPacked);
bool ValidateGenSamplers(const Context *context,
                         const GLsizei count,
                         const SamplerID *samplersPacked);
bool ValidateGenTransformFeedbacks(const Context *context,
                                   const GLsizei n,
                                   const TransformFeedbackID *idsPacked);
bool ValidateGenVertexArrays(const Context *context,
                             const GLsizei n,
                             const VertexArrayID *arraysPacked);
bool ValidateGetActiveUniformBlockName(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLuint uniformBlockIndex,
                                       const GLsizei bufSize,
                                       const GLsizei *length,
                                       const GLchar *uniformBlockName);
bool ValidateGetActiveUniformBlockiv(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLuint uniformBlockIndex,
                                     const GLenum pname,
                                     const GLint *params);
bool ValidateGetActiveUniformsiv(const Context *context,
                                 const ShaderProgramID programPacked,
                                 const GLsizei uniformCount,
                                 const GLuint *uniformIndices,
                                 const GLenum pname,
                                 const GLint *params);
bool ValidateGetBufferParameteri64v(const Context *context,
                                    const BufferBinding targetPacked,
                                    const GLenum pname,
                                    const GLint64 *params);
bool ValidateGetBufferPointerv(const Context *context,
                               const BufferBinding targetPacked,
                               const GLenum pname,
                               const void *const *params);
bool ValidateGetFragDataLocation(const Context *context,
                                 const ShaderProgramID programPacked,
                                 const GLchar *name);
bool ValidateGetInteger64i_v(const Context *context,
                             const GLenum target,
                             const GLuint index,
                             const GLint64 *data);
bool ValidateGetInteger64v(const Context *context, const GLenum pname, const GLint64 *data);
bool ValidateGetIntegeri_v(const Context *context,
                           const GLenum target,
                           const GLuint index,
                           const GLint *data);
bool ValidateGetInternalformativ(const Context *context,
                                 const GLenum target,
                                 const GLenum internalformat,
                                 const GLenum pname,
                                 const GLsizei bufSize,
                                 const GLint *params);
bool ValidateGetProgramBinary(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLsizei bufSize,
                              const GLsizei *length,
                              const GLenum *binaryFormat,
                              const void *binary);
bool ValidateGetQueryObjectuiv(const Context *context,
                               const QueryID idPacked,
                               const GLenum pname,
                               const GLuint *params);
bool ValidateGetQueryiv(const Context *context,
                        const QueryType targetPacked,
                        const GLenum pname,
                        const GLint *params);
bool ValidateGetSamplerParameterfv(const Context *context,
                                   const SamplerID samplerPacked,
                                   const GLenum pname,
                                   const GLfloat *params);
bool ValidateGetSamplerParameteriv(const Context *context,
                                   const SamplerID samplerPacked,
                                   const GLenum pname,
                                   const GLint *params);
bool ValidateGetStringi(const Context *context, const GLenum name, const GLuint index);
bool ValidateGetSynciv(const Context *context,
                       const GLsync sync,
                       const GLenum pname,
                       const GLsizei bufSize,
                       const GLsizei *length,
                       const GLint *values);
bool ValidateGetTransformFeedbackVarying(const Context *context,
                                         const ShaderProgramID programPacked,
                                         const GLuint index,
                                         const GLsizei bufSize,
                                         const GLsizei *length,
                                         const GLsizei *size,
                                         const GLenum *type,
                                         const GLchar *name);
bool ValidateGetUniformBlockIndex(const Context *context,
                                  const ShaderProgramID programPacked,
                                  const GLchar *uniformBlockName);
bool ValidateGetUniformIndices(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLsizei uniformCount,
                               const GLchar *const *uniformNames,
                               const GLuint *uniformIndices);
bool ValidateGetUniformuiv(const Context *context,
                           const ShaderProgramID programPacked,
                           const GLint location,
                           const GLuint *params);
bool ValidateGetVertexAttribIiv(const Context *context,
                                const GLuint index,
                                const GLenum pname,
                                const GLint *params);
bool ValidateGetVertexAttribIuiv(const Context *context,
                                 const GLuint index,
                                 const GLenum pname,
                                 const GLuint *params);
bool ValidateInvalidateFramebuffer(const Context *context,
                                   const GLenum target,
                                   const GLsizei numAttachments,
                                   const GLenum *attachments);
bool ValidateInvalidateSubFramebuffer(const Context *context,
                                      const GLenum target,
                                      const GLsizei numAttachments,
                                      const GLenum *attachments,
                                      const GLint x,
                                      const GLint y,
                                      const GLsizei width,
                                      const GLsizei height);
bool ValidateIsQuery(const Context *context, const QueryID idPacked);
bool ValidateIsSampler(const Context *context, const SamplerID samplerPacked);
bool ValidateIsSync(const Context *context, const GLsync sync);
bool ValidateIsTransformFeedback(const Context *context, const TransformFeedbackID idPacked);
bool ValidateIsVertexArray(const Context *context, const VertexArrayID arrayPacked);
bool ValidateMapBufferRange(const Context *context,
                            const BufferBinding targetPacked,
                            const GLintptr offset,
                            const GLsizeiptr length,
                            const GLbitfield access);
bool ValidatePauseTransformFeedback(const Context *context);
bool ValidateProgramBinary(const Context *context,
                           const ShaderProgramID programPacked,
                           const GLenum binaryFormat,
                           const void *binary,
                           const GLsizei length);
bool ValidateProgramParameteri(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLenum pname,
                               const GLint value);
bool ValidateReadBuffer(const Context *context, const GLenum src);
bool ValidateRenderbufferStorageMultisample(const Context *context,
                                            const GLenum target,
                                            const GLsizei samples,
                                            const GLenum internalformat,
                                            const GLsizei width,
                                            const GLsizei height);
bool ValidateResumeTransformFeedback(const Context *context);
bool ValidateSamplerParameterf(const Context *context,
                               const SamplerID samplerPacked,
                               const GLenum pname,
                               const GLfloat param);
bool ValidateSamplerParameterfv(const Context *context,
                                const SamplerID samplerPacked,
                                const GLenum pname,
                                const GLfloat *param);
bool ValidateSamplerParameteri(const Context *context,
                               const SamplerID samplerPacked,
                               const GLenum pname,
                               const GLint param);
bool ValidateSamplerParameteriv(const Context *context,
                                const SamplerID samplerPacked,
                                const GLenum pname,
                                const GLint *param);
bool ValidateTexImage3D(const Context *context,
                        const TextureTarget targetPacked,
                        const GLint level,
                        const GLint internalformat,
                        const GLsizei width,
                        const GLsizei height,
                        const GLsizei depth,
                        const GLint border,
                        const GLenum format,
                        const GLenum type,
                        const void *pixels);
bool ValidateTexStorage2D(const Context *context,
                          const TextureType targetPacked,
                          const GLsizei levels,
                          const GLenum internalformat,
                          const GLsizei width,
                          const GLsizei height);
bool ValidateTexStorage3D(const Context *context,
                          const TextureType targetPacked,
                          const GLsizei levels,
                          const GLenum internalformat,
                          const GLsizei width,
                          const GLsizei height,
                          const GLsizei depth);
bool ValidateTexSubImage3D(const Context *context,
                           const TextureTarget targetPacked,
                           const GLint level,
                           const GLint xoffset,
                           const GLint yoffset,
                           const GLint zoffset,
                           const GLsizei width,
                           const GLsizei height,
                           const GLsizei depth,
                           const GLenum format,
                           const GLenum type,
                           const void *pixels);
bool ValidateTransformFeedbackVaryings(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLsizei count,
                                       const GLchar *const *varyings,
                                       const GLenum bufferMode);
bool ValidateUniform1ui(const Context *context, const GLint location, const GLuint v0);
bool ValidateUniform1uiv(const Context *context,
                         const GLint location,
                         const GLsizei count,
                         const GLuint *value);
bool ValidateUniform2ui(const Context *context,
                        const GLint location,
                        const GLuint v0,
                        const GLuint v1);
bool ValidateUniform2uiv(const Context *context,
                         const GLint location,
                         const GLsizei count,
                         const GLuint *value);
bool ValidateUniform3ui(const Context *context,
                        const GLint location,
                        const GLuint v0,
                        const GLuint v1,
                        const GLuint v2);
bool ValidateUniform3uiv(const Context *context,
                         const GLint location,
                         const GLsizei count,
                         const GLuint *value);
bool ValidateUniform4ui(const Context *context,
                        const GLint location,
                        const GLuint v0,
                        const GLuint v1,
                        const GLuint v2,
                        const GLuint v3);
bool ValidateUniform4uiv(const Context *context,
                         const GLint location,
                         const GLsizei count,
                         const GLuint *value);
bool ValidateUniformBlockBinding(const Context *context,
                                 const ShaderProgramID programPacked,
                                 const GLuint uniformBlockIndex,
                                 const GLuint uniformBlockBinding);
bool ValidateUniformMatrix2x3fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUniformMatrix2x4fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUniformMatrix3x2fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUniformMatrix3x4fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUniformMatrix4x2fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUniformMatrix4x3fv(const Context *context,
                                const GLint location,
                                const GLsizei count,
                                const GLboolean transpose,
                                const GLfloat *value);
bool ValidateUnmapBuffer(const Context *context, const BufferBinding targetPacked);
bool ValidateVertexAttribDivisor(const Context *context, const GLuint index, const GLuint divisor);
bool ValidateVertexAttribI4i(const Context *context,
                             const GLuint index,
                             const GLint x,
                             const GLint y,
                             const GLint z,
                             const GLint w);
bool ValidateVertexAttribI4iv(const Context *context, const GLuint index, const GLint *v);
bool ValidateVertexAttribI4ui(const Context *context,
                              const GLuint index,
                              const GLuint x,
                              const GLuint y,
                              const GLuint z,
                              const GLuint w);
bool ValidateVertexAttribI4uiv(const Context *context, const GLuint index, const GLuint *v);
bool ValidateVertexAttribIPointer(const Context *context,
                                  const GLuint index,
                                  const GLint size,
                                  const VertexAttribType typePacked,
                                  const GLsizei stride,
                                  const void *pointer);
bool ValidateWaitSync(const Context *context,
                      const GLsync sync,
                      const GLbitfield flags,
                      const GLuint64 timeout);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_ES3_AUTOGEN_H_
