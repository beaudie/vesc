// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and wgl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationGL3_autogen.h:
//   Validation functions for the OpenGL 3.0 entry points.

#ifndef LIBANGLE_VALIDATION_GL3_AUTOGEN_H_
#define LIBANGLE_VALIDATION_GL3_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateBeginConditionalRender(const Context *context, const GLuint id, const GLenum mode);
bool ValidateBindFragDataLocation(const Context *context,
                                  const ShaderProgramID programPacked,
                                  const GLuint color,
                                  const GLchar *name);
bool ValidateClampColor(const Context *context, const GLenum target, const GLenum clamp);
bool ValidateEndConditionalRender(const Context *context);
bool ValidateFramebufferTexture1D(const Context *context,
                                  const GLenum target,
                                  const GLenum attachment,
                                  const TextureTarget textargetPacked,
                                  const TextureID texturePacked,
                                  const GLint level);
bool ValidateFramebufferTexture3D(const Context *context,
                                  const GLenum target,
                                  const GLenum attachment,
                                  const TextureTarget textargetPacked,
                                  const TextureID texturePacked,
                                  const GLint level,
                                  const GLint zoffset);
bool ValidateVertexAttribI1i(const Context *context, const GLuint index, const GLint x);
bool ValidateVertexAttribI1iv(const Context *context, const GLuint index, const GLint *v);
bool ValidateVertexAttribI1ui(const Context *context, const GLuint index, const GLuint x);
bool ValidateVertexAttribI1uiv(const Context *context, const GLuint index, const GLuint *v);
bool ValidateVertexAttribI2i(const Context *context,
                             const GLuint index,
                             const GLint x,
                             const GLint y);
bool ValidateVertexAttribI2iv(const Context *context, const GLuint index, const GLint *v);
bool ValidateVertexAttribI2ui(const Context *context,
                              const GLuint index,
                              const GLuint x,
                              const GLuint y);
bool ValidateVertexAttribI2uiv(const Context *context, const GLuint index, const GLuint *v);
bool ValidateVertexAttribI3i(const Context *context,
                             const GLuint index,
                             const GLint x,
                             const GLint y,
                             const GLint z);
bool ValidateVertexAttribI3iv(const Context *context, const GLuint index, const GLint *v);
bool ValidateVertexAttribI3ui(const Context *context,
                              const GLuint index,
                              const GLuint x,
                              const GLuint y,
                              const GLuint z);
bool ValidateVertexAttribI3uiv(const Context *context, const GLuint index, const GLuint *v);
bool ValidateVertexAttribI4bv(const Context *context, const GLuint index, const GLbyte *v);
bool ValidateVertexAttribI4sv(const Context *context, const GLuint index, const GLshort *v);
bool ValidateVertexAttribI4ubv(const Context *context, const GLuint index, const GLubyte *v);
bool ValidateVertexAttribI4usv(const Context *context, const GLuint index, const GLushort *v);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_GL3_AUTOGEN_H_
