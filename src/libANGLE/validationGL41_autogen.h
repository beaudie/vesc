// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and wgl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationGL41_autogen.h:
//   Validation functions for the OpenGL 4.1 entry points.

#ifndef LIBANGLE_VALIDATION_GL41_AUTOGEN_H_
#define LIBANGLE_VALIDATION_GL41_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateDepthRangeArrayv(const Context *context,
                              const GLuint first,
                              const GLsizei count,
                              const GLdouble *v);
bool ValidateDepthRangeIndexed(const Context *context,
                               const GLuint index,
                               const GLdouble n,
                               const GLdouble f);
bool ValidateGetDoublei_v(const Context *context,
                          const GLenum target,
                          const GLuint index,
                          const GLdouble *data);
bool ValidateGetFloati_v(const Context *context,
                         const GLenum target,
                         const GLuint index,
                         const GLfloat *data);
bool ValidateGetVertexAttribLdv(const Context *context,
                                const GLuint index,
                                const GLenum pname,
                                const GLdouble *params);
bool ValidateProgramUniform1d(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLdouble v0);
bool ValidateProgramUniform1dv(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLint location,
                               const GLsizei count,
                               const GLdouble *value);
bool ValidateProgramUniform2d(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLdouble v0,
                              const GLdouble v1);
bool ValidateProgramUniform2dv(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLint location,
                               const GLsizei count,
                               const GLdouble *value);
bool ValidateProgramUniform3d(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLdouble v0,
                              const GLdouble v1,
                              const GLdouble v2);
bool ValidateProgramUniform3dv(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLint location,
                               const GLsizei count,
                               const GLdouble *value);
bool ValidateProgramUniform4d(const Context *context,
                              const ShaderProgramID programPacked,
                              const GLint location,
                              const GLdouble v0,
                              const GLdouble v1,
                              const GLdouble v2,
                              const GLdouble v3);
bool ValidateProgramUniform4dv(const Context *context,
                               const ShaderProgramID programPacked,
                               const GLint location,
                               const GLsizei count,
                               const GLdouble *value);
bool ValidateProgramUniformMatrix2dv(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLint location,
                                     const GLsizei count,
                                     const GLboolean transpose,
                                     const GLdouble *value);
bool ValidateProgramUniformMatrix2x3dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateProgramUniformMatrix2x4dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateProgramUniformMatrix3dv(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLint location,
                                     const GLsizei count,
                                     const GLboolean transpose,
                                     const GLdouble *value);
bool ValidateProgramUniformMatrix3x2dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateProgramUniformMatrix3x4dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateProgramUniformMatrix4dv(const Context *context,
                                     const ShaderProgramID programPacked,
                                     const GLint location,
                                     const GLsizei count,
                                     const GLboolean transpose,
                                     const GLdouble *value);
bool ValidateProgramUniformMatrix4x2dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateProgramUniformMatrix4x3dv(const Context *context,
                                       const ShaderProgramID programPacked,
                                       const GLint location,
                                       const GLsizei count,
                                       const GLboolean transpose,
                                       const GLdouble *value);
bool ValidateScissorArrayv(const Context *context,
                           const GLuint first,
                           const GLsizei count,
                           const GLint *v);
bool ValidateScissorIndexed(const Context *context,
                            const GLuint index,
                            const GLint left,
                            const GLint bottom,
                            const GLsizei width,
                            const GLsizei height);
bool ValidateScissorIndexedv(const Context *context, const GLuint index, const GLint *v);
bool ValidateVertexAttribL1d(const Context *context, const GLuint index, const GLdouble x);
bool ValidateVertexAttribL1dv(const Context *context, const GLuint index, const GLdouble *v);
bool ValidateVertexAttribL2d(const Context *context,
                             const GLuint index,
                             const GLdouble x,
                             const GLdouble y);
bool ValidateVertexAttribL2dv(const Context *context, const GLuint index, const GLdouble *v);
bool ValidateVertexAttribL3d(const Context *context,
                             const GLuint index,
                             const GLdouble x,
                             const GLdouble y,
                             const GLdouble z);
bool ValidateVertexAttribL3dv(const Context *context, const GLuint index, const GLdouble *v);
bool ValidateVertexAttribL4d(const Context *context,
                             const GLuint index,
                             const GLdouble x,
                             const GLdouble y,
                             const GLdouble z,
                             const GLdouble w);
bool ValidateVertexAttribL4dv(const Context *context, const GLuint index, const GLdouble *v);
bool ValidateVertexAttribLPointer(const Context *context,
                                  const GLuint index,
                                  const GLint size,
                                  const GLenum type,
                                  const GLsizei stride,
                                  const void *pointer);
bool ValidateViewportArrayv(const Context *context,
                            const GLuint first,
                            const GLsizei count,
                            const GLfloat *v);
bool ValidateViewportIndexedf(const Context *context,
                              const GLuint index,
                              const GLfloat x,
                              const GLfloat y,
                              const GLfloat w,
                              const GLfloat h);
bool ValidateViewportIndexedfv(const Context *context, const GLuint index, const GLfloat *v);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_GL41_AUTOGEN_H_
