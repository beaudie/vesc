// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gles_2_0_autogen.h:
//   Capture functions for the OpenGL ES 2.0 entry points.

#ifndef LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace angle
{
struct ParamCapture;
}  // namespace angle

namespace gl
{
class Context;

// Method Captures

void CaptureActiveTexture(Context *context, GLenum texture);
void CaptureAttachShader(Context *context, GLuint program, GLuint shader);
void CaptureBindAttribLocation(Context *context, GLuint program, GLuint index, const GLchar *name);
void CaptureBindBuffer(Context *context, BufferBinding targetPacked, GLuint buffer);
void CaptureBindFramebuffer(Context *context, GLenum target, GLuint framebuffer);
void CaptureBindRenderbuffer(Context *context, GLenum target, GLuint renderbuffer);
void CaptureBindTexture(Context *context, TextureType targetPacked, GLuint texture);
void CaptureBlendColor(Context *context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void CaptureBlendEquation(Context *context, GLenum mode);
void CaptureBlendEquationSeparate(Context *context, GLenum modeRGB, GLenum modeAlpha);
void CaptureBlendFunc(Context *context, GLenum sfactor, GLenum dfactor);
void CaptureBlendFuncSeparate(Context *context,
                              GLenum sfactorRGB,
                              GLenum dfactorRGB,
                              GLenum sfactorAlpha,
                              GLenum dfactorAlpha);
void CaptureBufferData(Context *context,
                       BufferBinding targetPacked,
                       GLsizeiptr size,
                       const void *data,
                       BufferUsage usagePacked);
void CaptureBufferSubData(Context *context,
                          BufferBinding targetPacked,
                          GLintptr offset,
                          GLsizeiptr size,
                          const void *data);
void CaptureCheckFramebufferStatus(Context *context, GLenum target);
void CaptureClear(Context *context, GLbitfield mask);
void CaptureClearColor(Context *context, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void CaptureClearDepthf(Context *context, GLfloat d);
void CaptureClearStencil(Context *context, GLint s);
void CaptureColorMask(Context *context,
                      GLboolean red,
                      GLboolean green,
                      GLboolean blue,
                      GLboolean alpha);
void CaptureCompileShader(Context *context, GLuint shader);
void CaptureCompressedTexImage2D(Context *context,
                                 TextureTarget targetPacked,
                                 GLint level,
                                 GLenum internalformat,
                                 GLsizei width,
                                 GLsizei height,
                                 GLint border,
                                 GLsizei imageSize,
                                 const void *data);
void CaptureCompressedTexSubImage2D(Context *context,
                                    TextureTarget targetPacked,
                                    GLint level,
                                    GLint xoffset,
                                    GLint yoffset,
                                    GLsizei width,
                                    GLsizei height,
                                    GLenum format,
                                    GLsizei imageSize,
                                    const void *data);
void CaptureCopyTexImage2D(Context *context,
                           TextureTarget targetPacked,
                           GLint level,
                           GLenum internalformat,
                           GLint x,
                           GLint y,
                           GLsizei width,
                           GLsizei height,
                           GLint border);
void CaptureCopyTexSubImage2D(Context *context,
                              TextureTarget targetPacked,
                              GLint level,
                              GLint xoffset,
                              GLint yoffset,
                              GLint x,
                              GLint y,
                              GLsizei width,
                              GLsizei height);
void CaptureCreateProgram(Context *context);
void CaptureCreateShader(Context *context, ShaderType typePacked);
void CaptureCullFace(Context *context, CullFaceMode modePacked);
void CaptureDeleteBuffers(Context *context, GLsizei n, const GLuint *buffers);
void CaptureDeleteFramebuffers(Context *context, GLsizei n, const GLuint *framebuffers);
void CaptureDeleteProgram(Context *context, GLuint program);
void CaptureDeleteRenderbuffers(Context *context, GLsizei n, const GLuint *renderbuffers);
void CaptureDeleteShader(Context *context, GLuint shader);
void CaptureDeleteTextures(Context *context, GLsizei n, const GLuint *textures);
void CaptureDepthFunc(Context *context, GLenum func);
void CaptureDepthMask(Context *context, GLboolean flag);
void CaptureDepthRangef(Context *context, GLfloat n, GLfloat f);
void CaptureDetachShader(Context *context, GLuint program, GLuint shader);
void CaptureDisable(Context *context, GLenum cap);
void CaptureDisableVertexAttribArray(Context *context, GLuint index);
void CaptureDrawArrays(Context *context, PrimitiveMode modePacked, GLint first, GLsizei count);
void CaptureDrawElements(Context *context,
                         PrimitiveMode modePacked,
                         GLsizei count,
                         DrawElementsType typePacked,
                         const void *indices);
void CaptureEnable(Context *context, GLenum cap);
void CaptureEnableVertexAttribArray(Context *context, GLuint index);
void CaptureFinish(Context *context);
void CaptureFlush(Context *context);
void CaptureFramebufferRenderbuffer(Context *context,
                                    GLenum target,
                                    GLenum attachment,
                                    GLenum renderbuffertarget,
                                    GLuint renderbuffer);
void CaptureFramebufferTexture2D(Context *context,
                                 GLenum target,
                                 GLenum attachment,
                                 TextureTarget textargetPacked,
                                 GLuint texture,
                                 GLint level);
void CaptureFrontFace(Context *context, GLenum mode);
void CaptureGenBuffers(Context *context, GLsizei n, GLuint *buffers);
void CaptureGenFramebuffers(Context *context, GLsizei n, GLuint *framebuffers);
void CaptureGenRenderbuffers(Context *context, GLsizei n, GLuint *renderbuffers);
void CaptureGenTextures(Context *context, GLsizei n, GLuint *textures);
void CaptureGenerateMipmap(Context *context, TextureType targetPacked);
void CaptureGetActiveAttrib(Context *context,
                            GLuint program,
                            GLuint index,
                            GLsizei bufSize,
                            GLsizei *length,
                            GLint *size,
                            GLenum *type,
                            GLchar *name);
void CaptureGetActiveUniform(Context *context,
                             GLuint program,
                             GLuint index,
                             GLsizei bufSize,
                             GLsizei *length,
                             GLint *size,
                             GLenum *type,
                             GLchar *name);
void CaptureGetAttachedShaders(Context *context,
                               GLuint program,
                               GLsizei maxCount,
                               GLsizei *count,
                               GLuint *shaders);
void CaptureGetAttribLocation(Context *context, GLuint program, const GLchar *name);
void CaptureGetBooleanv(Context *context, GLenum pname, GLboolean *data);
void CaptureGetBufferParameteriv(Context *context,
                                 BufferBinding targetPacked,
                                 GLenum pname,
                                 GLint *params);
void CaptureGetError(Context *context);
void CaptureGetFloatv(Context *context, GLenum pname, GLfloat *data);
void CaptureGetFramebufferAttachmentParameteriv(Context *context,
                                                GLenum target,
                                                GLenum attachment,
                                                GLenum pname,
                                                GLint *params);
void CaptureGetIntegerv(Context *context, GLenum pname, GLint *data);
void CaptureGetProgramInfoLog(Context *context,
                              GLuint program,
                              GLsizei bufSize,
                              GLsizei *length,
                              GLchar *infoLog);
void CaptureGetProgramiv(Context *context, GLuint program, GLenum pname, GLint *params);
void CaptureGetRenderbufferParameteriv(Context *context,
                                       GLenum target,
                                       GLenum pname,
                                       GLint *params);
void CaptureGetShaderInfoLog(Context *context,
                             GLuint shader,
                             GLsizei bufSize,
                             GLsizei *length,
                             GLchar *infoLog);
void CaptureGetShaderPrecisionFormat(Context *context,
                                     GLenum shadertype,
                                     GLenum precisiontype,
                                     GLint *range,
                                     GLint *precision);
void CaptureGetShaderSource(Context *context,
                            GLuint shader,
                            GLsizei bufSize,
                            GLsizei *length,
                            GLchar *source);
void CaptureGetShaderiv(Context *context, GLuint shader, GLenum pname, GLint *params);
void CaptureGetString(Context *context, GLenum name);
void CaptureGetTexParameterfv(Context *context,
                              TextureType targetPacked,
                              GLenum pname,
                              GLfloat *params);
void CaptureGetTexParameteriv(Context *context,
                              TextureType targetPacked,
                              GLenum pname,
                              GLint *params);
void CaptureGetUniformLocation(Context *context, GLuint program, const GLchar *name);
void CaptureGetUniformfv(Context *context, GLuint program, GLint location, GLfloat *params);
void CaptureGetUniformiv(Context *context, GLuint program, GLint location, GLint *params);
void CaptureGetVertexAttribPointerv(Context *context, GLuint index, GLenum pname, void **pointer);
void CaptureGetVertexAttribfv(Context *context, GLuint index, GLenum pname, GLfloat *params);
void CaptureGetVertexAttribiv(Context *context, GLuint index, GLenum pname, GLint *params);
void CaptureHint(Context *context, GLenum target, GLenum mode);
void CaptureIsBuffer(Context *context, GLuint buffer);
void CaptureIsEnabled(Context *context, GLenum cap);
void CaptureIsFramebuffer(Context *context, GLuint framebuffer);
void CaptureIsProgram(Context *context, GLuint program);
void CaptureIsRenderbuffer(Context *context, GLuint renderbuffer);
void CaptureIsShader(Context *context, GLuint shader);
void CaptureIsTexture(Context *context, GLuint texture);
void CaptureLineWidth(Context *context, GLfloat width);
void CaptureLinkProgram(Context *context, GLuint program);
void CapturePixelStorei(Context *context, GLenum pname, GLint param);
void CapturePolygonOffset(Context *context, GLfloat factor, GLfloat units);
void CaptureReadPixels(Context *context,
                       GLint x,
                       GLint y,
                       GLsizei width,
                       GLsizei height,
                       GLenum format,
                       GLenum type,
                       void *pixels);
void CaptureReleaseShaderCompiler(Context *context);
void CaptureRenderbufferStorage(Context *context,
                                GLenum target,
                                GLenum internalformat,
                                GLsizei width,
                                GLsizei height);
void CaptureSampleCoverage(Context *context, GLfloat value, GLboolean invert);
void CaptureScissor(Context *context, GLint x, GLint y, GLsizei width, GLsizei height);
void CaptureShaderBinary(Context *context,
                         GLsizei count,
                         const GLuint *shaders,
                         GLenum binaryformat,
                         const void *binary,
                         GLsizei length);
void CaptureShaderSource(Context *context,
                         GLuint shader,
                         GLsizei count,
                         const GLchar *const *string,
                         const GLint *length);
void CaptureStencilFunc(Context *context, GLenum func, GLint ref, GLuint mask);
void CaptureStencilFuncSeparate(Context *context, GLenum face, GLenum func, GLint ref, GLuint mask);
void CaptureStencilMask(Context *context, GLuint mask);
void CaptureStencilMaskSeparate(Context *context, GLenum face, GLuint mask);
void CaptureStencilOp(Context *context, GLenum fail, GLenum zfail, GLenum zpass);
void CaptureStencilOpSeparate(Context *context,
                              GLenum face,
                              GLenum sfail,
                              GLenum dpfail,
                              GLenum dppass);
void CaptureTexImage2D(Context *context,
                       TextureTarget targetPacked,
                       GLint level,
                       GLint internalformat,
                       GLsizei width,
                       GLsizei height,
                       GLint border,
                       GLenum format,
                       GLenum type,
                       const void *pixels);
void CaptureTexParameterf(Context *context, TextureType targetPacked, GLenum pname, GLfloat param);
void CaptureTexParameterfv(Context *context,
                           TextureType targetPacked,
                           GLenum pname,
                           const GLfloat *params);
void CaptureTexParameteri(Context *context, TextureType targetPacked, GLenum pname, GLint param);
void CaptureTexParameteriv(Context *context,
                           TextureType targetPacked,
                           GLenum pname,
                           const GLint *params);
void CaptureTexSubImage2D(Context *context,
                          TextureTarget targetPacked,
                          GLint level,
                          GLint xoffset,
                          GLint yoffset,
                          GLsizei width,
                          GLsizei height,
                          GLenum format,
                          GLenum type,
                          const void *pixels);
void CaptureUniform1f(Context *context, GLint location, GLfloat v0);
void CaptureUniform1fv(Context *context, GLint location, GLsizei count, const GLfloat *value);
void CaptureUniform1i(Context *context, GLint location, GLint v0);
void CaptureUniform1iv(Context *context, GLint location, GLsizei count, const GLint *value);
void CaptureUniform2f(Context *context, GLint location, GLfloat v0, GLfloat v1);
void CaptureUniform2fv(Context *context, GLint location, GLsizei count, const GLfloat *value);
void CaptureUniform2i(Context *context, GLint location, GLint v0, GLint v1);
void CaptureUniform2iv(Context *context, GLint location, GLsizei count, const GLint *value);
void CaptureUniform3f(Context *context, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void CaptureUniform3fv(Context *context, GLint location, GLsizei count, const GLfloat *value);
void CaptureUniform3i(Context *context, GLint location, GLint v0, GLint v1, GLint v2);
void CaptureUniform3iv(Context *context, GLint location, GLsizei count, const GLint *value);
void CaptureUniform4f(Context *context,
                      GLint location,
                      GLfloat v0,
                      GLfloat v1,
                      GLfloat v2,
                      GLfloat v3);
void CaptureUniform4fv(Context *context, GLint location, GLsizei count, const GLfloat *value);
void CaptureUniform4i(Context *context, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void CaptureUniform4iv(Context *context, GLint location, GLsizei count, const GLint *value);
void CaptureUniformMatrix2fv(Context *context,
                             GLint location,
                             GLsizei count,
                             GLboolean transpose,
                             const GLfloat *value);
void CaptureUniformMatrix3fv(Context *context,
                             GLint location,
                             GLsizei count,
                             GLboolean transpose,
                             const GLfloat *value);
void CaptureUniformMatrix4fv(Context *context,
                             GLint location,
                             GLsizei count,
                             GLboolean transpose,
                             const GLfloat *value);
void CaptureUseProgram(Context *context, GLuint program);
void CaptureValidateProgram(Context *context, GLuint program);
void CaptureVertexAttrib1f(Context *context, GLuint index, GLfloat x);
void CaptureVertexAttrib1fv(Context *context, GLuint index, const GLfloat *v);
void CaptureVertexAttrib2f(Context *context, GLuint index, GLfloat x, GLfloat y);
void CaptureVertexAttrib2fv(Context *context, GLuint index, const GLfloat *v);
void CaptureVertexAttrib3f(Context *context, GLuint index, GLfloat x, GLfloat y, GLfloat z);
void CaptureVertexAttrib3fv(Context *context, GLuint index, const GLfloat *v);
void CaptureVertexAttrib4f(Context *context,
                           GLuint index,
                           GLfloat x,
                           GLfloat y,
                           GLfloat z,
                           GLfloat w);
void CaptureVertexAttrib4fv(Context *context, GLuint index, const GLfloat *v);
void CaptureVertexAttribPointer(Context *context,
                                GLuint index,
                                GLint size,
                                VertexAttribType typePacked,
                                GLboolean normalized,
                                GLsizei stride,
                                const void *pointer);
void CaptureViewport(Context *context, GLint x, GLint y, GLsizei width, GLsizei height);

// Parameter Captures

void CaptureBindAttribLocation_name(Context *context,
                                    GLuint program,
                                    GLuint index,
                                    const GLchar *name,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureBufferData_data(Context *context,
                            BufferBinding targetPacked,
                            GLsizeiptr size,
                            const void *data,
                            BufferUsage usagePacked,
                            bool isCallValid,
                            angle::ParamCapture *paramCapture);
void CaptureBufferSubData_data(Context *context,
                               BufferBinding targetPacked,
                               GLintptr offset,
                               GLsizeiptr size,
                               const void *data,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureCompressedTexImage2D_data(Context *context,
                                      TextureTarget targetPacked,
                                      GLint level,
                                      GLenum internalformat,
                                      GLsizei width,
                                      GLsizei height,
                                      GLint border,
                                      GLsizei imageSize,
                                      const void *data,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureCompressedTexSubImage2D_data(Context *context,
                                         TextureTarget targetPacked,
                                         GLint level,
                                         GLint xoffset,
                                         GLint yoffset,
                                         GLsizei width,
                                         GLsizei height,
                                         GLenum format,
                                         GLsizei imageSize,
                                         const void *data,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureDeleteBuffers_buffers(Context *context,
                                  GLsizei n,
                                  const GLuint *buffers,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureDeleteFramebuffers_framebuffers(Context *context,
                                            GLsizei n,
                                            const GLuint *framebuffers,
                                            bool isCallValid,
                                            angle::ParamCapture *paramCapture);
void CaptureDeleteRenderbuffers_renderbuffers(Context *context,
                                              GLsizei n,
                                              const GLuint *renderbuffers,
                                              bool isCallValid,
                                              angle::ParamCapture *paramCapture);
void CaptureDeleteTextures_textures(Context *context,
                                    GLsizei n,
                                    const GLuint *textures,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureDrawElements_indices(Context *context,
                                 PrimitiveMode modePacked,
                                 GLsizei count,
                                 DrawElementsType typePacked,
                                 const void *indices,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGenBuffers_buffers(Context *context,
                               GLsizei n,
                               GLuint *buffers,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGenFramebuffers_framebuffers(Context *context,
                                         GLsizei n,
                                         GLuint *framebuffers,
                                         bool isCallValid,
                                         angle::ParamCapture *paramCapture);
void CaptureGenRenderbuffers_renderbuffers(Context *context,
                                           GLsizei n,
                                           GLuint *renderbuffers,
                                           bool isCallValid,
                                           angle::ParamCapture *paramCapture);
void CaptureGenTextures_textures(Context *context,
                                 GLsizei n,
                                 GLuint *textures,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_length(Context *context,
                                   GLuint program,
                                   GLuint index,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLint *size,
                                   GLenum *type,
                                   GLchar *name,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_size(Context *context,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_type(Context *context,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_name(Context *context,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_length(Context *context,
                                    GLuint program,
                                    GLuint index,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLint *size,
                                    GLenum *type,
                                    GLchar *name,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_size(Context *context,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_type(Context *context,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_name(Context *context,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureGetAttachedShaders_count(Context *context,
                                     GLuint program,
                                     GLsizei maxCount,
                                     GLsizei *count,
                                     GLuint *shaders,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetAttachedShaders_shaders(Context *context,
                                       GLuint program,
                                       GLsizei maxCount,
                                       GLsizei *count,
                                       GLuint *shaders,
                                       bool isCallValid,
                                       angle::ParamCapture *paramCapture);
void CaptureGetAttribLocation_name(Context *context,
                                   GLuint program,
                                   const GLchar *name,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetBooleanv_data(Context *context,
                             GLenum pname,
                             GLboolean *data,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureGetBufferParameteriv_params(Context *context,
                                        BufferBinding targetPacked,
                                        GLenum pname,
                                        GLint *params,
                                        bool isCallValid,
                                        angle::ParamCapture *paramCapture);
void CaptureGetFloatv_data(Context *context,
                           GLenum pname,
                           GLfloat *data,
                           bool isCallValid,
                           angle::ParamCapture *paramCapture);
void CaptureGetFramebufferAttachmentParameteriv_params(Context *context,
                                                       GLenum target,
                                                       GLenum attachment,
                                                       GLenum pname,
                                                       GLint *params,
                                                       bool isCallValid,
                                                       angle::ParamCapture *paramCapture);
void CaptureGetIntegerv_data(Context *context,
                             GLenum pname,
                             GLint *data,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureGetProgramInfoLog_length(Context *context,
                                     GLuint program,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLchar *infoLog,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetProgramInfoLog_infoLog(Context *context,
                                      GLuint program,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *infoLog,
                                      bool isCallValid,
                                      angle::ParamCapture *paramCapture);
void CaptureGetProgramiv_params(Context *context,
                                GLuint program,
                                GLenum pname,
                                GLint *params,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureGetRenderbufferParameteriv_params(Context *context,
                                              GLenum target,
                                              GLenum pname,
                                              GLint *params,
                                              bool isCallValid,
                                              angle::ParamCapture *paramCapture);
void CaptureGetShaderInfoLog_length(Context *context,
                                    GLuint shader,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLchar *infoLog,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureGetShaderInfoLog_infoLog(Context *context,
                                     GLuint shader,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLchar *infoLog,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetShaderPrecisionFormat_range(Context *context,
                                           GLenum shadertype,
                                           GLenum precisiontype,
                                           GLint *range,
                                           GLint *precision,
                                           bool isCallValid,
                                           angle::ParamCapture *paramCapture);
void CaptureGetShaderPrecisionFormat_precision(Context *context,
                                               GLenum shadertype,
                                               GLenum precisiontype,
                                               GLint *range,
                                               GLint *precision,
                                               bool isCallValid,
                                               angle::ParamCapture *paramCapture);
void CaptureGetShaderSource_length(Context *context,
                                   GLuint shader,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *source,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetShaderSource_source(Context *context,
                                   GLuint shader,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *source,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureGetShaderiv_params(Context *context,
                               GLuint shader,
                               GLenum pname,
                               GLint *params,
                               bool isCallValid,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexParameterfv_params(Context *context,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLfloat *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetTexParameteriv_params(Context *context,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLint *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetUniformLocation_name(Context *context,
                                    GLuint program,
                                    const GLchar *name,
                                    bool isCallValid,
                                    angle::ParamCapture *paramCapture);
void CaptureGetUniformfv_params(Context *context,
                                GLuint program,
                                GLint location,
                                GLfloat *params,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureGetUniformiv_params(Context *context,
                                GLuint program,
                                GLint location,
                                GLint *params,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribPointerv_pointer(Context *context,
                                            GLuint index,
                                            GLenum pname,
                                            void **pointer,
                                            bool isCallValid,
                                            angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribfv_params(Context *context,
                                     GLuint index,
                                     GLenum pname,
                                     GLfloat *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribiv_params(Context *context,
                                     GLuint index,
                                     GLenum pname,
                                     GLint *params,
                                     bool isCallValid,
                                     angle::ParamCapture *paramCapture);
void CaptureReadPixels_pixels(Context *context,
                              GLint x,
                              GLint y,
                              GLsizei width,
                              GLsizei height,
                              GLenum format,
                              GLenum type,
                              void *pixels,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureShaderBinary_shaders(Context *context,
                                 GLsizei count,
                                 const GLuint *shaders,
                                 GLenum binaryformat,
                                 const void *binary,
                                 GLsizei length,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureShaderBinary_binary(Context *context,
                                GLsizei count,
                                const GLuint *shaders,
                                GLenum binaryformat,
                                const void *binary,
                                GLsizei length,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureShaderSource_string(Context *context,
                                GLuint shader,
                                GLsizei count,
                                const GLchar *const *string,
                                const GLint *length,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureShaderSource_length(Context *context,
                                GLuint shader,
                                GLsizei count,
                                const GLchar *const *string,
                                const GLint *length,
                                bool isCallValid,
                                angle::ParamCapture *paramCapture);
void CaptureTexImage2D_pixels(Context *context,
                              TextureTarget targetPacked,
                              GLint level,
                              GLint internalformat,
                              GLsizei width,
                              GLsizei height,
                              GLint border,
                              GLenum format,
                              GLenum type,
                              const void *pixels,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureTexParameterfv_params(Context *context,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLfloat *params,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureTexParameteriv_params(Context *context,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLint *params,
                                  bool isCallValid,
                                  angle::ParamCapture *paramCapture);
void CaptureTexSubImage2D_pixels(Context *context,
                                 TextureTarget targetPacked,
                                 GLint level,
                                 GLint xoffset,
                                 GLint yoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLenum format,
                                 GLenum type,
                                 const void *pixels,
                                 bool isCallValid,
                                 angle::ParamCapture *paramCapture);
void CaptureUniform1fv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform1iv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform2fv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform2iv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform3fv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform3iv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform4fv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniform4iv_value(Context *context,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             bool isCallValid,
                             angle::ParamCapture *paramCapture);
void CaptureUniformMatrix2fv_value(Context *context,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureUniformMatrix3fv_value(Context *context,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureUniformMatrix4fv_value(Context *context,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   bool isCallValid,
                                   angle::ParamCapture *paramCapture);
void CaptureVertexAttrib1fv_v(Context *context,
                              GLuint index,
                              const GLfloat *v,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib2fv_v(Context *context,
                              GLuint index,
                              const GLfloat *v,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib3fv_v(Context *context,
                              GLuint index,
                              const GLfloat *v,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib4fv_v(Context *context,
                              GLuint index,
                              const GLfloat *v,
                              bool isCallValid,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttribPointer_pointer(Context *context,
                                        GLuint index,
                                        GLint size,
                                        VertexAttribType typePacked,
                                        GLboolean normalized,
                                        GLsizei stride,
                                        const void *pointer,
                                        bool isCallValid,
                                        angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_
