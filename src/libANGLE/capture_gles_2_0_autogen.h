// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// capture_gles_2_0_autogen.h:
//   Capture functions for the OpenGL ES 2.0 entry points.

#ifndef LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_
#define LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_

#include "common/PackedEnums.h"
#include "libANGLE/FrameCapture.h"

namespace gl
{
class Context;

// Method Captures

angle::ParamBuffer CaptureActiveTexture(const Context *context, bool isCallValid, GLenum texture);
angle::ParamBuffer CaptureAttachShader(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLuint shader);
angle::ParamBuffer CaptureBindAttribLocation(const Context *context,
                                             bool isCallValid,
                                             GLuint program,
                                             GLuint index,
                                             const GLchar *name);
angle::ParamBuffer CaptureBindBuffer(const Context *context,
                                     bool isCallValid,
                                     BufferBinding targetPacked,
                                     GLuint buffer);
angle::ParamBuffer CaptureBindFramebuffer(const Context *context,
                                          bool isCallValid,
                                          GLenum target,
                                          GLuint framebuffer);
angle::ParamBuffer CaptureBindRenderbuffer(const Context *context,
                                           bool isCallValid,
                                           GLenum target,
                                           GLuint renderbuffer);
angle::ParamBuffer CaptureBindTexture(const Context *context,
                                      bool isCallValid,
                                      TextureType targetPacked,
                                      GLuint texture);
angle::ParamBuffer CaptureBlendColor(const Context *context,
                                     bool isCallValid,
                                     GLfloat red,
                                     GLfloat green,
                                     GLfloat blue,
                                     GLfloat alpha);
angle::ParamBuffer CaptureBlendEquation(const Context *context, bool isCallValid, GLenum mode);
angle::ParamBuffer CaptureBlendEquationSeparate(const Context *context,
                                                bool isCallValid,
                                                GLenum modeRGB,
                                                GLenum modeAlpha);
angle::ParamBuffer CaptureBlendFunc(const Context *context,
                                    bool isCallValid,
                                    GLenum sfactor,
                                    GLenum dfactor);
angle::ParamBuffer CaptureBlendFuncSeparate(const Context *context,
                                            bool isCallValid,
                                            GLenum sfactorRGB,
                                            GLenum dfactorRGB,
                                            GLenum sfactorAlpha,
                                            GLenum dfactorAlpha);
angle::ParamBuffer CaptureBufferData(const Context *context,
                                     bool isCallValid,
                                     BufferBinding targetPacked,
                                     GLsizeiptr size,
                                     const void *data,
                                     BufferUsage usagePacked);
angle::ParamBuffer CaptureBufferSubData(const Context *context,
                                        bool isCallValid,
                                        BufferBinding targetPacked,
                                        GLintptr offset,
                                        GLsizeiptr size,
                                        const void *data);
angle::ParamBuffer CaptureCheckFramebufferStatus(const Context *context,
                                                 bool isCallValid,
                                                 GLenum target);
angle::ParamBuffer CaptureClear(const Context *context, bool isCallValid, GLbitfield mask);
angle::ParamBuffer CaptureClearColor(const Context *context,
                                     bool isCallValid,
                                     GLfloat red,
                                     GLfloat green,
                                     GLfloat blue,
                                     GLfloat alpha);
angle::ParamBuffer CaptureClearDepthf(const Context *context, bool isCallValid, GLfloat d);
angle::ParamBuffer CaptureClearStencil(const Context *context, bool isCallValid, GLint s);
angle::ParamBuffer CaptureColorMask(const Context *context,
                                    bool isCallValid,
                                    GLboolean red,
                                    GLboolean green,
                                    GLboolean blue,
                                    GLboolean alpha);
angle::ParamBuffer CaptureCompileShader(const Context *context, bool isCallValid, GLuint shader);
angle::ParamBuffer CaptureCompressedTexImage2D(const Context *context,
                                               bool isCallValid,
                                               TextureTarget targetPacked,
                                               GLint level,
                                               GLenum internalformat,
                                               GLsizei width,
                                               GLsizei height,
                                               GLint border,
                                               GLsizei imageSize,
                                               const void *data);
angle::ParamBuffer CaptureCompressedTexSubImage2D(const Context *context,
                                                  bool isCallValid,
                                                  TextureTarget targetPacked,
                                                  GLint level,
                                                  GLint xoffset,
                                                  GLint yoffset,
                                                  GLsizei width,
                                                  GLsizei height,
                                                  GLenum format,
                                                  GLsizei imageSize,
                                                  const void *data);
angle::ParamBuffer CaptureCopyTexImage2D(const Context *context,
                                         bool isCallValid,
                                         TextureTarget targetPacked,
                                         GLint level,
                                         GLenum internalformat,
                                         GLint x,
                                         GLint y,
                                         GLsizei width,
                                         GLsizei height,
                                         GLint border);
angle::ParamBuffer CaptureCopyTexSubImage2D(const Context *context,
                                            bool isCallValid,
                                            TextureTarget targetPacked,
                                            GLint level,
                                            GLint xoffset,
                                            GLint yoffset,
                                            GLint x,
                                            GLint y,
                                            GLsizei width,
                                            GLsizei height);
angle::ParamBuffer CaptureCreateProgram(const Context *context, bool isCallValid);
angle::ParamBuffer CaptureCreateShader(const Context *context,
                                       bool isCallValid,
                                       ShaderType typePacked);
angle::ParamBuffer CaptureCullFace(const Context *context,
                                   bool isCallValid,
                                   CullFaceMode modePacked);
angle::ParamBuffer CaptureDeleteBuffers(const Context *context,
                                        bool isCallValid,
                                        GLsizei n,
                                        const GLuint *buffers);
angle::ParamBuffer CaptureDeleteFramebuffers(const Context *context,
                                             bool isCallValid,
                                             GLsizei n,
                                             const GLuint *framebuffers);
angle::ParamBuffer CaptureDeleteProgram(const Context *context, bool isCallValid, GLuint program);
angle::ParamBuffer CaptureDeleteRenderbuffers(const Context *context,
                                              bool isCallValid,
                                              GLsizei n,
                                              const GLuint *renderbuffers);
angle::ParamBuffer CaptureDeleteShader(const Context *context, bool isCallValid, GLuint shader);
angle::ParamBuffer CaptureDeleteTextures(const Context *context,
                                         bool isCallValid,
                                         GLsizei n,
                                         const GLuint *textures);
angle::ParamBuffer CaptureDepthFunc(const Context *context, bool isCallValid, GLenum func);
angle::ParamBuffer CaptureDepthMask(const Context *context, bool isCallValid, GLboolean flag);
angle::ParamBuffer CaptureDepthRangef(const Context *context,
                                      bool isCallValid,
                                      GLfloat n,
                                      GLfloat f);
angle::ParamBuffer CaptureDetachShader(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLuint shader);
angle::ParamBuffer CaptureDisable(const Context *context, bool isCallValid, GLenum cap);
angle::ParamBuffer CaptureDisableVertexAttribArray(const Context *context,
                                                   bool isCallValid,
                                                   GLuint index);
angle::ParamBuffer CaptureDrawArrays(const Context *context,
                                     bool isCallValid,
                                     PrimitiveMode modePacked,
                                     GLint first,
                                     GLsizei count);
angle::ParamBuffer CaptureDrawElements(const Context *context,
                                       bool isCallValid,
                                       PrimitiveMode modePacked,
                                       GLsizei count,
                                       DrawElementsType typePacked,
                                       const void *indices);
angle::ParamBuffer CaptureEnable(const Context *context, bool isCallValid, GLenum cap);
angle::ParamBuffer CaptureEnableVertexAttribArray(const Context *context,
                                                  bool isCallValid,
                                                  GLuint index);
angle::ParamBuffer CaptureFinish(const Context *context, bool isCallValid);
angle::ParamBuffer CaptureFlush(const Context *context, bool isCallValid);
angle::ParamBuffer CaptureFramebufferRenderbuffer(const Context *context,
                                                  bool isCallValid,
                                                  GLenum target,
                                                  GLenum attachment,
                                                  GLenum renderbuffertarget,
                                                  GLuint renderbuffer);
angle::ParamBuffer CaptureFramebufferTexture2D(const Context *context,
                                               bool isCallValid,
                                               GLenum target,
                                               GLenum attachment,
                                               TextureTarget textargetPacked,
                                               GLuint texture,
                                               GLint level);
angle::ParamBuffer CaptureFrontFace(const Context *context, bool isCallValid, GLenum mode);
angle::ParamBuffer CaptureGenBuffers(const Context *context,
                                     bool isCallValid,
                                     GLsizei n,
                                     GLuint *buffers);
angle::ParamBuffer CaptureGenFramebuffers(const Context *context,
                                          bool isCallValid,
                                          GLsizei n,
                                          GLuint *framebuffers);
angle::ParamBuffer CaptureGenRenderbuffers(const Context *context,
                                           bool isCallValid,
                                           GLsizei n,
                                           GLuint *renderbuffers);
angle::ParamBuffer CaptureGenTextures(const Context *context,
                                      bool isCallValid,
                                      GLsizei n,
                                      GLuint *textures);
angle::ParamBuffer CaptureGenerateMipmap(const Context *context,
                                         bool isCallValid,
                                         TextureType targetPacked);
angle::ParamBuffer CaptureGetActiveAttrib(const Context *context,
                                          bool isCallValid,
                                          GLuint program,
                                          GLuint index,
                                          GLsizei bufSize,
                                          GLsizei *length,
                                          GLint *size,
                                          GLenum *type,
                                          GLchar *name);
angle::ParamBuffer CaptureGetActiveUniform(const Context *context,
                                           bool isCallValid,
                                           GLuint program,
                                           GLuint index,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLint *size,
                                           GLenum *type,
                                           GLchar *name);
angle::ParamBuffer CaptureGetAttachedShaders(const Context *context,
                                             bool isCallValid,
                                             GLuint program,
                                             GLsizei maxCount,
                                             GLsizei *count,
                                             GLuint *shaders);
angle::ParamBuffer CaptureGetAttribLocation(const Context *context,
                                            bool isCallValid,
                                            GLuint program,
                                            const GLchar *name);
angle::ParamBuffer CaptureGetBooleanv(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      GLboolean *data);
angle::ParamBuffer CaptureGetBufferParameteriv(const Context *context,
                                               bool isCallValid,
                                               BufferBinding targetPacked,
                                               GLenum pname,
                                               GLint *params);
angle::ParamBuffer CaptureGetError(const Context *context, bool isCallValid);
angle::ParamBuffer CaptureGetFloatv(const Context *context,
                                    bool isCallValid,
                                    GLenum pname,
                                    GLfloat *data);
angle::ParamBuffer CaptureGetFramebufferAttachmentParameteriv(const Context *context,
                                                              bool isCallValid,
                                                              GLenum target,
                                                              GLenum attachment,
                                                              GLenum pname,
                                                              GLint *params);
angle::ParamBuffer CaptureGetIntegerv(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      GLint *data);
angle::ParamBuffer CaptureGetProgramInfoLog(const Context *context,
                                            bool isCallValid,
                                            GLuint program,
                                            GLsizei bufSize,
                                            GLsizei *length,
                                            GLchar *infoLog);
angle::ParamBuffer CaptureGetProgramiv(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLenum pname,
                                       GLint *params);
angle::ParamBuffer CaptureGetRenderbufferParameteriv(const Context *context,
                                                     bool isCallValid,
                                                     GLenum target,
                                                     GLenum pname,
                                                     GLint *params);
angle::ParamBuffer CaptureGetShaderInfoLog(const Context *context,
                                           bool isCallValid,
                                           GLuint shader,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLchar *infoLog);
angle::ParamBuffer CaptureGetShaderPrecisionFormat(const Context *context,
                                                   bool isCallValid,
                                                   GLenum shadertype,
                                                   GLenum precisiontype,
                                                   GLint *range,
                                                   GLint *precision);
angle::ParamBuffer CaptureGetShaderSource(const Context *context,
                                          bool isCallValid,
                                          GLuint shader,
                                          GLsizei bufSize,
                                          GLsizei *length,
                                          GLchar *source);
angle::ParamBuffer CaptureGetShaderiv(const Context *context,
                                      bool isCallValid,
                                      GLuint shader,
                                      GLenum pname,
                                      GLint *params);
angle::ParamBuffer CaptureGetString(const Context *context, bool isCallValid, GLenum name);
angle::ParamBuffer CaptureGetTexParameterfv(const Context *context,
                                            bool isCallValid,
                                            TextureType targetPacked,
                                            GLenum pname,
                                            GLfloat *params);
angle::ParamBuffer CaptureGetTexParameteriv(const Context *context,
                                            bool isCallValid,
                                            TextureType targetPacked,
                                            GLenum pname,
                                            GLint *params);
angle::ParamBuffer CaptureGetUniformLocation(const Context *context,
                                             bool isCallValid,
                                             GLuint program,
                                             const GLchar *name);
angle::ParamBuffer CaptureGetUniformfv(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLint location,
                                       GLfloat *params);
angle::ParamBuffer CaptureGetUniformiv(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLint location,
                                       GLint *params);
angle::ParamBuffer CaptureGetVertexAttribPointerv(const Context *context,
                                                  bool isCallValid,
                                                  GLuint index,
                                                  GLenum pname,
                                                  void **pointer);
angle::ParamBuffer CaptureGetVertexAttribfv(const Context *context,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum pname,
                                            GLfloat *params);
angle::ParamBuffer CaptureGetVertexAttribiv(const Context *context,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum pname,
                                            GLint *params);
angle::ParamBuffer CaptureHint(const Context *context,
                               bool isCallValid,
                               GLenum target,
                               GLenum mode);
angle::ParamBuffer CaptureIsBuffer(const Context *context, bool isCallValid, GLuint buffer);
angle::ParamBuffer CaptureIsEnabled(const Context *context, bool isCallValid, GLenum cap);
angle::ParamBuffer CaptureIsFramebuffer(const Context *context,
                                        bool isCallValid,
                                        GLuint framebuffer);
angle::ParamBuffer CaptureIsProgram(const Context *context, bool isCallValid, GLuint program);
angle::ParamBuffer CaptureIsRenderbuffer(const Context *context,
                                         bool isCallValid,
                                         GLuint renderbuffer);
angle::ParamBuffer CaptureIsShader(const Context *context, bool isCallValid, GLuint shader);
angle::ParamBuffer CaptureIsTexture(const Context *context, bool isCallValid, GLuint texture);
angle::ParamBuffer CaptureLineWidth(const Context *context, bool isCallValid, GLfloat width);
angle::ParamBuffer CaptureLinkProgram(const Context *context, bool isCallValid, GLuint program);
angle::ParamBuffer CapturePixelStorei(const Context *context,
                                      bool isCallValid,
                                      GLenum pname,
                                      GLint param);
angle::ParamBuffer CapturePolygonOffset(const Context *context,
                                        bool isCallValid,
                                        GLfloat factor,
                                        GLfloat units);
angle::ParamBuffer CaptureReadPixels(const Context *context,
                                     bool isCallValid,
                                     GLint x,
                                     GLint y,
                                     GLsizei width,
                                     GLsizei height,
                                     GLenum format,
                                     GLenum type,
                                     void *pixels);
angle::ParamBuffer CaptureReleaseShaderCompiler(const Context *context, bool isCallValid);
angle::ParamBuffer CaptureRenderbufferStorage(const Context *context,
                                              bool isCallValid,
                                              GLenum target,
                                              GLenum internalformat,
                                              GLsizei width,
                                              GLsizei height);
angle::ParamBuffer CaptureSampleCoverage(const Context *context,
                                         bool isCallValid,
                                         GLfloat value,
                                         GLboolean invert);
angle::ParamBuffer CaptureScissor(const Context *context,
                                  bool isCallValid,
                                  GLint x,
                                  GLint y,
                                  GLsizei width,
                                  GLsizei height);
angle::ParamBuffer CaptureShaderBinary(const Context *context,
                                       bool isCallValid,
                                       GLsizei count,
                                       const GLuint *shaders,
                                       GLenum binaryformat,
                                       const void *binary,
                                       GLsizei length);
angle::ParamBuffer CaptureShaderSource(const Context *context,
                                       bool isCallValid,
                                       GLuint shader,
                                       GLsizei count,
                                       const GLchar *const *string,
                                       const GLint *length);
angle::ParamBuffer CaptureStencilFunc(const Context *context,
                                      bool isCallValid,
                                      GLenum func,
                                      GLint ref,
                                      GLuint mask);
angle::ParamBuffer CaptureStencilFuncSeparate(const Context *context,
                                              bool isCallValid,
                                              GLenum face,
                                              GLenum func,
                                              GLint ref,
                                              GLuint mask);
angle::ParamBuffer CaptureStencilMask(const Context *context, bool isCallValid, GLuint mask);
angle::ParamBuffer CaptureStencilMaskSeparate(const Context *context,
                                              bool isCallValid,
                                              GLenum face,
                                              GLuint mask);
angle::ParamBuffer CaptureStencilOp(const Context *context,
                                    bool isCallValid,
                                    GLenum fail,
                                    GLenum zfail,
                                    GLenum zpass);
angle::ParamBuffer CaptureStencilOpSeparate(const Context *context,
                                            bool isCallValid,
                                            GLenum face,
                                            GLenum sfail,
                                            GLenum dpfail,
                                            GLenum dppass);
angle::ParamBuffer CaptureTexImage2D(const Context *context,
                                     bool isCallValid,
                                     TextureTarget targetPacked,
                                     GLint level,
                                     GLint internalformat,
                                     GLsizei width,
                                     GLsizei height,
                                     GLint border,
                                     GLenum format,
                                     GLenum type,
                                     const void *pixels);
angle::ParamBuffer CaptureTexParameterf(const Context *context,
                                        bool isCallValid,
                                        TextureType targetPacked,
                                        GLenum pname,
                                        GLfloat param);
angle::ParamBuffer CaptureTexParameterfv(const Context *context,
                                         bool isCallValid,
                                         TextureType targetPacked,
                                         GLenum pname,
                                         const GLfloat *params);
angle::ParamBuffer CaptureTexParameteri(const Context *context,
                                        bool isCallValid,
                                        TextureType targetPacked,
                                        GLenum pname,
                                        GLint param);
angle::ParamBuffer CaptureTexParameteriv(const Context *context,
                                         bool isCallValid,
                                         TextureType targetPacked,
                                         GLenum pname,
                                         const GLint *params);
angle::ParamBuffer CaptureTexSubImage2D(const Context *context,
                                        bool isCallValid,
                                        TextureTarget targetPacked,
                                        GLint level,
                                        GLint xoffset,
                                        GLint yoffset,
                                        GLsizei width,
                                        GLsizei height,
                                        GLenum format,
                                        GLenum type,
                                        const void *pixels);
angle::ParamBuffer CaptureUniform1f(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLfloat v0);
angle::ParamBuffer CaptureUniform1fv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLfloat *value);
angle::ParamBuffer CaptureUniform1i(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLint v0);
angle::ParamBuffer CaptureUniform1iv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLint *value);
angle::ParamBuffer CaptureUniform2f(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLfloat v0,
                                    GLfloat v1);
angle::ParamBuffer CaptureUniform2fv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLfloat *value);
angle::ParamBuffer CaptureUniform2i(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLint v0,
                                    GLint v1);
angle::ParamBuffer CaptureUniform2iv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLint *value);
angle::ParamBuffer CaptureUniform3f(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLfloat v0,
                                    GLfloat v1,
                                    GLfloat v2);
angle::ParamBuffer CaptureUniform3fv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLfloat *value);
angle::ParamBuffer CaptureUniform3i(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLint v0,
                                    GLint v1,
                                    GLint v2);
angle::ParamBuffer CaptureUniform3iv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLint *value);
angle::ParamBuffer CaptureUniform4f(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLfloat v0,
                                    GLfloat v1,
                                    GLfloat v2,
                                    GLfloat v3);
angle::ParamBuffer CaptureUniform4fv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLfloat *value);
angle::ParamBuffer CaptureUniform4i(const Context *context,
                                    bool isCallValid,
                                    GLint location,
                                    GLint v0,
                                    GLint v1,
                                    GLint v2,
                                    GLint v3);
angle::ParamBuffer CaptureUniform4iv(const Context *context,
                                     bool isCallValid,
                                     GLint location,
                                     GLsizei count,
                                     const GLint *value);
angle::ParamBuffer CaptureUniformMatrix2fv(const Context *context,
                                           bool isCallValid,
                                           GLint location,
                                           GLsizei count,
                                           GLboolean transpose,
                                           const GLfloat *value);
angle::ParamBuffer CaptureUniformMatrix3fv(const Context *context,
                                           bool isCallValid,
                                           GLint location,
                                           GLsizei count,
                                           GLboolean transpose,
                                           const GLfloat *value);
angle::ParamBuffer CaptureUniformMatrix4fv(const Context *context,
                                           bool isCallValid,
                                           GLint location,
                                           GLsizei count,
                                           GLboolean transpose,
                                           const GLfloat *value);
angle::ParamBuffer CaptureUseProgram(const Context *context, bool isCallValid, GLuint program);
angle::ParamBuffer CaptureValidateProgram(const Context *context, bool isCallValid, GLuint program);
angle::ParamBuffer CaptureVertexAttrib1f(const Context *context,
                                         bool isCallValid,
                                         GLuint index,
                                         GLfloat x);
angle::ParamBuffer CaptureVertexAttrib1fv(const Context *context,
                                          bool isCallValid,
                                          GLuint index,
                                          const GLfloat *v);
angle::ParamBuffer CaptureVertexAttrib2f(const Context *context,
                                         bool isCallValid,
                                         GLuint index,
                                         GLfloat x,
                                         GLfloat y);
angle::ParamBuffer CaptureVertexAttrib2fv(const Context *context,
                                          bool isCallValid,
                                          GLuint index,
                                          const GLfloat *v);
angle::ParamBuffer CaptureVertexAttrib3f(const Context *context,
                                         bool isCallValid,
                                         GLuint index,
                                         GLfloat x,
                                         GLfloat y,
                                         GLfloat z);
angle::ParamBuffer CaptureVertexAttrib3fv(const Context *context,
                                          bool isCallValid,
                                          GLuint index,
                                          const GLfloat *v);
angle::ParamBuffer CaptureVertexAttrib4f(const Context *context,
                                         bool isCallValid,
                                         GLuint index,
                                         GLfloat x,
                                         GLfloat y,
                                         GLfloat z,
                                         GLfloat w);
angle::ParamBuffer CaptureVertexAttrib4fv(const Context *context,
                                          bool isCallValid,
                                          GLuint index,
                                          const GLfloat *v);
angle::ParamBuffer CaptureVertexAttribPointer(const Context *context,
                                              bool isCallValid,
                                              GLuint index,
                                              GLint size,
                                              VertexAttribType typePacked,
                                              GLboolean normalized,
                                              GLsizei stride,
                                              const void *pointer);
angle::ParamBuffer CaptureViewport(const Context *context,
                                   bool isCallValid,
                                   GLint x,
                                   GLint y,
                                   GLsizei width,
                                   GLsizei height);

// Parameter Captures

void CaptureBindAttribLocation_name(const Context *context,
                                    bool isCallValid,
                                    GLuint program,
                                    GLuint index,
                                    const GLchar *name,
                                    angle::ParamCapture *paramCapture);
void CaptureBufferData_data(const Context *context,
                            bool isCallValid,
                            BufferBinding targetPacked,
                            GLsizeiptr size,
                            const void *data,
                            BufferUsage usagePacked,
                            angle::ParamCapture *paramCapture);
void CaptureBufferSubData_data(const Context *context,
                               bool isCallValid,
                               BufferBinding targetPacked,
                               GLintptr offset,
                               GLsizeiptr size,
                               const void *data,
                               angle::ParamCapture *paramCapture);
void CaptureCompressedTexImage2D_data(const Context *context,
                                      bool isCallValid,
                                      TextureTarget targetPacked,
                                      GLint level,
                                      GLenum internalformat,
                                      GLsizei width,
                                      GLsizei height,
                                      GLint border,
                                      GLsizei imageSize,
                                      const void *data,
                                      angle::ParamCapture *paramCapture);
void CaptureCompressedTexSubImage2D_data(const Context *context,
                                         bool isCallValid,
                                         TextureTarget targetPacked,
                                         GLint level,
                                         GLint xoffset,
                                         GLint yoffset,
                                         GLsizei width,
                                         GLsizei height,
                                         GLenum format,
                                         GLsizei imageSize,
                                         const void *data,
                                         angle::ParamCapture *paramCapture);
void CaptureDeleteBuffers_buffers(const Context *context,
                                  bool isCallValid,
                                  GLsizei n,
                                  const GLuint *buffers,
                                  angle::ParamCapture *paramCapture);
void CaptureDeleteFramebuffers_framebuffers(const Context *context,
                                            bool isCallValid,
                                            GLsizei n,
                                            const GLuint *framebuffers,
                                            angle::ParamCapture *paramCapture);
void CaptureDeleteRenderbuffers_renderbuffers(const Context *context,
                                              bool isCallValid,
                                              GLsizei n,
                                              const GLuint *renderbuffers,
                                              angle::ParamCapture *paramCapture);
void CaptureDeleteTextures_textures(const Context *context,
                                    bool isCallValid,
                                    GLsizei n,
                                    const GLuint *textures,
                                    angle::ParamCapture *paramCapture);
void CaptureDrawElements_indices(const Context *context,
                                 bool isCallValid,
                                 PrimitiveMode modePacked,
                                 GLsizei count,
                                 DrawElementsType typePacked,
                                 const void *indices,
                                 angle::ParamCapture *paramCapture);
void CaptureGenBuffers_buffers(const Context *context,
                               bool isCallValid,
                               GLsizei n,
                               GLuint *buffers,
                               angle::ParamCapture *paramCapture);
void CaptureGenFramebuffers_framebuffers(const Context *context,
                                         bool isCallValid,
                                         GLsizei n,
                                         GLuint *framebuffers,
                                         angle::ParamCapture *paramCapture);
void CaptureGenRenderbuffers_renderbuffers(const Context *context,
                                           bool isCallValid,
                                           GLsizei n,
                                           GLuint *renderbuffers,
                                           angle::ParamCapture *paramCapture);
void CaptureGenTextures_textures(const Context *context,
                                 bool isCallValid,
                                 GLsizei n,
                                 GLuint *textures,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_length(const Context *context,
                                   bool isCallValid,
                                   GLuint program,
                                   GLuint index,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLint *size,
                                   GLenum *type,
                                   GLchar *name,
                                   angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_size(const Context *context,
                                 bool isCallValid,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_type(const Context *context,
                                 bool isCallValid,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveAttrib_name(const Context *context,
                                 bool isCallValid,
                                 GLuint program,
                                 GLuint index,
                                 GLsizei bufSize,
                                 GLsizei *length,
                                 GLint *size,
                                 GLenum *type,
                                 GLchar *name,
                                 angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_length(const Context *context,
                                    bool isCallValid,
                                    GLuint program,
                                    GLuint index,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLint *size,
                                    GLenum *type,
                                    GLchar *name,
                                    angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_size(const Context *context,
                                  bool isCallValid,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_type(const Context *context,
                                  bool isCallValid,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  angle::ParamCapture *paramCapture);
void CaptureGetActiveUniform_name(const Context *context,
                                  bool isCallValid,
                                  GLuint program,
                                  GLuint index,
                                  GLsizei bufSize,
                                  GLsizei *length,
                                  GLint *size,
                                  GLenum *type,
                                  GLchar *name,
                                  angle::ParamCapture *paramCapture);
void CaptureGetAttachedShaders_count(const Context *context,
                                     bool isCallValid,
                                     GLuint program,
                                     GLsizei maxCount,
                                     GLsizei *count,
                                     GLuint *shaders,
                                     angle::ParamCapture *paramCapture);
void CaptureGetAttachedShaders_shaders(const Context *context,
                                       bool isCallValid,
                                       GLuint program,
                                       GLsizei maxCount,
                                       GLsizei *count,
                                       GLuint *shaders,
                                       angle::ParamCapture *paramCapture);
void CaptureGetAttribLocation_name(const Context *context,
                                   bool isCallValid,
                                   GLuint program,
                                   const GLchar *name,
                                   angle::ParamCapture *paramCapture);
void CaptureGetBooleanv_data(const Context *context,
                             bool isCallValid,
                             GLenum pname,
                             GLboolean *data,
                             angle::ParamCapture *paramCapture);
void CaptureGetBufferParameteriv_params(const Context *context,
                                        bool isCallValid,
                                        BufferBinding targetPacked,
                                        GLenum pname,
                                        GLint *params,
                                        angle::ParamCapture *paramCapture);
void CaptureGetFloatv_data(const Context *context,
                           bool isCallValid,
                           GLenum pname,
                           GLfloat *data,
                           angle::ParamCapture *paramCapture);
void CaptureGetFramebufferAttachmentParameteriv_params(const Context *context,
                                                       bool isCallValid,
                                                       GLenum target,
                                                       GLenum attachment,
                                                       GLenum pname,
                                                       GLint *params,
                                                       angle::ParamCapture *paramCapture);
void CaptureGetIntegerv_data(const Context *context,
                             bool isCallValid,
                             GLenum pname,
                             GLint *data,
                             angle::ParamCapture *paramCapture);
void CaptureGetProgramInfoLog_length(const Context *context,
                                     bool isCallValid,
                                     GLuint program,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLchar *infoLog,
                                     angle::ParamCapture *paramCapture);
void CaptureGetProgramInfoLog_infoLog(const Context *context,
                                      bool isCallValid,
                                      GLuint program,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *infoLog,
                                      angle::ParamCapture *paramCapture);
void CaptureGetProgramiv_params(const Context *context,
                                bool isCallValid,
                                GLuint program,
                                GLenum pname,
                                GLint *params,
                                angle::ParamCapture *paramCapture);
void CaptureGetRenderbufferParameteriv_params(const Context *context,
                                              bool isCallValid,
                                              GLenum target,
                                              GLenum pname,
                                              GLint *params,
                                              angle::ParamCapture *paramCapture);
void CaptureGetShaderInfoLog_length(const Context *context,
                                    bool isCallValid,
                                    GLuint shader,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLchar *infoLog,
                                    angle::ParamCapture *paramCapture);
void CaptureGetShaderInfoLog_infoLog(const Context *context,
                                     bool isCallValid,
                                     GLuint shader,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLchar *infoLog,
                                     angle::ParamCapture *paramCapture);
void CaptureGetShaderPrecisionFormat_range(const Context *context,
                                           bool isCallValid,
                                           GLenum shadertype,
                                           GLenum precisiontype,
                                           GLint *range,
                                           GLint *precision,
                                           angle::ParamCapture *paramCapture);
void CaptureGetShaderPrecisionFormat_precision(const Context *context,
                                               bool isCallValid,
                                               GLenum shadertype,
                                               GLenum precisiontype,
                                               GLint *range,
                                               GLint *precision,
                                               angle::ParamCapture *paramCapture);
void CaptureGetShaderSource_length(const Context *context,
                                   bool isCallValid,
                                   GLuint shader,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *source,
                                   angle::ParamCapture *paramCapture);
void CaptureGetShaderSource_source(const Context *context,
                                   bool isCallValid,
                                   GLuint shader,
                                   GLsizei bufSize,
                                   GLsizei *length,
                                   GLchar *source,
                                   angle::ParamCapture *paramCapture);
void CaptureGetShaderiv_params(const Context *context,
                               bool isCallValid,
                               GLuint shader,
                               GLenum pname,
                               GLint *params,
                               angle::ParamCapture *paramCapture);
void CaptureGetTexParameterfv_params(const Context *context,
                                     bool isCallValid,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLfloat *params,
                                     angle::ParamCapture *paramCapture);
void CaptureGetTexParameteriv_params(const Context *context,
                                     bool isCallValid,
                                     TextureType targetPacked,
                                     GLenum pname,
                                     GLint *params,
                                     angle::ParamCapture *paramCapture);
void CaptureGetUniformLocation_name(const Context *context,
                                    bool isCallValid,
                                    GLuint program,
                                    const GLchar *name,
                                    angle::ParamCapture *paramCapture);
void CaptureGetUniformfv_params(const Context *context,
                                bool isCallValid,
                                GLuint program,
                                GLint location,
                                GLfloat *params,
                                angle::ParamCapture *paramCapture);
void CaptureGetUniformiv_params(const Context *context,
                                bool isCallValid,
                                GLuint program,
                                GLint location,
                                GLint *params,
                                angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribPointerv_pointer(const Context *context,
                                            bool isCallValid,
                                            GLuint index,
                                            GLenum pname,
                                            void **pointer,
                                            angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribfv_params(const Context *context,
                                     bool isCallValid,
                                     GLuint index,
                                     GLenum pname,
                                     GLfloat *params,
                                     angle::ParamCapture *paramCapture);
void CaptureGetVertexAttribiv_params(const Context *context,
                                     bool isCallValid,
                                     GLuint index,
                                     GLenum pname,
                                     GLint *params,
                                     angle::ParamCapture *paramCapture);
void CaptureReadPixels_pixels(const Context *context,
                              bool isCallValid,
                              GLint x,
                              GLint y,
                              GLsizei width,
                              GLsizei height,
                              GLenum format,
                              GLenum type,
                              void *pixels,
                              angle::ParamCapture *paramCapture);
void CaptureShaderBinary_shaders(const Context *context,
                                 bool isCallValid,
                                 GLsizei count,
                                 const GLuint *shaders,
                                 GLenum binaryformat,
                                 const void *binary,
                                 GLsizei length,
                                 angle::ParamCapture *paramCapture);
void CaptureShaderBinary_binary(const Context *context,
                                bool isCallValid,
                                GLsizei count,
                                const GLuint *shaders,
                                GLenum binaryformat,
                                const void *binary,
                                GLsizei length,
                                angle::ParamCapture *paramCapture);
void CaptureShaderSource_string(const Context *context,
                                bool isCallValid,
                                GLuint shader,
                                GLsizei count,
                                const GLchar *const *string,
                                const GLint *length,
                                angle::ParamCapture *paramCapture);
void CaptureShaderSource_length(const Context *context,
                                bool isCallValid,
                                GLuint shader,
                                GLsizei count,
                                const GLchar *const *string,
                                const GLint *length,
                                angle::ParamCapture *paramCapture);
void CaptureTexImage2D_pixels(const Context *context,
                              bool isCallValid,
                              TextureTarget targetPacked,
                              GLint level,
                              GLint internalformat,
                              GLsizei width,
                              GLsizei height,
                              GLint border,
                              GLenum format,
                              GLenum type,
                              const void *pixels,
                              angle::ParamCapture *paramCapture);
void CaptureTexParameterfv_params(const Context *context,
                                  bool isCallValid,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLfloat *params,
                                  angle::ParamCapture *paramCapture);
void CaptureTexParameteriv_params(const Context *context,
                                  bool isCallValid,
                                  TextureType targetPacked,
                                  GLenum pname,
                                  const GLint *params,
                                  angle::ParamCapture *paramCapture);
void CaptureTexSubImage2D_pixels(const Context *context,
                                 bool isCallValid,
                                 TextureTarget targetPacked,
                                 GLint level,
                                 GLint xoffset,
                                 GLint yoffset,
                                 GLsizei width,
                                 GLsizei height,
                                 GLenum format,
                                 GLenum type,
                                 const void *pixels,
                                 angle::ParamCapture *paramCapture);
void CaptureUniform1fv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform1iv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform2fv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform2iv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform3fv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform3iv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform4fv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLfloat *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniform4iv_value(const Context *context,
                             bool isCallValid,
                             GLint location,
                             GLsizei count,
                             const GLint *value,
                             angle::ParamCapture *paramCapture);
void CaptureUniformMatrix2fv_value(const Context *context,
                                   bool isCallValid,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   angle::ParamCapture *paramCapture);
void CaptureUniformMatrix3fv_value(const Context *context,
                                   bool isCallValid,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   angle::ParamCapture *paramCapture);
void CaptureUniformMatrix4fv_value(const Context *context,
                                   bool isCallValid,
                                   GLint location,
                                   GLsizei count,
                                   GLboolean transpose,
                                   const GLfloat *value,
                                   angle::ParamCapture *paramCapture);
void CaptureVertexAttrib1fv_v(const Context *context,
                              bool isCallValid,
                              GLuint index,
                              const GLfloat *v,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib2fv_v(const Context *context,
                              bool isCallValid,
                              GLuint index,
                              const GLfloat *v,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib3fv_v(const Context *context,
                              bool isCallValid,
                              GLuint index,
                              const GLfloat *v,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttrib4fv_v(const Context *context,
                              bool isCallValid,
                              GLuint index,
                              const GLfloat *v,
                              angle::ParamCapture *paramCapture);
void CaptureVertexAttribPointer_pointer(const Context *context,
                                        bool isCallValid,
                                        GLuint index,
                                        GLint size,
                                        VertexAttribType typePacked,
                                        GLboolean normalized,
                                        GLsizei stride,
                                        const void *pointer,
                                        angle::ParamCapture *paramCapture);
}  // namespace gl

#endif  // LIBANGLE_CAPTURE_GLES_2_0_AUTOGEN_H_
