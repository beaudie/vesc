// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationES32_autogen.h:
//   Validation functions for the OpenGL ES 3.2 entry points.

#ifndef LIBANGLE_VALIDATION_ES32_AUTOGEN_H_
#define LIBANGLE_VALIDATION_ES32_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateBlendBarrier(const Context *context);
bool ValidateBlendEquationSeparatei(const Context *context,
                                    const GLuint buf,
                                    const GLenum modeRGB,
                                    const GLenum modeAlpha);
bool ValidateBlendEquationi(const Context *context, const GLuint buf, const GLenum mode);
bool ValidateBlendFuncSeparatei(const Context *context,
                                const GLuint buf,
                                const GLenum srcRGB,
                                const GLenum dstRGB,
                                const GLenum srcAlpha,
                                const GLenum dstAlpha);
bool ValidateBlendFunci(const Context *context,
                        const GLuint buf,
                        const GLenum src,
                        const GLenum dst);
bool ValidateColorMaski(const Context *context,
                        const GLuint index,
                        const GLboolean r,
                        const GLboolean g,
                        const GLboolean b,
                        const GLboolean a);
bool ValidateCopyImageSubData(const Context *context,
                              const GLuint srcName,
                              const GLenum srcTarget,
                              const GLint srcLevel,
                              const GLint srcX,
                              const GLint srcY,
                              const GLint srcZ,
                              const GLuint dstName,
                              const GLenum dstTarget,
                              const GLint dstLevel,
                              const GLint dstX,
                              const GLint dstY,
                              const GLint dstZ,
                              const GLsizei srcWidth,
                              const GLsizei srcHeight,
                              const GLsizei srcDepth);
bool ValidateDebugMessageCallback(const Context *context,
                                  const GLDEBUGPROC callback,
                                  const void *userParam);
bool ValidateDebugMessageControl(const Context *context,
                                 const GLenum source,
                                 const GLenum type,
                                 const GLenum severity,
                                 const GLsizei count,
                                 const GLuint *ids,
                                 const GLboolean enabled);
bool ValidateDebugMessageInsert(const Context *context,
                                const GLenum source,
                                const GLenum type,
                                const GLuint id,
                                const GLenum severity,
                                const GLsizei length,
                                const GLchar *buf);
bool ValidateDisablei(const Context *context, const GLenum target, const GLuint index);
bool ValidateDrawElementsBaseVertex(const Context *context,
                                    const PrimitiveMode modePacked,
                                    const GLsizei count,
                                    const DrawElementsType typePacked,
                                    const void *indices,
                                    const GLint basevertex);
bool ValidateDrawElementsInstancedBaseVertex(const Context *context,
                                             const PrimitiveMode modePacked,
                                             const GLsizei count,
                                             const DrawElementsType typePacked,
                                             const void *indices,
                                             const GLsizei instancecount,
                                             const GLint basevertex);
bool ValidateDrawRangeElementsBaseVertex(const Context *context,
                                         const PrimitiveMode modePacked,
                                         const GLuint start,
                                         const GLuint end,
                                         const GLsizei count,
                                         const DrawElementsType typePacked,
                                         const void *indices,
                                         const GLint basevertex);
bool ValidateEnablei(const Context *context, const GLenum target, const GLuint index);
bool ValidateFramebufferTexture(const Context *context,
                                const GLenum target,
                                const GLenum attachment,
                                const TextureID texturePacked,
                                const GLint level);
bool ValidateGetDebugMessageLog(const Context *context,
                                const GLuint count,
                                const GLsizei bufSize,
                                const GLenum *sources,
                                const GLenum *types,
                                const GLuint *ids,
                                const GLenum *severities,
                                const GLsizei *lengths,
                                const GLchar *messageLog);
bool ValidateGetGraphicsResetStatus(const Context *context);
bool ValidateGetObjectLabel(const Context *context,
                            const GLenum identifier,
                            const GLuint name,
                            const GLsizei bufSize,
                            const GLsizei *length,
                            const GLchar *label);
bool ValidateGetObjectPtrLabel(const Context *context,
                               const void *ptr,
                               const GLsizei bufSize,
                               const GLsizei *length,
                               const GLchar *label);
bool ValidateGetPointerv(const Context *context, const GLenum pname, const void *const *params);
bool ValidateGetSamplerParameterIiv(const Context *context,
                                    const SamplerID samplerPacked,
                                    const GLenum pname,
                                    const GLint *params);
bool ValidateGetSamplerParameterIuiv(const Context *context,
                                     const SamplerID samplerPacked,
                                     const GLenum pname,
                                     const GLuint *params);
bool ValidateGetTexParameterIiv(const Context *context,
                                const TextureType targetPacked,
                                const GLenum pname,
                                const GLint *params);
bool ValidateGetTexParameterIuiv(const Context *context,
                                 const TextureType targetPacked,
                                 const GLenum pname,
                                 const GLuint *params);
bool ValidateGetnUniformfv(const Context *context,
                           const ShaderProgramID programPacked,
                           const GLint location,
                           const GLsizei bufSize,
                           const GLfloat *params);
bool ValidateGetnUniformiv(const Context *context,
                           const ShaderProgramID programPacked,
                           const GLint location,
                           const GLsizei bufSize,
                           const GLint *params);
bool ValidateGetnUniformuiv(const Context *context,
                            const ShaderProgramID programPacked,
                            const GLint location,
                            const GLsizei bufSize,
                            const GLuint *params);
bool ValidateIsEnabledi(const Context *context, const GLenum target, const GLuint index);
bool ValidateMinSampleShading(const Context *context, const GLfloat value);
bool ValidateObjectLabel(const Context *context,
                         const GLenum identifier,
                         const GLuint name,
                         const GLsizei length,
                         const GLchar *label);
bool ValidateObjectPtrLabel(const Context *context,
                            const void *ptr,
                            const GLsizei length,
                            const GLchar *label);
bool ValidatePatchParameteri(const Context *context, const GLenum pname, const GLint value);
bool ValidatePopDebugGroup(const Context *context);
bool ValidatePrimitiveBoundingBox(const Context *context,
                                  const GLfloat minX,
                                  const GLfloat minY,
                                  const GLfloat minZ,
                                  const GLfloat minW,
                                  const GLfloat maxX,
                                  const GLfloat maxY,
                                  const GLfloat maxZ,
                                  const GLfloat maxW);
bool ValidatePushDebugGroup(const Context *context,
                            const GLenum source,
                            const GLuint id,
                            const GLsizei length,
                            const GLchar *message);
bool ValidateReadnPixels(const Context *context,
                         const GLint x,
                         const GLint y,
                         const GLsizei width,
                         const GLsizei height,
                         const GLenum format,
                         const GLenum type,
                         const GLsizei bufSize,
                         const void *data);
bool ValidateSamplerParameterIiv(const Context *context,
                                 const SamplerID samplerPacked,
                                 const GLenum pname,
                                 const GLint *param);
bool ValidateSamplerParameterIuiv(const Context *context,
                                  const SamplerID samplerPacked,
                                  const GLenum pname,
                                  const GLuint *param);
bool ValidateTexBuffer(const Context *context,
                       const GLenum target,
                       const GLenum internalformat,
                       const BufferID bufferPacked);
bool ValidateTexBufferRange(const Context *context,
                            const GLenum target,
                            const GLenum internalformat,
                            const BufferID bufferPacked,
                            const GLintptr offset,
                            const GLsizeiptr size);
bool ValidateTexParameterIiv(const Context *context,
                             const TextureType targetPacked,
                             const GLenum pname,
                             const GLint *params);
bool ValidateTexParameterIuiv(const Context *context,
                              const TextureType targetPacked,
                              const GLenum pname,
                              const GLuint *params);
bool ValidateTexStorage3DMultisample(const Context *context,
                                     const TextureType targetPacked,
                                     const GLsizei samples,
                                     const GLenum internalformat,
                                     const GLsizei width,
                                     const GLsizei height,
                                     const GLsizei depth,
                                     const GLboolean fixedsamplelocations);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_ES32_AUTOGEN_H_
