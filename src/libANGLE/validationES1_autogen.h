// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml and gl_angle_ext.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// validationES1_autogen.h:
//   Validation functions for the OpenGL ES 1.0 entry points.

#ifndef LIBANGLE_VALIDATION_ES1_AUTOGEN_H_
#define LIBANGLE_VALIDATION_ES1_AUTOGEN_H_

#include "common/PackedEnums.h"

namespace gl
{
class Context;

bool ValidateAlphaFunc(const Context *context, const AlphaTestFunc funcPacked, const GLfloat ref);
bool ValidateAlphaFuncx(const Context *context, const AlphaTestFunc funcPacked, const GLfixed ref);
bool ValidateClearColorx(const Context *context,
                         const GLfixed red,
                         const GLfixed green,
                         const GLfixed blue,
                         const GLfixed alpha);
bool ValidateClearDepthx(const Context *context, const GLfixed depth);
bool ValidateClientActiveTexture(const Context *context, const GLenum texture);
bool ValidateClipPlanef(const Context *context, const GLenum p, const GLfloat *eqn);
bool ValidateClipPlanex(const Context *context, const GLenum plane, const GLfixed *equation);
bool ValidateColor4f(const Context *context,
                     const GLfloat red,
                     const GLfloat green,
                     const GLfloat blue,
                     const GLfloat alpha);
bool ValidateColor4ub(const Context *context,
                      const GLubyte red,
                      const GLubyte green,
                      const GLubyte blue,
                      const GLubyte alpha);
bool ValidateColor4x(const Context *context,
                     const GLfixed red,
                     const GLfixed green,
                     const GLfixed blue,
                     const GLfixed alpha);
bool ValidateColorPointer(const Context *context,
                          const GLint size,
                          const VertexAttribType typePacked,
                          const GLsizei stride,
                          const void *pointer);
bool ValidateDepthRangex(const Context *context, const GLfixed n, const GLfixed f);
bool ValidateDisableClientState(const Context *context, const ClientVertexArrayType arrayPacked);
bool ValidateEnableClientState(const Context *context, const ClientVertexArrayType arrayPacked);
bool ValidateFogf(const Context *context, const GLenum pname, const GLfloat param);
bool ValidateFogfv(const Context *context, const GLenum pname, const GLfloat *params);
bool ValidateFogx(const Context *context, const GLenum pname, const GLfixed param);
bool ValidateFogxv(const Context *context, const GLenum pname, const GLfixed *param);
bool ValidateFrustumf(const Context *context,
                      const GLfloat l,
                      const GLfloat r,
                      const GLfloat b,
                      const GLfloat t,
                      const GLfloat n,
                      const GLfloat f);
bool ValidateFrustumx(const Context *context,
                      const GLfixed l,
                      const GLfixed r,
                      const GLfixed b,
                      const GLfixed t,
                      const GLfixed n,
                      const GLfixed f);
bool ValidateGetClipPlanef(const Context *context, const GLenum plane, const GLfloat *equation);
bool ValidateGetClipPlanex(const Context *context, const GLenum plane, const GLfixed *equation);
bool ValidateGetFixedv(const Context *context, const GLenum pname, const GLfixed *params);
bool ValidateGetLightfv(const Context *context,
                        const GLenum light,
                        const LightParameter pnamePacked,
                        const GLfloat *params);
bool ValidateGetLightxv(const Context *context,
                        const GLenum light,
                        const LightParameter pnamePacked,
                        const GLfixed *params);
bool ValidateGetMaterialfv(const Context *context,
                           const GLenum face,
                           const MaterialParameter pnamePacked,
                           const GLfloat *params);
bool ValidateGetMaterialxv(const Context *context,
                           const GLenum face,
                           const MaterialParameter pnamePacked,
                           const GLfixed *params);
bool ValidateGetTexEnvfv(const Context *context,
                         const TextureEnvTarget targetPacked,
                         const TextureEnvParameter pnamePacked,
                         const GLfloat *params);
bool ValidateGetTexEnviv(const Context *context,
                         const TextureEnvTarget targetPacked,
                         const TextureEnvParameter pnamePacked,
                         const GLint *params);
bool ValidateGetTexEnvxv(const Context *context,
                         const TextureEnvTarget targetPacked,
                         const TextureEnvParameter pnamePacked,
                         const GLfixed *params);
bool ValidateGetTexParameterxv(const Context *context,
                               const TextureType targetPacked,
                               const GLenum pname,
                               const GLfixed *params);
bool ValidateLightModelf(const Context *context, const GLenum pname, const GLfloat param);
bool ValidateLightModelfv(const Context *context, const GLenum pname, const GLfloat *params);
bool ValidateLightModelx(const Context *context, const GLenum pname, const GLfixed param);
bool ValidateLightModelxv(const Context *context, const GLenum pname, const GLfixed *param);
bool ValidateLightf(const Context *context,
                    const GLenum light,
                    const LightParameter pnamePacked,
                    const GLfloat param);
bool ValidateLightfv(const Context *context,
                     const GLenum light,
                     const LightParameter pnamePacked,
                     const GLfloat *params);
bool ValidateLightx(const Context *context,
                    const GLenum light,
                    const LightParameter pnamePacked,
                    const GLfixed param);
bool ValidateLightxv(const Context *context,
                     const GLenum light,
                     const LightParameter pnamePacked,
                     const GLfixed *params);
bool ValidateLineWidthx(const Context *context, const GLfixed width);
bool ValidateLoadIdentity(const Context *context);
bool ValidateLoadMatrixf(const Context *context, const GLfloat *m);
bool ValidateLoadMatrixx(const Context *context, const GLfixed *m);
bool ValidateLogicOp(const Context *context, const LogicalOperation opcodePacked);
bool ValidateMaterialf(const Context *context,
                       const GLenum face,
                       const MaterialParameter pnamePacked,
                       const GLfloat param);
bool ValidateMaterialfv(const Context *context,
                        const GLenum face,
                        const MaterialParameter pnamePacked,
                        const GLfloat *params);
bool ValidateMaterialx(const Context *context,
                       const GLenum face,
                       const MaterialParameter pnamePacked,
                       const GLfixed param);
bool ValidateMaterialxv(const Context *context,
                        const GLenum face,
                        const MaterialParameter pnamePacked,
                        const GLfixed *param);
bool ValidateMatrixMode(const Context *context, const MatrixType modePacked);
bool ValidateMultMatrixf(const Context *context, const GLfloat *m);
bool ValidateMultMatrixx(const Context *context, const GLfixed *m);
bool ValidateMultiTexCoord4f(const Context *context,
                             const GLenum target,
                             const GLfloat s,
                             const GLfloat t,
                             const GLfloat r,
                             const GLfloat q);
bool ValidateMultiTexCoord4x(const Context *context,
                             const GLenum texture,
                             const GLfixed s,
                             const GLfixed t,
                             const GLfixed r,
                             const GLfixed q);
bool ValidateNormal3f(const Context *context, const GLfloat nx, const GLfloat ny, const GLfloat nz);
bool ValidateNormal3x(const Context *context, const GLfixed nx, const GLfixed ny, const GLfixed nz);
bool ValidateNormalPointer(const Context *context,
                           const VertexAttribType typePacked,
                           const GLsizei stride,
                           const void *pointer);
bool ValidateOrthof(const Context *context,
                    const GLfloat l,
                    const GLfloat r,
                    const GLfloat b,
                    const GLfloat t,
                    const GLfloat n,
                    const GLfloat f);
bool ValidateOrthox(const Context *context,
                    const GLfixed l,
                    const GLfixed r,
                    const GLfixed b,
                    const GLfixed t,
                    const GLfixed n,
                    const GLfixed f);
bool ValidatePointParameterf(const Context *context,
                             const PointParameter pnamePacked,
                             const GLfloat param);
bool ValidatePointParameterfv(const Context *context,
                              const PointParameter pnamePacked,
                              const GLfloat *params);
bool ValidatePointParameterx(const Context *context,
                             const PointParameter pnamePacked,
                             const GLfixed param);
bool ValidatePointParameterxv(const Context *context,
                              const PointParameter pnamePacked,
                              const GLfixed *params);
bool ValidatePointSize(const Context *context, const GLfloat size);
bool ValidatePointSizex(const Context *context, const GLfixed size);
bool ValidatePolygonOffsetx(const Context *context, const GLfixed factor, const GLfixed units);
bool ValidatePopMatrix(const Context *context);
bool ValidatePushMatrix(const Context *context);
bool ValidateRotatef(const Context *context,
                     const GLfloat angle,
                     const GLfloat x,
                     const GLfloat y,
                     const GLfloat z);
bool ValidateRotatex(const Context *context,
                     const GLfixed angle,
                     const GLfixed x,
                     const GLfixed y,
                     const GLfixed z);
bool ValidateSampleCoveragex(const Context *context, const GLclampx value, const GLboolean invert);
bool ValidateScalef(const Context *context, const GLfloat x, const GLfloat y, const GLfloat z);
bool ValidateScalex(const Context *context, const GLfixed x, const GLfixed y, const GLfixed z);
bool ValidateShadeModel(const Context *context, const ShadingModel modePacked);
bool ValidateTexCoordPointer(const Context *context,
                             const GLint size,
                             const VertexAttribType typePacked,
                             const GLsizei stride,
                             const void *pointer);
bool ValidateTexEnvf(const Context *context,
                     const TextureEnvTarget targetPacked,
                     const TextureEnvParameter pnamePacked,
                     const GLfloat param);
bool ValidateTexEnvfv(const Context *context,
                      const TextureEnvTarget targetPacked,
                      const TextureEnvParameter pnamePacked,
                      const GLfloat *params);
bool ValidateTexEnvi(const Context *context,
                     const TextureEnvTarget targetPacked,
                     const TextureEnvParameter pnamePacked,
                     const GLint param);
bool ValidateTexEnviv(const Context *context,
                      const TextureEnvTarget targetPacked,
                      const TextureEnvParameter pnamePacked,
                      const GLint *params);
bool ValidateTexEnvx(const Context *context,
                     const TextureEnvTarget targetPacked,
                     const TextureEnvParameter pnamePacked,
                     const GLfixed param);
bool ValidateTexEnvxv(const Context *context,
                      const TextureEnvTarget targetPacked,
                      const TextureEnvParameter pnamePacked,
                      const GLfixed *params);
bool ValidateTexParameterx(const Context *context,
                           const TextureType targetPacked,
                           const GLenum pname,
                           const GLfixed param);
bool ValidateTexParameterxv(const Context *context,
                            const TextureType targetPacked,
                            const GLenum pname,
                            const GLfixed *params);
bool ValidateTranslatef(const Context *context, const GLfloat x, const GLfloat y, const GLfloat z);
bool ValidateTranslatex(const Context *context, const GLfixed x, const GLfixed y, const GLfixed z);
bool ValidateVertexPointer(const Context *context,
                           const GLint size,
                           const VertexAttribType typePacked,
                           const GLsizei stride,
                           const void *pointer);
}  // namespace gl

#endif  // LIBANGLE_VALIDATION_ES1_AUTOGEN_H_
