// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_1_0_autogen.h:
//   Defines the GLES 1.0 entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_1_0_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_1_0_AUTOGEN_H_

#if defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES

#if defined(GL_GLEXT_PROTOTYPES)
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLEXT_PROTOTYPES)

#include <GLES/gl.h>
#include <export.h>

extern "C" {
ANGLE_EXPORT void GL_APIENTRY glAlphaFunc(GLenum func, GLfloat ref);
ANGLE_EXPORT void GL_APIENTRY glAlphaFuncx(GLenum func, GLfixed ref);
ANGLE_EXPORT void GL_APIENTRY glClearColorx(GLfixed red,
                                            GLfixed green,
                                            GLfixed blue,
                                            GLfixed alpha);
ANGLE_EXPORT void GL_APIENTRY glClearDepthx(GLfixed depth);
ANGLE_EXPORT void GL_APIENTRY glClientActiveTexture(GLenum texture);
ANGLE_EXPORT void GL_APIENTRY glClipPlanef(GLenum p, const GLfloat *eqn);
ANGLE_EXPORT void GL_APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation);
ANGLE_EXPORT void GL_APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
ANGLE_EXPORT void GL_APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
ANGLE_EXPORT void GL_APIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
ANGLE_EXPORT void GL_APIENTRY glColorPointer(GLint size,
                                             GLenum type,
                                             GLsizei stride,
                                             const void *pointer);
ANGLE_EXPORT void GL_APIENTRY glDepthRangex(GLfixed n, GLfixed f);
ANGLE_EXPORT void GL_APIENTRY glDisableClientState(GLenum array);
ANGLE_EXPORT void GL_APIENTRY glEnableClientState(GLenum array);
ANGLE_EXPORT void GL_APIENTRY glFogf(GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glFogfv(GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glFogx(GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glFogxv(GLenum pname, const GLfixed *param);
ANGLE_EXPORT void GL_APIENTRY
glFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
ANGLE_EXPORT void GL_APIENTRY
glFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
ANGLE_EXPORT void GL_APIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation);
ANGLE_EXPORT void GL_APIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation);
ANGLE_EXPORT void GL_APIENTRY glGetFixedv(GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glGetPointerv(GLenum pname, void **params);
ANGLE_EXPORT void GL_APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glLightModelf(GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glLightModelx(GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glLightModelxv(GLenum pname, const GLfixed *param);
ANGLE_EXPORT void GL_APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glLightx(GLenum light, GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glLineWidthx(GLfixed width);
ANGLE_EXPORT void GL_APIENTRY glLoadIdentity();
ANGLE_EXPORT void GL_APIENTRY glLoadMatrixf(const GLfloat *m);
ANGLE_EXPORT void GL_APIENTRY glLoadMatrixx(const GLfixed *m);
ANGLE_EXPORT void GL_APIENTRY glLogicOp(GLenum opcode);
ANGLE_EXPORT void GL_APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *param);
ANGLE_EXPORT void GL_APIENTRY glMatrixMode(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY glMultMatrixf(const GLfloat *m);
ANGLE_EXPORT void GL_APIENTRY glMultMatrixx(const GLfixed *m);
ANGLE_EXPORT void GL_APIENTRY
glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
ANGLE_EXPORT void GL_APIENTRY
glMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
ANGLE_EXPORT void GL_APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
ANGLE_EXPORT void GL_APIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz);
ANGLE_EXPORT void GL_APIENTRY glNormalPointer(GLenum type, GLsizei stride, const void *pointer);
ANGLE_EXPORT void GL_APIENTRY
glOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
ANGLE_EXPORT void GL_APIENTRY
glOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
ANGLE_EXPORT void GL_APIENTRY glPointParameterf(GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glPointParameterx(GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glPointSize(GLfloat size);
ANGLE_EXPORT void GL_APIENTRY glPointSizex(GLfixed size);
ANGLE_EXPORT void GL_APIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units);
ANGLE_EXPORT void GL_APIENTRY glPopMatrix();
ANGLE_EXPORT void GL_APIENTRY glPushMatrix();
ANGLE_EXPORT void GL_APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
ANGLE_EXPORT void GL_APIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
ANGLE_EXPORT void GL_APIENTRY glSampleCoveragex(GLclampx value, GLboolean invert);
ANGLE_EXPORT void GL_APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
ANGLE_EXPORT void GL_APIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z);
ANGLE_EXPORT void GL_APIENTRY glShadeModel(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY glTexCoordPointer(GLint size,
                                                GLenum type,
                                                GLsizei stride,
                                                const void *pointer);
ANGLE_EXPORT void GL_APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param);
ANGLE_EXPORT void GL_APIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params);
ANGLE_EXPORT void GL_APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
ANGLE_EXPORT void GL_APIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z);
ANGLE_EXPORT void GL_APIENTRY glVertexPointer(GLint size,
                                              GLenum type,
                                              GLsizei stride,
                                              const void *pointer);
}  // extern "C"

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_1_0_AUTOGEN_H_
