// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_3_1_autogen.cpp:
//   Layer functions for the OpenGL ES 3.1 entry points.

#include "libGLESv2/layer_entry_points_gles_3_1_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_ActiveShaderProgram(GLuint pipeline, GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glActiveShaderProgram(pipeline = %u, program = %u)", pipeline,
                 program);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLActiveShaderProgram), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glActiveShaderProgram  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glActiveShaderProgram"];
    PFNGLACTIVESHADERPROGRAMPROC next = reinterpret_cast<PFNGLACTIVESHADERPROGRAMPROC>(entry);
    next(pipeline, program);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindImageTexture(GLuint unit,
                                     GLuint texture,
                                     GLint level,
                                     GLboolean layered,
                                     GLint layer,
                                     GLenum access,
                                     GLenum format)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindImageTexture(unit = %u, texture = %u, level = %d, layered = %s, layer = "
                 "%d, access = %s, format = %s)",
                 unit, texture, level, GLbooleanToString(layered), layer,
                 GLenumToString(GLenumGroup::BufferAccessARB, access),
                 GLenumToString(GLenumGroup::InternalFormat, format));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindImageTexture), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindImageTexture  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glBindImageTexture"];
    PFNGLBINDIMAGETEXTUREPROC next = reinterpret_cast<PFNGLBINDIMAGETEXTUREPROC>(entry);
    next(unit, texture, level, layered, layer, access, format);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindProgramPipeline(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindProgramPipeline(pipeline = %u)", pipeline);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindProgramPipeline), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindProgramPipeline  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glBindProgramPipeline"];
    PFNGLBINDPROGRAMPIPELINEPROC next = reinterpret_cast<PFNGLBINDPROGRAMPIPELINEPROC>(entry);
    next(pipeline);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindVertexBuffer(GLuint bindingindex,
                                     GLuint buffer,
                                     GLintptr offset,
                                     GLsizei stride)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindVertexBuffer(bindingindex = %u, buffer = %u, offset = %llu, stride = %d)",
                 bindingindex, buffer, static_cast<unsigned long long>(offset), stride);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindVertexBuffer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindVertexBuffer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glBindVertexBuffer"];
    PFNGLBINDVERTEXBUFFERPROC next = reinterpret_cast<PFNGLBINDVERTEXBUFFERPROC>(entry);
    next(bindingindex, buffer, offset, stride);

    g_pop_debug_group();
}

GLuint GL_APIENTRY GL_CreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const *strings)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCreateShaderProgramv(type = %s, count = %d, strings = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::ShaderType, type), count, (uintptr_t)strings);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCreateShaderProgramv), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glCreateShaderProgramv");

    // Call down to the next layer
    void *entry                        = funcMap["glCreateShaderProgramv"];
    PFNGLCREATESHADERPROGRAMVPROC next = reinterpret_cast<PFNGLCREATESHADERPROGRAMVPROC>(entry);
    GLuint ret                         = next(type, count, strings);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_DeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteProgramPipelines(n = %d, pipelines = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)pipelines);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteProgramPipelines), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteProgramPipelines  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDeleteProgramPipelines"];
    PFNGLDELETEPROGRAMPIPELINESPROC next = reinterpret_cast<PFNGLDELETEPROGRAMPIPELINESPROC>(entry);
    next(n, pipelines);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDispatchCompute(num_groups_x = %u, num_groups_y = %u, num_groups_z = %u)",
                 num_groups_x, num_groups_y, num_groups_z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDispatchCompute), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDispatchCompute  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glDispatchCompute"];
    PFNGLDISPATCHCOMPUTEPROC next = reinterpret_cast<PFNGLDISPATCHCOMPUTEPROC>(entry);
    next(num_groups_x, num_groups_y, num_groups_z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DispatchComputeIndirect(GLintptr indirect)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDispatchComputeIndirect(indirect = %llu)",
                 static_cast<unsigned long long>(indirect));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDispatchComputeIndirect), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDispatchComputeIndirect  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDispatchComputeIndirect"];
    PFNGLDISPATCHCOMPUTEINDIRECTPROC next =
        reinterpret_cast<PFNGLDISPATCHCOMPUTEINDIRECTPROC>(entry);
    next(indirect);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawArraysIndirect(GLenum mode, const void *indirect)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawArraysIndirect(mode = %s, indirect = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::PrimitiveType, mode), (uintptr_t)indirect);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawArraysIndirect), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawArraysIndirect  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glDrawArraysIndirect"];
    PFNGLDRAWARRAYSINDIRECTPROC next = reinterpret_cast<PFNGLDRAWARRAYSINDIRECTPROC>(entry);
    next(mode, indirect);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsIndirect(mode = %s, type = %s, indirect = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::PrimitiveType, mode),
                 GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indirect);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawElementsIndirect), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawElementsIndirect  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glDrawElementsIndirect"];
    PFNGLDRAWELEMENTSINDIRECTPROC next = reinterpret_cast<PFNGLDRAWELEMENTSINDIRECTPROC>(entry);
    next(mode, type, indirect);

    g_pop_debug_group();
}

void GL_APIENTRY GL_FramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFramebufferParameteri(target = %s, pname = %s, param = %d)",
                 GLenumToString(GLenumGroup::FramebufferTarget, target),
                 GLenumToString(GLenumGroup::FramebufferParameterName, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFramebufferParameteri), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFramebufferParameteri  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glFramebufferParameteri"];
    PFNGLFRAMEBUFFERPARAMETERIPROC next = reinterpret_cast<PFNGLFRAMEBUFFERPARAMETERIPROC>(entry);
    next(target, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GenProgramPipelines(GLsizei n, GLuint *pipelines)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenProgramPipelines(n = %d, pipelines = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)pipelines);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGenProgramPipelines), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGenProgramPipelines  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGenProgramPipelines"];
    PFNGLGENPROGRAMPIPELINESPROC next = reinterpret_cast<PFNGLGENPROGRAMPIPELINESPROC>(entry);
    next(n, pipelines);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBooleani_v(target = %s, index = %u, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::BufferTargetARB, target), index, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetBooleani_v), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetBooleani_v  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetBooleani_v"];
    PFNGLGETBOOLEANI_VPROC next = reinterpret_cast<PFNGLGETBOOLEANI_VPROC>(entry);
    next(target, index, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFramebufferParameteriv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::FramebufferTarget, target),
                 GLenumToString(GLenumGroup::FramebufferAttachmentParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferParameteriv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetFramebufferParameteriv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferParameteriv"];
    PFNGLGETFRAMEBUFFERPARAMETERIVPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERPARAMETERIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetMultisamplefv(pname = %s, index = %u, val = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::DefaultGroup, pname), index, (uintptr_t)val);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetMultisamplefv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetMultisamplefv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetMultisamplefv"];
    PFNGLGETMULTISAMPLEFVPROC next = reinterpret_cast<PFNGLGETMULTISAMPLEFVPROC>(entry);
    next(pname, index, val);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetProgramInterfaceiv(GLuint program,
                                          GLenum programInterface,
                                          GLenum pname,
                                          GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramInterfaceiv(program = %u, programInterface = %s, pname = %s, params "
                 "= 0x%016" PRIxPTR ")",
                 program, GLenumToString(GLenumGroup::ProgramInterface, programInterface),
                 GLenumToString(GLenumGroup::ProgramInterfacePName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramInterfaceiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramInterfaceiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetProgramInterfaceiv"];
    PFNGLGETPROGRAMINTERFACEIVPROC next = reinterpret_cast<PFNGLGETPROGRAMINTERFACEIVPROC>(entry);
    next(program, programInterface, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetProgramPipelineInfoLog(GLuint pipeline,
                                              GLsizei bufSize,
                                              GLsizei *length,
                                              GLchar *infoLog)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramPipelineInfoLog(pipeline = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", infoLog = 0x%016" PRIxPTR ")",
                 pipeline, bufSize, (uintptr_t)length, (uintptr_t)infoLog);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramPipelineInfoLog), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramPipelineInfoLog  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramPipelineInfoLog"];
    PFNGLGETPROGRAMPIPELINEINFOLOGPROC next =
        reinterpret_cast<PFNGLGETPROGRAMPIPELINEINFOLOGPROC>(entry);
    next(pipeline, bufSize, length, infoLog);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramPipelineiv(pipeline = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 pipeline, GLenumToString(GLenumGroup::PipelineParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramPipelineiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramPipelineiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetProgramPipelineiv"];
    PFNGLGETPROGRAMPIPELINEIVPROC next = reinterpret_cast<PFNGLGETPROGRAMPIPELINEIVPROC>(entry);
    next(pipeline, pname, params);

    g_pop_debug_group();
}

GLuint GL_APIENTRY GL_GetProgramResourceIndex(GLuint program,
                                              GLenum programInterface,
                                              const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetProgramResourceIndex(program = %u, programInterface = %s, name = 0x%016" PRIxPTR ")",
        program, GLenumToString(GLenumGroup::ProgramInterface, programInterface), (uintptr_t)name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramResourceIndex), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetProgramResourceIndex");

    // Call down to the next layer
    void *entry = funcMap["glGetProgramResourceIndex"];
    PFNGLGETPROGRAMRESOURCEINDEXPROC next =
        reinterpret_cast<PFNGLGETPROGRAMRESOURCEINDEXPROC>(entry);
    GLuint ret = next(program, programInterface, name);

    g_pop_debug_group();
    return ret;
}

GLint GL_APIENTRY GL_GetProgramResourceLocation(GLuint program,
                                                GLenum programInterface,
                                                const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetProgramResourceLocation(program = %u, programInterface = %s, name = 0x%016" PRIxPTR
        ")",
        program, GLenumToString(GLenumGroup::ProgramInterface, programInterface), (uintptr_t)name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramResourceLocation), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetProgramResourceLocation");

    // Call down to the next layer
    void *entry = funcMap["glGetProgramResourceLocation"];
    PFNGLGETPROGRAMRESOURCELOCATIONPROC next =
        reinterpret_cast<PFNGLGETPROGRAMRESOURCELOCATIONPROC>(entry);
    GLint ret = next(program, programInterface, name);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_GetProgramResourceName(GLuint program,
                                           GLenum programInterface,
                                           GLuint index,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramResourceName(program = %u, programInterface = %s, index = %u, "
                 "bufSize = %d, length = 0x%016" PRIxPTR ", name = 0x%016" PRIxPTR ")",
                 program, GLenumToString(GLenumGroup::ProgramInterface, programInterface), index,
                 bufSize, (uintptr_t)length, (uintptr_t)name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramResourceName), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramResourceName  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetProgramResourceName"];
    PFNGLGETPROGRAMRESOURCENAMEPROC next = reinterpret_cast<PFNGLGETPROGRAMRESOURCENAMEPROC>(entry);
    next(program, programInterface, index, bufSize, length, name);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetProgramResourceiv(GLuint program,
                                         GLenum programInterface,
                                         GLuint index,
                                         GLsizei propCount,
                                         const GLenum *props,
                                         GLsizei bufSize,
                                         GLsizei *length,
                                         GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramResourceiv(program = %u, programInterface = %s, index = %u, "
                 "propCount = %d, props = 0x%016" PRIxPTR ", bufSize = %d, length = 0x%016" PRIxPTR
                 ", params = 0x%016" PRIxPTR ")",
                 program, GLenumToString(GLenumGroup::ProgramInterface, programInterface), index,
                 propCount, (uintptr_t)props, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramResourceiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramResourceiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetProgramResourceiv"];
    PFNGLGETPROGRAMRESOURCEIVPROC next = reinterpret_cast<PFNGLGETPROGRAMRESOURCEIVPROC>(entry);
    next(program, programInterface, index, propCount, props, bufSize, length, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexLevelParameterfv(GLenum target,
                                           GLint level,
                                           GLenum pname,
                                           GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetTexLevelParameterfv(target = %s, level = %d, pname = %s, params = 0x%016" PRIxPTR ")",
        GLenumToString(GLenumGroup::TextureTarget, target), level,
        GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameterfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexLevelParameterfv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetTexLevelParameterfv"];
    PFNGLGETTEXLEVELPARAMETERFVPROC next = reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFVPROC>(entry);
    next(target, level, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetTexLevelParameteriv(target = %s, level = %d, pname = %s, params = 0x%016" PRIxPTR ")",
        GLenumToString(GLenumGroup::TextureTarget, target), level,
        GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameteriv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexLevelParameteriv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetTexLevelParameteriv"];
    PFNGLGETTEXLEVELPARAMETERIVPROC next = reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIVPROC>(entry);
    next(target, level, pname, params);

    g_pop_debug_group();
}

GLboolean GL_APIENTRY GL_IsProgramPipeline(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsProgramPipeline(pipeline = %u)", pipeline);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsProgramPipeline), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsProgramPipeline");

    // Call down to the next layer
    void *entry                     = funcMap["glIsProgramPipeline"];
    PFNGLISPROGRAMPIPELINEPROC next = reinterpret_cast<PFNGLISPROGRAMPIPELINEPROC>(entry);
    GLboolean ret                   = next(pipeline);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_MemoryBarrier(GLbitfield barriers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMemoryBarrier(barriers = %s)",
                 GLbitfieldToString(GLenumGroup::MemoryBarrierMask, barriers).c_str());
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMemoryBarrier), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMemoryBarrier  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glMemoryBarrier"];
    PFNGLMEMORYBARRIERPROC next = reinterpret_cast<PFNGLMEMORYBARRIERPROC>(entry);
    next(barriers);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MemoryBarrierByRegion(GLbitfield barriers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMemoryBarrierByRegion(barriers = %s)",
                 GLbitfieldToString(GLenumGroup::MemoryBarrierMask, barriers).c_str());
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMemoryBarrierByRegion), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMemoryBarrierByRegion  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glMemoryBarrierByRegion"];
    PFNGLMEMORYBARRIERBYREGIONPROC next = reinterpret_cast<PFNGLMEMORYBARRIERBYREGIONPROC>(entry);
    next(barriers);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1f(GLuint program, GLint location, GLfloat v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1f(program = %u, location = %d, v0 = %f)",
                 program, location, v0);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1f), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform1f"];
    PFNGLPROGRAMUNIFORM1FPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1FPROC>(entry);
    next(program, location, v0);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1fv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1fv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform1fv"];
    PFNGLPROGRAMUNIFORM1FVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1FVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1i(GLuint program, GLint location, GLint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1i(program = %u, location = %d, v0 = %d)",
                 program, location, v0);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1i), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1i  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform1i"];
    PFNGLPROGRAMUNIFORM1IPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1IPROC>(entry);
    next(program, location, v0);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1iv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1iv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1iv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1iv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform1iv"];
    PFNGLPROGRAMUNIFORM1IVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1IVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1ui(program = %u, location = %d, v0 = %u)",
                 program, location, v0);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1ui), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1ui  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform1ui"];
    PFNGLPROGRAMUNIFORM1UIPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1UIPROC>(entry);
    next(program, location, v0);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform1uiv(GLuint program,
                                       GLint location,
                                       GLsizei count,
                                       const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1uiv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform1uiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glProgramUniform1uiv"];
    PFNGLPROGRAMUNIFORM1UIVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1UIVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2f(program = %u, location = %d, v0 = %f, v1 = %f)", program,
                 location, v0, v1);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2f), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform2f"];
    PFNGLPROGRAMUNIFORM2FPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2FPROC>(entry);
    next(program, location, v0, v1);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2fv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2fv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform2fv"];
    PFNGLPROGRAMUNIFORM2FVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2FVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2i(program = %u, location = %d, v0 = %d, v1 = %d)", program,
                 location, v0, v1);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2i), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2i  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform2i"];
    PFNGLPROGRAMUNIFORM2IPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2IPROC>(entry);
    next(program, location, v0, v1);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2iv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2iv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2iv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2iv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform2iv"];
    PFNGLPROGRAMUNIFORM2IVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2IVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2ui(program = %u, location = %d, v0 = %u, v1 = %u)", program,
                 location, v0, v1);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2ui), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2ui  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform2ui"];
    PFNGLPROGRAMUNIFORM2UIPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2UIPROC>(entry);
    next(program, location, v0, v1);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform2uiv(GLuint program,
                                       GLint location,
                                       GLsizei count,
                                       const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2uiv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform2uiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glProgramUniform2uiv"];
    PFNGLPROGRAMUNIFORM2UIVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2UIVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_ProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3f(program = %u, location = %d, v0 = %f, v1 = %f, v2 = %f)",
                 program, location, v0, v1, v2);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3f), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform3f"];
    PFNGLPROGRAMUNIFORM3FPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3FPROC>(entry);
    next(program, location, v0, v1, v2);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform3fv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3fv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform3fv"];
    PFNGLPROGRAMUNIFORM3FVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3FVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3i(program = %u, location = %d, v0 = %d, v1 = %d, v2 = %d)",
                 program, location, v0, v1, v2);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3i), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3i  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform3i"];
    PFNGLPROGRAMUNIFORM3IPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3IPROC>(entry);
    next(program, location, v0, v1, v2);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform3iv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3iv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3iv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3iv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform3iv"];
    PFNGLPROGRAMUNIFORM3IVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3IVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_ProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3ui(program = %u, location = %d, v0 = %u, v1 = %u, v2 = %u)",
                 program, location, v0, v1, v2);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3ui), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3ui  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform3ui"];
    PFNGLPROGRAMUNIFORM3UIPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3UIPROC>(entry);
    next(program, location, v0, v1, v2);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform3uiv(GLuint program,
                                       GLint location,
                                       GLsizei count,
                                       const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3uiv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform3uiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glProgramUniform3uiv"];
    PFNGLPROGRAMUNIFORM3UIVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3UIVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_ProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4f(program = %u, location = %d, v0 = %f, v1 = %f, v2 = %f, v3 = %f)",
        program, location, v0, v1, v2, v3);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4f), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform4f"];
    PFNGLPROGRAMUNIFORM4FPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4FPROC>(entry);
    next(program, location, v0, v1, v2, v3);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform4fv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4fv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform4fv"];
    PFNGLPROGRAMUNIFORM4FVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4FVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_ProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4i(program = %u, location = %d, v0 = %d, v1 = %d, v2 = %d, v3 = %d)",
        program, location, v0, v1, v2, v3);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4i), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4i  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramUniform4i"];
    PFNGLPROGRAMUNIFORM4IPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4IPROC>(entry);
    next(program, location, v0, v1, v2, v3);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform4iv(GLuint program,
                                      GLint location,
                                      GLsizei count,
                                      const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4iv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4iv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4iv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform4iv"];
    PFNGLPROGRAMUNIFORM4IVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4IVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_ProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4ui(program = %u, location = %d, v0 = %u, v1 = %u, v2 = %u, v3 = %u)",
        program, location, v0, v1, v2, v3);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4ui), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4ui  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramUniform4ui"];
    PFNGLPROGRAMUNIFORM4UIPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4UIPROC>(entry);
    next(program, location, v0, v1, v2, v3);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniform4uiv(GLuint program,
                                       GLint location,
                                       GLsizei count,
                                       const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4uiv(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR ")",
        program, location, count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniform4uiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glProgramUniform4uiv"];
    PFNGLPROGRAMUNIFORM4UIVPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4UIVPROC>(entry);
    next(program, location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix2fv(GLuint program,
                                            GLint location,
                                            GLsizei count,
                                            GLboolean transpose,
                                            const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2fv"];
    PFNGLPROGRAMUNIFORMMATRIX2FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix2x3fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2x3fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2x3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix2x3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2x3fv"];
    PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix2x4fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2x4fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2x4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix2x4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2x4fv"];
    PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix3fv(GLuint program,
                                            GLint location,
                                            GLsizei count,
                                            GLboolean transpose,
                                            const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3fv"];
    PFNGLPROGRAMUNIFORMMATRIX3FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix3x2fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3x2fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3x2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix3x2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3x2fv"];
    PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix3x4fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3x4fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3x4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix3x4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3x4fv"];
    PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix4fv(GLuint program,
                                            GLint location,
                                            GLsizei count,
                                            GLboolean transpose,
                                            const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4fv"];
    PFNGLPROGRAMUNIFORMMATRIX4FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix4x2fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4x2fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4x2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix4x2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4x2fv"];
    PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramUniformMatrix4x3fv(GLuint program,
                                              GLint location,
                                              GLsizei count,
                                              GLboolean transpose,
                                              const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4x3fv(program = %u, location = %d, count = %d, transpose = "
                 "%s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4x3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramUniformMatrix4x3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4x3fv"];
    PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC>(entry);
    next(program, location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SampleMaski(GLuint maskNumber, GLbitfield mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSampleMaski(maskNumber = %u, mask = %s)", maskNumber,
                 GLbitfieldToString(GLenumGroup::DefaultGroup, mask).c_str());
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSampleMaski), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSampleMaski  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glSampleMaski"];
    PFNGLSAMPLEMASKIPROC next = reinterpret_cast<PFNGLSAMPLEMASKIPROC>(entry);
    next(maskNumber, mask);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexStorage2DMultisample(GLenum target,
                                            GLsizei samples,
                                            GLenum internalformat,
                                            GLsizei width,
                                            GLsizei height,
                                            GLboolean fixedsamplelocations)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage2DMultisample(target = %s, samples = %d, internalformat = %s, width "
                 "= %d, height = %d, fixedsamplelocations = %s)",
                 GLenumToString(GLenumGroup::TextureTarget, target), samples,
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height,
                 GLbooleanToString(fixedsamplelocations));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexStorage2DMultisample), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexStorage2DMultisample  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorage2DMultisample"];
    PFNGLTEXSTORAGE2DMULTISAMPLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGE2DMULTISAMPLEPROC>(entry);
    next(target, samples, internalformat, width, height, fixedsamplelocations);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUseProgramStages(pipeline = %u, stages = %s, program = %u)",
                 pipeline, GLbitfieldToString(GLenumGroup::UseProgramStageMask, stages).c_str(),
                 program);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUseProgramStages), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUseProgramStages  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glUseProgramStages"];
    PFNGLUSEPROGRAMSTAGESPROC next = reinterpret_cast<PFNGLUSEPROGRAMSTAGESPROC>(entry);
    next(pipeline, stages, program);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ValidateProgramPipeline(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glValidateProgramPipeline(pipeline = %u)", pipeline);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLValidateProgramPipeline), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glValidateProgramPipeline  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glValidateProgramPipeline"];
    PFNGLVALIDATEPROGRAMPIPELINEPROC next =
        reinterpret_cast<PFNGLVALIDATEPROGRAMPIPELINEPROC>(entry);
    next(pipeline);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribBinding(attribindex = %u, bindingindex = %u)",
                 attribindex, bindingindex);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribBinding), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribBinding  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glVertexAttribBinding"];
    PFNGLVERTEXATTRIBBINDINGPROC next = reinterpret_cast<PFNGLVERTEXATTRIBBINDINGPROC>(entry);
    next(attribindex, bindingindex);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribFormat(GLuint attribindex,
                                       GLint size,
                                       GLenum type,
                                       GLboolean normalized,
                                       GLuint relativeoffset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glVertexAttribFormat(attribindex = %u, size = %d, type = %s, normalized = %s, "
                 "relativeoffset = %u)",
                 attribindex, size, GLenumToString(GLenumGroup::DefaultGroup, type),
                 GLbooleanToString(normalized), relativeoffset);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribFormat), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribFormat  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glVertexAttribFormat"];
    PFNGLVERTEXATTRIBFORMATPROC next = reinterpret_cast<PFNGLVERTEXATTRIBFORMATPROC>(entry);
    next(attribindex, size, type, normalized, relativeoffset);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribIFormat(GLuint attribindex,
                                        GLint size,
                                        GLenum type,
                                        GLuint relativeoffset)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glVertexAttribIFormat(attribindex = %u, size = %d, type = %s, relativeoffset = %u)",
        attribindex, size, GLenumToString(GLenumGroup::DefaultGroup, type), relativeoffset);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribIFormat), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribIFormat  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glVertexAttribIFormat"];
    PFNGLVERTEXATTRIBIFORMATPROC next = reinterpret_cast<PFNGLVERTEXATTRIBIFORMATPROC>(entry);
    next(attribindex, size, type, relativeoffset);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexBindingDivisor(bindingindex = %u, divisor = %u)",
                 bindingindex, divisor);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexBindingDivisor), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexBindingDivisor  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glVertexBindingDivisor"];
    PFNGLVERTEXBINDINGDIVISORPROC next = reinterpret_cast<PFNGLVERTEXBINDINGDIVISORPROC>(entry);
    next(bindingindex, divisor);

    g_pop_debug_group();
}

void setupGLES_3_1Hooks()
{
    hookMap["glActiveShaderProgram"]        = (void *)GL_ActiveShaderProgram;
    hookMap["glBindImageTexture"]           = (void *)GL_BindImageTexture;
    hookMap["glBindProgramPipeline"]        = (void *)GL_BindProgramPipeline;
    hookMap["glBindVertexBuffer"]           = (void *)GL_BindVertexBuffer;
    hookMap["glCreateShaderProgramv"]       = (void *)GL_CreateShaderProgramv;
    hookMap["glDeleteProgramPipelines"]     = (void *)GL_DeleteProgramPipelines;
    hookMap["glDispatchCompute"]            = (void *)GL_DispatchCompute;
    hookMap["glDispatchComputeIndirect"]    = (void *)GL_DispatchComputeIndirect;
    hookMap["glDrawArraysIndirect"]         = (void *)GL_DrawArraysIndirect;
    hookMap["glDrawElementsIndirect"]       = (void *)GL_DrawElementsIndirect;
    hookMap["glFramebufferParameteri"]      = (void *)GL_FramebufferParameteri;
    hookMap["glGenProgramPipelines"]        = (void *)GL_GenProgramPipelines;
    hookMap["glGetBooleani_v"]              = (void *)GL_GetBooleani_v;
    hookMap["glGetFramebufferParameteriv"]  = (void *)GL_GetFramebufferParameteriv;
    hookMap["glGetMultisamplefv"]           = (void *)GL_GetMultisamplefv;
    hookMap["glGetProgramInterfaceiv"]      = (void *)GL_GetProgramInterfaceiv;
    hookMap["glGetProgramPipelineInfoLog"]  = (void *)GL_GetProgramPipelineInfoLog;
    hookMap["glGetProgramPipelineiv"]       = (void *)GL_GetProgramPipelineiv;
    hookMap["glGetProgramResourceIndex"]    = (void *)GL_GetProgramResourceIndex;
    hookMap["glGetProgramResourceLocation"] = (void *)GL_GetProgramResourceLocation;
    hookMap["glGetProgramResourceName"]     = (void *)GL_GetProgramResourceName;
    hookMap["glGetProgramResourceiv"]       = (void *)GL_GetProgramResourceiv;
    hookMap["glGetTexLevelParameterfv"]     = (void *)GL_GetTexLevelParameterfv;
    hookMap["glGetTexLevelParameteriv"]     = (void *)GL_GetTexLevelParameteriv;
    hookMap["glIsProgramPipeline"]          = (void *)GL_IsProgramPipeline;
    hookMap["glMemoryBarrier"]              = (void *)GL_MemoryBarrier;
    hookMap["glMemoryBarrierByRegion"]      = (void *)GL_MemoryBarrierByRegion;
    hookMap["glProgramUniform1f"]           = (void *)GL_ProgramUniform1f;
    hookMap["glProgramUniform1fv"]          = (void *)GL_ProgramUniform1fv;
    hookMap["glProgramUniform1i"]           = (void *)GL_ProgramUniform1i;
    hookMap["glProgramUniform1iv"]          = (void *)GL_ProgramUniform1iv;
    hookMap["glProgramUniform1ui"]          = (void *)GL_ProgramUniform1ui;
    hookMap["glProgramUniform1uiv"]         = (void *)GL_ProgramUniform1uiv;
    hookMap["glProgramUniform2f"]           = (void *)GL_ProgramUniform2f;
    hookMap["glProgramUniform2fv"]          = (void *)GL_ProgramUniform2fv;
    hookMap["glProgramUniform2i"]           = (void *)GL_ProgramUniform2i;
    hookMap["glProgramUniform2iv"]          = (void *)GL_ProgramUniform2iv;
    hookMap["glProgramUniform2ui"]          = (void *)GL_ProgramUniform2ui;
    hookMap["glProgramUniform2uiv"]         = (void *)GL_ProgramUniform2uiv;
    hookMap["glProgramUniform3f"]           = (void *)GL_ProgramUniform3f;
    hookMap["glProgramUniform3fv"]          = (void *)GL_ProgramUniform3fv;
    hookMap["glProgramUniform3i"]           = (void *)GL_ProgramUniform3i;
    hookMap["glProgramUniform3iv"]          = (void *)GL_ProgramUniform3iv;
    hookMap["glProgramUniform3ui"]          = (void *)GL_ProgramUniform3ui;
    hookMap["glProgramUniform3uiv"]         = (void *)GL_ProgramUniform3uiv;
    hookMap["glProgramUniform4f"]           = (void *)GL_ProgramUniform4f;
    hookMap["glProgramUniform4fv"]          = (void *)GL_ProgramUniform4fv;
    hookMap["glProgramUniform4i"]           = (void *)GL_ProgramUniform4i;
    hookMap["glProgramUniform4iv"]          = (void *)GL_ProgramUniform4iv;
    hookMap["glProgramUniform4ui"]          = (void *)GL_ProgramUniform4ui;
    hookMap["glProgramUniform4uiv"]         = (void *)GL_ProgramUniform4uiv;
    hookMap["glProgramUniformMatrix2fv"]    = (void *)GL_ProgramUniformMatrix2fv;
    hookMap["glProgramUniformMatrix2x3fv"]  = (void *)GL_ProgramUniformMatrix2x3fv;
    hookMap["glProgramUniformMatrix2x4fv"]  = (void *)GL_ProgramUniformMatrix2x4fv;
    hookMap["glProgramUniformMatrix3fv"]    = (void *)GL_ProgramUniformMatrix3fv;
    hookMap["glProgramUniformMatrix3x2fv"]  = (void *)GL_ProgramUniformMatrix3x2fv;
    hookMap["glProgramUniformMatrix3x4fv"]  = (void *)GL_ProgramUniformMatrix3x4fv;
    hookMap["glProgramUniformMatrix4fv"]    = (void *)GL_ProgramUniformMatrix4fv;
    hookMap["glProgramUniformMatrix4x2fv"]  = (void *)GL_ProgramUniformMatrix4x2fv;
    hookMap["glProgramUniformMatrix4x3fv"]  = (void *)GL_ProgramUniformMatrix4x3fv;
    hookMap["glSampleMaski"]                = (void *)GL_SampleMaski;
    hookMap["glTexStorage2DMultisample"]    = (void *)GL_TexStorage2DMultisample;
    hookMap["glUseProgramStages"]           = (void *)GL_UseProgramStages;
    hookMap["glValidateProgramPipeline"]    = (void *)GL_ValidateProgramPipeline;
    hookMap["glVertexAttribBinding"]        = (void *)GL_VertexAttribBinding;
    hookMap["glVertexAttribFormat"]         = (void *)GL_VertexAttribFormat;
    hookMap["glVertexAttribIFormat"]        = (void *)GL_VertexAttribIFormat;
    hookMap["glVertexBindingDivisor"]       = (void *)GL_VertexBindingDivisor;
}

}  // namespace agi_layer
