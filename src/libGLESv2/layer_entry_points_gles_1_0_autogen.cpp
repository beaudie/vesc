// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_1_0_autogen.cpp:
//   Layer functions for the OpenGL ES 1.0 entry points.

#include "libGLESv2/layer_entry_points_gles_1_0_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_AlphaFunc(GLenum func, GLfloat ref)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glAlphaFunc(func = %s, ref = %f)",
                 GLenumToString(GLenumGroup::AlphaFunction, func), ref);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLAlphaFunc), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glAlphaFunc  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glAlphaFunc"];
    PFNGLALPHAFUNCPROC next = reinterpret_cast<PFNGLALPHAFUNCPROC>(entry);
    next(func, ref);

    g_pop_debug_group();
}

void GL_APIENTRY GL_AlphaFuncx(GLenum func, GLfixed ref)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glAlphaFuncx(func = %s, ref = 0x%X)",
                 GLenumToString(GLenumGroup::AlphaFunction, func), ref);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLAlphaFuncx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glAlphaFuncx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glAlphaFuncx"];
    PFNGLALPHAFUNCXPROC next = reinterpret_cast<PFNGLALPHAFUNCXPROC>(entry);
    next(func, ref);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClearColorx(red = 0x%X, green = 0x%X, blue = 0x%X, alpha = 0x%X)", red, green,
                 blue, alpha);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearColorx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearColorx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glClearColorx"];
    PFNGLCLEARCOLORXPROC next = reinterpret_cast<PFNGLCLEARCOLORXPROC>(entry);
    next(red, green, blue, alpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearDepthx(GLfixed depth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClearDepthx(depth = 0x%X)", depth);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearDepthx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearDepthx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glClearDepthx"];
    PFNGLCLEARDEPTHXPROC next = reinterpret_cast<PFNGLCLEARDEPTHXPROC>(entry);
    next(depth);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClientActiveTexture(GLenum texture)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClientActiveTexture(texture = %s)",
                 GLenumToString(GLenumGroup::TextureUnit, texture));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClientActiveTexture), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClientActiveTexture  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glClientActiveTexture"];
    PFNGLCLIENTACTIVETEXTUREPROC next = reinterpret_cast<PFNGLCLIENTACTIVETEXTUREPROC>(entry);
    next(texture);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClipPlanef(GLenum p, const GLfloat *eqn)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClipPlanef(p = %s, eqn = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::ClipPlaneName, p), (uintptr_t)eqn);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClipPlanef), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClipPlanef  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glClipPlanef"];
    PFNGLCLIPPLANEFPROC next = reinterpret_cast<PFNGLCLIPPLANEFPROC>(entry);
    next(p, eqn);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClipPlanex(GLenum plane, const GLfixed *equation)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClipPlanex(plane = %s, equation = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::ClipPlaneName, plane), (uintptr_t)equation);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClipPlanex), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClipPlanex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glClipPlanex"];
    PFNGLCLIPPLANEXPROC next = reinterpret_cast<PFNGLCLIPPLANEXPROC>(entry);
    next(plane, equation);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColor4f(red = %f, green = %f, blue = %f, alpha = %f)", red,
                 green, blue, alpha);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLColor4f), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glColor4f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glColor4f"];
    PFNGLCOLOR4FPROC next = reinterpret_cast<PFNGLCOLOR4FPROC>(entry);
    next(red, green, blue, alpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColor4ub(red = %d, green = %d, blue = %d, alpha = %d)", red,
                 green, blue, alpha);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLColor4ub), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glColor4ub  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glColor4ub"];
    PFNGLCOLOR4UBPROC next = reinterpret_cast<PFNGLCOLOR4UBPROC>(entry);
    next(red, green, blue, alpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Color4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glColor4x(red = 0x%X, green = 0x%X, blue = 0x%X, alpha = 0x%X)", red, green, blue,
                 alpha);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLColor4x), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glColor4x  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glColor4x"];
    PFNGLCOLOR4XPROC next = reinterpret_cast<PFNGLCOLOR4XPROC>(entry);
    next(red, green, blue, alpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glColorPointer(size = %d, type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")",
                 size, GLenumToString(GLenumGroup::ColorPointerType, type), stride,
                 (uintptr_t)pointer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLColorPointer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glColorPointer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glColorPointer"];
    PFNGLCOLORPOINTERPROC next = reinterpret_cast<PFNGLCOLORPOINTERPROC>(entry);
    next(size, type, stride, pointer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DepthRangex(GLfixed n, GLfixed f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDepthRangex(n = 0x%X, f = 0x%X)", n, f);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDepthRangex), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDepthRangex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDepthRangex"];
    PFNGLDEPTHRANGEXPROC next = reinterpret_cast<PFNGLDEPTHRANGEXPROC>(entry);
    next(n, f);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DisableClientState(GLenum array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisableClientState(array = %s)",
                 GLenumToString(GLenumGroup::EnableCap, array));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDisableClientState), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDisableClientState  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glDisableClientState"];
    PFNGLDISABLECLIENTSTATEPROC next = reinterpret_cast<PFNGLDISABLECLIENTSTATEPROC>(entry);
    next(array);

    g_pop_debug_group();
}

void GL_APIENTRY GL_EnableClientState(GLenum array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnableClientState(array = %s)",
                 GLenumToString(GLenumGroup::EnableCap, array));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLEnableClientState), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glEnableClientState  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glEnableClientState"];
    PFNGLENABLECLIENTSTATEPROC next = reinterpret_cast<PFNGLENABLECLIENTSTATEPROC>(entry);
    next(array);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Fogf(GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFogf(pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::FogParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFogf), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFogf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry        = funcMap["glFogf"];
    PFNGLFOGFPROC next = reinterpret_cast<PFNGLFOGFPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Fogfv(GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFogfv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::FogParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFogfv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFogfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry         = funcMap["glFogfv"];
    PFNGLFOGFVPROC next = reinterpret_cast<PFNGLFOGFVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Fogx(GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFogx(pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::FogPName, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFogx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFogx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry        = funcMap["glFogx"];
    PFNGLFOGXPROC next = reinterpret_cast<PFNGLFOGXPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Fogxv(GLenum pname, const GLfixed *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFogxv(pname = %s, param = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::FogPName, pname), (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFogxv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFogxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry         = funcMap["glFogxv"];
    PFNGLFOGXVPROC next = reinterpret_cast<PFNGLFOGXVPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Frustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFrustumf(l = %f, r = %f, b = %f, t = %f, n = %f, f = %f)", l,
                 r, b, t, n, f);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFrustumf), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFrustumf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glFrustumf"];
    PFNGLFRUSTUMFPROC next = reinterpret_cast<PFNGLFRUSTUMFPROC>(entry);
    next(l, r, b, t, n, f);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Frustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFrustumx(l = 0x%X, r = 0x%X, b = 0x%X, t = 0x%X, n = 0x%X, f = 0x%X)", l, r, b,
                 t, n, f);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFrustumx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFrustumx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glFrustumx"];
    PFNGLFRUSTUMXPROC next = reinterpret_cast<PFNGLFRUSTUMXPROC>(entry);
    next(l, r, b, t, n, f);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetClipPlanef(GLenum plane, GLfloat *equation)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetClipPlanef(plane = %s, equation = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::ClipPlaneName, plane), (uintptr_t)equation);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetClipPlanef), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetClipPlanef  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetClipPlanef"];
    PFNGLGETCLIPPLANEFPROC next = reinterpret_cast<PFNGLGETCLIPPLANEFPROC>(entry);
    next(plane, equation);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetClipPlanex(GLenum plane, GLfixed *equation)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetClipPlanex(plane = %s, equation = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::ClipPlaneName, plane), (uintptr_t)equation);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetClipPlanex), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetClipPlanex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetClipPlanex"];
    PFNGLGETCLIPPLANEXPROC next = reinterpret_cast<PFNGLGETCLIPPLANEXPROC>(entry);
    next(plane, equation);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetFixedv(GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetFixedv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::GetPName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetFixedv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetFixedv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glGetFixedv"];
    PFNGLGETFIXEDVPROC next = reinterpret_cast<PFNGLGETFIXEDVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetLightfv(light = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetLightfv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetLightfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glGetLightfv"];
    PFNGLGETLIGHTFVPROC next = reinterpret_cast<PFNGLGETLIGHTFVPROC>(entry);
    next(light, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetLightxv(light = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetLightxv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetLightxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glGetLightxv"];
    PFNGLGETLIGHTXVPROC next = reinterpret_cast<PFNGLGETLIGHTXVPROC>(entry);
    next(light, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetMaterialfv(face = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetMaterialfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetMaterialfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetMaterialfv"];
    PFNGLGETMATERIALFVPROC next = reinterpret_cast<PFNGLGETMATERIALFVPROC>(entry);
    next(face, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetMaterialxv(face = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetMaterialxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetMaterialxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetMaterialxv"];
    PFNGLGETMATERIALXVPROC next = reinterpret_cast<PFNGLGETMATERIALXVPROC>(entry);
    next(face, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexEnvfv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexEnvfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexEnvfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetTexEnvfv"];
    PFNGLGETTEXENVFVPROC next = reinterpret_cast<PFNGLGETTEXENVFVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexEnviv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexEnviv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexEnviv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetTexEnviv"];
    PFNGLGETTEXENVIVPROC next = reinterpret_cast<PFNGLGETTEXENVIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexEnvxv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexEnvxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexEnvxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetTexEnvxv"];
    PFNGLGETTEXENVXVPROC next = reinterpret_cast<PFNGLGETTEXENVXVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterxv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexParameterxv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetTexParameterxv"];
    PFNGLGETTEXPARAMETERXVPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERXVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LightModelf(GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightModelf(pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::LightModelParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightModelf), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightModelf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glLightModelf"];
    PFNGLLIGHTMODELFPROC next = reinterpret_cast<PFNGLLIGHTMODELFPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LightModelfv(GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightModelfv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightModelParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightModelfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightModelfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glLightModelfv"];
    PFNGLLIGHTMODELFVPROC next = reinterpret_cast<PFNGLLIGHTMODELFVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LightModelx(GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightModelx(pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::LightModelParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightModelx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightModelx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glLightModelx"];
    PFNGLLIGHTMODELXPROC next = reinterpret_cast<PFNGLLIGHTMODELXPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LightModelxv(GLenum pname, const GLfixed *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightModelxv(pname = %s, param = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightModelParameter, pname), (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightModelxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightModelxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glLightModelxv"];
    PFNGLLIGHTMODELXVPROC next = reinterpret_cast<PFNGLLIGHTMODELXVPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Lightf(GLenum light, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightf(light = %s, pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightf), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glLightf"];
    PFNGLLIGHTFPROC next = reinterpret_cast<PFNGLLIGHTFPROC>(entry);
    next(light, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Lightfv(GLenum light, GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightfv(light = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightfv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glLightfv"];
    PFNGLLIGHTFVPROC next = reinterpret_cast<PFNGLLIGHTFVPROC>(entry);
    next(light, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Lightx(GLenum light, GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightx(light = %s, pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glLightx"];
    PFNGLLIGHTXPROC next = reinterpret_cast<PFNGLLIGHTXPROC>(entry);
    next(light, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Lightxv(GLenum light, GLenum pname, const GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLightxv(light = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::LightName, light),
                 GLenumToString(GLenumGroup::LightParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLightxv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLightxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glLightxv"];
    PFNGLLIGHTXVPROC next = reinterpret_cast<PFNGLLIGHTXVPROC>(entry);
    next(light, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LineWidthx(GLfixed width)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLineWidthx(width = 0x%X)", width);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLineWidthx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLineWidthx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glLineWidthx"];
    PFNGLLINEWIDTHXPROC next = reinterpret_cast<PFNGLLINEWIDTHXPROC>(entry);
    next(width);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LoadIdentity()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLoadIdentity()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLoadIdentity), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLoadIdentity  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glLoadIdentity"];
    PFNGLLOADIDENTITYPROC next = reinterpret_cast<PFNGLLOADIDENTITYPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_LoadMatrixf(const GLfloat *m)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLoadMatrixf(m = 0x%016" PRIxPTR ")", (uintptr_t)m);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLoadMatrixf), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLoadMatrixf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glLoadMatrixf"];
    PFNGLLOADMATRIXFPROC next = reinterpret_cast<PFNGLLOADMATRIXFPROC>(entry);
    next(m);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LoadMatrixx(const GLfixed *m)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLoadMatrixx(m = 0x%016" PRIxPTR ")", (uintptr_t)m);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLoadMatrixx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLoadMatrixx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glLoadMatrixx"];
    PFNGLLOADMATRIXXPROC next = reinterpret_cast<PFNGLLOADMATRIXXPROC>(entry);
    next(m);

    g_pop_debug_group();
}

void GL_APIENTRY GL_LogicOp(GLenum opcode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLogicOp(opcode = %s)",
                 GLenumToString(GLenumGroup::LogicOp, opcode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLLogicOp), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glLogicOp  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glLogicOp"];
    PFNGLLOGICOPPROC next = reinterpret_cast<PFNGLLOGICOPPROC>(entry);
    next(opcode);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Materialf(GLenum face, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMaterialf(face = %s, pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMaterialf), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMaterialf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glMaterialf"];
    PFNGLMATERIALFPROC next = reinterpret_cast<PFNGLMATERIALFPROC>(entry);
    next(face, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Materialfv(GLenum face, GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMaterialfv(face = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMaterialfv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMaterialfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glMaterialfv"];
    PFNGLMATERIALFVPROC next = reinterpret_cast<PFNGLMATERIALFVPROC>(entry);
    next(face, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Materialx(GLenum face, GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMaterialx(face = %s, pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMaterialx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMaterialx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glMaterialx"];
    PFNGLMATERIALXPROC next = reinterpret_cast<PFNGLMATERIALXPROC>(entry);
    next(face, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Materialxv(GLenum face, GLenum pname, const GLfixed *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMaterialxv(face = %s, pname = %s, param = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::MaterialFace, face),
                 GLenumToString(GLenumGroup::MaterialParameter, pname), (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMaterialxv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMaterialxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glMaterialxv"];
    PFNGLMATERIALXVPROC next = reinterpret_cast<PFNGLMATERIALXVPROC>(entry);
    next(face, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MatrixMode(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMatrixMode(mode = %s)",
                 GLenumToString(GLenumGroup::MatrixMode, mode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMatrixMode), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMatrixMode  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glMatrixMode"];
    PFNGLMATRIXMODEPROC next = reinterpret_cast<PFNGLMATRIXMODEPROC>(entry);
    next(mode);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MultMatrixf(const GLfloat *m)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMultMatrixf(m = 0x%016" PRIxPTR ")", (uintptr_t)m);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMultMatrixf), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMultMatrixf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glMultMatrixf"];
    PFNGLMULTMATRIXFPROC next = reinterpret_cast<PFNGLMULTMATRIXFPROC>(entry);
    next(m);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MultMatrixx(const GLfixed *m)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMultMatrixx(m = 0x%016" PRIxPTR ")", (uintptr_t)m);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMultMatrixx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMultMatrixx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glMultMatrixx"];
    PFNGLMULTMATRIXXPROC next = reinterpret_cast<PFNGLMULTMATRIXXPROC>(entry);
    next(m);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiTexCoord4f(target = %s, s = %f, t = %f, r = %f, q = %f)",
                 GLenumToString(GLenumGroup::TextureUnit, target), s, t, r, q);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMultiTexCoord4f), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMultiTexCoord4f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glMultiTexCoord4f"];
    PFNGLMULTITEXCOORD4FPROC next = reinterpret_cast<PFNGLMULTITEXCOORD4FPROC>(entry);
    next(target, s, t, r, q);

    g_pop_debug_group();
}

void GL_APIENTRY GL_MultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiTexCoord4x(texture = %s, s = 0x%X, t = 0x%X, r = 0x%X, q = 0x%X)",
                 GLenumToString(GLenumGroup::TextureUnit, texture), s, t, r, q);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMultiTexCoord4x), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMultiTexCoord4x  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glMultiTexCoord4x"];
    PFNGLMULTITEXCOORD4XPROC next = reinterpret_cast<PFNGLMULTITEXCOORD4XPROC>(entry);
    next(texture, s, t, r, q);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glNormal3f(nx = %f, ny = %f, nz = %f)", nx, ny, nz);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLNormal3f), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glNormal3f  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glNormal3f"];
    PFNGLNORMAL3FPROC next = reinterpret_cast<PFNGLNORMAL3FPROC>(entry);
    next(nx, ny, nz);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Normal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glNormal3x(nx = 0x%X, ny = 0x%X, nz = 0x%X)", nx, ny, nz);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLNormal3x), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glNormal3x  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glNormal3x"];
    PFNGLNORMAL3XPROC next = reinterpret_cast<PFNGLNORMAL3XPROC>(entry);
    next(nx, ny, nz);

    g_pop_debug_group();
}

void GL_APIENTRY GL_NormalPointer(GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glNormalPointer(type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::NormalPointerType, type), stride, (uintptr_t)pointer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLNormalPointer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glNormalPointer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glNormalPointer"];
    PFNGLNORMALPOINTERPROC next = reinterpret_cast<PFNGLNORMALPOINTERPROC>(entry);
    next(type, stride, pointer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Orthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glOrthof(l = %f, r = %f, b = %f, t = %f, n = %f, f = %f)", l,
                 r, b, t, n, f);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLOrthof), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glOrthof  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glOrthof"];
    PFNGLORTHOFPROC next = reinterpret_cast<PFNGLORTHOFPROC>(entry);
    next(l, r, b, t, n, f);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Orthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glOrthox(l = 0x%X, r = 0x%X, b = 0x%X, t = 0x%X, n = 0x%X, f = 0x%X)", l, r, b, t,
                 n, f);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLOrthox), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glOrthox  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glOrthox"];
    PFNGLORTHOXPROC next = reinterpret_cast<PFNGLORTHOXPROC>(entry);
    next(l, r, b, t, n, f);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointParameterf(GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointParameterf(pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::DefaultGroup, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointParameterf), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointParameterf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glPointParameterf"];
    PFNGLPOINTPARAMETERFPROC next = reinterpret_cast<PFNGLPOINTPARAMETERFPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointParameterfv(GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointParameterfv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::DefaultGroup, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointParameterfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointParameterfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glPointParameterfv"];
    PFNGLPOINTPARAMETERFVPROC next = reinterpret_cast<PFNGLPOINTPARAMETERFVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointParameterx(GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointParameterx(pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::DefaultGroup, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointParameterx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointParameterx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glPointParameterx"];
    PFNGLPOINTPARAMETERXPROC next = reinterpret_cast<PFNGLPOINTPARAMETERXPROC>(entry);
    next(pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointParameterxv(GLenum pname, const GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointParameterxv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::DefaultGroup, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointParameterxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointParameterxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glPointParameterxv"];
    PFNGLPOINTPARAMETERXVPROC next = reinterpret_cast<PFNGLPOINTPARAMETERXVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointSize(GLfloat size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointSize(size = %f)", size);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointSize), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointSize  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glPointSize"];
    PFNGLPOINTSIZEPROC next = reinterpret_cast<PFNGLPOINTSIZEPROC>(entry);
    next(size);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PointSizex(GLfixed size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPointSizex(size = 0x%X)", size);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPointSizex), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPointSizex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glPointSizex"];
    PFNGLPOINTSIZEXPROC next = reinterpret_cast<PFNGLPOINTSIZEXPROC>(entry);
    next(size);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PolygonOffsetx(GLfixed factor, GLfixed units)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPolygonOffsetx(factor = 0x%X, units = 0x%X)", factor, units);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPolygonOffsetx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPolygonOffsetx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glPolygonOffsetx"];
    PFNGLPOLYGONOFFSETXPROC next = reinterpret_cast<PFNGLPOLYGONOFFSETXPROC>(entry);
    next(factor, units);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PopMatrix()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPopMatrix()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPopMatrix), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPopMatrix  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glPopMatrix"];
    PFNGLPOPMATRIXPROC next = reinterpret_cast<PFNGLPOPMATRIXPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_PushMatrix()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPushMatrix()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPushMatrix), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPushMatrix  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glPushMatrix"];
    PFNGLPUSHMATRIXPROC next = reinterpret_cast<PFNGLPUSHMATRIXPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glRotatef(angle = %f, x = %f, y = %f, z = %f)", angle, x, y,
                 z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLRotatef), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glRotatef  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glRotatef"];
    PFNGLROTATEFPROC next = reinterpret_cast<PFNGLROTATEFPROC>(entry);
    next(angle, x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Rotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glRotatex(angle = 0x%X, x = 0x%X, y = 0x%X, z = 0x%X)", angle,
                 x, y, z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLRotatex), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glRotatex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glRotatex"];
    PFNGLROTATEXPROC next = reinterpret_cast<PFNGLROTATEXPROC>(entry);
    next(angle, x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SampleCoveragex(GLclampx value, GLboolean invert)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSampleCoveragex(value = 0x%X, invert = %s)", value,
                 GLbooleanToString(invert));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSampleCoveragex), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSampleCoveragex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glSampleCoveragex"];
    PFNGLSAMPLECOVERAGEXPROC next = reinterpret_cast<PFNGLSAMPLECOVERAGEXPROC>(entry);
    next(value, invert);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Scalef(GLfloat x, GLfloat y, GLfloat z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glScalef(x = %f, y = %f, z = %f)", x, y, z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLScalef), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glScalef  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glScalef"];
    PFNGLSCALEFPROC next = reinterpret_cast<PFNGLSCALEFPROC>(entry);
    next(x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Scalex(GLfixed x, GLfixed y, GLfixed z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glScalex(x = 0x%X, y = 0x%X, z = 0x%X)", x, y, z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLScalex), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glScalex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glScalex"];
    PFNGLSCALEXPROC next = reinterpret_cast<PFNGLSCALEXPROC>(entry);
    next(x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ShadeModel(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glShadeModel(mode = %s)",
                 GLenumToString(GLenumGroup::ShadingModel, mode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLShadeModel), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glShadeModel  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glShadeModel"];
    PFNGLSHADEMODELPROC next = reinterpret_cast<PFNGLSHADEMODELPROC>(entry);
    next(mode);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexCoordPointer(size = %d, type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")", size,
        GLenumToString(GLenumGroup::TexCoordPointerType, type), stride, (uintptr_t)pointer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexCoordPointer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexCoordPointer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glTexCoordPointer"];
    PFNGLTEXCOORDPOINTERPROC next = reinterpret_cast<PFNGLTEXCOORDPOINTERPROC>(entry);
    next(size, type, stride, pointer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnvf(GLenum target, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexEnvf(target = %s, pname = %s, param = %f)",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnvf), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnvf  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glTexEnvf"];
    PFNGLTEXENVFPROC next = reinterpret_cast<PFNGLTEXENVFPROC>(entry);
    next(target, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexEnvfv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnvfv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnvfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glTexEnvfv"];
    PFNGLTEXENVFVPROC next = reinterpret_cast<PFNGLTEXENVFVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnvi(GLenum target, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexEnvi(target = %s, pname = %s, param = %d)",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnvi), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnvi  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glTexEnvi"];
    PFNGLTEXENVIPROC next = reinterpret_cast<PFNGLTEXENVIPROC>(entry);
    next(target, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnviv(GLenum target, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexEnviv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnviv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnviv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glTexEnviv"];
    PFNGLTEXENVIVPROC next = reinterpret_cast<PFNGLTEXENVIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnvx(GLenum target, GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexEnvx(target = %s, pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnvx), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnvx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glTexEnvx"];
    PFNGLTEXENVXPROC next = reinterpret_cast<PFNGLTEXENVXPROC>(entry);
    next(target, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexEnvxv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureEnvTarget, target),
                 GLenumToString(GLenumGroup::TextureEnvParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexEnvxv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexEnvxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glTexEnvxv"];
    PFNGLTEXENVXVPROC next = reinterpret_cast<PFNGLTEXENVXVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexParameterx(GLenum target, GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexParameterx(target = %s, pname = %s, param = 0x%X)",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::GetTextureParameter, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexParameterx), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexParameterx  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexParameterx"];
    PFNGLTEXPARAMETERXPROC next = reinterpret_cast<PFNGLTEXPARAMETERXPROC>(entry);
    next(target, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterxv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexParameterxv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexParameterxv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glTexParameterxv"];
    PFNGLTEXPARAMETERXVPROC next = reinterpret_cast<PFNGLTEXPARAMETERXVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Translatef(GLfloat x, GLfloat y, GLfloat z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTranslatef(x = %f, y = %f, z = %f)", x, y, z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTranslatef), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTranslatef  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTranslatef"];
    PFNGLTRANSLATEFPROC next = reinterpret_cast<PFNGLTRANSLATEFPROC>(entry);
    next(x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Translatex(GLfixed x, GLfixed y, GLfixed z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTranslatex(x = 0x%X, y = 0x%X, z = 0x%X)", x, y, z);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTranslatex), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTranslatex  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTranslatex"];
    PFNGLTRANSLATEXPROC next = reinterpret_cast<PFNGLTRANSLATEXPROC>(entry);
    next(x, y, z);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glVertexPointer(size = %d, type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")",
                 size, GLenumToString(GLenumGroup::VertexPointerType, type), stride,
                 (uintptr_t)pointer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexPointer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexPointer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glVertexPointer"];
    PFNGLVERTEXPOINTERPROC next = reinterpret_cast<PFNGLVERTEXPOINTERPROC>(entry);
    next(size, type, stride, pointer);

    g_pop_debug_group();
}

void setupGLES_1_0Hooks()
{
    hookMap["glAlphaFunc"]           = (void *)GL_AlphaFunc;
    hookMap["glAlphaFuncx"]          = (void *)GL_AlphaFuncx;
    hookMap["glClearColorx"]         = (void *)GL_ClearColorx;
    hookMap["glClearDepthx"]         = (void *)GL_ClearDepthx;
    hookMap["glClientActiveTexture"] = (void *)GL_ClientActiveTexture;
    hookMap["glClipPlanef"]          = (void *)GL_ClipPlanef;
    hookMap["glClipPlanex"]          = (void *)GL_ClipPlanex;
    hookMap["glColor4f"]             = (void *)GL_Color4f;
    hookMap["glColor4ub"]            = (void *)GL_Color4ub;
    hookMap["glColor4x"]             = (void *)GL_Color4x;
    hookMap["glColorPointer"]        = (void *)GL_ColorPointer;
    hookMap["glDepthRangex"]         = (void *)GL_DepthRangex;
    hookMap["glDisableClientState"]  = (void *)GL_DisableClientState;
    hookMap["glEnableClientState"]   = (void *)GL_EnableClientState;
    hookMap["glFogf"]                = (void *)GL_Fogf;
    hookMap["glFogfv"]               = (void *)GL_Fogfv;
    hookMap["glFogx"]                = (void *)GL_Fogx;
    hookMap["glFogxv"]               = (void *)GL_Fogxv;
    hookMap["glFrustumf"]            = (void *)GL_Frustumf;
    hookMap["glFrustumx"]            = (void *)GL_Frustumx;
    hookMap["glGetClipPlanef"]       = (void *)GL_GetClipPlanef;
    hookMap["glGetClipPlanex"]       = (void *)GL_GetClipPlanex;
    hookMap["glGetFixedv"]           = (void *)GL_GetFixedv;
    hookMap["glGetLightfv"]          = (void *)GL_GetLightfv;
    hookMap["glGetLightxv"]          = (void *)GL_GetLightxv;
    hookMap["glGetMaterialfv"]       = (void *)GL_GetMaterialfv;
    hookMap["glGetMaterialxv"]       = (void *)GL_GetMaterialxv;
    hookMap["glGetTexEnvfv"]         = (void *)GL_GetTexEnvfv;
    hookMap["glGetTexEnviv"]         = (void *)GL_GetTexEnviv;
    hookMap["glGetTexEnvxv"]         = (void *)GL_GetTexEnvxv;
    hookMap["glGetTexParameterxv"]   = (void *)GL_GetTexParameterxv;
    hookMap["glLightModelf"]         = (void *)GL_LightModelf;
    hookMap["glLightModelfv"]        = (void *)GL_LightModelfv;
    hookMap["glLightModelx"]         = (void *)GL_LightModelx;
    hookMap["glLightModelxv"]        = (void *)GL_LightModelxv;
    hookMap["glLightf"]              = (void *)GL_Lightf;
    hookMap["glLightfv"]             = (void *)GL_Lightfv;
    hookMap["glLightx"]              = (void *)GL_Lightx;
    hookMap["glLightxv"]             = (void *)GL_Lightxv;
    hookMap["glLineWidthx"]          = (void *)GL_LineWidthx;
    hookMap["glLoadIdentity"]        = (void *)GL_LoadIdentity;
    hookMap["glLoadMatrixf"]         = (void *)GL_LoadMatrixf;
    hookMap["glLoadMatrixx"]         = (void *)GL_LoadMatrixx;
    hookMap["glLogicOp"]             = (void *)GL_LogicOp;
    hookMap["glMaterialf"]           = (void *)GL_Materialf;
    hookMap["glMaterialfv"]          = (void *)GL_Materialfv;
    hookMap["glMaterialx"]           = (void *)GL_Materialx;
    hookMap["glMaterialxv"]          = (void *)GL_Materialxv;
    hookMap["glMatrixMode"]          = (void *)GL_MatrixMode;
    hookMap["glMultMatrixf"]         = (void *)GL_MultMatrixf;
    hookMap["glMultMatrixx"]         = (void *)GL_MultMatrixx;
    hookMap["glMultiTexCoord4f"]     = (void *)GL_MultiTexCoord4f;
    hookMap["glMultiTexCoord4x"]     = (void *)GL_MultiTexCoord4x;
    hookMap["glNormal3f"]            = (void *)GL_Normal3f;
    hookMap["glNormal3x"]            = (void *)GL_Normal3x;
    hookMap["glNormalPointer"]       = (void *)GL_NormalPointer;
    hookMap["glOrthof"]              = (void *)GL_Orthof;
    hookMap["glOrthox"]              = (void *)GL_Orthox;
    hookMap["glPointParameterf"]     = (void *)GL_PointParameterf;
    hookMap["glPointParameterfv"]    = (void *)GL_PointParameterfv;
    hookMap["glPointParameterx"]     = (void *)GL_PointParameterx;
    hookMap["glPointParameterxv"]    = (void *)GL_PointParameterxv;
    hookMap["glPointSize"]           = (void *)GL_PointSize;
    hookMap["glPointSizex"]          = (void *)GL_PointSizex;
    hookMap["glPolygonOffsetx"]      = (void *)GL_PolygonOffsetx;
    hookMap["glPopMatrix"]           = (void *)GL_PopMatrix;
    hookMap["glPushMatrix"]          = (void *)GL_PushMatrix;
    hookMap["glRotatef"]             = (void *)GL_Rotatef;
    hookMap["glRotatex"]             = (void *)GL_Rotatex;
    hookMap["glSampleCoveragex"]     = (void *)GL_SampleCoveragex;
    hookMap["glScalef"]              = (void *)GL_Scalef;
    hookMap["glScalex"]              = (void *)GL_Scalex;
    hookMap["glShadeModel"]          = (void *)GL_ShadeModel;
    hookMap["glTexCoordPointer"]     = (void *)GL_TexCoordPointer;
    hookMap["glTexEnvf"]             = (void *)GL_TexEnvf;
    hookMap["glTexEnvfv"]            = (void *)GL_TexEnvfv;
    hookMap["glTexEnvi"]             = (void *)GL_TexEnvi;
    hookMap["glTexEnviv"]            = (void *)GL_TexEnviv;
    hookMap["glTexEnvx"]             = (void *)GL_TexEnvx;
    hookMap["glTexEnvxv"]            = (void *)GL_TexEnvxv;
    hookMap["glTexParameterx"]       = (void *)GL_TexParameterx;
    hookMap["glTexParameterxv"]      = (void *)GL_TexParameterxv;
    hookMap["glTranslatef"]          = (void *)GL_Translatef;
    hookMap["glTranslatex"]          = (void *)GL_Translatex;
    hookMap["glVertexPointer"]       = (void *)GL_VertexPointer;
}

}  // namespace agi_layer
