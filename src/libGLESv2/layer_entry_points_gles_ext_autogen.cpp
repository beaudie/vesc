// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_ext_autogen.cpp:
//   Layer functions for the OpenGL ES GLES ext entry points.

#include "libGLESv2/layer_entry_points_gles_ext_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "common/gl_enum_utils.h"
#include "labelLayer.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_BeginPerfMonitorAMD(GLuint monitor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBeginPerfMonitorAMD(monitor = %u)", monitor);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBeginPerfMonitorAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glBeginPerfMonitorAMD"];
    PFNGLBEGINPERFMONITORAMDPROC next = reinterpret_cast<PFNGLBEGINPERFMONITORAMDPROC>(entry);
    next(monitor);
}

void GL_APIENTRY GL_DeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeletePerfMonitorsAMD(n = %d, monitors = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)monitors);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeletePerfMonitorsAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDeletePerfMonitorsAMD"];
    PFNGLDELETEPERFMONITORSAMDPROC next = reinterpret_cast<PFNGLDELETEPERFMONITORSAMDPROC>(entry);
    next(n, monitors);
}

void GL_APIENTRY GL_EndPerfMonitorAMD(GLuint monitor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEndPerfMonitorAMD(monitor = %u)", monitor);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEndPerfMonitorAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glEndPerfMonitorAMD"];
    PFNGLENDPERFMONITORAMDPROC next = reinterpret_cast<PFNGLENDPERFMONITORAMDPROC>(entry);
    next(monitor);
}

void GL_APIENTRY GL_GenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenPerfMonitorsAMD(n = %d, monitors = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)monitors);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenPerfMonitorsAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGenPerfMonitorsAMD"];
    PFNGLGENPERFMONITORSAMDPROC next = reinterpret_cast<PFNGLGENPERFMONITORSAMDPROC>(entry);
    next(n, monitors);
}

void GL_APIENTRY GL_GetPerfMonitorCounterDataAMD(GLuint monitor,
                                                 GLenum pname,
                                                 GLsizei dataSize,
                                                 GLuint *data,
                                                 GLint *bytesWritten)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetPerfMonitorCounterDataAMD(monitor = %u, pname = %s, dataSize = %d, data = "
                 "0x%016" PRIxPTR ", bytesWritten = 0x%016" PRIxPTR ")",
                 monitor, GLenumToString(GLESEnum::AllEnums, pname), dataSize, (uintptr_t)data,
                 (uintptr_t)bytesWritten);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorCounterDataAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorCounterDataAMD"];
    PFNGLGETPERFMONITORCOUNTERDATAAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORCOUNTERDATAAMDPROC>(entry);
    next(monitor, pname, dataSize, data, bytesWritten);
}

void GL_APIENTRY GL_GetPerfMonitorCounterInfoAMD(GLuint group,
                                                 GLuint counter,
                                                 GLenum pname,
                                                 void *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetPerfMonitorCounterInfoAMD(group = %u, counter = %u, pname = %s, data = 0x%016" PRIxPTR
        ")",
        group, counter, GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorCounterInfoAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorCounterInfoAMD"];
    PFNGLGETPERFMONITORCOUNTERINFOAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORCOUNTERINFOAMDPROC>(entry);
    next(group, counter, pname, data);
}

void GL_APIENTRY GL_GetPerfMonitorCounterStringAMD(GLuint group,
                                                   GLuint counter,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLchar *counterString)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetPerfMonitorCounterStringAMD(group = %u, counter = %u, bufSize = %d, length "
                 "= 0x%016" PRIxPTR ", counterString = 0x%016" PRIxPTR ")",
                 group, counter, bufSize, (uintptr_t)length, (uintptr_t)counterString);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorCounterStringAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorCounterStringAMD"];
    PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC>(entry);
    next(group, counter, bufSize, length, counterString);
}

void GL_APIENTRY GL_GetPerfMonitorCountersAMD(GLuint group,
                                              GLint *numCounters,
                                              GLint *maxActiveCounters,
                                              GLsizei counterSize,
                                              GLuint *counters)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetPerfMonitorCountersAMD(group = %u, numCounters = 0x%016" PRIxPTR
                 ", maxActiveCounters = 0x%016" PRIxPTR
                 ", counterSize = %d, counters = 0x%016" PRIxPTR ")",
                 group, (uintptr_t)numCounters, (uintptr_t)maxActiveCounters, counterSize,
                 (uintptr_t)counters);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorCountersAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorCountersAMD"];
    PFNGLGETPERFMONITORCOUNTERSAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORCOUNTERSAMDPROC>(entry);
    next(group, numCounters, maxActiveCounters, counterSize, counters);
}

void GL_APIENTRY GL_GetPerfMonitorGroupStringAMD(GLuint group,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLchar *groupString)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetPerfMonitorGroupStringAMD(group = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", groupString = 0x%016" PRIxPTR ")",
                 group, bufSize, (uintptr_t)length, (uintptr_t)groupString);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorGroupStringAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorGroupStringAMD"];
    PFNGLGETPERFMONITORGROUPSTRINGAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORGROUPSTRINGAMDPROC>(entry);
    next(group, bufSize, length, groupString);
}

void GL_APIENTRY GL_GetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetPerfMonitorGroupsAMD(numGroups = 0x%016" PRIxPTR
                 ", groupsSize = %d, groups = 0x%016" PRIxPTR ")",
                 (uintptr_t)numGroups, groupsSize, (uintptr_t)groups);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPerfMonitorGroupsAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPerfMonitorGroupsAMD"];
    PFNGLGETPERFMONITORGROUPSAMDPROC next =
        reinterpret_cast<PFNGLGETPERFMONITORGROUPSAMDPROC>(entry);
    next(numGroups, groupsSize, groups);
}

void GL_APIENTRY GL_SelectPerfMonitorCountersAMD(GLuint monitor,
                                                 GLboolean enable,
                                                 GLuint group,
                                                 GLint numCounters,
                                                 GLuint *counterList)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSelectPerfMonitorCountersAMD(monitor = %u, enable = %s, group = %u, "
                 "numCounters = %d, counterList = 0x%016" PRIxPTR ")",
                 monitor, GLbooleanToString(enable), group, numCounters, (uintptr_t)counterList);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSelectPerfMonitorCountersAMD),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSelectPerfMonitorCountersAMD"];
    PFNGLSELECTPERFMONITORCOUNTERSAMDPROC next =
        reinterpret_cast<PFNGLSELECTPERFMONITORCOUNTERSAMDPROC>(entry);
    next(monitor, enable, group, numCounters, counterList);
}

void GL_APIENTRY GL_DrawArraysInstancedBaseInstanceANGLE(GLenum mode,
                                                         GLint first,
                                                         GLsizei count,
                                                         GLsizei instanceCount,
                                                         GLuint baseInstance)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawArraysInstancedBaseInstanceANGLE(mode = %s, first = %d, count = %d, "
                 "instanceCount = %d, baseInstance = %u)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), first, count, instanceCount,
                 baseInstance);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawArraysInstancedBaseInstanceANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawArraysInstancedBaseInstanceANGLE"];
    PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC next =
        reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC>(entry);
    next(mode, first, count, instanceCount, baseInstance);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElementsInstancedBaseVertexBaseInstanceANGLE(GLenum mode,
                                                                     GLsizei count,
                                                                     GLenum type,
                                                                     const GLvoid *indices,
                                                                     GLsizei instanceCount,
                                                                     GLint baseVertex,
                                                                     GLuint baseInstance)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseVertexBaseInstanceANGLE(mode = %s, count = %d, type = "
                 "%s, indices = 0x%016" PRIxPTR
                 ", instanceCount = %d, baseVertex = %d, baseInstance = %u)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
                 instanceCount, baseVertex, baseInstance);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseVertexBaseInstanceANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseVertexBaseInstanceANGLE"];
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC>(entry);
    next(mode, count, type, indices, instanceCount, baseVertex, baseInstance);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_MultiDrawArraysInstancedBaseInstanceANGLE(GLenum mode,
                                                              const GLint *firsts,
                                                              const GLsizei *counts,
                                                              const GLsizei *instanceCounts,
                                                              const GLuint *baseInstances,
                                                              GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawArraysInstancedBaseInstanceANGLE(mode = %s, firsts = 0x%016" PRIxPTR
                 ", counts = 0x%016" PRIxPTR ", instanceCounts = 0x%016" PRIxPTR
                 ", baseInstances = 0x%016" PRIxPTR ", drawcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)firsts,
                 (uintptr_t)counts, (uintptr_t)instanceCounts, (uintptr_t)baseInstances, drawcount);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLMultiDrawArraysInstancedBaseInstanceANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawArraysInstancedBaseInstanceANGLE"];
    PFNGLMULTIDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC next =
        reinterpret_cast<PFNGLMULTIDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC>(entry);
    next(mode, firsts, counts, instanceCounts, baseInstances, drawcount);
}

void GL_APIENTRY
GL_MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(GLenum mode,
                                                         const GLsizei *counts,
                                                         GLenum type,
                                                         const GLvoid *const *indices,
                                                         const GLsizei *instanceCounts,
                                                         const GLint *baseVertices,
                                                         const GLuint *baseInstances,
                                                         GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(mode = %s, counts = 0x%016" PRIxPTR
        ", type = %s, indices = 0x%016" PRIxPTR ", instanceCounts = 0x%016" PRIxPTR
        ", baseVertices = 0x%016" PRIxPTR ", baseInstances = 0x%016" PRIxPTR ", drawcount = %d)",
        GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)counts,
        GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
        (uintptr_t)instanceCounts, (uintptr_t)baseVertices, (uintptr_t)baseInstances, drawcount);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(
            angle::EntryPoint::GLMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE"];
    PFNGLMULTIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC next =
        reinterpret_cast<PFNGLMULTIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC>(entry);
    next(mode, counts, type, indices, instanceCounts, baseVertices, baseInstances, drawcount);
}

void GL_APIENTRY GL_CopyTexture3DANGLE(GLuint sourceId,
                                       GLint sourceLevel,
                                       GLenum destTarget,
                                       GLuint destId,
                                       GLint destLevel,
                                       GLint internalFormat,
                                       GLenum destType,
                                       GLboolean unpackFlipY,
                                       GLboolean unpackPremultiplyAlpha,
                                       GLboolean unpackUnmultiplyAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTexture3DANGLE(sourceId = %u, sourceLevel = %d, destTarget = %s, destId = "
                 "%u, destLevel = %d, internalFormat = %d, destType = %s, unpackFlipY = %s, "
                 "unpackPremultiplyAlpha = %s, unpackUnmultiplyAlpha = %s)",
                 sourceId, sourceLevel, GLenumToString(GLESEnum::AllEnums, destTarget), destId,
                 destLevel, internalFormat, GLenumToString(GLESEnum::AllEnums, destType),
                 GLbooleanToString(unpackFlipY), GLbooleanToString(unpackPremultiplyAlpha),
                 GLbooleanToString(unpackUnmultiplyAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyTexture3DANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glCopyTexture3DANGLE"];
    PFNGLCOPYTEXTURE3DANGLEPROC next = reinterpret_cast<PFNGLCOPYTEXTURE3DANGLEPROC>(entry);
    next(sourceId, sourceLevel, destTarget, destId, destLevel, internalFormat, destType,
         unpackFlipY, unpackPremultiplyAlpha, unpackUnmultiplyAlpha);
}

void GL_APIENTRY GL_CopySubTexture3DANGLE(GLuint sourceId,
                                          GLint sourceLevel,
                                          GLenum destTarget,
                                          GLuint destId,
                                          GLint destLevel,
                                          GLint xoffset,
                                          GLint yoffset,
                                          GLint zoffset,
                                          GLint x,
                                          GLint y,
                                          GLint z,
                                          GLint width,
                                          GLint height,
                                          GLint depth,
                                          GLboolean unpackFlipY,
                                          GLboolean unpackPremultiplyAlpha,
                                          GLboolean unpackUnmultiplyAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopySubTexture3DANGLE(sourceId = %u, sourceLevel = %d, destTarget = %s, destId "
                 "= %u, destLevel = %d, xoffset = %d, yoffset = %d, zoffset = %d, x = %d, y = %d, "
                 "z = %d, width = %d, height = %d, depth = %d, unpackFlipY = %s, "
                 "unpackPremultiplyAlpha = %s, unpackUnmultiplyAlpha = %s)",
                 sourceId, sourceLevel, GLenumToString(GLESEnum::AllEnums, destTarget), destId,
                 destLevel, xoffset, yoffset, zoffset, x, y, z, width, height, depth,
                 GLbooleanToString(unpackFlipY), GLbooleanToString(unpackPremultiplyAlpha),
                 GLbooleanToString(unpackUnmultiplyAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopySubTexture3DANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glCopySubTexture3DANGLE"];
    PFNGLCOPYSUBTEXTURE3DANGLEPROC next = reinterpret_cast<PFNGLCOPYSUBTEXTURE3DANGLEPROC>(entry);
    next(sourceId, sourceLevel, destTarget, destId, destLevel, xoffset, yoffset, zoffset, x, y, z,
         width, height, depth, unpackFlipY, unpackPremultiplyAlpha, unpackUnmultiplyAlpha);
}

void GL_APIENTRY GL_BlitFramebufferANGLE(GLint srcX0,
                                         GLint srcY0,
                                         GLint srcX1,
                                         GLint srcY1,
                                         GLint dstX0,
                                         GLint dstY0,
                                         GLint dstX1,
                                         GLint dstY1,
                                         GLbitfield mask,
                                         GLenum filter)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlitFramebufferANGLE(srcX0 = %d, srcY0 = %d, srcX1 = %d, srcY1 = %d, dstX0 = "
                 "%d, dstY0 = %d, dstX1 = %d, dstY1 = %d, mask = %s, filter = %s)",
                 srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1,
                 GLbitfieldToString(GLESEnum::ClearBufferMask, mask).c_str(),
                 GLenumToString(GLESEnum::BlitFramebufferFilter, filter));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlitFramebufferANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glBlitFramebufferANGLE"];
    PFNGLBLITFRAMEBUFFERANGLEPROC next = reinterpret_cast<PFNGLBLITFRAMEBUFFERANGLEPROC>(entry);
    next(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void GL_APIENTRY GL_RenderbufferStorageMultisampleANGLE(GLenum target,
                                                        GLsizei samples,
                                                        GLenum internalformat,
                                                        GLsizei width,
                                                        GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glRenderbufferStorageMultisampleANGLE(target = %s, samples = %d, internalformat "
                 "= %s, width = %d, height = %d)",
                 GLenumToString(GLESEnum::RenderbufferTarget, target), samples,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLRenderbufferStorageMultisampleANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glRenderbufferStorageMultisampleANGLE"];
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC next =
        reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC>(entry);
    next(target, samples, internalformat, width, height);
}

void GL_APIENTRY
GL_GetTexImageANGLE(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexImageANGLE(target = %s, level = %d, format = %s, type = %s, pixels = "
                 "0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level,
                 GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexImageANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetTexImageANGLE"];
    PFNGLGETTEXIMAGEANGLEPROC next = reinterpret_cast<PFNGLGETTEXIMAGEANGLEPROC>(entry);
    next(target, level, format, type, pixels);
}

void GL_APIENTRY GL_GetCompressedTexImageANGLE(GLenum target, GLint level, void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetCompressedTexImageANGLE(target = %s, level = %d, pixels = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetCompressedTexImageANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetCompressedTexImageANGLE"];
    PFNGLGETCOMPRESSEDTEXIMAGEANGLEPROC next =
        reinterpret_cast<PFNGLGETCOMPRESSEDTEXIMAGEANGLEPROC>(entry);
    next(target, level, pixels);
}

void GL_APIENTRY GL_GetRenderbufferImageANGLE(GLenum target,
                                              GLenum format,
                                              GLenum type,
                                              void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetRenderbufferImageANGLE(target = %s, format = %s, type = %s, pixels = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::RenderbufferTarget, target),
        GLenumToString(GLESEnum::PixelFormat, format), GLenumToString(GLESEnum::PixelType, type),
        (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetRenderbufferImageANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetRenderbufferImageANGLE"];
    PFNGLGETRENDERBUFFERIMAGEANGLEPROC next =
        reinterpret_cast<PFNGLGETRENDERBUFFERIMAGEANGLEPROC>(entry);
    next(target, format, type, pixels);
}

void GL_APIENTRY GL_GetTexLevelParameterivANGLE(GLenum target,
                                                GLint level,
                                                GLenum pname,
                                                GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetTexLevelParameterivANGLE(target = %s, level = %d, pname = %s, params = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::TextureTarget, target), level,
        GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameterivANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexLevelParameterivANGLE"];
    PFNGLGETTEXLEVELPARAMETERIVANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIVANGLEPROC>(entry);
    next(target, level, pname, params);
}

void GL_APIENTRY GL_GetTexLevelParameterfvANGLE(GLenum target,
                                                GLint level,
                                                GLenum pname,
                                                GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetTexLevelParameterfvANGLE(target = %s, level = %d, pname = %s, params = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::AllEnums, target), level,
        GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameterfvANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexLevelParameterfvANGLE"];
    PFNGLGETTEXLEVELPARAMETERFVANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFVANGLEPROC>(entry);
    next(target, level, pname, params);
}

void GL_APIENTRY GL_DrawArraysInstancedANGLE(GLenum mode,
                                             GLint first,
                                             GLsizei count,
                                             GLsizei primcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawArraysInstancedANGLE(mode = %s, first = %d, count = %d, primcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), first, count, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawArraysInstancedANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawArraysInstancedANGLE"];
    PFNGLDRAWARRAYSINSTANCEDANGLEPROC next =
        reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDANGLEPROC>(entry);
    next(mode, first, count, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElementsInstancedANGLE(GLenum mode,
                                               GLsizei count,
                                               GLenum type,
                                               const void *indices,
                                               GLsizei primcount)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsInstancedANGLE(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", primcount = %d)",
        GLenumToString(GLESEnum::PrimitiveType, mode), count,
        GLenumToString(GLESEnum::PrimitiveType, type), (uintptr_t)indices, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedANGLE"];
    PFNGLDRAWELEMENTSINSTANCEDANGLEPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDANGLEPROC>(entry);
    next(mode, count, type, indices, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_VertexAttribDivisorANGLE(GLuint index, GLuint divisor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribDivisorANGLE(index = %u, divisor = %u)", index,
                 divisor);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttribDivisorANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glVertexAttribDivisorANGLE"];
    PFNGLVERTEXATTRIBDIVISORANGLEPROC next =
        reinterpret_cast<PFNGLVERTEXATTRIBDIVISORANGLEPROC>(entry);
    next(index, divisor);
}

void GL_APIENTRY GL_LogicOpANGLE(GLenum opcode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLogicOpANGLE(opcode = %s)",
                 GLenumToString(GLESEnum::LogicOp, opcode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLLogicOpANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glLogicOpANGLE"];
    PFNGLLOGICOPANGLEPROC next = reinterpret_cast<PFNGLLOGICOPANGLEPROC>(entry);
    next(opcode);
}

void GL_APIENTRY GL_TexStorageMemFlags2DANGLE(GLenum target,
                                              GLsizei levels,
                                              GLenum internalFormat,
                                              GLsizei width,
                                              GLsizei height,
                                              GLuint memory,
                                              GLuint64 offset,
                                              GLbitfield createFlags,
                                              GLbitfield usageFlags,
                                              const void *imageCreateInfoPNext)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorageMemFlags2DANGLE(target = %s, levels = %d, internalFormat = %s, width "
                 "= %d, height = %d, memory = %u, offset = %llu, createFlags = %s, usageFlags = "
                 "%s, imageCreateInfoPNext = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::AllEnums, internalFormat), width, height, memory,
                 static_cast<unsigned long long>(offset),
                 GLbitfieldToString(GLESEnum::AllEnums, createFlags).c_str(),
                 GLbitfieldToString(GLESEnum::AllEnums, usageFlags).c_str(),
                 (uintptr_t)imageCreateInfoPNext);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMemFlags2DANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMemFlags2DANGLE"];
    PFNGLTEXSTORAGEMEMFLAGS2DANGLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEMFLAGS2DANGLEPROC>(entry);
    next(target, levels, internalFormat, width, height, memory, offset, createFlags, usageFlags,
         imageCreateInfoPNext);
}

void GL_APIENTRY GL_TexStorageMemFlags2DMultisampleANGLE(GLenum target,
                                                         GLsizei samples,
                                                         GLenum internalFormat,
                                                         GLsizei width,
                                                         GLsizei height,
                                                         GLboolean fixedSampleLocations,
                                                         GLuint memory,
                                                         GLuint64 offset,
                                                         GLbitfield createFlags,
                                                         GLbitfield usageFlags,
                                                         const void *imageCreateInfoPNext)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexStorageMemFlags2DMultisampleANGLE(target = %s, samples = %d, internalFormat = %s, "
        "width = %d, height = %d, fixedSampleLocations = %s, memory = %u, offset = %llu, "
        "createFlags = %s, usageFlags = %s, imageCreateInfoPNext = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::TextureTarget, target), samples,
        GLenumToString(GLESEnum::AllEnums, internalFormat), width, height,
        GLbooleanToString(fixedSampleLocations), memory, static_cast<unsigned long long>(offset),
        GLbitfieldToString(GLESEnum::AllEnums, createFlags).c_str(),
        GLbitfieldToString(GLESEnum::AllEnums, usageFlags).c_str(),
        (uintptr_t)imageCreateInfoPNext);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLTexStorageMemFlags2DMultisampleANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMemFlags2DMultisampleANGLE"];
    PFNGLTEXSTORAGEMEMFLAGS2DMULTISAMPLEANGLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEMFLAGS2DMULTISAMPLEANGLEPROC>(entry);
    next(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset,
         createFlags, usageFlags, imageCreateInfoPNext);
}

void GL_APIENTRY GL_TexStorageMemFlags3DANGLE(GLenum target,
                                              GLsizei levels,
                                              GLenum internalFormat,
                                              GLsizei width,
                                              GLsizei height,
                                              GLsizei depth,
                                              GLuint memory,
                                              GLuint64 offset,
                                              GLbitfield createFlags,
                                              GLbitfield usageFlags,
                                              const void *imageCreateInfoPNext)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorageMemFlags3DANGLE(target = %s, levels = %d, internalFormat = %s, width "
                 "= %d, height = %d, depth = %d, memory = %u, offset = %llu, createFlags = %s, "
                 "usageFlags = %s, imageCreateInfoPNext = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::AllEnums, internalFormat), width, height, depth, memory,
                 static_cast<unsigned long long>(offset),
                 GLbitfieldToString(GLESEnum::AllEnums, createFlags).c_str(),
                 GLbitfieldToString(GLESEnum::AllEnums, usageFlags).c_str(),
                 (uintptr_t)imageCreateInfoPNext);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMemFlags3DANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMemFlags3DANGLE"];
    PFNGLTEXSTORAGEMEMFLAGS3DANGLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEMFLAGS3DANGLEPROC>(entry);
    next(target, levels, internalFormat, width, height, depth, memory, offset, createFlags,
         usageFlags, imageCreateInfoPNext);
}

void GL_APIENTRY GL_TexStorageMemFlags3DMultisampleANGLE(GLenum target,
                                                         GLsizei samples,
                                                         GLenum internalFormat,
                                                         GLsizei width,
                                                         GLsizei height,
                                                         GLsizei depth,
                                                         GLboolean fixedSampleLocations,
                                                         GLuint memory,
                                                         GLuint64 offset,
                                                         GLbitfield createFlags,
                                                         GLbitfield usageFlags,
                                                         const void *imageCreateInfoPNext)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexStorageMemFlags3DMultisampleANGLE(target = %s, samples = %d, internalFormat = %s, "
        "width = %d, height = %d, depth = %d, fixedSampleLocations = %s, memory = %u, offset = "
        "%llu, createFlags = %s, usageFlags = %s, imageCreateInfoPNext = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::TextureTarget, target), samples,
        GLenumToString(GLESEnum::AllEnums, internalFormat), width, height, depth,
        GLbooleanToString(fixedSampleLocations), memory, static_cast<unsigned long long>(offset),
        GLbitfieldToString(GLESEnum::AllEnums, createFlags).c_str(),
        GLbitfieldToString(GLESEnum::AllEnums, usageFlags).c_str(),
        (uintptr_t)imageCreateInfoPNext);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLTexStorageMemFlags3DMultisampleANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMemFlags3DMultisampleANGLE"];
    PFNGLTEXSTORAGEMEMFLAGS3DMULTISAMPLEANGLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEMFLAGS3DMULTISAMPLEANGLEPROC>(entry);
    next(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory,
         offset, createFlags, usageFlags, imageCreateInfoPNext);
}

void GL_APIENTRY GL_ImportMemoryZirconHandleANGLE(GLuint memory,
                                                  GLuint64 size,
                                                  GLenum handleType,
                                                  GLuint handle)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glImportMemoryZirconHandleANGLE(memory = %u, size = %llu, handleType = %s, handle = %u)",
        memory, static_cast<unsigned long long>(size),
        GLenumToString(GLESEnum::ExternalHandleType, handleType), handle);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLImportMemoryZirconHandleANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glImportMemoryZirconHandleANGLE"];
    PFNGLIMPORTMEMORYZIRCONHANDLEANGLEPROC next =
        reinterpret_cast<PFNGLIMPORTMEMORYZIRCONHANDLEANGLEPROC>(entry);
    next(memory, size, handleType, handle);
}

void GL_APIENTRY GL_MultiDrawArraysANGLE(GLenum mode,
                                         const GLint *firsts,
                                         const GLsizei *counts,
                                         GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawArraysANGLE(mode = %s, firsts = 0x%016" PRIxPTR
                 ", counts = 0x%016" PRIxPTR ", drawcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)firsts,
                 (uintptr_t)counts, drawcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawArraysANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glMultiDrawArraysANGLE"];
    PFNGLMULTIDRAWARRAYSANGLEPROC next = reinterpret_cast<PFNGLMULTIDRAWARRAYSANGLEPROC>(entry);
    next(mode, firsts, counts, drawcount);
}

void GL_APIENTRY GL_MultiDrawArraysInstancedANGLE(GLenum mode,
                                                  const GLint *firsts,
                                                  const GLsizei *counts,
                                                  const GLsizei *instanceCounts,
                                                  GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawArraysInstancedANGLE(mode = %s, firsts = 0x%016" PRIxPTR
                 ", counts = 0x%016" PRIxPTR ", instanceCounts = 0x%016" PRIxPTR
                 ", drawcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)firsts,
                 (uintptr_t)counts, (uintptr_t)instanceCounts, drawcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawArraysInstancedANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawArraysInstancedANGLE"];
    PFNGLMULTIDRAWARRAYSINSTANCEDANGLEPROC next =
        reinterpret_cast<PFNGLMULTIDRAWARRAYSINSTANCEDANGLEPROC>(entry);
    next(mode, firsts, counts, instanceCounts, drawcount);
}

void GL_APIENTRY GL_MultiDrawElementsANGLE(GLenum mode,
                                           const GLsizei *counts,
                                           GLenum type,
                                           const GLvoid *const *indices,
                                           GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawElementsANGLE(mode = %s, counts = 0x%016" PRIxPTR
                 ", type = %s, indices = 0x%016" PRIxPTR ", drawcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)counts,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, drawcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawElementsANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glMultiDrawElementsANGLE"];
    PFNGLMULTIDRAWELEMENTSANGLEPROC next = reinterpret_cast<PFNGLMULTIDRAWELEMENTSANGLEPROC>(entry);
    next(mode, counts, type, indices, drawcount);
}

void GL_APIENTRY GL_MultiDrawElementsInstancedANGLE(GLenum mode,
                                                    const GLsizei *counts,
                                                    GLenum type,
                                                    const GLvoid *const *indices,
                                                    const GLsizei *instanceCounts,
                                                    GLsizei drawcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawElementsInstancedANGLE(mode = %s, counts = 0x%016" PRIxPTR
                 ", type = %s, indices = 0x%016" PRIxPTR ", instanceCounts = 0x%016" PRIxPTR
                 ", drawcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)counts,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
                 (uintptr_t)instanceCounts, drawcount);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLMultiDrawElementsInstancedANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawElementsInstancedANGLE"];
    PFNGLMULTIDRAWELEMENTSINSTANCEDANGLEPROC next =
        reinterpret_cast<PFNGLMULTIDRAWELEMENTSINSTANCEDANGLEPROC>(entry);
    next(mode, counts, type, indices, instanceCounts, drawcount);
}

void GL_APIENTRY GL_ProvokingVertexANGLE(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProvokingVertexANGLE(mode = %s)",
                 GLenumToString(GLESEnum::VertexProvokingMode, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProvokingVertexANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProvokingVertexANGLE"];
    PFNGLPROVOKINGVERTEXANGLEPROC next = reinterpret_cast<PFNGLPROVOKINGVERTEXANGLEPROC>(entry);
    next(mode);
}

void GL_APIENTRY GL_RequestExtensionANGLE(const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glRequestExtensionANGLE(name = 0x%016" PRIxPTR ")",
                 (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLRequestExtensionANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glRequestExtensionANGLE"];
    PFNGLREQUESTEXTENSIONANGLEPROC next = reinterpret_cast<PFNGLREQUESTEXTENSIONANGLEPROC>(entry);
    next(name);
}

void GL_APIENTRY GL_DisableExtensionANGLE(const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisableExtensionANGLE(name = 0x%016" PRIxPTR ")",
                 (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDisableExtensionANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDisableExtensionANGLE"];
    PFNGLDISABLEEXTENSIONANGLEPROC next = reinterpret_cast<PFNGLDISABLEEXTENSIONANGLEPROC>(entry);
    next(name);
}

void GL_APIENTRY GL_GetBooleanvRobustANGLE(GLenum pname,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLboolean *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBooleanvRobustANGLE(pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
                 ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBooleanvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetBooleanvRobustANGLE"];
    PFNGLGETBOOLEANVROBUSTANGLEPROC next = reinterpret_cast<PFNGLGETBOOLEANVROBUSTANGLEPROC>(entry);
    next(pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetBufferParameterivRobustANGLE(GLenum target,
                                                    GLenum pname,
                                                    GLsizei bufSize,
                                                    GLsizei *length,
                                                    GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferParameterivRobustANGLE(target = %s, pname = %s, bufSize = %d, length "
                 "= 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetBufferParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetBufferParameterivRobustANGLE"];
    PFNGLGETBUFFERPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETBUFFERPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetFloatvRobustANGLE(GLenum pname,
                                         GLsizei bufSize,
                                         GLsizei *length,
                                         GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFloatvRobustANGLE(pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
                 ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetFloatvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetFloatvRobustANGLE"];
    PFNGLGETFLOATVROBUSTANGLEPROC next = reinterpret_cast<PFNGLGETFLOATVROBUSTANGLEPROC>(entry);
    next(pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetFramebufferAttachmentParameterivRobustANGLE(GLenum target,
                                                                   GLenum attachment,
                                                                   GLenum pname,
                                                                   GLsizei bufSize,
                                                                   GLsizei *length,
                                                                   GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetFramebufferAttachmentParameterivRobustANGLE(target = %s, attachment = %s, pname = "
        "%s, bufSize = %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), GLenumToString(GLESEnum::AllEnums, attachment),
        GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferAttachmentParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferAttachmentParameterivRobustANGLE"];
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, attachment, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetIntegervRobustANGLE(GLenum pname,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLint *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetIntegervRobustANGLE(pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
                 ", data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetIntegervRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetIntegervRobustANGLE"];
    PFNGLGETINTEGERVROBUSTANGLEPROC next = reinterpret_cast<PFNGLGETINTEGERVROBUSTANGLEPROC>(entry);
    next(pname, bufSize, length, data);
}

void GL_APIENTRY GL_GetProgramivRobustANGLE(GLuint program,
                                            GLenum pname,
                                            GLsizei bufSize,
                                            GLsizei *length,
                                            GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetProgramivRobustANGLE(program = %u, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        program, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramivRobustANGLE"];
    PFNGLGETPROGRAMIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETPROGRAMIVROBUSTANGLEPROC>(entry);
    next(program, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetRenderbufferParameterivRobustANGLE(GLenum target,
                                                          GLenum pname,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetRenderbufferParameterivRobustANGLE(target = %s, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetRenderbufferParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetRenderbufferParameterivRobustANGLE"];
    PFNGLGETRENDERBUFFERPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetShaderivRobustANGLE(GLuint shader,
                                           GLenum pname,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetShaderivRobustANGLE(shader = %u, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        shader, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetShaderivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetShaderivRobustANGLE"];
    PFNGLGETSHADERIVROBUSTANGLEPROC next = reinterpret_cast<PFNGLGETSHADERIVROBUSTANGLEPROC>(entry);
    next(shader, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetTexParameterfvRobustANGLE(GLenum target,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterfvRobustANGLE(target = %s, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexParameterfvRobustANGLE"];
    PFNGLGETTEXPARAMETERFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXPARAMETERFVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetTexParameterivRobustANGLE(GLenum target,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterivRobustANGLE(target = %s, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexParameterivRobustANGLE"];
    PFNGLGETTEXPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetUniformfvRobustANGLE(GLuint program,
                                            GLint location,
                                            GLsizei bufSize,
                                            GLsizei *length,
                                            GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformfvRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetUniformfvRobustANGLE"];
    PFNGLGETUNIFORMFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETUNIFORMFVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_GetUniformivRobustANGLE(GLuint program,
                                            GLint location,
                                            GLsizei bufSize,
                                            GLsizei *length,
                                            GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformivRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetUniformivRobustANGLE"];
    PFNGLGETUNIFORMIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETUNIFORMIVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_GetVertexAttribfvRobustANGLE(GLuint index,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribfvRobustANGLE(index = %u, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribfvRobustANGLE"];
    PFNGLGETVERTEXATTRIBFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBFVROBUSTANGLEPROC>(entry);
    next(index, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetVertexAttribivRobustANGLE(GLuint index,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribivRobustANGLE(index = %u, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribivRobustANGLE"];
    PFNGLGETVERTEXATTRIBIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBIVROBUSTANGLEPROC>(entry);
    next(index, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetVertexAttribPointervRobustANGLE(GLuint index,
                                                       GLenum pname,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       void **pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribPointervRobustANGLE(index = %u, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", pointer = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)pointer);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribPointervRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribPointervRobustANGLE"];
    PFNGLGETVERTEXATTRIBPOINTERVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERVROBUSTANGLEPROC>(entry);
    next(index, pname, bufSize, length, pointer);
}

void GL_APIENTRY GL_ReadPixelsRobustANGLE(GLint x,
                                          GLint y,
                                          GLsizei width,
                                          GLsizei height,
                                          GLenum format,
                                          GLenum type,
                                          GLsizei bufSize,
                                          GLsizei *length,
                                          GLsizei *columns,
                                          GLsizei *rows,
                                          void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReadPixelsRobustANGLE(x = %d, y = %d, width = %d, height = %d, format = %s, "
                 "type = %s, bufSize = %d, length = 0x%016" PRIxPTR ", columns = 0x%016" PRIxPTR
                 ", rows = 0x%016" PRIxPTR ", pixels = 0x%016" PRIxPTR ")",
                 x, y, width, height, GLenumToString(GLESEnum::AllEnums, format),
                 GLenumToString(GLESEnum::AllEnums, type), bufSize, (uintptr_t)length,
                 (uintptr_t)columns, (uintptr_t)rows, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReadPixelsRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glReadPixelsRobustANGLE"];
    PFNGLREADPIXELSROBUSTANGLEPROC next = reinterpret_cast<PFNGLREADPIXELSROBUSTANGLEPROC>(entry);
    next(x, y, width, height, format, type, bufSize, length, columns, rows, pixels);
}

void GL_APIENTRY GL_TexImage2DRobustANGLE(GLenum target,
                                          GLint level,
                                          GLint internalformat,
                                          GLsizei width,
                                          GLsizei height,
                                          GLint border,
                                          GLenum format,
                                          GLenum type,
                                          GLsizei bufSize,
                                          const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexImage2DRobustANGLE(target = %s, level = %d, internalformat = %d, width = %d, height "
        "= %d, border = %d, format = %s, type = %s, bufSize = %d, pixels = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), level, internalformat, width, height, border,
        GLenumToString(GLESEnum::AllEnums, format), GLenumToString(GLESEnum::AllEnums, type),
        bufSize, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexImage2DRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glTexImage2DRobustANGLE"];
    PFNGLTEXIMAGE2DROBUSTANGLEPROC next = reinterpret_cast<PFNGLTEXIMAGE2DROBUSTANGLEPROC>(entry);
    next(target, level, internalformat, width, height, border, format, type, bufSize, pixels);
}

void GL_APIENTRY GL_TexParameterfvRobustANGLE(GLenum target,
                                              GLenum pname,
                                              GLsizei bufSize,
                                              const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexParameterfvRobustANGLE(target = %s, pname = %s, bufSize = %d, params = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::AllEnums, target), GLenumToString(GLESEnum::AllEnums, pname),
        bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexParameterfvRobustANGLE"];
    PFNGLTEXPARAMETERFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXPARAMETERFVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, params);
}

void GL_APIENTRY GL_TexParameterivRobustANGLE(GLenum target,
                                              GLenum pname,
                                              GLsizei bufSize,
                                              const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexParameterivRobustANGLE(target = %s, pname = %s, bufSize = %d, params = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::AllEnums, target), GLenumToString(GLESEnum::AllEnums, pname),
        bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexParameterivRobustANGLE"];
    PFNGLTEXPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, params);
}

void GL_APIENTRY GL_TexSubImage2DRobustANGLE(GLenum target,
                                             GLint level,
                                             GLint xoffset,
                                             GLint yoffset,
                                             GLsizei width,
                                             GLsizei height,
                                             GLenum format,
                                             GLenum type,
                                             GLsizei bufSize,
                                             const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexSubImage2DRobustANGLE(target = %s, level = %d, xoffset = %d, yoffset = %d, width = "
        "%d, height = %d, format = %s, type = %s, bufSize = %d, pixels = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), level, xoffset, yoffset, width, height,
        GLenumToString(GLESEnum::AllEnums, format), GLenumToString(GLESEnum::AllEnums, type),
        bufSize, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexSubImage2DRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexSubImage2DRobustANGLE"];
    PFNGLTEXSUBIMAGE2DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXSUBIMAGE2DROBUSTANGLEPROC>(entry);
    next(target, level, xoffset, yoffset, width, height, format, type, bufSize, pixels);
}

void GL_APIENTRY GL_TexImage3DRobustANGLE(GLenum target,
                                          GLint level,
                                          GLint internalformat,
                                          GLsizei width,
                                          GLsizei height,
                                          GLsizei depth,
                                          GLint border,
                                          GLenum format,
                                          GLenum type,
                                          GLsizei bufSize,
                                          const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexImage3DRobustANGLE(target = %s, level = %d, internalformat = %d, width = "
                 "%d, height = %d, depth = %d, border = %d, format = %s, type = %s, bufSize = %d, "
                 "pixels = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level, internalformat, width, height,
                 depth, border, GLenumToString(GLESEnum::AllEnums, format),
                 GLenumToString(GLESEnum::AllEnums, type), bufSize, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexImage3DRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glTexImage3DRobustANGLE"];
    PFNGLTEXIMAGE3DROBUSTANGLEPROC next = reinterpret_cast<PFNGLTEXIMAGE3DROBUSTANGLEPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, format, type, bufSize,
         pixels);
}

void GL_APIENTRY GL_TexSubImage3DRobustANGLE(GLenum target,
                                             GLint level,
                                             GLint xoffset,
                                             GLint yoffset,
                                             GLint zoffset,
                                             GLsizei width,
                                             GLsizei height,
                                             GLsizei depth,
                                             GLenum format,
                                             GLenum type,
                                             GLsizei bufSize,
                                             const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexSubImage3DRobustANGLE(target = %s, level = %d, xoffset = %d, yoffset = %d, "
                 "zoffset = %d, width = %d, height = %d, depth = %d, format = %s, type = %s, "
                 "bufSize = %d, pixels = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level, xoffset, yoffset, zoffset,
                 width, height, depth, GLenumToString(GLESEnum::AllEnums, format),
                 GLenumToString(GLESEnum::AllEnums, type), bufSize, (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexSubImage3DRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexSubImage3DRobustANGLE"];
    PFNGLTEXSUBIMAGE3DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXSUBIMAGE3DROBUSTANGLEPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize,
         pixels);
}

void GL_APIENTRY GL_CompressedTexImage2DRobustANGLE(GLenum target,
                                                    GLint level,
                                                    GLenum internalformat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLint border,
                                                    GLsizei imageSize,
                                                    GLsizei dataSize,
                                                    const GLvoid *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glCompressedTexImage2DRobustANGLE(target = %s, level = %d, internalformat = %s, width = "
        "%d, height = %d, border = %d, imageSize = %d, dataSize = %d, data = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), level,
        GLenumToString(GLESEnum::AllEnums, internalformat), width, height, border, imageSize,
        dataSize, (uintptr_t)data);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLCompressedTexImage2DRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexImage2DRobustANGLE"];
    PFNGLCOMPRESSEDTEXIMAGE2DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2DROBUSTANGLEPROC>(entry);
    next(target, level, internalformat, width, height, border, imageSize, dataSize, data);
}

void GL_APIENTRY GL_CompressedTexSubImage2DRobustANGLE(GLenum target,
                                                       GLint level,
                                                       GLsizei xoffset,
                                                       GLsizei yoffset,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLenum format,
                                                       GLsizei imageSize,
                                                       GLsizei dataSize,
                                                       const GLvoid *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glCompressedTexSubImage2DRobustANGLE(target = %s, level = %d, xoffset = %d, yoffset = %d, "
        "width = %d, height = %d, format = %s, imageSize = %d, dataSize = %d, data = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::AllEnums, target), level, xoffset, yoffset, width, height,
        GLenumToString(GLESEnum::AllEnums, format), imageSize, dataSize, (uintptr_t)data);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLCompressedTexSubImage2DRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexSubImage2DRobustANGLE"];
    PFNGLCOMPRESSEDTEXSUBIMAGE2DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2DROBUSTANGLEPROC>(entry);
    next(target, level, xoffset, yoffset, width, height, format, imageSize, dataSize, data);
}

void GL_APIENTRY GL_CompressedTexImage3DRobustANGLE(GLenum target,
                                                    GLint level,
                                                    GLenum internalformat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth,
                                                    GLint border,
                                                    GLsizei imageSize,
                                                    GLsizei dataSize,
                                                    const GLvoid *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexImage3DRobustANGLE(target = %s, level = %d, internalformat = %s, "
                 "width = %d, height = %d, depth = %d, border = %d, imageSize = %d, dataSize = %d, "
                 "data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level,
                 GLenumToString(GLESEnum::AllEnums, internalformat), width, height, depth, border,
                 imageSize, dataSize, (uintptr_t)data);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLCompressedTexImage3DRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexImage3DRobustANGLE"];
    PFNGLCOMPRESSEDTEXIMAGE3DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DROBUSTANGLEPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, imageSize, dataSize, data);
}

void GL_APIENTRY GL_CompressedTexSubImage3DRobustANGLE(GLenum target,
                                                       GLint level,
                                                       GLint xoffset,
                                                       GLint yoffset,
                                                       GLint zoffset,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       GLenum format,
                                                       GLsizei imageSize,
                                                       GLsizei dataSize,
                                                       const GLvoid *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexSubImage3DRobustANGLE(target = %s, level = %d, xoffset = %d, "
                 "yoffset = %d, zoffset = %d, width = %d, height = %d, depth = %d, format = %s, "
                 "imageSize = %d, dataSize = %d, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level, xoffset, yoffset, zoffset,
                 width, height, depth, GLenumToString(GLESEnum::AllEnums, format), imageSize,
                 dataSize, (uintptr_t)data);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLCompressedTexSubImage3DRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexSubImage3DRobustANGLE"];
    PFNGLCOMPRESSEDTEXSUBIMAGE3DROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DROBUSTANGLEPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize,
         dataSize, data);
}

void GL_APIENTRY GL_GetQueryivRobustANGLE(GLenum target,
                                          GLenum pname,
                                          GLsizei bufSize,
                                          GLsizei *length,
                                          GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetQueryivRobustANGLE(target = %s, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), GLenumToString(GLESEnum::AllEnums, pname),
        bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetQueryivRobustANGLE"];
    PFNGLGETQUERYIVROBUSTANGLEPROC next = reinterpret_cast<PFNGLGETQUERYIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetQueryObjectuivRobustANGLE(GLuint id,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetQueryObjectuivRobustANGLE(id = %u, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        id, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetQueryObjectuivRobustANGLE"];
    PFNGLGETQUERYOBJECTUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETQUERYOBJECTUIVROBUSTANGLEPROC>(entry);
    next(id, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetBufferPointervRobustANGLE(GLenum target,
                                                 GLenum pname,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 void **params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferPointervRobustANGLE(target = %s, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBufferPointervRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetBufferPointervRobustANGLE"];
    PFNGLGETBUFFERPOINTERVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETBUFFERPOINTERVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetIntegeri_vRobustANGLE(GLenum target,
                                             GLuint index,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLint *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetIntegeri_vRobustANGLE(target = %s, index = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", data = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), index, bufSize, (uintptr_t)length,
        (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetIntegeri_vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetIntegeri_vRobustANGLE"];
    PFNGLGETINTEGERI_VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETINTEGERI_VROBUSTANGLEPROC>(entry);
    next(target, index, bufSize, length, data);
}

void GL_APIENTRY GL_GetInternalformativRobustANGLE(GLenum target,
                                                   GLenum internalformat,
                                                   GLenum pname,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetInternalformativRobustANGLE(target = %s, internalformat = %s, pname = %s, "
                 "bufSize = %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, internalformat),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetInternalformativRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetInternalformativRobustANGLE"];
    PFNGLGETINTERNALFORMATIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETINTERNALFORMATIVROBUSTANGLEPROC>(entry);
    next(target, internalformat, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetVertexAttribIivRobustANGLE(GLuint index,
                                                  GLenum pname,
                                                  GLsizei bufSize,
                                                  GLsizei *length,
                                                  GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribIivRobustANGLE(index = %u, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribIivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribIivRobustANGLE"];
    PFNGLGETVERTEXATTRIBIIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBIIVROBUSTANGLEPROC>(entry);
    next(index, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetVertexAttribIuivRobustANGLE(GLuint index,
                                                   GLenum pname,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribIuivRobustANGLE(index = %u, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribIuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribIuivRobustANGLE"];
    PFNGLGETVERTEXATTRIBIUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBIUIVROBUSTANGLEPROC>(entry);
    next(index, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetUniformuivRobustANGLE(GLuint program,
                                             GLint location,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformuivRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetUniformuivRobustANGLE"];
    PFNGLGETUNIFORMUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETUNIFORMUIVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_GetActiveUniformBlockivRobustANGLE(GLuint program,
                                                       GLuint uniformBlockIndex,
                                                       GLenum pname,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetActiveUniformBlockivRobustANGLE(program = %u, uniformBlockIndex = %u, pname "
                 "= %s, bufSize = %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, uniformBlockIndex, GLenumToString(GLESEnum::AllEnums, pname), bufSize,
                 (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetActiveUniformBlockivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetActiveUniformBlockivRobustANGLE"];
    PFNGLGETACTIVEUNIFORMBLOCKIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIVROBUSTANGLEPROC>(entry);
    next(program, uniformBlockIndex, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetInteger64vRobustANGLE(GLenum pname,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLint64 *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetInteger64vRobustANGLE(pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
                 ", data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetInteger64vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetInteger64vRobustANGLE"];
    PFNGLGETINTEGER64VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETINTEGER64VROBUSTANGLEPROC>(entry);
    next(pname, bufSize, length, data);
}

void GL_APIENTRY GL_GetInteger64i_vRobustANGLE(GLenum target,
                                               GLuint index,
                                               GLsizei bufSize,
                                               GLsizei *length,
                                               GLint64 *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetInteger64i_vRobustANGLE(target = %s, index = %u, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), index, bufSize, (uintptr_t)length,
                 (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetInteger64i_vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetInteger64i_vRobustANGLE"];
    PFNGLGETINTEGER64I_VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETINTEGER64I_VROBUSTANGLEPROC>(entry);
    next(target, index, bufSize, length, data);
}

void GL_APIENTRY GL_GetBufferParameteri64vRobustANGLE(GLenum target,
                                                      GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferParameteri64vRobustANGLE(target = %s, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetBufferParameteri64vRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetBufferParameteri64vRobustANGLE"];
    PFNGLGETBUFFERPARAMETERI64VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETBUFFERPARAMETERI64VROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_SamplerParameterivRobustANGLE(GLuint sampler,
                                                  GLuint pname,
                                                  GLsizei bufSize,
                                                  const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterivRobustANGLE(sampler = %u, pname = %u, bufSize = %d, param = "
                 "0x%016" PRIxPTR ")",
                 sampler, pname, bufSize, (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterivRobustANGLE"];
    PFNGLSAMPLERPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, param);
}

void GL_APIENTRY GL_SamplerParameterfvRobustANGLE(GLuint sampler,
                                                  GLenum pname,
                                                  GLsizei bufSize,
                                                  const GLfloat *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterfvRobustANGLE(sampler = %u, pname = %s, bufSize = %d, param = "
                 "0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterfvRobustANGLE"];
    PFNGLSAMPLERPARAMETERFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERFVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, param);
}

void GL_APIENTRY GL_GetSamplerParameterivRobustANGLE(GLuint sampler,
                                                     GLenum pname,
                                                     GLsizei bufSize,
                                                     GLsizei *length,
                                                     GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterivRobustANGLE(sampler = %u, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterivRobustANGLE"];
    PFNGLGETSAMPLERPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetSamplerParameterfvRobustANGLE(GLuint sampler,
                                                     GLenum pname,
                                                     GLsizei bufSize,
                                                     GLsizei *length,
                                                     GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterfvRobustANGLE(sampler = %u, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterfvRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterfvRobustANGLE"];
    PFNGLGETSAMPLERPARAMETERFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERFVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetFramebufferParameterivRobustANGLE(GLenum target,
                                                         GLenum pname,
                                                         GLsizei bufSize,
                                                         GLsizei *length,
                                                         GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFramebufferParameterivRobustANGLE(target = %s, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferParameterivRobustANGLE"];
    PFNGLGETFRAMEBUFFERPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetProgramInterfaceivRobustANGLE(GLuint program,
                                                     GLenum programInterface,
                                                     GLenum pname,
                                                     GLsizei bufSize,
                                                     GLsizei *length,
                                                     GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramInterfaceivRobustANGLE(program = %u, programInterface = %s, pname = "
                 "%s, bufSize = %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, GLenumToString(GLESEnum::AllEnums, programInterface),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetProgramInterfaceivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramInterfaceivRobustANGLE"];
    PFNGLGETPROGRAMINTERFACEIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETPROGRAMINTERFACEIVROBUSTANGLEPROC>(entry);
    next(program, programInterface, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetBooleani_vRobustANGLE(GLenum target,
                                             GLuint index,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLboolean *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetBooleani_vRobustANGLE(target = %s, index = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", data = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, target), index, bufSize, (uintptr_t)length,
        (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBooleani_vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetBooleani_vRobustANGLE"];
    PFNGLGETBOOLEANI_VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETBOOLEANI_VROBUSTANGLEPROC>(entry);
    next(target, index, bufSize, length, data);
}

void GL_APIENTRY GL_GetMultisamplefvRobustANGLE(GLenum pname,
                                                GLuint index,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLfloat *val)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetMultisamplefvRobustANGLE(pname = %s, index = %u, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", val = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), index, bufSize, (uintptr_t)length,
                 (uintptr_t)val);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetMultisamplefvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetMultisamplefvRobustANGLE"];
    PFNGLGETMULTISAMPLEFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETMULTISAMPLEFVROBUSTANGLEPROC>(entry);
    next(pname, index, bufSize, length, val);
}

void GL_APIENTRY GL_GetTexLevelParameterivRobustANGLE(GLenum target,
                                                      GLint level,
                                                      GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexLevelParameterivRobustANGLE(target = %s, level = %d, pname = %s, bufSize "
                 "= %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level,
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameterivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexLevelParameterivRobustANGLE"];
    PFNGLGETTEXLEVELPARAMETERIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXLEVELPARAMETERIVROBUSTANGLEPROC>(entry);
    next(target, level, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetTexLevelParameterfvRobustANGLE(GLenum target,
                                                      GLint level,
                                                      GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexLevelParameterfvRobustANGLE(target = %s, level = %d, pname = %s, bufSize "
                 "= %d, length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), level,
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetTexLevelParameterfvRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexLevelParameterfvRobustANGLE"];
    PFNGLGETTEXLEVELPARAMETERFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXLEVELPARAMETERFVROBUSTANGLEPROC>(entry);
    next(target, level, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetPointervRobustANGLERobustANGLE(GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      void **params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetPointervRobustANGLERobustANGLE(pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetPointervRobustANGLERobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetPointervRobustANGLERobustANGLE"];
    PFNGLGETPOINTERVROBUSTANGLEROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETPOINTERVROBUSTANGLEROBUSTANGLEPROC>(entry);
    next(pname, bufSize, length, params);
}

void GL_APIENTRY GL_ReadnPixelsRobustANGLE(GLint x,
                                           GLint y,
                                           GLsizei width,
                                           GLsizei height,
                                           GLenum format,
                                           GLenum type,
                                           GLsizei bufSize,
                                           GLsizei *length,
                                           GLsizei *columns,
                                           GLsizei *rows,
                                           void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReadnPixelsRobustANGLE(x = %d, y = %d, width = %d, height = %d, format = %s, "
                 "type = %s, bufSize = %d, length = 0x%016" PRIxPTR ", columns = 0x%016" PRIxPTR
                 ", rows = 0x%016" PRIxPTR ", data = 0x%016" PRIxPTR ")",
                 x, y, width, height, GLenumToString(GLESEnum::AllEnums, format),
                 GLenumToString(GLESEnum::AllEnums, type), bufSize, (uintptr_t)length,
                 (uintptr_t)columns, (uintptr_t)rows, (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReadnPixelsRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glReadnPixelsRobustANGLE"];
    PFNGLREADNPIXELSROBUSTANGLEPROC next = reinterpret_cast<PFNGLREADNPIXELSROBUSTANGLEPROC>(entry);
    next(x, y, width, height, format, type, bufSize, length, columns, rows, data);
}

void GL_APIENTRY GL_GetnUniformfvRobustANGLE(GLuint program,
                                             GLint location,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetnUniformfvRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetnUniformfvRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetnUniformfvRobustANGLE"];
    PFNGLGETNUNIFORMFVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETNUNIFORMFVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_GetnUniformivRobustANGLE(GLuint program,
                                             GLint location,
                                             GLsizei bufSize,
                                             GLsizei *length,
                                             GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetnUniformivRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetnUniformivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetnUniformivRobustANGLE"];
    PFNGLGETNUNIFORMIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETNUNIFORMIVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_GetnUniformuivRobustANGLE(GLuint program,
                                              GLint location,
                                              GLsizei bufSize,
                                              GLsizei *length,
                                              GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetnUniformuivRobustANGLE(program = %u, location = %d, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 program, location, bufSize, (uintptr_t)length, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetnUniformuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetnUniformuivRobustANGLE"];
    PFNGLGETNUNIFORMUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETNUNIFORMUIVROBUSTANGLEPROC>(entry);
    next(program, location, bufSize, length, params);
}

void GL_APIENTRY GL_TexParameterIivRobustANGLE(GLenum target,
                                               GLenum pname,
                                               GLsizei bufSize,
                                               const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIivRobustANGLE(target = %s, pname = %s, bufSize = %d, params = "
                 "0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexParameterIivRobustANGLE"];
    PFNGLTEXPARAMETERIIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXPARAMETERIIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, params);
}

void GL_APIENTRY GL_TexParameterIuivRobustANGLE(GLenum target,
                                                GLenum pname,
                                                GLsizei bufSize,
                                                const GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIuivRobustANGLE(target = %s, pname = %s, bufSize = %d, params = "
                 "0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexParameterIuivRobustANGLE"];
    PFNGLTEXPARAMETERIUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLTEXPARAMETERIUIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, params);
}

void GL_APIENTRY GL_GetTexParameterIivRobustANGLE(GLenum target,
                                                  GLenum pname,
                                                  GLsizei bufSize,
                                                  GLsizei *length,
                                                  GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIivRobustANGLE(target = %s, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexParameterIivRobustANGLE"];
    PFNGLGETTEXPARAMETERIIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXPARAMETERIIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetTexParameterIuivRobustANGLE(GLenum target,
                                                   GLenum pname,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIuivRobustANGLE(target = %s, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target),
                 GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIuivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTexParameterIuivRobustANGLE"];
    PFNGLGETTEXPARAMETERIUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETTEXPARAMETERIUIVROBUSTANGLEPROC>(entry);
    next(target, pname, bufSize, length, params);
}

void GL_APIENTRY GL_SamplerParameterIivRobustANGLE(GLuint sampler,
                                                   GLenum pname,
                                                   GLsizei bufSize,
                                                   const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIivRobustANGLE(sampler = %u, pname = %s, bufSize = %d, param = "
                 "0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterIivRobustANGLE"];
    PFNGLSAMPLERPARAMETERIIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERIIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, param);
}

void GL_APIENTRY GL_SamplerParameterIuivRobustANGLE(GLuint sampler,
                                                    GLenum pname,
                                                    GLsizei bufSize,
                                                    const GLuint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIuivRobustANGLE(sampler = %u, pname = %s, bufSize = %d, param "
                 "= 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)param);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIuivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterIuivRobustANGLE"];
    PFNGLSAMPLERPARAMETERIUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERIUIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, param);
}

void GL_APIENTRY GL_GetSamplerParameterIivRobustANGLE(GLuint sampler,
                                                      GLenum pname,
                                                      GLsizei bufSize,
                                                      GLsizei *length,
                                                      GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIivRobustANGLE(sampler = %u, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIivRobustANGLE"];
    PFNGLGETSAMPLERPARAMETERIIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetSamplerParameterIuivRobustANGLE(GLuint sampler,
                                                       GLenum pname,
                                                       GLsizei bufSize,
                                                       GLsizei *length,
                                                       GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIuivRobustANGLE(sampler = %u, pname = %s, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIuivRobustANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIuivRobustANGLE"];
    PFNGLGETSAMPLERPARAMETERIUIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIUIVROBUSTANGLEPROC>(entry);
    next(sampler, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetQueryObjectivRobustANGLE(GLuint id,
                                                GLenum pname,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetQueryObjectivRobustANGLE(id = %u, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        id, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectivRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetQueryObjectivRobustANGLE"];
    PFNGLGETQUERYOBJECTIVROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETQUERYOBJECTIVROBUSTANGLEPROC>(entry);
    next(id, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetQueryObjecti64vRobustANGLE(GLuint id,
                                                  GLenum pname,
                                                  GLsizei bufSize,
                                                  GLsizei *length,
                                                  GLint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetQueryObjecti64vRobustANGLE(id = %u, pname = %s, bufSize = %d, length = 0x%016" PRIxPTR
        ", params = 0x%016" PRIxPTR ")",
        id, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjecti64vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetQueryObjecti64vRobustANGLE"];
    PFNGLGETQUERYOBJECTI64VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETQUERYOBJECTI64VROBUSTANGLEPROC>(entry);
    next(id, pname, bufSize, length, params);
}

void GL_APIENTRY GL_GetQueryObjectui64vRobustANGLE(GLuint id,
                                                   GLenum pname,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLuint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjectui64vRobustANGLE(id = %u, pname = %s, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", params = 0x%016" PRIxPTR ")",
                 id, GLenumToString(GLESEnum::AllEnums, pname), bufSize, (uintptr_t)length,
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectui64vRobustANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetQueryObjectui64vRobustANGLE"];
    PFNGLGETQUERYOBJECTUI64VROBUSTANGLEPROC next =
        reinterpret_cast<PFNGLGETQUERYOBJECTUI64VROBUSTANGLEPROC>(entry);
    next(id, pname, bufSize, length, params);
}

void GL_APIENTRY GL_ImportSemaphoreZirconHandleANGLE(GLuint semaphore,
                                                     GLenum handleType,
                                                     GLuint handle)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glImportSemaphoreZirconHandleANGLE(semaphore = %u, handleType = %s, handle = %u)",
                 semaphore, GLenumToString(GLESEnum::ExternalHandleType, handleType), handle);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLImportSemaphoreZirconHandleANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glImportSemaphoreZirconHandleANGLE"];
    PFNGLIMPORTSEMAPHOREZIRCONHANDLEANGLEPROC next =
        reinterpret_cast<PFNGLIMPORTSEMAPHOREZIRCONHANDLEANGLEPROC>(entry);
    next(semaphore, handleType, handle);
}

void GL_APIENTRY GL_FramebufferMemorylessPixelLocalStorageANGLE(GLint plane, GLenum internalformat)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferMemorylessPixelLocalStorageANGLE(plane = %d, internalformat = %s)",
                 plane, GLenumToString(GLESEnum::AllEnums, internalformat));
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLFramebufferMemorylessPixelLocalStorageANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferMemorylessPixelLocalStorageANGLE"];
    PFNGLFRAMEBUFFERMEMORYLESSPIXELLOCALSTORAGEANGLEPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERMEMORYLESSPIXELLOCALSTORAGEANGLEPROC>(entry);
    next(plane, internalformat);
}

void GL_APIENTRY GL_FramebufferTexturePixelLocalStorageANGLE(GLint plane,
                                                             GLuint backingtexture,
                                                             GLint level,
                                                             GLint layer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexturePixelLocalStorageANGLE(plane = %d, backingtexture = %u, "
                 "level = %d, layer = %d)",
                 plane, backingtexture, level, layer);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexturePixelLocalStorageANGLE),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTexturePixelLocalStorageANGLE"];
    PFNGLFRAMEBUFFERTEXTUREPIXELLOCALSTORAGEANGLEPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREPIXELLOCALSTORAGEANGLEPROC>(entry);
    next(plane, backingtexture, level, layer);
}

void GL_APIENTRY GL_BeginPixelLocalStorageANGLE(GLsizei planes,
                                                const GLenum *loadops,
                                                const void *cleardata)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBeginPixelLocalStorageANGLE(planes = %d, loadops = 0x%016" PRIxPTR
                 ", cleardata = 0x%016" PRIxPTR ")",
                 planes, (uintptr_t)loadops, (uintptr_t)cleardata);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBeginPixelLocalStorageANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBeginPixelLocalStorageANGLE"];
    PFNGLBEGINPIXELLOCALSTORAGEANGLEPROC next =
        reinterpret_cast<PFNGLBEGINPIXELLOCALSTORAGEANGLEPROC>(entry);
    next(planes, loadops, cleardata);
}

void GL_APIENTRY GL_EndPixelLocalStorageANGLE()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEndPixelLocalStorageANGLE()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEndPixelLocalStorageANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEndPixelLocalStorageANGLE"];
    PFNGLENDPIXELLOCALSTORAGEANGLEPROC next =
        reinterpret_cast<PFNGLENDPIXELLOCALSTORAGEANGLEPROC>(entry);
    next();
}

void GL_APIENTRY GL_PixelLocalStorageBarrierANGLE()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPixelLocalStorageBarrierANGLE()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPixelLocalStorageBarrierANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glPixelLocalStorageBarrierANGLE"];
    PFNGLPIXELLOCALSTORAGEBARRIERANGLEPROC next =
        reinterpret_cast<PFNGLPIXELLOCALSTORAGEBARRIERANGLEPROC>(entry);
    next();
}

void GL_APIENTRY GL_TexImage2DExternalANGLE(GLenum target,
                                            GLint level,
                                            GLint internalformat,
                                            GLsizei width,
                                            GLsizei height,
                                            GLint border,
                                            GLenum format,
                                            GLenum type)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexImage2DExternalANGLE(target = %s, level = %d, internalformat = %d, width = "
                 "%d, height = %d, border = %d, format = %s, type = %s)",
                 GLenumToString(GLESEnum::TextureTarget, target), level, internalformat, width,
                 height, border, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexImage2DExternalANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexImage2DExternalANGLE"];
    PFNGLTEXIMAGE2DEXTERNALANGLEPROC next =
        reinterpret_cast<PFNGLTEXIMAGE2DEXTERNALANGLEPROC>(entry);
    next(target, level, internalformat, width, height, border, format, type);
}

void GL_APIENTRY GL_InvalidateTextureANGLE(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glInvalidateTextureANGLE(target = %s)",
                 GLenumToString(GLESEnum::TextureTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLInvalidateTextureANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glInvalidateTextureANGLE"];
    PFNGLINVALIDATETEXTUREANGLEPROC next = reinterpret_cast<PFNGLINVALIDATETEXTUREANGLEPROC>(entry);
    next(target);
}

void GL_APIENTRY GL_TexStorage2DMultisampleANGLE(GLenum target,
                                                 GLsizei samples,
                                                 GLenum internalformat,
                                                 GLsizei width,
                                                 GLsizei height,
                                                 GLboolean fixedsamplelocations)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage2DMultisampleANGLE(target = %s, samples = %d, internalformat = %s, "
                 "width = %d, height = %d, fixedsamplelocations = %s)",
                 GLenumToString(GLESEnum::AllEnums, target), samples,
                 GLenumToString(GLESEnum::AllEnums, internalformat), width, height,
                 GLbooleanToString(fixedsamplelocations));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorage2DMultisampleANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorage2DMultisampleANGLE"];
    PFNGLTEXSTORAGE2DMULTISAMPLEANGLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGE2DMULTISAMPLEANGLEPROC>(entry);
    next(target, samples, internalformat, width, height, fixedsamplelocations);
}

void GL_APIENTRY GL_GetMultisamplefvANGLE(GLenum pname, GLuint index, GLfloat *val)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetMultisamplefvANGLE(pname = %s, index = %u, val = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), index, (uintptr_t)val);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetMultisamplefvANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetMultisamplefvANGLE"];
    PFNGLGETMULTISAMPLEFVANGLEPROC next = reinterpret_cast<PFNGLGETMULTISAMPLEFVANGLEPROC>(entry);
    next(pname, index, val);
}

void GL_APIENTRY GL_SampleMaskiANGLE(GLuint maskNumber, GLbitfield mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSampleMaskiANGLE(maskNumber = %u, mask = %s)", maskNumber,
                 GLbitfieldToString(GLESEnum::AllEnums, mask).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSampleMaskiANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glSampleMaskiANGLE"];
    PFNGLSAMPLEMASKIANGLEPROC next = reinterpret_cast<PFNGLSAMPLEMASKIANGLEPROC>(entry);
    next(maskNumber, mask);
}

void GL_APIENTRY GL_GetTranslatedShaderSourceANGLE(GLuint shader,
                                                   GLsizei bufSize,
                                                   GLsizei *length,
                                                   GLchar *source)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetTranslatedShaderSourceANGLE(shader = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", source = 0x%016" PRIxPTR ")",
        shader, bufSize, (uintptr_t)length, (uintptr_t)source);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTranslatedShaderSourceANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTranslatedShaderSourceANGLE"];
    PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC next =
        reinterpret_cast<PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC>(entry);
    next(shader, bufSize, length, source);
}

void GL_APIENTRY GL_AcquireTexturesANGLE(GLuint numTextures,
                                         const GLuint *textures,
                                         const GLenum *layouts)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glAcquireTexturesANGLE(numTextures = %u, textures = 0x%016" PRIxPTR
                 ", layouts = 0x%016" PRIxPTR ")",
                 numTextures, (uintptr_t)textures, (uintptr_t)layouts);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLAcquireTexturesANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glAcquireTexturesANGLE"];
    PFNGLACQUIRETEXTURESANGLEPROC next = reinterpret_cast<PFNGLACQUIRETEXTURESANGLEPROC>(entry);
    next(numTextures, textures, layouts);
}

void GL_APIENTRY GL_ReleaseTexturesANGLE(GLuint numTextures,
                                         const GLuint *textures,
                                         GLenum *layouts)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReleaseTexturesANGLE(numTextures = %u, textures = 0x%016" PRIxPTR
                 ", layouts = 0x%016" PRIxPTR ")",
                 numTextures, (uintptr_t)textures, (uintptr_t)layouts);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReleaseTexturesANGLE),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glReleaseTexturesANGLE"];
    PFNGLRELEASETEXTURESANGLEPROC next = reinterpret_cast<PFNGLRELEASETEXTURESANGLEPROC>(entry);
    next(numTextures, textures, layouts);
}

void GL_APIENTRY GL_BindUniformLocationCHROMIUM(GLuint program, GLint location, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindUniformLocationCHROMIUM(program = %u, location = %d, name = 0x%016" PRIxPTR
                 ")",
                 program, location, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindUniformLocationCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBindUniformLocationCHROMIUM"];
    PFNGLBINDUNIFORMLOCATIONCHROMIUMPROC next =
        reinterpret_cast<PFNGLBINDUNIFORMLOCATIONCHROMIUMPROC>(entry);
    next(program, location, name);
}

void GL_APIENTRY GL_CompressedCopyTextureCHROMIUM(GLuint sourceId, GLuint destId)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCompressedCopyTextureCHROMIUM(sourceId = %u, destId = %u)",
                 sourceId, destId);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompressedCopyTextureCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedCopyTextureCHROMIUM"];
    PFNGLCOMPRESSEDCOPYTEXTURECHROMIUMPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDCOPYTEXTURECHROMIUMPROC>(entry);
    next(sourceId, destId);
}

void GL_APIENTRY GL_CopyTextureCHROMIUM(GLuint sourceId,
                                        GLint sourceLevel,
                                        GLenum destTarget,
                                        GLuint destId,
                                        GLint destLevel,
                                        GLint internalFormat,
                                        GLenum destType,
                                        GLboolean unpackFlipY,
                                        GLboolean unpackPremultiplyAlpha,
                                        GLboolean unpackUnmultiplyAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTextureCHROMIUM(sourceId = %u, sourceLevel = %d, destTarget = %s, destId = "
                 "%u, destLevel = %d, internalFormat = %d, destType = %s, unpackFlipY = %s, "
                 "unpackPremultiplyAlpha = %s, unpackUnmultiplyAlpha = %s)",
                 sourceId, sourceLevel, GLenumToString(GLESEnum::AllEnums, destTarget), destId,
                 destLevel, internalFormat, GLenumToString(GLESEnum::AllEnums, destType),
                 GLbooleanToString(unpackFlipY), GLbooleanToString(unpackPremultiplyAlpha),
                 GLbooleanToString(unpackUnmultiplyAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyTextureCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glCopyTextureCHROMIUM"];
    PFNGLCOPYTEXTURECHROMIUMPROC next = reinterpret_cast<PFNGLCOPYTEXTURECHROMIUMPROC>(entry);
    next(sourceId, sourceLevel, destTarget, destId, destLevel, internalFormat, destType,
         unpackFlipY, unpackPremultiplyAlpha, unpackUnmultiplyAlpha);
}

void GL_APIENTRY GL_CopySubTextureCHROMIUM(GLuint sourceId,
                                           GLint sourceLevel,
                                           GLenum destTarget,
                                           GLuint destId,
                                           GLint destLevel,
                                           GLint xoffset,
                                           GLint yoffset,
                                           GLint x,
                                           GLint y,
                                           GLint width,
                                           GLint height,
                                           GLboolean unpackFlipY,
                                           GLboolean unpackPremultiplyAlpha,
                                           GLboolean unpackUnmultiplyAlpha)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glCopySubTextureCHROMIUM(sourceId = %u, sourceLevel = %d, destTarget = %s, destId = %u, "
        "destLevel = %d, xoffset = %d, yoffset = %d, x = %d, y = %d, width = %d, height = %d, "
        "unpackFlipY = %s, unpackPremultiplyAlpha = %s, unpackUnmultiplyAlpha = %s)",
        sourceId, sourceLevel, GLenumToString(GLESEnum::AllEnums, destTarget), destId, destLevel,
        xoffset, yoffset, x, y, width, height, GLbooleanToString(unpackFlipY),
        GLbooleanToString(unpackPremultiplyAlpha), GLbooleanToString(unpackUnmultiplyAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopySubTextureCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glCopySubTextureCHROMIUM"];
    PFNGLCOPYSUBTEXTURECHROMIUMPROC next = reinterpret_cast<PFNGLCOPYSUBTEXTURECHROMIUMPROC>(entry);
    next(sourceId, sourceLevel, destTarget, destId, destLevel, xoffset, yoffset, x, y, width,
         height, unpackFlipY, unpackPremultiplyAlpha, unpackUnmultiplyAlpha);
}

void GL_APIENTRY GL_CoverageModulationCHROMIUM(GLenum components)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCoverageModulationCHROMIUM(components = %s)",
                 GLenumToString(GLESEnum::AllEnums, components));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCoverageModulationCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCoverageModulationCHROMIUM"];
    PFNGLCOVERAGEMODULATIONCHROMIUMPROC next =
        reinterpret_cast<PFNGLCOVERAGEMODULATIONCHROMIUMPROC>(entry);
    next(components);
}

void GL_APIENTRY GL_LoseContextCHROMIUM(GLenum current, GLenum other)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLoseContextCHROMIUM(current = %s, other = %s)",
                 GLenumToString(GLESEnum::GraphicsResetStatus, current),
                 GLenumToString(GLESEnum::GraphicsResetStatus, other));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLLoseContextCHROMIUM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glLoseContextCHROMIUM"];
    PFNGLLOSECONTEXTCHROMIUMPROC next = reinterpret_cast<PFNGLLOSECONTEXTCHROMIUMPROC>(entry);
    next(current, other);
}

void GL_APIENTRY GL_EGLImageTargetTexStorageEXT(GLenum target,
                                                GLeglImageOES image,
                                                const GLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glEGLImageTargetTexStorageEXT(target = %s, image = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), (uintptr_t)image,
                 (uintptr_t)attrib_list);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEGLImageTargetTexStorageEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEGLImageTargetTexStorageEXT"];
    PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC next =
        reinterpret_cast<PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC>(entry);
    next(target, image, attrib_list);
}

void GL_APIENTRY GL_EGLImageTargetTextureStorageEXT(GLuint texture,
                                                    GLeglImageOES image,
                                                    const GLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glEGLImageTargetTextureStorageEXT(texture = %u, image = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 texture, (uintptr_t)image, (uintptr_t)attrib_list);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLEGLImageTargetTextureStorageEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEGLImageTargetTextureStorageEXT"];
    PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC next =
        reinterpret_cast<PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC>(entry);
    next(texture, image, attrib_list);
}

void GL_APIENTRY GL_DrawArraysInstancedBaseInstanceEXT(GLenum mode,
                                                       GLint first,
                                                       GLsizei count,
                                                       GLsizei instancecount,
                                                       GLuint baseinstance)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawArraysInstancedBaseInstanceEXT(mode = %s, first = %d, count = %d, "
                 "instancecount = %d, baseinstance = %u)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), first, count, instancecount,
                 baseinstance);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawArraysInstancedBaseInstanceEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawArraysInstancedBaseInstanceEXT"];
    PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC next =
        reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC>(entry);
    next(mode, first, count, instancecount, baseinstance);
}

void GL_APIENTRY GL_DrawElementsInstancedBaseInstanceEXT(GLenum mode,
                                                         GLsizei count,
                                                         GLenum type,
                                                         const void *indices,
                                                         GLsizei instancecount,
                                                         GLuint baseinstance)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseInstanceEXT(mode = %s, count = %d, type = %s, indices "
                 "= 0x%016" PRIxPTR ", instancecount = %d, baseinstance = %u)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::PrimitiveType, type), (uintptr_t)indices, instancecount,
                 baseinstance);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseInstanceEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseInstanceEXT"];
    PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC>(entry);
    next(mode, count, type, indices, instancecount, baseinstance);
}

void GL_APIENTRY GL_DrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode,
                                                                   GLsizei count,
                                                                   GLenum type,
                                                                   const void *indices,
                                                                   GLsizei instancecount,
                                                                   GLint basevertex,
                                                                   GLuint baseinstance)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode = %s, count = %d, type = "
                 "%s, indices = 0x%016" PRIxPTR
                 ", instancecount = %d, basevertex = %d, baseinstance = %u)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
                 instancecount, basevertex, baseinstance);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseVertexBaseInstanceEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseVertexBaseInstanceEXT"];
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC>(entry);
    next(mode, count, type, indices, instancecount, basevertex, baseinstance);
}

void GL_APIENTRY GL_BindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindFragDataLocationEXT(program = %u, color = %u, name = 0x%016" PRIxPTR ")",
                 program, color, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindFragDataLocationEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBindFragDataLocationEXT"];
    PFNGLBINDFRAGDATALOCATIONEXTPROC next =
        reinterpret_cast<PFNGLBINDFRAGDATALOCATIONEXTPROC>(entry);
    next(program, color, name);
}

void GL_APIENTRY GL_BindFragDataLocationIndexedEXT(GLuint program,
                                                   GLuint colorNumber,
                                                   GLuint index,
                                                   const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindFragDataLocationIndexedEXT(program = %u, colorNumber = %u, index = %u, "
                 "name = 0x%016" PRIxPTR ")",
                 program, colorNumber, index, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindFragDataLocationIndexedEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBindFragDataLocationIndexedEXT"];
    PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC next =
        reinterpret_cast<PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC>(entry);
    next(program, colorNumber, index, name);
}

GLint GL_APIENTRY GL_GetFragDataIndexEXT(GLuint program, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetFragDataIndexEXT(program = %u, name = 0x%016" PRIxPTR ")",
                 program, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetFragDataIndexEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetFragDataIndexEXT"];
    PFNGLGETFRAGDATAINDEXEXTPROC next = reinterpret_cast<PFNGLGETFRAGDATAINDEXEXTPROC>(entry);
    return next(program, name);
}

GLint GL_APIENTRY GL_GetProgramResourceLocationIndexEXT(GLuint program,
                                                        GLenum programInterface,
                                                        const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramResourceLocationIndexEXT(program = %u, programInterface = %s, name = "
                 "0x%016" PRIxPTR ")",
                 program, GLenumToString(GLESEnum::ProgramInterface, programInterface),
                 (uintptr_t)name);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetProgramResourceLocationIndexEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramResourceLocationIndexEXT"];
    PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC next =
        reinterpret_cast<PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC>(entry);
    return next(program, programInterface, name);
}

void GL_APIENTRY GL_BufferStorageEXT(GLenum target,
                                     GLsizeiptr size,
                                     const void *data,
                                     GLbitfield flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBufferStorageEXT(target = %s, size = %llu, data = 0x%016" PRIxPTR
                 ", flags = %s)",
                 GLenumToString(GLESEnum::BufferStorageTarget, target),
                 static_cast<unsigned long long>(size), (uintptr_t)data,
                 GLbitfieldToString(GLESEnum::BufferStorageMask, flags).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBufferStorageEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glBufferStorageEXT"];
    PFNGLBUFFERSTORAGEEXTPROC next = reinterpret_cast<PFNGLBUFFERSTORAGEEXTPROC>(entry);
    next(target, size, data, flags);
}

void GL_APIENTRY GL_ClipControlEXT(GLenum origin, GLenum depth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClipControlEXT(origin = %s, depth = %s)",
                 GLenumToString(GLESEnum::AllEnums, origin),
                 GLenumToString(GLESEnum::AllEnums, depth));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLClipControlEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glClipControlEXT"];
    PFNGLCLIPCONTROLEXTPROC next = reinterpret_cast<PFNGLCLIPCONTROLEXTPROC>(entry);
    next(origin, depth);
}

void GL_APIENTRY GL_CopyImageSubDataEXT(GLuint srcName,
                                        GLenum srcTarget,
                                        GLint srcLevel,
                                        GLint srcX,
                                        GLint srcY,
                                        GLint srcZ,
                                        GLuint dstName,
                                        GLenum dstTarget,
                                        GLint dstLevel,
                                        GLint dstX,
                                        GLint dstY,
                                        GLint dstZ,
                                        GLsizei srcWidth,
                                        GLsizei srcHeight,
                                        GLsizei srcDepth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyImageSubDataEXT(srcName = %u, srcTarget = %s, srcLevel = %d, srcX = %d, "
                 "srcY = %d, srcZ = %d, dstName = %u, dstTarget = %s, dstLevel = %d, dstX = %d, "
                 "dstY = %d, dstZ = %d, srcWidth = %d, srcHeight = %d, srcDepth = %d)",
                 srcName, GLenumToString(GLESEnum::CopyBufferSubDataTarget, srcTarget), srcLevel,
                 srcX, srcY, srcZ, dstName,
                 GLenumToString(GLESEnum::CopyBufferSubDataTarget, dstTarget), dstLevel, dstX, dstY,
                 dstZ, srcWidth, srcHeight, srcDepth);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyImageSubDataEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glCopyImageSubDataEXT"];
    PFNGLCOPYIMAGESUBDATAEXTPROC next = reinterpret_cast<PFNGLCOPYIMAGESUBDATAEXTPROC>(entry);
    next(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY,
         dstZ, srcWidth, srcHeight, srcDepth);
}

void GL_APIENTRY
GL_GetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetObjectLabelEXT(type = %s, object = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", label = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, type), object, bufSize, (uintptr_t)length,
                 (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetObjectLabelEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetObjectLabelEXT"];
    PFNGLGETOBJECTLABELEXTPROC next = reinterpret_cast<PFNGLGETOBJECTLABELEXTPROC>(entry);
    next(type, object, bufSize, length, label);
}

void GL_APIENTRY GL_LabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glLabelObjectEXT(type = %s, object = %u, length = %d, label = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, type), object, length, (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLLabelObjectEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glLabelObjectEXT"];
    PFNGLLABELOBJECTEXTPROC next = reinterpret_cast<PFNGLLABELOBJECTEXTPROC>(entry);
    next(type, object, length, label);
}

void GL_APIENTRY GL_InsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glInsertEventMarkerEXT(length = %d, marker = 0x%016" PRIxPTR ")", length,
                 (uintptr_t)marker);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLInsertEventMarkerEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glInsertEventMarkerEXT"];
    PFNGLINSERTEVENTMARKEREXTPROC next = reinterpret_cast<PFNGLINSERTEVENTMARKEREXTPROC>(entry);
    next(length, marker);
}

void GL_APIENTRY GL_PopGroupMarkerEXT()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPopGroupMarkerEXT()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPopGroupMarkerEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glPopGroupMarkerEXT"];
    PFNGLPOPGROUPMARKEREXTPROC next = reinterpret_cast<PFNGLPOPGROUPMARKEREXTPROC>(entry);
    next();
}

void GL_APIENTRY GL_PushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPushGroupMarkerEXT(length = %d, marker = 0x%016" PRIxPTR ")",
                 length, (uintptr_t)marker);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPushGroupMarkerEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glPushGroupMarkerEXT"];
    PFNGLPUSHGROUPMARKEREXTPROC next = reinterpret_cast<PFNGLPUSHGROUPMARKEREXTPROC>(entry);
    next(length, marker);
}

void GL_APIENTRY GL_DiscardFramebufferEXT(GLenum target,
                                          GLsizei numAttachments,
                                          const GLenum *attachments)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDiscardFramebufferEXT(target = %s, numAttachments = %d, attachments = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLESEnum::FramebufferTarget, target), numAttachments,
        (uintptr_t)attachments);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDiscardFramebufferEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDiscardFramebufferEXT"];
    PFNGLDISCARDFRAMEBUFFEREXTPROC next = reinterpret_cast<PFNGLDISCARDFRAMEBUFFEREXTPROC>(entry);
    next(target, numAttachments, attachments);
}

void GL_APIENTRY GL_BeginQueryEXT(GLenum target, GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBeginQueryEXT(target = %s, id = %u)",
                 GLenumToString(GLESEnum::QueryTarget, target), id);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBeginQueryEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glBeginQueryEXT"];
    PFNGLBEGINQUERYEXTPROC next = reinterpret_cast<PFNGLBEGINQUERYEXTPROC>(entry);
    next(target, id);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DeleteQueriesEXT(GLsizei n, const GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteQueriesEXT(n = %d, ids = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)ids);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteQueriesEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glDeleteQueriesEXT"];
    PFNGLDELETEQUERIESEXTPROC next = reinterpret_cast<PFNGLDELETEQUERIESEXTPROC>(entry);
    next(n, ids);
}

void GL_APIENTRY GL_EndQueryEXT(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEndQueryEXT(target = %s)",
                 GLenumToString(GLESEnum::QueryTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEndQueryEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glEndQueryEXT"];
    PFNGLENDQUERYEXTPROC next = reinterpret_cast<PFNGLENDQUERYEXTPROC>(entry);
    next(target);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_GenQueriesEXT(GLsizei n, GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenQueriesEXT(n = %d, ids = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)ids);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenQueriesEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGenQueriesEXT"];
    PFNGLGENQUERIESEXTPROC next = reinterpret_cast<PFNGLGENQUERIESEXTPROC>(entry);
    next(n, ids);
}

void GL_APIENTRY GL_GetInteger64vEXT(GLenum pname, GLint64 *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetInteger64vEXT(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::GetPName, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetInteger64vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetInteger64vEXT"];
    PFNGLGETINTEGER64VEXTPROC next = reinterpret_cast<PFNGLGETINTEGER64VEXTPROC>(entry);
    next(pname, data);
}

void GL_APIENTRY GL_GetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjecti64vEXT(id = %u, pname = %s, params = 0x%016" PRIxPTR ")", id,
                 GLenumToString(GLESEnum::QueryObjectParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjecti64vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetQueryObjecti64vEXT"];
    PFNGLGETQUERYOBJECTI64VEXTPROC next = reinterpret_cast<PFNGLGETQUERYOBJECTI64VEXTPROC>(entry);
    next(id, pname, params);
}

void GL_APIENTRY GL_GetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjectivEXT(id = %u, pname = %s, params = 0x%016" PRIxPTR ")", id,
                 GLenumToString(GLESEnum::QueryObjectParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetQueryObjectivEXT"];
    PFNGLGETQUERYOBJECTIVEXTPROC next = reinterpret_cast<PFNGLGETQUERYOBJECTIVEXTPROC>(entry);
    next(id, pname, params);
}

void GL_APIENTRY GL_GetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjectui64vEXT(id = %u, pname = %s, params = 0x%016" PRIxPTR ")", id,
                 GLenumToString(GLESEnum::QueryObjectParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectui64vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetQueryObjectui64vEXT"];
    PFNGLGETQUERYOBJECTUI64VEXTPROC next = reinterpret_cast<PFNGLGETQUERYOBJECTUI64VEXTPROC>(entry);
    next(id, pname, params);
}

void GL_APIENTRY GL_GetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjectuivEXT(id = %u, pname = %s, params = 0x%016" PRIxPTR ")", id,
                 GLenumToString(GLESEnum::QueryObjectParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectuivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetQueryObjectuivEXT"];
    PFNGLGETQUERYOBJECTUIVEXTPROC next = reinterpret_cast<PFNGLGETQUERYOBJECTUIVEXTPROC>(entry);
    next(id, pname, params);
}

void GL_APIENTRY GL_GetQueryivEXT(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryivEXT(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::QueryTarget, target),
                 GLenumToString(GLESEnum::QueryParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetQueryivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetQueryivEXT"];
    PFNGLGETQUERYIVEXTPROC next = reinterpret_cast<PFNGLGETQUERYIVEXTPROC>(entry);
    next(target, pname, params);
}

GLboolean GL_APIENTRY GL_IsQueryEXT(GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsQueryEXT(id = %u)", id);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsQueryEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glIsQueryEXT"];
    PFNGLISQUERYEXTPROC next = reinterpret_cast<PFNGLISQUERYEXTPROC>(entry);
    return next(id);
}

void GL_APIENTRY GL_QueryCounterEXT(GLuint id, GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glQueryCounterEXT(id = %u, target = %s)", id,
                 GLenumToString(GLESEnum::QueryCounterTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLQueryCounterEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glQueryCounterEXT"];
    PFNGLQUERYCOUNTEREXTPROC next = reinterpret_cast<PFNGLQUERYCOUNTEREXTPROC>(entry);
    next(id, target);
}

void GL_APIENTRY GL_DrawBuffersEXT(GLsizei n, const GLenum *bufs)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawBuffersEXT(n = %d, bufs = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)bufs);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawBuffersEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glDrawBuffersEXT"];
    PFNGLDRAWBUFFERSEXTPROC next = reinterpret_cast<PFNGLDRAWBUFFERSEXTPROC>(entry);
    next(n, bufs);
}

void GL_APIENTRY GL_BlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlendEquationSeparateiEXT(buf = %u, modeRGB = %s, modeAlpha = %s)", buf,
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeRGB),
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquationSeparateiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBlendEquationSeparateiEXT"];
    PFNGLBLENDEQUATIONSEPARATEIEXTPROC next =
        reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEIEXTPROC>(entry);
    next(buf, modeRGB, modeAlpha);
}

void GL_APIENTRY GL_BlendEquationiEXT(GLuint buf, GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendEquationiEXT(buf = %u, mode = %s)", buf,
                 GLenumToString(GLESEnum::BlendEquationModeEXT, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquationiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glBlendEquationiEXT"];
    PFNGLBLENDEQUATIONIEXTPROC next = reinterpret_cast<PFNGLBLENDEQUATIONIEXTPROC>(entry);
    next(buf, mode);
}

void GL_APIENTRY
GL_BlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glBlendFuncSeparateiEXT(buf = %u, srcRGB = %s, dstRGB = %s, srcAlpha = %s, dstAlpha = %s)",
        buf, GLenumToString(GLESEnum::BlendingFactor, srcRGB),
        GLenumToString(GLESEnum::BlendingFactor, dstRGB),
        GLenumToString(GLESEnum::BlendingFactor, srcAlpha),
        GLenumToString(GLESEnum::BlendingFactor, dstAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFuncSeparateiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glBlendFuncSeparateiEXT"];
    PFNGLBLENDFUNCSEPARATEIEXTPROC next = reinterpret_cast<PFNGLBLENDFUNCSEPARATEIEXTPROC>(entry);
    next(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void GL_APIENTRY GL_BlendFunciEXT(GLuint buf, GLenum src, GLenum dst)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendFunciEXT(buf = %u, src = %s, dst = %s)", buf,
                 GLenumToString(GLESEnum::BlendingFactor, src),
                 GLenumToString(GLESEnum::BlendingFactor, dst));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFunciEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glBlendFunciEXT"];
    PFNGLBLENDFUNCIEXTPROC next = reinterpret_cast<PFNGLBLENDFUNCIEXTPROC>(entry);
    next(buf, src, dst);
}

void GL_APIENTRY GL_ColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColorMaskiEXT(index = %u, r = %s, g = %s, b = %s, a = %s)",
                 index, GLbooleanToString(r), GLbooleanToString(g), GLbooleanToString(b),
                 GLbooleanToString(a));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLColorMaskiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glColorMaskiEXT"];
    PFNGLCOLORMASKIEXTPROC next = reinterpret_cast<PFNGLCOLORMASKIEXTPROC>(entry);
    next(index, r, g, b, a);
}

void GL_APIENTRY GL_DisableiEXT(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisableiEXT(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDisableiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDisableiEXT"];
    PFNGLDISABLEIEXTPROC next = reinterpret_cast<PFNGLDISABLEIEXTPROC>(entry);
    next(target, index);
}

void GL_APIENTRY GL_EnableiEXT(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnableiEXT(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEnableiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glEnableiEXT"];
    PFNGLENABLEIEXTPROC next = reinterpret_cast<PFNGLENABLEIEXTPROC>(entry);
    next(target, index);
}

GLboolean GL_APIENTRY GL_IsEnablediEXT(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsEnablediEXT(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsEnablediEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glIsEnablediEXT"];
    PFNGLISENABLEDIEXTPROC next = reinterpret_cast<PFNGLISENABLEDIEXTPROC>(entry);
    return next(target, index);
}

void GL_APIENTRY GL_DrawElementsBaseVertexEXT(GLenum mode,
                                              GLsizei count,
                                              GLenum type,
                                              const void *indices,
                                              GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsBaseVertexEXT(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", basevertex = %d)",
        GLenumToString(GLESEnum::PrimitiveType, mode), count,
        GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawElementsBaseVertexEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsBaseVertexEXT"];
    PFNGLDRAWELEMENTSBASEVERTEXEXTPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXEXTPROC>(entry);
    next(mode, count, type, indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElementsInstancedBaseVertexEXT(GLenum mode,
                                                       GLsizei count,
                                                       GLenum type,
                                                       const void *indices,
                                                       GLsizei instancecount,
                                                       GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseVertexEXT(mode = %s, count = %d, type = %s, indices = "
                 "0x%016" PRIxPTR ", instancecount = %d, basevertex = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
                 instancecount, basevertex);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseVertexEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseVertexEXT"];
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC>(entry);
    next(mode, count, type, indices, instancecount, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawRangeElementsBaseVertexEXT(GLenum mode,
                                                   GLuint start,
                                                   GLuint end,
                                                   GLsizei count,
                                                   GLenum type,
                                                   const void *indices,
                                                   GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawRangeElementsBaseVertexEXT(mode = %s, start = %u, end = %u, count = %d, "
                 "type = %s, indices = 0x%016" PRIxPTR ", basevertex = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), start, end, count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawRangeElementsBaseVertexEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawRangeElementsBaseVertexEXT"];
    PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC next =
        reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC>(entry);
    next(mode, start, end, count, type, indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_MultiDrawElementsBaseVertexEXT(GLenum mode,
                                                   const GLsizei *count,
                                                   GLenum type,
                                                   const void *const *indices,
                                                   GLsizei drawcount,
                                                   const GLint *basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawElementsBaseVertexEXT(mode = %s, count = 0x%016" PRIxPTR
                 ", type = %s, indices = 0x%016" PRIxPTR
                 ", drawcount = %d, basevertex = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, drawcount,
                 (uintptr_t)basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawElementsBaseVertexEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawElementsBaseVertexEXT"];
    PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC next =
        reinterpret_cast<PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC>(entry);
    next(mode, count, type, indices, drawcount, basevertex);
}

void GL_APIENTRY GL_BufferStorageExternalEXT(GLenum target,
                                             GLintptr offset,
                                             GLsizeiptr size,
                                             GLeglClientBufferEXT clientBuffer,
                                             GLbitfield flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBufferStorageExternalEXT(target = %s, offset = %llu, size = %llu, clientBuffer "
                 "= 0x%016" PRIxPTR ", flags = %s)",
                 GLenumToString(GLESEnum::AllEnums, target),
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(size),
                 (uintptr_t)clientBuffer,
                 GLbitfieldToString(GLESEnum::BufferStorageMask, flags).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBufferStorageExternalEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBufferStorageExternalEXT"];
    PFNGLBUFFERSTORAGEEXTERNALEXTPROC next =
        reinterpret_cast<PFNGLBUFFERSTORAGEEXTERNALEXTPROC>(entry);
    next(target, offset, size, clientBuffer, flags);
}

void GL_APIENTRY GL_NamedBufferStorageExternalEXT(GLuint buffer,
                                                  GLintptr offset,
                                                  GLsizeiptr size,
                                                  GLeglClientBufferEXT clientBuffer,
                                                  GLbitfield flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glNamedBufferStorageExternalEXT(buffer = %u, offset = %llu, size = %llu, "
                 "clientBuffer = 0x%016" PRIxPTR ", flags = %s)",
                 buffer, static_cast<unsigned long long>(offset),
                 static_cast<unsigned long long>(size), (uintptr_t)clientBuffer,
                 GLbitfieldToString(GLESEnum::BufferStorageMask, flags).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLNamedBufferStorageExternalEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glNamedBufferStorageExternalEXT"];
    PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC next =
        reinterpret_cast<PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC>(entry);
    next(buffer, offset, size, clientBuffer, flags);
}

void GL_APIENTRY GL_FramebufferTextureEXT(GLenum target,
                                          GLenum attachment,
                                          GLuint texture,
                                          GLint level)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTextureEXT(target = %s, attachment = %s, texture = %u, level = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment), texture, level);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTextureEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glFramebufferTextureEXT"];
    PFNGLFRAMEBUFFERTEXTUREEXTPROC next = reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREEXTPROC>(entry);
    next(target, attachment, texture, level);
}

void GL_APIENTRY GL_DrawArraysInstancedEXT(GLenum mode,
                                           GLint start,
                                           GLsizei count,
                                           GLsizei primcount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawArraysInstancedEXT(mode = %s, start = %d, count = %d, primcount = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), start, count, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawArraysInstancedEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDrawArraysInstancedEXT"];
    PFNGLDRAWARRAYSINSTANCEDEXTPROC next = reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDEXTPROC>(entry);
    next(mode, start, count, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElementsInstancedEXT(GLenum mode,
                                             GLsizei count,
                                             GLenum type,
                                             const void *indices,
                                             GLsizei primcount)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsInstancedEXT(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", primcount = %d)",
        GLenumToString(GLESEnum::PrimitiveType, mode), count,
        GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedEXT"];
    PFNGLDRAWELEMENTSINSTANCEDEXTPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDEXTPROC>(entry);
    next(mode, count, type, indices, primcount);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_VertexAttribDivisorEXT(GLuint index, GLuint divisor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribDivisorEXT(index = %u, divisor = %u)", index,
                 divisor);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttribDivisorEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glVertexAttribDivisorEXT"];
    PFNGLVERTEXATTRIBDIVISOREXTPROC next = reinterpret_cast<PFNGLVERTEXATTRIBDIVISOREXTPROC>(entry);
    next(index, divisor);
}

void GL_APIENTRY GL_FlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFlushMappedBufferRangeEXT(target = %s, offset = %llu, length = %llu)",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(length));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFlushMappedBufferRangeEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFlushMappedBufferRangeEXT"];
    PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC next =
        reinterpret_cast<PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC>(entry);
    next(target, offset, length);
}

void *GL_APIENTRY GL_MapBufferRangeEXT(GLenum target,
                                       GLintptr offset,
                                       GLsizeiptr length,
                                       GLbitfield access)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMapBufferRangeEXT(target = %s, offset = %llu, length = %llu, access = %s)",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(length),
                 GLbitfieldToString(GLESEnum::MapBufferAccessMask, access).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMapBufferRangeEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glMapBufferRangeEXT"];
    PFNGLMAPBUFFERRANGEEXTPROC next = reinterpret_cast<PFNGLMAPBUFFERRANGEEXTPROC>(entry);
    return next(target, offset, length, access);
}

void GL_APIENTRY GL_BufferStorageMemEXT(GLenum target,
                                        GLsizeiptr size,
                                        GLuint memory,
                                        GLuint64 offset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBufferStorageMemEXT(target = %s, size = %llu, memory = %u, offset = %llu)",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 static_cast<unsigned long long>(size), memory,
                 static_cast<unsigned long long>(offset));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBufferStorageMemEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glBufferStorageMemEXT"];
    PFNGLBUFFERSTORAGEMEMEXTPROC next = reinterpret_cast<PFNGLBUFFERSTORAGEMEMEXTPROC>(entry);
    next(target, size, memory, offset);
}

void GL_APIENTRY GL_CreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCreateMemoryObjectsEXT(n = %d, memoryObjects = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)memoryObjects);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCreateMemoryObjectsEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glCreateMemoryObjectsEXT"];
    PFNGLCREATEMEMORYOBJECTSEXTPROC next = reinterpret_cast<PFNGLCREATEMEMORYOBJECTSEXTPROC>(entry);
    next(n, memoryObjects);
}

void GL_APIENTRY GL_DeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteMemoryObjectsEXT(n = %d, memoryObjects = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)memoryObjects);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteMemoryObjectsEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDeleteMemoryObjectsEXT"];
    PFNGLDELETEMEMORYOBJECTSEXTPROC next = reinterpret_cast<PFNGLDELETEMEMORYOBJECTSEXTPROC>(entry);
    next(n, memoryObjects);
}

void GL_APIENTRY GL_GetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetMemoryObjectParameterivEXT(memoryObject = %u, pname = %s, params = 0x%016" PRIxPTR
        ")",
        memoryObject, GLenumToString(GLESEnum::MemoryObjectParameterName, pname),
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetMemoryObjectParameterivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetMemoryObjectParameterivEXT"];
    PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC next =
        reinterpret_cast<PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC>(entry);
    next(memoryObject, pname, params);
}

void GL_APIENTRY GL_GetUnsignedBytevEXT(GLenum pname, GLubyte *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetUnsignedBytevEXT(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::GetPName, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUnsignedBytevEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetUnsignedBytevEXT"];
    PFNGLGETUNSIGNEDBYTEVEXTPROC next = reinterpret_cast<PFNGLGETUNSIGNEDBYTEVEXTPROC>(entry);
    next(pname, data);
}

void GL_APIENTRY GL_GetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUnsignedBytei_vEXT(target = %s, index = %u, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), index, (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUnsignedBytei_vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetUnsignedBytei_vEXT"];
    PFNGLGETUNSIGNEDBYTEI_VEXTPROC next = reinterpret_cast<PFNGLGETUNSIGNEDBYTEI_VEXTPROC>(entry);
    next(target, index, data);
}

GLboolean GL_APIENTRY GL_IsMemoryObjectEXT(GLuint memoryObject)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsMemoryObjectEXT(memoryObject = %u)", memoryObject);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsMemoryObjectEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glIsMemoryObjectEXT"];
    PFNGLISMEMORYOBJECTEXTPROC next = reinterpret_cast<PFNGLISMEMORYOBJECTEXTPROC>(entry);
    return next(memoryObject);
}

void GL_APIENTRY GL_MemoryObjectParameterivEXT(GLuint memoryObject,
                                               GLenum pname,
                                               const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glMemoryObjectParameterivEXT(memoryObject = %u, pname = %s, params = 0x%016" PRIxPTR ")",
        memoryObject, GLenumToString(GLESEnum::MemoryObjectParameterName, pname),
        (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMemoryObjectParameterivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMemoryObjectParameterivEXT"];
    PFNGLMEMORYOBJECTPARAMETERIVEXTPROC next =
        reinterpret_cast<PFNGLMEMORYOBJECTPARAMETERIVEXTPROC>(entry);
    next(memoryObject, pname, params);
}

void GL_APIENTRY GL_TexStorageMem2DEXT(GLenum target,
                                       GLsizei levels,
                                       GLenum internalFormat,
                                       GLsizei width,
                                       GLsizei height,
                                       GLuint memory,
                                       GLuint64 offset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorageMem2DEXT(target = %s, levels = %d, internalFormat = %s, width = %d, "
                 "height = %d, memory = %u, offset = %llu)",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalFormat), width, height,
                 memory, static_cast<unsigned long long>(offset));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMem2DEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glTexStorageMem2DEXT"];
    PFNGLTEXSTORAGEMEM2DEXTPROC next = reinterpret_cast<PFNGLTEXSTORAGEMEM2DEXTPROC>(entry);
    next(target, levels, internalFormat, width, height, memory, offset);
}

void GL_APIENTRY GL_TexStorageMem2DMultisampleEXT(GLenum target,
                                                  GLsizei samples,
                                                  GLenum internalFormat,
                                                  GLsizei width,
                                                  GLsizei height,
                                                  GLboolean fixedSampleLocations,
                                                  GLuint memory,
                                                  GLuint64 offset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorageMem2DMultisampleEXT(target = %s, samples = %d, internalFormat = %s, "
                 "width = %d, height = %d, fixedSampleLocations = %s, memory = %u, offset = %llu)",
                 GLenumToString(GLESEnum::TextureTarget, target), samples,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalFormat), width, height,
                 GLbooleanToString(fixedSampleLocations), memory,
                 static_cast<unsigned long long>(offset));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMem2DMultisampleEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMem2DMultisampleEXT"];
    PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC>(entry);
    next(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

void GL_APIENTRY GL_TexStorageMem3DEXT(GLenum target,
                                       GLsizei levels,
                                       GLenum internalFormat,
                                       GLsizei width,
                                       GLsizei height,
                                       GLsizei depth,
                                       GLuint memory,
                                       GLuint64 offset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorageMem3DEXT(target = %s, levels = %d, internalFormat = %s, width = %d, "
                 "height = %d, depth = %d, memory = %u, offset = %llu)",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalFormat), width, height,
                 depth, memory, static_cast<unsigned long long>(offset));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMem3DEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glTexStorageMem3DEXT"];
    PFNGLTEXSTORAGEMEM3DEXTPROC next = reinterpret_cast<PFNGLTEXSTORAGEMEM3DEXTPROC>(entry);
    next(target, levels, internalFormat, width, height, depth, memory, offset);
}

void GL_APIENTRY GL_TexStorageMem3DMultisampleEXT(GLenum target,
                                                  GLsizei samples,
                                                  GLenum internalFormat,
                                                  GLsizei width,
                                                  GLsizei height,
                                                  GLsizei depth,
                                                  GLboolean fixedSampleLocations,
                                                  GLuint memory,
                                                  GLuint64 offset)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexStorageMem3DMultisampleEXT(target = %s, samples = %d, internalFormat = %s, width = "
        "%d, height = %d, depth = %d, fixedSampleLocations = %s, memory = %u, offset = %llu)",
        GLenumToString(GLESEnum::TextureTarget, target), samples,
        GLenumToString(GLESEnum::SizedInternalFormat, internalFormat), width, height, depth,
        GLbooleanToString(fixedSampleLocations), memory, static_cast<unsigned long long>(offset));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorageMem3DMultisampleEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorageMem3DMultisampleEXT"];
    PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC next =
        reinterpret_cast<PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC>(entry);
    next(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory,
         offset);
}

void GL_APIENTRY GL_ImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glImportMemoryFdEXT(memory = %u, size = %llu, handleType = %s, fd = %d)", memory,
                 static_cast<unsigned long long>(size),
                 GLenumToString(GLESEnum::ExternalHandleType, handleType), fd);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLImportMemoryFdEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glImportMemoryFdEXT"];
    PFNGLIMPORTMEMORYFDEXTPROC next = reinterpret_cast<PFNGLIMPORTMEMORYFDEXTPROC>(entry);
    next(memory, size, handleType, fd);
}

void GL_APIENTRY GL_MultiDrawArraysIndirectEXT(GLenum mode,
                                               const void *indirect,
                                               GLsizei drawcount,
                                               GLsizei stride)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawArraysIndirectEXT(mode = %s, indirect = 0x%016" PRIxPTR
                 ", drawcount = %d, stride = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), (uintptr_t)indirect, drawcount,
                 stride);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawArraysIndirectEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawArraysIndirectEXT"];
    PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC next =
        reinterpret_cast<PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC>(entry);
    next(mode, indirect, drawcount, stride);
}

void GL_APIENTRY GL_MultiDrawElementsIndirectEXT(GLenum mode,
                                                 GLenum type,
                                                 const void *indirect,
                                                 GLsizei drawcount,
                                                 GLsizei stride)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMultiDrawElementsIndirectEXT(mode = %s, type = %s, indirect = 0x%016" PRIxPTR
                 ", drawcount = %d, stride = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode),
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indirect, drawcount,
                 stride);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMultiDrawElementsIndirectEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMultiDrawElementsIndirectEXT"];
    PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC next =
        reinterpret_cast<PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC>(entry);
    next(mode, type, indirect, drawcount, stride);
}

void GL_APIENTRY GL_FramebufferTexture2DMultisampleEXT(GLenum target,
                                                       GLenum attachment,
                                                       GLenum textarget,
                                                       GLuint texture,
                                                       GLint level,
                                                       GLsizei samples)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexture2DMultisampleEXT(target = %s, attachment = %s, textarget = "
                 "%s, texture = %u, level = %d, samples = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::TextureTarget, textarget), texture, level, samples);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexture2DMultisampleEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTexture2DMultisampleEXT"];
    PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC>(entry);
    next(target, attachment, textarget, texture, level, samples);
}

void GL_APIENTRY GL_RenderbufferStorageMultisampleEXT(GLenum target,
                                                      GLsizei samples,
                                                      GLenum internalformat,
                                                      GLsizei width,
                                                      GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glRenderbufferStorageMultisampleEXT(target = %s, samples = %d, internalformat = "
                 "%s, width = %d, height = %d)",
                 GLenumToString(GLESEnum::RenderbufferTarget, target), samples,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLRenderbufferStorageMultisampleEXT),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glRenderbufferStorageMultisampleEXT"];
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC next =
        reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC>(entry);
    next(target, samples, internalformat, width, height);
}

void GL_APIENTRY GL_PrimitiveBoundingBoxEXT(GLfloat minX,
                                            GLfloat minY,
                                            GLfloat minZ,
                                            GLfloat minW,
                                            GLfloat maxX,
                                            GLfloat maxY,
                                            GLfloat maxZ,
                                            GLfloat maxW)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPrimitiveBoundingBoxEXT(minX = %f, minY = %f, minZ = %f, minW = %f, maxX = %f, "
                 "maxY = %f, maxZ = %f, maxW = %f)",
                 minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPrimitiveBoundingBoxEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glPrimitiveBoundingBoxEXT"];
    PFNGLPRIMITIVEBOUNDINGBOXEXTPROC next =
        reinterpret_cast<PFNGLPRIMITIVEBOUNDINGBOXEXTPROC>(entry);
    next(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

GLenum GL_APIENTRY GL_GetGraphicsResetStatusEXT()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetGraphicsResetStatusEXT()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetGraphicsResetStatusEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetGraphicsResetStatusEXT"];
    PFNGLGETGRAPHICSRESETSTATUSEXTPROC next =
        reinterpret_cast<PFNGLGETGRAPHICSRESETSTATUSEXTPROC>(entry);
    return next();
}

void GL_APIENTRY GL_GetnUniformfvEXT(GLuint program,
                                     GLint location,
                                     GLsizei bufSize,
                                     GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetnUniformfvEXT(program = %u, location = %d, bufSize = %d, params = 0x%016" PRIxPTR ")",
        program, location, bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetnUniformfvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetnUniformfvEXT"];
    PFNGLGETNUNIFORMFVEXTPROC next = reinterpret_cast<PFNGLGETNUNIFORMFVEXTPROC>(entry);
    next(program, location, bufSize, params);
}

void GL_APIENTRY GL_GetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetnUniformivEXT(program = %u, location = %d, bufSize = %d, params = 0x%016" PRIxPTR ")",
        program, location, bufSize, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetnUniformivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetnUniformivEXT"];
    PFNGLGETNUNIFORMIVEXTPROC next = reinterpret_cast<PFNGLGETNUNIFORMIVEXTPROC>(entry);
    next(program, location, bufSize, params);
}

void GL_APIENTRY GL_ReadnPixelsEXT(GLint x,
                                   GLint y,
                                   GLsizei width,
                                   GLsizei height,
                                   GLenum format,
                                   GLenum type,
                                   GLsizei bufSize,
                                   void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReadnPixelsEXT(x = %d, y = %d, width = %d, height = %d, format = %s, type = "
                 "%s, bufSize = %d, data = 0x%016" PRIxPTR ")",
                 x, y, width, height, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), bufSize, (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReadnPixelsEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glReadnPixelsEXT"];
    PFNGLREADNPIXELSEXTPROC next = reinterpret_cast<PFNGLREADNPIXELSEXTPROC>(entry);
    next(x, y, width, height, format, type, bufSize, data);
}

void GL_APIENTRY GL_DeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteSemaphoresEXT(n = %d, semaphores = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)semaphores);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteSemaphoresEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glDeleteSemaphoresEXT"];
    PFNGLDELETESEMAPHORESEXTPROC next = reinterpret_cast<PFNGLDELETESEMAPHORESEXTPROC>(entry);
    next(n, semaphores);
}

void GL_APIENTRY GL_GenSemaphoresEXT(GLsizei n, GLuint *semaphores)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenSemaphoresEXT(n = %d, semaphores = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)semaphores);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenSemaphoresEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGenSemaphoresEXT"];
    PFNGLGENSEMAPHORESEXTPROC next = reinterpret_cast<PFNGLGENSEMAPHORESEXTPROC>(entry);
    next(n, semaphores);
}

void GL_APIENTRY GL_GetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetSemaphoreParameterui64vEXT(semaphore = %u, pname = %s, params = 0x%016" PRIxPTR ")",
        semaphore, GLenumToString(GLESEnum::SemaphoreParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetSemaphoreParameterui64vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSemaphoreParameterui64vEXT"];
    PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC next =
        reinterpret_cast<PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC>(entry);
    next(semaphore, pname, params);
}

GLboolean GL_APIENTRY GL_IsSemaphoreEXT(GLuint semaphore)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsSemaphoreEXT(semaphore = %u)", semaphore);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsSemaphoreEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glIsSemaphoreEXT"];
    PFNGLISSEMAPHOREEXTPROC next = reinterpret_cast<PFNGLISSEMAPHOREEXTPROC>(entry);
    return next(semaphore);
}

void GL_APIENTRY GL_SemaphoreParameterui64vEXT(GLuint semaphore,
                                               GLenum pname,
                                               const GLuint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glSemaphoreParameterui64vEXT(semaphore = %u, pname = %s, params = 0x%016" PRIxPTR ")",
        semaphore, GLenumToString(GLESEnum::SemaphoreParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSemaphoreParameterui64vEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSemaphoreParameterui64vEXT"];
    PFNGLSEMAPHOREPARAMETERUI64VEXTPROC next =
        reinterpret_cast<PFNGLSEMAPHOREPARAMETERUI64VEXTPROC>(entry);
    next(semaphore, pname, params);
}

void GL_APIENTRY GL_SignalSemaphoreEXT(GLuint semaphore,
                                       GLuint numBufferBarriers,
                                       const GLuint *buffers,
                                       GLuint numTextureBarriers,
                                       const GLuint *textures,
                                       const GLenum *dstLayouts)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glSignalSemaphoreEXT(semaphore = %u, numBufferBarriers = %u, buffers = 0x%016" PRIxPTR
        ", numTextureBarriers = %u, textures = 0x%016" PRIxPTR ", dstLayouts = 0x%016" PRIxPTR ")",
        semaphore, numBufferBarriers, (uintptr_t)buffers, numTextureBarriers, (uintptr_t)textures,
        (uintptr_t)dstLayouts);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSignalSemaphoreEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glSignalSemaphoreEXT"];
    PFNGLSIGNALSEMAPHOREEXTPROC next = reinterpret_cast<PFNGLSIGNALSEMAPHOREEXTPROC>(entry);
    next(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}

void GL_APIENTRY GL_WaitSemaphoreEXT(GLuint semaphore,
                                     GLuint numBufferBarriers,
                                     const GLuint *buffers,
                                     GLuint numTextureBarriers,
                                     const GLuint *textures,
                                     const GLenum *srcLayouts)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glWaitSemaphoreEXT(semaphore = %u, numBufferBarriers = %u, buffers = 0x%016" PRIxPTR
        ", numTextureBarriers = %u, textures = 0x%016" PRIxPTR ", srcLayouts = 0x%016" PRIxPTR ")",
        semaphore, numBufferBarriers, (uintptr_t)buffers, numTextureBarriers, (uintptr_t)textures,
        (uintptr_t)srcLayouts);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLWaitSemaphoreEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glWaitSemaphoreEXT"];
    PFNGLWAITSEMAPHOREEXTPROC next = reinterpret_cast<PFNGLWAITSEMAPHOREEXTPROC>(entry);
    next(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}

void GL_APIENTRY GL_ImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glImportSemaphoreFdEXT(semaphore = %u, handleType = %s, fd = %d)", semaphore,
                 GLenumToString(GLESEnum::ExternalHandleType, handleType), fd);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLImportSemaphoreFdEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glImportSemaphoreFdEXT"];
    PFNGLIMPORTSEMAPHOREFDEXTPROC next = reinterpret_cast<PFNGLIMPORTSEMAPHOREFDEXTPROC>(entry);
    next(semaphore, handleType, fd);
}

void GL_APIENTRY GL_ActiveShaderProgramEXT(GLuint pipeline, GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glActiveShaderProgramEXT(pipeline = %u, program = %u)",
                 pipeline, program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLActiveShaderProgramEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glActiveShaderProgramEXT"];
    PFNGLACTIVESHADERPROGRAMEXTPROC next = reinterpret_cast<PFNGLACTIVESHADERPROGRAMEXTPROC>(entry);
    next(pipeline, program);
}

void GL_APIENTRY GL_BindProgramPipelineEXT(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindProgramPipelineEXT(pipeline = %u)", pipeline);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindProgramPipelineEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glBindProgramPipelineEXT"];
    PFNGLBINDPROGRAMPIPELINEEXTPROC next = reinterpret_cast<PFNGLBINDPROGRAMPIPELINEEXTPROC>(entry);
    next(pipeline);
}

GLuint GL_APIENTRY GL_CreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar **strings)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCreateShaderProgramvEXT(type = %s, count = %d, strings = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::ShaderType, type), count, (uintptr_t)strings);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCreateShaderProgramvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCreateShaderProgramvEXT"];
    PFNGLCREATESHADERPROGRAMVEXTPROC next =
        reinterpret_cast<PFNGLCREATESHADERPROGRAMVEXTPROC>(entry);
    return next(type, count, strings);
}

void GL_APIENTRY GL_DeleteProgramPipelinesEXT(GLsizei n, const GLuint *pipelines)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteProgramPipelinesEXT(n = %d, pipelines = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)pipelines);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteProgramPipelinesEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDeleteProgramPipelinesEXT"];
    PFNGLDELETEPROGRAMPIPELINESEXTPROC next =
        reinterpret_cast<PFNGLDELETEPROGRAMPIPELINESEXTPROC>(entry);
    next(n, pipelines);
}

void GL_APIENTRY GL_GenProgramPipelinesEXT(GLsizei n, GLuint *pipelines)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGenProgramPipelinesEXT(n = %d, pipelines = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)pipelines);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenProgramPipelinesEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGenProgramPipelinesEXT"];
    PFNGLGENPROGRAMPIPELINESEXTPROC next = reinterpret_cast<PFNGLGENPROGRAMPIPELINESEXTPROC>(entry);
    next(n, pipelines);
}

void GL_APIENTRY GL_GetProgramPipelineInfoLogEXT(GLuint pipeline,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLchar *infoLog)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetProgramPipelineInfoLogEXT(pipeline = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", infoLog = 0x%016" PRIxPTR ")",
        pipeline, bufSize, (uintptr_t)length, (uintptr_t)infoLog);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramPipelineInfoLogEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramPipelineInfoLogEXT"];
    PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC next =
        reinterpret_cast<PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC>(entry);
    next(pipeline, bufSize, length, infoLog);
}

void GL_APIENTRY GL_GetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramPipelineivEXT(pipeline = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 pipeline, GLenumToString(GLESEnum::PipelineParameterName, pname),
                 (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramPipelineivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetProgramPipelineivEXT"];
    PFNGLGETPROGRAMPIPELINEIVEXTPROC next =
        reinterpret_cast<PFNGLGETPROGRAMPIPELINEIVEXTPROC>(entry);
    next(pipeline, pname, params);
}

GLboolean GL_APIENTRY GL_IsProgramPipelineEXT(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsProgramPipelineEXT(pipeline = %u)", pipeline);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsProgramPipelineEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glIsProgramPipelineEXT"];
    PFNGLISPROGRAMPIPELINEEXTPROC next = reinterpret_cast<PFNGLISPROGRAMPIPELINEEXTPROC>(entry);
    return next(pipeline);
}

void GL_APIENTRY GL_ProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramParameteriEXT(program = %u, pname = %s, value = %d)",
                 program, GLenumToString(GLESEnum::ProgramParameterPName, pname), value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramParameteriEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramParameteriEXT"];
    PFNGLPROGRAMPARAMETERIEXTPROC next = reinterpret_cast<PFNGLPROGRAMPARAMETERIEXTPROC>(entry);
    next(program, pname, value);
}

void GL_APIENTRY GL_ProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1fEXT(program = %u, location = %d, v0 = %f)",
                 program, location, v0);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1fEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform1fEXT"];
    PFNGLPROGRAMUNIFORM1FEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1FEXTPROC>(entry);
    next(program, location, v0);
}

void GL_APIENTRY GL_ProgramUniform1fvEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1fvEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform1fvEXT"];
    PFNGLPROGRAMUNIFORM1FVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1FVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1iEXT(program = %u, location = %d, v0 = %d)",
                 program, location, v0);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1iEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform1iEXT"];
    PFNGLPROGRAMUNIFORM1IEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1IEXTPROC>(entry);
    next(program, location, v0);
}

void GL_APIENTRY GL_ProgramUniform1ivEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1ivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1ivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform1ivEXT"];
    PFNGLPROGRAMUNIFORM1IVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1IVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramUniform1uiEXT(program = %u, location = %d, v0 = %u)",
                 program, location, v0);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1uiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform1uiEXT"];
    PFNGLPROGRAMUNIFORM1UIEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1UIEXTPROC>(entry);
    next(program, location, v0);
}

void GL_APIENTRY GL_ProgramUniform1uivEXT(GLuint program,
                                          GLint location,
                                          GLsizei count,
                                          const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform1uivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform1uivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glProgramUniform1uivEXT"];
    PFNGLPROGRAMUNIFORM1UIVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM1UIVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2fEXT(program = %u, location = %d, v0 = %f, v1 = %f)", program,
                 location, v0, v1);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2fEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform2fEXT"];
    PFNGLPROGRAMUNIFORM2FEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2FEXTPROC>(entry);
    next(program, location, v0, v1);
}

void GL_APIENTRY GL_ProgramUniform2fvEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2fvEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform2fvEXT"];
    PFNGLPROGRAMUNIFORM2FVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2FVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2iEXT(program = %u, location = %d, v0 = %d, v1 = %d)", program,
                 location, v0, v1);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2iEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform2iEXT"];
    PFNGLPROGRAMUNIFORM2IEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2IEXTPROC>(entry);
    next(program, location, v0, v1);
}

void GL_APIENTRY GL_ProgramUniform2ivEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2ivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2ivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform2ivEXT"];
    PFNGLPROGRAMUNIFORM2IVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2IVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform2uiEXT(program = %u, location = %d, v0 = %u, v1 = %u)", program,
                 location, v0, v1);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2uiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform2uiEXT"];
    PFNGLPROGRAMUNIFORM2UIEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2UIEXTPROC>(entry);
    next(program, location, v0, v1);
}

void GL_APIENTRY GL_ProgramUniform2uivEXT(GLuint program,
                                          GLint location,
                                          GLsizei count,
                                          const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform2uivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform2uivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glProgramUniform2uivEXT"];
    PFNGLPROGRAMUNIFORM2UIVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM2UIVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY
GL_ProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3fEXT(program = %u, location = %d, v0 = %f, v1 = %f, v2 = %f)",
                 program, location, v0, v1, v2);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3fEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform3fEXT"];
    PFNGLPROGRAMUNIFORM3FEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3FEXTPROC>(entry);
    next(program, location, v0, v1, v2);
}

void GL_APIENTRY GL_ProgramUniform3fvEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3fvEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform3fvEXT"];
    PFNGLPROGRAMUNIFORM3FVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3FVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY
GL_ProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3iEXT(program = %u, location = %d, v0 = %d, v1 = %d, v2 = %d)",
                 program, location, v0, v1, v2);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3iEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform3iEXT"];
    PFNGLPROGRAMUNIFORM3IEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3IEXTPROC>(entry);
    next(program, location, v0, v1, v2);
}

void GL_APIENTRY GL_ProgramUniform3ivEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3ivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3ivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform3ivEXT"];
    PFNGLPROGRAMUNIFORM3IVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3IVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY
GL_ProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniform3uiEXT(program = %u, location = %d, v0 = %u, v1 = %u, v2 = %u)",
                 program, location, v0, v1, v2);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3uiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform3uiEXT"];
    PFNGLPROGRAMUNIFORM3UIEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3UIEXTPROC>(entry);
    next(program, location, v0, v1, v2);
}

void GL_APIENTRY GL_ProgramUniform3uivEXT(GLuint program,
                                          GLint location,
                                          GLsizei count,
                                          const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform3uivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform3uivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glProgramUniform3uivEXT"];
    PFNGLPROGRAMUNIFORM3UIVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM3UIVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniform4fEXT(GLuint program,
                                        GLint location,
                                        GLfloat v0,
                                        GLfloat v1,
                                        GLfloat v2,
                                        GLfloat v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4fEXT(program = %u, location = %d, v0 = %f, v1 = %f, v2 = %f, v3 = %f)",
        program, location, v0, v1, v2, v3);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4fEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform4fEXT"];
    PFNGLPROGRAMUNIFORM4FEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4FEXTPROC>(entry);
    next(program, location, v0, v1, v2, v3);
}

void GL_APIENTRY GL_ProgramUniform4fvEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4fvEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform4fvEXT"];
    PFNGLPROGRAMUNIFORM4FVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4FVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY
GL_ProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4iEXT(program = %u, location = %d, v0 = %d, v1 = %d, v2 = %d, v3 = %d)",
        program, location, v0, v1, v2, v3);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4iEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glProgramUniform4iEXT"];
    PFNGLPROGRAMUNIFORM4IEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4IEXTPROC>(entry);
    next(program, location, v0, v1, v2, v3);
}

void GL_APIENTRY GL_ProgramUniform4ivEXT(GLuint program,
                                         GLint location,
                                         GLsizei count,
                                         const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4ivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4ivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform4ivEXT"];
    PFNGLPROGRAMUNIFORM4IVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4IVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY
GL_ProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4uiEXT(program = %u, location = %d, v0 = %u, v1 = %u, v2 = %u, v3 = %u)",
        program, location, v0, v1, v2, v3);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4uiEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glProgramUniform4uiEXT"];
    PFNGLPROGRAMUNIFORM4UIEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4UIEXTPROC>(entry);
    next(program, location, v0, v1, v2, v3);
}

void GL_APIENTRY GL_ProgramUniform4uivEXT(GLuint program,
                                          GLint location,
                                          GLsizei count,
                                          const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glProgramUniform4uivEXT(program = %u, location = %d, count = %d, value = 0x%016" PRIxPTR
        ")",
        program, location, count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniform4uivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glProgramUniform4uivEXT"];
    PFNGLPROGRAMUNIFORM4UIVEXTPROC next = reinterpret_cast<PFNGLPROGRAMUNIFORM4UIVEXTPROC>(entry);
    next(program, location, count, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix2fvEXT(GLuint program,
                                               GLint location,
                                               GLsizei count,
                                               GLboolean transpose,
                                               const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2fvEXT(program = %u, location = %d, count = %d, transpose "
                 "= %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix2x3fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2x3fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2x3fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2x3fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix2x4fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix2x4fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix2x4fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix2x4fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix3fvEXT(GLuint program,
                                               GLint location,
                                               GLsizei count,
                                               GLboolean transpose,
                                               const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3fvEXT(program = %u, location = %d, count = %d, transpose "
                 "= %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix3x2fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3x2fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3x2fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3x2fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix3x4fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix3x4fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix3x4fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix3x4fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix4fvEXT(GLuint program,
                                               GLint location,
                                               GLsizei count,
                                               GLboolean transpose,
                                               const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4fvEXT(program = %u, location = %d, count = %d, transpose "
                 "= %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix4x2fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4x2fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4x2fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4x2fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_ProgramUniformMatrix4x3fvEXT(GLuint program,
                                                 GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramUniformMatrix4x3fvEXT(program = %u, location = %d, count = %d, "
                 "transpose = %s, value = 0x%016" PRIxPTR ")",
                 program, location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramUniformMatrix4x3fvEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glProgramUniformMatrix4x3fvEXT"];
    PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC next =
        reinterpret_cast<PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC>(entry);
    next(program, location, count, transpose, value);
}

void GL_APIENTRY GL_UseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUseProgramStagesEXT(pipeline = %u, stages = %s, program = %u)", pipeline,
                 GLbitfieldToString(GLESEnum::UseProgramStageMask, stages).c_str(), program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUseProgramStagesEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glUseProgramStagesEXT"];
    PFNGLUSEPROGRAMSTAGESEXTPROC next = reinterpret_cast<PFNGLUSEPROGRAMSTAGESEXTPROC>(entry);
    next(pipeline, stages, program);
}

void GL_APIENTRY GL_ValidateProgramPipelineEXT(GLuint pipeline)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glValidateProgramPipelineEXT(pipeline = %u)", pipeline);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLValidateProgramPipelineEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glValidateProgramPipelineEXT"];
    PFNGLVALIDATEPROGRAMPIPELINEEXTPROC next =
        reinterpret_cast<PFNGLVALIDATEPROGRAMPIPELINEEXTPROC>(entry);
    next(pipeline);
}

void GL_APIENTRY GL_FramebufferFetchBarrierEXT()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFramebufferFetchBarrierEXT()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferFetchBarrierEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferFetchBarrierEXT"];
    PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC>(entry);
    next();
}

void GL_APIENTRY GL_PatchParameteriEXT(GLenum pname, GLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPatchParameteriEXT(pname = %s, value = %d)",
                 GLenumToString(GLESEnum::PatchParameterName, pname), value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPatchParameteriEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glPatchParameteriEXT"];
    PFNGLPATCHPARAMETERIEXTPROC next = reinterpret_cast<PFNGLPATCHPARAMETERIEXTPROC>(entry);
    next(pname, value);
}

void GL_APIENTRY GL_GetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIivEXT(sampler = %u, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIivEXT"];
    PFNGLGETSAMPLERPARAMETERIIVEXTPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIIVEXTPROC>(entry);
    next(sampler, pname, params);
}

void GL_APIENTRY GL_GetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIuivEXT(sampler = %u, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIuivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIuivEXT"];
    PFNGLGETSAMPLERPARAMETERIUIVEXTPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIUIVEXTPROC>(entry);
    next(sampler, pname, params);
}

void GL_APIENTRY GL_GetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIivEXT(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetTexParameterIivEXT"];
    PFNGLGETTEXPARAMETERIIVEXTPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIIVEXTPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_GetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIuivEXT(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIuivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetTexParameterIuivEXT"];
    PFNGLGETTEXPARAMETERIUIVEXTPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIUIVEXTPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_SamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIivEXT(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glSamplerParameterIivEXT"];
    PFNGLSAMPLERPARAMETERIIVEXTPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIIVEXTPROC>(entry);
    next(sampler, pname, param);
}

void GL_APIENTRY GL_SamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIuivEXT(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIuivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterIuivEXT"];
    PFNGLSAMPLERPARAMETERIUIVEXTPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERIUIVEXTPROC>(entry);
    next(sampler, pname, param);
}

void GL_APIENTRY GL_TexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIivEXT(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glTexParameterIivEXT"];
    PFNGLTEXPARAMETERIIVEXTPROC next = reinterpret_cast<PFNGLTEXPARAMETERIIVEXTPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIuivEXT(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIuivEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glTexParameterIuivEXT"];
    PFNGLTEXPARAMETERIUIVEXTPROC next = reinterpret_cast<PFNGLTEXPARAMETERIUIVEXTPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexBufferEXT(target = %s, internalformat = %s, buffer = %u)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), buffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexBufferEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glTexBufferEXT"];
    PFNGLTEXBUFFEREXTPROC next = reinterpret_cast<PFNGLTEXBUFFEREXTPROC>(entry);
    next(target, internalformat, buffer);
}

void GL_APIENTRY GL_TexBufferRangeEXT(GLenum target,
                                      GLenum internalformat,
                                      GLuint buffer,
                                      GLintptr offset,
                                      GLsizeiptr size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexBufferRangeEXT(target = %s, internalformat = %s, buffer = %u, offset = "
                 "%llu, size = %llu)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), buffer,
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(size));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexBufferRangeEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glTexBufferRangeEXT"];
    PFNGLTEXBUFFERRANGEEXTPROC next = reinterpret_cast<PFNGLTEXBUFFERRANGEEXTPROC>(entry);
    next(target, internalformat, buffer, offset, size);
}

void GL_APIENTRY GL_TexStorage1DEXT(GLenum target,
                                    GLsizei levels,
                                    GLenum internalformat,
                                    GLsizei width)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage1DEXT(target = %s, levels = %d, internalformat = %s, width = %d)",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), width);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorage1DEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glTexStorage1DEXT"];
    PFNGLTEXSTORAGE1DEXTPROC next = reinterpret_cast<PFNGLTEXSTORAGE1DEXTPROC>(entry);
    next(target, levels, internalformat, width);
}

void GL_APIENTRY GL_TexStorage2DEXT(GLenum target,
                                    GLsizei levels,
                                    GLenum internalformat,
                                    GLsizei width,
                                    GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexStorage2DEXT(target = %s, levels = %d, internalformat = %s, width = %d, height = %d)",
        GLenumToString(GLESEnum::TextureTarget, target), levels,
        GLenumToString(GLESEnum::SizedInternalFormat, internalformat), width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorage2DEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glTexStorage2DEXT"];
    PFNGLTEXSTORAGE2DEXTPROC next = reinterpret_cast<PFNGLTEXSTORAGE2DEXTPROC>(entry);
    next(target, levels, internalformat, width, height);
}

void GL_APIENTRY GL_TexStorage3DEXT(GLenum target,
                                    GLsizei levels,
                                    GLenum internalformat,
                                    GLsizei width,
                                    GLsizei height,
                                    GLsizei depth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage3DEXT(target = %s, levels = %d, internalformat = %s, width = %d, "
                 "height = %d, depth = %d)",
                 GLenumToString(GLESEnum::TextureTarget, target), levels,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), width, height,
                 depth);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorage3DEXT),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glTexStorage3DEXT"];
    PFNGLTEXSTORAGE3DEXTPROC next = reinterpret_cast<PFNGLTEXSTORAGE3DEXTPROC>(entry);
    next(target, levels, internalformat, width, height, depth);
}

void GL_APIENTRY GL_BlendBarrierKHR()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendBarrierKHR()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendBarrierKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glBlendBarrierKHR"];
    PFNGLBLENDBARRIERKHRPROC next = reinterpret_cast<PFNGLBLENDBARRIERKHRPROC>(entry);
    next();
}

void GL_APIENTRY GL_DebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void *userParam)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageCallbackKHR(callback = 0x%016" PRIxPTR
                 ", userParam = 0x%016" PRIxPTR ")",
                 (uintptr_t)callback, (uintptr_t)userParam);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDebugMessageCallbackKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDebugMessageCallbackKHR"];
    PFNGLDEBUGMESSAGECALLBACKKHRPROC next =
        reinterpret_cast<PFNGLDEBUGMESSAGECALLBACKKHRPROC>(entry);
    next(callback, userParam);
}

void GL_APIENTRY GL_DebugMessageControlKHR(GLenum source,
                                           GLenum type,
                                           GLenum severity,
                                           GLsizei count,
                                           const GLuint *ids,
                                           GLboolean enabled)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageControlKHR(source = %s, type = %s, severity = %s, count = %d, ids "
                 "= 0x%016" PRIxPTR ", enabled = %s)",
                 GLenumToString(GLESEnum::DebugSource, source),
                 GLenumToString(GLESEnum::DebugType, type),
                 GLenumToString(GLESEnum::DebugSeverity, severity), count, (uintptr_t)ids,
                 GLbooleanToString(enabled));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDebugMessageControlKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDebugMessageControlKHR"];
    PFNGLDEBUGMESSAGECONTROLKHRPROC next = reinterpret_cast<PFNGLDEBUGMESSAGECONTROLKHRPROC>(entry);
    next(source, type, severity, count, ids, enabled);
}

void GL_APIENTRY GL_DebugMessageInsertKHR(GLenum source,
                                          GLenum type,
                                          GLuint id,
                                          GLenum severity,
                                          GLsizei length,
                                          const GLchar *buf)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageInsertKHR(source = %s, type = %s, id = %u, severity = %s, length = "
                 "%d, buf = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::DebugSource, source),
                 GLenumToString(GLESEnum::DebugType, type), id,
                 GLenumToString(GLESEnum::DebugSeverity, severity), length, (uintptr_t)buf);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDebugMessageInsertKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDebugMessageInsertKHR"];
    PFNGLDEBUGMESSAGEINSERTKHRPROC next = reinterpret_cast<PFNGLDEBUGMESSAGEINSERTKHRPROC>(entry);
    next(source, type, id, severity, length, buf);
}

GLuint GL_APIENTRY GL_GetDebugMessageLogKHR(GLuint count,
                                            GLsizei bufSize,
                                            GLenum *sources,
                                            GLenum *types,
                                            GLuint *ids,
                                            GLenum *severities,
                                            GLsizei *lengths,
                                            GLchar *messageLog)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetDebugMessageLogKHR(count = %u, bufSize = %d, sources = 0x%016" PRIxPTR
                 ", types = 0x%016" PRIxPTR ", ids = 0x%016" PRIxPTR ", severities = 0x%016" PRIxPTR
                 ", lengths = 0x%016" PRIxPTR ", messageLog = 0x%016" PRIxPTR ")",
                 count, bufSize, (uintptr_t)sources, (uintptr_t)types, (uintptr_t)ids,
                 (uintptr_t)severities, (uintptr_t)lengths, (uintptr_t)messageLog);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetDebugMessageLogKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetDebugMessageLogKHR"];
    PFNGLGETDEBUGMESSAGELOGKHRPROC next = reinterpret_cast<PFNGLGETDEBUGMESSAGELOGKHRPROC>(entry);
    return next(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

void GL_APIENTRY GL_GetObjectLabelKHR(GLenum identifier,
                                      GLuint name,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetObjectLabelKHR(identifier = %s, name = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", label = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::AllEnums, identifier), name, bufSize, (uintptr_t)length,
        (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetObjectLabelKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetObjectLabelKHR"];
    PFNGLGETOBJECTLABELKHRPROC next = reinterpret_cast<PFNGLGETOBJECTLABELKHRPROC>(entry);
    next(identifier, name, bufSize, length, label);
}

void GL_APIENTRY GL_GetObjectPtrLabelKHR(const void *ptr,
                                         GLsizei bufSize,
                                         GLsizei *length,
                                         GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetObjectPtrLabelKHR(ptr = 0x%016" PRIxPTR
                 ", bufSize = %d, length = 0x%016" PRIxPTR ", label = 0x%016" PRIxPTR ")",
                 (uintptr_t)ptr, bufSize, (uintptr_t)length, (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetObjectPtrLabelKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetObjectPtrLabelKHR"];
    PFNGLGETOBJECTPTRLABELKHRPROC next = reinterpret_cast<PFNGLGETOBJECTPTRLABELKHRPROC>(entry);
    next(ptr, bufSize, length, label);
}

void GL_APIENTRY GL_GetPointervKHR(GLenum pname, void **params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetPointervKHR(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetPointervKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetPointervKHR"];
    PFNGLGETPOINTERVKHRPROC next = reinterpret_cast<PFNGLGETPOINTERVKHRPROC>(entry);
    next(pname, params);
}

void GL_APIENTRY GL_ObjectLabelKHR(GLenum identifier,
                                   GLuint name,
                                   GLsizei length,
                                   const GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glObjectLabelKHR(identifier = %s, name = %u, length = %d, label = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::ObjectIdentifier, identifier), name, length, (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLObjectLabelKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glObjectLabelKHR"];
    PFNGLOBJECTLABELKHRPROC next = reinterpret_cast<PFNGLOBJECTLABELKHRPROC>(entry);
    next(identifier, name, length, label);
}

void GL_APIENTRY GL_ObjectPtrLabelKHR(const void *ptr, GLsizei length, const GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glObjectPtrLabelKHR(ptr = 0x%016" PRIxPTR ", length = %d, label = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)ptr, length, (uintptr_t)label);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLObjectPtrLabelKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glObjectPtrLabelKHR"];
    PFNGLOBJECTPTRLABELKHRPROC next = reinterpret_cast<PFNGLOBJECTPTRLABELKHRPROC>(entry);
    next(ptr, length, label);
}

void GL_APIENTRY GL_PopDebugGroupKHR()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPopDebugGroupKHR()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPopDebugGroupKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glPopDebugGroupKHR"];
    PFNGLPOPDEBUGGROUPKHRPROC next = reinterpret_cast<PFNGLPOPDEBUGGROUPKHRPROC>(entry);
    next();
}

void GL_APIENTRY GL_PushDebugGroupKHR(GLenum source,
                                      GLuint id,
                                      GLsizei length,
                                      const GLchar *message)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPushDebugGroupKHR(source = %s, id = %u, length = %d, message = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::DebugSource, source), id, length, (uintptr_t)message);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPushDebugGroupKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glPushDebugGroupKHR"];
    PFNGLPUSHDEBUGGROUPKHRPROC next = reinterpret_cast<PFNGLPUSHDEBUGGROUPKHRPROC>(entry);
    next(source, id, length, message);
}

void GL_APIENTRY GL_MaxShaderCompilerThreadsKHR(GLuint count)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMaxShaderCompilerThreadsKHR(count = %u)", count);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMaxShaderCompilerThreadsKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glMaxShaderCompilerThreadsKHR"];
    PFNGLMAXSHADERCOMPILERTHREADSKHRPROC next =
        reinterpret_cast<PFNGLMAXSHADERCOMPILERTHREADSKHRPROC>(entry);
    next(count);
}

void GL_APIENTRY GL_FramebufferParameteriMESA(GLenum target, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferParameteriMESA(target = %s, pname = %s, param = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferParameterName, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferParameteriMESA),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferParameteriMESA"];
    PFNGLFRAMEBUFFERPARAMETERIMESAPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERPARAMETERIMESAPROC>(entry);
    next(target, pname, param);
}

void GL_APIENTRY GL_GetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetFramebufferParameterivMESA(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::FramebufferTarget, target),
        GLenumToString(GLESEnum::FramebufferAttachmentParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferParameterivMESA),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferParameterivMESA"];
    PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_DeleteFencesNV(GLsizei n, const GLuint *fences)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteFencesNV(n = %d, fences = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)fences);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteFencesNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glDeleteFencesNV"];
    PFNGLDELETEFENCESNVPROC next = reinterpret_cast<PFNGLDELETEFENCESNVPROC>(entry);
    next(n, fences);
}

void GL_APIENTRY GL_FinishFenceNV(GLuint fence)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFinishFenceNV(fence = %u)", fence);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFinishFenceNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glFinishFenceNV"];
    PFNGLFINISHFENCENVPROC next = reinterpret_cast<PFNGLFINISHFENCENVPROC>(entry);
    next(fence);
}

void GL_APIENTRY GL_GenFencesNV(GLsizei n, GLuint *fences)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenFencesNV(n = %d, fences = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)fences);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenFencesNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGenFencesNV"];
    PFNGLGENFENCESNVPROC next = reinterpret_cast<PFNGLGENFENCESNVPROC>(entry);
    next(n, fences);
}

void GL_APIENTRY GL_GetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFenceivNV(fence = %u, pname = %s, params = 0x%016" PRIxPTR ")", fence,
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetFenceivNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glGetFenceivNV"];
    PFNGLGETFENCEIVNVPROC next = reinterpret_cast<PFNGLGETFENCEIVNVPROC>(entry);
    next(fence, pname, params);
}

GLboolean GL_APIENTRY GL_IsFenceNV(GLuint fence)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsFenceNV(fence = %u)", fence);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsFenceNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glIsFenceNV"];
    PFNGLISFENCENVPROC next = reinterpret_cast<PFNGLISFENCENVPROC>(entry);
    return next(fence);
}

void GL_APIENTRY GL_SetFenceNV(GLuint fence, GLenum condition)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSetFenceNV(fence = %u, condition = %s)", fence,
                 GLenumToString(GLESEnum::AllEnums, condition));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSetFenceNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glSetFenceNV"];
    PFNGLSETFENCENVPROC next = reinterpret_cast<PFNGLSETFENCENVPROC>(entry);
    next(fence, condition);
}

GLboolean GL_APIENTRY GL_TestFenceNV(GLuint fence)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTestFenceNV(fence = %u)", fence);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTestFenceNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glTestFenceNV"];
    PFNGLTESTFENCENVPROC next = reinterpret_cast<PFNGLTESTFENCENVPROC>(entry);
    return next(fence);
}

void GL_APIENTRY GL_BlitFramebufferNV(GLint srcX0,
                                      GLint srcY0,
                                      GLint srcX1,
                                      GLint srcY1,
                                      GLint dstX0,
                                      GLint dstY0,
                                      GLint dstX1,
                                      GLint dstY1,
                                      GLbitfield mask,
                                      GLenum filter)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlitFramebufferNV(srcX0 = %d, srcY0 = %d, srcX1 = %d, srcY1 = %d, dstX0 = %d, "
                 "dstY0 = %d, dstX1 = %d, dstY1 = %d, mask = %s, filter = %s)",
                 srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1,
                 GLbitfieldToString(GLESEnum::ClearBufferMask, mask).c_str(),
                 GLenumToString(GLESEnum::BlitFramebufferFilter, filter));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlitFramebufferNV),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glBlitFramebufferNV"];
    PFNGLBLITFRAMEBUFFERNVPROC next = reinterpret_cast<PFNGLBLITFRAMEBUFFERNVPROC>(entry);
    next(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void GL_APIENTRY GL_EGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glEGLImageTargetRenderbufferStorageOES(target = %s, image = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), (uintptr_t)image);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLEGLImageTargetRenderbufferStorageOES),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEGLImageTargetRenderbufferStorageOES"];
    PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC next =
        reinterpret_cast<PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC>(entry);
    next(target, image);
}

void GL_APIENTRY GL_EGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glEGLImageTargetTexture2DOES(target = %s, image = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, target), (uintptr_t)image);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEGLImageTargetTexture2DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEGLImageTargetTexture2DOES"];
    PFNGLEGLIMAGETARGETTEXTURE2DOESPROC next =
        reinterpret_cast<PFNGLEGLIMAGETARGETTEXTURE2DOESPROC>(entry);
    next(target, image);
}

void GL_APIENTRY GL_CopyImageSubDataOES(GLuint srcName,
                                        GLenum srcTarget,
                                        GLint srcLevel,
                                        GLint srcX,
                                        GLint srcY,
                                        GLint srcZ,
                                        GLuint dstName,
                                        GLenum dstTarget,
                                        GLint dstLevel,
                                        GLint dstX,
                                        GLint dstY,
                                        GLint dstZ,
                                        GLsizei srcWidth,
                                        GLsizei srcHeight,
                                        GLsizei srcDepth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyImageSubDataOES(srcName = %u, srcTarget = %s, srcLevel = %d, srcX = %d, "
                 "srcY = %d, srcZ = %d, dstName = %u, dstTarget = %s, dstLevel = %d, dstX = %d, "
                 "dstY = %d, dstZ = %d, srcWidth = %d, srcHeight = %d, srcDepth = %d)",
                 srcName, GLenumToString(GLESEnum::CopyBufferSubDataTarget, srcTarget), srcLevel,
                 srcX, srcY, srcZ, dstName,
                 GLenumToString(GLESEnum::CopyBufferSubDataTarget, dstTarget), dstLevel, dstX, dstY,
                 dstZ, srcWidth, srcHeight, srcDepth);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyImageSubDataOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glCopyImageSubDataOES"];
    PFNGLCOPYIMAGESUBDATAOESPROC next = reinterpret_cast<PFNGLCOPYIMAGESUBDATAOESPROC>(entry);
    next(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY,
         dstZ, srcWidth, srcHeight, srcDepth);
}

void GL_APIENTRY GL_BlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlendEquationSeparateiOES(buf = %u, modeRGB = %s, modeAlpha = %s)", buf,
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeRGB),
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquationSeparateiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glBlendEquationSeparateiOES"];
    PFNGLBLENDEQUATIONSEPARATEIOESPROC next =
        reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEIOESPROC>(entry);
    next(buf, modeRGB, modeAlpha);
}

void GL_APIENTRY GL_BlendEquationiOES(GLuint buf, GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendEquationiOES(buf = %u, mode = %s)", buf,
                 GLenumToString(GLESEnum::BlendEquationModeEXT, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquationiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glBlendEquationiOES"];
    PFNGLBLENDEQUATIONIOESPROC next = reinterpret_cast<PFNGLBLENDEQUATIONIOESPROC>(entry);
    next(buf, mode);
}

void GL_APIENTRY
GL_BlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glBlendFuncSeparateiOES(buf = %u, srcRGB = %s, dstRGB = %s, srcAlpha = %s, dstAlpha = %s)",
        buf, GLenumToString(GLESEnum::BlendingFactor, srcRGB),
        GLenumToString(GLESEnum::BlendingFactor, dstRGB),
        GLenumToString(GLESEnum::BlendingFactor, srcAlpha),
        GLenumToString(GLESEnum::BlendingFactor, dstAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFuncSeparateiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glBlendFuncSeparateiOES"];
    PFNGLBLENDFUNCSEPARATEIOESPROC next = reinterpret_cast<PFNGLBLENDFUNCSEPARATEIOESPROC>(entry);
    next(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void GL_APIENTRY GL_BlendFunciOES(GLuint buf, GLenum src, GLenum dst)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendFunciOES(buf = %u, src = %s, dst = %s)", buf,
                 GLenumToString(GLESEnum::BlendingFactor, src),
                 GLenumToString(GLESEnum::BlendingFactor, dst));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFunciOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glBlendFunciOES"];
    PFNGLBLENDFUNCIOESPROC next = reinterpret_cast<PFNGLBLENDFUNCIOESPROC>(entry);
    next(buf, src, dst);
}

void GL_APIENTRY GL_ColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColorMaskiOES(index = %u, r = %s, g = %s, b = %s, a = %s)",
                 index, GLbooleanToString(r), GLbooleanToString(g), GLbooleanToString(b),
                 GLbooleanToString(a));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLColorMaskiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glColorMaskiOES"];
    PFNGLCOLORMASKIOESPROC next = reinterpret_cast<PFNGLCOLORMASKIOESPROC>(entry);
    next(index, r, g, b, a);
}

void GL_APIENTRY GL_DisableiOES(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisableiOES(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDisableiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDisableiOES"];
    PFNGLDISABLEIOESPROC next = reinterpret_cast<PFNGLDISABLEIOESPROC>(entry);
    next(target, index);
}

void GL_APIENTRY GL_EnableiOES(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnableiOES(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEnableiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glEnableiOES"];
    PFNGLENABLEIOESPROC next = reinterpret_cast<PFNGLENABLEIOESPROC>(entry);
    next(target, index);
}

GLboolean GL_APIENTRY GL_IsEnablediOES(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsEnablediOES(target = %s, index = %u)",
                 GLenumToString(GLESEnum::EnableCap, target), index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsEnablediOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glIsEnablediOES"];
    PFNGLISENABLEDIOESPROC next = reinterpret_cast<PFNGLISENABLEDIOESPROC>(entry);
    return next(target, index);
}

void GL_APIENTRY GL_DrawElementsBaseVertexOES(GLenum mode,
                                              GLsizei count,
                                              GLenum type,
                                              const void *indices,
                                              GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsBaseVertexOES(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", basevertex = %d)",
        GLenumToString(GLESEnum::PrimitiveType, mode), count,
        GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawElementsBaseVertexOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsBaseVertexOES"];
    PFNGLDRAWELEMENTSBASEVERTEXOESPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXOESPROC>(entry);
    next(mode, count, type, indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElementsInstancedBaseVertexOES(GLenum mode,
                                                       GLsizei count,
                                                       GLenum type,
                                                       const void *indices,
                                                       GLsizei instancecount,
                                                       GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseVertexOES(mode = %s, count = %d, type = %s, indices = "
                 "0x%016" PRIxPTR ", instancecount = %d, basevertex = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices,
                 instancecount, basevertex);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseVertexOES),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseVertexOES"];
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC>(entry);
    next(mode, count, type, indices, instancecount, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawRangeElementsBaseVertexOES(GLenum mode,
                                                   GLuint start,
                                                   GLuint end,
                                                   GLsizei count,
                                                   GLenum type,
                                                   const void *indices,
                                                   GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawRangeElementsBaseVertexOES(mode = %s, start = %u, end = %u, count = %d, "
                 "type = %s, indices = 0x%016" PRIxPTR ", basevertex = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), start, end, count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawRangeElementsBaseVertexOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawRangeElementsBaseVertexOES"];
    PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC next =
        reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC>(entry);
    next(mode, start, end, count, type, indices, basevertex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawTexfOES(x = %f, y = %f, z = %f, width = %f, height = %f)", x, y, z, width,
                 height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexfOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDrawTexfOES"];
    PFNGLDRAWTEXFOESPROC next = reinterpret_cast<PFNGLDRAWTEXFOESPROC>(entry);
    next(x, y, z, width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexfvOES(const GLfloat *coords)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawTexfvOES(coords = 0x%016" PRIxPTR ")",
                 (uintptr_t)coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexfvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDrawTexfvOES"];
    PFNGLDRAWTEXFVOESPROC next = reinterpret_cast<PFNGLDRAWTEXFVOESPROC>(entry);
    next(coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawTexiOES(x = %d, y = %d, z = %d, width = %d, height = %d)", x, y, z, width,
                 height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexiOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDrawTexiOES"];
    PFNGLDRAWTEXIOESPROC next = reinterpret_cast<PFNGLDRAWTEXIOESPROC>(entry);
    next(x, y, z, width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexivOES(const GLint *coords)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawTexivOES(coords = 0x%016" PRIxPTR ")",
                 (uintptr_t)coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDrawTexivOES"];
    PFNGLDRAWTEXIVOESPROC next = reinterpret_cast<PFNGLDRAWTEXIVOESPROC>(entry);
    next(coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawTexsOES(x = %d, y = %d, z = %d, width = %d, height = %d)", x, y, z, width,
                 height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexsOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDrawTexsOES"];
    PFNGLDRAWTEXSOESPROC next = reinterpret_cast<PFNGLDRAWTEXSOESPROC>(entry);
    next(x, y, z, width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexsvOES(const GLshort *coords)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawTexsvOES(coords = 0x%016" PRIxPTR ")",
                 (uintptr_t)coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexsvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDrawTexsvOES"];
    PFNGLDRAWTEXSVOESPROC next = reinterpret_cast<PFNGLDRAWTEXSVOESPROC>(entry);
    next(coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawTexxOES(x = 0x%X, y = 0x%X, z = 0x%X, width = 0x%X, height = 0x%X)", x, y,
                 z, width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexxOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDrawTexxOES"];
    PFNGLDRAWTEXXOESPROC next = reinterpret_cast<PFNGLDRAWTEXXOESPROC>(entry);
    next(x, y, z, width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawTexxvOES(const GLfixed *coords)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawTexxvOES(coords = 0x%016" PRIxPTR ")",
                 (uintptr_t)coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawTexxvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDrawTexxvOES"];
    PFNGLDRAWTEXXVOESPROC next = reinterpret_cast<PFNGLDRAWTEXXVOESPROC>(entry);
    next(coords);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_BindFramebufferOES(GLenum target, GLuint framebuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindFramebufferOES(target = %s, framebuffer = %u)",
                 GLenumToString(GLESEnum::FramebufferTarget, target), framebuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindFramebufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glBindFramebufferOES"];
    PFNGLBINDFRAMEBUFFEROESPROC next = reinterpret_cast<PFNGLBINDFRAMEBUFFEROESPROC>(entry);
    next(target, framebuffer);
}

void GL_APIENTRY GL_BindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindRenderbufferOES(target = %s, renderbuffer = %u)",
                 GLenumToString(GLESEnum::RenderbufferTarget, target), renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindRenderbufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glBindRenderbufferOES"];
    PFNGLBINDRENDERBUFFEROESPROC next = reinterpret_cast<PFNGLBINDRENDERBUFFEROESPROC>(entry);
    next(target, renderbuffer);
}

GLenum GL_APIENTRY GL_CheckFramebufferStatusOES(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCheckFramebufferStatusOES(target = %s)",
                 GLenumToString(GLESEnum::FramebufferTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCheckFramebufferStatusOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCheckFramebufferStatusOES"];
    PFNGLCHECKFRAMEBUFFERSTATUSOESPROC next =
        reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSOESPROC>(entry);
    return next(target);
}

void GL_APIENTRY GL_DeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteFramebuffersOES(n = %d, framebuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)framebuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteFramebuffersOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDeleteFramebuffersOES"];
    PFNGLDELETEFRAMEBUFFERSOESPROC next = reinterpret_cast<PFNGLDELETEFRAMEBUFFERSOESPROC>(entry);
    next(n, framebuffers);
}

void GL_APIENTRY GL_DeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteRenderbuffersOES(n = %d, renderbuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)renderbuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteRenderbuffersOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDeleteRenderbuffersOES"];
    PFNGLDELETERENDERBUFFERSOESPROC next = reinterpret_cast<PFNGLDELETERENDERBUFFERSOESPROC>(entry);
    next(n, renderbuffers);
}

void GL_APIENTRY GL_FramebufferRenderbufferOES(GLenum target,
                                               GLenum attachment,
                                               GLenum renderbuffertarget,
                                               GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferRenderbufferOES(target = %s, attachment = %s, renderbuffertarget = "
                 "%s, renderbuffer = %u)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::RenderbufferTarget, renderbuffertarget), renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferRenderbufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferRenderbufferOES"];
    PFNGLFRAMEBUFFERRENDERBUFFEROESPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFEROESPROC>(entry);
    next(target, attachment, renderbuffertarget, renderbuffer);
}

void GL_APIENTRY GL_FramebufferTexture2DOES(GLenum target,
                                            GLenum attachment,
                                            GLenum textarget,
                                            GLuint texture,
                                            GLint level)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexture2DOES(target = %s, attachment = %s, textarget = %s, texture "
                 "= %u, level = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::TextureTarget, textarget), texture, level);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexture2DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTexture2DOES"];
    PFNGLFRAMEBUFFERTEXTURE2DOESPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DOESPROC>(entry);
    next(target, attachment, textarget, texture, level);
}

void GL_APIENTRY GL_GenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGenFramebuffersOES(n = %d, framebuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)framebuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenFramebuffersOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGenFramebuffersOES"];
    PFNGLGENFRAMEBUFFERSOESPROC next = reinterpret_cast<PFNGLGENFRAMEBUFFERSOESPROC>(entry);
    next(n, framebuffers);
}

void GL_APIENTRY GL_GenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGenRenderbuffersOES(n = %d, renderbuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)renderbuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenRenderbuffersOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGenRenderbuffersOES"];
    PFNGLGENRENDERBUFFERSOESPROC next = reinterpret_cast<PFNGLGENRENDERBUFFERSOESPROC>(entry);
    next(n, renderbuffers);
}

void GL_APIENTRY GL_GenerateMipmapOES(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenerateMipmapOES(target = %s)",
                 GLenumToString(GLESEnum::TextureTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenerateMipmapOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGenerateMipmapOES"];
    PFNGLGENERATEMIPMAPOESPROC next = reinterpret_cast<PFNGLGENERATEMIPMAPOESPROC>(entry);
    next(target);
}

void GL_APIENTRY GL_GetFramebufferAttachmentParameterivOES(GLenum target,
                                                           GLenum attachment,
                                                           GLenum pname,
                                                           GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFramebufferAttachmentParameterivOES(target = %s, attachment = %s, pname = "
                 "%s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::FramebufferAttachmentParameterName, pname),
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferAttachmentParameterivOES),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferAttachmentParameterivOES"];
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC>(entry);
    next(target, attachment, pname, params);
}

void GL_APIENTRY GL_GetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetRenderbufferParameterivOES(target = %s, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::RenderbufferTarget, target),
                 GLenumToString(GLESEnum::RenderbufferParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetRenderbufferParameterivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetRenderbufferParameterivOES"];
    PFNGLGETRENDERBUFFERPARAMETERIVOESPROC next =
        reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVOESPROC>(entry);
    next(target, pname, params);
}

GLboolean GL_APIENTRY GL_IsFramebufferOES(GLuint framebuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsFramebufferOES(framebuffer = %u)", framebuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsFramebufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glIsFramebufferOES"];
    PFNGLISFRAMEBUFFEROESPROC next = reinterpret_cast<PFNGLISFRAMEBUFFEROESPROC>(entry);
    return next(framebuffer);
}

GLboolean GL_APIENTRY GL_IsRenderbufferOES(GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsRenderbufferOES(renderbuffer = %u)", renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsRenderbufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glIsRenderbufferOES"];
    PFNGLISRENDERBUFFEROESPROC next = reinterpret_cast<PFNGLISRENDERBUFFEROESPROC>(entry);
    return next(renderbuffer);
}

void GL_APIENTRY GL_RenderbufferStorageOES(GLenum target,
                                           GLenum internalformat,
                                           GLsizei width,
                                           GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glRenderbufferStorageOES(target = %s, internalformat = %s, width = %d, height = %d)",
        GLenumToString(GLESEnum::RenderbufferTarget, target),
        GLenumToString(GLESEnum::InternalFormat, internalformat), width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLRenderbufferStorageOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glRenderbufferStorageOES"];
    PFNGLRENDERBUFFERSTORAGEOESPROC next = reinterpret_cast<PFNGLRENDERBUFFERSTORAGEOESPROC>(entry);
    next(target, internalformat, width, height);
}

void GL_APIENTRY GL_FramebufferTextureOES(GLenum target,
                                          GLenum attachment,
                                          GLuint texture,
                                          GLint level)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTextureOES(target = %s, attachment = %s, texture = %u, level = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment), texture, level);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTextureOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glFramebufferTextureOES"];
    PFNGLFRAMEBUFFERTEXTUREOESPROC next = reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREOESPROC>(entry);
    next(target, attachment, texture, level);
}

void GL_APIENTRY GL_GetProgramBinaryOES(GLuint program,
                                        GLsizei bufSize,
                                        GLsizei *length,
                                        GLenum *binaryFormat,
                                        void *binary)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramBinaryOES(program = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", binaryFormat = 0x%016" PRIxPTR ", binary = 0x%016" PRIxPTR ")",
                 program, bufSize, (uintptr_t)length, (uintptr_t)binaryFormat, (uintptr_t)binary);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramBinaryOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetProgramBinaryOES"];
    PFNGLGETPROGRAMBINARYOESPROC next = reinterpret_cast<PFNGLGETPROGRAMBINARYOESPROC>(entry);
    next(program, bufSize, length, binaryFormat, binary);
}

void GL_APIENTRY GL_ProgramBinaryOES(GLuint program,
                                     GLenum binaryFormat,
                                     const void *binary,
                                     GLint length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramBinaryOES(program = %u, binaryFormat = %s, binary = 0x%016" PRIxPTR
                 ", length = %d)",
                 program, GLenumToString(GLESEnum::AllEnums, binaryFormat), (uintptr_t)binary,
                 length);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLProgramBinaryOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glProgramBinaryOES"];
    PFNGLPROGRAMBINARYOESPROC next = reinterpret_cast<PFNGLPROGRAMBINARYOESPROC>(entry);
    next(program, binaryFormat, binary, length);
}

void GL_APIENTRY GL_GetBufferPointervOES(GLenum target, GLenum pname, void **params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferPointervOES(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBufferPointervOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetBufferPointervOES"];
    PFNGLGETBUFFERPOINTERVOESPROC next = reinterpret_cast<PFNGLGETBUFFERPOINTERVOESPROC>(entry);
    next(target, pname, params);
}

void *GL_APIENTRY GL_MapBufferOES(GLenum target, GLenum access)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMapBufferOES(target = %s, access = %s)",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 GLenumToString(GLESEnum::BufferAccessARB, access));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMapBufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glMapBufferOES"];
    PFNGLMAPBUFFEROESPROC next = reinterpret_cast<PFNGLMAPBUFFEROESPROC>(entry);
    return next(target, access);
}

GLboolean GL_APIENTRY GL_UnmapBufferOES(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUnmapBufferOES(target = %s)",
                 GLenumToString(GLESEnum::AllEnums, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUnmapBufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glUnmapBufferOES"];
    PFNGLUNMAPBUFFEROESPROC next = reinterpret_cast<PFNGLUNMAPBUFFEROESPROC>(entry);
    return next(target);
}

void GL_APIENTRY GL_CurrentPaletteMatrixOES(GLuint matrixpaletteindex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCurrentPaletteMatrixOES(matrixpaletteindex = %u)",
                 matrixpaletteindex);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCurrentPaletteMatrixOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCurrentPaletteMatrixOES"];
    PFNGLCURRENTPALETTEMATRIXOESPROC next =
        reinterpret_cast<PFNGLCURRENTPALETTEMATRIXOESPROC>(entry);
    next(matrixpaletteindex);
}

void GL_APIENTRY GL_LoadPaletteFromModelViewMatrixOES()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLoadPaletteFromModelViewMatrixOES()");
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLLoadPaletteFromModelViewMatrixOES),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glLoadPaletteFromModelViewMatrixOES"];
    PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC next =
        reinterpret_cast<PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC>(entry);
    next();
}

void GL_APIENTRY GL_MatrixIndexPointerOES(GLint size,
                                          GLenum type,
                                          GLsizei stride,
                                          const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glMatrixIndexPointerOES(size = %d, type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")",
        size, GLenumToString(GLESEnum::AllEnums, type), stride, (uintptr_t)pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMatrixIndexPointerOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glMatrixIndexPointerOES"];
    PFNGLMATRIXINDEXPOINTEROESPROC next = reinterpret_cast<PFNGLMATRIXINDEXPOINTEROESPROC>(entry);
    next(size, type, stride, pointer);
}

void GL_APIENTRY GL_WeightPointerOES(GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glWeightPointerOES(size = %d, type = %s, stride = %d, pointer = 0x%016" PRIxPTR
                 ")",
                 size, GLenumToString(GLESEnum::AllEnums, type), stride, (uintptr_t)pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLWeightPointerOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glWeightPointerOES"];
    PFNGLWEIGHTPOINTEROESPROC next = reinterpret_cast<PFNGLWEIGHTPOINTEROESPROC>(entry);
    next(size, type, stride, pointer);
}

void GL_APIENTRY GL_PointSizePointerOES(GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPointSizePointerOES(type = %s, stride = %d, pointer = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::AllEnums, type), stride, (uintptr_t)pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPointSizePointerOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glPointSizePointerOES"];
    PFNGLPOINTSIZEPOINTEROESPROC next = reinterpret_cast<PFNGLPOINTSIZEPOINTEROESPROC>(entry);
    next(type, stride, pointer);
}

void GL_APIENTRY GL_PrimitiveBoundingBoxOES(GLfloat minX,
                                            GLfloat minY,
                                            GLfloat minZ,
                                            GLfloat minW,
                                            GLfloat maxX,
                                            GLfloat maxY,
                                            GLfloat maxZ,
                                            GLfloat maxW)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPrimitiveBoundingBoxOES(minX = %f, minY = %f, minZ = %f, minW = %f, maxX = %f, "
                 "maxY = %f, maxZ = %f, maxW = %f)",
                 minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPrimitiveBoundingBoxOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glPrimitiveBoundingBoxOES"];
    PFNGLPRIMITIVEBOUNDINGBOXOESPROC next =
        reinterpret_cast<PFNGLPRIMITIVEBOUNDINGBOXOESPROC>(entry);
    next(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

GLbitfield GL_APIENTRY GL_QueryMatrixxOES(GLfixed *mantissa, GLint *exponent)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glQueryMatrixxOES(mantissa = 0x%016" PRIxPTR ", exponent = 0x%016" PRIxPTR ")",
                 (uintptr_t)mantissa, (uintptr_t)exponent);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLQueryMatrixxOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glQueryMatrixxOES"];
    PFNGLQUERYMATRIXXOESPROC next = reinterpret_cast<PFNGLQUERYMATRIXXOESPROC>(entry);
    return next(mantissa, exponent);
}

void GL_APIENTRY GL_MinSampleShadingOES(GLfloat value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMinSampleShadingOES(value = %f)", value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLMinSampleShadingOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glMinSampleShadingOES"];
    PFNGLMINSAMPLESHADINGOESPROC next = reinterpret_cast<PFNGLMINSAMPLESHADINGOESPROC>(entry);
    next(value);
}

void GL_APIENTRY GL_CompressedTexImage3DOES(GLenum target,
                                            GLint level,
                                            GLenum internalformat,
                                            GLsizei width,
                                            GLsizei height,
                                            GLsizei depth,
                                            GLint border,
                                            GLsizei imageSize,
                                            const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexImage3DOES(target = %s, level = %d, internalformat = %s, width = "
                 "%d, height = %d, depth = %d, border = %d, imageSize = %d, data = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height, depth,
                 border, imageSize, (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompressedTexImage3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexImage3DOES"];
    PFNGLCOMPRESSEDTEXIMAGE3DOESPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DOESPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void GL_APIENTRY GL_CompressedTexSubImage3DOES(GLenum target,
                                               GLint level,
                                               GLint xoffset,
                                               GLint yoffset,
                                               GLint zoffset,
                                               GLsizei width,
                                               GLsizei height,
                                               GLsizei depth,
                                               GLenum format,
                                               GLsizei imageSize,
                                               const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexSubImage3DOES(target = %s, level = %d, xoffset = %d, yoffset = "
                 "%d, zoffset = %d, width = %d, height = %d, depth = %d, format = %s, imageSize = "
                 "%d, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level, xoffset, yoffset, zoffset,
                 width, height, depth, GLenumToString(GLESEnum::InternalFormat, format), imageSize,
                 (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompressedTexSubImage3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexSubImage3DOES"];
    PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void GL_APIENTRY GL_CopyTexSubImage3DOES(GLenum target,
                                         GLint level,
                                         GLint xoffset,
                                         GLint yoffset,
                                         GLint zoffset,
                                         GLint x,
                                         GLint y,
                                         GLsizei width,
                                         GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTexSubImage3DOES(target = %s, level = %d, xoffset = %d, yoffset = %d, "
                 "zoffset = %d, x = %d, y = %d, width = %d, height = %d)",
                 GLenumToString(GLESEnum::AllEnums, target), level, xoffset, yoffset, zoffset, x, y,
                 width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyTexSubImage3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glCopyTexSubImage3DOES"];
    PFNGLCOPYTEXSUBIMAGE3DOESPROC next = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3DOESPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void GL_APIENTRY GL_FramebufferTexture3DOES(GLenum target,
                                            GLenum attachment,
                                            GLenum textarget,
                                            GLuint texture,
                                            GLint level,
                                            GLint zoffset)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexture3DOES(target = %s, attachment = %s, textarget = %s, texture "
                 "= %u, level = %d, zoffset = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::TextureTarget, textarget), texture, level, zoffset);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexture3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTexture3DOES"];
    PFNGLFRAMEBUFFERTEXTURE3DOESPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE3DOESPROC>(entry);
    next(target, attachment, textarget, texture, level, zoffset);
}

void GL_APIENTRY GL_TexImage3DOES(GLenum target,
                                  GLint level,
                                  GLenum internalformat,
                                  GLsizei width,
                                  GLsizei height,
                                  GLsizei depth,
                                  GLint border,
                                  GLenum format,
                                  GLenum type,
                                  const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexImage3DOES(target = %s, level = %d, internalformat = %s, width = %d, height "
                 "= %d, depth = %d, border = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height, depth,
                 border, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexImage3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexImage3DOES"];
    PFNGLTEXIMAGE3DOESPROC next = reinterpret_cast<PFNGLTEXIMAGE3DOESPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void GL_APIENTRY GL_TexSubImage3DOES(GLenum target,
                                     GLint level,
                                     GLint xoffset,
                                     GLint yoffset,
                                     GLint zoffset,
                                     GLsizei width,
                                     GLsizei height,
                                     GLsizei depth,
                                     GLenum format,
                                     GLenum type,
                                     const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexSubImage3DOES(target = %s, level = %d, xoffset = %d, yoffset = %d, zoffset = %d, "
        "width = %d, height = %d, depth = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::TextureTarget, target), level, xoffset, yoffset, zoffset, width,
        height, depth, GLenumToString(GLESEnum::PixelFormat, format),
        GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexSubImage3DOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glTexSubImage3DOES"];
    PFNGLTEXSUBIMAGE3DOESPROC next = reinterpret_cast<PFNGLTEXSUBIMAGE3DOESPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void GL_APIENTRY GL_GetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIivOES(sampler = %u, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIivOES"];
    PFNGLGETSAMPLERPARAMETERIIVOESPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIIVOESPROC>(entry);
    next(sampler, pname, params);
}

void GL_APIENTRY GL_GetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIuivOES(sampler = %u, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIuivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIuivOES"];
    PFNGLGETSAMPLERPARAMETERIUIVOESPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIUIVOESPROC>(entry);
    next(sampler, pname, params);
}

void GL_APIENTRY GL_GetTexParameterIivOES(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIivOES(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetTexParameterIivOES"];
    PFNGLGETTEXPARAMETERIIVOESPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIIVOESPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_GetTexParameterIuivOES(GLenum target, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIuivOES(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIuivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetTexParameterIuivOES"];
    PFNGLGETTEXPARAMETERIUIVOESPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIUIVOESPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_SamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIivOES(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glSamplerParameterIivOES"];
    PFNGLSAMPLERPARAMETERIIVOESPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIIVOESPROC>(entry);
    next(sampler, pname, param);
}

void GL_APIENTRY GL_SamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIuivOES(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLESEnum::SamplerParameterI, pname), (uintptr_t)param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIuivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glSamplerParameterIuivOES"];
    PFNGLSAMPLERPARAMETERIUIVOESPROC next =
        reinterpret_cast<PFNGLSAMPLERPARAMETERIUIVOESPROC>(entry);
    next(sampler, pname, param);
}

void GL_APIENTRY GL_TexParameterIivOES(GLenum target, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIivOES(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glTexParameterIivOES"];
    PFNGLTEXPARAMETERIIVOESPROC next = reinterpret_cast<PFNGLTEXPARAMETERIIVOESPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexParameterIuivOES(GLenum target, GLenum pname, const GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIuivOES(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterIuivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glTexParameterIuivOES"];
    PFNGLTEXPARAMETERIUIVOESPROC next = reinterpret_cast<PFNGLTEXPARAMETERIUIVOESPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexBufferOES(GLenum target, GLenum internalformat, GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexBufferOES(target = %s, internalformat = %s, buffer = %u)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), buffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexBufferOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glTexBufferOES"];
    PFNGLTEXBUFFEROESPROC next = reinterpret_cast<PFNGLTEXBUFFEROESPROC>(entry);
    next(target, internalformat, buffer);
}

void GL_APIENTRY GL_TexBufferRangeOES(GLenum target,
                                      GLenum internalformat,
                                      GLuint buffer,
                                      GLintptr offset,
                                      GLsizeiptr size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexBufferRangeOES(target = %s, internalformat = %s, buffer = %u, offset = "
                 "%llu, size = %llu)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), buffer,
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(size));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexBufferRangeOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glTexBufferRangeOES"];
    PFNGLTEXBUFFERRANGEOESPROC next = reinterpret_cast<PFNGLTEXBUFFERRANGEOESPROC>(entry);
    next(target, internalformat, buffer, offset, size);
}

void GL_APIENTRY GL_GetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexGenfvOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexGenfvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetTexGenfvOES"];
    PFNGLGETTEXGENFVOESPROC next = reinterpret_cast<PFNGLGETTEXGENFVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_GetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexGenivOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexGenivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetTexGenivOES"];
    PFNGLGETTEXGENIVOESPROC next = reinterpret_cast<PFNGLGETTEXGENIVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_GetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexGenxvOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexGenxvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetTexGenxvOES"];
    PFNGLGETTEXGENXVOESPROC next = reinterpret_cast<PFNGLGETTEXGENXVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_TexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexGenfOES(coord = %s, pname = %s, param = %f)",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGenfOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTexGenfOES"];
    PFNGLTEXGENFOESPROC next = reinterpret_cast<PFNGLTEXGENFOESPROC>(entry);
    next(coord, pname, param);
}

void GL_APIENTRY GL_TexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexGenfvOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGenfvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glTexGenfvOES"];
    PFNGLTEXGENFVOESPROC next = reinterpret_cast<PFNGLTEXGENFVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_TexGeniOES(GLenum coord, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexGeniOES(coord = %s, pname = %s, param = %d)",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGeniOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTexGeniOES"];
    PFNGLTEXGENIOESPROC next = reinterpret_cast<PFNGLTEXGENIOESPROC>(entry);
    next(coord, pname, param);
}

void GL_APIENTRY GL_TexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexGenivOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGenivOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glTexGenivOES"];
    PFNGLTEXGENIVOESPROC next = reinterpret_cast<PFNGLTEXGENIVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_TexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexGenxOES(coord = %s, pname = %s, param = 0x%X)",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGenxOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTexGenxOES"];
    PFNGLTEXGENXOESPROC next = reinterpret_cast<PFNGLTEXGENXOESPROC>(entry);
    next(coord, pname, param);
}

void GL_APIENTRY GL_TexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexGenxvOES(coord = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureCoordName, coord),
                 GLenumToString(GLESEnum::TextureGenParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexGenxvOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glTexGenxvOES"];
    PFNGLTEXGENXVOESPROC next = reinterpret_cast<PFNGLTEXGENXVOESPROC>(entry);
    next(coord, pname, params);
}

void GL_APIENTRY GL_TexStorage3DMultisampleOES(GLenum target,
                                               GLsizei samples,
                                               GLenum internalformat,
                                               GLsizei width,
                                               GLsizei height,
                                               GLsizei depth,
                                               GLboolean fixedsamplelocations)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage3DMultisampleOES(target = %s, samples = %d, internalformat = %s, "
                 "width = %d, height = %d, depth = %d, fixedsamplelocations = %s)",
                 GLenumToString(GLESEnum::TextureTarget, target), samples,
                 GLenumToString(GLESEnum::SizedInternalFormat, internalformat), width, height,
                 depth, GLbooleanToString(fixedsamplelocations));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexStorage3DMultisampleOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorage3DMultisampleOES"];
    PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC next =
        reinterpret_cast<PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC>(entry);
    next(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void GL_APIENTRY GL_BindVertexArrayOES(GLuint array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindVertexArrayOES(array = %u)", array);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindVertexArrayOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glBindVertexArrayOES"];
    PFNGLBINDVERTEXARRAYOESPROC next = reinterpret_cast<PFNGLBINDVERTEXARRAYOESPROC>(entry);
    next(array);
}

void GL_APIENTRY GL_DeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteVertexArraysOES(n = %d, arrays = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)arrays);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteVertexArraysOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDeleteVertexArraysOES"];
    PFNGLDELETEVERTEXARRAYSOESPROC next = reinterpret_cast<PFNGLDELETEVERTEXARRAYSOESPROC>(entry);
    next(n, arrays);
}

void GL_APIENTRY GL_GenVertexArraysOES(GLsizei n, GLuint *arrays)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenVertexArraysOES(n = %d, arrays = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)arrays);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenVertexArraysOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGenVertexArraysOES"];
    PFNGLGENVERTEXARRAYSOESPROC next = reinterpret_cast<PFNGLGENVERTEXARRAYSOESPROC>(entry);
    next(n, arrays);
}

GLboolean GL_APIENTRY GL_IsVertexArrayOES(GLuint array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsVertexArrayOES(array = %u)", array);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsVertexArrayOES),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glIsVertexArrayOES"];
    PFNGLISVERTEXARRAYOESPROC next = reinterpret_cast<PFNGLISVERTEXARRAYOESPROC>(entry);
    return next(array);
}

void GL_APIENTRY GL_FramebufferTextureMultiviewOVR(GLenum target,
                                                   GLenum attachment,
                                                   GLuint texture,
                                                   GLint level,
                                                   GLint baseViewIndex,
                                                   GLsizei numViews)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTextureMultiviewOVR(target = %s, attachment = %s, texture = %u, "
                 "level = %d, baseViewIndex = %d, numViews = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment), texture, level,
                 baseViewIndex, numViews);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTextureMultiviewOVR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTextureMultiviewOVR"];
    PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC>(entry);
    next(target, attachment, texture, level, baseViewIndex, numViews);
}

void GL_APIENTRY GL_ShadingRateQCOM(GLenum rate)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glShadingRateQCOM(rate = %s)",
                 GLenumToString(GLESEnum::ShadingRateQCOM, rate));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLShadingRateQCOM),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glShadingRateQCOM"];
    PFNGLSHADINGRATEQCOMPROC next = reinterpret_cast<PFNGLSHADINGRATEQCOMPROC>(entry);
    next(rate);
}

void setupGLES_EXTHooks()
{
    hookMap["glBeginPerfMonitorAMD"]            = (void *)GL_BeginPerfMonitorAMD;
    hookMap["glDeletePerfMonitorsAMD"]          = (void *)GL_DeletePerfMonitorsAMD;
    hookMap["glEndPerfMonitorAMD"]              = (void *)GL_EndPerfMonitorAMD;
    hookMap["glGenPerfMonitorsAMD"]             = (void *)GL_GenPerfMonitorsAMD;
    hookMap["glGetPerfMonitorCounterDataAMD"]   = (void *)GL_GetPerfMonitorCounterDataAMD;
    hookMap["glGetPerfMonitorCounterInfoAMD"]   = (void *)GL_GetPerfMonitorCounterInfoAMD;
    hookMap["glGetPerfMonitorCounterStringAMD"] = (void *)GL_GetPerfMonitorCounterStringAMD;
    hookMap["glGetPerfMonitorCountersAMD"]      = (void *)GL_GetPerfMonitorCountersAMD;
    hookMap["glGetPerfMonitorGroupStringAMD"]   = (void *)GL_GetPerfMonitorGroupStringAMD;
    hookMap["glGetPerfMonitorGroupsAMD"]        = (void *)GL_GetPerfMonitorGroupsAMD;
    hookMap["glSelectPerfMonitorCountersAMD"]   = (void *)GL_SelectPerfMonitorCountersAMD;
    hookMap["glDrawArraysInstancedBaseInstanceANGLE"] =
        (void *)GL_DrawArraysInstancedBaseInstanceANGLE;
    hookMap["glDrawElementsInstancedBaseVertexBaseInstanceANGLE"] =
        (void *)GL_DrawElementsInstancedBaseVertexBaseInstanceANGLE;
    hookMap["glMultiDrawArraysInstancedBaseInstanceANGLE"] =
        (void *)GL_MultiDrawArraysInstancedBaseInstanceANGLE;
    hookMap["glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE"] =
        (void *)GL_MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE;
    hookMap["glCopyTexture3DANGLE"]    = (void *)GL_CopyTexture3DANGLE;
    hookMap["glCopySubTexture3DANGLE"] = (void *)GL_CopySubTexture3DANGLE;
    hookMap["glBlitFramebufferANGLE"]  = (void *)GL_BlitFramebufferANGLE;
    hookMap["glRenderbufferStorageMultisampleANGLE"] =
        (void *)GL_RenderbufferStorageMultisampleANGLE;
    hookMap["glGetTexImageANGLE"]            = (void *)GL_GetTexImageANGLE;
    hookMap["glGetCompressedTexImageANGLE"]  = (void *)GL_GetCompressedTexImageANGLE;
    hookMap["glGetRenderbufferImageANGLE"]   = (void *)GL_GetRenderbufferImageANGLE;
    hookMap["glGetTexLevelParameterivANGLE"] = (void *)GL_GetTexLevelParameterivANGLE;
    hookMap["glGetTexLevelParameterfvANGLE"] = (void *)GL_GetTexLevelParameterfvANGLE;
    hookMap["glDrawArraysInstancedANGLE"]    = (void *)GL_DrawArraysInstancedANGLE;
    hookMap["glDrawElementsInstancedANGLE"]  = (void *)GL_DrawElementsInstancedANGLE;
    hookMap["glVertexAttribDivisorANGLE"]    = (void *)GL_VertexAttribDivisorANGLE;
    hookMap["glLogicOpANGLE"]                = (void *)GL_LogicOpANGLE;
    hookMap["glTexStorageMemFlags2DANGLE"]   = (void *)GL_TexStorageMemFlags2DANGLE;
    hookMap["glTexStorageMemFlags2DMultisampleANGLE"] =
        (void *)GL_TexStorageMemFlags2DMultisampleANGLE;
    hookMap["glTexStorageMemFlags3DANGLE"] = (void *)GL_TexStorageMemFlags3DANGLE;
    hookMap["glTexStorageMemFlags3DMultisampleANGLE"] =
        (void *)GL_TexStorageMemFlags3DMultisampleANGLE;
    hookMap["glImportMemoryZirconHandleANGLE"]   = (void *)GL_ImportMemoryZirconHandleANGLE;
    hookMap["glMultiDrawArraysANGLE"]            = (void *)GL_MultiDrawArraysANGLE;
    hookMap["glMultiDrawArraysInstancedANGLE"]   = (void *)GL_MultiDrawArraysInstancedANGLE;
    hookMap["glMultiDrawElementsANGLE"]          = (void *)GL_MultiDrawElementsANGLE;
    hookMap["glMultiDrawElementsInstancedANGLE"] = (void *)GL_MultiDrawElementsInstancedANGLE;
    hookMap["glProvokingVertexANGLE"]            = (void *)GL_ProvokingVertexANGLE;
    hookMap["glRequestExtensionANGLE"]           = (void *)GL_RequestExtensionANGLE;
    hookMap["glDisableExtensionANGLE"]           = (void *)GL_DisableExtensionANGLE;
    hookMap["glGetBooleanvRobustANGLE"]          = (void *)GL_GetBooleanvRobustANGLE;
    hookMap["glGetBufferParameterivRobustANGLE"] = (void *)GL_GetBufferParameterivRobustANGLE;
    hookMap["glGetFloatvRobustANGLE"]            = (void *)GL_GetFloatvRobustANGLE;
    hookMap["glGetFramebufferAttachmentParameterivRobustANGLE"] =
        (void *)GL_GetFramebufferAttachmentParameterivRobustANGLE;
    hookMap["glGetIntegervRobustANGLE"]  = (void *)GL_GetIntegervRobustANGLE;
    hookMap["glGetProgramivRobustANGLE"] = (void *)GL_GetProgramivRobustANGLE;
    hookMap["glGetRenderbufferParameterivRobustANGLE"] =
        (void *)GL_GetRenderbufferParameterivRobustANGLE;
    hookMap["glGetShaderivRobustANGLE"]             = (void *)GL_GetShaderivRobustANGLE;
    hookMap["glGetTexParameterfvRobustANGLE"]       = (void *)GL_GetTexParameterfvRobustANGLE;
    hookMap["glGetTexParameterivRobustANGLE"]       = (void *)GL_GetTexParameterivRobustANGLE;
    hookMap["glGetUniformfvRobustANGLE"]            = (void *)GL_GetUniformfvRobustANGLE;
    hookMap["glGetUniformivRobustANGLE"]            = (void *)GL_GetUniformivRobustANGLE;
    hookMap["glGetVertexAttribfvRobustANGLE"]       = (void *)GL_GetVertexAttribfvRobustANGLE;
    hookMap["glGetVertexAttribivRobustANGLE"]       = (void *)GL_GetVertexAttribivRobustANGLE;
    hookMap["glGetVertexAttribPointervRobustANGLE"] = (void *)GL_GetVertexAttribPointervRobustANGLE;
    hookMap["glReadPixelsRobustANGLE"]              = (void *)GL_ReadPixelsRobustANGLE;
    hookMap["glTexImage2DRobustANGLE"]              = (void *)GL_TexImage2DRobustANGLE;
    hookMap["glTexParameterfvRobustANGLE"]          = (void *)GL_TexParameterfvRobustANGLE;
    hookMap["glTexParameterivRobustANGLE"]          = (void *)GL_TexParameterivRobustANGLE;
    hookMap["glTexSubImage2DRobustANGLE"]           = (void *)GL_TexSubImage2DRobustANGLE;
    hookMap["glTexImage3DRobustANGLE"]              = (void *)GL_TexImage3DRobustANGLE;
    hookMap["glTexSubImage3DRobustANGLE"]           = (void *)GL_TexSubImage3DRobustANGLE;
    hookMap["glCompressedTexImage2DRobustANGLE"]    = (void *)GL_CompressedTexImage2DRobustANGLE;
    hookMap["glCompressedTexSubImage2DRobustANGLE"] = (void *)GL_CompressedTexSubImage2DRobustANGLE;
    hookMap["glCompressedTexImage3DRobustANGLE"]    = (void *)GL_CompressedTexImage3DRobustANGLE;
    hookMap["glCompressedTexSubImage3DRobustANGLE"] = (void *)GL_CompressedTexSubImage3DRobustANGLE;
    hookMap["glGetQueryivRobustANGLE"]              = (void *)GL_GetQueryivRobustANGLE;
    hookMap["glGetQueryObjectuivRobustANGLE"]       = (void *)GL_GetQueryObjectuivRobustANGLE;
    hookMap["glGetBufferPointervRobustANGLE"]       = (void *)GL_GetBufferPointervRobustANGLE;
    hookMap["glGetIntegeri_vRobustANGLE"]           = (void *)GL_GetIntegeri_vRobustANGLE;
    hookMap["glGetInternalformativRobustANGLE"]     = (void *)GL_GetInternalformativRobustANGLE;
    hookMap["glGetVertexAttribIivRobustANGLE"]      = (void *)GL_GetVertexAttribIivRobustANGLE;
    hookMap["glGetVertexAttribIuivRobustANGLE"]     = (void *)GL_GetVertexAttribIuivRobustANGLE;
    hookMap["glGetUniformuivRobustANGLE"]           = (void *)GL_GetUniformuivRobustANGLE;
    hookMap["glGetActiveUniformBlockivRobustANGLE"] = (void *)GL_GetActiveUniformBlockivRobustANGLE;
    hookMap["glGetInteger64vRobustANGLE"]           = (void *)GL_GetInteger64vRobustANGLE;
    hookMap["glGetInteger64i_vRobustANGLE"]         = (void *)GL_GetInteger64i_vRobustANGLE;
    hookMap["glGetBufferParameteri64vRobustANGLE"]  = (void *)GL_GetBufferParameteri64vRobustANGLE;
    hookMap["glSamplerParameterivRobustANGLE"]      = (void *)GL_SamplerParameterivRobustANGLE;
    hookMap["glSamplerParameterfvRobustANGLE"]      = (void *)GL_SamplerParameterfvRobustANGLE;
    hookMap["glGetSamplerParameterivRobustANGLE"]   = (void *)GL_GetSamplerParameterivRobustANGLE;
    hookMap["glGetSamplerParameterfvRobustANGLE"]   = (void *)GL_GetSamplerParameterfvRobustANGLE;
    hookMap["glGetFramebufferParameterivRobustANGLE"] =
        (void *)GL_GetFramebufferParameterivRobustANGLE;
    hookMap["glGetProgramInterfaceivRobustANGLE"]   = (void *)GL_GetProgramInterfaceivRobustANGLE;
    hookMap["glGetBooleani_vRobustANGLE"]           = (void *)GL_GetBooleani_vRobustANGLE;
    hookMap["glGetMultisamplefvRobustANGLE"]        = (void *)GL_GetMultisamplefvRobustANGLE;
    hookMap["glGetTexLevelParameterivRobustANGLE"]  = (void *)GL_GetTexLevelParameterivRobustANGLE;
    hookMap["glGetTexLevelParameterfvRobustANGLE"]  = (void *)GL_GetTexLevelParameterfvRobustANGLE;
    hookMap["glGetPointervRobustANGLERobustANGLE"]  = (void *)GL_GetPointervRobustANGLERobustANGLE;
    hookMap["glReadnPixelsRobustANGLE"]             = (void *)GL_ReadnPixelsRobustANGLE;
    hookMap["glGetnUniformfvRobustANGLE"]           = (void *)GL_GetnUniformfvRobustANGLE;
    hookMap["glGetnUniformivRobustANGLE"]           = (void *)GL_GetnUniformivRobustANGLE;
    hookMap["glGetnUniformuivRobustANGLE"]          = (void *)GL_GetnUniformuivRobustANGLE;
    hookMap["glTexParameterIivRobustANGLE"]         = (void *)GL_TexParameterIivRobustANGLE;
    hookMap["glTexParameterIuivRobustANGLE"]        = (void *)GL_TexParameterIuivRobustANGLE;
    hookMap["glGetTexParameterIivRobustANGLE"]      = (void *)GL_GetTexParameterIivRobustANGLE;
    hookMap["glGetTexParameterIuivRobustANGLE"]     = (void *)GL_GetTexParameterIuivRobustANGLE;
    hookMap["glSamplerParameterIivRobustANGLE"]     = (void *)GL_SamplerParameterIivRobustANGLE;
    hookMap["glSamplerParameterIuivRobustANGLE"]    = (void *)GL_SamplerParameterIuivRobustANGLE;
    hookMap["glGetSamplerParameterIivRobustANGLE"]  = (void *)GL_GetSamplerParameterIivRobustANGLE;
    hookMap["glGetSamplerParameterIuivRobustANGLE"] = (void *)GL_GetSamplerParameterIuivRobustANGLE;
    hookMap["glGetQueryObjectivRobustANGLE"]        = (void *)GL_GetQueryObjectivRobustANGLE;
    hookMap["glGetQueryObjecti64vRobustANGLE"]      = (void *)GL_GetQueryObjecti64vRobustANGLE;
    hookMap["glGetQueryObjectui64vRobustANGLE"]     = (void *)GL_GetQueryObjectui64vRobustANGLE;
    hookMap["glImportSemaphoreZirconHandleANGLE"]   = (void *)GL_ImportSemaphoreZirconHandleANGLE;
    hookMap["glFramebufferMemorylessPixelLocalStorageANGLE"] =
        (void *)GL_FramebufferMemorylessPixelLocalStorageANGLE;
    hookMap["glFramebufferTexturePixelLocalStorageANGLE"] =
        (void *)GL_FramebufferTexturePixelLocalStorageANGLE;
    hookMap["glBeginPixelLocalStorageANGLE"]        = (void *)GL_BeginPixelLocalStorageANGLE;
    hookMap["glEndPixelLocalStorageANGLE"]          = (void *)GL_EndPixelLocalStorageANGLE;
    hookMap["glPixelLocalStorageBarrierANGLE"]      = (void *)GL_PixelLocalStorageBarrierANGLE;
    hookMap["glTexImage2DExternalANGLE"]            = (void *)GL_TexImage2DExternalANGLE;
    hookMap["glInvalidateTextureANGLE"]             = (void *)GL_InvalidateTextureANGLE;
    hookMap["glTexStorage2DMultisampleANGLE"]       = (void *)GL_TexStorage2DMultisampleANGLE;
    hookMap["glGetMultisamplefvANGLE"]              = (void *)GL_GetMultisamplefvANGLE;
    hookMap["glSampleMaskiANGLE"]                   = (void *)GL_SampleMaskiANGLE;
    hookMap["glGetTranslatedShaderSourceANGLE"]     = (void *)GL_GetTranslatedShaderSourceANGLE;
    hookMap["glAcquireTexturesANGLE"]               = (void *)GL_AcquireTexturesANGLE;
    hookMap["glReleaseTexturesANGLE"]               = (void *)GL_ReleaseTexturesANGLE;
    hookMap["glBindUniformLocationCHROMIUM"]        = (void *)GL_BindUniformLocationCHROMIUM;
    hookMap["glCompressedCopyTextureCHROMIUM"]      = (void *)GL_CompressedCopyTextureCHROMIUM;
    hookMap["glCopyTextureCHROMIUM"]                = (void *)GL_CopyTextureCHROMIUM;
    hookMap["glCopySubTextureCHROMIUM"]             = (void *)GL_CopySubTextureCHROMIUM;
    hookMap["glCoverageModulationCHROMIUM"]         = (void *)GL_CoverageModulationCHROMIUM;
    hookMap["glLoseContextCHROMIUM"]                = (void *)GL_LoseContextCHROMIUM;
    hookMap["glEGLImageTargetTexStorageEXT"]        = (void *)GL_EGLImageTargetTexStorageEXT;
    hookMap["glEGLImageTargetTextureStorageEXT"]    = (void *)GL_EGLImageTargetTextureStorageEXT;
    hookMap["glDrawArraysInstancedBaseInstanceEXT"] = (void *)GL_DrawArraysInstancedBaseInstanceEXT;
    hookMap["glDrawElementsInstancedBaseInstanceEXT"] =
        (void *)GL_DrawElementsInstancedBaseInstanceEXT;
    hookMap["glDrawElementsInstancedBaseVertexBaseInstanceEXT"] =
        (void *)GL_DrawElementsInstancedBaseVertexBaseInstanceEXT;
    hookMap["glBindFragDataLocationEXT"]            = (void *)GL_BindFragDataLocationEXT;
    hookMap["glBindFragDataLocationIndexedEXT"]     = (void *)GL_BindFragDataLocationIndexedEXT;
    hookMap["glGetFragDataIndexEXT"]                = (void *)GL_GetFragDataIndexEXT;
    hookMap["glGetProgramResourceLocationIndexEXT"] = (void *)GL_GetProgramResourceLocationIndexEXT;
    hookMap["glBufferStorageEXT"]                   = (void *)GL_BufferStorageEXT;
    hookMap["glClipControlEXT"]                     = (void *)GL_ClipControlEXT;
    hookMap["glCopyImageSubDataEXT"]                = (void *)GL_CopyImageSubDataEXT;
    hookMap["glGetObjectLabelEXT"]                  = (void *)GL_GetObjectLabelEXT;
    hookMap["glLabelObjectEXT"]                     = (void *)GL_LabelObjectEXT;
    hookMap["glInsertEventMarkerEXT"]               = (void *)GL_InsertEventMarkerEXT;
    hookMap["glPopGroupMarkerEXT"]                  = (void *)GL_PopGroupMarkerEXT;
    hookMap["glPushGroupMarkerEXT"]                 = (void *)GL_PushGroupMarkerEXT;
    hookMap["glDiscardFramebufferEXT"]              = (void *)GL_DiscardFramebufferEXT;
    hookMap["glBeginQueryEXT"]                      = (void *)GL_BeginQueryEXT;
    hookMap["glDeleteQueriesEXT"]                   = (void *)GL_DeleteQueriesEXT;
    hookMap["glEndQueryEXT"]                        = (void *)GL_EndQueryEXT;
    hookMap["glGenQueriesEXT"]                      = (void *)GL_GenQueriesEXT;
    hookMap["glGetInteger64vEXT"]                   = (void *)GL_GetInteger64vEXT;
    hookMap["glGetQueryObjecti64vEXT"]              = (void *)GL_GetQueryObjecti64vEXT;
    hookMap["glGetQueryObjectivEXT"]                = (void *)GL_GetQueryObjectivEXT;
    hookMap["glGetQueryObjectui64vEXT"]             = (void *)GL_GetQueryObjectui64vEXT;
    hookMap["glGetQueryObjectuivEXT"]               = (void *)GL_GetQueryObjectuivEXT;
    hookMap["glGetQueryivEXT"]                      = (void *)GL_GetQueryivEXT;
    hookMap["glIsQueryEXT"]                         = (void *)GL_IsQueryEXT;
    hookMap["glQueryCounterEXT"]                    = (void *)GL_QueryCounterEXT;
    hookMap["glDrawBuffersEXT"]                     = (void *)GL_DrawBuffersEXT;
    hookMap["glBlendEquationSeparateiEXT"]          = (void *)GL_BlendEquationSeparateiEXT;
    hookMap["glBlendEquationiEXT"]                  = (void *)GL_BlendEquationiEXT;
    hookMap["glBlendFuncSeparateiEXT"]              = (void *)GL_BlendFuncSeparateiEXT;
    hookMap["glBlendFunciEXT"]                      = (void *)GL_BlendFunciEXT;
    hookMap["glColorMaskiEXT"]                      = (void *)GL_ColorMaskiEXT;
    hookMap["glDisableiEXT"]                        = (void *)GL_DisableiEXT;
    hookMap["glEnableiEXT"]                         = (void *)GL_EnableiEXT;
    hookMap["glIsEnablediEXT"]                      = (void *)GL_IsEnablediEXT;
    hookMap["glDrawElementsBaseVertexEXT"]          = (void *)GL_DrawElementsBaseVertexEXT;
    hookMap["glDrawElementsInstancedBaseVertexEXT"] = (void *)GL_DrawElementsInstancedBaseVertexEXT;
    hookMap["glDrawRangeElementsBaseVertexEXT"]     = (void *)GL_DrawRangeElementsBaseVertexEXT;
    hookMap["glMultiDrawElementsBaseVertexEXT"]     = (void *)GL_MultiDrawElementsBaseVertexEXT;
    hookMap["glBufferStorageExternalEXT"]           = (void *)GL_BufferStorageExternalEXT;
    hookMap["glNamedBufferStorageExternalEXT"]      = (void *)GL_NamedBufferStorageExternalEXT;
    hookMap["glFramebufferTextureEXT"]              = (void *)GL_FramebufferTextureEXT;
    hookMap["glDrawArraysInstancedEXT"]             = (void *)GL_DrawArraysInstancedEXT;
    hookMap["glDrawElementsInstancedEXT"]           = (void *)GL_DrawElementsInstancedEXT;
    hookMap["glVertexAttribDivisorEXT"]             = (void *)GL_VertexAttribDivisorEXT;
    hookMap["glFlushMappedBufferRangeEXT"]          = (void *)GL_FlushMappedBufferRangeEXT;
    hookMap["glMapBufferRangeEXT"]                  = (void *)GL_MapBufferRangeEXT;
    hookMap["glBufferStorageMemEXT"]                = (void *)GL_BufferStorageMemEXT;
    hookMap["glCreateMemoryObjectsEXT"]             = (void *)GL_CreateMemoryObjectsEXT;
    hookMap["glDeleteMemoryObjectsEXT"]             = (void *)GL_DeleteMemoryObjectsEXT;
    hookMap["glGetMemoryObjectParameterivEXT"]      = (void *)GL_GetMemoryObjectParameterivEXT;
    hookMap["glGetUnsignedBytevEXT"]                = (void *)GL_GetUnsignedBytevEXT;
    hookMap["glGetUnsignedBytei_vEXT"]              = (void *)GL_GetUnsignedBytei_vEXT;
    hookMap["glIsMemoryObjectEXT"]                  = (void *)GL_IsMemoryObjectEXT;
    hookMap["glMemoryObjectParameterivEXT"]         = (void *)GL_MemoryObjectParameterivEXT;
    hookMap["glTexStorageMem2DEXT"]                 = (void *)GL_TexStorageMem2DEXT;
    hookMap["glTexStorageMem2DMultisampleEXT"]      = (void *)GL_TexStorageMem2DMultisampleEXT;
    hookMap["glTexStorageMem3DEXT"]                 = (void *)GL_TexStorageMem3DEXT;
    hookMap["glTexStorageMem3DMultisampleEXT"]      = (void *)GL_TexStorageMem3DMultisampleEXT;
    hookMap["glImportMemoryFdEXT"]                  = (void *)GL_ImportMemoryFdEXT;
    hookMap["glMultiDrawArraysIndirectEXT"]         = (void *)GL_MultiDrawArraysIndirectEXT;
    hookMap["glMultiDrawElementsIndirectEXT"]       = (void *)GL_MultiDrawElementsIndirectEXT;
    hookMap["glFramebufferTexture2DMultisampleEXT"] = (void *)GL_FramebufferTexture2DMultisampleEXT;
    hookMap["glRenderbufferStorageMultisampleEXT"]  = (void *)GL_RenderbufferStorageMultisampleEXT;
    hookMap["glPrimitiveBoundingBoxEXT"]            = (void *)GL_PrimitiveBoundingBoxEXT;
    hookMap["glGetGraphicsResetStatusEXT"]          = (void *)GL_GetGraphicsResetStatusEXT;
    hookMap["glGetnUniformfvEXT"]                   = (void *)GL_GetnUniformfvEXT;
    hookMap["glGetnUniformivEXT"]                   = (void *)GL_GetnUniformivEXT;
    hookMap["glReadnPixelsEXT"]                     = (void *)GL_ReadnPixelsEXT;
    hookMap["glDeleteSemaphoresEXT"]                = (void *)GL_DeleteSemaphoresEXT;
    hookMap["glGenSemaphoresEXT"]                   = (void *)GL_GenSemaphoresEXT;
    hookMap["glGetSemaphoreParameterui64vEXT"]      = (void *)GL_GetSemaphoreParameterui64vEXT;
    hookMap["glIsSemaphoreEXT"]                     = (void *)GL_IsSemaphoreEXT;
    hookMap["glSemaphoreParameterui64vEXT"]         = (void *)GL_SemaphoreParameterui64vEXT;
    hookMap["glSignalSemaphoreEXT"]                 = (void *)GL_SignalSemaphoreEXT;
    hookMap["glWaitSemaphoreEXT"]                   = (void *)GL_WaitSemaphoreEXT;
    hookMap["glImportSemaphoreFdEXT"]               = (void *)GL_ImportSemaphoreFdEXT;
    hookMap["glActiveShaderProgramEXT"]             = (void *)GL_ActiveShaderProgramEXT;
    hookMap["glBindProgramPipelineEXT"]             = (void *)GL_BindProgramPipelineEXT;
    hookMap["glCreateShaderProgramvEXT"]            = (void *)GL_CreateShaderProgramvEXT;
    hookMap["glDeleteProgramPipelinesEXT"]          = (void *)GL_DeleteProgramPipelinesEXT;
    hookMap["glGenProgramPipelinesEXT"]             = (void *)GL_GenProgramPipelinesEXT;
    hookMap["glGetProgramPipelineInfoLogEXT"]       = (void *)GL_GetProgramPipelineInfoLogEXT;
    hookMap["glGetProgramPipelineivEXT"]            = (void *)GL_GetProgramPipelineivEXT;
    hookMap["glIsProgramPipelineEXT"]               = (void *)GL_IsProgramPipelineEXT;
    hookMap["glProgramParameteriEXT"]               = (void *)GL_ProgramParameteriEXT;
    hookMap["glProgramUniform1fEXT"]                = (void *)GL_ProgramUniform1fEXT;
    hookMap["glProgramUniform1fvEXT"]               = (void *)GL_ProgramUniform1fvEXT;
    hookMap["glProgramUniform1iEXT"]                = (void *)GL_ProgramUniform1iEXT;
    hookMap["glProgramUniform1ivEXT"]               = (void *)GL_ProgramUniform1ivEXT;
    hookMap["glProgramUniform1uiEXT"]               = (void *)GL_ProgramUniform1uiEXT;
    hookMap["glProgramUniform1uivEXT"]              = (void *)GL_ProgramUniform1uivEXT;
    hookMap["glProgramUniform2fEXT"]                = (void *)GL_ProgramUniform2fEXT;
    hookMap["glProgramUniform2fvEXT"]               = (void *)GL_ProgramUniform2fvEXT;
    hookMap["glProgramUniform2iEXT"]                = (void *)GL_ProgramUniform2iEXT;
    hookMap["glProgramUniform2ivEXT"]               = (void *)GL_ProgramUniform2ivEXT;
    hookMap["glProgramUniform2uiEXT"]               = (void *)GL_ProgramUniform2uiEXT;
    hookMap["glProgramUniform2uivEXT"]              = (void *)GL_ProgramUniform2uivEXT;
    hookMap["glProgramUniform3fEXT"]                = (void *)GL_ProgramUniform3fEXT;
    hookMap["glProgramUniform3fvEXT"]               = (void *)GL_ProgramUniform3fvEXT;
    hookMap["glProgramUniform3iEXT"]                = (void *)GL_ProgramUniform3iEXT;
    hookMap["glProgramUniform3ivEXT"]               = (void *)GL_ProgramUniform3ivEXT;
    hookMap["glProgramUniform3uiEXT"]               = (void *)GL_ProgramUniform3uiEXT;
    hookMap["glProgramUniform3uivEXT"]              = (void *)GL_ProgramUniform3uivEXT;
    hookMap["glProgramUniform4fEXT"]                = (void *)GL_ProgramUniform4fEXT;
    hookMap["glProgramUniform4fvEXT"]               = (void *)GL_ProgramUniform4fvEXT;
    hookMap["glProgramUniform4iEXT"]                = (void *)GL_ProgramUniform4iEXT;
    hookMap["glProgramUniform4ivEXT"]               = (void *)GL_ProgramUniform4ivEXT;
    hookMap["glProgramUniform4uiEXT"]               = (void *)GL_ProgramUniform4uiEXT;
    hookMap["glProgramUniform4uivEXT"]              = (void *)GL_ProgramUniform4uivEXT;
    hookMap["glProgramUniformMatrix2fvEXT"]         = (void *)GL_ProgramUniformMatrix2fvEXT;
    hookMap["glProgramUniformMatrix2x3fvEXT"]       = (void *)GL_ProgramUniformMatrix2x3fvEXT;
    hookMap["glProgramUniformMatrix2x4fvEXT"]       = (void *)GL_ProgramUniformMatrix2x4fvEXT;
    hookMap["glProgramUniformMatrix3fvEXT"]         = (void *)GL_ProgramUniformMatrix3fvEXT;
    hookMap["glProgramUniformMatrix3x2fvEXT"]       = (void *)GL_ProgramUniformMatrix3x2fvEXT;
    hookMap["glProgramUniformMatrix3x4fvEXT"]       = (void *)GL_ProgramUniformMatrix3x4fvEXT;
    hookMap["glProgramUniformMatrix4fvEXT"]         = (void *)GL_ProgramUniformMatrix4fvEXT;
    hookMap["glProgramUniformMatrix4x2fvEXT"]       = (void *)GL_ProgramUniformMatrix4x2fvEXT;
    hookMap["glProgramUniformMatrix4x3fvEXT"]       = (void *)GL_ProgramUniformMatrix4x3fvEXT;
    hookMap["glUseProgramStagesEXT"]                = (void *)GL_UseProgramStagesEXT;
    hookMap["glValidateProgramPipelineEXT"]         = (void *)GL_ValidateProgramPipelineEXT;
    hookMap["glFramebufferFetchBarrierEXT"]         = (void *)GL_FramebufferFetchBarrierEXT;
    hookMap["glPatchParameteriEXT"]                 = (void *)GL_PatchParameteriEXT;
    hookMap["glGetSamplerParameterIivEXT"]          = (void *)GL_GetSamplerParameterIivEXT;
    hookMap["glGetSamplerParameterIuivEXT"]         = (void *)GL_GetSamplerParameterIuivEXT;
    hookMap["glGetTexParameterIivEXT"]              = (void *)GL_GetTexParameterIivEXT;
    hookMap["glGetTexParameterIuivEXT"]             = (void *)GL_GetTexParameterIuivEXT;
    hookMap["glSamplerParameterIivEXT"]             = (void *)GL_SamplerParameterIivEXT;
    hookMap["glSamplerParameterIuivEXT"]            = (void *)GL_SamplerParameterIuivEXT;
    hookMap["glTexParameterIivEXT"]                 = (void *)GL_TexParameterIivEXT;
    hookMap["glTexParameterIuivEXT"]                = (void *)GL_TexParameterIuivEXT;
    hookMap["glTexBufferEXT"]                       = (void *)GL_TexBufferEXT;
    hookMap["glTexBufferRangeEXT"]                  = (void *)GL_TexBufferRangeEXT;
    hookMap["glTexStorage1DEXT"]                    = (void *)GL_TexStorage1DEXT;
    hookMap["glTexStorage2DEXT"]                    = (void *)GL_TexStorage2DEXT;
    hookMap["glTexStorage3DEXT"]                    = (void *)GL_TexStorage3DEXT;
    hookMap["glBlendBarrierKHR"]                    = (void *)GL_BlendBarrierKHR;
    hookMap["glDebugMessageCallbackKHR"]            = (void *)GL_DebugMessageCallbackKHR;
    hookMap["glDebugMessageControlKHR"]             = (void *)GL_DebugMessageControlKHR;
    hookMap["glDebugMessageInsertKHR"]              = (void *)GL_DebugMessageInsertKHR;
    hookMap["glGetDebugMessageLogKHR"]              = (void *)GL_GetDebugMessageLogKHR;
    hookMap["glGetObjectLabelKHR"]                  = (void *)GL_GetObjectLabelKHR;
    hookMap["glGetObjectPtrLabelKHR"]               = (void *)GL_GetObjectPtrLabelKHR;
    hookMap["glGetPointervKHR"]                     = (void *)GL_GetPointervKHR;
    hookMap["glObjectLabelKHR"]                     = (void *)GL_ObjectLabelKHR;
    hookMap["glObjectPtrLabelKHR"]                  = (void *)GL_ObjectPtrLabelKHR;
    hookMap["glPopDebugGroupKHR"]                   = (void *)GL_PopDebugGroupKHR;
    hookMap["glPushDebugGroupKHR"]                  = (void *)GL_PushDebugGroupKHR;
    hookMap["glMaxShaderCompilerThreadsKHR"]        = (void *)GL_MaxShaderCompilerThreadsKHR;
    hookMap["glFramebufferParameteriMESA"]          = (void *)GL_FramebufferParameteriMESA;
    hookMap["glGetFramebufferParameterivMESA"]      = (void *)GL_GetFramebufferParameterivMESA;
    hookMap["glDeleteFencesNV"]                     = (void *)GL_DeleteFencesNV;
    hookMap["glFinishFenceNV"]                      = (void *)GL_FinishFenceNV;
    hookMap["glGenFencesNV"]                        = (void *)GL_GenFencesNV;
    hookMap["glGetFenceivNV"]                       = (void *)GL_GetFenceivNV;
    hookMap["glIsFenceNV"]                          = (void *)GL_IsFenceNV;
    hookMap["glSetFenceNV"]                         = (void *)GL_SetFenceNV;
    hookMap["glTestFenceNV"]                        = (void *)GL_TestFenceNV;
    hookMap["glBlitFramebufferNV"]                  = (void *)GL_BlitFramebufferNV;
    hookMap["glEGLImageTargetRenderbufferStorageOES"] =
        (void *)GL_EGLImageTargetRenderbufferStorageOES;
    hookMap["glEGLImageTargetTexture2DOES"]         = (void *)GL_EGLImageTargetTexture2DOES;
    hookMap["glCopyImageSubDataOES"]                = (void *)GL_CopyImageSubDataOES;
    hookMap["glBlendEquationSeparateiOES"]          = (void *)GL_BlendEquationSeparateiOES;
    hookMap["glBlendEquationiOES"]                  = (void *)GL_BlendEquationiOES;
    hookMap["glBlendFuncSeparateiOES"]              = (void *)GL_BlendFuncSeparateiOES;
    hookMap["glBlendFunciOES"]                      = (void *)GL_BlendFunciOES;
    hookMap["glColorMaskiOES"]                      = (void *)GL_ColorMaskiOES;
    hookMap["glDisableiOES"]                        = (void *)GL_DisableiOES;
    hookMap["glEnableiOES"]                         = (void *)GL_EnableiOES;
    hookMap["glIsEnablediOES"]                      = (void *)GL_IsEnablediOES;
    hookMap["glDrawElementsBaseVertexOES"]          = (void *)GL_DrawElementsBaseVertexOES;
    hookMap["glDrawElementsInstancedBaseVertexOES"] = (void *)GL_DrawElementsInstancedBaseVertexOES;
    hookMap["glDrawRangeElementsBaseVertexOES"]     = (void *)GL_DrawRangeElementsBaseVertexOES;
    hookMap["glDrawTexfOES"]                        = (void *)GL_DrawTexfOES;
    hookMap["glDrawTexfvOES"]                       = (void *)GL_DrawTexfvOES;
    hookMap["glDrawTexiOES"]                        = (void *)GL_DrawTexiOES;
    hookMap["glDrawTexivOES"]                       = (void *)GL_DrawTexivOES;
    hookMap["glDrawTexsOES"]                        = (void *)GL_DrawTexsOES;
    hookMap["glDrawTexsvOES"]                       = (void *)GL_DrawTexsvOES;
    hookMap["glDrawTexxOES"]                        = (void *)GL_DrawTexxOES;
    hookMap["glDrawTexxvOES"]                       = (void *)GL_DrawTexxvOES;
    hookMap["glBindFramebufferOES"]                 = (void *)GL_BindFramebufferOES;
    hookMap["glBindRenderbufferOES"]                = (void *)GL_BindRenderbufferOES;
    hookMap["glCheckFramebufferStatusOES"]          = (void *)GL_CheckFramebufferStatusOES;
    hookMap["glDeleteFramebuffersOES"]              = (void *)GL_DeleteFramebuffersOES;
    hookMap["glDeleteRenderbuffersOES"]             = (void *)GL_DeleteRenderbuffersOES;
    hookMap["glFramebufferRenderbufferOES"]         = (void *)GL_FramebufferRenderbufferOES;
    hookMap["glFramebufferTexture2DOES"]            = (void *)GL_FramebufferTexture2DOES;
    hookMap["glGenFramebuffersOES"]                 = (void *)GL_GenFramebuffersOES;
    hookMap["glGenRenderbuffersOES"]                = (void *)GL_GenRenderbuffersOES;
    hookMap["glGenerateMipmapOES"]                  = (void *)GL_GenerateMipmapOES;
    hookMap["glGetFramebufferAttachmentParameterivOES"] =
        (void *)GL_GetFramebufferAttachmentParameterivOES;
    hookMap["glGetRenderbufferParameterivOES"]     = (void *)GL_GetRenderbufferParameterivOES;
    hookMap["glIsFramebufferOES"]                  = (void *)GL_IsFramebufferOES;
    hookMap["glIsRenderbufferOES"]                 = (void *)GL_IsRenderbufferOES;
    hookMap["glRenderbufferStorageOES"]            = (void *)GL_RenderbufferStorageOES;
    hookMap["glFramebufferTextureOES"]             = (void *)GL_FramebufferTextureOES;
    hookMap["glGetProgramBinaryOES"]               = (void *)GL_GetProgramBinaryOES;
    hookMap["glProgramBinaryOES"]                  = (void *)GL_ProgramBinaryOES;
    hookMap["glGetBufferPointervOES"]              = (void *)GL_GetBufferPointervOES;
    hookMap["glMapBufferOES"]                      = (void *)GL_MapBufferOES;
    hookMap["glUnmapBufferOES"]                    = (void *)GL_UnmapBufferOES;
    hookMap["glCurrentPaletteMatrixOES"]           = (void *)GL_CurrentPaletteMatrixOES;
    hookMap["glLoadPaletteFromModelViewMatrixOES"] = (void *)GL_LoadPaletteFromModelViewMatrixOES;
    hookMap["glMatrixIndexPointerOES"]             = (void *)GL_MatrixIndexPointerOES;
    hookMap["glWeightPointerOES"]                  = (void *)GL_WeightPointerOES;
    hookMap["glPointSizePointerOES"]               = (void *)GL_PointSizePointerOES;
    hookMap["glPrimitiveBoundingBoxOES"]           = (void *)GL_PrimitiveBoundingBoxOES;
    hookMap["glQueryMatrixxOES"]                   = (void *)GL_QueryMatrixxOES;
    hookMap["glMinSampleShadingOES"]               = (void *)GL_MinSampleShadingOES;
    hookMap["glCompressedTexImage3DOES"]           = (void *)GL_CompressedTexImage3DOES;
    hookMap["glCompressedTexSubImage3DOES"]        = (void *)GL_CompressedTexSubImage3DOES;
    hookMap["glCopyTexSubImage3DOES"]              = (void *)GL_CopyTexSubImage3DOES;
    hookMap["glFramebufferTexture3DOES"]           = (void *)GL_FramebufferTexture3DOES;
    hookMap["glTexImage3DOES"]                     = (void *)GL_TexImage3DOES;
    hookMap["glTexSubImage3DOES"]                  = (void *)GL_TexSubImage3DOES;
    hookMap["glGetSamplerParameterIivOES"]         = (void *)GL_GetSamplerParameterIivOES;
    hookMap["glGetSamplerParameterIuivOES"]        = (void *)GL_GetSamplerParameterIuivOES;
    hookMap["glGetTexParameterIivOES"]             = (void *)GL_GetTexParameterIivOES;
    hookMap["glGetTexParameterIuivOES"]            = (void *)GL_GetTexParameterIuivOES;
    hookMap["glSamplerParameterIivOES"]            = (void *)GL_SamplerParameterIivOES;
    hookMap["glSamplerParameterIuivOES"]           = (void *)GL_SamplerParameterIuivOES;
    hookMap["glTexParameterIivOES"]                = (void *)GL_TexParameterIivOES;
    hookMap["glTexParameterIuivOES"]               = (void *)GL_TexParameterIuivOES;
    hookMap["glTexBufferOES"]                      = (void *)GL_TexBufferOES;
    hookMap["glTexBufferRangeOES"]                 = (void *)GL_TexBufferRangeOES;
    hookMap["glGetTexGenfvOES"]                    = (void *)GL_GetTexGenfvOES;
    hookMap["glGetTexGenivOES"]                    = (void *)GL_GetTexGenivOES;
    hookMap["glGetTexGenxvOES"]                    = (void *)GL_GetTexGenxvOES;
    hookMap["glTexGenfOES"]                        = (void *)GL_TexGenfOES;
    hookMap["glTexGenfvOES"]                       = (void *)GL_TexGenfvOES;
    hookMap["glTexGeniOES"]                        = (void *)GL_TexGeniOES;
    hookMap["glTexGenivOES"]                       = (void *)GL_TexGenivOES;
    hookMap["glTexGenxOES"]                        = (void *)GL_TexGenxOES;
    hookMap["glTexGenxvOES"]                       = (void *)GL_TexGenxvOES;
    hookMap["glTexStorage3DMultisampleOES"]        = (void *)GL_TexStorage3DMultisampleOES;
    hookMap["glBindVertexArrayOES"]                = (void *)GL_BindVertexArrayOES;
    hookMap["glDeleteVertexArraysOES"]             = (void *)GL_DeleteVertexArraysOES;
    hookMap["glGenVertexArraysOES"]                = (void *)GL_GenVertexArraysOES;
    hookMap["glIsVertexArrayOES"]                  = (void *)GL_IsVertexArrayOES;
    hookMap["glFramebufferTextureMultiviewOVR"]    = (void *)GL_FramebufferTextureMultiviewOVR;
    hookMap["glShadingRateQCOM"]                   = (void *)GL_ShadingRateQCOM;
}

}  // namespace agi_layer
