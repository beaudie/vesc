// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_egl_autogen.cpp:
//   Layer functions for the OpenGL ES EGL entry points.

#include "libGLESv2/layer_entry_points_egl_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

EGLBoolean EGLAPIENTRY EGL_ChooseConfig(EGLDisplay dpy,
                                        const EGLint *attrib_list,
                                        EGLConfig *configs,
                                        EGLint config_size,
                                        EGLint *num_config)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglChooseConfig(dpy = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR
                 ", configs = 0x%016" PRIxPTR ", config_size = %d, num_config = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)attrib_list, (uintptr_t)configs, config_size,
                 (uintptr_t)num_config);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLChooseConfig), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglChooseConfig");
    //  Call down to the next layer
    void *entry                 = funcMap["eglChooseConfig"];
    PFNEGLCHOOSECONFIGPROC next = reinterpret_cast<PFNEGLCHOOSECONFIGPROC>(entry);
    EGLBoolean ret              = next(dpy, attrib_list, configs, config_size, num_config);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_CopyBuffers(EGLDisplay dpy,
                                       EGLSurface surface,
                                       EGLNativePixmapType target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCopyBuffers(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", target = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)target);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCopyBuffers), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCopyBuffers");
    //  Call down to the next layer
    void *entry                = funcMap["eglCopyBuffers"];
    PFNEGLCOPYBUFFERSPROC next = reinterpret_cast<PFNEGLCOPYBUFFERSPROC>(entry);
    EGLBoolean ret             = next(dpy, surface, target);

    g_pop_debug_group();
    return ret;
}

EGLContext EGLAPIENTRY EGL_CreateContext(EGLDisplay dpy,
                                         EGLConfig config,
                                         EGLContext share_context,
                                         const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateContext(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", share_context = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)share_context,
                 (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateContext), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateContext");
    //  Call down to the next layer
    void *entry                  = funcMap["eglCreateContext"];
    PFNEGLCREATECONTEXTPROC next = reinterpret_cast<PFNEGLCREATECONTEXTPROC>(entry);
    EGLContext ret               = next(dpy, config, share_context, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePbufferSurface(EGLDisplay dpy,
                                                EGLConfig config,
                                                const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreatePbufferSurface(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePbufferSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePbufferSurface");
    //  Call down to the next layer
    void *entry                         = funcMap["eglCreatePbufferSurface"];
    PFNEGLCREATEPBUFFERSURFACEPROC next = reinterpret_cast<PFNEGLCREATEPBUFFERSURFACEPROC>(entry);
    EGLSurface ret                      = next(dpy, config, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePixmapSurface(EGLDisplay dpy,
                                               EGLConfig config,
                                               EGLNativePixmapType pixmap,
                                               const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreatePixmapSurface(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", pixmap = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)pixmap, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePixmapSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePixmapSurface");
    //  Call down to the next layer
    void *entry                        = funcMap["eglCreatePixmapSurface"];
    PFNEGLCREATEPIXMAPSURFACEPROC next = reinterpret_cast<PFNEGLCREATEPIXMAPSURFACEPROC>(entry);
    EGLSurface ret                     = next(dpy, config, pixmap, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreateWindowSurface(EGLDisplay dpy,
                                               EGLConfig config,
                                               EGLNativeWindowType win,
                                               const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateWindowSurface(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", win = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)win, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateWindowSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateWindowSurface");
    //  Call down to the next layer
    void *entry                        = funcMap["eglCreateWindowSurface"];
    PFNEGLCREATEWINDOWSURFACEPROC next = reinterpret_cast<PFNEGLCREATEWINDOWSURFACEPROC>(entry);
    EGLSurface ret                     = next(dpy, config, win, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroyContext(EGLDisplay dpy, EGLContext ctx)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroyContext(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroyContext), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroyContext");
    //  Call down to the next layer
    void *entry                   = funcMap["eglDestroyContext"];
    PFNEGLDESTROYCONTEXTPROC next = reinterpret_cast<PFNEGLDESTROYCONTEXTPROC>(entry);
    EGLBoolean ret                = next(dpy, ctx);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroySurface(EGLDisplay dpy, EGLSurface surface)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroySurface(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroySurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroySurface");
    //  Call down to the next layer
    void *entry                   = funcMap["eglDestroySurface"];
    PFNEGLDESTROYSURFACEPROC next = reinterpret_cast<PFNEGLDESTROYSURFACEPROC>(entry);
    EGLBoolean ret                = next(dpy, surface);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetConfigAttrib(EGLDisplay dpy,
                                           EGLConfig config,
                                           EGLint attribute,
                                           EGLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetConfigAttrib(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetConfigAttrib), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetConfigAttrib");
    //  Call down to the next layer
    void *entry                    = funcMap["eglGetConfigAttrib"];
    PFNEGLGETCONFIGATTRIBPROC next = reinterpret_cast<PFNEGLGETCONFIGATTRIBPROC>(entry);
    EGLBoolean ret                 = next(dpy, config, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetConfigs(EGLDisplay dpy,
                                      EGLConfig *configs,
                                      EGLint config_size,
                                      EGLint *num_config)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetConfigs(dpy = 0x%016" PRIxPTR ", configs = 0x%016" PRIxPTR
                 ", config_size = %d, num_config = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)configs, config_size, (uintptr_t)num_config);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetConfigs), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetConfigs");
    //  Call down to the next layer
    void *entry               = funcMap["eglGetConfigs"];
    PFNEGLGETCONFIGSPROC next = reinterpret_cast<PFNEGLGETCONFIGSPROC>(entry);
    EGLBoolean ret            = next(dpy, configs, config_size, num_config);

    g_pop_debug_group();
    return ret;
}

EGLDisplay EGLAPIENTRY EGL_GetCurrentDisplay()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetCurrentDisplay()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetCurrentDisplay), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetCurrentDisplay");
    //  Call down to the next layer
    void *entry                      = funcMap["eglGetCurrentDisplay"];
    PFNEGLGETCURRENTDISPLAYPROC next = reinterpret_cast<PFNEGLGETCURRENTDISPLAYPROC>(entry);
    EGLDisplay ret                   = next();

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_GetCurrentSurface(EGLint readdraw)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetCurrentSurface(readdraw = %d)", readdraw);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetCurrentSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetCurrentSurface");
    //  Call down to the next layer
    void *entry                      = funcMap["eglGetCurrentSurface"];
    PFNEGLGETCURRENTSURFACEPROC next = reinterpret_cast<PFNEGLGETCURRENTSURFACEPROC>(entry);
    EGLSurface ret                   = next(readdraw);

    g_pop_debug_group();
    return ret;
}

EGLDisplay EGLAPIENTRY EGL_GetDisplay(EGLNativeDisplayType display_id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetDisplay(display_id = 0x%016" PRIxPTR ")",
                 (uintptr_t)display_id);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetDisplay), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetDisplay");
    //  Call down to the next layer
    void *entry               = funcMap["eglGetDisplay"];
    PFNEGLGETDISPLAYPROC next = reinterpret_cast<PFNEGLGETDISPLAYPROC>(entry);
    EGLDisplay ret            = next(display_id);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_GetError()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetError()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetError), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetError");
    //  Call down to the next layer
    void *entry             = funcMap["eglGetError"];
    PFNEGLGETERRORPROC next = reinterpret_cast<PFNEGLGETERRORPROC>(entry);
    EGLint ret              = next();

    g_pop_debug_group();
    return ret;
}

__eglMustCastToProperFunctionPointerType EGLAPIENTRY EGL_GetProcAddress(const char *procname)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetProcAddress(procname = 0x%016" PRIxPTR ")",
                 (uintptr_t)procname);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetProcAddress), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetProcAddress");
    //  Call down to the next layer
    void *entry                   = funcMap["eglGetProcAddress"];
    PFNEGLGETPROCADDRESSPROC next = reinterpret_cast<PFNEGLGETPROCADDRESSPROC>(entry);
    __eglMustCastToProperFunctionPointerType ret = next(procname);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_Initialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglInitialize(dpy = 0x%016" PRIxPTR ", major = 0x%016" PRIxPTR
                 ", minor = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)major, (uintptr_t)minor);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLInitialize), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglInitialize");
    //  Call down to the next layer
    void *entry               = funcMap["eglInitialize"];
    PFNEGLINITIALIZEPROC next = reinterpret_cast<PFNEGLINITIALIZEPROC>(entry);
    EGLBoolean ret            = next(dpy, major, minor);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_MakeCurrent(EGLDisplay dpy,
                                       EGLSurface draw,
                                       EGLSurface read,
                                       EGLContext ctx)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglMakeCurrent(dpy = 0x%016" PRIxPTR ", draw = 0x%016" PRIxPTR
                 ", read = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)draw, (uintptr_t)read, (uintptr_t)ctx);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLMakeCurrent), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglMakeCurrent");
    //  Call down to the next layer
    void *entry                = funcMap["eglMakeCurrent"];
    PFNEGLMAKECURRENTPROC next = reinterpret_cast<PFNEGLMAKECURRENTPROC>(entry);
    EGLBoolean ret             = next(dpy, draw, read, ctx);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryContext(EGLDisplay dpy,
                                        EGLContext ctx,
                                        EGLint attribute,
                                        EGLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryContext(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryContext), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryContext");
    //  Call down to the next layer
    void *entry                 = funcMap["eglQueryContext"];
    PFNEGLQUERYCONTEXTPROC next = reinterpret_cast<PFNEGLQUERYCONTEXTPROC>(entry);
    EGLBoolean ret              = next(dpy, ctx, attribute, value);

    g_pop_debug_group();
    return ret;
}

const char *EGLAPIENTRY EGL_QueryString(EGLDisplay dpy, EGLint name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglQueryString(dpy = 0x%016" PRIxPTR ", name = %d)",
                 (uintptr_t)dpy, name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryString), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryString");
    //  Call down to the next layer
    void *entry                = funcMap["eglQueryString"];
    PFNEGLQUERYSTRINGPROC next = reinterpret_cast<PFNEGLQUERYSTRINGPROC>(entry);
    const char *ret            = next(dpy, name);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QuerySurface(EGLDisplay dpy,
                                        EGLSurface surface,
                                        EGLint attribute,
                                        EGLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQuerySurface(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQuerySurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQuerySurface");
    //  Call down to the next layer
    void *entry                 = funcMap["eglQuerySurface"];
    PFNEGLQUERYSURFACEPROC next = reinterpret_cast<PFNEGLQUERYSURFACEPROC>(entry);
    EGLBoolean ret              = next(dpy, surface, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SwapBuffers(EGLDisplay dpy, EGLSurface surface)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSwapBuffers(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSwapBuffers), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSwapBuffers");
    //  Call down to the next layer
    void *entry                = funcMap["eglSwapBuffers"];
    PFNEGLSWAPBUFFERSPROC next = reinterpret_cast<PFNEGLSWAPBUFFERSPROC>(entry);
    EGLBoolean ret             = next(dpy, surface);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_Terminate(EGLDisplay dpy)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglTerminate(dpy = 0x%016" PRIxPTR ")", (uintptr_t)dpy);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLTerminate), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglTerminate");
    //  Call down to the next layer
    void *entry              = funcMap["eglTerminate"];
    PFNEGLTERMINATEPROC next = reinterpret_cast<PFNEGLTERMINATEPROC>(entry);
    EGLBoolean ret           = next(dpy);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_WaitGL()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglWaitGL()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLWaitGL), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglWaitGL");
    //  Call down to the next layer
    void *entry           = funcMap["eglWaitGL"];
    PFNEGLWAITGLPROC next = reinterpret_cast<PFNEGLWAITGLPROC>(entry);
    EGLBoolean ret        = next();

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_WaitNative(EGLint engine)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglWaitNative(engine = %d)", engine);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLWaitNative), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglWaitNative");
    //  Call down to the next layer
    void *entry               = funcMap["eglWaitNative"];
    PFNEGLWAITNATIVEPROC next = reinterpret_cast<PFNEGLWAITNATIVEPROC>(entry);
    EGLBoolean ret            = next(engine);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_BindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglBindTexImage(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", buffer = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, buffer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLBindTexImage), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglBindTexImage");
    //  Call down to the next layer
    void *entry                 = funcMap["eglBindTexImage"];
    PFNEGLBINDTEXIMAGEPROC next = reinterpret_cast<PFNEGLBINDTEXIMAGEPROC>(entry);
    EGLBoolean ret              = next(dpy, surface, buffer);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_ReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglReleaseTexImage(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", buffer = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, buffer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLReleaseTexImage), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglReleaseTexImage");
    //  Call down to the next layer
    void *entry                    = funcMap["eglReleaseTexImage"];
    PFNEGLRELEASETEXIMAGEPROC next = reinterpret_cast<PFNEGLRELEASETEXIMAGEPROC>(entry);
    EGLBoolean ret                 = next(dpy, surface, buffer);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SurfaceAttrib(EGLDisplay dpy,
                                         EGLSurface surface,
                                         EGLint attribute,
                                         EGLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSurfaceAttrib(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", attribute = %d, value = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, attribute, value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSurfaceAttrib), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSurfaceAttrib");
    //  Call down to the next layer
    void *entry                  = funcMap["eglSurfaceAttrib"];
    PFNEGLSURFACEATTRIBPROC next = reinterpret_cast<PFNEGLSURFACEATTRIBPROC>(entry);
    EGLBoolean ret               = next(dpy, surface, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SwapInterval(EGLDisplay dpy, EGLint interval)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglSwapInterval(dpy = 0x%016" PRIxPTR ", interval = %d)",
                 (uintptr_t)dpy, interval);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSwapInterval), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSwapInterval");
    //  Call down to the next layer
    void *entry                 = funcMap["eglSwapInterval"];
    PFNEGLSWAPINTERVALPROC next = reinterpret_cast<PFNEGLSWAPINTERVALPROC>(entry);
    EGLBoolean ret              = next(dpy, interval);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_BindAPI(EGLenum api)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglBindAPI(api = 0x%X)", api);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLBindAPI), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglBindAPI");
    //  Call down to the next layer
    void *entry            = funcMap["eglBindAPI"];
    PFNEGLBINDAPIPROC next = reinterpret_cast<PFNEGLBINDAPIPROC>(entry);
    EGLBoolean ret         = next(api);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePbufferFromClientBuffer(EGLDisplay dpy,
                                                         EGLenum buftype,
                                                         EGLClientBuffer buffer,
                                                         EGLConfig config,
                                                         const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreatePbufferFromClientBuffer(dpy = 0x%016" PRIxPTR
                 ", buftype = 0x%X, buffer = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, buftype, (uintptr_t)buffer, (uintptr_t)config,
                 (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePbufferFromClientBuffer), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePbufferFromClientBuffer");
    //  Call down to the next layer
    void *entry = funcMap["eglCreatePbufferFromClientBuffer"];
    PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC next =
        reinterpret_cast<PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC>(entry);
    EGLSurface ret = next(dpy, buftype, buffer, config, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLenum EGLAPIENTRY EGL_QueryAPI()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglQueryAPI()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryAPI), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryAPI");
    //  Call down to the next layer
    void *entry             = funcMap["eglQueryAPI"];
    PFNEGLQUERYAPIPROC next = reinterpret_cast<PFNEGLQUERYAPIPROC>(entry);
    EGLenum ret             = next();

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_ReleaseThread()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglReleaseThread()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLReleaseThread), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglReleaseThread");
    //  Call down to the next layer
    void *entry                  = funcMap["eglReleaseThread"];
    PFNEGLRELEASETHREADPROC next = reinterpret_cast<PFNEGLRELEASETHREADPROC>(entry);
    EGLBoolean ret               = next();

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_WaitClient()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglWaitClient()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLWaitClient), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglWaitClient");
    //  Call down to the next layer
    void *entry               = funcMap["eglWaitClient"];
    PFNEGLWAITCLIENTPROC next = reinterpret_cast<PFNEGLWAITCLIENTPROC>(entry);
    EGLBoolean ret            = next();

    g_pop_debug_group();
    return ret;
}

EGLContext EGLAPIENTRY EGL_GetCurrentContext()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetCurrentContext()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetCurrentContext), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetCurrentContext");
    //  Call down to the next layer
    void *entry                      = funcMap["eglGetCurrentContext"];
    PFNEGLGETCURRENTCONTEXTPROC next = reinterpret_cast<PFNEGLGETCURRENTCONTEXTPROC>(entry);
    EGLContext ret                   = next();

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_ClientWaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglClientWaitSync(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR
                 ", flags = %d, timeout = %llu)",
                 (uintptr_t)dpy, (uintptr_t)sync, flags, static_cast<unsigned long long>(timeout));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLClientWaitSync), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglClientWaitSync");
    //  Call down to the next layer
    void *entry                   = funcMap["eglClientWaitSync"];
    PFNEGLCLIENTWAITSYNCPROC next = reinterpret_cast<PFNEGLCLIENTWAITSYNCPROC>(entry);
    EGLint ret                    = next(dpy, sync, flags, timeout);

    g_pop_debug_group();
    return ret;
}

EGLImage EGLAPIENTRY EGL_CreateImage(EGLDisplay dpy,
                                     EGLContext ctx,
                                     EGLenum target,
                                     EGLClientBuffer buffer,
                                     const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateImage(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR
                 ", target = 0x%X, buffer = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx, target, (uintptr_t)buffer, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateImage), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateImage");
    //  Call down to the next layer
    void *entry                = funcMap["eglCreateImage"];
    PFNEGLCREATEIMAGEPROC next = reinterpret_cast<PFNEGLCREATEIMAGEPROC>(entry);
    EGLImage ret               = next(dpy, ctx, target, buffer, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePlatformPixmapSurface(EGLDisplay dpy,
                                                       EGLConfig config,
                                                       void *native_pixmap,
                                                       const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreatePlatformPixmapSurface(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", native_pixmap = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)native_pixmap,
                 (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePlatformPixmapSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePlatformPixmapSurface");
    //  Call down to the next layer
    void *entry = funcMap["eglCreatePlatformPixmapSurface"];
    PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC next =
        reinterpret_cast<PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC>(entry);
    EGLSurface ret = next(dpy, config, native_pixmap, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePlatformWindowSurface(EGLDisplay dpy,
                                                       EGLConfig config,
                                                       void *native_window,
                                                       const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreatePlatformWindowSurface(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
                 ", native_window = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)native_window,
                 (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePlatformWindowSurface), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePlatformWindowSurface");
    //  Call down to the next layer
    void *entry = funcMap["eglCreatePlatformWindowSurface"];
    PFNEGLCREATEPLATFORMWINDOWSURFACEPROC next =
        reinterpret_cast<PFNEGLCREATEPLATFORMWINDOWSURFACEPROC>(entry);
    EGLSurface ret = next(dpy, config, native_window, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSync EGLAPIENTRY EGL_CreateSync(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateSync(dpy = 0x%016" PRIxPTR ", type = 0x%X, attrib_list = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)dpy, type, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateSync), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateSync");
    //  Call down to the next layer
    void *entry               = funcMap["eglCreateSync"];
    PFNEGLCREATESYNCPROC next = reinterpret_cast<PFNEGLCREATESYNCPROC>(entry);
    EGLSync ret               = next(dpy, type, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroyImage(EGLDisplay dpy, EGLImage image)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroyImage(dpy = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)image);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroyImage), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroyImage");
    //  Call down to the next layer
    void *entry                 = funcMap["eglDestroyImage"];
    PFNEGLDESTROYIMAGEPROC next = reinterpret_cast<PFNEGLDESTROYIMAGEPROC>(entry);
    EGLBoolean ret              = next(dpy, image);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroySync(EGLDisplay dpy, EGLSync sync)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroySync(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)sync);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroySync), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroySync");
    //  Call down to the next layer
    void *entry                = funcMap["eglDestroySync"];
    PFNEGLDESTROYSYNCPROC next = reinterpret_cast<PFNEGLDESTROYSYNCPROC>(entry);
    EGLBoolean ret             = next(dpy, sync);

    g_pop_debug_group();
    return ret;
}

EGLDisplay EGLAPIENTRY EGL_GetPlatformDisplay(EGLenum platform,
                                              void *native_display,
                                              const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetPlatformDisplay(platform = 0x%X, native_display = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 platform, (uintptr_t)native_display, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetPlatformDisplay), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetPlatformDisplay");
    //  Call down to the next layer
    void *entry                       = funcMap["eglGetPlatformDisplay"];
    PFNEGLGETPLATFORMDISPLAYPROC next = reinterpret_cast<PFNEGLGETPLATFORMDISPLAYPROC>(entry);
    EGLDisplay ret                    = next(platform, native_display, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetSyncAttrib(EGLDisplay dpy,
                                         EGLSync sync,
                                         EGLint attribute,
                                         EGLAttrib *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetSyncAttrib(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)sync, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetSyncAttrib), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetSyncAttrib");
    //  Call down to the next layer
    void *entry                  = funcMap["eglGetSyncAttrib"];
    PFNEGLGETSYNCATTRIBPROC next = reinterpret_cast<PFNEGLGETSYNCATTRIBPROC>(entry);
    EGLBoolean ret               = next(dpy, sync, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_WaitSync(EGLDisplay dpy, EGLSync sync, EGLint flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglWaitSync(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ", flags = %d)",
                 (uintptr_t)dpy, (uintptr_t)sync, flags);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLWaitSync), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglWaitSync");
    //  Call down to the next layer
    void *entry             = funcMap["eglWaitSync"];
    PFNEGLWAITSYNCPROC next = reinterpret_cast<PFNEGLWAITSYNCPROC>(entry);
    EGLBoolean ret          = next(dpy, sync, flags);

    g_pop_debug_group();
    return ret;
}

void setupEGLHooks()
{
    hookMap["eglChooseConfig"]                  = (void *)EGL_ChooseConfig;
    hookMap["eglCopyBuffers"]                   = (void *)EGL_CopyBuffers;
    hookMap["eglCreateContext"]                 = (void *)EGL_CreateContext;
    hookMap["eglCreatePbufferSurface"]          = (void *)EGL_CreatePbufferSurface;
    hookMap["eglCreatePixmapSurface"]           = (void *)EGL_CreatePixmapSurface;
    hookMap["eglCreateWindowSurface"]           = (void *)EGL_CreateWindowSurface;
    hookMap["eglDestroyContext"]                = (void *)EGL_DestroyContext;
    hookMap["eglDestroySurface"]                = (void *)EGL_DestroySurface;
    hookMap["eglGetConfigAttrib"]               = (void *)EGL_GetConfigAttrib;
    hookMap["eglGetConfigs"]                    = (void *)EGL_GetConfigs;
    hookMap["eglGetCurrentDisplay"]             = (void *)EGL_GetCurrentDisplay;
    hookMap["eglGetCurrentSurface"]             = (void *)EGL_GetCurrentSurface;
    hookMap["eglGetDisplay"]                    = (void *)EGL_GetDisplay;
    hookMap["eglGetError"]                      = (void *)EGL_GetError;
    hookMap["eglGetProcAddress"]                = (void *)EGL_GetProcAddress;
    hookMap["eglInitialize"]                    = (void *)EGL_Initialize;
    hookMap["eglMakeCurrent"]                   = (void *)EGL_MakeCurrent;
    hookMap["eglQueryContext"]                  = (void *)EGL_QueryContext;
    hookMap["eglQueryString"]                   = (void *)EGL_QueryString;
    hookMap["eglQuerySurface"]                  = (void *)EGL_QuerySurface;
    hookMap["eglSwapBuffers"]                   = (void *)EGL_SwapBuffers;
    hookMap["eglTerminate"]                     = (void *)EGL_Terminate;
    hookMap["eglWaitGL"]                        = (void *)EGL_WaitGL;
    hookMap["eglWaitNative"]                    = (void *)EGL_WaitNative;
    hookMap["eglBindTexImage"]                  = (void *)EGL_BindTexImage;
    hookMap["eglReleaseTexImage"]               = (void *)EGL_ReleaseTexImage;
    hookMap["eglSurfaceAttrib"]                 = (void *)EGL_SurfaceAttrib;
    hookMap["eglSwapInterval"]                  = (void *)EGL_SwapInterval;
    hookMap["eglBindAPI"]                       = (void *)EGL_BindAPI;
    hookMap["eglCreatePbufferFromClientBuffer"] = (void *)EGL_CreatePbufferFromClientBuffer;
    hookMap["eglQueryAPI"]                      = (void *)EGL_QueryAPI;
    hookMap["eglReleaseThread"]                 = (void *)EGL_ReleaseThread;
    hookMap["eglWaitClient"]                    = (void *)EGL_WaitClient;
    hookMap["eglGetCurrentContext"]             = (void *)EGL_GetCurrentContext;
    hookMap["eglClientWaitSync"]                = (void *)EGL_ClientWaitSync;
    hookMap["eglCreateImage"]                   = (void *)EGL_CreateImage;
    hookMap["eglCreatePlatformPixmapSurface"]   = (void *)EGL_CreatePlatformPixmapSurface;
    hookMap["eglCreatePlatformWindowSurface"]   = (void *)EGL_CreatePlatformWindowSurface;
    hookMap["eglCreateSync"]                    = (void *)EGL_CreateSync;
    hookMap["eglDestroyImage"]                  = (void *)EGL_DestroyImage;
    hookMap["eglDestroySync"]                   = (void *)EGL_DestroySync;
    hookMap["eglGetPlatformDisplay"]            = (void *)EGL_GetPlatformDisplay;
    hookMap["eglGetSyncAttrib"]                 = (void *)EGL_GetSyncAttrib;
    hookMap["eglWaitSync"]                      = (void *)EGL_WaitSync;
}

}  // namespace agi_layer
