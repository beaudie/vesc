// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_3_0_autogen.h:
//   Defines the GLES 3.0 entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_3_0_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_3_0_AUTOGEN_H_

#if defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES

#if defined(GL_GLEXT_PROTOTYPES)
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLEXT_PROTOTYPES)

#include <GLES3/gl3.h>
#include <export.h>

extern "C" {
ANGLE_EXPORT void GL_APIENTRY glBeginQuery(GLenum target, GLuint id);
ANGLE_EXPORT void GL_APIENTRY glBeginTransformFeedback(GLenum primitiveMode);
ANGLE_EXPORT void GL_APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY
glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY glBindSampler(GLuint unit, GLuint sampler);
ANGLE_EXPORT void GL_APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
ANGLE_EXPORT void GL_APIENTRY glBindVertexArray(GLuint array);
ANGLE_EXPORT void GL_APIENTRY glBlitFramebuffer(GLint srcX0,
                                                GLint srcY0,
                                                GLint srcX1,
                                                GLint srcY1,
                                                GLint dstX0,
                                                GLint dstY0,
                                                GLint dstX1,
                                                GLint dstY1,
                                                GLbitfield mask,
                                                GLenum filter);
ANGLE_EXPORT void GL_APIENTRY glClearBufferfi(GLenum buffer,
                                              GLint drawbuffer,
                                              GLfloat depth,
                                              GLint stencil);
ANGLE_EXPORT void GL_APIENTRY glClearBufferfv(GLenum buffer,
                                              GLint drawbuffer,
                                              const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY glClearBufferuiv(GLenum buffer,
                                               GLint drawbuffer,
                                               const GLuint *value);
ANGLE_EXPORT GLenum GL_APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
ANGLE_EXPORT void GL_APIENTRY glCompressedTexImage3D(GLenum target,
                                                     GLint level,
                                                     GLenum internalformat,
                                                     GLsizei width,
                                                     GLsizei height,
                                                     GLsizei depth,
                                                     GLint border,
                                                     GLsizei imageSize,
                                                     const void *data);
ANGLE_EXPORT void GL_APIENTRY glCompressedTexSubImage3D(GLenum target,
                                                        GLint level,
                                                        GLint xoffset,
                                                        GLint yoffset,
                                                        GLint zoffset,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLsizei depth,
                                                        GLenum format,
                                                        GLsizei imageSize,
                                                        const void *data);
ANGLE_EXPORT void GL_APIENTRY glCopyBufferSubData(GLenum readTarget,
                                                  GLenum writeTarget,
                                                  GLintptr readOffset,
                                                  GLintptr writeOffset,
                                                  GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY glCopyTexSubImage3D(GLenum target,
                                                  GLint level,
                                                  GLint xoffset,
                                                  GLint yoffset,
                                                  GLint zoffset,
                                                  GLint x,
                                                  GLint y,
                                                  GLsizei width,
                                                  GLsizei height);
ANGLE_EXPORT void GL_APIENTRY glDeleteQueries(GLsizei n, const GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY glDeleteSamplers(GLsizei count, const GLuint *samplers);
ANGLE_EXPORT void GL_APIENTRY glDeleteSync(GLsync sync);
ANGLE_EXPORT void GL_APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY glDrawArraysInstanced(GLenum mode,
                                                    GLint first,
                                                    GLsizei count,
                                                    GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY glDrawBuffers(GLsizei n, const GLenum *bufs);
ANGLE_EXPORT void GL_APIENTRY glDrawElementsInstanced(GLenum mode,
                                                      GLsizei count,
                                                      GLenum type,
                                                      const void *indices,
                                                      GLsizei instancecount);
ANGLE_EXPORT void GL_APIENTRY glDrawRangeElements(GLenum mode,
                                                  GLuint start,
                                                  GLuint end,
                                                  GLsizei count,
                                                  GLenum type,
                                                  const void *indices);
ANGLE_EXPORT void GL_APIENTRY glEndQuery(GLenum target);
ANGLE_EXPORT void GL_APIENTRY glEndTransformFeedback();
ANGLE_EXPORT GLsync GL_APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
ANGLE_EXPORT void GL_APIENTRY glFlushMappedBufferRange(GLenum target,
                                                       GLintptr offset,
                                                       GLsizeiptr length);
ANGLE_EXPORT void GL_APIENTRY glFramebufferTextureLayer(GLenum target,
                                                        GLenum attachment,
                                                        GLuint texture,
                                                        GLint level,
                                                        GLint layer);
ANGLE_EXPORT void GL_APIENTRY glGenQueries(GLsizei n, GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY glGenSamplers(GLsizei count, GLuint *samplers);
ANGLE_EXPORT void GL_APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint *ids);
ANGLE_EXPORT void GL_APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);
ANGLE_EXPORT void GL_APIENTRY glGetActiveUniformBlockName(GLuint program,
                                                          GLuint uniformBlockIndex,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY glGetActiveUniformBlockiv(GLuint program,
                                                        GLuint uniformBlockIndex,
                                                        GLenum pname,
                                                        GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetActiveUniformsiv(GLuint program,
                                                    GLsizei uniformCount,
                                                    const GLuint *uniformIndices,
                                                    GLenum pname,
                                                    GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetBufferParameteri64v(GLenum target,
                                                       GLenum pname,
                                                       GLint64 *params);
ANGLE_EXPORT void GL_APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void **params);
ANGLE_EXPORT GLint GL_APIENTRY glGetFragDataLocation(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY glGetInteger64v(GLenum pname, GLint64 *data);
ANGLE_EXPORT void GL_APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
ANGLE_EXPORT void GL_APIENTRY glGetInternalformativ(GLenum target,
                                                    GLenum internalformat,
                                                    GLenum pname,
                                                    GLsizei bufSize,
                                                    GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetProgramBinary(GLuint program,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLenum *binaryFormat,
                                                 void *binary);
ANGLE_EXPORT void GL_APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetSamplerParameterfv(GLuint sampler,
                                                      GLenum pname,
                                                      GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
ANGLE_EXPORT const GLubyte *GL_APIENTRY glGetStringi(GLenum name, GLuint index);
ANGLE_EXPORT void GL_APIENTRY
glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
ANGLE_EXPORT void GL_APIENTRY glGetTransformFeedbackVarying(GLuint program,
                                                            GLuint index,
                                                            GLsizei bufSize,
                                                            GLsizei *length,
                                                            GLsizei *size,
                                                            GLenum *type,
                                                            GLchar *name);
ANGLE_EXPORT GLuint GL_APIENTRY glGetUniformBlockIndex(GLuint program,
                                                       const GLchar *uniformBlockName);
ANGLE_EXPORT void GL_APIENTRY glGetUniformIndices(GLuint program,
                                                  GLsizei uniformCount,
                                                  const GLchar *const *uniformNames,
                                                  GLuint *uniformIndices);
ANGLE_EXPORT void GL_APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY glInvalidateFramebuffer(GLenum target,
                                                      GLsizei numAttachments,
                                                      const GLenum *attachments);
ANGLE_EXPORT void GL_APIENTRY glInvalidateSubFramebuffer(GLenum target,
                                                         GLsizei numAttachments,
                                                         const GLenum *attachments,
                                                         GLint x,
                                                         GLint y,
                                                         GLsizei width,
                                                         GLsizei height);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsQuery(GLuint id);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsSampler(GLuint sampler);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsSync(GLsync sync);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsTransformFeedback(GLuint id);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsVertexArray(GLuint array);
ANGLE_EXPORT void *GL_APIENTRY glMapBufferRange(GLenum target,
                                                GLintptr offset,
                                                GLsizeiptr length,
                                                GLbitfield access);
ANGLE_EXPORT void GL_APIENTRY glPauseTransformFeedback();
ANGLE_EXPORT void GL_APIENTRY glProgramBinary(GLuint program,
                                              GLenum binaryFormat,
                                              const void *binary,
                                              GLsizei length);
ANGLE_EXPORT void GL_APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
ANGLE_EXPORT void GL_APIENTRY glReadBuffer(GLenum src);
ANGLE_EXPORT void GL_APIENTRY glRenderbufferStorageMultisample(GLenum target,
                                                               GLsizei samples,
                                                               GLenum internalformat,
                                                               GLsizei width,
                                                               GLsizei height);
ANGLE_EXPORT void GL_APIENTRY glResumeTransformFeedback();
ANGLE_EXPORT void GL_APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glSamplerParameterfv(GLuint sampler,
                                                   GLenum pname,
                                                   const GLfloat *param);
ANGLE_EXPORT void GL_APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY glSamplerParameteriv(GLuint sampler,
                                                   GLenum pname,
                                                   const GLint *param);
ANGLE_EXPORT void GL_APIENTRY glTexImage3D(GLenum target,
                                           GLint level,
                                           GLint internalformat,
                                           GLsizei width,
                                           GLsizei height,
                                           GLsizei depth,
                                           GLint border,
                                           GLenum format,
                                           GLenum type,
                                           const void *pixels);
ANGLE_EXPORT void GL_APIENTRY
glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
ANGLE_EXPORT void GL_APIENTRY glTexStorage3D(GLenum target,
                                             GLsizei levels,
                                             GLenum internalformat,
                                             GLsizei width,
                                             GLsizei height,
                                             GLsizei depth);
ANGLE_EXPORT void GL_APIENTRY glTexSubImage3D(GLenum target,
                                              GLint level,
                                              GLint xoffset,
                                              GLint yoffset,
                                              GLint zoffset,
                                              GLsizei width,
                                              GLsizei height,
                                              GLsizei depth,
                                              GLenum format,
                                              GLenum type,
                                              const void *pixels);
ANGLE_EXPORT void GL_APIENTRY glTransformFeedbackVaryings(GLuint program,
                                                          GLsizei count,
                                                          const GLchar *const *varyings,
                                                          GLenum bufferMode);
ANGLE_EXPORT void GL_APIENTRY glUniform1ui(GLint location, GLuint v0);
ANGLE_EXPORT void GL_APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1);
ANGLE_EXPORT void GL_APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
ANGLE_EXPORT void GL_APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY
glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
ANGLE_EXPORT void GL_APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
ANGLE_EXPORT void GL_APIENTRY glUniformBlockBinding(GLuint program,
                                                    GLuint uniformBlockIndex,
                                                    GLuint uniformBlockBinding);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix2x3fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix2x4fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix3x2fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix3x4fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix4x2fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix4x3fv(GLint location,
                                                   GLsizei count,
                                                   GLboolean transpose,
                                                   const GLfloat *value);
ANGLE_EXPORT GLboolean GL_APIENTRY glUnmapBuffer(GLenum target);
ANGLE_EXPORT void GL_APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
ANGLE_EXPORT void GL_APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
ANGLE_EXPORT void GL_APIENTRY glVertexAttribI4iv(GLuint index, const GLint *v);
ANGLE_EXPORT void GL_APIENTRY
glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
ANGLE_EXPORT void GL_APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint *v);
ANGLE_EXPORT void GL_APIENTRY
glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
ANGLE_EXPORT void GL_APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
}  // extern "C"

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_3_0_AUTOGEN_H_
