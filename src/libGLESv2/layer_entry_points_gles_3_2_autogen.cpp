// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_3_2_autogen.cpp:
//   Layer functions for the OpenGL ES 3.2 entry points.

#include "libGLESv2/layer_entry_points_gles_3_2_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_BlendBarrier()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendBarrier()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlendBarrier), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlendBarrier  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glBlendBarrier"];
    PFNGLBLENDBARRIERPROC next = reinterpret_cast<PFNGLBLENDBARRIERPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlendEquationSeparatei(buf = %u, modeRGB = %s, modeAlpha = %s)", buf,
                 GLenumToString(GLenumGroup::BlendEquationModeEXT, modeRGB),
                 GLenumToString(GLenumGroup::BlendEquationModeEXT, modeAlpha));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlendEquationSeparatei), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlendEquationSeparatei  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glBlendEquationSeparatei"];
    PFNGLBLENDEQUATIONSEPARATEIPROC next = reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEIPROC>(entry);
    next(buf, modeRGB, modeAlpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BlendEquationi(GLuint buf, GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendEquationi(buf = %u, mode = %s)", buf,
                 GLenumToString(GLenumGroup::BlendEquationModeEXT, mode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlendEquationi), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlendEquationi  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glBlendEquationi"];
    PFNGLBLENDEQUATIONIPROC next = reinterpret_cast<PFNGLBLENDEQUATIONIPROC>(entry);
    next(buf, mode);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glBlendFuncSeparatei(buf = %u, srcRGB = %s, dstRGB = %s, srcAlpha = %s, dstAlpha = %s)",
        buf, GLenumToString(GLenumGroup::BlendingFactor, srcRGB),
        GLenumToString(GLenumGroup::BlendingFactor, dstRGB),
        GLenumToString(GLenumGroup::BlendingFactor, srcAlpha),
        GLenumToString(GLenumGroup::BlendingFactor, dstAlpha));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlendFuncSeparatei), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlendFuncSeparatei  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glBlendFuncSeparatei"];
    PFNGLBLENDFUNCSEPARATEIPROC next = reinterpret_cast<PFNGLBLENDFUNCSEPARATEIPROC>(entry);
    next(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BlendFunci(GLuint buf, GLenum src, GLenum dst)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendFunci(buf = %u, src = %s, dst = %s)", buf,
                 GLenumToString(GLenumGroup::BlendingFactor, src),
                 GLenumToString(GLenumGroup::BlendingFactor, dst));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlendFunci), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlendFunci  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glBlendFunci"];
    PFNGLBLENDFUNCIPROC next = reinterpret_cast<PFNGLBLENDFUNCIPROC>(entry);
    next(buf, src, dst);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColorMaski(index = %u, r = %s, g = %s, b = %s, a = %s)",
                 index, GLbooleanToString(r), GLbooleanToString(g), GLbooleanToString(b),
                 GLbooleanToString(a));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLColorMaski), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glColorMaski  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glColorMaski"];
    PFNGLCOLORMASKIPROC next = reinterpret_cast<PFNGLCOLORMASKIPROC>(entry);
    next(index, r, g, b, a);

    g_pop_debug_group();
}

void GL_APIENTRY GL_CopyImageSubData(GLuint srcName,
                                     GLenum srcTarget,
                                     GLint srcLevel,
                                     GLint srcX,
                                     GLint srcY,
                                     GLint srcZ,
                                     GLuint dstName,
                                     GLenum dstTarget,
                                     GLint dstLevel,
                                     GLint dstX,
                                     GLint dstY,
                                     GLint dstZ,
                                     GLsizei srcWidth,
                                     GLsizei srcHeight,
                                     GLsizei srcDepth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyImageSubData(srcName = %u, srcTarget = %s, srcLevel = %d, srcX = %d, srcY "
                 "= %d, srcZ = %d, dstName = %u, dstTarget = %s, dstLevel = %d, dstX = %d, dstY = "
                 "%d, dstZ = %d, srcWidth = %d, srcHeight = %d, srcDepth = %d)",
                 srcName, GLenumToString(GLenumGroup::CopyBufferSubDataTarget, srcTarget), srcLevel,
                 srcX, srcY, srcZ, dstName,
                 GLenumToString(GLenumGroup::CopyBufferSubDataTarget, dstTarget), dstLevel, dstX,
                 dstY, dstZ, srcWidth, srcHeight, srcDepth);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCopyImageSubData), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glCopyImageSubData  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glCopyImageSubData"];
    PFNGLCOPYIMAGESUBDATAPROC next = reinterpret_cast<PFNGLCOPYIMAGESUBDATAPROC>(entry);
    next(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY,
         dstZ, srcWidth, srcHeight, srcDepth);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DebugMessageCallback(GLDEBUGPROC callback, const void *userParam)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageCallback(callback = 0x%016" PRIxPTR ", userParam = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)callback, (uintptr_t)userParam);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDebugMessageCallback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDebugMessageCallback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glDebugMessageCallback"];
    PFNGLDEBUGMESSAGECALLBACKPROC next = reinterpret_cast<PFNGLDEBUGMESSAGECALLBACKPROC>(entry);
    next(callback, userParam);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DebugMessageControl(GLenum source,
                                        GLenum type,
                                        GLenum severity,
                                        GLsizei count,
                                        const GLuint *ids,
                                        GLboolean enabled)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageControl(source = %s, type = %s, severity = %s, count = %d, ids = "
                 "0x%016" PRIxPTR ", enabled = %s)",
                 GLenumToString(GLenumGroup::DebugSource, source),
                 GLenumToString(GLenumGroup::DebugType, type),
                 GLenumToString(GLenumGroup::DebugSeverity, severity), count, (uintptr_t)ids,
                 GLbooleanToString(enabled));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDebugMessageControl), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDebugMessageControl  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glDebugMessageControl"];
    PFNGLDEBUGMESSAGECONTROLPROC next = reinterpret_cast<PFNGLDEBUGMESSAGECONTROLPROC>(entry);
    next(source, type, severity, count, ids, enabled);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DebugMessageInsert(GLenum source,
                                       GLenum type,
                                       GLuint id,
                                       GLenum severity,
                                       GLsizei length,
                                       const GLchar *buf)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDebugMessageInsert(source = %s, type = %s, id = %u, severity = %s, length = "
                 "%d, buf = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::DebugSource, source),
                 GLenumToString(GLenumGroup::DebugType, type), id,
                 GLenumToString(GLenumGroup::DebugSeverity, severity), length, (uintptr_t)buf);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDebugMessageInsert), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDebugMessageInsert  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glDebugMessageInsert"];
    PFNGLDEBUGMESSAGEINSERTPROC next = reinterpret_cast<PFNGLDEBUGMESSAGEINSERTPROC>(entry);
    next(source, type, id, severity, length, buf);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Disablei(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisablei(target = %s, index = %u)",
                 GLenumToString(GLenumGroup::EnableCap, target), index);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDisablei), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDisablei  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glDisablei"];
    PFNGLDISABLEIPROC next = reinterpret_cast<PFNGLDISABLEIPROC>(entry);
    next(target, index);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawElementsBaseVertex(GLenum mode,
                                           GLsizei count,
                                           GLenum type,
                                           const void *indices,
                                           GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsBaseVertex(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", basevertex = %d)",
        GLenumToString(GLenumGroup::PrimitiveType, mode), count,
        GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, basevertex);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawElementsBaseVertex), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawElementsBaseVertex  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glDrawElementsBaseVertex"];
    PFNGLDRAWELEMENTSBASEVERTEXPROC next = reinterpret_cast<PFNGLDRAWELEMENTSBASEVERTEXPROC>(entry);
    next(mode, count, type, indices, basevertex);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawElementsInstancedBaseVertex(GLenum mode,
                                                    GLsizei count,
                                                    GLenum type,
                                                    const void *indices,
                                                    GLsizei instancecount,
                                                    GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElementsInstancedBaseVertex(mode = %s, count = %d, type = %s, indices = "
                 "0x%016" PRIxPTR ", instancecount = %d, basevertex = %d)",
                 GLenumToString(GLenumGroup::PrimitiveType, mode), count,
                 GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices,
                 instancecount, basevertex);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstancedBaseVertex),
                       -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawElementsInstancedBaseVertex  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawElementsInstancedBaseVertex"];
    PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC next =
        reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC>(entry);
    next(mode, count, type, indices, instancecount, basevertex);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawRangeElementsBaseVertex(GLenum mode,
                                                GLuint start,
                                                GLuint end,
                                                GLsizei count,
                                                GLenum type,
                                                const void *indices,
                                                GLint basevertex)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawRangeElementsBaseVertex(mode = %s, start = %u, end = %u, count = %d, type "
                 "= %s, indices = 0x%016" PRIxPTR ", basevertex = %d)",
                 GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
                 GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices,
                 basevertex);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawRangeElementsBaseVertex), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawRangeElementsBaseVertex  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDrawRangeElementsBaseVertex"];
    PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC next =
        reinterpret_cast<PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC>(entry);
    next(mode, start, end, count, type, indices, basevertex);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Enablei(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnablei(target = %s, index = %u)",
                 GLenumToString(GLenumGroup::EnableCap, target), index);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLEnablei), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glEnablei  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glEnablei"];
    PFNGLENABLEIPROC next = reinterpret_cast<PFNGLENABLEIPROC>(entry);
    next(target, index);

    g_pop_debug_group();
}

void GL_APIENTRY GL_FramebufferTexture(GLenum target,
                                       GLenum attachment,
                                       GLuint texture,
                                       GLint level)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexture(target = %s, attachment = %s, texture = %u, level = %d)",
                 GLenumToString(GLenumGroup::FramebufferTarget, target),
                 GLenumToString(GLenumGroup::FramebufferAttachment, attachment), texture, level);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexture), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFramebufferTexture  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glFramebufferTexture"];
    PFNGLFRAMEBUFFERTEXTUREPROC next = reinterpret_cast<PFNGLFRAMEBUFFERTEXTUREPROC>(entry);
    next(target, attachment, texture, level);

    g_pop_debug_group();
}

GLuint GL_APIENTRY GL_GetDebugMessageLog(GLuint count,
                                         GLsizei bufSize,
                                         GLenum *sources,
                                         GLenum *types,
                                         GLuint *ids,
                                         GLenum *severities,
                                         GLsizei *lengths,
                                         GLchar *messageLog)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetDebugMessageLog(count = %u, bufSize = %d, sources = 0x%016" PRIxPTR
                 ", types = 0x%016" PRIxPTR ", ids = 0x%016" PRIxPTR ", severities = 0x%016" PRIxPTR
                 ", lengths = 0x%016" PRIxPTR ", messageLog = 0x%016" PRIxPTR ")",
                 count, bufSize, (uintptr_t)sources, (uintptr_t)types, (uintptr_t)ids,
                 (uintptr_t)severities, (uintptr_t)lengths, (uintptr_t)messageLog);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetDebugMessageLog), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetDebugMessageLog");

    // Call down to the next layer
    void *entry                      = funcMap["glGetDebugMessageLog"];
    PFNGLGETDEBUGMESSAGELOGPROC next = reinterpret_cast<PFNGLGETDEBUGMESSAGELOGPROC>(entry);
    GLuint ret = next(count, bufSize, sources, types, ids, severities, lengths, messageLog);

    g_pop_debug_group();
    return ret;
}

GLenum GL_APIENTRY GL_GetGraphicsResetStatus()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetGraphicsResetStatus()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetGraphicsResetStatus), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetGraphicsResetStatus");

    // Call down to the next layer
    void *entry                          = funcMap["glGetGraphicsResetStatus"];
    PFNGLGETGRAPHICSRESETSTATUSPROC next = reinterpret_cast<PFNGLGETGRAPHICSRESETSTATUSPROC>(entry);
    GLenum ret                           = next();

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY
GL_GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetObjectLabel(identifier = %s, name = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", label = 0x%016" PRIxPTR ")",
        GLenumToString(GLenumGroup::DefaultGroup, identifier), name, bufSize, (uintptr_t)length,
        (uintptr_t)label);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetObjectLabel), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetObjectLabel  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetObjectLabel"];
    PFNGLGETOBJECTLABELPROC next = reinterpret_cast<PFNGLGETOBJECTLABELPROC>(entry);
    next(identifier, name, bufSize, length, label);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetObjectPtrLabel(const void *ptr,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetObjectPtrLabel(ptr = 0x%016" PRIxPTR
                 ", bufSize = %d, length = 0x%016" PRIxPTR ", label = 0x%016" PRIxPTR ")",
                 (uintptr_t)ptr, bufSize, (uintptr_t)length, (uintptr_t)label);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetObjectPtrLabel), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetObjectPtrLabel  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetObjectPtrLabel"];
    PFNGLGETOBJECTPTRLABELPROC next = reinterpret_cast<PFNGLGETOBJECTPTRLABELPROC>(entry);
    next(ptr, bufSize, length, label);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetPointerv(GLenum pname, void **params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetPointerv(pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::GetPointervPName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetPointerv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetPointerv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetPointerv"];
    PFNGLGETPOINTERVPROC next = reinterpret_cast<PFNGLGETPOINTERVPROC>(entry);
    next(pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIiv(sampler = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetSamplerParameterIiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetSamplerParameterIiv"];
    PFNGLGETSAMPLERPARAMETERIIVPROC next = reinterpret_cast<PFNGLGETSAMPLERPARAMETERIIVPROC>(entry);
    next(sampler, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterIuiv(sampler = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterIuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetSamplerParameterIuiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetSamplerParameterIuiv"];
    PFNGLGETSAMPLERPARAMETERIUIVPROC next =
        reinterpret_cast<PFNGLGETSAMPLERPARAMETERIUIVPROC>(entry);
    next(sampler, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIiv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexParameterIiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGetTexParameterIiv"];
    PFNGLGETTEXPARAMETERIIVPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterIuiv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::GetTextureParameter, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterIuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTexParameterIuiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetTexParameterIuiv"];
    PFNGLGETTEXPARAMETERIUIVPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIUIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetnUniformfv(program = %u, location = %d, bufSize = %d, params = 0x%016" PRIxPTR ")",
        program, location, bufSize, (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetnUniformfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetnUniformfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetnUniformfv"];
    PFNGLGETNUNIFORMFVPROC next = reinterpret_cast<PFNGLGETNUNIFORMFVPROC>(entry);
    next(program, location, bufSize, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetnUniformiv(program = %u, location = %d, bufSize = %d, params = 0x%016" PRIxPTR ")",
        program, location, bufSize, (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetnUniformiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetnUniformiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetnUniformiv"];
    PFNGLGETNUNIFORMIVPROC next = reinterpret_cast<PFNGLGETNUNIFORMIVPROC>(entry);
    next(program, location, bufSize, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetnUniformuiv(program = %u, location = %d, bufSize = %d, params = 0x%016" PRIxPTR ")",
        program, location, bufSize, (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetnUniformuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetnUniformuiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGetnUniformuiv"];
    PFNGLGETNUNIFORMUIVPROC next = reinterpret_cast<PFNGLGETNUNIFORMUIVPROC>(entry);
    next(program, location, bufSize, params);

    g_pop_debug_group();
}

GLboolean GL_APIENTRY GL_IsEnabledi(GLenum target, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsEnabledi(target = %s, index = %u)",
                 GLenumToString(GLenumGroup::EnableCap, target), index);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsEnabledi), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsEnabledi");

    // Call down to the next layer
    void *entry              = funcMap["glIsEnabledi"];
    PFNGLISENABLEDIPROC next = reinterpret_cast<PFNGLISENABLEDIPROC>(entry);
    GLboolean ret            = next(target, index);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_MinSampleShading(GLfloat value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glMinSampleShading(value = %f)", value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMinSampleShading), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glMinSampleShading  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glMinSampleShading"];
    PFNGLMINSAMPLESHADINGPROC next = reinterpret_cast<PFNGLMINSAMPLESHADINGPROC>(entry);
    next(value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glObjectLabel(identifier = %s, name = %u, length = %d, label = 0x%016" PRIxPTR ")",
        GLenumToString(GLenumGroup::ObjectIdentifier, identifier), name, length, (uintptr_t)label);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLObjectLabel), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glObjectLabel  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glObjectLabel"];
    PFNGLOBJECTLABELPROC next = reinterpret_cast<PFNGLOBJECTLABELPROC>(entry);
    next(identifier, name, length, label);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glObjectPtrLabel(ptr = 0x%016" PRIxPTR ", length = %d, label = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)ptr, length, (uintptr_t)label);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLObjectPtrLabel), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glObjectPtrLabel  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glObjectPtrLabel"];
    PFNGLOBJECTPTRLABELPROC next = reinterpret_cast<PFNGLOBJECTPTRLABELPROC>(entry);
    next(ptr, length, label);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PatchParameteri(GLenum pname, GLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPatchParameteri(pname = %s, value = %d)",
                 GLenumToString(GLenumGroup::PatchParameterName, pname), value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPatchParameteri), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPatchParameteri  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glPatchParameteri"];
    PFNGLPATCHPARAMETERIPROC next = reinterpret_cast<PFNGLPATCHPARAMETERIPROC>(entry);
    next(pname, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PopDebugGroup()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPopDebugGroup()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPopDebugGroup), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPopDebugGroup  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glPopDebugGroup"];
    PFNGLPOPDEBUGGROUPPROC next = reinterpret_cast<PFNGLPOPDEBUGGROUPPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_PrimitiveBoundingBox(GLfloat minX,
                                         GLfloat minY,
                                         GLfloat minZ,
                                         GLfloat minW,
                                         GLfloat maxX,
                                         GLfloat maxY,
                                         GLfloat maxZ,
                                         GLfloat maxW)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPrimitiveBoundingBox(minX = %f, minY = %f, minZ = %f, minW = %f, maxX = %f, "
                 "maxY = %f, maxZ = %f, maxW = %f)",
                 minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPrimitiveBoundingBox), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPrimitiveBoundingBox  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glPrimitiveBoundingBox"];
    PFNGLPRIMITIVEBOUNDINGBOXPROC next = reinterpret_cast<PFNGLPRIMITIVEBOUNDINGBOXPROC>(entry);
    next(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

    g_pop_debug_group();
}

void GL_APIENTRY GL_PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glPushDebugGroup(source = %s, id = %u, length = %d, message = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::DebugSource, source), id, length, (uintptr_t)message);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPushDebugGroup), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPushDebugGroup  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glPushDebugGroup"];
    PFNGLPUSHDEBUGGROUPPROC next = reinterpret_cast<PFNGLPUSHDEBUGGROUPPROC>(entry);
    next(source, id, length, message);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ReadnPixels(GLint x,
                                GLint y,
                                GLsizei width,
                                GLsizei height,
                                GLenum format,
                                GLenum type,
                                GLsizei bufSize,
                                void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReadnPixels(x = %d, y = %d, width = %d, height = %d, format = %s, type = %s, "
                 "bufSize = %d, data = 0x%016" PRIxPTR ")",
                 x, y, width, height, GLenumToString(GLenumGroup::PixelFormat, format),
                 GLenumToString(GLenumGroup::PixelType, type), bufSize, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLReadnPixels), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glReadnPixels  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glReadnPixels"];
    PFNGLREADNPIXELSPROC next = reinterpret_cast<PFNGLREADNPIXELSPROC>(entry);
    next(x, y, width, height, format, type, bufSize, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIiv(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameterIiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glSamplerParameterIiv"];
    PFNGLSAMPLERPARAMETERIIVPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIIVPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterIuiv(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterIuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameterIuiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glSamplerParameterIuiv"];
    PFNGLSAMPLERPARAMETERIUIVPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIUIVPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexBuffer(target = %s, internalformat = %s, buffer = %u)",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), buffer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexBuffer), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexBuffer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glTexBuffer"];
    PFNGLTEXBUFFERPROC next = reinterpret_cast<PFNGLTEXBUFFERPROC>(entry);
    next(target, internalformat, buffer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexBufferRange(GLenum target,
                                   GLenum internalformat,
                                   GLuint buffer,
                                   GLintptr offset,
                                   GLsizeiptr size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexBufferRange(target = %s, internalformat = %s, buffer = %u, offset = %llu, "
                 "size = %llu)",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), buffer,
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(size));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexBufferRange), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexBufferRange  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glTexBufferRange"];
    PFNGLTEXBUFFERRANGEPROC next = reinterpret_cast<PFNGLTEXBUFFERRANGEPROC>(entry);
    next(target, internalformat, buffer, offset, size);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIiv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::TextureParameterName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexParameterIiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexParameterIiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glTexParameterIiv"];
    PFNGLTEXPARAMETERIIVPROC next = reinterpret_cast<PFNGLTEXPARAMETERIIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterIuiv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::TextureParameterName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexParameterIuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexParameterIuiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glTexParameterIuiv"];
    PFNGLTEXPARAMETERIUIVPROC next = reinterpret_cast<PFNGLTEXPARAMETERIUIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexStorage3DMultisample(GLenum target,
                                            GLsizei samples,
                                            GLenum internalformat,
                                            GLsizei width,
                                            GLsizei height,
                                            GLsizei depth,
                                            GLboolean fixedsamplelocations)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage3DMultisample(target = %s, samples = %d, internalformat = %s, width "
                 "= %d, height = %d, depth = %d, fixedsamplelocations = %s)",
                 GLenumToString(GLenumGroup::TextureTarget, target), samples,
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height, depth,
                 GLbooleanToString(fixedsamplelocations));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexStorage3DMultisample), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexStorage3DMultisample  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTexStorage3DMultisample"];
    PFNGLTEXSTORAGE3DMULTISAMPLEPROC next =
        reinterpret_cast<PFNGLTEXSTORAGE3DMULTISAMPLEPROC>(entry);
    next(target, samples, internalformat, width, height, depth, fixedsamplelocations);

    g_pop_debug_group();
}

void setupGLES_3_2Hooks()
{
    hookMap["glBlendBarrier"]                    = (void *)GL_BlendBarrier;
    hookMap["glBlendEquationSeparatei"]          = (void *)GL_BlendEquationSeparatei;
    hookMap["glBlendEquationi"]                  = (void *)GL_BlendEquationi;
    hookMap["glBlendFuncSeparatei"]              = (void *)GL_BlendFuncSeparatei;
    hookMap["glBlendFunci"]                      = (void *)GL_BlendFunci;
    hookMap["glColorMaski"]                      = (void *)GL_ColorMaski;
    hookMap["glCopyImageSubData"]                = (void *)GL_CopyImageSubData;
    hookMap["glDebugMessageCallback"]            = (void *)GL_DebugMessageCallback;
    hookMap["glDebugMessageControl"]             = (void *)GL_DebugMessageControl;
    hookMap["glDebugMessageInsert"]              = (void *)GL_DebugMessageInsert;
    hookMap["glDisablei"]                        = (void *)GL_Disablei;
    hookMap["glDrawElementsBaseVertex"]          = (void *)GL_DrawElementsBaseVertex;
    hookMap["glDrawElementsInstancedBaseVertex"] = (void *)GL_DrawElementsInstancedBaseVertex;
    hookMap["glDrawRangeElementsBaseVertex"]     = (void *)GL_DrawRangeElementsBaseVertex;
    hookMap["glEnablei"]                         = (void *)GL_Enablei;
    hookMap["glFramebufferTexture"]              = (void *)GL_FramebufferTexture;
    hookMap["glGetDebugMessageLog"]              = (void *)GL_GetDebugMessageLog;
    hookMap["glGetGraphicsResetStatus"]          = (void *)GL_GetGraphicsResetStatus;
    hookMap["glGetObjectLabel"]                  = (void *)GL_GetObjectLabel;
    hookMap["glGetObjectPtrLabel"]               = (void *)GL_GetObjectPtrLabel;
    hookMap["glGetPointerv"]                     = (void *)GL_GetPointerv;
    hookMap["glGetSamplerParameterIiv"]          = (void *)GL_GetSamplerParameterIiv;
    hookMap["glGetSamplerParameterIuiv"]         = (void *)GL_GetSamplerParameterIuiv;
    hookMap["glGetTexParameterIiv"]              = (void *)GL_GetTexParameterIiv;
    hookMap["glGetTexParameterIuiv"]             = (void *)GL_GetTexParameterIuiv;
    hookMap["glGetnUniformfv"]                   = (void *)GL_GetnUniformfv;
    hookMap["glGetnUniformiv"]                   = (void *)GL_GetnUniformiv;
    hookMap["glGetnUniformuiv"]                  = (void *)GL_GetnUniformuiv;
    hookMap["glIsEnabledi"]                      = (void *)GL_IsEnabledi;
    hookMap["glMinSampleShading"]                = (void *)GL_MinSampleShading;
    hookMap["glObjectLabel"]                     = (void *)GL_ObjectLabel;
    hookMap["glObjectPtrLabel"]                  = (void *)GL_ObjectPtrLabel;
    hookMap["glPatchParameteri"]                 = (void *)GL_PatchParameteri;
    hookMap["glPopDebugGroup"]                   = (void *)GL_PopDebugGroup;
    hookMap["glPrimitiveBoundingBox"]            = (void *)GL_PrimitiveBoundingBox;
    hookMap["glPushDebugGroup"]                  = (void *)GL_PushDebugGroup;
    hookMap["glReadnPixels"]                     = (void *)GL_ReadnPixels;
    hookMap["glSamplerParameterIiv"]             = (void *)GL_SamplerParameterIiv;
    hookMap["glSamplerParameterIuiv"]            = (void *)GL_SamplerParameterIuiv;
    hookMap["glTexBuffer"]                       = (void *)GL_TexBuffer;
    hookMap["glTexBufferRange"]                  = (void *)GL_TexBufferRange;
    hookMap["glTexParameterIiv"]                 = (void *)GL_TexParameterIiv;
    hookMap["glTexParameterIuiv"]                = (void *)GL_TexParameterIuiv;
    hookMap["glTexStorage3DMultisample"]         = (void *)GL_TexStorage3DMultisample;
}

}  // namespace agi_layer
