// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_egl_ext_autogen.cpp:
//   Layer functions for the OpenGL ES EGL extension entry points.

#include "libGLESv2/layer_entry_points_egl_ext_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void EGLAPIENTRY EGL_SetBlobCacheFuncsANDROID(EGLDisplay dpy,
                                              EGLSetBlobFuncANDROID set,
                                              EGLGetBlobFuncANDROID get)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSetBlobCacheFuncsANDROID(dpy = 0x%016" PRIxPTR ", set = 0x%016" PRIxPTR
                 ", get = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)set, (uintptr_t)get);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSetBlobCacheFuncsANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSetBlobCacheFuncsANDROID");

    // Call down to the next layer
    void *entry = funcMap["eglSetBlobCacheFuncsANDROID"];
    PFNEGLSETBLOBCACHEFUNCSANDROIDPROC next =
        reinterpret_cast<PFNEGLSETBLOBCACHEFUNCSANDROIDPROC>(entry);
    next(dpy, set, get);

    g_pop_debug_group();
}

EGLClientBuffer EGLAPIENTRY EGL_CreateNativeClientBufferANDROID(const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateNativeClientBufferANDROID(attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateNativeClientBufferANDROID),
                       -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateNativeClientBufferANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglCreateNativeClientBufferANDROID"];
    PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC next =
        reinterpret_cast<PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC>(entry);
    EGLClientBuffer ret = next(attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetCompositorTimingSupportedANDROID(EGLDisplay dpy,
                                                               EGLSurface surface,
                                                               EGLint name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetCompositorTimingSupportedANDROID(dpy = 0x%016" PRIxPTR
                 ", surface = 0x%016" PRIxPTR ", name = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, name);
    g_push_debug_group(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
        static_cast<GLuint>(angle::EntryPoint::EGLGetCompositorTimingSupportedANDROID), -1,
        entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetCompositorTimingSupportedANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglGetCompositorTimingSupportedANDROID"];
    PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC next =
        reinterpret_cast<PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC>(entry);
    EGLBoolean ret = next(dpy, surface, name);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetCompositorTimingANDROID(EGLDisplay dpy,
                                                      EGLSurface surface,
                                                      EGLint numTimestamps,
                                                      const EGLint *names,
                                                      EGLnsecsANDROID *values)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetCompositorTimingANDROID(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", numTimestamps = %d, names = 0x%016" PRIxPTR ", values = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, numTimestamps, (uintptr_t)names,
                 (uintptr_t)values);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetCompositorTimingANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetCompositorTimingANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglGetCompositorTimingANDROID"];
    PFNEGLGETCOMPOSITORTIMINGANDROIDPROC next =
        reinterpret_cast<PFNEGLGETCOMPOSITORTIMINGANDROIDPROC>(entry);
    EGLBoolean ret = next(dpy, surface, numTimestamps, names, values);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetNextFrameIdANDROID(EGLDisplay dpy,
                                                 EGLSurface surface,
                                                 EGLuint64KHR *frameId)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetNextFrameIdANDROID(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", frameId = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)frameId);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetNextFrameIdANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetNextFrameIdANDROID");
    //  Call down to the next layer
    void *entry                          = funcMap["eglGetNextFrameIdANDROID"];
    PFNEGLGETNEXTFRAMEIDANDROIDPROC next = reinterpret_cast<PFNEGLGETNEXTFRAMEIDANDROIDPROC>(entry);
    EGLBoolean ret                       = next(dpy, surface, frameId);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetFrameTimestampSupportedANDROID(EGLDisplay dpy,
                                                             EGLSurface surface,
                                                             EGLint timestamp)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetFrameTimestampSupportedANDROID(dpy = 0x%016" PRIxPTR
                 ", surface = 0x%016" PRIxPTR ", timestamp = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, timestamp);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetFrameTimestampSupportedANDROID),
                       -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetFrameTimestampSupportedANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglGetFrameTimestampSupportedANDROID"];
    PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC next =
        reinterpret_cast<PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC>(entry);
    EGLBoolean ret = next(dpy, surface, timestamp);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetFrameTimestampsANDROID(EGLDisplay dpy,
                                                     EGLSurface surface,
                                                     EGLuint64KHR frameId,
                                                     EGLint numTimestamps,
                                                     const EGLint *timestamps,
                                                     EGLnsecsANDROID *values)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetFrameTimestampsANDROID(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", frameId = %llu, numTimestamps = %d, timestamps = 0x%016" PRIxPTR
                 ", values = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, static_cast<unsigned long long>(frameId),
                 numTimestamps, (uintptr_t)timestamps, (uintptr_t)values);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetFrameTimestampsANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetFrameTimestampsANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglGetFrameTimestampsANDROID"];
    PFNEGLGETFRAMETIMESTAMPSANDROIDPROC next =
        reinterpret_cast<PFNEGLGETFRAMETIMESTAMPSANDROIDPROC>(entry);
    EGLBoolean ret = next(dpy, surface, frameId, numTimestamps, timestamps, values);

    g_pop_debug_group();
    return ret;
}

EGLClientBuffer EGLAPIENTRY EGL_GetNativeClientBufferANDROID(const struct AHardwareBuffer *buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglGetNativeClientBufferANDROID(buffer = 0x%016" PRIxPTR ")",
                 (uintptr_t)buffer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetNativeClientBufferANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetNativeClientBufferANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglGetNativeClientBufferANDROID"];
    PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC next =
        reinterpret_cast<PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC>(entry);
    EGLClientBuffer ret = next(buffer);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_DupNativeFenceFDANDROID(EGLDisplay dpy, EGLSyncKHR sync)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDupNativeFenceFDANDROID(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)sync);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDupNativeFenceFDANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDupNativeFenceFDANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglDupNativeFenceFDANDROID"];
    PFNEGLDUPNATIVEFENCEFDANDROIDPROC next =
        reinterpret_cast<PFNEGLDUPNATIVEFENCEFDANDROIDPROC>(entry);
    EGLint ret = next(dpy, sync);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_PresentationTimeANDROID(EGLDisplay dpy,
                                                   EGLSurface surface,
                                                   EGLnsecsANDROID time)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglPresentationTimeANDROID(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", time = %llu)",
                 (uintptr_t)dpy, (uintptr_t)surface, static_cast<unsigned long long>(time));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLPresentationTimeANDROID), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglPresentationTimeANDROID");
    //  Call down to the next layer
    void *entry = funcMap["eglPresentationTimeANDROID"];
    PFNEGLPRESENTATIONTIMEANDROIDPROC next =
        reinterpret_cast<PFNEGLPRESENTATIONTIMEANDROIDPROC>(entry);
    EGLBoolean ret = next(dpy, surface, time);

    g_pop_debug_group();
    return ret;
}

EGLDeviceEXT EGLAPIENTRY EGL_CreateDeviceANGLE(EGLint device_type,
                                               void *native_device,
                                               const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateDeviceANGLE(device_type = %d, native_device = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 device_type, (uintptr_t)native_device, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateDeviceANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateDeviceANGLE");
    //  Call down to the next layer
    void *entry                      = funcMap["eglCreateDeviceANGLE"];
    PFNEGLCREATEDEVICEANGLEPROC next = reinterpret_cast<PFNEGLCREATEDEVICEANGLEPROC>(entry);
    EGLDeviceEXT ret                 = next(device_type, native_device, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_ReleaseDeviceANGLE(EGLDeviceEXT device)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglReleaseDeviceANGLE(device = 0x%016" PRIxPTR ")",
                 (uintptr_t)device);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLReleaseDeviceANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglReleaseDeviceANGLE");
    //  Call down to the next layer
    void *entry                       = funcMap["eglReleaseDeviceANGLE"];
    PFNEGLRELEASEDEVICEANGLEPROC next = reinterpret_cast<PFNEGLRELEASEDEVICEANGLEPROC>(entry);
    EGLBoolean ret                    = next(device);

    g_pop_debug_group();
    return ret;
}

const char *EGLAPIENTRY EGL_QueryStringiANGLE(EGLDisplay dpy, EGLint name, EGLint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryStringiANGLE(dpy = 0x%016" PRIxPTR ", name = %d, index = %d)",
                 (uintptr_t)dpy, name, index);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryStringiANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryStringiANGLE");
    //  Call down to the next layer
    void *entry                      = funcMap["eglQueryStringiANGLE"];
    PFNEGLQUERYSTRINGIANGLEPROC next = reinterpret_cast<PFNEGLQUERYSTRINGIANGLEPROC>(entry);
    const char *ret                  = next(dpy, name, index);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDisplayAttribANGLE(EGLDisplay dpy,
                                                   EGLint attribute,
                                                   EGLAttrib *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDisplayAttribANGLE(dpy = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDisplayAttribANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDisplayAttribANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglQueryDisplayAttribANGLE"];
    PFNEGLQUERYDISPLAYATTRIBANGLEPROC next =
        reinterpret_cast<PFNEGLQUERYDISPLAYATTRIBANGLEPROC>(entry);
    EGLBoolean ret = next(dpy, attribute, value);

    g_pop_debug_group();
    return ret;
}

void EGLAPIENTRY EGL_ReleaseHighPowerGPUANGLE(EGLDisplay dpy, EGLContext ctx)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglReleaseHighPowerGPUANGLE(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLReleaseHighPowerGPUANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglReleaseHighPowerGPUANGLE");

    // Call down to the next layer
    void *entry = funcMap["eglReleaseHighPowerGPUANGLE"];
    PFNEGLRELEASEHIGHPOWERGPUANGLEPROC next =
        reinterpret_cast<PFNEGLRELEASEHIGHPOWERGPUANGLEPROC>(entry);
    next(dpy, ctx);

    g_pop_debug_group();
}

void EGLAPIENTRY EGL_ReacquireHighPowerGPUANGLE(EGLDisplay dpy, EGLContext ctx)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglReacquireHighPowerGPUANGLE(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLReacquireHighPowerGPUANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglReacquireHighPowerGPUANGLE");

    // Call down to the next layer
    void *entry = funcMap["eglReacquireHighPowerGPUANGLE"];
    PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC next =
        reinterpret_cast<PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC>(entry);
    next(dpy, ctx);

    g_pop_debug_group();
}

void EGLAPIENTRY EGL_HandleGPUSwitchANGLE(EGLDisplay dpy)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglHandleGPUSwitchANGLE(dpy = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLHandleGPUSwitchANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglHandleGPUSwitchANGLE");

    // Call down to the next layer
    void *entry                         = funcMap["eglHandleGPUSwitchANGLE"];
    PFNEGLHANDLEGPUSWITCHANGLEPROC next = reinterpret_cast<PFNEGLHANDLEGPUSWITCHANGLEPROC>(entry);
    next(dpy);

    g_pop_debug_group();
}

void EGLAPIENTRY EGL_ForceGPUSwitchANGLE(EGLDisplay dpy, EGLint gpuIDHigh, EGLint gpuIDLow)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglForceGPUSwitchANGLE(dpy = 0x%016" PRIxPTR ", gpuIDHigh = %d, gpuIDLow = %d)",
                 (uintptr_t)dpy, gpuIDHigh, gpuIDLow);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLForceGPUSwitchANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglForceGPUSwitchANGLE");

    // Call down to the next layer
    void *entry                        = funcMap["eglForceGPUSwitchANGLE"];
    PFNEGLFORCEGPUSWITCHANGLEPROC next = reinterpret_cast<PFNEGLFORCEGPUSWITCHANGLEPROC>(entry);
    next(dpy, gpuIDHigh, gpuIDLow);

    g_pop_debug_group();
}

EGLBoolean EGLAPIENTRY EGL_PrepareSwapBuffersANGLE(EGLDisplay dpy, EGLSurface surface)
{
    // Do not call glPushDebugGroup/glPopDebugGroup
    ALOGI("%s", "LLLLL Function is eglPrepareSwapBuffersANGLE");
    // Call down to the next layer
    void *entry = funcMap["eglPrepareSwapBuffersANGLE"];
    PFNEGLPREPARESWAPBUFFERSANGLEPROC next =
        reinterpret_cast<PFNEGLPREPARESWAPBUFFERSANGLEPROC>(entry);
    return next(dpy, surface);
}

EGLint EGLAPIENTRY EGL_ProgramCacheGetAttribANGLE(EGLDisplay dpy, EGLenum attrib)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglProgramCacheGetAttribANGLE(dpy = 0x%016" PRIxPTR ", attrib = 0x%X)",
                 (uintptr_t)dpy, attrib);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLProgramCacheGetAttribANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglProgramCacheGetAttribANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglProgramCacheGetAttribANGLE"];
    PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC next =
        reinterpret_cast<PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC>(entry);
    EGLint ret = next(dpy, attrib);

    g_pop_debug_group();
    return ret;
}

void EGLAPIENTRY EGL_ProgramCacheQueryANGLE(EGLDisplay dpy,
                                            EGLint index,
                                            void *key,
                                            EGLint *keysize,
                                            void *binary,
                                            EGLint *binarysize)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglProgramCacheQueryANGLE(dpy = 0x%016" PRIxPTR
                 ", index = %d, key = 0x%016" PRIxPTR ", keysize = 0x%016" PRIxPTR
                 ", binary = 0x%016" PRIxPTR ", binarysize = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, index, (uintptr_t)key, (uintptr_t)keysize, (uintptr_t)binary,
                 (uintptr_t)binarysize);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLProgramCacheQueryANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglProgramCacheQueryANGLE");

    // Call down to the next layer
    void *entry = funcMap["eglProgramCacheQueryANGLE"];
    PFNEGLPROGRAMCACHEQUERYANGLEPROC next =
        reinterpret_cast<PFNEGLPROGRAMCACHEQUERYANGLEPROC>(entry);
    next(dpy, index, key, keysize, binary, binarysize);

    g_pop_debug_group();
}

void EGLAPIENTRY EGL_ProgramCachePopulateANGLE(EGLDisplay dpy,
                                               const void *key,
                                               EGLint keysize,
                                               const void *binary,
                                               EGLint binarysize)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglProgramCachePopulateANGLE(dpy = 0x%016" PRIxPTR ", key = 0x%016" PRIxPTR
                 ", keysize = %d, binary = 0x%016" PRIxPTR ", binarysize = %d)",
                 (uintptr_t)dpy, (uintptr_t)key, keysize, (uintptr_t)binary, binarysize);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLProgramCachePopulateANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglProgramCachePopulateANGLE");

    // Call down to the next layer
    void *entry = funcMap["eglProgramCachePopulateANGLE"];
    PFNEGLPROGRAMCACHEPOPULATEANGLEPROC next =
        reinterpret_cast<PFNEGLPROGRAMCACHEPOPULATEANGLEPROC>(entry);
    next(dpy, key, keysize, binary, binarysize);

    g_pop_debug_group();
}

EGLint EGLAPIENTRY EGL_ProgramCacheResizeANGLE(EGLDisplay dpy, EGLint limit, EGLint mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglProgramCacheResizeANGLE(dpy = 0x%016" PRIxPTR ", limit = %d, mode = %d)",
                 (uintptr_t)dpy, limit, mode);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLProgramCacheResizeANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglProgramCacheResizeANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglProgramCacheResizeANGLE"];
    PFNEGLPROGRAMCACHERESIZEANGLEPROC next =
        reinterpret_cast<PFNEGLPROGRAMCACHERESIZEANGLEPROC>(entry);
    EGLint ret = next(dpy, limit, mode);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QuerySurfacePointerANGLE(EGLDisplay dpy,
                                                    EGLSurface surface,
                                                    EGLint attribute,
                                                    void **value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQuerySurfacePointerANGLE(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQuerySurfacePointerANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQuerySurfacePointerANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglQuerySurfacePointerANGLE"];
    PFNEGLQUERYSURFACEPOINTERANGLEPROC next =
        reinterpret_cast<PFNEGLQUERYSURFACEPOINTERANGLEPROC>(entry);
    EGLBoolean ret = next(dpy, surface, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_CreateStreamProducerD3DTextureANGLE(EGLDisplay dpy,
                                                               EGLStreamKHR stream,
                                                               const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateStreamProducerD3DTextureANGLE(dpy = 0x%016" PRIxPTR
                 ", stream = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream, (uintptr_t)attrib_list);
    g_push_debug_group(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
        static_cast<GLuint>(angle::EntryPoint::EGLCreateStreamProducerD3DTextureANGLE), -1,
        entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateStreamProducerD3DTextureANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglCreateStreamProducerD3DTextureANGLE"];
    PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC next =
        reinterpret_cast<PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC>(entry);
    EGLBoolean ret = next(dpy, stream, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamPostD3DTextureANGLE(EGLDisplay dpy,
                                                     EGLStreamKHR stream,
                                                     void *texture,
                                                     const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamPostD3DTextureANGLE(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR
                 ", texture = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream, (uintptr_t)texture, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLStreamPostD3DTextureANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamPostD3DTextureANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglStreamPostD3DTextureANGLE"];
    PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC next =
        reinterpret_cast<PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC>(entry);
    EGLBoolean ret = next(dpy, stream, texture, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SwapBuffersWithFrameTokenANGLE(EGLDisplay dpy,
                                                          EGLSurface surface,
                                                          EGLFrameTokenANGLE frametoken)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSwapBuffersWithFrameTokenANGLE(dpy = 0x%016" PRIxPTR
                 ", surface = 0x%016" PRIxPTR ", frametoken = 0x%llX)",
                 (uintptr_t)dpy, (uintptr_t)surface, static_cast<unsigned long long>(frametoken));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSwapBuffersWithFrameTokenANGLE),
                       -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSwapBuffersWithFrameTokenANGLE");
    //  Call down to the next layer
    void *entry = funcMap["eglSwapBuffersWithFrameTokenANGLE"];
    PFNEGLSWAPBUFFERSWITHFRAMETOKENANGLEPROC next =
        reinterpret_cast<PFNEGLSWAPBUFFERSWITHFRAMETOKENANGLEPROC>(entry);
    EGLBoolean ret = next(dpy, surface, frametoken);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetMscRateANGLE(EGLDisplay dpy,
                                           EGLSurface surface,
                                           EGLint *numerator,
                                           EGLint *denominator)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetMscRateANGLE(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", numerator = 0x%016" PRIxPTR ", denominator = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)numerator, (uintptr_t)denominator);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetMscRateANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetMscRateANGLE");
    //  Call down to the next layer
    void *entry                    = funcMap["eglGetMscRateANGLE"];
    PFNEGLGETMSCRATEANGLEPROC next = reinterpret_cast<PFNEGLGETMSCRATEANGLEPROC>(entry);
    EGLBoolean ret                 = next(dpy, surface, numerator, denominator);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_ExportVkImageANGLE(EGLDisplay dpy,
                                              EGLImage image,
                                              void *vk_image,
                                              void *vk_image_create_info)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglExportVkImageANGLE(dpy = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR
                 ", vk_image = 0x%016" PRIxPTR ", vk_image_create_info = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)image, (uintptr_t)vk_image,
                 (uintptr_t)vk_image_create_info);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLExportVkImageANGLE), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglExportVkImageANGLE");
    //  Call down to the next layer
    void *entry                       = funcMap["eglExportVkImageANGLE"];
    PFNEGLEXPORTVKIMAGEANGLEPROC next = reinterpret_cast<PFNEGLEXPORTVKIMAGEANGLEPROC>(entry);
    EGLBoolean ret                    = next(dpy, image, vk_image, vk_image_create_info);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetSyncValuesCHROMIUM(EGLDisplay dpy,
                                                 EGLSurface surface,
                                                 EGLuint64KHR *ust,
                                                 EGLuint64KHR *msc,
                                                 EGLuint64KHR *sbc)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetSyncValuesCHROMIUM(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", ust = 0x%016" PRIxPTR ", msc = 0x%016" PRIxPTR ", sbc = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)ust, (uintptr_t)msc,
                 (uintptr_t)sbc);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetSyncValuesCHROMIUM), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetSyncValuesCHROMIUM");
    //  Call down to the next layer
    void *entry                          = funcMap["eglGetSyncValuesCHROMIUM"];
    PFNEGLGETSYNCVALUESCHROMIUMPROC next = reinterpret_cast<PFNEGLGETSYNCVALUESCHROMIUMPROC>(entry);
    EGLBoolean ret                       = next(dpy, surface, ust, msc, sbc);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDeviceAttribEXT(EGLDeviceEXT device,
                                                EGLint attribute,
                                                EGLAttrib *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDeviceAttribEXT(device = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)device, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDeviceAttribEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDeviceAttribEXT");
    //  Call down to the next layer
    void *entry                         = funcMap["eglQueryDeviceAttribEXT"];
    PFNEGLQUERYDEVICEATTRIBEXTPROC next = reinterpret_cast<PFNEGLQUERYDEVICEATTRIBEXTPROC>(entry);
    EGLBoolean ret                      = next(device, attribute, value);

    g_pop_debug_group();
    return ret;
}

const char *EGLAPIENTRY EGL_QueryDeviceStringEXT(EGLDeviceEXT device, EGLint name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDeviceStringEXT(device = 0x%016" PRIxPTR ", name = %d)",
                 (uintptr_t)device, name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDeviceStringEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDeviceStringEXT");
    //  Call down to the next layer
    void *entry                         = funcMap["eglQueryDeviceStringEXT"];
    PFNEGLQUERYDEVICESTRINGEXTPROC next = reinterpret_cast<PFNEGLQUERYDEVICESTRINGEXTPROC>(entry);
    const char *ret                     = next(device, name);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDisplayAttribEXT(EGLDisplay dpy, EGLint attribute, EGLAttrib *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDisplayAttribEXT(dpy = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDisplayAttribEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDisplayAttribEXT");
    //  Call down to the next layer
    void *entry                          = funcMap["eglQueryDisplayAttribEXT"];
    PFNEGLQUERYDISPLAYATTRIBEXTPROC next = reinterpret_cast<PFNEGLQUERYDISPLAYATTRIBEXTPROC>(entry);
    EGLBoolean ret                       = next(dpy, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDmaBufFormatsEXT(EGLDisplay dpy,
                                                 EGLint max_formats,
                                                 EGLint *formats,
                                                 EGLint *num_formats)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDmaBufFormatsEXT(dpy = 0x%016" PRIxPTR
                 ", max_formats = %d, formats = 0x%016" PRIxPTR ", num_formats = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)dpy, max_formats, (uintptr_t)formats, (uintptr_t)num_formats);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDmaBufFormatsEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDmaBufFormatsEXT");
    //  Call down to the next layer
    void *entry                          = funcMap["eglQueryDmaBufFormatsEXT"];
    PFNEGLQUERYDMABUFFORMATSEXTPROC next = reinterpret_cast<PFNEGLQUERYDMABUFFORMATSEXTPROC>(entry);
    EGLBoolean ret                       = next(dpy, max_formats, formats, num_formats);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDmaBufModifiersEXT(EGLDisplay dpy,
                                                   EGLint format,
                                                   EGLint max_modifiers,
                                                   EGLuint64KHR *modifiers,
                                                   EGLBoolean *external_only,
                                                   EGLint *num_modifiers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryDmaBufModifiersEXT(dpy = 0x%016" PRIxPTR
                 ", format = %d, max_modifiers = %d, modifiers = 0x%016" PRIxPTR
                 ", external_only = 0x%016" PRIxPTR ", num_modifiers = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, format, max_modifiers, (uintptr_t)modifiers,
                 (uintptr_t)external_only, (uintptr_t)num_modifiers);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDmaBufModifiersEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDmaBufModifiersEXT");
    //  Call down to the next layer
    void *entry = funcMap["eglQueryDmaBufModifiersEXT"];
    PFNEGLQUERYDMABUFMODIFIERSEXTPROC next =
        reinterpret_cast<PFNEGLQUERYDMABUFMODIFIERSEXTPROC>(entry);
    EGLBoolean ret = next(dpy, format, max_modifiers, modifiers, external_only, num_modifiers);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePlatformPixmapSurfaceEXT(EGLDisplay dpy,
                                                          EGLConfig config,
                                                          void *native_pixmap,
                                                          const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "eglCreatePlatformPixmapSurfaceEXT(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
        ", native_pixmap = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
        (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)native_pixmap, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePlatformPixmapSurfaceEXT),
                       -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePlatformPixmapSurfaceEXT");
    //  Call down to the next layer
    void *entry = funcMap["eglCreatePlatformPixmapSurfaceEXT"];
    PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC next =
        reinterpret_cast<PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC>(entry);
    EGLSurface ret = next(dpy, config, native_pixmap, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLSurface EGLAPIENTRY EGL_CreatePlatformWindowSurfaceEXT(EGLDisplay dpy,
                                                          EGLConfig config,
                                                          void *native_window,
                                                          const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "eglCreatePlatformWindowSurfaceEXT(dpy = 0x%016" PRIxPTR ", config = 0x%016" PRIxPTR
        ", native_window = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
        (uintptr_t)dpy, (uintptr_t)config, (uintptr_t)native_window, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreatePlatformWindowSurfaceEXT),
                       -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreatePlatformWindowSurfaceEXT");
    //  Call down to the next layer
    void *entry = funcMap["eglCreatePlatformWindowSurfaceEXT"];
    PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC next =
        reinterpret_cast<PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC>(entry);
    EGLSurface ret = next(dpy, config, native_window, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLDisplay EGLAPIENTRY EGL_GetPlatformDisplayEXT(EGLenum platform,
                                                 void *native_display,
                                                 const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetPlatformDisplayEXT(platform = 0x%X, native_display = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 platform, (uintptr_t)native_display, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetPlatformDisplayEXT), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetPlatformDisplayEXT");
    //  Call down to the next layer
    void *entry                          = funcMap["eglGetPlatformDisplayEXT"];
    PFNEGLGETPLATFORMDISPLAYEXTPROC next = reinterpret_cast<PFNEGLGETPLATFORMDISPLAYEXTPROC>(entry);
    EGLDisplay ret                       = next(platform, native_display, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_DebugMessageControlKHR(EGLDEBUGPROCKHR callback,
                                              const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDebugMessageControlKHR(callback = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)callback, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDebugMessageControlKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDebugMessageControlKHR");
    //  Call down to the next layer
    void *entry = funcMap["eglDebugMessageControlKHR"];
    PFNEGLDEBUGMESSAGECONTROLKHRPROC next =
        reinterpret_cast<PFNEGLDEBUGMESSAGECONTROLKHRPROC>(entry);
    EGLint ret = next(callback, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_LabelObjectKHR(EGLDisplay display,
                                      EGLenum objectType,
                                      EGLObjectKHR object,
                                      EGLLabelKHR label)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglLabelObjectKHR(display = 0x%016" PRIxPTR
                 ", objectType = 0x%X, object = 0x%016" PRIxPTR ", label = 0x%016" PRIxPTR ")",
                 (uintptr_t)display, objectType, (uintptr_t)object, (uintptr_t)label);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLLabelObjectKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglLabelObjectKHR");
    //  Call down to the next layer
    void *entry                   = funcMap["eglLabelObjectKHR"];
    PFNEGLLABELOBJECTKHRPROC next = reinterpret_cast<PFNEGLLABELOBJECTKHRPROC>(entry);
    EGLint ret                    = next(display, objectType, object, label);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryDebugKHR(EGLint attribute, EGLAttrib *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "eglQueryDebugKHR(attribute = %d, value = 0x%016" PRIxPTR ")",
                 attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryDebugKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryDebugKHR");
    //  Call down to the next layer
    void *entry                  = funcMap["eglQueryDebugKHR"];
    PFNEGLQUERYDEBUGKHRPROC next = reinterpret_cast<PFNEGLQUERYDEBUGKHRPROC>(entry);
    EGLBoolean ret               = next(attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_ClientWaitSyncKHR(EGLDisplay dpy,
                                         EGLSyncKHR sync,
                                         EGLint flags,
                                         EGLTimeKHR timeout)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglClientWaitSyncKHR(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR
                 ", flags = %d, timeout = %llu)",
                 (uintptr_t)dpy, (uintptr_t)sync, flags, static_cast<unsigned long long>(timeout));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLClientWaitSyncKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglClientWaitSyncKHR");
    //  Call down to the next layer
    void *entry                      = funcMap["eglClientWaitSyncKHR"];
    PFNEGLCLIENTWAITSYNCKHRPROC next = reinterpret_cast<PFNEGLCLIENTWAITSYNCKHRPROC>(entry);
    EGLint ret                       = next(dpy, sync, flags, timeout);

    g_pop_debug_group();
    return ret;
}

EGLSyncKHR EGLAPIENTRY EGL_CreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateSyncKHR(dpy = 0x%016" PRIxPTR
                 ", type = 0x%X, attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, type, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateSyncKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateSyncKHR");
    //  Call down to the next layer
    void *entry                  = funcMap["eglCreateSyncKHR"];
    PFNEGLCREATESYNCKHRPROC next = reinterpret_cast<PFNEGLCREATESYNCKHRPROC>(entry);
    EGLSyncKHR ret               = next(dpy, type, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroySyncKHR(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)sync);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroySyncKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroySyncKHR");
    //  Call down to the next layer
    void *entry                   = funcMap["eglDestroySyncKHR"];
    PFNEGLDESTROYSYNCKHRPROC next = reinterpret_cast<PFNEGLDESTROYSYNCKHRPROC>(entry);
    EGLBoolean ret                = next(dpy, sync);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_GetSyncAttribKHR(EGLDisplay dpy,
                                            EGLSyncKHR sync,
                                            EGLint attribute,
                                            EGLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglGetSyncAttribKHR(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)sync, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLGetSyncAttribKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglGetSyncAttribKHR");
    //  Call down to the next layer
    void *entry                     = funcMap["eglGetSyncAttribKHR"];
    PFNEGLGETSYNCATTRIBKHRPROC next = reinterpret_cast<PFNEGLGETSYNCATTRIBKHRPROC>(entry);
    EGLBoolean ret                  = next(dpy, sync, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLImageKHR EGLAPIENTRY EGL_CreateImageKHR(EGLDisplay dpy,
                                           EGLContext ctx,
                                           EGLenum target,
                                           EGLClientBuffer buffer,
                                           const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateImageKHR(dpy = 0x%016" PRIxPTR ", ctx = 0x%016" PRIxPTR
                 ", target = 0x%X, buffer = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)ctx, target, (uintptr_t)buffer, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateImageKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateImageKHR");
    //  Call down to the next layer
    void *entry                   = funcMap["eglCreateImageKHR"];
    PFNEGLCREATEIMAGEKHRPROC next = reinterpret_cast<PFNEGLCREATEIMAGEKHRPROC>(entry);
    EGLImageKHR ret               = next(dpy, ctx, target, buffer, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroyImageKHR(dpy = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)image);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroyImageKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroyImageKHR");
    //  Call down to the next layer
    void *entry                    = funcMap["eglDestroyImageKHR"];
    PFNEGLDESTROYIMAGEKHRPROC next = reinterpret_cast<PFNEGLDESTROYIMAGEKHRPROC>(entry);
    EGLBoolean ret                 = next(dpy, image);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_LockSurfaceKHR(EGLDisplay dpy,
                                          EGLSurface surface,
                                          const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglLockSurfaceKHR(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLLockSurfaceKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglLockSurfaceKHR");
    //  Call down to the next layer
    void *entry                   = funcMap["eglLockSurfaceKHR"];
    PFNEGLLOCKSURFACEKHRPROC next = reinterpret_cast<PFNEGLLOCKSURFACEKHRPROC>(entry);
    EGLBoolean ret                = next(dpy, surface, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QuerySurface64KHR(EGLDisplay dpy,
                                             EGLSurface surface,
                                             EGLint attribute,
                                             EGLAttribKHR *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQuerySurface64KHR(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", attribute = %d, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQuerySurface64KHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQuerySurface64KHR");
    //  Call down to the next layer
    void *entry                      = funcMap["eglQuerySurface64KHR"];
    PFNEGLQUERYSURFACE64KHRPROC next = reinterpret_cast<PFNEGLQUERYSURFACE64KHRPROC>(entry);
    EGLBoolean ret                   = next(dpy, surface, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_UnlockSurfaceKHR(EGLDisplay dpy, EGLSurface surface)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglUnlockSurfaceKHR(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)surface);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLUnlockSurfaceKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglUnlockSurfaceKHR");
    //  Call down to the next layer
    void *entry                     = funcMap["eglUnlockSurfaceKHR"];
    PFNEGLUNLOCKSURFACEKHRPROC next = reinterpret_cast<PFNEGLUNLOCKSURFACEKHRPROC>(entry);
    EGLBoolean ret                  = next(dpy, surface);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SetDamageRegionKHR(EGLDisplay dpy,
                                              EGLSurface surface,
                                              EGLint *rects,
                                              EGLint n_rects)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSetDamageRegionKHR(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", rects = 0x%016" PRIxPTR ", n_rects = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)rects, n_rects);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSetDamageRegionKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSetDamageRegionKHR");
    //  Call down to the next layer
    void *entry                       = funcMap["eglSetDamageRegionKHR"];
    PFNEGLSETDAMAGEREGIONKHRPROC next = reinterpret_cast<PFNEGLSETDAMAGEREGIONKHRPROC>(entry);
    EGLBoolean ret                    = next(dpy, surface, rects, n_rects);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSignalSyncKHR(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ", mode = 0x%X)",
                 (uintptr_t)dpy, (uintptr_t)sync, mode);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSignalSyncKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSignalSyncKHR");
    //  Call down to the next layer
    void *entry                  = funcMap["eglSignalSyncKHR"];
    PFNEGLSIGNALSYNCKHRPROC next = reinterpret_cast<PFNEGLSIGNALSYNCKHRPROC>(entry);
    EGLBoolean ret               = next(dpy, sync, mode);

    g_pop_debug_group();
    return ret;
}

EGLStreamKHR EGLAPIENTRY EGL_CreateStreamKHR(EGLDisplay dpy, const EGLint *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglCreateStreamKHR(dpy = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)attrib_list);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLCreateStreamKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglCreateStreamKHR");
    //  Call down to the next layer
    void *entry                    = funcMap["eglCreateStreamKHR"];
    PFNEGLCREATESTREAMKHRPROC next = reinterpret_cast<PFNEGLCREATESTREAMKHRPROC>(entry);
    EGLStreamKHR ret               = next(dpy, attrib_list);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_DestroyStreamKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglDestroyStreamKHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLDestroyStreamKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglDestroyStreamKHR");
    //  Call down to the next layer
    void *entry                     = funcMap["eglDestroyStreamKHR"];
    PFNEGLDESTROYSTREAMKHRPROC next = reinterpret_cast<PFNEGLDESTROYSTREAMKHRPROC>(entry);
    EGLBoolean ret                  = next(dpy, stream);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryStreamKHR(EGLDisplay dpy,
                                          EGLStreamKHR stream,
                                          EGLenum attribute,
                                          EGLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryStreamKHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR
                 ", attribute = 0x%X, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryStreamKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryStreamKHR");
    //  Call down to the next layer
    void *entry                   = funcMap["eglQueryStreamKHR"];
    PFNEGLQUERYSTREAMKHRPROC next = reinterpret_cast<PFNEGLQUERYSTREAMKHRPROC>(entry);
    EGLBoolean ret                = next(dpy, stream, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_QueryStreamu64KHR(EGLDisplay dpy,
                                             EGLStreamKHR stream,
                                             EGLenum attribute,
                                             EGLuint64KHR *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglQueryStreamu64KHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR
                 ", attribute = 0x%X, value = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream, attribute, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLQueryStreamu64KHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglQueryStreamu64KHR");
    //  Call down to the next layer
    void *entry                      = funcMap["eglQueryStreamu64KHR"];
    PFNEGLQUERYSTREAMU64KHRPROC next = reinterpret_cast<PFNEGLQUERYSTREAMU64KHRPROC>(entry);
    EGLBoolean ret                   = next(dpy, stream, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamAttribKHR(EGLDisplay dpy,
                                           EGLStreamKHR stream,
                                           EGLenum attribute,
                                           EGLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamAttribKHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR
                 ", attribute = 0x%X, value = %d)",
                 (uintptr_t)dpy, (uintptr_t)stream, attribute, value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLStreamAttribKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamAttribKHR");
    //  Call down to the next layer
    void *entry                    = funcMap["eglStreamAttribKHR"];
    PFNEGLSTREAMATTRIBKHRPROC next = reinterpret_cast<PFNEGLSTREAMATTRIBKHRPROC>(entry);
    EGLBoolean ret                 = next(dpy, stream, attribute, value);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamConsumerAcquireKHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLStreamConsumerAcquireKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamConsumerAcquireKHR");
    //  Call down to the next layer
    void *entry = funcMap["eglStreamConsumerAcquireKHR"];
    PFNEGLSTREAMCONSUMERACQUIREKHRPROC next =
        reinterpret_cast<PFNEGLSTREAMCONSUMERACQUIREKHRPROC>(entry);
    EGLBoolean ret = next(dpy, stream);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamConsumerGLTextureExternalKHR(dpy = 0x%016" PRIxPTR
                 ", stream = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream);
    g_push_debug_group(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
        static_cast<GLuint>(angle::EntryPoint::EGLStreamConsumerGLTextureExternalKHR), -1,
        entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamConsumerGLTextureExternalKHR");
    //  Call down to the next layer
    void *entry = funcMap["eglStreamConsumerGLTextureExternalKHR"];
    PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC next =
        reinterpret_cast<PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC>(entry);
    EGLBoolean ret = next(dpy, stream);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamConsumerReleaseKHR(dpy = 0x%016" PRIxPTR ", stream = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLStreamConsumerReleaseKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamConsumerReleaseKHR");
    //  Call down to the next layer
    void *entry = funcMap["eglStreamConsumerReleaseKHR"];
    PFNEGLSTREAMCONSUMERRELEASEKHRPROC next =
        reinterpret_cast<PFNEGLSTREAMCONSUMERRELEASEKHRPROC>(entry);
    EGLBoolean ret = next(dpy, stream);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_SwapBuffersWithDamageKHR(EGLDisplay dpy,
                                                    EGLSurface surface,
                                                    const EGLint *rects,
                                                    EGLint n_rects)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglSwapBuffersWithDamageKHR(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", rects = 0x%016" PRIxPTR ", n_rects = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, (uintptr_t)rects, n_rects);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLSwapBuffersWithDamageKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglSwapBuffersWithDamageKHR");
    //  Call down to the next layer
    void *entry = funcMap["eglSwapBuffersWithDamageKHR"];
    PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC next =
        reinterpret_cast<PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC>(entry);
    EGLBoolean ret = next(dpy, surface, rects, n_rects);

    g_pop_debug_group();
    return ret;
}

EGLint EGLAPIENTRY EGL_WaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglWaitSyncKHR(dpy = 0x%016" PRIxPTR ", sync = 0x%016" PRIxPTR ", flags = %d)",
                 (uintptr_t)dpy, (uintptr_t)sync, flags);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLWaitSyncKHR), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglWaitSyncKHR");
    //  Call down to the next layer
    void *entry                = funcMap["eglWaitSyncKHR"];
    PFNEGLWAITSYNCKHRPROC next = reinterpret_cast<PFNEGLWAITSYNCKHRPROC>(entry);
    EGLint ret                 = next(dpy, sync, flags);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_PostSubBufferNV(EGLDisplay dpy,
                                           EGLSurface surface,
                                           EGLint x,
                                           EGLint y,
                                           EGLint width,
                                           EGLint height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglPostSubBufferNV(dpy = 0x%016" PRIxPTR ", surface = 0x%016" PRIxPTR
                 ", x = %d, y = %d, width = %d, height = %d)",
                 (uintptr_t)dpy, (uintptr_t)surface, x, y, width, height);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::EGLPostSubBufferNV), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglPostSubBufferNV");
    //  Call down to the next layer
    void *entry                    = funcMap["eglPostSubBufferNV"];
    PFNEGLPOSTSUBBUFFERNVPROC next = reinterpret_cast<PFNEGLPOSTSUBBUFFERNVPROC>(entry);
    EGLBoolean ret                 = next(dpy, surface, x, y, width, height);

    g_pop_debug_group();
    return ret;
}

EGLBoolean EGLAPIENTRY EGL_StreamConsumerGLTextureExternalAttribsNV(EGLDisplay dpy,
                                                                    EGLStreamKHR stream,
                                                                    const EGLAttrib *attrib_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "eglStreamConsumerGLTextureExternalAttribsNV(dpy = 0x%016" PRIxPTR
                 ", stream = 0x%016" PRIxPTR ", attrib_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)dpy, (uintptr_t)stream, (uintptr_t)attrib_list);
    g_push_debug_group(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
        static_cast<GLuint>(angle::EntryPoint::EGLStreamConsumerGLTextureExternalAttribsNV), -1,
        entryPointMessage);

    // ALOGI("%s", "LLLLL Function is eglStreamConsumerGLTextureExternalAttribsNV");
    //  Call down to the next layer
    void *entry = funcMap["eglStreamConsumerGLTextureExternalAttribsNV"];
    PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC next =
        reinterpret_cast<PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC>(entry);
    EGLBoolean ret = next(dpy, stream, attrib_list);

    g_pop_debug_group();
    return ret;
}

void setupEGL_EXTHooks()
{
    hookMap["eglSetBlobCacheFuncsANDROID"]        = (void *)EGL_SetBlobCacheFuncsANDROID;
    hookMap["eglCreateNativeClientBufferANDROID"] = (void *)EGL_CreateNativeClientBufferANDROID;
    hookMap["eglGetCompositorTimingSupportedANDROID"] =
        (void *)EGL_GetCompositorTimingSupportedANDROID;
    hookMap["eglGetCompositorTimingANDROID"]        = (void *)EGL_GetCompositorTimingANDROID;
    hookMap["eglGetNextFrameIdANDROID"]             = (void *)EGL_GetNextFrameIdANDROID;
    hookMap["eglGetFrameTimestampSupportedANDROID"] = (void *)EGL_GetFrameTimestampSupportedANDROID;
    hookMap["eglGetFrameTimestampsANDROID"]         = (void *)EGL_GetFrameTimestampsANDROID;
    hookMap["eglGetNativeClientBufferANDROID"]      = (void *)EGL_GetNativeClientBufferANDROID;
    hookMap["eglDupNativeFenceFDANDROID"]           = (void *)EGL_DupNativeFenceFDANDROID;
    hookMap["eglPresentationTimeANDROID"]           = (void *)EGL_PresentationTimeANDROID;
    hookMap["eglCreateDeviceANGLE"]                 = (void *)EGL_CreateDeviceANGLE;
    hookMap["eglReleaseDeviceANGLE"]                = (void *)EGL_ReleaseDeviceANGLE;
    hookMap["eglQueryStringiANGLE"]                 = (void *)EGL_QueryStringiANGLE;
    hookMap["eglQueryDisplayAttribANGLE"]           = (void *)EGL_QueryDisplayAttribANGLE;
    hookMap["eglReleaseHighPowerGPUANGLE"]          = (void *)EGL_ReleaseHighPowerGPUANGLE;
    hookMap["eglReacquireHighPowerGPUANGLE"]        = (void *)EGL_ReacquireHighPowerGPUANGLE;
    hookMap["eglHandleGPUSwitchANGLE"]              = (void *)EGL_HandleGPUSwitchANGLE;
    hookMap["eglForceGPUSwitchANGLE"]               = (void *)EGL_ForceGPUSwitchANGLE;
    hookMap["eglPrepareSwapBuffersANGLE"]           = (void *)EGL_PrepareSwapBuffersANGLE;
    hookMap["eglProgramCacheGetAttribANGLE"]        = (void *)EGL_ProgramCacheGetAttribANGLE;
    hookMap["eglProgramCacheQueryANGLE"]            = (void *)EGL_ProgramCacheQueryANGLE;
    hookMap["eglProgramCachePopulateANGLE"]         = (void *)EGL_ProgramCachePopulateANGLE;
    hookMap["eglProgramCacheResizeANGLE"]           = (void *)EGL_ProgramCacheResizeANGLE;
    hookMap["eglQuerySurfacePointerANGLE"]          = (void *)EGL_QuerySurfacePointerANGLE;
    hookMap["eglCreateStreamProducerD3DTextureANGLE"] =
        (void *)EGL_CreateStreamProducerD3DTextureANGLE;
    hookMap["eglStreamPostD3DTextureANGLE"]      = (void *)EGL_StreamPostD3DTextureANGLE;
    hookMap["eglSwapBuffersWithFrameTokenANGLE"] = (void *)EGL_SwapBuffersWithFrameTokenANGLE;
    hookMap["eglGetMscRateANGLE"]                = (void *)EGL_GetMscRateANGLE;
    hookMap["eglExportVkImageANGLE"]             = (void *)EGL_ExportVkImageANGLE;
    hookMap["eglGetSyncValuesCHROMIUM"]          = (void *)EGL_GetSyncValuesCHROMIUM;
    hookMap["eglQueryDeviceAttribEXT"]           = (void *)EGL_QueryDeviceAttribEXT;
    hookMap["eglQueryDeviceStringEXT"]           = (void *)EGL_QueryDeviceStringEXT;
    hookMap["eglQueryDisplayAttribEXT"]          = (void *)EGL_QueryDisplayAttribEXT;
    hookMap["eglQueryDmaBufFormatsEXT"]          = (void *)EGL_QueryDmaBufFormatsEXT;
    hookMap["eglQueryDmaBufModifiersEXT"]        = (void *)EGL_QueryDmaBufModifiersEXT;
    hookMap["eglCreatePlatformPixmapSurfaceEXT"] = (void *)EGL_CreatePlatformPixmapSurfaceEXT;
    hookMap["eglCreatePlatformWindowSurfaceEXT"] = (void *)EGL_CreatePlatformWindowSurfaceEXT;
    hookMap["eglGetPlatformDisplayEXT"]          = (void *)EGL_GetPlatformDisplayEXT;
    hookMap["eglDebugMessageControlKHR"]         = (void *)EGL_DebugMessageControlKHR;
    hookMap["eglLabelObjectKHR"]                 = (void *)EGL_LabelObjectKHR;
    hookMap["eglQueryDebugKHR"]                  = (void *)EGL_QueryDebugKHR;
    hookMap["eglClientWaitSyncKHR"]              = (void *)EGL_ClientWaitSyncKHR;
    hookMap["eglCreateSyncKHR"]                  = (void *)EGL_CreateSyncKHR;
    hookMap["eglDestroySyncKHR"]                 = (void *)EGL_DestroySyncKHR;
    hookMap["eglGetSyncAttribKHR"]               = (void *)EGL_GetSyncAttribKHR;
    hookMap["eglCreateImageKHR"]                 = (void *)EGL_CreateImageKHR;
    hookMap["eglDestroyImageKHR"]                = (void *)EGL_DestroyImageKHR;
    hookMap["eglLockSurfaceKHR"]                 = (void *)EGL_LockSurfaceKHR;
    hookMap["eglQuerySurface64KHR"]              = (void *)EGL_QuerySurface64KHR;
    hookMap["eglUnlockSurfaceKHR"]               = (void *)EGL_UnlockSurfaceKHR;
    hookMap["eglSetDamageRegionKHR"]             = (void *)EGL_SetDamageRegionKHR;
    hookMap["eglSignalSyncKHR"]                  = (void *)EGL_SignalSyncKHR;
    hookMap["eglCreateStreamKHR"]                = (void *)EGL_CreateStreamKHR;
    hookMap["eglDestroyStreamKHR"]               = (void *)EGL_DestroyStreamKHR;
    hookMap["eglQueryStreamKHR"]                 = (void *)EGL_QueryStreamKHR;
    hookMap["eglQueryStreamu64KHR"]              = (void *)EGL_QueryStreamu64KHR;
    hookMap["eglStreamAttribKHR"]                = (void *)EGL_StreamAttribKHR;
    hookMap["eglStreamConsumerAcquireKHR"]       = (void *)EGL_StreamConsumerAcquireKHR;
    hookMap["eglStreamConsumerGLTextureExternalKHR"] =
        (void *)EGL_StreamConsumerGLTextureExternalKHR;
    hookMap["eglStreamConsumerReleaseKHR"] = (void *)EGL_StreamConsumerReleaseKHR;
    hookMap["eglSwapBuffersWithDamageKHR"] = (void *)EGL_SwapBuffersWithDamageKHR;
    hookMap["eglWaitSyncKHR"]              = (void *)EGL_WaitSyncKHR;
    hookMap["eglPostSubBufferNV"]          = (void *)EGL_PostSubBufferNV;
    hookMap["eglStreamConsumerGLTextureExternalAttribsNV"] =
        (void *)EGL_StreamConsumerGLTextureExternalAttribsNV;
}

}  // namespace agi_layer
