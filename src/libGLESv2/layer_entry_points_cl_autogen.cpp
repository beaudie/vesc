// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_cl_autogen.cpp:
//   Layer functions for the OpenGL ES CL entry points.

#include "libGLESv2/layer_entry_points_cl_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "common/gl_enum_utils.h"
#include "labelLayer.h"

using namespace gl;

namespace agi_layer
{

typedef cl_int(CL_API_CALL *PFNCLGetPlatformIDs)(cl_uint num_entries,
                                                 cl_platform_id *platforms,
                                                 cl_uint *num_platforms);
cl_int CL_API_CALL clGetPlatformIDs(cl_uint num_entries,
                                    cl_platform_id *platforms,
                                    cl_uint *num_platforms)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetPlatformIDs(num_entries = %u, platforms = 0x%016" PRIxPTR
                 ", num_platforms = 0x%016" PRIxPTR ")",
                 num_entries, (uintptr_t)platforms, (uintptr_t)num_platforms);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetPlatformIDs),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clGetPlatformIDs"];
    PFNCLGetPlatformIDs next = reinterpret_cast<PFNCLGetPlatformIDs>(entry);
    return next(num_entries, platforms, num_platforms);
}

typedef cl_int(CL_API_CALL *PFNCLGetPlatformInfo)(cl_platform_id platform,
                                                  cl_platform_info param_name,
                                                  size_t param_value_size,
                                                  void *param_value,
                                                  size_t *param_value_size_ret);
cl_int CL_API_CALL clGetPlatformInfo(cl_platform_id platform,
                                     cl_platform_info param_name,
                                     size_t param_value_size,
                                     void *param_value,
                                     size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetPlatformInfo(platform = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)platform, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetPlatformInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clGetPlatformInfo"];
    PFNCLGetPlatformInfo next = reinterpret_cast<PFNCLGetPlatformInfo>(entry);
    return next(platform, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetDeviceIDs)(cl_platform_id platform,
                                               cl_device_type device_type,
                                               cl_uint num_entries,
                                               cl_device_id *devices,
                                               cl_uint *num_devices);
cl_int CL_API_CALL clGetDeviceIDs(cl_platform_id platform,
                                  cl_device_type device_type,
                                  cl_uint num_entries,
                                  cl_device_id *devices,
                                  cl_uint *num_devices)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetDeviceIDs(platform = 0x%016" PRIxPTR
                 ", device_type = %llu, num_entries = %u, devices = 0x%016" PRIxPTR
                 ", num_devices = 0x%016" PRIxPTR ")",
                 (uintptr_t)platform, static_cast<unsigned long long>(device_type), num_entries,
                 (uintptr_t)devices, (uintptr_t)num_devices);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetDeviceIDs),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clGetDeviceIDs"];
    PFNCLGetDeviceIDs next = reinterpret_cast<PFNCLGetDeviceIDs>(entry);
    return next(platform, device_type, num_entries, devices, num_devices);
}

typedef cl_int(CL_API_CALL *PFNCLGetDeviceInfo)(cl_device_id device,
                                                cl_device_info param_name,
                                                size_t param_value_size,
                                                void *param_value,
                                                size_t *param_value_size_ret);
cl_int CL_API_CALL clGetDeviceInfo(cl_device_id device,
                                   cl_device_info param_name,
                                   size_t param_value_size,
                                   void *param_value,
                                   size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetDeviceInfo(device = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)device, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetDeviceInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clGetDeviceInfo"];
    PFNCLGetDeviceInfo next = reinterpret_cast<PFNCLGetDeviceInfo>(entry);
    return next(device, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_context(CL_API_CALL *PFNCLCreateContext)(
    const cl_context_properties *properties,
    cl_uint num_devices,
    const cl_device_id *devices,
    void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                  const void *private_info,
                                  size_t cb,
                                  void *user_data),
    void *user_data,
    cl_int *errcode_ret);
cl_context CL_API_CALL clCreateContext(const cl_context_properties *properties,
                                       cl_uint num_devices,
                                       const cl_device_id *devices,
                                       void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                                                     const void *private_info,
                                                                     size_t cb,
                                                                     void *user_data),
                                       void *user_data,
                                       cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateContext(properties = 0x%016" PRIxPTR
                 ", num_devices = %u, devices = 0x%016" PRIxPTR ", pfn_notify = 0x%016" PRIxPTR
                 ", user_data = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)properties, num_devices, (uintptr_t)devices, (uintptr_t)pfn_notify,
                 (uintptr_t)user_data, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateContext),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clCreateContext"];
    PFNCLCreateContext next = reinterpret_cast<PFNCLCreateContext>(entry);
    return next(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);
}

typedef cl_context(CL_API_CALL *PFNCLCreateContextFromType)(
    const cl_context_properties *properties,
    cl_device_type device_type,
    void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                  const void *private_info,
                                  size_t cb,
                                  void *user_data),
    void *user_data,
    cl_int *errcode_ret);
cl_context CL_API_CALL
clCreateContextFromType(const cl_context_properties *properties,
                        cl_device_type device_type,
                        void(CL_CALLBACK *pfn_notify)(const char *errinfo,
                                                      const void *private_info,
                                                      size_t cb,
                                                      void *user_data),
                        void *user_data,
                        cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateContextFromType(properties = 0x%016" PRIxPTR
                 ", device_type = %llu, pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)properties, static_cast<unsigned long long>(device_type),
                 (uintptr_t)pfn_notify, (uintptr_t)user_data, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateContextFromType),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clCreateContextFromType"];
    PFNCLCreateContextFromType next = reinterpret_cast<PFNCLCreateContextFromType>(entry);
    return next(properties, device_type, pfn_notify, user_data, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainContext)(cl_context context);
cl_int CL_API_CALL clRetainContext(cl_context context)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainContext(context = 0x%016" PRIxPTR ")",
                 (uintptr_t)context);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainContext),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clRetainContext"];
    PFNCLRetainContext next = reinterpret_cast<PFNCLRetainContext>(entry);
    return next(context);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseContext)(cl_context context);
cl_int CL_API_CALL clReleaseContext(cl_context context)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseContext(context = 0x%016" PRIxPTR ")",
                 (uintptr_t)context);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseContext),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clReleaseContext"];
    PFNCLReleaseContext next = reinterpret_cast<PFNCLReleaseContext>(entry);
    return next(context);
}

typedef cl_int(CL_API_CALL *PFNCLGetContextInfo)(cl_context context,
                                                 cl_context_info param_name,
                                                 size_t param_value_size,
                                                 void *param_value,
                                                 size_t *param_value_size_ret);
cl_int CL_API_CALL clGetContextInfo(cl_context context,
                                    cl_context_info param_name,
                                    size_t param_value_size,
                                    void *param_value,
                                    size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetContextInfo(context = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetContextInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clGetContextInfo"];
    PFNCLGetContextInfo next = reinterpret_cast<PFNCLGetContextInfo>(entry);
    return next(context, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainCommandQueue)(cl_command_queue command_queue);
cl_int CL_API_CALL clRetainCommandQueue(cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainCommandQueue(command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainCommandQueue),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["clRetainCommandQueue"];
    PFNCLRetainCommandQueue next = reinterpret_cast<PFNCLRetainCommandQueue>(entry);
    return next(command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseCommandQueue)(cl_command_queue command_queue);
cl_int CL_API_CALL clReleaseCommandQueue(cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseCommandQueue(command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseCommandQueue),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["clReleaseCommandQueue"];
    PFNCLReleaseCommandQueue next = reinterpret_cast<PFNCLReleaseCommandQueue>(entry);
    return next(command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLGetCommandQueueInfo)(cl_command_queue command_queue,
                                                      cl_command_queue_info param_name,
                                                      size_t param_value_size,
                                                      void *param_value,
                                                      size_t *param_value_size_ret);
cl_int CL_API_CALL clGetCommandQueueInfo(cl_command_queue command_queue,
                                         cl_command_queue_info param_name,
                                         size_t param_value_size,
                                         void *param_value,
                                         size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetCommandQueueInfo(command_queue = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetCommandQueueInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["clGetCommandQueueInfo"];
    PFNCLGetCommandQueueInfo next = reinterpret_cast<PFNCLGetCommandQueueInfo>(entry);
    return next(command_queue, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateBuffer)(cl_context context,
                                               cl_mem_flags flags,
                                               size_t size,
                                               void *host_ptr,
                                               cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateBuffer(cl_context context,
                                  cl_mem_flags flags,
                                  size_t size,
                                  void *host_ptr,
                                  cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateBuffer(context = 0x%016" PRIxPTR
                 ", flags = %llu, size = %zu, host_ptr = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, static_cast<unsigned long long>(flags), size,
                 (uintptr_t)host_ptr, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clCreateBuffer"];
    PFNCLCreateBuffer next = reinterpret_cast<PFNCLCreateBuffer>(entry);
    return next(context, flags, size, host_ptr, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainMemObject)(cl_mem memobj);
cl_int CL_API_CALL clRetainMemObject(cl_mem memobj)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainMemObject(memobj = 0x%016" PRIxPTR ")",
                 (uintptr_t)memobj);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainMemObject),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clRetainMemObject"];
    PFNCLRetainMemObject next = reinterpret_cast<PFNCLRetainMemObject>(entry);
    return next(memobj);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseMemObject)(cl_mem memobj);
cl_int CL_API_CALL clReleaseMemObject(cl_mem memobj)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseMemObject(memobj = 0x%016" PRIxPTR ")",
                 (uintptr_t)memobj);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseMemObject),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clReleaseMemObject"];
    PFNCLReleaseMemObject next = reinterpret_cast<PFNCLReleaseMemObject>(entry);
    return next(memobj);
}

typedef cl_int(CL_API_CALL *PFNCLGetSupportedImageFormats)(cl_context context,
                                                           cl_mem_flags flags,
                                                           cl_mem_object_type image_type,
                                                           cl_uint num_entries,
                                                           cl_image_format *image_formats,
                                                           cl_uint *num_image_formats);
cl_int CL_API_CALL clGetSupportedImageFormats(cl_context context,
                                              cl_mem_flags flags,
                                              cl_mem_object_type image_type,
                                              cl_uint num_entries,
                                              cl_image_format *image_formats,
                                              cl_uint *num_image_formats)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetSupportedImageFormats(context = 0x%016" PRIxPTR
                 ", flags = %llu, image_type = %u, num_entries = %u, image_formats = 0x%016" PRIxPTR
                 ", num_image_formats = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, static_cast<unsigned long long>(flags), image_type,
                 num_entries, (uintptr_t)image_formats, (uintptr_t)num_image_formats);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetSupportedImageFormats),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["clGetSupportedImageFormats"];
    PFNCLGetSupportedImageFormats next = reinterpret_cast<PFNCLGetSupportedImageFormats>(entry);
    return next(context, flags, image_type, num_entries, image_formats, num_image_formats);
}

typedef cl_int(CL_API_CALL *PFNCLGetMemObjectInfo)(cl_mem memobj,
                                                   cl_mem_info param_name,
                                                   size_t param_value_size,
                                                   void *param_value,
                                                   size_t *param_value_size_ret);
cl_int CL_API_CALL clGetMemObjectInfo(cl_mem memobj,
                                      cl_mem_info param_name,
                                      size_t param_value_size,
                                      void *param_value,
                                      size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetMemObjectInfo(memobj = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)memobj, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetMemObjectInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clGetMemObjectInfo"];
    PFNCLGetMemObjectInfo next = reinterpret_cast<PFNCLGetMemObjectInfo>(entry);
    return next(memobj, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetImageInfo)(cl_mem image,
                                               cl_image_info param_name,
                                               size_t param_value_size,
                                               void *param_value,
                                               size_t *param_value_size_ret);
cl_int CL_API_CALL clGetImageInfo(cl_mem image,
                                  cl_image_info param_name,
                                  size_t param_value_size,
                                  void *param_value,
                                  size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetImageInfo(image = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)image, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetImageInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clGetImageInfo"];
    PFNCLGetImageInfo next = reinterpret_cast<PFNCLGetImageInfo>(entry);
    return next(image, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainSampler)(cl_sampler sampler);
cl_int CL_API_CALL clRetainSampler(cl_sampler sampler)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainSampler(sampler = 0x%016" PRIxPTR ")",
                 (uintptr_t)sampler);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainSampler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clRetainSampler"];
    PFNCLRetainSampler next = reinterpret_cast<PFNCLRetainSampler>(entry);
    return next(sampler);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseSampler)(cl_sampler sampler);
cl_int CL_API_CALL clReleaseSampler(cl_sampler sampler)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseSampler(sampler = 0x%016" PRIxPTR ")",
                 (uintptr_t)sampler);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseSampler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clReleaseSampler"];
    PFNCLReleaseSampler next = reinterpret_cast<PFNCLReleaseSampler>(entry);
    return next(sampler);
}

typedef cl_int(CL_API_CALL *PFNCLGetSamplerInfo)(cl_sampler sampler,
                                                 cl_sampler_info param_name,
                                                 size_t param_value_size,
                                                 void *param_value,
                                                 size_t *param_value_size_ret);
cl_int CL_API_CALL clGetSamplerInfo(cl_sampler sampler,
                                    cl_sampler_info param_name,
                                    size_t param_value_size,
                                    void *param_value,
                                    size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetSamplerInfo(sampler = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)sampler, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetSamplerInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clGetSamplerInfo"];
    PFNCLGetSamplerInfo next = reinterpret_cast<PFNCLGetSamplerInfo>(entry);
    return next(sampler, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_program(CL_API_CALL *PFNCLCreateProgramWithSource)(cl_context context,
                                                              cl_uint count,
                                                              const char **strings,
                                                              const size_t *lengths,
                                                              cl_int *errcode_ret);
cl_program CL_API_CALL clCreateProgramWithSource(cl_context context,
                                                 cl_uint count,
                                                 const char **strings,
                                                 const size_t *lengths,
                                                 cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateProgramWithSource(context = 0x%016" PRIxPTR
                 ", count = %u, strings = 0x%016" PRIxPTR ", lengths = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, count, (uintptr_t)strings, (uintptr_t)lengths,
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateProgramWithSource),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["clCreateProgramWithSource"];
    PFNCLCreateProgramWithSource next = reinterpret_cast<PFNCLCreateProgramWithSource>(entry);
    return next(context, count, strings, lengths, errcode_ret);
}

typedef cl_program(CL_API_CALL *PFNCLCreateProgramWithBinary)(cl_context context,
                                                              cl_uint num_devices,
                                                              const cl_device_id *device_list,
                                                              const size_t *lengths,
                                                              const unsigned char **binaries,
                                                              cl_int *binary_status,
                                                              cl_int *errcode_ret);
cl_program CL_API_CALL clCreateProgramWithBinary(cl_context context,
                                                 cl_uint num_devices,
                                                 const cl_device_id *device_list,
                                                 const size_t *lengths,
                                                 const unsigned char **binaries,
                                                 cl_int *binary_status,
                                                 cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateProgramWithBinary(context = 0x%016" PRIxPTR
                 ", num_devices = %u, device_list = 0x%016" PRIxPTR ", lengths = 0x%016" PRIxPTR
                 ", binaries = 0x%016" PRIxPTR ", binary_status = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, num_devices, (uintptr_t)device_list, (uintptr_t)lengths,
                 (uintptr_t)binaries, (uintptr_t)binary_status, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateProgramWithBinary),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["clCreateProgramWithBinary"];
    PFNCLCreateProgramWithBinary next = reinterpret_cast<PFNCLCreateProgramWithBinary>(entry);
    return next(context, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainProgram)(cl_program program);
cl_int CL_API_CALL clRetainProgram(cl_program program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainProgram(program = 0x%016" PRIxPTR ")",
                 (uintptr_t)program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clRetainProgram"];
    PFNCLRetainProgram next = reinterpret_cast<PFNCLRetainProgram>(entry);
    return next(program);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseProgram)(cl_program program);
cl_int CL_API_CALL clReleaseProgram(cl_program program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseProgram(program = 0x%016" PRIxPTR ")",
                 (uintptr_t)program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clReleaseProgram"];
    PFNCLReleaseProgram next = reinterpret_cast<PFNCLReleaseProgram>(entry);
    return next(program);
}

typedef cl_int(CL_API_CALL *PFNCLBuildProgram)(cl_program program,
                                               cl_uint num_devices,
                                               const cl_device_id *device_list,
                                               const char *options,
                                               void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                             void *user_data),
                                               void *user_data);
cl_int CL_API_CALL clBuildProgram(cl_program program,
                                  cl_uint num_devices,
                                  const cl_device_id *device_list,
                                  const char *options,
                                  void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                void *user_data),
                                  void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clBuildProgram(program = 0x%016" PRIxPTR
                 ", num_devices = %u, device_list = 0x%016" PRIxPTR ", options = 0x%016" PRIxPTR
                 ", pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, num_devices, (uintptr_t)device_list, (uintptr_t)options,
                 (uintptr_t)pfn_notify, (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLBuildProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clBuildProgram"];
    PFNCLBuildProgram next = reinterpret_cast<PFNCLBuildProgram>(entry);
    return next(program, num_devices, device_list, options, pfn_notify, user_data);
}

typedef cl_int(CL_API_CALL *PFNCLGetProgramInfo)(cl_program program,
                                                 cl_program_info param_name,
                                                 size_t param_value_size,
                                                 void *param_value,
                                                 size_t *param_value_size_ret);
cl_int CL_API_CALL clGetProgramInfo(cl_program program,
                                    cl_program_info param_name,
                                    size_t param_value_size,
                                    void *param_value,
                                    size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetProgramInfo(program = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetProgramInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clGetProgramInfo"];
    PFNCLGetProgramInfo next = reinterpret_cast<PFNCLGetProgramInfo>(entry);
    return next(program, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetProgramBuildInfo)(cl_program program,
                                                      cl_device_id device,
                                                      cl_program_build_info param_name,
                                                      size_t param_value_size,
                                                      void *param_value,
                                                      size_t *param_value_size_ret);
cl_int CL_API_CALL clGetProgramBuildInfo(cl_program program,
                                         cl_device_id device,
                                         cl_program_build_info param_name,
                                         size_t param_value_size,
                                         void *param_value,
                                         size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetProgramBuildInfo(program = 0x%016" PRIxPTR ", device = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, (uintptr_t)device, param_name, param_value_size,
                 (uintptr_t)param_value, (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetProgramBuildInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["clGetProgramBuildInfo"];
    PFNCLGetProgramBuildInfo next = reinterpret_cast<PFNCLGetProgramBuildInfo>(entry);
    return next(program, device, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_kernel(CL_API_CALL *PFNCLCreateKernel)(cl_program program,
                                                  const char *kernel_name,
                                                  cl_int *errcode_ret);
cl_kernel CL_API_CALL clCreateKernel(cl_program program,
                                     const char *kernel_name,
                                     cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateKernel(program = 0x%016" PRIxPTR ", kernel_name = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, (uintptr_t)kernel_name, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clCreateKernel"];
    PFNCLCreateKernel next = reinterpret_cast<PFNCLCreateKernel>(entry);
    return next(program, kernel_name, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLCreateKernelsInProgram)(cl_program program,
                                                         cl_uint num_kernels,
                                                         cl_kernel *kernels,
                                                         cl_uint *num_kernels_ret);
cl_int CL_API_CALL clCreateKernelsInProgram(cl_program program,
                                            cl_uint num_kernels,
                                            cl_kernel *kernels,
                                            cl_uint *num_kernels_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateKernelsInProgram(program = 0x%016" PRIxPTR
                 ", num_kernels = %u, kernels = 0x%016" PRIxPTR ", num_kernels_ret = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)program, num_kernels, (uintptr_t)kernels, (uintptr_t)num_kernels_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateKernelsInProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["clCreateKernelsInProgram"];
    PFNCLCreateKernelsInProgram next = reinterpret_cast<PFNCLCreateKernelsInProgram>(entry);
    return next(program, num_kernels, kernels, num_kernels_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainKernel)(cl_kernel kernel);
cl_int CL_API_CALL clRetainKernel(cl_kernel kernel)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainKernel(kernel = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clRetainKernel"];
    PFNCLRetainKernel next = reinterpret_cast<PFNCLRetainKernel>(entry);
    return next(kernel);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseKernel)(cl_kernel kernel);
cl_int CL_API_CALL clReleaseKernel(cl_kernel kernel)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseKernel(kernel = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clReleaseKernel"];
    PFNCLReleaseKernel next = reinterpret_cast<PFNCLReleaseKernel>(entry);
    return next(kernel);
}

typedef cl_int(CL_API_CALL *PFNCLSetKernelArg)(cl_kernel kernel,
                                               cl_uint arg_index,
                                               size_t arg_size,
                                               const void *arg_value);
cl_int CL_API_CALL clSetKernelArg(cl_kernel kernel,
                                  cl_uint arg_index,
                                  size_t arg_size,
                                  const void *arg_value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetKernelArg(kernel = 0x%016" PRIxPTR
                 ", arg_index = %u, arg_size = %zu, arg_value = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, arg_index, arg_size, (uintptr_t)arg_value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetKernelArg),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clSetKernelArg"];
    PFNCLSetKernelArg next = reinterpret_cast<PFNCLSetKernelArg>(entry);
    return next(kernel, arg_index, arg_size, arg_value);
}

typedef cl_int(CL_API_CALL *PFNCLGetKernelInfo)(cl_kernel kernel,
                                                cl_kernel_info param_name,
                                                size_t param_value_size,
                                                void *param_value,
                                                size_t *param_value_size_ret);
cl_int CL_API_CALL clGetKernelInfo(cl_kernel kernel,
                                   cl_kernel_info param_name,
                                   size_t param_value_size,
                                   void *param_value,
                                   size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetKernelInfo(kernel = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetKernelInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clGetKernelInfo"];
    PFNCLGetKernelInfo next = reinterpret_cast<PFNCLGetKernelInfo>(entry);
    return next(kernel, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetKernelWorkGroupInfo)(cl_kernel kernel,
                                                         cl_device_id device,
                                                         cl_kernel_work_group_info param_name,
                                                         size_t param_value_size,
                                                         void *param_value,
                                                         size_t *param_value_size_ret);
cl_int CL_API_CALL clGetKernelWorkGroupInfo(cl_kernel kernel,
                                            cl_device_id device,
                                            cl_kernel_work_group_info param_name,
                                            size_t param_value_size,
                                            void *param_value,
                                            size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetKernelWorkGroupInfo(kernel = 0x%016" PRIxPTR ", device = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, (uintptr_t)device, param_name, param_value_size,
                 (uintptr_t)param_value, (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetKernelWorkGroupInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["clGetKernelWorkGroupInfo"];
    PFNCLGetKernelWorkGroupInfo next = reinterpret_cast<PFNCLGetKernelWorkGroupInfo>(entry);
    return next(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLWaitForEvents)(cl_uint num_events, const cl_event *event_list);
cl_int CL_API_CALL clWaitForEvents(cl_uint num_events, const cl_event *event_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clWaitForEvents(num_events = %u, event_list = 0x%016" PRIxPTR ")", num_events,
                 (uintptr_t)event_list);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLWaitForEvents),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clWaitForEvents"];
    PFNCLWaitForEvents next = reinterpret_cast<PFNCLWaitForEvents>(entry);
    return next(num_events, event_list);
}

typedef cl_int(CL_API_CALL *PFNCLGetEventInfo)(cl_event event,
                                               cl_event_info param_name,
                                               size_t param_value_size,
                                               void *param_value,
                                               size_t *param_value_size_ret);
cl_int CL_API_CALL clGetEventInfo(cl_event event,
                                  cl_event_info param_name,
                                  size_t param_value_size,
                                  void *param_value,
                                  size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetEventInfo(event = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)event, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetEventInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clGetEventInfo"];
    PFNCLGetEventInfo next = reinterpret_cast<PFNCLGetEventInfo>(entry);
    return next(event, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainEvent)(cl_event event);
cl_int CL_API_CALL clRetainEvent(cl_event event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainEvent(event = 0x%016" PRIxPTR ")", (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainEvent),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clRetainEvent"];
    PFNCLRetainEvent next = reinterpret_cast<PFNCLRetainEvent>(entry);
    return next(event);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseEvent)(cl_event event);
cl_int CL_API_CALL clReleaseEvent(cl_event event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseEvent(event = 0x%016" PRIxPTR ")", (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseEvent),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clReleaseEvent"];
    PFNCLReleaseEvent next = reinterpret_cast<PFNCLReleaseEvent>(entry);
    return next(event);
}

typedef cl_int(CL_API_CALL *PFNCLGetEventProfilingInfo)(cl_event event,
                                                        cl_profiling_info param_name,
                                                        size_t param_value_size,
                                                        void *param_value,
                                                        size_t *param_value_size_ret);
cl_int CL_API_CALL clGetEventProfilingInfo(cl_event event,
                                           cl_profiling_info param_name,
                                           size_t param_value_size,
                                           void *param_value,
                                           size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetEventProfilingInfo(event = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)event, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetEventProfilingInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clGetEventProfilingInfo"];
    PFNCLGetEventProfilingInfo next = reinterpret_cast<PFNCLGetEventProfilingInfo>(entry);
    return next(event, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLFlush)(cl_command_queue command_queue);
cl_int CL_API_CALL clFlush(cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clFlush(command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLFlush),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry     = funcMap["clFlush"];
    PFNCLFlush next = reinterpret_cast<PFNCLFlush>(entry);
    return next(command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLFinish)(cl_command_queue command_queue);
cl_int CL_API_CALL clFinish(cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clFinish(command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLFinish),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry      = funcMap["clFinish"];
    PFNCLFinish next = reinterpret_cast<PFNCLFinish>(entry);
    return next(command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueReadBuffer)(cl_command_queue command_queue,
                                                    cl_mem buffer,
                                                    cl_bool blocking_read,
                                                    size_t offset,
                                                    size_t size,
                                                    void *ptr,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event);
cl_int CL_API_CALL clEnqueueReadBuffer(cl_command_queue command_queue,
                                       cl_mem buffer,
                                       cl_bool blocking_read,
                                       size_t offset,
                                       size_t size,
                                       void *ptr,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueReadBuffer(command_queue = 0x%016" PRIxPTR ", buffer = 0x%016" PRIxPTR
                 ", blocking_read = %u, offset = %zu, size = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, blocking_read, offset, size,
                 (uintptr_t)ptr, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueReadBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clEnqueueReadBuffer"];
    PFNCLEnqueueReadBuffer next = reinterpret_cast<PFNCLEnqueueReadBuffer>(entry);
    return next(command_queue, buffer, blocking_read, offset, size, ptr, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueWriteBuffer)(cl_command_queue command_queue,
                                                     cl_mem buffer,
                                                     cl_bool blocking_write,
                                                     size_t offset,
                                                     size_t size,
                                                     const void *ptr,
                                                     cl_uint num_events_in_wait_list,
                                                     const cl_event *event_wait_list,
                                                     cl_event *event);
cl_int CL_API_CALL clEnqueueWriteBuffer(cl_command_queue command_queue,
                                        cl_mem buffer,
                                        cl_bool blocking_write,
                                        size_t offset,
                                        size_t size,
                                        const void *ptr,
                                        cl_uint num_events_in_wait_list,
                                        const cl_event *event_wait_list,
                                        cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueWriteBuffer(command_queue = 0x%016" PRIxPTR ", buffer = 0x%016" PRIxPTR
                 ", blocking_write = %u, offset = %zu, size = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, blocking_write, offset, size,
                 (uintptr_t)ptr, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueWriteBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["clEnqueueWriteBuffer"];
    PFNCLEnqueueWriteBuffer next = reinterpret_cast<PFNCLEnqueueWriteBuffer>(entry);
    return next(command_queue, buffer, blocking_write, offset, size, ptr, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueCopyBuffer)(cl_command_queue command_queue,
                                                    cl_mem src_buffer,
                                                    cl_mem dst_buffer,
                                                    size_t src_offset,
                                                    size_t dst_offset,
                                                    size_t size,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event);
cl_int CL_API_CALL clEnqueueCopyBuffer(cl_command_queue command_queue,
                                       cl_mem src_buffer,
                                       cl_mem dst_buffer,
                                       size_t src_offset,
                                       size_t dst_offset,
                                       size_t size,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueCopyBuffer(command_queue = 0x%016" PRIxPTR
                 ", src_buffer = 0x%016" PRIxPTR ", dst_buffer = 0x%016" PRIxPTR
                 ", src_offset = %zu, dst_offset = %zu, size = %zu, num_events_in_wait_list = %u, "
                 "event_wait_list = 0x%016" PRIxPTR ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)src_buffer, (uintptr_t)dst_buffer, src_offset,
                 dst_offset, size, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueCopyBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clEnqueueCopyBuffer"];
    PFNCLEnqueueCopyBuffer next = reinterpret_cast<PFNCLEnqueueCopyBuffer>(entry);
    return next(command_queue, src_buffer, dst_buffer, src_offset, dst_offset, size,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueReadImage)(cl_command_queue command_queue,
                                                   cl_mem image,
                                                   cl_bool blocking_read,
                                                   const size_t *origin,
                                                   const size_t *region,
                                                   size_t row_pitch,
                                                   size_t slice_pitch,
                                                   void *ptr,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event);
cl_int CL_API_CALL clEnqueueReadImage(cl_command_queue command_queue,
                                      cl_mem image,
                                      cl_bool blocking_read,
                                      const size_t *origin,
                                      const size_t *region,
                                      size_t row_pitch,
                                      size_t slice_pitch,
                                      void *ptr,
                                      cl_uint num_events_in_wait_list,
                                      const cl_event *event_wait_list,
                                      cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueReadImage(command_queue = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR
                 ", blocking_read = %u, origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", row_pitch = %zu, slice_pitch = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)image, blocking_read, (uintptr_t)origin,
                 (uintptr_t)region, row_pitch, slice_pitch, (uintptr_t)ptr, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueReadImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clEnqueueReadImage"];
    PFNCLEnqueueReadImage next = reinterpret_cast<PFNCLEnqueueReadImage>(entry);
    return next(command_queue, image, blocking_read, origin, region, row_pitch, slice_pitch, ptr,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueWriteImage)(cl_command_queue command_queue,
                                                    cl_mem image,
                                                    cl_bool blocking_write,
                                                    const size_t *origin,
                                                    const size_t *region,
                                                    size_t input_row_pitch,
                                                    size_t input_slice_pitch,
                                                    const void *ptr,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event);
cl_int CL_API_CALL clEnqueueWriteImage(cl_command_queue command_queue,
                                       cl_mem image,
                                       cl_bool blocking_write,
                                       const size_t *origin,
                                       const size_t *region,
                                       size_t input_row_pitch,
                                       size_t input_slice_pitch,
                                       const void *ptr,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueWriteImage(command_queue = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR
                 ", blocking_write = %u, origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", input_row_pitch = %zu, input_slice_pitch = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)image, blocking_write, (uintptr_t)origin,
                 (uintptr_t)region, input_row_pitch, input_slice_pitch, (uintptr_t)ptr,
                 num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueWriteImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clEnqueueWriteImage"];
    PFNCLEnqueueWriteImage next = reinterpret_cast<PFNCLEnqueueWriteImage>(entry);
    return next(command_queue, image, blocking_write, origin, region, input_row_pitch,
                input_slice_pitch, ptr, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueCopyImage)(cl_command_queue command_queue,
                                                   cl_mem src_image,
                                                   cl_mem dst_image,
                                                   const size_t *src_origin,
                                                   const size_t *dst_origin,
                                                   const size_t *region,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event);
cl_int CL_API_CALL clEnqueueCopyImage(cl_command_queue command_queue,
                                      cl_mem src_image,
                                      cl_mem dst_image,
                                      const size_t *src_origin,
                                      const size_t *dst_origin,
                                      const size_t *region,
                                      cl_uint num_events_in_wait_list,
                                      const cl_event *event_wait_list,
                                      cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueCopyImage(command_queue = 0x%016" PRIxPTR ", src_image = 0x%016" PRIxPTR
                 ", dst_image = 0x%016" PRIxPTR ", src_origin = 0x%016" PRIxPTR
                 ", dst_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)src_image, (uintptr_t)dst_image,
                 (uintptr_t)src_origin, (uintptr_t)dst_origin, (uintptr_t)region,
                 num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueCopyImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clEnqueueCopyImage"];
    PFNCLEnqueueCopyImage next = reinterpret_cast<PFNCLEnqueueCopyImage>(entry);
    return next(command_queue, src_image, dst_image, src_origin, dst_origin, region,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueCopyImageToBuffer)(cl_command_queue command_queue,
                                                           cl_mem src_image,
                                                           cl_mem dst_buffer,
                                                           const size_t *src_origin,
                                                           const size_t *region,
                                                           size_t dst_offset,
                                                           cl_uint num_events_in_wait_list,
                                                           const cl_event *event_wait_list,
                                                           cl_event *event);
cl_int CL_API_CALL clEnqueueCopyImageToBuffer(cl_command_queue command_queue,
                                              cl_mem src_image,
                                              cl_mem dst_buffer,
                                              const size_t *src_origin,
                                              const size_t *region,
                                              size_t dst_offset,
                                              cl_uint num_events_in_wait_list,
                                              const cl_event *event_wait_list,
                                              cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clEnqueueCopyImageToBuffer(command_queue = 0x%016" PRIxPTR ", src_image = 0x%016" PRIxPTR
        ", dst_buffer = 0x%016" PRIxPTR ", src_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
        ", dst_offset = %zu, num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
        ", event = 0x%016" PRIxPTR ")",
        (uintptr_t)command_queue, (uintptr_t)src_image, (uintptr_t)dst_buffer,
        (uintptr_t)src_origin, (uintptr_t)region, dst_offset, num_events_in_wait_list,
        (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueCopyImageToBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["clEnqueueCopyImageToBuffer"];
    PFNCLEnqueueCopyImageToBuffer next = reinterpret_cast<PFNCLEnqueueCopyImageToBuffer>(entry);
    return next(command_queue, src_image, dst_buffer, src_origin, region, dst_offset,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueCopyBufferToImage)(cl_command_queue command_queue,
                                                           cl_mem src_buffer,
                                                           cl_mem dst_image,
                                                           size_t src_offset,
                                                           const size_t *dst_origin,
                                                           const size_t *region,
                                                           cl_uint num_events_in_wait_list,
                                                           const cl_event *event_wait_list,
                                                           cl_event *event);
cl_int CL_API_CALL clEnqueueCopyBufferToImage(cl_command_queue command_queue,
                                              cl_mem src_buffer,
                                              cl_mem dst_image,
                                              size_t src_offset,
                                              const size_t *dst_origin,
                                              const size_t *region,
                                              cl_uint num_events_in_wait_list,
                                              const cl_event *event_wait_list,
                                              cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueCopyBufferToImage(command_queue = 0x%016" PRIxPTR
                 ", src_buffer = 0x%016" PRIxPTR ", dst_image = 0x%016" PRIxPTR
                 ", src_offset = %zu, dst_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)src_buffer, (uintptr_t)dst_image, src_offset,
                 (uintptr_t)dst_origin, (uintptr_t)region, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueCopyBufferToImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["clEnqueueCopyBufferToImage"];
    PFNCLEnqueueCopyBufferToImage next = reinterpret_cast<PFNCLEnqueueCopyBufferToImage>(entry);
    return next(command_queue, src_buffer, dst_image, src_offset, dst_origin, region,
                num_events_in_wait_list, event_wait_list, event);
}

typedef void *(CL_API_CALL *PFNCLEnqueueMapBuffer)(cl_command_queue command_queue,
                                                   cl_mem buffer,
                                                   cl_bool blocking_map,
                                                   cl_map_flags map_flags,
                                                   size_t offset,
                                                   size_t size,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event,
                                                   cl_int *errcode_ret);
void *CL_API_CALL clEnqueueMapBuffer(cl_command_queue command_queue,
                                     cl_mem buffer,
                                     cl_bool blocking_map,
                                     cl_map_flags map_flags,
                                     size_t offset,
                                     size_t size,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event,
                                     cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueMapBuffer(command_queue = 0x%016" PRIxPTR ", buffer = 0x%016" PRIxPTR
                 ", blocking_map = %u, map_flags = %llu, offset = %zu, size = %zu, "
                 "num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, blocking_map,
                 static_cast<unsigned long long>(map_flags), offset, size, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueMapBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clEnqueueMapBuffer"];
    PFNCLEnqueueMapBuffer next = reinterpret_cast<PFNCLEnqueueMapBuffer>(entry);
    return next(command_queue, buffer, blocking_map, map_flags, offset, size,
                num_events_in_wait_list, event_wait_list, event, errcode_ret);
}

typedef void *(CL_API_CALL *PFNCLEnqueueMapImage)(cl_command_queue command_queue,
                                                  cl_mem image,
                                                  cl_bool blocking_map,
                                                  cl_map_flags map_flags,
                                                  const size_t *origin,
                                                  const size_t *region,
                                                  size_t *image_row_pitch,
                                                  size_t *image_slice_pitch,
                                                  cl_uint num_events_in_wait_list,
                                                  const cl_event *event_wait_list,
                                                  cl_event *event,
                                                  cl_int *errcode_ret);
void *CL_API_CALL clEnqueueMapImage(cl_command_queue command_queue,
                                    cl_mem image,
                                    cl_bool blocking_map,
                                    cl_map_flags map_flags,
                                    const size_t *origin,
                                    const size_t *region,
                                    size_t *image_row_pitch,
                                    size_t *image_slice_pitch,
                                    cl_uint num_events_in_wait_list,
                                    const cl_event *event_wait_list,
                                    cl_event *event,
                                    cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueMapImage(command_queue = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR
                 ", blocking_map = %u, map_flags = %llu, origin = 0x%016" PRIxPTR
                 ", region = 0x%016" PRIxPTR ", image_row_pitch = 0x%016" PRIxPTR
                 ", image_slice_pitch = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)image, blocking_map,
                 static_cast<unsigned long long>(map_flags), (uintptr_t)origin, (uintptr_t)region,
                 (uintptr_t)image_row_pitch, (uintptr_t)image_slice_pitch, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueMapImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clEnqueueMapImage"];
    PFNCLEnqueueMapImage next = reinterpret_cast<PFNCLEnqueueMapImage>(entry);
    return next(command_queue, image, blocking_map, map_flags, origin, region, image_row_pitch,
                image_slice_pitch, num_events_in_wait_list, event_wait_list, event, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueUnmapMemObject)(cl_command_queue command_queue,
                                                        cl_mem memobj,
                                                        void *mapped_ptr,
                                                        cl_uint num_events_in_wait_list,
                                                        const cl_event *event_wait_list,
                                                        cl_event *event);
cl_int CL_API_CALL clEnqueueUnmapMemObject(cl_command_queue command_queue,
                                           cl_mem memobj,
                                           void *mapped_ptr,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueUnmapMemObject(command_queue = 0x%016" PRIxPTR
                 ", memobj = 0x%016" PRIxPTR ", mapped_ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)memobj, (uintptr_t)mapped_ptr,
                 num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueUnmapMemObject),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clEnqueueUnmapMemObject"];
    PFNCLEnqueueUnmapMemObject next = reinterpret_cast<PFNCLEnqueueUnmapMemObject>(entry);
    return next(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueNDRangeKernel)(cl_command_queue command_queue,
                                                       cl_kernel kernel,
                                                       cl_uint work_dim,
                                                       const size_t *global_work_offset,
                                                       const size_t *global_work_size,
                                                       const size_t *local_work_size,
                                                       cl_uint num_events_in_wait_list,
                                                       const cl_event *event_wait_list,
                                                       cl_event *event);
cl_int CL_API_CALL clEnqueueNDRangeKernel(cl_command_queue command_queue,
                                          cl_kernel kernel,
                                          cl_uint work_dim,
                                          const size_t *global_work_offset,
                                          const size_t *global_work_size,
                                          const size_t *local_work_size,
                                          cl_uint num_events_in_wait_list,
                                          const cl_event *event_wait_list,
                                          cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueNDRangeKernel(command_queue = 0x%016" PRIxPTR ", kernel = 0x%016" PRIxPTR
                 ", work_dim = %u, global_work_offset = 0x%016" PRIxPTR
                 ", global_work_size = 0x%016" PRIxPTR ", local_work_size = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)kernel, work_dim,
                 (uintptr_t)global_work_offset, (uintptr_t)global_work_size,
                 (uintptr_t)local_work_size, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueNDRangeKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["clEnqueueNDRangeKernel"];
    PFNCLEnqueueNDRangeKernel next = reinterpret_cast<PFNCLEnqueueNDRangeKernel>(entry);
    return next(command_queue, kernel, work_dim, global_work_offset, global_work_size,
                local_work_size, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueNativeKernel)(cl_command_queue command_queue,
                                                      void(CL_CALLBACK *user_func)(void *),
                                                      void *args,
                                                      size_t cb_args,
                                                      cl_uint num_mem_objects,
                                                      const cl_mem *mem_list,
                                                      const void **args_mem_loc,
                                                      cl_uint num_events_in_wait_list,
                                                      const cl_event *event_wait_list,
                                                      cl_event *event);
cl_int CL_API_CALL clEnqueueNativeKernel(cl_command_queue command_queue,
                                         void(CL_CALLBACK *user_func)(void *),
                                         void *args,
                                         size_t cb_args,
                                         cl_uint num_mem_objects,
                                         const cl_mem *mem_list,
                                         const void **args_mem_loc,
                                         cl_uint num_events_in_wait_list,
                                         const cl_event *event_wait_list,
                                         cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueNativeKernel(command_queue = 0x%016" PRIxPTR
                 ", user_func = 0x%016" PRIxPTR ", args = 0x%016" PRIxPTR
                 ", cb_args = %zu, num_mem_objects = %u, mem_list = 0x%016" PRIxPTR
                 ", args_mem_loc = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)user_func, (uintptr_t)args, cb_args,
                 num_mem_objects, (uintptr_t)mem_list, (uintptr_t)args_mem_loc,
                 num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueNativeKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["clEnqueueNativeKernel"];
    PFNCLEnqueueNativeKernel next = reinterpret_cast<PFNCLEnqueueNativeKernel>(entry);
    return next(command_queue, user_func, args, cb_args, num_mem_objects, mem_list, args_mem_loc,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLSetCommandQueueProperty)(
    cl_command_queue command_queue,
    cl_command_queue_properties properties,
    cl_bool enable,
    cl_command_queue_properties *old_properties);
cl_int CL_API_CALL clSetCommandQueueProperty(cl_command_queue command_queue,
                                             cl_command_queue_properties properties,
                                             cl_bool enable,
                                             cl_command_queue_properties *old_properties)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetCommandQueueProperty(command_queue = 0x%016" PRIxPTR
                 ", properties = %llu, enable = %u, old_properties = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, static_cast<unsigned long long>(properties), enable,
                 (uintptr_t)old_properties);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetCommandQueueProperty),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["clSetCommandQueueProperty"];
    PFNCLSetCommandQueueProperty next = reinterpret_cast<PFNCLSetCommandQueueProperty>(entry);
    return next(command_queue, properties, enable, old_properties);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateImage2D)(cl_context context,
                                                cl_mem_flags flags,
                                                const cl_image_format *image_format,
                                                size_t image_width,
                                                size_t image_height,
                                                size_t image_row_pitch,
                                                void *host_ptr,
                                                cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateImage2D(cl_context context,
                                   cl_mem_flags flags,
                                   const cl_image_format *image_format,
                                   size_t image_width,
                                   size_t image_height,
                                   size_t image_row_pitch,
                                   void *host_ptr,
                                   cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clCreateImage2D(context = 0x%016" PRIxPTR ", flags = %llu, image_format = 0x%016" PRIxPTR
        ", image_width = %zu, image_height = %zu, image_row_pitch = %zu, host_ptr = 0x%016" PRIxPTR
        ", errcode_ret = 0x%016" PRIxPTR ")",
        (uintptr_t)context, static_cast<unsigned long long>(flags), (uintptr_t)image_format,
        image_width, image_height, image_row_pitch, (uintptr_t)host_ptr, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clCreateImage2D"];
    PFNCLCreateImage2D next = reinterpret_cast<PFNCLCreateImage2D>(entry);
    return next(context, flags, image_format, image_width, image_height, image_row_pitch, host_ptr,
                errcode_ret);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateImage3D)(cl_context context,
                                                cl_mem_flags flags,
                                                const cl_image_format *image_format,
                                                size_t image_width,
                                                size_t image_height,
                                                size_t image_depth,
                                                size_t image_row_pitch,
                                                size_t image_slice_pitch,
                                                void *host_ptr,
                                                cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateImage3D(cl_context context,
                                   cl_mem_flags flags,
                                   const cl_image_format *image_format,
                                   size_t image_width,
                                   size_t image_height,
                                   size_t image_depth,
                                   size_t image_row_pitch,
                                   size_t image_slice_pitch,
                                   void *host_ptr,
                                   cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clCreateImage3D(context = 0x%016" PRIxPTR ", flags = %llu, image_format = 0x%016" PRIxPTR
        ", image_width = %zu, image_height = %zu, image_depth = %zu, image_row_pitch = %zu, "
        "image_slice_pitch = %zu, host_ptr = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
        (uintptr_t)context, static_cast<unsigned long long>(flags), (uintptr_t)image_format,
        image_width, image_height, image_depth, image_row_pitch, image_slice_pitch,
        (uintptr_t)host_ptr, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateImage3D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clCreateImage3D"];
    PFNCLCreateImage3D next = reinterpret_cast<PFNCLCreateImage3D>(entry);
    return next(context, flags, image_format, image_width, image_height, image_depth,
                image_row_pitch, image_slice_pitch, host_ptr, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueMarker)(cl_command_queue command_queue, cl_event *event);
cl_int CL_API_CALL clEnqueueMarker(cl_command_queue command_queue, cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueMarker(command_queue = 0x%016" PRIxPTR ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueMarker),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clEnqueueMarker"];
    PFNCLEnqueueMarker next = reinterpret_cast<PFNCLEnqueueMarker>(entry);
    return next(command_queue, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueWaitForEvents)(cl_command_queue command_queue,
                                                       cl_uint num_events,
                                                       const cl_event *event_list);
cl_int CL_API_CALL clEnqueueWaitForEvents(cl_command_queue command_queue,
                                          cl_uint num_events,
                                          const cl_event *event_list)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueWaitForEvents(command_queue = 0x%016" PRIxPTR
                 ", num_events = %u, event_list = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_events, (uintptr_t)event_list);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueWaitForEvents),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["clEnqueueWaitForEvents"];
    PFNCLEnqueueWaitForEvents next = reinterpret_cast<PFNCLEnqueueWaitForEvents>(entry);
    return next(command_queue, num_events, event_list);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueBarrier)(cl_command_queue command_queue);
cl_int CL_API_CALL clEnqueueBarrier(cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clEnqueueBarrier(command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueBarrier),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clEnqueueBarrier"];
    PFNCLEnqueueBarrier next = reinterpret_cast<PFNCLEnqueueBarrier>(entry);
    return next(command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLUnloadCompiler)();
cl_int CL_API_CALL clUnloadCompiler()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clUnloadCompiler()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLUnloadCompiler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clUnloadCompiler"];
    PFNCLUnloadCompiler next = reinterpret_cast<PFNCLUnloadCompiler>(entry);
    return next();
}

typedef void *(CL_API_CALL *PFNCLGetExtensionFunctionAddress)(const char *func_name);
void *CL_API_CALL clGetExtensionFunctionAddress(const char *func_name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clGetExtensionFunctionAddress(func_name = 0x%016" PRIxPTR ")",
                 (uintptr_t)func_name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetExtensionFunctionAddress),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clGetExtensionFunctionAddress"];
    PFNCLGetExtensionFunctionAddress next =
        reinterpret_cast<PFNCLGetExtensionFunctionAddress>(entry);
    return next(func_name);
}

typedef cl_command_queue(CL_API_CALL *PFNCLCreateCommandQueue)(
    cl_context context,
    cl_device_id device,
    cl_command_queue_properties properties,
    cl_int *errcode_ret);
cl_command_queue CL_API_CALL clCreateCommandQueue(cl_context context,
                                                  cl_device_id device,
                                                  cl_command_queue_properties properties,
                                                  cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateCommandQueue(context = 0x%016" PRIxPTR ", device = 0x%016" PRIxPTR
                 ", properties = %llu, errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)device, static_cast<unsigned long long>(properties),
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateCommandQueue),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["clCreateCommandQueue"];
    PFNCLCreateCommandQueue next = reinterpret_cast<PFNCLCreateCommandQueue>(entry);
    return next(context, device, properties, errcode_ret);
}

typedef cl_sampler(CL_API_CALL *PFNCLCreateSampler)(cl_context context,
                                                    cl_bool normalized_coords,
                                                    cl_addressing_mode addressing_mode,
                                                    cl_filter_mode filter_mode,
                                                    cl_int *errcode_ret);
cl_sampler CL_API_CALL clCreateSampler(cl_context context,
                                       cl_bool normalized_coords,
                                       cl_addressing_mode addressing_mode,
                                       cl_filter_mode filter_mode,
                                       cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateSampler(context = 0x%016" PRIxPTR
                 ", normalized_coords = %u, addressing_mode = %u, filter_mode = %u, errcode_ret = "
                 "0x%016" PRIxPTR ")",
                 (uintptr_t)context, normalized_coords, addressing_mode, filter_mode,
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateSampler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clCreateSampler"];
    PFNCLCreateSampler next = reinterpret_cast<PFNCLCreateSampler>(entry);
    return next(context, normalized_coords, addressing_mode, filter_mode, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueTask)(cl_command_queue command_queue,
                                              cl_kernel kernel,
                                              cl_uint num_events_in_wait_list,
                                              const cl_event *event_wait_list,
                                              cl_event *event);
cl_int CL_API_CALL clEnqueueTask(cl_command_queue command_queue,
                                 cl_kernel kernel,
                                 cl_uint num_events_in_wait_list,
                                 const cl_event *event_wait_list,
                                 cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueTask(command_queue = 0x%016" PRIxPTR ", kernel = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)kernel, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueTask),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clEnqueueTask"];
    PFNCLEnqueueTask next = reinterpret_cast<PFNCLEnqueueTask>(entry);
    return next(command_queue, kernel, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateSubBuffer)(cl_mem buffer,
                                                  cl_mem_flags flags,
                                                  cl_buffer_create_type buffer_create_type,
                                                  const void *buffer_create_info,
                                                  cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateSubBuffer(cl_mem buffer,
                                     cl_mem_flags flags,
                                     cl_buffer_create_type buffer_create_type,
                                     const void *buffer_create_info,
                                     cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateSubBuffer(buffer = 0x%016" PRIxPTR
                 ", flags = %llu, buffer_create_type = %u, buffer_create_info = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)buffer, static_cast<unsigned long long>(flags), buffer_create_type,
                 (uintptr_t)buffer_create_info, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateSubBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clCreateSubBuffer"];
    PFNCLCreateSubBuffer next = reinterpret_cast<PFNCLCreateSubBuffer>(entry);
    return next(buffer, flags, buffer_create_type, buffer_create_info, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLSetMemObjectDestructorCallback)(
    cl_mem memobj,
    void(CL_CALLBACK *pfn_notify)(cl_mem memobj, void *user_data),
    void *user_data);
cl_int CL_API_CALL clSetMemObjectDestructorCallback(cl_mem memobj,
                                                    void(CL_CALLBACK *pfn_notify)(cl_mem memobj,
                                                                                  void *user_data),
                                                    void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetMemObjectDestructorCallback(memobj = 0x%016" PRIxPTR
                 ", pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)memobj, (uintptr_t)pfn_notify, (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetMemObjectDestructorCallback),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clSetMemObjectDestructorCallback"];
    PFNCLSetMemObjectDestructorCallback next =
        reinterpret_cast<PFNCLSetMemObjectDestructorCallback>(entry);
    return next(memobj, pfn_notify, user_data);
}

typedef cl_event(CL_API_CALL *PFNCLCreateUserEvent)(cl_context context, cl_int *errcode_ret);
cl_event CL_API_CALL clCreateUserEvent(cl_context context, cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateUserEvent(context = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateUserEvent),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clCreateUserEvent"];
    PFNCLCreateUserEvent next = reinterpret_cast<PFNCLCreateUserEvent>(entry);
    return next(context, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLSetUserEventStatus)(cl_event event, cl_int execution_status);
cl_int CL_API_CALL clSetUserEventStatus(cl_event event, cl_int execution_status)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetUserEventStatus(event = 0x%016" PRIxPTR ", execution_status = %d)",
                 (uintptr_t)event, execution_status);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetUserEventStatus),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["clSetUserEventStatus"];
    PFNCLSetUserEventStatus next = reinterpret_cast<PFNCLSetUserEventStatus>(entry);
    return next(event, execution_status);
}

typedef cl_int(CL_API_CALL *PFNCLSetEventCallback)(
    cl_event event,
    cl_int command_exec_callback_type,
    void(CL_CALLBACK *pfn_notify)(cl_event event, cl_int event_command_status, void *user_data),
    void *user_data);
cl_int CL_API_CALL clSetEventCallback(cl_event event,
                                      cl_int command_exec_callback_type,
                                      void(CL_CALLBACK *pfn_notify)(cl_event event,
                                                                    cl_int event_command_status,
                                                                    void *user_data),
                                      void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetEventCallback(event = 0x%016" PRIxPTR
                 ", command_exec_callback_type = %d, pfn_notify = 0x%016" PRIxPTR
                 ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)event, command_exec_callback_type, (uintptr_t)pfn_notify,
                 (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetEventCallback),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clSetEventCallback"];
    PFNCLSetEventCallback next = reinterpret_cast<PFNCLSetEventCallback>(entry);
    return next(event, command_exec_callback_type, pfn_notify, user_data);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueReadBufferRect)(cl_command_queue command_queue,
                                                        cl_mem buffer,
                                                        cl_bool blocking_read,
                                                        const size_t *buffer_origin,
                                                        const size_t *host_origin,
                                                        const size_t *region,
                                                        size_t buffer_row_pitch,
                                                        size_t buffer_slice_pitch,
                                                        size_t host_row_pitch,
                                                        size_t host_slice_pitch,
                                                        void *ptr,
                                                        cl_uint num_events_in_wait_list,
                                                        const cl_event *event_wait_list,
                                                        cl_event *event);
cl_int CL_API_CALL clEnqueueReadBufferRect(cl_command_queue command_queue,
                                           cl_mem buffer,
                                           cl_bool blocking_read,
                                           const size_t *buffer_origin,
                                           const size_t *host_origin,
                                           const size_t *region,
                                           size_t buffer_row_pitch,
                                           size_t buffer_slice_pitch,
                                           size_t host_row_pitch,
                                           size_t host_slice_pitch,
                                           void *ptr,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueReadBufferRect(command_queue = 0x%016" PRIxPTR
                 ", buffer = 0x%016" PRIxPTR ", blocking_read = %u, buffer_origin = 0x%016" PRIxPTR
                 ", host_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", buffer_row_pitch = %zu, buffer_slice_pitch = %zu, host_row_pitch = %zu, "
                 "host_slice_pitch = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, blocking_read,
                 (uintptr_t)buffer_origin, (uintptr_t)host_origin, (uintptr_t)region,
                 buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch,
                 (uintptr_t)ptr, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueReadBufferRect),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clEnqueueReadBufferRect"];
    PFNCLEnqueueReadBufferRect next = reinterpret_cast<PFNCLEnqueueReadBufferRect>(entry);
    return next(command_queue, buffer, blocking_read, buffer_origin, host_origin, region,
                buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueWriteBufferRect)(cl_command_queue command_queue,
                                                         cl_mem buffer,
                                                         cl_bool blocking_write,
                                                         const size_t *buffer_origin,
                                                         const size_t *host_origin,
                                                         const size_t *region,
                                                         size_t buffer_row_pitch,
                                                         size_t buffer_slice_pitch,
                                                         size_t host_row_pitch,
                                                         size_t host_slice_pitch,
                                                         const void *ptr,
                                                         cl_uint num_events_in_wait_list,
                                                         const cl_event *event_wait_list,
                                                         cl_event *event);
cl_int CL_API_CALL clEnqueueWriteBufferRect(cl_command_queue command_queue,
                                            cl_mem buffer,
                                            cl_bool blocking_write,
                                            const size_t *buffer_origin,
                                            const size_t *host_origin,
                                            const size_t *region,
                                            size_t buffer_row_pitch,
                                            size_t buffer_slice_pitch,
                                            size_t host_row_pitch,
                                            size_t host_slice_pitch,
                                            const void *ptr,
                                            cl_uint num_events_in_wait_list,
                                            const cl_event *event_wait_list,
                                            cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueWriteBufferRect(command_queue = 0x%016" PRIxPTR
                 ", buffer = 0x%016" PRIxPTR ", blocking_write = %u, buffer_origin = 0x%016" PRIxPTR
                 ", host_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
                 ", buffer_row_pitch = %zu, buffer_slice_pitch = %zu, host_row_pitch = %zu, "
                 "host_slice_pitch = %zu, ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, blocking_write,
                 (uintptr_t)buffer_origin, (uintptr_t)host_origin, (uintptr_t)region,
                 buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch,
                 (uintptr_t)ptr, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueWriteBufferRect),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["clEnqueueWriteBufferRect"];
    PFNCLEnqueueWriteBufferRect next = reinterpret_cast<PFNCLEnqueueWriteBufferRect>(entry);
    return next(command_queue, buffer, blocking_write, buffer_origin, host_origin, region,
                buffer_row_pitch, buffer_slice_pitch, host_row_pitch, host_slice_pitch, ptr,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueCopyBufferRect)(cl_command_queue command_queue,
                                                        cl_mem src_buffer,
                                                        cl_mem dst_buffer,
                                                        const size_t *src_origin,
                                                        const size_t *dst_origin,
                                                        const size_t *region,
                                                        size_t src_row_pitch,
                                                        size_t src_slice_pitch,
                                                        size_t dst_row_pitch,
                                                        size_t dst_slice_pitch,
                                                        cl_uint num_events_in_wait_list,
                                                        const cl_event *event_wait_list,
                                                        cl_event *event);
cl_int CL_API_CALL clEnqueueCopyBufferRect(cl_command_queue command_queue,
                                           cl_mem src_buffer,
                                           cl_mem dst_buffer,
                                           const size_t *src_origin,
                                           const size_t *dst_origin,
                                           const size_t *region,
                                           size_t src_row_pitch,
                                           size_t src_slice_pitch,
                                           size_t dst_row_pitch,
                                           size_t dst_slice_pitch,
                                           cl_uint num_events_in_wait_list,
                                           const cl_event *event_wait_list,
                                           cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clEnqueueCopyBufferRect(command_queue = 0x%016" PRIxPTR ", src_buffer = 0x%016" PRIxPTR
        ", dst_buffer = 0x%016" PRIxPTR ", src_origin = 0x%016" PRIxPTR
        ", dst_origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
        ", src_row_pitch = %zu, src_slice_pitch = %zu, dst_row_pitch = %zu, dst_slice_pitch = %zu, "
        "num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR ", event = 0x%016" PRIxPTR
        ")",
        (uintptr_t)command_queue, (uintptr_t)src_buffer, (uintptr_t)dst_buffer,
        (uintptr_t)src_origin, (uintptr_t)dst_origin, (uintptr_t)region, src_row_pitch,
        src_slice_pitch, dst_row_pitch, dst_slice_pitch, num_events_in_wait_list,
        (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueCopyBufferRect),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clEnqueueCopyBufferRect"];
    PFNCLEnqueueCopyBufferRect next = reinterpret_cast<PFNCLEnqueueCopyBufferRect>(entry);
    return next(command_queue, src_buffer, dst_buffer, src_origin, dst_origin, region,
                src_row_pitch, src_slice_pitch, dst_row_pitch, dst_slice_pitch,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLCreateSubDevices)(cl_device_id in_device,
                                                   const cl_device_partition_property *properties,
                                                   cl_uint num_devices,
                                                   cl_device_id *out_devices,
                                                   cl_uint *num_devices_ret);
cl_int CL_API_CALL clCreateSubDevices(cl_device_id in_device,
                                      const cl_device_partition_property *properties,
                                      cl_uint num_devices,
                                      cl_device_id *out_devices,
                                      cl_uint *num_devices_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateSubDevices(in_device = 0x%016" PRIxPTR ", properties = 0x%016" PRIxPTR
                 ", num_devices = %u, out_devices = 0x%016" PRIxPTR
                 ", num_devices_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)in_device, (uintptr_t)properties, num_devices, (uintptr_t)out_devices,
                 (uintptr_t)num_devices_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateSubDevices),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clCreateSubDevices"];
    PFNCLCreateSubDevices next = reinterpret_cast<PFNCLCreateSubDevices>(entry);
    return next(in_device, properties, num_devices, out_devices, num_devices_ret);
}

typedef cl_int(CL_API_CALL *PFNCLRetainDevice)(cl_device_id device);
cl_int CL_API_CALL clRetainDevice(cl_device_id device)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clRetainDevice(device = 0x%016" PRIxPTR ")",
                 (uintptr_t)device);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLRetainDevice),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clRetainDevice"];
    PFNCLRetainDevice next = reinterpret_cast<PFNCLRetainDevice>(entry);
    return next(device);
}

typedef cl_int(CL_API_CALL *PFNCLReleaseDevice)(cl_device_id device);
cl_int CL_API_CALL clReleaseDevice(cl_device_id device)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clReleaseDevice(device = 0x%016" PRIxPTR ")",
                 (uintptr_t)device);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLReleaseDevice),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clReleaseDevice"];
    PFNCLReleaseDevice next = reinterpret_cast<PFNCLReleaseDevice>(entry);
    return next(device);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateImage)(cl_context context,
                                              cl_mem_flags flags,
                                              const cl_image_format *image_format,
                                              const cl_image_desc *image_desc,
                                              void *host_ptr,
                                              cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateImage(cl_context context,
                                 cl_mem_flags flags,
                                 const cl_image_format *image_format,
                                 const cl_image_desc *image_desc,
                                 void *host_ptr,
                                 cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateImage(context = 0x%016" PRIxPTR
                 ", flags = %llu, image_format = 0x%016" PRIxPTR ", image_desc = 0x%016" PRIxPTR
                 ", host_ptr = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, static_cast<unsigned long long>(flags),
                 (uintptr_t)image_format, (uintptr_t)image_desc, (uintptr_t)host_ptr,
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clCreateImage"];
    PFNCLCreateImage next = reinterpret_cast<PFNCLCreateImage>(entry);
    return next(context, flags, image_format, image_desc, host_ptr, errcode_ret);
}

typedef cl_program(CL_API_CALL *PFNCLCreateProgramWithBuiltInKernels)(
    cl_context context,
    cl_uint num_devices,
    const cl_device_id *device_list,
    const char *kernel_names,
    cl_int *errcode_ret);
cl_program CL_API_CALL clCreateProgramWithBuiltInKernels(cl_context context,
                                                         cl_uint num_devices,
                                                         const cl_device_id *device_list,
                                                         const char *kernel_names,
                                                         cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateProgramWithBuiltInKernels(context = 0x%016" PRIxPTR
                 ", num_devices = %u, device_list = 0x%016" PRIxPTR
                 ", kernel_names = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, num_devices, (uintptr_t)device_list, (uintptr_t)kernel_names,
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::CLCreateProgramWithBuiltInKernels),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clCreateProgramWithBuiltInKernels"];
    PFNCLCreateProgramWithBuiltInKernels next =
        reinterpret_cast<PFNCLCreateProgramWithBuiltInKernels>(entry);
    return next(context, num_devices, device_list, kernel_names, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLCompileProgram)(cl_program program,
                                                 cl_uint num_devices,
                                                 const cl_device_id *device_list,
                                                 const char *options,
                                                 cl_uint num_input_headers,
                                                 const cl_program *input_headers,
                                                 const char **header_include_names,
                                                 void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                               void *user_data),
                                                 void *user_data);
cl_int CL_API_CALL clCompileProgram(cl_program program,
                                    cl_uint num_devices,
                                    const cl_device_id *device_list,
                                    const char *options,
                                    cl_uint num_input_headers,
                                    const cl_program *input_headers,
                                    const char **header_include_names,
                                    void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                  void *user_data),
                                    void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCompileProgram(program = 0x%016" PRIxPTR
                 ", num_devices = %u, device_list = 0x%016" PRIxPTR ", options = 0x%016" PRIxPTR
                 ", num_input_headers = %u, input_headers = 0x%016" PRIxPTR
                 ", header_include_names = 0x%016" PRIxPTR ", pfn_notify = 0x%016" PRIxPTR
                 ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, num_devices, (uintptr_t)device_list, (uintptr_t)options,
                 num_input_headers, (uintptr_t)input_headers, (uintptr_t)header_include_names,
                 (uintptr_t)pfn_notify, (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCompileProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clCompileProgram"];
    PFNCLCompileProgram next = reinterpret_cast<PFNCLCompileProgram>(entry);
    return next(program, num_devices, device_list, options, num_input_headers, input_headers,
                header_include_names, pfn_notify, user_data);
}

typedef cl_program(CL_API_CALL *PFNCLLinkProgram)(cl_context context,
                                                  cl_uint num_devices,
                                                  const cl_device_id *device_list,
                                                  const char *options,
                                                  cl_uint num_input_programs,
                                                  const cl_program *input_programs,
                                                  void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                                void *user_data),
                                                  void *user_data,
                                                  cl_int *errcode_ret);
cl_program CL_API_CALL clLinkProgram(cl_context context,
                                     cl_uint num_devices,
                                     const cl_device_id *device_list,
                                     const char *options,
                                     cl_uint num_input_programs,
                                     const cl_program *input_programs,
                                     void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                   void *user_data),
                                     void *user_data,
                                     cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clLinkProgram(context = 0x%016" PRIxPTR
                 ", num_devices = %u, device_list = 0x%016" PRIxPTR ", options = 0x%016" PRIxPTR
                 ", num_input_programs = %u, input_programs = 0x%016" PRIxPTR
                 ", pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, num_devices, (uintptr_t)device_list, (uintptr_t)options,
                 num_input_programs, (uintptr_t)input_programs, (uintptr_t)pfn_notify,
                 (uintptr_t)user_data, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLLinkProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clLinkProgram"];
    PFNCLLinkProgram next = reinterpret_cast<PFNCLLinkProgram>(entry);
    return next(context, num_devices, device_list, options, num_input_programs, input_programs,
                pfn_notify, user_data, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLUnloadPlatformCompiler)(cl_platform_id platform);
cl_int CL_API_CALL clUnloadPlatformCompiler(cl_platform_id platform)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "clUnloadPlatformCompiler(platform = 0x%016" PRIxPTR ")",
                 (uintptr_t)platform);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLUnloadPlatformCompiler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["clUnloadPlatformCompiler"];
    PFNCLUnloadPlatformCompiler next = reinterpret_cast<PFNCLUnloadPlatformCompiler>(entry);
    return next(platform);
}

typedef cl_int(CL_API_CALL *PFNCLGetKernelArgInfo)(cl_kernel kernel,
                                                   cl_uint arg_index,
                                                   cl_kernel_arg_info param_name,
                                                   size_t param_value_size,
                                                   void *param_value,
                                                   size_t *param_value_size_ret);
cl_int CL_API_CALL clGetKernelArgInfo(cl_kernel kernel,
                                      cl_uint arg_index,
                                      cl_kernel_arg_info param_name,
                                      size_t param_value_size,
                                      void *param_value,
                                      size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clGetKernelArgInfo(kernel = 0x%016" PRIxPTR
        ", arg_index = %u, param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
        ", param_value_size_ret = 0x%016" PRIxPTR ")",
        (uintptr_t)kernel, arg_index, param_name, param_value_size, (uintptr_t)param_value,
        (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetKernelArgInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clGetKernelArgInfo"];
    PFNCLGetKernelArgInfo next = reinterpret_cast<PFNCLGetKernelArgInfo>(entry);
    return next(kernel, arg_index, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueFillBuffer)(cl_command_queue command_queue,
                                                    cl_mem buffer,
                                                    const void *pattern,
                                                    size_t pattern_size,
                                                    size_t offset,
                                                    size_t size,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event);
cl_int CL_API_CALL clEnqueueFillBuffer(cl_command_queue command_queue,
                                       cl_mem buffer,
                                       const void *pattern,
                                       size_t pattern_size,
                                       size_t offset,
                                       size_t size,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueFillBuffer(command_queue = 0x%016" PRIxPTR ", buffer = 0x%016" PRIxPTR
                 ", pattern = 0x%016" PRIxPTR
                 ", pattern_size = %zu, offset = %zu, size = %zu, num_events_in_wait_list = %u, "
                 "event_wait_list = 0x%016" PRIxPTR ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)buffer, (uintptr_t)pattern, pattern_size,
                 offset, size, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueFillBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clEnqueueFillBuffer"];
    PFNCLEnqueueFillBuffer next = reinterpret_cast<PFNCLEnqueueFillBuffer>(entry);
    return next(command_queue, buffer, pattern, pattern_size, offset, size, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueFillImage)(cl_command_queue command_queue,
                                                   cl_mem image,
                                                   const void *fill_color,
                                                   const size_t *origin,
                                                   const size_t *region,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event);
cl_int CL_API_CALL clEnqueueFillImage(cl_command_queue command_queue,
                                      cl_mem image,
                                      const void *fill_color,
                                      const size_t *origin,
                                      const size_t *region,
                                      cl_uint num_events_in_wait_list,
                                      const cl_event *event_wait_list,
                                      cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clEnqueueFillImage(command_queue = 0x%016" PRIxPTR ", image = 0x%016" PRIxPTR
        ", fill_color = 0x%016" PRIxPTR ", origin = 0x%016" PRIxPTR ", region = 0x%016" PRIxPTR
        ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
        ", event = 0x%016" PRIxPTR ")",
        (uintptr_t)command_queue, (uintptr_t)image, (uintptr_t)fill_color, (uintptr_t)origin,
        (uintptr_t)region, num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueFillImage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clEnqueueFillImage"];
    PFNCLEnqueueFillImage next = reinterpret_cast<PFNCLEnqueueFillImage>(entry);
    return next(command_queue, image, fill_color, origin, region, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueMigrateMemObjects)(cl_command_queue command_queue,
                                                           cl_uint num_mem_objects,
                                                           const cl_mem *mem_objects,
                                                           cl_mem_migration_flags flags,
                                                           cl_uint num_events_in_wait_list,
                                                           const cl_event *event_wait_list,
                                                           cl_event *event);
cl_int CL_API_CALL clEnqueueMigrateMemObjects(cl_command_queue command_queue,
                                              cl_uint num_mem_objects,
                                              const cl_mem *mem_objects,
                                              cl_mem_migration_flags flags,
                                              cl_uint num_events_in_wait_list,
                                              const cl_event *event_wait_list,
                                              cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueMigrateMemObjects(command_queue = 0x%016" PRIxPTR
                 ", num_mem_objects = %u, mem_objects = 0x%016" PRIxPTR
                 ", flags = %llu, num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_mem_objects, (uintptr_t)mem_objects,
                 static_cast<unsigned long long>(flags), num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueMigrateMemObjects),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["clEnqueueMigrateMemObjects"];
    PFNCLEnqueueMigrateMemObjects next = reinterpret_cast<PFNCLEnqueueMigrateMemObjects>(entry);
    return next(command_queue, num_mem_objects, mem_objects, flags, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueMarkerWithWaitList)(cl_command_queue command_queue,
                                                            cl_uint num_events_in_wait_list,
                                                            const cl_event *event_wait_list,
                                                            cl_event *event);
cl_int CL_API_CALL clEnqueueMarkerWithWaitList(cl_command_queue command_queue,
                                               cl_uint num_events_in_wait_list,
                                               const cl_event *event_wait_list,
                                               cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueMarkerWithWaitList(command_queue = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueMarkerWithWaitList),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["clEnqueueMarkerWithWaitList"];
    PFNCLEnqueueMarkerWithWaitList next = reinterpret_cast<PFNCLEnqueueMarkerWithWaitList>(entry);
    return next(command_queue, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueBarrierWithWaitList)(cl_command_queue command_queue,
                                                             cl_uint num_events_in_wait_list,
                                                             const cl_event *event_wait_list,
                                                             cl_event *event);
cl_int CL_API_CALL clEnqueueBarrierWithWaitList(cl_command_queue command_queue,
                                                cl_uint num_events_in_wait_list,
                                                const cl_event *event_wait_list,
                                                cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueBarrierWithWaitList(command_queue = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueBarrierWithWaitList),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["clEnqueueBarrierWithWaitList"];
    PFNCLEnqueueBarrierWithWaitList next = reinterpret_cast<PFNCLEnqueueBarrierWithWaitList>(entry);
    return next(command_queue, num_events_in_wait_list, event_wait_list, event);
}

typedef void *(CL_API_CALL *PFNCLGetExtensionFunctionAddressForPlatform)(cl_platform_id platform,
                                                                         const char *func_name);
void *CL_API_CALL clGetExtensionFunctionAddressForPlatform(cl_platform_id platform,
                                                           const char *func_name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetExtensionFunctionAddressForPlatform(platform = 0x%016" PRIxPTR
                 ", func_name = 0x%016" PRIxPTR ")",
                 (uintptr_t)platform, (uintptr_t)func_name);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::CLGetExtensionFunctionAddressForPlatform),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clGetExtensionFunctionAddressForPlatform"];
    PFNCLGetExtensionFunctionAddressForPlatform next =
        reinterpret_cast<PFNCLGetExtensionFunctionAddressForPlatform>(entry);
    return next(platform, func_name);
}

typedef cl_command_queue(CL_API_CALL *PFNCLCreateCommandQueueWithProperties)(
    cl_context context,
    cl_device_id device,
    const cl_queue_properties *properties,
    cl_int *errcode_ret);
cl_command_queue CL_API_CALL
clCreateCommandQueueWithProperties(cl_context context,
                                   cl_device_id device,
                                   const cl_queue_properties *properties,
                                   cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clCreateCommandQueueWithProperties(context = 0x%016" PRIxPTR ", device = 0x%016" PRIxPTR
        ", properties = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
        (uintptr_t)context, (uintptr_t)device, (uintptr_t)properties, (uintptr_t)errcode_ret);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::CLCreateCommandQueueWithProperties),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clCreateCommandQueueWithProperties"];
    PFNCLCreateCommandQueueWithProperties next =
        reinterpret_cast<PFNCLCreateCommandQueueWithProperties>(entry);
    return next(context, device, properties, errcode_ret);
}

typedef cl_mem(CL_API_CALL *PFNCLCreatePipe)(cl_context context,
                                             cl_mem_flags flags,
                                             cl_uint pipe_packet_size,
                                             cl_uint pipe_max_packets,
                                             const cl_pipe_properties *properties,
                                             cl_int *errcode_ret);
cl_mem CL_API_CALL clCreatePipe(cl_context context,
                                cl_mem_flags flags,
                                cl_uint pipe_packet_size,
                                cl_uint pipe_max_packets,
                                const cl_pipe_properties *properties,
                                cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "clCreatePipe(context = 0x%016" PRIxPTR
        ", flags = %llu, pipe_packet_size = %u, pipe_max_packets = %u, properties = 0x%016" PRIxPTR
        ", errcode_ret = 0x%016" PRIxPTR ")",
        (uintptr_t)context, static_cast<unsigned long long>(flags), pipe_packet_size,
        pipe_max_packets, (uintptr_t)properties, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreatePipe),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["clCreatePipe"];
    PFNCLCreatePipe next = reinterpret_cast<PFNCLCreatePipe>(entry);
    return next(context, flags, pipe_packet_size, pipe_max_packets, properties, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetPipeInfo)(cl_mem pipe,
                                              cl_pipe_info param_name,
                                              size_t param_value_size,
                                              void *param_value,
                                              size_t *param_value_size_ret);
cl_int CL_API_CALL clGetPipeInfo(cl_mem pipe,
                                 cl_pipe_info param_name,
                                 size_t param_value_size,
                                 void *param_value,
                                 size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetPipeInfo(pipe = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)pipe, param_name, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetPipeInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clGetPipeInfo"];
    PFNCLGetPipeInfo next = reinterpret_cast<PFNCLGetPipeInfo>(entry);
    return next(pipe, param_name, param_value_size, param_value, param_value_size_ret);
}

typedef void *(CL_API_CALL *PFNCLSVMAlloc)(cl_context context,
                                           cl_svm_mem_flags flags,
                                           size_t size,
                                           cl_uint alignment);
void *CL_API_CALL clSVMAlloc(cl_context context,
                             cl_svm_mem_flags flags,
                             size_t size,
                             cl_uint alignment)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSVMAlloc(context = 0x%016" PRIxPTR
                 ", flags = %llu, size = %zu, alignment = %u)",
                 (uintptr_t)context, static_cast<unsigned long long>(flags), size, alignment);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSVMAlloc),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry        = funcMap["clSVMAlloc"];
    PFNCLSVMAlloc next = reinterpret_cast<PFNCLSVMAlloc>(entry);
    return next(context, flags, size, alignment);
}

typedef void *(CL_API_CALL *PFNCLSVMFree)(cl_context context, void *svm_pointer);
void CL_API_CALL clSVMFree(cl_context context, void *svm_pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSVMFree(context = 0x%016" PRIxPTR ", svm_pointer = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)svm_pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSVMFree),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry       = funcMap["clSVMFree"];
    PFNCLSVMFree next = reinterpret_cast<PFNCLSVMFree>(entry);
    next(context, svm_pointer);
}

typedef cl_sampler(CL_API_CALL *PFNCLCreateSamplerWithProperties)(
    cl_context context,
    const cl_sampler_properties *sampler_properties,
    cl_int *errcode_ret);
cl_sampler CL_API_CALL
clCreateSamplerWithProperties(cl_context context,
                              const cl_sampler_properties *sampler_properties,
                              cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateSamplerWithProperties(context = 0x%016" PRIxPTR
                 ", sampler_properties = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)sampler_properties, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateSamplerWithProperties),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clCreateSamplerWithProperties"];
    PFNCLCreateSamplerWithProperties next =
        reinterpret_cast<PFNCLCreateSamplerWithProperties>(entry);
    return next(context, sampler_properties, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLSetKernelArgSVMPointer)(cl_kernel kernel,
                                                         cl_uint arg_index,
                                                         const void *arg_value);
cl_int CL_API_CALL clSetKernelArgSVMPointer(cl_kernel kernel,
                                            cl_uint arg_index,
                                            const void *arg_value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetKernelArgSVMPointer(kernel = 0x%016" PRIxPTR
                 ", arg_index = %u, arg_value = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, arg_index, (uintptr_t)arg_value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetKernelArgSVMPointer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["clSetKernelArgSVMPointer"];
    PFNCLSetKernelArgSVMPointer next = reinterpret_cast<PFNCLSetKernelArgSVMPointer>(entry);
    return next(kernel, arg_index, arg_value);
}

typedef cl_int(CL_API_CALL *PFNCLSetKernelExecInfo)(cl_kernel kernel,
                                                    cl_kernel_exec_info param_name,
                                                    size_t param_value_size,
                                                    const void *param_value);
cl_int CL_API_CALL clSetKernelExecInfo(cl_kernel kernel,
                                       cl_kernel_exec_info param_name,
                                       size_t param_value_size,
                                       const void *param_value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetKernelExecInfo(kernel = 0x%016" PRIxPTR
                 ", param_name = %u, param_value_size = %zu, param_value = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, param_name, param_value_size, (uintptr_t)param_value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetKernelExecInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clSetKernelExecInfo"];
    PFNCLSetKernelExecInfo next = reinterpret_cast<PFNCLSetKernelExecInfo>(entry);
    return next(kernel, param_name, param_value_size, param_value);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMFree)(
    cl_command_queue command_queue,
    cl_uint num_svm_pointers,
    void *svm_pointers[],
    void(CL_CALLBACK *pfn_free_func)(cl_command_queue queue,
                                     cl_uint num_svm_pointers,
                                     void *svm_pointers[],
                                     void *user_data),
    void *user_data,
    cl_uint num_events_in_wait_list,
    const cl_event *event_wait_list,
    cl_event *event);
cl_int CL_API_CALL clEnqueueSVMFree(cl_command_queue command_queue,
                                    cl_uint num_svm_pointers,
                                    void *svm_pointers[],
                                    void(CL_CALLBACK *pfn_free_func)(cl_command_queue queue,
                                                                     cl_uint num_svm_pointers,
                                                                     void *svm_pointers[],
                                                                     void *user_data),
                                    void *user_data,
                                    cl_uint num_events_in_wait_list,
                                    const cl_event *event_wait_list,
                                    cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMFree(command_queue = 0x%016" PRIxPTR
                 ", num_svm_pointers = %u, svm_pointers = 0x%016" PRIxPTR
                 ", pfn_free_func = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_svm_pointers, (uintptr_t)svm_pointers,
                 (uintptr_t)pfn_free_func, (uintptr_t)user_data, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMFree),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["clEnqueueSVMFree"];
    PFNCLEnqueueSVMFree next = reinterpret_cast<PFNCLEnqueueSVMFree>(entry);
    return next(command_queue, num_svm_pointers, svm_pointers, pfn_free_func, user_data,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMMemcpy)(cl_command_queue command_queue,
                                                   cl_bool blocking_copy,
                                                   void *dst_ptr,
                                                   const void *src_ptr,
                                                   size_t size,
                                                   cl_uint num_events_in_wait_list,
                                                   const cl_event *event_wait_list,
                                                   cl_event *event);
cl_int CL_API_CALL clEnqueueSVMMemcpy(cl_command_queue command_queue,
                                      cl_bool blocking_copy,
                                      void *dst_ptr,
                                      const void *src_ptr,
                                      size_t size,
                                      cl_uint num_events_in_wait_list,
                                      const cl_event *event_wait_list,
                                      cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMMemcpy(command_queue = 0x%016" PRIxPTR
                 ", blocking_copy = %u, dst_ptr = 0x%016" PRIxPTR ", src_ptr = 0x%016" PRIxPTR
                 ", size = %zu, num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, blocking_copy, (uintptr_t)dst_ptr, (uintptr_t)src_ptr,
                 size, num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMMemcpy),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["clEnqueueSVMMemcpy"];
    PFNCLEnqueueSVMMemcpy next = reinterpret_cast<PFNCLEnqueueSVMMemcpy>(entry);
    return next(command_queue, blocking_copy, dst_ptr, src_ptr, size, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMMemFill)(cl_command_queue command_queue,
                                                    void *svm_ptr,
                                                    const void *pattern,
                                                    size_t pattern_size,
                                                    size_t size,
                                                    cl_uint num_events_in_wait_list,
                                                    const cl_event *event_wait_list,
                                                    cl_event *event);
cl_int CL_API_CALL clEnqueueSVMMemFill(cl_command_queue command_queue,
                                       void *svm_ptr,
                                       const void *pattern,
                                       size_t pattern_size,
                                       size_t size,
                                       cl_uint num_events_in_wait_list,
                                       const cl_event *event_wait_list,
                                       cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMMemFill(command_queue = 0x%016" PRIxPTR ", svm_ptr = 0x%016" PRIxPTR
                 ", pattern = 0x%016" PRIxPTR
                 ", pattern_size = %zu, size = %zu, num_events_in_wait_list = %u, event_wait_list "
                 "= 0x%016" PRIxPTR ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)svm_ptr, (uintptr_t)pattern, pattern_size,
                 size, num_events_in_wait_list, (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMMemFill),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["clEnqueueSVMMemFill"];
    PFNCLEnqueueSVMMemFill next = reinterpret_cast<PFNCLEnqueueSVMMemFill>(entry);
    return next(command_queue, svm_ptr, pattern, pattern_size, size, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMMap)(cl_command_queue command_queue,
                                                cl_bool blocking_map,
                                                cl_map_flags flags,
                                                void *svm_ptr,
                                                size_t size,
                                                cl_uint num_events_in_wait_list,
                                                const cl_event *event_wait_list,
                                                cl_event *event);
cl_int CL_API_CALL clEnqueueSVMMap(cl_command_queue command_queue,
                                   cl_bool blocking_map,
                                   cl_map_flags flags,
                                   void *svm_ptr,
                                   size_t size,
                                   cl_uint num_events_in_wait_list,
                                   const cl_event *event_wait_list,
                                   cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMMap(command_queue = 0x%016" PRIxPTR
                 ", blocking_map = %u, flags = %llu, svm_ptr = 0x%016" PRIxPTR
                 ", size = %zu, num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, blocking_map, static_cast<unsigned long long>(flags),
                 (uintptr_t)svm_ptr, size, num_events_in_wait_list, (uintptr_t)event_wait_list,
                 (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMMap),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["clEnqueueSVMMap"];
    PFNCLEnqueueSVMMap next = reinterpret_cast<PFNCLEnqueueSVMMap>(entry);
    return next(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list,
                event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMUnmap)(cl_command_queue command_queue,
                                                  void *svm_ptr,
                                                  cl_uint num_events_in_wait_list,
                                                  const cl_event *event_wait_list,
                                                  cl_event *event);
cl_int CL_API_CALL clEnqueueSVMUnmap(cl_command_queue command_queue,
                                     void *svm_ptr,
                                     cl_uint num_events_in_wait_list,
                                     const cl_event *event_wait_list,
                                     cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMUnmap(command_queue = 0x%016" PRIxPTR ", svm_ptr = 0x%016" PRIxPTR
                 ", num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, (uintptr_t)svm_ptr, num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMUnmap),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["clEnqueueSVMUnmap"];
    PFNCLEnqueueSVMUnmap next = reinterpret_cast<PFNCLEnqueueSVMUnmap>(entry);
    return next(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLSetDefaultDeviceCommandQueue)(cl_context context,
                                                               cl_device_id device,
                                                               cl_command_queue command_queue);
cl_int CL_API_CALL clSetDefaultDeviceCommandQueue(cl_context context,
                                                  cl_device_id device,
                                                  cl_command_queue command_queue)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetDefaultDeviceCommandQueue(context = 0x%016" PRIxPTR
                 ", device = 0x%016" PRIxPTR ", command_queue = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)device, (uintptr_t)command_queue);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetDefaultDeviceCommandQueue),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clSetDefaultDeviceCommandQueue"];
    PFNCLSetDefaultDeviceCommandQueue next =
        reinterpret_cast<PFNCLSetDefaultDeviceCommandQueue>(entry);
    return next(context, device, command_queue);
}

typedef cl_int(CL_API_CALL *PFNCLGetDeviceAndHostTimer)(cl_device_id device,
                                                        cl_ulong *device_timestamp,
                                                        cl_ulong *host_timestamp);
cl_int CL_API_CALL clGetDeviceAndHostTimer(cl_device_id device,
                                           cl_ulong *device_timestamp,
                                           cl_ulong *host_timestamp)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetDeviceAndHostTimer(device = 0x%016" PRIxPTR
                 ", device_timestamp = 0x%016" PRIxPTR ", host_timestamp = 0x%016" PRIxPTR ")",
                 (uintptr_t)device, (uintptr_t)device_timestamp, (uintptr_t)host_timestamp);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetDeviceAndHostTimer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clGetDeviceAndHostTimer"];
    PFNCLGetDeviceAndHostTimer next = reinterpret_cast<PFNCLGetDeviceAndHostTimer>(entry);
    return next(device, device_timestamp, host_timestamp);
}

typedef cl_int(CL_API_CALL *PFNCLGetHostTimer)(cl_device_id device, cl_ulong *host_timestamp);
cl_int CL_API_CALL clGetHostTimer(cl_device_id device, cl_ulong *host_timestamp)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetHostTimer(device = 0x%016" PRIxPTR ", host_timestamp = 0x%016" PRIxPTR ")",
                 (uintptr_t)device, (uintptr_t)host_timestamp);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetHostTimer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["clGetHostTimer"];
    PFNCLGetHostTimer next = reinterpret_cast<PFNCLGetHostTimer>(entry);
    return next(device, host_timestamp);
}

typedef cl_program(CL_API_CALL *PFNCLCreateProgramWithIL)(cl_context context,
                                                          const void *il,
                                                          size_t length,
                                                          cl_int *errcode_ret);
cl_program CL_API_CALL clCreateProgramWithIL(cl_context context,
                                             const void *il,
                                             size_t length,
                                             cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateProgramWithIL(context = 0x%016" PRIxPTR ", il = 0x%016" PRIxPTR
                 ", length = %zu, errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)il, length, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateProgramWithIL),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["clCreateProgramWithIL"];
    PFNCLCreateProgramWithIL next = reinterpret_cast<PFNCLCreateProgramWithIL>(entry);
    return next(context, il, length, errcode_ret);
}

typedef cl_kernel(CL_API_CALL *PFNCLCloneKernel)(cl_kernel source_kernel, cl_int *errcode_ret);
cl_kernel CL_API_CALL clCloneKernel(cl_kernel source_kernel, cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCloneKernel(source_kernel = 0x%016" PRIxPTR ", errcode_ret = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)source_kernel, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCloneKernel),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["clCloneKernel"];
    PFNCLCloneKernel next = reinterpret_cast<PFNCLCloneKernel>(entry);
    return next(source_kernel, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLGetKernelSubGroupInfo)(cl_kernel kernel,
                                                        cl_device_id device,
                                                        cl_kernel_sub_group_info param_name,
                                                        size_t input_value_size,
                                                        const void *input_value,
                                                        size_t param_value_size,
                                                        void *param_value,
                                                        size_t *param_value_size_ret);
cl_int CL_API_CALL clGetKernelSubGroupInfo(cl_kernel kernel,
                                           cl_device_id device,
                                           cl_kernel_sub_group_info param_name,
                                           size_t input_value_size,
                                           const void *input_value,
                                           size_t param_value_size,
                                           void *param_value,
                                           size_t *param_value_size_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clGetKernelSubGroupInfo(kernel = 0x%016" PRIxPTR ", device = 0x%016" PRIxPTR
                 ", param_name = %u, input_value_size = %zu, input_value = 0x%016" PRIxPTR
                 ", param_value_size = %zu, param_value = 0x%016" PRIxPTR
                 ", param_value_size_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)kernel, (uintptr_t)device, param_name, input_value_size,
                 (uintptr_t)input_value, param_value_size, (uintptr_t)param_value,
                 (uintptr_t)param_value_size_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLGetKernelSubGroupInfo),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["clGetKernelSubGroupInfo"];
    PFNCLGetKernelSubGroupInfo next = reinterpret_cast<PFNCLGetKernelSubGroupInfo>(entry);
    return next(kernel, device, param_name, input_value_size, input_value, param_value_size,
                param_value, param_value_size_ret);
}

typedef cl_int(CL_API_CALL *PFNCLEnqueueSVMMigrateMem)(cl_command_queue command_queue,
                                                       cl_uint num_svm_pointers,
                                                       const void **svm_pointers,
                                                       const size_t *sizes,
                                                       cl_mem_migration_flags flags,
                                                       cl_uint num_events_in_wait_list,
                                                       const cl_event *event_wait_list,
                                                       cl_event *event);
cl_int CL_API_CALL clEnqueueSVMMigrateMem(cl_command_queue command_queue,
                                          cl_uint num_svm_pointers,
                                          const void **svm_pointers,
                                          const size_t *sizes,
                                          cl_mem_migration_flags flags,
                                          cl_uint num_events_in_wait_list,
                                          const cl_event *event_wait_list,
                                          cl_event *event)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clEnqueueSVMMigrateMem(command_queue = 0x%016" PRIxPTR
                 ", num_svm_pointers = %u, svm_pointers = 0x%016" PRIxPTR ", sizes = 0x%016" PRIxPTR
                 ", flags = %llu, num_events_in_wait_list = %u, event_wait_list = 0x%016" PRIxPTR
                 ", event = 0x%016" PRIxPTR ")",
                 (uintptr_t)command_queue, num_svm_pointers, (uintptr_t)svm_pointers,
                 (uintptr_t)sizes, static_cast<unsigned long long>(flags), num_events_in_wait_list,
                 (uintptr_t)event_wait_list, (uintptr_t)event);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLEnqueueSVMMigrateMem),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["clEnqueueSVMMigrateMem"];
    PFNCLEnqueueSVMMigrateMem next = reinterpret_cast<PFNCLEnqueueSVMMigrateMem>(entry);
    return next(command_queue, num_svm_pointers, svm_pointers, sizes, flags,
                num_events_in_wait_list, event_wait_list, event);
}

typedef cl_int(CL_API_CALL *PFNCLSetProgramReleaseCallback)(
    cl_program program,
    void(CL_CALLBACK *pfn_notify)(cl_program program, void *user_data),
    void *user_data);
cl_int CL_API_CALL clSetProgramReleaseCallback(cl_program program,
                                               void(CL_CALLBACK *pfn_notify)(cl_program program,
                                                                             void *user_data),
                                               void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetProgramReleaseCallback(program = 0x%016" PRIxPTR
                 ", pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, (uintptr_t)pfn_notify, (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetProgramReleaseCallback),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["clSetProgramReleaseCallback"];
    PFNCLSetProgramReleaseCallback next = reinterpret_cast<PFNCLSetProgramReleaseCallback>(entry);
    return next(program, pfn_notify, user_data);
}

typedef cl_int(CL_API_CALL *PFNCLSetProgramSpecializationConstant)(cl_program program,
                                                                   cl_uint spec_id,
                                                                   size_t spec_size,
                                                                   const void *spec_value);
cl_int CL_API_CALL clSetProgramSpecializationConstant(cl_program program,
                                                      cl_uint spec_id,
                                                      size_t spec_size,
                                                      const void *spec_value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetProgramSpecializationConstant(program = 0x%016" PRIxPTR
                 ", spec_id = %u, spec_size = %zu, spec_value = 0x%016" PRIxPTR ")",
                 (uintptr_t)program, spec_id, spec_size, (uintptr_t)spec_value);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::CLSetProgramSpecializationConstant),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clSetProgramSpecializationConstant"];
    PFNCLSetProgramSpecializationConstant next =
        reinterpret_cast<PFNCLSetProgramSpecializationConstant>(entry);
    return next(program, spec_id, spec_size, spec_value);
}

typedef cl_int(CL_API_CALL *PFNCLSetContextDestructorCallback)(
    cl_context context,
    void(CL_CALLBACK *pfn_notify)(cl_context context, void *user_data),
    void *user_data);
cl_int CL_API_CALL clSetContextDestructorCallback(cl_context context,
                                                  void(CL_CALLBACK *pfn_notify)(cl_context context,
                                                                                void *user_data),
                                                  void *user_data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clSetContextDestructorCallback(context = 0x%016" PRIxPTR
                 ", pfn_notify = 0x%016" PRIxPTR ", user_data = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)pfn_notify, (uintptr_t)user_data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLSetContextDestructorCallback),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["clSetContextDestructorCallback"];
    PFNCLSetContextDestructorCallback next =
        reinterpret_cast<PFNCLSetContextDestructorCallback>(entry);
    return next(context, pfn_notify, user_data);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateBufferWithProperties)(cl_context context,
                                                             const cl_mem_properties *properties,
                                                             cl_mem_flags flags,
                                                             size_t size,
                                                             void *host_ptr,
                                                             cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateBufferWithProperties(cl_context context,
                                                const cl_mem_properties *properties,
                                                cl_mem_flags flags,
                                                size_t size,
                                                void *host_ptr,
                                                cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateBufferWithProperties(context = 0x%016" PRIxPTR
                 ", properties = 0x%016" PRIxPTR
                 ", flags = %llu, size = %zu, host_ptr = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)properties, static_cast<unsigned long long>(flags),
                 size, (uintptr_t)host_ptr, (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateBufferWithProperties),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["clCreateBufferWithProperties"];
    PFNCLCreateBufferWithProperties next = reinterpret_cast<PFNCLCreateBufferWithProperties>(entry);
    return next(context, properties, flags, size, host_ptr, errcode_ret);
}

typedef cl_mem(CL_API_CALL *PFNCLCreateImageWithProperties)(cl_context context,
                                                            const cl_mem_properties *properties,
                                                            cl_mem_flags flags,
                                                            const cl_image_format *image_format,
                                                            const cl_image_desc *image_desc,
                                                            void *host_ptr,
                                                            cl_int *errcode_ret);
cl_mem CL_API_CALL clCreateImageWithProperties(cl_context context,
                                               const cl_mem_properties *properties,
                                               cl_mem_flags flags,
                                               const cl_image_format *image_format,
                                               const cl_image_desc *image_desc,
                                               void *host_ptr,
                                               cl_int *errcode_ret)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clCreateImageWithProperties(context = 0x%016" PRIxPTR
                 ", properties = 0x%016" PRIxPTR ", flags = %llu, image_format = 0x%016" PRIxPTR
                 ", image_desc = 0x%016" PRIxPTR ", host_ptr = 0x%016" PRIxPTR
                 ", errcode_ret = 0x%016" PRIxPTR ")",
                 (uintptr_t)context, (uintptr_t)properties, static_cast<unsigned long long>(flags),
                 (uintptr_t)image_format, (uintptr_t)image_desc, (uintptr_t)host_ptr,
                 (uintptr_t)errcode_ret);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLCreateImageWithProperties),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["clCreateImageWithProperties"];
    PFNCLCreateImageWithProperties next = reinterpret_cast<PFNCLCreateImageWithProperties>(entry);
    return next(context, properties, flags, image_format, image_desc, host_ptr, errcode_ret);
}

typedef cl_int(CL_API_CALL *PFNCLIcdGetPlatformIDsKHR)(cl_uint num_entries,
                                                       cl_platform_id *platforms,
                                                       cl_uint *num_platforms);
cl_int CL_API_CALL clIcdGetPlatformIDsKHR(cl_uint num_entries,
                                          cl_platform_id *platforms,
                                          cl_uint *num_platforms)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "clIcdGetPlatformIDsKHR(num_entries = %u, platforms = 0x%016" PRIxPTR
                 ", num_platforms = 0x%016" PRIxPTR ")",
                 num_entries, (uintptr_t)platforms, (uintptr_t)num_platforms);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::CLIcdGetPlatformIDsKHR),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["clIcdGetPlatformIDsKHR"];
    PFNCLIcdGetPlatformIDsKHR next = reinterpret_cast<PFNCLIcdGetPlatformIDsKHR>(entry);
    return next(num_entries, platforms, num_platforms);
}

void setupCLHooks()
{
    hookMap["clGetPlatformIDs"]                  = (void *)clGetPlatformIDs;
    hookMap["clGetPlatformInfo"]                 = (void *)clGetPlatformInfo;
    hookMap["clGetDeviceIDs"]                    = (void *)clGetDeviceIDs;
    hookMap["clGetDeviceInfo"]                   = (void *)clGetDeviceInfo;
    hookMap["clCreateContext"]                   = (void *)clCreateContext;
    hookMap["clCreateContextFromType"]           = (void *)clCreateContextFromType;
    hookMap["clRetainContext"]                   = (void *)clRetainContext;
    hookMap["clReleaseContext"]                  = (void *)clReleaseContext;
    hookMap["clGetContextInfo"]                  = (void *)clGetContextInfo;
    hookMap["clRetainCommandQueue"]              = (void *)clRetainCommandQueue;
    hookMap["clReleaseCommandQueue"]             = (void *)clReleaseCommandQueue;
    hookMap["clGetCommandQueueInfo"]             = (void *)clGetCommandQueueInfo;
    hookMap["clCreateBuffer"]                    = (void *)clCreateBuffer;
    hookMap["clRetainMemObject"]                 = (void *)clRetainMemObject;
    hookMap["clReleaseMemObject"]                = (void *)clReleaseMemObject;
    hookMap["clGetSupportedImageFormats"]        = (void *)clGetSupportedImageFormats;
    hookMap["clGetMemObjectInfo"]                = (void *)clGetMemObjectInfo;
    hookMap["clGetImageInfo"]                    = (void *)clGetImageInfo;
    hookMap["clRetainSampler"]                   = (void *)clRetainSampler;
    hookMap["clReleaseSampler"]                  = (void *)clReleaseSampler;
    hookMap["clGetSamplerInfo"]                  = (void *)clGetSamplerInfo;
    hookMap["clCreateProgramWithSource"]         = (void *)clCreateProgramWithSource;
    hookMap["clCreateProgramWithBinary"]         = (void *)clCreateProgramWithBinary;
    hookMap["clRetainProgram"]                   = (void *)clRetainProgram;
    hookMap["clReleaseProgram"]                  = (void *)clReleaseProgram;
    hookMap["clBuildProgram"]                    = (void *)clBuildProgram;
    hookMap["clGetProgramInfo"]                  = (void *)clGetProgramInfo;
    hookMap["clGetProgramBuildInfo"]             = (void *)clGetProgramBuildInfo;
    hookMap["clCreateKernel"]                    = (void *)clCreateKernel;
    hookMap["clCreateKernelsInProgram"]          = (void *)clCreateKernelsInProgram;
    hookMap["clRetainKernel"]                    = (void *)clRetainKernel;
    hookMap["clReleaseKernel"]                   = (void *)clReleaseKernel;
    hookMap["clSetKernelArg"]                    = (void *)clSetKernelArg;
    hookMap["clGetKernelInfo"]                   = (void *)clGetKernelInfo;
    hookMap["clGetKernelWorkGroupInfo"]          = (void *)clGetKernelWorkGroupInfo;
    hookMap["clWaitForEvents"]                   = (void *)clWaitForEvents;
    hookMap["clGetEventInfo"]                    = (void *)clGetEventInfo;
    hookMap["clRetainEvent"]                     = (void *)clRetainEvent;
    hookMap["clReleaseEvent"]                    = (void *)clReleaseEvent;
    hookMap["clGetEventProfilingInfo"]           = (void *)clGetEventProfilingInfo;
    hookMap["clFlush"]                           = (void *)clFlush;
    hookMap["clFinish"]                          = (void *)clFinish;
    hookMap["clEnqueueReadBuffer"]               = (void *)clEnqueueReadBuffer;
    hookMap["clEnqueueWriteBuffer"]              = (void *)clEnqueueWriteBuffer;
    hookMap["clEnqueueCopyBuffer"]               = (void *)clEnqueueCopyBuffer;
    hookMap["clEnqueueReadImage"]                = (void *)clEnqueueReadImage;
    hookMap["clEnqueueWriteImage"]               = (void *)clEnqueueWriteImage;
    hookMap["clEnqueueCopyImage"]                = (void *)clEnqueueCopyImage;
    hookMap["clEnqueueCopyImageToBuffer"]        = (void *)clEnqueueCopyImageToBuffer;
    hookMap["clEnqueueCopyBufferToImage"]        = (void *)clEnqueueCopyBufferToImage;
    hookMap["clEnqueueMapBuffer"]                = (void *)clEnqueueMapBuffer;
    hookMap["clEnqueueMapImage"]                 = (void *)clEnqueueMapImage;
    hookMap["clEnqueueUnmapMemObject"]           = (void *)clEnqueueUnmapMemObject;
    hookMap["clEnqueueNDRangeKernel"]            = (void *)clEnqueueNDRangeKernel;
    hookMap["clEnqueueNativeKernel"]             = (void *)clEnqueueNativeKernel;
    hookMap["clSetCommandQueueProperty"]         = (void *)clSetCommandQueueProperty;
    hookMap["clCreateImage2D"]                   = (void *)clCreateImage2D;
    hookMap["clCreateImage3D"]                   = (void *)clCreateImage3D;
    hookMap["clEnqueueMarker"]                   = (void *)clEnqueueMarker;
    hookMap["clEnqueueWaitForEvents"]            = (void *)clEnqueueWaitForEvents;
    hookMap["clEnqueueBarrier"]                  = (void *)clEnqueueBarrier;
    hookMap["clUnloadCompiler"]                  = (void *)clUnloadCompiler;
    hookMap["clGetExtensionFunctionAddress"]     = (void *)clGetExtensionFunctionAddress;
    hookMap["clCreateCommandQueue"]              = (void *)clCreateCommandQueue;
    hookMap["clCreateSampler"]                   = (void *)clCreateSampler;
    hookMap["clEnqueueTask"]                     = (void *)clEnqueueTask;
    hookMap["clCreateSubBuffer"]                 = (void *)clCreateSubBuffer;
    hookMap["clSetMemObjectDestructorCallback"]  = (void *)clSetMemObjectDestructorCallback;
    hookMap["clCreateUserEvent"]                 = (void *)clCreateUserEvent;
    hookMap["clSetUserEventStatus"]              = (void *)clSetUserEventStatus;
    hookMap["clSetEventCallback"]                = (void *)clSetEventCallback;
    hookMap["clEnqueueReadBufferRect"]           = (void *)clEnqueueReadBufferRect;
    hookMap["clEnqueueWriteBufferRect"]          = (void *)clEnqueueWriteBufferRect;
    hookMap["clEnqueueCopyBufferRect"]           = (void *)clEnqueueCopyBufferRect;
    hookMap["clCreateSubDevices"]                = (void *)clCreateSubDevices;
    hookMap["clRetainDevice"]                    = (void *)clRetainDevice;
    hookMap["clReleaseDevice"]                   = (void *)clReleaseDevice;
    hookMap["clCreateImage"]                     = (void *)clCreateImage;
    hookMap["clCreateProgramWithBuiltInKernels"] = (void *)clCreateProgramWithBuiltInKernels;
    hookMap["clCompileProgram"]                  = (void *)clCompileProgram;
    hookMap["clLinkProgram"]                     = (void *)clLinkProgram;
    hookMap["clUnloadPlatformCompiler"]          = (void *)clUnloadPlatformCompiler;
    hookMap["clGetKernelArgInfo"]                = (void *)clGetKernelArgInfo;
    hookMap["clEnqueueFillBuffer"]               = (void *)clEnqueueFillBuffer;
    hookMap["clEnqueueFillImage"]                = (void *)clEnqueueFillImage;
    hookMap["clEnqueueMigrateMemObjects"]        = (void *)clEnqueueMigrateMemObjects;
    hookMap["clEnqueueMarkerWithWaitList"]       = (void *)clEnqueueMarkerWithWaitList;
    hookMap["clEnqueueBarrierWithWaitList"]      = (void *)clEnqueueBarrierWithWaitList;
    hookMap["clGetExtensionFunctionAddressForPlatform"] =
        (void *)clGetExtensionFunctionAddressForPlatform;
    hookMap["clCreateCommandQueueWithProperties"] = (void *)clCreateCommandQueueWithProperties;
    hookMap["clCreatePipe"]                       = (void *)clCreatePipe;
    hookMap["clGetPipeInfo"]                      = (void *)clGetPipeInfo;
    hookMap["clSVMAlloc"]                         = (void *)clSVMAlloc;
    hookMap["clSVMFree"]                          = (void *)clSVMFree;
    hookMap["clCreateSamplerWithProperties"]      = (void *)clCreateSamplerWithProperties;
    hookMap["clSetKernelArgSVMPointer"]           = (void *)clSetKernelArgSVMPointer;
    hookMap["clSetKernelExecInfo"]                = (void *)clSetKernelExecInfo;
    hookMap["clEnqueueSVMFree"]                   = (void *)clEnqueueSVMFree;
    hookMap["clEnqueueSVMMemcpy"]                 = (void *)clEnqueueSVMMemcpy;
    hookMap["clEnqueueSVMMemFill"]                = (void *)clEnqueueSVMMemFill;
    hookMap["clEnqueueSVMMap"]                    = (void *)clEnqueueSVMMap;
    hookMap["clEnqueueSVMUnmap"]                  = (void *)clEnqueueSVMUnmap;
    hookMap["clSetDefaultDeviceCommandQueue"]     = (void *)clSetDefaultDeviceCommandQueue;
    hookMap["clGetDeviceAndHostTimer"]            = (void *)clGetDeviceAndHostTimer;
    hookMap["clGetHostTimer"]                     = (void *)clGetHostTimer;
    hookMap["clCreateProgramWithIL"]              = (void *)clCreateProgramWithIL;
    hookMap["clCloneKernel"]                      = (void *)clCloneKernel;
    hookMap["clGetKernelSubGroupInfo"]            = (void *)clGetKernelSubGroupInfo;
    hookMap["clEnqueueSVMMigrateMem"]             = (void *)clEnqueueSVMMigrateMem;
    hookMap["clSetProgramReleaseCallback"]        = (void *)clSetProgramReleaseCallback;
    hookMap["clSetProgramSpecializationConstant"] = (void *)clSetProgramSpecializationConstant;
    hookMap["clSetContextDestructorCallback"]     = (void *)clSetContextDestructorCallback;
    hookMap["clCreateBufferWithProperties"]       = (void *)clCreateBufferWithProperties;
    hookMap["clCreateImageWithProperties"]        = (void *)clCreateImageWithProperties;
    hookMap["clIcdGetPlatformIDsKHR"]             = (void *)clIcdGetPlatformIDsKHR;
}

}  // namespace agi_layer
