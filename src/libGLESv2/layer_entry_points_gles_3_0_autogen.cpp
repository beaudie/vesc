// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_3_0_autogen.cpp:
//   Layer functions for the OpenGL ES 3.0 entry points.

#include "libGLESv2/layer_entry_points_gles_3_0_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_BeginQuery(GLenum target, GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBeginQuery(target = %s, id = %u)",
                 GLenumToString(GLenumGroup::QueryTarget, target), id);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBeginQuery), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBeginQuery  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glBeginQuery"];
    PFNGLBEGINQUERYPROC next = reinterpret_cast<PFNGLBEGINQUERYPROC>(entry);
    next(target, id);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BeginTransformFeedback(GLenum primitiveMode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBeginTransformFeedback(primitiveMode = %s)",
                 GLenumToString(GLenumGroup::PrimitiveType, primitiveMode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBeginTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBeginTransformFeedback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glBeginTransformFeedback"];
    PFNGLBEGINTRANSFORMFEEDBACKPROC next = reinterpret_cast<PFNGLBEGINTRANSFORMFEEDBACKPROC>(entry);
    next(primitiveMode);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindBufferBase(target = %s, index = %u, buffer = %u)",
                 GLenumToString(GLenumGroup::BufferTargetARB, target), index, buffer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindBufferBase), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindBufferBase  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glBindBufferBase"];
    PFNGLBINDBUFFERBASEPROC next = reinterpret_cast<PFNGLBINDBUFFERBASEPROC>(entry);
    next(target, index, buffer);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glBindBufferRange(target = %s, index = %u, buffer = %u, offset = %llu, size = %llu)",
        GLenumToString(GLenumGroup::BufferTargetARB, target), index, buffer,
        static_cast<unsigned long long>(offset), static_cast<unsigned long long>(size));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindBufferRange), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindBufferRange  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glBindBufferRange"];
    PFNGLBINDBUFFERRANGEPROC next = reinterpret_cast<PFNGLBINDBUFFERRANGEPROC>(entry);
    next(target, index, buffer, offset, size);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindSampler(GLuint unit, GLuint sampler)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindSampler(unit = %u, sampler = %u)", unit, sampler);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindSampler), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindSampler  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glBindSampler"];
    PFNGLBINDSAMPLERPROC next = reinterpret_cast<PFNGLBINDSAMPLERPROC>(entry);
    next(unit, sampler);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindTransformFeedback(GLenum target, GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindTransformFeedback(target = %s, id = %u)",
                 GLenumToString(GLenumGroup::BindTransformFeedbackTarget, target), id);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindTransformFeedback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glBindTransformFeedback"];
    PFNGLBINDTRANSFORMFEEDBACKPROC next = reinterpret_cast<PFNGLBINDTRANSFORMFEEDBACKPROC>(entry);
    next(target, id);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BindVertexArray(GLuint array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindVertexArray(array = %u)", array);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBindVertexArray), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBindVertexArray  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glBindVertexArray"];
    PFNGLBINDVERTEXARRAYPROC next = reinterpret_cast<PFNGLBINDVERTEXARRAYPROC>(entry);
    next(array);

    g_pop_debug_group();
}

void GL_APIENTRY GL_BlitFramebuffer(GLint srcX0,
                                    GLint srcY0,
                                    GLint srcX1,
                                    GLint srcY1,
                                    GLint dstX0,
                                    GLint dstY0,
                                    GLint dstX1,
                                    GLint dstY1,
                                    GLbitfield mask,
                                    GLenum filter)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlitFramebuffer(srcX0 = %d, srcY0 = %d, srcX1 = %d, srcY1 = %d, dstX0 = %d, "
                 "dstY0 = %d, dstX1 = %d, dstY1 = %d, mask = %s, filter = %s)",
                 srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1,
                 GLbitfieldToString(GLenumGroup::ClearBufferMask, mask).c_str(),
                 GLenumToString(GLenumGroup::BlitFramebufferFilter, filter));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLBlitFramebuffer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glBlitFramebuffer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glBlitFramebuffer"];
    PFNGLBLITFRAMEBUFFERPROC next = reinterpret_cast<PFNGLBLITFRAMEBUFFERPROC>(entry);
    next(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClearBufferfi(buffer = %s, drawbuffer = %d, depth = %f, stencil = %d)",
                 GLenumToString(GLenumGroup::Buffer, buffer), drawbuffer, depth, stencil);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearBufferfi), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearBufferfi  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glClearBufferfi"];
    PFNGLCLEARBUFFERFIPROC next = reinterpret_cast<PFNGLCLEARBUFFERFIPROC>(entry);
    next(buffer, drawbuffer, depth, stencil);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClearBufferfv(buffer = %s, drawbuffer = %d, value = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::Buffer, buffer), drawbuffer, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearBufferfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearBufferfv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glClearBufferfv"];
    PFNGLCLEARBUFFERFVPROC next = reinterpret_cast<PFNGLCLEARBUFFERFVPROC>(entry);
    next(buffer, drawbuffer, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClearBufferiv(buffer = %s, drawbuffer = %d, value = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::Buffer, buffer), drawbuffer, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearBufferiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearBufferiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glClearBufferiv"];
    PFNGLCLEARBUFFERIVPROC next = reinterpret_cast<PFNGLCLEARBUFFERIVPROC>(entry);
    next(buffer, drawbuffer, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClearBufferuiv(buffer = %s, drawbuffer = %d, value = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::Buffer, buffer), drawbuffer, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClearBufferuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glClearBufferuiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glClearBufferuiv"];
    PFNGLCLEARBUFFERUIVPROC next = reinterpret_cast<PFNGLCLEARBUFFERUIVPROC>(entry);
    next(buffer, drawbuffer, value);

    g_pop_debug_group();
}

GLenum GL_APIENTRY GL_ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glClientWaitSync(sync = 0x%016" PRIxPTR ", flags = %s, timeout = %llu)",
                 (uintptr_t)sync, GLbitfieldToString(GLenumGroup::SyncObjectMask, flags).c_str(),
                 static_cast<unsigned long long>(timeout));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLClientWaitSync), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glClientWaitSync");

    // Call down to the next layer
    void *entry                  = funcMap["glClientWaitSync"];
    PFNGLCLIENTWAITSYNCPROC next = reinterpret_cast<PFNGLCLIENTWAITSYNCPROC>(entry);
    GLenum ret                   = next(sync, flags, timeout);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_CompressedTexImage3D(GLenum target,
                                         GLint level,
                                         GLenum internalformat,
                                         GLsizei width,
                                         GLsizei height,
                                         GLsizei depth,
                                         GLint border,
                                         GLsizei imageSize,
                                         const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexImage3D(target = %s, level = %d, internalformat = %s, width = %d, "
                 "height = %d, depth = %d, border = %d, imageSize = %d, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target), level,
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height, depth,
                 border, imageSize, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCompressedTexImage3D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glCompressedTexImage3D  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glCompressedTexImage3D"];
    PFNGLCOMPRESSEDTEXIMAGE3DPROC next = reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE3DPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, imageSize, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_CompressedTexSubImage3D(GLenum target,
                                            GLint level,
                                            GLint xoffset,
                                            GLint yoffset,
                                            GLint zoffset,
                                            GLsizei width,
                                            GLsizei height,
                                            GLsizei depth,
                                            GLenum format,
                                            GLsizei imageSize,
                                            const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexSubImage3D(target = %s, level = %d, xoffset = %d, yoffset = %d, "
                 "zoffset = %d, width = %d, height = %d, depth = %d, format = %s, imageSize = %d, "
                 "data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target), level, xoffset, yoffset,
                 zoffset, width, height, depth, GLenumToString(GLenumGroup::PixelFormat, format),
                 imageSize, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCompressedTexSubImage3D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glCompressedTexSubImage3D  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexSubImage3D"];
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_CopyBufferSubData(GLenum readTarget,
                                      GLenum writeTarget,
                                      GLintptr readOffset,
                                      GLintptr writeOffset,
                                      GLsizeiptr size)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyBufferSubData(readTarget = %s, writeTarget = %s, readOffset = %llu, "
                 "writeOffset = %llu, size = %llu)",
                 GLenumToString(GLenumGroup::CopyBufferSubDataTarget, readTarget),
                 GLenumToString(GLenumGroup::CopyBufferSubDataTarget, writeTarget),
                 static_cast<unsigned long long>(readOffset),
                 static_cast<unsigned long long>(writeOffset),
                 static_cast<unsigned long long>(size));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCopyBufferSubData), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glCopyBufferSubData  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glCopyBufferSubData"];
    PFNGLCOPYBUFFERSUBDATAPROC next = reinterpret_cast<PFNGLCOPYBUFFERSUBDATAPROC>(entry);
    next(readTarget, writeTarget, readOffset, writeOffset, size);

    g_pop_debug_group();
}

void GL_APIENTRY GL_CopyTexSubImage3D(GLenum target,
                                      GLint level,
                                      GLint xoffset,
                                      GLint yoffset,
                                      GLint zoffset,
                                      GLint x,
                                      GLint y,
                                      GLsizei width,
                                      GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTexSubImage3D(target = %s, level = %d, xoffset = %d, yoffset = %d, zoffset "
                 "= %d, x = %d, y = %d, width = %d, height = %d)",
                 GLenumToString(GLenumGroup::TextureTarget, target), level, xoffset, yoffset,
                 zoffset, x, y, width, height);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLCopyTexSubImage3D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glCopyTexSubImage3D  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glCopyTexSubImage3D"];
    PFNGLCOPYTEXSUBIMAGE3DPROC next = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE3DPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, x, y, width, height);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DeleteQueries(GLsizei n, const GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteQueries(n = %d, ids = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)ids);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteQueries), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteQueries  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glDeleteQueries"];
    PFNGLDELETEQUERIESPROC next = reinterpret_cast<PFNGLDELETEQUERIESPROC>(entry);
    next(n, ids);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DeleteSamplers(GLsizei count, const GLuint *samplers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteSamplers(count = %d, samplers = 0x%016" PRIxPTR ")",
                 count, (uintptr_t)samplers);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteSamplers), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteSamplers  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glDeleteSamplers"];
    PFNGLDELETESAMPLERSPROC next = reinterpret_cast<PFNGLDELETESAMPLERSPROC>(entry);
    next(count, samplers);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DeleteSync(GLsync sync)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteSync(sync = 0x%016" PRIxPTR ")", (uintptr_t)sync);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteSync), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteSync  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glDeleteSync"];
    PFNGLDELETESYNCPROC next = reinterpret_cast<PFNGLDELETESYNCPROC>(entry);
    next(sync);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteTransformFeedbacks(n = %d, ids = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)ids);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteTransformFeedbacks), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteTransformFeedbacks  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDeleteTransformFeedbacks"];
    PFNGLDELETETRANSFORMFEEDBACKSPROC next =
        reinterpret_cast<PFNGLDELETETRANSFORMFEEDBACKSPROC>(entry);
    next(n, ids);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteVertexArrays(n = %d, arrays = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)arrays);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDeleteVertexArrays), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDeleteVertexArrays  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glDeleteVertexArrays"];
    PFNGLDELETEVERTEXARRAYSPROC next = reinterpret_cast<PFNGLDELETEVERTEXARRAYSPROC>(entry);
    next(n, arrays);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawArraysInstanced(GLenum mode,
                                        GLint first,
                                        GLsizei count,
                                        GLsizei instancecount)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawArraysInstanced(mode = %s, first = %d, count = %d, instancecount = %d)",
                 GLenumToString(GLenumGroup::PrimitiveType, mode), first, count, instancecount);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawArraysInstanced), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawArraysInstanced  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glDrawArraysInstanced"];
    PFNGLDRAWARRAYSINSTANCEDPROC next = reinterpret_cast<PFNGLDRAWARRAYSINSTANCEDPROC>(entry);
    next(mode, first, count, instancecount);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawBuffers(GLsizei n, const GLenum *bufs)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawBuffers(n = %d, bufs = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)bufs);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawBuffers), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawBuffers  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDrawBuffers"];
    PFNGLDRAWBUFFERSPROC next = reinterpret_cast<PFNGLDRAWBUFFERSPROC>(entry);
    next(n, bufs);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawElementsInstanced(GLenum mode,
                                          GLsizei count,
                                          GLenum type,
                                          const void *indices,
                                          GLsizei instancecount)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glDrawElementsInstanced(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR
        ", instancecount = %d)",
        GLenumToString(GLenumGroup::PrimitiveType, mode), count,
        GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices, instancecount);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawElementsInstanced), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawElementsInstanced  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glDrawElementsInstanced"];
    PFNGLDRAWELEMENTSINSTANCEDPROC next = reinterpret_cast<PFNGLDRAWELEMENTSINSTANCEDPROC>(entry);
    next(mode, count, type, indices, instancecount);

    g_pop_debug_group();
}

void GL_APIENTRY GL_DrawRangeElements(GLenum mode,
                                      GLuint start,
                                      GLuint end,
                                      GLsizei count,
                                      GLenum type,
                                      const void *indices)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawRangeElements(mode = %s, start = %u, end = %u, count = %d, type = %s, "
                 "indices = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::PrimitiveType, mode), start, end, count,
                 GLenumToString(GLenumGroup::DrawElementsType, type), (uintptr_t)indices);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLDrawRangeElements), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glDrawRangeElements  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glDrawRangeElements"];
    PFNGLDRAWRANGEELEMENTSPROC next = reinterpret_cast<PFNGLDRAWRANGEELEMENTSPROC>(entry);
    next(mode, start, end, count, type, indices);

    g_pop_debug_group();
}

void GL_APIENTRY GL_EndQuery(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEndQuery(target = %s)",
                 GLenumToString(GLenumGroup::QueryTarget, target));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLEndQuery), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glEndQuery  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glEndQuery"];
    PFNGLENDQUERYPROC next = reinterpret_cast<PFNGLENDQUERYPROC>(entry);
    next(target);

    g_pop_debug_group();
}

void GL_APIENTRY GL_EndTransformFeedback()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEndTransformFeedback()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLEndTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glEndTransformFeedback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glEndTransformFeedback"];
    PFNGLENDTRANSFORMFEEDBACKPROC next = reinterpret_cast<PFNGLENDTRANSFORMFEEDBACKPROC>(entry);
    next();

    g_pop_debug_group();
}

GLsync GL_APIENTRY GL_FenceSync(GLenum condition, GLbitfield flags)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFenceSync(condition = %s, flags = %s)",
                 GLenumToString(GLenumGroup::SyncCondition, condition),
                 GLbitfieldToString(GLenumGroup::DefaultGroup, flags).c_str());
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFenceSync), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glFenceSync");

    // Call down to the next layer
    void *entry             = funcMap["glFenceSync"];
    PFNGLFENCESYNCPROC next = reinterpret_cast<PFNGLFENCESYNCPROC>(entry);
    GLsync ret              = next(condition, flags);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFlushMappedBufferRange(target = %s, offset = %llu, length = %llu)",
                 GLenumToString(GLenumGroup::BufferTargetARB, target),
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(length));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFlushMappedBufferRange), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFlushMappedBufferRange  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glFlushMappedBufferRange"];
    PFNGLFLUSHMAPPEDBUFFERRANGEPROC next = reinterpret_cast<PFNGLFLUSHMAPPEDBUFFERRANGEPROC>(entry);
    next(target, offset, length);

    g_pop_debug_group();
}

void GL_APIENTRY GL_FramebufferTextureLayer(GLenum target,
                                            GLenum attachment,
                                            GLuint texture,
                                            GLint level,
                                            GLint layer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTextureLayer(target = %s, attachment = %s, texture = %u, level = "
                 "%d, layer = %d)",
                 GLenumToString(GLenumGroup::FramebufferTarget, target),
                 GLenumToString(GLenumGroup::FramebufferAttachment, attachment), texture, level,
                 layer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLFramebufferTextureLayer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glFramebufferTextureLayer  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferTextureLayer"];
    PFNGLFRAMEBUFFERTEXTURELAYERPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERTEXTURELAYERPROC>(entry);
    next(target, attachment, texture, level, layer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GenQueries(GLsizei n, GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenQueries(n = %d, ids = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)ids);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGenQueries), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGenQueries  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glGenQueries"];
    PFNGLGENQUERIESPROC next = reinterpret_cast<PFNGLGENQUERIESPROC>(entry);
    next(n, ids);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GenSamplers(GLsizei count, GLuint *samplers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenSamplers(count = %d, samplers = 0x%016" PRIxPTR ")",
                 count, (uintptr_t)samplers);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGenSamplers), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGenSamplers  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGenSamplers"];
    PFNGLGENSAMPLERSPROC next = reinterpret_cast<PFNGLGENSAMPLERSPROC>(entry);
    next(count, samplers);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GenTransformFeedbacks(GLsizei n, GLuint *ids)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenTransformFeedbacks(n = %d, ids = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)ids);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGenTransformFeedbacks), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGenTransformFeedbacks  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGenTransformFeedbacks"];
    PFNGLGENTRANSFORMFEEDBACKSPROC next = reinterpret_cast<PFNGLGENTRANSFORMFEEDBACKSPROC>(entry);
    next(n, ids);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GenVertexArrays(GLsizei n, GLuint *arrays)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenVertexArrays(n = %d, arrays = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)arrays);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGenVertexArrays), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGenVertexArrays  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glGenVertexArrays"];
    PFNGLGENVERTEXARRAYSPROC next = reinterpret_cast<PFNGLGENVERTEXARRAYSPROC>(entry);
    next(n, arrays);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetActiveUniformBlockName(GLuint program,
                                              GLuint uniformBlockIndex,
                                              GLsizei bufSize,
                                              GLsizei *length,
                                              GLchar *uniformBlockName)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetActiveUniformBlockName(program = %u, uniformBlockIndex = %u, bufSize = %d, "
                 "length = 0x%016" PRIxPTR ", uniformBlockName = 0x%016" PRIxPTR ")",
                 program, uniformBlockIndex, bufSize, (uintptr_t)length,
                 (uintptr_t)uniformBlockName);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetActiveUniformBlockName), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetActiveUniformBlockName  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetActiveUniformBlockName"];
    PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC next =
        reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC>(entry);
    next(program, uniformBlockIndex, bufSize, length, uniformBlockName);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetActiveUniformBlockiv(GLuint program,
                                            GLuint uniformBlockIndex,
                                            GLenum pname,
                                            GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetActiveUniformBlockiv(program = %u, uniformBlockIndex = %u, pname = %s, "
                 "params = 0x%016" PRIxPTR ")",
                 program, uniformBlockIndex, GLenumToString(GLenumGroup::UniformBlockPName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetActiveUniformBlockiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetActiveUniformBlockiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetActiveUniformBlockiv"];
    PFNGLGETACTIVEUNIFORMBLOCKIVPROC next =
        reinterpret_cast<PFNGLGETACTIVEUNIFORMBLOCKIVPROC>(entry);
    next(program, uniformBlockIndex, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetActiveUniformsiv(GLuint program,
                                        GLsizei uniformCount,
                                        const GLuint *uniformIndices,
                                        GLenum pname,
                                        GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetActiveUniformsiv(program = %u, uniformCount = %d, uniformIndices = 0x%016" PRIxPTR
        ", pname = %s, params = 0x%016" PRIxPTR ")",
        program, uniformCount, (uintptr_t)uniformIndices,
        GLenumToString(GLenumGroup::UniformPName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetActiveUniformsiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetActiveUniformsiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetActiveUniformsiv"];
    PFNGLGETACTIVEUNIFORMSIVPROC next = reinterpret_cast<PFNGLGETACTIVEUNIFORMSIVPROC>(entry);
    next(program, uniformCount, uniformIndices, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferParameteri64v(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::BufferTargetARB, target),
                 GLenumToString(GLenumGroup::DefaultGroup, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetBufferParameteri64v), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetBufferParameteri64v  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glGetBufferParameteri64v"];
    PFNGLGETBUFFERPARAMETERI64VPROC next = reinterpret_cast<PFNGLGETBUFFERPARAMETERI64VPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetBufferPointerv(GLenum target, GLenum pname, void **params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferPointerv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::BufferTargetARB, target),
                 GLenumToString(GLenumGroup::DefaultGroup, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetBufferPointerv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetBufferPointerv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetBufferPointerv"];
    PFNGLGETBUFFERPOINTERVPROC next = reinterpret_cast<PFNGLGETBUFFERPOINTERVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

GLint GL_APIENTRY GL_GetFragDataLocation(GLuint program, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetFragDataLocation(program = %u, name = 0x%016" PRIxPTR ")",
                 program, (uintptr_t)name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetFragDataLocation), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetFragDataLocation");

    // Call down to the next layer
    void *entry                       = funcMap["glGetFragDataLocation"];
    PFNGLGETFRAGDATALOCATIONPROC next = reinterpret_cast<PFNGLGETFRAGDATALOCATIONPROC>(entry);
    GLint ret                         = next(program, name);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_GetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetInteger64i_v(target = %s, index = %u, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TypeEnum, target), index, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetInteger64i_v), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetInteger64i_v  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glGetInteger64i_v"];
    PFNGLGETINTEGER64I_VPROC next = reinterpret_cast<PFNGLGETINTEGER64I_VPROC>(entry);
    next(target, index, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetInteger64v(GLenum pname, GLint64 *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetInteger64v(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::GetPName, pname), (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetInteger64v), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetInteger64v  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetInteger64v"];
    PFNGLGETINTEGER64VPROC next = reinterpret_cast<PFNGLGETINTEGER64VPROC>(entry);
    next(pname, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetIntegeri_v(target = %s, index = %u, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TypeEnum, target), index, (uintptr_t)data);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetIntegeri_v), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetIntegeri_v  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetIntegeri_v"];
    PFNGLGETINTEGERI_VPROC next = reinterpret_cast<PFNGLGETINTEGERI_VPROC>(entry);
    next(target, index, data);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetInternalformativ(GLenum target,
                                        GLenum internalformat,
                                        GLenum pname,
                                        GLsizei bufSize,
                                        GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetInternalformativ(target = %s, internalformat = %s, pname = %s, bufSize = "
                 "%d, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target),
                 GLenumToString(GLenumGroup::InternalFormat, internalformat),
                 GLenumToString(GLenumGroup::InternalFormatPName, pname), bufSize,
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetInternalformativ), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetInternalformativ  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetInternalformativ"];
    PFNGLGETINTERNALFORMATIVPROC next = reinterpret_cast<PFNGLGETINTERNALFORMATIVPROC>(entry);
    next(target, internalformat, pname, bufSize, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetProgramBinary(GLuint program,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLenum *binaryFormat,
                                     void *binary)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramBinary(program = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", binaryFormat = 0x%016" PRIxPTR ", binary = 0x%016" PRIxPTR ")",
                 program, bufSize, (uintptr_t)length, (uintptr_t)binaryFormat, (uintptr_t)binary);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetProgramBinary), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetProgramBinary  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetProgramBinary"];
    PFNGLGETPROGRAMBINARYPROC next = reinterpret_cast<PFNGLGETPROGRAMBINARYPROC>(entry);
    next(program, bufSize, length, binaryFormat, binary);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryObjectuiv(id = %u, pname = %s, params = 0x%016" PRIxPTR ")", id,
                 GLenumToString(GLenumGroup::QueryObjectParameterName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetQueryObjectuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetQueryObjectuiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetQueryObjectuiv"];
    PFNGLGETQUERYOBJECTUIVPROC next = reinterpret_cast<PFNGLGETQUERYOBJECTUIVPROC>(entry);
    next(id, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetQueryiv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetQueryiv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::QueryTarget, target),
                 GLenumToString(GLenumGroup::QueryParameterName, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetQueryiv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetQueryiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glGetQueryiv"];
    PFNGLGETQUERYIVPROC next = reinterpret_cast<PFNGLGETQUERYIVPROC>(entry);
    next(target, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameterfv(sampler = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameterfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetSamplerParameterfv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetSamplerParameterfv"];
    PFNGLGETSAMPLERPARAMETERFVPROC next = reinterpret_cast<PFNGLGETSAMPLERPARAMETERFVPROC>(entry);
    next(sampler, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSamplerParameteriv(sampler = %u, pname = %s, params = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetSamplerParameteriv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetSamplerParameteriv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glGetSamplerParameteriv"];
    PFNGLGETSAMPLERPARAMETERIVPROC next = reinterpret_cast<PFNGLGETSAMPLERPARAMETERIVPROC>(entry);
    next(sampler, pname, params);

    g_pop_debug_group();
}

const GLubyte *GL_APIENTRY GL_GetStringi(GLenum name, GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetStringi(name = %s, index = %u)",
                 GLenumToString(GLenumGroup::StringName, name), index);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetStringi), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetStringi");

    // Call down to the next layer
    void *entry              = funcMap["glGetStringi"];
    PFNGLGETSTRINGIPROC next = reinterpret_cast<PFNGLGETSTRINGIPROC>(entry);
    const GLubyte *ret       = next(name, index);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY
GL_GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetSynciv(sync = 0x%016" PRIxPTR
                 ", pname = %s, bufSize = %d, length = 0x%016" PRIxPTR ", values = 0x%016" PRIxPTR
                 ")",
                 (uintptr_t)sync, GLenumToString(GLenumGroup::SyncParameterName, pname), bufSize,
                 (uintptr_t)length, (uintptr_t)values);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetSynciv), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetSynciv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glGetSynciv"];
    PFNGLGETSYNCIVPROC next = reinterpret_cast<PFNGLGETSYNCIVPROC>(entry);
    next(sync, pname, bufSize, length, values);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetTransformFeedbackVarying(GLuint program,
                                                GLuint index,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLsizei *size,
                                                GLenum *type,
                                                GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTransformFeedbackVarying(program = %u, index = %u, bufSize = %d, length = "
                 "0x%016" PRIxPTR ", size = 0x%016" PRIxPTR ", type = 0x%016" PRIxPTR
                 ", name = 0x%016" PRIxPTR ")",
                 program, index, bufSize, (uintptr_t)length, (uintptr_t)size, (uintptr_t)type,
                 (uintptr_t)name);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetTransformFeedbackVarying), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetTransformFeedbackVarying  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetTransformFeedbackVarying"];
    PFNGLGETTRANSFORMFEEDBACKVARYINGPROC next =
        reinterpret_cast<PFNGLGETTRANSFORMFEEDBACKVARYINGPROC>(entry);
    next(program, index, bufSize, length, size, type, name);

    g_pop_debug_group();
}

GLuint GL_APIENTRY GL_GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformBlockIndex(program = %u, uniformBlockName = 0x%016" PRIxPTR ")",
                 program, (uintptr_t)uniformBlockName);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetUniformBlockIndex), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glGetUniformBlockIndex");

    // Call down to the next layer
    void *entry                        = funcMap["glGetUniformBlockIndex"];
    PFNGLGETUNIFORMBLOCKINDEXPROC next = reinterpret_cast<PFNGLGETUNIFORMBLOCKINDEXPROC>(entry);
    GLuint ret                         = next(program, uniformBlockName);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_GetUniformIndices(GLuint program,
                                      GLsizei uniformCount,
                                      const GLchar *const *uniformNames,
                                      GLuint *uniformIndices)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetUniformIndices(program = %u, uniformCount = %d, uniformNames = 0x%016" PRIxPTR
        ", uniformIndices = 0x%016" PRIxPTR ")",
        program, uniformCount, (uintptr_t)uniformNames, (uintptr_t)uniformIndices);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetUniformIndices), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetUniformIndices  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetUniformIndices"];
    PFNGLGETUNIFORMINDICESPROC next = reinterpret_cast<PFNGLGETUNIFORMINDICESPROC>(entry);
    next(program, uniformCount, uniformNames, uniformIndices);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetUniformuiv(GLuint program, GLint location, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformuiv(program = %u, location = %d, params = 0x%016" PRIxPTR ")",
                 program, location, (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetUniformuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetUniformuiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glGetUniformuiv"];
    PFNGLGETUNIFORMUIVPROC next = reinterpret_cast<PFNGLGETUNIFORMUIVPROC>(entry);
    next(program, location, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribIiv(index = %u, pname = %s, params = 0x%016" PRIxPTR ")", index,
                 GLenumToString(GLenumGroup::VertexAttribEnum, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribIiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetVertexAttribIiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGetVertexAttribIiv"];
    PFNGLGETVERTEXATTRIBIIVPROC next = reinterpret_cast<PFNGLGETVERTEXATTRIBIIVPROC>(entry);
    next(index, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribIuiv(index = %u, pname = %s, params = 0x%016" PRIxPTR ")", index,
                 GLenumToString(GLenumGroup::VertexAttribEnum, pname), (uintptr_t)params);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribIuiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glGetVertexAttribIuiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glGetVertexAttribIuiv"];
    PFNGLGETVERTEXATTRIBIUIVPROC next = reinterpret_cast<PFNGLGETVERTEXATTRIBIUIVPROC>(entry);
    next(index, pname, params);

    g_pop_debug_group();
}

void GL_APIENTRY GL_InvalidateFramebuffer(GLenum target,
                                          GLsizei numAttachments,
                                          const GLenum *attachments)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glInvalidateFramebuffer(target = %s, numAttachments = %d, attachments = 0x%016" PRIxPTR
        ")",
        GLenumToString(GLenumGroup::FramebufferTarget, target), numAttachments,
        (uintptr_t)attachments);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLInvalidateFramebuffer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glInvalidateFramebuffer  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glInvalidateFramebuffer"];
    PFNGLINVALIDATEFRAMEBUFFERPROC next = reinterpret_cast<PFNGLINVALIDATEFRAMEBUFFERPROC>(entry);
    next(target, numAttachments, attachments);

    g_pop_debug_group();
}

void GL_APIENTRY GL_InvalidateSubFramebuffer(GLenum target,
                                             GLsizei numAttachments,
                                             const GLenum *attachments,
                                             GLint x,
                                             GLint y,
                                             GLsizei width,
                                             GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glInvalidateSubFramebuffer(target = %s, numAttachments = %d, attachments = 0x%016" PRIxPTR
        ", x = %d, y = %d, width = %d, height = %d)",
        GLenumToString(GLenumGroup::DefaultGroup, target), numAttachments, (uintptr_t)attachments,
        x, y, width, height);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLInvalidateSubFramebuffer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glInvalidateSubFramebuffer  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glInvalidateSubFramebuffer"];
    PFNGLINVALIDATESUBFRAMEBUFFERPROC next =
        reinterpret_cast<PFNGLINVALIDATESUBFRAMEBUFFERPROC>(entry);
    next(target, numAttachments, attachments, x, y, width, height);

    g_pop_debug_group();
}

GLboolean GL_APIENTRY GL_IsQuery(GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsQuery(id = %u)", id);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsQuery), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsQuery");

    // Call down to the next layer
    void *entry           = funcMap["glIsQuery"];
    PFNGLISQUERYPROC next = reinterpret_cast<PFNGLISQUERYPROC>(entry);
    GLboolean ret         = next(id);

    g_pop_debug_group();
    return ret;
}

GLboolean GL_APIENTRY GL_IsSampler(GLuint sampler)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsSampler(sampler = %u)", sampler);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsSampler), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsSampler");

    // Call down to the next layer
    void *entry             = funcMap["glIsSampler"];
    PFNGLISSAMPLERPROC next = reinterpret_cast<PFNGLISSAMPLERPROC>(entry);
    GLboolean ret           = next(sampler);

    g_pop_debug_group();
    return ret;
}

GLboolean GL_APIENTRY GL_IsSync(GLsync sync)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsSync(sync = 0x%016" PRIxPTR ")", (uintptr_t)sync);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsSync), -1, entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsSync");

    // Call down to the next layer
    void *entry          = funcMap["glIsSync"];
    PFNGLISSYNCPROC next = reinterpret_cast<PFNGLISSYNCPROC>(entry);
    GLboolean ret        = next(sync);

    g_pop_debug_group();
    return ret;
}

GLboolean GL_APIENTRY GL_IsTransformFeedback(GLuint id)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsTransformFeedback(id = %u)", id);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsTransformFeedback");

    // Call down to the next layer
    void *entry                       = funcMap["glIsTransformFeedback"];
    PFNGLISTRANSFORMFEEDBACKPROC next = reinterpret_cast<PFNGLISTRANSFORMFEEDBACKPROC>(entry);
    GLboolean ret                     = next(id);

    g_pop_debug_group();
    return ret;
}

GLboolean GL_APIENTRY GL_IsVertexArray(GLuint array)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsVertexArray(array = %u)", array);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLIsVertexArray), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glIsVertexArray");

    // Call down to the next layer
    void *entry                 = funcMap["glIsVertexArray"];
    PFNGLISVERTEXARRAYPROC next = reinterpret_cast<PFNGLISVERTEXARRAYPROC>(entry);
    GLboolean ret               = next(array);

    g_pop_debug_group();
    return ret;
}

void *GL_APIENTRY GL_MapBufferRange(GLenum target,
                                    GLintptr offset,
                                    GLsizeiptr length,
                                    GLbitfield access)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glMapBufferRange(target = %s, offset = %llu, length = %llu, access = %s)",
                 GLenumToString(GLenumGroup::BufferTargetARB, target),
                 static_cast<unsigned long long>(offset), static_cast<unsigned long long>(length),
                 GLbitfieldToString(GLenumGroup::BufferAccessMask, access).c_str());
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLMapBufferRange), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glMapBufferRange");

    // Call down to the next layer
    void *entry                  = funcMap["glMapBufferRange"];
    PFNGLMAPBUFFERRANGEPROC next = reinterpret_cast<PFNGLMAPBUFFERRANGEPROC>(entry);
    void *ret                    = next(target, offset, length, access);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_PauseTransformFeedback()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPauseTransformFeedback()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLPauseTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glPauseTransformFeedback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glPauseTransformFeedback"];
    PFNGLPAUSETRANSFORMFEEDBACKPROC next = reinterpret_cast<PFNGLPAUSETRANSFORMFEEDBACKPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramBinary(GLuint program,
                                  GLenum binaryFormat,
                                  const void *binary,
                                  GLsizei length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glProgramBinary(program = %u, binaryFormat = %s, binary = 0x%016" PRIxPTR
                 ", length = %d)",
                 program, GLenumToString(GLenumGroup::DefaultGroup, binaryFormat),
                 (uintptr_t)binary, length);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramBinary), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramBinary  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glProgramBinary"];
    PFNGLPROGRAMBINARYPROC next = reinterpret_cast<PFNGLPROGRAMBINARYPROC>(entry);
    next(program, binaryFormat, binary, length);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ProgramParameteri(GLuint program, GLenum pname, GLint value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glProgramParameteri(program = %u, pname = %s, value = %d)",
                 program, GLenumToString(GLenumGroup::ProgramParameterPName, pname), value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLProgramParameteri), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glProgramParameteri  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glProgramParameteri"];
    PFNGLPROGRAMPARAMETERIPROC next = reinterpret_cast<PFNGLPROGRAMPARAMETERIPROC>(entry);
    next(program, pname, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ReadBuffer(GLenum src)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glReadBuffer(src = %s)",
                 GLenumToString(GLenumGroup::ReadBufferMode, src));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLReadBuffer), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glReadBuffer  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glReadBuffer"];
    PFNGLREADBUFFERPROC next = reinterpret_cast<PFNGLREADBUFFERPROC>(entry);
    next(src);

    g_pop_debug_group();
}

void GL_APIENTRY GL_RenderbufferStorageMultisample(GLenum target,
                                                   GLsizei samples,
                                                   GLenum internalformat,
                                                   GLsizei width,
                                                   GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glRenderbufferStorageMultisample(target = %s, samples = %d, internalformat = %s, "
                 "width = %d, height = %d)",
                 GLenumToString(GLenumGroup::RenderbufferTarget, target), samples,
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLRenderbufferStorageMultisample), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glRenderbufferStorageMultisample  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glRenderbufferStorageMultisample"];
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC next =
        reinterpret_cast<PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC>(entry);
    next(target, samples, internalformat, width, height);

    g_pop_debug_group();
}

void GL_APIENTRY GL_ResumeTransformFeedback()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glResumeTransformFeedback()");
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLResumeTransformFeedback), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glResumeTransformFeedback  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glResumeTransformFeedback"];
    PFNGLRESUMETRANSFORMFEEDBACKPROC next =
        reinterpret_cast<PFNGLRESUMETRANSFORMFEEDBACKPROC>(entry);
    next();

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSamplerParameterf(sampler = %u, pname = %s, param = %f)",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterf), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameterf  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glSamplerParameterf"];
    PFNGLSAMPLERPARAMETERFPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERFPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameterfv(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameterfv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameterfv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glSamplerParameterfv"];
    PFNGLSAMPLERPARAMETERFVPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERFVPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSamplerParameteri(sampler = %u, pname = %s, param = %d)",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname), param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameteri), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameteri  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glSamplerParameteri"];
    PFNGLSAMPLERPARAMETERIPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glSamplerParameteriv(sampler = %u, pname = %s, param = 0x%016" PRIxPTR ")",
                 sampler, GLenumToString(GLenumGroup::SamplerParameterName, pname),
                 (uintptr_t)param);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLSamplerParameteriv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glSamplerParameteriv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glSamplerParameteriv"];
    PFNGLSAMPLERPARAMETERIVPROC next = reinterpret_cast<PFNGLSAMPLERPARAMETERIVPROC>(entry);
    next(sampler, pname, param);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexImage3D(GLenum target,
                               GLint level,
                               GLint internalformat,
                               GLsizei width,
                               GLsizei height,
                               GLsizei depth,
                               GLint border,
                               GLenum format,
                               GLenum type,
                               const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexImage3D(target = %s, level = %d, internalformat = %d, width = %d, height = "
                 "%d, depth = %d, border = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR ")",
                 GLenumToString(GLenumGroup::TextureTarget, target), level, internalformat, width,
                 height, depth, border, GLenumToString(GLenumGroup::PixelFormat, format),
                 GLenumToString(GLenumGroup::PixelType, type), (uintptr_t)pixels);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexImage3D), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexImage3D  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTexImage3D"];
    PFNGLTEXIMAGE3DPROC next = reinterpret_cast<PFNGLTEXIMAGE3DPROC>(entry);
    next(target, level, internalformat, width, height, depth, border, format, type, pixels);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexStorage2D(target = %s, levels = %d, internalformat = %s, width = %d, height = %d)",
        GLenumToString(GLenumGroup::TextureTarget, target), levels,
        GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexStorage2D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexStorage2D  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glTexStorage2D"];
    PFNGLTEXSTORAGE2DPROC next = reinterpret_cast<PFNGLTEXSTORAGE2DPROC>(entry);
    next(target, levels, internalformat, width, height);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexStorage3D(GLenum target,
                                 GLsizei levels,
                                 GLenum internalformat,
                                 GLsizei width,
                                 GLsizei height,
                                 GLsizei depth)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexStorage3D(target = %s, levels = %d, internalformat = %s, width = %d, height "
                 "= %d, depth = %d)",
                 GLenumToString(GLenumGroup::TextureTarget, target), levels,
                 GLenumToString(GLenumGroup::InternalFormat, internalformat), width, height, depth);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexStorage3D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexStorage3D  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glTexStorage3D"];
    PFNGLTEXSTORAGE3DPROC next = reinterpret_cast<PFNGLTEXSTORAGE3DPROC>(entry);
    next(target, levels, internalformat, width, height, depth);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TexSubImage3D(GLenum target,
                                  GLint level,
                                  GLint xoffset,
                                  GLint yoffset,
                                  GLint zoffset,
                                  GLsizei width,
                                  GLsizei height,
                                  GLsizei depth,
                                  GLenum format,
                                  GLenum type,
                                  const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glTexSubImage3D(target = %s, level = %d, xoffset = %d, yoffset = %d, zoffset = %d, width "
        "= %d, height = %d, depth = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR ")",
        GLenumToString(GLenumGroup::TextureTarget, target), level, xoffset, yoffset, zoffset, width,
        height, depth, GLenumToString(GLenumGroup::PixelFormat, format),
        GLenumToString(GLenumGroup::PixelType, type), (uintptr_t)pixels);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTexSubImage3D), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTexSubImage3D  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexSubImage3D"];
    PFNGLTEXSUBIMAGE3DPROC next = reinterpret_cast<PFNGLTEXSUBIMAGE3DPROC>(entry);
    next(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

    g_pop_debug_group();
}

void GL_APIENTRY GL_TransformFeedbackVaryings(GLuint program,
                                              GLsizei count,
                                              const GLchar *const *varyings,
                                              GLenum bufferMode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTransformFeedbackVaryings(program = %u, count = %d, varyings = 0x%016" PRIxPTR
                 ", bufferMode = %s)",
                 program, count, (uintptr_t)varyings,
                 GLenumToString(GLenumGroup::DefaultGroup, bufferMode));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLTransformFeedbackVaryings), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glTransformFeedbackVaryings  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glTransformFeedbackVaryings"];
    PFNGLTRANSFORMFEEDBACKVARYINGSPROC next =
        reinterpret_cast<PFNGLTRANSFORMFEEDBACKVARYINGSPROC>(entry);
    next(program, count, varyings, bufferMode);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform1ui(GLint location, GLuint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform1ui(location = %d, v0 = %u)", location, v0);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform1ui), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform1ui  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform1ui"];
    PFNGLUNIFORM1UIPROC next = reinterpret_cast<PFNGLUNIFORM1UIPROC>(entry);
    next(location, v0);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform1uiv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform1uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform1uiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glUniform1uiv"];
    PFNGLUNIFORM1UIVPROC next = reinterpret_cast<PFNGLUNIFORM1UIVPROC>(entry);
    next(location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform2ui(GLint location, GLuint v0, GLuint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform2ui(location = %d, v0 = %u, v1 = %u)", location, v0,
                 v1);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform2ui), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform2ui  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform2ui"];
    PFNGLUNIFORM2UIPROC next = reinterpret_cast<PFNGLUNIFORM2UIPROC>(entry);
    next(location, v0, v1);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform2uiv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform2uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform2uiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glUniform2uiv"];
    PFNGLUNIFORM2UIVPROC next = reinterpret_cast<PFNGLUNIFORM2UIVPROC>(entry);
    next(location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform3ui(location = %d, v0 = %u, v1 = %u, v2 = %u)",
                 location, v0, v1, v2);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform3ui), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform3ui  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform3ui"];
    PFNGLUNIFORM3UIPROC next = reinterpret_cast<PFNGLUNIFORM3UIPROC>(entry);
    next(location, v0, v1, v2);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform3uiv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform3uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform3uiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glUniform3uiv"];
    PFNGLUNIFORM3UIVPROC next = reinterpret_cast<PFNGLUNIFORM3UIVPROC>(entry);
    next(location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4ui(location = %d, v0 = %u, v1 = %u, v2 = %u, v3 = %u)", location, v0,
                 v1, v2, v3);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform4ui), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform4ui  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform4ui"];
    PFNGLUNIFORM4UIPROC next = reinterpret_cast<PFNGLUNIFORM4UIPROC>(entry);
    next(location, v0, v1, v2, v3);

    g_pop_debug_group();
}

void GL_APIENTRY GL_Uniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4uiv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniform4uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniform4uiv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glUniform4uiv"];
    PFNGLUNIFORM4UIVPROC next = reinterpret_cast<PFNGLUNIFORM4UIVPROC>(entry);
    next(location, count, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformBlockBinding(GLuint program,
                                        GLuint uniformBlockIndex,
                                        GLuint uniformBlockBinding)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformBlockBinding(program = %u, uniformBlockIndex = %u, uniformBlockBinding = %u)",
        program, uniformBlockIndex, uniformBlockBinding);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformBlockBinding), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformBlockBinding  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glUniformBlockBinding"];
    PFNGLUNIFORMBLOCKBINDINGPROC next = reinterpret_cast<PFNGLUNIFORMBLOCKBINDINGPROC>(entry);
    next(program, uniformBlockIndex, uniformBlockBinding);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix2x3fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix2x3fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix2x3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix2x3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix2x3fv"];
    PFNGLUNIFORMMATRIX2X3FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX2X3FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix2x4fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix2x4fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix2x4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix2x4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix2x4fv"];
    PFNGLUNIFORMMATRIX2X4FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX2X4FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix3x2fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix3x2fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix3x2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix3x2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix3x2fv"];
    PFNGLUNIFORMMATRIX3X2FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX3X2FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix3x4fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix3x4fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix3x4fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix3x4fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix3x4fv"];
    PFNGLUNIFORMMATRIX3X4FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX3X4FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix4x2fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix4x2fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix4x2fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix4x2fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix4x2fv"];
    PFNGLUNIFORMMATRIX4X2FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX4X2FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

void GL_APIENTRY GL_UniformMatrix4x3fv(GLint location,
                                       GLsizei count,
                                       GLboolean transpose,
                                       const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix4x3fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR
        ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix4x3fv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glUniformMatrix4x3fv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glUniformMatrix4x3fv"];
    PFNGLUNIFORMMATRIX4X3FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX4X3FVPROC>(entry);
    next(location, count, transpose, value);

    g_pop_debug_group();
}

GLboolean GL_APIENTRY GL_UnmapBuffer(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUnmapBuffer(target = %s)",
                 GLenumToString(GLenumGroup::BufferTargetARB, target));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLUnmapBuffer), -1,
                       entryPointMessage);

    // ALOGI("%s", "LLLLL Function is glUnmapBuffer");

    // Call down to the next layer
    void *entry               = funcMap["glUnmapBuffer"];
    PFNGLUNMAPBUFFERPROC next = reinterpret_cast<PFNGLUNMAPBUFFERPROC>(entry);
    GLboolean ret             = next(target);

    g_pop_debug_group();
    return ret;
}

void GL_APIENTRY GL_VertexAttribDivisor(GLuint index, GLuint divisor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribDivisor(index = %u, divisor = %u)", index,
                 divisor);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribDivisor), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribDivisor  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glVertexAttribDivisor"];
    PFNGLVERTEXATTRIBDIVISORPROC next = reinterpret_cast<PFNGLVERTEXATTRIBDIVISORPROC>(entry);
    next(index, divisor);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribI4i(index = %u, x = %d, y = %d, z = %d, w = %d)",
                 index, x, y, z, w);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribI4i), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribI4i  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glVertexAttribI4i"];
    PFNGLVERTEXATTRIBI4IPROC next = reinterpret_cast<PFNGLVERTEXATTRIBI4IPROC>(entry);
    next(index, x, y, z, w);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribI4iv(GLuint index, const GLint *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribI4iv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribI4iv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribI4iv  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glVertexAttribI4iv"];
    PFNGLVERTEXATTRIBI4IVPROC next = reinterpret_cast<PFNGLVERTEXATTRIBI4IVPROC>(entry);
    next(index, v);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glVertexAttribI4ui(index = %u, x = %u, y = %u, z = %u, w = %u)", index, x, y, z,
                 w);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribI4ui), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribI4ui  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glVertexAttribI4ui"];
    PFNGLVERTEXATTRIBI4UIPROC next = reinterpret_cast<PFNGLVERTEXATTRIBI4UIPROC>(entry);
    next(index, x, y, z, w);

    g_pop_debug_group();
}

void GL_APIENTRY GL_VertexAttribI4uiv(GLuint index, const GLuint *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttribI4uiv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribI4uiv), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribI4uiv  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glVertexAttribI4uiv"];
    PFNGLVERTEXATTRIBI4UIVPROC next = reinterpret_cast<PFNGLVERTEXATTRIBI4UIVPROC>(entry);
    next(index, v);

    g_pop_debug_group();
}

void GL_APIENTRY
GL_VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glVertexAttribIPointer(index = %u, size = %d, type = %s, stride = %d, pointer = "
                 "0x%016" PRIxPTR ")",
                 index, size, GLenumToString(GLenumGroup::VertexAttribPointerType, type), stride,
                 (uintptr_t)pointer);
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLVertexAttribIPointer), -1,
                       entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glVertexAttribIPointer  pushed message is ",
    // entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glVertexAttribIPointer"];
    PFNGLVERTEXATTRIBIPOINTERPROC next = reinterpret_cast<PFNGLVERTEXATTRIBIPOINTERPROC>(entry);
    next(index, size, type, stride, pointer);

    g_pop_debug_group();
}

void GL_APIENTRY GL_WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glWaitSync(sync = 0x%016" PRIxPTR ", flags = %s, timeout = %llu)",
                 (uintptr_t)sync, GLbitfieldToString(GLenumGroup::DefaultGroup, flags).c_str(),
                 static_cast<unsigned long long>(timeout));
    g_push_debug_group(GL_DEBUG_SOURCE_THIRD_PARTY_KHR,
                       static_cast<GLuint>(angle::EntryPoint::GLWaitSync), -1, entryPointMessage);

    // ALOGI("%s%s", "LLLLL Function is glWaitSync  pushed message is ", entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glWaitSync"];
    PFNGLWAITSYNCPROC next = reinterpret_cast<PFNGLWAITSYNCPROC>(entry);
    next(sync, flags, timeout);

    g_pop_debug_group();
}

void setupGLES_3_0Hooks()
{
    hookMap["glBeginQuery"]                     = (void *)GL_BeginQuery;
    hookMap["glBeginTransformFeedback"]         = (void *)GL_BeginTransformFeedback;
    hookMap["glBindBufferBase"]                 = (void *)GL_BindBufferBase;
    hookMap["glBindBufferRange"]                = (void *)GL_BindBufferRange;
    hookMap["glBindSampler"]                    = (void *)GL_BindSampler;
    hookMap["glBindTransformFeedback"]          = (void *)GL_BindTransformFeedback;
    hookMap["glBindVertexArray"]                = (void *)GL_BindVertexArray;
    hookMap["glBlitFramebuffer"]                = (void *)GL_BlitFramebuffer;
    hookMap["glClearBufferfi"]                  = (void *)GL_ClearBufferfi;
    hookMap["glClearBufferfv"]                  = (void *)GL_ClearBufferfv;
    hookMap["glClearBufferiv"]                  = (void *)GL_ClearBufferiv;
    hookMap["glClearBufferuiv"]                 = (void *)GL_ClearBufferuiv;
    hookMap["glClientWaitSync"]                 = (void *)GL_ClientWaitSync;
    hookMap["glCompressedTexImage3D"]           = (void *)GL_CompressedTexImage3D;
    hookMap["glCompressedTexSubImage3D"]        = (void *)GL_CompressedTexSubImage3D;
    hookMap["glCopyBufferSubData"]              = (void *)GL_CopyBufferSubData;
    hookMap["glCopyTexSubImage3D"]              = (void *)GL_CopyTexSubImage3D;
    hookMap["glDeleteQueries"]                  = (void *)GL_DeleteQueries;
    hookMap["glDeleteSamplers"]                 = (void *)GL_DeleteSamplers;
    hookMap["glDeleteSync"]                     = (void *)GL_DeleteSync;
    hookMap["glDeleteTransformFeedbacks"]       = (void *)GL_DeleteTransformFeedbacks;
    hookMap["glDeleteVertexArrays"]             = (void *)GL_DeleteVertexArrays;
    hookMap["glDrawArraysInstanced"]            = (void *)GL_DrawArraysInstanced;
    hookMap["glDrawBuffers"]                    = (void *)GL_DrawBuffers;
    hookMap["glDrawElementsInstanced"]          = (void *)GL_DrawElementsInstanced;
    hookMap["glDrawRangeElements"]              = (void *)GL_DrawRangeElements;
    hookMap["glEndQuery"]                       = (void *)GL_EndQuery;
    hookMap["glEndTransformFeedback"]           = (void *)GL_EndTransformFeedback;
    hookMap["glFenceSync"]                      = (void *)GL_FenceSync;
    hookMap["glFlushMappedBufferRange"]         = (void *)GL_FlushMappedBufferRange;
    hookMap["glFramebufferTextureLayer"]        = (void *)GL_FramebufferTextureLayer;
    hookMap["glGenQueries"]                     = (void *)GL_GenQueries;
    hookMap["glGenSamplers"]                    = (void *)GL_GenSamplers;
    hookMap["glGenTransformFeedbacks"]          = (void *)GL_GenTransformFeedbacks;
    hookMap["glGenVertexArrays"]                = (void *)GL_GenVertexArrays;
    hookMap["glGetActiveUniformBlockName"]      = (void *)GL_GetActiveUniformBlockName;
    hookMap["glGetActiveUniformBlockiv"]        = (void *)GL_GetActiveUniformBlockiv;
    hookMap["glGetActiveUniformsiv"]            = (void *)GL_GetActiveUniformsiv;
    hookMap["glGetBufferParameteri64v"]         = (void *)GL_GetBufferParameteri64v;
    hookMap["glGetBufferPointerv"]              = (void *)GL_GetBufferPointerv;
    hookMap["glGetFragDataLocation"]            = (void *)GL_GetFragDataLocation;
    hookMap["glGetInteger64i_v"]                = (void *)GL_GetInteger64i_v;
    hookMap["glGetInteger64v"]                  = (void *)GL_GetInteger64v;
    hookMap["glGetIntegeri_v"]                  = (void *)GL_GetIntegeri_v;
    hookMap["glGetInternalformativ"]            = (void *)GL_GetInternalformativ;
    hookMap["glGetProgramBinary"]               = (void *)GL_GetProgramBinary;
    hookMap["glGetQueryObjectuiv"]              = (void *)GL_GetQueryObjectuiv;
    hookMap["glGetQueryiv"]                     = (void *)GL_GetQueryiv;
    hookMap["glGetSamplerParameterfv"]          = (void *)GL_GetSamplerParameterfv;
    hookMap["glGetSamplerParameteriv"]          = (void *)GL_GetSamplerParameteriv;
    hookMap["glGetStringi"]                     = (void *)GL_GetStringi;
    hookMap["glGetSynciv"]                      = (void *)GL_GetSynciv;
    hookMap["glGetTransformFeedbackVarying"]    = (void *)GL_GetTransformFeedbackVarying;
    hookMap["glGetUniformBlockIndex"]           = (void *)GL_GetUniformBlockIndex;
    hookMap["glGetUniformIndices"]              = (void *)GL_GetUniformIndices;
    hookMap["glGetUniformuiv"]                  = (void *)GL_GetUniformuiv;
    hookMap["glGetVertexAttribIiv"]             = (void *)GL_GetVertexAttribIiv;
    hookMap["glGetVertexAttribIuiv"]            = (void *)GL_GetVertexAttribIuiv;
    hookMap["glInvalidateFramebuffer"]          = (void *)GL_InvalidateFramebuffer;
    hookMap["glInvalidateSubFramebuffer"]       = (void *)GL_InvalidateSubFramebuffer;
    hookMap["glIsQuery"]                        = (void *)GL_IsQuery;
    hookMap["glIsSampler"]                      = (void *)GL_IsSampler;
    hookMap["glIsSync"]                         = (void *)GL_IsSync;
    hookMap["glIsTransformFeedback"]            = (void *)GL_IsTransformFeedback;
    hookMap["glIsVertexArray"]                  = (void *)GL_IsVertexArray;
    hookMap["glMapBufferRange"]                 = (void *)GL_MapBufferRange;
    hookMap["glPauseTransformFeedback"]         = (void *)GL_PauseTransformFeedback;
    hookMap["glProgramBinary"]                  = (void *)GL_ProgramBinary;
    hookMap["glProgramParameteri"]              = (void *)GL_ProgramParameteri;
    hookMap["glReadBuffer"]                     = (void *)GL_ReadBuffer;
    hookMap["glRenderbufferStorageMultisample"] = (void *)GL_RenderbufferStorageMultisample;
    hookMap["glResumeTransformFeedback"]        = (void *)GL_ResumeTransformFeedback;
    hookMap["glSamplerParameterf"]              = (void *)GL_SamplerParameterf;
    hookMap["glSamplerParameterfv"]             = (void *)GL_SamplerParameterfv;
    hookMap["glSamplerParameteri"]              = (void *)GL_SamplerParameteri;
    hookMap["glSamplerParameteriv"]             = (void *)GL_SamplerParameteriv;
    hookMap["glTexImage3D"]                     = (void *)GL_TexImage3D;
    hookMap["glTexStorage2D"]                   = (void *)GL_TexStorage2D;
    hookMap["glTexStorage3D"]                   = (void *)GL_TexStorage3D;
    hookMap["glTexSubImage3D"]                  = (void *)GL_TexSubImage3D;
    hookMap["glTransformFeedbackVaryings"]      = (void *)GL_TransformFeedbackVaryings;
    hookMap["glUniform1ui"]                     = (void *)GL_Uniform1ui;
    hookMap["glUniform1uiv"]                    = (void *)GL_Uniform1uiv;
    hookMap["glUniform2ui"]                     = (void *)GL_Uniform2ui;
    hookMap["glUniform2uiv"]                    = (void *)GL_Uniform2uiv;
    hookMap["glUniform3ui"]                     = (void *)GL_Uniform3ui;
    hookMap["glUniform3uiv"]                    = (void *)GL_Uniform3uiv;
    hookMap["glUniform4ui"]                     = (void *)GL_Uniform4ui;
    hookMap["glUniform4uiv"]                    = (void *)GL_Uniform4uiv;
    hookMap["glUniformBlockBinding"]            = (void *)GL_UniformBlockBinding;
    hookMap["glUniformMatrix2x3fv"]             = (void *)GL_UniformMatrix2x3fv;
    hookMap["glUniformMatrix2x4fv"]             = (void *)GL_UniformMatrix2x4fv;
    hookMap["glUniformMatrix3x2fv"]             = (void *)GL_UniformMatrix3x2fv;
    hookMap["glUniformMatrix3x4fv"]             = (void *)GL_UniformMatrix3x4fv;
    hookMap["glUniformMatrix4x2fv"]             = (void *)GL_UniformMatrix4x2fv;
    hookMap["glUniformMatrix4x3fv"]             = (void *)GL_UniformMatrix4x3fv;
    hookMap["glUnmapBuffer"]                    = (void *)GL_UnmapBuffer;
    hookMap["glVertexAttribDivisor"]            = (void *)GL_VertexAttribDivisor;
    hookMap["glVertexAttribI4i"]                = (void *)GL_VertexAttribI4i;
    hookMap["glVertexAttribI4iv"]               = (void *)GL_VertexAttribI4iv;
    hookMap["glVertexAttribI4ui"]               = (void *)GL_VertexAttribI4ui;
    hookMap["glVertexAttribI4uiv"]              = (void *)GL_VertexAttribI4uiv;
    hookMap["glVertexAttribIPointer"]           = (void *)GL_VertexAttribIPointer;
    hookMap["glWaitSync"]                       = (void *)GL_WaitSync;
}

}  // namespace agi_layer
