// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// layer_entry_points_gles_2_0_autogen.cpp:
//   Layer functions for the OpenGL ES 2.0 entry points.

#include "libGLESv2/layer_entry_points_gles_2_0_autogen.h"
#include "common/entry_points_enum_autogen.h"
#include "labelLayer.h"
#include "libANGLE/capture/gl_enum_utils.h"

using namespace gl;

namespace agi_layer
{

void GL_APIENTRY GL_ActiveTexture(GLenum texture)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glActiveTexture(texture = %s)",
                 GLenumToString(GLESEnum::TextureUnit, texture));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLActiveTexture),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glActiveTexture"];
    PFNGLACTIVETEXTUREPROC next = reinterpret_cast<PFNGLACTIVETEXTUREPROC>(entry);
    next(texture);
}

void GL_APIENTRY GL_AttachShader(GLuint program, GLuint shader)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glAttachShader(program = %u, shader = %u)", program, shader);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLAttachShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glAttachShader"];
    PFNGLATTACHSHADERPROC next = reinterpret_cast<PFNGLATTACHSHADERPROC>(entry);
    next(program, shader);
}

void GL_APIENTRY GL_BindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBindAttribLocation(program = %u, index = %u, name = 0x%016" PRIxPTR ")",
                 program, index, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindAttribLocation),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glBindAttribLocation"];
    PFNGLBINDATTRIBLOCATIONPROC next = reinterpret_cast<PFNGLBINDATTRIBLOCATIONPROC>(entry);
    next(program, index, name);
}

void GL_APIENTRY GL_BindBuffer(GLenum target, GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindBuffer(target = %s, buffer = %u)",
                 GLenumToString(GLESEnum::BufferTargetARB, target), buffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glBindBuffer"];
    PFNGLBINDBUFFERPROC next = reinterpret_cast<PFNGLBINDBUFFERPROC>(entry);
    next(target, buffer);
}

void GL_APIENTRY GL_BindFramebuffer(GLenum target, GLuint framebuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindFramebuffer(target = %s, framebuffer = %u)",
                 GLenumToString(GLESEnum::FramebufferTarget, target), framebuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindFramebuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glBindFramebuffer"];
    PFNGLBINDFRAMEBUFFERPROC next = reinterpret_cast<PFNGLBINDFRAMEBUFFERPROC>(entry);
    next(target, framebuffer);
}

void GL_APIENTRY GL_BindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindRenderbuffer(target = %s, renderbuffer = %u)",
                 GLenumToString(GLESEnum::RenderbufferTarget, target), renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindRenderbuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glBindRenderbuffer"];
    PFNGLBINDRENDERBUFFERPROC next = reinterpret_cast<PFNGLBINDRENDERBUFFERPROC>(entry);
    next(target, renderbuffer);
}

void GL_APIENTRY GL_BindTexture(GLenum target, GLuint texture)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBindTexture(target = %s, texture = %u)",
                 GLenumToString(GLESEnum::TextureTarget, target), texture);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBindTexture),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glBindTexture"];
    PFNGLBINDTEXTUREPROC next = reinterpret_cast<PFNGLBINDTEXTUREPROC>(entry);
    next(target, texture);
}

void GL_APIENTRY GL_BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendColor(red = %f, green = %f, blue = %f, alpha = %f)",
                 red, green, blue, alpha);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendColor),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glBlendColor"];
    PFNGLBLENDCOLORPROC next = reinterpret_cast<PFNGLBLENDCOLORPROC>(entry);
    next(red, green, blue, alpha);
}

void GL_APIENTRY GL_BlendEquation(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendEquation(mode = %s)",
                 GLenumToString(GLESEnum::BlendEquationModeEXT, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquation),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glBlendEquation"];
    PFNGLBLENDEQUATIONPROC next = reinterpret_cast<PFNGLBLENDEQUATIONPROC>(entry);
    next(mode);
}

void GL_APIENTRY GL_BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendEquationSeparate(modeRGB = %s, modeAlpha = %s)",
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeRGB),
                 GLenumToString(GLESEnum::BlendEquationModeEXT, modeAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendEquationSeparate),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glBlendEquationSeparate"];
    PFNGLBLENDEQUATIONSEPARATEPROC next = reinterpret_cast<PFNGLBLENDEQUATIONSEPARATEPROC>(entry);
    next(modeRGB, modeAlpha);
}

void GL_APIENTRY GL_BlendFunc(GLenum sfactor, GLenum dfactor)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glBlendFunc(sfactor = %s, dfactor = %s)",
                 GLenumToString(GLESEnum::BlendingFactor, sfactor),
                 GLenumToString(GLESEnum::BlendingFactor, dfactor));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFunc),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glBlendFunc"];
    PFNGLBLENDFUNCPROC next = reinterpret_cast<PFNGLBLENDFUNCPROC>(entry);
    next(sfactor, dfactor);
}

void GL_APIENTRY GL_BlendFuncSeparate(GLenum sfactorRGB,
                                      GLenum dfactorRGB,
                                      GLenum sfactorAlpha,
                                      GLenum dfactorAlpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBlendFuncSeparate(sfactorRGB = %s, dfactorRGB = %s, sfactorAlpha = %s, "
                 "dfactorAlpha = %s)",
                 GLenumToString(GLESEnum::BlendingFactor, sfactorRGB),
                 GLenumToString(GLESEnum::BlendingFactor, dfactorRGB),
                 GLenumToString(GLESEnum::BlendingFactor, sfactorAlpha),
                 GLenumToString(GLESEnum::BlendingFactor, dfactorAlpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBlendFuncSeparate),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glBlendFuncSeparate"];
    PFNGLBLENDFUNCSEPARATEPROC next = reinterpret_cast<PFNGLBLENDFUNCSEPARATEPROC>(entry);
    next(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void GL_APIENTRY GL_BufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glBufferData(target = %s, size = %llu, data = 0x%016" PRIxPTR ", usage = %s)",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 static_cast<unsigned long long>(size), (uintptr_t)data,
                 GLenumToString(GLESEnum::BufferUsageARB, usage));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBufferData),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glBufferData"];
    PFNGLBUFFERDATAPROC next = reinterpret_cast<PFNGLBUFFERDATAPROC>(entry);
    next(target, size, data, usage);
}

void GL_APIENTRY GL_BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glBufferSubData(target = %s, offset = %llu, size = %llu, data = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::BufferTargetARB, target), static_cast<unsigned long long>(offset),
        static_cast<unsigned long long>(size), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLBufferSubData),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glBufferSubData"];
    PFNGLBUFFERSUBDATAPROC next = reinterpret_cast<PFNGLBUFFERSUBDATAPROC>(entry);
    next(target, offset, size, data);
}

GLenum GL_APIENTRY GL_CheckFramebufferStatus(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCheckFramebufferStatus(target = %s)",
                 GLenumToString(GLESEnum::FramebufferTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCheckFramebufferStatus),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                          = funcMap["glCheckFramebufferStatus"];
    PFNGLCHECKFRAMEBUFFERSTATUSPROC next = reinterpret_cast<PFNGLCHECKFRAMEBUFFERSTATUSPROC>(entry);
    return next(target);
}

void GL_APIENTRY GL_Clear(GLbitfield mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClear(mask = %s)",
                 GLbitfieldToString(GLESEnum::ClearBufferMask, mask).c_str());
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLClear),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry         = funcMap["glClear"];
    PFNGLCLEARPROC next = reinterpret_cast<PFNGLCLEARPROC>(entry);
    next(mask);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClearColor(red = %f, green = %f, blue = %f, alpha = %f)",
                 red, green, blue, alpha);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLClearColor),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glClearColor"];
    PFNGLCLEARCOLORPROC next = reinterpret_cast<PFNGLCLEARCOLORPROC>(entry);
    next(red, green, blue, alpha);
}

void GL_APIENTRY GL_ClearDepthf(GLfloat d)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClearDepthf(d = %f)", d);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLClearDepthf),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glClearDepthf"];
    PFNGLCLEARDEPTHFPROC next = reinterpret_cast<PFNGLCLEARDEPTHFPROC>(entry);
    next(d);
}

void GL_APIENTRY GL_ClearStencil(GLint s)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glClearStencil(s = %d)", s);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLClearStencil),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glClearStencil"];
    PFNGLCLEARSTENCILPROC next = reinterpret_cast<PFNGLCLEARSTENCILPROC>(entry);
    next(s);
}

void GL_APIENTRY GL_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glColorMask(red = %s, green = %s, blue = %s, alpha = %s)",
                 GLbooleanToString(red), GLbooleanToString(green), GLbooleanToString(blue),
                 GLbooleanToString(alpha));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLColorMask),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glColorMask"];
    PFNGLCOLORMASKPROC next = reinterpret_cast<PFNGLCOLORMASKPROC>(entry);
    next(red, green, blue, alpha);
}

void GL_APIENTRY GL_CompileShader(GLuint shader)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCompileShader(shader = %u)", shader);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompileShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glCompileShader"];
    PFNGLCOMPILESHADERPROC next = reinterpret_cast<PFNGLCOMPILESHADERPROC>(entry);
    next(shader);
}

void GL_APIENTRY GL_CompressedTexImage2D(GLenum target,
                                         GLint level,
                                         GLenum internalformat,
                                         GLsizei width,
                                         GLsizei height,
                                         GLint border,
                                         GLsizei imageSize,
                                         const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexImage2D(target = %s, level = %d, internalformat = %s, width = %d, "
                 "height = %d, border = %d, imageSize = %d, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height, border,
                 imageSize, (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompressedTexImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glCompressedTexImage2D"];
    PFNGLCOMPRESSEDTEXIMAGE2DPROC next = reinterpret_cast<PFNGLCOMPRESSEDTEXIMAGE2DPROC>(entry);
    next(target, level, internalformat, width, height, border, imageSize, data);
}

void GL_APIENTRY GL_CompressedTexSubImage2D(GLenum target,
                                            GLint level,
                                            GLint xoffset,
                                            GLint yoffset,
                                            GLsizei width,
                                            GLsizei height,
                                            GLenum format,
                                            GLsizei imageSize,
                                            const void *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCompressedTexSubImage2D(target = %s, level = %d, xoffset = %d, yoffset = %d, "
                 "width = %d, height = %d, format = %s, imageSize = %d, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level, xoffset, yoffset, width,
                 height, GLenumToString(GLESEnum::InternalFormat, format), imageSize,
                 (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCompressedTexSubImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glCompressedTexSubImage2D"];
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC next =
        reinterpret_cast<PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC>(entry);
    next(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GL_APIENTRY GL_CopyTexImage2D(GLenum target,
                                   GLint level,
                                   GLenum internalformat,
                                   GLint x,
                                   GLint y,
                                   GLsizei width,
                                   GLsizei height,
                                   GLint border)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTexImage2D(target = %s, level = %d, internalformat = %s, x = %d, y = %d, "
                 "width = %d, height = %d, border = %d)",
                 GLenumToString(GLESEnum::TextureTarget, target), level,
                 GLenumToString(GLESEnum::InternalFormat, internalformat), x, y, width, height,
                 border);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyTexImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glCopyTexImage2D"];
    PFNGLCOPYTEXIMAGE2DPROC next = reinterpret_cast<PFNGLCOPYTEXIMAGE2DPROC>(entry);
    next(target, level, internalformat, x, y, width, height, border);
}

void GL_APIENTRY GL_CopyTexSubImage2D(GLenum target,
                                      GLint level,
                                      GLint xoffset,
                                      GLint yoffset,
                                      GLint x,
                                      GLint y,
                                      GLsizei width,
                                      GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glCopyTexSubImage2D(target = %s, level = %d, xoffset = %d, yoffset = %d, x = %d, "
                 "y = %d, width = %d, height = %d)",
                 GLenumToString(GLESEnum::TextureTarget, target), level, xoffset, yoffset, x, y,
                 width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCopyTexSubImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glCopyTexSubImage2D"];
    PFNGLCOPYTEXSUBIMAGE2DPROC next = reinterpret_cast<PFNGLCOPYTEXSUBIMAGE2DPROC>(entry);
    next(target, level, xoffset, yoffset, x, y, width, height);
}

GLuint GL_APIENTRY GL_CreateProgram()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCreateProgram()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCreateProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glCreateProgram"];
    PFNGLCREATEPROGRAMPROC next = reinterpret_cast<PFNGLCREATEPROGRAMPROC>(entry);
    return next();
}

GLuint GL_APIENTRY GL_CreateShader(GLenum type)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCreateShader(type = %s)",
                 GLenumToString(GLESEnum::ShaderType, type));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCreateShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glCreateShader"];
    PFNGLCREATESHADERPROC next = reinterpret_cast<PFNGLCREATESHADERPROC>(entry);
    return next(type);
}

void GL_APIENTRY GL_CullFace(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glCullFace(mode = %s)",
                 GLenumToString(GLESEnum::CullFaceMode, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLCullFace),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glCullFace"];
    PFNGLCULLFACEPROC next = reinterpret_cast<PFNGLCULLFACEPROC>(entry);
    next(mode);
}

void GL_APIENTRY GL_DeleteBuffers(GLsizei n, const GLuint *buffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteBuffers(n = %d, buffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)buffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteBuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glDeleteBuffers"];
    PFNGLDELETEBUFFERSPROC next = reinterpret_cast<PFNGLDELETEBUFFERSPROC>(entry);
    next(n, buffers);
}

void GL_APIENTRY GL_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteFramebuffers(n = %d, framebuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)framebuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteFramebuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glDeleteFramebuffers"];
    PFNGLDELETEFRAMEBUFFERSPROC next = reinterpret_cast<PFNGLDELETEFRAMEBUFFERSPROC>(entry);
    next(n, framebuffers);
}

void GL_APIENTRY GL_DeleteProgram(GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteProgram(program = %u)", program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glDeleteProgram"];
    PFNGLDELETEPROGRAMPROC next = reinterpret_cast<PFNGLDELETEPROGRAMPROC>(entry);
    next(program);
}

void GL_APIENTRY GL_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDeleteRenderbuffers(n = %d, renderbuffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)renderbuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteRenderbuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glDeleteRenderbuffers"];
    PFNGLDELETERENDERBUFFERSPROC next = reinterpret_cast<PFNGLDELETERENDERBUFFERSPROC>(entry);
    next(n, renderbuffers);
}

void GL_APIENTRY GL_DeleteShader(GLuint shader)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteShader(shader = %u)", shader);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDeleteShader"];
    PFNGLDELETESHADERPROC next = reinterpret_cast<PFNGLDELETESHADERPROC>(entry);
    next(shader);
}

void GL_APIENTRY GL_DeleteTextures(GLsizei n, const GLuint *textures)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDeleteTextures(n = %d, textures = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)textures);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDeleteTextures),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glDeleteTextures"];
    PFNGLDELETETEXTURESPROC next = reinterpret_cast<PFNGLDELETETEXTURESPROC>(entry);
    next(n, textures);
}

void GL_APIENTRY GL_DepthFunc(GLenum func)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDepthFunc(func = %s)",
                 GLenumToString(GLESEnum::DepthFunction, func));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDepthFunc),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glDepthFunc"];
    PFNGLDEPTHFUNCPROC next = reinterpret_cast<PFNGLDEPTHFUNCPROC>(entry);
    next(func);
}

void GL_APIENTRY GL_DepthMask(GLboolean flag)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDepthMask(flag = %s)", GLbooleanToString(flag));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDepthMask),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glDepthMask"];
    PFNGLDEPTHMASKPROC next = reinterpret_cast<PFNGLDEPTHMASKPROC>(entry);
    next(flag);
}

void GL_APIENTRY GL_DepthRangef(GLfloat n, GLfloat f)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDepthRangef(n = %f, f = %f)", n, f);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDepthRangef),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glDepthRangef"];
    PFNGLDEPTHRANGEFPROC next = reinterpret_cast<PFNGLDEPTHRANGEFPROC>(entry);
    next(n, f);
}

void GL_APIENTRY GL_DetachShader(GLuint program, GLuint shader)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDetachShader(program = %u, shader = %u)", program, shader);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDetachShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDetachShader"];
    PFNGLDETACHSHADERPROC next = reinterpret_cast<PFNGLDETACHSHADERPROC>(entry);
    next(program, shader);
}

void GL_APIENTRY GL_Disable(GLenum cap)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisable(cap = %s)",
                 GLenumToString(GLESEnum::EnableCap, cap));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDisable),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glDisable"];
    PFNGLDISABLEPROC next = reinterpret_cast<PFNGLDISABLEPROC>(entry);
    next(cap);
}

void GL_APIENTRY GL_DisableVertexAttribArray(GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDisableVertexAttribArray(index = %u)", index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDisableVertexAttribArray),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glDisableVertexAttribArray"];
    PFNGLDISABLEVERTEXATTRIBARRAYPROC next =
        reinterpret_cast<PFNGLDISABLEVERTEXATTRIBARRAYPROC>(entry);
    next(index);
}

void GL_APIENTRY GL_DrawArrays(GLenum mode, GLint first, GLsizei count)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glDrawArrays(mode = %s, first = %d, count = %d)",
                 GLenumToString(GLESEnum::PrimitiveType, mode), first, count);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawArrays),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glDrawArrays"];
    PFNGLDRAWARRAYSPROC next = reinterpret_cast<PFNGLDRAWARRAYSPROC>(entry);
    next(mode, first, count);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_DrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glDrawElements(mode = %s, count = %d, type = %s, indices = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::PrimitiveType, mode), count,
                 GLenumToString(GLESEnum::DrawElementsType, type), (uintptr_t)indices);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLDrawElements),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glDrawElements"];
    PFNGLDRAWELEMENTSPROC next = reinterpret_cast<PFNGLDRAWELEMENTSPROC>(entry);
    next(mode, count, type, indices);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR, 0xFFFFAAAA,
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, "EndLabelEvent");
}

void GL_APIENTRY GL_Enable(GLenum cap)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnable(cap = %s)", GLenumToString(GLESEnum::EnableCap, cap));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEnable),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glEnable"];
    PFNGLENABLEPROC next = reinterpret_cast<PFNGLENABLEPROC>(entry);
    next(cap);
}

void GL_APIENTRY GL_EnableVertexAttribArray(GLuint index)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glEnableVertexAttribArray(index = %u)", index);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLEnableVertexAttribArray),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glEnableVertexAttribArray"];
    PFNGLENABLEVERTEXATTRIBARRAYPROC next =
        reinterpret_cast<PFNGLENABLEVERTEXATTRIBARRAYPROC>(entry);
    next(index);
}

void GL_APIENTRY GL_Finish()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFinish()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFinish),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry          = funcMap["glFinish"];
    PFNGLFINISHPROC next = reinterpret_cast<PFNGLFINISHPROC>(entry);
    next();
}

void GL_APIENTRY GL_Flush()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFlush()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFlush),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry         = funcMap["glFlush"];
    PFNGLFLUSHPROC next = reinterpret_cast<PFNGLFLUSHPROC>(entry);
    next();
}

void GL_APIENTRY GL_FramebufferRenderbuffer(GLenum target,
                                            GLenum attachment,
                                            GLenum renderbuffertarget,
                                            GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferRenderbuffer(target = %s, attachment = %s, renderbuffertarget = %s, "
                 "renderbuffer = %u)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::RenderbufferTarget, renderbuffertarget), renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferRenderbuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glFramebufferRenderbuffer"];
    PFNGLFRAMEBUFFERRENDERBUFFERPROC next =
        reinterpret_cast<PFNGLFRAMEBUFFERRENDERBUFFERPROC>(entry);
    next(target, attachment, renderbuffertarget, renderbuffer);
}

void GL_APIENTRY GL_FramebufferTexture2D(GLenum target,
                                         GLenum attachment,
                                         GLenum textarget,
                                         GLuint texture,
                                         GLint level)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glFramebufferTexture2D(target = %s, attachment = %s, textarget = %s, texture = "
                 "%u, level = %d)",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::TextureTarget, textarget), texture, level);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFramebufferTexture2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glFramebufferTexture2D"];
    PFNGLFRAMEBUFFERTEXTURE2DPROC next = reinterpret_cast<PFNGLFRAMEBUFFERTEXTURE2DPROC>(entry);
    next(target, attachment, textarget, texture, level);
}

void GL_APIENTRY GL_FrontFace(GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glFrontFace(mode = %s)",
                 GLenumToString(GLESEnum::FrontFaceDirection, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLFrontFace),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glFrontFace"];
    PFNGLFRONTFACEPROC next = reinterpret_cast<PFNGLFRONTFACEPROC>(entry);
    next(mode);
}

void GL_APIENTRY GL_GenBuffers(GLsizei n, GLuint *buffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenBuffers(n = %d, buffers = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)buffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenBuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glGenBuffers"];
    PFNGLGENBUFFERSPROC next = reinterpret_cast<PFNGLGENBUFFERSPROC>(entry);
    next(n, buffers);
}

void GL_APIENTRY GL_GenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenFramebuffers(n = %d, framebuffers = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)framebuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenFramebuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glGenFramebuffers"];
    PFNGLGENFRAMEBUFFERSPROC next = reinterpret_cast<PFNGLGENFRAMEBUFFERSPROC>(entry);
    next(n, framebuffers);
}

void GL_APIENTRY GL_GenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenRenderbuffers(n = %d, renderbuffers = 0x%016" PRIxPTR ")",
                 n, (uintptr_t)renderbuffers);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenRenderbuffers),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGenRenderbuffers"];
    PFNGLGENRENDERBUFFERSPROC next = reinterpret_cast<PFNGLGENRENDERBUFFERSPROC>(entry);
    next(n, renderbuffers);
}

void GL_APIENTRY GL_GenTextures(GLsizei n, GLuint *textures)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenTextures(n = %d, textures = 0x%016" PRIxPTR ")", n,
                 (uintptr_t)textures);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenTextures),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGenTextures"];
    PFNGLGENTEXTURESPROC next = reinterpret_cast<PFNGLGENTEXTURESPROC>(entry);
    next(n, textures);
}

void GL_APIENTRY GL_GenerateMipmap(GLenum target)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGenerateMipmap(target = %s)",
                 GLenumToString(GLESEnum::TextureTarget, target));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGenerateMipmap),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glGenerateMipmap"];
    PFNGLGENERATEMIPMAPPROC next = reinterpret_cast<PFNGLGENERATEMIPMAPPROC>(entry);
    next(target);
}

void GL_APIENTRY GL_GetActiveAttrib(GLuint program,
                                    GLuint index,
                                    GLsizei bufSize,
                                    GLsizei *length,
                                    GLint *size,
                                    GLenum *type,
                                    GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetActiveAttrib(program = %u, index = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", size = 0x%016" PRIxPTR ", type = 0x%016" PRIxPTR ", name = 0x%016" PRIxPTR ")",
                 program, index, bufSize, (uintptr_t)length, (uintptr_t)size, (uintptr_t)type,
                 (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetActiveAttrib),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glGetActiveAttrib"];
    PFNGLGETACTIVEATTRIBPROC next = reinterpret_cast<PFNGLGETACTIVEATTRIBPROC>(entry);
    next(program, index, bufSize, length, size, type, name);
}

void GL_APIENTRY GL_GetActiveUniform(GLuint program,
                                     GLuint index,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLint *size,
                                     GLenum *type,
                                     GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetActiveUniform(program = %u, index = %u, bufSize = %d, length = 0x%016" PRIxPTR
        ", size = 0x%016" PRIxPTR ", type = 0x%016" PRIxPTR ", name = 0x%016" PRIxPTR ")",
        program, index, bufSize, (uintptr_t)length, (uintptr_t)size, (uintptr_t)type,
        (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetActiveUniform),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetActiveUniform"];
    PFNGLGETACTIVEUNIFORMPROC next = reinterpret_cast<PFNGLGETACTIVEUNIFORMPROC>(entry);
    next(program, index, bufSize, length, size, type, name);
}

void GL_APIENTRY GL_GetAttachedShaders(GLuint program,
                                       GLsizei maxCount,
                                       GLsizei *count,
                                       GLuint *shaders)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetAttachedShaders(program = %u, maxCount = %d, count = 0x%016" PRIxPTR
                 ", shaders = 0x%016" PRIxPTR ")",
                 program, maxCount, (uintptr_t)count, (uintptr_t)shaders);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetAttachedShaders),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGetAttachedShaders"];
    PFNGLGETATTACHEDSHADERSPROC next = reinterpret_cast<PFNGLGETATTACHEDSHADERSPROC>(entry);
    next(program, maxCount, count, shaders);
}

GLint GL_APIENTRY GL_GetAttribLocation(GLuint program, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetAttribLocation(program = %u, name = 0x%016" PRIxPTR ")",
                 program, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetAttribLocation),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetAttribLocation"];
    PFNGLGETATTRIBLOCATIONPROC next = reinterpret_cast<PFNGLGETATTRIBLOCATIONPROC>(entry);
    return next(program, name);
}

void GL_APIENTRY GL_GetBooleanv(GLenum pname, GLboolean *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetBooleanv(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::GetPName, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBooleanv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetBooleanv"];
    PFNGLGETBOOLEANVPROC next = reinterpret_cast<PFNGLGETBOOLEANVPROC>(entry);
    next(pname, data);
}

void GL_APIENTRY GL_GetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetBufferParameteriv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::BufferTargetARB, target),
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetBufferParameteriv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                        = funcMap["glGetBufferParameteriv"];
    PFNGLGETBUFFERPARAMETERIVPROC next = reinterpret_cast<PFNGLGETBUFFERPARAMETERIVPROC>(entry);
    next(target, pname, params);
}

GLenum GL_APIENTRY GL_GetError()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetError()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetError),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glGetError"];
    PFNGLGETERRORPROC next = reinterpret_cast<PFNGLGETERRORPROC>(entry);
    return next();
}

void GL_APIENTRY GL_GetFloatv(GLenum pname, GLfloat *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetFloatv(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::GetPName, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetFloatv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glGetFloatv"];
    PFNGLGETFLOATVPROC next = reinterpret_cast<PFNGLGETFLOATVPROC>(entry);
    next(pname, data);
}

void GL_APIENTRY GL_GetFramebufferAttachmentParameteriv(GLenum target,
                                                        GLenum attachment,
                                                        GLenum pname,
                                                        GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetFramebufferAttachmentParameteriv(target = %s, attachment = %s, pname = %s, "
                 "params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::FramebufferTarget, target),
                 GLenumToString(GLESEnum::FramebufferAttachment, attachment),
                 GLenumToString(GLESEnum::FramebufferAttachmentParameterName, pname),
                 (uintptr_t)params);
    g_debug_message_insert(
        GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
        static_cast<GLuint>(angle::EntryPoint::GLGetFramebufferAttachmentParameteriv),
        GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetFramebufferAttachmentParameteriv"];
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC next =
        reinterpret_cast<PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC>(entry);
    next(target, attachment, pname, params);
}

void GL_APIENTRY GL_GetIntegerv(GLenum pname, GLint *data)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetIntegerv(pname = %s, data = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::GetPName, pname), (uintptr_t)data);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetIntegerv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetIntegerv"];
    PFNGLGETINTEGERVPROC next = reinterpret_cast<PFNGLGETINTEGERVPROC>(entry);
    next(pname, data);
}

void GL_APIENTRY GL_GetProgramInfoLog(GLuint program,
                                      GLsizei bufSize,
                                      GLsizei *length,
                                      GLchar *infoLog)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramInfoLog(program = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", infoLog = 0x%016" PRIxPTR ")",
                 program, bufSize, (uintptr_t)length, (uintptr_t)infoLog);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramInfoLog),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetProgramInfoLog"];
    PFNGLGETPROGRAMINFOLOGPROC next = reinterpret_cast<PFNGLGETPROGRAMINFOLOGPROC>(entry);
    next(program, bufSize, length, infoLog);
}

void GL_APIENTRY GL_GetProgramiv(GLuint program, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetProgramiv(program = %u, pname = %s, params = 0x%016" PRIxPTR ")", program,
                 GLenumToString(GLESEnum::ProgramPropertyARB, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetProgramiv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glGetProgramiv"];
    PFNGLGETPROGRAMIVPROC next = reinterpret_cast<PFNGLGETPROGRAMIVPROC>(entry);
    next(program, pname, params);
}

void GL_APIENTRY GL_GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetRenderbufferParameteriv(target = %s, pname = %s, params = 0x%016" PRIxPTR
                 ")",
                 GLenumToString(GLESEnum::RenderbufferTarget, target),
                 GLenumToString(GLESEnum::RenderbufferParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetRenderbufferParameteriv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetRenderbufferParameteriv"];
    PFNGLGETRENDERBUFFERPARAMETERIVPROC next =
        reinterpret_cast<PFNGLGETRENDERBUFFERPARAMETERIVPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_GetShaderInfoLog(GLuint shader,
                                     GLsizei bufSize,
                                     GLsizei *length,
                                     GLchar *infoLog)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetShaderInfoLog(shader = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", infoLog = 0x%016" PRIxPTR ")",
                 shader, bufSize, (uintptr_t)length, (uintptr_t)infoLog);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetShaderInfoLog),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glGetShaderInfoLog"];
    PFNGLGETSHADERINFOLOGPROC next = reinterpret_cast<PFNGLGETSHADERINFOLOGPROC>(entry);
    next(shader, bufSize, length, infoLog);
}

void GL_APIENTRY GL_GetShaderPrecisionFormat(GLenum shadertype,
                                             GLenum precisiontype,
                                             GLint *range,
                                             GLint *precision)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glGetShaderPrecisionFormat(shadertype = %s, precisiontype = %s, range = 0x%016" PRIxPTR
        ", precision = 0x%016" PRIxPTR ")",
        GLenumToString(GLESEnum::ShaderType, shadertype),
        GLenumToString(GLESEnum::PrecisionType, precisiontype), (uintptr_t)range,
        (uintptr_t)precision);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetShaderPrecisionFormat),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetShaderPrecisionFormat"];
    PFNGLGETSHADERPRECISIONFORMATPROC next =
        reinterpret_cast<PFNGLGETSHADERPRECISIONFORMATPROC>(entry);
    next(shadertype, precisiontype, range, precision);
}

void GL_APIENTRY GL_GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetShaderSource(shader = %u, bufSize = %d, length = 0x%016" PRIxPTR
                 ", source = 0x%016" PRIxPTR ")",
                 shader, bufSize, (uintptr_t)length, (uintptr_t)source);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetShaderSource),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glGetShaderSource"];
    PFNGLGETSHADERSOURCEPROC next = reinterpret_cast<PFNGLGETSHADERSOURCEPROC>(entry);
    next(shader, bufSize, length, source);
}

void GL_APIENTRY GL_GetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetShaderiv(shader = %u, pname = %s, params = 0x%016" PRIxPTR ")", shader,
                 GLenumToString(GLESEnum::ShaderParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetShaderiv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glGetShaderiv"];
    PFNGLGETSHADERIVPROC next = reinterpret_cast<PFNGLGETSHADERIVPROC>(entry);
    next(shader, pname, params);
}

const GLubyte *GL_APIENTRY GL_GetString(GLenum name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetString(name = %s)",
                 GLenumToString(GLESEnum::StringName, name));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetString),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glGetString"];
    PFNGLGETSTRINGPROC next = reinterpret_cast<PFNGLGETSTRINGPROC>(entry);
    return next(name);
}

void GL_APIENTRY GL_GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameterfv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameterfv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetTexParameterfv"];
    PFNGLGETTEXPARAMETERFVPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERFVPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_GetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetTexParameteriv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::GetTextureParameter, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetTexParameteriv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetTexParameteriv"];
    PFNGLGETTEXPARAMETERIVPROC next = reinterpret_cast<PFNGLGETTEXPARAMETERIVPROC>(entry);
    next(target, pname, params);
}

GLint GL_APIENTRY GL_GetUniformLocation(GLuint program, const GLchar *name)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glGetUniformLocation(program = %u, name = 0x%016" PRIxPTR ")",
                 program, (uintptr_t)name);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformLocation),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                      = funcMap["glGetUniformLocation"];
    PFNGLGETUNIFORMLOCATIONPROC next = reinterpret_cast<PFNGLGETUNIFORMLOCATIONPROC>(entry);
    return next(program, name);
}

void GL_APIENTRY GL_GetUniformfv(GLuint program, GLint location, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformfv(program = %u, location = %d, params = 0x%016" PRIxPTR ")", program,
                 location, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformfv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glGetUniformfv"];
    PFNGLGETUNIFORMFVPROC next = reinterpret_cast<PFNGLGETUNIFORMFVPROC>(entry);
    next(program, location, params);
}

void GL_APIENTRY GL_GetUniformiv(GLuint program, GLint location, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetUniformiv(program = %u, location = %d, params = 0x%016" PRIxPTR ")", program,
                 location, (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetUniformiv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glGetUniformiv"];
    PFNGLGETUNIFORMIVPROC next = reinterpret_cast<PFNGLGETUNIFORMIVPROC>(entry);
    next(program, location, params);
}

void GL_APIENTRY GL_GetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribPointerv(index = %u, pname = %s, pointer = 0x%016" PRIxPTR ")",
                 index, GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribPointerv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry = funcMap["glGetVertexAttribPointerv"];
    PFNGLGETVERTEXATTRIBPOINTERVPROC next =
        reinterpret_cast<PFNGLGETVERTEXATTRIBPOINTERVPROC>(entry);
    next(index, pname, pointer);
}

void GL_APIENTRY GL_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribfv(index = %u, pname = %s, params = 0x%016" PRIxPTR ")", index,
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribfv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetVertexAttribfv"];
    PFNGLGETVERTEXATTRIBFVPROC next = reinterpret_cast<PFNGLGETVERTEXATTRIBFVPROC>(entry);
    next(index, pname, params);
}

void GL_APIENTRY GL_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glGetVertexAttribiv(index = %u, pname = %s, params = 0x%016" PRIxPTR ")", index,
                 GLenumToString(GLESEnum::AllEnums, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLGetVertexAttribiv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glGetVertexAttribiv"];
    PFNGLGETVERTEXATTRIBIVPROC next = reinterpret_cast<PFNGLGETVERTEXATTRIBIVPROC>(entry);
    next(index, pname, params);
}

void GL_APIENTRY GL_Hint(GLenum target, GLenum mode)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glHint(target = %s, mode = %s)",
                 GLenumToString(GLESEnum::HintTarget, target),
                 GLenumToString(GLESEnum::HintMode, mode));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLHint),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry        = funcMap["glHint"];
    PFNGLHINTPROC next = reinterpret_cast<PFNGLHINTPROC>(entry);
    next(target, mode);
}

GLboolean GL_APIENTRY GL_IsBuffer(GLuint buffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsBuffer(buffer = %u)", buffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsBuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glIsBuffer"];
    PFNGLISBUFFERPROC next = reinterpret_cast<PFNGLISBUFFERPROC>(entry);
    return next(buffer);
}

GLboolean GL_APIENTRY GL_IsEnabled(GLenum cap)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsEnabled(cap = %s)",
                 GLenumToString(GLESEnum::EnableCap, cap));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsEnabled),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glIsEnabled"];
    PFNGLISENABLEDPROC next = reinterpret_cast<PFNGLISENABLEDPROC>(entry);
    return next(cap);
}

GLboolean GL_APIENTRY GL_IsFramebuffer(GLuint framebuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsFramebuffer(framebuffer = %u)", framebuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsFramebuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glIsFramebuffer"];
    PFNGLISFRAMEBUFFERPROC next = reinterpret_cast<PFNGLISFRAMEBUFFERPROC>(entry);
    return next(framebuffer);
}

GLboolean GL_APIENTRY GL_IsProgram(GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsProgram(program = %u)", program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glIsProgram"];
    PFNGLISPROGRAMPROC next = reinterpret_cast<PFNGLISPROGRAMPROC>(entry);
    return next(program);
}

GLboolean GL_APIENTRY GL_IsRenderbuffer(GLuint renderbuffer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsRenderbuffer(renderbuffer = %u)", renderbuffer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsRenderbuffer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glIsRenderbuffer"];
    PFNGLISRENDERBUFFERPROC next = reinterpret_cast<PFNGLISRENDERBUFFERPROC>(entry);
    return next(renderbuffer);
}

GLboolean GL_APIENTRY GL_IsShader(GLuint shader)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsShader(shader = %u)", shader);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsShader),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glIsShader"];
    PFNGLISSHADERPROC next = reinterpret_cast<PFNGLISSHADERPROC>(entry);
    return next(shader);
}

GLboolean GL_APIENTRY GL_IsTexture(GLuint texture)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glIsTexture(texture = %u)", texture);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLIsTexture),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glIsTexture"];
    PFNGLISTEXTUREPROC next = reinterpret_cast<PFNGLISTEXTUREPROC>(entry);
    return next(texture);
}

void GL_APIENTRY GL_LineWidth(GLfloat width)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLineWidth(width = %f)", width);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLLineWidth),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glLineWidth"];
    PFNGLLINEWIDTHPROC next = reinterpret_cast<PFNGLLINEWIDTHPROC>(entry);
    next(width);
}

void GL_APIENTRY GL_LinkProgram(GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glLinkProgram(program = %u)", program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLLinkProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glLinkProgram"];
    PFNGLLINKPROGRAMPROC next = reinterpret_cast<PFNGLLINKPROGRAMPROC>(entry);
    next(program);
}

void GL_APIENTRY GL_PixelStorei(GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPixelStorei(pname = %s, param = %d)",
                 GLenumToString(GLESEnum::PixelStoreParameter, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPixelStorei),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glPixelStorei"];
    PFNGLPIXELSTOREIPROC next = reinterpret_cast<PFNGLPIXELSTOREIPROC>(entry);
    next(pname, param);
}

void GL_APIENTRY GL_PolygonOffset(GLfloat factor, GLfloat units)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glPolygonOffset(factor = %f, units = %f)", factor, units);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLPolygonOffset),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glPolygonOffset"];
    PFNGLPOLYGONOFFSETPROC next = reinterpret_cast<PFNGLPOLYGONOFFSETPROC>(entry);
    next(factor, units);
}

void GL_APIENTRY GL_ReadPixels(GLint x,
                               GLint y,
                               GLsizei width,
                               GLsizei height,
                               GLenum format,
                               GLenum type,
                               void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glReadPixels(x = %d, y = %d, width = %d, height = %d, format = %s, type = %s, "
                 "pixels = 0x%016" PRIxPTR ")",
                 x, y, width, height, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReadPixels),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glReadPixels"];
    PFNGLREADPIXELSPROC next = reinterpret_cast<PFNGLREADPIXELSPROC>(entry);
    next(x, y, width, height, format, type, pixels);
}

void GL_APIENTRY GL_ReleaseShaderCompiler()
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glReleaseShaderCompiler()");
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLReleaseShaderCompiler),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                         = funcMap["glReleaseShaderCompiler"];
    PFNGLRELEASESHADERCOMPILERPROC next = reinterpret_cast<PFNGLRELEASESHADERCOMPILERPROC>(entry);
    next();
}

void GL_APIENTRY GL_RenderbufferStorage(GLenum target,
                                        GLenum internalformat,
                                        GLsizei width,
                                        GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glRenderbufferStorage(target = %s, internalformat = %s, width = %d, height = %d)",
                 GLenumToString(GLESEnum::RenderbufferTarget, target),
                 GLenumToString(GLESEnum::InternalFormat, internalformat), width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLRenderbufferStorage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glRenderbufferStorage"];
    PFNGLRENDERBUFFERSTORAGEPROC next = reinterpret_cast<PFNGLRENDERBUFFERSTORAGEPROC>(entry);
    next(target, internalformat, width, height);
}

void GL_APIENTRY GL_SampleCoverage(GLfloat value, GLboolean invert)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glSampleCoverage(value = %f, invert = %s)", value,
                 GLbooleanToString(invert));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLSampleCoverage),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glSampleCoverage"];
    PFNGLSAMPLECOVERAGEPROC next = reinterpret_cast<PFNGLSAMPLECOVERAGEPROC>(entry);
    next(value, invert);
}

void GL_APIENTRY GL_Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glScissor(x = %d, y = %d, width = %d, height = %d)", x, y,
                 width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLScissor),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry           = funcMap["glScissor"];
    PFNGLSCISSORPROC next = reinterpret_cast<PFNGLSCISSORPROC>(entry);
    next(x, y, width, height);
}

void GL_APIENTRY GL_ShaderBinary(GLsizei count,
                                 const GLuint *shaders,
                                 GLenum binaryFormat,
                                 const void *binary,
                                 GLsizei length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glShaderBinary(count = %d, shaders = 0x%016" PRIxPTR
                 ", binaryFormat = %s, binary = 0x%016" PRIxPTR ", length = %d)",
                 count, (uintptr_t)shaders,
                 GLenumToString(GLESEnum::ShaderBinaryFormat, binaryFormat), (uintptr_t)binary,
                 length);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLShaderBinary),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glShaderBinary"];
    PFNGLSHADERBINARYPROC next = reinterpret_cast<PFNGLSHADERBINARYPROC>(entry);
    next(count, shaders, binaryFormat, binary, length);
}

void GL_APIENTRY GL_ShaderSource(GLuint shader,
                                 GLsizei count,
                                 const GLchar *const *string,
                                 const GLint *length)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glShaderSource(shader = %u, count = %d, string = 0x%016" PRIxPTR
                 ", length = 0x%016" PRIxPTR ")",
                 shader, count, (uintptr_t)string, (uintptr_t)length);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLShaderSource),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                = funcMap["glShaderSource"];
    PFNGLSHADERSOURCEPROC next = reinterpret_cast<PFNGLSHADERSOURCEPROC>(entry);
    next(shader, count, string, length);
}

void GL_APIENTRY GL_StencilFunc(GLenum func, GLint ref, GLuint mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glStencilFunc(func = %s, ref = %d, mask = %u)",
                 GLenumToString(GLESEnum::StencilFunction, func), ref, mask);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilFunc),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glStencilFunc"];
    PFNGLSTENCILFUNCPROC next = reinterpret_cast<PFNGLSTENCILFUNCPROC>(entry);
    next(func, ref, mask);
}

void GL_APIENTRY GL_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glStencilFuncSeparate(face = %s, func = %s, ref = %d, mask = %u)",
                 GLenumToString(GLESEnum::StencilFaceDirection, face),
                 GLenumToString(GLESEnum::StencilFunction, func), ref, mask);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilFuncSeparate),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glStencilFuncSeparate"];
    PFNGLSTENCILFUNCSEPARATEPROC next = reinterpret_cast<PFNGLSTENCILFUNCSEPARATEPROC>(entry);
    next(face, func, ref, mask);
}

void GL_APIENTRY GL_StencilMask(GLuint mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glStencilMask(mask = %u)", mask);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilMask),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry               = funcMap["glStencilMask"];
    PFNGLSTENCILMASKPROC next = reinterpret_cast<PFNGLSTENCILMASKPROC>(entry);
    next(mask);
}

void GL_APIENTRY GL_StencilMaskSeparate(GLenum face, GLuint mask)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glStencilMaskSeparate(face = %s, mask = %u)",
                 GLenumToString(GLESEnum::StencilFaceDirection, face), mask);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilMaskSeparate),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glStencilMaskSeparate"];
    PFNGLSTENCILMASKSEPARATEPROC next = reinterpret_cast<PFNGLSTENCILMASKSEPARATEPROC>(entry);
    next(face, mask);
}

void GL_APIENTRY GL_StencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glStencilOp(fail = %s, zfail = %s, zpass = %s)",
                 GLenumToString(GLESEnum::StencilOp, fail),
                 GLenumToString(GLESEnum::StencilOp, zfail),
                 GLenumToString(GLESEnum::StencilOp, zpass));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilOp),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glStencilOp"];
    PFNGLSTENCILOPPROC next = reinterpret_cast<PFNGLSTENCILOPPROC>(entry);
    next(fail, zfail, zpass);
}

void GL_APIENTRY GL_StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage, "glStencilOpSeparate(face = %s, sfail = %s, dpfail = %s, dppass = %s)",
        GLenumToString(GLESEnum::StencilFaceDirection, face),
        GLenumToString(GLESEnum::StencilOp, sfail), GLenumToString(GLESEnum::StencilOp, dpfail),
        GLenumToString(GLESEnum::StencilOp, dppass));
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLStencilOpSeparate),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                     = funcMap["glStencilOpSeparate"];
    PFNGLSTENCILOPSEPARATEPROC next = reinterpret_cast<PFNGLSTENCILOPSEPARATEPROC>(entry);
    next(face, sfail, dpfail, dppass);
}

void GL_APIENTRY GL_TexImage2D(GLenum target,
                               GLint level,
                               GLint internalformat,
                               GLsizei width,
                               GLsizei height,
                               GLint border,
                               GLenum format,
                               GLenum type,
                               const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexImage2D(target = %s, level = %d, internalformat = %d, width = %d, height = "
                 "%d, border = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level, internalformat, width,
                 height, border, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glTexImage2D"];
    PFNGLTEXIMAGE2DPROC next = reinterpret_cast<PFNGLTEXIMAGE2DPROC>(entry);
    next(target, level, internalformat, width, height, border, format, type, pixels);
}

void GL_APIENTRY GL_TexParameterf(GLenum target, GLenum pname, GLfloat param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexParameterf(target = %s, pname = %s, param = %f)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterf),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexParameterf"];
    PFNGLTEXPARAMETERFPROC next = reinterpret_cast<PFNGLTEXPARAMETERFPROC>(entry);
    next(target, pname, param);
}

void GL_APIENTRY GL_TexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameterfv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameterfv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glTexParameterfv"];
    PFNGLTEXPARAMETERFVPROC next = reinterpret_cast<PFNGLTEXPARAMETERFVPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexParameteri(GLenum target, GLenum pname, GLint param)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glTexParameteri(target = %s, pname = %s, param = %d)",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), param);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameteri),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexParameteri"];
    PFNGLTEXPARAMETERIPROC next = reinterpret_cast<PFNGLTEXPARAMETERIPROC>(entry);
    next(target, pname, param);
}

void GL_APIENTRY GL_TexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexParameteriv(target = %s, pname = %s, params = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target),
                 GLenumToString(GLESEnum::TextureParameterName, pname), (uintptr_t)params);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexParameteriv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glTexParameteriv"];
    PFNGLTEXPARAMETERIVPROC next = reinterpret_cast<PFNGLTEXPARAMETERIVPROC>(entry);
    next(target, pname, params);
}

void GL_APIENTRY GL_TexSubImage2D(GLenum target,
                                  GLint level,
                                  GLint xoffset,
                                  GLint yoffset,
                                  GLsizei width,
                                  GLsizei height,
                                  GLenum format,
                                  GLenum type,
                                  const void *pixels)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glTexSubImage2D(target = %s, level = %d, xoffset = %d, yoffset = %d, width = %d, "
                 "height = %d, format = %s, type = %s, pixels = 0x%016" PRIxPTR ")",
                 GLenumToString(GLESEnum::TextureTarget, target), level, xoffset, yoffset, width,
                 height, GLenumToString(GLESEnum::PixelFormat, format),
                 GLenumToString(GLESEnum::PixelType, type), (uintptr_t)pixels);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLTexSubImage2D),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                 = funcMap["glTexSubImage2D"];
    PFNGLTEXSUBIMAGE2DPROC next = reinterpret_cast<PFNGLTEXSUBIMAGE2DPROC>(entry);
    next(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GL_APIENTRY GL_Uniform1f(GLint location, GLfloat v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform1f(location = %d, v0 = %f)", location, v0);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform1f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform1f"];
    PFNGLUNIFORM1FPROC next = reinterpret_cast<PFNGLUNIFORM1FPROC>(entry);
    next(location, v0);
}

void GL_APIENTRY GL_Uniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform1fv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform1fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform1fv"];
    PFNGLUNIFORM1FVPROC next = reinterpret_cast<PFNGLUNIFORM1FVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform1i(GLint location, GLint v0)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform1i(location = %d, v0 = %d)", location, v0);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform1i),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform1i"];
    PFNGLUNIFORM1IPROC next = reinterpret_cast<PFNGLUNIFORM1IPROC>(entry);
    next(location, v0);
}

void GL_APIENTRY GL_Uniform1iv(GLint location, GLsizei count, const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform1iv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform1iv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform1iv"];
    PFNGLUNIFORM1IVPROC next = reinterpret_cast<PFNGLUNIFORM1IVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform2f(GLint location, GLfloat v0, GLfloat v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform2f(location = %d, v0 = %f, v1 = %f)", location, v0,
                 v1);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform2f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform2f"];
    PFNGLUNIFORM2FPROC next = reinterpret_cast<PFNGLUNIFORM2FPROC>(entry);
    next(location, v0, v1);
}

void GL_APIENTRY GL_Uniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform2fv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform2fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform2fv"];
    PFNGLUNIFORM2FVPROC next = reinterpret_cast<PFNGLUNIFORM2FVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform2i(GLint location, GLint v0, GLint v1)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform2i(location = %d, v0 = %d, v1 = %d)", location, v0,
                 v1);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform2i),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform2i"];
    PFNGLUNIFORM2IPROC next = reinterpret_cast<PFNGLUNIFORM2IPROC>(entry);
    next(location, v0, v1);
}

void GL_APIENTRY GL_Uniform2iv(GLint location, GLsizei count, const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform2iv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform2iv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform2iv"];
    PFNGLUNIFORM2IVPROC next = reinterpret_cast<PFNGLUNIFORM2IVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform3f(location = %d, v0 = %f, v1 = %f, v2 = %f)",
                 location, v0, v1, v2);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform3f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform3f"];
    PFNGLUNIFORM3FPROC next = reinterpret_cast<PFNGLUNIFORM3FPROC>(entry);
    next(location, v0, v1, v2);
}

void GL_APIENTRY GL_Uniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform3fv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform3fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform3fv"];
    PFNGLUNIFORM3FVPROC next = reinterpret_cast<PFNGLUNIFORM3FVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUniform3i(location = %d, v0 = %d, v1 = %d, v2 = %d)",
                 location, v0, v1, v2);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform3i),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform3i"];
    PFNGLUNIFORM3IPROC next = reinterpret_cast<PFNGLUNIFORM3IPROC>(entry);
    next(location, v0, v1, v2);
}

void GL_APIENTRY GL_Uniform3iv(GLint location, GLsizei count, const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform3iv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform3iv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform3iv"];
    PFNGLUNIFORM3IVPROC next = reinterpret_cast<PFNGLUNIFORM3IVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4f(location = %d, v0 = %f, v1 = %f, v2 = %f, v3 = %f)", location, v0, v1,
                 v2, v3);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform4f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform4f"];
    PFNGLUNIFORM4FPROC next = reinterpret_cast<PFNGLUNIFORM4FPROC>(entry);
    next(location, v0, v1, v2, v3);
}

void GL_APIENTRY GL_Uniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4fv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform4fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform4fv"];
    PFNGLUNIFORM4FVPROC next = reinterpret_cast<PFNGLUNIFORM4FVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4i(location = %d, v0 = %d, v1 = %d, v2 = %d, v3 = %d)", location, v0, v1,
                 v2, v3);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform4i),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry             = funcMap["glUniform4i"];
    PFNGLUNIFORM4IPROC next = reinterpret_cast<PFNGLUNIFORM4IPROC>(entry);
    next(location, v0, v1, v2, v3);
}

void GL_APIENTRY GL_Uniform4iv(GLint location, GLsizei count, const GLint *value)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glUniform4iv(location = %d, count = %d, value = 0x%016" PRIxPTR ")", location,
                 count, (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniform4iv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUniform4iv"];
    PFNGLUNIFORM4IVPROC next = reinterpret_cast<PFNGLUNIFORM4IVPROC>(entry);
    next(location, count, value);
}

void GL_APIENTRY GL_UniformMatrix2fv(GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix2fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix2fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glUniformMatrix2fv"];
    PFNGLUNIFORMMATRIX2FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX2FVPROC>(entry);
    next(location, count, transpose, value);
}

void GL_APIENTRY GL_UniformMatrix3fv(GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix3fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix3fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glUniformMatrix3fv"];
    PFNGLUNIFORMMATRIX3FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX3FVPROC>(entry);
    next(location, count, transpose, value);
}

void GL_APIENTRY GL_UniformMatrix4fv(GLint location,
                                     GLsizei count,
                                     GLboolean transpose,
                                     const GLfloat *value)
{
    char entryPointMessage[512];
    std::sprintf(
        entryPointMessage,
        "glUniformMatrix4fv(location = %d, count = %d, transpose = %s, value = 0x%016" PRIxPTR ")",
        location, count, GLbooleanToString(transpose), (uintptr_t)value);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUniformMatrix4fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                    = funcMap["glUniformMatrix4fv"];
    PFNGLUNIFORMMATRIX4FVPROC next = reinterpret_cast<PFNGLUNIFORMMATRIX4FVPROC>(entry);
    next(location, count, transpose, value);
}

void GL_APIENTRY GL_UseProgram(GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glUseProgram(program = %u)", program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLUseProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry              = funcMap["glUseProgram"];
    PFNGLUSEPROGRAMPROC next = reinterpret_cast<PFNGLUSEPROGRAMPROC>(entry);
    next(program);
}

void GL_APIENTRY GL_ValidateProgram(GLuint program)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glValidateProgram(program = %u)", program);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLValidateProgram),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glValidateProgram"];
    PFNGLVALIDATEPROGRAMPROC next = reinterpret_cast<PFNGLVALIDATEPROGRAMPROC>(entry);
    next(program);
}

void GL_APIENTRY GL_VertexAttrib1f(GLuint index, GLfloat x)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib1f(index = %u, x = %f)", index, x);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib1f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glVertexAttrib1f"];
    PFNGLVERTEXATTRIB1FPROC next = reinterpret_cast<PFNGLVERTEXATTRIB1FPROC>(entry);
    next(index, x);
}

void GL_APIENTRY GL_VertexAttrib1fv(GLuint index, const GLfloat *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib1fv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib1fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glVertexAttrib1fv"];
    PFNGLVERTEXATTRIB1FVPROC next = reinterpret_cast<PFNGLVERTEXATTRIB1FVPROC>(entry);
    next(index, v);
}

void GL_APIENTRY GL_VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib2f(index = %u, x = %f, y = %f)", index, x, y);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib2f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glVertexAttrib2f"];
    PFNGLVERTEXATTRIB2FPROC next = reinterpret_cast<PFNGLVERTEXATTRIB2FPROC>(entry);
    next(index, x, y);
}

void GL_APIENTRY GL_VertexAttrib2fv(GLuint index, const GLfloat *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib2fv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib2fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glVertexAttrib2fv"];
    PFNGLVERTEXATTRIB2FVPROC next = reinterpret_cast<PFNGLVERTEXATTRIB2FVPROC>(entry);
    next(index, v);
}

void GL_APIENTRY GL_VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib3f(index = %u, x = %f, y = %f, z = %f)", index,
                 x, y, z);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib3f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glVertexAttrib3f"];
    PFNGLVERTEXATTRIB3FPROC next = reinterpret_cast<PFNGLVERTEXATTRIB3FPROC>(entry);
    next(index, x, y, z);
}

void GL_APIENTRY GL_VertexAttrib3fv(GLuint index, const GLfloat *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib3fv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib3fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glVertexAttrib3fv"];
    PFNGLVERTEXATTRIB3FVPROC next = reinterpret_cast<PFNGLVERTEXATTRIB3FVPROC>(entry);
    next(index, v);
}

void GL_APIENTRY GL_VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib4f(index = %u, x = %f, y = %f, z = %f, w = %f)",
                 index, x, y, z, w);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib4f),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                  = funcMap["glVertexAttrib4f"];
    PFNGLVERTEXATTRIB4FPROC next = reinterpret_cast<PFNGLVERTEXATTRIB4FPROC>(entry);
    next(index, x, y, z, w);
}

void GL_APIENTRY GL_VertexAttrib4fv(GLuint index, const GLfloat *v)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glVertexAttrib4fv(index = %u, v = 0x%016" PRIxPTR ")", index,
                 (uintptr_t)v);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttrib4fv),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                   = funcMap["glVertexAttrib4fv"];
    PFNGLVERTEXATTRIB4FVPROC next = reinterpret_cast<PFNGLVERTEXATTRIB4FVPROC>(entry);
    next(index, v);
}

void GL_APIENTRY GL_VertexAttribPointer(GLuint index,
                                        GLint size,
                                        GLenum type,
                                        GLboolean normalized,
                                        GLsizei stride,
                                        const void *pointer)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage,
                 "glVertexAttribPointer(index = %u, size = %d, type = %s, normalized = %s, stride "
                 "= %d, pointer = 0x%016" PRIxPTR ")",
                 index, size, GLenumToString(GLESEnum::VertexAttribPointerType, type),
                 GLbooleanToString(normalized), stride, (uintptr_t)pointer);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLVertexAttribPointer),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry                       = funcMap["glVertexAttribPointer"];
    PFNGLVERTEXATTRIBPOINTERPROC next = reinterpret_cast<PFNGLVERTEXATTRIBPOINTERPROC>(entry);
    next(index, size, type, normalized, stride, pointer);
}

void GL_APIENTRY GL_Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
    char entryPointMessage[512];
    std::sprintf(entryPointMessage, "glViewport(x = %d, y = %d, width = %d, height = %d)", x, y,
                 width, height);
    g_debug_message_insert(GL_DEBUG_SOURCE_THIRD_PARTY_KHR, GL_DEBUG_TYPE_OTHER_KHR,
                           static_cast<GLuint>(angle::EntryPoint::GLViewport),
                           GL_DEBUG_SEVERITY_NOTIFICATION_KHR, -1, entryPointMessage);

    // Call down to the next layer
    void *entry            = funcMap["glViewport"];
    PFNGLVIEWPORTPROC next = reinterpret_cast<PFNGLVIEWPORTPROC>(entry);
    next(x, y, width, height);
}

void setupGLES_2_0Hooks()
{
    hookMap["glActiveTexture"]            = (void *)GL_ActiveTexture;
    hookMap["glAttachShader"]             = (void *)GL_AttachShader;
    hookMap["glBindAttribLocation"]       = (void *)GL_BindAttribLocation;
    hookMap["glBindBuffer"]               = (void *)GL_BindBuffer;
    hookMap["glBindFramebuffer"]          = (void *)GL_BindFramebuffer;
    hookMap["glBindRenderbuffer"]         = (void *)GL_BindRenderbuffer;
    hookMap["glBindTexture"]              = (void *)GL_BindTexture;
    hookMap["glBlendColor"]               = (void *)GL_BlendColor;
    hookMap["glBlendEquation"]            = (void *)GL_BlendEquation;
    hookMap["glBlendEquationSeparate"]    = (void *)GL_BlendEquationSeparate;
    hookMap["glBlendFunc"]                = (void *)GL_BlendFunc;
    hookMap["glBlendFuncSeparate"]        = (void *)GL_BlendFuncSeparate;
    hookMap["glBufferData"]               = (void *)GL_BufferData;
    hookMap["glBufferSubData"]            = (void *)GL_BufferSubData;
    hookMap["glCheckFramebufferStatus"]   = (void *)GL_CheckFramebufferStatus;
    hookMap["glClear"]                    = (void *)GL_Clear;
    hookMap["glClearColor"]               = (void *)GL_ClearColor;
    hookMap["glClearDepthf"]              = (void *)GL_ClearDepthf;
    hookMap["glClearStencil"]             = (void *)GL_ClearStencil;
    hookMap["glColorMask"]                = (void *)GL_ColorMask;
    hookMap["glCompileShader"]            = (void *)GL_CompileShader;
    hookMap["glCompressedTexImage2D"]     = (void *)GL_CompressedTexImage2D;
    hookMap["glCompressedTexSubImage2D"]  = (void *)GL_CompressedTexSubImage2D;
    hookMap["glCopyTexImage2D"]           = (void *)GL_CopyTexImage2D;
    hookMap["glCopyTexSubImage2D"]        = (void *)GL_CopyTexSubImage2D;
    hookMap["glCreateProgram"]            = (void *)GL_CreateProgram;
    hookMap["glCreateShader"]             = (void *)GL_CreateShader;
    hookMap["glCullFace"]                 = (void *)GL_CullFace;
    hookMap["glDeleteBuffers"]            = (void *)GL_DeleteBuffers;
    hookMap["glDeleteFramebuffers"]       = (void *)GL_DeleteFramebuffers;
    hookMap["glDeleteProgram"]            = (void *)GL_DeleteProgram;
    hookMap["glDeleteRenderbuffers"]      = (void *)GL_DeleteRenderbuffers;
    hookMap["glDeleteShader"]             = (void *)GL_DeleteShader;
    hookMap["glDeleteTextures"]           = (void *)GL_DeleteTextures;
    hookMap["glDepthFunc"]                = (void *)GL_DepthFunc;
    hookMap["glDepthMask"]                = (void *)GL_DepthMask;
    hookMap["glDepthRangef"]              = (void *)GL_DepthRangef;
    hookMap["glDetachShader"]             = (void *)GL_DetachShader;
    hookMap["glDisable"]                  = (void *)GL_Disable;
    hookMap["glDisableVertexAttribArray"] = (void *)GL_DisableVertexAttribArray;
    hookMap["glDrawArrays"]               = (void *)GL_DrawArrays;
    hookMap["glDrawElements"]             = (void *)GL_DrawElements;
    hookMap["glEnable"]                   = (void *)GL_Enable;
    hookMap["glEnableVertexAttribArray"]  = (void *)GL_EnableVertexAttribArray;
    hookMap["glFinish"]                   = (void *)GL_Finish;
    hookMap["glFlush"]                    = (void *)GL_Flush;
    hookMap["glFramebufferRenderbuffer"]  = (void *)GL_FramebufferRenderbuffer;
    hookMap["glFramebufferTexture2D"]     = (void *)GL_FramebufferTexture2D;
    hookMap["glFrontFace"]                = (void *)GL_FrontFace;
    hookMap["glGenBuffers"]               = (void *)GL_GenBuffers;
    hookMap["glGenFramebuffers"]          = (void *)GL_GenFramebuffers;
    hookMap["glGenRenderbuffers"]         = (void *)GL_GenRenderbuffers;
    hookMap["glGenTextures"]              = (void *)GL_GenTextures;
    hookMap["glGenerateMipmap"]           = (void *)GL_GenerateMipmap;
    hookMap["glGetActiveAttrib"]          = (void *)GL_GetActiveAttrib;
    hookMap["glGetActiveUniform"]         = (void *)GL_GetActiveUniform;
    hookMap["glGetAttachedShaders"]       = (void *)GL_GetAttachedShaders;
    hookMap["glGetAttribLocation"]        = (void *)GL_GetAttribLocation;
    hookMap["glGetBooleanv"]              = (void *)GL_GetBooleanv;
    hookMap["glGetBufferParameteriv"]     = (void *)GL_GetBufferParameteriv;
    hookMap["glGetError"]                 = (void *)GL_GetError;
    hookMap["glGetFloatv"]                = (void *)GL_GetFloatv;
    hookMap["glGetFramebufferAttachmentParameteriv"] =
        (void *)GL_GetFramebufferAttachmentParameteriv;
    hookMap["glGetIntegerv"]                = (void *)GL_GetIntegerv;
    hookMap["glGetProgramInfoLog"]          = (void *)GL_GetProgramInfoLog;
    hookMap["glGetProgramiv"]               = (void *)GL_GetProgramiv;
    hookMap["glGetRenderbufferParameteriv"] = (void *)GL_GetRenderbufferParameteriv;
    hookMap["glGetShaderInfoLog"]           = (void *)GL_GetShaderInfoLog;
    hookMap["glGetShaderPrecisionFormat"]   = (void *)GL_GetShaderPrecisionFormat;
    hookMap["glGetShaderSource"]            = (void *)GL_GetShaderSource;
    hookMap["glGetShaderiv"]                = (void *)GL_GetShaderiv;
    hookMap["glGetString"]                  = (void *)GL_GetString;
    hookMap["glGetTexParameterfv"]          = (void *)GL_GetTexParameterfv;
    hookMap["glGetTexParameteriv"]          = (void *)GL_GetTexParameteriv;
    hookMap["glGetUniformLocation"]         = (void *)GL_GetUniformLocation;
    hookMap["glGetUniformfv"]               = (void *)GL_GetUniformfv;
    hookMap["glGetUniformiv"]               = (void *)GL_GetUniformiv;
    hookMap["glGetVertexAttribPointerv"]    = (void *)GL_GetVertexAttribPointerv;
    hookMap["glGetVertexAttribfv"]          = (void *)GL_GetVertexAttribfv;
    hookMap["glGetVertexAttribiv"]          = (void *)GL_GetVertexAttribiv;
    hookMap["glHint"]                       = (void *)GL_Hint;
    hookMap["glIsBuffer"]                   = (void *)GL_IsBuffer;
    hookMap["glIsEnabled"]                  = (void *)GL_IsEnabled;
    hookMap["glIsFramebuffer"]              = (void *)GL_IsFramebuffer;
    hookMap["glIsProgram"]                  = (void *)GL_IsProgram;
    hookMap["glIsRenderbuffer"]             = (void *)GL_IsRenderbuffer;
    hookMap["glIsShader"]                   = (void *)GL_IsShader;
    hookMap["glIsTexture"]                  = (void *)GL_IsTexture;
    hookMap["glLineWidth"]                  = (void *)GL_LineWidth;
    hookMap["glLinkProgram"]                = (void *)GL_LinkProgram;
    hookMap["glPixelStorei"]                = (void *)GL_PixelStorei;
    hookMap["glPolygonOffset"]              = (void *)GL_PolygonOffset;
    hookMap["glReadPixels"]                 = (void *)GL_ReadPixels;
    hookMap["glReleaseShaderCompiler"]      = (void *)GL_ReleaseShaderCompiler;
    hookMap["glRenderbufferStorage"]        = (void *)GL_RenderbufferStorage;
    hookMap["glSampleCoverage"]             = (void *)GL_SampleCoverage;
    hookMap["glScissor"]                    = (void *)GL_Scissor;
    hookMap["glShaderBinary"]               = (void *)GL_ShaderBinary;
    hookMap["glShaderSource"]               = (void *)GL_ShaderSource;
    hookMap["glStencilFunc"]                = (void *)GL_StencilFunc;
    hookMap["glStencilFuncSeparate"]        = (void *)GL_StencilFuncSeparate;
    hookMap["glStencilMask"]                = (void *)GL_StencilMask;
    hookMap["glStencilMaskSeparate"]        = (void *)GL_StencilMaskSeparate;
    hookMap["glStencilOp"]                  = (void *)GL_StencilOp;
    hookMap["glStencilOpSeparate"]          = (void *)GL_StencilOpSeparate;
    hookMap["glTexImage2D"]                 = (void *)GL_TexImage2D;
    hookMap["glTexParameterf"]              = (void *)GL_TexParameterf;
    hookMap["glTexParameterfv"]             = (void *)GL_TexParameterfv;
    hookMap["glTexParameteri"]              = (void *)GL_TexParameteri;
    hookMap["glTexParameteriv"]             = (void *)GL_TexParameteriv;
    hookMap["glTexSubImage2D"]              = (void *)GL_TexSubImage2D;
    hookMap["glUniform1f"]                  = (void *)GL_Uniform1f;
    hookMap["glUniform1fv"]                 = (void *)GL_Uniform1fv;
    hookMap["glUniform1i"]                  = (void *)GL_Uniform1i;
    hookMap["glUniform1iv"]                 = (void *)GL_Uniform1iv;
    hookMap["glUniform2f"]                  = (void *)GL_Uniform2f;
    hookMap["glUniform2fv"]                 = (void *)GL_Uniform2fv;
    hookMap["glUniform2i"]                  = (void *)GL_Uniform2i;
    hookMap["glUniform2iv"]                 = (void *)GL_Uniform2iv;
    hookMap["glUniform3f"]                  = (void *)GL_Uniform3f;
    hookMap["glUniform3fv"]                 = (void *)GL_Uniform3fv;
    hookMap["glUniform3i"]                  = (void *)GL_Uniform3i;
    hookMap["glUniform3iv"]                 = (void *)GL_Uniform3iv;
    hookMap["glUniform4f"]                  = (void *)GL_Uniform4f;
    hookMap["glUniform4fv"]                 = (void *)GL_Uniform4fv;
    hookMap["glUniform4i"]                  = (void *)GL_Uniform4i;
    hookMap["glUniform4iv"]                 = (void *)GL_Uniform4iv;
    hookMap["glUniformMatrix2fv"]           = (void *)GL_UniformMatrix2fv;
    hookMap["glUniformMatrix3fv"]           = (void *)GL_UniformMatrix3fv;
    hookMap["glUniformMatrix4fv"]           = (void *)GL_UniformMatrix4fv;
    hookMap["glUseProgram"]                 = (void *)GL_UseProgram;
    hookMap["glValidateProgram"]            = (void *)GL_ValidateProgram;
    hookMap["glVertexAttrib1f"]             = (void *)GL_VertexAttrib1f;
    hookMap["glVertexAttrib1fv"]            = (void *)GL_VertexAttrib1fv;
    hookMap["glVertexAttrib2f"]             = (void *)GL_VertexAttrib2f;
    hookMap["glVertexAttrib2fv"]            = (void *)GL_VertexAttrib2fv;
    hookMap["glVertexAttrib3f"]             = (void *)GL_VertexAttrib3f;
    hookMap["glVertexAttrib3fv"]            = (void *)GL_VertexAttrib3fv;
    hookMap["glVertexAttrib4f"]             = (void *)GL_VertexAttrib4f;
    hookMap["glVertexAttrib4fv"]            = (void *)GL_VertexAttrib4fv;
    hookMap["glVertexAttribPointer"]        = (void *)GL_VertexAttribPointer;
    hookMap["glViewport"]                   = (void *)GL_Viewport;
}

}  // namespace agi_layer
