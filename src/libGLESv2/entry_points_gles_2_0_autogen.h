// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_2_0_autogen.h:
//   Defines the GLES 2.0 entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_2_0_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_2_0_AUTOGEN_H_

#if defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLES_PROTOTYPES) && GL_GLES_PROTOTYPES

#if defined(GL_GLEXT_PROTOTYPES)
#    error Function prototypes multiple defined.
#endif  // defined(GL_GLEXT_PROTOTYPES)

#include <GLES2/gl2.h>
#include <export.h>

extern "C" {
ANGLE_EXPORT void GL_APIENTRY glActiveTexture(GLenum texture);
ANGLE_EXPORT void GL_APIENTRY glAttachShader(GLuint program, GLuint shader);
ANGLE_EXPORT void GL_APIENTRY glBindAttribLocation(GLuint program,
                                                   GLuint index,
                                                   const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glBindBuffer(GLenum target, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
ANGLE_EXPORT void GL_APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY glBindTexture(GLenum target, GLuint texture);
ANGLE_EXPORT void GL_APIENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
ANGLE_EXPORT void GL_APIENTRY glBlendEquation(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
ANGLE_EXPORT void GL_APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
ANGLE_EXPORT void GL_APIENTRY glBlendFuncSeparate(GLenum sfactorRGB,
                                                  GLenum dfactorRGB,
                                                  GLenum sfactorAlpha,
                                                  GLenum dfactorAlpha);
ANGLE_EXPORT void GL_APIENTRY glBufferData(GLenum target,
                                           GLsizeiptr size,
                                           const void *data,
                                           GLenum usage);
ANGLE_EXPORT void GL_APIENTRY glBufferSubData(GLenum target,
                                              GLintptr offset,
                                              GLsizeiptr size,
                                              const void *data);
ANGLE_EXPORT GLenum GL_APIENTRY glCheckFramebufferStatus(GLenum target);
ANGLE_EXPORT void GL_APIENTRY glClear(GLbitfield mask);
ANGLE_EXPORT void GL_APIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
ANGLE_EXPORT void GL_APIENTRY glClearDepthf(GLfloat d);
ANGLE_EXPORT void GL_APIENTRY glClearStencil(GLint s);
ANGLE_EXPORT void GL_APIENTRY glColorMask(GLboolean red,
                                          GLboolean green,
                                          GLboolean blue,
                                          GLboolean alpha);
ANGLE_EXPORT void GL_APIENTRY glCompileShader(GLuint shader);
ANGLE_EXPORT void GL_APIENTRY glCompressedTexImage2D(GLenum target,
                                                     GLint level,
                                                     GLenum internalformat,
                                                     GLsizei width,
                                                     GLsizei height,
                                                     GLint border,
                                                     GLsizei imageSize,
                                                     const void *data);
ANGLE_EXPORT void GL_APIENTRY glCompressedTexSubImage2D(GLenum target,
                                                        GLint level,
                                                        GLint xoffset,
                                                        GLint yoffset,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLenum format,
                                                        GLsizei imageSize,
                                                        const void *data);
ANGLE_EXPORT void GL_APIENTRY glCopyTexImage2D(GLenum target,
                                               GLint level,
                                               GLenum internalformat,
                                               GLint x,
                                               GLint y,
                                               GLsizei width,
                                               GLsizei height,
                                               GLint border);
ANGLE_EXPORT void GL_APIENTRY glCopyTexSubImage2D(GLenum target,
                                                  GLint level,
                                                  GLint xoffset,
                                                  GLint yoffset,
                                                  GLint x,
                                                  GLint y,
                                                  GLsizei width,
                                                  GLsizei height);
ANGLE_EXPORT GLuint GL_APIENTRY glCreateProgram();
ANGLE_EXPORT GLuint GL_APIENTRY glCreateShader(GLenum type);
ANGLE_EXPORT void GL_APIENTRY glCullFace(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffers);
ANGLE_EXPORT void GL_APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY glDeleteProgram(GLuint program);
ANGLE_EXPORT void GL_APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY glDeleteShader(GLuint shader);
ANGLE_EXPORT void GL_APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
ANGLE_EXPORT void GL_APIENTRY glDepthFunc(GLenum func);
ANGLE_EXPORT void GL_APIENTRY glDepthMask(GLboolean flag);
ANGLE_EXPORT void GL_APIENTRY glDepthRangef(GLfloat n, GLfloat f);
ANGLE_EXPORT void GL_APIENTRY glDetachShader(GLuint program, GLuint shader);
ANGLE_EXPORT void GL_APIENTRY glDisable(GLenum cap);
ANGLE_EXPORT void GL_APIENTRY glDisableVertexAttribArray(GLuint index);
ANGLE_EXPORT void GL_APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
ANGLE_EXPORT void GL_APIENTRY glDrawElements(GLenum mode,
                                             GLsizei count,
                                             GLenum type,
                                             const void *indices);
ANGLE_EXPORT void GL_APIENTRY glEnable(GLenum cap);
ANGLE_EXPORT void GL_APIENTRY glEnableVertexAttribArray(GLuint index);
ANGLE_EXPORT void GL_APIENTRY glFinish();
ANGLE_EXPORT void GL_APIENTRY glFlush();
ANGLE_EXPORT void GL_APIENTRY glFramebufferRenderbuffer(GLenum target,
                                                        GLenum attachment,
                                                        GLenum renderbuffertarget,
                                                        GLuint renderbuffer);
ANGLE_EXPORT void GL_APIENTRY glFramebufferTexture2D(GLenum target,
                                                     GLenum attachment,
                                                     GLenum textarget,
                                                     GLuint texture,
                                                     GLint level);
ANGLE_EXPORT void GL_APIENTRY glFrontFace(GLenum mode);
ANGLE_EXPORT void GL_APIENTRY glGenBuffers(GLsizei n, GLuint *buffers);
ANGLE_EXPORT void GL_APIENTRY glGenFramebuffers(GLsizei n, GLuint *framebuffers);
ANGLE_EXPORT void GL_APIENTRY glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
ANGLE_EXPORT void GL_APIENTRY glGenTextures(GLsizei n, GLuint *textures);
ANGLE_EXPORT void GL_APIENTRY glGenerateMipmap(GLenum target);
ANGLE_EXPORT void GL_APIENTRY glGetActiveAttrib(GLuint program,
                                                GLuint index,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLint *size,
                                                GLenum *type,
                                                GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glGetActiveUniform(GLuint program,
                                                 GLuint index,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLint *size,
                                                 GLenum *type,
                                                 GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glGetAttachedShaders(GLuint program,
                                                   GLsizei maxCount,
                                                   GLsizei *count,
                                                   GLuint *shaders);
ANGLE_EXPORT GLint GL_APIENTRY glGetAttribLocation(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glGetBooleanv(GLenum pname, GLboolean *data);
ANGLE_EXPORT void GL_APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT GLenum GL_APIENTRY glGetError();
ANGLE_EXPORT void GL_APIENTRY glGetFloatv(GLenum pname, GLfloat *data);
ANGLE_EXPORT void GL_APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target,
                                                                    GLenum attachment,
                                                                    GLenum pname,
                                                                    GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetIntegerv(GLenum pname, GLint *data);
ANGLE_EXPORT void GL_APIENTRY glGetProgramInfoLog(GLuint program,
                                                  GLsizei bufSize,
                                                  GLsizei *length,
                                                  GLchar *infoLog);
ANGLE_EXPORT void GL_APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetRenderbufferParameteriv(GLenum target,
                                                           GLenum pname,
                                                           GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetShaderInfoLog(GLuint shader,
                                                 GLsizei bufSize,
                                                 GLsizei *length,
                                                 GLchar *infoLog);
ANGLE_EXPORT void GL_APIENTRY glGetShaderPrecisionFormat(GLenum shadertype,
                                                         GLenum precisiontype,
                                                         GLint *range,
                                                         GLint *precision);
ANGLE_EXPORT void GL_APIENTRY glGetShaderSource(GLuint shader,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLchar *source);
ANGLE_EXPORT void GL_APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
ANGLE_EXPORT const GLubyte *GL_APIENTRY glGetString(GLenum name);
ANGLE_EXPORT void GL_APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT GLint GL_APIENTRY glGetUniformLocation(GLuint program, const GLchar *name);
ANGLE_EXPORT void GL_APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetUniformiv(GLuint program, GLint location, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
ANGLE_EXPORT void GL_APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY glHint(GLenum target, GLenum mode);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsBuffer(GLuint buffer);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsEnabled(GLenum cap);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsFramebuffer(GLuint framebuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsProgram(GLuint program);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsRenderbuffer(GLuint renderbuffer);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsShader(GLuint shader);
ANGLE_EXPORT GLboolean GL_APIENTRY glIsTexture(GLuint texture);
ANGLE_EXPORT void GL_APIENTRY glLineWidth(GLfloat width);
ANGLE_EXPORT void GL_APIENTRY glLinkProgram(GLuint program);
ANGLE_EXPORT void GL_APIENTRY glPixelStorei(GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
ANGLE_EXPORT void GL_APIENTRY glReadPixels(GLint x,
                                           GLint y,
                                           GLsizei width,
                                           GLsizei height,
                                           GLenum format,
                                           GLenum type,
                                           void *pixels);
ANGLE_EXPORT void GL_APIENTRY glReleaseShaderCompiler();
ANGLE_EXPORT void GL_APIENTRY glRenderbufferStorage(GLenum target,
                                                    GLenum internalformat,
                                                    GLsizei width,
                                                    GLsizei height);
ANGLE_EXPORT void GL_APIENTRY glSampleCoverage(GLfloat value, GLboolean invert);
ANGLE_EXPORT void GL_APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
ANGLE_EXPORT void GL_APIENTRY glShaderBinary(GLsizei count,
                                             const GLuint *shaders,
                                             GLenum binaryformat,
                                             const void *binary,
                                             GLsizei length);
ANGLE_EXPORT void GL_APIENTRY glShaderSource(GLuint shader,
                                             GLsizei count,
                                             const GLchar *const *string,
                                             const GLint *length);
ANGLE_EXPORT void GL_APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
ANGLE_EXPORT void GL_APIENTRY glStencilFuncSeparate(GLenum face,
                                                    GLenum func,
                                                    GLint ref,
                                                    GLuint mask);
ANGLE_EXPORT void GL_APIENTRY glStencilMask(GLuint mask);
ANGLE_EXPORT void GL_APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
ANGLE_EXPORT void GL_APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
ANGLE_EXPORT void GL_APIENTRY glStencilOpSeparate(GLenum face,
                                                  GLenum sfail,
                                                  GLenum dpfail,
                                                  GLenum dppass);
ANGLE_EXPORT void GL_APIENTRY glTexImage2D(GLenum target,
                                           GLint level,
                                           GLint internalformat,
                                           GLsizei width,
                                           GLsizei height,
                                           GLint border,
                                           GLenum format,
                                           GLenum type,
                                           const void *pixels);
ANGLE_EXPORT void GL_APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
ANGLE_EXPORT void GL_APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
ANGLE_EXPORT void GL_APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY glTexSubImage2D(GLenum target,
                                              GLint level,
                                              GLint xoffset,
                                              GLint yoffset,
                                              GLsizei width,
                                              GLsizei height,
                                              GLenum format,
                                              GLenum type,
                                              const void *pixels);
ANGLE_EXPORT void GL_APIENTRY glUniform1f(GLint location, GLfloat v0);
ANGLE_EXPORT void GL_APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniform1i(GLint location, GLint v0);
ANGLE_EXPORT void GL_APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
ANGLE_EXPORT void GL_APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
ANGLE_EXPORT void GL_APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
ANGLE_EXPORT void GL_APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
ANGLE_EXPORT void GL_APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY
glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
ANGLE_EXPORT void GL_APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
ANGLE_EXPORT void GL_APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix2fv(GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix3fv(GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUniformMatrix4fv(GLint location,
                                                 GLsizei count,
                                                 GLboolean transpose,
                                                 const GLfloat *value);
ANGLE_EXPORT void GL_APIENTRY glUseProgram(GLuint program);
ANGLE_EXPORT void GL_APIENTRY glValidateProgram(GLuint program);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat *v);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat *v);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat *v);
ANGLE_EXPORT void GL_APIENTRY
glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
ANGLE_EXPORT void GL_APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat *v);
ANGLE_EXPORT void GL_APIENTRY glVertexAttribPointer(GLuint index,
                                                    GLint size,
                                                    GLenum type,
                                                    GLboolean normalized,
                                                    GLsizei stride,
                                                    const void *pointer);
ANGLE_EXPORT void GL_APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
}  // extern "C"

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_2_0_AUTOGEN_H_
