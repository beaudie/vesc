//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//

#ifndef COMPILER_TRANSLATOR_VALIDATE_PIXELLOCALSTORAGE_H_
#define COMPILER_TRANSLATOR_VALIDATE_PIXELLOCALSTORAGE_H_

namespace sh
{

class TIntermBlock;
class TSymbolTable;
class TDiagnostics;

// Populates 'diagnostics' and returns false if the shader performs any of the following operations
// that become illegal iff the shader has pixel local uniforms:
//
//   - discard
//
//       When polyfilled with shader images, pixel local storage requires early_fragment_tests,
//       which causes discard to interact differently with the depth and stencil tests.
//
//       To ensure identical behavior across all backends (some of which may not have access to
//       early_fragment_tests), we disallow discard if pixel local storage has been declared.
//
//   - return from main
//
//       ARB_fragment_shader_interlock functions cannot be called within flow control, which
//       includes any code that might execute after a return statement. To keep things simple, and
//       since these "interlock" calls are automatically generated by the compiler inside of main(),
//       we disallow return from main().
//
//   - assign gl_FragDepth(EXT) or gl_SampleMask
//
//       When polyfilled with shader images, pixel local storage requires early_fragment_tests,
//       which causes assignments to gl_FragDepth(EXT) and gl_SampleMask to be ignored.
//
//       To ensure identical behavior across all backends, we disallow assignment to these values if
//       pixel local storage has been declared.
//
//   - pixel local storage handles as function arguments
//
//       TODO(anglebug.com/7484): Consider allowing this once it is properly supported for images.
//
bool ValidatePixelLocalStorage(TIntermBlock *root, TSymbolTable *, TDiagnostics *);

}  // namespace sh

#endif  // COMPILER_TRANSLATOR_VALIDATELIMITATIONS_H_
