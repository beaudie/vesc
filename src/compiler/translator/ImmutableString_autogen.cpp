// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_autogen.cpp: Wrapper for static or pool allocated char arrays, that are guaranteed to be
// valid and unchanged for the duration of the compilation.
// Implements mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

static int T1[] = {1986, 728, 525, 873, 1237, 1661, 440, 985, 598, 239, 453, 1248, 1524, 34, 437, 2024, 1826, 1220, 354, 1095, 1171, 78, 403, 1100, 435, 316, 79, 1408, 211, 60, 597, 1891, 768, 1654, 282};
static int T2[] = {1951, 1980, 1803, 1865, 417, 1718, 1348, 1344, 1418, 421, 822, 1935, 1248, 137, 257, 562, 1633, 1142, 1525, 869, 1635, 1987, 185, 2012, 635, 598, 1313, 1711, 631, 744, 1736, 1743, 282, 957, 1952};
static int G[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1750, 424, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 712, 0, 0, 0, 0, 0, 0, 1139, 0, 0, 0, 1270, 1980, 0, 0, 932, 444, 0, 0, 2005, 0, 0, 0, 379, 1684, 0, 0, 1908, 0, 0, 4, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0, 104, 0, 0, 846, 1704, 0, 0, 0, 0, 0, 1433, 0, 0, 0, 0, 0, 0, 0, 0, 345, 1553, 0, 1534, 0, 894, 970, 0, 0, 1350, 0, 0, 2002, 0, 0, 0, 0, 570, 890, 0, 950, 0, 1308, 0, 0, 0, 0, 0, 0, 1397, 0, 0, 0, 0, 0, 0, 1530, 0, 0, 1910, 0, 0, 899, 574, 1900, 0, 485, 1729, 0, 0, 1035, 0, 0, 492, 572, 0, 191, 0, 0, 0, 0, 478, 0, 0, 0, 1989, 0, 0, 0, 0, 0, 598, 923, 0, 0, 1812, 0, 0, 871, 0, 0, 0, 0, 1297, 0, 616, 0, 0, 856, 0, 0, 698, 1798, 0, 909, 1672, 0, 0, 310, 0, 0, 0, 244, 0, 0, 0, 347, 807, 1664, 1759, 0, 0, 989, 0, 255, 1388, 0, 1261, 1343, 671, 0, 1948, 1314, 311, 0, 0, 0, 0, 1092, 0, 861, 208, 1356, 467, 255, 1765, 0, 662, 961, 0, 0, 0, 0, 0, 1516, 71, 1758, 0, 1430, 0, 0, 157, 32, 0, 0, 0, 799, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 608, 950, 0, 1041, 571, 956, 0, 0, 269, 0, 0, 739, 432, 1247, 0, 1366, 0, 0, 931, 0, 0, 617, 0, 0, 1854, 0, 0, 0, 0, 179, 1982, 0, 345, 0, 0, 257, 0, 711, 1625, 0, 0, 1875, 1570, 1600, 0, 0, 0, 981, 0, 0, 0, 0, 13, 0, 0, 0, 1615, 0, 0, 1586, 1032, 1732, 1593, 0, 0, 50, 159, 0, 1674, 0, 0, 0, 146, 0, 624, 0, 0, 566, 0, 0, 0, 0, 1393, 0, 0, 0, 1524, 0, 0, 757, 2000, 0, 1235, 774, 0, 0, 0, 2013, 0, 0, 0, 1577, 46, 1960, 577, 1147, 0, 1725, 1708, 0, 0, 0, 450, 0, 0, 694, 0, 0, 2012, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 227, 932, 0, 0, 4, 0, 0, 0, 633, 0, 18, 1315, 0, 0, 121, 484, 0, 387, 1841, 549, 0, 0, 0, 0, 0, 0, 974, 0, 0, 0, 0, 149, 0, 1926, 0, 0, 1037, 0, 0, 0, 787, 98, 145, 1713, 0, 0, 0, 1964, 0, 436, 1600, 0, 0, 0, 0, 0, 55, 986, 127, 1798, 1996, 557, 0, 0, 1904, 0, 353, 0, 452, 0, 0, 1609, 745, 100, 761, 341, 0, 1084, 0, 0, 246, 1505, 57, 0, 0, 935, 0, 0, 0, 0, 0, 7, 0, 1078, 0, 0, 0, 960, 0, 1910, 640, 853, 588, 1723, 0, 0, 0, 0, 0, 284, 0, 634, 609, 0, 0, 0, 418, 0, 397, 0, 0, 0, 678, 692, 0, 1171, 1014, 145, 0, 0, 1755, 0, 712, 0, 0, 0, 0, 0, 810, 0, 1718, 0, 0, 0, 0, 0, 0, 316, 793, 401, 0, 1388, 0, 619, 0, 0, 0, 0, 1359, 1551, 177, 0, 332, 774, 1030, 0, 1992, 642, 332, 264, 1559, 290, 1448, 1727, 0, 1818, 0, 0, 378, 715, 0, 26, 0, 0, 24, 1069, 804, 0, 50, 0, 1867, 0, 0, 0, 628, 1373, 0, 0, 0, 755, 0, 624, 0, 1067, 0, 650, 0, 148, 529, 0, 251, 1799, 0, 0, 558, 0, 0, 1898, 0, 840, 0, 0, 0, 2020, 227, 0, 0, 0, 0, 534, 0, 0, 0, 1672, 610, 0, 0, 49, 0, 0, 0, 923, 873, 143, 1752, 0, 8, 954, 0, 0, 0, 0, 14, 0, 0, 0, 1626, 0, 0, 281, 0, 0, 0, 239, 589, 0, 1609, 0, 0, 0, 906, 0, 0, 0, 0, 0, 542, 1087, 0, 0, 162, 0, 1011, 0, 1958, 0, 465, 0, 133, 0, 0, 0, 0, 1252, 0, 21, 0, 151, 0, 1032, 0, 593, 0, 0, 0, 399, 395, 918, 71, 0, 0, 709, 253, 1982, 0, 0, 1504, 0, 0, 1079, 240, 0, 1976, 533, 0, 89, 0, 1205, 781, 755, 0, 306, 1044, 0, 1766, 0, 0, 0, 466, 0, 431, 1669, 1715, 0, 9, 0, 78, 768, 0, 1017, 698, 0, 917, 0, 0, 0, 122, 1701, 1895, 0, 1518, 282, 5, 888, 0, 0, 1275, 757, 1959, 686, 332, 629, 1620, 384, 1803, 0, 1705, 919, 1985, 0, 1208, 47, 468, 0, 0, 0, 883, 922, 0, 0, 986, 0, 593, 127, 0, 0, 265, 231, 0, 353, 890, 0, 1985, 687, 1938, 279, 1949, 22, 1719, 0, 824, 70, 0, 284, 0, 0, 332, 0, 0, 738, 539, 0, 1592, 0, 9, 114, 942, 526, 0, 638, 0, 0, 682, 793, 1443, 0, 0, 464, 456, 893, 0, 1087, 0, 0, 0, 916, 323, 0, 1893, 0, 0, 1903, 0, 1874, 0, 1706, 1575, 1674, 1517, 0, 641, 0, 0, 281, 725, 0, 237, 113, 0, 1587, 0, 260, 0, 0, 0, 0, 0, 0, 1207, 1113, 0, 374, 1298, 0, 0, 1993, 0, 0, 177, 1426, 0, 786, 807, 0, 0, 0, 1893, 6, 1180, 1154, 990, 829, 107, 1677, 0, 523, 311, 1055, 223, 0, 0, 414, 262, 0, 1845, 308, 0, 258, 1037, 0, 1577, 0, 0, 0, 77, 0, 1049, 1459, 0, 535, 107, 254, 495, 0, 1060, 308, 0, 0, 0, 0, 0, 1843, 0, 1028, 0, 1430, 0, 864, 599, 1124, 614, 1586, 1043, 0, 0, 0, 322, 179, 0, 717, 2007, 213, 468, 903, 641, 416, 0, 0, 0, 0, 485, 1521, 833, 1527, 0, 1691, 0, 302, 0, 102, 587, 1236, 378, 417, 0, 1998, 1755, 1756, 934, 0, 494, 1951, 0, 0, 0, 425, 1990, 0, 907, 0, 386, 1598, 0, 0, 241, 0, 236, 0, 591, 0, 1310, 1614, 0, 0, 391, 543, 993, 723, 1762, 1180, 597, 1144, 0, 1098, 668, 0, 2004, 0, 49, 0, 262, 1984, 0, 700, 1065, 0, 863, 24, 0, 245, 653, 0, 0, 244, 0, 0, 0, 0, 1601, 0, 185, 0, 701, 0, 201, 219, 0, 0, 0, 0, 1797, 0, 0, 1113, 0, 0, 1983, 0, 0, 1886, 910, 1913, 1502, 0, 144, 0, 330, 0, 1955, 0, 0, 0, 545, 530, 1806, 0, 710, 0, 1078, 622, 0, 782, 0, 0, 0, 964, 1479, 0, 725, 0, 267, 784, 0, 1554, 0, 1174, 395, 291, 501, 0, 0, 0, 393, 121, 0, 0, 0, 0, 1769, 740, 0, 747, 0, 0, 1930, 0, 0, 469, 0, 1975, 10, 0, 1832, 398, 0, 1908, 0, 0, 1668, 1595, 54, 0, 2023, 1406, 0, 0, 1458, 238, 0, 461, 1442, 1366, 1572, 0, 1324, 0, 1627, 224, 0, 1199, 0, 303, 0, 583, 991, 0, 666, 1058, 1101, 0, 899, 499, 1359, 0, 877, 1915, 1883, 59, 0, 315, 1158, 1771, 0, 0, 0, 418, 0, 565, 19, 997, 437, 0, 0, 1071, 625, 1845, 0, 619, 0, 0, 0, 873, 0, 191, 1629, 1515, 779, 345, 828, 0, 1535, 820, 0, 0, 0, 883, 0, 900, 0, 2005, 1371, 1636, 777, 0, 0, 952, 501, 0, 1040, 543, 0, 1848, 0, 0, 599, 616, 519, 679, 0, 1451, 1084, 138, 123, 0, 318, 1239, 0, 0, 779, 0, 0, 0, 0, 0, 881, 1456, 0, 0, 582, 0, 786, 0, 1763, 968, 770, 0, 0, 1120, 767, 524, 55, 0, 2010, 247, 1850, 438, 225, 858, 510, 816, 1494, 356, 1850, 1224, 0, 941, 631, 750, 0, 410, 0, 0, 0, 0, 612, 694, 447, 0, 0, 1586, 0, 664, 0, 0, 313, 0, 0, 0, 943, 1972, 0, 1012, 1596, 0, 518, 1804, 0, 291, 1566, 1985, 1046, 0, 0, 0, 458, 724, 0, 0, 0, 982, 652, 1997, 93, 0, 0, 1659, 0, 277, 928, 316, 0, 0, 362, 862, 0, 1550, 1486, 0, 0, 0, 610, 1303, 109, 1561, 1451, 107, 558, 195, 141, 1676, 0, 0, 944, 1095, 737, 0, 0, 1850, 1038, 0, 798, 614, 1736, 0, 0, 0, 0, 0, 1442, 52, 784, 222, 1434, 1843, 0, 12, 0, 0, 0, 1873, 323, 0, 11, 0, 270, 1527, 250, 0, 1918, 464, 0, 962, 665, 1911, 393, 1849, 282, 0, 1090, 564, 1070, 1743, 289, 330, 0, 408, 731, 0, 1430, 0, 738, 933, 1594, 636, 1464, 0, 560, 152, 447, 134, 597, 0, 0, 0, 0, 0, 1281, 0, 0, 247, 1040, 197, 0, 664, 441, 0, 0, 999, 1959, 506, 1810, 0, 1279, 1204, 1275, 1362, 157, 105, 1209, 0, 0, 1001, 384, 833, 58, 0, 195, 0, 0, 0, 703, 1749, 171, 1580, 453, 0, 0, 834, 1766, 0, 336, 0, 0, 0, 0, 762, 997, 895, 0, 107, 0, 429, 275, 1285, 0, 1759, 1582, 0, 0, 1552, 1909, 134, 0, 0, 178, 0, 54, 491, 0, 205, 1692, 0, 43, 0, 0, 0, 427, 497, 1572, 425, 0, 583, 943, 593, 570, 872, 371, 0, 0, 2014, 0, 0, 0, 0, 346, 2016, 1881, 0, 275, 0, 675, 0, 0, 0, 1818, 1304, 58, 254, 553, 548, 682, 1955, 0, 222, 0, 1345, 508, 548, 0, 1843, 1610, 382, 304, 261, 1785, 762, 0, 956, 0, 0, 0, 171, 0, 1649, 1949, 198, 0, 0, 168, 1728, 0, 0, 1527, 411, 0, 0, 0, 579, 2022, 969, 110, 1187, 0, 144, 0, 561, 0, 1274, 568, 0, 966, 0, 1796, 0, 436, 1410, 644, 1598, 1077, 1892, 2013, 0, 1233, 442, 323, 44, 1031, 0, 884, 0, 811, 0, 169, 699, 1960, 78, 240, 616, 0, 934, 0, 771, 923, 348, 129, 200, 761, 0, 1090, 68, 0, 0, 93, 0, 0, 1499, 799, 0, 614, 68, 0, 23, 0, 0, 1675, 0, 1704, 0, 0, 1053, 576, 968, 191, 1241, 0, 1279, 1019, 1745, 249, 0, 521, 305, 1966, 317, 0, 150, 0, 32, 929, 1772, 344, 870, 803, 0, 445, 839, 1041, 124, 0, 0, 925, 500, 593, 1080, 0, 0, 649, 605, 1167, 0, 1885, 370, 148, 645, 563, 771, 1957, 1246, 317, 37, 551, 0, 0, 0, 539, 5, 1345, 0, 0, 0, 1853, 627, 1888, 1801, 518, 0, 433, 972, 0, 0, 780, 0, 1004, 0, 0, 0, 1945, 0, 974, 970, 1202, 0, 1848, 62, 715, 112, 1963, 802, 0, 0, 0, 711, 1856, 211, 0, 326, 0, 230, 722, 0, 1450, 828, 0, 236, 740, 0, 0, 0, 0, 630, 0, 0, 918, 759, 347, 984, 1603, 0, 0, 0, 399, 1666, 2012, 165, 0, 935, 658, 357, 0, 0, 0, 0, 0, 1605, 669, 28, 0, 0, 308, 0, 94, 213, 0, 0, 1003, 0, 0, 0, 0, 581, 0, 0, 855, 485, 0, 262, 859, 1043, 865, 0, 1774, 627, 364, 0, 65, 1598, 455, 682, 1629, 1572, 310, 0, 1703, 1523, 520, 663, 0, 237, 0, 0, 367, 14, 451, 216, 0, 0, 342, 1039, 128, 0, 0, 0, 1164, 122, 151, 0, 0, 0, 0, 691, 126, 153, 1574, 170, 1223, 408, 0, 572, 0, 0, 56, 0, 0, 497, 0, 1254, 201, 1823, 0, 1550, 365, 0, 381, 0, 462, 0, 1497, 0, 0, 0, 1998, 0, 439, 145, 1956, 920, 782, 0, 741, 987, 902, 0, 0, 0, 224, 1089, 0, 65, 2028, 1679, 725, 0, 95, 702, 331, 0, 1051, 1236, 403, 209, 392, 0, 536, 0, 0, 0, 0, 910, 501, 0, 1839, 1030, 0, 0, 0, 610, 795, 69, 651, 0, 1470, 199, 0, 1582, 0, 1773, 764, 0, 221, 655, 1004, 0, 1598, 0, 0, 80, 0, 1987, 827, 0, 657, 765, 969, 1218, 0, 601, 540, 946, 0, 540, 0, 162, 957, 0, 0, 0, 194, 65, 1385, 901, 74, 1973, 1804, 963, 0, 0, 1282, 184, 1587, 433, 0, 0, 0, 0, 773, 1865, 0, 352, 714, 0, 293, 1136, 129, 973, 504, 834, 0, 1432, 1993, 251, 559, 705, 958, 623, 0, 0, 1204, 846};

static int hash_g(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 2030;
    }
    return G[sum];
}

static int perfect_hash(const char *key)
{
    if (strlen(key) > 35)
        return 0;

    return (hash_g(key, T1) + hash_g(key, T2)) % 2030;
}

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return perfect_hash(data());
}

}  // namespace sh
