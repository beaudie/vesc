GROUP BEGIN Trigonometric
  COMMON_BUILTINS, auto
    genType radians(genType);
    genType degrees(genType);
    genType sin(genType);
    genType cos(genType);
    genType tan(genType);
    genType asin(genType);
    genType acos(genType);
    genType atan(genType, genType);
    genType atan(genType);
  ESSL3_BUILTINS, auto
    genType sinh(genType);
    genType cosh(genType);
    genType tanh(genType);
    genType asinh(genType);
    genType acosh(genType);
    genType atanh(genType);
GROUP END Trigonometric

GROUP BEGIN Exponential
  COMMON_BUILTINS, auto
    genType pow(genType, genType);
    genType exp(genType);
    genType log(genType);
    genType exp2(genType);
    genType log2(genType);
    genType sqrt(genType);
    genType inversesqrt(genType);
GROUP END Exponential

GROUP BEGIN Common
  COMMON_BUILTINS, auto
    genType abs(genType);
  ESSL3_BUILTINS, auto
    genIType abs(genIType);
  COMMON_BUILTINS, auto
    genType sign(genType);
  ESSL3_BUILTINS, auto
    genIType sign(genIType);
  COMMON_BUILTINS, auto
    genType floor(genType);
  ESSL3_BUILTINS, auto
    genType trunc(genType);
    genType round(genType);
    genType roundEven(genType);
  COMMON_BUILTINS, auto
    genType ceil(genType);
    genType fract(genType);
    genType mod(genType, float);
    genType mod(genType, genType);
    genType min(genType, float);
    genType min(genType, genType);
  ESSL3_BUILTINS, auto
    genIType min(genIType, genIType);
    genIType min(genIType, int);
    genUType min(genUType, genUType);
    genUType min(genUType, uint);
  COMMON_BUILTINS, auto
    genType max(genType, float);
    genType max(genType, genType);
  ESSL3_BUILTINS, auto
    genIType max(genIType, genIType);
    genIType max(genIType, int);
    genUType max(genUType, genUType);
    genUType max(genUType, uint);
  COMMON_BUILTINS, auto
    genType clamp(genType, float, float);
    genType clamp(genType, genType, genType);
  ESSL3_BUILTINS, auto
    genIType clamp(genIType, int, int);
    genIType clamp(genIType, genIType, genIType);
    genUType clamp(genUType, uint, uint);
    genUType clamp(genUType, genUType, genUType);
  COMMON_BUILTINS, auto
    genType mix(genType, genType, float);
    genType mix(genType, genType, genType);
  ESSL3_BUILTINS, auto
    genType mix(genType, genType, genBType);
  COMMON_BUILTINS, auto
    genType step(genType, genType);
    genType step(float, genType);
    genType smoothstep(genType, genType, genType);
    genType smoothstep(float, float, genType);
  ESSL3_BUILTINS, auto
    genType modf(genType, out genType);
    genBType isnan(genType);
    genBType isinf(genType);
    genIType floatBitsToInt(genType);
    genUType floatBitsToUint(genType);
    genType intBitsToFloat(genIType);
    genType uintBitsToFloat(genUType);
  ESSL3_1_BUILTINS, auto
    genType frexp(genType, out genIType);
    genType ldexp(genType, genIType);
  ESSL3_BUILTINS, auto
    uint packSnorm2x16(vec2);
    uint packUnorm2x16(vec2);
    uint packHalf2x16(vec2);
    vec2 unpackSnorm2x16(uint);
    vec2 unpackUnorm2x16(uint);
    vec2 unpackHalf2x16(uint);
  ESSL3_1_BUILTINS, auto
    uint packUnorm4x8(vec4);
    uint packSnorm4x8(vec4);
    vec4 unpackUnorm4x8(uint);
    vec4 unpackSnorm4x8(uint);
GROUP END Common

GROUP BEGIN Geometric
  COMMON_BUILTINS, auto
    float length(genType);
    float distance(genType, genType);
    float dot(genType, genType);
    vec3 cross(vec3, vec3);
    genType normalize(genType);
    genType faceforward(genType, genType, genType);
    genType reflect(genType, genType);
    genType refract(genType, genType, float);
GROUP END Geometric

GROUP BEGIN Matrix
  COMMON_BUILTINS, MulMatrixComponentWise
    mat2 matrixCompMult(mat2, mat2);
    mat3 matrixCompMult(mat3, mat3);
    mat4 matrixCompMult(mat4, mat4);
  ESSL3_BUILTINS, MulMatrixComponentWise
    mat2x3 matrixCompMult(mat2x3, mat2x3);
    mat3x2 matrixCompMult(mat3x2, mat3x2);
    mat2x4 matrixCompMult(mat2x4, mat2x4);
    mat4x2 matrixCompMult(mat4x2, mat4x2);
    mat3x4 matrixCompMult(mat3x4, mat3x4);
    mat4x3 matrixCompMult(mat4x3, mat4x3);
  ESSL3_BUILTINS, auto
    mat2 outerProduct(vec2, vec2);
    mat3 outerProduct(vec3, vec3);
    mat4 outerProduct(vec4, vec4);
    mat2x3 outerProduct(vec3, vec2);
    mat3x2 outerProduct(vec2, vec3);
    mat2x4 outerProduct(vec4, vec2);
    mat4x2 outerProduct(vec2, vec4);
    mat3x4 outerProduct(vec4, vec3);
    mat4x3 outerProduct(vec3, vec4);
    mat2 transpose(mat2);
    mat3 transpose(mat3);
    mat4 transpose(mat4);
    mat2x3 transpose(mat3x2);
    mat3x2 transpose(mat2x3);
    mat2x4 transpose(mat4x2);
    mat4x2 transpose(mat2x4);
    mat3x4 transpose(mat4x3);
    mat4x3 transpose(mat3x4);
    float determinant(mat2);
    float determinant(mat3);
    float determinant(mat4);
    mat2 inverse(mat2);
    mat3 inverse(mat3);
    mat4 inverse(mat4);
GROUP END Matrix

GROUP BEGIN Vector
  COMMON_BUILTINS, LessThanComponentWise
    bvec lessThan(vec, vec);
    bvec lessThan(ivec, ivec);
  ESSL3_BUILTINS, LessThanComponentWise
    bvec lessThan(uvec, uvec);
  COMMON_BUILTINS, LessThanEqualComponentWise
    bvec lessThanEqual(vec, vec);
    bvec lessThanEqual(ivec, ivec);
  ESSL3_BUILTINS, LessThanEqualComponentWise
    bvec lessThanEqual(uvec, uvec);
  COMMON_BUILTINS, GreaterThanComponentWise
    bvec greaterThan(vec, vec);
    bvec greaterThan(ivec, ivec);
  ESSL3_BUILTINS, GreaterThanComponentWise
    bvec greaterThan(uvec, uvec);
  COMMON_BUILTINS, GreaterThanEqualComponentWise
    bvec greaterThanEqual(vec, vec);
    bvec greaterThanEqual(ivec, ivec);
  ESSL3_BUILTINS, GreaterThanEqualComponentWise
    bvec greaterThanEqual(uvec, uvec);
  COMMON_BUILTINS, EqualComponentWise
    bvec equal(vec, vec);
    bvec equal(ivec, ivec);
  ESSL3_BUILTINS, EqualComponentWise
    bvec equal(uvec, uvec);
  COMMON_BUILTINS, EqualComponentWise
    bvec equal(bvec, bvec);
  COMMON_BUILTINS, NotEqualComponentWise
    bvec notEqual(vec, vec);
    bvec notEqual(ivec, ivec);
  ESSL3_BUILTINS, NotEqualComponentWise
    bvec notEqual(uvec, uvec);
  COMMON_BUILTINS, NotEqualComponentWise
    bvec notEqual(bvec, bvec);
  COMMON_BUILTINS, auto
    bool any(bvec);
    bool all(bvec);
  COMMON_BUILTINS, LogicalNotComponentWise
    bvec not(bvec); {"suffix": "Func"}
GROUP END Vector

GROUP BEGIN Integer
  ESSL3_1_BUILTINS, auto
    genIType bitfieldExtract(genIType, int, int);
    genUType bitfieldExtract(genUType, int, int);
    genIType bitfieldInsert(genIType, genIType, int, int);
    genUType bitfieldInsert(genUType, genUType, int, int);
    genIType bitfieldReverse(genIType);
    genUType bitfieldReverse(genUType);
    genIType bitCount(genIType);
    genIType bitCount(genUType);
    genIType findLSB(genIType);
    genIType findLSB(genUType);
    genIType findMSB(genIType);
    genIType findMSB(genUType);
    genUType uaddCarry(genUType, genUType, out genUType);
    genUType usubBorrow(genUType, genUType, out genUType);
    void umulExtended(genUType, genUType, out genUType, out genUType);
    void imulExtended(genIType, genIType, out genIType, out genIType);
GROUP END Integer
