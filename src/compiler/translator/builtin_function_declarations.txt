GROUP BEGIN Trigonometric
  COMMON_BUILTINS, auto
    genType radians(genType);
    genType degrees(genType);
    genType sin(genType);
    genType cos(genType);
    genType tan(genType);
    genType asin(genType);
    genType acos(genType);
    genType atan(genType, genType);
    genType atan(genType);
  ESSL3_BUILTINS, auto
    genType sinh(genType);
    genType cosh(genType);
    genType tanh(genType);
    genType asinh(genType);
    genType acosh(genType);
    genType atanh(genType);
GROUP END Trigonometric

GROUP BEGIN Exponential
  COMMON_BUILTINS, auto
    genType pow(genType, genType);
    genType exp(genType);
    genType log(genType);
    genType exp2(genType);
    genType log2(genType);
    genType sqrt(genType);
    genType inversesqrt(genType);
GROUP END Exponential

GROUP BEGIN Common
  COMMON_BUILTINS, auto
    genType abs(genType);
  ESSL3_BUILTINS, auto
    genIType abs(genIType);
  COMMON_BUILTINS, auto
    genType sign(genType);
  ESSL3_BUILTINS, auto
    genIType sign(genIType);
  COMMON_BUILTINS, auto
    genType floor(genType);
  ESSL3_BUILTINS, auto
    genType trunc(genType);
    genType round(genType);
    genType roundEven(genType);
  COMMON_BUILTINS, auto
    genType ceil(genType);
    genType fract(genType);
    genType mod(genType, float);
    genType mod(genType, genType);
    genType min(genType, float);
    genType min(genType, genType);
  ESSL3_BUILTINS, auto
    genIType min(genIType, genIType);
    genIType min(genIType, int);
    genUType min(genUType, genUType);
    genUType min(genUType, uint);
  COMMON_BUILTINS, auto
    genType max(genType, float);
    genType max(genType, genType);
  ESSL3_BUILTINS, auto
    genIType max(genIType, genIType);
    genIType max(genIType, int);
    genUType max(genUType, genUType);
    genUType max(genUType, uint);
  COMMON_BUILTINS, auto
    genType clamp(genType, float, float);
    genType clamp(genType, genType, genType);
  ESSL3_BUILTINS, auto
    genIType clamp(genIType, int, int);
    genIType clamp(genIType, genIType, genIType);
    genUType clamp(genUType, uint, uint);
    genUType clamp(genUType, genUType, genUType);
  COMMON_BUILTINS, auto
    genType mix(genType, genType, float);
    genType mix(genType, genType, genType);
  ESSL3_BUILTINS, auto
    genType mix(genType, genType, genBType);
  COMMON_BUILTINS, auto
    genType step(genType, genType);
    genType step(float, genType);
    genType smoothstep(genType, genType, genType);
    genType smoothstep(float, float, genType);
  ESSL3_BUILTINS, auto
    genType modf(genType, out genType);
    genBType isnan(genType);
    genBType isinf(genType);
    genIType floatBitsToInt(genType);
    genUType floatBitsToUint(genType);
    genType intBitsToFloat(genIType);
    genType uintBitsToFloat(genUType);
  ESSL3_1_BUILTINS, auto
    genType frexp(genType, out genIType);
    genType ldexp(genType, genIType);
  ESSL3_BUILTINS, auto
    uint packSnorm2x16(vec2);
    uint packUnorm2x16(vec2);
    uint packHalf2x16(vec2);
    vec2 unpackSnorm2x16(uint);
    vec2 unpackUnorm2x16(uint);
    vec2 unpackHalf2x16(uint);
  ESSL3_1_BUILTINS, auto
    uint packUnorm4x8(vec4);
    uint packSnorm4x8(vec4);
    vec4 unpackUnorm4x8(uint);
    vec4 unpackSnorm4x8(uint);
GROUP END Common

GROUP BEGIN Geometric
  COMMON_BUILTINS, auto
    float length(genType);
    float distance(genType, genType);
    float dot(genType, genType);
    vec3 cross(vec3, vec3);
    genType normalize(genType);
    genType faceforward(genType, genType, genType);
    genType reflect(genType, genType);
    genType refract(genType, genType, float);
GROUP END Geometric

GROUP BEGIN Matrix
  COMMON_BUILTINS, MulMatrixComponentWise
    mat2 matrixCompMult(mat2, mat2);
    mat3 matrixCompMult(mat3, mat3);
    mat4 matrixCompMult(mat4, mat4);
  ESSL3_BUILTINS, MulMatrixComponentWise
    mat2x3 matrixCompMult(mat2x3, mat2x3);
    mat3x2 matrixCompMult(mat3x2, mat3x2);
    mat2x4 matrixCompMult(mat2x4, mat2x4);
    mat4x2 matrixCompMult(mat4x2, mat4x2);
    mat3x4 matrixCompMult(mat3x4, mat3x4);
    mat4x3 matrixCompMult(mat4x3, mat4x3);
  ESSL3_BUILTINS, auto
    mat2 outerProduct(vec2, vec2);
    mat3 outerProduct(vec3, vec3);
    mat4 outerProduct(vec4, vec4);
    mat2x3 outerProduct(vec3, vec2);
    mat3x2 outerProduct(vec2, vec3);
    mat2x4 outerProduct(vec4, vec2);
    mat4x2 outerProduct(vec2, vec4);
    mat3x4 outerProduct(vec4, vec3);
    mat4x3 outerProduct(vec3, vec4);
    mat2 transpose(mat2);
    mat3 transpose(mat3);
    mat4 transpose(mat4);
    mat2x3 transpose(mat3x2);
    mat3x2 transpose(mat2x3);
    mat2x4 transpose(mat4x2);
    mat4x2 transpose(mat2x4);
    mat3x4 transpose(mat4x3);
    mat4x3 transpose(mat3x4);
    float determinant(mat2);
    float determinant(mat3);
    float determinant(mat4);
    mat2 inverse(mat2);
    mat3 inverse(mat3);
    mat4 inverse(mat4);
GROUP END Matrix

GROUP BEGIN Vector
  COMMON_BUILTINS, LessThanComponentWise
    bvec lessThan(vec, vec);
    bvec lessThan(ivec, ivec);
  ESSL3_BUILTINS, LessThanComponentWise
    bvec lessThan(uvec, uvec);
  COMMON_BUILTINS, LessThanEqualComponentWise
    bvec lessThanEqual(vec, vec);
    bvec lessThanEqual(ivec, ivec);
  ESSL3_BUILTINS, LessThanEqualComponentWise
    bvec lessThanEqual(uvec, uvec);
  COMMON_BUILTINS, GreaterThanComponentWise
    bvec greaterThan(vec, vec);
    bvec greaterThan(ivec, ivec);
  ESSL3_BUILTINS, GreaterThanComponentWise
    bvec greaterThan(uvec, uvec);
  COMMON_BUILTINS, GreaterThanEqualComponentWise
    bvec greaterThanEqual(vec, vec);
    bvec greaterThanEqual(ivec, ivec);
  ESSL3_BUILTINS, GreaterThanEqualComponentWise
    bvec greaterThanEqual(uvec, uvec);
  COMMON_BUILTINS, EqualComponentWise
    bvec equal(vec, vec);
    bvec equal(ivec, ivec);
  ESSL3_BUILTINS, EqualComponentWise
    bvec equal(uvec, uvec);
  COMMON_BUILTINS, EqualComponentWise
    bvec equal(bvec, bvec);
  COMMON_BUILTINS, NotEqualComponentWise
    bvec notEqual(vec, vec);
    bvec notEqual(ivec, ivec);
  ESSL3_BUILTINS, NotEqualComponentWise
    bvec notEqual(uvec, uvec);
  COMMON_BUILTINS, NotEqualComponentWise
    bvec notEqual(bvec, bvec);
  COMMON_BUILTINS, auto
    bool any(bvec);
    bool all(bvec);
  COMMON_BUILTINS, LogicalNotComponentWise
    bvec not(bvec); {"suffix": "Func"}
GROUP END Vector

GROUP BEGIN Integer
  ESSL3_1_BUILTINS, auto
    genIType bitfieldExtract(genIType, int, int);
    genUType bitfieldExtract(genUType, int, int);
    genIType bitfieldInsert(genIType, genIType, int, int);
    genUType bitfieldInsert(genUType, genUType, int, int);
    genIType bitfieldReverse(genIType);
    genUType bitfieldReverse(genUType);
    genIType bitCount(genIType);
    genIType bitCount(genUType);
    genIType findLSB(genIType);
    genIType findLSB(genUType);
    genIType findMSB(genIType);
    genIType findMSB(genUType);
    genUType uaddCarry(genUType, genUType, out genUType);
    genUType usubBorrow(genUType, genUType, out genUType);
    void umulExtended(genUType, genUType, out genUType, out genUType);
    void imulExtended(genIType, genIType, out genIType, out genIType);
GROUP END Integer

GROUP BEGIN TextureESSL100
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2D(sampler2D, vec2);
    vec4 texture2DProj(sampler2D, vec3);
    vec4 texture2DProj(sampler2D, vec4);
    vec4 textureCube(samplerCube, vec3);
GROUP END TextureESSL100

GROUP BEGIN EGL_image_external
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2D(samplerExternalOES, vec2);
    vec4 texture2DProj(samplerExternalOES, vec3);
    vec4 texture2DProj(samplerExternalOES, vec4);
GROUP END EGL_image_external

GROUP BEGIN ARB_texture_rectangle
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2DRect(sampler2DRect, vec2); {"extension": "ARB_texture_rectangle"}
    vec4 texture2DRectProj(sampler2DRect, vec3); {"extension": "ARB_texture_rectangle"}
    vec4 texture2DRectProj(sampler2DRect, vec4); {"extension": "ARB_texture_rectangle"}
GROUP END ARB_texture_rectangle

GROUP BEGIN EXT_shader_texture_lod
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2DGradEXT(sampler2D, vec2, vec2, vec2); {"extension": "EXT_shader_texture_lod"}
    vec4 texture2DProjGradEXT(sampler2D, vec3, vec2, vec2); {"extension": "EXT_shader_texture_lod"}
    vec4 texture2DProjGradEXT(sampler2D, vec4, vec2, vec2); {"extension": "EXT_shader_texture_lod"}
    vec4 textureCubeGradEXT(samplerCube, vec3, vec3, vec3); {"extension": "EXT_shader_texture_lod"}
GROUP END EXT_shader_texture_lod

GROUP BEGIN TextureESSL100FS {"condition": "shaderType == GL_FRAGMENT_SHADER"}
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2D(sampler2D, vec2, float);
    vec4 texture2DProj(sampler2D, vec3, float);
    vec4 texture2DProj(sampler2D, vec4, float);
    vec4 textureCube(samplerCube, vec3, float);
  ESSL1_BUILTINS, auto
    genType dFdx(genType); {"extension": "OES_standard_derivatives"}
    genType dFdy(genType); {"extension": "OES_standard_derivatives"}
    genType fwidth(genType); {"extension": "OES_standard_derivatives"}
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2DLodEXT(sampler2D, vec2, float); {"extension": "EXT_shader_texture_lod"}
    vec4 texture2DProjLodEXT(sampler2D, vec3, float); {"extension": "EXT_shader_texture_lod"}
    vec4 texture2DProjLodEXT(sampler2D, vec4, float); {"extension": "EXT_shader_texture_lod"}
    vec4 textureCubeLodEXT(samplerCube, vec3, float); {"extension": "EXT_shader_texture_lod"}
GROUP END TextureESSL100FS

GROUP BEGIN TextureESSL100VS {"condition": "shaderType == GL_VERTEX_SHADER"}
  ESSL1_BUILTINS, CallBuiltInFunction
    vec4 texture2DLod(sampler2D, vec2, float);
    vec4 texture2DProjLod(sampler2D, vec3, float);
    vec4 texture2DProjLod(sampler2D, vec4, float);
    vec4 textureCubeLod(samplerCube, vec3, float);
GROUP END TextureESSL100VS

GROUP BEGIN TextureESSL300
  ESSL3_BUILTINS, CallBuiltInFunction
    gvec4 texture(gsampler2D, vec2);
    gvec4 texture(gsampler3D, vec3);
    gvec4 texture(gsamplerCube, vec3);
    gvec4 texture(gsampler2DArray, vec3);
    gvec4 textureProj(gsampler2D, vec3);
    gvec4 textureProj(gsampler2D, vec4);
    gvec4 textureProj(gsampler3D, vec4);
    gvec4 textureLod(gsampler2D, vec2, float);
    gvec4 textureLod(gsampler3D, vec3, float);
    gvec4 textureLod(gsamplerCube, vec3, float);
    gvec4 textureLod(gsampler2DArray, vec3, float);
    float texture(sampler2DShadow, vec3);
    float texture(samplerCubeShadow, vec4);
    float texture(sampler2DArrayShadow, vec4);
    float textureProj(sampler2DShadow, vec4);
    float textureLod(sampler2DShadow, vec3, float);
    ivec2 textureSize(gsampler2D, int);
    ivec3 textureSize(gsampler3D, int);
    ivec2 textureSize(gsamplerCube, int);
    ivec3 textureSize(gsampler2DArray, int);
    ivec2 textureSize(sampler2DShadow, int);
    ivec2 textureSize(samplerCubeShadow, int);
    ivec3 textureSize(sampler2DArrayShadow, int);
    ivec2 textureSize(gsampler2DMS);
    gvec4 textureOffset(gsampler2D, vec2, ivec2);
    gvec4 textureOffset(gsampler3D, vec3, ivec3);
    float textureOffset(sampler2DShadow, vec3, ivec2);
    gvec4 textureOffset(gsampler2DArray, vec3, ivec2);
    gvec4 textureProjOffset(gsampler2D, vec3, ivec2);
    gvec4 textureProjOffset(gsampler2D, vec4, ivec2);
    gvec4 textureProjOffset(gsampler3D, vec4, ivec3);
    float textureProjOffset(sampler2DShadow, vec4, ivec2);
    gvec4 textureLodOffset(gsampler2D, vec2, float, ivec2);
    gvec4 textureLodOffset(gsampler3D, vec3, float, ivec3);
    float textureLodOffset(sampler2DShadow, vec3, float, ivec2);
    gvec4 textureLodOffset(gsampler2DArray, vec3, float, ivec2);
    gvec4 textureProjLod(gsampler2D, vec3, float);
    gvec4 textureProjLod(gsampler2D, vec4, float);
    gvec4 textureProjLod(gsampler3D, vec4, float);
    float textureProjLod(sampler2DShadow, vec4, float);
    gvec4 textureProjLodOffset(gsampler2D, vec3, float, ivec2);
    gvec4 textureProjLodOffset(gsampler2D, vec4, float, ivec2);
    gvec4 textureProjLodOffset(gsampler3D, vec4, float, ivec3);
    float textureProjLodOffset(sampler2DShadow, vec4, float, ivec2);
    gvec4 texelFetch(gsampler2D, ivec2, int);
    gvec4 texelFetch(gsampler3D, ivec3, int);
    gvec4 texelFetch(gsampler2DArray, ivec3, int);
    gvec4 texelFetchOffset(gsampler2D, ivec2, int, ivec2);
    gvec4 texelFetchOffset(gsampler3D, ivec3, int, ivec3);
    gvec4 texelFetchOffset(gsampler2DArray, ivec3, int, ivec2);
    gvec4 textureGrad(gsampler2D, vec2, vec2, vec2);
    gvec4 textureGrad(gsampler3D, vec3, vec3, vec3);
    gvec4 textureGrad(gsamplerCube, vec3, vec3, vec3);
    float textureGrad(sampler2DShadow, vec3, vec2, vec2);
    float textureGrad(samplerCubeShadow, vec4, vec3, vec3);
    gvec4 textureGrad(gsampler2DArray, vec3, vec2, vec2);
    float textureGrad(sampler2DArrayShadow, vec4, vec2, vec2);
    gvec4 textureGradOffset(gsampler2D, vec2, vec2, vec2, ivec2);
    gvec4 textureGradOffset(gsampler3D, vec3, vec3, vec3, ivec3);
    float textureGradOffset(sampler2DShadow, vec3, vec2, vec2, ivec2);
    gvec4 textureGradOffset(gsampler2DArray, vec3, vec2, vec2, ivec2);
    float textureGradOffset(sampler2DArrayShadow, vec4, vec2, vec2, ivec2);
    gvec4 textureProjGrad(gsampler2D, vec3, vec2, vec2);
    gvec4 textureProjGrad(gsampler2D, vec4, vec2, vec2);
    gvec4 textureProjGrad(gsampler3D, vec4, vec3, vec3);
    float textureProjGrad(sampler2DShadow, vec4, vec2, vec2);
    gvec4 textureProjGradOffset(gsampler2D, vec3, vec2, vec2, ivec2);
    gvec4 textureProjGradOffset(gsampler2D, vec4, vec2, vec2, ivec2);
    gvec4 textureProjGradOffset(gsampler3D, vec4, vec3, vec3, ivec3);
    float textureProjGradOffset(sampler2DShadow, vec4, vec2, vec2, ivec2);
GROUP END TextureESSL300

GROUP BEGIN EGL_image_external_essl3
  ESSL3_BUILTINS, CallBuiltInFunction
    vec4 texture(samplerExternalOES, vec2); {"extension": "OES_EGL_image_external_essl3"}
    vec4 textureProj(samplerExternalOES, vec3); {"extension": "OES_EGL_image_external_essl3"}
    vec4 textureProj(samplerExternalOES, vec4); {"extension": "OES_EGL_image_external_essl3"}
    ivec2 textureSize(samplerExternalOES, int); {"extension": "OES_EGL_image_external_essl3"}
    vec4 texelFetch(samplerExternalOES, ivec2, int); {"extension": "OES_EGL_image_external_essl3"}
GROUP END EGL_image_external_essl3

GROUP BEGIN EXT_yuv_target
  ESSL3_BUILTINS, CallBuiltInFunction
    vec4 texture(samplerExternal2DY2YEXT, vec2); {"extension": "EXT_YUV_target"}
    vec4 textureProj(samplerExternal2DY2YEXT, vec3); {"extension": "EXT_YUV_target"}
    vec4 textureProj(samplerExternal2DY2YEXT, vec4); {"extension": "EXT_YUV_target"}
    vec3 rgb_2_yuv(vec3, yuvCscStandardEXT); {"extension": "EXT_YUV_target"}
    vec3 yuv_2_rgb(vec3, yuvCscStandardEXT); {"extension": "EXT_YUV_target"}
    ivec2 textureSize(samplerExternal2DY2YEXT, int); {"extension": "EXT_YUV_target"}
    vec4 texelFetch(samplerExternal2DY2YEXT, ivec2, int); {"extension": "EXT_YUV_target"}
GROUP END EXT_yuv_target

GROUP BEGIN TextureESSL300FS {"condition": "shaderType == GL_FRAGMENT_SHADER"}
  ESSL3_BUILTINS, CallBuiltInFunction
    gvec4 texture(gsampler2D, vec2, float);
    gvec4 texture(gsampler3D, vec3, float);
    gvec4 texture(gsamplerCube, vec3, float);
    gvec4 texture(gsampler2DArray, vec3, float);
    gvec4 textureProj(gsampler2D, vec3, float);
    gvec4 textureProj(gsampler2D, vec4, float);
    gvec4 textureProj(gsampler3D, vec4, float);
    vec4 texture(samplerExternalOES, vec2, float); {"extension": "OES_EGL_image_external_essl3"}
    vec4 textureProj(samplerExternalOES, vec3, float); {"extension": "OES_EGL_image_external_essl3"}
    vec4 textureProj(samplerExternalOES, vec4, float); {"extension": "OES_EGL_image_external_essl3"}
    vec4 texture(samplerExternal2DY2YEXT, vec2, float); {"extension": "EXT_YUV_target"}
    vec4 textureProj(samplerExternal2DY2YEXT, vec3, float); {"extension": "EXT_YUV_target"}
    vec4 textureProj(samplerExternal2DY2YEXT, vec4, float); {"extension": "EXT_YUV_target"}
    float texture(sampler2DShadow, vec3, float);
    float texture(samplerCubeShadow, vec4, float);
    float textureProj(sampler2DShadow, vec4, float);
    gvec4 textureOffset(gsampler2D, vec2, ivec2, float);
    gvec4 textureOffset(gsampler3D, vec3, ivec3, float);
    float textureOffset(sampler2DShadow, vec3, ivec2, float);
    gvec4 textureOffset(gsampler2DArray, vec3, ivec2, float);
    gvec4 textureProjOffset(gsampler2D, vec3, ivec2, float);
    gvec4 textureProjOffset(gsampler2D, vec4, ivec2, float);
    gvec4 textureProjOffset(gsampler3D, vec4, ivec3, float);
    float textureProjOffset(sampler2DShadow, vec4, ivec2, float);
GROUP END TextureESSL300FS

GROUP BEGIN TextureESSL310
  ESSL3_1_BUILTINS, CallBuiltInFunction
    gvec4 texelFetch(gsampler2DMS, ivec2, int);
    gvec4 textureGather(gsampler2D, vec2);
    gvec4 textureGather(gsampler2D, vec2, int);
    gvec4 textureGather(gsampler2DArray, vec3);
    gvec4 textureGather(gsampler2DArray, vec3, int);
    gvec4 textureGather(gsamplerCube, vec3);
    gvec4 textureGather(gsamplerCube, vec3, int);
    vec4 textureGather(sampler2DShadow, vec2);
    vec4 textureGather(sampler2DShadow, vec2, float);
    vec4 textureGather(sampler2DArrayShadow, vec3);
    vec4 textureGather(sampler2DArrayShadow, vec3, float);
    vec4 textureGather(samplerCubeShadow, vec3);
    vec4 textureGather(samplerCubeShadow, vec3, float);
    gvec4 textureGatherOffset(gsampler2D, vec2, ivec2);
    gvec4 textureGatherOffset(gsampler2D, vec2, ivec2, int);
    gvec4 textureGatherOffset(gsampler2DArray, vec3, ivec2);
    gvec4 textureGatherOffset(gsampler2DArray, vec3, ivec2, int);
    vec4 textureGatherOffset(sampler2DShadow, vec2, float, ivec2);
    vec4 textureGatherOffset(sampler2DArrayShadow, vec3, float, ivec2);
GROUP END TextureESSL310

GROUP BEGIN DerivativesESSL300FS {"condition": "shaderType == GL_FRAGMENT_SHADER"}
  ESSL3_BUILTINS, auto
    genType dFdx(genType);
    genType dFdy(genType);
    genType fwidth(genType);
GROUP END DerivativesESSL300FS

GROUP BEGIN AtomicCounter
  ESSL3_1_BUILTINS, CallBuiltInFunction
    uint atomicCounter(atomic_uint);
    uint atomicCounterIncrement(atomic_uint);
    uint atomicCounterDecrement(atomic_uint);
GROUP END AtomicCounter

GROUP BEGIN AtomicMemory
  ESSL3_1_BUILTINS, CallBuiltInFunction
    uint atomicAdd(inout uint, uint);
    int atomicAdd(inout int, int);
    uint atomicMin(inout uint, uint);
    int atomicMin(inout int, int);
    uint atomicMax(inout uint, uint);
    int atomicMax(inout int, int);
    uint atomicAnd(inout uint, uint);
    int atomicAnd(inout int, int);
    uint atomicOr(inout uint, uint);
    int atomicOr(inout int, int);
    uint atomicXor(inout uint, uint);
    int atomicXor(inout int, int);
    uint atomicExchange(inout uint, uint);
    int atomicExchange(inout int, int);
    uint atomicCompSwap(inout uint, uint, uint);
    int atomicCompSwap(inout int, int, int);
GROUP END AtomicMemory

GROUP BEGIN Image
  ESSL3_1_BUILTINS, CallBuiltInFunction
    void imageStore(gimage2D, ivec2, gvec4); {"hasSideEffects": true}
    void imageStore(gimage3D, ivec3, gvec4); {"hasSideEffects": true}
    void imageStore(gimage2DArray, ivec3, gvec4); {"hasSideEffects": true}
    void imageStore(gimageCube, ivec3, gvec4); {"hasSideEffects": true}
    gvec4 imageLoad(gimage2D, ivec2);
    gvec4 imageLoad(gimage3D, ivec3);
    gvec4 imageLoad(gimage2DArray, ivec3);
    gvec4 imageLoad(gimageCube, ivec3);
    ivec2 imageSize(gimage2D);
    ivec3 imageSize(gimage3D);
    ivec3 imageSize(gimage2DArray);
    ivec2 imageSize(gimageCube);
GROUP END Image

GROUP BEGIN Barrier
  ESSL3_1_BUILTINS, auto
    void memoryBarrier();
    void memoryBarrierAtomicCounter();
    void memoryBarrierBuffer();
    void memoryBarrierImage();
GROUP END Barrier

GROUP BEGIN ESSL310CS {"condition": "shaderType == GL_COMPUTE_SHADER"}
  ESSL3_1_BUILTINS, auto
    void barrier();
    void memoryBarrierShared();
    void groupMemoryBarrier();
GROUP END ESSL310CS

GROUP BEGIN ESSL310GS {"condition": "shaderType == GL_GEOMETRY_SHADER_EXT"}
  ESSL3_1_BUILTINS, auto
    void EmitVertex(); {"extension": "EXT_geometry_shader"}
    void EndPrimitive(); {"extension": "EXT_geometry_shader"}
GROUP END ESSL310GS
