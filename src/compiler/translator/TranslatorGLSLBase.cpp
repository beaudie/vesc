//
// Copyright (c) 2017 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// TranslatorGLSLBase.cpp: Implementation of a base class for all GLSL translators

#include "compiler/translator/TranslatorGLSLBase.h"

namespace
{

// List of all names reserved in either GLSL ES 3.2 or GLSL 4.6
const char *kReservedGLSLNames[] = {"active",
                                    "asm",
                                    "atomic_uint",
                                    "attribute",
                                    "bool",
                                    "break",
                                    "buffer",
                                    "bvec2",
                                    "bvec3",
                                    "bvec4",
                                    "case",
                                    "cast",
                                    "centroid",
                                    "class",
                                    "coherent",
                                    "common",
                                    "const",
                                    "continue",
                                    "default",
                                    "discard",
                                    "dmat2",
                                    "dmat2x2",
                                    "dmat2x3",
                                    "dmat2x4",
                                    "dmat3",
                                    "dmat3x2",
                                    "dmat3x3",
                                    "dmat3x4",
                                    "dmat4",
                                    "dmat4x2",
                                    "dmat4x3",
                                    "dmat4x4",
                                    "do",
                                    "double",
                                    "dvec2",
                                    "dvec3",
                                    "dvec4",
                                    "else",
                                    "enum",
                                    "extern",
                                    "external",
                                    "false",
                                    "filter",
                                    "fixed",
                                    "flat",
                                    "float",
                                    "for",
                                    "fvec2",
                                    "fvec3",
                                    "fvec4",
                                    "goto",
                                    "half",
                                    "highp",
                                    "hvec2",
                                    "hvec3",
                                    "hvec4",
                                    "if",
                                    "iimage1D",
                                    "iimage1DArray",
                                    "iimage2D",
                                    "iimage2DArray",
                                    "iimage2DMS",
                                    "iimage2DMSArray",
                                    "iimage2DRect",
                                    "iimage3D",
                                    "iimageBuffer",
                                    "iimageCube",
                                    "iimageCubeArray",
                                    "image1D",
                                    "image1DArray",
                                    "image2D",
                                    "image2DArray",
                                    "image2DMS",
                                    "image2DMSArray",
                                    "image2DRect",
                                    "image3D",
                                    "imageBuffer",
                                    "imageCube",
                                    "imageCubeArray",
                                    "in",
                                    "inline",
                                    "inout",
                                    "input",
                                    "int",
                                    "interface",
                                    "invariant",
                                    "isampler1D",
                                    "isampler1DArray",
                                    "isampler2D",
                                    "isampler2DArray",
                                    "isampler2DMS",
                                    "isampler2DMSArray",
                                    "isampler2DRect",
                                    "isampler3D",
                                    "isamplerBuffer",
                                    "isamplerCube",
                                    "isamplerCubeArray",
                                    "ivec2",
                                    "ivec3",
                                    "ivec4",
                                    "layout",
                                    "long",
                                    "lowp",
                                    "mat2",
                                    "mat2x2",
                                    "mat2x3",
                                    "mat2x4",
                                    "mat3",
                                    "mat3x2",
                                    "mat3x3",
                                    "mat3x4",
                                    "mat4",
                                    "mat4x2",
                                    "mat4x3",
                                    "mat4x4",
                                    "mediump",
                                    "namespace",
                                    "noinline",
                                    "noperspective",
                                    "out",
                                    "output",
                                    "partition",
                                    "patch",
                                    "precise",
                                    "precision",
                                    "public",
                                    "readonly",
                                    "resource",
                                    "restrict",
                                    "return",
                                    "sample",
                                    "sampler1D",
                                    "sampler1DArray",
                                    "sampler1DArrayShadow",
                                    "sampler1DShadow",
                                    "sampler2D",
                                    "sampler2DArray",
                                    "sampler2DArrayShadow",
                                    "sampler2DMS",
                                    "sampler2DMSArray",
                                    "sampler2DRect",
                                    "sampler2DRectShadow",
                                    "sampler2DShadow",
                                    "sampler3D",
                                    "sampler3DRect",
                                    "samplerBuffer",
                                    "samplerCube",
                                    "samplerCubeArray",
                                    "samplerCubeArrayShadow",
                                    "samplerCubeShadow",
                                    "shared",
                                    "short",
                                    "sizeof",
                                    "smooth",
                                    "static",
                                    "struct",
                                    "subroutine",
                                    "superp",
                                    "switch",
                                    "template",
                                    "this",
                                    "true",
                                    "typedef",
                                    "uimage1D",
                                    "uimage1DArray",
                                    "uimage2D",
                                    "uimage2DArray",
                                    "uimage2DMS",
                                    "uimage2DMSArray",
                                    "uimage2DRect",
                                    "uimage3D",
                                    "uimageBuffer",
                                    "uimageCube",
                                    "uimageCubeArray",
                                    "uint",
                                    "uniform",
                                    "union",
                                    "unsigned",
                                    "usampler1D",
                                    "usampler1DArray",
                                    "usampler2D",
                                    "usampler2DArray",
                                    "usampler2DMS",
                                    "usampler2DMSArray",
                                    "usampler2DRect",
                                    "usampler3D",
                                    "usamplerBuffer",
                                    "usamplerCube",
                                    "usamplerCubeArray",
                                    "using",
                                    "uvec2",
                                    "uvec3",
                                    "uvec4",
                                    "varying",
                                    "vec2",
                                    "vec3",
                                    "vec4",
                                    "void",
                                    "volatile",
                                    "while",
                                    "writeonly"};

}  // anonymous namespace

namespace sh
{

TranslatorGLSLBase::TranslatorGLSLBase(sh::GLenum type, ShShaderSpec spec, ShShaderOutput output)
    : TCompiler(type, spec, output)
{
    for (auto name : kReservedGLSLNames)
    {
        mReservedNames.insert(name);
    }
}

const ReservedNameSet &TranslatorGLSLBase::getReservedNames() const
{
    return mReservedNames;
}

}  // namespace sh
