// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_ESSL_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {867,  1532, 172,  653,  980,  1140, 602,  654,  827,  69,
                              589,  302,  1089, 1079, 439,  8,    1300, 52,   1589, 5,
                              1420, 1034, 1283, 301,  199,  983,  853,  1344, 627,  573,
                              345,  1524, 657,  344,  1034, 1586, 400};
constexpr int mangledkT2[] = {859,  321, 399, 1542, 181,  598,  860,  565,  465,  620,
                              756,  517, 207, 1161, 1429, 1493, 1079, 1019, 1169, 5,
                              493,  875, 782, 1359, 181,  385,  960,  932,  566,  1263,
                              1443, 573, 35,  762,  1548, 1254, 280};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1335, 0,    1273, 0,
    134,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1586, 0,    0,
    0,    677,  711,  0,    632,  0,    1540, 0,    0,    706,  0,    0,    1045, 156,  0,    0,
    0,    0,    0,    0,    0,    0,    0,    460,  0,    0,    0,    1183, 411,  0,    1275, 1534,
    0,    1480, 0,    1144, 0,    1212, 0,    1242, 1376, 718,  0,    60,   0,    0,    0,    453,
    0,    0,    282,  0,    873,  569,  0,    0,    193,  1395, 0,    0,    0,    0,    318,  0,
    24,   1503, 0,    257,  1174, 77,   1383, 0,    0,    435,  0,    1405, 0,    0,    770,  0,
    0,    133,  1211, 347,  175,  0,    0,    1127, 992,  0,    1023, 818,  0,    0,    0,    620,
    301,  0,    1508, 0,    0,    0,    1020, 0,    1176, 1331, 0,    0,    1115, 303,  0,    0,
    0,    137,  1469, 203,  654,  461,  451,  4,    0,    324,  0,    0,    1436, 0,    548,  327,
    0,    0,    0,    0,    0,    1521, 0,    512,  0,    1397, 1352, 0,    0,    0,    0,    0,
    0,    0,    980,  1199, 1448, 551,  483,  0,    0,    0,    0,    0,    47,   252,  405,  1475,
    0,    610,  0,    1486, 0,    0,    0,    189,  0,    770,  0,    0,    48,   0,    586,  0,
    0,    896,  1082, 0,    0,    0,    784,  0,    0,    735,  211,  905,  0,    0,    0,    0,
    244,  74,   0,    482,  0,    111,  23,   0,    0,    0,    0,    0,    1535, 1584, 0,    0,
    0,    0,    348,  1025, 359,  471,  273,  0,    0,    783,  0,    788,  0,    683,  795,  346,
    91,   0,    1,    1191, 0,    1278, 0,    0,    112,  0,    529,  0,    0,    230,  0,    0,
    420,  600,  0,    397,  0,    55,   1614, 0,    0,    0,    0,    0,    0,    0,    435,  0,
    0,    0,    1004, 0,    0,    1014, 846,  649,  1186, 1560, 0,    0,    0,    0,    0,    452,
    430,  23,   400,  1275, 0,    0,    55,   0,    0,    0,    0,    0,    731,  0,    0,    1380,
    722,  0,    0,    0,    0,    796,  806,  265,  443,  1197, 0,    1310, 480,  1553, 0,    0,
    1126, 925,  0,    0,    332,  0,    0,    268,  0,    0,    0,    0,    1495, 0,    0,    0,
    1466, 115,  911,  1187, 803,  519,  0,    0,    65,   364,  415,  471,  637,  281,  618,  0,
    696,  0,    0,    107,  149,  0,    1011, 435,  0,    530,  0,    582,  1238, 1365, 0,    0,
    863,  952,  0,    650,  0,    0,    142,  857,  148,  1462, 0,    214,  0,    374,  385,  1228,
    0,    1545, 0,    1221, 727,  1524, 1099, 1314, 315,  190,  1624, 0,    0,    676,  0,    1418,
    0,    630,  1573, 838,  377,  0,    360,  0,    1404, 29,   937,  1391, 1593, 660,  1581, 409,
    1086, 6,    742,  0,    1424, 0,    0,    14,   705,  0,    796,  0,    441,  1625, 97,   676,
    0,    0,    0,    868,  0,    0,    0,    1561, 1059, 682,  1033, 408,  0,    386,  1263, 0,
    667,  0,    1153, 0,    783,  0,    0,    1120, 1384, 923,  398,  336,  0,    1192, 0,    0,
    0,    1213, 1046, 1491, 0,    1229, 0,    0,    0,    0,    68,   0,    0,    0,    376,  0,
    25,   1607, 0,    714,  0,    792,  1262, 0,    614,  0,    0,    244,  574,  0,    448,  0,
    0,    0,    179,  0,    951,  0,    1001, 534,  0,    0,    733,  628,  52,   80,   382,  1117,
    1316, 594,  436,  984,  0,    0,    86,   1234, 399,  0,    0,    0,    485,  0,    0,    0,
    1235, 0,    0,    880,  1354, 0,    0,    734,  186,  659,  446,  0,    521,  266,  133,  330,
    0,    1228, 1011, 0,    0,    0,    0,    97,   489,  0,    0,    0,    344,  0,    0,    277,
    607,  0,    0,    761,  383,  0,    0,    1249, 0,    0,    169,  1517, 570,  0,    1122, 1583,
    562,  0,    0,    673,  1167, 0,    828,  0,    0,    0,    1452, 0,    1588, 181,  287,  594,
    720,  16,   1237, 199,  63,   1157, 1574, 777,  721,  0,    217,  1360, 107,  1347, 572,  0,
    76,   452,  246,  1582, 0,    943,  10,   1484, 537,  0,    1084, 1267, 494,  0,    829,  361,
    507,  0,    0,    1065, 1337, 0,    0,    0,    0,    645,  199,  0,    0,    0,    0,    0,
    0,    51,   1031, 0,    257,  0,    0,    1612, 0,    0,    788,  879,  1332, 903,  948,  106,
    0,    0,    946,  1165, 1517, 0,    305,  85,   520,  0,    1442, 597,  0,    0,    0,    118,
    0,    0,    0,    86,   1453, 1511, 455,  0,    253,  1157, 191,  1124, 0,    309,  0,    991,
    0,    672,  0,    3,    232,  842,  0,    468,  0,    0,    116,  127,  867,  0,    73,   771,
    389,  486,  0,    1183, 670,  1447, 358,  954,  784,  89,   771,  125,  1097, 1053, 1490, 125,
    844,  759,  0,    1374, 0,    0,    1591, 663,  0,    0,    986,  0,    68,   214,  1398, 493,
    0,    817,  0,    0,    1002, 865,  769,  0,    437,  0,    333,  1207, 1350, 232,  1077, 477,
    1588, 603,  614,  591,  0,    0,    0,    376,  0,    195,  703,  852,  374,  421,  0,    893,
    0,    1512, 0,    0,    1425, 1518, 126,  521,  0,    1256, 468,  0,    0,    228,  422,  0,
    336,  0,    821,  740,  1222, 534,  369,  329,  239,  1389, 1449, 1541, 1198, 1382, 0,    607,
    567,  0,    0,    856,  669,  283,  160,  371,  494,  0,    805,  1392, 0,    428,  282,  1056,
    0,    1432, 756,  679,  0,    0,    93,   0,    0,    765,  0,    798,  830,  0,    0,    1470,
    0,    567,  0,    669,  1375, 925,  1547, 0,    1597, 0,    0,    0,    654,  0,    616,  0,
    0,    0,    1084, 473,  0,    367,  0,    0,    657,  648,  0,    10,   0,    672,  603,  926,
    1423, 1112, 1223, 0,    1151, 725,  160,  343,  0,    166,  923,  0,    1468, 0,    1499, 102,
    875,  927,  0,    0,    1611, 1050, 0,    0,    1235, 275,  436,  335,  1014, 0,    0,    0,
    941,  1262, 585,  1328, 0,    0,    1254, 0,    0,    1058, 0,    764,  219,  0,    1152, 420,
    177,  0,    1582, 0,    0,    0,    0,    1062, 304,  1101, 146,  1012, 0,    205,  896,  1275,
    846,  150,  0,    478,  180,  0,    160,  132,  634,  0,    0,    527,  29,   319,  0,    1626,
    698,  1332, 0,    368,  1560, 0,    1509, 523,  186,  918,  300,  0,    0,    209,  384,  697,
    321,  0,    99,   0,    1612, 519,  0,    394,  1164, 1407, 1549, 108,  510,  0,    359,  599,
    445,  0,    819,  0,    234,  843,  0,    0,    1441, 999,  0,    0,    0,    810,  0,    381,
    0,    0,    837,  0,    286,  605,  1479, 0,    0,    175,  1025, 0,    1538, 507,  99,   750,
    589,  1311, 0,    1044, 431,  196,  0,    0,    533,  1454, 565,  0,    617,  378,  800,  868,
    0,    260,  0,    0,    0,    1101, 1327, 0,    0,    0,    676,  0,    1597, 85,   1453, 1003,
    858,  266,  0,    517,  698,  1092, 0,    1358, 0,    933,  410,  1065, 315,  774,  0,    0,
    0,    1224, 853,  0,    813,  0,    930,  1588, 605,  1430, 0,    937,  934,  0,    0,    0,
    1334, 720,  0,    0,    0,    0,    280,  0,    856,  1437, 1402, 674,  0,    159,  0,    0,
    0,    539,  0,    1467, 0,    0,    159,  932,  1206, 0,    1390, 0,    0,    408,  1191, 0,
    0,    1515, 89,   0,    657,  1206, 299,  484,  1419, 608,  0,    0,    0,    224,  244,  0,
    287,  0,    573,  0,    241,  29,   709,  673,  0,    1086, 1036, 788,  319,  1000, 0,    0,
    894,  0,    907,  260,  369,  342,  1503, 754,  1297, 0,    0,    0,    0,    0,    42,   904,
    836,  1544, 1519, 234,  63,   0,    0,    1567, 185,  0,    0,    1514, 0,    72,   0,    0,
    552,  0,    373,  428,  0,    724,  1406, 0,    393,  659,  1107, 0,    1448, 540,  1187, 1099,
    1411, 0,    158,  0,    0,    0,    735,  0,    188,  158,  0,    0,    0,    1280, 550,  0,
    0,    0,    0,    1074, 515,  0,    423,  626,  713,  280,  233,  1397, 1306, 1273, 394,  218,
    0,    1329, 268,  217,  407,  0,    278,  0,    0,    1356, 1592, 1591, 326,  414,  1071, 286,
    415,  356,  0,    0,    883,  0,    0,    1191, 399,  0,    889,  927,  0,    0,    1593, 0,
    0,    767,  1152, 0,    652,  1149, 151,  317,  0,    0,    1136, 0,    885,  0,    189,  0,
    413,  329,  0,    0,    0,    195,  1498, 604,  0,    0,    0,    529,  612,  1488, 0,    638,
    913,  391,  761,  267,  1398, 759,  0,    0,    0,    0,    1011, 0,    0,    870,  499,  422,
    0,    1444, 71,   0,    0,    146,  1575, 0,    290,  0,    188,  0,    312,  1553, 565,  0,
    606,  800,  295,  112,  1601, 0,    0,    501,  1517, 51,   0,    0,    0,    1263, 0,    20,
    1553, 840,  689,  999,  0,    624,  338,  0,    0,    0,    0,    0,    1246, 928,  906,  571,
    684,  1194, 389,  532,  1209, 1240, 0,    0,    0,    115,  64,   41,   97,   1493, 683,  1617,
    0,    0,    129,  1517, 1497, 245,  406,  686,  0,    0,    224,  705,  0,    401,  109,  205,
    322,  0,    0,    0,    1557, 1155, 0,    346,  0,    0,    1429, 365,  775,  1223, 453,  0,
    957,  0,    311,  0,    167,  306,  0,    192,  441,  0,    905,  920,  1286, 651,  231,  0,
    492,  0,    1183, 889,  0,    538,  1543, 0,    640,  1462, 1493, 375,  1171, 1494, 0,    927,
    0,    872,  690,  1428, 393,  1523, 562,  839,  1178, 879,  330,  0,    71,   457,  93,   249,
    699,  0,    263,  932,  0,    280,  778,  651,  0,    1424, 549,  215,  921,  0,    223,  0,
    0,    364,  97,   664,  814,  0,    550,  94,   1148, 0,    0,    80,   0,    0,    688,  757,
    0,    619,  0,    215,  358,  1109, 864,  139,  397,  0,    440,  0,    1071, 0,    236,  0,
    0,    0,    287,  820,  375,  135,  0,    77,   565,  688,  200,  0,    1396, 0,    216,  96,
    138,  0,    464,  564,  0,    432,  0,    1057, 1005, 0,    173,  1221, 734,  604,  332,  0,
    0,    0,    1026, 0,    0,    688,  0,    117,  1523, 50,   0,    1203, 0,    1281, 511,  522,
    0,    768,  694,  600,  0,    614,  681,  247,  1576, 0,    0,    0,    823,  0,    91,   0,
    0,    1455, 481,  191,  0,    405,  0,    623,  0,    0,    1069, 0,    947,  857,  1231, 557,
    0,    243,  0,    0,    264,  984,  0,    1130, 0,    0,    1287, 62,   0,    0,    141,  828,
    0,    0,    0,    1496, 163,  0,    0,    0,    794,  180,  184,  26,   0,    0,    1558, 379,
    79,   943,  0,    1357, 45,   1195, 172,  0,    830,  227,  224,  0};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1628;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 37)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1628;
}

constexpr int unmangledkT1[] = {212, 221, 236, 21,  203, 96, 138, 243, 5,   95, 201, 61, 161,
                                184, 165, 201, 156, 250, 29, 267, 256, 250, 82, 64,  75, 195};
constexpr int unmangledkT2[] = {45, 131, 37, 117, 271, 86,  120, 274, 58, 113, 10, 99,  268,
                                54, 235, 85, 143, 106, 115, 233, 87,  82, 6,   91, 127, 131};
constexpr int unmangledkG[]  = {
    0,   0,   0,   0,   0,   0,  0,   0,   0,   71,  0,   0,   114, 0,   0,   0,   30,  20,  0,
    0,   0,   75,  0,   0,   0,  0,   0,   60,  0,   0,   0,   0,   0,   0,   24,  0,   32,  0,
    0,   25,  112, 216, 0,   0,  156, 97,  53,  125, 0,   0,   0,   0,   0,   113, 0,   88,  0,
    0,   104, 0,   0,   0,   60, 0,   40,  79,  0,   0,   223, 25,  0,   250, 0,   209, 252, 51,
    20,  0,   84,  0,   0,   72, 0,   4,   270, 0,   0,   159, 0,   9,   0,   0,   66,  109, 246,
    5,   40,  243, 60,  71,  0,  0,   0,   126, 0,   62,  0,   214, 142, 0,   266, 96,  150, 0,
    0,   0,   0,   0,   0,   99, 63,  0,   108, 0,   67,  0,   0,   99,  0,   238, 231, 29,  145,
    0,   38,  0,   274, 0,   66, 0,   0,   42,  0,   74,  57,  37,  80,  45,  0,   0,   151, 0,
    52,  54,  0,   35,  0,   0,  0,   0,   0,   0,   47,  277, 0,   100, 0,   111, 20,  23,  48,
    1,   0,   70,  0,   0,   80, 76,  44,  0,   111, 56,  0,   215, 148, 156, 237, 276, 277, 231,
    0,   99,  250, 100, 14,  0,  116, 0,   21,  114, 60,  0,   230, 209, 266, 33,  241, 69,  55,
    13,  7,   0,   0,   14,  0,  100, 0,   0,   63,  0,   99,  0,   127, 40,  0,   186, 0,   28,
    234, 10,  9,   135, 36,  76, 0,   117, 0,   273, 7,   0,   61,  97,  0,   45,  0,   2,   8,
    274, 0,   0,   29,  8,   46, 0,   4,   259, 278, 130, 0,   50,  36,  0,   1,   0,   77,  70,
    0,   109, 59,  107, 104, 0,  0,   105, 79,  0,   261, 0,   30};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 279;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 26)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 279;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
