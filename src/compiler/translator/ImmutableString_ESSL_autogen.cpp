// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols_essl_only.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {1732, 582,  854,  1145, 807,  804,  386,  1427, 1566, 1253,
                              1083, 1694, 1655, 38,   1307, 39,   783,  386,  394,  838,
                              88,   881,  1093, 774,  487,  1816, 1133, 495,  155,  584,
                              836,  5,    25,   1167, 1427, 735,  704};
constexpr int mangledkT2[] = {1394, 945,  1679, 525,  1862, 1853, 737,  297,  240,  132,
                              81,   1671, 700,  899,  839,  1543, 772,  687,  1306, 738,
                              1266, 1224, 551,  1224, 1063, 1119, 1037, 1259, 598,  393,
                              1643, 1524, 991,  187,  697,  1170, 1604};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1338, 0,    0,
    0,    0,    0,    0,    0,    151,  0,    0,    0,    0,    0,    0,    0,    0,    1505, 0,
    0,    0,    0,    0,    1269, 0,    0,    0,    0,    1664, 0,    0,    0,    0,    0,    1328,
    0,    0,    0,    0,    842,  0,    0,    0,    0,    0,    0,    0,    0,    0,    613,  0,
    0,    0,    0,    753,  1203, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1621, 489,  0,    0,    0,    0,    684,  0,
    0,    0,    0,    0,    0,    0,    243,  0,    0,    0,    1465, 0,    0,    307,  0,    506,
    0,    0,    0,    518,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    196,  0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    501,  444,  0,    1403, 0,    0,    463,  34,   0,    0,    0,
    0,    1414, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    738,  0,    0,    631,
    0,    0,    88,   0,    0,    677,  0,    0,    266,  1158, 0,    1326, 0,    0,    0,    0,
    0,    0,    0,    1321, 1878, 0,    0,    0,    564,  641,  0,    0,    0,    0,    0,    828,
    1742, 0,    0,    0,    0,    695,  0,    0,    0,    0,    0,    0,    0,    0,    0,    680,
    0,    0,    0,    138,  1667, 787,  0,    651,  0,    0,    0,    153,  0,    0,    1426, 0,
    0,    0,    180,  0,    0,    0,    0,    239,  0,    0,    0,    0,    1726, 0,    0,    0,
    0,    70,   155,  0,    441,  81,   485,  0,    939,  0,    0,    0,    0,    0,    0,    298,
    0,    0,    0,    205,  413,  0,    0,    0,    341,  0,    0,    0,    0,    0,    0,    0,
    1297, 0,    1625, 0,    0,    419,  0,    727,  0,    0,    0,    0,    53,   572,  0,    0,
    657,  465,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    468,  0,    0,
    0,    0,    0,    1051, 0,    879,  268,  952,  0,    0,    0,    0,    252,  327,  133,  58,
    319,  381,  0,    0,    0,    732,  1627, 0,    0,    0,    0,    883,  0,    0,    1355, 0,
    1396, 0,    0,    0,    0,    0,    0,    231,  1097, 877,  422,  1311, 1063, 0,    1510, 1525,
    0,    451,  0,    0,    613,  0,    0,    0,    604,  457,  0,    397,  617,  807,  0,    355,
    689,  65,   1445, 0,    471,  427,  406,  0,    0,    0,    0,    0,    1349, 0,    0,    0,
    1565, 894,  1812, 914,  0,    0,    1759, 0,    0,    1047, 0,    0,    0,    0,    0,    0,
    0,    1836, 21,   0,    0,    0,    0,    977,  1260, 0,    1311, 0,    1059, 1659, 0,    0,
    0,    458,  0,    276,  0,    369,  0,    0,    0,    0,    0,    4,    650,  281,  0,    635,
    0,    311,  253,  1558, 0,    1812, 0,    0,    1814, 1104, 140,  0,    253,  335,  0,    0,
    0,    1108, 0,    263,  173,  0,    0,    0,    1164, 0,    153,  505,  0,    0,    158,  0,
    0,    813,  0,    0,    0,    164,  0,    0,    0,    0,    0,    0,    971,  152,  0,    808,
    626,  209,  0,    497,  0,    510,  1680, 0,    876,  223,  0,    819,  0,    1847, 1109, 0,
    0,    0,    0,    84,   1666, 181,  190,  465,  0,    696,  187,  19,   0,    0,    681,  413,
    0,    903,  0,    687,  253,  0,    0,    0,    307,  1352, 0,    0,    348,  0,    0,    1504,
    0,    1478, 0,    0,    0,    0,    1709, 0,    1520, 29,   156,  0,    0,    1852, 1498, 0,
    0,    0,    0,    0,    0,    694,  1898, 1488, 823,  879,  0,    1031, 291,  893,  1205, 0,
    0,    1636, 0,    400,  0,    0,    86,   1208, 91,   1604, 0,    0,    0,    0,    1048, 682,
    225,  505,  18,   0,    735,  461,  0,    0,    721,  0,    0,    0,    0,    1820, 0,    557,
    378,  0,    168,  0,    1726, 495,  0,    0,    0,    0,    0,    0,    0,    0,    1522, 0,
    0,    428,  0,    0,    165,  1782, 0,    1415, 1849, 0,    0,    711,  0,    0,    0,    0,
    0,    1687, 0,    0,    3,    1618, 1838, 0,    0,    1803, 739,  0,    0,    1793, 794,  782,
    0,    0,    841,  0,    0,    712,  0,    0,    358,  644,  0,    0,    1586, 406,  612,  1205,
    1075, 0,    128,  0,    1407, 1762, 0,    1543, 307,  0,    0,    0,    0,    0,    0,    869,
    0,    0,    947,  0,    764,  1757, 0,    596,  0,    0,    1507, 0,    101,  0,    264,  1055,
    0,    0,    1572, 375,  0,    1756, 416,  804,  0,    0,    0,    0,    1870, 0,    391,  0,
    0,    144,  1586, 1755, 787,  1865, 1452, 0,    1466, 0,    282,  0,    1299, 175,  0,    0,
    1376, 0,    0,    0,    1135, 0,    0,    0,    160,  297,  483,  1393, 1201, 0,    1677, 1481,
    170,  398,  689,  1152, 0,    671,  0,    0,    0,    860,  1303, 0,    0,    0,    890,  192,
    0,    0,    0,    0,    0,    0,    1153, 1106, 627,  0,    0,    462,  0,    1602, 0,    0,
    0,    0,    66,   1361, 93,   0,    0,    406,  0,    0,    0,    53,   0,    0,    0,    0,
    1584, 1814, 0,    797,  1917, 1616, 161,  1268, 871,  0,    0,    1770, 105,  1087, 142,  0,
    0,    0,    1282, 0,    0,    0,    576,  314,  1858, 1059, 0,    0,    0,    0,    0,    0,
    177,  1541, 0,    367,  725,  331,  0,    0,    0,    309,  0,    0,    640,  1254, 0,    0,
    0,    0,    394,  434,  0,    245,  565,  0,    1785, 0,    1590, 1715, 1781, 437,  0,    0,
    0,    659,  0,    0,    674,  2,    1882, 0,    0,    531,  0,    818,  0,    884,  0,    0,
    0,    91,   336,  1360, 0,    108,  0,    718,  755,  1119, 0,    0,    0,    0,    0,    1535,
    0,    0,    0,    0,    1776, 122,  229,  0,    359,  661,  0,    0,    0,    902,  1227, 114,
    599,  342,  0,    0,    453,  3,    231,  1043, 648,  1833, 0,    1534, 861,  447,  1306, 110,
    0,    291,  0,    664,  0,    139,  65,   1538, 1457, 0,    0,    334,  0,    0,    0,    0,
    214,  0,    0,    1794, 179,  0,    1916, 0,    0,    506,  121,  0,    490,  354,  0,    1744,
    0,    1774, 0,    0,    0,    0,    0,    452,  385,  214,  349,  66,   447,  0,    367,  747,
    846,  0,    0,    0,    654,  0,    0,    1861, 11,   0,    546,  382,  0,    0,    173,  27,
    0,    77,   1287, 0,    1081, 0,    710,  826,  0,    326,  0,    102,  0,    0,    236,  258,
    0,    0,    0,    187,  0,    0,    1361, 660,  0,    430,  1107, 189,  0,    0,    0,    483,
    921,  0,    930,  0,    0,    519,  0,    0,    0,    0,    0,    535,  25,   0,    727,  1771,
    1046, 1378, 126,  0,    0,    0,    1606, 613,  364,  1588, 667,  0,    17,   0,    777,  775,
    614,  906,  0,    0,    974,  0,    927,  85,   0,    0,    0,    372,  1915, 578,  0,    382,
    538,  0,    1613, 367,  409,  839,  1340, 0,    454,  0,    0,    0,    304,  1041, 1818, 100,
    138,  193,  0,    0,    0,    551,  0,    809,  1724, 985,  0,    1539, 286,  0,    868,  0,
    466,  0,    1637, 484,  1472, 0,    0,    0,    1713, 0,    0,    443,  590,  830,  608,  1377,
    511,  595,  878,  0,    87,   0,    0,    385,  0,    745,  1775, 1357, 289,  0,    685,  208,
    1215, 0,    0,    147,  277,  267,  0,    96,   549,  0,    24,   1170, 0,    9,    0,    496,
    0,    0,    0,    0,    0,    0,    1373, 704,  0,    882,  0,    488,  699,  0,    550,  292,
    945,  0,    414,  0,    0,    229,  0,    397,  135,  1766, 1753, 471,  158,  597,  1560, 0,
    517,  344,  56,   917,  619,  1520, 0,    403,  69,   825,  0,    1055, 361,  1737, 0,    1386,
    127,  130,  856,  0,    0,    0,    412,  0,    0,    85,   0,    353,  497,  594,  0,    0,
    850,  1876, 0,    99,   0,    1667, 0,    0,    966,  0,    421,  740,  0,    307,  479,  503,
    381,  417,  0,    130,  0,    141,  696,  0,    0,    99,   0,    0,    0,    0,    0,    271,
    0,    0,    0,    244,  0,    0,    0,    719,  724,  330,  1878, 350,  0,    0,    176,  0,
    483,  0,    645,  1094, 0,    240,  792,  23,   496,  0,    0,    113,  20,   0,    1283, 0,
    0,    900,  679,  0,    0,    0,    0,    0,    0,    265,  713,  0,    0,    0,    886,  204,
    889,  0,    848,  0,    227,  1690, 0,    421,  0,    184,  0,    0,    1291, 379,  446,  0,
    639,  726,  1779, 698,  0,    0,    0,    0,    1767, 0,    112,  282,  0,    154,  0,    532,
    771,  151,  260,  642,  0,    0,    0,    372,  0,    592,  626,  0,    0,    0,    734,  0,
    0,    113,  1452, 453,  873,  0,    25,   278,  1584, 39,   0,    0,    72,   0,    0,    665,
    895,  258,  0,    0,    644,  1873, 0,    1351, 0,    279,  0,    0,    0,    293,  586,  167,
    298,  19,   171,  837,  0,    0,    0,    412,  0,    0,    121,  1427, 110,  605,  0,    0,
    1367, 619,  0,    864,  1885, 1762, 0,    0,    0,    801,  1079, 0,    0,    0,    0,    0,
    1158, 246,  35,   0,    0,    802,  254,  714,  0,    1749, 391,  716,  0,    143,  897,  0,
    524,  0,    0,    0,    0,    1454, 1774, 423,  0,    1780, 0,    0,    22,   833,  0,    1488,
    82,   774,  0,    0,    1631, 216,  0,    275,  77,   0,    1921, 291,  189,  0,    1099, 455,
    0,    337,  405,  390,  1907, 0,    0,    789,  178,  328,  0,    55,   0,    0,    795,  691,
    0,    0,    1797, 0,    0,    0,    0,    0,    0,    0,    423,  0,    1776, 0,    0,    0,
    369,  1103, 1490, 0,    0,    0,    94,   1079, 1413, 300,  1459, 0,    264,  60,   0,    616,
    0,    386,  451,  1817, 1309, 0,    327,  1341, 0,    122,  433,  545,  215,  0,    0,    926,
    0,    600,  601,  0,    479,  0,    0,    573,  0,    17,   157,  0,    42,   0,    1689, 472,
    384,  560,  604,  0,    658,  737,  0,    464,  0,    1257, 0,    554,  1134, 0,    0,    0,
    699,  508,  162,  1692, 1705, 1743, 399,  347,  0,    297,  438,  0,    1649, 714,  1826, 0,
    0,    73,   383,  733,  767,  0,    7,    717,  416,  338,  0,    0,    0,    424,  615,  0,
    0,    0,    110,  757,  0,    0,    0,    773,  136,  0,    0,    4,    772,  0,    848,  0,
    582,  0,    0,    984,  0,    731,  370,  1827, 700,  1765, 146,  0,    672,  0,    0,    884,
    0,    17,   0,    333,  196,  0,    117,  552,  0,    354,  0,    242,  1613, 328,  0,    0,
    0,    611,  1557, 0,    0,    0,    0,    392,  0,    409,  1910, 269,  0,    0,    0,    0,
    331,  0,    0,    0,    513,  0,    0,    674,  0,    0,    1750, 0,    0,    0,    0,    0,
    121,  452,  737,  225,  0,    0,    458,  0,    0,    299,  448,  920,  504,  0,    0,    0,
    1839, 369,  0,    76,   880,  42,   1280, 0,    374,  454,  294,  723,  343,  305,  503,  203,
    392,  0,    1518, 0,    0,    804,  1611, 0,    0,    0,    90,   1680, 1286, 1653, 0,    1751,
    0,    605,  1664, 0,    806,  358,  609,  0,    0,    0,    0,    0,    627,  343,  0,    1760,
    648,  544,  294,  1862, 0,    258,  0,    90,   795,  0,    11,   0,    1703, 129,  0,    647,
    653,  0,    290,  0,    0,    0,    0,    0,    0,    395,  0,    368,  0,    728,  693,  9,
    172,  0,    53,   1254, 726,  0,    758,  567,  0,    0,    1639, 0,    0,    0,    330,  19,
    728,  572,  196,  0,    763,  776,  1739, 0,    0,    0,    0,    644,  0,    570,  0,    983,
    1385, 1031, 469,  754,  0,    469,  0,    1762, 515,  71,   0,    0,    0,    0,    682,  844,
    835,  888,  0,    0,    1336, 0,    0,    689,  1151, 0,    130,  0,    10,   0,    785,  0,
    0,    0,    0,    918,  760,  200,  1271, 1915, 1450, 450,  0,    1772, 742,  0,    492,  0,
    568,  1175, 0,    846,  0,    0,    393,  489,  134,  0,    1641, 0,    821,  0,    1595, 1496,
    672,  124,  0,    107,  0,    0,    0,    746,  1629, 0,    0,    220,  0,    1459, 1046, 0,
    0,    285,  564,  0,    35,   217,  1369, 407,  12,   0,    0,    781,  488,  0,    1701, 0,
    0,    1272, 0,    0,    0,    0,    0,    219,  52,   1047, 56,   311,  482,  269,  113,  532,
    749,  279,  284,  47,   294,  0,    0,    0,    527,  579,  51,   436,  431,  0,    892,  493,
    0,    851,  1651, 291,  823};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1925;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 37)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1925;
}

constexpr int unmangledkT1[] = {173, 211, 7,  130, 197, 14,  144, 42,  120, 72,  136, 166, 209,
                                148, 178, 79, 228, 177, 163, 85,  169, 149, 191, 48,  159, 136};
constexpr int unmangledkT2[] = {99,  40,  224, 29,  145, 6,   151, 237, 44,  189, 196, 109, 138,
                                218, 108, 83,  164, 23,  210, 223, 176, 216, 181, 112, 192, 88};
constexpr int unmangledkG[]  = {
    0,   0,   124, 111, 0,   0,   0,   143, 18,  0,   0,   0,   0,   0,   0,   98,  0,   0,
    44,  0,   62,  56,  240, 216, 224, 31,  0,   48,  227, 0,   0,   0,   161, 0,   0,   130,
    0,   0,   0,   62,  56,  145, 0,   93,  0,   82,  0,   20,  83,  137, 2,   178, 244, 98,
    0,   0,   0,   149, 0,   0,   65,  93,  0,   80,  21,  208, 216, 176, 116, 105, 0,   91,
    5,   0,   133, 174, 208, 43,  229, 37,  0,   244, 49,  60,  58,  0,   84,  0,   84,  0,
    0,   39,  5,   129, 0,   0,   0,   127, 0,   90,  46,  101, 0,   78,  62,  97,  155, 16,
    16,  229, 33,  34,  0,   4,   101, 127, 143, 0,   39,  0,   84,  139, 0,   150, 0,   0,
    232, 103, 0,   0,   0,   0,   148, 0,   0,   0,   239, 235, 108, 144, 70,  77,  0,   0,
    0,   0,   0,   110, 82,  0,   114, 14,  62,  0,   0,   160, 0,   225, 0,   0,   0,   66,
    75,  0,   96,  0,   0,   0,   128, 0,   0,   66,  215, 18,  0,   0,   112, 234, 0,   39,
    0,   40,  229, 0,   11,  125, 118, 108, 42,  161, 52,  0,   21,  148, 32,  0,   0,   70,
    0,   85,  140, 0,   0,   39,  0,   0,   0,   3,   209, 0,   29,  12,  140, 158, 0,   0,
    0,   128, 231, 22,  18,  47,  223, 208, 240, 0,   15,  83,  105, 155, 14,  145, 0,   13,
    26,  64,  205, 0,   140, 233, 247, 135, 134, 148, 0,   0,   36,  71,  0};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 249;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 26)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 249;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
