// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// SymbolTable_autogen.cpp:
//   Compile-time initialized built-ins.

#include "compiler/translator/SymbolTable.h"

#include "angle_gl.h"
#include "compiler/translator/BuiltIn_autogen.h"

namespace sh
{

void TSymbolTable::insertStaticBuiltInVariables(sh::GLenum shaderType,
                                                ShShaderSpec spec,
                                                const ShBuiltInResources &resources)
{
    if (shaderType == GL_FRAGMENT_SHADER)
    {
        insertBuiltIn(COMMON_BUILTINS, BuiltInVariable::gl_FragCoord());
        insertBuiltIn(COMMON_BUILTINS, BuiltInVariable::gl_FrontFacing());
        insertBuiltIn(COMMON_BUILTINS, BuiltInVariable::gl_PointCoord());
        insertBuiltIn(ESSL1_BUILTINS, BuiltInVariable::gl_FragColor());
        insertBuiltIn(ESSL3_BUILTINS, BuiltInVariable::gl_FragDepth());
        if (resources.EXT_blend_func_extended)
        {
            insertBuiltIn(ESSL1_BUILTINS, BuiltInVariable::gl_SecondaryFragColorEXT());
        }
        if (resources.NV_shader_framebuffer_fetch)
        {
            insertBuiltIn(ESSL1_BUILTINS, BuiltInVariable::gl_LastFragColor());
        }
        if (!resources.EXT_shader_framebuffer_fetch && !resources.NV_shader_framebuffer_fetch &&
            resources.ARM_shader_framebuffer_fetch)
        {
            insertBuiltIn(ESSL1_BUILTINS, BuiltInVariable::gl_LastFragColorARM());
        }
        if (resources.EXT_geometry_shader)
        {
            insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_PrimitiveID());
            insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_Layer());
        }
    }
    insertBuiltIn(COMMON_BUILTINS, BuiltInVariable::gl_Position());
    insertBuiltIn(COMMON_BUILTINS, BuiltInVariable::gl_PointSize());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInVariable::gl_InstanceID());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInVariable::gl_VertexID());
    insertBuiltIn(GLSL_BUILTINS, BuiltInVariable::gl_ViewportIndex());
    insertBuiltIn(GLSL_BUILTINS, BuiltInVariable::gl_LayerVS());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_NumWorkGroups());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_WorkGroupSize());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_WorkGroupID());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_LocalInvocationID());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_GlobalInvocationID());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_LocalInvocationIndex());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_PrimitiveIDIn());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_InvocationID());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_PrimitiveIDGS());
    insertBuiltIn(ESSL3_1_BUILTINS, BuiltInVariable::gl_LayerGS());
    if (resources.OVR_multiview && shaderType != GL_COMPUTE_SHADER)
    {
        insertBuiltIn(ESSL3_BUILTINS, BuiltInVariable::gl_ViewID_OVR());
        insertBuiltIn(ESSL1_BUILTINS, BuiltInVariable::gl_ViewID_OVRESSL1());
    }
}

void TSymbolTable::insertStaticBuiltInFunctions(sh::GLenum shaderType,
                                                ShShaderSpec spec,
                                                const ShBuiltInResources &resources)
{
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::radians_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::radians_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::radians_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::radians_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::degrees_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::degrees_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::degrees_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::degrees_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::sin_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::sin_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::sin_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::sin_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::cos_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::cos_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::cos_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::cos_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::tan_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::tan_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::tan_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::tan_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::asin_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::asin_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::asin_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::asin_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::acos_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::acos_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::acos_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::acos_vf4_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::atan_f1_f1_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::atan_vf2_vf2_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::atan_vf3_vf3_());
    insertBuiltIn(COMMON_BUILTINS, BuiltInFunction::atan_vf4_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::sinh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::sinh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::sinh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::sinh_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::cosh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::cosh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::cosh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::cosh_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::tanh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::tanh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::tanh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::tanh_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::asinh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::asinh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::asinh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::asinh_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::acosh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::acosh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::acosh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::acosh_vf4_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::atanh_f1_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::atanh_vf2_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::atanh_vf3_());
    insertBuiltIn(ESSL3_BUILTINS, BuiltInFunction::atanh_vf4_());
}

}  // namespace sh
