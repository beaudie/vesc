[
   [
      [
         "Mod",
         "Float1",
         "Float1"
      ],
      [
         "float webgl_mod_emu(float x, float y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float2",
         "Float2"
      ],
      [
         "float2 webgl_mod_emu(float2 x, float2 y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float2",
         "Float1"
      ],
      [
         "float2 webgl_mod_emu(float2 x, float y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float3",
         "Float3"
      ],
      [
         "float3 webgl_mod_emu(float3 x, float3 y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float3",
         "Float1"
      ],
      [
         "float3 webgl_mod_emu(float3 x, float y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float4",
         "Float4"
      ],
      [
         "float4 webgl_mod_emu(float4 x, float4 y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Mod",
         "Float4",
         "Float1"
      ],
      [
         "float4 webgl_mod_emu(float4 x, float y)",
         "{",
         "    return x - y * floor(x / y);",
         "}",
         ""
      ]
   ],
   [
      [
         "Frexp",
         "Float1",
         "Int1"
      ],
      [
         "float webgl_frexp_emu(float x, out int exp)",
         "{",
         "    float fexp;",
         "    float mantissa = frexp(abs(x), fexp) * sign(x);",
         "    exp = int(fexp);",
         "    return mantissa;",
         "}",
         ""
      ]
   ],
   [
      [
         "Frexp",
         "Float2",
         "Int2"
      ],
      [
         "float2 webgl_frexp_emu(float2 x, out int2 exp)",
         "{",
         "    float2 fexp;",
         "    float2 mantissa = frexp(abs(x), fexp) * sign(x);",
         "    exp = int2(fexp);",
         "    return mantissa;",
         "}",
         ""
      ]
   ],
   [
      [
         "Frexp",
         "Float3",
         "Int3"
      ],
      [
         "float3 webgl_frexp_emu(float3 x, out int3 exp)",
         "{",
         "    float3 fexp;",
         "    float3 mantissa = frexp(abs(x), fexp) * sign(x);",
         "    exp = int3(fexp);",
         "    return mantissa;",
         "}",
         ""
      ]
   ],
   [
      [
         "Frexp",
         "Float4",
         "Int4"
      ],
      [
         "float4 webgl_frexp_emu(float4 x, out int4 exp)",
         "{",
         "    float4 fexp;",
         "    float4 mantissa = frexp(abs(x), fexp) * sign(x);",
         "    exp = int4(fexp);",
         "    return mantissa;",
         "}",
         ""
      ]
   ],
   [
      [
         "Ldexp",
         "Float1",
         "Int1"
      ],
      [
         "float webgl_ldexp_emu(float x, int exp)",
         "{",
         "    return ldexp(x, float(exp));",
         "}",
         ""
      ]
   ],
   [
      [
         "Ldexp",
         "Float2",
         "Int2"
      ],
      [
         "float2 webgl_ldexp_emu(float2 x, int2 exp)",
         "{",
         "    return ldexp(x, float2(exp));",
         "}",
         ""
      ]
   ],
   [
      [
         "Ldexp",
         "Float3",
         "Int3"
      ],
      [
         "float3 webgl_ldexp_emu(float3 x, int3 exp)",
         "{",
         "    return ldexp(x, float3(exp));",
         "}",
         ""
      ]
   ],
   [
      [
         "Ldexp",
         "Float4",
         "Int4"
      ],
      [
         "float4 webgl_ldexp_emu(float4 x, int4 exp)",
         "{",
         "    return ldexp(x, float4(exp));",
         "}",
         ""
      ]
   ],
   [
      [
         "FaceForward",
         "Float1",
         "Float1",
         "Float1"
      ],
      [
         "float webgl_faceforward_emu(float N, float I, float Nref)",
         "{",
         "    if(dot(Nref, I) >= 0)",
         "    {",
         "        return -N;",
         "    }",
         "    else",
         "    {",
         "        return N;",
         "    }",
         "}",
         ""
      ]
   ],
   [
      [
         "FaceForward",
         "Float2",
         "Float2",
         "Float2"
      ],
      [
         "float2 webgl_faceforward_emu(float2 N, float2 I, float2 Nref)",
         "{",
         "    if(dot(Nref, I) >= 0)",
         "    {",
         "        return -N;",
         "    }",
         "    else",
         "    {",
         "        return N;",
         "    }",
         "}",
         ""
      ]
   ],
   [
      [
         "FaceForward",
         "Float3",
         "Float3",
         "Float3"
      ],
      [
         "float3 webgl_faceforward_emu(float3 N, float3 I, float3 Nref)",
         "{",
         "    if(dot(Nref, I) >= 0)",
         "    {",
         "        return -N;",
         "    }",
         "    else",
         "    {",
         "        return N;",
         "    }",
         "}",
         ""
      ]
   ],
   [
      [
         "FaceForward",
         "Float4",
         "Float4",
         "Float4"
      ],
      [
         "float4 webgl_faceforward_emu(float4 N, float4 I, float4 Nref)",
         "{",
         "    if(dot(Nref, I) >= 0)",
         "    {",
         "        return -N;",
         "    }",
         "    else",
         "    {",
         "        return N;",
         "    }",
         "}",
         ""
      ]
   ],
   [
      [
         "Atan",
         "Float1",
         "Float1"
      ],
      [
         "float webgl_atan_emu(float y, float x)",
         "{",
         "    if(x == 0 && y == 0) x = 1;",
         "    return atan2(y, x);",
         "}"
      ]
   ],
   [
      [
         "Atan",
         "Float2",
         "Float2"
      ],
      [
         "float2 webgl_atan_emu(float2 y, float2 x)",
         "{",
         "    if(x[0] == 0 && y[0] == 0) x[0] = 1;",
         "    if(x[1] == 0 && y[1] == 0) x[1] = 1;",
         "    return float2(atan2(y[0], x[0]), atan2(y[1], x[1]));",
         "}"
      ]
   ],
   [
      [
         "Atan",
         "Float3",
         "Float3"
      ],
      [
         "float3 webgl_atan_emu(float3 y, float3 x)",
         "{",
         "    if(x[0] == 0 && y[0] == 0) x[0] = 1;",
         "    if(x[1] == 0 && y[1] == 0) x[1] = 1;",
         "    if(x[2] == 0 && y[2] == 0) x[2] = 1;",
         "    return float3(atan2(y[0], x[0]), atan2(y[1], x[1]), atan2(y[2], x[2]));",
         "}"
      ]
   ],
   [
      [
         "Atan",
         "Float4",
         "Float4"
      ],
      [
         "float4 webgl_atan_emu(float4 y, float4 x)",
         "{",
         "    if(x[0] == 0 && y[0] == 0) x[0] = 1;",
         "    if(x[1] == 0 && y[1] == 0) x[1] = 1;",
         "    if(x[2] == 0 && y[2] == 0) x[2] = 1;",
         "    if(x[3] == 0 && y[3] == 0) x[3] = 1;",
         "    return float4(atan2(y[0], x[0]), atan2(y[1], x[1]), atan2(y[2], ",
         "x[2]), atan2(y[3], x[3]));",
         "}"
      ]
   ],
   [
      [
         "Asinh",
         "Float1"
      ],
      [
         "float webgl_asinh_emu(in float x) {",
         "    return log(x + sqrt(pow(x, 2.0) + 1.0));",
         "}"
      ]
   ],
   [
      [
         "Asinh",
         "Float2"
      ],
      [
         "float2 webgl_asinh_emu(in float2 x) {",
         "    return log(x + sqrt(pow(x, 2.0) + 1.0));",
         "}"
      ]
   ],
   [
      [
         "Asinh",
         "Float3"
      ],
      [
         "float3 webgl_asinh_emu(in float3 x) {",
         "    return log(x + sqrt(pow(x, 2.0) + 1.0));",
         "}"
      ]
   ],
   [
      [
         "Asinh",
         "Float4"
      ],
      [
         "float4 webgl_asinh_emu(in float4 x) {",
         "    return log(x + sqrt(pow(x, 2.0) + 1.0));",
         "}"
      ]
   ],
   [
      [
         "Acosh",
         "Float1"
      ],
      [
         "float webgl_acosh_emu(in float x) {",
         "    return log(x + sqrt(x + 1.0) * sqrt(x - 1.0));",
         "}"
      ]
   ],
   [
      [
         "Acosh",
         "Float2"
      ],
      [
         "float2 webgl_acosh_emu(in float2 x) {",
         "    return log(x + sqrt(x + 1.0) * sqrt(x - 1.0));",
         "}"
      ]
   ],
   [
      [
         "Acosh",
         "Float3"
      ],
      [
         "float3 webgl_acosh_emu(in float3 x) {",
         "    return log(x + sqrt(x + 1.0) * sqrt(x - 1.0));",
         "}"
      ]
   ],
   [
      [
         "Acosh",
         "Float4"
      ],
      [
         "float4 webgl_acosh_emu(in float4 x) {",
         "    return log(x + sqrt(x + 1.0) * sqrt(x - 1.0));",
         "}"
      ]
   ],
   [
      [
         "Atanh",
         "Float1"
      ],
      [
         "float webgl_atanh_emu(in float x) {",
         "    return 0.5 * log((1.0 + x) / (1.0 - x));",
         "}"
      ]
   ],
   [
      [
         "Atanh",
         "Float2"
      ],
      [
         "float2 webgl_atanh_emu(in float2 x) {",
         "    return 0.5 * log((1.0 + x) / (1.0 - x));",
         "}"
      ]
   ],
   [
      [
         "Atanh",
         "Float3"
      ],
      [
         "float3 webgl_atanh_emu(in float3 x) {",
         "    return 0.5 * log((1.0 + x) / (1.0 - x));",
         "}"
      ]
   ],
   [
      [
         "Atanh",
         "Float4"
      ],
      [
         "float4 webgl_atanh_emu(in float4 x) {",
         "    return 0.5 * log((1.0 + x) / (1.0 - x));",
         "}"
      ]
   ],
   [
      [
         "RoundEven",
         "Float1"
      ],
      [
         "float webgl_roundEven_emu(in float x) {",
         "    return (frac(x) == 0.5 && trunc(x) % 2.0 == 0.0) ? trunc(x) : round(x);",
         "}"
      ]
   ],
   [
      [
         "RoundEven",
         "Float2"
      ],
      [
         "float2 webgl_roundEven_emu(in float2 x) {",
         "    float2 v;",
         "    v[0] = (frac(x[0]) == 0.5 && trunc(x[0]) % 2.0 == 0.0) ? trunc(x[0]) : round(x[0]);",
         "    v[1] = (frac(x[1]) == 0.5 && trunc(x[1]) % 2.0 == 0.0) ? trunc(x[1]) : round(x[1]);",
         "    return v;",
         "}"
      ]
   ],
   [
      [
         "RoundEven",
         "Float3"
      ],
      [
         "float3 webgl_roundEven_emu(in float3 x) {",
         "    float3 v;",
         "    v[0] = (frac(x[0]) == 0.5 && trunc(x[0]) % 2.0 == 0.0) ? trunc(x[0]) : round(x[0]);",
         "    v[1] = (frac(x[1]) == 0.5 && trunc(x[1]) % 2.0 == 0.0) ? trunc(x[1]) : round(x[1]);",
         "    v[2] = (frac(x[2]) == 0.5 && trunc(x[2]) % 2.0 == 0.0) ? trunc(x[2]) : round(x[2]);",
         "    return v;",
         "}"
      ]
   ],
   [
      [
         "RoundEven",
         "Float4"
      ],
      [
         "float4 webgl_roundEven_emu(in float4 x) {",
         "    float4 v;",
         "    v[0] = (frac(x[0]) == 0.5 && trunc(x[0]) % 2.0 == 0.0) ? trunc(x[0]) : round(x[0]);",
         "    v[1] = (frac(x[1]) == 0.5 && trunc(x[1]) % 2.0 == 0.0) ? trunc(x[1]) : round(x[1]);",
         "    v[2] = (frac(x[2]) == 0.5 && trunc(x[2]) % 2.0 == 0.0) ? trunc(x[2]) : round(x[2]);",
         "    v[3] = (frac(x[3]) == 0.5 && trunc(x[3]) % 2.0 == 0.0) ? trunc(x[3]) : round(x[3]);",
         "    return v;",
         "}"
      ]
   ],
   [
      [
         "PackSnorm2x16",
         "Float2"
      ],
      [
         "int webgl_toSnorm16(in float x) {",
         "    return int(round(clamp(x, -1.0, 1.0) * 32767.0));",
         "}",
         "",
         "uint webgl_packSnorm2x16_emu(in float2 v) {",
         "    int x = webgl_toSnorm16(v.x);",
         "    int y = webgl_toSnorm16(v.y);",
         "    return (asuint(y) << 16) | (asuint(x) & 0xffffu);",
         "}"
      ]
   ],
   [
      [
         "PackUnorm2x16",
         "Float2"
      ],
      [
         "uint webgl_toUnorm16(in float x) {",
         "    return uint(round(clamp(x, 0.0, 1.0) * 65535.0));",
         "}",
         "",
         "uint webgl_packUnorm2x16_emu(in float2 v) {",
         "    uint x = webgl_toUnorm16(v.x);",
         "    uint y = webgl_toUnorm16(v.y);",
         "    return (y << 16) | x;",
         "}"
      ]
   ],
   [
      [
         "PackHalf2x16",
         "Float2"
      ],
      [
         "uint webgl_packHalf2x16_emu(in float2 v) {",
         "    uint x = f32tof16(v.x);",
         "    uint y = f32tof16(v.y);",
         "    return (y << 16) | x;",
         "}"
      ]
   ],
   [
      [
         "UnpackSnorm2x16",
         "Uint1"
      ],
      [
         "float webgl_fromSnorm16(in uint x) {",
         "    int xi = asint(x & 0x7fffu) - asint(x & 0x8000u);",
         "    return clamp(float(xi) / 32767.0, -1.0, 1.0);",
         "}",
         "",
         "float2 webgl_unpackSnorm2x16_emu(in uint u) {",
         "    uint y = (u >> 16);",
         "    uint x = u;",
         "    return float2(webgl_fromSnorm16(x), webgl_fromSnorm16(y));",
         "}"
      ]
   ],
   [
      [
         "UnpackUnorm2x16",
         "Uint1"
      ],
      [
         "float webgl_fromUnorm16(in uint x) {",
         "    return float(x) / 65535.0;",
         "}",
         "",
         "float2 webgl_unpackUnorm2x16_emu(in uint u) {",
         "    uint y = (u >> 16);",
         "    uint x = u & 0xffffu;",
         "    return float2(webgl_fromUnorm16(x), webgl_fromUnorm16(y));",
         "}"
      ]
   ],
   [
      [
         "UnpackHalf2x16",
         "Uint1"
      ],
      [
         "float2 webgl_unpackHalf2x16_emu(in uint u) {",
         "    uint y = (u >> 16);",
         "    uint x = u & 0xffffu;",
         "    return float2(f16tof32(x), f16tof32(y));",
         "}"
      ]
   ],
   [
      [
         "PackSnorm4x8",
         "Float4"
      ],
      [
         "int webgl_toSnorm8(in float x) {",
         "    return int(round(clamp(x, -1.0, 1.0) * 127.0));",
         "}",
         "",
         "uint webgl_packSnorm4x8_emu(in float4 v) {",
         "    int x = webgl_toSnorm8(v.x);",
         "    int y = webgl_toSnorm8(v.y);",
         "    int z = webgl_toSnorm8(v.z);",
         "    int w = webgl_toSnorm8(v.w);",
         "    return ((asuint(w) & 0xffu) << 24) | ((asuint(z) & 0xffu) << 16) ",
         "| ((asuint(y) & 0xffu) << 8) | (asuint(x) & 0xffu);",
         "}"
      ]
   ],
   [
      [
         "PackUnorm4x8",
         "Float4"
      ],
      [
         "uint webgl_toUnorm8(in float x) {",
         "    return uint(round(clamp(x, 0.0, 1.0) * 255.0));",
         "}",
         "",
         "uint webgl_packUnorm4x8_emu(in float4 v) {",
         "    uint x = webgl_toUnorm8(v.x);",
         "    uint y = webgl_toUnorm8(v.y);",
         "    uint z = webgl_toUnorm8(v.z);",
         "    uint w = webgl_toUnorm8(v.w);",
         "    return (w << 24) | (z << 16) | (y << 8) | x;",
         "}"
      ]
   ],
   [
      [
         "UnpackSnorm4x8",
         "Uint1"
      ],
      [
         "float webgl_fromSnorm8(in uint x) {",
         "    int xi = asint(x & 0x7fu) - asint(x & 0x80u);",
         "    return clamp(float(xi) / 127.0, -1.0, 1.0);",
         "}",
         "",
         "float4 webgl_unpackSnorm4x8_emu(in uint u) {",
         "    uint w = (u >> 24);",
         "    uint z = (u >> 16);",
         "    uint y = (u >> 8);",
         "    uint x = u;",
         "    return float4(webgl_fromSnorm8(x), webgl_fromSnorm8(y), ",
         "webgl_fromSnorm8(z), webgl_fromSnorm8(w));",
         "}"
      ]
   ],
   [
      [
         "UnpackUnorm4x8",
         "Uint1"
      ],
      [
         "float webgl_fromUnorm8(in uint x) {",
         "    return float(x) / 255.0;",
         "}",
         "",
         "float4 webgl_unpackUnorm4x8_emu(in uint u) {",
         "    uint w = (u >> 24) & 0xffu;",
         "    uint z = (u >> 16) & 0xffu;",
         "    uint y = (u >> 8) & 0xffu;",
         "    uint x = u & 0xffu;",
         "    return float4(webgl_fromUnorm8(x), webgl_fromUnorm8(y), ",
         "webgl_fromUnorm8(z), webgl_fromUnorm8(w));",
         "}"
      ]
   ],
   [
      "The matrix resulting from outer product needs to be transposed",
      "(matrices are stored as transposed to simplify element access in HLSL).",
      "So the function should return transpose(c * r) where c is a column vector",
      "and r is a row vector. This can be simplified by using the following",
      "formula:",
      "  transpose(c * r) = transpose(r) * transpose(c)",
      "transpose(r) and transpose(c) are in a sense free, since to get the",
      "transpose of r, we simply can build a column matrix out of the original",
      "vector instead of a row matrix."
   ],
   [
      [
         "OuterProduct",
         "Float2",
         "Float2"
      ],
      [
         "float2x2 webgl_outerProduct_emu(in float2 c, in float2 r) {",
         "    return mul(float2x1(r), float1x2(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float3",
         "Float3"
      ],
      [
         "float3x3 webgl_outerProduct_emu(in float3 c, in float3 r) {",
         "    return mul(float3x1(r), float1x3(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float4",
         "Float4"
      ],
      [
         "float4x4 webgl_outerProduct_emu(in float4 c, in float4 r) {",
         "    return mul(float4x1(r), float1x4(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float3",
         "Float2"
      ],
      [
         "float2x3 webgl_outerProduct_emu(in float3 c, in float2 r) {",
         "    return mul(float2x1(r), float1x3(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float2",
         "Float3"
      ],
      [
         "float3x2 webgl_outerProduct_emu(in float2 c, in float3 r) {",
         "    return mul(float3x1(r), float1x2(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float4",
         "Float2"
      ],
      [
         "float2x4 webgl_outerProduct_emu(in float4 c, in float2 r) {",
         "    return mul(float2x1(r), float1x4(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float2",
         "Float4"
      ],
      [
         "float4x2 webgl_outerProduct_emu(in float2 c, in float4 r) {",
         "    return mul(float4x1(r), float1x2(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float4",
         "Float3"
      ],
      [
         "float3x4 webgl_outerProduct_emu(in float4 c, in float3 r) {",
         "    return mul(float3x1(r), float1x4(c));",
         "}"
      ]
   ],
   [
      [
         "OuterProduct",
         "Float3",
         "Float4"
      ],
      [
         "float4x3 webgl_outerProduct_emu(in float3 c, in float4 r) {",
         "    return mul(float4x1(r), float1x3(c));",
         "}"
      ]
   ],
   [
      "Remember here that the parameter matrix is actually the transpose",
      "of the matrix that we're trying to invert, and the resulting matrix",
      "should also be the transpose of the inverse.",
      "When accessing the parameter matrix with m[a][b] it can be thought of so",
      "that a is the column and b is the row of the matrix that we're inverting.",
      "We calculate the inverse as the adjugate matrix divided by the",
      "determinant of the matrix being inverted. However, as the result needs",
      "to be transposed, we actually use of the transpose of the adjugate matrix",
      "which happens to be the cofactor matrix. That's stored in 'cof'.",
      "We don't need to care about divide-by-zero since results are undefined",
      "for singular or poorly-conditioned matrices."
   ],
   [
      [
         "Inverse",
         "Mat2"
      ],
      [
         "float2x2 webgl_inverse_emu(in float2x2 m) {",
         "    float2x2 cof = { m[1][1], -m[0][1], -m[1][0], m[0][0] };",
         "    return cof / determinant(transpose(m));",
         "}"
      ]
   ],
   [
      "cofAB is the cofactor for column A and row B."
   ],
   [
      [
         "Inverse",
         "Mat3"
      ],
      [
         "float3x3 webgl_inverse_emu(in float3x3 m) {",
         "    float cof00 = m[1][1] * m[2][2] - m[2][1] * m[1][2];",
         "    float cof01 = -(m[1][0] * m[2][2] - m[2][0] * m[1][2]);",
         "    float cof02 = m[1][0] * m[2][1] - m[2][0] * m[1][1];",
         "    float cof10 = -(m[0][1] * m[2][2] - m[2][1] * m[0][2]);",
         "    float cof11 = m[0][0] * m[2][2] - m[2][0] * m[0][2];",
         "    float cof12 = -(m[0][0] * m[2][1] - m[2][0] * m[0][1]);",
         "    float cof20 = m[0][1] * m[1][2] - m[1][1] * m[0][2];",
         "    float cof21 = -(m[0][0] * m[1][2] - m[1][0] * m[0][2]);",
         "    float cof22 = m[0][0] * m[1][1] - m[1][0] * m[0][1];",
         "    float3x3 cof = { cof00, cof10, cof20, cof01, cof11, cof21, cof02, cof12, cof22 };",
         "    return cof / determinant(transpose(m));",
         "}"
      ]
   ],
   [
      [
         "Inverse",
         "Mat4"
      ],
      [
         "float4x4 webgl_inverse_emu(in float4x4 m) {",
         "    float cof00 = m[1][1] * m[2][2] * m[3][3] + m[2][1] * m[3][2] * m[1][3] + m[3][1] * ",
         "m[1][2] * m[2][3]",
         " - m[1][1] * m[3][2] * m[2][3] - m[2][1] * m[1][2] * m[3][3] - m[3][1] * m[2][2] * ",
         "m[1][3];",
         "    float cof01 = -(m[1][0] * m[2][2] * m[3][3] + m[2][0] * m[3][2] * m[1][3] + m[3][0] * ",
         "m[1][2] * m[2][3]",
         " - m[1][0] * m[3][2] * m[2][3] - m[2][0] * m[1][2] * m[3][3] - m[3][0] * m[2][2] * ",
         "m[1][3]);",
         "    float cof02 = m[1][0] * m[2][1] * m[3][3] + m[2][0] * m[3][1] * m[1][3] + m[3][0] * ",
         "m[1][1] * m[2][3]",
         " - m[1][0] * m[3][1] * m[2][3] - m[2][0] * m[1][1] * m[3][3] - m[3][0] * m[2][1] * ",
         "m[1][3];",
         "    float cof03 = -(m[1][0] * m[2][1] * m[3][2] + m[2][0] * m[3][1] * m[1][2] + m[3][0] * ",
         "m[1][1] * m[2][2]",
         " - m[1][0] * m[3][1] * m[2][2] - m[2][0] * m[1][1] * m[3][2] - m[3][0] * m[2][1] * ",
         "m[1][2]);",
         "    float cof10 = -(m[0][1] * m[2][2] * m[3][3] + m[2][1] * m[3][2] * m[0][3] + m[3][1] * ",
         "m[0][2] * m[2][3]",
         " - m[0][1] * m[3][2] * m[2][3] - m[2][1] * m[0][2] * m[3][3] - m[3][1] * m[2][2] * ",
         "m[0][3]);",
         "    float cof11 = m[0][0] * m[2][2] * m[3][3] + m[2][0] * m[3][2] * m[0][3] + m[3][0] * ",
         "m[0][2] * m[2][3]",
         " - m[0][0] * m[3][2] * m[2][3] - m[2][0] * m[0][2] * m[3][3] - m[3][0] * m[2][2] * ",
         "m[0][3];",
         "    float cof12 = -(m[0][0] * m[2][1] * m[3][3] + m[2][0] * m[3][1] * m[0][3] + m[3][0] * ",
         "m[0][1] * m[2][3]",
         " - m[0][0] * m[3][1] * m[2][3] - m[2][0] * m[0][1] * m[3][3] - m[3][0] * m[2][1] * ",
         "m[0][3]);",
         "    float cof13 = m[0][0] * m[2][1] * m[3][2] + m[2][0] * m[3][1] * m[0][2] + m[3][0] * ",
         "m[0][1] * m[2][2]",
         " - m[0][0] * m[3][1] * m[2][2] - m[2][0] * m[0][1] * m[3][2] - m[3][0] * m[2][1] * ",
         "m[0][2];",
         "    float cof20 = m[0][1] * m[1][2] * m[3][3] + m[1][1] * m[3][2] * m[0][3] + m[3][1] * ",
         "m[0][2] * m[1][3]",
         " - m[0][1] * m[3][2] * m[1][3] - m[1][1] * m[0][2] * m[3][3] - m[3][1] * m[1][2] * ",
         "m[0][3];",
         "    float cof21 = -(m[0][0] * m[1][2] * m[3][3] + m[1][0] * m[3][2] * m[0][3] + m[3][0] * ",
         "m[0][2] * m[1][3]",
         " - m[0][0] * m[3][2] * m[1][3] - m[1][0] * m[0][2] * m[3][3] - m[3][0] * m[1][2] * ",
         "m[0][3]);",
         "    float cof22 = m[0][0] * m[1][1] * m[3][3] + m[1][0] * m[3][1] * m[0][3] + m[3][0] * ",
         "m[0][1] * m[1][3]",
         " - m[0][0] * m[3][1] * m[1][3] - m[1][0] * m[0][1] * m[3][3] - m[3][0] * m[1][1] * ",
         "m[0][3];",
         "    float cof23 = -(m[0][0] * m[1][1] * m[3][2] + m[1][0] * m[3][1] * m[0][2] + m[3][0] * ",
         "m[0][1] * m[1][2]",
         " - m[0][0] * m[3][1] * m[1][2] - m[1][0] * m[0][1] * m[3][2] - m[3][0] * m[1][1] * ",
         "m[0][2]);",
         "    float cof30 = -(m[0][1] * m[1][2] * m[2][3] + m[1][1] * m[2][2] * m[0][3] + m[2][1] * ",
         "m[0][2] * m[1][3]",
         " - m[0][1] * m[2][2] * m[1][3] - m[1][1] * m[0][2] * m[2][3] - m[2][1] * m[1][2] * ",
         "m[0][3]);",
         "    float cof31 = m[0][0] * m[1][2] * m[2][3] + m[1][0] * m[2][2] * m[0][3] + m[2][0] * ",
         "m[0][2] * m[1][3]",
         " - m[0][0] * m[2][2] * m[1][3] - m[1][0] * m[0][2] * m[2][3] - m[2][0] * m[1][2] * ",
         "m[0][3];",
         "    float cof32 = -(m[0][0] * m[1][1] * m[2][3] + m[1][0] * m[2][1] * m[0][3] + m[2][0] * ",
         "m[0][1] * m[1][3]",
         " - m[0][0] * m[2][1] * m[1][3] - m[1][0] * m[0][1] * m[2][3] - m[2][0] * m[1][1] * ",
         "m[0][3]);",
         "    float cof33 = m[0][0] * m[1][1] * m[2][2] + m[1][0] * m[2][1] * m[0][2] + m[2][0] * ",
         "m[0][1] * m[1][2]",
         " - m[0][0] * m[2][1] * m[1][2] - m[1][0] * m[0][1] * m[2][2] - m[2][0] * m[1][1] * ",
         "m[0][2];",
         "    float4x4 cof = { cof00, cof10, cof20, cof30, cof01, cof11, cof21, cof31,",
         " cof02, cof12, cof22, cof32, cof03, cof13, cof23, cof33 };",
         "    return cof / determinant(transpose(m));",
         "}"
      ]
   ],
   [
      "Emulate ESSL3 variant of mix that takes last argument as boolean vector.",
      "genType mix (genType x, genType y, genBType a): Selects which vector each returned component",
      "comes from.",
      "For a component of 'a' that is false, the corresponding component of 'x' is returned.For a",
      "component of 'a' that is true,",
      "the corresponding component of 'y' is returned."
   ],
   [
      [
         "Mix",
         "Float1",
         "Float1",
         "Bool1"
      ],
      [
         "float webgl_mix_emu(float x, float y, bool a)",
         "{",
         "    return a ? y : x;",
         "}"
      ]
   ],
   [
      [
         "Mix",
         "Float2",
         "Float2",
         "Bool2"
      ],
      [
         "float2 webgl_mix_emu(float2 x, float2 y, bool2 a)",
         "{",
         "    return a ? y : x;",
         "}"
      ]
   ],
   [
      [
         "Mix",
         "Float3",
         "Float3",
         "Bool3"
      ],
      [
         "float3 webgl_mix_emu(float3 x, float3 y, bool3 a)",
         "{",
         "    return a ? y : x;",
         "}"
      ]
   ],
   [
      [
         "Mix",
         "Float4",
         "Float4",
         "Bool4"
      ],
      [
         "float4 webgl_mix_emu(float4 x, float4 y, bool4 a)",
         "{",
         "    return a ? y : x;",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Uint1",
         "Int1",
         "Int1"
      ],
      [
         "uint webgl_bitfieldExtract_emu(uint value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return 0u;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    return (value & mask) >> offset;",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Uint2",
         "Int1",
         "Int1"
      ],
      [
         "uint2 webgl_bitfieldExtract_emu(uint2 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return uint2(0u, 0u);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    return (value & mask) >> offset;",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Uint3",
         "Int1",
         "Int1"
      ],
      [
         "uint3 webgl_bitfieldExtract_emu(uint3 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return uint3(0u, 0u, 0u);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    return (value & mask) >> offset;",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Uint4",
         "Int1",
         "Int1"
      ],
      [
         "uint4 webgl_bitfieldExtract_emu(uint4 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return uint4(0u, 0u, 0u, 0u);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    return (value & mask) >> offset;",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Int1",
         "Int1",
         "Int1"
      ],
      [
         "int webgl_bitfieldExtract_emu(int value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return 0;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint resultUnsigned = (asuint(value) & mask) >> offset;",
         "    if (bits != 32 && (resultUnsigned & maskMsb) != 0)",
         "    {",
         "        uint higherBitsMask = ((1u << (32 - bits)) - 1u) << bits;",
         "        resultUnsigned |= higherBitsMask;",
         "    }",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Int2",
         "Int1",
         "Int1"
      ],
      [
         "int2 webgl_bitfieldExtract_emu(int2 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return int2(0, 0);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint2 resultUnsigned = (asuint(value) & mask) >> offset;",
         "    if (bits != 32)",
         "    {",
         "        uint higherBitsMask = ((1u << (32 - bits)) - 1u) << bits;",
         "        resultUnsigned |= ((resultUnsigned & maskMsb) >> (bits - 1)) * higherBitsMask;",
         "    }",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Int3",
         "Int1",
         "Int1"
      ],
      [
         "int3 webgl_bitfieldExtract_emu(int3 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return int3(0, 0, 0);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint3 resultUnsigned = (asuint(value) & mask) >> offset;",
         "    if (bits != 32)",
         "    {",
         "        uint higherBitsMask = ((1u << (32 - bits)) - 1u) << bits;",
         "        resultUnsigned |= ((resultUnsigned & maskMsb) >> (bits - 1)) * higherBitsMask;",
         "    }",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldExtract",
         "Int4",
         "Int1",
         "Int1"
      ],
      [
         "int4 webgl_bitfieldExtract_emu(int4 value, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return int4(0, 0, 0, 0);",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint mask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint4 resultUnsigned = (asuint(value) & mask) >> offset;",
         "    if (bits != 32)",
         "    {",
         "        uint higherBitsMask = ((1u << (32 - bits)) - 1u) << bits;",
         "        resultUnsigned |= ((resultUnsigned & maskMsb) >> (bits - 1)) * higherBitsMask;",
         "    }",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Uint1",
         "Uint1",
         "Int1",
         "Int1"
      ],
      [
         "uint webgl_bitfieldInsert_emu(uint base, uint insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    return (base & baseMask) | ((insert << offset) & insertMask);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Uint2",
         "Uint2",
         "Int1",
         "Int1"
      ],
      [
         "uint2 webgl_bitfieldInsert_emu(uint2 base, uint2 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    return (base & baseMask) | ((insert << offset) & insertMask);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Uint3",
         "Uint3",
         "Int1",
         "Int1"
      ],
      [
         "uint3 webgl_bitfieldInsert_emu(uint3 base, uint3 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    return (base & baseMask) | ((insert << offset) & insertMask);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Uint4",
         "Uint4",
         "Int1",
         "Int1"
      ],
      [
         "uint4 webgl_bitfieldInsert_emu(uint4 base, uint4 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    return (base & baseMask) | ((insert << offset) & insertMask);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Int1",
         "Int1",
         "Int1",
         "Int1"
      ],
      [
         "int webgl_bitfieldInsert_emu(int base, int insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    uint resultUnsigned = (asuint(base) & baseMask) | ((asuint(insert) << offset) & ",
         "                           insertMask);",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Int2",
         "Int2",
         "Int1",
         "Int1"
      ],
      [
         "int2 webgl_bitfieldInsert_emu(int2 base, int2 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    uint2 resultUnsigned = (asuint(base) & baseMask) | ((asuint(insert) << offset) & ",
         "                            insertMask);",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Int3",
         "Int3",
         "Int1",
         "Int1"
      ],
      [
         "int3 webgl_bitfieldInsert_emu(int3 base, int3 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    uint3 resultUnsigned = (asuint(base) & baseMask) | ((asuint(insert) << offset) & ",
         "                            insertMask);",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "BitfieldInsert",
         "Int4",
         "Int4",
         "Int1",
         "Int1"
      ],
      [
         "int4 webgl_bitfieldInsert_emu(int4 base, int4 insert, int offset, int bits)",
         "{",
         "    if (offset < 0 || bits <= 0 || offset >= 32 || bits > 32 || offset + bits > 32)",
         "    {",
         "        return base;",
         "    }",
         "    uint maskMsb = (1u << (bits - 1));",
         "    uint insertMask = ((maskMsb - 1u) | maskMsb) << offset;",
         "    uint baseMask = ~insertMask;",
         "    uint4 resultUnsigned = (asuint(base) & baseMask) | ((asuint(insert) << offset) & ",
         "insertMask);",
         "    return asint(resultUnsigned);",
         "}"
      ]
   ],
   [
      [
         "UaddCarry",
         "Uint1",
         "Uint1",
         "Uint1"
      ],
      [
         "uint webgl_uaddCarry_emu(uint x, uint y, out uint carry)",
         "{",
         "    carry = uint(x > (0xffffffffu - y));",
         "    return x + y;",
         "}"
      ]
   ],
   [
      [
         "UaddCarry",
         "Uint2",
         "Uint2",
         "Uint2"
      ],
      [
         "uint2 webgl_uaddCarry_emu(uint2 x, uint2 y, out uint2 carry)",
         "{",
         "    carry = uint2(x > (0xffffffffu - y));",
         "    return x + y;",
         "}"
      ]
   ],
   [
      [
         "UaddCarry",
         "Uint3",
         "Uint3",
         "Uint3"
      ],
      [
         "uint3 webgl_uaddCarry_emu(uint3 x, uint3 y, out uint3 carry)",
         "{",
         "    carry = uint3(x > (0xffffffffu - y));",
         "    return x + y;",
         "}"
      ]
   ],
   [
      [
         "UaddCarry",
         "Uint4",
         "Uint4",
         "Uint4"
      ],
      [
         "uint4 webgl_uaddCarry_emu(uint4 x, uint4 y, out uint4 carry)",
         "{",
         "    carry = uint4(x > (0xffffffffu - y));",
         "    return x + y;",
         "}"
      ]
   ],
   [
      [
         "UsubBorrow",
         "Uint1",
         "Uint1",
         "Uint1"
      ],
      [
         "uint webgl_usubBorrow_emu(uint x, uint y, out uint borrow)",
         "{",
         "    borrow = uint(x < y);",
         "    return x - y;",
         "}"
      ]
   ],
   [
      [
         "UsubBorrow",
         "Uint2",
         "Uint2",
         "Uint2"
      ],
      [
         "uint2 webgl_usubBorrow_emu(uint2 x, uint2 y, out uint2 borrow)",
         "{",
         "    borrow = uint2(x < y);",
         "    return x - y;",
         "}"
      ]
   ],
   [
      [
         "UsubBorrow",
         "Uint3",
         "Uint3",
         "Uint3"
      ],
      [
         "uint3 webgl_usubBorrow_emu(uint3 x, uint3 y, out uint3 borrow)",
         "{",
         "    borrow = uint3(x < y);",
         "    return x - y;",
         "}"
      ]
   ],
   [
      [
         "UsubBorrow",
         "Uint4",
         "Uint4",
         "Uint4"
      ],
      [
         "uint4 webgl_usubBorrow_emu(uint4 x, uint4 y, out uint4 borrow)",
         "{",
         "    borrow = uint4(x < y);",
         "    return x - y;",
         "}"
      ]
   ]
]