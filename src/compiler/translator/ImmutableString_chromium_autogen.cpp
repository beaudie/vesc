// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_chromium_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {1438, 210,  1204, 335,  1174, 629,  1185, 1298, 1418, 1581,
                              16,   1450, 243,  1176, 907,  1175, 1297, 622,  351,  1306,
                              1237, 835,  1602, 529,  1281, 1381, 1387, 903,  734,  403,
                              1543, 753,  1431, 762,  705,  1039, 404,  1429, 1088, 777};
constexpr int mangledkT2[] = {323,  1134, 812,  1360, 1083, 485, 871,  343,  853,  308,
                              1265, 721,  1105, 1512, 1120, 31,  1442, 126,  1486, 1247,
                              824,  671,  1519, 1566, 1169, 233, 701,  789,  415,  1568,
                              11,   1381, 1180, 1221, 504,  706, 305,  1447, 183,  821};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    1168, 0,    0,    0,    0,    0,    0,
    0,    482,  0,    0,    0,    0,    0,    0,    0,    1574, 0,    0,    0,    891,  0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    204,  0,    0,    0,    0,    0,    0,
    0,    0,    0,    147,  0,    0,    0,    0,    0,    115,  0,    0,    0,    661,  47,   0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    591,  0,    338,
    0,    0,    0,    0,    0,    0,    444,  1190, 0,    1612, 365,  40,   0,    0,    194,  0,
    1122, 1065, 0,    1383, 263,  91,   0,    0,    0,    1137, 0,    0,    0,    0,    0,    0,
    145,  0,    1519, 61,   857,  0,    787,  0,    0,    0,    0,    230,  0,    0,    0,    0,
    0,    0,    0,    1299, 0,    507,  114,  0,    0,    0,    116,  0,    234,  0,    0,    936,
    0,    617,  123,  0,    0,    0,    1284, 0,    637,  1059, 1013, 42,   590,  0,    0,    0,
    0,    8,    0,    0,    1165, 0,    0,    630,  0,    1586, 0,    0,    695,  0,    0,    1030,
    664,  0,    0,    0,    203,  1332, 0,    1373, 0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    780,  799,  673,  0,    1230, 0,    0,    0,    1063, 788,  0,    1195, 0,    0,
    1552, 1456, 0,    0,    0,    415,  0,    0,    0,    0,    0,    699,  260,  0,    0,    0,
    0,    0,    0,    552,  0,    0,    0,    126,  0,    0,    1139, 327,  0,    0,    0,    0,
    178,  0,    0,    1115, 0,    0,    0,    0,    0,    0,    0,    1313, 0,    0,    937,  0,
    0,    0,    0,    382,  0,    0,    833,  425,  0,    0,    0,    285,  0,    0,    1082, 0,
    0,    684,  431,  0,    942,  0,    0,    0,    171,  1325, 774,  0,    0,    0,    0,    0,
    0,    174,  0,    0,    0,    969,  988,  0,    0,    645,  0,    412,  1197, 337,  0,    0,
    0,    0,    1123, 147,  1027, 550,  0,    1552, 771,  65,   0,    0,    805,  974,  0,    477,
    0,    368,  0,    433,  0,    281,  0,    32,   0,    0,    1334, 0,    0,    1467, 0,    0,
    0,    0,    0,    35,   112,  0,    516,  31,   0,    0,    0,    0,    0,    0,    710,  0,
    694,  0,    106,  909,  0,    0,    489,  301,  218,  0,    185,  1467, 0,    1449, 1120, 494,
    38,   421,  0,    0,    0,    717,  0,    157,  0,    0,    0,    76,   0,    653,  1266, 808,
    851,  609,  0,    34,   0,    533,  408,  0,    59,   0,    0,    1031, 1545, 938,  706,  0,
    811,  515,  0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    348,  0,    444,  0,
    0,    0,    265,  0,    223,  563,  643,  0,    169,  1562, 872,  1548, 0,    0,    1123, 197,
    0,    0,    1594, 243,  0,    0,    0,    0,    1078, 1479, 0,    0,    25,   0,    121,  0,
    1563, 0,    0,    0,    362,  0,    0,    0,    0,    332,  0,    0,    1015, 0,    0,    0,
    0,    0,    0,    903,  0,    0,    179,  0,    675,  0,    0,    834,  45,   701,  1248, 0,
    1089, 0,    0,    399,  1083, 637,  0,    0,    0,    399,  222,  0,    160,  0,    0,    883,
    109,  0,    0,    0,    334,  242,  0,    0,    0,    0,    638,  0,    102,  987,  0,    107,
    1561, 650,  0,    643,  0,    0,    570,  1512, 1229, 148,  0,    441,  433,  161,  0,    1550,
    0,    1412, 1540, 349,  1390, 0,    0,    822,  0,    81,   372,  1150, 507,  94,   1552, 389,
    1305, 0,    337,  383,  54,   463,  0,    0,    0,    0,    416,  0,    690,  0,    1235, 48,
    1175, 0,    414,  0,    0,    0,    0,    0,    0,    401,  0,    589,  1572, 300,  975,  13,
    0,    0,    0,    0,    173,  756,  0,    622,  333,  0,    0,    0,    1061, 0,    251,  0,
    584,  0,    0,    313,  419,  1348, 0,    0,    405,  847,  0,    0,    0,    424,  0,    0,
    130,  320,  117,  0,    321,  0,    0,    221,  950,  0,    375,  0,    0,    953,  625,  126,
    0,    498,  1055, 406,  820,  558,  645,  463,  1098, 1556, 0,    0,    532,  0,    1021, 0,
    132,  34,   797,  1211, 730,  0,    319,  817,  1180, 0,    1566, 0,    0,    827,  0,    0,
    1363, 1591, 0,    1434, 0,    522,  1584, 0,    385,  0,    0,    250,  0,    118,  501,  0,
    0,    0,    0,    0,    574,  347,  0,    79,   0,    0,    1140, 339,  1501, 69,   546,  218,
    91,   0,    0,    0,    0,    12,   0,    0,    0,    505,  0,    258,  0,    0,    0,    0,
    0,    0,    693,  1528, 0,    0,    0,    72,   0,    0,    0,    636,  645,  503,  38,   108,
    0,    497,  610,  1328, 66,   0,    0,    0,    30,   0,    246,  0,    0,    1109, 78,   533,
    86,   0,    1547, 195,  371,  0,    594,  0,    1441, 822,  1042, 507,  0,    0,    189,  303,
    206,  0,    383,  732,  1184, 826,  322,  0,    114,  0,    0,    0,    293,  0,    495,  760,
    390,  0,    551,  0,    521,  209,  646,  513,  1383, 0,    0,    0,    157,  1104, 0,    0,
    0,    0,    1217, 734,  283,  466,  0,    80,   0,    0,    555,  0,    655,  0,    0,    1440,
    0,    0,    0,    149,  739,  184,  937,  0,    0,    315,  0,    0,    1307, 0,    165,  0,
    166,  180,  320,  0,    403,  1098, 503,  1575, 0,    904,  182,  0,    121,  0,    1202, 0,
    0,    1276, 0,    0,    0,    922,  624,  393,  60,   136,  0,    0,    419,  0,    627,  1079,
    0,    0,    0,    272,  0,    0,    301,  0,    729,  0,    0,    0,    0,    0,    1218, 52,
    0,    107,  0,    454,  0,    0,    0,    0,    282,  417,  423,  247,  0,    6,    0,    0,
    593,  0,    0,    576,  1023, 152,  560,  1101, 220,  0,    570,  1407, 1358, 0,    0,    1520,
    774,  674,  0,    0,    173,  59,   1224, 0,    0,    0,    5,    0,    0,    817,  0,    212,
    1182, 745,  1323, 1135, 1577, 710,  0,    163,  1062, 0,    0,    173,  78,   0,    0,    455,
    0,    333,  997,  212,  0,    119,  0,    314,  0,    287,  0,    473,  0,    1080, 1549, 0,
    0,    0,    1550, 1024, 565,  1036, 0,    695,  413,  1010, 0,    468,  704,  1191, 752,  0,
    0,    0,    1458, 1100, 599,  0,    374,  1518, 59,   0,    190,  288,  120,  448,  0,    1214,
    415,  0,    76,   1555, 145,  216,  0,    689,  312,  452,  0,    0,    1261, 0,    378,  0,
    0,    986,  300,  61,   0,    121,  232,  0,    0,    0,    0,    1583, 1515, 670,  0,    0,
    1517, 0,    0,    13,   0,    807,  0,    0,    982,  0,    0,    0,    0,    0,    28,   140,
    0,    1196, 755,  474,  212,  0,    631,  253,  1116, 180,  666,  0,    0,    0,    0,    806,
    194,  327,  728,  651,  419,  349,  0,    0,    0,    0,    0,    1178, 1153, 0,    276,  1520,
    0,    64,   0,    62,   1093, 27,   0,    0,    0,    0,    267,  1063, 0,    1278, 0,    474,
    0,    1307, 1609, 161,  603,  0,    0,    280,  127,  574,  0,    0,    0,    0,    0,    0,
    1482, 0,    841,  549,  0,    1464, 29,   155,  0,    298,  0,    503,  280,  1023, 0,    402,
    213,  13,   0,    1332, 0,    181,  753,  1188, 101,  152,  810,  0,    0,    808,  125,  0,
    0,    0,    0,    0,    0,    33,   1402, 674,  1033, 123,  121,  523,  0,    0,    876,  392,
    385,  0,    787,  1449, 1359, 82,   1052, 0,    567,  908,  0,    0,    1583, 1301, 1489, 968,
    351,  1316, 0,    1120, 336,  1549, 572,  0,    570,  0,    796,  0,    163,  1380, 0,    291,
    660,  0,    210,  547,  0,    453,  551,  0,    0,    1040, 1514, 565,  0,    542,  278,  169,
    155,  1364, 129,  1376, 458,  0,    0,    1399, 377,  0,    1181, 116,  0,    0,    30,   0,
    1102, 261,  1299, 467,  576,  766,  0,    356,  218,  0,    232,  352,  461,  1518, 450,  822,
    351,  0,    732,  607,  326,  1490, 1516, 0,    1189, 0,    796,  1034, 80,   0,    0,    0,
    1455, 1095, 58,   1259, 750,  753,  0,    0,    0,    582,  1602, 0,    1335, 0,    0,    1470,
    0,    0,    1208, 1234, 625,  1104, 0,    0,    1602, 0,    0,    0,    90,   0,    427,  0,
    1180, 0,    0,    1515, 803,  465,  1218, 0,    0,    1265, 558,  541,  561,  414,  433,  175,
    272,  694,  306,  0,    0,    0,    0,    0,    1579, 1541, 1427, 73,   93,   0,    1172, 263,
    0,    0,    834,  233,  0,    1520, 542,  248,  49,   0,    510,  350,  1097, 0,    0,    66,
    0,    1202, 490,  631,  0,    0,    0,    711,  374,  0,    219,  627,  831,  381,  0,    10,
    845,  0,    177,  1265, 0,    411,  0,    0,    0,    507,  83,   741,  1118, 836,  739,  979,
    0,    0,    62,   12,   0,    161,  191,  743,  346,  575,  876,  363,  673,  18,   0,    222,
    305,  0,    0,    315,  516,  21,   1529, 1252, 1247, 468,  613,  0,    979,  1577, 1439, 181,
    1372, 199,  797,  0,    196,  1037, 0,    93,   777,  62,   0,    0,    0,    1567, 860,  0,
    1471, 0,    0,    0,    587,  131,  1438, 0,    283,  247,  1608, 276,  0,    908,  0,    361,
    723,  0,    554,  424,  159,  110,  0,    77,   712,  1197, 0,    885,  1457, 0,    183,  170,
    838,  0,    0,    298,  0,    154,  731,  643,  693,  449,  0,    0,    0,    1599, 0,    212,
    306,  455,  597,  555,  789,  197,  574,  374,  0,    28,   468,  0,    0,    0,    552,  0,
    452,  1273, 0,    1421, 0,    1461, 544,  0,    525,  376,  440,  515,  427,  162,  805,  0,
    0,    140,  662,  15,   0,    496,  88,   383,  8,    225,  1144, 132,  0,    0,    1198, 520,
    1001, 0,    0,    150,  0,    409,  0,    0,    684,  1323, 0,    1066, 856,  602,  212,  784,
    1457, 0,    0,    395,  106,  0,    354,  324,  0,    0,    0,    436,  379,  1,    577,  0,
    0,    70,   584,  1503, 0,    0,    1201, 567,  535,  1362, 554,  56,   494,  0,    1014, 441,
    819,  85,   1307, 1222, 1425, 1204, 696,  749,  1574, 534,  0,    0,    489,  15,   64,   797,
    177,  1143, 0,    860,  0,    1271, 802,  534,  186,  0,    792,  0,    0,    52,   840,  0,
    0,    428,  0,    0,    1077, 1261, 746,  6,    66,   0,    785,  835,  239,  0,    58,   0,
    1579, 0,    0,    0,    0,    0,    1609, 258,  832,  0,    1477, 170,  436,  704,  240,  0,
    559,  422,  0,    523,  0,    92,   0,    0,    102,  106,  832,  385,  271,  0,    1407};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1615;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 40)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1615;
}

constexpr int unmangledkT1[] = {141, 124, 129, 165, 75, 133, 185, 182, 9,   57,  31,
                                148, 162, 103, 39,  51, 138, 118, 200, 59,  110, 57,
                                47,  116, 23,  60,  7,  171, 34,  190, 195, 194};
constexpr int unmangledkT2[] = {52, 111, 18,  153, 158, 55, 117, 176, 92,  83, 70,
                                82, 51,  119, 23,  188, 53, 63,  41,  137, 20, 160,
                                86, 160, 70,  134, 4,   46, 18,  155, 14,  60};
constexpr int unmangledkG[]  = {
    0,   0,   0,   0,   0,   0,   0,   0,   0,   122, 110, 101, 0,   67,  0,   0,   64,  0,   0,
    168, 0,   200, 108, 41,  0,   75,  0,   100, 163, 21,  0,   0,   154, 70,  0,   79,  0,   0,
    0,   0,   0,   0,   145, 0,   0,   105, 24,  120, 58,  0,   87,  130, 68,  0,   127, 81,  117,
    0,   0,   0,   0,   188, 17,  0,   177, 60,  0,   142, 132, 135, 0,   0,   171, 0,   84,  140,
    140, 183, 0,   125, 0,   202, 0,   93,  187, 84,  89,  205, 194, 201, 166, 0,   183, 111, 29,
    0,   137, 148, 9,   15,  110, 99,  89,  191, 0,   0,   151, 0,   0,   10,  63,  128, 37,  0,
    0,   0,   0,   25,  186, 85,  0,   127, 31,  8,   29,  72,  93,  0,   0,   0,   189, 142, 106,
    181, 193, 50,  34,  0,   145, 69,  123, 26,  199, 37,  169, 129, 86,  190, 0,   142, 113, 138,
    185, 144, 0,   0,   136, 62,  0,   171, 94,  123, 147, 0,   41,  0,   0,   0,   165, 111, 48,
    0,   75,  56,  0,   118, 156, 143, 0,   100, 141, 92,  43,  46,  151, 0,   120, 165, 0,   126,
    45,  0,   165, 16,  0,   14,  140, 95,  0,   0,   185, 47,  8,   0,   27,  103, 0};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 207;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 32)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 207;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
