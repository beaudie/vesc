// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_chromium_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {1220, 568,  775,  1456, 1091, 267, 79,   1056, 794,  802,
                              1151, 1006, 660,  614,  1181, 9,   1448, 1592, 522,  345,
                              360,  343,  1215, 1294, 391,  551, 281,  1487, 732,  121,
                              1403, 1323, 450,  915,  984,  647, 763,  219,  1265, 203};
constexpr int mangledkT2[] = {38,   397, 686,  716,  796, 786,  657,  559,  456,  1441,
                              1518, 647, 374,  1262, 29,  71,   242,  1583, 778,  1168,
                              1587, 998, 235,  590,  427, 1113, 266,  473,  1182, 778,
                              119,  539, 1189, 1411, 981, 974,  1125, 629,  514,  92};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    111,  0,    535,  0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    472,  0,    0,    1102, 0,    0,    1004, 1017, 0,    0,    0,    0,    0,    0,    0,
    0,    0,    597,  0,    525,  0,    13,   0,    0,    0,    0,    0,    0,    357,  344,  0,
    0,    0,    0,    0,    0,    468,  0,    0,    1282, 0,    0,    0,    0,    1494, 728,  646,
    0,    0,    431,  570,  0,    0,    0,    0,    298,  0,    0,    0,    1549, 630,  0,    748,
    460,  787,  0,    0,    0,    0,    0,    55,   451,  0,    0,    0,    0,    0,    0,    0,
    1421, 0,    1553, 0,    0,    0,    94,   216,  1423, 0,    0,    63,   494,  0,    0,    413,
    0,    1136, 0,    0,    1166, 690,  0,    0,    770,  591,  250,  1158, 0,    0,    0,    143,
    0,    0,    0,    0,    0,    0,    0,    1261, 725,  0,    37,   704,  0,    0,    0,    0,
    0,    0,    175,  0,    1398, 538,  0,    0,    1278, 0,    0,    207,  1156, 440,  1538, 1326,
    0,    0,    1219, 0,    0,    0,    1122, 0,    0,    57,   0,    1269, 0,    153,  0,    0,
    896,  0,    0,    0,    1232, 822,  0,    0,    0,    0,    384,  406,  0,    0,    0,    890,
    623,  0,    1509, 0,    1565, 0,    0,    0,    0,    902,  1205, 0,    0,    0,    0,    561,
    0,    0,    0,    0,    83,   0,    53,   1395, 0,    0,    1238, 1324, 211,  0,    0,    0,
    0,    0,    0,    0,    189,  0,    0,    523,  0,    1441, 0,    0,    0,    598,  0,    0,
    0,    0,    1080, 1045, 455,  94,   0,    711,  0,    0,    0,    470,  581,  0,    604,  700,
    1533, 0,    0,    0,    0,    0,    0,    70,   0,    505,  0,    0,    478,  1139, 338,  0,
    0,    22,   0,    891,  0,    0,    0,    0,    294,  0,    0,    614,  806,  0,    0,    0,
    0,    0,    0,    404,  0,    573,  513,  554,  0,    0,    0,    603,  0,    131,  0,    0,
    977,  437,  0,    0,    0,    0,    758,  0,    0,    429,  613,  1465, 677,  0,    1281, 0,
    0,    5,    1065, 0,    638,  388,  0,    959,  1563, 482,  0,    0,    1520, 625,  632,  0,
    1397, 614,  0,    0,    181,  384,  801,  129,  1005, 0,    171,  0,    32,   27,   0,    0,
    1403, 0,    0,    586,  0,    5,    0,    194,  53,   275,  456,  0,    0,    0,    0,    249,
    0,    778,  0,    0,    298,  0,    0,    0,    902,  115,  70,   0,    29,   0,    224,  0,
    1408, 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    821,  0,    0,    0,
    705,  369,  0,    0,    392,  0,    0,    0,    0,    0,    0,    0,    794,  1411, 439,  0,
    0,    798,  538,  1054, 289,  1362, 0,    1201, 0,    0,    0,    35,   1485, 1590, 0,    1161,
    1118, 0,    331,  0,    742,  299,  292,  27,   0,    0,    0,    0,    0,    703,  0,    1295,
    64,   0,    933,  0,    0,    1538, 439,  629,  355,  1108, 0,    0,    132,  0,    270,  0,
    0,    616,  273,  1495, 717,  0,    0,    299,  0,    1199, 359,  0,    0,    0,    0,    1113,
    1371, 485,  0,    206,  833,  0,    283,  0,    1376, 1068, 1421, 0,    515,  0,    0,    1163,
    436,  0,    1576, 0,    163,  1493, 211,  0,    561,  0,    0,    675,  440,  0,    0,    315,
    479,  0,    0,    0,    1195, 0,    50,   0,    0,    0,    0,    804,  0,    0,    0,    0,
    0,    0,    1239, 0,    0,    1357, 0,    1473, 1016, 212,  0,    588,  346,  157,  0,    0,
    0,    1231, 754,  536,  0,    0,    601,  835,  0,    0,    0,    0,    0,    0,    0,    0,
    789,  0,    690,  78,   0,    322,  1476, 0,    1580, 679,  0,    0,    0,    0,    0,    1503,
    0,    408,  279,  0,    680,  0,    0,    412,  0,    418,  1586, 0,    0,    39,   1426, 309,
    0,    0,    0,    0,    0,    1530, 0,    492,  0,    0,    0,    0,    0,    1042, 658,  0,
    713,  0,    0,    0,    0,    0,    374,  1276, 0,    0,    690,  0,    1459, 1232, 0,    363,
    1269, 1348, 1054, 0,    844,  728,  977,  0,    260,  1341, 1511, 254,  123,  1357, 645,  1167,
    0,    0,    984,  599,  337,  928,  0,    0,    1154, 0,    0,    0,    0,    235,  247,  0,
    0,    811,  383,  0,    828,  591,  611,  484,  978,  1147, 0,    0,    0,    799,  0,    574,
    0,    1556, 0,    903,  0,    61,   970,  1565, 333,  0,    42,   944,  1572, 0,    156,  0,
    0,    0,    0,    552,  266,  722,  0,    0,    1205, 0,    952,  0,    0,    1289, 0,    234,
    0,    0,    0,    0,    1595, 671,  0,    0,    0,    1145, 0,    1098, 0,    1560, 0,    119,
    733,  502,  723,  708,  698,  1228, 1064, 1544, 1370, 1288, 152,  0,    0,    218,  1360, 490,
    0,    0,    0,    712,  1212, 0,    1579, 0,    185,  463,  0,    0,    466,  1453, 799,  103,
    0,    1177, 8,    130,  0,    593,  973,  0,    293,  259,  137,  426,  562,  0,    294,  0,
    256,  0,    570,  1225, 1525, 136,  0,    1282, 0,    199,  0,    1548, 0,    0,    0,    0,
    1291, 335,  0,    1013, 218,  0,    0,    0,    0,    0,    393,  237,  83,   1304, 259,  436,
    358,  0,    1156, 491,  0,    0,    1044, 114,  45,   54,   0,    1024, 1485, 1510, 0,    13,
    4,    1268, 1209, 199,  0,    0,    0,    0,    596,  307,  472,  917,  204,  1209, 0,    1024,
    0,    0,    0,    1360, 951,  0,    330,  465,  22,   0,    801,  1066, 0,    0,    114,  1420,
    1443, 0,    0,    379,  590,  567,  0,    0,    0,    0,    0,    0,    267,  1178, 841,  1361,
    992,  849,  238,  226,  0,    0,    1256, 0,    805,  0,    0,    73,   0,    433,  0,    0,
    305,  0,    34,   630,  669,  416,  0,    1054, 1488, 382,  769,  347,  158,  1286, 438,  0,
    0,    0,    1344, 0,    185,  0,    353,  0,    399,  0,    548,  0,    0,    0,    0,    0,
    1476, 843,  1309, 1581, 0,    385,  603,  549,  0,    0,    0,    0,    574,  786,  0,    97,
    85,   0,    967,  415,  1500, 0,    1432, 159,  362,  435,  0,    894,  1092, 0,    0,    179,
    276,  1564, 0,    306,  0,    0,    654,  0,    477,  1121, 273,  0,    0,    1276, 1175, 0,
    912,  165,  889,  0,    1017, 639,  401,  64,   782,  268,  0,    677,  0,    227,  302,  120,
    263,  0,    1029, 100,  0,    0,    0,    691,  0,    0,    93,   0,    46,   0,    0,    0,
    0,    1129, 1092, 515,  891,  150,  0,    268,  0,    0,    106,  895,  1342, 0,    0,    523,
    464,  0,    1587, 0,    0,    1046, 247,  0,    0,    819,  0,    388,  0,    0,    618,  0,
    368,  1443, 767,  823,  0,    702,  800,  0,    1424, 0,    616,  830,  508,  1179, 52,   0,
    799,  0,    1512, 701,  436,  497,  0,    0,    0,    0,    227,  286,  0,    301,  0,    355,
    1299, 700,  427,  1509, 1186, 0,    0,    281,  79,   344,  1119, 0,    235,  644,  224,  679,
    118,  0,    136,  0,    308,  1081, 85,   0,    518,  0,    0,    0,    602,  269,  1588, 125,
    892,  462,  772,  0,    0,    425,  0,    339,  38,   0,    389,  190,  0,    0,    0,    0,
    960,  0,    1387, 947,  84,   0,    71,   0,    0,    310,  260,  40,   0,    127,  0,    0,
    271,  491,  529,  0,    0,    0,    0,    1362, 515,  805,  0,    615,  531,  0,    0,    0,
    176,  0,    694,  0,    0,    0,    74,   128,  464,  1448, 0,    1516, 638,  411,  484,  0,
    0,    475,  0,    0,    81,   0,    0,    1016, 43,   935,  1223, 224,  0,    1483, 636,  0,
    751,  683,  588,  1230, 598,  0,    0,    0,    954,  20,   1367, 0,    252,  0,    849,  0,
    0,    184,  770,  0,    0,    659,  0,    773,  803,  0,    0,    0,    54,   1524, 0,    0,
    375,  354,  253,  1572, 748,  846,  39,   1017, 1238, 1202, 68,   1098, 173,  18,   1270, 1489,
    324,  0,    327,  1542, 716,  0,    952,  325,  1091, 49,   1463, 0,    257,  6,    0,    0,
    160,  97,   0,    1025, 0,    633,  1530, 65,   494,  516,  440,  0,    720,  127,  1167, 0,
    0,    0,    0,    94,   532,  696,  777,  862,  1305, 831,  0,    0,    5,    0,    0,    1587,
    0,    1155, 4,    826,  1304, 838,  1216, 749,  0,    1448, 0,    1312, 1478, 0,    0,    122,
    1436, 703,  541,  0,    0,    753,  847,  230,  0,    0,    1299, 379,  1485, 154,  822,  0,
    0,    0,    792,  290,  0,    0,    1462, 121,  714,  0,    396,  0,    0,    0,    219,  0,
    0,    207,  573,  1589, 0,    1410, 1515, 0,    1386, 504,  1055, 1185, 0,    357,  1046, 757,
    827,  1368, 977,  0,    1483, 0,    611,  1479, 1334, 662,  655,  1469, 0,    0,    81,   0,
    0,    711,  711,  1078, 30,   0,    0,    26,   1527, 0,    1447, 0,    748,  0,    360,  295,
    196,  695,  936,  1332, 238,  674,  1003, 402,  787,  342,  0,    249,  0,    0,    0,    0,
    456,  45,   0,    507,  194,  0,    0,    150,  0,    0,    0,    0,    0,    516,  0,    386,
    0,    748,  411,  1163, 334,  72,   1172, 308,  0,    294,  1511, 0,    68,   664,  319,  0,
    62,   75,   0,    223,  0,    86,   327,  0,    509,  0,    587,  357,  0,    756,  98,   860,
    859,  209,  0,    1232, 1039, 0,    67,   296,  249,  293,  359,  842,  664,  75,   99,   0,
    1379, 553,  857,  1189, 730,  0,    0,    1509, 0,    1091, 0,    0,    259,  344,  0,    0,
    0,    0,    231,  154,  733,  475,  299,  349,  1029, 0,    1165, 0,    592,  316,  530,  0,
    0,    0,    0,    403,  20,   49,   605,  1015, 182,  0,    434,  0,    106,  292,  339,  0,
    551,  0,    0,    0,    497,  0,    569,  1138, 0,    0,    402,  0,    673,  0,    513,  617,
    479,  63,   1273, 128,  1265, 1102, 487,  0,    576,  552,  0,    0,    1327, 0,    830,  0,
    612,  0,    1326, 0,    704,  661,  0,    238,  680,  0,    0,    0,    0,    1382, 441,  236,
    102,  0,    574,  1299, 0,    105,  253,  821,  816,  0,    0,    944,  0,    659,  0,    0,
    0,    251,  775,  302,  504,  70,   644,  123,  244,  243,  0,    427,  350,  100,  1554, 0,
    161,  151,  0,    204,  0,    557,  473,  0,    0,    0,    93,   0,    0,    162,  126,  196,
    399};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1601;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 40)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1601;
}

constexpr int unmangledkT1[] = {101, 163, 132, 202, 11, 92,  20,  112, 3,   134, 154,
                                54,  76,  24,  89,  10, 191, 168, 188, 176, 96,  135,
                                132, 27,  15,  135, 20, 91,  58,  111, 188, 156};
constexpr int unmangledkT2[] = {150, 153, 40,  21,  73,  155, 143, 27,  42, 165, 0,
                                171, 83,  43,  61,  145, 102, 96,  25,  29, 148, 154,
                                135, 117, 176, 196, 184, 69,  131, 155, 11, 4};
constexpr int unmangledkG[]  = {
    0,   0,   1,   0,   166, 0,   0,   0,   0,   0,   14,  15,  171, 0,   0,   0,   0,   0,   0,
    0,   0,   0,   187, 112, 0,   0,   0,   64,  27,  61,  0,   30,  74,  0,   0,   0,   0,   102,
    0,   0,   53,  0,   39,  0,   186, 0,   0,   141, 2,   103, 0,   127, 145, 0,   0,   139, 23,
    0,   129, 12,  31,  0,   28,  0,   17,  0,   157, 166, 72,  0,   188, 35,  30,  157, 38,  9,
    0,   113, 191, 161, 0,   0,   16,  51,  173, 136, 68,  0,   157, 195, 0,   50,  0,   12,  5,
    125, 3,   50,  66,  0,   141, 4,   129, 96,  0,   57,  135, 149, 101, 0,   144, 67,  167, 0,
    0,   0,   79,  0,   49,  0,   91,  65,  65,  126, 99,  68,  4,   0,   65,  202, 0,   0,   71,
    0,   68,  130, 197, 21,  187, 48,  14,  0,   0,   0,   0,   0,   0,   74,  171, 40,  0,   178,
    92,  0,   102, 161, 110, 100, 86,  133, 190, 36,  144, 13,  94,  94,  149, 124, 104, 154, 117,
    37,  98,  0,   10,  46,  76,  153, 0,   24,  22,  171, 104, 179, 41,  0,   0,   0,   101, 130,
    145, 115, 0,   0,   0,   35,  0,   65,  94,  0,   3,   16,  137};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 203;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 32)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 203;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
