// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_chromium_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {1688, 1113, 899,  1310, 318,  238,  29,   1258, 1238, 852,
                              689,  1048, 1501, 369,  100,  430,  980,  658,  1521, 1156,
                              1196, 722,  512,  618,  1173, 1314, 1426, 663,  1089, 278,
                              1278, 517,  1176, 153,  368,  406,  1327, 1130, 782,  395};
constexpr int mangledkT2[] = {431,  1143, 1652, 544, 736,  1668, 1609, 1051, 658,  1164,
                              906,  934,  611,  456, 660,  989,  84,   1685, 701,  1455,
                              1005, 1254, 1351, 910, 1080, 1524, 213,  189,  1151, 1497,
                              966,  558,  180,  677, 366,  443,  1688, 524,  1069, 190};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    856,  0,    0,    0,    373,  0,    831,
    0,    1501, 0,    0,    0,    0,    0,    0,    0,    859,  0,    0,    0,    0,    323,  0,
    0,    0,    427,  0,    0,    0,    0,    0,    803,  0,    0,    0,    1596, 0,    954,  559,
    0,    0,    0,    0,    1413, 1002, 0,    0,    895,  1083, 0,    0,    0,    455,  0,    0,
    0,    0,    0,    957,  0,    0,    1568, 0,    0,    44,   0,    1396, 0,    0,    0,    0,
    1193, 1475, 800,  0,    637,  0,    0,    0,    0,    0,    0,    0,    1385, 0,    0,    0,
    0,    1446, 0,    0,    539,  0,    468,  0,    0,    0,    0,    0,    0,    1117, 129,  0,
    0,    0,    0,    0,    1420, 120,  0,    0,    0,    761,  0,    0,    0,    0,    1587, 0,
    0,    0,    0,    1032, 1623, 1041, 1500, 89,   816,  0,    0,    0,    54,   1264, 1125, 0,
    1010, 1088, 0,    0,    0,    0,    0,    324,  721,  0,    0,    0,    0,    1145, 0,    0,
    999,  512,  0,    0,    0,    0,    75,   14,   861,  0,    0,    1542, 0,    0,    33,   0,
    0,    0,    0,    1588, 0,    0,    1319, 0,    0,    0,    625,  0,    0,    0,    0,    0,
    0,    0,    248,  0,    800,  1322, 1027, 0,    0,    0,    0,    1242, 1468, 36,   0,    0,
    0,    0,    1462, 0,    0,    0,    0,    0,    0,    80,   1431, 0,    0,    0,    372,  0,
    0,    171,  94,   281,  0,    938,  1608, 0,    0,    1490, 0,    1555, 0,    1294, 0,    0,
    115,  0,    0,    754,  769,  0,    0,    0,    1233, 0,    394,  0,    137,  0,    0,    0,
    787,  0,    0,    1392, 0,    1446, 331,  642,  0,    0,    0,    372,  48,   0,    0,    0,
    1542, 0,    258,  0,    271,  0,    0,    0,    636,  1429, 0,    0,    1639, 1343, 0,    0,
    0,    0,    0,    195,  0,    0,    0,    1417, 0,    0,    0,    0,    993,  0,    0,    722,
    0,    1213, 0,    0,    0,    279,  0,    0,    0,    0,    0,    859,  219,  0,    1527, 0,
    0,    1098, 0,    681,  830,  0,    0,    1247, 0,    0,    0,    0,    0,    748,  6,    0,
    109,  0,    0,    0,    1684, 568,  0,    0,    682,  0,    7,    984,  1543, 0,    1623, 296,
    570,  0,    0,    0,    1288, 1406, 0,    478,  0,    0,    862,  0,    0,    0,    0,    18,
    964,  1545, 0,    0,    0,    0,    0,    0,    0,    366,  0,    0,    0,    0,    1302, 0,
    0,    221,  0,    0,    1202, 0,    1457, 0,    0,    0,    1546, 1193, 883,  0,    1150, 0,
    290,  807,  616,  0,    384,  1607, 0,    0,    0,    0,    0,    0,    1213, 1110, 0,    0,
    301,  0,    0,    0,    0,    1436, 0,    0,    0,    0,    466,  0,    1482, 369,  0,    1078,
    0,    0,    344,  0,    0,    1548, 754,  0,    0,    226,  0,    851,  0,    200,  0,    1449,
    1127, 8,    0,    0,    0,    0,    0,    81,   254,  365,  6,    1126, 454,  0,    214,  0,
    0,    0,    1162, 0,    1043, 0,    362,  766,  395,  0,    0,    1500, 0,    0,    0,    1461,
    0,    0,    1368, 0,    0,    1447, 3,    677,  0,    777,  895,  0,    896,  0,    0,    361,
    403,  0,    401,  0,    0,    0,    887,  0,    0,    0,    1441, 238,  554,  237,  103,  1303,
    848,  0,    1685, 709,  0,    0,    0,    0,    1403, 0,    0,    0,    59,   0,    0,    0,
    0,    0,    0,    0,    1128, 1560, 0,    0,    727,  429,  0,    0,    448,  0,    0,    1100,
    283,  1343, 0,    0,    71,   0,    212,  862,  788,  1060, 1384, 0,    0,    1582, 1103, 370,
    1305, 0,    1544, 0,    842,  662,  1302, 0,    160,  1572, 0,    403,  0,    1428, 1217, 503,
    0,    0,    1136, 0,    1037, 1551, 0,    531,  0,    217,  0,    0,    965,  1391, 0,    0,
    0,    753,  0,    0,    0,    21,   1329, 1689, 0,    0,    152,  0,    0,    394,  0,    0,
    1518, 742,  1415, 0,    0,    1020, 0,    0,    368,  460,  0,    0,    1498, 412,  575,  197,
    1124, 169,  552,  404,  483,  472,  0,    485,  0,    0,    0,    0,    0,    0,    0,    1509,
    0,    0,    823,  780,  1242, 0,    0,    0,    336,  0,    79,   801,  1456, 352,  755,  0,
    0,    0,    315,  0,    806,  0,    617,  0,    0,    0,    0,    0,    1251, 203,  0,    387,
    374,  0,    589,  1692, 0,    0,    0,    0,    70,   888,  923,  0,    0,    380,  0,    0,
    466,  0,    450,  347,  260,  960,  453,  789,  0,    0,    0,    0,    0,    651,  623,  0,
    6,    0,    197,  989,  431,  0,    140,  656,  0,    853,  204,  844,  147,  0,    0,    1316,
    0,    0,    0,    394,  206,  614,  0,    1378, 291,  1268, 0,    0,    326,  0,    236,  478,
    710,  0,    0,    661,  0,    29,   0,    669,  0,    750,  724,  0,    0,    660,  855,  1213,
    1121, 482,  1236, 0,    335,  0,    1658, 202,  0,    0,    0,    216,  1395, 1186, 0,    0,
    303,  0,    1369, 775,  516,  0,    0,    559,  0,    0,    0,    250,  0,    580,  0,    0,
    580,  1115, 1135, 0,    259,  227,  0,    0,    639,  1592, 0,    880,  0,    0,    946,  166,
    0,    90,   0,    0,    0,    0,    0,    0,    1246, 1049, 784,  524,  197,  130,  486,  0,
    791,  0,    0,    838,  0,    0,    0,    0,    393,  894,  317,  0,    0,    918,  852,  1001,
    323,  0,    0,    0,    520,  129,  898,  735,  0,    0,    0,    0,    841,  0,    0,    0,
    0,    32,   0,    0,    158,  491,  0,    0,    1326, 1353, 688,  0,    0,    0,    0,    1486,
    879,  871,  1345, 340,  0,    0,    1079, 1516, 927,  462,  0,    217,  0,    0,    0,    0,
    670,  0,    0,    25,   1128, 0,    0,    0,    0,    0,    0,    0,    1183, 585,  435,  0,
    0,    0,    0,    0,    1237, 1115, 1311, 0,    542,  0,    97,   0,    250,  0,    0,    129,
    0,    622,  0,    1486, 92,   0,    0,    0,    1065, 574,  0,    1076, 424,  0,    740,  0,
    0,    0,    0,    1648, 0,    0,    991,  675,  0,    1157, 1202, 921,  180,  0,    544,  1382,
    0,    0,    526,  0,    0,    847,  0,    1,    315,  780,  0,    202,  809,  0,    452,  1239,
    418,  693,  172,  129,  109,  256,  0,    427,  0,    0,    0,    1371, 0,    0,    1049, 1028,
    1069, 0,    0,    0,    0,    0,    0,    0,    0,    769,  1031, 1088, 1066, 394,  0,    494,
    365,  110,  0,    0,    318,  0,    0,    0,    541,  105,  611,  428,  755,  867,  571,  0,
    1160, 0,    1279, 166,  120,  0,    757,  0,    1521, 951,  1011, 0,    206,  0,    111,  1120,
    0,    179,  1370, 0,    0,    0,    389,  1631, 568,  845,  0,    653,  758,  0,    560,  1049,
    1259, 0,    1294, 222,  567,  1016, 1251, 0,    1398, 759,  1614, 1410, 0,    0,    1446, 1056,
    1096, 0,    840,  1267, 0,    0,    0,    1255, 1692, 0,    971,  0,    0,    326,  0,    0,
    781,  127,  9,    0,    1336, 0,    0,    0,    467,  0,    0,    149,  0,    936,  681,  33,
    835,  1564, 192,  223,  428,  139,  362,  720,  7,    0,    264,  1224, 0,    1032, 154,  199,
    0,    0,    0,    0,    0,    1647, 178,  0,    0,    1680, 0,    1137, 0,    0,    0,    0,
    0,    0,    0,    0,    1616, 577,  0,    387,  0,    1536, 0,    39,   318,  0,    0,    1308,
    713,  297,  919,  124,  1600, 948,  0,    0,    98,   0,    72,   0,    1237, 0,    118,  1652,
    774,  0,    1238, 1376, 0,    1635, 628,  1194, 563,  206,  421,  197,  0,    1410, 0,    596,
    125,  0,    0,    1676, 723,  0,    249,  191,  0,    0,    0,    1258, 100,  1331, 764,  777,
    0,    0,    851,  0,    1218, 368,  0,    181,  762,  457,  672,  177,  0,    0,    0,    839,
    0,    0,    840,  1500, 898,  661,  0,    0,    625,  702,  817,  135,  0,    0,    0,    359,
    0,    145,  1440, 0,    0,    0,    496,  30,   0,    313,  1403, 0,    0,    588,  1162, 0,
    6,    346,  816,  0,    1373, 0,    1379, 1141, 1525, 0,    106,  213,  444,  0,    469,  1306,
    0,    0,    773,  1436, 0,    313,  272,  134,  1070, 0,    45,   373,  161,  0,    1272, 0,
    763,  854,  0,    0,    621,  0,    0,    821,  0,    0,    0,    369,  312,  1543, 0,    634,
    0,    190,  471,  0,    225,  382,  826,  457,  0,    433,  1123, 27,   0,    0,    0,    388,
    0,    147,  672,  0,    0,    645,  1640, 1415, 1327, 310,  128,  0,    0,    301,  570,  289,
    0,    71,   377,  728,  168,  526,  333,  0,    0,    768,  28,   0,    813,  34,   1565, 0,
    0,    739,  0,    361,  0,    1042, 857,  259,  0,    8,    374,  0,    0,    649,  1084, 1007,
    465,  0,    0,    0,    0,    0,    41,   0,    0,    474,  0,    986,  0,    409,  1396, 1406,
    850,  586,  0,    0,    0,    1225, 976,  871,  0,    0,    115,  866,  114,  0,    540,  0,
    40,   0,    0,    389,  0,    44,   99,   1650, 73,   1050, 229,  0,    359,  0,    0,    1200,
    0,    347,  79,   1406, 0,    0,    1533, 0,    582,  115,  837,  312,  0,    415,  569,  0,
    305,  0,    0,    1034, 0,    1411, 812,  729,  0,    0,    431,  0,    26,   887,  1395, 338,
    87,   3,    796,  0,    0,    76,   715,  29,   0,    626,  693,  1415, 1453, 0,    571,  922,
    0,    0,    272,  0,    0,    0,    0,    473,  0,    538,  0,    0,    148,  1350, 666,  0,
    0,    0,    0,    485,  0,    0,    712,  49,   0,    0,    0,    118,  686,  0,    0,    1607,
    0,    736,  807,  354,  1325, 0,    0,    437,  556,  0,    0,    87,   1665, 489,  0,    0,
    508,  0,    1240, 1226, 50,   1199, 129,  463,  154,  0,    12,   173,  1126, 351,  0,    194,
    0,    328,  176,  1522, 172,  111,  0,    662,  1191, 0,    707,  0,    0,    177,  0,    680,
    578,  429,  2,    0,    10,   0,    0,    418,  0,    1013, 502,  0,    573,  0,    510,  901,
    1524, 1010, 632,  629,  26,   0,    674,  0,    0,    674,  1622, 585,  0,    182,  0,    0,
    0,    880,  300,  274,  845,  1418, 1372, 486,  553,  633,  0,    35,   426,  329,  0,    930,
    0,    1295, 0,    642,  911,  83,   689,  0,    85,   1674, 0,    0,    0,    391,  666,  0,
    0,    0,    751,  0,    271,  93,   871,  622,  0,    0,    0,    856,  0,    1105, 886,  170,
    1374, 858,  0,    0,    1127, 308,  0,    640,  318,  227,  996,  0,    126,  0,    0,    431,
    0,    776,  0,    0,    0,    0,    74,   1155, 850,  0,    1149, 421,  0,    1444, 76,   552,
    1580, 0,    1663, 0,    0,    0,    498,  586,  1250, 620,  0,    285,  1019, 0,    0,    843,
    0,    0,    198,  848,  0,    483,  0,    1220, 1105, 62,   1442, 789,  244,  786,  0,    657,
    0,    0,    0,    1589, 0,    800,  1593, 0,    0,    0,    735,  1691, 182,  0,    963,  0,
    484,  296,  988,  824,  512,  0,    615,  0,    0,    257,  0,    1418, 1227, 54};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1694;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 40)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1694;
}

constexpr int unmangledkT1[] = {154, 151, 237, 170, 159, 134, 176, 106, 80,  166, 254,
                                24,  114, 238, 52,  168, 49,  37,  5,   193, 23,  3,
                                33,  7,   105, 58,  225, 163, 25,  90,  141, 20};
constexpr int unmangledkT2[] = {109, 161, 12,  250, 239, 179, 257, 255, 169, 97,  11,
                                198, 205, 58,  94,  129, 84,  217, 102, 61,  187, 55,
                                232, 212, 106, 104, 17,  9,   239, 174, 254, 148};
constexpr int unmangledkG[]  = {
    0,   204, 0,   0,   0,   244, 0,   179, 0,   0,   0,   0,   0,   0,   0,   0,   82,  0,   21,
    0,   0,   0,   0,   247, 0,   0,   0,   0,   0,   0,   0,   0,   164, 191, 0,   238, 0,   0,
    0,   13,  134, 93,  0,   0,   0,   0,   0,   255, 0,   0,   0,   191, 0,   0,   0,   8,   82,
    0,   20,  121, 0,   0,   206, 92,  96,  149, 0,   0,   87,  257, 0,   0,   64,  0,   0,   35,
    110, 0,   0,   0,   0,   0,   67,  179, 0,   242, 0,   0,   0,   0,   0,   60,  0,   180, 0,
    215, 0,   0,   9,   223, 0,   0,   0,   0,   0,   51,  0,   0,   0,   22,  0,   0,   0,   0,
    0,   0,   108, 65,  28,  131, 0,   0,   232, 100, 161, 43,  18,  0,   196, 0,   239, 29,  157,
    254, 0,   0,   0,   119, 55,  0,   28,  103, 78,  97,  0,   56,  21,  118, 13,  0,   8,   9,
    0,   0,   0,   10,  9,   0,   0,   0,   22,  0,   43,  93,  46,  183, 0,   110, 14,  3,   54,
    0,   22,  72,  85,  0,   96,  83,  74,  46,  0,   113, 201, 116, 129, 87,  230, 0,   244, 31,
    0,   0,   0,   20,  0,   34,  60,  0,   112, 0,   0,   35,  127, 129, 32,  0,   85,  0,   0,
    208, 109, 0,   25,  0,   175, 0,   91,  0,   29,  26,  91,  12,  100, 50,  0,   0,   91,  0,
    0,   53,  28,  191, 0,   0,   44,  37,  0,   48,  104, 69,  0,   129, 0,   0,   183, 0,   39,
    84,  0,   69,  194, 64,  42,  175, 226, 0,   67,  153, 0};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 259;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 32)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 259;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
