// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_variables.json and
// builtin_function_declarations.txt.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_chromium_autogen.cpp: Wrapper for static or pool allocated char arrays, that are
// guaranteed to be valid and unchanged for the duration of the compilation. Implements
// mangledNameHash using perfect hash function from gen_builtin_symbols.py

#include "compiler/translator/ImmutableString.h"

std::ostream &operator<<(std::ostream &os, const sh::ImmutableString &str)
{
    return os.write(str.data(), str.length());
}

#if defined(_MSC_VER)
#    pragma warning(disable : 4309)  // truncation of constant value
#endif

namespace
{

constexpr int mangledkT1[] = {792, 188,  825,  1427, 1502, 926, 1072, 1503, 434,  1351,
                              738, 1277, 1168, 787,  400,  596, 586,  1067, 776,  945,
                              930, 961,  1499, 12,   1601, 561, 828,  1099, 431,  829,
                              976, 1142, 21,   21,   1362, 341, 1098, 1238, 1074, 428};
constexpr int mangledkT2[] = {1373, 55,   1037, 1319, 807,  1028, 1479, 1408, 913,  1073,
                              1047, 74,   1437, 480,  113,  682,  847,  783,  232,  840,
                              597,  1601, 431,  1158, 1314, 876,  133,  640,  1614, 800,
                              926,  1615, 479,  1086, 1273, 1537, 1104, 495,  1001, 601};
constexpr int mangledkG[]  = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    592,  695,  0,    0,    0,    0,    1591, 0,    0,    0,
    125,  0,    0,    1151, 0,    709,  0,    0,    0,    0,    0,    0,    1265, 0,    669,  0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    827,  609,  0,    1102,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    1012, 0,    0,    0,    321,  0,    0,
    0,    0,    0,    0,    0,    718,  351,  0,    0,    200,  0,    0,    0,    0,    0,    0,
    0,    0,    219,  1254, 0,    1092, 0,    536,  74,   1210, 0,    0,    193,  0,    310,  1386,
    0,    529,  0,    0,    0,    734,  0,    118,  0,    0,    509,  0,    0,    0,    0,    0,
    0,    129,  0,    0,    0,    0,    0,    0,    0,    1223, 0,    0,    0,    0,    0,    0,
    145,  0,    1131, 0,    0,    0,    0,    0,    893,  0,    0,    0,    0,    0,    312,  549,
    465,  0,    539,  0,    0,    1607, 1248, 815,  0,    0,    0,    1186, 0,    0,    0,    809,
    0,    0,    0,    452,  0,    586,  0,    773,  437,  1208, 0,    0,    1536, 0,    179,  1308,
    64,   1009, 0,    1138, 823,  96,   1343, 0,    0,    772,  256,  0,    0,    857,  0,    451,
    0,    894,  0,    0,    0,    0,    112,  0,    423,  0,    0,    0,    0,    0,    0,    0,
    0,    498,  0,    609,  1376, 635,  0,    0,    0,    456,  0,    1531, 302,  0,    1329, 0,
    0,    454,  197,  1564, 0,    0,    0,    1171, 0,    31,   668,  0,    0,    0,    88,   0,
    0,    714,  0,    0,    1608, 387,  482,  577,  122,  84,   0,    0,    688,  0,    0,    0,
    1151, 1583, 1144, 376,  1304, 0,    361,  538,  308,  1520, 0,    1061, 0,    0,    0,    0,
    0,    0,    339,  601,  1247, 0,    0,    0,    384,  23,   937,  362,  0,    35,   477,  98,
    0,    705,  0,    65,   0,    0,    0,    863,  989,  0,    0,    0,    0,    0,    0,    97,
    1339, 0,    324,  1005, 247,  0,    0,    1424, 811,  0,    0,    0,    457,  0,    1611, 0,
    460,  0,    1165, 299,  0,    336,  0,    683,  0,    1318, 0,    575,  695,  0,    0,    0,
    346,  1057, 0,    706,  36,   404,  544,  0,    1277, 532,  0,    1513, 0,    1352, 124,  300,
    0,    0,    0,    0,    0,    0,    0,    0,    182,  0,    417,  0,    1404, 984,  1318, 0,
    174,  0,    1476, 1564, 0,    0,    214,  526,  116,  668,  1150, 0,    775,  574,  985,  0,
    0,    992,  841,  1405, 0,    0,    1590, 1257, 0,    0,    827,  0,    0,    720,  264,  504,
    0,    0,    644,  0,    0,    0,    186,  162,  422,  561,  1265, 770,  345,  0,    0,    0,
    0,    0,    0,    529,  978,  643,  1120, 1119, 0,    721,  219,  0,    0,    0,    0,    0,
    484,  0,    0,    0,    0,    0,    60,   900,  0,    1024, 0,    1597, 998,  1092, 0,    1589,
    0,    1068, 629,  0,    0,    0,    388,  0,    1442, 56,   0,    0,    157,  691,  0,    381,
    0,    121,  0,    0,    1496, 81,   0,    1500, 0,    0,    649,  0,    474,  0,    688,  1273,
    79,   0,    0,    1442, 1536, 1456, 1569, 0,    0,    0,    450,  0,    0,    676,  0,    0,
    604,  250,  1493, 781,  0,    0,    419,  373,  0,    333,  1430, 0,    0,    231,  0,    0,
    667,  273,  1608, 641,  1387, 0,    0,    805,  0,    0,    0,    351,  0,    0,    0,    0,
    0,    1389, 0,    0,    0,    448,  0,    0,    0,    0,    31,   558,  848,  354,  0,    219,
    640,  0,    0,    964,  683,  6,    0,    0,    0,    787,  0,    0,    0,    364,  0,    0,
    334,  30,   0,    1552, 0,    615,  1490, 0,    0,    314,  825,  0,    1145, 1078, 0,    0,
    0,    0,    170,  115,  1511, 1208, 647,  0,    528,  0,    1374, 976,  311,  0,    787,  0,
    0,    0,    725,  869,  0,    0,    275,  533,  0,    1482, 143,  1006, 0,    308,  0,    801,
    0,    685,  656,  841,  0,    0,    440,  823,  419,  0,    0,    139,  0,    0,    174,  0,
    66,   1137, 0,    0,    109,  438,  1188, 1440, 0,    334,  1467, 703,  488,  0,    0,    565,
    113,  0,    0,    517,  0,    0,    121,  594,  1090, 0,    0,    876,  1343, 0,    727,  0,
    0,    1515, 0,    1435, 0,    148,  0,    75,   465,  0,    0,    1243, 193,  0,    0,    0,
    0,    355,  0,    0,    0,    20,   0,    817,  1409, 0,    1446, 0,    0,    128,  0,    206,
    0,    0,    0,    0,    785,  179,  0,    856,  0,    36,   584,  159,  443,  1145, 0,    806,
    1103, 761,  0,    207,  636,  0,    328,  569,  0,    0,    0,    0,    114,  0,    0,    0,
    1574, 0,    616,  114,  514,  0,    0,    1257, 0,    1315, 0,    781,  0,    675,  463,  0,
    0,    136,  669,  68,   622,  702,  654,  467,  730,  0,    101,  1595, 1307, 32,   0,    1204,
    0,    0,    95,   1587, 1577, 420,  0,    329,  797,  93,   257,  0,    1161, 0,    0,    0,
    0,    0,    719,  0,    0,    0,    0,    887,  1527, 0,    646,  0,    570,  0,    1425, 69,
    0,    547,  0,    0,    0,    246,  63,   0,    149,  1144, 518,  1132, 1576, 0,    0,    941,
    0,    518,  0,    0,    380,  0,    587,  0,    776,  0,    648,  1130, 1433, 1349, 0,    1025,
    0,    655,  604,  1117, 415,  0,    370,  350,  1400, 528,  18,   1252, 602,  0,    0,    0,
    0,    558,  272,  0,    0,    0,    830,  520,  0,    1577, 198,  1437, 404,  178,  0,    941,
    349,  0,    0,    0,    0,    0,    0,    258,  1405, 178,  0,    637,  0,    0,    891,  168,
    350,  1060, 0,    330,  1410, 69,   0,    0,    399,  1200, 1527, 749,  0,    0,    114,  1082,
    1239, 160,  0,    0,    0,    490,  1049, 0,    1163, 596,  0,    1337, 0,    1406, 0,    349,
    321,  365,  645,  846,  605,  850,  1266, 0,    0,    292,  912,  0,    924,  0,    0,    0,
    348,  0,    1293, 835,  1228, 0,    0,    366,  293,  0,    486,  0,    0,    380,  0,    128,
    0,    0,    988,  0,    0,    683,  742,  172,  1587, 0,    1220, 487,  938,  158,  0,    597,
    1005, 521,  1511, 0,    212,  813,  1022, 0,    0,    785,  951,  1058, 68,   0,    0,    697,
    712,  0,    0,    411,  108,  1067, 0,    433,  324,  0,    658,  1477, 0,    0,    0,    65,
    0,    103,  232,  435,  188,  110,  1389, 0,    1511, 523,  0,    248,  835,  969,  1135, 935,
    0,    0,    0,    0,    854,  1337, 0,    338,  0,    0,    0,    1008, 682,  0,    513,  184,
    0,    105,  1490, 238,  161,  118,  862,  392,  0,    0,    0,    0,    1559, 0,    1113, 59,
    0,    154,  0,    1094, 61,   1411, 102,  702,  689,  0,    0,    0,    668,  45,   1524, 0,
    0,    0,    0,    0,    0,    414,  637,  216,  526,  781,  0,    430,  65,   572,  0,    581,
    55,   0,    800,  386,  0,    0,    0,    756,  46,   181,  0,    1206, 81,   0,    655,  215,
    286,  70,   206,  0,    606,  423,  115,  0,    0,    348,  0,    605,  0,    19,   0,    0,
    1513, 0,    0,    0,    344,  0,    1496, 0,    0,    0,    609,  375,  0,    163,  361,  1423,
    1478, 584,  361,  230,  193,  485,  0,    517,  0,    595,  0,    577,  647,  1074, 1448, 158,
    0,    75,   263,  109,  0,    83,   0,    247,  242,  0,    0,    924,  1005, 742,  0,    0,
    1016, 0,    126,  184,  0,    1258, 0,    0,    0,    0,    1617, 0,    365,  0,    237,  759,
    0,    1064, 186,  102,  0,    265,  1456, 677,  0,    45,   1054, 0,    262,  1416, 660,  151,
    0,    0,    741,  583,  303,  0,    728,  366,  402,  161,  0,    0,    305,  163,  0,    1178,
    0,    27,   1225, 497,  380,  1591, 484,  0,    1529, 0,    0,    695,  0,    1273, 0,    281,
    566,  1363, 0,    229,  0,    412,  0,    406,  0,    0,    0,    0,    0,    99,   0,    828,
    0,    0,    0,    298,  1432, 1381, 58,   320,  1463, 1212, 0,    33,   29,   1616, 0,    51,
    516,  1475, 137,  1574, 434,  0,    531,  499,  0,    351,  600,  970,  1051, 296,  404,  0,
    290,  1370, 0,    68,   1492, 165,  0,    1022, 571,  100,  0,    0,    0,    0,    0,    0,
    1018, 40,   522,  655,  38,   0,    0,    728,  187,  0,    442,  0,    0,    520,  0,    283,
    732,  0,    367,  1556, 181,  123,  169,  0,    812,  0,    0,    1584, 0,    0,    120,  1338,
    549,  0,    0,    0,    0,    260,  827,  0,    0,    127,  476,  740,  0,    312,  0,    213,
    585,  207,  0,    679,  1199, 0,    561,  188,  206,  594,  0,    0,    0,    1408, 1184, 448,
    0,    1091, 0,    221,  0,    0,    0,    0,    344,  0,    322,  315,  0,    251,  371,  1576,
    0,    1321, 197,  0,    815,  150,  0,    0,    96,   0,    1050, 702,  300,  0,    621,  0,
    1271, 102,  591,  860,  318,  133,  80,   599,  0,    284,  581,  0,    1435, 232,  0,    0,
    0,    0,    0,    399,  0,    0,    0,    799,  0,    0,    1595, 1565, 0,    1038, 0,    763,
    0,    767,  0,    0,    1547, 0,    1554, 311,  341,  0,    141,  1228, 176,  641,  0,    0,
    395,  478,  622,  0,    257,  748,  0,    0,    497,  0,    0,    1484, 44,   0,    0,    202,
    0,    350,  530,  268,  1067, 241,  0,    0,    1075, 733,  0,    0,    1531, 37,   540,  0,
    0,    100,  0,    1357, 0,    329,  0,    0,    0,    432,  598,  423,  0,    0,    0,    495,
    675,  0,    668,  531,  1277, 619,  1371, 774,  548,  0,    595,  0,    0,    240,  86,   1362,
    1600, 0,    930,  286,  0,    136,  0,    1083, 336,  0,    1243, 620,  0,    0,    0,    1106,
    829,  1281, 772,  976,  405,  964,  608,  1580, 1163, 0,    0,    0,    148,  0,    619,  438,
    1523, 1271, 1197, 9,    0,    0,    234,  1036, 245,  1397, 0,    1526, 0,    799,  12,   0,
    0,    0,    204,  65,   0,    0,    603,  0,    0,    0,    0,    502,  107,  1056, 515,  64,
    0,    199,  1452, 0,    631,  753,  272,  1559, 0,    0,    489,  631,  30,   520,  738,  0,
    209,  681,  0,    808,  0,    1296, 1364, 110,  0,    255,  53,   1388, 946,  0,    417,  0,
    58,   0,    893,  194,  0,    1304, 86,   1543, 580,  1484, 410,  388,  725,  1264, 737,  0,
    355,  62,   814,  1239, 0,    0,    1183, 0,    1595, 0,    51,   0,    0,    82,   0,    1570,
    0,    1458, 132,  782,  0};

int MangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 1621;
    }
    return mangledkG[sum];
}

int MangledPerfectHash(const char *key)
{
    if (strlen(key) > 40)
        return 0;

    return (MangledHashG(key, mangledkT1) + MangledHashG(key, mangledkT2)) % 1621;
}

constexpr int unmangledkT1[] = {155, 62,  169, 121, 179, 154, 154, 22,  189, 83,  141,
                                150, 117, 92,  206, 167, 70,  187, 135, 122, 129, 75,
                                133, 185, 52,  111, 182, 9,   57,  31,  176, 92};
constexpr int unmangledkT2[] = {40,  56,  154, 156, 93,  142, 46,  137, 87,  98,  106,
                                6,   22,  17,  114, 207, 50,  156, 141, 124, 165, 18,
                                153, 158, 55,  117, 83,  70,  148, 162, 103, 82};
constexpr int unmangledkG[]  = {
    0,   0,   199, 175, 0,   0,   20,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    162, 4,   138, 0,   70,  0,   133, 61,  170, 0,   43,  104, 14,  110, 0,   0,   170, 0,
    0,   199, 0,   97,  0,   63,  0,   182, 0,   137, 163, 0,   44,  138, 0,   0,   0,   0,
    89,  0,   0,   179, 0,   0,   0,   0,   117, 0,   108, 14,  0,   82,  0,   0,   181, 125,
    11,  18,  29,  0,   21,  0,   0,   113, 0,   149, 0,   0,   123, 64,  0,   58,  103, 7,
    5,   0,   0,   107, 84,  0,   42,  0,   22,  120, 63,  76,  209, 82,  0,   111, 0,   31,
    101, 0,   189, 55,  98,  77,  0,   110, 0,   43,  211, 0,   9,   0,   0,   115, 2,   171,
    131, 172, 203, 73,  179, 199, 105, 180, 43,  0,   123, 26,  210, 0,   0,   0,   201, 0,
    5,   128, 59,  0,   97,  205, 39,  163, 188, 0,   57,  0,   117, 161, 35,  0,   0,   24,
    109, 127, 0,   134, 61,  52,  0,   19,  0,   162, 133, 89,  44,  0,   0,   206, 108, 29,
    149, 163, 101, 92,  187, 42,  105, 188, 0,   11,  0,   0,   148, 10,  139, 36,  44,  173,
    126, 49,  50,  196, 0,   95,  45,  13,  187, 147, 0,   203, 10,  0,   70};

int UnmangledHashG(const char *key, const int *T)
{
    int sum = 0;

    for (int i = 0; key[i] != '\0'; i++)
    {
        sum += T[i] * key[i];
        sum %= 213;
    }
    return unmangledkG[sum];
}

int UnmangledPerfectHash(const char *key)
{
    if (strlen(key) > 32)
        return 0;

    return (UnmangledHashG(key, unmangledkT1) + UnmangledHashG(key, unmangledkT2)) % 213;
}

}  // namespace

namespace sh
{

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvPrime = 16777619u;

template <>
const size_t ImmutableString::FowlerNollVoHash<4>::kFnvOffsetBasis = 0x811c9dc5u;

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvPrime =
    static_cast<size_t>(1099511628211ull);

template <>
const size_t ImmutableString::FowlerNollVoHash<8>::kFnvOffsetBasis =
    static_cast<size_t>(0xcbf29ce484222325ull);

uint32_t ImmutableString::mangledNameHash() const
{
    return MangledPerfectHash(data());
}

uint32_t ImmutableString::unmangledNameHash() const
{
    return UnmangledPerfectHash(data());
}

}  // namespace sh
