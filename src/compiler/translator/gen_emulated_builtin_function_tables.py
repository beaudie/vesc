#!/usr/bin/python
# Copyright 2017 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_emulated_builtin_function_tables.py:
#  Generator for the builtin function maps.

from datetime import date
import json
import os, sys

template_emulated_builtin_functions_hlsl = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {data_source_name}.
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// emulated_builtin_functions_hlsl:
//   HLSL code for emulating GLSL builtin functions not present in HLSL.

#include "compiler/translator/BuiltInFunctionEmulator.h"

namespace sh
{{

namespace
{{
constexpr std::pair<MiniFunctionId, const char *> g_hlslFunctions[] = {{
{emulated_functions}}};
}}  // anonymous namespace

const char *FindHLSLFunction(const FunctionId &functionID)
{{
    for (size_t index = 0; index < ArraySize(g_hlslFunctions); ++index)
    {{
        const auto &function = g_hlslFunctions[index];
        if (function.first == functionID)
        {{
            return function.second;
        }}
    }}

    return nullptr;
}}
}}  // namespace sh
"""

def reject_duplicate_keys(pairs):
    found_keys = {}
    for key, value in pairs:
        if key in found_keys:
           raise ValueError("duplicate key: %r" % (key,))
        else:
           found_keys[key] = value
    return found_keys

def load_json(path):
    with open(path) as map_file:
        file_data = map_file.read()
        map_file.close()
        return json.loads(file_data, object_pairs_hook=reject_duplicate_keys)

input_script = "emulated_builtin_function_data_hlsl.json"
hlsl_json = load_json(input_script)
emulated_functions = []

def gen_emulated_function(key, value):
   func = "{\n"
   func += "{ EOp" + ", ParamType::".join(key) + " },\n"
   func += "\"" + "\\n\"\n\"".join(value) + "\\n\"\n"
   func += "},\n"
   return [ func ]

for item in hlsl_json:
   if isinstance(item[0], list):
      emulated_functions += gen_emulated_function(item[0], item[1])

hlsl_fname = "emulated_builtin_functions_hlsl_autogen.cpp"

hlsl_gen = template_emulated_builtin_functions_hlsl.format(
   script_name = sys.argv[0],
   data_source_name = input_script,
   copyright_year = date.today().year,
   emulated_functions = "".join(emulated_functions))

with open(hlsl_fname, 'wt') as f:
   f.write(hlsl_gen)
   f.close()
