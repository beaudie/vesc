import("../../../gni/angle.gni")
declare_args() {
  # Determines if we build the capture_replay_test. Off by default.
  angle_build_capture_replay_test = false

  # Decide which context to replay, starting with desktop default
  angle_capture_replay_test_context_id = 1
}

if (angle_build_capture_replay_test) {
  angle_executable("capture_replay_test") {
    testonly = true
    _contextid = angle_capture_replay_test_context_id
    sources = read_file("angle_capture_context${_contextid}_files.txt",
                        "list lines") +
              [
                "CaptureReplayTest.cpp",
                "angle_capture_context${_contextid}.cpp",
                "angle_capture_context${_contextid}.h",
              ]

    #data_deps = [
    #  "../../../:libEGL",
    #  "../../../:libGLESv1_CM",
    #  "../../../:libGLESv2",
    #]
    deps = [
      "$angle_root:angle_compression",
      "../../../:angle_common",
      "../../../util:angle_util",
      "../../../util:angle_util_loader_headers",
    ]
    configs += [ "../../../:library_name_config" ]

    suppressed_configs += [ "$angle_root:constructor_and_destructor_warnings" ]

    # Disable optimization to avoid optimizing huge files.
    if (!is_debug) {
      suppressed_configs += [ "//build/config/compiler:default_optimization" ]
      configs += [ "//build/config/compiler:no_optimize" ]
    }
    defines = [
      "ANGLE_CAPTURE_REPLAY_TEST_DATA_DIR=\".\"",
      "ANGLE_CAPTURE_REPLAY_TEST_CONTEXT_ID=${_contextid}",
      "ANGLE_CAPTURE_REPLAY_TEST_HEADER=angle_capture_context${_contextid}.h",
    ]
  }
}

group("capture_replay_tests") {
}
