// GENERATED FILE - DO NOT EDIT.
// Generated by gen_features.py using data from *_features.json.
//
// Copyright 2022 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// angle_test_feature_overrides_autogen.h: Helpers to enable/disable features.

#ifndef ANGLE_SRC_TESTS_TEST_UTILS_ANGLE_TEST_FEATURE_OVERRIDES_H_
#define ANGLE_SRC_TESTS_TEST_UTILS_ANGLE_TEST_FEATURE_OVERRIDES_H_

bool HasFeatureOverride(const std::vector<std::string> &overrides, const char *feature);

inline PlatformParameters WithAddAndTrueToLoopCondition(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("add_and_true_to_loop_condition");
    return pout;
}

inline PlatformParameters WithNoAddAndTrueToLoopCondition(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("add_and_true_to_loop_condition");
    return pout;
}

inline bool IsWithAddAndTrueToLoopCondition(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "add_and_true_to_loop_condition");
}

inline bool IsWithNoAddAndTrueToLoopCondition(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "add_and_true_to_loop_condition");
}

inline PlatformParameters WithAddBaseVertexToVertexID(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("vertex_id_does_not_include_base_vertex");
    return pout;
}

inline PlatformParameters WithNoAddBaseVertexToVertexID(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("vertex_id_does_not_include_base_vertex");
    return pout;
}

inline bool IsWithAddBaseVertexToVertexID(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "vertex_id_does_not_include_base_vertex");
}

inline bool IsWithNoAddBaseVertexToVertexID(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "vertex_id_does_not_include_base_vertex");
}

inline PlatformParameters WithAddMockTextureNoRenderTarget(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("add_mock_texture_no_render_target");
    return pout;
}

inline PlatformParameters WithNoAddMockTextureNoRenderTarget(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("add_mock_texture_no_render_target");
    return pout;
}

inline bool IsWithAddMockTextureNoRenderTarget(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "add_mock_texture_no_render_target");
}

inline bool IsWithNoAddMockTextureNoRenderTarget(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "add_mock_texture_no_render_target");
}

inline PlatformParameters WithAdjustSrcDstRegionBlitFramebuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "adjust_src_dst_region_for_blitframebuffer");
    return pout;
}

inline PlatformParameters WithNoAdjustSrcDstRegionBlitFramebuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "adjust_src_dst_region_for_blitframebuffer");
    return pout;
}

inline bool IsWithAdjustSrcDstRegionBlitFramebuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "adjust_src_dst_region_for_blitframebuffer");
}

inline bool IsWithNoAdjustSrcDstRegionBlitFramebuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "adjust_src_dst_region_for_blitframebuffer");
}

inline PlatformParameters WithAllocateNonZeroMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allocateNonZeroMemory");
    return pout;
}

inline PlatformParameters WithNoAllocateNonZeroMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allocateNonZeroMemory");
    return pout;
}

inline bool IsWithAllocateNonZeroMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allocateNonZeroMemory");
}

inline bool IsWithNoAllocateNonZeroMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allocateNonZeroMemory");
}

inline PlatformParameters WithAllowBufferReadWrite(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_buffer_read_write");
    return pout;
}

inline PlatformParameters WithNoAllowBufferReadWrite(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_buffer_read_write");
    return pout;
}

inline bool IsWithAllowBufferReadWrite(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_buffer_read_write");
}

inline bool IsWithNoAllowBufferReadWrite(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_buffer_read_write");
}

inline PlatformParameters WithAllowClearForRobustResourceInit(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_clear_for_robust_resource_init");
    return pout;
}

inline PlatformParameters WithNoAllowClearForRobustResourceInit(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_clear_for_robust_resource_init");
    return pout;
}

inline bool IsWithAllowClearForRobustResourceInit(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_clear_for_robust_resource_init");
}

inline bool IsWithNoAllowClearForRobustResourceInit(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_clear_for_robust_resource_init");
}

inline PlatformParameters WithAllowCompressedFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_compressed_formats");
    return pout;
}

inline PlatformParameters WithNoAllowCompressedFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_compressed_formats");
    return pout;
}

inline bool IsWithAllowCompressedFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_compressed_formats");
}

inline bool IsWithNoAllowCompressedFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_compressed_formats");
}

inline PlatformParameters WithAllowES3OnFL10_0(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allowES3OnFL10_0");
    return pout;
}

inline PlatformParameters WithNoAllowES3OnFL10_0(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allowES3OnFL10_0");
    return pout;
}

inline bool IsWithAllowES3OnFL10_0(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "allowES3OnFL10_0");
}

inline bool IsWithNoAllowES3OnFL10_0(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "allowES3OnFL10_0");
}

inline PlatformParameters WithAllowEtcFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_etc_formats");
    return pout;
}

inline PlatformParameters WithNoAllowEtcFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_etc_formats");
    return pout;
}

inline bool IsWithAllowEtcFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "allow_etc_formats");
}

inline bool IsWithNoAllowEtcFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "allow_etc_formats");
}

inline PlatformParameters WithAllowGenMultipleMipsPerPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("gen_multiple_mips_per_pass");
    return pout;
}

inline PlatformParameters WithNoAllowGenMultipleMipsPerPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("gen_multiple_mips_per_pass");
    return pout;
}

inline bool IsWithAllowGenMultipleMipsPerPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "gen_multiple_mips_per_pass");
}

inline bool IsWithNoAllowGenMultipleMipsPerPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "gen_multiple_mips_per_pass");
}

inline PlatformParameters WithAllowGenerateMipmapWithCompute(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allowGenerateMipmapWithCompute");
    return pout;
}

inline PlatformParameters WithNoAllowGenerateMipmapWithCompute(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allowGenerateMipmapWithCompute");
    return pout;
}

inline bool IsWithAllowGenerateMipmapWithCompute(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allowGenerateMipmapWithCompute");
}

inline bool IsWithNoAllowGenerateMipmapWithCompute(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allowGenerateMipmapWithCompute");
}

inline PlatformParameters WithAllowInlineConstVertexData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_inline_const_vertex_data");
    return pout;
}

inline PlatformParameters WithNoAllowInlineConstVertexData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_inline_const_vertex_data");
    return pout;
}

inline bool IsWithAllowInlineConstVertexData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_inline_const_vertex_data");
}

inline bool IsWithNoAllowInlineConstVertexData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_inline_const_vertex_data");
}

inline PlatformParameters WithAllowMultisampleStoreAndResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_msaa_store_and_resolve");
    return pout;
}

inline PlatformParameters WithNoAllowMultisampleStoreAndResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_msaa_store_and_resolve");
    return pout;
}

inline bool IsWithAllowMultisampleStoreAndResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_msaa_store_and_resolve");
}

inline bool IsWithNoAllowMultisampleStoreAndResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_msaa_store_and_resolve");
}

inline PlatformParameters WithAllowRuntimeSamplerCompareMode(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_runtime_sampler_compare_mode");
    return pout;
}

inline PlatformParameters WithNoAllowRuntimeSamplerCompareMode(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_runtime_sampler_compare_mode");
    return pout;
}

inline bool IsWithAllowRuntimeSamplerCompareMode(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_runtime_sampler_compare_mode");
}

inline bool IsWithNoAllowRuntimeSamplerCompareMode(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_runtime_sampler_compare_mode");
}

inline PlatformParameters WithAllowSamplerCompareGradient(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_sampler_compare_gradient");
    return pout;
}

inline PlatformParameters WithNoAllowSamplerCompareGradient(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_sampler_compare_gradient");
    return pout;
}

inline bool IsWithAllowSamplerCompareGradient(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_sampler_compare_gradient");
}

inline bool IsWithNoAllowSamplerCompareGradient(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_sampler_compare_gradient");
}

inline PlatformParameters WithAllowSamplerCompareLod(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_sampler_compare_lod");
    return pout;
}

inline PlatformParameters WithNoAllowSamplerCompareLod(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_sampler_compare_lod");
    return pout;
}

inline bool IsWithAllowSamplerCompareLod(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_sampler_compare_lod");
}

inline bool IsWithNoAllowSamplerCompareLod(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_sampler_compare_lod");
}

inline PlatformParameters WithAllowSeparatedDepthStencilBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("allow_separate_depth_stencil_buffers");
    return pout;
}

inline PlatformParameters WithNoAllowSeparatedDepthStencilBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("allow_separate_depth_stencil_buffers");
    return pout;
}

inline bool IsWithAllowSeparatedDepthStencilBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_separate_depth_stencil_buffers");
}

inline bool IsWithNoAllowSeparatedDepthStencilBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_separate_depth_stencil_buffers");
}

inline PlatformParameters WithAllowTranslateUniformBlockToStructuredBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "allow_translate_uniform_block_to_structured_buffer");
    return pout;
}

inline PlatformParameters WithNoAllowTranslateUniformBlockToStructuredBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "allow_translate_uniform_block_to_structured_buffer");
    return pout;
}

inline bool IsWithAllowTranslateUniformBlockToStructuredBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "allow_translate_uniform_block_to_structured_buffer");
}

inline bool IsWithNoAllowTranslateUniformBlockToStructuredBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "allow_translate_uniform_block_to_structured_buffer");
}

inline PlatformParameters WithAlwaysCallUseProgramAfterLink(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("always_call_use_program_after_link");
    return pout;
}

inline PlatformParameters WithNoAlwaysCallUseProgramAfterLink(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("always_call_use_program_after_link");
    return pout;
}

inline bool IsWithAlwaysCallUseProgramAfterLink(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "always_call_use_program_after_link");
}

inline bool IsWithNoAlwaysCallUseProgramAfterLink(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "always_call_use_program_after_link");
}

inline PlatformParameters WithAlwaysUnbindFramebufferTexture2D(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("always_unbind_framebuffer_texture_2d");
    return pout;
}

inline PlatformParameters WithNoAlwaysUnbindFramebufferTexture2D(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("always_unbind_framebuffer_texture_2d");
    return pout;
}

inline bool IsWithAlwaysUnbindFramebufferTexture2D(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "always_unbind_framebuffer_texture_2d");
}

inline bool IsWithNoAlwaysUnbindFramebufferTexture2D(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "always_unbind_framebuffer_texture_2d");
}

inline PlatformParameters WithAsyncCommandQueue(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("asyncCommandQueue");
    return pout;
}

inline PlatformParameters WithNoAsyncCommandQueue(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("asyncCommandQueue");
    return pout;
}

inline bool IsWithAsyncCommandQueue(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "asyncCommandQueue");
}

inline bool IsWithNoAsyncCommandQueue(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "asyncCommandQueue");
}

inline PlatformParameters WithAvoid1BitAlphaTextureFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("avoid_1_bit_alpha_texture_formats");
    return pout;
}

inline PlatformParameters WithNoAvoid1BitAlphaTextureFormats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("avoid_1_bit_alpha_texture_formats");
    return pout;
}

inline bool IsWithAvoid1BitAlphaTextureFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "avoid_1_bit_alpha_texture_formats");
}

inline bool IsWithNoAvoid1BitAlphaTextureFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "avoid_1_bit_alpha_texture_formats");
}

inline PlatformParameters WithBasicGLLineRasterization(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("basicGLLineRasterization");
    return pout;
}

inline PlatformParameters WithNoBasicGLLineRasterization(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("basicGLLineRasterization");
    return pout;
}

inline bool IsWithBasicGLLineRasterization(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "basicGLLineRasterization");
}

inline bool IsWithNoBasicGLLineRasterization(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "basicGLLineRasterization");
}

inline PlatformParameters WithBindEmptyForUnusedDescriptorSets(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("bindEmptyForUnusedDescriptorSets");
    return pout;
}

inline PlatformParameters WithNoBindEmptyForUnusedDescriptorSets(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("bindEmptyForUnusedDescriptorSets");
    return pout;
}

inline bool IsWithBindEmptyForUnusedDescriptorSets(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "bindEmptyForUnusedDescriptorSets");
}

inline bool IsWithNoBindEmptyForUnusedDescriptorSets(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "bindEmptyForUnusedDescriptorSets");
}

inline PlatformParameters WithBindTransformFeedbackBufferBeforeBindBufferRange(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "bind_transform_feedback_buffer_before_bind_buffer_range");
    return pout;
}

inline PlatformParameters WithNoBindTransformFeedbackBufferBeforeBindBufferRange(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "bind_transform_feedback_buffer_before_bind_buffer_range");
    return pout;
}

inline bool IsWithBindTransformFeedbackBufferBeforeBindBufferRange(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "bind_transform_feedback_buffer_before_bind_buffer_range");
}

inline bool IsWithNoBindTransformFeedbackBufferBeforeBindBufferRange(
    const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "bind_transform_feedback_buffer_before_bind_buffer_range");
}

inline PlatformParameters WithBottomLeftOriginPresentRegionRectangles(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("bottomLeftOriginPresentRegionRectangles");
    return pout;
}

inline PlatformParameters WithNoBottomLeftOriginPresentRegionRectangles(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "bottomLeftOriginPresentRegionRectangles");
    return pout;
}

inline bool IsWithBottomLeftOriginPresentRegionRectangles(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "bottomLeftOriginPresentRegionRectangles");
}

inline bool IsWithNoBottomLeftOriginPresentRegionRectangles(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "bottomLeftOriginPresentRegionRectangles");
}

inline PlatformParameters WithBresenhamLineRasterization(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("bresenhamLineRasterization");
    return pout;
}

inline PlatformParameters WithNoBresenhamLineRasterization(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("bresenhamLineRasterization");
    return pout;
}

inline bool IsWithBresenhamLineRasterization(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "bresenhamLineRasterization");
}

inline bool IsWithNoBresenhamLineRasterization(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "bresenhamLineRasterization");
}

inline PlatformParameters WithCallClearTwice(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("call_clear_twice");
    return pout;
}

inline PlatformParameters WithNoCallClearTwice(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("call_clear_twice");
    return pout;
}

inline bool IsWithCallClearTwice(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "call_clear_twice");
}

inline bool IsWithNoCallClearTwice(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "call_clear_twice");
}

inline PlatformParameters WithCaptureLimits(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("enable_capture_limits");
    return pout;
}

inline PlatformParameters WithNoCaptureLimits(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("enable_capture_limits");
    return pout;
}

inline bool IsWithCaptureLimits(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enable_capture_limits");
}

inline bool IsWithNoCaptureLimits(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enable_capture_limits");
}

inline PlatformParameters WithClampArrayAccess(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clamp_array_access");
    return pout;
}

inline PlatformParameters WithNoClampArrayAccess(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clamp_array_access");
    return pout;
}

inline bool IsWithClampArrayAccess(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "clamp_array_access");
}

inline bool IsWithNoClampArrayAccess(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "clamp_array_access");
}

inline PlatformParameters WithClampFragDepth(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clamp_frag_depth");
    return pout;
}

inline PlatformParameters WithNoClampFragDepth(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clamp_frag_depth");
    return pout;
}

inline bool IsWithClampFragDepth(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "clamp_frag_depth");
}

inline bool IsWithNoClampFragDepth(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "clamp_frag_depth");
}

inline PlatformParameters WithClampMscRate(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clamp_msc_rate");
    return pout;
}

inline PlatformParameters WithNoClampMscRate(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clamp_msc_rate");
    return pout;
}

inline bool IsWithClampMscRate(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "clamp_msc_rate");
}

inline bool IsWithNoClampMscRate(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "clamp_msc_rate");
}

inline PlatformParameters WithClampPointSize(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clamp_point_size");
    return pout;
}

inline PlatformParameters WithNoClampPointSize(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clamp_point_size");
    return pout;
}

inline bool IsWithClampPointSize(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "clamp_point_size");
}

inline bool IsWithNoClampPointSize(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "clamp_point_size");
}

inline PlatformParameters WithClearToZeroOrOneBroken(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clear_to_zero_or_one_broken");
    return pout;
}

inline PlatformParameters WithNoClearToZeroOrOneBroken(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clear_to_zero_or_one_broken");
    return pout;
}

inline bool IsWithClearToZeroOrOneBroken(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "clear_to_zero_or_one_broken");
}

inline bool IsWithNoClearToZeroOrOneBroken(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "clear_to_zero_or_one_broken");
}

inline PlatformParameters WithClipSrcRegionBlitFramebuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("clip_src_region_for_blitframebuffer");
    return pout;
}

inline PlatformParameters WithNoClipSrcRegionBlitFramebuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("clip_src_region_for_blitframebuffer");
    return pout;
}

inline bool IsWithClipSrcRegionBlitFramebuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "clip_src_region_for_blitframebuffer");
}

inline bool IsWithNoClipSrcRegionBlitFramebuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "clip_src_region_for_blitframebuffer");
}

inline PlatformParameters WithCompressVertexData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("compress_vertex_data");
    return pout;
}

inline PlatformParameters WithNoCompressVertexData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("compress_vertex_data");
    return pout;
}

inline bool IsWithCompressVertexData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "compress_vertex_data");
}

inline bool IsWithNoCompressVertexData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "compress_vertex_data");
}

inline PlatformParameters WithCreatePipelineDuringLink(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("createPipelineDuringLink");
    return pout;
}

inline PlatformParameters WithNoCreatePipelineDuringLink(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("createPipelineDuringLink");
    return pout;
}

inline bool IsWithCreatePipelineDuringLink(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "createPipelineDuringLink");
}

inline bool IsWithNoCreatePipelineDuringLink(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "createPipelineDuringLink");
}

inline PlatformParameters WithDeferFlushUntilEndRenderPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("deferFlushUntilEndRenderPass");
    return pout;
}

inline PlatformParameters WithNoDeferFlushUntilEndRenderPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("deferFlushUntilEndRenderPass");
    return pout;
}

inline bool IsWithDeferFlushUntilEndRenderPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "deferFlushUntilEndRenderPass");
}

inline bool IsWithNoDeferFlushUntilEndRenderPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "deferFlushUntilEndRenderPass");
}

inline PlatformParameters WithDepthClamping(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("depth_clamping");
    return pout;
}

inline PlatformParameters WithNoDepthClamping(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("depth_clamping");
    return pout;
}

inline bool IsWithDepthClamping(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "depth_clamping");
}

inline bool IsWithNoDepthClamping(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "depth_clamping");
}

inline PlatformParameters WithDepthStencilBlitExtraCopy(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("depth_stencil_blit_extra_copy");
    return pout;
}

inline PlatformParameters WithNoDepthStencilBlitExtraCopy(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("depth_stencil_blit_extra_copy");
    return pout;
}

inline bool IsWithDepthStencilBlitExtraCopy(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "depth_stencil_blit_extra_copy");
}

inline bool IsWithNoDepthStencilBlitExtraCopy(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "depth_stencil_blit_extra_copy");
}

inline PlatformParameters WithDirectMetalGeneration(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("directMetalGeneration");
    return pout;
}

inline PlatformParameters WithNoDirectMetalGeneration(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("directMetalGeneration");
    return pout;
}

inline bool IsWithDirectMetalGeneration(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "directMetalGeneration");
}

inline bool IsWithNoDirectMetalGeneration(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "directMetalGeneration");
}

inline PlatformParameters WithDisableAnisotropicFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_anisotropic_filtering");
    return pout;
}

inline PlatformParameters WithNoDisableAnisotropicFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_anisotropic_filtering");
    return pout;
}

inline bool IsWithDisableAnisotropicFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_anisotropic_filtering");
}

inline bool IsWithNoDisableAnisotropicFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_anisotropic_filtering");
}

inline PlatformParameters WithDisableB5G6R5Support(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_b5g6r5_support");
    return pout;
}

inline PlatformParameters WithNoDisableB5G6R5Support(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_b5g6r5_support");
    return pout;
}

inline bool IsWithDisableB5G6R5Support(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_b5g6r5_support");
}

inline bool IsWithNoDisableB5G6R5Support(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_b5g6r5_support");
}

inline PlatformParameters WithDisableBlendFuncExtended(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_blend_func_extended");
    return pout;
}

inline PlatformParameters WithNoDisableBlendFuncExtended(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_blend_func_extended");
    return pout;
}

inline bool IsWithDisableBlendFuncExtended(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_blend_func_extended");
}

inline bool IsWithNoDisableBlendFuncExtended(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_blend_func_extended");
}

inline PlatformParameters WithDisableDrawBuffersIndexed(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_draw_buffers_indexed");
    return pout;
}

inline PlatformParameters WithNoDisableDrawBuffersIndexed(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_draw_buffers_indexed");
    return pout;
}

inline bool IsWithDisableDrawBuffersIndexed(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_draw_buffers_indexed");
}

inline bool IsWithNoDisableDrawBuffersIndexed(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_draw_buffers_indexed");
}

inline PlatformParameters WithDisableFifoPresentMode(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disableFifoPresentMode");
    return pout;
}

inline PlatformParameters WithNoDisableFifoPresentMode(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disableFifoPresentMode");
    return pout;
}

inline bool IsWithDisableFifoPresentMode(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disableFifoPresentMode");
}

inline bool IsWithNoDisableFifoPresentMode(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disableFifoPresentMode");
}

inline PlatformParameters WithDisableFlippingBlitWithCommand(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disableFlippingBlitWithCommand");
    return pout;
}

inline PlatformParameters WithNoDisableFlippingBlitWithCommand(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disableFlippingBlitWithCommand");
    return pout;
}

inline bool IsWithDisableFlippingBlitWithCommand(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disableFlippingBlitWithCommand");
}

inline bool IsWithNoDisableFlippingBlitWithCommand(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disableFlippingBlitWithCommand");
}

inline PlatformParameters WithDisableGPUSwitchingSupport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_gpu_switching_support");
    return pout;
}

inline PlatformParameters WithNoDisableGPUSwitchingSupport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_gpu_switching_support");
    return pout;
}

inline bool IsWithDisableGPUSwitchingSupport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_gpu_switching_support");
}

inline bool IsWithNoDisableGPUSwitchingSupport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_gpu_switching_support");
}

inline PlatformParameters WithDisableMultisampledRenderToTexture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_mutlisampled_render_to_texture");
    return pout;
}

inline PlatformParameters WithNoDisableMultisampledRenderToTexture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_mutlisampled_render_to_texture");
    return pout;
}

inline bool IsWithDisableMultisampledRenderToTexture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_mutlisampled_render_to_texture");
}

inline bool IsWithNoDisableMultisampledRenderToTexture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_mutlisampled_render_to_texture");
}

inline PlatformParameters WithDisableNativeParallelCompile(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_native_parallel_compile");
    return pout;
}

inline PlatformParameters WithNoDisableNativeParallelCompile(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_native_parallel_compile");
    return pout;
}

inline bool IsWithDisableNativeParallelCompile(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_native_parallel_compile");
}

inline bool IsWithNoDisableNativeParallelCompile(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_native_parallel_compile");
}

inline PlatformParameters WithDisableProgramBinary(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_program_binary");
    return pout;
}

inline PlatformParameters WithNoDisableProgramBinary(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_program_binary");
    return pout;
}

inline bool IsWithDisableProgramBinary(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_program_binary");
}

inline bool IsWithNoDisableProgramBinary(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_program_binary");
}

inline PlatformParameters WithDisableProgramCachingForTransformFeedback(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "disable_program_caching_for_transform_feedback");
    return pout;
}

inline PlatformParameters WithNoDisableProgramCachingForTransformFeedback(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "disable_program_caching_for_transform_feedback");
    return pout;
}

inline bool IsWithDisableProgramCachingForTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_program_caching_for_transform_feedback");
}

inline bool IsWithNoDisableProgramCachingForTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_program_caching_for_transform_feedback");
}

inline PlatformParameters WithDisableSemaphoreFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_semaphore_fd");
    return pout;
}

inline PlatformParameters WithNoDisableSemaphoreFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_semaphore_fd");
    return pout;
}

inline bool IsWithDisableSemaphoreFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "disable_semaphore_fd");
}

inline bool IsWithNoDisableSemaphoreFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_semaphore_fd");
}

inline PlatformParameters WithDisableSyncControlSupport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_sync_control_support");
    return pout;
}

inline PlatformParameters WithNoDisableSyncControlSupport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_sync_control_support");
    return pout;
}

inline bool IsWithDisableSyncControlSupport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_sync_control_support");
}

inline bool IsWithNoDisableSyncControlSupport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_sync_control_support");
}

inline PlatformParameters WithDisableTimestampQueries(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_timestamp_queries");
    return pout;
}

inline PlatformParameters WithNoDisableTimestampQueries(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_timestamp_queries");
    return pout;
}

inline bool IsWithDisableTimestampQueries(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_timestamp_queries");
}

inline bool IsWithNoDisableTimestampQueries(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_timestamp_queries");
}

inline PlatformParameters WithDisableWorkerContexts(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disable_worker_contexts");
    return pout;
}

inline PlatformParameters WithNoDisableWorkerContexts(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disable_worker_contexts");
    return pout;
}

inline bool IsWithDisableWorkerContexts(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disable_worker_contexts");
}

inline bool IsWithNoDisableWorkerContexts(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disable_worker_contexts");
}

inline PlatformParameters WithDisallowSeamfulCubeMapEmulation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("disallowSeamfulCubeMapEmulation");
    return pout;
}

inline PlatformParameters WithNoDisallowSeamfulCubeMapEmulation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("disallowSeamfulCubeMapEmulation");
    return pout;
}

inline bool IsWithDisallowSeamfulCubeMapEmulation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "disallowSeamfulCubeMapEmulation");
}

inline bool IsWithNoDisallowSeamfulCubeMapEmulation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "disallowSeamfulCubeMapEmulation");
}

inline PlatformParameters WithDoWhileGLSLCausesGPUHang(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("do_while_glsl_causes_gpu_hang");
    return pout;
}

inline PlatformParameters WithNoDoWhileGLSLCausesGPUHang(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("do_while_glsl_causes_gpu_hang");
    return pout;
}

inline bool IsWithDoWhileGLSLCausesGPUHang(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "do_while_glsl_causes_gpu_hang");
}

inline bool IsWithNoDoWhileGLSLCausesGPUHang(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "do_while_glsl_causes_gpu_hang");
}

inline PlatformParameters WithDoesSRGBClearsOnLinearFramebufferAttachments(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "does_srgb_clears_on_linear_framebuffer_attachments");
    return pout;
}

inline PlatformParameters WithNoDoesSRGBClearsOnLinearFramebufferAttachments(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "does_srgb_clears_on_linear_framebuffer_attachments");
    return pout;
}

inline bool IsWithDoesSRGBClearsOnLinearFramebufferAttachments(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "does_srgb_clears_on_linear_framebuffer_attachments");
}

inline bool IsWithNoDoesSRGBClearsOnLinearFramebufferAttachments(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "does_srgb_clears_on_linear_framebuffer_attachments");
}

inline PlatformParameters WithDontInitializeUninitializedLocals(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("dont_initialize_uninitialized_locals");
    return pout;
}

inline PlatformParameters WithNoDontInitializeUninitializedLocals(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("dont_initialize_uninitialized_locals");
    return pout;
}

inline bool IsWithDontInitializeUninitializedLocals(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "dont_initialize_uninitialized_locals");
}

inline bool IsWithNoDontInitializeUninitializedLocals(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "dont_initialize_uninitialized_locals");
}

inline PlatformParameters WithDontRelinkProgramsInParallel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("dont_relink_programs_in_parallel");
    return pout;
}

inline PlatformParameters WithNoDontRelinkProgramsInParallel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("dont_relink_programs_in_parallel");
    return pout;
}

inline bool IsWithDontRelinkProgramsInParallel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "dont_relink_programs_in_parallel");
}

inline bool IsWithNoDontRelinkProgramsInParallel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "dont_relink_programs_in_parallel");
}

inline PlatformParameters WithDontUseLoopsToInitializeVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("dont_use_loops_to_initialize_variables");
    return pout;
}

inline PlatformParameters WithNoDontUseLoopsToInitializeVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("dont_use_loops_to_initialize_variables");
    return pout;
}

inline bool IsWithDontUseLoopsToInitializeVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "dont_use_loops_to_initialize_variables");
}

inline bool IsWithNoDontUseLoopsToInitializeVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "dont_use_loops_to_initialize_variables");
}

inline PlatformParameters WithEmulateAbsIntFunction(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_abs_int_function");
    return pout;
}

inline PlatformParameters WithNoEmulateAbsIntFunction(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_abs_int_function");
    return pout;
}

inline bool IsWithEmulateAbsIntFunction(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_abs_int_function");
}

inline bool IsWithNoEmulateAbsIntFunction(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_abs_int_function");
}

inline PlatformParameters WithEmulateAtan2Float(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_atan_2_float");
    return pout;
}

inline PlatformParameters WithNoEmulateAtan2Float(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_atan_2_float");
    return pout;
}

inline bool IsWithEmulateAtan2Float(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "emulate_atan_2_float");
}

inline bool IsWithNoEmulateAtan2Float(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_atan_2_float");
}

inline PlatformParameters WithEmulateCopyTexImage2DFromRenderbuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "emulate_copyteximage2d_from_renderbuffers");
    return pout;
}

inline PlatformParameters WithNoEmulateCopyTexImage2DFromRenderbuffers(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "emulate_copyteximage2d_from_renderbuffers");
    return pout;
}

inline bool IsWithEmulateCopyTexImage2DFromRenderbuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_copyteximage2d_from_renderbuffers");
}

inline bool IsWithNoEmulateCopyTexImage2DFromRenderbuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_copyteximage2d_from_renderbuffers");
}

inline PlatformParameters WithEmulateDithering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulateDithering");
    return pout;
}

inline PlatformParameters WithNoEmulateDithering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulateDithering");
    return pout;
}

inline bool IsWithEmulateDithering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "emulateDithering");
}

inline bool IsWithNoEmulateDithering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "emulateDithering");
}

inline PlatformParameters WithEmulateImmutableCompressedTexture3D(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_immutable_compressed_texture_3d");
    return pout;
}

inline PlatformParameters WithNoEmulateImmutableCompressedTexture3D(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "emulate_immutable_compressed_texture_3d");
    return pout;
}

inline bool IsWithEmulateImmutableCompressedTexture3D(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_immutable_compressed_texture_3d");
}

inline bool IsWithNoEmulateImmutableCompressedTexture3D(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_immutable_compressed_texture_3d");
}

inline PlatformParameters WithEmulateIsnanFloat(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_isnan_float");
    return pout;
}

inline PlatformParameters WithNoEmulateIsnanFloat(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_isnan_float");
    return pout;
}

inline bool IsWithEmulateIsnanFloat(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "emulate_isnan_float");
}

inline bool IsWithNoEmulateIsnanFloat(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "emulate_isnan_float");
}

inline PlatformParameters WithEmulateMaxVertexAttribStride(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_max_vertex_attrib_stride");
    return pout;
}

inline PlatformParameters WithNoEmulateMaxVertexAttribStride(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_max_vertex_attrib_stride");
    return pout;
}

inline bool IsWithEmulateMaxVertexAttribStride(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_max_vertex_attrib_stride");
}

inline bool IsWithNoEmulateMaxVertexAttribStride(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_max_vertex_attrib_stride");
}

inline PlatformParameters WithEmulatePackSkipRowsAndPackSkipPixels(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "emulate_pack_skip_rows_and_pack_skip_pixels");
    return pout;
}

inline PlatformParameters WithNoEmulatePackSkipRowsAndPackSkipPixels(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "emulate_pack_skip_rows_and_pack_skip_pixels");
    return pout;
}

inline bool IsWithEmulatePackSkipRowsAndPackSkipPixels(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_pack_skip_rows_and_pack_skip_pixels");
}

inline bool IsWithNoEmulatePackSkipRowsAndPackSkipPixels(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_pack_skip_rows_and_pack_skip_pixels");
}

inline PlatformParameters WithEmulatePrimitiveRestartFixedIndex(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_primitive_restart_fixed_index");
    return pout;
}

inline PlatformParameters WithNoEmulatePrimitiveRestartFixedIndex(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_primitive_restart_fixed_index");
    return pout;
}

inline bool IsWithEmulatePrimitiveRestartFixedIndex(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_primitive_restart_fixed_index");
}

inline bool IsWithNoEmulatePrimitiveRestartFixedIndex(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_primitive_restart_fixed_index");
}

inline PlatformParameters WithEmulateR32fImageAtomicExchange(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulateR32fImageAtomicExchange");
    return pout;
}

inline PlatformParameters WithNoEmulateR32fImageAtomicExchange(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulateR32fImageAtomicExchange");
    return pout;
}

inline bool IsWithEmulateR32fImageAtomicExchange(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulateR32fImageAtomicExchange");
}

inline bool IsWithNoEmulateR32fImageAtomicExchange(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulateR32fImageAtomicExchange");
}

inline PlatformParameters WithEmulateRGB10(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_rgb10");
    return pout;
}

inline PlatformParameters WithNoEmulateRGB10(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_rgb10");
    return pout;
}

inline bool IsWithEmulateRGB10(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "emulate_rgb10");
}

inline bool IsWithNoEmulateRGB10(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "emulate_rgb10");
}

inline PlatformParameters WithEmulateTinyStencilTextures(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulate_tiny_stencil_textures");
    return pout;
}

inline PlatformParameters WithNoEmulateTinyStencilTextures(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulate_tiny_stencil_textures");
    return pout;
}

inline bool IsWithEmulateTinyStencilTextures(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulate_tiny_stencil_textures");
}

inline bool IsWithNoEmulateTinyStencilTextures(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulate_tiny_stencil_textures");
}

inline PlatformParameters WithEmulateTransformFeedback(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulateTransformFeedback");
    return pout;
}

inline PlatformParameters WithNoEmulateTransformFeedback(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulateTransformFeedback");
    return pout;
}

inline bool IsWithEmulateTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulateTransformFeedback");
}

inline bool IsWithNoEmulateTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulateTransformFeedback");
}

inline PlatformParameters WithEmulatedPrerotation180(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulatedPrerotation180");
    return pout;
}

inline PlatformParameters WithNoEmulatedPrerotation180(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulatedPrerotation180");
    return pout;
}

inline bool IsWithEmulatedPrerotation180(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulatedPrerotation180");
}

inline bool IsWithNoEmulatedPrerotation180(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulatedPrerotation180");
}

inline PlatformParameters WithEmulatedPrerotation270(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulatedPrerotation270");
    return pout;
}

inline PlatformParameters WithNoEmulatedPrerotation270(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulatedPrerotation270");
    return pout;
}

inline bool IsWithEmulatedPrerotation270(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulatedPrerotation270");
}

inline bool IsWithNoEmulatedPrerotation270(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulatedPrerotation270");
}

inline PlatformParameters WithEmulatedPrerotation90(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("emulatedPrerotation90");
    return pout;
}

inline PlatformParameters WithNoEmulatedPrerotation90(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("emulatedPrerotation90");
    return pout;
}

inline bool IsWithEmulatedPrerotation90(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "emulatedPrerotation90");
}

inline bool IsWithNoEmulatedPrerotation90(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "emulatedPrerotation90");
}

inline PlatformParameters WithEnableCompressingPipelineCacheInThreadPool(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "enableCompressingPipelineCacheInThreadPool");
    return pout;
}

inline PlatformParameters WithNoEnableCompressingPipelineCacheInThreadPool(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "enableCompressingPipelineCacheInThreadPool");
    return pout;
}

inline bool IsWithEnableCompressingPipelineCacheInThreadPool(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enableCompressingPipelineCacheInThreadPool");
}

inline bool IsWithNoEnableCompressingPipelineCacheInThreadPool(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enableCompressingPipelineCacheInThreadPool");
}

inline PlatformParameters WithEnableMultisampledRenderToTexture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("enableMultisampledRenderToTexture");
    return pout;
}

inline PlatformParameters WithNoEnableMultisampledRenderToTexture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("enableMultisampledRenderToTexture");
    return pout;
}

inline bool IsWithEnableMultisampledRenderToTexture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enableMultisampledRenderToTexture");
}

inline bool IsWithNoEnableMultisampledRenderToTexture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enableMultisampledRenderToTexture");
}

inline PlatformParameters WithEnablePreRotateSurfaces(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("enablePreRotateSurfaces");
    return pout;
}

inline PlatformParameters WithNoEnablePreRotateSurfaces(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("enablePreRotateSurfaces");
    return pout;
}

inline bool IsWithEnablePreRotateSurfaces(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enablePreRotateSurfaces");
}

inline bool IsWithNoEnablePreRotateSurfaces(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enablePreRotateSurfaces");
}

inline PlatformParameters WithEnablePrecisionQualifiers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("enablePrecisionQualifiers");
    return pout;
}

inline PlatformParameters WithNoEnablePrecisionQualifiers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("enablePrecisionQualifiers");
    return pout;
}

inline bool IsWithEnablePrecisionQualifiers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enablePrecisionQualifiers");
}

inline bool IsWithNoEnablePrecisionQualifiers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enablePrecisionQualifiers");
}

inline PlatformParameters WithEnableProgramBinaryForCapture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("enableProgramBinaryForCapture");
    return pout;
}

inline PlatformParameters WithNoEnableProgramBinaryForCapture(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("enableProgramBinaryForCapture");
    return pout;
}

inline bool IsWithEnableProgramBinaryForCapture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "enableProgramBinaryForCapture");
}

inline bool IsWithNoEnableProgramBinaryForCapture(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "enableProgramBinaryForCapture");
}

inline PlatformParameters WithEncodeAndDecodeSRGBForGenerateMipmap(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("decode_encode_srgb_for_generatemipmap");
    return pout;
}

inline PlatformParameters WithNoEncodeAndDecodeSRGBForGenerateMipmap(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("decode_encode_srgb_for_generatemipmap");
    return pout;
}

inline bool IsWithEncodeAndDecodeSRGBForGenerateMipmap(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "decode_encode_srgb_for_generatemipmap");
}

inline bool IsWithNoEncodeAndDecodeSRGBForGenerateMipmap(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "decode_encode_srgb_for_generatemipmap");
}

inline PlatformParameters WithExpandIntegerPowExpressions(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("expand_integer_pow_expressions");
    return pout;
}

inline PlatformParameters WithNoExpandIntegerPowExpressions(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("expand_integer_pow_expressions");
    return pout;
}

inline bool IsWithExpandIntegerPowExpressions(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "expand_integer_pow_expressions");
}

inline bool IsWithNoExpandIntegerPowExpressions(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "expand_integer_pow_expressions");
}

inline PlatformParameters WithExposeNonConformantExtensionsAndVersions(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "exposeNonConformantExtensionsAndVersions");
    return pout;
}

inline PlatformParameters WithNoExposeNonConformantExtensionsAndVersions(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "exposeNonConformantExtensionsAndVersions");
    return pout;
}

inline bool IsWithExposeNonConformantExtensionsAndVersions(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "exposeNonConformantExtensionsAndVersions");
}

inline bool IsWithNoExposeNonConformantExtensionsAndVersions(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "exposeNonConformantExtensionsAndVersions");
}

inline PlatformParameters WithFinishDoesNotCauseQueriesToBeAvailable(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "finish_does_not_cause_queries_to_be_available");
    return pout;
}

inline PlatformParameters WithNoFinishDoesNotCauseQueriesToBeAvailable(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "finish_does_not_cause_queries_to_be_available");
    return pout;
}

inline bool IsWithFinishDoesNotCauseQueriesToBeAvailable(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "finish_does_not_cause_queries_to_be_available");
}

inline bool IsWithNoFinishDoesNotCauseQueriesToBeAvailable(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "finish_does_not_cause_queries_to_be_available");
}

inline PlatformParameters WithFlushAfterEndingTransformFeedback(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("flush_after_ending_transform_feedback");
    return pout;
}

inline PlatformParameters WithNoFlushAfterEndingTransformFeedback(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("flush_after_ending_transform_feedback");
    return pout;
}

inline bool IsWithFlushAfterEndingTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "flush_after_ending_transform_feedback");
}

inline bool IsWithNoFlushAfterEndingTransformFeedback(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "flush_after_ending_transform_feedback");
}

inline PlatformParameters WithFlushBeforeDeleteTextureIfCopiedTo(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "flush_before_delete_texture_if_copied_to");
    return pout;
}

inline PlatformParameters WithNoFlushBeforeDeleteTextureIfCopiedTo(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "flush_before_delete_texture_if_copied_to");
    return pout;
}

inline bool IsWithFlushBeforeDeleteTextureIfCopiedTo(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "flush_before_delete_texture_if_copied_to");
}

inline bool IsWithNoFlushBeforeDeleteTextureIfCopiedTo(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "flush_before_delete_texture_if_copied_to");
}

inline PlatformParameters WithFlushOnFramebufferChange(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("flush_on_framebuffer_change");
    return pout;
}

inline PlatformParameters WithNoFlushOnFramebufferChange(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("flush_on_framebuffer_change");
    return pout;
}

inline bool IsWithFlushOnFramebufferChange(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "flush_on_framebuffer_change");
}

inline bool IsWithNoFlushOnFramebufferChange(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "flush_on_framebuffer_change");
}

inline PlatformParameters WithForceAtomicValueResolution(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_atomic_value_resolution");
    return pout;
}

inline PlatformParameters WithNoForceAtomicValueResolution(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_atomic_value_resolution");
    return pout;
}

inline bool IsWithForceAtomicValueResolution(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_atomic_value_resolution");
}

inline bool IsWithNoForceAtomicValueResolution(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_atomic_value_resolution");
}

inline PlatformParameters WithForceBufferGPUStorage(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_buffer_gpu_storage");
    return pout;
}

inline PlatformParameters WithNoForceBufferGPUStorage(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_buffer_gpu_storage");
    return pout;
}

inline bool IsWithForceBufferGPUStorage(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_buffer_gpu_storage");
}

inline bool IsWithNoForceBufferGPUStorage(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_buffer_gpu_storage");
}

inline PlatformParameters WithForceD16TexFilter(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceD16TexFilter");
    return pout;
}

inline PlatformParameters WithNoForceD16TexFilter(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceD16TexFilter");
    return pout;
}

inline bool IsWithForceD16TexFilter(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "forceD16TexFilter");
}

inline bool IsWithNoForceD16TexFilter(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "forceD16TexFilter");
}

inline PlatformParameters WithForceD24S8AsUnsupported(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_d24s8_as_unsupported");
    return pout;
}

inline PlatformParameters WithNoForceD24S8AsUnsupported(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_d24s8_as_unsupported");
    return pout;
}

inline bool IsWithForceD24S8AsUnsupported(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_d24s8_as_unsupported");
}

inline bool IsWithNoForceD24S8AsUnsupported(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_d24s8_as_unsupported");
}

inline PlatformParameters WithForceDriverUniformOverSpecConst(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceDriverUniformOverSpecConst");
    return pout;
}

inline PlatformParameters WithNoForceDriverUniformOverSpecConst(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceDriverUniformOverSpecConst");
    return pout;
}

inline bool IsWithForceDriverUniformOverSpecConst(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceDriverUniformOverSpecConst");
}

inline bool IsWithNoForceDriverUniformOverSpecConst(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceDriverUniformOverSpecConst");
}

inline PlatformParameters WithForceFallbackFormat(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceFallbackFormat");
    return pout;
}

inline PlatformParameters WithNoForceFallbackFormat(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceFallbackFormat");
    return pout;
}

inline bool IsWithForceFallbackFormat(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "forceFallbackFormat");
}

inline bool IsWithNoForceFallbackFormat(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "forceFallbackFormat");
}

inline PlatformParameters WithForceFragmentShaderPrecisionHighpToMediump(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "forceFragmentShaderPrecisionHighpToMediump");
    return pout;
}

inline PlatformParameters WithNoForceFragmentShaderPrecisionHighpToMediump(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "forceFragmentShaderPrecisionHighpToMediump");
    return pout;
}

inline bool IsWithForceFragmentShaderPrecisionHighpToMediump(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceFragmentShaderPrecisionHighpToMediump");
}

inline bool IsWithNoForceFragmentShaderPrecisionHighpToMediump(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceFragmentShaderPrecisionHighpToMediump");
}

inline PlatformParameters WithForceInitShaderVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceInitShaderVariables");
    return pout;
}

inline PlatformParameters WithNoForceInitShaderVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceInitShaderVariables");
    return pout;
}

inline bool IsWithForceInitShaderVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceInitShaderVariables");
}

inline bool IsWithNoForceInitShaderVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceInitShaderVariables");
}

inline PlatformParameters WithForceMaxUniformBufferSize16KB(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceMaxUniformBufferSize16KB");
    return pout;
}

inline PlatformParameters WithNoForceMaxUniformBufferSize16KB(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceMaxUniformBufferSize16KB");
    return pout;
}

inline bool IsWithForceMaxUniformBufferSize16KB(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceMaxUniformBufferSize16KB");
}

inline bool IsWithNoForceMaxUniformBufferSize16KB(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceMaxUniformBufferSize16KB");
}

inline PlatformParameters WithForceNearestFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_nearest_filtering");
    return pout;
}

inline PlatformParameters WithNoForceNearestFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_nearest_filtering");
    return pout;
}

inline bool IsWithForceNearestFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_nearest_filtering");
}

inline bool IsWithNoForceNearestFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_nearest_filtering");
}

inline PlatformParameters WithForceNearestMipFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceNearestMipFiltering");
    return pout;
}

inline PlatformParameters WithNoForceNearestMipFiltering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceNearestMipFiltering");
    return pout;
}

inline bool IsWithForceNearestMipFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceNearestMipFiltering");
}

inline bool IsWithNoForceNearestMipFiltering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceNearestMipFiltering");
}

inline PlatformParameters WithForceNonCSBaseMipmapGeneration(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_non_cs_mipmap_gen");
    return pout;
}

inline PlatformParameters WithNoForceNonCSBaseMipmapGeneration(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_non_cs_mipmap_gen");
    return pout;
}

inline bool IsWithForceNonCSBaseMipmapGeneration(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_non_cs_mipmap_gen");
}

inline bool IsWithNoForceNonCSBaseMipmapGeneration(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_non_cs_mipmap_gen");
}

inline PlatformParameters WithForceRobustResourceInit(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceRobustResourceInit");
    return pout;
}

inline PlatformParameters WithNoForceRobustResourceInit(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceRobustResourceInit");
    return pout;
}

inline bool IsWithForceRobustResourceInit(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceRobustResourceInit");
}

inline bool IsWithNoForceRobustResourceInit(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceRobustResourceInit");
}

inline PlatformParameters WithForceSubmitImmutableTextureUpdates(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("forceSubmitImmutableTextureUpdates");
    return pout;
}

inline PlatformParameters WithNoForceSubmitImmutableTextureUpdates(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("forceSubmitImmutableTextureUpdates");
    return pout;
}

inline bool IsWithForceSubmitImmutableTextureUpdates(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "forceSubmitImmutableTextureUpdates");
}

inline bool IsWithNoForceSubmitImmutableTextureUpdates(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "forceSubmitImmutableTextureUpdates");
}

inline PlatformParameters WithForceTextureLodOffset1(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_texture_lod_offset_1");
    return pout;
}

inline PlatformParameters WithNoForceTextureLodOffset1(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_texture_lod_offset_1");
    return pout;
}

inline bool IsWithForceTextureLodOffset1(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_texture_lod_offset_1");
}

inline bool IsWithNoForceTextureLodOffset1(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_texture_lod_offset_1");
}

inline PlatformParameters WithForceTextureLodOffset2(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_texture_lod_offset_2");
    return pout;
}

inline PlatformParameters WithNoForceTextureLodOffset2(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_texture_lod_offset_2");
    return pout;
}

inline bool IsWithForceTextureLodOffset2(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_texture_lod_offset_2");
}

inline bool IsWithNoForceTextureLodOffset2(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_texture_lod_offset_2");
}

inline PlatformParameters WithForceTextureLodOffset3(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_texture_lod_offset_3");
    return pout;
}

inline PlatformParameters WithNoForceTextureLodOffset3(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_texture_lod_offset_3");
    return pout;
}

inline bool IsWithForceTextureLodOffset3(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_texture_lod_offset_3");
}

inline bool IsWithNoForceTextureLodOffset3(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_texture_lod_offset_3");
}

inline PlatformParameters WithForceTextureLodOffset4(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("force_texture_lod_offset_4");
    return pout;
}

inline PlatformParameters WithNoForceTextureLodOffset4(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("force_texture_lod_offset_4");
    return pout;
}

inline bool IsWithForceTextureLodOffset4(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "force_texture_lod_offset_4");
}

inline bool IsWithNoForceTextureLodOffset4(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "force_texture_lod_offset_4");
}

inline PlatformParameters WithGenerateSPIRVThroughGlslang(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("generateSPIRVThroughGlslang");
    return pout;
}

inline PlatformParameters WithNoGenerateSPIRVThroughGlslang(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("generateSPIRVThroughGlslang");
    return pout;
}

inline bool IsWithGenerateSPIRVThroughGlslang(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "generateSPIRVThroughGlslang");
}

inline bool IsWithNoGenerateSPIRVThroughGlslang(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "generateSPIRVThroughGlslang");
}

inline PlatformParameters WithGetDimensionsIgnoresBaseLevel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("get_dimensions_ignores_base_level");
    return pout;
}

inline PlatformParameters WithNoGetDimensionsIgnoresBaseLevel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("get_dimensions_ignores_base_level");
    return pout;
}

inline bool IsWithGetDimensionsIgnoresBaseLevel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "get_dimensions_ignores_base_level");
}

inline bool IsWithNoGetDimensionsIgnoresBaseLevel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "get_dimensions_ignores_base_level");
}

inline PlatformParameters WithHasBaseVertexInstancedDraw(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_base_vertex_instanced_draw");
    return pout;
}

inline PlatformParameters WithNoHasBaseVertexInstancedDraw(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_base_vertex_instanced_draw");
    return pout;
}

inline bool IsWithHasBaseVertexInstancedDraw(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_base_vertex_instanced_draw");
}

inline bool IsWithNoHasBaseVertexInstancedDraw(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_base_vertex_instanced_draw");
}

inline PlatformParameters WithHasCheapRenderPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_cheap_render_pass_mtl");
    return pout;
}

inline PlatformParameters WithNoHasCheapRenderPass(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_cheap_render_pass_mtl");
    return pout;
}

inline bool IsWithHasCheapRenderPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_cheap_render_pass_mtl");
}

inline bool IsWithNoHasCheapRenderPass(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_cheap_render_pass_mtl");
}

inline PlatformParameters WithHasDepthAutoResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_msaa_depth_auto_resolve");
    return pout;
}

inline PlatformParameters WithNoHasDepthAutoResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_msaa_depth_auto_resolve");
    return pout;
}

inline bool IsWithHasDepthAutoResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_msaa_depth_auto_resolve");
}

inline bool IsWithNoHasDepthAutoResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_msaa_depth_auto_resolve");
}

inline PlatformParameters WithHasEvents(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_mtl_events");
    return pout;
}

inline PlatformParameters WithNoHasEvents(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_mtl_events");
    return pout;
}

inline bool IsWithHasEvents(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "has_mtl_events");
}

inline bool IsWithNoHasEvents(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "has_mtl_events");
}

inline PlatformParameters WithHasExplicitMemBarrier(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_explicit_mem_barrier_mtl");
    return pout;
}

inline PlatformParameters WithNoHasExplicitMemBarrier(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_explicit_mem_barrier_mtl");
    return pout;
}

inline bool IsWithHasExplicitMemBarrier(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_explicit_mem_barrier_mtl");
}

inline bool IsWithNoHasExplicitMemBarrier(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_explicit_mem_barrier_mtl");
}

inline PlatformParameters WithHasNonUniformDispatch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_non_uniform_dispatch");
    return pout;
}

inline PlatformParameters WithNoHasNonUniformDispatch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_non_uniform_dispatch");
    return pout;
}

inline bool IsWithHasNonUniformDispatch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_non_uniform_dispatch");
}

inline bool IsWithNoHasNonUniformDispatch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_non_uniform_dispatch");
}

inline PlatformParameters WithHasStencilAutoResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_msaa_stencil_auto_resolve");
    return pout;
}

inline PlatformParameters WithNoHasStencilAutoResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_msaa_stencil_auto_resolve");
    return pout;
}

inline bool IsWithHasStencilAutoResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_msaa_stencil_auto_resolve");
}

inline bool IsWithNoHasStencilAutoResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_msaa_stencil_auto_resolve");
}

inline PlatformParameters WithHasStencilOutput(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_shader_stencil_output");
    return pout;
}

inline PlatformParameters WithNoHasStencilOutput(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_shader_stencil_output");
    return pout;
}

inline bool IsWithHasStencilOutput(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "has_shader_stencil_output");
}

inline bool IsWithNoHasStencilOutput(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "has_shader_stencil_output");
}

inline PlatformParameters WithHasTextureSwizzle(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("has_texture_swizzle");
    return pout;
}

inline PlatformParameters WithNoHasTextureSwizzle(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("has_texture_swizzle");
    return pout;
}

inline bool IsWithHasTextureSwizzle(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "has_texture_swizzle");
}

inline bool IsWithNoHasTextureSwizzle(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "has_texture_swizzle");
}

inline PlatformParameters WithInitFragmentOutputVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("init_fragment_output_variables");
    return pout;
}

inline PlatformParameters WithNoInitFragmentOutputVariables(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("init_fragment_output_variables");
    return pout;
}

inline bool IsWithInitFragmentOutputVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "init_fragment_output_variables");
}

inline bool IsWithNoInitFragmentOutputVariables(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "init_fragment_output_variables");
}

inline PlatformParameters WithInitializeCurrentVertexAttributes(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("initialize_current_vertex_attributes");
    return pout;
}

inline PlatformParameters WithNoInitializeCurrentVertexAttributes(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("initialize_current_vertex_attributes");
    return pout;
}

inline bool IsWithInitializeCurrentVertexAttributes(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "initialize_current_vertex_attributes");
}

inline bool IsWithNoInitializeCurrentVertexAttributes(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "initialize_current_vertex_attributes");
}

inline PlatformParameters WithIntelDisableFastMath(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("intel_disable_fast_math");
    return pout;
}

inline PlatformParameters WithNoIntelDisableFastMath(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("intel_disable_fast_math");
    return pout;
}

inline bool IsWithIntelDisableFastMath(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "intel_disable_fast_math");
}

inline bool IsWithNoIntelDisableFastMath(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "intel_disable_fast_math");
}

inline PlatformParameters WithIntelExplicitBoolCastWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("intel_explicit_bool_cast_workaround");
    return pout;
}

inline PlatformParameters WithNoIntelExplicitBoolCastWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("intel_explicit_bool_cast_workaround");
    return pout;
}

inline bool IsWithIntelExplicitBoolCastWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "intel_explicit_bool_cast_workaround");
}

inline bool IsWithNoIntelExplicitBoolCastWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "intel_explicit_bool_cast_workaround");
}

inline PlatformParameters WithKeepBufferShadowCopy(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("keep_buffer_shadow_copy");
    return pout;
}

inline PlatformParameters WithNoKeepBufferShadowCopy(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("keep_buffer_shadow_copy");
    return pout;
}

inline bool IsWithKeepBufferShadowCopy(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "keep_buffer_shadow_copy");
}

inline bool IsWithNoKeepBufferShadowCopy(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "keep_buffer_shadow_copy");
}

inline PlatformParameters WithLimitMax3dArrayTextureSizeTo1024(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("max_3d_array_texture_size_1024");
    return pout;
}

inline PlatformParameters WithNoLimitMax3dArrayTextureSizeTo1024(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("max_3d_array_texture_size_1024");
    return pout;
}

inline bool IsWithLimitMax3dArrayTextureSizeTo1024(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "max_3d_array_texture_size_1024");
}

inline bool IsWithNoLimitMax3dArrayTextureSizeTo1024(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "max_3d_array_texture_size_1024");
}

inline PlatformParameters WithLimitMaxMSAASamplesTo4(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("max_msaa_sample_count_4");
    return pout;
}

inline PlatformParameters WithNoLimitMaxMSAASamplesTo4(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("max_msaa_sample_count_4");
    return pout;
}

inline bool IsWithLimitMaxMSAASamplesTo4(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "max_msaa_sample_count_4");
}

inline bool IsWithNoLimitMaxMSAASamplesTo4(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "max_msaa_sample_count_4");
}

inline PlatformParameters WithLimitMaxTextureSizeTo4096(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("max_texture_size_limit_4096");
    return pout;
}

inline PlatformParameters WithNoLimitMaxTextureSizeTo4096(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("max_texture_size_limit_4096");
    return pout;
}

inline bool IsWithLimitMaxTextureSizeTo4096(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "max_texture_size_limit_4096");
}

inline bool IsWithNoLimitMaxTextureSizeTo4096(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "max_texture_size_limit_4096");
}

inline PlatformParameters WithLogMemoryReportCallbacks(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("logMemoryReportCallbacks");
    return pout;
}

inline PlatformParameters WithNoLogMemoryReportCallbacks(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("logMemoryReportCallbacks");
    return pout;
}

inline bool IsWithLogMemoryReportCallbacks(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "logMemoryReportCallbacks");
}

inline bool IsWithNoLogMemoryReportCallbacks(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "logMemoryReportCallbacks");
}

inline PlatformParameters WithLogMemoryReportStats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("logMemoryReportStats");
    return pout;
}

inline PlatformParameters WithNoLogMemoryReportStats(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("logMemoryReportStats");
    return pout;
}

inline bool IsWithLogMemoryReportStats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "logMemoryReportStats");
}

inline bool IsWithNoLogMemoryReportStats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "logMemoryReportStats");
}

inline PlatformParameters WithLoseContextOnOutOfMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("lose_context_on_out_of_memory");
    return pout;
}

inline PlatformParameters WithNoLoseContextOnOutOfMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("lose_context_on_out_of_memory");
    return pout;
}

inline bool IsWithLoseContextOnOutOfMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "lose_context_on_out_of_memory");
}

inline bool IsWithNoLoseContextOnOutOfMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "lose_context_on_out_of_memory");
}

inline PlatformParameters WithMrtPerfWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("mrt_perf_workaround");
    return pout;
}

inline PlatformParameters WithNoMrtPerfWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("mrt_perf_workaround");
    return pout;
}

inline bool IsWithMrtPerfWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "mrt_perf_workaround");
}

inline bool IsWithNoMrtPerfWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "mrt_perf_workaround");
}

inline PlatformParameters WithMultisampleColorFormatShaderReadWorkaround(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "multisample_color_format_shader_read_workaround");
    return pout;
}

inline PlatformParameters WithNoMultisampleColorFormatShaderReadWorkaround(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "multisample_color_format_shader_read_workaround");
    return pout;
}

inline bool IsWithMultisampleColorFormatShaderReadWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "multisample_color_format_shader_read_workaround");
}

inline bool IsWithNoMultisampleColorFormatShaderReadWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "multisample_color_format_shader_read_workaround");
}

inline PlatformParameters WithOverrideSurfaceFormatRGB8toRGBA8(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("overrideSurfaceFormatRGB8toRGBA8");
    return pout;
}

inline PlatformParameters WithNoOverrideSurfaceFormatRGB8toRGBA8(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("overrideSurfaceFormatRGB8toRGBA8");
    return pout;
}

inline bool IsWithOverrideSurfaceFormatRGB8toRGBA8(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "overrideSurfaceFormatRGB8toRGBA8");
}

inline bool IsWithNoOverrideSurfaceFormatRGB8toRGBA8(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "overrideSurfaceFormatRGB8toRGBA8");
}

inline PlatformParameters WithPackLastRowSeparatelyForPaddingInclusion(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "pack_last_row_separately_for_padding_inclusion");
    return pout;
}

inline PlatformParameters WithNoPackLastRowSeparatelyForPaddingInclusion(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "pack_last_row_separately_for_padding_inclusion");
    return pout;
}

inline bool IsWithPackLastRowSeparatelyForPaddingInclusion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "pack_last_row_separately_for_padding_inclusion");
}

inline bool IsWithNoPackLastRowSeparatelyForPaddingInclusion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "pack_last_row_separately_for_padding_inclusion");
}

inline PlatformParameters WithPackOverlappingRowsSeparatelyPackBuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "pack_overlapping_rows_separately_pack_buffer");
    return pout;
}

inline PlatformParameters WithNoPackOverlappingRowsSeparatelyPackBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "pack_overlapping_rows_separately_pack_buffer");
    return pout;
}

inline bool IsWithPackOverlappingRowsSeparatelyPackBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "pack_overlapping_rows_separately_pack_buffer");
}

inline bool IsWithNoPackOverlappingRowsSeparatelyPackBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "pack_overlapping_rows_separately_pack_buffer");
}

inline PlatformParameters WithPadBuffersToMaxVertexAttribStride(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("padBuffersToMaxVertexAttribStride");
    return pout;
}

inline PlatformParameters WithNoPadBuffersToMaxVertexAttribStride(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("padBuffersToMaxVertexAttribStride");
    return pout;
}

inline bool IsWithPadBuffersToMaxVertexAttribStride(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "padBuffersToMaxVertexAttribStride");
}

inline bool IsWithNoPadBuffersToMaxVertexAttribStride(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "padBuffersToMaxVertexAttribStride");
}

inline PlatformParameters WithPerFrameWindowSizeQuery(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("perFrameWindowSizeQuery");
    return pout;
}

inline PlatformParameters WithNoPerFrameWindowSizeQuery(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("perFrameWindowSizeQuery");
    return pout;
}

inline bool IsWithPerFrameWindowSizeQuery(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "perFrameWindowSizeQuery");
}

inline bool IsWithNoPerFrameWindowSizeQuery(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "perFrameWindowSizeQuery");
}

inline PlatformParameters WithPersistentlyMappedBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("persistentlyMappedBuffers");
    return pout;
}

inline PlatformParameters WithNoPersistentlyMappedBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("persistentlyMappedBuffers");
    return pout;
}

inline bool IsWithPersistentlyMappedBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "persistentlyMappedBuffers");
}

inline bool IsWithNoPersistentlyMappedBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "persistentlyMappedBuffers");
}

inline PlatformParameters WithPreAddTexelFetchOffsets(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("pre_add_texel_fetch_offsets");
    return pout;
}

inline PlatformParameters WithNoPreAddTexelFetchOffsets(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("pre_add_texel_fetch_offsets");
    return pout;
}

inline bool IsWithPreAddTexelFetchOffsets(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "pre_add_texel_fetch_offsets");
}

inline bool IsWithNoPreAddTexelFetchOffsets(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "pre_add_texel_fetch_offsets");
}

inline PlatformParameters WithPreferAggregateBarrierCalls(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("preferAggregateBarrierCalls");
    return pout;
}

inline PlatformParameters WithNoPreferAggregateBarrierCalls(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("preferAggregateBarrierCalls");
    return pout;
}

inline bool IsWithPreferAggregateBarrierCalls(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "preferAggregateBarrierCalls");
}

inline bool IsWithNoPreferAggregateBarrierCalls(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "preferAggregateBarrierCalls");
}

inline PlatformParameters WithPreferCPUForBufferSubData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("preferCPUForBufferSubData");
    return pout;
}

inline PlatformParameters WithNoPreferCPUForBufferSubData(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("preferCPUForBufferSubData");
    return pout;
}

inline bool IsWithPreferCPUForBufferSubData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "preferCPUForBufferSubData");
}

inline bool IsWithNoPreferCPUForBufferSubData(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "preferCPUForBufferSubData");
}

inline PlatformParameters WithPreferDrawClearOverVkCmdClearAttachments(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "preferDrawClearOverVkCmdClearAttachments");
    return pout;
}

inline PlatformParameters WithNoPreferDrawClearOverVkCmdClearAttachments(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "preferDrawClearOverVkCmdClearAttachments");
    return pout;
}

inline bool IsWithPreferDrawClearOverVkCmdClearAttachments(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "preferDrawClearOverVkCmdClearAttachments");
}

inline bool IsWithNoPreferDrawClearOverVkCmdClearAttachments(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "preferDrawClearOverVkCmdClearAttachments");
}

inline PlatformParameters WithPreferSkippingInvalidateForEmulatedFormats(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "preferSkippingInvalidateForEmulatedFormats");
    return pout;
}

inline PlatformParameters WithNoPreferSkippingInvalidateForEmulatedFormats(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "preferSkippingInvalidateForEmulatedFormats");
    return pout;
}

inline bool IsWithPreferSkippingInvalidateForEmulatedFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "preferSkippingInvalidateForEmulatedFormats");
}

inline bool IsWithNoPreferSkippingInvalidateForEmulatedFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "preferSkippingInvalidateForEmulatedFormats");
}

inline PlatformParameters WithPreferSubmitAtFBOBoundary(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("preferSubmitAtFBOBoundary");
    return pout;
}

inline PlatformParameters WithNoPreferSubmitAtFBOBoundary(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("preferSubmitAtFBOBoundary");
    return pout;
}

inline bool IsWithPreferSubmitAtFBOBoundary(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "preferSubmitAtFBOBoundary");
}

inline bool IsWithNoPreferSubmitAtFBOBoundary(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "preferSubmitAtFBOBoundary");
}

inline PlatformParameters WithPromotePackedFormatsTo8BitPerChannel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "promote_packed_formats_to_8_bit_per_channel");
    return pout;
}

inline PlatformParameters WithNoPromotePackedFormatsTo8BitPerChannel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "promote_packed_formats_to_8_bit_per_channel");
    return pout;
}

inline bool IsWithPromotePackedFormatsTo8BitPerChannel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "promote_packed_formats_to_8_bit_per_channel");
}

inline bool IsWithNoPromotePackedFormatsTo8BitPerChannel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "promote_packed_formats_to_8_bit_per_channel");
}

inline PlatformParameters WithProvokingVertex(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("provokingVertex");
    return pout;
}

inline PlatformParameters WithNoProvokingVertex(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("provokingVertex");
    return pout;
}

inline bool IsWithProvokingVertex(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "provokingVertex");
}

inline bool IsWithNoProvokingVertex(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "provokingVertex");
}

inline PlatformParameters WithQueryCounterBitsGeneratesErrors(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("query_counter_bits_generates_errors");
    return pout;
}

inline PlatformParameters WithNoQueryCounterBitsGeneratesErrors(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("query_counter_bits_generates_errors");
    return pout;
}

inline bool IsWithQueryCounterBitsGeneratesErrors(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "query_counter_bits_generates_errors");
}

inline bool IsWithNoQueryCounterBitsGeneratesErrors(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "query_counter_bits_generates_errors");
}

inline PlatformParameters WithReadPixelsUsingImplementationColorReadFormatForNorm16(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "read_pixels_using_implementation_color_read_format");
    return pout;
}

inline PlatformParameters WithNoReadPixelsUsingImplementationColorReadFormatForNorm16(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "read_pixels_using_implementation_color_read_format");
    return pout;
}

inline bool IsWithReadPixelsUsingImplementationColorReadFormatForNorm16(
    const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "read_pixels_using_implementation_color_read_format");
}

inline bool IsWithNoReadPixelsUsingImplementationColorReadFormatForNorm16(
    const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "read_pixels_using_implementation_color_read_format");
}

inline PlatformParameters WithReapplyUBOBindingsAfterUsingBinaryProgram(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "reapply_ubo_bindings_after_using_binary_program");
    return pout;
}

inline PlatformParameters WithNoReapplyUBOBindingsAfterUsingBinaryProgram(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "reapply_ubo_bindings_after_using_binary_program");
    return pout;
}

inline bool IsWithReapplyUBOBindingsAfterUsingBinaryProgram(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "reapply_ubo_bindings_after_using_binary_program");
}

inline bool IsWithNoReapplyUBOBindingsAfterUsingBinaryProgram(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "reapply_ubo_bindings_after_using_binary_program");
}

inline PlatformParameters WithRegenerateStructNames(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("regenerate_struct_names");
    return pout;
}

inline PlatformParameters WithNoRegenerateStructNames(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("regenerate_struct_names");
    return pout;
}

inline bool IsWithRegenerateStructNames(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "regenerate_struct_names");
}

inline bool IsWithNoRegenerateStructNames(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "regenerate_struct_names");
}

inline PlatformParameters WithRemoveDynamicIndexingOfSwizzledVector(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "remove_dynamic_indexing_of_swizzled_vector");
    return pout;
}

inline PlatformParameters WithNoRemoveDynamicIndexingOfSwizzledVector(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "remove_dynamic_indexing_of_swizzled_vector");
    return pout;
}

inline bool IsWithRemoveDynamicIndexingOfSwizzledVector(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "remove_dynamic_indexing_of_swizzled_vector");
}

inline bool IsWithNoRemoveDynamicIndexingOfSwizzledVector(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "remove_dynamic_indexing_of_swizzled_vector");
}

inline PlatformParameters WithRemoveInvariantAndCentroidForESSL3(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("remove_invarient_and_centroid_for_essl3");
    return pout;
}

inline PlatformParameters WithNoRemoveInvariantAndCentroidForESSL3(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "remove_invarient_and_centroid_for_essl3");
    return pout;
}

inline bool IsWithRemoveInvariantAndCentroidForESSL3(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "remove_invarient_and_centroid_for_essl3");
}

inline bool IsWithNoRemoveInvariantAndCentroidForESSL3(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "remove_invarient_and_centroid_for_essl3");
}

inline PlatformParameters WithResetTexImage2DBaseLevel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("reset_teximage2d_base_level");
    return pout;
}

inline PlatformParameters WithNoResetTexImage2DBaseLevel(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("reset_teximage2d_base_level");
    return pout;
}

inline bool IsWithResetTexImage2DBaseLevel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "reset_teximage2d_base_level");
}

inline bool IsWithNoResetTexImage2DBaseLevel(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "reset_teximage2d_base_level");
}

inline PlatformParameters WithRetainSpirvDebugInfo(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("retainSpirvDebugInfo");
    return pout;
}

inline PlatformParameters WithNoRetainSpirvDebugInfo(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("retainSpirvDebugInfo");
    return pout;
}

inline bool IsWithRetainSpirvDebugInfo(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "retainSpirvDebugInfo");
}

inline bool IsWithNoRetainSpirvDebugInfo(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "retainSpirvDebugInfo");
}

inline PlatformParameters WithRewriteFloatUnaryMinusOperator(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("rewrite_float_unary_minus_operator");
    return pout;
}

inline PlatformParameters WithNoRewriteFloatUnaryMinusOperator(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("rewrite_float_unary_minus_operator");
    return pout;
}

inline bool IsWithRewriteFloatUnaryMinusOperator(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rewrite_float_unary_minus_operator");
}

inline bool IsWithNoRewriteFloatUnaryMinusOperator(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rewrite_float_unary_minus_operator");
}

inline PlatformParameters WithRewriteRepeatedAssignToSwizzled(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("rewrite_repeated_assign_to_swizzled");
    return pout;
}

inline PlatformParameters WithNoRewriteRepeatedAssignToSwizzled(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("rewrite_repeated_assign_to_swizzled");
    return pout;
}

inline bool IsWithRewriteRepeatedAssignToSwizzled(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rewrite_repeated_assign_to_swizzled");
}

inline bool IsWithNoRewriteRepeatedAssignToSwizzled(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rewrite_repeated_assign_to_swizzled");
}

inline PlatformParameters WithRewriteRowMajorMatrices(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("rewrite_row_major_matrices");
    return pout;
}

inline PlatformParameters WithNoRewriteRowMajorMatrices(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("rewrite_row_major_matrices");
    return pout;
}

inline bool IsWithRewriteRowMajorMatrices(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rewrite_row_major_matrices");
}

inline bool IsWithNoRewriteRowMajorMatrices(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rewrite_row_major_matrices");
}

inline PlatformParameters WithRewriteUnaryMinusOperator(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("rewrite_unary_minus_operator");
    return pout;
}

inline PlatformParameters WithNoRewriteUnaryMinusOperator(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("rewrite_unary_minus_operator");
    return pout;
}

inline bool IsWithRewriteUnaryMinusOperator(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rewrite_unary_minus_operator");
}

inline bool IsWithNoRewriteUnaryMinusOperator(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rewrite_unary_minus_operator");
}

inline PlatformParameters WithRgbDXT1TexturesSampleZeroAlpha(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("rgb_dxt1_textures_sample_zero_alpha");
    return pout;
}

inline PlatformParameters WithNoRgbDXT1TexturesSampleZeroAlpha(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("rgb_dxt1_textures_sample_zero_alpha");
    return pout;
}

inline bool IsWithRgbDXT1TexturesSampleZeroAlpha(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rgb_dxt1_textures_sample_zero_alpha");
}

inline bool IsWithNoRgbDXT1TexturesSampleZeroAlpha(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rgb_dxt1_textures_sample_zero_alpha");
}

inline PlatformParameters WithRgba4IsNotSupportedForColorRendering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "rgba4_is_not_supported_for_color_rendering");
    return pout;
}

inline PlatformParameters WithNoRgba4IsNotSupportedForColorRendering(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "rgba4_is_not_supported_for_color_rendering");
    return pout;
}

inline bool IsWithRgba4IsNotSupportedForColorRendering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "rgba4_is_not_supported_for_color_rendering");
}

inline bool IsWithNoRgba4IsNotSupportedForColorRendering(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "rgba4_is_not_supported_for_color_rendering");
}

inline PlatformParameters WithSanitizeAmdGpuRendererString(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("sanitize_amdgpu_renderer_string");
    return pout;
}

inline PlatformParameters WithNoSanitizeAmdGpuRendererString(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("sanitize_amdgpu_renderer_string");
    return pout;
}

inline bool IsWithSanitizeAmdGpuRendererString(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "sanitize_amdgpu_renderer_string");
}

inline bool IsWithNoSanitizeAmdGpuRendererString(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "sanitize_amdgpu_renderer_string");
}

inline PlatformParameters WithScalarizeVecAndMatConstructorArgs(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("scalarize_vec_and_mat_constructor_args");
    return pout;
}

inline PlatformParameters WithNoScalarizeVecAndMatConstructorArgs(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("scalarize_vec_and_mat_constructor_args");
    return pout;
}

inline bool IsWithScalarizeVecAndMatConstructorArgs(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "scalarize_vec_and_mat_constructor_args");
}

inline bool IsWithNoScalarizeVecAndMatConstructorArgs(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "scalarize_vec_and_mat_constructor_args");
}

inline PlatformParameters WithSelectViewInGeometryShader(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("select_view_in_geometry_shader");
    return pout;
}

inline PlatformParameters WithNoSelectViewInGeometryShader(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("select_view_in_geometry_shader");
    return pout;
}

inline bool IsWithSelectViewInGeometryShader(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "select_view_in_geometry_shader");
}

inline bool IsWithNoSelectViewInGeometryShader(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "select_view_in_geometry_shader");
}

inline PlatformParameters WithSetDataFasterThanImageUpload(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("set_data_faster_than_image_upload");
    return pout;
}

inline PlatformParameters WithNoSetDataFasterThanImageUpload(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("set_data_faster_than_image_upload");
    return pout;
}

inline bool IsWithSetDataFasterThanImageUpload(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "set_data_faster_than_image_upload");
}

inline bool IsWithNoSetDataFasterThanImageUpload(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "set_data_faster_than_image_upload");
}

inline PlatformParameters WithSetPrimitiveRestartFixedIndexForDrawArrays(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "set_primitive_restart_fixed_index_for_draw_arrays");
    return pout;
}

inline PlatformParameters WithNoSetPrimitiveRestartFixedIndexForDrawArrays(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "set_primitive_restart_fixed_index_for_draw_arrays");
    return pout;
}

inline bool IsWithSetPrimitiveRestartFixedIndexForDrawArrays(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "set_primitive_restart_fixed_index_for_draw_arrays");
}

inline bool IsWithNoSetPrimitiveRestartFixedIndexForDrawArrays(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "set_primitive_restart_fixed_index_for_draw_arrays");
}

inline PlatformParameters WithSetZeroLevelBeforeGenerateMipmap(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("set_zero_level_before_generating_mipmap");
    return pout;
}

inline PlatformParameters WithNoSetZeroLevelBeforeGenerateMipmap(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "set_zero_level_before_generating_mipmap");
    return pout;
}

inline bool IsWithSetZeroLevelBeforeGenerateMipmap(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "set_zero_level_before_generating_mipmap");
}

inline bool IsWithNoSetZeroLevelBeforeGenerateMipmap(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "set_zero_level_before_generating_mipmap");
}

inline PlatformParameters WithShadowBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("shadowBuffers");
    return pout;
}

inline PlatformParameters WithNoShadowBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("shadowBuffers");
    return pout;
}

inline bool IsWithShadowBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "shadowBuffers");
}

inline bool IsWithNoShadowBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "shadowBuffers");
}

inline PlatformParameters WithShiftInstancedArrayDataWithExtraOffset(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("shift_instanced_array_data_with_offset");
    return pout;
}

inline PlatformParameters WithNoShiftInstancedArrayDataWithExtraOffset(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("shift_instanced_array_data_with_offset");
    return pout;
}

inline bool IsWithShiftInstancedArrayDataWithExtraOffset(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "shift_instanced_array_data_with_offset");
}

inline bool IsWithNoShiftInstancedArrayDataWithExtraOffset(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "shift_instanced_array_data_with_offset");
}

inline PlatformParameters WithSkipVSConstantRegisterZero(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("skip_vs_constant_register_zero");
    return pout;
}

inline PlatformParameters WithNoSkipVSConstantRegisterZero(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("skip_vs_constant_register_zero");
    return pout;
}

inline bool IsWithSkipVSConstantRegisterZero(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "skip_vs_constant_register_zero");
}

inline bool IsWithNoSkipVSConstantRegisterZero(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "skip_vs_constant_register_zero");
}

inline PlatformParameters WithSupportsAndroidHardwareBuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsAndroidHardwareBuffer");
    return pout;
}

inline PlatformParameters WithNoSupportsAndroidHardwareBuffer(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsAndroidHardwareBuffer");
    return pout;
}

inline bool IsWithSupportsAndroidHardwareBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsAndroidHardwareBuffer");
}

inline bool IsWithNoSupportsAndroidHardwareBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsAndroidHardwareBuffer");
}

inline PlatformParameters WithSupportsAndroidNativeFenceSync(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsAndroidNativeFenceSync");
    return pout;
}

inline PlatformParameters WithNoSupportsAndroidNativeFenceSync(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsAndroidNativeFenceSync");
    return pout;
}

inline bool IsWithSupportsAndroidNativeFenceSync(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsAndroidNativeFenceSync");
}

inline bool IsWithNoSupportsAndroidNativeFenceSync(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsAndroidNativeFenceSync");
}

inline PlatformParameters WithSupportsBlendOperationAdvanced(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsBlendOperationAdvanced");
    return pout;
}

inline PlatformParameters WithNoSupportsBlendOperationAdvanced(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsBlendOperationAdvanced");
    return pout;
}

inline bool IsWithSupportsBlendOperationAdvanced(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsBlendOperationAdvanced");
}

inline bool IsWithNoSupportsBlendOperationAdvanced(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsBlendOperationAdvanced");
}

inline PlatformParameters WithSupportsCustomBorderColor(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsCustomBorderColor");
    return pout;
}

inline PlatformParameters WithNoSupportsCustomBorderColor(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsCustomBorderColor");
    return pout;
}

inline bool IsWithSupportsCustomBorderColor(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsCustomBorderColor");
}

inline bool IsWithNoSupportsCustomBorderColor(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsCustomBorderColor");
}

inline PlatformParameters WithSupportsDepthClipControl(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsDepthClipControl");
    return pout;
}

inline PlatformParameters WithNoSupportsDepthClipControl(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsDepthClipControl");
    return pout;
}

inline bool IsWithSupportsDepthClipControl(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsDepthClipControl");
}

inline bool IsWithNoSupportsDepthClipControl(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsDepthClipControl");
}

inline PlatformParameters WithSupportsDepthStencilResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsDepthStencilResolve");
    return pout;
}

inline PlatformParameters WithNoSupportsDepthStencilResolve(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsDepthStencilResolve");
    return pout;
}

inline bool IsWithSupportsDepthStencilResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsDepthStencilResolve");
}

inline bool IsWithNoSupportsDepthStencilResolve(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsDepthStencilResolve");
}

inline PlatformParameters WithSupportsExternalFenceCapabilities(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalFenceCapabilities");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalFenceCapabilities(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalFenceCapabilities");
    return pout;
}

inline bool IsWithSupportsExternalFenceCapabilities(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalFenceCapabilities");
}

inline bool IsWithNoSupportsExternalFenceCapabilities(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalFenceCapabilities");
}

inline PlatformParameters WithSupportsExternalFenceFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalFenceFd");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalFenceFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalFenceFd");
    return pout;
}

inline bool IsWithSupportsExternalFenceFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalFenceFd");
}

inline bool IsWithNoSupportsExternalFenceFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalFenceFd");
}

inline PlatformParameters WithSupportsExternalMemoryDmaBufAndModifiers(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "supportsExternalMemoryDmaBufAndModifiers");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalMemoryDmaBufAndModifiers(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "supportsExternalMemoryDmaBufAndModifiers");
    return pout;
}

inline bool IsWithSupportsExternalMemoryDmaBufAndModifiers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalMemoryDmaBufAndModifiers");
}

inline bool IsWithNoSupportsExternalMemoryDmaBufAndModifiers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalMemoryDmaBufAndModifiers");
}

inline PlatformParameters WithSupportsExternalMemoryFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalMemoryFd");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalMemoryFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalMemoryFd");
    return pout;
}

inline bool IsWithSupportsExternalMemoryFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalMemoryFd");
}

inline bool IsWithNoSupportsExternalMemoryFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalMemoryFd");
}

inline PlatformParameters WithSupportsExternalMemoryFuchsia(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalMemoryFuchsia");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalMemoryFuchsia(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalMemoryFuchsia");
    return pout;
}

inline bool IsWithSupportsExternalMemoryFuchsia(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalMemoryFuchsia");
}

inline bool IsWithNoSupportsExternalMemoryFuchsia(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalMemoryFuchsia");
}

inline PlatformParameters WithSupportsExternalMemoryHost(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalMemoryHost");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalMemoryHost(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalMemoryHost");
    return pout;
}

inline bool IsWithSupportsExternalMemoryHost(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalMemoryHost");
}

inline bool IsWithNoSupportsExternalMemoryHost(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalMemoryHost");
}

inline PlatformParameters WithSupportsExternalSemaphoreCapabilities(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalSemaphoreCapabilities");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalSemaphoreCapabilities(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalSemaphoreCapabilities");
    return pout;
}

inline bool IsWithSupportsExternalSemaphoreCapabilities(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalSemaphoreCapabilities");
}

inline bool IsWithNoSupportsExternalSemaphoreCapabilities(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalSemaphoreCapabilities");
}

inline PlatformParameters WithSupportsExternalSemaphoreFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalSemaphoreFd");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalSemaphoreFd(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalSemaphoreFd");
    return pout;
}

inline bool IsWithSupportsExternalSemaphoreFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalSemaphoreFd");
}

inline bool IsWithNoSupportsExternalSemaphoreFd(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalSemaphoreFd");
}

inline PlatformParameters WithSupportsExternalSemaphoreFuchsia(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsExternalSemaphoreFuchsia");
    return pout;
}

inline PlatformParameters WithNoSupportsExternalSemaphoreFuchsia(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsExternalSemaphoreFuchsia");
    return pout;
}

inline bool IsWithSupportsExternalSemaphoreFuchsia(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsExternalSemaphoreFuchsia");
}

inline bool IsWithNoSupportsExternalSemaphoreFuchsia(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsExternalSemaphoreFuchsia");
}

inline PlatformParameters WithSupportsFilteringPrecision(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsFilteringPrecision");
    return pout;
}

inline PlatformParameters WithNoSupportsFilteringPrecision(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsFilteringPrecision");
    return pout;
}

inline bool IsWithSupportsFilteringPrecision(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsFilteringPrecision");
}

inline bool IsWithNoSupportsFilteringPrecision(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsFilteringPrecision");
}

inline PlatformParameters WithSupportsGGPFrameToken(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsGGPFrameToken");
    return pout;
}

inline PlatformParameters WithNoSupportsGGPFrameToken(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsGGPFrameToken");
    return pout;
}

inline bool IsWithSupportsGGPFrameToken(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsGGPFrameToken");
}

inline bool IsWithNoSupportsGGPFrameToken(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsGGPFrameToken");
}

inline PlatformParameters WithSupportsGeometryStreamsCapability(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsGeometryStreamsCapability");
    return pout;
}

inline PlatformParameters WithNoSupportsGeometryStreamsCapability(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsGeometryStreamsCapability");
    return pout;
}

inline bool IsWithSupportsGeometryStreamsCapability(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsGeometryStreamsCapability");
}

inline bool IsWithNoSupportsGeometryStreamsCapability(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsGeometryStreamsCapability");
}

inline PlatformParameters WithSupportsHostQueryReset(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsHostQueryReset");
    return pout;
}

inline PlatformParameters WithNoSupportsHostQueryReset(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsHostQueryReset");
    return pout;
}

inline bool IsWithSupportsHostQueryReset(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsHostQueryReset");
}

inline bool IsWithNoSupportsHostQueryReset(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsHostQueryReset");
}

inline PlatformParameters WithSupportsImageCubeArray(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsImageCubeArray");
    return pout;
}

inline PlatformParameters WithNoSupportsImageCubeArray(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsImageCubeArray");
    return pout;
}

inline bool IsWithSupportsImageCubeArray(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsImageCubeArray");
}

inline bool IsWithNoSupportsImageCubeArray(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsImageCubeArray");
}

inline PlatformParameters WithSupportsImageFormatList(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsImageFormatList");
    return pout;
}

inline PlatformParameters WithNoSupportsImageFormatList(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsImageFormatList");
    return pout;
}

inline bool IsWithSupportsImageFormatList(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsImageFormatList");
}

inline bool IsWithNoSupportsImageFormatList(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsImageFormatList");
}

inline PlatformParameters WithSupportsIncrementalPresent(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsIncrementalPresent");
    return pout;
}

inline PlatformParameters WithNoSupportsIncrementalPresent(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsIncrementalPresent");
    return pout;
}

inline bool IsWithSupportsIncrementalPresent(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsIncrementalPresent");
}

inline bool IsWithNoSupportsIncrementalPresent(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsIncrementalPresent");
}

inline PlatformParameters WithSupportsIndexTypeUint8(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsIndexTypeUint8");
    return pout;
}

inline PlatformParameters WithNoSupportsIndexTypeUint8(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsIndexTypeUint8");
    return pout;
}

inline bool IsWithSupportsIndexTypeUint8(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsIndexTypeUint8");
}

inline bool IsWithNoSupportsIndexTypeUint8(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsIndexTypeUint8");
}

inline PlatformParameters WithSupportsLockSurfaceExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsLockSurfaceExtension");
    return pout;
}

inline PlatformParameters WithNoSupportsLockSurfaceExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsLockSurfaceExtension");
    return pout;
}

inline bool IsWithSupportsLockSurfaceExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsLockSurfaceExtension");
}

inline bool IsWithNoSupportsLockSurfaceExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsLockSurfaceExtension");
}

inline PlatformParameters WithSupportsMultiDrawIndirect(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsMultiDrawIndirect");
    return pout;
}

inline PlatformParameters WithNoSupportsMultiDrawIndirect(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsMultiDrawIndirect");
    return pout;
}

inline bool IsWithSupportsMultiDrawIndirect(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsMultiDrawIndirect");
}

inline bool IsWithNoSupportsMultiDrawIndirect(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsMultiDrawIndirect");
}

inline PlatformParameters WithSupportsMultisampledRenderToSingleSampled(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "supportsMultisampledRenderToSingleSampled");
    return pout;
}

inline PlatformParameters WithNoSupportsMultisampledRenderToSingleSampled(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "supportsMultisampledRenderToSingleSampled");
    return pout;
}

inline bool IsWithSupportsMultisampledRenderToSingleSampled(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsMultisampledRenderToSingleSampled");
}

inline bool IsWithNoSupportsMultisampledRenderToSingleSampled(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsMultisampledRenderToSingleSampled");
}

inline PlatformParameters WithSupportsMultiview(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsMultiview");
    return pout;
}

inline PlatformParameters WithNoSupportsMultiview(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsMultiview");
    return pout;
}

inline bool IsWithSupportsMultiview(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "supportsMultiview");
}

inline bool IsWithNoSupportsMultiview(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "supportsMultiview");
}

inline PlatformParameters WithSupportsNegativeViewport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsNegativeViewport");
    return pout;
}

inline PlatformParameters WithNoSupportsNegativeViewport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsNegativeViewport");
    return pout;
}

inline bool IsWithSupportsNegativeViewport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsNegativeViewport");
}

inline bool IsWithNoSupportsNegativeViewport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsNegativeViewport");
}

inline PlatformParameters WithSupportsPipelineStatisticsQuery(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsPipelineStatisticsQuery");
    return pout;
}

inline PlatformParameters WithNoSupportsPipelineStatisticsQuery(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsPipelineStatisticsQuery");
    return pout;
}

inline bool IsWithSupportsPipelineStatisticsQuery(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsPipelineStatisticsQuery");
}

inline bool IsWithNoSupportsPipelineStatisticsQuery(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsPipelineStatisticsQuery");
}

inline PlatformParameters WithSupportsProtectedMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsProtectedMemory");
    return pout;
}

inline PlatformParameters WithNoSupportsProtectedMemory(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsProtectedMemory");
    return pout;
}

inline bool IsWithSupportsProtectedMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsProtectedMemory");
}

inline bool IsWithNoSupportsProtectedMemory(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsProtectedMemory");
}

inline PlatformParameters WithSupportsRenderPassLoadStoreOpNone(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsRenderPassLoadStoreOpNone");
    return pout;
}

inline PlatformParameters WithNoSupportsRenderPassLoadStoreOpNone(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsRenderPassLoadStoreOpNone");
    return pout;
}

inline bool IsWithSupportsRenderPassLoadStoreOpNone(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsRenderPassLoadStoreOpNone");
}

inline bool IsWithNoSupportsRenderPassLoadStoreOpNone(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsRenderPassLoadStoreOpNone");
}

inline PlatformParameters WithSupportsRenderPassStoreOpNoneQCOM(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsRenderPassStoreOpNoneQCOM");
    return pout;
}

inline PlatformParameters WithNoSupportsRenderPassStoreOpNoneQCOM(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsRenderPassStoreOpNoneQCOM");
    return pout;
}

inline bool IsWithSupportsRenderPassStoreOpNoneQCOM(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsRenderPassStoreOpNoneQCOM");
}

inline bool IsWithNoSupportsRenderPassStoreOpNoneQCOM(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsRenderPassStoreOpNoneQCOM");
}

inline PlatformParameters WithSupportsRenderpass2(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsRenderpass2");
    return pout;
}

inline PlatformParameters WithNoSupportsRenderpass2(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsRenderpass2");
    return pout;
}

inline bool IsWithSupportsRenderpass2(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "supportsRenderpass2");
}

inline bool IsWithNoSupportsRenderpass2(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "supportsRenderpass2");
}

inline PlatformParameters WithSupportsShaderFloat16(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsShaderFloat16");
    return pout;
}

inline PlatformParameters WithNoSupportsShaderFloat16(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsShaderFloat16");
    return pout;
}

inline bool IsWithSupportsShaderFloat16(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsShaderFloat16");
}

inline bool IsWithNoSupportsShaderFloat16(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsShaderFloat16");
}

inline PlatformParameters WithSupportsShaderFramebufferFetch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsShaderFramebufferFetch");
    return pout;
}

inline PlatformParameters WithNoSupportsShaderFramebufferFetch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsShaderFramebufferFetch");
    return pout;
}

inline bool IsWithSupportsShaderFramebufferFetch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsShaderFramebufferFetch");
}

inline bool IsWithNoSupportsShaderFramebufferFetch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsShaderFramebufferFetch");
}

inline PlatformParameters WithSupportsShaderFramebufferFetchNonCoherent(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "supportsShaderFramebufferFetchNonCoherent");
    return pout;
}

inline PlatformParameters WithNoSupportsShaderFramebufferFetchNonCoherent(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "supportsShaderFramebufferFetchNonCoherent");
    return pout;
}

inline bool IsWithSupportsShaderFramebufferFetchNonCoherent(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsShaderFramebufferFetchNonCoherent");
}

inline bool IsWithNoSupportsShaderFramebufferFetchNonCoherent(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsShaderFramebufferFetchNonCoherent");
}

inline PlatformParameters WithSupportsShaderStencilExport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsShaderStencilExport");
    return pout;
}

inline PlatformParameters WithNoSupportsShaderStencilExport(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsShaderStencilExport");
    return pout;
}

inline bool IsWithSupportsShaderStencilExport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsShaderStencilExport");
}

inline bool IsWithNoSupportsShaderStencilExport(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsShaderStencilExport");
}

inline PlatformParameters WithSupportsSharedPresentableImageExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsSharedPresentableImageExtension");
    return pout;
}

inline PlatformParameters WithNoSupportsSharedPresentableImageExtension(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "supportsSharedPresentableImageExtension");
    return pout;
}

inline bool IsWithSupportsSharedPresentableImageExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsSharedPresentableImageExtension");
}

inline bool IsWithNoSupportsSharedPresentableImageExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsSharedPresentableImageExtension");
}

inline PlatformParameters WithSupportsSurfaceCapabilities2Extension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsSurfaceCapabilities2Extension");
    return pout;
}

inline PlatformParameters WithNoSupportsSurfaceCapabilities2Extension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsSurfaceCapabilities2Extension");
    return pout;
}

inline bool IsWithSupportsSurfaceCapabilities2Extension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsSurfaceCapabilities2Extension");
}

inline bool IsWithNoSupportsSurfaceCapabilities2Extension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsSurfaceCapabilities2Extension");
}

inline PlatformParameters WithSupportsSurfaceProtectedCapabilitiesExtension(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "supportsSurfaceProtectedCapabilitiesExtension");
    return pout;
}

inline PlatformParameters WithNoSupportsSurfaceProtectedCapabilitiesExtension(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "supportsSurfaceProtectedCapabilitiesExtension");
    return pout;
}

inline bool IsWithSupportsSurfaceProtectedCapabilitiesExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsSurfaceProtectedCapabilitiesExtension");
}

inline bool IsWithNoSupportsSurfaceProtectedCapabilitiesExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsSurfaceProtectedCapabilitiesExtension");
}

inline PlatformParameters WithSupportsSurfaceProtectedSwapchains(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsSurfaceProtectedSwapchains");
    return pout;
}

inline PlatformParameters WithNoSupportsSurfaceProtectedSwapchains(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsSurfaceProtectedSwapchains");
    return pout;
}

inline bool IsWithSupportsSurfaceProtectedSwapchains(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsSurfaceProtectedSwapchains");
}

inline bool IsWithNoSupportsSurfaceProtectedSwapchains(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsSurfaceProtectedSwapchains");
}

inline PlatformParameters WithSupportsSurfacelessQueryExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsSurfacelessQueryExtension");
    return pout;
}

inline PlatformParameters WithNoSupportsSurfacelessQueryExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsSurfacelessQueryExtension");
    return pout;
}

inline bool IsWithSupportsSurfacelessQueryExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsSurfacelessQueryExtension");
}

inline bool IsWithNoSupportsSurfacelessQueryExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsSurfacelessQueryExtension");
}

inline PlatformParameters WithSupportsTransformFeedbackExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsTransformFeedbackExtension");
    return pout;
}

inline PlatformParameters WithNoSupportsTransformFeedbackExtension(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsTransformFeedbackExtension");
    return pout;
}

inline bool IsWithSupportsTransformFeedbackExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsTransformFeedbackExtension");
}

inline bool IsWithNoSupportsTransformFeedbackExtension(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsTransformFeedbackExtension");
}

inline PlatformParameters WithSupportsYUVSamplerConversion(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("supportsYUVSamplerConversion");
    return pout;
}

inline PlatformParameters WithNoSupportsYUVSamplerConversion(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("supportsYUVSamplerConversion");
    return pout;
}

inline bool IsWithSupportsYUVSamplerConversion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "supportsYUVSamplerConversion");
}

inline bool IsWithNoSupportsYUVSamplerConversion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "supportsYUVSamplerConversion");
}

inline PlatformParameters WithSwapbuffersOnFlushOrFinishWithSingleBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "swapbuffersOnFlushOrFinishWithSingleBuffer");
    return pout;
}

inline PlatformParameters WithNoSwapbuffersOnFlushOrFinishWithSingleBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "swapbuffersOnFlushOrFinishWithSingleBuffer");
    return pout;
}

inline bool IsWithSwapbuffersOnFlushOrFinishWithSingleBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "swapbuffersOnFlushOrFinishWithSingleBuffer");
}

inline bool IsWithNoSwapbuffersOnFlushOrFinishWithSingleBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "swapbuffersOnFlushOrFinishWithSingleBuffer");
}

inline PlatformParameters WithSyncVertexArraysToDefault(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("sync_vertex_arrays_to_default");
    return pout;
}

inline PlatformParameters WithNoSyncVertexArraysToDefault(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("sync_vertex_arrays_to_default");
    return pout;
}

inline bool IsWithSyncVertexArraysToDefault(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "sync_vertex_arrays_to_default");
}

inline bool IsWithNoSyncVertexArraysToDefault(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "sync_vertex_arrays_to_default");
}

inline PlatformParameters WithUnbindFBOOnContextSwitch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("unbind_fbo_before_switching_context");
    return pout;
}

inline PlatformParameters WithNoUnbindFBOOnContextSwitch(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("unbind_fbo_before_switching_context");
    return pout;
}

inline bool IsWithUnbindFBOOnContextSwitch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "unbind_fbo_before_switching_context");
}

inline bool IsWithNoUnbindFBOOnContextSwitch(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "unbind_fbo_before_switching_context");
}

inline PlatformParameters WithUnfoldShortCircuits(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("unfold_short_circuits");
    return pout;
}

inline PlatformParameters WithNoUnfoldShortCircuits(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("unfold_short_circuits");
    return pout;
}

inline bool IsWithUnfoldShortCircuits(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "unfold_short_circuits");
}

inline bool IsWithNoUnfoldShortCircuits(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "unfold_short_circuits");
}

inline PlatformParameters WithUnpackLastRowSeparatelyForPaddingInclusion(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "unpack_last_row_separately_for_padding_inclusion");
    return pout;
}

inline PlatformParameters WithNoUnpackLastRowSeparatelyForPaddingInclusion(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "unpack_last_row_separately_for_padding_inclusion");
    return pout;
}

inline bool IsWithUnpackLastRowSeparatelyForPaddingInclusion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "unpack_last_row_separately_for_padding_inclusion");
}

inline bool IsWithNoUnpackLastRowSeparatelyForPaddingInclusion(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "unpack_last_row_separately_for_padding_inclusion");
}

inline PlatformParameters WithUnpackOverlappingRowsSeparatelyUnpackBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "unpack_overlapping_rows_separately_unpack_buffer");
    return pout;
}

inline PlatformParameters WithNoUnpackOverlappingRowsSeparatelyUnpackBuffer(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "unpack_overlapping_rows_separately_unpack_buffer");
    return pout;
}

inline bool IsWithUnpackOverlappingRowsSeparatelyUnpackBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "unpack_overlapping_rows_separately_unpack_buffer");
}

inline bool IsWithNoUnpackOverlappingRowsSeparatelyUnpackBuffer(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "unpack_overlapping_rows_separately_unpack_buffer");
}

inline PlatformParameters WithUnsizedsRGBReadPixelsDoesntTransform(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "unsized_srgb_read_pixels_doesnt_transform");
    return pout;
}

inline PlatformParameters WithNoUnsizedsRGBReadPixelsDoesntTransform(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "unsized_srgb_read_pixels_doesnt_transform");
    return pout;
}

inline bool IsWithUnsizedsRGBReadPixelsDoesntTransform(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "unsized_srgb_read_pixels_doesnt_transform");
}

inline bool IsWithNoUnsizedsRGBReadPixelsDoesntTransform(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "unsized_srgb_read_pixels_doesnt_transform");
}

inline PlatformParameters WithUploadTextureDataInChunks(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("chunked_texture_upload");
    return pout;
}

inline PlatformParameters WithNoUploadTextureDataInChunks(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("chunked_texture_upload");
    return pout;
}

inline bool IsWithUploadTextureDataInChunks(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "chunked_texture_upload");
}

inline bool IsWithNoUploadTextureDataInChunks(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "chunked_texture_upload");
}

inline PlatformParameters WithUseInstancedPointSpriteEmulation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("use_instanced_point_sprite_emulation");
    return pout;
}

inline PlatformParameters WithNoUseInstancedPointSpriteEmulation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("use_instanced_point_sprite_emulation");
    return pout;
}

inline bool IsWithUseInstancedPointSpriteEmulation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "use_instanced_point_sprite_emulation");
}

inline bool IsWithNoUseInstancedPointSpriteEmulation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "use_instanced_point_sprite_emulation");
}

inline PlatformParameters WithUseMultipleDescriptorsForExternalFormats(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "useMultipleDescriptorsForExternalFormats");
    return pout;
}

inline PlatformParameters WithNoUseMultipleDescriptorsForExternalFormats(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "useMultipleDescriptorsForExternalFormats");
    return pout;
}

inline bool IsWithUseMultipleDescriptorsForExternalFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "useMultipleDescriptorsForExternalFormats");
}

inline bool IsWithNoUseMultipleDescriptorsForExternalFormats(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "useMultipleDescriptorsForExternalFormats");
}

inline PlatformParameters WithUseSystemMemoryForConstantBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("use_system_memory_for_constant_buffers");
    return pout;
}

inline PlatformParameters WithNoUseSystemMemoryForConstantBuffers(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("use_system_memory_for_constant_buffers");
    return pout;
}

inline bool IsWithUseSystemMemoryForConstantBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "use_system_memory_for_constant_buffers");
}

inline bool IsWithNoUseSystemMemoryForConstantBuffers(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "use_system_memory_for_constant_buffers");
}

inline PlatformParameters WithUseUnusedBlocksWithStandardOrSharedLayout(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back(
        "use_unused_blocks_with_standard_or_shared_layout");
    return pout;
}

inline PlatformParameters WithNoUseUnusedBlocksWithStandardOrSharedLayout(
    const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back(
        "use_unused_blocks_with_standard_or_shared_layout");
    return pout;
}

inline bool IsWithUseUnusedBlocksWithStandardOrSharedLayout(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "use_unused_blocks_with_standard_or_shared_layout");
}

inline bool IsWithNoUseUnusedBlocksWithStandardOrSharedLayout(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "use_unused_blocks_with_standard_or_shared_layout");
}

inline PlatformParameters WithWaitIdleBeforeSwapchainRecreation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("waitIdleBeforeSwapchainRecreation");
    return pout;
}

inline PlatformParameters WithNoWaitIdleBeforeSwapchainRecreation(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("waitIdleBeforeSwapchainRecreation");
    return pout;
}

inline bool IsWithWaitIdleBeforeSwapchainRecreation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides,
                              "waitIdleBeforeSwapchainRecreation");
}

inline bool IsWithNoWaitIdleBeforeSwapchainRecreation(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides,
                              "waitIdleBeforeSwapchainRecreation");
}

inline PlatformParameters WithZeroMaxLodWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.enabledFeatureOverrides.push_back("zero_max_lod");
    return pout;
}

inline PlatformParameters WithNoZeroMaxLodWorkaround(const PlatformParameters &pin)
{
    PlatformParameters pout = pin;
    pout.eglParameters.disabledFeatureOverrides.push_back("zero_max_lod");
    return pout;
}

inline bool IsWithZeroMaxLodWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.enabledFeatureOverrides, "zero_max_lod");
}

inline bool IsWithNoZeroMaxLodWorkaround(const PlatformParameters &params)
{
    return HasFeatureOverride(params.eglParameters.disabledFeatureOverrides, "zero_max_lod");
}

#endif  // TESTS_TEST_UTILS_ANGLE_TEST_FEATURE_OVERRIDES_H_
