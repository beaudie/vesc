// GENERATED FILE - DO NOT EDIT.
// Generated by $gen_restricted_traces.py using data from $restricted_traces.json.
//
// Copyright 2019 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#pragma once

#include <cstdint>
#include <vector>

#if !defined(ANGLE_RESTRICTED_TRACE_EXPORT)
#    if defined(_WIN32)
#        if defined(ANGLE_RESTRICTED_TRACE_IMPLEMENTATION)
#            define ANGLE_RESTRICTED_TRACE_EXPORT __declspec(dllexport)
#        else
#            define ANGLE_RESTRICTED_TRACE_EXPORT __declspec(dllimport)
#        endif
#    elif defined(__GNUC__)
#        define ANGLE_RESTRICTED_TRACE_EXPORT __attribute__((visibility("default")))
#    else
#        define ANGLE_RESTRICTED_TRACE_EXPORT
#    endif
#endif  // !defined(ANGLE_RESTRICTED_TRACE_EXPORT)

namespace temple_run_300
{
ANGLE_RESTRICTED_TRACE_EXPORT void SetupContext3Replay();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame(uint32_t frameIndex);
ANGLE_RESTRICTED_TRACE_EXPORT void ResetContext3Replay();
ANGLE_RESTRICTED_TRACE_EXPORT void SetBinaryDataDecompressCallback(
    uint8_t *(*)(const std::vector<uint8_t> &));
ANGLE_RESTRICTED_TRACE_EXPORT void SetBinaryDataDir(char const *dataDir);
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame300();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame301();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame302();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame303();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame304();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame305();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame306();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame307();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame308();
ANGLE_RESTRICTED_TRACE_EXPORT void ReplayContext3Frame309();
}  // namespace temple_run_300
