{
  "comments": [
    {
      "key": {
        "uuid": "85767d54_32a30a14",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-16T18:30:06Z",
      "side": 1,
      "message": "small nit: can omit inline. It\u0027s only necessary for header files. this function likely doesn\u0027t need to be inlined. If it did you could use ANGLE_INLINE to force inlining.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 7
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf57d77f_40462db6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-16T18:30:06Z",
      "side": 1,
      "message": "Can you scan the memory here and return a set of supported flags? That way you don\u0027t need the hack you put in vk_utils.",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75223944_dfb7e948",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-16T18:39:58Z",
      "side": 1,
      "message": "so callers in possibly multiple places will do their own memory scanning logic?\n\nhow about i add a method to vk_utils \"GetSupportedMemoryType(...)\" that takes in desired memory type flags and returns the best possible flag combination for that usecase and underlying GPU. incase the desired flag cant be supported we return the spec guaranteed \"host_visible + host_coherent\" flag\n\nthen the caller can do whatever it wants with that info",
      "parentUuid": "cf57d77f_40462db6",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8236790_6fc9cd79",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-16T19:25:19Z",
      "side": 1,
      "message": "thought this will be straight forward but it requires a surprisingly large amount of plumbing to get the memproperties, memrequirements and so on. Want to keep this change simple, looking for suggestions along those lines",
      "parentUuid": "75223944_dfb7e948",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4475e849_072a113e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-16T19:27:04Z",
      "side": 1,
      "message": "\u003e Can you scan the memory here and return a set of supported flags?\n\nis there a util function i can call to do this? else a little more detail on what exactly you need to be done here",
      "parentUuid": "d8236790_6fc9cd79",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96a6443b_911a1205",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T17:13:26Z",
      "side": 1,
      "message": "Oh okay, I didn\u0027t realize that host coherent and host visible is required by the spec. Changing the API to fall back to that in case the preferred flags aren\u0027t supported sounds reasonable.",
      "parentUuid": "4475e849_072a113e",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1bb8e43_44a6da7b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T17:13:59Z",
      "side": 1,
      "message": ".. with some comments indicating this is always available since it\u0027s spec required. And proper handling of the fallback logic.",
      "parentUuid": "85767d54_32a30a14",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 7
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c76b7b5_51a9d16a",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-17T17:59:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a1bb8e43_44a6da7b",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 7
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e365cfd5_e2175f83",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-17T17:59:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "96a6443b_911a1205",
      "range": {
        "startLine": 66,
        "startChar": 29,
        "endLine": 66,
        "endChar": 51
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a7bc47_aef53c3e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T17:26:22Z",
      "side": 1,
      "message": "nit: can organize this a bit better:\n\n{\n  constexpr kLocalFlags \u003d visible | coherent | local;\n  constexpr kCachedFlags \u003d visible | coherent | cached;\n\n  if (!\u003d Unpack)\n  {\n     return kCachedFlags;\n  }\n\n  switch (usage)\n  {\n     case static copy / draw/ read:\n       return kLocalFlags;\n     default:\n       return kCachedFlags;\n  }\n}",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 72,
        "endChar": 49
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6bec78f_ecb2db07",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-17T17:59:20Z",
      "side": 1,
      "message": "i assume you meant -\n\nif (\u003d\u003d Unpack)\n  {\n     return kCachedFlags;\n  }",
      "parentUuid": "56a7bc47_aef53c3e",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 72,
        "endChar": 49
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aab3e45_57b98720",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-03-17T17:20:34Z",
      "side": 1,
      "message": "jamie, here is a detailed comment talking about it\n\ndo you need the same comment replicated elsewhere?",
      "range": {
        "startLine": 354,
        "startChar": 49,
        "endLine": 357,
        "endChar": 40
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "075e1b5c_8013bb55",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T17:26:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2aab3e45_57b98720",
      "range": {
        "startLine": 354,
        "startChar": 49,
        "endLine": 357,
        "endChar": 40
      },
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7271a0d_366495ac",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 368,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-17T17:45:29Z",
      "side": 1,
      "message": "This test seems to require that the target memory type has ONLY the HOST_COHERENT and HOST_VISIBLE bits set, is that guaranteed?\nFrom the comment it sounded it\u0027s wasn\u0027t clear that there couldn\u0027t be other bits set as well as those two.\nLooking at the current flags, it would appear that other bits cannot be set.\nE.g. VK_MEMORY_PROPERTY_HOST_CACHED_BIT would not be set if HOST_COHERENT is set, similarly  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT cannot be set if HOST_VISIBLE is set and likewise for VK_MEMORY_PROPERTY_PROTECTED_BIT.\nDo we worry about potential future extensions that could set additional bits that break this test? Or should we mask this check to only consider the bits we care about right now?",
      "revId": "76ce738e4d072cadd25140d91458a844aade66d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}