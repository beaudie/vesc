{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1311564f_023f7553",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T15:28:28Z",
      "side": 1,
      "message": "Are you defining this type or does it come from the CL headers? If it\u0027s an ANGLE type, give it a namespace and use the ANGLE naming style. If it\u0027s from the headers, I\u0027m not sure how you\u0027re redefining it here. Better to include the header for the typedef type.",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 23
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ef14ab9_190bedd7",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T18:30:30Z",
      "side": 1,
      "message": "That is a forward declaration for CL/cl_icd.h. In headers it is advisable in general to use forward declarations instead of includes where possible, to avoid cyclic dependencies, to reduce compile time and to avoid header incompatibilities.\n\nIn this case I tried to avoid including cl_icd.h (which includes D3D9), which is incompatible with Windows UWP. This didn\u0027t work anyway in another place, that\u0027s why I already turned off CL support for UWP, which made it now possible to include cl_icd.h already in angle_cl.h (and to remove the forward declaration).",
      "parentUuid": "1311564f_023f7553",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 23
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74294b1c_2fe41a5b",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T19:27:37Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "8ef14ab9_190bedd7",
      "range": {
        "startLine": 14,
        "startChar": 7,
        "endLine": 14,
        "endChar": 23
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a18fff_5624fc3a",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T15:28:28Z",
      "side": 1,
      "message": "The preferred pattern is to pass a context object around everywhere instead of storing duplicated member variables. Can you make the switch? If you\u0027re basing this pattern on other back-ends, that\u0027s a relic of prior design.",
      "range": {
        "startLine": 23,
        "startChar": 56,
        "endLine": 23,
        "endChar": 65
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcd57bb3_a0d68093",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T18:30:30Z",
      "side": 1,
      "message": "That\u0027s an OpenCL requirement, not possible to change. The ICD dispatch table has to be stored at a specific offset in each CL object:\nhttps://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_Ext.html#cl_khr_icd-opencl",
      "parentUuid": "59a18fff_5624fc3a",
      "range": {
        "startLine": 23,
        "startChar": 56,
        "endLine": 23,
        "endChar": 65
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39e03073_253eea0c",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T19:27:37Z",
      "side": 1,
      "message": "OK - more and more reason to do exactly what Mesa did and implement both a Mesa (ANGLE) and CL (ICD struct) object. For now this is OK. If we introduce any virtual functions I think this would break. We should end up with the same solution as Mesa eventually.",
      "parentUuid": "bcd57bb3_a0d68093",
      "range": {
        "startLine": 23,
        "startChar": 56,
        "endLine": 23,
        "endChar": 65
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f42751c_4ca476ca",
        "filename": "src/libANGLE/CLObject.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-29T11:18:09Z",
      "side": 1,
      "message": "We can\u0027t do exactly what Mesa did because we have different circumstances, e.g. the entry points are not in the same library, and I need the dispatch table to be configurable. I implemented a similar solution, which also removes the need for a return cast. We still need the reinterpret_cast, because C++ doesn\u0027t allow to static_cast pointer to pointer (type**).",
      "parentUuid": "39e03073_253eea0c",
      "range": {
        "startLine": 23,
        "startChar": 56,
        "endLine": 23,
        "endChar": 65
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b9a96b9_eb60c14d",
        "filename": "src/libGLESv2/cl_dispatch_table.cpp",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T15:28:28Z",
      "side": 1,
      "message": "where is the correct order defined? wondering if it really is possible to auto-gen.",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c70b2df4_1fea798e",
        "filename": "src/libGLESv2/cl_dispatch_table.cpp",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T18:30:30Z",
      "side": 1,
      "message": "include/CL/cl_icd.h, lines 1104-1288. This dispatch table is fixed, only additions are allowed.",
      "parentUuid": "8b9a96b9_eb60c14d",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d80ea6a_45a018f2",
        "filename": "src/libGLESv2/cl_dispatch_table.cpp",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T19:27:37Z",
      "side": 1,
      "message": "OK. Technically we could generate it by scanning cl_icd.h. Maybe amend the comment to indicate where the ordering is specified.",
      "parentUuid": "c70b2df4_1fea798e",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eade280e_9949857f",
        "filename": "src/libGLESv2/cl_dispatch_table.cpp",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-29T11:18:09Z",
      "side": 1,
      "message": "I have changed the comment to indicate where the ordering is specified. There are more ways to generate it, but they are all very complex, and most probably it is more work long-term to maintain that generator than to amend the table manually.",
      "parentUuid": "6d80ea6a_45a018f2",
      "range": {
        "startLine": 14,
        "startChar": 3,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f55c5f63_30d7c0b6",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T15:28:28Z",
      "side": 1,
      "message": "If we export these from libOpenCL as well then they\u0027ll be discoverable from other apps/users who talk to libOpenCL directly. I\u0027d recommend it.",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26c65ba6_18c57602",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T18:30:30Z",
      "side": 1,
      "message": "libOpenCL is not supposed to provide the ICD extension. It is on purpose only in the CL implementation lib (libGLESv2). The official libOpenCL in Windows and Linux and also the Khronos ICD loader also don\u0027t export this specific entry point for the same reason. Apps are not supposed to use the ICD extension to load OpenCL. If we find apps on Android which don\u0027t follow that standard, we can consider to change it.",
      "parentUuid": "f55c5f63_30d7c0b6",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b406f21e_ea1dc392",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T19:27:37Z",
      "side": 1,
      "message": "Totally confused. What\u0027s the purpose of this CL if we\u0027re not allowed to expose it?",
      "parentUuid": "26c65ba6_18c57602",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0ec17e4_293d4c8d",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T20:00:03Z",
      "side": 1,
      "message": "The purpose of this entry point is for an ICL loader to load multiple CL implementations, and to use the dispatch tables to maintain entry points for each platform in each implementation. Apps are supposed to load the ICD loader (which is in libOpenCL) in a regular way and to simply choose a platform. The ICD loader will dispatch the calls to the right implementation using the dispatch table in each CL object.",
      "parentUuid": "b406f21e_ea1dc392",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a85f811_c3811cce",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T20:02:59Z",
      "side": 1,
      "message": "libOpenCL is our (and everyone else\u0027s) OpenCL implementation. libGLESv2 is hidden.",
      "parentUuid": "d0ec17e4_293d4c8d",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90467bf6_487a3b92",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-29T11:18:09Z",
      "side": 1,
      "message": "As discussed I have renamed our original OpenCL library with the full set of entry points to avoid conflicts with system-provided OpenCL library. I have also moved the ICD entry points from libGLESv2 to a separate OpenCL library which can be only used by ICD-compatible loaders. Further I have renamed the CL entry points in libGLESv2 to the original names and disabled their export. The CL dispatch table is now the only CL symbol which is exported by libGLESv2.",
      "parentUuid": "0a85f811_c3811cce",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e72c841_82ecd585",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-29T13:13:16Z",
      "side": 1,
      "message": "Let\u0027s chat offline. The code isn\u0027t set how the rest of ANGLE is laid out right now.",
      "parentUuid": "90467bf6_487a3b92",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddfa85a9_ccc65c8c",
        "filename": "src/libGLESv2/entry_points_cl_icd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-29T18:14:10Z",
      "side": 1,
      "message": "The entry point names are in a namespace now, as discussed.",
      "parentUuid": "8e72c841_82ecd585",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 41
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83a76772_2861b1eb",
        "filename": "src/libOpenCL/libOpenCL_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-28T15:28:28Z",
      "side": 1,
      "message": "naming nit",
      "range": {
        "startLine": 34,
        "startChar": 17,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0537c498_51fe9785",
        "filename": "src/libOpenCL/libOpenCL_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-28T18:30:30Z",
      "side": 1,
      "message": "Thanks, the naming standard is not yet my habbit. :)",
      "parentUuid": "83a76772_2861b1eb",
      "range": {
        "startLine": 34,
        "startChar": 17,
        "endLine": 34,
        "endChar": 28
      },
      "revId": "0005991a0902e4de09bc0fdad4d7dc13e2614ca5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}