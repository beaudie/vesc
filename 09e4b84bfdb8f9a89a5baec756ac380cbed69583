{
  "comments": [
    {
      "key": {
        "uuid": "fba24310_0e464bae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "You should document the dEQP tests you used to find bugs in the previous version of the patch.",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_e7d4c2bc",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1728,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "Better name for this function would be \"parseInvariantDeclaration\". Empty declaration actually means something like this where type is included but no variables are declared:\n\n\"vec4;\"\n\nIt\u0027s valid ESSL.",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6873e7d0_d98c7333",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1728,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bd39797_e7d4c2bc",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bdd0f9f_692265b7",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1729,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "Why is this variable named like this? Why not just \"identifierLocation\" like before?",
      "range": {
        "startLine": 1729,
        "startChar": 73,
        "endLine": 1729,
        "endChar": 97
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89517fc_9d96e33b",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1729,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "I think there was already a \"parseEmptyDeclaration\" function before which I changed a bit. Also, I used the same parameter names.\nDone.",
      "parentUuid": "5bdd0f9f_692265b7",
      "range": {
        "startLine": 1729,
        "startChar": 73,
        "endLine": 1729,
        "endChar": 97
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_8784e6ba",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1749,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "Instead of string matching the identifier, it would be better to match the qualifier of the variable type with EvqFragColor, EvqFragDepth etc.",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08b0abbd_269f964e",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1749,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bd39797_8784e6ba",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fba24310_ce53a371",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1752,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T11:55:57Z",
      "side": 1,
      "message": "Should we stop parsing if there is an error - like above?",
      "range": {
        "startLine": 1749,
        "startChar": 7,
        "endLine": 1752,
        "endChar": 9
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_a77f6abb",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1752,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "I don\u0027t think that these errors make it necessary to stop running this function. In general it\u0027s better if the user of the compiler sees as much error information as possible.",
      "parentUuid": "fba24310_ce53a371",
      "range": {
        "startLine": 1749,
        "startChar": 7,
        "endLine": 1752,
        "endChar": 9
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_27effa7f",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1771,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "This old parseInvariantDeclaration is not used anymore and should be cleaned up.",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89517fc_dd8c6b33",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1771,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bd39797_27effa7f",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bdd0f9f_0915a953",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3651,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "\"invalid storage qualifier combination\" would be a clearer error message.",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8c95f46_eb895120",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3651,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bdd0f9f_0915a953",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbcb23e0_a6b126ab",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3685,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "It would be better if the qualification order was covered in full by getMaximumQualifierIndex().",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48b2a3c6_e85f1379",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3685,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "That wouldn\u0027t be possible with the way it is now - i.e. getting a rank based on the qualifier type.\nThe function just handles whether we have the qualifier groups properly ordered: \ninvariant-qualifier interpolation-qualifier layout-qualifier other-storage-qualifier precision-qualifier\n\nThe storage qualifiers allow enumeration and the others do not.\nDo you have any suggestions how this should be rewritten?\n\nI will at least put the error checks in a separate function checkJoinQualifiers. I will also rename joinTypeQualifiers to joinQualifiers",
      "parentUuid": "fbcb23e0_a6b126ab",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6873e7d0_59cb8355",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3685,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-19T10:18:09Z",
      "side": 1,
      "message": "I think the qualifiers could be assigned more fine-grained indices. So if \"EvqCentroid\" has an index of x, then \"EvqCentroidOut\" would have an index of x + 1. Then having two qualifiers with the same index would also be an error.",
      "parentUuid": "48b2a3c6_e85f1379",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "488b83e0_8088b6d0",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3685,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T13:54:42Z",
      "side": 1,
      "message": "Done. Did so also for getMaximumQualifierIndexForFunctionParameter.",
      "parentUuid": "6873e7d0_59cb8355",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_27609a36",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3770,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T11:55:57Z",
      "side": 1,
      "message": "Broadcast the invariant qualifier. It will be checked either in addStructure or addInterfaceBlock .",
      "range": {
        "startLine": 3770,
        "startChar": 8,
        "endLine": 3770,
        "endChar": 52
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bb5bb44_f000005f",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 5
      },
      "lineNbr": 636,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T11:55:57Z",
      "side": 1,
      "message": "Previously it was in the wrong place I think.",
      "range": {
        "startLine": 636,
        "startChar": 8,
        "endLine": 636,
        "endChar": 43
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ba5c71d_6b15419a",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 5
      },
      "lineNbr": 820,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T11:55:57Z",
      "side": 1,
      "message": "Oops, I will fix this in the next patch version once this gets reviewed.",
      "range": {
        "startLine": 820,
        "startChar": 0,
        "endLine": 820,
        "endChar": 0
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbcb23e0_0618fad1",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 5
      },
      "lineNbr": 991,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T12:46:24Z",
      "side": 1,
      "message": "SHARED will have to be added here in a later patch when shared memory gets introduced. Otherwise the \u0027shared\u0027 layout qualifier will not be properly parsed.\nIt is already done in the shared memory patch I have not submitted yet. \nJust explaining why it is not yet added although it is in the es 3.1 grammar.",
      "range": {
        "startLine": 991,
        "startChar": 4,
        "endLine": 991,
        "endChar": 5
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_e775e2fb",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 5
      },
      "lineNbr": 1266,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-18T11:55:57Z",
      "side": 1,
      "message": "The invariant qualifier has to be broadcasted. Otherwise I could not do error checking in ParseContext.",
      "range": {
        "startLine": 1266,
        "startChar": 8,
        "endLine": 1266,
        "endChar": 36
      },
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bb5bb44_f04e40c7",
        "filename": "src/tests/compiler_tests/MalformedShader_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2399,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "\"GLES\" means \"OpenGL ES\".\n\"ESSL\" or \"GLSL ES\" means \"OpenGL ES shading language\".\n\n\"ESS\" abbreviation is not common practice and should not be used.\n\nAre you sure these are not already covered by some other test?",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "488b83e0_a0adba80",
        "filename": "src/tests/compiler_tests/MalformedShader_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2399,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Fixed the names.\nI will also remove the tests. It was handled correctly before. There might be dEQP tests for them as well.",
      "parentUuid": "3bb5bb44_f04e40c7",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bd39797_47cdce2d",
        "filename": "src/tests/compiler_tests/MalformedShader_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2432,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-18T13:45:15Z",
      "side": 1,
      "message": "I don\u0027t think a separate test is necessary for ESSL 3.1",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e89517fc_3d9f8f4e",
        "filename": "src/tests/compiler_tests/MalformedShader_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2432,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-19T09:38:50Z",
      "side": 1,
      "message": "Removed it.",
      "parentUuid": "1bd39797_47cdce2d",
      "revId": "09e4b84bfdb8f9a89a5baec756ac380cbed69583",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}