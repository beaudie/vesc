{
  "comments": [
    {
      "key": {
        "uuid": "e2b0b90b_35df401f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-23T18:58:15Z",
      "side": 1,
      "message": "nice!",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 29,
        "endChar": 9
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22d0113b_77182397",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_texture_format_table.py",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-23T18:58:15Z",
      "side": 1,
      "message": "can you document a bit the swizzle format selection algorithm? nothing huge necessary.",
      "range": {
        "startLine": 299,
        "startChar": 4,
        "endLine": 299,
        "endChar": 25
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c283b51b_4d38ed85",
        "filename": "src/libANGLE/renderer/d3d/d3d11/gen_texture_format_table.py",
        "patchSetId": 1
      },
      "lineNbr": 299,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-24T14:49:08Z",
      "side": 1,
      "message": "I added some comments.",
      "parentUuid": "22d0113b_77182397",
      "range": {
        "startLine": 299,
        "startChar": 4,
        "endLine": 299,
        "endChar": 25
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02e4ed24_935dfb51",
        "filename": "src/libANGLE/renderer/d3d/d3d11/swizzle_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-23T18:58:15Z",
      "side": 1,
      "message": "very nice that we can delete these files",
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2c1f56d_d18ed8e9",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-23T18:58:15Z",
      "side": 1,
      "message": "question: could we generate this info correctly from the format name?",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 60
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22c49160_3bdaffeb",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-24T14:49:08Z",
      "side": 1,
      "message": "Probably could, but it would need exceptions for depth/stencil formats and some other odd ones like the shared exponent format, we\u0027d also have to make sure that compressed formats would not accidentally get the information set. I think it makes more sense to specify these explicitly.",
      "parentUuid": "c2c1f56d_d18ed8e9",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 60
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62be89e4_29eb6f5b",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-25T15:47:02Z",
      "side": 1,
      "message": "I\u0027m not sure - The depth/stencil formats seem to have a constent pattern as well (DXXSY for X depth bits and Y stencil bits). You do similar pattern matching already for GL formats.\n\nIt seems as though any format without RXX GXX BXX AXX DXX SX seems to not need the bits information. Also the componentType could be parsed from the format name as well.\n\nI guess I\u0027m thinking parsing it from the format name should be pretty robust. Is there a good reason not to parse this from the name?\n\nI\u0027m thinking you could make a bunch of tokens:\n\n\"R8\", \"G8\", \"B8\", \"A8\" .. \"R32\", \"G32\", \"B32\", \"A32\" .. \"D24\", \"D32\", \"S8\" .. \"UNORM\", \"SNORM\", etc.\n\nAnd you could parse the info just from the presence of the tokens.",
      "parentUuid": "22c49160_3bdaffeb",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 60
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82affd8e_7ed9c96b",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-25T16:06:31Z",
      "side": 1,
      "message": "Which format string were you thinking of parsing? There\u0027s a depth/stencil format \"X24_TYPELESS_G8_UINT\", plus they use R24/R32 in some of the DXGI formats - it would be easy for the automated parsing to go wrong there. Using the dsvFormat when it is available and the ANGLE format name when it\u0027s not might work, but sounds messy. Or we could mandate a certain format for the ANGLE format names, but I think spotting errors in the JSON is easier than spotting errors in a string.\n\nThe ability to use arbitrary ANGLE format name strings also adds flexibility in other ways - let\u0027s say we\u0027ll have a need to add more compressed formats with numbers in their names, it would be nice if we didn\u0027t need to worry about the parsing breaking in that case.",
      "parentUuid": "62be89e4_29eb6f5b",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 60
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62a5a9c6_91985a2f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-02-24T15:51:50Z",
      "side": 1,
      "message": "It seems alpha is missing here.",
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82affd8e_1e1b6db9",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-25T09:44:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62a5a9c6_91985a2f",
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62a5a9c6_7195d6f4",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-02-24T15:51:50Z",
      "side": 1,
      "message": "uint?",
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c283b51b_0dca7592",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_data.json",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-25T09:44:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62a5a9c6_7195d6f4",
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2c1f56d_f79f8c78",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_table_autogen.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-02-23T18:58:15Z",
      "side": 1,
      "message": "nit: using auto here will help the alignment",
      "range": {
        "startLine": 109,
        "startChar": 10,
        "endLine": 109,
        "endChar": 25
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02c30d5c_5a389585",
        "filename": "src/libANGLE/renderer/d3d/d3d11/texture_format_table_autogen.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-02-24T14:49:08Z",
      "side": 1,
      "message": "Not relevant any more for the new version of the patch.",
      "parentUuid": "c2c1f56d_f79f8c78",
      "range": {
        "startLine": 109,
        "startChar": 10,
        "endLine": 109,
        "endChar": 25
      },
      "revId": "98fa0f3526d875eb92df3cf9314d6f4b77e69935",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}