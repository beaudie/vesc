{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c86f96a1_f931c7a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-03-08T00:53:46Z",
      "side": 1,
      "message": "Mark, can you describe what is different in the CL message?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 59
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cfabfb9_123f9ae7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-03-08T00:53:46Z",
      "side": 1,
      "message": "Goeff and Mohan - Mark figured out we also needed to pipe down the new surface lock in Geoff\u0027s original CL.\n\nI tested this with Fishdom (the new problem app) and Gardenscapes and Homescapes.  Played about a dozen mini-games in each and they all ran well.",
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2654788a_f28fd59b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "is it possible to add an end2end test for this, even if enabled only on Android?",
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10035bf7_6af4ecbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-03-08T17:36:15Z",
      "side": 1,
      "message": "LGTM too. Agree with Mohan\u0027s comments.",
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61e93c3c_e8ee8d73",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-03-08T00:53:46Z",
      "side": 1,
      "message": "Might be clearer to add `global` to the name and helpers, to more clearly differentiate the mutexes.",
      "range": {
        "startLine": 382,
        "startChar": 32,
        "endLine": 382,
        "endChar": 37
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb21217_cbff1ea3",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 874,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "safer to have such member vars in all classes as consts -\n```\nangle::GlobalMutex *const mMutex;\nangle::GlobalMutex *const mSurfaceMutex;\n```",
      "range": {
        "startLine": 873,
        "startChar": 4,
        "endLine": 874,
        "endChar": 38
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4439738b_bbaac11e",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 2
      },
      "lineNbr": 1193,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "is it possible to add a unit test for both `ThreadTrackingMutex` and `ScopedUnlock`?",
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "783dc64f_b6626f60",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 2
      },
      "lineNbr": 1282,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "why not have this be `ThreadTrackingMutex` and remove the template?",
      "range": {
        "startLine": 1282,
        "startChar": 4,
        "endLine": 1282,
        "endChar": 14
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "115fc59c_020bede5",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 2
      },
      "lineNbr": 1282,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-03-08T17:36:15Z",
      "side": 1,
      "message": "Mostly to match how std::lock_guard looks. It can also be generic for any mutex type.\n\nIdeally ThreadTrackingMutex would just be std::recursive_mutex but std::recursive_mutex offers no method to get the lock count.",
      "parentUuid": "783dc64f_b6626f60",
      "range": {
        "startLine": 1282,
        "startChar": 4,
        "endLine": 1282,
        "endChar": 14
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b55e6f8_8dbeb247",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2310,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "naming here is confusing, the mutex itself is not specifically an \"unlockMutex\".\nIt is just `globalMutex` and `globalSurfaceMutex`",
      "range": {
        "startLine": 2310,
        "startChar": 72,
        "endLine": 2310,
        "endChar": 83
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b9d582e_0b457ac3",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2347,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "i believe no `auto` is the coding guideline",
      "range": {
        "startLine": 2347,
        "startChar": 8,
        "endLine": 2347,
        "endChar": 13
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11fe043b_388c4921",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2347,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "explicit for clarity - `scopedUnlockGlobalSurfaceMutex`",
      "range": {
        "startLine": 2347,
        "startChar": 13,
        "endLine": 2347,
        "endChar": 33
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43843bee_3926fd74",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2347,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-03-08T17:36:15Z",
      "side": 1,
      "message": "auto is fine, afaik.",
      "parentUuid": "8b9d582e_0b457ac3",
      "range": {
        "startLine": 2347,
        "startChar": 8,
        "endLine": 2347,
        "endChar": 13
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55d44d9a_b2e87553",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2348,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "can cache features in local var instead",
      "range": {
        "startLine": 2348,
        "startChar": 32,
        "endLine": 2348,
        "endChar": 69
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96972e61_768738b0",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2349,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-03-08T17:02:34Z",
      "side": 1,
      "message": "explicit for clarity - `scopedUnlockGlobalMutex`",
      "range": {
        "startLine": 2349,
        "startChar": 13,
        "endLine": 2349,
        "endChar": 26
      },
      "revId": "d0ed6ecc44c3fc08fe64847f6a4fa8720c69d323",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}