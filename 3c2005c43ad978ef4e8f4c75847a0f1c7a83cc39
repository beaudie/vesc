{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7978a9_acf9262f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T20:18:25Z",
      "side": 1,
      "message": "haven\u0027t looked at the buffer stuff, and wasn\u0027t aware this was what you were working on. will take a look shortly. ImgTec calls this type of feature \"ghosting\" so I suggest we adopt their terminology. See https://www.imaginationtech.com/blog/how-to-improve-your-renderer-on-powervr-based-platforms/",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 40
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef4f2cdf_66b77ed0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T20:18:25Z",
      "side": 1,
      "message": "This is a good case for a ring buffer/DynamicBuffer/other linear allocator. Presumably this is vertex or index data?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 46
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9baf99d_9c9a2c79",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "\u003e This is a good case for a ring buffer/DynamicBuffer/other linear allocator.\n\nI\u0027m assuming Charlie\u0027s buffer changes will handle this automatically, depending on the situation.\n\n\u003e Presumably this is vertex or index data?\n\nYeah, Idle Heroes updates verex data before every draw by mapping the buffer.   Without this fix, we break the renderpass as part of the map, since the draw hasn\u0027t used the data yet.   \"Ghosting\" the data allows us keep all of the draws in the same renderpass which significantly improves performance.",
      "parentUuid": "ef4f2cdf_66b77ed0",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 46
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e144efe_b01b1a56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T22:53:57Z",
      "side": 1,
      "message": "I think this is orthogonal to how we allocate buffer. The problem here is not how we alloc, but we do not know if there is a pending GPU write or not, thus we have to assume the worst case to wait for all access to finish, even though in this case all GPU access is readOnly access.",
      "parentUuid": "f9baf99d_9c9a2c79",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 13,
        "endChar": 46
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2828fb0_87654d3b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T20:18:25Z",
      "side": 1,
      "message": "this sounds a bit complex. Is there a ddoc or any more notes on this?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2dc009_e47980a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:57:21Z",
      "side": 1,
      "message": "I think all complexity comes from tracking writeSerial, which I think can be simplified greatly what I just commented. The other option is to utilize mHostVisibleBufferPool mechanism. Basically you detect this case (that mapBuffer is called and GPU access is pending and wait is longer than 5ms (you pick)), then you just decided to switch to mHostVisibleBufferPool mode, just treat it exactly like the mBuffer is device local memory and CPU is inaccessiable. The mHostVisibleBufferPool code path always map mHostVisibleBufferPool to user and issue a DMA copy to mBuffer. I think doing this way the fix is going to be very local to BufferVk.cpp, might be a cleaner fix. The downside is first mapBuffer call is more expensive.\n\nyea, ddoc might be worthwhile so that we can avoid poluting CL for long discussion.",
      "parentUuid": "a2828fb0_87654d3b",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8930e9ee_c9e01156",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "I finished writing up: go/angle-idle-heroes-gl-ext-map-buffer-range\n\nDo we want this to be specific to BufferVk?   One of the comments when discussing this before was that we\u0027d want to do this for textures also (does mHostVisibleBufferPool affect that at all)?",
      "parentUuid": "a2828fb0_87654d3b",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c782ebe4_962e5136",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T22:53:57Z",
      "side": 1,
      "message": "Right. I think doing for buffer only will make it a lot simpler. Probably my fault since I mentioned texture to you but I take back.",
      "parentUuid": "8930e9ee_c9e01156",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "411c92a7_9432d15c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T19:56:09Z",
      "side": 1,
      "message": "Shabi - I\u0027m only CC\u0027ing you since you\u0027re heading out on vacation, but I\u0027d still like your input if you can give it a once over.",
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12db113e_b961669b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 607,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "I think you can also add `\u0026\u0026 mBuffer-\u003eisHostVisible()` here as well. If mBuffer is not host visible, we can\u0027t use CPU to do copy, there is no need for us to go through these. We should instead go into handleDeviceLocalBufferMap().",
      "range": {
        "startLine": 606,
        "startChar": 8,
        "endLine": 607,
        "endChar": 41
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d638922_3cecaca2",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 607,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12db113e_b961669b",
      "range": {
        "startLine": 606,
        "startChar": 8,
        "endLine": 607,
        "endChar": 41
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f105e9e_3b47729f",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 625,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-08T01:37:08Z",
      "side": 1,
      "message": "I think this check should be sufficient, and you shouldn\u0027t need to check `!outsideRpWritesToBuffer \u0026\u0026 !rpWritesToBuffer`. That `ResourceUse::counter` thing was supposed to handle this I believe.",
      "range": {
        "startLine": 625,
        "startChar": 26,
        "endLine": 625,
        "endChar": 50
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db8a2aef_11a4db7e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 625,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f105e9e_3b47729f",
      "range": {
        "startLine": 625,
        "startChar": 26,
        "endLine": 625,
        "endChar": 50
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7555b271_42606dd6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 629,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "These logic can be skipped if (access \u0026 GL_MAP_INVALIDATE_BUFFER_BIT) !\u003d 0",
      "range": {
        "startLine": 609,
        "startChar": 13,
        "endLine": 629,
        "endChar": 13
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55f5a638_43d867d6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 629,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7555b271_42606dd6",
      "range": {
        "startLine": 609,
        "startChar": 13,
        "endLine": 629,
        "endChar": 13
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee90ba74_b0e1e0e1",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 633,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "Would\u0027t it hit assertion in acquireBufferHelper because mBuffer is not null?\nYou may want to look into acquireAndUpdate to see if you can use that instead.",
      "range": {
        "startLine": 633,
        "startChar": 26,
        "endLine": 633,
        "endChar": 45
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69ef2ab3_feccafd1",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 633,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "I haven\u0027t hit any assertions yet, but maybe I need to rebase to pick up your changes?   I\u0027ll give that a shot and see if CQ uncovers anything.",
      "parentUuid": "ee90ba74_b0e1e0e1",
      "range": {
        "startLine": 633,
        "startChar": 26,
        "endLine": 633,
        "endChar": 45
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9c6e20f_d8c07cb9",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 633,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Looking closer at acquireAndUpdate(), that\u0027s a bit more than we need to do here, since that handles !isHostVisible() (which the buffer has to be), sub-updates, and retaining the buffer (which we don\u0027t want).\n\nGetting a new buffer via acquireBufferHelper() is all we need, combined with a manual memcpy().",
      "parentUuid": "69ef2ab3_feccafd1",
      "range": {
        "startLine": 633,
        "startChar": 26,
        "endLine": 633,
        "endChar": 45
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82d1772d_06e6d821",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1712,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "Is it legal to use it in textureBuffer as write and mean time also use the buffer as vertex buffer? Would this be undefined behavior? I am wondering if this if check is needed or not. This check is not cheap.",
      "range": {
        "startLine": 1712,
        "startChar": 17,
        "endLine": 1712,
        "endChar": 32
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79ae4c48_26c20771",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1712,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "\u003e Is it legal to use it in textureBuffer as write and mean time also use the buffer as vertex buffer? \n\nIt seems to be, since there are many dEQP tests that do exactly this.   See the dEQP-GLES31.functional.texture.texture_buffer tests in third_party/VK-GL-CTS/src/android/cts/master/gles31-master.txt.",
      "parentUuid": "82d1772d_06e6d821",
      "range": {
        "startLine": 1712,
        "startChar": 17,
        "endLine": 1712,
        "endChar": 32
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f42f5d7_0fadfe47",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1712,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T22:53:57Z",
      "side": 1,
      "message": "Shouldn\u0027t ContextVk::handleDirtyTexturesImpl() code at line 1551 handle this already?",
      "parentUuid": "79ae4c48_26c20771",
      "range": {
        "startLine": 1712,
        "startChar": 17,
        "endLine": 1712,
        "endChar": 32
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1fadc5d_57bf376b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1712,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-12T21:49:42Z",
      "side": 1,
      "message": "\u003e Shouldn\u0027t ContextVk::handleDirtyTexturesImpl() code at line 1551 handle this already?\n\nI\u0027m not sure if it\u0027s supposed to, but it doesn\u0027t today.   We only get to handleDirtyTexturesImpl() as part of handing State::DIRTY_BIT_TEXTURE_BINDINGS vs this call which is part of handling DIRTY_BIT_VERTEX_BUFFERS.   A dirty vertex buffer doesn\u0027t imply dirty textures, so I don\u0027t think we should expect to execute both in all cases when the same buffer is bound to both.\n\nAdditionally, CommandBufferHelper::bufferWrite() (which is called by handleDirtyTexturesImpl()) has the following assert today:\n\n    ASSERT(!usesBuffer(*buffer));\n    \nThat means we currently can\u0027t call bufferRead() and then bufferWrite(), otherwise we\u0027ll hit the assert and crash.",
      "parentUuid": "8f42f5d7_0fadfe47",
      "range": {
        "startLine": 1712,
        "startChar": 17,
        "endLine": 1712,
        "endChar": 32
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c031c6a8_2189961b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1712,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-13T00:24:04Z",
      "side": 1,
      "message": "I think ContextVk::handleDirtyTexturesImplwill be handled before vertex/index buffers, so we should be calling bufferWrite first. I am wondering if you can just do `if(!usesBufferForWrite(*buffer))` here, which should be much cheaper than isTextureBuffer().",
      "parentUuid": "f1fadc5d_57bf376b",
      "range": {
        "startLine": 1712,
        "startChar": 17,
        "endLine": 1712,
        "endChar": 32
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd20a8d_04cce0fe",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "If not been used as R and W, what it is used for? Sounds like can be treated just like read or ReadAndWrite?",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45b9e258_fd524139",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "This is used for things like:\n- Descriptor Pools (technically can be Read)\n- Sync objects\n- Query objects\n\nI\u0027m not super confident I got all of the read/write classifications correct in the first place, and especially not sure about what to do with those types of objects that aren\u0027t necessarily in either bucket of read or write.",
      "parentUuid": "6fd20a8d_04cce0fe",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18cea952_0141dfe7",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-08T01:37:08Z",
      "side": 1,
      "message": "I think only 2 is enough, `Read` and `ReadWrite` (no real difference between `ReadWrite` and `Write`). I think we actually have that enum somewhere around.\n\nI think Access is for resources that are not readable or writable? Then you can just hijack either serial for that and not have yet another serial for them.",
      "parentUuid": "45b9e258_fd524139",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35119377_8ce7822f",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "\u003e I think only 2 is enough, `Read` and `ReadWrite` (no real difference between `ReadWrite` and `Write`).\n\nSounds good.\n\n\u003e I think we actually have that enum somewhere around.\n\nYeah, I think you made one a while ago, but I can\u0027t find it anywhere.\n\n\u003e I think Access is for resources that are not readable or writable? Then you can just hijack either serial for that and not have yet another serial for them.\n\nUsing Read should work.",
      "parentUuid": "18cea952_0141dfe7",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec065274_916d6532",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-06T20:18:58Z",
      "side": 1,
      "message": "eek.. this is pretty heavy. wonder if we can adopt a different design here.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05964347_0bc75173",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-06T22:34:56Z",
      "side": 1,
      "message": "This is required to make sure we associate the read/write access with the corresponding retain() call.   Later, when the command is submitted and the Resource is releas()\u0027ed, this allows the read/write Serial to be updated correctly and accurately determine when the access has completed.\n\nThe accessCounter (oops, forgot to revert the rename), increments/decrements with the retain()/release() calls, which lends itself nicely to using std::stack to track the read/write accesses for each accessCounter value.   I\u0027m open to suggestions if you have anything in mind.",
      "parentUuid": "ec065274_916d6532",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2301f29c_45bd267d",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-08T01:37:08Z",
      "side": 1,
      "message": "I don\u0027t understand why you can\u0027t just have a `readCounter` and `writeCounter`?",
      "parentUuid": "05964347_0bc75173",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b82aae0_a5c00396",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "This is to correspond which retain(READ/WRITE) call is for which release() call, to handle the case where release() is called before the resource is used in a command.\n\nAdditionally, we need to be able to handle 2 contexts sharing a resource, with one doing a read and another doing a write.   We need to know when the command performing the write is submitted so we can update the correct serial.",
      "parentUuid": "2301f29c_45bd267d",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4680db39_382721ff",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "The easiest way I think to do this is keep serial as is, you just add a new serial called bufferWriteSerial that specically used to track buffer writes. That way most of the diffs relatyed to retain() call is not needed. See my other comment in retain as well.",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 48,
        "endChar": 23
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af7b2a04_109ee72c",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-08T01:37:08Z",
      "side": 1,
      "message": "Just a `readSerial` and `writeSerial`, or `bufferWriteSerial` if we don\u0027t care about textures SGTM. You shouldn\u0027t need `accessSerial` if you name things such that read and access share the same serial.",
      "parentUuid": "4680db39_382721ff",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 48,
        "endChar": 23
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ad209b8_6c3dbe0d",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Done\n\nI went with readSerial and readWriteSerial, rather than specifying either are just for buffers, in case we start tracking write access for other Resources in the future.",
      "parentUuid": "af7b2a04_109ee72c",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 48,
        "endChar": 23
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae7a0d30_9677feee",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 303,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "I would suggest keep retain as is, which means retain as readAndWrite. Then most of the diff related to retain is not needed.",
      "range": {
        "startLine": 303,
        "startChar": 9,
        "endLine": 303,
        "endChar": 15
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79cb12ac_0136c701",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 303,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "Done\n\nI kept retain and added a retainBuffer() which takes a ResourceUseType.   We can update this one if it\u0027s used for other Resources in the future.",
      "parentUuid": "ae7a0d30_9677feee",
      "range": {
        "startLine": 303,
        "startChar": 9,
        "endLine": 303,
        "endChar": 15
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dca91978_4b7b0f4c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 7
      },
      "lineNbr": 208,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-08T01:37:08Z",
      "side": 1,
      "message": "You may want to specialize this to `retainReadImage/BufferViews` and `retainReadWriteImage/BufferViews`. Because contrary to what the message commit says, texture buffers *cannot* be written to. *Image buffers* can.\n\nWith this change, the same scenario you are optimizing but involving texture buffers will still suffer even though they shouldn\u0027t.",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 208,
        "endChar": 5
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e95d8469_664c9a8e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 7
      },
      "lineNbr": 208,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-10T01:28:56Z",
      "side": 1,
      "message": "\u003e Because contrary to what the message commit says, texture buffers *cannot* be written to. *Image buffers* can.\n\nI don\u0027t understand what you mean here.   My understanding is that the texture buffer view still needs to be retained as ReadWrite since the texture buffer is being retained as Write, so we can know that a write is being performed (and when it completes).",
      "parentUuid": "dca91978_4b7b0f4c",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 208,
        "endChar": 5
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8b7136_c076666e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1023,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-06T21:47:14Z",
      "side": 1,
      "message": "You keep a new list in contextVk, lets call mBufferResourceWriteList. Here you add it  to mBufferResourceWriteList. And then you pass this to submitFrame() call and there https://chromium.googlesource.com/angle/angle/+/bc913c7040e97028316591ae7d2c02519161b4cf/src/libANGLE/renderer/vulkan/RendererVk.cpp#2996, you also walk bufferResourceWriteList and update writeSerial for buffers.\n\nI think if you do that (i.e, only add extra tracking for bufferWrites), diff will be much smaller. (And sorry if I gave you wrong hint previously to lead you here).",
      "range": {
        "startLine": 1023,
        "startChar": 19,
        "endLine": 1023,
        "endChar": 51
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1dd32c3_eb189a08",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1023,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-12T21:49:42Z",
      "side": 1,
      "message": "This design doesn\u0027t handle the case of a Resource being retained and then released without being submitted.   Additionally, it doesn\u0027t handle a buffer being used by multiple contexts for read and/or write accesses.",
      "parentUuid": "6d8b7136_c076666e",
      "range": {
        "startLine": 1023,
        "startChar": 19,
        "endLine": 1023,
        "endChar": 51
      },
      "revId": "3c2005c43ad978ef4e8f4c75847a0f1c7a83cc39",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}