{
  "comments": [
    {
      "key": {
        "uuid": "81880290_5e3a0bec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-16T18:21:00Z",
      "side": 1,
      "message": "Nice. I suggest splitting the change in three, at least to ease bisecting bugs, if any.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2477552_993eb35d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-04-15T14:15:01Z",
      "side": 1,
      "message": "This assert seems unnecessary, did just assign it in the line above.",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcb56ff1_3c348528",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-15T15:58:09Z",
      "side": 1,
      "message": "The exact reason I added this assertion is to catch the case that people pass in other extension layout that has more than 5 bits. That is also the reason I added VK_IMAGE_LAYOUT_PRESENT_ANGLE to replace VK_IMAGE_LAYOUT_PRESENT_SRC_KHR. The other option is to make the layout 32 bit instead of 5 bit, but I figured this probably is better in terms of cost/benefit balance for now.",
      "parentUuid": "f2477552_993eb35d",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00752f94_4d9d544d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-16T17:46:34Z",
      "side": 1,
      "message": "You\u0027re getting bit because of technical debt. We should be using packed enums for all these values instead of the Vulkan ones. I didn\u0027t to save time. See this comment in the code:\n\nhttps://chromium.googlesource.com/angle/angle/+/005793e4c95a53c327690a7538e650c8e8c40e5b/src/libANGLE/renderer/vulkan/vk_cache_utils.cpp#523\n\nCan you please make a small prior patch to store vk::ImageLayout instead for the attachment op layouts? As well as unpacking it in vk_cache_utils. vk::ImageLayout will pack well into the 5 bits. Also please use \"SetBitField\" to set the bits while ensuring safety. You won\u0027t need the custom enum any more.\n\nIn general when running into small problems like this we usually resolve them in lieu of adding more debt. Larger technical debt problems can be deferred.",
      "parentUuid": "fcb56ff1_3c348528",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8867ef00_eb0ef416",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 231,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-16T18:21:00Z",
      "side": 1,
      "message": "+1 to not having a `#define`d layout mixed with standard ones.",
      "parentUuid": "00752f94_4d9d544d",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "634f8bed_c5123608",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-16T20:14:04Z",
      "side": 1,
      "message": "Do we need:\n   other.mContentDefined \u003d false;\n\nTo match the constructor above?",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ff93c9f_ca6a9a71",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1100,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-16T20:14:04Z",
      "side": 1,
      "message": "Can you add a comment here explaining why all of these conditions need to line up this way before you can call optimizeRenderPassForPresent()?",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99b8ff1a_b2780220",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1136,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-16T18:21:00Z",
      "side": 1,
      "message": "Don\u0027t need to test this. `isLayoutChangeNecessary` automatically called by `changeLayout` should return false.",
      "range": {
        "startLine": 1136,
        "startChar": 4,
        "endLine": 1136,
        "endChar": 72
      },
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d2b5e0c_3a008c51",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1536,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-16T18:21:00Z",
      "side": 1,
      "message": "nit: `? true : false` in `condition ? true : false` is redundant. If you want to be explicit, you can say `return ...Count() \u003e 0;`",
      "range": {
        "startLine": 1536,
        "startChar": 45,
        "endLine": 1536,
        "endChar": 60
      },
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6df60f30_5103e8a7",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1476,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-04-15T14:15:01Z",
      "side": 1,
      "message": "Since this is the only difference between initWithLoad maybe make this a parameter?",
      "range": {
        "startLine": 1476,
        "startChar": 28,
        "endLine": 1476,
        "endChar": 59
      },
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cb33368_fe037d1c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1476,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-15T15:58:09Z",
      "side": 1,
      "message": "That is right. I don\u0027t have much preference here. Compiler will inline them anyway. I think.",
      "parentUuid": "6df60f30_5103e8a7",
      "range": {
        "startLine": 1476,
        "startChar": 28,
        "endLine": 1476,
        "endChar": 59
      },
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f15c2bda_4f70dd65",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-04-15T14:54:04Z",
      "side": 1,
      "message": "To clarify, this is a private/internal-to-ANGLE layout, that will never be published?\n\nSeems possible that this value (31) can be taken by a future core version of Vulkan.  Not sure it\u0027s a big risk.",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "758dbbed_2d1abdff",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-15T15:58:09Z",
      "side": 1,
      "message": "That is right, there is a small risk here. As I explained above, it most about cost/benefit balance. When that day arrives, 5 bit will not be enough and we will just remove the private enum here.",
      "parentUuid": "f15c2bda_4f70dd65",
      "revId": "9802eba299eab8ffb5eaa85ee87f68aefd3d9c90",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}