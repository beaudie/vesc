{
  "comments": [
    {
      "key": {
        "uuid": "f41ba2dc_faeab328",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-02T18:12:02Z",
      "side": 1,
      "message": "PTAL - test added and verified on nvidia 950m with \"minStorageBufferOffsetAlignment\" \u003d\u003d 16",
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a9eb3e_ba99d6e9",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-02T18:40:39Z",
      "side": 1,
      "message": "Based on the change here, I would have expected the bug to trigger when there are multiple atomic counter buffer bindings (which would excessively increment mValidAtomicCounterBufferCount)\n\nIs the new test really exercising the bug that\u0027s fixed here?",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "945e9e30_f7254641",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-02T18:53:05Z",
      "side": 1,
      "message": "the new test is a catch all for any bug in counting mechanism, not specifically tailored to this corner case. The fix here was about 2 things -\n\n1. to not increment when a slot is bound with a new buffer replacing an old one. with the old code the count would have been 2 but with this change the count will be 1. either way the offset calculation will be performed.\n\n2. to decrement when we rebind a slot with null buffer. with old code the count would be 1 but with new code the count will be 0. Though there is a difference, it will not affect anything since when we go into \"writeAtomicCounterBufferDriverUniformOffsets\" all we do is see that the bindings are invalid and silently exit the function.\n\ndo you have a specific bind/unbind pattern that can trigger the bug this patch fixes?",
      "parentUuid": "f6a9eb3e_ba99d6e9",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889cf16c_794196a8",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-02T19:09:12Z",
      "side": 1,
      "message": "My point exactly is that the new test is not exercising either of the above scenarios!",
      "parentUuid": "945e9e30_f7254641",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90310b2b_a3ce9977",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-02T21:10:16Z",
      "side": 1,
      "message": "what i meant was - even with a test, the output would not have changed. or maybe you are saying just add a usecase where we bind/unbind to the same slot? if so, i will update shortly",
      "parentUuid": "889cf16c_794196a8",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56ed207d_c0136c92",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-02T21:15:41Z",
      "side": 1,
      "message": "i think i am going to leverage this assert -\n\nASSERT(mValidAtomicCounterBufferCount \u003c\u003d static_cast\u003cuint32_t\u003e(getCaps().maxAtomicCounterBufferBindings));\n\nwith the old code, in a debug build, this assert will hit if i call bind \u003e 8 times",
      "parentUuid": "90310b2b_a3ce9977",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f839cea_882c53ac",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1989,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-02T23:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56ed207d_c0136c92",
      "range": {
        "startLine": 1977,
        "startChar": 0,
        "endLine": 1989,
        "endChar": 13
      },
      "revId": "37a8bc69e0ebe7b338989406bfe9bf90e6fe5aec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}