{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc8f31a_45afb9ef",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T14:33:37Z",
      "side": 1,
      "message": "TL;DR please remove `angle::Spinlock` here and let it use `std::mutex` (its default). There is no evidence yet (because the code is not complete) that performance with `std::mutex` is good or bad.\n\n---\n\nFYI, bear in mind that spinlock in user-space is generally a bad idea. See this post by Linus explaining things after some Stadia game devs complained that their windows-oriented \"busy loop with yield()\" doesn\u0027t work the same on Linux: https://www.realworldtech.com/forum/?threadid\u003d189711\u0026curpostid\u003d189723\n\nGist of it is that:\n\n* The thread waiting on the lock is hogging the cpu, and stopping the one owning the lock to actually make progress\n* The scheduler is unaware of the relationship between the two threads, so won\u0027t wake up the thread that is waiting on the lock (and who has yield()ed) once released\n\n(In this case, the latter doesn\u0027t apply. The spinlock still wastes battery though). Looks like the original author of the CL backend introduced spinlocks in ANGLE, but eventually we should get rid of it.",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8af6602_c6cd6ef9",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T22:42:33Z",
      "side": 1,
      "message": "Agreed here, yeah I would rather be more energy conscious than premature optimize this guy. And nice article - thanks for sharing üòä - will update this chunk.",
      "parentUuid": "cdc8f31a_45afb9ef",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f060b31_495937a5",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T14:33:37Z",
      "side": 1,
      "message": "`mData` seems very generic for something in the \"context\". Please add a comment to tell what this data actually is + a better name if possible.",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4742e67f_da754c53",
        "filename": "src/libANGLE/renderer/vulkan/CLContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T22:42:33Z",
      "side": 1,
      "message": "Yep, needs a better name for sure. Will update in next patchset",
      "parentUuid": "0f060b31_495937a5",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6736eeb_9134d69b",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T14:33:37Z",
      "side": 1,
      "message": "What if the buffer is being accessed by the GPU? With GL buffers, we have basically this logic:\n\n- If dst buffer is not accessed by GPU, copy on CPU\n- If dst buffer is being accessed by GPU, copy to it on GPU\n- If src buffer is begin read by GPU, map it on the CPU\n- If src buffer is begin written to by GPU, copy to dst on GPU\n\nIf an initial implementation wants to be inefficient, that\u0027s ok, but this would need a `vkQueueWaitIdle` to make it correct.\n\n---\n\nIf the buffer cannot be accessed by the GPU, please ignore this comment!",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2096305_dfbe71bf",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T22:42:33Z",
      "side": 1,
      "message": "Correct, not being accessed by GPU \"at this point\". This method is used inside of a OpenCL enqueue API. For example, this `copyTo` is used in `enqueueReadBuffer` where if either its a blocking-read or if we determine that resource is being accessed/writen-to by GPU, we essentially do \n\n`clFinish (i.e. flush cmdQueue + vkQueueWaitIdle)`\n\nThen we call this `copyTo` method right after.\n\n---\n\n\u003e If an initial implementation wants to be inefficient, that\u0027s ok\n\nYep, exactly (at least in my above rundown). Our team debated on whether we do above for the first go, or should we instead enqueue a GPU copy `vkCmdCopyBuffer ` + host sync routine (when finished).\n\nLong-term I\u0027m pushing for the latter (especially for cmd batching performance) but there are some OpenCL - Vulkan nuances to work-out/ensure we get right. So I think former will likely be the first go (then optimize from there).\n\n---\n\n\u003e If the buffer cannot be accessed by the GPU, please ignore this comment!\n\nAt the moment yes, we introduce the `vkQueueWaitIdle` equivalent once we start pushing the enqueue APIs here soon.",
      "parentUuid": "b6736eeb_9134d69b",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19863b32_7f4c51a2",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 132,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-11T14:33:37Z",
      "side": 1,
      "message": "Ah nice to finally see this syntax in C++. FYI, you can drop any field that\u0027s zero and designated initializers set them to 0/nullptr. I recommend doing that at least for fields that are normally ok to be ignored (like `pNext` and `flags`, not recommended for like `srcOffset` where 0 can be an intentional meaningful value)",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d99de84c_a9b607ca",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 132,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T22:42:33Z",
      "side": 1,
      "message": "Gotcha, will update üëç",
      "parentUuid": "19863b32_7f4c51a2",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9a437a6_883883c9",
        "filename": "src/libANGLE/renderer/vulkan/CLMemoryVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 132,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-03-11T23:48:13Z",
      "side": 1,
      "message": "Ah I remember now, I think with this init approach, its all or nothing:\n```\n../../src/libANGLE/renderer/vulkan/CLMemoryVk.cpp:129:5: error: missing field \u0027pNext\u0027 initializer [-Werror,-Wmissing-field-initializers]\n  129 |     };\n      |     ^\n```\nUnless we disable `missing-field-initializers` of course.\n\nI\u0027m good with the old way of doing it as well, I\u0027ll go ahead and do that.",
      "parentUuid": "d99de84c_a9b607ca",
      "revId": "8b10ccbdb56121b3ee3c92fa4ef14df064ecde30",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}