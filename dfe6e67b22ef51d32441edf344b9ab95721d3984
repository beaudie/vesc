{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1aea51f9_458aa438",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1834,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-10T23:04:38Z",
      "side": 1,
      "message": "Why are only the program\u0027s allocation counts reset?\n\nWhy aren\u0027t the context and utils counts reset?",
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06d2f143_022f0130",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1834,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:33:55Z",
      "side": 1,
      "message": "Those are reset in the ContextVk funcs, e.g.:\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp;l\u003d1836?q\u003ddescriptorsetallocationcount\u0026ss\u003dchromium",
      "parentUuid": "1aea51f9_458aa438",
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df7cf826_dc68af60",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6443,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-10T17:47:17Z",
      "side": 1,
      "message": "probably should be a split change, forgot to take it out.",
      "range": {
        "startLine": 6443,
        "startChar": 9,
        "endLine": 6443,
        "endChar": 25
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "411fb1a5_9a94b9e4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6443,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T18:02:50Z",
      "side": 1,
      "message": "No need for if. The finishImpl() call is unconditional.",
      "parentUuid": "df7cf826_dc68af60",
      "range": {
        "startLine": 6443,
        "startChar": 9,
        "endLine": 6443,
        "endChar": 25
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ff17916_458a742b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6443,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-10T19:44:13Z",
      "side": 1,
      "message": "That\u0027s an ANGLE bug, right? We shouldn\u0027t be finishing on pack buffers. Better if we don\u0027t tell the app to change their behavior when it\u0027s an ANGLE internal issue.",
      "parentUuid": "411fb1a5_9a94b9e4",
      "range": {
        "startLine": 6443,
        "startChar": 9,
        "endLine": 6443,
        "endChar": 25
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35c7fa16_d6af63ab",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6443,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T19:49:51Z",
      "side": 1,
      "message": "PBOs are implemented mostly with CPU readback! I recently added a transfer-based fast path for pack buffers (see line 6391 above).\n\nI think there\u0027s still value in this. The message could be specialized to clearly say it\u0027s taking an inefficient path.\n\n- A developer seeing this will not be surprised by the bad performance\n- More importantly, when we see this we know an application is hitting this path and we should prioritize optimizing it.",
      "parentUuid": "2ff17916_458a742b",
      "range": {
        "startLine": 6443,
        "startChar": 9,
        "endLine": 6443,
        "endChar": 25
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7df2de17_0620432b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6443,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:34:58Z",
      "side": 1,
      "message": "Ack, reverted. This is actually an INFO message. It\u0027s sufficiently difficult to figure out who all depends on what prints to work that I left it alone.",
      "parentUuid": "35c7fa16_d6af63ab",
      "range": {
        "startLine": 6443,
        "startChar": 9,
        "endLine": 6443,
        "endChar": 25
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be55d563_6e548ad6",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2953,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T18:02:50Z",
      "side": 1,
      "message": "No need for /4",
      "range": {
        "startLine": 2953,
        "startChar": 15,
        "endLine": 2953,
        "endChar": 17
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c3ed573_32f03807",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2953,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:33:55Z",
      "side": 1,
      "message": "Ack, it\u0027s more precise this way. Each int is packed into 4x float vector.\n\nFor example you could make this value max_vectors/1024/etc and the test would still pass, or any value higher than this one. Correct me if I\u0027m wrong.",
      "parentUuid": "be55d563_6e548ad6",
      "range": {
        "startLine": 2953,
        "startChar": 15,
        "endLine": 2953,
        "endChar": 17
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06c12a2a_33db8639",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2953,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-12T15:14:02Z",
      "side": 1,
      "message": "I see what\u0027s going on. You need to use std430, otherwise each int is taking 16 bytes. With that, since the buffers are 64 ints, then the shader should also have 64 ints.\n\nAs is, you are using 1 out of every 4 integer in the buffers you are creating.",
      "parentUuid": "1c3ed573_32f03807",
      "range": {
        "startLine": 2953,
        "startChar": 15,
        "endLine": 2953,
        "endChar": 17
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef024277_39121a3c",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3009,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T18:02:50Z",
      "side": 1,
      "message": "1 (it\u0027s integer)",
      "range": {
        "startLine": 3009,
        "startChar": 28,
        "endLine": 3009,
        "endChar": 32
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22221624_8fe33c31",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3009,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef024277_39121a3c",
      "range": {
        "startLine": 3009,
        "startChar": 28,
        "endLine": 3009,
        "endChar": 32
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c19dea04_17b23338",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3014,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T18:02:50Z",
      "side": 1,
      "message": "2",
      "range": {
        "startLine": 3014,
        "startChar": 28,
        "endLine": 3014,
        "endChar": 32
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c6832c8_7adf414d",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3014,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:33:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c19dea04_17b23338",
      "range": {
        "startLine": 3014,
        "startChar": 28,
        "endLine": 3014,
        "endChar": 32
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07afaca8_f9a118c9",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3039,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-10T18:02:50Z",
      "side": 1,
      "message": "The test could be greatly simplified if you used a GL_ONE, GL_ONE blend, and make sure the color in the end is green (so no red was output in the middle). No need for pack buffers or read pixels in the loop.",
      "range": {
        "startLine": 3028,
        "startChar": 0,
        "endLine": 3039,
        "endChar": 40
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0431177_65137c69",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3039,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-11T21:33:55Z",
      "side": 1,
      "message": "Ack, left as an exercise for the reader/future improver. ;)",
      "parentUuid": "07afaca8_f9a118c9",
      "range": {
        "startLine": 3028,
        "startChar": 0,
        "endLine": 3039,
        "endChar": 40
      },
      "revId": "dfe6e67b22ef51d32441edf344b9ab95721d3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}