{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "38554f98_142b9e6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-05-10T19:16:25Z",
      "side": 1,
      "message": "Thanks",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a965b803_a89e4eb0",
        "filename": "src/libANGLE/renderer/driver_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-10T19:40:31Z",
      "side": 1,
      "message": "FYI, it\u0027s not a coincidence that this matches up with the ARM one exactly. This scheme is Vulkan\u0027s own versioning scheme.\n\nCould you please deduplicate with the ARM one below by defining a \"ParseGenericVulkanDriverVersion\" that does this? These two would both just call that.\n\nAlso, while you\u0027re here please rename both this and the ARM one to say \"Parse...VulkanDriverVersion\". The GL driver versions don\u0027t necessarily follow this scheme (and these helpers are only used in vulkan/).",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d4b6537_2f6fa406",
        "filename": "src/libANGLE/renderer/driver_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 350,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-05-10T21:58:35Z",
      "side": 1,
      "message": "Thanks! Makes sense.\nDone.",
      "parentUuid": "a965b803_a89e4eb0",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70b40667_949dabce",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-10T19:40:31Z",
      "side": 1,
      "message": "Probably better to use `using QualcommDriverVersion \u003d angle::VersionTriple;` similar to how `ARMDriverVersion` is defined below.",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afb75dcd_e5667085",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-05-10T21:58:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70b40667_949dabce",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba07298_2fa647df",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2024-05-15T14:27:46Z",
      "side": 1,
      "message": "Is there a reason to have an ARM and Qualcomm separation here if they are the same thing, parsed the same way?  Maybe just `VulkanDriverVersion` and `ParseVulkanDriverVersion`",
      "parentUuid": "afb75dcd_e5667085",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b98e8b2e_0b3bc289",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-15T15:02:50Z",
      "side": 1,
      "message": "It\u0027s kinda nice, not to have the user (the vulkan backend) have to know which vendors follow the generic format and which ones are special.",
      "parentUuid": "3ba07298_2fa647df",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "710c6ab9_fe84ae05",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2024-05-15T16:24:53Z",
      "side": 1,
      "message": "From your other comment \"This scheme is Vulkan\u0027s own versioning scheme.\" my takeaway was this will always be the same.  No big deal though, I don\u0027t mind specifying which vendor I\u0027m adding a vendor workaround for.",
      "parentUuid": "b98e8b2e_0b3bc289",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "859da7e2_743fe4d1",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-15T16:53:48Z",
      "side": 1,
      "message": "It\u0027s the API\u0027s versioning scheme, there\u0027s no indication that the driver version should follow the same scheme. Like, vulkaninfo\u0027s code has this:\n\n```\n    // Vendor specific driverVersion mapping scheme\n    // If one isn\u0027t present, fall back to the standard Vulkan scheme\n    std::string GetDriverVersionString() {\n        uint32_t v \u003d props.driverVersion;\n        if ((found_driver_props \u0026\u0026 driverID \u003d\u003d VK_DRIVER_ID_NVIDIA_PROPRIETARY) ||\n            (!found_driver_props \u0026\u0026 props.deviceID \u003d\u003d 4318)) {\n            return std::to_string((v \u003e\u003e 22) \u0026 0x3ff) + \".\" + std::to_string((v \u003e\u003e 14) \u0026 0x0ff) + \".\" +\n                   std::to_string((v \u003e\u003e 6) \u0026 0x0ff) + \".\" + std::to_string(v \u0026 0x003f);\n        } else if ((found_driver_props \u0026\u0026 driverID \u003d\u003d VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS)\n#if defined(WIN32)\n                   || (!found_driver_props \u0026\u0026 props.deviceID \u003d\u003d 0x8086)  // only do the fallback check if running in windows\n#endif\n        ) {\n            return std::to_string(v \u003e\u003e 14) + \".\" + std::to_string(v \u0026 0x3fff);\n        } else {\n            // AMD uses the standard vulkan scheme\n            return APIVersion(v).str();\n        }\n    }\n```",
      "parentUuid": "710c6ab9_fe84ae05",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d63d4b1_f56bc9f4",
        "filename": "src/libANGLE/renderer/driver_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-05-15T20:22:56Z",
      "side": 1,
      "message": "Thanks!\nI also agree with keeping the separation and specifying the vendor when initializing the features.",
      "parentUuid": "859da7e2_743fe4d1",
      "revId": "1150df5b61f9a9368fcaef35de1ca57fa33db578",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}