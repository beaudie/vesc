{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0955b90c_372a3b58",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 653,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "nit: not really `optimize`. Maybe `unify`? Or even better, something like `onContextAdded` (which also raises the question of why `ShareGroupVk::addContext` is not calling this?",
      "range": {
        "startLine": 653,
        "startChar": 28,
        "endLine": 653,
        "endChar": 36
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78afebeb_805594f0",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 653,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:03:11Z",
      "side": 1,
      "message": "\u003e which also raises the question of why ShareGroupVk::addContext is not calling this?\n\nBecause of the separation of concerns. Did not want to overload the `addContext` with other logic.\nAnd the other reasons below...\n\n\u003e not really optimize. Or even better, something like onContextAdded\n\nIn the initial implementation priority could go down and this method could be called after `removeContext`, for example. And going down with priority for me is like an optimization. I decided to keep the name after changing logic to never go down.\n\n\u003e Maybe unify?\n\nI guess `unify` is OK.\n\n\u003e Or even better, something like onContextAdded\n\n`onContextAdded` is not good. This method is called at the beginning of initialization, while `addContext` at the end. This is done so that new `ContextVk` have correct priority from the start.",
      "parentUuid": "0955b90c_372a3b58",
      "range": {
        "startLine": 653,
        "startChar": 28,
        "endLine": 653,
        "endChar": 36
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbca2793_14b7d165",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 653,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:51:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78afebeb_805594f0",
      "range": {
        "startLine": 653,
        "startChar": 28,
        "endLine": 653,
        "endChar": 36
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99651093_e4ba1e8d",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 667,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "nit: no need for `, \"\"` since C++17",
      "range": {
        "startLine": 667,
        "startChar": 74,
        "endLine": 667,
        "endChar": 78
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11d2b17a_8a47b70b",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 667,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:51:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99651093_e4ba1e8d",
      "range": {
        "startLine": 667,
        "startChar": 74,
        "endLine": 667,
        "endChar": 78
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6981002_d2d0a789",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "If there aren\u0027t any, please add a test that requires ordered submissions between protected and unprotected contexts.",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ad7019_4766361b",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:03:11Z",
      "side": 1,
      "message": "There are no ordering requirements between protected and unprotected contexts in this CL.\n\nThis logic is for optimization to avoid extra submission.\n\n- Protected and unprotected commands recorded into different primary command buffers.\n- All command buffers of Contexts need to be submitted to the old `VkQueue` before submitting the `VkSemaphore`.\n- Order of submission is not considered.\n\nMay replace with `angle::PackedEnumBitSet()` or highest protection type (read below).\nOr just do not optimize and always submit all buffers (prefer this - read other comment).\n\n---\n\nRegarding ordering. This is a separate issue.\nI think it is safer to first submit unprotected and then protected. Because unprotected may write and protected then read. This should be checked.\n\nHowever, apps can\u0027t reliably control when submissions are made. So ANGLE should explicitly track unprotected-\u003eprotected resource use, or just always submit Unprotected when submitting Protected (just like OutsideRP and RenderPass command buffers).\n\nThis made me thinking.\nMaybe just pass into the `submitPriorityDependency` single highest protection type.\nAnd the `RendererVk` will submit all protection types up to the highest type.\nOr just always submit all buffers (read other comment).",
      "parentUuid": "b6981002_d2d0a789",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6fffda8_0fed828b",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:11:08Z",
      "side": 1,
      "message": "\u003e There are no ordering requirements between protected and unprotected contexts\n\nI mean, the test should make sure the ordering is correct regardless of implementation.\n\n\u003e I think it is safer to first submit unprotected and then protected.\n\u003e ...\n\u003e However, apps can\u0027t reliably control when submissions are made. So ANGLE should explicitly track unprotected-\u003eprotected resource use, or just always submit Unprotected when submitting Protected (just like OutsideRP and RenderPass command buffers).\n\nI\u0027m not following, there is no reason unprotected should unconditionally go before protected; it really depends on what the app did:\n\n- Context A: submit work A, insert fence\n- Context B: wait on fence, submit work B\n\nEach of A or B could be protected or unprotected, so we could so both protected-then-unprotected as well as unprotected-then-protected cases.\n\n---\n\nAaaaaand I just realized I probably mixed up protected vs priority again, this change is only about priority right? The request still stands though, please add tests (if there aren\u0027t any) that make sure ordering of commands between high and low priority contexts is preserved (in the presence of fence).\n\nYou could still add the tests for protected/unprotected ordering too, but might need to skip them if they are failing until fixed.",
      "parentUuid": "c2ad7019_4766361b",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dafa48c_0565018b",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T18:19:31Z",
      "side": 1,
      "message": "\u003e - Context A: submit work A, insert fence\n- Context B: wait on fence, submit work B\n\nThere is no submit in GLES. Even glFlush() may be optimized. That was my point that app can\u0027t control submissions directly, and ANGLE must ensure proper ordering based on the EGL/GLES APIs (like `glFenceSync/glWaitSync`).\n\n\u003e Aaaaaand I just realized I probably mixed up protected vs priority again, this change is only about priority right?\n\nYes) This is about priority (VkQueue) and not protected/unprotected.\n\n\u003e  The request still stands though, please add tests (if there aren\u0027t any) that make sure ordering of commands between high and low priority contexts is preserved (in the presence of fence).\n\nOK, I will try. Hope my test will fail without a fix and passes with the fix.",
      "parentUuid": "f6fffda8_0fed828b",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d36a285_ac4fa95d",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T21:27:05Z",
      "side": 1,
      "message": "\u003e Hope my test will fail without a fix and passes with the fix.\n\nIt may still pass by luck, but at least there\u0027d be something breaking accidental breakage 😊\n\n\u003e That was my point that app can\u0027t control submissions directly, and ANGLE must ensure proper ordering based on the EGL/GLES APIs (like glFenceSync/glWaitSync).\n\nFYI, the spec actually calls this out, there\u0027s a footnote that says \"if you want to enforce submission, use a fence\".",
      "parentUuid": "8dafa48c_0565018b",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b869d9f_a6c5838d",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T16:49:16Z",
      "side": 1,
      "message": "\u003e FYI, the spec actually calls this out, there\u0027s a footnote that says \"if you want to enforce submission, use a fence\".\n\nBut ANGLE defers submission anyway)\nAnd any context from other thread may cause submission.\nSo at the end - app can\u0027t control submission order.",
      "parentUuid": "2d36a285_ac4fa95d",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "556a9ed3_d51f3d7f",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 711,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-08T17:24:14Z",
      "side": 1,
      "message": "Added test. Running bots now with commented fix.\n\nLocal tests on G996B fails with commented fix and works with the fix.\n\nInterestingly, test fails only when *low priority renders and high priority waits fence then samples* (priority inversion). I guess when high priority renders, low priority implicitly waits until work is done in the queue. So maybe this problem not as critical in the real world.\n\nTests on laptop NVIDIA/Intel - works fine without fix.",
      "parentUuid": "3b869d9f_a6c5838d",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3bc774_02e007a9",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "Please add a comment that these are temporary and a workaround.",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c119b31_49e035a5",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:51:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c3bc774_02e007a9",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f12eb48_6937d110",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "Is it worth a follow up where the wait semaphore is made pending and submitted with whatever the context submits naturally?",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34540b9f_fd92a8e7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:03:11Z",
      "side": 1,
      "message": "I do not think so. It is a temp solution.\n\ninstead, I was thinking to make this functionality part of the `CommandQueue` rather than `RendererVk`. Add some kind of dependency information between priorities. The `CommandQueue` will automatically submit other priorities and manage `VkSemaphores`.\n\nThis functionality may be reused for the future fix. In that fix we will only need to decide what dependencies to add.\n\nThere is one problem - protection type.\nIt makes everything complicated. Because now it is basically splits `VkQueue` in two.\nAnd I\u0027m not sure if we should track dependencies on a primary command buffer level.\n\nI suggest for simplicity just submit all primary command buffers **in a single batch** (unprotected first and then protected). This way need to only track dependacy between `VkQueue`s.\nI will try prepare this CL before this one. This will also remove `protectionType1/protectionType2` problem.",
      "parentUuid": "2f12eb48_6937d110",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2749e667_dac8e431",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:11:08Z",
      "side": 1,
      "message": "Can we try to treat priority and protection identically? It\u0027s all just different queues in the end, why should protected/unprotected be submitted at the same time, but not different priorities?\n\nI\u0027d love to see a solution where queue dependencies are managed regardless of what that queue is; i.e. priority+protected gives you the queue index and beyond that it doesn\u0027t matter what the actual values of priority or protected are.",
      "parentUuid": "34540b9f_fd92a8e7",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43fe4f2e_51e2acd9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T18:19:31Z",
      "side": 1,
      "message": "\u003e Can we try to treat priority and protection identically?\n\nIf so, enforce priority should also enforce protection type which is not possible.\nSo treat \"identically\" is not an option.\n\nProtection type is a `VkCommndBuffer`.\nPriority is a `VkQueue` (later also `VkCommndBuffer`).\nIt is logically different things: queue vs content.\n\nWe can try to synchronize not `VkQueue`s but `VkCommndBuffer`s (after the last CL).\nTo address a command buffer need pair: protection type and priority.\nDependency will be between such pairs instead of just between priorities.\n\n\u003e why should protected/unprotected be submitted at the same time, but not different priorities?\n\nFor simplicity of the implementation. Need only pair `srcPriority/dstPriority` for dependency and single `VkSemaphore` (like in this CL).\n\nprotected/unprotected is software a queue that just requires proper submission ordering. Dependency between protected/unprotected should be implemented already (same priority). But I\u0027m not sure about that. Submitting all at the same time will fix these bugs.\n\nAlso because of my mistake. I wanted to submit both protected/unprotected with the same `vkQueueSubmit` call because `VkQueue` is the same.\n\nSo my motivation was to make fixes with priority simpler and also fix possible bug with protected/unprotected. Then, if needed, can optimize and remove simultaneous protected/unprotected submission.",
      "parentUuid": "2749e667_dac8e431",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c736c17b_28c8fe85",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T21:27:05Z",
      "side": 1,
      "message": "Huh, sorry I thought protected submissions go through a different queue. Give me some time to wrap my head around this",
      "parentUuid": "43fe4f2e_51e2acd9",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30d1849e_718bf69f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 5226,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T16:49:16Z",
      "side": 1,
      "message": "OK. I suggest concentrate on priority and leave protected/unprotected problem for late...\n\n\u003e I will try prepare this CL before this one. This will also remove protectionType1/protectionType2 problem.\n\nWill not do it right now...\n\nBecause first need to implement enforced submission on flush (from withing the `CommandQueue`). This functionality will be used for inserting `VkSemaphore` dependency as well as ensure correct ordering of protected/unprotected submissions.\n\nBut let\u0027s not focus on this right now. This is a problem for a later time.\nAfter these CLs my plans are:\n- ensure correct submission order (according to flush commands order) protected/inprotected. This will simplify next steps.\n- add `VkSemaphore` dependency functionality into the `CommandQueue`. Who and how will add dependency is TBD. May start replacing this CLs `submitPriorityDependency`.\n- Maybe later add timeline semaphores (I guess even replace VkFence).\n- Then maybe remove code that submits protected/unprotected simultaneously.",
      "parentUuid": "c736c17b_28c8fe85",
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e68276b0_3e5fa062",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:10:49Z",
      "side": 1,
      "message": "Shouldn\u0027t these also be called src and dst? What does 1 and 2 mean otherwise?",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779d54ed_0167a93c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:03:11Z",
      "side": 1,
      "message": "\u003e Shouldn\u0027t these also be called src and dst?\n\nNo.\n\n\u003e What does 1 and 2 mean otherwise?\n\nFor what protection types need to submit dependency.\n\nIt is a \"dirty\" array with only 1 or 2 elements.\nIf both values same - then only single element.",
      "parentUuid": "e68276b0_3e5fa062",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3527f9b9_17d71264",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T17:11:08Z",
      "side": 1,
      "message": "Got it, please use `angle::PackedEnumBitSet`. You can call it `srcProtectionTypes` it looks like both are used with `srcContextPriority`",
      "parentUuid": "779d54ed_0167a93c",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "880a2d03_09dee774",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T18:19:31Z",
      "side": 1,
      "message": "Protection types is for the whole operation based on contexts that change priority from `src` to `dst`. Correct name is just `protectionTypes`.\n\nFull dependency:\n```\nsrcContextPriority/unprotected -\u003e dstContextPriority/unprotected\nsrcContextPriority/unprotected -\u003e dstContextPriority/protected\nsrcContextPriority/protected   -\u003e dstContextPriority/protected\n```",
      "parentUuid": "3527f9b9_17d71264",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f7c62c_7a2de0f1",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T21:27:05Z",
      "side": 1,
      "message": "Why is `src/protected -\u003e dst/unprotected` not necessary?",
      "parentUuid": "880a2d03_09dee774",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8db60a99_e62a1f85",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T16:49:16Z",
      "side": 1,
      "message": "I may be wrong.\n\nProtected submission can:\n- read/write protected content\n- only read unprotected content\n\nUnprotected submission can:\n- read/write only unprotected content\n\nLayout transition may write AFAIK.\n\nScenario 1: protected content.\nSimple. Only protected -\u003e protected possible.\n\nScenario 2: unprotected content write then protected content read\n- unprotected submission changes layout to write\n- unprotected submission writes unprotected content\n- unprotected submission changes layout to read only\n- protected submission reads unprotected content\n\nNote that in the above case protected context may need to do unprotected submissions...\n\nScenario 3: protected content read then protected content write\n- protected submission reads unprotected content\n- unprotected submission changes layout to write\n- unprotected submission writes unprotected content\n\nI guess I was wrong)\n\nThis comes from my suggestion submit protected before unprotected (like OutsideRP and RenderPass commands). Also need submit protected primary buffer when new unprotected commands flushed to the buffer (to fix scenario 3).\n\nAlternative universal rule: submit all primary command buffers on commands flush to primary if target buffer is not empty and there is non empty buffer with different protection type. Also need add primary command buffer submission list. This way we will ensure submission order same as flush to primary order. Or we could keep multiple primary command buffers, but this may result in a long submission list.\n\nAnyway. My wrong \"full dependency\" changes nothing for this CL.\n\nCurrent state with protected/unprotected. If we have both buffers in the `CommandQueue` with commands - then these commands must be unrelated, because any context may submit one of the buffer at any time. Therefore, it is not important for this CL in what order submit buffers when there a multiple bits in the `protectionTypes`.",
      "parentUuid": "12f7c62c_7a2de0f1",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f377809e_a265277f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 6
      },
      "lineNbr": 640,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-07T18:36:16Z",
      "side": 1,
      "message": "Replaced with `protectionTypes`.\n\nAlso simplified `ShareGroupVk::unifyContextsPriority()`.",
      "parentUuid": "8db60a99_e62a1f85",
      "range": {
        "startLine": 640,
        "startChar": 62,
        "endLine": 640,
        "endChar": 77
      },
      "revId": "b6e12cffbeacd5960105c3ff23d3af70b7b914c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}