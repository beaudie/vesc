{
  "comments": [
    {
      "key": {
        "uuid": "b509c558_7e76d8be",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-12T21:53:20Z",
      "side": 1,
      "message": "Does \"external means\" mean the host wrote the memory? Or is that assumed and instead it\u0027s host-accessible memory that was written by GPU while mapped? Or something else?",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "829f4d2d_26dffe91",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-16T03:02:53Z",
      "side": 1,
      "message": "The man page says:\n\n\u003e glUnmapBuffer returns GL_TRUE unless the data store contents have become corrupt during the time the data store was mapped. This can occur for system-specific reasons that affect the availability of graphics memory, such as screen mode changes. \n\nI don\u0027t know what exactly \"screen mode\" is, but it seems to be related to window system (but then how does that apply to \"buffers\"?)",
      "parentUuid": "b509c558_7e76d8be",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abafc467_03e0bd56",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 236,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-16T16:34:27Z",
      "side": 1,
      "message": "Yeah, I guess \"screen mode\" is the user changing the resolution and/or color depth of screen.",
      "parentUuid": "829f4d2d_26dffe91",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78a48f02_012cb5c4",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-12T21:53:20Z",
      "side": 1,
      "message": "Just to clarify, this is now a cmd buffer that necessarily includes a render pass? Meaning, for example, a cmd buffer that only copies buffers on transfer queue apart from a render pass is excluded.",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "869dcdd4_cfca77d6",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-16T03:02:53Z",
      "side": 1,
      "message": "This was always the case. The only user of this class is ContextVk, which uses this to keep track of the current render pass.",
      "parentUuid": "78a48f02_012cb5c4",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4e92dbc_5779c388",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-16T16:34:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "869dcdd4_cfca77d6",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92fa2872_75495608",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-12T21:53:20Z",
      "side": 1,
      "message": "I see that updateUniforms() has a path where it doesn\u0027t allocate a new buffer. In that case we should skip dirtying the DSs here (and in setupDraw()) as well, right? Would need to pipe the anyNewBufferAllocated bool back out of updateUniforms().",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "335ed1a8_5e491e0f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-16T03:02:53Z",
      "side": 1,
      "message": "Unfortunately no, if `updateUniforms()` doesn\u0027t allocate a new buffer, it will allocate at a different (dynamic) offset from the old one. We still need to bind the DS for the sake of the dynamic offsets.",
      "parentUuid": "92fa2872_75495608",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f20e90e_e0c47ec4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-07-16T16:34:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "335ed1a8_5e491e0f",
      "revId": "cc59d7326217a33b7b68f427f42dc284aabcaedf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}