{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4d2519e0_788d57d4",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-08T14:37:14Z",
      "side": 1,
      "message": "This could be a full-screen triangle. My suggestion was to make a `glScissor(0, 0, 1, 1)` call right above the draw calls to make sure that doesn\u0027t happen. Either that or make a one time scissor call at the beginning of the trace to make sure the \"default\" scissor is not used (then ScissorProc would take care of it)",
      "revId": "4543efb42bca8bcabceb014dc50806515b64ad0d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81819a4a_6aff1b7b",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 193,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-08T17:56:03Z",
      "side": 1,
      "message": "If you look at all app traces, they all call glScissor at some point, so I think we are good here. if you really worry about it, then you will have more things to worry, for example, what if scissor is called but is disabled? I think we can revise it when we find more issues with the hack when we using this for investigation.\n\nThe other option is just draw one point. It is safer memory wise, safer on actual workload generated. It loss a bit of coverage for how driver handle primitive mode switches, but should not a deal breaker. We will have to interpose XFB API as well and handle that issue as well. But overall it generates more defined workloads. Maybe I should switch back to draw a point.",
      "parentUuid": "4d2519e0_788d57d4",
      "revId": "4543efb42bca8bcabceb014dc50806515b64ad0d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9da3b4c5_a940ca26",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 193,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-08T18:27:49Z",
      "side": 1,
      "message": "Moved back to a single point method (and still override scissor call as well). I don\u0027t want to deal with uncertainty of a triangle that may have completely random data in it.",
      "parentUuid": "81819a4a_6aff1b7b",
      "revId": "4543efb42bca8bcabceb014dc50806515b64ad0d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11a20527_e0557a14",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 193,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-08T18:28:42Z",
      "side": 1,
      "message": "And have verified on linux that no GL error is generated while running all app traces.",
      "parentUuid": "9da3b4c5_a940ca26",
      "revId": "4543efb42bca8bcabceb014dc50806515b64ad0d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0239ec2c_35bebbac",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-04-08T18:37:13Z",
      "side": 1,
      "message": "Good point about scissor being disabled. It\u0027s still not correct for geometry and tessellation, but I guess it\u0027s fine until there are traces that actually use them. Maybe add a comment for it?",
      "parentUuid": "11a20527_e0557a14",
      "revId": "4543efb42bca8bcabceb014dc50806515b64ad0d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}