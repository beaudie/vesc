{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2add44a_d44ed0d2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5229,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-05T20:17:51Z",
      "side": 1,
      "message": "Not a fan of `FunctionScoped`, I feel like it\u0027s complicating things more than it helps.\n\nHow about instead having a scoped class that garbage collects (and we can probably easily use it elsewhere too), and use it here by moving the semaphore out of `DeviceScoped` and put it in the new object?\n\nAnother option, if possible, is to have `DeviceScoped` choose to destroy or garbage collect based on whether a queue serial pointer is set or not. Then here you\u0027d just pass the queue serial so `DeviceScoped` would do the right thing.",
      "revId": "a8d87135885de5a63dd559a0935c50202c09f657",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8af60207_d2497264",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5229,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T12:50:21Z",
      "side": 1,
      "message": "\u003e How about instead having a scoped class that garbage collects (and we can probably easily use it elsewhere too), and use it here by moving the semaphore out of DeviceScoped and put it in the new object?\n\nWas my first thought, but struggled with the name (already have `RendererScoped`).\nDecided to make universal solution...\n\n\u003e Another option, if possible, is to have DeviceScoped choose to destroy or garbage collect based on whether a queue serial pointer is set or not. Then here you\u0027d just pass the queue serial so DeviceScoped would do the right thing.\n\nAlso need to pass `RendererVk` pointer.\n\nI will add this into the `RendererScoped`.\nThanks for suggestion.",
      "parentUuid": "f2add44a_d44ed0d2",
      "revId": "a8d87135885de5a63dd559a0935c50202c09f657",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79a2eada_d6443c33",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5229,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-03-06T14:02:45Z",
      "side": 1,
      "message": "Can\u0027t add to `RendererScoped`, because other \"T\" have no `destroy(VkDevice)` method.\n\nAlso can\u0027t call `collectGarbage`, because `RendererVk` is incomplete.\nCan\u0027t use `RendererVk` in \"vk_wrapper.h\" either.\n\nThe only other way I can think of is not use `vk::Semaphore` and replace with some wrapper class and then use `RendererScoped`.",
      "parentUuid": "8af60207_d2497264",
      "revId": "a8d87135885de5a63dd559a0935c50202c09f657",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c81e519a_19cf7814",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5229,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-06T20:12:38Z",
      "side": 1,
      "message": "\u003e struggled with the name\n\n`GarbageCollectScoped` maybe\n\n\u003e Also can\u0027t call collectGarbage, because RendererVk is incomplete.\n\nI think you can forward declare the destructor out of the class with the `vk::Semaphore` specialization, then add the implementation in cpp.\n\n\u003e The only other way I can think of is not use vk::Semaphore and replace with some wrapper class\n\nThat could work too",
      "parentUuid": "79a2eada_d6443c33",
      "revId": "a8d87135885de5a63dd559a0935c50202c09f657",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}