{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3abdd2f9_b8364621",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2023-02-02T22:36:18Z",
      "side": 1,
      "message": "PTAL",
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c369413f_111b713e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2023-02-03T19:08:23Z",
      "side": 1,
      "message": "I c",
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75e0618_dff98c6f",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-03T03:07:27Z",
      "side": 1,
      "message": "I\u0027m worried this will end up letting huge diffs go through (as far as correctness goes, human eyes are irrelevant). Like a real bug was caught by this: https://angle-gold.skia.org/diff?grouping\u003dname%3Ddead_cells%26source_type%3Dangle\u0026left\u003d13034a2f512cd13a51628c62cfacf247\u0026right\u003d37b6fc489a4edaee10e11e75da655d7e\u0026changelist_id\u003d4031489\u0026crs\u003dgerrit (which has a diff of 100, but it might have as well got lucky with a diff of 5).\n\nAnother example is if for example we accidentally turn dithering off this would happily accept that.\n\nMy suggestion is instead to not base this on human perception, and try to reduce sensitivity to precision issues without giving it a chance to slip through a real change.\n\nHow about making the diff be 1 (instead of 10), and if possible make sure that the total number of different pixels is less than 10% the size of the image?",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a49f8c68_35ccea63",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2023-02-03T17:31:48Z",
      "side": 1,
      "message": "\u003e as far as correctness goes, human eyes are irrelevant  \n\nAre you sure? I thought that Vulkan has a lot of freedom in the implementation. How would you define correctness, if not by human eyes? Are restricted_trace_gold_tests capable of testing this definition of correctness?  \nhttps://angle-gold.skia.org/diff?grouping\u003dname%3Ddead_cells%26source_type%3Dangle\u0026left\u003d13034a2f512cd13a51628c62cfacf247\u0026right\u003d37b6fc489a4edaee10e11e75da655d7e\u0026changelist_id\u003d4031489\u0026crs\u003dgerrit looks significantly different to me and would still be caught by this algorithm. Do you have other examples, that a human wouldn\u0027t triage as positive?\n\n\u003e How about making the diff be 1 (instead of 10)  \n\nI\u0027m afraid this would still leave many images to humans to triage, i.e. wouldn\u0027t be really helpful. Brian, I remember there was a way to calibrate arguments to fuzzy matching. Is it something we can do here? I\u0027d like to get some information about how the history of each test would be triaged by the new algorithm and compare the algorithm to what I would do.  \n\n\u003e if possible make sure that the total number of different pixels is less than 10% the size of the image?  \n\nSeems reasonable, I think we can add this condition. Again, would be nice to check with the history of images.",
      "parentUuid": "d75e0618_dff98c6f",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5745c2d_e7d3510d",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-03T18:27:56Z",
      "side": 1,
      "message": "\u003e How would you define correctness\n\nMaybe we have different goals here. I don\u0027t care how we compare an image from two different devices, yes they could be very different (though still not as big as 10 values, the spec still has _some_ guarantees!).\n\nWhat I want to avoid is a new image on the same device regressing after a CL without it being flagged. Normally you wouldn\u0027t expect a CL to really change the output (hence a diff of 1 value, which is a typical precision thing).\n\nMake sure to get @cnorthrop@google.com\u0027s output here too.",
      "parentUuid": "a49f8c68_35ccea63",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "328e7464_8d614186",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2023-02-03T18:34:05Z",
      "side": 1,
      "message": "I think we have similar goals. Mine is to save time for humans triaging Goldens, while producing a similar results to what a human would. That\u0027s the rationale behind \"replicate how a human sees differences\". While I agree, that if it\u0027s possible for the algorithm to produce better results than a human would, we should try to.\nHopefully, having less Goldens to triage would also lead to humans paying more attention to the ones they do need to triage, helping to catch more regressions.",
      "parentUuid": "e5745c2d_e7d3510d",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4371b878_0eb620e9",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-03T18:56:53Z",
      "side": 1,
      "message": "\u003e that if it\u0027s possible for the algorithm to produce better results than a human would, we should try to.\n\nBut human perception doesn\u0027t matter. If you ask a GPU to draw (0.5, 0.5, 0.5, 1.0), it **must** either produce 127 or 128 in the R, G and B channels. It cannot produce 125 or 130, even if the difference is not perceptible by a human.\n\nThat\u0027s why the tests typically have a tolerance of 1 bit difference, but nothing more. I agree with tolerating 1 bit of difference, but I disagree with tolerating anything more than that (because that means there\u0027s _very_ likely a bug in the CL).",
      "parentUuid": "328e7464_8d614186",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e2179b_35327bc1",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-03T18:59:33Z",
      "side": 1,
      "message": "To clarify, when we triage GOLD failures, we don\u0027t accept diffs just by a visual check. There are typically two kinds of changes:\n\n- Difference in precision affecting the fragment shader usually leads to a diff of 1 bit. This we can verify by looking at diff values (and would be nice to automate)\n- Difference in precision affecting the vertex shader usually leads to triangles slightly moving, and pixels that have changed between covered and not covered by the triangle would have wildly different values. That\u0027s where we do visual checks, and this sort of fuzzy check doesn\u0027t actually help at all with that.",
      "parentUuid": "4371b878_0eb620e9",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e43042f4_23fe9a54",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2023-02-03T19:08:23Z",
      "side": 1,
      "message": "I couldn\u0027t quickly find an example with huge differences (\u003e100 in some RGB channel), though they do exist.\nBut let\u0027s look at this SwiftShader roll for example:\nhttps://angle-gold.skia.org/triagelog?changelist_id\u003d4121510\u0026crs\u003dgerrit\nWhat do you think about this positively triaged image?\nhttps://angle-gold.skia.org/detail?grouping\u003dname%3Daztec_ruins%26source_type%3Dangle\u0026digest\u003db7d19b55349f0fd4690764a17e742c03\u0026changelist_id\u003d4121510\u0026crs\u003dgerrit",
      "parentUuid": "10e2179b_35327bc1",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e23d2e_dd47d2bc",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-02-06T16:33:27Z",
      "side": 1,
      "message": "I\u0027d like to keep the level of day to day triage we have now (not allowing diffs without a human approving the change).  It has been very effective .  Other than adding a new device or updating a bot driver (both of which are rare), we don\u0027t have to re-triage very often.\n\nThe exception is SwiftShader, as you mentioned.  Rolling it in all the time is causing all kinds of thrash.  Likely SwS should be running the traces upstream to maintain quality.  It would be quite cool if we could share the same project, so when they add a new golden, it would automatically reflect in our goldens and the roll would be clean.\n\nIf you do move forward with this, can you isolate it to SwiftShader?  Or perhaps isolate it to rolls?\n\nI would also treat a pixel diff of 1 negligible.  Anything else requires scrutiny.",
      "parentUuid": "e43042f4_23fe9a54",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b986e3c_ce5d86d6",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2023-02-06T16:46:10Z",
      "side": 1,
      "message": "OK, I hear you, Cody and Shabi.\nBrian, sorry for drafting you for this effort without having discussed this with others first.\nCould we go with Shabi\u0027s suggestion of:\n\u003e making the diff be 1 (instead of 10), and if possible make sure that the total number of different pixels is less than 10% the size of the image\n\nI.e. fuzzy diff instead, then?\n\nHowever, I think that sample_area algorithm would still be useful for driver and SwiftShader upgrades. I wish it was possible to select a different algorithm for regular ANGLE CLs vs SwiftShader and Chromium (driver update) rolls. If not, maybe I can keep this CL as a reference to use in conjunction with the rolls to help with the triage.",
      "parentUuid": "72e23d2e_dd47d2bc",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c9ef93_cd5963fa",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2023-02-06T19:51:40Z",
      "side": 1,
      "message": "Apparently I never sent the draft I typed up \u003e\u003c I\u0027ll include it below for posterity, but sounds like it\u0027s not particularly relevant anymore.\n\n\u003e Could we go with Shabi\u0027s suggestion of\n\nAck.\n\n\u003e  I wish it was possible to select a different algorithm for regular ANGLE CLs vs SwiftShader and Chromium (driver update) rolls\n\nI suspect we can\u0027t determine this automatically from the swarming task, but I suspect there would be a way to pass that information in, e.g. setting a property on the bots we want to use the different algorithm on and passing in the value of that property to the test. Not something we\u0027d want to handle in this CL, but it\u0027s something we could pursue.\n\nOriginal draft:\n\n\u003e Brian, I remember there was a way to calibrate arguments to fuzzy matching. Is it something we can do here?\n\nYes, but with some caveats:\n\n1. I haven\u0027t used the tool in a very long time, so it might not work right now.\n2. It should in theory work with ANGLE, but will probably require some work.\n3. I\u0027ll have to add support for running against this algorithm. It currently assumes only the fuzzy and sobel algorithms exist. Shouldn\u0027t be hard to get this added, although it might warrant a refactor since the current implementation makes various assumptions.\n\nHowever, reading through this thread made me realize I should have confirmed something before moving forward with inexact matching: what scenarios do you expect these sorts of changes to occur under?\n\nI ask because Gold\u0027s inexact matching only considers images within the same group, which is a unique set of keys that are reported. For ANGLE, that would be these https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/tests/restricted_traces/restricted_trace_gold_tests.py;l\u003d168?q\u003drestricted_trace%20file:angle%20lang:python\n\n* vendor_id\n* device_id\n* model_name\n* manufacturer_name\n* os\n* os_version\n* driver_version\n* driver_vendor\n\nSo, if this is intended to reduce the amount of work necessary when say a driver gets upgraded, this won\u0027t currently help since the driver_version key will change, thus creating a different unique group. I believe there is a way to report a key as purely informational so that it won\u0027t be included when determining which group something belongs to, but I don\u0027t know if that\u0027s the right approach in this scenario.\n\nIf on the other hand this is meant to help deal with random noise that occurs on the same configuration, this should be fine, although it sounds like there\u0027s disagreement on whether that should be happening in the first place.",
      "parentUuid": "10e2179b_35327bc1",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a257794_f370ccb8",
        "filename": "src/tests/restricted_traces/restricted_trace_gold_tests.py",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-06T20:33:14Z",
      "side": 1,
      "message": "Random noise _rarely_ occurs. Intel/windows I think had a few flaky traces but we just disabled those. Still, could be good to automatically deal with those.\n\nWith SwiftShader changes, basically it\u0027s the commit hash that changes frequently. But that doesn\u0027t change the properties as far as I can tell. Driver version simply returns the Vulkan 1.3 packed version value (0x1400000)",
      "parentUuid": "01c9ef93_cd5963fa",
      "range": {
        "startLine": 232,
        "startChar": 25,
        "endLine": 232,
        "endChar": 40
      },
      "revId": "b66a561187e552ca400fb2be06643f03135bd493",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}