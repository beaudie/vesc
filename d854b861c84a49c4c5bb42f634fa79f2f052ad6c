{
  "comments": [
    {
      "key": {
        "uuid": "8bd1de8e_a1fe1f79",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-14T13:53:13Z",
      "side": 1,
      "message": "Is it possible to have this as a non-static member? IMO it would be nice to release everything when the display is destroyed.",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd1de8e_c421a192",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-04-14T16:29:43Z",
      "side": 1,
      "message": "In my implementation I have the handle as member of DisplayEGL and pass it to FunctionsEGL::initialize() - this is the only place where it is used in FunctionsEGL.\nAn alternative would be to pass library name to to FunctionsEGL::initialize(), as it differs on CrOS and Android.",
      "parentUuid": "8bd1de8e_a1fe1f79",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd1de8e_575441cf",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-04-14T17:15:47Z",
      "side": 1,
      "message": "The way I handled this in FunctionsGL was to have a private abstract function called loadProcAddress (https://chromium.googlesource.com/angle/angle/+/master/src/libANGLE/renderer/gl/FunctionsGL.h#758) and then specialize the FunctionsGL for each backend so that it can store pointers to modules and such (https://chromium.googlesource.com/angle/angle/+/master/src/libANGLE/renderer/gl/wgl/DisplayWGL.cpp#29).",
      "parentUuid": "8bd1de8e_c421a192",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd1de8e_77afc5f0",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-04-14T17:20:08Z",
      "side": 1,
      "message": "This seems like a good way, also good for consistency to use the same style.",
      "parentUuid": "8bd1de8e_575441cf",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd1de8e_77dea557",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-04-14T17:30:50Z",
      "side": 1,
      "message": "But we don\u0027t actually need a different loadProcAddress() function for different EGLs - getProcAddress() should be good for all. We just need a different library handle, which Geoff passes in the constructor - thus we don\u0027t need any overloading.\nTheoretically, we also don\u0027t need to call dlsym() from anywhere other than initialize(), so there is even no reason to store the library handle it in a class member. Frank is just being extra cautious and falls back to dlsym() in cases where mGetProcAddressPtr() is supposed to succeed according to the spec.",
      "parentUuid": "8bd1de8e_77afc5f0",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd1de8e_5a162891",
        "filename": "src/libANGLE/renderer/gl/egl/FunctionsEGL.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-04-14T17:34:04Z",
      "side": 1,
      "message": "Sorry, I replied without thinking this through. We would need a different loadProcAddress() function if we would want to support EGL on Windows, for example. We just don\u0027t need it if all the platforms where we support EGL would be posix.",
      "parentUuid": "8bd1de8e_77dea557",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "d854b861c84a49c4c5bb42f634fa79f2f052ad6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}