{
  "comments": [
    {
      "key": {
        "uuid": "7b64c70b_9a78051b",
        "filename": "util/test_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2019-10-21T17:07:42Z",
      "side": 1,
      "message": "ANGLE_UTIL_EXPORT here expands to an export symbol if LIBANGLE_UTIL_IMPLEMENTATION is defined. However, test_utils.cc is in util_sources which is used in angle_util in https://cs.chromium.org/chromium/src/third_party/angle/BUILD.gn?q\u003dutil_sources\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d1046 which only defines this if is_shared_library is true (...why is that target built twice in the same build, once shared, once not? nothing else does this afaik).\n\nIn https://cs.chromium.org/chromium/src/third_party/angle/src/tests/BUILD.gn?type\u003dcs\u0026q\u003dangle_util_static\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d189 a few test targets directly depend on the angle_util_static library while others depend on :angle_util.\n\nSo from a distance, my guess what\u0027s happening is that the test binary statically links to the Process class, gets the non-exported vtable for process, and then the code it hands that object to uses the (correctly) exported vtable from the other version of the library, which confuses CFI.\n\nSo the root cause here I think is that bifurcating angle_util in a single build causes all kinds of ODR violations.\n\nI\u0027d only have a single angle_util target that\u0027s a component() and then make everything depend on that. That\u0027ll probably make your build simpler and make it impossible for issues like this to happen.",
      "revId": "7923e234bc458eda5936b8cb4f09fa19e28c0452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e31e29f_abbf53b9",
        "filename": "util/test_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-25T15:40:20Z",
      "side": 1,
      "message": "I originally also thought we were importing both the static and shared flavors in one target. Seems to be not the case:\n\n$ gn desc out/Debug/ //src/tests:angle_unittests --tree | grep angle_util\n  //:angle_util_config\n  //:angle_util_loader_config\n    //:angle_util\n      //:angle_util_loader\n        //:angle_util_loader_headers\n      //:angle_util_loader_headers...\n\njmadill@jmadill4-w MINGW64 /c/src/angle (master)\n$ gn desc out/Debug/ //src/tests:angle_unittests --tree | grep static\n\nUnless I\u0027m doing something wrong with gn desc there no trace of the static flavors. I suspect something more subtle is going on with class exports and cfi. I wouldn\u0027t rule out a CFI bug. As I mentioned before the functions all export properly. The class seems to have an issue.\n\nThere\u0027s some pretty deep reasons we split into shared and static. It\u0027s possible we could rectify that somehow. I don\u0027t think the component design maps onto our use case. We had some problems with double-linking static data. ynovikov@ originally discovered that on Android. We also have a static/shared split to distinguish between black box and white box tests.",
      "parentUuid": "7b64c70b_9a78051b",
      "revId": "7923e234bc458eda5936b8cb4f09fa19e28c0452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}