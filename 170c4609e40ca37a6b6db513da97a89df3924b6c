{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "010e1d77_e4af050d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "Some drive by comment.",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea7e385f_dde71a11",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "I am wondering why the need of all these extra for loops in this function come from. These are another extra data copy here, will be good to eliminate if possible.",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fa4fc4a_f74416ef",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "This is just setting pointers in this VkWriteDescriptorSet.   What\u0027s being copied?",
      "parentUuid": "ea7e385f_dde71a11",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc9131f4_009db432",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T21:01:18Z",
      "side": 1,
      "message": "Right, sorry not copy but I mean patch up pointers in VkWriteDescriptorSet. The way it worked before is that we only need to patch pointers when we have to resize the info structure. I did this specifically try to avoid the patch in most of time, which after growDesciptorCapacity() a few times it should not grow any more. Once you get into that stable state, no more pointer patching. With this CL it seems you opt to always patch up pointers, effectively abandon the prior optimization. I am wondering if this is necessary because of something I am not aware of or is an oversight? My understanding is that the original mechanism should still work and flushDescriptorSetUpdates can still be as simple as vkUpdateDescriptorSets() call.",
      "parentUuid": "8fa4fc4a_f74416ef",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7942b7b_d0b3a9ad",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T21:42:48Z",
      "side": 1,
      "message": "\u003e With this CL it seems you opt to always patch up pointers, effectively abandon the prior optimization.\n\nThere is no \"patching\" of pointers required, since the pointers are never set in the first place.   Instead, they are only set once during flushDescriptorSetUpdates() when they addresses are known and stable.\n\nThe patching that exists today looked like more of a workaround to handle the vector reallocation than an optimization, but maybe I misinterpreted it.\n\n\u003e I am wondering if this is necessary because of something I am not aware of or is an oversight?\n\nThe initial implementation was missing caching the VkBufferView handles.   This works today, because flushDescriptorSetUpdates() is always called after updateImagesDescriptorSet()/updateTexturesDescriptorSet(), so the BufferViews are still valid.   However, delaying the call to flushRenderPassCommands() means that the BufferViews may have been deleted, so the memory containing the handle has been discarded.   See the bug for the full details:\nhttps://bugs.chromium.org/p/angleproject/issues/detail?id\u003d5706#c7\n\nThe fix is to create memory that the ContextVk owns which will exist longer than the BufferView, so the VkWriteDescriptorSet can point to a valid value.   Since this needs to be done for BufferViews, I refactored the code to treat all of the fields the same to try and prevent bugs in the future.\n\nHowever, an alternative (as you pointed out) is to call flushRenderPassCommands() in BufferViewHelper::release() before the BufferView is garbage collected.\n\nI\u0027m not sure which is better.",
      "parentUuid": "fc9131f4_009db432",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283adecf_a49bcf52",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-16T16:28:46Z",
      "side": 1,
      "message": "-1 to flushRP when releasing a resource.",
      "parentUuid": "e7942b7b_d0b3a9ad",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed575679_4cb6a35b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-16T18:42:54Z",
      "side": 1,
      "message": "To clarify, I mean call flushDescriptorSetUpdates from release, not flushRP. The DS update are immediate calls, not vkCmd, so no need to flushRP.\n\nAlso one idea to not adding indices tracking in contextVk, if you don\u0027t like the code in growDesciptorCapacity(): you stash the bufferIno away and then do that in flushDescriptorSetUpdate time only if you have bufferIno stashed away. Again, the idea is that you don\u0027t run all these for loops if there is no reallocation of bufferIno. Setup pBufferInfo/pImageInfo/pTexelBufferView at the ProgramExecutableVk::updateTexturesDescriptor() call along with other data members has advantage is that you are updating whole VkWriteDescriptorSet structure all at once, better from cache\u0027s POV.",
      "parentUuid": "283adecf_a49bcf52",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "058f9cbe_10e325d7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-15T15:41:46Z",
      "side": 1,
      "message": "I\u0027ve updated the CL to match Charlie\u0027s description of calling flushDescriptorSetUpdates() in BufferViewHelper::release().\n\nI also ran the change against all of the traces with \u0027--minimize-gpu-work\u0027 on ARM and got the following scores (higher is better):\nOverall Difference \u003d 1.022582\nOverall Difference \u003d 0.993110\nOverall Difference \u003d 1.008222\n\nSo, it doesn\u0027t seem like this change makes much of a difference either way.\n\nLet me know what you guys think.",
      "parentUuid": "ed575679_4cb6a35b",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3b70c78_83d747ec",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-07-15T17:41:03Z",
      "side": 1,
      "message": "I remember you mention Asphalt 9 is especially using many DS, is it show any bigger differences?",
      "parentUuid": "058f9cbe_10e325d7",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c570e37_79057eb7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 368,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "eg this could be a \u0027flushUpdates\u0027 helper method in the class.",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 368,
        "endChar": 5
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c408f918_137586e2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 368,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c570e37_79057eb7",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 368,
        "endChar": 5
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd5e9bc_5ba393d7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 610,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "this could be an \u0027init\u0027 member of the class.",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 610,
        "endChar": 64
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1be99861_4ea2fe44",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 610,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fd5e9bc_5ba393d7",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 610,
        "endChar": 64
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab66d803_cbf9a295",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4815,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "super nit: Since it says \"Infos\", \"Infos[0].\" reads better than \"Infos-\u003e\" IMO.",
      "range": {
        "startLine": 4815,
        "startChar": 14,
        "endLine": 4815,
        "endChar": 17
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9ac4b3a_b6176f56",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4815,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab66d803_cbf9a295",
      "range": {
        "startLine": 4815,
        "startChar": 14,
        "endLine": 4815,
        "endChar": 17
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72d6b3a1_e4ea9d34",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 5760,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "Nice!\n\nPlease use a helper like there previously was (with template parameters for the fields that are different) to avoid triplication of this logic.",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37effac2_e6443a15",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 5760,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "this could be a getInfosAndWriteInfo member of the helper class.",
      "parentUuid": "72d6b3a1_e4ea9d34",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44cb7b48_8eae406d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 5760,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37effac2_e6443a15",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfac778_966a135b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1115,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "Could use a small struct, which avoids duplicating that comment above and has better field names than first and second.",
      "range": {
        "startLine": 1115,
        "startChar": 16,
        "endLine": 1115,
        "endChar": 41
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce025712_7f66f75d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1115,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "+1\n\nAlternately you could also make a class that handles both infos and indices as it have some repetition that you could abstract.",
      "parentUuid": "9dfac778_966a135b",
      "range": {
        "startLine": 1115,
        "startChar": 16,
        "endLine": 1115,
        "endChar": 41
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bbf2ebc_88a4cb70",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1115,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce025712_7f66f75d",
      "range": {
        "startLine": 1115,
        "startChar": 16,
        "endLine": 1115,
        "endChar": 41
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda57f82_c55a0406",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1125,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "Instead of tracking this here, can you just issue flushDescriptorSetUpdates() when the bufferView is released and it is still has commands not flushed? I think this is cheaper than have to do another tracking here since delete buffer usually is less often than reference it. mUse should have the information to detect pending unflushed commands.",
      "range": {
        "startLine": 1125,
        "startChar": 43,
        "endLine": 1125,
        "endChar": 61
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3716c2b8_d89dcdd4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1125,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T19:33:41Z",
      "side": 1,
      "message": "\u003e Instead of tracking this here, can you just issue flushDescriptorSetUpdates() when the bufferView is released and it is still has commands not flushed?\n\nI don\u0027t know enough to say how this would work.   I\u0027d have to look around at it a bit more.\n\nThe assumption has been that it needs to be done during flushRenderPassCommands()/flushOutsideRPCommands(), since the descriptor sets need to be updated before they are used by the command buffer.   Doing it before the flush*Commands() calls (as part of release()) should also work, but I\u0027m not sure why that\u0027s better/cleaner since we still have to do all of the tracking anyway and we\u0027d still need to call it during flush*Commands() anyway.\n\n\n\u003e I think this is cheaper than have to do another tracking here since delete buffer usually is less often than reference it.\n\nFor VkBufferView specifically, we fill out the VkWriteDescriptorSet in the following paths:\n\n    ProgramExecutableVk::updateImagesDescriptorSet\n        ProgramExecutableVk::updateShaderResourcesDescriptorSet\n            ContextVk::handleDirtyShaderResourcesImpl\n                ContextVk::handleDirtyComputeShaderResources\n                ContextVk::handleDirtyGraphicsShaderResources\n    ProgramExecutableVk::updateTexturesDescriptorSet\n        ContextVk::handleDirtyTexturesImpl\n            ContextVk::handleDirtyComputeTextures\n            ContextVk::handleDirtyGraphicsTextures\n\nWe need to hang onto the filled out VkWriteDescriptorSet so we can flushDescriptorSetUpdates() at any time later (either during release() or flush*Commands()).   That VkWriteDescriptorSet may be part of an array of other VkWriteDescriptorSets, which flushDescriptorSetUpdates() updates all at once, so we need to know which struct to update with the correct value.\n\nHow does calling flushDescriptorSetUpdates() during BufferViewHelper::release() prevent needing to do this tracking?",
      "parentUuid": "eda57f82_c55a0406",
      "range": {
        "startLine": 1125,
        "startChar": 43,
        "endLine": 1125,
        "endChar": 61
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87743e4c_3b9e4bcc",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1125,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T21:01:18Z",
      "side": 1,
      "message": "`How does calling flushDescriptorSetUpdates() during BufferViewHelper::release() prevent needing to do this tracking?`\nYou are tracking mBufferViewIndices because you are using it at flushDescriptorSetUpdates() call after view been deleted. But if you detect the view is been used by current command buffer, and you call flushDescriptorSetUpdates before deleting view, then the bug is fixed as well. It is better because it avoids tracking mBufferViewIndices.",
      "parentUuid": "3716c2b8_d89dcdd4",
      "range": {
        "startLine": 1125,
        "startChar": 43,
        "endLine": 1125,
        "endChar": 61
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}