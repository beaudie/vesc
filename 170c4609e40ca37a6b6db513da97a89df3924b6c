{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "010e1d77_e4af050d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "Some drive by comment.",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea7e385f_dde71a11",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 361,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "I am wondering why the need of all these extra for loops in this function come from. These are another extra data copy here, will be good to eliminate if possible.",
      "range": {
        "startLine": 361,
        "startChar": 4,
        "endLine": 361,
        "endChar": 65
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c570e37_79057eb7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 368,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "eg this could be a \u0027flushUpdates\u0027 helper method in the class.",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 368,
        "endChar": 5
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd5e9bc_5ba393d7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 610,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "this could be an \u0027init\u0027 member of the class.",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 610,
        "endChar": 64
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab66d803_cbf9a295",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4815,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "super nit: Since it says \"Infos\", \"Infos[0].\" reads better than \"Infos-\u003e\" IMO.",
      "range": {
        "startLine": 4815,
        "startChar": 14,
        "endLine": 4815,
        "endChar": 17
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72d6b3a1_e4ea9d34",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 5760,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "Nice!\n\nPlease use a helper like there previously was (with template parameters for the fields that are different) to avoid triplication of this logic.",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37effac2_e6443a15",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 5760,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "this could be a getInfosAndWriteInfo member of the helper class.",
      "parentUuid": "72d6b3a1_e4ea9d34",
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dfac778_966a135b",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1115,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T01:16:23Z",
      "side": 1,
      "message": "Could use a small struct, which avoids duplicating that comment above and has better field names than first and second.",
      "range": {
        "startLine": 1115,
        "startChar": 16,
        "endLine": 1115,
        "endChar": 41
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce025712_7f66f75d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1115,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T14:53:36Z",
      "side": 1,
      "message": "+1\n\nAlternately you could also make a class that handles both infos and indices as it have some repetition that you could abstract.",
      "parentUuid": "9dfac778_966a135b",
      "range": {
        "startLine": 1115,
        "startChar": 16,
        "endLine": 1115,
        "endChar": 41
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda57f82_c55a0406",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 11
      },
      "lineNbr": 1125,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-14T18:30:53Z",
      "side": 1,
      "message": "Instead of tracking this here, can you just issue flushDescriptorSetUpdates() when the bufferView is released and it is still has commands not flushed? I think this is cheaper than have to do another tracking here since delete buffer usually is less often than reference it. mUse should have the information to detect pending unflushed commands.",
      "range": {
        "startLine": 1125,
        "startChar": 43,
        "endLine": 1125,
        "endChar": 61
      },
      "revId": "170c4609e40ca37a6b6db513da97a89df3924b6c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}