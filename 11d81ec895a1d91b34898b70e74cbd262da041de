{
  "comments": [
    {
      "key": {
        "uuid": "c18f8d52_5558001e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-23T22:10:35Z",
      "side": 1,
      "message": "PTAL\n\nI took another pass that removed all of the dirty bit handling, since it doesn\u0027t appear necessary anymore.   This version feels a bit cleaner, aside from the special handling in Context::prepareForDispatch().   Maybe moving that into a helper in ProgramPipeline would be enough, but let me know.\n\nI\u0027m also not sure of a good way to handle linking either in the validation layer or not based on whether the validation layer exists, so let me know where you think we could fit that in.   Not using dirty bits means checking the PPO\u0027s link status on every draw call (not good), but keeping/reintroducing the dirty bits means having a separate linking code path which may not get exercised very often, since it sounds like this isn\u0027t something in CQ (also not good).   Is supporting this something that\u0027s necessary for this fix, or can we open a bug to tackle that later?",
      "revId": "11d81ec895a1d91b34898b70e74cbd262da041de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e84f46ab_e21c355f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-24T04:31:01Z",
      "side": 1,
      "message": "Actually it looks like the no error extension is already done. See https://bugs.chromium.org/p/angleproject/issues/detail?id\u003d1280#c22\n\nCould you add a test in ContextNoErrorTest.cpp that creates a legitimate PPO and draws with it? Without the validation layer, the link won\u0027t happen and the test should fail. It\u0027s fine by me if you would just file a bug for it and promptly suppress it.",
      "parentUuid": "c18f8d52_5558001e",
      "revId": "11d81ec895a1d91b34898b70e74cbd262da041de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}