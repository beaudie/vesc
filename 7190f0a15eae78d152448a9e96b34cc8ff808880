{
  "comments": [
    {
      "key": {
        "uuid": "b10fb846_9008adcc",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 296,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-12-03T21:25:57Z",
      "side": 1,
      "message": "If the \u0027info-\u003eprecision \u003d GL_NONE\u0027 was done for structures  in setFieldOrVariableProperties() also, could this just call setFieldOrVariableProperties() for everything, since it seems to do this same work?",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e8765a2_b9cc3cce",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 296,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-03T22:20:15Z",
      "side": 1,
      "message": "Interesting idea. There are a number of users that call setBuiltInInfoFromSymbol, I didn\u0027t want them all to be doing extra work that wasn\u0027t necessary and/or potentially confuse other code not expecting those values to be set.",
      "parentUuid": "b10fb846_9008adcc",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ba7b686_2e4ec458",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 296,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-12-04T16:46:15Z",
      "side": 1,
      "message": "I think setFieldOrVariableProperties is the right call, it does exactly what this function does with only added cost for structures which weren\u0027t getting into this function before anyways.\n\nThe call to setFieldOrVariableProperties in recordBuiltInVaryingUsed below can disappear then.",
      "parentUuid": "7e8765a2_b9cc3cce",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4276ed1b_a929003c",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 296,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-04T17:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ba7b686_2e4ec458",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c83c89a_f20bd23f",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 325,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-12-03T21:25:57Z",
      "side": 1,
      "message": "This also sets things like \u0027staticUse\u0027.   Should we just call this for every variable to avoid the duplicate \"is this a structure\" checking?",
      "range": {
        "startLine": 325,
        "startChar": 12,
        "endLine": 325,
        "endChar": 40
      },
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cae08ec_bf2f5b0d",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 7
      },
      "lineNbr": 325,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-03T22:20:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6c83c89a_f20bd23f",
      "range": {
        "startLine": 325,
        "startChar": 12,
        "endLine": 325,
        "endChar": 40
      },
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "effb1b0c_84948baa",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 495,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-12-03T21:25:57Z",
      "side": 1,
      "message": "Calling a member function and passing in the same variable is what I\u0027m referring to below when I say it looks a little odd, since the non-static function already has access to the variable that it\u0027s being called from.",
      "range": {
        "startLine": 495,
        "startChar": 53,
        "endLine": 495,
        "endChar": 77
      },
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "895fcf41_46de107f",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 495,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-03T22:20:15Z",
      "side": 1,
      "message": "Ha, yeah, shouldn\u0027t need to do that. Guess I was being a little too mechanical in implementing Geoff\u0027s suggestion.",
      "parentUuid": "effb1b0c_84948baa",
      "range": {
        "startLine": 495,
        "startChar": 53,
        "endLine": 495,
        "endChar": 77
      },
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e78bf00_6f1d3749",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-12-03T21:25:57Z",
      "side": 1,
      "message": "This function prototype and how the function is called looks a little odd.   The way it\u0027s used, it should be declared \u0027static\u0027.   However, the way it\u0027s implemented, the \u0027var\u0027 parameter should be removed.\n\nI suggest taking the approach of removing the \u0027var\u0027 parameter.",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9e75d3_96bf9de3",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 7
      },
      "lineNbr": 184,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-03T22:20:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e78bf00_6f1d3749",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61a96c5e_0b008a22",
        "filename": "src/libANGLE/Shader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 470,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-12-03T21:25:57Z",
      "side": 1,
      "message": "Looking at the other WARN() calls above, they add a newline (\u003c\u003c std::endl) before the error message.   Should you do that here too?",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71fc447_1509dd59",
        "filename": "src/libANGLE/Shader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 470,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-12-03T22:20:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61a96c5e_0b008a22",
      "revId": "7190f0a15eae78d152448a9e96b34cc8ff808880",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}