{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bfb72eaa_5b78fa07",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-07T01:25:21Z",
      "side": 1,
      "message": "If this is not mandated by the spec, then it\u0027s not a requirement ANGLE should be enforcing. If the test is per spec and fails with this change, changing the test is not the right thing to do!",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01023dde_36fd792a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2021-10-07T20:02:25Z",
      "side": 1,
      "message": "@Shahbaz, glObjectLabelKHR is part of a Khronos extension. ANGLE\u0027s implementation copies the string out of the label parameter before the function returns control to the caller. The regressing change screwed up how the copy was managed internally by ANGLE, and this CL fixes that.\n\nThe sentence in the description which you highlighted refers to the test code which changed so the code for the bug could be revealed. I think this could be better explained in the description.",
      "parentUuid": "bfb72eaa_5b78fa07",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d16a13a9_33ed0e3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-07T01:25:21Z",
      "side": 1,
      "message": "Drive by comment",
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99a6f0aa_3d9ab889",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2666,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2021-10-06T23:35:27Z",
      "side": 1,
      "message": "Am I wrong for also seeing this as a dangerous reference?\n\n\"const std::string \u0026label \u003d\" means you end up creating a temporary std::string from the const char*, then bind to that temporary. By the time of line 2666, `label` should be invalidated.\n\nThis might not be triggering ASAN because it\u0027s in the same stack frame and there\u0027s no other stack usage, but this seems unsafe, and perhaps worthy of a code audit? This particurlaly comes in to play later (line 2677)\n\nI could be reading things totally wrong though, but I\u0027ve just learned to be wary of references-from-const-char*",
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc7e3e16_4fd0493b",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2666,
      "author": {
        "id": 1512662
      },
      "writtenOn": "2021-10-07T00:44:58Z",
      "side": 1,
      "message": "Thanks Ryan. Please correct me if my understanding is wrong here, but when you say label will be invalidated, does that mean the value would be null? If so, I debugged and stepped through the code and the label value persisted throughout the scope of the test.\n\nTo write this test, I referred a previously written test where the label value was used as ref:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/tests/gl_tests/DebugTest.cpp;l\u003d502?q\u003dDebugTest.cpp\u0026ss\u003dchromium\n\nBut because having ref triggered this ASAN bug, this could easily changed to const string instead.",
      "parentUuid": "99a6f0aa_3d9ab889",
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a728e0d9_b5beb866",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2666,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2021-10-07T02:12:07Z",
      "side": 1,
      "message": "So, the issue is explained a bit more in https://abseil.io/tips/101 and https://abseil.io/tips/107 in terms of lifetime extension.\n\nYou could just write\n\n  std::string label \u003d \"TestKHR.DebugLabel\"\n  \nWhich has the same number of allocations, but is unambiguously safe ðŸ˜Š\n\nThe issue here is the non-polymorphic type conversions mentioned in 107 making this quite subtle. This specific case ends up being safe, but only through careful reasoning - because you happen to be using a constant string (the \"TestKHR.DebugLabel\"), the compiler is giving you guaranteed lifetime, and because tip 101 #8, your temporary std::string() is getting lifetime extended. This is, however, all very subtle, are requires care reasoning through it, which is why it raises eyebrows.",
      "parentUuid": "fc7e3e16_4fd0493b",
      "revId": "88e689ecfdbda7c2b1214e6368d12d8051d68db4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}