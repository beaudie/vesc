{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2aeea9c4_832552be",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6920,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-08T17:54:32Z",
      "side": 1,
      "message": "nit: You can add a case for `VK_ERROR_DEVICE_LOST` in `DefaultGLErrorCode` instead",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46f57950_f07ba159",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6920,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T21:24:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2aeea9c4_832552be",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddad9e7e_da88f5f9",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 6920,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T22:39:55Z",
      "side": 1,
      "message": "\u003e Done",
      "parentUuid": "46f57950_f07ba159",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0af802e1_14e9de04",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 7246,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-08T17:54:32Z",
      "side": 1,
      "message": "Does this check matter? Why not always check device lost? If device lost can be taken into account unconditionally, you don\u0027t have to pass this bool around a lot, it can be taken from the Renderer in CommandProcessor.cpp directly.\n\n`RenderPassClosureReason` is really a debug/perf analysis thing, I\u0027d rather we don\u0027t let logic depend on it.",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ee5a693_ea97d173",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 7246,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T21:24:28Z",
      "side": 1,
      "message": "I am not sure if we want to skip the fence check for all scenarios, I can put up a version that bypasses the fence check if there is a device lost, regardless of which code path calls the `finishResourceUse()`, and see if any CQ tests fail.",
      "parentUuid": "0af802e1_14e9de04",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d98c0523_5c099256",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 7246,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T22:39:55Z",
      "side": 1,
      "message": "CQ passed, I have removed the condition check on `RenderPassClosureReason::ContextDestruction`, and only do the deviceLost check in `checkOneCommandBatch()`.",
      "parentUuid": "4ee5a693_ea97d173",
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5b5f3de_385c0840",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 14
      },
      "lineNbr": 506,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-08T17:54:32Z",
      "side": 1,
      "message": "nits: per our style, don\u0027t use default values. Also, `bool` as parameter is generally bad for readability, don\u0027t hesitate to add an `enum class` specifically for this.",
      "range": {
        "startLine": 506,
        "startChar": 36,
        "endLine": 506,
        "endChar": 68
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f77b88a9_e56d291b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 14
      },
      "lineNbr": 506,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T22:39:55Z",
      "side": 1,
      "message": "I removed the parameter `isDeviceLost` from the function signature, per suggestion in https://chromium-review.googlesource.com/c/angle/angle/+/4728466/comment/0af802e1_14e9de04/.",
      "parentUuid": "c5b5f3de_385c0840",
      "range": {
        "startLine": 506,
        "startChar": 36,
        "endLine": 506,
        "endChar": 68
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cefb1c98_6db9f1d8",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3333,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-08T17:54:32Z",
      "side": 1,
      "message": "nit: please remove this, it looks like a personal task item",
      "range": {
        "startLine": 3332,
        "startChar": 0,
        "endLine": 3333,
        "endChar": 71
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02e6278e_3d45ef5d",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3333,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T21:24:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cefb1c98_6db9f1d8",
      "range": {
        "startLine": 3332,
        "startChar": 0,
        "endLine": 3333,
        "endChar": 71
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a611c6a6_c57eaf1d",
        "filename": "src/tests/egl_tests/EGLRobustnessTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-08T17:54:32Z",
      "side": 1,
      "message": "nit: please use a new `enum class` for this.",
      "range": {
        "startLine": 249,
        "startChar": 46,
        "endLine": 249,
        "endChar": 50
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4eff69d8_b904385e",
        "filename": "src/tests/egl_tests/EGLRobustnessTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2023-08-08T21:24:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a611c6a6_c57eaf1d",
      "range": {
        "startLine": 249,
        "startChar": 46,
        "endLine": 249,
        "endChar": 50
      },
      "revId": "ac9410b6d10a6b0881cd506f89d58ca47c7dcb77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}