{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18bc46c7_1ebad6d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "There seems to be some red failures in the bots with this CL. A number of comments below, which you can address while you fix the failures. The major concerns are de-duplicating stored information, and result handling.",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34e53256_43e84b1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "Some quick reply bellow. Will go through all other comments once I fix the failure.",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3dcc80c_fc1a482c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 276,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "I believe this is redundant. release() should release the handle and set nullptr.",
      "range": {
        "startLine": 276,
        "startChar": 8,
        "endLine": 276,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d05da7f6_11b22f34",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 276,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3dcc80c_fc1a482c",
      "range": {
        "startLine": 276,
        "startChar": 8,
        "endLine": 276,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95b99332_267bbed6",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 315,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: I believe this can be const",
      "range": {
        "startLine": 315,
        "startChar": 30,
        "endLine": 315,
        "endChar": 42
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b00dbd30_a71869e3",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 315,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95b99332_267bbed6",
      "range": {
        "startLine": 315,
        "startChar": 30,
        "endLine": 315,
        "endChar": 42
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ee3bb1_ab6ce492",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 320,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: inclusivity (main, etc)",
      "range": {
        "startLine": 320,
        "startChar": 68,
        "endLine": 320,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab229be7_98717327",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 320,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09ee3bb1_ab6ce492",
      "range": {
        "startLine": 320,
        "startChar": 68,
        "endLine": 320,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ffc8237_7530edd0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 328,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this seems like it could be simplified and that we shouldn\u0027t need an \"if\" here. What could we use instead of the descriptor type to determine if we need the suballocated serial or a main serial? How can the buffer have both at once? It gets hard to reason about a buffer if it has more than one serial at the same time.",
      "range": {
        "startLine": 318,
        "startChar": 11,
        "endLine": 328,
        "endChar": 13
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43a5d4f_a4dbb406",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 339,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "it\u0027s also somewhat confusing that a BufferVk and BufferHelper have separate offsets at the same time. This could be improved by naming them more distinctly.",
      "range": {
        "startLine": 339,
        "startChar": 43,
        "endLine": 339,
        "endChar": 69
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52422a70_93ef97a1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 339,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "The BufferVk\u0027s offset will be removed in next CL. So this confusion is temporary.",
      "parentUuid": "c43a5d4f_a4dbb406",
      "range": {
        "startLine": 339,
        "startChar": 43,
        "endLine": 339,
        "endChar": 69
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "608377a7_deb15840",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 339,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "52422a70_93ef97a1",
      "range": {
        "startLine": 339,
        "startChar": 43,
        "endLine": 339,
        "endChar": 69
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d378e22e_267c0817",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2614,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "seems unrelated to the buffer changes?",
      "range": {
        "startLine": 2614,
        "startChar": 4,
        "endLine": 2614,
        "endChar": 49
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf5a28a0_6c28c956",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2614,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "The reason this is needed is that I have assertion in the teardown code to ensure that all sub-ranges are freed before virtual block gets freed. There are cases that somehow the sub-ranges are not gets garbage collected and this will ensure it gets all cleared.",
      "parentUuid": "d378e22e_267c0817",
      "range": {
        "startLine": 2614,
        "startChar": 4,
        "endLine": 2614,
        "endChar": 49
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a59842f_5e00a7a7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2614,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "OK - maybe add a comment.",
      "parentUuid": "bf5a28a0_6c28c956",
      "range": {
        "startLine": 2614,
        "startChar": 4,
        "endLine": 2614,
        "endChar": 49
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2788a069_4b76ae7f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2614,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-01T21:44:48Z",
      "side": 1,
      "message": "Done. Comment added.",
      "parentUuid": "2a59842f_5e00a7a7",
      "range": {
        "startLine": 2614,
        "startChar": 4,
        "endLine": 2614,
        "endChar": 49
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a67deb_ee94ab33",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "what is a default buffer? or a default pool? you could explain the comment.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80e30419_88140946",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Comment added. We could explore move it to rendererVk in future to see which way is better.",
      "parentUuid": "60a67deb_ee94ab33",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47384bdf_10eeca61",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2583,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "Looks like you need to lock around this allocator. I recommend implementing atomic APIs inside the Renderer class instead of exposing access to this class.",
      "range": {
        "startLine": 2583,
        "startChar": 4,
        "endLine": 2583,
        "endChar": 88
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b594217_05561863",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2583,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "I am not aware of need of lock here. Maybe I miss something here?",
      "parentUuid": "47384bdf_10eeca61",
      "range": {
        "startLine": 2583,
        "startChar": 4,
        "endLine": 2583,
        "endChar": 88
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e7696ee_6a71674e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2583,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "Well, it\u0027s calling into renderer, which is accessed by multiple threads without any safety.",
      "parentUuid": "4b594217_05561863",
      "range": {
        "startLine": 2583,
        "startChar": 4,
        "endLine": 2583,
        "endChar": 88
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f96df36_db14268d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2583,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-01T21:44:48Z",
      "side": 1,
      "message": "This is just returning a BufferMemoryAllocator objecty which is initailzed when RendererVk is initialized. The createBuffer call bellow does not use any global state. VMA itself has a mutex lock ensures thread safety.",
      "parentUuid": "5e7696ee_6a71674e",
      "range": {
        "startLine": 2583,
        "startChar": 4,
        "endLine": 2583,
        "endChar": 88
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ddb826b_0df1a386",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "shabi, is this the right way to do a running graph? I thought you tallied these at the end of the frame / period?",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb5bada_0de7f856",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-25T15:31:52Z",
      "side": 1,
      "message": "This is correct (it will +\u003d1 the current value). What you\u0027d need is a call to dynamicBufferAllocations-\u003enext(); at the end of the frame.",
      "parentUuid": "9ddb826b_0df1a386",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f2654c1_6aee8592",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "Charlie/Shabi, I didn\u0027t see, but is the next() call implemented?",
      "parentUuid": "8cb5bada_0de7f856",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "355baabe_d1c7f058",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-01T21:44:48Z",
      "side": 1,
      "message": "Maybe I should remove this block of code for now. This was carried over from DynamicBuffer code.\n\nThere is a next call and I did not change any of that functionality. LMK if you prefer this block of code to be removed.",
      "parentUuid": "3f2654c1_6aee8592",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "432317ee_a27490fe",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-02T11:40:00Z",
      "side": 1,
      "message": "Feel free to remove.",
      "parentUuid": "355baabe_d1c7f058",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9692f6c_4cb1db55",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "432317ee_a27490fe",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea97be45_5b966750",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2644,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: for consistency, either rename ::allocateBuffer to just ::allocate or rename this ::allocateBufferWithAlignment",
      "range": {
        "startLine": 2644,
        "startChar": 26,
        "endLine": 2644,
        "endChar": 47
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80634293_beeaa510",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2644,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done. Renamed to allocateBuffer",
      "parentUuid": "ea97be45_5b966750",
      "range": {
        "startLine": 2644,
        "startChar": 26,
        "endLine": 2644,
        "endChar": 47
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f85464_92c4f362",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2656,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: a smaller size. It will get",
      "range": {
        "startLine": 2656,
        "startChar": 67,
        "endLine": 2656,
        "endChar": 76
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "185525a7_06199a7c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2656,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73f85464_92c4f362",
      "range": {
        "startLine": 2656,
        "startChar": 67,
        "endLine": 2656,
        "endChar": 76
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fcef54_6436ece9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "A failure should generate an error and pass it up to the GL level.",
      "range": {
        "startLine": 2662,
        "startChar": 89,
        "endLine": 2662,
        "endChar": 99
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97f2a394_6415309d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this is complex that you can pass zero and use a default alignment. What\u0027s the use case? It would be cleaner if you always passed an alignment or always used the member variable, rather than having a flexible fallback.",
      "range": {
        "startLine": 2662,
        "startChar": 42,
        "endLine": 2662,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7e5d386_dcc07b54",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Some of this was copied from dynamicbuffer class. I have removed mAlignment.",
      "parentUuid": "97f2a394_6415309d",
      "range": {
        "startLine": 2662,
        "startChar": 42,
        "endLine": 2662,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3d14e60_624b619f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "This goes back to the otehr comment in BufferVk::acquireBufferHelper() that why there is fallback allocation. Fail to allocate here may not a GL error. We may try other pool with different memoryType.",
      "parentUuid": "28fcef54_6436ece9",
      "range": {
        "startLine": 2662,
        "startChar": 89,
        "endLine": 2662,
        "endChar": 99
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "128ac205_c7ce44b2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "This one actually is different. This is not a failure. It just failed to allocate in this buffer block. It will loop all buffer blocks.",
      "parentUuid": "c3d14e60_624b619f",
      "range": {
        "startLine": 2662,
        "startChar": 89,
        "endLine": 2662,
        "endChar": 99
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48e9f09a_45e1a57a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2673,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 2673,
        "startChar": 85,
        "endLine": 2673,
        "endChar": 95
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8820349f_19dde7b0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2673,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48e9f09a_45e1a57a",
      "range": {
        "startLine": 2673,
        "startChar": 85,
        "endLine": 2673,
        "endChar": 95
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf724b8_8d9d4e9f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3833,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "rather than using a serial per-suballocation, what are the pros/cons of using a 32 bit serial/ 32-bit offset pair?",
      "range": {
        "startLine": 3832,
        "startChar": 0,
        "endLine": 3833,
        "endChar": 19
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10e373d_20adb836",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3833,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Lets discuss this offline tomorrow.",
      "parentUuid": "6cf724b8_8d9d4e9f",
      "range": {
        "startLine": 3832,
        "startChar": 0,
        "endLine": 3833,
        "endChar": 19
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1497237b_e7dc89b8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this is duplicated - what are the ways we could de-duplicate the buffer handle within the buffer helper class?",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa197f81_6b07db47",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3850,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "I was thinking to split this BufferHelper class into three subclasses to de-duplicate, but after try out myself I abandoned it due to hard to debug. My current thinking is to wait until all these main works are done and hopefully we will only have external buffers and sub-allocation types left, and then I can make external buffers us the same data structure of sub-allocation (except that the sub-range is the entire buffer). I will file a separate bug to track this as todo item.",
      "parentUuid": "1497237b_e7dc89b8",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bc72160_32c1ffed",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "Would prefer to avoid all TODOs as they usually just add notes to code that never get implemented. I\u0027m pretty sure we can de-duplicate this easily without adding any classes. When I was thinking about it before, I had a couple solution ideas. Ping me offline if you need - we should fix before landing.",
      "parentUuid": "fa197f81_6b07db47",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c57ee15_60d24077",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3876,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "We should be storing the offset in a single place so we don\u0027t need to check if the suballocation is valid. a non-suballocated buffer simply has an offset of zero.",
      "range": {
        "startLine": 3876,
        "startChar": 11,
        "endLine": 3876,
        "endChar": 31
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8727245_81117a85",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3876,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "This is the same as previous comment, that eventually I want to go back to just one BufferHelper class without this check.",
      "parentUuid": "1c57ee15_60d24077",
      "range": {
        "startLine": 3876,
        "startChar": 11,
        "endLine": 3876,
        "endChar": 31
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907de851_e6c8134f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1046,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "these seem to be replicated among several types. can you remove them as much as possible so they are less redundant? it should save a bit of memory.",
      "range": {
        "startLine": 1046,
        "startChar": 4,
        "endLine": 1046,
        "endChar": 25
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d72a9af2_8f265538",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1046,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "I cached here mainly for performance. Otherwise everytime you want to see if it is coherent or not, you will have to call \n        bufferMemoryAllocator.getMemoryTypeProperties(renderer, memoryTypeIndex,\n                                                      \u0026memoryPropertyFlags);\nThere should only  few pools in the process, the memory saving we are talking about is a dozen bytes.",
      "parentUuid": "907de851_e6c8134f",
      "range": {
        "startLine": 1046,
        "startChar": 4,
        "endLine": 1046,
        "endChar": 25
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ddf7aa6_21243cae",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1046,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "Well, it\u0027s a memory savings that is part of a design goal of the back-end, which is to only cache on measurable performance improvements, and otherwise de-duplicate. LMK if you need any more concrete guidance here.",
      "parentUuid": "d72a9af2_8f265538",
      "range": {
        "startLine": 1046,
        "startChar": 4,
        "endLine": 1046,
        "endChar": 25
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90949c87_42a65d0c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1046,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "Removed. Done",
      "parentUuid": "6ddf7aa6_21243cae",
      "range": {
        "startLine": 1046,
        "startChar": 4,
        "endLine": 1046,
        "endChar": 25
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de5d784_d0b46a46",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1049,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: the name makes it sounds like it counts the number of allocate calls. is this counting the number of \"alive\" buffers?",
      "range": {
        "startLine": 1049,
        "startChar": 13,
        "endLine": 1049,
        "endChar": 32
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93881d61_c99b0c22",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1049,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "It is counting the number of times BufferPool::allocateNewBuffer() gets called. I have renamed to mBufferAllocateCount.",
      "parentUuid": "3de5d784_d0b46a46",
      "range": {
        "startLine": 1049,
        "startChar": 13,
        "endLine": 1049,
        "endChar": 32
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "280453d0_10248b68",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1052,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "we use RAII types in the Vulkan back-end so you should be able to use these by value, as long as you have move operators and a default constructor.\n\nsame for the other vector or array types you\u0027re introducing.",
      "range": {
        "startLine": 1052,
        "startChar": 47,
        "endLine": 1052,
        "endChar": 57
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b412c879_c3e9ef0c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1052,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "If you do not mind, could I handle this in follow up CL? I did it this way mostly following the DynamicBuffer examples. I am totally fine to use RAII types, but prefer to do it in separate CL given that this CL is already complicated enough. I have added to https://issuetracker.google.com/208323792",
      "parentUuid": "280453d0_10248b68",
      "range": {
        "startLine": 1052,
        "startChar": 47,
        "endLine": 1052,
        "endChar": 57
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc17bebb_2721830e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1052,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "As long as you can do it immediately and not as a TODO/future task, that\u0027s good. Deferring minor cleanups usually means they get forgotten.",
      "parentUuid": "b412c879_c3e9ef0c",
      "range": {
        "startLine": 1052,
        "startChar": 47,
        "endLine": 1052,
        "endChar": 57
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a903ca2_20639bae",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1675,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "usually we return angle::Result and handle the error in the function. could you update the code to use that pattern, given the other comments about error handling?",
      "range": {
        "startLine": 1675,
        "startChar": 0,
        "endLine": 1675,
        "endChar": 8
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057cfbb6_341baeb7",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 15
      },
      "lineNbr": 943,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "same comment here",
      "range": {
        "startLine": 943,
        "startChar": 6,
        "endLine": 943,
        "endChar": 30
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55659656_192b01b4",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: sort",
      "range": {
        "startLine": 56,
        "startChar": 9,
        "endLine": 56,
        "endChar": 28
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cfb3e8b_a762cc5c",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55659656_192b01b4",
      "range": {
        "startLine": 56,
        "startChar": 9,
        "endLine": 56,
        "endChar": 28
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}