{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18bc46c7_1ebad6d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "There seems to be some red failures in the bots with this CL. A number of comments below, which you can address while you fix the failures. The major concerns are de-duplicating stored information, and result handling.",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34e53256_43e84b1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "Some quick reply bellow. Will go through all other comments once I fix the failure.",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3dcc80c_fc1a482c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 276,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "I believe this is redundant. release() should release the handle and set nullptr.",
      "range": {
        "startLine": 276,
        "startChar": 8,
        "endLine": 276,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95b99332_267bbed6",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 315,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: I believe this can be const",
      "range": {
        "startLine": 315,
        "startChar": 30,
        "endLine": 315,
        "endChar": 42
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ee3bb1_ab6ce492",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 320,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: inclusivity (main, etc)",
      "range": {
        "startLine": 320,
        "startChar": 68,
        "endLine": 320,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ffc8237_7530edd0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 328,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this seems like it could be simplified and that we shouldn\u0027t need an \"if\" here. What could we use instead of the descriptor type to determine if we need the suballocated serial or a main serial? How can the buffer have both at once? It gets hard to reason about a buffer if it has more than one serial at the same time.",
      "range": {
        "startLine": 318,
        "startChar": 11,
        "endLine": 328,
        "endChar": 13
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c43a5d4f_a4dbb406",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 339,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "it\u0027s also somewhat confusing that a BufferVk and BufferHelper have separate offsets at the same time. This could be improved by naming them more distinctly.",
      "range": {
        "startLine": 339,
        "startChar": 43,
        "endLine": 339,
        "endChar": 69
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52422a70_93ef97a1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 339,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "The BufferVk\u0027s offset will be removed in next CL. So this confusion is temporary.",
      "parentUuid": "c43a5d4f_a4dbb406",
      "range": {
        "startLine": 339,
        "startChar": 43,
        "endLine": 339,
        "endChar": 69
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d378e22e_267c0817",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2614,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "seems unrelated to the buffer changes?",
      "range": {
        "startLine": 2614,
        "startChar": 4,
        "endLine": 2614,
        "endChar": 49
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a67deb_ee94ab33",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "what is a default buffer? or a default pool? you could explain the comment.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47384bdf_10eeca61",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2583,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "Looks like you need to lock around this allocator. I recommend implementing atomic APIs inside the Renderer class instead of exposing access to this class.",
      "range": {
        "startLine": 2583,
        "startChar": 4,
        "endLine": 2583,
        "endChar": 88
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ddb826b_0df1a386",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "shabi, is this the right way to do a running graph? I thought you tallied these at the end of the frame / period?",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cb5bada_0de7f856",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2597,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-25T15:31:52Z",
      "side": 1,
      "message": "This is correct (it will +\u003d1 the current value). What you\u0027d need is a call to dynamicBufferAllocations-\u003enext(); at the end of the frame.",
      "parentUuid": "9ddb826b_0df1a386",
      "range": {
        "startLine": 2590,
        "startChar": 0,
        "endLine": 2597,
        "endChar": 5
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea97be45_5b966750",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2644,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: for consistency, either rename ::allocateBuffer to just ::allocate or rename this ::allocateBufferWithAlignment",
      "range": {
        "startLine": 2644,
        "startChar": 26,
        "endLine": 2644,
        "endChar": 47
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73f85464_92c4f362",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2656,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: a smaller size. It will get",
      "range": {
        "startLine": 2656,
        "startChar": 67,
        "endLine": 2656,
        "endChar": 76
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fcef54_6436ece9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "A failure should generate an error and pass it up to the GL level.",
      "range": {
        "startLine": 2662,
        "startChar": 89,
        "endLine": 2662,
        "endChar": 99
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97f2a394_6415309d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2662,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this is complex that you can pass zero and use a default alignment. What\u0027s the use case? It would be cleaner if you always passed an alignment or always used the member variable, rather than having a flexible fallback.",
      "range": {
        "startLine": 2662,
        "startChar": 42,
        "endLine": 2662,
        "endChar": 74
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48e9f09a_45e1a57a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2673,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 2673,
        "startChar": 85,
        "endLine": 2673,
        "endChar": 95
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf724b8_8d9d4e9f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3833,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "rather than using a serial per-suballocation, what are the pros/cons of using a 32 bit serial/ 32-bit offset pair?",
      "range": {
        "startLine": 3832,
        "startChar": 0,
        "endLine": 3833,
        "endChar": 19
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1497237b_e7dc89b8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "this is duplicated - what are the ways we could de-duplicate the buffer handle within the buffer helper class?",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa197f81_6b07db47",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3850,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "I was thinking to split this BufferHelper class into three subclasses to de-duplicate, but after try out myself I abandoned it due to hard to debug. My current thinking is to wait until all these main works are done and hopefully we will only have external buffers and sub-allocation types left, and then I can make external buffers us the same data structure of sub-allocation (except that the sub-range is the entire buffer). I will file a separate bug to track this as todo item.",
      "parentUuid": "1497237b_e7dc89b8",
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c57ee15_60d24077",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3876,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "We should be storing the offset in a single place so we don\u0027t need to check if the suballocation is valid. a non-suballocated buffer simply has an offset of zero.",
      "range": {
        "startLine": 3876,
        "startChar": 11,
        "endLine": 3876,
        "endChar": 31
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8727245_81117a85",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 3876,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "This is the same as previous comment, that eventually I want to go back to just one BufferHelper class without this check.",
      "parentUuid": "1c57ee15_60d24077",
      "range": {
        "startLine": 3876,
        "startChar": 11,
        "endLine": 3876,
        "endChar": 31
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907de851_e6c8134f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1046,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "these seem to be replicated among several types. can you remove them as much as possible so they are less redundant? it should save a bit of memory.",
      "range": {
        "startLine": 1046,
        "startChar": 4,
        "endLine": 1046,
        "endChar": 25
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de5d784_d0b46a46",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1049,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: the name makes it sounds like it counts the number of allocate calls. is this counting the number of \"alive\" buffers?",
      "range": {
        "startLine": 1049,
        "startChar": 13,
        "endLine": 1049,
        "endChar": 32
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "280453d0_10248b68",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1052,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "we use RAII types in the Vulkan back-end so you should be able to use these by value, as long as you have move operators and a default constructor.\n\nsame for the other vector or array types you\u0027re introducing.",
      "range": {
        "startLine": 1052,
        "startChar": 47,
        "endLine": 1052,
        "endChar": 57
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a903ca2_20639bae",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1675,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "usually we return angle::Result and handle the error in the function. could you update the code to use that pattern, given the other comments about error handling?",
      "range": {
        "startLine": 1675,
        "startChar": 0,
        "endLine": 1675,
        "endChar": 8
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057cfbb6_341baeb7",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 15
      },
      "lineNbr": 943,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "same comment here",
      "range": {
        "startLine": 943,
        "startChar": 6,
        "endLine": 943,
        "endChar": 30
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55659656_192b01b4",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 15
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "nit: sort",
      "range": {
        "startLine": 56,
        "startChar": 9,
        "endLine": 56,
        "endChar": 28
      },
      "revId": "86ee35e1def1d24cf060101e83a7cb2323bed9a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}