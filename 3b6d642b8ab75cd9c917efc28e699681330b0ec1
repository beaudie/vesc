{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1f7c857_d3f73e26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "I see MemoryShaderCache.cpp is the only user of `angle::GetANGLECommitHash()` that\u0027s left. I think it\u0027ll be worth following up and removing that function entirely, by making MemoryShaderCache also use the same id you are introducing here.\n\nFWIW, MemoryShaderCache also has a bug where it doesn\u0027t account for hash collision, so similar to how the id is serialized and verified on reload for programs, the shader cache should do the same.",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6218ecbf_a40cbc2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "FYI, the presubmit unit tests are not automatically run, you\u0027d need to verify that locally",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a48f06_27db2b41",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 438,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Does `src/libANGLE/renderer/.*/Program.*` work? That would match all backends and all extensions.\n\n(the metal one should be .mm, but that\u0027s unnecessary with the above catch-all)",
      "range": {
        "startLine": 438,
        "startChar": 31,
        "endLine": 438,
        "endChar": 72
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97584ca9_75383155",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 446,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Ok to be conservative IMO, but what did you notice from context being needed?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a924cb_6c90d4f9",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 446,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "In `Program::serialize()`, we are writing the `Context-\u003egetClientVersion().major` and `Context-\u003egetClientVersion().minor` into the binary blob data. We are also doing some condition check with `Context`: e.g. https://cs.android.com/android/platform/superproject/+/master:external/angle/src/libANGLE/Program.cpp;l\u003d3657. So I would think it makes sense to update the version number if these data member changed (name, data type, etc.) But when that happens we will also update the `Program::serialize()` code so it might be fine to skip Context.* check.",
      "parentUuid": "97584ca9_75383155",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538b9c93_bc64fb80",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 446,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-05T15:29:57Z",
      "side": 1,
      "message": "That\u0027s right, if the interface to these change, the `Program::serialize()` function would have to be adapted. At least the checks you mentioned don\u0027t warrant a need for a version bump if Context.* change.",
      "parentUuid": "26a924cb_6c90d4f9",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78418133_0a041403",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Same with State and Display, what\u0027s taken from them?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff98c26c_d17ad986",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 448,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "In these if statement checks:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3650\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3657\n\nThe code path goes through the State and Display class. e.g. `mDisplay-\u003egetFrontendFeatures();` is called on line 3650.\n\nSimilar to the above comment, if we ever change the the members in Display and State, we will update the `Program::Serialize()` and `Program::Deserialize()` code, too. So checking if `Program.h/.cpp` change should be good enough.",
      "parentUuid": "78418133_0a041403",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "055461d1_fb0d4dad",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-05T15:29:57Z",
      "side": 1,
      "message": "Yes, also similar",
      "parentUuid": "ff98c26c_d17ad986",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344a6a25_05e9bcf9",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "What\u0027s used from Compiler.h?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e42cdd0_77c1766a",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "When writing `mState.mSpecConstUsageBits.bits()` into stream, https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3632. I realize the `SpecConstUsageBits` used here is under namespace `rx`, so I should include `src/libANGLE/renderer/renderer_utils.h` instead.",
      "parentUuid": "344a6a25_05e9bcf9",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e869eb16_42c18790",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-05T15:29:57Z",
      "side": 1,
      "message": "I took a look and, spec const usage is actually no longer used anywhere! I removed a lot of the spec consts in go/vangle-with-pipeline-libraries#heading\u003dh.thcqjveobs3d and evidently missed this clean up.\n\nCurrently, SpecConstUsage only has Rotation and Dither, the former is always set and the latter is redundant with the backend feature flag, so the code never checks for it.\n\nWould you be able to rip that out entirely? Then you can remove this dependency (your choice whether you\u0027d do that before or after this change)",
      "parentUuid": "8e42cdd0_77c1766a",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "491dea8e_69c66f10",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 451,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "You could be conservative and add include/GLSLANG/ShaderLang.h and include/GLSLANG/ShaderVars.h, though you could make it simpler for us and include `ANGLE_SH_VERSION` (which increments with those files) in the blob and verify it on reload.",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38e2216c_8927c541",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 452,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "FrameCapture should be unnecessary",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75f8f99_d2d67723",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 452,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "It is possible that we are writing `context-\u003egetShareGroup()-\u003egetFrameCaptureShared()-\u003egetProgramSources(id())` into the stream: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3675.\n\nWe are also doing the if condition check in FrameCapture: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3657.",
      "parentUuid": "38e2216c_8927c541",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec31ba3a_c832eeb1",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 453,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "MemoryBuffer really seems unnecessary",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a93232a3_6a1401a9",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 453,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "I am thinking if the implementation of `binaryOut-\u003eresize()` changed: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/Program.cpp;l\u003d3683, we should invalidate the cache.\n\nBut now thinking again, `binaryOut-\u003eresize()` only affects `serialize()`, and how it implements shouldn\u0027t affect the total size of the binary blob cache (which is determined by stream.length()).\n\nI will remove it.",
      "parentUuid": "ec31ba3a_c832eeb1",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c8bba6_8576d2f9",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 406,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 406,
        "startChar": 34,
        "endLine": 406,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b40a9c9_787244d4",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 406,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "Thank you for catching that!",
      "parentUuid": "d7c8bba6_8576d2f9",
      "range": {
        "startLine": 406,
        "startChar": 34,
        "endLine": 406,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "959361c6_d2ef33d4",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 418,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 418,
        "startChar": 34,
        "endLine": 418,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6396f5cc_f63ca56f",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 418,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-12-03T00:25:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "959361c6_d2ef33d4",
      "range": {
        "startLine": 418,
        "startChar": 34,
        "endLine": 418,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3700e0b_f2ec4e1d",
        "filename": "src/libANGLE/ANGLEShaderProgramVersion.cpp",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-12-02T20:08:34Z",
      "side": 1,
      "message": "Is the intent that we hand modify this on every CL that touches these files?  I don\u0027t think that\u0027s going to scale well.  Can we autogenerate this before turning on the presubmit?",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 40
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a7a5dd_14fa8d79",
        "filename": "src/libANGLE/ANGLEShaderProgramVersion.cpp",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T20:20:55Z",
      "side": 1,
      "message": "If we autogenerate it, there\u0027s no need for presubmit!\n\nWe do the same with `ANGLE_SH_VERSION` FYI (manual increment), and it\u0027s not so bad. That\u0027s limited to only 2 files though. Once the scope of this id is limited to a handful of files that only define the data, it should be pretty stable. Yuxin\u0027s follow up change would do that.\n\nI\u0027m fine with an autogenerated hash too, but FWIW, it\u0027s either manually calling `./scripts/run_code_generation.py` and again on conflicting rebases, or manually incrementing this and again on conflicting rebases.",
      "parentUuid": "f3700e0b_f2ec4e1d",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 40
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5618475_e626a6bb",
        "filename": "src/libANGLE/ANGLEShaderProgramVersion.cpp",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-12-02T20:32:53Z",
      "side": 1,
      "message": "Ideally the identifier would be generated by GN so we get a correct one each time we build ANGLE (although that doesn\u0027t translate to Android.bp without work in GO).\n\nActually, Roman pointed us to `commid_id.py` which *does* get invoked in both build paths.\n\n\u003e *My understanding is that we get angle_commit.h by running commid_id.py via this Android.bp genrule: https://cs.android.com/android/platform/superproject/+/master:external/angle/Android.bp;drc\u003d8f8344ab62cefb650d04c30e9af18cc0842af61d;l\u003d1768*\n\nYuxin, can we move your detection logic to `commit_id.py` and generate `ANGLE_PROGRAM_VERSION` that way?  Or generate a file similar to `commit_id.py` and invoke it the same way?",
      "parentUuid": "93a7a5dd_14fa8d79",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 40
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7800ada_00dc959e",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Context is a weird place for this. Perhaps you can do something similar to `GetANGLECommitHash` and have the version be around the same place, and retrieved by a helper function.",
      "range": {
        "startLine": 116,
        "startChar": 18,
        "endLine": 116,
        "endChar": 48
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}