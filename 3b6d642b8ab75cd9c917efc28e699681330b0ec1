{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1f7c857_d3f73e26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "I see MemoryShaderCache.cpp is the only user of `angle::GetANGLECommitHash()` that\u0027s left. I think it\u0027ll be worth following up and removing that function entirely, by making MemoryShaderCache also use the same id you are introducing here.\n\nFWIW, MemoryShaderCache also has a bug where it doesn\u0027t account for hash collision, so similar to how the id is serialized and verified on reload for programs, the shader cache should do the same.",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6218ecbf_a40cbc2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "FYI, the presubmit unit tests are not automatically run, you\u0027d need to verify that locally",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a48f06_27db2b41",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 438,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Does `src/libANGLE/renderer/.*/Program.*` work? That would match all backends and all extensions.\n\n(the metal one should be .mm, but that\u0027s unnecessary with the above catch-all)",
      "range": {
        "startLine": 438,
        "startChar": 31,
        "endLine": 438,
        "endChar": 72
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97584ca9_75383155",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 446,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Ok to be conservative IMO, but what did you notice from context being needed?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78418133_0a041403",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Same with State and Display, what\u0027s taken from them?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "344a6a25_05e9bcf9",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "What\u0027s used from Compiler.h?",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "491dea8e_69c66f10",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 451,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "You could be conservative and add include/GLSLANG/ShaderLang.h and include/GLSLANG/ShaderVars.h, though you could make it simpler for us and include `ANGLE_SH_VERSION` (which increments with those files) in the blob and verify it on reload.",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38e2216c_8927c541",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 452,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "FrameCapture should be unnecessary",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec31ba3a_c832eeb1",
        "filename": "PRESUBMIT.py",
        "patchSetId": 7
      },
      "lineNbr": 453,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "MemoryBuffer really seems unnecessary",
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c8bba6_8576d2f9",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 406,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 406,
        "startChar": 34,
        "endLine": 406,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "959361c6_d2ef33d4",
        "filename": "scripts/angle_presubmit_utils_unittest.py",
        "patchSetId": 7
      },
      "lineNbr": 418,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:45:29Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 418,
        "startChar": 34,
        "endLine": 418,
        "endChar": 35
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3700e0b_f2ec4e1d",
        "filename": "src/libANGLE/ANGLEShaderProgramVersion.cpp",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-12-02T20:08:34Z",
      "side": 1,
      "message": "Is the intent that we hand modify this on every CL that touches these files?  I don\u0027t think that\u0027s going to scale well.  Can we autogenerate this before turning on the presubmit?",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 40
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7800ada_00dc959e",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-12-02T19:44:05Z",
      "side": 1,
      "message": "Context is a weird place for this. Perhaps you can do something similar to `GetANGLECommitHash` and have the version be around the same place, and retrieved by a helper function.",
      "range": {
        "startLine": 116,
        "startChar": 18,
        "endLine": 116,
        "endChar": 48
      },
      "revId": "3b6d642b8ab75cd9c917efc28e699681330b0ec1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}