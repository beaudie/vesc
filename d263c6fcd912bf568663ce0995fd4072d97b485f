{
  "comments": [
    {
      "key": {
        "uuid": "07c682d2_34302607",
        "filename": "src/tests/gl_tests/gles1/PointSpriteTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2019-01-20T01:59:42Z",
      "side": 1,
      "message": "Here is a test that checks for not rendering in point sprite mode when not rasterizing points.",
      "revId": "d263c6fcd912bf568663ce0995fd4072d97b485f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "507c57aa_fe0a5f16",
        "filename": "src/tests/gl_tests/gles1/PointSpriteTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-20T02:41:59Z",
      "side": 1,
      "message": "OK, good point. I agree with you. I think we\u0027ll have to pipe PrimitiveMode through the syncDirtyObject handler functions. Can you try that? I can run some benchmarks to see how much of a regression it might be. I suspect it\u0027ll be pretty minor.\n\nThanks for making the test.",
      "parentUuid": "07c682d2_34302607",
      "revId": "d263c6fcd912bf568663ce0995fd4072d97b485f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "451c5a63_fd2f52c9",
        "filename": "src/tests/gl_tests/gles1/PointSpriteTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2019-01-23T05:06:35Z",
      "side": 1,
      "message": "The attempt to do that is in the current patch set, but I ran into another issue; if the primitive mode changes between two draw calls (say from TRIANGLES to POINTS) we still need to invalidate the gles1 uniforms :)\n\nShould we consider adding the primitive mode to the state class or something then?",
      "parentUuid": "507c57aa_fe0a5f16",
      "revId": "d263c6fcd912bf568663ce0995fd4072d97b485f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c8cacea_a00400b5",
        "filename": "src/tests/gl_tests/gles1/PointSpriteTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-23T05:21:08Z",
      "side": 1,
      "message": "We could consider keeping the GLES 1 state bit permanently dirty. We might be able to accomplish this without much of a change to the code in syncDirtyObjects. We would need to reset the dirty bits before entering the loop. I wouldn\u0027t mind trying to figure this out as it might come up in one or two other places.",
      "parentUuid": "451c5a63_fd2f52c9",
      "revId": "d263c6fcd912bf568663ce0995fd4072d97b485f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "460375c3_a9788153",
        "filename": "src/tests/gl_tests/gles1/PointSpriteTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1175714
      },
      "writtenOn": "2019-01-31T05:29:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c8cacea_a00400b5",
      "revId": "d263c6fcd912bf568663ce0995fd4072d97b485f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}