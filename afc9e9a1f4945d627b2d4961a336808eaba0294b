{
  "comments": [
    {
      "key": {
        "uuid": "07e2c675_47e65d81",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 9,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "what problems?",
      "range": {
        "startLine": 9,
        "startChar": 66,
        "endLine": 9,
        "endChar": 74
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94f79352_4d121310",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 9,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "I elaborated: GL framebuffer objects are not shared between contexts so if we have multiple native contexts then we can\u0027t use the same gl::Framebuffer between them.",
      "parentUuid": "07e2c675_47e65d81",
      "range": {
        "startLine": 9,
        "startChar": 66,
        "endLine": 9,
        "endChar": 74
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "295647bf_b8a2aedb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 13,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "all of them, isn\u0027t it?",
      "range": {
        "startLine": 13,
        "startChar": 9,
        "endLine": 13,
        "endChar": 15
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "802d1144_1e586f38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 13,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "295647bf_b8a2aedb",
      "range": {
        "startLine": 13,
        "startChar": 9,
        "endLine": 13,
        "endChar": 15
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9800c893_21190846",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-05-24T18:35:05Z",
      "side": 1,
      "message": "how hard would it be to just store the Framebuffer in the Context and trigger an onMakeCurrent(surface) function instead?",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be234c21_1e0b407a",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "I\u0027m lost/clueless.  This looks like creating a new framebuffer on every call to makeCurrent, which seems more heavyweight than we\u0027d want.\nIf we need a framebuffer per surface/context pair, why aren\u0027t we doing a map from those pairs to framebuffers?  Framebuffers that live in that map instead of framebuffers created and thrown away.",
      "parentUuid": "9800c893_21190846",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b457cc0_750aaee0",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "The choices I had here were:\n\n 1) A cache of default framebuffers for each context-surface pair that has been made current.  This has the added complexity of keeping the cache trimmed and deleting each framebuffer object when either the context or surface was deleted.  The cache would probably have to be owned by the display.\n\n 2) Each context has a default framebuffer object that is somehow mutated by the surface when MakeCurrent is called.  This would either mean that we create a new FramebufferImpl (still would need an allocation) or have some generic impl that every surface on that backend would create and could mutate.\n\n 3) Re-create the Framebuffer and FramebufferImpl objects on calls to MakeCurrent.  Requires allocating the tracking objects (not GPU resources) on each makeCurrent call.\n\nI found #3 to be the simplest approach by far, trading some CPU performance on MakeCurrent calls for design simplicity.  MakeCurrent isn\u0027t expected to be blazing fast and I can still evaluate caching approaches on top of this afterwards if it turns out to be a problem.",
      "parentUuid": "be234c21_1e0b407a",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a64b2e_c4ddd94b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-29T20:25:17Z",
      "side": 1,
      "message": "Maybe I don\u0027t know what you mean by \"GPU resources\" but it looks like the GL backends are now doing GenFramebuffers(), BindFramebuffer(), FramebufferRenderbuffer() for every MakeCurrent.\nBut if consensus says this is reasonable I\u0027m certainly not going to say it isn\u0027t.  As you say we can always do something more difficult later.\nI\u0027ve worked on multi-window applications that MakeCurrent per window per frame, but I suppose those aren\u0027t too common.\n\nThanks for the wonderfully clear explanation.",
      "parentUuid": "3b457cc0_750aaee0",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df744e5e_0bcb234f",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-05-29T20:27:34Z",
      "side": 1,
      "message": "Thanks for the explanation. How hard would it be to code up #2, using some kind of impl method notifier rather than creating a new impl object? Just curious - I think Rafael at least cares about MakeCurrent performance.",
      "parentUuid": "f1a64b2e_c4ddd94b",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "968d0545_b3aed4e8",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 33
      },
      "lineNbr": 548,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-31T19:44:43Z",
      "side": 1,
      "message": "@Frank: I can\u0027t say if the drivers are going to do reasonable things for the various Framebuffer calls but my assumption is that they arn\u0027t allocating GPU memory (new renderbuffers/textures), just the framebuffer meta object which should live entirely/mostly in CPU memory.\n\n@Jamie: Mind if I prototype this on top of this patch afterwards to keep this chain flowing?",
      "parentUuid": "df744e5e_0bcb234f",
      "range": {
        "startLine": 548,
        "startChar": 8,
        "endLine": 548,
        "endChar": 66
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "141b16ec_8c3e5261",
        "filename": "src/libANGLE/renderer/d3d/SurfaceD3D.cpp",
        "patchSetId": 33
      },
      "lineNbr": 135,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "omit parameter name?",
      "range": {
        "startLine": 135,
        "startChar": 73,
        "endLine": 135,
        "endChar": 80
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee04f3b5_51abe6b0",
        "filename": "src/libANGLE/renderer/d3d/SurfaceD3D.cpp",
        "patchSetId": 33
      },
      "lineNbr": 135,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "141b16ec_8c3e5261",
      "range": {
        "startLine": 135,
        "startChar": 73,
        "endLine": 135,
        "endChar": 80
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9263addd_b417a369",
        "filename": "src/libANGLE/renderer/gl/SurfaceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 29,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "omit parameter name?",
      "range": {
        "startLine": 29,
        "startChar": 72,
        "endLine": 29,
        "endChar": 79
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eee3840_d31dccf5",
        "filename": "src/libANGLE/renderer/gl/SurfaceGL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 29,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9263addd_b417a369",
      "range": {
        "startLine": 29,
        "startChar": 72,
        "endLine": 29,
        "endChar": 79
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97e44da0_c6e7de12",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 141,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "Was I doing it wrong before?  I never noticed any problems, just lucky?",
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a225d26c_403f0eca",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 141,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "No, it was fine before because it re-bound them to the framebuffer.  The new design doesn\u0027t doesn\u0027t know the IDs of the framebuffers they are bound to (but doesn\u0027t need to now).",
      "parentUuid": "97e44da0_c6e7de12",
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fcc9e21_d14f5c91",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 218,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2018-05-23T22:42:16Z",
      "side": 1,
      "message": "nit: Can we have a comment about how resizing renderbuffers here will update them in all framebuffers in which they are used?",
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0bc9a26_f6df27bb",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 218,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fcc9e21_d14f5c91",
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43812960_0de62a52",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-05-24T01:49:58Z",
      "side": 1,
      "message": "Creating a new framebuffer every frame will be slow, I think.\nMaybe DisplayOzone should just stop using FramebufferGL and will call GL functions directly.",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f552551_fa1829c7",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-24T15:21:10Z",
      "side": 1,
      "message": "Agreed that it could be slow, it was hard to figure out what context can own the FBO.  I believe these methods are only used for debugging purposes to get something to show on the screen.  Can you confirm, Frank?",
      "parentUuid": "43812960_0de62a52",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "163f1cef_e87a52d0",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "There\u0027s a Buffer for each surface to hold the surface contents, and Buffer is also used in DisplayOzone to put stuff on screen.  Buffer supports scan out to screen, but it\u0027s only used with the display buffers, not the surface buffers.   Each window surface Buffer gets drawn into a display Buffer which is then flipped to screen (double buffering).\nThe Buffers in DisplayOzone don\u0027t need the \"create a new framebuffer every time\" treatment, only the surface Buffers need that.  I think it would be best to create framebuffers only once for the display Buffer objects.  It should be possible to refactor Buffer to support both use cases.\nThat said, the display functionality does only exist for debugging at this point, and is admittedly crude.  It might get fleshed out and be useful for someone\u0027s application some day, or it might not.\n\nYuly: I don\u0027t understand your comment.  DisplayOzone doesn\u0027t use FramebufferGL.  It\u0027s only mentioned in a Buffer method which is only used by SurfaceOzone.  Nor do I see why we\u0027d want to call GL directly, or what that has to do with FramebufferGL.\n\nGeoff: Dunno if this helps but DisplayOzone::mContext should own the FBO used for the drawing done in DisplayOzone.  I don\u0027t know about the surface FBOs but it\u0027s the same in every back end isn\u0027t it?  You said something about the surface/context pairs and framebuffer \"glue\" ...",
      "parentUuid": "8f552551_fa1829c7",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e7e7ff8_9557dd36",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-27T00:33:19Z",
      "side": 1,
      "message": "I said ```Buffers in DisplayOzone don\u0027t need the \"create a new framebuffer every time\" treatment...\u0027\u0027\u0027\nI\u0027m not 100% sure that\u0027s true, because I don\u0027t really understand what is motivating your change.  But those buffers/FBOs can be created once, have the same lifetime as the containing DisplayOzone object, and only ever be used with the context DisplayOzone::mContext.  There may be some issue with multiple displays and/or threading I\u0027m not aware of.  I see no need to bother with supporting multiple ozone displays at this time, if that helps.",
      "parentUuid": "163f1cef_e87a52d0",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b2e502_1764a769",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "Agreed that we could refactor this a bit to reduce GL object churn and support both use cases.  \n\nI\u0027m going to make the commit message more descriptive of the problem but the main goal here is to remove the assumption that there is only ever one native gl context.  This assumption was baked pretty heavily into some of our EGL code that emulates default framebuffers and because framebuffer objects are not shared between contexts, even in the same share group, I either had to do additional state tracking or churn through some GL objects like this at the cost of some non-critical performance.",
      "parentUuid": "3e7e7ff8_9557dd36",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a5af04f_310c79bd",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-29T20:25:17Z",
      "side": 1,
      "message": "Obviously ozone display is not a real show stopper.  If you need to land this quickly I can go in and fix it later.",
      "parentUuid": "e5b2e502_1764a769",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4072706f_fb6c1838",
        "filename": "src/libANGLE/renderer/gl/egl/ozone/DisplayOzone.cpp",
        "patchSetId": 33
      },
      "lineNbr": 749,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-31T19:44:43Z",
      "side": 1,
      "message": "Ok, I\u0027ll just land it when all other discussion chains have been cleared up.",
      "parentUuid": "9a5af04f_310c79bd",
      "range": {
        "startLine": 749,
        "startChar": 27,
        "endLine": 749,
        "endChar": 37
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b054f248_6cb785cb",
        "filename": "src/libANGLE/renderer/null/SurfaceNULL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 32,
      "author": {
        "id": 1001426
      },
      "writtenOn": "2018-05-25T05:05:47Z",
      "side": 1,
      "message": "omit parameter name?",
      "range": {
        "startLine": 32,
        "startChar": 74,
        "endLine": 32,
        "endChar": 81
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cafcda92_82cbf342",
        "filename": "src/libANGLE/renderer/null/SurfaceNULL.cpp",
        "patchSetId": 33
      },
      "lineNbr": 32,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-05-28T18:54:13Z",
      "side": 1,
      "message": "We do in some places but I\u0027m a fan of smaller diffs later if we ever use the parameters.",
      "parentUuid": "b054f248_6cb785cb",
      "range": {
        "startLine": 32,
        "startChar": 74,
        "endLine": 32,
        "endChar": 81
      },
      "revId": "afc9e9a1f4945d627b2d4961a336808eaba0294b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}