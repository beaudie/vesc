{
  "comments": [
    {
      "key": {
        "uuid": "9177da32_86747d9d",
        "filename": "src/compiler/translator/HashNames.cpp",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "This feels wrong. How are other builtins that can be redeclared handled such that they don\u0027t need this?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cb35ecd_ac5f42ab",
        "filename": "src/compiler/translator/HashNames.cpp",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-03-06T10:34:54Z",
      "side": 1,
      "message": "I am honestly not sure. Without this special if condition, I noticed that the translator would create a variable named \"_ugl_ClipDistance\" instead of \"gl_ClipDistance\" if the latter is redeclared. So basically, it lost the special meaning from the name, and it also lost its built-in property and became a generic varying.\nI also noticed in ParseContext that currently only gl_FragData (excluding this new gl_ClipDistance) can be redeclared. gl_FragData is fine to have different name, since in the end it will be bound to output locations anyway.\nThis is what I did that worked. It\u0027s possible that there is a cleaner way. I\u0027m stilling looking through the code. If you know more about this area, a suggestion would be helpful for me.",
      "parentUuid": "9177da32_86747d9d",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c961fb3_17606e8e",
        "filename": "src/compiler/translator/HashNames.cpp",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-06T16:05:44Z",
      "side": 1,
      "message": "There are different symbol types in the translator, SymbolType::AngleInternal and SymbolType::UserDefined are two of them. The former is output as is, the latter is prefixed with _u.\n\nThis is more than about just outputting the name though, we do check for symbols being builtin (AngleInternal) or user defined in some places, so they could all get tripped up (they don\u0027t now, because this didn\u0027t exist before).\n\nCan you try a diff like this in ParseContext.cpp instead?\n\n bool TParseContext::declareVariable(const TSourceLoc \u0026line,\n                                     const ImmutableString \u0026identifier,\n                                     const TType *type,\n                                     TVariable **variable)\n {\n     ASSERT((*variable) \u003d\u003d nullptr);\n\n+    SymbolType symbolType \u003d identifier \u003d\u003d \"gl_ClipDistance\" ? SymbolType::AngleInternal : SymbolType::UserDefined;\n-    (*variable) \u003d new TVariable(\u0026symbolTable, identifier, type, SymbolType::UserDefined);\n+    (*variable) \u003d new TVariable(\u0026symbolTable, identifier, type, symbolType);\n\nIf that\u0027s sufficient, we can *probably* extend it to do this for all variables prefixed with gl_.",
      "parentUuid": "8cb35ecd_ac5f42ab",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cb6b4a5_2a90ebfe",
        "filename": "src/compiler/translator/HashNames.cpp",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-03-14T10:41:15Z",
      "side": 1,
      "message": "Unfortunately, this doesn\u0027t work. And it requires far more hacks than UserDefined type in order to work. I don\u0027t think gl_ClipDistance is ANGLEInternal, it is GLSL built-in. ANGLE internal means it isn\u0027t exposed to users. If user redeclares built-in variable, it makes sense to classify it as \"user defined\".\n\nIf I changed the redeclared gl_ClipDistance to ANGLEInternal, it wouldn\u0027t be collected into output varying list because inside CollectVariablesTraverser::visitSymbol(): ANGLEInternal symbols are skipped from being collected. That leads to more issues later when compiler needs to examine the list of output varying to see if \"gl_ClipDistance\" is being used.\nIt is possible to check if gl_ClipDistance is being used by traverse the tree again, but it would be redundant.\n\nYes, it would be made workable, but will require more hacks (such as inserting if name \u003d\u003d gl_ClipDistance into more places). Also it doesn\u0027t make sense to me that gl_ClipDistance is ANGLEInternal. We could add a new symbol type such as RedeclaredBuiltIn, or use UserDefined. Is there any issue with UserDefined? Also, I\u0027m wondering if I add RedeclaredBuiltIn type, what would be a side effect?",
      "parentUuid": "6c961fb3_17606e8e",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "380301f4_609f86ae",
        "filename": "src/compiler/translator/HashNames.cpp",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "It\u0027s too bad this doesn\u0027t fit into the current paradigms very well. I\u0027m fine with pretty much any proposed solution. The special casing you have here is a bit hacky so if you end up with that solution please leave a comment justifying why we chose it (the other solutions end up more complicated, etc).",
      "parentUuid": "7cb6b4a5_2a90ebfe",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 60,
        "endChar": 9
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aa2e668_75eace9c",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1195,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "do you want beginsWith or just straight up equals?",
      "range": {
        "startLine": 1195,
        "startChar": 43,
        "endLine": 1195,
        "endChar": 53
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f296e75_3dcee22c",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 165,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "can you move this code into a new traverser util that only exposes ReplaceGLClipDistanceAssignment?",
      "range": {
        "startLine": 165,
        "startChar": 6,
        "endLine": 165,
        "endChar": 39
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f884ab78_19a3a1eb",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 171,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "nit: is the upper bound on a count index limited to the implementation max clip distances? e.g. 32? you can use an angle::BitSet. unordered_set is a bit heavy.",
      "range": {
        "startLine": 171,
        "startChar": 42,
        "endLine": 171,
        "endChar": 55
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0203226e_255e670b",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 248,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "Not sure if it\u0027s worth including libANGLE/Constants.h in this file and the gni file just to have this assertion.\n\nIs ShBuiltInResources::MaxClipDistance something that can be passed to this transformation?",
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5151ec32_d65000ea",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 555,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "You can remove the \", 1\" like the other cases.",
      "range": {
        "startLine": 555,
        "startChar": 25,
        "endLine": 555,
        "endChar": 28
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c708ffa3_1166515a",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 868,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "Please move this function and the associated transformation into a file in tree_ops/ to keep this file from getting any more complicated.",
      "range": {
        "startLine": 868,
        "startChar": 22,
        "endLine": 868,
        "endChar": 54
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cdf0966_d2ea3278",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 925,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "Remove _",
      "range": {
        "startLine": 925,
        "startChar": 77,
        "endLine": 925,
        "endChar": 78
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e2c2484_8af09206",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 13
      },
      "lineNbr": 926,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "Change to AngleInternal",
      "range": {
        "startLine": 926,
        "startChar": 77,
        "endLine": 926,
        "endChar": 88
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6101ebf0_85f4d13b",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1024,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "Can you make the unrelated changes here a separate CL? I would be interested to know also if this is slightly optimizing these functions for GLES2+ (i.e. everything we really care about), if you can figure that out (like by looking at the generated assembly)",
      "range": {
        "startLine": 1019,
        "startChar": 0,
        "endLine": 1024,
        "endChar": 5
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0751b7dc_649e15ea",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1024,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "+1 to split change.",
      "parentUuid": "6101ebf0_85f4d13b",
      "range": {
        "startLine": 1019,
        "startChar": 0,
        "endLine": 1024,
        "endChar": 5
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32700e1f_6e166e0b",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "suggestion: These hierarchical bits add some overhead in the clearing code. Instead how about we just sync all these extended states at once in the extended bit and do away with this nested type?",
      "range": {
        "startLine": 608,
        "startChar": 0,
        "endLine": 615,
        "endChar": 6
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "371839b7_a89b97bc",
        "filename": "src/libANGLE/renderer/metal/doc/APPLE_clip_distance.md",
        "patchSetId": 13
      },
      "lineNbr": 9,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-05T20:01:32Z",
      "side": 1,
      "message": "This is the same for the Vulkan backend as well, isn\u0027t it? Would you mind placing the doc under vulkan/ instead of metal/ as that\u0027s where most of the attention currently is? We should eventually think of a way to make sure the docs are both visible from and reference both Vulkan and Metal.",
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08461ac1_2ea7f7df",
        "filename": "src/libANGLE/renderer/metal/doc/APPLE_clip_distance.md",
        "patchSetId": 13
      },
      "lineNbr": 9,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "Yeah, seems reasonable to me to ask for this to be in the Vulkan doc folder. You can link to it from the main Vulkan README.\n\nAlso, thanks for writing this up!",
      "parentUuid": "371839b7_a89b97bc",
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b18c5175_df7dbf39",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "nit: we don\u0027t typically use this init syntax. also this class doesn\u0027t have a constructor currently so better to stick to the initial style and omit this.",
      "range": {
        "startLine": 64,
        "startChar": 30,
        "endLine": 64,
        "endChar": 33
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a7c33f7_0c2e5d14",
        "filename": "src/tests/gl_tests/ClipDistanceTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-14T15:43:38Z",
      "side": 1,
      "message": "nit: file level comment would be appreciated.",
      "range": {
        "startLine": 4,
        "startChar": 3,
        "endLine": 4,
        "endChar": 8
      },
      "revId": "ae5209276e707a96dab1f68aa4738fcb4cb7aeca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}