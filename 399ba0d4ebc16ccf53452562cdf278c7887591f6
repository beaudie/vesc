{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69f0908e_8afd2462",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T16:00:22Z",
      "side": 1,
      "message": "Tim, I modified this test to reproduce the issue. The test currently works because drawQuad changes state a lot. Using glDrawArrays directly makes sure there is no other side effect than the one being checked for (map). I can make the test fail by commenting out `setDependentDirtyBit(true, index)` in `VertexArray::onSubjectStateChange` under `angle::SubjectMessage::SubjectUnmapped`.\n\nThis is proof that VAOs work with mapped buffers by relying on angle::SubjectMessage::SubjectUnmapped and assuming the memory has necessarily changed under the hood. This can be optimized (as a follow up for example under a new bug) by moving some stuff under `angle::SubjectMessage::SubjectGhosted`, so that the map/unmap messages become no-op just like they are with Texture. In general, I think Texture and VertexArray should respond identically to map/unmap.\n\nHere is the modified test:\n\n    // Verify that we can map and write the buffer between draws and the second draw sees the new buffer\n    // data.\n    TEST_P(BufferDataTest, MapWriteArrayBufferData)\n    {\n        ANGLE_SKIP_TEST_IF(!IsGLExtensionEnabled(\"GL_EXT_map_buffer_range\"));\n    \n        std::vector\u003cGLfloat\u003e data(6, 0.0f);\n    \n        glUseProgram(mProgram);\n    \n        GLint positionLocation \u003d glGetAttribLocation(mProgram, \"position\");\n        ASSERT_NE(-1, positionLocation);\n    \n        // Set up position attribute, don\u0027t use drawQuad.\n        auto quadVertices \u003d GetQuadVertices();\n    \n        GLBuffer positionBuffer;\n        glBindBuffer(GL_ARRAY_BUFFER, positionBuffer);\n        glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat) * quadVertices.size() * 3, quadVertices.data(),\n                     GL_DYNAMIC_DRAW);\n        glVertexAttribPointer(positionLocation, 3, GL_FLOAT, GL_FALSE, 0, nullptr);\n        glEnableVertexAttribArray(positionLocation);\n        EXPECT_GL_NO_ERROR();\n    \n        glBindBuffer(GL_ARRAY_BUFFER, mBuffer);\n        glBufferData(GL_ARRAY_BUFFER, sizeof(GLfloat) * data.size(), nullptr, GL_STATIC_DRAW);\n        glVertexAttribPointer(mAttribLocation, 1, GL_FLOAT, GL_FALSE, 0, nullptr);\n        glEnableVertexAttribArray(mAttribLocation);\n        EXPECT_GL_NO_ERROR();\n    \n        // Don\u0027t read back to verify black, so we don\u0027t break the render pass.\n        glDrawArrays(GL_TRIANGLES, 0, 6);\n        EXPECT_GL_NO_ERROR();\n    \n        // Map and write.\n        std::vector\u003cGLfloat\u003e data2(6, 1.0f);\n        void *mapPtr \u003d glMapBufferOES(GL_ARRAY_BUFFER, GL_WRITE_ONLY_OES);\n        ASSERT_NE(nullptr, mapPtr);\n        ASSERT_GL_NO_ERROR();\n        memcpy(mapPtr, data2.data(), sizeof(GLfloat) * data2.size());\n        glUnmapBufferOES(GL_ARRAY_BUFFER);\n    \n        glDrawArrays(GL_TRIANGLES, 0, 6);\n        EXPECT_PIXEL_COLOR_EQ(8, 8, GLColor::red);\n        EXPECT_GL_NO_ERROR();\n    }",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5491a047_3e3d569e",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-21T16:25:57Z",
      "side": 1,
      "message": "Is this a performance or correctness concern?\n\nIs the basic performance concern that changing buffer data should not always trigger a VAO update?\n\nIf so I\u0027m planning on looking at that in http://anglebug.com/6371 . map/unmap state updates weren\u0027t on my radar but are similar to how SubData calls are handled.\n\n\u003e so that the map/unmap messages become no-op just like they are with Texture.\n\nTexture can\u0027t map/unmap, what are you referring to here?",
      "parentUuid": "69f0908e_8afd2462",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1932b915_aa6abf03",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T16:43:37Z",
      "side": 1,
      "message": "The double-message in the other comment was a performance note. The test here is for correctness, but my comment also has a performance concern\n\n\u003e Is the basic performance concern that changing buffer data should not always trigger a VAO update?\n\nYeap, if the change is done in place (no memory reallocation) there is no need for the VAO to syncState.\n\n\u003e \u003e so that the map/unmap messages become no-op just like they are with Texture.\n\n\u003e Texture can\u0027t map/unmap, what are you referring to here?\n\nTheir subjects can in the case of texture buffers, which is the whole reason for the SubjectGhosted message :) Initially I suggested SubjectMapped be used for the purpose SubjectGhosted was used, but I agree that leads to unnecessary updates, and I suggest VAOs should act on SubjectGhosted instead of SubjectMapped for the very same reason.",
      "parentUuid": "5491a047_3e3d569e",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa68c2cb_a45a67fa",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-21T16:46:16Z",
      "side": 1,
      "message": "If you have to modify the implementation to make the test fail, is there still a correctness concern?\n\nI\u0027d suggest deferring this so Tim can land his CLs. I\u0027d like to take a look at the \"data change only\" updates for VAOs.",
      "parentUuid": "1932b915_aa6abf03",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a64399_96ecc2ca",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T16:54:45Z",
      "side": 1,
      "message": "\u003e If you have to modify the implementation to make the test fail, is there still a correctness concern?\n\nNo, there is no correctness concern. And yes, definitely defer it. I tried to be clear:\n\n\u003e This can be optimized (as a follow up for example under a new bug)\n\nI would just like to get the regression test in.",
      "parentUuid": "aa68c2cb_a45a67fa",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac4fcff8_606e7091",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 751,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-22T01:00:06Z",
      "side": 1,
      "message": "I opened anglebug.com/6426 to come back to this.",
      "parentUuid": "a2a64399_96ecc2ca",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48d8c19c_3edf8ada",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 769,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T15:34:45Z",
      "side": 1,
      "message": "@Jamie, I\u0027m looking at this test, and it turns out this call is making the VertexArray get notified twice about the map (and unmap). Does that sound normal? The observers of the buffer are:\n\n    mObserver \u003d 0x555559246d50,\n    mIndex \u003d 1\n\nand\n\n    mObserver \u003d 0x555559246d50,\n    mIndex \u003d 0\n\nWhy are there two of these?",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848e66c7_f3395bd3",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 769,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T15:47:26Z",
      "side": 1,
      "message": "Seems to have had something to do with drawQuad adding another attribute. Using glDrawArrays directly makes it get notified only once. It\u0027s still surprising that the VA is notified twice for this one buffer.",
      "parentUuid": "48d8c19c_3edf8ada",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c49c00fa_d3dfa655",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 769,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-21T15:50:32Z",
      "side": 1,
      "message": "I\u0027m not entirely sure. Does it produce wrong results or were you thinking it\u0027s a performance concern?",
      "parentUuid": "848e66c7_f3395bd3",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5559de0_276f122b",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 51
      },
      "lineNbr": 769,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T15:55:13Z",
      "side": 1,
      "message": "Performance",
      "parentUuid": "c49c00fa_d3dfa655",
      "revId": "399ba0d4ebc16ccf53452562cdf278c7887591f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}