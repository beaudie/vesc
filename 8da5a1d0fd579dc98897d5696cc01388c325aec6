{
  "comments": [
    {
      "key": {
        "uuid": "f50fa4e5_39356bdb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:15Z",
      "side": 1,
      "message": "nit: you should probably describe your solution briefly.",
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eca4493_681ab5be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-11T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f50fa4e5_39356bdb",
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa469c9f_7be1edcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:28Z",
      "side": 1,
      "message": "Also looks like you have some test failures.",
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a526423_3a765613",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:15Z",
      "side": 1,
      "message": "I believe the correct fix is to downgrade highp to mediump rather than upgrade mediump to highp. I sent an email to ARM to confirm.",
      "range": {
        "startLine": 1401,
        "startChar": 0,
        "endLine": 1406,
        "endChar": 13
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41b48402_da0e4d69",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-11T22:47:00Z",
      "side": 1,
      "message": "I expect this part will require more finesse. I\u0027d tried the simple case of downgrading highp to mediump and that caused some deqp failures. I think this will allow the tests to pass.\nI expect this to change before the patch lands based on benchmark behavior.",
      "parentUuid": "3a526423_3a765613",
      "range": {
        "startLine": 1401,
        "startChar": 0,
        "endLine": 1406,
        "endChar": 13
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58c1ecb2_8e788176",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T22:56:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "41b48402_da0e4d69",
      "range": {
        "startLine": 1401,
        "startChar": 0,
        "endLine": 1406,
        "endChar": 13
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d274260_cbc01e1e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:15Z",
      "side": 1,
      "message": "this should be an enum rather than a uint.",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 13
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba228da8_1ef70c52",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-11T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d274260_cbc01e1e",
      "range": {
        "startLine": 85,
        "startChar": 4,
        "endLine": 85,
        "endChar": 13
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89852748_0afdf541",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 874,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:15Z",
      "side": 1,
      "message": "we already have\n \n    ShaderMap\u003cstd::vector\u003csh::ShaderVariable\u003e\u003e mLinkedOutputVaryings;\n    ShaderMap\u003cstd::vector\u003csh::ShaderVariable\u003e\u003e mLinkedInputVaryings;\n\nThese guys have \"int location\". Can we set that appropriately and use that to detect the mismatch rather than storing the linked variables?\n\nAlso Tim added some kind of unordered_map with every shader variable in it. Maybe there\u0027s info in there we can use?",
      "range": {
        "startLine": 874,
        "startChar": 31,
        "endLine": 874,
        "endChar": 45
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d406bf_890b8a6f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 874,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-11T22:47:00Z",
      "side": 1,
      "message": "We\u0027ve already computed the mergedVaryings in Program::getMergedVaryings and ProgramPipeline::getMergedVaryings as part of the link step, I figured I\u0027d just reuse that information here. Otherwise I need to do basically what they are doing to match up the inputs \u0026 outputs.\nWhat\u0027s the concern with storing this info?",
      "parentUuid": "89852748_0afdf541",
      "range": {
        "startLine": 874,
        "startChar": 31,
        "endLine": 874,
        "endChar": 45
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee6edb51_13c774ea",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 874,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T22:56:34Z",
      "side": 1,
      "message": "It is redundant to store the information twice. Am I missing something or does storing the extra information only basically save you one for loop?",
      "parentUuid": "a9d406bf_890b8a6f",
      "range": {
        "startLine": 874,
        "startChar": 31,
        "endLine": 874,
        "endChar": 45
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c28e3d9_b5e47da6",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 874,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-12T15:50:36Z",
      "side": 1,
      "message": "The Program::getMergedVaryings seems to be doing a non-trivial amount of work and thus thought saving the results would be good.\nIf things are simple enough I could loop through the mLinkedOutputVaryings \u0026 mLinkedInputVaryings and look for matching sets. Just seems a waste since we already did that in getMergedVaryings.\nI\u0027ll prototype it and see how it looks.",
      "parentUuid": "ee6edb51_13c774ea",
      "range": {
        "startLine": 874,
        "startChar": 31,
        "endLine": 874,
        "endChar": 45
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3747e73d_a46d356a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1809,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-11T17:55:15Z",
      "side": 1,
      "message": "nit: should be a separate CL so that bisect can pinpoint perf changes.",
      "range": {
        "startLine": 1808,
        "startChar": 62,
        "endLine": 1809,
        "endChar": 73
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcea562_d0d21a78",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1809,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-11T22:47:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3747e73d_a46d356a",
      "range": {
        "startLine": 1808,
        "startChar": 62,
        "endLine": 1809,
        "endChar": 73
      },
      "revId": "8da5a1d0fd579dc98897d5696cc01388c325aec6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}