{
  "comments": [
    {
      "key": {
        "uuid": "2ddc66fc_7f2d1bc9",
        "filename": "src/common/utilities.cpp",
        "patchSetId": 3
      },
      "lineNbr": 624,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "This assert is already done in egl::CubeMapTextureTargetToLayerIndex",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aeb4063_a1239e57",
        "filename": "src/common/utilities.cpp",
        "patchSetId": 3
      },
      "lineNbr": 624,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "No real downside to extra assertions!",
      "parentUuid": "2ddc66fc_7f2d1bc9",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed8dee45_7cde3b8e",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "Should probably be UNREACHABLE but since we only support Framebuffer and Textures, if (isTexture) {} else {ASSERT(isFramebuffer)} would be even better in my opinion.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_be3059ef",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Made it UNREACHABLE.  I usually have a small preference to do it this way instead of the else ASSERT style because this makes it easier to add more cases later.",
      "parentUuid": "ed8dee45_7cde3b8e",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd882a39_1c9f0143",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 542,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "The comment relates to the insert, not the AddRef.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a142033_f936f7ec",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 542,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Updated the comment.",
      "parentUuid": "cd882a39_1c9f0143",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad977653_8621dea4",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "A sibling can only be a source xor a target so if (mTarget) {ASSERT(!mSource)} else { if (source) {}} would be closer to the condition we know should be true.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea24f4a5_36d23800",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad977653_8621dea4",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d9ade79_2fb55e6c",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "No need to add default-initializable member variables in the initialization list.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea24f4a5_f6bba0ba",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "I usually just do it for completeness.  Makes adding new members that don\u0027t trigger the initialization order warnings easier.",
      "parentUuid": "6d9ade79_2fb55e6c",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d9d1a6f_0026b03f",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "Like in Display.cpp, if (isTexture) {} else {ASSERT(isRenderbuffer)}",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a11e441_ba699199",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d9d1a6f_0026b03f",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da7a2c0_63ea2a9b",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "This is the only place where mTargets is used to read information from it. Are follow up CLs going to use it? If not I\u0027d suggest removing mTargets.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caf6504b_1dd753f0",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Yea, the implementation of Images for the GL renderer will need to know about targets and some validation will need to use it.",
      "parentUuid": "0da7a2c0_63ea2a9b",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd882a39_3ca4bd8c",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "ditto, can only be a source xor a target, this comment is voided if mTargets is removed.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0ea828_f79a8043",
        "filename": "src/libANGLE/Image.cpp",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd882a39_3ca4bd8c",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0da7a2c0_43f5267a",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "Image has a BindingPointer to ImageSibling but ImageSibling doesn\u0027t inherit from RefCounted. I\u0027d suggest adding some enable_if or static_assert in BindingPointer to make sure the object inherits from RefCounted.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed76ce11_891bbda8",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Actually in BindingPointer\u0027s implementation, a static cast instead of a reinterpret_cast would probably do.",
      "parentUuid": "0da7a2c0_43f5267a",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aeb4063_e429b439",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:30:35Z",
      "side": 1,
      "message": "ImageSibling inherits from gl::FramebufferAttachmentObject which inherits from RefCountObject.",
      "parentUuid": "0da7a2c0_43f5267a",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad977653_661cf273",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "From my interpretation of the spec, a sibling, source or target, cannot be used to create another image, or as the target of another image. This would make mSources a single pointer to an Image and causes a bunch of changes in the implementation of Image and ImageSibling.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea24f4a5_99c25f27",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:30:35Z",
      "side": 1,
      "message": "We talked about this in person but to reiterate for Jamie: This is possible but it cannot create an image from the same mip level/zoffset but it is valid to create multiple EGL images from different faces from a cube map, for example.",
      "parentUuid": "ad977653_661cf273",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed8dee45_9ce3e74b",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "mTarget and mSources are confusing names as we don\u0027t know if the sibling is the source of, or sources from. Maybe use mSourceOf and mSourceFrom? (I\u0027m being very uninspired here)",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_2109c836",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:30:35Z",
      "side": 1,
      "message": "Thanks I\u0027ll try to think of a better name.",
      "parentUuid": "ed8dee45_9ce3e74b",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea523422_ef9051d6",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-31T14:16:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eafb1432_2109c836",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d83be1d_872719e7",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "ditto on the confusing naming.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a11e441_1d751742",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:30:35Z",
      "side": 1,
      "message": "I think the naming makes sense on this one but could be updated for the Sibling.",
      "parentUuid": "6d83be1d_872719e7",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0b6c19_dbbe871b",
        "filename": "src/libANGLE/Image.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-29T20:00:48Z",
      "side": 1,
      "message": "+1 in retrospect",
      "parentUuid": "6a11e441_1d751742",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d86fa2e_9e992953",
        "filename": "src/libANGLE/Image_unittest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "nit: missing file description",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a00d8f0_5bf0435b",
        "filename": "src/libANGLE/Image_unittest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d86fa2e_9e992953",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dbd52cc_a2f420c5",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "The specification says that generating mipmaps doesn\u0027t always orphan.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_5e8cb510",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "I think this comment is in the wrong place.  Fixed though.",
      "parentUuid": "8dbd52cc_a2f420c5",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a11e441_bd406bb9",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 429,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-29T20:00:48Z",
      "side": 1,
      "message": "Whoops :)",
      "parentUuid": "eafb1432_5e8cb510",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d9ade79_4fbaa25d",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 626,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "This function doesn\u0027t check if the buffer is already a sibling of an image",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a00d8f0_de7d6190",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 3
      },
      "lineNbr": 626,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Thanks, added a TODO.",
      "parentUuid": "6d9ade79_4fbaa25d",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dbd52cc_c2f11cd4",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2033,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "The spec says that an image cannot be multisampled in the first place. (maybe remove getSamples and mSamples from Image as well?)",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea24f4a5_39d58b2f",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2033,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "It disallows creation of an image from a multisampled renderbuffer and texture but the extension to create renderbuffers from images (OES_EGL_image) mentions that the image may be multisampled.  I kept it for that reason, if we support images from multisampled surfaces or something, it will be useful to have the validation in place.",
      "parentUuid": "8dbd52cc_c2f11cd4",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d7d46ed_2b91e55a",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Most of the tests will fail for now, maybe we could not instantiate them in this CL and wait for the backends to be implemented before adding the instantiation for that backend.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af28c55_43ae189e",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "All of the tests should check for the extensions they need and skip tests when the extensions aren\u0027t available.  They should all pass.",
      "parentUuid": "2d7d46ed_2b91e55a",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2da466b9_ca1be7fe",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-26T13:45:23Z",
      "side": 1,
      "message": "ImageTest",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af28c55_03981082",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2da466b9_ca1be7fe",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d808212_2af55f7b",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "clang-format and SHADER_SOURCE don\u0027t seem to work well together, the biggest problem being the variable list put on a single line.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0ea828_3a0a1d5d",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Yea.. gross.. turned it into a string literal.",
      "parentUuid": "0d808212_2af55f7b",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd710a1d_28ef237c",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "GL_TEXTURE_CUBE_MAP. IIRC nearest is the default.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a142033_1cdab95d",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Fixed cube map enum but default GL_TEXTUREMIN_FILTER is GL_NEAREST_MIPMAP_LINEAR.",
      "parentUuid": "cd710a1d_28ef237c",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d6b9230_8370fe00",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "ditto",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0b6c19_fbd5cbb5",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d6b9230_8370fe00",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d7d46ed_4b861922",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "ditto",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0ea828_fa970554",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d7d46ed_4b861922",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2df0e6db_b01478d2",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "ditto",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_81009c3f",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Default GL_TEXTURE_MAG_FILTER is GL_LINEAR.",
      "parentUuid": "2df0e6db_b01478d2",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd710a1d_48e45f9c",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Create a source renderbuffer",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_410a945d",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd710a1d_48e45f9c",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dc9d29e_f6ff9edb",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "source renderbuffer",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a142033_fc6945ea",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8dc9d29e_f6ff9edb",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d808212_4aea939a",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "EXPECT_GL_ERROR is already called in EXPECT_PIXEL_EQ",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0b6c19_3beb439e",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 256,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d808212_4aea939a",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed76ce11_a91879ac",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 268,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "I\u0027m not sure, but isn\u0027t there something like READ and DRAW buffers in ES?",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0b6c19_dbe1e7ba",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 268,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "There is with extensions but the GL_FRAMEBUFFER binds to both at once.",
      "parentUuid": "ed76ce11_a91879ac",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d6b9230_a36dfa27",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "ditto",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a142033_dceb21e8",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d6b9230_a36dfa27",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d808212_6aef57a9",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 313,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "nit: could have another variable to hold reinterpret_cast\u003cEGLClientBuffer\u003e(texture2D)",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d6b9230_c37af6de",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "The spec of EGL_OES_image_base says that EGL_NO_CONTEXT might work, but it is all of the other extensions that say it is not valid. Maybe put a comment here why we check the inverse of what the quote above says.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caf6504b_60922c62",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Thanks for mentioning that, fixed.",
      "parentUuid": "8d6b9230_c37af6de",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d808212_8ae3abc1",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 384,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "A TODO here would be nice",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0ea828_5a2ef1c6",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 384,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done, thanks, I missed this one.",
      "parentUuid": "0d808212_8ae3abc1",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2df0e6db_9019740c",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 506,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "The texture level selected should be 2",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea24f4a5_f91cb3a1",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 506,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2df0e6db_9019740c",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d981e90_c5d3cc49",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 540,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Maybe we could check if it fails when all but one level are specified.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aeb4063_247b1c67",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 540,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d981e90_c5d3cc49",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd710a1d_68e91b73",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Aren\u0027t we testing the range-check on that parameter here? If yes it would be good to test both \"2\" and \"-1\".",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eafb1432_c1fd84a7",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 585,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Whoops, done.",
      "parentUuid": "cd710a1d_68e91b73",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d6b9230_03640e3d",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "We should do this check even when we have the EGL_KHR_gl_texture_3D_image extension.\n\nWe should still check that when we don\u0027t have the extension, trying to create an image from it produces an error.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af28c55_836c20af",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 594,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d6b9230_03640e3d",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d981e90_a5d8c866",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 637,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Likewise, we should do the \"else\" check.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a00d8f0_de45611b",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 637,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d981e90_a5d8c866",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d7d46ed_8b7f3189",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 662,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "It would be even better if we bound a valid cubemap before this call.",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af28c55_c330e8f0",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 662,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "The default cube map should be valid (defined to be 1x1 on all faces)",
      "parentUuid": "2d7d46ed_8b7f3189",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2df0e6db_501c2cf7",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1142,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-07-27T02:01:56Z",
      "side": 1,
      "message": "Why is this commented out?",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0b6c19_3bcc632f",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1142,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2015-07-29T19:24:43Z",
      "side": 1,
      "message": "Whoops, fixed.",
      "parentUuid": "2df0e6db_501c2cf7",
      "revId": "c16dae1e3e737b15e6552e0b8cdb44f47402b42f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}