{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08356197_bcae935f",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-06-21T03:52:01Z",
      "side": 1,
      "message": "Gert, can we make this a RefCountObject to track them, rather than add a unique solution?",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bb20d43_35f4ad8d",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-06-21T09:55:39Z",
      "side": 1,
      "message": "That seems quite heavy-weight: Its constructor takes a serial number and an ID as parameter, I would only need one of the two, and still have to make sure that I create the serial ID in an atomic way, and the ref-counting is actually not needed at all. \n\nI\u0027ve now used `rx::AtomicSerialFactory`, and in order to not change the constructor interface of Surface, I\u0027ve added it in a static method, so that it is unique across all Surface instances, but I\u0027m not sure whether the initialization is really thread save, because I don\u0027t know whether the first surface can be created from a multi-threaded code path already that might lead to a race condition.\n\nAdding the serialFactory as static member was not possible, because it has a non-trivial constructor, and warnings about global constructors are handled as errors.",
      "parentUuid": "08356197_bcae935f",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "883edcf7_06aca08f",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-06-22T02:11:32Z",
      "side": 1,
      "message": "Surface does have a `mRefCount` so in theory we could use both, but I agree we shouldn\u0027t add weight when we don\u0027t need to.\n\nWhat do you think of an even more minor update than your first version.  Just the following:\n```\n GLuint Surface::getId() const\n {\n-    UNREACHABLE();\n-    return 0;\n+    static std::atomic\u003cGLuint\u003e id{0};\n+    return ++id;\n }\n```",
      "parentUuid": "9bb20d43_35f4ad8d",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "316e0e2b_8270de71",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-06-22T13:50:05Z",
      "side": 1,
      "message": "This will give out a new ID every time `getID()` is called, I don\u0027t think that\u0027s what we want. \n\nBTW: I now saw that there are two templates called `RefCountObject` and non of these is used for `mRefCount`.",
      "parentUuid": "883edcf7_06aca08f",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "246d32cd_9e73b37c",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-06-22T15:42:59Z",
      "side": 1,
      "message": "\u003e This will give out a new ID every time  getID()  is called, I don\u0027t think that\u0027s what we want. \n\n/facepalm - Right, apologies, I was trying to do too many things at once.\n\n\u003e BTW: I now saw that there are two templates called  RefCountObject  and non of these is used for  mRefCount .\n\nYeah, that\u0027s what got me thinking we shouldn\u0027t try to do too much with egl::Surface",
      "parentUuid": "316e0e2b_8270de71",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11e28039_f7a0a981",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-06-27T13:28:14Z",
      "side": 1,
      "message": "For that reason I now went back to the initial design: static member as atomic, that gets initialized when the library is loaded, and when counting this up.",
      "parentUuid": "246d32cd_9e73b37c",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6f76a81_8eafc1c1",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-06-27T13:33:58Z",
      "side": 1,
      "message": "Got it, thanks for exploring other solutions, Gert. Can you add a comment to that direction to help others understand and maintain in the future?",
      "parentUuid": "11e28039_f7a0a981",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a9e1f0_15ab13f4",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-27T15:12:45Z",
      "side": 1,
      "message": "My suggestion is to avoid static and instead make the serial factory owned by Display, which is the entity that creates surfaces. Basically this:\n\n\u003e I\u0027ve now used `rx::AtomicSerialFactory`, and in order to not change the constructor interface of Surface, I\u0027ve added it in a static method\n\nbut don\u0027t be afraid to change the constructor interface of `Surface`. The internal API of ANGLE is not set in stone for us to have to work around it.",
      "parentUuid": "f6f76a81_8eafc1c1",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaf6309f_d5b016fc",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-06-27T15:57:43Z",
      "side": 1,
      "message": "The way I see it it seems to make more sense to add the atomic to the rx::EGLImplFactory, that can hand out the ID in WindowSurface::WindowSurface, the two PbufferSurface::PbufferSurface, and PixmapSurface::PixmapSurface - \nbut how can I be sure that there is only one rx::EGLImplFactory?",
      "parentUuid": "40a9e1f0_15ab13f4",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f62786_fd056c3e",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-27T19:25:46Z",
      "side": 1,
      "message": "`class DisplayImpl : public EGLImplFactory`: there are as many `EGLImplFactory`s as there are `DisplayImpl`s, so one. Adding the serial factory to `EGLImplFactory` SGTM.",
      "parentUuid": "eaf6309f_d5b016fc",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 301,
        "endChar": 17
      },
      "revId": "b97d8ca45baf771ba272de36c8c864351dedb72b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}