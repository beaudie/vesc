{
  "comments": [
    {
      "key": {
        "uuid": "dcf47818_c8c94bbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "I didn\u0027t see if you added it - having a warning on uint8_t conversion might be helpful as well. There\u0027s probably a bunch of other cases. LGTM with a few suggestions on some improvements.",
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ecff955_a9b13406",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "I\u0027m sure there are other places I\u0027ve missed. Added this one, we can add more as we remember/notice them.",
      "parentUuid": "dcf47818_c8c94bbe",
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71f14aca_01fc3a0f",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "nit: ANGLE_PERF_WARNING? We always prefix with ANGLE, and Debug is a bit redundant so we can keep it nice and short.",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 26
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c02f90_27628b99",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71f14aca_01fc3a0f",
      "range": {
        "startLine": 167,
        "startChar": 8,
        "endLine": 167,
        "endChar": 26
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad1febab_50a078c6",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "maybe you could make this outside of the macro",
      "range": {
        "startLine": 170,
        "startChar": 27,
        "endLine": 170,
        "endChar": 38
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ca6868_a9ad8544",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad1febab_50a078c6",
      "range": {
        "startLine": 170,
        "startChar": 27,
        "endLine": 170,
        "endChar": 38
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a051901_81dd53a2",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "nit: sRepeatCount",
      "range": {
        "startLine": 171,
        "startChar": 24,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cd623ae_ad146ff3",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a051901_81dd53a2",
      "range": {
        "startLine": 171,
        "startChar": 24,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e7b55b1_4fc050ec",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "I\u0027m a bit worried about std::string in the macro causing inflated stack space in some of these functions. Can you maybe do all this in a function call instead of a macro?",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5442375d_e7fe8ded",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "The std::string is in the scope of the perf warning, which itself is in the scope of the inefficient path, but done.",
      "parentUuid": "4e7b55b1_4fc050ec",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b4699d3_2925f95e",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T16:40:19Z",
      "side": 1,
      "message": "Thanks. FYI so you know what I\u0027m talking about. If have this:\n\nvoid func(bool maybe)\n{\n   int x \u003d 5;\n   if (maybe)\n   {\n       int array[10000];\n       somethingelse(\u0026x, array);\n   }\n   return x;\n}\n\nthe compiler will reserve stack space for \u0027array\u0027 even if maybe is false.",
      "parentUuid": "5442375d_e7fe8ded",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f0d9237_e387eaf6",
        "filename": "src/libANGLE/Debug.h",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T17:59:40Z",
      "side": 1,
      "message": "I did get what you talk about, but I always thought the stack frame is adjusted on every scope, precisely to avoid necessarily increasing the stack frame size, like this technically only needs 100 ints:\n\n   if (maybe)\n   {\n       int array[100];\n       something(\u0026x, array);\n   }\n   if (maybe_)\n   {\n       int array2[100];\n       somethingelse(\u0026x, array);\n   }\n\nI\u0027ve never really checked, though. Anyway, this is already moved to a function.",
      "parentUuid": "3b4699d3_2925f95e",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1815234_f0c283ae",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "nit: bubble doesn\u0027t seem like a technical term - how about idle/stall/wait?",
      "range": {
        "startLine": 268,
        "startChar": 17,
        "endLine": 268,
        "endChar": 24
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23c4ba1b_0c057477",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 268,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1815234_f0c283ae",
      "range": {
        "startLine": 268,
        "startChar": 17,
        "endLine": 268,
        "endChar": 24
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac63e8cf_a468c00c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "nit: can you make this a helper in ContextVk to shorten the strings? (contextVk-\u003egetDebug())",
      "range": {
        "startLine": 461,
        "startChar": 27,
        "endLine": 461,
        "endChar": 59
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afc68321_4d7c846e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac63e8cf_a468c00c",
      "range": {
        "startLine": 461,
        "startChar": 27,
        "endLine": 461,
        "endChar": 59
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "981c0a46_15ab97a7",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 462,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-24T19:37:50Z",
      "side": 1,
      "message": "Regarding this: Index range validation seems to be done only for glDrawRangeElementsBaseVertexEXT/OES but not the promoted version of the same function. Should we remove those and just rip the whole getIndexRange functionality?",
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca6be910_02e167c3",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 462,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "We also use the getIndexRange for some WebGL cases where robust access isn\u0027t supported. You\u0027re right we should take out the index range validation from these functions. I don\u0027t think it\u0027ll let us ditch getIndexRange entirely.",
      "parentUuid": "981c0a46_15ab97a7",
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95426d44_6e490b20",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 462,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done in separate CL.",
      "parentUuid": "ca6be910_02e167c3",
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97d67cf4_fd41c15d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1612,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T14:08:48Z",
      "side": 1,
      "message": "nit: performend (typo)\n\nIt would be better to just use the verb, e.g. \"Mipmaps _generated_ on CPU due to...\"\n\nSame for other cases",
      "range": {
        "startLine": 1612,
        "startChar": 42,
        "endLine": 1612,
        "endChar": 52
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd2f5905_df866cbc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1612,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-25T16:31:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97d67cf4_fd41c15d",
      "range": {
        "startLine": 1612,
        "startChar": 42,
        "endLine": 1612,
        "endChar": 52
      },
      "revId": "7d5af37ab21950d88cd9c201e92d673c7d16044c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}