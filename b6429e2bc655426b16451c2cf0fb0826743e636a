{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf59c8b_fddc1a20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-14T22:02:12Z",
      "side": 1,
      "message": "Could you give this a try to see if it improves hailin\u0027s test?",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7275214_69fde6ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-14T23:08:06Z",
      "side": 1,
      "message": "It seems that this CL has no effect on the results of the perf test.\n* `TexureUploadETC2TranscodingBenchmark` tested on Windows and Linux.",
      "parentUuid": "7cf59c8b_fddc1a20",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e24a956_c3b48914",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-15T20:30:05Z",
      "side": 1,
      "message": "Something like this, but I just realized that we are not passing the correct LayerStart/LayerCount value to onImageTransferDstAndComputeWrite.You will need to fix that code in order for this to work.",
      "parentUuid": "d7275214_69fde6ba",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c787a12_97312add",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-15T20:51:57Z",
      "side": 1,
      "message": "@syoussefi@chromium.org FYI, I think this illustrates the idea what you and me are referring to. Amirali, you can take over this CL if you want.",
      "parentUuid": "4e24a956_c3b48914",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3113bb89_2717500a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-15T20:55:19Z",
      "side": 1,
      "message": "The change I\u0027ve been working on with Amirali is a bit more generic. It doesn\u0027t special case transfers, and just generally answers the question \"do we need a WaW barrier?\". Then the logic to skip the barrier becomes simpler.\n\nBut yes the idea is similar. In this CL, you are using the contents-defined bits to tell if a barrier is needed, in the other change we can use the \"has this subresource been written to\" bits to the same effect for that app.",
      "parentUuid": "0c787a12_97312add",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f8fadb1_cf61f34f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-15T20:58:24Z",
      "side": 1,
      "message": "But do you really need the generic solution? I think almost all usage cases is for transferDst.",
      "parentUuid": "3113bb89_2717500a",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "729c3a83_7efdbbe1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-15T21:03:01Z",
      "side": 1,
      "message": "If the generic solution ends up with equal complexity, I don\u0027t see why we\u0027d special case transfer!",
      "parentUuid": "3f8fadb1_cf61f34f",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6262cae_051ad958",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-15T21:06:12Z",
      "side": 1,
      "message": "Agree.",
      "parentUuid": "729c3a83_7efdbbe1",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1b98d03_1866830a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-17T01:25:54Z",
      "side": 1,
      "message": "Thank you!\n\nI tried this CL on the perf test. The `gpu_time` on `TexureUploadETC2TranscodingBenchmark` remains the same.\n\n* Regarding the parameters in `onImageTransferDstAndComputeWrite()`, it is currently always applied to `levelGLStart` (which is always 0 in this test). Also, since `layerStart` is `kMaxContentDefinedLayerCount`, it always leads to a barrier.\n \n* If the parameters are updated to the level/layers of the first update, `mWrittenSinceTransferDstLayout` is set just before getting the first outside command buffer. Then, in `isTransferDstWriteBarrierRequired()`, it reads the same bit (if not a layout transition), leading to a barrier. The barrier function will then reset `mWrittenSinceTransferDstLayout`.\n\nI am also looking into this CL, which focuses on WAW: https://chromium-review.googlesource.com/c/angle/angle/+/5301855\n* It improves the `gpu_time` for the perf test. However, some tests which were using the image as both read and write were failing (including compute-based mipmap generation and self-copy). For this, currently two image layouts always use barriers.",
      "parentUuid": "d6262cae_051ad958",
      "revId": "b6429e2bc655426b16451c2cf0fb0826743e636a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}