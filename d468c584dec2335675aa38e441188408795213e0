{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d3ef7c30_e04fa3f1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 14
      },
      "lineNbr": 760,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-22T15:48:39Z",
      "side": 1,
      "message": "setSize is incorrect here, it doesn\u0027t \"accumulate\". See Ref, I have a better suggestion.",
      "revId": "d468c584dec2335675aa38e441188408795213e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ddc628c_e2223156",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3200,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-22T15:48:39Z",
      "side": 1,
      "message": "Does this have a measurable impact on CPU performance? What do perf tests say? How about microbenchmarks?\n\nThe alternative (free pools whole) may or may not use more memory (because pool may be stuck on one permanent allocation), but let\u0027s see if perf impact is significant or not before considering it.",
      "range": {
        "startLine": 3200,
        "startChar": 39,
        "endLine": 3200,
        "endChar": 88
      },
      "revId": "d468c584dec2335675aa38e441188408795213e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "311c19eb_857d315d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 14
      },
      "lineNbr": 138,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-22T15:48:39Z",
      "side": 1,
      "message": "Useless comment is useless. Could you please add some comment here that describes what the class is used for? (i.e. clean up of desc sets through garbage collection)",
      "revId": "d468c584dec2335675aa38e441188408795213e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c95e7c04_98f1d659",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 14
      },
      "lineNbr": 266,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-22T15:48:39Z",
      "side": 1,
      "message": "Any idea how big this pool can be?",
      "range": {
        "startLine": 266,
        "startChar": 52,
        "endLine": 266,
        "endChar": 68
      },
      "revId": "d468c584dec2335675aa38e441188408795213e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab5828bf_792acd1f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 14
      },
      "lineNbr": 271,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-22T15:48:39Z",
      "side": 1,
      "message": "Ref: I see the problem with `accumulateCacheStatsAndSize`, it doesn\u0027t accumulate size. Sorry for the bad suggestion.\n\nSomething else that could work is this:\n\n```\nsize_t cacheSize \u003d 0;\nfor (RefCountedDescriptorPoolHelper *pool : mDescriptorPools)\n{\n    cacheSize +\u003d pool-\u003eget().getTotalCacheSize();\n}\nCacheStats adjusted \u003d mCacheStats;\nadjusted.setSize(cacheSize);\naccum-\u003eaccumulateCacheStats(cacheType, adjusted);\n```",
      "revId": "d468c584dec2335675aa38e441188408795213e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}