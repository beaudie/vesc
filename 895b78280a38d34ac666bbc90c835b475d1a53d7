{
  "comments": [
    {
      "key": {
        "uuid": "6aa4dd19_924b2b57",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "Could you split this change? I mostly want it to be clear which feature the test suppression removals correspond to.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47c1d7cd_71cbd212",
        "filename": "src/libANGLE/Surface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 160,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "This variable is used in many places throughout ANGLE. Should finalizedRenderTargetFormat always replace renderTargetFormat when querying the format?\n\nIf so, I would suggest making the change safer by introducing `requestedRenderTargetFormat` (or whatever makes sense) to denote the \"input\" render target format, and then calculate `renderTargetFormat` based on that (instead of introducing `finalizedRenderTargetFormat`).\n\nThat way, whatever code is using `renderTargetFormat` can remain as is, and any code that sets the initial value can also be made more obvious by indicating that it\u0027s requesting this format, not dictating it.\n\nIf you could make it such that code that\u0027s supposed to set the requested format cannot set renderTargetFormat by accident (resulting in compile error) and code that\u0027s supposed to read the finalized format cannot read the requested one by accident (again, compile error), that would be cherry on top!",
      "range": {
        "startLine": 160,
        "startChar": 61,
        "endLine": 160,
        "endChar": 79
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c6ab693_2af48907",
        "filename": "src/libANGLE/formatutils.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "G",
      "range": {
        "startLine": 58,
        "startChar": 20,
        "endLine": 58,
        "endChar": 21
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22aa0a6a_6177eb27",
        "filename": "src/libANGLE/formatutils.h",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "nit: if you call `GetNonLinearFormat` here, you don\u0027t need to pay for in the other (more common) cases.",
      "range": {
        "startLine": 95,
        "startChar": 46,
        "endLine": 95,
        "endChar": 61
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "203a225d_dae515df",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 716,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "It looks like this extension is only supported on AMD/Windows. We do have one bot config that runs tests on this configuration, but I\u0027m guessing the dEQP tests you unsuppressed are not testing this, so this change isn\u0027t being tested at all. (I\u0027m not sure if our AMD card on the bot supports this extension either)\n\nDo you mind adding a few end2end tests to make sure this works as intended and we don\u0027t introduce regressions in the future?",
      "range": {
        "startLine": 716,
        "startChar": 23,
        "endLine": 716,
        "endChar": 66
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37d49606_7d26c51d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 459,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "Personal pet peeve: both parentheses are redundant",
      "range": {
        "startLine": 459,
        "startChar": 11,
        "endLine": 459,
        "endChar": 13
      },
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa82a352_c70ed7e0",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "Should this really generate an error? Can it just return angle::Result::Incomplete? Isn\u0027t the returned EGL_BAD_MATCH enough feedback to the application?",
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aab8b0b6_08b04f15",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "Nice feature :)",
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42411c1f_a8d9b145",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-13T17:39:04Z",
      "side": 1,
      "message": "I strongly advise against putting the return here. ANGLE_VK_TRY does it because it\u0027s so ubiquitous (and also kind of is emulating exceptions), but in this case the caller should do `return result` on its own.",
      "revId": "895b78280a38d34ac666bbc90c835b475d1a53d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}