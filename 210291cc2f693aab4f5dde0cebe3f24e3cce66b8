{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c984ff7_09b6d74a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-11-06T14:27:59Z",
      "side": 1,
      "message": "PTAL again. This is a simpler fix than expected. This will significantly improve Adobe Illustrator\u0027s performance as well as reducing the needs for vertex conversion in general.",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f125e227_67d4beb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-06T20:26:12Z",
      "side": 1,
      "message": "Drive by: what was the format and alignment in that application? I see we have a similar restriction in the Vulkan backend, but according to the comment mainly for non-byte-aligned channels (like RGB10A2) so we may be able to similarly lift a restriction there.",
      "parentUuid": "1c984ff7_09b6d74a",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddda02bf_caf5c6a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-06T20:38:24Z",
      "side": 1,
      "message": "Oh, and please add a test that exercises the use case of the application.",
      "parentUuid": "f125e227_67d4beb8",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2355e637_8e1dac1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-11-06T20:45:48Z",
      "side": 1,
      "message": "Awesome - thank you Quyen for digging into this!\n\nAs Shabi asked, please do add a couple of small tests under src/tests/gl_tests/ exercising these code paths.\n\nRegarding the crashes in the Metal driver on the AMD Mac Pro - can you add a driver bug workaround for this over-alignment into mtl_features.json, and turn it on in DisplayMtl.mm for isAMDBronzeDriver()?\n\nlgtm",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aace0908_307809ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-11-06T21:00:28Z",
      "side": 1,
      "message": "The application uses 2 components GL_FLOAT for a vertex attribute and binds to offset \u003d 28.\nPreviously metal backend would require the offset to be multiple of 8 bytes (2 floats). 28 % 8 !\u003d 0 so we had to convert. But apparently this restriction is not true due to poor metal docs (I don\u0027t see any doc stating the required alignment of attributes). There are documented alignments but they are only for the case when you fetch the data manually from buffer. The data must be aligned to the value\u0027s type. For example, fetching `vec2` value from a buffer, the offset must be 8 bytes aligned. But this doesn\u0027t mean the rules applied to vertex input provided automatically by vertex attribute descriptor.\n\nThere is also documented rule for attribute\u0027s relative offsets [1]. But there is no rule recorded for buffer offset AFAICU.\n\nI believe vulkan backend doesn\u0027t have the same issue. IIUC currently the vulkan backend only requires the offset to be aligned to component\u0027s size. So `vec2` only needs 4 bytes alignment which 28 satisfies.\n\n[1] https://developer.apple.com/documentation/metal/mtlvertexattributedescriptor/1515785-offset?language\u003dobjc",
      "parentUuid": "ddda02bf_caf5c6a4",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdece2eb_67b6a674",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-11-06T21:05:36Z",
      "side": 1,
      "message": "Ah yes, I just noticed we have `componentAlignmentMask` to save us there:\n\n```\n    GLuint mask          \u003d angleFormat.componentAlignmentMask;\n    if (mask !\u003d std::numeric_limits\u003cGLuint\u003e::max())\n    {\n        return ((totalOffset \u0026 mask) \u003d\u003d 0 \u0026\u0026 (binding.getStride() \u0026 mask) \u003d\u003d 0);\n    }\n    else\n    {\n        // To perform the GPU conversion for formats with components that aren\u0027t byte-aligned\n        // (for example, A2BGR10 or RGB10A2), one element has to be placed in 4 bytes to perform\n        // the compute shader. So, binding offset and stride has to be aligned to formatSize.\n        unsigned int formatSize \u003d angleFormat.pixelBytes;\n        return (totalOffset % formatSize \u003d\u003d 0) \u0026\u0026 (binding.getStride() % formatSize \u003d\u003d 0);\n    }\n```\n\nWith `componentAlignmentMask` set to UINT_MAX, we require alignment to `pixelBytes`, but that\u0027s not the case for R32G32_FLOAT.",
      "parentUuid": "aace0908_307809ce",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b63eabfc_1be3974e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-11-07T11:42:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdece2eb_67b6a674",
      "revId": "210291cc2f693aab4f5dde0cebe3f24e3cce66b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}