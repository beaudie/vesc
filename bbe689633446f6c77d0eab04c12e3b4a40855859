{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4b3fcb96_23964ab4",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-23T19:19:09Z",
      "side": 0,
      "message": "It looks to me like this was resulting in ANGLE declaring ES3.1 support even if `getMaxSupportedESVersion` returned ES3 or ES2, right?! That\u0027s probably the cause of the new failures. It\u0027d be interesting to know what\u0027s stopping SwiftShader from supporting ES3.1. For Pixel4, no hope I guess.\n\nBut anyway, we could at least move the `|| exposeNonConformantExtensionsAndVersions` to the exact features that are causing trouble so we know where to look for in the future to fix them.",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9c3d7fc_f91cc907",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-10-23T23:58:42Z",
      "side": 0,
      "message": "If `getMaxSupportedESVersion()` is less than ES3.1, ANGLE should not declare support for it, since `LimitVersionTo()` takes the least of the two versions.\n\nSwS is capped to ES3.1 here due to lack of geometry and tessellation shader extensions. I have removed the non-conformant flag check from this function, since `getMaxSupportedESVersion()` already uses it to advertise ES 3.2.\n\nIt looks like some tests also check for geometry shaders for further testing (e.g., `dEQP-GLES3.functional.negative_api.vertex_array.draw_elements`). It looks like when SwS reports that this extension is not available, it runs more code that results in error.\n\n\u003e But anyway, we could at least move the || exposeNonConformantExtensionsAndVersions to the exact features that are causing trouble so we know where to look for in the future to fix them.\n\nDo you mean enabling the extensions above using this flag in `ensureCapsInitialized()`?",
      "parentUuid": "4b3fcb96_23964ab4",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e837565_c074ea38",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-24T01:45:39Z",
      "side": 0,
      "message": "Oh right, totally missed that it\u0027s not just straight out returning 3.1.\n\nOk no the problem is the opposite now? `getMaxSupportedESVersion` is returning 3.2 for swiftshader now because `exposeNonConformantExtensionsAndVersions` is set. You should be able to remove the `if (geom_tess)` check here and instead also remove `exposeNonConformantExtensionsAndVersions` from this:\n\n```\n    if (!mFeatures.exposeNonConformantExtensionsAndVersions.enabled \u0026\u0026\n        !CanSupportGLES32(mNativeExtensions))\n    {\n        maxVersion \u003d LimitVersionTo(maxVersion, {3, 1});\n    }\n```\n\nSo we drop to 3.1 without GLES3.2 extensions unconditionally. _Then_ if there are devices where we want to expose 3.2 despite limitations, we have to expose the right extensions with `exposeNonConformantExtensionsAndVersions` in their conditions (like geometry/tessellation have for example in vk_caps_utils.cpp)",
      "parentUuid": "b9c3d7fc_f91cc907",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a6ffeb2_16284db9",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-10-26T01:29:06Z",
      "side": 0,
      "message": "Enabling the missing extensions in `vk_caps_utils.cpp`, using the non-conformant flag, results in errors on SwS. Do you mean enabling those missing extensions unconditionally? Should we create the 3.2 context with the flag, but those features remain disabled?",
      "parentUuid": "2e837565_c074ea38",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2add7f5b_6d96caa3",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-26T01:54:06Z",
      "side": 0,
      "message": "I wasn\u0027t expecting we\u0027d enable something like geometry/tessellation, but more like something that _works_ on SwiftShader but is missing features to support corner case scenarios.\n\nI think this discussion is converging with the other comment. SwiftShader should result in ES3.1 contexts, and you shouldn\u0027t need to force enable any of these (maybe one of the conditions of gpuShader5 could be `|| exposeNonConformant` for the sake of traces). The ES3.2 tests should not run for SwiftShader at all.",
      "parentUuid": "0a6ffeb2_16284db9",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f1dadb8_4079f4bf",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4394,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-10-29T01:20:13Z",
      "side": 0,
      "message": "The ES 3.2 tests for SwS have been skipped.\nSince there are different missing extensions for each platform, does adding a flag check in `DisplayVk::getMaxSupportedESVersion()` work for the traces (called during context creation validation)? Or adding the `|| exposeNonConformant` condition for each missing extension per platform?",
      "parentUuid": "2add7f5b_6d96caa3",
      "revId": "bbe689633446f6c77d0eab04c12e3b4a40855859",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}