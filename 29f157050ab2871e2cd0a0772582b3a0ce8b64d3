{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fdecda82_950da058",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T19:48:10Z",
      "side": 1,
      "message": "Test if EGL_SINGLE_BUFFER with eglCreateWindowSurface passes with Vulkan.",
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "747ef0b2_260ce209",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T20:28:43Z",
      "side": 1,
      "message": "Reply",
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bb41c3f_7abe04af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T20:41:07Z",
      "side": 1,
      "message": "Question",
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "110f834b_219c5eda",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1059,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-28T20:21:15Z",
      "side": 1,
      "message": "Please avoid this result. If this is an error, please use angle::Result::stop.  Better yet, use ANGLE_TRY(...) on setRenderBuffer.",
      "range": {
        "startLine": 1059,
        "startChar": 34,
        "endLine": 1059,
        "endChar": 44
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42e3836c_e4e5f36f",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1059,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T20:28:43Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "110f834b_219c5eda",
      "range": {
        "startLine": 1059,
        "startChar": 34,
        "endLine": 1059,
        "endChar": 44
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c60f45d_aeaf8484",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-28T20:21:15Z",
      "side": 1,
      "message": "This flag seems a bit wrong; this is not an extension. Why not check for mutableRenderBufferKHR instead?",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cad3cc7_56908294",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T20:28:43Z",
      "side": 1,
      "message": "Correct not an extension. I needed a feature flag, the source that enables is only feature that says SHARED_PRESENT is supported. Best I could think of.\n\nMutabel_render_buffer is different - change to SINGLE, after Surface is created. Creating with SINGLE is a standard EGL spec that was never enabled in ANGLE. Doesn\u0027t even have an error for it.",
      "parentUuid": "7c60f45d_aeaf8484",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ecaef9_82789156",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-28T20:37:52Z",
      "side": 1,
      "message": "Ok if it\u0027s a core feature of EGL, then you should need this `if`. If you have to, you can add a feature in FrontendFeatures.h and initialize it in the backend. Similar to `enableCompressingPipelineCacheInThreadPool` for example.",
      "parentUuid": "5cad3cc7_56908294",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2451924b_1f482136",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-28T20:41:07Z",
      "side": 1,
      "message": "This is dependent on Vulkan supporting SHARED_PRESENT mode(s). Does that work with FrontendFeatures? I don\u0027t think I have touched those yet.",
      "parentUuid": "43ecaef9_82789156",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a95470_9502e17b",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-28T20:43:32Z",
      "side": 1,
      "message": "Yeap. `grep` for `enableCompressingPipelineCacheInThreadPool`",
      "parentUuid": "2451924b_1f482136",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "882c955b_9cdc56f0",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1540133
      },
      "writtenOn": "2022-03-30T15:48:33Z",
      "side": 1,
      "message": "Relevant section of the EGL spec\u0027s says:\n\n\u003e Client APIs may not be able to respect the requested rendering buffer.  \n\u003e To determine the actual buffer that a context will render to by default, \n\u003e call eglQueryContext with attribute EGL_RENDER_BUFFER.\n\nIt isn\u0027t an EGL_BAD_MATCH case just because EGL_SINGLE_BUFFER isn\u0027t supported. This chunk should just be:\n  case EGL_SINGLE_BUFFER:\n    break;",
      "parentUuid": "12a95470_9502e17b",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ecc90e2_d93df60f",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2448,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-31T16:18:11Z",
      "side": 1,
      "message": "yes. Will do.",
      "parentUuid": "882c955b_9cdc56f0",
      "range": {
        "startLine": 2448,
        "startChar": 47,
        "endLine": 2448,
        "endChar": 89
      },
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "499a9756_310bae5f",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1594,
      "author": {
        "id": 1540133
      },
      "writtenOn": "2022-03-30T16:09:54Z",
      "side": 1,
      "message": "Should this have a test for EGL_RENDER_BUFFER here?\n  EGLint actualRenderbuffer;\n  EXPECT_EGL_TRUE(eglQueryContext(mDisplay, context, EGL_RENDER_BUFFER, \u0026actualRenderbuffer);\n  EXPECT_EGL_TRUE(actualRenderbuffer \u003d\u003d EGL_SINGLE_BUFFER);\nAlthough it\u0027s not an error per-se if this isn\u0027t true (it should just indicate that FBR is supported or not, and carry on as EGL_BACK_BUFFER if it isn\u0027t).",
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5aaac1c1_a49bfd1a",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1594,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-03-31T16:18:11Z",
      "side": 1,
      "message": "Yes, the test need some debugging. Thanks for the check. The glReadPixels isn\u0027t going to work here either, need a visual check.\n\nI added some code to get the render buffer.",
      "parentUuid": "499a9756_310bae5f",
      "revId": "29f157050ab2871e2cd0a0772582b3a0ce8b64d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}