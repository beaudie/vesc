{
  "comments": [
    {
      "key": {
        "uuid": "8ced5ef4_746eaa44",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 235,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-14T03:43:07Z",
      "side": 1,
      "message": "Not the EXT actually, but the R!\n\n(Personally I prefer Ext, but ANGLE is doing UPPERCASE acronyms)",
      "range": {
        "startLine": 235,
        "startChar": 14,
        "endLine": 235,
        "endChar": 15
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92eb30c4_fc397e0f",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 235,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ced5ef4_746eaa44",
      "range": {
        "startLine": 235,
        "startChar": 14,
        "endLine": 235,
        "endChar": 15
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cebd444b_2491a645",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 280,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "I had to double-check, but have confirmed that this constructor does value-initialization of the array - important to never expose uninitialized data.",
      "range": {
        "startLine": 280,
        "startChar": 20,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9cd1ce1_78cc3a8c",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 280,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done. Replaced with raw pointer in scoped class, memset at allocation.",
      "parentUuid": "cebd444b_2491a645",
      "range": {
        "startLine": 280,
        "startChar": 20,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6594dcc_edc14c14",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 313,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "This memcpy is a little problematic. If the user used the GL_PACK_ROW_LENGTH / GL_PACK_SKIP_ROWS / GL_PACK_SKIP_PIXELS parameters to read back a sub-rectangle of the framebuffer, they would expect the data that wasn\u0027t read back to be untouched.\n\nThe way this workaround is currently structured, it will overwrite all of the data before the first pixel read back from the driver, and can also overwrite other data at the beginning and end of rows in the middle of the image.\n\nThe safest way to express this workaround would be to first read back into a temporary buffer, and then copy from that temporary buffer into the user\u0027s buffer, row by row, not touching any pixels the user didn\u0027t intend to touch.\n\nOne way to structure this would be to write a class like \"ScopedExtTextureNorm16ReadbackWorkaround\" and pass in its constructor all of the information needed in this function. So at call sites below like readPixelsRowByRow and readPixelsAllAtOnce:\n\n  ScopedExtTextureNorm16ReadbackWorkaround workaround(context, area, originalReadFormat, ...);\n  GLubyte* readBackPixels \u003d workaround.pixels();  // This would return either an internally-allocated temporary buffer, or the user\u0027s original pixels, depending on whether the workaround is actually needed\n  // Rest of body of readPixelsRowByRow or readPixelsAllAtOnce\n  return workaround.maybeDoWorkaround(); // either does the workaround, or skips it and returns angle::Result::Continue\n\nThen the destructor of the class would clean up the temporary buffer, if necessary (or just use unique_ptr in the class like you currently do and it\u0027ll happen automatically).\n\nThese are just a couple of ideas for structuring the workaround. Let\u0027s discuss more offline if you like. I think it\u0027s important to get these cases right and expand out the tests because we don\u0027t want to have to revisit this code later.",
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc364599_cb122b81",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 313,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-14T03:43:07Z",
      "side": 1,
      "message": "Looking at it again, yes, this also seems more efficient. Effectively, instead of reading into the user buffer, then rearrange into temp and then copy back to user buffer, you can just read into temp, then rearrange into user buffer.",
      "parentUuid": "a6594dcc_edc14c14",
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a69b48e2_275414ec",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 11
      },
      "lineNbr": 313,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc364599_cb122b81",
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67890eb7_83a4ee16",
        "filename": "src/libANGLE/renderer/gl/formatutilsgl.cpp",
        "patchSetId": 11
      },
      "lineNbr": 665,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "Is it verified anywhere that the GL_IMPLEMENTATION_COLOR_READ_FORMAT advertised by the driver will be GL_RG for these RG16 textures, and GL_RED for these R16 textures? This isn\u0027t guaranteed by the specification. Probably the worst thing that would happen if the driver doesn\u0027t support it is that a GL error will be generated by ReadPixels, which will probably be surfaced up to the application, but it would be ideal if it were caught during ANGLE\u0027s validation of the ReadPixels call.",
      "range": {
        "startLine": 665,
        "startChar": 9,
        "endLine": 665,
        "endChar": 29
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00a22821_18a7ab23",
        "filename": "src/libANGLE/renderer/gl/formatutilsgl.cpp",
        "patchSetId": 11
      },
      "lineNbr": 665,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done. By adding ANGLE_CHECK to make sure readFormat being used is one of GL_RED, GL_RG, GL_RGBA. Otherwise GL_INVALID_OPERATION is thrown.",
      "parentUuid": "67890eb7_83a4ee16",
      "range": {
        "startLine": 665,
        "startChar": 9,
        "endLine": 665,
        "endChar": 29
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6d374d_93d4dbd5",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4166,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "It would be better encapsulated if this test issued the glPixelStorei calls rather than the caller. What about refactoring it to do that?",
      "range": {
        "startLine": 4166,
        "startChar": 54,
        "endLine": 4166,
        "endChar": 65
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9eeec94_1647ead0",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4166,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a6d374d_93d4dbd5",
      "range": {
        "startLine": 4166,
        "startChar": 54,
        "endLine": 4166,
        "endChar": 65
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04de92e2_1b4a5435",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4170,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "typo: components",
      "range": {
        "startLine": 4170,
        "startChar": 27,
        "endLine": 4170,
        "endChar": 37
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f843194_e57fb091",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4170,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04de92e2_1b4a5435",
      "range": {
        "startLine": 4170,
        "startChar": 27,
        "endLine": 4170,
        "endChar": 37
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3abde4c8_f41c598e",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4205,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "This test should verify that data outside the read-back pixel rectangle is untouched. This is important to confirm the behavior of ReadPixels with sub-rectangles as described above.",
      "range": {
        "startLine": 4205,
        "startChar": 16,
        "endLine": 4205,
        "endChar": 25
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c008d9_85fb3219",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4205,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3abde4c8_f41c598e",
      "range": {
        "startLine": 4205,
        "startChar": 16,
        "endLine": 4205,
        "endChar": 25
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afaafc10_3dbbfade",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4213,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "testNorm16Render doesn\u0027t seem to be called any more. It used to be called by the TextureNorm16Test but isn\u0027t called by any of the newly refactored tests.",
      "range": {
        "startLine": 4213,
        "startChar": 9,
        "endLine": 4213,
        "endChar": 25
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d5a215_3636349e",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4213,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Typo. It should be called. Renamed to testNorm16RenderAndReadPixels",
      "parentUuid": "afaafc10_3dbbfade",
      "range": {
        "startLine": 4213,
        "startChar": 9,
        "endLine": 4213,
        "endChar": 25
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5342996b_2a767d9f",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4294,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-14T03:43:07Z",
      "side": 1,
      "message": "Can be moved inside testNorm16Texture.",
      "range": {
        "startLine": 4292,
        "startChar": 0,
        "endLine": 4294,
        "endChar": 71
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7871e2e_b3ecfe5e",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4294,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5342996b_2a767d9f",
      "range": {
        "startLine": 4292,
        "startChar": 0,
        "endLine": 4294,
        "endChar": 71
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30b13f81_fec4d673",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4324,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2019-12-14T00:39:43Z",
      "side": 1,
      "message": "Can this just use ANGLE_SKIP_TEST_IF for this situation? Here and below.",
      "range": {
        "startLine": 4324,
        "startChar": 9,
        "endLine": 4324,
        "endChar": 33
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa3f719a_d7d029c6",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4324,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-14T03:43:07Z",
      "side": 1,
      "message": "You can do ANGLE_SKIP_TEST_IF instead. Same with the tests below.",
      "range": {
        "startLine": 4324,
        "startChar": 4,
        "endLine": 4324,
        "endChar": 36
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d46ea7_a26077df",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4324,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa3f719a_d7d029c6",
      "range": {
        "startLine": 4324,
        "startChar": 4,
        "endLine": 4324,
        "endChar": 36
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e984ae5_29d002eb",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4324,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30b13f81_fec4d673",
      "range": {
        "startLine": 4324,
        "startChar": 9,
        "endLine": 4324,
        "endChar": 33
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "347ff7c1_02f0175c",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4389,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-14T03:43:07Z",
      "side": 1,
      "message": "testNorm16Render as ken pointed out.",
      "range": {
        "startLine": 4389,
        "startChar": 4,
        "endLine": 4389,
        "endChar": 21
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d8dda5a_3eec5b25",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 11
      },
      "lineNbr": 4389,
      "author": {
        "id": 1328182
      },
      "writtenOn": "2019-12-19T02:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "347ff7c1_02f0175c",
      "range": {
        "startLine": 4389,
        "startChar": 4,
        "endLine": 4389,
        "endChar": 21
      },
      "revId": "3c4b95607c46ebbda6dd58ba72501481c7fe524f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}