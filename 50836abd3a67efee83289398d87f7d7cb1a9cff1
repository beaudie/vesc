{
  "comments": [
    {
      "key": {
        "uuid": "bcf610b9_3db1295e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2951,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-10-21T16:16:04Z",
      "side": 1,
      "message": "It\u0027s been a while since I watched this function in the debugger.  As I recall, this function/loop can run multiple times before the commands are flushed.  Is there any problem with calling this that many times?",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd55b2c9_400b3806",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2951,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-22T12:33:43Z",
      "side": 1,
      "message": "It will currently store redundant references if the app triggers state changes multiple times using the same Textures/Samplers. This is a performance issue. It should still function correctly. The refcount will go up twice and then decremented twice.\n\nI do have ideas on how to improve this. We can use a bitmask instead of a refcount to associate which Contexts are currently tracking a particular resource. It\u0027s a bit tricky. I can follow up in a design doc. For now I didn\u0027t file an issue or leave a TODO.",
      "parentUuid": "bcf610b9_3db1295e",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f3a075_2f2fa98a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3120,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-10-21T16:16:04Z",
      "side": 1,
      "message": "Do you need to call this if !mSampler-\u003evalid()?  Or do you need to call it anyway to help with the command graph?",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a96631a_e0c22c4d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3120,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-22T12:33:43Z",
      "side": 1,
      "message": "We do no-op empty adds currently already. See CollectGarbage (check for valid) in RendererVk.h and the empty check in collectGarbageAndReinit.",
      "parentUuid": "a8f3a075_2f2fa98a",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b32c395c_51864a44",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-10-21T17:30:44Z",
      "side": 1,
      "message": "What uniform update would you be performing here?\n\nWhat error are you expecting, but is being hidden?",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27e1cd24_c8cf795b",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-22T12:33:43Z",
      "side": 1,
      "message": "I\u0027m not doing a glUniform1i call to set the texture index. I found that setting the Uniform1i would trigger some kind of state update that would cause the test to not trip up the bug. Note that in GL the sampler units are defaulted to be 1, 2, 3, 4, etc. See ProgramState::updateActiveSamplers.",
      "parentUuid": "b32c395c_51864a44",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "256b468e_be8a5fc8",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 298,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-10-21T17:30:44Z",
      "side": 1,
      "message": "Checking that garbage collection occurred is a difficult thing to verify, since there isn\u0027t a good way to check for the absence of something.   Digging around a little, it seems any GL queries about the texture would just be state types of things that are updated immediately by the front-end when the texture is deleted.\n\nIf you issue a drawQuad() or glReadPixels() call here, would the front-end catch that there is no texture bound and fail immediately, or would an error be generated by the back-end that signifies the texture was deleted correctly?",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aee279a8_bf0bb865",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 298,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-22T12:33:43Z",
      "side": 1,
      "message": "This test is indeed pretty finicky and that\u0027s a weakness. It did catch the error with the current code so it\u0027s probably better than no test at all.\n\n\u003e If you issue a drawQuad() or glReadPixels() call here, would the front-end catch that there is \n\u003e no texture bound and fail immediately, or would an error be generated by the back-end that\n\u003e signifies the texture was deleted correctly?\n\ndrawQuad would complete successfully by binding an \"incomplete\" black texture. readPixels would succeed as well since it just reads back the pixel data of the surface. Detecting when a driver \"really\" deletes a Texture is tricky. It\u0027s also technically conformant to defer deleting textures even when they should be freed.",
      "parentUuid": "256b468e_be8a5fc8",
      "revId": "50836abd3a67efee83289398d87f7d7cb1a9cff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}