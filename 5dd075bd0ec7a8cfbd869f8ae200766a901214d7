{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9dca6b3a_476b3b9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-24T03:31:47Z",
      "side": 1,
      "message": "typo: underlying",
      "range": {
        "startLine": 11,
        "startChar": 22,
        "endLine": 11,
        "endChar": 31
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7666ac3d_e71a61c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 14
      },
      "lineNbr": 11,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dca6b3a_476b3b9f",
      "range": {
        "startLine": 11,
        "startChar": 22,
        "endLine": 11,
        "endChar": 31
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e1af41e_5801384a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-24T03:31:47Z",
      "side": 1,
      "message": "Complicated! Is the plan to eventually obviate vk::DynamicBuffer in favor of this? There is probably some room for clean up too, to avoid mistakes regarding offset when suballocation is used or not.",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68be2943_311b8696",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-24T05:07:31Z",
      "side": 1,
      "message": "Mostly right. We need to gradually switch and more clean ups on the way. This CL mostly lays ground and switch BufferVk to sub-allocations",
      "parentUuid": "8e1af41e_5801384a",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c74ecc_bfbcd371",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-24T03:31:47Z",
      "side": 1,
      "message": "Can you clarify? Aren\u0027t you asking the sub-allocator to use the memory type we need?",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ee452f3_7a20c6b1",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-24T17:12:52Z",
      "side": 1,
      "message": "+1, what kind of situation would need a fallback? Seems like this is working around a bug.",
      "parentUuid": "f7c74ecc_bfbcd371",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48a5542e_c33999c8",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "Right now the sub-allocator is only try to allocate the requested memoryType. The original code before this CL will try other compatible memoryTypes when this fail. Eventually we should also figure out the other memoryType to try when one given memoryType failed to allocate, but for now I am doing this as a temporary workaround just in case we are hitting this fallback path. \n\nYes, eventually this should go away. I can create a bug to track this todo item.",
      "parentUuid": "2ee452f3_7a20c6b1",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f99439cd_530fedf3",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "https://issuetracker.google.com/208323792",
      "parentUuid": "48a5542e_c33999c8",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fad25610_7c8a2bbc",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "What happens if we remove it now? Maybe try it out and see if it breaks anything. Making this a TODO usually means it\u0027ll never get done.",
      "parentUuid": "f99439cd_530fedf3",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c898a0b6_be09a4f0",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1210,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "Done. Removed.",
      "parentUuid": "fad25610_7c8a2bbc",
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52c1730b_4be8ec70",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-24T03:31:47Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 125,
        "startChar": 11,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2036d70a_d61ccaff",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 14
      },
      "lineNbr": 125,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-30T03:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52c1730b_4be8ec70",
      "range": {
        "startLine": 125,
        "startChar": 11,
        "endLine": 125,
        "endChar": 20
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e555960_39961e18",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4165,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-24T03:31:47Z",
      "side": 1,
      "message": "Can you please make the usage of buffer barriers instead of global barriers a separate CL? I don\u0027t believe there\u0027s any real gain from it on the GPU and it may be a waste of CPU cycles. We can try and enable that once we can do measure its impact in isolation.",
      "range": {
        "startLine": 4157,
        "startChar": 0,
        "endLine": 4165,
        "endChar": 9
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498e6f06_13124f2c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4165,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-29T21:54:20Z",
      "side": 1,
      "message": "1) If you still track buffer read/write on the master buffer block, you are going to introduce tons of unnecessary read/write barrier. For example, sub-range A is reading and sub-range B is writing, and you will detect RW hazard. So you do want to track the read/write in the sub-range level instead of master buffer.\n\n2) Even if you track read/write access at sub-range level, you could still generate global barrier if you want. The problem with that is you will have lots of sync-val failures because the global barrier we send down does not have range information and validation layer assumes every access is for entire buffer. \n\nUses bufferMemoryBarrier solves most of validation issues (with exception of some todos in validation layer as I explained in the syncvail skip code.) So this is required for this CL, unless you want to disable all buffer related syncval which is somethinh I try to keep (it does help us find bugs etc).",
      "parentUuid": "2e555960_39961e18",
      "range": {
        "startLine": 4157,
        "startChar": 0,
        "endLine": 4165,
        "endChar": 9
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1966221_4a1e88ac",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4165,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-01T03:23:17Z",
      "side": 1,
      "message": "I agree we should track this at suballocation level. My suggestion was to split this change from global-\u003ebuffer barriers. When syncval is fixed, we can potentially revert that if it improves anything.",
      "parentUuid": "498e6f06_13124f2c",
      "range": {
        "startLine": 4157,
        "startChar": 0,
        "endLine": 4165,
        "endChar": 9
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "251c1369_4973ed82",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4165,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:09:19Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "b1966221_4a1e88ac",
      "range": {
        "startLine": 4157,
        "startChar": 0,
        "endLine": 4165,
        "endChar": 9
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "599a6b09_9a1110cb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 14
      },
      "lineNbr": 4165,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-03T21:37:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "251c1369_4973ed82",
      "range": {
        "startLine": 4157,
        "startChar": 0,
        "endLine": 4165,
        "endChar": 9
      },
      "revId": "5dd075bd0ec7a8cfbd869f8ae200766a901214d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}