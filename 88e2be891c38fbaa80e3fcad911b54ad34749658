{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "36c6bada_08cab184",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-12-22T18:17:45Z",
      "side": 1,
      "message": "I did an initial/partial review (e.g. I didn\u0027t try to follow the SPIR-V changes) and it LGTM.",
      "revId": "88e2be891c38fbaa80e3fcad911b54ad34749658",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4e19bd9_4fccc3a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-12-22T18:26:01Z",
      "side": 1,
      "message": "Overall the change itself looks ok to me. My main concern doing in spir-v level is hard to debug. Its like doing it in C versus assembly. If possible, you want to do it in C and let compiler handle for you, avoid coding in assembly. So IMO, using specialization constant is a better choice that has less work (although yu already did spir-v work), better main tenability. The \"unnecessary modifications to early stage\" part is not a real issue, since they will get removed by compiler. The only real issue is the shader size, which is also not a big issue.",
      "revId": "88e2be891c38fbaa80e3fcad911b54ad34749658",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afb376b1_bfd01813",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-12-22T18:36:32Z",
      "side": 1,
      "message": "I agree with Charlie.   I\u0027d much prefer using specialization constants that are easier to debug/maintain.   Especially with all of the corner cases related to pre-rotation that have been exposed, debugging/maintaining/improving this SPIR-V will essentially be impossible, or at least take much longer than it would with a higher level language.",
      "parentUuid": "e4e19bd9_4fccc3a3",
      "revId": "88e2be891c38fbaa80e3fcad911b54ad34749658",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71990f0a_f4208f2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-12-22T19:00:15Z",
      "side": 1,
      "message": "I\u0027d like to argue more for doing this in SPIR-V. First, don\u0027t be discouraged by the size of changes in glslang_wrapper_utils.cpp, most of the change is for SPIR-V generation functions, which should eventually be autogenerated. The only real change here is the snippet of code that says (which is trivial if you actually attempt to read it ðŸ˜Š):\n\n    writeAccessChain(positionPointerId, mVec4OutTypePointerId, mOutputPerVertexId, mInt0Id);\n    writeLoad(positionId, mVec4Id, positionPointerId);\n    writeCompositeExtract(xId, mFloatId, positionId, 0);\n    writeCompositeExtract(yId, mFloatId, positionId, 1);\n    writeCompositeExtract(zId, mFloatId, positionId, 2);\n    writeCompositeExtract(wId, mFloatId, positionId, 3);\n\n    uint32_t rotatedXId \u003d 0;\n    uint32_t rotatedYId \u003d 0;\n    preRotateXY(xId, yId, \u0026rotatedXId, \u0026rotatedYId);\n\n    writeCompositeConstruct(rotatedPositionId, mVec4Id, {rotatedXId, rotatedYId, zId, wId});\n    writeStore(positionPointerId, rotatedPositionId);\n\nwhich is dramatically simpler than the code required to generate all these in the translator and handling of specialization constants.\n\n---\n\nLet me paint the bigger picture. First, see the next change in this chain. With a simple:\n\n    writeFAdd(zPlusWId, mFloatId, zId, wId);\n    writeFMul(*correctedZIdOut, mFloatId, zPlusWId, mFloatHalfId);\n\nit\u0027s solving the z transformation problem, which would have otherwise needed even more translator code and specialization constants (especially after VK_EXT_depth_clip_control is done).\n\nMost importantly, I soon need to move transform feedback related code generation to SPIR-V for multiple reasons (early compilation of shaders, faster compilation by moving to SPIR-V generation by the translator, reducing memory by not having to store shader sources etc). Currently, we use a macro (@@ XFB-OUT @@) that gets replaced in the code at the right spot. Without the macro (because we don\u0027t want to modify the source anymore), finding the \"right spot\" itself is a challenge.\n\nOn the other hand, handling gl_Position changes in SPIR-V has the benefit that all these can be done in the same spot, in correct order, and share SPIR-V code:\n\n- Before end of main() or before EmitVertex():\n * Generate xfb related code for gl_Position\n * Generate rotation correction for gl_Position\n * Generate z correction for gl_Position\n\nAnd finally, note that every Vulkan driver does everything it needs to do in SPIR-V (or lower level). It\u0027s not really any less maintainable than our translator code.\n\n---\n\nI concede that doing the rotation stuff for FS is better left under spec consts.",
      "parentUuid": "afb376b1_bfd01813",
      "revId": "88e2be891c38fbaa80e3fcad911b54ad34749658",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "816dfcaa_740ce1a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-12-22T19:41:06Z",
      "side": 1,
      "message": "That is also the exact point argues the other way. Its the chain of CLs that will pile more and more onto spir-v transform, if we pick this direction. The question to ask is if the follow on changes can do in shader instead (for the same reason)? Can you implement XFB in shader and controlled by specialization constant as well? No doubt you are one of the top experts on spir-v, but most people won\u0027t really able to decode it easily. So unless there is material runtime perf benefit, I would vote for modification at GLSL level.",
      "parentUuid": "71990f0a_f4208f2a",
      "revId": "88e2be891c38fbaa80e3fcad911b54ad34749658",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}