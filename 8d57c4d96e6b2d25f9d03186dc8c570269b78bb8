{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eca02a5e_c39c22f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-12-10T04:02:50Z",
      "side": 1,
      "message": "I think this needs to have a capital B, otherwise the bug number is not clickable.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 3
      },
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa1751cd_14ef11e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-12-10T20:13:20Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "eca02a5e_c39c22f6",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 3
      },
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ed6bcbd_91e5d7f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2021-12-10T04:02:50Z",
      "side": 1,
      "message": "Not familiar with this code.",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d1daab9_317f9193",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-10T04:06:04Z",
      "side": 1,
      "message": "If you aren\u0027t doing SPIR-V anymore, you could just ASSERT this.",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f50f1103_6f882434",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-12-10T20:07:25Z",
      "side": 1,
      "message": "assert that it\u0027s empty. If we expect empty then should I just not call it?",
      "parentUuid": "6d1daab9_317f9193",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2794fcc1_785b35d7",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-12-10T20:08:45Z",
      "side": 1,
      "message": "To be clear, what I\u0027m asking is, should the code just be\n\nstd::string ShaderMtl::getDebugInfo() const\n{\n    return mState.getCompiledBinary().empty() ? \"\" : \"\u003cbinary blob\u003e\";\n}",
      "parentUuid": "f50f1103_6f882434",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10ed2124_fb61ab8e",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-10T23:34:43Z",
      "side": 1,
      "message": "Hoping that we can provide the translated shader source on the direct-to-Metal backend. It\u0027ll be helpful.",
      "parentUuid": "2794fcc1_785b35d7",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fefabc7_fdd636b7",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-12-13T18:36:00Z",
      "side": 1,
      "message": "I wrote a test that it\u0027s getting the translated shader. Not sure I should check it in since all it can do is check it returns a non-empty string but I did verify it is currently returning the translated shader so I think this code is fine.",
      "parentUuid": "10ed2124_fb61ab8e",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29371ddb_d9353f20",
        "filename": "src/libANGLE/renderer/metal/ShaderMtl.mm",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-12-13T19:01:00Z",
      "side": 1,
      "message": "Whatever you think - if you think it doesn\u0027t add much value then don\u0027t worry about it. Maybe its expected results could be specialized a little per-platform so that we would only expect \"\u003cbinary blob\u003e\" on the Vulkan backend or similar, and a different non-empty string on other backends? At least this could prevent accidental regressions of the translated shader source functionality on several backends.",
      "parentUuid": "8fefabc7_fdd636b7",
      "revId": "8d57c4d96e6b2d25f9d03186dc8c570269b78bb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}