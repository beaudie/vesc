{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "82d9e232_9528b56a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-30T15:26:13Z",
      "side": 1,
      "message": "Seems fine. Paul FYI, this might affect measurement.",
      "revId": "c89ab6674c8043b32302a785f56a73c56b01de8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66002ec0_c9608985",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-03T21:47:11Z",
      "side": 1,
      "message": "Discovered another problem with offscreen. Some traces never uses FBO, it always keep render into surface and issue swap. When we run such traces in offscreen mode, we lose the frame boundary signal. From driver\u0027s point of view, you are rendering to the same offscreen FBO over and over again. Some driver(s) try to detect frame boundary and issue flush across frame boundary, but try to ignore the flush issued inside the frame. Our offscreen playback mechanism triggered the bad side of such driver, and it hits a code path that does realloc+memcpy over and over again and becomes worse and worse as we accumukate more frames. Since this is not real app behavior and driver is not optimized for such usage, I think it is better for us to use two offscreen FBOs and ping-pong between them. This way we still keep the frame boundary of each frame, but not go to actual screen.\n\nBTW, other than other driver, ANGLE also adopts the similar flush behavior, so ANGLE also gets hit here. But ANGLE\u0027s implementation does not have that specific resize code path that slows down so badly that offscreen is worse than on screen. ",
      "revId": "c89ab6674c8043b32302a785f56a73c56b01de8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}