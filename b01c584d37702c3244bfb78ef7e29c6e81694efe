{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "80777e97_7d1008d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T17:47:22Z",
      "side": 1,
      "message": "So in this CL you chosed always track R/W for all resources. My recommendation is still go with inheritance. The reason is simply that what you try to solve is a limited case, but why have all usage cases take extra CPU cost to have to update two mUse. retain/release are called on every resource used at each renderpass (when we do submission for each RP).",
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56ca805f_23cc762d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-08T17:49:40Z",
      "side": 1,
      "message": "That\u0027s a fair point, though it would be helpful to have some data to analyze to determine the impact. Even on the most minimal microbench. Charlie what\u0027s a use case where you would be able to see the impact of the overhead? Maybe a simple draw with one state change? Or using a lot of textures?",
      "parentUuid": "80777e97_7d1008d3",
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36e67b50_ffdb59ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T18:31:15Z",
      "side": 1,
      "message": "Right, a simple draw with lots of texture/buffers. I suggest avoid any unnecessary cost here because it is avoidable, and little things do adds up.",
      "parentUuid": "56ca805f_23cc762d",
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "748e495f_04a7f87d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-08T18:41:04Z",
      "side": 1,
      "message": "Even little things should be observable / quantifiable. I was able to see the impact of one memory access in draw call overhead tests. If there\u0027s a cost to optimization in terms of increasing code complexity it\u0027s worth knowing the the benefit in terms of runtime - just my two cents.\n\nDesign-wise I\u0027d be fine with not using inheritance, and just implementing two classes, vk::Resource and vk::ReadWriteResource. The code savings from the inheritance is pretty small, and generally inheritance is not a good fit a lot of the time.",
      "parentUuid": "36e67b50_ffdb59ec",
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb098f7b_29ad281b",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T17:47:22Z",
      "side": 1,
      "message": "This is no longer needed.",
      "range": {
        "startLine": 19,
        "startChar": 11,
        "endLine": 19,
        "endChar": 26
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edb017dd_3f8ba835",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T17:47:22Z",
      "side": 1,
      "message": "This is always updated regardless read or write, I think better name it mAccessUse to reflect that this is tracking any GPU access, read or write. Otherwise, the naming is a bit confusing. For example, if you look at isCurrentlyInUse(), it is checking mReadUse. People will ask why mWriteUse is not checked since write is also considered as \"inUse\".",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0086b08_8289f667",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-08T17:53:14Z",
      "side": 1,
      "message": "I would rename the isCurrentlyInUse method if it\u0027s not accurate. Can something be in use for write and not read? Renaming mUse to mAccessUse doesn\u0027t seem clearer to me.\n\nnb my original suggestion was to name it mReadWriteUse and mReadOnlyUse, though Tim\u0027s implementation seems OK to me as well.",
      "parentUuid": "edb017dd_3f8ba835",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6afe8dc5_f1992138",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T18:31:15Z",
      "side": 1,
      "message": "\u003eCan something be in use for write and not read?\nFor example, bufferSubData call will only write to buffer but not read.\n\nWhat it really mean is read or write, so mReadOrWriteUse is also fine, just a bit verbose. mReadWriteUse might also be fine.",
      "parentUuid": "f0086b08_8289f667",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b47cc6bf_010cb0cc",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T18:59:30Z",
      "side": 1,
      "message": "How about mAnyUse?",
      "parentUuid": "6afe8dc5_f1992138",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7107eb0f_271bc4f7",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-08T19:02:14Z",
      "side": 1,
      "message": "Depends on if Tim splits the class or not. If he keeps it like this, I like mReadWriteUse and mReadOnlyUse to disambiguate them.",
      "parentUuid": "b47cc6bf_010cb0cc",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ccff3b7_ab676233",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 5
      },
      "lineNbr": 212,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-08T19:03:20Z",
      "side": 1,
      "message": "I\u0027m also fine with leaving it as-is.",
      "parentUuid": "7107eb0f_271bc4f7",
      "range": {
        "startLine": 212,
        "startChar": 22,
        "endLine": 212,
        "endChar": 30
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45579ee_ac0a2ef8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2748,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T19:31:33Z",
      "side": 1,
      "message": "Is this really necessary? BufferViewHelper::retain() will retain the BufferViewHelper object not the views inside, right? So what does it matter if it\u0027s added to the retain list before or after its *content* has changed?",
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcdc903b_994a0dca",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1061,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T19:31:33Z",
      "side": 1,
      "message": "This looks confusing, is that what the naming dispute was about? You can always make it doubly clear:\n\n    buffer-\u003eretainReadOnly(...)\n    buffer-\u003eretainReadWrite(...)\n    image-\u003eretain(...)\n\nThen have BufferHelper, ImageHelper (and others such as DescriptorPoolHelper) forward these to the appropriate ResourceVk functions (which could be named retainBufferReadOnly, retainBufferReadWrite and retainImage ..., even if all except retainBufferReadWrite have the same implementation).",
      "range": {
        "startLine": 1061,
        "startChar": 11,
        "endLine": 1061,
        "endChar": 25
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "878c188f_0fde3016",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3494,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T19:31:33Z",
      "side": 1,
      "message": "Revert?",
      "range": {
        "startLine": 3494,
        "startChar": 30,
        "endLine": 3494,
        "endChar": 32
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfbebc18_02712214",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3657,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T19:31:33Z",
      "side": 1,
      "message": "The comment doesn\u0027t make much sense to be honest. release() happens on a resource, and it\u0027s when you want the resource to entirely go away (doesn\u0027t matter if it\u0027s by glDeleteBuffers or other). Retain helps usage tracking. They are unrelated operations, so \"release() applying to retain()\" doesn\u0027t make any sense.\n\nIt\u0027s pretty clear IMO why there would be mWriteUse.release() inside a release() function, so the entire comment can be dropped.",
      "range": {
        "startLine": 3649,
        "startChar": 0,
        "endLine": 3657,
        "endChar": 86
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd333cad_55189c3a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 4163,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-08T19:31:33Z",
      "side": 1,
      "message": "Can be deleted",
      "range": {
        "startLine": 4161,
        "startChar": 0,
        "endLine": 4163,
        "endChar": 21
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0788d5b4_9c6906c4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 5
      },
      "lineNbr": 7742,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-09-08T17:47:22Z",
      "side": 1,
      "message": "I thought these can be write?",
      "range": {
        "startLine": 7742,
        "startChar": 4,
        "endLine": 7742,
        "endChar": 18
      },
      "revId": "b01c584d37702c3244bfb78ef7e29c6e81694efe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}