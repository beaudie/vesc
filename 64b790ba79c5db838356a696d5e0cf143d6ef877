{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "40155d65_d9df9e2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-16T01:30:58Z",
      "side": 1,
      "message": "Oh by the way, beware of this: crbug.com/1336981\n\nmemoryless will not be so memoryless the way things are. There _is_ some effort to alleviate that though.",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5302706_9ad045d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-16T02:29:59Z",
      "side": 1,
      "message": "Chris, are you aware of this in the GL ext?\n\n\u003e If a shader writes to any user-defined fragment output, the pixel local\n\u003e storage values for that fragment are lost, and their values in subsequent\n\u003e shader invocations are undefined.\n\u003e \n\u003e Similarly, if a shader writes to pixel local storage blocks, the value of\n\u003e the framebuffer pixel covered by that fragment becomes undefined.\"\n\nI heard from ARM that they actually let PLS and color attachments overlap in tile memory, so writing one destroys the other. I didn\u0027t notice such a thing in the ANGLE spec.\n\n---\n\nOn the subject of security-related guarantees, that means that the PLS data could be initialized by color attachment data if not clear (and in a potentially garbage way, because the format/layout may not exactly match the color attachments)",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24c6f273_10d55999",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-08-16T02:37:03Z",
      "side": 1,
      "message": "Yes, that\u0027s why the spec allows MAX_COLOR_ATTACHMENTS_WITH_ACTIVE_PLS_ANGLE to be zero. The idea is for an implementation using EXT_shader_pixel_local_storage to make that zero, disallowing color attachments entirely.\n\n    Note that MAX_COLOR_ATTACHMENTS_WITH_ACTIVE_PLS_ANGLE may be zero, in which\n    case the application cannot render to fragment shader outputs while pixel\n    local storage is active. This capability is not supported by\n    EXT_shader_pixel_local_storage.",
      "parentUuid": "d5302706_9ad045d8",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c16939c_a6b8fdb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-16T02:39:03Z",
      "side": 1,
      "message": "Ah, got it",
      "parentUuid": "24c6f273_10d55999",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "422b0fc3_153beb7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-08-16T02:43:13Z",
      "side": 1,
      "message": "Ouch!!\n\nI wonder what happens in EXT_pls when there\u0027s a context switch. It sounds like they might not dump to temporary memory, and therefore, make your data undefined\n\nMaybe we could manually dump and restore it ourselves, though it would still be slow",
      "parentUuid": "40155d65_d9df9e2b",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dc20a6c_8b581845",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-16T02:54:26Z",
      "side": 1,
      "message": "Sounds like it based on the EXT spec. I was thinking of the horrible performance on mobile on Vulkan, but this is actually a blocker for GL probably. Feel free to point that out in the issue so we don\u0027t lose it.\n\nMy hope is that Chrome completes the move to Skia Vulkan/whatever, so only WebGL uses ANGLE, at which point we can probably just stop doing that. Otherwise, at least I hope we can convince them to stop the context switch while PLS is active, but that\u0027s assuming the Chrome UI has a way to not freeze.",
      "parentUuid": "422b0fc3_153beb7e",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0725d76b_a06db20a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-08-16T03:19:42Z",
      "side": 1,
      "message": "\u003e this is actually a blocker for GL probably\n\nIs this a virtual context switch? Or a real context? (Mostly just curious.)\n\nIf we know a context switch is about to happen, we could manually render the EXT_shader_pixel_local_storage contents into internal textures right? Then draw them back into PLS when the context comes back? I think this is the idea behind Vulkan transient attachments. (Still awful performance, but it would work.)",
      "parentUuid": "3dc20a6c_8b581845",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15552e95_1516cb66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-08-16T03:37:44Z",
      "side": 1,
      "message": "I\u0027m glad it\u0027s 100 now in https://chromium-review.googlesource.com/c/chromium/src/+/3820323\n\nObviously your suggestions about being time-based and smart about the type of command would be better, but 100 is way better than 20. It might be tolerable enough as long as we can get dump/restore hooks to the backend.\n\nWe can do this same thing in Vulkan with VK_ARM_rasterization_order_attachment_access and transient attachments, or Metal with raster order groups and memoryless attachments, in which case I think we would need dump/restore hooks there as well.",
      "parentUuid": "0725d76b_a06db20a",
      "revId": "64b790ba79c5db838356a696d5e0cf143d6ef877",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}