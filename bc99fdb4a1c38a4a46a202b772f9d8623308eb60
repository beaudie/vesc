{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "25cb679f_1df37198",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-06T22:26:01Z",
      "side": 1,
      "message": "i see this error -\n```\n[9130/13314] ClearTest.ChangeFramebufferAttachmentFromRGBAtoRGB/ES2_Vulkan (FAIL)\n\n[ RUN      ] ClearTest.ChangeFramebufferAttachmentFromRGBAtoRGB/ES2_Vulkan\n../../src/tests/test_utils/ANGLETest.cpp:65: Failure\nRendererVk.cpp:803 (DebugUtilsMessenger): [ UNASSIGNED-Threading-MultipleThreads-Write ] Validation Error: [ UNASSIGNED-Threading-MultipleThreads-Write ] Object 0: handle \u003d 0x30000000003, type \u003d VK_OBJECT_TYPE_PIPELINE_CACHE; | MessageID \u003d 0xa05b236e | vkMergePipelineCaches():  THREADING ERROR : object of type VkPipelineCache is simultaneously used in current thread 140192253978368 and thread 140192800797120\n                            Object: 0x30000000003 (type \u003d Pipeline Cache(16))\n\nangle::PrintStackBacktrace() at crash_handler_posix.cpp:498\nangle::(anonymous namespace)::TestPlatform_logError(angle::PlatformMethods*, char const*) at ANGLETest.cpp:?\n__is_long at string:1793\ngl::LogMessage::~LogMessage() at debug.cpp:?\n__is_long at string:1793\ndebug_log_msg at logging.cpp:?\nValidationObject::LogError(std::__Cr::basic_string_view\u003cchar, std::__Cr::char_traits\u003cchar\u003e \u003e, LogObjectList const\u0026, Location const\u0026, char const*, ...) const at chassis.h:2357\ncounter\u003cVkPipelineCache_T*\u003e::HandleErrorOnWrite(std::__Cr::shared_ptr\u003cObjectUseData\u003e const\u0026, VkPipelineCache_T*, Location const\u0026) at thread_safety_validation.h:229\ncounter\u003cVkPipelineCache_T*\u003e::StartWrite(VkPipelineCache_T*, Location const\u0026) at thread_safety.cpp:?\nThreadSafety::PreCallRecordMergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*, RecordObject const\u0026) at thread_safety.cpp:732\n~unique_lock at unique_lock.h:62\n~unique_lock at unique_lock.h:62\nrx::RendererVk::mergeIntoPipelineCache(rx::vk::Context*, rx::vk::PipelineCache const\u0026) at RendererVk.cpp:?\nrx::ProgramExecutableVk::warmUpPipelineCache(rx::vk::Context*, rx::vk::PipelineRobustness, rx::vk::PipelineProtectedAccess, rx::vk::RenderPass*) at ProgramExecutableVk.cpp:?\nrx::(anonymous namespace)::WarmUpTask::operator()() at ProgramVk.cpp:218\nmarkAsReady at WorkerThread.cpp:43\nreset at unique_ptr.h:278\nstart_thread at pthread_create.c:463\nclone at clone.S:97\nERR: RendererVk.cpp:803 (DebugUtilsMessenger): [ UNASSIGNED-Threading-MultipleThreads-Write ] Validation Error: [ UNASSIGNED-Threading-MultipleThreads-Write ] Object 0: handle \u003d 0x30000000003, type \u003d VK_OBJECT_TYPE_PIPELINE_CACHE; | MessageID \u003d 0xa05b236e | vkMergePipelineCaches():  THREADING ERROR : object of type VkPipelineCache is simultaneously used in current thread 140192253978368 and thread 140192800797120\n                            Object: 0x30000000003 (type \u003d Pipeline Cache(16))\n\nBacktrace:\n```\n\nthis is what i got out of the clarification from khronos group -\n\n1. only the `dstCache` in the `vkMergePipelineCaches` API needs to be externally synchronized irrespective of whether the cache was created with \"external bit\".\n\n2. a read / write into a cache that is internally synchronized doesn\u0027t need mutex locks from app\n\nim curious what happens in this usecase -\n1. threadA is executing a merge with dstCache \u003d cacheA\n2. threadB calls createpipeline call with cacheA as the pipeline cache\n\nany thoughts?",
      "revId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbe8aa09_25e02c5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-06T22:32:40Z",
      "side": 1,
      "message": "`cacheA` was created without the external bit, so it is supposed to be internally synchronized",
      "parentUuid": "25cb679f_1df37198",
      "revId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7633ef0_eb5c3ca7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-07T03:02:05Z",
      "side": 1,
      "message": "I\u0027ve been rethinking our external synchronization of the pipeline cache for a while now, and I think maybe we should just go back to internally synchronized, except for those caches that don\u0027t need a lock at all.\n\nLike the Program\u0027s cache could be externally synchronized because it doesn\u0027t actually need a lock, but the renderer\u0027s cache can be internally synchronized.\n\nThe reason is that if we _do_ need a lock, locking around `vkCreateGraphicsPipelines` is just less granular than the driver doing the locking, so we\u0027re hurting parallelism. Externally synchronized only helps us if we _don\u0027t_ actually need the lock (because for example the share group lock is already protecting the cache).\n\nI\u0027m on vacation, but ping me next week to revisit this. Basically I think we should revert `PipelineCacheAccess`, pass the cache directly around and don\u0027t have an associated mutex. The renderer\u0027s cache would be internally synchronized, and the other caches which don\u0027t use a mutex now would have the externally synchronized flag but no mutex.",
      "revId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4945d38b_e5740b07",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-15T21:49:39Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b7633ef0_eb5c3ca7",
      "revId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b667744e_b2008480",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-03-15T21:49:39Z",
      "side": 1,
      "message": "carried over to replacement change",
      "parentUuid": "bbe8aa09_25e02c5e",
      "revId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bc99fdb4a1c38a4a46a202b772f9d8623308eb60",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}