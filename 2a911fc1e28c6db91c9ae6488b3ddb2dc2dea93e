{
  "comments": [
    {
      "key": {
        "uuid": "d6a1b1bb_80b9361c",
        "filename": "src/compiler/translator/glslang.l",
        "patchSetId": 4
      },
      "lineNbr": 530,
      "author": {
        "id": 1120614
      },
      "writtenOn": "2015-10-27T14:47:16Z",
      "side": 1,
      "message": "ultra-nit: I think this should be are reinterpret cast as the static cast here will result in an implicit conversion to int, causing an \"implementation defined\" behavior for number that represent negative numbers. On the other hand reinterpret_cast allows us to rely on the complement of two.",
      "range": {
        "startLine": 530,
        "startChar": 20,
        "endLine": 530,
        "endChar": 31
      },
      "revId": "2a911fc1e28c6db91c9ae6488b3ddb2dc2dea93e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6b19df3_7a9b953f",
        "filename": "src/compiler/translator/glslang.l",
        "patchSetId": 4
      },
      "lineNbr": 530,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-10-27T15:01:33Z",
      "side": 1,
      "message": "Where\u0027s the reinterpret_cast behavior defined? I thought they\u0027re both implementation defined (but can be commonly expected to do the two\u0027s complement conversion).",
      "parentUuid": "d6a1b1bb_80b9361c",
      "range": {
        "startLine": 530,
        "startChar": 20,
        "endLine": 530,
        "endChar": 31
      },
      "revId": "2a911fc1e28c6db91c9ae6488b3ddb2dc2dea93e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f685d521_e91c3535",
        "filename": "src/compiler/translator/glslang.l",
        "patchSetId": 4
      },
      "lineNbr": 530,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2015-10-27T15:06:03Z",
      "side": 1,
      "message": "reinterpret_cast\u0027s behavior is defined as reusing the same bits but for a different type, so it allows us to rely on the two\u0027s complement.\nWe can probably rely on the implementation using two\u0027s complement for static_cast, I only checked to make sure the standard doesn\u0027t ask static_cast to clamp the value.",
      "parentUuid": "b6b19df3_7a9b953f",
      "range": {
        "startLine": 530,
        "startChar": 20,
        "endLine": 530,
        "endChar": 31
      },
      "revId": "2a911fc1e28c6db91c9ae6488b3ddb2dc2dea93e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6b19df3_daa90153",
        "filename": "src/compiler/translator/glslang.l",
        "patchSetId": 4
      },
      "lineNbr": 530,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-10-27T15:41:40Z",
      "side": 1,
      "message": "Hmm, looks like cppreference.com says that, but I can\u0027t actually see that in C++14 draft from https://isocpp.org/std/the-standard . Instead it says for example \"The mapping performed by reinterpret_cast might, or might not, produce a representation different\nfrom the original value.\" If we truly want to make this more portable, I\u0027m not actually sure what should be done.",
      "parentUuid": "f685d521_e91c3535",
      "range": {
        "startLine": 530,
        "startChar": 20,
        "endLine": 530,
        "endChar": 31
      },
      "revId": "2a911fc1e28c6db91c9ae6488b3ddb2dc2dea93e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}