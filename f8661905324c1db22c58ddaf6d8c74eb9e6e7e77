{
  "comments": [
    {
      "key": {
        "uuid": "2c2548ba_a46b2dea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-28T13:37:33Z",
      "side": 1,
      "message": "We recently did the same in vulkan/. Have you noticed gl::LevelIndex?",
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fdd8993_7a51284c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-28T13:51:49Z",
      "side": 1,
      "message": "Yes, I made MipmapNativeLevel a subclass of gl::LevelIndex with extra methods for convenient",
      "parentUuid": "2c2548ba_a46b2dea",
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93e33052_50ba9c93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-28T14:18:12Z",
      "side": 1,
      "message": "Context: https://chromium-review.googlesource.com/c/angle/angle/+/2380232",
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edb9b3ad_12796ff5",
        "filename": "src/libANGLE/renderer/metal/TextureMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T14:01:03Z",
      "side": 1,
      "message": "in general, can you try to restructure your new classes to use composition instead of inheritance? this is both a consistency thing (we try to do this everywhere in ANGLE) and a code quality thing:\n\nhttps://en.wikipedia.org/wiki/Composition_over_inheritance#:~:text\u003dTo%20favor%20composition%20over%20inheritance,and%20creating%20a%20family%20tree.\n\nThis isn\u0027t a strict rule for every class. In this case it would make sense.",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa33c450_819f3f96",
        "filename": "src/libANGLE/renderer/metal/TextureMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-30T10:56:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edb9b3ad_12796ff5",
      "range": {
        "startLine": 31,
        "startChar": 26,
        "endLine": 31,
        "endChar": 28
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f1d0aba_d4f1df4a",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T14:01:03Z",
      "side": 1,
      "message": "same comment here",
      "range": {
        "startLine": 343,
        "startChar": 29,
        "endLine": 343,
        "endChar": 32
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33fecb7c_9efb9712",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-30T10:56:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f1d0aba_d4f1df4a",
      "range": {
        "startLine": 343,
        "startChar": 29,
        "endLine": 343,
        "endChar": 32
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f329ab6a_db794ebd",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-28T14:18:12Z",
      "side": 1,
      "message": "Ok I see. FYI, we explicitly avoided these, so that we don\u0027t accidentally end up comparing a gl::LevelIndex with a native index (vk::LevelIndex), which I would also recommend here. For conversion between the two indices, we have vk_gl::GetLevelIndex and gl_vk::GetLevelIndex. I personally think you can do without this class and use gl::LevelIndex directly.\n\nFeel free to move vk::LevelIndex and *::GetLevelIndex to renderer/ so both backends could use them.",
      "range": {
        "startLine": 366,
        "startChar": 0,
        "endLine": 376,
        "endChar": 84
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf4f0e6_193db6dd",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-28T14:32:48Z",
      "side": 1,
      "message": "you\u0027d need to call it rx::LevelIndex in that case. Which would be fine. Suggest a split change for that.",
      "parentUuid": "f329ab6a_db794ebd",
      "range": {
        "startLine": 366,
        "startChar": 0,
        "endLine": 376,
        "endChar": 84
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f552f17b_1a60b05b",
        "filename": "src/libANGLE/renderer/metal/mtl_common.h",
        "patchSetId": 2
      },
      "lineNbr": 376,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-09-30T10:56:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eaf4f0e6_193db6dd",
      "range": {
        "startLine": 366,
        "startChar": 0,
        "endLine": 376,
        "endChar": 84
      },
      "revId": "f8661905324c1db22c58ddaf6d8c74eb9e6e7e77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}