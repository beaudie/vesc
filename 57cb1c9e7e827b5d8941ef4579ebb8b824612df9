{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c59c30c_5e85b4f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T12:32:43Z",
      "side": 1,
      "message": "Looks good. Just to confirm the direction for the patch series: we\u0027ll end up in a state that still uses a linear allocator, but instead we\u0027ll be using tools in Vma to do the linear allocation? And we\u0027ll still have an offset into a buffer for many/most allocations?",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9c9c183_c6737c04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-07-30T16:54:50Z",
      "side": 1,
      "message": "I did not change linear allocator in this serial of CLs. For ContextVk::mStagingBuffer, linear allocator is the right choice and I think our DynamicBuffer implementation works well for that kind of usage. I do not have a plan to change that.",
      "parentUuid": "3c59c30c_5e85b4f3",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55363a89_c09aad7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T17:04:26Z",
      "side": 1,
      "message": "Sorry, I don\u0027t quite follow. Did you change the way UBO / SSBO buffers are allocated to no longer use the linear allocator? It\u0027s important that those stay linear so they can change descriptors less frequently.",
      "parentUuid": "d9c9c183_c6737c04",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91b93051_740e7724",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-07-30T17:27:19Z",
      "side": 1,
      "message": "Right. Maybe we should discuss it in crrev.com/c/2901241 that actually change this. This CL does not change UBO/SSBO behavior.\n\nOne solution for UBO/SSBO is to still keep the per object DynamicBuffer pool so we do not change behavior of that. It will be unfortunate that BufferVk.cpp wont be simplified because of that, but we can leave it as future optimization for now.",
      "parentUuid": "55363a89_c09aad7b",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb4622ae_8348f0a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T17:31:58Z",
      "side": 1,
      "message": "I guess I was confused - I thought using Vma would let us use a linear allocator and still share underlying allocations? Is that not the case? Do we need the DynamicBuffer class for linear?\n\nProbably we should be doing this in a design doc, but because this decision affects the whole patch series, and this is the first patch, we ideally could reach consensus before landing.",
      "parentUuid": "91b93051_740e7724",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86a70348_9331c643",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-30T17:40:01Z",
      "side": 1,
      "message": "I\u0027m still going through the relation chain so I\u0027m not entirely sure how this class is being used yet.   As Jamie noted, a high level design doc explaining the goal and changes would probably be helpful to give a little more context for these changes.",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8a5bb1a_e92e843b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "The first three patches are mainly try to address out current inefficient use of VMA, that we are using default pool which forces bufferImageGranularity and calling findMemoryTypeIndexForBufferInfo which creates/free buffer. So we should be good to move forward with the first three patches. But I will ensure we all agress for the  last patch which essentially changes how BufferVk allocates memory. But lets move that discussion to the design doc",
      "parentUuid": "eb4622ae_8348f0a6",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b1e6f29_21265109",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3453,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-30T17:40:01Z",
      "side": 1,
      "message": "Why are these passed in?",
      "range": {
        "startLine": 3452,
        "startChar": 0,
        "endLine": 3453,
        "endChar": 84
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08fa1414_002af28a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3453,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "It will be used in the next CL.",
      "parentUuid": "7b1e6f29_21265109",
      "range": {
        "startLine": 3452,
        "startChar": 0,
        "endLine": 3453,
        "endChar": 84
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd016465_c6001754",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3453,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "08fa1414_002af28a",
      "range": {
        "startLine": 3452,
        "startChar": 0,
        "endLine": 3453,
        "endChar": 84
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71e1c05b_e6894e23",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3465,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-30T17:40:01Z",
      "side": 1,
      "message": "Referencing kSmallPool and kLargePool directly takes out some of the benefit of using an enum, since this won\u0027t automatically free any pools if new values are added after kLargePool.   Instead, this should be (similar to the memory type loop):\n\n        for (int poolType \u003d 0; poolType \u003c kPoolCount; poolType++)",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b198e30e_49b65902",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3465,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71e1c05b_e6894e23",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8931c17_d96fb040",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T12:32:43Z",
      "side": 1,
      "message": "can you ASSERT that the pools are dellocated/nulled out in the destructor to ensure we call destroy() before we destruct this object?",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 39
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4889414_d4698135",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Good point. Done",
      "parentUuid": "c8931c17_d96fb040",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 39
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f77e1c2_aa61a782",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 115,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T12:32:43Z",
      "side": 1,
      "message": "minor request - but instead of owning a weak pointer, you can pass in the RendererVk as the first argument and pull the Allocator from RendererVk? Will help follow the single-ownership model we use most of the time.",
      "range": {
        "startLine": 115,
        "startChar": 15,
        "endLine": 115,
        "endChar": 25
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "308303ec_37995964",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 115,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f77e1c2_aa61a782",
      "range": {
        "startLine": 115,
        "startChar": 15,
        "endLine": 115,
        "endChar": 25
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf49cf39_82740a50",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T12:32:43Z",
      "side": 1,
      "message": "nit: you can use std::array",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 11
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f596fb6d_29b2a77b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf49cf39_82740a50",
      "range": {
        "startLine": 123,
        "startChar": 4,
        "endLine": 123,
        "endChar": 11
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f671241e_709503bb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3537,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-30T17:40:01Z",
      "side": 1,
      "message": "This can be moved below to just before the InitMappableAllocation() call.",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd9a00a6_d883eb5a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3537,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f671241e_709503bb",
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3728d73b_09744535",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3557,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-30T12:32:43Z",
      "side": 1,
      "message": "can you see if you can encapsulate this into a single API instead of several APIs? I haven\u0027t looked closely at the code to see if it\u0027s possible.",
      "range": {
        "startLine": 3537,
        "startChar": 0,
        "endLine": 3557,
        "endChar": 0
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b945625d_4b7a789b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3557,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-07-30T16:54:50Z",
      "side": 1,
      "message": "Yes, this section of code will be end up just making one allocateMemoryForBuffer call in crrev.com/c/2939490.",
      "parentUuid": "3728d73b_09744535",
      "range": {
        "startLine": 3537,
        "startChar": 0,
        "endLine": 3557,
        "endChar": 0
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3684ed05_6faea0d3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 7
      },
      "lineNbr": 3557,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-08-02T16:45:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b945625d_4b7a789b",
      "range": {
        "startLine": 3537,
        "startChar": 0,
        "endLine": 3557,
        "endChar": 0
      },
      "revId": "57cb1c9e7e827b5d8941ef4579ebb8b824612df9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}