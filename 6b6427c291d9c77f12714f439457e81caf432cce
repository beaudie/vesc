{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e11ef6a_78f965e0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-05T16:52:50Z",
      "side": 1,
      "message": "spec 12.4 says transition away from undefined might lost data though.\n\n`Upon creation, all image subresources of an image are initially in the same layout, where that layout is selected by the VkImageCreateInfo::initialLayout member. The initialLayout must be either VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED. If it is VK_IMAGE_LAYOUT_PREINITIALIZED, then the image data can be preinitialized by the host while using this layout, and the transition away from this layout will preserve that data. If it is VK_IMAGE_LAYOUT_UNDEFINED, then the contents of the data are considered to be undefined, and the transition away from this layout is not guaranteed to preserve that data. For either of these initial layouts, any image subresources must be transitioned to another layout before they are accessed by the device.`",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6bcdba5_e7693d99",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-06T01:00:44Z",
      "side": 1,
      "message": "See the section referenced above. Despite the above quote, the spec says (for external images):\n\n\u003e Applications may also add resources to such a set after the content of the existing set members has been defined without making the content undefined by creating a new image with the initial layout VK_IMAGE_LAYOUT_UNDEFINED and binding it to the same region of external memory as the existing images.\n\u003e \n\u003e Note\n\u003e \n\u003e Because layout transitions apply to all identical images aliasing the same region of external memory, the actual layout of the memory backing a new image as well as an existing image with defined content will not be undefined. Such an image is not usable until it acquires ownership of its memory from the existing owner. Therefore, the layout specified as part of this transition will be the true initial layout of the image. The undefined layout specified when creating it is a placeholder to simplify valid usage requirements.\n\nThat basically says that UNDEFINED is just a placeholder for external images.",
      "parentUuid": "1e11ef6a_78f965e0",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a973035d_f2bededc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-06T18:49:12Z",
      "side": 1,
      "message": "My understanding is that glWaitSemaphoreEXT will end up doing the ownership transition which vulkan driver will treat undefined as preinitialized since driver can assume you have previous data in the memory for memory ownership transfer. But if no one ever called ownership transition, for example, if someone created AHB and initialized with data. Then it create EGLImage out of it, and use it without glWaitSemaphoreEXT call. With this CL we are going to transit from undefined to another layout, vulkan driver may decide to skip FBC if the new layout is for rendering, since previous layout is undefined. If it is preinitialized, then it knows that it has to preserve data and will try to go through compression. Not sure if we already have a test for this.\n\nWhat\u0027s the harm to keep it using preinitalized? Is there any benefit to use undefined instead of preinitialized?",
      "parentUuid": "d6bcdba5_e7693d99",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b1b3b1a_f2881e8f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-06T19:35:59Z",
      "side": 1,
      "message": "\u003e What\u0027s the harm to keep it using preinitalized? Is there any benefit to use undefined instead of preinitialized?\n\nJust clean up!\n\nWe most definitely have AHB tests for this, I recently wrote a few at least. Nevertheless, I opened an issue with Khronos to get clarification: https://gitlab.khronos.org/vulkan/vulkan/-/issues/2858",
      "parentUuid": "a973035d_f2bededc",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba160709_e520b298",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-11T18:29:43Z",
      "side": 1,
      "message": "I assume you want to wait until get clarification from Khronos before landing this?  Given that there is no real benefit of using UNDEFINED, but with potential risk (pending clarification), I think we should wait until clarified. Let me know if my understanding is incorrect.",
      "parentUuid": "1b1b3b1a_f2881e8f",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a178293e_2d7ed6e8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-12T19:21:53Z",
      "side": 1,
      "message": "Yeap, I\u0027m waiting for clarification.",
      "parentUuid": "ba160709_e520b298",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "788e8cf1_d138993e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-21T18:49:19Z",
      "side": 1,
      "message": "Well what do you know! There is a new validation error [1] that\u0027s complaining about the fact that ANGEL is using preinitialized with external images.\n\nThat\u0027s blocking the vulkan-deps roll right now. I\u0027m going to rebase the roll on top of this to be double sure that this change fixes the VVL bug.\n\n[1]: https://chromium.googlesource.com/external/github.com/KhronosGroup/Vulkan-ValidationLayers.git/+/62aa24fae5372c9c046c15b27d5a859069a1cc99%5E%21/#F0",
      "parentUuid": "a178293e_2d7ed6e8",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47b37864_88a9dc2d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-21T19:37:02Z",
      "side": 1,
      "message": "Yes, this does fix the VVL error. Charlie, can I go ahead with landing this?",
      "parentUuid": "788e8cf1_d138993e",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5b5593a_14c2aa8b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 318,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-10-21T19:39:48Z",
      "side": 1,
      "message": "Cool, good to know it fixes VVL.",
      "parentUuid": "47b37864_88a9dc2d",
      "range": {
        "startLine": 318,
        "startChar": 12,
        "endLine": 318,
        "endChar": 38
      },
      "revId": "6b6427c291d9c77f12714f439457e81caf432cce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}