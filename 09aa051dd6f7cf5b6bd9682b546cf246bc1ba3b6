{
  "comments": [
    {
      "key": {
        "uuid": "a35c19c9_13a33f0e",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-07-30T18:58:37Z",
      "side": 1,
      "message": "This may have future problems with other compressed formats now being usable for 3D textures (DXT ones for example) but if the tests pass, I\u0027m happy.",
      "range": {
        "startLine": 538,
        "startChar": 45,
        "endLine": 538,
        "endChar": 82
      },
      "revId": "09aa051dd6f7cf5b6bd9682b546cf246bc1ba3b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "155cb815_b9b41371",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-30T19:39:50Z",
      "side": 1,
      "message": "This should only be rejecting ETC/EAC formats, so DXT should be fine.   I suppose we\u0027ll see if there are any issues some day though.\n\nThis is here because there are dEQP tests that check we are rejecting these formats:\n\n[[[... third_party/angle/third_party/deqp/src/external/openglcts/modules/gles2/es2cTexture3DTests.cpp ...]]]\nNegativeCompressedTexImage3DCase::IterateResult NegativeCompressedTexImage3DCase::iterate(void)\n{\n[[[...]]]\n\t\tconst char* message3 \u003d \"INVALID_OPERATION is generated if internalformat is an ETC2/EAC format.\";\n\t\tfor (int formatNdx \u003d 0; formatNdx \u003c tcu::COMPRESSEDTEXFORMAT_LAST; formatNdx++)\n\t\t{\n\t\t\ttcu::CompressedTexFormat format \u003d static_cast\u003ctcu::CompressedTexFormat\u003e(formatNdx);\n\t\t\tif (tcu::isEtcFormat(format) \u0026\u0026 (format !\u003d tcu::COMPRESSEDTEXFORMAT_ETC1_RGB8))\n\t\t\t{\n\t\t\t\tdeUint32 compressedFormat \u003d glu::getGLFormat(format);\n\t\t\t\tcallCompressedTexImage3D(GL_TEXTURE_3D, 0, compressedFormat, 0, 0, 0, 0, 0, 0);\n\t\t\t\tverifyError(GL_INVALID_OPERATION, message3);\n\t\t\t}\n\t\t}\n\nI couldn\u0027t find a spec statement anywhere that indicated these formats should be rejected, but dEQP seems pretty confident about it.   This may just be my own lack of knowledge about how this stuff works too, where EAC/ETC could never work in this case anyway, which is why we should be rejecting them.",
      "parentUuid": "a35c19c9_13a33f0e",
      "range": {
        "startLine": 538,
        "startChar": 45,
        "endLine": 538,
        "endChar": 82
      },
      "revId": "09aa051dd6f7cf5b6bd9682b546cf246bc1ba3b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27c88160_24997c36",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2019-07-30T20:29:59Z",
      "side": 1,
      "message": "It looks like the test Tim\u0027s referring to is specific to ES 2.0, so I wouldn\u0027t expect that ES 3 validation would want to do this.\nI\u0027m curious now how the test is getting to ES3 validation considering it should be a 2.0 test.",
      "parentUuid": "155cb815_b9b41371",
      "range": {
        "startLine": 538,
        "startChar": 45,
        "endLine": 538,
        "endChar": 82
      },
      "revId": "09aa051dd6f7cf5b6bd9682b546cf246bc1ba3b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6154e1b8_8074f925",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 4
      },
      "lineNbr": 538,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-30T20:44:10Z",
      "side": 1,
      "message": "The jump from ES2 to ES3 occurs here:\n\nbool ValidateCompressedTexImage3DOES(Context *context,\n                                     TextureTarget target,\n                                     GLint level,\n                                     GLenum internalformat,\n                                     GLsizei width,\n                                     GLsizei height,\n                                     GLsizei depth,\n                                     GLint border,\n                                     GLsizei imageSize,\n                                     const void *data)\n{\n    return ValidateCompressedTexImage3D(context, target, level, internalformat, width, height,\n                                        depth, border, imageSize, data);\n}\n\nValidateCompressedTexImage3DOES() is in validationES2.cpp, while ValidateCompressedTexImage3D() is in validationES3.cpp.\n\nHowever, while walking through that I came across this:\n\n[[[... third_party/angle/src/libANGLE/validationES3.cpp ...]]]\nbool ValidateES3TexImage3DParameters(...)\n{\n    if (!ValidTexture3DDestinationTarget(context, target))\n    {\n        context-\u003evalidationError(GL_INVALID_ENUM, kInvalidTextureTarget);\n        return false;\n    }\n\n    if (IsETC2EACFormat(format) \u0026\u0026 target !\u003d TextureTarget::_2DArray)  \u003c\u003c---- this guy\n    {\n        // ES 3.1, Section 8.7, page 169.\n        context-\u003evalidationError(GL_INVALID_OPERATION, kInternalFormatRequiresTexture2DArray);\n        return false;\n    }\n\n    return ValidateES3TexImageParametersBase(context, target, level, internalformat, isCompressed,\n                                             isSubImage, xoffset, yoffset, zoffset, width, height,\n                                             depth, border, format, type, bufSize, pixels);\n}\n\nIt looks like IsETC2EACFormat(format) may be checking the wrong thing; it\u0027s using \u0027format\u0027 rather than \u0027internalFormat\u0027.   Updating that to \u0027internalFormat\u0027 (and removing my fix in ValidateES3TexImageParametersBase()) allows it to pass the test.   I\u0027ll see how that looks with the rest of CQ, but that may be a better answer here.",
      "parentUuid": "27c88160_24997c36",
      "range": {
        "startLine": 538,
        "startChar": 45,
        "endLine": 538,
        "endChar": 82
      },
      "revId": "09aa051dd6f7cf5b6bd9682b546cf246bc1ba3b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}