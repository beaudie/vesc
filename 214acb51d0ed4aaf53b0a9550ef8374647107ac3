{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "375b04db_2f91d081",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 801,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "Is the mismatching return type the only reason for this macro?\n\nI\u0027d suggest removing the macro then, as it is somewhat convoluted. Instead, have a `lockSurfaceImpl` that does _everything_ `lockSurface` does, except it returns `angle::Result`. Then have this function call it and convert the result. We have this pattern elsewhere in this file too.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b1931a4_fda52ec7",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 801,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "`ANGLE_VK_TRY_ALLOC_NO_RETURN` removed. I have applied the changes above to `IOSurfaceSurfaceVkMac.cpp` which used this macro as well. After restricting `onOutOfMemory()` to `ContextVk`, I have removed the OOM handling from this part, which uses `DisplayVk`. Currently, I have added an `ANGLE_VK_CHECK()` inside `LockSurfaceImpl()` instead.",
      "parentUuid": "375b04db_2f91d081",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a42e42a_439cb8ef",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 801,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-31T00:11:11Z",
      "side": 1,
      "message": "All OOM handling (`onOutOfMemory()`) is now exclusive to `ContextVk`. For `DisplayVk` objects, we use `ANGLE_TRY()` followed by `ANGLE_VK_CHECK()`.",
      "parentUuid": "5b1931a4_fda52ec7",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cda3186_2ddceb05",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "It\u0027s a bit counter-intuitive to see (without knowing about OOM handling):\n\n- `ANGLE_TRY` succeeds\n- VkResult is _not_ success\n- The return value _is_ success\n\nHow about instead of passing a `VkResult *`, we pass in a `bool *isOutOfMemoryOut`? Every other return value is an error anyway, and the reader can clearly see the early out is due to OOM.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2230618e_88325404",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-29T17:40:25Z",
      "side": 1,
      "message": "Not a fan of current style as well. Here is another idea: Change the AllocateBufferMemoryWithRequirements and all other memory allocation APIs to return VkResult directly instead of angle::Result. This way, the VK eror code will still be kept and we can add a new `ANGLE_VK_CHECK_OOM` macro that check the returned VKResult code and take corresponding fallback action. angle::Result is designed to fail if not success. Here the usage we want is not exactly matching, so angle::Result (and ANGLE_TRY) is wrong thing for this usage.",
      "parentUuid": "4cda3186_2ddceb05",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d20bfd7_487fece1",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T17:59:48Z",
      "side": 1,
      "message": "That could work, but might complicate returning the VkResult from a chain of functions (like, we\u0027d need another `ANGLE_VK_TRY` for it).\n\nFWIW, `ANGLE_TRY` means \"stop at catastrophe\". `angle::Result::Continue` doesn\u0027t mean \"success\", it just means \"continue working\", so its _does_ make sense here.\n\nThere\u0027s also `angle::Result::Incomplete` which was my mistake and I\u0027m in the process of removing (DON\u0027T USE!). At the time, I thought `angle::Result` is a return code (like VkResult), but like I said above is really just an exception implementation for catastrophes. If we switch to returning VkResult, that means \"exception handling\" is pushed up the stack a few calls, with another custom exception implementation for the last few calls (based on VkResult).",
      "parentUuid": "2230618e_88325404",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55749e8b_44ec8847",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "I also believe that changing the functions to directly return `VkResult` requires us to change all the `ANGLE_TRY` usages in between the OOM handling and allocation. All the errors other than `VK_ERROR_OUT_OF_DEVICE_MEMORY` will result in `ContextVk::handleError()` immediately.\n\nFor now, I have replaced the `VkResult*` outputs with `bool* isOutOfMemoryOut`.",
      "parentUuid": "3d20bfd7_487fece1",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eb2e9a5_6c5ae4f7",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-30T18:59:48Z",
      "side": 1,
      "message": "\u003e  If we switch to returning VkResult, that means \"exception handling\" is pushed up the stack a few calls, with another custom exception implementation for the last few calls (based on VkResult).\n\nRight. The point is why we would like low level code like memory allocator to handle exceptions? We want the error to float up to caller and let caller deal with it. Add another macro should be just fine. for example, \n```\n#define VK_CHECK(command) \n{ \n      auto ANGLE_LOCAL_VAR \u003d command; \n      if (ANGLE_LOCAL_VAR )\n      {\n          return ANGLE_LOCAL_VAR;\n      }\n }\n```\nAnd then you use this macro inside allocation. (name is subject to debate)\n\nThe cleanness comes from the fact that now all memory allocation related error can be handled in upper caller function, and can be in one central place. This is basically the same approach VMA is taking as well (VMA returns VKResult).",
      "parentUuid": "55749e8b_44ec8847",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49e8514c_4aa1a945",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-30T19:12:03Z",
      "side": 1,
      "message": "Not that the whole point is to lift the error handling up. This means the code that depends on ANGLE_TRY needs to move up (like finishOneCommandBatchAndCleanup call). All other calls are trivial to change to return VkResult.",
      "parentUuid": "6eb2e9a5_6c5ae4f7",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d73ddb50_552d025d",
        "filename": "src/libANGLE/renderer/vulkan/android/vk_android_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 95,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-02T01:24:34Z",
      "side": 1,
      "message": "I have changed the functions to return `VkResult` directly, and I have moved the `finishOneCommandBatchAndCleanup()` fallback up into `ANGLE_VK_TRY_ALLOC*()`. Some of the `ANGLE_TRY()` calls in those functions are now replaced with `ANGLE_VK_TRY_CONTINUE()`, where it asserts and returns `VK_ERROR_UNKNOWN` in case their output is `angle::Result::Stop`.",
      "parentUuid": "49e8514c_4aa1a945",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfa1ed7c_150e8a53",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3389,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "No need for this, `DeviceScoped` takes care of this.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ad32381_6ff4a481",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3389,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfa1ed7c_150e8a53",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2920617a_cf96cf81",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3457,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "ditto",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fefc93b_6d47b2f4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3457,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2920617a_cf96cf81",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b34de48a_ba59549b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3517,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "How about a new macro like `ANGLE_TRY_MAY_OOM` that includes the extra `if (oom) return continue`? This is repeated all over the place.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58df5927_6440ef6f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 3517,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Sounds good. Done.",
      "parentUuid": "b34de48a_ba59549b",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8c493cc_b81d4af4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6131,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "This shouldn\u0027t be necessary, the external memory is already allocated, isn\u0027t it?",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54326b35_0e8dde4f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6131,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "I\u0027m not sure. I couldn\u0027t find the code that allocates memory before this point. This is the draft of the change if we added support for image external memory as well: https://chromium-review.googlesource.com/c/angle/angle/+/4814568",
      "parentUuid": "b8c493cc_b81d4af4",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18856593_6b9241f9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6131,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-07T21:59:25Z",
      "side": 1,
      "message": "Update: It is unnecessary to add fallback for external memory. Removed. (The related CL is also discarded.)",
      "parentUuid": "54326b35_0e8dde4f",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64c707fc_aae055a0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6434,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "Is this needed? If `initMemory` fails for any other reason, it\u0027s not done. If it _is_ needed, we should use a `DeviceScoped` temporary image, and then take the image out and assign it to `mImage` at the end.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b528664_ad9da64f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6434,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "If the allocation fails here and we come back after OOM handling, we would call `mImage.init()` again. We could either use the same image handle (since its create info would be the same) or destroy and recreate it.",
      "parentUuid": "64c707fc_aae055a0",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f83ebdd_c62d2c00",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6434,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-31T00:11:11Z",
      "side": 1,
      "message": "I have turned this into a `DeviceScoped` variable, which is transferred to `mImage` on success.",
      "parentUuid": "0b528664_ad9da64f",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "739b9d7e_e71f6092",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6505,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "ditto",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1e80cf7_d82e5b05",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6505,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Here, `mImage` is initialized in `initExternal()`. Does it make sense to call `initExternal()` only if it is null?",
      "parentUuid": "739b9d7e_e71f6092",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "896c247b_9a16041c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 21
      },
      "lineNbr": 6505,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-31T00:11:11Z",
      "side": 1,
      "message": "Based on our discussion offline, I have added a new class inside `ImageHelper` (`ScopedDestroyImageHelperOnFailure`) and used an instance of it in this function. In case of success, the `ImageHelper*` inside this object will be reset to null. In case of allocation failure, however, we will use the pointer to free the resources in `ImageHelper`, including the image handle, via `ImageHelper::destroy()`.",
      "parentUuid": "a1e80cf7_d82e5b05",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef035bc9_37662110",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 144,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "Still need an `ANGLE_VK_CHECK`. Just check for SUCCESS or OOM (and let everything else lead to failure).",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b7bd3fc_58342a3e",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 21
      },
      "lineNbr": 144,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef035bc9_37662110",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6f9f188_47ce9d32",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 283,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "Make sure to remove this function. As long as it\u0027s there, there\u0027s nothing stopping the `vk` layer to induce work in the `rx` layer in unexpected ways.\n\nBy removing this, the code will be forced to have access to ContextVk.",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9927ad76_96dab378",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 283,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "Makes sense. In that case, it will no longer be used for `DisplayVk` and `vk::Context`. For the latter, we can bubble it up and use it if we get to `ContextVk`.",
      "parentUuid": "e6f9f188_47ce9d32",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4eea485d_3b2dcaf1",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 283,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-31T00:11:11Z",
      "side": 1,
      "message": "`onOutOfMemory()` is now exclusive to `ContextVk`.",
      "parentUuid": "9927ad76_96dab378",
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e5e6e2d_f874d1fe",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 1333,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-29T15:28:41Z",
      "side": 1,
      "message": "This is a local variable, you don\u0027t need to put in the macro args. `ANGLE_TRY_TEMPLATE` uses `ANGLE_LOCAL_VAR` as the name, you can use something similar like `ANGLE_LOCAL_VKRESULT`. If this ever gets shadowed, there\u0027d be a compiler warning so it\u0027s pretty safe.",
      "range": {
        "startLine": 1333,
        "startChar": 17,
        "endLine": 1333,
        "endChar": 33
      },
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eaf8852_d0bb2bda",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 1333,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-29T23:53:55Z",
      "side": 1,
      "message": "I have removed this arg from the macro. However, `command` should still take it as an arg.",
      "parentUuid": "9e5e6e2d_f874d1fe",
      "range": {
        "startLine": 1333,
        "startChar": 17,
        "endLine": 1333,
        "endChar": 33
      },
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff62d02d_b99de7a6",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 21
      },
      "lineNbr": 1333,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-02T01:24:34Z",
      "side": 1,
      "message": "This macro now uses only the context and the command as inputs.",
      "parentUuid": "2eaf8852_d0bb2bda",
      "range": {
        "startLine": 1333,
        "startChar": 17,
        "endLine": 1333,
        "endChar": 33
      },
      "revId": "214acb51d0ed4aaf53b0a9550ef8374647107ac3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}