{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3db52096_c9258bc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-21T05:50:58Z",
      "side": 1,
      "message": "Going to use this uniform\u0027s spot for dither control (on Pixel4 where spec consts are not used)",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71e86e03_2fa7c52c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-21T14:41:35Z",
      "side": 1,
      "message": "nice",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3877a41_69d8a81c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-21T14:46:35Z",
      "side": 1,
      "message": "What do we gain from emulating dither on p4?",
      "parentUuid": "3db52096_c9258bc3",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68fc7701_7185fb81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-21T16:11:10Z",
      "side": 1,
      "message": "Same gain from emulating dither everywhere else. Correct rendering of 565 and 11_11_10 formats.",
      "parentUuid": "d3877a41_69d8a81c",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c6416a3_2f9666ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-21T16:15:13Z",
      "side": 1,
      "message": "Sorry let me clarify. What do we gain from supporting the P4 at all?",
      "parentUuid": "68fc7701_7185fb81",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7448a71_63c07ea5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-21T17:57:30Z",
      "side": 1,
      "message": "I would love to rip out the whole driver-uniforms-instead-of-spec-consts workaround which we carry around for QC, but that can\u0027t be done until we remove P4s from the CQ. Until then, adding and removing driver uniforms isn\u0027t that big a deal.\n\nMaybe the confusion comes from my adding the above comment in the first place, which wasn\u0027t really necessary (just thinking out loud).",
      "parentUuid": "3c6416a3_2f9666ce",
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf4701e_ffd1f8af",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 4
      },
      "lineNbr": 509,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-21T18:25:31Z",
      "side": 1,
      "message": "Shouldn\u0027t this be captureXfbBlock?\n\nOr can we remove captureXfbBlock and the dummy call to ANGLEGetXfbOffsets?   It looks like neither of those are actually added to the shader anymore.",
      "range": {
        "startLine": 509,
        "startChar": 45,
        "endLine": 509,
        "endChar": 59
      },
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "140076db_aafbf92d",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-21T14:41:35Z",
      "side": 1,
      "message": "can you clarify that this a glslang bug?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 83
      },
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0643925f_0debf8ac",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-21T16:11:10Z",
      "side": 1,
      "message": "This is not a glslang bug. Glslang is being smart and removing an empty function, but the transformer relies on it being there. Previously, the empty function call was inside an if, and glslang was not smart enough to remove it.\n\nI don\u0027t think there\u0027s much point in trying to fix things for glslang here.",
      "parentUuid": "140076db_aafbf92d",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 83
      },
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed8d5c26_9b324d69",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-21T16:15:13Z",
      "side": 1,
      "message": "I don\u0027t quite follow I guess. It\u0027s an ANGLE bug?",
      "parentUuid": "0643925f_0debf8ac",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 83
      },
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "880abf17_03e953cc",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-21T17:57:30Z",
      "side": 1,
      "message": "In a way.\n\nThe translator generates as much code as it can to minimize the amount of work the transformer needs to do. We had so far been \"lucky\" that glslang didn\u0027t mess the placeholder up (and yes, we were relying on the fact that glslang wasn\u0027t smart enough to optimize it away). At this point, that\u0027s reliable because we control the SPIR-V (so this is no longer a bug with the SPIR-V gen path).",
      "parentUuid": "ed8d5c26_9b324d69",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 83
      },
      "revId": "269d6ce32f79d0d9efd4f4e670e470eef238b8fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}