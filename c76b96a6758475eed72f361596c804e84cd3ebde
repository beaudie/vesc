{
  "comments": [
    {
      "key": {
        "uuid": "34cfd7e6_ae9d5175",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 1836,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-20T16:38:10Z",
      "side": 1,
      "message": "I can\u0027t say I really follow this CL. Looks like you have removed all usage of SubjectMessage::DEPENDENT_DIRTY_BITS, but the declaration (in Observer.h) is still there? If there is a front-end equivalent to what calling this with DEPENDENT_DIRTY_BITS does, it\u0027s not clear to me what that is.\n\nAlso, the behavior here has changed: previously everything would execute the code that follows, but now only STORAGE_CHANGE does that. Is that intentional?",
      "revId": "c76b96a6758475eed72f361596c804e84cd3ebde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52fad1ec_0a476919",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 21
      },
      "lineNbr": 1836,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-20T17:47:47Z",
      "side": 1,
      "message": "DEPENDENT_DIRTY_BITS are used to notify from the implementation to the GL object that some dirty bits are flagged. Dirty bits are usually tracked internally in the class so there is no direct front-end equivalent. I use the DEPENDENT_DIRTY_BITS in the next patch to signal that the Texture object should sync state of the Impl when there is implementation-side state to sync. It should become more apparent in the next patch.\n\nUnderstood that it\u0027s a lot to take in in a small code review. Maybe we could go over it in more detail face to face.\n\nI changed the above if to an ASSERT to make it clear that only STORAGE_CHANGED should be accepted here now. I don\u0027t believe we can get any other message.",
      "parentUuid": "34cfd7e6_ae9d5175",
      "revId": "c76b96a6758475eed72f361596c804e84cd3ebde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}