{
  "comments": [
    {
      "key": {
        "uuid": "0019ff96_a0dec4da",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-10-31T15:37:42Z",
      "side": 1,
      "message": "I\u0027m a bit concerned about this change because all of sudden our uniform validation code will be doing an extra string concatenation, which potentially could trigger an allocation. Could you redesign this method keeping in mind it\u0027s on the critical path for performance?\n\nYou can probably benchmark this with the null gl or d3d11 drivers and one of the uniforms perf tests.",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea5418b6_fe44a7c7",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-11-01T13:21:46Z",
      "side": 1,
      "message": "This function already had a for loop, so I wasn\u0027t too worried about adding an allocation here. However, now I wrote an optimized algorithm here without any allocations, it should perform better than before this patch.\n\nThe uniform perf test doesn\u0027t measure getting uniform locations, it just measures setting uniforms.",
      "parentUuid": "0019ff96_a0dec4da",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "757ad4ff_6eb88273",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-01T13:56:17Z",
      "side": 1,
      "message": "Hm, I think you might be right, I was getting confused between this and the methods that return uniforms from locations. Thanks anyway for improving the code.",
      "parentUuid": "ea5418b6_fe44a7c7",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 47
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25c421c7_17e1169c",
        "filename": "src/libANGLE/UniformLinker.h",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-10-31T15:37:42Z",
      "side": 1,
      "message": "don\u0027t do this - pass in const \u0026 and make local copies. modifying parameters can be a problematic design pattern.",
      "range": {
        "startLine": 90,
        "startChar": 42,
        "endLine": 91,
        "endChar": 69
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72517cc4_ccc569e9",
        "filename": "src/libANGLE/UniformLinker.h",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-11-01T13:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25c421c7_17e1169c",
      "range": {
        "startLine": 90,
        "startChar": 42,
        "endLine": 91,
        "endChar": 69
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "830a0e79_4f058edf",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-10-31T15:37:42Z",
      "side": 1,
      "message": "this is a bit awkward. why is this necessary? why don\u0027t we modify the translator to match the spec as well.",
      "range": {
        "startLine": 1986,
        "startChar": 11,
        "endLine": 1987,
        "endChar": 46
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a61dff_6689f917",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-11-01T13:21:46Z",
      "side": 1,
      "message": "I agree that this is a bit awkward. But changing this is a large amount of work, so I\u0027d rather consider it separately. It can\u0027t easily be changed in the D3D layer without changing the translator as well, as they have some direct interaction. And modifying the translator requires at least three steps: 1. Add support for new variable query interface in translator. 2. Stop using the old variable query interface in Chromium. 3. Remove the old variable query interface.\n\nFor now I added a TODO in the code, do you think that\u0027s OK?",
      "parentUuid": "830a0e79_4f058edf",
      "range": {
        "startLine": 1986,
        "startChar": 11,
        "endLine": 1987,
        "endChar": 46
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a398d8b5_7f26a39a",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1987,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-11-01T13:56:17Z",
      "side": 1,
      "message": "That\u0027s fine. It\u0027s a small enough thing we can do it at some future point.",
      "parentUuid": "57a61dff_6689f917",
      "range": {
        "startLine": 1986,
        "startChar": 11,
        "endLine": 1987,
        "endChar": 46
      },
      "revId": "ead27e9bfd43378aca379151c1efc5836d7a48d4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}