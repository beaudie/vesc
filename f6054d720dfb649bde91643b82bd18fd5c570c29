{
  "comments": [
    {
      "key": {
        "uuid": "129df66f_11fc4cf4",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2015-03-03T02:41:04Z",
      "side": 1,
      "message": "Having a different setting for something so fundamental seems like a bad idea to me, but again I\u0027m not an ANGLE reviewer. I\u0027d encourage you to not use \u003cfuture\u003e.\n\nHaving said that, clang-cl can now parse the \u003cfuture\u003e header as far as I can tell. If you want to go ahead with this patch as-is, you could include \u003ceh.h\u003e before including \u003cfuture\u003e, and then it\u0027ll compile fine with -D_HAS_EXCEPTIONS\u003d0 too. You\u0027ll still get a warning from cl about this being a bad idea.\n\n(Also see notes on https://code.google.com/p/chromium/issues/detail?id\u003d459797)",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72ce32a5_148b349a",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-03-03T17:22:22Z",
      "side": 1,
      "message": "Given that clang-cl is getting more compatible, I think we can decide between turning it on for all Windows/WinRT with \u003cfuture\u003e or with a hand-rolled threads lib on top of Win32 threads. Nico do you know of any runtime problems could come about from using \u003cfuture\u003e?",
      "parentUuid": "129df66f_11fc4cf4",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92cf269e_f579d885",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2015-03-03T17:54:53Z",
      "side": 1,
      "message": "See the bug I linked to: we\u0027re not sure how well it\u0027s going to work on XP.\n\nWe definitely don\u0027t want to:\n* turn on _HAS_EXCEPTIONS\u003d1 while /EH turns handlers off (those settings should match)\n* turn handlers on (because code size and whatnot, again see that bug)\n\nSo if you want to use the async stuff, you\u0027ll have to re-suppress the cl warning about try blocks.",
      "parentUuid": "72ce32a5_148b349a",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7270f218_045256bc",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2015-03-03T18:01:18Z",
      "side": 1,
      "message": "Note that WinRT doesn\u0027t support Win32 threads.\n\nIf we are confident that \u003cfuture\u003e works correctly on Clang at runtime, then I am happy to re-enable this change across all platforms.\n\nThis code will not be executed on Windows XP. I don\u0027t see it bringing in any new dependencies to ANGLE either.\n\nHow about we move forward with this, then?\n- Use \u003cfuture\u003e\n- Set _HAS_EXCEPTIONS\u003d0\n- Disable warning C4530\n\nThanks,\nAustin",
      "parentUuid": "92cf269e_f579d885",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92cf269e_b56a409c",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2015-03-03T18:08:45Z",
      "side": 1,
      "message": "If you include \u003ceh.h\u003e before \u003cfuture\u003e you don\u0027t need _HAS_EXCEPTIONS\u003d0",
      "parentUuid": "7270f218_045256bc",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "121256d8_49d00147",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2015-03-03T18:18:46Z",
      "side": 1,
      "message": "I thought we wanted _HAS_EXCEPTIONS\u003d0?",
      "parentUuid": "92cf269e_b56a409c",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "121256d8_a9b2ddfc",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2015-03-03T20:07:08Z",
      "side": 1,
      "message": "Yeah, sorry, I misread your reply. _HAS_EXCEPTIONS\u003d0 is correct. I meant \"you don\u0027t need #define _HAS_EXCEPTIONS 1 locally if you include \u003ceh.h\u003e\" but that doesn\u0027t have anything to do with what you wrote, now that I look at it again :-P\n\nUp to Jamie how he feels about disabling 4530.",
      "parentUuid": "121256d8_49d00147",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9242c6dc_00cae84a",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-03-03T20:42:50Z",
      "side": 1,
      "message": "I\u0027m fine with disabling 4530 as long as we document why. In particular, can we disable it when including \u003cfuture\u003e?\n\nI\u0027m good with moving forward using \u003cfuture\u003e since it will be the most cross-platform solution.",
      "parentUuid": "121256d8_a9b2ddfc",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7251d2a7_dc5aad5d",
        "filename": "build/common_defines.gypi",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2015-03-03T20:48:05Z",
      "side": 1,
      "message": "Great! \n\nShall I disable the warning via a #pragma before including \u003cfuture\u003e? I just briefly tested that now and it compiles.\n\nAlso, would you like me to leave in the #ifdefs (ANGLE_MULTITHREADED_D3D_SHADER_COMPILE) so we can easily disable multithreaded compilation in the future?",
      "parentUuid": "9242c6dc_00cae84a",
      "revId": "f6054d720dfb649bde91643b82bd18fd5c570c29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}