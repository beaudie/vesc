{
  "comments": [
    {
      "key": {
        "uuid": "e4d98d70_6ea98fdb",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 12
      },
      "lineNbr": 314,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-08-20T15:06:58Z",
      "side": 1,
      "message": "\u003e\u003d or is it valid to call with \u003d\u003d size?",
      "range": {
        "startLine": 314,
        "startChar": 17,
        "endLine": 314,
        "endChar": 18
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4485f957_b1e8202a",
        "filename": "src/compiler/translator/IntermNode.cpp",
        "patchSetId": 12
      },
      "lineNbr": 314,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2015-08-20T17:42:59Z",
      "side": 1,
      "message": "It is valid to call with position \u003d\u003d size, it is the same as insert(mSequence.end(), ...)",
      "parentUuid": "e4d98d70_6ea98fdb",
      "range": {
        "startLine": 314,
        "startChar": 17,
        "endLine": 314,
        "endChar": 18
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4a9e95f_47b07cf8",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2015-08-19T17:57:31Z",
      "side": 1,
      "message": "The same question I asked in the conformance test CL: is this the correct behavior? What does the spec say for out of range dynamic indices?",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 15
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4c23555_578f8e86",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-08-20T08:00:18Z",
      "side": 1,
      "message": "The base spec says that this is undefined behavior. KHR_robust_buffer_access_behavior says that either zero or any value from the active program\u0027s memory may be returned. If you think that returning zero is better, we can do that instead.",
      "parentUuid": "c4a9e95f_47b07cf8",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 15
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "248c8586_133fae3d",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2015-08-20T17:42:59Z",
      "side": 1,
      "message": "Thanks for clarifying.  I think returning zero is better because it\u0027s testable.",
      "parentUuid": "a4c23555_578f8e86",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 15
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24656596_e8ed5383",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-08-20T19:08:48Z",
      "side": 1,
      "message": "Yep, it\u0027s easier to test. Though on the other hand, this only applies for only a subset of indexing operations - for the others, clamping the index would more typically be used. Would it be better to actually make this behave as if the index was clamped to be more consistent with how out-of-range indices get handled in other cases?",
      "parentUuid": "248c8586_133fae3d",
      "range": {
        "startLine": 108,
        "startChar": 8,
        "endLine": 108,
        "endChar": 15
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84de1159_6b51812e",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 424,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2015-08-20T15:06:58Z",
      "side": 1,
      "message": "doesn\u0027t this only apply to 300 version shaders? sorry I\u0027m fuzzy on the details, but can we skip this on ESSL 1?",
      "range": {
        "startLine": 424,
        "startChar": 31,
        "endLine": 424,
        "endChar": 44
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e430ad80_d95637db",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 424,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2015-08-20T17:42:59Z",
      "side": 1,
      "message": "+1\nWe should avoid this step when the dynamic indexing isn\u0027t allowed by the spec.",
      "parentUuid": "84de1159_6b51812e",
      "range": {
        "startLine": 424,
        "startChar": 31,
        "endLine": 424,
        "endChar": 44
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44e3394a_e155e6cc",
        "filename": "src/compiler/translator/RemoveDynamicIndexing.cpp",
        "patchSetId": 12
      },
      "lineNbr": 424,
      "author": {
        "id": 1001641
      },
      "writtenOn": "2015-08-20T19:08:48Z",
      "side": 1,
      "message": "The shader version parameter is here simply to make TLValueTrackingTraverser to use the right built-in function table to determine which built-ins have out parameters, but maybe it\u0027s possible to remove it and hard-code 300 in RemoveDynamicIndexingTraverser. I\u0027ll go through the ESSL1.00 spec to make sure this isn\u0027t required even in the non-minimal version of the spec.",
      "parentUuid": "e430ad80_d95637db",
      "range": {
        "startLine": 424,
        "startChar": 31,
        "endLine": 424,
        "endChar": 44
      },
      "revId": "0a8602284f0a14cc87e185002b03cb12286cd9df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}