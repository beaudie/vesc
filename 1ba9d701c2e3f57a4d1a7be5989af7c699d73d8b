{
  "comments": [
    {
      "key": {
        "uuid": "2257ed01_35fd13c6",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-03-13T21:18:04Z",
      "side": 1,
      "message": "Can you make this a helper function?\n6 is not obvious to me here.",
      "range": {
        "startLine": 760,
        "startChar": 28,
        "endLine": 760,
        "endChar": 84
      },
      "revId": "1ba9d701c2e3f57a4d1a7be5989af7c699d73d8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0b469fa_94136658",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-14T14:27:04Z",
      "side": 1,
      "message": "Sure.\n\n6 comes from the default size of query pools (64). There\u0027s currently no \"correct\" way of constructing this id, as each pool can theoretically have different sizes. We are also losing information from the top bits of the query pool address.\n\nThis is just a debug feature, so we should be fine with this.",
      "parentUuid": "2257ed01_35fd13c6",
      "range": {
        "startLine": 760,
        "startChar": 28,
        "endLine": 760,
        "endChar": 84
      },
      "revId": "1ba9d701c2e3f57a4d1a7be5989af7c699d73d8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac36c70f_a2fd8430",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-03-14T18:22:28Z",
      "side": 1,
      "message": "This size could change runtime the way the code is set up. I do side with Yuly that it could be safer. Could you do something like make a query ID counter in the command graph? We can optimize this later if need be.",
      "parentUuid": "c0b469fa_94136658",
      "range": {
        "startLine": 760,
        "startChar": 28,
        "endLine": 760,
        "endChar": 84
      },
      "revId": "1ba9d701c2e3f57a4d1a7be5989af7c699d73d8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15d1f032_4d28429d",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-14T18:39:45Z",
      "side": 1,
      "message": "The only way I can see this becoming bullet proof is if `dumpGraphDotFile` creates a special map for queries that assigns IDs based on `std::make_pair(queryPool, queryIndex)`.\n\nI\u0027ll do that.",
      "parentUuid": "ac36c70f_a2fd8430",
      "range": {
        "startLine": 760,
        "startChar": 28,
        "endLine": 760,
        "endChar": 84
      },
      "revId": "1ba9d701c2e3f57a4d1a7be5989af7c699d73d8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b7c87ba_478f8443",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-03-14T18:51:42Z",
      "side": 1,
      "message": "I see. Because you refer to the query in multiple places? Map is way too heavy for this, I prefer your current approach to that. If anything you could just change ResourceID into {ResourceID/SubresourceID} in the diagnostic info.",
      "parentUuid": "15d1f032_4d28429d",
      "range": {
        "startLine": 760,
        "startChar": 28,
        "endLine": 760,
        "endChar": 84
      },
      "revId": "1ba9d701c2e3f57a4d1a7be5989af7c699d73d8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}