{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1fe88ddf_9b9d91e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-27T19:34:50Z",
      "side": 1,
      "message": "**Alternative fix**: https://chromium-review.googlesource.com/c/angle/angle/+/4296014",
      "revId": "af1ca4da0316ada41a04e372b34b7e2d897affef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34783991_438164e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-07T18:46:57Z",
      "side": 1,
      "message": "Is the bug you try to fix hitting any real usage?\n\nMy understanding is that EGLImage currently also have another bug (https://issuetracker.google.com/169868803). There are effort to make all contexts references EGLImage to be shared but then reverted, then individual locks added, but not sure if this is completely fixed. If not, we have a bigger problem to deal with as well.\n\nThe way I am thinking is to let EGLImage have multiple ImageHelper objects, one per shared group. They will share the same VkDeviceMemory. Then We will sync the layout at higher level code, where egl API is called. This way, the vulkan backend is thread safe, EGLImage will behave just like normal texture. You do not have bugs like this. I believe one context write and another context read case there is a clear egl API boundary you have to call. I am not 100% sure on two contexts both read EGLImage case, is it required to have egl API call. As long as there is egl API call requirment, we can do necessary sync at that egl call stack. Just want to throw this idea here, if this bug is not blocking us form shipping, we could wait a bit until we resolve this ImageHelper for EGLImage thread safety issue.",
      "revId": "af1ca4da0316ada41a04e372b34b7e2d897affef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}