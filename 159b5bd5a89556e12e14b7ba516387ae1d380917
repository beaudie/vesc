{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e741dee1_b406d66e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-21T21:31:26Z",
      "side": 1,
      "message": "Nice!",
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4e72c93_e0107456",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-21T21:31:26Z",
      "side": 1,
      "message": "as a general principle. avoid inheritance, use composition. it\u0027s useful at times for saving a few lines. hopefully not in this case.",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "049ec66f_d7e951a1",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-22T12:45:54Z",
      "side": 1,
      "message": "I agree with your general principle. In this case the inheritance is required for dynamic type checking and casting, as the CL API passes Buffer, Image and Pipe as Memory pointers.",
      "parentUuid": "f4e72c93_e0107456",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aeab5ab_e105ef7a",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-22T13:11:53Z",
      "side": 1,
      "message": "I see. In that case I recommend we start off by mirroring the CL API exactly and omitting CLBuffer/CLImage etc if there aren\u0027t CL types for these.",
      "parentUuid": "049ec66f_d7e951a1",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89d7975b_128f9f35",
        "filename": "src/libANGLE/CLBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-22T13:25:40Z",
      "side": 1,
      "message": "The CL specs explicitly describe buffer, image and pipe objects, and the API has commands which explicitly require objects of these types, but they are passed with memory handles. It makes more sense here to follow the CL spec than the header files.",
      "parentUuid": "3aeab5ab_e105ef7a",
      "range": {
        "startLine": 16,
        "startChar": 12,
        "endLine": 16,
        "endChar": 28
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80ce1c69_0549418f",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-21T21:31:26Z",
      "side": 1,
      "message": "I wonder if we should make CL support optional to start with. so we don\u0027t run into issues down the line with binary size from some downstream users. how hard would it be to set up now?",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "499cbb99_3cca441b",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-22T12:45:54Z",
      "side": 1,
      "message": "Good idea, done",
      "parentUuid": "80ce1c69_0549418f",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "add56f24_c2ef0137",
        "filename": "src/libGLESv2.gni",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-04-22T12:48:25Z",
      "side": 1,
      "message": "I tested the build with `angle_enable_cl \u003d false` locally, as it is not in the CI.",
      "parentUuid": "499cbb99_3cca441b",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 232,
        "endChar": 29
      },
      "revId": "159b5bd5a89556e12e14b7ba516387ae1d380917",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}