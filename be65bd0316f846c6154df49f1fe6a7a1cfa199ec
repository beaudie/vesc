{
  "comments": [
    {
      "key": {
        "uuid": "328ec7a2_2790865e",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-28T08:24:26Z",
      "side": 1,
      "message": "Remove it. I think program-\u003ehasLinkedComputeShader() is true means that the corresponding program was linked successfully.",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ffaae89_dfdf27c8",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1138134
      },
      "writtenOn": "2017-11-28T08:38:15Z",
      "side": 1,
      "message": "Not really. This ifs means that the program is a successfully linked RENDERING program. When you dispatch compute against a rendering program, it should generate INVALID_OPERATION. \n\nBut if you remove program-\u003eisLinked(). Then the program can be a unsuccessfully re-linked program (program is not null, so it is a unsuccessfully re-linked program).\n\nThese two are quite different.",
      "parentUuid": "328ec7a2_2790865e",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73007be5_19429cc2",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-28T09:11:15Z",
      "side": 1,
      "message": "Sorry, my previous comment is not correct. I rechecked the spec. There are following description in spec \u0027An INVALID_OPERATION error is generated if program is the name of a program that has not been successfully linked, or of a linked program object that contains no compute shaders.\u0027. I think \u0027program-\u003eisLinked() \u0026\u0026 !program-\u003ehasLinkedComputeShader()\u0027 corresponds to \u0027a linked program object that contains no compute shaders\u0027. But it seems that you miss the check if program is the name of a program that has not been successfully linked.",
      "parentUuid": "3ffaae89_dfdf27c8",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "298efff6_d8fbc000",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1138134
      },
      "writtenOn": "2017-11-28T11:38:13Z",
      "side": 1,
      "message": "See my comments below, I have already stated this situation. If a program is not successfully linked, then it depends on the original pipeline state. If there is no valid program before the failed link. Then code snippet between line 1387 to line 1392 will catch that error and report INVALID_OPERATION. Because there would be no active program at all. \n\nFor a re-link failure (We already have a valid program resided in the pipeline), the unsuccessfully re-link failure should not affect the original state, we can dispatch compute as usual. This change is used to fix the bug for this situation. The old code would report INVALID_OPERATION for this situation, it is wrong. See more information at issue 2266 for this situation. It is indeed a little tricky and complicated.",
      "parentUuid": "73007be5_19429cc2",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1f8ec88_412fc56c",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1138134
      },
      "writtenOn": "2017-11-28T12:05:17Z",
      "side": 1,
      "message": "An explanation about why code snippet between line 1387 and line 1392 can catch the situation you said. Assuming this test: \nstep 1: UseProgram(0); // it is the default state, I call it to make it clear. \nstep 2: GLuint program \u003d glCreateProgram();\nstep 3: CreateShaderAndComipleAndAttachToProgram(); // you know what I want to do in this func\nstep 4: LinkProgram(program); // But FAILED to link. \n\nstep 5: UseProgram(program); // Here is the point. Would the failed program be installed into pipeline? NO. You can refer to the spec for UseProgram, you can also refer to the code in entry_point_es_2_0_autogen.cpp in ANGLE for UseProgram: validation failure (because program is failed to link, use this program will report INVALID_OP) will do nothing at all, it will return directly, without any call site to driver at all. The program id in use is still 0. It means that no valid program in use.  \n\nDispatchCompute(); // When we validate DispatchCompute in this function, \u0027program\u0027 variable at line 1387 will be nullptr, so it has already reported INVALID_OP for unsuccessfully linked program. So the situation you said is not a problem. But if we already have a valid program in use at step 1, and failed to re-link that program, the old code snippet will report INVALID_OP, it is incorrect. This change can fix that issue.",
      "parentUuid": "298efff6_d8fbc000",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4a656f6_c7dc3c9b",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1394,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-29T03:03:38Z",
      "side": 1,
      "message": "To summarize, the argument point is that you think if a program object is active, it must have been successfully linked. So you don\u0027t need to recheck \u0027if program is the name of a program that has not been successfully linked\u0027. \n\nI have filed a bug in https://github.com/KhronosGroup/OpenGL-API/issues/24. It looks good for me. Let\u0027s hear other reviewers\u0027 opinion. Thanks.",
      "parentUuid": "c1f8ec88_412fc56c",
      "range": {
        "startLine": 1394,
        "startChar": 8,
        "endLine": 1394,
        "endChar": 31
      },
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c069c27e_3d48b14f",
        "filename": "src/libANGLE/validationES31.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1396,
      "author": {
        "id": 1138134
      },
      "writtenOn": "2017-11-28T08:22:34Z",
      "side": 1,
      "message": "If the compute program is unsuccessfully linked, the failed program would not be installed to the pipeline even you called UseProgram(). In this situation(nsuccessfully linked), if you dispatch compute, it depends on the previous state: \n1) We already have a valid program in use because of previous call to UseProgram, then It is OK. Just continue to dispatch compute and use the old binary resided in pipeline, we should not report error here. \n2) No valid program is in use. Then it has already reported INVALID_OPERATION at code snippet 1387 ~ 1392. Because no program is installed in the pipeline at all (Even you called UseProgram with the unsuccessfully linked program).",
      "revId": "be65bd0316f846c6154df49f1fe6a7a1cfa199ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}