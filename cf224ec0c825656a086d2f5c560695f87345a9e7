{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "71f8d19f_0352c764",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1206,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-24T20:48:17Z",
      "side": 0,
      "message": "Potentially controversial, but so far, IMG and SwiftShader confirmed that this self-dependency is harmless by itself. We\u0027ll see what Samsung and ARM have to say.",
      "revId": "cf224ec0c825656a086d2f5c560695f87345a9e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19338569_ee93199d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1206,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-10T14:18:21Z",
      "side": 0,
      "message": "OK, I\u0027d like to hold off until we have proof this isn\u0027t a performance regression. Also I don\u0027t understand why you can\u0027t keep this conditional.",
      "parentUuid": "71f8d19f_0352c764",
      "revId": "cf224ec0c825656a086d2f5c560695f87345a9e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95c52a4f_226415ef",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1206,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-12T00:38:18Z",
      "side": 0,
      "message": "AMD/Samsung also confirmed that it\u0027s harmless. I\u0027ll have to poke ARM again.\n\nThe reason I can\u0027t keep this conditional is that we need a compatible VkRenderPass before the RP starts, and the real VkRenderPass at the end has to match. We can\u0027t know if an in-RP barrier would be necessary or not, so we can\u0027t decide to add this self-dependency after the fact. This is a problem both for advanced blend and framebuffer fetch. We currently break the RP on framebuffer fetch barrier for descriptor-related reasons, which I eventually want to fix (so framebuffer fetch would _actually_ be fast).",
      "parentUuid": "19338569_ee93199d",
      "revId": "cf224ec0c825656a086d2f5c560695f87345a9e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30ec9e0a_e8cedd09",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1206,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-16T06:19:30Z",
      "side": 0,
      "message": "Heard back from ARM that this is harmless as well.",
      "parentUuid": "95c52a4f_226415ef",
      "revId": "cf224ec0c825656a086d2f5c560695f87345a9e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbead698_dce5ff1a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1206,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-03-16T22:26:27Z",
      "side": 0,
      "message": "I also have a bit worry on this back on my mind (new GPUs and new driver optimizations etc). But I also do not have alternative proposal. So I am +1 on the CL, but if any ways to safe guard this either with code or performance test will be nice.",
      "parentUuid": "30ec9e0a_e8cedd09",
      "revId": "cf224ec0c825656a086d2f5c560695f87345a9e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}