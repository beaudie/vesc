{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "425eacf2_f9748587",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-06T15:03:07Z",
      "side": 1,
      "message": "Shabi: what\u0027s the status of this? Can we mark it WIP?",
      "revId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c0934eb_194a2a5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-06T15:11:45Z",
      "side": 1,
      "message": "Done. Will be abandoned eventually.",
      "parentUuid": "425eacf2_f9748587",
      "revId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d24c71_9cf541d5",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1714,
      "author": {
        "id": 1215674
      },
      "writtenOn": "2020-07-07T14:17:51Z",
      "side": 1,
      "message": "I\u0027m not familiar with Angle at all. But, would it be a case to use the PlatformMethod postTask API?\n\nAs far as I get, outside of chrome it will have a std::async(...) call.\nThat said, it may have the restriction on the amount of threads.\n\nWithin chromium code base, this will use worker thread pool.\n\nAlso, I would like to see a trace event on these tasks (when possible).\nA thread without a trace event is not visible at all in chrome://tracing and this is making it really hard to know what is happening in case of jank/hangs or slow startup.\n\nWDYT?",
      "revId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a87d76ae_c38a6736",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1714,
      "author": {
        "id": 1215674
      },
      "writtenOn": "2020-07-07T15:08:01Z",
      "side": 1,
      "message": "I just realized I missed part of your comment.\nAbout thread priority : display.\n\nThat can probably be doable, but not trivial.\nWe may need to change the platform API.\nThe current ThreadGroupImpl only support two priority levels (Foreground and Background).\n\nThat said. It may worth to redirect these calls to the WorkerThread anyway.\nMaybe with a postTask with high priority. This will ensures a consistant\nTRACE_EVENT across the code base and ensures it is easy to redirect when\nthe code is ready for it.\n\nOn short term, that can still be your std::thread{call}.detach(), which\nis about the same than std::async.\n\nWe can sync off-line discussion if you want.",
      "parentUuid": "e2d24c71_9cf541d5",
      "revId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "8b867ff7991aa4da219cc4faea0e6b0f0325e33e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}