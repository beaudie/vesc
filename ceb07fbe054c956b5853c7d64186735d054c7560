{
  "comments": [
    {
      "key": {
        "uuid": "2772c152_59c82650",
        "filename": "src/libANGLE/renderer/metal/ContextMtl.mm",
        "patchSetId": 15
      },
      "lineNbr": 198,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: you can clean this up with early returns.\n\nif (count \u003c\u003d 3)\n   return drawArrays;\n\nif (hasBaseVertexInstancedDraw)\n   return drawTriFanArraysWithBaseVertex;\n\nreturn drawTriFanArraysLegacy;",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 198,
        "endChar": 75
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f7a1473_84f5e89d",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.h",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "I like that you encoded these. I have a suggestion for a different design.\n\nCan you make these into FeaturesMtl members? Not sure if you created such a structure yet. Limitations are non-conformant gaps that are exposed all the way to the GL front-end. They don\u0027t have a back-end specific equivalent. Features are toggles that apply to a specific back-end.",
      "range": {
        "startLine": 31,
        "startChar": 7,
        "endLine": 31,
        "endChar": 22
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6fa3542_886f8584",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.h",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2019-10-29T02:08:41Z",
      "side": 1,
      "message": "FeaturesMtl means runtime can change the flags inside that struct, right? I don\u0027t think the limits here can be changed.",
      "parentUuid": "0f7a1473_84f5e89d",
      "range": {
        "startLine": 31,
        "startChar": 7,
        "endLine": 31,
        "endChar": 22
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a0b2e90_9c2171a6",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl.h",
        "patchSetId": 15
      },
      "lineNbr": 161,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: can you use angle::PackedEnumMap here? We can define a type alias like\n\ntemplate \u003ctypename T\u003e\nusing TextureTypeMap \u003d angle::PackedEnumMap\u003cTextureType, T\u003e;\n\nin angletypes.h. See TextureMap.",
      "range": {
        "startLine": 161,
        "startChar": 20,
        "endLine": 161,
        "endChar": 33
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80008a06_52844814",
        "filename": "src/libANGLE/renderer/metal/DisplayMtl_api.h",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "I like this design. Thanks!",
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3210952e_c85229ee",
        "filename": "src/libANGLE/renderer/metal/VertexArrayMtl.mm",
        "patchSetId": 15
      },
      "lineNbr": 129,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: inline doesn\u0027t do anything in source files. If you want this function inlined for performance reasons use ANGLE_INLINE which uses inline forcing.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 7
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43b0f8c7_4b48c6e8",
        "filename": "src/libANGLE/renderer/metal/mtl_command_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 247,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: you don\u0027t need inline on a function prototype. Only on the definition in the header.",
      "range": {
        "startLine": 247,
        "startChar": 4,
        "endLine": 247,
        "endChar": 10
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be892dbe_0036a47c",
        "filename": "src/libANGLE/renderer/metal/mtl_command_buffer.mm",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: you can use the explicit type here for clarity. Also this should probably be a reference type.",
      "range": {
        "startLine": 43,
        "startChar": 13,
        "endLine": 43,
        "endChar": 18
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b440e0f2_52dc9185",
        "filename": "src/libANGLE/renderer/metal/mtl_command_buffer.mm",
        "patchSetId": 15
      },
      "lineNbr": 52,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 13
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd357769_954d276e",
        "filename": "src/libANGLE/renderer/metal/mtl_glslang_utils.h",
        "patchSetId": 15
      },
      "lineNbr": 21,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-28T17:44:17Z",
      "side": 1,
      "message": "nit: I suggest we do away with the class design and use plain old functions.",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "ceb07fbe054c956b5853c7d64186735d054c7560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}