{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b672749a_89045d78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-04T12:41:42Z",
      "side": 1,
      "message": "test request from shabi -\n\nBasically:\n\nCreate two contexts that are not shared\nMake one current and draw such that this empty desc set is used\nOn the same thread, make the other context current and issue a similar draw\nMake uncurrent\nDestroy both contexts\n\nThis would catch double-free if that accidentally happens.",
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17d6b396_62ce4580",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-04T20:35:56Z",
      "side": 1,
      "message": "Done\n\n@syoussefi@chromium.org - is this the test you had in mind? if so,",
      "parentUuid": "b672749a_89045d78",
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8461de1e_22e8a1b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-04T22:45:27Z",
      "side": 1,
      "message": "Yes, thanks. Didn\u0027t realize it\u0027ll be this simple, probably we already had something like this already :-S",
      "parentUuid": "17d6b396_62ce4580",
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f81fefdb_e7d2d198",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T16:58:20Z",
      "side": 1,
      "message": "Why not insert the {emptyDesc, renderer-\u003emPlaceHolderDescriptorSetLayout} into the cache at the DescriptorSetLayoutCache initialize time? Then you you can change this if check to `ASSERT(!desc.empty());`",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8558c23e_9e0673ee",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-03T17:00:59Z",
      "side": 1,
      "message": "I had the same thought, but apparently that was costly: https://chromium-review.googlesource.com/c/angle/angle/+/5483308",
      "parentUuid": "f81fefdb_e7d2d198",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a5e8d2f_5a387c0e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T17:05:10Z",
      "side": 1,
      "message": "What was costly? Also, you don\u0027t do that in DescriptorSetLayoutCache::getDescriptorSetLayout, I am suggesting you do that at cache create/init time (i.e, always insert into cache so that there will be no if check here)",
      "parentUuid": "8558c23e_9e0673ee",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf36762_a654e345",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-03T19:31:19Z",
      "side": 1,
      "message": "\u003e What was costly?\n\ncalling into vulkan to create a handle that will most likely never be used for any subsequent draw operations and the sheer number of handles that get created.\nThis was the stat i have in my notes for when i ran end2end test suite -\n - before change - empty DescriptorSetLayoutDesc handles created: 43,812\n - after change - empty DescriptorSetLayoutDesc handles created: 8,309 reused: 35,503\n\nThis is not from real game scenario but i saw an opportunity to reduce vulkan handle count and took it\n\n\u003e Why not insert the {emptyDesc, renderer-\u003emPlaceHolderDescriptorSetLayout} into the cache at the DescriptorSetLayoutCache initialize time?\n\nmany games link 100s or 1000s of program link during loading scene in non-shared contexts. Having the placeholder private to a sharegroup will mean having duplicates but i like how the suggestion fits into existing code, at the cost of duplication\n\nSince i have no real game data to push the \"duplicate placeholder\" theory, if you all insist, i will make the update. Let me know",
      "parentUuid": "1a5e8d2f_5a387c0e",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35a7b08f_3ce11cef",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T19:52:05Z",
      "side": 1,
      "message": "I am not suggesting to create a handle for each shareGroupVk. What I am saying is that you keep the renderer code that creates mPlaceHolderDescriptorSetLayout per renderer. But then you insert mPlaceHolderDescriptorSetLayout into each per shareGroup cache when cache initializes (I think from contextVk::initialize because there is no initialize in SharGroupVk). So you will still have one handle but shared across all share groups.",
      "parentUuid": "caf36762_a654e345",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc34d58a_4987d648",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-03T19:55:44Z",
      "side": 1,
      "message": "Does that work out when the share group cache is destroyed?",
      "parentUuid": "35a7b08f_3ce11cef",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b1a5cc8_ab4f9618",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T19:59:58Z",
      "side": 1,
      "message": "Can you set the value to VK_NULL_HANDLE before shareGroup destroy?",
      "parentUuid": "fc34d58a_4987d648",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3356544f_4577e5db",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-06-03T20:05:21Z",
      "side": 1,
      "message": "Whatever the solution, Mohan do you think you could add a test for this? Basically:\n\n- Create two contexts that are not shared\n- Make one current and draw such that this empty desc set is used\n- On the same thread, make the other context current and issue a similar draw\n- Make uncurrent\n- Destroy both contexts\n\nThis would catch double-free if that accidentally happens.",
      "parentUuid": "4b1a5cc8_ab4f9618",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49d6c7de_2deb817d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-03T20:07:10Z",
      "side": 1,
      "message": "\u003e Does that work out when the share group cache is destroyed?\n\u003e Can you set the value to VK_NULL_HANDLE before shareGroup destroy?\n\ni can have the renderer take a ref when it creates the handle so it is only the renderer that can destroy it?\n\n\u003e do you think you could add a test for this?\n\nwill do",
      "parentUuid": "3356544f_4577e5db",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fc9b45_6c3df4ac",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T20:10:06Z",
      "side": 1,
      "message": "I think refcount is over kill here. Just set to null and let renderer to destroy is enough. You cant have sharegroup when renderer destroyed.",
      "parentUuid": "49d6c7de_2deb817d",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd18d0ae_528afefd",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-03T20:16:38Z",
      "side": 1,
      "message": "\u003e Just set to null and let renderer to destroy is enough\n\nare you suggesting i modify `DescriptorSetLayoutCache::destroy` to explicitly check for an empty `DescriptorSetLayoutDesc` and skip doing anything for such an entry?",
      "parentUuid": "f8fc9b45_6c3df4ac",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e0e7f9_ae1474b1",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T20:25:16Z",
      "side": 1,
      "message": "I was thinking in ShareGroupVk::destroy(), you do something like this:\n    auto iter \u003d mPayload.find(emptyDesc);\n    ASSERT(iter !\u003d mPayload.end());\n    iter.second \u003d VK_NULL_HANDLE;",
      "parentUuid": "cd18d0ae_528afefd",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b470a680_5e2c595e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T20:29:37Z",
      "side": 1,
      "message": "Or you can add that three lines of code in DescriptorSetLayoutCache::destroy().",
      "parentUuid": "56e0e7f9_ae1474b1",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "602bf00e_cd3c5ab8",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T20:32:45Z",
      "side": 1,
      "message": "Actually looks like RefCountedDescriptorSetLayout already refCounted, so maybe refcounting is easier. You can play with it.",
      "parentUuid": "b470a680_5e2c595e",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee144b88_9856b872",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T20:38:55Z",
      "side": 1,
      "message": "`erase(iter);`",
      "parentUuid": "602bf00e_cd3c5ab8",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8daeaaa3_f38e65e4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-03T23:42:04Z",
      "side": 1,
      "message": "say we have 3 share groups, when creating the 1st one i will need to `std::move` the placeholder `vk::DescriptorSetLayout` owned by renderer since that is the only supported variant of constructor in `AtomicRefCounted`. Which will mean the 2nd and 3rd sharegroups will need to recreate a new handle\n\nfeels like this is getting more complicated than my original patch?",
      "parentUuid": "ee144b88_9856b872",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dcf8c59_9c1d47b3",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-06-03T23:55:02Z",
      "side": 1,
      "message": "You can easily fix that. either add a copy constructor in AtomicRefCounted that adds refCount instead of making cgopy (which I think useful anyway). Or you just retrieve the underline object and create a new RefCountedDescriptorSetLayout out of it. The benefit is that you pay the cost once instead of every time do a if check in getDescriptorSetLayout, which gets called more often. But I agree this is minor issue, so will leave up to you.",
      "parentUuid": "8daeaaa3_f38e65e4",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7844bccf_dc2c8734",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-06-04T12:41:42Z",
      "side": 1,
      "message": "\u003e add a copy constructor in AtomicRefCounted that adds refCount instead of making cgopy (which I think useful anyway). Or you just retrieve the underline object and create a new RefCountedDescriptorSetLayout out of it.\n\ni needed such a \"sharable\" `AtomicRefCounted` in many places but unfortunately copy-constructor is not the way to do this since it invalidates the ownership invariant. The underlying assumption in `AtomicRefCounted` is that the object owns the underlying `mObject` but having 2 different `AtomicRefCounted` \"own\" the same underlying `mObject` will be a source of bugs\n\n\u003e The benefit is that you pay the cost once instead of every time do a if check in getDescriptorSetLayout\n\nthis is true but the if-check is only on a cache miss and im hoping\ncache hit count \u003e\u003e\u003e cache miss count\n\nwith all of the above in mind im going to leave the code as-is",
      "parentUuid": "5dcf8c59_9c1d47b3",
      "range": {
        "startLine": 7490,
        "startChar": 4,
        "endLine": 7495,
        "endChar": 5
      },
      "revId": "9453591a7167d36bedf1e3aa1b46cc0be23c8eb1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}