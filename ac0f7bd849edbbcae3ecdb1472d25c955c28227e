{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c9683115_2ce4a499",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-17T14:56:34Z",
      "side": 1,
      "message": "Separated out BuildSPIRV into its own file",
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "720e00a1_d4c72cf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "It looks like this is laying some good groundwork.   It\u0027ll be interesting to see how this all turns out.",
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d48b132f_ddaa3c39",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 342,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "This overlaps with the bit above.   Should be 58.",
      "range": {
        "startLine": 342,
        "startChar": 67,
        "endLine": 342,
        "endChar": 69
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f94de859_91e3d35f",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "This can be moved into an else block of the (a.block !\u003d b.block) check above to remove the redundant a.block \u003d\u003d b.block check here.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 36,
        "endChar": 5
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8993e79e_6f59b2fe",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Can this just be:\n\n    return mNextAvailableId++;\n?\n\nOr does it not like incrementing a spirv::IdRef like that?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 51,
        "endChar": 17
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b64c25e0_a878edda",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 752,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "This is an interesting little hack to get the underlying bytes of the float so it can be treated as a uint32.\n\nTo avoid the stack allocation and copy, would using reinterpret_cast() here work instead?\n\n    return getBasicConstantHelper(reinterpret_cast\u003cuint32_t\u003e(value), EbtFloat, \u0026mFloatConstants);\n\nOr maybe that needs some pointer trickery:\n\n    return getBasicConstantHelper(*reinterpret_cast\u003cuint32_t*\u003e(\u0026value), EbtFloat, \u0026mFloatConstants);",
      "range": {
        "startLine": 746,
        "startChar": 0,
        "endLine": 752,
        "endChar": 72
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01dea7b5_85380db0",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 906,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Do we need to check for overflowing the uint32?",
      "range": {
        "startLine": 901,
        "startChar": 0,
        "endLine": 906,
        "endChar": 84
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e773a18_0a4e591a",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 941,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Do you need a full copy here?   It looks like the vectorType.primarySize is the only part that may need special handling, which can just be a local uint8.",
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d92fb4de_e5567768",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 975,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Why is this division necessary?   What happens if vectorType.primarySize \u003e type.secondarySize?",
      "range": {
        "startLine": 975,
        "startChar": 52,
        "endLine": 975,
        "endChar": 76
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22bc5b7f_239a82f3",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1065,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Why only hash SymbolType::UserDefined?",
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c23ced44_79b70cee",
        "filename": "src/compiler/translator/BuildSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1073,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "nit: hashFunctionName\n\nThis behaves essentially the same as hashFieldName(), and I don\u0027t think either need an \"IfNeeded\" since that\u0027s a detail the caller doesn\u0027t need to know or care about.",
      "range": {
        "startLine": 1073,
        "startChar": 30,
        "endLine": 1073,
        "endChar": 54
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2831a005_6ce3852e",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Does this need a TODO so it doesn\u0027t get lost?",
      "range": {
        "startLine": 41,
        "startChar": 79,
        "endLine": 42,
        "endChar": 51
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc0666d_6e1b385f",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "{}",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 100
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e5ce3f9_acdbd9bb",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Why \u00274\u0027 when there are only 3 entries being filled in?   Does it need to be word-aligned?",
      "range": {
        "startLine": 96,
        "startChar": 33,
        "endLine": 96,
        "endChar": 34
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8e1dd71_c3762ba7",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 113,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Why is this \u0026 being performed, since it seems likely that this will result in \u00270\u0027 except for special cases.",
      "range": {
        "startLine": 113,
        "startChar": 59,
        "endLine": 113,
        "endChar": 82
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53985eb8_7a25f739",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "I suggest removing this now if it\u0027s not necessary yet, so it doesn\u0027t rot while things change around it.",
      "range": {
        "startLine": 250,
        "startChar": 0,
        "endLine": 260,
        "endChar": 6
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3df1155_495acbc5",
        "filename": "src/compiler/translator/BuildSPIRV.h",
        "patchSetId": 4
      },
      "lineNbr": 283,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "typo: qualifier",
      "range": {
        "startLine": 283,
        "startChar": 78,
        "endLine": 283,
        "endChar": 88
      },
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "675207b6_aa0a9c48",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-19T00:31:19Z",
      "side": 1,
      "message": "Using \u00271\u0027 means this is enabled by default.   It\u0027s disabled by default in glslang_wrapper.cpp.   This should probably stay \u00270\u0027 so it doesn\u0027t get forgotten about and enabled forever.",
      "revId": "ac0f7bd849edbbcae3ecdb1472d25c955c28227e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}