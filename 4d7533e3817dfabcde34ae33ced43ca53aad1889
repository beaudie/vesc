{
  "comments": [
    {
      "key": {
        "uuid": "54738306_aa6834fe",
        "filename": "src/libANGLE/renderer/gl/ClearMultiviewGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 76,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-21T17:08:19Z",
      "side": 1,
      "message": "This could be refactored into a new method.",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 76,
        "endChar": 30
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5ba038d_8463dfbf",
        "filename": "src/libANGLE/renderer/gl/ClearMultiviewGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 76,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-08-21T17:37:26Z",
      "side": 1,
      "message": "Also instead of deferring detaching of attachments to the next clear, it could be done immediately after the for loop. Also depth / stencil is being re-attached over and over. Could the code look like the following?\n\n    for each view {\n        attach relevant layers for view\n        clear\n    }\n\n    detach everything\n\nThis would allow removing the dirty bits scheme.",
      "parentUuid": "54738306_aa6834fe",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 76,
        "endChar": 30
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c699be7b_5fe7ce9f",
        "filename": "src/libANGLE/renderer/gl/ClearMultiviewGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 76,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2017-08-22T07:57:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5ba038d_8463dfbf",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 76,
        "endChar": 30
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8617f2a4_a4829a6d",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 263,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-21T17:08:19Z",
      "side": 1,
      "message": "I\u0027d prefer if this was refactored into a single check and call on the mMultiviewClearer.  A FramebufferGL::requresMultiviewClear (could even call a method on mMultiviewClearer) and then have the multiview clearer decide which method it will use to clear internally.  This keeps the multiview logic all in one place.",
      "range": {
        "startLine": 251,
        "startChar": 4,
        "endLine": 263,
        "endChar": 5
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cc606e5_d2c4d59f",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 263,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2017-08-22T07:57:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8617f2a4_a4829a6d",
      "range": {
        "startLine": 251,
        "startChar": 4,
        "endLine": 263,
        "endChar": 5
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ded977a_30a57ac2",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 264,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-08-21T17:37:26Z",
      "side": 1,
      "message": "In all of these can we have the base case for clear first to avoid the double branch before the most common case?",
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c1e0002_f4e5a39b",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 264,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2017-08-22T07:57:32Z",
      "side": 1,
      "message": "Sure, though I would assume this should not matter.",
      "parentUuid": "3ded977a_30a57ac2",
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eae51a3_571afd42",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 9
      },
      "lineNbr": 684,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2017-08-21T12:39:50Z",
      "side": 1,
      "message": "This is related to a possibly exposed bug. I will cover this in a subsequent patch.",
      "range": {
        "startLine": 684,
        "startChar": 4,
        "endLine": 684,
        "endChar": 87
      },
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f513ad_92334aa6",
        "filename": "src/tests/gl_tests/FramebufferMultiviewTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 257,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-08-21T13:54:03Z",
      "side": 1,
      "message": "The extra arguments are usually at the end of the list if some of the arguments are shared between overloaded functions, so put x and y last.",
      "revId": "4d7533e3817dfabcde34ae33ced43ca53aad1889",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}