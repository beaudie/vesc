{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d200bbdd_c22fc8f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-13T20:43:27Z",
      "side": 1,
      "message": "Not a fan of this TBH, \"actually\" is implied IMO. My own preference is something similar to what we had before: `ensureNoPendingSubmission` (previous name `ensureNoPendingWork` was indeed not accurate)\n\nWe could also call `submitCommands` like `scheduleCommandSubmission` but that\u0027s overkill IMO",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4228f556_20afb0bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-13T21:04:50Z",
      "side": 1,
      "message": "Also agree with Shabi that \"Actually\" is implied.\n\nWe do have a terminology issue here that \"submit\" has different meaning with CommandProcessor versus CommandQueue. I was thinking to rename CommandProcessor:: submitCommands to CommandProcessor::enqueueCommands (and other CommandProcessor\u0027s public APIs will be similarly renamed). Then this waitForQueueSerialToBeSubmitted  actually makes sense.",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec80c08d_ff8b1c30",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-14T13:01:34Z",
      "side": 1,
      "message": "Problem is that `CommandProcessor` and `CommandQueue` exposed via common interface in the `RendererVk`.\n\nAnd `RendererVk` have methods:\n- `hasUnsubmittedUse()`\n- `waitForResourceUseToBeSubmitted()`\n\nLogically, if `hasUnsubmittedUse() \u003d\u003d false` - **no need to wait**.\n\nThere is no difference between *submitted* status in both methods.\nAdding *\"Actually\"* - adds distinct operation.\n\n\u003e  I was thinking to rename CommandProcessor:: submitCommands to CommandProcessor::enqueueCommands (and other CommandProcessor\u0027s public APIs will be similarly renamed).\n\nThen need to also rename `RendererVk` methods:\n- `hasUnenqueuedUse()` - sounds even worse...\n- `waitForResourceUseToBeSubmitted()`\n\nOther alternatives:\n- `waitForResourceUseToBeSubmittedToCommandQueue()` - more correct\n- `waitForResourceUseToBeSubmittedToVulkan()`\n- `waitForResourceUseToBeSubmittedToGPU()`\nor\n- `ensureResourceUseSubmittedToCommandQueue()`",
      "parentUuid": "4228f556_20afb0bb",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cae76dcf_cc01e75b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-14T13:01:34Z",
      "side": 1,
      "message": "I just what to point the problem. It is up for you to decide.",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa5f30a0_753e3848",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-14T13:01:34Z",
      "side": 1,
      "message": "For me `ensureNoPendingSubmission` is almost same as `waitForAllWorkToBeSubmitted`.\nDifference is only that *ensure* will not wait if not required.\n\nThe problem is that `hasUnsubmittedUse()` may return `false` while we have `PendingSubmissions` - this is not intuitive.\n\nHaving word *\"Actually\"* makes that the regular submissions is not actual. At least it rises a question: \"why this is \"Actual\" and other is not\"?\n\nWord *\"Pending\"* does not rise questions. It may be just not yet submitted.\n\nThis is from the old comment for `ensureNoPendingWork`:\n```\n// The external has asked for the semaphore to be signaled.  It will wait on this semaphore and\n// so we must ensure that the above flush (resulting in vkQueueSubmit) has actually been\n// submitted (as opposed to simply being scheduled as a task for another thread).\n```\n\nIt has *\"actually been submitted\"*. So this is where this *\"actually\"* comes from.",
      "parentUuid": "d200bbdd_c22fc8f0",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6944498f_b57b5a53",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-14T19:34:30Z",
      "side": 1,
      "message": "I\u0027d avoid calling out `CommandQueue` directly, it\u0027s supposed to be an \"implementation detail\" inside RendererVk.\n\nI also agree `hasUnenqueuedUse` is terrible.\n\n`waitForResourceUseToBeSubmittedToDevice()` sounds good actually (FWIW, not all \"devices\" are \"GPUs\")\n\n---\n\nThe real problem is that `submit` is overloaded here. FYI, `hasUnsubmittedUse` was until recently called `isUsedInRecordedCommands` which was unambiguous, we could revert to that.",
      "parentUuid": "ec80c08d_ff8b1c30",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3a16912_72bf80cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-14T19:42:28Z",
      "side": 1,
      "message": "\u003e The real problem is that `submit` is overloaded here. FYI, `hasUnsubmittedUse` was until recently called `isUsedInRecordedCommands` which was unambiguous, we could revert to that.\n\nWe also have `getLastSubmittedSerial()` that uses `submit`...\n\nI like `waitForResourceUseToBeSubmittedToDevice()`.",
      "parentUuid": "6944498f_b57b5a53",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d35098f6_1e5dd54b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-14T23:39:30Z",
      "side": 1,
      "message": "I renamed methods into `waitFor(*)ToBeSubmittedToDevice()`.",
      "parentUuid": "e3a16912_72bf80cd",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62bff124_f59efd8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-15T22:18:56Z",
      "side": 1,
      "message": "Its hasResourceUseEnqueued. See:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/4255809\nhttps://chromium-review.googlesource.com/c/angle/angle/+/4257105",
      "parentUuid": "d35098f6_1e5dd54b",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df8968b6_f988e161",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-16T11:04:20Z",
      "side": 1,
      "message": "My point was confusing naming not only in `CommandProcessor`, but also in the `RendererVk`.\n\n```\nangle::Result RendererVk::waitForResourceUseToBeSubmitted(\n    vk::Context *context, const vk::ResourceUse \u0026use)\n\nbool RendererVk::hasQueueSerialSubmitted(const QueueSerial \u0026queueSerial) const\n{\n    if (isAsyncCommandQueueEnabled())\n    {\n        return mCommandProcessor.hasQueueSerialEnqueued(queueSerial);\n    }\n    else\n    {\n        return mCommandQueue.hasQueueSerialSubmitted(queueSerial);\n    }\n}\n```\n\nCorrect name in the `CommandProcessor` is an implementation details.\n\nMaybe rename only `RendererVk::waitFor(*)ToBeSubmitted` methods by adding `ToDevice`?\nThis way there will be at least some difference in `hasQueueSerialSubmitted` (not necessarily to Device...) and `waitForResourceUseToBeSubmittedToDevice`.\n\nOr rename `RendererVk::hasQueueSerialSubmitted` to `hasQueueSerialEnqueued` (as well as others). So even if NOT using `CommandProcessor` status will still be *enqueued* (but also *submitted* as an implementation details).\n\nThe second suggestion I like more.",
      "parentUuid": "62bff124_f59efd8e",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc5a9472_14023294",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-16T14:49:14Z",
      "side": 1,
      "message": "\u003e The second suggestion I like more.\n\nThought again...\nWe also have states in `ContextVk`: `mLastSubmittedQueueSerial` `mSubmittedResourceUse` that will conflict with the naming.\nNeed also rename to something: `mLastEnqueuedQueueSerial` and `mEnqueuedResourceUse`.\n\nBasically, rename **everything** `submitted` to `enqueued` - a lot of changes.\n\nThis way `RendereVk` will act like it is performing everything async.\nBut in case of using `CommandQueue` it will be actually synchronous - implementation details.",
      "parentUuid": "df8968b6_f988e161",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a2a4e2a_b5d6d85b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-16T18:01:53Z",
      "side": 1,
      "message": "I don\u0027t think ContextVk has any confusion. From ContextVk\u0027s point of view it has been submitted once it calls rendererVk-\u003esubmitCommands. What rendererVk does is irrelavent here. The class API should only reflect its own state, in this case contextVk should only care about ContextVk itself.",
      "parentUuid": "fc5a9472_14023294",
      "revId": "0fafcb2139d38388b184aa26d5152b860f3a3b89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}