{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b24b1a1f_eb414cc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-11T18:35:55Z",
      "side": 1,
      "message": "Hailin: is there a test that can reproduce the bug you\u0027re running into? Having a workaround in ANGLE to work around our own bug means we\u0027d like to clear this up at some point.",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "742680b2_03378840",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1190898
      },
      "writtenOn": "2022-02-11T18:39:04Z",
      "side": 1,
      "message": "This CL just introduces a feature flag -- similar to https://crrev.com/c/3418138. Flipping this on (which we intend to do in our branch) is a workaround for an app bug",
      "parentUuid": "b24b1a1f_eb414cc7",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "754ac2ce_828e093f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-11T18:51:51Z",
      "side": 1,
      "message": "I\u0027d be curious to follow up with this. Generally if it works on a driver, ANGLE will have to subsume this functionality. e.g. ANGLE has to emulate the behaviour of the existing driver, including making undefined defined. So I think this workaround would extend to any app that has this call pattern.\n\nI wonder if it\u0027s a specific case where we invalidate pixels that are cleared, and never read in a shader.\n\nAnyway it\u0027ll be good to follow up with this even if you land a temporary iteration. I\u0027d also recommend you extend the behaviour to the invalidateSub call below for consistency.",
      "parentUuid": "742680b2_03378840",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48d60ae3_55364c36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-11T18:51:51Z",
      "side": 1,
      "message": "d",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f1b1829_cf959ef1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1190898
      },
      "writtenOn": "2022-02-11T18:56:59Z",
      "side": 1,
      "message": "What does ANGLE do in cases where drivers disagree? In this specific case, some drivers seem to immediately discard the depth buffer on calls to glInvalidateFramebuffer, while others do not. This app works on for example Intel desktop GPUs, but not NV.",
      "parentUuid": "754ac2ce_828e093f",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86d3686e_1e1ab36a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-11T19:03:06Z",
      "side": 1,
      "message": "If the Android app expects it to work, we must make it work. e.g. by what you\u0027re doing here. I\u0027m suggesting we narrow this workaround and make it apply to the sequence of calls rather than the app now. That way we can figure out a way to keep good performance. e.g. by only ignoring invalidates of unread depth buffers. And then it\u0027ll work for any app. I\u0027d need to check to see if we track if depth buffers are read or not, I recall we do this kind of tracking in the rp somewhere.",
      "parentUuid": "9f1b1829_cf959ef1",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e27406f_130f6446",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1517514
      },
      "writtenOn": "2022-02-11T19:09:15Z",
      "side": 1,
      "message": "for arknights the depth test is enabled at some draw call with (less equal ) comparison. I think it is ok if we only skip the invalidate of depth buffer.",
      "parentUuid": "86d3686e_1e1ab36a",
      "revId": "49d26e826accde25433654a50f766e6fd1a76c72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}