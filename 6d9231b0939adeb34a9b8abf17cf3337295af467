{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "169a1988_12f51333",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3152,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "nit: in the end, don\u0027t forget to support all three RGB32 formats.\n\nAlso, would be nice to refactor this into a helper.",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8cbd979_caf7f8b6",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3152,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "Yes, of course. This will happen on the way out of WIP.",
      "parentUuid": "169a1988_12f51333",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d523e70_dcc8cbaf",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3156,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "Per the other comment, need to derive `size` from `bufferVk` instead of the binding. The vertex conversion buffer cache doesn\u0027t track size and assumes the entire buffer is converted.",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ac1c02_b751a7aa",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3163,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "Stride should be 16",
      "range": {
        "startLine": 3163,
        "startChar": 55,
        "endLine": 3163,
        "endChar": 56
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a34dfd_b3fe88bf",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3163,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "Oops thanks, will fix.",
      "parentUuid": "d2ac1c02_b751a7aa",
      "range": {
        "startLine": 3163,
        "startChar": 55,
        "endLine": 3163,
        "endChar": 56
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a1dfe29_53f64819",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3177,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "Could this be simplified to something like `conversionBufferHelper-\u003eallocateForVertexConversion` so the usual buffer allocation mechanism takes care of it?",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0ab5ef6_1478d322",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3177,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "I had tried exactly this but something was missing or different. I\u0027ll have another look.",
      "parentUuid": "6a1dfe29_53f64819",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c41e3b95_6a5beb2d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-25T20:23:34Z",
      "side": 1,
      "message": "You can just init once instead of release/init every time here. Same thing with mBufferViews. Basically something like this:\n```\nif(!conversionBufferHelper-\u003evalid())\n{\n     ANGLE_TRY(conversionBufferHelper-\u003einit());\n     mBufferViews.getView();\n}\n\nif(conversion-\u003edirty())\n{\n     ANGLE_TRY(utilsVk.copyRgbToRgba());\n     conversion-\u003emDirty \u003d false;\n}\n```",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ed287df_b6a827e3",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T16:23:12Z",
      "side": 1,
      "message": "Thanks, trying this. The reason I did the mBufferViews.release/init thing here was because `TextureVk::syncState` calls mBufferViews.init with the original offset and size and that gets stored inside mBufferViews so I think we need to somehow account for that here.",
      "parentUuid": "c41e3b95_6a5beb2d",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ab4a25b_656f5180",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-28T17:26:50Z",
      "side": 1,
      "message": "I think that is correct though. That adjustment is done automatically, your change does not change that, I think.\n\nWhat you need to do is every time you see mState.getBuffer().get(), you make sure you get the conversion buffer, instead of original buffer (if RGB32).\n\nAnd also always make sure you use GPU to do conversion in BufferVk. That avoids potential synchronization issue with texture code.",
      "parentUuid": "3ed287df_b6a827e3",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7ce7b4_68c7387a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T17:41:04Z",
      "side": 1,
      "message": "Not sure that\u0027s correct? For example, the original buffer `size` now becomes `(size/3) * 4` as texel size increases. So the view should be larger, no? I\u0027m not sure what you mean by \"That adjustment is done automatically\"",
      "parentUuid": "3ab4a25b_656f5180",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da007523_b6b4e05b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-28T17:49:22Z",
      "side": 1,
      "message": "You need to get the size from conversion buffer, and adjust the offset with conversion buffer as well (at syncState time you have that information). What I am saying is that the bufferView setup should be all done in syncState. Once it is done, then every time should still work as it is (it will still adjust the offset with actual buffer\u0027s offset when call into vulkan driver, that is done automatically). Basically in TetxureVk whenever you look at buffer binding, you need have if(RGB32){get information from conversion} else{existing code}.",
      "parentUuid": "7a7ce7b4_68c7387a",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e89ef852_e561c7a1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3181,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T17:57:16Z",
      "side": 1,
      "message": "\u003e What I am saying is that the bufferView setup should be all done in syncState.\n\nAh, right! I meant to do this and then it slipped out of my mind and I got confused again. Thanks.",
      "parentUuid": "da007523_b6b4e05b",
      "range": {
        "startLine": 3179,
        "startChar": 12,
        "endLine": 3181,
        "endChar": 88
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1389d415_9175312a",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3335,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "`onBufferComputeShaderRead`",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f1e5b47_2919d1d4",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3335,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "Thanks! Any suggestions what I should read to understand when we need VK_ACCESS_TRANSFER_READ_BIT vs VK_ACCESS_SHADER_READ_BIT?",
      "parentUuid": "1389d415_9175312a",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22c634ab_14decbc9",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3335,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-28T15:23:35Z",
      "side": 1,
      "message": "The VkAccessFlagBits man page for the summary, which typically links to other parts of the spec: https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkAccessFlagBits.html\n\nIf you want to understand how Vulkan synchronization works in general, the spec is naturally very pedantic, but if you can read through the math, it\u0027s not that complicated: https://registry.khronos.org/vulkan/specs/1.3/html/chap7.html#synchronization-dependencies\n\nWe can always have a chat about it 😊",
      "parentUuid": "1f1e5b47_2919d1d4",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f4f0432_83c1388c",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "nit: clean up",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ca7c370_35655e2b",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3336,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "Sure thing",
      "parentUuid": "2f4f0432_83c1388c",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e530ed_216fa1e5",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3342,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "nit: to be generalized",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d447fe00_429753aa",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3342,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": "Absolutely, will happen on the way out of WIP.",
      "parentUuid": "d8e530ed_216fa1e5",
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7d692de_aa54340a",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3375,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "No barrier needed, the above `CommandBufferAccess` takes care of it.",
      "range": {
        "startLine": 3369,
        "startChar": 0,
        "endLine": 3375,
        "endChar": 87
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80d8fe8e_0b527540",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3375,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-04-28T13:24:39Z",
      "side": 1,
      "message": ":o",
      "parentUuid": "a7d692de_aa54340a",
      "range": {
        "startLine": 3369,
        "startChar": 0,
        "endLine": 3375,
        "endChar": 87
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28e37ca5_3bd84ae4",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3394,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-26T18:05:14Z",
      "side": 1,
      "message": "The reason I asked for a barrier here is that we are circumventing the automatic-barrier management by switching the buffer view and not the buffer itself.\n\nSee `ContextVk::handleDirtyTexturesImpl`, and how it\u0027s calling `OnTextureBufferRead`, which in turn calls `commandBufferHelper-\u003ebufferRead`; that\u0027s the one setting up the barrier. So the source buffer is being managed correctly, the destination buffer is being written to in compute out of the blue and used with no knowledge of it elsewhere.\n\nSo you\u0027d want a memory barrier here from `STAGE_COMPUTE/ACCESS_SHADER_WRITE` to `STAGE_ALL_GRAPHICS/ACCESS_SHADER_READ`.\n\n---\n\nIf one day we care, we could make ContextVk aware of the conversion buffer so that it would do the conversion itself (in ContextVk::handleDirtyTexturesImpl), then mark the conversion buffer as used in the command buffer, and then all barrier tracking becomes automatic. But then we\u0027d need to make sure it\u0027s the same conversion buffer we use to get the view later.",
      "range": {
        "startLine": 3383,
        "startChar": 0,
        "endLine": 3394,
        "endChar": 91
      },
      "revId": "6d9231b0939adeb34a9b8abf17cf3337295af467",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}