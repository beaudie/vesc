{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3ccb5a76_d1a3ed7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-20T15:23:38Z",
      "side": 1,
      "message": "Drive-by",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd6d774a_16349602",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-20T15:23:38Z",
      "side": 1,
      "message": "RGBA8 is not renderable in GLES2?!\n\nThis change is a bit odd; it\u0027s telling the context that the format is renderable even if it thinks that it isn\u0027t. Why not instead make the format renderable in GLES2?\n\nAlso, regardless of the solution, could you please add a test for this scenario to make sure we don\u0027t break this in the future?",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03606052_361cf190",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1267026
      },
      "writtenOn": "2023-03-20T16:02:23Z",
      "side": 1,
      "message": "RGBA8 is not renderable in GLES2. So we can not make that format renderable.\n\nNote that if a driver is capable of GLES3 and we request a GLES2 context from it, then only it can still render RGBA8 format since it has GLES3 capability. That is the case we are handling here.\n\nThere are good amount of webgl tests already which are testing this case.",
      "parentUuid": "dd6d774a_16349602",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e42588ac_939ca08a",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-03-20T16:29:20Z",
      "side": 1,
      "message": "Nits:\n- `OES_rgb8_rgba8` and/or `OES_required_internalformat` may affect renderability of `GL_RGBA8` in GLES2.\n- Unsized `GL_RGBA` is renderable in WebGL 1.0.",
      "parentUuid": "03606052_361cf190",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae2868f9_3bb3aaf3",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-20T16:29:39Z",
      "side": 1,
      "message": "Well the format itself (32-bit 8-bit-per-channel RGBA) is most definitely renderable in GLES2. Is this an issue of sized format (RGBA8) vs unsized format (RGBA + GL_UNSIGNED_BYTE)?\n\nThe way we typically handle this is to add an ANGLE extension that exposes the format in the version we want. In this case, you can add something similar to `ANGLE_rgbx_internal_format.txt` but for rgba8 and have it apply to GLES2. Then a GLES2 context in ANGLE that supports the RGBA8 sized format (one that can be GLES3+) can expose the extension which automatically means applications (including Chrome) can use this format for rendering from GLES2 contexts.",
      "parentUuid": "03606052_361cf190",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fee61124_a16e9d85",
        "filename": "src/libANGLE/Texture.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-20T16:31:31Z",
      "side": 1,
      "message": "Race with Alexey\u0027s comment. Looks like `OES_rgb8_rgba8` is for GLES1, but `OES_required_internalformat` is good; if you expose that, there\u0027s no need for an an ANGLE extension.",
      "parentUuid": "ae2868f9_3bb3aaf3",
      "revId": "a3666c8a6dd05f3be749221e595730fd4aec1d72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}