{
  "comments": [
    {
      "key": {
        "uuid": "6854da0e_44314d0c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Buffer11.h",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-21T00:24:06Z",
      "side": 1,
      "message": "you do not need this.",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_83de141d",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Buffer11.h",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-01-23T13:14:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6854da0e_44314d0c",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_643449ff",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2060,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-21T00:24:06Z",
      "side": 1,
      "message": "do the work of translation inside Buffer11.cpp.",
      "range": {
        "startLine": 2007,
        "startChar": 4,
        "endLine": 2060,
        "endChar": 15
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_75c2af19",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2060,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-01-23T13:14:54Z",
      "side": 1,
      "message": "Hi, Jamie. Please check the newest update to see if it is what you want. But in fact, we still need to get the fist, count, instances value to applyVertexBuffer which is also needed in drawLineLoop/drawTriangleFan. So, one way is get these values from bufferData like this function did. Another way is to move these operations to buffer11.cpp. And expose getFirst() getCount() getInstances() or similar functions in buffer11.h \n\nFor DrawElementsIndirectImpl, the bufferData (which is form storage-\u003egetData(\u0026bufferData)) is not enough for the translation. we need -IndexRange.start as the baseVertex.",
      "parentUuid": "6854da0e_643449ff",
      "range": {
        "startLine": 2007,
        "startChar": 4,
        "endLine": 2060,
        "endChar": 15
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92ba209a_a058b59f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2060,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-24T19:14:02Z",
      "side": 1,
      "message": "Thank you Jiajia for clarifying that you need access to first/count/instances, I did not understand that initially. This is a difficult problem and we need to figure out when we need to pull the buffer data back from the GPU for ANGLE, and when we can be fast. It is very important to avoid the GPU readback for any fast performance, so it\u0027s something we must figure out.\n\nFor first/count/instances and applyVertexBuffers, we need to think about the following places first/count/instances are used in applyVertexBuffers:\n\n1) for static and dynamic vertex buffer updates, when the user specifies DYNAMIC usage, or we need to perform attribute translation. Note: there must be an ARRAY_BUFFER bound in ES3.1 draw indirect calls, so we don\u0027t have to worry about vertexAttribPointer with client data.\n\n2) for instanced point sprites. We don\u0027t currently use this in mainline D3D11, though it is something we were thinking about.\n\n3) for computing the vertex attribute offsets in applyVertexBuffers.\n\n4) for updating buffer usage in VertexArray11::clearDirtyAndPromoteDynamicAttribs.\n\nFor 1) I think we can use a readback. It seems easy enough, without having to think about custom vertex pulling or other more advanced solutions.\n\nFor 2) I think we can ignore the problem for now, and either use trivial values (0, 1, etc) or pass in Optional\u003c\u003e and set them to Invalid.\n\nFor 3) this is difficult to solve, let me think about this carefully and discuss it with the other team members.\n\nFor 4) this is also a difficult issue, but we may be able to ignore it, since it\u0027s mostly an optimization.\n\nWill get back to you Jiajia. I will also study drawElements.",
      "range": {
        "startLine": 2007,
        "startChar": 4,
        "endLine": 2060,
        "endChar": 15
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88b58399_5b39016c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2060,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-01-25T03:19:48Z",
      "side": 1,
      "message": "Hi, Jamie. Thanks for your analysis. I used to think to avoid the gpu readback for first\\count\\instances and use mimic values to applyVertexBuffers. The blocker is 3). Ideally, if we can use 0 as the vertex attribute buffer offset in applyVertexBuffers, and the \u0027first\u0027 as the \u0027startVertexLocation\u0027 parameter in D3D Indirect args, we even don\u0027t need the translation between GL Indirect args and D3D Indirect args. In that case, the indirect buffer can be directly used in d3d. But, in that time, It seems that I missed to consider some situations so that some cases can\u0027t pass. Maybe I need to reconsider and understand that part deeply. I totally agree with you that we must figure them out before move on. Thanks.",
      "range": {
        "startLine": 2007,
        "startChar": 4,
        "endLine": 2060,
        "endChar": 15
      },
      "revId": "50a87ded6b26d691a3ebba3266ed126c3b1c67bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}