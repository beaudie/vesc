{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c75a1609_ab55868e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T21:41:09Z",
      "side": 1,
      "message": "Thanks",
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74af090f_c460474c",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T17:16:48Z",
      "side": 1,
      "message": "I am not seeing it in the spec language. Is it failing some deqp test?",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04579442_05c9ddc3",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-26T18:43:10Z",
      "side": 1,
      "message": "Indeed, this looks strange. `kDestinationTextureTooSmall` is saying the texture is smaller than the extents provided. In this case, the area is certainly smaller than the texture so the error doesn\u0027t make sense.\n\nYou might want to instead no-op the call if extents are 0 in any direction.",
      "parentUuid": "74af090f_c460474c",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89feaa5_cbb1d326",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T21:41:09Z",
      "side": 1,
      "message": "This is added to address the following exception included only for `glClearTexImageEXT()` in the spec:\n```\n        An INVALID_OPERATION error is generated if the image array identified by\n        \u003clevel\u003e has not previously been defined by a TexImage* or TexStorage*\n        command.\"\n```\n\nIn the code here, `extents` is for the current level of the texture. So if they are zeroes, this call should return with `GL_INVALID_OPERATION`.\n\nBefore adding this condition, the corresponding test still fails, but due to the following message (and issuing `GL_INVALID_VALUE` instead):\n```\nglClearTexImageEXT: GL error: HIGH: Invalid internal format 0x0000.\n```\n---\n\nHowever, it is still legal to use `glClearTexSubImageEXT()` if its input `width`, `height`, or `depth` are 0, which will return from the backend with no changes to the texture.\n* For 2D textures, `depth \u003d 1` is used for a valid call:\n```\n    For texture types that do not have certain dimensions, this\n    command treats those dimensions as having a size of 1.  For example,\n    to clear a portion of a two-dimensional texture, the application would\n    use \u003czoffset\u003e equal to zero and \u003cdepth\u003e equal to one.\n```",
      "parentUuid": "04579442_05c9ddc3",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33809074_394f7d46",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T22:48:13Z",
      "side": 1,
      "message": "I think you should check if getImageDescs().format.invalid() and then return Invalid_Op. And 0 dimension should just return without error.",
      "parentUuid": "b89feaa5_cbb1d326",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e179bc8_680a9f52",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-27T18:07:33Z",
      "side": 1,
      "message": "Updated the validation to use `getImageDesc().format.valid()` in the texture state, with this error message:\n```\nGL error: HIGH: The destination level of the destination texture must be defined\n```\n\nRegarding no-op for 0 dimension for the clear area, do you mean returning from the call before entering any backend? In that case, assertions can be added to the Vulkan backend.",
      "parentUuid": "33809074_394f7d46",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef012a97_1fb503be",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-28T17:35:23Z",
      "side": 1,
      "message": "\u003e do you mean returning from the call before entering any backend? In that case, assertions can be added to the Vulkan backend.\n\nCorrect.",
      "parentUuid": "6e179bc8_680a9f52",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aaac801b_0ba9d661",
        "filename": "src/libANGLE/validationESEXT.cpp",
        "patchSetId": 2
      },
      "lineNbr": 323,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T00:37:31Z",
      "side": 1,
      "message": "Thanks. Done.",
      "parentUuid": "ef012a97_1fb503be",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 80
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1adc123e_9caa49c9",
        "filename": "src/tests/gl_tests/ClearTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T17:16:48Z",
      "side": 1,
      "message": "Is it needed because of new test is failing? Are we losing test coverage of RGB with added alpha bits?",
      "range": {
        "startLine": 180,
        "startChar": 8,
        "endLine": 180,
        "endChar": 26
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1d2b460_425df464",
        "filename": "src/tests/gl_tests/ClearTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T21:41:09Z",
      "side": 1,
      "message": "This was added since the following tests were failing on the Vulkan backend:\n* `ClearTextureEXTTest.Luma`\n  * The second part using `GL_LUMINANCE_ALPHA` fails\n* `ClearTextureEXTTest.LumaAlphaFloat` (new test)\n\nIf we add this config, will it affect RGB-only tests?",
      "parentUuid": "1adc123e_9caa49c9",
      "range": {
        "startLine": 180,
        "startChar": 8,
        "endLine": 180,
        "endChar": 26
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80f77064_cb23fe17",
        "filename": "src/tests/gl_tests/ClearTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-27T16:22:53Z",
      "side": 1,
      "message": "ClearTextureEXTTest.Luma was failing because it is using texture rendering to FBO0. This change should only affect the verifying the texture, so should be fine.",
      "parentUuid": "a1d2b460_425df464",
      "range": {
        "startLine": 180,
        "startChar": 8,
        "endLine": 180,
        "endChar": 26
      },
      "revId": "61335e7102dad34f2e75c345fbfbfd57394444df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}