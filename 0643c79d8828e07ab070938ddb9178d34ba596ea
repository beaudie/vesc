{
  "comments": [
    {
      "key": {
        "uuid": "2d5fadc8_0a6771b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T20:09:58Z",
      "side": 1,
      "message": "I end up flushing the deferred glFlsuh at the boundary of Draw FBO switch. Otherwise I am seeing perf regression on TRex and Manhattan. Without a more sophsicated GPU progress checking and proactively do implicit submission as soon as we see GOU runs low on work, I think this is the right balance to fix the manhattan\u0027s in-FBO glFlush without triggering offline perf regression. This essentially limit the glFlush noop for the glFlush calls that are called within the same draw FBO. ",
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d5ec692_5182e76f",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "https://issuetracker.google.com\n\nb/ isn\u0027t accessible off-corp, so each of the b/ links in this CL should be updated also.",
      "range": {
        "startLine": 371,
        "startChar": 14,
        "endLine": 371,
        "endChar": 15
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e97bd976_096450ec",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 675,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "Just for consistency:\n\n  mDeferredFlushCount(0),",
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbdc0ff2_b907856c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 987,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T23:22:29Z",
      "side": 1,
      "message": "Drive by: Can something like the new SecondaryCommandBuffer::getCommandBufferSize() method help you create that finer-grain check?",
      "range": {
        "startLine": 987,
        "startChar": 33,
        "endLine": 987,
        "endChar": 98
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05277928_8045e516",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 987,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:35:51Z",
      "side": 1,
      "message": "No, that only know how many commands we accumulate. What I need to do is how many commands is pending GPU execution. Basically we need to know where in the command buffer GPU has been finished, and how much left for execution.",
      "parentUuid": "fbdc0ff2_b907856c",
      "range": {
        "startLine": 987,
        "startChar": 33,
        "endLine": 987,
        "endChar": 98
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a7aef5_f5243efd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 994,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T22:07:00Z",
      "side": 1,
      "message": "This will also removed before push to repository.",
      "range": {
        "startLine": 994,
        "startChar": 8,
        "endLine": 994,
        "endChar": 41
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a16ceb88_b1362ea0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1830,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "Can you do:\n\n  mDeferredFlushCount \u003d kDeferredFlushMaxCount;\n\nso that the only the next glFlush is forced to occur, but we then return to deferring after that?",
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dae85379_eaba2232",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1830,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:35:51Z",
      "side": 1,
      "message": "We can. The only concern is that it may create some confusion when people debug it.\nMaybe I can set it to UINT32_MAX in this case.",
      "parentUuid": "a16ceb88_b1362ea0",
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63c63213_92fc71b7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "Is this something you\u0027re seeing in apps now, or can we wait to include this block of code until we actually see a problem?   I\u0027d prefer to just rely on the normal command submission as much as possible if we can.",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a39cd1_ffcda3b0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:35:51Z",
      "side": 1,
      "message": "Without this line, you see (quite big) performance regression on TRex and Manhattan offscreen scores, since offscreen benchmark uses glFlush for frame boundary. This essentially make sure that offscreen behavior remains the same.",
      "parentUuid": "63c63213_92fc71b7",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f30e5a7_59b15058",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-09T00:51:32Z",
      "side": 1,
      "message": "Do you have data for each value 1-4 that led you to settle on 4 as the best, with the caveat that we\u0027d need a workaround here?   Or is there a good compromise value for kDeferredFlushMaxCount instead of 4 then (would 2 defer enough flushes to help onscreen without delaying too much work to hurt offscreen)?\n\nIt just seems a bit odd to me to correlate changing the draw FBO with frame boundaries, as far as offscreen benchmarks are concerned.   This seems like a place that will make things difficult to work around when optimizing other apps in the future, if glFlush() is something real apps do.   I\u0027ll have to defer to your guys\u0027 experience on that though.\n\nThis also feels like something that has come up a few times now where we don\u0027t have a good way to delineate frame boundaries in offscreen benchmarks.",
      "parentUuid": "55a39cd1_ffcda3b0",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d93bcf1d_c09e73a0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T01:05:20Z",
      "side": 1,
      "message": "Regarding 1-4: For Manhattan it is just 1. 4 is sort of my guess number, there is no real data behind it. This means within *one* FBO rendering if you call glFlush 4 times, we are going to submit it. I can make it a lot bigger (like 1024 or even no limit). But I think I will feel more comfortable right now to still flush it more often than less often. Once we have finer grain GPU execution in the command buffer, then we can take that into consideration as well. But as of now, I think whatever number we pick it is going to be guesstimate.\n\nRegarding draw FBO with frame boundaries: At least for now, we have to detect the frame boundary in order to not introduce regression. drawFBO switch is the trick I am using right now for detecting frame boundary. As I said, I think the longer term is to have better visibility into GPU execution and based on that instead of frame boundary. But I also have some feeling that even with that, we might still need to detect frame boundary to do flush in order to not regression perf. We can ask ARM/IMG in next meeting how they balance this. It is tricky thing to do anyway.\n\nThe current approach I am making here is more conservative one, that I basically only targeting glFlush calls that would other wise break renderpass that could have been avoided with this CL.",
      "parentUuid": "8f30e5a7_59b15058",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc3f3646_423aeb68",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-09T14:55:51Z",
      "side": 1,
      "message": "Sounds good.\n\nCan you mark this with the same TODO as in ContextVk::flush() since it sounds like we should be able to clean them both up with the same fix?",
      "parentUuid": "d93bcf1d_c09e73a0",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63730984_08df1fb7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 3046,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T18:24:28Z",
      "side": 1,
      "message": "I have two suggestions here:\n\n- The only application we know is Manhattan, and we only want to defer one flush, right? My suggestion is to not base the work on guess work and keep it simpler: A bool that says whether there\u0027s flush that\u0027s been deferred. When there\u0027s a flush, don\u0027t try to be clever, and always defer (see next suggestion)\n\n- Flush on endRP instead of FBO change. That\u0027s exactly the purpose of the change (don\u0027t break RP because of flush), and respects the application\u0027s flush call more precisely. In flushImpl(), instead of deferring up to 4 times, do this: \"if RP started and not empty, defer the flush, otherwise do the flush\".\n\nWith the above suggestions, the change should become simpler too.",
      "parentUuid": "bc3f3646_423aeb68",
      "range": {
        "startLine": 3044,
        "startChar": 0,
        "endLine": 3046,
        "endChar": 50
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88a1e8e9_fc91cbb3",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 4982,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "This line can be removed using the mDeferredFlushCount \u003d kDeferredFlushMaxCount trick I mentioned.",
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35be811b_53c6b6a2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1867,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T21:42:36Z",
      "side": 1,
      "message": "Note: This will change to IsAndroid() before push to repository. I forced to true just try to get full bots coverage.",
      "range": {
        "startLine": 1867,
        "startChar": 61,
        "endLine": 1867,
        "endChar": 81
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20607e3f_0ff7610c",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:26:31Z",
      "side": 1,
      "message": "nit: Something like \u0027forceNextFlush()\u0027 would be a bit more descriptive since resetDeferredFlush() will always attempt to re-enable it (and there is no corresponding enabledDeferredFlush()).",
      "range": {
        "startLine": 60,
        "startChar": 15,
        "endLine": 60,
        "endChar": 35
      },
      "revId": "0643c79d8828e07ab070938ddb9178d34ba596ea",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}