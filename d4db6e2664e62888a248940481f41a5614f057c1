{
  "comments": [
    {
      "key": {
        "uuid": "8d383a97_689d6eee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T21:21:44Z",
      "side": 1,
      "message": "Jamie/Shabi - Any other comments?",
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70d41385_a3b4cc01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T22:18:36Z",
      "side": 1,
      "message": "It\u0027s not clear why we can\u0027t just fix the atomic counters reservation count. LGTM anyway.",
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0a0ed0c_3ed6efec",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T22:18:36Z",
      "side": 1,
      "message": "This part is a bit weird. I\u0027m not totally following the logic and who owns what.",
      "range": {
        "startLine": 2380,
        "startChar": 0,
        "endLine": 2383,
        "endChar": 9
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97104f9c_90e5cde6",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2383,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:56:57Z",
      "side": 1,
      "message": "What leads to this case:\n\n1.) Program A creates DescriptorSetLayoutDesc DescA\n2.) Program B creates DescriptorSetLayoutDesc DescB, which matches DescA\n\nImportantly, both DescriptorSetLayoutDesc DescA and DescB are equal and result in the same VkDescriptorSetLayout.\n\n3.) Program A calls getDescriptorSetLayout()\n- This results in a new VkDescriptorSetLayout, which is added to the cache.\n- This creates a new descriptor pool for the new descriptor set layout below (ref-1).\n4.) Program B calls getDescriptorSetLayout()\n- Since DescB \u003d\u003d DescA, the VkDescriptorSetLayout can be pulled from the cache and returned to Program B.\n- However, program B doesn\u0027t have a matching pool yet, so need to create it here.\n\nWhile the descriptor set layout is \u0027global\u0027 (owned by the RendererVk), the descriptor pools are program-specific.   This means that multiple programs can share descriptor set layouts, but need to have their own pools created.\n\nThis check is making sure that we create a new descriptor pool for the descriptor set layout if it hasn\u0027t been created yet, by checking the VkDescriptorSetLayout in the pool.   There are two options for how to do this check:\n\n1.) Do the handles match (this version)?\nOR\n2.) Does the pool\u0027s mDescriptorSetLayout \u003d\u003d VK_NULL_HANDLE\n\nIt would probably be clearer to check for VK_NULL_HANDLE to make it more obvious this is the first time the pool is being allocated for this descriptor set.   To make sure we still catch errors related to attempting to reallocate a pool for a different layout, we could do something like:\n\n        VkDescriptorSetLayout poolsLayout \u003d descriptorPoolOut-\u003egetDescriptorSetLayout();\n        if (poolsLayout \u003d\u003d VK_NULL_HANDLE)\n        {\n            // Allocate the new pool\n            ...\n        }\n        else\n        {\n            // Make sure the program\u0027s pool matches this layout\n            ASSERT(poolsLayout \u003d\u003d descriptorSetLayoutOut-\u003eget().getHandle());\n        }\n\nMake sense?",
      "parentUuid": "e0a0ed0c_3ed6efec",
      "range": {
        "startLine": 2380,
        "startChar": 0,
        "endLine": 2383,
        "endChar": 9
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14c8ad9d_445271c3",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T23:03:40Z",
      "side": 1,
      "message": "My concern is you\u0027re doing all this work to fix the underlying bug that the descriptor set layout desc does not match the descriptor sets used in the pool. Specifically this code:\n\n    // A single storage buffer array is used for all stages for simplicity.\n    descOut-\u003eupdate(info.binding, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,\n                    gl::IMPLEMENTATION_MAX_ATOMIC_COUNTER_BUFFERS,\n                    gl_vk::kShaderStageMap[shaderType], nullptr);\n\nIs the real issue that this description does not match what happens with the pool?",
      "parentUuid": "97104f9c_90e5cde6",
      "range": {
        "startLine": 2380,
        "startChar": 0,
        "endLine": 2383,
        "endChar": 9
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c808193_9782a597",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2419,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:56:57Z",
      "side": 1,
      "message": "ref-1",
      "range": {
        "startLine": 2418,
        "startChar": 0,
        "endLine": 2419,
        "endChar": 52
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8356692_3c470040",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T21:53:34Z",
      "side": 1,
      "message": "you can pre-declare up here.",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfea4593_d525b2c5",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:13:22Z",
      "side": 1,
      "message": "Do you mean move the declaration of ImageLayout from vk_helpers.h to here?",
      "parentUuid": "c8356692_3c470040",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2add51cc_6825c864",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T22:18:36Z",
      "side": 1,
      "message": "Nah, the pre-declaration you have in this file can move up here to be in the same namespace.",
      "parentUuid": "cfea4593_d525b2c5",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d52463e0_dd091abe",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:56:57Z",
      "side": 1,
      "message": "Oh, I completely missed you were referring to DynamicDescriptorPool below.\n\nDone.",
      "parentUuid": "2add51cc_6825c864",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06957998_9359c58a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T22:18:36Z",
      "side": 1,
      "message": "const.. also probably name make this clear it\u0027s for validation only.",
      "range": {
        "startLine": 317,
        "startChar": 26,
        "endLine": 317,
        "endChar": 48
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e6bbed1_30b8fb55",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 317,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:56:57Z",
      "side": 1,
      "message": "As noted in the other comment, I forgot this is used to make sure we only allocate a pool once also.",
      "parentUuid": "06957998_9359c58a",
      "range": {
        "startLine": 317,
        "startChar": 26,
        "endLine": 317,
        "endChar": 48
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1bf1c0f_5de1d0ec",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 330,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T21:53:34Z",
      "side": 1,
      "message": "can you do this without storing the layout here?",
      "range": {
        "startLine": 330,
        "startChar": 26,
        "endLine": 330,
        "endChar": 46
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c88ffc_fd41c15c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 330,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:13:22Z",
      "side": 1,
      "message": "This is used to enforce that this pool was created for a specific layout.   We can remove it if we aren\u0027t concerned about checking that, but a lot of the rest of this code relies on that assumption.\n\nIt wouldn\u0027t be the prettiest, but since it\u0027s only used in an ASSERT, it could be wrapped in an #ifdef also so it doesn\u0027t affect release builds.",
      "parentUuid": "e1bf1c0f_5de1d0ec",
      "range": {
        "startLine": 330,
        "startChar": 26,
        "endLine": 330,
        "endChar": 46
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "310f7488_e0773ff5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 330,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-17T22:18:36Z",
      "side": 1,
      "message": "Is it only used for validation? Maybe just make that clear in the name. Probably a good idea to keep it.",
      "parentUuid": "46c88ffc_fd41c15c",
      "range": {
        "startLine": 330,
        "startChar": 26,
        "endLine": 330,
        "endChar": 46
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e75231b_fcbb8e8f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 330,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-17T22:56:57Z",
      "side": 1,
      "message": "Oops, I take it back.\n\nWhile it\u0027s used to verify that the descriptor set layout matches what the pool is created for when allocating descriptor sets, replying to your other comment reminded me that this is also used to ensure that a descriptor pool is only created once per layout.   See the other comment for details.",
      "parentUuid": "310f7488_e0773ff5",
      "range": {
        "startLine": 330,
        "startChar": 26,
        "endLine": 330,
        "endChar": 46
      },
      "revId": "d4db6e2664e62888a248940481f41a5614f057c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}