{
  "comments": [
    {
      "key": {
        "uuid": "1a7af2ba_c02110a7",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 616,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2019-01-03T07:23:05Z",
      "side": 1,
      "message": "Just a thought: I assume primCount will be \u003e 0 in all relevant cases and we want to have the most likely case efficient. How about rewriting the code as this:\n\nif (primCount \u003c\u003d 0) {\n  if (primCount \u003c 0)...\n  if (primCount \u003d\u003d 0) ...\n}\n\nif (!ValidateDrawElementsCommon) ...",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe02f58_510a71a0",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 616,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-03T13:46:09Z",
      "side": 1,
      "message": "Chose the below solution.",
      "parentUuid": "1a7af2ba_c02110a7",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c292e791_c9f9261c",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 616,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-03T14:21:32Z",
      "side": 1,
      "message": "Turns out this was the better solution. The check (a | b) \u003d\u003d 0 is not the same as (a \u003d\u003d 0 || b \u003d\u003d 0). I also applied the optimization to the \"count\" check for DrawArrays and DrawElements. Should save at least one comparison per draw call.",
      "parentUuid": "5fe02f58_510a71a0",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f7e653f_0a043145",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 621,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2019-01-03T07:23:05Z",
      "side": 1,
      "message": "Another random thought:\n\nCombine with if primcount \u003d\u003d 0 and maybe remove one comparison:\n\nif ((count | primcount) \u003d\u003d 0)\n  return true;\n\nThis does not work with the proposal from above and might be the better of the two choices. The earlier we\u0027re doing the check the less registers have to be kept alive.",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feb616e6_41f0f70b",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 621,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-03T13:46:09Z",
      "side": 1,
      "message": "I like this solution. It is a bit better because we still need to call ValidateDrawArraysCommon if primcount or count is zero.",
      "parentUuid": "9f7e653f_0a043145",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e56d2b2_059618e8",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 6442,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2019-01-03T07:23:05Z",
      "side": 1,
      "message": "The name of the function is confusing. This one does not validate the DrawAttribs, but handles only the different error cases.",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3324d7fb_7a644a9d",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 10
      },
      "lineNbr": 6442,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-03T13:46:09Z",
      "side": 1,
      "message": "Agree. Renamed to RecordDrawAttribsError. Did the same for ValidateDrawMode.",
      "parentUuid": "9e56d2b2_059618e8",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a4a8517_d8feaf29",
        "filename": "src/libANGLE/validationES.h",
        "patchSetId": 10
      },
      "lineNbr": 826,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2019-01-03T07:23:05Z",
      "side": 1,
      "message": "To avoid a merge conflict, can you revert the \u0027clever\u0027 overflow check I\u0027ve added here?\n\nUnfortunately the overflow we\u0027re using here is undefined in C++ by default. We could add a compiler flag to make it defined - but I don\u0027t feel good relying on non-standard C++ here.",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f4aa563_861b623b",
        "filename": "src/libANGLE/validationES.h",
        "patchSetId": 10
      },
      "lineNbr": 826,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-03T13:46:09Z",
      "side": 1,
      "message": "I think this is defined in cpp:\n\nhttps://en.cppreference.com/w/cpp/language/operator_arithmetic\n\nUnsigned integer arithmetic is always performed modulo 2n\n where n is the number of bits in that particular integer. E.g. for unsigned int, adding one to UINT_MAX gives ​0​, and subtracting one from ​0​ gives UINT_MAX.\n\nThe same is not true for signed values. But I think since these are unsigned we\u0027re fine.",
      "parentUuid": "9a4a8517_d8feaf29",
      "revId": "b9ac227f84859a79c0b5458f8256aa6bce7ddd0c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}