{
  "comments": [
    {
      "key": {
        "uuid": "43bcd96b_4e9acf29",
        "filename": "src/compiler/translator/SymbolTable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-04-09T01:50:35Z",
      "side": 1,
      "message": "If it should only apply to output varying, maybe then put `\u003d\u003d EvqVaryingOut` to be clear. [optional:] A comment could be helpful.",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 78
      },
      "revId": "1b5210760ce77db3a944aaeaef7ab9b998a0fa45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed141502_ebe09765",
        "filename": "src/compiler/translator/SymbolTable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-04-09T14:24:12Z",
      "side": 1,
      "message": "For the test in question this code was hit through the following switch statement:\nhttps://chromium.googlesource.com/angle/angle/+/refs/heads/master/src/compiler/translator/CollectVariables.cpp#676\n\nAll of the qualifiers in that case are outputs except for EvqVaryingIn so I excepted that case.\n\nThe spec says:\nTo force all output variables to be invariant, use the pragma\n       #pragma STDGL invariant(all)\nbefore all declarations in a shader.\n\nThere are a number of *Out TQualifier values, some of which aren\u0027t included in that original switch statement. I\u0027m thinking I\u0027ll rework this by adding a utility function \"isOutput(TQualifier)\" that returns true for all of the output types. Seems more correct.",
      "parentUuid": "43bcd96b_4e9acf29",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 78
      },
      "revId": "1b5210760ce77db3a944aaeaef7ab9b998a0fa45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7ca6bed_643817c0",
        "filename": "src/compiler/translator/SymbolTable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T14:43:41Z",
      "side": 1,
      "message": "\u003e There are a number of *Out TQualifier values\n\nWhich ones are you looking at? EvqVaryingIn is a TStorageQualifier. You really only care about EvqVaryingOut I believe. EvqOut is for output parameters.",
      "parentUuid": "ed141502_ebe09765",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 78
      },
      "revId": "1b5210760ce77db3a944aaeaef7ab9b998a0fa45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b1be445_71e961d1",
        "filename": "src/compiler/translator/SymbolTable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-04-09T15:10:40Z",
      "side": 1,
      "message": "Looking at all of the *Out qualifiers here: https://chromium.googlesource.com/angle/angle/+/refs/heads/master/src/compiler/translator/BaseTypes.h#593\n\nAs well as 6 built-in vars that are in that list and specified as \"written.\"\n\nMakes sense that EvqOut should NOT be included. All of the other *Out qualifiers appear to be written by various types of shaders, which I believe means the invariant pragma should apply to them.",
      "parentUuid": "a7ca6bed_643817c0",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 78
      },
      "revId": "1b5210760ce77db3a944aaeaef7ab9b998a0fa45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "432dcc1f_244ae729",
        "filename": "src/compiler/translator/SymbolTable.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-09T17:01:30Z",
      "side": 1,
      "message": "Drat. I was looking at the glslang copy instead of ANGLE\u0027s. You\u0027re right. I added a comment to your new method.",
      "parentUuid": "5b1be445_71e961d1",
      "range": {
        "startLine": 199,
        "startChar": 63,
        "endLine": 199,
        "endChar": 78
      },
      "revId": "1b5210760ce77db3a944aaeaef7ab9b998a0fa45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}