{
  "comments": [
    {
      "key": {
        "uuid": "db11fea5_418f1303",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 210,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "nit: clearColorBuffers.any()",
      "range": {
        "startLine": 210,
        "startChar": 21,
        "endLine": 210,
        "endChar": 51
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce21b7f_91d967da",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "this code is a bit hard to follow. If you can think of any simplification that would help. but I trust it\u0027s doing the right thing.",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 283,
        "endChar": 9
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19dc7de4_a7be7534",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "looks like you are minding the gaps here.",
      "range": {
        "startLine": 371,
        "startChar": 4,
        "endLine": 371,
        "endChar": 77
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac77e56d_8001ed67",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1045,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "It looks like this block is unnecessary:\n\nvk::FramebufferHelper *getFramebuffer() { return \u0026mFramebuffer; }\n\nThe next line uses mFramebuffer directly, so having 2 copies of that pointer doesn\u0027t really help anything.   It doesn\u0027t look like you\u0027re using \u0027framebuffer\u0027 anywhere either.",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d67c1d_d4f24ef4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1045,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "I can see mFramebuffer needing an init, but I don\u0027t know how mFramebuffer would be invalid after this call. So at the very least you can change the mFramebuffer.valid() check to an ASSERT.",
      "parentUuid": "ac77e56d_8001ed67",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a28f65_dd1a8729",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1045,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T18:58:14Z",
      "side": 1,
      "message": "Ah, wrong function call (I need to get more used to overloading).\n\nLooking again, the intent with this call isn\u0027t to actually get anything; we\u0027re actually interested in initializing mFramebuffer.   That\u0027s another pattern I\u0027ll need to get use to, where getters/setters potentially do a lot of work beyond just getting/setting.",
      "parentUuid": "c6d67c1d_d4f24ef4",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f163d7_42f1a48e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1045,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T19:18:46Z",
      "side": 1,
      "message": "We could rename the function to clarify. Or use an ensureInitialized() then getter (with no possibility of error) pattern.",
      "parentUuid": "69a28f65_dd1a8729",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9792a58c_694331a4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1055,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "can put in the TODO about gaps here. You can just leave a bug tag, not sure the ldap is any help.",
      "range": {
        "startLine": 1055,
        "startChar": 11,
        "endLine": 1055,
        "endChar": 27
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f4e2fba_1e470023",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1067,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "How do you know to use the float32 value here rather than int32 or uint32?",
      "range": {
        "startLine": 1067,
        "startChar": 22,
        "endLine": 1067,
        "endChar": 29
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c5a707f_99af1060",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1067,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "Are there definitions for magic numbers like this?",
      "range": {
        "startLine": 1067,
        "startChar": 30,
        "endLine": 1067,
        "endChar": 31
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d9a176b_4837f058",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1138,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "again can use any()",
      "range": {
        "startLine": 1138,
        "startChar": 8,
        "endLine": 1138,
        "endChar": 37
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a637a38_3c7d9154",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1247,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "Same as above.   This block can go.",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a24f77e9_5d290263",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1247,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T18:58:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0a637a38_3c7d9154",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa6eb397_06b63d22",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1257,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T18:36:49Z",
      "side": 1,
      "message": "constexpr if possible. The brightest shade of pink is probably the most strand-out color I can think of.",
      "range": {
        "startLine": 1257,
        "startChar": 39,
        "endLine": 1257,
        "endChar": 73
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8036a3e3_7874b9a0",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1257,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T18:58:14Z",
      "side": 1,
      "message": "Are there multiple ways a known bad color value can indicate problems?   If so, is there a good way to make them unique and/or grep-able so it can be easier to know which bad value got used and where it came from?",
      "parentUuid": "fa6eb397_06b63d22",
      "range": {
        "startLine": 1257,
        "startChar": 39,
        "endLine": 1257,
        "endChar": 73
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf9dd41c_331e4a0c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1257,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-04-01T19:18:46Z",
      "side": 1,
      "message": "I don\u0027t really see being grep-able to be a thing really. It\u0027s hard to get a floating point color value from a screen cap. I would use something visually noticeable like bright green or pink. But any value is probably fine.",
      "parentUuid": "8036a3e3_7874b9a0",
      "range": {
        "startLine": 1257,
        "startChar": 39,
        "endLine": 1257,
        "endChar": 73
      },
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84a8e89f_2a6897bc",
        "filename": "src/libANGLE/renderer/vulkan/vk_wrapper.h",
        "patchSetId": 6
      },
      "lineNbr": 174,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "Should this be an UNREACHABLE() or output a WARN() or something, so that no one relies on this actually returning something useful?",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "948f6ae5_54565d2f",
        "filename": "src/tests/gl_tests/ClearTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 764,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-04-01T16:47:44Z",
      "side": 1,
      "message": "Should there be an anglebug referenced here?",
      "revId": "558eb217caf3020e24fed81ad0ec363150bcdfb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}