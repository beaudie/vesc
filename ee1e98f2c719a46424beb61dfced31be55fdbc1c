{
  "comments": [
    {
      "key": {
        "uuid": "e4c9a52d_869e8203",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4082,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "nit: can you place this above setupDraw and add ANGLE_INLINE to the method? this will ensure it\u0027s inlined.",
      "range": {
        "startLine": 4072,
        "startChar": 0,
        "endLine": 4082,
        "endChar": 1
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc08435f_6e3162d3",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4082,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "I think we should put pair functions together to make code reading easier. If we move, both start and end functions should move ahead.\n\nANGLE_INLINE is added.",
      "parentUuid": "e4c9a52d_869e8203",
      "range": {
        "startLine": 4072,
        "startChar": 0,
        "endLine": 4082,
        "endChar": 1
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705c39ef_8e614dc2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 4082,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-31T18:56:56Z",
      "side": 1,
      "message": "I assumed inline doesn\u0027t work if the function isn\u0027t declared before the other function. Can you double-check that it really gets inlined?",
      "parentUuid": "cc08435f_6e3162d3",
      "range": {
        "startLine": 4072,
        "startChar": 0,
        "endLine": 4082,
        "endChar": 1
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221980e3_059a2c4f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 967,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-29T03:40:21Z",
      "side": 1,
      "message": "Shouldn\u0027t there be two of these? One for gl::QueryType::AnySamples and another for gl::QueryType::AnySamplesConservative?",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce15468a_a439e30f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 967,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "Good catch, you\u0027re right. Both can be active at the same time. I think you could reproduce this failure in a small unit test.",
      "parentUuid": "221980e3_059a2c4f",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9da4c5_f80d188a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 967,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-30T17:08:00Z",
      "side": 1,
      "message": "Good catch!. Will fix.",
      "parentUuid": "ce15468a_a439e30f",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa7635c0_69919f1d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 13
      },
      "lineNbr": 967,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb9da4c5_f80d188a",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59bcac9c_06fa11a0",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-29T03:40:21Z",
      "side": 1,
      "message": "Not a big deal, since this is not a common scenario, but wouldn\u0027t closing the render pass have sufficed?",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "139036cf_62a3cf7f",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-30T17:08:00Z",
      "side": 1,
      "message": "I think so. exact same argument for calling flushImpl as well. Its just pathological usage case, not really expecting anyone to use it this way except some unit test case to get it behave correctly.",
      "parentUuid": "59bcac9c_06fa11a0",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d657a8d_f6d7c0ed",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 83,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "139036cf_62a3cf7f",
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d6294cf_f25b8525",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 205,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "nit: can you make a helper function for this? like unstashQueriesAndGetResult?",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 205,
        "endChar": 37
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a26465_6f21c43c",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 205,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d6294cf_f25b8525",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 205,
        "endChar": 37
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e360207_5fc28297",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 225,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "can be reused here.",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 225,
        "endChar": 37
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce89cd6a_9623440a",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 225,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e360207_5fc28297",
      "range": {
        "startLine": 217,
        "startChar": 0,
        "endLine": 225,
        "endChar": 37
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a6f7104_a6ef80f8",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.h",
        "patchSetId": 13
      },
      "lineNbr": 40,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "nit: can you place this in QueryImpl.h? no reason to restrict it to Vk.",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 34
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "977db44e_acd3b6c9",
        "filename": "src/libANGLE/renderer/vulkan/QueryVk.h",
        "patchSetId": 13
      },
      "lineNbr": 40,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a6f7104_a6ef80f8",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 34
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acdb9246_818d0eff",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1118,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "Shabi, would all of these checks been avoided somehow by calling endRenderPass in QueryVk? I\u0027m finding the code a bit hard to follow. I don\u0027t know why they weren\u0027t necessary with your prior design.",
      "range": {
        "startLine": 1117,
        "startChar": 0,
        "endLine": 1118,
        "endChar": 5
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ed415e5_6d682480",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1118,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-30T18:59:54Z",
      "side": 1,
      "message": "I think existing code has similar bug that if you never called begin/end query and just try to getResult, you will have similar issue.",
      "parentUuid": "acdb9246_818d0eff",
      "range": {
        "startLine": 1117,
        "startChar": 0,
        "endLine": 1118,
        "endChar": 5
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2688ebab_52ef5ce0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-31T04:17:44Z",
      "side": 1,
      "message": "When I originally implemented this, the \"special graph node\" that corresponded to the begin/end query already closed every renderpass.\n\nIf the query was never begin/ended but getResult was called, there was no reason to close the render pass (why would it?).\n\nIIUC, the issue here is that if the serial is not valid, then the query doesn\u0027t exist or something? I don\u0027t see how that relates to endRenderPass.",
      "parentUuid": "5ed415e5_6d682480",
      "range": {
        "startLine": 1117,
        "startChar": 0,
        "endLine": 1118,
        "endChar": 5
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf5a57cf_a4312354",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1118,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2688ebab_52ef5ce0",
      "range": {
        "startLine": 1117,
        "startChar": 0,
        "endLine": 1118,
        "endChar": 5
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6d5c0c0_91fd7d63",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-29T03:40:21Z",
      "side": 1,
      "message": "You could add a `bool valid()` method to the `Serial` class instead. Serials default initialize to 0 (a.k.a Serial::kInvalid). You can add an explicit `mMostRecentSerial \u003d Serial()` to `init()` if reinitialization is a concern.",
      "range": {
        "startLine": 349,
        "startChar": 4,
        "endLine": 349,
        "endChar": 35
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d51a6a7_90c5a070",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T14:34:57Z",
      "side": 1,
      "message": "Adding valid to serial definitely makes more sense.",
      "parentUuid": "e6d5c0c0_91fd7d63",
      "range": {
        "startLine": 349,
        "startChar": 4,
        "endLine": 349,
        "endChar": 35
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005c2bd5_23e7531b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-30T17:08:00Z",
      "side": 1,
      "message": "A serial is just a number, there really isn\u0027t a valid or invalid. A stale serial number is still valid, just has a different meaning (meaning the past event). I notice that serial is 64 bit number, so wrap around is unlikely. But in theory if it can ever wrap around, you will have to initialize it to mCompletedSerial instead of 0. My point is that move \"valid\" to Serial class might run into counter argument like this. \n\nWhat I try to differentiate here is if any query commands has ever been placed in the command buffer or not. Maybe I should just rename it to mReferencedInCommandBuffer to make it crystal clear.",
      "parentUuid": "5d51a6a7_90c5a070",
      "range": {
        "startLine": 349,
        "startChar": 4,
        "endLine": 349,
        "endChar": 35
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19b170e8_83847f7e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-30T17:40:39Z",
      "side": 1,
      "message": "The cases where your serial is zero are the same where you set this flag to true, right? Zero serials are invalid. We even have kInvalid \u003d\u003d 0. So valid() in Serial makes sense. Does that sound ok to you? See serial_utils.h.",
      "parentUuid": "005c2bd5_23e7531b",
      "range": {
        "startLine": 349,
        "startChar": 4,
        "endLine": 349,
        "endChar": 35
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b74c1076_a02126ca",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-03-31T18:34:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19b170e8_83847f7e",
      "range": {
        "startLine": 349,
        "startChar": 4,
        "endLine": 349,
        "endChar": 35
      },
      "revId": "ee1e98f2c719a46424beb61dfced31be55fdbc1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}