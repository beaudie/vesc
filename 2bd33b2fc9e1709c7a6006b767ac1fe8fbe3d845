{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8f383efd_7db8f709",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 8,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-12T13:00:03Z",
      "side": 1,
      "message": "Just catching up.. a bit more context about the bug and the proposed fix would be welcome.",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c4eccd7_1b4c5521",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-09T23:43:24Z",
      "side": 1,
      "message": "LGTM.\n\nAdding Shabi for the +2.",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "899b9756_856b70cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-07-09T23:44:11Z",
      "side": 1,
      "message": "Also, it looks like CQ is failing the new tests, so there may be some more work required for that.",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e560cfd_aac0ab5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:54:36Z",
      "side": 1,
      "message": "This is not the right fix; as described below I could modify the test in such a way that still fails after this change.\n\n+Jamie",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "620ceb5f_ce846f1b",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1106289
      },
      "writtenOn": "2021-07-10T03:37:34Z",
      "side": 1,
      "message": "Note that there are two masks (per polygon orientation), that affect stencil operations. The mask parameter set by glStencilFunc() is essentially a read mask, while the one set by glStencilMask() is a write mask.\n\nThis flag indicates that the write mask is dirty, but this function is part of the glStencilFunc() state tracking, which only affects the read mask.\n\nI suspect there\u0027s a bug deeper down instead.",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e725d09a_d59604f5",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:54:36Z",
      "side": 1,
      "message": "Thanks for pointing this out Nicolas. I diagnosed the problem, and here\u0027s what happens:\n\n-- This dirty bit is set by default, so it doesn\u0027t need to be set here\n-- In the test, glClear is called on the framebuffer when there\u0027s no stencil attachment.\n  * The backend syncs the stencil bits, ignoring them because there\u0027s no stencil attachment.\n  * The stencil dirty bits are cleared\n-- The test then adds a stencil attachment\n  * The stencil dirty bits are not set at this point\n  * On next sync, stencil dirty bits are not processed\n\nThe fact that this change makes the test pass is somewhat coincidental. If the test set up the stencil function and ops and even write mask, before adding the stencil attachment, it would still fail after this change.\n\nJamie might have a better idea, but what I\u0027m thinking is this: See how ContextVk::syncState handles gl::State::DIRTY_BIT_DRAW_FRAMEBUFFER_BINDING. A lot of state that depends on the framebuffer is updated when the binding changes. I think FramebufferVk::syncState should also call (a subset of) these functions when its bindings change (in particular, when an attachment is added/removed, not necessarily. See how shouldUpdateColorMask solves this for one particular situation, but everything else is missing.",
      "parentUuid": "620ceb5f_ce846f1b",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e990f4c_df7a6b0c",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-12T13:00:03Z",
      "side": 1,
      "message": "\u003e   * The backend syncs the stencil bits, ignoring them because there\u0027s no stencil attachment.\n\nWhat code is this? In ContextVk or FramebufferVk?",
      "parentUuid": "e725d09a_d59604f5",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1197f86e_35de975b",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-12T14:51:40Z",
      "side": 1,
      "message": "ContextVk::syncState called through glClear.",
      "parentUuid": "1e990f4c_df7a6b0c",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e5e322a_803fb29f",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2021-07-12T15:54:52Z",
      "side": 1,
      "message": "\u003e The fact that this change makes the test pass is somewhat coincidental. If the test set up the stencil function and ops and even write mask, before adding the stencil attachment, it would still fail after this change.\n\nAck, added that test and switched this change to WIP.",
      "parentUuid": "1197f86e_35de975b",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21181c58_dec5b669",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-12T16:14:39Z",
      "side": 1,
      "message": "Shabi do you mean it clears the \"Vulkan\" ContextVk stencil dirty bits, or \"GL\" dirty bits? The GL dirty bits seem to just update pipeline states, I\u0027m not sure why they\u0027d need to be re-run.\n\nFor the Vulkan dirty bits, the \"dirtyBitMask\" mechanism is meant to prevent syncing dirty bits that are not relevant for a particular action command. Shabi can you look at the various masks and make a suggestion if that\u0027s the case? Still need some clarity on this.",
      "parentUuid": "6e5e322a_803fb29f",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "626b90a9_38619626",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 5
      },
      "lineNbr": 964,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-12T16:15:16Z",
      "side": 1,
      "message": "Jason, feel free to leave this as started so we can have a place to discuss the design. Or alternately start a small one page design doc.",
      "parentUuid": "21181c58_dec5b669",
      "range": {
        "startLine": 964,
        "startChar": 23,
        "endLine": 964,
        "endChar": 56
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3d467c7_48dc53d4",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 399,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:33:14Z",
      "side": 1,
      "message": "Please use `GLFramebuffer fbo;` instead, from gl_raii. Same below which can use GLRenderbuffer. No need to glDelete* anything (including the program) as they all have destructors.",
      "range": {
        "startLine": 398,
        "startChar": 0,
        "endLine": 399,
        "endChar": 31
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d88e1abc_03f5697f",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 399,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2021-07-12T15:54:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3d467c7_48dc53d4",
      "range": {
        "startLine": 398,
        "startChar": 0,
        "endLine": 399,
        "endChar": 31
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ae6bc5_ac1e60eb",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 421,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:33:14Z",
      "side": 1,
      "message": "EXPECT_PIXEL_COLOR_EQ(0, 0, GLColor::transparentBlack);",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "597bcf53_dff0f64e",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 421,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2021-07-12T15:54:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00ae6bc5_ac1e60eb",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6a9de54_c439fefb",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 426,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:33:14Z",
      "side": 1,
      "message": "Use `angle::essl1_shaders::ColorUniform()` instead",
      "range": {
        "startLine": 426,
        "startChar": 57,
        "endLine": 426,
        "endChar": 66
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2ae45b3_6fe5bd56",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 426,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2021-07-12T15:54:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6a9de54_c439fefb",
      "range": {
        "startLine": 426,
        "startChar": 57,
        "endLine": 426,
        "endChar": 66
      },
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77bc9b69_4acdd394",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 436,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:33:14Z",
      "side": 1,
      "message": "EXPECT_PIXEL_COLOR_EQ(0, 0, GLColor::red);",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86b17f5c_b13db0f8",
        "filename": "src/tests/gl_tests/DepthStencilTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 436,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2021-07-12T15:54:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77bc9b69_4acdd394",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ef5da78_5e5eebb7",
        "filename": "src/tests/test_utils/ANGLETest.h",
        "patchSetId": 5
      },
      "lineNbr": 326,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-07-11T01:33:14Z",
      "side": 1,
      "message": "This is generating errors on some backends. Probably needs an extension on ES3?",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5875727f_93151599",
        "filename": "src/tests/test_utils/ANGLETest.h",
        "patchSetId": 5
      },
      "lineNbr": 326,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-07-12T13:00:03Z",
      "side": 1,
      "message": "Reading stencil with ReadPixels is an extension, we have some coverage in DepthStencilFormatsTest. It\u0027s not guaranteed to be available.",
      "parentUuid": "6ef5da78_5e5eebb7",
      "revId": "2bd33b2fc9e1709c7a6006b767ac1fe8fbe3d845",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}