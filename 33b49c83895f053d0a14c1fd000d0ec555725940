{
  "comments": [
    {
      "key": {
        "uuid": "dbfb5578_85b43330",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2020-04-26T01:11:04Z",
      "side": 1,
      "message": "Maybe it is better to change this title to another more meaningful one that can better express what you have done in this patch?",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 7,
        "endChar": 41
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "157d2081_a34e3159",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbfb5578_85b43330",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 7,
        "endChar": 41
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f4d7599_ae99fc95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2020-04-26T01:11:04Z",
      "side": 1,
      "message": "What \"necessary\" means here?\n\nAccording to [1], does it mean that we can always translate uniform blocks with a large matrix array as its only one member to structured buffer except when the uniform blocks are declared with \"row-major/column-major\" qualifiers?",
      "range": {
        "startLine": 11,
        "startChar": 8,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c5096a4_f30df386",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f4d7599_ae99fc95",
      "range": {
        "startLine": 11,
        "startChar": 8,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f758dd6_bb6ab41e",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T02:30:21Z",
      "side": 1,
      "message": "const TInterfaceBlock *interfaceBlock \u003d\n    binaryNode-\u003egetLeft()-\u003egetType().getInterfaceBlock();\nreturn interfaceBlock;",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 13
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87850e86_6bac92fd",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "[ss]",
      "parentUuid": "2f758dd6_bb6ab41e",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 100,
        "endChar": 13
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "147a4458_0325ea23",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T02:30:21Z",
      "side": 1,
      "message": "Why this condition is needed?",
      "range": {
        "startLine": 115,
        "startChar": 12,
        "endLine": 115,
        "endChar": 60
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68ab504c_f5552699",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Angle inserts some TInterfaceBlock nodes in the tree in RemoveDynamicIndexing.cpp, these codes are angele defined, we cannot add suffix string for these nodes.",
      "parentUuid": "147a4458_0325ea23",
      "range": {
        "startLine": 115,
        "startChar": 12,
        "endLine": 115,
        "endChar": 60
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91889dc4_0b6944f9",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T05:33:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "68ab504c_f5552699",
      "range": {
        "startLine": 115,
        "startChar": 12,
        "endLine": 115,
        "endChar": 60
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "041dd4b3_529a01cc",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1661,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T02:30:21Z",
      "side": 1,
      "message": "[a]",
      "range": {
        "startLine": 1650,
        "startChar": 0,
        "endLine": 1661,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e0079bf_05c20818",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1661,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "041dd4b3_529a01cc",
      "range": {
        "startLine": 1650,
        "startChar": 0,
        "endLine": 1661,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd6a975b_d68746d6",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1692,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T02:30:21Z",
      "side": 1,
      "message": "This is totally same with [a]. How about further refactoring this part like below:\nif (visit \u003d\u003d PostVisit)\n{\n   AddMatrixSuffixWhenNecessary(node-\u003egetLeft());\n}\n\nThen you can write a helper function like below. And GetInterfaceBlockOfUniformBlockNearestIndexOperator can be removed.\n\n// Only add matrix suffix when the parent of index op is a uniform block. \nvoid AddMatrixSuffixWhenNecessary(const TIntermTyped *node)\n{\n    bool needMatrixSuffix \u003d false;\n    const TIntermBinary *binaryNode \u003d node-\u003egetAsBinaryNode();\n    if (binaryNode)\n    {\n        if (binaryNode-\u003egetOp() \u003d\u003d EOpIndexDirectInterfaceBlock)\n        {\n           needMatrixSuffix \u003d true;\n        }\n    }\n    else\n    {\n        const TIntermSymbol *symbolNode \u003d node-\u003egetAsSymbolNode();\n        if (symbolNode)\n        {\n            const TVariable \u0026variable \u003d symbolNode-\u003evariable();\n            const TType \u0026variableType \u003d variable.getType();\n\n            if (variableType.getQualifier() \u003d\u003d EvqUniform \u0026\u0026\n                variable.symbolType() \u003d\u003d SymbolType::UserDefined)\n            {\n                needMatrixSuffix \u003d true;\n            }\n        }\n    }\n\n    if (needMatrixSuffix)\n    {\n       TInfoSinkBase \u0026out \u003d getInfoSink();\n       out \u003c\u003c \"._matrix_\";\n    }\n}\n\nYou may notice that I didn\u0027t use Decorate(field-\u003ename()). I think you can use a unified name \u0027._matrix\u0027 instead of \u0027._matrix\u0027 + Decorate(field-\u003ename()).",
      "range": {
        "startLine": 1681,
        "startChar": 0,
        "endLine": 1692,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f823edc_8a617616",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1692,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T02:35:05Z",
      "side": 1,
      "message": "Sorry I missed mResourcesHLSL-\u003eshouldTranslateUniformBlockToStructuredBuffer. Then the function should be like:\nvoid AddMatrixSuffixWhenNecessary(const TIntermTyped *node)\n{\n\n    TInterfaceBlock * interfaceBlock \u003d nullptr;\n    const TIntermBinary *binaryNode \u003d node-\u003egetAsBinaryNode();\n    if (binaryNode)\n    {\n        if (binaryNode-\u003egetOp() \u003d\u003d EOpIndexDirectInterfaceBlock)\n        {\n           interfaceBlock \u003d binaryNode-\u003egetLeft()-\u003egetType().getInterfaceBlock();\n        }\n    }\n    else\n    {\n        const TIntermSymbol *symbolNode \u003d node-\u003egetAsSymbolNode();\n        if (symbolNode)\n        {\n            const TVariable \u0026variable \u003d symbolNode-\u003evariable();\n            const TType \u0026variableType \u003d variable.getType();\n            if (variableType.getQualifier() \u003d\u003d EvqUniform \u0026\u0026\n                variable.symbolType() \u003d\u003d SymbolType::UserDefined)\n            {\n                interfaceBlock \u003d \u003d variableType.getInterfaceBlock();\n            }\n        }\n    }\n    if (interfaceBlock \u0026\u0026 mResourcesHLSL-\u003eshouldTranslateUniformBlockToStructuredBuffer(\n                            *interfaceBlock))\n    {\n       TInfoSinkBase \u0026out \u003d getInfoSink();\n       out \u003c\u003c \"._matrix_\";\n    }\n}",
      "parentUuid": "cd6a975b_d68746d6",
      "range": {
        "startLine": 1681,
        "startChar": 0,
        "endLine": 1692,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16be3ee_742e85dc",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1692,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Jiajia, I accept your [ss] comment. I think it it better that this function here is only a helper function, don\u0027t output tree content in this function.",
      "parentUuid": "1f823edc_8a617616",
      "range": {
        "startLine": 1681,
        "startChar": 0,
        "endLine": 1692,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a425315_5877e17b",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1692,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2020-04-26T05:33:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e16be3ee_742e85dc",
      "range": {
        "startLine": 1681,
        "startChar": 0,
        "endLine": 1692,
        "endChar": 21
      },
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7a90b87_7ebf7ac5",
        "filename": "src/compiler/translator/ResourcesHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 893,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2020-04-26T01:11:04Z",
      "side": 1,
      "message": "[1]",
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "767e7a9e_981d18e5",
        "filename": "src/compiler/translator/ResourcesHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 893,
      "author": {
        "id": 1166444
      },
      "writtenOn": "2020-04-26T05:02:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b7a90b87_7ebf7ac5",
      "revId": "33b49c83895f053d0a14c1fd000d0ec555725940",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}