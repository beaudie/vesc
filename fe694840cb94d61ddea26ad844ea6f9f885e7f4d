{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aacfce51_399d6a88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-10T07:23:50Z",
      "side": 1,
      "message": "hi Shahbaz,\nI\u0027ve updated the code based on the discussion above, and do little refine on the read texture sample check. Add a new interface \u0027IsRenderPassStartedAndReadImageUsesBarrier\u0027 attached with a new field \u0027mRenderPassReadImagesUsedBarrier\u0027 in RenderPassCommandBufferHelper, to track the read image with barrier in render pass. This seems be more precise than using mRenderPassUsedImages directly, and also can make a distinguish with the scenario of \u0027endRenderPassIfComputeReadAfterAttachmentWrite\u0027.",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a544fe55_4028e35c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-10T16:41:44Z",
      "side": 1,
      "message": "Deferring review to Shabi and Charlie. Please let me know if you need my input.",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a64c80ff_5ed64da3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-10T21:11:24Z",
      "side": 1,
      "message": "Hi,\n\nWhat if instead we _don\u0027t_ distinguish `endRenderPassIfComputeReadAfterAttachmentWrite` and instead make it more generic (to include textures in addition to images)? Then it would cover some of the cases that glMemoryBarrier would do too, but what\u0027s the harm in that? So for images it would continue to use `usesImage`, and for textures it would use the new `usesReadImagesWithBarrier`.\n\nAt this point, it\u0027s important to get the tests we talked about implemented to verify your changes. Another interesting test here would be to add this in VulkanPerformanceCounterTest.cpp:\n\n- FS texture sample, then CS texture sample, then FS texture sample\n\nand expect that only one render pass is used (i.e. the CS is reordered before the render pass).",
      "parentUuid": "aacfce51_399d6a88",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81ac8c2d_2c5be5da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-14T10:52:14Z",
      "side": 1,
      "message": "Hi Shahbaz,\nI\u0027ve add two tests to verify our discussion.\n\nFor test \u0027ComputeShaderTest.DrawDispatchImageReadDraw\u0027, refer to:\n\u003e FS texture sample, then CS image read, then FS texture sample\nThe change can hold this test well as we wish when it is the image scenario.\n\n\nFor test \u0027VulkanPerformanceCounterTest_ES31.TextureSampleByDrawDispatchDraw\u0027,refer to:\n\u003e FS texture sample, then CS texture sample, then FS texture sample\nThings seems not happen as we wish. The expect render pass is only one; but actual get two. When FS texture sample to CS texture sample, the ImageLayout in ANGLE switch from FRAGMENT_SHADER_READ to COMPUTE_SHADER_READ, and ANGLE considers it is a different read layout, so a read barrier is recorded. And the render pass be closed before do the CS dispatch. But anyway, if we acknowledge this different shader stage read layout (although the vkImageLayout is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL for both), the endRP here is needed.\n\nBut this test has extra validation fail, need to dig it out further:\n[ SYNC-HAZARD-READ_AFTER_WRITE ] Validation Error: [ SYNC-HAZARD-READ_AFTER_WRITE ] Object 0: handle \u003d 0x2f000000002f, type \u003d VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID \u003d 0x4cb75b2d | vkCmdDispatch: Hazard READ_AFTER_WRITE for VkImageView 0x2f000000002f[], in VkCommandBuffer 0x560d7016c018[], and VkPipeline 0x6b000000006b[], VkDescriptorSet 0x6c000000006c[], type: VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, imageLayout: VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, binding #0, index 0. Access info (usage: SYNC_COMPUTE_SHADER_SHADER_STORAGE_READ, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: SYNC_FRAGMENT_SHADER_SHADER_SAMPLED_READ|SYNC_FRAGMENT_SHADER_SHADER_STORAGE_READ|SYNC_FRAGMENT_SHADER_UNIFORM_READ, command: vkCmdPipelineBarrier, seq_no: 3, reset_no: 1). Object: 0x2f000000002f (type \u003d Image View(14))\n\nBased on this test, come back to the endRP issue in invalidateCurrentTextures. When CS texture sample, actually this scenario will hit endRenderPassIfComputeReadAfterAttachmentWrite\u0027s endRP, caused by the read image will be recorded to mRenderPassUsedImages too (in RenderPassCommandBufferHelper::imageRead). \nIf we limit the *usesImage* to write operation, seems things be more clearly:\n\u003e when call RenderPassCommandBufferHelper::imageRead, not add the image to mRenderPassUsedImages list; and use the usesReadImagesWithBarrier to trace if we need the barrier;\n\u003e in the invalidateCurrentTextures, the XXXAfterAttachmentWrite handle the fbo texture write and the XXXAfterTextureSample handle the previous FS texture read.",
      "parentUuid": "a64c80ff_5ed64da3",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efa46962_28e5ad3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-15T16:11:21Z",
      "side": 1,
      "message": "Thanks for the tests. Could you please also add this test?\n\n- FS image read followed by CS texture sample\n\n\u003e \u003e FS texture sample, then CS image read, then FS texture sample\n\u003e \n\u003e The change can hold this test well as we wish when it is the image scenario.\n\nExcellent\n\n\u003e \u003e FS texture sample, then CS texture sample, then FS texture sample\n\u003e \n\u003e Things seems not happen as we wish\n\nOk I see. The sync hazard might have to do with this bug: anglebug.com/6663 but not sure\n\nAlso, understood that currently we unnecessarily break the render pass. I think what\u0027s best right now is:\n\n1. Open a bug about optimizing this\n2. Make the test expect 2 render passes, with a note and reference to the bug\n3. Open a bug about the syncval error\n4. Suppress the syncval error here: https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/vulkan/RendererVk.cpp;l\u003d201\n\nAnd then follow up with your suggested work to actually do the optimization in a separate change.",
      "parentUuid": "81ac8c2d_2c5be5da",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33d49618_81a0295c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 20
      },
      "lineNbr": 0,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-17T10:22:38Z",
      "side": 1,
      "message": "Done.\n1, issued a new bug: anglebug.com/7030 to trace the optimizing of the unnecessary renderpass break;\n2, the syncval error I met is similar with the issue 6663, I issued anglebug.com/7031 for it, and add it to \u0027kSkippedSyncvalMessages\u0027, the test noted can run now.",
      "parentUuid": "efa46962_28e5ad3a",
      "revId": "fe694840cb94d61ddea26ad844ea6f9f885e7f4d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}