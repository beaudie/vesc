{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4463c618_ad57b41a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-25T00:05:37Z",
      "side": 1,
      "message": "Before you make this more complicated, I am wondering if we could actually switch SharedFence to use std::shared_ptr instead of our own refcounting. I had this question before, when I was working on SHaredFence. At that time I chose to keep using RefCounted mainly because it is already good enough to fit our needs (that we do not specifically needs thread safety). Now looks like you actually have a need to make the refcounting thread safe, then why not just switch to std::shared_ptr? The reason that destroy needs mDevice is easy to solve by storing mDevice in the object. Thoughts?",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bc514c1_7f881242",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-25T11:43:16Z",
      "side": 1,
      "message": "\u003e The reason that destroy needs mDevice is easy to solve by storing mDevice in the object. Thoughts?\n\nI had same question. Why not store `mDevice` in other cases then?\nIf I store device inside the object in this case, then others may do the same, because we already have one such case. I did not move `mDevice` inside the object, because I thought that this would conflict with global design, that only Context/Display has device.\n\nUpdating `RefCounted\u003c\u003e` was not my idea. My original solution had manual `addRef()/release()` methods, that was simple (however also had bug with wrong memory order in `release()`).\n\nIf @syoussefi@chromium.org is OK with adding `mDevice` inside the object, then I will do that.",
      "parentUuid": "4463c618_ad57b41a",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03532b43_b6d0e83d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-25T15:34:48Z",
      "side": 1,
      "message": "Yeah, I guess that\u0027s better than duplicating `std::shared_ptr`",
      "parentUuid": "6bc514c1_7f881242",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93c85248_54a38557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-25T16:57:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03532b43_b6d0e83d",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b897c2de_038b67c3",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-25T15:09:45Z",
      "side": 1,
      "message": "Could you please check with `std::shared_ptr` what it uses for `operator bool`?",
      "range": {
        "startLine": 724,
        "startChar": 35,
        "endLine": 724,
        "endChar": 55
      },
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "153de7ab_e35ad709",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 724,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-25T15:58:25Z",
      "side": 1,
      "message": "It just checks the pointer for nullptr.\n`isReferenced()` used only for debugging, I wanted to add comment.\n\nHowever here is `use_count()`:\n```\nlong use_count() const _NOEXCEPT {return __cntrl_ ? __cntrl_-\u003euse_count() : 0;}\n\n    long use_count() const _NOEXCEPT {\n        return __libcpp_relaxed_load(\u0026__shared_owners_) + 1;\n    }\n    \ntemplate \u003cclass _ValueType\u003e\ninline _LIBCPP_INLINE_VISIBILITY\n_ValueType __libcpp_relaxed_load(_ValueType const* __value) {\n#if !defined(_LIBCPP_HAS_NO_THREADS) \u0026\u0026 \\\n    defined(__ATOMIC_RELAXED) \u0026\u0026        \\\n    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))\n    return __atomic_load_n(__value, __ATOMIC_RELAXED);\n#else\n    return *__value;\n#endif\n}\n```\n\nIt uses **relaxed**. This is again because, reference counting is not for access synchronization. The only use is to check if it equals 1, I guess.\n\n```\nNotes\n\nCommon use cases include\n\n    comparison with ​0​. If use_count returns zero, the shared pointer is empty and\n    manages no objects (whether or not its stored pointer is nullptr).\n \n    comparison with 1. If use_count returns 1, there are no other owners.\n    The deprecated (since C++17) member function unique() is provided for this use\n    case. (until C++20) In multithreaded environment, this does not imply that the\n    object is safe to modify because accesses to the managed object by former\n    shared owners may not have completed, and because new shared owners may be\n    introduced concurrently, such as by std::weak_ptr::lock.\n```\n\n---\n\nI\u0027m confused. I need to abandon this and use `std::shared_ptr\u003c\u003e`?\nThis question was just for curiosity?",
      "parentUuid": "b897c2de_038b67c3",
      "range": {
        "startLine": 724,
        "startChar": 35,
        "endLine": 724,
        "endChar": 55
      },
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "705e504a_062e8d01",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-25T16:01:43Z",
      "side": 1,
      "message": "Just for curiosity (I asked it before the `std::shared_ptr` suggestion, or at least before I noticed it!)",
      "parentUuid": "153de7ab_e35ad709",
      "range": {
        "startLine": 724,
        "startChar": 35,
        "endLine": 724,
        "endChar": 55
      },
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}