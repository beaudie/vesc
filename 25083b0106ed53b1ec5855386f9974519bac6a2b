{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4463c618_ad57b41a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-25T00:05:37Z",
      "side": 1,
      "message": "Before you make this more complicated, I am wondering if we could actually switch SharedFence to use std::shared_ptr instead of our own refcounting. I had this question before, when I was working on SHaredFence. At that time I chose to keep using RefCounted mainly because it is already good enough to fit our needs (that we do not specifically needs thread safety). Now looks like you actually have a need to make the refcounting thread safe, then why not just switch to std::shared_ptr? The reason that destroy needs mDevice is easy to solve by storing mDevice in the object. Thoughts?",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bc514c1_7f881242",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-25T11:43:16Z",
      "side": 1,
      "message": "\u003e The reason that destroy needs mDevice is easy to solve by storing mDevice in the object. Thoughts?\n\nI had same question. Why not store `mDevice` in other cases then?\nIf I store device inside the object in this case, then others may do the same, because we already have one such case. I did not move `mDevice` inside the object, because I thought that this would conflict with global design, that only Context/Display has device.\n\nUpdating `RefCounted\u003c\u003e` was not my idea. My original solution had manual `addRef()/release()` methods, that was simple (however also had bug with wrong memory order in `release()`).\n\nIf @syoussefi@chromium.org is OK with adding `mDevice` inside the object, then I will do that.",
      "parentUuid": "4463c618_ad57b41a",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03532b43_b6d0e83d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-25T15:34:48Z",
      "side": 1,
      "message": "Yeah, I guess that\u0027s better than duplicating `std::shared_ptr`",
      "parentUuid": "6bc514c1_7f881242",
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b897c2de_038b67c3",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 724,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-25T15:09:45Z",
      "side": 1,
      "message": "Could you please check with `std::shared_ptr` what it uses for `operator bool`?",
      "range": {
        "startLine": 724,
        "startChar": 35,
        "endLine": 724,
        "endChar": 55
      },
      "revId": "25083b0106ed53b1ec5855386f9974519bac6a2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}