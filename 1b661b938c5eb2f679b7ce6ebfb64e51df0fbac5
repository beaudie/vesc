{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "72e37cd5_14dffadd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-02T16:41:52Z",
      "side": 1,
      "message": "Looks reasonable to me.",
      "revId": "1b661b938c5eb2f679b7ce6ebfb64e51df0fbac5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bedda6b2_5310e4f8",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-05-04T16:05:29Z",
      "side": 1,
      "message": "What is the reason, why `atomic` is here, while `mutex` is on another structure?\nAlso why have separate structures and not have all members inside this structure?\n\nWhile `mutex` is required to protect `vkAcquireNextImageKHR`, we can\u0027t write result without this mutex.\n\nTechnically, we can write result without a `mutex` lock, but then we need to assign `needToAcquireNextSwapchainImage`, that must be done while still holding the `mutex` lock. So result must also be written inside the mutex.\n\nThe above makes two structures very closely related and IMO it would be simple to have a single structure.",
      "revId": "1b661b938c5eb2f679b7ce6ebfb64e51df0fbac5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbab05d8_714700e2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-04T16:32:21Z",
      "side": 1,
      "message": "Because of that future change we talked about. When ANI is called at the end of render pass, it means that other contexts may cause it. The atomic is used to make the access to this boolean from other contexts safe.\n\nI _could_ protect it with the mutex, but then it means every check of it would have to lock the mutex only to find out no ANI is needed. The fact that it\u0027s independent of the mutex is the reason I didn\u0027t put it in `UnlockedTryAcquireData`",
      "parentUuid": "bedda6b2_5310e4f8",
      "revId": "1b661b938c5eb2f679b7ce6ebfb64e51df0fbac5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34f2008a_eaa2dd2b",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-05-04T16:37:14Z",
      "side": 1,
      "message": "That is not what I mean. No need to remove atomic.\n\nMy question was why atomic and mutex are in different structures, and why to have these structures. Why not just have everything in a singe `ImageAcquireOperation` structure?\n\nThis will make code easier to read. And removes the question why we need separate structures, that used together anyway.",
      "parentUuid": "dbab05d8_714700e2",
      "revId": "1b661b938c5eb2f679b7ce6ebfb64e51df0fbac5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c935ff57_aa0c5cc5",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-04T16:55:46Z",
      "side": 1,
      "message": "My reasoning was:\n\n- The atomic is used freely by many functions to check if ANI is needed\n- UnlockedTryAcquireData is the input to the function that does ANI. Its mutex protects the ANI call (and the bits around it)\n- UnlockedTryAcquireResult is the output of the function that does ANI. It is _not_ protected by the mutex when it\u0027s processed because of the share group mutex.\n\nSo the scope of the mutex is really only whatever touches `UnlockedTryAcquireData`. If the code doesn\u0027t touch `UnlockedTryAcquireData`, it doesn\u0027t need mutex. I think putting the mutex there makes the association clearer.\n\nI grouped the fields in three pieces according to the above logical division of what they are.",
      "parentUuid": "34f2008a_eaa2dd2b",
      "revId": "1b661b938c5eb2f679b7ce6ebfb64e51df0fbac5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}