{
  "comments": [
    {
      "key": {
        "uuid": "fa5cfb22_1e5f3973",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-26T23:40:46Z",
      "side": 1,
      "message": "PTAL - sRGB decode support refactored to accommodate new SamplerHelper logic",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed6f039a_769e2481",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "There\u0027s definitely a lot here and I don\u0027t understand all of it.\n\nThis has probably come up before, but I\u0027m a little surprised to see there aren\u0027t any new dEQP tests that can be enabled.",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5a4fae_6670b88b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-31T15:51:28Z",
      "side": 1,
      "message": "Unfortunately didn\u0027t have time to finish this CL before my vacation. I\u0027ll be back Sept 10. Would prefer to re-use existing dirty bit mechanisms instead of adding a totally new path. In my absence please use Shabi as a reviewer.",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f526e450_088592e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Added tests to the commit message. expectations file doesn\u0027t need modification  since they weren\u0027t failing earlier, they were just reported as unsupported.",
      "parentUuid": "ed6f039a_769e2481",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14ac1f1f_50c062ae",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "include the static keyword\n\nalso update ShaderLang counter\n\nalso update SerializeShaderVariable",
      "range": {
        "startLine": 204,
        "startChar": 9,
        "endLine": 204,
        "endChar": 26
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "884e4ee0_0c585a03",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14ac1f1f_50c062ae",
      "range": {
        "startLine": 204,
        "startChar": 9,
        "endLine": 204,
        "endChar": 26
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25d894f1_83268ebc",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "is this actually a state of the extension or is this derived from the format?",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "622d9b4d_27f5d8d0",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-27T19:00:02Z",
      "side": 1,
      "message": "We use this to determine which imageview should be used - it will differ from the texture\u0027s format if the texture has sRGB_decode state set.\n\nDefault corresponds to \"the texture should use the imageview that corresponds to its format\"\nLinear corresponds to \"the texture has sRGB decoding disabled by extension, and should use a linear imageview even if it is in a nonlinear format\"\nNonLinear corresponds to \"the texture has sRGB override enabled by extension, and should use a nonlinear imageview even if it is in a linear format\"",
      "parentUuid": "25d894f1_83268ebc",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc33112e_ae50a5d8",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "Ideally the front-end just mirrors the GL state and does not have back-end details. Maybe a slight cleanup would be to just use the GLenum in the front-end and just use this guy in the back-end, moving him to renderer_utils.",
      "parentUuid": "622d9b4d_27f5d8d0",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7fdabb3_7fdd3092",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "so something like -\n\nenum class\n{\nDefault;\nGlNone \u003d Default;\nGLDecodeExt \u003d Default;\nGLSkipDecodeExt;\nGlSrgb;\n};\n\nWDYT?",
      "parentUuid": "bc33112e_ae50a5d8",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70e7d351_e2b8c198",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-15T10:01:38Z",
      "side": 1,
      "message": "@Jamie, I think you missed a reply here",
      "parentUuid": "c7fdabb3_7fdd3092",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e618cd2_69ff5d7a",
        "filename": "src/common/utilities.h",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-15T16:57:07Z",
      "side": 1,
      "message": "I think the front-end only has SRGB on/off. Not implicit states. Anyway this is a pretty minor point and it\u0027s not that important to have it one way or the other.",
      "parentUuid": "70e7d351_e2b8c198",
      "range": {
        "startLine": 231,
        "startChar": 1,
        "endLine": 232,
        "endChar": 13
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f6c45f_89ecc586",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "update SerializeShaderVariable",
      "range": {
        "startLine": 51,
        "startChar": 6,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3dcfc52_72f6ce2f",
        "filename": "src/compiler/translator/ShaderVars.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96f6c45f_89ecc586",
      "range": {
        "startLine": 51,
        "startChar": 6,
        "endLine": 51,
        "endChar": 23
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36297242_1ac72e17",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "nit: texelFetch[Offset]",
      "range": {
        "startLine": 38,
        "startChar": 43,
        "endLine": 38,
        "endChar": 61
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1437284_57fe6bc4",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36297242_1ac72e17",
      "range": {
        "startLine": 38,
        "startChar": 43,
        "endLine": 38,
        "endChar": 61
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ba21ca4_88c63336",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "what about indirect uses?\n\ne.g. var \u003d uniform + 1;\n\ntexelFetch(var)\n\nTrying to understand what changes if you use a uniform with fetch and why you need to care about this. It seems a bit risky to use this method.",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 30
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24ccdf20_e35235a4",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-27T19:00:02Z",
      "side": 1,
      "message": "from spec - \"The conversion of sRGB color space components to linear color space is\nalways applied if the TEXTURE_SRGB_DECODE_EXT parameter is DECODE_EXT.\nTable X.1 describes whether the conversion is skipped if the\nTEXTURE_SRGB_DECODE_EXT parameter is SKIP_DECODE_EXT, depending on\nthe function used for the access, whether the access occurs through a\nbindless sampler, and whether the texture is statically accessed\nelsewhere with a texelFetch function.\"\n\nThis exception applies specifically to \"static accesses\" with texelFetch. The interpretation of static access was so deqp is happy and is a stricter interpretation beneficial to us in terms of code complexity, so we ignore indirect access",
      "parentUuid": "6ba21ca4_88c63336",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 30
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3abb2173_3b9f1239",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "Can you document that somewhere? Might have missed it.",
      "parentUuid": "24ccdf20_e35235a4",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 30
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97206972_0d8a9a16",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3abb2173_3b9f1239",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 30
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeb32f7d_30b4e4bb",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3abb2173_3b9f1239",
      "range": {
        "startLine": 81,
        "startChar": 5,
        "endLine": 81,
        "endChar": 30
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac9808a3_d1a4751f",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "probably should mention static use in here",
      "range": {
        "startLine": 22,
        "startChar": 22,
        "endLine": 22,
        "endChar": 47
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf4f975_aa13c596",
        "filename": "src/compiler/translator/tree_ops/FlagSamplersWithTexelFetch.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac9808a3_d1a4751f",
      "range": {
        "startLine": 22,
        "startChar": 22,
        "endLine": 22,
        "endChar": 47
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24eb3c31_8a4fa861",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "What problem is this design solving? Maybe we could find an existing mechanism to fit it into.",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf3fa69_108cf4e3",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-27T19:00:02Z",
      "side": 1,
      "message": "EXT_texture_sRGB_decode allows for a sampler object to override the colorspace state.\nThis means that a texture which has never had any colorspace state modified (completely default), may still end up having an overridden colorspace if it\u0027s used with a sampler object with that state set.\n\nA default-state texture though will never have had the srgb imageviews set up, which means, if it\u0027s used with this sampler object, it needs to reallocate with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT.\n\nWe can\u0027t detect this at the time when the sampler is dirtied because the texture bound to that slot may change at any time before draw.\nThe thing that actually determines this state is the texture-sampler combination, and we won\u0027t know that for sure until draw time.",
      "parentUuid": "24eb3c31_8a4fa861",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5eee166_d2f3944d",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "I see. Try moving this logic into ContextVk::updateActiveTextures . We call updateActiveTextures whenever a sampler or texture changes and you can override the imageviews and even recreate the VkImage itself there. You will have to live with potentially creating the VkImage twice in some cases. I think your existing code path has that anyway so it\u0027s not a regression from your current CL.",
      "parentUuid": "1cf3fa69_108cf4e3",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a1ac9cd_8a52e612",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "dont think that is a good idea, because it could result in textures being reallocated with VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT more than necessary. we may have a situation where a texture is reallocated as mutable and then swapped out for a different texture before draw time, resulting in a texture being made mutable which did not have to be.\n\nVK_IMAGE_CREATE_MUTABLE_FORMAT_BIT comes with a substantial performance penalty for us, so we want to ensure that we don\u0027t use this except on the absolute minimal set of textures that we are required to.",
      "parentUuid": "a5eee166_d2f3944d",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f7381e5_8a70ce05",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-10T16:14:40Z",
      "side": 1,
      "message": "Sorry, just catching up. Mutable is for sRGB - how would the texture go from mutable to non-mutable if we were to initialize the texture in updateActiveTextures? There may be edge cases where we initialize twice due to setStorage calls that are somewhat unavoidable because you can change the sRGB state at runtime.",
      "parentUuid": "3a1ac9cd_8a52e612",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faae562e_492e587f",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-11T21:50:39Z",
      "side": 1,
      "message": "consider a situation where an entirely different texture is bound after the previous texture in that slot is reallocated as mutable.\n1. Texture A is bound to slot 1 \n2. Sampler is bound to slot 1 \n3. Sampler has sRGB_decode state set \n4. Some extra logic that doesn\u0027t include a draw \n5. Texture B is bound to slot 1 \n6. A draw is issued which uses texture slot 1\n\nIf we are too eager, we could accidentally reallocate texture A during step (4).\nWe would like to only have to reallocate texture B, and leave texture A alone.\n\nWe are OK with leaving textures that have been used once with sRGB_decode as mutable, but we want to avoid doing that reallocation on textures that are never used with sRGB_decode state.",
      "parentUuid": "1f7381e5_8a70ce05",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "120b09f8_97099984",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-15T16:56:00Z",
      "side": 1,
      "message": "Hey Mohan,\n\nCan you switch to using updateActiveTextures and come up with such an example? My thinking is that your double-create scenario can be fixed for the common cases pretty easily.\n\nAdding more dirty bits and custom handling increases technical debt and can also affect CPU overhead by adding multiple handle points for the same information.",
      "parentUuid": "faae562e_492e587f",
      "range": {
        "startLine": 3191,
        "startChar": 0,
        "endLine": 3216,
        "endChar": 1
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33fdbc4e_b68b38b9",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: maybe you could do something to try and help the formatter with these lines.",
      "range": {
        "startLine": 1371,
        "startChar": 23,
        "endLine": 1375,
        "endChar": 41
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a49fc52b_9312b2b2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33fdbc4e_b68b38b9",
      "range": {
        "startLine": 1371,
        "startChar": 23,
        "endLine": 1375,
        "endChar": 41
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aed51ed8_f75ad6dc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1125,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: seems like this isn\u0027t necessary to swap",
      "range": {
        "startLine": 1125,
        "startChar": 41,
        "endLine": 1125,
        "endChar": 71
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc31db4_9c96a4e0",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1125,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-27T19:00:02Z",
      "side": 1,
      "message": "This actually is necessary, due to an interaction with EGL_EXT_image_gl_colorspace\nWith this extension, it\u0027s possible to create an image where the angle frontend format is different from the backend VK format, which was causing failures.\nThis swap ensures that, when we create imageviews, we will create the correct imageviews for the backend VK format, even if the frontend format is different.",
      "parentUuid": "aed51ed8_f75ad6dc",
      "range": {
        "startLine": 1125,
        "startChar": 41,
        "endLine": 1125,
        "endChar": 71
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd014d3_9b208268",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1125,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "Can you point me to the code which changes the format? vk::Format is a back-end format, not a front-end format. So what you seem to be saying is that the back-end format changes twice.",
      "parentUuid": "7fc31db4_9c96a4e0",
      "range": {
        "startLine": 1125,
        "startChar": 41,
        "endLine": 1125,
        "endChar": 71
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5323c746_64fc231b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1125,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Image.cpp:423\n\nThe case that causes problems is if the application creates a GL texture with a linear colorspace, then does EGLCreateImage with a nonlinear colorspace override.\nThis mutates the frontend Texture\u0027s format to be nonlinear, but the backing TextureVk keeps its original format without being reallocated.\nThis happens in ImageTest.cpp:186 createEGLImage2DTextureSource\n\nWhen this changes introduces colorspace-specific imageviews, that caused this case to create imageviews for the frontend format (nonlinear), but later we would attempt (and fail) to retrieve imageviews for the backend format (linear).\n\nThis swap is necessary so that we generate the correct imageviews for the backend format.\n\n\u003e So what you seem to be saying is that the back-end format changes twice.\n\nNo, the problem is that the frontend format changes while the backend format stays the same. Either way though, we end up with a texture where the frontend and backend formats do not match.",
      "parentUuid": "ecd014d3_9b208268",
      "range": {
        "startLine": 1125,
        "startChar": 41,
        "endLine": 1125,
        "endChar": 71
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d031f77d_8500a5b9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2089,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "can you please document \"why\" you need the mutable bit?",
      "range": {
        "startLine": 2089,
        "startChar": 7,
        "endLine": 2089,
        "endChar": 41
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a55df1a_ae1b1fb7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2089,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "We need this bit in order to use imageviews with a format that is not the same as the actual internal format of the texture. This is how we emulate the functionality required by the extension.\n\nVulkan requires that we may only use imageviews that have a matching format as the image unless that bit is set.",
      "parentUuid": "d031f77d_8500a5b9",
      "range": {
        "startLine": 2089,
        "startChar": 7,
        "endLine": 2089,
        "endChar": 41
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5386101e_4db4004b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2235,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "nit: \u003d\u003d",
      "range": {
        "startLine": 2235,
        "startChar": 42,
        "endLine": 2235,
        "endChar": 45
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56f29c0b_fc95230b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2235,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5386101e_4db4004b",
      "range": {
        "startLine": 2235,
        "startChar": 42,
        "endLine": 2235,
        "endChar": 45
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "824e34a0_f9ecf15d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2329,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "Why do you need this wrapper function?",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969f9990_54b288bd",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2329,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "We could just call the Impl function instead of using this wrapper, but ended up just following convention/pattern of similar code that already existed.",
      "parentUuid": "824e34a0_f9ecf15d",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e4d96b4_7fdd73d1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2366,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "Similar to the above, why do we need 2 wrapper functions?   getFetchImageViewAndRecordUse() was only used in 1 place, so updating it with bool shouldn\u0027t be an issue.\n\nMy concern with these function names is that they are really long and wordy.   This one is 52 characters long (more than half of our 100 char limit), which is causing formatting issues.   The \"WithColorspaceOverride\" is already implied by the parameter named \"useLinearColorspace\".",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef164727_2c11a117",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2366,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Actually, this design was informed by older ANGLE code in which these functions were actually called with the default value.\nAt this point though, they are only used in one place where we set that parameter explicitly.\nGiven that, we can go ahead with a bool without a default case.",
      "parentUuid": "7e4d96b4_7fdd73d1",
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b08f5a4f_7dfd8877",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 2
      },
      "lineNbr": 241,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: return !vk::ConvertToLinear...\n\nAlso you should assert that mImage is valid.",
      "range": {
        "startLine": 232,
        "startChar": 0,
        "endLine": 241,
        "endChar": 9
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d74c77_dd3547f7",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.h",
        "patchSetId": 2
      },
      "lineNbr": 241,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b08f5a4f_7dfd8877",
      "range": {
        "startLine": 232,
        "startChar": 0,
        "endLine": 241,
        "endChar": 9
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "681d7857_bc930d4a",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 608,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "Can you just pass in std::vector to avoid this template syntax?   That also lets you use a range for loop in formatReinterpretationSupported().",
      "range": {
        "startLine": 608,
        "startChar": 54,
        "endLine": 608,
        "endChar": 89
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a2748a5_d556f518",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 608,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-01T16:13:33Z",
      "side": 1,
      "message": "Or send a pointer + size, if you don\u0027t want the constexpr array to turn into vector.",
      "parentUuid": "681d7857_bc930d4a",
      "range": {
        "startLine": 608,
        "startChar": 54,
        "endLine": 608,
        "endChar": 89
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4a95de4_dcd70f9d",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 608,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "This is the same style used for GetFormatSupport in Caps.cpp:200\nMaking it std::vector based means we can\u0027t constexpr the format lists.",
      "parentUuid": "681d7857_bc930d4a",
      "range": {
        "startLine": 608,
        "startChar": 54,
        "endLine": 608,
        "endChar": 89
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30b6f870_04189eee",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: Caps for static methods. Also you can put them in the namespace {} block instead of using static.",
      "range": {
        "startLine": 614,
        "startChar": 12,
        "endLine": 614,
        "endChar": 43
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6784ba6a_b5d94a41",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30b6f870_04189eee",
      "range": {
        "startLine": 614,
        "startChar": 12,
        "endLine": 614,
        "endChar": 43
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93f098e7_0add475a",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 620,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: doesn\u0027t need to be a member of Renderer ,can be a static method. Ideally private to this file.",
      "range": {
        "startLine": 620,
        "startChar": 17,
        "endLine": 620,
        "endChar": 44
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4a6e2c0_c45f3245",
        "filename": "src/libANGLE/renderer/vulkan/vk_caps_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 620,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93f098e7_0add475a",
      "range": {
        "startLine": 620,
        "startChar": 17,
        "endLine": 620,
        "endChar": 44
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b2bf19c_80db8d95",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "I don\u0027t quite follow this either. What cache are you populating?",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 265,
        "endChar": 0
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3207163d_e82714ec",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-27T19:00:02Z",
      "side": 1,
      "message": "RendererVk::getFormatFeatureBits will query the ICD and update mFormatProperties (the cache talked about in the comment), so querying for feature flags is non-const.\nBecause of this, when we\u0027re determining support for the extension, we\u0027re currently in a const function, and can\u0027t do this. We can only query format features from our cache, not from the ICD.\n\nSee vk_caps_utils.cpp formatReinterpretationSupported.\n\nWe need to perform this precaching step because formatReinterpretationSupported checks support for VK formats, not angle formats, meaning that we could check a format that was never initialized in our cache because angle may not have a corresponding frontend format.\n\nPreviously, we only initialized feature flags for formats which have an angle frontend format, ignoring all formats that we could not use directly.\nThis change forces us to additionally initialize formats which could be used as reinterpretation targets for other formats, so we know whether or not we can support exposing srgb_decode (and srgb_override).",
      "parentUuid": "1b2bf19c_80db8d95",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 265,
        "endChar": 0
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39a8a2c7_f0b68a3e",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-28T15:16:08Z",
      "side": 1,
      "message": "Just make the cache mutable. Does that solve the const problem?",
      "parentUuid": "3207163d_e82714ec",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 265,
        "endChar": 0
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9278a9a3_7bd5c093",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "We could make the cache mutable and flag getFormatFeatureBits as const. That would allow us to ignore initializing these formats upfront and just check format support the conventional way here.",
      "parentUuid": "39a8a2c7_f0b68a3e",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 265,
        "endChar": 0
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79617d49_80432d37",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-27T15:11:09Z",
      "side": 1,
      "message": "nit: \"ImageView\"",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c89c3ad0_36af23e2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79617d49_80432d37",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baeba2d8_bd604016",
        "filename": "src/tests/gl_tests/ProgramBinaryTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "Typo?",
      "range": {
        "startLine": 761,
        "startChar": 23,
        "endLine": 761,
        "endChar": 47
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e4ef191_0c71fb61",
        "filename": "src/tests/gl_tests/ProgramBinaryTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "Test skips seem to have disappeared during patch update, will re-add in next patch",
      "parentUuid": "baeba2d8_bd604016",
      "range": {
        "startLine": 761,
        "startChar": 23,
        "endLine": 761,
        "endChar": 47
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5168a23f_ec22e30d",
        "filename": "src/tests/gl_tests/ProgramBinaryTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 819,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T23:27:51Z",
      "side": 1,
      "message": "Shouldn\u0027t this be linearColor with GL_SKIP_DECODE_EXT?",
      "range": {
        "startLine": 819,
        "startChar": 34,
        "endLine": 819,
        "endChar": 43
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa5d6c16_2e05212e",
        "filename": "src/tests/gl_tests/ProgramBinaryTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 819,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-09-03T23:37:52Z",
      "side": 1,
      "message": "No, this test expects the result to be identical, regardless of whether GL_SKIP_DECODE_EXT is enabled.\nThis is because we are testing for the texelFetch exception - if the shader invokes texelFetch, we should always use a nonlinear colorspace, even if GL_SKIP_DECODE_EXT is set.",
      "parentUuid": "5168a23f_ec22e30d",
      "range": {
        "startLine": 819,
        "startChar": 34,
        "endLine": 819,
        "endChar": 43
      },
      "revId": "7a8e20cec2df22a3da3a788020f9d611a7a8e173",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}