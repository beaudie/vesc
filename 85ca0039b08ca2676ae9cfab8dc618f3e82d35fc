{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "373b4b99_b4075818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-18T17:43:25Z",
      "side": 1,
      "message": "Failure analysis:\n\nI reran failing test android-arm64-rel with print messages around the validation failure, specifically with vkCreateGraphicsPipelines() and bresenhanlines/provokingvertex\n\nAs seen here in ANGLE code, and printed out in log, the feature is enabled and the mode is set.\n\n    VkPipelineRasterizationLineStateCreateInfoEXT rasterLineState \u003d {};\n    rasterLineState.sType \u003d VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;\n    // Enable Bresenham line rasterization if available and the following conditions are met:\n    // 1.) not multisampling\n    // 2.) VUID-VkGraphicsPipelineCreateInfo-lineRasterizationMode-02766:\n    // The Vulkan spec states: If the lineRasterizationMode member of a\n    // VkPipelineRasterizationLineStateCreateInfoEXT structure included in the pNext chain of\n    // pRasterizationState is VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT or\n    // VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT and if rasterization is enabled, then the\n    // alphaToCoverageEnable, alphaToOneEnable, and sampleShadingEnable members of pMultisampleState\n    // must all be VK_FALSE.\n    std::cout \u003c\u003c \"contextVk-\u003egetFeatures().bresenhamLineRasterization.enabled \"\n              \u003c\u003c contextVk-\u003egetFeatures().bresenhamLineRasterization.enabled \u003c\u003c std::endl;\n    if (rasterAndMS.bits.rasterizationSamples \u003c\u003d 1 \u0026\u0026\n        !rasterAndMS.bits.rasterizationDiscardEnable \u0026\u0026 !rasterAndMS.bits.alphaToCoverageEnable \u0026\u0026\n        !rasterAndMS.bits.alphaToOneEnable \u0026\u0026 !rasterAndMS.bits.sampleShadingEnable \u0026\u0026\n        contextVk-\u003egetFeatures().bresenhamLineRasterization.enabled)\n    {\n        std::cout \u003c\u003c \"Link rasterLineState MODE_BRESENHAM\" \u003c\u003c std::endl;\n        rasterLineState.lineRasterizationMode \u003d VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT;\n        *pNextPtr                             \u003d \u0026rasterLineState;\n        pNextPtr                              \u003d \u0026rasterLineState.pNext;\n    }\n\nPrint log snippet:\ncontextVk-\u003egetFeatures().bresenhamLineRasterization.enabled 1\nLink rasterLineState MODE_BRESENHAM\ncontextVk-\u003egetFeatures().provokingVertex.enabled 1\nLink provokingVertextState  MODE_LAST_VERTEX\n../../src/tests/deqp_support/angle_deqp_gtest.cpp:51: Failure\nFailed\nRendererVk.cpp:362 (DebugUtilsMessenger): [ VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769 ] Validation Error: [ VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769 ] Object 0: handle \u003d 0xb4000071f1711f30, type \u003d VK_OBJECT_TYPE_DEVICE; | MessageID \u003d 0xbf433601 | vkCreateGraphicsPipelines(): pCreateInfos[0] lineRasterizationMode \u003d VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT requires the bresenhamLines feature. The Vulkan spec states: If lineRasterizationMode is VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT, then the bresenhamLines feature must be enabled (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769)\n\nvkCreateGraphicsPipelines Result: 0 // Note success, despite validation error\n\n\nThen here in the validation layer code, the logic is reversed, if mode is set, then it checks that the feature is present.\n\nif (line_state-\u003elineRasterizationMode \u003d\u003d VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT \u0026\u0026 (!line_features || !line_features-\u003ebresenhamLines)) {\n    skip |\u003d LogError(device, \"VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769\", \"vkCreateGraphicsPipelines(): pCreateInfos[%d] lineRasterizationMode \u003d \" \"VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT requires the bresenhamLines feature.\", i);\n}\n\nSince this prints the error message, then the mode is set, but either there is no line_features, or no line_features-\u003ebresenhamLines in validation layer for the error to log.\n\nI checked all the structures for vkCreateGraphicsPipelines(), none of then take a flag:PROTECTED_BIT, and none have queue or MemoryProperties, So doesn\u0027t seem to have a tie with protected state of anything.\n\nI\u0027m perplexed. Only thing I can conclude is validation layer has a different state. Why? and how is it related to protected content - if it is.\n\n\n",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4d124a_2543b00f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-18T18:43:08Z",
      "side": 1,
      "message": "Thanks for the investigation. It\u0027s surprising that this doesn\u0027t show anywhere else, but I believe there\u0027s something wrong with the way ANGLE chains these structs. See this:\n\n    VkPipelineRasterizationStateStreamCreateInfoEXT rasterStreamState \u003d {};\n    rasterStreamState.sType \u003d VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;\n    if (contextVk-\u003egetFeatures().supportsTransformFeedbackExtension.enabled)\n    {\n        rasterStreamState.rasterizationStream \u003d 0;\n        rasterState.pNext                     \u003d \u0026rasterLineState;\n    }\n\nFirst of all, obviously there\u0027s a bug in that pNext is set to rasterLineState instead of rasterStreamState. Also, all the other structs are changed with this pattern except this one:\n\n        *pNextPtr                      \u003d \u0026depthClipState;\n        pNextPtr                       \u003d \u0026depthClipState.pNext;\n\nI suspect the fact that `rasterState.pNext` is set to `rasterLineState` inside a conditional for transform feedback is screwing something up (although looking at it, it seems to me that if both bresenham and xfb are supported, pNext ends up correct). Could you please fix that and give it another try?\n\nIf that doesn\u0027t help, you could try logging the pNext chain of createInfo.pRasterizationState (i.e. after it\u0027s all set) (by printing the sTypes) and we can see if ANGLE is truly correct.\n\nAt that point, if we can prove that ANGLE is correct, we should file a bug with VVL.",
      "parentUuid": "373b4b99_b4075818",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f1ae676_08c308cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-18T20:10:04Z",
      "side": 1,
      "message": "Thank you. Change on the way",
      "parentUuid": "fc4d124a_2543b00f",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c478686_e6bc3f85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-18T20:10:04Z",
      "side": 1,
      "message": "Thanks for detail. Working",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1337c7bd_44874371",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-22T03:35:18Z",
      "side": 1,
      "message": "\u003e If that doesn\u0027t help, you could try logging the pNext chain of createInfo.pRasterizationState (i.e. after it\u0027s all set) (by printing the sTypes) and we can see if ANGLE is truly correct.\n\nIf you have this log, it would be useful!",
      "parentUuid": "9f1ae676_08c308cb",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3776da54_30796569",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-22T15:12:16Z",
      "side": 1,
      "message": "I logged pNext chain on previous run. I printed whether feature was enabled or not, and when linked, I printed the address of the structure. Then at the end I looped through the pNext chain and printed each address. See vk_cache_utils.cpp\n\nThere were 4 potential structures, 2 were enabled, bresenhamLineRasterization and provokingVertex.\n\nThe pNext link print out showed these just two addresses. I was looking for a non-null link termination or something odd linked in. I do not see it. See first 8 lines below. \n\nNote at end, vkCreateGraphicsPipelines() still returns success. So it seems driver is not seeing an issue. \n\nHowever, between patch 11 and 12 is when this issue manifested. Unfortunately its when I changed everything from \"isProtected\" to \"hasProtectedContent\" so a lot of places were touched. I identified about 20 lines across 7 files that had added code. I can revisit that.\n\n\nLog from version 23:\n contextVk-\u003egetFeatures().bresenhamLineRasterization.enabled 1\n Link rasterLineState MODE_BRESENHAM : 0x7c5dfd8d50\n contextVk-\u003egetFeatures().provokingVertex.enabled 1\n Link provokingVertextState  MODE_LAST_VERTEX : 0x7c5dfd8d38\n contextVk-\u003egetFeatures().depthClamping.enabled 0\n contextVk-\u003egetFeatures().supportsTransformFeedbackExtension.enabled 0\n Link: 0x7c5dfd8d50\n Link: 0x7c5dfd8d38\n Start multisampleState \n Start depthStencilState \n Start blendState \n Start dynamicState \n Start createInfo \n Calling initGraphics \n ../../src/tests/deqp_support/angle_deqp_gtest.cpp:51: Failure\n Failed\n RendererVk.cpp:362 (DebugUtilsMessenger): [ VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769 ] Validation Error: [ VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769 ] Object 0: handle \u003d 0xb400007cdc26b530, type \u003d VK_OBJECT_TYPE_DEVICE; | MessageID \u003d 0xbf433601 | vkCreateGraphicsPipelines(): pCreateInfos[0] lineRasterizationMode \u003d VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT requires the bresenhamLines feature. The Vulkan spec states: If lineRasterizationMode is VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT, then the bresenhamLines feature must be enabled (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkPipelineRasterizationLineStateCreateInfoEXT-lineRasterizationMode-02769)\n                             Object: 0xb400007cdc26b530 (type \u003d Device(3))\n \n ../../src/tests/deqp_support/angle_deqp_gtest.cpp:51: Failure\n Failed\n RendererVk.cpp:362 (DebugUtilsMessenger): [ VUID-VkPipelineRasterizationProvokingVertexStateCreateInfoEXT-provokingVertexMode-04883 ] Validation Error: [ VUID-VkPipelineRasterizationProvokingVertexStateCreateInfoEXT-provokingVertexMode-04883 ] Object 0: handle \u003d 0xb400007cdc26b530, type \u003d VK_OBJECT_TYPE_DEVICE; | MessageID \u003d 0x6af4fb0 | provokingVertexLast feature is not enabled. The Vulkan spec states: If provokingVertexMode is VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT, then the provokingVertexLast feature must be enabled (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkPipelineRasterizationProvokingVertexStateCreateInfoEXT-provokingVertexMode-04883)\n                             Object: 0xb400007cdc26b530 (type \u003d Device(3))\n \n vkCreateGraphicsPipelines Result: 0\n returned from initGraphics",
      "parentUuid": "1337c7bd_44874371",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19847018_461eb84d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-22T19:16:30Z",
      "side": 1,
      "message": "Really odd. The fact that it didn\u0027t trigger before makes me think that it must be some ANGLE bug, potentially a memory corruption.\n\n\u003e However, between patch 11 and 12 is when this issue manifested. Unfortunately its when I changed everything from \"isProtected\" to \"hasProtectedContent\" so a lot of places were touched. I identified about 20 lines across 7 files that had added code. I can revisit that.\n\nOne idea would be too create a separate CL (for experimenting) based on PS11, and see if the bot is still green. Maybe it\u0027s a bug in VVL that was introduced around the same time and it has nothing to do with the PS11 to PS12 transition. If the run is green on PS11 again, then there\u0027s definitely some bug in PS12!",
      "parentUuid": "3776da54_30796569",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "637f7d51_ff3d714f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-22T21:19:09Z",
      "side": 1,
      "message": "3 changes in patchset 12 -\n1. ContextVk.cpp getTimeStamp(), submitOneOff.  was using false, changed to hasProtectedContent. Even though the getTimeStamp doesn\u0027t need a protected submit, the context make be protected, and there may be other commands in batch? so protected submit matches context.\n2. SurfaceVk.cpp initImageHelper, change false to hasProtectedContent + flag. and createSwapchain, initMSAASwapchain also changing to use hasProtectedContent.\n3.TextureVk.cpp, TextureVk::initImage add flag and mState.hasProtectedContent to initialization.\n\nAll these seem valid. Does seem more like a coincidental change with other changes.\n\nI could pull patchset 11, and run it to see if it passes or fails this test set, and better determine if its the patch or the tests.",
      "parentUuid": "19847018_461eb84d",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0280a90e_9d6cc38e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-23T02:02:16Z",
      "side": 1,
      "message": "Patch set ready. But having issue uploading (internal security issues). ASAP.",
      "parentUuid": "637f7d51_ff3d714f",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e10b43d4_4f7d59ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-06-29T20:59:52Z",
      "side": 1,
      "message": "FYI - I took patch #11 (no validation error) and rebased to tip and re-ran the test. Got the same Validation error. So I am inclined to think that something else was introduced at the same time (after patch#11). Note that failures are ONLY with dEQP.KHR_GLES32/*\n\nI have a run being uploaded with protected bit off, should remove protected structs from pNext chains and no protected bits. If protected features are cause then we should not see error.",
      "parentUuid": "0280a90e_9d6cc38e",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ac5b5fa_99b7bd74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-07-07T17:21:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e10b43d4_4f7d59ed",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cedd0918_22adf064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-07-07T17:21:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c478686_e6bc3f85",
      "revId": "85ca0039b08ca2676ae9cfab8dc618f3e82d35fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}