{
  "comments": [
    {
      "key": {
        "uuid": "eced8d83_69e13a30",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 306,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "Reserve the sum of the two?",
      "range": {
        "startLine": 306,
        "startChar": 16,
        "endLine": 306,
        "endChar": 23
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09f0799d_bd90d6cb",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 306,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-15T17:14:19Z",
      "side": 1,
      "message": "The sum of two means both bufferInof and ImageInfos are been used fully at the same time, which usually not true. \nThese numbers are kind of arbitrary, maybe I should not using the sizeof, just the hard coded number. The sizeof() giving people false sense of this is specific to VkWriteDescriptorSet, but they are not. It just some heuristic based number. How about something like this:\n    mBufferInfos.reserve(8);\n    mImageInfos.reserve(8);\n    mWriteInfos.reserve(8);",
      "parentUuid": "eced8d83_69e13a30",
      "range": {
        "startLine": 306,
        "startChar": 16,
        "endLine": 306,
        "endChar": 23
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13b55083_f0f78dee",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 306,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09f0799d_bd90d6cb",
      "range": {
        "startLine": 306,
        "startChar": 16,
        "endLine": 306,
        "endChar": 23
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b8348eb_6d8650ec",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "Can use a templated helper to avoid the code duplication.\n\n(in case you didn\u0027t know: https://stackoverflow.com/q/6880832)",
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1bf89f1_b5fab903",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "I am not expert on the template and not a fan either. Not exactly sure how to deal with  the different variable type and name. IMO, use template for this makes code harder to read and debug. Saving a few lines of duplication does not really worth it. But if you can paste some sample code here, I will adopt.",
      "parentUuid": "5b8348eb_6d8650ec",
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "651fc593_a96fc055",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-17T02:42:05Z",
      "side": 1,
      "message": "Made an example for you. The key is the template parameters `typename T, T *C::*member` for the D::grow() function:\n\n    struct A\n    {\n        int a;\n    };\n    \n    struct B\n    {\n        float b[2];\n    };\n    \n    struct C\n    {\n        A *a;\n        B *b;\n    };\n    \n    class D\n    {\n        void growAs();\n        void growBs();\n    \n    private:\n        std::vector\u003cA\u003e as;\n        std::vector\u003cB\u003e bs;\n        std::vector\u003cC\u003e cs;\n    \n        template\u003ctypename T, T *C::*member\u003e\n        void grow(std::vector\u003cT\u003e *v);\n    };\n    \n    template\u003ctypename T, T *C::*member\u003e\n    void D::grow(std::vector\u003cT\u003e *v)\n    {\n        const T *oldStart \u003d v-\u003eempty() ? nullptr : v-\u003edata();\n        v-\u003ereserve(v-\u003ecapacity() + 1);\n    \n        if (oldStart)\n        {\n            for (C \u0026c : cs)\n            {\n                if (c.*member)\n                {\n                    size_t index \u003d c.*member - oldStart;\n                    c.*member \u003d v-\u003edata() + index;\n                }\n            }\n        }\n    }\n    \n    void D::growAs()\n    {\n        grow\u003cA, \u0026C::a\u003e(\u0026as);\n    }\n    \n    void D::growBs()\n    {\n        grow\u003cB, \u0026C::b\u003e(\u0026bs);\n    }",
      "parentUuid": "c1bf89f1_b5fab903",
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7231863_84df1884",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "Could just call `getBufferInfos(1)`, there shouldn\u0027t be any discernible performance difference.",
      "range": {
        "startLine": 43,
        "startChar": 28,
        "endLine": 43,
        "endChar": 41
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3f34a9_c06b29cf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7231863_84df1884",
      "range": {
        "startLine": 43,
        "startChar": 28,
        "endLine": 43,
        "endChar": 41
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e13ce226_b9efbde1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "Add an inline helper to avoid duplication",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b84079f1_c8dff419",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "Sorry that I am not expert on template. Not exact sure how to do that with template.",
      "parentUuid": "e13ce226_b9efbde1",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 51,
        "endChar": 9
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cee4b5c_975f46ee",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "nit: I\u0027d call these newBufferInfo[s]() and newImageInfo(). From the caller side, `get` sounds like it\u0027s modifying something that\u0027s already there.",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 39
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "288a9682_48f7a41e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-15T17:14:19Z",
      "side": 1,
      "message": "Good point! Will fix in next update.",
      "parentUuid": "7cee4b5c_975f46ee",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 39
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92bd89e9_3c687275",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "I changed to allocNewImageInfo which seems more consistent with the rest of alloc functions that allocate object out of a pool..",
      "parentUuid": "288a9682_48f7a41e",
      "range": {
        "startLine": 70,
        "startChar": 27,
        "endLine": 70,
        "endChar": 39
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e66542c5_2f68081d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 602,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-14T09:37:24Z",
      "side": 1,
      "message": "nit/personal preference/no big deal: VkWriteDescriptorSet is not a WriteInfo, so better naming IMO is:\n\n- DescriptorSetWriteInfo -\u003e DescriptorSetUpdates\n- DescriptorSetWriteInfo::mWriteInfos -\u003e DescriptorSetWriteInfo::mUpdates\n- DescriptorSetWriteInfo::getWriteInfo -\u003e DescriptorSetWriteInfo::getUpdate (combined with the other comment, DescriptorSetWriteInfo::newUpdate)\n- mDescriptorSetWriteInfo -\u003e mDescriptorSetUpdates\n- getDescriptorSetsWriteInfo -\u003e getDescriptorSetUpdates\n- flushWritesToDevice -\u003e just flush or flushUpdates",
      "range": {
        "startLine": 602,
        "startChar": 15,
        "endLine": 602,
        "endChar": 38
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "160e8cc4_19a08915",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 602,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-15T17:14:19Z",
      "side": 1,
      "message": "I mostly just keeping the existing name. If anyone has other ideas/opinions on the name, please voice up.\n\nGiven vkUpdateDescriptorSets has two parts: VkWriteDescriptorSet and VkCopyDescriptorSet, and we are only using the write, so has \"Write\" in the name seems appropriate to me, IMO.",
      "parentUuid": "e66542c5_2f68081d",
      "range": {
        "startLine": 602,
        "startChar": 15,
        "endLine": 602,
        "endChar": 38
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3a7aa14_dbd79153",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 3
      },
      "lineNbr": 602,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-06-16T23:55:44Z",
      "side": 1,
      "message": "I changed the whole class object into what you suggested, but kept the class variable the same to reflect the fact that these are writes, and leave space for future to add mCopyInfos if needed.",
      "parentUuid": "160e8cc4_19a08915",
      "range": {
        "startLine": 602,
        "startChar": 15,
        "endLine": 602,
        "endChar": 38
      },
      "revId": "01bc35064df5948fb10332429713add44e3a8b12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}