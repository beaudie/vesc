{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7ada32e3_98eff3df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-22T15:46:31Z",
      "side": 1,
      "message": "Ready to land, or need the memory range changes?",
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83d43f9f_b9c2e79a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-22T17:21:32Z",
      "side": 1,
      "message": "Resolve comment",
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cac6e36_b74c5409",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:33:10Z",
      "side": 1,
      "message": "A little feedback before I tackle the rest.",
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b91772b5_88f6a826",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:56:42Z",
      "side": 1,
      "message": "Not sure on better way to compute row_pitch",
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fce533e_7c17c76a",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "sorry if you\u0027ve gone over this before, but can this be ANGLE_TRY_TEMPLATE(EXPR, return) ?",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40abbfe7_c345e191",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:33:10Z",
      "side": 1,
      "message": "That name is used in the macro above which returns the same result from EXPR, My new macro will check for error and return the error provided. So this is used where the return from the function in the TRY is not the same return of function encapsulating this call. I ran into several places where Angle error to EGL error is needed.\n\nWhat about ANGLE_TRY_TEMPLATE_WITH_RETURN or similar.",
      "parentUuid": "2fce533e_7c17c76a",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "109842bf_a6dbfb8b",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T18:57:37Z",
      "side": 1,
      "message": "I see.. instead please just use an Impl function to return vk::Result, set the error in the display, and then call ToEGL. Is there some reason using this pattern is difficult?",
      "parentUuid": "40abbfe7_c345e191",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95beaadf_0cd2d24c",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T19:45:32Z",
      "side": 1,
      "message": "Sorry, \"angle::Result\" . there\u0027s no such thing as vk::Result.",
      "parentUuid": "109842bf_a6dbfb8b",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84c05112_1205d67c",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95beaadf_0cd2d24c",
      "range": {
        "startLine": 132,
        "startChar": 0,
        "endLine": 141,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42ec022d_022f2139",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "usually we like to convert from a Vk to GL format because this can be a lossy conversion. is there a way you can compute the row pitch of the vk format? or otherwise pass the GL format information along without casting from Vk? also when do you expect this row pitch computation to fail?",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10a3fc90_c76f3476",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:56:42Z",
      "side": 1,
      "message": "Don\u0027t expect error, maybe if invalid format.\nWith the BufferHelper, there I noticed that there is no GPU alignment/padding - so the buffer row pitch is pixel_size * width. I was using anything that would give the right result. InternalFormat has this utility function ComputeRowPitch, so I went with that.",
      "parentUuid": "42ec022d_022f2139",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f64b3d21_62e98036",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Haven\u0027t found alternative.",
      "parentUuid": "10a3fc90_c76f3476",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d54e84e5_54bbeb46",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-09T13:26:12Z",
      "side": 1,
      "message": "Just use image-\u003egetActualFormat().pixelBytes * width rather than using computeRowPitch. You won\u0027t potentially generate an error and the likelihood of having an integer overflow seems small.",
      "parentUuid": "f64b3d21_62e98036",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57332514_e2027994",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T16:04:45Z",
      "side": 1,
      "message": "Note I\u0027m still passing internalFormat to \nlockBufferHelper.fillWithColor(color, internalFormat);\na few lines below.\nNot clear the difference or preference between:\nconst gl::InternalFormat \u0026internalFormat  // do you want to do away with this? keep OK?\nand\nimage-\u003egetActualFormat().glInternalFormat",
      "parentUuid": "d54e84e5_54bbeb46",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "125791c2_f4a9df90",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 260,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-01-11T18:38:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57332514_e2027994",
      "range": {
        "startLine": 260,
        "startChar": 64,
        "endLine": 260,
        "endChar": 80
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1e03d5b_8a78140b",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 336,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "is this something we can detect in the validation layer?",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 336,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d4b5630_641cfb30",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 336,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:33:10Z",
      "side": 1,
      "message": "mLockBufferHelper is a member of WindowSurfaceVk, not exposed higher. I only return the buffer pointer to the higher levels.\nThis error should never happen, I can\u0027t think of a scenario, there are many checks before this, so its just a sanity check.",
      "parentUuid": "f1e03d5b_8a78140b",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 336,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ea49a90_bd2d85f2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 336,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T18:57:37Z",
      "side": 1,
      "message": "Please change it to an ASSERT. We don\u0027t want to spend runtime validation cycles for implementation errors. Same for other points in the code if you\u0027re checking for internal errors, unless they\u0027re coming from the Vulkan driver or other external sources.",
      "parentUuid": "6d4b5630_641cfb30",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 336,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1f6ba25_1b89a3ce",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 336,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ea49a90_bd2d85f2",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 336,
        "endChar": 0
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "632cc4fa_e8b142fe",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "you\u0027re discarding the VkResult here - please ensure you handle it. ideally you could call something in Renderer instead of calling vkDeviceWaitIdle. we try to not call vk functions directly in the back-end.",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "173e2ae4_2d1a7cf1",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:33:10Z",
      "side": 1,
      "message": "I\u0027ll look. I don\u0027t think I saw any RendererVk function. It started out as a debug tool. But I found that without it sometimes the copy above it was not finished and pixels were not updated by the time the test check it. I don\u0027t like the wait, but didn\u0027t see an alternative.",
      "parentUuid": "632cc4fa_e8b142fe",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d85fe739_bc9d213e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Quick search, vkDeviceWaitIdle is nowhere else in the ANGLE code. No wrapper, and nothing is RendererVk. Note we don\u0027t have context here, no current command.\nWe can add a VkFence in copyBufferToSurfaceImage, and but then there will be a vkWaitForFences instead.",
      "parentUuid": "173e2ae4_2d1a7cf1",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cab1c26d_18c5edf9",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-09T13:26:12Z",
      "side": 1,
      "message": "RendererVk::finish ?",
      "parentUuid": "d85fe739_bc9d213e",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3655d24c_531b4fad",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T16:04:45Z",
      "side": 1,
      "message": "I think I tried this first and it didn\u0027t do anything. There is no active command/renderpass. We are context uncurrent.\nI think I did a readpixels or something after and observed that copyBufferToSurfaceImage was incomplete, and that is why I added WaitIdle - until I could find something better.\n\nProbably have to put a VkFence in copyBufferToSurfaceImage and wait on fence.?",
      "parentUuid": "cab1c26d_18c5edf9",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "364aa8de_3d415c28",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-10T04:22:13Z",
      "side": 1,
      "message": "The one-off submission already inserts a fence, to which a serial is assigned. RendererVk::finish() simply waits for the last serial (i.e. fence), which is why it doesn\u0027t look like `vkDeviceWaitIdle`.\n\nYou can debug this by adding some logs: log the serial that the one-off submission is generating, and log the serial that `RendererVk::finish` is trying to wait on (by replacing vkDeviceWaitIdle here with that). If `finish` is waiting for a serial smaller than the one-off submission, that\u0027s a problem we\u0027d need to fix separately.",
      "parentUuid": "3655d24c_531b4fad",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cfb8d20_0cb1bffe",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-01-11T18:38:56Z",
      "side": 1,
      "message": "So I replaced vkDeviceWaitIdle with\n ANGLE_TRY(displayVk-\u003egetRenderer()-\u003efinish(displayVk, false));\n\nfinishToSerial exists most the time from no \"inFlightCommands\".\nThen the test completes and destroys Surface and Buffer causing a VU error of deleting buffer while in use.\n\nI haven\u0027t found an alternative. I am out of bandwidth for this so any help would be appreciated in landing this/complete.",
      "parentUuid": "364aa8de_3d415c28",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cca7a2d_8af7bcb6",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 348,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-01-19T22:58:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cfb8d20_0cb1bffe",
      "range": {
        "startLine": 348,
        "startChar": 8,
        "endLine": 348,
        "endChar": 24
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4122eaf1_3370942d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3868,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "please use c++ style casts. also please pull the getMappedMemory call out of the switch since it is repeated.",
      "range": {
        "startLine": 3868,
        "startChar": 34,
        "endLine": 3868,
        "endChar": 42
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6901e1d1_d136019c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3868,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "static_casts can be disagreeable. Have fool them sometimes.",
      "parentUuid": "4122eaf1_3370942d",
      "range": {
        "startLine": 3868,
        "startChar": 34,
        "endLine": 3868,
        "endChar": 42
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33372eae_6939c060",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3896,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "please add an UNREACHABLE(); break; here.",
      "range": {
        "startLine": 3896,
        "startChar": 8,
        "endLine": 3896,
        "endChar": 15
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b99c5a67_3caa18ca",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3896,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33372eae_6939c060",
      "range": {
        "startLine": 3896,
        "startChar": 8,
        "endLine": 3896,
        "endChar": 15
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f6efd4_9fb8c5f4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 6827,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "AndReturnColor?",
      "range": {
        "startLine": 6827,
        "startChar": 18,
        "endLine": 6827,
        "endChar": 42
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3789cd0_d38db5a4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 6827,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-11-23T18:33:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3f6efd4_9fb8c5f4",
      "range": {
        "startLine": 6827,
        "startChar": 18,
        "endLine": 6827,
        "endChar": 42
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "592185bb_aa428389",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 82,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "please use c++-style casts",
      "range": {
        "startLine": 82,
        "startChar": 31,
        "endLine": 82,
        "endChar": 39
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4a5822f_c4dc14c1",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 82,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "592185bb_aa428389",
      "range": {
        "startLine": 82,
        "startChar": 31,
        "endLine": 82,
        "endChar": 39
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0473528_ed722994",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 93,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "\"expected\". is it possible you could make two arrays and compare the arrays instead of using for loops?",
      "range": {
        "startLine": 93,
        "startChar": 34,
        "endLine": 93,
        "endChar": 41
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2dec1d8c_92581ad9",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 93,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0473528_ed722994",
      "range": {
        "startLine": 93,
        "startChar": 34,
        "endLine": 93,
        "endChar": 41
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa0dafbc_8e465499",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 104,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "nit: please use std::array or std::vector",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 16
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7977bfba_bed9b83f",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 104,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa0dafbc_8e465499",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 16
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8df4ebb_d4c39b7f",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 127,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "nit: use an RAII type and pass it in here",
      "range": {
        "startLine": 127,
        "startChar": 23,
        "endLine": 127,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a50b2a3_00a8daec",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 127,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8df4ebb_d4c39b7f",
      "range": {
        "startLine": 127,
        "startChar": 23,
        "endLine": 127,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca4cfba_ee80eaf1",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "nit: EXPECT_NE(texture, 0)... but if you use the RAII type you don\u0027t need to bother with that.",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 141,
        "endChar": 28
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f4bab54_a0cd2443",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 141,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ca4cfba_ee80eaf1",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 141,
        "endChar": 28
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89b9203b_c1715ca6",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 151,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "c++-style cast, std::array or std::vector",
      "range": {
        "startLine": 151,
        "startChar": 26,
        "endLine": 151,
        "endChar": 32
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dcbd0efa_9cf9a8e4",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 151,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89b9203b_c1715ca6",
      "range": {
        "startLine": 151,
        "startChar": 26,
        "endLine": 151,
        "endChar": 32
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9118a64_97edba34",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 155,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "cast",
      "range": {
        "startLine": 155,
        "startChar": 25,
        "endLine": 155,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b64ce8b2_7a9bb205",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 155,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9118a64_97edba34",
      "range": {
        "startLine": 155,
        "startChar": 25,
        "endLine": 155,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab8ca826_161b0782",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 160,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 160,
        "startChar": 23,
        "endLine": 160,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4db37a9c_855597ee",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 160,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-01-19T22:58:28Z",
      "side": 1,
      "message": "Context to comment lost.",
      "parentUuid": "ab8ca826_161b0782",
      "range": {
        "startLine": 160,
        "startChar": 23,
        "endLine": 160,
        "endChar": 29
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af080b11_fbd63a0f",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 184,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "use ANGLE_GL_PROGRAM",
      "range": {
        "startLine": 184,
        "startChar": 8,
        "endLine": 184,
        "endChar": 14
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2d60d49_ae8e8c0d",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 184,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af080b11_fbd63a0f",
      "range": {
        "startLine": 184,
        "startChar": 8,
        "endLine": 184,
        "endChar": 14
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efb44394_c485c4b6",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 200,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "nit: can be constexpr",
      "range": {
        "startLine": 200,
        "startChar": 11,
        "endLine": 200,
        "endChar": 16
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52cf82db_46e39cf2",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 200,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efb44394_c485c4b6",
      "range": {
        "startLine": 200,
        "startChar": 11,
        "endLine": 200,
        "endChar": 16
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef0448e_5aed334b",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 207,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "instead of keeping this as a bool, use a helper func to match most (if not all) other tests",
      "range": {
        "startLine": 207,
        "startChar": 24,
        "endLine": 207,
        "endChar": 43
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "996af22e_16678b44",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 207,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fef0448e_5aed334b",
      "range": {
        "startLine": 207,
        "startChar": 24,
        "endLine": 207,
        "endChar": 43
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8447b454_66bc8e86",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 444,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:05:09Z",
      "side": 1,
      "message": "I believe these should all be EXPECT_EGL_TRUE",
      "range": {
        "startLine": 444,
        "startChar": 4,
        "endLine": 444,
        "endChar": 15
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd746856_a9f4d489",
        "filename": "src/tests/egl_tests/EGLLockSurface3Test.cpp",
        "patchSetId": 13
      },
      "lineNbr": 444,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-12-09T02:02:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8447b454_66bc8e86",
      "range": {
        "startLine": 444,
        "startChar": 4,
        "endLine": 444,
        "endChar": 15
      },
      "revId": "aef20218aea74f76979fb04164d8fc516eb7bd3c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}