{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ef37eca7_3028c91b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-11-04T17:15:38Z",
      "side": 1,
      "message": "I would like it better if there was a real \"this is a replay\" flag, so that one could drop the capture limits eventually without breaking this. ",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22dfb133_cb1bc002",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-04T17:17:24Z",
      "side": 1,
      "message": "Maybe we can find another solution. We shouldn\u0027t give ANGLE too many particular if statements for capture.",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94425dbc_d9a75d32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-11-04T22:03:15Z",
      "side": 1,
      "message": "Is there any way when comparing states to say \"I know this is going to be different, just ignore this portion\"?  We could link to where the states diverge in ANGLE.",
      "parentUuid": "22dfb133_cb1bc002",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e163dbd_e155d239",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-11-05T11:25:56Z",
      "side": 1,
      "message": "@jamie \nMaybe the comment I added when opening the review git lost ... I\u0027m not very happy about this solution either, especially because we use a flag that is kind of not really needed for capture/replay, we just happen to enable it to ensure that the traces are not dependent on the back-end, and for replay we enable it to make the tests pass. The moment we\u0027d run the capture/replay tests without this flag enabled, this test would fail again.\nI think a better solution would either be to test whether this is a MEC, and only then keep the state (in this case we don\u0027t test whether capture works as expected for MEC), or we add a flag somewhere that says that shaders should not be detached here, and set this flag when capturing or replaying.    \n\n@cody\nConsidering that we don\u0027t use the context serializations (yet) we could just not record a state that is known to be different. Currently. the problem with tagging  is that we compare the strings of the context serializations, and handling them when comparing, is not simple - no more plain strcmp, and no simple diff in capture/replay script.",
      "parentUuid": "94425dbc_d9a75d32",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a73bcd5e_d729c46c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T14:46:51Z",
      "side": 1,
      "message": "We should probably detach shaders when capturing, and just solve the problem that comes up from that differently. I wasn\u0027t away we were not detaching shaders when capturing.\n\nBTW, your comment wasn\u0027t lost, I did see it after I replied. (just FYI)",
      "parentUuid": "3e163dbd_e155d239",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7283713_aac856f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T14:47:16Z",
      "side": 1,
      "message": "I wasn\u0027t aware we were not..***",
      "parentUuid": "a73bcd5e_d729c46c",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d76d43c_641654f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-11-23T17:00:02Z",
      "side": 1,
      "message": "I\u0027ve tried to change the code to only not detach the shaders when we actually do MEC (i.e. the start frame is \u003e 1), but it turns out that with that in Context::createShaderProgramv the shaders are then detached right after linking when running the Capture/Replay test, and then, in FrameCapture:cpp:5148 (case EntryPoint::GLCreateShaderProgramv) we hit the assertion, because we no longer can retrieve the shader attached to the program. In other words, when capturing we always have to keep the shaders attached, not only with MEC, and given that, we also have to keep the shaders attached when replaying. \n\nWith that in mind it seems to me that the we either have to change the capturing to not retrieve the shader source from the attached shader, but from call CreateShaderProgramv itself, or keep all the shader attached in all cases.",
      "parentUuid": "e7283713_aac856f4",
      "revId": "28644fef3ce4af92b9354b370c024037dc46a0f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}