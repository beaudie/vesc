{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9d7e5c9b_89accd32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-23T20:20:32Z",
      "side": 1,
      "message": "PTAL",
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5634afb_2744c770",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T18:57:34Z",
      "side": 1,
      "message": "I am thinking maybe you can relax this to hasAnyExternalAttachments(). Then you dont need to write complicated detection hasMultiContextUsage logic. If someone is rendering to external image, and they issued glFlush, we can assume their intention is to synchronize between different contexts. I think that is a reasonable assumption. Right now we use hasAnyExternalAttachments to not defer clear, flush should be similar here.",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c9f5535_f8398df0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:06:31Z",
      "side": 1,
      "message": "\u003e can relax this to hasAnyExternalAttachments()\n\nthe test added in this change shows that confining it to external attachments will be too narrow. We need to avoid deferring a flush irrespective of whether the attachment is external or not. Also, caching the state wont work since flush can be called when neither context nor framebuffer is dirty",
      "parentUuid": "f5634afb_2744c770",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd58b02e_5a19c424",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T19:16:27Z",
      "side": 1,
      "message": "If hasAnyExternalAttachments is too narrow, maybe you can add hasAnyEGLImageAttachments() that does similar check. I dont know if there is an existing way to tell if it is used by shared context or not. But relaxing that doesn\u0027t seem too bad to me.",
      "parentUuid": "4c9f5535_f8398df0",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4e1767c_9784e4b2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:19:10Z",
      "side": 1,
      "message": "\u003e hasAnyEGLImageAttachments\n\nthat would still confine it to EGL images. If you look at the test i added we need a way to detect just regular textures as well\n\n\u003e  I dont know if there is an existing way to tell if it is used by shared context or not\n\nthis is effectively what my change is trying to detect (ignoring the serial index issue for now)",
      "parentUuid": "fd58b02e_5a19c424",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "773e4891_c415c93e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T20:27:32Z",
      "side": 1,
      "message": "The test you added here is only testing EGLImage here (targetTexture is EGLImage). A test for regular texture will be useful to demonstrate regular texture also have similar bug.\n\nFrom reading the code, I can believe that regular texture also has a bug here. If confirmed, then I dont think check if texture is used by multiple context is good enough. Think about this case:\nproducer context:\n   render to FBO\n   flush\nconsumer context:   \n   use texture\n   \nNow when glFlush is called, texture is only used by producer context. To fix this, we basically can\u0027t defer flush if context is shared. I somehow feel that we aren\u0027t that broken.",
      "parentUuid": "b4e1767c_9784e4b2",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6b91e0f_fe48e29a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T20:39:22Z",
      "side": 1,
      "message": "\u003e The test you added here is only testing EGLImage here (targetTexture is EGLImage). A test for regular texture will be useful to demonstrate regular texture also have similar bug\n\nmy test does both, take a look at line 1703 where the shared texture is bound and the draw in line 1706 will sample from that texture (no EGL image involved) if you replicate that for the next draw in the consumer thread you will bump into the same issue. (note that i used EGL image in the 2nd draw to demonstrate that this bug can be exposed even without shared contexts)\n\n\u003e dont think check if texture is used by multiple context is good enough\n\nwhen producer renders to FBO for the first time the attachment is not a shared resource thus outside the scope of the current fix. Along similar lines my change also doesn\u0027t handle shared depth / stencil textures. I am just tackling the more common usecase first.\n\n\u003e I somehow feel that we aren\u0027t that broken\n\nunfortunately we are indeed that broken, at least when it comes to deferring flushes",
      "parentUuid": "773e4891_c415c93e",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37435326_62a5ef56",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-10-25T02:34:20Z",
      "side": 1,
      "message": "\u003e unfortunately we are indeed that broken, at least when it comes to deferring flushes\n\nThe scenario described above by Charlie is not valid, and neither is the test in this CL. You can\u0027t use `glFlush` to synchronize between contexts. The test needs to do:\n\n- Context 1: draw, flush (or not), sync\n- Context 2: wait for sync, sample\n\nI believe you\u0027d find the test passes just fine if you add the appropriate synchronization.",
      "parentUuid": "a6b91e0f_fe48e29a",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "132cf555_9cd94bca",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T18:57:34Z",
      "side": 1,
      "message": "BTW, this is not the right way to tell if resource is used by multiple contexts. You could have a situation that a texture is used by single context, but that single context becomes unCurrent and then becomes current again and gets different QueueSerialIndex. Now your check will think it is used hy multiple context, even though it is only used by single context but current/uncurrent a few times.",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcbd1ac1_c7648d84",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:06:31Z",
      "side": 1,
      "message": "\u003e but that single context becomes unCurrent and then becomes current again and gets different QueueSerialIndex\n\nyup, i missed that. other than having a set tracking contexts that have used a resource could you provide a way to perform such a check? I believe we need to have a documented way to answer the simple question of whether an underlying image is used by multiple contexts",
      "parentUuid": "132cf555_9cd94bca",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86c8f418_1f21d892",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1589,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T20:47:50Z",
      "side": 1,
      "message": "This will call glGenTexture. But this is before producer and consumer context are created. I think you need to use GLuint and explicitly call glGenTextures in producer context.",
      "range": {
        "startLine": 1589,
        "startChar": 0,
        "endLine": 1589,
        "endChar": 41
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7de6761_b184acc7",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1589,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T20:51:18Z",
      "side": 1,
      "message": "could you elaborate on why this matters?",
      "parentUuid": "86c8f418_1f21d892",
      "range": {
        "startLine": 1589,
        "startChar": 0,
        "endLine": 1589,
        "endChar": 41
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e49faca_48789bde",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1589,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T21:01:34Z",
      "side": 1,
      "message": "(if I read code correctly) There are three contexts involved here: \na default context that created by test setup, \na producer context and \na consumer context. \n\nProducer and consumer contexts belong to the same share group. Default context is in another shared group. Default context is not in the same share group as the producer/consumer contexts. This textureFromProducerContext is created in default context, how can you use it in other contexts that are not belong to the same share group? Texture name space are per share group.",
      "parentUuid": "c7de6761_b184acc7",
      "range": {
        "startLine": 1589,
        "startChar": 0,
        "endLine": 1589,
        "endChar": 41
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e7d6e4c_f8f8a55a",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1589,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T21:06:19Z",
      "side": 1,
      "message": "\u003e This textureFromProducerContext is created in default context, how can you use it in other contexts that are not belong to the same share group?\n\ninteresting, then why is it working without generating an error? i can change this to a GLuint for sure but just curious why it works as-is (another bug?)",
      "parentUuid": "4e49faca_48789bde",
      "range": {
        "startLine": 1589,
        "startChar": 0,
        "endLine": 1589,
        "endChar": 41
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "229b5652_223d91df",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1634,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T20:47:50Z",
      "side": 1,
      "message": "This should be blueProgram instead of redProgram.",
      "range": {
        "startLine": 1634,
        "startChar": 25,
        "endLine": 1634,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c734771d_72504b6d",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1634,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T20:51:18Z",
      "side": 1,
      "message": "yeah, need to update name",
      "parentUuid": "229b5652_223d91df",
      "range": {
        "startLine": 1634,
        "startChar": 25,
        "endLine": 1634,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6f35cf2_66f7d999",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1634,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T22:51:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c734771d_72504b6d",
      "range": {
        "startLine": 1634,
        "startChar": 25,
        "endLine": 1634,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17bb7f8a_06424361",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T20:47:50Z",
      "side": 1,
      "message": "This will flush out draw call. If you want to demonstrate the bug with regular texture, you need to remove this.\n\nI suggest you separate out regular texture and EGLImage texture into two tests.",
      "range": {
        "startLine": 1639,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 51
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04822517_b028a450",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T20:51:18Z",
      "side": 1,
      "message": "\u003e This will flush out draw call\n\nwas intentional since i wanted the 1st draw to be flushed and submitted. i can replace that with a glFinish if you want",
      "parentUuid": "17bb7f8a_06424361",
      "range": {
        "startLine": 1639,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 51
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea39807c_f95b1c3e",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T21:01:34Z",
      "side": 1,
      "message": "Then you defeat your testing purpose. You want to have the draw call not glFlushed but not actually flushed (i.e., deferred) in the producer context while consumer context try to use it. This glReadPixels call (or glFinish) will force the draw call flushed out, thus defeat the purpose of your test. That is why I suggest you separate out regular texture testing into its own test to demonstrate the bug with regular texture. Right now I can only see you demonstrate the bug with EGLImage (i.e, targetTexture)",
      "parentUuid": "04822517_b028a450",
      "range": {
        "startLine": 1639,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 51
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38dd938e_f27b1edb",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T21:06:19Z",
      "side": 1,
      "message": "\u003e I suggest you separate out regular texture testing into its own test to demonstrate the bug with regular texture\n\nfair enough, i can just copy paste this test but replace the 2nd draw that samples from EGL image with a draw that samples from textureFromProducerContext directly",
      "parentUuid": "ea39807c_f95b1c3e",
      "range": {
        "startLine": 1639,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 51
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f4ce8b4_2410431b",
        "filename": "src/tests/egl_tests/EGLContextSharingTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T22:51:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38dd938e_f27b1edb",
      "range": {
        "startLine": 1639,
        "startChar": 0,
        "endLine": 1639,
        "endChar": 51
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}