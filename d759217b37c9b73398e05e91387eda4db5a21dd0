{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9d7e5c9b_89accd32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-23T20:20:32Z",
      "side": 1,
      "message": "PTAL",
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5634afb_2744c770",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T18:57:34Z",
      "side": 1,
      "message": "I am thinking maybe you can relax this to hasAnyExternalAttachments(). Then you dont need to write complicated detection hasMultiContextUsage logic. If someone is rendering to external image, and they issued glFlush, we can assume their intention is to synchronize between different contexts. I think that is a reasonable assumption. Right now we use hasAnyExternalAttachments to not defer clear, flush should be similar here.",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c9f5535_f8398df0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:06:31Z",
      "side": 1,
      "message": "\u003e can relax this to hasAnyExternalAttachments()\n\nthe test added in this change shows that confining it to external attachments will be too narrow. We need to avoid deferring a flush irrespective of whether the attachment is external or not. Also, caching the state wont work since flush can be called when neither context nor framebuffer is dirty",
      "parentUuid": "f5634afb_2744c770",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd58b02e_5a19c424",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T19:16:27Z",
      "side": 1,
      "message": "If hasAnyExternalAttachments is too narrow, maybe you can add hasAnyEGLImageAttachments() that does similar check. I dont know if there is an existing way to tell if it is used by shared context or not. But relaxing that doesn\u0027t seem too bad to me.",
      "parentUuid": "4c9f5535_f8398df0",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4e1767c_9784e4b2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:19:10Z",
      "side": 1,
      "message": "\u003e hasAnyEGLImageAttachments\n\nthat would still confine it to EGL images. If you look at the test i added we need a way to detect just regular textures as well\n\n\u003e  I dont know if there is an existing way to tell if it is used by shared context or not\n\nthis is effectively what my change is trying to detect (ignoring the serial index issue for now)",
      "parentUuid": "fd58b02e_5a19c424",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "773e4891_c415c93e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1487,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T20:27:32Z",
      "side": 1,
      "message": "The test you added here is only testing EGLImage here (targetTexture is EGLImage). A test for regular texture will be useful to demonstrate regular texture also have similar bug.\n\nFrom reading the code, I can believe that regular texture also has a bug here. If confirmed, then I dont think check if texture is used by multiple context is good enough. Think about this case:\nproducer context:\n   render to FBO\n   flush\nconsumer context:   \n   use texture\n   \nNow when glFlush is called, texture is only used by producer context. To fix this, we basically can\u0027t defer flush if context is shared. I somehow feel that we aren\u0027t that broken.",
      "parentUuid": "b4e1767c_9784e4b2",
      "range": {
        "startLine": 1487,
        "startChar": 9,
        "endLine": 1487,
        "endChar": 48
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "132cf555_9cd94bca",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-10-24T18:57:34Z",
      "side": 1,
      "message": "BTW, this is not the right way to tell if resource is used by multiple contexts. You could have a situation that a texture is used by single context, but that single context becomes unCurrent and then becomes current again and gets different QueueSerialIndex. Now your check will think it is used hy multiple context, even though it is only used by single context but current/uncurrent a few times.",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcbd1ac1_c7648d84",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-10-24T19:06:31Z",
      "side": 1,
      "message": "\u003e but that single context becomes unCurrent and then becomes current again and gets different QueueSerialIndex\n\nyup, i missed that. other than having a set tracking contexts that have used a resource could you provide a way to perform such a check? I believe we need to have a documented way to answer the simple question of whether an underlying image is used by multiple contexts",
      "parentUuid": "132cf555_9cd94bca",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "d759217b37c9b73398e05e91387eda4db5a21dd0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}