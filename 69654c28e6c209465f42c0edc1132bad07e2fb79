{
  "comments": [
    {
      "key": {
        "uuid": "a707672b_957d597f",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1220,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "Could you still make this so that the outputStoreFunctionCallPrefix function only takes the left child of the binary node, and the outputLoadFunctionCall takes the right child of the binary node? There\u0027s no need to pass in the whole binary node.",
      "range": {
        "startLine": 1220,
        "startChar": 33,
        "endLine": 1220,
        "endChar": 69
      },
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59b3f151_ae2021cd",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 25
      },
      "lineNbr": 1434,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "nit: Could this assert be placed right after the case statement instead?",
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "580e6915_cdb71ff7",
        "filename": "src/compiler/translator/ShaderStorageBlockOutputHLSL.h",
        "patchSetId": 25
      },
      "lineNbr": 58,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "nit: Now that I see the other functions renamed, maybe this could also be called \"traverseSSBOAccess\" or similar.",
      "range": {
        "startLine": 58,
        "startChar": 9,
        "endLine": 58,
        "endChar": 35
      },
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2942c09d_b94aeb6f",
        "filename": "src/compiler/translator/tree_ops/RemoveDynamicIndexing.cpp",
        "patchSetId": 25
      },
      "lineNbr": 8,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "There could be an additional comment here mentioning that this traverser doesn\u0027t touch indexing of SSBO fields.",
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faec3bd1_6697f470",
        "filename": "src/compiler/translator/tree_util/IntermNodePatternMatcher.cpp",
        "patchSetId": 25
      },
      "lineNbr": 55,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "This part could just reuse IsDynamicIndexingOfVectorOrMatrix().",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 55,
        "endChar": 55
      },
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c22cf47_596bb45b",
        "filename": "src/compiler/translator/tree_util/IntermNodePatternMatcher.cpp",
        "patchSetId": 25
      },
      "lineNbr": 116,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-09-07T07:08:48Z",
      "side": 1,
      "message": "Which function does this matching rule need to call to work correctly? If the function needs to be changed then the enum should also be renamed.",
      "range": {
        "startLine": 116,
        "startChar": 17,
        "endLine": 116,
        "endChar": 57
      },
      "revId": "69654c28e6c209465f42c0edc1132bad07e2fb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}