{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "71683d29_ab72339e",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-01T02:31:29Z",
      "side": 0,
      "message": "Would it be possible to enable inexact matching just for traces known to be nondeterminsic?  I\u0027m leery of unexpected changes creeping in.  We expect consistent pixels, these are exceptions.",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7de71cb_6186a8f2",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-08-01T13:24:34Z",
      "side": 0,
      "message": "It would be \"possible\" - if you wanted to do it by trace, we would need an expectations file and a format that could specify flaky or something like that. I think if you tried to describe the risk here: a trace creeps in that is slightly flaky when it shouldn\u0027t be, you\u0027ll quickly realize it\u0027s not something that\u0027s a big risk. If a trace is slightly flaky, we\u0027d just suppress it and move on, we wouldn\u0027t ever debug it to see why it\u0027s flaky. And IIRC I haven\u0027t seen any case where we\u0027d have a regression where a test becomes flaky because of a bad change. What I\u0027d suggest is that the cost/benefit of enabling inexact matching is heavily skewed towards benefit. We could potentially limit it to only some configs, like !Android, but even that I don\u0027t really see a real reason for, as if a trace ever had slight flaky pixels on Android we\u0027d still want to run it, and probably wouldn\u0027t debug why it\u0027s slightly non-deterministic.",
      "parentUuid": "71683d29_ab72339e",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd33cb35_bdc40015",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-01T13:44:46Z",
      "side": 0,
      "message": "I\u0027m not worried about new flakiness being introduced, I\u0027m worried about real bugs that creep in that only change pixel results slightly (and consistently).  I\u0027ve seen traces (in previous jobs) where the differences were very small, but the bug was real.\n\nIs the driving motivator here that you want to be able to run these traces locally without modifying the replayer source?  We\u0027ve discussed adding a \"--force-run\" flag that would ignore all the skips.",
      "parentUuid": "c7de71cb_6186a8f2",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73b3bb6f_2f83a0a5",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-08-01T15:16:11Z",
      "side": 0,
      "message": "Can you link to such a prior instance so I can figure out if there\u0027s a solution?\n\nThe original reason was I tried to run the trace locally. Now the reason is that I\u0027d like these traces to run on CI so we have performance tracking of them and regression testing, as well as not having to use a flag.",
      "parentUuid": "fd33cb35_bdc40015",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e2e2c82_ef956af9",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-08-02T18:32:07Z",
      "side": 0,
      "message": "Hey Cody, I updated this to only apply to Intel and NVIDIA configs. Won\u0027t be easy to fully test until after it lands. Can I convince you to unblock this? There is already existing flakiness on the and CI \u0026 CV because of Intel non-determinism in PubG Mobule traces, maybe in other traces too.",
      "parentUuid": "73b3bb6f_2f83a0a5",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f1a13a9_add28bc0",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 762,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-02T20:00:20Z",
      "side": 0,
      "message": "Hey Jamie, I\u0027m more comfortable isolating it to target platforms, for sure.\n\nFor those following along at home, Jamie and I spoke about this yesterday. I then forgot to hit Send on this drafted reply.\n\n(begin drafted reply below):\n\n\u003e Can you link to such a prior instance so I can figure out if there\u0027s a solution?\n\nUnfortunately no, this was closed source work on the Intel driver.  They have a large number of traces they run.  I do remember is was a Serious Sam title though. :)\n\nAmirali did point me to a bug yesterday where he was only off by a bit in the trace tests.  I believe the fuzz factor would have allowed it to get through:\n\n * Updated CL (on top of the original CL) with the failure: https://crrev.com/c/3787239/23\n\n * Skia: https://angle-gold.skia.org/search?issue\u003d3787239\u0026crs\u003dgerrit\u0026patchsets\u003d23\u0026corpus\u003dangle",
      "parentUuid": "73b3bb6f_2f83a0a5",
      "range": {
        "startLine": 762,
        "startChar": 0,
        "endLine": 762,
        "endChar": 72
      },
      "revId": "cbab97d4037f7e8188923f58dd15d50b35b448eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}