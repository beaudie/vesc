{
  "comments": [
    {
      "key": {
        "uuid": "c41f7186_28ab2f61",
        "filename": "BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 959,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "Usually git cl format doesn\u0027t touch files which you didn\u0027t change in your CL.\nI wonder what happened here?",
      "range": {
        "startLine": 959,
        "startChar": 25,
        "endLine": 959,
        "endChar": 26
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2d39b83_32930ebc",
        "filename": "BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 959,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "A previous commit touched this file for which I forgot to run git cl format!",
      "parentUuid": "c41f7186_28ab2f61",
      "range": {
        "startLine": 959,
        "startChar": 25,
        "endLine": 959,
        "endChar": 26
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33d2e9d4_f55374e4",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: should probably go in the cpp file",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c455489_6132e6e1",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "I don\u0027t agree. That would only disallow compiler optimizations for functions that are trivial. It\u0027s the same reasoning with `size()` for example being inline.",
      "parentUuid": "33d2e9d4_f55374e4",
      "range": {
        "startLine": 23,
        "startChar": 4,
        "endLine": 23,
        "endChar": 29
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa8dbe8_c8ccf985",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "should probably go in the cpp as well.",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 47
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aeabb43_620324a3",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "I don\u0027t recall initializing members not in constructor like this in ANGLE code.\nJamie, does this match ANGLE style?\nMaybe we should add default constructors in other classes, too, to make things consistent?",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdf5676f_3108b367",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "should go in the cpp. counts as including code in headers. we had a discussion about this a while back. it\u0027s fine if your class is already 100% header-only or source-only.",
      "parentUuid": "6aeabb43_620324a3",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50264b7b_f2e279bf",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "I talked with Geoff about this (and he mentioned Jamie may be against it ;). Other than convenience, this kind of initialization makes sure all constructors do it, and do it consistently. I\u0027m in favor of doing this more often.\n\nOf course, you generally want to do it for very basic initialization, like pointers set to nullptr, or a constant initialization.",
      "parentUuid": "fdf5676f_3108b367",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd2410d8_d1b1fda0",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "Well, it\u0027s my preference to keep code out of headers except for performance reasons. I find it just as easy to remember to initialize members in constructors as with inline init. And there are technical reasons to prefer to not inline constructors and destructors. But the full style guide is here:\n\nhttps://www.chromium.org/developers/coding-style/cpp-dos-and-donts\n\nsee \"Stop inlining constructors and destructors\" and \"When you CAN inline constructors and destructors\". If the class has any non-POD member you definitely don\u0027t want to do inlining. In this case it\u0027s probably okay as the only members are POD.",
      "parentUuid": "50264b7b_f2e279bf",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7b5adb4_66e00094",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T14:06:42Z",
      "side": 1,
      "message": "From the same guide, see \"Prefer to use \u003ddefault\".\n\nMemoryBuffer is not heavily used, so in the end I don\u0027t really mind. But with so many wrappers and abstractions (especially in angle due to its nature), I do believe keeping \"everything\" out of the headers just for the sake of that incurs a nontrivial cost.",
      "parentUuid": "fd2410d8_d1b1fda0",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66d3d385_562afe1b",
        "filename": "src/libANGLE/BlobCache.cpp",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "Out variables should come after in variables.\nAlso, this should probably be const pointer or even const reference.",
      "range": {
        "startLine": 71,
        "startChar": 20,
        "endLine": 71,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d027005_2b52d0ee",
        "filename": "src/libANGLE/BlobCache.cpp",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "get is a non-const member of scratchBuffer so passing a mutable pointer seems reasonable. but agree on the ordering.",
      "parentUuid": "66d3d385_562afe1b",
      "range": {
        "startLine": 71,
        "startChar": 20,
        "endLine": 71,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f15e86e4_bbf6f795",
        "filename": "src/libANGLE/BlobCache.cpp",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2d027005_2b52d0ee",
      "range": {
        "startLine": 71,
        "startChar": 20,
        "endLine": 71,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad5bc699_6160e8ab",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: should avoid default arguments. and generally prefer avoiding overloading and use distinct variations where possible to increase clarity.",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 96
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8117fad1_bfcf542a",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "I wanted to do that to be honest. I just couldn\u0027t settle on a function name I didn\u0027t hate. Like `putNoLocalCache()`? `putInApplicationOnly()`? Any suggestions?",
      "parentUuid": "ad5bc699_6160e8ab",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 96
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33ca97d6_82fb28f7",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "Maybe rename this one to putLocal and call the new one putApplication? I don\u0027t think we ever want to store in both simultaneously.",
      "parentUuid": "8117fad1_bfcf542a",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 96
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b931fa_29c0927f",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:28:23Z",
      "side": 1,
      "message": "I see, there\u0027s a branched path in put. Maybe call the new method just putApplication or something like that. Don\u0027t think it matters too much.",
      "parentUuid": "33ca97d6_82fb28f7",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 96
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f1ee06b_30f73b55",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "const?",
      "range": {
        "startLine": 84,
        "startChar": 34,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfcf5e8_54a4ff21",
        "filename": "src/libANGLE/renderer/DisplayImpl.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2f1ee06b_30f73b55",
      "range": {
        "startLine": 84,
        "startChar": 34,
        "endLine": 84,
        "endChar": 35
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cc0db41_328b4a18",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 355,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "range": {
        "startLine": 355,
        "startChar": 48,
        "endLine": 355,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5eab122_514273f5",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 516,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "range": {
        "startLine": 516,
        "startChar": 54,
        "endLine": 516,
        "endChar": 61
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f56e9018_445f9cfb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 607,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "range": {
        "startLine": 607,
        "startChar": 66,
        "endLine": 607,
        "endChar": 73
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b03e5a8_20660b7c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "will need to return angle::Result",
      "range": {
        "startLine": 699,
        "startChar": 0,
        "endLine": 699,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05626886_cc8d9e2a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Even though it cannot fail by design? The pipeline cache is allowed to not exist or not take a new entry, or fail in any other way and it shouldn\u0027t affect the program (well, other than having to redo the pipelines).",
      "parentUuid": "0b03e5a8_20660b7c",
      "range": {
        "startLine": 699,
        "startChar": 0,
        "endLine": 699,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "083fba56_208ddf33",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 699,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "Yeah. I don\u0027t think we need to continue pipeline creation fails. If failure was an expected case maybe. But failure indicates something catastrophic happened and we should probably let the application know as soon as possible. The system could be is out of memory, the driver is in an unusable state, etc. vkCreatePipelineCache returns VkResult and this could be something like out of memory. We will want to abort executation and report the error to the application.",
      "parentUuid": "05626886_cc8d9e2a",
      "range": {
        "startLine": 699,
        "startChar": 0,
        "endLine": 699,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38ab4256_c0b38df5",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 701,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "I think it wouldn\u0027t hurt to include the Vendor and Device IDs into the hash stream. It\u0027s not clear they are included in the UUID.",
      "range": {
        "startLine": 701,
        "startChar": 23,
        "endLine": 701,
        "endChar": 33
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549499f0_ee622538",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 701,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "The spec doesn\u0027t specifically say it, I agree, but don\u0027t you think \"UUID\" would be unique to cache format?",
      "parentUuid": "38ab4256_c0b38df5",
      "range": {
        "startLine": 701,
        "startChar": 23,
        "endLine": 701,
        "endChar": 33
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebbed7e_2e594a89",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 701,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "The spec isn\u0027t super clear but the vendor and device ids are in the pipeline cache header. This makes me think they aren\u0027t in the UUID. So yes I think it would be a good idea to add them explicitly.",
      "parentUuid": "549499f0_ee622538",
      "range": {
        "startLine": 701,
        "startChar": 23,
        "endLine": 701,
        "endChar": 33
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43aba875_743ef123",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 711,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "aren\u0027t there stream operators like std::hex that can do something like that?",
      "range": {
        "startLine": 705,
        "startChar": 0,
        "endLine": 711,
        "endChar": 5
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6987aac2_f975d75f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 711,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Right.",
      "parentUuid": "43aba875_743ef123",
      "range": {
        "startLine": 705,
        "startChar": 0,
        "endLine": 711,
        "endChar": 5
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc45a3c0_b44a9093",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 713,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "maybe you could make the key generation step a helper method just to increase clarity?",
      "range": {
        "startLine": 713,
        "startChar": 36,
        "endLine": 713,
        "endChar": 46
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf11c19b_50198b4e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 713,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "bc45a3c0_b44a9093",
      "range": {
        "startLine": 713,
        "startChar": 36,
        "endLine": 713,
        "endChar": 46
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62a29a27_cfee189b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 727,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "Spec says:\nIf initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetPipelineCacheData.\nI wonder if \"have been retrieved\" is a property preserved across program restarts and driver upgrades. Better check mPipelineCacheVk.init result here.",
      "range": {
        "startLine": 727,
        "startChar": 28,
        "endLine": 727,
        "endChar": 40
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a08de16e_518329ab",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 727,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "definitely needs to check the init result. the consistency should be guaranteed by the UUID i think.",
      "parentUuid": "62a29a27_cfee189b",
      "range": {
        "startLine": 727,
        "startChar": 28,
        "endLine": 727,
        "endChar": 40
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95237e0a_1e303502",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 727,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "@yuly, it _does_ sound ambiguous, but it would be rather silly if it didn\u0027t. The whole point of this (and the vkGetPipelineCacheData() function) is persistent storage. The spec specifically talks about the cache header and how compatibility can be checked.\n\n`vkCreatePipelineCache()` is required to reject incompatible initial data, so we don\u0027t need to care about that:\n\n\u003e If the pipeline cache data is incompatible (as defined below) with the device, the pipeline cache will be initially empty.\n\n---\n\n@Jamie, there is no difference whatsoever what init returns. If cache creation fails, we proceed without a cache. As I mentioned above, there is no hazard with providing incompatible init data.",
      "parentUuid": "a08de16e_518329ab",
      "range": {
        "startLine": 727,
        "startChar": 28,
        "endLine": 727,
        "endChar": 40
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9392c944_a1fd0624",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 727,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "See earlier comments.",
      "parentUuid": "95237e0a_1e303502",
      "range": {
        "startLine": 727,
        "startChar": 28,
        "endLine": 727,
        "endChar": 40
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c9ba1da_0c8b0038",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1011,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "you will need to pass DisplayVk to this function. you won\u0027t need to pass the blobCache explicitly in that case.",
      "range": {
        "startLine": 1011,
        "startChar": 17,
        "endLine": 1011,
        "endChar": 36
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c16cfa47_ef4761a4",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1011,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c9ba1da_0c8b0038",
      "range": {
        "startLine": 1011,
        "startChar": 17,
        "endLine": 1011,
        "endChar": 36
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c02d93a0_333cf17f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1014,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "Not sure, are there cases when we don\u0027t have pipeline cache after this CL?\nMaybe this can be changed to an ASSERT?",
      "range": {
        "startLine": 1014,
        "startChar": 8,
        "endLine": 1014,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83fa1faa_f338b1c3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1014,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "also use mPipelineCache.valid()",
      "parentUuid": "c02d93a0_333cf17f",
      "range": {
        "startLine": 1014,
        "startChar": 8,
        "endLine": 1014,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "305191e3_94d2c04b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1014,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "@Jamie, done. @Yuly, `vkCreatePipelineCache` could fail (which is harmless).",
      "parentUuid": "83fa1faa_f338b1c3",
      "range": {
        "startLine": 1014,
        "startChar": 8,
        "endLine": 1014,
        "endChar": 22
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaf7f192_4325dbbe",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1029,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: you should make getCacheData a method in vk::PipelineCache. taking a vk::Context, the other parameters, and returning angle::Result. use ANGLE_TRY.",
      "range": {
        "startLine": 1029,
        "startChar": 8,
        "endLine": 1029,
        "endChar": 30
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e8ac95_9e9e4f3b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1035,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "it would be nice to re-use a scratch buffer. otherwise this will trigger a potentially large allocation. we might want to add one to the Display similarly to how we have one in the Context.",
      "range": {
        "startLine": 1035,
        "startChar": 24,
        "endLine": 1035,
        "endChar": 41
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3101c23_7ce49bd1",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1035,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "This is one allocation on init, which gets deallocated at the end of this function. If I add a scratch buffer to display just for this, it would have a longer-lasting effect. If a scratch buffer in DisplayVk ends up being useful elsewhere, sure that could be used. Otherwise adding one just for this would have a negative effect.",
      "parentUuid": "e4e8ac95_9e9e4f3b",
      "range": {
        "startLine": 1035,
        "startChar": 24,
        "endLine": 1035,
        "endChar": 41
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7459c3a1_7a67d77f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1035,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "Hm. I thought syncPipelineCacheVk is the one that gets called on swap rather than init? It\u0027s not a huge deal. Just might come up in some random performance trace somewhere down the line. It\u0027s fine to defer this. Maybe leave a comment?",
      "parentUuid": "a3101c23_7ce49bd1",
      "range": {
        "startLine": 1035,
        "startChar": 24,
        "endLine": 1035,
        "endChar": 41
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "796b554f_6d7dcc9f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1035,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T14:06:42Z",
      "side": 1,
      "message": "Oh, yes sorry I was thinking of init that creates a local scratch buffer.\n\nDone.",
      "parentUuid": "7459c3a1_7a67d77f",
      "range": {
        "startLine": 1035,
        "startChar": 24,
        "endLine": 1035,
        "endChar": 41
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d069b9e9_a98ec006",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1038,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "I suspect we don\u0027t need to handle VK_INCOMPLETE here. returning an error for INCOMPLETE should be sufficient I think.",
      "range": {
        "startLine": 1038,
        "startChar": 42,
        "endLine": 1038,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591b3285_5acc030f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1038,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "VK_INCOMPLETE is not an error. It just says not all of the cache could be got, which is fine (and the results consistent according to spec), we\u0027ll save as much as we can get.\n\nIn practice I don\u0027t expect it to happen, since the size was just retrieved and there is no concurrent access.",
      "parentUuid": "d069b9e9_a98ec006",
      "range": {
        "startLine": 1038,
        "startChar": 42,
        "endLine": 1038,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46334c83_4437b9dc",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1038,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "VK_INCOMPLETE seems like an implementation error. It certainly shouldn\u0027t happen in practice. Which is why I would think generating an error here would be a good idea. And if we didn\u0027t get all of the bytes in the cache, is the result even guaranteed to be consistent?",
      "parentUuid": "591b3285_5acc030f",
      "range": {
        "startLine": 1038,
        "startChar": 42,
        "endLine": 1038,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc12677f_8c583249",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1038,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T14:06:42Z",
      "side": 1,
      "message": "First, yes the result is guaranteed to be consistent:\n\n\u003e If pDataSize is less than the maximum size that can be retrieved by the pipeline cache, at most pDataSize bytes will be written to pData, and vkGetPipelineCacheData will return VK_INCOMPLETE. Any data written to pData is valid and can be provided as the pInitialData member of the VkPipelineCacheCreateInfo structure passed to vkCreatePipelineCache.\n\nIt might be an implementation error, but I\u0027m against reporting it to the application:\n\n1. The application can\u0027t do anything meaningful with this information,\n2. The application can continue unaffected\n\nGiven the memory constraints, we could also think about capping the amount of data we get out of the cache, to avoid it growing indefinitely, in which case VK_INCOMPLETE would be an expected value too.",
      "parentUuid": "46334c83_4437b9dc",
      "range": {
        "startLine": 1038,
        "startChar": 42,
        "endLine": 1038,
        "endChar": 55
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889a75a3_97a38d15",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "i think this warrants a new API. the use case is quite different. can you add one?",
      "range": {
        "startLine": 1040,
        "startChar": 8,
        "endLine": 1041,
        "endChar": 39
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a444c362_e6efe8b2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1041,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "See my comment in blob cache",
      "parentUuid": "889a75a3_97a38d15",
      "range": {
        "startLine": 1040,
        "startChar": 8,
        "endLine": 1041,
        "endChar": 39
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f225839f_4ad516e5",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: sort",
      "range": {
        "startLine": 33,
        "startChar": 6,
        "endLine": 33,
        "endChar": 15
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43a74ad5_fb77e996",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "range": {
        "startLine": 46,
        "startChar": 40,
        "endLine": 46,
        "endChar": 47
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3365526_d178dbf9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "I was originally hoping to avoid noise from the variable name change in the functions.\n\nDone",
      "parentUuid": "43a74ad5_fb77e996",
      "range": {
        "startLine": 46,
        "startChar": 40,
        "endLine": 46,
        "endChar": 47
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d4afc2_cf2751a8",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "You could make a split CL that just refactors these parameters if you want to avoid the noise.",
      "parentUuid": "b3365526_d178dbf9",
      "range": {
        "startLine": 46,
        "startChar": 40,
        "endLine": 46,
        "endChar": 47
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da188d5f_5a205a68",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dca70dba_2d8ee265",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: displayVk",
      "range": {
        "startLine": 151,
        "startChar": 46,
        "endLine": 151,
        "endChar": 53
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8ae7892_84212a1e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "Here too, I don\u0027t think we initialize members in this way.",
      "range": {
        "startLine": 211,
        "startChar": 43,
        "endLine": 211,
        "endChar": 73
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfc3e1ad_206dc565",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "You can put the constexpr value in RendererVk.cpp. And the timeout you should initialize in the cpp. to reduce codegen in the header for non-performance related functions.",
      "parentUuid": "d8ae7892_84212a1e",
      "range": {
        "startLine": 211,
        "startChar": 43,
        "endLine": 211,
        "endChar": 73
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7474b1c0_cc3f448a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bfc3e1ad_206dc565",
      "range": {
        "startLine": 211,
        "startChar": 43,
        "endLine": 211,
        "endChar": 73
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58034b69_4d6ebb5e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 347,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "can you pass vk::PipelineCache by const \u0026 to all of these?",
      "range": {
        "startLine": 347,
        "startChar": 37,
        "endLine": 347,
        "endChar": 53
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dda9818_03aefaec",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 347,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "58034b69_4d6ebb5e",
      "range": {
        "startLine": 347,
        "startChar": 37,
        "endLine": 347,
        "endChar": 53
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34a4cdc4_aea41708",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "can you make a separate change that renames this to something like AppPipelineCache? Surprised the naming didn\u0027t conflict.",
      "range": {
        "startLine": 606,
        "startChar": 6,
        "endLine": 606,
        "endChar": 20
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ce3e4e5_ffc0f544",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "This one is `rx::PipelineCache`.",
      "parentUuid": "34a4cdc4_aea41708",
      "range": {
        "startLine": 606,
        "startChar": 6,
        "endLine": 606,
        "endChar": 20
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d037b093_e8c40204",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "can you pass vk::PipelineCache by const \u0026 to all of these?",
      "range": {
        "startLine": 616,
        "startChar": 29,
        "endLine": 616,
        "endChar": 62
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa6c5e26_a1a3b76a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "Should have noticed the surrounding...",
      "parentUuid": "d037b093_e8c40204",
      "range": {
        "startLine": 616,
        "startChar": 29,
        "endLine": 616,
        "endChar": 62
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9c6e736_9a33cd80",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-25T19:02:54Z",
      "side": 1,
      "message": "You should probably return angle::Result here, similar to PipelineLayout::init().",
      "range": {
        "startLine": 881,
        "startChar": 0,
        "endLine": 881,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2727053_a1fcb2e8",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "yes, good catch yuly.",
      "parentUuid": "c9c6e736_9a33cd80",
      "range": {
        "startLine": 881,
        "startChar": 0,
        "endLine": 881,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc2f5cf6_1a7d9a08",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 881,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "As I said in another file, this function is no-fail by design.",
      "parentUuid": "b2727053_a1fcb2e8",
      "range": {
        "startLine": 881,
        "startChar": 0,
        "endLine": 881,
        "endChar": 4
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a910194_948443b8",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 886,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "you can use ANGLE_VK_TRY here as in the other methods.",
      "range": {
        "startLine": 886,
        "startChar": 4,
        "endLine": 886,
        "endChar": 25
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df2159fc_026f8e9b",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 541,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: you can pass the vk::PipelineCache here by const \u0026",
      "range": {
        "startLine": 541,
        "startChar": 31,
        "endLine": 541,
        "endChar": 47
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45a93bcc_7d9638f7",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-25T19:46:25Z",
      "side": 1,
      "message": "nit: should go in the cpp.",
      "range": {
        "startLine": 556,
        "startChar": 4,
        "endLine": 556,
        "endChar": 30
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef1b4aeb_39fc1f8f",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-26T03:59:12Z",
      "side": 1,
      "message": "To be honest, I think the whole content of the cpp file should be moved to the header. This is just a thin wrapper to make things look more c++ish, but it just ends up adding one level of indirection to everything. Look at CommandBuffer for example.\n\nI\u0027ll move this to cpp just for consistency, but I don\u0027t believe we are doing the right thing here.",
      "parentUuid": "45a93bcc_7d9638f7",
      "range": {
        "startLine": 556,
        "startChar": 4,
        "endLine": 556,
        "endChar": 30
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46113ba4_a80218ef",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 556,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-26T11:26:28Z",
      "side": 1,
      "message": "Somewhat agree. We will definitely want to inline any methods that are used in hot paths.",
      "parentUuid": "ef1b4aeb_39fc1f8f",
      "range": {
        "startLine": 556,
        "startChar": 4,
        "endLine": 556,
        "endChar": 30
      },
      "revId": "d2c28a54f65321956094ceec1f672c324251f5a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}