{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d552b2de_9fdb8841",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2738,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-11T01:35:19Z",
      "side": 1,
      "message": "We may want some debug tracking here that makes sure we aren\u0027t exceeding some really high number of outstanding CBHs (1000?), which could point to a leak with CBHs getting lost.",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f81475cc_c829af2b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2738,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-11T18:39:11Z",
      "side": 1,
      "message": "Ack, this is unrelated to this CL. Ideally we could have a mechanism that flushes when there is significant outstanding work and throttles if we are too far behind the device. Currently we only have a throttle during Swap.",
      "parentUuid": "d552b2de_9fdb8841",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b883624c_698d575b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2738,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-11T20:36:49Z",
      "side": 1,
      "message": "I\u0027m referring to catching leaking memory (which is related to this CL, since the \u0027new\u0027 is being added), not making sure the CPU doesn\u0027t get too far ahead of the GPU.   With this version, it\u0027s possible to silently allocate CBHs forever without any being recycled.",
      "parentUuid": "f81475cc_c829af2b",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41bf01d2_da3643ef",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2758,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-11T01:35:19Z",
      "side": 1,
      "message": "I think we should have a threshold on the number of CBHs we keep in free list and SafeDelete() any that are recycled beyond that (that 50 count is probably safe to reuse here).   That should help the cases where there is some weird moment where we allocate a bunch of CBHs that are never used again and just eating memory.",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "adcb746e_7881ad64",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2758,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-11T18:39:11Z",
      "side": 1,
      "message": "Ack, we can defend against this using the above technique of pre-emptive flushing/throttling. Feel free to file a bug. This seems like a low priority feature.",
      "parentUuid": "41bf01d2_da3643ef",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44670786_3b2e977c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2758,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-11T20:36:49Z",
      "side": 1,
      "message": "anglebug.com/5335",
      "parentUuid": "adcb746e_7881ad64",
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97a25cdf_92f0c7d5",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 8
      },
      "lineNbr": 830,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-10T03:39:41Z",
      "side": 1,
      "message": "Should be false. open() will set it to true.",
      "range": {
        "startLine": 830,
        "startChar": 14,
        "endLine": 830,
        "endChar": 18
      },
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eab72c0c_e7ffe648",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 8
      },
      "lineNbr": 830,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-11T18:39:11Z",
      "side": 1,
      "message": "Ack, this is intentional. A newly created CB is open.",
      "parentUuid": "97a25cdf_92f0c7d5",
      "range": {
        "startLine": 830,
        "startChar": 14,
        "endLine": 830,
        "endChar": 18
      },
      "revId": "df3a29a23488206351088060511929258cd84b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}