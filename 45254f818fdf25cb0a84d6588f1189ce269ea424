{
  "comments": [
    {
      "key": {
        "uuid": "5c83459d_367c0e59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-03-29T14:09:22Z",
      "side": 1,
      "message": "this is a bit insane. maybe we can do better... these scrips are designed to be fairly fast.",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "45254f818fdf25cb0a84d6588f1189ce269ea424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fad457a_b31e22c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-29T14:16:49Z",
      "side": 1,
      "message": "Do you know of an alternative approach for determining whether there can be a hash collision rather than generating possible variations of the hashed string and calculating a hash for each of them? The script to do this can also be optimized by reducing string allocations or something similar, but not necessarily so much that it would make a huge difference.\n\nOr do you think we should develop collision check as a native application / use some existing tool for this?",
      "parentUuid": "5c83459d_367c0e59",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "45254f818fdf25cb0a84d6588f1189ce269ea424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82d5f202_08cb42dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-03-29T15:14:11Z",
      "side": 1,
      "message": "It\u0027s a good question. An an emergency measure we can remove the gen from run_code_generation.py.\n\nI think maybe moving to a flat sorted array with binary search might be an improvement to both script generation time and code size, with a cost of performance. Though the cost might not be too bad.",
      "parentUuid": "9fad457a_b31e22c4",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "45254f818fdf25cb0a84d6588f1189ce269ea424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "330a7c9e_7d69c8be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2018-03-29T15:46:52Z",
      "side": 1,
      "message": "Flat sorted array of what, exactly? Remember that the current approach avoids storing all the full mangled names, which saves a lot of binary size.\n\nI have managed to make the script a bit faster, so now it takes about one minute on my Core i7. This is getting closer to acceptable.",
      "parentUuid": "82d5f202_08cb42dd",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "45254f818fdf25cb0a84d6588f1189ce269ea424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c38f9e9_38951bfb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-04-03T08:58:45Z",
      "side": 1,
      "message": "I had to think about this. I guess you\u0027d either have to store the full mangled name, or some index into the name of the builtins (which I think you have somewhere) plus the mangled parameter string, or some way of identifying the parameters. I\u0027m not sure if this would save any space or not - it would be something we\u0027d only know experimentally. It still would be worth doing if it does save binary size and code gen time and there isn\u0027t a big speed regression, but you\u0027ve already done so much on this.\n\nI\u0027m okay with the one minute build time for now but the annoying thing with the run_code_gen script is it seems to like to re-run things once when files are modified locally, so it will get called even if there\u0027s no local modifications. We might want to take this out of the script for now, or find a solution to the rebuilding problem.",
      "parentUuid": "330a7c9e_7d69c8be",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "45254f818fdf25cb0a84d6588f1189ce269ea424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}