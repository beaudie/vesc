{
  "comments": [
    {
      "key": {
        "uuid": "92b13361_336ae319",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "Can this be \"ANGLELineRasterEmulation\" to match the variable name?",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 37
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a9f0941_a449710d",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92b13361_336ae319",
      "range": {
        "startLine": 168,
        "startChar": 21,
        "endLine": 168,
        "endChar": 37
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ace7181b_bbc74155",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "This is a duplicate of the value above in TranslatorVulkan.cpp and should probably live in a shared header file somewhere instead.\n\nAdditionally, making this an enum would allow the values to automatically be unique.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "139012e0_befc53a2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Yes, I had been considering the same. Also, good point about enum. Done.",
      "parentUuid": "ace7181b_bbc74155",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9950b3be_97412517",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 379,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "I don\u0027t really know the answer, but is this better than checking for at least one mSpirvShaders having SPIR-V in it?   Checking the map would be slower, but it would only be checked during debug builds with asserts enabled anyway.   It would allow us to remove the extra member that\u0027s only read during debug builds anyway.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "116f9ce6_b4d40825",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 379,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "This is not only used for asserts. We test if `valid()` to know if we should call initShaders() as part of `getGraphicsPipeline` (or `getComputePipeline`). Those get called every time the program binding changes, and that\u0027s not exactly infrequent.",
      "parentUuid": "9950b3be_97412517",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "040527b7_22d7775f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "Why do we need 2 programs still?   I would have expected everything about these to be the same, with the specialization constant being set at run-time.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b84b308d_93898c63",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Specialization constants are provided at pipeline creation time. If the program is used to draw both lines and triangles, you need two pipelines around.\n\n\"Being set at run-time\" is what you get with uniforms. Using a \"driver uniform\" to select the behavior at runtime is a possibility, but then you end up with a big chunk of uniform-controlled  dead code in every shader which can\u0027t be eliminated (dead code, because you generally don\u0027t draw lines as much as everything else). The downsides are memory waste and instruction cache inefficiencies. Besides, line raster emulation will be the guinea pig for placing the specialization constant infrastructure in place :)",
      "parentUuid": "040527b7_22d7775f",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec810398_d4000484",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T19:29:41Z",
      "side": 1,
      "message": "Ah, pipeline creation time vs draw time was the part that wasn\u0027t sinking in for me.\n\nAs part of the PPO stuff, I\u0027m moving the work in ProgramVk::linkImpl() to ProgramPipelineVk::createPipelineLayout(), since that\u0027s really what it\u0027s doing at that point during the draw call.   We also keep track of the drawing mode, so I\u0027m able to only have a single pipeline with my changes since the pipeline is recreated when the lines-\u003etriangles transition occurs (and vice-versa), meaning we never have to do the line emulation work for the draw calls that don\u0027t require it.   It does mean we are doing a bit more work when the transition occurs, but hopefully it\u0027s still an overall win.   \n\nThat\u0027s the goal anyway; I\u0027m still working through getting tests to pass, so there may still be an issue with this approach that gets teased out.   Admittedly, I took this approach since it\u0027s simpler to track and recompile/recreate a single program/pipeline than multiple of them.   If it\u0027s no good, I should be able to add things back in.",
      "parentUuid": "b84b308d_93898c63",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5328df50_7cbb9cf1",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.h",
        "patchSetId": 3
      },
      "lineNbr": 250,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T19:37:37Z",
      "side": 1,
      "message": "FYI, we already don\u0027t do any line emulation work if it\u0027s not used. The program object and Vulkan pipeline are simply never initialized, i.e. they are just null pointers. I would still keep two objects, you wouldn\u0027t want to be rebuilding the same pipelines over and over if the program bounces between lines and triangles (admittedly probably a niche case). Think of it as a cache of pipelines: whatever specialization constant combination the program actually uses is built once and kept.",
      "parentUuid": "ec810398_d4000484",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9c2b254_1e647569",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "This should be a BitSet type, to indicate this is a bit field.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10709199_a5a14734",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 621,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9c2b254_1e647569",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ceeb5e5f_c9f1925b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 642,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "All of this assume specialization constants will only ever be boolean values, which is not a Vulkan requirement.\n\nMy first impression is that we should support uint values first, which we can treat as booleans, which would give us a bit more initial functionality without much change here.",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 642,
        "endChar": 81
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d2b52b_92d7e8ce",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 642,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "I\u0027d argue that if we do need uint constants in the shader, it\u0027s better to provide them as uniforms (as we currently do). The issue is that we need to create a different Vulkan pipeline if we need a different set of values for specialization constants. If we have N constants, with bool spec consts we already get a potential 2^N pipelines. Even if a single one of them is a true uint (not a bool underneath), that already gives 2^32 variations.\n\nIn other words, uint spec conts won\u0027t be practical for ANGLE (1). Needless to say also that we should be using spec consts sparingly.\n\n(1) it looks like uint spec consts are really just made for setting the compute shader\u0027s group size, so it can match the hardware\u0027s subgroup size as queried in Vulkan. ANGLE gets the compute shaders from the application where the group size is already set, so this use-case doesn\u0027t apply to ANGLE.",
      "parentUuid": "ceeb5e5f_c9f1925b",
      "range": {
        "startLine": 640,
        "startChar": 0,
        "endLine": 642,
        "endChar": 81
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05ce1576_a44a3b3c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 646,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "Updating specConsts to a BitSet also gives you operator[], which implements this check.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34e0d766_7d111a9a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 646,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05ce1576_a44a3b3c",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dc121dd_4fc4b2c6",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 662,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "Can all of this specialization constant work be moved into a helper function?",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c710c86_54435c7e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 662,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dc121dd_4fc4b2c6",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc61e621_5eacd023",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "You also get this for free with an enum.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57d41947_5ac80583",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc61e621_5eacd023",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8742e10c_5efb00b5",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 819,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "This magic number comes from the fact that \u0027specConsts\u0027 is a uint8?\n\nWhy are we limiting ourselves to just 8?   I don\u0027t see anything in the spec that limits the number of specialization constants.",
      "range": {
        "startLine": 819,
        "startChar": 49,
        "endLine": 819,
        "endChar": 50
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dbdc3a6_f9dcefb9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 819,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "No it was an artifact of a previous iteration where I packed the spec constants in one of the structs above.\n\nRemoved.",
      "parentUuid": "8742e10c_5efb00b5",
      "range": {
        "startLine": 819,
        "startChar": 49,
        "endLine": 819,
        "endChar": 50
      },
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5a5711c_eea1bb92",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3595,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "Oh, I thought this was setting the value to true.   Making these \u0027id\u0027 values a typed enum would remove the need for the ASSERT() and help with code readability.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56b3ac45_1825acb6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 3595,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5a5711c_eea1bb92",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20ea809b_a32dc70b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1247,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-01-14T01:48:25Z",
      "side": 1,
      "message": "This should be a BitSet also, so indicate how the value is used.   The uint8 type doesn\u0027t really give any context.",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f9837cb_b5320b57",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1247,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-14T16:45:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20ea809b_a32dc70b",
      "revId": "f19c7805cee0be68b98a79d43d486ae1843e75d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}