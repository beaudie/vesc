{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65779cd9_89fa53cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T20:13:13Z",
      "side": 1,
      "message": "thanks, landing this for now with an open item for future work that i will track internally",
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a48f65e3_c24bfe58",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-04-18T16:46:50Z",
      "side": 1,
      "message": "I suggest change to std::vector. gl::ActiveTextureArray is an array of 96 and almost most of them are going to be nullptr for most of apps. If you use std::vector then `hash()` and `operator\u003d\u003d` will be much cheaper. You can just bake mImmutableSamplers.size() to the hash and rely on operator\u003d\u003d to tell the truth.",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc1ee97_5d69f385",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T16:57:04Z",
      "side": 1,
      "message": "i believe alignment restrictions require fix sized layouts so it can be packed into PipelineLayoutDesc? otherwise i see no reason why `mPackedDescriptorSetLayout` should have been an array to begin with",
      "parentUuid": "a48f65e3_c24bfe58",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "906bd40a_6718889d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-04-18T17:03:59Z",
      "side": 1,
      "message": "You are right. But I think that can be fixed as well by change how PipelineLayoutDesc calculate `hash` and `\u003d\u003d`. I will leave it for future exercise then, but I still believe what I proposed will be better.",
      "parentUuid": "bfc1ee97_5d69f385",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e80ea2d_e44773ec",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-18T19:33:44Z",
      "side": 1,
      "message": "Mohan talk with @a.annestrand@samsung.com about this, he was similarly asking why we don\u0027t use `angle::FastVector` here. In particular, the CL\u0027s limit is different from GL\u0027s, so we either have to make this even larger or make it templated.\n\nBut if someone makes this an `angle::FastVector` following Charlie\u0027s suggestion, it also solves the problem for CL.",
      "parentUuid": "906bd40a_6718889d",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b419129_02960808",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T20:13:13Z",
      "side": 1,
      "message": "\u003e make it templated\n\nthis separation between GL and CL can be a stop gap for now until we work on a full refactor\n\n\u003e But if someone makes this an angle::FastVector following Charlie\u0027s suggestion\n\nif there are no objections, this will need to be a follow up change",
      "parentUuid": "4e80ea2d_e44773ec",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77db3b93_1880b92d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-18T20:14:55Z",
      "side": 1,
      "message": "\u003e this will need to be a follow up change\n\nYes of course, I already assumed that based on Charlie\u0027s response",
      "parentUuid": "3b419129_02960808",
      "range": {
        "startLine": 1042,
        "startChar": 0,
        "endLine": 1042,
        "endChar": 57
      },
      "revId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1cf71cf2a080b6391a392aaf18837aa8b47c2e94",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}