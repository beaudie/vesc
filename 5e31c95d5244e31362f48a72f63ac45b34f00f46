{
  "comments": [
    {
      "key": {
        "uuid": "2b1dae88_1bb4bbb5",
        "filename": "src/libANGLE/RefCountObject.h",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2018-02-22T06:11:18Z",
      "side": 1,
      "message": "Jamie\u0027s comments might obviate these -- but I wonder whether changing this core method of RefCountObject to be virtual may impact performance, especially of some customer use cases doing lots of draw calls with state changes in between, like binding other buffers or VAOs. If we were going to go this route then it would be good to do before-and-after tests with some of this customer\u0027s traces and other ANGLE performance tests.",
      "revId": "5e31c95d5244e31362f48a72f63ac45b34f00f46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e505ee_01e91712",
        "filename": "src/libANGLE/RefCountObject.h",
        "patchSetId": 8
      },
      "lineNbr": 161,
      "author": {
        "id": 1256148
      },
      "writtenOn": "2018-02-23T02:40:10Z",
      "side": 1,
      "message": "Yeah, I was worried about this until I saw that the other overload of this function, which is probably more commonly called, was already virtual. But this change is unnecessary now that I\u0027ve refactored to remove the smart pointer changes.",
      "parentUuid": "2b1dae88_1bb4bbb5",
      "revId": "5e31c95d5244e31362f48a72f63ac45b34f00f46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e88b5d7_d2383d35",
        "filename": "src/libANGLE/renderer/gl/StateManagerGL.cpp",
        "patchSetId": 8
      },
      "lineNbr": 646,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-02-20T21:57:34Z",
      "side": 1,
      "message": "This won\u0027t be necessary, we never bind buffers to the generic transform feedback binding point internally.  You can add an assert in StateManagerGL::bindBuffer that the binding point is not transform feedback.",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 79
      },
      "revId": "5e31c95d5244e31362f48a72f63ac45b34f00f46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada3022b_2f9379fa",
        "filename": "src/libANGLE/renderer/gl/StateManagerGL.cpp",
        "patchSetId": 8
      },
      "lineNbr": 646,
      "author": {
        "id": 1256148
      },
      "writtenOn": "2018-02-23T02:40:10Z",
      "side": 1,
      "message": "An assert there wouldn\u0027t ensure that the generic bind point is never set, because it\u0027s implicitly set every time bindBufferBase is called. Someone could still use bufferData or any other function on the generic bind point and it might work on some drivers, but not others. Preventing that would require asserts in all the functions that can use the generic bind point. Should I add those? Or is it enough to just document that we shouldn\u0027t use the generic bind point?",
      "parentUuid": "7e88b5d7_d2383d35",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 79
      },
      "revId": "5e31c95d5244e31362f48a72f63ac45b34f00f46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f3f28ad_81d99dae",
        "filename": "src/libANGLE/renderer/gl/StateManagerGL.cpp",
        "patchSetId": 8
      },
      "lineNbr": 646,
      "author": {
        "id": 1256148
      },
      "writtenOn": "2018-03-01T22:16:55Z",
      "side": 1,
      "message": "Geoff, how do you prefer to resolve this?",
      "parentUuid": "ada3022b_2f9379fa",
      "range": {
        "startLine": 642,
        "startChar": 0,
        "endLine": 646,
        "endChar": 79
      },
      "revId": "5e31c95d5244e31362f48a72f63ac45b34f00f46",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}