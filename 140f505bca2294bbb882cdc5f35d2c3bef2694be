{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0a7aab7c_f6d90103",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-25T19:06:33Z",
      "side": 1,
      "message": "Here\u0027s an alternative, but I didn\u0027t dig too deep into that: https://chromium-review.googlesource.com/c/angle/angle/+/3552091",
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30f71701_5c0fb045",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-25T19:07:03Z",
      "side": 1,
      "message": "Also, I verified this by manual error injection, but don\u0027t know how it can be automatically tested",
      "parentUuid": "0a7aab7c_f6d90103",
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc5d4d85_2a8500fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-26T01:54:09Z",
      "side": 1,
      "message": "Moved",
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2c69a64_ffa9e847",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-26T02:07:39Z",
      "side": 1,
      "message": "Leftover comment that didn\u0027t get deleted on cancel, please ignore.",
      "parentUuid": "bc5d4d85_2a8500fe",
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e286f0ff_1fa9f363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-28T20:53:02Z",
      "side": 1,
      "message": "Anything else Peng?",
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56148961_d0272d12",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1216,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-03-26T00:16:13Z",
      "side": 1,
      "message": "Do we need holding mutex for them?",
      "range": {
        "startLine": 1215,
        "startChar": 0,
        "endLine": 1216,
        "endChar": 49
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af571f99_08383400",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1216,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-26T01:54:09Z",
      "side": 1,
      "message": "I don\u0027t believe so, we can\u0027t have one thread destroying the renderer while another is using it. We most likely don\u0027t strictly need the lock in line 1188 either (other than maybe for the mutex-implicit memory-barrier related reasons)",
      "parentUuid": "56148961_d0272d12",
      "range": {
        "startLine": 1215,
        "startChar": 0,
        "endLine": 1216,
        "endChar": 49
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a4b6c3b_61a9f441",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3868,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-03-26T00:16:13Z",
      "side": 1,
      "message": "Don\u0027t we need holding mutex mCommandBufferRecyclerMutex for accessing mOutsideRenderPassCommandBufferRecycler and mOutsideRenderPassCommandBufferRecycler ?",
      "range": {
        "startLine": 3868,
        "startChar": 18,
        "endLine": 3868,
        "endChar": 57
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c9d5e40_a9240b35",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3868,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-26T01:54:09Z",
      "side": 1,
      "message": "`mCommandBufferRecyclerMutex` is used in the `get` and `recycle` functions of the recycler, which means it\u0027s protecting the `mCommandBufferHelperFreeList` member.\n\nThis is touching the `mSecondaryCommandBuffersToReset` member. You are right that there might be a threading bug there. That\u0027s unrelated to this change though (and it\u0027s for a feature that\u0027s not used by ANGLE at the moment (using Vulkan secondary command buffers)). I\u0027ll open a bug for it.",
      "parentUuid": "7a4b6c3b_61a9f441",
      "range": {
        "startLine": 3868,
        "startChar": 18,
        "endLine": 3868,
        "endChar": 57
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f76bab3d_8faa9266",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3901,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-03-28T22:30:29Z",
      "side": 1,
      "message": "try_lock() \u003d\u003d false, it means the lock is hold by one thread. It is not necessary to be the thread calling this method. So I think it is racing. For example:\n1. Thread A holding the lock.\n2. Thread B calls this method for some reasons.\n3. try_lock() returns false.\n4. The thread A releases the lock without calling handleDeviceLostNoLock().\n5. The thread B returns at line 3903 without calling handleDeviceLostNoLock() too.\n\nDo we care about this case?",
      "range": {
        "startLine": 3901,
        "startChar": 9,
        "endLine": 3901,
        "endChar": 38
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be5040ea_75f12ab2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3901,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-29T01:59:14Z",
      "side": 1,
      "message": "#4 in your scenario is not supposed to happen. If thread A holds the lock, then it should necessarily call handleDeviceLostNoLock() before releasing the lock. That\u0027s in the destructor of ScopedCommandQueueLock. Do you see anywhere that that might not be done?",
      "parentUuid": "f76bab3d_8faa9266",
      "range": {
        "startLine": 3901,
        "startChar": 9,
        "endLine": 3901,
        "endChar": 38
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc3bc876_9751656e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3901,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-03-29T12:19:14Z",
      "side": 1,
      "message": "If I read the code correctly, I think thread A could call `mRenderer-\u003eisDeviceLost()` before thread B calls `mRenderer-\u003enotifyDeviceLost()` from `ContextVk::handleDeviceLost()`. So thread A will think the renderer is not lost, and skip calling `handleDeviceLostNoLock()`.",
      "parentUuid": "be5040ea_75f12ab2",
      "range": {
        "startLine": 3901,
        "startChar": 9,
        "endLine": 3901,
        "endChar": 38
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37b47791_4f46904d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3901,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-31T03:14:10Z",
      "side": 1,
      "message": "But is that a problem? If thread A sees mRenderer-\u003eisDeviceLost() is false, then surely it didn\u0027t generate the device loss itself (so whatever commands it issued had run fine). Thread B marks the device lost, which can race and not get handled right away, ok, but it would the next time any API command is issued, no?",
      "parentUuid": "fc3bc876_9751656e",
      "range": {
        "startLine": 3901,
        "startChar": 9,
        "endLine": 3901,
        "endChar": 38
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8560334a_8fef4b44",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3916,
      "author": {
        "id": 1000050
      },
      "writtenOn": "2022-03-26T00:16:13Z",
      "side": 1,
      "message": "Can we make classes of mCommandProcessor and mCommandQueue thread safe? and then we can just remove mCommandQueueMutex from this RendererVK. And we don\u0027t need the defer handleDeiceLost logic. WDYT?",
      "range": {
        "startLine": 3916,
        "startChar": 8,
        "endLine": 3916,
        "endChar": 25
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5216d169_71d6f2d7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3916,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-03-26T01:54:09Z",
      "side": 1,
      "message": "Nack. The fact that locking is done outside the class has been an intentional design, although I\u0027m not clear on all the details. Jamie could fill you in.",
      "parentUuid": "8560334a_8fef4b44",
      "range": {
        "startLine": 3916,
        "startChar": 8,
        "endLine": 3916,
        "endChar": 25
      },
      "revId": "140f505bca2294bbb882cdc5f35d2c3bef2694be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}