{
  "comments": [
    {
      "key": {
        "uuid": "86259708_8778a451",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1581,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-18T19:54:40Z",
      "side": 1,
      "message": "how about you just pass an enum indicating the type of call to syncState instead of storing it as a dirty bit? Or make a separate syncState call that optionally accepts an argument if you don\u0027t want to mess with implementing a million overloads.",
      "range": {
        "startLine": 1581,
        "startChar": 25,
        "endLine": 1581,
        "endChar": 34
      },
      "revId": "04af7c375ab6b6f3a2b4fc52450df8e5428e7472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ebfbdc7_91393a2b",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1581,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-06-18T20:02:57Z",
      "side": 1,
      "message": "I thought about that, but then you\u0027d be passing one more argument around in every call for something that\u0027s called like once per frame. A syncStateGenMipmaps would mean forwarding to a syncStateImpl with the same caveat.\n\nI do feel dirty (no pun intended) for using the dirty bit for this. At the same time, I\u0027d also feel bad adding a parameter for a single use. This seemed the most (micro-)optimal to me.\n\nI\u0027m 50-50 on this and syncState(type::GenerateMipmaps), so your call.",
      "parentUuid": "86259708_8778a451",
      "range": {
        "startLine": 1581,
        "startChar": 25,
        "endLine": 1581,
        "endChar": 34
      },
      "revId": "04af7c375ab6b6f3a2b4fc52450df8e5428e7472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8e09975_64055df9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1581,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-18T20:55:04Z",
      "side": 1,
      "message": "Parameter is significantly better because (despite the boilerplate) it keeps the value on the stack instead of heap mem. Also less math instructions from dirty bit processing.",
      "parentUuid": "4ebfbdc7_91393a2b",
      "range": {
        "startLine": 1581,
        "startChar": 25,
        "endLine": 1581,
        "endChar": 34
      },
      "revId": "04af7c375ab6b6f3a2b4fc52450df8e5428e7472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3d6681b_9bece87a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1611,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-19T03:46:09Z",
      "side": 1,
      "message": "The \u0027+1\u0027 here looks like you\u0027re going past the max level.",
      "range": {
        "startLine": 1611,
        "startChar": 36,
        "endLine": 1611,
        "endChar": 69
      },
      "revId": "04af7c375ab6b6f3a2b4fc52450df8e5428e7472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "639ad24a_d89e2c38",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3318,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-19T03:46:09Z",
      "side": 1,
      "message": "Why is start inclusive while end is exclusive?   I would have expected both to be inclusive, which would also remove the need for the +1 when calling this function above.",
      "revId": "04af7c375ab6b6f3a2b4fc52450df8e5428e7472",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}