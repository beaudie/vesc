{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a2ad93db_1a927a9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-10-27T18:46:29Z",
      "side": 1,
      "message": "I tried to look at the swapchain changes, which seem fine for now.",
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6b4d1c3_2d49399e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T23:01:30Z",
      "side": 1,
      "message": "Okay, I think this might finally be good-to-go.\nWas seeing out-of-memory errors when running web_gl conformance tests. I believe I\u0027ve tracked that down to a missing RendererVk::cleanupGarbage call when using the CommandProcessor path. Without that it was possible for image and buffer allocations to be waiting for cleanup in the RendererVk::mSharedGarbage list.\n\nPTAL.",
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ceac8fd_c93f4311",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-27T23:05:07Z",
      "side": 1,
      "message": "Hey Courtney, I\u0027m super wary of landing this. Can we skip it and move to the one that improves perf?",
      "parentUuid": "d6b4d1c3_2d49399e",
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4038ea75_f861be3d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-10-27T18:46:29Z",
      "side": 1,
      "message": "I\u0027m not yet sure of the purpose and use of this method.  I see copying taking place.  Does any new memory need to be allocated, or is it okay that pointer values are copied?  Will the things those pointers point to stay around as long as needed?  What will free them and when?",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1446fed_985655a7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T19:12:36Z",
      "side": 1,
      "message": "Good questions. Need to do that in the case that other.pNext is nullptr.\nIf it\u0027s not nullptr, then we will overwrite this value in line 136.\nThe intent is that we will replace all the original data with a local copy so that the data lives long enough to be available for the Vulkan call that happens in the worker thread.",
      "parentUuid": "4038ea75_f861be3d",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3340f027_973471ea",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-27T19:58:08Z",
      "side": 1,
      "message": "Definitely a bug. The pNext chain is most definitely initialized with local variables, which will go away before the thread has a chance to look at them. This should really deep copy the chain.",
      "parentUuid": "b1446fed_985655a7",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6be72731_9ea2ebb7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T20:08:03Z",
      "side": 1,
      "message": "It will, that\u0027s what the while loop below does.\nThere is the possibility that the pNext is nullptr in which case that\u0027s all we have to copy.",
      "parentUuid": "3340f027_973471ea",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 36
      },
      "revId": "404b9c82cc99229b65713b24f58d1d48621aef7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}