{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4885be8b_24e37e50",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-21T16:31:16Z",
      "side": 1,
      "message": "The next layout transition from the image will use a srcStage of TRANSFER because of this.  Is that a problem?\n\nThere should be a test like this, but if not can you write one?\n\n- Generate mipmap (note that nvidia/amd doesn\u0027t use this path, you can set allowGenerateMipmapWithCompute to false for debugging)\n- Use the texture as sampled image with mipmap right away\n\nThis should generate:\n\n- Blit\n- Barrier TRANSFER-\u003eBOTTOM_OF_PIPE\n- Barrier TRANSFER-\u003eSHADER_READ_ONLY\n- Draw\n\nPlease enable syncval locally if VVL doesn\u0027t complain about a test like that.",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b9f63fa_a4ed1f90",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-21T17:09:50Z",
      "side": 1,
      "message": "Yes, most tests in MipmapTest.cpp uses exact like this, so we are already covered.",
      "parentUuid": "4885be8b_24e37e50",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b8032c8_f1c6d4b8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-21T17:34:33Z",
      "side": 1,
      "message": "Could you please give syncval a shot? Just in case we aren\u0027t missing something.",
      "parentUuid": "3b9f63fa_a4ed1f90",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e64dffe_70538b19",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-21T23:52:59Z",
      "side": 1,
      "message": "syncval actually produced a validation failure:\n\nRendererVk.cpp:364 (DebugUtilsMessenger): [ SYNC-HAZARD-WRITE_AFTER_WRITE ] Validation Error: [ SYNC-HAZARD-WRITE_AFTER_WRITE ] Object 0: handle \u003d 0x300000000030, type \u003d VK_OBJECT_TYPE_IMAGE; | MessageID \u003d 0xfdf9f5e1 | vkCmdPipelineBarrier: Hazard WRITE_AFTER_WRITE for image barrier 0 VkImage 0x300000000030[]. Access info (usage: SYNC_IMAGE_LAYOUT_TRANSITION, prior_usage: SYNC_IMAGE_LAYOUT_TRANSITION, write_barriers: 0, command: vkCmdPipelineBarrier, seq_no: 6, reset_no: 3).\n                            Object: 0x300000000030 (type \u003d Image(10))\n\nIt think there is a write after write hazard. There is no actual write happening. But because the very last imageBarrier call there is no read access, it think that\u0027s a write access and declared a WRW hazard. It really is not WRW involved.\n\nEither we ignore this. Or we can specify a read access (for example, VK_ACCESS_MEMORY_READ_BIT/VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, or VK_ACCESS_HOST_READ_BIT/VK_PIPELINE_STAGE_HOST_BIT) that is less harmful. \n\nGiven that there is no actual WRW, I would say just use VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT.",
      "parentUuid": "8b8032c8_f1c6d4b8",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db37e79_30c0a8b1",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-22T02:20:27Z",
      "side": 1,
      "message": "To be clear, there\u0027s no syncval error before the change? In that case, we should try to avoid introducing one.\n\nI\u0027m not sure what the best solution would be, but how about we introduce a new ImageLayout like GenerateMipmapWithBlit that could use multiple stages as src (TRANSFER and TOP) to account for the different levels of the image having had a barrier against different stages? We can basically fiddle with it until syncval is satisfied and the perf gain remains.\n\nBy the way, what do you mean by WRW? Do you mean WAW (write-after-write)?",
      "parentUuid": "5e64dffe_70538b19",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06bc6b45_3615fd6a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-22T03:56:57Z",
      "side": 1,
      "message": "Sorry, I mean WAW. Yes this WAW syncval failure is new with this CL. \n\nAdding a new ImageLayout adds complexity and an if check every time a barrier is inserted. If you really don\u0027t want to introduce one syncval failure, how about just use VK_ACCESS_MEMORY_READ_BIT/VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT pair? It does not trigger syncval failure and did change layout to TRANSFER_SRC. Almost certain the image will be used in fragment shader next, and all fragment shader will be depend on prior transfer stage to finish anyway, so it shouldn\u0027t introduce new bubbles in the pipe.",
      "parentUuid": "9db37e79_30c0a8b1",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8663bc4_d73cb0c6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-22T04:26:53Z",
      "side": 1,
      "message": "Unfortunately we can\u0027t rely on \"almost certain\" :( The real issue is that this code is issuing a barrier against an unknown future usage. I don\u0027t think there\u0027s any way to make this work as-is (we always have to meet the next usage until we can decide what should really be done).\n\nHow about this idea: let\u0027s skip the very last barrier, then set the ImageLayout to TransferDst instead of TransferSrc. Then on next usage it will assume the previous usage of the whole image was write-by-transfer (even though only the last mip actually is).",
      "parentUuid": "06bc6b45_3615fd6a",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7110f5c3_661b9368",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-22T04:43:31Z",
      "side": 1,
      "message": "I like this idea better.",
      "parentUuid": "f8663bc4_d73cb0c6",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d6c303b_333a458d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-26T19:21:58Z",
      "side": 1,
      "message": "TransferDst also wont work because the real issue here is to not leave the mipmap levels in mixed layout. If we have to pick a layout that is not transfer, the better bet is fragmentShaderRead, since that is most reasonable usage that you will expect after glGenerateMipmap call. PS3 changes all levels to ImageLayout::FragmentShaderReadOnly;",
      "parentUuid": "7110f5c3_661b9368",
      "range": {
        "startLine": 5150,
        "startChar": 34,
        "endLine": 5150,
        "endChar": 45
      },
      "revId": "1568f2a127f2fa4b54475d6747621dce916b7a9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}