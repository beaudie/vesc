{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d53f9258_19454608",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-26T02:29:09Z",
      "side": 1,
      "message": "nits:\n\n- We use \"Metal: \" as prefix, ANGLE is definitely redundant :)\n- This is a front-end fix, so the prefix is not necessary at all.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 14
      },
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72f92093_cabe11a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-27T18:27:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d53f9258_19454608",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 14
      },
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "309e8119_ad9141b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T03:29:07Z",
      "side": 1,
      "message": "Great find Kyle!\n\nThis looks good to me overall - let\u0027s see how the trybots look.\n",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9d6c188_e60e2103",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T05:16:54Z",
      "side": 1,
      "message": "Upon further reading of the extensions I think the exposure of these texture formats from the Metal backend is a bug. Quyen / Alexey, can you help explain how the Metal backend determines whether to advertise these texture formats?\n",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00554913_525c9749",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1416,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T05:16:54Z",
      "side": 1,
      "message": "Upon looking more deeply I\u0027m not sure this is correct.\n\nhttps://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_rg.txt exposes RED_EXT and RG_EXT as internal formats for textures, but R8_EXT and RG8_EXT are only exposed as valid renderbuffer internal formats.\n\nI think there\u0027s a problem with how the Metal backend advertises support for these sized formats.\n\nThis comment from the GL backend seems relevant:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/gl/formatutilsgl.cpp;l\u003d162?q\u003dformatutilsgl.cpp\n\nI don\u0027t fully understand how src/libANGLE/formatutils.cpp determines texture format support - is BuildInternalFormatInfoMap from src/libANGLE/renderer/gl/formatutilsgl.cpp used on all backends, not just the GL backend? Regardless, the Metal backend appears to be incorrectly advertising R8 and RG8 texture format support on ES2 contexts.",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15572d39_f1949501",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1416,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-10-26T09:53:44Z",
      "side": 1,
      "message": "dEQP has been changed quite recently to expect R8/RG8 texture support on ES2 contexts:\nhttps://github.com/KhronosGroup/VK-GL-CTS/pull/241\n\nArguably, the extension language remains ambiguous.\n\nGL map is used only for GL backends; src/libANGLE/formatutils.cpp has its own BuildInternalFormatInfoMap.",
      "parentUuid": "00554913_525c9749",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7b54938_a556caa0",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1416,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-10-26T13:27:58Z",
      "side": 1,
      "message": "\u003e I don\u0027t fully understand how src/libANGLE/formatutils.cpp determines texture format support\n\nTexture format support is determined by the backend filling in a TextureCap, and Caps.cpp determining support based on that. See for example DetermineRGTextureSupport. If metal/ is exposing the extensions incorrectly, it must be filling the TextureCaps wrong.",
      "parentUuid": "15572d39_f1949501",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5e0a2ab_4f5a911c",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1416,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T20:08:42Z",
      "side": 1,
      "message": "Alexey:\n\u003e dEQP has been changed quite recently to expect R8/RG8 texture support on ES2\n\u003e contexts:\n\u003e https://github.com/KhronosGroup/VK-GL-CTS/pull/241\n\u003e \n\u003e Arguably, the extension language remains ambiguous.\n\nOK, thanks for that pointer. I suspect that ANGLE\u0027s other backends are failing the support check for R8/RG8, and therefore not exposing EXT_texture_rg on ES2 contexts; that\u0027s why these tests are passing (or not running / being skipped) on the other backends.\n\nShabi:\n\u003e Texture format support is determined by the backend filling in a TextureCap, and\n\u003e Caps.cpp determining support based on that. See for example\n\u003e DetermineRGTextureSupport. If metal/ is exposing the extensions incorrectly, it\n\u003e must be filling the TextureCaps wrong.\n\nThanks for this pointer. The fact that both files have functions with the same name was confusing when looking through code search.",
      "parentUuid": "f7b54938_a556caa0",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65edd4c9_57660abf",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1422,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T03:29:07Z",
      "side": 1,
      "message": "Would you consider moving the SR8 and SRG8 case statement down, just above the GL_SRGB_EXT case statement? It would keep the related formats (RED/RG, R8/RG8) closer together.",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "311194df_456fd80d",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1425,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T05:16:54Z",
      "side": 1,
      "message": "Upon looking more deeply I\u0027m not sure this is correct.\n\nhttps://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_R8.txt and https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_sRGB_RG8.txt are only defined against ES3 contexts. These texture formats shouldn\u0027t be being advertised on ES2 contexts.",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7dfb14b_fef92240",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1425,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-10-26T08:35:12Z",
      "side": 1,
      "message": "Confirmed. R8_SRGB and RG8_SRGB extensions should be added there and therefore omitted from the ES2 validation:\nhttps://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/Context.cpp#3465",
      "parentUuid": "311194df_456fd80d",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bc3cda8_3802a5e6",
        "filename": "src/libANGLE/validationES2.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1425,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-26T20:21:39Z",
      "side": 1,
      "message": "Thanks for this pointer Alexey. It strongly seems that the format tables have to be made per-context rather than per-display so they have a knowledge of the associated context version. If they are, then this problem will basically disappear and we won\u0027t have to filter out those extensions in Context.cpp.",
      "parentUuid": "e7dfb14b_fef92240",
      "revId": "3981ea34b127d7c0ec8e0929bb0facaac7ade049",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}