{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "17bdbe6b_5721dbf4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 541,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "```suggestion\n    bool anyAttachmentWithColorspaceOverride       \u003d false;\n```",
      "range": {
        "startLine": 541,
        "startChar": 9,
        "endLine": 541,
        "endChar": 42
      },
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4fee05a_2f2bdb69",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 541,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17bdbe6b_5721dbf4",
      "range": {
        "startLine": 541,
        "startChar": 9,
        "endLine": 541,
        "endChar": 42
      },
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f2608ad_b0d2a044",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "Is this logically correct? What happens if I have a texture, bind it to two different framebuffers, then set the sRGB write control modes to two different states in the framebuffers? Given that these RTs update the ImageViewHelper class (shared between the framebuffers), it looks like state is leaked from one FBO to the other.\n\nLike, take this test:\n\n* Setup texture\n* Setup FBO 1 using texture, configure sRGB write control mode to some state\n* Setup FBO 2 using texture, configure sRGB write control mode to another state\n* Draw with FBO 2\n* Draw with FBO 1\n* Verify write through FBO2 used second state, and write through FBO1 used first state\n\nDoes the test pass?",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8829c622_9dfa8b8f",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "sRGB write control mode is context state not framebuffer state, so toggling context state should affect all fbos",
      "parentUuid": "1f2608ad_b0d2a044",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0014232e_3596c9bb",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T17:12:15Z",
      "side": 1,
      "message": "Ok, replace FBO with Context. You can create a multi-threaded test for it with the above sequence. Before drawing in context1/FBO1, you\u0027d need to use sync objects and rebind the texture, but I don\u0027t believe any of that would update the ImageViewHelper.",
      "parentUuid": "8829c622_9dfa8b8f",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04adb95b_75b5bdba",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T19:00:29Z",
      "side": 1,
      "message": "\u003e You can create a multi-threaded test for it with the above sequence\n\nif you have the same texture attached to different FBOs, even with sync objects there is no way to address this with current code. We need to introduce something like a framebuffer \u003c-\u003e rendertarget map in texturevk\n\nthoughts?",
      "parentUuid": "0014232e_3596c9bb",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "411867f9_05cf903d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T20:31:45Z",
      "side": 1,
      "message": "\u003e Before drawing in context1/FBO1, you\u0027d need to use sync objects and rebind the texture\n\ni missed the \"rebind the texture\" suggestion. did you mean rebind as color attachment to fbo in context1 even though there was no state change in context1 or a state change in the fbo in context1?",
      "parentUuid": "04adb95b_75b5bdba",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bce8b79_e5162189",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-17T15:29:35Z",
      "side": 1,
      "message": "I think the spec requires a rebind of the texture to the context, not to the framebuffer. FWIW, we don\u0027t do anything on bind, so of course that doesn\u0027t do anything for us.\n\n\u003e there is no way to address this with current code. We need to introduce something like a framebuffer \u003c-\u003e rendertarget map in texturevk\n\nNo that\u0027d be too complicated. But also exactly why I mentioned the above test. I think modifying the image views based on a per-context or per-framebuffer state is just going to be problematic.\n\nProbably the right answer is to have ImageViewHelper actually get the state that affects the view and pick the right one, basically holding all possible views, instead of being affected by state. Yes, that means even more image views held by this class!",
      "parentUuid": "411867f9_05cf903d",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "724c950d_933c3c4f",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-17T16:18:07Z",
      "side": 1,
      "message": "\u003e I think modifying the image views based on a per-context or per-framebuffer state is just going to be problematic\n\nthis is true if it is not texture\u0027s state. thankfully write control is the only such state, all other colorspace state like decode and override are texture state\n\nso, we just need special handling for writecontrol and building on your comment -\n\u003e we don\u0027t do anything on bind\n\nwe could enhance this to hook into observer interface which marks the observing framebuffer\u0027s `DIRTY_BIT_FRAMEBUFFER_SRGB_WRITE_CONTROL_MODE` bit as dirty so a subsequent draw will do the right thing",
      "parentUuid": "4bce8b79_e5162189",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75644e4f_f9a47391",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-17T16:22:15Z",
      "side": 1,
      "message": "That\u0027s a whole can of worms TBH. There might be things we need to do on bind, but for this particular problem, I think you\u0027re much better off just adding another array-ness to the relevant views in ImageViewHelper to select the views based on the srgb write mode.",
      "parentUuid": "724c950d_933c3c4f",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c48600_1f0653e9",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-17T21:12:56Z",
      "side": 1,
      "message": "so to avoid duplication, do i remove the `srgbWriteControl` member from `mColorspaceState` and `mWriteColorspace` from `ImageViewHelper` class? Also add back `srgbWriteControl` parameter to all `get...DrawImageView...` calls?\n\nhave i understood your suggestion correctly?",
      "parentUuid": "75644e4f_f9a47391",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd5f9b46_6bb6bee0",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-17T21:18:36Z",
      "side": 1,
      "message": "uggh, this touches a lot of unrelated code like `DescriptorSetDescBuilder::updateInputAttachments` since it gets imageviews from rendertarget\n\nfor clarity - this multi-context use is an issue even before my changes, right?",
      "parentUuid": "f4c48600_1f0653e9",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "183afb3c_f5554ecc",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-17T22:27:19Z",
      "side": 1,
      "message": "this is the test i am working with to check behavior, i am reusing texture between the 2 contexts -\n```\n// Make current context1\nEXPECT_EGL_TRUE(eglMakeCurrent(dpy, surface, surface, context1));\nEXPECT_EGL_SUCCESS();\n\nGLTexture texture;\nglBindTexture(GL_TEXTURE_2D, texture);\nglTexImage2D(GL_TEXTURE_2D, 0, GL_SRGB_ALPHA_EXT, 1, 1, 0, GL_SRGB_ALPHA_EXT, GL_UNSIGNED_BYTE,\n             nullptr);\n\nGLFramebuffer framebuffer1;\nglBindFramebuffer(GL_FRAMEBUFFER, framebuffer1);\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0);\n\nGLuint program \u003d CompileProgram(essl1_shaders::vs::Simple(), essl1_shaders::fs::UniformColor());\nASSERT_NE(0u, program);\n\nGLint colorLocation \u003d glGetUniformLocation(program, essl1_shaders::ColorUniform());\nASSERT_NE(-1, colorLocation);\n\nglUseProgram(program);\nglUniform4fv(colorLocation, 1, inputColor.toNormalizedVector().data());\n\ndrawQuad(program, essl1_shaders::PositionAttrib(), 0.5f);\nEXPECT_PIXEL_COLOR_NEAR(0, 0, encodedToSrgbColor, 1.0);\n\n// Make current context2\nEXPECT_EGL_TRUE(eglMakeCurrent(dpy, surface, surface, context2));\nEXPECT_EGL_SUCCESS();\n\nGLFramebuffer framebuffer2;\nglBindTexture(GL_TEXTURE_2D, texture);\nglBindFramebuffer(GL_FRAMEBUFFER, framebuffer2);\nglFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture, 0);\ndrawQuad(program, essl1_shaders::PositionAttrib(), 0.5f);\nEXPECT_PIXEL_COLOR_NEAR(0, 0, encodedToSrgbColor, 1.0);\n\n// Make current context1\nEXPECT_EGL_TRUE(eglMakeCurrent(dpy, surface, surface, context1));\nEXPECT_EGL_SUCCESS();\n\nglDisable(GL_FRAMEBUFFER_SRGB_EXT);\ndrawQuad(program, essl1_shaders::PositionAttrib(), 0.5f);\nEXPECT_PIXEL_COLOR_NEAR(0, 0, inputColor, 1.0);\n\n// Make current context2\nEXPECT_EGL_TRUE(eglMakeCurrent(dpy, surface, surface, context2));\nEXPECT_EGL_SUCCESS();\n\ndrawQuad(program, essl1_shaders::PositionAttrib(), 0.5f);\nEXPECT_PIXEL_COLOR_NEAR(0, 0, encodedToSrgbColor, 1.0);\n```",
      "parentUuid": "fd5f9b46_6bb6bee0",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3e95821_373c6fb8",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-17T22:50:05Z",
      "side": 1,
      "message": "we pass this test, comment tagged [1] notes how we end up getting the correct imageview",
      "parentUuid": "183afb3c_f5554ecc",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cacfe61_a5170b23",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-18T14:02:20Z",
      "side": 1,
      "message": "Thanks for checking, please include the test for posterity.",
      "parentUuid": "a3e95821_373c6fb8",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97645ccd_dc2579d1",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 2304,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-18T16:14:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cacfe61_a5170b23",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b99e27a_18cd98bd",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3448,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "Could I please ask for some state-change tests? That is intended to make sure caches are updated accordingly. Basically, for each of the states in `ColorspaceState` which can be toggled, need a test like:\n\n* Draw with said state disabled\n* Enable the state and draw\n* Disable the state and draw\n* Verify\n\nThe draw calls could be to different parts of framebuffer (selected with glViewport/glScissor) so verify can be in the end. For `hasStaticTexelFetchAccess`, can use two different programs, with and without `texelFetch`, instead of a state change.",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c31220_e7827799",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3448,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "working on it",
      "parentUuid": "1b99e27a_18cd98bd",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6469e7ae_cdbd60ee",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3448,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-18T16:14:47Z",
      "side": 1,
      "message": "3 states can be toggled -\n1. srgbDecode - SRGBTextureTest.SRGBDecodeTextureParameter\n2. srgbOverride - SRGBTextureTest.SRGBOverrideTextureParameter\n3. srgbWriteControl - MultithreadingTestES3.SharedSrgbTextureMultipleContexts\n\ntest for (srgbDecode + srgbOverride) combo - SRGBTextureTestES3. SRGBDecodeOverridePriority",
      "parentUuid": "43c31220_e7827799",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "660e5ba3_92744e4a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3723,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "`mImageCreateFlags` is supposed to be initialized with `mImage-\u003egetCreateFlags()`. See `TextureVk::setImageHelper`.\n\nDid you see a failure here? Could this be asserted instead?",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afed0599_a0c52908",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3723,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "\u003e mImageCreateFlags is supposed to be initialized with mImage-\u003egetCreateFlags()\n\nthat is true for an EGLImage target texture which will inherit the flags from `ImageHelper` but an EGLImage source texture will not. This was causing an unnecessary respecifyStorage / refreshImageViews call on the texture during syncState on platforms that support `VK_KHR_image_format_list`",
      "parentUuid": "660e5ba3_92744e4a",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a66800e6_66834c69",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3723,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-18T16:14:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afed0599_a0c52908",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "860ce6fc_b1971657",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3786,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "Could you please add a test for this if there isn\u0027t one already?",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af68847c_926f8a8b",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3786,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "working on it",
      "parentUuid": "860ce6fc_b1971657",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715f7647_bcec30aa",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3786,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-18T16:14:47Z",
      "side": 1,
      "message": "tricky, looks like this path is only taken for read pixels with compute. Do you know if there were specific tests added to validate that path?",
      "parentUuid": "af68847c_926f8a8b",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0979a0a_b205b8fd",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 12020,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "nit: Use a local variable to avoid duplicating the logic for read/write while the values are identical. Later, initialize the read/write members with that local variable before further adjustment.",
      "range": {
        "startLine": 12005,
        "startChar": 0,
        "endLine": 12020,
        "endChar": 5
      },
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcc9d618_83243dd6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 12020,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0979a0a_b205b8fd",
      "range": {
        "startLine": 12005,
        "startChar": 0,
        "endLine": 12020,
        "endChar": 5
      },
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d4fa4f_e57588fa",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T04:13:12Z",
      "side": 1,
      "message": "No renderer? These fail on the platforms regardless of GL, Vulkan, D3D?",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f421796_68464cd1",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-16T16:28:19Z",
      "side": 1,
      "message": "on windows there are some that fail with d3d and some with vulkan, the rest of the backends are skipped. although im not sure why `Texture3DCopy` tests are being flaky, those tests have nothing to do with sRGB",
      "parentUuid": "10d4fa4f_e57588fa",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b1cdb3c_ca73b433",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-16T17:13:29Z",
      "side": 1,
      "message": "Ok, it\u0027d be preferable to skip these separately by renderer, as the fix (and subsequent unsuppress) is likely to be different for each.",
      "parentUuid": "2f421796_68464cd1",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f5e86b2_b3d9cd57",
        "filename": "src/tests/angle_end2end_tests_expectations.txt",
        "patchSetId": 20
      },
      "lineNbr": 1566,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-18T16:14:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b1cdb3c_ca73b433",
      "revId": "fe7ecea69c0bab1eda90e9a794209b7319b05e5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}