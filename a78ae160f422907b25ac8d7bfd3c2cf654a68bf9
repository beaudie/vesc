{
  "comments": [
    {
      "key": {
        "uuid": "ee33a85b_86c08b1d",
        "filename": "src/compiler/translator/VariablePacker.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2017-08-11T10:02:13Z",
      "side": 1,
      "message": "Would be nicer to not to have to template this function, but since the ShaderLang API is passing vectors of objects rather than vectors of pointers I couldn\u0027t come up with a better solution. Do you think this is okay as it is?",
      "revId": "a78ae160f422907b25ac8d7bfd3c2cf654a68bf9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ac60300_c93e077e",
        "filename": "src/compiler/translator/VariablePacker.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-08-11T15:54:03Z",
      "side": 1,
      "message": "Approach looks ok, since the template almost immediately defers to a non-template function. However it seems that the code could be simplified more:\n\n - GetNumComponentsPerRow and GetNumRows can go in utils.h/cpp\n - The only remaining entry point for this file is checkVariablesWithinPackingLimits so we can do the same transform as we\u0027ve done for other passes where we hide the implementation details in the .cpp file.\n - T is only used as Uniform or ShaderVariable so we can either have declaration of the template in the header and instantiations in the .cpp file, or overloaded function for each case (and a tiny tiny bit of code duplication)",
      "parentUuid": "ee33a85b_86c08b1d",
      "revId": "a78ae160f422907b25ac8d7bfd3c2cf654a68bf9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}