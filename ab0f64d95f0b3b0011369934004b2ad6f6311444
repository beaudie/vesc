{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "efe06d4a_f0cbd78f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-28T23:57:10Z",
      "side": 1,
      "message": "LGTM",
      "revId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e686eed_2fd3c0ba",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-11-30T00:56:34Z",
      "side": 1,
      "message": "why we can\u0027t do the nullptr check for `Semaphore*` here:\n```\nif (signalSemaphore !\u003d nullptr)\n{\n   ...\n}\n```",
      "revId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a702806_529f902c",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-30T02:48:48Z",
      "side": 1,
      "message": "Because `signalSemaphore` is no longer a pointer. It\u0027s a Vulkan handle now.",
      "parentUuid": "6e686eed_2fd3c0ba",
      "revId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8edef822_c20ae0a5",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-11-30T18:12:16Z",
      "side": 1,
      "message": "Thank you Shabi. I meant why we can\u0027t keep signalSemaphore as a Semaphore pointer, and do the nullptr check.",
      "parentUuid": "5a702806_529f902c",
      "revId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84823022_fe7a4b2b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-30T19:14:28Z",
      "side": 1,
      "message": "Typically, we pass whatever to functions by pointers because they consume them and don\u0027t keep a reference after that. So if the caller e.g. uses a local variable and passes in the pointer, it\u0027s ok. If the callee wants to remember what was given, either it has to copy it (Method 1), or the caller has to make sure the pointer lives after the call (Method 2).\n\nIn this case, there are two possible callers to this function:\n\n- Without asyncCommandQueue, there is a chain of calls going through CommandQueue and ending up here. In that case, using a pointer is fine.\n- With asyncCommandQueue, the caller\u0027s data gets copied to a \"task\" structure, and is later referenced by the thread.\n\nIn the latter case, we used to keep a pointer in the task structure, which worked because the passed in pointer lived in SurfaceVk in a fixed array (i.e. Method 2). In this change, that\u0027s no longer true so the thread can no longer reference the semaphore through a pointer. Instead, the Vulkan handle is copied (i.e. Method 1)",
      "parentUuid": "8edef822_c20ae0a5",
      "revId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0f64d95f0b3b0011369934004b2ad6f6311444",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}