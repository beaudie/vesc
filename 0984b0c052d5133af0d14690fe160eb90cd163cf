{
  "comments": [
    {
      "key": {
        "uuid": "3eb0e9f9_c0906584",
        "filename": "src/libANGLE/Constants.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1144534
      },
      "writtenOn": "2017-04-26T10:25:54Z",
      "side": 1,
      "message": "This is used for defining DIRTY_BIT_SAMPLE_MASK_WORD_0 and DIRTY_BIT_SAMPLE_MASK_WORD_MAX \u003d DIRTY_BIT_SAMPLE_MASK_WORD_0 + MAX_SAMPLE_MASK_WORDS in src/libANGLE/State.h. We need a constant for max sample mask words at compile time. \n\nWhen querying GL_MAX_SAMPLE_MASK_WORDS, we return the minimum value of MAX_SAMPLE_MASK_WORDS defined here and the value returned by driver.",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c725e15b_c644acc4",
        "filename": "src/libANGLE/Constants.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-04-27T01:41:50Z",
      "side": 1,
      "message": "I see SPEC says the minimum MAX SAMPLE MASK WORDS is 1, I just wonder if \u00278\u0027 is the best value in this case.",
      "parentUuid": "3eb0e9f9_c0906584",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1cef197_98a25d37",
        "filename": "src/libANGLE/Constants.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1144534
      },
      "writtenOn": "2017-04-27T05:15:37Z",
      "side": 1,
      "message": "I used this constant to hold places for DIRTY_BIT_SAMPLE_MASK_WORD_* which cannot be allocated at runtime. The user will get the minimum value of this const and the value driver returns. \n\nI don\u0027t know clearly what is a reasonable value. So I just set it as larger than what I see in driver: 1 for Linux Mesa and AMD, 2 for Linux NVIDIA. Maybe I can set it to 2.",
      "parentUuid": "c725e15b_c644acc4",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7abdb084_0cef02ed",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 1
      },
      "lineNbr": 697,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-04-27T01:41:50Z",
      "side": 1,
      "message": "Shall we follow the style above?",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61c5d98b_51a5e36d",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 1
      },
      "lineNbr": 697,
      "author": {
        "id": 1144534
      },
      "writtenOn": "2017-04-27T05:15:37Z",
      "side": 1,
      "message": "I followed the style above, but git cl format changed them to current formating style.",
      "parentUuid": "7abdb084_0cef02ed",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "406f0b2e_9b7e6eae",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-04-27T01:41:50Z",
      "side": 1,
      "message": "Same here",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90ab400e_791a650f",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1662,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-04-27T01:41:50Z",
      "side": 1,
      "message": "Same here",
      "revId": "0984b0c052d5133af0d14690fe160eb90cd163cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}