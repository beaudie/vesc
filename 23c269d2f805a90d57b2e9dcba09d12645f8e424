{
  "comments": [
    {
      "key": {
        "uuid": "ea5bde5e_b46ba61c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-12T02:04:23Z",
      "side": 1,
      "message": "This could stay in `linkImpl`, you wouldn\u0027t need to save/load `mStorageBlockBindingsOffset` either.",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ebfbdf2_ea4aa08a",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-12T13:20:42Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ea5bde5e_b46ba61c",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4e830d8_74212dd5",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-12T16:34:41Z",
      "side": 1,
      "message": "why unnecessarily re-compute a value when you can serialize it? isn\u0027t that more inline with the intent of this extension?",
      "parentUuid": "6ebfbdf2_ea4aa08a",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d169072_b68b9c70",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-12T16:45:27Z",
      "side": 1,
      "message": "Seems better to me to not store things in the binary that aren\u0027t necessary. Less state to keep track of.",
      "parentUuid": "a4e830d8_74212dd5",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab9637c1_13fa5cf5",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-12T16:49:23Z",
      "side": 1,
      "message": "To me it seems like this extension is precisely intended to store as much state as possible so as to avoid as many recomputations as possible on subsequent reuse\n\nthough if you guys feel strongly about it i can revert it back to recomputing all the time",
      "parentUuid": "5d169072_b68b9c70",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19712717_e62329fa",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-12T17:16:17Z",
      "side": 1,
      "message": "Not a big deal for me. In this particular case, it\u0027s cheaper to actually recalculate these (they are basically `vector::size()` calls) than load/store them and have the binary be larger.",
      "parentUuid": "ab9637c1_13fa5cf5",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cdf4fb6_04908d86",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-15T13:11:09Z",
      "side": 1,
      "message": "Yes, I think it is more consistent with the current design in ANGLE to not store values that can be recalculated. I don\u0027t think extensions generally specify how they should be implemented but rather they specify a certain set of functionality.\n\nThe less in the binary the better. Less to remember to keep track of.",
      "parentUuid": "19712717_e62329fa",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 27
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31aba24_c318e85c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-12T13:20:42Z",
      "side": 1,
      "message": "Ideall we could only support one method of calling initDefaultUniformBlocks. If initting works in load with mState.getUniforms, it should work here as well. Can you see if you can try that? Then also you might not need to move the code out of linkImpl.",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 380,
        "endChar": 0
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5813b405_6ae2ef66",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-12T16:34:41Z",
      "side": 1,
      "message": "so basically use mstate.getUniforms() for both link and load ops, yup, seems reasonable to try out",
      "parentUuid": "f31aba24_c318e85c",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 380,
        "endChar": 0
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12f7008_92cf99e8",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-07-12T02:04:23Z",
      "side": 1,
      "message": "Make this a pointer to vector, to avoid unnecessary copies.\n\n`ProgramVk::load` could have its `ShaderMap\u003cvector *\u003e`\u0027s elements point to elements of a local `ShaderMap\u003cvector\u003e` that get filled as they do already.",
      "range": {
        "startLine": 535,
        "startChar": 24,
        "endLine": 535,
        "endChar": 48
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6510b43c_1f03278a",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-07-12T16:34:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a12f7008_92cf99e8",
      "range": {
        "startLine": 535,
        "startChar": 24,
        "endLine": 535,
        "endChar": 48
      },
      "revId": "23c269d2f805a90d57b2e9dcba09d12645f8e424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}