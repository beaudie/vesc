{
  "comments": [
    {
      "key": {
        "uuid": "c1a2f05e_c4ef663b",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-01T15:09:51Z",
      "side": 1,
      "message": "I don\u0027t think setting the global mutex here will work.  There many be many displays (there are many during runs of our end2end tests) and they will all overwrite the global mutex and if any one is terminated then the global mutex will be left as null for the other displays.\n\nLog messages are also generated before display creation if events are turned on, the EVENT macro would be called in eglQueryString, eglGetDisplay or any other function that is called before a display is initialized.\n\nI\u0027m not sure what the correct way to create a global mutex without using a global static.  It could be a global pointer that is checked for null and then allocated on each message but this could also cause races and leak but this at least be correct runtime behaviour.",
      "revId": "6876fc0ab121ba1acecf59a1e92e8bce3bb3a2d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f272585_08a1773a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-01T15:18:23Z",
      "side": 1,
      "message": "Can probably just use some if statements. The EGL calls should be internally synchronized (i.e. through another mutex) so this call should be exclusive. Inside the ~LogMessage should also not race against this line of code. Then it should be safe inside ~LogMessage to check if (global mutex).",
      "parentUuid": "c1a2f05e_c4ef663b",
      "revId": "6876fc0ab121ba1acecf59a1e92e8bce3bb3a2d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53d6ee0f_9121f44f",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2019-02-08T12:24:35Z",
      "side": 1,
      "message": "Jamie, do you think we can use the global static mutex for simplicity here before working out a more graceful solution? After all it\u0027s much simpler, and logically correct. It seems Android log system also uses such global static mutex. https://android.googlesource.com/platform/system/core/+/master/liblog/logger_lock.cpp#28",
      "parentUuid": "5f272585_08a1773a",
      "revId": "6876fc0ab121ba1acecf59a1e92e8bce3bb3a2d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e82f28f5_ad5bcc2a",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 466,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-08T14:15:00Z",
      "side": 1,
      "message": "We aren\u0027t allowed to add static initializers in Chromium code. Or else there is a bot that will fail and we\u0027ll need to revert this change.\n\nI think just adding some ifs in debug.cpp will be sufficient.",
      "parentUuid": "53d6ee0f_9121f44f",
      "revId": "6876fc0ab121ba1acecf59a1e92e8bce3bb3a2d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}