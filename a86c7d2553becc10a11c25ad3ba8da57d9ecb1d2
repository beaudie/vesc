{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4781995e_848c4c44",
        "filename": "src/compiler/translator/ValidateTypeSizeLimitations.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1545138
      },
      "writtenOn": "2023-07-14T17:58:35Z",
      "side": 1,
      "message": "I think this can still overflow. Maybe add a check before the addition?\n\n```\nif (mTotalPrivateVariableSize + layoutEncoder.getCurrentOffset() \u003c mTotalPrivateVariableSize) {\n    error(...);\n    return false;\n}\n```\n\nor use a CheckedNumeric type to ensure the value doesn\u0027t overflow?",
      "revId": "a86c7d2553becc10a11c25ad3ba8da57d9ecb1d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e39478b_dc8eb8a8",
        "filename": "src/compiler/translator/ValidateTypeSizeLimitations.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-07-14T18:21:05Z",
      "side": 1,
      "message": "ANGLE\u0027s shader translator has access to `angle::base::CheckedNumeric`; it\u0027s used elsewhere in the source base. It should be used instead of ad-hoc checks.",
      "parentUuid": "4781995e_848c4c44",
      "revId": "a86c7d2553becc10a11c25ad3ba8da57d9ecb1d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "585b0ca1_5cdd2531",
        "filename": "src/compiler/translator/ValidateTypeSizeLimitations.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1545138
      },
      "writtenOn": "2023-07-14T18:29:37Z",
      "side": 1,
      "message": "Great! I would change mTotalPrivateVariablesSize to type `angle::base::CheckedNumeric\u003csize_t\u003e` and ensure it is still valid to check for overflow.",
      "parentUuid": "3e39478b_dc8eb8a8",
      "revId": "a86c7d2553becc10a11c25ad3ba8da57d9ecb1d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538f389d_2957c2ce",
        "filename": "src/compiler/translator/ValidateTypeSizeLimitations.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-17T14:10:25Z",
      "side": 1,
      "message": "It can still overflow, but isn\u0027t it already safe? If the size being added (`layoutEncoder.getCurrentOffset()`) is large, compilation fails in the previous if. If it\u0027s not large, this summation can\u0027t overflow before `validateTotalPrivateVariableSize()` fails compilation. In the end, this could overflow as much as it wants, compilation has already failed.\n\nBut ok, I\u0027ll change it to checked math.",
      "parentUuid": "585b0ca1_5cdd2531",
      "revId": "a86c7d2553becc10a11c25ad3ba8da57d9ecb1d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}