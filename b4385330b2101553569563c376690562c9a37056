{
  "comments": [
    {
      "key": {
        "uuid": "6268c2b9_9df2a756",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "If all you are interested is if there are any active shaders, it\u0027s better to use (indirectly) the bitset\u0027s any() instead of count(). `any()` is a simple test against 0, `count()` relies on intrinsics which aren\u0027t universally available (or fallback to multiple instructions for example when counting uint64_t bits on a 32-bit system).\n\nAlso, the loops here go over \"linked\" resources, so they are all necessarily active in some stage. Is this not valid for PPOs? Shouldn\u0027t PPOs call these functions after they prune inactive resources?\n\nAre we able to ASSERT instead that this is always true?",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "912dcd05_08911a0d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T21:05:25Z",
      "side": 1,
      "message": "\u003e If all you are interested is if there are any active shaders, it\u0027s better to use (indirectly) the bitset\u0027s any() instead of count().\n\nDone.\n\n\u003e Are we able to ASSERT instead that this is always true?\n\nI know I was hitting cases where we were adding bindings for resources that were not actually active, which meant we consumed binding values that were never actually used.   This leads to errors later when we are determining how many bindings to allocate/update based on what\u0027s active vs what we are actually using and overflowing our lists.   \n\nUnfortunately, I can\u0027t remember any specifics, so I\u0027ll add the ASSERT and see if CQ flushes anything out.   This may have been a \u0027fix\u0027 that turned out (or will turn out) not to be necessary once the real problem is fixed somewhere else.",
      "parentUuid": "6268c2b9_9df2a756",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82718318_49c6ab72",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T03:15:16Z",
      "side": 1,
      "message": "I think it would be worthwhile to fix the real problem, both as a matter of efficiency (not waste a binding) and conformance (respecting the resource limits).\n\nWould be ok as a follow up though.",
      "parentUuid": "912dcd05_08911a0d",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cc2c7e7_405f46e0",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-25T21:30:48Z",
      "side": 1,
      "message": "I was finally able to play with this again and find a test that fails when changing this to an assert.\n\n[ RUN      ] dEQP.GLES31/functional_ssbo_layout_random_all_shared_buffer_42\ndEQP-GLES31.functional.ssbo.layout.random.all_shared_buffer.42\n../../src/tests/deqp_support/angle_deqp_gtest.cpp:45: Failure\nFailed\nAssignInterfaceBlockBindings(738): \t! Assert failed in AssignInterfaceBlockBindings (../../src/libANGLE/renderer/glslang_wrapper_utils.cpp:738): block.activeShaders().any()\nFATAL: AssignInterfaceBlockBindings(738): \t! Assert failed in AssignInterfaceBlockBindings (../../src/libANGLE/renderer/glslang_wrapper_utils.cpp:738): block.activeShaders().any()\n\nHere is the compute shader:\n\n\t#version 310 es\n\tlayout(local_size_x \u003d 1) in;\n\n\tlayout(std140, binding \u003d 0) buffer BlockB\n\t{\n\t\thighp vec4 a;\n\t} blockB;\n\n\tlayout(binding \u003d 0) uniform atomic_uint ac_numPassed;\n\n\tbool compare_float    (highp float a, highp float b)  { return abs(a - b) \u003c 0.05; }\n\tbool compare_vec4     (highp vec4 a, highp vec4 b)    { return compare_float(a.x, b.x)\u0026\u0026compare_float(a.y, b.y)\u0026\u0026compare_float(a.z, b.z)\u0026\u0026compare_float(a.w, b.w); }\n\n\tvoid main (void)\n\t{\n\t\tbool allOk \u003d true;\n\t\tif (allOk)\n\t\t\tatomicCounterIncrement(ac_numPassed);\n\n\t}\n\nLooking at the block that\u0027s hitting the assert:\n\n\tblock \u003d {const gl::InterfaceBlock \u0026} \n\t arrayElement \u003d {unsigned int} 0\n\t firstFieldArraySize \u003d {unsigned int} 1\n\t gl::ShaderVariableBuffer \u003d {gl::ShaderVariableBuffer} \n\t  binding \u003d {int} 0\n\t  dataSize \u003d {unsigned int} 16\n\t  gl::ActiveVariable \u003d {gl::ActiveVariable} \n\t   mActiveUseBits \u003d {gl::ShaderBitSet} \n\t\tmBits \u003d {unsigned char} 0 \u0027\\000\u0027  \u003c\u003c--- not active for any shaders\n\t  memberIndexes \u003d {std::__debug::vector\u003cunsigned int, std::allocator\u003e} \n\t isArray \u003d {bool} false\n\t mappedName \u003d {std::__cxx11::string} \"_uBlockB\"\n\t name \u003d {std::__cxx11::string} \"BlockB\"\n\nSo we can see that \"blockB\" is not active, but it\u0027s still listed in the list of interface blocks so we can\u0027t assert that they are all active.",
      "parentUuid": "82718318_49c6ab72",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a059be0_0e9031f8",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-27T10:10:19Z",
      "side": 1,
      "message": "A bug in CollectVariables? If the block is not active, it shouldn\u0027t be collected in the first place (I think).\n\nBy the way, I expect the translated source doesn\u0027t have blockB (otherwise that\u0027s a different bug).\n\n---\n\nAgain, I\u0027m not blocking this change on it, but if you get a chance to figure out why blockB is being collected by the translator and what\u0027s worse, why is it appearing in the list of linked interface blocks, it would be nice.",
      "parentUuid": "5cc2c7e7_405f46e0",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24b4752c_01927b41",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-27T15:25:44Z",
      "side": 1,
      "message": "Seems like a bug. Can you file something and leave a TODO with the bug link to fix it?\n\nReference: look in the 3.1 spec for \"std140\"\n\n\u003e All members of a named uniform block declared with a shared or std140\n\u003e layout qualifier are considered active\"\n\n-\u003e this block should be active.\n\nPlease also leave some TODO\u0027s with bug links where we would need to change the code to unify the descriptor sets between programs.",
      "parentUuid": "8a059be0_0e9031f8",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f85e7e3_2a813b2f",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 733,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-27T23:45:27Z",
      "side": 1,
      "message": "I\u0027ve opened anglebug.com/4523 to track the std140 issue.\n\nI\u0027ve also added some TODOs for anglebug.com/4512 to the functions that assign the binding values.",
      "parentUuid": "24b4752c_01927b41",
      "range": {
        "startLine": 733,
        "startChar": 22,
        "endLine": 733,
        "endChar": 39
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "576e2480_7cc67f62",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 774,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "Change of semantic here. The binding was previously incremented regardless of whether the `if` was true or not. Is this change intentional?\n\nThe change may actually be good if I\u0027m not mistaken, so just checking to make sure it\u0027s intended. You could make a separate CL with it to land before the change. You can also write a test with two image arrays, and make sure that they are given bindings 0 and 1, instead of 0 and FirstArraySize.",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b1a6e86_66b1be9e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 774,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T21:05:25Z",
      "side": 1,
      "message": "My understanding is that the binding value is per variable, not per variable array entry (which is why this works), but I\u0027m far from an expert.   Admittedly, I haven\u0027t checked any specs to verify that.\n\nSimilar to above, I can try a CQ run with the old version and see how things look.",
      "parentUuid": "576e2480_7cc67f62",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e36a5ed0_7825a1b8",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 774,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T03:17:28Z",
      "side": 1,
      "message": "Yes that\u0027s correct, which is what makes me think this change is actually good. I suggest making this (and the fix to sampler bindings below) a separate CL so it can get its own commit message.",
      "parentUuid": "6b1a6e86_66b1be9e",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8c65e49_0c7f3814",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 774,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T00:53:23Z",
      "side": 1,
      "message": "I\u0027m going to keep this change in this CL unless there\u0027s a particular reason it needs to be split out.   This change can\u0027t be reverted without breaking the PPO work, so I\u0027m not seeing a benefit to the extra overhead of an extra CL.",
      "parentUuid": "e36a5ed0_7825a1b8",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "827a885c_b6b15e38",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 42
      },
      "lineNbr": 827,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "Similar semantic change here. If this is intentional, please separate the change out into the same CL that does this for images.",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf87599_2e3f293d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 35,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "Doesn\u0027t sound like an \"Option\"! Perhaps they belong to another \"State\" struct? Then GlslangSourceOptions can remain const.",
      "range": {
        "startLine": 35,
        "startChar": 13,
        "endLine": 35,
        "endChar": 20
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f85a6073_68554530",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 35,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T21:05:25Z",
      "side": 1,
      "message": "After chatting with Jamie about the \u0027mLocationsUsedForXfbExtension\u0027 issue also, we\u0027ve decided to make a new \"program interface info struct\" that will hold all of this mutable information and be passed in so the \u0027GlslangSourceOptions\u0027 and \u0027ProgramState\u0027 can stay const throughout.\n\nI\u0027ll leave this open until that\u0027s done.",
      "parentUuid": "abf87599_2e3f293d",
      "range": {
        "startLine": 35,
        "startChar": 13,
        "endLine": 35,
        "endChar": 20
      },
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16f61903_90f88598",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 42
      },
      "lineNbr": 336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "Why do we need to store the variable info map now?",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1af7130_fe01f58c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 42
      },
      "lineNbr": 336,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T21:05:25Z",
      "side": 1,
      "message": "A few lines above here (#329), ProgramVk::load() needs to call mExecutable.createPipelineLayout(), which requires the variable map to give each descriptor set layout the correct binding values.   For example, the uniforms:\n\nangle::Result ProgramExecutableVk::createPipelineLayout(const gl::Context *glContext,\n                                                        const gl::ProgramExecutable \u0026glExecutable,\n                                                        const gl::ProgramState \u0026programState)\n{\n...\n    // Default uniforms and transform feedback:\n    vk::DescriptorSetLayoutDesc uniformsAndXfbSetDesc;\n    for (const gl::ShaderType shaderType : linkedShaderStages)\n    {\n        const std::string uniformBlockName \u003d kDefaultUniformNames[shaderType];\n        ShaderInterfaceVariableInfo \u0026info  \u003d mVariableInfoMap[uniformBlockName];\n        if (!info.activeStages[shaderType])\n        {\n            continue;\n        }\n\n        uniformsAndXfbSetDesc.update(info.binding, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, 1,\n                                     gl_vk::kShaderStageMap[shaderType]);\n        mNumDefaultUniformDescriptors++;\n    }",
      "parentUuid": "16f61903_90f88598",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8e71f5_d1bf791d",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 42
      },
      "lineNbr": 336,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T03:22:45Z",
      "side": 1,
      "message": "Oh I see, previously createPipelineLayout was recalculating the bindings, but now it reuses the values calculated at link time (correct me if I\u0027m wrong).",
      "parentUuid": "b1af7130_fe01f58c",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fee7290_5b1ba24c",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 42
      },
      "lineNbr": 4005,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:52:53Z",
      "side": 1,
      "message": "Did this fail before? Can you make a split change with a new bug? The comment sounds like we are not populating some GL limit correctly, but I\u0027m surprised to hear that.",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf5d6a8_1f7b8cde",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 42
      },
      "lineNbr": 4005,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T21:05:25Z",
      "side": 1,
      "message": "\u003e Did this fail before?\n\nNo, this was broken by this change.\n\nMy initial thought was that this was due to assigning 1 binding per stage, rather than combining them like we used to.   However, this is still failing ever after splitting those changes apart (I just re-verified it fails with this CL), so I\u0027m not entirely sure what the cause is yet.\n\n\u003e Can you make a split change with a new bug?\n\nI don\u0027t understand what you\u0027re asking for here.   I can open a new bug to chase this failing test, but I\u0027d prefer to keep it with 3570 since that\u0027s the one that\u0027s breaking it with a change required for PPOs.\n\nIt\u0027s certainly possible there\u0027s a GL limit that\u0027s missing.   I can try and take another look at this from that perspective.",
      "parentUuid": "1fee7290_5b1ba24c",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "966100d5_8326928c",
        "filename": "src/tests/gl_tests/TextureTest.cpp",
        "patchSetId": 42
      },
      "lineNbr": 4005,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T03:22:45Z",
      "side": 1,
      "message": "\u003e \u003e Can you make a split change with a new bug?\n\n\u003e I don\u0027t understand what you\u0027re asking for here.\n\nNevermind! That was assuming the change was previously failing too (but was undetected due to lack of CQ or something).",
      "parentUuid": "eaf5d6a8_1f7b8cde",
      "revId": "b4385330b2101553569563c376690562c9a37056",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}