{
  "comments": [
    {
      "key": {
        "uuid": "7ee4de3d_db496333",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-27T20:53:17Z",
      "side": 1,
      "message": "This would create code style inconsistency.\nCould you make a CL changing all default constructors in ANGLE to this style?",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b3d45cb_2733af86",
        "filename": "src/common/MemoryBuffer.h",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T21:01:32Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s a good idea to change all constructors to this style. Not without verifying they contain no non-trivial members. I agree it\u0027s inconsistent style.",
      "parentUuid": "7ee4de3d_db496333",
      "range": {
        "startLine": 55,
        "startChar": 16,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef0a11c_b464350d",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-09-27T20:53:17Z",
      "side": 1,
      "message": "I thought that it will store if the callbacks are set",
      "range": {
        "startLine": 91,
        "startChar": 89,
        "endLine": 91,
        "endChar": 92
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5ceb904_d41e7922",
        "filename": "src/libANGLE/BlobCache.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-27T21:13:42Z",
      "side": 1,
      "message": "Yes, that\u0027s a typo! I\u0027ll fix it in the next CL with any other comments that may come in.",
      "parentUuid": "0ef0a11c_b464350d",
      "range": {
        "startLine": 91,
        "startChar": 89,
        "endLine": 91,
        "endChar": 92
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6c48c01_16e67e16",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 7
      },
      "lineNbr": 292,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T20:37:54Z",
      "side": 1,
      "message": "how come these are necessary?",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 292,
        "endChar": 40
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7db3dae_22890bae",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T20:37:54Z",
      "side": 1,
      "message": "How about we combine these two? I think timeout and incomplete are semantically equivalent. They both represent an operation that was interrupted but is neither error nor complete success.",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 319,
        "endChar": 17
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e03afb3_51c4d33e",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-27T21:10:20Z",
      "side": 1,
      "message": "There is a subtle difference. Timeout is when an operation didn\u0027t happen at all, but incomplete says it was partly done. Timeout is close to failure (nothing happened, failed to do it in time), while incomplete is close to success (did the best it could, the results are still usable). Timeout hints that an operation needs to be retried, but incomplete means that\u0027s the best you can get (under same conditions).\n\nThere is also the trivial reason that giving the reasons specific names makes the code more readable (e.g. checking the result of `vkAcquireNextImageKHR()` for Timeout() would make more sense than `Incomplete()`).\n\nEither way, as soon as the `bool` turns to `enum`, being more specific doesn\u0027t cost anything.",
      "parentUuid": "e7db3dae_22890bae",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 319,
        "endChar": 17
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9016b29_8208f06b",
        "filename": "src/libANGLE/Error.h",
        "patchSetId": 7
      },
      "lineNbr": 319,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T21:17:27Z",
      "side": 1,
      "message": "I think we should combine them. There just isn\u0027t any difference in how they\u0027re handled.",
      "parentUuid": "8e03afb3_51c4d33e",
      "range": {
        "startLine": 318,
        "startChar": 0,
        "endLine": 319,
        "endChar": 17
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa22871a_2839984b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 727,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T20:37:54Z",
      "side": 1,
      "message": "how do we distinguish a missed cached entry vs an error? It would be nice if we could log an error here on an allocation failure.",
      "range": {
        "startLine": 727,
        "startChar": 9,
        "endLine": 727,
        "endChar": 16
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e826d46_796f7004",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 727,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-27T21:10:20Z",
      "side": 1,
      "message": "We don\u0027t distinguish as the end results don\u0027t matter (the pipeline needs to be recreated no matter what happened in the cache).\n\nRegarding allocation failures, they are all over the place, and `new` throws `bad_alloc` in that case which is going to be fatal (here, among many places). I don\u0027t see why this place in particular would benefit from a log. Or do you have something else in mind that I didn\u0027t understand?",
      "parentUuid": "aa22871a_2839984b",
      "range": {
        "startLine": 727,
        "startChar": 9,
        "endLine": 727,
        "endChar": 16
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c31b08f0_52a9a271",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 727,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T21:17:27Z",
      "side": 1,
      "message": "The difference matters a lot. One is potentially an our of memory error that the application needs to be notified of. That\u0027s how we handle OOM everywhere else.",
      "parentUuid": "5e826d46_796f7004",
      "range": {
        "startLine": 727,
        "startChar": 9,
        "endLine": 727,
        "endChar": 16
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3f42f5a_62af6154",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 727,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T21:26:55Z",
      "side": 1,
      "message": "Nevermind, you can ignore this one. It\u0027s not really that necessary and we already print a warning in the blob cache.",
      "parentUuid": "c31b08f0_52a9a271",
      "range": {
        "startLine": 727,
        "startChar": 9,
        "endLine": 727,
        "endChar": 16
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6aba46d8_993c5d41",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1026,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T20:37:54Z",
      "side": 1,
      "message": "I think this should be ASSERT(mPipelineCacheVk.valid()); We don\u0027t try to robustly handle implementation errors usually. We just ASSERT. This lets the testing infrastructure validate it. And as far as I can see it\u0027s not allowed for a Vulkan implementation to not support creating VkPipelineCache.",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 5
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4bc1a4d_9b8597c6",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1026,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-27T21:10:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6aba46d8_993c5d41",
      "range": {
        "startLine": 1023,
        "startChar": 0,
        "endLine": 1026,
        "endChar": 5
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1816e18_e904e48c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1045,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-09-27T20:37:54Z",
      "side": 1,
      "message": "nit: I\u0027m trying to remove this macro in http://anglebug.com/2491 . Could you instead do:\n\nangle::Result result \u003d \u003c...\u003e;\nANGLE_TRY(result);\nASSERT(result !\u003d angle::Result::Incomplete());\n\nI think this will allow you to remove the getError and getResult methods.",
      "range": {
        "startLine": 1045,
        "startChar": 4,
        "endLine": 1045,
        "endChar": 20
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd647d27_33869f9e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1045,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-09-27T21:10:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d1816e18_e904e48c",
      "range": {
        "startLine": 1045,
        "startChar": 4,
        "endLine": 1045,
        "endChar": 20
      },
      "revId": "16d774295cd7f656c744d2608ec2145f008f36da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}