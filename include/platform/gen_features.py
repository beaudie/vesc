#! /usr/bin/python3

# Copyright 2022 The ANGLE Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# gen_features.py:
#  Code generation for ANGLE features.
#  NOTE: don't run this script directly. Run scripts/run_code_generation.py.

from collections import namedtuple
import json
import os
import sys

feature_files = {
    "frontend_features.json": "FrontendFeatures.h",
    "d3d_features.json": "FeaturesD3D.h",
    "gl_features.json": "FeaturesGL.h",
    "mtl_features.json": "FeaturesMtl.h",
    "vk_features.json": "FeaturesVk.h",
}

template_header = u"""// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name} using data from {input_file_name}.
//
{description}

#ifndef ANGLE_PLATFORM_{NAME}_H_
#define ANGLE_PLATFORM_{NAME}_H_

#include "platform/Feature.h"

namespace angle
{{

struct {name} : FeatureSetBase
{{
    {name}();
    ~{name}();

{features}
}};

inline {name}::{name}()  = default;
inline {name}::~{name}() = default;

}}  // namespace angle

#endif  // ANGLE_PLATFORM_{NAME}_H_
"""

template_feature = u"""Feature {name} = {{
     "{display_name}", FeatureCategory::{category},
     {description},
     &members, {bug}
}};
"""


def main():
    if len(sys.argv) == 2 and sys.argv[1] == 'inputs':
        print(','.join(list(feature_files.keys())))
        return
    if len(sys.argv) == 2 and sys.argv[1] == 'outputs':
        print(','.join(list(feature_files.values())))
        return

    for key, value in feature_files.items():
        with open(key) as fin:
            src = json.loads(fin.read())

        features_json = src['features']
        features = []

        for feature_json in features_json:
            bug = feature_json['bug']
            feature = template_feature.format(
                name=feature_json['name'],
                display_name=feature_json['display_name'],
                category=feature_json['category'],
                description='\n'.join('"' + line + '"' for line in feature_json['description']),
                bug='' if bug == 'None' else '"' + bug + '"')

            features.append(feature)

        description = '\n'.join(['// ' + line for line in src['description']])
        name = value[:-2]

        header = template_header.format(
            script_name=os.path.basename(__file__),
            input_file_name=key,
            description=description,
            name=name,
            NAME=name.upper(),
            features='\n'.join(features))

        with open(value, 'w') as fout:
            fout.write(header)
            fout.close()


if __name__ == '__main__':
    sys.exit(main())
