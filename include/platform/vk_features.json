{
    "description": [
        "Copyright 2022 The ANGLE Project Authors. All rights reserved.",
        "Use of this source code is governed by a BSD-style license that can be",
        "found in the LICENSE file.",
        "",
        "vk_features.json: Optional features for the Vulkan renderer."
    ],
    "features": [
        {
            "comment": [
                "Line segment rasterization must follow OpenGL rules. This means using an algorithm similar",
                "to Bresenham's. Vulkan uses a different algorithm. This feature enables the use of pixel",
                "shader patching to implement OpenGL basic line rasterization rules. This feature will",
                "normally always be enabled. Exposing it as an option enables performance testing."
            ],
            "name": "basicGLLineRasterization",
            "display_name": "basicGLLineRasterization",
            "category": "VulkanFeatures",
            "description": [
                "Enable the use of pixel shader patching to implement OpenGL basic line ",
                "rasterization rules"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "If the VK_EXT_line_rasterization extension is available we'll use it to get",
                "Bresenham line rasterization."
            ],
            "name": "bresenhamLineRasterization",
            "display_name": "bresenhamLineRasterization",
            "category": "VulkanFeatures",
            "description": [
                "Enable Bresenham line rasterization via VK_EXT_line_rasterization extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "If the VK_EXT_provoking_vertex extension is available, we'll use it to set",
                "the provoking vertex mode"
            ],
            "name": "provokingVertex",
            "display_name": "provokingVertex",
            "category": "VulkanFeatures",
            "description": [
                "Enable provoking vertex mode via VK_EXT_provoking_vertex extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "This flag is added for the sole purpose of end2end tests, to test the correctness",
                "of various algorithms when a fallback format is used, such as using a packed format to",
                "emulate a depth- or stencil-only format."
            ],
            "name": "forceFallbackFormat",
            "display_name": "forceFallbackFormat",
            "category": "VulkanWorkarounds",
            "description": [
                "Force a fallback format for angle_end2end_tests"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "On some NVIDIA drivers the point size range reported from the API is inconsistent with the",
                "actual behavior. Clamp the point size to the value from the API to fix this."
            ],
            "name": "clampPointSize",
            "display_name": "clamp_point_size",
            "category": "VulkanWorkarounds",
            "description": [
                "The point size range reported from the API is inconsistent with the actual behavior"
            ],
            "bug": "http://anglebug.com/2970"
        },

        {
            "comment": [
                "On some NVIDIA drivers the depth value is not clamped to [0,1] for floating point depth",
                "buffers. This is NVIDIA bug 3171019, see http://anglebug.com/3970 for details."
            ],
            "name": "depthClamping",
            "display_name": "depth_clamping",
            "category": "VulkanWorkarounds",
            "description": [
                "The depth value is not clamped to [0,1] for floating point depth buffers."
            ],
            "bug": "http://anglebug.com/3970"
        },

        {
            "name": "supportsRenderpass2",
            "display_name": "supportsRenderpass2",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_create_renderpass2 extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_incremental_present extension, on which the",
                "EGL_KHR_swap_buffers_with_damage extension can be layered."
            ],
            "name": "supportsIncrementalPresent",
            "display_name": "supportsIncrementalPresent",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_incremental_present extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_ANDROID_external_memory_android_hardware_buffer",
                "extension, on which the EGL_ANDROID_image_native_buffer extension can be layered."
            ],
            "name": "supportsAndroidHardwareBuffer",
            "display_name": "supportsAndroidHardwareBuffer",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_ANDROID_external_memory_android_hardware_buffer extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_GGP_frame_token extension, on which",
                "the EGL_ANGLE_swap_with_frame_token extension can be layered."
            ],
            "name": "supportsGGPFrameToken",
            "display_name": "supportsGGPFrameToken",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_GGP_frame_token extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_external_memory_fd extension, on which the",
                "GL_EXT_memory_object_fd extension can be layered."
            ],
            "name": "supportsExternalMemoryFd",
            "display_name": "supportsExternalMemoryFd",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_external_memory_fd extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_FUCHSIA_external_memory",
                "extension, on which the GL_ANGLE_memory_object_fuchsia extension can be layered."
            ],
            "name": "supportsExternalMemoryFuchsia",
            "display_name": "supportsExternalMemoryFuchsia",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_FUCHSIA_external_memory extension"
            ],
            "bug": "None"
        },

        {
            "name": "supportsFilteringPrecision",
            "display_name": "supportsFilteringPrecision",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_GOOGLE_sampler_filtering_precision extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkInstance supports the VK_KHR_external_fence_capabilities extension."
            ],
            "name": "supportsExternalFenceCapabilities",
            "display_name": "supportsExternalFenceCapabilities",
            "category": "VulkanFeatures",
            "description": [
                "VkInstance supports the VK_KHR_external_fence_capabilities extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkInstance supports the VK_KHR_external_semaphore_capabilities extension."
            ],
            "name": "supportsExternalSemaphoreCapabilities",
            "display_name": "supportsExternalSemaphoreCapabilities",
            "category": "VulkanFeatures",
            "description": [
                "VkInstance supports the VK_KHR_external_semaphore_capabilities extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_external_semaphore_fd extension, on which the",
                "GL_EXT_semaphore_fd extension can be layered."
            ],
            "name": "supportsExternalSemaphoreFd",
            "display_name": "supportsExternalSemaphoreFd",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_external_semaphore_fd extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_FUCHSIA_external_semaphore",
                "extension, on which the GL_ANGLE_semaphore_fuchsia extension can be layered."
            ],
            "name": "supportsExternalSemaphoreFuchsia",
            "display_name": "supportsExternalSemaphoreFuchsia",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_FUCHSIA_external_semaphore extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_external_fence_fd extension, on which the",
                "EGL_ANDROID_native_fence extension can be layered."
            ],
            "name": "supportsExternalFenceFd",
            "display_name": "supportsExternalFenceFd",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_external_fence_fd extension"
            ],
            "bug": "http://anglebug.com/2517"
        },

        {
            "comment": [
                "Whether the VkDevice can support EGL_ANDROID_native_fence_sync extension."
            ],
            "name": "supportsAndroidNativeFenceSync",
            "display_name": "supportsAndroidNativeFenceSync",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the EGL_ANDROID_native_fence_sync extension"
            ],
            "bug": "http://anglebug.com/2517"
        },

        {
            "comment": [
                "Whether the VkDevice can support the imageCubeArray feature properly."
            ],
            "name": "supportsImageCubeArray",
            "display_name": "supportsImageCubeArray",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the imageCubeArray feature properly"
            ],
            "bug": "http://anglebug.com/3584"
        },

        {
            "comment": [
                "Whether the VkDevice supports the pipelineStatisticsQuery feature."
            ],
            "name": "supportsPipelineStatisticsQuery",
            "display_name": "supportsPipelineStatisticsQuery",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the pipelineStatisticsQuery feature"
            ],
            "bug": "http://anglebug.com/5430"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_shader_stencil_export extension, which is used to",
                "perform multisampled resolve of stencil buffer.  A multi-step workaround is used instead if",
                "this extension is not available."
            ],
            "name": "supportsShaderStencilExport",
            "display_name": "supportsShaderStencilExport",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_shader_stencil_export extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_sampler_ycbcr_conversion extension, which is needed",
                "to support Ycbcr conversion with external images."
            ],
            "name": "supportsYUVSamplerConversion",
            "display_name": "supportsYUVSamplerConversion",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_sampler_ycbcr_conversion extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Where VK_EXT_transform_feedback is not support, an emulation path is used."
            ],
            "name": "emulateTransformFeedback",
            "display_name": "emulateTransformFeedback",
            "category": "VulkanFeatures",
            "description": [
                "Emulate transform feedback as the VK_EXT_transform_feedback is not present."
            ],
            "bug": "http://anglebug.com/3205"
        },

        {
            "comment": [
                "Where VK_EXT_transform_feedback is supported, it's preferred over an emulation path."
            ],
            "name": "supportsTransformFeedbackExtension",
            "display_name": "supportsTransformFeedbackExtension",
            "category": "VulkanFeatures",
            "description": [
                "Transform feedback uses the VK_EXT_transform_feedback extension."
            ],
            "bug": "http://anglebug.com/3206"
        },

        {
            "name": "supportsGeometryStreamsCapability",
            "display_name": "supportsGeometryStreamsCapability",
            "category": "VulkanFeatures",
            "description": [
                "Implementation supports the GeometryStreams SPIR-V capability."
            ],
            "bug": "http://anglebug.com/3206"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_index_type_uint8 extension"
            ],
            "name": "supportsIndexTypeUint8",
            "display_name": "supportsIndexTypeUint8",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_index_type_uint8 extension"
            ],
            "bug": "http://anglebug.com/4405"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_custom_border_color extension"
            ],
            "name": "supportsCustomBorderColor",
            "display_name": "supportsCustomBorderColor",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_custom_border_color extension"
            ],
            "bug": "http://anglebug.com/3577"
        },

        {
            "comment": [
                "Whether the VkDevice supports multiDrawIndirect (drawIndirect with drawCount > 1)"
            ],
            "name": "supportsMultiDrawIndirect",
            "display_name": "supportsMultiDrawIndirect",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the multiDrawIndirect extension"
            ],
            "bug": "http://anglebug.com/6439"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_depth_stencil_resolve extension with the",
                "independentResolveNone feature."
            ],
            "name": "supportsDepthStencilResolve",
            "display_name": "supportsDepthStencilResolve",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_depth_stencil_resolve ",
                "extension with the independentResolveNone feature"
            ],
            "bug": "http://anglebug.com/4836"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_multisampled_render_to_single_sampled extension."
            ],
            "name": "supportsMultisampledRenderToSingleSampled",
            "display_name": "supportsMultisampledRenderToSingleSampled",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_multisampled_render_to_single_sampled extension"
            ],
            "bug": "http://anglebug.com/4836"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_multiview extension."
            ],
            "name": "supportsMultiview",
            "display_name": "supportsMultiview",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_multiview extension"
            ],
            "bug": "http://anglebug.com/6048"
        },

        {
            "comment": [
                "VK_PRESENT_MODE_FIFO_KHR causes random timeouts on Linux Intel."
            ],
            "name": "disableFifoPresentMode",
            "display_name": "disableFifoPresentMode",
            "category": "VulkanWorkarounds",
            "description": [
                "VK_PRESENT_MODE_FIFO_KHR causes random timeouts"
            ],
            "bug": "http://anglebug.com/3153"
        },

        {
            "comment": [
                "On Qualcomm, gaps in bound descriptor set indices causes the post-gap sets to misbehave.",
                "For example, binding only descriptor set 3 results in zero being read from a uniform buffer",
                "object within that set.  This flag results in empty descriptor sets being bound for any",
                "unused descriptor set to work around this issue."
            ],
            "name": "bindEmptyForUnusedDescriptorSets",
            "display_name": "bindEmptyForUnusedDescriptorSets",
            "category": "VulkanWorkarounds",
            "description": [
                "Gaps in bound descriptor set indices causes the post-gap sets to misbehave"
            ],
            "bug": "http://anglebug.com/2727"
        },

        {
            "comment": [
                "OES_depth_texture is a commonly expected feature on Android. However it",
                "requires that D16_UNORM support texture filtering",
                "(e.g. VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT) and some devices",
                "do not. Work-around this by setting saying D16_UNORM supports filtering",
                "anyway."
            ],
            "name": "forceD16TexFilter",
            "display_name": "forceD16TexFilter",
            "category": "VulkanWorkarounds",
            "description": [
                "VK_FORMAT_D16_UNORM does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT, ",
                "which prevents OES_depth_texture from being supported."
            ],
            "bug": "http://anglebug.com/3452"
        },

        {
            "comment": [
                "On some android devices, vkCmdBlitImage with flipped coordinates blits incorrectly.  This",
                "workaround makes sure this path is avoided."
            ],
            "name": "disableFlippingBlitWithCommand",
            "display_name": "disableFlippingBlitWithCommand",
            "category": "VulkanWorkarounds",
            "description": [
                "vkCmdBlitImage with flipped coordinates blits incorrectly."
            ],
            "bug": "http://anglebug.com/3498"
        },

        {
            "comment": [
                "On platform with Intel or AMD GPU, a window resizing would not trigger the vulkan driver to",
                "return VK_ERROR_OUT_OF_DATE on swapchain present.  Work-around by query current window extent",
                "every frame to detect a window resizing."
            ],
            "name": "perFrameWindowSizeQuery",
            "display_name": "perFrameWindowSizeQuery",
            "category": "VulkanWorkarounds",
            "description": [
                "Vulkan swapchain is not returning VK_ERROR_OUT_OF_DATE when window resizing"
            ],
            "bug": "http://anglebug.com/3623, http://anglebug.com/3624, http://anglebug.com/3625"
        },

        {
            "comment": [
                "Seamful cube map emulation misbehaves on the AMD windows driver, so it's disallowed."
            ],
            "name": "disallowSeamfulCubeMapEmulation",
            "display_name": "disallowSeamfulCubeMapEmulation",
            "category": "VulkanWorkarounds",
            "description": [
                "Seamful cube map emulation misbehaves on some drivers, so it's disallowed"
            ],
            "bug": "http://anglebug.com/3243"
        },

        {
            "comment": [
                "Vulkan considers vertex attribute accesses to count up to the last multiple of the stride.",
                "This additional access supports AMD's robust buffer access implementation.",
                "AMDVLK in particular will return incorrect values when the vertex access extends into the",
                "range that would be the stride padding and the buffer is too small.",
                "This workaround limits GL_MAX_VERTEX_ATTRIB_STRIDE to a reasonable value and pads out",
                "every buffer allocation size to be large enough to support a maximum vertex stride."
            ],
            "name": "padBuffersToMaxVertexAttribStride",
            "display_name": "padBuffersToMaxVertexAttribStride",
            "category": "VulkanWorkarounds",
            "description": [
                "Vulkan considers vertex attribute accesses to count up to the last multiple of the ",
                "stride. This additional access supports AMD's robust buffer access implementation. ",
                "AMDVLK in particular will return incorrect values when the vertex access extends into ",
                "the range that would be the stride padding and the buffer is too small. ",
                "This workaround limits GL_MAX_VERTEX_ATTRIB_STRIDE to a maximum value and ",
                "pads up every buffer allocation size to be a multiple of the maximum stride."
            ],
            "bug": "http://anglebug.com/4428"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_external_memory_dma_buf and",
                "VK_EXT_image_drm_format_modifier extensions.  These extensions are always used together to",
                "implement EGL_EXT_image_dma_buf_import and EGL_EXT_image_dma_buf_import_modifiers."
            ],
            "name": "supportsExternalMemoryDmaBufAndModifiers",
            "display_name": "supportsExternalMemoryDmaBufAndModifiers",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_external_memory_dma_buf and VK_EXT_image_drm_format_modifier ",
                "extensions"
            ],
            "bug": "http://anglebug.com/6248"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_external_memory_host extension, on which the",
                "ANGLE_iosurface_client_buffer extension can be layered."
            ],
            "name": "supportsExternalMemoryHost",
            "display_name": "supportsExternalMemoryHost",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_EXT_external_memory_host extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether to fill new buffers and textures with nonzero data to sanitize robust resource",
                "initialization and flush out assumptions about zero init."
            ],
            "name": "allocateNonZeroMemory",
            "display_name": "allocateNonZeroMemory",
            "category": "VulkanFeatures",
            "description": [
                "Fill new allocations with non-zero values to flush out errors."
            ],
            "bug": "http://anglebug.com/4384"
        },

        {
            "comment": [
                "Whether to log each callback from the VK_EXT_device_memory_report extension.  This feature is",
                "used for trying to debug GPU memory leaks."
            ],
            "name": "logMemoryReportCallbacks",
            "display_name": "logMemoryReportCallbacks",
            "category": "VulkanFeatures",
            "description": [
                "Log each callback from VK_EXT_device_memory_report"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether to log statistics from the VK_EXT_device_memory_report extension each eglSwapBuffer."
            ],
            "name": "logMemoryReportStats",
            "display_name": "logMemoryReportStats",
            "category": "VulkanFeatures",
            "description": [
                "Log stats from VK_EXT_device_memory_report each swap"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Allocate a 'shadow' buffer for GL buffer objects. For GPU-read only buffers",
                "glMap* latency can be reduced by maintaining a copy of the buffer which is",
                "writeable only by the CPU. We then return this shadow buffer on glMap* calls."
            ],
            "name": "shadowBuffers",
            "display_name": "shadowBuffers",
            "category": "VulkanFeatures",
            "description": [
                "Allocate a shadow buffer for GL buffer objects to reduce glMap* latency."
            ],
            "bug": "http://anglebug.com/4339"
        },

        {
            "comment": [
                "When we update buffer data we usually face a choice to either clone a buffer and copy the",
                "data or stage a buffer update and use the GPU to do the copy. For some GPUs, a performance",
                "penalty to use the GPU to do copies. Setting this flag to true will always try to create a",
                "new buffer and use the CPU to copy data when possible."
            ],
            "name": "preferCPUForBufferSubData",
            "display_name": "preferCPUForBufferSubData",
            "category": "VulkanFeatures",
            "description": [
                "Prefer use CPU to do bufferSubData instead of staged update."
            ],
            "bug": "http://issuetracker.google.com/200067929"
        },

        {
            "comment": [
                "Persistently map buffer memory until destroy, saves on map/unmap IOCTL overhead",
                "for buffers that are updated frequently."
            ],
            "name": "persistentlyMappedBuffers",
            "display_name": "persistentlyMappedBuffers",
            "category": "VulkanFeatures",
            "description": [
                "Persistently map buffer memory to reduce map/unmap IOCTL overhead."
            ],
            "bug": "http://anglebug.com/2162"
        },

        {
            "comment": [
                "Android needs to pre-rotate surfaces that are not oriented per the native device's",
                "orientation (e.g. a landscape application on a Pixel phone).  This feature works for",
                "full-screen applications."
            ],
            "name": "enablePreRotateSurfaces",
            "display_name": "enablePreRotateSurfaces",
            "category": "VulkanFeatures",
            "description": [
                "Enable Android pre-rotation for landscape applications"
            ],
            "bug": "http://anglebug.com/3502"
        },

        {
            "comment": [
                "Enable precision qualifiers for shaders generated by Vulkan backend"
            ],
            "name": "enablePrecisionQualifiers",
            "display_name": "enablePrecisionQualifiers",
            "category": "VulkanFeatures",
            "description": [
                "Enable precision qualifiers in shaders"
            ],
            "bug": "http://anglebug.com/3078"
        },

        {
            "comment": [
                "Desktop (at least NVIDIA) devices prefer combining barriers into one vkCmdPipelineBarrier",
                "call over issuing multiple barrier calls with fine grained dependency information to have",
                "better performance."
            ],
            "name": "preferAggregateBarrierCalls",
            "display_name": "preferAggregateBarrierCalls",
            "category": "VulkanWorkarounds",
            "description": [
                "Single barrier call is preferred over multiple calls with ",
                "fine grained pipeline stage dependency information"
            ],
            "bug": "http://anglebug.com/4633"
        },

        {
            "comment": [
                "When dealing with emulated formats that have extra channels, it's cheaper on desktop devices",
                "to skip invalidating framebuffer attachments compared to tiling devices where it's cheaper to",
                "invalidate and re-clear them."
            ],
            "name": "preferSkippingInvalidateForEmulatedFormats",
            "display_name": "preferSkippingInvalidateForEmulatedFormats",
            "category": "VulkanWorkarounds",
            "description": [
                "Skipping invalidate is preferred for emulated formats that have extra channels over ",
                "re-clearing the image"
            ],
            "bug": "http://anglebug.com/6860"
        },

        {
            "comment": [
                "Tell the Vulkan back-end to use the async command queue to dispatch work to the GPU. Command",
                "buffer work will happened in a worker thread. Otherwise use Renderer::CommandQueue directly."
            ],
            "name": "asyncCommandQueue",
            "display_name": "asyncCommandQueue",
            "category": "VulkanFeatures",
            "description": [
                "Use CommandQueue worker thread to dispatch work to GPU."
            ],
            "bug": "http://anglebug.com/4324"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_KHR_shader_float16_int8 extension and has the",
                "shaderFloat16 feature."
            ],
            "name": "supportsShaderFloat16",
            "display_name": "supportsShaderFloat16",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports the VK_KHR_shader_float16_int8 extension ",
                "and has the shaderFloat16 feature"
            ],
            "bug": "http://anglebug.com/4551"
        },

        {
            "comment": [
                "Some devices don't meet the limits required to perform mipmap generation using the built-in",
                "compute shader.  On some other devices, VK_IMAGE_USAGE_STORAGE_BIT is detrimental to",
                "performance, making this solution impractical."
            ],
            "name": "allowGenerateMipmapWithCompute",
            "display_name": "allowGenerateMipmapWithCompute",
            "category": "VulkanFeatures",
            "description": [
                "Use the compute path to generate mipmaps on devices that meet the minimum requirements, ",
                "and the performance is better."
            ],
            "bug": "http://anglebug.com/4551"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_QCOM_render_pass_store_ops extension"
            ],
            "name": "supportsRenderPassStoreOpNoneQCOM",
            "display_name": "supportsRenderPassStoreOpNoneQCOM",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports VK_QCOM_render_pass_store_ops extension."
            ],
            "bug": "http://anglebug.com/5055"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_load_store_op_none extension"
            ],
            "name": "supportsRenderPassLoadStoreOpNone",
            "display_name": "supportsRenderPassLoadStoreOpNone",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports VK_EXT_load_store_op_none extension."
            ],
            "bug": "http://anglebug.com/5371"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_depth_clip_control extension"
            ],
            "name": "supportsDepthClipControl",
            "display_name": "supportsDepthClipControl",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports VK_EXT_depth_clip_control extension."
            ],
            "bug": "http://anglebug.com/5421"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_blend_operation_advanced extension"
            ],
            "name": "supportsBlendOperationAdvanced",
            "display_name": "supportsBlendOperationAdvanced",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports VK_EXT_blend_operation_advanced extension."
            ],
            "bug": "http://anglebug.com/3586"
        },

        {
            "comment": [
                "Force maxUniformBufferSize to 16K on Qualcomm's Adreno 540. Pixel2's Adreno540 reports",
                "maxUniformBufferSize 64k but various tests failed with that size. For that specific",
                "device, we set to 16k for now which is known to pass all tests.",
                "https://issuetracker.google.com/161903006"
            ],
            "name": "forceMaxUniformBufferSize16KB",
            "display_name": "forceMaxUniformBufferSize16KB",
            "category": "VulkanWorkarounds",
            "description": [
                "Force max uniform buffer size to 16K on some device due to bug"
            ],
            "bug": "https://issuetracker.google.com/161903006"
        },

        {
            "comment": [
                "Enable mutable bit by default for ICD's that support VK_KHR_image_format_list."
            ],
            "name": "supportsImageFormatList",
            "display_name": "supportsImageFormatList",
            "category": "VulkanFeatures",
            "description": [
                "Enable VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT by default for ICDs ",
                "that support VK_KHR_image_format_list"
            ],
            "bug": "http://anglebug.com/5281"
        },

        {
            "comment": [
                "Swiftshader on mac fails to initialize WebGL context when EXT_multisampled_render_to_texture",
                "is used by Chromium."
            ],
            "name": "enableMultisampledRenderToTexture",
            "display_name": "enableMultisampledRenderToTexture",
            "category": "VulkanWorkarounds",
            "description": [
                "Expose EXT_multisampled_render_to_texture"
            ],
            "bug": "http://anglebug.com/4937"
        },

        {
            "comment": [
                "Manhattan is calling glFlush in the middle of renderpass which breaks renderpass and hurts",
                "performance on tile based GPU. When this is enabled, we will defer the glFlush call made in",
                "the middle of renderpass to the end of renderpass.",
                "https://issuetracker.google.com/issues/166475273"
            ],
            "name": "deferFlushUntilEndRenderPass",
            "display_name": "deferFlushUntilEndRenderPass",
            "category": "VulkanWorkarounds",
            "description": [
                "Allow glFlush to be deferred until renderpass ends"
            ],
            "bug": "https://issuetracker.google.com/issues/166475273"
        },

        {
            "comment": [
                "Android mistakenly destroys oldSwapchain passed to vkCreateSwapchainKHR, causing crashes on",
                "certain drivers."
            ],
            "name": "waitIdleBeforeSwapchainRecreation",
            "display_name": "waitIdleBeforeSwapchainRecreation",
            "category": "VulkanWorkarounds",
            "description": [
                "Before passing an oldSwapchain to VkSwapchainCreateInfoKHR, wait for queue to be idle. ",
                "Works around a bug on platforms which destroy oldSwapchain in vkCreateSwapchainKHR."
            ],
            "bug": "http://anglebug.com/5061"
        },

        {
            "comment": [
                "Allow forcing an LOD offset on all sampling operations for performance comparisons. ANGLE is",
                "non-conformant if this feature is enabled."
            ],
            "name": "forceTextureLodOffset1",
            "display_name": "force_texture_lod_offset_1",
            "category": "VulkanWorkarounds",
            "description": [
                "Increase the minimum texture level-of-detail by 1 when sampling."
            ],
            "bug": "None"
        },

        {
            "name": "forceTextureLodOffset2",
            "display_name": "force_texture_lod_offset_2",
            "category": "VulkanWorkarounds",
            "description": [
                "Increase the minimum texture level-of-detail by 2 when sampling."
            ],
            "bug": "None"
        },

        {
            "name": "forceTextureLodOffset3",
            "display_name": "force_texture_lod_offset_3",
            "category": "VulkanWorkarounds",
            "description": [
                "Increase the minimum texture level-of-detail by 3 when sampling."
            ],
            "bug": "None"
        },

        {
            "name": "forceTextureLodOffset4",
            "display_name": "force_texture_lod_offset_4",
            "category": "VulkanWorkarounds",
            "description": [
                "Increase the minimum texture level-of-detail by 4 when sampling."
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Translate non-nearest filtering modes to nearest for all samplers for performance",
                "comparisons. ANGLE is non-conformant if this feature is enabled."
            ],
            "name": "forceNearestFiltering",
            "display_name": "force_nearest_filtering",
            "category": "VulkanWorkarounds",
            "description": [
                "Force nearest filtering when sampling."
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Translate  non-nearest mip filtering modes to nearest mip for all samplers for performance",
                "comparisons. ANGLE is non-conformant if this feature is enabled."
            ],
            "name": "forceNearestMipFiltering",
            "display_name": "forceNearestMipFiltering",
            "category": "VulkanWorkarounds",
            "description": [
                "Force nearest mip filtering when sampling."
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Compress float32 vertices in static buffers to float16 at draw time. ANGLE is non-conformant",
                "if this feature is enabled."
            ],
            "name": "compressVertexData",
            "display_name": "compress_vertex_data",
            "category": "VulkanWorkarounds",
            "description": [
                "Compress vertex data to smaller data types when ",
                "possible. Using this feature makes ANGLE non-conformant."
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Qualcomm missynchronizes vkCmdClearAttachments in the middle of render pass.",
                "https://issuetracker.google.com/166809097"
            ],
            "name": "preferDrawClearOverVkCmdClearAttachments",
            "display_name": "preferDrawClearOverVkCmdClearAttachments",
            "category": "VulkanWorkarounds",
            "description": [
                "On some hardware, clear using a draw call instead of vkCmdClearAttachments in the middle ",
                "of render pass due to bugs"
            ],
            "bug": "https://issuetracker.google.com/166809097"
        },

        {
            "comment": [
                "Whether prerotation is being emulated for testing.  90 degree rotation."
            ],
            "name": "emulatedPrerotation90",
            "display_name": "emulatedPrerotation90",
            "category": "VulkanFeatures",
            "description": [
                "Emulate 90-degree prerotation."
            ],
            "bug": "http://anglebug.com/4901"
        },

        {
            "comment": [
                "Whether prerotation is being emulated for testing.  180 degree rotation."
            ],
            "name": "emulatedPrerotation180",
            "display_name": "emulatedPrerotation180",
            "category": "VulkanFeatures",
            "description": [
                "Emulate 180-degree prerotation."
            ],
            "bug": "http://anglebug.com/4901"
        },

        {
            "comment": [
                "Whether prerotation is being emulated for testing.  270 degree rotation."
            ],
            "name": "emulatedPrerotation270",
            "display_name": "emulatedPrerotation270",
            "category": "VulkanFeatures",
            "description": [
                "Emulate 270-degree prerotation."
            ],
            "bug": "http://anglebug.com/4901"
        },

        {
            "comment": [
                "Whether SPIR-V should be generated through glslang.  Transitory feature while confidence is",
                "built on the SPIR-V generation code."
            ],
            "name": "generateSPIRVThroughGlslang",
            "display_name": "generateSPIRVThroughGlslang",
            "category": "VulkanFeatures",
            "description": [
                "Translate SPIR-V through glslang."
            ],
            "bug": "http://anglebug.com/4889"
        },

        {
            "comment": [
                "Whether we should use driver uniforms over specialization constants for some shader",
                "modifications like yflip and rotation."
            ],
            "name": "forceDriverUniformOverSpecConst",
            "display_name": "forceDriverUniformOverSpecConst",
            "category": "VulkanWorkarounds",
            "description": [
                "Forces using driver uniforms instead of specialization constants."
            ],
            "bug": "http://issuetracker.google.com/173636783"
        },

        {
            "comment": [
                "Whether non-conformant configurations and extensions should be exposed.  When an extension is",
                "in development, or a GLES version is not supported on a device, we may still want to expose",
                "them for partial testing.  This feature is enabled by our test harness."
            ],
            "name": "exposeNonConformantExtensionsAndVersions",
            "display_name": "exposeNonConformantExtensionsAndVersions",
            "category": "VulkanWorkarounds",
            "description": [
                "Expose GLES versions and extensions that are not conformant."
            ],
            "bug": "http://anglebug.com/5375"
        },

        {
            "comment": [
                "imageAtomicExchange is expected to work for r32f formats, but support for atomic operations",
                "for VK_FORMAT_R32_SFLOAT is rare.  This support is emulated by using an r32ui format for such",
                "images instead."
            ],
            "name": "emulateR32fImageAtomicExchange",
            "display_name": "emulateR32fImageAtomicExchange",
            "category": "VulkanWorkarounds",
            "description": [
                "Emulate r32f images with r32ui to support imageAtomicExchange."
            ],
            "bug": "http://anglebug.com/5535"
        },

        {
            "name": "supportsNegativeViewport",
            "display_name": "supportsNegativeViewport",
            "category": "VulkanFeatures",
            "description": [
                "The driver supports inverting the viewport with a negative height."
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether we should force any highp precision in the fragment shader to mediump.",
                "ANGLE is non-conformant if this feature is enabled."
            ],
            "name": "forceFragmentShaderPrecisionHighpToMediump",
            "display_name": "forceFragmentShaderPrecisionHighpToMediump",
            "category": "VulkanWorkarounds",
            "description": [
                "Forces highp precision in fragment shader to mediump."
            ],
            "bug": "https://issuetracker.google.com/184850002"
        },

        {
            "comment": [
                "Whether we should submit at each FBO boundary."
            ],
            "name": "preferSubmitAtFBOBoundary",
            "display_name": "preferSubmitAtFBOBoundary",
            "category": "VulkanWorkarounds",
            "description": [
                "Submit commands to driver at each FBO boundary for performance improvements."
            ],
            "bug": "https://issuetracker.google.com/187425444"
        },

        {
            "comment": [
                "Workaround for gap in Vulkan spec related to querying descriptor count for immutable samplers",
                "tied to an external format."
            ],
            "name": "useMultipleDescriptorsForExternalFormats",
            "display_name": "useMultipleDescriptorsForExternalFormats",
            "category": "VulkanWorkarounds",
            "description": [
                "Return a default descriptor count for external formats."
            ],
            "bug": "http://anglebug.com/6141"
        },

        {
            "comment": [
                "Whether the VkDevice can support Protected Memory."
            ],
            "name": "supportsProtectedMemory",
            "display_name": "supportsProtectedMemory",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports protected memory"
            ],
            "bug": "http://anglebug.com/3965"
        },

        {
            "comment": [
                "Whether the VkDevice supports the VK_EXT_host_query_reset extension"
            ],
            "name": "supportsHostQueryReset",
            "display_name": "supportsHostQueryReset",
            "category": "VulkanFeatures",
            "description": [
                "VkDevice supports VK_EXT_host_query_reset extension"
            ],
            "bug": "http://anglebug.com/6692"
        },

        {
            "comment": [
                "Whether the VkInstance supports the VK_KHR_get_surface_capabilities2 extension."
            ],
            "name": "supportsSurfaceCapabilities2Extension",
            "display_name": "supportsSurfaceCapabilities2Extension",
            "category": "VulkanFeatures",
            "description": [
                "VkInstance supports the VK_KHR_get_surface_capabilities2 extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkInstance supports the VK_KHR_surface_protected_capabilities extension."
            ],
            "name": "supportsSurfaceProtectedCapabilitiesExtension",
            "display_name": "supportsSurfaceProtectedCapabilitiesExtension",
            "category": "VulkanFeatures",
            "description": [
                "VkInstance supports the VK_KHR_surface_protected_capabilities extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkInstance supports the VK_GOOGLE_surfaceless_query extension."
            ],
            "name": "supportsSurfacelessQueryExtension",
            "display_name": "supportsSurfacelessQueryExtension",
            "category": "VulkanFeatures",
            "description": [
                "VkInstance supports the VK_GOOGLE_surfaceless_query extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the VkSurface supports protected swapchains from",
                "supportsSurfaceProtectedCapabilitiesExtension."
            ],
            "name": "supportsSurfaceProtectedSwapchains",
            "display_name": "supportsSurfaceProtectedSwapchains",
            "category": "VulkanFeatures",
            "description": [
                "VkSurface supportsProtected for protected swapchains"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether surface format GL_RGB8 should be overridden to GL_RGBA8."
            ],
            "name": "overrideSurfaceFormatRGB8toRGBA8",
            "display_name": "overrideSurfaceFormatRGB8toRGBA8",
            "category": "VulkanWorkarounds",
            "description": [
                "Override surface format GL_RGB8 to GL_RGBA8"
            ],
            "bug": "http://anglebug.com/6651"
        },

        {
            "comment": [
                "Whether the VkSurface supports VK_KHR_shared_presentable_images."
            ],
            "name": "supportsSharedPresentableImageExtension",
            "display_name": "supportsSharedPresentableImageExtension",
            "category": "VulkanFeatures",
            "description": [
                "VkSurface supports the VK_KHR_shared_presentable_images extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Feature to control whether the Vulkan backend can support",
                "GL_EXT_shader_framebuffer_fetch"
            ],
            "name": "supportsShaderFramebufferFetch",
            "display_name": "supportsShaderFramebufferFetch",
            "category": "VulkanFeatures",
            "description": [
                "Whether the Vulkan backend supports coherent framebuffer fetch"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Feature to control whether the Vulkan backend can support",
                "GL_EXT_shader_framebuffer_fetch_non_coherent"
            ],
            "name": "supportsShaderFramebufferFetchNonCoherent",
            "display_name": "supportsShaderFramebufferFetchNonCoherent",
            "category": "VulkanFeatures",
            "description": [
                "Whether the Vulkan backend supports non-coherent framebuffer fetch"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether the Surface supports EGL_KHR_lock_surface3."
            ],
            "name": "supportsLockSurfaceExtension",
            "display_name": "supportsLockSurfaceExtension",
            "category": "VulkanFeatures",
            "description": [
                "Surface supports the EGL_KHR_lock_surface3 extension"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "When mutable_render_buffer goes into SINGLE_BUFFER mode, need to call swapbuffers at",
                "flush and finish so that the image is updated and presented to the display."
            ],
            "name": "swapbuffersOnFlushOrFinishWithSingleBuffer",
            "display_name": "swapbuffersOnFlushOrFinishWithSingleBuffer",
            "category": "VulkanFeatures",
            "description": [
                "Bypass deferredFlush with calling swapbuffers on flush or finish when in Shared Present ",
                "mode"
            ],
            "bug": "http://anglebug.com/6878"
        },

        {
            "comment": [
                "Whether dithering should be emulated."
            ],
            "name": "emulateDithering",
            "display_name": "emulateDithering",
            "category": "VulkanFeatures",
            "description": [
                "Emulate OpenGL dithering"
            ],
            "bug": "http://anglebug.com/6755"
        },

        {
            "comment": [
                "Android bug workaround which assumes VkPresentRegionsKHR to have a bottom-left origin",
                "instead of top-left as specified by VK_KHR_incremental_present"
            ],
            "name": "bottomLeftOriginPresentRegionRectangles",
            "display_name": "bottomLeftOriginPresentRegionRectangles",
            "category": "VulkanWorkarounds",
            "description": [
                "On some platforms present region rectangles are expected to have a bottom-left origin, ",
                "instead of top-left origin as from spec"
            ],
            "bug": "None"
        },

        {
            "comment": [
                "Whether we force submit updates to immutable textures."
            ],
            "name": "forceSubmitImmutableTextureUpdates",
            "display_name": "forceSubmitImmutableTextureUpdates",
            "category": "AppWorkarounds",
            "description": [
                "Force submit updates to immutable textures"
            ],
            "bug": "http://anglebug.com/6929"
        },

        {
            "comment": [
                "Whether we retain SPIR-V debug information to aid in analyzing shader code."
            ],
            "name": "retainSpirvDebugInfo",
            "display_name": "retainSpirvDebugInfo",
            "category": "VulkanFeatures",
            "description": [
                "Retain debug info in SPIR-V blob."
            ],
            "bug": "http://anglebug.com/5901"
        },

        {
            "comment": [
                "Whether we create a Vulkan pipeline with 'default' state during glLinkProgram"
            ],
            "name": "createPipelineDuringLink",
            "display_name": "createPipelineDuringLink",
            "category": "VulkanFeatures",
            "description": [
                "Create pipeline with default state during glLinkProgram"
            ],
            "bug": "http://anglebug.com/7046"
        }
    ]
}
