{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3905aa58_659b96ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-09T20:29:57Z",
      "side": 1,
      "message": "PTAL",
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b4b1b61_1399a87b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-09T20:31:40Z",
      "side": 1,
      "message": "@syoussefi@chromium.org - if you can provide some info on the optimization you had in mind to the shader i can work on a follow up change that implements that",
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51689c1f_f213c1c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-10T02:08:21Z",
      "side": 1,
      "message": "Thank you, I just wanted to say we should be able to remove some meaningless combinations by doing this:\n\n- Pull the entire shader into a header file\n- Have ImageCopy.frag include it, also a new ImageCopyFloat.frag include it\n- Move the YUV and MS flags to ImageCopyFloat.frag.json\n- Have UtilsVk choose between ImageCopy and ImageCopyFloat\n\nThat should remove 16 impossible combinations with YUV/MS and int/uint src and destination.",
      "parentUuid": "3b4b1b61_1399a87b",
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "229ba48d_68d71ab5",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-09T20:31:40Z",
      "side": 1,
      "message": "i wasnt sure if it better to have this as `sampler2DMS`, any suggestions?",
      "range": {
        "startLine": 36,
        "startChar": 26,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28e6a91b_c54b8014",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-10T02:12:00Z",
      "side": 1,
      "message": "What does the spec require? If it\u0027s supposed to resolve the image, then you should pass in the sample count, have a loop and read all the samples and calculate the average.\n\nMaybe we can verify this with a test? The test could use `gl_SampleID` to initialize the samples differently, then after the copy you can verify the average value is copied. I happen to have written a similar test just the other day you can copy a lot from: https://chromium-review.googlesource.com/c/angle/angle/+/5917026",
      "parentUuid": "229ba48d_68d71ab5",
      "range": {
        "startLine": 36,
        "startChar": 26,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e49040e_005d4307",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-10T16:09:59Z",
      "side": 1,
      "message": "the spec is unclear when it comes to interaction between `glCopyTexImage2D` and MSAA but i am using this sentence as the basis for implementation -\n```\nThe image is taken from the current color buffer exactly as if these arguments were\npassed to ReadPixels \n```\nand it looks like re: MSAA, the `glReadPixels` spec says something to the effect of \"combine samples in an implementation defined way\"\n\nso, for consistency we will need to resolve it but should this be independent of sample coverage or any such state?",
      "parentUuid": "28e6a91b_c54b8014",
      "range": {
        "startLine": 36,
        "startChar": 26,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a1dfb7_adf19b6c",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-10T17:51:25Z",
      "side": 1,
      "message": "So in glReadPixels we were allowed to not resolve and copy sample 0 instead? Where does the spec say that?",
      "parentUuid": "5e49040e_005d4307",
      "range": {
        "startLine": 36,
        "startChar": 26,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6037ea34_f8653172",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-10T19:02:32Z",
      "side": 1,
      "message": "\u003e Where does the spec say that?\n\ni saw this in the \"16.2. COPYING PIXELS\" section -\n```\nIf the source formats are floating-point or normalized types, the sample values for\neach pixel are resolved in an implementation dependent manner\n```\nbut looking at it again, it looks like this applies only to blits\n\nfor simplicity, do i just hardcode sample \u003d\u003d 0 in the `texelFetch` and call it a day?",
      "parentUuid": "84a1dfb7_adf19b6c",
      "range": {
        "startLine": 36,
        "startChar": 26,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de5b4443_7edba4e0",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-10T02:12:00Z",
      "side": 1,
      "message": "`params.srcMip` doesn\u0027t make sense here. It happens to be 0, so you\u0027re always reading sample 0.",
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd89cf21_3a6603e0",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ImageCopy.frag",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-10-10T16:09:59Z",
      "side": 1,
      "message": "yup, will introduce a new `params.sampleCount` to help with the for-loop",
      "parentUuid": "de5b4443_7edba4e0",
      "revId": "922d65a188a3cc7db887127775d3399db0a99f1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}