{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6d555104_8bbb4b72",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-24T13:20:55Z",
      "side": 1,
      "message": "i am unable to access the bug but this should really be dictated by the AHB usage flags since this EGLImage could end up creating a texture target that is a color attachment. So, something like -\n```\nif (AHB has sampling usage)\n{\n    // validate support for `HasNonRenderableTextureFormatSupport`\n}\n\nif (AHB has rendering usage)\n{\n    // validate support for `HasFullTextureFormatSupport`\n}\n```",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d46d0fa0_00a80c34",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-24T13:26:24Z",
      "side": 1,
      "message": "That probably makes sense, but I figured if the format is not renderable, then the application would be stopped from using it as a color attachment at the _GLES_ level already, don\u0027t you think so?\n\nLike say the AHB has ASTC format (assuming that\u0027s possible), the app can\u0027t render to ASTC because of GLES validation, and that\u0027s independent from whether the source is AHB or not.\n\nOh, or is it the case that you can have an AHB with say RGBA8 but without the renderable usage and you still cannot render into it? In that case, the problem really is that we\u0027re missing the usage check, changing the format check wouldn\u0027t fix that.",
      "parentUuid": "6d555104_8bbb4b72",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88110c9e_a6973713",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-09-24T13:52:44Z",
      "side": 1,
      "message": "I think we only need to verify that we can sample (minimal usage) here. Later on (see ref), we check if we can render to this texture and set mRenderable. EGL images skip some of the format renderability checks because the frontend doesn\u0027t always know the full format.",
      "parentUuid": "d46d0fa0_00a80c34",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08ef5d94_5a98e6e5",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-24T16:15:45Z",
      "side": 1,
      "message": "\u003e if the format is not renderable, then the application would be stopped from using it as a color attachment at the GLES level already, don\u0027t you think so?\n\nnot really. The app can choose AHB usage much before it \"imports\" memory into any API. AHB module will have no idea if Vulkan API is capable of supporting sampling / rendering to a particular format\n\n\u003e you can have an AHB with say RGBA8 but without the renderable usage and you still cannot render into it?\n\nyes. say we have format RGB565, some vendors can render to it but some cant. An app will ideally have a fallback mechanism where it tries creating an EGLImage with AHB RGB565 format + rendering usage and if that fails it falls back to RGBA888 or some other format\n\n\u003e I think we only need to verify that we can sample (minimal usage) here\n\nthis function is called by EGL validation layer to make sure to error out and emit error code per spec -\n```\nIf \u003ctarget\u003e is EGL_NATIVE_BUFFER_ANDROID and \u003cbuffer\u003e was created\nwith properties (format, usage, dimensions, etc.) not supported by\nthe EGL implementation, the error EGL_BAD_PARAMETER is generated.\"\n```",
      "parentUuid": "88110c9e_a6973713",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb227b1e_4731645c",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-09-24T16:56:58Z",
      "side": 1,
      "message": "Agree with what Geoff said. This is just to ensure AHB is at least useful. The render ability will be validated when it is attached to FBO. The spec mohan pasted above just says it can be supported by EGL implementation, it does not say you have to do a full validation. I don\u0027t think this change will break EGL conformance (at least it passes bots).",
      "parentUuid": "08ef5d94_5a98e6e5",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79a4fd4f_83187781",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-09-24T17:07:05Z",
      "side": 1,
      "message": "\u003e The render ability will be validated when it is attached to FBO\n\nbut that is too late for validation, it is more of a run time failure. Validation should really happen during image creation\n\n\u003e just says it can be supported by EGL implementation\n\nbut if a vendor cant support it we need to error out and fail validation, right?\n\n\u003e I don\u0027t think this change will break EGL conformance\n\nNot surprised, GLES / EGL conformance testing esp. as it relates to platform specific extensions is almost non-existent",
      "parentUuid": "eb227b1e_4731645c",
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "160c3e4d_efe514d6",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-09-24T13:52:44Z",
      "side": 1,
      "message": "ref",
      "range": {
        "startLine": 455,
        "startChar": 0,
        "endLine": 477,
        "endChar": 5
      },
      "fixSuggestions": [
        {
          "fixId": "bebd07cf_c67a9fd8",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
              "range": {
                "startLine": 455,
                "startChar": 0,
                "endLine": 456,
                "endChar": 0
              },
              "replacement": "    if (isExternal)  // ref\n"
            }
          ]
        }
      ],
      "revId": "ece08227b15b4787a874f8b7e0b890b9ca91772c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}