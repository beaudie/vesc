{
  "comments": [
    {
      "key": {
        "uuid": "c3118199_12e0c629",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 455,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T13:57:42Z",
      "side": 1,
      "message": "nit: ANGLE doesn\u0027t use underscores in variable names.",
      "range": {
        "startLine": 455,
        "startChar": 40,
        "endLine": 455,
        "endChar": 71
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a264fde_51aa85d9",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 455,
      "author": {
        "id": 1184734
      },
      "writtenOn": "2020-01-28T14:03:32Z",
      "side": 1,
      "message": "What do you suggest?",
      "parentUuid": "c3118199_12e0c629",
      "range": {
        "startLine": 455,
        "startChar": 40,
        "endLine": 455,
        "endChar": 71
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e9b86f2_6d566414",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 455,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T14:07:25Z",
      "side": 1,
      "message": "Can we just leave it as mContextLost? My understanding is a bit vague.",
      "parentUuid": "3a264fde_51aa85d9",
      "range": {
        "startLine": 455,
        "startChar": 40,
        "endLine": 455,
        "endChar": 71
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a6931ec_c9a2c05b",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 455,
      "author": {
        "id": 1184734
      },
      "writtenOn": "2020-01-28T15:26:20Z",
      "side": 1,
      "message": "The issue is we don\u0027t want people setting mContextLost outside of setContextLost, because if they do, the value will get out of sync with mSkipValidation. Because this is an unusual and hard-to-test-well case, it\u0027s nice to make it harder to prevent someone from unknowingly changing mContextLost without also setting mSkipValidation.\n\nHere\u0027s an instance where Firefox used this naming scheme to prevent accidentally changing an invariant:\nhttps://searchfox.org/mozilla-beta/rev/41b192c8f0b7a361c56d081da88a9ef1bd79bdec/dom/canvas/WebGLContext.h#359",
      "parentUuid": "4e9b86f2_6d566414",
      "range": {
        "startLine": 455,
        "startChar": 40,
        "endLine": 455,
        "endChar": 71
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d333ecda_72450898",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 455,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T15:48:06Z",
      "side": 1,
      "message": "Feel free to leave a comment next to the variable. Should be safe as mContextLost.",
      "parentUuid": "4a6931ec_c9a2c05b",
      "range": {
        "startLine": 455,
        "startChar": 40,
        "endLine": 455,
        "endChar": 71
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d8cc046_b2772c53",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-17T12:05:34Z",
      "side": 1,
      "message": "Could you make this function check a single member variable?",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2dc84fd_adf959e0",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1184734
      },
      "writtenOn": "2020-01-28T13:55:17Z",
      "side": 1,
      "message": "Updated, PTAL!",
      "parentUuid": "0d8cc046_b2772c53",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5c6fb4d_7874867a",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T13:57:42Z",
      "side": 1,
      "message": "It\u0027s checking a member function then a member variable. How about we make it check a single cached variable? It\u0027s on the hottest path.",
      "parentUuid": "c2dc84fd_adf959e0",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5199541b_747fa9fd",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T14:07:25Z",
      "side": 1,
      "message": "How about ASSERT(!isContextLost() || !mSkipValidation) ?",
      "parentUuid": "f5c6fb4d_7874867a",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e3720bc_3f6c7042",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1184734
      },
      "writtenOn": "2020-01-28T15:26:20Z",
      "side": 1,
      "message": "I can do this if you want, but I will state my general preference for relying on empty branch eliding in optimized builds, rather than more convoluted ASSERT expressions:\nhttps://godbolt.org/z/9WzBPe\n(Comment out #define NDEBUG to re-enable the assert)",
      "parentUuid": "5199541b_747fa9fd",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4312504b_5ee59164",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 3
      },
      "lineNbr": 517,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-28T15:48:06Z",
      "side": 1,
      "message": "I like the more complex assert. It\u0027s how we have done this in the past.",
      "parentUuid": "1e3720bc_3f6c7042",
      "range": {
        "startLine": 517,
        "startChar": 9,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "eed8b5d9d243672c6097f966cd74c813f467a282",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}