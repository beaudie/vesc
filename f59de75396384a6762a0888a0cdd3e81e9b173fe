{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "72fdb032_314e7826",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T15:49:54Z",
      "side": 1,
      "message": "Could you please expand on this?\n\n\u003e 5) How should this extension be enabled via EGL?\n\u003e\n\u003e    PROPOSED: If a context is successfully created supporting\n\u003e    KHR_robustness (see issue 10 of that spec), the EGL 1.5 spec and\n\u003e    EGL_EXT_create_context_robustness extensions will be modified to\n\u003e    *allow* (but not require) support of\n\u003e    GL_KHR_robust_buffer_access_behavior as well.\n\nDoesn\u0027t look there\u0027s a correct way in the spec, the context is allowed to not even advertise support for the extension.\n\nIs CTS somehow expecting that robust access is exposed even on contexts without robustness? Otherwise what entity is requiring this change?",
      "revId": "f59de75396384a6762a0888a0cdd3e81e9b173fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6257576_8a363930",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2024-01-29T17:05:13Z",
      "side": 1,
      "message": "\u003eIs CTS somehow expecting that robust access is exposed even on contexts without robustness?\n\nI think this is the case. The test cases I am looking at are `KHR-NoContext.es32.robust_buffer_access_behavior.*`\nWithout this change, the tests are ran as \u0027Not Supported\u0027 but with this change the tests are able to run. It\u0027s possible that this is just a CTS test bug where it is querying support incorrectly.",
      "parentUuid": "72fdb032_314e7826",
      "revId": "f59de75396384a6762a0888a0cdd3e81e9b173fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd9a812_ec50eee8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-29T17:07:39Z",
      "side": 1,
      "message": "Worth investigating, we can get the test fixed if that\u0027s the case.\n\nAlso, and I\u0027m just guessing, how is a \"NoContext\" test checking context extensions? ðŸ˜„",
      "parentUuid": "c6257576_8a363930",
      "revId": "f59de75396384a6762a0888a0cdd3e81e9b173fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f48ae0f_36ec0ad4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2024-01-27T03:29:43Z",
      "side": 1,
      "message": "PTAL. Isn\u0027t this the way to properly expose the extension? If so, how should I go about all these failing tests?",
      "revId": "f59de75396384a6762a0888a0cdd3e81e9b173fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}