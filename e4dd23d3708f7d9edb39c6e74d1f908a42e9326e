{
  "comments": [
    {
      "key": {
        "uuid": "c69f806c_f7a5f3cf",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8527,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "This is a lot of code to inline.   Are you sure this is necessary and/or a good idea?",
      "range": {
        "startLine": 8527,
        "startChar": 0,
        "endLine": 8527,
        "endChar": 12
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8bcb7a_fa66df09",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8527,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-09T16:33:29Z",
      "side": 1,
      "message": "This is on my suggestion. I\u0027d keep it for now to minimize the perf hit.",
      "parentUuid": "c69f806c_f7a5f3cf",
      "range": {
        "startLine": 8527,
        "startChar": 0,
        "endLine": 8527,
        "endChar": 12
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cc2fb4_a94cb39a",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8527,
      "author": {
        "id": 1350412
      },
      "writtenOn": "2019-07-09T16:50:11Z",
      "side": 1,
      "message": "This function is called in two places, so it\u0027s not a major detriment to code size. After benchmarking both, there doesn\u0027t seem to be a major performance benefit either way (208.45 -\u003e 208.38, within measurement error).",
      "parentUuid": "c69f806c_f7a5f3cf",
      "range": {
        "startLine": 8527,
        "startChar": 0,
        "endLine": 8527,
        "endChar": 12
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3abde792_ffce07d4",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8527,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T17:09:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44cc2fb4_a94cb39a",
      "range": {
        "startLine": 8527,
        "startChar": 0,
        "endLine": 8527,
        "endChar": 12
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e17ba68_e87623cd",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8531,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "These should probably be uint32_t:\n\nhttps://google.github.io/styleguide/cppguide.html#Integer_Types\n\u003cstdint.h\u003e defines types like int16_t, uint32_t, int64_t, etc. You should always use those in preference to short, unsigned long long and the like, when you need a guarantee on the size of an integer. Of the C integer types, only int should be used. When appropriate, you are welcome to use standard types like size_t and ptrdiff_t.",
      "range": {
        "startLine": 8531,
        "startChar": 4,
        "endLine": 8531,
        "endChar": 17
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135f1504_737fa02b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8531,
      "author": {
        "id": 1350412
      },
      "writtenOn": "2019-07-09T16:50:11Z",
      "side": 1,
      "message": "Changed to uint_fast32_t (which seems to be unsigned long under the hood). uint32_t gives a perf hit (208.38 -\u003e 209.58).",
      "parentUuid": "2e17ba68_e87623cd",
      "range": {
        "startLine": 8531,
        "startChar": 4,
        "endLine": 8531,
        "endChar": 17
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cfd1db6_882bf1fa",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8531,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T17:09:11Z",
      "side": 1,
      "message": "Hm, I suspect the change in performance is just noise since uint32_t is most likely typedef\u0027ed to unsigned long under the covers anyway (or at least some other functionally equivalent 32b type).\n\nI\u0027ve never heard of uint_fast32_t before though, so that\u0027s good to learn about.   It doesn\u0027t look like you\u0027re relying on the value being exactly 32b, so it should be safe to use.",
      "parentUuid": "135f1504_737fa02b",
      "range": {
        "startLine": 8531,
        "startChar": 4,
        "endLine": 8531,
        "endChar": 17
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14d62982_08211801",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8531,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-09T17:13:45Z",
      "side": 1,
      "message": "It is possible that uint_fast32_t is using 64 bits, and that ulong is 64 bits on some archs. From previous conversations with James I\u0027m pretty confident in his measurements.",
      "parentUuid": "1cfd1db6_882bf1fa",
      "range": {
        "startLine": 8531,
        "startChar": 4,
        "endLine": 8531,
        "endChar": 17
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ca18b69_92effb5d",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8538,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "Why are you duplicating these values so the same 16b value is in both the upper and lower 16b?",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3912e58_08b94f0c",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8538,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-07-09T16:33:29Z",
      "side": 1,
      "message": "Long explanation but essentially the \"ComponentTypeMask\" is a 2-bits-per-element bit mask with the second bits in the upper word. The duplicated masks here allow us to use bitwise operations on the component type masks.",
      "parentUuid": "1ca18b69_92effb5d",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c72efcb_6667c1b6",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8538,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T17:09:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a3912e58_08b94f0c",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d03e2ab9_cda4102b",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8544,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "Can you break this line up and explain what information you\u0027re collecting with these operations?   As in, what does \"(arrayAttribTypeBits ^ currentValueTypeBits) \u0026 currentValueActiveBits\" mean in plain english?",
      "range": {
        "startLine": 8542,
        "startChar": 0,
        "endLine": 8544,
        "endChar": 80
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46292801_d334efb7",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8544,
      "author": {
        "id": 1350412
      },
      "writtenOn": "2019-07-09T16:50:11Z",
      "side": 1,
      "message": "a ^ ((a ^ b) \u0026 m) \u003d b \u0026 m | a \u0026 ~m, but saves one operation. Basically, when the current value should be used, we select the corresponding bits from the current value type bits, and otherwise we use the array attrib type bits.",
      "parentUuid": "d03e2ab9_cda4102b",
      "range": {
        "startLine": 8542,
        "startChar": 0,
        "endLine": 8544,
        "endChar": 80
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43c7e080_9f7f3025",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8544,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T17:09:11Z",
      "side": 1,
      "message": "I\u0027m more interested in why you\u0027re doing these particular operations.   With a pen and paper we can figure out that you\u0027re doing \"Selects bits from arrayAttribTypeBits where the bit in currentValueActiveBits is 0 and the bits from currentValueTypeBits where the bit is 1\", but not why you\u0027re doing that or what these particular operations mean.\n\nI think it would be helpful to explain each step along the way so we don\u0027t lose what you\u0027re learned in here:\n// The resulting value indicates which attribute types...something something...\noutputTypeBits \u003d arrayAttribTypeBits ^ currentValueTypeBits;\n// We only care about the attributes that are currently active\noutputTypeBits \u0026\u003d currentValueActiveBits;\n\netc.\n\nThe code should still be optimized and compiled down to the same instructions, but it would help make it clearer to us what\u0027s going on the next time someone is in here.",
      "parentUuid": "46292801_d334efb7",
      "range": {
        "startLine": 8542,
        "startChar": 0,
        "endLine": 8544,
        "endChar": 80
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8947cb51_23acfb04",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8544,
      "author": {
        "id": 1350412
      },
      "writtenOn": "2019-07-09T17:20:41Z",
      "side": 1,
      "message": "How is the following explanation:\n\nSince a ^ (a ^ b) \u003d b and a ^ 0 \u003d a, we can mask (arrayAttribTypeBits ^ currentValueTypeBits) with currentValueActiveBits and then XOR with arrayAttribTypeBits to perform the selection.",
      "parentUuid": "43c7e080_9f7f3025",
      "range": {
        "startLine": 8542,
        "startChar": 0,
        "endLine": 8544,
        "endChar": 80
      },
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "043c627e_c8176972",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8549,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "Same as above.   Why are you duplicating these values into both halves of the uint32?   Can you skip the duplication and just do shifts into either the upper or lower halves?",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "460fe372_bd99453e",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8549,
      "author": {
        "id": 1350412
      },
      "writtenOn": "2019-07-09T16:50:11Z",
      "side": 1,
      "message": "Explained above; this OR makes it so for each index the lower bit is 1 if either bit is mismatched.",
      "parentUuid": "043c627e_c8176972",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c80afc6_148e3e37",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 8549,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T17:09:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "460fe372_bd99453e",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5b1df8_e950bbae",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 4
      },
      "lineNbr": 393,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-07-09T16:24:27Z",
      "side": 1,
      "message": "Using a cached value implies we call this more than onDefaultVertexAttributeChange() + onDefaultVertexAttributeChange().   Is that the case?\n\nSince Jamie\u0027s concerned about performance, what does it look like if you just do all the work in here to check the value rather than computing a cached value?",
      "revId": "e4dd23d3708f7d9edb39c6e74d1f908a42e9326e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}