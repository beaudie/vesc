{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "00a00e4f_bc425976",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-11T17:11:15Z",
      "side": 1,
      "message": "Is it really worthwhile to use tail call here? IMO, this would be simpler and more straightforward to read by simply make two steps calls:\n1) From GL_ClientWaitSync(), the first clientWaitSync call always set timeout to 0, which should made it do submission etc, but without any wait.\n2) If returnValue is not complete, then you make another call clientWaitSyncUnLocked, which should only need to wait for mUse to finish (which itself is thread safe). The first call already did submission etc.\n\nI think this way code is much easier to read and no need to pass around function pointers etc.",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "764502c9_83db21fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:25:48Z",
      "side": 1,
      "message": "i see what you mean but a couple of things -\n\n1. we will need to distinguish from the usecase where the app itself sent in timeout `0`\n2. the entry point no longer is a pass through and will now start having code that does different things in different entry points (note that we need to do similar call for `glClientWaitSync` as well)\n3. depending on what you mean by \"If returnValue is not complete\" we will need to handle many different return value types from different backends. i am not sure how this would be a simpler approach",
      "parentUuid": "00a00e4f_bc425976",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7259ccf_ccf8df3d",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 8
      },
      "lineNbr": 3071,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "```suggestion\n    # - eglClientWaitSyncKHR, eglClientWaitSync, glClientWaitSync -\u003e May wait on\n        fence in tail call\n```",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8721010_2ab04123",
        "filename": "scripts/generate_entry_points.py",
        "patchSetId": 8
      },
      "lineNbr": 3071,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:14:54Z",
      "side": 1,
      "message": "Done in next patchset",
      "parentUuid": "b7259ccf_ccf8df3d",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "754dbfe1_2aeedcbc",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1252,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-11T17:11:15Z",
      "side": 1,
      "message": "Thanks for fixing the bug here, that otherwise result may not been set if it is already finished.\n\n(Minor) Suggest to combine this line and {1270, 1273} to 1275.",
      "range": {
        "startLine": 1252,
        "startChar": 9,
        "endLine": 1252,
        "endChar": 15
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d1905e2_dc1c8a1b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1252,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:17:54Z",
      "side": 1,
      "message": "\u003e Thanks for fixing the bug here, that otherwise result may not been set if it is already finished.\n\nif you have a link to change and bug that implemented this block i can separate out this change into its own while tagging the old commit / anglebug\n\n\u003e (Minor) Suggest to combine this line and {1270, 1273} to 1275.\n\ncan\u0027t, see comment below",
      "parentUuid": "754dbfe1_2aeedcbc",
      "range": {
        "startLine": 1252,
        "startChar": 9,
        "endLine": 1252,
        "endChar": 15
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1f18e01_b2c1ce32",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1272,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-11T17:11:15Z",
      "side": 1,
      "message": "nit: better to move to line 1275",
      "range": {
        "startLine": 1272,
        "startChar": 0,
        "endLine": 1272,
        "endChar": 82
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eafa1524_a5433973",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1272,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:17:54Z",
      "side": 1,
      "message": "cant do that since it is possible that we broke out of the while in line 1263 in which case we should not update `result`",
      "parentUuid": "d1f18e01_b2c1ce32",
      "range": {
        "startLine": 1272,
        "startChar": 0,
        "endLine": 1272,
        "endChar": 82
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a3c6847_3fa0814e",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 90,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "This case is now reachable if there is a device loss. If you pass in the `angle::Result` that\u0027s the result of `waitForResourceUseToFinishWithUserTimeout`, you can appropriately handle that, and avoid the `(void)` cast too.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e23720c8_67cbeeaf",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "Wrong type: should be `EGLint`",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "615c9105_65be3f97",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:14:54Z",
      "side": 1,
      "message": "Done in next patchset",
      "parentUuid": "e23720c8_67cbeeaf",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "209cebd2_d2c38cf0",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "ditto",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb3583c_c775cb03",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 168,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "Please return `Continue`. `Incomplete` was a mistake, and I\u0027m going to remove it. Instead, return `VK_INCOMPLETE` in `resultOut`.",
      "range": {
        "startLine": 168,
        "startChar": 11,
        "endLine": 168,
        "endChar": 36
      },
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8dc192_28220187",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 220,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "Please move this to after the wait, I don\u0027t think we should skip the wait because of display termination.\n\nSo something like:\n\n```\nif (resultOut !\u003d nullptr)\n{\n    mappingFunction(...);\n}\n```",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cc744f4_e51848db",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 220,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:14:54Z",
      "side": 1,
      "message": "\u003e I don\u0027t think we should skip the wait because of display termination\n\nwanted to ask this earlier but under what usecase would a tail call added by `eglClientWaitSync` be called by `Display::terminate`?\n\ni see no preemption point between the tail call being added and the tail call being `run(...)` in the thread calling `eglClientWaitSync`\n\n\u003e I don\u0027t think we should skip the wait because of display termination\n\nthe app can\u0027t call `eglClientWaitSync` after it has called `eglTerminate` so why does `Display::terminate` have to wait when it doesn\u0027t care about sync status?",
      "parentUuid": "ec8dc192_28220187",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50893557_a6e1467d",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-11T14:32:39Z",
      "side": 1,
      "message": "I think you could simplify this change by having only the `clientWait()` function and pass in a new parameter like `enum class ClientWaitScope { Unlocked, Locked, }`, then instead of returning incomplete, it would do something like this:\n\n```\nwait \u003d [...](...) { ... };\nif (scope \u003d\u003d ClientWaitScope::Locked)\n{\n    wait(...);\n}\nelse\n{\n    egl::Display::GetCurrentThreadUnlockedTailCall()-\u003eadd(wait);\n}\n```",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf3fce35_a84131ee",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-11T17:14:54Z",
      "side": 1,
      "message": "this will in fact complicate the change since it changes `SyncHelperInterface` which is being used by classes like `FenceNVVk`\n\ni initially started off with updating `clientWait` like how you laid it out but then ran into `FenceNVVk` issues. Decided to add new method instead with the added advantage that the \"old path\" will still be available for vendors to switch back to if desired",
      "parentUuid": "50893557_a6e1467d",
      "revId": "9ef3f3d29363ed49d3b9f98750690c9f773f4cd9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}