{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "29929c8c_66e40de7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-27T04:21:34Z",
      "side": 1,
      "message": "An option to avoid the extra overhead of validation (if it turns out to be non-negligible) is for the spec not to mandate an error return value, but instead say \"if you use anything but these, PLS planes may lose their data\". It\u0027s not great for debugging though.\n\nWe could also say they _may_ return an error, and then make that check conditional to build-with-Chromium, but that\u0027s hacky.\n\nI\u0027m mostly concerned with the fact that every app is going to pay this validation cost even though WebGL is the only user in practice (for now at least).\n\nLet\u0027s hope measurements show it to be negligible :-S",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "141102cc_b4bab6b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-28T15:58:25Z",
      "side": 1,
      "message": "How can I verify the perf impact? Are there perf bots that run representative benchmarks?",
      "parentUuid": "29929c8c_66e40de7",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b709dc21_e3bed95d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-28T16:12:03Z",
      "side": 1,
      "message": "`./angle_perftests` You can use the `--gtest_filter\u003d*null*` tests to strictly measure overhead coming from the front-end.",
      "parentUuid": "141102cc_b4bab6b2",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e870bb3e_668f8ba4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-29T03:07:20Z",
      "side": 1,
      "message": "Here are the wall times from 2 runs on my MacBook:\n\nhttps://docs.google.com/spreadsheets/d/1rxhg0teW7NF_xqbL2nXdaSpTvlUklu2kmzgCeBeoUP0/edit?usp\u003dsharing\n\nThe allow list geometric mean is suspiciously 1.5% faster than HEAD, which I attribute to noise?\n\nI have the other data as well if there\u0027s another result I should be looking at.\n\nThoughts?",
      "parentUuid": "b709dc21_e3bed95d",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da84ff5b_5de4c4b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-29T03:19:09Z",
      "side": 1,
      "message": "The new branches should get really good branch prediction, so my hypothesis was that the measurements would be negligible.",
      "parentUuid": "e870bb3e_668f8ba4",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69376f69_88d271ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-29T04:04:39Z",
      "side": 1,
      "message": "\u003e The new branches should get really good branch prediction\n\nThat was the plan üòä\n\n\u003e Here are the wall times from 2 runs on my MacBook\n\nTwo questions:\n\n- Have you locked any CPU clocks?\n- How repeatable are the runs?\n\nIt might very well be that you are at the whims of the kernel, laptop temperature etc, so the data isn\u0027t meaningful. Remind me to take some measurements on my side on Pixel 6 next week as well.",
      "parentUuid": "da84ff5b_5de4c4b0",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2735b177_f8424bce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-29T05:39:12Z",
      "side": 1,
      "message": "\u003e Have you locked any CPU clocks?\n\nI ran with sudo ¬Ø\\\\\\_(„ÉÑ)_/¬Ø\n\n(When I didn\u0027t use sudo I got `Warning: setpriority failed in StabilizeCPUForBenchmarking`, so I assume _something_ is happening)\n\n\u003e How repeatable are the runs?\n\nI did another run of HEAD (Sheet 2) and got a geometric mean of 367 instead of 370. So within 1%.\n\n\u003e Remind me to take some measurements on my side on Pixel 6 next week as well.\n\nWill do!",
      "parentUuid": "69376f69_88d271ca",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c33e0c9_9eae68ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-31T21:52:15Z",
      "side": 1,
      "message": "What info are we missing to make a decision on this change (one way or another)? Just benchmark info on Pixel 6? Anything else I can help with?\n\n(Yes, this is also my reminder to check Pixel 6 üòÅ)",
      "parentUuid": "2735b177_f8424bce",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7ec62a_539d535e",
        "filename": "extensions/ANGLE_shader_pixel_local_storage.txt",
        "patchSetId": 18
      },
      "lineNbr": 418,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-27T04:21:34Z",
      "side": 1,
      "message": "There\u0027s another thing to add here. We should disallow the depth/stencil attachment to be simultaneously bound as sampler. We support that in the Vulkan backend by juggling between writable and read-only layout for depth/stencil, but that can lead to render pass breaks.\n\nSee `ContextVk::updateActiveTextures` where we `flushCommandsAndEndRenderPass` for more context. Note that simultaneous read-only depth attachment (depth test without write) and sampler is not a feedback loop, which is otherwise disallowed in the spec.",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b6ce628_1da2163f",
        "filename": "extensions/ANGLE_shader_pixel_local_storage.txt",
        "patchSetId": 18
      },
      "lineNbr": 418,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-28T15:58:25Z",
      "side": 1,
      "message": "Thanks for catching that. I added your comment to https://docs.google.com/document/d/1BsXxar1gbJ_w-Xvy76VbgmLOgB3qON6BY6YB5LVOqwo/edit",
      "parentUuid": "be7ec62a_539d535e",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9872d74_b33945eb",
        "filename": "extensions/ANGLE_shader_pixel_local_storage.txt",
        "patchSetId": 18
      },
      "lineNbr": 418,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-29T04:04:39Z",
      "side": 1,
      "message": "Thanks. You might also want to add at least an `ANGLE_PERF_WARNING` when we break the render pass (on `vulkan/`, and maybe `metal/`?) if PLS is active, that should help both us catching cases that should be banned, and developers understand why data is lost / performance is bad.",
      "parentUuid": "3b6ce628_1da2163f",
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4fbe146_7c03823d",
        "filename": "src/libGLESv2/entry_points_gles_2_0_autogen.cpp",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-27T04:21:34Z",
      "side": 1,
      "message": "A little worried about CPU overhead here, have you made any measurements? My gut feeling says `inline` this function, along with everything that\u0027s called by the `if` inside it. That\u0027s usually how we deal with conditional stuff in the hot path:\n\n```\ninline func()\n{\n    if (inlinable_expression())\n    {\n        function_call_that_does_heavy_work();\n    }\n}\n```\n\nI\u0027d also keep an eye out on binary size with your current implementation and the inline one, how much does inlining save us on the CPU and hurt us in binary size?",
      "range": {
        "startLine": 62,
        "startChar": 14,
        "endLine": 62,
        "endChar": 47
      },
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be8ce1b3_9cde3623",
        "filename": "src/libGLESv2/entry_points_gles_2_0_autogen.cpp",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-28T15:58:25Z",
      "side": 1,
      "message": "Here\u0027s the damage on binary size:\n\n```\n                                 Bytes    Multiplier\nOriginal                       9059176        1.0000\nAllowlist function             9070136        1.0012\nAllowlist function (inline)    9072888        1.0015\n\n```\n\n0.15% from adding an allow list. The inline vs not seems pretty negligible, so inline seems like a good idea.",
      "parentUuid": "f4fbe146_7c03823d",
      "range": {
        "startLine": 62,
        "startChar": 14,
        "endLine": 62,
        "endChar": 47
      },
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1c79550_3e366829",
        "filename": "src/libGLESv2/entry_points_gles_2_0_autogen.cpp",
        "patchSetId": 18
      },
      "lineNbr": 62,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-28T16:12:03Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "be8ce1b3_9cde3623",
      "range": {
        "startLine": 62,
        "startChar": 14,
        "endLine": 62,
        "endChar": 47
      },
      "revId": "64f38b55deccfa1ceee76d3378672f5e85a31f04",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}