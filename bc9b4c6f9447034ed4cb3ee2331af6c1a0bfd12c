{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "60d553f5_9abab0b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-03-19T18:58:20Z",
      "side": 1,
      "message": "lgtm when this passes tests. Thank you for persisting in this substantial rethinking of this area.\n\n`conformance2/glsl3/varying-struct-inline-definition.html` is failing on all platforms; is the problem in this CL or in the test?",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d72e57f6_57a8bbe6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-03-20T08:40:07Z",
      "side": 1,
      "message": "It\u0027s an existing bug in shader output variable initialization code for webgl. need to fix that first before proceeding.",
      "parentUuid": "60d553f5_9abab0b7",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d7fdf20_9b9bccfa",
        "filename": "src/compiler/translator/tree_ops/SeparateDeclarations.cpp",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2024-03-19T18:58:20Z",
      "side": 1,
      "message": "typo: stuct with -\u003e struct with",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd4707a_ea95deba",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8948,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-03-21T18:51:51Z",
      "side": 1,
      "message": "Alexey: here\u0027s the question:\nhow can different VS types v_s0, v_s1\nbe consider same types in FS?\n\nFS v_s0 \u003d\u003d v_s1 --\u003e error\n\nVS v_s0 \u003d\u003d v_s1 --\u003e no error",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9da3f3_d600b805",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8948,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2024-03-21T20:19:44Z",
      "side": 1,
      "message": "Here\u0027s my understanding of the specs.\n\n`v_s0` and `v_s1` have different types during compilation (\"unnamed struct\") and therefore cannot be compared inside a shader; `v_s0 \u003d\u003d v_s1` should be a compile error both in VS and FS. This would match C++ btw.\n\nOn the other hand, shader interface matching between the stages ignores struct type names and checks only their members. This is explicitly mentioned in ES 3.1/3.2 specs:\n\u003e Variables or block members declared as structures are considered to match in type if and only if structure members match in name, type, qualification, and declaration order.",
      "parentUuid": "5bd4707a_ea95deba",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c322d463_16c1cf5d",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8997,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-03-21T18:51:51Z",
      "side": 1,
      "message": "same here",
      "revId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*Unresolved-Comment-Reason:.*\""]}
      },
      "patchSetCommitId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bc9b4c6f9447034ed4cb3ee2331af6c1a0bfd12c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}