{
  "comments": [
    {
      "key": {
        "uuid": "1837db6e_963d8e75",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-02-15T05:15:27Z",
      "side": 1,
      "message": "Maybe in some benchmark this shows an improvement, but this could hit a finishToSerial if the buffer is in use by the GPU. That\u0027s definitely not better than closing a renderpass.\n\nIdeally, you want the condition to say:\n\n    if (host_visible \u0026\u0026 !in_use_by_gpu \u0026\u0026 renderpass_started)\n\nSo:\n\n- If not host visible, convert on GPU (only option)\n- If in use by the GPU, convert on GPU (to avoid finishToSerial, making CPU wait for GPU) and suffer the renderpass closing.\n- (this is an optimization) If no render pass is started, convert on GPU (faster than CPU)\n\n---\n\nAlso, I\u0027m fairly certain the benchmark is not filling the buffer inside the renderpass, so ideally this operation should be reordered and done before the renderpass starts (so this change is unnecessary altogether). Jamie, is the new graph capable of doing such a thing? Charlie, was this breaking the renderpass using the old command graph?",
      "range": {
        "startLine": 880,
        "startChar": 20,
        "endLine": 880,
        "endChar": 55
      },
      "revId": "ac3faae2f4037bd58b43c1f2e3837a01ac3a10b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b4e28b5_33382f08",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-02-18T05:50:27Z",
      "side": 1,
      "message": "It is using dynamic buffer which my understanding is always allocate new space to avoid hitting finishToSerial. Yes it will use more memory, but not more than the GPU copy as well. Regardless CPU or GPU, both are using dynamic buffer.\n\nThe glBufferData call probably not in the render pass. But the conversion happens not at bufferData time but at draw time since data type was only known at draw time. So it will break the render pass.\n\nThis is with command graph disabled. If you look at my test example (attached to the bug), it cut the GPU time in half, partly because the GPU copy prevents the glClear call folds into the draw call.",
      "parentUuid": "1837db6e_963d8e75",
      "range": {
        "startLine": 880,
        "startChar": 20,
        "endLine": 880,
        "endChar": 55
      },
      "revId": "ac3faae2f4037bd58b43c1f2e3837a01ac3a10b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45719051_64e654ac",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 880,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-02-18T12:56:32Z",
      "side": 1,
      "message": "Manhattan and T-Rex don\u0027t need reordering here. As Charlie said we\u0027re about to draw with the buffer anyway. It is possible that we could instrument a path that doesn\u0027t use the GPU at all with host coherent memory.",
      "parentUuid": "4b4e28b5_33382f08",
      "range": {
        "startLine": 880,
        "startChar": 20,
        "endLine": 880,
        "endChar": 55
      },
      "revId": "ac3faae2f4037bd58b43c1f2e3837a01ac3a10b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2239f632_64368c10",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 883,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-02-18T15:40:11Z",
      "side": 1,
      "message": "Is the offset here always going to be 0?",
      "range": {
        "startLine": 883,
        "startChar": 80,
        "endLine": 883,
        "endChar": 81
      },
      "revId": "ac3faae2f4037bd58b43c1f2e3837a01ac3a10b7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}