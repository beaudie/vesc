{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d250be2_d3062a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:31:52Z",
      "side": 1,
      "message": "I\u0027ve found this error particularly annoying with suppressions where parts of one suppression covers another suppression with different conditions (like Vulkan vs SwiftShader).\n\nThe expectation files are _proabably_ going to become a mess though, so not sure how I feel about it.\n\nAbout the inconvenience mentioned in the commit message, maybe it\u0027s a workflow thing? What I normally do for it is:\n\n```\n# Get the roll CL (short cut `d3` in gerrit):\n$ git fetch https://chromium.googlesource.com/angle/angle refs/changes/... \u0026\u0026 git cherry-pick FETCH_HEAD\n$ vim \u003cexpectations file\u003e\n$ git commit --amend  # remove autoroller footer, including Change-Id\n$ git cl upload\n```\n\nThat vs:\n\n```\n$ vim \u003cexpectations file\u003e\n$ git commit  # Add Bug tag\n$ git cl upload\n```\n\nis a very small difference.\n\n---\n\nDon\u0027t get me wrong, I don\u0027t like the \"unused\" warning, it\u0027s annoyed me many times before. But I\u0027m neutral on this change, if you don\u0027t mind, I\u0027d like to defer this decision to @ynovikov@chromium.org who deals with infra a lot.",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e313df53_ad85bf9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T15:38:55Z",
      "side": 1,
      "message": "Yuly is OOO next week as well. Let\u0027s just move forward with this, we can always revert if there is strong disagreement.",
      "parentUuid": "5d250be2_d3062a94",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83171d22_b810be19",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T15:45:27Z",
      "side": 1,
      "message": "And yes, I do see getting everything about manual roll right as an inconvenience, but not just that, a manual roll is entirely unnecessary. The beauty of automated rolls is that you know exactly how they were made. Manually patched rolls should be avoided when possible IMO. This CL (and its potential consequences) is such a small price to pay for having this option.",
      "parentUuid": "e313df53_ad85bf9f",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6cdc1c8b_d8deddb3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-01-26T15:48:32Z",
      "side": 1,
      "message": "\u003e The beauty of automated rolls is that you know exactly how they were made. Manually patched rolls should be avoided when possible IMO.\n\nThe way I see it, if you suppress in one CL and the roll is in another CL, you lose that association. If you bundle them together, it\u0027s clear why the suppression was made, reverts are \"cleaner\" etc.\n\nBut ok, I\u0027m not particularly vested in this, +2 from me, please revert if Yuly disagrees.",
      "parentUuid": "83171d22_b810be19",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3cfff10_53b51ff3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T15:54:55Z",
      "side": 1,
      "message": "You do lose that association but a roll is not going to be reverted anyways. If anything, there will be something like an upstream fix coming in as a separate roll, and the association will be lost anyways. So I don\u0027t think it\u0027s worth the trouble of a manual roll.",
      "parentUuid": "6cdc1c8b_d8deddb3",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4591261_635c5c48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T15:56:25Z",
      "side": 1,
      "message": "And let\u0027s not forget one particularly annoying aspect of that manual roll: getting +2 from a _human_ to be able to submit it.",
      "parentUuid": "d3cfff10_53b51ff3",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dcc7a0c_fd9a200f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-01-26T19:03:02Z",
      "side": 1,
      "message": "I personally feel it is good to keep the `unused expectation check` to make sure expectation file is as clean as possible. But let\u0027s see what Yuly says.",
      "parentUuid": "f4591261_635c5c48",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7ca6ed8_9944e658",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T19:33:47Z",
      "side": 1,
      "message": "I would encourage everyone to think of this in terms of sets of pros and cons rather than focusing on one particular aspect. Besides, why would it be a big deal to have an \"unused\" expectation in some of those expectation files, like what kind of risk is this really protecting us against? And why would we have this check enabled specifically in deqp but not other suites?",
      "parentUuid": "5dcc7a0c_fd9a200f",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c20cdc3_eb484a82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-01-26T21:37:17Z",
      "side": 1,
      "message": "\u003e Besides, why would it be a big deal to have an \"unused\" expectation in some of those expectation files\n\nIt helps reducing the confusion. e.g. in the future when people review the items in expectation files, they will notice that it doesn\u0027t make a difference when removing / adding the item. Then it might take them 10 ~ 15 min to figure out what\u0027s wrong? I agree it is a very minor thing comparing to guarding mechanism that prevents memory leak / invalid access issues. Maybe a solution would be adding a comment in the file mentioning \"some items might be outdated and no longer used by the test suites, feel free to remove them if you find it is the case.\"\n\n\u003e And why would we have this check enabled specifically in deqp but not other suites?\n\nGood point. It might be it is not easy for other suites to get a full test name lists comparing the deqp?",
      "parentUuid": "f7ca6ed8_9944e658",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4eed61e6_59f77e04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2024-01-26T22:11:00Z",
      "side": 1,
      "message": "\u003e they will notice that it doesn\u0027t make a difference when removing / adding the item\n\nIn order for this to happen, either 1) the corresponding test would have to be removed (could be renamed) upstream or 2) the entry would have be incorrectly added (e.g. making a mistake in the test name) and forgotten like this.\n\n2) seems fairly unlikely as adding an item with a mistake would not solve the original issue and whoever is making this change will likely just fix the mistake\n\nIn case of 1), work still needs to happen, and IMO even more work than what you described: the wrangler needs to figure out what went wrong with the test, how to update the expectations file appropriately, manually create a patched roll, get a +2 from a team member. Does this additional (repeated) load justify the benefit of not having to deal with basically the same issue in future, just once when reviewing the entire expectation file?\n\nNote how this CL allowed me to submit https://crrev.com/c/5238216. No manually patched rolls, no need to get a +2 - it just gets rubberstamped. Automated rolls can continue.\n\nOne thing we could do is have some additional tooling to help us catch some specific cases including this one, but reviewing expectation files is such a niche use case that I wouldn\u0027t really expect anyone to remember this thing even exists by the time they get to doing the work. Besides, I feel like it would be such a tiny help compared to the amount of other work that needs to happen when reviewing expectations. Maybe we can revisit this thread in future if this actually turns out to be a bigger deal than I\u0027m expecting?",
      "parentUuid": "5c20cdc3_eb484a82",
      "revId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6a7e17408e5afa44f6d49150ca82a14da998f553",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}