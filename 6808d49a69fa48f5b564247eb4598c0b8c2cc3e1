{
  "comments": [
    {
      "key": {
        "uuid": "1be66487_adb882f7",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-20T21:08:44Z",
      "side": 1,
      "message": "Why are you creating a vector out of an array? You could just do:\n\n`std::vector\u003cint\u003e alignments \u003d {2, 4, 8, 16, 32, 64, 128};`\n\nOr just use the array without creating a vector out of it.",
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c68ca6d_830447b1",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-02-20T23:42:22Z",
      "side": 1,
      "message": "I had originally started on a more randomized approach using std::iota on the array but realized there was a very limited set of interesting alignments. Yes, will update this directly assign vector.",
      "parentUuid": "1be66487_adb882f7",
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b634d917_1d1c0d01",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-02-20T21:08:44Z",
      "side": 1,
      "message": "The test needs to be a lot harsher. You are allocating once (which means it\u0027s from the beginning of the first allocated page), and the size is a nice 1024. How about something like this?\n\n    size_t numBytes[100] \u003d { /* a sequence of randomly generated positive values with mean 1000 and std 1000 */ };\n    for (int alignment : alignments)\n    {\n        // Create a default pool allocator and allocate from it\n        PoolAllocator poolAllocator(2048, alignment);\n        for (int bytes : numBytes)\n        {\n            void *allocation \u003d poolAllocator.allocate(bytes);\n            // Verify alignment of allocation matches expected default\n            EXPECT_EQ(0u, (reinterpret_cast\u003cstd::uintptr_t\u003e(allocation) % alignment));\n        }\n    }",
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c971b5f8_70ec8da5",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-20T21:46:08Z",
      "side": 1,
      "message": "fyi we have randomizers in random_utils.h.",
      "parentUuid": "b634d917_1d1c0d01",
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fd538df_0d4959cc",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-02-20T23:42:22Z",
      "side": 1,
      "message": "Yep, thanks for the suggestions. The existing tests were preliminary as I was investigating alignment behavior in the PoolAllocator.",
      "parentUuid": "c971b5f8_70ec8da5",
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38dc9c6_ef1db1b1",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-20T20:18:32Z",
      "side": 1,
      "message": "this is a good use case for parameterized tests:\n\nhttps://github.com/google/googletest/blob/master/googletest/docs/advanced.md#value-parameterized-tests",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 9
      },
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18db90b9_b7d5013d",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-02-20T23:42:22Z",
      "side": 1,
      "message": "I looked at this and existing examples of parameterized tests in ANGLE code. For a case as simple as this where it\u0027s just the alignment value changing using parameterized tests seems like low ROI as the test is more obscure (at least to me) for the limited benefit of having the alignment parameters broken out into separate test cases.",
      "parentUuid": "b38dc9c6_ef1db1b1",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 9
      },
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7c23a69_cdc6eea9",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-21T14:38:09Z",
      "side": 1,
      "message": "It\u0027s not as bad as most examples. Try this:\n\nclass PoolAllocatorAlignmentTest : public testing::TestWithParam\u003cint\u003e {};\n\nTEST_P(PoolAllocatorAlignmentTest, Alignment)\n{\n   int alignment \u003d GetParam();\n   .. test goes here ..\n}\n\nINSTANTIATE_TEST_SUITE_P(, PoolAllocatorAlignmentTest, testing::Values(2, 4, 8, 16, 32, 64, 128));\n\nIMO it looks good. What do you think?",
      "parentUuid": "18db90b9_b7d5013d",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 9
      },
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "517a1f12_6974c5fa",
        "filename": "src/common/PoolAlloc_unittest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 173,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-02-21T14:43:29Z",
      "side": 1,
      "message": "Yes, that looks good. Much simpler than the documentation. :)",
      "parentUuid": "f7c23a69_cdc6eea9",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 173,
        "endChar": 9
      },
      "revId": "6808d49a69fa48f5b564247eb4598c0b8c2cc3e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}