{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "df8e5747_76c2ccd0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T20:39:27Z",
      "side": 1,
      "message": "This will mess up with std::unique_lock tracking though. Now you are doing lock/unlock directly on mMutex and std::unique_lock has its own tracking of if it owns the lock or not, and this makes unique_lock\u0027s tracking inaccurate.\n\nWe want the code between unlock and relock to be minimum, explicit lock/unlock is not a bad idea though. I am not fan of this CL.",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e65cf8d_d304a851",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-09T20:53:21Z",
      "side": 1,
      "message": "I agree it\u0027s weird to pass `mMutex`. It\u0027s fine IMO if `lock` itself is passed in.\n\nI\u0027d take C code any day, but in this C++ world using scope this way _is_ better. Like if `ANGLE_VK_TRY` actually fails here the manual `lock()` won\u0027t get called, and the caller would get confused. This change fixes that.",
      "parentUuid": "df8e5747_76c2ccd0",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fca774c6_d3f6d2b7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T21:00:05Z",
      "side": 1,
      "message": "If it takes std::unique_lock, that would be okay.",
      "parentUuid": "3e65cf8d_d304a851",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f0f670_4667e2fe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T21:29:14Z",
      "side": 1,
      "message": "Actually the std::unique_lock already does the automatic unlock when leaving the scope.",
      "parentUuid": "fca774c6_d3f6d2b7",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}