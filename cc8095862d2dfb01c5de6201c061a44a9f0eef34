{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "df8e5747_76c2ccd0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T20:39:27Z",
      "side": 1,
      "message": "This will mess up with std::unique_lock tracking though. Now you are doing lock/unlock directly on mMutex and std::unique_lock has its own tracking of if it owns the lock or not, and this makes unique_lock\u0027s tracking inaccurate.\n\nWe want the code between unlock and relock to be minimum, explicit lock/unlock is not a bad idea though. I am not fan of this CL.",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e65cf8d_d304a851",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-09T20:53:21Z",
      "side": 1,
      "message": "I agree it\u0027s weird to pass `mMutex`. It\u0027s fine IMO if `lock` itself is passed in.\n\nI\u0027d take C code any day, but in this C++ world using scope this way _is_ better. Like if `ANGLE_VK_TRY` actually fails here the manual `lock()` won\u0027t get called, and the caller would get confused. This change fixes that.",
      "parentUuid": "df8e5747_76c2ccd0",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fca774c6_d3f6d2b7",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T21:00:05Z",
      "side": 1,
      "message": "If it takes std::unique_lock, that would be okay.",
      "parentUuid": "3e65cf8d_d304a851",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57f0f670_4667e2fe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T21:29:14Z",
      "side": 1,
      "message": "Actually the std::unique_lock already does the automatic unlock when leaving the scope.",
      "parentUuid": "fca774c6_d3f6d2b7",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1537d5a_d78065d1",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-09T21:34:45Z",
      "side": 1,
      "message": "Yes it does. This class is the opposite of that, it\u0027s a scoped _unlock_. I.e. it unlocks for the duration of the scope (then locks it back)",
      "parentUuid": "57f0f670_4667e2fe",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b5cb56_b062a591",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-02-09T21:45:42Z",
      "side": 1,
      "message": "Right, but the bug that if ANGLE_VK_TRY fail does not exit.\n\nActually there is another problem here with ScopedUnlock. localSharedFenceToWaitOn must be destroyed with lock held. Right now it is. With the ScopedUnlock, it becomes a bit tricky. If you switch lines 1134 and 1135, you have a bug. It becomes a bit tricky and risky.\n\nIf you really want to make it safe, maybe solution here is to make a helper function that does the unlock/fenceWait/lock.",
      "parentUuid": "f1537d5a_d78065d1",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82c39e3d_963d6a9f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-02-10T03:05:35Z",
      "side": 1,
      "message": "\u003e Actually there is another problem here with ScopedUnlock. localSharedFenceToWaitOn must be destroyed with lock held. Right now it is\n\nYou\u0027re right, ScopedUnlock would have to add another scope. Definitely better to move the scopedunlock + wait to a helper function and contain the logic there.",
      "parentUuid": "a5b5cb56_b062a591",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12db3aca_4801f350",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-10T13:41:48Z",
      "side": 1,
      "message": "\u003e This will mess up with std::unique_lock tracking though. Now you are doing lock/unlock directly on mMutex and std::unique_lock has its own tracking of if it owns the lock or not, and this makes unique_lock\u0027s tracking inaccurate.\n\nOriginally I passed `lock` into the `unlock`, but then decided to optimize. My logic was that if `lock` is not accessed during `unlock` there is nothing wrong. That is why class name is not a `MutexUnlock` as was before.\n\n\u003e if you switch lines 1134 and 1135, you have a bug. It becomes a bit tricky and risky.\n\nIf you do that there is already a problem making a copy of `sharedFence` without a lock. But agree, it is not as clear as with a separate scope/method.\n\n\u003e  I am not fan of this CL.\n\nMe too. Original class was used in `CommandQueue2` and also my other changes. `CommandQueue2` unlocked `mCommandQueueMutex`, so it was critical to lock back if `ANGLE_VK_TRY` returns. In the current code of `CommandQueue` this is not strictly necessary.",
      "parentUuid": "82c39e3d_963d6a9f",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5eefafb9_80b2761a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-10T14:53:33Z",
      "side": 1,
      "message": "\u003e If you really want to make it safe, maybe solution here is to make a helper function that does the unlock/fenceWait/lock.\n\nMade the function.",
      "parentUuid": "12db3aca_4801f350",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0fa3e41_ac6fb050",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1135,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-02-10T18:39:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5eefafb9_80b2761a",
      "range": {
        "startLine": 1135,
        "startChar": 8,
        "endLine": 1135,
        "endChar": 40
      },
      "revId": "cc8095862d2dfb01c5de6201c061a44a9f0eef34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}