{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3f5df27e_a035135a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "nit: glEndTransformFeedback\n\njust a q about modifying the test - I didn\u0027t quite understand if you were modifying the test to reproduce the issue better, or to work around some other problem?",
      "range": {
        "startLine": 14,
        "startChar": 22,
        "endLine": 14,
        "endChar": 24
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ee7cd0_967a4fb8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "The test was crashing due to failing the assert in TransformFeedbackVk::onDestroy(). I noticed that mCounterBufferHandles have not been released since TransformFeedbackVk::end() was not being called. When I added glEndTransformFeedback() to the test, this was fixed.",
      "parentUuid": "3f5df27e_a035135a",
      "range": {
        "startLine": 14,
        "startChar": 22,
        "endLine": 14,
        "endChar": 24
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e85aa2b_fbfd69b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-10T16:34:48Z",
      "side": 1,
      "message": "That\u0027s a bug - we shouldn\u0027t crash no matter the GL stream really. Can you restore the prior test \u0026 we can figure out how to fix the crash?",
      "parentUuid": "f9ee7cd0_967a4fb8",
      "range": {
        "startLine": 14,
        "startChar": 22,
        "endLine": 14,
        "endChar": 24
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "187e64ad_d8f0484c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-10T19:36:30Z",
      "side": 1,
      "message": "I see. Test restored.\nCould we release the counter buffers in TransformFeedbackVk::onDestroy()? (This patch)",
      "parentUuid": "2e85aa2b_fbfd69b2",
      "range": {
        "startLine": 14,
        "startChar": 22,
        "endLine": 14,
        "endChar": 24
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "251b25bc_f59f193e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "Looks like some test failures. Maybe because of the emplace_back problem?",
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98b4ff98_37314d0a",
        "filename": "src/libANGLE/Buffer.cpp",
        "patchSetId": 8
      },
      "lineNbr": 398,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "I suggest you ignore this message instead of passing it to onStateChange - this will prevent changing our existing behaviour",
      "range": {
        "startLine": 398,
        "startChar": 10,
        "endLine": 398,
        "endChar": 67
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "429c90ff_e43b679c",
        "filename": "src/libANGLE/Buffer.cpp",
        "patchSetId": 8
      },
      "lineNbr": 398,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98b4ff98_37314d0a",
      "range": {
        "startLine": 398,
        "startChar": 10,
        "endLine": 398,
        "endChar": 67
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de252e6_69090bc3",
        "filename": "src/libANGLE/Observer.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-08T20:21:02Z",
      "side": 1,
      "message": "@Jamie, this probably ties in with ARM\u0027s change to avoid reallocating the vertex buffer. I have a feeling this can be used to change how the front-end notifies VertexArray (by not guessing when storage changes).\n\nAll that to say, how about calling this BufferImplStorageChanged or something like that, and make it more centrally used and by all the backends?",
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8881e1_734a089f",
        "filename": "src/libANGLE/Observer.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T20:41:27Z",
      "side": 1,
      "message": "I\u0027d rather stick with this design and tackle other problems separately. We can always rename or join events later. This seems prudent to avoid escalating difficulty / complexity of this change, which is already tricky.",
      "parentUuid": "6de252e6_69090bc3",
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc0a8172_0dcd98f1",
        "filename": "src/libANGLE/Observer.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-08T20:48:16Z",
      "side": 1,
      "message": "I wasn\u0027t suggesting doing that here, just a side note.",
      "parentUuid": "5a8881e1_734a089f",
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde27934_94265ff9",
        "filename": "src/libANGLE/Observer.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-10T16:34:48Z",
      "side": 1,
      "message": "I see. I think we can revisit our design decisions about who maintains the list of observers \u0026 how we manage observers. I\u0027m wondering how much it would make sense to specialize events a lot more, rather than use generic observers \u0026 subjects.",
      "parentUuid": "fc0a8172_0dcd98f1",
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6513fbf7_4f602f1b",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "you can omit this, vector doesn\u0027t need anything here. the other member I believe do need default constructors to get zero-initted.",
      "range": {
        "startLine": 34,
        "startChar": 6,
        "endLine": 34,
        "endChar": 29
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9839bd5d_9a0bc813",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "6513fbf7_4f602f1b",
      "range": {
        "startLine": 34,
        "startChar": 6,
        "endLine": 34,
        "endChar": 29
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21be25c2_f0afe517",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 103,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "I suggest you init all these in the constructor once, using the maximum number of possible bindings.\n\nI believe your code will emplace_back multiple times if we call begin() multiple times, which seems like a bug.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 103,
        "endChar": 5
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82fcfe16_a7e67fcc",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 103,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "Sounds good. Moved to the constructor.",
      "parentUuid": "21be25c2_f0afe517",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 103,
        "endChar": 5
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a13eb83e_bf15144a",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 168,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "nit: explicit type for readability",
      "range": {
        "startLine": 168,
        "startChar": 9,
        "endLine": 168,
        "endChar": 14
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "925e60a8_4948abc6",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 168,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a13eb83e_bf15144a",
      "range": {
        "startLine": 168,
        "startChar": 9,
        "endLine": 168,
        "endChar": 14
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d9a477c_3311a681",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 378,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-08T19:56:30Z",
      "side": 1,
      "message": "please omit this testing code",
      "range": {
        "startLine": 362,
        "startChar": 6,
        "endLine": 378,
        "endChar": 94
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "780a0dd5_9f3864cd",
        "filename": "src/libANGLE/renderer/vulkan/TransformFeedbackVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 378,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2021-12-08T23:11:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d9a477c_3311a681",
      "range": {
        "startLine": 362,
        "startChar": 6,
        "endLine": 378,
        "endChar": 94
      },
      "revId": "e5291b9146f6567584202591f96683b216701dff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}