{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5ab5066a_f9340b0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-13T18:32:57Z",
      "side": 1,
      "message": "PTAL\n\nAlexey: I haven\u0027t had a chance to port the webgl parallel link test to angle yet but I plan to.",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64605086_22bf358c",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-02-14T06:18:37Z",
      "side": 1,
      "message": "Correct me if I\u0027m wrong. This macro doesn\u0027t do any parallelization. It just executes expr immediately, doesn\u0027t it?",
      "range": {
        "startLine": 35,
        "startChar": 8,
        "endLine": 35,
        "endChar": 31
      },
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e7aaadb_eac4cb8c",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-14T18:06:45Z",
      "side": 1,
      "message": "No it doesn\u0027t do any parallelization. It\u0027s just an ANGLE_TRY macro that can be used in functions that need to return a LinkEvent.",
      "parentUuid": "64605086_22bf358c",
      "range": {
        "startLine": 35,
        "startChar": 8,
        "endLine": 35,
        "endChar": 31
      },
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e90fb6c9_891bd340",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 372,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-02-14T06:18:37Z",
      "side": 1,
      "message": "not: Shouldn\u0027t we start with capital C? `CreateMslShaderLib`",
      "range": {
        "startLine": 372,
        "startChar": 14,
        "endLine": 372,
        "endChar": 32
      },
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ed43612_d11f746e",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 372,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-14T18:06:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e90fb6c9_891bd340",
      "range": {
        "startLine": 372,
        "startChar": 14,
        "endLine": 372,
        "endChar": 32
      },
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5cea23_d7c10c7a",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 578,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-02-14T06:18:37Z",
      "side": 1,
      "message": "out of date comment?",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cd45602_161c4b98",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 7
      },
      "lineNbr": 578,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-14T18:06:45Z",
      "side": 1,
      "message": "I hope so but I\u0027m not sure if we have test coverage of transform feedback + program binaries.",
      "parentUuid": "1c5cea23_d7c10c7a",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c80eddaa_098be8ee",
        "filename": "src/libANGLE/renderer/metal/mtl_library_cache.mm",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2023-02-14T12:02:27Z",
      "side": 1,
      "message": "but since entry.library is not atomic, reading it without lock while other thread is writing to it is still a race?\nE.g. theoretically you might read a broken pointer\nOtherwise atomic\u003cint\u003e wouldn\u0027t exist, if this type code was valid?\n\nMoreover, you don\u0027t need to block while the other thread is compiling?\nYou only need to reacquire the entry lock after the compilation is done and write the result, possibly discarding previous result that also compiled and wrote?",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ef33510_544caf3d",
        "filename": "src/libANGLE/renderer/metal/mtl_library_cache.mm",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2023-02-14T12:06:02Z",
      "side": 1,
      "message": "So in practice you maybe lock per map is sufficient, as the get operation is just a read.",
      "parentUuid": "c80eddaa_098be8ee",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ad76d8d_bb92c323",
        "filename": "src/libANGLE/renderer/metal/mtl_library_cache.mm",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-02-14T18:06:45Z",
      "side": 1,
      "message": "Point taken on the atomics, pointer read/writes are atomic on all the architectures we care about but it was not generically safe.\n\nI rewrote it to try_lock on the entry mutex. We want the behaviour in this function to be non-blocking because it\u0027s checked on the main thread during program linking. This also avoids duplicate compiles of the same shader.",
      "parentUuid": "1ef33510_544caf3d",
      "revId": "d2690c36f9eff22a16d299b15cbad82c59df7b72",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}