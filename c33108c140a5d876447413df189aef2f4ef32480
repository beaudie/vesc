{
  "comments": [
    {
      "key": {
        "uuid": "659d539f_3c74ad3f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 11,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-23T06:02:21Z",
      "side": 1,
      "message": "For N\u003c\u003d512, O(N)\u003dO(1) so there\u0027s no value in this statement.\n\nI mean, this is basically cutting down the operations by 64, let\u0027s call it what it is. The fact that log(N)\u003eN/64 for N\u003c512 is not relevant.",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 11,
        "endChar": 50
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa8cdcf8_e8cb76c4",
        "filename": "src/common/FastVector.h",
        "patchSetId": 10
      },
      "lineNbr": 534,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-23T06:02:21Z",
      "side": 1,
      "message": "Suggest to use uint64_t for the intermediary variables (index, offset etc) and let the vector implicitly cast it.\n\n---\n\nWait, this is given the resource serials, but they are monotonically increasing values and are unbounded. As the application runs, this object would use more and more memory, with basically the \"front\" of the vectors mostly unused.\n\nNot sure if this is the best idea.",
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6ad0a4b_21d8cdcb",
        "filename": "src/common/FastVector.h",
        "patchSetId": 10
      },
      "lineNbr": 534,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T14:33:30Z",
      "side": 1,
      "message": "Hey Shabi,\n\nUnderstood on the memory. We have not yet run into a captured app that creates and deletes buffers/textures mid-frame. Can we proceed with this approach for now until we have a more complete solution in place? In the worst case if this flushes out an app that has growth that causes OOM it would still be good to catch.\n\nI was thinking a complete solution would be a hybrid structure where we use either this or abseil map depending on the upper value. We could look at writing a test that triggers this case - just would be good as a follow-up.\n\nAnother potentially good solution is to use unique buffer handles instead of serials. We could reallocate deleted handles if we could purge caches that use the freed handles. This is a bit trickier because of the scattered caches.",
      "parentUuid": "aa8cdcf8_e8cb76c4",
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d411831b_c3a93172",
        "filename": "src/common/FastVector.h",
        "patchSetId": 10
      },
      "lineNbr": 592,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-23T06:02:21Z",
      "side": 1,
      "message": "Unused functionality, you could delete these.",
      "range": {
        "startLine": 572,
        "startChar": 0,
        "endLine": 592,
        "endChar": 5
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09d125d0_39552635",
        "filename": "src/common/FastVector_unittest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 302,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T14:33:30Z",
      "side": 1,
      "message": "nit: KeyValuePair",
      "range": {
        "startLine": 302,
        "startChar": 10,
        "endLine": 302,
        "endChar": 36
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f156e44e_f3608647",
        "filename": "src/common/FastVector_unittest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 323,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T14:33:30Z",
      "side": 1,
      "message": "nit: KeyValuePair",
      "range": {
        "startLine": 323,
        "startChar": 9,
        "endLine": 323,
        "endChar": 14
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3a52b6f_a05816aa",
        "filename": "src/common/FastVector_unittest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 329,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T14:33:30Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 329,
        "startChar": 9,
        "endLine": 329,
        "endChar": 14
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f3d1a4_9369c7ea",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 667,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T14:33:30Z",
      "side": 1,
      "message": "I do feel a bit unsure about using this structure everywhere. Maybe we could change it in one place first and then investigate using it other places.",
      "range": {
        "startLine": 667,
        "startChar": 15,
        "endLine": 667,
        "endChar": 29
      },
      "revId": "c33108c140a5d876447413df189aef2f4ef32480",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}