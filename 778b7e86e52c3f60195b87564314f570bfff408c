{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e4424cbd_2278b0c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-07T15:59:39Z",
      "side": 1,
      "message": "There are white box performance counter tests in VulkanPerformanceCounterTest.cpp that use the PerfCounters struct (vk_utils.h) to verify the load/store ops are being initialized correctly.   For example: VulkanPerformanceCounterTest::InvalidateDisableDraw()\n\nIt sounds like this optimization needs a similar test to ensure that it\u0027s working correctly and doesn\u0027t get broken in the future.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 13
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08d697d2_76a682f5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-07T20:56:22Z",
      "side": 1,
      "message": "The problem is that this specific bug is relying on supportsRenderPassStoreOpNoneQCOM.enabled feature flag. We do not have a QC driver support that yet, so CI wont able to catch anything. And the test will have to check this feature flag as well. Not impossible, but a bit more work here for something that CIwont catch anything right now.",
      "parentUuid": "e4424cbd_2278b0c4",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 13
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "886de3c4_92d74569",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-07T15:59:39Z",
      "side": 1,
      "message": "nit: is used",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 30
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a154c70_ce596967",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-07T22:19:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "886de3c4_92d74569",
      "range": {
        "startLine": 13,
        "startChar": 18,
        "endLine": 13,
        "endChar": 30
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9d5e263_34cbfd7f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-07T15:59:39Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4482914e_e9210125",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-07T22:19:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9d5e263_34cbfd7f",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd1d7a9b_cef2d20e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-07T15:16:17Z",
      "side": 1,
      "message": "Nice find!",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fdea9c6_d2cc3d8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-07T15:59:39Z",
      "side": 1,
      "message": "LGTM with Shabi\u0027s comment and a test.",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eea53d3_44ae0242",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1454,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-07T15:16:17Z",
      "side": 1,
      "message": "How about we keep `resetRenderPassUsageFlags` where it was (at the end of finalize*), but make `finalizeDepthStencilImageLayout` call `finalizeDepthStencilLoadStore` before that itself? It would avoid having to call `resetRenderPassUsageFlags` everywhere.",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "833ac004_76ca4142",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1454,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-07T20:56:22Z",
      "side": 1,
      "message": "IMO, in this kind situation, having a few duplicate lines is worth it so that we can keep code consistency. It actually makes code easier to read. Having finalizeColorImageLayout calling resetRenderPassUsageFlags does not really reflect what the function name implies.",
      "parentUuid": "2eea53d3_44ae0242",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5be8a4c6_2bde7950",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1454,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-07T21:11:11Z",
      "side": 1,
      "message": "It\u0027s easier in my opinion to miss one of these calls and introduce a bug this way. If every finalizeDepthStencilImageLayout must be followed by finalizeDepthStencilLoadStore and then by resetRenderPassUsageFlags in that order, it\u0027s more robust if that order is specified in a single place. Don\u0027t you think so?\n\nRegarding naming, we can always improve that. For example you could call it `onDepthStencilRenderPassUsageEnd` which would be responsible for finalizing things and removing the usage flags.",
      "parentUuid": "833ac004_76ca4142",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "558699e8_4c38f9b3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1454,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-05-07T22:19:09Z",
      "side": 1,
      "message": "I personally value the one funciton does one thing and name reflect what it does more. It makes code much easier to read (you dont need to actually look into the implementation of funcion to understand exact what it does). But anyway, I am moving resetRenderPassUsageFlags back and added finalizeDepthStencilImageLayoutAndLoadStore() for the purpose.",
      "parentUuid": "5be8a4c6_2bde7950",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09033c29_0d7b778c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1454,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-05-09T03:07:20Z",
      "side": 1,
      "message": "Thanks! The change looks much better IMO, good find again!",
      "parentUuid": "558699e8_4c38f9b3",
      "revId": "778b7e86e52c3f60195b87564314f570bfff408c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}