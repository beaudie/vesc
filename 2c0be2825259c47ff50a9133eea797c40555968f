{
  "comments": [
    {
      "key": {
        "uuid": "239765c6_9faff786",
        "filename": "src/libANGLE/Buffer.cpp",
        "patchSetId": 37
      },
      "lineNbr": 63,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-01-18T15:46:28Z",
      "side": 1,
      "message": "Could also just pass the gl::Context and let the impl cast to the desired type directly.",
      "range": {
        "startLine": 63,
        "startChar": 29,
        "endLine": 63,
        "endChar": 51
      },
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_b2fab5bf",
        "filename": "src/libANGLE/Buffer.cpp",
        "patchSetId": 37
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-19T16:29:31Z",
      "side": 1,
      "message": "Was thinking about this when I was making these functions. I went from a high-level point of view: the Impl classes shouldn\u0027t have any access to the gl:: classes as much as currently possible.",
      "parentUuid": "239765c6_9faff786",
      "range": {
        "startLine": 63,
        "startChar": 29,
        "endLine": 63,
        "endChar": 51
      },
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "239765c6_7fc4eb3e",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 37
      },
      "lineNbr": 293,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-01-18T15:46:28Z",
      "side": 1,
      "message": "Can be written as:\n\n    template \u003ctypename SrcT\u003e\n    auto SafeGetImpl(SrcT *src) -\u003e decltype(src-\u003egetImplementation())\n    {\n        return src ? src-\u003egetImplementation() : nullptr;\n    }",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 293,
        "endChar": 69
      },
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_f2d94d63",
        "filename": "src/libANGLE/angletypes.h",
        "patchSetId": 37
      },
      "lineNbr": 293,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-19T16:29:31Z",
      "side": 1,
      "message": "Thanks, this is helpful. Done. (I had thought it was against style guide to use return type auto, but it doesn\u0027t appear to be)",
      "parentUuid": "239765c6_7fc4eb3e",
      "range": {
        "startLine": 291,
        "startChar": 0,
        "endLine": 293,
        "endChar": 69
      },
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "239765c6_a2ae5a41",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 37
      },
      "lineNbr": 36,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-01-18T15:48:38Z",
      "side": 1,
      "message": "note: We could ask multiple vendors what usage bits \"work well together\" so that we minimize the number of backing buffers.",
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_925e99f7",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 37
      },
      "lineNbr": 36,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-19T16:29:31Z",
      "side": 1,
      "message": "Added to TODO list in the design doc.",
      "parentUuid": "239765c6_a2ae5a41",
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "239765c6_02be2e72",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 37
      },
      "lineNbr": 52,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-01-18T15:48:38Z",
      "side": 1,
      "message": "nit: Ideally at some point we start doing suballocations. Creating a memory allocation is very very expensive.",
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6854da0e_326da5ab",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 37
      },
      "lineNbr": 52,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-01-19T16:29:31Z",
      "side": 1,
      "message": "Added TODO",
      "parentUuid": "239765c6_02be2e72",
      "revId": "2c0be2825259c47ff50a9133eea797c40555968f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}