{
  "comments": [
    {
      "key": {
        "uuid": "b767a531_b77b8fe0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-31T14:47:42Z",
      "side": 1,
      "message": "adding Ken to help triage this. Ken, how do we report possible Metal bugs?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 53
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6af8f3c_130f8826",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2020-07-31T18:08:45Z",
      "side": 1,
      "message": "The best way is probably for us to file a bug report via Feedback Assistant on your behalf. But first - Kai, Corentin, Austin - have you run into this bug before and have you already reported it to Apple?\n\nQuyen, if they haven\u0027t run into this and reported it - could you log in to that tool, prepare a draft according to their template, and send us all of the information? Also could you prepare a small standalone test case that can be compiled with Xcode? Thanks much.",
      "parentUuid": "b767a531_b77b8fe0",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 53
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e84ba30_3eb560fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1306173
      },
      "writtenOn": "2020-07-31T18:15:48Z",
      "side": 1,
      "message": "We haven\u0027t seen this, but we don\u0027t use [MTLTexture getBytes]. In WebGPU you can only map buffers, and reading anything on the CPU must first copy through a buffer. This is good to know though in case we have have a UMA extension that allows directly reading a texture on the CPU.\n\nAlso [MTLTexture getBytes] is only valid for textures using MTLStorageModeManaged which means that the driver probably already has some shadow copy somewhere. Dawn only uses MTLStorageModeManaged for IOSurfaces on Mac OS. iOS uses MTLStorageModePrivate.",
      "parentUuid": "c6af8f3c_130f8826",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 53
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40334318_9152cb4d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-08-01T07:26:31Z",
      "side": 1,
      "message": "It seems my suspect of [MTLTexture getBytes]\u0027s bug was wrong.\nThere are two suspected Intel\u0027s driver bugs in this CL:\n- [MTLTexture getBytes]\n- Setting maxLodClamp\u003dFLT_MAX via setSamplerState API.\nI do isolated tests and found out that the real culprit is setting maxLodClamp\u003dFLT_MAX. It caused mipmap test failures on Intel. According to the collected metal traces, texture sampling always incorrectly picked the first mipmap regardless of rendered triangle\u0027s size.\n\nYes, I will try to report to Metal team. Will need to prepare a small standalone sample code for it though.",
      "parentUuid": "7e84ba30_3eb560fc",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 10,
        "endChar": 53
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cad31e0_5eaf51a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-07-31T13:25:10Z",
      "side": 1,
      "message": "If you think it\u0027s caused by intel driver bugs, can you wrap this behavior in a Feature?\nEspecially since the extra blits will probably slow down tests that have a lot of readPixels",
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa0d12b_ec233a2f",
        "filename": "src/libANGLE/renderer/metal/TextureMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 802,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-07-31T13:25:10Z",
      "side": 1,
      "message": "I think this should at least have a bug linked to it, just so we can keep track of various magic numbers/settings that are set because of possible driver issues.",
      "range": {
        "startLine": 800,
        "startChar": 0,
        "endLine": 802,
        "endChar": 0
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a5dad6c_21afc30e",
        "filename": "src/libANGLE/renderer/metal/TextureMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 802,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-31T14:47:42Z",
      "side": 1,
      "message": "+1\n\nEven better would to introduce FeaturesMtl that has a workaround encoded for Intel here.",
      "parentUuid": "3aa0d12b_ec233a2f",
      "range": {
        "startLine": 800,
        "startChar": 0,
        "endLine": 802,
        "endChar": 0
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10361deb_5e4ab960",
        "filename": "src/libANGLE/renderer/metal/TextureMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 802,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-08-03T14:56:32Z",
      "side": 1,
      "message": "Done. I use mState.getSamplerState().getMaxLod() which will always be 1000 for GLES 2.",
      "parentUuid": "7a5dad6c_21afc30e",
      "range": {
        "startLine": 800,
        "startChar": 0,
        "endLine": 802,
        "endChar": 0
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21564822_1f745b4f",
        "filename": "src/libANGLE/renderer/metal/mtl_resources.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2020-07-31T13:25:10Z",
      "side": 1,
      "message": "What\u0027s the reason you\u0027re using a bitfield here?\nIt\u0027s preferred to just add the bools into the struct",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eabeb293_6d7d3d76",
        "filename": "src/libANGLE/renderer/metal/mtl_resources.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-31T14:47:42Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "21564822_1f745b4f",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b44c339f_1707a9b1",
        "filename": "src/libANGLE/renderer/metal/mtl_resources.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-07-31T15:25:51Z",
      "side": 1,
      "message": "Ack. At first I thought using bool would be a waste of space, but actually this struct already has padding, so it already wasting space anw.",
      "parentUuid": "eabeb293_6d7d3d76",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308d666e_f0c28e27",
        "filename": "src/libANGLE/renderer/metal/mtl_resources.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-07-31T15:31:24Z",
      "side": 1,
      "message": "As long as you aren\u0027t hashing or memcmp\u0027ing this struct it should be fine to have some padding. If you are, then make sure to fill in the padding using extra member variables.",
      "parentUuid": "b44c339f_1707a9b1",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a55ec8a8_d6dad2d3",
        "filename": "src/libANGLE/renderer/metal/mtl_resources.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1374244
      },
      "writtenOn": "2020-08-03T14:56:32Z",
      "side": 1,
      "message": "This new flag is not needed in this CL anymore. It will be added in future CL when BufferMtl needs it.",
      "parentUuid": "308d666e_f0c28e27",
      "range": {
        "startLine": 87,
        "startChar": 32,
        "endLine": 87,
        "endChar": 36
      },
      "revId": "0136e225f3f9303547a7a90156422f2ff86e6a6f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}