{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bb2da94e_f1db1e74",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-26T10:18:08Z",
      "side": 1,
      "message": "Why is it set to true?",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd615809_418ed1d5",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-26T11:10:05Z",
      "side": 1,
      "message": "nil color texture is known to be initialized and does not need initialization.",
      "parentUuid": "bb2da94e_f1db1e74",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "812bd79a_26d57556",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-26T17:18:34Z",
      "side": 1,
      "message": "Do you mean\n- some Surface might not have any color texture hence don\u0027t need to initialize color texture. I think every Surface will have a color texture, be it internally created or imported externally.\n- Or newly created metal textures always have zeros as initial data? It might be true but there are cases when the color texture is imported externally, such as `IOSurfaceSurfaceMtl`. In this case, it is not guaranteed that the first use of the texture in ANGLE would have zeros data.\n\nIMO to avoid such bugs and complicated logics such as knowing what type of Surface already have initialized color texture, I think maybe just treating all textures as uninitialized. That would only cost one clear before the 1st use.",
      "parentUuid": "cd615809_418ed1d5",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8557261c_fe232213",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-08-26T20:14:16Z",
      "side": 1,
      "message": "It\u0027s also possible that the EGLSurface is re-created for the same native window and may have contents already.",
      "parentUuid": "812bd79a_26d57556",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4408d72a_f7a463fa",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-27T09:42:32Z",
      "side": 1,
      "message": "\u003e nil color texture is known to be initialized and does not need initialization.\n\nNil color texture has zero pixels.\nNil color texture has zero undefined pixels.\nNil color texture has all its pixels defined.\nColor texture is considered initialized when color texture is nil.\nColor texture contents initialization flag starts as true, because the color texture contents is known to be initialized by the definition that there is no contents. \n\nColor texture initialization flag is modified when color texture is assigned or when the contents is cleared.\n\n\n\u003e imported externally, such as IOSurfaceSurfaceMtl. In this case, it is not guaranteed that the first use of the texture in ANGLE would have zeros data.\n\nThis is beside the point of this patch. However, for the sake of discussion: it\u0027s not defined what should happen, the spec doesn\u0027t say.\n\nHowever, by logic, the surfaces imported via EGL_ANGLE_iosurface_client_buffer are known to be in defined state and not subject to initialization. The API does not make sense otherwise, as it provides mechanism to do a read-only surface. Also the existing code does not work correctly for the inverse assumption case, e.g. the case where creating the Pbuffer surface would clear the underlying IOSurface.\n\n\n\u003e It\u0027s also possible that the EGLSurface is re-created for the same native window and may have contents already.\n\nAlready covered in this patch with the rule that whenever the color buffer is assigned, the contents flag is updated.",
      "parentUuid": "8557261c_fe232213",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a393641_cb69e98f",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-27T10:49:33Z",
      "side": 1,
      "message": "AFAIK `EGL_ANGLE_iosurface_client_buffer` doesn\u0027t say anything about importing the IOSurface as readonly. Hence the readonly statement doesn\u0027t make any sense. Currently the spec allows the IOSurface to be imported as RGB as well, and it would clear the IOSurface\u0027s alpha channel to 1 (as stated in the spec).\n\nRobust resource init spec also has the following overview:\n```\n    This initialization ensures that access will not be provided by the\n    GL to previously allocated data not owned by the application.\n```\nSeems to indicate it should clear the previous data not owned by the application.\n\n\u003e This is beside the point of this patch. However, for the sake of discussion: it\u0027s not defined what should happen, the spec doesn\u0027t say.\n\nIf it\u0027s not the point of this patch, then I think we probably shouldn\u0027t change the way color texture\u0027s initialized flag is set in this CL. This patch is about `clearing depth`, isn\u0027t it? FWIW \"initializing `mColorTextureInitialized` to true because color texture is initially Nil\" is a bit confusing to me. That flag is only used in `initializeContents` to avoid redundant clear. But inside that function, `mColorTexutere` must be **non-nil** by this point. In other words, there is no such case as `nil color texture` for the purposes of considering initializing contents. Color texture is never nil when it\u0027s used, it\u0027s just simply lazily created.\n\nThese are my two cents. Making `mColorTextureInitialized \u003d true` by default could change the way IOSurface pbuffer is initialized currently. That would affect chrome\u0027s assumptions. @Goeff WDYT.",
      "parentUuid": "4408d72a_f7a463fa",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9bd2b9b_76ea55c7",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.h",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-27T12:21:24Z",
      "side": 1,
      "message": "\u003e AFAIK EGL_ANGLE_iosurface_client_buffer doesn\u0027t say anything about importing the IOSurface as readonly.\n\nIt says: you can provide read-only hint.\n\n\u003e Currently the spec allows the IOSurface to be imported as RGB as well, and it would clear the IOSurface\u0027s alpha channel to 1 (as stated in the spec).\n\nDoesn\u0027t invalidate the position of preserving the existing IOSurface contents. It further establishes the position by explaining why it would change.\n\nRobust resource init spec also has the following overview:\n\n\u003e    This initialization ensures that access will not be provided by the\n\u003e    GL to previously allocated data not owned by the application.\n\u003e Seems to indicate it should clear the previous data not owned by the application.\n\nDoes not indicate anything. If app provides an IOSurface as source of pbuffer API, the app says it\u0027s their IOSurface and their contents. Why would they give an IOSurface that contains /etc/passwd in it?\n\nSame as with ANGLE_metal_texture_client_buffer. We don\u0027t clear the texture either. Should we assume that the caller puth /etc/passwd as data to the texture before submitting it to ANGLE_metal_texture_client_buffer?\n\nWhat\u0027s the difference between client-provided IOSurface and client provided MTLTexture?\n\nContrast if the API implementation internally asks IOSurface from the window system API, which doesn\u0027t guarantee the contents come from the caller. So this is the case when using the SurfaceMtl path for drawing to platform window. In this case, it\u0027s natural to flag for clear.\n\n\u003e This is beside the point of this patch. However, for the sake of discussion: it\u0027s not defined what should happen, the spec doesn\u0027t say.\n\u003e If it\u0027s not the point of this patch, then I think we probably shouldn\u0027t change the way color texture\u0027s initialized flag is set in this CL. This patch is about clearing depth, isn\u0027t it?\n\nIt is a bit over the top, but I got a request to write the test and the existing implementation is so buggy that it cannot pass the test due to buggy handling of the color buffer. There\u0027s even skipped tests that this patch fixes.\n\n\u003e FWIW \"initializing mColorTextureInitialized to true because color texture is initially Nil\" is a bit confusing to me. That flag is only used in initializeContents to avoid redundant clear.\n\nIt would reveal its pointlessness when written as:\n    bool mColorTextureInitialized \u003d false;\n    bool mDepthStencilTextureInitialized \u003d true;\n\nWhere obviously these two states should behave the exact same way.\n\n\nTrue is arguably the correct state for the initialization flag for the state machine that covers the texture initialization, and this IMO can be seen from the early outs of the cases that inspect the variable and act on the underlying object.\n\nI can also abandon this patch, it\u0027s not something we neccessarily want have to use in WebKit. I don\u0027t want to go over a simple bool variable so many times.",
      "parentUuid": "4a393641_cb69e98f",
      "range": {
        "startLine": 114,
        "startChar": 9,
        "endLine": 114,
        "endChar": 33
      },
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "834d7f9d_3465f084",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-21T20:05:34Z",
      "side": 1,
      "message": "I think this assignment should be moved to outside this code block. This block is only executed when 1st `[mMetalLayer nextDrawable]` call fails.",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f60ab053_cddef2a1",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-26T09:39:30Z",
      "side": 1,
      "message": "Yep. It\u0027s just that that\u0027s not how the extension is specced..",
      "parentUuid": "834d7f9d_3465f084",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f622d226_696a95df",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-26T09:52:53Z",
      "side": 1,
      "message": "Sorry, I\u0027m confused what the extension is specced.\n\nSetting `mColorTextureInitialized` \u003d false here won\u0027t have any effect in majority of the time. The code block here is meant to be executed as a fallback when there is a timeout when we try to obtain the `CAMetalLayer`\u0027s texture. I don\u0027t think it\u0027s part of any extension.",
      "parentUuid": "f60ab053_cddef2a1",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfe41fbf_5e88af28",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-26T09:54:05Z",
      "side": 1,
      "message": "I understand that the original code also set `mContentInitialized` to false in this block. I think it\u0027s also wrong.",
      "parentUuid": "f622d226_696a95df",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceb32128_5803157b",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-26T09:58:13Z",
      "side": 1,
      "message": "Yeah, the existing code is definitively broken.\nWhat I mean is that:\n\nEGL_ANGLE_robust_resource_initialization does not specify that the color, stencil or depth is cleared after swap. The tests test that, but the spec doesn\u0027t say that.",
      "parentUuid": "bfe41fbf_5e88af28",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0994ae32_ee3731f4",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2024-08-26T10:11:02Z",
      "side": 1,
      "message": "Ok I thought that you originally wanted to clear every texture in the swapchain. Since the swapchain has multiple textures, one clear would have been not enough to implement robust resource init. We would have needed some ways to clear every texture in the swapchain (that\u0027s probably what the original code wanted to do)\n\nIf you just want first swap\u0027s texture to be zeroized then `mColorTextureInitialized` should be `false` by default, shouldn\u0027t it? Currently it is set to `true` in constructor. So the very first swap will contain undefined values.",
      "parentUuid": "ceb32128_5803157b",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1581246c_d1e11c50",
        "filename": "src/libANGLE/renderer/metal/SurfaceMtl.mm",
        "patchSetId": 2
      },
      "lineNbr": 679,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2024-08-26T11:11:11Z",
      "side": 1,
      "message": "Setting it true is the consistent case, the rest of the code was incorrect.",
      "parentUuid": "0994ae32_ee3731f4",
      "revId": "7ce315d5641d5d5ea3e811081a12e1f04a4fa89f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}