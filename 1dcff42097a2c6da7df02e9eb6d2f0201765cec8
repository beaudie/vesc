{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8bd11ac4_e742deb6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-06-09T19:54:49Z",
      "side": 1,
      "message": "Note to reviewers on why I picked you: Mark has been dealing with the AGI hierarchy bugs, and Shabi has more-general understanding of the ANGLE Vulkan back-end.\n\nCreating debug-util markers for AGI, for draw and dispatch is easier than handling gl{Begin|End}Query, because the vkCmd{Begin|End}Query commands can be submitted to either the outer or RP command buffers.  ANGLE submits to both, which made this more difficult.  Which command buffer is used needs to be stored/remembered for when ContextVk::endEventLog() is called by the front end (at the end of processing the gl*Query command).",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2db7cb_aea8aee4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-09T20:02:28Z",
      "side": 1,
      "message": "It\u0027s not actually any more difficult. ANGLE submits queries only either to inside or outside render pass commands, and that\u0027s decided based on the query type. So just like draw and dispatch, which you can tell which CB to write the event to, you can decide based on query-occlusion vs query-timestamp for example.  See the switch-case in QueryVk::begin.\n\nIn short, you shouldn\u0027t need mQueryEventCommands.",
      "parentUuid": "8bd11ac4_e742deb6",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2598532_f76d9d76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-06-09T20:11:45Z",
      "side": 1,
      "message": "By the time ContextVk::endEventLog() is called, it doesn\u0027t know what happened (now in the past).",
      "parentUuid": "cf2db7cb_aea8aee4",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8355a64_19544811",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-10T04:29:11Z",
      "side": 1,
      "message": "Ok. I\u0027m just weary of caching the pointer, instead of say, what query it was (so inside/outside RP can be decided based on that), or just a flag.\n\nAlso, have you tested this with nested queries? For example, how about this?\n\n- Begin Occlusion query\n- Draw\n- Begin Transform feedback query\n- Draw\n- End Occlusion query\n- Draw\n- End Transform feedback query\n\nThese both use in-RP queries\n\nYou should also test this:\n\n- Begin Occlusion query\n- Draw\n- Begin time-elapsed query\n- Draw\n- End Occlusion query\n- Draw\n- End time-elapsed query\n\nThe time-elapsed query uses outside-RP queries.",
      "parentUuid": "d2598532_f76d9d76",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "400e20a3_109c5d16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-06-10T15:25:30Z",
      "side": 1,
      "message": "I understand wary-ness of caching pointers.  I\u0027ll try using a flag.\n\nI also see that some of the query tests are failing, and so I\u0027ll look at those (they fail on Windows which is easier to debug than Android:-), and see that what you suggest is tested.\n\nThanks!",
      "parentUuid": "d8355a64_19544811",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17fa9b6a_56db1ec3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-06-10T19:03:54Z",
      "side": 1,
      "message": "I redid per our discussion, including using an enum (over a bool) that allows for ASSERT testing.",
      "parentUuid": "400e20a3_109c5d16",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32bff0c7_547fdc8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-10T21:14:17Z",
      "side": 1,
      "message": "Pfft, wary and weary are two different words!",
      "parentUuid": "17fa9b6a_56db1ec3",
      "revId": "1dcff42097a2c6da7df02e9eb6d2f0201765cec8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}