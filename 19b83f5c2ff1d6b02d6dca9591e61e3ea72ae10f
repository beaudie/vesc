{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dd215710_547826ae",
        "filename": "src/libANGLE/CLDevice.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-07T15:50:50Z",
      "side": 1,
      "message": "nit: avoid overloading in ANGLE code.\n\nfeel free to file a bug on me to update the style guide with additional wording from the Google guide. The Google guide is somewhat cautious, whereas in ANGLE\u0027s we\u0027ve more firmly against it (with some excpetions)\n\nhttps://google.github.io/styleguide/cppguide.html#Function_Overloading",
      "range": {
        "startLine": 46,
        "startChar": 9,
        "endLine": 46,
        "endChar": 32
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7850fd92_d401bf36",
        "filename": "src/libANGLE/CLDevice.h",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-07T17:40:41Z",
      "side": 1,
      "message": "I changed it, didn\u0027t mind. Though I was explicitely following your link, where it says: \u0027You may overload a function when there are no semantic differences between variants.\u0027 I am curious to see the reason to be more firm once it is documented in the ANGLE style guide.",
      "parentUuid": "dd215710_547826ae",
      "range": {
        "startLine": 46,
        "startChar": 9,
        "endLine": 46,
        "endChar": 32
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56cdcc58_b39d90d6",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-07T15:50:50Z",
      "side": 1,
      "message": "nit: can you refactor the calling code to use the Range class in mathutil.h ? Feel free to update the class there as necessary.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "501a0662_9271b95b",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-07T17:40:41Z",
      "side": 1,
      "message": "I prefer to keep it because it explicitely implements a condition from the OpenCL specs, which I added in a comment.\n\nIn addition I don\u0027t see any benefit in using the Range class in this case, but there are several cons: Using the Range class would add code complexity and susceptibility to errors, because the OpenCL region (offset, size) would have to be converted to a Range (start, end), and it would add an unnecessary dependency to the Range class, just to refactor a single line of code.",
      "parentUuid": "56cdcc58_b39d90d6",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f19d754d_ffc275d5",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-10T14:24:46Z",
      "side": 1,
      "message": "Was thinking about this - can you explain why it\u0027s bad to have dependencies between parts of ANGLE code? Still seems better to me to put range computations in mathutil and share code.",
      "parentUuid": "501a0662_9271b95b",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1b08998_d271505d",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-10T14:35:45Z",
      "side": 1,
      "message": "Dependencies are always a potential point of failure, for example recently when my code broke because it depended on angle::GetModuleDirectory().",
      "parentUuid": "f19d754d_ffc275d5",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79b8a3a9_7c231b28",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-10T15:11:04Z",
      "side": 1,
      "message": "ANGLE typically has utility code like this in helpers that folks can find and reuse, it improves the project, makes it accessible.  I think it is a reasonable request to add it to a util to make the CL code more readable/understandable/maintainable.  You wouldn\u0027t be introducing an external dependency that would add risk.  If someone breaks the util such that it breaks your code, that means ANGLE has regressed and we want to catch it, fix it!",
      "parentUuid": "c1b08998_d271505d",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b025faef_4c53a250",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-10T15:26:28Z",
      "side": 1,
      "message": "I think it is also very readable that I have implemented the overlap check exactly as given in the OpenCL spec. If I refactor it to use the Range class, the offset/size will be converted to start/end, and then it would be very hard to verify if the overlap check was correctly implemented.\nIf I would store instances of ranges somewhere and would use multiple operations of the class, then it would make sense to use it. But we are talking here about a single line of code. The implementation of the range conversion would already take more than that. Please don\u0027t forget the cost/benefit factor.",
      "parentUuid": "79b8a3a9_7c231b28",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e61861e4_68c7c74f",
        "filename": "src/libANGLE/cl_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-10T15:37:05Z",
      "side": 1,
      "message": "My goal is to make code like this usable and accessible for other ANGLE developers.  There is value here.  Can you add a new helper to math_util that aligns to the semantics you want to use here?  It doesn\u0027t have to use Ranges as is, you can modify the class to take offsets, or even create a new class if you prefer.",
      "parentUuid": "b025faef_4c53a250",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 24,
        "endChar": 1
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2918d4db_d0c27cd7",
        "filename": "src/libANGLE/renderer/cl/CLCommandQueueCL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-07T15:50:50Z",
      "side": 1,
      "message": "here and for the other lambdas in this file, prefer explicit captures as these escape the scope.\n\nhttps://google.github.io/styleguide/cppguide.html#Lambda_expressions",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 456,
        "endChar": 10
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4a10186_b4f60b24",
        "filename": "src/libANGLE/renderer/cl/CLCommandQueueCL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-07T17:40:41Z",
      "side": 1,
      "message": "Thanks, changed it in all of my code in ANGLE.",
      "parentUuid": "2918d4db_d0c27cd7",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 456,
        "endChar": 10
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67aad9c5_aef04703",
        "filename": "src/libANGLE/validationCL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2868,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-07T15:50:50Z",
      "side": 1,
      "message": "nit: suggest you make a try macro for this pattern.",
      "range": {
        "startLine": 2864,
        "startChar": 0,
        "endLine": 2868,
        "endChar": 5
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3fd363a_17f868cc",
        "filename": "src/libANGLE/validationCL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2868,
      "author": {
        "id": 1499132
      },
      "writtenOn": "2021-06-07T17:40:41Z",
      "side": 1,
      "message": "Sure, I also prefer to use macros where it improves readablity, but so far I was mainly avoiding them, following the Google C++ style guide: \"Avoid defining macros\".",
      "parentUuid": "67aad9c5_aef04703",
      "range": {
        "startLine": 2864,
        "startChar": 0,
        "endLine": 2868,
        "endChar": 5
      },
      "revId": "19b83f5c2ff1d6b02d6dca9591e61e3ea72ae10f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}