{
  "comments": [
    {
      "key": {
        "uuid": "ea48a7ff_6845cc69",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 11,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Should mention that this will apply to vertex shaders as a workaround.\nAnd about flattening fragment shader inputs, if you end up doing that.",
      "range": {
        "startLine": 11,
        "startChar": 28,
        "endLine": 11,
        "endChar": 44
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_934e4e69",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "As I understood, the reason to flatten is threefold:\n1. GLSL doesn\u0027t support the pragma in fragment shader\n2. Some GLSL implementations have bugs in pragma support in vertex shader\n3. Some GLSL implementations support the pragma in fragment shader in a non-conformant way, applying it to shader inputs, and you want to emulate that behavior\n\nI\u0027m not sure mentioning version 130 is necessary. It confuses me because:\n1. The pragma is supported in versions \u003e\u003d 120\n2. You can\u0027t use invariant in version 110, so you must output to version \u003e\u003d 120, so essentially the condition to use this option is if \"invariant(all)\" is used",
      "range": {
        "startLine": 217,
        "startChar": 44,
        "endLine": 219,
        "endChar": 54
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_7eec598d",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 891,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "nit: this doesn\u0027t check the staticUse field, which is probably fine, but the method would be more like \u0027varyingDefined\u0027 or \u0027varyingCollected\u0027",
      "range": {
        "startLine": 891,
        "startChar": 16,
        "endLine": 891,
        "endChar": 41
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_3ef2d16c",
        "filename": "src/compiler/translator/Compiler.h",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "nit: we should put these methods above the member variable declarations to be consistent with the style guide.. can you fix this?",
      "range": {
        "startLine": 171,
        "startChar": 4,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_fb8448b7",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1510,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "I\u0027m not familiar with TParseContext, does this cover all varying declarations? I.e. arrays and lists of varyings.",
      "range": {
        "startLine": 1510,
        "startChar": 33,
        "endLine": 1510,
        "endChar": 55
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_457239ac",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1524,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "This is very confusing.\n1. For ESSL 1.00 fragment shader we must flatten \"Built-in special variables output from the fragment shader\", which are gl_FragColor and gl_FragData. So, the really mandatory flattening is taken care of in some other place.\n2. To workaround GLSL driver bugs for pragma in vertex shader we should flatten vertex shader outputs in ESSL 1.00 and 3.00. I believe those correspond to EvqVaryingOut and EvqVertexOut.\n3. Flattening input variables of ESSL 1.00 fragment shaders is a violation of the spec, but apparently some drivers implemented the pragma in that way. If we do want to be non conformant and have EvqVaryingIn here, I think it deserves a special comment.",
      "range": {
        "startLine": 1522,
        "startChar": 43,
        "endLine": 1524,
        "endChar": 97
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_c89f404a",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Perhaps I misread the specs, but looks like using gl_Position is mandatory only in ESSL 1.00. Why not wrap it with conditionallyOutputInvariantDeclaration() as well?",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_dec5ba07",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "Oh, looks like it\u0027s also mandatory in GLSL 1.20 and 1.30. I wonder what happens when ESSL 3.00 is translated into these.",
      "parentUuid": "ea48a7ff_c89f404a",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_68df0cff",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "So, gl_FragCoord and gl_PointCoord are non-conformant workarounds, as I\u0027ve mentioned.\nWhat about the variables which invariant(all) should really affect, gl_FragColor and gl_FragData?\nAlso seems gl_FrontFacing should be part of the workaround?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_9b898424",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "I\u0027m sorry, but looks I mislead you here.\nGLSL 1.20.8 chapter 10:\n34. We need to support basic invariance.\nRESOLUTION: Duplicate the OpenGL ES invariant keyword, but only allow its use on user varyings, built-in varyings output from the vertex shader, and the special variables gl_Position and gl_PointSize.\n\nSo, case GL_FRAGMENT_SHADER should be removed.",
      "parentUuid": "ea48a7ff_68df0cff",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_fe8f69cf",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "looking at this now, seems fine, but I think would have been possibly cleaner as a tree traversal/rewriting step.",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 71,
        "endChar": 20
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_28b10493",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 182,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Are you sure about that? I think I\u0027ve seen ANGLE outputting 120 on my Linux workstation.",
      "range": {
        "startLine": 181,
        "startChar": 75,
        "endLine": 182,
        "endChar": 32
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}