{
  "comments": [
    {
      "key": {
        "uuid": "ea48a7ff_6845cc69",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 11,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Should mention that this will apply to vertex shaders as a workaround.\nAnd about flattening fragment shader inputs, if you end up doing that.",
      "range": {
        "startLine": 11,
        "startChar": 28,
        "endLine": 11,
        "endChar": 44
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_4f732f84",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 11,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea48a7ff_6845cc69",
      "range": {
        "startLine": 11,
        "startChar": 28,
        "endLine": 11,
        "endChar": 44
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_934e4e69",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "As I understood, the reason to flatten is threefold:\n1. GLSL doesn\u0027t support the pragma in fragment shader\n2. Some GLSL implementations have bugs in pragma support in vertex shader\n3. Some GLSL implementations support the pragma in fragment shader in a non-conformant way, applying it to shader inputs, and you want to emulate that behavior\n\nI\u0027m not sure mentioning version 130 is necessary. It confuses me because:\n1. The pragma is supported in versions \u003e\u003d 120\n2. You can\u0027t use invariant in version 110, so you must output to version \u003e\u003d 120, so essentially the condition to use this option is if \"invariant(all)\" is used",
      "range": {
        "startLine": 217,
        "startChar": 44,
        "endLine": 219,
        "endChar": 54
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_4fb6cff4",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 7
      },
      "lineNbr": 219,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "OK, I\u0027ll remove the comment about version 130 (it refers to the SH_GLSL_130_OUTPUT enum in ShaderLang.h). You\u0027re correct on the reasons for enabling it, but I don\u0027t think it\u0027s necessary to document them all here; people can read the bug report and comments on this CL.",
      "parentUuid": "ea48a7ff_934e4e69",
      "range": {
        "startLine": 217,
        "startChar": 44,
        "endLine": 219,
        "endChar": 54
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_7eec598d",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 891,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "nit: this doesn\u0027t check the staticUse field, which is probably fine, but the method would be more like \u0027varyingDefined\u0027 or \u0027varyingCollected\u0027",
      "range": {
        "startLine": 891,
        "startChar": 16,
        "endLine": 891,
        "endChar": 41
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_7239323e",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 891,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "Thanks, good point. I was only using this for the built-ins, for which staticUse is implicitly set to true, but it\u0027s better I think to make it \"isVaryingDefined\". Done.",
      "parentUuid": "8a91eb63_7eec598d",
      "range": {
        "startLine": 891,
        "startChar": 16,
        "endLine": 891,
        "endChar": 41
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_3ef2d16c",
        "filename": "src/compiler/translator/Compiler.h",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "nit: we should put these methods above the member variable declarations to be consistent with the style guide.. can you fix this?",
      "range": {
        "startLine": 171,
        "startChar": 4,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_6faf0b92",
        "filename": "src/compiler/translator/Compiler.h",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a91eb63_3ef2d16c",
      "range": {
        "startLine": 171,
        "startChar": 4,
        "endLine": 176,
        "endChar": 60
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_fb8448b7",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1510,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "I\u0027m not familiar with TParseContext, does this cover all varying declarations? I.e. arrays and lists of varyings.",
      "range": {
        "startLine": 1510,
        "startChar": 33,
        "endLine": 1510,
        "endChar": 55
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_52551651",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1510,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "I\u0027m also not very familiar with it, but I think this covers all the cases. At least it covers the ones in the tests. If more tests are written and they fail, then we can fix it.",
      "parentUuid": "ea48a7ff_fb8448b7",
      "range": {
        "startLine": 1510,
        "startChar": 33,
        "endLine": 1510,
        "endChar": 55
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_457239ac",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1524,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "This is very confusing.\n1. For ESSL 1.00 fragment shader we must flatten \"Built-in special variables output from the fragment shader\", which are gl_FragColor and gl_FragData. So, the really mandatory flattening is taken care of in some other place.\n2. To workaround GLSL driver bugs for pragma in vertex shader we should flatten vertex shader outputs in ESSL 1.00 and 3.00. I believe those correspond to EvqVaryingOut and EvqVertexOut.\n3. Flattening input variables of ESSL 1.00 fragment shaders is a violation of the spec, but apparently some drivers implemented the pragma in that way. If we do want to be non conformant and have EvqVaryingIn here, I think it deserves a special comment.",
      "range": {
        "startLine": 1522,
        "startChar": 43,
        "endLine": 1524,
        "endChar": 97
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_126c6ed6",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1524,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "Thanks for pointing these out. I\u0027ve expanded the comment.",
      "parentUuid": "ea48a7ff_457239ac",
      "range": {
        "startLine": 1522,
        "startChar": 43,
        "endLine": 1524,
        "endChar": 97
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_c89f404a",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Perhaps I misread the specs, but looks like using gl_Position is mandatory only in ESSL 1.00. Why not wrap it with conditionallyOutputInvariantDeclaration() as well?",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_dec5ba07",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "Oh, looks like it\u0027s also mandatory in GLSL 1.20 and 1.30. I wonder what happens when ESSL 3.00 is translated into these.",
      "parentUuid": "ea48a7ff_c89f404a",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_6f44eb4f",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 58,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "We don\u0027t translate ESSL 3.00 to those versions. We require desktop GLSL versions 300 and above (I think) in order to handle those shader versions.",
      "parentUuid": "ea48a7ff_dec5ba07",
      "range": {
        "startLine": 58,
        "startChar": 35,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_68df0cff",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "So, gl_FragCoord and gl_PointCoord are non-conformant workarounds, as I\u0027ve mentioned.\nWhat about the variables which invariant(all) should really affect, gl_FragColor and gl_FragData?\nAlso seems gl_FrontFacing should be part of the workaround?",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_9b898424",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T21:08:09Z",
      "side": 1,
      "message": "I\u0027m sorry, but looks I mislead you here.\nGLSL 1.20.8 chapter 10:\n34. We need to support basic invariance.\nRESOLUTION: Duplicate the OpenGL ES invariant keyword, but only allow its use on user varyings, built-in varyings output from the vertex shader, and the special variables gl_Position and gl_PointSize.\n\nSo, case GL_FRAGMENT_SHADER should be removed.",
      "parentUuid": "ea48a7ff_68df0cff",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_0f1e8766",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "I\u0027m really not sure about that. The rules are better declared for #version 300 shaders and above. For all #version 1x0 shaders the rules seem muddy, and it seems that the desktop GL drivers implement the ESSL invariance and linkage rules, modulo bugs in handling of the #pragma.",
      "parentUuid": "ea48a7ff_9b898424",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_b5cb241b",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-23T01:07:56Z",
      "side": 1,
      "message": "Did you mean \"#version 300 es\"? Input varyings invariance is implicit there.\n\nGenerally, in GLSL:\nOnly variables output from a shader (including those that are then input to a subsequent shader) can be candidates for invariance. This includes user-defined output variables and the built-in output variables.\nGLSL 1.20.8 is more explicit:\nThis includes user-defined varying variables, the built-in vertex-side varying variables, and the special vertex variables gl_Position and gl_PointSize.\n\nI think since gl_FragColor and gl_FragData are built-in input variables, they do not fall into that category. Though, I have been mistaken before :)\n\nESSL 1.00.17 paragraph 4.6.4 \"Invariance and Linkage\" says:\nThe invariance of varyings that are declared in both the vertex and fragment shaders must match.\nFor the built-in special variables, gl_FragCoord can only be declared invariant if and only if gl_Position is declared invariant. Similarly gl_PointCoord can only be declared invariant if and only if gl_PointSize is declared invariant. It is an error to declare gl_FrontFacing as invariant. The invariance of gl_FrontFacing is the same as the invariance of gl_Position.\n\nDo you think all desktop GL drivers implement that?",
      "parentUuid": "ea48a7ff_0f1e8766",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_60cb984a",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T01:37:35Z",
      "side": 1,
      "message": "\u003e Did you mean \"#version 300 es\"? Input varyings invariance is\n \u003e implicit there.\n\nI meant both \"#version 300\" and \"#version 300 es\". In the upgrade of the base shading language from version 1.00 to 3.00, when input variables\u0027 invariance became implicit, I think the rules were clarified better than in version 1.00.\n\n \u003e Generally, in GLSL:\n \u003e Only variables output from a shader (including those that are then\n \u003e input to a subsequent shader) can be candidates for invariance.\n \u003e This includes user-defined output variables and the built-in output\n \u003e variables.\n \u003e GLSL 1.20.8 is more explicit:\n \u003e This includes user-defined varying variables, the built-in\n \u003e vertex-side varying variables, and the special vertex variables\n \u003e gl_Position and gl_PointSize.\n \nThe spec text is confusing. While the output variables from the vertex shader are the candidates for invariance, the input variables in the fragment shader have to be marked invariant in versions 1.x of the shading language (both GLSL and ESSL) for linkage to succeed.\n\n \u003e I think since gl_FragColor and gl_FragData are built-in input\n \u003e variables, they do not fall into that category. Though, I have been\n \u003e mistaken before :)\n \nThese are actually built-in output variables.\n\n \u003e ESSL 1.00.17 paragraph 4.6.4 \"Invariance and Linkage\" says:\n \u003e The invariance of varyings that are declared in both the vertex and\n \u003e fragment shaders must match.\n \u003e For the built-in special variables, gl_FragCoord can only be\n \u003e declared invariant if and only if gl_Position is declared\n \u003e invariant. Similarly gl_PointCoord can only be declared invariant\n \u003e if and only if gl_PointSize is declared invariant. It is an error\n \u003e to declare gl_FrontFacing as invariant. The invariance of\n \u003e gl_FrontFacing is the same as the invariance of gl_Position.\n \u003e \n \u003e Do you think all desktop GL drivers implement that?\n\nYes, it looks to me like the invariance requirements between gl_Position and gl_FragCoord, and between gl_PointSize and gl_PointCoord, are enforced well by drivers for version 1.x shaders (both desktop GL and ES). At least, the tests verify this to a certain degree (though I\u0027m not sure they test the effects of the #pragma with these built-ins), and the positive and negative tests both work properly.",
      "parentUuid": "ea48a7ff_b5cb241b",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a91eb63_fe8f69cf",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-07-22T14:00:50Z",
      "side": 1,
      "message": "looking at this now, seems fine, but I think would have been possibly cleaner as a tree traversal/rewriting step.",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 71,
        "endChar": 20
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_8f6e17fb",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "Yes, agree with your point -- let\u0027s do this as a revision though. The TranslatorGLSL was already responsible for outputting the #pragma, which is one reason why I took this approach.",
      "parentUuid": "8a91eb63_fe8f69cf",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 71,
        "endChar": 20
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_28b10493",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 182,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2016-07-22T20:12:21Z",
      "side": 1,
      "message": "Are you sure about that? I think I\u0027ve seen ANGLE outputting 120 on my Linux workstation.",
      "range": {
        "startLine": 181,
        "startChar": 75,
        "endLine": 182,
        "endChar": 32
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea48a7ff_ef023bd8",
        "filename": "src/compiler/translator/TranslatorGLSL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 182,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2016-07-23T00:26:10Z",
      "side": 1,
      "message": "It\u0027s pretty awful -- VersionGLSL.cpp can determine to \"auto-upgrade\" SH_GLSL_COMPATIBILITY_OUTPUT to #version 120, but we can\u0027t determine up front whether that\u0027s going to happen. The shader needs to be parsed first. This situation will be much improved when we use the Core Profile on desktop everywhere, and target those shading language versions.",
      "parentUuid": "ea48a7ff_28b10493",
      "range": {
        "startLine": 181,
        "startChar": 75,
        "endLine": 182,
        "endChar": 32
      },
      "revId": "5d0639b90f4c29e9544d8b222c1fb2e4a717bf56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}