{
  "comments": [
    {
      "key": {
        "uuid": "43bee49a_5a46c3df",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1167,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T02:34:11Z",
      "side": 1,
      "message": "Is there (or should there be) a bug opened for these issues that are being worked around?   It would be good to at least document what you\u0027ve learned needs to be worked around (and why) while it\u0027s still fresh in your head.",
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9e9d12_4f3cc710",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1186,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T02:34:11Z",
      "side": 1,
      "message": "nit: \"a\"",
      "range": {
        "startLine": 1186,
        "startChar": 79,
        "endLine": 1186,
        "endChar": 81
      },
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae84bead_4f26f39f",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1194,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T02:34:11Z",
      "side": 1,
      "message": "For my own understanding, why do we need a copySubImage() rather than a copyImage() here?",
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfdccfe1_7dbd318b",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1949,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-04T02:34:11Z",
      "side": 1,
      "message": "It looks like this is redundant with the signalDirtyState(DIRTY_BIT_IMPLEMENTATION) call below:\n\n    void Texture::signalDirtyState(size_t dirtyBit)\n    {\n        mDirtyBits.set(dirtyBit);  \u003c\u003c--- does the same\n        invalidateCompletenessCache();\n        mState.mCachedSamplerFormatValid \u003d false;\n        onStateChange(angle::SubjectMessage::DirtyBitsFlagged);\n    }",
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd65ff3b_d024c111",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3092,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-04T03:16:43Z",
      "side": 1,
      "message": "I don\u0027t remember exactly the details, but was the comment that indicated `prepend` is necessary wrong?\n\nI think the ASSERT+append here and the prepend in Emulated clear below are swapped. The comment message, saying \"We prepend clears because image initialization happens after data upload.\" backs this up.",
      "range": {
        "startLine": 3092,
        "startChar": 4,
        "endLine": 3092,
        "endChar": 26
      },
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81e9ccdc_e97ad0a0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-04T03:16:43Z",
      "side": 1,
      "message": "stageClearIfEmulatedFormat is called right after image creation, so shouldn\u0027t it be possible to ASSERT that !isUpdateStaged and use appendSubresourceUpdate?",
      "range": {
        "startLine": 3118,
        "startChar": 8,
        "endLine": 3118,
        "endChar": 32
      },
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cdaaf39_3dfda88a",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 13
      },
      "lineNbr": 146,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-04T03:16:43Z",
      "side": 1,
      "message": "You can avoid the virtual call by storing the bool in vk::Context instead.",
      "revId": "406a8dfe326007b26ac03c48f013dffa83862d4e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}