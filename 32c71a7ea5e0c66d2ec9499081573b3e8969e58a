{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a9e2909_9c3e54b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-28T16:42:08Z",
      "side": 1,
      "message": "What\u0027s the difference between a replay issuing the draw call vs the original caller issuing it?   ANGLE should be no-op\u0027ing the draw call the same way regardless.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01a9a43a_462424e2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-28T17:08:41Z",
      "side": 1,
      "message": "The actual issue is that in src/common/utilities.cpp:33 it is asserted that the \"count \u003e 0\"",
      "parentUuid": "5a9e2909_9c3e54b0",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbedb0ac_bbd88634",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-29T11:53:37Z",
      "side": 1,
      "message": "Is that called from \"maybeCaptureDrawElementsClientData\"?",
      "parentUuid": "01a9a43a_462424e2",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8777d02b_17be6567",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-29T14:08:10Z",
      "side": 1,
      "message": "Yes. that was somewhere in the call chain.",
      "parentUuid": "fbedb0ac_bbd88634",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cc022bb_25bd4d27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-29T15:01:54Z",
      "side": 1,
      "message": "Maybe as an action on Tim\u0027s comment you can document this reasoning somewhere so it\u0027s clearer to the reviewers and in the code.",
      "parentUuid": "8777d02b_17be6567",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9eb3818_f62e4cef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-29T15:27:35Z",
      "side": 1,
      "message": "Is that ASSERT() necessary?   I haven\u0027t tried it, but can ComputeTypedIndexRange() be updated to the following instead?\n\n    gl::IndexRange ComputeTypedIndexRange(const IndexType *indices,\n                                          size_t count,\n                                          bool primitiveRestartEnabled,\n                                          GLuint primitiveRestartIndex)\n    {\n        IndexType minIndex                \u003d 0;\n        IndexType maxIndex                \u003d 0;\n        size_t nonPrimitiveRestartIndices \u003d 0;\n\n        if (count \u003d\u003d 0)\n        {\n            return gl::IndexRange(static_cast\u003csize_t\u003e(minIndex), static_cast\u003csize_t\u003e(maxIndex),\n                          nonPrimitiveRestartIndices);\n        }\n    \nThe IndexRange ctor seems to support that case:\n        \n    IndexRange(size_t start_, size_t end_, size_t vertexIndexCount_)\n        : start(start_), end(end_), vertexIndexCount(vertexIndexCount_)\n    {\n        ASSERT(start \u003c\u003d end);\n    }",
      "parentUuid": "9cc022bb_25bd4d27",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc464b3_70c87fed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-29T15:40:01Z",
      "side": 1,
      "message": "Seems fine as well.",
      "parentUuid": "d9eb3818_f62e4cef",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6595cc5_d5723d6b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-29T16:02:37Z",
      "side": 1,
      "message": "I\u0027ve removed the assert instead, and the capture/replay test still runs fine.",
      "parentUuid": "1fc464b3_70c87fed",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "443eb7e5_4590dec2",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-28T15:44:36Z",
      "side": 1,
      "message": "this will miss other no-op draws, e.g. count 1 or 2 for triangles, etc. Can we re-use the facility in Context to check if it\u0027s a no-op draw?",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "705bbe2c_a83a90f2",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-28T17:08:41Z",
      "side": 1,
      "message": "I\u0027ll see whether this can be handled to include these cases. Maybe I should have been more explicit about what is commented in the linked bug.",
      "parentUuid": "443eb7e5_4590dec2",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d44c9640_3a90ba75",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-29T07:01:39Z",
      "side": 1,
      "message": "I\u0027m not quite sure what facility do you mean? The call validation?",
      "parentUuid": "705bbe2c_a83a90f2",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a945268_df1a4853",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-29T11:53:37Z",
      "side": 1,
      "message": "bool Context::noopDraw",
      "parentUuid": "d44c9640_3a90ba75",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a38b1ce9_8d03bbc7",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-29T14:08:10Z",
      "side": 1,
      "message": "From the looks of it, noopDraw should already handle this case ...",
      "parentUuid": "2a945268_df1a4853",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a1b5059_7fee03de",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-29T15:01:54Z",
      "side": 1,
      "message": "For sure. I\u0027m suggesting you reuse noopDraw here instead of trying to replicate it partially.",
      "parentUuid": "a38b1ce9_8d03bbc7",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "300b490e_317cb85e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4004,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-29T16:02:37Z",
      "side": 1,
      "message": "As commented below, I removed the assertion, and now the capture works, and it also doesn\u0027t capture this no-op draw call, so I guess the assert came before the no-op check.",
      "parentUuid": "5a1b5059_7fee03de",
      "range": {
        "startLine": 4001,
        "startChar": 0,
        "endLine": 4004,
        "endChar": 5
      },
      "revId": "32c71a7ea5e0c66d2ec9499081573b3e8969e58a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}