{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b05cf25b_4f73bf3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1524687
      },
      "writtenOn": "2022-02-17T10:22:38Z",
      "side": 1,
      "message": "Hi Shahbaz,\nIn the latest patch, I\u0027ve add the test case \u0027FS image read and CS texture sample\u0027, named as ComputeShaderTest/FSReadImageThenCSSample. And it can run correctly as we wish.\n\nIn this patch, I\u0027ve refined code to handle the four scenarios more generally, list the scenarios for a brief check:\n\u003eFS image read, then CS image access\n\u003eFS texture sample, then CS image access\n\u003eFS image read, then CS texture sample\n\u003eFS texture sample, then CS texture sample\n\n1, rename the endRenderPassIfComputeAccessAfterTextureSample to endRenderPassIfComputeAccessAfterGraphicsTextureImageAccess. This function can handles all of the Vkimage operation (GL_image write/read, texture attchement write,  texture sample) in renderpass (abbr. as Graphics). Because currently ANGLE considers the GL_image read and write both as a *write* vkImage operation, so the new function overrides endRenderPassIfComputeReadAfterAttachmentWrite functionally.\n\n2, For better distinguish the read Vkimage (texture sample) scenario, add a new RenderPassUsageFlag to indentify the read images in the global usesImage list.\n\n3, define the *use* Vkimage in renderpass as two scenarios: one is the write operation on image (GL_image write/read, texture attachment write) (though the usesImage list); the other is the texture sample needed layout transition (though the mRenderPassReadImagesUsedBarrier list), as showed in the interface IsRenderPassStartedAndUsesImage.\n\nBased on this, we can only close renderpass under these two scenarios, and avoid to do redundant close renderpass on texture sample without layout-transition.\n",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "337b0cc1_11afa2b9",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 218,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T17:04:49Z",
      "side": 1,
      "message": "This function is used in a number of other places, like `onImageReleaseToExternal` which will be broken with this change.\n\nYou can duplicate this function instead for the specific purpose of checking if a layout transition was done, like `IsRenderPassStartedAndTransitionsImageLayout`.",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0655c289_ad32a70c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 6789,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T17:04:49Z",
      "side": 1,
      "message": "The name of the function seems to be out of date. Also, was it supposed to call `endRenderPassIfComputeReadAfterAttachmentWrite` too, or assimilate its functionality?",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b354531c_78270db7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1107,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T17:04:49Z",
      "side": 1,
      "message": "\"UsesBarrier\" makes it hard to understand why these matter. How about instead of \"UsesBarrier\", we call it \"WithLayoutTransition\"?\n\nThat makes it clearer IMO that the reason we need to know this is because of layouts.",
      "range": {
        "startLine": 1107,
        "startChar": 18,
        "endLine": 1107,
        "endChar": 29
      },
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec266be8_36cb9506",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T17:04:49Z",
      "side": 1,
      "message": "What if we generalize `TextureSampler` to be `TextureSamplerOrImageRead`? Currently we use this to detect feedback loop with render-to- and sample-from-texture, but it could as well also include render-to- and read-from-image.\n\n@cclao, what do you think?",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb8353d4_cb457471",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-22T17:15:56Z",
      "side": 1,
      "message": "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL -\u003e ImageShaderReadOnly\n\nI think that is basically what I suggested before we used the term Sampler, to align with the spec. Seems like a good opportunity to align now rather than introducing extra clauses.\n\nOne question - you say SamplerOrImageRead, then you mention reader-to- and read-from-image... seems like this layout flag is not used for rendering-to, so what are you referring to?",
      "parentUuid": "ec266be8_36cb9506",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eefc7823_ecf52bcb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T18:35:01Z",
      "side": 1,
      "message": "\"render-to\" not \"reader-to\". I said that in the context of feedback loop (for which `TextureSampler` is used, and `TextureSamplerOrImageRead` could subsume)",
      "parentUuid": "eb8353d4_cb457471",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb32e840_9ffc178a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-02-22T18:44:46Z",
      "side": 1,
      "message": "\"reader-to\" was a typo, I meant to write \"render-to\". I\u0027m confused now - what kind of feedback loops are you trying to support? If there\u0027s a write involved, TextureSamplerOImageRead is not the correct term either. How about ImageShaderReadOnly? That is a more succinct synonym for SamplerOrImageRead.",
      "parentUuid": "eefc7823_ecf52bcb",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab564474_09c61d76",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T18:58:33Z",
      "side": 1,
      "message": "I\u0027m not particularly trying to support extra feedback loop; I just mentioned that generalizing TextureSampler by including read-only-images will also (by accident, but correctly) support feedback loop where the image is not simultaneously used as texture (and fb attachment) but read-only image (and fb attachment).\n\n`ImageShaderReadOnly` SGTM",
      "parentUuid": "bb32e840_9ffc178a",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfca4e98_9fae3d6d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-02-22T20:17:25Z",
      "side": 1,
      "message": "I think the usage of this new bit ReadOperation seems wrong. These RenderPassUsage bits are specifically used to detect the *framebuffer attachment* related optimizations, like read only depth stencil attachment or feedback loop. If you look at RenderPassUsage::TextureSampler, it is only set if image.hasRenderPassUsageFlag(vk::RenderPassUsage::RenderTargetAttachment). The reason for that is the renderpass must have a pointer to the image so that these bits can be cleared at endRP time. And renderpass only have pointer to attached images, not textures. If I read it correctly you try to use it as a general way? then you will need to use other mechanism.\n\nIf your usage is intended to be exact the same as vk::RenderPassUsage::TextureSampler, so that we can detect read only depth stencil or feedback loop, then my suggestion is to add a new bit ImageRead and only insert if RenderTargetAttachment bit is set.",
      "parentUuid": "ab564474_09c61d76",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab083e7e_7e6b5938",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 23
      },
      "lineNbr": 1431,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-02-22T20:39:35Z",
      "side": 1,
      "message": "Thanks Charlie. Indeed Min is trying to detect all images that are used read-only. But this change is using `RenderPassUsage` a bit differently. It\u0027s setting this usage in the ImageHelper right away in `RenderPassCommandBufferHelper::imageRead`.\n\nI guess the real problem here is that no one is resetting the usage at render pass closure. Min, it seems that this bit is \"sticky\", so once it\u0027s set, we never reset it. Could you add a test in VulkanPerformanceCounterTest.cpp to expose this bug? Basically use the image such that this bit is set and a render pass is broken because of it. Then change the circumstances such that render pass wouldn\u0027t need breaking, but will be because of this bit. The test would fail for example because it expects 2 render passes, but observes 3.",
      "parentUuid": "bfca4e98_9fae3d6d",
      "revId": "da8dc74bc4cfc59cbe76ef5e98f6d7a1406e0c4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}