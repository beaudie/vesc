{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4a995fb_35a7d810",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-03-08T15:55:58Z",
      "side": 1,
      "message": "This CL hides ETC1 from WebGL contexts when it\u0027s not natively supported.",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c220b2b6_2f877821",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-08T17:06:53Z",
      "side": 1,
      "message": "Why only Vulkan? What makes it desirable for the gl backend to emulate ETC1 and the Vulkan backend not to?",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd7676f0_0ab6b817",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-03-08T17:17:34Z",
      "side": 1,
      "message": "ETC1 extension string on desktop GL was disabled here: https://chromium-review.googlesource.com/c/angle/angle/+/2687466.\n\nOn Vulkan, it\u0027s used only for running restricted traces.",
      "parentUuid": "c220b2b6_2f877821",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "226a5861_5219f790",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-08T17:20:53Z",
      "side": 1,
      "message": "Is the intent to disable extensions that could cause performance issues when they\u0027re emulated? If so please comment that in the commit message. We don\u0027t usually check the display attributes here in the Context for controlling extensions, and this check isn\u0027t complete either. The extension could be natively supported on mobile WebGL/Vulkan. So maybe we need to expose some kind of information about emulated formats from the back-end.",
      "parentUuid": "c220b2b6_2f877821",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0077dd2d_fb0537d6",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-03-08T17:34:38Z",
      "side": 1,
      "message": "The check relies on the fact that when native support is available Vulkan renderer exposes both ETC1 and ETC2/EAC, the latter is called compressedTextureETC.\n\nWhen only ETC1 is exposed, it\u0027s definitely emulated by ANGLE and we have to hide it from WebGL.",
      "parentUuid": "226a5861_5219f790",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26b86dd7_8b75d1be",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-08T17:41:55Z",
      "side": 1,
      "message": "Rather than using some knowledge of the Vulkan spec in the Context class, its a cleaner mental model if the back-end could tell the front-end that some format support is transformed in some way. How about we set a flag in gl::TextureCaps indicating the format is non-identity? And set that in vk::FormatTable::initialize.\n\nThis way we wouldn\u0027t need to have any Vulkan-specific logic in this file.",
      "parentUuid": "0077dd2d_fb0537d6",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9b403a_df627621",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-03-08T17:54:06Z",
      "side": 1,
      "message": "\u003e How about we set a flag in gl::TextureCaps indicating the format is non-identity? \n\n\nThe only reason why this format is enabled is to support running mobile ANGLE traces on bots with desktop GPUs. Real applications shouldn\u0027t use it anyway. Maybe there\u0027s some build-time parameter that could be used to filter that? I don\u0027t think that such a rare use case warrants global expansion of TextureCaps.",
      "parentUuid": "26b86dd7_8b75d1be",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30d6d612_d285fd28",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3711,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-03-08T18:24:06Z",
      "side": 1,
      "message": "I would add a new member to the Limitations struct called etcFormatsAreEmulated which each backend can initialize separately.\n\nAnd then here we can disable extensions based on that limitation and context type.",
      "parentUuid": "3e9b403a_df627621",
      "revId": "57d179ceade986a0423f9a2fb3e0b9216f4d7c36",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}