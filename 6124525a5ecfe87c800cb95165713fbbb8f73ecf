{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e87d0122_4f830e8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 20
      },
      "lineNbr": 14,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "just to confirm - the offset still exists, but because it\u0027s stored in BH, we don\u0027t need to pass it around?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04d1c327_57da7bb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 20
      },
      "lineNbr": 14,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Correct.",
      "parentUuid": "e87d0122_4f830e8c",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b16208c_edfc6a89",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 61,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "nit: make this a member of RendererVk or ContextVk. what led to making it a static func?\n\nalso I\u0027d call this AllocateOrReuse",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7c81e88_b83196b8",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 61,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "I have removed this API and moved the code into initForVertexConversion() function.",
      "parentUuid": "2b16208c_edfc6a89",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8314d368_6a72b9a5",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 64,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "same comment as below. it\u0027s hard to interpret true/false, but BufferVisibility::Host or BufferVisibility::Unspecified or whatever you choose should be clear in the calling context.",
      "range": {
        "startLine": 64,
        "startChar": 45,
        "endLine": 64,
        "endChar": 61
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59587bdb_4d3c35de",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 64,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8314d368_6a72b9a5",
      "range": {
        "startLine": 64,
        "startChar": 45,
        "endLine": 64,
        "endChar": 61
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3169851f_304847bf",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Is using a std::unique_ptr necessary?   It looks like this can just be a vk::BufferHelper, since the ctor immediately allocates one anyway.",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e800176_0c5883c0",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-28T20:08:57Z",
      "side": 1,
      "message": "Right now it is. The reason is that conversion is added into std::vector, which requires unline objects supports move operation which BufferHelper does not support. We can add move operation support for BufferHelper object, and then the question is move operation for BufferHelper object will be more expensive then std::unique_ptr which just move the pointer. For conversion buffers, the performance cost likely does not matter much. But meantime, I am also not convinced that use BufferHelper is better, at least from cost wise it is not. So I am neural on this and slightly tilt toward using std::unique_ptr.",
      "parentUuid": "3169851f_304847bf",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e08ee322_e4a93096",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "Re-adding move to BufferHelper should be good - it\u0027s also consistent we how we do the other operations in the Vulkan back-end. Strong vote for putting move back in in the absence of clear data.",
      "parentUuid": "3e800176_0c5883c0",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35cee6c1_448b4b4d",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "I did not remove the move capability. I think it is always like that. I think this is the same reason that DynamicBuffer class is using std::unique_ptr as well to keep array of free buffers and inflight buffers and mBuffer.\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.h;l\u003d183",
      "parentUuid": "e08ee322_e4a93096",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f95b33_2a743f1b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-04T15:04:48Z",
      "side": 1,
      "message": "Well, the cost of std::move should be pretty minimal (a small memcpy), it removes an indirection, it\u0027s cleaner code (no need for the template class, it matches the prior code, and it matches more of the rest of ANGLE. The other instance of unique_ptr was great because it matched the code better.",
      "parentUuid": "35cee6c1_448b4b4d",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15ff54f8_aca50c12",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-05T17:21:54Z",
      "side": 1,
      "message": "Are you going to land your other CL then rebase this? LGTM if so.",
      "parentUuid": "89f95b33_2a743f1b",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a152e19f_81a5b7bf",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-05T17:43:52Z",
      "side": 1,
      "message": "That\u0027s right. Once the other CL lands, I will change this CL to get rid of std::unique_ptr usage here.",
      "parentUuid": "15ff54f8_aca50c12",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8e689ba_b168449d",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-05T23:17:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89f95b33_2a743f1b",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f70ae446_429d5561",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-06T00:21:25Z",
      "side": 1,
      "message": "Actually this does not work. The problem is that we store the conversion buffer\u0027s BufferHelper pointer in VertexArrayVk::mCurrentVertexArray. This means this BufferHelper object itself can not destroyed while mCurrentVertexArray pointing to it. By make conversion buffer store BufferHelper object directly, this object can be re-constructed without mCurrentVertexArray knowing about it (when vector gets resized). That leave mCurrentVertexArray have a stale pointer to the already destructed BufferHelper object which end up with crash. See patchset 25 bot failures.\n\nI am going to revert back to PS22.",
      "parentUuid": "b8e689ba_b168449d",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "841a67c3_327cd330",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 20
      },
      "lineNbr": 518,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "nit: suggest we make it a policy to replace bool parameters with class enums.",
      "range": {
        "startLine": 518,
        "startChar": 54,
        "endLine": 518,
        "endChar": 70
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e5f7f5c_bfb6412b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 20
      },
      "lineNbr": 518,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "841a67c3_327cd330",
      "range": {
        "startLine": 518,
        "startChar": 54,
        "endLine": 518,
        "endChar": 70
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3394760c_a92c2183",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 20
      },
      "lineNbr": 621,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "nit: ensure zero-init",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 621,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df8c5712_e97af456",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 20
      },
      "lineNbr": 621,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3394760c_a92c2183",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 621,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6c8ea05_2bde25dc",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 170,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Why do the buffers here and in convertIndexBufferIndirectGPU() that are being converted by the GPU need to be host visible?",
      "range": {
        "startLine": 170,
        "startChar": 77,
        "endLine": 170,
        "endChar": 81
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f86aab2_a96c7b7e",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 170,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-28T20:08:57Z",
      "side": 1,
      "message": "I don\u0027t think they need to. It is just what it is currently using and I am try not to change the memory property of the buffer in this CL for the risk mitigation. I  do plan to address this in a follow up CL. I am leaving this comment open until I create the follow up CL.",
      "parentUuid": "e6c8ea05_2bde25dc",
      "range": {
        "startLine": 170,
        "startChar": 77,
        "endLine": 170,
        "endChar": 81
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d95a8010_0cad6376",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 170,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/angle/angle/+/3340553/8",
      "parentUuid": "1f86aab2_a96c7b7e",
      "range": {
        "startLine": 170,
        "startChar": 77,
        "endLine": 170,
        "endChar": 81
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2b4e49_2415bc6e",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 639,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Are these function calls necessary, or can we revert them to avoid the (albeit minor) CPU overhead of making them?",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aa4ff57_31fc05cd",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 639,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-28T20:08:57Z",
      "side": 1,
      "message": "No. Mostly try to be consistent and future proof in case someone change the empty buffer to sub-allocation.",
      "parentUuid": "ba2b4e49_2415bc6e",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02ca6f79_11d82bf8",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 639,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-29T17:54:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0aa4ff57_31fc05cd",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0708846f_af6f2005",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 756,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Similar to above, mDynamicVertexData doesn\u0027t seem to need to hold pointers, but can instead hold the objects directly.   This can be updated to:\n\n    mDynamicVertexData.emplace_back(BufferHelper());\n    vk::BufferHelper \u0026vertexDataBuffer \u003d mDynamicVertexData.back();",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "419e2309_3f9c564b",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 20
      },
      "lineNbr": 756,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0708846f_af6f2005",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da1f769_5dc6fac0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3570,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Can be \u00272\u0027?",
      "range": {
        "startLine": 3570,
        "startChar": 37,
        "endLine": 3570,
        "endChar": 38
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5009290_75787436",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3570,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8da1f769_5dc6fac0",
      "range": {
        "startLine": 3570,
        "startChar": 37,
        "endLine": 3570,
        "endChar": 38
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "222301ba_2b7ff242",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3608,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "you seem to be using vertex conversion buffers for index data here - maybe just call them conversion buffers instead of vertex conversion.",
      "range": {
        "startLine": 3608,
        "startChar": 14,
        "endLine": 3608,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "def47b00_a944e963",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3608,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "This function is now removed.",
      "parentUuid": "222301ba_2b7ff242",
      "range": {
        "startLine": 3608,
        "startChar": 14,
        "endLine": 3608,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf837e54_06cdb97c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3705,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "also for indirect buffers here",
      "range": {
        "startLine": 3705,
        "startChar": 14,
        "endLine": 3705,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb7f1a10_ede63430",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3705,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf837e54_06cdb97c",
      "range": {
        "startLine": 3705,
        "startChar": 14,
        "endLine": 3705,
        "endChar": 44
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f250bf1_6b7f7a69",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3916,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "Why is this necessary?",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8faf51aa_7568d35f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3916,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-28T20:08:57Z",
      "side": 1,
      "message": "Yes. There is bot test failure without this. The return value of getSize() is used in descriptor set and if this returns too small value (for example, 2 bytes),  driver does not like it and will fail. Note that regardless if I align it here or not, the VMA allocation code will do this anyway, so we are not using more space here.",
      "parentUuid": "9f250bf1_6b7f7a69",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a096559e_e3b2de1c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3916,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-29T15:22:25Z",
      "side": 1,
      "message": "add comment here please. also the naming is a bit confusing - it sounds like you\u0027re initializing the buffer but you\u0027re doing a memory suballocation. how about suballocateForConversion\n\nvery minor nit: note that \"suballocate\" is one word, not two, and \"SubAllocation\" implies two words.",
      "parentUuid": "8faf51aa_7568d35f",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98a40514_ebe28209",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 20
      },
      "lineNbr": 3916,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "There was BufferHelper::init() already doing exact this - allocating the mBuffer object for BufferHelper. I am just expanding this for more APIs so that they all looks consistent.\n\nComment added.",
      "parentUuid": "a096559e_e3b2de1c",
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eafa0678_2cc40517",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 20
      },
      "lineNbr": 2896,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-28T18:25:19Z",
      "side": 1,
      "message": "The names for these should have the \"Dynamic\" part removed, since they aren\u0027t DynamicBuffers anymore.   Adding \"Helper\" might be good too:\n\n    BufferHelper mIndexBufferHelper;\n    BufferHelper mIndirectBufferHelper;",
      "range": {
        "startLine": 2895,
        "startChar": 0,
        "endLine": 2896,
        "endChar": 40
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1e7fabd_63db2672",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 20
      },
      "lineNbr": 2896,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-30T20:25:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eafa0678_2cc40517",
      "range": {
        "startLine": 2895,
        "startChar": 0,
        "endLine": 2896,
        "endChar": 40
      },
      "revId": "6124525a5ecfe87c800cb95165713fbbb8f73ecf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}