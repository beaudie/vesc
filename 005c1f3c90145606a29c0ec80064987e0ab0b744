{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f6ab2240_007b7d94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-27T14:19:38Z",
      "side": 1,
      "message": "LGTM, one outstanding comment from Shabi so would be good for him to sign-off once that is done.",
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a035b37f_206bb436",
        "filename": "src/common/system_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-27T08:27:18Z",
      "side": 1,
      "message": "Please add the following first:\n\n    std::string sanitizedPropertyName \u003d propertyName;\n    str.erase(std::remove(sanitizedPropertyName.begin(), sanitizedPropertyName.end(), \u0027\\\u0027\u0027), sanitizedPropertyName.end());\n\nAnd then use:\n\n    std::string command(\"getprop \u0027\");\n    command +\u003d sanitizedPropertyName;\n    command +\u003d \"\u0027\";\n\nJust to avoid this from becoming a security bug in the future.",
      "range": {
        "startLine": 35,
        "startChar": 15,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2215bfb_a00a00a8",
        "filename": "src/common/system_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-27T08:27:18Z",
      "side": 1,
      "message": "What\u0027s the point of this Set/Get combination? Why not something like this:\n\n    std::string GetEnvironmentVarFromAndroidProperty(const char *variableName, const char *propertyName)\n    {\n    #if defined(ANGLE_PLATFORM_ANDROID) \u0026\u0026 __ANDROID_API__ \u003e\u003d 21\n        ...\n\n        return value;\n    #else\n        return GetEnvironmentVar(variableName);\n    #endif  // ANGLE_PLATFORM_ANDROID\n    }\n\nAlso, is there no better way to get a property other than running a shell command?!",
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddffa301_9f4109c7",
        "filename": "src/common/system_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-10-27T15:06:22Z",
      "side": 1,
      "message": "In FrameCapture we do this to allow Android to use any code that relies on environment variables.  PrimeAndroidEnvironmentVariables sets them up, and all the downstream code just works.  If we want to use this generally for ANGLE, this should probably be reworked such that any platform can just call getenv for this feature, and only Android primes the value.\n\nNon-system code can\u0027t use the NDK\u0027s getenv (but it can use setenv), that\u0027s why the shell call is required.",
      "parentUuid": "f2215bfb_a00a00a8",
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a291fda1_01900805",
        "filename": "src/common/system_utils.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-27T15:11:44Z",
      "side": 1,
      "message": "Ok. It looks like this particular case doesn\u0027t need to do the SetEnv/GetEnv dance. I would agree that calling this once so that it would SetEnv, and then use GetEnvironmentVar() everywhere is acceptable (and even better than this).",
      "parentUuid": "ddffa301_9f4109c7",
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ad66ba_2923811b",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 449,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-27T08:27:18Z",
      "side": 1,
      "message": "Should this be angle.debug?",
      "range": {
        "startLine": 449,
        "startChar": 52,
        "endLine": 449,
        "endChar": 63
      },
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6364f1b_c1c3461d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 449,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T14:11:18Z",
      "side": 1,
      "message": "Properties have naming rules, debug is required to be the first component. I believe that allows anyone to read it and it will be reset when the device reboots.",
      "parentUuid": "c2ad66ba_2923811b",
      "range": {
        "startLine": 449,
        "startChar": 52,
        "endLine": 449,
        "endChar": 63
      },
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b3976cc_845fddb7",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2468,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T14:11:18Z",
      "side": 1,
      "message": "FYI this is called by DisplayVk::makeCurrent\nI don\u0027t have a good feel for how often / when an app calls makeCurrent. Will this allow us to do what AGI wants? Could this be called too often, impacting app perf?",
      "range": {
        "startLine": 2468,
        "startChar": 5,
        "endLine": 2468,
        "endChar": 40
      },
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95e39c47_80a651c5",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2470,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-10-27T14:11:18Z",
      "side": 1,
      "message": "are",
      "range": {
        "startLine": 2470,
        "startChar": 89,
        "endLine": 2470,
        "endChar": 91
      },
      "revId": "005c1f3c90145606a29c0ec80064987e0ab0b744",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}