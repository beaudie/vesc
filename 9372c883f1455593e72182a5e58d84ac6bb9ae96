{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4e666c54_0d4400df",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-15T15:11:08Z",
      "side": 1,
      "message": "garbage data means a potential security risk. can you explain a bit more about the garbage data - is it all zero, data from a previous upload, or uninitialized memory?",
      "range": {
        "startLine": 10,
        "startChar": 23,
        "endLine": 12,
        "endChar": 32
      },
      "revId": "9372c883f1455593e72182a5e58d84ac6bb9ae96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b14e983_0d8efb3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-03-15T17:14:36Z",
      "side": 1,
      "message": "I think I missed the handling of robust extension enabled case. In latest patch I fixed that. I also reworded the description which causing some confusions. \n\nBasically if you look at StreamVertexDataWithDivisor(), if copies the numVertcies data and then zero fill the remaining buffer if robust extension is enabled. Or leave the remaining buffer with garbage data if robust extension is not enabled. This CL essentially added a speccial handlding for the case when the srcBuffer size is zero, we will avoid calling mapImpl on it to avoid the crash. We will zero fill entire buffer if robust extension is enabled.\n\nSo PTAL.",
      "parentUuid": "4e666c54_0d4400df",
      "range": {
        "startLine": 10,
        "startChar": 23,
        "endLine": 12,
        "endChar": 32
      },
      "revId": "9372c883f1455593e72182a5e58d84ac6bb9ae96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}