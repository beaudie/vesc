{
  "comments": [
    {
      "key": {
        "uuid": "7515c359_e21ef906",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-04-24T19:56:44Z",
      "side": 1,
      "message": "I\u0027m still not entirely sure the type info is needed here when we often make unsafe casts with assertions (even though they may be disabled in chrome builds).",
      "range": {
        "startLine": 38,
        "startChar": 6,
        "endLine": 38,
        "endChar": 19
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "670baaae_70bbb7b7",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-04-26T17:10:09Z",
      "side": 1,
      "message": "I know it makes a adds of complexity, and we\u0027d ideally want zero, but I think it\u0027s worth it. There\u0027s not many places where we take a truly totally untyped byte array and reinterpret cast it into a typed structure that uses inheritance.",
      "parentUuid": "7515c359_e21ef906",
      "range": {
        "startLine": 38,
        "startChar": 6,
        "endLine": 38,
        "endChar": 19
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdecb86c_24cde8d2",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-04-26T13:54:35Z",
      "side": 1,
      "message": "The semantics of what operator bool() mean here isn\u0027t clear. It could be isValid() instead. Also I\u0027m not sure this is needed at all if we generate gathers only for  entry-point that need a gather().",
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfd88c42_462f4e84",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-04-26T17:10:09Z",
      "side": 1,
      "message": "Renamed to isValid().",
      "parentUuid": "bdecb86c_24cde8d2",
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3efddfbb_a489c5a9",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 76,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-04-26T13:54:35Z",
      "side": 1,
      "message": "This code could be moved to gatherParams, or is there a case where a custom factory is needed? The code in the ANGLE_ENTRY_POINT_FUNC could go in the constructor instead.",
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "650df558_fc92a4eb",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 76,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-04-26T17:10:09Z",
      "side": 1,
      "message": "Constructors cannot be called with explicit template parameters, which is how I disambiguate between entry points (say if two had the same or ambiguous overloads).\n\nhttp://stackoverflow.com/questions/2861839/can-the-template-parameters-of-a-constructor-be-explicitly-specified",
      "parentUuid": "3efddfbb_a489c5a9",
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c12d69b_eba28f67",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 76,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-04-26T17:32:41Z",
      "side": 1,
      "message": "After offline discussion this doesn\u0027t work because HasIndexRange is used as is for all the DrawElements* entrypoints, and there would be a risk of having overloaded constructors that can\u0027t be disambiguated.",
      "parentUuid": "650df558_fc92a4eb",
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2120ea4_887560e4",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-04-24T19:56:44Z",
      "side": 1,
      "message": "This could probably be a macro too, something like:\n\n   DEFINE_PARAMS_TYPE_INFO(HasIndexRange, ParamsBase);",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b211a65_0f7d3f9c",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-04-26T13:54:35Z",
      "side": 1,
      "message": "Do we expect cases of non-noop inheritance (like is the case for IndexRange / DrawElemens*)?",
      "parentUuid": "b2120ea4_887560e4",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "887e0eda_29e879f0",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-04-26T17:10:09Z",
      "side": 1,
      "message": "Corentin, I don\u0027t totally understand your question, but I do anticipate using inheritance to solve the layering issue with Framebuffer::checkStatus. I think I\u0027ll make a HasDrawFramebuffer / etc class and make HasIndexRange inherit from that, since if we\u0027re rendering with indices we\u0027re always rendering to a Framebuffer.\n\nGeoff: Done.",
      "parentUuid": "3b211a65_0f7d3f9c",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82a386ba_e41b7265",
        "filename": "src/libANGLE/params.h",
        "patchSetId": 13
      },
      "lineNbr": 91,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-04-26T17:32:41Z",
      "side": 1,
      "message": "Thanks for the explanation, I was worried the inheritance mechanism was adding complexity without being useful but it turns out it is :)",
      "parentUuid": "887e0eda_29e879f0",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 40
      },
      "revId": "172ab32c8626d2b40a169d9b324306037b93420c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}