{
  "comments": [
    {
      "key": {
        "uuid": "4da20539_15495bcc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T15:49:37Z",
      "side": 1,
      "message": "I think this CL is ready to go now.  PTAL",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "446d2133_05c8349e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T17:15:22Z",
      "side": 1,
      "message": "Overall looks good to me.",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22631bb5_6189dd9f",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-08T18:22:40Z",
      "side": 1,
      "message": "These now only respond with whether *Color* content is defined or not, right? I would make that explicit in the name:\n\n     hasDefinedColorContent()\n    invalidateEntireColorContent()",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 26
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01c24823_93e89e74",
        "filename": "src/libANGLE/renderer/vulkan/RenderTargetVk.h",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T19:45:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22631bb5_6189dd9f",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 26
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49935a3b_7e5b5e48",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-08T18:22:40Z",
      "side": 1,
      "message": "There may be an issue here. Take this scenario:\n\n- Create depth/stencil renderbuffer R and attach it to a framebuffer\n- Draw into framebuffer\n- Invalidate depth/stencil\n- Delete R\n- Cause render pass to break\n\nWhat happens when R is deleted? If the render pass is closed automatically before R is deleted, it\u0027s ok, but if it happens after, then mDepthStencilImage would be a dangling pointer.\n\nCould you write a test for it and verify (with printf?) that end RP is being done before the ImageHelper is deleted?",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e975d30_65741d88",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T19:45:25Z",
      "side": 1,
      "message": "I wrote the test, but ...\n\nInteresting! ... This was the scenario that motivated you and/or Jamie (forget who) to move mContentDefined to ImageHelper (it\u0027s not supposed to go away before the render pass ends:-).  However, it does look like the ImageHelper is deleted before the render pass ends.  Not sure why yet, but that sounds like an ANGLE bug.",
      "parentUuid": "49935a3b_7e5b5e48",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aaadbe5_24000dfc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T21:32:57Z",
      "side": 1,
      "message": "After looking into this more (and chatting with Shabi), I can see that the ImageHelper, RenderTargetVk, etc. can all go away without the CommandBufferHelper finding out.  That violates the point of this CL and why I was asked to move mContentDefined to ImageHelper (i.e. that ImageHelper won\u0027t go away until after the render pass is ended).",
      "parentUuid": "8e975d30_65741d88",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b37c48b_7e35934d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-10T15:21:38Z",
      "side": 1,
      "message": "Right, thanks for clearing this up. I was thinking that the ImageHelper is stored in the garbage queue while we wait for cleanup. Instead we store the contents of the ImageHelper in a garbage list and destroy the ImageHelper itself. So this approach won\u0027t work out of the box.\n\nThere are existing tricky bugs with storing mContentsDefined in RenderPassVk as well. If you use an ImageHelper as an EGL Image source, and then invalidate the target, writes to the source will not \"restore\" the contents. This is a bit tricky and unlikely to occur in practice. There may be other cases where we access the ImageHelper separately from the Framebuffer that don\u0027t \"restore\" contents on write.\n\nFor now maybe dump some of this into an open issue and defer any follow-up until we run into such a situation. I suggest we land the tests you wrote.",
      "parentUuid": "1aaadbe5_24000dfc",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eb14952_8608854d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 981,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-10T16:22:37Z",
      "side": 1,
      "message": "Regarding modifying the image outside framebuffer, we do have a (hopefully complete) notification system. DIRTY_BIT_*_BUFFER_CONTENTS is set in such a case, and FramebufferVk::syncState, through a call to RenderTargetVk::flushStagedUpdates, sets contents defined.\n\nBecause we track contents defined in the render target, unfortunately we also set contents defined with DIRTY_BIT_*_ATTACHMENT because we don\u0027t know if the image was modified while not attached to the framebuffer.\n\nWhat generates the notification that sets DIRTY_BIT_*_BUFFER_CONTENTS can probably be adapted to instead directly set contents defined in the image. That was at least my plan for moving contents defined to the image.\n\n---\n\nRegarding the image deletion bug, a potential solution is to sync the framebuffers that are attached to the texture/renderbuffer that\u0027s being deleted before the actual deletion. WDYT?",
      "parentUuid": "6b37c48b_7e35934d",
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7243f50_fed7c2f5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 1298,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T17:15:22Z",
      "side": 1,
      "message": "This looks like not been used. Or if you do need it, maybe call it hasValidFormat or isValidFormat?",
      "range": {
        "startLine": 1298,
        "startChar": 9,
        "endLine": 1298,
        "endChar": 20
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52626f16_e2c9b2b3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 1298,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T19:45:25Z",
      "side": 1,
      "message": "Done\n\nThanks for catching this ... I stopped using it and didn\u0027t delete it.",
      "parentUuid": "b7243f50_fed7c2f5",
      "range": {
        "startLine": 1298,
        "startChar": 9,
        "endLine": 1298,
        "endChar": 20
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b93dcd08_52970902",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 1317,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T17:15:22Z",
      "side": 1,
      "message": "Is it possible to maintain mDepthContentDefined in ImageHelper::onWrite()? That will have better encapsulation than a \"set*\" and \"has*\" APIs. Maybe you need to change onWrite to onDepthWrite and onStencilWrite or take an argument to indicate it is depth or stencil.",
      "range": {
        "startLine": 1316,
        "startChar": 4,
        "endLine": 1317,
        "endChar": 99
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f4391df_28052365",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 1317,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-09-08T19:45:25Z",
      "side": 1,
      "message": "Hmm.  The \"set*\" method is used in a variety of places, to set the value true or false (including trying to deal with invalidation, and rendering to the default framebuffer the value is set to false just before the swap).",
      "parentUuid": "b93dcd08_52970902",
      "range": {
        "startLine": 1316,
        "startChar": 4,
        "endLine": 1317,
        "endChar": 99
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8880e741_db5467cd",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 16
      },
      "lineNbr": 1317,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-08T20:22:39Z",
      "side": 1,
      "message": "Maybe for now just keep it this way. When I see this, it jumps into my head that this is basically not been encapsulated well, which sounds like another clean up opportunity.",
      "parentUuid": "3f4391df_28052365",
      "range": {
        "startLine": 1316,
        "startChar": 4,
        "endLine": 1317,
        "endChar": 99
      },
      "revId": "9bb3ad684f3984416fbfafb86de41b94621a8968",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}