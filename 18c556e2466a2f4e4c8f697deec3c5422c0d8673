{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "570e7a50_0090e800",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T16:00:18Z",
      "side": 1,
      "message": "LGTM, Adding Cody for second review. Nice work, just a few more style cleanups.",
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55f7b6ed_4ffb4521",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T16:00:18Z",
      "side": 1,
      "message": "nit: can you de-auto these if they\u0027re small types?",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 9
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c84a358_bc9597ce",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-23T17:03:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55f7b6ed_4ffb4521",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 9
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2feb96f6_1f637194",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T16:00:18Z",
      "side": 1,
      "message": "nit: static constexpr char kASCII[] \u003d ...",
      "range": {
        "startLine": 75,
        "startChar": 3,
        "endLine": 75,
        "endChar": 43
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8e858f6_5acddc97",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 75,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-23T17:03:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2feb96f6_1f637194",
      "range": {
        "startLine": 75,
        "startChar": 3,
        "endLine": 75,
        "endChar": 43
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3448eecc_b2600738",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T16:00:18Z",
      "side": 1,
      "message": "nit: size_t to match kSHA1Length",
      "range": {
        "startLine": 76,
        "startChar": 9,
        "endLine": 76,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2eb7fd81_bad2e6e7",
        "filename": "src/libANGLE/serializer/JsonSerializer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-23T17:03:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3448eecc_b2600738",
      "range": {
        "startLine": 76,
        "startChar": 9,
        "endLine": 76,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8104ef9c_126b6316",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T16:00:18Z",
      "side": 1,
      "message": "nit: general ANGLE style is to avoid overloading because it makes the code harder to read. can you use addString/addBytes/addCString/addBool/etc?",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27f710ea_4aa2d03c",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-23T17:23:32Z",
      "side": 1,
      "message": "I can do that, but do you really want this? \n\nIMHO the type information doesn\u0027t add to the readability in the serialization, and by adding the type name explicitely to the function name one has to find out the correct type for each value that is passed in, and, if for some reason, one wants to change the type, one has to update the function call used for serialization. In addition and one has to add a needless amount of code where one template can cover many cases because rapidjson also uses overloading and templates,",
      "parentUuid": "8104ef9c_126b6316",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9b43add_e44eed3b",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T17:31:52Z",
      "side": 1,
      "message": "Mostly for consistency. If ANGLE used a lot of overloading it wouldn\u0027t be a problem. Generally we pick a preference and stick with it. If we want to revisit a rule it would mean undoing that policy in other points of the code.",
      "parentUuid": "27f710ea_4aa2d03c",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62140e54_62ff0970",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-23T20:45:49Z",
      "side": 1,
      "message": "Also overloads are the bane of grep and other context-less search tools, so +1 for avoiding them.",
      "parentUuid": "c9b43add_e44eed3b",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54c3de46_7fea19dc",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-24T08:24:49Z",
      "side": 1,
      "message": "OOH I don\u0027t think allowing overloads would mean one has to dis-allow the other thing in other places, it\u0027s always about using the best tool for the job. OTOH there is a danger with this type of explicite function names to introduce bugs because of the way certain type conversions are allowed. A little example: \n\n#include \u003ciostream\u003e\n\nusing std::cout;\nusing std::endl;\n\ntemplate \u003ctypename T\u003e\nvoid print(T x)\n{\n  cout \u003c\u003c \"value\u003d\u0027\" \u003c\u003c x \u003c\u003c \"\u0027  \"; \n}\n\nvoid printBool(bool x)\n{\n  cout \u003c\u003c __func__ \u003c\u003c \" \u0027\" \u003c\u003c x \u003c\u003c \"\u0027\" \u003c\u003c endl; \n}\n\nvoid printFloat(float x)\n{\n  cout \u003c\u003c __func__ \u003c\u003c \" \u0027\" \u003c\u003c x \u003c\u003c \"\u0027\" \u003c\u003c endl; \n}\n\n\nint main(int argc, char **args)\n{\n  (void)argc;\n  (void)args; \n  \n  const char *str \u003d \"lala\";\n  int v \u003d 20;\n  int huge \u003d 0x7fffffff; \n  long int very_huge \u003d 0x7fffffffffffffffll; \n\n  print(str);       printBool(str);\n  print(v);         printBool(v);\n  print(huge);      printFloat(huge);\n  print(very_huge); printFloat(very_huge);\n\n  return 0; \n  \n}\n\nusing \"g++/clang++  -Wall -Wextra -Wnarrowing -o overload overload.cpp\" \nthis actually compiles without warning. \n\n(I am actually a bit surpised that I don\u0027t get a warning about then narrowing conversion in the printFloat case.)\n\nOutput: \n./overload\nvalue\u003d\u0027lala\u0027  printBool \u00271\u0027\nvalue\u003d\u002720\u0027  printBool \u00271\u0027\nvalue\u003d\u00272147483647\u0027  printFloat \u00272.14748e+09\u0027\nvalue\u003d\u00279223372036854775807\u0027  printFloat \u00279.22337e+18\u0027\n\nSo by using the (templated) overload, I always get the right value because the compiler knows what to do, if, OTOH I pass a value to the wrong functions with explicite type info, it might get siletly converted and I end up with a bug. \n\nThe situation in JsonSerializer is quite similar because rapidjson also uses overloads just like the \u003c\u003c stream operator. The fact that I can\u0027t get away with using just one template for addEntry, and need to add some specialization is because AddMember in rapidjson doesn\u0027t provide all the overloads, but the functionality is always the same and when writing the code IMHO one should not have to worry about what the type of the input is.  \n\nThe function for byte streams is another story, because it needs an extra size parameter, and for that it would agree that it should have a different name. \n\nThat said, as it seems I\u0027ll not be long enough working I\u0027ll change the code if you really think it\u0027s better for the project.",
      "parentUuid": "62140e54_62ff0970",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96530983_3a720408",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-24T14:48:25Z",
      "side": 1,
      "message": "If you want to use the \u0027addEntry\u0027 overloads for the basic result one and then use explicit names for the strings, vectors, etc which don\u0027t have that implicit conversion risk that\u0027s fine by me.",
      "parentUuid": "54c3de46_7fea19dc",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9ac2f33_21b1ea82",
        "filename": "src/libANGLE/serializer/JsonSerializer.h",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-03-25T11:40:54Z",
      "side": 1,
      "message": "I\u0027ve changed the code so that there is only one entry point for each method name, and passing in a \"char *\" to the addScalar method results in a compile error.",
      "parentUuid": "96530983_3a720408",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 17
      },
      "revId": "18c556e2466a2f4e4c8f697deec3c5422c0d8673",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}