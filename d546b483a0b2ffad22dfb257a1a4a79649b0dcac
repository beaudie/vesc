{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e4671eca_1283874b",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 8
      },
      "lineNbr": 192,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "nit: Also `ASSERT(queueSerial.getIndex() \u003c mSerials.size())`",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62c6015e_da577778",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 8
      },
      "lineNbr": 192,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "This can\u0027t possible here since index generation code guarantees that. But anyway, I added an assertion here just in case.",
      "parentUuid": "e4671eca_1283874b",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab261ee5_c6cb6928",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 986,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "Note: the reason this was cached and set once is that `mLastCompletedQueueSerial` was atomic. If per my other comment you\u0027d need to make `mLastCompletedSerials` atomics, this code should also be adjusted.",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0499997_356262e0",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 8
      },
      "lineNbr": 986,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-22T19:43:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab261ee5_c6cb6928",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "251389d3_2835d5b6",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 495,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "Access to `mLastCompletedQueueSerial` is not protected by mutex, which is why it was atomic. I don\u0027t see any protection added for `mLastCompletedSerials`.\n\nIf I missed something and there\u0027s no longer a need for atomicity, please update the comment above.",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87bba0bc_dbb2565b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "Exactly. The access here really does not need mutex, but atomics. And atomics here is simply just a load since it is uint64_t value. Originally when I added this AtomicQueueSerial, I was seeing tsan bot complains without use the atomic operation. But now for whatever reason the tsan bot is no longer complaining even without atomic. That is why I removed the atomic here to make code concise. My guess is that maybe tsan is fixed (that it is now aware of uint64_t itself is atomic anyway)? So my preference here is just keep it non-atomic here unless we see bot failure.",
      "parentUuid": "251389d3_2835d5b6",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db102c4e_6fe80f6f",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 495,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T20:55:32Z",
      "side": 1,
      "message": "Pretty sure you still need atomics. TSAN is not failing now because TSAN is no longer part of CQ due to flakiness. And uint64_t load being atomic on x64 is no justification; for one it may not be atomic on some architectures, say x86, and for another non atomic uint64_t access doesn\u0027t guarantee cache coherency between cores.",
      "parentUuid": "87bba0bc_dbb2565b",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d142c8e_aea0a3fe",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 8
      },
      "lineNbr": 495,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-22T19:43:34Z",
      "side": 1,
      "message": "Thanks, that makes sense. Change it back to atomic and verified locally.",
      "parentUuid": "db102c4e_6fe80f6f",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acbbf537_4094da36",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 4809,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "nit: `CommandQueue::finishQueueSerial` also uses this trick. For uniformity, either remove `CommandQueue::finishQueueSerial` and call `finishResourceUse`, or add a `finishQueueSerial` to `CommandProcessor`",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f951aa88_f0c2fc84",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 4809,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "If possible, could we defer this clean up a bit later? I intentionally left it here to minimize the code diff and leave clean up to future CL once everything settles down. I think there are a bit more things we can clean up in this area. (I will leave this comment open and also make a personal notes so it wont forget).",
      "parentUuid": "acbbf537_4094da36",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f8a3565_43470198",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 4809,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T22:37:48Z",
      "side": 1,
      "message": "Ok (leaving open)",
      "parentUuid": "f951aa88_f0c2fc84",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e098848_98d45ef2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 4809,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-12-07T20:32:20Z",
      "side": 1,
      "message": "Added finishedQueueSerial to CommandProcessor in this follow up CL\nhttps://chromium-review.googlesource.com/c/angle/angle/+/4072223",
      "parentUuid": "6f8a3565_43470198",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30230b9d_135a6ce0",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "nit: `whose`",
      "range": {
        "startLine": 24,
        "startChar": 40,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5fb904a_53f85639",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30230b9d_135a6ce0",
      "range": {
        "startLine": 24,
        "startChar": 40,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fa65456_26d1017c",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "Comment says it\u0027s an array of `QueueSerial`s, but it\u0027s actually an array of `Serial`s, which is a little hard to understand. How about this for the first sentence?\n\n\u003e Serials is an array of queue serials, which when paired with the index of the serials in the array result in QueueSerials.",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f31d6fc_b59ccbe2",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "Good sugestion.",
      "parentUuid": "0fa65456_26d1017c",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eb0fe8f_639d4a44",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "There\u0027s no guarantee that `mSerials.size() \u003c\u003d serials.size()`",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9eb0fd0_a2a6503a",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "The index generator guarantees that we never ever have an index bigger than that. I can add an assertion here if it concerns you.",
      "parentUuid": "8eb0fe8f_639d4a44",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43388f5c_1f887606",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 8
      },
      "lineNbr": 82,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T22:37:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a9eb0fd0_a2a6503a",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "294e9761_bd3453e2",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 202,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "nit: Another comment/ASSERT here that only one serial is possible now",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "965ea9b7_7dfe6535",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 202,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "294e9761_bd3453e2",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d34304ed_1bfb5976",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 328,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-11-21T17:51:41Z",
      "side": 1,
      "message": "ditto",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1930c48b_420cd2e6",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 328,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-11-21T18:52:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d34304ed_1bfb5976",
      "revId": "d546b483a0b2ffad22dfb257a1a4a79649b0dcac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}