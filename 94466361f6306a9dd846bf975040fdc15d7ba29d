{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4ca9557_61c09e6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-21T21:18:03Z",
      "side": 1,
      "message": "PTAL",
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4aa678a5_61a27aeb",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 310,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-21T22:11:57Z",
      "side": 1,
      "message": "Is each slot supposedly to be equal sized regardless if there is a buffer or not? If yes, then here you only write 64 bit value. When there is a buffer, you will write one 64 bit bufferSerial plus 32 bit size, plus 32 bit offset. How can we ensure they are unique?",
      "range": {
        "startLine": 310,
        "startChar": 16,
        "endLine": 310,
        "endChar": 24
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19f49604_2e47edd1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 310,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-26T21:32:20Z",
      "side": 1,
      "message": "OK I thought about this a bunch. They should be unique given the first 32 bits to each combination are unique. Either:\n\n0 - spacer\n1-lots - valid serial, followed by a fixed number of bytes. \nmax - eof\n\nI\u0027m pretty sure that we can\u0027t have collisions because of this property. Have not proven it mathematically.",
      "parentUuid": "4aa678a5_61a27aeb",
      "range": {
        "startLine": 310,
        "startChar": 16,
        "endLine": 310,
        "endChar": 24
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67b7cacb_bc7bc645",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 310,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-27T03:42:32Z",
      "side": 1,
      "message": "Thanks for explanation. If you loop all buffer index, ignore buffersMask, I am convinced this is unique. Basically it works like variable length encoding. But if you only encode based on bufferMask, then how do you tell the difference between the cases that only buffersMask are different? They will result in the same desc stream, but the buffer might map to different index. For example\ncase 1: {{noBufferBound}, buffer} \ncase 2: {buffer, {noBufferBound}}\nwill result in the same desc, but buffer are actually bound to different binding point. Is this actually a valid usage case?",
      "parentUuid": "19f49604_2e47edd1",
      "range": {
        "startLine": 310,
        "startChar": 16,
        "endLine": 310,
        "endChar": 24
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71edf88a_f4063a0c",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 317,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-21T22:11:57Z",
      "side": 1,
      "message": "Is this and append64BitValue(0) at line 309 have to append twice or only one 0 is enough?",
      "range": {
        "startLine": 317,
        "startChar": 23,
        "endLine": 317,
        "endChar": 40
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3383ead3_86c48f22",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 317,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-26T21:32:20Z",
      "side": 1,
      "message": "0 is enough, I switched to a 32-bit spacer.",
      "parentUuid": "71edf88a_f4063a0c",
      "range": {
        "startLine": 317,
        "startChar": 23,
        "endLine": 317,
        "endChar": 40
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f9b2114_9500d56a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 336,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-04-21T21:58:05Z",
      "side": 1,
      "message": "Why is this step necessary every call?",
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7750eaf4_b5a947ba",
        "filename": "src/tests/gl_tests/UniformBufferTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3360,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-04-21T22:11:57Z",
      "side": 1,
      "message": "avoid hard coded value here?",
      "range": {
        "startLine": 3360,
        "startChar": 40,
        "endLine": 3360,
        "endChar": 41
      },
      "revId": "94466361f6306a9dd846bf975040fdc15d7ba29d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}