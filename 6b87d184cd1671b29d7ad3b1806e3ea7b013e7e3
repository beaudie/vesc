{
  "comments": [
    {
      "key": {
        "uuid": "574dc58a_0dd03c1f",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-10-22T18:03:22Z",
      "side": 1,
      "message": "Tested this locally on Linux, it needs to include end slash:\n\n  samples/capture_replay/",
      "range": {
        "startLine": 45,
        "startChar": 50,
        "endLine": 45,
        "endChar": 72
      },
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87defe26_ffeeca0f",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-23T19:27:38Z",
      "side": 1,
      "message": "Updated the code to force a slash.",
      "parentUuid": "574dc58a_0dd03c1f",
      "range": {
        "startLine": 45,
        "startChar": 50,
        "endLine": 45,
        "endChar": 72
      },
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7a6247f_59d60674",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-10-22T18:03:22Z",
      "side": 1,
      "message": "To complete the example, could add a section below here showing modifications to samples/BUILD.gn.  i.e. enabling this section:\n\ncapture_replay(\"my_sample\") {\n  sources \u003d [\n    \"capture_replay/angle_capture_context1_frame000.cpp\",\n    \"capture_replay/angle_capture_context1_frame001.cpp\",\n    \"capture_replay/angle_capture_context1_frame002.cpp\",\n    \"capture_replay/angle_capture_context1_frame003.cpp\",\n    \"capture_replay/angle_capture_context1_frame004.cpp\",\n  ]\n}\n\nAnd then disabling capture again with \n\n```\n$ gn args out/Debug\nangle_with_capture_by_default \u003d false\n```\n\nFollowed by build and run:\n```\n$ autoninja -C out/Debug\n$ ./out/Debug/my_sample\n```",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9866a6cd_aee40266",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-10-23T13:29:46Z",
      "side": 1,
      "message": "Actually, rather than rebuild to run the trace without capture, can use the new env var:\n\n  $ ANGLE_CAPTURE_ENABLED\u003d0 out/Debug/my_sample\n\nAnd the you\u0027ve got a complete recipe for testing out trace/replay.",
      "parentUuid": "c7a6247f_59d60674",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "262349e3_e9120c8c",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-10-23T17:23:01Z",
      "side": 1,
      "message": "I like the env var idea",
      "parentUuid": "9866a6cd_aee40266",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71c0c115_7ee194e8",
        "filename": "doc/CaptureAndReplay.md",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-23T19:27:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "262349e3_e9120c8c",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78ed48fd_ab854154",
        "filename": "samples/BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-10-22T19:56:37Z",
      "side": 1,
      "message": "if there are 2 contexts contributing to the same frame, how is it handled?",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd3d5bf_0e0e516e",
        "filename": "samples/BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-23T19:27:38Z",
      "side": 1,
      "message": "This example is limited to one context. If we were capturing two right now they\u0027re write to two different cpp files. The core issue is EGL capture (http://anglebug.com/4035).\n\nTo properly handle EGL capture we should switch from tracking \"context1\", \"context2\" etc to \"thread1\", \"thread2\", etc. With GL and EGL calls interspersed.\n\nFor now we\u0027re keeping it simple and assuming we\u0027re just a single context.",
      "parentUuid": "78ed48fd_ab854154",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac5c1a87_947aa821",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-10-22T19:56:37Z",
      "side": 1,
      "message": "is this thread-safe? or are we limiting first implementation to single threaded usecases?",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cfe1409_345502ee",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-23T19:27:38Z",
      "side": 1,
      "message": "In general the frame capture is all behind a mutex. ANGLE itself uses a front-end mutex right now before each entry point.\n\nThis specific class should be safe even without a mutex. It only uses stack-based storage. No globals.",
      "parentUuid": "ac5c1a87_947aa821",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7b2d75b_f5ddce49",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 495,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2019-10-22T19:56:37Z",
      "side": 1,
      "message": "are shaders treated as binary blobs for capture/replay?",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42ace34b_fdb863e0",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 495,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-10-23T19:27:38Z",
      "side": 1,
      "message": "Shaders can be captured as strings. Currently kInlineDataThreshold controls if we capture data into a binary data file or into strings in the cpp file. This is pretty tuneable and we\u0027re open to feedback.",
      "parentUuid": "e7b2d75b_f5ddce49",
      "revId": "6b87d184cd1671b29d7ad3b1806e3ea7b013e7e3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}