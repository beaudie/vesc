{
  "comments": [
    {
      "key": {
        "uuid": "a54cbd67_d2aa6862",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 816,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T20:57:05Z",
      "side": 1,
      "message": "Programs already use ref counting. Can we take advantage of that?",
      "range": {
        "startLine": 816,
        "startChar": 5,
        "endLine": 816,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b250dbd_1753e6ba",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 816,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T01:16:40Z",
      "side": 1,
      "message": "Good idea.   It does require some extra complexity when adding programs to the pipeline, since a user could do something like:\n\n    glUseProgramStages(pipeline, GL_ALL_SHADER_BITS, prog1); // prog1 ref +1\n    glUseProgramStages(pipeline, GL_VERTEX_SHADER_BIT, prog2); // prog1 -1, prog2 +1\n    glUseProgramStages(pipeline, GL_FRAGMENT_SHADER_BIT , prog2); // nothing\n...\n    glUseProgramStages(pipeline, GL_VERTEX_SHADER_BIT, prog3); // prog3 +1\n    glUseProgramStages(pipeline, GL_FRAGMENT_SHADER_BIT , prog4); // prog4 +1, prog2 -1\n...\n    glUseProgramStages(pipeline, GL_ALL_SHADER_BITS, prog5); // prog3 -1, prog4 -1, prog5 +1\n\nSo there\u0027s some new looping in ProgramPipelineState::useProgramStages() to handle this, along with ProgramPipeline::onDestroy() releasing any remaining ref counts.",
      "parentUuid": "a54cbd67_d2aa6862",
      "range": {
        "startLine": 816,
        "startChar": 5,
        "endLine": 816,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52b2c63d_eac0c262",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 816,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T07:39:16Z",
      "side": 1,
      "message": "Oops, never mind about the complexity, I was overthinking it.   We don\u0027t care what the ref counts actually are (multiple increments/decrements are fine if the program is used for multiple stages), just that they return to 0 when the PPO is done using that program.",
      "parentUuid": "5b250dbd_1753e6ba",
      "range": {
        "startLine": 816,
        "startChar": 5,
        "endLine": 816,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdbac63d_807c4031",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 7625,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T20:57:05Z",
      "side": 1,
      "message": "this is inconsistent with how we manage ids for other types. Correct me if I\u0027m wrong: these queries return FALSE if the object is \"genned\" and not yet bound. For situations like that we reserve nullptr entries in the handle map allocator. We only make valid pointers for objects that have been bound using \"checkBlahAllocation\". Please fill me in if I\u0027m off base.",
      "range": {
        "startLine": 7625,
        "startChar": 44,
        "endLine": 7625,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edefa53c_0883cf5f",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 7625,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T01:16:40Z",
      "side": 1,
      "message": "You are correct about how the query works.\n\nUnfortunately, the approach you described doesn\u0027t work for PPOs, since a user can do the following:\n\n    glGenProgramPipelines();\n    glUseProgramStages();  // need a real PPO for this call\n    glBindProgramPipeline();\n\nWe need a real PPO to be constructed by glGenProgramPipelines() so it can hold the Programs that are added to it; lazily constructing them during glBindProgramPipeline() is too late.",
      "parentUuid": "cdbac63d_807c4031",
      "range": {
        "startLine": 7625,
        "startChar": 44,
        "endLine": 7625,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4938073_d047abea",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 7625,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-08T16:41:59Z",
      "side": 1,
      "message": "Aha, but look at the spec under UseProgramStages:\n\n\u003e If pipeline is a name that has been generated (without subsequent deletion) by\n\u003e GenProgramPipelines, but refers to a program pipeline object that has not been\n\u003e previously bound, the GL first creates a new state vector in the same manner as\n\u003e when BindProgramPipeline creates a new program pipeline object.",
      "parentUuid": "edefa53c_0883cf5f",
      "range": {
        "startLine": 7625,
        "startChar": 44,
        "endLine": 7625,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "525d9240_c94cd0c9",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 7625,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T22:23:59Z",
      "side": 1,
      "message": "Oh, interesting.  I\u0027ll take a look at that approach then.",
      "parentUuid": "c4938073_d047abea",
      "range": {
        "startLine": 7625,
        "startChar": 44,
        "endLine": 7625,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4358f0a4_5128c00d",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 97
      },
      "lineNbr": 7625,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-09T07:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "525d9240_c94cd0c9",
      "range": {
        "startLine": 7625,
        "startChar": 44,
        "endLine": 7625,
        "endChar": 56
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "374b14ef_efb3b1f6",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 97
      },
      "lineNbr": 108,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T20:57:05Z",
      "side": 1,
      "message": "I\u0027m still hoping we can do this particular change pre-patch. Can work it together offline tomorrow.",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80c40337_497a1b15",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 97
      },
      "lineNbr": 108,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T22:23:59Z",
      "side": 1,
      "message": "Done\n\nPTAL at the changes, since I don\u0027t quite understand the difference between Context::mDrawDirtyObjects, mComputeDirtyObjects and State::mDirtyObjects since the same State::DIRTY_OBJECT_PROGRAM_PIPELINE needs to be set in both in order for ProgramPipeline::syncState() to be called:\n\n\n    [[[ this takes mDrawDirtyObjects or mComputeDirtyObjects  ]]]\n    ANGLE_INLINE angle::Result Context::syncDirtyObjects(const State::DirtyObjects \u0026objectMask)\n    {\n        return mState.syncDirtyObjects(this, objectMask);\n    }\n\n\n    ANGLE_INLINE angle::Result State::syncDirtyObjects(const Context *context,\n                                                       const DirtyObjects \u0026bitset)\n    {\n        [[[ only handle bits in both mDrawDirtyObjects/mComputeDirtyObjects AND mDirtyObjects ]]]\n        const DirtyObjects \u0026dirtyObjects \u003d mDirtyObjects \u0026 bitset;\n\n        for (size_t dirtyObject : dirtyObjects)\n        {\n            ANGLE_TRY((this-\u003e*kDirtyObjectHandlers[dirtyObject])(context));\n        }\n\n        mDirtyObjects \u0026\u003d ~dirtyObjects;\n        return angle::Result::Continue;\n    }",
      "parentUuid": "374b14ef_efb3b1f6",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a09762f_8960cebf",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 97
      },
      "lineNbr": 108,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-09T13:46:47Z",
      "side": 1,
      "message": "Context::mDrawDirtyObjects, mComputeDirtyObjects: these are \"masks\" that draw and compute operations check when syncing dirty objects. They exclude flags that aren\u0027t needed to check for draw or compute. i.e. the read framebuffer is excluded from draw. Texture samplers are excluded from compute. They\u0027re set up in Context::initialize mostly. We could probably rename these to be mDrawDirtyObjectMask, etc if the naming causes confusion.\n\nmDirtyObjects -\u003e set this when your state changes and needs to be synced.",
      "parentUuid": "80c40337_497a1b15",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 108,
        "endChar": 5
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24963564_cbde1785",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 97
      },
      "lineNbr": 2746,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T20:57:05Z",
      "side": 1,
      "message": "These seem to make more sense as members of the Program classes. The next function (ValidateProgramDrawStates) does make more sense here as it deals with error strings.",
      "range": {
        "startLine": 2699,
        "startChar": 0,
        "endLine": 2746,
        "endChar": 0
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf5d40d1_412d71dd",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 97
      },
      "lineNbr": 2746,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-08T01:16:40Z",
      "side": 1,
      "message": "These were in Program until you requested that they get moved:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2072652/88/src/libANGLE/validationES.cpp#2842\n\nDone.",
      "parentUuid": "24963564_cbde1785",
      "range": {
        "startLine": 2699,
        "startChar": 0,
        "endLine": 2746,
        "endChar": 0
      },
      "revId": "735e143e75f9f323848b8f70740c331bbc7de5ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}