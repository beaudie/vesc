{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e8667a6b_4e517bf4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "Adding some comments to explain my thoughts on individual changes. I\u0027m aware there\u0027s some comment cleanup around these to do, but I\u0027d welcome feedback.",
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f48188da_6cffeb79",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 627,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "I think this is right, because we want to keep the thread going until it has been instructed to exit.\n\nThe UNREACHABLE() is less ideal.",
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55fcf747_2ff13a6d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 627,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-29T20:48:48Z",
      "side": 1,
      "message": "+1 here.",
      "parentUuid": "f48188da_6cffeb79",
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2017a9f6_87ea97a8",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 627,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T23:42:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55fcf747_2ff13a6d",
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f36c54c_48fd08af",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 739,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "I\u0027m pretty sure we want the angle::Result::Stop here so that the calling function can handle the error code. We\u0027ve already checked for the benign ones in the condition here.",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 739,
        "endChar": 13
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a06bdf37_807adce9",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 739,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-29T20:48:48Z",
      "side": 1,
      "message": "Agree. I did not write original code here, but from the comment, it appears did intentionally. I will +1 on your change here. Maybe slight better here by just use  ANGLE_VK_TRY(result) macro?",
      "parentUuid": "9f36c54c_48fd08af",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 739,
        "endChar": 13
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02521319_dfb386c6",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 739,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T23:42:56Z",
      "side": 1,
      "message": "Oh yeah, of course! That\u0027s way better.",
      "parentUuid": "a06bdf37_807adce9",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 739,
        "endChar": 13
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a20fdf30_bd86e72d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "This is a bit gross. Would rather we keep holding the queue submit lock the whole time, even through handleDeviceLost, but I\u0027m not sure of a better way to dodge the deadlock.",
      "range": {
        "startLine": 1517,
        "startChar": 0,
        "endLine": 1529,
        "endChar": 38
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fb25892_3f9db11d",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-29T20:48:48Z",
      "side": 1,
      "message": "Did it actually cause deadlock here? What I read here is that ANGLE_VK_TRY calls ContextVk::handleError, which calls ContextVk::handleDeviceLost(), which calls RendererVk::notifyDeviceLost(), which calls Display::notifyDeviceLost() and calls  ErrorSet::markContextLost(), calls ErrorSet::setContextLost(). None of this will call back into commandProcessor or commandQueue code again. It mostly set state in context so that next call will trigger error processing?",
      "parentUuid": "a20fdf30_bd86e72d",
      "range": {
        "startLine": 1517,
        "startChar": 0,
        "endLine": 1529,
        "endChar": 38
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a35f49_07d851b6",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T23:42:56Z",
      "side": 1,
      "message": "Yes, it deadlocks with AsyncCommandQueue (or throws an exception, with use_custom_libcxx\u003dfalse):\n\n \tmsvcp140d.dll!std::_Throw_Cpp_error(int code) Line 36\tC++\n \tlibGLESv2.dll!std::_Mutex_base::lock() Line 81\tC++\n \tlibGLESv2.dll!std::lock_guard\u003cstd::mutex\u003e::lock_guard(std::mutex \u0026 _Mtx) Line 493\tC++\n \tlibGLESv2.dll!rx::vk::CommandQueue::handleDeviceLost(rx::RendererVk * renderer) Line 1121\tC++\n \tlibGLESv2.dll!rx::vk::CommandProcessor::handleDeviceLost(rx::RendererVk * renderer) Line 841\tC++\n \tlibGLESv2.dll!rx::vk::CommandProcessor::handleError(VkResult errorCode, const char * file, const char * function, unsigned int line) Line 541\tC++\n \tlibGLESv2.dll!rx::vk::CommandQueue::queueSubmit(rx::vk::Context * context, std::unique_lock\u003cstd::mutex\u003e \u0026\u0026 dequeueLock, egl::ContextPriority contextPriority, const VkSubmitInfo \u0026 submitInfo, rx::vk::DeviceScoped\u003crx::vk::CommandBatch\u003e \u0026 commandBatch, const rx::QueueSerial \u0026 submitQueueSerial) Line 1532\tC++\n\nThe \"context\" passed to `ANGLE_VK_TRY` there is either `ContextVk` (non-AsyncCommandQueue) or `CommandProcessor` (AsyncCommandQueue). The latter results in the above code path.\n\nIt\u0027s likely there\u0027s a better solution here...",
      "parentUuid": "4fb25892_3f9db11d",
      "range": {
        "startLine": 1517,
        "startChar": 0,
        "endLine": 1529,
        "endChar": 38
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00cd75c2_1dd11c61",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-30T21:04:24Z",
      "side": 1,
      "message": "Yea, I think the problem is that we are using CommandProcessor as context here. If we record the actual context pointer in the CommandProcessor commands, and then use that actual context here, then I believe you do not have this dead lock problem. The handleError call will go to Context::handleError instead of CommandProcessor. And the error code will be return to the correct context. Yout also have the same bug in line 1502 above, that if finishOneCommandBatchAndCleanupImpl call returns error, you end up with same dead lock.",
      "parentUuid": "f6a35f49_07d851b6",
      "range": {
        "startLine": 1517,
        "startChar": 0,
        "endLine": 1529,
        "endChar": 38
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34412326_3f9fef60",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1529,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-31T16:48:31Z",
      "side": 1,
      "message": "There\u0027s a bunch more problems now that I\u0027m reading this more deeply.\n\nThe basic design seems to be:\n\n- CommandProcessor queues up VkResult error codes and some associated contextual information into a queue called mErrors.\n\n- When RendererVk issues a request to CommandProcessor, most requests do a read-and-pop of pending errors from the mErrors queue, which get propagated back up to the ContextVk that called into RendererVk.\n\nProblems:\n\n- From my read of this, RendererVk can be shared across GL contexts, so it\u0027s possible for CommandProcessor to pop errors from different contexts. This doesn\u0027t seem right, because one context may receive errors it didn\u0027t cause, and the one causing the error didn\u0027t get the appropriate error reported. In a DEVICE_LOST state, the device loss will likely propagate to all the contexts because the VkDevice stops accepting commands, but what about other error types?\n\n- We can\u0027t just directly use ContextVk::handleErrors from CommandProcessor because it\u0027s in a separate thread and that would potentially cause all kinds of mayhem. ContextVk needs to have the errors propagated up from RendererVk. \n\n- Unrelated, but noticed: RendererVk::finishOneCommandBatchAndCleanup doesn\u0027t account for CommandProcessor?",
      "parentUuid": "00cd75c2_1dd11c61",
      "range": {
        "startLine": 1517,
        "startChar": 0,
        "endLine": 1529,
        "endChar": 38
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8bca17c_f7f051b1",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7232,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "For all the if(!deviceLost) { ASSERT(); } changes in this CL, the asserts would always fire if vkQueueSubmit is returning VK_ERROR_DEVICE_LOST.",
      "range": {
        "startLine": 7229,
        "startChar": 3,
        "endLine": 7232,
        "endChar": 5
      },
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54c0c18e_759ef92d",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2152,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2023-08-29T18:40:56Z",
      "side": 1,
      "message": "Note: This is needed because any of the ANGLE_TRY/ANGLE_VK_TRY in here could fail and cause the vk::Semaphore to go out of scope without being destroyed.",
      "revId": "89c7431a973dd9d6ca9fbe79a32b9ff6387056eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}