{
  "comments": [
    {
      "key": {
        "uuid": "6af3a9a0_de0a9751",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-25T16:25:10Z",
      "side": 1,
      "message": "nit: so many?",
      "range": {
        "startLine": 9,
        "startChar": 266,
        "endLine": 9,
        "endChar": 275
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06cfffc9_d6e95fe5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-25T16:25:10Z",
      "side": 1,
      "message": "nit: can you wrap this to 71 chars?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 612
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c013aa0_9935ef7b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-25T16:25:10Z",
      "side": 1,
      "message": "nit: maybe tag with Bug: angleproject:2966?",
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15b91538_85e97be6",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 1971,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-25T16:25:10Z",
      "side": 1,
      "message": "Had a similar prototype and was thinking about how to encapsulate this.\n\nIf we make limit the inline visible to the entry points files (entry_points_gles_2_0.cpp, etc) then the rest of ANGLE won\u0027t have to be recompiled when we update them. Can we make a new header for these, say Context_gles_2_0.h to mirror entry_points_gles_2_0.h, and put the inlines there? \n\nYou\u0027ll need to update template_sources_includes and source_includes in scripts/generate_entry_points.py and run scripts/run_code_generation.py to regen the autogenerated entry points files. But I think it\u0027s worth doing.",
      "range": {
        "startLine": 1919,
        "startChar": 0,
        "endLine": 1971,
        "endChar": 1
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad23117f_9fcee445",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 1971,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2018-12-26T14:51:46Z",
      "side": 1,
      "message": "I\u0027ll move the inlined functions to a separate file - though I do not think that the inlining is that bad here with \u0027only\u0027 ~180 files to be recompiled for the angle_perftests.",
      "parentUuid": "15b91538_85e97be6",
      "range": {
        "startLine": 1919,
        "startChar": 0,
        "endLine": 1971,
        "endChar": 1
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d5ffd00_da189551",
        "filename": "src/libANGLE/renderer/gl/VertexArrayGL.h",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-25T16:25:10Z",
      "side": 1,
      "message": "I think we can get even better perf to this inlining by doing an early skip check in ContextGL::setDrawElementsState. Modify ContextGL::setDrawElementsState to have this:\n\nif (context-\u003egetStateCache()-\u003ehasAnyActiveClientAttrib() || vao-\u003egetElementArrayBuffer() \u003d\u003d nullptr)\n{\n    const VertexArrayGL *vaoGL \u003d GetImplAs\u003cVertexArrayGL\u003e(vao);\n    vaoGL-\u003esyncDrawElementsState(...);\n}\n\nif (webgl....)\n\nI think we won\u0027t need the inlining and speed will likely be better since we won\u0027t be tinkering with an index range.",
      "range": {
        "startLine": 139,
        "startChar": 1,
        "endLine": 191,
        "endChar": 0
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbf604b6_fdba7a7e",
        "filename": "src/libANGLE/renderer/gl/VertexArrayGL.h",
        "patchSetId": 2
      },
      "lineNbr": 191,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2018-12-26T14:51:46Z",
      "side": 1,
      "message": "I\u0027ve added your proposal and it brings indeed a good performance boost. With a few more minor changes total the total performance gain is now 16%.\n\nI kept the forwarding function syncDrawElementsState -\u003e syncDrawState as inline function since it doesn\u0027t have any (complex) logic and the number of generated instruction for this delegation function is quite high due to the number of parameters.",
      "parentUuid": "3d5ffd00_da189551",
      "range": {
        "startLine": 139,
        "startChar": 1,
        "endLine": 191,
        "endChar": 0
      },
      "revId": "cabb0d8b9a30692fe5a7888f336b82b727d90152",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}