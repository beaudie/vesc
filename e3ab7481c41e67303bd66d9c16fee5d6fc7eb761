{
  "comments": [
    {
      "key": {
        "uuid": "e211990a_45576cd3",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 370,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-04T13:46:18Z",
      "side": 1,
      "message": "Hm, I don\u0027t like how this duplicates the RenderTarget extraction in Buffer11::PackStorage::packPixels. One idea is to store an ANGLEFormat in TextureHelper11 instead of a DXGI format. Although I\u0027m beginning to wonder exactly what the difference between an ANGLE format and DXGI format is, and when they should be used.",
      "range": {
        "startLine": 359,
        "startChar": 8,
        "endLine": 370,
        "endChar": 75
      },
      "revId": "e3ab7481c41e67303bd66d9c16fee5d6fc7eb761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b881d5_4ee36fc2",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 370,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-04T14:59:18Z",
      "side": 1,
      "message": "Well, at its heart an ANGLE format contains necessary parameters for implementing one or more GL formats. The DXGI formats are just formats for specific resources and views in the D3D API. Sometimes it\u0027s not as clear which one should be used to make decisions about more parameters, but I wouldn\u0027t get too hung up on that. I\u0027ve developed these patches to lay a low-risk path to the functionality we want - I think if there are no functional issues in this code, there are higher-value things for us to chase rather than polish the design too much.",
      "parentUuid": "e211990a_45576cd3",
      "range": {
        "startLine": 359,
        "startChar": 8,
        "endLine": 370,
        "endChar": 75
      },
      "revId": "e3ab7481c41e67303bd66d9c16fee5d6fc7eb761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e211990a_c54b7c27",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 370,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-04T15:05:36Z",
      "side": 1,
      "message": "ANGLE puts a lot of effort into keeping the code pretty streamlined so I\u0027d like to maintain that overriding goal. In this case, take a look at replacing the DXGI format in TextureHelper11 with the ANGLE format. Also see if you can get rid of the GetDesc call, which was a bit of a hack.",
      "parentUuid": "a2b881d5_4ee36fc2",
      "range": {
        "startLine": 359,
        "startChar": 8,
        "endLine": 370,
        "endChar": 75
      },
      "revId": "e3ab7481c41e67303bd66d9c16fee5d6fc7eb761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57430950_8ff8b590",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 370,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-07T09:02:15Z",
      "side": 1,
      "message": "What you\u0027re asking here doesn\u0027t make sense to me. TextureHelper11 specifically wraps getting information from a texture resource given only the resource handle. The class could be removed entirely in favor of a different architecture, but there\u0027s very little that could be changed inside the class. The DXGI format of a texture can\u0027t be mapped back to the ANGLE format in a straightforward way - and a while back you asked to get rid of the reverse mapping from [texFormat, srvFormat, dsvFormat, rtvFormat], which I agreed was a good idea.",
      "parentUuid": "e211990a_c54b7c27",
      "range": {
        "startLine": 359,
        "startChar": 8,
        "endLine": 370,
        "endChar": 75
      },
      "revId": "e3ab7481c41e67303bd66d9c16fee5d6fc7eb761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "372a157b_4e63f3bb",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 8
      },
      "lineNbr": 370,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-07T14:58:07Z",
      "side": 1,
      "message": "Dang, sorry we\u0027re not getting through to each other here. I do agree getting rid of the reverse mapping is great, and I also think it\u0027s possible with my suggestion, but let me explain a different way.\n\nI looked where TextureHelper11 was created, and it\u0027s either coming from a) RenderTarget11 or from b) CreateStagingTexture. With a) you have an ANGLEFormat from the RenderTarget11 itself (thanks to your changes) and in b) it seems as though we\u0027re creating a staging texture from another TextureHelper11. This means if the first TextureHelper11 had an ANGLEFormat, we can get it from the first, for the staging TextureHelper11.\n\nNet result is I believe you can pass in an ANGLEFormat to the TextureHelper11 init methods. We can keep this information though the pipeline, and use it later in the code.\n\nAs a partial aside, it should also be able to pass in the Texture Size as well. If it\u0027s possible to pass in the sample count (not immediately obvious if it is) you could remove the initDesc() method. But that\u0027s just gravy, if it\u0027s even possible.\n\nDoes this seem to make a bit more sense? If not, let\u0027s chat tomorrow around 10AM EST? I really want to keep these patches landing at a good speed.",
      "parentUuid": "57430950_8ff8b590",
      "range": {
        "startLine": 359,
        "startChar": 8,
        "endLine": 370,
        "endChar": 75
      },
      "revId": "e3ab7481c41e67303bd66d9c16fee5d6fc7eb761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}