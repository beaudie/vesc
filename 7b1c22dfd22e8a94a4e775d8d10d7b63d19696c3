{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21a5a93b_012a9829",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5456,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-03T18:40:23Z",
      "side": 1,
      "message": "Doesn\u0027t `ImageHelper::initMemory` already do this when this function returns?",
      "revId": "7b1c22dfd22e8a94a4e775d8d10d7b63d19696c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec4f3cd_d28bc794",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5456,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-04-03T18:52:10Z",
      "side": 1,
      "message": "At the end of `initMemory()`, `initializeNonZeroMemory()` uses a staging buffer when `VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT` is disabled in `flags` and mapping is unavailable. In the pre-VMA memory allocation method, `InitMappableDeviceMemory()` is used after the allocation when mapping is available, which is also the case for the retracing script.",
      "parentUuid": "21a5a93b_012a9829",
      "revId": "7b1c22dfd22e8a94a4e775d8d10d7b63d19696c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e94f6b8d_362ea68c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5456,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-03T18:54:38Z",
      "side": 1,
      "message": "Ah right, that\u0027s for when it\u0027s _not_ host-visible",
      "parentUuid": "bec4f3cd_d28bc794",
      "revId": "7b1c22dfd22e8a94a4e775d8d10d7b63d19696c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef56972f_92509e88",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5456,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-05T16:07:22Z",
      "side": 1,
      "message": "Why not move this into ImageHelper where we do zerofill when it is not host visible, so that zerofill code is located in one place and also consistent with BufferHelper?",
      "parentUuid": "e94f6b8d_362ea68c",
      "revId": "7b1c22dfd22e8a94a4e775d8d10d7b63d19696c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "748821cf_f4d8c0f0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5456,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-05T16:10:41Z",
      "side": 1,
      "message": "I was initially thinking the same. But there\u0027s the else case in `ImageHelper::initMemory` which has the non-zero-init buried deep inside the memory allocation code.\n\nStill an improvement though, I agree.",
      "parentUuid": "ef56972f_92509e88",
      "revId": "7b1c22dfd22e8a94a4e775d8d10d7b63d19696c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}