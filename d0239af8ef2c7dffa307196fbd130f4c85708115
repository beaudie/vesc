{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "54c6ce2a_809264d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-03-31T15:36:37Z",
      "side": 1,
      "message": "Let\u0027s turn off real_gangster_crime and land this fix.",
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92333f93_dae3f59e",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-24T02:02:12Z",
      "side": 1,
      "message": "This may be a little cleaner as:\n\n    if (userParam)\n    {\n        ANGLERenderTest *renderTest \u003d\n            const_cast\u003cANGLERenderTest *\u003e(reinterpret_cast\u003cconst ANGLERenderTest *\u003e(userParam));\n        renderTest-\u003eonErrorMessage(message);\n    }\n\nSo we only do all the work if we have a valid pointer to begin with.",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 218,
        "endChar": 5
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fada726_63563889",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-03-31T15:36:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "92333f93_dae3f59e",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 218,
        "endChar": 5
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4975381c_0d166f2f",
        "filename": "src/tests/perf_tests/ANGLEPerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-07T15:41:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fada726_63563889",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 218,
        "endChar": 5
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38e63c6_6c97879e",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-24T02:02:12Z",
      "side": 1,
      "message": "What\u0027s going on here?",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 380,
        "endChar": 11
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92d181c8_61bf6dc8",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-03-31T15:36:37Z",
      "side": 1,
      "message": "This is what led to the messenger_lite failure.  I\u0027m guessing it was an experiment and should be removed before landing.",
      "parentUuid": "e38e63c6_6c97879e",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 380,
        "endChar": 11
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eebddc3_e9b5b029",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-07T15:41:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92d181c8_61bf6dc8",
      "range": {
        "startLine": 376,
        "startChar": 0,
        "endLine": 380,
        "endChar": 11
      },
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0118e347_d26f4a7a",
        "filename": "util/shader_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-23T21:03:56Z",
      "side": 1,
      "message": "You could avoid the global variable if you invert the chain. Let the application query the pointer to the default handler and call it from its own handler first.",
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb03b1da_699cafdb",
        "filename": "util/shader_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-23T22:15:15Z",
      "side": 1,
      "message": "I don\u0027t know what the application or default handler is in the above suggestion. Can we go with this?",
      "parentUuid": "0118e347_d26f4a7a",
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65c0c706_2968340c",
        "filename": "util/shader_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-24T03:37:20Z",
      "side": 1,
      "message": "application \u003d test code (whoever is registering this). Default handler \u003d `DebugMessageCallback`\n\nI\u0027d avoid the global, but I\u0027m not pushing on this.",
      "parentUuid": "eb03b1da_699cafdb",
      "revId": "d0239af8ef2c7dffa307196fbd130f4c85708115",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}