{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ccc1eea_8e113463",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2021-10-20T18:24:38Z",
      "side": 1,
      "message": "most of this code is new to me so not sure about what I don\u0027t know but walking over it lgtm",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9239a14_11ea09ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-20T19:53:25Z",
      "side": 1,
      "message": "lgtm\n\nThe test failures on the Mac AMD machines are probably happening because the tests are now actually running on the Intel GPU. Gregg ran into this in his own testing - the ANGLE_PREFERRED_DEVICE environment variable switches which GPU ANGLE uses, but not how test expectations are parsed.\n\nI think the way to fix this is to set the display creation attribute in src/third_party/angle/util/EGLWindow.cpp . Not sure whether it needs to honor ANGLE_PREFERRED_DEVICE - haven\u0027t checked to see how that\u0027s handled. Needs local testing though in particular of the failed tests.",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "816ce41d_04e9172a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2021-10-21T17:06:59Z",
      "side": 1,
      "message": "Looking at DisplayMtl.mm, it looks like ANGLE_PREFERRED_DEVICE is still respected by an early return in getMetalDeviceMatchingAttribute\nLocal testing confirms this, I\u0027m able to run the tests with ANGLE_PREFERRED_DEVICE\u003damd and I see AMD, same for intel. It even causes the new tests I added to fail because it no longer respects EGL_POWER_PREFERENCE_ANGLE (a separate issue, maybe worth it to skip the tests if ANGLE_PREFERRED_DEVICE is present)\n\nIt also looks like the bots aren\u0027t running with ANGLE_PREFERRED_DEVICE?\n\nI can\u0027t seem to reproduce any of the failures. Also, the failures aren\u0027t due to mismatched expectations, none of the failed tests have expectations for either intel or amd.\n\nI\u0027m still looking into what\u0027s going on.",
      "parentUuid": "c9239a14_11ea09ff",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f53daa_180ac0b3",
        "filename": "extensions/EGL_ANGLE_display_power_preference.txt",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-20T19:53:25Z",
      "side": 1,
      "message": "This paragraph\u0027s incorrect - it was only needed for the dynamic GPU switching in the OpenGL backend. Please remove it.",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "777d2519_ea6e59fe",
        "filename": "extensions/EGL_ANGLE_display_power_preference.txt",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2021-10-21T17:06:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80f53daa_180ac0b3",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10d83f4f_b994f34c",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 644,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2021-10-21T06:17:47Z",
      "side": 1,
      "message": "I don\u0027t think this is how GetDisplayFromNativeDisplay is specified in EGL_ANGLE_platform_angle.\n\n    If \u003cnative_display\u003e is EGL_DEFAULT_DISPLAY a default display is returned.\n    Multiple calls with the same \u003cnative_display\u003e will return the same\n    EGLDisplay handle. If \u003cplatform\u003e is set to EGL_PLATFORM_ANGLE_ANGLE and\n    the returned display is in an uninitialized state, its attributes are\n    overwritten by those provided in the \u003cattrib_list\u003e, if any.\n\nI think the overall logic even with \u003cnative_display\u003e is that there is one EGLDisplay for one \u003cnative_display\u003e.\nThis is consistent with ANGLE Windows implementation, where the native_display is used to select the backend, as opposed to using attributes to select the backend..\n\nThe \"problem\" is also that it interacts with core EGL:\n\n    EGLDisplay eglGetDisplay(EGLNativeDisplayType display_id);\n    \n     If display id is EGL_DEFAULT_DISPLAY, a default display is returned. Multiple calls made to eglGetDisplay with the same display id will return the same EGLDisplay handle.\n     \n(I don\u0027t fully understand the significance of the core EGL language wrt \"implementation defined\" vs \"platform defined\" and how it would interact with ANGLE specifically but I don\u0027t think this changes the logic)",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7532078_b77ede29",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 644,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-10-21T15:20:56Z",
      "side": 1,
      "message": "I can explain this history here and the decision:\n\neglGetDisplay does have the requirement that display_id directly maps to an EGLDisplay. We wrote EGL_ANGLE_platform_angle before EGL 1.5 and eglGetPlatformDisplay existed so we borrowed the text. Now with EGL 1.5 and eglGetPlatformDisplay becoming core, the language is:\n\n   Multiple calls made to eglGetPlatformDisplay with the same parameters will\nreturn the same EGLDisplay handle\n\nparameters here is pretty ambiguous and I think we can decide what parameters will be a key for the display. I think every parameter is too much to key on, many are small tweaks and don\u0027t represent a different GPU but some greatly change the resulting display (like power preference) and I think it makes sense that we key on them.\n\nLet\u0027s update the EGL_ANGLE_platform_angle spec to use the same language as core eglGetPlatformDisplay too.",
      "parentUuid": "10d83f4f_b994f34c",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15146c1e_4035e252",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 6
      },
      "lineNbr": 644,
      "author": {
        "id": 1449558
      },
      "writtenOn": "2021-10-21T19:28:03Z",
      "side": 1,
      "message": "\u003e I can explain this history here and the decision:\n\nThank you, makes sense.\n\n\u003e I think every parameter is too much to key on, many are small tweaks\n\nI don\u0027t think anything passed as the display attributes is optional. I think omitting any of the attributes that WebKit passes causes similar bugs in WebKit that we have with the power preference.\nNot saying this patch should block on it..",
      "parentUuid": "c7532078_b77ede29",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff2dce19_5ea09eaf",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 917,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-10-20T19:53:25Z",
      "side": 1,
      "message": "EGL_ANGLE_display_power_preference",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70d589f6_23963231",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 6
      },
      "lineNbr": 917,
      "author": {
        "id": 1326275
      },
      "writtenOn": "2021-10-21T17:06:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff2dce19_5ea09eaf",
      "revId": "14e3fd9b30c4508b504ffabd440a8710e9f202a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}