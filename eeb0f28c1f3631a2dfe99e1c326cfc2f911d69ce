{
  "comments": [
    {
      "key": {
        "uuid": "92bd6e96_4791f36c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "nit: how about getColorAttachmentImage to mirror the name of the struct?",
      "range": {
        "startLine": 63,
        "startChar": 21,
        "endLine": 63,
        "endChar": 40
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8b47221_a727e9c1",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92bd6e96_4791f36c",
      "range": {
        "startLine": 63,
        "startChar": 21,
        "endLine": 63,
        "endChar": 40
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "165d9cee_a3400b6d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 530,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "similar comment as to below. Probably this can be an ASSERT.",
      "range": {
        "startLine": 530,
        "startChar": 4,
        "endLine": 530,
        "endChar": 24
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a111aa44_978a28ec",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 530,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-08T18:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "165d9cee_a3400b6d",
      "range": {
        "startLine": 530,
        "startChar": 4,
        "endLine": 530,
        "endChar": 24
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5117b7b7_947763dc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 563,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "The Vulkan back-end has a semantic distinction between \"destroy\" (immediately call VkDestory..) and \"release\" (calls the garbage collection if object is in use). can we call these releaseImage/releaseNonOwnedImage? Also maybe we could call that \u0027shared\u0027 instead of \u0027non-owned\u0027?",
      "range": {
        "startLine": 563,
        "startChar": 16,
        "endLine": 563,
        "endChar": 28
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdeb54e2_aa5da468",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 563,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "I changed it to releaseAndDeleteImage to make it clear that it is not just calling release on the image but deleting the ImageHelper too.  What do you think?\n\nI\u0027m also flexible on the terminology for owned/non-owned but \u0027shared\u0027 doesn\u0027t really convey who owns it.",
      "parentUuid": "5117b7b7_947763dc",
      "range": {
        "startLine": 563,
        "startChar": 16,
        "endLine": 563,
        "endChar": 28
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa6841e8_0ca10bea",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 563,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-07T14:38:44Z",
      "side": 1,
      "message": "SGTM on releaseAndDeleteImage. Maybe call it an \"image reference\" in the \"non owned\" scenario? Or \"image pointer\"?",
      "parentUuid": "cdeb54e2_aa5da468",
      "range": {
        "startLine": 563,
        "startChar": 16,
        "endLine": 563,
        "endChar": 28
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84ce9719_48b7231f",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 563,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-08T18:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa6841e8_0ca10bea",
      "range": {
        "startLine": 563,
        "startChar": 16,
        "endLine": 563,
        "endChar": 28
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f3ddb32_c50a4341",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "I think this should be an ASSERT that the image isn\u0027t shared. The front-end is responsible for calling TextureImpl::releaseTexImage before any redefinition of the texture images. See Texture::setImage for example in Texture.cpp (releaseTexImageInternal). So wouldn\u0027t the release already be done at this point?",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1ed7f95_97cdc6d2",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "That assert would be fine for this patch but won\u0027t be enough for the EGL images which don\u0027t have an explicit call for breaking the connection.",
      "parentUuid": "6f3ddb32_c50a4341",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c7285dc_2227d51c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-07T14:38:44Z",
      "side": 1,
      "message": "I think you might be mistaken. Look in Texture.cpp. There\u0027s lots of calls to orphanImages.  See in Texture::setImage for instance. I think it\u0027s handled in the front end for EGL Images as well.",
      "parentUuid": "c1ed7f95_97cdc6d2",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f7a2446_d52e59d0",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-08T18:23:45Z",
      "side": 1,
      "message": "There was nothing piped to the TextureImpl, I will add it for the EGL Image patches.",
      "parentUuid": "3c7285dc_2227d51c",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "457a57ae_101c64c4",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-08T18:30:19Z",
      "side": 1,
      "message": "It gets piped to EGLImageImpl::orphan. You should be able to handle the decoupling of the image at that point I think.",
      "parentUuid": "7f7a2446_d52e59d0",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05567635_dfc82517",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-08T18:56:35Z",
      "side": 1,
      "message": "Yea, problem is that the Image doesn\u0027t know what type the sibling is, and there is no common base class for impls of siblings.  I could either add an abstract ImageSiblingVk base class to this and RenderbufferVk or add a new enum that ImageSibling can hold which is initialized by gl::Texture and gl::Renderbuffer. I\u0027m not sure that\u0027s better than an if (!mOwnsImage) { release }  here.",
      "parentUuid": "457a57ae_101c64c4",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "978c7696_2792bab3",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-08T19:04:06Z",
      "side": 1,
      "message": "OK, I get it. Yeah it seems fairly harmless to keep it like it is here. Thanks.",
      "parentUuid": "05567635_dfc82517",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5d99414_adb30131",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-08T19:05:57Z",
      "side": 1,
      "message": "I tried and went down a hole of messyness :(",
      "parentUuid": "978c7696_2792bab3",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25684e0e_da45b610",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 790,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "nit: you can call \"return initImageViews(..);\" directly for a tiny optimization on some compilers.",
      "range": {
        "startLine": 788,
        "startChar": 0,
        "endLine": 790,
        "endChar": 35
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67bfcb12_a537ccc1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 790,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25684e0e_da45b610",
      "range": {
        "startLine": 788,
        "startChar": 0,
        "endLine": 790,
        "endChar": 35
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2caa7ed9_4dc258e4",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 798,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "You could conceivably leave the staging buffer around. I noticed you were doing this in your redefineImage call.",
      "range": {
        "startLine": 798,
        "startChar": 4,
        "endLine": 798,
        "endChar": 16
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e8a5bd2_556a2e2e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 798,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "The staging buffer should still be around after the releaseImage call.",
      "parentUuid": "2caa7ed9_4dc258e4",
      "range": {
        "startLine": 798,
        "startChar": 4,
        "endLine": 798,
        "endChar": 16
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95e15d86_6aff6623",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 798,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-07T14:38:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7e8a5bd2_556a2e2e",
      "range": {
        "startLine": 798,
        "startChar": 4,
        "endLine": 798,
        "endChar": 16
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3155df9f_173af22c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1050,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "aside: maybe at some point we could look at using a ref counted design.",
      "range": {
        "startLine": 1043,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 9
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a79d2ab_17a194da",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1050,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-07T14:27:37Z",
      "side": 1,
      "message": "I agree, there is still a strict owner but I would like to come back to this after and refactor it to have a wrapper that tracks the ownership.",
      "parentUuid": "3155df9f_173af22c",
      "range": {
        "startLine": 1043,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 9
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}