{
  "comments": [
    {
      "key": {
        "uuid": "92bd6e96_4791f36c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 13
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "nit: how about getColorAttachmentImage to mirror the name of the struct?",
      "range": {
        "startLine": 63,
        "startChar": 21,
        "endLine": 63,
        "endChar": 40
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "165d9cee_a3400b6d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 530,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "similar comment as to below. Probably this can be an ASSERT.",
      "range": {
        "startLine": 530,
        "startChar": 4,
        "endLine": 530,
        "endChar": 24
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5117b7b7_947763dc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 563,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "The Vulkan back-end has a semantic distinction between \"destroy\" (immediately call VkDestory..) and \"release\" (calls the garbage collection if object is in use). can we call these releaseImage/releaseNonOwnedImage? Also maybe we could call that \u0027shared\u0027 instead of \u0027non-owned\u0027?",
      "range": {
        "startLine": 563,
        "startChar": 16,
        "endLine": 563,
        "endChar": 28
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f3ddb32_c50a4341",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 615,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "I think this should be an ASSERT that the image isn\u0027t shared. The front-end is responsible for calling TextureImpl::releaseTexImage before any redefinition of the texture images. See Texture::setImage for example in Texture.cpp (releaseTexImageInternal). So wouldn\u0027t the release already be done at this point?",
      "range": {
        "startLine": 613,
        "startChar": 0,
        "endLine": 615,
        "endChar": 44
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25684e0e_da45b610",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 790,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "nit: you can call \"return initImageViews(..);\" directly for a tiny optimization on some compilers.",
      "range": {
        "startLine": 788,
        "startChar": 0,
        "endLine": 790,
        "endChar": 35
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2caa7ed9_4dc258e4",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 798,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "You could conceivably leave the staging buffer around. I noticed you were doing this in your redefineImage call.",
      "range": {
        "startLine": 798,
        "startChar": 4,
        "endLine": 798,
        "endChar": 16
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3155df9f_173af22c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1050,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-05T18:58:03Z",
      "side": 1,
      "message": "aside: maybe at some point we could look at using a ref counted design.",
      "range": {
        "startLine": 1043,
        "startChar": 0,
        "endLine": 1050,
        "endChar": 9
      },
      "revId": "eeb0f28c1f3631a2dfe99e1c326cfc2f911d69ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}