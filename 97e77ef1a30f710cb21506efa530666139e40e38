{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fbf2affd_5c614dcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-28T20:51:31Z",
      "side": 1,
      "message": "Nice find and fix, thanks a lot!",
      "revId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7b79312_adabc620",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 790,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-28T20:51:31Z",
      "side": 1,
      "message": "I almost think you can also change CommandQueue::queuePresent to return VkResult directly and remove swapchainStatus from argument, it will be more readable and simpler.",
      "range": {
        "startLine": 790,
        "startChar": 4,
        "endLine": 790,
        "endChar": 31
      },
      "revId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f85563b_d119dd93",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 790,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-05-01T12:20:39Z",
      "side": 1,
      "message": "In that case `lastPresentResult` will be always `VK_NOT_READY` when `asyncCommandQueue` is disabled. I want to have valid `lastPresentResult` regardless of `asyncCommandQueue` status.\n\nTo have valid `lastPresentResult` when `asyncCommandQueue` is disabled need to update `lastPresentResult` in the `RendererVk`, and I think that this is a less clean solution.\n\nIn my initial implementation both `CommandQueue::queuePresent` and `CommandProcessor::enqueuePresent` were returning `VkResult` and also updated `lastPresentResult`. First result is for the `RendererVk` method itself (which may be `CommandProcessor::enqueuePresent` - not a present), and the `lastPresentResult` is the actual present result. Now, `CommandProcessor::enqueuePresent()` initializes  `lastPresentResult` to `VK_SUCCESS` that is technically incorrect.\n\nIMO it is better to have 2 VkResult. Return result for the synchronous operation, and `SwapchainStatus` for asynchronous. However, when `asyncCommandQueue` is disabled, `SwapchainStatus` is still updated synchronously for consistency. I think this way we even can remove check for `asyncCommandQueue` in the `WindowSurfaceVk` and check `SwapchainStatus` unconditionally.",
      "parentUuid": "d7b79312_adabc620",
      "range": {
        "startLine": 790,
        "startChar": 4,
        "endLine": 790,
        "endChar": 31
      },
      "revId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1efffc46_8136770a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 2
      },
      "lineNbr": 790,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-05-05T21:03:29Z",
      "side": 1,
      "message": "I will submit this fix.\n\nUnresolved, because want to hear your opinion regarding my last response.",
      "parentUuid": "9f85563b_d119dd93",
      "range": {
        "startLine": 790,
        "startChar": 4,
        "endLine": 790,
        "endChar": 31
      },
      "revId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97e77ef1a30f710cb21506efa530666139e40e38",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}