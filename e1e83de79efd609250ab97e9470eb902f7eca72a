{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9dd96e2f_6d097dc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-19T15:46:22Z",
      "side": 1,
      "message": "The buffer age feature AFAIK doesn\u0027t use any particular implementation logic. Cc Mohan/Jeff.\n\nMohan/Jeff could you guys help drive a root cause/fix?",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0065a969_d89e2340",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-03-19T16:08:04Z",
      "side": 1,
      "message": "Implementation detail -",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d36990f_3245a259",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-03-19T16:08:04Z",
      "side": 1,
      "message": "Because AcquireNextImage doesn\u0027t happen until some draw (late acquire), but BufferAge needs buffer frame number and current frame count, SurfaceVk.cpp -WindowSurfaceVk::getBufferAge can call doDeferredAcquireNextImage() which can take time getting the next buffer.\n\nIf you have 2 buffers, I can see that you may have waits, and you can\u0027t look ahead into the mSwapchainImages[mCurrentSwapchainImageIndex] without ANI.",
      "parentUuid": "9dd96e2f_6d097dc6",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "751cf502_14d862af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-19T17:13:41Z",
      "side": 1,
      "message": "Jeff , I didn\u0027t totally follow, but do you think you could investigate and root cause this bug? We\u0027re going to land this workaround but it isn\u0027t ideal. It may come up in the context of Android conformance with your devices.",
      "parentUuid": "8d36990f_3245a259",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d908fcfa_be75fd1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-19T21:39:39Z",
      "side": 1,
      "message": "I think what Jeff is saying is merely that it makes sense for buffer age tests to be slow because they force us to do ANI early. It may not be a bug.",
      "parentUuid": "751cf502_14d862af",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5270b445_1c930069",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1106289
      },
      "writtenOn": "2021-03-20T04:43:24Z",
      "side": 1,
      "message": "This doesn\u0027t seem like a discussion to be had in the review of a change. Has a bug been opened for investigating and reporting findings about the root cause yet?",
      "parentUuid": "d908fcfa_be75fd1f",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae7d692_8653f06c",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-19T05:29:59Z",
      "side": 1,
      "message": "See how other extensions are handled above. We create a feature for such workarounds and then the extension is exposed based on that feature. This has a number of benefits:\n\n- The workaround shows up in chrome://gpu\n- We can modify the workaround in tests\n- The workaround can be modified through env vars.",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7523fb2_f40b4297",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1106289
      },
      "writtenOn": "2021-03-19T05:46:13Z",
      "side": 1,
      "message": "Thanks for the suggestion, but this isn\u0027t a workaround similar to those applied to other drivers. This is a short-term hack to get SwANGLE launched for Cuttlefish. I don\u0027t see a need for the benefits you listed. See https://chromium-review.googlesource.com/c/angle/angle/+/2727874 for another non-feature workaround/hack.",
      "parentUuid": "3ae7d692_8653f06c",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf65628b_f4f13e9c",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1106289
      },
      "writtenOn": "2021-03-19T16:27:26Z",
      "side": 1,
      "message": "As discussed, I turned it into a \"feature\".\n\nFor what it\u0027s worth, I still don\u0027t think this should be exposed to Chrome and tests and be modifiable. As a reference implementation that we have control over, SwiftShader shouldn\u0027t require any workarounds. Only the urgency of landing SwANGLE for Cuttlefish justifies this hack.\n\nAnyway, since it\u0027s all intended to be reverted once the root cause has been fixed, it doesn\u0027t matter much what form this takes.",
      "parentUuid": "e7523fb2_f40b4297",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32b7e80d_9f4e4106",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-19T21:32:15Z",
      "side": 1,
      "message": "FYI, two current examples:\n\n    // Feature disabled due to driver bugs:\n    //\n    // - Swiftshader on mac: http://anglebug.com/4937\n    // - Intel on windows: http://anglebug.com/5032\n    // - AMD on windows: http://crbug.com/1132366\n    ANGLE_FEATURE_CONDITION(\u0026mFeatures, enableMultisampledRenderToTexture,\n                            !(IsApple() \u0026\u0026 isSwiftShader) \u0026\u0026 !(IsWindows() \u0026\u0026 (isIntel || isAMD)));\n\n    // Feature disabled due to driver bugs:\n    //\n    // - Swiftshader: http://anglebug.com/5142\n    // - Qualcomm: http://anglebug.com/5143\n    ANGLE_FEATURE_CONDITION(\n        \u0026mFeatures, supportsImageCubeArray,\n        mPhysicalDeviceFeatures.imageCubeArray \u003d\u003d VK_TRUE \u0026\u0026 !isSwiftShader \u0026\u0026 !isQualcomm);\n\nDon\u0027t take it personally, \"features\" are how we manage to contain these hacks to one place. If anything, it will allow us to easily track where these hacks are applied.",
      "parentUuid": "bf65628b_f4f13e9c",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b22ef42_5a46de60",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1106289
      },
      "writtenOn": "2021-03-20T04:43:24Z",
      "side": 1,
      "message": "I understand why this feature (no pun intended) exists for GPU driver bug workarounds. Getting a fix from an IHV can take years, and even then it\u0027s often not rolled out everywhere. So workarounds like that are a fact of life for ANGLE, and it\u0027s an important quality of the project that the impact of these bugs on applications is eliminated or minimized in such a well-controlled fashion.\n\nAll I\u0027m saying is that for SwiftShader and Cuttlefish as a reference implementation we can and should aim higher. It\u0027s important to realize that we control everything about the Cuttlefish device. EVERYTHING. AquireNextImage times out? We can fix that. Need a new function which can handle this robustly? We can add that.\n\nSorry to hammer on this, but I\u0027d really like to get this message across. Even just today I found out Skia is applying a workaround for an (alleged) SwiftShader bug, which harms performance and which may be the cause of flakiness. We were never informed about the issue they were trying to \"solve\".\n\n\u003e Don\u0027t take it personally, \"features\" are how we manage to contain these hacks to one place. If anything, it will allow us to easily track where these hacks are applied.\n\nOf course it\u0027s nothing personal. I\u0027m just trying to get a point across (which you\u0027re free to agree or disagree with, but just stating \"features is how we do this\" isn\u0027t much of a nuanced argument). You\u0027re right that these ANGLE \"features\" are at least tracked well. As long as we understand that there\u0027s a difference between a GPU driver bug and a bug affecting SwiftShader, we\u0027re golden.\n\nThe benefit of a reference implementation which doesn\u0027t require workarounds is that it serves as an example for other vendors so that we can build a better ecosystem around this technology.",
      "parentUuid": "32b7e80d_9f4e4106",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2816dcf1_cfda24dd",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 256,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-20T11:40:33Z",
      "side": 1,
      "message": "\u003e All I\u0027m saying is that for SwiftShader and Cuttlefish as a reference implementation we can and should aim higher.\n\nNo arguments here!\n\nI missed the most important reason in the first comment, and that may have caused some misunderstanding. We use \"features\" to be able to track and contain whatever driver or platform specific thing we do. The fact that we can override or expose them is a(n important) bonus. \"features is how we do this\" means \"features is how we can make sure the workaround is not left there unnoticed for years\".\n\n\u003e As long as we understand that there\u0027s a difference between a GPU driver bug and a bug affecting SwiftShader, we\u0027re golden.\n\nBy the way, we use \"features\" for many things, including knowing which Vulkan features the driver exposes. So as far as ANGLE features are concerned, there\u0027s no difference between driver bugs, platform bugs, swiftshader bugs, hardware features, for-test flags etc. It\u0027s great to strive for an entirely bugfree swiftshader, sure, but when there is a bug (no matter how temporary), it doesn\u0027t make a difference for ANGLE if it was a hw or sws bug, it\u0027s dealt with the same way.",
      "parentUuid": "1b22ef42_5a46de60",
      "revId": "e1e83de79efd609250ab97e9470eb902f7eca72a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}