{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a444ecd5_21aa7194",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-05T17:17:52Z",
      "side": 1,
      "message": "Run again with fixes and check for failures when SINGLE_BUFFER is not supported.",
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d58a744_878d25d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-05T17:29:52Z",
      "side": 1,
      "message": "Perhaps we should move on with landing this change, then fix the setRenderBuffer issue with !EGL_SINGLE_BUFFER in a follow up CL. What do you think?",
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58f8360c_c7468512",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-05T18:05:38Z",
      "side": 1,
      "message": "OK. Makes sense\nI can\u0027t get all of it. I need some of it.",
      "parentUuid": "6d58a744_878d25d7",
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c4a2074_dcbe19b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-06T22:28:46Z",
      "side": 1,
      "message": "Continue conversation.",
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "334bfc72_e02f6db0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-06T23:02:34Z",
      "side": 1,
      "message": "Correction in my text. The spec has no text about EGL_SINGLE_BUFFER and eglSwapInterval.",
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9e6361f_b3ec1fe4",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-05T17:29:52Z",
      "side": 1,
      "message": "How about passing `mState.attributes.getAsInt(EGL_RENDER_BUFFER, EGL_BACK_BUFFER)` to `GetDesiredPresentMode`, in which case it would only select SHARED when renderBuffer is EGL_SINGLE_BUFFER?\n\nIn that case, we can also reuse `GetDesiredPresentMode` in `setRenderBuffer` below.\n\nI believe the logic of `if (renderBuffer \u003d\u003d EGL_SINGLE_BUFFER \u0026\u0026 !supportsSharedPresent()) { fail }` could fold in `GetDesiredPresentMode` as a consequence.",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6398412_7b71baf3",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-05T18:05:38Z",
      "side": 1,
      "message": "It kinda makes GetDesiredPresentMode weird:\n\nGetDesiredPresentMode(presentModesVector, swapInterval, renderBuffer);\n\nrenderBuffer would go first, if SINGLE_BUFFER\nthen swapInterval \u003e 0\nthen one of the other presentModes.\n\nis that OK?\nIt is also call in setSwapInterval, I would put EGL_BACK_BUFFER there? Does that potentially change mode?",
      "parentUuid": "c9e6361f_b3ec1fe4",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df699f6c_33964ac6",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-06T04:28:04Z",
      "side": 1,
      "message": "I guess the question is, what\u0027s the expected behavior if SINGLE_BUFFER and swapInterval \u003e 0? I don\u0027t know which should take precedence.\n\nAlso, yes, render buffer affecting setSwapInterval sounds right to me. If render buffer is SINGLE_BUFFER and setSwapInterval is called, don\u0027t you think SINGLE_BUFFER should be taken into account?",
      "parentUuid": "f6398412_7b71baf3",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1495dbb2_5eaf89f2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-06T22:28:46Z",
      "side": 1,
      "message": "There is no spec detail for what if eglSwapInterval is called while in EGL_SINGLE_BUFFER. It seems to me eglSwapInterval only applies to EGL_BACK_BUFFER. So I\u0027d ignore eglSwapInterval while in EGL_SINGLE_BUFFER - but this is written in spec. eglSwapInterval doesn\u0027t mean anything to EGL_SINGLE_BUFFER.",
      "parentUuid": "df699f6c_33964ac6",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c686d93_8eb4caca",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-06T23:02:34Z",
      "side": 1,
      "message": "*but this is NOT written in spec.",
      "parentUuid": "1495dbb2_5eaf89f2",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb77f201_bccea51c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-07T04:29:48Z",
      "side": 1,
      "message": "Right, then yeah GetDesiredPresentMode should take SINGLE_BUFFER into account. Vice versa, setRenderBuffer when !SINGLE_BUFFER should take the swap interval into account.\n\nMight need to cache the interval for use at setRenderBuffer time if not available already as state.",
      "parentUuid": "1c686d93_8eb4caca",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0c97afe_51d6094e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-07T18:56:26Z",
      "side": 1,
      "message": "The desired present mode is in the \"presentModes\", and we control this with swapInterval. So the simple thing is in setSwapInterval - to ignore if we are in SHARED_PRESNT. otherwise this would change modes, and there is not indication that is what spec suggests or app wants to do. So check out next patch, its simple.",
      "parentUuid": "fb77f201_bccea51c",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39f4cd85_039eb5be",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-07T19:49:30Z",
      "side": 1,
      "message": "Ok, that seems better, but still doesn\u0027t fix this scenario (we are way in the weeds here ðŸ˜„):\n\n- Start in !SINGLE\n- setSwapInterval(1) -\u003e switch to FIFO\n- setRenderBuffer(SINGLE) -\u003e switch to SHARED\n- setSwapInterval(0) (app wants MAILBOX, ignored)\n- setRenderBuffer(!SIGNEL)\n\nThe last call currently unconditionally switches to FIFO, despite what the app asked for.",
      "parentUuid": "d0c97afe_51d6094e",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1274f320_941bd816",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-08T17:53:29Z",
      "side": 1,
      "message": "OK. That seems logical, even though the specs don\u0027t cover this case.\n\nThinking out loud here: (open question)\neglCreateWindowsSurfacewith EGL_SINGLE_BUFFER (EGL core). Should this be VK_PRESENT_MODE_IMMEDIATE_KHR mode? How does this behave with ANGLE? Is it immediate? It doesn\u0027t require a eglSwapbuffers/QueuePresent from EGL or Vulkan?\n\neglSurfaceAttrib with EGL_SINGLE_BUFFER (EGL_KGR_mutable_render_buffer extension) - use VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR mode because app has to flush or finish to update display. Which we have done.",
      "parentUuid": "39f4cd85_039eb5be",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db73174b_7f8cb135",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-08T18:44:28Z",
      "side": 1,
      "message": "Is there at all any difference with the behavior of EGL_SINGLE_BUFFER between eglCreateWindowsSurface and EGL_KGR_mutable_render_buffer? Without having studied the spec, my guess is that it\u0027s the same thing, so VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR for both cases sounds right.",
      "parentUuid": "1274f320_941bd816",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68f5abab_6a6cdc16",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-08T20:39:36Z",
      "side": 1,
      "message": "KHR_mutable_render_buffer text:\n\n    \"This extension does not guarantee when rendering results appear on-screen.\n    To avoid incorrect results, applications will need to use mechanisms not\n    included in this extension to synchronize rendering with the display.\"\n\nSo we found that an application was using a glFlush or glFinish to cause the screen to update - so We added a swapBuffers() to trigger the queueBuffer(). So we used VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR. Triggered by glFlush.\n\n\neglCreateWindowSurface with EGL_SINGLE_BUFFER, spec says very little. Other than it expects display and GLES to be sharing the same buffer - old school. Which sounds like Vulkan VkPresentMode: VK_PRESENT_MODE_IMMEDIATE_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR. The second I don\u0027t think is well supported, and the first, I\u0027m not sure if its fully implemented in ANGLE - that is, if we use that mode, is it updating every screen scan? Do you know?\n\nIf IMMEDIATE mode is fully implemented in ANGLE, then I think I should use that.\nSorry I didn\u0027t catch this earlier.",
      "parentUuid": "db73174b_7f8cb135",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "997d7b4a_0dd5ad41",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-11T20:00:58Z",
      "side": 1,
      "message": "Actually Jeff I think we should have used VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR for KHR_mutable_render_buffer as well. I took a look and the description of DEMAND_REFRESH says that the presentation engine is only required to update on QP (vkQueuePresent), even though it may: update the screen sporadically.\n\nSo the fact that we had to call swapBuffers() on flush was not really an platform bug workaround, but an ANGLE bug workaround, it was due to the fact that we chose DEMAND_REFRESH even though the EGL spec really meant for us to use CONTINUOUS_REFRESH.\n\nBefore we move on with this extension, do you think you could try changing current ANGLE\u0027s code to use CONTINUOUS_REFRESH instead of DEMAND_REFRESH and remove the swapbuffersOnFlushOrFinishWithSingleBuffer workaround? If that works as expected, then we can build this change on top of that to use the same present mode.",
      "parentUuid": "68f5abab_6a6cdc16",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59a0718f_9bfdf3bf",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1070,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-21T21:17:03Z",
      "side": 1,
      "message": "We had this resolved.",
      "parentUuid": "997d7b4a_0dd5ad41",
      "range": {
        "startLine": 1065,
        "startChar": 0,
        "endLine": 1070,
        "endChar": 5
      },
      "revId": "2cc09c665d72a903c076b20789ba355949169253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}