{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c625aa30_f229aa3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-09-17T16:39:48Z",
      "side": 1,
      "message": "This is an initial draft for capturing bufferstorages with the coherent map bit.\nFor Dota Underlords it is sufficient to check for changes on glFenceSync, as it behaves according to spec when using the GL_MAP_COHERENT_BIT.\nBefore capture the buffer is hashed to see if any changes occured.\nSince this also needs to happen for unbound (but mapped) buffers, I will improve this by utilizing mprotect to detect writes.\n",
      "revId": "c6bcd865ec5310f991bc9c8176a398d17684e439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71f4587a_5e54d09a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-17T16:46:55Z",
      "side": 1,
      "message": "Hey Lubosz,\n\nIs this your proposed final implementation? Seems like FenceSync isn\u0027t directly related to BufferStorage behaiour.",
      "parentUuid": "c625aa30_f229aa3e",
      "revId": "c6bcd865ec5310f991bc9c8176a398d17684e439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4691eacd_3f336fb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-09-17T16:54:33Z",
      "side": 1,
      "message": "This is only a draft of my current implementation, which I published to show my current approach, as it also works with Dota Underlords.\nI will replace this approach by using mprotect.\n\nThe reason why I am checking for updates on glFenceSync is from https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_buffer_storage.txt:\n\nIf MAP_COHERENT_BIT_EXT is set and the server does a write, the app must\ncall FenceSync with SYNC_GPU_COMMANDS_COMPLETE (or Finish). Then the\nCPU will see the writes after the sync is complete.\n\nFor Dota is also sufficient to check for updates on glFenceSync, which is called far less frequently than i.e. glDrawElementsInstanced.",
      "parentUuid": "71f4587a_5e54d09a",
      "revId": "c6bcd865ec5310f991bc9c8176a398d17684e439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2ece147_7197c010",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-17T16:56:34Z",
      "side": 1,
      "message": "Hm, okay. Some kind of test showing their behaviour would be warranted. That might handle server writes that DotA reads back, but it doesn\u0027t handle client writes that ANGLE then reads. Are they reading from or writing to this buffer?",
      "parentUuid": "4691eacd_3f336fb1",
      "revId": "c6bcd865ec5310f991bc9c8176a398d17684e439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b797fdca_bd1e4be2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491687
      },
      "writtenOn": "2021-09-17T17:07:09Z",
      "side": 1,
      "message": "The flags on these buffers are:\nGL_MAP_WRITE_BIT | GL_MAP_UNSYNCHRONIZED_BIT | GL_MAP_PERSISTENT_BIT_EXT | GL_MAP_COHERENT_BIT_EXT\n\nSo GL_MAP_READ_BIT is not set.\n\nIn the case of glFenceSync being unrelated to reads by ANGLE it might be coincidental that this approach works and checking for updates on draw calls would be required. I will make sure this is covered in a test if this approach should land, but actually detecting writes with mprotect is more promising.",
      "parentUuid": "b2ece147_7197c010",
      "revId": "c6bcd865ec5310f991bc9c8176a398d17684e439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}